// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16684 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 79316 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2190 0 0
// MC_Start ( ) ;
  78: CALL 17831 0 0
// Action ;
  82: CALL 7665 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 231000
 212: PUSH
 213: LD_INT 210000
 215: PUSH
 216: LD_INT 199500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 73
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 74
 312: PUSH
 313: LD_INT 28
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 6
 332: PUSH
 333: LD_INT 8
 335: PUSH
 336: LD_INT 9
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 38632 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 38632 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 38632 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 49
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 42
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 39058 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 35
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 29
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 44893 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 20
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 44893 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 20
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 20
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 21
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 44893 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 21
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 21
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 21
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 21
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 30
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 44893 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 22
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 44893 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 22
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 22
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 22
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 22
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 23
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 44893 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 23
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 23
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 23
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 23
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 24
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 44893 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 24
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 24
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 24
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 24
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 25
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 44893 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 26
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 44893 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 26
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 26
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 26
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 26
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 27
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 44893 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 27
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 27
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 28
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 44893 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 28
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 28
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 28
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 28
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 30
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 44893 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 31
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 44893 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 31
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 31
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 32
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 44893 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 32
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 32
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 33
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 44893 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 33
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 33
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 21
1283: PUSH
1284: LD_EXP 22
1288: PUSH
1289: LD_EXP 23
1293: PUSH
1294: LD_EXP 24
1298: PUSH
1299: LD_EXP 25
1303: PUSH
1304: LD_EXP 26
1308: PUSH
1309: LD_EXP 27
1313: PUSH
1314: LD_EXP 28
1318: PUSH
1319: LD_EXP 30
1323: PUSH
1324: LD_EXP 31
1328: PUSH
1329: LD_EXP 32
1333: PUSH
1334: LD_EXP 33
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1468
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: PUSH
1445: LD_INT 2
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: IN
1452: IFFALSE 1466
// SetClass ( i , class_soldier ) ;
1454: LD_VAR 0 2
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: CALL_OW 336
1466: GO 1429
1468: POP
1469: POP
// if tmp < 12 then
1470: LD_VAR 0 5
1474: PUSH
1475: LD_INT 12
1477: LESS
1478: IFFALSE 1572
// begin k := 16 - tmp ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_INT 16
1487: PUSH
1488: LD_VAR 0 5
1492: MINUS
1493: ST_TO_ADDR
// for i = 1 to k do
1494: LD_ADDR_VAR 0 2
1498: PUSH
1499: DOUBLE
1500: LD_INT 1
1502: DEC
1503: ST_TO_ADDR
1504: LD_VAR 0 3
1508: PUSH
1509: FOR_TO
1510: IFFALSE 1570
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1512: LD_INT 0
1514: PPUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 3
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 4
1538: PPUSH
1539: CALL_OW 12
1543: ARRAY
1544: PPUSH
1545: LD_INT 6
1547: PPUSH
1548: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1552: LD_ADDR_VAR 0 5
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: CALL_OW 44
1566: ADD
1567: ST_TO_ADDR
// end ;
1568: GO 1509
1570: POP
1571: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1572: LD_ADDR_EXP 19
1576: PUSH
1577: LD_STRING 1
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT 12
1585: PPUSH
1586: LD_INT -5
1588: PUSH
1589: LD_EXP 20
1593: PUSH
1594: LD_INT -2
1596: PUSH
1597: LD_INT -3
1599: PUSH
1600: LD_INT -5
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: PUSH
1610: LD_VAR 0 5
1614: ADD
1615: PUSH
1616: LD_INT -6
1618: PUSH
1619: LD_INT -4
1621: PUSH
1622: LD_EXP 29
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: ADD
1632: PPUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 4
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 5
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 42
1695: ST_TO_ADDR
// others := tmp diff selected ;
1696: LD_ADDR_VAR 0 8
1700: PUSH
1701: LD_VAR 0 5
1705: PUSH
1706: LD_EXP 19
1710: DIFF
1711: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1712: LD_ADDR_VAR 0 8
1716: PUSH
1717: LD_VAR 0 8
1721: PUSH
1722: LD_EXP 21
1726: PUSH
1727: LD_EXP 22
1731: PUSH
1732: LD_EXP 23
1736: PUSH
1737: LD_EXP 24
1741: PUSH
1742: LD_EXP 25
1746: PUSH
1747: LD_EXP 26
1751: PUSH
1752: LD_EXP 27
1756: PUSH
1757: LD_EXP 28
1761: PUSH
1762: LD_EXP 30
1766: PUSH
1767: LD_EXP 31
1771: PUSH
1772: LD_EXP 32
1776: PUSH
1777: LD_EXP 33
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: DIFF
1796: ST_TO_ADDR
// if others then
1797: LD_VAR 0 8
1801: IFFALSE 1815
// SaveCharacters ( others , 11_others ) ;
1803: LD_VAR 0 8
1807: PPUSH
1808: LD_STRING 11_others
1810: PPUSH
1811: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1815: LD_ADDR_VAR 0 6
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: LD_INT 4
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 2
1840: PUSH
1841: LD_INT 2
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 5
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 4
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 5
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 2
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 7
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 7
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: ST_TO_ADDR
// for i in JMM ^ selected do
1917: LD_ADDR_VAR 0 2
1921: PUSH
1922: LD_EXP 20
1926: PUSH
1927: LD_EXP 19
1931: ADD
1932: PUSH
1933: FOR_IN
1934: IFFALSE 2123
// begin if GetClass ( i ) = 3 then
1936: LD_VAR 0 2
1940: PPUSH
1941: CALL_OW 257
1945: PUSH
1946: LD_INT 3
1948: EQUAL
1949: IFFALSE 2106
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1951: LD_ADDR_OWVAR 37
1955: PUSH
1956: LD_VAR 0 6
1960: PUSH
1961: LD_INT 1
1963: ARRAY
1964: PUSH
1965: LD_INT 1
1967: ARRAY
1968: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1969: LD_ADDR_OWVAR 39
1973: PUSH
1974: LD_VAR 0 6
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PUSH
1983: LD_INT 2
1985: ARRAY
1986: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1987: LD_ADDR_OWVAR 38
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: ARRAY
2000: PUSH
2001: LD_INT 3
2003: ARRAY
2004: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2005: LD_ADDR_OWVAR 40
2009: PUSH
2010: LD_VAR 0 6
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PUSH
2019: LD_INT 4
2021: ARRAY
2022: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2023: LD_ADDR_VAR 0 6
2027: PUSH
2028: LD_VAR 0 6
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 3
2040: ST_TO_ADDR
// veh := CreateVehicle ;
2041: LD_ADDR_VAR 0 7
2045: PUSH
2046: CALL_OW 45
2050: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2051: LD_VAR 0 7
2055: PPUSH
2056: LD_INT 8
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2066: LD_VAR 0 2
2070: PPUSH
2071: LD_VAR 0 7
2075: PPUSH
2076: CALL_OW 52
// if i = JMM then
2080: LD_VAR 0 2
2084: PUSH
2085: LD_EXP 20
2089: EQUAL
2090: IFFALSE 2104
// SetMark ( veh , 1 ) ;
2092: LD_VAR 0 7
2096: PPUSH
2097: LD_INT 1
2099: PPUSH
2100: CALL_OW 242
// end else
2104: GO 2121
// PlaceUnitArea ( i , am_hum_start , false ) ;
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 9
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 49
// end ;
2121: GO 1933
2123: POP
2124: POP
// vc_chassis := us_medium_tracked ;
2125: LD_ADDR_OWVAR 37
2129: PUSH
2130: LD_INT 3
2132: ST_TO_ADDR
// vc_engine := engine_solar ;
2133: LD_ADDR_OWVAR 39
2137: PUSH
2138: LD_INT 2
2140: ST_TO_ADDR
// vc_control := control_computer ;
2141: LD_ADDR_OWVAR 38
2145: PUSH
2146: LD_INT 3
2148: ST_TO_ADDR
// vc_weapon := us_radar ;
2149: LD_ADDR_OWVAR 40
2153: PUSH
2154: LD_INT 11
2156: ST_TO_ADDR
// veh := CreateVehicle ;
2157: LD_ADDR_VAR 0 7
2161: PUSH
2162: CALL_OW 45
2166: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2167: LD_VAR 0 7
2171: PPUSH
2172: LD_INT 87
2174: PPUSH
2175: LD_INT 142
2177: PPUSH
2178: LD_INT 0
2180: PPUSH
2181: CALL_OW 48
// end ; end_of_file
2185: LD_VAR 0 1
2189: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2190: LD_INT 0
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2198: LD_ADDR_VAR 0 5
2202: PUSH
2203: LD_INT 6
2205: PUSH
2206: LD_INT 7
2208: PUSH
2209: LD_INT 7
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_OWVAR 67
2221: ARRAY
2222: ST_TO_ADDR
// uc_side := 2 ;
2223: LD_ADDR_OWVAR 20
2227: PUSH
2228: LD_INT 2
2230: ST_TO_ADDR
// uc_nation := 2 ;
2231: LD_ADDR_OWVAR 21
2235: PUSH
2236: LD_INT 2
2238: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2239: LD_ADDR_OWVAR 37
2243: PUSH
2244: LD_INT 14
2246: ST_TO_ADDR
// vc_engine := engine_siberite ;
2247: LD_ADDR_OWVAR 39
2251: PUSH
2252: LD_INT 3
2254: ST_TO_ADDR
// vc_control := control_manual ;
2255: LD_ADDR_OWVAR 38
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2263: LD_ADDR_OWVAR 40
2267: PUSH
2268: LD_INT 31
2270: ST_TO_ADDR
// for i = 1 to 3 do
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: DOUBLE
2277: LD_INT 1
2279: DEC
2280: ST_TO_ADDR
2281: LD_INT 3
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2369
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2287: LD_INT 0
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: LD_VAR 0 5
2297: PPUSH
2298: CALL_OW 380
// un := CreateVehicle ;
2302: LD_ADDR_VAR 0 4
2306: PUSH
2307: CALL_OW 45
2311: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2312: LD_VAR 0 4
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: CALL_OW 12
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2332: LD_VAR 0 4
2336: PPUSH
2337: LD_INT 156
2339: PPUSH
2340: LD_INT 15
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2353: CALL_OW 44
2357: PPUSH
2358: LD_VAR 0 4
2362: PPUSH
2363: CALL_OW 52
// end ;
2367: GO 2284
2369: POP
2370: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2371: LD_ADDR_EXP 36
2375: PUSH
2376: LD_INT 94
2378: PPUSH
2379: LD_INT 28
2381: PPUSH
2382: LD_STRING dammam
2384: PPUSH
2385: LD_VAR 0 5
2389: PPUSH
2390: LD_INT 10000
2392: PUSH
2393: LD_INT 1000
2395: PUSH
2396: LD_INT 300
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PPUSH
2404: LD_INT 1
2406: NEG
2407: PUSH
2408: LD_INT 5
2410: PUSH
2411: LD_INT 1
2413: NEG
2414: PUSH
2415: LD_INT 4
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PPUSH
2424: CALL 54935 0 6
2428: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2429: LD_ADDR_EXP 36
2433: PUSH
2434: LD_EXP 36
2438: PUSH
2439: LD_INT 122
2441: PPUSH
2442: LD_INT 25
2444: PPUSH
2445: LD_STRING 
2447: PPUSH
2448: LD_VAR 0 5
2452: PPUSH
2453: LD_INT 500
2455: PUSH
2456: LD_INT 60
2458: PUSH
2459: LD_INT 0
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: LIST
2466: PPUSH
2467: LD_INT 1
2469: NEG
2470: PUSH
2471: LD_INT 4
2473: PUSH
2474: LD_INT 2
2476: PUSH
2477: LD_INT 0
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PPUSH
2486: CALL 54935 0 6
2490: UNION
2491: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2492: LD_ADDR_EXP 34
2496: PUSH
2497: LD_INT 45
2499: PPUSH
2500: LD_INT 24
2502: PPUSH
2503: LD_STRING jeddah
2505: PPUSH
2506: LD_VAR 0 5
2510: PPUSH
2511: LD_INT 700
2513: PUSH
2514: LD_INT 300
2516: PUSH
2517: LD_INT 10
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: PPUSH
2525: LD_INT 1
2527: NEG
2528: PUSH
2529: LD_INT 5
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: LD_INT 2
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: PPUSH
2544: CALL 54935 0 6
2548: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2549: LD_ADDR_EXP 35
2553: PUSH
2554: LD_INT 7
2556: PPUSH
2557: LD_INT 27
2559: PPUSH
2560: LD_STRING riyadh
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 500
2570: PUSH
2571: LD_INT 60
2573: PUSH
2574: LD_INT 0
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 2
2587: PUSH
2588: LD_INT 3
2590: PUSH
2591: LD_INT 1
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL 54935 0 6
2604: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2605: LD_ADDR_EXP 38
2609: PUSH
2610: LD_INT 204
2612: PPUSH
2613: LD_INT 26
2615: PPUSH
2616: LD_STRING 
2618: PPUSH
2619: LD_VAR 0 5
2623: PPUSH
2624: LD_INT 500
2626: PUSH
2627: LD_INT 50
2629: PUSH
2630: LD_INT 0
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PPUSH
2638: LD_INT 1
2640: NEG
2641: PUSH
2642: LD_INT 3
2644: PUSH
2645: LD_INT 3
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL 54935 0 6
2661: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2662: LD_ADDR_EXP 49
2666: PUSH
2667: LD_EXP 36
2671: PUSH
2672: LD_EXP 34
2676: PUSH
2677: LD_EXP 38
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: LD_INT 22
2694: PUSH
2695: LD_INT 2
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 31
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 58
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: FOR_IN
2729: IFFALSE 2854
// begin if GetBase ( i ) then
2731: LD_VAR 0 2
2735: PPUSH
2736: CALL_OW 274
2740: IFFALSE 2744
// continue ;
2742: GO 2728
// d := GetDir ( i ) ;
2744: LD_ADDR_VAR 0 3
2748: PUSH
2749: LD_VAR 0 2
2753: PPUSH
2754: CALL_OW 254
2758: ST_TO_ADDR
// if d < 3 then
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 3
2766: LESS
2767: IFFALSE 2785
// d := d + 3 else
2769: LD_ADDR_VAR 0 3
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: LD_INT 3
2781: PLUS
2782: ST_TO_ADDR
2783: GO 2799
// d := d - 3 ;
2785: LD_ADDR_VAR 0 3
2789: PUSH
2790: LD_VAR 0 3
2794: PUSH
2795: LD_INT 3
2797: MINUS
2798: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2799: LD_INT 0
2801: PPUSH
2802: LD_INT 8
2804: PPUSH
2805: LD_VAR 0 5
2809: PPUSH
2810: CALL_OW 380
// un := CreateHuman ;
2814: LD_ADDR_VAR 0 4
2818: PUSH
2819: CALL_OW 44
2823: ST_TO_ADDR
// SetDir ( un , d ) ;
2824: LD_VAR 0 4
2828: PPUSH
2829: LD_VAR 0 3
2833: PPUSH
2834: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 4
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// end ;
2852: GO 2728
2854: POP
2855: POP
// if Difficulty > 1 then
2856: LD_OWVAR 67
2860: PUSH
2861: LD_INT 1
2863: GREATER
2864: IFFALSE 3235
// begin ar_kamikadze := [ ] ;
2866: LD_ADDR_EXP 41
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2873: LD_INT 0
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_VAR 0 5
2883: PPUSH
2884: CALL_OW 380
// un := CreateHuman ;
2888: LD_ADDR_VAR 0 4
2892: PUSH
2893: CALL_OW 44
2897: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2898: LD_VAR 0 4
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 23
2917: PPUSH
2918: LD_INT 44
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 48
// ComCrawl ( un ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: CALL_OW 137
// un := CreateHuman ;
2937: LD_ADDR_VAR 0 4
2941: PUSH
2942: CALL_OW 44
2946: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2947: LD_VAR 0 4
2951: PPUSH
2952: LD_INT 3
2954: PPUSH
2955: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_INT 30
2966: PPUSH
2967: LD_INT 39
2969: PPUSH
2970: LD_INT 0
2972: PPUSH
2973: CALL_OW 48
// ComCrawl ( un ) ;
2977: LD_VAR 0 4
2981: PPUSH
2982: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2986: LD_INT 0
2988: PPUSH
2989: LD_INT 17
2991: PPUSH
2992: LD_VAR 0 5
2996: PPUSH
2997: CALL_OW 380
// un := CreateHuman ;
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_INT 3
3018: PPUSH
3019: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3023: LD_VAR 0 4
3027: PPUSH
3028: LD_INT 45
3030: PPUSH
3031: LD_INT 86
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( un ) ;
3041: LD_VAR 0 4
3045: PPUSH
3046: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3050: LD_ADDR_EXP 41
3054: PUSH
3055: LD_EXP 41
3059: PPUSH
3060: LD_EXP 41
3064: PUSH
3065: LD_INT 1
3067: PLUS
3068: PPUSH
3069: LD_VAR 0 4
3073: PPUSH
3074: CALL_OW 1
3078: ST_TO_ADDR
// un := CreateHuman ;
3079: LD_ADDR_VAR 0 4
3083: PUSH
3084: CALL_OW 44
3088: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3089: LD_VAR 0 4
3093: PPUSH
3094: LD_INT 3
3096: PPUSH
3097: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3101: LD_VAR 0 4
3105: PPUSH
3106: LD_INT 60
3108: PPUSH
3109: LD_INT 85
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 48
// ComHold ( un ) ;
3119: LD_VAR 0 4
3123: PPUSH
3124: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3128: LD_ADDR_EXP 41
3132: PUSH
3133: LD_EXP 41
3137: PPUSH
3138: LD_EXP 41
3142: PUSH
3143: LD_INT 1
3145: PLUS
3146: PPUSH
3147: LD_VAR 0 4
3151: PPUSH
3152: CALL_OW 1
3156: ST_TO_ADDR
// un := CreateHuman ;
3157: LD_ADDR_VAR 0 4
3161: PUSH
3162: CALL_OW 44
3166: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3167: LD_VAR 0 4
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3179: LD_VAR 0 4
3183: PPUSH
3184: LD_INT 222
3186: PPUSH
3187: LD_INT 166
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: CALL_OW 48
// ComHold ( un ) ;
3197: LD_VAR 0 4
3201: PPUSH
3202: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3206: LD_ADDR_EXP 41
3210: PUSH
3211: LD_EXP 41
3215: PPUSH
3216: LD_EXP 41
3220: PUSH
3221: LD_INT 1
3223: PLUS
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: CALL_OW 1
3234: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3235: LD_ADDR_EXP 39
3239: PUSH
3240: EMPTY
3241: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3242: LD_INT 1
3244: PPUSH
3245: LD_INT 1
3247: PPUSH
3248: LD_VAR 0 5
3252: PPUSH
3253: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3257: LD_ADDR_OWVAR 26
3261: PUSH
3262: LD_STRING Pavel Grigorovic
3264: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3265: LD_ADDR_OWVAR 33
3269: PUSH
3270: LD_STRING SecondCharsGal
3272: ST_TO_ADDR
// hc_face_number := 4 ;
3273: LD_ADDR_OWVAR 34
3277: PUSH
3278: LD_INT 4
3280: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3281: LD_ADDR_EXP 39
3285: PUSH
3286: LD_EXP 39
3290: PPUSH
3291: LD_INT 1
3293: PPUSH
3294: CALL_OW 44
3298: PPUSH
3299: CALL_OW 1
3303: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3304: LD_INT 2
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_VAR 0 5
3314: PPUSH
3315: CALL_OW 380
// hc_name := Lucy Sebel ;
3319: LD_ADDR_OWVAR 26
3323: PUSH
3324: LD_STRING Lucy Sebel
3326: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3327: LD_ADDR_OWVAR 33
3331: PUSH
3332: LD_STRING SecondCharsGal
3334: ST_TO_ADDR
// hc_face_number := 15 ;
3335: LD_ADDR_OWVAR 34
3339: PUSH
3340: LD_INT 15
3342: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3343: LD_ADDR_EXP 39
3347: PUSH
3348: LD_EXP 39
3352: PPUSH
3353: LD_INT 2
3355: PPUSH
3356: CALL_OW 44
3360: PPUSH
3361: CALL_OW 1
3365: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3366: LD_INT 2
3368: PPUSH
3369: LD_INT 4
3371: PPUSH
3372: LD_VAR 0 5
3376: PPUSH
3377: CALL_OW 380
// hc_gallery :=  ;
3381: LD_ADDR_OWVAR 33
3385: PUSH
3386: LD_STRING 
3388: ST_TO_ADDR
// hc_name :=  ;
3389: LD_ADDR_OWVAR 26
3393: PUSH
3394: LD_STRING 
3396: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3397: LD_ADDR_EXP 39
3401: PUSH
3402: LD_EXP 39
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: CALL_OW 44
3414: PPUSH
3415: CALL_OW 1
3419: ST_TO_ADDR
// hc_sex := sex_male ;
3420: LD_ADDR_OWVAR 27
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// hc_class = 11 ;
3428: LD_ADDR_OWVAR 28
3432: PUSH
3433: LD_INT 11
3435: ST_TO_ADDR
// hc_gallery = sandar ;
3436: LD_ADDR_OWVAR 33
3440: PUSH
3441: LD_STRING sandar
3443: ST_TO_ADDR
// hc_face_number = 33 ;
3444: LD_ADDR_OWVAR 34
3448: PUSH
3449: LD_INT 33
3451: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3452: LD_ADDR_OWVAR 26
3456: PUSH
3457: LD_STRING Thabit Muhair Saliba
3459: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3460: LD_ADDR_OWVAR 31
3464: PUSH
3465: LD_INT 0
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 0
3473: PUSH
3474: LD_INT 0
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: ST_TO_ADDR
// Saliba = CreateHuman ;
3483: LD_ADDR_EXP 43
3487: PUSH
3488: CALL_OW 44
3492: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3493: LD_EXP 43
3497: PPUSH
3498: LD_INT 7
3500: PPUSH
3501: CALL_OW 52
// if gensher_active then
3505: LD_EXP 18
3509: IFFALSE 3536
// begin Gensher = NewCharacter ( Dietrich ) ;
3511: LD_ADDR_EXP 44
3515: PUSH
3516: LD_STRING Dietrich
3518: PPUSH
3519: CALL_OW 25
3523: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3524: LD_EXP 44
3528: PPUSH
3529: LD_INT 94
3531: PPUSH
3532: CALL_OW 52
// end ; InitHc ;
3536: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3540: LD_ADDR_EXP 40
3544: PUSH
3545: EMPTY
3546: ST_TO_ADDR
// for i = 1 to 5 do
3547: LD_ADDR_VAR 0 2
3551: PUSH
3552: DOUBLE
3553: LD_INT 1
3555: DEC
3556: ST_TO_ADDR
3557: LD_INT 5
3559: PUSH
3560: FOR_TO
3561: IFFALSE 3733
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3563: LD_INT 13
3565: PUSH
3566: LD_INT 14
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 1
3587: PUSH
3588: LD_INT 2
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: PUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 2
3600: PPUSH
3601: CALL_OW 12
3605: ARRAY
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 27
3615: PUSH
3616: LD_INT 26
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 1
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: CALL_OW 12
3634: ARRAY
3635: PPUSH
3636: LD_INT 60
3638: PPUSH
3639: LD_INT 100
3641: PPUSH
3642: CALL_OW 12
3646: PPUSH
3647: CALL 51526 0 5
// un := CreateVehicle ;
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: CALL_OW 45
3660: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3661: LD_ADDR_EXP 40
3665: PUSH
3666: LD_EXP 40
3670: PPUSH
3671: LD_EXP 40
3675: PUSH
3676: LD_INT 1
3678: PLUS
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 1
3689: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3690: LD_VAR 0 4
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: LD_INT 5
3700: PPUSH
3701: CALL_OW 12
3705: PPUSH
3706: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_INT 124
3717: PPUSH
3718: LD_INT 141
3720: PPUSH
3721: LD_INT 8
3723: PPUSH
3724: LD_INT 0
3726: PPUSH
3727: CALL_OW 50
// end ;
3731: GO 3560
3733: POP
3734: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3735: LD_ADDR_EXP 42
3739: PUSH
3740: EMPTY
3741: PUSH
3742: EMPTY
3743: PUSH
3744: EMPTY
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 3
3763: PUSH
3764: LD_INT 3
3766: PUSH
3767: LD_INT 4
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3996
// for i = 1 to 3 do
3784: LD_ADDR_VAR 0 2
3788: PUSH
3789: DOUBLE
3790: LD_INT 1
3792: DEC
3793: ST_TO_ADDR
3794: LD_INT 3
3796: PUSH
3797: FOR_TO
3798: IFFALSE 3992
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3800: LD_INT 14
3802: PPUSH
3803: LD_INT 3
3805: PUSH
3806: LD_INT 2
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 2
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: PPUSH
3825: LD_INT 1
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 12
3845: ARRAY
3846: PPUSH
3847: LD_INT 25
3849: PUSH
3850: LD_INT 27
3852: PUSH
3853: LD_INT 26
3855: PUSH
3856: LD_INT 28
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 1
3867: PPUSH
3868: LD_INT 4
3870: PPUSH
3871: CALL_OW 12
3875: ARRAY
3876: PPUSH
3877: LD_INT 100
3879: PPUSH
3880: CALL 51526 0 5
// un := CreateVehicle ;
3884: LD_ADDR_VAR 0 4
3888: PUSH
3889: CALL_OW 45
3893: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3894: LD_ADDR_EXP 42
3898: PUSH
3899: LD_EXP 42
3903: PPUSH
3904: LD_VAR 0 2
3908: PUSH
3909: LD_EXP 42
3913: PUSH
3914: LD_VAR 0 2
3918: ARRAY
3919: PUSH
3920: LD_INT 1
3922: PLUS
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: CALL 51648 0 3
3937: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: LD_INT 5
3948: PPUSH
3949: CALL_OW 12
3953: PPUSH
3954: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3958: LD_VAR 0 4
3962: PPUSH
3963: LD_INT 20
3965: PUSH
3966: LD_INT 21
3968: PUSH
3969: LD_INT 22
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: PUSH
3977: LD_VAR 0 2
3981: ARRAY
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// end ;
3990: GO 3797
3992: POP
3993: POP
3994: GO 3781
3996: POP
3997: POP
// InitHc ;
3998: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4002: LD_INT 4
4004: PPUSH
4005: LD_INT 5
4007: PPUSH
4008: LD_INT 10
4010: PPUSH
4011: LD_INT 5
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL_OW 58
// end ;
4021: LD_VAR 0 1
4025: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4026: LD_EXP 41
4030: IFFALSE 4104
4032: GO 4034
4034: DISABLE
4035: LD_INT 0
4037: PPUSH
// begin enable ;
4038: ENABLE
// for i in ar_kamikadze do
4039: LD_ADDR_VAR 0 1
4043: PUSH
4044: LD_EXP 41
4048: PUSH
4049: FOR_IN
4050: IFFALSE 4102
// if See ( 1 , i ) then
4052: LD_INT 1
4054: PPUSH
4055: LD_VAR 0 1
4059: PPUSH
4060: CALL_OW 292
4064: IFFALSE 4100
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4066: LD_VAR 0 1
4070: PPUSH
4071: LD_INT 81
4073: PUSH
4074: LD_INT 2
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PPUSH
4081: CALL_OW 69
4085: PPUSH
4086: LD_VAR 0 1
4090: PPUSH
4091: CALL_OW 74
4095: PPUSH
4096: CALL_OW 115
4100: GO 4049
4102: POP
4103: POP
// end ;
4104: PPOPN 1
4106: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4107: LD_EXP 13
4111: IFFALSE 4428
4113: GO 4115
4115: DISABLE
4116: LD_INT 0
4118: PPUSH
4119: PPUSH
4120: PPUSH
4121: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4122: LD_INT 35
4124: PPUSH
4125: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4129: LD_INT 1
4131: PPUSH
4132: CALL 39404 0 1
4136: PUSH
4137: LD_INT 0
4139: EQUAL
4140: IFFALSE 4122
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 14
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 2
4153: PUSH
4154: LD_INT 32
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: EMPTY
4164: LIST
4165: PPUSH
4166: CALL 38950 0 2
// repeat wait ( 0 0$1 ) ;
4170: LD_INT 35
4172: PPUSH
4173: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4177: LD_EXP 68
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_INT 33
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 34
4198: PUSH
4199: LD_INT 32
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PPUSH
4210: CALL_OW 72
4214: IFFALSE 4170
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4216: LD_ADDR_VAR 0 2
4220: PUSH
4221: LD_EXP 68
4225: PUSH
4226: LD_INT 1
4228: ARRAY
4229: PPUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 34
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: PUSH
4259: LD_INT 1
4261: ARRAY
4262: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4263: LD_ADDR_VAR 0 4
4267: PUSH
4268: LD_INT 5
4270: PPUSH
4271: CALL_OW 469
4275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_INT 5
4290: PPUSH
4291: CALL_OW 469
4295: ST_TO_ADDR
// tmp := 100 ;
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: LD_INT 100
4303: ST_TO_ADDR
// if pos then
4304: LD_VAR 0 4
4308: IFFALSE 4348
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4310: LD_ADDR_VAR 0 3
4314: PUSH
4315: LD_INT 2
4317: PPUSH
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 1
4325: ARRAY
4326: PPUSH
4327: LD_VAR 0 4
4331: PUSH
4332: LD_INT 2
4334: ARRAY
4335: PPUSH
4336: LD_INT 20
4338: PPUSH
4339: CALL 52544 0 4
4343: PUSH
4344: LD_INT 4
4346: ARRAY
4347: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4348: LD_VAR 0 4
4352: PUSH
4353: LD_EXP 14
4357: NOT
4358: AND
4359: PUSH
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 10
4367: LESS
4368: AND
4369: IFFALSE 4276
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4371: LD_VAR 0 2
4375: PPUSH
4376: LD_VAR 0 4
4380: PUSH
4381: LD_INT 1
4383: ARRAY
4384: PPUSH
4385: LD_VAR 0 4
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4398: LD_VAR 0 2
4402: PPUSH
4403: LD_INT 198
4405: PPUSH
4406: LD_INT 113
4408: PPUSH
4409: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4413: LD_VAR 0 2
4417: PPUSH
4418: LD_INT 124
4420: PPUSH
4421: LD_INT 7
4423: PPUSH
4424: CALL_OW 171
// end ;
4428: PPOPN 4
4430: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4431: LD_EXP 6
4435: IFFALSE 7092
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
4447: PPUSH
4448: PPUSH
4449: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4450: LD_ADDR_VAR 0 4
4454: PUSH
4455: LD_INT 5
4457: PUSH
4458: LD_INT 6
4460: PUSH
4461: LD_INT 7
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: PUSH
4469: LD_OWVAR 67
4473: ARRAY
4474: ST_TO_ADDR
// coords := [ ] ;
4475: LD_ADDR_VAR 0 5
4479: PUSH
4480: EMPTY
4481: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4482: LD_ADDR_VAR 0 6
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: LD_INT 0
4498: PUSH
4499: LD_INT 1
4501: PUSH
4502: LD_INT 0
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4529: LD_INT 1
4531: PPUSH
4532: LD_INT 14
4534: PUSH
4535: LD_INT 1
4537: PUSH
4538: LD_INT 2
4540: PUSH
4541: LD_INT 28
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 14
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: LD_INT 2
4558: PUSH
4559: LD_INT 25
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 14
4570: PUSH
4571: LD_INT 1
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 28
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 14
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: LD_INT 2
4594: PUSH
4595: LD_INT 29
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PPUSH
4610: CALL 38950 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4614: LD_INT 21000
4616: PUSH
4617: LD_INT 19950
4619: PUSH
4620: LD_INT 18900
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_OWVAR 67
4632: ARRAY
4633: PPUSH
4634: CALL_OW 67
// InitHc ;
4638: CALL_OW 19
// InitUc ;
4642: CALL_OW 18
// uc_side := 2 ;
4646: LD_ADDR_OWVAR 20
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// uc_nation := 2 ;
4654: LD_ADDR_OWVAR 21
4658: PUSH
4659: LD_INT 2
4661: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: EMPTY
4668: PUSH
4669: EMPTY
4670: PUSH
4671: EMPTY
4672: PUSH
4673: EMPTY
4674: PUSH
4675: EMPTY
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: LD_VAR 0 3
4693: PPUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 68
4701: PUSH
4702: LD_INT 1
4704: ARRAY
4705: PUSH
4706: LD_INT 34
4708: PUSH
4709: LD_INT 32
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: DIFF
4721: PPUSH
4722: CALL_OW 1
4726: ST_TO_ADDR
// for i = 1 to Difficulty do
4727: LD_ADDR_VAR 0 1
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_OWVAR 67
4741: PUSH
4742: FOR_TO
4743: IFFALSE 4881
// begin uc_side := 2 ;
4745: LD_ADDR_OWVAR 20
4749: PUSH
4750: LD_INT 2
4752: ST_TO_ADDR
// uc_nation := 2 ;
4753: LD_ADDR_OWVAR 21
4757: PUSH
4758: LD_INT 2
4760: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4761: LD_INT 13
4763: PPUSH
4764: LD_INT 3
4766: PPUSH
4767: LD_INT 5
4769: PPUSH
4770: LD_INT 29
4772: PPUSH
4773: LD_INT 100
4775: PPUSH
4776: CALL 51526 0 5
// un := CreateVehicle ;
4780: LD_ADDR_VAR 0 2
4784: PUSH
4785: CALL_OW 45
4789: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4790: LD_ADDR_VAR 0 3
4794: PUSH
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_INT 1
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: ARRAY
4811: PUSH
4812: LD_INT 1
4814: PLUS
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PPUSH
4820: LD_VAR 0 2
4824: PPUSH
4825: CALL 51648 0 3
4829: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4830: LD_VAR 0 2
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4842: LD_VAR 0 2
4846: PPUSH
4847: LD_INT 16
4849: PPUSH
4850: LD_INT 0
4852: PPUSH
4853: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 51
4864: PPUSH
4865: LD_INT 10
4867: PPUSH
4868: CALL_OW 111
// wait ( 0 0$2 ) ;
4872: LD_INT 70
4874: PPUSH
4875: CALL_OW 67
// end ;
4879: GO 4742
4881: POP
4882: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4883: LD_ADDR_VAR 0 5
4887: PUSH
4888: LD_INT 51
4890: PUSH
4891: LD_INT 24
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 75
4900: PUSH
4901: LD_INT 90
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4912: LD_INT 1
4914: PPUSH
4915: LD_VAR 0 3
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: LD_VAR 0 5
4928: PPUSH
4929: LD_VAR 0 6
4933: PPUSH
4934: CALL 39241 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4938: LD_ADDR_VAR 0 1
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 2
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: LIST
4961: PUSH
4962: LD_OWVAR 67
4966: ARRAY
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5069
// begin uc_side := 2 ;
4971: LD_ADDR_OWVAR 20
4975: PUSH
4976: LD_INT 2
4978: ST_TO_ADDR
// uc_nation := 2 ;
4979: LD_ADDR_OWVAR 21
4983: PUSH
4984: LD_INT 2
4986: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4987: LD_INT 0
4989: PPUSH
4990: LD_INT 17
4992: PPUSH
4993: LD_VAR 0 4
4997: PPUSH
4998: CALL_OW 380
// un := CreateHuman ;
5002: LD_ADDR_VAR 0 2
5006: PUSH
5007: CALL_OW 44
5011: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5012: LD_ADDR_VAR 0 3
5016: PUSH
5017: LD_VAR 0 3
5021: PPUSH
5022: LD_INT 2
5024: PUSH
5025: LD_VAR 0 3
5029: PUSH
5030: LD_INT 2
5032: ARRAY
5033: PUSH
5034: LD_INT 1
5036: PLUS
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PPUSH
5042: LD_VAR 0 2
5046: PPUSH
5047: CALL 51648 0 3
5051: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5052: LD_VAR 0 2
5056: PPUSH
5057: LD_INT 13
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4968
5069: POP
5070: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_INT 2
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: LD_INT 3
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: LD_OWVAR 67
5099: ARRAY
5100: PUSH
5101: FOR_TO
5102: IFFALSE 5221
// begin uc_side := 2 ;
5104: LD_ADDR_OWVAR 20
5108: PUSH
5109: LD_INT 2
5111: ST_TO_ADDR
// uc_nation := 2 ;
5112: LD_ADDR_OWVAR 21
5116: PUSH
5117: LD_INT 2
5119: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5120: LD_INT 0
5122: PPUSH
5123: LD_INT 1
5125: PUSH
5126: LD_INT 8
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_INT 1
5135: PPUSH
5136: LD_INT 2
5138: PPUSH
5139: CALL_OW 12
5143: ARRAY
5144: PPUSH
5145: LD_VAR 0 4
5149: PPUSH
5150: CALL_OW 380
// un := CreateHuman ;
5154: LD_ADDR_VAR 0 2
5158: PUSH
5159: CALL_OW 44
5163: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5164: LD_ADDR_VAR 0 3
5168: PUSH
5169: LD_VAR 0 3
5173: PPUSH
5174: LD_INT 2
5176: PUSH
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 2
5184: ARRAY
5185: PUSH
5186: LD_INT 1
5188: PLUS
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: CALL 51648 0 3
5203: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5204: LD_VAR 0 2
5208: PPUSH
5209: LD_INT 13
5211: PPUSH
5212: LD_INT 0
5214: PPUSH
5215: CALL_OW 49
// end ;
5219: GO 5101
5221: POP
5222: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5223: LD_ADDR_VAR 0 5
5227: PUSH
5228: LD_INT 67
5230: PUSH
5231: LD_INT 112
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: LD_INT 85
5240: PUSH
5241: LD_INT 130
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5252: LD_INT 2
5254: PPUSH
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 2
5262: ARRAY
5263: PPUSH
5264: LD_VAR 0 5
5268: PPUSH
5269: LD_VAR 0 6
5273: PPUSH
5274: CALL 39241 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5278: LD_ADDR_VAR 0 1
5282: PUSH
5283: DOUBLE
5284: LD_INT 1
5286: DEC
5287: ST_TO_ADDR
5288: LD_INT 1
5290: PUSH
5291: LD_INT 2
5293: PUSH
5294: LD_INT 3
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_OWVAR 67
5306: ARRAY
5307: PUSH
5308: FOR_TO
5309: IFFALSE 5409
// begin uc_side := 2 ;
5311: LD_ADDR_OWVAR 20
5315: PUSH
5316: LD_INT 2
5318: ST_TO_ADDR
// uc_nation := 2 ;
5319: LD_ADDR_OWVAR 21
5323: PUSH
5324: LD_INT 2
5326: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5327: LD_INT 0
5329: PPUSH
5330: LD_INT 17
5332: PPUSH
5333: LD_VAR 0 4
5337: PPUSH
5338: CALL_OW 380
// un := CreateHuman ;
5342: LD_ADDR_VAR 0 2
5346: PUSH
5347: CALL_OW 44
5351: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: LD_VAR 0 3
5361: PPUSH
5362: LD_INT 3
5364: PUSH
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 3
5372: ARRAY
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PPUSH
5382: LD_VAR 0 2
5386: PPUSH
5387: CALL 51648 0 3
5391: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_INT 14
5399: PPUSH
5400: LD_INT 0
5402: PPUSH
5403: CALL_OW 49
// end ;
5407: GO 5308
5409: POP
5410: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5411: LD_ADDR_VAR 0 5
5415: PUSH
5416: LD_INT 148
5418: PUSH
5419: LD_INT 158
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 148
5428: PUSH
5429: LD_INT 158
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5440: LD_INT 3
5442: PPUSH
5443: LD_VAR 0 3
5447: PUSH
5448: LD_INT 3
5450: ARRAY
5451: PPUSH
5452: LD_VAR 0 5
5456: PPUSH
5457: LD_VAR 0 6
5461: PPUSH
5462: CALL 39241 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 3
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: LD_INT 4
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: PUSH
5490: LD_OWVAR 67
5494: ARRAY
5495: PUSH
5496: FOR_TO
5497: IFFALSE 5721
// begin uc_side := 2 ;
5499: LD_ADDR_OWVAR 20
5503: PUSH
5504: LD_INT 2
5506: ST_TO_ADDR
// uc_nation := 2 ;
5507: LD_ADDR_OWVAR 21
5511: PUSH
5512: LD_INT 2
5514: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5515: LD_INT 14
5517: PPUSH
5518: LD_INT 3
5520: PPUSH
5521: LD_INT 1
5523: PUSH
5524: LD_INT 5
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 1
5533: PPUSH
5534: LD_INT 2
5536: PPUSH
5537: CALL_OW 12
5541: ARRAY
5542: PPUSH
5543: LD_INT 27
5545: PUSH
5546: LD_INT 26
5548: PUSH
5549: LD_INT 28
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 3
5562: PPUSH
5563: CALL_OW 12
5567: ARRAY
5568: PPUSH
5569: LD_INT 100
5571: PPUSH
5572: CALL 51526 0 5
// un := CreateVehicle ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: CALL_OW 45
5585: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_VAR 0 3
5595: PPUSH
5596: LD_INT 4
5598: PUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 4
5606: ARRAY
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PPUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: CALL 51648 0 3
5625: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5626: LD_VAR 0 2
5630: PPUSH
5631: LD_INT 5
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5638: LD_VAR 0 2
5642: PPUSH
5643: LD_INT 15
5645: PPUSH
5646: LD_INT 0
5648: PPUSH
5649: CALL_OW 49
// if GetControl ( un ) = control_manual then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 263
5662: PUSH
5663: LD_INT 1
5665: EQUAL
5666: IFFALSE 5697
// begin PrepareHuman ( false , 3 , skill ) ;
5668: LD_INT 0
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: LD_VAR 0 4
5678: PPUSH
5679: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5683: CALL_OW 44
5687: PPUSH
5688: LD_VAR 0 2
5692: PPUSH
5693: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_INT 179
5704: PPUSH
5705: LD_INT 135
5707: PPUSH
5708: CALL_OW 111
// wait ( 0 0$2 ) ;
5712: LD_INT 70
5714: PPUSH
5715: CALL_OW 67
// end ;
5719: GO 5496
5721: POP
5722: POP
// vc_chassis := 15 ;
5723: LD_ADDR_OWVAR 37
5727: PUSH
5728: LD_INT 15
5730: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5731: LD_ADDR_VAR 0 3
5735: PUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: LD_INT 4
5743: PUSH
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 4
5751: ARRAY
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 45
5765: PPUSH
5766: CALL 51648 0 3
5770: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5771: LD_VAR 0 3
5775: PUSH
5776: LD_INT 4
5778: ARRAY
5779: PUSH
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 4
5787: ARRAY
5788: ARRAY
5789: PPUSH
5790: LD_INT 15
5792: PPUSH
5793: LD_INT 0
5795: PPUSH
5796: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5800: LD_INT 0
5802: PPUSH
5803: LD_INT 11
5805: PPUSH
5806: LD_VAR 0 4
5810: PPUSH
5811: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 3
5824: PPUSH
5825: LD_INT 4
5827: PUSH
5828: LD_VAR 0 3
5832: PUSH
5833: LD_INT 4
5835: ARRAY
5836: PUSH
5837: LD_INT 1
5839: PLUS
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 44
5849: PPUSH
5850: CALL 51648 0 3
5854: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5855: LD_VAR 0 3
5859: PUSH
5860: LD_INT 4
5862: ARRAY
5863: PUSH
5864: LD_VAR 0 3
5868: PUSH
5869: LD_INT 4
5871: ARRAY
5872: ARRAY
5873: PPUSH
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 4
5881: ARRAY
5882: PUSH
5883: LD_VAR 0 3
5887: PUSH
5888: LD_INT 4
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: MINUS
5895: ARRAY
5896: PPUSH
5897: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5901: LD_ADDR_VAR 0 5
5905: PUSH
5906: LD_INT 148
5908: PUSH
5909: LD_INT 140
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5919: LD_INT 1
5921: PPUSH
5922: LD_VAR 0 3
5926: PUSH
5927: LD_INT 4
5929: ARRAY
5930: PPUSH
5931: LD_VAR 0 5
5935: PPUSH
5936: LD_VAR 0 6
5940: PPUSH
5941: CALL 39241 0 4
// if gensher_active then
5945: LD_EXP 18
5949: IFFALSE 6334
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5951: LD_EXP 44
5955: PPUSH
5956: LD_STRING D10-Diet-1
5958: PPUSH
5959: CALL_OW 94
// for i = 1 to 2 do
5963: LD_ADDR_VAR 0 1
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_INT 2
5975: PUSH
5976: FOR_TO
5977: IFFALSE 6115
// begin uc_side := 2 ;
5979: LD_ADDR_OWVAR 20
5983: PUSH
5984: LD_INT 2
5986: ST_TO_ADDR
// uc_nation := 2 ;
5987: LD_ADDR_OWVAR 21
5991: PUSH
5992: LD_INT 2
5994: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
5995: LD_INT 13
5997: PPUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 5
6003: PPUSH
6004: LD_INT 29
6006: PPUSH
6007: LD_INT 100
6009: PPUSH
6010: CALL 51526 0 5
// un := CreateVehicle ;
6014: LD_ADDR_VAR 0 2
6018: PUSH
6019: CALL_OW 45
6023: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6024: LD_ADDR_VAR 0 3
6028: PUSH
6029: LD_VAR 0 3
6033: PPUSH
6034: LD_INT 5
6036: PUSH
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 5
6044: ARRAY
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: LD_VAR 0 2
6058: PPUSH
6059: CALL 51648 0 3
6063: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_INT 0
6071: PPUSH
6072: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_INT 23
6083: PPUSH
6084: LD_INT 0
6086: PPUSH
6087: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6091: LD_VAR 0 2
6095: PPUSH
6096: LD_INT 85
6098: PPUSH
6099: LD_INT 152
6101: PPUSH
6102: CALL_OW 111
// wait ( 0 0$2 ) ;
6106: LD_INT 70
6108: PPUSH
6109: CALL_OW 67
// end ;
6113: GO 5976
6115: POP
6116: POP
// for i = 1 to 3 do
6117: LD_ADDR_VAR 0 1
6121: PUSH
6122: DOUBLE
6123: LD_INT 1
6125: DEC
6126: ST_TO_ADDR
6127: LD_INT 3
6129: PUSH
6130: FOR_TO
6131: IFFALSE 6288
// begin uc_side := 2 ;
6133: LD_ADDR_OWVAR 20
6137: PUSH
6138: LD_INT 2
6140: ST_TO_ADDR
// uc_nation := 2 ;
6141: LD_ADDR_OWVAR 21
6145: PUSH
6146: LD_INT 2
6148: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6149: LD_INT 14
6151: PPUSH
6152: LD_INT 3
6154: PPUSH
6155: LD_INT 5
6157: PPUSH
6158: LD_INT 27
6160: PUSH
6161: LD_INT 28
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 1
6170: PPUSH
6171: LD_INT 2
6173: PPUSH
6174: CALL_OW 12
6178: ARRAY
6179: PPUSH
6180: LD_INT 100
6182: PPUSH
6183: CALL 51526 0 5
// un := CreateVehicle ;
6187: LD_ADDR_VAR 0 2
6191: PUSH
6192: CALL_OW 45
6196: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_VAR 0 3
6206: PPUSH
6207: LD_INT 5
6209: PUSH
6210: LD_VAR 0 3
6214: PUSH
6215: LD_INT 5
6217: ARRAY
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PPUSH
6227: LD_VAR 0 2
6231: PPUSH
6232: CALL 51648 0 3
6236: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6237: LD_VAR 0 2
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6249: LD_VAR 0 2
6253: PPUSH
6254: LD_INT 23
6256: PPUSH
6257: LD_INT 0
6259: PPUSH
6260: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6264: LD_VAR 0 2
6268: PPUSH
6269: LD_INT 85
6271: PPUSH
6272: LD_INT 152
6274: PPUSH
6275: CALL_OW 111
// wait ( 0 0$2 ) ;
6279: LD_INT 70
6281: PPUSH
6282: CALL_OW 67
// end ;
6286: GO 6130
6288: POP
6289: POP
// coords := [ [ 97 , 143 ] ] ;
6290: LD_ADDR_VAR 0 5
6294: PUSH
6295: LD_INT 97
6297: PUSH
6298: LD_INT 143
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: EMPTY
6306: LIST
6307: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6308: LD_INT 1
6310: PPUSH
6311: LD_VAR 0 3
6315: PUSH
6316: LD_INT 5
6318: ARRAY
6319: PPUSH
6320: LD_VAR 0 5
6324: PPUSH
6325: LD_VAR 0 6
6329: PPUSH
6330: CALL 39241 0 4
// end ; Wait ( 13 13$00 ) ;
6334: LD_INT 27300
6336: PPUSH
6337: CALL_OW 67
// tmp := [ ] ;
6341: LD_ADDR_VAR 0 3
6345: PUSH
6346: EMPTY
6347: ST_TO_ADDR
// w := 1 ;
6348: LD_ADDR_VAR 0 7
6352: PUSH
6353: LD_INT 1
6355: ST_TO_ADDR
// repeat tmp := [ ] ;
6356: LD_ADDR_VAR 0 3
6360: PUSH
6361: EMPTY
6362: ST_TO_ADDR
// if w mod 4 = 0 then
6363: LD_VAR 0 7
6367: PUSH
6368: LD_INT 4
6370: MOD
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6462
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6377: LD_ADDR_VAR 0 8
6381: PUSH
6382: LD_INT 11
6384: PUSH
6385: LD_INT 1
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 24
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 11
6402: PUSH
6403: LD_INT 1
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: LD_INT 24
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 11
6420: PUSH
6421: LD_INT 1
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 24
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 11
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 24
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
6460: GO 6564
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6462: LD_ADDR_VAR 0 8
6466: PUSH
6467: LD_INT 14
6469: PUSH
6470: LD_INT 1
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: LD_INT 28
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 14
6487: PUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: LD_INT 25
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 14
6505: PUSH
6506: LD_INT 1
6508: PUSH
6509: LD_INT 2
6511: PUSH
6512: LD_INT 28
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 14
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: LD_INT 29
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 11
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: LD_INT 2
6547: PUSH
6548: LD_INT 24
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: ST_TO_ADDR
// if w mod 3 = 0 then
6564: LD_VAR 0 7
6568: PUSH
6569: LD_INT 3
6571: MOD
6572: PUSH
6573: LD_INT 0
6575: EQUAL
6576: IFFALSE 6652
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6578: LD_ADDR_VAR 0 8
6582: PUSH
6583: LD_VAR 0 8
6587: PPUSH
6588: LD_INT 1
6590: PUSH
6591: LD_VAR 0 8
6595: PUSH
6596: LD_VAR 0 1
6600: ARRAY
6601: PUSH
6602: LD_INT 1
6604: PLUS
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: LD_INT 14
6612: PUSH
6613: LD_INT 1
6615: PUSH
6616: LD_INT 2
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 28
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 1
6631: PPUSH
6632: LD_INT 2
6634: PPUSH
6635: CALL_OW 12
6639: ARRAY
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL 51648 0 3
6651: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6652: LD_INT 1
6654: PPUSH
6655: LD_VAR 0 8
6659: PPUSH
6660: CALL 38950 0 2
// if GetSide ( ar_dep_w ) = 2 then
6664: LD_INT 45
6666: PPUSH
6667: CALL_OW 255
6671: PUSH
6672: LD_INT 2
6674: EQUAL
6675: IFFALSE 6760
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6677: LD_ADDR_VAR 0 8
6681: PUSH
6682: LD_INT 14
6684: PUSH
6685: LD_INT 1
6687: PUSH
6688: LD_INT 2
6690: PUSH
6691: LD_INT 28
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 14
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: LD_INT 2
6708: PUSH
6709: LD_INT 27
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 14
6720: PUSH
6721: LD_INT 1
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_INT 27
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6741: LD_INT 2
6743: PPUSH
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL 38950 0 2
// wait ( 0 0$50 ) ;
6753: LD_INT 1750
6755: PPUSH
6756: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6760: LD_INT 35
6762: PPUSH
6763: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6767: LD_EXP 68
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PPUSH
6776: LD_INT 3
6778: PUSH
6779: LD_INT 34
6781: PUSH
6782: LD_INT 32
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PPUSH
6793: CALL_OW 72
6797: PUSH
6798: LD_INT 4
6800: GREATEREQUAL
6801: IFFALSE 6760
// wait ( 0 0$10 ) ;
6803: LD_INT 350
6805: PPUSH
6806: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6810: LD_ADDR_VAR 0 3
6814: PUSH
6815: LD_EXP 68
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: LD_INT 3
6826: PUSH
6827: LD_INT 34
6829: PUSH
6830: LD_INT 32
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PPUSH
6841: CALL_OW 72
6845: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6846: LD_INT 100
6848: PPUSH
6849: CALL_OW 13
6853: PUSH
6854: LD_INT 50
6856: LESS
6857: IFFALSE 6890
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6859: LD_ADDR_VAR 0 5
6863: PUSH
6864: LD_INT 55
6866: PUSH
6867: LD_INT 7
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 75
6876: PUSH
6877: LD_INT 90
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: ST_TO_ADDR
6888: GO 6919
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6890: LD_ADDR_VAR 0 5
6894: PUSH
6895: LD_INT 128
6897: PUSH
6898: LD_INT 94
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 180
6907: PUSH
6908: LD_INT 135
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: ST_TO_ADDR
// if w mod 4 = 0 then
6919: LD_VAR 0 7
6923: PUSH
6924: LD_INT 4
6926: MOD
6927: PUSH
6928: LD_INT 0
6930: EQUAL
6931: IFFALSE 6962
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6933: LD_ADDR_VAR 0 5
6937: PUSH
6938: LD_INT 91
6940: PUSH
6941: LD_INT 58
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 117
6950: PUSH
6951: LD_INT 107
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6962: LD_INT 1
6964: PPUSH
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_VAR 0 5
6974: PPUSH
6975: LD_VAR 0 6
6979: PPUSH
6980: CALL 39241 0 4
// if mc_vehicles [ 2 ] then
6984: LD_EXP 68
6988: PUSH
6989: LD_INT 2
6991: ARRAY
6992: IFFALSE 7028
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
6994: LD_INT 2
6996: PPUSH
6997: LD_EXP 68
7001: PUSH
7002: LD_INT 2
7004: ARRAY
7005: PPUSH
7006: LD_INT 73
7008: PUSH
7009: LD_INT 115
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: PPUSH
7019: LD_VAR 0 6
7023: PPUSH
7024: CALL 39241 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7028: LD_INT 22050
7030: PPUSH
7031: LD_INT 28350
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: CALL_OW 67
// w := w + 1 ;
7043: LD_ADDR_VAR 0 7
7047: PUSH
7048: LD_VAR 0 7
7052: PUSH
7053: LD_INT 1
7055: PLUS
7056: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7057: LD_INT 94
7059: PPUSH
7060: CALL_OW 301
7064: PUSH
7065: LD_EXP 49
7069: PUSH
7070: LD_INT 1
7072: ARRAY
7073: PPUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: NOT
7089: OR
7090: IFFALSE 6356
// end ;
7092: PPOPN 8
7094: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7095: LD_INT 204
7097: IFFALSE 7571
7099: GO 7101
7101: DISABLE
7102: LD_INT 0
7104: PPUSH
7105: PPUSH
7106: PPUSH
7107: PPUSH
// begin enable ;
7108: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7109: LD_INT 35
7111: PPUSH
7112: LD_INT 1190
7114: PPUSH
7115: CALL_OW 12
7119: PPUSH
7120: CALL_OW 67
// tmp := [ ] ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: EMPTY
7130: ST_TO_ADDR
// uc_side := 8 ;
7131: LD_ADDR_OWVAR 20
7135: PUSH
7136: LD_INT 8
7138: ST_TO_ADDR
// uc_nation := 2 ;
7139: LD_ADDR_OWVAR 21
7143: PUSH
7144: LD_INT 2
7146: ST_TO_ADDR
// InitHc ;
7147: CALL_OW 19
// for i = 1 to 3 do
7151: LD_ADDR_VAR 0 1
7155: PUSH
7156: DOUBLE
7157: LD_INT 1
7159: DEC
7160: ST_TO_ADDR
7161: LD_INT 3
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7292
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7167: LD_INT 13
7169: PUSH
7170: LD_INT 14
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 1
7179: PPUSH
7180: LD_INT 2
7182: PPUSH
7183: CALL_OW 12
7187: ARRAY
7188: PPUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: LD_INT 27
7197: PUSH
7198: LD_INT 28
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 1
7207: PPUSH
7208: LD_INT 2
7210: PPUSH
7211: CALL_OW 12
7215: ARRAY
7216: PPUSH
7217: LD_INT 100
7219: PPUSH
7220: CALL 51526 0 5
// un := CreateVehicle ;
7224: LD_ADDR_VAR 0 3
7228: PUSH
7229: CALL_OW 45
7233: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7234: LD_VAR 0 3
7238: PPUSH
7239: LD_INT 4
7241: PPUSH
7242: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7246: LD_VAR 0 3
7250: PPUSH
7251: LD_INT 15
7253: PPUSH
7254: LD_INT 0
7256: PPUSH
7257: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7261: LD_ADDR_VAR 0 2
7265: PUSH
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 2
7275: PUSH
7276: LD_INT 1
7278: PLUS
7279: PPUSH
7280: LD_VAR 0 3
7284: PPUSH
7285: CALL_OW 1
7289: ST_TO_ADDR
// end ;
7290: GO 7164
7292: POP
7293: POP
// for i = 1 to 4 do
7294: LD_ADDR_VAR 0 1
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 4
7306: PUSH
7307: FOR_TO
7308: IFFALSE 7387
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7310: LD_INT 0
7312: PPUSH
7313: LD_INT 1
7315: PPUSH
7316: LD_INT 4
7318: PPUSH
7319: CALL_OW 12
7323: PPUSH
7324: LD_INT 6
7326: PPUSH
7327: CALL_OW 380
// un := CreateHuman ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7341: LD_VAR 0 3
7345: PPUSH
7346: LD_INT 15
7348: PPUSH
7349: LD_INT 0
7351: PPUSH
7352: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: LD_VAR 0 2
7365: PPUSH
7366: LD_VAR 0 2
7370: PUSH
7371: LD_INT 1
7373: PLUS
7374: PPUSH
7375: LD_VAR 0 3
7379: PPUSH
7380: CALL_OW 1
7384: ST_TO_ADDR
// end ;
7385: GO 7307
7387: POP
7388: POP
// wait ( 0 0$3 ) ;
7389: LD_INT 105
7391: PPUSH
7392: CALL_OW 67
// for i in tmp do
7396: LD_ADDR_VAR 0 1
7400: PUSH
7401: LD_VAR 0 2
7405: PUSH
7406: FOR_IN
7407: IFFALSE 7475
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 257
7418: PUSH
7419: LD_INT 1
7421: EQUAL
7422: PUSH
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 247
7432: PUSH
7433: LD_INT 2
7435: EQUAL
7436: OR
7437: IFFALSE 7473
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7439: LD_VAR 0 1
7443: PPUSH
7444: LD_INT 81
7446: PUSH
7447: LD_INT 8
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PPUSH
7454: CALL_OW 69
7458: PPUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 74
7468: PPUSH
7469: CALL_OW 115
7473: GO 7406
7475: POP
7476: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7477: LD_VAR 0 2
7481: PPUSH
7482: LD_INT 210
7484: PPUSH
7485: LD_INT 178
7487: PPUSH
7488: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7492: LD_ADDR_VAR 0 4
7496: PUSH
7497: LD_INT 10
7499: PPUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 8
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PPUSH
7510: CALL_OW 70
7514: ST_TO_ADDR
// if x then
7515: LD_VAR 0 4
7519: IFFALSE 7547
// for i in x do
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_VAR 0 4
7530: PUSH
7531: FOR_IN
7532: IFFALSE 7545
// RemoveUnit ( i ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: CALL_OW 64
7543: GO 7531
7545: POP
7546: POP
// wait ( 0 0$1 ) ;
7547: LD_INT 35
7549: PPUSH
7550: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7554: LD_INT 22
7556: PUSH
7557: LD_INT 8
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 69
7568: NOT
7569: IFFALSE 7477
// end ;
7571: PPOPN 4
7573: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7574: LD_INT 22
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 34
7586: PUSH
7587: LD_INT 31
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 24
7599: PUSH
7600: LD_INT 1000
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: PPUSH
7616: CALL_OW 69
7620: IFFALSE 7664
7622: GO 7624
7624: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7625: LD_INT 22
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 34
7637: PUSH
7638: LD_INT 31
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 69
7653: PPUSH
7654: LD_INT 106
7656: PPUSH
7657: LD_INT 14
7659: PPUSH
7660: CALL_OW 111
// end ; end_of_file
7664: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7665: LD_INT 0
7667: PPUSH
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
7672: PPUSH
// InGameOn ;
7673: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7677: LD_EXP 20
7681: PPUSH
7682: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7686: LD_INT 2
7688: PPUSH
7689: LD_INT 1
7691: PPUSH
7692: LD_INT 1
7694: PPUSH
7695: LD_INT 1
7697: PPUSH
7698: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7702: LD_ADDR_VAR 0 2
7706: PUSH
7707: LD_INT 22
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 25
7719: PUSH
7720: LD_INT 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PPUSH
7731: CALL_OW 69
7735: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7736: LD_ADDR_VAR 0 4
7740: PUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 34
7753: PUSH
7754: LD_INT 11
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: PUSH
7770: LD_INT 1
7772: ARRAY
7773: ST_TO_ADDR
// for i = 1 to tmp do
7774: LD_ADDR_VAR 0 6
7778: PUSH
7779: DOUBLE
7780: LD_INT 1
7782: DEC
7783: ST_TO_ADDR
7784: LD_VAR 0 2
7788: PUSH
7789: FOR_TO
7790: IFFALSE 7837
// begin if i = 5 then
7792: LD_VAR 0 6
7796: PUSH
7797: LD_INT 5
7799: EQUAL
7800: IFFALSE 7804
// break ;
7802: GO 7837
// sols := Replace ( sols , i , tmp [ i ] ) ;
7804: LD_ADDR_VAR 0 5
7808: PUSH
7809: LD_VAR 0 5
7813: PPUSH
7814: LD_VAR 0 6
7818: PPUSH
7819: LD_VAR 0 2
7823: PUSH
7824: LD_VAR 0 6
7828: ARRAY
7829: PPUSH
7830: CALL_OW 1
7834: ST_TO_ADDR
// end ;
7835: GO 7789
7837: POP
7838: POP
// tmp := ar_force_tmp ;
7839: LD_ADDR_VAR 0 2
7843: PUSH
7844: LD_EXP 39
7848: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7849: LD_VAR 0 2
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_INT 108
7860: PPUSH
7861: LD_INT 139
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7871: LD_VAR 0 2
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: PPUSH
7880: LD_EXP 20
7884: PPUSH
7885: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7889: LD_VAR 0 2
7893: PUSH
7894: LD_INT 2
7896: ARRAY
7897: PPUSH
7898: LD_INT 114
7900: PPUSH
7901: LD_INT 132
7903: PPUSH
7904: LD_INT 0
7906: PPUSH
7907: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7911: LD_VAR 0 2
7915: PUSH
7916: LD_INT 3
7918: ARRAY
7919: PPUSH
7920: LD_INT 115
7922: PPUSH
7923: LD_INT 132
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7933: LD_VAR 0 2
7937: PUSH
7938: LD_INT 2
7940: ARRAY
7941: PUSH
7942: LD_VAR 0 2
7946: PUSH
7947: LD_INT 3
7949: ARRAY
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7959: LD_VAR 0 4
7963: PPUSH
7964: LD_INT 83
7966: PPUSH
7967: LD_INT 123
7969: PPUSH
7970: CALL_OW 111
// Wait ( 0 0$01 ) ;
7974: LD_INT 35
7976: PPUSH
7977: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7981: LD_INT 90
7983: PPUSH
7984: LD_INT 144
7986: PPUSH
7987: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7991: LD_VAR 0 5
7995: PPUSH
7996: LD_INT 88
7998: PPUSH
7999: LD_INT 129
8001: PPUSH
8002: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8006: LD_ADDR_VAR 0 3
8010: PUSH
8011: LD_INT 92
8013: PUSH
8014: LD_INT 131
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 88
8023: PUSH
8024: LD_INT 127
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 91
8033: PUSH
8034: LD_INT 132
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 92
8043: PUSH
8044: LD_INT 134
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// for i = 1 to sols do
8057: LD_ADDR_VAR 0 6
8061: PUSH
8062: DOUBLE
8063: LD_INT 1
8065: DEC
8066: ST_TO_ADDR
8067: LD_VAR 0 5
8071: PUSH
8072: FOR_TO
8073: IFFALSE 8146
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8075: LD_VAR 0 5
8079: PUSH
8080: LD_VAR 0 6
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 3
8090: PUSH
8091: LD_VAR 0 6
8095: ARRAY
8096: PUSH
8097: LD_INT 1
8099: ARRAY
8100: PPUSH
8101: LD_VAR 0 3
8105: PUSH
8106: LD_VAR 0 6
8110: ARRAY
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PPUSH
8116: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8120: LD_VAR 0 5
8124: PUSH
8125: LD_VAR 0 6
8129: ARRAY
8130: PPUSH
8131: CALL_OW 197
// AddComHold ( sols ) ;
8135: LD_VAR 0 5
8139: PPUSH
8140: CALL_OW 200
// end ;
8144: GO 8072
8146: POP
8147: POP
// repeat wait ( 0 0$1 ) ;
8148: LD_INT 35
8150: PPUSH
8151: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8155: LD_VAR 0 5
8159: PUSH
8160: LD_INT 1
8162: ARRAY
8163: PPUSH
8164: LD_INT 92
8166: PPUSH
8167: LD_INT 131
8169: PPUSH
8170: CALL_OW 297
8174: PUSH
8175: LD_INT 4
8177: LESS
8178: IFFALSE 8148
// CenterOnXY ( 96 , 139 ) ;
8180: LD_INT 96
8182: PPUSH
8183: LD_INT 139
8185: PPUSH
8186: CALL_OW 84
// wait ( 0 0$3 ) ;
8190: LD_INT 105
8192: PPUSH
8193: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8197: LD_INT 111
8199: PPUSH
8200: LD_INT 135
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: LD_INT 25
8208: NEG
8209: PPUSH
8210: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8214: LD_VAR 0 2
8218: PUSH
8219: LD_INT 2
8221: ARRAY
8222: PPUSH
8223: LD_VAR 0 2
8227: PUSH
8228: LD_INT 1
8230: ARRAY
8231: PPUSH
8232: CALL_OW 250
8236: PUSH
8237: LD_INT 3
8239: PLUS
8240: PPUSH
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL_OW 251
8254: PPUSH
8255: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8259: LD_VAR 0 2
8263: PUSH
8264: LD_INT 3
8266: ARRAY
8267: PPUSH
8268: LD_INT 7
8270: PPUSH
8271: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PUSH
8280: LD_INT 2
8282: ARRAY
8283: PPUSH
8284: LD_VAR 0 2
8288: PUSH
8289: LD_INT 1
8291: ARRAY
8292: PPUSH
8293: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8297: LD_INT 35
8299: PPUSH
8300: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8304: LD_VAR 0 2
8308: PUSH
8309: LD_INT 1
8311: ARRAY
8312: PPUSH
8313: LD_VAR 0 2
8317: PUSH
8318: LD_INT 2
8320: ARRAY
8321: PPUSH
8322: CALL_OW 296
8326: PUSH
8327: LD_INT 5
8329: LESS
8330: IFFALSE 8297
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8332: LD_VAR 0 2
8336: PUSH
8337: LD_INT 1
8339: ARRAY
8340: PPUSH
8341: LD_VAR 0 2
8345: PUSH
8346: LD_INT 2
8348: ARRAY
8349: PPUSH
8350: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8354: LD_VAR 0 2
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: LD_STRING D1a-Merc1-1
8365: PPUSH
8366: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8370: LD_VAR 0 2
8374: PUSH
8375: LD_INT 2
8377: ARRAY
8378: PPUSH
8379: LD_STRING D1a-FMerc2-1
8381: PPUSH
8382: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8386: LD_VAR 0 2
8390: PUSH
8391: LD_INT 2
8393: ARRAY
8394: PPUSH
8395: LD_VAR 0 2
8399: PUSH
8400: LD_INT 1
8402: ARRAY
8403: PPUSH
8404: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8408: LD_VAR 0 2
8412: PUSH
8413: LD_INT 1
8415: ARRAY
8416: PPUSH
8417: LD_INT 500
8419: PPUSH
8420: CALL_OW 234
// wait ( 0 0$2 ) ;
8424: LD_INT 70
8426: PPUSH
8427: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8431: LD_VAR 0 2
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 2
8442: PPUSH
8443: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8447: LD_INT 10
8449: PPUSH
8450: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8454: LD_VAR 0 2
8458: PUSH
8459: LD_INT 1
8461: ARRAY
8462: PPUSH
8463: LD_STRING D1a-Merc1-2
8465: PPUSH
8466: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8470: LD_INT 7
8472: PPUSH
8473: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8477: LD_VAR 0 2
8481: PUSH
8482: LD_INT 1
8484: ARRAY
8485: PPUSH
8486: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8490: LD_VAR 0 2
8494: PUSH
8495: LD_INT 2
8497: ARRAY
8498: PPUSH
8499: LD_INT 10
8501: PPUSH
8502: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8506: LD_VAR 0 2
8510: PUSH
8511: LD_INT 2
8513: ARRAY
8514: PPUSH
8515: LD_STRING D1a-FMerc2-2
8517: PPUSH
8518: CALL_OW 88
// wait ( 0 0$1 ) ;
8522: LD_INT 35
8524: PPUSH
8525: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8529: LD_INT 7
8531: PPUSH
8532: CALL_OW 85
// wait ( 0 0$2 ) ;
8536: LD_INT 70
8538: PPUSH
8539: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8543: LD_EXP 43
8547: PPUSH
8548: LD_STRING D1a-Saliba-1
8550: PPUSH
8551: CALL_OW 91
// KillUnit ( Saliba ) ;
8555: LD_EXP 43
8559: PPUSH
8560: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8564: LD_VAR 0 2
8568: PUSH
8569: LD_INT 3
8571: ARRAY
8572: PPUSH
8573: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8577: LD_EXP 20
8581: PPUSH
8582: CALL_OW 85
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8593: LD_VAR 0 5
8597: PPUSH
8598: LD_INT 88
8600: PPUSH
8601: LD_INT 141
8603: PPUSH
8604: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8608: LD_VAR 0 5
8612: PPUSH
8613: LD_INT 70
8615: PPUSH
8616: CALL_OW 202
// wait ( 0 0$2 ) ;
8620: LD_INT 70
8622: PPUSH
8623: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8627: LD_INT 2
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_INT 2
8635: PPUSH
8636: LD_INT 1
8638: PPUSH
8639: CALL_OW 80
// InGameOff ;
8643: CALL_OW 9
// ComWalk ( sols ) ;
8647: LD_VAR 0 5
8651: PPUSH
8652: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8656: LD_STRING M1
8658: PPUSH
8659: CALL_OW 337
// game_speed := 4 ;
8663: LD_ADDR_OWVAR 65
8667: PUSH
8668: LD_INT 4
8670: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8671: LD_INT 111
8673: PPUSH
8674: LD_INT 135
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: CALL_OW 331
// SaveForQuickRestart ;
8684: CALL_OW 22
// ar_run := true ;
8688: LD_ADDR_EXP 5
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8696: LD_INT 35
8698: PPUSH
8699: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8703: LD_INT 22
8705: PUSH
8706: LD_INT 1
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 91
8715: PUSH
8716: LD_INT 7
8718: PUSH
8719: LD_INT 10
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 69
8735: PUSH
8736: LD_INT 7
8738: PPUSH
8739: CALL_OW 256
8743: PUSH
8744: LD_INT 999
8746: LESS
8747: OR
8748: IFFALSE 8696
// if GetSide ( ar_dep_s ) = 2 then
8750: LD_INT 7
8752: PPUSH
8753: CALL_OW 255
8757: PUSH
8758: LD_INT 2
8760: EQUAL
8761: IFFALSE 8773
// SetSide ( ar_dep_s , 1 ) ;
8763: LD_INT 7
8765: PPUSH
8766: LD_INT 1
8768: PPUSH
8769: CALL_OW 235
// end ;
8773: LD_VAR 0 1
8777: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8778: LD_EXP 5
8782: IFFALSE 9142
8784: GO 8786
8786: DISABLE
8787: LD_INT 0
8789: PPUSH
8790: PPUSH
8791: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8792: LD_ADDR_VAR 0 2
8796: PUSH
8797: LD_EXP 39
8801: PUSH
8802: LD_EXP 35
8806: PPUSH
8807: LD_INT 2
8809: PUSH
8810: LD_INT 21
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 21
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8853: LD_INT 5
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: CALL_OW 343
// k := 1 ;
8863: LD_ADDR_VAR 0 3
8867: PUSH
8868: LD_INT 1
8870: ST_TO_ADDR
// for i in tmp do
8871: LD_ADDR_VAR 0 1
8875: PUSH
8876: LD_VAR 0 2
8880: PUSH
8881: FOR_IN
8882: IFFALSE 8967
// begin if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8904
// ComExitBuilding ( i ) ;
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 122
// if GetClass ( i ) = 3 then
8904: LD_VAR 0 1
8908: PPUSH
8909: CALL_OW 257
8913: PUSH
8914: LD_INT 3
8916: EQUAL
8917: IFFALSE 8953
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8919: LD_VAR 0 1
8923: PPUSH
8924: LD_EXP 40
8928: PUSH
8929: LD_VAR 0 3
8933: ARRAY
8934: PPUSH
8935: CALL_OW 180
// k := k + 1 ;
8939: LD_ADDR_VAR 0 3
8943: PUSH
8944: LD_VAR 0 3
8948: PUSH
8949: LD_INT 1
8951: PLUS
8952: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8953: LD_VAR 0 1
8957: PPUSH
8958: LD_INT 10
8960: PPUSH
8961: CALL_OW 173
// end ;
8965: GO 8881
8967: POP
8968: POP
// ar_patrol := true ;
8969: LD_ADDR_EXP 7
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8977: LD_INT 10
8979: PPUSH
8980: CALL_OW 67
// for i in tmp do
8984: LD_ADDR_VAR 0 1
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: FOR_IN
8995: IFFALSE 9023
// if not HasTask ( i ) then
8997: LD_VAR 0 1
9001: PPUSH
9002: CALL_OW 314
9006: NOT
9007: IFFALSE 9021
// ComMoveToArea ( i , escape_area ) ;
9009: LD_VAR 0 1
9013: PPUSH
9014: LD_INT 10
9016: PPUSH
9017: CALL_OW 113
9021: GO 8994
9023: POP
9024: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9025: LD_ADDR_VAR 0 3
9029: PUSH
9030: LD_VAR 0 2
9034: PPUSH
9035: LD_INT 95
9037: PUSH
9038: LD_INT 10
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 72
9049: ST_TO_ADDR
// if k then
9050: LD_VAR 0 3
9054: IFFALSE 9123
// for i in k do
9056: LD_ADDR_VAR 0 1
9060: PUSH
9061: LD_VAR 0 3
9065: PUSH
9066: FOR_IN
9067: IFFALSE 9121
// begin if IsInUnit ( i ) then
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 310
9078: IFFALSE 9094
// RemoveUnit ( IsInUnit ( i ) ) ;
9080: LD_VAR 0 1
9084: PPUSH
9085: CALL_OW 310
9089: PPUSH
9090: CALL_OW 64
// RemoveUnit ( i ) ;
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 64
// tmp := tmp diff i ;
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: LD_VAR 0 1
9117: DIFF
9118: ST_TO_ADDR
// end ;
9119: GO 9066
9121: POP
9122: POP
// until tmp = [ ] ;
9123: LD_VAR 0 2
9127: PUSH
9128: EMPTY
9129: EQUAL
9130: IFFALSE 8977
// ChangeSideFog ( 5 , 5 ) ;
9132: LD_INT 5
9134: PPUSH
9135: LD_INT 5
9137: PPUSH
9138: CALL_OW 343
// end ;
9142: PPOPN 3
9144: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9145: LD_EXP 7
9149: IFFALSE 9439
9151: GO 9153
9153: DISABLE
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
9158: PPUSH
// begin uc_side := 2 ;
9159: LD_ADDR_OWVAR 20
9163: PUSH
9164: LD_INT 2
9166: ST_TO_ADDR
// uc_nation := 2 ;
9167: LD_ADDR_OWVAR 21
9171: PUSH
9172: LD_INT 2
9174: ST_TO_ADDR
// InitHc ;
9175: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9179: LD_INT 1
9181: PPUSH
9182: LD_INT 1
9184: PPUSH
9185: LD_INT 6
9187: PPUSH
9188: CALL_OW 380
// un := CreateHuman ;
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: CALL_OW 44
9201: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9202: LD_INT 14
9204: PPUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 27
9213: PPUSH
9214: LD_INT 98
9216: PPUSH
9217: CALL 51526 0 5
// veh := CreateVehicle ;
9221: LD_ADDR_VAR 0 3
9225: PUSH
9226: CALL_OW 45
9230: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9231: LD_VAR 0 3
9235: PPUSH
9236: LD_INT 4
9238: PPUSH
9239: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9243: LD_VAR 0 3
9247: PPUSH
9248: LD_INT 179
9250: PPUSH
9251: LD_INT 135
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9261: LD_VAR 0 2
9265: PPUSH
9266: LD_VAR 0 3
9270: PPUSH
9271: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9275: LD_VAR 0 2
9279: PPUSH
9280: LD_INT 126
9282: PPUSH
9283: LD_INT 133
9285: PPUSH
9286: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9297: LD_INT 1
9299: PPUSH
9300: LD_VAR 0 3
9304: PPUSH
9305: CALL_OW 292
9309: PUSH
9310: LD_VAR 0 3
9314: PPUSH
9315: LD_INT 7
9317: PPUSH
9318: CALL_OW 296
9322: PUSH
9323: LD_INT 9
9325: LESS
9326: OR
9327: IFFALSE 9290
// ComHold ( veh ) ;
9329: LD_VAR 0 3
9333: PPUSH
9334: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9338: LD_VAR 0 2
9342: PPUSH
9343: LD_STRING D2aa-Ar1-1
9345: PPUSH
9346: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9350: LD_VAR 0 2
9354: PPUSH
9355: LD_INT 177
9357: PPUSH
9358: LD_INT 96
9360: PPUSH
9361: CALL_OW 111
// AddComExitVehicle ( un ) ;
9365: LD_VAR 0 2
9369: PPUSH
9370: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9374: LD_INT 35
9376: PPUSH
9377: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9381: LD_VAR 0 2
9385: PPUSH
9386: LD_INT 204
9388: PPUSH
9389: CALL_OW 296
9393: PUSH
9394: LD_INT 15
9396: LESS
9397: IFFALSE 9374
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9399: LD_ADDR_EXP 49
9403: PUSH
9404: LD_EXP 49
9408: PPUSH
9409: LD_INT 3
9411: PUSH
9412: LD_EXP 49
9416: PUSH
9417: LD_INT 3
9419: ARRAY
9420: PUSH
9421: LD_INT 1
9423: PLUS
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: LD_VAR 0 2
9433: PPUSH
9434: CALL 51648 0 3
9438: ST_TO_ADDR
// end ;
9439: PPOPN 3
9441: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9442: LD_INT 7
9444: PPUSH
9445: CALL_OW 255
9449: PUSH
9450: LD_INT 1
9452: EQUAL
9453: PUSH
9454: LD_INT 7
9456: PPUSH
9457: CALL_OW 301
9461: OR
9462: IFFALSE 11886
9464: GO 9466
9466: DISABLE
9467: LD_INT 0
9469: PPUSH
9470: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9471: LD_ADDR_VAR 0 1
9475: PUSH
9476: LD_EXP 35
9480: PPUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 72
9495: PUSH
9496: FOR_IN
9497: IFFALSE 9513
// SetSide ( i , 1 ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 235
9511: GO 9496
9513: POP
9514: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9515: LD_ADDR_VAR 0 2
9519: PUSH
9520: LD_INT 46
9522: PUSH
9523: LD_INT 41
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 50
9532: PUSH
9533: LD_INT 25
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 57
9542: PUSH
9543: LD_INT 75
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 75
9552: PUSH
9553: LD_INT 89
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 51
9562: PUSH
9563: LD_INT 45
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 95
9572: PUSH
9573: LD_INT 95
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 84
9582: PUSH
9583: LD_INT 77
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 101
9592: PUSH
9593: LD_INT 76
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 118
9602: PUSH
9603: LD_INT 81
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 139
9612: PUSH
9613: LD_INT 97
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 129
9622: PUSH
9623: LD_INT 114
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 154
9632: PUSH
9633: LD_INT 111
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: ST_TO_ADDR
// base_captured := true ;
9654: LD_ADDR_EXP 6
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// DialogueOn ;
9662: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9666: LD_EXP 20
9670: PPUSH
9671: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9675: LD_EXP 20
9679: PPUSH
9680: LD_STRING D2-JMM-1
9682: PPUSH
9683: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9687: LD_EXP 29
9691: PPUSH
9692: LD_STRING D2-Pow-1
9694: PPUSH
9695: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9699: LD_EXP 20
9703: PPUSH
9704: LD_STRING D2-JMM-2
9706: PPUSH
9707: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9711: LD_EXP 29
9715: PPUSH
9716: LD_STRING D2-Pow-2
9718: PPUSH
9719: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9723: LD_EXP 20
9727: PPUSH
9728: LD_STRING D2-JMM-3
9730: PPUSH
9731: CALL_OW 88
// DialogueOff ;
9735: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9739: LD_STRING M2
9741: PPUSH
9742: CALL_OW 337
// Wait ( 0 0$2 ) ;
9746: LD_INT 70
9748: PPUSH
9749: CALL_OW 67
// if IsOk ( Gary ) then
9753: LD_EXP 31
9757: PPUSH
9758: CALL_OW 302
9762: IFFALSE 9776
// Say ( Gary , D2a-Gary-1 ) ;
9764: LD_EXP 31
9768: PPUSH
9769: LD_STRING D2a-Gary-1
9771: PPUSH
9772: CALL_OW 88
// if IsOk ( Bobby ) then
9776: LD_EXP 23
9780: PPUSH
9781: CALL_OW 302
9785: IFFALSE 9799
// Say ( Bobby , D2a-Bobby-1 ) ;
9787: LD_EXP 23
9791: PPUSH
9792: LD_STRING D2a-Bobby-1
9794: PPUSH
9795: CALL_OW 88
// if IsOk ( Cyrus ) then
9799: LD_EXP 24
9803: PPUSH
9804: CALL_OW 302
9808: IFFALSE 9822
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9810: LD_EXP 24
9814: PPUSH
9815: LD_STRING D2a-Cyrus-1
9817: PPUSH
9818: CALL_OW 88
// if IsOk ( Lisa ) then
9822: LD_EXP 21
9826: PPUSH
9827: CALL_OW 302
9831: IFFALSE 9845
// Say ( Lisa , D2a-Lisa-1 ) ;
9833: LD_EXP 21
9837: PPUSH
9838: LD_STRING D2a-Lisa-1
9840: PPUSH
9841: CALL_OW 88
// if IsOk ( Frank ) then
9845: LD_EXP 32
9849: PPUSH
9850: CALL_OW 302
9854: IFFALSE 9868
// Say ( Frank , D2a-Frank-1 ) ;
9856: LD_EXP 32
9860: PPUSH
9861: LD_STRING D2a-Frank-1
9863: PPUSH
9864: CALL_OW 88
// if IsOk ( Cornel ) then
9868: LD_EXP 30
9872: PPUSH
9873: CALL_OW 302
9877: IFFALSE 9891
// Say ( Cornel , D2a-Corn-1 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING D2a-Corn-1
9886: PPUSH
9887: CALL_OW 88
// if IsOk ( Donaldson ) then
9891: LD_EXP 22
9895: PPUSH
9896: CALL_OW 302
9900: IFFALSE 9914
// Say ( Donaldson , D2a-Don-1 ) ;
9902: LD_EXP 22
9906: PPUSH
9907: LD_STRING D2a-Don-1
9909: PPUSH
9910: CALL_OW 88
// if IsOk ( Brown ) then
9914: LD_EXP 26
9918: PPUSH
9919: CALL_OW 302
9923: IFFALSE 9937
// Say ( Brown , D2a-Brown-1 ) ;
9925: LD_EXP 26
9929: PPUSH
9930: LD_STRING D2a-Brown-1
9932: PPUSH
9933: CALL_OW 88
// Wait ( 0 0$30 ) ;
9937: LD_INT 1050
9939: PPUSH
9940: CALL_OW 67
// if IsOk ( Frank ) then
9944: LD_EXP 32
9948: PPUSH
9949: CALL_OW 302
9953: IFFALSE 10219
// begin DialogueOn ;
9955: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9959: LD_EXP 20
9963: PUSH
9964: LD_EXP 32
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9977: LD_EXP 32
9981: PPUSH
9982: LD_STRING D3F-Frank-1
9984: PPUSH
9985: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9989: LD_EXP 20
9993: PPUSH
9994: LD_STRING D3F-JMM-1
9996: PPUSH
9997: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10001: LD_EXP 32
10005: PPUSH
10006: LD_STRING D3F-Frank-2
10008: PPUSH
10009: CALL_OW 88
// case Query ( QFrank ) of 1 :
10013: LD_STRING QFrank
10015: PPUSH
10016: CALL_OW 97
10020: PUSH
10021: LD_INT 1
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10052
10029: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10030: LD_EXP 20
10034: PPUSH
10035: LD_STRING D3Fa-JMM-1
10037: PPUSH
10038: CALL_OW 88
// us_scout := 1 ;
10042: LD_ADDR_EXP 8
10046: PUSH
10047: LD_INT 1
10049: ST_TO_ADDR
// end ; 2 :
10050: GO 10215
10052: LD_INT 2
10054: DOUBLE
10055: EQUAL
10056: IFTRUE 10060
10058: GO 10182
10060: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10061: LD_EXP 20
10065: PPUSH
10066: LD_STRING D3Fb-JMM-1
10068: PPUSH
10069: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10073: LD_EXP 32
10077: PPUSH
10078: LD_STRING D3Fb-Frank-1
10080: PPUSH
10081: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10085: LD_STRING QFrank2
10087: PPUSH
10088: CALL_OW 97
10092: PUSH
10093: LD_INT 1
10095: DOUBLE
10096: EQUAL
10097: IFTRUE 10101
10099: GO 10148
10101: POP
// begin us_scout := 2 ;
10102: LD_ADDR_EXP 8
10106: PUSH
10107: LD_INT 2
10109: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10110: LD_EXP 20
10114: PPUSH
10115: LD_STRING D3Fba-JMM-1
10117: PPUSH
10118: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10122: LD_EXP 32
10126: PPUSH
10127: LD_STRING D3Fba-Frank-1
10129: PPUSH
10130: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10134: LD_EXP 20
10138: PPUSH
10139: LD_STRING D3Fba-JMM-2
10141: PPUSH
10142: CALL_OW 88
// end ; 2 :
10146: GO 10180
10148: LD_INT 2
10150: DOUBLE
10151: EQUAL
10152: IFTRUE 10156
10154: GO 10179
10156: POP
// begin us_scout := 0 ;
10157: LD_ADDR_EXP 8
10161: PUSH
10162: LD_INT 0
10164: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10165: LD_EXP 20
10169: PPUSH
10170: LD_STRING D3Fbb-JMM-1
10172: PPUSH
10173: CALL_OW 88
// end ; end ;
10177: GO 10180
10179: POP
// end ; 3 :
10180: GO 10215
10182: LD_INT 3
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10214
10190: POP
// begin us_scout := - 1 ;
10191: LD_ADDR_EXP 8
10195: PUSH
10196: LD_INT 1
10198: NEG
10199: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10200: LD_EXP 20
10204: PPUSH
10205: LD_STRING D3Fc-JMM-1
10207: PPUSH
10208: CALL_OW 88
// end ; end ;
10212: GO 10215
10214: POP
// DialogueOff ;
10215: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10219: LD_EXP 8
10223: PUSH
10224: LD_INT 1
10226: NEG
10227: PUSH
10228: LD_INT 0
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: IN
10235: IFFALSE 10239
// exit ;
10237: GO 11886
// if us_scout in [ 1 , 2 ] then
10239: LD_EXP 8
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: LD_INT 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: IN
10254: IFFALSE 10953
// begin if IsInUnit ( Frank ) then
10256: LD_EXP 32
10260: PPUSH
10261: CALL_OW 310
10265: IFFALSE 10276
// ComExitBuilding ( Frank ) ;
10267: LD_EXP 32
10271: PPUSH
10272: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10276: LD_EXP 32
10280: PPUSH
10281: CALL_OW 311
10285: IFFALSE 10296
// ComExitVehicle ( Frank ) ;
10287: LD_EXP 32
10291: PPUSH
10292: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10296: LD_EXP 32
10300: PPUSH
10301: LD_INT 4
10303: PPUSH
10304: CALL_OW 235
// wait ( 0 0$1 ) ;
10308: LD_INT 35
10310: PPUSH
10311: CALL_OW 67
// if us_scout = 2 then
10315: LD_EXP 8
10319: PUSH
10320: LD_INT 2
10322: EQUAL
10323: IFFALSE 10691
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10325: LD_EXP 32
10329: PPUSH
10330: LD_INT 75
10332: PPUSH
10333: LD_INT 63
10335: PPUSH
10336: CALL_OW 111
// AddComHold ( Frank ) ;
10340: LD_EXP 32
10344: PPUSH
10345: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10349: LD_EXP 32
10353: PPUSH
10354: LD_INT 770
10356: PPUSH
10357: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10361: LD_EXP 32
10365: PPUSH
10366: LD_INT 100
10368: PPUSH
10369: LD_INT 75
10371: PPUSH
10372: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10376: LD_EXP 32
10380: PPUSH
10381: LD_INT 123
10383: PPUSH
10384: LD_INT 103
10386: PPUSH
10387: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10391: LD_EXP 32
10395: PPUSH
10396: LD_INT 138
10398: PPUSH
10399: LD_INT 108
10401: PPUSH
10402: CALL_OW 171
// AddComHold ( Frank ) ;
10406: LD_EXP 32
10410: PPUSH
10411: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10415: LD_INT 35
10417: PPUSH
10418: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10422: LD_EXP 32
10426: PPUSH
10427: LD_INT 138
10429: PPUSH
10430: LD_INT 108
10432: PPUSH
10433: CALL_OW 307
10437: IFFALSE 10415
// AddComMoveXY ( Frank , 125 , 132 ) ;
10439: LD_EXP 32
10443: PPUSH
10444: LD_INT 125
10446: PPUSH
10447: LD_INT 132
10449: PPUSH
10450: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10454: LD_INT 35
10456: PPUSH
10457: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10461: LD_INT 1
10463: PPUSH
10464: LD_EXP 32
10468: PPUSH
10469: CALL_OW 292
10473: PUSH
10474: LD_EXP 32
10478: PPUSH
10479: LD_INT 7
10481: PPUSH
10482: CALL_OW 296
10486: PUSH
10487: LD_INT 7
10489: LESS
10490: OR
10491: IFFALSE 10454
// DialogueOn ;
10493: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10497: LD_EXP 32
10501: PPUSH
10502: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10506: LD_INT 10
10508: PPUSH
10509: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10513: LD_EXP 20
10517: PPUSH
10518: LD_STRING D4Fa-JMM-1
10520: PPUSH
10521: CALL_OW 88
// for i in points do
10525: LD_ADDR_VAR 0 1
10529: PUSH
10530: LD_VAR 0 2
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10594
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10538: LD_VAR 0 1
10542: PUSH
10543: LD_INT 1
10545: ARRAY
10546: PPUSH
10547: LD_VAR 0 1
10551: PUSH
10552: LD_INT 2
10554: ARRAY
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: LD_INT 20
10561: NEG
10562: PPUSH
10563: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10567: LD_VAR 0 1
10571: PUSH
10572: LD_INT 1
10574: ARRAY
10575: PPUSH
10576: LD_VAR 0 1
10580: PUSH
10581: LD_INT 2
10583: ARRAY
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 331
// end ;
10592: GO 10535
10594: POP
10595: POP
// dwait ( 0 0$0.5 ) ;
10596: LD_INT 18
10598: PPUSH
10599: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10603: LD_INT 42
10605: PPUSH
10606: LD_INT 27
10608: PPUSH
10609: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10613: LD_EXP 32
10617: PPUSH
10618: LD_STRING D4Fa-Frank-1
10620: PPUSH
10621: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10625: LD_INT 18
10627: PPUSH
10628: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10632: LD_EXP 20
10636: PPUSH
10637: LD_STRING D4Fa-JMM-2
10639: PPUSH
10640: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10644: LD_INT 118
10646: PPUSH
10647: LD_INT 80
10649: PPUSH
10650: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10654: LD_EXP 32
10658: PPUSH
10659: LD_STRING D4Fa-Frank-2
10661: PPUSH
10662: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10666: LD_INT 10
10668: PPUSH
10669: CALL_OW 68
// DialogueOff ;
10673: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10677: LD_EXP 32
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 235
// end else
10689: GO 10953
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10691: LD_INT 2
10693: PPUSH
10694: LD_INT 4
10696: PPUSH
10697: LD_INT 2
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10707: LD_EXP 32
10711: PPUSH
10712: LD_INT 75
10714: PPUSH
10715: LD_INT 63
10717: PPUSH
10718: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10722: LD_EXP 32
10726: PPUSH
10727: LD_INT 175
10729: PPUSH
10730: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10734: LD_EXP 32
10738: PPUSH
10739: LD_INT 102
10741: PPUSH
10742: LD_INT 76
10744: PPUSH
10745: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10749: LD_EXP 32
10753: PPUSH
10754: LD_INT 108
10756: PPUSH
10757: LD_INT 70
10759: PPUSH
10760: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10764: LD_INT 35
10766: PPUSH
10767: CALL_OW 67
// until See ( 2 , Frank ) ;
10771: LD_INT 2
10773: PPUSH
10774: LD_EXP 32
10778: PPUSH
10779: CALL_OW 292
10783: IFFALSE 10764
// ComMoveXY ( Frank , 112 , 118 ) ;
10785: LD_EXP 32
10789: PPUSH
10790: LD_INT 112
10792: PPUSH
10793: LD_INT 118
10795: PPUSH
10796: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10800: LD_EXP 32
10804: PPUSH
10805: CALL_OW 256
10809: PUSH
10810: LD_INT 750
10812: GREATEREQUAL
10813: IFFALSE 10827
// SetLives ( Frank , 700 ) ;
10815: LD_EXP 32
10819: PPUSH
10820: LD_INT 700
10822: PPUSH
10823: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10827: LD_INT 35
10829: PPUSH
10830: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10834: LD_INT 1
10836: PPUSH
10837: LD_EXP 32
10841: PPUSH
10842: CALL_OW 292
10846: PUSH
10847: LD_EXP 32
10851: PPUSH
10852: LD_INT 7
10854: PPUSH
10855: CALL_OW 296
10859: PUSH
10860: LD_INT 17
10862: LESS
10863: OR
10864: IFFALSE 10827
// DialogueOn ;
10866: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10870: LD_EXP 32
10874: PPUSH
10875: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10879: LD_EXP 32
10883: PPUSH
10884: LD_STRING D4Fb-Frank-1
10886: PPUSH
10887: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10891: LD_EXP 20
10895: PPUSH
10896: LD_STRING D4Fb-JMM-1
10898: PPUSH
10899: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10903: LD_INT 2
10905: PPUSH
10906: LD_STRING D4Fb-FSci1-1
10908: PPUSH
10909: CALL 15534 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10913: LD_EXP 32
10917: PPUSH
10918: LD_STRING D4Fb-Frank-2
10920: PPUSH
10921: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10925: LD_EXP 20
10929: PPUSH
10930: LD_STRING D4Fb-JMM-2
10932: PPUSH
10933: CALL_OW 88
// DialogueOff ;
10937: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10941: LD_EXP 32
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10953: LD_EXP 33
10957: PPUSH
10958: CALL_OW 302
10962: PUSH
10963: LD_EXP 32
10967: NOT
10968: AND
10969: IFFALSE 11117
// begin DialogueOn ;
10971: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10975: LD_EXP 20
10979: PUSH
10980: LD_EXP 33
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PPUSH
10989: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10993: LD_EXP 33
10997: PPUSH
10998: LD_STRING D3Y-Yam-1
11000: PPUSH
11001: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11005: LD_EXP 20
11009: PPUSH
11010: LD_STRING D3Y-JMM-1
11012: PPUSH
11013: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11017: LD_EXP 33
11021: PPUSH
11022: LD_STRING D3Y-Yam-2
11024: PPUSH
11025: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11029: LD_STRING QYamoko
11031: PPUSH
11032: CALL_OW 97
11036: PUSH
11037: LD_INT 1
11039: DOUBLE
11040: EQUAL
11041: IFTRUE 11045
11043: GO 11080
11045: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11046: LD_EXP 20
11050: PPUSH
11051: LD_STRING D3Ya-JMM-1
11053: PPUSH
11054: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11058: LD_EXP 33
11062: PPUSH
11063: LD_STRING D3Ya-Yam-1
11065: PPUSH
11066: CALL_OW 88
// us_scout := 1 ;
11070: LD_ADDR_EXP 8
11074: PUSH
11075: LD_INT 1
11077: ST_TO_ADDR
// end ; 2 :
11078: GO 11113
11080: LD_INT 2
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11112
11088: POP
// begin us_scout := - 1 ;
11089: LD_ADDR_EXP 8
11093: PUSH
11094: LD_INT 1
11096: NEG
11097: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11098: LD_EXP 20
11102: PPUSH
11103: LD_STRING D3Yb-JMM-1
11105: PPUSH
11106: CALL_OW 88
// end ; end ;
11110: GO 11113
11112: POP
// DialogueOff ;
11113: CALL_OW 7
// end ; if Frank then
11117: LD_EXP 32
11121: IFFALSE 11125
// exit ;
11123: GO 11886
// if us_scout in [ - 1 , 0 ] then
11125: LD_EXP 8
11129: PUSH
11130: LD_INT 1
11132: NEG
11133: PUSH
11134: LD_INT 0
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: IN
11141: IFFALSE 11145
// exit ;
11143: GO 11886
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11145: LD_ADDR_EXP 8
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 2
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_OWVAR 67
11168: ARRAY
11169: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11170: LD_EXP 8
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: IN
11185: IFFALSE 11886
// begin if IsInUnit ( Kikuchi ) then
11187: LD_EXP 33
11191: PPUSH
11192: CALL_OW 310
11196: IFFALSE 11207
// ComExitBuilding ( Kikuchi ) ;
11198: LD_EXP 33
11202: PPUSH
11203: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11207: LD_EXP 33
11211: PPUSH
11212: CALL_OW 311
11216: IFFALSE 11227
// ComExitVehicle ( Kikuchi ) ;
11218: LD_EXP 33
11222: PPUSH
11223: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11227: LD_EXP 33
11231: PPUSH
11232: LD_INT 4
11234: PPUSH
11235: CALL_OW 235
// wait ( 0 0$1 ) ;
11239: LD_INT 35
11241: PPUSH
11242: CALL_OW 67
// if us_scout = 2 then
11246: LD_EXP 8
11250: PUSH
11251: LD_INT 2
11253: EQUAL
11254: IFFALSE 11634
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11256: LD_EXP 33
11260: PPUSH
11261: LD_INT 75
11263: PPUSH
11264: LD_INT 63
11266: PPUSH
11267: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11271: LD_EXP 33
11275: PPUSH
11276: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11280: LD_EXP 33
11284: PPUSH
11285: LD_INT 770
11287: PPUSH
11288: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_INT 100
11299: PPUSH
11300: LD_INT 75
11302: PPUSH
11303: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11307: LD_EXP 33
11311: PPUSH
11312: LD_INT 123
11314: PPUSH
11315: LD_INT 103
11317: PPUSH
11318: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11322: LD_EXP 33
11326: PPUSH
11327: LD_INT 138
11329: PPUSH
11330: LD_INT 108
11332: PPUSH
11333: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11337: LD_EXP 33
11341: PPUSH
11342: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11346: LD_INT 35
11348: PPUSH
11349: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11353: LD_EXP 33
11357: PPUSH
11358: LD_INT 138
11360: PPUSH
11361: LD_INT 108
11363: PPUSH
11364: CALL_OW 307
11368: IFFALSE 11346
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11370: LD_EXP 33
11374: PPUSH
11375: LD_INT 125
11377: PPUSH
11378: LD_INT 132
11380: PPUSH
11381: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11385: LD_INT 35
11387: PPUSH
11388: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11392: LD_INT 1
11394: PPUSH
11395: LD_EXP 33
11399: PPUSH
11400: CALL_OW 292
11404: PUSH
11405: LD_EXP 33
11409: PPUSH
11410: LD_INT 7
11412: PPUSH
11413: CALL_OW 296
11417: PUSH
11418: LD_INT 7
11420: LESS
11421: OR
11422: IFFALSE 11385
// DialogueOn ;
11424: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11428: LD_EXP 33
11432: PPUSH
11433: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11437: LD_INT 10
11439: PPUSH
11440: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11444: LD_EXP 33
11448: PPUSH
11449: LD_STRING D4Ya-Yam-1
11451: PPUSH
11452: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11456: LD_EXP 20
11460: PPUSH
11461: LD_STRING D4Ya-JMM-1
11463: PPUSH
11464: CALL_OW 88
// for i in points do
11468: LD_ADDR_VAR 0 1
11472: PUSH
11473: LD_VAR 0 2
11477: PUSH
11478: FOR_IN
11479: IFFALSE 11537
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11481: LD_VAR 0 1
11485: PUSH
11486: LD_INT 1
11488: ARRAY
11489: PPUSH
11490: LD_VAR 0 1
11494: PUSH
11495: LD_INT 2
11497: ARRAY
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: LD_INT 20
11504: NEG
11505: PPUSH
11506: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11510: LD_VAR 0 1
11514: PUSH
11515: LD_INT 1
11517: ARRAY
11518: PPUSH
11519: LD_VAR 0 1
11523: PUSH
11524: LD_INT 2
11526: ARRAY
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 331
// end ;
11535: GO 11478
11537: POP
11538: POP
// dwait ( 0 0$0.5 ) ;
11539: LD_INT 18
11541: PPUSH
11542: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11546: LD_INT 42
11548: PPUSH
11549: LD_INT 27
11551: PPUSH
11552: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11556: LD_EXP 33
11560: PPUSH
11561: LD_STRING D4Ya-Yam-2
11563: PPUSH
11564: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11568: LD_INT 18
11570: PPUSH
11571: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11575: LD_INT 118
11577: PPUSH
11578: LD_INT 80
11580: PPUSH
11581: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11585: LD_EXP 20
11589: PPUSH
11590: LD_STRING D4Ya-JMM-2
11592: PPUSH
11593: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11597: LD_EXP 33
11601: PPUSH
11602: LD_STRING D4Ya-Yam-3
11604: PPUSH
11605: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11609: LD_INT 10
11611: PPUSH
11612: CALL_OW 68
// DialogueOff ;
11616: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11620: LD_EXP 33
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 235
// end else
11632: GO 11886
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11634: LD_INT 2
11636: PPUSH
11637: LD_INT 4
11639: PPUSH
11640: LD_INT 2
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11650: LD_EXP 33
11654: PPUSH
11655: LD_INT 75
11657: PPUSH
11658: LD_INT 63
11660: PPUSH
11661: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11665: LD_EXP 33
11669: PPUSH
11670: LD_INT 175
11672: PPUSH
11673: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11677: LD_EXP 33
11681: PPUSH
11682: LD_INT 102
11684: PPUSH
11685: LD_INT 76
11687: PPUSH
11688: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11692: LD_EXP 33
11696: PPUSH
11697: LD_INT 108
11699: PPUSH
11700: LD_INT 70
11702: PPUSH
11703: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11707: LD_INT 35
11709: PPUSH
11710: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11714: LD_INT 2
11716: PPUSH
11717: LD_EXP 33
11721: PPUSH
11722: CALL_OW 292
11726: IFFALSE 11707
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11728: LD_EXP 33
11732: PPUSH
11733: LD_INT 112
11735: PPUSH
11736: LD_INT 118
11738: PPUSH
11739: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11743: LD_EXP 33
11747: PPUSH
11748: CALL_OW 256
11752: PUSH
11753: LD_INT 750
11755: GREATEREQUAL
11756: IFFALSE 11770
// SetLives ( Kikuchi , 700 ) ;
11758: LD_EXP 33
11762: PPUSH
11763: LD_INT 700
11765: PPUSH
11766: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11770: LD_INT 35
11772: PPUSH
11773: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11777: LD_INT 1
11779: PPUSH
11780: LD_EXP 33
11784: PPUSH
11785: CALL_OW 292
11789: PUSH
11790: LD_EXP 33
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 296
11802: PUSH
11803: LD_INT 17
11805: LESS
11806: OR
11807: IFFALSE 11770
// DialogueOn ;
11809: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11813: LD_EXP 33
11817: PPUSH
11818: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11822: LD_EXP 33
11826: PPUSH
11827: LD_STRING D4Yb-Yam-1
11829: PPUSH
11830: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11834: LD_EXP 20
11838: PPUSH
11839: LD_STRING D4Yb-JMM-1
11841: PPUSH
11842: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11846: LD_EXP 33
11850: PPUSH
11851: LD_STRING D4Yb-Yam-2
11853: PPUSH
11854: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11858: LD_EXP 20
11862: PPUSH
11863: LD_STRING D4Yb-JMM-2
11865: PPUSH
11866: CALL_OW 88
// DialogueOff ;
11870: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11874: LD_EXP 33
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 235
// end ; end ; end ;
11886: PPOPN 2
11888: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11889: LD_EXP 6
11893: IFFALSE 12926
11895: GO 11897
11897: DISABLE
11898: LD_INT 0
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// begin enable ;
11904: ENABLE
// if not seen [ 1 ] then
11905: LD_EXP 9
11909: PUSH
11910: LD_INT 1
11912: ARRAY
11913: NOT
11914: IFFALSE 12094
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: LD_INT 22
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: LD_INT 25
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 33
11946: PUSH
11947: LD_INT 4
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PPUSH
11963: CALL_OW 69
11967: ST_TO_ADDR
// if tmp then
11968: LD_VAR 0 2
11972: IFFALSE 12094
// for i in tmp do
11974: LD_ADDR_VAR 0 1
11978: PUSH
11979: LD_VAR 0 2
11983: PUSH
11984: FOR_IN
11985: IFFALSE 12092
// if See ( 1 , i ) then
11987: LD_INT 1
11989: PPUSH
11990: LD_VAR 0 1
11994: PPUSH
11995: CALL_OW 292
11999: IFFALSE 12090
// begin seen := Replace ( seen , 1 , true ) ;
12001: LD_ADDR_EXP 9
12005: PUSH
12006: LD_EXP 9
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 1
12021: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12022: LD_INT 1
12024: PPUSH
12025: CALL 15356 0 1
12029: IFFALSE 12090
// begin DialogueOn ;
12031: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12035: LD_VAR 0 1
12039: PPUSH
12040: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12044: LD_INT 10
12046: PPUSH
12047: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12051: LD_ADDR_VAR 0 3
12055: PUSH
12056: LD_INT 1
12058: PPUSH
12059: LD_STRING D5a-Sol2-1
12061: PPUSH
12062: CALL 15534 0 2
12066: ST_TO_ADDR
// if not un then
12067: LD_VAR 0 3
12071: NOT
12072: IFFALSE 12084
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12074: LD_INT 2
12076: PPUSH
12077: LD_STRING D5a-FSol2-1
12079: PPUSH
12080: CALL 15534 0 2
// DialogueOff ;
12084: CALL_OW 7
// break ;
12088: GO 12092
// end ; end ;
12090: GO 11984
12092: POP
12093: POP
// end ; if not seen [ 2 ] then
12094: LD_EXP 9
12098: PUSH
12099: LD_INT 2
12101: ARRAY
12102: NOT
12103: IFFALSE 12328
// begin can_kamikazed := true ;
12105: LD_ADDR_EXP 10
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 25
12130: PUSH
12131: LD_INT 17
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if tmp then
12147: LD_VAR 0 2
12151: IFFALSE 12328
// for i in tmp do
12153: LD_ADDR_VAR 0 1
12157: PUSH
12158: LD_VAR 0 2
12162: PUSH
12163: FOR_IN
12164: IFFALSE 12326
// if See ( 1 , i ) then
12166: LD_INT 1
12168: PPUSH
12169: LD_VAR 0 1
12173: PPUSH
12174: CALL_OW 292
12178: IFFALSE 12324
// begin seen := Replace ( seen , 2 , true ) ;
12180: LD_ADDR_EXP 9
12184: PUSH
12185: LD_EXP 9
12189: PPUSH
12190: LD_INT 2
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: CALL_OW 1
12200: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12201: LD_INT 1
12203: PPUSH
12204: CALL 15356 0 1
12208: IFFALSE 12324
// begin DialogueOn ;
12210: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12214: LD_VAR 0 1
12218: PPUSH
12219: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12223: LD_INT 10
12225: PPUSH
12226: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12230: LD_ADDR_VAR 0 3
12234: PUSH
12235: LD_INT 1
12237: PPUSH
12238: LD_STRING D5b-Sol1-1
12240: PPUSH
12241: CALL 15534 0 2
12245: ST_TO_ADDR
// if not un then
12246: LD_VAR 0 3
12250: NOT
12251: IFFALSE 12269
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12253: LD_ADDR_VAR 0 3
12257: PUSH
12258: LD_INT 2
12260: PPUSH
12261: LD_STRING D5b-FSol1-1
12263: PPUSH
12264: CALL 15534 0 2
12268: ST_TO_ADDR
// if un then
12269: LD_VAR 0 3
12273: IFFALSE 12318
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_INT 1
12282: PPUSH
12283: LD_STRING D5b-Sol2-1
12285: PPUSH
12286: LD_VAR 0 3
12290: PPUSH
12291: CALL 15760 0 3
12295: ST_TO_ADDR
// if not un2 then
12296: LD_VAR 0 4
12300: NOT
12301: IFFALSE 12318
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12303: LD_INT 2
12305: PPUSH
12306: LD_STRING D5b-FSol2-1
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: CALL 15760 0 3
// end ; DialogueOff ;
12318: CALL_OW 7
// break ;
12322: GO 12326
// end ; end ;
12324: GO 12163
12326: POP
12327: POP
// end ; if not seen [ 3 ] then
12328: LD_EXP 9
12332: PUSH
12333: LD_INT 3
12335: ARRAY
12336: NOT
12337: IFFALSE 12511
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12339: LD_ADDR_VAR 0 2
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 33
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: ST_TO_ADDR
// if tmp then
12373: LD_VAR 0 2
12377: IFFALSE 12511
// for i in tmp do
12379: LD_ADDR_VAR 0 1
12383: PUSH
12384: LD_VAR 0 2
12388: PUSH
12389: FOR_IN
12390: IFFALSE 12509
// if See ( 1 , i ) then
12392: LD_INT 1
12394: PPUSH
12395: LD_VAR 0 1
12399: PPUSH
12400: CALL_OW 292
12404: IFFALSE 12507
// begin seen := Replace ( seen , 3 , true ) ;
12406: LD_ADDR_EXP 9
12410: PUSH
12411: LD_EXP 9
12415: PPUSH
12416: LD_INT 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 1
12426: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12427: LD_INT 1
12429: PPUSH
12430: CALL 15356 0 1
12434: IFFALSE 12507
// begin DialogueOn ;
12436: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12440: LD_VAR 0 1
12444: PPUSH
12445: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12449: LD_INT 10
12451: PPUSH
12452: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 1
12463: PPUSH
12464: LD_STRING D8-Sol1-1
12466: PPUSH
12467: CALL 15534 0 2
12471: ST_TO_ADDR
// if not un then
12472: LD_VAR 0 3
12476: NOT
12477: IFFALSE 12489
// SayRand ( sex_female , D8-FSol1-1 ) ;
12479: LD_INT 2
12481: PPUSH
12482: LD_STRING D8-FSol1-1
12484: PPUSH
12485: CALL 15534 0 2
// Say ( JMM , D8-JMM-1 ) ;
12489: LD_EXP 20
12493: PPUSH
12494: LD_STRING D8-JMM-1
12496: PPUSH
12497: CALL_OW 88
// DialogueOff ;
12501: CALL_OW 7
// break ;
12505: GO 12509
// end ; end ;
12507: GO 12389
12509: POP
12510: POP
// end ; if not seen [ 4 ] then
12511: LD_EXP 9
12515: PUSH
12516: LD_INT 4
12518: ARRAY
12519: NOT
12520: IFFALSE 12682
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12522: LD_ADDR_VAR 0 2
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 33
12539: PUSH
12540: LD_INT 5
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: ST_TO_ADDR
// if tmp then
12556: LD_VAR 0 2
12560: IFFALSE 12682
// for i in tmp do
12562: LD_ADDR_VAR 0 1
12566: PUSH
12567: LD_VAR 0 2
12571: PUSH
12572: FOR_IN
12573: IFFALSE 12680
// if See ( 1 , i ) then
12575: LD_INT 1
12577: PPUSH
12578: LD_VAR 0 1
12582: PPUSH
12583: CALL_OW 292
12587: IFFALSE 12678
// begin seen := Replace ( seen , 4 , true ) ;
12589: LD_ADDR_EXP 9
12593: PUSH
12594: LD_EXP 9
12598: PPUSH
12599: LD_INT 4
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: CALL_OW 1
12609: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12610: LD_INT 1
12612: PPUSH
12613: CALL 15356 0 1
12617: IFFALSE 12678
// begin DialogueOn ;
12619: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12632: LD_INT 10
12634: PPUSH
12635: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12639: LD_ADDR_VAR 0 3
12643: PUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_STRING D5a-Sol1-1
12649: PPUSH
12650: CALL 15534 0 2
12654: ST_TO_ADDR
// if not un then
12655: LD_VAR 0 3
12659: NOT
12660: IFFALSE 12672
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12662: LD_INT 2
12664: PPUSH
12665: LD_STRING D5a-FSol1-1
12667: PPUSH
12668: CALL 15534 0 2
// DialogueOff ;
12672: CALL_OW 7
// break ;
12676: GO 12680
// end ; end ;
12678: GO 12572
12680: POP
12681: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12682: LD_EXP 9
12686: PUSH
12687: LD_INT 5
12689: ARRAY
12690: NOT
12691: PUSH
12692: LD_EXP 9
12696: PUSH
12697: LD_INT 3
12699: ARRAY
12700: AND
12701: IFFALSE 12875
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12703: LD_ADDR_VAR 0 2
12707: PUSH
12708: LD_INT 22
12710: PUSH
12711: LD_INT 2
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 34
12720: PUSH
12721: LD_INT 31
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// if tmp then
12737: LD_VAR 0 2
12741: IFFALSE 12875
// for i in tmp do
12743: LD_ADDR_VAR 0 1
12747: PUSH
12748: LD_VAR 0 2
12752: PUSH
12753: FOR_IN
12754: IFFALSE 12873
// if See ( 1 , i ) then
12756: LD_INT 1
12758: PPUSH
12759: LD_VAR 0 1
12763: PPUSH
12764: CALL_OW 292
12768: IFFALSE 12871
// begin seen := Replace ( seen , 5 , true ) ;
12770: LD_ADDR_EXP 9
12774: PUSH
12775: LD_EXP 9
12779: PPUSH
12780: LD_INT 5
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 1
12790: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12791: LD_INT 1
12793: PPUSH
12794: CALL 15356 0 1
12798: IFFALSE 12871
// begin DialogueOn ;
12800: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12804: LD_VAR 0 1
12808: PPUSH
12809: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12813: LD_INT 10
12815: PPUSH
12816: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 1
12827: PPUSH
12828: LD_STRING D8a-Sol2-1
12830: PPUSH
12831: CALL 15534 0 2
12835: ST_TO_ADDR
// if not un then
12836: LD_VAR 0 3
12840: NOT
12841: IFFALSE 12853
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12843: LD_INT 2
12845: PPUSH
12846: LD_STRING D8a-FSol2-1
12848: PPUSH
12849: CALL 15534 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12853: LD_EXP 20
12857: PPUSH
12858: LD_STRING D8a-JMM-1
12860: PPUSH
12861: CALL_OW 88
// DialogueOff ;
12865: CALL_OW 7
// break ;
12869: GO 12873
// end ; end ;
12871: GO 12753
12873: POP
12874: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12875: LD_EXP 9
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PUSH
12884: LD_EXP 9
12888: PUSH
12889: LD_INT 2
12891: ARRAY
12892: AND
12893: PUSH
12894: LD_EXP 9
12898: PUSH
12899: LD_INT 3
12901: ARRAY
12902: AND
12903: PUSH
12904: LD_EXP 9
12908: PUSH
12909: LD_INT 4
12911: ARRAY
12912: AND
12913: PUSH
12914: LD_EXP 9
12918: PUSH
12919: LD_INT 5
12921: ARRAY
12922: AND
12923: IFFALSE 12926
// disable ;
12925: DISABLE
// end ;
12926: PPOPN 4
12928: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12929: LD_EXP 10
12933: PUSH
12934: LD_EXP 11
12938: AND
12939: IFFALSE 13137
12941: GO 12943
12943: DISABLE
12944: LD_INT 0
12946: PPUSH
// begin DialogueOn ;
12947: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12951: LD_EXP 11
12955: PPUSH
12956: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12960: LD_ADDR_VAR 0 1
12964: PUSH
12965: LD_INT 1
12967: PPUSH
12968: LD_STRING D5c-Sol1-1
12970: PPUSH
12971: CALL 15534 0 2
12975: ST_TO_ADDR
// if not un then
12976: LD_VAR 0 1
12980: NOT
12981: IFFALSE 12999
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12983: LD_ADDR_VAR 0 1
12987: PUSH
12988: LD_INT 2
12990: PPUSH
12991: LD_STRING D5c-FSol1-1
12993: PPUSH
12994: CALL 15534 0 2
12998: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12999: LD_EXP 20
13003: PPUSH
13004: LD_STRING D5c-JMM-1
13006: PPUSH
13007: CALL_OW 88
// if IsOk ( Lisa ) then
13011: LD_EXP 21
13015: PPUSH
13016: CALL_OW 302
13020: IFFALSE 13036
// Say ( Lisa , D5d-Lisa-1 ) else
13022: LD_EXP 21
13026: PPUSH
13027: LD_STRING D5d-Lisa-1
13029: PPUSH
13030: CALL_OW 88
13034: GO 13121
// if IsOk ( Cyrus ) then
13036: LD_EXP 24
13040: PPUSH
13041: CALL_OW 302
13045: IFFALSE 13061
// Say ( Cyrus , D5d-Cyrus-1 ) else
13047: LD_EXP 24
13051: PPUSH
13052: LD_STRING D5d-Cyrus-1
13054: PPUSH
13055: CALL_OW 88
13059: GO 13121
// if IsOk ( Gary ) then
13061: LD_EXP 31
13065: PPUSH
13066: CALL_OW 302
13070: IFFALSE 13086
// Say ( Gary , D5d-Gary-1 ) else
13072: LD_EXP 31
13076: PPUSH
13077: LD_STRING D5d-Gary-1
13079: PPUSH
13080: CALL_OW 88
13084: GO 13121
// if GetSex ( un ) = sex_male then
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 258
13095: PUSH
13096: LD_INT 1
13098: EQUAL
13099: IFFALSE 13115
// Say ( un , D5d-Sol1-1 ) else
13101: LD_VAR 0 1
13105: PPUSH
13106: LD_STRING D5d-Sol1-1
13108: PPUSH
13109: CALL_OW 88
13113: GO 13121
// begin DialogueOff ;
13115: CALL_OW 7
// exit ;
13119: GO 13137
// end ; Say ( JMM , D5d-JMM-1 ) ;
13121: LD_EXP 20
13125: PPUSH
13126: LD_STRING D5d-JMM-1
13128: PPUSH
13129: CALL_OW 88
// DialogueOff ;
13133: CALL_OW 7
// end ;
13137: PPOPN 1
13139: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13140: LD_INT 1
13142: PPUSH
13143: LD_INT 17
13145: PPUSH
13146: CALL_OW 294
13150: PUSH
13151: LD_INT 2
13153: GREATEREQUAL
13154: IFFALSE 13275
13156: GO 13158
13158: DISABLE
13159: LD_INT 0
13161: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13162: LD_INT 10
13164: PPUSH
13165: LD_INT 5
13167: PPUSH
13168: LD_INT 1
13170: PPUSH
13171: LD_INT 10
13173: NEG
13174: PPUSH
13175: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13179: LD_INT 10
13181: PPUSH
13182: LD_INT 5
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13192: LD_INT 10
13194: PPUSH
13195: LD_INT 5
13197: PPUSH
13198: CALL_OW 86
// DialogueOn ;
13202: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13206: LD_ADDR_VAR 0 1
13210: PUSH
13211: LD_INT 1
13213: PPUSH
13214: LD_STRING D6-Sci1-1
13216: PPUSH
13217: CALL 15534 0 2
13221: ST_TO_ADDR
// if un then
13222: LD_VAR 0 1
13226: IFFALSE 13264
// begin Say ( JMM , D6-JMM-1 ) ;
13228: LD_EXP 20
13232: PPUSH
13233: LD_STRING D6-JMM-1
13235: PPUSH
13236: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13240: LD_VAR 0 1
13244: PPUSH
13245: LD_STRING D6-Sci1-2
13247: PPUSH
13248: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13252: LD_EXP 20
13256: PPUSH
13257: LD_STRING D6-JMM-2
13259: PPUSH
13260: CALL_OW 88
// end ; DialogueOff ;
13264: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13268: LD_STRING M3
13270: PPUSH
13271: CALL_OW 337
// end ;
13275: PPOPN 1
13277: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13278: LD_OWVAR 1
13282: PUSH
13283: LD_INT 42000
13285: GREATEREQUAL
13286: PUSH
13287: LD_INT 2
13289: PPUSH
13290: LD_INT 169
13292: PPUSH
13293: LD_INT 90
13295: PPUSH
13296: LD_INT 10
13298: PPUSH
13299: CALL 52544 0 4
13303: PUSH
13304: LD_INT 4
13306: ARRAY
13307: PUSH
13308: LD_INT 0
13310: EQUAL
13311: PUSH
13312: LD_INT 45
13314: PPUSH
13315: CALL_OW 301
13319: OR
13320: PUSH
13321: LD_INT 45
13323: PPUSH
13324: CALL_OW 255
13328: PUSH
13329: LD_INT 1
13331: EQUAL
13332: OR
13333: AND
13334: PUSH
13335: LD_INT 94
13337: PPUSH
13338: CALL_OW 301
13342: NOT
13343: AND
13344: IFFALSE 14470
13346: GO 13348
13348: DISABLE
13349: LD_INT 0
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
// begin uc_side := 5 ;
13355: LD_ADDR_OWVAR 20
13359: PUSH
13360: LD_INT 5
13362: ST_TO_ADDR
// uc_nation := 2 ;
13363: LD_ADDR_OWVAR 21
13367: PUSH
13368: LD_INT 2
13370: ST_TO_ADDR
// InitHc ;
13371: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13375: LD_INT 1
13377: PPUSH
13378: LD_INT 3
13380: PPUSH
13381: LD_INT 8
13383: PPUSH
13384: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13388: LD_ADDR_OWVAR 29
13392: PUSH
13393: LD_INT 12
13395: PUSH
13396: LD_INT 12
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13403: LD_ADDR_OWVAR 33
13407: PUSH
13408: LD_STRING SecondCharsGal
13410: ST_TO_ADDR
// hc_face_number := 7 ;
13411: LD_ADDR_OWVAR 34
13415: PUSH
13416: LD_INT 7
13418: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13419: LD_ADDR_EXP 45
13423: PUSH
13424: CALL_OW 44
13428: ST_TO_ADDR
// InitHc ;
13429: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 16
13438: PPUSH
13439: LD_INT 2
13441: PPUSH
13442: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13446: LD_ADDR_OWVAR 29
13450: PUSH
13451: LD_INT 12
13453: PUSH
13454: LD_INT 12
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: ST_TO_ADDR
// hc_name :=  ;
13461: LD_ADDR_OWVAR 26
13465: PUSH
13466: LD_STRING 
13468: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13469: LD_ADDR_EXP 46
13473: PUSH
13474: CALL_OW 44
13478: ST_TO_ADDR
// InitHc ;
13479: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13483: LD_INT 35
13485: PPUSH
13486: CALL_OW 67
// until not InBattle ( 1 ) ;
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 463
13497: NOT
13498: IFFALSE 13483
// wait ( 0 0$5 ) ;
13500: LD_INT 175
13502: PPUSH
13503: CALL_OW 67
// DialogueOn ;
13507: CALL_OW 6
// InGameOn ;
13511: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13515: LD_ADDR_VAR 0 1
13519: PUSH
13520: LD_INT 22
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 2
13532: PUSH
13533: LD_INT 25
13535: PUSH
13536: LD_INT 1
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 25
13545: PUSH
13546: LD_INT 2
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 25
13555: PUSH
13556: LD_INT 3
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 4
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 25
13575: PUSH
13576: LD_INT 5
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 25
13585: PUSH
13586: LD_INT 8
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PPUSH
13606: CALL_OW 69
13610: PUSH
13611: LD_EXP 20
13615: PUSH
13616: LD_EXP 21
13620: PUSH
13621: LD_EXP 22
13625: PUSH
13626: LD_EXP 23
13630: PUSH
13631: LD_EXP 24
13635: PUSH
13636: LD_EXP 25
13640: PUSH
13641: LD_EXP 26
13645: PUSH
13646: LD_EXP 27
13650: PUSH
13651: LD_EXP 28
13655: PUSH
13656: LD_EXP 30
13660: PUSH
13661: LD_EXP 31
13665: PUSH
13666: LD_EXP 32
13670: PUSH
13671: LD_EXP 33
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: DIFF
13691: PPUSH
13692: LD_INT 26
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: PUSH
13707: LD_INT 1
13709: ARRAY
13710: ST_TO_ADDR
// if not un and Brown then
13711: LD_VAR 0 1
13715: NOT
13716: PUSH
13717: LD_EXP 26
13721: AND
13722: IFFALSE 13734
// un := Brown ;
13724: LD_ADDR_VAR 0 1
13728: PUSH
13729: LD_EXP 26
13733: ST_TO_ADDR
// if un then
13734: LD_VAR 0 1
13738: IFFALSE 13764
// begin Say ( un , D7-Sol1-1 ) ;
13740: LD_VAR 0 1
13744: PPUSH
13745: LD_STRING D7-Sol1-1
13747: PPUSH
13748: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13752: LD_EXP 20
13756: PPUSH
13757: LD_STRING D7-JMM-1
13759: PPUSH
13760: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13764: LD_EXP 45
13768: PPUSH
13769: LD_STRING D7-Ar1-1
13771: PPUSH
13772: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13776: LD_EXP 20
13780: PPUSH
13781: LD_STRING D7-JMM-2
13783: PPUSH
13784: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13788: LD_EXP 45
13792: PPUSH
13793: LD_STRING D7-Ar1-2
13795: PPUSH
13796: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13800: LD_EXP 20
13804: PPUSH
13805: LD_STRING D7-JMM-3
13807: PPUSH
13808: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13812: LD_EXP 45
13816: PPUSH
13817: LD_STRING D7-Ar1-3
13819: PPUSH
13820: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13824: LD_EXP 20
13828: PPUSH
13829: LD_STRING D7-JMM-4
13831: PPUSH
13832: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13836: LD_EXP 45
13840: PPUSH
13841: LD_STRING D7-Ar1-4
13843: PPUSH
13844: CALL_OW 94
// InGameOff ;
13848: CALL_OW 9
// DialogueOff ;
13852: CALL_OW 7
// case Query ( QCameras ) of 1 :
13856: LD_STRING QCameras
13858: PPUSH
13859: CALL_OW 97
13863: PUSH
13864: LD_INT 1
13866: DOUBLE
13867: EQUAL
13868: IFTRUE 13872
13870: GO 13875
13872: POP
// ; 2 :
13873: GO 13889
13875: LD_INT 2
13877: DOUBLE
13878: EQUAL
13879: IFTRUE 13883
13881: GO 13888
13883: POP
// exit ; end ;
13884: GO 14470
13886: GO 13889
13888: POP
// ChangeMissionObjectives ( MCar ) ;
13889: LD_STRING MCar
13891: PPUSH
13892: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13896: LD_INT 124
13898: PPUSH
13899: LD_INT 90
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 6
13907: NEG
13908: PPUSH
13909: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13913: LD_INT 124
13915: PPUSH
13916: LD_INT 90
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13926: LD_INT 12
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 424
// wait ( 3 ) ;
13936: LD_INT 3
13938: PPUSH
13939: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13943: LD_INT 124
13945: PPUSH
13946: LD_INT 90
13948: PPUSH
13949: CALL_OW 86
// cargo := false ;
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: LD_INT 0
13960: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13961: LD_INT 35
13963: PPUSH
13964: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_INT 12
13975: PPUSH
13976: LD_INT 32
13978: PUSH
13979: LD_INT 3
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 34
13988: PUSH
13989: LD_INT 32
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 58
13998: PUSH
13999: EMPTY
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 70
14011: ST_TO_ADDR
// until cargo ;
14012: LD_VAR 0 3
14016: IFFALSE 13961
// cargo := cargo [ 1 ] ;
14018: LD_ADDR_VAR 0 3
14022: PUSH
14023: LD_VAR 0 3
14027: PUSH
14028: LD_INT 1
14030: ARRAY
14031: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14032: LD_VAR 0 3
14036: PPUSH
14037: LD_INT 5
14039: PPUSH
14040: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14044: LD_INT 12
14046: PPUSH
14047: LD_INT 0
14049: PPUSH
14050: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14054: LD_EXP 45
14058: PPUSH
14059: LD_INT 11
14061: PPUSH
14062: LD_INT 0
14064: PPUSH
14065: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14069: LD_EXP 46
14073: PPUSH
14074: LD_INT 11
14076: PPUSH
14077: LD_INT 0
14079: PPUSH
14080: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14084: LD_EXP 45
14088: PUSH
14089: LD_EXP 46
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PPUSH
14098: LD_INT 12
14100: PPUSH
14101: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14105: LD_EXP 45
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14119: LD_EXP 45
14123: PUSH
14124: LD_EXP 46
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PPUSH
14133: LD_INT 209
14135: PPUSH
14136: LD_INT 178
14138: PPUSH
14139: CALL_OW 171
// while ( true ) do
14143: LD_INT 1
14145: IFFALSE 14299
// begin wait ( 0 0$1 ) ;
14147: LD_INT 35
14149: PPUSH
14150: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14154: LD_EXP 45
14158: PPUSH
14159: CALL_OW 314
14163: NOT
14164: PUSH
14165: LD_EXP 46
14169: PPUSH
14170: CALL_OW 314
14174: NOT
14175: OR
14176: IFFALSE 14202
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14178: LD_EXP 45
14182: PUSH
14183: LD_EXP 46
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PPUSH
14192: LD_INT 209
14194: PPUSH
14195: LD_INT 178
14197: PPUSH
14198: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14202: LD_EXP 45
14206: PPUSH
14207: LD_INT 10
14209: PPUSH
14210: CALL_OW 308
14214: IFFALSE 14225
// RemoveUnit ( ar_mechanic ) ;
14216: LD_EXP 45
14220: PPUSH
14221: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14225: LD_EXP 46
14229: PPUSH
14230: LD_INT 10
14232: PPUSH
14233: CALL_OW 308
14237: IFFALSE 14248
// RemoveUnit ( ar_mechanic_friend ) ;
14239: LD_EXP 46
14243: PPUSH
14244: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_INT 10
14255: PPUSH
14256: CALL_OW 308
14260: IFFALSE 14271
// RemoveUnit ( cargo ) ;
14262: LD_VAR 0 3
14266: PPUSH
14267: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14271: LD_EXP 45
14275: PPUSH
14276: CALL_OW 300
14280: NOT
14281: PUSH
14282: LD_EXP 46
14286: PPUSH
14287: CALL_OW 300
14291: NOT
14292: AND
14293: IFFALSE 14297
// break ;
14295: GO 14299
// end ;
14297: GO 14143
// wait ( 0 0$2 ) ;
14299: LD_INT 70
14301: PPUSH
14302: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14306: LD_EXP 45
14310: PPUSH
14311: LD_STRING D7a-Ar1-1
14313: PPUSH
14314: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14318: LD_ADDR_VAR 0 4
14322: PUSH
14323: LD_INT 129
14325: PUSH
14326: LD_INT 10
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 103
14335: PUSH
14336: LD_INT 6
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 148
14345: PUSH
14346: LD_INT 47
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 155
14355: PUSH
14356: LD_INT 16
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: ST_TO_ADDR
// if Difficulty = 1 then
14369: LD_OWVAR 67
14373: PUSH
14374: LD_INT 1
14376: EQUAL
14377: IFFALSE 14414
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14379: LD_ADDR_VAR 0 4
14383: PUSH
14384: LD_VAR 0 4
14388: PUSH
14389: LD_INT 78
14391: PUSH
14392: LD_INT 7
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 104
14401: PUSH
14402: LD_INT 43
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: ADD
14413: ST_TO_ADDR
// for i in tmp do
14414: LD_ADDR_VAR 0 2
14418: PUSH
14419: LD_VAR 0 4
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14458
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14427: LD_VAR 0 2
14431: PUSH
14432: LD_INT 1
14434: ARRAY
14435: PPUSH
14436: LD_VAR 0 2
14440: PUSH
14441: LD_INT 2
14443: ARRAY
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: LD_INT 9
14450: NEG
14451: PPUSH
14452: CALL_OW 330
14456: GO 14424
14458: POP
14459: POP
// CenterOnXY ( 129 , 10 ) ;
14460: LD_INT 129
14462: PPUSH
14463: LD_INT 10
14465: PPUSH
14466: CALL_OW 84
// end ;
14470: PPOPN 4
14472: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14473: LD_EXP 15
14477: PUSH
14478: LD_INT 21000
14480: MINUS
14481: PUSH
14482: LD_OWVAR 1
14486: LESSEQUAL
14487: IFFALSE 14527
14489: GO 14491
14491: DISABLE
// begin powell_warn := true ;
14492: LD_ADDR_EXP 16
14496: PUSH
14497: LD_INT 1
14499: ST_TO_ADDR
// DialogueOn ;
14500: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14504: LD_EXP 29
14508: PPUSH
14509: LD_STRING D9-Pow-1
14511: PPUSH
14512: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14516: LD_INT 10
14518: PPUSH
14519: CALL_OW 68
// DialogueOff ;
14523: CALL_OW 7
// end ;
14527: END
// every 0 0$1 trigger game_time <= tick do
14528: LD_EXP 15
14532: PUSH
14533: LD_OWVAR 1
14537: LESSEQUAL
14538: IFFALSE 14577
14540: GO 14542
14542: DISABLE
// begin DialogueOn ;
14543: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14547: LD_EXP 29
14551: PPUSH
14552: LD_STRING D9a-Pow-1
14554: PPUSH
14555: CALL_OW 94
// dwait ( 0 0$2 ) ;
14559: LD_INT 70
14561: PPUSH
14562: CALL_OW 68
// DialogueOff ;
14566: CALL_OW 7
// YouLost ( Command ) ;
14570: LD_STRING Command
14572: PPUSH
14573: CALL_OW 104
// end ;
14577: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14578: LD_INT 22
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 1
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PPUSH
14602: CALL_OW 69
14606: PUSH
14607: LD_INT 0
14609: EQUAL
14610: PUSH
14611: LD_EXP 20
14615: PPUSH
14616: CALL_OW 302
14620: AND
14621: IFFALSE 15353
14623: GO 14625
14625: DISABLE
14626: LD_INT 0
14628: PPUSH
// begin if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14629: LD_OWVAR 1
14633: PUSH
14634: LD_INT 199500
14636: PUSH
14637: LD_INT 178500
14639: PUSH
14640: LD_INT 168000
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PUSH
14648: LD_OWVAR 67
14652: ARRAY
14653: LESS
14654: IFFALSE 14668
// AddMedal ( Time1 , 1 ) else
14656: LD_STRING Time1
14658: PPUSH
14659: LD_INT 1
14661: PPUSH
14662: CALL_OW 101
14666: GO 14699
// if not powell_warn then
14668: LD_EXP 16
14672: NOT
14673: IFFALSE 14688
// AddMedal ( Time1 , - 1 ) else
14675: LD_STRING Time1
14677: PPUSH
14678: LD_INT 1
14680: NEG
14681: PPUSH
14682: CALL_OW 101
14686: GO 14699
// AddMedal ( Time1 , - 2 ) ;
14688: LD_STRING Time1
14690: PPUSH
14691: LD_INT 2
14693: NEG
14694: PPUSH
14695: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14699: LD_EXP 17
14703: PUSH
14704: LD_INT 5
14706: PUSH
14707: LD_INT 4
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_OWVAR 67
14722: ARRAY
14723: GREATEREQUAL
14724: IFFALSE 14739
// AddMedal ( Destroy , - 2 ) else
14726: LD_STRING Destroy
14728: PPUSH
14729: LD_INT 2
14731: NEG
14732: PPUSH
14733: CALL_OW 101
14737: GO 14856
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14739: LD_INT 22
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: PPUSH
14770: CALL_OW 69
14774: PUSH
14775: LD_INT 25
14777: GREATEREQUAL
14778: IFFALSE 14793
// AddMedal ( Destroy , - 1 ) else
14780: LD_STRING Destroy
14782: PPUSH
14783: LD_INT 1
14785: NEG
14786: PPUSH
14787: CALL_OW 101
14791: GO 14856
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14793: LD_INT 22
14795: PUSH
14796: LD_INT 2
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 21
14805: PUSH
14806: LD_INT 3
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 50
14815: PUSH
14816: EMPTY
14817: LIST
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: PPUSH
14824: CALL_OW 69
14828: PUSH
14829: LD_INT 15
14831: GREATEREQUAL
14832: IFFALSE 14846
// AddMedal ( Destroy , 1 ) else
14834: LD_STRING Destroy
14836: PPUSH
14837: LD_INT 1
14839: PPUSH
14840: CALL_OW 101
14844: GO 14856
// AddMedal ( Destroy , 2 ) ;
14846: LD_STRING Destroy
14848: PPUSH
14849: LD_INT 2
14851: PPUSH
14852: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14856: LD_EXP 13
14860: PPUSH
14861: LD_STRING 11_artifact_captured
14863: PPUSH
14864: CALL_OW 39
// if artifact_get then
14868: LD_EXP 13
14872: IFFALSE 14886
// AddMedal ( Artefact , 1 ) else
14874: LD_STRING Artefact
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: CALL_OW 101
14884: GO 14897
// AddMedal ( Artefact , - 1 ) ;
14886: LD_STRING Artefact
14888: PPUSH
14889: LD_INT 1
14891: NEG
14892: PPUSH
14893: CALL_OW 101
// GiveMedals ( MAIN ) ;
14897: LD_STRING MAIN
14899: PPUSH
14900: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14904: LD_ADDR_EXP 19
14908: PUSH
14909: LD_EXP 19
14913: PPUSH
14914: LD_INT 51
14916: PUSH
14917: EMPTY
14918: LIST
14919: PPUSH
14920: CALL_OW 72
14924: ST_TO_ADDR
// tmp := JMM ^ selected ;
14925: LD_ADDR_VAR 0 1
14929: PUSH
14930: LD_EXP 20
14934: PUSH
14935: LD_EXP 19
14939: ADD
14940: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14950: LD_VAR 0 1
14954: PUSH
14955: LD_EXP 20
14959: PUSH
14960: LD_EXP 21
14964: PUSH
14965: LD_EXP 22
14969: PUSH
14970: LD_EXP 23
14974: PUSH
14975: LD_EXP 24
14979: PUSH
14980: LD_EXP 25
14984: PUSH
14985: LD_EXP 26
14989: PUSH
14990: LD_EXP 27
14994: PUSH
14995: LD_EXP 28
14999: PUSH
15000: LD_EXP 30
15004: PUSH
15005: LD_EXP 31
15009: PUSH
15010: LD_EXP 32
15014: PUSH
15015: LD_EXP 33
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: DIFF
15035: PPUSH
15036: LD_STRING 11c_others
15038: PPUSH
15039: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15043: LD_EXP 20
15047: PPUSH
15048: LD_EXP 3
15052: PUSH
15053: LD_STRING JMM
15055: STR
15056: PPUSH
15057: CALL_OW 38
// if Lisa then
15061: LD_EXP 21
15065: IFFALSE 15085
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15067: LD_EXP 21
15071: PPUSH
15072: LD_EXP 3
15076: PUSH
15077: LD_STRING Lisa
15079: STR
15080: PPUSH
15081: CALL_OW 38
// if Donaldson then
15085: LD_EXP 22
15089: IFFALSE 15109
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15091: LD_EXP 22
15095: PPUSH
15096: LD_EXP 3
15100: PUSH
15101: LD_STRING Donaldson
15103: STR
15104: PPUSH
15105: CALL_OW 38
// if Bobby then
15109: LD_EXP 23
15113: IFFALSE 15133
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15115: LD_EXP 23
15119: PPUSH
15120: LD_EXP 3
15124: PUSH
15125: LD_STRING Bobby
15127: STR
15128: PPUSH
15129: CALL_OW 38
// if Cyrus then
15133: LD_EXP 24
15137: IFFALSE 15157
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15139: LD_EXP 24
15143: PPUSH
15144: LD_EXP 3
15148: PUSH
15149: LD_STRING Cyrus
15151: STR
15152: PPUSH
15153: CALL_OW 38
// if Denis then
15157: LD_EXP 25
15161: IFFALSE 15181
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15163: LD_EXP 25
15167: PPUSH
15168: LD_EXP 3
15172: PUSH
15173: LD_STRING Denis
15175: STR
15176: PPUSH
15177: CALL_OW 38
// if Brown then
15181: LD_EXP 26
15185: IFFALSE 15205
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15187: LD_EXP 26
15191: PPUSH
15192: LD_EXP 3
15196: PUSH
15197: LD_STRING Brown
15199: STR
15200: PPUSH
15201: CALL_OW 38
// if Gladstone then
15205: LD_EXP 27
15209: IFFALSE 15229
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15211: LD_EXP 27
15215: PPUSH
15216: LD_EXP 3
15220: PUSH
15221: LD_STRING Gladstone
15223: STR
15224: PPUSH
15225: CALL_OW 38
// if Houten then
15229: LD_EXP 28
15233: IFFALSE 15253
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15235: LD_EXP 28
15239: PPUSH
15240: LD_EXP 3
15244: PUSH
15245: LD_STRING Houten
15247: STR
15248: PPUSH
15249: CALL_OW 38
// if Cornel then
15253: LD_EXP 30
15257: IFFALSE 15277
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
15259: LD_EXP 30
15263: PPUSH
15264: LD_EXP 3
15268: PUSH
15269: LD_STRING Cornel
15271: STR
15272: PPUSH
15273: CALL_OW 38
// if Gary then
15277: LD_EXP 31
15281: IFFALSE 15301
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15283: LD_EXP 31
15287: PPUSH
15288: LD_EXP 3
15292: PUSH
15293: LD_STRING Gary
15295: STR
15296: PPUSH
15297: CALL_OW 38
// if Frank then
15301: LD_EXP 32
15305: IFFALSE 15325
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15307: LD_EXP 32
15311: PPUSH
15312: LD_EXP 3
15316: PUSH
15317: LD_STRING Frank
15319: STR
15320: PPUSH
15321: CALL_OW 38
// if Kikuchi then
15325: LD_EXP 33
15329: IFFALSE 15349
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15331: LD_EXP 33
15335: PPUSH
15336: LD_EXP 3
15340: PUSH
15341: LD_STRING Kikuchi
15343: STR
15344: PPUSH
15345: CALL_OW 38
// YouWin ;
15349: CALL_OW 103
// end ;
15353: PPOPN 1
15355: END
// export function CanSayRand ( side ) ; begin
15356: LD_INT 0
15358: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15359: LD_ADDR_VAR 0 2
15363: PUSH
15364: LD_INT 52
15366: PUSH
15367: EMPTY
15368: LIST
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_VAR 0 1
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 2
15384: PUSH
15385: LD_INT 25
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 25
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 25
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 25
15417: PUSH
15418: LD_INT 4
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: PUSH
15442: LD_EXP 20
15446: PUSH
15447: LD_EXP 32
15451: PUSH
15452: LD_EXP 21
15456: PUSH
15457: LD_EXP 22
15461: PUSH
15462: LD_EXP 23
15466: PUSH
15467: LD_EXP 24
15471: PUSH
15472: LD_EXP 25
15476: PUSH
15477: LD_EXP 26
15481: PUSH
15482: LD_EXP 27
15486: PUSH
15487: LD_EXP 28
15491: PUSH
15492: LD_EXP 29
15496: PUSH
15497: LD_EXP 30
15501: PUSH
15502: LD_EXP 31
15506: PUSH
15507: LD_EXP 33
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: DIFF
15528: ST_TO_ADDR
// end ;
15529: LD_VAR 0 2
15533: RET
// export function SayRand ( sex , dial ) ; begin
15534: LD_INT 0
15536: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_INT 52
15544: PUSH
15545: EMPTY
15546: LIST
15547: PUSH
15548: LD_INT 22
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 26
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 25
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 25
15585: PUSH
15586: LD_INT 2
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 25
15595: PUSH
15596: LD_INT 3
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 25
15605: PUSH
15606: LD_INT 4
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 69
15630: PUSH
15631: LD_EXP 20
15635: PUSH
15636: LD_EXP 32
15640: PUSH
15641: LD_EXP 21
15645: PUSH
15646: LD_EXP 22
15650: PUSH
15651: LD_EXP 23
15655: PUSH
15656: LD_EXP 24
15660: PUSH
15661: LD_EXP 25
15665: PUSH
15666: LD_EXP 26
15670: PUSH
15671: LD_EXP 27
15675: PUSH
15676: LD_EXP 28
15680: PUSH
15681: LD_EXP 29
15685: PUSH
15686: LD_EXP 30
15690: PUSH
15691: LD_EXP 31
15695: PUSH
15696: LD_EXP 33
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: DIFF
15717: ST_TO_ADDR
// if not result then
15718: LD_VAR 0 3
15722: NOT
15723: IFFALSE 15727
// exit ;
15725: GO 15755
// result := result [ 1 ] ;
15727: LD_ADDR_VAR 0 3
15731: PUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: ST_TO_ADDR
// Say ( result , dial ) ;
15741: LD_VAR 0 3
15745: PPUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 88
// end ;
15755: LD_VAR 0 3
15759: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15760: LD_INT 0
15762: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15763: LD_ADDR_VAR 0 4
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 26
15780: PUSH
15781: LD_VAR 0 1
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: LD_INT 25
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 25
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 25
15815: PUSH
15816: LD_INT 3
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 4
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PPUSH
15845: CALL_OW 69
15849: PUSH
15850: LD_EXP 20
15854: PUSH
15855: LD_EXP 32
15859: PUSH
15860: LD_EXP 21
15864: PUSH
15865: LD_EXP 22
15869: PUSH
15870: LD_EXP 23
15874: PUSH
15875: LD_EXP 24
15879: PUSH
15880: LD_EXP 25
15884: PUSH
15885: LD_EXP 26
15889: PUSH
15890: LD_EXP 27
15894: PUSH
15895: LD_EXP 28
15899: PUSH
15900: LD_EXP 29
15904: PUSH
15905: LD_EXP 30
15909: PUSH
15910: LD_EXP 31
15914: PUSH
15915: LD_EXP 33
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: PUSH
15936: LD_VAR 0 3
15940: ADD
15941: DIFF
15942: ST_TO_ADDR
// if not result then
15943: LD_VAR 0 4
15947: NOT
15948: IFFALSE 15952
// exit ;
15950: GO 15980
// result := result [ 1 ] ;
15952: LD_ADDR_VAR 0 4
15956: PUSH
15957: LD_VAR 0 4
15961: PUSH
15962: LD_INT 1
15964: ARRAY
15965: ST_TO_ADDR
// Say ( result , dial ) ;
15966: LD_VAR 0 4
15970: PPUSH
15971: LD_VAR 0 2
15975: PPUSH
15976: CALL_OW 88
// end ; end_of_file
15980: LD_VAR 0 4
15984: RET
// export function CustomEvent ( event ) ; begin
15985: LD_INT 0
15987: PPUSH
// end ;
15988: LD_VAR 0 2
15992: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 255
16002: PUSH
16003: LD_INT 1
16005: EQUAL
16006: IFFALSE 16016
// artifact_get := true ;
16008: LD_ADDR_EXP 13
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 255
16025: PUSH
16026: LD_INT 2
16028: EQUAL
16029: IFFALSE 16047
// begin artifact_get := false ;
16031: LD_ADDR_EXP 13
16035: PUSH
16036: LD_INT 0
16038: ST_TO_ADDR
// artifact_stolen := true ;
16039: LD_ADDR_EXP 12
16043: PUSH
16044: LD_INT 1
16046: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16047: LD_ADDR_EXP 14
16051: PUSH
16052: LD_INT 1
16054: ST_TO_ADDR
// end ;
16055: PPOPN 2
16057: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16058: LD_ADDR_EXP 14
16062: PUSH
16063: LD_INT 0
16065: ST_TO_ADDR
// end ;
16066: PPOPN 2
16068: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16069: LD_VAR 0 1
16073: PUSH
16074: LD_EXP 20
16078: EQUAL
16079: IFFALSE 16090
// begin YouLost ( JMM ) ;
16081: LD_STRING JMM
16083: PPUSH
16084: CALL_OW 104
// exit ;
16088: GO 16222
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16090: LD_VAR 0 1
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_INT 1
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 21
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 2
16117: PUSH
16118: LD_INT 25
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 25
16140: PUSH
16141: LD_INT 3
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 25
16150: PUSH
16151: LD_INT 4
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 25
16160: PUSH
16161: LD_INT 5
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 25
16170: PUSH
16171: LD_INT 8
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: IN
16197: IFFALSE 16213
// loses_counter := loses_counter + 1 ;
16199: LD_ADDR_EXP 17
16203: PUSH
16204: LD_EXP 17
16208: PUSH
16209: LD_INT 1
16211: PLUS
16212: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16213: LD_VAR 0 1
16217: PPUSH
16218: CALL 42369 0 1
// end ;
16222: PPOPN 1
16224: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16225: LD_VAR 0 1
16229: PPUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL 44275 0 2
// end ;
16239: PPOPN 2
16241: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL 43584 0 1
// end ;
16251: PPOPN 1
16253: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16254: LD_VAR 0 1
16258: PPUSH
16259: LD_VAR 0 2
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_VAR 0 4
16273: PPUSH
16274: LD_VAR 0 5
16278: PPUSH
16279: CALL 41685 0 5
// end ;
16283: PPOPN 5
16285: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16286: LD_VAR 0 1
16290: PPUSH
16291: LD_VAR 0 2
16295: PPUSH
16296: CALL 41275 0 2
// end ;
16300: PPOPN 2
16302: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 247
16312: PUSH
16313: LD_INT 2
16315: EQUAL
16316: IFFALSE 16320
// exit ;
16318: GO 16337
// if not kamikazed then
16320: LD_EXP 11
16324: NOT
16325: IFFALSE 16337
// kamikazed := unit ;
16327: LD_ADDR_EXP 11
16331: PUSH
16332: LD_VAR 0 1
16336: ST_TO_ADDR
// end ;
16337: PPOPN 1
16339: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16344: LD_VAR 0 1
16348: PPUSH
16349: LD_VAR 0 2
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_VAR 0 4
16363: PPUSH
16364: CALL 41113 0 4
// end ;
16368: PPOPN 6
16370: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16371: LD_VAR 0 1
16375: PPUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: LD_VAR 0 3
16385: PPUSH
16386: CALL 40888 0 3
// end ;
16390: PPOPN 3
16392: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: CALL 42065 0 2
// end ;
16407: PPOPN 2
16409: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16410: LD_VAR 0 1
16414: PPUSH
16415: LD_VAR 0 2
16419: PPUSH
16420: CALL 40582 0 2
// end ;
16424: PPOPN 2
16426: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 2
16436: PPUSH
16437: CALL 40773 0 2
// end ;
16441: PPOPN 2
16443: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL 43343 0 1
// end ;
16453: PPOPN 1
16455: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16456: LD_VAR 0 1
16460: PPUSH
16461: LD_VAR 0 2
16465: PPUSH
16466: CALL 44536 0 2
// end ;
16470: PPOPN 2
16472: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: LD_VAR 0 2
16482: PPUSH
16483: LD_VAR 0 3
16487: PPUSH
16488: LD_VAR 0 4
16492: PPUSH
16493: CALL 44752 0 4
// end ; end_of_file
16497: PPOPN 4
16499: END
// every 0 0$1 trigger game do
16500: LD_EXP 2
16504: IFFALSE 16534
16506: GO 16508
16508: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16509: LD_INT 7
16511: PUSH
16512: LD_INT 6
16514: PUSH
16515: LD_INT 4
16517: PUSH
16518: LD_INT 6
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PPUSH
16527: LD_INT 1750
16529: PPUSH
16530: CALL 16535 0 2
16534: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16535: LD_INT 0
16537: PPUSH
16538: PPUSH
16539: PPUSH
// if not areas then
16540: LD_VAR 0 1
16544: NOT
16545: IFFALSE 16549
// exit ;
16547: GO 16679
// repeat wait ( time ) ;
16549: LD_VAR 0 2
16553: PPUSH
16554: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16558: LD_ADDR_VAR 0 5
16562: PUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_INT 90
16568: PPUSH
16569: CALL_OW 12
16573: ST_TO_ADDR
// for i in areas do
16574: LD_ADDR_VAR 0 4
16578: PUSH
16579: LD_VAR 0 1
16583: PUSH
16584: FOR_IN
16585: IFFALSE 16638
// begin if Prob ( p ) then
16587: LD_VAR 0 5
16591: PPUSH
16592: CALL_OW 13
16596: IFFALSE 16636
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16598: LD_INT 1
16600: PPUSH
16601: LD_INT 5
16603: PPUSH
16604: CALL_OW 12
16608: PPUSH
16609: LD_VAR 0 4
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16621: LD_INT 385
16623: PPUSH
16624: LD_INT 595
16626: PPUSH
16627: CALL_OW 12
16631: PPUSH
16632: CALL_OW 67
// end ; end ;
16636: GO 16584
16638: POP
16639: POP
// time := time + 0 0$3 ;
16640: LD_ADDR_VAR 0 2
16644: PUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 105
16652: PLUS
16653: ST_TO_ADDR
// if time > 7 7$00 then
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 14700
16661: GREATER
16662: IFFALSE 16672
// time := 0 0$40 ;
16664: LD_ADDR_VAR 0 2
16668: PUSH
16669: LD_INT 1400
16671: ST_TO_ADDR
// until not game ;
16672: LD_EXP 2
16676: NOT
16677: IFFALSE 16549
// end ; end_of_file
16679: LD_VAR 0 3
16683: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
// skirmish := false ;
16688: LD_ADDR_EXP 47
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// debug_mc := false ;
16696: LD_ADDR_EXP 48
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// mc_bases := [ ] ;
16704: LD_ADDR_EXP 49
16708: PUSH
16709: EMPTY
16710: ST_TO_ADDR
// mc_sides := [ ] ;
16711: LD_ADDR_EXP 75
16715: PUSH
16716: EMPTY
16717: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16718: LD_ADDR_EXP 50
16722: PUSH
16723: EMPTY
16724: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16725: LD_ADDR_EXP 51
16729: PUSH
16730: EMPTY
16731: ST_TO_ADDR
// mc_need_heal := [ ] ;
16732: LD_ADDR_EXP 52
16736: PUSH
16737: EMPTY
16738: ST_TO_ADDR
// mc_healers := [ ] ;
16739: LD_ADDR_EXP 53
16743: PUSH
16744: EMPTY
16745: ST_TO_ADDR
// mc_build_list := [ ] ;
16746: LD_ADDR_EXP 54
16750: PUSH
16751: EMPTY
16752: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16753: LD_ADDR_EXP 81
16757: PUSH
16758: EMPTY
16759: ST_TO_ADDR
// mc_builders := [ ] ;
16760: LD_ADDR_EXP 55
16764: PUSH
16765: EMPTY
16766: ST_TO_ADDR
// mc_construct_list := [ ] ;
16767: LD_ADDR_EXP 56
16771: PUSH
16772: EMPTY
16773: ST_TO_ADDR
// mc_turret_list := [ ] ;
16774: LD_ADDR_EXP 57
16778: PUSH
16779: EMPTY
16780: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16781: LD_ADDR_EXP 58
16785: PUSH
16786: EMPTY
16787: ST_TO_ADDR
// mc_miners := [ ] ;
16788: LD_ADDR_EXP 63
16792: PUSH
16793: EMPTY
16794: ST_TO_ADDR
// mc_mines := [ ] ;
16795: LD_ADDR_EXP 62
16799: PUSH
16800: EMPTY
16801: ST_TO_ADDR
// mc_minefields := [ ] ;
16802: LD_ADDR_EXP 64
16806: PUSH
16807: EMPTY
16808: ST_TO_ADDR
// mc_crates := [ ] ;
16809: LD_ADDR_EXP 65
16813: PUSH
16814: EMPTY
16815: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16816: LD_ADDR_EXP 66
16820: PUSH
16821: EMPTY
16822: ST_TO_ADDR
// mc_crates_area := [ ] ;
16823: LD_ADDR_EXP 67
16827: PUSH
16828: EMPTY
16829: ST_TO_ADDR
// mc_vehicles := [ ] ;
16830: LD_ADDR_EXP 68
16834: PUSH
16835: EMPTY
16836: ST_TO_ADDR
// mc_attack := [ ] ;
16837: LD_ADDR_EXP 69
16841: PUSH
16842: EMPTY
16843: ST_TO_ADDR
// mc_produce := [ ] ;
16844: LD_ADDR_EXP 70
16848: PUSH
16849: EMPTY
16850: ST_TO_ADDR
// mc_defender := [ ] ;
16851: LD_ADDR_EXP 71
16855: PUSH
16856: EMPTY
16857: ST_TO_ADDR
// mc_parking := [ ] ;
16858: LD_ADDR_EXP 73
16862: PUSH
16863: EMPTY
16864: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16865: LD_ADDR_EXP 59
16869: PUSH
16870: EMPTY
16871: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16872: LD_ADDR_EXP 61
16876: PUSH
16877: EMPTY
16878: ST_TO_ADDR
// mc_scan := [ ] ;
16879: LD_ADDR_EXP 72
16883: PUSH
16884: EMPTY
16885: ST_TO_ADDR
// mc_scan_area := [ ] ;
16886: LD_ADDR_EXP 74
16890: PUSH
16891: EMPTY
16892: ST_TO_ADDR
// mc_tech := [ ] ;
16893: LD_ADDR_EXP 76
16897: PUSH
16898: EMPTY
16899: ST_TO_ADDR
// mc_class := [ ] ;
16900: LD_ADDR_EXP 90
16904: PUSH
16905: EMPTY
16906: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16907: LD_ADDR_EXP 91
16911: PUSH
16912: EMPTY
16913: ST_TO_ADDR
// end ;
16914: LD_VAR 0 1
16918: RET
// export function MC_Kill ( base ) ; begin
16919: LD_INT 0
16921: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16922: LD_ADDR_EXP 49
16926: PUSH
16927: LD_EXP 49
16931: PPUSH
16932: LD_VAR 0 1
16936: PPUSH
16937: EMPTY
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16944: LD_ADDR_EXP 50
16948: PUSH
16949: LD_EXP 50
16953: PPUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: EMPTY
16960: PPUSH
16961: CALL_OW 1
16965: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16966: LD_ADDR_EXP 51
16970: PUSH
16971: LD_EXP 51
16975: PPUSH
16976: LD_VAR 0 1
16980: PPUSH
16981: EMPTY
16982: PPUSH
16983: CALL_OW 1
16987: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16988: LD_ADDR_EXP 52
16992: PUSH
16993: LD_EXP 52
16997: PPUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: EMPTY
17004: PPUSH
17005: CALL_OW 1
17009: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17010: LD_ADDR_EXP 53
17014: PUSH
17015: LD_EXP 53
17019: PPUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: EMPTY
17026: PPUSH
17027: CALL_OW 1
17031: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17032: LD_ADDR_EXP 54
17036: PUSH
17037: LD_EXP 54
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: EMPTY
17048: PPUSH
17049: CALL_OW 1
17053: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17054: LD_ADDR_EXP 55
17058: PUSH
17059: LD_EXP 55
17063: PPUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: EMPTY
17070: PPUSH
17071: CALL_OW 1
17075: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17076: LD_ADDR_EXP 56
17080: PUSH
17081: LD_EXP 56
17085: PPUSH
17086: LD_VAR 0 1
17090: PPUSH
17091: EMPTY
17092: PPUSH
17093: CALL_OW 1
17097: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17098: LD_ADDR_EXP 57
17102: PUSH
17103: LD_EXP 57
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: EMPTY
17114: PPUSH
17115: CALL_OW 1
17119: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17120: LD_ADDR_EXP 58
17124: PUSH
17125: LD_EXP 58
17129: PPUSH
17130: LD_VAR 0 1
17134: PPUSH
17135: EMPTY
17136: PPUSH
17137: CALL_OW 1
17141: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17142: LD_ADDR_EXP 59
17146: PUSH
17147: LD_EXP 59
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: EMPTY
17158: PPUSH
17159: CALL_OW 1
17163: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17164: LD_ADDR_EXP 60
17168: PUSH
17169: LD_EXP 60
17173: PPUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: CALL_OW 1
17186: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17187: LD_ADDR_EXP 61
17191: PUSH
17192: LD_EXP 61
17196: PPUSH
17197: LD_VAR 0 1
17201: PPUSH
17202: EMPTY
17203: PPUSH
17204: CALL_OW 1
17208: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17209: LD_ADDR_EXP 62
17213: PUSH
17214: LD_EXP 62
17218: PPUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: EMPTY
17225: PPUSH
17226: CALL_OW 1
17230: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17231: LD_ADDR_EXP 63
17235: PUSH
17236: LD_EXP 63
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: EMPTY
17247: PPUSH
17248: CALL_OW 1
17252: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17253: LD_ADDR_EXP 64
17257: PUSH
17258: LD_EXP 64
17262: PPUSH
17263: LD_VAR 0 1
17267: PPUSH
17268: EMPTY
17269: PPUSH
17270: CALL_OW 1
17274: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17275: LD_ADDR_EXP 65
17279: PUSH
17280: LD_EXP 65
17284: PPUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: EMPTY
17291: PPUSH
17292: CALL_OW 1
17296: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17297: LD_ADDR_EXP 66
17301: PUSH
17302: LD_EXP 66
17306: PPUSH
17307: LD_VAR 0 1
17311: PPUSH
17312: EMPTY
17313: PPUSH
17314: CALL_OW 1
17318: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17319: LD_ADDR_EXP 67
17323: PUSH
17324: LD_EXP 67
17328: PPUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: EMPTY
17335: PPUSH
17336: CALL_OW 1
17340: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17341: LD_ADDR_EXP 68
17345: PUSH
17346: LD_EXP 68
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: EMPTY
17357: PPUSH
17358: CALL_OW 1
17362: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17363: LD_ADDR_EXP 69
17367: PUSH
17368: LD_EXP 69
17372: PPUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: EMPTY
17379: PPUSH
17380: CALL_OW 1
17384: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17385: LD_ADDR_EXP 70
17389: PUSH
17390: LD_EXP 70
17394: PPUSH
17395: LD_VAR 0 1
17399: PPUSH
17400: EMPTY
17401: PPUSH
17402: CALL_OW 1
17406: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17407: LD_ADDR_EXP 71
17411: PUSH
17412: LD_EXP 71
17416: PPUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: EMPTY
17423: PPUSH
17424: CALL_OW 1
17428: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17429: LD_ADDR_EXP 72
17433: PUSH
17434: LD_EXP 72
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: EMPTY
17445: PPUSH
17446: CALL_OW 1
17450: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17451: LD_ADDR_EXP 73
17455: PUSH
17456: LD_EXP 73
17460: PPUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: EMPTY
17467: PPUSH
17468: CALL_OW 1
17472: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17473: LD_ADDR_EXP 74
17477: PUSH
17478: LD_EXP 74
17482: PPUSH
17483: LD_VAR 0 1
17487: PPUSH
17488: EMPTY
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17495: LD_ADDR_EXP 76
17499: PUSH
17500: LD_EXP 76
17504: PPUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: EMPTY
17511: PPUSH
17512: CALL_OW 1
17516: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17517: LD_ADDR_EXP 78
17521: PUSH
17522: LD_EXP 78
17526: PPUSH
17527: LD_VAR 0 1
17531: PPUSH
17532: EMPTY
17533: PPUSH
17534: CALL_OW 1
17538: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17539: LD_ADDR_EXP 79
17543: PUSH
17544: LD_EXP 79
17548: PPUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: EMPTY
17555: PPUSH
17556: CALL_OW 1
17560: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17561: LD_ADDR_EXP 80
17565: PUSH
17566: LD_EXP 80
17570: PPUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: EMPTY
17577: PPUSH
17578: CALL_OW 1
17582: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17583: LD_ADDR_EXP 81
17587: PUSH
17588: LD_EXP 81
17592: PPUSH
17593: LD_VAR 0 1
17597: PPUSH
17598: EMPTY
17599: PPUSH
17600: CALL_OW 1
17604: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17605: LD_ADDR_EXP 82
17609: PUSH
17610: LD_EXP 82
17614: PPUSH
17615: LD_VAR 0 1
17619: PPUSH
17620: EMPTY
17621: PPUSH
17622: CALL_OW 1
17626: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17627: LD_ADDR_EXP 83
17631: PUSH
17632: LD_EXP 83
17636: PPUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: EMPTY
17643: PPUSH
17644: CALL_OW 1
17648: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17649: LD_ADDR_EXP 84
17653: PUSH
17654: LD_EXP 84
17658: PPUSH
17659: LD_VAR 0 1
17663: PPUSH
17664: EMPTY
17665: PPUSH
17666: CALL_OW 1
17670: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17671: LD_ADDR_EXP 85
17675: PUSH
17676: LD_EXP 85
17680: PPUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: EMPTY
17687: PPUSH
17688: CALL_OW 1
17692: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17693: LD_ADDR_EXP 86
17697: PUSH
17698: LD_EXP 86
17702: PPUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: EMPTY
17709: PPUSH
17710: CALL_OW 1
17714: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17715: LD_ADDR_EXP 87
17719: PUSH
17720: LD_EXP 87
17724: PPUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: EMPTY
17731: PPUSH
17732: CALL_OW 1
17736: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17737: LD_ADDR_EXP 88
17741: PUSH
17742: LD_EXP 88
17746: PPUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: EMPTY
17753: PPUSH
17754: CALL_OW 1
17758: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17759: LD_ADDR_EXP 89
17763: PUSH
17764: LD_EXP 89
17768: PPUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: EMPTY
17775: PPUSH
17776: CALL_OW 1
17780: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17781: LD_ADDR_EXP 90
17785: PUSH
17786: LD_EXP 90
17790: PPUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: EMPTY
17797: PPUSH
17798: CALL_OW 1
17802: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17803: LD_ADDR_EXP 91
17807: PUSH
17808: LD_EXP 91
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_INT 0
17820: PPUSH
17821: CALL_OW 1
17825: ST_TO_ADDR
// end ;
17826: LD_VAR 0 2
17830: RET
// export function MC_Start ( ) ; var i ; begin
17831: LD_INT 0
17833: PPUSH
17834: PPUSH
// for i = 1 to mc_bases do
17835: LD_ADDR_VAR 0 2
17839: PUSH
17840: DOUBLE
17841: LD_INT 1
17843: DEC
17844: ST_TO_ADDR
17845: LD_EXP 49
17849: PUSH
17850: FOR_TO
17851: IFFALSE 18928
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
17853: LD_ADDR_EXP 49
17857: PUSH
17858: LD_EXP 49
17862: PPUSH
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_EXP 49
17872: PUSH
17873: LD_VAR 0 2
17877: ARRAY
17878: PUSH
17879: LD_INT 0
17881: DIFF
17882: PPUSH
17883: CALL_OW 1
17887: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17888: LD_ADDR_EXP 50
17892: PUSH
17893: LD_EXP 50
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: EMPTY
17904: PPUSH
17905: CALL_OW 1
17909: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17910: LD_ADDR_EXP 51
17914: PUSH
17915: LD_EXP 51
17919: PPUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: EMPTY
17926: PPUSH
17927: CALL_OW 1
17931: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17932: LD_ADDR_EXP 52
17936: PUSH
17937: LD_EXP 52
17941: PPUSH
17942: LD_VAR 0 2
17946: PPUSH
17947: EMPTY
17948: PPUSH
17949: CALL_OW 1
17953: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17954: LD_ADDR_EXP 53
17958: PUSH
17959: LD_EXP 53
17963: PPUSH
17964: LD_VAR 0 2
17968: PPUSH
17969: EMPTY
17970: PUSH
17971: EMPTY
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 1
17981: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17982: LD_ADDR_EXP 54
17986: PUSH
17987: LD_EXP 54
17991: PPUSH
17992: LD_VAR 0 2
17996: PPUSH
17997: EMPTY
17998: PPUSH
17999: CALL_OW 1
18003: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
18004: LD_ADDR_EXP 81
18008: PUSH
18009: LD_EXP 81
18013: PPUSH
18014: LD_VAR 0 2
18018: PPUSH
18019: EMPTY
18020: PPUSH
18021: CALL_OW 1
18025: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
18026: LD_ADDR_EXP 55
18030: PUSH
18031: LD_EXP 55
18035: PPUSH
18036: LD_VAR 0 2
18040: PPUSH
18041: EMPTY
18042: PPUSH
18043: CALL_OW 1
18047: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
18048: LD_ADDR_EXP 56
18052: PUSH
18053: LD_EXP 56
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: EMPTY
18064: PPUSH
18065: CALL_OW 1
18069: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
18070: LD_ADDR_EXP 57
18074: PUSH
18075: LD_EXP 57
18079: PPUSH
18080: LD_VAR 0 2
18084: PPUSH
18085: LD_EXP 49
18089: PUSH
18090: LD_VAR 0 2
18094: ARRAY
18095: PPUSH
18096: LD_INT 2
18098: PUSH
18099: LD_INT 30
18101: PUSH
18102: LD_INT 32
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 30
18111: PUSH
18112: LD_INT 33
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 72
18128: PPUSH
18129: CALL_OW 1
18133: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
18134: LD_ADDR_EXP 58
18138: PUSH
18139: LD_EXP 58
18143: PPUSH
18144: LD_VAR 0 2
18148: PPUSH
18149: LD_EXP 49
18153: PUSH
18154: LD_VAR 0 2
18158: ARRAY
18159: PPUSH
18160: LD_INT 2
18162: PUSH
18163: LD_INT 30
18165: PUSH
18166: LD_INT 32
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 30
18175: PUSH
18176: LD_INT 31
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 58
18190: PUSH
18191: EMPTY
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 72
18202: PPUSH
18203: CALL_OW 1
18207: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
18208: LD_ADDR_EXP 59
18212: PUSH
18213: LD_EXP 59
18217: PPUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: EMPTY
18224: PPUSH
18225: CALL_OW 1
18229: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
18230: LD_ADDR_EXP 63
18234: PUSH
18235: LD_EXP 63
18239: PPUSH
18240: LD_VAR 0 2
18244: PPUSH
18245: EMPTY
18246: PPUSH
18247: CALL_OW 1
18251: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
18252: LD_ADDR_EXP 62
18256: PUSH
18257: LD_EXP 62
18261: PPUSH
18262: LD_VAR 0 2
18266: PPUSH
18267: EMPTY
18268: PPUSH
18269: CALL_OW 1
18273: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
18274: LD_ADDR_EXP 64
18278: PUSH
18279: LD_EXP 64
18283: PPUSH
18284: LD_VAR 0 2
18288: PPUSH
18289: EMPTY
18290: PPUSH
18291: CALL_OW 1
18295: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
18296: LD_ADDR_EXP 65
18300: PUSH
18301: LD_EXP 65
18305: PPUSH
18306: LD_VAR 0 2
18310: PPUSH
18311: EMPTY
18312: PPUSH
18313: CALL_OW 1
18317: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
18318: LD_ADDR_EXP 66
18322: PUSH
18323: LD_EXP 66
18327: PPUSH
18328: LD_VAR 0 2
18332: PPUSH
18333: EMPTY
18334: PPUSH
18335: CALL_OW 1
18339: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
18340: LD_ADDR_EXP 67
18344: PUSH
18345: LD_EXP 67
18349: PPUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: EMPTY
18356: PPUSH
18357: CALL_OW 1
18361: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
18362: LD_ADDR_EXP 68
18366: PUSH
18367: LD_EXP 68
18371: PPUSH
18372: LD_VAR 0 2
18376: PPUSH
18377: EMPTY
18378: PPUSH
18379: CALL_OW 1
18383: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
18384: LD_ADDR_EXP 69
18388: PUSH
18389: LD_EXP 69
18393: PPUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: EMPTY
18400: PPUSH
18401: CALL_OW 1
18405: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
18406: LD_ADDR_EXP 70
18410: PUSH
18411: LD_EXP 70
18415: PPUSH
18416: LD_VAR 0 2
18420: PPUSH
18421: EMPTY
18422: PPUSH
18423: CALL_OW 1
18427: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
18428: LD_ADDR_EXP 71
18432: PUSH
18433: LD_EXP 71
18437: PPUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: EMPTY
18444: PPUSH
18445: CALL_OW 1
18449: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
18450: LD_ADDR_EXP 60
18454: PUSH
18455: LD_EXP 60
18459: PPUSH
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_INT 0
18467: PPUSH
18468: CALL_OW 1
18472: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
18473: LD_ADDR_EXP 73
18477: PUSH
18478: LD_EXP 73
18482: PPUSH
18483: LD_VAR 0 2
18487: PPUSH
18488: LD_INT 0
18490: PPUSH
18491: CALL_OW 1
18495: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
18496: LD_ADDR_EXP 61
18500: PUSH
18501: LD_EXP 61
18505: PPUSH
18506: LD_VAR 0 2
18510: PPUSH
18511: EMPTY
18512: PPUSH
18513: CALL_OW 1
18517: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18518: LD_ADDR_EXP 72
18522: PUSH
18523: LD_EXP 72
18527: PPUSH
18528: LD_VAR 0 2
18532: PPUSH
18533: LD_INT 0
18535: PPUSH
18536: CALL_OW 1
18540: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18541: LD_ADDR_EXP 74
18545: PUSH
18546: LD_EXP 74
18550: PPUSH
18551: LD_VAR 0 2
18555: PPUSH
18556: EMPTY
18557: PPUSH
18558: CALL_OW 1
18562: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18563: LD_ADDR_EXP 77
18567: PUSH
18568: LD_EXP 77
18572: PPUSH
18573: LD_VAR 0 2
18577: PPUSH
18578: LD_INT 0
18580: PPUSH
18581: CALL_OW 1
18585: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18586: LD_ADDR_EXP 78
18590: PUSH
18591: LD_EXP 78
18595: PPUSH
18596: LD_VAR 0 2
18600: PPUSH
18601: EMPTY
18602: PPUSH
18603: CALL_OW 1
18607: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18608: LD_ADDR_EXP 79
18612: PUSH
18613: LD_EXP 79
18617: PPUSH
18618: LD_VAR 0 2
18622: PPUSH
18623: EMPTY
18624: PPUSH
18625: CALL_OW 1
18629: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18630: LD_ADDR_EXP 80
18634: PUSH
18635: LD_EXP 80
18639: PPUSH
18640: LD_VAR 0 2
18644: PPUSH
18645: EMPTY
18646: PPUSH
18647: CALL_OW 1
18651: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18652: LD_ADDR_EXP 82
18656: PUSH
18657: LD_EXP 82
18661: PPUSH
18662: LD_VAR 0 2
18666: PPUSH
18667: LD_EXP 49
18671: PUSH
18672: LD_VAR 0 2
18676: ARRAY
18677: PPUSH
18678: LD_INT 2
18680: PUSH
18681: LD_INT 30
18683: PUSH
18684: LD_INT 6
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 30
18693: PUSH
18694: LD_INT 7
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 30
18703: PUSH
18704: LD_INT 8
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 72
18721: PPUSH
18722: CALL_OW 1
18726: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18727: LD_ADDR_EXP 83
18731: PUSH
18732: LD_EXP 83
18736: PPUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: EMPTY
18743: PPUSH
18744: CALL_OW 1
18748: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18749: LD_ADDR_EXP 84
18753: PUSH
18754: LD_EXP 84
18758: PPUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: EMPTY
18765: PPUSH
18766: CALL_OW 1
18770: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
18771: LD_ADDR_EXP 85
18775: PUSH
18776: LD_EXP 85
18780: PPUSH
18781: LD_VAR 0 2
18785: PPUSH
18786: EMPTY
18787: PPUSH
18788: CALL_OW 1
18792: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18793: LD_ADDR_EXP 86
18797: PUSH
18798: LD_EXP 86
18802: PPUSH
18803: LD_VAR 0 2
18807: PPUSH
18808: EMPTY
18809: PPUSH
18810: CALL_OW 1
18814: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18815: LD_ADDR_EXP 87
18819: PUSH
18820: LD_EXP 87
18824: PPUSH
18825: LD_VAR 0 2
18829: PPUSH
18830: EMPTY
18831: PPUSH
18832: CALL_OW 1
18836: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18837: LD_ADDR_EXP 88
18841: PUSH
18842: LD_EXP 88
18846: PPUSH
18847: LD_VAR 0 2
18851: PPUSH
18852: EMPTY
18853: PPUSH
18854: CALL_OW 1
18858: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18859: LD_ADDR_EXP 89
18863: PUSH
18864: LD_EXP 89
18868: PPUSH
18869: LD_VAR 0 2
18873: PPUSH
18874: EMPTY
18875: PPUSH
18876: CALL_OW 1
18880: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
18881: LD_ADDR_EXP 90
18885: PUSH
18886: LD_EXP 90
18890: PPUSH
18891: LD_VAR 0 2
18895: PPUSH
18896: EMPTY
18897: PPUSH
18898: CALL_OW 1
18902: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
18903: LD_ADDR_EXP 91
18907: PUSH
18908: LD_EXP 91
18912: PPUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: LD_INT 0
18920: PPUSH
18921: CALL_OW 1
18925: ST_TO_ADDR
// end ;
18926: GO 17850
18928: POP
18929: POP
// MC_InitSides ( ) ;
18930: CALL 19216 0 0
// MC_InitResearch ( ) ;
18934: CALL 18955 0 0
// CustomInitMacro ( ) ;
18938: CALL 285 0 0
// skirmish := true ;
18942: LD_ADDR_EXP 47
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// end ;
18950: LD_VAR 0 1
18954: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18955: LD_INT 0
18957: PPUSH
18958: PPUSH
18959: PPUSH
18960: PPUSH
18961: PPUSH
18962: PPUSH
// if not mc_bases then
18963: LD_EXP 49
18967: NOT
18968: IFFALSE 18972
// exit ;
18970: GO 19211
// for i = 1 to 8 do
18972: LD_ADDR_VAR 0 2
18976: PUSH
18977: DOUBLE
18978: LD_INT 1
18980: DEC
18981: ST_TO_ADDR
18982: LD_INT 8
18984: PUSH
18985: FOR_TO
18986: IFFALSE 19012
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18988: LD_ADDR_EXP 76
18992: PUSH
18993: LD_EXP 76
18997: PPUSH
18998: LD_VAR 0 2
19002: PPUSH
19003: EMPTY
19004: PPUSH
19005: CALL_OW 1
19009: ST_TO_ADDR
19010: GO 18985
19012: POP
19013: POP
// tmp := [ ] ;
19014: LD_ADDR_VAR 0 5
19018: PUSH
19019: EMPTY
19020: ST_TO_ADDR
// for i = 1 to mc_sides do
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: DOUBLE
19027: LD_INT 1
19029: DEC
19030: ST_TO_ADDR
19031: LD_EXP 75
19035: PUSH
19036: FOR_TO
19037: IFFALSE 19095
// if not mc_sides [ i ] in tmp then
19039: LD_EXP 75
19043: PUSH
19044: LD_VAR 0 2
19048: ARRAY
19049: PUSH
19050: LD_VAR 0 5
19054: IN
19055: NOT
19056: IFFALSE 19093
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
19058: LD_ADDR_VAR 0 5
19062: PUSH
19063: LD_VAR 0 5
19067: PPUSH
19068: LD_VAR 0 5
19072: PUSH
19073: LD_INT 1
19075: PLUS
19076: PPUSH
19077: LD_EXP 75
19081: PUSH
19082: LD_VAR 0 2
19086: ARRAY
19087: PPUSH
19088: CALL_OW 2
19092: ST_TO_ADDR
19093: GO 19036
19095: POP
19096: POP
// if not tmp then
19097: LD_VAR 0 5
19101: NOT
19102: IFFALSE 19106
// exit ;
19104: GO 19211
// for j in tmp do
19106: LD_ADDR_VAR 0 3
19110: PUSH
19111: LD_VAR 0 5
19115: PUSH
19116: FOR_IN
19117: IFFALSE 19209
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
19119: LD_ADDR_VAR 0 6
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_VAR 0 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: ST_TO_ADDR
// if not un then
19141: LD_VAR 0 6
19145: NOT
19146: IFFALSE 19150
// continue ;
19148: GO 19116
// nation := GetNation ( un [ 1 ] ) ;
19150: LD_ADDR_VAR 0 4
19154: PUSH
19155: LD_VAR 0 6
19159: PUSH
19160: LD_INT 1
19162: ARRAY
19163: PPUSH
19164: CALL_OW 248
19168: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
19169: LD_ADDR_EXP 76
19173: PUSH
19174: LD_EXP 76
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL 44956 0 3
19201: PPUSH
19202: CALL_OW 1
19206: ST_TO_ADDR
// end ;
19207: GO 19116
19209: POP
19210: POP
// end ;
19211: LD_VAR 0 1
19215: RET
// export function MC_InitSides ( ) ; var i ; begin
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
// if not mc_bases then
19220: LD_EXP 49
19224: NOT
19225: IFFALSE 19229
// exit ;
19227: GO 19303
// for i = 1 to mc_bases do
19229: LD_ADDR_VAR 0 2
19233: PUSH
19234: DOUBLE
19235: LD_INT 1
19237: DEC
19238: ST_TO_ADDR
19239: LD_EXP 49
19243: PUSH
19244: FOR_TO
19245: IFFALSE 19301
// if mc_bases [ i ] then
19247: LD_EXP 49
19251: PUSH
19252: LD_VAR 0 2
19256: ARRAY
19257: IFFALSE 19299
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
19259: LD_ADDR_EXP 75
19263: PUSH
19264: LD_EXP 75
19268: PPUSH
19269: LD_VAR 0 2
19273: PPUSH
19274: LD_EXP 49
19278: PUSH
19279: LD_VAR 0 2
19283: ARRAY
19284: PUSH
19285: LD_INT 1
19287: ARRAY
19288: PPUSH
19289: CALL_OW 255
19293: PPUSH
19294: CALL_OW 1
19298: ST_TO_ADDR
19299: GO 19244
19301: POP
19302: POP
// end ;
19303: LD_VAR 0 1
19307: RET
// every 0 0$01 trigger skirmish do
19308: LD_EXP 47
19312: IFFALSE 19466
19314: GO 19316
19316: DISABLE
// begin enable ;
19317: ENABLE
// MC_CheckBuildings ( ) ;
19318: CALL 23955 0 0
// MC_CheckPeopleLife ( ) ;
19322: CALL 24080 0 0
// RaiseSailEvent ( 100 ) ;
19326: LD_INT 100
19328: PPUSH
19329: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
19333: LD_INT 103
19335: PPUSH
19336: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
19340: LD_INT 104
19342: PPUSH
19343: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
19347: LD_INT 105
19349: PPUSH
19350: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
19354: LD_INT 106
19356: PPUSH
19357: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
19361: LD_INT 107
19363: PPUSH
19364: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
19368: LD_INT 108
19370: PPUSH
19371: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
19375: LD_INT 109
19377: PPUSH
19378: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
19382: LD_INT 110
19384: PPUSH
19385: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
19389: LD_INT 111
19391: PPUSH
19392: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
19396: LD_INT 112
19398: PPUSH
19399: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
19403: LD_INT 113
19405: PPUSH
19406: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
19410: LD_INT 120
19412: PPUSH
19413: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
19417: LD_INT 121
19419: PPUSH
19420: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
19424: LD_INT 122
19426: PPUSH
19427: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
19431: LD_INT 123
19433: PPUSH
19434: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
19438: LD_INT 124
19440: PPUSH
19441: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
19445: LD_INT 125
19447: PPUSH
19448: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
19452: LD_INT 126
19454: PPUSH
19455: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
19459: LD_INT 200
19461: PPUSH
19462: CALL_OW 427
// end ;
19466: END
// on SailEvent ( event ) do begin if event < 100 then
19467: LD_VAR 0 1
19471: PUSH
19472: LD_INT 100
19474: LESS
19475: IFFALSE 19486
// CustomEvent ( event ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL 15985 0 1
// if event = 100 then
19486: LD_VAR 0 1
19490: PUSH
19491: LD_INT 100
19493: EQUAL
19494: IFFALSE 19500
// MC_ClassManager ( ) ;
19496: CALL 19892 0 0
// if event = 101 then
19500: LD_VAR 0 1
19504: PUSH
19505: LD_INT 101
19507: EQUAL
19508: IFFALSE 19514
// MC_RepairBuildings ( ) ;
19510: CALL 24676 0 0
// if event = 102 then
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 102
19521: EQUAL
19522: IFFALSE 19528
// MC_Heal ( ) ;
19524: CALL 25082 0 0
// if event = 103 then
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 103
19535: EQUAL
19536: IFFALSE 19542
// MC_Build ( ) ;
19538: CALL 25504 0 0
// if event = 104 then
19542: LD_VAR 0 1
19546: PUSH
19547: LD_INT 104
19549: EQUAL
19550: IFFALSE 19556
// MC_TurretWeapon ( ) ;
19552: CALL 27117 0 0
// if event = 105 then
19556: LD_VAR 0 1
19560: PUSH
19561: LD_INT 105
19563: EQUAL
19564: IFFALSE 19570
// MC_BuildUpgrade ( ) ;
19566: CALL 26668 0 0
// if event = 106 then
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 106
19577: EQUAL
19578: IFFALSE 19584
// MC_PlantMines ( ) ;
19580: CALL 27547 0 0
// if event = 107 then
19584: LD_VAR 0 1
19588: PUSH
19589: LD_INT 107
19591: EQUAL
19592: IFFALSE 19598
// MC_CollectCrates ( ) ;
19594: CALL 28581 0 0
// if event = 108 then
19598: LD_VAR 0 1
19602: PUSH
19603: LD_INT 108
19605: EQUAL
19606: IFFALSE 19612
// MC_LinkRemoteControl ( ) ;
19608: CALL 30338 0 0
// if event = 109 then
19612: LD_VAR 0 1
19616: PUSH
19617: LD_INT 109
19619: EQUAL
19620: IFFALSE 19626
// MC_ProduceVehicle ( ) ;
19622: CALL 30519 0 0
// if event = 110 then
19626: LD_VAR 0 1
19630: PUSH
19631: LD_INT 110
19633: EQUAL
19634: IFFALSE 19640
// MC_SendAttack ( ) ;
19636: CALL 31000 0 0
// if event = 111 then
19640: LD_VAR 0 1
19644: PUSH
19645: LD_INT 111
19647: EQUAL
19648: IFFALSE 19654
// MC_Defend ( ) ;
19650: CALL 31108 0 0
// if event = 112 then
19654: LD_VAR 0 1
19658: PUSH
19659: LD_INT 112
19661: EQUAL
19662: IFFALSE 19668
// MC_Research ( ) ;
19664: CALL 31735 0 0
// if event = 113 then
19668: LD_VAR 0 1
19672: PUSH
19673: LD_INT 113
19675: EQUAL
19676: IFFALSE 19682
// MC_MinesTrigger ( ) ;
19678: CALL 32849 0 0
// if event = 120 then
19682: LD_VAR 0 1
19686: PUSH
19687: LD_INT 120
19689: EQUAL
19690: IFFALSE 19696
// MC_RepairVehicle ( ) ;
19692: CALL 32948 0 0
// if event = 121 then
19696: LD_VAR 0 1
19700: PUSH
19701: LD_INT 121
19703: EQUAL
19704: IFFALSE 19710
// MC_TameApe ( ) ;
19706: CALL 33691 0 0
// if event = 122 then
19710: LD_VAR 0 1
19714: PUSH
19715: LD_INT 122
19717: EQUAL
19718: IFFALSE 19724
// MC_ChangeApeClass ( ) ;
19720: CALL 34520 0 0
// if event = 123 then
19724: LD_VAR 0 1
19728: PUSH
19729: LD_INT 123
19731: EQUAL
19732: IFFALSE 19738
// MC_Bazooka ( ) ;
19734: CALL 35170 0 0
// if event = 124 then
19738: LD_VAR 0 1
19742: PUSH
19743: LD_INT 124
19745: EQUAL
19746: IFFALSE 19752
// MC_TeleportExit ( ) ;
19748: CALL 35368 0 0
// if event = 125 then
19752: LD_VAR 0 1
19756: PUSH
19757: LD_INT 125
19759: EQUAL
19760: IFFALSE 19766
// MC_Deposits ( ) ;
19762: CALL 36015 0 0
// if event = 126 then
19766: LD_VAR 0 1
19770: PUSH
19771: LD_INT 126
19773: EQUAL
19774: IFFALSE 19780
// MC_RemoteDriver ( ) ;
19776: CALL 36640 0 0
// if event = 200 then
19780: LD_VAR 0 1
19784: PUSH
19785: LD_INT 200
19787: EQUAL
19788: IFFALSE 19794
// MC_Idle ( ) ;
19790: CALL 38373 0 0
// end ;
19794: PPOPN 1
19796: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19797: LD_INT 0
19799: PPUSH
19800: PPUSH
// if not mc_bases [ base ] or not tag then
19801: LD_EXP 49
19805: PUSH
19806: LD_VAR 0 1
19810: ARRAY
19811: NOT
19812: PUSH
19813: LD_VAR 0 2
19817: NOT
19818: OR
19819: IFFALSE 19823
// exit ;
19821: GO 19887
// for i in mc_bases [ base ] union mc_ape [ base ] do
19823: LD_ADDR_VAR 0 4
19827: PUSH
19828: LD_EXP 49
19832: PUSH
19833: LD_VAR 0 1
19837: ARRAY
19838: PUSH
19839: LD_EXP 78
19843: PUSH
19844: LD_VAR 0 1
19848: ARRAY
19849: UNION
19850: PUSH
19851: FOR_IN
19852: IFFALSE 19885
// if GetTag ( i ) = tag then
19854: LD_VAR 0 4
19858: PPUSH
19859: CALL_OW 110
19863: PUSH
19864: LD_VAR 0 2
19868: EQUAL
19869: IFFALSE 19883
// SetTag ( i , 0 ) ;
19871: LD_VAR 0 4
19875: PPUSH
19876: LD_INT 0
19878: PPUSH
19879: CALL_OW 109
19883: GO 19851
19885: POP
19886: POP
// end ;
19887: LD_VAR 0 3
19891: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
19892: LD_INT 0
19894: PPUSH
19895: PPUSH
19896: PPUSH
19897: PPUSH
19898: PPUSH
19899: PPUSH
19900: PPUSH
19901: PPUSH
// if not mc_bases then
19902: LD_EXP 49
19906: NOT
19907: IFFALSE 19911
// exit ;
19909: GO 20369
// for i = 1 to mc_bases do
19911: LD_ADDR_VAR 0 2
19915: PUSH
19916: DOUBLE
19917: LD_INT 1
19919: DEC
19920: ST_TO_ADDR
19921: LD_EXP 49
19925: PUSH
19926: FOR_TO
19927: IFFALSE 20367
// begin tmp := MC_ClassCheckReq ( i ) ;
19929: LD_ADDR_VAR 0 4
19933: PUSH
19934: LD_VAR 0 2
19938: PPUSH
19939: CALL 20374 0 1
19943: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
19944: LD_ADDR_EXP 90
19948: PUSH
19949: LD_EXP 90
19953: PPUSH
19954: LD_VAR 0 2
19958: PPUSH
19959: LD_VAR 0 4
19963: PPUSH
19964: CALL_OW 1
19968: ST_TO_ADDR
// if not tmp then
19969: LD_VAR 0 4
19973: NOT
19974: IFFALSE 19978
// continue ;
19976: GO 19926
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
19978: LD_ADDR_VAR 0 6
19982: PUSH
19983: LD_EXP 49
19987: PUSH
19988: LD_VAR 0 2
19992: ARRAY
19993: PPUSH
19994: LD_INT 2
19996: PUSH
19997: LD_INT 30
19999: PUSH
20000: LD_INT 4
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 30
20009: PUSH
20010: LD_INT 5
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 72
20026: PUSH
20027: LD_EXP 49
20031: PUSH
20032: LD_VAR 0 2
20036: ARRAY
20037: PPUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 30
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 30
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 72
20070: PUSH
20071: LD_EXP 49
20075: PUSH
20076: LD_VAR 0 2
20080: ARRAY
20081: PPUSH
20082: LD_INT 30
20084: PUSH
20085: LD_INT 3
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PPUSH
20092: CALL_OW 72
20096: PUSH
20097: LD_EXP 49
20101: PUSH
20102: LD_VAR 0 2
20106: ARRAY
20107: PPUSH
20108: LD_INT 2
20110: PUSH
20111: LD_INT 30
20113: PUSH
20114: LD_INT 6
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 30
20123: PUSH
20124: LD_INT 7
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 30
20133: PUSH
20134: LD_INT 8
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: PPUSH
20147: CALL_OW 72
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: ST_TO_ADDR
// for j = 1 to 4 do
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: DOUBLE
20164: LD_INT 1
20166: DEC
20167: ST_TO_ADDR
20168: LD_INT 4
20170: PUSH
20171: FOR_TO
20172: IFFALSE 20363
// begin if not tmp [ j ] then
20174: LD_VAR 0 4
20178: PUSH
20179: LD_VAR 0 3
20183: ARRAY
20184: NOT
20185: IFFALSE 20189
// continue ;
20187: GO 20171
// for p in tmp [ j ] do
20189: LD_ADDR_VAR 0 5
20193: PUSH
20194: LD_VAR 0 4
20198: PUSH
20199: LD_VAR 0 3
20203: ARRAY
20204: PUSH
20205: FOR_IN
20206: IFFALSE 20359
// begin if not b [ j ] then
20208: LD_VAR 0 6
20212: PUSH
20213: LD_VAR 0 3
20217: ARRAY
20218: NOT
20219: IFFALSE 20223
// break ;
20221: GO 20359
// e := 0 ;
20223: LD_ADDR_VAR 0 7
20227: PUSH
20228: LD_INT 0
20230: ST_TO_ADDR
// for k in b [ j ] do
20231: LD_ADDR_VAR 0 8
20235: PUSH
20236: LD_VAR 0 6
20240: PUSH
20241: LD_VAR 0 3
20245: ARRAY
20246: PUSH
20247: FOR_IN
20248: IFFALSE 20275
// if IsNotFull ( k ) then
20250: LD_VAR 0 8
20254: PPUSH
20255: CALL 48982 0 1
20259: IFFALSE 20273
// begin e := k ;
20261: LD_ADDR_VAR 0 7
20265: PUSH
20266: LD_VAR 0 8
20270: ST_TO_ADDR
// break ;
20271: GO 20275
// end ;
20273: GO 20247
20275: POP
20276: POP
// if e and not UnitGoingToBuilding ( p , e ) then
20277: LD_VAR 0 7
20281: PUSH
20282: LD_VAR 0 5
20286: PPUSH
20287: LD_VAR 0 7
20291: PPUSH
20292: CALL 85970 0 2
20296: NOT
20297: AND
20298: IFFALSE 20357
// begin if IsInUnit ( p ) then
20300: LD_VAR 0 5
20304: PPUSH
20305: CALL_OW 310
20309: IFFALSE 20320
// ComExitBuilding ( p ) ;
20311: LD_VAR 0 5
20315: PPUSH
20316: CALL_OW 122
// ComEnterUnit ( p , e ) ;
20320: LD_VAR 0 5
20324: PPUSH
20325: LD_VAR 0 7
20329: PPUSH
20330: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
20334: LD_VAR 0 5
20338: PPUSH
20339: LD_VAR 0 3
20343: PPUSH
20344: CALL_OW 183
// AddComExitBuilding ( p ) ;
20348: LD_VAR 0 5
20352: PPUSH
20353: CALL_OW 182
// end ; end ;
20357: GO 20205
20359: POP
20360: POP
// end ;
20361: GO 20171
20363: POP
20364: POP
// end ;
20365: GO 19926
20367: POP
20368: POP
// end ;
20369: LD_VAR 0 1
20373: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
20374: LD_INT 0
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
20388: LD_VAR 0 1
20392: NOT
20393: PUSH
20394: LD_EXP 49
20398: PUSH
20399: LD_VAR 0 1
20403: ARRAY
20404: NOT
20405: OR
20406: PUSH
20407: LD_EXP 49
20411: PUSH
20412: LD_VAR 0 1
20416: ARRAY
20417: PPUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 30
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: PPUSH
20446: CALL_OW 72
20450: NOT
20451: OR
20452: IFFALSE 20456
// exit ;
20454: GO 23950
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_EXP 49
20465: PUSH
20466: LD_VAR 0 1
20470: ARRAY
20471: PPUSH
20472: LD_INT 2
20474: PUSH
20475: LD_INT 25
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 25
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 25
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 25
20507: PUSH
20508: LD_INT 4
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 25
20517: PUSH
20518: LD_INT 5
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 25
20527: PUSH
20528: LD_INT 8
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 25
20537: PUSH
20538: LD_INT 9
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 72
20559: ST_TO_ADDR
// for i in tmp do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 4
20569: PUSH
20570: FOR_IN
20571: IFFALSE 20602
// if GetTag ( i ) then
20573: LD_VAR 0 3
20577: PPUSH
20578: CALL_OW 110
20582: IFFALSE 20600
// tmp := tmp diff i ;
20584: LD_ADDR_VAR 0 4
20588: PUSH
20589: LD_VAR 0 4
20593: PUSH
20594: LD_VAR 0 3
20598: DIFF
20599: ST_TO_ADDR
20600: GO 20570
20602: POP
20603: POP
// if not tmp then
20604: LD_VAR 0 4
20608: NOT
20609: IFFALSE 20613
// exit ;
20611: GO 23950
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20613: LD_ADDR_VAR 0 5
20617: PUSH
20618: LD_EXP 49
20622: PUSH
20623: LD_VAR 0 1
20627: ARRAY
20628: PPUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 25
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 25
20644: PUSH
20645: LD_INT 5
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 25
20654: PUSH
20655: LD_INT 8
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 25
20664: PUSH
20665: LD_INT 9
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: PPUSH
20679: CALL_OW 72
20683: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
20684: LD_ADDR_VAR 0 6
20688: PUSH
20689: LD_EXP 49
20693: PUSH
20694: LD_VAR 0 1
20698: ARRAY
20699: PPUSH
20700: LD_INT 25
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PPUSH
20710: CALL_OW 72
20714: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20715: LD_ADDR_VAR 0 7
20719: PUSH
20720: LD_EXP 49
20724: PUSH
20725: LD_VAR 0 1
20729: ARRAY
20730: PPUSH
20731: LD_INT 25
20733: PUSH
20734: LD_INT 3
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 72
20745: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
20746: LD_ADDR_VAR 0 8
20750: PUSH
20751: LD_EXP 49
20755: PUSH
20756: LD_VAR 0 1
20760: ARRAY
20761: PPUSH
20762: LD_INT 25
20764: PUSH
20765: LD_INT 4
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 24
20774: PUSH
20775: LD_INT 251
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 72
20790: ST_TO_ADDR
// if mc_scan [ base ] then
20791: LD_EXP 72
20795: PUSH
20796: LD_VAR 0 1
20800: ARRAY
20801: IFFALSE 21262
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
20803: LD_ADDR_EXP 91
20807: PUSH
20808: LD_EXP 91
20812: PPUSH
20813: LD_VAR 0 1
20817: PPUSH
20818: LD_INT 4
20820: PPUSH
20821: CALL_OW 1
20825: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
20826: LD_ADDR_VAR 0 12
20830: PUSH
20831: LD_EXP 49
20835: PUSH
20836: LD_VAR 0 1
20840: ARRAY
20841: PPUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 30
20847: PUSH
20848: LD_INT 4
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: PPUSH
20870: CALL_OW 72
20874: ST_TO_ADDR
// if not b then
20875: LD_VAR 0 12
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 23950
// p := [ ] ;
20884: LD_ADDR_VAR 0 11
20888: PUSH
20889: EMPTY
20890: ST_TO_ADDR
// if sci >= 2 then
20891: LD_VAR 0 8
20895: PUSH
20896: LD_INT 2
20898: GREATEREQUAL
20899: IFFALSE 20930
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
20901: LD_ADDR_VAR 0 8
20905: PUSH
20906: LD_VAR 0 8
20910: PUSH
20911: LD_INT 1
20913: ARRAY
20914: PUSH
20915: LD_VAR 0 8
20919: PUSH
20920: LD_INT 2
20922: ARRAY
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: ST_TO_ADDR
20928: GO 20991
// if sci = 1 then
20930: LD_VAR 0 8
20934: PUSH
20935: LD_INT 1
20937: EQUAL
20938: IFFALSE 20959
// sci := [ sci [ 1 ] ] else
20940: LD_ADDR_VAR 0 8
20944: PUSH
20945: LD_VAR 0 8
20949: PUSH
20950: LD_INT 1
20952: ARRAY
20953: PUSH
20954: EMPTY
20955: LIST
20956: ST_TO_ADDR
20957: GO 20991
// if sci = 0 then
20959: LD_VAR 0 8
20963: PUSH
20964: LD_INT 0
20966: EQUAL
20967: IFFALSE 20991
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
20969: LD_ADDR_VAR 0 11
20973: PUSH
20974: LD_VAR 0 4
20978: PPUSH
20979: LD_INT 4
20981: PPUSH
20982: CALL 85833 0 2
20986: PUSH
20987: LD_INT 1
20989: ARRAY
20990: ST_TO_ADDR
// if eng > 4 then
20991: LD_VAR 0 6
20995: PUSH
20996: LD_INT 4
20998: GREATER
20999: IFFALSE 21045
// for i = eng downto 4 do
21001: LD_ADDR_VAR 0 3
21005: PUSH
21006: DOUBLE
21007: LD_VAR 0 6
21011: INC
21012: ST_TO_ADDR
21013: LD_INT 4
21015: PUSH
21016: FOR_DOWNTO
21017: IFFALSE 21043
// eng := eng diff eng [ i ] ;
21019: LD_ADDR_VAR 0 6
21023: PUSH
21024: LD_VAR 0 6
21028: PUSH
21029: LD_VAR 0 6
21033: PUSH
21034: LD_VAR 0 3
21038: ARRAY
21039: DIFF
21040: ST_TO_ADDR
21041: GO 21016
21043: POP
21044: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
21045: LD_ADDR_VAR 0 4
21049: PUSH
21050: LD_VAR 0 4
21054: PUSH
21055: LD_VAR 0 5
21059: PUSH
21060: LD_VAR 0 6
21064: UNION
21065: PUSH
21066: LD_VAR 0 7
21070: UNION
21071: PUSH
21072: LD_VAR 0 8
21076: UNION
21077: DIFF
21078: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
21079: LD_ADDR_VAR 0 13
21083: PUSH
21084: LD_EXP 49
21088: PUSH
21089: LD_VAR 0 1
21093: ARRAY
21094: PPUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 30
21100: PUSH
21101: LD_INT 32
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 30
21110: PUSH
21111: LD_INT 31
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 72
21127: PUSH
21128: LD_EXP 49
21132: PUSH
21133: LD_VAR 0 1
21137: ARRAY
21138: PPUSH
21139: LD_INT 2
21141: PUSH
21142: LD_INT 30
21144: PUSH
21145: LD_INT 4
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 30
21154: PUSH
21155: LD_INT 5
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: PPUSH
21167: CALL_OW 72
21171: PUSH
21172: LD_INT 6
21174: MUL
21175: PLUS
21176: ST_TO_ADDR
// if bcount < tmp then
21177: LD_VAR 0 13
21181: PUSH
21182: LD_VAR 0 4
21186: LESS
21187: IFFALSE 21233
// for i = tmp downto bcount do
21189: LD_ADDR_VAR 0 3
21193: PUSH
21194: DOUBLE
21195: LD_VAR 0 4
21199: INC
21200: ST_TO_ADDR
21201: LD_VAR 0 13
21205: PUSH
21206: FOR_DOWNTO
21207: IFFALSE 21231
// tmp := Delete ( tmp , tmp ) ;
21209: LD_ADDR_VAR 0 4
21213: PUSH
21214: LD_VAR 0 4
21218: PPUSH
21219: LD_VAR 0 4
21223: PPUSH
21224: CALL_OW 3
21228: ST_TO_ADDR
21229: GO 21206
21231: POP
21232: POP
// result := [ tmp , 0 , 0 , p ] ;
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_VAR 0 4
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_VAR 0 11
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: ST_TO_ADDR
// exit ;
21260: GO 23950
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21262: LD_EXP 49
21266: PUSH
21267: LD_VAR 0 1
21271: ARRAY
21272: PPUSH
21273: LD_INT 2
21275: PUSH
21276: LD_INT 30
21278: PUSH
21279: LD_INT 6
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 30
21288: PUSH
21289: LD_INT 7
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 30
21298: PUSH
21299: LD_INT 8
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: PPUSH
21312: CALL_OW 72
21316: NOT
21317: PUSH
21318: LD_EXP 49
21322: PUSH
21323: LD_VAR 0 1
21327: ARRAY
21328: PPUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 3
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PPUSH
21339: CALL_OW 72
21343: NOT
21344: AND
21345: IFFALSE 21417
// begin if eng = tmp then
21347: LD_VAR 0 6
21351: PUSH
21352: LD_VAR 0 4
21356: EQUAL
21357: IFFALSE 21361
// exit ;
21359: GO 23950
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
21361: LD_ADDR_EXP 91
21365: PUSH
21366: LD_EXP 91
21370: PPUSH
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_INT 1
21378: PPUSH
21379: CALL_OW 1
21383: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
21384: LD_ADDR_VAR 0 2
21388: PUSH
21389: LD_INT 0
21391: PUSH
21392: LD_VAR 0 4
21396: PUSH
21397: LD_VAR 0 6
21401: DIFF
21402: PUSH
21403: LD_INT 0
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: ST_TO_ADDR
// exit ;
21415: GO 23950
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21417: LD_EXP 76
21421: PUSH
21422: LD_EXP 75
21426: PUSH
21427: LD_VAR 0 1
21431: ARRAY
21432: ARRAY
21433: PUSH
21434: LD_EXP 49
21438: PUSH
21439: LD_VAR 0 1
21443: ARRAY
21444: PPUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 30
21450: PUSH
21451: LD_INT 6
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 30
21460: PUSH
21461: LD_INT 7
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 30
21470: PUSH
21471: LD_INT 8
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 72
21488: AND
21489: PUSH
21490: LD_EXP 49
21494: PUSH
21495: LD_VAR 0 1
21499: ARRAY
21500: PPUSH
21501: LD_INT 30
21503: PUSH
21504: LD_INT 3
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PPUSH
21511: CALL_OW 72
21515: NOT
21516: AND
21517: IFFALSE 21731
// begin if sci >= 6 then
21519: LD_VAR 0 8
21523: PUSH
21524: LD_INT 6
21526: GREATEREQUAL
21527: IFFALSE 21531
// exit ;
21529: GO 23950
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
21531: LD_ADDR_EXP 91
21535: PUSH
21536: LD_EXP 91
21540: PPUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: LD_INT 2
21548: PPUSH
21549: CALL_OW 1
21553: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
21554: LD_ADDR_VAR 0 9
21558: PUSH
21559: LD_VAR 0 4
21563: PUSH
21564: LD_VAR 0 8
21568: DIFF
21569: PPUSH
21570: LD_INT 4
21572: PPUSH
21573: CALL 85833 0 2
21577: ST_TO_ADDR
// p := [ ] ;
21578: LD_ADDR_VAR 0 11
21582: PUSH
21583: EMPTY
21584: ST_TO_ADDR
// if sci < 6 and sort > 6 then
21585: LD_VAR 0 8
21589: PUSH
21590: LD_INT 6
21592: LESS
21593: PUSH
21594: LD_VAR 0 9
21598: PUSH
21599: LD_INT 6
21601: GREATER
21602: AND
21603: IFFALSE 21684
// begin for i = 1 to 6 - sci do
21605: LD_ADDR_VAR 0 3
21609: PUSH
21610: DOUBLE
21611: LD_INT 1
21613: DEC
21614: ST_TO_ADDR
21615: LD_INT 6
21617: PUSH
21618: LD_VAR 0 8
21622: MINUS
21623: PUSH
21624: FOR_TO
21625: IFFALSE 21680
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
21627: LD_ADDR_VAR 0 11
21631: PUSH
21632: LD_VAR 0 11
21636: PPUSH
21637: LD_VAR 0 11
21641: PUSH
21642: LD_INT 1
21644: PLUS
21645: PPUSH
21646: LD_VAR 0 9
21650: PUSH
21651: LD_INT 1
21653: ARRAY
21654: PPUSH
21655: CALL_OW 2
21659: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
21660: LD_ADDR_VAR 0 9
21664: PUSH
21665: LD_VAR 0 9
21669: PPUSH
21670: LD_INT 1
21672: PPUSH
21673: CALL_OW 3
21677: ST_TO_ADDR
// end ;
21678: GO 21624
21680: POP
21681: POP
// end else
21682: GO 21704
// if sort then
21684: LD_VAR 0 9
21688: IFFALSE 21704
// p := sort [ 1 ] ;
21690: LD_ADDR_VAR 0 11
21694: PUSH
21695: LD_VAR 0 9
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
21704: LD_ADDR_VAR 0 2
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: LD_VAR 0 11
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: ST_TO_ADDR
// exit ;
21729: GO 23950
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21731: LD_EXP 76
21735: PUSH
21736: LD_EXP 75
21740: PUSH
21741: LD_VAR 0 1
21745: ARRAY
21746: ARRAY
21747: PUSH
21748: LD_EXP 49
21752: PUSH
21753: LD_VAR 0 1
21757: ARRAY
21758: PPUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 7
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 30
21784: PUSH
21785: LD_INT 8
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PPUSH
21798: CALL_OW 72
21802: AND
21803: PUSH
21804: LD_EXP 49
21808: PUSH
21809: LD_VAR 0 1
21813: ARRAY
21814: PPUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PPUSH
21825: CALL_OW 72
21829: AND
21830: IFFALSE 22564
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
21832: LD_ADDR_EXP 91
21836: PUSH
21837: LD_EXP 91
21841: PPUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: LD_INT 3
21849: PPUSH
21850: CALL_OW 1
21854: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
21855: LD_ADDR_VAR 0 2
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: ST_TO_ADDR
// if not eng then
21878: LD_VAR 0 6
21882: NOT
21883: IFFALSE 21946
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
21885: LD_ADDR_VAR 0 11
21889: PUSH
21890: LD_VAR 0 4
21894: PPUSH
21895: LD_INT 2
21897: PPUSH
21898: CALL 85833 0 2
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
21907: LD_ADDR_VAR 0 2
21911: PUSH
21912: LD_VAR 0 2
21916: PPUSH
21917: LD_INT 2
21919: PPUSH
21920: LD_VAR 0 11
21924: PPUSH
21925: CALL_OW 1
21929: ST_TO_ADDR
// tmp := tmp diff p ;
21930: LD_ADDR_VAR 0 4
21934: PUSH
21935: LD_VAR 0 4
21939: PUSH
21940: LD_VAR 0 11
21944: DIFF
21945: ST_TO_ADDR
// end ; if tmp and sci < 6 then
21946: LD_VAR 0 4
21950: PUSH
21951: LD_VAR 0 8
21955: PUSH
21956: LD_INT 6
21958: LESS
21959: AND
21960: IFFALSE 22148
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
21962: LD_ADDR_VAR 0 9
21966: PUSH
21967: LD_VAR 0 4
21971: PUSH
21972: LD_VAR 0 8
21976: PUSH
21977: LD_VAR 0 7
21981: UNION
21982: DIFF
21983: PPUSH
21984: LD_INT 4
21986: PPUSH
21987: CALL 85833 0 2
21991: ST_TO_ADDR
// p := [ ] ;
21992: LD_ADDR_VAR 0 11
21996: PUSH
21997: EMPTY
21998: ST_TO_ADDR
// if sort then
21999: LD_VAR 0 9
22003: IFFALSE 22119
// for i = 1 to 6 - sci do
22005: LD_ADDR_VAR 0 3
22009: PUSH
22010: DOUBLE
22011: LD_INT 1
22013: DEC
22014: ST_TO_ADDR
22015: LD_INT 6
22017: PUSH
22018: LD_VAR 0 8
22022: MINUS
22023: PUSH
22024: FOR_TO
22025: IFFALSE 22117
// begin if i = sort then
22027: LD_VAR 0 3
22031: PUSH
22032: LD_VAR 0 9
22036: EQUAL
22037: IFFALSE 22041
// break ;
22039: GO 22117
// if GetClass ( i ) = 4 then
22041: LD_VAR 0 3
22045: PPUSH
22046: CALL_OW 257
22050: PUSH
22051: LD_INT 4
22053: EQUAL
22054: IFFALSE 22058
// continue ;
22056: GO 22024
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22058: LD_ADDR_VAR 0 11
22062: PUSH
22063: LD_VAR 0 11
22067: PPUSH
22068: LD_VAR 0 11
22072: PUSH
22073: LD_INT 1
22075: PLUS
22076: PPUSH
22077: LD_VAR 0 9
22081: PUSH
22082: LD_VAR 0 3
22086: ARRAY
22087: PPUSH
22088: CALL_OW 2
22092: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22093: LD_ADDR_VAR 0 4
22097: PUSH
22098: LD_VAR 0 4
22102: PUSH
22103: LD_VAR 0 9
22107: PUSH
22108: LD_VAR 0 3
22112: ARRAY
22113: DIFF
22114: ST_TO_ADDR
// end ;
22115: GO 22024
22117: POP
22118: POP
// if p then
22119: LD_VAR 0 11
22123: IFFALSE 22148
// result := Replace ( result , 4 , p ) ;
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_VAR 0 2
22134: PPUSH
22135: LD_INT 4
22137: PPUSH
22138: LD_VAR 0 11
22142: PPUSH
22143: CALL_OW 1
22147: ST_TO_ADDR
// end ; if tmp and mech < 6 then
22148: LD_VAR 0 4
22152: PUSH
22153: LD_VAR 0 7
22157: PUSH
22158: LD_INT 6
22160: LESS
22161: AND
22162: IFFALSE 22350
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
22164: LD_ADDR_VAR 0 9
22168: PUSH
22169: LD_VAR 0 4
22173: PUSH
22174: LD_VAR 0 8
22178: PUSH
22179: LD_VAR 0 7
22183: UNION
22184: DIFF
22185: PPUSH
22186: LD_INT 3
22188: PPUSH
22189: CALL 85833 0 2
22193: ST_TO_ADDR
// p := [ ] ;
22194: LD_ADDR_VAR 0 11
22198: PUSH
22199: EMPTY
22200: ST_TO_ADDR
// if sort then
22201: LD_VAR 0 9
22205: IFFALSE 22321
// for i = 1 to 6 - mech do
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: DOUBLE
22213: LD_INT 1
22215: DEC
22216: ST_TO_ADDR
22217: LD_INT 6
22219: PUSH
22220: LD_VAR 0 7
22224: MINUS
22225: PUSH
22226: FOR_TO
22227: IFFALSE 22319
// begin if i = sort then
22229: LD_VAR 0 3
22233: PUSH
22234: LD_VAR 0 9
22238: EQUAL
22239: IFFALSE 22243
// break ;
22241: GO 22319
// if GetClass ( i ) = 3 then
22243: LD_VAR 0 3
22247: PPUSH
22248: CALL_OW 257
22252: PUSH
22253: LD_INT 3
22255: EQUAL
22256: IFFALSE 22260
// continue ;
22258: GO 22226
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22260: LD_ADDR_VAR 0 11
22264: PUSH
22265: LD_VAR 0 11
22269: PPUSH
22270: LD_VAR 0 11
22274: PUSH
22275: LD_INT 1
22277: PLUS
22278: PPUSH
22279: LD_VAR 0 9
22283: PUSH
22284: LD_VAR 0 3
22288: ARRAY
22289: PPUSH
22290: CALL_OW 2
22294: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22295: LD_ADDR_VAR 0 4
22299: PUSH
22300: LD_VAR 0 4
22304: PUSH
22305: LD_VAR 0 9
22309: PUSH
22310: LD_VAR 0 3
22314: ARRAY
22315: DIFF
22316: ST_TO_ADDR
// end ;
22317: GO 22226
22319: POP
22320: POP
// if p then
22321: LD_VAR 0 11
22325: IFFALSE 22350
// result := Replace ( result , 3 , p ) ;
22327: LD_ADDR_VAR 0 2
22331: PUSH
22332: LD_VAR 0 2
22336: PPUSH
22337: LD_INT 3
22339: PPUSH
22340: LD_VAR 0 11
22344: PPUSH
22345: CALL_OW 1
22349: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
22350: LD_VAR 0 4
22354: PUSH
22355: LD_INT 6
22357: GREATER
22358: PUSH
22359: LD_VAR 0 6
22363: PUSH
22364: LD_INT 6
22366: LESS
22367: AND
22368: IFFALSE 22562
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
22370: LD_ADDR_VAR 0 9
22374: PUSH
22375: LD_VAR 0 4
22379: PUSH
22380: LD_VAR 0 8
22384: PUSH
22385: LD_VAR 0 7
22389: UNION
22390: PUSH
22391: LD_VAR 0 6
22395: UNION
22396: DIFF
22397: PPUSH
22398: LD_INT 2
22400: PPUSH
22401: CALL 85833 0 2
22405: ST_TO_ADDR
// p := [ ] ;
22406: LD_ADDR_VAR 0 11
22410: PUSH
22411: EMPTY
22412: ST_TO_ADDR
// if sort then
22413: LD_VAR 0 9
22417: IFFALSE 22533
// for i = 1 to 6 - eng do
22419: LD_ADDR_VAR 0 3
22423: PUSH
22424: DOUBLE
22425: LD_INT 1
22427: DEC
22428: ST_TO_ADDR
22429: LD_INT 6
22431: PUSH
22432: LD_VAR 0 6
22436: MINUS
22437: PUSH
22438: FOR_TO
22439: IFFALSE 22531
// begin if i = sort then
22441: LD_VAR 0 3
22445: PUSH
22446: LD_VAR 0 9
22450: EQUAL
22451: IFFALSE 22455
// break ;
22453: GO 22531
// if GetClass ( i ) = 2 then
22455: LD_VAR 0 3
22459: PPUSH
22460: CALL_OW 257
22464: PUSH
22465: LD_INT 2
22467: EQUAL
22468: IFFALSE 22472
// continue ;
22470: GO 22438
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22472: LD_ADDR_VAR 0 11
22476: PUSH
22477: LD_VAR 0 11
22481: PPUSH
22482: LD_VAR 0 11
22486: PUSH
22487: LD_INT 1
22489: PLUS
22490: PPUSH
22491: LD_VAR 0 9
22495: PUSH
22496: LD_VAR 0 3
22500: ARRAY
22501: PPUSH
22502: CALL_OW 2
22506: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22507: LD_ADDR_VAR 0 4
22511: PUSH
22512: LD_VAR 0 4
22516: PUSH
22517: LD_VAR 0 9
22521: PUSH
22522: LD_VAR 0 3
22526: ARRAY
22527: DIFF
22528: ST_TO_ADDR
// end ;
22529: GO 22438
22531: POP
22532: POP
// if p then
22533: LD_VAR 0 11
22537: IFFALSE 22562
// result := Replace ( result , 2 , p ) ;
22539: LD_ADDR_VAR 0 2
22543: PUSH
22544: LD_VAR 0 2
22548: PPUSH
22549: LD_INT 2
22551: PPUSH
22552: LD_VAR 0 11
22556: PPUSH
22557: CALL_OW 1
22561: ST_TO_ADDR
// end ; exit ;
22562: GO 23950
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
22564: LD_EXP 76
22568: PUSH
22569: LD_EXP 75
22573: PUSH
22574: LD_VAR 0 1
22578: ARRAY
22579: ARRAY
22580: NOT
22581: PUSH
22582: LD_EXP 49
22586: PUSH
22587: LD_VAR 0 1
22591: ARRAY
22592: PPUSH
22593: LD_INT 30
22595: PUSH
22596: LD_INT 3
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PPUSH
22603: CALL_OW 72
22607: AND
22608: PUSH
22609: LD_EXP 54
22613: PUSH
22614: LD_VAR 0 1
22618: ARRAY
22619: AND
22620: IFFALSE 23228
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
22622: LD_ADDR_EXP 91
22626: PUSH
22627: LD_EXP 91
22631: PPUSH
22632: LD_VAR 0 1
22636: PPUSH
22637: LD_INT 5
22639: PPUSH
22640: CALL_OW 1
22644: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22645: LD_ADDR_VAR 0 2
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: ST_TO_ADDR
// if sci > 1 then
22668: LD_VAR 0 8
22672: PUSH
22673: LD_INT 1
22675: GREATER
22676: IFFALSE 22704
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
22678: LD_ADDR_VAR 0 4
22682: PUSH
22683: LD_VAR 0 4
22687: PUSH
22688: LD_VAR 0 8
22692: PUSH
22693: LD_VAR 0 8
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: DIFF
22702: DIFF
22703: ST_TO_ADDR
// if tmp and not sci then
22704: LD_VAR 0 4
22708: PUSH
22709: LD_VAR 0 8
22713: NOT
22714: AND
22715: IFFALSE 22784
// begin sort := SortBySkill ( tmp , 4 ) ;
22717: LD_ADDR_VAR 0 9
22721: PUSH
22722: LD_VAR 0 4
22726: PPUSH
22727: LD_INT 4
22729: PPUSH
22730: CALL 85833 0 2
22734: ST_TO_ADDR
// if sort then
22735: LD_VAR 0 9
22739: IFFALSE 22755
// p := sort [ 1 ] ;
22741: LD_ADDR_VAR 0 11
22745: PUSH
22746: LD_VAR 0 9
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: ST_TO_ADDR
// if p then
22755: LD_VAR 0 11
22759: IFFALSE 22784
// result := Replace ( result , 4 , p ) ;
22761: LD_ADDR_VAR 0 2
22765: PUSH
22766: LD_VAR 0 2
22770: PPUSH
22771: LD_INT 4
22773: PPUSH
22774: LD_VAR 0 11
22778: PPUSH
22779: CALL_OW 1
22783: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
22784: LD_ADDR_VAR 0 4
22788: PUSH
22789: LD_VAR 0 4
22793: PUSH
22794: LD_VAR 0 7
22798: DIFF
22799: ST_TO_ADDR
// if tmp and mech < 6 then
22800: LD_VAR 0 4
22804: PUSH
22805: LD_VAR 0 7
22809: PUSH
22810: LD_INT 6
22812: LESS
22813: AND
22814: IFFALSE 23002
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
22816: LD_ADDR_VAR 0 9
22820: PUSH
22821: LD_VAR 0 4
22825: PUSH
22826: LD_VAR 0 8
22830: PUSH
22831: LD_VAR 0 7
22835: UNION
22836: DIFF
22837: PPUSH
22838: LD_INT 3
22840: PPUSH
22841: CALL 85833 0 2
22845: ST_TO_ADDR
// p := [ ] ;
22846: LD_ADDR_VAR 0 11
22850: PUSH
22851: EMPTY
22852: ST_TO_ADDR
// if sort then
22853: LD_VAR 0 9
22857: IFFALSE 22973
// for i = 1 to 6 - mech do
22859: LD_ADDR_VAR 0 3
22863: PUSH
22864: DOUBLE
22865: LD_INT 1
22867: DEC
22868: ST_TO_ADDR
22869: LD_INT 6
22871: PUSH
22872: LD_VAR 0 7
22876: MINUS
22877: PUSH
22878: FOR_TO
22879: IFFALSE 22971
// begin if i = sort then
22881: LD_VAR 0 3
22885: PUSH
22886: LD_VAR 0 9
22890: EQUAL
22891: IFFALSE 22895
// break ;
22893: GO 22971
// if GetClass ( i ) = 3 then
22895: LD_VAR 0 3
22899: PPUSH
22900: CALL_OW 257
22904: PUSH
22905: LD_INT 3
22907: EQUAL
22908: IFFALSE 22912
// continue ;
22910: GO 22878
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22912: LD_ADDR_VAR 0 11
22916: PUSH
22917: LD_VAR 0 11
22921: PPUSH
22922: LD_VAR 0 11
22926: PUSH
22927: LD_INT 1
22929: PLUS
22930: PPUSH
22931: LD_VAR 0 9
22935: PUSH
22936: LD_VAR 0 3
22940: ARRAY
22941: PPUSH
22942: CALL_OW 2
22946: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22947: LD_ADDR_VAR 0 4
22951: PUSH
22952: LD_VAR 0 4
22956: PUSH
22957: LD_VAR 0 9
22961: PUSH
22962: LD_VAR 0 3
22966: ARRAY
22967: DIFF
22968: ST_TO_ADDR
// end ;
22969: GO 22878
22971: POP
22972: POP
// if p then
22973: LD_VAR 0 11
22977: IFFALSE 23002
// result := Replace ( result , 3 , p ) ;
22979: LD_ADDR_VAR 0 2
22983: PUSH
22984: LD_VAR 0 2
22988: PPUSH
22989: LD_INT 3
22991: PPUSH
22992: LD_VAR 0 11
22996: PPUSH
22997: CALL_OW 1
23001: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23002: LD_ADDR_VAR 0 4
23006: PUSH
23007: LD_VAR 0 4
23011: PUSH
23012: LD_VAR 0 6
23016: DIFF
23017: ST_TO_ADDR
// if tmp and eng < 6 then
23018: LD_VAR 0 4
23022: PUSH
23023: LD_VAR 0 6
23027: PUSH
23028: LD_INT 6
23030: LESS
23031: AND
23032: IFFALSE 23226
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23034: LD_ADDR_VAR 0 9
23038: PUSH
23039: LD_VAR 0 4
23043: PUSH
23044: LD_VAR 0 8
23048: PUSH
23049: LD_VAR 0 7
23053: UNION
23054: PUSH
23055: LD_VAR 0 6
23059: UNION
23060: DIFF
23061: PPUSH
23062: LD_INT 2
23064: PPUSH
23065: CALL 85833 0 2
23069: ST_TO_ADDR
// p := [ ] ;
23070: LD_ADDR_VAR 0 11
23074: PUSH
23075: EMPTY
23076: ST_TO_ADDR
// if sort then
23077: LD_VAR 0 9
23081: IFFALSE 23197
// for i = 1 to 6 - eng do
23083: LD_ADDR_VAR 0 3
23087: PUSH
23088: DOUBLE
23089: LD_INT 1
23091: DEC
23092: ST_TO_ADDR
23093: LD_INT 6
23095: PUSH
23096: LD_VAR 0 6
23100: MINUS
23101: PUSH
23102: FOR_TO
23103: IFFALSE 23195
// begin if i = sort then
23105: LD_VAR 0 3
23109: PUSH
23110: LD_VAR 0 9
23114: EQUAL
23115: IFFALSE 23119
// break ;
23117: GO 23195
// if GetClass ( i ) = 2 then
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 257
23128: PUSH
23129: LD_INT 2
23131: EQUAL
23132: IFFALSE 23136
// continue ;
23134: GO 23102
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23136: LD_ADDR_VAR 0 11
23140: PUSH
23141: LD_VAR 0 11
23145: PPUSH
23146: LD_VAR 0 11
23150: PUSH
23151: LD_INT 1
23153: PLUS
23154: PPUSH
23155: LD_VAR 0 9
23159: PUSH
23160: LD_VAR 0 3
23164: ARRAY
23165: PPUSH
23166: CALL_OW 2
23170: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23171: LD_ADDR_VAR 0 4
23175: PUSH
23176: LD_VAR 0 4
23180: PUSH
23181: LD_VAR 0 9
23185: PUSH
23186: LD_VAR 0 3
23190: ARRAY
23191: DIFF
23192: ST_TO_ADDR
// end ;
23193: GO 23102
23195: POP
23196: POP
// if p then
23197: LD_VAR 0 11
23201: IFFALSE 23226
// result := Replace ( result , 2 , p ) ;
23203: LD_ADDR_VAR 0 2
23207: PUSH
23208: LD_VAR 0 2
23212: PPUSH
23213: LD_INT 2
23215: PPUSH
23216: LD_VAR 0 11
23220: PPUSH
23221: CALL_OW 1
23225: ST_TO_ADDR
// end ; exit ;
23226: GO 23950
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
23228: LD_EXP 76
23232: PUSH
23233: LD_EXP 75
23237: PUSH
23238: LD_VAR 0 1
23242: ARRAY
23243: ARRAY
23244: NOT
23245: PUSH
23246: LD_EXP 49
23250: PUSH
23251: LD_VAR 0 1
23255: ARRAY
23256: PPUSH
23257: LD_INT 30
23259: PUSH
23260: LD_INT 3
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PPUSH
23267: CALL_OW 72
23271: AND
23272: PUSH
23273: LD_EXP 54
23277: PUSH
23278: LD_VAR 0 1
23282: ARRAY
23283: NOT
23284: AND
23285: IFFALSE 23950
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
23287: LD_ADDR_EXP 91
23291: PUSH
23292: LD_EXP 91
23296: PPUSH
23297: LD_VAR 0 1
23301: PPUSH
23302: LD_INT 6
23304: PPUSH
23305: CALL_OW 1
23309: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23310: LD_ADDR_VAR 0 2
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: LD_INT 0
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: ST_TO_ADDR
// if sci >= 1 then
23333: LD_VAR 0 8
23337: PUSH
23338: LD_INT 1
23340: GREATEREQUAL
23341: IFFALSE 23363
// tmp := tmp diff sci [ 1 ] ;
23343: LD_ADDR_VAR 0 4
23347: PUSH
23348: LD_VAR 0 4
23352: PUSH
23353: LD_VAR 0 8
23357: PUSH
23358: LD_INT 1
23360: ARRAY
23361: DIFF
23362: ST_TO_ADDR
// if tmp and not sci then
23363: LD_VAR 0 4
23367: PUSH
23368: LD_VAR 0 8
23372: NOT
23373: AND
23374: IFFALSE 23443
// begin sort := SortBySkill ( tmp , 4 ) ;
23376: LD_ADDR_VAR 0 9
23380: PUSH
23381: LD_VAR 0 4
23385: PPUSH
23386: LD_INT 4
23388: PPUSH
23389: CALL 85833 0 2
23393: ST_TO_ADDR
// if sort then
23394: LD_VAR 0 9
23398: IFFALSE 23414
// p := sort [ 1 ] ;
23400: LD_ADDR_VAR 0 11
23404: PUSH
23405: LD_VAR 0 9
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: ST_TO_ADDR
// if p then
23414: LD_VAR 0 11
23418: IFFALSE 23443
// result := Replace ( result , 4 , p ) ;
23420: LD_ADDR_VAR 0 2
23424: PUSH
23425: LD_VAR 0 2
23429: PPUSH
23430: LD_INT 4
23432: PPUSH
23433: LD_VAR 0 11
23437: PPUSH
23438: CALL_OW 1
23442: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23443: LD_ADDR_VAR 0 4
23447: PUSH
23448: LD_VAR 0 4
23452: PUSH
23453: LD_VAR 0 7
23457: DIFF
23458: ST_TO_ADDR
// if tmp and mech < 6 then
23459: LD_VAR 0 4
23463: PUSH
23464: LD_VAR 0 7
23468: PUSH
23469: LD_INT 6
23471: LESS
23472: AND
23473: IFFALSE 23655
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
23475: LD_ADDR_VAR 0 9
23479: PUSH
23480: LD_VAR 0 4
23484: PUSH
23485: LD_VAR 0 7
23489: DIFF
23490: PPUSH
23491: LD_INT 3
23493: PPUSH
23494: CALL 85833 0 2
23498: ST_TO_ADDR
// p := [ ] ;
23499: LD_ADDR_VAR 0 11
23503: PUSH
23504: EMPTY
23505: ST_TO_ADDR
// if sort then
23506: LD_VAR 0 9
23510: IFFALSE 23626
// for i = 1 to 6 - mech do
23512: LD_ADDR_VAR 0 3
23516: PUSH
23517: DOUBLE
23518: LD_INT 1
23520: DEC
23521: ST_TO_ADDR
23522: LD_INT 6
23524: PUSH
23525: LD_VAR 0 7
23529: MINUS
23530: PUSH
23531: FOR_TO
23532: IFFALSE 23624
// begin if i = sort then
23534: LD_VAR 0 3
23538: PUSH
23539: LD_VAR 0 9
23543: EQUAL
23544: IFFALSE 23548
// break ;
23546: GO 23624
// if GetClass ( i ) = 3 then
23548: LD_VAR 0 3
23552: PPUSH
23553: CALL_OW 257
23557: PUSH
23558: LD_INT 3
23560: EQUAL
23561: IFFALSE 23565
// continue ;
23563: GO 23531
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23565: LD_ADDR_VAR 0 11
23569: PUSH
23570: LD_VAR 0 11
23574: PPUSH
23575: LD_VAR 0 11
23579: PUSH
23580: LD_INT 1
23582: PLUS
23583: PPUSH
23584: LD_VAR 0 9
23588: PUSH
23589: LD_VAR 0 3
23593: ARRAY
23594: PPUSH
23595: CALL_OW 2
23599: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23600: LD_ADDR_VAR 0 4
23604: PUSH
23605: LD_VAR 0 4
23609: PUSH
23610: LD_VAR 0 9
23614: PUSH
23615: LD_VAR 0 3
23619: ARRAY
23620: DIFF
23621: ST_TO_ADDR
// end ;
23622: GO 23531
23624: POP
23625: POP
// if p then
23626: LD_VAR 0 11
23630: IFFALSE 23655
// result := Replace ( result , 3 , p ) ;
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_VAR 0 2
23641: PPUSH
23642: LD_INT 3
23644: PPUSH
23645: LD_VAR 0 11
23649: PPUSH
23650: CALL_OW 1
23654: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23655: LD_ADDR_VAR 0 4
23659: PUSH
23660: LD_VAR 0 4
23664: PUSH
23665: LD_VAR 0 6
23669: DIFF
23670: ST_TO_ADDR
// if tmp and eng < 4 then
23671: LD_VAR 0 4
23675: PUSH
23676: LD_VAR 0 6
23680: PUSH
23681: LD_INT 4
23683: LESS
23684: AND
23685: IFFALSE 23875
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
23687: LD_ADDR_VAR 0 9
23691: PUSH
23692: LD_VAR 0 4
23696: PUSH
23697: LD_VAR 0 7
23701: PUSH
23702: LD_VAR 0 6
23706: UNION
23707: DIFF
23708: PPUSH
23709: LD_INT 2
23711: PPUSH
23712: CALL 85833 0 2
23716: ST_TO_ADDR
// p := [ ] ;
23717: LD_ADDR_VAR 0 11
23721: PUSH
23722: EMPTY
23723: ST_TO_ADDR
// if sort then
23724: LD_VAR 0 9
23728: IFFALSE 23844
// for i = 1 to 4 - eng do
23730: LD_ADDR_VAR 0 3
23734: PUSH
23735: DOUBLE
23736: LD_INT 1
23738: DEC
23739: ST_TO_ADDR
23740: LD_INT 4
23742: PUSH
23743: LD_VAR 0 6
23747: MINUS
23748: PUSH
23749: FOR_TO
23750: IFFALSE 23842
// begin if i = sort then
23752: LD_VAR 0 3
23756: PUSH
23757: LD_VAR 0 9
23761: EQUAL
23762: IFFALSE 23766
// break ;
23764: GO 23842
// if GetClass ( i ) = 2 then
23766: LD_VAR 0 3
23770: PPUSH
23771: CALL_OW 257
23775: PUSH
23776: LD_INT 2
23778: EQUAL
23779: IFFALSE 23783
// continue ;
23781: GO 23749
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23783: LD_ADDR_VAR 0 11
23787: PUSH
23788: LD_VAR 0 11
23792: PPUSH
23793: LD_VAR 0 11
23797: PUSH
23798: LD_INT 1
23800: PLUS
23801: PPUSH
23802: LD_VAR 0 9
23806: PUSH
23807: LD_VAR 0 3
23811: ARRAY
23812: PPUSH
23813: CALL_OW 2
23817: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23818: LD_ADDR_VAR 0 4
23822: PUSH
23823: LD_VAR 0 4
23827: PUSH
23828: LD_VAR 0 9
23832: PUSH
23833: LD_VAR 0 3
23837: ARRAY
23838: DIFF
23839: ST_TO_ADDR
// end ;
23840: GO 23749
23842: POP
23843: POP
// if p then
23844: LD_VAR 0 11
23848: IFFALSE 23873
// result := Replace ( result , 2 , p ) ;
23850: LD_ADDR_VAR 0 2
23854: PUSH
23855: LD_VAR 0 2
23859: PPUSH
23860: LD_INT 2
23862: PPUSH
23863: LD_VAR 0 11
23867: PPUSH
23868: CALL_OW 1
23872: ST_TO_ADDR
// end else
23873: GO 23919
// for i = eng downto 5 do
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: DOUBLE
23881: LD_VAR 0 6
23885: INC
23886: ST_TO_ADDR
23887: LD_INT 5
23889: PUSH
23890: FOR_DOWNTO
23891: IFFALSE 23917
// tmp := tmp union eng [ i ] ;
23893: LD_ADDR_VAR 0 4
23897: PUSH
23898: LD_VAR 0 4
23902: PUSH
23903: LD_VAR 0 6
23907: PUSH
23908: LD_VAR 0 3
23912: ARRAY
23913: UNION
23914: ST_TO_ADDR
23915: GO 23890
23917: POP
23918: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
23919: LD_ADDR_VAR 0 2
23923: PUSH
23924: LD_VAR 0 2
23928: PPUSH
23929: LD_INT 1
23931: PPUSH
23932: LD_VAR 0 4
23936: PUSH
23937: LD_VAR 0 5
23941: DIFF
23942: PPUSH
23943: CALL_OW 1
23947: ST_TO_ADDR
// exit ;
23948: GO 23950
// end ; end ;
23950: LD_VAR 0 2
23954: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
23955: LD_INT 0
23957: PPUSH
23958: PPUSH
23959: PPUSH
// if not mc_bases then
23960: LD_EXP 49
23964: NOT
23965: IFFALSE 23969
// exit ;
23967: GO 24075
// for i = 1 to mc_bases do
23969: LD_ADDR_VAR 0 2
23973: PUSH
23974: DOUBLE
23975: LD_INT 1
23977: DEC
23978: ST_TO_ADDR
23979: LD_EXP 49
23983: PUSH
23984: FOR_TO
23985: IFFALSE 24066
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23987: LD_ADDR_VAR 0 3
23991: PUSH
23992: LD_EXP 49
23996: PUSH
23997: LD_VAR 0 2
24001: ARRAY
24002: PPUSH
24003: LD_INT 21
24005: PUSH
24006: LD_INT 3
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: LD_INT 24
24018: PUSH
24019: LD_INT 1000
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PPUSH
24034: CALL_OW 72
24038: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
24039: LD_ADDR_EXP 50
24043: PUSH
24044: LD_EXP 50
24048: PPUSH
24049: LD_VAR 0 2
24053: PPUSH
24054: LD_VAR 0 3
24058: PPUSH
24059: CALL_OW 1
24063: ST_TO_ADDR
// end ;
24064: GO 23984
24066: POP
24067: POP
// RaiseSailEvent ( 101 ) ;
24068: LD_INT 101
24070: PPUSH
24071: CALL_OW 427
// end ;
24075: LD_VAR 0 1
24079: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
24080: LD_INT 0
24082: PPUSH
24083: PPUSH
24084: PPUSH
24085: PPUSH
24086: PPUSH
24087: PPUSH
24088: PPUSH
// if not mc_bases then
24089: LD_EXP 49
24093: NOT
24094: IFFALSE 24098
// exit ;
24096: GO 24671
// for i = 1 to mc_bases do
24098: LD_ADDR_VAR 0 2
24102: PUSH
24103: DOUBLE
24104: LD_INT 1
24106: DEC
24107: ST_TO_ADDR
24108: LD_EXP 49
24112: PUSH
24113: FOR_TO
24114: IFFALSE 24662
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
24116: LD_ADDR_VAR 0 5
24120: PUSH
24121: LD_EXP 49
24125: PUSH
24126: LD_VAR 0 2
24130: ARRAY
24131: PUSH
24132: LD_EXP 78
24136: PUSH
24137: LD_VAR 0 2
24141: ARRAY
24142: UNION
24143: PPUSH
24144: LD_INT 21
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: LD_INT 54
24162: PUSH
24163: EMPTY
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 3
24172: PUSH
24173: LD_INT 24
24175: PUSH
24176: LD_INT 750
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PPUSH
24196: CALL_OW 72
24200: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
24201: LD_ADDR_VAR 0 6
24205: PUSH
24206: LD_EXP 49
24210: PUSH
24211: LD_VAR 0 2
24215: ARRAY
24216: PPUSH
24217: LD_INT 21
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: LD_INT 3
24232: PUSH
24233: LD_INT 54
24235: PUSH
24236: EMPTY
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 3
24245: PUSH
24246: LD_INT 24
24248: PUSH
24249: LD_INT 250
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PPUSH
24269: CALL_OW 72
24273: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
24274: LD_ADDR_VAR 0 7
24278: PUSH
24279: LD_VAR 0 5
24283: PUSH
24284: LD_VAR 0 6
24288: DIFF
24289: ST_TO_ADDR
// if not need_heal_1 then
24290: LD_VAR 0 6
24294: NOT
24295: IFFALSE 24328
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
24297: LD_ADDR_EXP 52
24301: PUSH
24302: LD_EXP 52
24306: PPUSH
24307: LD_VAR 0 2
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PPUSH
24319: EMPTY
24320: PPUSH
24321: CALL 51648 0 3
24325: ST_TO_ADDR
24326: GO 24398
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
24328: LD_ADDR_EXP 52
24332: PUSH
24333: LD_EXP 52
24337: PPUSH
24338: LD_VAR 0 2
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PPUSH
24350: LD_EXP 52
24354: PUSH
24355: LD_VAR 0 2
24359: ARRAY
24360: PUSH
24361: LD_INT 1
24363: ARRAY
24364: PPUSH
24365: LD_INT 3
24367: PUSH
24368: LD_INT 24
24370: PUSH
24371: LD_INT 1000
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PPUSH
24382: CALL_OW 72
24386: PUSH
24387: LD_VAR 0 6
24391: UNION
24392: PPUSH
24393: CALL 51648 0 3
24397: ST_TO_ADDR
// if not need_heal_2 then
24398: LD_VAR 0 7
24402: NOT
24403: IFFALSE 24436
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
24405: LD_ADDR_EXP 52
24409: PUSH
24410: LD_EXP 52
24414: PPUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PPUSH
24427: EMPTY
24428: PPUSH
24429: CALL 51648 0 3
24433: ST_TO_ADDR
24434: GO 24468
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
24436: LD_ADDR_EXP 52
24440: PUSH
24441: LD_EXP 52
24445: PPUSH
24446: LD_VAR 0 2
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PPUSH
24458: LD_VAR 0 7
24462: PPUSH
24463: CALL 51648 0 3
24467: ST_TO_ADDR
// if need_heal_2 then
24468: LD_VAR 0 7
24472: IFFALSE 24644
// for j in need_heal_2 do
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_VAR 0 7
24483: PUSH
24484: FOR_IN
24485: IFFALSE 24642
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
24487: LD_ADDR_VAR 0 5
24491: PUSH
24492: LD_EXP 49
24496: PUSH
24497: LD_VAR 0 2
24501: ARRAY
24502: PPUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 30
24508: PUSH
24509: LD_INT 6
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 30
24518: PUSH
24519: LD_INT 7
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 30
24528: PUSH
24529: LD_INT 8
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 30
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 30
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 25
24558: PUSH
24559: LD_INT 4
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: PPUSH
24575: CALL_OW 72
24579: ST_TO_ADDR
// if tmp then
24580: LD_VAR 0 5
24584: IFFALSE 24640
// begin k := NearestUnitToUnit ( tmp , j ) ;
24586: LD_ADDR_VAR 0 4
24590: PUSH
24591: LD_VAR 0 5
24595: PPUSH
24596: LD_VAR 0 3
24600: PPUSH
24601: CALL_OW 74
24605: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
24606: LD_VAR 0 3
24610: PPUSH
24611: LD_VAR 0 4
24615: PPUSH
24616: CALL_OW 296
24620: PUSH
24621: LD_INT 7
24623: GREATER
24624: IFFALSE 24640
// ComMoveUnit ( j , k ) ;
24626: LD_VAR 0 3
24630: PPUSH
24631: LD_VAR 0 4
24635: PPUSH
24636: CALL_OW 112
// end ; end ;
24640: GO 24484
24642: POP
24643: POP
// if not need_heal_1 and not need_heal_2 then
24644: LD_VAR 0 6
24648: NOT
24649: PUSH
24650: LD_VAR 0 7
24654: NOT
24655: AND
24656: IFFALSE 24660
// continue ;
24658: GO 24113
// end ;
24660: GO 24113
24662: POP
24663: POP
// RaiseSailEvent ( 102 ) ;
24664: LD_INT 102
24666: PPUSH
24667: CALL_OW 427
// end ;
24671: LD_VAR 0 1
24675: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
24676: LD_INT 0
24678: PPUSH
24679: PPUSH
24680: PPUSH
24681: PPUSH
24682: PPUSH
// if not mc_bases then
24683: LD_EXP 49
24687: NOT
24688: IFFALSE 24692
// exit ;
24690: GO 25077
// for i = 1 to mc_bases do
24692: LD_ADDR_VAR 0 2
24696: PUSH
24697: DOUBLE
24698: LD_INT 1
24700: DEC
24701: ST_TO_ADDR
24702: LD_EXP 49
24706: PUSH
24707: FOR_TO
24708: IFFALSE 25075
// begin if not mc_building_need_repair [ i ] then
24710: LD_EXP 50
24714: PUSH
24715: LD_VAR 0 2
24719: ARRAY
24720: NOT
24721: IFFALSE 24759
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
24723: LD_ADDR_EXP 51
24727: PUSH
24728: LD_EXP 51
24732: PPUSH
24733: LD_VAR 0 2
24737: PPUSH
24738: EMPTY
24739: PPUSH
24740: CALL_OW 1
24744: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
24745: LD_VAR 0 2
24749: PPUSH
24750: LD_INT 101
24752: PPUSH
24753: CALL 19797 0 2
// continue ;
24757: GO 24707
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
24759: LD_ADDR_EXP 55
24763: PUSH
24764: LD_EXP 55
24768: PPUSH
24769: LD_VAR 0 2
24773: PPUSH
24774: EMPTY
24775: PPUSH
24776: CALL_OW 1
24780: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
24781: LD_VAR 0 2
24785: PPUSH
24786: LD_INT 103
24788: PPUSH
24789: CALL 19797 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
24793: LD_ADDR_VAR 0 5
24797: PUSH
24798: LD_EXP 49
24802: PUSH
24803: LD_VAR 0 2
24807: ARRAY
24808: PUSH
24809: LD_EXP 78
24813: PUSH
24814: LD_VAR 0 2
24818: ARRAY
24819: UNION
24820: PPUSH
24821: LD_INT 2
24823: PUSH
24824: LD_INT 25
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 25
24836: PUSH
24837: LD_INT 16
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: PPUSH
24852: CALL_OW 72
24856: ST_TO_ADDR
// if not tmp then
24857: LD_VAR 0 5
24861: NOT
24862: IFFALSE 24866
// continue ;
24864: GO 24707
// for j in tmp do
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_VAR 0 5
24875: PUSH
24876: FOR_IN
24877: IFFALSE 25071
// begin if mc_need_heal [ i ] then
24879: LD_EXP 52
24883: PUSH
24884: LD_VAR 0 2
24888: ARRAY
24889: IFFALSE 24937
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
24891: LD_VAR 0 3
24895: PUSH
24896: LD_EXP 52
24900: PUSH
24901: LD_VAR 0 2
24905: ARRAY
24906: PUSH
24907: LD_INT 1
24909: ARRAY
24910: IN
24911: PUSH
24912: LD_VAR 0 3
24916: PUSH
24917: LD_EXP 52
24921: PUSH
24922: LD_VAR 0 2
24926: ARRAY
24927: PUSH
24928: LD_INT 2
24930: ARRAY
24931: IN
24932: OR
24933: IFFALSE 24937
// continue ;
24935: GO 24876
// if IsInUnit ( j ) then
24937: LD_VAR 0 3
24941: PPUSH
24942: CALL_OW 310
24946: IFFALSE 24957
// ComExitBuilding ( j ) ;
24948: LD_VAR 0 3
24952: PPUSH
24953: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
24957: LD_VAR 0 3
24961: PUSH
24962: LD_EXP 51
24966: PUSH
24967: LD_VAR 0 2
24971: ARRAY
24972: IN
24973: NOT
24974: IFFALSE 25032
// begin SetTag ( j , 101 ) ;
24976: LD_VAR 0 3
24980: PPUSH
24981: LD_INT 101
24983: PPUSH
24984: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
24988: LD_ADDR_EXP 51
24992: PUSH
24993: LD_EXP 51
24997: PPUSH
24998: LD_VAR 0 2
25002: PUSH
25003: LD_EXP 51
25007: PUSH
25008: LD_VAR 0 2
25012: ARRAY
25013: PUSH
25014: LD_INT 1
25016: PLUS
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PPUSH
25022: LD_VAR 0 3
25026: PPUSH
25027: CALL 51648 0 3
25031: ST_TO_ADDR
// end ; wait ( 1 ) ;
25032: LD_INT 1
25034: PPUSH
25035: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
25039: LD_VAR 0 3
25043: PPUSH
25044: LD_EXP 50
25048: PUSH
25049: LD_VAR 0 2
25053: ARRAY
25054: PPUSH
25055: LD_VAR 0 3
25059: PPUSH
25060: CALL_OW 74
25064: PPUSH
25065: CALL_OW 130
// end ;
25069: GO 24876
25071: POP
25072: POP
// end ;
25073: GO 24707
25075: POP
25076: POP
// end ;
25077: LD_VAR 0 1
25081: RET
// export function MC_Heal ; var i , j , tmp ; begin
25082: LD_INT 0
25084: PPUSH
25085: PPUSH
25086: PPUSH
25087: PPUSH
// if not mc_bases then
25088: LD_EXP 49
25092: NOT
25093: IFFALSE 25097
// exit ;
25095: GO 25499
// for i = 1 to mc_bases do
25097: LD_ADDR_VAR 0 2
25101: PUSH
25102: DOUBLE
25103: LD_INT 1
25105: DEC
25106: ST_TO_ADDR
25107: LD_EXP 49
25111: PUSH
25112: FOR_TO
25113: IFFALSE 25497
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
25115: LD_EXP 52
25119: PUSH
25120: LD_VAR 0 2
25124: ARRAY
25125: PUSH
25126: LD_INT 1
25128: ARRAY
25129: NOT
25130: PUSH
25131: LD_EXP 52
25135: PUSH
25136: LD_VAR 0 2
25140: ARRAY
25141: PUSH
25142: LD_INT 2
25144: ARRAY
25145: NOT
25146: AND
25147: IFFALSE 25185
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
25149: LD_ADDR_EXP 53
25153: PUSH
25154: LD_EXP 53
25158: PPUSH
25159: LD_VAR 0 2
25163: PPUSH
25164: EMPTY
25165: PPUSH
25166: CALL_OW 1
25170: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
25171: LD_VAR 0 2
25175: PPUSH
25176: LD_INT 102
25178: PPUSH
25179: CALL 19797 0 2
// continue ;
25183: GO 25112
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
25185: LD_ADDR_VAR 0 4
25189: PUSH
25190: LD_EXP 49
25194: PUSH
25195: LD_VAR 0 2
25199: ARRAY
25200: PPUSH
25201: LD_INT 25
25203: PUSH
25204: LD_INT 4
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PPUSH
25211: CALL_OW 72
25215: ST_TO_ADDR
// if not tmp then
25216: LD_VAR 0 4
25220: NOT
25221: IFFALSE 25225
// continue ;
25223: GO 25112
// if mc_taming [ i ] then
25225: LD_EXP 80
25229: PUSH
25230: LD_VAR 0 2
25234: ARRAY
25235: IFFALSE 25259
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
25237: LD_ADDR_EXP 80
25241: PUSH
25242: LD_EXP 80
25246: PPUSH
25247: LD_VAR 0 2
25251: PPUSH
25252: EMPTY
25253: PPUSH
25254: CALL_OW 1
25258: ST_TO_ADDR
// for j in tmp do
25259: LD_ADDR_VAR 0 3
25263: PUSH
25264: LD_VAR 0 4
25268: PUSH
25269: FOR_IN
25270: IFFALSE 25493
// begin if IsInUnit ( j ) then
25272: LD_VAR 0 3
25276: PPUSH
25277: CALL_OW 310
25281: IFFALSE 25292
// ComExitBuilding ( j ) ;
25283: LD_VAR 0 3
25287: PPUSH
25288: CALL_OW 122
// if not j in mc_healers [ i ] then
25292: LD_VAR 0 3
25296: PUSH
25297: LD_EXP 53
25301: PUSH
25302: LD_VAR 0 2
25306: ARRAY
25307: IN
25308: NOT
25309: IFFALSE 25355
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
25311: LD_ADDR_EXP 53
25315: PUSH
25316: LD_EXP 53
25320: PPUSH
25321: LD_VAR 0 2
25325: PUSH
25326: LD_EXP 53
25330: PUSH
25331: LD_VAR 0 2
25335: ARRAY
25336: PUSH
25337: LD_INT 1
25339: PLUS
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PPUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: CALL 51648 0 3
25354: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
25355: LD_VAR 0 3
25359: PPUSH
25360: CALL_OW 110
25364: PUSH
25365: LD_INT 102
25367: NONEQUAL
25368: IFFALSE 25382
// SetTag ( j , 102 ) ;
25370: LD_VAR 0 3
25374: PPUSH
25375: LD_INT 102
25377: PPUSH
25378: CALL_OW 109
// Wait ( 3 ) ;
25382: LD_INT 3
25384: PPUSH
25385: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
25389: LD_EXP 52
25393: PUSH
25394: LD_VAR 0 2
25398: ARRAY
25399: PUSH
25400: LD_INT 1
25402: ARRAY
25403: IFFALSE 25435
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
25405: LD_VAR 0 3
25409: PPUSH
25410: LD_EXP 52
25414: PUSH
25415: LD_VAR 0 2
25419: ARRAY
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: PUSH
25425: LD_INT 1
25427: ARRAY
25428: PPUSH
25429: CALL_OW 128
25433: GO 25491
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
25435: LD_VAR 0 3
25439: PPUSH
25440: CALL_OW 314
25444: NOT
25445: PUSH
25446: LD_EXP 52
25450: PUSH
25451: LD_VAR 0 2
25455: ARRAY
25456: PUSH
25457: LD_INT 2
25459: ARRAY
25460: AND
25461: IFFALSE 25491
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
25463: LD_VAR 0 3
25467: PPUSH
25468: LD_EXP 52
25472: PUSH
25473: LD_VAR 0 2
25477: ARRAY
25478: PUSH
25479: LD_INT 2
25481: ARRAY
25482: PUSH
25483: LD_INT 1
25485: ARRAY
25486: PPUSH
25487: CALL_OW 128
// end ;
25491: GO 25269
25493: POP
25494: POP
// end ;
25495: GO 25112
25497: POP
25498: POP
// end ;
25499: LD_VAR 0 1
25503: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
25504: LD_INT 0
25506: PPUSH
25507: PPUSH
25508: PPUSH
25509: PPUSH
25510: PPUSH
// if not mc_bases then
25511: LD_EXP 49
25515: NOT
25516: IFFALSE 25520
// exit ;
25518: GO 26663
// for i = 1 to mc_bases do
25520: LD_ADDR_VAR 0 2
25524: PUSH
25525: DOUBLE
25526: LD_INT 1
25528: DEC
25529: ST_TO_ADDR
25530: LD_EXP 49
25534: PUSH
25535: FOR_TO
25536: IFFALSE 26661
// begin if mc_scan [ i ] then
25538: LD_EXP 72
25542: PUSH
25543: LD_VAR 0 2
25547: ARRAY
25548: IFFALSE 25552
// continue ;
25550: GO 25535
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
25552: LD_EXP 54
25556: PUSH
25557: LD_VAR 0 2
25561: ARRAY
25562: NOT
25563: PUSH
25564: LD_EXP 56
25568: PUSH
25569: LD_VAR 0 2
25573: ARRAY
25574: NOT
25575: AND
25576: PUSH
25577: LD_EXP 55
25581: PUSH
25582: LD_VAR 0 2
25586: ARRAY
25587: AND
25588: IFFALSE 25626
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
25590: LD_ADDR_EXP 55
25594: PUSH
25595: LD_EXP 55
25599: PPUSH
25600: LD_VAR 0 2
25604: PPUSH
25605: EMPTY
25606: PPUSH
25607: CALL_OW 1
25611: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25612: LD_VAR 0 2
25616: PPUSH
25617: LD_INT 103
25619: PPUSH
25620: CALL 19797 0 2
// continue ;
25624: GO 25535
// end ; if mc_construct_list [ i ] then
25626: LD_EXP 56
25630: PUSH
25631: LD_VAR 0 2
25635: ARRAY
25636: IFFALSE 25856
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25638: LD_ADDR_VAR 0 4
25642: PUSH
25643: LD_EXP 49
25647: PUSH
25648: LD_VAR 0 2
25652: ARRAY
25653: PPUSH
25654: LD_INT 25
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PPUSH
25664: CALL_OW 72
25668: PUSH
25669: LD_EXP 51
25673: PUSH
25674: LD_VAR 0 2
25678: ARRAY
25679: DIFF
25680: ST_TO_ADDR
// if not tmp then
25681: LD_VAR 0 4
25685: NOT
25686: IFFALSE 25690
// continue ;
25688: GO 25535
// for j in tmp do
25690: LD_ADDR_VAR 0 3
25694: PUSH
25695: LD_VAR 0 4
25699: PUSH
25700: FOR_IN
25701: IFFALSE 25852
// begin if not mc_builders [ i ] then
25703: LD_EXP 55
25707: PUSH
25708: LD_VAR 0 2
25712: ARRAY
25713: NOT
25714: IFFALSE 25772
// begin SetTag ( j , 103 ) ;
25716: LD_VAR 0 3
25720: PPUSH
25721: LD_INT 103
25723: PPUSH
25724: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25728: LD_ADDR_EXP 55
25732: PUSH
25733: LD_EXP 55
25737: PPUSH
25738: LD_VAR 0 2
25742: PUSH
25743: LD_EXP 55
25747: PUSH
25748: LD_VAR 0 2
25752: ARRAY
25753: PUSH
25754: LD_INT 1
25756: PLUS
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PPUSH
25762: LD_VAR 0 3
25766: PPUSH
25767: CALL 51648 0 3
25771: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25772: LD_VAR 0 3
25776: PPUSH
25777: CALL_OW 310
25781: IFFALSE 25792
// ComExitBuilding ( j ) ;
25783: LD_VAR 0 3
25787: PPUSH
25788: CALL_OW 122
// wait ( 3 ) ;
25792: LD_INT 3
25794: PPUSH
25795: CALL_OW 67
// if not mc_construct_list [ i ] then
25799: LD_EXP 56
25803: PUSH
25804: LD_VAR 0 2
25808: ARRAY
25809: NOT
25810: IFFALSE 25814
// break ;
25812: GO 25852
// if not HasTask ( j ) then
25814: LD_VAR 0 3
25818: PPUSH
25819: CALL_OW 314
25823: NOT
25824: IFFALSE 25850
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
25826: LD_VAR 0 3
25830: PPUSH
25831: LD_EXP 56
25835: PUSH
25836: LD_VAR 0 2
25840: ARRAY
25841: PUSH
25842: LD_INT 1
25844: ARRAY
25845: PPUSH
25846: CALL 54499 0 2
// end ;
25850: GO 25700
25852: POP
25853: POP
// end else
25854: GO 26659
// if mc_build_list [ i ] then
25856: LD_EXP 54
25860: PUSH
25861: LD_VAR 0 2
25865: ARRAY
25866: IFFALSE 26659
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
25868: LD_ADDR_VAR 0 5
25872: PUSH
25873: LD_EXP 49
25877: PUSH
25878: LD_VAR 0 2
25882: ARRAY
25883: PPUSH
25884: LD_INT 2
25886: PUSH
25887: LD_INT 30
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 30
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL_OW 72
25916: ST_TO_ADDR
// if depot then
25917: LD_VAR 0 5
25921: IFFALSE 25939
// depot := depot [ 1 ] else
25923: LD_ADDR_VAR 0 5
25927: PUSH
25928: LD_VAR 0 5
25932: PUSH
25933: LD_INT 1
25935: ARRAY
25936: ST_TO_ADDR
25937: GO 25947
// depot := 0 ;
25939: LD_ADDR_VAR 0 5
25943: PUSH
25944: LD_INT 0
25946: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
25947: LD_EXP 54
25951: PUSH
25952: LD_VAR 0 2
25956: ARRAY
25957: PUSH
25958: LD_INT 1
25960: ARRAY
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PPUSH
25966: CALL 54329 0 1
25970: PUSH
25971: LD_EXP 49
25975: PUSH
25976: LD_VAR 0 2
25980: ARRAY
25981: PPUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 30
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 30
25997: PUSH
25998: LD_INT 3
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: PPUSH
26010: CALL_OW 72
26014: NOT
26015: AND
26016: IFFALSE 26121
// begin for j = 1 to mc_build_list [ i ] do
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: DOUBLE
26024: LD_INT 1
26026: DEC
26027: ST_TO_ADDR
26028: LD_EXP 54
26032: PUSH
26033: LD_VAR 0 2
26037: ARRAY
26038: PUSH
26039: FOR_TO
26040: IFFALSE 26119
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
26042: LD_EXP 54
26046: PUSH
26047: LD_VAR 0 2
26051: ARRAY
26052: PUSH
26053: LD_VAR 0 3
26057: ARRAY
26058: PUSH
26059: LD_INT 1
26061: ARRAY
26062: PUSH
26063: LD_INT 2
26065: EQUAL
26066: IFFALSE 26117
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
26068: LD_ADDR_EXP 54
26072: PUSH
26073: LD_EXP 54
26077: PPUSH
26078: LD_VAR 0 2
26082: PPUSH
26083: LD_EXP 54
26087: PUSH
26088: LD_VAR 0 2
26092: ARRAY
26093: PPUSH
26094: LD_VAR 0 3
26098: PPUSH
26099: LD_INT 1
26101: PPUSH
26102: LD_INT 0
26104: PPUSH
26105: CALL 51066 0 4
26109: PPUSH
26110: CALL_OW 1
26114: ST_TO_ADDR
// break ;
26115: GO 26119
// end ;
26117: GO 26039
26119: POP
26120: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
26121: LD_EXP 54
26125: PUSH
26126: LD_VAR 0 2
26130: ARRAY
26131: PUSH
26132: LD_INT 1
26134: ARRAY
26135: PUSH
26136: LD_INT 1
26138: ARRAY
26139: PUSH
26140: LD_INT 0
26142: EQUAL
26143: PUSH
26144: LD_VAR 0 5
26148: PUSH
26149: LD_VAR 0 5
26153: PPUSH
26154: LD_EXP 54
26158: PUSH
26159: LD_VAR 0 2
26163: ARRAY
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: PUSH
26169: LD_INT 1
26171: ARRAY
26172: PPUSH
26173: LD_EXP 54
26177: PUSH
26178: LD_VAR 0 2
26182: ARRAY
26183: PUSH
26184: LD_INT 1
26186: ARRAY
26187: PUSH
26188: LD_INT 2
26190: ARRAY
26191: PPUSH
26192: LD_EXP 54
26196: PUSH
26197: LD_VAR 0 2
26201: ARRAY
26202: PUSH
26203: LD_INT 1
26205: ARRAY
26206: PUSH
26207: LD_INT 3
26209: ARRAY
26210: PPUSH
26211: LD_EXP 54
26215: PUSH
26216: LD_VAR 0 2
26220: ARRAY
26221: PUSH
26222: LD_INT 1
26224: ARRAY
26225: PUSH
26226: LD_INT 4
26228: ARRAY
26229: PPUSH
26230: CALL 59045 0 5
26234: AND
26235: OR
26236: IFFALSE 26517
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
26238: LD_ADDR_VAR 0 4
26242: PUSH
26243: LD_EXP 49
26247: PUSH
26248: LD_VAR 0 2
26252: ARRAY
26253: PPUSH
26254: LD_INT 25
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 72
26268: PUSH
26269: LD_EXP 51
26273: PUSH
26274: LD_VAR 0 2
26278: ARRAY
26279: DIFF
26280: ST_TO_ADDR
// if not tmp then
26281: LD_VAR 0 4
26285: NOT
26286: IFFALSE 26290
// continue ;
26288: GO 25535
// for j in tmp do
26290: LD_ADDR_VAR 0 3
26294: PUSH
26295: LD_VAR 0 4
26299: PUSH
26300: FOR_IN
26301: IFFALSE 26513
// begin if not mc_builders [ i ] then
26303: LD_EXP 55
26307: PUSH
26308: LD_VAR 0 2
26312: ARRAY
26313: NOT
26314: IFFALSE 26372
// begin SetTag ( j , 103 ) ;
26316: LD_VAR 0 3
26320: PPUSH
26321: LD_INT 103
26323: PPUSH
26324: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
26328: LD_ADDR_EXP 55
26332: PUSH
26333: LD_EXP 55
26337: PPUSH
26338: LD_VAR 0 2
26342: PUSH
26343: LD_EXP 55
26347: PUSH
26348: LD_VAR 0 2
26352: ARRAY
26353: PUSH
26354: LD_INT 1
26356: PLUS
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PPUSH
26362: LD_VAR 0 3
26366: PPUSH
26367: CALL 51648 0 3
26371: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
26372: LD_VAR 0 3
26376: PPUSH
26377: CALL_OW 310
26381: IFFALSE 26392
// ComExitBuilding ( j ) ;
26383: LD_VAR 0 3
26387: PPUSH
26388: CALL_OW 122
// wait ( 3 ) ;
26392: LD_INT 3
26394: PPUSH
26395: CALL_OW 67
// if not mc_build_list [ i ] then
26399: LD_EXP 54
26403: PUSH
26404: LD_VAR 0 2
26408: ARRAY
26409: NOT
26410: IFFALSE 26414
// break ;
26412: GO 26513
// if not HasTask ( j ) then
26414: LD_VAR 0 3
26418: PPUSH
26419: CALL_OW 314
26423: NOT
26424: IFFALSE 26511
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
26426: LD_VAR 0 3
26430: PPUSH
26431: LD_EXP 54
26435: PUSH
26436: LD_VAR 0 2
26440: ARRAY
26441: PUSH
26442: LD_INT 1
26444: ARRAY
26445: PUSH
26446: LD_INT 1
26448: ARRAY
26449: PPUSH
26450: LD_EXP 54
26454: PUSH
26455: LD_VAR 0 2
26459: ARRAY
26460: PUSH
26461: LD_INT 1
26463: ARRAY
26464: PUSH
26465: LD_INT 2
26467: ARRAY
26468: PPUSH
26469: LD_EXP 54
26473: PUSH
26474: LD_VAR 0 2
26478: ARRAY
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: PUSH
26484: LD_INT 3
26486: ARRAY
26487: PPUSH
26488: LD_EXP 54
26492: PUSH
26493: LD_VAR 0 2
26497: ARRAY
26498: PUSH
26499: LD_INT 1
26501: ARRAY
26502: PUSH
26503: LD_INT 4
26505: ARRAY
26506: PPUSH
26507: CALL_OW 145
// end ;
26511: GO 26300
26513: POP
26514: POP
// end else
26515: GO 26659
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
26517: LD_EXP 49
26521: PUSH
26522: LD_VAR 0 2
26526: ARRAY
26527: PPUSH
26528: LD_EXP 54
26532: PUSH
26533: LD_VAR 0 2
26537: ARRAY
26538: PUSH
26539: LD_INT 1
26541: ARRAY
26542: PUSH
26543: LD_INT 1
26545: ARRAY
26546: PPUSH
26547: LD_EXP 54
26551: PUSH
26552: LD_VAR 0 2
26556: ARRAY
26557: PUSH
26558: LD_INT 1
26560: ARRAY
26561: PUSH
26562: LD_INT 2
26564: ARRAY
26565: PPUSH
26566: LD_EXP 54
26570: PUSH
26571: LD_VAR 0 2
26575: ARRAY
26576: PUSH
26577: LD_INT 1
26579: ARRAY
26580: PUSH
26581: LD_INT 3
26583: ARRAY
26584: PPUSH
26585: LD_EXP 54
26589: PUSH
26590: LD_VAR 0 2
26594: ARRAY
26595: PUSH
26596: LD_INT 1
26598: ARRAY
26599: PUSH
26600: LD_INT 4
26602: ARRAY
26603: PPUSH
26604: CALL 58399 0 5
26608: NOT
26609: IFFALSE 26659
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
26611: LD_ADDR_EXP 54
26615: PUSH
26616: LD_EXP 54
26620: PPUSH
26621: LD_VAR 0 2
26625: PPUSH
26626: LD_EXP 54
26630: PUSH
26631: LD_VAR 0 2
26635: ARRAY
26636: PPUSH
26637: LD_INT 1
26639: PPUSH
26640: LD_INT 1
26642: NEG
26643: PPUSH
26644: LD_INT 0
26646: PPUSH
26647: CALL 51066 0 4
26651: PPUSH
26652: CALL_OW 1
26656: ST_TO_ADDR
// continue ;
26657: GO 25535
// end ; end ; end ;
26659: GO 25535
26661: POP
26662: POP
// end ;
26663: LD_VAR 0 1
26667: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
26668: LD_INT 0
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
// if not mc_bases then
26676: LD_EXP 49
26680: NOT
26681: IFFALSE 26685
// exit ;
26683: GO 27112
// for i = 1 to mc_bases do
26685: LD_ADDR_VAR 0 2
26689: PUSH
26690: DOUBLE
26691: LD_INT 1
26693: DEC
26694: ST_TO_ADDR
26695: LD_EXP 49
26699: PUSH
26700: FOR_TO
26701: IFFALSE 27110
// begin tmp := mc_build_upgrade [ i ] ;
26703: LD_ADDR_VAR 0 4
26707: PUSH
26708: LD_EXP 81
26712: PUSH
26713: LD_VAR 0 2
26717: ARRAY
26718: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
26719: LD_ADDR_VAR 0 6
26723: PUSH
26724: LD_EXP 82
26728: PUSH
26729: LD_VAR 0 2
26733: ARRAY
26734: PPUSH
26735: LD_INT 2
26737: PUSH
26738: LD_INT 30
26740: PUSH
26741: LD_INT 6
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 30
26750: PUSH
26751: LD_INT 7
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: PPUSH
26763: CALL_OW 72
26767: ST_TO_ADDR
// if not tmp and not lab then
26768: LD_VAR 0 4
26772: NOT
26773: PUSH
26774: LD_VAR 0 6
26778: NOT
26779: AND
26780: IFFALSE 26784
// continue ;
26782: GO 26700
// if tmp then
26784: LD_VAR 0 4
26788: IFFALSE 26908
// for j in tmp do
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_VAR 0 4
26799: PUSH
26800: FOR_IN
26801: IFFALSE 26906
// begin if UpgradeCost ( j ) then
26803: LD_VAR 0 3
26807: PPUSH
26808: CALL 58059 0 1
26812: IFFALSE 26904
// begin ComUpgrade ( j ) ;
26814: LD_VAR 0 3
26818: PPUSH
26819: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
26823: LD_ADDR_EXP 81
26827: PUSH
26828: LD_EXP 81
26832: PPUSH
26833: LD_VAR 0 2
26837: PPUSH
26838: LD_EXP 81
26842: PUSH
26843: LD_VAR 0 2
26847: ARRAY
26848: PUSH
26849: LD_VAR 0 3
26853: DIFF
26854: PPUSH
26855: CALL_OW 1
26859: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26860: LD_ADDR_EXP 56
26864: PUSH
26865: LD_EXP 56
26869: PPUSH
26870: LD_VAR 0 2
26874: PUSH
26875: LD_EXP 56
26879: PUSH
26880: LD_VAR 0 2
26884: ARRAY
26885: PUSH
26886: LD_INT 1
26888: PLUS
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PPUSH
26894: LD_VAR 0 3
26898: PPUSH
26899: CALL 51648 0 3
26903: ST_TO_ADDR
// end ; end ;
26904: GO 26800
26906: POP
26907: POP
// if not lab or not mc_lab_upgrade [ i ] then
26908: LD_VAR 0 6
26912: NOT
26913: PUSH
26914: LD_EXP 83
26918: PUSH
26919: LD_VAR 0 2
26923: ARRAY
26924: NOT
26925: OR
26926: IFFALSE 26930
// continue ;
26928: GO 26700
// for j in lab do
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: LD_VAR 0 6
26939: PUSH
26940: FOR_IN
26941: IFFALSE 27106
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
26943: LD_VAR 0 3
26947: PPUSH
26948: CALL_OW 266
26952: PUSH
26953: LD_INT 6
26955: PUSH
26956: LD_INT 7
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: IN
26963: PUSH
26964: LD_VAR 0 3
26968: PPUSH
26969: CALL_OW 461
26973: PUSH
26974: LD_INT 1
26976: NONEQUAL
26977: AND
26978: IFFALSE 27104
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
26980: LD_VAR 0 3
26984: PPUSH
26985: LD_EXP 83
26989: PUSH
26990: LD_VAR 0 2
26994: ARRAY
26995: PUSH
26996: LD_INT 1
26998: ARRAY
26999: PPUSH
27000: CALL 58264 0 2
27004: IFFALSE 27104
// begin ComCancel ( j ) ;
27006: LD_VAR 0 3
27010: PPUSH
27011: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
27015: LD_VAR 0 3
27019: PPUSH
27020: LD_EXP 83
27024: PUSH
27025: LD_VAR 0 2
27029: ARRAY
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PPUSH
27035: CALL_OW 207
// if not j in mc_construct_list [ i ] then
27039: LD_VAR 0 3
27043: PUSH
27044: LD_EXP 56
27048: PUSH
27049: LD_VAR 0 2
27053: ARRAY
27054: IN
27055: NOT
27056: IFFALSE 27102
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
27058: LD_ADDR_EXP 56
27062: PUSH
27063: LD_EXP 56
27067: PPUSH
27068: LD_VAR 0 2
27072: PUSH
27073: LD_EXP 56
27077: PUSH
27078: LD_VAR 0 2
27082: ARRAY
27083: PUSH
27084: LD_INT 1
27086: PLUS
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PPUSH
27092: LD_VAR 0 3
27096: PPUSH
27097: CALL 51648 0 3
27101: ST_TO_ADDR
// break ;
27102: GO 27106
// end ; end ; end ;
27104: GO 26940
27106: POP
27107: POP
// end ;
27108: GO 26700
27110: POP
27111: POP
// end ;
27112: LD_VAR 0 1
27116: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
27121: PPUSH
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
27126: PPUSH
27127: PPUSH
// if not mc_bases then
27128: LD_EXP 49
27132: NOT
27133: IFFALSE 27137
// exit ;
27135: GO 27542
// for i = 1 to mc_bases do
27137: LD_ADDR_VAR 0 2
27141: PUSH
27142: DOUBLE
27143: LD_INT 1
27145: DEC
27146: ST_TO_ADDR
27147: LD_EXP 49
27151: PUSH
27152: FOR_TO
27153: IFFALSE 27540
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
27155: LD_EXP 57
27159: PUSH
27160: LD_VAR 0 2
27164: ARRAY
27165: NOT
27166: PUSH
27167: LD_EXP 49
27171: PUSH
27172: LD_VAR 0 2
27176: ARRAY
27177: PPUSH
27178: LD_INT 30
27180: PUSH
27181: LD_INT 3
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PPUSH
27188: CALL_OW 72
27192: NOT
27193: OR
27194: IFFALSE 27198
// continue ;
27196: GO 27152
// busy := false ;
27198: LD_ADDR_VAR 0 8
27202: PUSH
27203: LD_INT 0
27205: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27206: LD_ADDR_VAR 0 4
27210: PUSH
27211: LD_EXP 49
27215: PUSH
27216: LD_VAR 0 2
27220: ARRAY
27221: PPUSH
27222: LD_INT 30
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PPUSH
27232: CALL_OW 72
27236: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
27237: LD_ADDR_VAR 0 6
27241: PUSH
27242: LD_EXP 57
27246: PUSH
27247: LD_VAR 0 2
27251: ARRAY
27252: PPUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 30
27258: PUSH
27259: LD_INT 32
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 30
27268: PUSH
27269: LD_INT 33
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: PPUSH
27281: CALL_OW 72
27285: ST_TO_ADDR
// if not t then
27286: LD_VAR 0 6
27290: NOT
27291: IFFALSE 27295
// continue ;
27293: GO 27152
// for j in tmp do
27295: LD_ADDR_VAR 0 3
27299: PUSH
27300: LD_VAR 0 4
27304: PUSH
27305: FOR_IN
27306: IFFALSE 27336
// if not BuildingStatus ( j ) = bs_idle then
27308: LD_VAR 0 3
27312: PPUSH
27313: CALL_OW 461
27317: PUSH
27318: LD_INT 2
27320: EQUAL
27321: NOT
27322: IFFALSE 27334
// begin busy := true ;
27324: LD_ADDR_VAR 0 8
27328: PUSH
27329: LD_INT 1
27331: ST_TO_ADDR
// break ;
27332: GO 27336
// end ;
27334: GO 27305
27336: POP
27337: POP
// if busy then
27338: LD_VAR 0 8
27342: IFFALSE 27346
// continue ;
27344: GO 27152
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
27346: LD_ADDR_VAR 0 7
27350: PUSH
27351: LD_VAR 0 6
27355: PPUSH
27356: LD_INT 35
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 72
27370: ST_TO_ADDR
// if tw then
27371: LD_VAR 0 7
27375: IFFALSE 27452
// begin tw := tw [ 1 ] ;
27377: LD_ADDR_VAR 0 7
27381: PUSH
27382: LD_VAR 0 7
27386: PUSH
27387: LD_INT 1
27389: ARRAY
27390: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
27391: LD_ADDR_VAR 0 9
27395: PUSH
27396: LD_VAR 0 7
27400: PPUSH
27401: LD_EXP 74
27405: PUSH
27406: LD_VAR 0 2
27410: ARRAY
27411: PPUSH
27412: CALL 56618 0 2
27416: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
27417: LD_EXP 88
27421: PUSH
27422: LD_VAR 0 2
27426: ARRAY
27427: IFFALSE 27450
// if not weapon in mc_allowed_tower_weapons [ i ] then
27429: LD_VAR 0 9
27433: PUSH
27434: LD_EXP 88
27438: PUSH
27439: LD_VAR 0 2
27443: ARRAY
27444: IN
27445: NOT
27446: IFFALSE 27450
// continue ;
27448: GO 27152
// end else
27450: GO 27515
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
27452: LD_ADDR_VAR 0 5
27456: PUSH
27457: LD_EXP 57
27461: PUSH
27462: LD_VAR 0 2
27466: ARRAY
27467: PPUSH
27468: LD_VAR 0 4
27472: PPUSH
27473: CALL 86757 0 2
27477: ST_TO_ADDR
// if not tmp2 then
27478: LD_VAR 0 5
27482: NOT
27483: IFFALSE 27487
// continue ;
27485: GO 27152
// tw := tmp2 [ 1 ] ;
27487: LD_ADDR_VAR 0 7
27491: PUSH
27492: LD_VAR 0 5
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
27501: LD_ADDR_VAR 0 9
27505: PUSH
27506: LD_VAR 0 5
27510: PUSH
27511: LD_INT 2
27513: ARRAY
27514: ST_TO_ADDR
// end ; if not weapon then
27515: LD_VAR 0 9
27519: NOT
27520: IFFALSE 27524
// continue ;
27522: GO 27152
// ComPlaceWeapon ( tw , weapon ) ;
27524: LD_VAR 0 7
27528: PPUSH
27529: LD_VAR 0 9
27533: PPUSH
27534: CALL_OW 148
// end ;
27538: GO 27152
27540: POP
27541: POP
// end ;
27542: LD_VAR 0 1
27546: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
27547: LD_INT 0
27549: PPUSH
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
// if not mc_bases then
27555: LD_EXP 49
27559: NOT
27560: IFFALSE 27564
// exit ;
27562: GO 28576
// for i = 1 to mc_bases do
27564: LD_ADDR_VAR 0 2
27568: PUSH
27569: DOUBLE
27570: LD_INT 1
27572: DEC
27573: ST_TO_ADDR
27574: LD_EXP 49
27578: PUSH
27579: FOR_TO
27580: IFFALSE 28574
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
27582: LD_EXP 62
27586: PUSH
27587: LD_VAR 0 2
27591: ARRAY
27592: NOT
27593: PUSH
27594: LD_EXP 62
27598: PUSH
27599: LD_VAR 0 2
27603: ARRAY
27604: PUSH
27605: LD_EXP 63
27609: PUSH
27610: LD_VAR 0 2
27614: ARRAY
27615: EQUAL
27616: OR
27617: IFFALSE 27621
// continue ;
27619: GO 27579
// if mc_miners [ i ] then
27621: LD_EXP 63
27625: PUSH
27626: LD_VAR 0 2
27630: ARRAY
27631: IFFALSE 28261
// begin k := 1 ;
27633: LD_ADDR_VAR 0 4
27637: PUSH
27638: LD_INT 1
27640: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
27641: LD_ADDR_VAR 0 3
27645: PUSH
27646: DOUBLE
27647: LD_EXP 63
27651: PUSH
27652: LD_VAR 0 2
27656: ARRAY
27657: INC
27658: ST_TO_ADDR
27659: LD_INT 1
27661: PUSH
27662: FOR_DOWNTO
27663: IFFALSE 28259
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
27665: LD_EXP 63
27669: PUSH
27670: LD_VAR 0 2
27674: ARRAY
27675: PUSH
27676: LD_VAR 0 3
27680: ARRAY
27681: PPUSH
27682: CALL_OW 301
27686: PUSH
27687: LD_EXP 63
27691: PUSH
27692: LD_VAR 0 2
27696: ARRAY
27697: PUSH
27698: LD_VAR 0 3
27702: ARRAY
27703: PPUSH
27704: CALL_OW 257
27708: PUSH
27709: LD_INT 1
27711: NONEQUAL
27712: OR
27713: IFFALSE 27776
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
27715: LD_ADDR_VAR 0 5
27719: PUSH
27720: LD_EXP 63
27724: PUSH
27725: LD_VAR 0 2
27729: ARRAY
27730: PUSH
27731: LD_EXP 63
27735: PUSH
27736: LD_VAR 0 2
27740: ARRAY
27741: PUSH
27742: LD_VAR 0 3
27746: ARRAY
27747: DIFF
27748: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
27749: LD_ADDR_EXP 63
27753: PUSH
27754: LD_EXP 63
27758: PPUSH
27759: LD_VAR 0 2
27763: PPUSH
27764: LD_VAR 0 5
27768: PPUSH
27769: CALL_OW 1
27773: ST_TO_ADDR
// continue ;
27774: GO 27662
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
27776: LD_EXP 63
27780: PUSH
27781: LD_VAR 0 2
27785: ARRAY
27786: PUSH
27787: LD_VAR 0 3
27791: ARRAY
27792: PPUSH
27793: CALL 51584 0 1
27797: PUSH
27798: LD_EXP 63
27802: PUSH
27803: LD_VAR 0 2
27807: ARRAY
27808: PUSH
27809: LD_VAR 0 3
27813: ARRAY
27814: PPUSH
27815: CALL_OW 255
27819: PPUSH
27820: LD_EXP 62
27824: PUSH
27825: LD_VAR 0 2
27829: ARRAY
27830: PUSH
27831: LD_VAR 0 4
27835: ARRAY
27836: PUSH
27837: LD_INT 1
27839: ARRAY
27840: PPUSH
27841: LD_EXP 62
27845: PUSH
27846: LD_VAR 0 2
27850: ARRAY
27851: PUSH
27852: LD_VAR 0 4
27856: ARRAY
27857: PUSH
27858: LD_INT 2
27860: ARRAY
27861: PPUSH
27862: LD_INT 15
27864: PPUSH
27865: CALL 52544 0 4
27869: PUSH
27870: LD_INT 4
27872: ARRAY
27873: PUSH
27874: LD_EXP 63
27878: PUSH
27879: LD_VAR 0 2
27883: ARRAY
27884: PUSH
27885: LD_VAR 0 3
27889: ARRAY
27890: PPUSH
27891: LD_INT 10
27893: PPUSH
27894: CALL 54241 0 2
27898: PUSH
27899: LD_INT 4
27901: ARRAY
27902: OR
27903: AND
27904: IFFALSE 27927
// ComStop ( mc_miners [ i ] [ j ] ) ;
27906: LD_EXP 63
27910: PUSH
27911: LD_VAR 0 2
27915: ARRAY
27916: PUSH
27917: LD_VAR 0 3
27921: ARRAY
27922: PPUSH
27923: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
27927: LD_EXP 63
27931: PUSH
27932: LD_VAR 0 2
27936: ARRAY
27937: PUSH
27938: LD_VAR 0 3
27942: ARRAY
27943: PPUSH
27944: CALL_OW 257
27948: PUSH
27949: LD_INT 1
27951: EQUAL
27952: PUSH
27953: LD_EXP 63
27957: PUSH
27958: LD_VAR 0 2
27962: ARRAY
27963: PUSH
27964: LD_VAR 0 3
27968: ARRAY
27969: PPUSH
27970: CALL_OW 459
27974: NOT
27975: AND
27976: PUSH
27977: LD_EXP 63
27981: PUSH
27982: LD_VAR 0 2
27986: ARRAY
27987: PUSH
27988: LD_VAR 0 3
27992: ARRAY
27993: PPUSH
27994: CALL_OW 255
27998: PPUSH
27999: LD_EXP 62
28003: PUSH
28004: LD_VAR 0 2
28008: ARRAY
28009: PUSH
28010: LD_VAR 0 4
28014: ARRAY
28015: PUSH
28016: LD_INT 1
28018: ARRAY
28019: PPUSH
28020: LD_EXP 62
28024: PUSH
28025: LD_VAR 0 2
28029: ARRAY
28030: PUSH
28031: LD_VAR 0 4
28035: ARRAY
28036: PUSH
28037: LD_INT 2
28039: ARRAY
28040: PPUSH
28041: LD_INT 15
28043: PPUSH
28044: CALL 52544 0 4
28048: PUSH
28049: LD_INT 4
28051: ARRAY
28052: PUSH
28053: LD_INT 0
28055: EQUAL
28056: AND
28057: PUSH
28058: LD_EXP 63
28062: PUSH
28063: LD_VAR 0 2
28067: ARRAY
28068: PUSH
28069: LD_VAR 0 3
28073: ARRAY
28074: PPUSH
28075: CALL_OW 314
28079: NOT
28080: AND
28081: IFFALSE 28257
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
28083: LD_EXP 63
28087: PUSH
28088: LD_VAR 0 2
28092: ARRAY
28093: PUSH
28094: LD_VAR 0 3
28098: ARRAY
28099: PPUSH
28100: CALL_OW 310
28104: IFFALSE 28127
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
28106: LD_EXP 63
28110: PUSH
28111: LD_VAR 0 2
28115: ARRAY
28116: PUSH
28117: LD_VAR 0 3
28121: ARRAY
28122: PPUSH
28123: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
28127: LD_EXP 63
28131: PUSH
28132: LD_VAR 0 2
28136: ARRAY
28137: PUSH
28138: LD_VAR 0 3
28142: ARRAY
28143: PPUSH
28144: CALL_OW 314
28148: NOT
28149: IFFALSE 28217
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
28151: LD_EXP 63
28155: PUSH
28156: LD_VAR 0 2
28160: ARRAY
28161: PUSH
28162: LD_VAR 0 3
28166: ARRAY
28167: PPUSH
28168: LD_EXP 62
28172: PUSH
28173: LD_VAR 0 2
28177: ARRAY
28178: PUSH
28179: LD_VAR 0 4
28183: ARRAY
28184: PUSH
28185: LD_INT 1
28187: ARRAY
28188: PPUSH
28189: LD_EXP 62
28193: PUSH
28194: LD_VAR 0 2
28198: ARRAY
28199: PUSH
28200: LD_VAR 0 4
28204: ARRAY
28205: PUSH
28206: LD_INT 2
28208: ARRAY
28209: PPUSH
28210: LD_INT 0
28212: PPUSH
28213: CALL_OW 193
// k := k + 1 ;
28217: LD_ADDR_VAR 0 4
28221: PUSH
28222: LD_VAR 0 4
28226: PUSH
28227: LD_INT 1
28229: PLUS
28230: ST_TO_ADDR
// if k > mc_mines [ i ] then
28231: LD_VAR 0 4
28235: PUSH
28236: LD_EXP 62
28240: PUSH
28241: LD_VAR 0 2
28245: ARRAY
28246: GREATER
28247: IFFALSE 28257
// k := 1 ;
28249: LD_ADDR_VAR 0 4
28253: PUSH
28254: LD_INT 1
28256: ST_TO_ADDR
// end ; end ;
28257: GO 27662
28259: POP
28260: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
28261: LD_ADDR_VAR 0 5
28265: PUSH
28266: LD_EXP 49
28270: PUSH
28271: LD_VAR 0 2
28275: ARRAY
28276: PPUSH
28277: LD_INT 2
28279: PUSH
28280: LD_INT 30
28282: PUSH
28283: LD_INT 4
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 30
28292: PUSH
28293: LD_INT 5
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 30
28302: PUSH
28303: LD_INT 32
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 72
28320: ST_TO_ADDR
// if not tmp then
28321: LD_VAR 0 5
28325: NOT
28326: IFFALSE 28330
// continue ;
28328: GO 27579
// list := [ ] ;
28330: LD_ADDR_VAR 0 6
28334: PUSH
28335: EMPTY
28336: ST_TO_ADDR
// for j in tmp do
28337: LD_ADDR_VAR 0 3
28341: PUSH
28342: LD_VAR 0 5
28346: PUSH
28347: FOR_IN
28348: IFFALSE 28417
// begin for k in UnitsInside ( j ) do
28350: LD_ADDR_VAR 0 4
28354: PUSH
28355: LD_VAR 0 3
28359: PPUSH
28360: CALL_OW 313
28364: PUSH
28365: FOR_IN
28366: IFFALSE 28413
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
28368: LD_VAR 0 4
28372: PPUSH
28373: CALL_OW 257
28377: PUSH
28378: LD_INT 1
28380: EQUAL
28381: PUSH
28382: LD_VAR 0 4
28386: PPUSH
28387: CALL_OW 459
28391: NOT
28392: AND
28393: IFFALSE 28411
// list := list ^ k ;
28395: LD_ADDR_VAR 0 6
28399: PUSH
28400: LD_VAR 0 6
28404: PUSH
28405: LD_VAR 0 4
28409: ADD
28410: ST_TO_ADDR
28411: GO 28365
28413: POP
28414: POP
// end ;
28415: GO 28347
28417: POP
28418: POP
// list := list diff mc_miners [ i ] ;
28419: LD_ADDR_VAR 0 6
28423: PUSH
28424: LD_VAR 0 6
28428: PUSH
28429: LD_EXP 63
28433: PUSH
28434: LD_VAR 0 2
28438: ARRAY
28439: DIFF
28440: ST_TO_ADDR
// if not list then
28441: LD_VAR 0 6
28445: NOT
28446: IFFALSE 28450
// continue ;
28448: GO 27579
// k := mc_mines [ i ] - mc_miners [ i ] ;
28450: LD_ADDR_VAR 0 4
28454: PUSH
28455: LD_EXP 62
28459: PUSH
28460: LD_VAR 0 2
28464: ARRAY
28465: PUSH
28466: LD_EXP 63
28470: PUSH
28471: LD_VAR 0 2
28475: ARRAY
28476: MINUS
28477: ST_TO_ADDR
// if k > list then
28478: LD_VAR 0 4
28482: PUSH
28483: LD_VAR 0 6
28487: GREATER
28488: IFFALSE 28500
// k := list ;
28490: LD_ADDR_VAR 0 4
28494: PUSH
28495: LD_VAR 0 6
28499: ST_TO_ADDR
// for j = 1 to k do
28500: LD_ADDR_VAR 0 3
28504: PUSH
28505: DOUBLE
28506: LD_INT 1
28508: DEC
28509: ST_TO_ADDR
28510: LD_VAR 0 4
28514: PUSH
28515: FOR_TO
28516: IFFALSE 28570
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
28518: LD_ADDR_EXP 63
28522: PUSH
28523: LD_EXP 63
28527: PPUSH
28528: LD_VAR 0 2
28532: PUSH
28533: LD_EXP 63
28537: PUSH
28538: LD_VAR 0 2
28542: ARRAY
28543: PUSH
28544: LD_INT 1
28546: PLUS
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PPUSH
28552: LD_VAR 0 6
28556: PUSH
28557: LD_VAR 0 3
28561: ARRAY
28562: PPUSH
28563: CALL 51648 0 3
28567: ST_TO_ADDR
28568: GO 28515
28570: POP
28571: POP
// end ;
28572: GO 27579
28574: POP
28575: POP
// end ;
28576: LD_VAR 0 1
28580: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
28581: LD_INT 0
28583: PPUSH
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
28591: PPUSH
28592: PPUSH
// if not mc_bases then
28593: LD_EXP 49
28597: NOT
28598: IFFALSE 28602
// exit ;
28600: GO 30333
// for i = 1 to mc_bases do
28602: LD_ADDR_VAR 0 2
28606: PUSH
28607: DOUBLE
28608: LD_INT 1
28610: DEC
28611: ST_TO_ADDR
28612: LD_EXP 49
28616: PUSH
28617: FOR_TO
28618: IFFALSE 30331
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
28620: LD_EXP 49
28624: PUSH
28625: LD_VAR 0 2
28629: ARRAY
28630: NOT
28631: PUSH
28632: LD_EXP 56
28636: PUSH
28637: LD_VAR 0 2
28641: ARRAY
28642: OR
28643: IFFALSE 28647
// continue ;
28645: GO 28617
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
28647: LD_EXP 65
28651: PUSH
28652: LD_VAR 0 2
28656: ARRAY
28657: NOT
28658: PUSH
28659: LD_EXP 66
28663: PUSH
28664: LD_VAR 0 2
28668: ARRAY
28669: AND
28670: IFFALSE 28708
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
28672: LD_ADDR_EXP 66
28676: PUSH
28677: LD_EXP 66
28681: PPUSH
28682: LD_VAR 0 2
28686: PPUSH
28687: EMPTY
28688: PPUSH
28689: CALL_OW 1
28693: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
28694: LD_VAR 0 2
28698: PPUSH
28699: LD_INT 107
28701: PPUSH
28702: CALL 19797 0 2
// continue ;
28706: GO 28617
// end ; target := [ ] ;
28708: LD_ADDR_VAR 0 6
28712: PUSH
28713: EMPTY
28714: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
28715: LD_ADDR_VAR 0 3
28719: PUSH
28720: DOUBLE
28721: LD_EXP 65
28725: PUSH
28726: LD_VAR 0 2
28730: ARRAY
28731: INC
28732: ST_TO_ADDR
28733: LD_INT 1
28735: PUSH
28736: FOR_DOWNTO
28737: IFFALSE 28997
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
28739: LD_EXP 65
28743: PUSH
28744: LD_VAR 0 2
28748: ARRAY
28749: PUSH
28750: LD_VAR 0 3
28754: ARRAY
28755: PUSH
28756: LD_INT 2
28758: ARRAY
28759: PPUSH
28760: LD_EXP 65
28764: PUSH
28765: LD_VAR 0 2
28769: ARRAY
28770: PUSH
28771: LD_VAR 0 3
28775: ARRAY
28776: PUSH
28777: LD_INT 3
28779: ARRAY
28780: PPUSH
28781: CALL_OW 488
28785: PUSH
28786: LD_EXP 65
28790: PUSH
28791: LD_VAR 0 2
28795: ARRAY
28796: PUSH
28797: LD_VAR 0 3
28801: ARRAY
28802: PUSH
28803: LD_INT 2
28805: ARRAY
28806: PPUSH
28807: LD_EXP 65
28811: PUSH
28812: LD_VAR 0 2
28816: ARRAY
28817: PUSH
28818: LD_VAR 0 3
28822: ARRAY
28823: PUSH
28824: LD_INT 3
28826: ARRAY
28827: PPUSH
28828: CALL_OW 284
28832: PUSH
28833: LD_INT 0
28835: EQUAL
28836: AND
28837: IFFALSE 28892
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
28839: LD_ADDR_VAR 0 5
28843: PUSH
28844: LD_EXP 65
28848: PUSH
28849: LD_VAR 0 2
28853: ARRAY
28854: PPUSH
28855: LD_VAR 0 3
28859: PPUSH
28860: CALL_OW 3
28864: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
28865: LD_ADDR_EXP 65
28869: PUSH
28870: LD_EXP 65
28874: PPUSH
28875: LD_VAR 0 2
28879: PPUSH
28880: LD_VAR 0 5
28884: PPUSH
28885: CALL_OW 1
28889: ST_TO_ADDR
// continue ;
28890: GO 28736
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
28892: LD_EXP 49
28896: PUSH
28897: LD_VAR 0 2
28901: ARRAY
28902: PUSH
28903: LD_INT 1
28905: ARRAY
28906: PPUSH
28907: CALL_OW 255
28911: PPUSH
28912: LD_EXP 65
28916: PUSH
28917: LD_VAR 0 2
28921: ARRAY
28922: PUSH
28923: LD_VAR 0 3
28927: ARRAY
28928: PUSH
28929: LD_INT 2
28931: ARRAY
28932: PPUSH
28933: LD_EXP 65
28937: PUSH
28938: LD_VAR 0 2
28942: ARRAY
28943: PUSH
28944: LD_VAR 0 3
28948: ARRAY
28949: PUSH
28950: LD_INT 3
28952: ARRAY
28953: PPUSH
28954: LD_INT 30
28956: PPUSH
28957: CALL 52544 0 4
28961: PUSH
28962: LD_INT 4
28964: ARRAY
28965: PUSH
28966: LD_INT 0
28968: EQUAL
28969: IFFALSE 28995
// begin target := mc_crates [ i ] [ j ] ;
28971: LD_ADDR_VAR 0 6
28975: PUSH
28976: LD_EXP 65
28980: PUSH
28981: LD_VAR 0 2
28985: ARRAY
28986: PUSH
28987: LD_VAR 0 3
28991: ARRAY
28992: ST_TO_ADDR
// break ;
28993: GO 28997
// end ; end ;
28995: GO 28736
28997: POP
28998: POP
// if not target then
28999: LD_VAR 0 6
29003: NOT
29004: IFFALSE 29008
// continue ;
29006: GO 28617
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
29008: LD_ADDR_VAR 0 7
29012: PUSH
29013: LD_EXP 68
29017: PUSH
29018: LD_VAR 0 2
29022: ARRAY
29023: PPUSH
29024: LD_INT 2
29026: PUSH
29027: LD_INT 3
29029: PUSH
29030: LD_INT 58
29032: PUSH
29033: EMPTY
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 61
29042: PUSH
29043: EMPTY
29044: LIST
29045: PUSH
29046: LD_INT 33
29048: PUSH
29049: LD_INT 5
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 33
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: LD_INT 34
29078: PUSH
29079: LD_INT 32
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 34
29088: PUSH
29089: LD_INT 51
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 34
29098: PUSH
29099: LD_INT 12
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PPUSH
29116: CALL_OW 72
29120: ST_TO_ADDR
// if not cargo then
29121: LD_VAR 0 7
29125: NOT
29126: IFFALSE 29769
// begin if mc_crates_collector [ i ] < 5 then
29128: LD_EXP 66
29132: PUSH
29133: LD_VAR 0 2
29137: ARRAY
29138: PUSH
29139: LD_INT 5
29141: LESS
29142: IFFALSE 29508
// begin if mc_ape [ i ] then
29144: LD_EXP 78
29148: PUSH
29149: LD_VAR 0 2
29153: ARRAY
29154: IFFALSE 29201
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
29156: LD_ADDR_VAR 0 5
29160: PUSH
29161: LD_EXP 78
29165: PUSH
29166: LD_VAR 0 2
29170: ARRAY
29171: PPUSH
29172: LD_INT 25
29174: PUSH
29175: LD_INT 16
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 24
29184: PUSH
29185: LD_INT 750
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PPUSH
29196: CALL_OW 72
29200: ST_TO_ADDR
// if not tmp then
29201: LD_VAR 0 5
29205: NOT
29206: IFFALSE 29253
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
29208: LD_ADDR_VAR 0 5
29212: PUSH
29213: LD_EXP 49
29217: PUSH
29218: LD_VAR 0 2
29222: ARRAY
29223: PPUSH
29224: LD_INT 25
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 24
29236: PUSH
29237: LD_INT 750
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 72
29252: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
29253: LD_EXP 78
29257: PUSH
29258: LD_VAR 0 2
29262: ARRAY
29263: PUSH
29264: LD_EXP 49
29268: PUSH
29269: LD_VAR 0 2
29273: ARRAY
29274: PPUSH
29275: LD_INT 25
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 24
29287: PUSH
29288: LD_INT 750
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PPUSH
29299: CALL_OW 72
29303: AND
29304: PUSH
29305: LD_VAR 0 5
29309: PUSH
29310: LD_INT 5
29312: LESS
29313: AND
29314: IFFALSE 29396
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: LD_EXP 49
29325: PUSH
29326: LD_VAR 0 2
29330: ARRAY
29331: PPUSH
29332: LD_INT 25
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 24
29344: PUSH
29345: LD_INT 750
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PPUSH
29356: CALL_OW 72
29360: PUSH
29361: FOR_IN
29362: IFFALSE 29394
// begin tmp := tmp union j ;
29364: LD_ADDR_VAR 0 5
29368: PUSH
29369: LD_VAR 0 5
29373: PUSH
29374: LD_VAR 0 3
29378: UNION
29379: ST_TO_ADDR
// if tmp >= 5 then
29380: LD_VAR 0 5
29384: PUSH
29385: LD_INT 5
29387: GREATEREQUAL
29388: IFFALSE 29392
// break ;
29390: GO 29394
// end ;
29392: GO 29361
29394: POP
29395: POP
// end ; if not tmp then
29396: LD_VAR 0 5
29400: NOT
29401: IFFALSE 29405
// continue ;
29403: GO 28617
// for j in tmp do
29405: LD_ADDR_VAR 0 3
29409: PUSH
29410: LD_VAR 0 5
29414: PUSH
29415: FOR_IN
29416: IFFALSE 29506
// if not GetTag ( j ) then
29418: LD_VAR 0 3
29422: PPUSH
29423: CALL_OW 110
29427: NOT
29428: IFFALSE 29504
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
29430: LD_ADDR_EXP 66
29434: PUSH
29435: LD_EXP 66
29439: PPUSH
29440: LD_VAR 0 2
29444: PUSH
29445: LD_EXP 66
29449: PUSH
29450: LD_VAR 0 2
29454: ARRAY
29455: PUSH
29456: LD_INT 1
29458: PLUS
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PPUSH
29464: LD_VAR 0 3
29468: PPUSH
29469: CALL 51648 0 3
29473: ST_TO_ADDR
// SetTag ( j , 107 ) ;
29474: LD_VAR 0 3
29478: PPUSH
29479: LD_INT 107
29481: PPUSH
29482: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
29486: LD_EXP 66
29490: PUSH
29491: LD_VAR 0 2
29495: ARRAY
29496: PUSH
29497: LD_INT 5
29499: GREATEREQUAL
29500: IFFALSE 29504
// break ;
29502: GO 29506
// end ;
29504: GO 29415
29506: POP
29507: POP
// end ; if mc_crates_collector [ i ] and target then
29508: LD_EXP 66
29512: PUSH
29513: LD_VAR 0 2
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 6
29523: AND
29524: IFFALSE 29767
// begin if mc_crates_collector [ i ] < target [ 1 ] then
29526: LD_EXP 66
29530: PUSH
29531: LD_VAR 0 2
29535: ARRAY
29536: PUSH
29537: LD_VAR 0 6
29541: PUSH
29542: LD_INT 1
29544: ARRAY
29545: LESS
29546: IFFALSE 29566
// tmp := mc_crates_collector [ i ] else
29548: LD_ADDR_VAR 0 5
29552: PUSH
29553: LD_EXP 66
29557: PUSH
29558: LD_VAR 0 2
29562: ARRAY
29563: ST_TO_ADDR
29564: GO 29580
// tmp := target [ 1 ] ;
29566: LD_ADDR_VAR 0 5
29570: PUSH
29571: LD_VAR 0 6
29575: PUSH
29576: LD_INT 1
29578: ARRAY
29579: ST_TO_ADDR
// k := 0 ;
29580: LD_ADDR_VAR 0 4
29584: PUSH
29585: LD_INT 0
29587: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
29588: LD_ADDR_VAR 0 3
29592: PUSH
29593: LD_EXP 66
29597: PUSH
29598: LD_VAR 0 2
29602: ARRAY
29603: PUSH
29604: FOR_IN
29605: IFFALSE 29765
// begin k := k + 1 ;
29607: LD_ADDR_VAR 0 4
29611: PUSH
29612: LD_VAR 0 4
29616: PUSH
29617: LD_INT 1
29619: PLUS
29620: ST_TO_ADDR
// if k > tmp then
29621: LD_VAR 0 4
29625: PUSH
29626: LD_VAR 0 5
29630: GREATER
29631: IFFALSE 29635
// break ;
29633: GO 29765
// if not GetClass ( j ) in [ 2 , 16 ] then
29635: LD_VAR 0 3
29639: PPUSH
29640: CALL_OW 257
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: LD_INT 16
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: IN
29655: NOT
29656: IFFALSE 29709
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
29658: LD_ADDR_EXP 66
29662: PUSH
29663: LD_EXP 66
29667: PPUSH
29668: LD_VAR 0 2
29672: PPUSH
29673: LD_EXP 66
29677: PUSH
29678: LD_VAR 0 2
29682: ARRAY
29683: PUSH
29684: LD_VAR 0 3
29688: DIFF
29689: PPUSH
29690: CALL_OW 1
29694: ST_TO_ADDR
// SetTag ( j , 0 ) ;
29695: LD_VAR 0 3
29699: PPUSH
29700: LD_INT 0
29702: PPUSH
29703: CALL_OW 109
// continue ;
29707: GO 29604
// end ; if IsInUnit ( j ) then
29709: LD_VAR 0 3
29713: PPUSH
29714: CALL_OW 310
29718: IFFALSE 29729
// ComExitBuilding ( j ) ;
29720: LD_VAR 0 3
29724: PPUSH
29725: CALL_OW 122
// wait ( 3 ) ;
29729: LD_INT 3
29731: PPUSH
29732: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29736: LD_VAR 0 3
29740: PPUSH
29741: LD_VAR 0 6
29745: PUSH
29746: LD_INT 2
29748: ARRAY
29749: PPUSH
29750: LD_VAR 0 6
29754: PUSH
29755: LD_INT 3
29757: ARRAY
29758: PPUSH
29759: CALL_OW 117
// end ;
29763: GO 29604
29765: POP
29766: POP
// end ; end else
29767: GO 30329
// begin for j in cargo do
29769: LD_ADDR_VAR 0 3
29773: PUSH
29774: LD_VAR 0 7
29778: PUSH
29779: FOR_IN
29780: IFFALSE 30327
// begin if GetTag ( j ) <> 0 then
29782: LD_VAR 0 3
29786: PPUSH
29787: CALL_OW 110
29791: PUSH
29792: LD_INT 0
29794: NONEQUAL
29795: IFFALSE 29799
// continue ;
29797: GO 29779
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
29799: LD_VAR 0 3
29803: PPUSH
29804: CALL_OW 256
29808: PUSH
29809: LD_INT 1000
29811: LESS
29812: PUSH
29813: LD_VAR 0 3
29817: PPUSH
29818: LD_EXP 73
29822: PUSH
29823: LD_VAR 0 2
29827: ARRAY
29828: PPUSH
29829: CALL_OW 308
29833: NOT
29834: AND
29835: IFFALSE 29857
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29837: LD_VAR 0 3
29841: PPUSH
29842: LD_EXP 73
29846: PUSH
29847: LD_VAR 0 2
29851: ARRAY
29852: PPUSH
29853: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
29857: LD_VAR 0 3
29861: PPUSH
29862: CALL_OW 256
29866: PUSH
29867: LD_INT 1000
29869: LESS
29870: PUSH
29871: LD_VAR 0 3
29875: PPUSH
29876: LD_EXP 73
29880: PUSH
29881: LD_VAR 0 2
29885: ARRAY
29886: PPUSH
29887: CALL_OW 308
29891: AND
29892: IFFALSE 29896
// continue ;
29894: GO 29779
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
29896: LD_VAR 0 3
29900: PPUSH
29901: CALL_OW 262
29905: PUSH
29906: LD_INT 2
29908: EQUAL
29909: PUSH
29910: LD_VAR 0 3
29914: PPUSH
29915: CALL_OW 261
29919: PUSH
29920: LD_INT 15
29922: LESS
29923: AND
29924: IFFALSE 29928
// continue ;
29926: GO 29779
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
29928: LD_VAR 0 3
29932: PPUSH
29933: CALL_OW 262
29937: PUSH
29938: LD_INT 1
29940: EQUAL
29941: PUSH
29942: LD_VAR 0 3
29946: PPUSH
29947: CALL_OW 261
29951: PUSH
29952: LD_INT 10
29954: LESS
29955: AND
29956: IFFALSE 30266
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
29958: LD_ADDR_VAR 0 8
29962: PUSH
29963: LD_EXP 49
29967: PUSH
29968: LD_VAR 0 2
29972: ARRAY
29973: PPUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 30
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 30
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: PPUSH
30002: CALL_OW 72
30006: ST_TO_ADDR
// if not depot then
30007: LD_VAR 0 8
30011: NOT
30012: IFFALSE 30016
// continue ;
30014: GO 29779
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
30016: LD_VAR 0 3
30020: PPUSH
30021: LD_VAR 0 8
30025: PPUSH
30026: LD_VAR 0 3
30030: PPUSH
30031: CALL_OW 74
30035: PPUSH
30036: CALL_OW 296
30040: PUSH
30041: LD_INT 6
30043: LESS
30044: IFFALSE 30060
// SetFuel ( j , 100 ) else
30046: LD_VAR 0 3
30050: PPUSH
30051: LD_INT 100
30053: PPUSH
30054: CALL_OW 240
30058: GO 30266
// if GetFuel ( j ) = 0 then
30060: LD_VAR 0 3
30064: PPUSH
30065: CALL_OW 261
30069: PUSH
30070: LD_INT 0
30072: EQUAL
30073: IFFALSE 30266
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
30075: LD_ADDR_EXP 68
30079: PUSH
30080: LD_EXP 68
30084: PPUSH
30085: LD_VAR 0 2
30089: PPUSH
30090: LD_EXP 68
30094: PUSH
30095: LD_VAR 0 2
30099: ARRAY
30100: PUSH
30101: LD_VAR 0 3
30105: DIFF
30106: PPUSH
30107: CALL_OW 1
30111: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
30112: LD_VAR 0 3
30116: PPUSH
30117: CALL_OW 263
30121: PUSH
30122: LD_INT 1
30124: EQUAL
30125: IFFALSE 30141
// ComExitVehicle ( IsInUnit ( j ) ) ;
30127: LD_VAR 0 3
30131: PPUSH
30132: CALL_OW 310
30136: PPUSH
30137: CALL_OW 121
// if GetControl ( j ) = control_remote then
30141: LD_VAR 0 3
30145: PPUSH
30146: CALL_OW 263
30150: PUSH
30151: LD_INT 2
30153: EQUAL
30154: IFFALSE 30165
// ComUnlink ( j ) ;
30156: LD_VAR 0 3
30160: PPUSH
30161: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
30165: LD_ADDR_VAR 0 9
30169: PUSH
30170: LD_VAR 0 2
30174: PPUSH
30175: LD_INT 3
30177: PPUSH
30178: CALL 39428 0 2
30182: ST_TO_ADDR
// if fac then
30183: LD_VAR 0 9
30187: IFFALSE 30264
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
30189: LD_ADDR_VAR 0 10
30193: PUSH
30194: LD_VAR 0 9
30198: PPUSH
30199: LD_VAR 0 3
30203: PPUSH
30204: CALL_OW 265
30208: PPUSH
30209: LD_VAR 0 3
30213: PPUSH
30214: CALL_OW 262
30218: PPUSH
30219: LD_VAR 0 3
30223: PPUSH
30224: CALL_OW 263
30228: PPUSH
30229: LD_VAR 0 3
30233: PPUSH
30234: CALL_OW 264
30238: PPUSH
30239: CALL 49248 0 5
30243: ST_TO_ADDR
// if components then
30244: LD_VAR 0 10
30248: IFFALSE 30264
// MC_InsertProduceList ( i , components ) ;
30250: LD_VAR 0 2
30254: PPUSH
30255: LD_VAR 0 10
30259: PPUSH
30260: CALL 38998 0 2
// end ; continue ;
30264: GO 29779
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
30266: LD_VAR 0 3
30270: PPUSH
30271: LD_INT 1
30273: PPUSH
30274: CALL_OW 289
30278: PUSH
30279: LD_INT 100
30281: LESS
30282: PUSH
30283: LD_VAR 0 3
30287: PPUSH
30288: CALL_OW 314
30292: NOT
30293: AND
30294: IFFALSE 30323
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
30296: LD_VAR 0 3
30300: PPUSH
30301: LD_VAR 0 6
30305: PUSH
30306: LD_INT 2
30308: ARRAY
30309: PPUSH
30310: LD_VAR 0 6
30314: PUSH
30315: LD_INT 3
30317: ARRAY
30318: PPUSH
30319: CALL_OW 117
// break ;
30323: GO 30327
// end ;
30325: GO 29779
30327: POP
30328: POP
// end ; end ;
30329: GO 28617
30331: POP
30332: POP
// end ;
30333: LD_VAR 0 1
30337: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
30338: LD_INT 0
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
// if not mc_bases then
30344: LD_EXP 49
30348: NOT
30349: IFFALSE 30353
// exit ;
30351: GO 30514
// for i = 1 to mc_bases do
30353: LD_ADDR_VAR 0 2
30357: PUSH
30358: DOUBLE
30359: LD_INT 1
30361: DEC
30362: ST_TO_ADDR
30363: LD_EXP 49
30367: PUSH
30368: FOR_TO
30369: IFFALSE 30512
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
30371: LD_ADDR_VAR 0 4
30375: PUSH
30376: LD_EXP 68
30380: PUSH
30381: LD_VAR 0 2
30385: ARRAY
30386: PUSH
30387: LD_EXP 71
30391: PUSH
30392: LD_VAR 0 2
30396: ARRAY
30397: UNION
30398: PPUSH
30399: LD_INT 33
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PPUSH
30409: CALL_OW 72
30413: ST_TO_ADDR
// if tmp then
30414: LD_VAR 0 4
30418: IFFALSE 30510
// for j in tmp do
30420: LD_ADDR_VAR 0 3
30424: PUSH
30425: LD_VAR 0 4
30429: PUSH
30430: FOR_IN
30431: IFFALSE 30508
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
30433: LD_VAR 0 3
30437: PPUSH
30438: CALL_OW 312
30442: NOT
30443: PUSH
30444: LD_VAR 0 3
30448: PPUSH
30449: CALL_OW 256
30453: PUSH
30454: LD_INT 250
30456: GREATEREQUAL
30457: AND
30458: IFFALSE 30471
// Connect ( j ) else
30460: LD_VAR 0 3
30464: PPUSH
30465: CALL 54581 0 1
30469: GO 30506
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
30471: LD_VAR 0 3
30475: PPUSH
30476: CALL_OW 256
30480: PUSH
30481: LD_INT 250
30483: LESS
30484: PUSH
30485: LD_VAR 0 3
30489: PPUSH
30490: CALL_OW 312
30494: AND
30495: IFFALSE 30506
// ComUnlink ( j ) ;
30497: LD_VAR 0 3
30501: PPUSH
30502: CALL_OW 136
30506: GO 30430
30508: POP
30509: POP
// end ;
30510: GO 30368
30512: POP
30513: POP
// end ;
30514: LD_VAR 0 1
30518: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
30519: LD_INT 0
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
// if not mc_bases then
30526: LD_EXP 49
30530: NOT
30531: IFFALSE 30535
// exit ;
30533: GO 30995
// for i = 1 to mc_bases do
30535: LD_ADDR_VAR 0 2
30539: PUSH
30540: DOUBLE
30541: LD_INT 1
30543: DEC
30544: ST_TO_ADDR
30545: LD_EXP 49
30549: PUSH
30550: FOR_TO
30551: IFFALSE 30993
// begin if not mc_produce [ i ] then
30553: LD_EXP 70
30557: PUSH
30558: LD_VAR 0 2
30562: ARRAY
30563: NOT
30564: IFFALSE 30568
// continue ;
30566: GO 30550
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
30568: LD_ADDR_VAR 0 5
30572: PUSH
30573: LD_EXP 49
30577: PUSH
30578: LD_VAR 0 2
30582: ARRAY
30583: PPUSH
30584: LD_INT 30
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PPUSH
30594: CALL_OW 72
30598: ST_TO_ADDR
// if not fac then
30599: LD_VAR 0 5
30603: NOT
30604: IFFALSE 30608
// continue ;
30606: GO 30550
// for j in fac do
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_VAR 0 5
30617: PUSH
30618: FOR_IN
30619: IFFALSE 30989
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
30621: LD_VAR 0 3
30625: PPUSH
30626: CALL_OW 461
30630: PUSH
30631: LD_INT 2
30633: NONEQUAL
30634: PUSH
30635: LD_VAR 0 3
30639: PPUSH
30640: LD_INT 15
30642: PPUSH
30643: CALL 54241 0 2
30647: PUSH
30648: LD_INT 4
30650: ARRAY
30651: OR
30652: PUSH
30653: LD_VAR 0 3
30657: PPUSH
30658: CALL_OW 313
30662: PUSH
30663: LD_INT 0
30665: EQUAL
30666: OR
30667: IFFALSE 30671
// continue ;
30669: GO 30618
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
30671: LD_VAR 0 3
30675: PPUSH
30676: LD_EXP 70
30680: PUSH
30681: LD_VAR 0 2
30685: ARRAY
30686: PUSH
30687: LD_INT 1
30689: ARRAY
30690: PUSH
30691: LD_INT 1
30693: ARRAY
30694: PPUSH
30695: LD_EXP 70
30699: PUSH
30700: LD_VAR 0 2
30704: ARRAY
30705: PUSH
30706: LD_INT 1
30708: ARRAY
30709: PUSH
30710: LD_INT 2
30712: ARRAY
30713: PPUSH
30714: LD_EXP 70
30718: PUSH
30719: LD_VAR 0 2
30723: ARRAY
30724: PUSH
30725: LD_INT 1
30727: ARRAY
30728: PUSH
30729: LD_INT 3
30731: ARRAY
30732: PPUSH
30733: LD_EXP 70
30737: PUSH
30738: LD_VAR 0 2
30742: ARRAY
30743: PUSH
30744: LD_INT 1
30746: ARRAY
30747: PUSH
30748: LD_INT 4
30750: ARRAY
30751: PPUSH
30752: CALL_OW 448
30756: PUSH
30757: LD_VAR 0 3
30761: PPUSH
30762: LD_EXP 70
30766: PUSH
30767: LD_VAR 0 2
30771: ARRAY
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PUSH
30777: LD_INT 1
30779: ARRAY
30780: PUSH
30781: LD_EXP 70
30785: PUSH
30786: LD_VAR 0 2
30790: ARRAY
30791: PUSH
30792: LD_INT 1
30794: ARRAY
30795: PUSH
30796: LD_INT 2
30798: ARRAY
30799: PUSH
30800: LD_EXP 70
30804: PUSH
30805: LD_VAR 0 2
30809: ARRAY
30810: PUSH
30811: LD_INT 1
30813: ARRAY
30814: PUSH
30815: LD_INT 3
30817: ARRAY
30818: PUSH
30819: LD_EXP 70
30823: PUSH
30824: LD_VAR 0 2
30828: ARRAY
30829: PUSH
30830: LD_INT 1
30832: ARRAY
30833: PUSH
30834: LD_INT 4
30836: ARRAY
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: PPUSH
30844: CALL 57912 0 2
30848: AND
30849: IFFALSE 30987
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
30851: LD_VAR 0 3
30855: PPUSH
30856: LD_EXP 70
30860: PUSH
30861: LD_VAR 0 2
30865: ARRAY
30866: PUSH
30867: LD_INT 1
30869: ARRAY
30870: PUSH
30871: LD_INT 1
30873: ARRAY
30874: PPUSH
30875: LD_EXP 70
30879: PUSH
30880: LD_VAR 0 2
30884: ARRAY
30885: PUSH
30886: LD_INT 1
30888: ARRAY
30889: PUSH
30890: LD_INT 2
30892: ARRAY
30893: PPUSH
30894: LD_EXP 70
30898: PUSH
30899: LD_VAR 0 2
30903: ARRAY
30904: PUSH
30905: LD_INT 1
30907: ARRAY
30908: PUSH
30909: LD_INT 3
30911: ARRAY
30912: PPUSH
30913: LD_EXP 70
30917: PUSH
30918: LD_VAR 0 2
30922: ARRAY
30923: PUSH
30924: LD_INT 1
30926: ARRAY
30927: PUSH
30928: LD_INT 4
30930: ARRAY
30931: PPUSH
30932: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
30936: LD_ADDR_VAR 0 4
30940: PUSH
30941: LD_EXP 70
30945: PUSH
30946: LD_VAR 0 2
30950: ARRAY
30951: PPUSH
30952: LD_INT 1
30954: PPUSH
30955: CALL_OW 3
30959: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
30960: LD_ADDR_EXP 70
30964: PUSH
30965: LD_EXP 70
30969: PPUSH
30970: LD_VAR 0 2
30974: PPUSH
30975: LD_VAR 0 4
30979: PPUSH
30980: CALL_OW 1
30984: ST_TO_ADDR
// break ;
30985: GO 30989
// end ; end ;
30987: GO 30618
30989: POP
30990: POP
// end ;
30991: GO 30550
30993: POP
30994: POP
// end ;
30995: LD_VAR 0 1
30999: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
31000: LD_INT 0
31002: PPUSH
31003: PPUSH
31004: PPUSH
// if not mc_bases then
31005: LD_EXP 49
31009: NOT
31010: IFFALSE 31014
// exit ;
31012: GO 31103
// for i = 1 to mc_bases do
31014: LD_ADDR_VAR 0 2
31018: PUSH
31019: DOUBLE
31020: LD_INT 1
31022: DEC
31023: ST_TO_ADDR
31024: LD_EXP 49
31028: PUSH
31029: FOR_TO
31030: IFFALSE 31101
// begin if mc_attack [ i ] then
31032: LD_EXP 69
31036: PUSH
31037: LD_VAR 0 2
31041: ARRAY
31042: IFFALSE 31099
// begin tmp := mc_attack [ i ] [ 1 ] ;
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_EXP 69
31053: PUSH
31054: LD_VAR 0 2
31058: ARRAY
31059: PUSH
31060: LD_INT 1
31062: ARRAY
31063: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
31064: LD_ADDR_EXP 69
31068: PUSH
31069: LD_EXP 69
31073: PPUSH
31074: LD_VAR 0 2
31078: PPUSH
31079: EMPTY
31080: PPUSH
31081: CALL_OW 1
31085: ST_TO_ADDR
// Attack ( tmp ) ;
31086: LD_VAR 0 3
31090: PPUSH
31091: CALL 80101 0 1
// exit ;
31095: POP
31096: POP
31097: GO 31103
// end ; end ;
31099: GO 31029
31101: POP
31102: POP
// end ;
31103: LD_VAR 0 1
31107: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
31108: LD_INT 0
31110: PPUSH
31111: PPUSH
31112: PPUSH
31113: PPUSH
31114: PPUSH
31115: PPUSH
31116: PPUSH
// if not mc_bases then
31117: LD_EXP 49
31121: NOT
31122: IFFALSE 31126
// exit ;
31124: GO 31730
// for i = 1 to mc_bases do
31126: LD_ADDR_VAR 0 2
31130: PUSH
31131: DOUBLE
31132: LD_INT 1
31134: DEC
31135: ST_TO_ADDR
31136: LD_EXP 49
31140: PUSH
31141: FOR_TO
31142: IFFALSE 31728
// begin if not mc_bases [ i ] then
31144: LD_EXP 49
31148: PUSH
31149: LD_VAR 0 2
31153: ARRAY
31154: NOT
31155: IFFALSE 31159
// continue ;
31157: GO 31141
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
31159: LD_ADDR_VAR 0 7
31163: PUSH
31164: LD_EXP 49
31168: PUSH
31169: LD_VAR 0 2
31173: ARRAY
31174: PUSH
31175: LD_INT 1
31177: ARRAY
31178: PPUSH
31179: CALL 48552 0 1
31183: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
31184: LD_ADDR_EXP 72
31188: PUSH
31189: LD_EXP 72
31193: PPUSH
31194: LD_VAR 0 2
31198: PPUSH
31199: LD_EXP 49
31203: PUSH
31204: LD_VAR 0 2
31208: ARRAY
31209: PUSH
31210: LD_INT 1
31212: ARRAY
31213: PPUSH
31214: CALL_OW 255
31218: PPUSH
31219: LD_EXP 74
31223: PUSH
31224: LD_VAR 0 2
31228: ARRAY
31229: PPUSH
31230: CALL 46512 0 2
31234: PPUSH
31235: CALL_OW 1
31239: ST_TO_ADDR
// if not mc_scan [ i ] then
31240: LD_EXP 72
31244: PUSH
31245: LD_VAR 0 2
31249: ARRAY
31250: NOT
31251: IFFALSE 31406
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
31253: LD_ADDR_VAR 0 4
31257: PUSH
31258: LD_EXP 49
31262: PUSH
31263: LD_VAR 0 2
31267: ARRAY
31268: PPUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 25
31274: PUSH
31275: LD_INT 5
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 25
31284: PUSH
31285: LD_INT 8
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 25
31294: PUSH
31295: LD_INT 9
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: PPUSH
31308: CALL_OW 72
31312: ST_TO_ADDR
// if not tmp then
31313: LD_VAR 0 4
31317: NOT
31318: IFFALSE 31322
// continue ;
31320: GO 31141
// for j in tmp do
31322: LD_ADDR_VAR 0 3
31326: PUSH
31327: LD_VAR 0 4
31331: PUSH
31332: FOR_IN
31333: IFFALSE 31404
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
31335: LD_VAR 0 3
31339: PPUSH
31340: CALL_OW 310
31344: PPUSH
31345: CALL_OW 266
31349: PUSH
31350: LD_INT 5
31352: EQUAL
31353: PUSH
31354: LD_VAR 0 3
31358: PPUSH
31359: CALL_OW 257
31363: PUSH
31364: LD_INT 1
31366: EQUAL
31367: AND
31368: PUSH
31369: LD_VAR 0 3
31373: PPUSH
31374: CALL_OW 459
31378: NOT
31379: AND
31380: PUSH
31381: LD_VAR 0 7
31385: AND
31386: IFFALSE 31402
// ComChangeProfession ( j , class ) ;
31388: LD_VAR 0 3
31392: PPUSH
31393: LD_VAR 0 7
31397: PPUSH
31398: CALL_OW 123
31402: GO 31332
31404: POP
31405: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
31406: LD_EXP 72
31410: PUSH
31411: LD_VAR 0 2
31415: ARRAY
31416: PUSH
31417: LD_EXP 71
31421: PUSH
31422: LD_VAR 0 2
31426: ARRAY
31427: NOT
31428: AND
31429: PUSH
31430: LD_EXP 49
31434: PUSH
31435: LD_VAR 0 2
31439: ARRAY
31440: PPUSH
31441: LD_INT 30
31443: PUSH
31444: LD_INT 32
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PPUSH
31451: CALL_OW 72
31455: NOT
31456: AND
31457: PUSH
31458: LD_EXP 49
31462: PUSH
31463: LD_VAR 0 2
31467: ARRAY
31468: PPUSH
31469: LD_INT 2
31471: PUSH
31472: LD_INT 30
31474: PUSH
31475: LD_INT 4
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 30
31484: PUSH
31485: LD_INT 5
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: PPUSH
31497: CALL_OW 72
31501: NOT
31502: AND
31503: IFFALSE 31635
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
31505: LD_ADDR_VAR 0 4
31509: PUSH
31510: LD_EXP 49
31514: PUSH
31515: LD_VAR 0 2
31519: ARRAY
31520: PPUSH
31521: LD_INT 2
31523: PUSH
31524: LD_INT 25
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 25
31536: PUSH
31537: LD_INT 5
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 25
31546: PUSH
31547: LD_INT 8
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 25
31556: PUSH
31557: LD_INT 9
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: PPUSH
31571: CALL_OW 72
31575: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
31576: LD_ADDR_VAR 0 4
31580: PUSH
31581: LD_VAR 0 4
31585: PUSH
31586: LD_VAR 0 4
31590: PPUSH
31591: LD_INT 18
31593: PPUSH
31594: CALL 84845 0 2
31598: DIFF
31599: ST_TO_ADDR
// if tmp then
31600: LD_VAR 0 4
31604: IFFALSE 31635
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
31606: LD_VAR 0 2
31610: PPUSH
31611: LD_VAR 0 4
31615: PPUSH
31616: LD_EXP 74
31620: PUSH
31621: LD_VAR 0 2
31625: ARRAY
31626: PPUSH
31627: CALL 46547 0 3
// exit ;
31631: POP
31632: POP
31633: GO 31730
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
31635: LD_EXP 72
31639: PUSH
31640: LD_VAR 0 2
31644: ARRAY
31645: PUSH
31646: LD_EXP 71
31650: PUSH
31651: LD_VAR 0 2
31655: ARRAY
31656: AND
31657: IFFALSE 31726
// begin tmp := mc_defender [ i ] ;
31659: LD_ADDR_VAR 0 4
31663: PUSH
31664: LD_EXP 71
31668: PUSH
31669: LD_VAR 0 2
31673: ARRAY
31674: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
31675: LD_ADDR_EXP 71
31679: PUSH
31680: LD_EXP 71
31684: PPUSH
31685: LD_VAR 0 2
31689: PPUSH
31690: EMPTY
31691: PPUSH
31692: CALL_OW 1
31696: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
31697: LD_VAR 0 2
31701: PPUSH
31702: LD_VAR 0 4
31706: PPUSH
31707: LD_EXP 72
31711: PUSH
31712: LD_VAR 0 2
31716: ARRAY
31717: PPUSH
31718: CALL 47045 0 3
// exit ;
31722: POP
31723: POP
31724: GO 31730
// end ; end ;
31726: GO 31141
31728: POP
31729: POP
// end ;
31730: LD_VAR 0 1
31734: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
31735: LD_INT 0
31737: PPUSH
31738: PPUSH
31739: PPUSH
31740: PPUSH
31741: PPUSH
31742: PPUSH
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
// if not mc_bases then
31748: LD_EXP 49
31752: NOT
31753: IFFALSE 31757
// exit ;
31755: GO 32844
// for i = 1 to mc_bases do
31757: LD_ADDR_VAR 0 2
31761: PUSH
31762: DOUBLE
31763: LD_INT 1
31765: DEC
31766: ST_TO_ADDR
31767: LD_EXP 49
31771: PUSH
31772: FOR_TO
31773: IFFALSE 32842
// begin tmp := mc_lab [ i ] ;
31775: LD_ADDR_VAR 0 6
31779: PUSH
31780: LD_EXP 82
31784: PUSH
31785: LD_VAR 0 2
31789: ARRAY
31790: ST_TO_ADDR
// if not tmp then
31791: LD_VAR 0 6
31795: NOT
31796: IFFALSE 31800
// continue ;
31798: GO 31772
// idle_lab := 0 ;
31800: LD_ADDR_VAR 0 11
31804: PUSH
31805: LD_INT 0
31807: ST_TO_ADDR
// for j in tmp do
31808: LD_ADDR_VAR 0 3
31812: PUSH
31813: LD_VAR 0 6
31817: PUSH
31818: FOR_IN
31819: IFFALSE 32838
// begin researching := false ;
31821: LD_ADDR_VAR 0 10
31825: PUSH
31826: LD_INT 0
31828: ST_TO_ADDR
// side := GetSide ( j ) ;
31829: LD_ADDR_VAR 0 4
31833: PUSH
31834: LD_VAR 0 3
31838: PPUSH
31839: CALL_OW 255
31843: ST_TO_ADDR
// if not mc_tech [ side ] then
31844: LD_EXP 76
31848: PUSH
31849: LD_VAR 0 4
31853: ARRAY
31854: NOT
31855: IFFALSE 31859
// continue ;
31857: GO 31818
// if BuildingStatus ( j ) = bs_idle then
31859: LD_VAR 0 3
31863: PPUSH
31864: CALL_OW 461
31868: PUSH
31869: LD_INT 2
31871: EQUAL
31872: IFFALSE 32060
// begin if idle_lab and UnitsInside ( j ) < 6 then
31874: LD_VAR 0 11
31878: PUSH
31879: LD_VAR 0 3
31883: PPUSH
31884: CALL_OW 313
31888: PUSH
31889: LD_INT 6
31891: LESS
31892: AND
31893: IFFALSE 31964
// begin tmp2 := UnitsInside ( idle_lab ) ;
31895: LD_ADDR_VAR 0 9
31899: PUSH
31900: LD_VAR 0 11
31904: PPUSH
31905: CALL_OW 313
31909: ST_TO_ADDR
// if tmp2 then
31910: LD_VAR 0 9
31914: IFFALSE 31956
// for x in tmp2 do
31916: LD_ADDR_VAR 0 7
31920: PUSH
31921: LD_VAR 0 9
31925: PUSH
31926: FOR_IN
31927: IFFALSE 31954
// begin ComExitBuilding ( x ) ;
31929: LD_VAR 0 7
31933: PPUSH
31934: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
31938: LD_VAR 0 7
31942: PPUSH
31943: LD_VAR 0 3
31947: PPUSH
31948: CALL_OW 180
// end ;
31952: GO 31926
31954: POP
31955: POP
// idle_lab := 0 ;
31956: LD_ADDR_VAR 0 11
31960: PUSH
31961: LD_INT 0
31963: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
31964: LD_ADDR_VAR 0 5
31968: PUSH
31969: LD_EXP 76
31973: PUSH
31974: LD_VAR 0 4
31978: ARRAY
31979: PUSH
31980: FOR_IN
31981: IFFALSE 32041
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
31983: LD_VAR 0 3
31987: PPUSH
31988: LD_VAR 0 5
31992: PPUSH
31993: CALL_OW 430
31997: PUSH
31998: LD_VAR 0 4
32002: PPUSH
32003: LD_VAR 0 5
32007: PPUSH
32008: CALL 45617 0 2
32012: AND
32013: IFFALSE 32039
// begin researching := true ;
32015: LD_ADDR_VAR 0 10
32019: PUSH
32020: LD_INT 1
32022: ST_TO_ADDR
// ComResearch ( j , t ) ;
32023: LD_VAR 0 3
32027: PPUSH
32028: LD_VAR 0 5
32032: PPUSH
32033: CALL_OW 124
// break ;
32037: GO 32041
// end ;
32039: GO 31980
32041: POP
32042: POP
// if not researching then
32043: LD_VAR 0 10
32047: NOT
32048: IFFALSE 32060
// idle_lab := j ;
32050: LD_ADDR_VAR 0 11
32054: PUSH
32055: LD_VAR 0 3
32059: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
32060: LD_VAR 0 3
32064: PPUSH
32065: CALL_OW 461
32069: PUSH
32070: LD_INT 10
32072: EQUAL
32073: IFFALSE 32661
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
32075: LD_EXP 78
32079: PUSH
32080: LD_VAR 0 2
32084: ARRAY
32085: NOT
32086: PUSH
32087: LD_EXP 79
32091: PUSH
32092: LD_VAR 0 2
32096: ARRAY
32097: NOT
32098: AND
32099: PUSH
32100: LD_EXP 76
32104: PUSH
32105: LD_VAR 0 4
32109: ARRAY
32110: PUSH
32111: LD_INT 1
32113: GREATER
32114: AND
32115: IFFALSE 32246
// begin ComCancel ( j ) ;
32117: LD_VAR 0 3
32121: PPUSH
32122: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
32126: LD_ADDR_EXP 76
32130: PUSH
32131: LD_EXP 76
32135: PPUSH
32136: LD_VAR 0 4
32140: PPUSH
32141: LD_EXP 76
32145: PUSH
32146: LD_VAR 0 4
32150: ARRAY
32151: PPUSH
32152: LD_EXP 76
32156: PUSH
32157: LD_VAR 0 4
32161: ARRAY
32162: PUSH
32163: LD_INT 1
32165: MINUS
32166: PPUSH
32167: LD_EXP 76
32171: PUSH
32172: LD_VAR 0 4
32176: ARRAY
32177: PPUSH
32178: LD_INT 0
32180: PPUSH
32181: CALL 51066 0 4
32185: PPUSH
32186: CALL_OW 1
32190: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
32191: LD_ADDR_EXP 76
32195: PUSH
32196: LD_EXP 76
32200: PPUSH
32201: LD_VAR 0 4
32205: PPUSH
32206: LD_EXP 76
32210: PUSH
32211: LD_VAR 0 4
32215: ARRAY
32216: PPUSH
32217: LD_EXP 76
32221: PUSH
32222: LD_VAR 0 4
32226: ARRAY
32227: PPUSH
32228: LD_INT 1
32230: PPUSH
32231: LD_INT 0
32233: PPUSH
32234: CALL 51066 0 4
32238: PPUSH
32239: CALL_OW 1
32243: ST_TO_ADDR
// continue ;
32244: GO 31818
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
32246: LD_EXP 78
32250: PUSH
32251: LD_VAR 0 2
32255: ARRAY
32256: PUSH
32257: LD_EXP 79
32261: PUSH
32262: LD_VAR 0 2
32266: ARRAY
32267: NOT
32268: AND
32269: IFFALSE 32396
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
32271: LD_ADDR_EXP 79
32275: PUSH
32276: LD_EXP 79
32280: PPUSH
32281: LD_VAR 0 2
32285: PUSH
32286: LD_EXP 79
32290: PUSH
32291: LD_VAR 0 2
32295: ARRAY
32296: PUSH
32297: LD_INT 1
32299: PLUS
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PPUSH
32305: LD_EXP 78
32309: PUSH
32310: LD_VAR 0 2
32314: ARRAY
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PPUSH
32320: CALL 51648 0 3
32324: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
32325: LD_EXP 78
32329: PUSH
32330: LD_VAR 0 2
32334: ARRAY
32335: PUSH
32336: LD_INT 1
32338: ARRAY
32339: PPUSH
32340: LD_INT 112
32342: PPUSH
32343: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
32347: LD_ADDR_VAR 0 9
32351: PUSH
32352: LD_EXP 78
32356: PUSH
32357: LD_VAR 0 2
32361: ARRAY
32362: PPUSH
32363: LD_INT 1
32365: PPUSH
32366: CALL_OW 3
32370: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
32371: LD_ADDR_EXP 78
32375: PUSH
32376: LD_EXP 78
32380: PPUSH
32381: LD_VAR 0 2
32385: PPUSH
32386: LD_VAR 0 9
32390: PPUSH
32391: CALL_OW 1
32395: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
32396: LD_EXP 78
32400: PUSH
32401: LD_VAR 0 2
32405: ARRAY
32406: PUSH
32407: LD_EXP 79
32411: PUSH
32412: LD_VAR 0 2
32416: ARRAY
32417: AND
32418: PUSH
32419: LD_EXP 79
32423: PUSH
32424: LD_VAR 0 2
32428: ARRAY
32429: PUSH
32430: LD_INT 1
32432: ARRAY
32433: PPUSH
32434: CALL_OW 310
32438: NOT
32439: AND
32440: PUSH
32441: LD_VAR 0 3
32445: PPUSH
32446: CALL_OW 313
32450: PUSH
32451: LD_INT 6
32453: EQUAL
32454: AND
32455: IFFALSE 32511
// begin tmp2 := UnitsInside ( j ) ;
32457: LD_ADDR_VAR 0 9
32461: PUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: CALL_OW 313
32471: ST_TO_ADDR
// if tmp2 = 6 then
32472: LD_VAR 0 9
32476: PUSH
32477: LD_INT 6
32479: EQUAL
32480: IFFALSE 32511
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
32482: LD_VAR 0 9
32486: PUSH
32487: LD_INT 1
32489: ARRAY
32490: PPUSH
32491: LD_INT 112
32493: PPUSH
32494: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
32498: LD_VAR 0 9
32502: PUSH
32503: LD_INT 1
32505: ARRAY
32506: PPUSH
32507: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
32511: LD_EXP 79
32515: PUSH
32516: LD_VAR 0 2
32520: ARRAY
32521: PUSH
32522: LD_EXP 79
32526: PUSH
32527: LD_VAR 0 2
32531: ARRAY
32532: PUSH
32533: LD_INT 1
32535: ARRAY
32536: PPUSH
32537: CALL_OW 314
32541: NOT
32542: AND
32543: PUSH
32544: LD_EXP 79
32548: PUSH
32549: LD_VAR 0 2
32553: ARRAY
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PPUSH
32559: CALL_OW 310
32563: NOT
32564: AND
32565: IFFALSE 32591
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
32567: LD_EXP 79
32571: PUSH
32572: LD_VAR 0 2
32576: ARRAY
32577: PUSH
32578: LD_INT 1
32580: ARRAY
32581: PPUSH
32582: LD_VAR 0 3
32586: PPUSH
32587: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
32591: LD_EXP 79
32595: PUSH
32596: LD_VAR 0 2
32600: ARRAY
32601: PUSH
32602: LD_INT 1
32604: ARRAY
32605: PPUSH
32606: CALL_OW 310
32610: PUSH
32611: LD_EXP 79
32615: PUSH
32616: LD_VAR 0 2
32620: ARRAY
32621: PUSH
32622: LD_INT 1
32624: ARRAY
32625: PPUSH
32626: CALL_OW 310
32630: PPUSH
32631: CALL_OW 461
32635: PUSH
32636: LD_INT 3
32638: NONEQUAL
32639: AND
32640: IFFALSE 32661
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
32642: LD_EXP 79
32646: PUSH
32647: LD_VAR 0 2
32651: ARRAY
32652: PUSH
32653: LD_INT 1
32655: ARRAY
32656: PPUSH
32657: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
32661: LD_VAR 0 3
32665: PPUSH
32666: CALL_OW 461
32670: PUSH
32671: LD_INT 6
32673: EQUAL
32674: PUSH
32675: LD_VAR 0 6
32679: PUSH
32680: LD_INT 1
32682: GREATER
32683: AND
32684: IFFALSE 32836
// begin sci := [ ] ;
32686: LD_ADDR_VAR 0 8
32690: PUSH
32691: EMPTY
32692: ST_TO_ADDR
// for x in ( tmp diff j ) do
32693: LD_ADDR_VAR 0 7
32697: PUSH
32698: LD_VAR 0 6
32702: PUSH
32703: LD_VAR 0 3
32707: DIFF
32708: PUSH
32709: FOR_IN
32710: IFFALSE 32762
// begin if sci = 6 then
32712: LD_VAR 0 8
32716: PUSH
32717: LD_INT 6
32719: EQUAL
32720: IFFALSE 32724
// break ;
32722: GO 32762
// if BuildingStatus ( x ) = bs_idle then
32724: LD_VAR 0 7
32728: PPUSH
32729: CALL_OW 461
32733: PUSH
32734: LD_INT 2
32736: EQUAL
32737: IFFALSE 32760
// sci := sci ^ UnitsInside ( x ) ;
32739: LD_ADDR_VAR 0 8
32743: PUSH
32744: LD_VAR 0 8
32748: PUSH
32749: LD_VAR 0 7
32753: PPUSH
32754: CALL_OW 313
32758: ADD
32759: ST_TO_ADDR
// end ;
32760: GO 32709
32762: POP
32763: POP
// if not sci then
32764: LD_VAR 0 8
32768: NOT
32769: IFFALSE 32773
// continue ;
32771: GO 31818
// for x in sci do
32773: LD_ADDR_VAR 0 7
32777: PUSH
32778: LD_VAR 0 8
32782: PUSH
32783: FOR_IN
32784: IFFALSE 32834
// if IsInUnit ( x ) and not HasTask ( x ) then
32786: LD_VAR 0 7
32790: PPUSH
32791: CALL_OW 310
32795: PUSH
32796: LD_VAR 0 7
32800: PPUSH
32801: CALL_OW 314
32805: NOT
32806: AND
32807: IFFALSE 32832
// begin ComExitBuilding ( x ) ;
32809: LD_VAR 0 7
32813: PPUSH
32814: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
32818: LD_VAR 0 7
32822: PPUSH
32823: LD_VAR 0 3
32827: PPUSH
32828: CALL_OW 180
// end ;
32832: GO 32783
32834: POP
32835: POP
// end ; end ;
32836: GO 31818
32838: POP
32839: POP
// end ;
32840: GO 31772
32842: POP
32843: POP
// end ;
32844: LD_VAR 0 1
32848: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
32849: LD_INT 0
32851: PPUSH
32852: PPUSH
// if not mc_bases then
32853: LD_EXP 49
32857: NOT
32858: IFFALSE 32862
// exit ;
32860: GO 32943
// for i = 1 to mc_bases do
32862: LD_ADDR_VAR 0 2
32866: PUSH
32867: DOUBLE
32868: LD_INT 1
32870: DEC
32871: ST_TO_ADDR
32872: LD_EXP 49
32876: PUSH
32877: FOR_TO
32878: IFFALSE 32941
// if mc_mines [ i ] and mc_miners [ i ] then
32880: LD_EXP 62
32884: PUSH
32885: LD_VAR 0 2
32889: ARRAY
32890: PUSH
32891: LD_EXP 63
32895: PUSH
32896: LD_VAR 0 2
32900: ARRAY
32901: AND
32902: IFFALSE 32939
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
32904: LD_EXP 63
32908: PUSH
32909: LD_VAR 0 2
32913: ARRAY
32914: PUSH
32915: LD_INT 1
32917: ARRAY
32918: PPUSH
32919: CALL_OW 255
32923: PPUSH
32924: LD_EXP 62
32928: PUSH
32929: LD_VAR 0 2
32933: ARRAY
32934: PPUSH
32935: CALL 48705 0 2
32939: GO 32877
32941: POP
32942: POP
// end ;
32943: LD_VAR 0 1
32947: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
32948: LD_INT 0
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
// if not mc_bases or not mc_parking then
32958: LD_EXP 49
32962: NOT
32963: PUSH
32964: LD_EXP 73
32968: NOT
32969: OR
32970: IFFALSE 32974
// exit ;
32972: GO 33686
// for i = 1 to mc_bases do
32974: LD_ADDR_VAR 0 2
32978: PUSH
32979: DOUBLE
32980: LD_INT 1
32982: DEC
32983: ST_TO_ADDR
32984: LD_EXP 49
32988: PUSH
32989: FOR_TO
32990: IFFALSE 33684
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
32992: LD_EXP 49
32996: PUSH
32997: LD_VAR 0 2
33001: ARRAY
33002: NOT
33003: PUSH
33004: LD_EXP 73
33008: PUSH
33009: LD_VAR 0 2
33013: ARRAY
33014: NOT
33015: OR
33016: IFFALSE 33020
// continue ;
33018: GO 32989
// if mc_scan [ i ] then
33020: LD_EXP 72
33024: PUSH
33025: LD_VAR 0 2
33029: ARRAY
33030: IFFALSE 33056
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
33032: LD_ADDR_EXP 61
33036: PUSH
33037: LD_EXP 61
33041: PPUSH
33042: LD_VAR 0 2
33046: PPUSH
33047: EMPTY
33048: PPUSH
33049: CALL_OW 1
33053: ST_TO_ADDR
// continue ;
33054: GO 32989
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
33056: LD_ADDR_VAR 0 5
33060: PUSH
33061: LD_EXP 49
33065: PUSH
33066: LD_VAR 0 2
33070: ARRAY
33071: PUSH
33072: LD_INT 1
33074: ARRAY
33075: PPUSH
33076: CALL_OW 255
33080: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
33081: LD_ADDR_VAR 0 6
33085: PUSH
33086: LD_EXP 49
33090: PUSH
33091: LD_VAR 0 2
33095: ARRAY
33096: PPUSH
33097: LD_INT 30
33099: PUSH
33100: LD_INT 3
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PPUSH
33107: CALL_OW 72
33111: ST_TO_ADDR
// if not fac then
33112: LD_VAR 0 6
33116: NOT
33117: IFFALSE 33168
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
33119: LD_ADDR_VAR 0 6
33123: PUSH
33124: LD_EXP 49
33128: PUSH
33129: LD_VAR 0 2
33133: ARRAY
33134: PPUSH
33135: LD_INT 2
33137: PUSH
33138: LD_INT 30
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 30
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: PPUSH
33163: CALL_OW 72
33167: ST_TO_ADDR
// if not fac then
33168: LD_VAR 0 6
33172: NOT
33173: IFFALSE 33177
// continue ;
33175: GO 32989
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
33177: LD_ADDR_VAR 0 7
33181: PUSH
33182: LD_EXP 73
33186: PUSH
33187: LD_VAR 0 2
33191: ARRAY
33192: PPUSH
33193: LD_INT 22
33195: PUSH
33196: LD_VAR 0 5
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 21
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 3
33217: PUSH
33218: LD_INT 24
33220: PUSH
33221: LD_INT 1000
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: PPUSH
33237: CALL_OW 70
33241: PUSH
33242: LD_INT 22
33244: PUSH
33245: LD_VAR 0 5
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 91
33256: PUSH
33257: LD_VAR 0 6
33261: PUSH
33262: LD_INT 1
33264: ARRAY
33265: PUSH
33266: LD_INT 25
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 21
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 3
33286: PUSH
33287: LD_INT 24
33289: PUSH
33290: LD_INT 1000
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: PPUSH
33307: CALL_OW 69
33311: UNION
33312: ST_TO_ADDR
// if not vehs then
33313: LD_VAR 0 7
33317: NOT
33318: IFFALSE 33344
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
33320: LD_ADDR_EXP 61
33324: PUSH
33325: LD_EXP 61
33329: PPUSH
33330: LD_VAR 0 2
33334: PPUSH
33335: EMPTY
33336: PPUSH
33337: CALL_OW 1
33341: ST_TO_ADDR
// continue ;
33342: GO 32989
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
33344: LD_ADDR_VAR 0 8
33348: PUSH
33349: LD_EXP 49
33353: PUSH
33354: LD_VAR 0 2
33358: ARRAY
33359: PPUSH
33360: LD_INT 30
33362: PUSH
33363: LD_INT 3
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PPUSH
33370: CALL_OW 72
33374: ST_TO_ADDR
// if tmp then
33375: LD_VAR 0 8
33379: IFFALSE 33482
// begin for j in tmp do
33381: LD_ADDR_VAR 0 3
33385: PUSH
33386: LD_VAR 0 8
33390: PUSH
33391: FOR_IN
33392: IFFALSE 33480
// for k in UnitsInside ( j ) do
33394: LD_ADDR_VAR 0 4
33398: PUSH
33399: LD_VAR 0 3
33403: PPUSH
33404: CALL_OW 313
33408: PUSH
33409: FOR_IN
33410: IFFALSE 33476
// if k then
33412: LD_VAR 0 4
33416: IFFALSE 33474
// if not k in mc_repair_vehicle [ i ] then
33418: LD_VAR 0 4
33422: PUSH
33423: LD_EXP 61
33427: PUSH
33428: LD_VAR 0 2
33432: ARRAY
33433: IN
33434: NOT
33435: IFFALSE 33474
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
33437: LD_ADDR_EXP 61
33441: PUSH
33442: LD_EXP 61
33446: PPUSH
33447: LD_VAR 0 2
33451: PPUSH
33452: LD_EXP 61
33456: PUSH
33457: LD_VAR 0 2
33461: ARRAY
33462: PUSH
33463: LD_VAR 0 4
33467: UNION
33468: PPUSH
33469: CALL_OW 1
33473: ST_TO_ADDR
33474: GO 33409
33476: POP
33477: POP
33478: GO 33391
33480: POP
33481: POP
// end ; if not mc_repair_vehicle [ i ] then
33482: LD_EXP 61
33486: PUSH
33487: LD_VAR 0 2
33491: ARRAY
33492: NOT
33493: IFFALSE 33497
// continue ;
33495: GO 32989
// for j in mc_repair_vehicle [ i ] do
33497: LD_ADDR_VAR 0 3
33501: PUSH
33502: LD_EXP 61
33506: PUSH
33507: LD_VAR 0 2
33511: ARRAY
33512: PUSH
33513: FOR_IN
33514: IFFALSE 33680
// begin if GetClass ( j ) <> 3 then
33516: LD_VAR 0 3
33520: PPUSH
33521: CALL_OW 257
33525: PUSH
33526: LD_INT 3
33528: NONEQUAL
33529: IFFALSE 33570
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
33531: LD_ADDR_EXP 61
33535: PUSH
33536: LD_EXP 61
33540: PPUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: LD_EXP 61
33550: PUSH
33551: LD_VAR 0 2
33555: ARRAY
33556: PUSH
33557: LD_VAR 0 3
33561: DIFF
33562: PPUSH
33563: CALL_OW 1
33567: ST_TO_ADDR
// continue ;
33568: GO 33513
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
33570: LD_VAR 0 3
33574: PPUSH
33575: CALL_OW 311
33579: NOT
33580: PUSH
33581: LD_VAR 0 3
33585: PUSH
33586: LD_EXP 52
33590: PUSH
33591: LD_VAR 0 2
33595: ARRAY
33596: PUSH
33597: LD_INT 1
33599: ARRAY
33600: IN
33601: NOT
33602: AND
33603: PUSH
33604: LD_VAR 0 3
33608: PUSH
33609: LD_EXP 52
33613: PUSH
33614: LD_VAR 0 2
33618: ARRAY
33619: PUSH
33620: LD_INT 2
33622: ARRAY
33623: IN
33624: NOT
33625: AND
33626: IFFALSE 33678
// begin if IsInUnit ( j ) then
33628: LD_VAR 0 3
33632: PPUSH
33633: CALL_OW 310
33637: IFFALSE 33648
// ComExitBuilding ( j ) ;
33639: LD_VAR 0 3
33643: PPUSH
33644: CALL_OW 122
// if not HasTask ( j ) then
33648: LD_VAR 0 3
33652: PPUSH
33653: CALL_OW 314
33657: NOT
33658: IFFALSE 33678
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
33660: LD_VAR 0 3
33664: PPUSH
33665: LD_VAR 0 7
33669: PUSH
33670: LD_INT 1
33672: ARRAY
33673: PPUSH
33674: CALL_OW 189
// end ; end ;
33678: GO 33513
33680: POP
33681: POP
// end ;
33682: GO 32989
33684: POP
33685: POP
// end ;
33686: LD_VAR 0 1
33690: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
33691: LD_INT 0
33693: PPUSH
33694: PPUSH
33695: PPUSH
33696: PPUSH
33697: PPUSH
33698: PPUSH
33699: PPUSH
33700: PPUSH
33701: PPUSH
33702: PPUSH
33703: PPUSH
// if not mc_bases then
33704: LD_EXP 49
33708: NOT
33709: IFFALSE 33713
// exit ;
33711: GO 34515
// for i = 1 to mc_bases do
33713: LD_ADDR_VAR 0 2
33717: PUSH
33718: DOUBLE
33719: LD_INT 1
33721: DEC
33722: ST_TO_ADDR
33723: LD_EXP 49
33727: PUSH
33728: FOR_TO
33729: IFFALSE 34513
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
33731: LD_EXP 77
33735: PUSH
33736: LD_VAR 0 2
33740: ARRAY
33741: NOT
33742: PUSH
33743: LD_EXP 52
33747: PUSH
33748: LD_VAR 0 2
33752: ARRAY
33753: PUSH
33754: LD_INT 1
33756: ARRAY
33757: OR
33758: PUSH
33759: LD_EXP 52
33763: PUSH
33764: LD_VAR 0 2
33768: ARRAY
33769: PUSH
33770: LD_INT 2
33772: ARRAY
33773: OR
33774: PUSH
33775: LD_EXP 75
33779: PUSH
33780: LD_VAR 0 2
33784: ARRAY
33785: PPUSH
33786: LD_INT 1
33788: PPUSH
33789: CALL_OW 325
33793: NOT
33794: OR
33795: PUSH
33796: LD_EXP 72
33800: PUSH
33801: LD_VAR 0 2
33805: ARRAY
33806: OR
33807: IFFALSE 33811
// continue ;
33809: GO 33728
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
33811: LD_ADDR_VAR 0 8
33815: PUSH
33816: LD_EXP 49
33820: PUSH
33821: LD_VAR 0 2
33825: ARRAY
33826: PPUSH
33827: LD_INT 25
33829: PUSH
33830: LD_INT 4
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 50
33839: PUSH
33840: EMPTY
33841: LIST
33842: PUSH
33843: LD_INT 3
33845: PUSH
33846: LD_INT 60
33848: PUSH
33849: EMPTY
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: PPUSH
33861: CALL_OW 72
33865: PUSH
33866: LD_EXP 53
33870: PUSH
33871: LD_VAR 0 2
33875: ARRAY
33876: DIFF
33877: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
33878: LD_ADDR_VAR 0 9
33882: PUSH
33883: LD_EXP 49
33887: PUSH
33888: LD_VAR 0 2
33892: ARRAY
33893: PPUSH
33894: LD_INT 2
33896: PUSH
33897: LD_INT 30
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 30
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: PPUSH
33922: CALL_OW 72
33926: ST_TO_ADDR
// if not tmp or not dep then
33927: LD_VAR 0 8
33931: NOT
33932: PUSH
33933: LD_VAR 0 9
33937: NOT
33938: OR
33939: IFFALSE 33943
// continue ;
33941: GO 33728
// side := GetSide ( tmp [ 1 ] ) ;
33943: LD_ADDR_VAR 0 11
33947: PUSH
33948: LD_VAR 0 8
33952: PUSH
33953: LD_INT 1
33955: ARRAY
33956: PPUSH
33957: CALL_OW 255
33961: ST_TO_ADDR
// dep := dep [ 1 ] ;
33962: LD_ADDR_VAR 0 9
33966: PUSH
33967: LD_VAR 0 9
33971: PUSH
33972: LD_INT 1
33974: ARRAY
33975: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
33976: LD_ADDR_VAR 0 7
33980: PUSH
33981: LD_EXP 77
33985: PUSH
33986: LD_VAR 0 2
33990: ARRAY
33991: PPUSH
33992: LD_INT 22
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 25
34004: PUSH
34005: LD_INT 12
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PPUSH
34016: CALL_OW 70
34020: PUSH
34021: LD_INT 22
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 25
34033: PUSH
34034: LD_INT 12
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 91
34043: PUSH
34044: LD_VAR 0 9
34048: PUSH
34049: LD_INT 20
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: PPUSH
34062: CALL_OW 69
34066: UNION
34067: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
34068: LD_ADDR_VAR 0 10
34072: PUSH
34073: LD_EXP 77
34077: PUSH
34078: LD_VAR 0 2
34082: ARRAY
34083: PPUSH
34084: LD_INT 81
34086: PUSH
34087: LD_VAR 0 11
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PPUSH
34096: CALL_OW 70
34100: ST_TO_ADDR
// if not apes or danger_at_area then
34101: LD_VAR 0 7
34105: NOT
34106: PUSH
34107: LD_VAR 0 10
34111: OR
34112: IFFALSE 34162
// begin if mc_taming [ i ] then
34114: LD_EXP 80
34118: PUSH
34119: LD_VAR 0 2
34123: ARRAY
34124: IFFALSE 34160
// begin MC_Reset ( i , 121 ) ;
34126: LD_VAR 0 2
34130: PPUSH
34131: LD_INT 121
34133: PPUSH
34134: CALL 19797 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
34138: LD_ADDR_EXP 80
34142: PUSH
34143: LD_EXP 80
34147: PPUSH
34148: LD_VAR 0 2
34152: PPUSH
34153: EMPTY
34154: PPUSH
34155: CALL_OW 1
34159: ST_TO_ADDR
// end ; continue ;
34160: GO 33728
// end ; for j in tmp do
34162: LD_ADDR_VAR 0 3
34166: PUSH
34167: LD_VAR 0 8
34171: PUSH
34172: FOR_IN
34173: IFFALSE 34509
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
34175: LD_VAR 0 3
34179: PUSH
34180: LD_EXP 80
34184: PUSH
34185: LD_VAR 0 2
34189: ARRAY
34190: IN
34191: NOT
34192: PUSH
34193: LD_EXP 80
34197: PUSH
34198: LD_VAR 0 2
34202: ARRAY
34203: PUSH
34204: LD_INT 3
34206: LESS
34207: AND
34208: IFFALSE 34266
// begin SetTag ( j , 121 ) ;
34210: LD_VAR 0 3
34214: PPUSH
34215: LD_INT 121
34217: PPUSH
34218: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
34222: LD_ADDR_EXP 80
34226: PUSH
34227: LD_EXP 80
34231: PPUSH
34232: LD_VAR 0 2
34236: PUSH
34237: LD_EXP 80
34241: PUSH
34242: LD_VAR 0 2
34246: ARRAY
34247: PUSH
34248: LD_INT 1
34250: PLUS
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PPUSH
34256: LD_VAR 0 3
34260: PPUSH
34261: CALL 51648 0 3
34265: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
34266: LD_VAR 0 3
34270: PUSH
34271: LD_EXP 80
34275: PUSH
34276: LD_VAR 0 2
34280: ARRAY
34281: IN
34282: IFFALSE 34507
// begin if GetClass ( j ) <> 4 then
34284: LD_VAR 0 3
34288: PPUSH
34289: CALL_OW 257
34293: PUSH
34294: LD_INT 4
34296: NONEQUAL
34297: IFFALSE 34350
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
34299: LD_ADDR_EXP 80
34303: PUSH
34304: LD_EXP 80
34308: PPUSH
34309: LD_VAR 0 2
34313: PPUSH
34314: LD_EXP 80
34318: PUSH
34319: LD_VAR 0 2
34323: ARRAY
34324: PUSH
34325: LD_VAR 0 3
34329: DIFF
34330: PPUSH
34331: CALL_OW 1
34335: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34336: LD_VAR 0 3
34340: PPUSH
34341: LD_INT 0
34343: PPUSH
34344: CALL_OW 109
// continue ;
34348: GO 34172
// end ; if IsInUnit ( j ) then
34350: LD_VAR 0 3
34354: PPUSH
34355: CALL_OW 310
34359: IFFALSE 34370
// ComExitBuilding ( j ) ;
34361: LD_VAR 0 3
34365: PPUSH
34366: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
34370: LD_ADDR_VAR 0 6
34374: PUSH
34375: LD_VAR 0 7
34379: PPUSH
34380: LD_VAR 0 3
34384: PPUSH
34385: CALL_OW 74
34389: ST_TO_ADDR
// if not ape then
34390: LD_VAR 0 6
34394: NOT
34395: IFFALSE 34399
// break ;
34397: GO 34509
// x := GetX ( ape ) ;
34399: LD_ADDR_VAR 0 4
34403: PUSH
34404: LD_VAR 0 6
34408: PPUSH
34409: CALL_OW 250
34413: ST_TO_ADDR
// y := GetY ( ape ) ;
34414: LD_ADDR_VAR 0 5
34418: PUSH
34419: LD_VAR 0 6
34423: PPUSH
34424: CALL_OW 251
34428: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34429: LD_VAR 0 4
34433: PPUSH
34434: LD_VAR 0 5
34438: PPUSH
34439: CALL_OW 488
34443: NOT
34444: PUSH
34445: LD_VAR 0 11
34449: PPUSH
34450: LD_VAR 0 4
34454: PPUSH
34455: LD_VAR 0 5
34459: PPUSH
34460: LD_INT 20
34462: PPUSH
34463: CALL 52544 0 4
34467: PUSH
34468: LD_INT 4
34470: ARRAY
34471: OR
34472: IFFALSE 34476
// break ;
34474: GO 34509
// if not HasTask ( j ) then
34476: LD_VAR 0 3
34480: PPUSH
34481: CALL_OW 314
34485: NOT
34486: IFFALSE 34507
// ComTameXY ( j , x , y ) ;
34488: LD_VAR 0 3
34492: PPUSH
34493: LD_VAR 0 4
34497: PPUSH
34498: LD_VAR 0 5
34502: PPUSH
34503: CALL_OW 131
// end ; end ;
34507: GO 34172
34509: POP
34510: POP
// end ;
34511: GO 33728
34513: POP
34514: POP
// end ;
34515: LD_VAR 0 1
34519: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
34520: LD_INT 0
34522: PPUSH
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
// if not mc_bases then
34530: LD_EXP 49
34534: NOT
34535: IFFALSE 34539
// exit ;
34537: GO 35165
// for i = 1 to mc_bases do
34539: LD_ADDR_VAR 0 2
34543: PUSH
34544: DOUBLE
34545: LD_INT 1
34547: DEC
34548: ST_TO_ADDR
34549: LD_EXP 49
34553: PUSH
34554: FOR_TO
34555: IFFALSE 35163
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
34557: LD_EXP 78
34561: PUSH
34562: LD_VAR 0 2
34566: ARRAY
34567: NOT
34568: PUSH
34569: LD_EXP 78
34573: PUSH
34574: LD_VAR 0 2
34578: ARRAY
34579: PPUSH
34580: LD_INT 25
34582: PUSH
34583: LD_INT 12
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PPUSH
34590: CALL_OW 72
34594: NOT
34595: OR
34596: IFFALSE 34600
// continue ;
34598: GO 34554
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
34600: LD_ADDR_VAR 0 5
34604: PUSH
34605: LD_EXP 78
34609: PUSH
34610: LD_VAR 0 2
34614: ARRAY
34615: PUSH
34616: LD_INT 1
34618: ARRAY
34619: PPUSH
34620: CALL_OW 255
34624: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
34625: LD_VAR 0 5
34629: PPUSH
34630: LD_INT 2
34632: PPUSH
34633: CALL_OW 325
34637: IFFALSE 34890
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34639: LD_ADDR_VAR 0 4
34643: PUSH
34644: LD_EXP 78
34648: PUSH
34649: LD_VAR 0 2
34653: ARRAY
34654: PPUSH
34655: LD_INT 25
34657: PUSH
34658: LD_INT 16
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PPUSH
34665: CALL_OW 72
34669: ST_TO_ADDR
// if tmp < 6 then
34670: LD_VAR 0 4
34674: PUSH
34675: LD_INT 6
34677: LESS
34678: IFFALSE 34890
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34680: LD_ADDR_VAR 0 6
34684: PUSH
34685: LD_EXP 49
34689: PUSH
34690: LD_VAR 0 2
34694: ARRAY
34695: PPUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 30
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 30
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: PPUSH
34724: CALL_OW 72
34728: ST_TO_ADDR
// if depot then
34729: LD_VAR 0 6
34733: IFFALSE 34890
// begin selected := 0 ;
34735: LD_ADDR_VAR 0 7
34739: PUSH
34740: LD_INT 0
34742: ST_TO_ADDR
// for j in depot do
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_VAR 0 6
34752: PUSH
34753: FOR_IN
34754: IFFALSE 34785
// begin if UnitsInside ( j ) < 6 then
34756: LD_VAR 0 3
34760: PPUSH
34761: CALL_OW 313
34765: PUSH
34766: LD_INT 6
34768: LESS
34769: IFFALSE 34783
// begin selected := j ;
34771: LD_ADDR_VAR 0 7
34775: PUSH
34776: LD_VAR 0 3
34780: ST_TO_ADDR
// break ;
34781: GO 34785
// end ; end ;
34783: GO 34753
34785: POP
34786: POP
// if selected then
34787: LD_VAR 0 7
34791: IFFALSE 34890
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34793: LD_ADDR_VAR 0 3
34797: PUSH
34798: LD_EXP 78
34802: PUSH
34803: LD_VAR 0 2
34807: ARRAY
34808: PPUSH
34809: LD_INT 25
34811: PUSH
34812: LD_INT 12
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PPUSH
34819: CALL_OW 72
34823: PUSH
34824: FOR_IN
34825: IFFALSE 34888
// if not HasTask ( j ) then
34827: LD_VAR 0 3
34831: PPUSH
34832: CALL_OW 314
34836: NOT
34837: IFFALSE 34886
// begin if not IsInUnit ( j ) then
34839: LD_VAR 0 3
34843: PPUSH
34844: CALL_OW 310
34848: NOT
34849: IFFALSE 34865
// ComEnterUnit ( j , selected ) ;
34851: LD_VAR 0 3
34855: PPUSH
34856: LD_VAR 0 7
34860: PPUSH
34861: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
34865: LD_VAR 0 3
34869: PPUSH
34870: LD_INT 16
34872: PPUSH
34873: CALL_OW 183
// AddComExitBuilding ( j ) ;
34877: LD_VAR 0 3
34881: PPUSH
34882: CALL_OW 182
// end ;
34886: GO 34824
34888: POP
34889: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
34890: LD_VAR 0 5
34894: PPUSH
34895: LD_INT 11
34897: PPUSH
34898: CALL_OW 325
34902: IFFALSE 35161
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34904: LD_ADDR_VAR 0 4
34908: PUSH
34909: LD_EXP 78
34913: PUSH
34914: LD_VAR 0 2
34918: ARRAY
34919: PPUSH
34920: LD_INT 25
34922: PUSH
34923: LD_INT 16
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PPUSH
34930: CALL_OW 72
34934: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
34935: LD_VAR 0 4
34939: PUSH
34940: LD_INT 6
34942: GREATEREQUAL
34943: PUSH
34944: LD_VAR 0 5
34948: PPUSH
34949: LD_INT 2
34951: PPUSH
34952: CALL_OW 325
34956: NOT
34957: OR
34958: IFFALSE 35161
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
34960: LD_ADDR_VAR 0 8
34964: PUSH
34965: LD_EXP 49
34969: PUSH
34970: LD_VAR 0 2
34974: ARRAY
34975: PPUSH
34976: LD_INT 2
34978: PUSH
34979: LD_INT 30
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 30
34991: PUSH
34992: LD_INT 5
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: PPUSH
35004: CALL_OW 72
35008: ST_TO_ADDR
// if barracks then
35009: LD_VAR 0 8
35013: IFFALSE 35161
// begin selected := 0 ;
35015: LD_ADDR_VAR 0 7
35019: PUSH
35020: LD_INT 0
35022: ST_TO_ADDR
// for j in barracks do
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_VAR 0 8
35032: PUSH
35033: FOR_IN
35034: IFFALSE 35065
// begin if UnitsInside ( j ) < 6 then
35036: LD_VAR 0 3
35040: PPUSH
35041: CALL_OW 313
35045: PUSH
35046: LD_INT 6
35048: LESS
35049: IFFALSE 35063
// begin selected := j ;
35051: LD_ADDR_VAR 0 7
35055: PUSH
35056: LD_VAR 0 3
35060: ST_TO_ADDR
// break ;
35061: GO 35065
// end ; end ;
35063: GO 35033
35065: POP
35066: POP
// if selected then
35067: LD_VAR 0 7
35071: IFFALSE 35161
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: LD_EXP 78
35082: PUSH
35083: LD_VAR 0 2
35087: ARRAY
35088: PPUSH
35089: LD_INT 25
35091: PUSH
35092: LD_INT 12
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PPUSH
35099: CALL_OW 72
35103: PUSH
35104: FOR_IN
35105: IFFALSE 35159
// if not IsInUnit ( j ) and not HasTask ( j ) then
35107: LD_VAR 0 3
35111: PPUSH
35112: CALL_OW 310
35116: NOT
35117: PUSH
35118: LD_VAR 0 3
35122: PPUSH
35123: CALL_OW 314
35127: NOT
35128: AND
35129: IFFALSE 35157
// begin ComEnterUnit ( j , selected ) ;
35131: LD_VAR 0 3
35135: PPUSH
35136: LD_VAR 0 7
35140: PPUSH
35141: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
35145: LD_VAR 0 3
35149: PPUSH
35150: LD_INT 15
35152: PPUSH
35153: CALL_OW 183
// end ;
35157: GO 35104
35159: POP
35160: POP
// end ; end ; end ; end ; end ;
35161: GO 34554
35163: POP
35164: POP
// end ;
35165: LD_VAR 0 1
35169: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
35170: LD_INT 0
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
// if not mc_bases then
35176: LD_EXP 49
35180: NOT
35181: IFFALSE 35185
// exit ;
35183: GO 35363
// for i = 1 to mc_bases do
35185: LD_ADDR_VAR 0 2
35189: PUSH
35190: DOUBLE
35191: LD_INT 1
35193: DEC
35194: ST_TO_ADDR
35195: LD_EXP 49
35199: PUSH
35200: FOR_TO
35201: IFFALSE 35361
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
35203: LD_ADDR_VAR 0 4
35207: PUSH
35208: LD_EXP 49
35212: PUSH
35213: LD_VAR 0 2
35217: ARRAY
35218: PPUSH
35219: LD_INT 25
35221: PUSH
35222: LD_INT 9
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PPUSH
35229: CALL_OW 72
35233: ST_TO_ADDR
// if not tmp then
35234: LD_VAR 0 4
35238: NOT
35239: IFFALSE 35243
// continue ;
35241: GO 35200
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
35243: LD_EXP 75
35247: PUSH
35248: LD_VAR 0 2
35252: ARRAY
35253: PPUSH
35254: LD_INT 29
35256: PPUSH
35257: CALL_OW 325
35261: NOT
35262: PUSH
35263: LD_EXP 75
35267: PUSH
35268: LD_VAR 0 2
35272: ARRAY
35273: PPUSH
35274: LD_INT 28
35276: PPUSH
35277: CALL_OW 325
35281: NOT
35282: AND
35283: IFFALSE 35287
// continue ;
35285: GO 35200
// for j in tmp do
35287: LD_ADDR_VAR 0 3
35291: PUSH
35292: LD_VAR 0 4
35296: PUSH
35297: FOR_IN
35298: IFFALSE 35357
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
35300: LD_VAR 0 3
35304: PUSH
35305: LD_EXP 52
35309: PUSH
35310: LD_VAR 0 2
35314: ARRAY
35315: PUSH
35316: LD_INT 1
35318: ARRAY
35319: IN
35320: NOT
35321: PUSH
35322: LD_VAR 0 3
35326: PUSH
35327: LD_EXP 52
35331: PUSH
35332: LD_VAR 0 2
35336: ARRAY
35337: PUSH
35338: LD_INT 2
35340: ARRAY
35341: IN
35342: NOT
35343: AND
35344: IFFALSE 35355
// ComSpaceTimeShoot ( j ) ;
35346: LD_VAR 0 3
35350: PPUSH
35351: CALL 45708 0 1
35355: GO 35297
35357: POP
35358: POP
// end ;
35359: GO 35200
35361: POP
35362: POP
// end ;
35363: LD_VAR 0 1
35367: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
35368: LD_INT 0
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
// if not mc_bases then
35379: LD_EXP 49
35383: NOT
35384: IFFALSE 35388
// exit ;
35386: GO 36010
// for i = 1 to mc_bases do
35388: LD_ADDR_VAR 0 2
35392: PUSH
35393: DOUBLE
35394: LD_INT 1
35396: DEC
35397: ST_TO_ADDR
35398: LD_EXP 49
35402: PUSH
35403: FOR_TO
35404: IFFALSE 36008
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
35406: LD_EXP 84
35410: PUSH
35411: LD_VAR 0 2
35415: ARRAY
35416: NOT
35417: PUSH
35418: LD_INT 38
35420: PPUSH
35421: LD_EXP 75
35425: PUSH
35426: LD_VAR 0 2
35430: ARRAY
35431: PPUSH
35432: CALL_OW 321
35436: PUSH
35437: LD_INT 2
35439: NONEQUAL
35440: OR
35441: IFFALSE 35445
// continue ;
35443: GO 35403
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
35445: LD_ADDR_VAR 0 8
35449: PUSH
35450: LD_EXP 49
35454: PUSH
35455: LD_VAR 0 2
35459: ARRAY
35460: PPUSH
35461: LD_INT 30
35463: PUSH
35464: LD_INT 34
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PPUSH
35471: CALL_OW 72
35475: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
35476: LD_ADDR_VAR 0 9
35480: PUSH
35481: LD_EXP 49
35485: PUSH
35486: LD_VAR 0 2
35490: ARRAY
35491: PPUSH
35492: LD_INT 25
35494: PUSH
35495: LD_INT 4
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PPUSH
35502: CALL_OW 72
35506: PPUSH
35507: LD_INT 0
35509: PPUSH
35510: CALL 84845 0 2
35514: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
35515: LD_VAR 0 9
35519: NOT
35520: PUSH
35521: LD_VAR 0 8
35525: NOT
35526: OR
35527: PUSH
35528: LD_EXP 49
35532: PUSH
35533: LD_VAR 0 2
35537: ARRAY
35538: PPUSH
35539: LD_INT 124
35541: PPUSH
35542: CALL 84845 0 2
35546: OR
35547: IFFALSE 35551
// continue ;
35549: GO 35403
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
35551: LD_EXP 85
35555: PUSH
35556: LD_VAR 0 2
35560: ARRAY
35561: PUSH
35562: LD_EXP 84
35566: PUSH
35567: LD_VAR 0 2
35571: ARRAY
35572: LESS
35573: PUSH
35574: LD_EXP 85
35578: PUSH
35579: LD_VAR 0 2
35583: ARRAY
35584: PUSH
35585: LD_VAR 0 8
35589: LESS
35590: AND
35591: IFFALSE 36006
// begin tmp := sci [ 1 ] ;
35593: LD_ADDR_VAR 0 7
35597: PUSH
35598: LD_VAR 0 9
35602: PUSH
35603: LD_INT 1
35605: ARRAY
35606: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
35607: LD_VAR 0 7
35611: PPUSH
35612: LD_INT 124
35614: PPUSH
35615: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
35619: LD_ADDR_VAR 0 3
35623: PUSH
35624: DOUBLE
35625: LD_EXP 84
35629: PUSH
35630: LD_VAR 0 2
35634: ARRAY
35635: INC
35636: ST_TO_ADDR
35637: LD_EXP 84
35641: PUSH
35642: LD_VAR 0 2
35646: ARRAY
35647: PUSH
35648: FOR_DOWNTO
35649: IFFALSE 35992
// begin if IsInUnit ( tmp ) then
35651: LD_VAR 0 7
35655: PPUSH
35656: CALL_OW 310
35660: IFFALSE 35671
// ComExitBuilding ( tmp ) ;
35662: LD_VAR 0 7
35666: PPUSH
35667: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
35671: LD_INT 35
35673: PPUSH
35674: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
35678: LD_VAR 0 7
35682: PPUSH
35683: CALL_OW 310
35687: NOT
35688: PUSH
35689: LD_VAR 0 7
35693: PPUSH
35694: CALL_OW 314
35698: NOT
35699: AND
35700: IFFALSE 35671
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
35702: LD_ADDR_VAR 0 6
35706: PUSH
35707: LD_VAR 0 7
35711: PPUSH
35712: CALL_OW 250
35716: PUSH
35717: LD_VAR 0 7
35721: PPUSH
35722: CALL_OW 251
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35731: LD_INT 35
35733: PPUSH
35734: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
35738: LD_ADDR_VAR 0 4
35742: PUSH
35743: LD_EXP 84
35747: PUSH
35748: LD_VAR 0 2
35752: ARRAY
35753: PUSH
35754: LD_VAR 0 3
35758: ARRAY
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
35764: LD_ADDR_VAR 0 5
35768: PUSH
35769: LD_EXP 84
35773: PUSH
35774: LD_VAR 0 2
35778: ARRAY
35779: PUSH
35780: LD_VAR 0 3
35784: ARRAY
35785: PUSH
35786: LD_INT 2
35788: ARRAY
35789: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
35790: LD_VAR 0 7
35794: PPUSH
35795: LD_INT 10
35797: PPUSH
35798: CALL 54241 0 2
35802: PUSH
35803: LD_INT 4
35805: ARRAY
35806: IFFALSE 35844
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
35808: LD_VAR 0 7
35812: PPUSH
35813: LD_VAR 0 6
35817: PUSH
35818: LD_INT 1
35820: ARRAY
35821: PPUSH
35822: LD_VAR 0 6
35826: PUSH
35827: LD_INT 2
35829: ARRAY
35830: PPUSH
35831: CALL_OW 111
// wait ( 0 0$10 ) ;
35835: LD_INT 350
35837: PPUSH
35838: CALL_OW 67
// end else
35842: GO 35870
// begin ComMoveXY ( tmp , x , y ) ;
35844: LD_VAR 0 7
35848: PPUSH
35849: LD_VAR 0 4
35853: PPUSH
35854: LD_VAR 0 5
35858: PPUSH
35859: CALL_OW 111
// wait ( 0 0$3 ) ;
35863: LD_INT 105
35865: PPUSH
35866: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
35870: LD_VAR 0 7
35874: PPUSH
35875: LD_VAR 0 4
35879: PPUSH
35880: LD_VAR 0 5
35884: PPUSH
35885: CALL_OW 307
35889: IFFALSE 35731
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
35891: LD_VAR 0 7
35895: PPUSH
35896: LD_VAR 0 4
35900: PPUSH
35901: LD_VAR 0 5
35905: PPUSH
35906: LD_VAR 0 8
35910: PUSH
35911: LD_VAR 0 3
35915: ARRAY
35916: PPUSH
35917: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
35921: LD_INT 35
35923: PPUSH
35924: CALL_OW 67
// until not HasTask ( tmp ) ;
35928: LD_VAR 0 7
35932: PPUSH
35933: CALL_OW 314
35937: NOT
35938: IFFALSE 35921
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
35940: LD_ADDR_EXP 85
35944: PUSH
35945: LD_EXP 85
35949: PPUSH
35950: LD_VAR 0 2
35954: PUSH
35955: LD_EXP 85
35959: PUSH
35960: LD_VAR 0 2
35964: ARRAY
35965: PUSH
35966: LD_INT 1
35968: PLUS
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PPUSH
35974: LD_VAR 0 8
35978: PUSH
35979: LD_VAR 0 3
35983: ARRAY
35984: PPUSH
35985: CALL 51648 0 3
35989: ST_TO_ADDR
// end ;
35990: GO 35648
35992: POP
35993: POP
// MC_Reset ( i , 124 ) ;
35994: LD_VAR 0 2
35998: PPUSH
35999: LD_INT 124
36001: PPUSH
36002: CALL 19797 0 2
// end ; end ;
36006: GO 35403
36008: POP
36009: POP
// end ;
36010: LD_VAR 0 1
36014: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
36015: LD_INT 0
36017: PPUSH
36018: PPUSH
36019: PPUSH
// if not mc_bases then
36020: LD_EXP 49
36024: NOT
36025: IFFALSE 36029
// exit ;
36027: GO 36635
// for i = 1 to mc_bases do
36029: LD_ADDR_VAR 0 2
36033: PUSH
36034: DOUBLE
36035: LD_INT 1
36037: DEC
36038: ST_TO_ADDR
36039: LD_EXP 49
36043: PUSH
36044: FOR_TO
36045: IFFALSE 36633
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
36047: LD_ADDR_VAR 0 3
36051: PUSH
36052: LD_EXP 49
36056: PUSH
36057: LD_VAR 0 2
36061: ARRAY
36062: PPUSH
36063: LD_INT 25
36065: PUSH
36066: LD_INT 4
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PPUSH
36073: CALL_OW 72
36077: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
36078: LD_VAR 0 3
36082: NOT
36083: PUSH
36084: LD_EXP 86
36088: PUSH
36089: LD_VAR 0 2
36093: ARRAY
36094: NOT
36095: OR
36096: PUSH
36097: LD_EXP 49
36101: PUSH
36102: LD_VAR 0 2
36106: ARRAY
36107: PPUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 30
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 30
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: PPUSH
36136: CALL_OW 72
36140: NOT
36141: OR
36142: IFFALSE 36192
// begin if mc_deposits_finder [ i ] then
36144: LD_EXP 87
36148: PUSH
36149: LD_VAR 0 2
36153: ARRAY
36154: IFFALSE 36190
// begin MC_Reset ( i , 125 ) ;
36156: LD_VAR 0 2
36160: PPUSH
36161: LD_INT 125
36163: PPUSH
36164: CALL 19797 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
36168: LD_ADDR_EXP 87
36172: PUSH
36173: LD_EXP 87
36177: PPUSH
36178: LD_VAR 0 2
36182: PPUSH
36183: EMPTY
36184: PPUSH
36185: CALL_OW 1
36189: ST_TO_ADDR
// end ; continue ;
36190: GO 36044
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
36192: LD_EXP 86
36196: PUSH
36197: LD_VAR 0 2
36201: ARRAY
36202: PUSH
36203: LD_INT 1
36205: ARRAY
36206: PUSH
36207: LD_INT 3
36209: ARRAY
36210: PUSH
36211: LD_INT 1
36213: EQUAL
36214: PUSH
36215: LD_INT 20
36217: PPUSH
36218: LD_EXP 75
36222: PUSH
36223: LD_VAR 0 2
36227: ARRAY
36228: PPUSH
36229: CALL_OW 321
36233: PUSH
36234: LD_INT 2
36236: NONEQUAL
36237: AND
36238: IFFALSE 36288
// begin if mc_deposits_finder [ i ] then
36240: LD_EXP 87
36244: PUSH
36245: LD_VAR 0 2
36249: ARRAY
36250: IFFALSE 36286
// begin MC_Reset ( i , 125 ) ;
36252: LD_VAR 0 2
36256: PPUSH
36257: LD_INT 125
36259: PPUSH
36260: CALL 19797 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
36264: LD_ADDR_EXP 87
36268: PUSH
36269: LD_EXP 87
36273: PPUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: EMPTY
36280: PPUSH
36281: CALL_OW 1
36285: ST_TO_ADDR
// end ; continue ;
36286: GO 36044
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
36288: LD_EXP 86
36292: PUSH
36293: LD_VAR 0 2
36297: ARRAY
36298: PUSH
36299: LD_INT 1
36301: ARRAY
36302: PUSH
36303: LD_INT 1
36305: ARRAY
36306: PPUSH
36307: LD_EXP 86
36311: PUSH
36312: LD_VAR 0 2
36316: ARRAY
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PUSH
36322: LD_INT 2
36324: ARRAY
36325: PPUSH
36326: LD_EXP 75
36330: PUSH
36331: LD_VAR 0 2
36335: ARRAY
36336: PPUSH
36337: CALL_OW 440
36341: IFFALSE 36384
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
36343: LD_ADDR_EXP 86
36347: PUSH
36348: LD_EXP 86
36352: PPUSH
36353: LD_VAR 0 2
36357: PPUSH
36358: LD_EXP 86
36362: PUSH
36363: LD_VAR 0 2
36367: ARRAY
36368: PPUSH
36369: LD_INT 1
36371: PPUSH
36372: CALL_OW 3
36376: PPUSH
36377: CALL_OW 1
36381: ST_TO_ADDR
36382: GO 36631
// begin if not mc_deposits_finder [ i ] then
36384: LD_EXP 87
36388: PUSH
36389: LD_VAR 0 2
36393: ARRAY
36394: NOT
36395: IFFALSE 36447
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
36397: LD_ADDR_EXP 87
36401: PUSH
36402: LD_EXP 87
36406: PPUSH
36407: LD_VAR 0 2
36411: PPUSH
36412: LD_VAR 0 3
36416: PUSH
36417: LD_INT 1
36419: ARRAY
36420: PUSH
36421: EMPTY
36422: LIST
36423: PPUSH
36424: CALL_OW 1
36428: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
36429: LD_VAR 0 3
36433: PUSH
36434: LD_INT 1
36436: ARRAY
36437: PPUSH
36438: LD_INT 125
36440: PPUSH
36441: CALL_OW 109
// end else
36445: GO 36631
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
36447: LD_EXP 87
36451: PUSH
36452: LD_VAR 0 2
36456: ARRAY
36457: PUSH
36458: LD_INT 1
36460: ARRAY
36461: PPUSH
36462: CALL_OW 310
36466: IFFALSE 36489
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
36468: LD_EXP 87
36472: PUSH
36473: LD_VAR 0 2
36477: ARRAY
36478: PUSH
36479: LD_INT 1
36481: ARRAY
36482: PPUSH
36483: CALL_OW 122
36487: GO 36631
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
36489: LD_EXP 87
36493: PUSH
36494: LD_VAR 0 2
36498: ARRAY
36499: PUSH
36500: LD_INT 1
36502: ARRAY
36503: PPUSH
36504: CALL_OW 314
36508: NOT
36509: PUSH
36510: LD_EXP 87
36514: PUSH
36515: LD_VAR 0 2
36519: ARRAY
36520: PUSH
36521: LD_INT 1
36523: ARRAY
36524: PPUSH
36525: LD_EXP 86
36529: PUSH
36530: LD_VAR 0 2
36534: ARRAY
36535: PUSH
36536: LD_INT 1
36538: ARRAY
36539: PUSH
36540: LD_INT 1
36542: ARRAY
36543: PPUSH
36544: LD_EXP 86
36548: PUSH
36549: LD_VAR 0 2
36553: ARRAY
36554: PUSH
36555: LD_INT 1
36557: ARRAY
36558: PUSH
36559: LD_INT 2
36561: ARRAY
36562: PPUSH
36563: CALL_OW 297
36567: PUSH
36568: LD_INT 6
36570: GREATER
36571: AND
36572: IFFALSE 36631
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
36574: LD_EXP 87
36578: PUSH
36579: LD_VAR 0 2
36583: ARRAY
36584: PUSH
36585: LD_INT 1
36587: ARRAY
36588: PPUSH
36589: LD_EXP 86
36593: PUSH
36594: LD_VAR 0 2
36598: ARRAY
36599: PUSH
36600: LD_INT 1
36602: ARRAY
36603: PUSH
36604: LD_INT 1
36606: ARRAY
36607: PPUSH
36608: LD_EXP 86
36612: PUSH
36613: LD_VAR 0 2
36617: ARRAY
36618: PUSH
36619: LD_INT 1
36621: ARRAY
36622: PUSH
36623: LD_INT 2
36625: ARRAY
36626: PPUSH
36627: CALL_OW 111
// end ; end ; end ;
36631: GO 36044
36633: POP
36634: POP
// end ;
36635: LD_VAR 0 1
36639: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
36640: LD_INT 0
36642: PPUSH
36643: PPUSH
36644: PPUSH
36645: PPUSH
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
36651: PPUSH
36652: PPUSH
// if not mc_bases then
36653: LD_EXP 49
36657: NOT
36658: IFFALSE 36662
// exit ;
36660: GO 37386
// for i = 1 to mc_bases do
36662: LD_ADDR_VAR 0 2
36666: PUSH
36667: DOUBLE
36668: LD_INT 1
36670: DEC
36671: ST_TO_ADDR
36672: LD_EXP 49
36676: PUSH
36677: FOR_TO
36678: IFFALSE 37384
// begin if not mc_bases [ i ] then
36680: LD_EXP 49
36684: PUSH
36685: LD_VAR 0 2
36689: ARRAY
36690: NOT
36691: IFFALSE 36695
// continue ;
36693: GO 36677
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
36695: LD_ADDR_VAR 0 7
36699: PUSH
36700: LD_EXP 49
36704: PUSH
36705: LD_VAR 0 2
36709: ARRAY
36710: PUSH
36711: LD_INT 1
36713: ARRAY
36714: PPUSH
36715: CALL_OW 248
36719: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
36720: LD_VAR 0 7
36724: PUSH
36725: LD_INT 3
36727: EQUAL
36728: PUSH
36729: LD_EXP 68
36733: PUSH
36734: LD_VAR 0 2
36738: ARRAY
36739: PUSH
36740: LD_EXP 71
36744: PUSH
36745: LD_VAR 0 2
36749: ARRAY
36750: UNION
36751: PPUSH
36752: LD_INT 33
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PPUSH
36762: CALL_OW 72
36766: NOT
36767: OR
36768: IFFALSE 36772
// continue ;
36770: GO 36677
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
36772: LD_ADDR_VAR 0 9
36776: PUSH
36777: LD_EXP 49
36781: PUSH
36782: LD_VAR 0 2
36786: ARRAY
36787: PPUSH
36788: LD_INT 30
36790: PUSH
36791: LD_INT 36
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PPUSH
36798: CALL_OW 72
36802: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
36803: LD_ADDR_VAR 0 10
36807: PUSH
36808: LD_EXP 68
36812: PUSH
36813: LD_VAR 0 2
36817: ARRAY
36818: PPUSH
36819: LD_INT 34
36821: PUSH
36822: LD_INT 31
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PPUSH
36829: CALL_OW 72
36833: ST_TO_ADDR
// if not cts and not mcts then
36834: LD_VAR 0 9
36838: NOT
36839: PUSH
36840: LD_VAR 0 10
36844: NOT
36845: AND
36846: IFFALSE 36850
// continue ;
36848: GO 36677
// x := cts ;
36850: LD_ADDR_VAR 0 11
36854: PUSH
36855: LD_VAR 0 9
36859: ST_TO_ADDR
// if not x then
36860: LD_VAR 0 11
36864: NOT
36865: IFFALSE 36877
// x := mcts ;
36867: LD_ADDR_VAR 0 11
36871: PUSH
36872: LD_VAR 0 10
36876: ST_TO_ADDR
// if mc_remote_driver [ i ] then
36877: LD_EXP 89
36881: PUSH
36882: LD_VAR 0 2
36886: ARRAY
36887: IFFALSE 37156
// for j in mc_remote_driver [ i ] do
36889: LD_ADDR_VAR 0 3
36893: PUSH
36894: LD_EXP 89
36898: PUSH
36899: LD_VAR 0 2
36903: ARRAY
36904: PUSH
36905: FOR_IN
36906: IFFALSE 37154
// begin if GetClass ( j ) <> 3 then
36908: LD_VAR 0 3
36912: PPUSH
36913: CALL_OW 257
36917: PUSH
36918: LD_INT 3
36920: NONEQUAL
36921: IFFALSE 36974
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
36923: LD_ADDR_EXP 89
36927: PUSH
36928: LD_EXP 89
36932: PPUSH
36933: LD_VAR 0 2
36937: PPUSH
36938: LD_EXP 89
36942: PUSH
36943: LD_VAR 0 2
36947: ARRAY
36948: PUSH
36949: LD_VAR 0 3
36953: DIFF
36954: PPUSH
36955: CALL_OW 1
36959: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36960: LD_VAR 0 3
36964: PPUSH
36965: LD_INT 0
36967: PPUSH
36968: CALL_OW 109
// continue ;
36972: GO 36905
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
36974: LD_VAR 0 3
36978: PPUSH
36979: CALL_OW 310
36983: NOT
36984: PUSH
36985: LD_VAR 0 3
36989: PPUSH
36990: CALL_OW 310
36994: PPUSH
36995: CALL_OW 266
36999: PUSH
37000: LD_INT 36
37002: NONEQUAL
37003: PUSH
37004: LD_VAR 0 3
37008: PPUSH
37009: CALL 84933 0 1
37013: NOT
37014: AND
37015: OR
37016: IFFALSE 37152
// begin if IsInUnit ( j ) then
37018: LD_VAR 0 3
37022: PPUSH
37023: CALL_OW 310
37027: IFFALSE 37038
// ComExitBuilding ( j ) ;
37029: LD_VAR 0 3
37033: PPUSH
37034: CALL_OW 122
// ct := 0 ;
37038: LD_ADDR_VAR 0 8
37042: PUSH
37043: LD_INT 0
37045: ST_TO_ADDR
// for k in x do
37046: LD_ADDR_VAR 0 4
37050: PUSH
37051: LD_VAR 0 11
37055: PUSH
37056: FOR_IN
37057: IFFALSE 37130
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
37059: LD_VAR 0 4
37063: PPUSH
37064: CALL_OW 264
37068: PUSH
37069: LD_INT 31
37071: EQUAL
37072: PUSH
37073: LD_VAR 0 4
37077: PPUSH
37078: CALL_OW 311
37082: NOT
37083: AND
37084: PUSH
37085: LD_VAR 0 4
37089: PPUSH
37090: CALL_OW 266
37094: PUSH
37095: LD_INT 36
37097: EQUAL
37098: PUSH
37099: LD_VAR 0 4
37103: PPUSH
37104: CALL_OW 313
37108: PUSH
37109: LD_INT 3
37111: LESS
37112: AND
37113: OR
37114: IFFALSE 37128
// begin ct := k ;
37116: LD_ADDR_VAR 0 8
37120: PUSH
37121: LD_VAR 0 4
37125: ST_TO_ADDR
// break ;
37126: GO 37130
// end ;
37128: GO 37056
37130: POP
37131: POP
// if ct then
37132: LD_VAR 0 8
37136: IFFALSE 37152
// ComEnterUnit ( j , ct ) ;
37138: LD_VAR 0 3
37142: PPUSH
37143: LD_VAR 0 8
37147: PPUSH
37148: CALL_OW 120
// end ; end ;
37152: GO 36905
37154: POP
37155: POP
// places := 0 ;
37156: LD_ADDR_VAR 0 5
37160: PUSH
37161: LD_INT 0
37163: ST_TO_ADDR
// for j = 1 to x do
37164: LD_ADDR_VAR 0 3
37168: PUSH
37169: DOUBLE
37170: LD_INT 1
37172: DEC
37173: ST_TO_ADDR
37174: LD_VAR 0 11
37178: PUSH
37179: FOR_TO
37180: IFFALSE 37235
// if GetWeapon ( x [ j ] ) = ar_control_tower then
37182: LD_VAR 0 11
37186: PUSH
37187: LD_VAR 0 3
37191: ARRAY
37192: PPUSH
37193: CALL_OW 264
37197: PUSH
37198: LD_INT 31
37200: EQUAL
37201: IFFALSE 37219
// places := places + 1 else
37203: LD_ADDR_VAR 0 5
37207: PUSH
37208: LD_VAR 0 5
37212: PUSH
37213: LD_INT 1
37215: PLUS
37216: ST_TO_ADDR
37217: GO 37233
// places := places + 3 ;
37219: LD_ADDR_VAR 0 5
37223: PUSH
37224: LD_VAR 0 5
37228: PUSH
37229: LD_INT 3
37231: PLUS
37232: ST_TO_ADDR
37233: GO 37179
37235: POP
37236: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
37237: LD_ADDR_VAR 0 6
37241: PUSH
37242: LD_EXP 49
37246: PUSH
37247: LD_VAR 0 2
37251: ARRAY
37252: PPUSH
37253: LD_INT 25
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PPUSH
37263: CALL_OW 72
37267: PUSH
37268: LD_EXP 89
37272: PUSH
37273: LD_VAR 0 2
37277: ARRAY
37278: DIFF
37279: PPUSH
37280: LD_INT 3
37282: PPUSH
37283: CALL 85833 0 2
37287: ST_TO_ADDR
// if not tmp then
37288: LD_VAR 0 6
37292: NOT
37293: IFFALSE 37297
// continue ;
37295: GO 36677
// places := places - mc_remote_driver [ i ] ;
37297: LD_ADDR_VAR 0 5
37301: PUSH
37302: LD_VAR 0 5
37306: PUSH
37307: LD_EXP 89
37311: PUSH
37312: LD_VAR 0 2
37316: ARRAY
37317: MINUS
37318: ST_TO_ADDR
// if places then
37319: LD_VAR 0 5
37323: IFFALSE 37382
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
37325: LD_ADDR_EXP 89
37329: PUSH
37330: LD_EXP 89
37334: PPUSH
37335: LD_VAR 0 2
37339: PPUSH
37340: LD_EXP 89
37344: PUSH
37345: LD_VAR 0 2
37349: ARRAY
37350: PUSH
37351: LD_VAR 0 6
37355: PUSH
37356: LD_INT 1
37358: ARRAY
37359: UNION
37360: PPUSH
37361: CALL_OW 1
37365: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
37366: LD_VAR 0 6
37370: PUSH
37371: LD_INT 1
37373: ARRAY
37374: PPUSH
37375: LD_INT 126
37377: PPUSH
37378: CALL_OW 109
// end ; end ;
37382: GO 36677
37384: POP
37385: POP
// end ;
37386: LD_VAR 0 1
37390: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
37391: LD_INT 0
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
37399: LD_VAR 0 1
37403: NOT
37404: PUSH
37405: LD_VAR 0 2
37409: NOT
37410: OR
37411: PUSH
37412: LD_VAR 0 3
37416: NOT
37417: OR
37418: PUSH
37419: LD_VAR 0 4
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: LD_INT 3
37432: PUSH
37433: LD_INT 4
37435: PUSH
37436: LD_INT 5
37438: PUSH
37439: LD_INT 8
37441: PUSH
37442: LD_INT 9
37444: PUSH
37445: LD_INT 15
37447: PUSH
37448: LD_INT 16
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: IN
37462: NOT
37463: OR
37464: IFFALSE 37468
// exit ;
37466: GO 38368
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
37468: LD_ADDR_VAR 0 2
37472: PUSH
37473: LD_VAR 0 2
37477: PPUSH
37478: LD_INT 21
37480: PUSH
37481: LD_INT 3
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 24
37490: PUSH
37491: LD_INT 250
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PPUSH
37502: CALL_OW 72
37506: ST_TO_ADDR
// case class of 1 , 15 :
37507: LD_VAR 0 4
37511: PUSH
37512: LD_INT 1
37514: DOUBLE
37515: EQUAL
37516: IFTRUE 37526
37518: LD_INT 15
37520: DOUBLE
37521: EQUAL
37522: IFTRUE 37526
37524: GO 37611
37526: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
37527: LD_ADDR_VAR 0 8
37531: PUSH
37532: LD_VAR 0 2
37536: PPUSH
37537: LD_INT 2
37539: PUSH
37540: LD_INT 30
37542: PUSH
37543: LD_INT 32
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 30
37552: PUSH
37553: LD_INT 31
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: PPUSH
37565: CALL_OW 72
37569: PUSH
37570: LD_VAR 0 2
37574: PPUSH
37575: LD_INT 2
37577: PUSH
37578: LD_INT 30
37580: PUSH
37581: LD_INT 4
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 30
37590: PUSH
37591: LD_INT 5
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: PPUSH
37603: CALL_OW 72
37607: ADD
37608: ST_TO_ADDR
37609: GO 37857
37611: LD_INT 2
37613: DOUBLE
37614: EQUAL
37615: IFTRUE 37625
37617: LD_INT 16
37619: DOUBLE
37620: EQUAL
37621: IFTRUE 37625
37623: GO 37671
37625: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
37626: LD_ADDR_VAR 0 8
37630: PUSH
37631: LD_VAR 0 2
37635: PPUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 30
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 30
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: PPUSH
37664: CALL_OW 72
37668: ST_TO_ADDR
37669: GO 37857
37671: LD_INT 3
37673: DOUBLE
37674: EQUAL
37675: IFTRUE 37679
37677: GO 37725
37679: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
37680: LD_ADDR_VAR 0 8
37684: PUSH
37685: LD_VAR 0 2
37689: PPUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 30
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 30
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: PPUSH
37718: CALL_OW 72
37722: ST_TO_ADDR
37723: GO 37857
37725: LD_INT 4
37727: DOUBLE
37728: EQUAL
37729: IFTRUE 37733
37731: GO 37790
37733: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
37734: LD_ADDR_VAR 0 8
37738: PUSH
37739: LD_VAR 0 2
37743: PPUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 30
37749: PUSH
37750: LD_INT 6
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 30
37759: PUSH
37760: LD_INT 7
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 30
37769: PUSH
37770: LD_INT 8
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: PPUSH
37783: CALL_OW 72
37787: ST_TO_ADDR
37788: GO 37857
37790: LD_INT 5
37792: DOUBLE
37793: EQUAL
37794: IFTRUE 37810
37796: LD_INT 8
37798: DOUBLE
37799: EQUAL
37800: IFTRUE 37810
37802: LD_INT 9
37804: DOUBLE
37805: EQUAL
37806: IFTRUE 37810
37808: GO 37856
37810: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
37811: LD_ADDR_VAR 0 8
37815: PUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: LD_INT 2
37823: PUSH
37824: LD_INT 30
37826: PUSH
37827: LD_INT 4
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 30
37836: PUSH
37837: LD_INT 5
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: PPUSH
37849: CALL_OW 72
37853: ST_TO_ADDR
37854: GO 37857
37856: POP
// if not tmp then
37857: LD_VAR 0 8
37861: NOT
37862: IFFALSE 37866
// exit ;
37864: GO 38368
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
37866: LD_VAR 0 4
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 15
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: IN
37881: PUSH
37882: LD_EXP 58
37886: PUSH
37887: LD_VAR 0 1
37891: ARRAY
37892: AND
37893: IFFALSE 38049
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
37895: LD_ADDR_VAR 0 9
37899: PUSH
37900: LD_EXP 58
37904: PUSH
37905: LD_VAR 0 1
37909: ARRAY
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
37915: LD_VAR 0 9
37919: PUSH
37920: LD_EXP 59
37924: PUSH
37925: LD_VAR 0 1
37929: ARRAY
37930: IN
37931: NOT
37932: IFFALSE 38047
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
37934: LD_ADDR_EXP 59
37938: PUSH
37939: LD_EXP 59
37943: PPUSH
37944: LD_VAR 0 1
37948: PUSH
37949: LD_EXP 59
37953: PUSH
37954: LD_VAR 0 1
37958: ARRAY
37959: PUSH
37960: LD_INT 1
37962: PLUS
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PPUSH
37968: LD_VAR 0 9
37972: PPUSH
37973: CALL 51648 0 3
37977: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
37978: LD_ADDR_EXP 58
37982: PUSH
37983: LD_EXP 58
37987: PPUSH
37988: LD_VAR 0 1
37992: PPUSH
37993: LD_EXP 58
37997: PUSH
37998: LD_VAR 0 1
38002: ARRAY
38003: PUSH
38004: LD_VAR 0 9
38008: DIFF
38009: PPUSH
38010: CALL_OW 1
38014: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
38015: LD_VAR 0 3
38019: PPUSH
38020: LD_EXP 59
38024: PUSH
38025: LD_VAR 0 1
38029: ARRAY
38030: PUSH
38031: LD_EXP 59
38035: PUSH
38036: LD_VAR 0 1
38040: ARRAY
38041: ARRAY
38042: PPUSH
38043: CALL_OW 120
// end ; exit ;
38047: GO 38368
// end ; if tmp > 1 then
38049: LD_VAR 0 8
38053: PUSH
38054: LD_INT 1
38056: GREATER
38057: IFFALSE 38161
// for i = 2 to tmp do
38059: LD_ADDR_VAR 0 6
38063: PUSH
38064: DOUBLE
38065: LD_INT 2
38067: DEC
38068: ST_TO_ADDR
38069: LD_VAR 0 8
38073: PUSH
38074: FOR_TO
38075: IFFALSE 38159
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
38077: LD_VAR 0 8
38081: PUSH
38082: LD_VAR 0 6
38086: ARRAY
38087: PPUSH
38088: CALL_OW 461
38092: PUSH
38093: LD_INT 6
38095: EQUAL
38096: IFFALSE 38157
// begin x := tmp [ i ] ;
38098: LD_ADDR_VAR 0 9
38102: PUSH
38103: LD_VAR 0 8
38107: PUSH
38108: LD_VAR 0 6
38112: ARRAY
38113: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
38114: LD_ADDR_VAR 0 8
38118: PUSH
38119: LD_VAR 0 8
38123: PPUSH
38124: LD_VAR 0 6
38128: PPUSH
38129: CALL_OW 3
38133: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
38134: LD_ADDR_VAR 0 8
38138: PUSH
38139: LD_VAR 0 8
38143: PPUSH
38144: LD_INT 1
38146: PPUSH
38147: LD_VAR 0 9
38151: PPUSH
38152: CALL_OW 2
38156: ST_TO_ADDR
// end ;
38157: GO 38074
38159: POP
38160: POP
// for i in tmp do
38161: LD_ADDR_VAR 0 6
38165: PUSH
38166: LD_VAR 0 8
38170: PUSH
38171: FOR_IN
38172: IFFALSE 38241
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
38174: LD_VAR 0 6
38178: PPUSH
38179: CALL_OW 313
38183: PUSH
38184: LD_INT 6
38186: LESS
38187: PUSH
38188: LD_VAR 0 6
38192: PPUSH
38193: CALL_OW 266
38197: PUSH
38198: LD_INT 31
38200: PUSH
38201: LD_INT 32
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: IN
38208: NOT
38209: AND
38210: PUSH
38211: LD_VAR 0 6
38215: PPUSH
38216: CALL_OW 313
38220: PUSH
38221: LD_INT 0
38223: EQUAL
38224: OR
38225: IFFALSE 38239
// begin j := i ;
38227: LD_ADDR_VAR 0 7
38231: PUSH
38232: LD_VAR 0 6
38236: ST_TO_ADDR
// break ;
38237: GO 38241
// end ; end ;
38239: GO 38171
38241: POP
38242: POP
// if j then
38243: LD_VAR 0 7
38247: IFFALSE 38265
// ComEnterUnit ( unit , j ) else
38249: LD_VAR 0 3
38253: PPUSH
38254: LD_VAR 0 7
38258: PPUSH
38259: CALL_OW 120
38263: GO 38368
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38265: LD_ADDR_VAR 0 10
38269: PUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_INT 2
38277: PUSH
38278: LD_INT 30
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 30
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: PPUSH
38303: CALL_OW 72
38307: ST_TO_ADDR
// if depot then
38308: LD_VAR 0 10
38312: IFFALSE 38368
// begin depot := NearestUnitToUnit ( depot , unit ) ;
38314: LD_ADDR_VAR 0 10
38318: PUSH
38319: LD_VAR 0 10
38323: PPUSH
38324: LD_VAR 0 3
38328: PPUSH
38329: CALL_OW 74
38333: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
38334: LD_VAR 0 3
38338: PPUSH
38339: LD_VAR 0 10
38343: PPUSH
38344: CALL_OW 296
38348: PUSH
38349: LD_INT 10
38351: GREATER
38352: IFFALSE 38368
// ComStandNearbyBuilding ( unit , depot ) ;
38354: LD_VAR 0 3
38358: PPUSH
38359: LD_VAR 0 10
38363: PPUSH
38364: CALL 46325 0 2
// end ; end ; end ;
38368: LD_VAR 0 5
38372: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
38373: LD_INT 0
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
// if not mc_bases then
38379: LD_EXP 49
38383: NOT
38384: IFFALSE 38388
// exit ;
38386: GO 38627
// for i = 1 to mc_bases do
38388: LD_ADDR_VAR 0 2
38392: PUSH
38393: DOUBLE
38394: LD_INT 1
38396: DEC
38397: ST_TO_ADDR
38398: LD_EXP 49
38402: PUSH
38403: FOR_TO
38404: IFFALSE 38625
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
38406: LD_ADDR_VAR 0 4
38410: PUSH
38411: LD_EXP 49
38415: PUSH
38416: LD_VAR 0 2
38420: ARRAY
38421: PPUSH
38422: LD_INT 21
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PPUSH
38432: CALL_OW 72
38436: PUSH
38437: LD_EXP 78
38441: PUSH
38442: LD_VAR 0 2
38446: ARRAY
38447: UNION
38448: ST_TO_ADDR
// if not tmp then
38449: LD_VAR 0 4
38453: NOT
38454: IFFALSE 38458
// continue ;
38456: GO 38403
// for j in tmp do
38458: LD_ADDR_VAR 0 3
38462: PUSH
38463: LD_VAR 0 4
38467: PUSH
38468: FOR_IN
38469: IFFALSE 38621
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
38471: LD_VAR 0 3
38475: PPUSH
38476: CALL_OW 110
38480: NOT
38481: PUSH
38482: LD_VAR 0 3
38486: PPUSH
38487: CALL_OW 314
38491: NOT
38492: AND
38493: PUSH
38494: LD_VAR 0 3
38498: PPUSH
38499: CALL_OW 311
38503: NOT
38504: AND
38505: PUSH
38506: LD_VAR 0 3
38510: PPUSH
38511: CALL_OW 310
38515: NOT
38516: AND
38517: PUSH
38518: LD_VAR 0 3
38522: PUSH
38523: LD_EXP 52
38527: PUSH
38528: LD_VAR 0 2
38532: ARRAY
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: IN
38538: NOT
38539: AND
38540: PUSH
38541: LD_VAR 0 3
38545: PUSH
38546: LD_EXP 52
38550: PUSH
38551: LD_VAR 0 2
38555: ARRAY
38556: PUSH
38557: LD_INT 2
38559: ARRAY
38560: IN
38561: NOT
38562: AND
38563: PUSH
38564: LD_VAR 0 3
38568: PUSH
38569: LD_EXP 61
38573: PUSH
38574: LD_VAR 0 2
38578: ARRAY
38579: IN
38580: NOT
38581: AND
38582: IFFALSE 38619
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
38584: LD_VAR 0 2
38588: PPUSH
38589: LD_EXP 49
38593: PUSH
38594: LD_VAR 0 2
38598: ARRAY
38599: PPUSH
38600: LD_VAR 0 3
38604: PPUSH
38605: LD_VAR 0 3
38609: PPUSH
38610: CALL_OW 257
38614: PPUSH
38615: CALL 37391 0 4
// end ;
38619: GO 38468
38621: POP
38622: POP
// end ;
38623: GO 38403
38625: POP
38626: POP
// end ;
38627: LD_VAR 0 1
38631: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
38632: LD_INT 0
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
// if not mc_bases [ base ] then
38640: LD_EXP 49
38644: PUSH
38645: LD_VAR 0 1
38649: ARRAY
38650: NOT
38651: IFFALSE 38655
// exit ;
38653: GO 38837
// tmp := [ ] ;
38655: LD_ADDR_VAR 0 6
38659: PUSH
38660: EMPTY
38661: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
38662: LD_ADDR_VAR 0 7
38666: PUSH
38667: LD_VAR 0 3
38671: PPUSH
38672: LD_INT 0
38674: PPUSH
38675: CALL_OW 517
38679: ST_TO_ADDR
// if not list then
38680: LD_VAR 0 7
38684: NOT
38685: IFFALSE 38689
// exit ;
38687: GO 38837
// for i = 1 to amount do
38689: LD_ADDR_VAR 0 5
38693: PUSH
38694: DOUBLE
38695: LD_INT 1
38697: DEC
38698: ST_TO_ADDR
38699: LD_VAR 0 2
38703: PUSH
38704: FOR_TO
38705: IFFALSE 38785
// begin x := rand ( 1 , list [ 1 ] ) ;
38707: LD_ADDR_VAR 0 8
38711: PUSH
38712: LD_INT 1
38714: PPUSH
38715: LD_VAR 0 7
38719: PUSH
38720: LD_INT 1
38722: ARRAY
38723: PPUSH
38724: CALL_OW 12
38728: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
38729: LD_ADDR_VAR 0 6
38733: PUSH
38734: LD_VAR 0 6
38738: PPUSH
38739: LD_VAR 0 5
38743: PPUSH
38744: LD_VAR 0 7
38748: PUSH
38749: LD_INT 1
38751: ARRAY
38752: PUSH
38753: LD_VAR 0 8
38757: ARRAY
38758: PUSH
38759: LD_VAR 0 7
38763: PUSH
38764: LD_INT 2
38766: ARRAY
38767: PUSH
38768: LD_VAR 0 8
38772: ARRAY
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PPUSH
38778: CALL_OW 1
38782: ST_TO_ADDR
// end ;
38783: GO 38704
38785: POP
38786: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
38787: LD_ADDR_EXP 62
38791: PUSH
38792: LD_EXP 62
38796: PPUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: LD_VAR 0 6
38806: PPUSH
38807: CALL_OW 1
38811: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
38812: LD_ADDR_EXP 64
38816: PUSH
38817: LD_EXP 64
38821: PPUSH
38822: LD_VAR 0 1
38826: PPUSH
38827: LD_VAR 0 3
38831: PPUSH
38832: CALL_OW 1
38836: ST_TO_ADDR
// end ;
38837: LD_VAR 0 4
38841: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
38842: LD_INT 0
38844: PPUSH
// if not mc_bases [ base ] then
38845: LD_EXP 49
38849: PUSH
38850: LD_VAR 0 1
38854: ARRAY
38855: NOT
38856: IFFALSE 38860
// exit ;
38858: GO 38885
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
38860: LD_ADDR_EXP 54
38864: PUSH
38865: LD_EXP 54
38869: PPUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: LD_VAR 0 2
38879: PPUSH
38880: CALL_OW 1
38884: ST_TO_ADDR
// end ;
38885: LD_VAR 0 3
38889: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
38890: LD_INT 0
38892: PPUSH
// if not mc_bases [ base ] then
38893: LD_EXP 49
38897: PUSH
38898: LD_VAR 0 1
38902: ARRAY
38903: NOT
38904: IFFALSE 38908
// exit ;
38906: GO 38945
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
38908: LD_ADDR_EXP 54
38912: PUSH
38913: LD_EXP 54
38917: PPUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_EXP 54
38927: PUSH
38928: LD_VAR 0 1
38932: ARRAY
38933: PUSH
38934: LD_VAR 0 2
38938: UNION
38939: PPUSH
38940: CALL_OW 1
38944: ST_TO_ADDR
// end ;
38945: LD_VAR 0 3
38949: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
38950: LD_INT 0
38952: PPUSH
// if not mc_bases [ base ] then
38953: LD_EXP 49
38957: PUSH
38958: LD_VAR 0 1
38962: ARRAY
38963: NOT
38964: IFFALSE 38968
// exit ;
38966: GO 38993
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
38968: LD_ADDR_EXP 70
38972: PUSH
38973: LD_EXP 70
38977: PPUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: LD_VAR 0 2
38987: PPUSH
38988: CALL_OW 1
38992: ST_TO_ADDR
// end ;
38993: LD_VAR 0 3
38997: RET
// export function MC_InsertProduceList ( base , components ) ; begin
38998: LD_INT 0
39000: PPUSH
// if not mc_bases [ base ] then
39001: LD_EXP 49
39005: PUSH
39006: LD_VAR 0 1
39010: ARRAY
39011: NOT
39012: IFFALSE 39016
// exit ;
39014: GO 39053
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
39016: LD_ADDR_EXP 70
39020: PUSH
39021: LD_EXP 70
39025: PPUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: LD_EXP 70
39035: PUSH
39036: LD_VAR 0 1
39040: ARRAY
39041: PUSH
39042: LD_VAR 0 2
39046: ADD
39047: PPUSH
39048: CALL_OW 1
39052: ST_TO_ADDR
// end ;
39053: LD_VAR 0 3
39057: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
39058: LD_INT 0
39060: PPUSH
// if not mc_bases [ base ] then
39061: LD_EXP 49
39065: PUSH
39066: LD_VAR 0 1
39070: ARRAY
39071: NOT
39072: IFFALSE 39076
// exit ;
39074: GO 39188
// mc_defender := Replace ( mc_defender , base , deflist ) ;
39076: LD_ADDR_EXP 71
39080: PUSH
39081: LD_EXP 71
39085: PPUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: LD_VAR 0 2
39095: PPUSH
39096: CALL_OW 1
39100: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
39101: LD_ADDR_EXP 60
39105: PUSH
39106: LD_EXP 60
39110: PPUSH
39111: LD_VAR 0 1
39115: PPUSH
39116: LD_VAR 0 2
39120: PUSH
39121: LD_INT 0
39123: PLUS
39124: PPUSH
39125: CALL_OW 1
39129: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
39130: LD_ADDR_EXP 68
39134: PUSH
39135: LD_EXP 68
39139: PPUSH
39140: LD_VAR 0 1
39144: PPUSH
39145: LD_EXP 68
39149: PUSH
39150: LD_VAR 0 1
39154: ARRAY
39155: PUSH
39156: LD_EXP 71
39160: PUSH
39161: LD_VAR 0 1
39165: ARRAY
39166: PPUSH
39167: LD_INT 21
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PPUSH
39177: CALL_OW 72
39181: UNION
39182: PPUSH
39183: CALL_OW 1
39187: ST_TO_ADDR
// end ;
39188: LD_VAR 0 3
39192: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
39193: LD_INT 0
39195: PPUSH
// if not mc_bases [ base ] then
39196: LD_EXP 49
39200: PUSH
39201: LD_VAR 0 1
39205: ARRAY
39206: NOT
39207: IFFALSE 39211
// exit ;
39209: GO 39236
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
39211: LD_ADDR_EXP 60
39215: PUSH
39216: LD_EXP 60
39220: PPUSH
39221: LD_VAR 0 1
39225: PPUSH
39226: LD_VAR 0 2
39230: PPUSH
39231: CALL_OW 1
39235: ST_TO_ADDR
// end ;
39236: LD_VAR 0 3
39240: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
// if not mc_bases [ base ] then
39247: LD_EXP 49
39251: PUSH
39252: LD_VAR 0 1
39256: ARRAY
39257: NOT
39258: IFFALSE 39262
// exit ;
39260: GO 39327
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
39262: LD_ADDR_EXP 69
39266: PUSH
39267: LD_EXP 69
39271: PPUSH
39272: LD_VAR 0 1
39276: PUSH
39277: LD_EXP 69
39281: PUSH
39282: LD_VAR 0 1
39286: ARRAY
39287: PUSH
39288: LD_INT 1
39290: PLUS
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PPUSH
39296: LD_VAR 0 1
39300: PUSH
39301: LD_VAR 0 2
39305: PUSH
39306: LD_VAR 0 3
39310: PUSH
39311: LD_VAR 0 4
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: PPUSH
39322: CALL 51648 0 3
39326: ST_TO_ADDR
// end ;
39327: LD_VAR 0 5
39331: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
39332: LD_INT 0
39334: PPUSH
// if not mc_bases [ base ] then
39335: LD_EXP 49
39339: PUSH
39340: LD_VAR 0 1
39344: ARRAY
39345: NOT
39346: IFFALSE 39350
// exit ;
39348: GO 39375
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
39350: LD_ADDR_EXP 86
39354: PUSH
39355: LD_EXP 86
39359: PPUSH
39360: LD_VAR 0 1
39364: PPUSH
39365: LD_VAR 0 2
39369: PPUSH
39370: CALL_OW 1
39374: ST_TO_ADDR
// end ;
39375: LD_VAR 0 3
39379: RET
// export function MC_GetMinesField ( base ) ; begin
39380: LD_INT 0
39382: PPUSH
// result := mc_mines [ base ] ;
39383: LD_ADDR_VAR 0 2
39387: PUSH
39388: LD_EXP 62
39392: PUSH
39393: LD_VAR 0 1
39397: ARRAY
39398: ST_TO_ADDR
// end ;
39399: LD_VAR 0 2
39403: RET
// export function MC_GetProduceList ( base ) ; begin
39404: LD_INT 0
39406: PPUSH
// result := mc_produce [ base ] ;
39407: LD_ADDR_VAR 0 2
39411: PUSH
39412: LD_EXP 70
39416: PUSH
39417: LD_VAR 0 1
39421: ARRAY
39422: ST_TO_ADDR
// end ;
39423: LD_VAR 0 2
39427: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
39428: LD_INT 0
39430: PPUSH
39431: PPUSH
// if not mc_bases then
39432: LD_EXP 49
39436: NOT
39437: IFFALSE 39441
// exit ;
39439: GO 39506
// if mc_bases [ base ] then
39441: LD_EXP 49
39445: PUSH
39446: LD_VAR 0 1
39450: ARRAY
39451: IFFALSE 39506
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_EXP 49
39462: PUSH
39463: LD_VAR 0 1
39467: ARRAY
39468: PPUSH
39469: LD_INT 30
39471: PUSH
39472: LD_VAR 0 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PPUSH
39481: CALL_OW 72
39485: ST_TO_ADDR
// if result then
39486: LD_VAR 0 3
39490: IFFALSE 39506
// result := result [ 1 ] ;
39492: LD_ADDR_VAR 0 3
39496: PUSH
39497: LD_VAR 0 3
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: ST_TO_ADDR
// end ; end ;
39506: LD_VAR 0 3
39510: RET
// export function MC_SetTame ( base , area ) ; begin
39511: LD_INT 0
39513: PPUSH
// if not mc_bases or not base then
39514: LD_EXP 49
39518: NOT
39519: PUSH
39520: LD_VAR 0 1
39524: NOT
39525: OR
39526: IFFALSE 39530
// exit ;
39528: GO 39555
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
39530: LD_ADDR_EXP 77
39534: PUSH
39535: LD_EXP 77
39539: PPUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: LD_VAR 0 2
39549: PPUSH
39550: CALL_OW 1
39554: ST_TO_ADDR
// end ;
39555: LD_VAR 0 3
39559: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
39560: LD_INT 0
39562: PPUSH
39563: PPUSH
// if not mc_bases or not base then
39564: LD_EXP 49
39568: NOT
39569: PUSH
39570: LD_VAR 0 1
39574: NOT
39575: OR
39576: IFFALSE 39580
// exit ;
39578: GO 39682
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39580: LD_ADDR_VAR 0 4
39584: PUSH
39585: LD_EXP 49
39589: PUSH
39590: LD_VAR 0 1
39594: ARRAY
39595: PPUSH
39596: LD_INT 30
39598: PUSH
39599: LD_VAR 0 2
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PPUSH
39608: CALL_OW 72
39612: ST_TO_ADDR
// if not tmp then
39613: LD_VAR 0 4
39617: NOT
39618: IFFALSE 39622
// exit ;
39620: GO 39682
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
39622: LD_ADDR_EXP 81
39626: PUSH
39627: LD_EXP 81
39631: PPUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: LD_EXP 81
39641: PUSH
39642: LD_VAR 0 1
39646: ARRAY
39647: PPUSH
39648: LD_EXP 81
39652: PUSH
39653: LD_VAR 0 1
39657: ARRAY
39658: PUSH
39659: LD_INT 1
39661: PLUS
39662: PPUSH
39663: LD_VAR 0 4
39667: PUSH
39668: LD_INT 1
39670: ARRAY
39671: PPUSH
39672: CALL_OW 2
39676: PPUSH
39677: CALL_OW 1
39681: ST_TO_ADDR
// end ;
39682: LD_VAR 0 3
39686: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
39687: LD_INT 0
39689: PPUSH
39690: PPUSH
// if not mc_bases or not base or not kinds then
39691: LD_EXP 49
39695: NOT
39696: PUSH
39697: LD_VAR 0 1
39701: NOT
39702: OR
39703: PUSH
39704: LD_VAR 0 2
39708: NOT
39709: OR
39710: IFFALSE 39714
// exit ;
39712: GO 39775
// for i in kinds do
39714: LD_ADDR_VAR 0 4
39718: PUSH
39719: LD_VAR 0 2
39723: PUSH
39724: FOR_IN
39725: IFFALSE 39773
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
39727: LD_ADDR_EXP 83
39731: PUSH
39732: LD_EXP 83
39736: PPUSH
39737: LD_VAR 0 1
39741: PUSH
39742: LD_EXP 83
39746: PUSH
39747: LD_VAR 0 1
39751: ARRAY
39752: PUSH
39753: LD_INT 1
39755: PLUS
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PPUSH
39761: LD_VAR 0 4
39765: PPUSH
39766: CALL 51648 0 3
39770: ST_TO_ADDR
39771: GO 39724
39773: POP
39774: POP
// end ;
39775: LD_VAR 0 3
39779: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
39780: LD_INT 0
39782: PPUSH
// if not mc_bases or not base or not areas then
39783: LD_EXP 49
39787: NOT
39788: PUSH
39789: LD_VAR 0 1
39793: NOT
39794: OR
39795: PUSH
39796: LD_VAR 0 2
39800: NOT
39801: OR
39802: IFFALSE 39806
// exit ;
39804: GO 39831
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
39806: LD_ADDR_EXP 67
39810: PUSH
39811: LD_EXP 67
39815: PPUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: LD_VAR 0 2
39825: PPUSH
39826: CALL_OW 1
39830: ST_TO_ADDR
// end ;
39831: LD_VAR 0 3
39835: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
39836: LD_INT 0
39838: PPUSH
// if not mc_bases or not base or not teleports_exit then
39839: LD_EXP 49
39843: NOT
39844: PUSH
39845: LD_VAR 0 1
39849: NOT
39850: OR
39851: PUSH
39852: LD_VAR 0 2
39856: NOT
39857: OR
39858: IFFALSE 39862
// exit ;
39860: GO 39887
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
39862: LD_ADDR_EXP 84
39866: PUSH
39867: LD_EXP 84
39871: PPUSH
39872: LD_VAR 0 1
39876: PPUSH
39877: LD_VAR 0 2
39881: PPUSH
39882: CALL_OW 1
39886: ST_TO_ADDR
// end ;
39887: LD_VAR 0 3
39891: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
39892: LD_INT 0
39894: PPUSH
39895: PPUSH
39896: PPUSH
// if not mc_bases or not base or not ext_list then
39897: LD_EXP 49
39901: NOT
39902: PUSH
39903: LD_VAR 0 1
39907: NOT
39908: OR
39909: PUSH
39910: LD_VAR 0 5
39914: NOT
39915: OR
39916: IFFALSE 39920
// exit ;
39918: GO 40093
// tmp := GetFacExtXYD ( x , y , d ) ;
39920: LD_ADDR_VAR 0 8
39924: PUSH
39925: LD_VAR 0 2
39929: PPUSH
39930: LD_VAR 0 3
39934: PPUSH
39935: LD_VAR 0 4
39939: PPUSH
39940: CALL 84963 0 3
39944: ST_TO_ADDR
// if not tmp then
39945: LD_VAR 0 8
39949: NOT
39950: IFFALSE 39954
// exit ;
39952: GO 40093
// for i in tmp do
39954: LD_ADDR_VAR 0 7
39958: PUSH
39959: LD_VAR 0 8
39963: PUSH
39964: FOR_IN
39965: IFFALSE 40091
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
39967: LD_ADDR_EXP 54
39971: PUSH
39972: LD_EXP 54
39976: PPUSH
39977: LD_VAR 0 1
39981: PPUSH
39982: LD_EXP 54
39986: PUSH
39987: LD_VAR 0 1
39991: ARRAY
39992: PPUSH
39993: LD_EXP 54
39997: PUSH
39998: LD_VAR 0 1
40002: ARRAY
40003: PUSH
40004: LD_INT 1
40006: PLUS
40007: PPUSH
40008: LD_VAR 0 5
40012: PUSH
40013: LD_INT 1
40015: ARRAY
40016: PUSH
40017: LD_VAR 0 7
40021: PUSH
40022: LD_INT 1
40024: ARRAY
40025: PUSH
40026: LD_VAR 0 7
40030: PUSH
40031: LD_INT 2
40033: ARRAY
40034: PUSH
40035: LD_VAR 0 7
40039: PUSH
40040: LD_INT 3
40042: ARRAY
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: PPUSH
40050: CALL_OW 2
40054: PPUSH
40055: CALL_OW 1
40059: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
40060: LD_ADDR_VAR 0 5
40064: PUSH
40065: LD_VAR 0 5
40069: PPUSH
40070: LD_INT 1
40072: PPUSH
40073: CALL_OW 3
40077: ST_TO_ADDR
// if not ext_list then
40078: LD_VAR 0 5
40082: NOT
40083: IFFALSE 40089
// exit ;
40085: POP
40086: POP
40087: GO 40093
// end ;
40089: GO 39964
40091: POP
40092: POP
// end ;
40093: LD_VAR 0 6
40097: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
40098: LD_INT 0
40100: PPUSH
// if not mc_bases or not base or not weapon_list then
40101: LD_EXP 49
40105: NOT
40106: PUSH
40107: LD_VAR 0 1
40111: NOT
40112: OR
40113: PUSH
40114: LD_VAR 0 2
40118: NOT
40119: OR
40120: IFFALSE 40124
// exit ;
40122: GO 40149
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
40124: LD_ADDR_EXP 88
40128: PUSH
40129: LD_EXP 88
40133: PPUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: LD_VAR 0 2
40143: PPUSH
40144: CALL_OW 1
40148: ST_TO_ADDR
// end ;
40149: LD_VAR 0 3
40153: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
40154: LD_INT 0
40156: PPUSH
// if not mc_bases or not base or not tech_list then
40157: LD_EXP 49
40161: NOT
40162: PUSH
40163: LD_VAR 0 1
40167: NOT
40168: OR
40169: PUSH
40170: LD_VAR 0 2
40174: NOT
40175: OR
40176: IFFALSE 40180
// exit ;
40178: GO 40205
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
40180: LD_ADDR_EXP 76
40184: PUSH
40185: LD_EXP 76
40189: PPUSH
40190: LD_VAR 0 1
40194: PPUSH
40195: LD_VAR 0 2
40199: PPUSH
40200: CALL_OW 1
40204: ST_TO_ADDR
// end ;
40205: LD_VAR 0 3
40209: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
40210: LD_INT 0
40212: PPUSH
// if not mc_bases or not parking_area or not base then
40213: LD_EXP 49
40217: NOT
40218: PUSH
40219: LD_VAR 0 2
40223: NOT
40224: OR
40225: PUSH
40226: LD_VAR 0 1
40230: NOT
40231: OR
40232: IFFALSE 40236
// exit ;
40234: GO 40261
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
40236: LD_ADDR_EXP 73
40240: PUSH
40241: LD_EXP 73
40245: PPUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: LD_VAR 0 2
40255: PPUSH
40256: CALL_OW 1
40260: ST_TO_ADDR
// end ;
40261: LD_VAR 0 3
40265: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
40266: LD_INT 0
40268: PPUSH
// if not mc_bases or not base or not scan_area then
40269: LD_EXP 49
40273: NOT
40274: PUSH
40275: LD_VAR 0 1
40279: NOT
40280: OR
40281: PUSH
40282: LD_VAR 0 2
40286: NOT
40287: OR
40288: IFFALSE 40292
// exit ;
40290: GO 40317
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
40292: LD_ADDR_EXP 74
40296: PUSH
40297: LD_EXP 74
40301: PPUSH
40302: LD_VAR 0 1
40306: PPUSH
40307: LD_VAR 0 2
40311: PPUSH
40312: CALL_OW 1
40316: ST_TO_ADDR
// end ;
40317: LD_VAR 0 3
40321: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
40322: LD_INT 0
40324: PPUSH
40325: PPUSH
// if not mc_bases or not base then
40326: LD_EXP 49
40330: NOT
40331: PUSH
40332: LD_VAR 0 1
40336: NOT
40337: OR
40338: IFFALSE 40342
// exit ;
40340: GO 40406
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 4
40358: PUSH
40359: LD_INT 11
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
40369: LD_ADDR_EXP 76
40373: PUSH
40374: LD_EXP 76
40378: PPUSH
40379: LD_VAR 0 1
40383: PPUSH
40384: LD_EXP 76
40388: PUSH
40389: LD_VAR 0 1
40393: ARRAY
40394: PUSH
40395: LD_VAR 0 3
40399: DIFF
40400: PPUSH
40401: CALL_OW 1
40405: ST_TO_ADDR
// end ;
40406: LD_VAR 0 2
40410: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
40411: LD_INT 0
40413: PPUSH
// result := mc_vehicles [ base ] ;
40414: LD_ADDR_VAR 0 3
40418: PUSH
40419: LD_EXP 68
40423: PUSH
40424: LD_VAR 0 1
40428: ARRAY
40429: ST_TO_ADDR
// if onlyCombat then
40430: LD_VAR 0 2
40434: IFFALSE 40577
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] ] ) ;
40436: LD_ADDR_VAR 0 3
40440: PUSH
40441: LD_VAR 0 3
40445: PUSH
40446: LD_VAR 0 3
40450: PPUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 34
40456: PUSH
40457: LD_INT 12
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 34
40466: PUSH
40467: LD_INT 51
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 34
40476: PUSH
40477: LD_EXP 93
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 34
40488: PUSH
40489: LD_INT 32
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 34
40498: PUSH
40499: LD_INT 13
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 34
40508: PUSH
40509: LD_INT 52
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 34
40518: PUSH
40519: LD_INT 14
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 34
40528: PUSH
40529: LD_INT 53
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 34
40538: PUSH
40539: LD_EXP 92
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 34
40550: PUSH
40551: LD_INT 31
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: PPUSH
40571: CALL_OW 72
40575: DIFF
40576: ST_TO_ADDR
// end ; end_of_file
40577: LD_VAR 0 3
40581: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
40582: LD_INT 0
40584: PPUSH
40585: PPUSH
40586: PPUSH
// if not mc_bases or not skirmish then
40587: LD_EXP 49
40591: NOT
40592: PUSH
40593: LD_EXP 47
40597: NOT
40598: OR
40599: IFFALSE 40603
// exit ;
40601: GO 40768
// for i = 1 to mc_bases do
40603: LD_ADDR_VAR 0 4
40607: PUSH
40608: DOUBLE
40609: LD_INT 1
40611: DEC
40612: ST_TO_ADDR
40613: LD_EXP 49
40617: PUSH
40618: FOR_TO
40619: IFFALSE 40766
// begin if sci in mc_bases [ i ] then
40621: LD_VAR 0 2
40625: PUSH
40626: LD_EXP 49
40630: PUSH
40631: LD_VAR 0 4
40635: ARRAY
40636: IN
40637: IFFALSE 40764
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
40639: LD_ADDR_EXP 78
40643: PUSH
40644: LD_EXP 78
40648: PPUSH
40649: LD_VAR 0 4
40653: PUSH
40654: LD_EXP 78
40658: PUSH
40659: LD_VAR 0 4
40663: ARRAY
40664: PUSH
40665: LD_INT 1
40667: PLUS
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PPUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL 51648 0 3
40682: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
40683: LD_ADDR_VAR 0 5
40687: PUSH
40688: LD_EXP 49
40692: PUSH
40693: LD_VAR 0 4
40697: ARRAY
40698: PPUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 30
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 30
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: LIST
40726: PPUSH
40727: CALL_OW 72
40731: PPUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 74
40741: ST_TO_ADDR
// if tmp then
40742: LD_VAR 0 5
40746: IFFALSE 40762
// ComStandNearbyBuilding ( ape , tmp ) ;
40748: LD_VAR 0 1
40752: PPUSH
40753: LD_VAR 0 5
40757: PPUSH
40758: CALL 46325 0 2
// break ;
40762: GO 40766
// end ; end ;
40764: GO 40618
40766: POP
40767: POP
// end ;
40768: LD_VAR 0 3
40772: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
40773: LD_INT 0
40775: PPUSH
40776: PPUSH
40777: PPUSH
// if not mc_bases or not skirmish then
40778: LD_EXP 49
40782: NOT
40783: PUSH
40784: LD_EXP 47
40788: NOT
40789: OR
40790: IFFALSE 40794
// exit ;
40792: GO 40883
// for i = 1 to mc_bases do
40794: LD_ADDR_VAR 0 4
40798: PUSH
40799: DOUBLE
40800: LD_INT 1
40802: DEC
40803: ST_TO_ADDR
40804: LD_EXP 49
40808: PUSH
40809: FOR_TO
40810: IFFALSE 40881
// begin if building in mc_busy_turret_list [ i ] then
40812: LD_VAR 0 1
40816: PUSH
40817: LD_EXP 59
40821: PUSH
40822: LD_VAR 0 4
40826: ARRAY
40827: IN
40828: IFFALSE 40879
// begin tmp := mc_busy_turret_list [ i ] diff building ;
40830: LD_ADDR_VAR 0 5
40834: PUSH
40835: LD_EXP 59
40839: PUSH
40840: LD_VAR 0 4
40844: ARRAY
40845: PUSH
40846: LD_VAR 0 1
40850: DIFF
40851: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
40852: LD_ADDR_EXP 59
40856: PUSH
40857: LD_EXP 59
40861: PPUSH
40862: LD_VAR 0 4
40866: PPUSH
40867: LD_VAR 0 5
40871: PPUSH
40872: CALL_OW 1
40876: ST_TO_ADDR
// break ;
40877: GO 40881
// end ; end ;
40879: GO 40809
40881: POP
40882: POP
// end ;
40883: LD_VAR 0 3
40887: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
40888: LD_INT 0
40890: PPUSH
40891: PPUSH
40892: PPUSH
// if not mc_bases or not skirmish then
40893: LD_EXP 49
40897: NOT
40898: PUSH
40899: LD_EXP 47
40903: NOT
40904: OR
40905: IFFALSE 40909
// exit ;
40907: GO 41108
// for i = 1 to mc_bases do
40909: LD_ADDR_VAR 0 5
40913: PUSH
40914: DOUBLE
40915: LD_INT 1
40917: DEC
40918: ST_TO_ADDR
40919: LD_EXP 49
40923: PUSH
40924: FOR_TO
40925: IFFALSE 41106
// if building in mc_bases [ i ] then
40927: LD_VAR 0 1
40931: PUSH
40932: LD_EXP 49
40936: PUSH
40937: LD_VAR 0 5
40941: ARRAY
40942: IN
40943: IFFALSE 41104
// begin tmp := mc_bases [ i ] diff building ;
40945: LD_ADDR_VAR 0 6
40949: PUSH
40950: LD_EXP 49
40954: PUSH
40955: LD_VAR 0 5
40959: ARRAY
40960: PUSH
40961: LD_VAR 0 1
40965: DIFF
40966: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
40967: LD_ADDR_EXP 49
40971: PUSH
40972: LD_EXP 49
40976: PPUSH
40977: LD_VAR 0 5
40981: PPUSH
40982: LD_VAR 0 6
40986: PPUSH
40987: CALL_OW 1
40991: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
40992: LD_VAR 0 1
40996: PUSH
40997: LD_EXP 57
41001: PUSH
41002: LD_VAR 0 5
41006: ARRAY
41007: IN
41008: IFFALSE 41047
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
41010: LD_ADDR_EXP 57
41014: PUSH
41015: LD_EXP 57
41019: PPUSH
41020: LD_VAR 0 5
41024: PPUSH
41025: LD_EXP 57
41029: PUSH
41030: LD_VAR 0 5
41034: ARRAY
41035: PUSH
41036: LD_VAR 0 1
41040: DIFF
41041: PPUSH
41042: CALL_OW 1
41046: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
41047: LD_VAR 0 1
41051: PUSH
41052: LD_EXP 58
41056: PUSH
41057: LD_VAR 0 5
41061: ARRAY
41062: IN
41063: IFFALSE 41102
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
41065: LD_ADDR_EXP 58
41069: PUSH
41070: LD_EXP 58
41074: PPUSH
41075: LD_VAR 0 5
41079: PPUSH
41080: LD_EXP 58
41084: PUSH
41085: LD_VAR 0 5
41089: ARRAY
41090: PUSH
41091: LD_VAR 0 1
41095: DIFF
41096: PPUSH
41097: CALL_OW 1
41101: ST_TO_ADDR
// break ;
41102: GO 41106
// end ;
41104: GO 40924
41106: POP
41107: POP
// end ;
41108: LD_VAR 0 4
41112: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
41113: LD_INT 0
41115: PPUSH
41116: PPUSH
41117: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
41118: LD_EXP 49
41122: NOT
41123: PUSH
41124: LD_EXP 47
41128: NOT
41129: OR
41130: PUSH
41131: LD_VAR 0 3
41135: PUSH
41136: LD_EXP 75
41140: IN
41141: NOT
41142: OR
41143: IFFALSE 41147
// exit ;
41145: GO 41270
// for i = 1 to mc_vehicles do
41147: LD_ADDR_VAR 0 6
41151: PUSH
41152: DOUBLE
41153: LD_INT 1
41155: DEC
41156: ST_TO_ADDR
41157: LD_EXP 68
41161: PUSH
41162: FOR_TO
41163: IFFALSE 41268
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
41165: LD_VAR 0 2
41169: PUSH
41170: LD_EXP 68
41174: PUSH
41175: LD_VAR 0 6
41179: ARRAY
41180: IN
41181: PUSH
41182: LD_VAR 0 1
41186: PUSH
41187: LD_EXP 68
41191: PUSH
41192: LD_VAR 0 6
41196: ARRAY
41197: IN
41198: OR
41199: IFFALSE 41266
// begin tmp := mc_vehicles [ i ] diff old ;
41201: LD_ADDR_VAR 0 7
41205: PUSH
41206: LD_EXP 68
41210: PUSH
41211: LD_VAR 0 6
41215: ARRAY
41216: PUSH
41217: LD_VAR 0 2
41221: DIFF
41222: ST_TO_ADDR
// tmp := tmp diff new ;
41223: LD_ADDR_VAR 0 7
41227: PUSH
41228: LD_VAR 0 7
41232: PUSH
41233: LD_VAR 0 1
41237: DIFF
41238: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
41239: LD_ADDR_EXP 68
41243: PUSH
41244: LD_EXP 68
41248: PPUSH
41249: LD_VAR 0 6
41253: PPUSH
41254: LD_VAR 0 7
41258: PPUSH
41259: CALL_OW 1
41263: ST_TO_ADDR
// break ;
41264: GO 41268
// end ;
41266: GO 41162
41268: POP
41269: POP
// end ;
41270: LD_VAR 0 5
41274: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
41275: LD_INT 0
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
// if not mc_bases or not skirmish then
41281: LD_EXP 49
41285: NOT
41286: PUSH
41287: LD_EXP 47
41291: NOT
41292: OR
41293: IFFALSE 41297
// exit ;
41295: GO 41680
// side := GetSide ( vehicle ) ;
41297: LD_ADDR_VAR 0 5
41301: PUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 255
41311: ST_TO_ADDR
// for i = 1 to mc_bases do
41312: LD_ADDR_VAR 0 4
41316: PUSH
41317: DOUBLE
41318: LD_INT 1
41320: DEC
41321: ST_TO_ADDR
41322: LD_EXP 49
41326: PUSH
41327: FOR_TO
41328: IFFALSE 41678
// begin if factory in mc_bases [ i ] then
41330: LD_VAR 0 2
41334: PUSH
41335: LD_EXP 49
41339: PUSH
41340: LD_VAR 0 4
41344: ARRAY
41345: IN
41346: IFFALSE 41676
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
41348: LD_EXP 71
41352: PUSH
41353: LD_VAR 0 4
41357: ARRAY
41358: PUSH
41359: LD_EXP 60
41363: PUSH
41364: LD_VAR 0 4
41368: ARRAY
41369: LESS
41370: PUSH
41371: LD_VAR 0 1
41375: PPUSH
41376: CALL_OW 264
41380: PUSH
41381: LD_INT 31
41383: PUSH
41384: LD_INT 32
41386: PUSH
41387: LD_INT 51
41389: PUSH
41390: LD_EXP 93
41394: PUSH
41395: LD_INT 12
41397: PUSH
41398: LD_INT 30
41400: PUSH
41401: LD_EXP 92
41405: PUSH
41406: LD_INT 11
41408: PUSH
41409: LD_INT 53
41411: PUSH
41412: LD_INT 14
41414: PUSH
41415: LD_EXP 96
41419: PUSH
41420: LD_INT 29
41422: PUSH
41423: LD_EXP 94
41427: PUSH
41428: LD_INT 13
41430: PUSH
41431: LD_INT 52
41433: PUSH
41434: LD_INT 48
41436: PUSH
41437: LD_INT 8
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: IN
41459: NOT
41460: AND
41461: IFFALSE 41502
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
41463: LD_ADDR_EXP 71
41467: PUSH
41468: LD_EXP 71
41472: PPUSH
41473: LD_VAR 0 4
41477: PPUSH
41478: LD_EXP 71
41482: PUSH
41483: LD_VAR 0 4
41487: ARRAY
41488: PUSH
41489: LD_VAR 0 1
41493: ADD
41494: PPUSH
41495: CALL_OW 1
41499: ST_TO_ADDR
41500: GO 41546
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
41502: LD_ADDR_EXP 68
41506: PUSH
41507: LD_EXP 68
41511: PPUSH
41512: LD_VAR 0 4
41516: PUSH
41517: LD_EXP 68
41521: PUSH
41522: LD_VAR 0 4
41526: ARRAY
41527: PUSH
41528: LD_INT 1
41530: PLUS
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PPUSH
41536: LD_VAR 0 1
41540: PPUSH
41541: CALL 51648 0 3
41545: ST_TO_ADDR
// if not mc_scan [ i ] then
41546: LD_EXP 72
41550: PUSH
41551: LD_VAR 0 4
41555: ARRAY
41556: NOT
41557: IFFALSE 41676
// begin if GetControl ( vehicle ) = control_remote then
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 263
41568: PUSH
41569: LD_INT 2
41571: EQUAL
41572: IFFALSE 41592
// repeat wait ( 0 0$1 ) ;
41574: LD_INT 35
41576: PPUSH
41577: CALL_OW 67
// until IsControledBy ( vehicle ) ;
41581: LD_VAR 0 1
41585: PPUSH
41586: CALL_OW 312
41590: IFFALSE 41574
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
41592: LD_VAR 0 1
41596: PPUSH
41597: LD_EXP 73
41601: PUSH
41602: LD_VAR 0 4
41606: ARRAY
41607: PPUSH
41608: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
41612: LD_VAR 0 1
41616: PPUSH
41617: CALL_OW 263
41621: PUSH
41622: LD_INT 1
41624: NONEQUAL
41625: IFFALSE 41629
// break ;
41627: GO 41678
// repeat wait ( 0 0$1 ) ;
41629: LD_INT 35
41631: PPUSH
41632: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
41636: LD_VAR 0 1
41640: PPUSH
41641: LD_EXP 73
41645: PUSH
41646: LD_VAR 0 4
41650: ARRAY
41651: PPUSH
41652: CALL_OW 308
41656: IFFALSE 41629
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 311
41667: PPUSH
41668: CALL_OW 121
// exit ;
41672: POP
41673: POP
41674: GO 41680
// end ; end ; end ;
41676: GO 41327
41678: POP
41679: POP
// end ;
41680: LD_VAR 0 3
41684: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
41685: LD_INT 0
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
// if not mc_bases or not skirmish then
41691: LD_EXP 49
41695: NOT
41696: PUSH
41697: LD_EXP 47
41701: NOT
41702: OR
41703: IFFALSE 41707
// exit ;
41705: GO 42060
// repeat wait ( 0 0$1 ) ;
41707: LD_INT 35
41709: PPUSH
41710: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
41714: LD_VAR 0 2
41718: PPUSH
41719: LD_VAR 0 3
41723: PPUSH
41724: CALL_OW 284
41728: IFFALSE 41707
// if GetResourceTypeXY ( x , y ) = mat_artefact then
41730: LD_VAR 0 2
41734: PPUSH
41735: LD_VAR 0 3
41739: PPUSH
41740: CALL_OW 283
41744: PUSH
41745: LD_INT 4
41747: EQUAL
41748: IFFALSE 41752
// exit ;
41750: GO 42060
// for i = 1 to mc_bases do
41752: LD_ADDR_VAR 0 7
41756: PUSH
41757: DOUBLE
41758: LD_INT 1
41760: DEC
41761: ST_TO_ADDR
41762: LD_EXP 49
41766: PUSH
41767: FOR_TO
41768: IFFALSE 42058
// begin if mc_crates_area [ i ] then
41770: LD_EXP 67
41774: PUSH
41775: LD_VAR 0 7
41779: ARRAY
41780: IFFALSE 41891
// for j in mc_crates_area [ i ] do
41782: LD_ADDR_VAR 0 8
41786: PUSH
41787: LD_EXP 67
41791: PUSH
41792: LD_VAR 0 7
41796: ARRAY
41797: PUSH
41798: FOR_IN
41799: IFFALSE 41889
// if InArea ( x , y , j ) then
41801: LD_VAR 0 2
41805: PPUSH
41806: LD_VAR 0 3
41810: PPUSH
41811: LD_VAR 0 8
41815: PPUSH
41816: CALL_OW 309
41820: IFFALSE 41887
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41822: LD_ADDR_EXP 65
41826: PUSH
41827: LD_EXP 65
41831: PPUSH
41832: LD_VAR 0 7
41836: PUSH
41837: LD_EXP 65
41841: PUSH
41842: LD_VAR 0 7
41846: ARRAY
41847: PUSH
41848: LD_INT 1
41850: PLUS
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PPUSH
41856: LD_VAR 0 4
41860: PUSH
41861: LD_VAR 0 2
41865: PUSH
41866: LD_VAR 0 3
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: PPUSH
41876: CALL 51648 0 3
41880: ST_TO_ADDR
// exit ;
41881: POP
41882: POP
41883: POP
41884: POP
41885: GO 42060
// end ;
41887: GO 41798
41889: POP
41890: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41891: LD_ADDR_VAR 0 9
41895: PUSH
41896: LD_EXP 49
41900: PUSH
41901: LD_VAR 0 7
41905: ARRAY
41906: PPUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 30
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 30
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: PPUSH
41935: CALL_OW 72
41939: ST_TO_ADDR
// if not depot then
41940: LD_VAR 0 9
41944: NOT
41945: IFFALSE 41949
// continue ;
41947: GO 41767
// for j in depot do
41949: LD_ADDR_VAR 0 8
41953: PUSH
41954: LD_VAR 0 9
41958: PUSH
41959: FOR_IN
41960: IFFALSE 42054
// if GetDistUnitXY ( j , x , y ) < 30 then
41962: LD_VAR 0 8
41966: PPUSH
41967: LD_VAR 0 2
41971: PPUSH
41972: LD_VAR 0 3
41976: PPUSH
41977: CALL_OW 297
41981: PUSH
41982: LD_INT 30
41984: LESS
41985: IFFALSE 42052
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41987: LD_ADDR_EXP 65
41991: PUSH
41992: LD_EXP 65
41996: PPUSH
41997: LD_VAR 0 7
42001: PUSH
42002: LD_EXP 65
42006: PUSH
42007: LD_VAR 0 7
42011: ARRAY
42012: PUSH
42013: LD_INT 1
42015: PLUS
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PPUSH
42021: LD_VAR 0 4
42025: PUSH
42026: LD_VAR 0 2
42030: PUSH
42031: LD_VAR 0 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: PPUSH
42041: CALL 51648 0 3
42045: ST_TO_ADDR
// exit ;
42046: POP
42047: POP
42048: POP
42049: POP
42050: GO 42060
// end ;
42052: GO 41959
42054: POP
42055: POP
// end ;
42056: GO 41767
42058: POP
42059: POP
// end ;
42060: LD_VAR 0 6
42064: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
42065: LD_INT 0
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
// if not mc_bases or not skirmish then
42071: LD_EXP 49
42075: NOT
42076: PUSH
42077: LD_EXP 47
42081: NOT
42082: OR
42083: IFFALSE 42087
// exit ;
42085: GO 42364
// side := GetSide ( lab ) ;
42087: LD_ADDR_VAR 0 4
42091: PUSH
42092: LD_VAR 0 2
42096: PPUSH
42097: CALL_OW 255
42101: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
42102: LD_VAR 0 4
42106: PUSH
42107: LD_EXP 75
42111: IN
42112: NOT
42113: PUSH
42114: LD_EXP 76
42118: NOT
42119: OR
42120: PUSH
42121: LD_EXP 49
42125: NOT
42126: OR
42127: IFFALSE 42131
// exit ;
42129: GO 42364
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
42131: LD_ADDR_EXP 76
42135: PUSH
42136: LD_EXP 76
42140: PPUSH
42141: LD_VAR 0 4
42145: PPUSH
42146: LD_EXP 76
42150: PUSH
42151: LD_VAR 0 4
42155: ARRAY
42156: PUSH
42157: LD_VAR 0 1
42161: DIFF
42162: PPUSH
42163: CALL_OW 1
42167: ST_TO_ADDR
// for i = 1 to mc_bases do
42168: LD_ADDR_VAR 0 5
42172: PUSH
42173: DOUBLE
42174: LD_INT 1
42176: DEC
42177: ST_TO_ADDR
42178: LD_EXP 49
42182: PUSH
42183: FOR_TO
42184: IFFALSE 42362
// begin if lab in mc_bases [ i ] then
42186: LD_VAR 0 2
42190: PUSH
42191: LD_EXP 49
42195: PUSH
42196: LD_VAR 0 5
42200: ARRAY
42201: IN
42202: IFFALSE 42360
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
42204: LD_VAR 0 1
42208: PUSH
42209: LD_INT 11
42211: PUSH
42212: LD_INT 4
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: IN
42227: PUSH
42228: LD_EXP 79
42232: PUSH
42233: LD_VAR 0 5
42237: ARRAY
42238: AND
42239: IFFALSE 42360
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
42241: LD_ADDR_VAR 0 6
42245: PUSH
42246: LD_EXP 79
42250: PUSH
42251: LD_VAR 0 5
42255: ARRAY
42256: PUSH
42257: LD_INT 1
42259: ARRAY
42260: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
42261: LD_ADDR_EXP 79
42265: PUSH
42266: LD_EXP 79
42270: PPUSH
42271: LD_VAR 0 5
42275: PPUSH
42276: EMPTY
42277: PPUSH
42278: CALL_OW 1
42282: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
42283: LD_VAR 0 6
42287: PPUSH
42288: LD_INT 0
42290: PPUSH
42291: CALL_OW 109
// ComExitBuilding ( tmp ) ;
42295: LD_VAR 0 6
42299: PPUSH
42300: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
42304: LD_ADDR_EXP 78
42308: PUSH
42309: LD_EXP 78
42313: PPUSH
42314: LD_VAR 0 5
42318: PPUSH
42319: LD_EXP 78
42323: PUSH
42324: LD_VAR 0 5
42328: ARRAY
42329: PPUSH
42330: LD_INT 1
42332: PPUSH
42333: LD_VAR 0 6
42337: PPUSH
42338: CALL_OW 2
42342: PPUSH
42343: CALL_OW 1
42347: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
42348: LD_VAR 0 5
42352: PPUSH
42353: LD_INT 112
42355: PPUSH
42356: CALL 19797 0 2
// end ; end ; end ;
42360: GO 42183
42362: POP
42363: POP
// end ;
42364: LD_VAR 0 3
42368: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
42369: LD_INT 0
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
// if not mc_bases or not skirmish then
42379: LD_EXP 49
42383: NOT
42384: PUSH
42385: LD_EXP 47
42389: NOT
42390: OR
42391: IFFALSE 42395
// exit ;
42393: GO 43338
// for i = 1 to mc_bases do
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: DOUBLE
42401: LD_INT 1
42403: DEC
42404: ST_TO_ADDR
42405: LD_EXP 49
42409: PUSH
42410: FOR_TO
42411: IFFALSE 43336
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
42413: LD_VAR 0 1
42417: PUSH
42418: LD_EXP 49
42422: PUSH
42423: LD_VAR 0 3
42427: ARRAY
42428: IN
42429: PUSH
42430: LD_VAR 0 1
42434: PUSH
42435: LD_EXP 56
42439: PUSH
42440: LD_VAR 0 3
42444: ARRAY
42445: IN
42446: OR
42447: PUSH
42448: LD_VAR 0 1
42452: PUSH
42453: LD_EXP 68
42457: PUSH
42458: LD_VAR 0 3
42462: ARRAY
42463: IN
42464: OR
42465: PUSH
42466: LD_VAR 0 1
42470: PUSH
42471: LD_EXP 78
42475: PUSH
42476: LD_VAR 0 3
42480: ARRAY
42481: IN
42482: OR
42483: PUSH
42484: LD_VAR 0 1
42488: PUSH
42489: LD_EXP 79
42493: PUSH
42494: LD_VAR 0 3
42498: ARRAY
42499: IN
42500: OR
42501: IFFALSE 43334
// begin if un in mc_ape [ i ] then
42503: LD_VAR 0 1
42507: PUSH
42508: LD_EXP 78
42512: PUSH
42513: LD_VAR 0 3
42517: ARRAY
42518: IN
42519: IFFALSE 42558
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
42521: LD_ADDR_EXP 78
42525: PUSH
42526: LD_EXP 78
42530: PPUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: LD_EXP 78
42540: PUSH
42541: LD_VAR 0 3
42545: ARRAY
42546: PUSH
42547: LD_VAR 0 1
42551: DIFF
42552: PPUSH
42553: CALL_OW 1
42557: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
42558: LD_VAR 0 1
42562: PUSH
42563: LD_EXP 79
42567: PUSH
42568: LD_VAR 0 3
42572: ARRAY
42573: IN
42574: IFFALSE 42598
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
42576: LD_ADDR_EXP 79
42580: PUSH
42581: LD_EXP 79
42585: PPUSH
42586: LD_VAR 0 3
42590: PPUSH
42591: EMPTY
42592: PPUSH
42593: CALL_OW 1
42597: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
42598: LD_VAR 0 1
42602: PPUSH
42603: CALL_OW 247
42607: PUSH
42608: LD_INT 2
42610: EQUAL
42611: PUSH
42612: LD_VAR 0 1
42616: PPUSH
42617: CALL_OW 110
42621: PUSH
42622: LD_INT 20
42624: EQUAL
42625: AND
42626: IFFALSE 42729
// begin fac := MC_GetBuilding ( i , b_factory ) ;
42628: LD_ADDR_VAR 0 8
42632: PUSH
42633: LD_VAR 0 3
42637: PPUSH
42638: LD_INT 3
42640: PPUSH
42641: CALL 39428 0 2
42645: ST_TO_ADDR
// if fac then
42646: LD_VAR 0 8
42650: IFFALSE 42729
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
42652: LD_ADDR_VAR 0 9
42656: PUSH
42657: LD_VAR 0 8
42661: PPUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 265
42671: PPUSH
42672: LD_VAR 0 1
42676: PPUSH
42677: CALL_OW 262
42681: PPUSH
42682: LD_VAR 0 1
42686: PPUSH
42687: CALL_OW 263
42691: PPUSH
42692: LD_VAR 0 1
42696: PPUSH
42697: CALL_OW 264
42701: PPUSH
42702: CALL 49248 0 5
42706: ST_TO_ADDR
// if components then
42707: LD_VAR 0 9
42711: IFFALSE 42727
// MC_InsertProduceList ( i , components ) ;
42713: LD_VAR 0 3
42717: PPUSH
42718: LD_VAR 0 9
42722: PPUSH
42723: CALL 38998 0 2
// break ;
42727: GO 43336
// end ; end ; if GetType ( un ) = unit_building then
42729: LD_VAR 0 1
42733: PPUSH
42734: CALL_OW 247
42738: PUSH
42739: LD_INT 3
42741: EQUAL
42742: IFFALSE 43057
// begin btype := GetBType ( un ) ;
42744: LD_ADDR_VAR 0 5
42748: PUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: CALL_OW 266
42758: ST_TO_ADDR
// if btype = b_warehouse then
42759: LD_VAR 0 5
42763: PUSH
42764: LD_INT 1
42766: EQUAL
42767: IFFALSE 42785
// begin btype := b_depot ;
42769: LD_ADDR_VAR 0 5
42773: PUSH
42774: LD_INT 0
42776: ST_TO_ADDR
// pos := 1 ;
42777: LD_ADDR_VAR 0 6
42781: PUSH
42782: LD_INT 1
42784: ST_TO_ADDR
// end ; if btype = b_factory then
42785: LD_VAR 0 5
42789: PUSH
42790: LD_INT 3
42792: EQUAL
42793: IFFALSE 42811
// begin btype := b_workshop ;
42795: LD_ADDR_VAR 0 5
42799: PUSH
42800: LD_INT 2
42802: ST_TO_ADDR
// pos := 1 ;
42803: LD_ADDR_VAR 0 6
42807: PUSH
42808: LD_INT 1
42810: ST_TO_ADDR
// end ; if btype = b_barracks then
42811: LD_VAR 0 5
42815: PUSH
42816: LD_INT 5
42818: EQUAL
42819: IFFALSE 42829
// btype := b_armoury ;
42821: LD_ADDR_VAR 0 5
42825: PUSH
42826: LD_INT 4
42828: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
42829: LD_VAR 0 5
42833: PUSH
42834: LD_INT 7
42836: PUSH
42837: LD_INT 8
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: IN
42844: IFFALSE 42854
// btype := b_lab ;
42846: LD_ADDR_VAR 0 5
42850: PUSH
42851: LD_INT 6
42853: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
42854: LD_ADDR_EXP 54
42858: PUSH
42859: LD_EXP 54
42863: PPUSH
42864: LD_VAR 0 3
42868: PUSH
42869: LD_EXP 54
42873: PUSH
42874: LD_VAR 0 3
42878: ARRAY
42879: PUSH
42880: LD_INT 1
42882: PLUS
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PPUSH
42888: LD_VAR 0 5
42892: PUSH
42893: LD_VAR 0 1
42897: PPUSH
42898: CALL_OW 250
42902: PUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 251
42912: PUSH
42913: LD_VAR 0 1
42917: PPUSH
42918: CALL_OW 254
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: PPUSH
42929: CALL 51648 0 3
42933: ST_TO_ADDR
// if pos = 1 then
42934: LD_VAR 0 6
42938: PUSH
42939: LD_INT 1
42941: EQUAL
42942: IFFALSE 43057
// begin tmp := mc_build_list [ i ] ;
42944: LD_ADDR_VAR 0 7
42948: PUSH
42949: LD_EXP 54
42953: PUSH
42954: LD_VAR 0 3
42958: ARRAY
42959: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
42960: LD_VAR 0 7
42964: PPUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 30
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 30
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: PPUSH
42993: CALL_OW 72
42997: IFFALSE 43007
// pos := 2 ;
42999: LD_ADDR_VAR 0 6
43003: PUSH
43004: LD_INT 2
43006: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
43007: LD_ADDR_VAR 0 7
43011: PUSH
43012: LD_VAR 0 7
43016: PPUSH
43017: LD_VAR 0 6
43021: PPUSH
43022: LD_VAR 0 7
43026: PPUSH
43027: CALL 51974 0 3
43031: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
43032: LD_ADDR_EXP 54
43036: PUSH
43037: LD_EXP 54
43041: PPUSH
43042: LD_VAR 0 3
43046: PPUSH
43047: LD_VAR 0 7
43051: PPUSH
43052: CALL_OW 1
43056: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
43057: LD_VAR 0 1
43061: PUSH
43062: LD_EXP 49
43066: PUSH
43067: LD_VAR 0 3
43071: ARRAY
43072: IN
43073: IFFALSE 43112
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
43075: LD_ADDR_EXP 49
43079: PUSH
43080: LD_EXP 49
43084: PPUSH
43085: LD_VAR 0 3
43089: PPUSH
43090: LD_EXP 49
43094: PUSH
43095: LD_VAR 0 3
43099: ARRAY
43100: PUSH
43101: LD_VAR 0 1
43105: DIFF
43106: PPUSH
43107: CALL_OW 1
43111: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
43112: LD_VAR 0 1
43116: PUSH
43117: LD_EXP 56
43121: PUSH
43122: LD_VAR 0 3
43126: ARRAY
43127: IN
43128: IFFALSE 43167
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
43130: LD_ADDR_EXP 56
43134: PUSH
43135: LD_EXP 56
43139: PPUSH
43140: LD_VAR 0 3
43144: PPUSH
43145: LD_EXP 56
43149: PUSH
43150: LD_VAR 0 3
43154: ARRAY
43155: PUSH
43156: LD_VAR 0 1
43160: DIFF
43161: PPUSH
43162: CALL_OW 1
43166: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
43167: LD_VAR 0 1
43171: PUSH
43172: LD_EXP 68
43176: PUSH
43177: LD_VAR 0 3
43181: ARRAY
43182: IN
43183: IFFALSE 43222
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
43185: LD_ADDR_EXP 68
43189: PUSH
43190: LD_EXP 68
43194: PPUSH
43195: LD_VAR 0 3
43199: PPUSH
43200: LD_EXP 68
43204: PUSH
43205: LD_VAR 0 3
43209: ARRAY
43210: PUSH
43211: LD_VAR 0 1
43215: DIFF
43216: PPUSH
43217: CALL_OW 1
43221: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
43222: LD_VAR 0 1
43226: PUSH
43227: LD_EXP 58
43231: PUSH
43232: LD_VAR 0 3
43236: ARRAY
43237: IN
43238: IFFALSE 43277
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
43240: LD_ADDR_EXP 58
43244: PUSH
43245: LD_EXP 58
43249: PPUSH
43250: LD_VAR 0 3
43254: PPUSH
43255: LD_EXP 58
43259: PUSH
43260: LD_VAR 0 3
43264: ARRAY
43265: PUSH
43266: LD_VAR 0 1
43270: DIFF
43271: PPUSH
43272: CALL_OW 1
43276: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
43277: LD_VAR 0 1
43281: PUSH
43282: LD_EXP 57
43286: PUSH
43287: LD_VAR 0 3
43291: ARRAY
43292: IN
43293: IFFALSE 43332
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
43295: LD_ADDR_EXP 57
43299: PUSH
43300: LD_EXP 57
43304: PPUSH
43305: LD_VAR 0 3
43309: PPUSH
43310: LD_EXP 57
43314: PUSH
43315: LD_VAR 0 3
43319: ARRAY
43320: PUSH
43321: LD_VAR 0 1
43325: DIFF
43326: PPUSH
43327: CALL_OW 1
43331: ST_TO_ADDR
// end ; break ;
43332: GO 43336
// end ;
43334: GO 42410
43336: POP
43337: POP
// end ;
43338: LD_VAR 0 2
43342: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
43343: LD_INT 0
43345: PPUSH
43346: PPUSH
43347: PPUSH
// if not mc_bases or not skirmish then
43348: LD_EXP 49
43352: NOT
43353: PUSH
43354: LD_EXP 47
43358: NOT
43359: OR
43360: IFFALSE 43364
// exit ;
43362: GO 43579
// for i = 1 to mc_bases do
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: DOUBLE
43370: LD_INT 1
43372: DEC
43373: ST_TO_ADDR
43374: LD_EXP 49
43378: PUSH
43379: FOR_TO
43380: IFFALSE 43577
// begin if building in mc_construct_list [ i ] then
43382: LD_VAR 0 1
43386: PUSH
43387: LD_EXP 56
43391: PUSH
43392: LD_VAR 0 3
43396: ARRAY
43397: IN
43398: IFFALSE 43575
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
43400: LD_ADDR_EXP 56
43404: PUSH
43405: LD_EXP 56
43409: PPUSH
43410: LD_VAR 0 3
43414: PPUSH
43415: LD_EXP 56
43419: PUSH
43420: LD_VAR 0 3
43424: ARRAY
43425: PUSH
43426: LD_VAR 0 1
43430: DIFF
43431: PPUSH
43432: CALL_OW 1
43436: ST_TO_ADDR
// if building in mc_lab [ i ] then
43437: LD_VAR 0 1
43441: PUSH
43442: LD_EXP 82
43446: PUSH
43447: LD_VAR 0 3
43451: ARRAY
43452: IN
43453: IFFALSE 43508
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
43455: LD_ADDR_EXP 83
43459: PUSH
43460: LD_EXP 83
43464: PPUSH
43465: LD_VAR 0 3
43469: PPUSH
43470: LD_EXP 83
43474: PUSH
43475: LD_VAR 0 3
43479: ARRAY
43480: PPUSH
43481: LD_INT 1
43483: PPUSH
43484: LD_EXP 83
43488: PUSH
43489: LD_VAR 0 3
43493: ARRAY
43494: PPUSH
43495: LD_INT 0
43497: PPUSH
43498: CALL 51066 0 4
43502: PPUSH
43503: CALL_OW 1
43507: ST_TO_ADDR
// if not building in mc_bases [ i ] then
43508: LD_VAR 0 1
43512: PUSH
43513: LD_EXP 49
43517: PUSH
43518: LD_VAR 0 3
43522: ARRAY
43523: IN
43524: NOT
43525: IFFALSE 43571
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
43527: LD_ADDR_EXP 49
43531: PUSH
43532: LD_EXP 49
43536: PPUSH
43537: LD_VAR 0 3
43541: PUSH
43542: LD_EXP 49
43546: PUSH
43547: LD_VAR 0 3
43551: ARRAY
43552: PUSH
43553: LD_INT 1
43555: PLUS
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PPUSH
43561: LD_VAR 0 1
43565: PPUSH
43566: CALL 51648 0 3
43570: ST_TO_ADDR
// exit ;
43571: POP
43572: POP
43573: GO 43579
// end ; end ;
43575: GO 43379
43577: POP
43578: POP
// end ;
43579: LD_VAR 0 2
43583: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
43584: LD_INT 0
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
// if not mc_bases or not skirmish then
43593: LD_EXP 49
43597: NOT
43598: PUSH
43599: LD_EXP 47
43603: NOT
43604: OR
43605: IFFALSE 43609
// exit ;
43607: GO 44270
// for i = 1 to mc_bases do
43609: LD_ADDR_VAR 0 3
43613: PUSH
43614: DOUBLE
43615: LD_INT 1
43617: DEC
43618: ST_TO_ADDR
43619: LD_EXP 49
43623: PUSH
43624: FOR_TO
43625: IFFALSE 44268
// begin if building in mc_construct_list [ i ] then
43627: LD_VAR 0 1
43631: PUSH
43632: LD_EXP 56
43636: PUSH
43637: LD_VAR 0 3
43641: ARRAY
43642: IN
43643: IFFALSE 44266
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
43645: LD_ADDR_EXP 56
43649: PUSH
43650: LD_EXP 56
43654: PPUSH
43655: LD_VAR 0 3
43659: PPUSH
43660: LD_EXP 56
43664: PUSH
43665: LD_VAR 0 3
43669: ARRAY
43670: PUSH
43671: LD_VAR 0 1
43675: DIFF
43676: PPUSH
43677: CALL_OW 1
43681: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
43682: LD_ADDR_EXP 49
43686: PUSH
43687: LD_EXP 49
43691: PPUSH
43692: LD_VAR 0 3
43696: PUSH
43697: LD_EXP 49
43701: PUSH
43702: LD_VAR 0 3
43706: ARRAY
43707: PUSH
43708: LD_INT 1
43710: PLUS
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PPUSH
43716: LD_VAR 0 1
43720: PPUSH
43721: CALL 51648 0 3
43725: ST_TO_ADDR
// btype := GetBType ( building ) ;
43726: LD_ADDR_VAR 0 5
43730: PUSH
43731: LD_VAR 0 1
43735: PPUSH
43736: CALL_OW 266
43740: ST_TO_ADDR
// side := GetSide ( building ) ;
43741: LD_ADDR_VAR 0 8
43745: PUSH
43746: LD_VAR 0 1
43750: PPUSH
43751: CALL_OW 255
43755: ST_TO_ADDR
// if btype = b_lab then
43756: LD_VAR 0 5
43760: PUSH
43761: LD_INT 6
43763: EQUAL
43764: IFFALSE 43814
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
43766: LD_ADDR_EXP 82
43770: PUSH
43771: LD_EXP 82
43775: PPUSH
43776: LD_VAR 0 3
43780: PUSH
43781: LD_EXP 82
43785: PUSH
43786: LD_VAR 0 3
43790: ARRAY
43791: PUSH
43792: LD_INT 1
43794: PLUS
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PPUSH
43800: LD_VAR 0 1
43804: PPUSH
43805: CALL 51648 0 3
43809: ST_TO_ADDR
// exit ;
43810: POP
43811: POP
43812: GO 44270
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
43814: LD_VAR 0 5
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 4
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: IN
43833: IFFALSE 43957
// begin if btype = b_armoury then
43835: LD_VAR 0 5
43839: PUSH
43840: LD_INT 4
43842: EQUAL
43843: IFFALSE 43853
// btype := b_barracks ;
43845: LD_ADDR_VAR 0 5
43849: PUSH
43850: LD_INT 5
43852: ST_TO_ADDR
// if btype = b_depot then
43853: LD_VAR 0 5
43857: PUSH
43858: LD_INT 0
43860: EQUAL
43861: IFFALSE 43871
// btype := b_warehouse ;
43863: LD_ADDR_VAR 0 5
43867: PUSH
43868: LD_INT 1
43870: ST_TO_ADDR
// if btype = b_workshop then
43871: LD_VAR 0 5
43875: PUSH
43876: LD_INT 2
43878: EQUAL
43879: IFFALSE 43889
// btype := b_factory ;
43881: LD_ADDR_VAR 0 5
43885: PUSH
43886: LD_INT 3
43888: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
43889: LD_VAR 0 5
43893: PPUSH
43894: LD_VAR 0 8
43898: PPUSH
43899: CALL_OW 323
43903: PUSH
43904: LD_INT 1
43906: EQUAL
43907: IFFALSE 43953
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
43909: LD_ADDR_EXP 81
43913: PUSH
43914: LD_EXP 81
43918: PPUSH
43919: LD_VAR 0 3
43923: PUSH
43924: LD_EXP 81
43928: PUSH
43929: LD_VAR 0 3
43933: ARRAY
43934: PUSH
43935: LD_INT 1
43937: PLUS
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PPUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL 51648 0 3
43952: ST_TO_ADDR
// exit ;
43953: POP
43954: POP
43955: GO 44270
// end ; if btype in [ b_bunker , b_turret ] then
43957: LD_VAR 0 5
43961: PUSH
43962: LD_INT 32
43964: PUSH
43965: LD_INT 33
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: IN
43972: IFFALSE 44262
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
43974: LD_ADDR_EXP 57
43978: PUSH
43979: LD_EXP 57
43983: PPUSH
43984: LD_VAR 0 3
43988: PUSH
43989: LD_EXP 57
43993: PUSH
43994: LD_VAR 0 3
43998: ARRAY
43999: PUSH
44000: LD_INT 1
44002: PLUS
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PPUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: CALL 51648 0 3
44017: ST_TO_ADDR
// if btype = b_bunker then
44018: LD_VAR 0 5
44022: PUSH
44023: LD_INT 32
44025: EQUAL
44026: IFFALSE 44262
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
44028: LD_ADDR_EXP 58
44032: PUSH
44033: LD_EXP 58
44037: PPUSH
44038: LD_VAR 0 3
44042: PUSH
44043: LD_EXP 58
44047: PUSH
44048: LD_VAR 0 3
44052: ARRAY
44053: PUSH
44054: LD_INT 1
44056: PLUS
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PPUSH
44062: LD_VAR 0 1
44066: PPUSH
44067: CALL 51648 0 3
44071: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
44072: LD_ADDR_VAR 0 6
44076: PUSH
44077: LD_EXP 49
44081: PUSH
44082: LD_VAR 0 3
44086: ARRAY
44087: PPUSH
44088: LD_INT 25
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: PUSH
44101: LD_INT 54
44103: PUSH
44104: EMPTY
44105: LIST
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PPUSH
44115: CALL_OW 72
44119: ST_TO_ADDR
// if tmp then
44120: LD_VAR 0 6
44124: IFFALSE 44130
// exit ;
44126: POP
44127: POP
44128: GO 44270
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
44130: LD_ADDR_VAR 0 6
44134: PUSH
44135: LD_EXP 49
44139: PUSH
44140: LD_VAR 0 3
44144: ARRAY
44145: PPUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 30
44151: PUSH
44152: LD_INT 4
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 30
44161: PUSH
44162: LD_INT 5
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: PPUSH
44174: CALL_OW 72
44178: ST_TO_ADDR
// if not tmp then
44179: LD_VAR 0 6
44183: NOT
44184: IFFALSE 44190
// exit ;
44186: POP
44187: POP
44188: GO 44270
// for j in tmp do
44190: LD_ADDR_VAR 0 4
44194: PUSH
44195: LD_VAR 0 6
44199: PUSH
44200: FOR_IN
44201: IFFALSE 44260
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
44203: LD_ADDR_VAR 0 7
44207: PUSH
44208: LD_VAR 0 4
44212: PPUSH
44213: CALL_OW 313
44217: PPUSH
44218: LD_INT 25
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PPUSH
44228: CALL_OW 72
44232: ST_TO_ADDR
// if units then
44233: LD_VAR 0 7
44237: IFFALSE 44258
// begin ComExitBuilding ( units [ 1 ] ) ;
44239: LD_VAR 0 7
44243: PUSH
44244: LD_INT 1
44246: ARRAY
44247: PPUSH
44248: CALL_OW 122
// exit ;
44252: POP
44253: POP
44254: POP
44255: POP
44256: GO 44270
// end ; end ;
44258: GO 44200
44260: POP
44261: POP
// end ; end ; exit ;
44262: POP
44263: POP
44264: GO 44270
// end ; end ;
44266: GO 43624
44268: POP
44269: POP
// end ;
44270: LD_VAR 0 2
44274: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
44275: LD_INT 0
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
// if not mc_bases or not skirmish then
44284: LD_EXP 49
44288: NOT
44289: PUSH
44290: LD_EXP 47
44294: NOT
44295: OR
44296: IFFALSE 44300
// exit ;
44298: GO 44531
// btype := GetBType ( building ) ;
44300: LD_ADDR_VAR 0 6
44304: PUSH
44305: LD_VAR 0 1
44309: PPUSH
44310: CALL_OW 266
44314: ST_TO_ADDR
// x := GetX ( building ) ;
44315: LD_ADDR_VAR 0 7
44319: PUSH
44320: LD_VAR 0 1
44324: PPUSH
44325: CALL_OW 250
44329: ST_TO_ADDR
// y := GetY ( building ) ;
44330: LD_ADDR_VAR 0 8
44334: PUSH
44335: LD_VAR 0 1
44339: PPUSH
44340: CALL_OW 251
44344: ST_TO_ADDR
// d := GetDir ( building ) ;
44345: LD_ADDR_VAR 0 9
44349: PUSH
44350: LD_VAR 0 1
44354: PPUSH
44355: CALL_OW 254
44359: ST_TO_ADDR
// for i = 1 to mc_bases do
44360: LD_ADDR_VAR 0 4
44364: PUSH
44365: DOUBLE
44366: LD_INT 1
44368: DEC
44369: ST_TO_ADDR
44370: LD_EXP 49
44374: PUSH
44375: FOR_TO
44376: IFFALSE 44529
// begin if not mc_build_list [ i ] then
44378: LD_EXP 54
44382: PUSH
44383: LD_VAR 0 4
44387: ARRAY
44388: NOT
44389: IFFALSE 44393
// continue ;
44391: GO 44375
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
44393: LD_VAR 0 6
44397: PUSH
44398: LD_VAR 0 7
44402: PUSH
44403: LD_VAR 0 8
44407: PUSH
44408: LD_VAR 0 9
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: PPUSH
44419: LD_EXP 54
44423: PUSH
44424: LD_VAR 0 4
44428: ARRAY
44429: PUSH
44430: LD_INT 1
44432: ARRAY
44433: PPUSH
44434: CALL 57817 0 2
44438: IFFALSE 44527
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
44440: LD_ADDR_EXP 54
44444: PUSH
44445: LD_EXP 54
44449: PPUSH
44450: LD_VAR 0 4
44454: PPUSH
44455: LD_EXP 54
44459: PUSH
44460: LD_VAR 0 4
44464: ARRAY
44465: PPUSH
44466: LD_INT 1
44468: PPUSH
44469: CALL_OW 3
44473: PPUSH
44474: CALL_OW 1
44478: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
44479: LD_ADDR_EXP 56
44483: PUSH
44484: LD_EXP 56
44488: PPUSH
44489: LD_VAR 0 4
44493: PUSH
44494: LD_EXP 56
44498: PUSH
44499: LD_VAR 0 4
44503: ARRAY
44504: PUSH
44505: LD_INT 1
44507: PLUS
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PPUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL 51648 0 3
44522: ST_TO_ADDR
// exit ;
44523: POP
44524: POP
44525: GO 44531
// end ; end ;
44527: GO 44375
44529: POP
44530: POP
// end ;
44531: LD_VAR 0 3
44535: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
44536: LD_INT 0
44538: PPUSH
44539: PPUSH
44540: PPUSH
// if not mc_bases or not skirmish then
44541: LD_EXP 49
44545: NOT
44546: PUSH
44547: LD_EXP 47
44551: NOT
44552: OR
44553: IFFALSE 44557
// exit ;
44555: GO 44747
// for i = 1 to mc_bases do
44557: LD_ADDR_VAR 0 4
44561: PUSH
44562: DOUBLE
44563: LD_INT 1
44565: DEC
44566: ST_TO_ADDR
44567: LD_EXP 49
44571: PUSH
44572: FOR_TO
44573: IFFALSE 44660
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
44575: LD_VAR 0 1
44579: PUSH
44580: LD_EXP 57
44584: PUSH
44585: LD_VAR 0 4
44589: ARRAY
44590: IN
44591: PUSH
44592: LD_VAR 0 1
44596: PUSH
44597: LD_EXP 58
44601: PUSH
44602: LD_VAR 0 4
44606: ARRAY
44607: IN
44608: NOT
44609: AND
44610: IFFALSE 44658
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
44612: LD_ADDR_EXP 58
44616: PUSH
44617: LD_EXP 58
44621: PPUSH
44622: LD_VAR 0 4
44626: PUSH
44627: LD_EXP 58
44631: PUSH
44632: LD_VAR 0 4
44636: ARRAY
44637: PUSH
44638: LD_INT 1
44640: PLUS
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PPUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: CALL 51648 0 3
44655: ST_TO_ADDR
// break ;
44656: GO 44660
// end ; end ;
44658: GO 44572
44660: POP
44661: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
44662: LD_VAR 0 1
44666: PPUSH
44667: CALL_OW 257
44671: PUSH
44672: LD_EXP 75
44676: IN
44677: PUSH
44678: LD_VAR 0 1
44682: PPUSH
44683: CALL_OW 266
44687: PUSH
44688: LD_INT 5
44690: EQUAL
44691: AND
44692: PUSH
44693: LD_VAR 0 2
44697: PPUSH
44698: CALL_OW 110
44702: PUSH
44703: LD_INT 18
44705: NONEQUAL
44706: AND
44707: IFFALSE 44747
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
44709: LD_VAR 0 2
44713: PPUSH
44714: CALL_OW 257
44718: PUSH
44719: LD_INT 5
44721: PUSH
44722: LD_INT 8
44724: PUSH
44725: LD_INT 9
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: LIST
44732: IN
44733: IFFALSE 44747
// SetClass ( unit , 1 ) ;
44735: LD_VAR 0 2
44739: PPUSH
44740: LD_INT 1
44742: PPUSH
44743: CALL_OW 336
// end ;
44747: LD_VAR 0 3
44751: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
44752: LD_INT 0
44754: PPUSH
44755: PPUSH
// if not mc_bases or not skirmish then
44756: LD_EXP 49
44760: NOT
44761: PUSH
44762: LD_EXP 47
44766: NOT
44767: OR
44768: IFFALSE 44772
// exit ;
44770: GO 44888
// if GetLives ( abandoned_vehicle ) > 250 then
44772: LD_VAR 0 2
44776: PPUSH
44777: CALL_OW 256
44781: PUSH
44782: LD_INT 250
44784: GREATER
44785: IFFALSE 44789
// exit ;
44787: GO 44888
// for i = 1 to mc_bases do
44789: LD_ADDR_VAR 0 6
44793: PUSH
44794: DOUBLE
44795: LD_INT 1
44797: DEC
44798: ST_TO_ADDR
44799: LD_EXP 49
44803: PUSH
44804: FOR_TO
44805: IFFALSE 44886
// begin if driver in mc_bases [ i ] then
44807: LD_VAR 0 1
44811: PUSH
44812: LD_EXP 49
44816: PUSH
44817: LD_VAR 0 6
44821: ARRAY
44822: IN
44823: IFFALSE 44884
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
44825: LD_VAR 0 1
44829: PPUSH
44830: LD_EXP 49
44834: PUSH
44835: LD_VAR 0 6
44839: ARRAY
44840: PPUSH
44841: LD_INT 2
44843: PUSH
44844: LD_INT 30
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 30
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: PPUSH
44869: CALL_OW 72
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PPUSH
44878: CALL_OW 112
// break ;
44882: GO 44886
// end ; end ;
44884: GO 44804
44886: POP
44887: POP
// end ; end_of_file
44888: LD_VAR 0 5
44892: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44893: LD_INT 0
44895: PPUSH
44896: PPUSH
// if exist_mode then
44897: LD_VAR 0 2
44901: IFFALSE 44926
// unit := CreateCharacter ( prefix & ident ) else
44903: LD_ADDR_VAR 0 5
44907: PUSH
44908: LD_VAR 0 3
44912: PUSH
44913: LD_VAR 0 1
44917: STR
44918: PPUSH
44919: CALL_OW 34
44923: ST_TO_ADDR
44924: GO 44941
// unit := NewCharacter ( ident ) ;
44926: LD_ADDR_VAR 0 5
44930: PUSH
44931: LD_VAR 0 1
44935: PPUSH
44936: CALL_OW 25
44940: ST_TO_ADDR
// result := unit ;
44941: LD_ADDR_VAR 0 4
44945: PUSH
44946: LD_VAR 0 5
44950: ST_TO_ADDR
// end ;
44951: LD_VAR 0 4
44955: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44956: LD_INT 0
44958: PPUSH
44959: PPUSH
// if not side or not nation then
44960: LD_VAR 0 1
44964: NOT
44965: PUSH
44966: LD_VAR 0 2
44970: NOT
44971: OR
44972: IFFALSE 44976
// exit ;
44974: GO 45612
// case nation of nation_american :
44976: LD_VAR 0 2
44980: PUSH
44981: LD_INT 1
44983: DOUBLE
44984: EQUAL
44985: IFTRUE 44989
44987: GO 45159
44989: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
44990: LD_ADDR_VAR 0 4
44994: PUSH
44995: LD_INT 35
44997: PUSH
44998: LD_INT 45
45000: PUSH
45001: LD_INT 46
45003: PUSH
45004: LD_INT 47
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 6
45015: PUSH
45016: LD_INT 15
45018: PUSH
45019: LD_INT 16
45021: PUSH
45022: LD_INT 7
45024: PUSH
45025: LD_INT 12
45027: PUSH
45028: LD_INT 13
45030: PUSH
45031: LD_INT 10
45033: PUSH
45034: LD_INT 14
45036: PUSH
45037: LD_INT 20
45039: PUSH
45040: LD_INT 21
45042: PUSH
45043: LD_INT 22
45045: PUSH
45046: LD_INT 25
45048: PUSH
45049: LD_INT 32
45051: PUSH
45052: LD_INT 27
45054: PUSH
45055: LD_INT 36
45057: PUSH
45058: LD_INT 69
45060: PUSH
45061: LD_INT 39
45063: PUSH
45064: LD_INT 34
45066: PUSH
45067: LD_INT 40
45069: PUSH
45070: LD_INT 48
45072: PUSH
45073: LD_INT 49
45075: PUSH
45076: LD_INT 50
45078: PUSH
45079: LD_INT 51
45081: PUSH
45082: LD_INT 52
45084: PUSH
45085: LD_INT 53
45087: PUSH
45088: LD_INT 54
45090: PUSH
45091: LD_INT 55
45093: PUSH
45094: LD_INT 56
45096: PUSH
45097: LD_INT 57
45099: PUSH
45100: LD_INT 58
45102: PUSH
45103: LD_INT 59
45105: PUSH
45106: LD_INT 60
45108: PUSH
45109: LD_INT 61
45111: PUSH
45112: LD_INT 62
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
45157: GO 45536
45159: LD_INT 2
45161: DOUBLE
45162: EQUAL
45163: IFTRUE 45167
45165: GO 45345
45167: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
45168: LD_ADDR_VAR 0 4
45172: PUSH
45173: LD_INT 35
45175: PUSH
45176: LD_INT 45
45178: PUSH
45179: LD_INT 46
45181: PUSH
45182: LD_INT 47
45184: PUSH
45185: LD_INT 70
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 11
45193: PUSH
45194: LD_INT 3
45196: PUSH
45197: LD_INT 4
45199: PUSH
45200: LD_INT 5
45202: PUSH
45203: LD_INT 6
45205: PUSH
45206: LD_INT 15
45208: PUSH
45209: LD_INT 18
45211: PUSH
45212: LD_INT 7
45214: PUSH
45215: LD_INT 17
45217: PUSH
45218: LD_INT 8
45220: PUSH
45221: LD_INT 20
45223: PUSH
45224: LD_INT 21
45226: PUSH
45227: LD_INT 22
45229: PUSH
45230: LD_INT 72
45232: PUSH
45233: LD_INT 26
45235: PUSH
45236: LD_INT 69
45238: PUSH
45239: LD_INT 39
45241: PUSH
45242: LD_INT 40
45244: PUSH
45245: LD_INT 41
45247: PUSH
45248: LD_INT 42
45250: PUSH
45251: LD_INT 43
45253: PUSH
45254: LD_INT 48
45256: PUSH
45257: LD_INT 49
45259: PUSH
45260: LD_INT 50
45262: PUSH
45263: LD_INT 51
45265: PUSH
45266: LD_INT 52
45268: PUSH
45269: LD_INT 53
45271: PUSH
45272: LD_INT 54
45274: PUSH
45275: LD_INT 55
45277: PUSH
45278: LD_INT 56
45280: PUSH
45281: LD_INT 60
45283: PUSH
45284: LD_INT 61
45286: PUSH
45287: LD_INT 62
45289: PUSH
45290: LD_INT 66
45292: PUSH
45293: LD_INT 67
45295: PUSH
45296: LD_INT 68
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
45343: GO 45536
45345: LD_INT 3
45347: DOUBLE
45348: EQUAL
45349: IFTRUE 45353
45351: GO 45535
45353: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
45354: LD_ADDR_VAR 0 4
45358: PUSH
45359: LD_INT 46
45361: PUSH
45362: LD_INT 47
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 11
45373: PUSH
45374: LD_INT 9
45376: PUSH
45377: LD_INT 20
45379: PUSH
45380: LD_INT 19
45382: PUSH
45383: LD_INT 21
45385: PUSH
45386: LD_INT 24
45388: PUSH
45389: LD_INT 22
45391: PUSH
45392: LD_INT 25
45394: PUSH
45395: LD_INT 28
45397: PUSH
45398: LD_INT 29
45400: PUSH
45401: LD_INT 30
45403: PUSH
45404: LD_INT 31
45406: PUSH
45407: LD_INT 37
45409: PUSH
45410: LD_INT 38
45412: PUSH
45413: LD_INT 32
45415: PUSH
45416: LD_INT 27
45418: PUSH
45419: LD_INT 33
45421: PUSH
45422: LD_INT 69
45424: PUSH
45425: LD_INT 39
45427: PUSH
45428: LD_INT 34
45430: PUSH
45431: LD_INT 40
45433: PUSH
45434: LD_INT 71
45436: PUSH
45437: LD_INT 23
45439: PUSH
45440: LD_INT 44
45442: PUSH
45443: LD_INT 48
45445: PUSH
45446: LD_INT 49
45448: PUSH
45449: LD_INT 50
45451: PUSH
45452: LD_INT 51
45454: PUSH
45455: LD_INT 52
45457: PUSH
45458: LD_INT 53
45460: PUSH
45461: LD_INT 54
45463: PUSH
45464: LD_INT 55
45466: PUSH
45467: LD_INT 56
45469: PUSH
45470: LD_INT 57
45472: PUSH
45473: LD_INT 58
45475: PUSH
45476: LD_INT 59
45478: PUSH
45479: LD_INT 63
45481: PUSH
45482: LD_INT 64
45484: PUSH
45485: LD_INT 65
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
45533: GO 45536
45535: POP
// if state > - 1 and state < 3 then
45536: LD_VAR 0 3
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: GREATER
45545: PUSH
45546: LD_VAR 0 3
45550: PUSH
45551: LD_INT 3
45553: LESS
45554: AND
45555: IFFALSE 45612
// for i in result do
45557: LD_ADDR_VAR 0 5
45561: PUSH
45562: LD_VAR 0 4
45566: PUSH
45567: FOR_IN
45568: IFFALSE 45610
// if GetTech ( i , side ) <> state then
45570: LD_VAR 0 5
45574: PPUSH
45575: LD_VAR 0 1
45579: PPUSH
45580: CALL_OW 321
45584: PUSH
45585: LD_VAR 0 3
45589: NONEQUAL
45590: IFFALSE 45608
// result := result diff i ;
45592: LD_ADDR_VAR 0 4
45596: PUSH
45597: LD_VAR 0 4
45601: PUSH
45602: LD_VAR 0 5
45606: DIFF
45607: ST_TO_ADDR
45608: GO 45567
45610: POP
45611: POP
// end ;
45612: LD_VAR 0 4
45616: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45617: LD_INT 0
45619: PPUSH
45620: PPUSH
45621: PPUSH
// result := true ;
45622: LD_ADDR_VAR 0 3
45626: PUSH
45627: LD_INT 1
45629: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45630: LD_ADDR_VAR 0 5
45634: PUSH
45635: LD_VAR 0 2
45639: PPUSH
45640: CALL_OW 480
45644: ST_TO_ADDR
// if not tmp then
45645: LD_VAR 0 5
45649: NOT
45650: IFFALSE 45654
// exit ;
45652: GO 45703
// for i in tmp do
45654: LD_ADDR_VAR 0 4
45658: PUSH
45659: LD_VAR 0 5
45663: PUSH
45664: FOR_IN
45665: IFFALSE 45701
// if GetTech ( i , side ) <> state_researched then
45667: LD_VAR 0 4
45671: PPUSH
45672: LD_VAR 0 1
45676: PPUSH
45677: CALL_OW 321
45681: PUSH
45682: LD_INT 2
45684: NONEQUAL
45685: IFFALSE 45699
// begin result := false ;
45687: LD_ADDR_VAR 0 3
45691: PUSH
45692: LD_INT 0
45694: ST_TO_ADDR
// exit ;
45695: POP
45696: POP
45697: GO 45703
// end ;
45699: GO 45664
45701: POP
45702: POP
// end ;
45703: LD_VAR 0 3
45707: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45708: LD_INT 0
45710: PPUSH
45711: PPUSH
45712: PPUSH
45713: PPUSH
45714: PPUSH
45715: PPUSH
45716: PPUSH
45717: PPUSH
45718: PPUSH
45719: PPUSH
45720: PPUSH
45721: PPUSH
45722: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45723: LD_VAR 0 1
45727: NOT
45728: PUSH
45729: LD_VAR 0 1
45733: PPUSH
45734: CALL_OW 257
45738: PUSH
45739: LD_INT 9
45741: NONEQUAL
45742: OR
45743: IFFALSE 45747
// exit ;
45745: GO 46320
// side := GetSide ( unit ) ;
45747: LD_ADDR_VAR 0 9
45751: PUSH
45752: LD_VAR 0 1
45756: PPUSH
45757: CALL_OW 255
45761: ST_TO_ADDR
// tech_space := tech_spacanom ;
45762: LD_ADDR_VAR 0 12
45766: PUSH
45767: LD_INT 29
45769: ST_TO_ADDR
// tech_time := tech_taurad ;
45770: LD_ADDR_VAR 0 13
45774: PUSH
45775: LD_INT 28
45777: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45778: LD_ADDR_VAR 0 11
45782: PUSH
45783: LD_VAR 0 1
45787: PPUSH
45788: CALL_OW 310
45792: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45793: LD_VAR 0 11
45797: PPUSH
45798: CALL_OW 247
45802: PUSH
45803: LD_INT 2
45805: EQUAL
45806: IFFALSE 45810
// exit ;
45808: GO 46320
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45810: LD_ADDR_VAR 0 8
45814: PUSH
45815: LD_INT 81
45817: PUSH
45818: LD_VAR 0 9
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: LD_INT 21
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PPUSH
45848: CALL_OW 69
45852: ST_TO_ADDR
// if not tmp then
45853: LD_VAR 0 8
45857: NOT
45858: IFFALSE 45862
// exit ;
45860: GO 46320
// if in_unit then
45862: LD_VAR 0 11
45866: IFFALSE 45890
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45868: LD_ADDR_VAR 0 10
45872: PUSH
45873: LD_VAR 0 8
45877: PPUSH
45878: LD_VAR 0 11
45882: PPUSH
45883: CALL_OW 74
45887: ST_TO_ADDR
45888: GO 45910
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45890: LD_ADDR_VAR 0 10
45894: PUSH
45895: LD_VAR 0 8
45899: PPUSH
45900: LD_VAR 0 1
45904: PPUSH
45905: CALL_OW 74
45909: ST_TO_ADDR
// if not enemy then
45910: LD_VAR 0 10
45914: NOT
45915: IFFALSE 45919
// exit ;
45917: GO 46320
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45919: LD_VAR 0 11
45923: PUSH
45924: LD_VAR 0 11
45928: PPUSH
45929: LD_VAR 0 10
45933: PPUSH
45934: CALL_OW 296
45938: PUSH
45939: LD_INT 13
45941: GREATER
45942: AND
45943: PUSH
45944: LD_VAR 0 1
45948: PPUSH
45949: LD_VAR 0 10
45953: PPUSH
45954: CALL_OW 296
45958: PUSH
45959: LD_INT 12
45961: GREATER
45962: OR
45963: IFFALSE 45967
// exit ;
45965: GO 46320
// missile := [ 1 ] ;
45967: LD_ADDR_VAR 0 14
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45978: LD_VAR 0 9
45982: PPUSH
45983: LD_VAR 0 12
45987: PPUSH
45988: CALL_OW 325
45992: IFFALSE 46021
// missile := Insert ( missile , missile + 1 , 2 ) ;
45994: LD_ADDR_VAR 0 14
45998: PUSH
45999: LD_VAR 0 14
46003: PPUSH
46004: LD_VAR 0 14
46008: PUSH
46009: LD_INT 1
46011: PLUS
46012: PPUSH
46013: LD_INT 2
46015: PPUSH
46016: CALL_OW 2
46020: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
46021: LD_VAR 0 9
46025: PPUSH
46026: LD_VAR 0 13
46030: PPUSH
46031: CALL_OW 325
46035: PUSH
46036: LD_VAR 0 10
46040: PPUSH
46041: CALL_OW 255
46045: PPUSH
46046: LD_VAR 0 13
46050: PPUSH
46051: CALL_OW 325
46055: NOT
46056: AND
46057: IFFALSE 46086
// missile := Insert ( missile , missile + 1 , 3 ) ;
46059: LD_ADDR_VAR 0 14
46063: PUSH
46064: LD_VAR 0 14
46068: PPUSH
46069: LD_VAR 0 14
46073: PUSH
46074: LD_INT 1
46076: PLUS
46077: PPUSH
46078: LD_INT 3
46080: PPUSH
46081: CALL_OW 2
46085: ST_TO_ADDR
// if missile < 2 then
46086: LD_VAR 0 14
46090: PUSH
46091: LD_INT 2
46093: LESS
46094: IFFALSE 46098
// exit ;
46096: GO 46320
// x := GetX ( enemy ) ;
46098: LD_ADDR_VAR 0 4
46102: PUSH
46103: LD_VAR 0 10
46107: PPUSH
46108: CALL_OW 250
46112: ST_TO_ADDR
// y := GetY ( enemy ) ;
46113: LD_ADDR_VAR 0 5
46117: PUSH
46118: LD_VAR 0 10
46122: PPUSH
46123: CALL_OW 251
46127: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
46128: LD_ADDR_VAR 0 6
46132: PUSH
46133: LD_VAR 0 4
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PPUSH
46142: LD_INT 1
46144: PPUSH
46145: CALL_OW 12
46149: PLUS
46150: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
46151: LD_ADDR_VAR 0 7
46155: PUSH
46156: LD_VAR 0 5
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PPUSH
46165: LD_INT 1
46167: PPUSH
46168: CALL_OW 12
46172: PLUS
46173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46174: LD_VAR 0 6
46178: PPUSH
46179: LD_VAR 0 7
46183: PPUSH
46184: CALL_OW 488
46188: NOT
46189: IFFALSE 46211
// begin _x := x ;
46191: LD_ADDR_VAR 0 6
46195: PUSH
46196: LD_VAR 0 4
46200: ST_TO_ADDR
// _y := y ;
46201: LD_ADDR_VAR 0 7
46205: PUSH
46206: LD_VAR 0 5
46210: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
46211: LD_ADDR_VAR 0 3
46215: PUSH
46216: LD_INT 1
46218: PPUSH
46219: LD_VAR 0 14
46223: PPUSH
46224: CALL_OW 12
46228: ST_TO_ADDR
// case i of 1 :
46229: LD_VAR 0 3
46233: PUSH
46234: LD_INT 1
46236: DOUBLE
46237: EQUAL
46238: IFTRUE 46242
46240: GO 46259
46242: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
46243: LD_VAR 0 1
46247: PPUSH
46248: LD_VAR 0 10
46252: PPUSH
46253: CALL_OW 115
46257: GO 46320
46259: LD_INT 2
46261: DOUBLE
46262: EQUAL
46263: IFTRUE 46267
46265: GO 46289
46267: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
46268: LD_VAR 0 1
46272: PPUSH
46273: LD_VAR 0 6
46277: PPUSH
46278: LD_VAR 0 7
46282: PPUSH
46283: CALL_OW 153
46287: GO 46320
46289: LD_INT 3
46291: DOUBLE
46292: EQUAL
46293: IFTRUE 46297
46295: GO 46319
46297: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
46298: LD_VAR 0 1
46302: PPUSH
46303: LD_VAR 0 6
46307: PPUSH
46308: LD_VAR 0 7
46312: PPUSH
46313: CALL_OW 154
46317: GO 46320
46319: POP
// end ;
46320: LD_VAR 0 2
46324: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46325: LD_INT 0
46327: PPUSH
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
// if not unit or not building then
46333: LD_VAR 0 1
46337: NOT
46338: PUSH
46339: LD_VAR 0 2
46343: NOT
46344: OR
46345: IFFALSE 46349
// exit ;
46347: GO 46507
// x := GetX ( building ) ;
46349: LD_ADDR_VAR 0 5
46353: PUSH
46354: LD_VAR 0 2
46358: PPUSH
46359: CALL_OW 250
46363: ST_TO_ADDR
// y := GetY ( building ) ;
46364: LD_ADDR_VAR 0 6
46368: PUSH
46369: LD_VAR 0 2
46373: PPUSH
46374: CALL_OW 251
46378: ST_TO_ADDR
// for i = 0 to 5 do
46379: LD_ADDR_VAR 0 4
46383: PUSH
46384: DOUBLE
46385: LD_INT 0
46387: DEC
46388: ST_TO_ADDR
46389: LD_INT 5
46391: PUSH
46392: FOR_TO
46393: IFFALSE 46505
// begin _x := ShiftX ( x , i , 3 ) ;
46395: LD_ADDR_VAR 0 7
46399: PUSH
46400: LD_VAR 0 5
46404: PPUSH
46405: LD_VAR 0 4
46409: PPUSH
46410: LD_INT 3
46412: PPUSH
46413: CALL_OW 272
46417: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46418: LD_ADDR_VAR 0 8
46422: PUSH
46423: LD_VAR 0 6
46427: PPUSH
46428: LD_VAR 0 4
46432: PPUSH
46433: LD_INT 3
46435: PPUSH
46436: CALL_OW 273
46440: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46441: LD_VAR 0 7
46445: PPUSH
46446: LD_VAR 0 8
46450: PPUSH
46451: CALL_OW 488
46455: NOT
46456: IFFALSE 46460
// continue ;
46458: GO 46392
// if HexInfo ( _x , _y ) = 0 then
46460: LD_VAR 0 7
46464: PPUSH
46465: LD_VAR 0 8
46469: PPUSH
46470: CALL_OW 428
46474: PUSH
46475: LD_INT 0
46477: EQUAL
46478: IFFALSE 46503
// begin ComMoveXY ( unit , _x , _y ) ;
46480: LD_VAR 0 1
46484: PPUSH
46485: LD_VAR 0 7
46489: PPUSH
46490: LD_VAR 0 8
46494: PPUSH
46495: CALL_OW 111
// exit ;
46499: POP
46500: POP
46501: GO 46507
// end ; end ;
46503: GO 46392
46505: POP
46506: POP
// end ;
46507: LD_VAR 0 3
46511: RET
// export function ScanBase ( side , base_area ) ; begin
46512: LD_INT 0
46514: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46515: LD_ADDR_VAR 0 3
46519: PUSH
46520: LD_VAR 0 2
46524: PPUSH
46525: LD_INT 81
46527: PUSH
46528: LD_VAR 0 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PPUSH
46537: CALL_OW 70
46541: ST_TO_ADDR
// end ;
46542: LD_VAR 0 3
46546: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
46547: LD_INT 0
46549: PPUSH
46550: PPUSH
46551: PPUSH
46552: PPUSH
46553: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
46554: LD_VAR 0 1
46558: NOT
46559: PUSH
46560: LD_EXP 49
46564: PUSH
46565: LD_VAR 0 1
46569: ARRAY
46570: NOT
46571: OR
46572: PUSH
46573: LD_VAR 0 2
46577: NOT
46578: OR
46579: PUSH
46580: LD_VAR 0 3
46584: NOT
46585: OR
46586: IFFALSE 46590
// exit ;
46588: GO 47040
// side := mc_sides [ base ] ;
46590: LD_ADDR_VAR 0 6
46594: PUSH
46595: LD_EXP 75
46599: PUSH
46600: LD_VAR 0 1
46604: ARRAY
46605: ST_TO_ADDR
// if not side then
46606: LD_VAR 0 6
46610: NOT
46611: IFFALSE 46615
// exit ;
46613: GO 47040
// for i in solds do
46615: LD_ADDR_VAR 0 7
46619: PUSH
46620: LD_VAR 0 2
46624: PUSH
46625: FOR_IN
46626: IFFALSE 46687
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
46628: LD_VAR 0 7
46632: PPUSH
46633: CALL_OW 310
46637: PPUSH
46638: CALL_OW 266
46642: PUSH
46643: LD_INT 32
46645: PUSH
46646: LD_INT 31
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: IN
46653: IFFALSE 46673
// solds := solds diff i else
46655: LD_ADDR_VAR 0 2
46659: PUSH
46660: LD_VAR 0 2
46664: PUSH
46665: LD_VAR 0 7
46669: DIFF
46670: ST_TO_ADDR
46671: GO 46685
// SetTag ( i , 18 ) ;
46673: LD_VAR 0 7
46677: PPUSH
46678: LD_INT 18
46680: PPUSH
46681: CALL_OW 109
46685: GO 46625
46687: POP
46688: POP
// if not solds then
46689: LD_VAR 0 2
46693: NOT
46694: IFFALSE 46698
// exit ;
46696: GO 47040
// repeat wait ( 0 0$1 ) ;
46698: LD_INT 35
46700: PPUSH
46701: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
46705: LD_ADDR_VAR 0 5
46709: PUSH
46710: LD_VAR 0 6
46714: PPUSH
46715: LD_VAR 0 3
46719: PPUSH
46720: CALL 46512 0 2
46724: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
46725: LD_VAR 0 5
46729: NOT
46730: PUSH
46731: LD_VAR 0 5
46735: PUSH
46736: LD_INT 3
46738: GREATER
46739: OR
46740: PUSH
46741: LD_EXP 71
46745: PUSH
46746: LD_VAR 0 1
46750: ARRAY
46751: OR
46752: IFFALSE 46793
// begin for i in solds do
46754: LD_ADDR_VAR 0 7
46758: PUSH
46759: LD_VAR 0 2
46763: PUSH
46764: FOR_IN
46765: IFFALSE 46789
// if HasTask ( i ) then
46767: LD_VAR 0 7
46771: PPUSH
46772: CALL_OW 314
46776: IFFALSE 46787
// ComStop ( i ) ;
46778: LD_VAR 0 7
46782: PPUSH
46783: CALL_OW 141
46787: GO 46764
46789: POP
46790: POP
// break ;
46791: GO 47028
// end ; for i in solds do
46793: LD_ADDR_VAR 0 7
46797: PUSH
46798: LD_VAR 0 2
46802: PUSH
46803: FOR_IN
46804: IFFALSE 47020
// begin if IsInUnit ( i ) then
46806: LD_VAR 0 7
46810: PPUSH
46811: CALL_OW 310
46815: IFFALSE 46826
// ComExitBuilding ( i ) ;
46817: LD_VAR 0 7
46821: PPUSH
46822: CALL_OW 122
// if GetLives ( i ) > 333 then
46826: LD_VAR 0 7
46830: PPUSH
46831: CALL_OW 256
46835: PUSH
46836: LD_INT 333
46838: GREATER
46839: IFFALSE 46867
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46841: LD_VAR 0 7
46845: PPUSH
46846: LD_VAR 0 5
46850: PPUSH
46851: LD_VAR 0 7
46855: PPUSH
46856: CALL_OW 74
46860: PPUSH
46861: CALL_OW 115
46865: GO 47018
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
46867: LD_ADDR_VAR 0 8
46871: PUSH
46872: LD_EXP 49
46876: PUSH
46877: LD_VAR 0 1
46881: ARRAY
46882: PPUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 30
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 30
46908: PUSH
46909: LD_INT 6
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: PPUSH
46922: CALL_OW 72
46926: PPUSH
46927: LD_VAR 0 7
46931: PPUSH
46932: CALL_OW 74
46936: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
46937: LD_VAR 0 7
46941: PPUSH
46942: LD_VAR 0 8
46946: PPUSH
46947: CALL_OW 250
46951: PPUSH
46952: LD_INT 3
46954: PPUSH
46955: LD_INT 5
46957: PPUSH
46958: CALL_OW 272
46962: PPUSH
46963: LD_VAR 0 8
46967: PPUSH
46968: CALL_OW 251
46972: PPUSH
46973: LD_INT 3
46975: PPUSH
46976: LD_INT 5
46978: PPUSH
46979: CALL_OW 273
46983: PPUSH
46984: CALL_OW 111
// SetTag ( i , 0 ) ;
46988: LD_VAR 0 7
46992: PPUSH
46993: LD_INT 0
46995: PPUSH
46996: CALL_OW 109
// solds := solds diff i ;
47000: LD_ADDR_VAR 0 2
47004: PUSH
47005: LD_VAR 0 2
47009: PUSH
47010: LD_VAR 0 7
47014: DIFF
47015: ST_TO_ADDR
// continue ;
47016: GO 46803
// end ; end ;
47018: GO 46803
47020: POP
47021: POP
// until solds ;
47022: LD_VAR 0 2
47026: IFFALSE 46698
// MC_Reset ( base , 18 ) ;
47028: LD_VAR 0 1
47032: PPUSH
47033: LD_INT 18
47035: PPUSH
47036: CALL 19797 0 2
// end ;
47040: LD_VAR 0 4
47044: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
47045: LD_INT 0
47047: PPUSH
47048: PPUSH
47049: PPUSH
47050: PPUSH
47051: PPUSH
47052: PPUSH
47053: PPUSH
47054: PPUSH
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
47059: PPUSH
47060: PPUSH
47061: PPUSH
47062: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
47063: LD_ADDR_VAR 0 12
47067: PUSH
47068: LD_EXP 49
47072: PUSH
47073: LD_VAR 0 1
47077: ARRAY
47078: PPUSH
47079: LD_INT 25
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PPUSH
47089: CALL_OW 72
47093: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
47094: LD_ADDR_VAR 0 8
47098: PUSH
47099: LD_EXP 49
47103: PUSH
47104: LD_VAR 0 1
47108: ARRAY
47109: PPUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 25
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 25
47125: PUSH
47126: LD_INT 5
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 25
47135: PUSH
47136: LD_INT 8
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 25
47145: PUSH
47146: LD_INT 9
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: PPUSH
47160: CALL_OW 72
47164: ST_TO_ADDR
// if not defenders and not solds then
47165: LD_VAR 0 2
47169: NOT
47170: PUSH
47171: LD_VAR 0 8
47175: NOT
47176: AND
47177: IFFALSE 47181
// exit ;
47179: GO 48547
// depot_under_attack := false ;
47181: LD_ADDR_VAR 0 16
47185: PUSH
47186: LD_INT 0
47188: ST_TO_ADDR
// sold_defenders := [ ] ;
47189: LD_ADDR_VAR 0 17
47193: PUSH
47194: EMPTY
47195: ST_TO_ADDR
// if mechs then
47196: LD_VAR 0 12
47200: IFFALSE 47329
// for i in defenders do
47202: LD_ADDR_VAR 0 5
47206: PUSH
47207: LD_VAR 0 2
47211: PUSH
47212: FOR_IN
47213: IFFALSE 47327
// begin SetTag ( i , 20 ) ;
47215: LD_VAR 0 5
47219: PPUSH
47220: LD_INT 20
47222: PPUSH
47223: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
47227: LD_VAR 0 5
47231: PPUSH
47232: CALL_OW 263
47236: PUSH
47237: LD_INT 1
47239: EQUAL
47240: PUSH
47241: LD_VAR 0 5
47245: PPUSH
47246: CALL_OW 311
47250: NOT
47251: AND
47252: PUSH
47253: LD_VAR 0 12
47257: AND
47258: IFFALSE 47325
// begin un := mechs [ 1 ] ;
47260: LD_ADDR_VAR 0 10
47264: PUSH
47265: LD_VAR 0 12
47269: PUSH
47270: LD_INT 1
47272: ARRAY
47273: ST_TO_ADDR
// ComExitBuilding ( un ) ;
47274: LD_VAR 0 10
47278: PPUSH
47279: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
47283: LD_VAR 0 10
47287: PPUSH
47288: LD_VAR 0 5
47292: PPUSH
47293: CALL_OW 180
// SetTag ( un , 19 ) ;
47297: LD_VAR 0 10
47301: PPUSH
47302: LD_INT 19
47304: PPUSH
47305: CALL_OW 109
// mechs := mechs diff un ;
47309: LD_ADDR_VAR 0 12
47313: PUSH
47314: LD_VAR 0 12
47318: PUSH
47319: LD_VAR 0 10
47323: DIFF
47324: ST_TO_ADDR
// end ; end ;
47325: GO 47212
47327: POP
47328: POP
// if solds then
47329: LD_VAR 0 8
47333: IFFALSE 47392
// for i in solds do
47335: LD_ADDR_VAR 0 5
47339: PUSH
47340: LD_VAR 0 8
47344: PUSH
47345: FOR_IN
47346: IFFALSE 47390
// if not GetTag ( i ) then
47348: LD_VAR 0 5
47352: PPUSH
47353: CALL_OW 110
47357: NOT
47358: IFFALSE 47388
// begin defenders := defenders union i ;
47360: LD_ADDR_VAR 0 2
47364: PUSH
47365: LD_VAR 0 2
47369: PUSH
47370: LD_VAR 0 5
47374: UNION
47375: ST_TO_ADDR
// SetTag ( i , 18 ) ;
47376: LD_VAR 0 5
47380: PPUSH
47381: LD_INT 18
47383: PPUSH
47384: CALL_OW 109
// end ;
47388: GO 47345
47390: POP
47391: POP
// repeat wait ( 0 0$1 ) ;
47392: LD_INT 35
47394: PPUSH
47395: CALL_OW 67
// enemy := mc_scan [ base ] ;
47399: LD_ADDR_VAR 0 3
47403: PUSH
47404: LD_EXP 72
47408: PUSH
47409: LD_VAR 0 1
47413: ARRAY
47414: ST_TO_ADDR
// for i in defenders do
47415: LD_ADDR_VAR 0 5
47419: PUSH
47420: LD_VAR 0 2
47424: PUSH
47425: FOR_IN
47426: IFFALSE 48111
// begin e := NearestUnitToUnit ( enemy , i ) ;
47428: LD_ADDR_VAR 0 13
47432: PUSH
47433: LD_VAR 0 3
47437: PPUSH
47438: LD_VAR 0 5
47442: PPUSH
47443: CALL_OW 74
47447: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
47448: LD_ADDR_VAR 0 16
47452: PUSH
47453: LD_EXP 49
47457: PUSH
47458: LD_VAR 0 1
47462: ARRAY
47463: PPUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 30
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 30
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: PPUSH
47492: CALL_OW 72
47496: NOT
47497: PUSH
47498: LD_EXP 49
47502: PUSH
47503: LD_VAR 0 1
47507: ARRAY
47508: PPUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 30
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 30
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: PPUSH
47537: CALL_OW 72
47541: PPUSH
47542: CALL_OW 256
47546: PUSH
47547: LD_INT 600
47549: LESS
47550: OR
47551: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
47552: LD_VAR 0 5
47556: PPUSH
47557: CALL_OW 247
47561: PUSH
47562: LD_INT 2
47564: DOUBLE
47565: EQUAL
47566: IFTRUE 47570
47568: GO 47817
47570: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
47571: LD_VAR 0 5
47575: PPUSH
47576: CALL_OW 256
47580: PUSH
47581: LD_INT 650
47583: GREATER
47584: PUSH
47585: LD_VAR 0 5
47589: PPUSH
47590: LD_VAR 0 13
47594: PPUSH
47595: CALL_OW 296
47599: PUSH
47600: LD_INT 40
47602: LESS
47603: AND
47604: IFFALSE 47622
// ComAttackUnit ( i , e ) else
47606: LD_VAR 0 5
47610: PPUSH
47611: LD_VAR 0 13
47615: PPUSH
47616: CALL_OW 115
47620: GO 47700
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
47622: LD_VAR 0 5
47626: PPUSH
47627: LD_VAR 0 13
47631: PPUSH
47632: CALL_OW 296
47636: PUSH
47637: LD_INT 30
47639: GREATEREQUAL
47640: PUSH
47641: LD_VAR 0 5
47645: PPUSH
47646: CALL_OW 256
47650: PUSH
47651: LD_INT 650
47653: LESSEQUAL
47654: OR
47655: PUSH
47656: LD_VAR 0 5
47660: PPUSH
47661: LD_EXP 73
47665: PUSH
47666: LD_VAR 0 1
47670: ARRAY
47671: PPUSH
47672: CALL_OW 308
47676: NOT
47677: AND
47678: IFFALSE 47700
// ComMoveToArea ( i , mc_parking [ base ] ) ;
47680: LD_VAR 0 5
47684: PPUSH
47685: LD_EXP 73
47689: PUSH
47690: LD_VAR 0 1
47694: ARRAY
47695: PPUSH
47696: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
47700: LD_VAR 0 5
47704: PPUSH
47705: CALL_OW 256
47709: PUSH
47710: LD_INT 998
47712: LESS
47713: PUSH
47714: LD_VAR 0 5
47718: PPUSH
47719: CALL_OW 263
47723: PUSH
47724: LD_INT 1
47726: EQUAL
47727: AND
47728: PUSH
47729: LD_VAR 0 5
47733: PPUSH
47734: CALL_OW 311
47738: AND
47739: PUSH
47740: LD_VAR 0 5
47744: PPUSH
47745: LD_EXP 73
47749: PUSH
47750: LD_VAR 0 1
47754: ARRAY
47755: PPUSH
47756: CALL_OW 308
47760: AND
47761: IFFALSE 47815
// begin mech := IsDrivenBy ( i ) ;
47763: LD_ADDR_VAR 0 9
47767: PUSH
47768: LD_VAR 0 5
47772: PPUSH
47773: CALL_OW 311
47777: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
47778: LD_VAR 0 9
47782: PPUSH
47783: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
47787: LD_VAR 0 9
47791: PPUSH
47792: LD_VAR 0 5
47796: PPUSH
47797: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
47801: LD_VAR 0 9
47805: PPUSH
47806: LD_VAR 0 5
47810: PPUSH
47811: CALL_OW 180
// end ; end ; unit_human :
47815: GO 48082
47817: LD_INT 1
47819: DOUBLE
47820: EQUAL
47821: IFTRUE 47825
47823: GO 48081
47825: POP
// begin b := IsInUnit ( i ) ;
47826: LD_ADDR_VAR 0 18
47830: PUSH
47831: LD_VAR 0 5
47835: PPUSH
47836: CALL_OW 310
47840: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
47841: LD_ADDR_VAR 0 19
47845: PUSH
47846: LD_VAR 0 18
47850: NOT
47851: PUSH
47852: LD_VAR 0 18
47856: PPUSH
47857: CALL_OW 266
47861: PUSH
47862: LD_INT 32
47864: PUSH
47865: LD_INT 31
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: IN
47872: OR
47873: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
47874: LD_VAR 0 16
47878: PUSH
47879: LD_VAR 0 2
47883: PPUSH
47884: LD_INT 21
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PPUSH
47894: CALL_OW 72
47898: PUSH
47899: LD_INT 1
47901: LESSEQUAL
47902: OR
47903: PUSH
47904: LD_VAR 0 19
47908: AND
47909: PUSH
47910: LD_VAR 0 5
47914: PUSH
47915: LD_VAR 0 17
47919: IN
47920: NOT
47921: AND
47922: IFFALSE 48015
// begin if b then
47924: LD_VAR 0 18
47928: IFFALSE 47977
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
47930: LD_VAR 0 18
47934: PPUSH
47935: LD_VAR 0 3
47939: PPUSH
47940: LD_VAR 0 18
47944: PPUSH
47945: CALL_OW 74
47949: PPUSH
47950: CALL_OW 296
47954: PUSH
47955: LD_INT 10
47957: LESS
47958: PUSH
47959: LD_VAR 0 18
47963: PPUSH
47964: CALL_OW 461
47968: PUSH
47969: LD_INT 7
47971: NONEQUAL
47972: AND
47973: IFFALSE 47977
// continue ;
47975: GO 47425
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
47977: LD_ADDR_VAR 0 17
47981: PUSH
47982: LD_VAR 0 17
47986: PPUSH
47987: LD_VAR 0 17
47991: PUSH
47992: LD_INT 1
47994: PLUS
47995: PPUSH
47996: LD_VAR 0 5
48000: PPUSH
48001: CALL_OW 1
48005: ST_TO_ADDR
// ComExitBuilding ( i ) ;
48006: LD_VAR 0 5
48010: PPUSH
48011: CALL_OW 122
// end ; if sold_defenders then
48015: LD_VAR 0 17
48019: IFFALSE 48079
// if i in sold_defenders then
48021: LD_VAR 0 5
48025: PUSH
48026: LD_VAR 0 17
48030: IN
48031: IFFALSE 48079
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
48033: LD_VAR 0 5
48037: PPUSH
48038: CALL_OW 314
48042: NOT
48043: PUSH
48044: LD_VAR 0 5
48048: PPUSH
48049: LD_VAR 0 13
48053: PPUSH
48054: CALL_OW 296
48058: PUSH
48059: LD_INT 30
48061: LESS
48062: AND
48063: IFFALSE 48079
// ComAttackUnit ( i , e ) ;
48065: LD_VAR 0 5
48069: PPUSH
48070: LD_VAR 0 13
48074: PPUSH
48075: CALL_OW 115
// end ; end ; end ;
48079: GO 48082
48081: POP
// if IsDead ( i ) then
48082: LD_VAR 0 5
48086: PPUSH
48087: CALL_OW 301
48091: IFFALSE 48109
// defenders := defenders diff i ;
48093: LD_ADDR_VAR 0 2
48097: PUSH
48098: LD_VAR 0 2
48102: PUSH
48103: LD_VAR 0 5
48107: DIFF
48108: ST_TO_ADDR
// end ;
48109: GO 47425
48111: POP
48112: POP
// until not enemy or not defenders ;
48113: LD_VAR 0 3
48117: NOT
48118: PUSH
48119: LD_VAR 0 2
48123: NOT
48124: OR
48125: IFFALSE 47392
// MC_Reset ( base , 18 ) ;
48127: LD_VAR 0 1
48131: PPUSH
48132: LD_INT 18
48134: PPUSH
48135: CALL 19797 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
48139: LD_ADDR_VAR 0 2
48143: PUSH
48144: LD_VAR 0 2
48148: PUSH
48149: LD_VAR 0 2
48153: PPUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 25
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 25
48169: PUSH
48170: LD_INT 5
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 25
48179: PUSH
48180: LD_INT 8
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 25
48189: PUSH
48190: LD_INT 9
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: PPUSH
48204: CALL_OW 72
48208: DIFF
48209: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
48210: LD_VAR 0 3
48214: NOT
48215: PUSH
48216: LD_VAR 0 2
48220: PPUSH
48221: LD_INT 21
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PPUSH
48231: CALL_OW 72
48235: AND
48236: IFFALSE 48498
// begin tmp := FilterByTag ( defenders , 19 ) ;
48238: LD_ADDR_VAR 0 11
48242: PUSH
48243: LD_VAR 0 2
48247: PPUSH
48248: LD_INT 19
48250: PPUSH
48251: CALL 84845 0 2
48255: ST_TO_ADDR
// if tmp then
48256: LD_VAR 0 11
48260: IFFALSE 48330
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
48262: LD_ADDR_VAR 0 11
48266: PUSH
48267: LD_VAR 0 11
48271: PPUSH
48272: LD_INT 25
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PPUSH
48282: CALL_OW 72
48286: ST_TO_ADDR
// if tmp then
48287: LD_VAR 0 11
48291: IFFALSE 48330
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
48293: LD_ADDR_EXP 61
48297: PUSH
48298: LD_EXP 61
48302: PPUSH
48303: LD_VAR 0 1
48307: PPUSH
48308: LD_EXP 61
48312: PUSH
48313: LD_VAR 0 1
48317: ARRAY
48318: PUSH
48319: LD_VAR 0 11
48323: UNION
48324: PPUSH
48325: CALL_OW 1
48329: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
48330: LD_VAR 0 1
48334: PPUSH
48335: LD_INT 19
48337: PPUSH
48338: CALL 19797 0 2
// repeat wait ( 0 0$1 ) ;
48342: LD_INT 35
48344: PPUSH
48345: CALL_OW 67
// for i in defenders do
48349: LD_ADDR_VAR 0 5
48353: PUSH
48354: LD_VAR 0 2
48358: PUSH
48359: FOR_IN
48360: IFFALSE 48449
// begin if not IsInArea ( i , mc_parking [ base ] ) then
48362: LD_VAR 0 5
48366: PPUSH
48367: LD_EXP 73
48371: PUSH
48372: LD_VAR 0 1
48376: ARRAY
48377: PPUSH
48378: CALL_OW 308
48382: NOT
48383: IFFALSE 48407
// ComMoveToArea ( i , mc_parking [ base ] ) else
48385: LD_VAR 0 5
48389: PPUSH
48390: LD_EXP 73
48394: PUSH
48395: LD_VAR 0 1
48399: ARRAY
48400: PPUSH
48401: CALL_OW 113
48405: GO 48447
// if GetControl ( i ) = control_manual then
48407: LD_VAR 0 5
48411: PPUSH
48412: CALL_OW 263
48416: PUSH
48417: LD_INT 1
48419: EQUAL
48420: IFFALSE 48447
// if IsDrivenBy ( i ) then
48422: LD_VAR 0 5
48426: PPUSH
48427: CALL_OW 311
48431: IFFALSE 48447
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
48433: LD_VAR 0 5
48437: PPUSH
48438: CALL_OW 311
48442: PPUSH
48443: CALL_OW 121
// end ;
48447: GO 48359
48449: POP
48450: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
48451: LD_VAR 0 2
48455: PPUSH
48456: LD_INT 95
48458: PUSH
48459: LD_EXP 73
48463: PUSH
48464: LD_VAR 0 1
48468: ARRAY
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PPUSH
48474: CALL_OW 72
48478: PUSH
48479: LD_VAR 0 2
48483: EQUAL
48484: PUSH
48485: LD_EXP 72
48489: PUSH
48490: LD_VAR 0 1
48494: ARRAY
48495: OR
48496: IFFALSE 48342
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
48498: LD_ADDR_EXP 71
48502: PUSH
48503: LD_EXP 71
48507: PPUSH
48508: LD_VAR 0 1
48512: PPUSH
48513: LD_EXP 71
48517: PUSH
48518: LD_VAR 0 1
48522: ARRAY
48523: PUSH
48524: LD_VAR 0 2
48528: UNION
48529: PPUSH
48530: CALL_OW 1
48534: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
48535: LD_VAR 0 1
48539: PPUSH
48540: LD_INT 20
48542: PPUSH
48543: CALL 19797 0 2
// end ;
48547: LD_VAR 0 4
48551: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48552: LD_INT 0
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
// result := false ;
48558: LD_ADDR_VAR 0 2
48562: PUSH
48563: LD_INT 0
48565: ST_TO_ADDR
// side := GetSide ( unit ) ;
48566: LD_ADDR_VAR 0 3
48570: PUSH
48571: LD_VAR 0 1
48575: PPUSH
48576: CALL_OW 255
48580: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48581: LD_ADDR_VAR 0 4
48585: PUSH
48586: LD_VAR 0 1
48590: PPUSH
48591: CALL_OW 248
48595: ST_TO_ADDR
// case nat of 1 :
48596: LD_VAR 0 4
48600: PUSH
48601: LD_INT 1
48603: DOUBLE
48604: EQUAL
48605: IFTRUE 48609
48607: GO 48620
48609: POP
// tech := tech_lassight ; 2 :
48610: LD_ADDR_VAR 0 5
48614: PUSH
48615: LD_INT 12
48617: ST_TO_ADDR
48618: GO 48659
48620: LD_INT 2
48622: DOUBLE
48623: EQUAL
48624: IFTRUE 48628
48626: GO 48639
48628: POP
// tech := tech_mortar ; 3 :
48629: LD_ADDR_VAR 0 5
48633: PUSH
48634: LD_INT 41
48636: ST_TO_ADDR
48637: GO 48659
48639: LD_INT 3
48641: DOUBLE
48642: EQUAL
48643: IFTRUE 48647
48645: GO 48658
48647: POP
// tech := tech_bazooka ; end ;
48648: LD_ADDR_VAR 0 5
48652: PUSH
48653: LD_INT 44
48655: ST_TO_ADDR
48656: GO 48659
48658: POP
// if Researched ( side , tech ) then
48659: LD_VAR 0 3
48663: PPUSH
48664: LD_VAR 0 5
48668: PPUSH
48669: CALL_OW 325
48673: IFFALSE 48700
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48675: LD_ADDR_VAR 0 2
48679: PUSH
48680: LD_INT 5
48682: PUSH
48683: LD_INT 8
48685: PUSH
48686: LD_INT 9
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: PUSH
48694: LD_VAR 0 4
48698: ARRAY
48699: ST_TO_ADDR
// end ;
48700: LD_VAR 0 2
48704: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48705: LD_INT 0
48707: PPUSH
48708: PPUSH
48709: PPUSH
// if not mines then
48710: LD_VAR 0 2
48714: NOT
48715: IFFALSE 48719
// exit ;
48717: GO 48863
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48719: LD_ADDR_VAR 0 5
48723: PUSH
48724: LD_INT 81
48726: PUSH
48727: LD_VAR 0 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: LD_INT 21
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PPUSH
48757: CALL_OW 69
48761: ST_TO_ADDR
// for i in mines do
48762: LD_ADDR_VAR 0 4
48766: PUSH
48767: LD_VAR 0 2
48771: PUSH
48772: FOR_IN
48773: IFFALSE 48861
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48775: LD_VAR 0 4
48779: PUSH
48780: LD_INT 1
48782: ARRAY
48783: PPUSH
48784: LD_VAR 0 4
48788: PUSH
48789: LD_INT 2
48791: ARRAY
48792: PPUSH
48793: CALL_OW 458
48797: NOT
48798: IFFALSE 48802
// continue ;
48800: GO 48772
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48802: LD_VAR 0 4
48806: PUSH
48807: LD_INT 1
48809: ARRAY
48810: PPUSH
48811: LD_VAR 0 4
48815: PUSH
48816: LD_INT 2
48818: ARRAY
48819: PPUSH
48820: CALL_OW 428
48824: PUSH
48825: LD_VAR 0 5
48829: IN
48830: IFFALSE 48859
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48832: LD_VAR 0 4
48836: PUSH
48837: LD_INT 1
48839: ARRAY
48840: PPUSH
48841: LD_VAR 0 4
48845: PUSH
48846: LD_INT 2
48848: ARRAY
48849: PPUSH
48850: LD_VAR 0 1
48854: PPUSH
48855: CALL_OW 456
// end ;
48859: GO 48772
48861: POP
48862: POP
// end ;
48863: LD_VAR 0 3
48867: RET
// export function Count ( array ) ; var i ; begin
48868: LD_INT 0
48870: PPUSH
48871: PPUSH
// result := 0 ;
48872: LD_ADDR_VAR 0 2
48876: PUSH
48877: LD_INT 0
48879: ST_TO_ADDR
// for i in array do
48880: LD_ADDR_VAR 0 3
48884: PUSH
48885: LD_VAR 0 1
48889: PUSH
48890: FOR_IN
48891: IFFALSE 48915
// if i then
48893: LD_VAR 0 3
48897: IFFALSE 48913
// result := result + 1 ;
48899: LD_ADDR_VAR 0 2
48903: PUSH
48904: LD_VAR 0 2
48908: PUSH
48909: LD_INT 1
48911: PLUS
48912: ST_TO_ADDR
48913: GO 48890
48915: POP
48916: POP
// end ;
48917: LD_VAR 0 2
48921: RET
// export function IsEmpty ( building ) ; begin
48922: LD_INT 0
48924: PPUSH
// if not building then
48925: LD_VAR 0 1
48929: NOT
48930: IFFALSE 48934
// exit ;
48932: GO 48977
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48934: LD_ADDR_VAR 0 2
48938: PUSH
48939: LD_VAR 0 1
48943: PUSH
48944: LD_INT 22
48946: PUSH
48947: LD_VAR 0 1
48951: PPUSH
48952: CALL_OW 255
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 58
48963: PUSH
48964: EMPTY
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PPUSH
48971: CALL_OW 69
48975: IN
48976: ST_TO_ADDR
// end ;
48977: LD_VAR 0 2
48981: RET
// export function IsNotFull ( building ) ; begin
48982: LD_INT 0
48984: PPUSH
// if not building then
48985: LD_VAR 0 1
48989: NOT
48990: IFFALSE 48994
// exit ;
48992: GO 49013
// result := UnitsInside ( building ) < 6 ;
48994: LD_ADDR_VAR 0 2
48998: PUSH
48999: LD_VAR 0 1
49003: PPUSH
49004: CALL_OW 313
49008: PUSH
49009: LD_INT 6
49011: LESS
49012: ST_TO_ADDR
// end ;
49013: LD_VAR 0 2
49017: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
49018: LD_INT 0
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
// tmp := [ ] ;
49024: LD_ADDR_VAR 0 3
49028: PUSH
49029: EMPTY
49030: ST_TO_ADDR
// list := [ ] ;
49031: LD_ADDR_VAR 0 5
49035: PUSH
49036: EMPTY
49037: ST_TO_ADDR
// for i = 16 to 25 do
49038: LD_ADDR_VAR 0 4
49042: PUSH
49043: DOUBLE
49044: LD_INT 16
49046: DEC
49047: ST_TO_ADDR
49048: LD_INT 25
49050: PUSH
49051: FOR_TO
49052: IFFALSE 49125
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49054: LD_ADDR_VAR 0 3
49058: PUSH
49059: LD_VAR 0 3
49063: PUSH
49064: LD_INT 22
49066: PUSH
49067: LD_VAR 0 1
49071: PPUSH
49072: CALL_OW 255
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 91
49083: PUSH
49084: LD_VAR 0 1
49088: PUSH
49089: LD_INT 6
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 30
49099: PUSH
49100: LD_VAR 0 4
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: PPUSH
49117: CALL_OW 69
49121: ADD
49122: ST_TO_ADDR
49123: GO 49051
49125: POP
49126: POP
// for i = 1 to tmp do
49127: LD_ADDR_VAR 0 4
49131: PUSH
49132: DOUBLE
49133: LD_INT 1
49135: DEC
49136: ST_TO_ADDR
49137: LD_VAR 0 3
49141: PUSH
49142: FOR_TO
49143: IFFALSE 49231
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
49145: LD_ADDR_VAR 0 5
49149: PUSH
49150: LD_VAR 0 5
49154: PUSH
49155: LD_VAR 0 3
49159: PUSH
49160: LD_VAR 0 4
49164: ARRAY
49165: PPUSH
49166: CALL_OW 266
49170: PUSH
49171: LD_VAR 0 3
49175: PUSH
49176: LD_VAR 0 4
49180: ARRAY
49181: PPUSH
49182: CALL_OW 250
49186: PUSH
49187: LD_VAR 0 3
49191: PUSH
49192: LD_VAR 0 4
49196: ARRAY
49197: PPUSH
49198: CALL_OW 251
49202: PUSH
49203: LD_VAR 0 3
49207: PUSH
49208: LD_VAR 0 4
49212: ARRAY
49213: PPUSH
49214: CALL_OW 254
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: ADD
49228: ST_TO_ADDR
49229: GO 49142
49231: POP
49232: POP
// result := list ;
49233: LD_ADDR_VAR 0 2
49237: PUSH
49238: LD_VAR 0 5
49242: ST_TO_ADDR
// end ;
49243: LD_VAR 0 2
49247: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
49248: LD_INT 0
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
// if not factory then
49257: LD_VAR 0 1
49261: NOT
49262: IFFALSE 49266
// exit ;
49264: GO 49791
// if control = control_apeman then
49266: LD_VAR 0 4
49270: PUSH
49271: LD_INT 5
49273: EQUAL
49274: IFFALSE 49383
// begin tmp := UnitsInside ( factory ) ;
49276: LD_ADDR_VAR 0 8
49280: PUSH
49281: LD_VAR 0 1
49285: PPUSH
49286: CALL_OW 313
49290: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
49291: LD_VAR 0 8
49295: PPUSH
49296: LD_INT 25
49298: PUSH
49299: LD_INT 12
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PPUSH
49306: CALL_OW 72
49310: NOT
49311: IFFALSE 49321
// control := control_manual ;
49313: LD_ADDR_VAR 0 4
49317: PUSH
49318: LD_INT 1
49320: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
49321: LD_ADDR_VAR 0 8
49325: PUSH
49326: LD_VAR 0 1
49330: PPUSH
49331: CALL 49018 0 1
49335: ST_TO_ADDR
// if tmp then
49336: LD_VAR 0 8
49340: IFFALSE 49383
// begin for i in tmp do
49342: LD_ADDR_VAR 0 7
49346: PUSH
49347: LD_VAR 0 8
49351: PUSH
49352: FOR_IN
49353: IFFALSE 49381
// if i [ 1 ] = b_ext_radar then
49355: LD_VAR 0 7
49359: PUSH
49360: LD_INT 1
49362: ARRAY
49363: PUSH
49364: LD_INT 20
49366: EQUAL
49367: IFFALSE 49379
// begin control := control_remote ;
49369: LD_ADDR_VAR 0 4
49373: PUSH
49374: LD_INT 2
49376: ST_TO_ADDR
// break ;
49377: GO 49381
// end ;
49379: GO 49352
49381: POP
49382: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49383: LD_VAR 0 1
49387: PPUSH
49388: LD_VAR 0 2
49392: PPUSH
49393: LD_VAR 0 3
49397: PPUSH
49398: LD_VAR 0 4
49402: PPUSH
49403: LD_VAR 0 5
49407: PPUSH
49408: CALL_OW 448
49412: IFFALSE 49447
// begin result := [ chassis , engine , control , weapon ] ;
49414: LD_ADDR_VAR 0 6
49418: PUSH
49419: LD_VAR 0 2
49423: PUSH
49424: LD_VAR 0 3
49428: PUSH
49429: LD_VAR 0 4
49433: PUSH
49434: LD_VAR 0 5
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: ST_TO_ADDR
// exit ;
49445: GO 49791
// end ; _chassis := AvailableChassisList ( factory ) ;
49447: LD_ADDR_VAR 0 9
49451: PUSH
49452: LD_VAR 0 1
49456: PPUSH
49457: CALL_OW 475
49461: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
49462: LD_ADDR_VAR 0 11
49466: PUSH
49467: LD_VAR 0 1
49471: PPUSH
49472: CALL_OW 476
49476: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
49477: LD_ADDR_VAR 0 12
49481: PUSH
49482: LD_VAR 0 1
49486: PPUSH
49487: CALL_OW 477
49491: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
49492: LD_ADDR_VAR 0 10
49496: PUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: CALL_OW 478
49506: ST_TO_ADDR
// if not chassis in _chassis then
49507: LD_VAR 0 2
49511: PUSH
49512: LD_VAR 0 9
49516: IN
49517: NOT
49518: IFFALSE 49544
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49520: LD_ADDR_VAR 0 2
49524: PUSH
49525: LD_VAR 0 9
49529: PUSH
49530: LD_INT 1
49532: PPUSH
49533: LD_VAR 0 9
49537: PPUSH
49538: CALL_OW 12
49542: ARRAY
49543: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49544: LD_VAR 0 2
49548: PPUSH
49549: LD_VAR 0 3
49553: PPUSH
49554: CALL 49796 0 2
49558: NOT
49559: IFFALSE 49618
// repeat engine := _engine [ 1 ] ;
49561: LD_ADDR_VAR 0 3
49565: PUSH
49566: LD_VAR 0 11
49570: PUSH
49571: LD_INT 1
49573: ARRAY
49574: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49575: LD_ADDR_VAR 0 11
49579: PUSH
49580: LD_VAR 0 11
49584: PPUSH
49585: LD_INT 1
49587: PPUSH
49588: CALL_OW 3
49592: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49593: LD_VAR 0 2
49597: PPUSH
49598: LD_VAR 0 3
49602: PPUSH
49603: CALL 49796 0 2
49607: PUSH
49608: LD_VAR 0 11
49612: PUSH
49613: EMPTY
49614: EQUAL
49615: OR
49616: IFFALSE 49561
// if not control in _control then
49618: LD_VAR 0 4
49622: PUSH
49623: LD_VAR 0 12
49627: IN
49628: NOT
49629: IFFALSE 49655
// control := _control [ rand ( 1 , _control ) ] ;
49631: LD_ADDR_VAR 0 4
49635: PUSH
49636: LD_VAR 0 12
49640: PUSH
49641: LD_INT 1
49643: PPUSH
49644: LD_VAR 0 12
49648: PPUSH
49649: CALL_OW 12
49653: ARRAY
49654: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49655: LD_VAR 0 2
49659: PPUSH
49660: LD_VAR 0 5
49664: PPUSH
49665: CALL 50016 0 2
49669: NOT
49670: IFFALSE 49729
// repeat weapon := _weapon [ 1 ] ;
49672: LD_ADDR_VAR 0 5
49676: PUSH
49677: LD_VAR 0 10
49681: PUSH
49682: LD_INT 1
49684: ARRAY
49685: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49686: LD_ADDR_VAR 0 10
49690: PUSH
49691: LD_VAR 0 10
49695: PPUSH
49696: LD_INT 1
49698: PPUSH
49699: CALL_OW 3
49703: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49704: LD_VAR 0 2
49708: PPUSH
49709: LD_VAR 0 5
49713: PPUSH
49714: CALL 50016 0 2
49718: PUSH
49719: LD_VAR 0 10
49723: PUSH
49724: EMPTY
49725: EQUAL
49726: OR
49727: IFFALSE 49672
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49729: LD_VAR 0 1
49733: PPUSH
49734: LD_VAR 0 2
49738: PPUSH
49739: LD_VAR 0 3
49743: PPUSH
49744: LD_VAR 0 4
49748: PPUSH
49749: LD_VAR 0 5
49753: PPUSH
49754: CALL_OW 448
49758: IFFALSE 49791
// result := [ chassis , engine , control , weapon ] ;
49760: LD_ADDR_VAR 0 6
49764: PUSH
49765: LD_VAR 0 2
49769: PUSH
49770: LD_VAR 0 3
49774: PUSH
49775: LD_VAR 0 4
49779: PUSH
49780: LD_VAR 0 5
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: ST_TO_ADDR
// end ;
49791: LD_VAR 0 6
49795: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49796: LD_INT 0
49798: PPUSH
// if not chassis or not engine then
49799: LD_VAR 0 1
49803: NOT
49804: PUSH
49805: LD_VAR 0 2
49809: NOT
49810: OR
49811: IFFALSE 49815
// exit ;
49813: GO 50011
// case engine of engine_solar :
49815: LD_VAR 0 2
49819: PUSH
49820: LD_INT 2
49822: DOUBLE
49823: EQUAL
49824: IFTRUE 49828
49826: GO 49866
49828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49829: LD_ADDR_VAR 0 3
49833: PUSH
49834: LD_INT 11
49836: PUSH
49837: LD_INT 12
49839: PUSH
49840: LD_INT 13
49842: PUSH
49843: LD_INT 14
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
49864: GO 49995
49866: LD_INT 1
49868: DOUBLE
49869: EQUAL
49870: IFTRUE 49874
49872: GO 49936
49874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49875: LD_ADDR_VAR 0 3
49879: PUSH
49880: LD_INT 11
49882: PUSH
49883: LD_INT 12
49885: PUSH
49886: LD_INT 13
49888: PUSH
49889: LD_INT 14
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 3
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: LD_INT 5
49906: PUSH
49907: LD_INT 21
49909: PUSH
49910: LD_INT 23
49912: PUSH
49913: LD_INT 22
49915: PUSH
49916: LD_INT 24
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: ST_TO_ADDR
49934: GO 49995
49936: LD_INT 3
49938: DOUBLE
49939: EQUAL
49940: IFTRUE 49944
49942: GO 49994
49944: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49945: LD_ADDR_VAR 0 3
49949: PUSH
49950: LD_INT 13
49952: PUSH
49953: LD_INT 14
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 4
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: LD_INT 21
49970: PUSH
49971: LD_INT 22
49973: PUSH
49974: LD_INT 23
49976: PUSH
49977: LD_INT 24
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: ST_TO_ADDR
49992: GO 49995
49994: POP
// result := ( chassis in result ) ;
49995: LD_ADDR_VAR 0 3
49999: PUSH
50000: LD_VAR 0 1
50004: PUSH
50005: LD_VAR 0 3
50009: IN
50010: ST_TO_ADDR
// end ;
50011: LD_VAR 0 3
50015: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50016: LD_INT 0
50018: PPUSH
// if not chassis or not weapon then
50019: LD_VAR 0 1
50023: NOT
50024: PUSH
50025: LD_VAR 0 2
50029: NOT
50030: OR
50031: IFFALSE 50035
// exit ;
50033: GO 51061
// case weapon of us_machine_gun :
50035: LD_VAR 0 2
50039: PUSH
50040: LD_INT 2
50042: DOUBLE
50043: EQUAL
50044: IFTRUE 50048
50046: GO 50078
50048: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50049: LD_ADDR_VAR 0 3
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: LD_INT 5
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: ST_TO_ADDR
50076: GO 51045
50078: LD_INT 3
50080: DOUBLE
50081: EQUAL
50082: IFTRUE 50086
50084: GO 50116
50086: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
50087: LD_ADDR_VAR 0 3
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: LD_INT 4
50103: PUSH
50104: LD_INT 5
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: ST_TO_ADDR
50114: GO 51045
50116: LD_INT 11
50118: DOUBLE
50119: EQUAL
50120: IFTRUE 50124
50122: GO 50154
50124: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
50125: LD_ADDR_VAR 0 3
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: LD_INT 4
50141: PUSH
50142: LD_INT 5
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: ST_TO_ADDR
50152: GO 51045
50154: LD_INT 4
50156: DOUBLE
50157: EQUAL
50158: IFTRUE 50162
50160: GO 50188
50162: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
50163: LD_ADDR_VAR 0 3
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: LD_INT 5
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: ST_TO_ADDR
50186: GO 51045
50188: LD_INT 5
50190: DOUBLE
50191: EQUAL
50192: IFTRUE 50196
50194: GO 50222
50196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
50197: LD_ADDR_VAR 0 3
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 4
50210: PUSH
50211: LD_INT 5
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
50220: GO 51045
50222: LD_INT 9
50224: DOUBLE
50225: EQUAL
50226: IFTRUE 50230
50228: GO 50256
50230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
50231: LD_ADDR_VAR 0 3
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: LD_INT 4
50244: PUSH
50245: LD_INT 5
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: ST_TO_ADDR
50254: GO 51045
50256: LD_INT 7
50258: DOUBLE
50259: EQUAL
50260: IFTRUE 50264
50262: GO 50290
50264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
50265: LD_ADDR_VAR 0 3
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 3
50275: PUSH
50276: LD_INT 4
50278: PUSH
50279: LD_INT 5
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
50288: GO 51045
50290: LD_INT 12
50292: DOUBLE
50293: EQUAL
50294: IFTRUE 50298
50296: GO 50324
50298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
50299: LD_ADDR_VAR 0 3
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: LD_INT 4
50312: PUSH
50313: LD_INT 5
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: ST_TO_ADDR
50322: GO 51045
50324: LD_INT 13
50326: DOUBLE
50327: EQUAL
50328: IFTRUE 50332
50330: GO 50358
50332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
50333: LD_ADDR_VAR 0 3
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: LD_INT 4
50346: PUSH
50347: LD_INT 5
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: ST_TO_ADDR
50356: GO 51045
50358: LD_INT 14
50360: DOUBLE
50361: EQUAL
50362: IFTRUE 50366
50364: GO 50384
50366: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
50367: LD_ADDR_VAR 0 3
50371: PUSH
50372: LD_INT 4
50374: PUSH
50375: LD_INT 5
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: ST_TO_ADDR
50382: GO 51045
50384: LD_INT 6
50386: DOUBLE
50387: EQUAL
50388: IFTRUE 50392
50390: GO 50410
50392: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
50393: LD_ADDR_VAR 0 3
50397: PUSH
50398: LD_INT 4
50400: PUSH
50401: LD_INT 5
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: ST_TO_ADDR
50408: GO 51045
50410: LD_INT 10
50412: DOUBLE
50413: EQUAL
50414: IFTRUE 50418
50416: GO 50436
50418: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
50419: LD_ADDR_VAR 0 3
50423: PUSH
50424: LD_INT 4
50426: PUSH
50427: LD_INT 5
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: ST_TO_ADDR
50434: GO 51045
50436: LD_INT 22
50438: DOUBLE
50439: EQUAL
50440: IFTRUE 50444
50442: GO 50470
50444: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
50445: LD_ADDR_VAR 0 3
50449: PUSH
50450: LD_INT 11
50452: PUSH
50453: LD_INT 12
50455: PUSH
50456: LD_INT 13
50458: PUSH
50459: LD_INT 14
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
50468: GO 51045
50470: LD_INT 23
50472: DOUBLE
50473: EQUAL
50474: IFTRUE 50478
50476: GO 50504
50478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50479: LD_ADDR_VAR 0 3
50483: PUSH
50484: LD_INT 11
50486: PUSH
50487: LD_INT 12
50489: PUSH
50490: LD_INT 13
50492: PUSH
50493: LD_INT 14
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: ST_TO_ADDR
50502: GO 51045
50504: LD_INT 24
50506: DOUBLE
50507: EQUAL
50508: IFTRUE 50512
50510: GO 50538
50512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50513: LD_ADDR_VAR 0 3
50517: PUSH
50518: LD_INT 11
50520: PUSH
50521: LD_INT 12
50523: PUSH
50524: LD_INT 13
50526: PUSH
50527: LD_INT 14
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
50536: GO 51045
50538: LD_INT 30
50540: DOUBLE
50541: EQUAL
50542: IFTRUE 50546
50544: GO 50572
50546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50547: LD_ADDR_VAR 0 3
50551: PUSH
50552: LD_INT 11
50554: PUSH
50555: LD_INT 12
50557: PUSH
50558: LD_INT 13
50560: PUSH
50561: LD_INT 14
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: ST_TO_ADDR
50570: GO 51045
50572: LD_INT 25
50574: DOUBLE
50575: EQUAL
50576: IFTRUE 50580
50578: GO 50598
50580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50581: LD_ADDR_VAR 0 3
50585: PUSH
50586: LD_INT 13
50588: PUSH
50589: LD_INT 14
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: ST_TO_ADDR
50596: GO 51045
50598: LD_INT 27
50600: DOUBLE
50601: EQUAL
50602: IFTRUE 50606
50604: GO 50624
50606: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50607: LD_ADDR_VAR 0 3
50611: PUSH
50612: LD_INT 13
50614: PUSH
50615: LD_INT 14
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: ST_TO_ADDR
50622: GO 51045
50624: LD_INT 28
50626: DOUBLE
50627: EQUAL
50628: IFTRUE 50632
50630: GO 50650
50632: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50633: LD_ADDR_VAR 0 3
50637: PUSH
50638: LD_INT 13
50640: PUSH
50641: LD_INT 14
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: ST_TO_ADDR
50648: GO 51045
50650: LD_INT 29
50652: DOUBLE
50653: EQUAL
50654: IFTRUE 50658
50656: GO 50676
50658: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50659: LD_ADDR_VAR 0 3
50663: PUSH
50664: LD_INT 13
50666: PUSH
50667: LD_INT 14
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: ST_TO_ADDR
50674: GO 51045
50676: LD_INT 31
50678: DOUBLE
50679: EQUAL
50680: IFTRUE 50684
50682: GO 50702
50684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50685: LD_ADDR_VAR 0 3
50689: PUSH
50690: LD_INT 13
50692: PUSH
50693: LD_INT 14
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: ST_TO_ADDR
50700: GO 51045
50702: LD_INT 26
50704: DOUBLE
50705: EQUAL
50706: IFTRUE 50710
50708: GO 50728
50710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50711: LD_ADDR_VAR 0 3
50715: PUSH
50716: LD_INT 13
50718: PUSH
50719: LD_INT 14
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: ST_TO_ADDR
50726: GO 51045
50728: LD_INT 42
50730: DOUBLE
50731: EQUAL
50732: IFTRUE 50736
50734: GO 50762
50736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50737: LD_ADDR_VAR 0 3
50741: PUSH
50742: LD_INT 21
50744: PUSH
50745: LD_INT 22
50747: PUSH
50748: LD_INT 23
50750: PUSH
50751: LD_INT 24
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
50760: GO 51045
50762: LD_INT 43
50764: DOUBLE
50765: EQUAL
50766: IFTRUE 50770
50768: GO 50796
50770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50771: LD_ADDR_VAR 0 3
50775: PUSH
50776: LD_INT 21
50778: PUSH
50779: LD_INT 22
50781: PUSH
50782: LD_INT 23
50784: PUSH
50785: LD_INT 24
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
50794: GO 51045
50796: LD_INT 44
50798: DOUBLE
50799: EQUAL
50800: IFTRUE 50804
50802: GO 50830
50804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50805: LD_ADDR_VAR 0 3
50809: PUSH
50810: LD_INT 21
50812: PUSH
50813: LD_INT 22
50815: PUSH
50816: LD_INT 23
50818: PUSH
50819: LD_INT 24
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: ST_TO_ADDR
50828: GO 51045
50830: LD_INT 45
50832: DOUBLE
50833: EQUAL
50834: IFTRUE 50838
50836: GO 50864
50838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50839: LD_ADDR_VAR 0 3
50843: PUSH
50844: LD_INT 21
50846: PUSH
50847: LD_INT 22
50849: PUSH
50850: LD_INT 23
50852: PUSH
50853: LD_INT 24
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
50862: GO 51045
50864: LD_INT 49
50866: DOUBLE
50867: EQUAL
50868: IFTRUE 50872
50870: GO 50898
50872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50873: LD_ADDR_VAR 0 3
50877: PUSH
50878: LD_INT 21
50880: PUSH
50881: LD_INT 22
50883: PUSH
50884: LD_INT 23
50886: PUSH
50887: LD_INT 24
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: ST_TO_ADDR
50896: GO 51045
50898: LD_INT 51
50900: DOUBLE
50901: EQUAL
50902: IFTRUE 50906
50904: GO 50932
50906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50907: LD_ADDR_VAR 0 3
50911: PUSH
50912: LD_INT 21
50914: PUSH
50915: LD_INT 22
50917: PUSH
50918: LD_INT 23
50920: PUSH
50921: LD_INT 24
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
50930: GO 51045
50932: LD_INT 52
50934: DOUBLE
50935: EQUAL
50936: IFTRUE 50940
50938: GO 50966
50940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50941: LD_ADDR_VAR 0 3
50945: PUSH
50946: LD_INT 21
50948: PUSH
50949: LD_INT 22
50951: PUSH
50952: LD_INT 23
50954: PUSH
50955: LD_INT 24
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
50964: GO 51045
50966: LD_INT 53
50968: DOUBLE
50969: EQUAL
50970: IFTRUE 50974
50972: GO 50992
50974: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50975: LD_ADDR_VAR 0 3
50979: PUSH
50980: LD_INT 23
50982: PUSH
50983: LD_INT 24
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: ST_TO_ADDR
50990: GO 51045
50992: LD_INT 46
50994: DOUBLE
50995: EQUAL
50996: IFTRUE 51000
50998: GO 51018
51000: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51001: LD_ADDR_VAR 0 3
51005: PUSH
51006: LD_INT 23
51008: PUSH
51009: LD_INT 24
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: ST_TO_ADDR
51016: GO 51045
51018: LD_INT 47
51020: DOUBLE
51021: EQUAL
51022: IFTRUE 51026
51024: GO 51044
51026: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51027: LD_ADDR_VAR 0 3
51031: PUSH
51032: LD_INT 23
51034: PUSH
51035: LD_INT 24
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: ST_TO_ADDR
51042: GO 51045
51044: POP
// result := ( chassis in result ) ;
51045: LD_ADDR_VAR 0 3
51049: PUSH
51050: LD_VAR 0 1
51054: PUSH
51055: LD_VAR 0 3
51059: IN
51060: ST_TO_ADDR
// end ;
51061: LD_VAR 0 3
51065: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
51066: LD_INT 0
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
// result := array ;
51075: LD_ADDR_VAR 0 5
51079: PUSH
51080: LD_VAR 0 1
51084: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
51085: LD_VAR 0 1
51089: NOT
51090: PUSH
51091: LD_VAR 0 2
51095: NOT
51096: OR
51097: PUSH
51098: LD_VAR 0 3
51102: NOT
51103: OR
51104: PUSH
51105: LD_VAR 0 2
51109: PUSH
51110: LD_VAR 0 1
51114: GREATER
51115: OR
51116: PUSH
51117: LD_VAR 0 3
51121: PUSH
51122: LD_VAR 0 1
51126: GREATER
51127: OR
51128: IFFALSE 51132
// exit ;
51130: GO 51428
// if direction then
51132: LD_VAR 0 4
51136: IFFALSE 51200
// begin d := 1 ;
51138: LD_ADDR_VAR 0 9
51142: PUSH
51143: LD_INT 1
51145: ST_TO_ADDR
// if i_from > i_to then
51146: LD_VAR 0 2
51150: PUSH
51151: LD_VAR 0 3
51155: GREATER
51156: IFFALSE 51182
// length := ( array - i_from ) + i_to else
51158: LD_ADDR_VAR 0 11
51162: PUSH
51163: LD_VAR 0 1
51167: PUSH
51168: LD_VAR 0 2
51172: MINUS
51173: PUSH
51174: LD_VAR 0 3
51178: PLUS
51179: ST_TO_ADDR
51180: GO 51198
// length := i_to - i_from ;
51182: LD_ADDR_VAR 0 11
51186: PUSH
51187: LD_VAR 0 3
51191: PUSH
51192: LD_VAR 0 2
51196: MINUS
51197: ST_TO_ADDR
// end else
51198: GO 51261
// begin d := - 1 ;
51200: LD_ADDR_VAR 0 9
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: ST_TO_ADDR
// if i_from > i_to then
51209: LD_VAR 0 2
51213: PUSH
51214: LD_VAR 0 3
51218: GREATER
51219: IFFALSE 51239
// length := i_from - i_to else
51221: LD_ADDR_VAR 0 11
51225: PUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_VAR 0 3
51235: MINUS
51236: ST_TO_ADDR
51237: GO 51261
// length := ( array - i_to ) + i_from ;
51239: LD_ADDR_VAR 0 11
51243: PUSH
51244: LD_VAR 0 1
51248: PUSH
51249: LD_VAR 0 3
51253: MINUS
51254: PUSH
51255: LD_VAR 0 2
51259: PLUS
51260: ST_TO_ADDR
// end ; if not length then
51261: LD_VAR 0 11
51265: NOT
51266: IFFALSE 51270
// exit ;
51268: GO 51428
// tmp := array ;
51270: LD_ADDR_VAR 0 10
51274: PUSH
51275: LD_VAR 0 1
51279: ST_TO_ADDR
// for i = 1 to length do
51280: LD_ADDR_VAR 0 6
51284: PUSH
51285: DOUBLE
51286: LD_INT 1
51288: DEC
51289: ST_TO_ADDR
51290: LD_VAR 0 11
51294: PUSH
51295: FOR_TO
51296: IFFALSE 51416
// begin for j = 1 to array do
51298: LD_ADDR_VAR 0 7
51302: PUSH
51303: DOUBLE
51304: LD_INT 1
51306: DEC
51307: ST_TO_ADDR
51308: LD_VAR 0 1
51312: PUSH
51313: FOR_TO
51314: IFFALSE 51402
// begin k := j + d ;
51316: LD_ADDR_VAR 0 8
51320: PUSH
51321: LD_VAR 0 7
51325: PUSH
51326: LD_VAR 0 9
51330: PLUS
51331: ST_TO_ADDR
// if k > array then
51332: LD_VAR 0 8
51336: PUSH
51337: LD_VAR 0 1
51341: GREATER
51342: IFFALSE 51352
// k := 1 ;
51344: LD_ADDR_VAR 0 8
51348: PUSH
51349: LD_INT 1
51351: ST_TO_ADDR
// if not k then
51352: LD_VAR 0 8
51356: NOT
51357: IFFALSE 51369
// k := array ;
51359: LD_ADDR_VAR 0 8
51363: PUSH
51364: LD_VAR 0 1
51368: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
51369: LD_ADDR_VAR 0 10
51373: PUSH
51374: LD_VAR 0 10
51378: PPUSH
51379: LD_VAR 0 8
51383: PPUSH
51384: LD_VAR 0 1
51388: PUSH
51389: LD_VAR 0 7
51393: ARRAY
51394: PPUSH
51395: CALL_OW 1
51399: ST_TO_ADDR
// end ;
51400: GO 51313
51402: POP
51403: POP
// array := tmp ;
51404: LD_ADDR_VAR 0 1
51408: PUSH
51409: LD_VAR 0 10
51413: ST_TO_ADDR
// end ;
51414: GO 51295
51416: POP
51417: POP
// result := array ;
51418: LD_ADDR_VAR 0 5
51422: PUSH
51423: LD_VAR 0 1
51427: ST_TO_ADDR
// end ;
51428: LD_VAR 0 5
51432: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51433: LD_INT 0
51435: PPUSH
51436: PPUSH
// result := 0 ;
51437: LD_ADDR_VAR 0 3
51441: PUSH
51442: LD_INT 0
51444: ST_TO_ADDR
// if not array or not value in array then
51445: LD_VAR 0 1
51449: NOT
51450: PUSH
51451: LD_VAR 0 2
51455: PUSH
51456: LD_VAR 0 1
51460: IN
51461: NOT
51462: OR
51463: IFFALSE 51467
// exit ;
51465: GO 51521
// for i = 1 to array do
51467: LD_ADDR_VAR 0 4
51471: PUSH
51472: DOUBLE
51473: LD_INT 1
51475: DEC
51476: ST_TO_ADDR
51477: LD_VAR 0 1
51481: PUSH
51482: FOR_TO
51483: IFFALSE 51519
// if value = array [ i ] then
51485: LD_VAR 0 2
51489: PUSH
51490: LD_VAR 0 1
51494: PUSH
51495: LD_VAR 0 4
51499: ARRAY
51500: EQUAL
51501: IFFALSE 51517
// begin result := i ;
51503: LD_ADDR_VAR 0 3
51507: PUSH
51508: LD_VAR 0 4
51512: ST_TO_ADDR
// exit ;
51513: POP
51514: POP
51515: GO 51521
// end ;
51517: GO 51482
51519: POP
51520: POP
// end ;
51521: LD_VAR 0 3
51525: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51526: LD_INT 0
51528: PPUSH
// vc_chassis := chassis ;
51529: LD_ADDR_OWVAR 37
51533: PUSH
51534: LD_VAR 0 1
51538: ST_TO_ADDR
// vc_engine := engine ;
51539: LD_ADDR_OWVAR 39
51543: PUSH
51544: LD_VAR 0 2
51548: ST_TO_ADDR
// vc_control := control ;
51549: LD_ADDR_OWVAR 38
51553: PUSH
51554: LD_VAR 0 3
51558: ST_TO_ADDR
// vc_weapon := weapon ;
51559: LD_ADDR_OWVAR 40
51563: PUSH
51564: LD_VAR 0 4
51568: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51569: LD_ADDR_OWVAR 41
51573: PUSH
51574: LD_VAR 0 5
51578: ST_TO_ADDR
// end ;
51579: LD_VAR 0 6
51583: RET
// export function WantPlant ( unit ) ; var task ; begin
51584: LD_INT 0
51586: PPUSH
51587: PPUSH
// result := false ;
51588: LD_ADDR_VAR 0 2
51592: PUSH
51593: LD_INT 0
51595: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51596: LD_ADDR_VAR 0 3
51600: PUSH
51601: LD_VAR 0 1
51605: PPUSH
51606: CALL_OW 437
51610: ST_TO_ADDR
// if task then
51611: LD_VAR 0 3
51615: IFFALSE 51643
// if task [ 1 ] [ 1 ] = p then
51617: LD_VAR 0 3
51621: PUSH
51622: LD_INT 1
51624: ARRAY
51625: PUSH
51626: LD_INT 1
51628: ARRAY
51629: PUSH
51630: LD_STRING p
51632: EQUAL
51633: IFFALSE 51643
// result := true ;
51635: LD_ADDR_VAR 0 2
51639: PUSH
51640: LD_INT 1
51642: ST_TO_ADDR
// end ;
51643: LD_VAR 0 2
51647: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51648: LD_INT 0
51650: PPUSH
51651: PPUSH
51652: PPUSH
51653: PPUSH
// if pos < 1 then
51654: LD_VAR 0 2
51658: PUSH
51659: LD_INT 1
51661: LESS
51662: IFFALSE 51666
// exit ;
51664: GO 51969
// if pos = 1 then
51666: LD_VAR 0 2
51670: PUSH
51671: LD_INT 1
51673: EQUAL
51674: IFFALSE 51707
// result := Replace ( arr , pos [ 1 ] , value ) else
51676: LD_ADDR_VAR 0 4
51680: PUSH
51681: LD_VAR 0 1
51685: PPUSH
51686: LD_VAR 0 2
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PPUSH
51695: LD_VAR 0 3
51699: PPUSH
51700: CALL_OW 1
51704: ST_TO_ADDR
51705: GO 51969
// begin tmp := arr ;
51707: LD_ADDR_VAR 0 6
51711: PUSH
51712: LD_VAR 0 1
51716: ST_TO_ADDR
// s_arr := [ tmp ] ;
51717: LD_ADDR_VAR 0 7
51721: PUSH
51722: LD_VAR 0 6
51726: PUSH
51727: EMPTY
51728: LIST
51729: ST_TO_ADDR
// for i = 1 to pos - 1 do
51730: LD_ADDR_VAR 0 5
51734: PUSH
51735: DOUBLE
51736: LD_INT 1
51738: DEC
51739: ST_TO_ADDR
51740: LD_VAR 0 2
51744: PUSH
51745: LD_INT 1
51747: MINUS
51748: PUSH
51749: FOR_TO
51750: IFFALSE 51795
// begin tmp := tmp [ pos [ i ] ] ;
51752: LD_ADDR_VAR 0 6
51756: PUSH
51757: LD_VAR 0 6
51761: PUSH
51762: LD_VAR 0 2
51766: PUSH
51767: LD_VAR 0 5
51771: ARRAY
51772: ARRAY
51773: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51774: LD_ADDR_VAR 0 7
51778: PUSH
51779: LD_VAR 0 7
51783: PUSH
51784: LD_VAR 0 6
51788: PUSH
51789: EMPTY
51790: LIST
51791: ADD
51792: ST_TO_ADDR
// end ;
51793: GO 51749
51795: POP
51796: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51797: LD_ADDR_VAR 0 6
51801: PUSH
51802: LD_VAR 0 6
51806: PPUSH
51807: LD_VAR 0 2
51811: PUSH
51812: LD_VAR 0 2
51816: ARRAY
51817: PPUSH
51818: LD_VAR 0 3
51822: PPUSH
51823: CALL_OW 1
51827: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51828: LD_ADDR_VAR 0 7
51832: PUSH
51833: LD_VAR 0 7
51837: PPUSH
51838: LD_VAR 0 7
51842: PPUSH
51843: LD_VAR 0 6
51847: PPUSH
51848: CALL_OW 1
51852: ST_TO_ADDR
// for i = s_arr downto 2 do
51853: LD_ADDR_VAR 0 5
51857: PUSH
51858: DOUBLE
51859: LD_VAR 0 7
51863: INC
51864: ST_TO_ADDR
51865: LD_INT 2
51867: PUSH
51868: FOR_DOWNTO
51869: IFFALSE 51953
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51871: LD_ADDR_VAR 0 6
51875: PUSH
51876: LD_VAR 0 7
51880: PUSH
51881: LD_VAR 0 5
51885: PUSH
51886: LD_INT 1
51888: MINUS
51889: ARRAY
51890: PPUSH
51891: LD_VAR 0 2
51895: PUSH
51896: LD_VAR 0 5
51900: PUSH
51901: LD_INT 1
51903: MINUS
51904: ARRAY
51905: PPUSH
51906: LD_VAR 0 7
51910: PUSH
51911: LD_VAR 0 5
51915: ARRAY
51916: PPUSH
51917: CALL_OW 1
51921: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51922: LD_ADDR_VAR 0 7
51926: PUSH
51927: LD_VAR 0 7
51931: PPUSH
51932: LD_VAR 0 5
51936: PUSH
51937: LD_INT 1
51939: MINUS
51940: PPUSH
51941: LD_VAR 0 6
51945: PPUSH
51946: CALL_OW 1
51950: ST_TO_ADDR
// end ;
51951: GO 51868
51953: POP
51954: POP
// result := s_arr [ 1 ] ;
51955: LD_ADDR_VAR 0 4
51959: PUSH
51960: LD_VAR 0 7
51964: PUSH
51965: LD_INT 1
51967: ARRAY
51968: ST_TO_ADDR
// end ; end ;
51969: LD_VAR 0 4
51973: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51974: LD_INT 0
51976: PPUSH
51977: PPUSH
// if not list then
51978: LD_VAR 0 1
51982: NOT
51983: IFFALSE 51987
// exit ;
51985: GO 52078
// i := list [ pos1 ] ;
51987: LD_ADDR_VAR 0 5
51991: PUSH
51992: LD_VAR 0 1
51996: PUSH
51997: LD_VAR 0 2
52001: ARRAY
52002: ST_TO_ADDR
// if not i then
52003: LD_VAR 0 5
52007: NOT
52008: IFFALSE 52012
// exit ;
52010: GO 52078
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52012: LD_ADDR_VAR 0 1
52016: PUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: LD_VAR 0 2
52026: PPUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_VAR 0 3
52036: ARRAY
52037: PPUSH
52038: CALL_OW 1
52042: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
52043: LD_ADDR_VAR 0 1
52047: PUSH
52048: LD_VAR 0 1
52052: PPUSH
52053: LD_VAR 0 3
52057: PPUSH
52058: LD_VAR 0 5
52062: PPUSH
52063: CALL_OW 1
52067: ST_TO_ADDR
// result := list ;
52068: LD_ADDR_VAR 0 4
52072: PUSH
52073: LD_VAR 0 1
52077: ST_TO_ADDR
// end ;
52078: LD_VAR 0 4
52082: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
52083: LD_INT 0
52085: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
52086: LD_ADDR_VAR 0 5
52090: PUSH
52091: LD_VAR 0 1
52095: PPUSH
52096: CALL_OW 250
52100: PPUSH
52101: LD_VAR 0 1
52105: PPUSH
52106: CALL_OW 251
52110: PPUSH
52111: LD_VAR 0 2
52115: PPUSH
52116: LD_VAR 0 3
52120: PPUSH
52121: LD_VAR 0 4
52125: PPUSH
52126: CALL 52136 0 5
52130: ST_TO_ADDR
// end ;
52131: LD_VAR 0 5
52135: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
52136: LD_INT 0
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
// if not list then
52142: LD_VAR 0 3
52146: NOT
52147: IFFALSE 52151
// exit ;
52149: GO 52539
// result := [ ] ;
52151: LD_ADDR_VAR 0 6
52155: PUSH
52156: EMPTY
52157: ST_TO_ADDR
// for i in list do
52158: LD_ADDR_VAR 0 7
52162: PUSH
52163: LD_VAR 0 3
52167: PUSH
52168: FOR_IN
52169: IFFALSE 52371
// begin tmp := GetDistUnitXY ( i , x , y ) ;
52171: LD_ADDR_VAR 0 9
52175: PUSH
52176: LD_VAR 0 7
52180: PPUSH
52181: LD_VAR 0 1
52185: PPUSH
52186: LD_VAR 0 2
52190: PPUSH
52191: CALL_OW 297
52195: ST_TO_ADDR
// if not result then
52196: LD_VAR 0 6
52200: NOT
52201: IFFALSE 52227
// result := [ [ i , tmp ] ] else
52203: LD_ADDR_VAR 0 6
52207: PUSH
52208: LD_VAR 0 7
52212: PUSH
52213: LD_VAR 0 9
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: ST_TO_ADDR
52225: GO 52369
// begin if result [ result ] [ 2 ] < tmp then
52227: LD_VAR 0 6
52231: PUSH
52232: LD_VAR 0 6
52236: ARRAY
52237: PUSH
52238: LD_INT 2
52240: ARRAY
52241: PUSH
52242: LD_VAR 0 9
52246: LESS
52247: IFFALSE 52289
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
52249: LD_ADDR_VAR 0 6
52253: PUSH
52254: LD_VAR 0 6
52258: PPUSH
52259: LD_VAR 0 6
52263: PUSH
52264: LD_INT 1
52266: PLUS
52267: PPUSH
52268: LD_VAR 0 7
52272: PUSH
52273: LD_VAR 0 9
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PPUSH
52282: CALL_OW 2
52286: ST_TO_ADDR
52287: GO 52369
// for j = 1 to result do
52289: LD_ADDR_VAR 0 8
52293: PUSH
52294: DOUBLE
52295: LD_INT 1
52297: DEC
52298: ST_TO_ADDR
52299: LD_VAR 0 6
52303: PUSH
52304: FOR_TO
52305: IFFALSE 52367
// begin if tmp < result [ j ] [ 2 ] then
52307: LD_VAR 0 9
52311: PUSH
52312: LD_VAR 0 6
52316: PUSH
52317: LD_VAR 0 8
52321: ARRAY
52322: PUSH
52323: LD_INT 2
52325: ARRAY
52326: LESS
52327: IFFALSE 52365
// begin result := Insert ( result , j , [ i , tmp ] ) ;
52329: LD_ADDR_VAR 0 6
52333: PUSH
52334: LD_VAR 0 6
52338: PPUSH
52339: LD_VAR 0 8
52343: PPUSH
52344: LD_VAR 0 7
52348: PUSH
52349: LD_VAR 0 9
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PPUSH
52358: CALL_OW 2
52362: ST_TO_ADDR
// break ;
52363: GO 52367
// end ; end ;
52365: GO 52304
52367: POP
52368: POP
// end ; end ;
52369: GO 52168
52371: POP
52372: POP
// if result and not asc then
52373: LD_VAR 0 6
52377: PUSH
52378: LD_VAR 0 4
52382: NOT
52383: AND
52384: IFFALSE 52459
// begin tmp := result ;
52386: LD_ADDR_VAR 0 9
52390: PUSH
52391: LD_VAR 0 6
52395: ST_TO_ADDR
// for i = tmp downto 1 do
52396: LD_ADDR_VAR 0 7
52400: PUSH
52401: DOUBLE
52402: LD_VAR 0 9
52406: INC
52407: ST_TO_ADDR
52408: LD_INT 1
52410: PUSH
52411: FOR_DOWNTO
52412: IFFALSE 52457
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52414: LD_ADDR_VAR 0 6
52418: PUSH
52419: LD_VAR 0 6
52423: PPUSH
52424: LD_VAR 0 9
52428: PUSH
52429: LD_VAR 0 7
52433: MINUS
52434: PUSH
52435: LD_INT 1
52437: PLUS
52438: PPUSH
52439: LD_VAR 0 9
52443: PUSH
52444: LD_VAR 0 7
52448: ARRAY
52449: PPUSH
52450: CALL_OW 1
52454: ST_TO_ADDR
52455: GO 52411
52457: POP
52458: POP
// end ; tmp := [ ] ;
52459: LD_ADDR_VAR 0 9
52463: PUSH
52464: EMPTY
52465: ST_TO_ADDR
// if mode then
52466: LD_VAR 0 5
52470: IFFALSE 52539
// begin for i = 1 to result do
52472: LD_ADDR_VAR 0 7
52476: PUSH
52477: DOUBLE
52478: LD_INT 1
52480: DEC
52481: ST_TO_ADDR
52482: LD_VAR 0 6
52486: PUSH
52487: FOR_TO
52488: IFFALSE 52527
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52490: LD_ADDR_VAR 0 9
52494: PUSH
52495: LD_VAR 0 9
52499: PPUSH
52500: LD_VAR 0 7
52504: PPUSH
52505: LD_VAR 0 6
52509: PUSH
52510: LD_VAR 0 7
52514: ARRAY
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: PPUSH
52520: CALL_OW 1
52524: ST_TO_ADDR
52525: GO 52487
52527: POP
52528: POP
// result := tmp ;
52529: LD_ADDR_VAR 0 6
52533: PUSH
52534: LD_VAR 0 9
52538: ST_TO_ADDR
// end ; end ;
52539: LD_VAR 0 6
52543: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52544: LD_INT 0
52546: PPUSH
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
52551: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52552: LD_ADDR_VAR 0 5
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// if not x or not y then
52574: LD_VAR 0 2
52578: NOT
52579: PUSH
52580: LD_VAR 0 3
52584: NOT
52585: OR
52586: IFFALSE 52590
// exit ;
52588: GO 54236
// if not range then
52590: LD_VAR 0 4
52594: NOT
52595: IFFALSE 52605
// range := 10 ;
52597: LD_ADDR_VAR 0 4
52601: PUSH
52602: LD_INT 10
52604: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52605: LD_ADDR_VAR 0 8
52609: PUSH
52610: LD_INT 81
52612: PUSH
52613: LD_VAR 0 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 92
52624: PUSH
52625: LD_VAR 0 2
52629: PUSH
52630: LD_VAR 0 3
52634: PUSH
52635: LD_VAR 0 4
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: LD_INT 21
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: PPUSH
52668: CALL_OW 69
52672: ST_TO_ADDR
// if not tmp then
52673: LD_VAR 0 8
52677: NOT
52678: IFFALSE 52682
// exit ;
52680: GO 54236
// for i in tmp do
52682: LD_ADDR_VAR 0 6
52686: PUSH
52687: LD_VAR 0 8
52691: PUSH
52692: FOR_IN
52693: IFFALSE 54211
// begin points := [ 0 , 0 , 0 ] ;
52695: LD_ADDR_VAR 0 9
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// bpoints := 1 ;
52714: LD_ADDR_VAR 0 10
52718: PUSH
52719: LD_INT 1
52721: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52722: LD_VAR 0 6
52726: PPUSH
52727: CALL_OW 247
52731: PUSH
52732: LD_INT 1
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52740
52738: GO 53318
52740: POP
// begin if GetClass ( i ) = 1 then
52741: LD_VAR 0 6
52745: PPUSH
52746: CALL_OW 257
52750: PUSH
52751: LD_INT 1
52753: EQUAL
52754: IFFALSE 52775
// points := [ 10 , 5 , 3 ] ;
52756: LD_ADDR_VAR 0 9
52760: PUSH
52761: LD_INT 10
52763: PUSH
52764: LD_INT 5
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52775: LD_VAR 0 6
52779: PPUSH
52780: CALL_OW 257
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: LD_INT 4
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: IN
52799: IFFALSE 52820
// points := [ 3 , 2 , 1 ] ;
52801: LD_ADDR_VAR 0 9
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52820: LD_VAR 0 6
52824: PPUSH
52825: CALL_OW 257
52829: PUSH
52830: LD_INT 5
52832: EQUAL
52833: IFFALSE 52854
// points := [ 130 , 5 , 2 ] ;
52835: LD_ADDR_VAR 0 9
52839: PUSH
52840: LD_INT 130
52842: PUSH
52843: LD_INT 5
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: LIST
52853: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52854: LD_VAR 0 6
52858: PPUSH
52859: CALL_OW 257
52863: PUSH
52864: LD_INT 8
52866: EQUAL
52867: IFFALSE 52888
// points := [ 35 , 35 , 30 ] ;
52869: LD_ADDR_VAR 0 9
52873: PUSH
52874: LD_INT 35
52876: PUSH
52877: LD_INT 35
52879: PUSH
52880: LD_INT 30
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52888: LD_VAR 0 6
52892: PPUSH
52893: CALL_OW 257
52897: PUSH
52898: LD_INT 9
52900: EQUAL
52901: IFFALSE 52922
// points := [ 20 , 55 , 40 ] ;
52903: LD_ADDR_VAR 0 9
52907: PUSH
52908: LD_INT 20
52910: PUSH
52911: LD_INT 55
52913: PUSH
52914: LD_INT 40
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52922: LD_VAR 0 6
52926: PPUSH
52927: CALL_OW 257
52931: PUSH
52932: LD_INT 12
52934: PUSH
52935: LD_INT 16
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: IN
52942: IFFALSE 52963
// points := [ 5 , 3 , 2 ] ;
52944: LD_ADDR_VAR 0 9
52948: PUSH
52949: LD_INT 5
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52963: LD_VAR 0 6
52967: PPUSH
52968: CALL_OW 257
52972: PUSH
52973: LD_INT 17
52975: EQUAL
52976: IFFALSE 52997
// points := [ 100 , 50 , 75 ] ;
52978: LD_ADDR_VAR 0 9
52982: PUSH
52983: LD_INT 100
52985: PUSH
52986: LD_INT 50
52988: PUSH
52989: LD_INT 75
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52997: LD_VAR 0 6
53001: PPUSH
53002: CALL_OW 257
53006: PUSH
53007: LD_INT 15
53009: EQUAL
53010: IFFALSE 53031
// points := [ 10 , 5 , 3 ] ;
53012: LD_ADDR_VAR 0 9
53016: PUSH
53017: LD_INT 10
53019: PUSH
53020: LD_INT 5
53022: PUSH
53023: LD_INT 3
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// if GetClass ( i ) = 14 then
53031: LD_VAR 0 6
53035: PPUSH
53036: CALL_OW 257
53040: PUSH
53041: LD_INT 14
53043: EQUAL
53044: IFFALSE 53065
// points := [ 10 , 0 , 0 ] ;
53046: LD_ADDR_VAR 0 9
53050: PUSH
53051: LD_INT 10
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: ST_TO_ADDR
// if GetClass ( i ) = 11 then
53065: LD_VAR 0 6
53069: PPUSH
53070: CALL_OW 257
53074: PUSH
53075: LD_INT 11
53077: EQUAL
53078: IFFALSE 53099
// points := [ 30 , 10 , 5 ] ;
53080: LD_ADDR_VAR 0 9
53084: PUSH
53085: LD_INT 30
53087: PUSH
53088: LD_INT 10
53090: PUSH
53091: LD_INT 5
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
53099: LD_VAR 0 1
53103: PPUSH
53104: LD_INT 5
53106: PPUSH
53107: CALL_OW 321
53111: PUSH
53112: LD_INT 2
53114: EQUAL
53115: IFFALSE 53132
// bpoints := bpoints * 1.8 ;
53117: LD_ADDR_VAR 0 10
53121: PUSH
53122: LD_VAR 0 10
53126: PUSH
53127: LD_REAL  1.80000000000000E+0000
53130: MUL
53131: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
53132: LD_VAR 0 6
53136: PPUSH
53137: CALL_OW 257
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 4
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: IN
53160: PUSH
53161: LD_VAR 0 1
53165: PPUSH
53166: LD_INT 51
53168: PPUSH
53169: CALL_OW 321
53173: PUSH
53174: LD_INT 2
53176: EQUAL
53177: AND
53178: IFFALSE 53195
// bpoints := bpoints * 1.2 ;
53180: LD_ADDR_VAR 0 10
53184: PUSH
53185: LD_VAR 0 10
53189: PUSH
53190: LD_REAL  1.20000000000000E+0000
53193: MUL
53194: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
53195: LD_VAR 0 6
53199: PPUSH
53200: CALL_OW 257
53204: PUSH
53205: LD_INT 5
53207: PUSH
53208: LD_INT 7
53210: PUSH
53211: LD_INT 9
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: IN
53219: PUSH
53220: LD_VAR 0 1
53224: PPUSH
53225: LD_INT 52
53227: PPUSH
53228: CALL_OW 321
53232: PUSH
53233: LD_INT 2
53235: EQUAL
53236: AND
53237: IFFALSE 53254
// bpoints := bpoints * 1.5 ;
53239: LD_ADDR_VAR 0 10
53243: PUSH
53244: LD_VAR 0 10
53248: PUSH
53249: LD_REAL  1.50000000000000E+0000
53252: MUL
53253: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
53254: LD_VAR 0 1
53258: PPUSH
53259: LD_INT 66
53261: PPUSH
53262: CALL_OW 321
53266: PUSH
53267: LD_INT 2
53269: EQUAL
53270: IFFALSE 53287
// bpoints := bpoints * 1.1 ;
53272: LD_ADDR_VAR 0 10
53276: PUSH
53277: LD_VAR 0 10
53281: PUSH
53282: LD_REAL  1.10000000000000E+0000
53285: MUL
53286: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
53287: LD_ADDR_VAR 0 10
53291: PUSH
53292: LD_VAR 0 10
53296: PUSH
53297: LD_VAR 0 6
53301: PPUSH
53302: LD_INT 1
53304: PPUSH
53305: CALL_OW 259
53309: PUSH
53310: LD_REAL  1.15000000000000E+0000
53313: MUL
53314: MUL
53315: ST_TO_ADDR
// end ; unit_vehicle :
53316: GO 54140
53318: LD_INT 2
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53326
53324: GO 54128
53326: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
53327: LD_VAR 0 6
53331: PPUSH
53332: CALL_OW 264
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 42
53342: PUSH
53343: LD_INT 24
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: IN
53351: IFFALSE 53372
// points := [ 25 , 5 , 3 ] ;
53353: LD_ADDR_VAR 0 9
53357: PUSH
53358: LD_INT 25
53360: PUSH
53361: LD_INT 5
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
53372: LD_VAR 0 6
53376: PPUSH
53377: CALL_OW 264
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: LD_INT 43
53387: PUSH
53388: LD_INT 25
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: IN
53396: IFFALSE 53417
// points := [ 40 , 15 , 5 ] ;
53398: LD_ADDR_VAR 0 9
53402: PUSH
53403: LD_INT 40
53405: PUSH
53406: LD_INT 15
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53417: LD_VAR 0 6
53421: PPUSH
53422: CALL_OW 264
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 23
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: IN
53437: IFFALSE 53458
// points := [ 7 , 25 , 8 ] ;
53439: LD_ADDR_VAR 0 9
53443: PUSH
53444: LD_INT 7
53446: PUSH
53447: LD_INT 25
53449: PUSH
53450: LD_INT 8
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53458: LD_VAR 0 6
53462: PPUSH
53463: CALL_OW 264
53467: PUSH
53468: LD_INT 5
53470: PUSH
53471: LD_INT 27
53473: PUSH
53474: LD_INT 44
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: IN
53482: IFFALSE 53503
// points := [ 14 , 50 , 16 ] ;
53484: LD_ADDR_VAR 0 9
53488: PUSH
53489: LD_INT 14
53491: PUSH
53492: LD_INT 50
53494: PUSH
53495: LD_INT 16
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53503: LD_VAR 0 6
53507: PPUSH
53508: CALL_OW 264
53512: PUSH
53513: LD_INT 6
53515: PUSH
53516: LD_INT 46
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: IN
53523: IFFALSE 53544
// points := [ 32 , 120 , 70 ] ;
53525: LD_ADDR_VAR 0 9
53529: PUSH
53530: LD_INT 32
53532: PUSH
53533: LD_INT 120
53535: PUSH
53536: LD_INT 70
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
53544: LD_VAR 0 6
53548: PPUSH
53549: CALL_OW 264
53553: PUSH
53554: LD_INT 7
53556: PUSH
53557: LD_INT 28
53559: PUSH
53560: LD_INT 45
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: IN
53568: IFFALSE 53589
// points := [ 35 , 20 , 45 ] ;
53570: LD_ADDR_VAR 0 9
53574: PUSH
53575: LD_INT 35
53577: PUSH
53578: LD_INT 20
53580: PUSH
53581: LD_INT 45
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53589: LD_VAR 0 6
53593: PPUSH
53594: CALL_OW 264
53598: PUSH
53599: LD_INT 47
53601: PUSH
53602: EMPTY
53603: LIST
53604: IN
53605: IFFALSE 53626
// points := [ 67 , 45 , 75 ] ;
53607: LD_ADDR_VAR 0 9
53611: PUSH
53612: LD_INT 67
53614: PUSH
53615: LD_INT 45
53617: PUSH
53618: LD_INT 75
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53626: LD_VAR 0 6
53630: PPUSH
53631: CALL_OW 264
53635: PUSH
53636: LD_INT 26
53638: PUSH
53639: EMPTY
53640: LIST
53641: IN
53642: IFFALSE 53663
// points := [ 120 , 30 , 80 ] ;
53644: LD_ADDR_VAR 0 9
53648: PUSH
53649: LD_INT 120
53651: PUSH
53652: LD_INT 30
53654: PUSH
53655: LD_INT 80
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53663: LD_VAR 0 6
53667: PPUSH
53668: CALL_OW 264
53672: PUSH
53673: LD_INT 22
53675: PUSH
53676: EMPTY
53677: LIST
53678: IN
53679: IFFALSE 53700
// points := [ 40 , 1 , 1 ] ;
53681: LD_ADDR_VAR 0 9
53685: PUSH
53686: LD_INT 40
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53700: LD_VAR 0 6
53704: PPUSH
53705: CALL_OW 264
53709: PUSH
53710: LD_INT 29
53712: PUSH
53713: EMPTY
53714: LIST
53715: IN
53716: IFFALSE 53737
// points := [ 70 , 200 , 400 ] ;
53718: LD_ADDR_VAR 0 9
53722: PUSH
53723: LD_INT 70
53725: PUSH
53726: LD_INT 200
53728: PUSH
53729: LD_INT 400
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53737: LD_VAR 0 6
53741: PPUSH
53742: CALL_OW 264
53746: PUSH
53747: LD_INT 14
53749: PUSH
53750: LD_INT 53
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: IN
53757: IFFALSE 53778
// points := [ 40 , 10 , 20 ] ;
53759: LD_ADDR_VAR 0 9
53763: PUSH
53764: LD_INT 40
53766: PUSH
53767: LD_INT 10
53769: PUSH
53770: LD_INT 20
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53778: LD_VAR 0 6
53782: PPUSH
53783: CALL_OW 264
53787: PUSH
53788: LD_INT 9
53790: PUSH
53791: EMPTY
53792: LIST
53793: IN
53794: IFFALSE 53815
// points := [ 5 , 70 , 20 ] ;
53796: LD_ADDR_VAR 0 9
53800: PUSH
53801: LD_INT 5
53803: PUSH
53804: LD_INT 70
53806: PUSH
53807: LD_INT 20
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53815: LD_VAR 0 6
53819: PPUSH
53820: CALL_OW 264
53824: PUSH
53825: LD_INT 10
53827: PUSH
53828: EMPTY
53829: LIST
53830: IN
53831: IFFALSE 53852
// points := [ 35 , 110 , 70 ] ;
53833: LD_ADDR_VAR 0 9
53837: PUSH
53838: LD_INT 35
53840: PUSH
53841: LD_INT 110
53843: PUSH
53844: LD_INT 70
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53852: LD_VAR 0 6
53856: PPUSH
53857: CALL_OW 265
53861: PUSH
53862: LD_INT 25
53864: EQUAL
53865: IFFALSE 53886
// points := [ 80 , 65 , 100 ] ;
53867: LD_ADDR_VAR 0 9
53871: PUSH
53872: LD_INT 80
53874: PUSH
53875: LD_INT 65
53877: PUSH
53878: LD_INT 100
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53886: LD_VAR 0 6
53890: PPUSH
53891: CALL_OW 263
53895: PUSH
53896: LD_INT 1
53898: EQUAL
53899: IFFALSE 53934
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53901: LD_ADDR_VAR 0 10
53905: PUSH
53906: LD_VAR 0 10
53910: PUSH
53911: LD_VAR 0 6
53915: PPUSH
53916: CALL_OW 311
53920: PPUSH
53921: LD_INT 3
53923: PPUSH
53924: CALL_OW 259
53928: PUSH
53929: LD_INT 4
53931: MUL
53932: MUL
53933: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53934: LD_VAR 0 6
53938: PPUSH
53939: CALL_OW 263
53943: PUSH
53944: LD_INT 2
53946: EQUAL
53947: IFFALSE 53998
// begin j := IsControledBy ( i ) ;
53949: LD_ADDR_VAR 0 7
53953: PUSH
53954: LD_VAR 0 6
53958: PPUSH
53959: CALL_OW 312
53963: ST_TO_ADDR
// if j then
53964: LD_VAR 0 7
53968: IFFALSE 53998
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53970: LD_ADDR_VAR 0 10
53974: PUSH
53975: LD_VAR 0 10
53979: PUSH
53980: LD_VAR 0 7
53984: PPUSH
53985: LD_INT 3
53987: PPUSH
53988: CALL_OW 259
53992: PUSH
53993: LD_INT 3
53995: MUL
53996: MUL
53997: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53998: LD_VAR 0 6
54002: PPUSH
54003: CALL_OW 264
54007: PUSH
54008: LD_INT 5
54010: PUSH
54011: LD_INT 6
54013: PUSH
54014: LD_INT 46
54016: PUSH
54017: LD_INT 44
54019: PUSH
54020: LD_INT 47
54022: PUSH
54023: LD_INT 45
54025: PUSH
54026: LD_INT 28
54028: PUSH
54029: LD_INT 7
54031: PUSH
54032: LD_INT 27
54034: PUSH
54035: LD_INT 29
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: IN
54050: PUSH
54051: LD_VAR 0 1
54055: PPUSH
54056: LD_INT 52
54058: PPUSH
54059: CALL_OW 321
54063: PUSH
54064: LD_INT 2
54066: EQUAL
54067: AND
54068: IFFALSE 54085
// bpoints := bpoints * 1.2 ;
54070: LD_ADDR_VAR 0 10
54074: PUSH
54075: LD_VAR 0 10
54079: PUSH
54080: LD_REAL  1.20000000000000E+0000
54083: MUL
54084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
54085: LD_VAR 0 6
54089: PPUSH
54090: CALL_OW 264
54094: PUSH
54095: LD_INT 6
54097: PUSH
54098: LD_INT 46
54100: PUSH
54101: LD_INT 47
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: IN
54109: IFFALSE 54126
// bpoints := bpoints * 1.2 ;
54111: LD_ADDR_VAR 0 10
54115: PUSH
54116: LD_VAR 0 10
54120: PUSH
54121: LD_REAL  1.20000000000000E+0000
54124: MUL
54125: ST_TO_ADDR
// end ; unit_building :
54126: GO 54140
54128: LD_INT 3
54130: DOUBLE
54131: EQUAL
54132: IFTRUE 54136
54134: GO 54139
54136: POP
// ; end ;
54137: GO 54140
54139: POP
// for j = 1 to 3 do
54140: LD_ADDR_VAR 0 7
54144: PUSH
54145: DOUBLE
54146: LD_INT 1
54148: DEC
54149: ST_TO_ADDR
54150: LD_INT 3
54152: PUSH
54153: FOR_TO
54154: IFFALSE 54207
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
54156: LD_ADDR_VAR 0 5
54160: PUSH
54161: LD_VAR 0 5
54165: PPUSH
54166: LD_VAR 0 7
54170: PPUSH
54171: LD_VAR 0 5
54175: PUSH
54176: LD_VAR 0 7
54180: ARRAY
54181: PUSH
54182: LD_VAR 0 9
54186: PUSH
54187: LD_VAR 0 7
54191: ARRAY
54192: PUSH
54193: LD_VAR 0 10
54197: MUL
54198: PLUS
54199: PPUSH
54200: CALL_OW 1
54204: ST_TO_ADDR
54205: GO 54153
54207: POP
54208: POP
// end ;
54209: GO 52692
54211: POP
54212: POP
// result := Replace ( result , 4 , tmp ) ;
54213: LD_ADDR_VAR 0 5
54217: PUSH
54218: LD_VAR 0 5
54222: PPUSH
54223: LD_INT 4
54225: PPUSH
54226: LD_VAR 0 8
54230: PPUSH
54231: CALL_OW 1
54235: ST_TO_ADDR
// end ;
54236: LD_VAR 0 5
54240: RET
// export function DangerAtRange ( unit , range ) ; begin
54241: LD_INT 0
54243: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
54244: LD_ADDR_VAR 0 3
54248: PUSH
54249: LD_VAR 0 1
54253: PPUSH
54254: CALL_OW 255
54258: PPUSH
54259: LD_VAR 0 1
54263: PPUSH
54264: CALL_OW 250
54268: PPUSH
54269: LD_VAR 0 1
54273: PPUSH
54274: CALL_OW 251
54278: PPUSH
54279: LD_VAR 0 2
54283: PPUSH
54284: CALL 52544 0 4
54288: ST_TO_ADDR
// end ;
54289: LD_VAR 0 3
54293: RET
// export function DangerInArea ( side , area ) ; begin
54294: LD_INT 0
54296: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
54297: LD_ADDR_VAR 0 3
54301: PUSH
54302: LD_VAR 0 2
54306: PPUSH
54307: LD_INT 81
54309: PUSH
54310: LD_VAR 0 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PPUSH
54319: CALL_OW 70
54323: ST_TO_ADDR
// end ;
54324: LD_VAR 0 3
54328: RET
// export function IsExtension ( b ) ; begin
54329: LD_INT 0
54331: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
54332: LD_ADDR_VAR 0 2
54336: PUSH
54337: LD_VAR 0 1
54341: PUSH
54342: LD_INT 23
54344: PUSH
54345: LD_INT 20
54347: PUSH
54348: LD_INT 22
54350: PUSH
54351: LD_INT 17
54353: PUSH
54354: LD_INT 24
54356: PUSH
54357: LD_INT 21
54359: PUSH
54360: LD_INT 19
54362: PUSH
54363: LD_INT 16
54365: PUSH
54366: LD_INT 25
54368: PUSH
54369: LD_INT 18
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: IN
54384: ST_TO_ADDR
// end ;
54385: LD_VAR 0 2
54389: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
54390: LD_INT 0
54392: PPUSH
54393: PPUSH
54394: PPUSH
// result := [ ] ;
54395: LD_ADDR_VAR 0 3
54399: PUSH
54400: EMPTY
54401: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
54402: LD_ADDR_VAR 0 4
54406: PUSH
54407: LD_VAR 0 2
54411: PPUSH
54412: LD_INT 21
54414: PUSH
54415: LD_INT 3
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PPUSH
54422: CALL_OW 70
54426: ST_TO_ADDR
// if not tmp then
54427: LD_VAR 0 4
54431: NOT
54432: IFFALSE 54436
// exit ;
54434: GO 54494
// for i in tmp do
54436: LD_ADDR_VAR 0 5
54440: PUSH
54441: LD_VAR 0 4
54445: PUSH
54446: FOR_IN
54447: IFFALSE 54482
// if GetBase ( i ) <> base then
54449: LD_VAR 0 5
54453: PPUSH
54454: CALL_OW 274
54458: PUSH
54459: LD_VAR 0 1
54463: NONEQUAL
54464: IFFALSE 54480
// ComLinkToBase ( base , i ) ;
54466: LD_VAR 0 1
54470: PPUSH
54471: LD_VAR 0 5
54475: PPUSH
54476: CALL_OW 169
54480: GO 54446
54482: POP
54483: POP
// result := tmp ;
54484: LD_ADDR_VAR 0 3
54488: PUSH
54489: LD_VAR 0 4
54493: ST_TO_ADDR
// end ;
54494: LD_VAR 0 3
54498: RET
// export function ComComplete ( unit , b ) ; var i ; begin
54499: LD_INT 0
54501: PPUSH
54502: PPUSH
// if BuildingStatus ( b ) = bs_build then
54503: LD_VAR 0 2
54507: PPUSH
54508: CALL_OW 461
54512: PUSH
54513: LD_INT 1
54515: EQUAL
54516: IFFALSE 54576
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54518: LD_VAR 0 1
54522: PPUSH
54523: LD_STRING h
54525: PUSH
54526: LD_VAR 0 2
54530: PPUSH
54531: CALL_OW 250
54535: PUSH
54536: LD_VAR 0 2
54540: PPUSH
54541: CALL_OW 251
54545: PUSH
54546: LD_VAR 0 2
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: PPUSH
54572: CALL_OW 446
// end ;
54576: LD_VAR 0 3
54580: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54581: LD_INT 0
54583: PPUSH
54584: PPUSH
54585: PPUSH
54586: PPUSH
54587: PPUSH
54588: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
54589: LD_VAR 0 1
54593: NOT
54594: PUSH
54595: LD_VAR 0 1
54599: PPUSH
54600: CALL_OW 263
54604: PUSH
54605: LD_INT 2
54607: EQUAL
54608: NOT
54609: OR
54610: IFFALSE 54614
// exit ;
54612: GO 54930
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54614: LD_ADDR_VAR 0 6
54618: PUSH
54619: LD_INT 22
54621: PUSH
54622: LD_VAR 0 1
54626: PPUSH
54627: CALL_OW 255
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 30
54641: PUSH
54642: LD_INT 36
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 34
54651: PUSH
54652: LD_INT 31
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PPUSH
54668: CALL_OW 69
54672: ST_TO_ADDR
// if not tmp then
54673: LD_VAR 0 6
54677: NOT
54678: IFFALSE 54682
// exit ;
54680: GO 54930
// result := [ ] ;
54682: LD_ADDR_VAR 0 2
54686: PUSH
54687: EMPTY
54688: ST_TO_ADDR
// for i in tmp do
54689: LD_ADDR_VAR 0 3
54693: PUSH
54694: LD_VAR 0 6
54698: PUSH
54699: FOR_IN
54700: IFFALSE 54771
// begin t := UnitsInside ( i ) ;
54702: LD_ADDR_VAR 0 4
54706: PUSH
54707: LD_VAR 0 3
54711: PPUSH
54712: CALL_OW 313
54716: ST_TO_ADDR
// if t then
54717: LD_VAR 0 4
54721: IFFALSE 54769
// for j in t do
54723: LD_ADDR_VAR 0 7
54727: PUSH
54728: LD_VAR 0 4
54732: PUSH
54733: FOR_IN
54734: IFFALSE 54767
// result := Insert ( result , result + 1 , j ) ;
54736: LD_ADDR_VAR 0 2
54740: PUSH
54741: LD_VAR 0 2
54745: PPUSH
54746: LD_VAR 0 2
54750: PUSH
54751: LD_INT 1
54753: PLUS
54754: PPUSH
54755: LD_VAR 0 7
54759: PPUSH
54760: CALL_OW 2
54764: ST_TO_ADDR
54765: GO 54733
54767: POP
54768: POP
// end ;
54769: GO 54699
54771: POP
54772: POP
// if not result then
54773: LD_VAR 0 2
54777: NOT
54778: IFFALSE 54782
// exit ;
54780: GO 54930
// mech := result [ 1 ] ;
54782: LD_ADDR_VAR 0 5
54786: PUSH
54787: LD_VAR 0 2
54791: PUSH
54792: LD_INT 1
54794: ARRAY
54795: ST_TO_ADDR
// if result > 1 then
54796: LD_VAR 0 2
54800: PUSH
54801: LD_INT 1
54803: GREATER
54804: IFFALSE 54916
// for i = 2 to result do
54806: LD_ADDR_VAR 0 3
54810: PUSH
54811: DOUBLE
54812: LD_INT 2
54814: DEC
54815: ST_TO_ADDR
54816: LD_VAR 0 2
54820: PUSH
54821: FOR_TO
54822: IFFALSE 54914
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54824: LD_ADDR_VAR 0 4
54828: PUSH
54829: LD_VAR 0 2
54833: PUSH
54834: LD_VAR 0 3
54838: ARRAY
54839: PPUSH
54840: LD_INT 3
54842: PPUSH
54843: CALL_OW 259
54847: PUSH
54848: LD_VAR 0 2
54852: PUSH
54853: LD_VAR 0 3
54857: ARRAY
54858: PPUSH
54859: CALL_OW 432
54863: MINUS
54864: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54865: LD_VAR 0 4
54869: PUSH
54870: LD_VAR 0 5
54874: PPUSH
54875: LD_INT 3
54877: PPUSH
54878: CALL_OW 259
54882: PUSH
54883: LD_VAR 0 5
54887: PPUSH
54888: CALL_OW 432
54892: MINUS
54893: GREATEREQUAL
54894: IFFALSE 54912
// mech := result [ i ] ;
54896: LD_ADDR_VAR 0 5
54900: PUSH
54901: LD_VAR 0 2
54905: PUSH
54906: LD_VAR 0 3
54910: ARRAY
54911: ST_TO_ADDR
// end ;
54912: GO 54821
54914: POP
54915: POP
// ComLinkTo ( vehicle , mech ) ;
54916: LD_VAR 0 1
54920: PPUSH
54921: LD_VAR 0 5
54925: PPUSH
54926: CALL_OW 135
// end ;
54930: LD_VAR 0 2
54934: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54935: LD_INT 0
54937: PPUSH
54938: PPUSH
54939: PPUSH
54940: PPUSH
54941: PPUSH
54942: PPUSH
54943: PPUSH
54944: PPUSH
54945: PPUSH
54946: PPUSH
54947: PPUSH
54948: PPUSH
54949: PPUSH
// result := [ ] ;
54950: LD_ADDR_VAR 0 7
54954: PUSH
54955: EMPTY
54956: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54957: LD_VAR 0 1
54961: PPUSH
54962: CALL_OW 266
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: IN
54977: NOT
54978: IFFALSE 54982
// exit ;
54980: GO 56613
// if name then
54982: LD_VAR 0 3
54986: IFFALSE 55002
// SetBName ( base_dep , name ) ;
54988: LD_VAR 0 1
54992: PPUSH
54993: LD_VAR 0 3
54997: PPUSH
54998: CALL_OW 500
// base := GetBase ( base_dep ) ;
55002: LD_ADDR_VAR 0 15
55006: PUSH
55007: LD_VAR 0 1
55011: PPUSH
55012: CALL_OW 274
55016: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
55017: LD_ADDR_VAR 0 16
55021: PUSH
55022: LD_VAR 0 1
55026: PPUSH
55027: CALL_OW 255
55031: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
55032: LD_ADDR_VAR 0 17
55036: PUSH
55037: LD_VAR 0 1
55041: PPUSH
55042: CALL_OW 248
55046: ST_TO_ADDR
// if sources then
55047: LD_VAR 0 5
55051: IFFALSE 55098
// for i = 1 to 3 do
55053: LD_ADDR_VAR 0 8
55057: PUSH
55058: DOUBLE
55059: LD_INT 1
55061: DEC
55062: ST_TO_ADDR
55063: LD_INT 3
55065: PUSH
55066: FOR_TO
55067: IFFALSE 55096
// AddResourceType ( base , i , sources [ i ] ) ;
55069: LD_VAR 0 15
55073: PPUSH
55074: LD_VAR 0 8
55078: PPUSH
55079: LD_VAR 0 5
55083: PUSH
55084: LD_VAR 0 8
55088: ARRAY
55089: PPUSH
55090: CALL_OW 276
55094: GO 55066
55096: POP
55097: POP
// buildings := GetBaseBuildings ( base , area ) ;
55098: LD_ADDR_VAR 0 18
55102: PUSH
55103: LD_VAR 0 15
55107: PPUSH
55108: LD_VAR 0 2
55112: PPUSH
55113: CALL 54390 0 2
55117: ST_TO_ADDR
// InitHc ;
55118: CALL_OW 19
// InitUc ;
55122: CALL_OW 18
// uc_side := side ;
55126: LD_ADDR_OWVAR 20
55130: PUSH
55131: LD_VAR 0 16
55135: ST_TO_ADDR
// uc_nation := nation ;
55136: LD_ADDR_OWVAR 21
55140: PUSH
55141: LD_VAR 0 17
55145: ST_TO_ADDR
// if buildings then
55146: LD_VAR 0 18
55150: IFFALSE 56472
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
55152: LD_ADDR_VAR 0 19
55156: PUSH
55157: LD_VAR 0 18
55161: PPUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 30
55167: PUSH
55168: LD_INT 29
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 30
55177: PUSH
55178: LD_INT 30
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: PPUSH
55190: CALL_OW 72
55194: ST_TO_ADDR
// if tmp then
55195: LD_VAR 0 19
55199: IFFALSE 55247
// for i in tmp do
55201: LD_ADDR_VAR 0 8
55205: PUSH
55206: LD_VAR 0 19
55210: PUSH
55211: FOR_IN
55212: IFFALSE 55245
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
55214: LD_VAR 0 8
55218: PPUSH
55219: CALL_OW 250
55223: PPUSH
55224: LD_VAR 0 8
55228: PPUSH
55229: CALL_OW 251
55233: PPUSH
55234: LD_VAR 0 16
55238: PPUSH
55239: CALL_OW 441
55243: GO 55211
55245: POP
55246: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
55247: LD_VAR 0 18
55251: PPUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 30
55257: PUSH
55258: LD_INT 32
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 30
55267: PUSH
55268: LD_INT 33
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: PPUSH
55280: CALL_OW 72
55284: IFFALSE 55372
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
55286: LD_ADDR_VAR 0 8
55290: PUSH
55291: LD_VAR 0 18
55295: PPUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 30
55301: PUSH
55302: LD_INT 32
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 30
55311: PUSH
55312: LD_INT 33
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: LIST
55323: PPUSH
55324: CALL_OW 72
55328: PUSH
55329: FOR_IN
55330: IFFALSE 55370
// begin if not GetBWeapon ( i ) then
55332: LD_VAR 0 8
55336: PPUSH
55337: CALL_OW 269
55341: NOT
55342: IFFALSE 55368
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
55344: LD_VAR 0 8
55348: PPUSH
55349: LD_VAR 0 8
55353: PPUSH
55354: LD_VAR 0 2
55358: PPUSH
55359: CALL 56618 0 2
55363: PPUSH
55364: CALL_OW 431
// end ;
55368: GO 55329
55370: POP
55371: POP
// end ; for i = 1 to personel do
55372: LD_ADDR_VAR 0 8
55376: PUSH
55377: DOUBLE
55378: LD_INT 1
55380: DEC
55381: ST_TO_ADDR
55382: LD_VAR 0 6
55386: PUSH
55387: FOR_TO
55388: IFFALSE 56452
// begin if i > 4 then
55390: LD_VAR 0 8
55394: PUSH
55395: LD_INT 4
55397: GREATER
55398: IFFALSE 55402
// break ;
55400: GO 56452
// case i of 1 :
55402: LD_VAR 0 8
55406: PUSH
55407: LD_INT 1
55409: DOUBLE
55410: EQUAL
55411: IFTRUE 55415
55413: GO 55495
55415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55416: LD_ADDR_VAR 0 12
55420: PUSH
55421: LD_VAR 0 18
55425: PPUSH
55426: LD_INT 22
55428: PUSH
55429: LD_VAR 0 16
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 58
55440: PUSH
55441: EMPTY
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: LD_INT 30
55449: PUSH
55450: LD_INT 32
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 30
55459: PUSH
55460: LD_INT 4
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 30
55469: PUSH
55470: LD_INT 5
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: LIST
55487: PPUSH
55488: CALL_OW 72
55492: ST_TO_ADDR
55493: GO 55717
55495: LD_INT 2
55497: DOUBLE
55498: EQUAL
55499: IFTRUE 55503
55501: GO 55565
55503: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55504: LD_ADDR_VAR 0 12
55508: PUSH
55509: LD_VAR 0 18
55513: PPUSH
55514: LD_INT 22
55516: PUSH
55517: LD_VAR 0 16
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 30
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 30
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PPUSH
55558: CALL_OW 72
55562: ST_TO_ADDR
55563: GO 55717
55565: LD_INT 3
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55573
55571: GO 55635
55573: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55574: LD_ADDR_VAR 0 12
55578: PUSH
55579: LD_VAR 0 18
55583: PPUSH
55584: LD_INT 22
55586: PUSH
55587: LD_VAR 0 16
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 30
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 30
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PPUSH
55628: CALL_OW 72
55632: ST_TO_ADDR
55633: GO 55717
55635: LD_INT 4
55637: DOUBLE
55638: EQUAL
55639: IFTRUE 55643
55641: GO 55716
55643: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55644: LD_ADDR_VAR 0 12
55648: PUSH
55649: LD_VAR 0 18
55653: PPUSH
55654: LD_INT 22
55656: PUSH
55657: LD_VAR 0 16
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 30
55671: PUSH
55672: LD_INT 6
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 30
55681: PUSH
55682: LD_INT 7
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 30
55691: PUSH
55692: LD_INT 8
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PPUSH
55709: CALL_OW 72
55713: ST_TO_ADDR
55714: GO 55717
55716: POP
// if i = 1 then
55717: LD_VAR 0 8
55721: PUSH
55722: LD_INT 1
55724: EQUAL
55725: IFFALSE 55836
// begin tmp := [ ] ;
55727: LD_ADDR_VAR 0 19
55731: PUSH
55732: EMPTY
55733: ST_TO_ADDR
// for j in f do
55734: LD_ADDR_VAR 0 9
55738: PUSH
55739: LD_VAR 0 12
55743: PUSH
55744: FOR_IN
55745: IFFALSE 55818
// if GetBType ( j ) = b_bunker then
55747: LD_VAR 0 9
55751: PPUSH
55752: CALL_OW 266
55756: PUSH
55757: LD_INT 32
55759: EQUAL
55760: IFFALSE 55787
// tmp := Insert ( tmp , 1 , j ) else
55762: LD_ADDR_VAR 0 19
55766: PUSH
55767: LD_VAR 0 19
55771: PPUSH
55772: LD_INT 1
55774: PPUSH
55775: LD_VAR 0 9
55779: PPUSH
55780: CALL_OW 2
55784: ST_TO_ADDR
55785: GO 55816
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55787: LD_ADDR_VAR 0 19
55791: PUSH
55792: LD_VAR 0 19
55796: PPUSH
55797: LD_VAR 0 19
55801: PUSH
55802: LD_INT 1
55804: PLUS
55805: PPUSH
55806: LD_VAR 0 9
55810: PPUSH
55811: CALL_OW 2
55815: ST_TO_ADDR
55816: GO 55744
55818: POP
55819: POP
// if tmp then
55820: LD_VAR 0 19
55824: IFFALSE 55836
// f := tmp ;
55826: LD_ADDR_VAR 0 12
55830: PUSH
55831: LD_VAR 0 19
55835: ST_TO_ADDR
// end ; x := personel [ i ] ;
55836: LD_ADDR_VAR 0 13
55840: PUSH
55841: LD_VAR 0 6
55845: PUSH
55846: LD_VAR 0 8
55850: ARRAY
55851: ST_TO_ADDR
// if x = - 1 then
55852: LD_VAR 0 13
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: EQUAL
55861: IFFALSE 56070
// begin for j in f do
55863: LD_ADDR_VAR 0 9
55867: PUSH
55868: LD_VAR 0 12
55872: PUSH
55873: FOR_IN
55874: IFFALSE 56066
// repeat InitHc ;
55876: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55880: LD_VAR 0 9
55884: PPUSH
55885: CALL_OW 266
55889: PUSH
55890: LD_INT 5
55892: EQUAL
55893: IFFALSE 55963
// begin if UnitsInside ( j ) < 3 then
55895: LD_VAR 0 9
55899: PPUSH
55900: CALL_OW 313
55904: PUSH
55905: LD_INT 3
55907: LESS
55908: IFFALSE 55944
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55910: LD_INT 0
55912: PPUSH
55913: LD_INT 5
55915: PUSH
55916: LD_INT 8
55918: PUSH
55919: LD_INT 9
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: PUSH
55927: LD_VAR 0 17
55931: ARRAY
55932: PPUSH
55933: LD_VAR 0 4
55937: PPUSH
55938: CALL_OW 380
55942: GO 55961
// PrepareHuman ( false , i , skill ) ;
55944: LD_INT 0
55946: PPUSH
55947: LD_VAR 0 8
55951: PPUSH
55952: LD_VAR 0 4
55956: PPUSH
55957: CALL_OW 380
// end else
55961: GO 55980
// PrepareHuman ( false , i , skill ) ;
55963: LD_INT 0
55965: PPUSH
55966: LD_VAR 0 8
55970: PPUSH
55971: LD_VAR 0 4
55975: PPUSH
55976: CALL_OW 380
// un := CreateHuman ;
55980: LD_ADDR_VAR 0 14
55984: PUSH
55985: CALL_OW 44
55989: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55990: LD_ADDR_VAR 0 7
55994: PUSH
55995: LD_VAR 0 7
55999: PPUSH
56000: LD_INT 1
56002: PPUSH
56003: LD_VAR 0 14
56007: PPUSH
56008: CALL_OW 2
56012: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
56013: LD_VAR 0 14
56017: PPUSH
56018: LD_VAR 0 9
56022: PPUSH
56023: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
56027: LD_VAR 0 9
56031: PPUSH
56032: CALL_OW 313
56036: PUSH
56037: LD_INT 6
56039: EQUAL
56040: PUSH
56041: LD_VAR 0 9
56045: PPUSH
56046: CALL_OW 266
56050: PUSH
56051: LD_INT 32
56053: PUSH
56054: LD_INT 31
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: IN
56061: OR
56062: IFFALSE 55876
56064: GO 55873
56066: POP
56067: POP
// end else
56068: GO 56450
// for j = 1 to x do
56070: LD_ADDR_VAR 0 9
56074: PUSH
56075: DOUBLE
56076: LD_INT 1
56078: DEC
56079: ST_TO_ADDR
56080: LD_VAR 0 13
56084: PUSH
56085: FOR_TO
56086: IFFALSE 56448
// begin InitHc ;
56088: CALL_OW 19
// if not f then
56092: LD_VAR 0 12
56096: NOT
56097: IFFALSE 56186
// begin PrepareHuman ( false , i , skill ) ;
56099: LD_INT 0
56101: PPUSH
56102: LD_VAR 0 8
56106: PPUSH
56107: LD_VAR 0 4
56111: PPUSH
56112: CALL_OW 380
// un := CreateHuman ;
56116: LD_ADDR_VAR 0 14
56120: PUSH
56121: CALL_OW 44
56125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56126: LD_ADDR_VAR 0 7
56130: PUSH
56131: LD_VAR 0 7
56135: PPUSH
56136: LD_INT 1
56138: PPUSH
56139: LD_VAR 0 14
56143: PPUSH
56144: CALL_OW 2
56148: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56149: LD_VAR 0 14
56153: PPUSH
56154: LD_VAR 0 1
56158: PPUSH
56159: CALL_OW 250
56163: PPUSH
56164: LD_VAR 0 1
56168: PPUSH
56169: CALL_OW 251
56173: PPUSH
56174: LD_INT 10
56176: PPUSH
56177: LD_INT 0
56179: PPUSH
56180: CALL_OW 50
// continue ;
56184: GO 56085
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
56186: LD_VAR 0 12
56190: PUSH
56191: LD_INT 1
56193: ARRAY
56194: PPUSH
56195: CALL_OW 313
56199: PUSH
56200: LD_VAR 0 12
56204: PUSH
56205: LD_INT 1
56207: ARRAY
56208: PPUSH
56209: CALL_OW 266
56213: PUSH
56214: LD_INT 32
56216: PUSH
56217: LD_INT 31
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: IN
56224: AND
56225: PUSH
56226: LD_VAR 0 12
56230: PUSH
56231: LD_INT 1
56233: ARRAY
56234: PPUSH
56235: CALL_OW 313
56239: PUSH
56240: LD_INT 6
56242: EQUAL
56243: OR
56244: IFFALSE 56264
// f := Delete ( f , 1 ) ;
56246: LD_ADDR_VAR 0 12
56250: PUSH
56251: LD_VAR 0 12
56255: PPUSH
56256: LD_INT 1
56258: PPUSH
56259: CALL_OW 3
56263: ST_TO_ADDR
// if not f then
56264: LD_VAR 0 12
56268: NOT
56269: IFFALSE 56287
// begin x := x + 2 ;
56271: LD_ADDR_VAR 0 13
56275: PUSH
56276: LD_VAR 0 13
56280: PUSH
56281: LD_INT 2
56283: PLUS
56284: ST_TO_ADDR
// continue ;
56285: GO 56085
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
56287: LD_VAR 0 12
56291: PUSH
56292: LD_INT 1
56294: ARRAY
56295: PPUSH
56296: CALL_OW 266
56300: PUSH
56301: LD_INT 5
56303: EQUAL
56304: IFFALSE 56378
// begin if UnitsInside ( f [ 1 ] ) < 3 then
56306: LD_VAR 0 12
56310: PUSH
56311: LD_INT 1
56313: ARRAY
56314: PPUSH
56315: CALL_OW 313
56319: PUSH
56320: LD_INT 3
56322: LESS
56323: IFFALSE 56359
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56325: LD_INT 0
56327: PPUSH
56328: LD_INT 5
56330: PUSH
56331: LD_INT 8
56333: PUSH
56334: LD_INT 9
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: PUSH
56342: LD_VAR 0 17
56346: ARRAY
56347: PPUSH
56348: LD_VAR 0 4
56352: PPUSH
56353: CALL_OW 380
56357: GO 56376
// PrepareHuman ( false , i , skill ) ;
56359: LD_INT 0
56361: PPUSH
56362: LD_VAR 0 8
56366: PPUSH
56367: LD_VAR 0 4
56371: PPUSH
56372: CALL_OW 380
// end else
56376: GO 56395
// PrepareHuman ( false , i , skill ) ;
56378: LD_INT 0
56380: PPUSH
56381: LD_VAR 0 8
56385: PPUSH
56386: LD_VAR 0 4
56390: PPUSH
56391: CALL_OW 380
// un := CreateHuman ;
56395: LD_ADDR_VAR 0 14
56399: PUSH
56400: CALL_OW 44
56404: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56405: LD_ADDR_VAR 0 7
56409: PUSH
56410: LD_VAR 0 7
56414: PPUSH
56415: LD_INT 1
56417: PPUSH
56418: LD_VAR 0 14
56422: PPUSH
56423: CALL_OW 2
56427: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56428: LD_VAR 0 14
56432: PPUSH
56433: LD_VAR 0 12
56437: PUSH
56438: LD_INT 1
56440: ARRAY
56441: PPUSH
56442: CALL_OW 52
// end ;
56446: GO 56085
56448: POP
56449: POP
// end ;
56450: GO 55387
56452: POP
56453: POP
// result := result ^ buildings ;
56454: LD_ADDR_VAR 0 7
56458: PUSH
56459: LD_VAR 0 7
56463: PUSH
56464: LD_VAR 0 18
56468: ADD
56469: ST_TO_ADDR
// end else
56470: GO 56613
// begin for i = 1 to personel do
56472: LD_ADDR_VAR 0 8
56476: PUSH
56477: DOUBLE
56478: LD_INT 1
56480: DEC
56481: ST_TO_ADDR
56482: LD_VAR 0 6
56486: PUSH
56487: FOR_TO
56488: IFFALSE 56611
// begin if i > 4 then
56490: LD_VAR 0 8
56494: PUSH
56495: LD_INT 4
56497: GREATER
56498: IFFALSE 56502
// break ;
56500: GO 56611
// x := personel [ i ] ;
56502: LD_ADDR_VAR 0 13
56506: PUSH
56507: LD_VAR 0 6
56511: PUSH
56512: LD_VAR 0 8
56516: ARRAY
56517: ST_TO_ADDR
// if x = - 1 then
56518: LD_VAR 0 13
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: EQUAL
56527: IFFALSE 56531
// continue ;
56529: GO 56487
// PrepareHuman ( false , i , skill ) ;
56531: LD_INT 0
56533: PPUSH
56534: LD_VAR 0 8
56538: PPUSH
56539: LD_VAR 0 4
56543: PPUSH
56544: CALL_OW 380
// un := CreateHuman ;
56548: LD_ADDR_VAR 0 14
56552: PUSH
56553: CALL_OW 44
56557: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56558: LD_VAR 0 14
56562: PPUSH
56563: LD_VAR 0 1
56567: PPUSH
56568: CALL_OW 250
56572: PPUSH
56573: LD_VAR 0 1
56577: PPUSH
56578: CALL_OW 251
56582: PPUSH
56583: LD_INT 10
56585: PPUSH
56586: LD_INT 0
56588: PPUSH
56589: CALL_OW 50
// result := result ^ un ;
56593: LD_ADDR_VAR 0 7
56597: PUSH
56598: LD_VAR 0 7
56602: PUSH
56603: LD_VAR 0 14
56607: ADD
56608: ST_TO_ADDR
// end ;
56609: GO 56487
56611: POP
56612: POP
// end ; end ;
56613: LD_VAR 0 7
56617: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56618: LD_INT 0
56620: PPUSH
56621: PPUSH
56622: PPUSH
56623: PPUSH
56624: PPUSH
56625: PPUSH
56626: PPUSH
56627: PPUSH
56628: PPUSH
56629: PPUSH
56630: PPUSH
56631: PPUSH
56632: PPUSH
56633: PPUSH
56634: PPUSH
56635: PPUSH
// result := false ;
56636: LD_ADDR_VAR 0 3
56640: PUSH
56641: LD_INT 0
56643: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56644: LD_VAR 0 1
56648: NOT
56649: PUSH
56650: LD_VAR 0 1
56654: PPUSH
56655: CALL_OW 266
56659: PUSH
56660: LD_INT 32
56662: PUSH
56663: LD_INT 33
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: IN
56670: NOT
56671: OR
56672: IFFALSE 56676
// exit ;
56674: GO 57812
// nat := GetNation ( tower ) ;
56676: LD_ADDR_VAR 0 12
56680: PUSH
56681: LD_VAR 0 1
56685: PPUSH
56686: CALL_OW 248
56690: ST_TO_ADDR
// side := GetSide ( tower ) ;
56691: LD_ADDR_VAR 0 16
56695: PUSH
56696: LD_VAR 0 1
56700: PPUSH
56701: CALL_OW 255
56705: ST_TO_ADDR
// x := GetX ( tower ) ;
56706: LD_ADDR_VAR 0 10
56710: PUSH
56711: LD_VAR 0 1
56715: PPUSH
56716: CALL_OW 250
56720: ST_TO_ADDR
// y := GetY ( tower ) ;
56721: LD_ADDR_VAR 0 11
56725: PUSH
56726: LD_VAR 0 1
56730: PPUSH
56731: CALL_OW 251
56735: ST_TO_ADDR
// if not x or not y then
56736: LD_VAR 0 10
56740: NOT
56741: PUSH
56742: LD_VAR 0 11
56746: NOT
56747: OR
56748: IFFALSE 56752
// exit ;
56750: GO 57812
// weapon := 0 ;
56752: LD_ADDR_VAR 0 18
56756: PUSH
56757: LD_INT 0
56759: ST_TO_ADDR
// fac_list := [ ] ;
56760: LD_ADDR_VAR 0 17
56764: PUSH
56765: EMPTY
56766: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
56767: LD_ADDR_VAR 0 6
56771: PUSH
56772: LD_VAR 0 1
56776: PPUSH
56777: CALL_OW 274
56781: PPUSH
56782: LD_VAR 0 2
56786: PPUSH
56787: CALL 54390 0 2
56791: PPUSH
56792: LD_INT 30
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PPUSH
56802: CALL_OW 72
56806: ST_TO_ADDR
// if not factories then
56807: LD_VAR 0 6
56811: NOT
56812: IFFALSE 56816
// exit ;
56814: GO 57812
// for i in factories do
56816: LD_ADDR_VAR 0 8
56820: PUSH
56821: LD_VAR 0 6
56825: PUSH
56826: FOR_IN
56827: IFFALSE 56852
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56829: LD_ADDR_VAR 0 17
56833: PUSH
56834: LD_VAR 0 17
56838: PUSH
56839: LD_VAR 0 8
56843: PPUSH
56844: CALL_OW 478
56848: UNION
56849: ST_TO_ADDR
56850: GO 56826
56852: POP
56853: POP
// if not fac_list then
56854: LD_VAR 0 17
56858: NOT
56859: IFFALSE 56863
// exit ;
56861: GO 57812
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56863: LD_ADDR_VAR 0 5
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: LD_INT 5
56873: PUSH
56874: LD_INT 9
56876: PUSH
56877: LD_INT 10
56879: PUSH
56880: LD_INT 6
56882: PUSH
56883: LD_INT 7
56885: PUSH
56886: LD_INT 11
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 27
56900: PUSH
56901: LD_INT 28
56903: PUSH
56904: LD_INT 26
56906: PUSH
56907: LD_INT 30
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 43
56918: PUSH
56919: LD_INT 44
56921: PUSH
56922: LD_INT 46
56924: PUSH
56925: LD_INT 45
56927: PUSH
56928: LD_INT 47
56930: PUSH
56931: LD_INT 49
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: PUSH
56947: LD_VAR 0 12
56951: ARRAY
56952: ST_TO_ADDR
// for i in list do
56953: LD_ADDR_VAR 0 8
56957: PUSH
56958: LD_VAR 0 5
56962: PUSH
56963: FOR_IN
56964: IFFALSE 56997
// if not i in fac_list then
56966: LD_VAR 0 8
56970: PUSH
56971: LD_VAR 0 17
56975: IN
56976: NOT
56977: IFFALSE 56995
// list := list diff i ;
56979: LD_ADDR_VAR 0 5
56983: PUSH
56984: LD_VAR 0 5
56988: PUSH
56989: LD_VAR 0 8
56993: DIFF
56994: ST_TO_ADDR
56995: GO 56963
56997: POP
56998: POP
// if not list then
56999: LD_VAR 0 5
57003: NOT
57004: IFFALSE 57008
// exit ;
57006: GO 57812
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57008: LD_VAR 0 12
57012: PUSH
57013: LD_INT 3
57015: EQUAL
57016: PUSH
57017: LD_INT 49
57019: PUSH
57020: LD_VAR 0 5
57024: IN
57025: AND
57026: PUSH
57027: LD_INT 31
57029: PPUSH
57030: LD_VAR 0 16
57034: PPUSH
57035: CALL_OW 321
57039: PUSH
57040: LD_INT 2
57042: EQUAL
57043: AND
57044: IFFALSE 57104
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
57046: LD_INT 22
57048: PUSH
57049: LD_VAR 0 16
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 35
57060: PUSH
57061: LD_INT 49
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 91
57070: PUSH
57071: LD_VAR 0 1
57075: PUSH
57076: LD_INT 10
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: LIST
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: PPUSH
57089: CALL_OW 69
57093: NOT
57094: IFFALSE 57104
// weapon := ru_time_lapser ;
57096: LD_ADDR_VAR 0 18
57100: PUSH
57101: LD_INT 49
57103: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
57104: LD_VAR 0 12
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: IN
57119: PUSH
57120: LD_INT 11
57122: PUSH
57123: LD_VAR 0 5
57127: IN
57128: PUSH
57129: LD_INT 30
57131: PUSH
57132: LD_VAR 0 5
57136: IN
57137: OR
57138: AND
57139: PUSH
57140: LD_INT 6
57142: PPUSH
57143: LD_VAR 0 16
57147: PPUSH
57148: CALL_OW 321
57152: PUSH
57153: LD_INT 2
57155: EQUAL
57156: AND
57157: IFFALSE 57322
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
57159: LD_INT 22
57161: PUSH
57162: LD_VAR 0 16
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 35
57176: PUSH
57177: LD_INT 11
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 35
57186: PUSH
57187: LD_INT 30
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 91
57201: PUSH
57202: LD_VAR 0 1
57206: PUSH
57207: LD_INT 18
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: PPUSH
57220: CALL_OW 69
57224: NOT
57225: PUSH
57226: LD_INT 22
57228: PUSH
57229: LD_VAR 0 16
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: LD_INT 30
57243: PUSH
57244: LD_INT 32
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 30
57253: PUSH
57254: LD_INT 33
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 91
57268: PUSH
57269: LD_VAR 0 1
57273: PUSH
57274: LD_INT 12
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: PPUSH
57290: CALL_OW 69
57294: PUSH
57295: LD_INT 2
57297: GREATER
57298: AND
57299: IFFALSE 57322
// weapon := [ us_radar , ar_radar ] [ nat ] ;
57301: LD_ADDR_VAR 0 18
57305: PUSH
57306: LD_INT 11
57308: PUSH
57309: LD_INT 30
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_VAR 0 12
57320: ARRAY
57321: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
57322: LD_VAR 0 18
57326: NOT
57327: PUSH
57328: LD_INT 40
57330: PPUSH
57331: LD_VAR 0 16
57335: PPUSH
57336: CALL_OW 321
57340: PUSH
57341: LD_INT 2
57343: EQUAL
57344: AND
57345: PUSH
57346: LD_INT 7
57348: PUSH
57349: LD_VAR 0 5
57353: IN
57354: PUSH
57355: LD_INT 28
57357: PUSH
57358: LD_VAR 0 5
57362: IN
57363: OR
57364: PUSH
57365: LD_INT 45
57367: PUSH
57368: LD_VAR 0 5
57372: IN
57373: OR
57374: AND
57375: IFFALSE 57629
// begin hex := GetHexInfo ( x , y ) ;
57377: LD_ADDR_VAR 0 4
57381: PUSH
57382: LD_VAR 0 10
57386: PPUSH
57387: LD_VAR 0 11
57391: PPUSH
57392: CALL_OW 546
57396: ST_TO_ADDR
// if hex [ 1 ] then
57397: LD_VAR 0 4
57401: PUSH
57402: LD_INT 1
57404: ARRAY
57405: IFFALSE 57409
// exit ;
57407: GO 57812
// height := hex [ 2 ] ;
57409: LD_ADDR_VAR 0 15
57413: PUSH
57414: LD_VAR 0 4
57418: PUSH
57419: LD_INT 2
57421: ARRAY
57422: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57423: LD_ADDR_VAR 0 14
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 5
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: ST_TO_ADDR
// for i in tmp do
57446: LD_ADDR_VAR 0 8
57450: PUSH
57451: LD_VAR 0 14
57455: PUSH
57456: FOR_IN
57457: IFFALSE 57627
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57459: LD_ADDR_VAR 0 9
57463: PUSH
57464: LD_VAR 0 10
57468: PPUSH
57469: LD_VAR 0 8
57473: PPUSH
57474: LD_INT 5
57476: PPUSH
57477: CALL_OW 272
57481: PUSH
57482: LD_VAR 0 11
57486: PPUSH
57487: LD_VAR 0 8
57491: PPUSH
57492: LD_INT 5
57494: PPUSH
57495: CALL_OW 273
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57504: LD_VAR 0 9
57508: PUSH
57509: LD_INT 1
57511: ARRAY
57512: PPUSH
57513: LD_VAR 0 9
57517: PUSH
57518: LD_INT 2
57520: ARRAY
57521: PPUSH
57522: CALL_OW 488
57526: IFFALSE 57625
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57528: LD_ADDR_VAR 0 4
57532: PUSH
57533: LD_VAR 0 9
57537: PUSH
57538: LD_INT 1
57540: ARRAY
57541: PPUSH
57542: LD_VAR 0 9
57546: PUSH
57547: LD_INT 2
57549: ARRAY
57550: PPUSH
57551: CALL_OW 546
57555: ST_TO_ADDR
// if hex [ 1 ] then
57556: LD_VAR 0 4
57560: PUSH
57561: LD_INT 1
57563: ARRAY
57564: IFFALSE 57568
// continue ;
57566: GO 57456
// h := hex [ 2 ] ;
57568: LD_ADDR_VAR 0 13
57572: PUSH
57573: LD_VAR 0 4
57577: PUSH
57578: LD_INT 2
57580: ARRAY
57581: ST_TO_ADDR
// if h + 7 < height then
57582: LD_VAR 0 13
57586: PUSH
57587: LD_INT 7
57589: PLUS
57590: PUSH
57591: LD_VAR 0 15
57595: LESS
57596: IFFALSE 57625
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57598: LD_ADDR_VAR 0 18
57602: PUSH
57603: LD_INT 7
57605: PUSH
57606: LD_INT 28
57608: PUSH
57609: LD_INT 45
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: PUSH
57617: LD_VAR 0 12
57621: ARRAY
57622: ST_TO_ADDR
// break ;
57623: GO 57627
// end ; end ; end ;
57625: GO 57456
57627: POP
57628: POP
// end ; if not weapon then
57629: LD_VAR 0 18
57633: NOT
57634: IFFALSE 57694
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57636: LD_ADDR_VAR 0 5
57640: PUSH
57641: LD_VAR 0 5
57645: PUSH
57646: LD_INT 11
57648: PUSH
57649: LD_INT 30
57651: PUSH
57652: LD_INT 49
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: DIFF
57660: ST_TO_ADDR
// if not list then
57661: LD_VAR 0 5
57665: NOT
57666: IFFALSE 57670
// exit ;
57668: GO 57812
// weapon := list [ rand ( 1 , list ) ] ;
57670: LD_ADDR_VAR 0 18
57674: PUSH
57675: LD_VAR 0 5
57679: PUSH
57680: LD_INT 1
57682: PPUSH
57683: LD_VAR 0 5
57687: PPUSH
57688: CALL_OW 12
57692: ARRAY
57693: ST_TO_ADDR
// end ; if weapon then
57694: LD_VAR 0 18
57698: IFFALSE 57812
// begin tmp := CostOfWeapon ( weapon ) ;
57700: LD_ADDR_VAR 0 14
57704: PUSH
57705: LD_VAR 0 18
57709: PPUSH
57710: CALL_OW 451
57714: ST_TO_ADDR
// j := GetBase ( tower ) ;
57715: LD_ADDR_VAR 0 9
57719: PUSH
57720: LD_VAR 0 1
57724: PPUSH
57725: CALL_OW 274
57729: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57730: LD_VAR 0 9
57734: PPUSH
57735: LD_INT 1
57737: PPUSH
57738: CALL_OW 275
57742: PUSH
57743: LD_VAR 0 14
57747: PUSH
57748: LD_INT 1
57750: ARRAY
57751: GREATEREQUAL
57752: PUSH
57753: LD_VAR 0 9
57757: PPUSH
57758: LD_INT 2
57760: PPUSH
57761: CALL_OW 275
57765: PUSH
57766: LD_VAR 0 14
57770: PUSH
57771: LD_INT 2
57773: ARRAY
57774: GREATEREQUAL
57775: AND
57776: PUSH
57777: LD_VAR 0 9
57781: PPUSH
57782: LD_INT 3
57784: PPUSH
57785: CALL_OW 275
57789: PUSH
57790: LD_VAR 0 14
57794: PUSH
57795: LD_INT 3
57797: ARRAY
57798: GREATEREQUAL
57799: AND
57800: IFFALSE 57812
// result := weapon ;
57802: LD_ADDR_VAR 0 3
57806: PUSH
57807: LD_VAR 0 18
57811: ST_TO_ADDR
// end ; end ;
57812: LD_VAR 0 3
57816: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57817: LD_INT 0
57819: PPUSH
57820: PPUSH
// result := true ;
57821: LD_ADDR_VAR 0 3
57825: PUSH
57826: LD_INT 1
57828: ST_TO_ADDR
// if array1 = array2 then
57829: LD_VAR 0 1
57833: PUSH
57834: LD_VAR 0 2
57838: EQUAL
57839: IFFALSE 57899
// begin for i = 1 to array1 do
57841: LD_ADDR_VAR 0 4
57845: PUSH
57846: DOUBLE
57847: LD_INT 1
57849: DEC
57850: ST_TO_ADDR
57851: LD_VAR 0 1
57855: PUSH
57856: FOR_TO
57857: IFFALSE 57895
// if array1 [ i ] <> array2 [ i ] then
57859: LD_VAR 0 1
57863: PUSH
57864: LD_VAR 0 4
57868: ARRAY
57869: PUSH
57870: LD_VAR 0 2
57874: PUSH
57875: LD_VAR 0 4
57879: ARRAY
57880: NONEQUAL
57881: IFFALSE 57893
// begin result := false ;
57883: LD_ADDR_VAR 0 3
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
// break ;
57891: GO 57895
// end ;
57893: GO 57856
57895: POP
57896: POP
// end else
57897: GO 57907
// result := false ;
57899: LD_ADDR_VAR 0 3
57903: PUSH
57904: LD_INT 0
57906: ST_TO_ADDR
// end ;
57907: LD_VAR 0 3
57911: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57912: LD_INT 0
57914: PPUSH
57915: PPUSH
57916: PPUSH
// pom := GetBase ( fac ) ;
57917: LD_ADDR_VAR 0 5
57921: PUSH
57922: LD_VAR 0 1
57926: PPUSH
57927: CALL_OW 274
57931: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57932: LD_ADDR_VAR 0 4
57936: PUSH
57937: LD_VAR 0 2
57941: PUSH
57942: LD_INT 1
57944: ARRAY
57945: PPUSH
57946: LD_VAR 0 2
57950: PUSH
57951: LD_INT 2
57953: ARRAY
57954: PPUSH
57955: LD_VAR 0 2
57959: PUSH
57960: LD_INT 3
57962: ARRAY
57963: PPUSH
57964: LD_VAR 0 2
57968: PUSH
57969: LD_INT 4
57971: ARRAY
57972: PPUSH
57973: CALL_OW 449
57977: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57978: LD_ADDR_VAR 0 3
57982: PUSH
57983: LD_VAR 0 5
57987: PPUSH
57988: LD_INT 1
57990: PPUSH
57991: CALL_OW 275
57995: PUSH
57996: LD_VAR 0 4
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: GREATEREQUAL
58005: PUSH
58006: LD_VAR 0 5
58010: PPUSH
58011: LD_INT 2
58013: PPUSH
58014: CALL_OW 275
58018: PUSH
58019: LD_VAR 0 4
58023: PUSH
58024: LD_INT 2
58026: ARRAY
58027: GREATEREQUAL
58028: AND
58029: PUSH
58030: LD_VAR 0 5
58034: PPUSH
58035: LD_INT 3
58037: PPUSH
58038: CALL_OW 275
58042: PUSH
58043: LD_VAR 0 4
58047: PUSH
58048: LD_INT 3
58050: ARRAY
58051: GREATEREQUAL
58052: AND
58053: ST_TO_ADDR
// end ;
58054: LD_VAR 0 3
58058: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
58059: LD_INT 0
58061: PPUSH
58062: PPUSH
58063: PPUSH
58064: PPUSH
// pom := GetBase ( building ) ;
58065: LD_ADDR_VAR 0 3
58069: PUSH
58070: LD_VAR 0 1
58074: PPUSH
58075: CALL_OW 274
58079: ST_TO_ADDR
// if not pom then
58080: LD_VAR 0 3
58084: NOT
58085: IFFALSE 58089
// exit ;
58087: GO 58259
// btype := GetBType ( building ) ;
58089: LD_ADDR_VAR 0 5
58093: PUSH
58094: LD_VAR 0 1
58098: PPUSH
58099: CALL_OW 266
58103: ST_TO_ADDR
// if btype = b_armoury then
58104: LD_VAR 0 5
58108: PUSH
58109: LD_INT 4
58111: EQUAL
58112: IFFALSE 58122
// btype := b_barracks ;
58114: LD_ADDR_VAR 0 5
58118: PUSH
58119: LD_INT 5
58121: ST_TO_ADDR
// if btype = b_depot then
58122: LD_VAR 0 5
58126: PUSH
58127: LD_INT 0
58129: EQUAL
58130: IFFALSE 58140
// btype := b_warehouse ;
58132: LD_ADDR_VAR 0 5
58136: PUSH
58137: LD_INT 1
58139: ST_TO_ADDR
// if btype = b_workshop then
58140: LD_VAR 0 5
58144: PUSH
58145: LD_INT 2
58147: EQUAL
58148: IFFALSE 58158
// btype := b_factory ;
58150: LD_ADDR_VAR 0 5
58154: PUSH
58155: LD_INT 3
58157: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58158: LD_ADDR_VAR 0 4
58162: PUSH
58163: LD_VAR 0 5
58167: PPUSH
58168: LD_VAR 0 1
58172: PPUSH
58173: CALL_OW 248
58177: PPUSH
58178: CALL_OW 450
58182: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58183: LD_ADDR_VAR 0 2
58187: PUSH
58188: LD_VAR 0 3
58192: PPUSH
58193: LD_INT 1
58195: PPUSH
58196: CALL_OW 275
58200: PUSH
58201: LD_VAR 0 4
58205: PUSH
58206: LD_INT 1
58208: ARRAY
58209: GREATEREQUAL
58210: PUSH
58211: LD_VAR 0 3
58215: PPUSH
58216: LD_INT 2
58218: PPUSH
58219: CALL_OW 275
58223: PUSH
58224: LD_VAR 0 4
58228: PUSH
58229: LD_INT 2
58231: ARRAY
58232: GREATEREQUAL
58233: AND
58234: PUSH
58235: LD_VAR 0 3
58239: PPUSH
58240: LD_INT 3
58242: PPUSH
58243: CALL_OW 275
58247: PUSH
58248: LD_VAR 0 4
58252: PUSH
58253: LD_INT 3
58255: ARRAY
58256: GREATEREQUAL
58257: AND
58258: ST_TO_ADDR
// end ;
58259: LD_VAR 0 2
58263: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
58264: LD_INT 0
58266: PPUSH
58267: PPUSH
58268: PPUSH
// pom := GetBase ( building ) ;
58269: LD_ADDR_VAR 0 4
58273: PUSH
58274: LD_VAR 0 1
58278: PPUSH
58279: CALL_OW 274
58283: ST_TO_ADDR
// if not pom then
58284: LD_VAR 0 4
58288: NOT
58289: IFFALSE 58293
// exit ;
58291: GO 58394
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58293: LD_ADDR_VAR 0 5
58297: PUSH
58298: LD_VAR 0 2
58302: PPUSH
58303: LD_VAR 0 1
58307: PPUSH
58308: CALL_OW 248
58312: PPUSH
58313: CALL_OW 450
58317: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58318: LD_ADDR_VAR 0 3
58322: PUSH
58323: LD_VAR 0 4
58327: PPUSH
58328: LD_INT 1
58330: PPUSH
58331: CALL_OW 275
58335: PUSH
58336: LD_VAR 0 5
58340: PUSH
58341: LD_INT 1
58343: ARRAY
58344: GREATEREQUAL
58345: PUSH
58346: LD_VAR 0 4
58350: PPUSH
58351: LD_INT 2
58353: PPUSH
58354: CALL_OW 275
58358: PUSH
58359: LD_VAR 0 5
58363: PUSH
58364: LD_INT 2
58366: ARRAY
58367: GREATEREQUAL
58368: AND
58369: PUSH
58370: LD_VAR 0 4
58374: PPUSH
58375: LD_INT 3
58377: PPUSH
58378: CALL_OW 275
58382: PUSH
58383: LD_VAR 0 5
58387: PUSH
58388: LD_INT 3
58390: ARRAY
58391: GREATEREQUAL
58392: AND
58393: ST_TO_ADDR
// end ;
58394: LD_VAR 0 3
58398: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
58399: LD_INT 0
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
58407: PPUSH
58408: PPUSH
58409: PPUSH
58410: PPUSH
// result := false ;
58411: LD_ADDR_VAR 0 6
58415: PUSH
58416: LD_INT 0
58418: ST_TO_ADDR
// if not base or not btype or not x or not y then
58419: LD_VAR 0 1
58423: NOT
58424: PUSH
58425: LD_VAR 0 2
58429: NOT
58430: OR
58431: PUSH
58432: LD_VAR 0 3
58436: NOT
58437: OR
58438: PUSH
58439: LD_VAR 0 4
58443: NOT
58444: OR
58445: IFFALSE 58449
// exit ;
58447: GO 59040
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
58449: LD_ADDR_VAR 0 12
58453: PUSH
58454: LD_VAR 0 2
58458: PPUSH
58459: LD_VAR 0 3
58463: PPUSH
58464: LD_VAR 0 4
58468: PPUSH
58469: LD_VAR 0 5
58473: PPUSH
58474: LD_VAR 0 1
58478: PUSH
58479: LD_INT 1
58481: ARRAY
58482: PPUSH
58483: CALL_OW 248
58487: PPUSH
58488: LD_INT 0
58490: PPUSH
58491: CALL 59877 0 6
58495: ST_TO_ADDR
// if not hexes then
58496: LD_VAR 0 12
58500: NOT
58501: IFFALSE 58505
// exit ;
58503: GO 59040
// for i = 1 to hexes do
58505: LD_ADDR_VAR 0 7
58509: PUSH
58510: DOUBLE
58511: LD_INT 1
58513: DEC
58514: ST_TO_ADDR
58515: LD_VAR 0 12
58519: PUSH
58520: FOR_TO
58521: IFFALSE 59038
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58523: LD_ADDR_VAR 0 11
58527: PUSH
58528: LD_VAR 0 12
58532: PUSH
58533: LD_VAR 0 7
58537: ARRAY
58538: PUSH
58539: LD_INT 1
58541: ARRAY
58542: PPUSH
58543: LD_VAR 0 12
58547: PUSH
58548: LD_VAR 0 7
58552: ARRAY
58553: PUSH
58554: LD_INT 2
58556: ARRAY
58557: PPUSH
58558: CALL_OW 428
58562: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58563: LD_VAR 0 12
58567: PUSH
58568: LD_VAR 0 7
58572: ARRAY
58573: PUSH
58574: LD_INT 1
58576: ARRAY
58577: PPUSH
58578: LD_VAR 0 12
58582: PUSH
58583: LD_VAR 0 7
58587: ARRAY
58588: PUSH
58589: LD_INT 2
58591: ARRAY
58592: PPUSH
58593: CALL_OW 351
58597: PUSH
58598: LD_VAR 0 12
58602: PUSH
58603: LD_VAR 0 7
58607: ARRAY
58608: PUSH
58609: LD_INT 1
58611: ARRAY
58612: PPUSH
58613: LD_VAR 0 12
58617: PUSH
58618: LD_VAR 0 7
58622: ARRAY
58623: PUSH
58624: LD_INT 2
58626: ARRAY
58627: PPUSH
58628: CALL_OW 488
58632: NOT
58633: OR
58634: PUSH
58635: LD_VAR 0 11
58639: PPUSH
58640: CALL_OW 247
58644: PUSH
58645: LD_INT 3
58647: EQUAL
58648: OR
58649: IFFALSE 58655
// exit ;
58651: POP
58652: POP
58653: GO 59040
// if not tmp then
58655: LD_VAR 0 11
58659: NOT
58660: IFFALSE 58664
// continue ;
58662: GO 58520
// result := true ;
58664: LD_ADDR_VAR 0 6
58668: PUSH
58669: LD_INT 1
58671: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58672: LD_ADDR_VAR 0 15
58676: PUSH
58677: LD_INT 22
58679: PUSH
58680: LD_VAR 0 11
58684: PPUSH
58685: CALL_OW 255
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 30
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 30
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PPUSH
58726: CALL_OW 69
58730: ST_TO_ADDR
// if dep then
58731: LD_VAR 0 15
58735: IFFALSE 58871
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58737: LD_ADDR_VAR 0 14
58741: PUSH
58742: LD_VAR 0 15
58746: PUSH
58747: LD_INT 1
58749: ARRAY
58750: PPUSH
58751: CALL_OW 250
58755: PPUSH
58756: LD_VAR 0 15
58760: PUSH
58761: LD_INT 1
58763: ARRAY
58764: PPUSH
58765: CALL_OW 254
58769: PPUSH
58770: LD_INT 5
58772: PPUSH
58773: CALL_OW 272
58777: PUSH
58778: LD_VAR 0 15
58782: PUSH
58783: LD_INT 1
58785: ARRAY
58786: PPUSH
58787: CALL_OW 251
58791: PPUSH
58792: LD_VAR 0 15
58796: PUSH
58797: LD_INT 1
58799: ARRAY
58800: PPUSH
58801: CALL_OW 254
58805: PPUSH
58806: LD_INT 5
58808: PPUSH
58809: CALL_OW 273
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58818: LD_VAR 0 14
58822: PUSH
58823: LD_INT 1
58825: ARRAY
58826: PPUSH
58827: LD_VAR 0 14
58831: PUSH
58832: LD_INT 2
58834: ARRAY
58835: PPUSH
58836: CALL_OW 488
58840: IFFALSE 58871
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58842: LD_VAR 0 11
58846: PPUSH
58847: LD_VAR 0 14
58851: PUSH
58852: LD_INT 1
58854: ARRAY
58855: PPUSH
58856: LD_VAR 0 14
58860: PUSH
58861: LD_INT 2
58863: ARRAY
58864: PPUSH
58865: CALL_OW 111
// continue ;
58869: GO 58520
// end ; end ; r := GetDir ( tmp ) ;
58871: LD_ADDR_VAR 0 13
58875: PUSH
58876: LD_VAR 0 11
58880: PPUSH
58881: CALL_OW 254
58885: ST_TO_ADDR
// if r = 5 then
58886: LD_VAR 0 13
58890: PUSH
58891: LD_INT 5
58893: EQUAL
58894: IFFALSE 58904
// r := 0 ;
58896: LD_ADDR_VAR 0 13
58900: PUSH
58901: LD_INT 0
58903: ST_TO_ADDR
// for j = r to 5 do
58904: LD_ADDR_VAR 0 8
58908: PUSH
58909: DOUBLE
58910: LD_VAR 0 13
58914: DEC
58915: ST_TO_ADDR
58916: LD_INT 5
58918: PUSH
58919: FOR_TO
58920: IFFALSE 59034
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58922: LD_ADDR_VAR 0 9
58926: PUSH
58927: LD_VAR 0 11
58931: PPUSH
58932: CALL_OW 250
58936: PPUSH
58937: LD_VAR 0 8
58941: PPUSH
58942: LD_INT 2
58944: PPUSH
58945: CALL_OW 272
58949: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58950: LD_ADDR_VAR 0 10
58954: PUSH
58955: LD_VAR 0 11
58959: PPUSH
58960: CALL_OW 251
58964: PPUSH
58965: LD_VAR 0 8
58969: PPUSH
58970: LD_INT 2
58972: PPUSH
58973: CALL_OW 273
58977: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58978: LD_VAR 0 9
58982: PPUSH
58983: LD_VAR 0 10
58987: PPUSH
58988: CALL_OW 488
58992: PUSH
58993: LD_VAR 0 9
58997: PPUSH
58998: LD_VAR 0 10
59002: PPUSH
59003: CALL_OW 428
59007: NOT
59008: AND
59009: IFFALSE 59032
// begin ComMoveXY ( tmp , _x , _y ) ;
59011: LD_VAR 0 11
59015: PPUSH
59016: LD_VAR 0 9
59020: PPUSH
59021: LD_VAR 0 10
59025: PPUSH
59026: CALL_OW 111
// break ;
59030: GO 59034
// end ; end ;
59032: GO 58919
59034: POP
59035: POP
// end ;
59036: GO 58520
59038: POP
59039: POP
// end ;
59040: LD_VAR 0 6
59044: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
59045: LD_INT 0
59047: PPUSH
59048: PPUSH
59049: PPUSH
59050: PPUSH
59051: PPUSH
59052: PPUSH
59053: PPUSH
59054: PPUSH
59055: PPUSH
59056: PPUSH
// result := false ;
59057: LD_ADDR_VAR 0 6
59061: PUSH
59062: LD_INT 0
59064: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59065: LD_VAR 0 1
59069: NOT
59070: PUSH
59071: LD_VAR 0 1
59075: PPUSH
59076: CALL_OW 266
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: IN
59091: NOT
59092: OR
59093: PUSH
59094: LD_VAR 0 2
59098: NOT
59099: OR
59100: PUSH
59101: LD_VAR 0 5
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 4
59120: PUSH
59121: LD_INT 5
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: IN
59132: NOT
59133: OR
59134: PUSH
59135: LD_VAR 0 3
59139: PPUSH
59140: LD_VAR 0 4
59144: PPUSH
59145: CALL_OW 488
59149: NOT
59150: OR
59151: IFFALSE 59155
// exit ;
59153: GO 59872
// pom := GetBase ( bdepot ) ;
59155: LD_ADDR_VAR 0 10
59159: PUSH
59160: LD_VAR 0 1
59164: PPUSH
59165: CALL_OW 274
59169: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
59170: LD_ADDR_VAR 0 11
59174: PUSH
59175: LD_VAR 0 2
59179: PPUSH
59180: LD_VAR 0 1
59184: PPUSH
59185: CALL_OW 248
59189: PPUSH
59190: CALL_OW 450
59194: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59195: LD_VAR 0 10
59199: PPUSH
59200: LD_INT 1
59202: PPUSH
59203: CALL_OW 275
59207: PUSH
59208: LD_VAR 0 11
59212: PUSH
59213: LD_INT 1
59215: ARRAY
59216: GREATEREQUAL
59217: PUSH
59218: LD_VAR 0 10
59222: PPUSH
59223: LD_INT 2
59225: PPUSH
59226: CALL_OW 275
59230: PUSH
59231: LD_VAR 0 11
59235: PUSH
59236: LD_INT 2
59238: ARRAY
59239: GREATEREQUAL
59240: AND
59241: PUSH
59242: LD_VAR 0 10
59246: PPUSH
59247: LD_INT 3
59249: PPUSH
59250: CALL_OW 275
59254: PUSH
59255: LD_VAR 0 11
59259: PUSH
59260: LD_INT 3
59262: ARRAY
59263: GREATEREQUAL
59264: AND
59265: NOT
59266: IFFALSE 59270
// exit ;
59268: GO 59872
// if GetBType ( bdepot ) = b_depot then
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 266
59279: PUSH
59280: LD_INT 0
59282: EQUAL
59283: IFFALSE 59295
// dist := 28 else
59285: LD_ADDR_VAR 0 14
59289: PUSH
59290: LD_INT 28
59292: ST_TO_ADDR
59293: GO 59303
// dist := 36 ;
59295: LD_ADDR_VAR 0 14
59299: PUSH
59300: LD_INT 36
59302: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
59303: LD_VAR 0 1
59307: PPUSH
59308: LD_VAR 0 3
59312: PPUSH
59313: LD_VAR 0 4
59317: PPUSH
59318: CALL_OW 297
59322: PUSH
59323: LD_VAR 0 14
59327: GREATER
59328: IFFALSE 59332
// exit ;
59330: GO 59872
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
59332: LD_ADDR_VAR 0 12
59336: PUSH
59337: LD_VAR 0 2
59341: PPUSH
59342: LD_VAR 0 3
59346: PPUSH
59347: LD_VAR 0 4
59351: PPUSH
59352: LD_VAR 0 5
59356: PPUSH
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 248
59366: PPUSH
59367: LD_INT 0
59369: PPUSH
59370: CALL 59877 0 6
59374: ST_TO_ADDR
// if not hexes then
59375: LD_VAR 0 12
59379: NOT
59380: IFFALSE 59384
// exit ;
59382: GO 59872
// hex := GetHexInfo ( x , y ) ;
59384: LD_ADDR_VAR 0 15
59388: PUSH
59389: LD_VAR 0 3
59393: PPUSH
59394: LD_VAR 0 4
59398: PPUSH
59399: CALL_OW 546
59403: ST_TO_ADDR
// if hex [ 1 ] then
59404: LD_VAR 0 15
59408: PUSH
59409: LD_INT 1
59411: ARRAY
59412: IFFALSE 59416
// exit ;
59414: GO 59872
// height := hex [ 2 ] ;
59416: LD_ADDR_VAR 0 13
59420: PUSH
59421: LD_VAR 0 15
59425: PUSH
59426: LD_INT 2
59428: ARRAY
59429: ST_TO_ADDR
// for i = 1 to hexes do
59430: LD_ADDR_VAR 0 7
59434: PUSH
59435: DOUBLE
59436: LD_INT 1
59438: DEC
59439: ST_TO_ADDR
59440: LD_VAR 0 12
59444: PUSH
59445: FOR_TO
59446: IFFALSE 59776
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59448: LD_VAR 0 12
59452: PUSH
59453: LD_VAR 0 7
59457: ARRAY
59458: PUSH
59459: LD_INT 1
59461: ARRAY
59462: PPUSH
59463: LD_VAR 0 12
59467: PUSH
59468: LD_VAR 0 7
59472: ARRAY
59473: PUSH
59474: LD_INT 2
59476: ARRAY
59477: PPUSH
59478: CALL_OW 488
59482: NOT
59483: PUSH
59484: LD_VAR 0 12
59488: PUSH
59489: LD_VAR 0 7
59493: ARRAY
59494: PUSH
59495: LD_INT 1
59497: ARRAY
59498: PPUSH
59499: LD_VAR 0 12
59503: PUSH
59504: LD_VAR 0 7
59508: ARRAY
59509: PUSH
59510: LD_INT 2
59512: ARRAY
59513: PPUSH
59514: CALL_OW 428
59518: PUSH
59519: LD_INT 0
59521: GREATER
59522: OR
59523: PUSH
59524: LD_VAR 0 12
59528: PUSH
59529: LD_VAR 0 7
59533: ARRAY
59534: PUSH
59535: LD_INT 1
59537: ARRAY
59538: PPUSH
59539: LD_VAR 0 12
59543: PUSH
59544: LD_VAR 0 7
59548: ARRAY
59549: PUSH
59550: LD_INT 2
59552: ARRAY
59553: PPUSH
59554: CALL_OW 351
59558: OR
59559: IFFALSE 59565
// exit ;
59561: POP
59562: POP
59563: GO 59872
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59565: LD_ADDR_VAR 0 8
59569: PUSH
59570: LD_VAR 0 12
59574: PUSH
59575: LD_VAR 0 7
59579: ARRAY
59580: PUSH
59581: LD_INT 1
59583: ARRAY
59584: PPUSH
59585: LD_VAR 0 12
59589: PUSH
59590: LD_VAR 0 7
59594: ARRAY
59595: PUSH
59596: LD_INT 2
59598: ARRAY
59599: PPUSH
59600: CALL_OW 546
59604: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59605: LD_VAR 0 8
59609: PUSH
59610: LD_INT 1
59612: ARRAY
59613: PUSH
59614: LD_VAR 0 8
59618: PUSH
59619: LD_INT 2
59621: ARRAY
59622: PUSH
59623: LD_VAR 0 13
59627: PUSH
59628: LD_INT 2
59630: PLUS
59631: GREATER
59632: OR
59633: PUSH
59634: LD_VAR 0 8
59638: PUSH
59639: LD_INT 2
59641: ARRAY
59642: PUSH
59643: LD_VAR 0 13
59647: PUSH
59648: LD_INT 2
59650: MINUS
59651: LESS
59652: OR
59653: PUSH
59654: LD_VAR 0 8
59658: PUSH
59659: LD_INT 3
59661: ARRAY
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 8
59668: PUSH
59669: LD_INT 9
59671: PUSH
59672: LD_INT 10
59674: PUSH
59675: LD_INT 11
59677: PUSH
59678: LD_INT 12
59680: PUSH
59681: LD_INT 13
59683: PUSH
59684: LD_INT 16
59686: PUSH
59687: LD_INT 17
59689: PUSH
59690: LD_INT 18
59692: PUSH
59693: LD_INT 19
59695: PUSH
59696: LD_INT 20
59698: PUSH
59699: LD_INT 21
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: IN
59717: NOT
59718: OR
59719: PUSH
59720: LD_VAR 0 8
59724: PUSH
59725: LD_INT 5
59727: ARRAY
59728: NOT
59729: OR
59730: PUSH
59731: LD_VAR 0 8
59735: PUSH
59736: LD_INT 6
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: LD_INT 7
59748: PUSH
59749: LD_INT 9
59751: PUSH
59752: LD_INT 10
59754: PUSH
59755: LD_INT 11
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: IN
59766: NOT
59767: OR
59768: IFFALSE 59774
// exit ;
59770: POP
59771: POP
59772: GO 59872
// end ;
59774: GO 59445
59776: POP
59777: POP
// side := GetSide ( bdepot ) ;
59778: LD_ADDR_VAR 0 9
59782: PUSH
59783: LD_VAR 0 1
59787: PPUSH
59788: CALL_OW 255
59792: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59793: LD_VAR 0 9
59797: PPUSH
59798: LD_VAR 0 3
59802: PPUSH
59803: LD_VAR 0 4
59807: PPUSH
59808: LD_INT 20
59810: PPUSH
59811: CALL 52544 0 4
59815: PUSH
59816: LD_INT 4
59818: ARRAY
59819: IFFALSE 59823
// exit ;
59821: GO 59872
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
59823: LD_VAR 0 2
59827: PUSH
59828: LD_INT 29
59830: PUSH
59831: LD_INT 30
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: IN
59838: PUSH
59839: LD_VAR 0 3
59843: PPUSH
59844: LD_VAR 0 4
59848: PPUSH
59849: LD_VAR 0 9
59853: PPUSH
59854: CALL_OW 440
59858: NOT
59859: AND
59860: IFFALSE 59864
// exit ;
59862: GO 59872
// result := true ;
59864: LD_ADDR_VAR 0 6
59868: PUSH
59869: LD_INT 1
59871: ST_TO_ADDR
// end ;
59872: LD_VAR 0 6
59876: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
59877: LD_INT 0
59879: PPUSH
59880: PPUSH
59881: PPUSH
59882: PPUSH
59883: PPUSH
59884: PPUSH
59885: PPUSH
59886: PPUSH
59887: PPUSH
59888: PPUSH
59889: PPUSH
59890: PPUSH
59891: PPUSH
59892: PPUSH
59893: PPUSH
59894: PPUSH
59895: PPUSH
59896: PPUSH
59897: PPUSH
59898: PPUSH
59899: PPUSH
59900: PPUSH
59901: PPUSH
59902: PPUSH
59903: PPUSH
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
59908: PPUSH
59909: PPUSH
59910: PPUSH
59911: PPUSH
59912: PPUSH
59913: PPUSH
59914: PPUSH
59915: PPUSH
59916: PPUSH
59917: PPUSH
59918: PPUSH
59919: PPUSH
59920: PPUSH
59921: PPUSH
59922: PPUSH
59923: PPUSH
59924: PPUSH
59925: PPUSH
59926: PPUSH
59927: PPUSH
59928: PPUSH
59929: PPUSH
59930: PPUSH
59931: PPUSH
59932: PPUSH
59933: PPUSH
59934: PPUSH
59935: PPUSH
59936: PPUSH
// result = [ ] ;
59937: LD_ADDR_VAR 0 7
59941: PUSH
59942: EMPTY
59943: ST_TO_ADDR
// temp_list = [ ] ;
59944: LD_ADDR_VAR 0 9
59948: PUSH
59949: EMPTY
59950: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59951: LD_VAR 0 4
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 5
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: IN
59982: NOT
59983: PUSH
59984: LD_VAR 0 1
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: IN
59999: PUSH
60000: LD_VAR 0 5
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: LIST
60018: IN
60019: NOT
60020: AND
60021: OR
60022: IFFALSE 60026
// exit ;
60024: GO 78411
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60026: LD_VAR 0 1
60030: PUSH
60031: LD_INT 6
60033: PUSH
60034: LD_INT 7
60036: PUSH
60037: LD_INT 8
60039: PUSH
60040: LD_INT 13
60042: PUSH
60043: LD_INT 12
60045: PUSH
60046: LD_INT 15
60048: PUSH
60049: LD_INT 11
60051: PUSH
60052: LD_INT 14
60054: PUSH
60055: LD_INT 10
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: IN
60069: IFFALSE 60079
// btype = b_lab ;
60071: LD_ADDR_VAR 0 1
60075: PUSH
60076: LD_INT 6
60078: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60079: LD_VAR 0 6
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: IN
60098: NOT
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 6
60119: PUSH
60120: LD_INT 36
60122: PUSH
60123: LD_INT 4
60125: PUSH
60126: LD_INT 5
60128: PUSH
60129: LD_INT 31
60131: PUSH
60132: LD_INT 32
60134: PUSH
60135: LD_INT 33
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: IN
60151: NOT
60152: PUSH
60153: LD_VAR 0 6
60157: PUSH
60158: LD_INT 1
60160: EQUAL
60161: AND
60162: OR
60163: PUSH
60164: LD_VAR 0 1
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: IN
60179: NOT
60180: PUSH
60181: LD_VAR 0 6
60185: PUSH
60186: LD_INT 2
60188: EQUAL
60189: AND
60190: OR
60191: IFFALSE 60201
// mode = 0 ;
60193: LD_ADDR_VAR 0 6
60197: PUSH
60198: LD_INT 0
60200: ST_TO_ADDR
// case mode of 0 :
60201: LD_VAR 0 6
60205: PUSH
60206: LD_INT 0
60208: DOUBLE
60209: EQUAL
60210: IFTRUE 60214
60212: GO 71667
60214: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60215: LD_ADDR_VAR 0 11
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 3
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60408: LD_ADDR_VAR 0 12
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: NEG
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: NEG
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60604: LD_ADDR_VAR 0 13
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: LD_INT 2
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 3
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60803: LD_ADDR_VAR 0 14
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60999: LD_ADDR_VAR 0 15
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61192: LD_ADDR_VAR 0 16
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 2
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61385: LD_ADDR_VAR 0 17
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61615: LD_ADDR_VAR 0 18
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 2
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 2
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: NEG
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61845: LD_ADDR_VAR 0 19
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62075: LD_ADDR_VAR 0 20
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 2
62274: NEG
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62305: LD_ADDR_VAR 0 21
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: LD_INT 2
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62535: LD_ADDR_VAR 0 22
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 2
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: NEG
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62765: LD_ADDR_VAR 0 23
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: LD_INT 2
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 2
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: LD_INT 2
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: NEG
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 3
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63045: LD_ADDR_VAR 0 24
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: LD_INT 2
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63321: LD_ADDR_VAR 0 25
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: LD_INT 2
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: NEG
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63595: LD_ADDR_VAR 0 26
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 2
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: LD_INT 2
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: LD_INT 2
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 2
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63871: LD_ADDR_VAR 0 27
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: LD_INT 2
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 2
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: LD_INT 2
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: LD_INT 2
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 2
64093: NEG
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 3
64116: NEG
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64151: LD_ADDR_VAR 0 28
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 2
64350: NEG
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64433: LD_ADDR_VAR 0 29
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: PUSH
64516: LD_INT 2
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 2
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: NEG
64624: PUSH
64625: LD_INT 3
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 3
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: PUSH
64657: LD_INT 3
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 3
64677: NEG
64678: PUSH
64679: LD_INT 2
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64712: LD_ADDR_VAR 0 30
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: LD_INT 2
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: LD_INT 2
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: LD_INT 3
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 3
64955: NEG
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64990: LD_ADDR_VAR 0 31
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 1
65059: NEG
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 2
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: LD_INT 2
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 2
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 2
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 2
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 3
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: LD_INT 2
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65268: LD_ADDR_VAR 0 32
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: LD_INT 2
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 2
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 1
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: LD_INT 2
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: LD_INT 2
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: LD_INT 1
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: LD_INT 3
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 3
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: LD_INT 3
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65546: LD_ADDR_VAR 0 33
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: LD_INT 2
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 2
65712: NEG
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 2
65724: NEG
65725: PUSH
65726: LD_INT 2
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: LD_INT 3
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 3
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 2
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: NEG
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65825: LD_ADDR_VAR 0 34
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 1
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: LD_INT 3
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 3
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 2
66049: PUSH
66050: LD_INT 3
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 2
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 3
66070: NEG
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66105: LD_ADDR_VAR 0 35
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66217: LD_ADDR_VAR 0 36
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66329: LD_ADDR_VAR 0 37
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: LD_INT 1
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66441: LD_ADDR_VAR 0 38
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 2
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66553: LD_ADDR_VAR 0 39
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 1
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 1
66611: NEG
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: LD_INT 2
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: LD_INT 2
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66665: LD_ADDR_VAR 0 40
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: LD_INT 1
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 1
66757: NEG
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66777: LD_ADDR_VAR 0 41
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 1
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 2
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 2
66955: NEG
66956: PUSH
66957: LD_INT 2
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: LD_INT 3
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 2
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 3
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 3
67051: NEG
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 3
67062: NEG
67063: PUSH
67064: LD_INT 1
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: NEG
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67127: LD_ADDR_VAR 0 42
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 1
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: LD_INT 1
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: LD_INT 2
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: LD_INT 2
67223: NEG
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 1
67231: PUSH
67232: LD_INT 1
67234: NEG
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 2
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 2
67252: PUSH
67253: LD_INT 2
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: LD_INT 2
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 2
67293: NEG
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 2
67317: NEG
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 1
67329: NEG
67330: PUSH
67331: LD_INT 3
67333: NEG
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 3
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: LD_INT 2
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 3
67373: PUSH
67374: LD_INT 3
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 2
67383: PUSH
67384: LD_INT 3
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: LD_INT 3
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 3
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 1
67413: NEG
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: LD_INT 2
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: NEG
67437: PUSH
67438: LD_INT 3
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67477: LD_ADDR_VAR 0 43
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: LD_INT 1
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 1
67546: NEG
67547: PUSH
67548: LD_INT 1
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: LD_INT 2
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 2
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 1
67612: PUSH
67613: LD_INT 2
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 3
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 3
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: LD_INT 2
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 2
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 3
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: LD_INT 2
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: LD_INT 1
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 3
67773: NEG
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 3
67784: NEG
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67825: LD_ADDR_VAR 0 44
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 1
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 1
67883: NEG
67884: PUSH
67885: LD_INT 0
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: LD_INT 2
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 1
67918: PUSH
67919: LD_INT 1
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 2
67929: PUSH
67930: LD_INT 0
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 2
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 2
67949: PUSH
67950: LD_INT 2
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: LD_INT 2
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 1
67969: NEG
67970: PUSH
67971: LD_INT 1
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: NEG
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 2
68003: NEG
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 2
68015: NEG
68016: PUSH
68017: LD_INT 3
68019: NEG
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 2
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: LD_INT 2
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 3
68068: PUSH
68069: LD_INT 3
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 2
68078: PUSH
68079: LD_INT 3
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 2
68088: NEG
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 3
68099: NEG
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 3
68134: NEG
68135: PUSH
68136: LD_INT 3
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68175: LD_ADDR_VAR 0 45
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: LD_INT 1
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 1
68203: PUSH
68204: LD_INT 0
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 1
68213: PUSH
68214: LD_INT 1
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: LD_INT 0
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: LD_INT 1
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 1
68256: NEG
68257: PUSH
68258: LD_INT 2
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: LD_INT 2
68271: NEG
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: LD_INT 2
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: LD_INT 2
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 2
68341: NEG
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 2
68353: NEG
68354: PUSH
68355: LD_INT 2
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 2
68365: NEG
68366: PUSH
68367: LD_INT 3
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: LD_INT 3
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 3
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 3
68411: PUSH
68412: LD_INT 2
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: LD_INT 3
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 3
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 3
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: LD_INT 2
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 3
68472: NEG
68473: PUSH
68474: LD_INT 2
68476: NEG
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 3
68484: NEG
68485: PUSH
68486: LD_INT 3
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68525: LD_ADDR_VAR 0 46
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 0
68573: PUSH
68574: LD_INT 1
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: NEG
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: PUSH
68608: LD_INT 2
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 2
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: LD_INT 1
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 2
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 2
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 1
68660: PUSH
68661: LD_INT 2
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 2
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: LD_INT 1
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 2
68691: NEG
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 2
68702: NEG
68703: PUSH
68704: LD_INT 1
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 1
68714: NEG
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 1
68737: PUSH
68738: LD_INT 2
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: LD_INT 1
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 3
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 1
68779: PUSH
68780: LD_INT 3
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: LD_INT 2
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 2
68810: NEG
68811: PUSH
68812: LD_INT 1
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 3
68821: NEG
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68873: LD_ADDR_VAR 0 47
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 1
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: LD_INT 1
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 0
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: LD_INT 1
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: NEG
68955: PUSH
68956: LD_INT 2
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: LD_INT 2
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: PUSH
68978: LD_INT 1
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: NEG
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69024: LD_ADDR_VAR 0 48
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 1
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: LD_INT 1
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 1
69082: NEG
69083: PUSH
69084: LD_INT 0
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 1
69093: NEG
69094: PUSH
69095: LD_INT 1
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 1
69105: NEG
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: LD_INT 2
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 1
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 2
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 2
69149: PUSH
69150: LD_INT 1
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69171: LD_ADDR_VAR 0 49
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 1
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 1
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: LD_INT 1
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: LD_INT 0
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 1
69240: NEG
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: LD_INT 1
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 2
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 2
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 2
69283: PUSH
69284: LD_INT 2
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 1
69293: PUSH
69294: LD_INT 2
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69315: LD_ADDR_VAR 0 50
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 1
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: PUSH
69375: LD_INT 0
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: NEG
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: LD_INT 2
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 1
69416: PUSH
69417: LD_INT 2
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: LD_INT 2
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69459: LD_ADDR_VAR 0 51
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: LD_INT 1
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 1
69487: PUSH
69488: LD_INT 0
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 1
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: LD_INT 1
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 1
69528: NEG
69529: PUSH
69530: LD_INT 1
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: PUSH
69541: LD_INT 2
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 0
69550: PUSH
69551: LD_INT 2
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 1
69560: NEG
69561: PUSH
69562: LD_INT 1
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 2
69571: NEG
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 2
69582: NEG
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69606: LD_ADDR_VAR 0 52
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: LD_INT 1
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 1
69687: NEG
69688: PUSH
69689: LD_INT 2
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: NEG
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 2
69733: NEG
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69757: LD_ADDR_VAR 0 53
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 0
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 1
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 1
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: LD_INT 1
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 1
69815: NEG
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: LD_INT 1
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: LD_INT 2
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: LD_INT 2
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: LD_INT 1
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 2
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 2
69892: PUSH
69893: LD_INT 2
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: NEG
69923: PUSH
69924: LD_INT 1
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 2
69933: NEG
69934: PUSH
69935: LD_INT 0
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 2
69944: NEG
69945: PUSH
69946: LD_INT 1
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 2
69956: NEG
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69987: LD_ADDR_VAR 0 54
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: LD_INT 1
70007: NEG
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 1
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 1
70025: PUSH
70026: LD_INT 1
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: LD_INT 1
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 1
70045: NEG
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 1
70056: NEG
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: LD_INT 2
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 2
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 2
70102: PUSH
70103: LD_INT 0
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: LD_INT 1
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 2
70122: PUSH
70123: LD_INT 2
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 1
70132: PUSH
70133: LD_INT 2
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 1
70152: NEG
70153: PUSH
70154: LD_INT 1
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 2
70163: NEG
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 2
70174: NEG
70175: PUSH
70176: LD_INT 1
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 2
70186: NEG
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70217: LD_ADDR_VAR 0 55
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: LD_INT 1
70237: NEG
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 1
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 1
70255: PUSH
70256: LD_INT 1
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: LD_INT 1
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 1
70275: NEG
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 1
70286: NEG
70287: PUSH
70288: LD_INT 1
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 1
70298: NEG
70299: PUSH
70300: LD_INT 2
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 0
70310: PUSH
70311: LD_INT 2
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 2
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 2
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 2
70352: PUSH
70353: LD_INT 2
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 1
70362: PUSH
70363: LD_INT 2
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: LD_INT 2
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 1
70382: NEG
70383: PUSH
70384: LD_INT 1
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 2
70393: NEG
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 2
70404: NEG
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 2
70416: NEG
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70447: LD_ADDR_VAR 0 56
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_INT 1
70467: NEG
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: PUSH
70486: LD_INT 1
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 0
70495: PUSH
70496: LD_INT 1
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 1
70505: NEG
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 1
70516: NEG
70517: PUSH
70518: LD_INT 1
70520: NEG
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 1
70528: NEG
70529: PUSH
70530: LD_INT 2
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_INT 2
70543: NEG
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 1
70551: PUSH
70552: LD_INT 1
70554: NEG
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 2
70562: PUSH
70563: LD_INT 0
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 2
70582: PUSH
70583: LD_INT 2
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 1
70592: PUSH
70593: LD_INT 2
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: LD_INT 2
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: NEG
70613: PUSH
70614: LD_INT 1
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 2
70623: NEG
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 2
70634: NEG
70635: PUSH
70636: LD_INT 1
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 2
70646: NEG
70647: PUSH
70648: LD_INT 2
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70677: LD_ADDR_VAR 0 57
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: LD_INT 1
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 1
70715: PUSH
70716: LD_INT 1
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: LD_INT 1
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 1
70735: NEG
70736: PUSH
70737: LD_INT 0
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: LD_INT 1
70750: NEG
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 1
70758: NEG
70759: PUSH
70760: LD_INT 2
70762: NEG
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 0
70770: PUSH
70771: LD_INT 2
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 2
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 2
70802: PUSH
70803: LD_INT 1
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 2
70812: PUSH
70813: LD_INT 2
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 1
70822: PUSH
70823: LD_INT 2
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 0
70832: PUSH
70833: LD_INT 2
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 1
70842: NEG
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 2
70853: NEG
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 2
70864: NEG
70865: PUSH
70866: LD_INT 1
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 2
70876: NEG
70877: PUSH
70878: LD_INT 2
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70907: LD_ADDR_VAR 0 58
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: LD_INT 0
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: LD_INT 1
70927: NEG
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 1
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: LD_INT 1
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 1
70965: NEG
70966: PUSH
70967: LD_INT 0
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 1
70976: NEG
70977: PUSH
70978: LD_INT 1
70980: NEG
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 1
70988: NEG
70989: PUSH
70990: LD_INT 2
70992: NEG
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 0
71000: PUSH
71001: LD_INT 2
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 1
71011: PUSH
71012: LD_INT 1
71014: NEG
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 2
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 2
71032: PUSH
71033: LD_INT 1
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 2
71042: PUSH
71043: LD_INT 2
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 1
71052: PUSH
71053: LD_INT 2
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 0
71062: PUSH
71063: LD_INT 2
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 1
71072: NEG
71073: PUSH
71074: LD_INT 1
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 2
71083: NEG
71084: PUSH
71085: LD_INT 0
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 2
71094: NEG
71095: PUSH
71096: LD_INT 1
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 2
71106: NEG
71107: PUSH
71108: LD_INT 2
71110: NEG
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71137: LD_ADDR_VAR 0 59
71141: PUSH
71142: LD_INT 0
71144: PUSH
71145: LD_INT 0
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: LD_INT 1
71157: NEG
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 1
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 1
71175: PUSH
71176: LD_INT 1
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: LD_INT 1
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: NEG
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 1
71206: NEG
71207: PUSH
71208: LD_INT 1
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71225: LD_ADDR_VAR 0 60
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: LD_INT 1
71245: NEG
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 1
71253: PUSH
71254: LD_INT 0
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 1
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: LD_INT 1
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 1
71283: NEG
71284: PUSH
71285: LD_INT 0
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 1
71294: NEG
71295: PUSH
71296: LD_INT 1
71298: NEG
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71313: LD_ADDR_VAR 0 61
71317: PUSH
71318: LD_INT 0
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 0
71330: PUSH
71331: LD_INT 1
71333: NEG
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: LD_INT 0
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 1
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: LD_INT 1
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 1
71371: NEG
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 1
71382: NEG
71383: PUSH
71384: LD_INT 1
71386: NEG
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71401: LD_ADDR_VAR 0 62
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 0
71418: PUSH
71419: LD_INT 1
71421: NEG
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 1
71429: PUSH
71430: LD_INT 0
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 1
71439: PUSH
71440: LD_INT 1
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 0
71449: PUSH
71450: LD_INT 1
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 1
71459: NEG
71460: PUSH
71461: LD_INT 0
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: NEG
71471: PUSH
71472: LD_INT 1
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71489: LD_ADDR_VAR 0 63
71493: PUSH
71494: LD_INT 0
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 0
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 1
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 1
71527: PUSH
71528: LD_INT 1
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 1
71547: NEG
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 1
71558: NEG
71559: PUSH
71560: LD_INT 1
71562: NEG
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71577: LD_ADDR_VAR 0 64
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: LD_INT 0
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: LD_INT 1
71597: NEG
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 1
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 1
71615: PUSH
71616: LD_INT 1
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 0
71625: PUSH
71626: LD_INT 1
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 1
71635: NEG
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 1
71646: NEG
71647: PUSH
71648: LD_INT 1
71650: NEG
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: ST_TO_ADDR
// end ; 1 :
71665: GO 77562
71667: LD_INT 1
71669: DOUBLE
71670: EQUAL
71671: IFTRUE 71675
71673: GO 74298
71675: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71676: LD_ADDR_VAR 0 11
71680: PUSH
71681: LD_INT 1
71683: NEG
71684: PUSH
71685: LD_INT 3
71687: NEG
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 0
71695: PUSH
71696: LD_INT 3
71698: NEG
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 1
71706: PUSH
71707: LD_INT 2
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: LIST
71719: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71720: LD_ADDR_VAR 0 12
71724: PUSH
71725: LD_INT 2
71727: PUSH
71728: LD_INT 1
71730: NEG
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 3
71738: PUSH
71739: LD_INT 0
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 3
71748: PUSH
71749: LD_INT 1
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: LIST
71760: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71761: LD_ADDR_VAR 0 13
71765: PUSH
71766: LD_INT 3
71768: PUSH
71769: LD_INT 2
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 3
71778: PUSH
71779: LD_INT 3
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 2
71788: PUSH
71789: LD_INT 3
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: LIST
71800: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71801: LD_ADDR_VAR 0 14
71805: PUSH
71806: LD_INT 1
71808: PUSH
71809: LD_INT 3
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: LD_INT 3
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 1
71828: NEG
71829: PUSH
71830: LD_INT 2
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71842: LD_ADDR_VAR 0 15
71846: PUSH
71847: LD_INT 2
71849: NEG
71850: PUSH
71851: LD_INT 1
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 3
71860: NEG
71861: PUSH
71862: LD_INT 0
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 3
71871: NEG
71872: PUSH
71873: LD_INT 1
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: LIST
71885: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71886: LD_ADDR_VAR 0 16
71890: PUSH
71891: LD_INT 2
71893: NEG
71894: PUSH
71895: LD_INT 3
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 3
71905: NEG
71906: PUSH
71907: LD_INT 2
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: NEG
71918: PUSH
71919: LD_INT 3
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71932: LD_ADDR_VAR 0 17
71936: PUSH
71937: LD_INT 1
71939: NEG
71940: PUSH
71941: LD_INT 3
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 0
71951: PUSH
71952: LD_INT 3
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 1
71962: PUSH
71963: LD_INT 2
71965: NEG
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71976: LD_ADDR_VAR 0 18
71980: PUSH
71981: LD_INT 2
71983: PUSH
71984: LD_INT 1
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: LD_INT 0
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 3
72004: PUSH
72005: LD_INT 1
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72017: LD_ADDR_VAR 0 19
72021: PUSH
72022: LD_INT 3
72024: PUSH
72025: LD_INT 2
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 3
72034: PUSH
72035: LD_INT 3
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 2
72044: PUSH
72045: LD_INT 3
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: LIST
72056: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72057: LD_ADDR_VAR 0 20
72061: PUSH
72062: LD_INT 1
72064: PUSH
72065: LD_INT 3
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: LD_INT 3
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 1
72084: NEG
72085: PUSH
72086: LD_INT 2
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: LIST
72097: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72098: LD_ADDR_VAR 0 21
72102: PUSH
72103: LD_INT 2
72105: NEG
72106: PUSH
72107: LD_INT 1
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 3
72116: NEG
72117: PUSH
72118: LD_INT 0
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 3
72127: NEG
72128: PUSH
72129: LD_INT 1
72131: NEG
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: LIST
72141: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72142: LD_ADDR_VAR 0 22
72146: PUSH
72147: LD_INT 2
72149: NEG
72150: PUSH
72151: LD_INT 3
72153: NEG
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 3
72161: NEG
72162: PUSH
72163: LD_INT 2
72165: NEG
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 3
72173: NEG
72174: PUSH
72175: LD_INT 3
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: LIST
72187: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72188: LD_ADDR_VAR 0 23
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 3
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 1
72206: NEG
72207: PUSH
72208: LD_INT 4
72210: NEG
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 1
72218: PUSH
72219: LD_INT 3
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: LIST
72231: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72232: LD_ADDR_VAR 0 24
72236: PUSH
72237: LD_INT 3
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 3
72249: PUSH
72250: LD_INT 1
72252: NEG
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: LD_INT 1
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: LIST
72272: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72273: LD_ADDR_VAR 0 25
72277: PUSH
72278: LD_INT 3
72280: PUSH
72281: LD_INT 3
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 4
72290: PUSH
72291: LD_INT 3
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 3
72300: PUSH
72301: LD_INT 4
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: LIST
72312: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72313: LD_ADDR_VAR 0 26
72317: PUSH
72318: LD_INT 0
72320: PUSH
72321: LD_INT 3
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 1
72330: PUSH
72331: LD_INT 4
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 1
72340: NEG
72341: PUSH
72342: LD_INT 3
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: LIST
72353: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72354: LD_ADDR_VAR 0 27
72358: PUSH
72359: LD_INT 3
72361: NEG
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 3
72372: NEG
72373: PUSH
72374: LD_INT 1
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 4
72383: NEG
72384: PUSH
72385: LD_INT 1
72387: NEG
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72398: LD_ADDR_VAR 0 28
72402: PUSH
72403: LD_INT 3
72405: NEG
72406: PUSH
72407: LD_INT 3
72409: NEG
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 3
72417: NEG
72418: PUSH
72419: LD_INT 4
72421: NEG
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 4
72429: NEG
72430: PUSH
72431: LD_INT 3
72433: NEG
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72444: LD_ADDR_VAR 0 29
72448: PUSH
72449: LD_INT 1
72451: NEG
72452: PUSH
72453: LD_INT 3
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 0
72463: PUSH
72464: LD_INT 3
72466: NEG
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 1
72474: PUSH
72475: LD_INT 2
72477: NEG
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 1
72485: NEG
72486: PUSH
72487: LD_INT 4
72489: NEG
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 0
72497: PUSH
72498: LD_INT 4
72500: NEG
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 1
72508: PUSH
72509: LD_INT 3
72511: NEG
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 1
72519: NEG
72520: PUSH
72521: LD_INT 5
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 5
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 1
72542: PUSH
72543: LD_INT 4
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 1
72553: NEG
72554: PUSH
72555: LD_INT 6
72557: NEG
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 0
72565: PUSH
72566: LD_INT 6
72568: NEG
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 1
72576: PUSH
72577: LD_INT 5
72579: NEG
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72599: LD_ADDR_VAR 0 30
72603: PUSH
72604: LD_INT 2
72606: PUSH
72607: LD_INT 1
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 3
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 3
72627: PUSH
72628: LD_INT 1
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 3
72637: PUSH
72638: LD_INT 1
72640: NEG
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 4
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 4
72658: PUSH
72659: LD_INT 1
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 4
72668: PUSH
72669: LD_INT 1
72671: NEG
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 5
72679: PUSH
72680: LD_INT 0
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 5
72689: PUSH
72690: LD_INT 1
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 5
72699: PUSH
72700: LD_INT 1
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 6
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 6
72720: PUSH
72721: LD_INT 1
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
72742: LD_ADDR_VAR 0 31
72746: PUSH
72747: LD_INT 3
72749: PUSH
72750: LD_INT 2
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 3
72759: PUSH
72760: LD_INT 3
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 2
72769: PUSH
72770: LD_INT 3
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 4
72779: PUSH
72780: LD_INT 3
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 4
72789: PUSH
72790: LD_INT 4
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 3
72799: PUSH
72800: LD_INT 4
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 5
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 5
72819: PUSH
72820: LD_INT 5
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 4
72829: PUSH
72830: LD_INT 5
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 6
72839: PUSH
72840: LD_INT 5
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 6
72849: PUSH
72850: LD_INT 6
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 5
72859: PUSH
72860: LD_INT 6
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
72881: LD_ADDR_VAR 0 32
72885: PUSH
72886: LD_INT 1
72888: PUSH
72889: LD_INT 3
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 0
72898: PUSH
72899: LD_INT 3
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 1
72908: NEG
72909: PUSH
72910: LD_INT 2
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 1
72919: PUSH
72920: LD_INT 4
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: LD_INT 4
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: PUSH
72941: LD_INT 3
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 1
72950: PUSH
72951: LD_INT 5
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: LD_INT 5
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 1
72970: NEG
72971: PUSH
72972: LD_INT 4
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 1
72981: PUSH
72982: LD_INT 6
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 0
72991: PUSH
72992: LD_INT 6
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 1
73001: NEG
73002: PUSH
73003: LD_INT 5
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73024: LD_ADDR_VAR 0 33
73028: PUSH
73029: LD_INT 2
73031: NEG
73032: PUSH
73033: LD_INT 1
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 3
73042: NEG
73043: PUSH
73044: LD_INT 0
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 3
73053: NEG
73054: PUSH
73055: LD_INT 1
73057: NEG
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 3
73065: NEG
73066: PUSH
73067: LD_INT 1
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 4
73076: NEG
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 4
73087: NEG
73088: PUSH
73089: LD_INT 1
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 4
73099: NEG
73100: PUSH
73101: LD_INT 1
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 5
73110: NEG
73111: PUSH
73112: LD_INT 0
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 5
73121: NEG
73122: PUSH
73123: LD_INT 1
73125: NEG
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 5
73133: NEG
73134: PUSH
73135: LD_INT 1
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 6
73144: NEG
73145: PUSH
73146: LD_INT 0
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 6
73155: NEG
73156: PUSH
73157: LD_INT 1
73159: NEG
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73179: LD_ADDR_VAR 0 34
73183: PUSH
73184: LD_INT 2
73186: NEG
73187: PUSH
73188: LD_INT 3
73190: NEG
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 3
73198: NEG
73199: PUSH
73200: LD_INT 2
73202: NEG
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 3
73210: NEG
73211: PUSH
73212: LD_INT 3
73214: NEG
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PUSH
73220: LD_INT 3
73222: NEG
73223: PUSH
73224: LD_INT 4
73226: NEG
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 4
73234: NEG
73235: PUSH
73236: LD_INT 3
73238: NEG
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 4
73246: NEG
73247: PUSH
73248: LD_INT 4
73250: NEG
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 4
73258: NEG
73259: PUSH
73260: LD_INT 5
73262: NEG
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 5
73270: NEG
73271: PUSH
73272: LD_INT 4
73274: NEG
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 5
73282: NEG
73283: PUSH
73284: LD_INT 5
73286: NEG
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 5
73294: NEG
73295: PUSH
73296: LD_INT 6
73298: NEG
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 6
73306: NEG
73307: PUSH
73308: LD_INT 5
73310: NEG
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 6
73318: NEG
73319: PUSH
73320: LD_INT 6
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73342: LD_ADDR_VAR 0 41
73346: PUSH
73347: LD_INT 0
73349: PUSH
73350: LD_INT 2
73352: NEG
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 1
73360: NEG
73361: PUSH
73362: LD_INT 3
73364: NEG
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 1
73372: PUSH
73373: LD_INT 2
73375: NEG
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: LIST
73385: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73386: LD_ADDR_VAR 0 42
73390: PUSH
73391: LD_INT 2
73393: PUSH
73394: LD_INT 0
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 2
73403: PUSH
73404: LD_INT 1
73406: NEG
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 3
73414: PUSH
73415: LD_INT 1
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: LIST
73426: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73427: LD_ADDR_VAR 0 43
73431: PUSH
73432: LD_INT 2
73434: PUSH
73435: LD_INT 2
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 3
73444: PUSH
73445: LD_INT 2
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 2
73454: PUSH
73455: LD_INT 3
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73467: LD_ADDR_VAR 0 44
73471: PUSH
73472: LD_INT 0
73474: PUSH
73475: LD_INT 2
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 1
73484: PUSH
73485: LD_INT 3
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 1
73494: NEG
73495: PUSH
73496: LD_INT 2
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: LIST
73507: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73508: LD_ADDR_VAR 0 45
73512: PUSH
73513: LD_INT 2
73515: NEG
73516: PUSH
73517: LD_INT 0
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 2
73526: NEG
73527: PUSH
73528: LD_INT 1
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 3
73537: NEG
73538: PUSH
73539: LD_INT 1
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: LIST
73551: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73552: LD_ADDR_VAR 0 46
73556: PUSH
73557: LD_INT 2
73559: NEG
73560: PUSH
73561: LD_INT 2
73563: NEG
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 2
73571: NEG
73572: PUSH
73573: LD_INT 3
73575: NEG
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 3
73583: NEG
73584: PUSH
73585: LD_INT 2
73587: NEG
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: LIST
73597: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73598: LD_ADDR_VAR 0 47
73602: PUSH
73603: LD_INT 2
73605: NEG
73606: PUSH
73607: LD_INT 3
73609: NEG
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 1
73617: NEG
73618: PUSH
73619: LD_INT 3
73621: NEG
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73631: LD_ADDR_VAR 0 48
73635: PUSH
73636: LD_INT 1
73638: PUSH
73639: LD_INT 2
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 2
73649: PUSH
73650: LD_INT 1
73652: NEG
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73662: LD_ADDR_VAR 0 49
73666: PUSH
73667: LD_INT 3
73669: PUSH
73670: LD_INT 1
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 3
73679: PUSH
73680: LD_INT 2
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73691: LD_ADDR_VAR 0 50
73695: PUSH
73696: LD_INT 2
73698: PUSH
73699: LD_INT 3
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 1
73708: PUSH
73709: LD_INT 3
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73720: LD_ADDR_VAR 0 51
73724: PUSH
73725: LD_INT 1
73727: NEG
73728: PUSH
73729: LD_INT 2
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 2
73738: NEG
73739: PUSH
73740: LD_INT 1
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73751: LD_ADDR_VAR 0 52
73755: PUSH
73756: LD_INT 3
73758: NEG
73759: PUSH
73760: LD_INT 1
73762: NEG
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 3
73770: NEG
73771: PUSH
73772: LD_INT 2
73774: NEG
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73784: LD_ADDR_VAR 0 53
73788: PUSH
73789: LD_INT 1
73791: NEG
73792: PUSH
73793: LD_INT 3
73795: NEG
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 0
73803: PUSH
73804: LD_INT 3
73806: NEG
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 1
73814: PUSH
73815: LD_INT 2
73817: NEG
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: LIST
73827: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73828: LD_ADDR_VAR 0 54
73832: PUSH
73833: LD_INT 2
73835: PUSH
73836: LD_INT 1
73838: NEG
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 3
73846: PUSH
73847: LD_INT 0
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 3
73856: PUSH
73857: LD_INT 1
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: LIST
73868: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73869: LD_ADDR_VAR 0 55
73873: PUSH
73874: LD_INT 3
73876: PUSH
73877: LD_INT 2
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 3
73886: PUSH
73887: LD_INT 3
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 2
73896: PUSH
73897: LD_INT 3
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: LIST
73908: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73909: LD_ADDR_VAR 0 56
73913: PUSH
73914: LD_INT 1
73916: PUSH
73917: LD_INT 3
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PUSH
73924: LD_INT 0
73926: PUSH
73927: LD_INT 3
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 1
73936: NEG
73937: PUSH
73938: LD_INT 2
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: LIST
73949: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73950: LD_ADDR_VAR 0 57
73954: PUSH
73955: LD_INT 2
73957: NEG
73958: PUSH
73959: LD_INT 1
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 3
73968: NEG
73969: PUSH
73970: LD_INT 0
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 3
73979: NEG
73980: PUSH
73981: LD_INT 1
73983: NEG
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: LIST
73993: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73994: LD_ADDR_VAR 0 58
73998: PUSH
73999: LD_INT 2
74001: NEG
74002: PUSH
74003: LD_INT 3
74005: NEG
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 3
74013: NEG
74014: PUSH
74015: LD_INT 2
74017: NEG
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 3
74025: NEG
74026: PUSH
74027: LD_INT 3
74029: NEG
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: LIST
74039: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74040: LD_ADDR_VAR 0 59
74044: PUSH
74045: LD_INT 1
74047: NEG
74048: PUSH
74049: LD_INT 2
74051: NEG
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PUSH
74057: LD_INT 0
74059: PUSH
74060: LD_INT 2
74062: NEG
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 1
74070: PUSH
74071: LD_INT 1
74073: NEG
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: LIST
74083: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74084: LD_ADDR_VAR 0 60
74088: PUSH
74089: LD_INT 1
74091: PUSH
74092: LD_INT 1
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 2
74102: PUSH
74103: LD_INT 0
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 2
74112: PUSH
74113: LD_INT 1
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: LIST
74124: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74125: LD_ADDR_VAR 0 61
74129: PUSH
74130: LD_INT 2
74132: PUSH
74133: LD_INT 1
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 2
74142: PUSH
74143: LD_INT 2
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 1
74152: PUSH
74153: LD_INT 2
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: LIST
74164: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74165: LD_ADDR_VAR 0 62
74169: PUSH
74170: LD_INT 1
74172: PUSH
74173: LD_INT 2
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 0
74182: PUSH
74183: LD_INT 2
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 1
74192: NEG
74193: PUSH
74194: LD_INT 1
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: LIST
74205: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74206: LD_ADDR_VAR 0 63
74210: PUSH
74211: LD_INT 1
74213: NEG
74214: PUSH
74215: LD_INT 1
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 2
74224: NEG
74225: PUSH
74226: LD_INT 0
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 2
74235: NEG
74236: PUSH
74237: LD_INT 1
74239: NEG
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74250: LD_ADDR_VAR 0 64
74254: PUSH
74255: LD_INT 1
74257: NEG
74258: PUSH
74259: LD_INT 2
74261: NEG
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 2
74269: NEG
74270: PUSH
74271: LD_INT 1
74273: NEG
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 2
74281: NEG
74282: PUSH
74283: LD_INT 2
74285: NEG
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: LIST
74295: ST_TO_ADDR
// end ; 2 :
74296: GO 77562
74298: LD_INT 2
74300: DOUBLE
74301: EQUAL
74302: IFTRUE 74306
74304: GO 77561
74306: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74307: LD_ADDR_VAR 0 29
74311: PUSH
74312: LD_INT 4
74314: PUSH
74315: LD_INT 0
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: PUSH
74322: LD_INT 4
74324: PUSH
74325: LD_INT 1
74327: NEG
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 5
74335: PUSH
74336: LD_INT 0
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: LD_INT 5
74345: PUSH
74346: LD_INT 1
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 4
74355: PUSH
74356: LD_INT 1
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 3
74365: PUSH
74366: LD_INT 0
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 3
74375: PUSH
74376: LD_INT 1
74378: NEG
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 3
74386: PUSH
74387: LD_INT 2
74389: NEG
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 5
74397: PUSH
74398: LD_INT 2
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 3
74407: PUSH
74408: LD_INT 3
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 3
74417: PUSH
74418: LD_INT 2
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 4
74427: PUSH
74428: LD_INT 3
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 4
74437: PUSH
74438: LD_INT 4
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 3
74447: PUSH
74448: LD_INT 4
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 2
74457: PUSH
74458: LD_INT 3
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 2
74467: PUSH
74468: LD_INT 2
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 4
74477: PUSH
74478: LD_INT 2
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 2
74487: PUSH
74488: LD_INT 4
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 0
74497: PUSH
74498: LD_INT 4
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 0
74507: PUSH
74508: LD_INT 3
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 1
74517: PUSH
74518: LD_INT 4
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 1
74527: PUSH
74528: LD_INT 5
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: LD_INT 5
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 1
74547: NEG
74548: PUSH
74549: LD_INT 4
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 1
74558: NEG
74559: PUSH
74560: LD_INT 3
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 2
74569: PUSH
74570: LD_INT 5
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 2
74579: NEG
74580: PUSH
74581: LD_INT 3
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 3
74590: NEG
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 3
74601: NEG
74602: PUSH
74603: LD_INT 1
74605: NEG
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 2
74613: NEG
74614: PUSH
74615: LD_INT 0
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PUSH
74622: LD_INT 2
74624: NEG
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 3
74635: NEG
74636: PUSH
74637: LD_INT 1
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 4
74646: NEG
74647: PUSH
74648: LD_INT 0
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 4
74657: NEG
74658: PUSH
74659: LD_INT 1
74661: NEG
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: LD_INT 4
74669: NEG
74670: PUSH
74671: LD_INT 2
74673: NEG
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: LD_INT 2
74681: NEG
74682: PUSH
74683: LD_INT 2
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 4
74692: NEG
74693: PUSH
74694: LD_INT 4
74696: NEG
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 4
74704: NEG
74705: PUSH
74706: LD_INT 5
74708: NEG
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 3
74716: NEG
74717: PUSH
74718: LD_INT 4
74720: NEG
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 3
74728: NEG
74729: PUSH
74730: LD_INT 3
74732: NEG
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 4
74740: NEG
74741: PUSH
74742: LD_INT 3
74744: NEG
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 5
74752: NEG
74753: PUSH
74754: LD_INT 4
74756: NEG
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PUSH
74762: LD_INT 5
74764: NEG
74765: PUSH
74766: LD_INT 5
74768: NEG
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 3
74776: NEG
74777: PUSH
74778: LD_INT 5
74780: NEG
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 5
74788: NEG
74789: PUSH
74790: LD_INT 3
74792: NEG
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
74845: LD_ADDR_VAR 0 30
74849: PUSH
74850: LD_INT 4
74852: PUSH
74853: LD_INT 4
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 4
74862: PUSH
74863: LD_INT 3
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 5
74872: PUSH
74873: LD_INT 4
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 5
74882: PUSH
74883: LD_INT 5
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: PUSH
74890: LD_INT 4
74892: PUSH
74893: LD_INT 5
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 3
74902: PUSH
74903: LD_INT 4
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: LD_INT 3
74912: PUSH
74913: LD_INT 3
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PUSH
74920: LD_INT 5
74922: PUSH
74923: LD_INT 3
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: PUSH
74930: LD_INT 3
74932: PUSH
74933: LD_INT 5
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 0
74942: PUSH
74943: LD_INT 3
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 0
74952: PUSH
74953: LD_INT 2
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 1
74962: PUSH
74963: LD_INT 3
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 1
74972: PUSH
74973: LD_INT 4
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 0
74982: PUSH
74983: LD_INT 4
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 1
74992: NEG
74993: PUSH
74994: LD_INT 3
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 1
75003: NEG
75004: PUSH
75005: LD_INT 2
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PUSH
75012: LD_INT 2
75014: PUSH
75015: LD_INT 4
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PUSH
75022: LD_INT 2
75024: NEG
75025: PUSH
75026: LD_INT 2
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: LD_INT 4
75035: NEG
75036: PUSH
75037: LD_INT 0
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: LD_INT 4
75046: NEG
75047: PUSH
75048: LD_INT 1
75050: NEG
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: LD_INT 3
75058: NEG
75059: PUSH
75060: LD_INT 0
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 3
75069: NEG
75070: PUSH
75071: LD_INT 1
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 4
75080: NEG
75081: PUSH
75082: LD_INT 1
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 5
75091: NEG
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: LD_INT 5
75102: NEG
75103: PUSH
75104: LD_INT 1
75106: NEG
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 5
75114: NEG
75115: PUSH
75116: LD_INT 2
75118: NEG
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 3
75126: NEG
75127: PUSH
75128: LD_INT 2
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 3
75137: NEG
75138: PUSH
75139: LD_INT 3
75141: NEG
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 3
75149: NEG
75150: PUSH
75151: LD_INT 4
75153: NEG
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 2
75161: NEG
75162: PUSH
75163: LD_INT 3
75165: NEG
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 2
75173: NEG
75174: PUSH
75175: LD_INT 2
75177: NEG
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 3
75185: NEG
75186: PUSH
75187: LD_INT 2
75189: NEG
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 4
75197: NEG
75198: PUSH
75199: LD_INT 3
75201: NEG
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PUSH
75207: LD_INT 4
75209: NEG
75210: PUSH
75211: LD_INT 4
75213: NEG
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: LD_INT 2
75221: NEG
75222: PUSH
75223: LD_INT 4
75225: NEG
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 4
75233: NEG
75234: PUSH
75235: LD_INT 2
75237: NEG
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 0
75245: PUSH
75246: LD_INT 4
75248: NEG
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: LD_INT 5
75259: NEG
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PUSH
75265: LD_INT 1
75267: PUSH
75268: LD_INT 4
75270: NEG
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: LD_INT 1
75278: PUSH
75279: LD_INT 3
75281: NEG
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PUSH
75287: LD_INT 0
75289: PUSH
75290: LD_INT 3
75292: NEG
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 1
75300: NEG
75301: PUSH
75302: LD_INT 4
75304: NEG
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_INT 1
75312: NEG
75313: PUSH
75314: LD_INT 5
75316: NEG
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 2
75324: PUSH
75325: LD_INT 3
75327: NEG
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: LD_INT 2
75335: NEG
75336: PUSH
75337: LD_INT 5
75339: NEG
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75392: LD_ADDR_VAR 0 31
75396: PUSH
75397: LD_INT 0
75399: PUSH
75400: LD_INT 4
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: PUSH
75407: LD_INT 0
75409: PUSH
75410: LD_INT 3
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: LD_INT 1
75419: PUSH
75420: LD_INT 4
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: LD_INT 1
75429: PUSH
75430: LD_INT 5
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: LD_INT 0
75439: PUSH
75440: LD_INT 5
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PUSH
75447: LD_INT 1
75449: NEG
75450: PUSH
75451: LD_INT 4
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PUSH
75458: LD_INT 1
75460: NEG
75461: PUSH
75462: LD_INT 3
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: PUSH
75469: LD_INT 2
75471: PUSH
75472: LD_INT 5
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: PUSH
75479: LD_INT 2
75481: NEG
75482: PUSH
75483: LD_INT 3
75485: PUSH
75486: EMPTY
75487: LIST
75488: LIST
75489: PUSH
75490: LD_INT 3
75492: NEG
75493: PUSH
75494: LD_INT 0
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: PUSH
75501: LD_INT 3
75503: NEG
75504: PUSH
75505: LD_INT 1
75507: NEG
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: PUSH
75513: LD_INT 2
75515: NEG
75516: PUSH
75517: LD_INT 0
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: LD_INT 2
75526: NEG
75527: PUSH
75528: LD_INT 1
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 3
75537: NEG
75538: PUSH
75539: LD_INT 1
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: PUSH
75546: LD_INT 4
75548: NEG
75549: PUSH
75550: LD_INT 0
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 4
75559: NEG
75560: PUSH
75561: LD_INT 1
75563: NEG
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 4
75571: NEG
75572: PUSH
75573: LD_INT 2
75575: NEG
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: PUSH
75581: LD_INT 2
75583: NEG
75584: PUSH
75585: LD_INT 2
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: PUSH
75592: LD_INT 4
75594: NEG
75595: PUSH
75596: LD_INT 4
75598: NEG
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: PUSH
75604: LD_INT 4
75606: NEG
75607: PUSH
75608: LD_INT 5
75610: NEG
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 3
75618: NEG
75619: PUSH
75620: LD_INT 4
75622: NEG
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 3
75630: NEG
75631: PUSH
75632: LD_INT 3
75634: NEG
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: LD_INT 4
75642: NEG
75643: PUSH
75644: LD_INT 3
75646: NEG
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: LD_INT 5
75654: NEG
75655: PUSH
75656: LD_INT 4
75658: NEG
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PUSH
75664: LD_INT 5
75666: NEG
75667: PUSH
75668: LD_INT 5
75670: NEG
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: LD_INT 3
75678: NEG
75679: PUSH
75680: LD_INT 5
75682: NEG
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 5
75690: NEG
75691: PUSH
75692: LD_INT 3
75694: NEG
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 0
75702: PUSH
75703: LD_INT 3
75705: NEG
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 0
75713: PUSH
75714: LD_INT 4
75716: NEG
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: PUSH
75722: LD_INT 1
75724: PUSH
75725: LD_INT 3
75727: NEG
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: PUSH
75733: LD_INT 1
75735: PUSH
75736: LD_INT 2
75738: NEG
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_INT 0
75746: PUSH
75747: LD_INT 2
75749: NEG
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: LD_INT 1
75757: NEG
75758: PUSH
75759: LD_INT 3
75761: NEG
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 1
75769: NEG
75770: PUSH
75771: LD_INT 4
75773: NEG
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: LD_INT 2
75781: PUSH
75782: LD_INT 2
75784: NEG
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: LD_INT 2
75792: NEG
75793: PUSH
75794: LD_INT 4
75796: NEG
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: LD_INT 4
75804: PUSH
75805: LD_INT 0
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PUSH
75812: LD_INT 4
75814: PUSH
75815: LD_INT 1
75817: NEG
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 5
75825: PUSH
75826: LD_INT 0
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PUSH
75833: LD_INT 5
75835: PUSH
75836: LD_INT 1
75838: PUSH
75839: EMPTY
75840: LIST
75841: LIST
75842: PUSH
75843: LD_INT 4
75845: PUSH
75846: LD_INT 1
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 3
75855: PUSH
75856: LD_INT 0
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: LD_INT 3
75865: PUSH
75866: LD_INT 1
75868: NEG
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 3
75876: PUSH
75877: LD_INT 2
75879: NEG
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 5
75887: PUSH
75888: LD_INT 2
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: EMPTY
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75942: LD_ADDR_VAR 0 32
75946: PUSH
75947: LD_INT 4
75949: NEG
75950: PUSH
75951: LD_INT 0
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: LD_INT 4
75960: NEG
75961: PUSH
75962: LD_INT 1
75964: NEG
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PUSH
75970: LD_INT 3
75972: NEG
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: PUSH
75981: LD_INT 3
75983: NEG
75984: PUSH
75985: LD_INT 1
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PUSH
75992: LD_INT 4
75994: NEG
75995: PUSH
75996: LD_INT 1
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: PUSH
76003: LD_INT 5
76005: NEG
76006: PUSH
76007: LD_INT 0
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: PUSH
76014: LD_INT 5
76016: NEG
76017: PUSH
76018: LD_INT 1
76020: NEG
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 5
76028: NEG
76029: PUSH
76030: LD_INT 2
76032: NEG
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: LD_INT 3
76040: NEG
76041: PUSH
76042: LD_INT 2
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 3
76051: NEG
76052: PUSH
76053: LD_INT 3
76055: NEG
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 3
76063: NEG
76064: PUSH
76065: LD_INT 4
76067: NEG
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 2
76075: NEG
76076: PUSH
76077: LD_INT 3
76079: NEG
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 2
76087: NEG
76088: PUSH
76089: LD_INT 2
76091: NEG
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: PUSH
76097: LD_INT 3
76099: NEG
76100: PUSH
76101: LD_INT 2
76103: NEG
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 4
76111: NEG
76112: PUSH
76113: LD_INT 3
76115: NEG
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 4
76123: NEG
76124: PUSH
76125: LD_INT 4
76127: NEG
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 2
76135: NEG
76136: PUSH
76137: LD_INT 4
76139: NEG
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 4
76147: NEG
76148: PUSH
76149: LD_INT 2
76151: NEG
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 0
76159: PUSH
76160: LD_INT 4
76162: NEG
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 0
76170: PUSH
76171: LD_INT 5
76173: NEG
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 1
76181: PUSH
76182: LD_INT 4
76184: NEG
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PUSH
76190: LD_INT 1
76192: PUSH
76193: LD_INT 3
76195: NEG
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: PUSH
76201: LD_INT 0
76203: PUSH
76204: LD_INT 3
76206: NEG
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: PUSH
76212: LD_INT 1
76214: NEG
76215: PUSH
76216: LD_INT 4
76218: NEG
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: PUSH
76224: LD_INT 1
76226: NEG
76227: PUSH
76228: LD_INT 5
76230: NEG
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PUSH
76236: LD_INT 2
76238: PUSH
76239: LD_INT 3
76241: NEG
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: LD_INT 2
76249: NEG
76250: PUSH
76251: LD_INT 5
76253: NEG
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PUSH
76259: LD_INT 3
76261: PUSH
76262: LD_INT 0
76264: PUSH
76265: EMPTY
76266: LIST
76267: LIST
76268: PUSH
76269: LD_INT 3
76271: PUSH
76272: LD_INT 1
76274: NEG
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: PUSH
76280: LD_INT 4
76282: PUSH
76283: LD_INT 0
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: PUSH
76290: LD_INT 4
76292: PUSH
76293: LD_INT 1
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: PUSH
76300: LD_INT 3
76302: PUSH
76303: LD_INT 1
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: PUSH
76310: LD_INT 2
76312: PUSH
76313: LD_INT 0
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: PUSH
76320: LD_INT 2
76322: PUSH
76323: LD_INT 1
76325: NEG
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 2
76333: PUSH
76334: LD_INT 2
76336: NEG
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: PUSH
76342: LD_INT 4
76344: PUSH
76345: LD_INT 2
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: LD_INT 4
76354: PUSH
76355: LD_INT 4
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PUSH
76362: LD_INT 4
76364: PUSH
76365: LD_INT 3
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PUSH
76372: LD_INT 5
76374: PUSH
76375: LD_INT 4
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: LD_INT 5
76384: PUSH
76385: LD_INT 5
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 4
76394: PUSH
76395: LD_INT 5
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PUSH
76402: LD_INT 3
76404: PUSH
76405: LD_INT 4
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 3
76414: PUSH
76415: LD_INT 3
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PUSH
76422: LD_INT 5
76424: PUSH
76425: LD_INT 3
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PUSH
76432: LD_INT 3
76434: PUSH
76435: LD_INT 5
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76489: LD_ADDR_VAR 0 33
76493: PUSH
76494: LD_INT 4
76496: NEG
76497: PUSH
76498: LD_INT 4
76500: NEG
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 4
76508: NEG
76509: PUSH
76510: LD_INT 5
76512: NEG
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: PUSH
76518: LD_INT 3
76520: NEG
76521: PUSH
76522: LD_INT 4
76524: NEG
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 3
76532: NEG
76533: PUSH
76534: LD_INT 3
76536: NEG
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PUSH
76542: LD_INT 4
76544: NEG
76545: PUSH
76546: LD_INT 3
76548: NEG
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: LD_INT 5
76556: NEG
76557: PUSH
76558: LD_INT 4
76560: NEG
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PUSH
76566: LD_INT 5
76568: NEG
76569: PUSH
76570: LD_INT 5
76572: NEG
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: PUSH
76578: LD_INT 3
76580: NEG
76581: PUSH
76582: LD_INT 5
76584: NEG
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: LD_INT 5
76592: NEG
76593: PUSH
76594: LD_INT 3
76596: NEG
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 0
76604: PUSH
76605: LD_INT 3
76607: NEG
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 0
76615: PUSH
76616: LD_INT 4
76618: NEG
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PUSH
76624: LD_INT 1
76626: PUSH
76627: LD_INT 3
76629: NEG
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 1
76637: PUSH
76638: LD_INT 2
76640: NEG
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 0
76648: PUSH
76649: LD_INT 2
76651: NEG
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 1
76659: NEG
76660: PUSH
76661: LD_INT 3
76663: NEG
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PUSH
76669: LD_INT 1
76671: NEG
76672: PUSH
76673: LD_INT 4
76675: NEG
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: PUSH
76681: LD_INT 2
76683: PUSH
76684: LD_INT 2
76686: NEG
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 2
76694: NEG
76695: PUSH
76696: LD_INT 4
76698: NEG
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PUSH
76704: LD_INT 4
76706: PUSH
76707: LD_INT 0
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PUSH
76714: LD_INT 4
76716: PUSH
76717: LD_INT 1
76719: NEG
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: PUSH
76725: LD_INT 5
76727: PUSH
76728: LD_INT 0
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 5
76737: PUSH
76738: LD_INT 1
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: PUSH
76745: LD_INT 4
76747: PUSH
76748: LD_INT 1
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 3
76757: PUSH
76758: LD_INT 0
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 3
76767: PUSH
76768: LD_INT 1
76770: NEG
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 3
76778: PUSH
76779: LD_INT 2
76781: NEG
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 5
76789: PUSH
76790: LD_INT 2
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: LD_INT 3
76799: PUSH
76800: LD_INT 3
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PUSH
76807: LD_INT 3
76809: PUSH
76810: LD_INT 2
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 4
76819: PUSH
76820: LD_INT 3
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: PUSH
76827: LD_INT 4
76829: PUSH
76830: LD_INT 4
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 3
76839: PUSH
76840: LD_INT 4
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 2
76849: PUSH
76850: LD_INT 3
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 2
76859: PUSH
76860: LD_INT 2
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 4
76869: PUSH
76870: LD_INT 2
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 2
76879: PUSH
76880: LD_INT 4
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: LD_INT 0
76889: PUSH
76890: LD_INT 4
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 0
76899: PUSH
76900: LD_INT 3
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: LD_INT 1
76909: PUSH
76910: LD_INT 4
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 1
76919: PUSH
76920: LD_INT 5
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 0
76929: PUSH
76930: LD_INT 5
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 1
76939: NEG
76940: PUSH
76941: LD_INT 4
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 1
76950: NEG
76951: PUSH
76952: LD_INT 3
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: PUSH
76959: LD_INT 2
76961: PUSH
76962: LD_INT 5
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 2
76971: NEG
76972: PUSH
76973: LD_INT 3
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: LIST
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77027: LD_ADDR_VAR 0 34
77031: PUSH
77032: LD_INT 0
77034: PUSH
77035: LD_INT 4
77037: NEG
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: PUSH
77043: LD_INT 0
77045: PUSH
77046: LD_INT 5
77048: NEG
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: LD_INT 1
77056: PUSH
77057: LD_INT 4
77059: NEG
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 1
77067: PUSH
77068: LD_INT 3
77070: NEG
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PUSH
77076: LD_INT 0
77078: PUSH
77079: LD_INT 3
77081: NEG
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: LD_INT 1
77089: NEG
77090: PUSH
77091: LD_INT 4
77093: NEG
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: LD_INT 1
77101: NEG
77102: PUSH
77103: LD_INT 5
77105: NEG
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: PUSH
77111: LD_INT 2
77113: PUSH
77114: LD_INT 3
77116: NEG
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 2
77124: NEG
77125: PUSH
77126: LD_INT 5
77128: NEG
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PUSH
77134: LD_INT 3
77136: PUSH
77137: LD_INT 0
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: PUSH
77144: LD_INT 3
77146: PUSH
77147: LD_INT 1
77149: NEG
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 4
77157: PUSH
77158: LD_INT 0
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: LD_INT 4
77167: PUSH
77168: LD_INT 1
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 3
77177: PUSH
77178: LD_INT 1
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 2
77187: PUSH
77188: LD_INT 0
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 2
77197: PUSH
77198: LD_INT 1
77200: NEG
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 2
77208: PUSH
77209: LD_INT 2
77211: NEG
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PUSH
77217: LD_INT 4
77219: PUSH
77220: LD_INT 2
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 4
77229: PUSH
77230: LD_INT 4
77232: PUSH
77233: EMPTY
77234: LIST
77235: LIST
77236: PUSH
77237: LD_INT 4
77239: PUSH
77240: LD_INT 3
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PUSH
77247: LD_INT 5
77249: PUSH
77250: LD_INT 4
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PUSH
77257: LD_INT 5
77259: PUSH
77260: LD_INT 5
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 4
77269: PUSH
77270: LD_INT 5
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 3
77279: PUSH
77280: LD_INT 4
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 3
77289: PUSH
77290: LD_INT 3
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: LD_INT 5
77299: PUSH
77300: LD_INT 3
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 3
77309: PUSH
77310: LD_INT 5
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: LD_INT 0
77319: PUSH
77320: LD_INT 3
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: LD_INT 0
77329: PUSH
77330: LD_INT 2
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: PUSH
77337: LD_INT 1
77339: PUSH
77340: LD_INT 3
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 1
77349: PUSH
77350: LD_INT 4
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PUSH
77357: LD_INT 0
77359: PUSH
77360: LD_INT 4
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 1
77369: NEG
77370: PUSH
77371: LD_INT 3
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 1
77380: NEG
77381: PUSH
77382: LD_INT 2
77384: PUSH
77385: EMPTY
77386: LIST
77387: LIST
77388: PUSH
77389: LD_INT 2
77391: PUSH
77392: LD_INT 4
77394: PUSH
77395: EMPTY
77396: LIST
77397: LIST
77398: PUSH
77399: LD_INT 2
77401: NEG
77402: PUSH
77403: LD_INT 2
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: LD_INT 4
77412: NEG
77413: PUSH
77414: LD_INT 0
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: LD_INT 4
77423: NEG
77424: PUSH
77425: LD_INT 1
77427: NEG
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PUSH
77433: LD_INT 3
77435: NEG
77436: PUSH
77437: LD_INT 0
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 3
77446: NEG
77447: PUSH
77448: LD_INT 1
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: LD_INT 4
77457: NEG
77458: PUSH
77459: LD_INT 1
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: PUSH
77466: LD_INT 5
77468: NEG
77469: PUSH
77470: LD_INT 0
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: PUSH
77477: LD_INT 5
77479: NEG
77480: PUSH
77481: LD_INT 1
77483: NEG
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_INT 5
77491: NEG
77492: PUSH
77493: LD_INT 2
77495: NEG
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: PUSH
77501: LD_INT 3
77503: NEG
77504: PUSH
77505: LD_INT 2
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: ST_TO_ADDR
// end ; end ;
77559: GO 77562
77561: POP
// case btype of b_depot , b_warehouse :
77562: LD_VAR 0 1
77566: PUSH
77567: LD_INT 0
77569: DOUBLE
77570: EQUAL
77571: IFTRUE 77581
77573: LD_INT 1
77575: DOUBLE
77576: EQUAL
77577: IFTRUE 77581
77579: GO 77782
77581: POP
// case nation of nation_american :
77582: LD_VAR 0 5
77586: PUSH
77587: LD_INT 1
77589: DOUBLE
77590: EQUAL
77591: IFTRUE 77595
77593: GO 77651
77595: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
77596: LD_ADDR_VAR 0 9
77600: PUSH
77601: LD_VAR 0 11
77605: PUSH
77606: LD_VAR 0 12
77610: PUSH
77611: LD_VAR 0 13
77615: PUSH
77616: LD_VAR 0 14
77620: PUSH
77621: LD_VAR 0 15
77625: PUSH
77626: LD_VAR 0 16
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: LIST
77635: LIST
77636: LIST
77637: LIST
77638: PUSH
77639: LD_VAR 0 4
77643: PUSH
77644: LD_INT 1
77646: PLUS
77647: ARRAY
77648: ST_TO_ADDR
77649: GO 77780
77651: LD_INT 2
77653: DOUBLE
77654: EQUAL
77655: IFTRUE 77659
77657: GO 77715
77659: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
77660: LD_ADDR_VAR 0 9
77664: PUSH
77665: LD_VAR 0 17
77669: PUSH
77670: LD_VAR 0 18
77674: PUSH
77675: LD_VAR 0 19
77679: PUSH
77680: LD_VAR 0 20
77684: PUSH
77685: LD_VAR 0 21
77689: PUSH
77690: LD_VAR 0 22
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: LIST
77702: PUSH
77703: LD_VAR 0 4
77707: PUSH
77708: LD_INT 1
77710: PLUS
77711: ARRAY
77712: ST_TO_ADDR
77713: GO 77780
77715: LD_INT 3
77717: DOUBLE
77718: EQUAL
77719: IFTRUE 77723
77721: GO 77779
77723: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77724: LD_ADDR_VAR 0 9
77728: PUSH
77729: LD_VAR 0 23
77733: PUSH
77734: LD_VAR 0 24
77738: PUSH
77739: LD_VAR 0 25
77743: PUSH
77744: LD_VAR 0 26
77748: PUSH
77749: LD_VAR 0 27
77753: PUSH
77754: LD_VAR 0 28
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: LIST
77763: LIST
77764: LIST
77765: LIST
77766: PUSH
77767: LD_VAR 0 4
77771: PUSH
77772: LD_INT 1
77774: PLUS
77775: ARRAY
77776: ST_TO_ADDR
77777: GO 77780
77779: POP
77780: GO 78329
77782: LD_INT 2
77784: DOUBLE
77785: EQUAL
77786: IFTRUE 77796
77788: LD_INT 3
77790: DOUBLE
77791: EQUAL
77792: IFTRUE 77796
77794: GO 77852
77796: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
77797: LD_ADDR_VAR 0 9
77801: PUSH
77802: LD_VAR 0 29
77806: PUSH
77807: LD_VAR 0 30
77811: PUSH
77812: LD_VAR 0 31
77816: PUSH
77817: LD_VAR 0 32
77821: PUSH
77822: LD_VAR 0 33
77826: PUSH
77827: LD_VAR 0 34
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: PUSH
77840: LD_VAR 0 4
77844: PUSH
77845: LD_INT 1
77847: PLUS
77848: ARRAY
77849: ST_TO_ADDR
77850: GO 78329
77852: LD_INT 16
77854: DOUBLE
77855: EQUAL
77856: IFTRUE 77908
77858: LD_INT 17
77860: DOUBLE
77861: EQUAL
77862: IFTRUE 77908
77864: LD_INT 18
77866: DOUBLE
77867: EQUAL
77868: IFTRUE 77908
77870: LD_INT 19
77872: DOUBLE
77873: EQUAL
77874: IFTRUE 77908
77876: LD_INT 20
77878: DOUBLE
77879: EQUAL
77880: IFTRUE 77908
77882: LD_INT 21
77884: DOUBLE
77885: EQUAL
77886: IFTRUE 77908
77888: LD_INT 23
77890: DOUBLE
77891: EQUAL
77892: IFTRUE 77908
77894: LD_INT 24
77896: DOUBLE
77897: EQUAL
77898: IFTRUE 77908
77900: LD_INT 25
77902: DOUBLE
77903: EQUAL
77904: IFTRUE 77908
77906: GO 77964
77908: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77909: LD_ADDR_VAR 0 9
77913: PUSH
77914: LD_VAR 0 35
77918: PUSH
77919: LD_VAR 0 36
77923: PUSH
77924: LD_VAR 0 37
77928: PUSH
77929: LD_VAR 0 38
77933: PUSH
77934: LD_VAR 0 39
77938: PUSH
77939: LD_VAR 0 40
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: PUSH
77952: LD_VAR 0 4
77956: PUSH
77957: LD_INT 1
77959: PLUS
77960: ARRAY
77961: ST_TO_ADDR
77962: GO 78329
77964: LD_INT 6
77966: DOUBLE
77967: EQUAL
77968: IFTRUE 78020
77970: LD_INT 7
77972: DOUBLE
77973: EQUAL
77974: IFTRUE 78020
77976: LD_INT 8
77978: DOUBLE
77979: EQUAL
77980: IFTRUE 78020
77982: LD_INT 13
77984: DOUBLE
77985: EQUAL
77986: IFTRUE 78020
77988: LD_INT 12
77990: DOUBLE
77991: EQUAL
77992: IFTRUE 78020
77994: LD_INT 15
77996: DOUBLE
77997: EQUAL
77998: IFTRUE 78020
78000: LD_INT 11
78002: DOUBLE
78003: EQUAL
78004: IFTRUE 78020
78006: LD_INT 14
78008: DOUBLE
78009: EQUAL
78010: IFTRUE 78020
78012: LD_INT 10
78014: DOUBLE
78015: EQUAL
78016: IFTRUE 78020
78018: GO 78076
78020: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
78021: LD_ADDR_VAR 0 9
78025: PUSH
78026: LD_VAR 0 41
78030: PUSH
78031: LD_VAR 0 42
78035: PUSH
78036: LD_VAR 0 43
78040: PUSH
78041: LD_VAR 0 44
78045: PUSH
78046: LD_VAR 0 45
78050: PUSH
78051: LD_VAR 0 46
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: PUSH
78064: LD_VAR 0 4
78068: PUSH
78069: LD_INT 1
78071: PLUS
78072: ARRAY
78073: ST_TO_ADDR
78074: GO 78329
78076: LD_INT 36
78078: DOUBLE
78079: EQUAL
78080: IFTRUE 78084
78082: GO 78140
78084: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78085: LD_ADDR_VAR 0 9
78089: PUSH
78090: LD_VAR 0 47
78094: PUSH
78095: LD_VAR 0 48
78099: PUSH
78100: LD_VAR 0 49
78104: PUSH
78105: LD_VAR 0 50
78109: PUSH
78110: LD_VAR 0 51
78114: PUSH
78115: LD_VAR 0 52
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: PUSH
78128: LD_VAR 0 4
78132: PUSH
78133: LD_INT 1
78135: PLUS
78136: ARRAY
78137: ST_TO_ADDR
78138: GO 78329
78140: LD_INT 4
78142: DOUBLE
78143: EQUAL
78144: IFTRUE 78166
78146: LD_INT 5
78148: DOUBLE
78149: EQUAL
78150: IFTRUE 78166
78152: LD_INT 34
78154: DOUBLE
78155: EQUAL
78156: IFTRUE 78166
78158: LD_INT 37
78160: DOUBLE
78161: EQUAL
78162: IFTRUE 78166
78164: GO 78222
78166: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78167: LD_ADDR_VAR 0 9
78171: PUSH
78172: LD_VAR 0 53
78176: PUSH
78177: LD_VAR 0 54
78181: PUSH
78182: LD_VAR 0 55
78186: PUSH
78187: LD_VAR 0 56
78191: PUSH
78192: LD_VAR 0 57
78196: PUSH
78197: LD_VAR 0 58
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: PUSH
78210: LD_VAR 0 4
78214: PUSH
78215: LD_INT 1
78217: PLUS
78218: ARRAY
78219: ST_TO_ADDR
78220: GO 78329
78222: LD_INT 31
78224: DOUBLE
78225: EQUAL
78226: IFTRUE 78272
78228: LD_INT 32
78230: DOUBLE
78231: EQUAL
78232: IFTRUE 78272
78234: LD_INT 33
78236: DOUBLE
78237: EQUAL
78238: IFTRUE 78272
78240: LD_INT 27
78242: DOUBLE
78243: EQUAL
78244: IFTRUE 78272
78246: LD_INT 26
78248: DOUBLE
78249: EQUAL
78250: IFTRUE 78272
78252: LD_INT 28
78254: DOUBLE
78255: EQUAL
78256: IFTRUE 78272
78258: LD_INT 29
78260: DOUBLE
78261: EQUAL
78262: IFTRUE 78272
78264: LD_INT 30
78266: DOUBLE
78267: EQUAL
78268: IFTRUE 78272
78270: GO 78328
78272: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
78273: LD_ADDR_VAR 0 9
78277: PUSH
78278: LD_VAR 0 59
78282: PUSH
78283: LD_VAR 0 60
78287: PUSH
78288: LD_VAR 0 61
78292: PUSH
78293: LD_VAR 0 62
78297: PUSH
78298: LD_VAR 0 63
78302: PUSH
78303: LD_VAR 0 64
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: LIST
78312: LIST
78313: LIST
78314: LIST
78315: PUSH
78316: LD_VAR 0 4
78320: PUSH
78321: LD_INT 1
78323: PLUS
78324: ARRAY
78325: ST_TO_ADDR
78326: GO 78329
78328: POP
// temp_list2 = [ ] ;
78329: LD_ADDR_VAR 0 10
78333: PUSH
78334: EMPTY
78335: ST_TO_ADDR
// for i in temp_list do
78336: LD_ADDR_VAR 0 8
78340: PUSH
78341: LD_VAR 0 9
78345: PUSH
78346: FOR_IN
78347: IFFALSE 78399
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78349: LD_ADDR_VAR 0 10
78353: PUSH
78354: LD_VAR 0 10
78358: PUSH
78359: LD_VAR 0 8
78363: PUSH
78364: LD_INT 1
78366: ARRAY
78367: PUSH
78368: LD_VAR 0 2
78372: PLUS
78373: PUSH
78374: LD_VAR 0 8
78378: PUSH
78379: LD_INT 2
78381: ARRAY
78382: PUSH
78383: LD_VAR 0 3
78387: PLUS
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PUSH
78393: EMPTY
78394: LIST
78395: ADD
78396: ST_TO_ADDR
78397: GO 78346
78399: POP
78400: POP
// result = temp_list2 ;
78401: LD_ADDR_VAR 0 7
78405: PUSH
78406: LD_VAR 0 10
78410: ST_TO_ADDR
// end ;
78411: LD_VAR 0 7
78415: RET
// export function EnemyInRange ( unit , dist ) ; begin
78416: LD_INT 0
78418: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78419: LD_ADDR_VAR 0 3
78423: PUSH
78424: LD_VAR 0 1
78428: PPUSH
78429: CALL_OW 255
78433: PPUSH
78434: LD_VAR 0 1
78438: PPUSH
78439: CALL_OW 250
78443: PPUSH
78444: LD_VAR 0 1
78448: PPUSH
78449: CALL_OW 251
78453: PPUSH
78454: LD_VAR 0 2
78458: PPUSH
78459: CALL 52544 0 4
78463: PUSH
78464: LD_INT 4
78466: ARRAY
78467: ST_TO_ADDR
// end ;
78468: LD_VAR 0 3
78472: RET
// export function PlayerSeeMe ( unit ) ; begin
78473: LD_INT 0
78475: PPUSH
// result := See ( your_side , unit ) ;
78476: LD_ADDR_VAR 0 2
78480: PUSH
78481: LD_OWVAR 2
78485: PPUSH
78486: LD_VAR 0 1
78490: PPUSH
78491: CALL_OW 292
78495: ST_TO_ADDR
// end ;
78496: LD_VAR 0 2
78500: RET
// export function ReverseDir ( unit ) ; begin
78501: LD_INT 0
78503: PPUSH
// if not unit then
78504: LD_VAR 0 1
78508: NOT
78509: IFFALSE 78513
// exit ;
78511: GO 78559
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
78513: LD_ADDR_VAR 0 2
78517: PUSH
78518: LD_INT 3
78520: PUSH
78521: LD_INT 4
78523: PUSH
78524: LD_INT 5
78526: PUSH
78527: LD_INT 0
78529: PUSH
78530: LD_INT 1
78532: PUSH
78533: LD_INT 2
78535: PUSH
78536: EMPTY
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: PUSH
78544: LD_VAR 0 1
78548: PPUSH
78549: CALL_OW 254
78553: PUSH
78554: LD_INT 1
78556: PLUS
78557: ARRAY
78558: ST_TO_ADDR
// end ;
78559: LD_VAR 0 2
78563: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78564: LD_INT 0
78566: PPUSH
78567: PPUSH
78568: PPUSH
78569: PPUSH
78570: PPUSH
// if not hexes then
78571: LD_VAR 0 2
78575: NOT
78576: IFFALSE 78580
// exit ;
78578: GO 78728
// dist := 9999 ;
78580: LD_ADDR_VAR 0 5
78584: PUSH
78585: LD_INT 9999
78587: ST_TO_ADDR
// for i = 1 to hexes do
78588: LD_ADDR_VAR 0 4
78592: PUSH
78593: DOUBLE
78594: LD_INT 1
78596: DEC
78597: ST_TO_ADDR
78598: LD_VAR 0 2
78602: PUSH
78603: FOR_TO
78604: IFFALSE 78716
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78606: LD_VAR 0 1
78610: PPUSH
78611: LD_VAR 0 2
78615: PUSH
78616: LD_VAR 0 4
78620: ARRAY
78621: PUSH
78622: LD_INT 1
78624: ARRAY
78625: PPUSH
78626: LD_VAR 0 2
78630: PUSH
78631: LD_VAR 0 4
78635: ARRAY
78636: PUSH
78637: LD_INT 2
78639: ARRAY
78640: PPUSH
78641: CALL_OW 297
78645: PUSH
78646: LD_VAR 0 5
78650: LESS
78651: IFFALSE 78714
// begin hex := hexes [ i ] ;
78653: LD_ADDR_VAR 0 7
78657: PUSH
78658: LD_VAR 0 2
78662: PUSH
78663: LD_VAR 0 4
78667: ARRAY
78668: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78669: LD_ADDR_VAR 0 5
78673: PUSH
78674: LD_VAR 0 1
78678: PPUSH
78679: LD_VAR 0 2
78683: PUSH
78684: LD_VAR 0 4
78688: ARRAY
78689: PUSH
78690: LD_INT 1
78692: ARRAY
78693: PPUSH
78694: LD_VAR 0 2
78698: PUSH
78699: LD_VAR 0 4
78703: ARRAY
78704: PUSH
78705: LD_INT 2
78707: ARRAY
78708: PPUSH
78709: CALL_OW 297
78713: ST_TO_ADDR
// end ; end ;
78714: GO 78603
78716: POP
78717: POP
// result := hex ;
78718: LD_ADDR_VAR 0 3
78722: PUSH
78723: LD_VAR 0 7
78727: ST_TO_ADDR
// end ;
78728: LD_VAR 0 3
78732: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78733: LD_INT 0
78735: PPUSH
78736: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78737: LD_VAR 0 1
78741: NOT
78742: PUSH
78743: LD_VAR 0 1
78747: PUSH
78748: LD_INT 21
78750: PUSH
78751: LD_INT 2
78753: PUSH
78754: EMPTY
78755: LIST
78756: LIST
78757: PUSH
78758: LD_INT 23
78760: PUSH
78761: LD_INT 2
78763: PUSH
78764: EMPTY
78765: LIST
78766: LIST
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PPUSH
78772: CALL_OW 69
78776: IN
78777: NOT
78778: OR
78779: IFFALSE 78783
// exit ;
78781: GO 78830
// for i = 1 to 3 do
78783: LD_ADDR_VAR 0 3
78787: PUSH
78788: DOUBLE
78789: LD_INT 1
78791: DEC
78792: ST_TO_ADDR
78793: LD_INT 3
78795: PUSH
78796: FOR_TO
78797: IFFALSE 78828
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
78799: LD_VAR 0 1
78803: PPUSH
78804: CALL_OW 250
78808: PPUSH
78809: LD_VAR 0 1
78813: PPUSH
78814: CALL_OW 251
78818: PPUSH
78819: LD_INT 1
78821: PPUSH
78822: CALL_OW 453
78826: GO 78796
78828: POP
78829: POP
// end ;
78830: LD_VAR 0 2
78834: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
78835: LD_INT 0
78837: PPUSH
78838: PPUSH
78839: PPUSH
78840: PPUSH
78841: PPUSH
78842: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
78843: LD_VAR 0 1
78847: NOT
78848: PUSH
78849: LD_VAR 0 2
78853: NOT
78854: OR
78855: PUSH
78856: LD_VAR 0 1
78860: PPUSH
78861: CALL_OW 314
78865: OR
78866: IFFALSE 78870
// exit ;
78868: GO 79311
// x := GetX ( enemy_unit ) ;
78870: LD_ADDR_VAR 0 7
78874: PUSH
78875: LD_VAR 0 2
78879: PPUSH
78880: CALL_OW 250
78884: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
78885: LD_ADDR_VAR 0 8
78889: PUSH
78890: LD_VAR 0 2
78894: PPUSH
78895: CALL_OW 251
78899: ST_TO_ADDR
// if not x or not y then
78900: LD_VAR 0 7
78904: NOT
78905: PUSH
78906: LD_VAR 0 8
78910: NOT
78911: OR
78912: IFFALSE 78916
// exit ;
78914: GO 79311
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78916: LD_ADDR_VAR 0 6
78920: PUSH
78921: LD_VAR 0 7
78925: PPUSH
78926: LD_INT 0
78928: PPUSH
78929: LD_INT 4
78931: PPUSH
78932: CALL_OW 272
78936: PUSH
78937: LD_VAR 0 8
78941: PPUSH
78942: LD_INT 0
78944: PPUSH
78945: LD_INT 4
78947: PPUSH
78948: CALL_OW 273
78952: PUSH
78953: EMPTY
78954: LIST
78955: LIST
78956: PUSH
78957: LD_VAR 0 7
78961: PPUSH
78962: LD_INT 1
78964: PPUSH
78965: LD_INT 4
78967: PPUSH
78968: CALL_OW 272
78972: PUSH
78973: LD_VAR 0 8
78977: PPUSH
78978: LD_INT 1
78980: PPUSH
78981: LD_INT 4
78983: PPUSH
78984: CALL_OW 273
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: LD_VAR 0 7
78997: PPUSH
78998: LD_INT 2
79000: PPUSH
79001: LD_INT 4
79003: PPUSH
79004: CALL_OW 272
79008: PUSH
79009: LD_VAR 0 8
79013: PPUSH
79014: LD_INT 2
79016: PPUSH
79017: LD_INT 4
79019: PPUSH
79020: CALL_OW 273
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: LD_VAR 0 7
79033: PPUSH
79034: LD_INT 3
79036: PPUSH
79037: LD_INT 4
79039: PPUSH
79040: CALL_OW 272
79044: PUSH
79045: LD_VAR 0 8
79049: PPUSH
79050: LD_INT 3
79052: PPUSH
79053: LD_INT 4
79055: PPUSH
79056: CALL_OW 273
79060: PUSH
79061: EMPTY
79062: LIST
79063: LIST
79064: PUSH
79065: LD_VAR 0 7
79069: PPUSH
79070: LD_INT 4
79072: PPUSH
79073: LD_INT 4
79075: PPUSH
79076: CALL_OW 272
79080: PUSH
79081: LD_VAR 0 8
79085: PPUSH
79086: LD_INT 4
79088: PPUSH
79089: LD_INT 4
79091: PPUSH
79092: CALL_OW 273
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PUSH
79101: LD_VAR 0 7
79105: PPUSH
79106: LD_INT 5
79108: PPUSH
79109: LD_INT 4
79111: PPUSH
79112: CALL_OW 272
79116: PUSH
79117: LD_VAR 0 8
79121: PPUSH
79122: LD_INT 5
79124: PPUSH
79125: LD_INT 4
79127: PPUSH
79128: CALL_OW 273
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: LIST
79141: LIST
79142: LIST
79143: LIST
79144: ST_TO_ADDR
// for i = tmp downto 1 do
79145: LD_ADDR_VAR 0 4
79149: PUSH
79150: DOUBLE
79151: LD_VAR 0 6
79155: INC
79156: ST_TO_ADDR
79157: LD_INT 1
79159: PUSH
79160: FOR_DOWNTO
79161: IFFALSE 79262
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79163: LD_VAR 0 6
79167: PUSH
79168: LD_VAR 0 4
79172: ARRAY
79173: PUSH
79174: LD_INT 1
79176: ARRAY
79177: PPUSH
79178: LD_VAR 0 6
79182: PUSH
79183: LD_VAR 0 4
79187: ARRAY
79188: PUSH
79189: LD_INT 2
79191: ARRAY
79192: PPUSH
79193: CALL_OW 488
79197: NOT
79198: PUSH
79199: LD_VAR 0 6
79203: PUSH
79204: LD_VAR 0 4
79208: ARRAY
79209: PUSH
79210: LD_INT 1
79212: ARRAY
79213: PPUSH
79214: LD_VAR 0 6
79218: PUSH
79219: LD_VAR 0 4
79223: ARRAY
79224: PUSH
79225: LD_INT 2
79227: ARRAY
79228: PPUSH
79229: CALL_OW 428
79233: PUSH
79234: LD_INT 0
79236: NONEQUAL
79237: OR
79238: IFFALSE 79260
// tmp := Delete ( tmp , i ) ;
79240: LD_ADDR_VAR 0 6
79244: PUSH
79245: LD_VAR 0 6
79249: PPUSH
79250: LD_VAR 0 4
79254: PPUSH
79255: CALL_OW 3
79259: ST_TO_ADDR
79260: GO 79160
79262: POP
79263: POP
// j := GetClosestHex ( unit , tmp ) ;
79264: LD_ADDR_VAR 0 5
79268: PUSH
79269: LD_VAR 0 1
79273: PPUSH
79274: LD_VAR 0 6
79278: PPUSH
79279: CALL 78564 0 2
79283: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79284: LD_VAR 0 1
79288: PPUSH
79289: LD_VAR 0 5
79293: PUSH
79294: LD_INT 1
79296: ARRAY
79297: PPUSH
79298: LD_VAR 0 5
79302: PUSH
79303: LD_INT 2
79305: ARRAY
79306: PPUSH
79307: CALL_OW 111
// end ;
79311: LD_VAR 0 3
79315: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79316: LD_INT 0
79318: PPUSH
79319: PPUSH
79320: PPUSH
// uc_side = 0 ;
79321: LD_ADDR_OWVAR 20
79325: PUSH
79326: LD_INT 0
79328: ST_TO_ADDR
// uc_nation = 0 ;
79329: LD_ADDR_OWVAR 21
79333: PUSH
79334: LD_INT 0
79336: ST_TO_ADDR
// InitHc ;
79337: CALL_OW 19
// InitVc ;
79341: CALL_OW 20
// if mastodonts then
79345: LD_VAR 0 6
79349: IFFALSE 79416
// for i = 1 to mastodonts do
79351: LD_ADDR_VAR 0 11
79355: PUSH
79356: DOUBLE
79357: LD_INT 1
79359: DEC
79360: ST_TO_ADDR
79361: LD_VAR 0 6
79365: PUSH
79366: FOR_TO
79367: IFFALSE 79414
// begin vc_chassis := 31 ;
79369: LD_ADDR_OWVAR 37
79373: PUSH
79374: LD_INT 31
79376: ST_TO_ADDR
// vc_control := control_rider ;
79377: LD_ADDR_OWVAR 38
79381: PUSH
79382: LD_INT 4
79384: ST_TO_ADDR
// animal := CreateVehicle ;
79385: LD_ADDR_VAR 0 12
79389: PUSH
79390: CALL_OW 45
79394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79395: LD_VAR 0 12
79399: PPUSH
79400: LD_VAR 0 8
79404: PPUSH
79405: LD_INT 0
79407: PPUSH
79408: CALL 86122 0 3
// end ;
79412: GO 79366
79414: POP
79415: POP
// if horses then
79416: LD_VAR 0 5
79420: IFFALSE 79487
// for i = 1 to horses do
79422: LD_ADDR_VAR 0 11
79426: PUSH
79427: DOUBLE
79428: LD_INT 1
79430: DEC
79431: ST_TO_ADDR
79432: LD_VAR 0 5
79436: PUSH
79437: FOR_TO
79438: IFFALSE 79485
// begin hc_class := 21 ;
79440: LD_ADDR_OWVAR 28
79444: PUSH
79445: LD_INT 21
79447: ST_TO_ADDR
// hc_gallery :=  ;
79448: LD_ADDR_OWVAR 33
79452: PUSH
79453: LD_STRING 
79455: ST_TO_ADDR
// animal := CreateHuman ;
79456: LD_ADDR_VAR 0 12
79460: PUSH
79461: CALL_OW 44
79465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79466: LD_VAR 0 12
79470: PPUSH
79471: LD_VAR 0 8
79475: PPUSH
79476: LD_INT 0
79478: PPUSH
79479: CALL 86122 0 3
// end ;
79483: GO 79437
79485: POP
79486: POP
// if birds then
79487: LD_VAR 0 1
79491: IFFALSE 79558
// for i = 1 to birds do
79493: LD_ADDR_VAR 0 11
79497: PUSH
79498: DOUBLE
79499: LD_INT 1
79501: DEC
79502: ST_TO_ADDR
79503: LD_VAR 0 1
79507: PUSH
79508: FOR_TO
79509: IFFALSE 79556
// begin hc_class = 18 ;
79511: LD_ADDR_OWVAR 28
79515: PUSH
79516: LD_INT 18
79518: ST_TO_ADDR
// hc_gallery =  ;
79519: LD_ADDR_OWVAR 33
79523: PUSH
79524: LD_STRING 
79526: ST_TO_ADDR
// animal := CreateHuman ;
79527: LD_ADDR_VAR 0 12
79531: PUSH
79532: CALL_OW 44
79536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79537: LD_VAR 0 12
79541: PPUSH
79542: LD_VAR 0 8
79546: PPUSH
79547: LD_INT 0
79549: PPUSH
79550: CALL 86122 0 3
// end ;
79554: GO 79508
79556: POP
79557: POP
// if tigers then
79558: LD_VAR 0 2
79562: IFFALSE 79646
// for i = 1 to tigers do
79564: LD_ADDR_VAR 0 11
79568: PUSH
79569: DOUBLE
79570: LD_INT 1
79572: DEC
79573: ST_TO_ADDR
79574: LD_VAR 0 2
79578: PUSH
79579: FOR_TO
79580: IFFALSE 79644
// begin hc_class = class_tiger ;
79582: LD_ADDR_OWVAR 28
79586: PUSH
79587: LD_INT 14
79589: ST_TO_ADDR
// hc_gallery =  ;
79590: LD_ADDR_OWVAR 33
79594: PUSH
79595: LD_STRING 
79597: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79598: LD_ADDR_OWVAR 35
79602: PUSH
79603: LD_INT 7
79605: NEG
79606: PPUSH
79607: LD_INT 7
79609: PPUSH
79610: CALL_OW 12
79614: ST_TO_ADDR
// animal := CreateHuman ;
79615: LD_ADDR_VAR 0 12
79619: PUSH
79620: CALL_OW 44
79624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79625: LD_VAR 0 12
79629: PPUSH
79630: LD_VAR 0 8
79634: PPUSH
79635: LD_INT 0
79637: PPUSH
79638: CALL 86122 0 3
// end ;
79642: GO 79579
79644: POP
79645: POP
// if apemans then
79646: LD_VAR 0 3
79650: IFFALSE 79773
// for i = 1 to apemans do
79652: LD_ADDR_VAR 0 11
79656: PUSH
79657: DOUBLE
79658: LD_INT 1
79660: DEC
79661: ST_TO_ADDR
79662: LD_VAR 0 3
79666: PUSH
79667: FOR_TO
79668: IFFALSE 79771
// begin hc_class = class_apeman ;
79670: LD_ADDR_OWVAR 28
79674: PUSH
79675: LD_INT 12
79677: ST_TO_ADDR
// hc_gallery =  ;
79678: LD_ADDR_OWVAR 33
79682: PUSH
79683: LD_STRING 
79685: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
79686: LD_ADDR_OWVAR 35
79690: PUSH
79691: LD_INT 5
79693: NEG
79694: PPUSH
79695: LD_INT 5
79697: PPUSH
79698: CALL_OW 12
79702: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79703: LD_ADDR_OWVAR 31
79707: PUSH
79708: LD_INT 1
79710: PPUSH
79711: LD_INT 3
79713: PPUSH
79714: CALL_OW 12
79718: PUSH
79719: LD_INT 1
79721: PPUSH
79722: LD_INT 3
79724: PPUSH
79725: CALL_OW 12
79729: PUSH
79730: LD_INT 0
79732: PUSH
79733: LD_INT 0
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: LIST
79740: LIST
79741: ST_TO_ADDR
// animal := CreateHuman ;
79742: LD_ADDR_VAR 0 12
79746: PUSH
79747: CALL_OW 44
79751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79752: LD_VAR 0 12
79756: PPUSH
79757: LD_VAR 0 8
79761: PPUSH
79762: LD_INT 0
79764: PPUSH
79765: CALL 86122 0 3
// end ;
79769: GO 79667
79771: POP
79772: POP
// if enchidnas then
79773: LD_VAR 0 4
79777: IFFALSE 79844
// for i = 1 to enchidnas do
79779: LD_ADDR_VAR 0 11
79783: PUSH
79784: DOUBLE
79785: LD_INT 1
79787: DEC
79788: ST_TO_ADDR
79789: LD_VAR 0 4
79793: PUSH
79794: FOR_TO
79795: IFFALSE 79842
// begin hc_class = 13 ;
79797: LD_ADDR_OWVAR 28
79801: PUSH
79802: LD_INT 13
79804: ST_TO_ADDR
// hc_gallery =  ;
79805: LD_ADDR_OWVAR 33
79809: PUSH
79810: LD_STRING 
79812: ST_TO_ADDR
// animal := CreateHuman ;
79813: LD_ADDR_VAR 0 12
79817: PUSH
79818: CALL_OW 44
79822: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79823: LD_VAR 0 12
79827: PPUSH
79828: LD_VAR 0 8
79832: PPUSH
79833: LD_INT 0
79835: PPUSH
79836: CALL 86122 0 3
// end ;
79840: GO 79794
79842: POP
79843: POP
// if fishes then
79844: LD_VAR 0 7
79848: IFFALSE 79915
// for i = 1 to fishes do
79850: LD_ADDR_VAR 0 11
79854: PUSH
79855: DOUBLE
79856: LD_INT 1
79858: DEC
79859: ST_TO_ADDR
79860: LD_VAR 0 7
79864: PUSH
79865: FOR_TO
79866: IFFALSE 79913
// begin hc_class = 20 ;
79868: LD_ADDR_OWVAR 28
79872: PUSH
79873: LD_INT 20
79875: ST_TO_ADDR
// hc_gallery =  ;
79876: LD_ADDR_OWVAR 33
79880: PUSH
79881: LD_STRING 
79883: ST_TO_ADDR
// animal := CreateHuman ;
79884: LD_ADDR_VAR 0 12
79888: PUSH
79889: CALL_OW 44
79893: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
79894: LD_VAR 0 12
79898: PPUSH
79899: LD_VAR 0 9
79903: PPUSH
79904: LD_INT 0
79906: PPUSH
79907: CALL 86122 0 3
// end ;
79911: GO 79865
79913: POP
79914: POP
// end ;
79915: LD_VAR 0 10
79919: RET
// export function WantHeal ( sci , unit ) ; begin
79920: LD_INT 0
79922: PPUSH
// if GetTaskList ( sci ) > 0 then
79923: LD_VAR 0 1
79927: PPUSH
79928: CALL_OW 437
79932: PUSH
79933: LD_INT 0
79935: GREATER
79936: IFFALSE 80006
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
79938: LD_VAR 0 1
79942: PPUSH
79943: CALL_OW 437
79947: PUSH
79948: LD_INT 1
79950: ARRAY
79951: PUSH
79952: LD_INT 1
79954: ARRAY
79955: PUSH
79956: LD_STRING l
79958: EQUAL
79959: PUSH
79960: LD_VAR 0 1
79964: PPUSH
79965: CALL_OW 437
79969: PUSH
79970: LD_INT 1
79972: ARRAY
79973: PUSH
79974: LD_INT 4
79976: ARRAY
79977: PUSH
79978: LD_VAR 0 2
79982: EQUAL
79983: AND
79984: IFFALSE 79996
// result := true else
79986: LD_ADDR_VAR 0 3
79990: PUSH
79991: LD_INT 1
79993: ST_TO_ADDR
79994: GO 80004
// result := false ;
79996: LD_ADDR_VAR 0 3
80000: PUSH
80001: LD_INT 0
80003: ST_TO_ADDR
// end else
80004: GO 80014
// result := false ;
80006: LD_ADDR_VAR 0 3
80010: PUSH
80011: LD_INT 0
80013: ST_TO_ADDR
// end ;
80014: LD_VAR 0 3
80018: RET
// export function HealTarget ( sci ) ; begin
80019: LD_INT 0
80021: PPUSH
// if not sci then
80022: LD_VAR 0 1
80026: NOT
80027: IFFALSE 80031
// exit ;
80029: GO 80096
// result := 0 ;
80031: LD_ADDR_VAR 0 2
80035: PUSH
80036: LD_INT 0
80038: ST_TO_ADDR
// if GetTaskList ( sci ) then
80039: LD_VAR 0 1
80043: PPUSH
80044: CALL_OW 437
80048: IFFALSE 80096
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80050: LD_VAR 0 1
80054: PPUSH
80055: CALL_OW 437
80059: PUSH
80060: LD_INT 1
80062: ARRAY
80063: PUSH
80064: LD_INT 1
80066: ARRAY
80067: PUSH
80068: LD_STRING l
80070: EQUAL
80071: IFFALSE 80096
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80073: LD_ADDR_VAR 0 2
80077: PUSH
80078: LD_VAR 0 1
80082: PPUSH
80083: CALL_OW 437
80087: PUSH
80088: LD_INT 1
80090: ARRAY
80091: PUSH
80092: LD_INT 4
80094: ARRAY
80095: ST_TO_ADDR
// end ;
80096: LD_VAR 0 2
80100: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
80101: LD_INT 0
80103: PPUSH
80104: PPUSH
80105: PPUSH
80106: PPUSH
80107: PPUSH
80108: PPUSH
80109: PPUSH
80110: PPUSH
80111: PPUSH
80112: PPUSH
80113: PPUSH
80114: PPUSH
80115: PPUSH
80116: PPUSH
80117: PPUSH
80118: PPUSH
80119: PPUSH
80120: PPUSH
80121: PPUSH
80122: PPUSH
80123: PPUSH
80124: PPUSH
80125: PPUSH
80126: PPUSH
80127: PPUSH
80128: PPUSH
80129: PPUSH
80130: PPUSH
80131: PPUSH
80132: PPUSH
80133: PPUSH
80134: PPUSH
80135: PPUSH
// if not list then
80136: LD_VAR 0 1
80140: NOT
80141: IFFALSE 80145
// exit ;
80143: GO 84733
// base := list [ 1 ] ;
80145: LD_ADDR_VAR 0 3
80149: PUSH
80150: LD_VAR 0 1
80154: PUSH
80155: LD_INT 1
80157: ARRAY
80158: ST_TO_ADDR
// group := list [ 2 ] ;
80159: LD_ADDR_VAR 0 4
80163: PUSH
80164: LD_VAR 0 1
80168: PUSH
80169: LD_INT 2
80171: ARRAY
80172: ST_TO_ADDR
// path := list [ 3 ] ;
80173: LD_ADDR_VAR 0 5
80177: PUSH
80178: LD_VAR 0 1
80182: PUSH
80183: LD_INT 3
80185: ARRAY
80186: ST_TO_ADDR
// flags := list [ 4 ] ;
80187: LD_ADDR_VAR 0 6
80191: PUSH
80192: LD_VAR 0 1
80196: PUSH
80197: LD_INT 4
80199: ARRAY
80200: ST_TO_ADDR
// mined := [ ] ;
80201: LD_ADDR_VAR 0 27
80205: PUSH
80206: EMPTY
80207: ST_TO_ADDR
// bombed := [ ] ;
80208: LD_ADDR_VAR 0 28
80212: PUSH
80213: EMPTY
80214: ST_TO_ADDR
// healers := [ ] ;
80215: LD_ADDR_VAR 0 31
80219: PUSH
80220: EMPTY
80221: ST_TO_ADDR
// to_heal := [ ] ;
80222: LD_ADDR_VAR 0 30
80226: PUSH
80227: EMPTY
80228: ST_TO_ADDR
// repairs := [ ] ;
80229: LD_ADDR_VAR 0 33
80233: PUSH
80234: EMPTY
80235: ST_TO_ADDR
// to_repair := [ ] ;
80236: LD_ADDR_VAR 0 32
80240: PUSH
80241: EMPTY
80242: ST_TO_ADDR
// if not group or not path then
80243: LD_VAR 0 4
80247: NOT
80248: PUSH
80249: LD_VAR 0 5
80253: NOT
80254: OR
80255: IFFALSE 80259
// exit ;
80257: GO 84733
// if flags then
80259: LD_VAR 0 6
80263: IFFALSE 80407
// begin f_ignore_area := flags [ 1 ] ;
80265: LD_ADDR_VAR 0 17
80269: PUSH
80270: LD_VAR 0 6
80274: PUSH
80275: LD_INT 1
80277: ARRAY
80278: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
80279: LD_ADDR_VAR 0 18
80283: PUSH
80284: LD_VAR 0 6
80288: PUSH
80289: LD_INT 2
80291: ARRAY
80292: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
80293: LD_ADDR_VAR 0 19
80297: PUSH
80298: LD_VAR 0 6
80302: PUSH
80303: LD_INT 3
80305: ARRAY
80306: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
80307: LD_ADDR_VAR 0 20
80311: PUSH
80312: LD_VAR 0 6
80316: PUSH
80317: LD_INT 4
80319: ARRAY
80320: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
80321: LD_ADDR_VAR 0 21
80325: PUSH
80326: LD_VAR 0 6
80330: PUSH
80331: LD_INT 5
80333: ARRAY
80334: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
80335: LD_ADDR_VAR 0 22
80339: PUSH
80340: LD_VAR 0 6
80344: PUSH
80345: LD_INT 6
80347: ARRAY
80348: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
80349: LD_ADDR_VAR 0 23
80353: PUSH
80354: LD_VAR 0 6
80358: PUSH
80359: LD_INT 7
80361: ARRAY
80362: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
80363: LD_ADDR_VAR 0 24
80367: PUSH
80368: LD_VAR 0 6
80372: PUSH
80373: LD_INT 8
80375: ARRAY
80376: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
80377: LD_ADDR_VAR 0 25
80381: PUSH
80382: LD_VAR 0 6
80386: PUSH
80387: LD_INT 9
80389: ARRAY
80390: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
80391: LD_ADDR_VAR 0 26
80395: PUSH
80396: LD_VAR 0 6
80400: PUSH
80401: LD_INT 10
80403: ARRAY
80404: ST_TO_ADDR
// end else
80405: GO 80487
// begin f_ignore_area := false ;
80407: LD_ADDR_VAR 0 17
80411: PUSH
80412: LD_INT 0
80414: ST_TO_ADDR
// f_capture := false ;
80415: LD_ADDR_VAR 0 18
80419: PUSH
80420: LD_INT 0
80422: ST_TO_ADDR
// f_ignore_civ := false ;
80423: LD_ADDR_VAR 0 19
80427: PUSH
80428: LD_INT 0
80430: ST_TO_ADDR
// f_murder := false ;
80431: LD_ADDR_VAR 0 20
80435: PUSH
80436: LD_INT 0
80438: ST_TO_ADDR
// f_mines := false ;
80439: LD_ADDR_VAR 0 21
80443: PUSH
80444: LD_INT 0
80446: ST_TO_ADDR
// f_repair := false ;
80447: LD_ADDR_VAR 0 22
80451: PUSH
80452: LD_INT 0
80454: ST_TO_ADDR
// f_heal := false ;
80455: LD_ADDR_VAR 0 23
80459: PUSH
80460: LD_INT 0
80462: ST_TO_ADDR
// f_spacetime := false ;
80463: LD_ADDR_VAR 0 24
80467: PUSH
80468: LD_INT 0
80470: ST_TO_ADDR
// f_attack_depot := false ;
80471: LD_ADDR_VAR 0 25
80475: PUSH
80476: LD_INT 0
80478: ST_TO_ADDR
// f_crawl := false ;
80479: LD_ADDR_VAR 0 26
80483: PUSH
80484: LD_INT 0
80486: ST_TO_ADDR
// end ; if f_heal then
80487: LD_VAR 0 23
80491: IFFALSE 80518
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
80493: LD_ADDR_VAR 0 31
80497: PUSH
80498: LD_VAR 0 4
80502: PPUSH
80503: LD_INT 25
80505: PUSH
80506: LD_INT 4
80508: PUSH
80509: EMPTY
80510: LIST
80511: LIST
80512: PPUSH
80513: CALL_OW 72
80517: ST_TO_ADDR
// if f_repair then
80518: LD_VAR 0 22
80522: IFFALSE 80549
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
80524: LD_ADDR_VAR 0 33
80528: PUSH
80529: LD_VAR 0 4
80533: PPUSH
80534: LD_INT 25
80536: PUSH
80537: LD_INT 3
80539: PUSH
80540: EMPTY
80541: LIST
80542: LIST
80543: PPUSH
80544: CALL_OW 72
80548: ST_TO_ADDR
// units_path := [ ] ;
80549: LD_ADDR_VAR 0 16
80553: PUSH
80554: EMPTY
80555: ST_TO_ADDR
// for i = 1 to group do
80556: LD_ADDR_VAR 0 7
80560: PUSH
80561: DOUBLE
80562: LD_INT 1
80564: DEC
80565: ST_TO_ADDR
80566: LD_VAR 0 4
80570: PUSH
80571: FOR_TO
80572: IFFALSE 80601
// units_path := Replace ( units_path , i , path ) ;
80574: LD_ADDR_VAR 0 16
80578: PUSH
80579: LD_VAR 0 16
80583: PPUSH
80584: LD_VAR 0 7
80588: PPUSH
80589: LD_VAR 0 5
80593: PPUSH
80594: CALL_OW 1
80598: ST_TO_ADDR
80599: GO 80571
80601: POP
80602: POP
// repeat for i = group downto 1 do
80603: LD_ADDR_VAR 0 7
80607: PUSH
80608: DOUBLE
80609: LD_VAR 0 4
80613: INC
80614: ST_TO_ADDR
80615: LD_INT 1
80617: PUSH
80618: FOR_DOWNTO
80619: IFFALSE 84715
// begin wait ( 5 ) ;
80621: LD_INT 5
80623: PPUSH
80624: CALL_OW 67
// tmp := [ ] ;
80628: LD_ADDR_VAR 0 14
80632: PUSH
80633: EMPTY
80634: ST_TO_ADDR
// attacking := false ;
80635: LD_ADDR_VAR 0 29
80639: PUSH
80640: LD_INT 0
80642: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
80643: LD_VAR 0 4
80647: PUSH
80648: LD_VAR 0 7
80652: ARRAY
80653: PPUSH
80654: CALL_OW 301
80658: PUSH
80659: LD_VAR 0 4
80663: PUSH
80664: LD_VAR 0 7
80668: ARRAY
80669: NOT
80670: OR
80671: IFFALSE 80780
// begin if GetType ( group [ i ] ) = unit_human then
80673: LD_VAR 0 4
80677: PUSH
80678: LD_VAR 0 7
80682: ARRAY
80683: PPUSH
80684: CALL_OW 247
80688: PUSH
80689: LD_INT 1
80691: EQUAL
80692: IFFALSE 80738
// begin to_heal := to_heal diff group [ i ] ;
80694: LD_ADDR_VAR 0 30
80698: PUSH
80699: LD_VAR 0 30
80703: PUSH
80704: LD_VAR 0 4
80708: PUSH
80709: LD_VAR 0 7
80713: ARRAY
80714: DIFF
80715: ST_TO_ADDR
// healers := healers diff group [ i ] ;
80716: LD_ADDR_VAR 0 31
80720: PUSH
80721: LD_VAR 0 31
80725: PUSH
80726: LD_VAR 0 4
80730: PUSH
80731: LD_VAR 0 7
80735: ARRAY
80736: DIFF
80737: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
80738: LD_ADDR_VAR 0 4
80742: PUSH
80743: LD_VAR 0 4
80747: PPUSH
80748: LD_VAR 0 7
80752: PPUSH
80753: CALL_OW 3
80757: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
80758: LD_ADDR_VAR 0 16
80762: PUSH
80763: LD_VAR 0 16
80767: PPUSH
80768: LD_VAR 0 7
80772: PPUSH
80773: CALL_OW 3
80777: ST_TO_ADDR
// continue ;
80778: GO 80618
// end ; if f_repair then
80780: LD_VAR 0 22
80784: IFFALSE 81273
// begin if GetType ( group [ i ] ) = unit_vehicle then
80786: LD_VAR 0 4
80790: PUSH
80791: LD_VAR 0 7
80795: ARRAY
80796: PPUSH
80797: CALL_OW 247
80801: PUSH
80802: LD_INT 2
80804: EQUAL
80805: IFFALSE 80995
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
80807: LD_VAR 0 4
80811: PUSH
80812: LD_VAR 0 7
80816: ARRAY
80817: PPUSH
80818: CALL_OW 256
80822: PUSH
80823: LD_INT 700
80825: LESS
80826: PUSH
80827: LD_VAR 0 4
80831: PUSH
80832: LD_VAR 0 7
80836: ARRAY
80837: PUSH
80838: LD_VAR 0 32
80842: IN
80843: NOT
80844: AND
80845: IFFALSE 80869
// to_repair := to_repair union group [ i ] ;
80847: LD_ADDR_VAR 0 32
80851: PUSH
80852: LD_VAR 0 32
80856: PUSH
80857: LD_VAR 0 4
80861: PUSH
80862: LD_VAR 0 7
80866: ARRAY
80867: UNION
80868: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
80869: LD_VAR 0 4
80873: PUSH
80874: LD_VAR 0 7
80878: ARRAY
80879: PPUSH
80880: CALL_OW 256
80884: PUSH
80885: LD_INT 1000
80887: EQUAL
80888: PUSH
80889: LD_VAR 0 4
80893: PUSH
80894: LD_VAR 0 7
80898: ARRAY
80899: PUSH
80900: LD_VAR 0 32
80904: IN
80905: AND
80906: IFFALSE 80930
// to_repair := to_repair diff group [ i ] ;
80908: LD_ADDR_VAR 0 32
80912: PUSH
80913: LD_VAR 0 32
80917: PUSH
80918: LD_VAR 0 4
80922: PUSH
80923: LD_VAR 0 7
80927: ARRAY
80928: DIFF
80929: ST_TO_ADDR
// if group [ i ] in to_repair then
80930: LD_VAR 0 4
80934: PUSH
80935: LD_VAR 0 7
80939: ARRAY
80940: PUSH
80941: LD_VAR 0 32
80945: IN
80946: IFFALSE 80993
// begin if not IsInArea ( group [ i ] , f_repair ) then
80948: LD_VAR 0 4
80952: PUSH
80953: LD_VAR 0 7
80957: ARRAY
80958: PPUSH
80959: LD_VAR 0 22
80963: PPUSH
80964: CALL_OW 308
80968: NOT
80969: IFFALSE 80991
// ComMoveToArea ( group [ i ] , f_repair ) ;
80971: LD_VAR 0 4
80975: PUSH
80976: LD_VAR 0 7
80980: ARRAY
80981: PPUSH
80982: LD_VAR 0 22
80986: PPUSH
80987: CALL_OW 113
// continue ;
80991: GO 80618
// end ; end else
80993: GO 81273
// if group [ i ] in repairs then
80995: LD_VAR 0 4
80999: PUSH
81000: LD_VAR 0 7
81004: ARRAY
81005: PUSH
81006: LD_VAR 0 33
81010: IN
81011: IFFALSE 81273
// begin if IsInUnit ( group [ i ] ) then
81013: LD_VAR 0 4
81017: PUSH
81018: LD_VAR 0 7
81022: ARRAY
81023: PPUSH
81024: CALL_OW 310
81028: IFFALSE 81096
// begin z := IsInUnit ( group [ i ] ) ;
81030: LD_ADDR_VAR 0 13
81034: PUSH
81035: LD_VAR 0 4
81039: PUSH
81040: LD_VAR 0 7
81044: ARRAY
81045: PPUSH
81046: CALL_OW 310
81050: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
81051: LD_VAR 0 13
81055: PUSH
81056: LD_VAR 0 32
81060: IN
81061: PUSH
81062: LD_VAR 0 13
81066: PPUSH
81067: LD_VAR 0 22
81071: PPUSH
81072: CALL_OW 308
81076: AND
81077: IFFALSE 81094
// ComExitVehicle ( group [ i ] ) ;
81079: LD_VAR 0 4
81083: PUSH
81084: LD_VAR 0 7
81088: ARRAY
81089: PPUSH
81090: CALL_OW 121
// end else
81094: GO 81273
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
81096: LD_ADDR_VAR 0 13
81100: PUSH
81101: LD_VAR 0 4
81105: PPUSH
81106: LD_INT 95
81108: PUSH
81109: LD_VAR 0 22
81113: PUSH
81114: EMPTY
81115: LIST
81116: LIST
81117: PUSH
81118: LD_INT 58
81120: PUSH
81121: EMPTY
81122: LIST
81123: PUSH
81124: EMPTY
81125: LIST
81126: LIST
81127: PPUSH
81128: CALL_OW 72
81132: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
81133: LD_VAR 0 4
81137: PUSH
81138: LD_VAR 0 7
81142: ARRAY
81143: PPUSH
81144: CALL_OW 314
81148: NOT
81149: IFFALSE 81271
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
81151: LD_ADDR_VAR 0 10
81155: PUSH
81156: LD_VAR 0 13
81160: PPUSH
81161: LD_VAR 0 4
81165: PUSH
81166: LD_VAR 0 7
81170: ARRAY
81171: PPUSH
81172: CALL_OW 74
81176: ST_TO_ADDR
// if not x then
81177: LD_VAR 0 10
81181: NOT
81182: IFFALSE 81186
// continue ;
81184: GO 80618
// if GetLives ( x ) < 1000 then
81186: LD_VAR 0 10
81190: PPUSH
81191: CALL_OW 256
81195: PUSH
81196: LD_INT 1000
81198: LESS
81199: IFFALSE 81223
// ComRepairVehicle ( group [ i ] , x ) else
81201: LD_VAR 0 4
81205: PUSH
81206: LD_VAR 0 7
81210: ARRAY
81211: PPUSH
81212: LD_VAR 0 10
81216: PPUSH
81217: CALL_OW 129
81221: GO 81271
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
81223: LD_VAR 0 23
81227: PUSH
81228: LD_VAR 0 4
81232: PUSH
81233: LD_VAR 0 7
81237: ARRAY
81238: PPUSH
81239: CALL_OW 256
81243: PUSH
81244: LD_INT 1000
81246: LESS
81247: AND
81248: NOT
81249: IFFALSE 81271
// ComEnterUnit ( group [ i ] , x ) ;
81251: LD_VAR 0 4
81255: PUSH
81256: LD_VAR 0 7
81260: ARRAY
81261: PPUSH
81262: LD_VAR 0 10
81266: PPUSH
81267: CALL_OW 120
// end ; continue ;
81271: GO 80618
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
81273: LD_VAR 0 23
81277: PUSH
81278: LD_VAR 0 4
81282: PUSH
81283: LD_VAR 0 7
81287: ARRAY
81288: PPUSH
81289: CALL_OW 247
81293: PUSH
81294: LD_INT 1
81296: EQUAL
81297: AND
81298: IFFALSE 81776
// begin if group [ i ] in healers then
81300: LD_VAR 0 4
81304: PUSH
81305: LD_VAR 0 7
81309: ARRAY
81310: PUSH
81311: LD_VAR 0 31
81315: IN
81316: IFFALSE 81589
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
81318: LD_VAR 0 4
81322: PUSH
81323: LD_VAR 0 7
81327: ARRAY
81328: PPUSH
81329: LD_VAR 0 23
81333: PPUSH
81334: CALL_OW 308
81338: NOT
81339: PUSH
81340: LD_VAR 0 4
81344: PUSH
81345: LD_VAR 0 7
81349: ARRAY
81350: PPUSH
81351: CALL_OW 314
81355: NOT
81356: AND
81357: IFFALSE 81381
// ComMoveToArea ( group [ i ] , f_heal ) else
81359: LD_VAR 0 4
81363: PUSH
81364: LD_VAR 0 7
81368: ARRAY
81369: PPUSH
81370: LD_VAR 0 23
81374: PPUSH
81375: CALL_OW 113
81379: GO 81587
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
81381: LD_VAR 0 4
81385: PUSH
81386: LD_VAR 0 7
81390: ARRAY
81391: PPUSH
81392: CALL 80019 0 1
81396: PPUSH
81397: CALL_OW 256
81401: PUSH
81402: LD_INT 1000
81404: EQUAL
81405: IFFALSE 81424
// ComStop ( group [ i ] ) else
81407: LD_VAR 0 4
81411: PUSH
81412: LD_VAR 0 7
81416: ARRAY
81417: PPUSH
81418: CALL_OW 141
81422: GO 81587
// if not HasTask ( group [ i ] ) and to_heal then
81424: LD_VAR 0 4
81428: PUSH
81429: LD_VAR 0 7
81433: ARRAY
81434: PPUSH
81435: CALL_OW 314
81439: NOT
81440: PUSH
81441: LD_VAR 0 30
81445: AND
81446: IFFALSE 81587
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
81448: LD_ADDR_VAR 0 13
81452: PUSH
81453: LD_VAR 0 30
81457: PPUSH
81458: LD_INT 3
81460: PUSH
81461: LD_INT 54
81463: PUSH
81464: EMPTY
81465: LIST
81466: PUSH
81467: EMPTY
81468: LIST
81469: LIST
81470: PPUSH
81471: CALL_OW 72
81475: PPUSH
81476: LD_VAR 0 4
81480: PUSH
81481: LD_VAR 0 7
81485: ARRAY
81486: PPUSH
81487: CALL_OW 74
81491: ST_TO_ADDR
// if z then
81492: LD_VAR 0 13
81496: IFFALSE 81587
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
81498: LD_INT 91
81500: PUSH
81501: LD_VAR 0 13
81505: PUSH
81506: LD_INT 10
81508: PUSH
81509: EMPTY
81510: LIST
81511: LIST
81512: LIST
81513: PUSH
81514: LD_INT 81
81516: PUSH
81517: LD_VAR 0 13
81521: PPUSH
81522: CALL_OW 255
81526: PUSH
81527: EMPTY
81528: LIST
81529: LIST
81530: PUSH
81531: EMPTY
81532: LIST
81533: LIST
81534: PPUSH
81535: CALL_OW 69
81539: PUSH
81540: LD_INT 0
81542: EQUAL
81543: IFFALSE 81567
// ComHeal ( group [ i ] , z ) else
81545: LD_VAR 0 4
81549: PUSH
81550: LD_VAR 0 7
81554: ARRAY
81555: PPUSH
81556: LD_VAR 0 13
81560: PPUSH
81561: CALL_OW 128
81565: GO 81587
// ComMoveToArea ( group [ i ] , f_heal ) ;
81567: LD_VAR 0 4
81571: PUSH
81572: LD_VAR 0 7
81576: ARRAY
81577: PPUSH
81578: LD_VAR 0 23
81582: PPUSH
81583: CALL_OW 113
// end ; continue ;
81587: GO 80618
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
81589: LD_VAR 0 4
81593: PUSH
81594: LD_VAR 0 7
81598: ARRAY
81599: PPUSH
81600: CALL_OW 256
81604: PUSH
81605: LD_INT 700
81607: LESS
81608: PUSH
81609: LD_VAR 0 4
81613: PUSH
81614: LD_VAR 0 7
81618: ARRAY
81619: PUSH
81620: LD_VAR 0 30
81624: IN
81625: NOT
81626: AND
81627: IFFALSE 81651
// to_heal := to_heal union group [ i ] ;
81629: LD_ADDR_VAR 0 30
81633: PUSH
81634: LD_VAR 0 30
81638: PUSH
81639: LD_VAR 0 4
81643: PUSH
81644: LD_VAR 0 7
81648: ARRAY
81649: UNION
81650: ST_TO_ADDR
// if group [ i ] in to_heal then
81651: LD_VAR 0 4
81655: PUSH
81656: LD_VAR 0 7
81660: ARRAY
81661: PUSH
81662: LD_VAR 0 30
81666: IN
81667: IFFALSE 81776
// begin if GetLives ( group [ i ] ) = 1000 then
81669: LD_VAR 0 4
81673: PUSH
81674: LD_VAR 0 7
81678: ARRAY
81679: PPUSH
81680: CALL_OW 256
81684: PUSH
81685: LD_INT 1000
81687: EQUAL
81688: IFFALSE 81714
// to_heal := to_heal diff group [ i ] else
81690: LD_ADDR_VAR 0 30
81694: PUSH
81695: LD_VAR 0 30
81699: PUSH
81700: LD_VAR 0 4
81704: PUSH
81705: LD_VAR 0 7
81709: ARRAY
81710: DIFF
81711: ST_TO_ADDR
81712: GO 81776
// begin if not IsInArea ( group [ i ] , to_heal ) then
81714: LD_VAR 0 4
81718: PUSH
81719: LD_VAR 0 7
81723: ARRAY
81724: PPUSH
81725: LD_VAR 0 30
81729: PPUSH
81730: CALL_OW 308
81734: NOT
81735: IFFALSE 81759
// ComMoveToArea ( group [ i ] , f_heal ) else
81737: LD_VAR 0 4
81741: PUSH
81742: LD_VAR 0 7
81746: ARRAY
81747: PPUSH
81748: LD_VAR 0 23
81752: PPUSH
81753: CALL_OW 113
81757: GO 81774
// ComHold ( group [ i ] ) ;
81759: LD_VAR 0 4
81763: PUSH
81764: LD_VAR 0 7
81768: ARRAY
81769: PPUSH
81770: CALL_OW 140
// continue ;
81774: GO 80618
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
81776: LD_VAR 0 4
81780: PUSH
81781: LD_VAR 0 7
81785: ARRAY
81786: PPUSH
81787: LD_INT 10
81789: PPUSH
81790: CALL 78416 0 2
81794: NOT
81795: PUSH
81796: LD_VAR 0 16
81800: PUSH
81801: LD_VAR 0 7
81805: ARRAY
81806: PUSH
81807: EMPTY
81808: EQUAL
81809: NOT
81810: AND
81811: IFFALSE 82077
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
81813: LD_VAR 0 4
81817: PUSH
81818: LD_VAR 0 7
81822: ARRAY
81823: PPUSH
81824: CALL_OW 262
81828: PUSH
81829: LD_INT 1
81831: PUSH
81832: LD_INT 2
81834: PUSH
81835: EMPTY
81836: LIST
81837: LIST
81838: IN
81839: IFFALSE 81880
// if GetFuel ( group [ i ] ) < 10 then
81841: LD_VAR 0 4
81845: PUSH
81846: LD_VAR 0 7
81850: ARRAY
81851: PPUSH
81852: CALL_OW 261
81856: PUSH
81857: LD_INT 10
81859: LESS
81860: IFFALSE 81880
// SetFuel ( group [ i ] , 12 ) ;
81862: LD_VAR 0 4
81866: PUSH
81867: LD_VAR 0 7
81871: ARRAY
81872: PPUSH
81873: LD_INT 12
81875: PPUSH
81876: CALL_OW 240
// if units_path [ i ] then
81880: LD_VAR 0 16
81884: PUSH
81885: LD_VAR 0 7
81889: ARRAY
81890: IFFALSE 82075
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
81892: LD_VAR 0 4
81896: PUSH
81897: LD_VAR 0 7
81901: ARRAY
81902: PPUSH
81903: LD_VAR 0 16
81907: PUSH
81908: LD_VAR 0 7
81912: ARRAY
81913: PUSH
81914: LD_INT 1
81916: ARRAY
81917: PUSH
81918: LD_INT 1
81920: ARRAY
81921: PPUSH
81922: LD_VAR 0 16
81926: PUSH
81927: LD_VAR 0 7
81931: ARRAY
81932: PUSH
81933: LD_INT 1
81935: ARRAY
81936: PUSH
81937: LD_INT 2
81939: ARRAY
81940: PPUSH
81941: CALL_OW 297
81945: PUSH
81946: LD_INT 6
81948: GREATER
81949: IFFALSE 82024
// begin if not HasTask ( group [ i ] ) then
81951: LD_VAR 0 4
81955: PUSH
81956: LD_VAR 0 7
81960: ARRAY
81961: PPUSH
81962: CALL_OW 314
81966: NOT
81967: IFFALSE 82022
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
81969: LD_VAR 0 4
81973: PUSH
81974: LD_VAR 0 7
81978: ARRAY
81979: PPUSH
81980: LD_VAR 0 16
81984: PUSH
81985: LD_VAR 0 7
81989: ARRAY
81990: PUSH
81991: LD_INT 1
81993: ARRAY
81994: PUSH
81995: LD_INT 1
81997: ARRAY
81998: PPUSH
81999: LD_VAR 0 16
82003: PUSH
82004: LD_VAR 0 7
82008: ARRAY
82009: PUSH
82010: LD_INT 1
82012: ARRAY
82013: PUSH
82014: LD_INT 2
82016: ARRAY
82017: PPUSH
82018: CALL_OW 114
// end else
82022: GO 82075
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
82024: LD_ADDR_VAR 0 15
82028: PUSH
82029: LD_VAR 0 16
82033: PUSH
82034: LD_VAR 0 7
82038: ARRAY
82039: PPUSH
82040: LD_INT 1
82042: PPUSH
82043: CALL_OW 3
82047: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
82048: LD_ADDR_VAR 0 16
82052: PUSH
82053: LD_VAR 0 16
82057: PPUSH
82058: LD_VAR 0 7
82062: PPUSH
82063: LD_VAR 0 15
82067: PPUSH
82068: CALL_OW 1
82072: ST_TO_ADDR
// continue ;
82073: GO 80618
// end ; end ; end else
82075: GO 84713
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
82077: LD_ADDR_VAR 0 14
82081: PUSH
82082: LD_INT 81
82084: PUSH
82085: LD_VAR 0 4
82089: PUSH
82090: LD_VAR 0 7
82094: ARRAY
82095: PPUSH
82096: CALL_OW 255
82100: PUSH
82101: EMPTY
82102: LIST
82103: LIST
82104: PPUSH
82105: CALL_OW 69
82109: ST_TO_ADDR
// if not tmp then
82110: LD_VAR 0 14
82114: NOT
82115: IFFALSE 82119
// continue ;
82117: GO 80618
// if f_ignore_area then
82119: LD_VAR 0 17
82123: IFFALSE 82211
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
82125: LD_ADDR_VAR 0 15
82129: PUSH
82130: LD_VAR 0 14
82134: PPUSH
82135: LD_INT 3
82137: PUSH
82138: LD_INT 92
82140: PUSH
82141: LD_VAR 0 17
82145: PUSH
82146: LD_INT 1
82148: ARRAY
82149: PUSH
82150: LD_VAR 0 17
82154: PUSH
82155: LD_INT 2
82157: ARRAY
82158: PUSH
82159: LD_VAR 0 17
82163: PUSH
82164: LD_INT 3
82166: ARRAY
82167: PUSH
82168: EMPTY
82169: LIST
82170: LIST
82171: LIST
82172: LIST
82173: PUSH
82174: EMPTY
82175: LIST
82176: LIST
82177: PPUSH
82178: CALL_OW 72
82182: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
82183: LD_VAR 0 14
82187: PUSH
82188: LD_VAR 0 15
82192: DIFF
82193: IFFALSE 82211
// tmp := tmp diff tmp2 ;
82195: LD_ADDR_VAR 0 14
82199: PUSH
82200: LD_VAR 0 14
82204: PUSH
82205: LD_VAR 0 15
82209: DIFF
82210: ST_TO_ADDR
// end ; if not f_murder then
82211: LD_VAR 0 20
82215: NOT
82216: IFFALSE 82274
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
82218: LD_ADDR_VAR 0 15
82222: PUSH
82223: LD_VAR 0 14
82227: PPUSH
82228: LD_INT 3
82230: PUSH
82231: LD_INT 50
82233: PUSH
82234: EMPTY
82235: LIST
82236: PUSH
82237: EMPTY
82238: LIST
82239: LIST
82240: PPUSH
82241: CALL_OW 72
82245: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
82246: LD_VAR 0 14
82250: PUSH
82251: LD_VAR 0 15
82255: DIFF
82256: IFFALSE 82274
// tmp := tmp diff tmp2 ;
82258: LD_ADDR_VAR 0 14
82262: PUSH
82263: LD_VAR 0 14
82267: PUSH
82268: LD_VAR 0 15
82272: DIFF
82273: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
82274: LD_ADDR_VAR 0 14
82278: PUSH
82279: LD_VAR 0 4
82283: PUSH
82284: LD_VAR 0 7
82288: ARRAY
82289: PPUSH
82290: LD_VAR 0 14
82294: PPUSH
82295: LD_INT 1
82297: PPUSH
82298: LD_INT 1
82300: PPUSH
82301: CALL 52083 0 4
82305: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
82306: LD_VAR 0 4
82310: PUSH
82311: LD_VAR 0 7
82315: ARRAY
82316: PPUSH
82317: CALL_OW 257
82321: PUSH
82322: LD_INT 1
82324: EQUAL
82325: IFFALSE 82773
// begin if WantPlant ( group [ i ] ) then
82327: LD_VAR 0 4
82331: PUSH
82332: LD_VAR 0 7
82336: ARRAY
82337: PPUSH
82338: CALL 51584 0 1
82342: IFFALSE 82346
// continue ;
82344: GO 80618
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
82346: LD_VAR 0 18
82350: PUSH
82351: LD_VAR 0 4
82355: PUSH
82356: LD_VAR 0 7
82360: ARRAY
82361: PPUSH
82362: CALL_OW 310
82366: NOT
82367: AND
82368: PUSH
82369: LD_VAR 0 14
82373: PUSH
82374: LD_INT 1
82376: ARRAY
82377: PUSH
82378: LD_VAR 0 14
82382: PPUSH
82383: LD_INT 21
82385: PUSH
82386: LD_INT 2
82388: PUSH
82389: EMPTY
82390: LIST
82391: LIST
82392: PUSH
82393: LD_INT 58
82395: PUSH
82396: EMPTY
82397: LIST
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: PPUSH
82403: CALL_OW 72
82407: IN
82408: AND
82409: IFFALSE 82445
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
82411: LD_VAR 0 4
82415: PUSH
82416: LD_VAR 0 7
82420: ARRAY
82421: PPUSH
82422: LD_VAR 0 14
82426: PUSH
82427: LD_INT 1
82429: ARRAY
82430: PPUSH
82431: CALL_OW 120
// attacking := true ;
82435: LD_ADDR_VAR 0 29
82439: PUSH
82440: LD_INT 1
82442: ST_TO_ADDR
// continue ;
82443: GO 80618
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
82445: LD_VAR 0 26
82449: PUSH
82450: LD_VAR 0 4
82454: PUSH
82455: LD_VAR 0 7
82459: ARRAY
82460: PPUSH
82461: CALL_OW 257
82465: PUSH
82466: LD_INT 1
82468: EQUAL
82469: AND
82470: PUSH
82471: LD_VAR 0 4
82475: PUSH
82476: LD_VAR 0 7
82480: ARRAY
82481: PPUSH
82482: CALL_OW 256
82486: PUSH
82487: LD_INT 800
82489: LESS
82490: AND
82491: PUSH
82492: LD_VAR 0 4
82496: PUSH
82497: LD_VAR 0 7
82501: ARRAY
82502: PPUSH
82503: CALL_OW 318
82507: NOT
82508: AND
82509: IFFALSE 82526
// ComCrawl ( group [ i ] ) ;
82511: LD_VAR 0 4
82515: PUSH
82516: LD_VAR 0 7
82520: ARRAY
82521: PPUSH
82522: CALL_OW 137
// if f_mines then
82526: LD_VAR 0 21
82530: IFFALSE 82773
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
82532: LD_VAR 0 14
82536: PUSH
82537: LD_INT 1
82539: ARRAY
82540: PPUSH
82541: CALL_OW 247
82545: PUSH
82546: LD_INT 3
82548: EQUAL
82549: PUSH
82550: LD_VAR 0 14
82554: PUSH
82555: LD_INT 1
82557: ARRAY
82558: PUSH
82559: LD_VAR 0 27
82563: IN
82564: NOT
82565: AND
82566: IFFALSE 82773
// begin x := GetX ( tmp [ 1 ] ) ;
82568: LD_ADDR_VAR 0 10
82572: PUSH
82573: LD_VAR 0 14
82577: PUSH
82578: LD_INT 1
82580: ARRAY
82581: PPUSH
82582: CALL_OW 250
82586: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
82587: LD_ADDR_VAR 0 11
82591: PUSH
82592: LD_VAR 0 14
82596: PUSH
82597: LD_INT 1
82599: ARRAY
82600: PPUSH
82601: CALL_OW 251
82605: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
82606: LD_ADDR_VAR 0 12
82610: PUSH
82611: LD_VAR 0 4
82615: PUSH
82616: LD_VAR 0 7
82620: ARRAY
82621: PPUSH
82622: CALL 78501 0 1
82626: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
82627: LD_VAR 0 4
82631: PUSH
82632: LD_VAR 0 7
82636: ARRAY
82637: PPUSH
82638: LD_VAR 0 10
82642: PPUSH
82643: LD_VAR 0 11
82647: PPUSH
82648: LD_VAR 0 14
82652: PUSH
82653: LD_INT 1
82655: ARRAY
82656: PPUSH
82657: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
82661: LD_VAR 0 4
82665: PUSH
82666: LD_VAR 0 7
82670: ARRAY
82671: PPUSH
82672: LD_VAR 0 10
82676: PPUSH
82677: LD_VAR 0 12
82681: PPUSH
82682: LD_INT 7
82684: PPUSH
82685: CALL_OW 272
82689: PPUSH
82690: LD_VAR 0 11
82694: PPUSH
82695: LD_VAR 0 12
82699: PPUSH
82700: LD_INT 7
82702: PPUSH
82703: CALL_OW 273
82707: PPUSH
82708: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
82712: LD_VAR 0 4
82716: PUSH
82717: LD_VAR 0 7
82721: ARRAY
82722: PPUSH
82723: LD_INT 71
82725: PPUSH
82726: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
82730: LD_ADDR_VAR 0 27
82734: PUSH
82735: LD_VAR 0 27
82739: PPUSH
82740: LD_VAR 0 27
82744: PUSH
82745: LD_INT 1
82747: PLUS
82748: PPUSH
82749: LD_VAR 0 14
82753: PUSH
82754: LD_INT 1
82756: ARRAY
82757: PPUSH
82758: CALL_OW 1
82762: ST_TO_ADDR
// attacking := true ;
82763: LD_ADDR_VAR 0 29
82767: PUSH
82768: LD_INT 1
82770: ST_TO_ADDR
// continue ;
82771: GO 80618
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
82773: LD_VAR 0 4
82777: PUSH
82778: LD_VAR 0 7
82782: ARRAY
82783: PPUSH
82784: CALL_OW 257
82788: PUSH
82789: LD_INT 17
82791: EQUAL
82792: PUSH
82793: LD_VAR 0 4
82797: PUSH
82798: LD_VAR 0 7
82802: ARRAY
82803: PPUSH
82804: CALL_OW 110
82808: PUSH
82809: LD_INT 71
82811: EQUAL
82812: NOT
82813: AND
82814: IFFALSE 82960
// begin attacking := false ;
82816: LD_ADDR_VAR 0 29
82820: PUSH
82821: LD_INT 0
82823: ST_TO_ADDR
// k := 5 ;
82824: LD_ADDR_VAR 0 9
82828: PUSH
82829: LD_INT 5
82831: ST_TO_ADDR
// if tmp < k then
82832: LD_VAR 0 14
82836: PUSH
82837: LD_VAR 0 9
82841: LESS
82842: IFFALSE 82854
// k := tmp ;
82844: LD_ADDR_VAR 0 9
82848: PUSH
82849: LD_VAR 0 14
82853: ST_TO_ADDR
// for j = 1 to k do
82854: LD_ADDR_VAR 0 8
82858: PUSH
82859: DOUBLE
82860: LD_INT 1
82862: DEC
82863: ST_TO_ADDR
82864: LD_VAR 0 9
82868: PUSH
82869: FOR_TO
82870: IFFALSE 82958
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
82872: LD_VAR 0 14
82876: PUSH
82877: LD_VAR 0 8
82881: ARRAY
82882: PUSH
82883: LD_VAR 0 14
82887: PPUSH
82888: LD_INT 58
82890: PUSH
82891: EMPTY
82892: LIST
82893: PPUSH
82894: CALL_OW 72
82898: IN
82899: NOT
82900: IFFALSE 82956
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
82902: LD_VAR 0 4
82906: PUSH
82907: LD_VAR 0 7
82911: ARRAY
82912: PPUSH
82913: LD_VAR 0 14
82917: PUSH
82918: LD_VAR 0 8
82922: ARRAY
82923: PPUSH
82924: CALL_OW 115
// attacking := true ;
82928: LD_ADDR_VAR 0 29
82932: PUSH
82933: LD_INT 1
82935: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
82936: LD_VAR 0 4
82940: PUSH
82941: LD_VAR 0 7
82945: ARRAY
82946: PPUSH
82947: LD_INT 71
82949: PPUSH
82950: CALL_OW 109
// continue ;
82954: GO 82869
// end ; end ;
82956: GO 82869
82958: POP
82959: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
82960: LD_VAR 0 4
82964: PUSH
82965: LD_VAR 0 7
82969: ARRAY
82970: PPUSH
82971: CALL_OW 257
82975: PUSH
82976: LD_INT 8
82978: EQUAL
82979: PUSH
82980: LD_VAR 0 4
82984: PUSH
82985: LD_VAR 0 7
82989: ARRAY
82990: PPUSH
82991: CALL_OW 264
82995: PUSH
82996: LD_INT 28
82998: PUSH
82999: LD_INT 45
83001: PUSH
83002: LD_INT 7
83004: PUSH
83005: LD_INT 47
83007: PUSH
83008: EMPTY
83009: LIST
83010: LIST
83011: LIST
83012: LIST
83013: IN
83014: OR
83015: IFFALSE 83245
// begin attacking := false ;
83017: LD_ADDR_VAR 0 29
83021: PUSH
83022: LD_INT 0
83024: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
83025: LD_VAR 0 14
83029: PUSH
83030: LD_INT 1
83032: ARRAY
83033: PPUSH
83034: CALL_OW 266
83038: PUSH
83039: LD_INT 32
83041: PUSH
83042: LD_INT 31
83044: PUSH
83045: LD_INT 33
83047: PUSH
83048: LD_INT 4
83050: PUSH
83051: LD_INT 5
83053: PUSH
83054: EMPTY
83055: LIST
83056: LIST
83057: LIST
83058: LIST
83059: LIST
83060: IN
83061: IFFALSE 83245
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
83063: LD_ADDR_VAR 0 9
83067: PUSH
83068: LD_VAR 0 14
83072: PUSH
83073: LD_INT 1
83075: ARRAY
83076: PPUSH
83077: CALL_OW 266
83081: PPUSH
83082: LD_VAR 0 14
83086: PUSH
83087: LD_INT 1
83089: ARRAY
83090: PPUSH
83091: CALL_OW 250
83095: PPUSH
83096: LD_VAR 0 14
83100: PUSH
83101: LD_INT 1
83103: ARRAY
83104: PPUSH
83105: CALL_OW 251
83109: PPUSH
83110: LD_VAR 0 14
83114: PUSH
83115: LD_INT 1
83117: ARRAY
83118: PPUSH
83119: CALL_OW 254
83123: PPUSH
83124: LD_VAR 0 14
83128: PUSH
83129: LD_INT 1
83131: ARRAY
83132: PPUSH
83133: CALL_OW 248
83137: PPUSH
83138: LD_INT 0
83140: PPUSH
83141: CALL 59877 0 6
83145: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
83146: LD_ADDR_VAR 0 8
83150: PUSH
83151: LD_VAR 0 4
83155: PUSH
83156: LD_VAR 0 7
83160: ARRAY
83161: PPUSH
83162: LD_VAR 0 9
83166: PPUSH
83167: CALL 78564 0 2
83171: ST_TO_ADDR
// if j then
83172: LD_VAR 0 8
83176: IFFALSE 83245
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
83178: LD_VAR 0 8
83182: PUSH
83183: LD_INT 1
83185: ARRAY
83186: PPUSH
83187: LD_VAR 0 8
83191: PUSH
83192: LD_INT 2
83194: ARRAY
83195: PPUSH
83196: CALL_OW 488
83200: IFFALSE 83245
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
83202: LD_VAR 0 4
83206: PUSH
83207: LD_VAR 0 7
83211: ARRAY
83212: PPUSH
83213: LD_VAR 0 8
83217: PUSH
83218: LD_INT 1
83220: ARRAY
83221: PPUSH
83222: LD_VAR 0 8
83226: PUSH
83227: LD_INT 2
83229: ARRAY
83230: PPUSH
83231: CALL_OW 116
// attacking := true ;
83235: LD_ADDR_VAR 0 29
83239: PUSH
83240: LD_INT 1
83242: ST_TO_ADDR
// continue ;
83243: GO 80618
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
83245: LD_VAR 0 4
83249: PUSH
83250: LD_VAR 0 7
83254: ARRAY
83255: PPUSH
83256: CALL_OW 265
83260: PUSH
83261: LD_INT 11
83263: EQUAL
83264: IFFALSE 83542
// begin k := 10 ;
83266: LD_ADDR_VAR 0 9
83270: PUSH
83271: LD_INT 10
83273: ST_TO_ADDR
// x := 0 ;
83274: LD_ADDR_VAR 0 10
83278: PUSH
83279: LD_INT 0
83281: ST_TO_ADDR
// if tmp < k then
83282: LD_VAR 0 14
83286: PUSH
83287: LD_VAR 0 9
83291: LESS
83292: IFFALSE 83304
// k := tmp ;
83294: LD_ADDR_VAR 0 9
83298: PUSH
83299: LD_VAR 0 14
83303: ST_TO_ADDR
// for j = k downto 1 do
83304: LD_ADDR_VAR 0 8
83308: PUSH
83309: DOUBLE
83310: LD_VAR 0 9
83314: INC
83315: ST_TO_ADDR
83316: LD_INT 1
83318: PUSH
83319: FOR_DOWNTO
83320: IFFALSE 83395
// begin if GetType ( tmp [ j ] ) = unit_human then
83322: LD_VAR 0 14
83326: PUSH
83327: LD_VAR 0 8
83331: ARRAY
83332: PPUSH
83333: CALL_OW 247
83337: PUSH
83338: LD_INT 1
83340: EQUAL
83341: IFFALSE 83393
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
83343: LD_VAR 0 4
83347: PUSH
83348: LD_VAR 0 7
83352: ARRAY
83353: PPUSH
83354: LD_VAR 0 14
83358: PUSH
83359: LD_VAR 0 8
83363: ARRAY
83364: PPUSH
83365: CALL 78835 0 2
// x := tmp [ j ] ;
83369: LD_ADDR_VAR 0 10
83373: PUSH
83374: LD_VAR 0 14
83378: PUSH
83379: LD_VAR 0 8
83383: ARRAY
83384: ST_TO_ADDR
// attacking := true ;
83385: LD_ADDR_VAR 0 29
83389: PUSH
83390: LD_INT 1
83392: ST_TO_ADDR
// end ; end ;
83393: GO 83319
83395: POP
83396: POP
// if not x then
83397: LD_VAR 0 10
83401: NOT
83402: IFFALSE 83542
// begin attacking := true ;
83404: LD_ADDR_VAR 0 29
83408: PUSH
83409: LD_INT 1
83411: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
83412: LD_VAR 0 4
83416: PUSH
83417: LD_VAR 0 7
83421: ARRAY
83422: PPUSH
83423: CALL_OW 250
83427: PPUSH
83428: LD_VAR 0 4
83432: PUSH
83433: LD_VAR 0 7
83437: ARRAY
83438: PPUSH
83439: CALL_OW 251
83443: PPUSH
83444: CALL_OW 546
83448: PUSH
83449: LD_INT 2
83451: ARRAY
83452: PUSH
83453: LD_VAR 0 14
83457: PUSH
83458: LD_INT 1
83460: ARRAY
83461: PPUSH
83462: CALL_OW 250
83466: PPUSH
83467: LD_VAR 0 14
83471: PUSH
83472: LD_INT 1
83474: ARRAY
83475: PPUSH
83476: CALL_OW 251
83480: PPUSH
83481: CALL_OW 546
83485: PUSH
83486: LD_INT 2
83488: ARRAY
83489: EQUAL
83490: IFFALSE 83518
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
83492: LD_VAR 0 4
83496: PUSH
83497: LD_VAR 0 7
83501: ARRAY
83502: PPUSH
83503: LD_VAR 0 14
83507: PUSH
83508: LD_INT 1
83510: ARRAY
83511: PPUSH
83512: CALL 78835 0 2
83516: GO 83542
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83518: LD_VAR 0 4
83522: PUSH
83523: LD_VAR 0 7
83527: ARRAY
83528: PPUSH
83529: LD_VAR 0 14
83533: PUSH
83534: LD_INT 1
83536: ARRAY
83537: PPUSH
83538: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
83542: LD_VAR 0 4
83546: PUSH
83547: LD_VAR 0 7
83551: ARRAY
83552: PPUSH
83553: CALL_OW 264
83557: PUSH
83558: LD_INT 29
83560: EQUAL
83561: IFFALSE 83927
// begin if WantsToAttack ( group [ i ] ) in bombed then
83563: LD_VAR 0 4
83567: PUSH
83568: LD_VAR 0 7
83572: ARRAY
83573: PPUSH
83574: CALL_OW 319
83578: PUSH
83579: LD_VAR 0 28
83583: IN
83584: IFFALSE 83588
// continue ;
83586: GO 80618
// k := 8 ;
83588: LD_ADDR_VAR 0 9
83592: PUSH
83593: LD_INT 8
83595: ST_TO_ADDR
// x := 0 ;
83596: LD_ADDR_VAR 0 10
83600: PUSH
83601: LD_INT 0
83603: ST_TO_ADDR
// if tmp < k then
83604: LD_VAR 0 14
83608: PUSH
83609: LD_VAR 0 9
83613: LESS
83614: IFFALSE 83626
// k := tmp ;
83616: LD_ADDR_VAR 0 9
83620: PUSH
83621: LD_VAR 0 14
83625: ST_TO_ADDR
// for j = 1 to k do
83626: LD_ADDR_VAR 0 8
83630: PUSH
83631: DOUBLE
83632: LD_INT 1
83634: DEC
83635: ST_TO_ADDR
83636: LD_VAR 0 9
83640: PUSH
83641: FOR_TO
83642: IFFALSE 83774
// begin if GetType ( tmp [ j ] ) = unit_building then
83644: LD_VAR 0 14
83648: PUSH
83649: LD_VAR 0 8
83653: ARRAY
83654: PPUSH
83655: CALL_OW 247
83659: PUSH
83660: LD_INT 3
83662: EQUAL
83663: IFFALSE 83772
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
83665: LD_VAR 0 14
83669: PUSH
83670: LD_VAR 0 8
83674: ARRAY
83675: PUSH
83676: LD_VAR 0 28
83680: IN
83681: NOT
83682: PUSH
83683: LD_VAR 0 14
83687: PUSH
83688: LD_VAR 0 8
83692: ARRAY
83693: PPUSH
83694: CALL_OW 313
83698: AND
83699: IFFALSE 83772
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83701: LD_VAR 0 4
83705: PUSH
83706: LD_VAR 0 7
83710: ARRAY
83711: PPUSH
83712: LD_VAR 0 14
83716: PUSH
83717: LD_VAR 0 8
83721: ARRAY
83722: PPUSH
83723: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
83727: LD_ADDR_VAR 0 28
83731: PUSH
83732: LD_VAR 0 28
83736: PPUSH
83737: LD_VAR 0 28
83741: PUSH
83742: LD_INT 1
83744: PLUS
83745: PPUSH
83746: LD_VAR 0 14
83750: PUSH
83751: LD_VAR 0 8
83755: ARRAY
83756: PPUSH
83757: CALL_OW 1
83761: ST_TO_ADDR
// attacking := true ;
83762: LD_ADDR_VAR 0 29
83766: PUSH
83767: LD_INT 1
83769: ST_TO_ADDR
// break ;
83770: GO 83774
// end ; end ;
83772: GO 83641
83774: POP
83775: POP
// if not attacking and f_attack_depot then
83776: LD_VAR 0 29
83780: NOT
83781: PUSH
83782: LD_VAR 0 25
83786: AND
83787: IFFALSE 83882
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83789: LD_ADDR_VAR 0 13
83793: PUSH
83794: LD_VAR 0 14
83798: PPUSH
83799: LD_INT 2
83801: PUSH
83802: LD_INT 30
83804: PUSH
83805: LD_INT 0
83807: PUSH
83808: EMPTY
83809: LIST
83810: LIST
83811: PUSH
83812: LD_INT 30
83814: PUSH
83815: LD_INT 1
83817: PUSH
83818: EMPTY
83819: LIST
83820: LIST
83821: PUSH
83822: EMPTY
83823: LIST
83824: LIST
83825: LIST
83826: PPUSH
83827: CALL_OW 72
83831: ST_TO_ADDR
// if z then
83832: LD_VAR 0 13
83836: IFFALSE 83882
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
83838: LD_VAR 0 4
83842: PUSH
83843: LD_VAR 0 7
83847: ARRAY
83848: PPUSH
83849: LD_VAR 0 13
83853: PPUSH
83854: LD_VAR 0 4
83858: PUSH
83859: LD_VAR 0 7
83863: ARRAY
83864: PPUSH
83865: CALL_OW 74
83869: PPUSH
83870: CALL_OW 115
// attacking := true ;
83874: LD_ADDR_VAR 0 29
83878: PUSH
83879: LD_INT 1
83881: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
83882: LD_VAR 0 4
83886: PUSH
83887: LD_VAR 0 7
83891: ARRAY
83892: PPUSH
83893: CALL_OW 256
83897: PUSH
83898: LD_INT 500
83900: LESS
83901: IFFALSE 83927
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83903: LD_VAR 0 4
83907: PUSH
83908: LD_VAR 0 7
83912: ARRAY
83913: PPUSH
83914: LD_VAR 0 14
83918: PUSH
83919: LD_INT 1
83921: ARRAY
83922: PPUSH
83923: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
83927: LD_VAR 0 4
83931: PUSH
83932: LD_VAR 0 7
83936: ARRAY
83937: PPUSH
83938: CALL_OW 264
83942: PUSH
83943: LD_INT 49
83945: EQUAL
83946: IFFALSE 84067
// begin if not HasTask ( group [ i ] ) then
83948: LD_VAR 0 4
83952: PUSH
83953: LD_VAR 0 7
83957: ARRAY
83958: PPUSH
83959: CALL_OW 314
83963: NOT
83964: IFFALSE 84067
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
83966: LD_ADDR_VAR 0 9
83970: PUSH
83971: LD_INT 81
83973: PUSH
83974: LD_VAR 0 4
83978: PUSH
83979: LD_VAR 0 7
83983: ARRAY
83984: PPUSH
83985: CALL_OW 255
83989: PUSH
83990: EMPTY
83991: LIST
83992: LIST
83993: PPUSH
83994: CALL_OW 69
83998: PPUSH
83999: LD_VAR 0 4
84003: PUSH
84004: LD_VAR 0 7
84008: ARRAY
84009: PPUSH
84010: CALL_OW 74
84014: ST_TO_ADDR
// if k then
84015: LD_VAR 0 9
84019: IFFALSE 84067
// if GetDistUnits ( group [ i ] , k ) > 10 then
84021: LD_VAR 0 4
84025: PUSH
84026: LD_VAR 0 7
84030: ARRAY
84031: PPUSH
84032: LD_VAR 0 9
84036: PPUSH
84037: CALL_OW 296
84041: PUSH
84042: LD_INT 10
84044: GREATER
84045: IFFALSE 84067
// ComMoveUnit ( group [ i ] , k ) ;
84047: LD_VAR 0 4
84051: PUSH
84052: LD_VAR 0 7
84056: ARRAY
84057: PPUSH
84058: LD_VAR 0 9
84062: PPUSH
84063: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
84067: LD_VAR 0 4
84071: PUSH
84072: LD_VAR 0 7
84076: ARRAY
84077: PPUSH
84078: CALL_OW 256
84082: PUSH
84083: LD_INT 250
84085: LESS
84086: PUSH
84087: LD_VAR 0 4
84091: PUSH
84092: LD_VAR 0 7
84096: ARRAY
84097: PUSH
84098: LD_INT 21
84100: PUSH
84101: LD_INT 2
84103: PUSH
84104: EMPTY
84105: LIST
84106: LIST
84107: PUSH
84108: LD_INT 23
84110: PUSH
84111: LD_INT 2
84113: PUSH
84114: EMPTY
84115: LIST
84116: LIST
84117: PUSH
84118: EMPTY
84119: LIST
84120: LIST
84121: PPUSH
84122: CALL_OW 69
84126: IN
84127: AND
84128: IFFALSE 84253
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
84130: LD_ADDR_VAR 0 9
84134: PUSH
84135: LD_OWVAR 3
84139: PUSH
84140: LD_VAR 0 4
84144: PUSH
84145: LD_VAR 0 7
84149: ARRAY
84150: DIFF
84151: PPUSH
84152: LD_VAR 0 4
84156: PUSH
84157: LD_VAR 0 7
84161: ARRAY
84162: PPUSH
84163: CALL_OW 74
84167: ST_TO_ADDR
// if not k then
84168: LD_VAR 0 9
84172: NOT
84173: IFFALSE 84177
// continue ;
84175: GO 80618
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
84177: LD_VAR 0 9
84181: PUSH
84182: LD_INT 81
84184: PUSH
84185: LD_VAR 0 4
84189: PUSH
84190: LD_VAR 0 7
84194: ARRAY
84195: PPUSH
84196: CALL_OW 255
84200: PUSH
84201: EMPTY
84202: LIST
84203: LIST
84204: PPUSH
84205: CALL_OW 69
84209: IN
84210: PUSH
84211: LD_VAR 0 9
84215: PPUSH
84216: LD_VAR 0 4
84220: PUSH
84221: LD_VAR 0 7
84225: ARRAY
84226: PPUSH
84227: CALL_OW 296
84231: PUSH
84232: LD_INT 5
84234: LESS
84235: AND
84236: IFFALSE 84253
// ComAutodestruct ( group [ i ] ) ;
84238: LD_VAR 0 4
84242: PUSH
84243: LD_VAR 0 7
84247: ARRAY
84248: PPUSH
84249: CALL 78733 0 1
// end ; if f_attack_depot then
84253: LD_VAR 0 25
84257: IFFALSE 84369
// begin k := 6 ;
84259: LD_ADDR_VAR 0 9
84263: PUSH
84264: LD_INT 6
84266: ST_TO_ADDR
// if tmp < k then
84267: LD_VAR 0 14
84271: PUSH
84272: LD_VAR 0 9
84276: LESS
84277: IFFALSE 84289
// k := tmp ;
84279: LD_ADDR_VAR 0 9
84283: PUSH
84284: LD_VAR 0 14
84288: ST_TO_ADDR
// for j = 1 to k do
84289: LD_ADDR_VAR 0 8
84293: PUSH
84294: DOUBLE
84295: LD_INT 1
84297: DEC
84298: ST_TO_ADDR
84299: LD_VAR 0 9
84303: PUSH
84304: FOR_TO
84305: IFFALSE 84367
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
84307: LD_VAR 0 8
84311: PPUSH
84312: CALL_OW 266
84316: PUSH
84317: LD_INT 0
84319: PUSH
84320: LD_INT 1
84322: PUSH
84323: EMPTY
84324: LIST
84325: LIST
84326: IN
84327: IFFALSE 84365
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
84329: LD_VAR 0 4
84333: PUSH
84334: LD_VAR 0 7
84338: ARRAY
84339: PPUSH
84340: LD_VAR 0 14
84344: PUSH
84345: LD_VAR 0 8
84349: ARRAY
84350: PPUSH
84351: CALL_OW 115
// attacking := true ;
84355: LD_ADDR_VAR 0 29
84359: PUSH
84360: LD_INT 1
84362: ST_TO_ADDR
// break ;
84363: GO 84367
// end ;
84365: GO 84304
84367: POP
84368: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
84369: LD_VAR 0 4
84373: PUSH
84374: LD_VAR 0 7
84378: ARRAY
84379: PPUSH
84380: CALL_OW 302
84384: PUSH
84385: LD_VAR 0 29
84389: NOT
84390: AND
84391: IFFALSE 84713
// begin if GetTag ( group [ i ] ) = 71 then
84393: LD_VAR 0 4
84397: PUSH
84398: LD_VAR 0 7
84402: ARRAY
84403: PPUSH
84404: CALL_OW 110
84408: PUSH
84409: LD_INT 71
84411: EQUAL
84412: IFFALSE 84453
// begin if HasTask ( group [ i ] ) then
84414: LD_VAR 0 4
84418: PUSH
84419: LD_VAR 0 7
84423: ARRAY
84424: PPUSH
84425: CALL_OW 314
84429: IFFALSE 84435
// continue else
84431: GO 80618
84433: GO 84453
// SetTag ( group [ i ] , 0 ) ;
84435: LD_VAR 0 4
84439: PUSH
84440: LD_VAR 0 7
84444: ARRAY
84445: PPUSH
84446: LD_INT 0
84448: PPUSH
84449: CALL_OW 109
// end ; k := 8 ;
84453: LD_ADDR_VAR 0 9
84457: PUSH
84458: LD_INT 8
84460: ST_TO_ADDR
// x := 0 ;
84461: LD_ADDR_VAR 0 10
84465: PUSH
84466: LD_INT 0
84468: ST_TO_ADDR
// if tmp < k then
84469: LD_VAR 0 14
84473: PUSH
84474: LD_VAR 0 9
84478: LESS
84479: IFFALSE 84491
// k := tmp ;
84481: LD_ADDR_VAR 0 9
84485: PUSH
84486: LD_VAR 0 14
84490: ST_TO_ADDR
// for j = 1 to k do
84491: LD_ADDR_VAR 0 8
84495: PUSH
84496: DOUBLE
84497: LD_INT 1
84499: DEC
84500: ST_TO_ADDR
84501: LD_VAR 0 9
84505: PUSH
84506: FOR_TO
84507: IFFALSE 84605
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
84509: LD_VAR 0 14
84513: PUSH
84514: LD_VAR 0 8
84518: ARRAY
84519: PPUSH
84520: CALL_OW 247
84524: PUSH
84525: LD_INT 1
84527: EQUAL
84528: PUSH
84529: LD_VAR 0 14
84533: PUSH
84534: LD_VAR 0 8
84538: ARRAY
84539: PPUSH
84540: CALL_OW 256
84544: PUSH
84545: LD_INT 250
84547: LESS
84548: PUSH
84549: LD_VAR 0 20
84553: AND
84554: PUSH
84555: LD_VAR 0 20
84559: NOT
84560: PUSH
84561: LD_VAR 0 14
84565: PUSH
84566: LD_VAR 0 8
84570: ARRAY
84571: PPUSH
84572: CALL_OW 256
84576: PUSH
84577: LD_INT 250
84579: GREATEREQUAL
84580: AND
84581: OR
84582: AND
84583: IFFALSE 84603
// begin x := tmp [ j ] ;
84585: LD_ADDR_VAR 0 10
84589: PUSH
84590: LD_VAR 0 14
84594: PUSH
84595: LD_VAR 0 8
84599: ARRAY
84600: ST_TO_ADDR
// break ;
84601: GO 84605
// end ;
84603: GO 84506
84605: POP
84606: POP
// if x then
84607: LD_VAR 0 10
84611: IFFALSE 84635
// ComAttackUnit ( group [ i ] , x ) else
84613: LD_VAR 0 4
84617: PUSH
84618: LD_VAR 0 7
84622: ARRAY
84623: PPUSH
84624: LD_VAR 0 10
84628: PPUSH
84629: CALL_OW 115
84633: GO 84659
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
84635: LD_VAR 0 4
84639: PUSH
84640: LD_VAR 0 7
84644: ARRAY
84645: PPUSH
84646: LD_VAR 0 14
84650: PUSH
84651: LD_INT 1
84653: ARRAY
84654: PPUSH
84655: CALL_OW 115
// if not HasTask ( group [ i ] ) then
84659: LD_VAR 0 4
84663: PUSH
84664: LD_VAR 0 7
84668: ARRAY
84669: PPUSH
84670: CALL_OW 314
84674: NOT
84675: IFFALSE 84713
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
84677: LD_VAR 0 4
84681: PUSH
84682: LD_VAR 0 7
84686: ARRAY
84687: PPUSH
84688: LD_VAR 0 14
84692: PPUSH
84693: LD_VAR 0 4
84697: PUSH
84698: LD_VAR 0 7
84702: ARRAY
84703: PPUSH
84704: CALL_OW 74
84708: PPUSH
84709: CALL_OW 115
// end ; end ; end ;
84713: GO 80618
84715: POP
84716: POP
// wait ( 0 0$1 ) ;
84717: LD_INT 35
84719: PPUSH
84720: CALL_OW 67
// until group = [ ] ;
84724: LD_VAR 0 4
84728: PUSH
84729: EMPTY
84730: EQUAL
84731: IFFALSE 80603
// end ;
84733: LD_VAR 0 2
84737: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84738: LD_INT 0
84740: PPUSH
84741: PPUSH
84742: PPUSH
84743: PPUSH
// if not base_units then
84744: LD_VAR 0 1
84748: NOT
84749: IFFALSE 84753
// exit ;
84751: GO 84840
// result := false ;
84753: LD_ADDR_VAR 0 2
84757: PUSH
84758: LD_INT 0
84760: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84761: LD_ADDR_VAR 0 5
84765: PUSH
84766: LD_VAR 0 1
84770: PPUSH
84771: LD_INT 21
84773: PUSH
84774: LD_INT 3
84776: PUSH
84777: EMPTY
84778: LIST
84779: LIST
84780: PPUSH
84781: CALL_OW 72
84785: ST_TO_ADDR
// if not tmp then
84786: LD_VAR 0 5
84790: NOT
84791: IFFALSE 84795
// exit ;
84793: GO 84840
// for i in tmp do
84795: LD_ADDR_VAR 0 3
84799: PUSH
84800: LD_VAR 0 5
84804: PUSH
84805: FOR_IN
84806: IFFALSE 84838
// begin result := EnemyInRange ( i , 22 ) ;
84808: LD_ADDR_VAR 0 2
84812: PUSH
84813: LD_VAR 0 3
84817: PPUSH
84818: LD_INT 22
84820: PPUSH
84821: CALL 78416 0 2
84825: ST_TO_ADDR
// if result then
84826: LD_VAR 0 2
84830: IFFALSE 84836
// exit ;
84832: POP
84833: POP
84834: GO 84840
// end ;
84836: GO 84805
84838: POP
84839: POP
// end ;
84840: LD_VAR 0 2
84844: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
84845: LD_INT 0
84847: PPUSH
84848: PPUSH
// if not units then
84849: LD_VAR 0 1
84853: NOT
84854: IFFALSE 84858
// exit ;
84856: GO 84928
// result := [ ] ;
84858: LD_ADDR_VAR 0 3
84862: PUSH
84863: EMPTY
84864: ST_TO_ADDR
// for i in units do
84865: LD_ADDR_VAR 0 4
84869: PUSH
84870: LD_VAR 0 1
84874: PUSH
84875: FOR_IN
84876: IFFALSE 84926
// if GetTag ( i ) = tag then
84878: LD_VAR 0 4
84882: PPUSH
84883: CALL_OW 110
84887: PUSH
84888: LD_VAR 0 2
84892: EQUAL
84893: IFFALSE 84924
// result := Insert ( result , result + 1 , i ) ;
84895: LD_ADDR_VAR 0 3
84899: PUSH
84900: LD_VAR 0 3
84904: PPUSH
84905: LD_VAR 0 3
84909: PUSH
84910: LD_INT 1
84912: PLUS
84913: PPUSH
84914: LD_VAR 0 4
84918: PPUSH
84919: CALL_OW 2
84923: ST_TO_ADDR
84924: GO 84875
84926: POP
84927: POP
// end ;
84928: LD_VAR 0 3
84932: RET
// export function IsDriver ( un ) ; begin
84933: LD_INT 0
84935: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84936: LD_ADDR_VAR 0 2
84940: PUSH
84941: LD_VAR 0 1
84945: PUSH
84946: LD_INT 55
84948: PUSH
84949: EMPTY
84950: LIST
84951: PPUSH
84952: CALL_OW 69
84956: IN
84957: ST_TO_ADDR
// end ;
84958: LD_VAR 0 2
84962: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
84963: LD_INT 0
84965: PPUSH
84966: PPUSH
// list := [ ] ;
84967: LD_ADDR_VAR 0 5
84971: PUSH
84972: EMPTY
84973: ST_TO_ADDR
// case d of 0 :
84974: LD_VAR 0 3
84978: PUSH
84979: LD_INT 0
84981: DOUBLE
84982: EQUAL
84983: IFTRUE 84987
84985: GO 85120
84987: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84988: LD_ADDR_VAR 0 5
84992: PUSH
84993: LD_VAR 0 1
84997: PUSH
84998: LD_INT 4
85000: MINUS
85001: PUSH
85002: LD_VAR 0 2
85006: PUSH
85007: LD_INT 4
85009: MINUS
85010: PUSH
85011: LD_INT 2
85013: PUSH
85014: EMPTY
85015: LIST
85016: LIST
85017: LIST
85018: PUSH
85019: LD_VAR 0 1
85023: PUSH
85024: LD_INT 3
85026: MINUS
85027: PUSH
85028: LD_VAR 0 2
85032: PUSH
85033: LD_INT 1
85035: PUSH
85036: EMPTY
85037: LIST
85038: LIST
85039: LIST
85040: PUSH
85041: LD_VAR 0 1
85045: PUSH
85046: LD_INT 4
85048: PLUS
85049: PUSH
85050: LD_VAR 0 2
85054: PUSH
85055: LD_INT 4
85057: PUSH
85058: EMPTY
85059: LIST
85060: LIST
85061: LIST
85062: PUSH
85063: LD_VAR 0 1
85067: PUSH
85068: LD_INT 3
85070: PLUS
85071: PUSH
85072: LD_VAR 0 2
85076: PUSH
85077: LD_INT 3
85079: PLUS
85080: PUSH
85081: LD_INT 5
85083: PUSH
85084: EMPTY
85085: LIST
85086: LIST
85087: LIST
85088: PUSH
85089: LD_VAR 0 1
85093: PUSH
85094: LD_VAR 0 2
85098: PUSH
85099: LD_INT 4
85101: PLUS
85102: PUSH
85103: LD_INT 0
85105: PUSH
85106: EMPTY
85107: LIST
85108: LIST
85109: LIST
85110: PUSH
85111: EMPTY
85112: LIST
85113: LIST
85114: LIST
85115: LIST
85116: LIST
85117: ST_TO_ADDR
// end ; 1 :
85118: GO 85818
85120: LD_INT 1
85122: DOUBLE
85123: EQUAL
85124: IFTRUE 85128
85126: GO 85261
85128: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85129: LD_ADDR_VAR 0 5
85133: PUSH
85134: LD_VAR 0 1
85138: PUSH
85139: LD_VAR 0 2
85143: PUSH
85144: LD_INT 4
85146: MINUS
85147: PUSH
85148: LD_INT 3
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: LIST
85155: PUSH
85156: LD_VAR 0 1
85160: PUSH
85161: LD_INT 3
85163: MINUS
85164: PUSH
85165: LD_VAR 0 2
85169: PUSH
85170: LD_INT 3
85172: MINUS
85173: PUSH
85174: LD_INT 2
85176: PUSH
85177: EMPTY
85178: LIST
85179: LIST
85180: LIST
85181: PUSH
85182: LD_VAR 0 1
85186: PUSH
85187: LD_INT 4
85189: MINUS
85190: PUSH
85191: LD_VAR 0 2
85195: PUSH
85196: LD_INT 1
85198: PUSH
85199: EMPTY
85200: LIST
85201: LIST
85202: LIST
85203: PUSH
85204: LD_VAR 0 1
85208: PUSH
85209: LD_VAR 0 2
85213: PUSH
85214: LD_INT 3
85216: PLUS
85217: PUSH
85218: LD_INT 0
85220: PUSH
85221: EMPTY
85222: LIST
85223: LIST
85224: LIST
85225: PUSH
85226: LD_VAR 0 1
85230: PUSH
85231: LD_INT 4
85233: PLUS
85234: PUSH
85235: LD_VAR 0 2
85239: PUSH
85240: LD_INT 4
85242: PLUS
85243: PUSH
85244: LD_INT 5
85246: PUSH
85247: EMPTY
85248: LIST
85249: LIST
85250: LIST
85251: PUSH
85252: EMPTY
85253: LIST
85254: LIST
85255: LIST
85256: LIST
85257: LIST
85258: ST_TO_ADDR
// end ; 2 :
85259: GO 85818
85261: LD_INT 2
85263: DOUBLE
85264: EQUAL
85265: IFTRUE 85269
85267: GO 85398
85269: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85270: LD_ADDR_VAR 0 5
85274: PUSH
85275: LD_VAR 0 1
85279: PUSH
85280: LD_VAR 0 2
85284: PUSH
85285: LD_INT 3
85287: MINUS
85288: PUSH
85289: LD_INT 3
85291: PUSH
85292: EMPTY
85293: LIST
85294: LIST
85295: LIST
85296: PUSH
85297: LD_VAR 0 1
85301: PUSH
85302: LD_INT 4
85304: PLUS
85305: PUSH
85306: LD_VAR 0 2
85310: PUSH
85311: LD_INT 4
85313: PUSH
85314: EMPTY
85315: LIST
85316: LIST
85317: LIST
85318: PUSH
85319: LD_VAR 0 1
85323: PUSH
85324: LD_VAR 0 2
85328: PUSH
85329: LD_INT 4
85331: PLUS
85332: PUSH
85333: LD_INT 0
85335: PUSH
85336: EMPTY
85337: LIST
85338: LIST
85339: LIST
85340: PUSH
85341: LD_VAR 0 1
85345: PUSH
85346: LD_INT 3
85348: MINUS
85349: PUSH
85350: LD_VAR 0 2
85354: PUSH
85355: LD_INT 1
85357: PUSH
85358: EMPTY
85359: LIST
85360: LIST
85361: LIST
85362: PUSH
85363: LD_VAR 0 1
85367: PUSH
85368: LD_INT 4
85370: MINUS
85371: PUSH
85372: LD_VAR 0 2
85376: PUSH
85377: LD_INT 4
85379: MINUS
85380: PUSH
85381: LD_INT 2
85383: PUSH
85384: EMPTY
85385: LIST
85386: LIST
85387: LIST
85388: PUSH
85389: EMPTY
85390: LIST
85391: LIST
85392: LIST
85393: LIST
85394: LIST
85395: ST_TO_ADDR
// end ; 3 :
85396: GO 85818
85398: LD_INT 3
85400: DOUBLE
85401: EQUAL
85402: IFTRUE 85406
85404: GO 85539
85406: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85407: LD_ADDR_VAR 0 5
85411: PUSH
85412: LD_VAR 0 1
85416: PUSH
85417: LD_INT 3
85419: PLUS
85420: PUSH
85421: LD_VAR 0 2
85425: PUSH
85426: LD_INT 4
85428: PUSH
85429: EMPTY
85430: LIST
85431: LIST
85432: LIST
85433: PUSH
85434: LD_VAR 0 1
85438: PUSH
85439: LD_INT 4
85441: PLUS
85442: PUSH
85443: LD_VAR 0 2
85447: PUSH
85448: LD_INT 4
85450: PLUS
85451: PUSH
85452: LD_INT 5
85454: PUSH
85455: EMPTY
85456: LIST
85457: LIST
85458: LIST
85459: PUSH
85460: LD_VAR 0 1
85464: PUSH
85465: LD_INT 4
85467: MINUS
85468: PUSH
85469: LD_VAR 0 2
85473: PUSH
85474: LD_INT 1
85476: PUSH
85477: EMPTY
85478: LIST
85479: LIST
85480: LIST
85481: PUSH
85482: LD_VAR 0 1
85486: PUSH
85487: LD_VAR 0 2
85491: PUSH
85492: LD_INT 4
85494: MINUS
85495: PUSH
85496: LD_INT 3
85498: PUSH
85499: EMPTY
85500: LIST
85501: LIST
85502: LIST
85503: PUSH
85504: LD_VAR 0 1
85508: PUSH
85509: LD_INT 3
85511: MINUS
85512: PUSH
85513: LD_VAR 0 2
85517: PUSH
85518: LD_INT 3
85520: MINUS
85521: PUSH
85522: LD_INT 2
85524: PUSH
85525: EMPTY
85526: LIST
85527: LIST
85528: LIST
85529: PUSH
85530: EMPTY
85531: LIST
85532: LIST
85533: LIST
85534: LIST
85535: LIST
85536: ST_TO_ADDR
// end ; 4 :
85537: GO 85818
85539: LD_INT 4
85541: DOUBLE
85542: EQUAL
85543: IFTRUE 85547
85545: GO 85680
85547: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85548: LD_ADDR_VAR 0 5
85552: PUSH
85553: LD_VAR 0 1
85557: PUSH
85558: LD_VAR 0 2
85562: PUSH
85563: LD_INT 4
85565: PLUS
85566: PUSH
85567: LD_INT 0
85569: PUSH
85570: EMPTY
85571: LIST
85572: LIST
85573: LIST
85574: PUSH
85575: LD_VAR 0 1
85579: PUSH
85580: LD_INT 3
85582: PLUS
85583: PUSH
85584: LD_VAR 0 2
85588: PUSH
85589: LD_INT 3
85591: PLUS
85592: PUSH
85593: LD_INT 5
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: LIST
85600: PUSH
85601: LD_VAR 0 1
85605: PUSH
85606: LD_INT 4
85608: PLUS
85609: PUSH
85610: LD_VAR 0 2
85614: PUSH
85615: LD_INT 4
85617: PUSH
85618: EMPTY
85619: LIST
85620: LIST
85621: LIST
85622: PUSH
85623: LD_VAR 0 1
85627: PUSH
85628: LD_VAR 0 2
85632: PUSH
85633: LD_INT 3
85635: MINUS
85636: PUSH
85637: LD_INT 3
85639: PUSH
85640: EMPTY
85641: LIST
85642: LIST
85643: LIST
85644: PUSH
85645: LD_VAR 0 1
85649: PUSH
85650: LD_INT 4
85652: MINUS
85653: PUSH
85654: LD_VAR 0 2
85658: PUSH
85659: LD_INT 4
85661: MINUS
85662: PUSH
85663: LD_INT 2
85665: PUSH
85666: EMPTY
85667: LIST
85668: LIST
85669: LIST
85670: PUSH
85671: EMPTY
85672: LIST
85673: LIST
85674: LIST
85675: LIST
85676: LIST
85677: ST_TO_ADDR
// end ; 5 :
85678: GO 85818
85680: LD_INT 5
85682: DOUBLE
85683: EQUAL
85684: IFTRUE 85688
85686: GO 85817
85688: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85689: LD_ADDR_VAR 0 5
85693: PUSH
85694: LD_VAR 0 1
85698: PUSH
85699: LD_INT 4
85701: MINUS
85702: PUSH
85703: LD_VAR 0 2
85707: PUSH
85708: LD_INT 1
85710: PUSH
85711: EMPTY
85712: LIST
85713: LIST
85714: LIST
85715: PUSH
85716: LD_VAR 0 1
85720: PUSH
85721: LD_VAR 0 2
85725: PUSH
85726: LD_INT 4
85728: MINUS
85729: PUSH
85730: LD_INT 3
85732: PUSH
85733: EMPTY
85734: LIST
85735: LIST
85736: LIST
85737: PUSH
85738: LD_VAR 0 1
85742: PUSH
85743: LD_INT 4
85745: PLUS
85746: PUSH
85747: LD_VAR 0 2
85751: PUSH
85752: LD_INT 4
85754: PLUS
85755: PUSH
85756: LD_INT 5
85758: PUSH
85759: EMPTY
85760: LIST
85761: LIST
85762: LIST
85763: PUSH
85764: LD_VAR 0 1
85768: PUSH
85769: LD_INT 3
85771: PLUS
85772: PUSH
85773: LD_VAR 0 2
85777: PUSH
85778: LD_INT 4
85780: PUSH
85781: EMPTY
85782: LIST
85783: LIST
85784: LIST
85785: PUSH
85786: LD_VAR 0 1
85790: PUSH
85791: LD_VAR 0 2
85795: PUSH
85796: LD_INT 3
85798: PLUS
85799: PUSH
85800: LD_INT 0
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: LIST
85807: PUSH
85808: EMPTY
85809: LIST
85810: LIST
85811: LIST
85812: LIST
85813: LIST
85814: ST_TO_ADDR
// end ; end ;
85815: GO 85818
85817: POP
// result := list ;
85818: LD_ADDR_VAR 0 4
85822: PUSH
85823: LD_VAR 0 5
85827: ST_TO_ADDR
// end ;
85828: LD_VAR 0 4
85832: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85833: LD_INT 0
85835: PPUSH
85836: PPUSH
85837: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85838: LD_VAR 0 1
85842: NOT
85843: PUSH
85844: LD_VAR 0 2
85848: PUSH
85849: LD_INT 1
85851: PUSH
85852: LD_INT 2
85854: PUSH
85855: LD_INT 3
85857: PUSH
85858: LD_INT 4
85860: PUSH
85861: EMPTY
85862: LIST
85863: LIST
85864: LIST
85865: LIST
85866: IN
85867: NOT
85868: OR
85869: IFFALSE 85873
// exit ;
85871: GO 85965
// tmp := [ ] ;
85873: LD_ADDR_VAR 0 5
85877: PUSH
85878: EMPTY
85879: ST_TO_ADDR
// for i in units do
85880: LD_ADDR_VAR 0 4
85884: PUSH
85885: LD_VAR 0 1
85889: PUSH
85890: FOR_IN
85891: IFFALSE 85934
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85893: LD_ADDR_VAR 0 5
85897: PUSH
85898: LD_VAR 0 5
85902: PPUSH
85903: LD_VAR 0 5
85907: PUSH
85908: LD_INT 1
85910: PLUS
85911: PPUSH
85912: LD_VAR 0 4
85916: PPUSH
85917: LD_VAR 0 2
85921: PPUSH
85922: CALL_OW 259
85926: PPUSH
85927: CALL_OW 2
85931: ST_TO_ADDR
85932: GO 85890
85934: POP
85935: POP
// if not tmp then
85936: LD_VAR 0 5
85940: NOT
85941: IFFALSE 85945
// exit ;
85943: GO 85965
// result := SortListByListDesc ( units , tmp ) ;
85945: LD_ADDR_VAR 0 3
85949: PUSH
85950: LD_VAR 0 1
85954: PPUSH
85955: LD_VAR 0 5
85959: PPUSH
85960: CALL_OW 77
85964: ST_TO_ADDR
// end ;
85965: LD_VAR 0 3
85969: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
85970: LD_INT 0
85972: PPUSH
85973: PPUSH
85974: PPUSH
// x := GetX ( building ) ;
85975: LD_ADDR_VAR 0 4
85979: PUSH
85980: LD_VAR 0 2
85984: PPUSH
85985: CALL_OW 250
85989: ST_TO_ADDR
// y := GetY ( building ) ;
85990: LD_ADDR_VAR 0 5
85994: PUSH
85995: LD_VAR 0 2
85999: PPUSH
86000: CALL_OW 251
86004: ST_TO_ADDR
// if GetTaskList ( unit ) then
86005: LD_VAR 0 1
86009: PPUSH
86010: CALL_OW 437
86014: IFFALSE 86109
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86016: LD_STRING e
86018: PUSH
86019: LD_VAR 0 1
86023: PPUSH
86024: CALL_OW 437
86028: PUSH
86029: LD_INT 1
86031: ARRAY
86032: PUSH
86033: LD_INT 1
86035: ARRAY
86036: EQUAL
86037: PUSH
86038: LD_VAR 0 4
86042: PUSH
86043: LD_VAR 0 1
86047: PPUSH
86048: CALL_OW 437
86052: PUSH
86053: LD_INT 1
86055: ARRAY
86056: PUSH
86057: LD_INT 2
86059: ARRAY
86060: EQUAL
86061: AND
86062: PUSH
86063: LD_VAR 0 5
86067: PUSH
86068: LD_VAR 0 1
86072: PPUSH
86073: CALL_OW 437
86077: PUSH
86078: LD_INT 1
86080: ARRAY
86081: PUSH
86082: LD_INT 3
86084: ARRAY
86085: EQUAL
86086: AND
86087: IFFALSE 86099
// result := true else
86089: LD_ADDR_VAR 0 3
86093: PUSH
86094: LD_INT 1
86096: ST_TO_ADDR
86097: GO 86107
// result := false ;
86099: LD_ADDR_VAR 0 3
86103: PUSH
86104: LD_INT 0
86106: ST_TO_ADDR
// end else
86107: GO 86117
// result := false ;
86109: LD_ADDR_VAR 0 3
86113: PUSH
86114: LD_INT 0
86116: ST_TO_ADDR
// end ;
86117: LD_VAR 0 3
86121: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86122: LD_INT 0
86124: PPUSH
86125: PPUSH
86126: PPUSH
86127: PPUSH
// if not unit or not area then
86128: LD_VAR 0 1
86132: NOT
86133: PUSH
86134: LD_VAR 0 2
86138: NOT
86139: OR
86140: IFFALSE 86144
// exit ;
86142: GO 86309
// tmp := AreaToList ( area , i ) ;
86144: LD_ADDR_VAR 0 6
86148: PUSH
86149: LD_VAR 0 2
86153: PPUSH
86154: LD_VAR 0 5
86158: PPUSH
86159: CALL_OW 517
86163: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86164: LD_ADDR_VAR 0 5
86168: PUSH
86169: DOUBLE
86170: LD_INT 1
86172: DEC
86173: ST_TO_ADDR
86174: LD_VAR 0 6
86178: PUSH
86179: LD_INT 1
86181: ARRAY
86182: PUSH
86183: FOR_TO
86184: IFFALSE 86299
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86186: LD_ADDR_VAR 0 7
86190: PUSH
86191: LD_VAR 0 6
86195: PUSH
86196: LD_INT 1
86198: ARRAY
86199: PUSH
86200: LD_VAR 0 5
86204: ARRAY
86205: PUSH
86206: LD_VAR 0 6
86210: PUSH
86211: LD_INT 2
86213: ARRAY
86214: PUSH
86215: LD_VAR 0 5
86219: ARRAY
86220: PUSH
86221: EMPTY
86222: LIST
86223: LIST
86224: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86225: LD_VAR 0 7
86229: PUSH
86230: LD_INT 1
86232: ARRAY
86233: PPUSH
86234: LD_VAR 0 7
86238: PUSH
86239: LD_INT 2
86241: ARRAY
86242: PPUSH
86243: CALL_OW 428
86247: PUSH
86248: LD_INT 0
86250: EQUAL
86251: IFFALSE 86297
// begin result := true ;
86253: LD_ADDR_VAR 0 4
86257: PUSH
86258: LD_INT 1
86260: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86261: LD_VAR 0 1
86265: PPUSH
86266: LD_VAR 0 7
86270: PUSH
86271: LD_INT 1
86273: ARRAY
86274: PPUSH
86275: LD_VAR 0 7
86279: PUSH
86280: LD_INT 2
86282: ARRAY
86283: PPUSH
86284: LD_VAR 0 3
86288: PPUSH
86289: CALL_OW 48
// exit ;
86293: POP
86294: POP
86295: GO 86309
// end ; end ;
86297: GO 86183
86299: POP
86300: POP
// result := false ;
86301: LD_ADDR_VAR 0 4
86305: PUSH
86306: LD_INT 0
86308: ST_TO_ADDR
// end ;
86309: LD_VAR 0 4
86313: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86314: LD_INT 0
86316: PPUSH
86317: PPUSH
86318: PPUSH
// if not side or side > 8 then
86319: LD_VAR 0 1
86323: NOT
86324: PUSH
86325: LD_VAR 0 1
86329: PUSH
86330: LD_INT 8
86332: GREATER
86333: OR
86334: IFFALSE 86338
// exit ;
86336: GO 86525
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86338: LD_ADDR_VAR 0 4
86342: PUSH
86343: LD_INT 22
86345: PUSH
86346: LD_VAR 0 1
86350: PUSH
86351: EMPTY
86352: LIST
86353: LIST
86354: PUSH
86355: LD_INT 21
86357: PUSH
86358: LD_INT 3
86360: PUSH
86361: EMPTY
86362: LIST
86363: LIST
86364: PUSH
86365: EMPTY
86366: LIST
86367: LIST
86368: PPUSH
86369: CALL_OW 69
86373: ST_TO_ADDR
// if not tmp then
86374: LD_VAR 0 4
86378: NOT
86379: IFFALSE 86383
// exit ;
86381: GO 86525
// enable_addtolog := true ;
86383: LD_ADDR_OWVAR 81
86387: PUSH
86388: LD_INT 1
86390: ST_TO_ADDR
// AddToLog ( [ ) ;
86391: LD_STRING [
86393: PPUSH
86394: CALL_OW 561
// for i in tmp do
86398: LD_ADDR_VAR 0 3
86402: PUSH
86403: LD_VAR 0 4
86407: PUSH
86408: FOR_IN
86409: IFFALSE 86516
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86411: LD_STRING [
86413: PUSH
86414: LD_VAR 0 3
86418: PPUSH
86419: CALL_OW 266
86423: STR
86424: PUSH
86425: LD_STRING , 
86427: STR
86428: PUSH
86429: LD_VAR 0 3
86433: PPUSH
86434: CALL_OW 250
86438: STR
86439: PUSH
86440: LD_STRING , 
86442: STR
86443: PUSH
86444: LD_VAR 0 3
86448: PPUSH
86449: CALL_OW 251
86453: STR
86454: PUSH
86455: LD_STRING , 
86457: STR
86458: PUSH
86459: LD_VAR 0 3
86463: PPUSH
86464: CALL_OW 254
86468: STR
86469: PUSH
86470: LD_STRING , 
86472: STR
86473: PUSH
86474: LD_VAR 0 3
86478: PPUSH
86479: LD_INT 1
86481: PPUSH
86482: CALL_OW 268
86486: STR
86487: PUSH
86488: LD_STRING , 
86490: STR
86491: PUSH
86492: LD_VAR 0 3
86496: PPUSH
86497: LD_INT 2
86499: PPUSH
86500: CALL_OW 268
86504: STR
86505: PUSH
86506: LD_STRING ],
86508: STR
86509: PPUSH
86510: CALL_OW 561
// end ;
86514: GO 86408
86516: POP
86517: POP
// AddToLog ( ]; ) ;
86518: LD_STRING ];
86520: PPUSH
86521: CALL_OW 561
// end ;
86525: LD_VAR 0 2
86529: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86530: LD_INT 0
86532: PPUSH
86533: PPUSH
86534: PPUSH
86535: PPUSH
86536: PPUSH
// if not area or not rate or not max then
86537: LD_VAR 0 1
86541: NOT
86542: PUSH
86543: LD_VAR 0 2
86547: NOT
86548: OR
86549: PUSH
86550: LD_VAR 0 4
86554: NOT
86555: OR
86556: IFFALSE 86560
// exit ;
86558: GO 86752
// while 1 do
86560: LD_INT 1
86562: IFFALSE 86752
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86564: LD_ADDR_VAR 0 9
86568: PUSH
86569: LD_VAR 0 1
86573: PPUSH
86574: LD_INT 1
86576: PPUSH
86577: CALL_OW 287
86581: PUSH
86582: LD_INT 10
86584: MUL
86585: ST_TO_ADDR
// r := rate / 10 ;
86586: LD_ADDR_VAR 0 7
86590: PUSH
86591: LD_VAR 0 2
86595: PUSH
86596: LD_INT 10
86598: DIVREAL
86599: ST_TO_ADDR
// time := 1 1$00 ;
86600: LD_ADDR_VAR 0 8
86604: PUSH
86605: LD_INT 2100
86607: ST_TO_ADDR
// if amount < min then
86608: LD_VAR 0 9
86612: PUSH
86613: LD_VAR 0 3
86617: LESS
86618: IFFALSE 86636
// r := r * 2 else
86620: LD_ADDR_VAR 0 7
86624: PUSH
86625: LD_VAR 0 7
86629: PUSH
86630: LD_INT 2
86632: MUL
86633: ST_TO_ADDR
86634: GO 86662
// if amount > max then
86636: LD_VAR 0 9
86640: PUSH
86641: LD_VAR 0 4
86645: GREATER
86646: IFFALSE 86662
// r := r / 2 ;
86648: LD_ADDR_VAR 0 7
86652: PUSH
86653: LD_VAR 0 7
86657: PUSH
86658: LD_INT 2
86660: DIVREAL
86661: ST_TO_ADDR
// time := time / r ;
86662: LD_ADDR_VAR 0 8
86666: PUSH
86667: LD_VAR 0 8
86671: PUSH
86672: LD_VAR 0 7
86676: DIVREAL
86677: ST_TO_ADDR
// if time < 0 then
86678: LD_VAR 0 8
86682: PUSH
86683: LD_INT 0
86685: LESS
86686: IFFALSE 86703
// time := time * - 1 ;
86688: LD_ADDR_VAR 0 8
86692: PUSH
86693: LD_VAR 0 8
86697: PUSH
86698: LD_INT 1
86700: NEG
86701: MUL
86702: ST_TO_ADDR
// wait ( time ) ;
86703: LD_VAR 0 8
86707: PPUSH
86708: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
86712: LD_INT 35
86714: PPUSH
86715: LD_INT 875
86717: PPUSH
86718: CALL_OW 12
86722: PPUSH
86723: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
86727: LD_INT 1
86729: PPUSH
86730: LD_INT 5
86732: PPUSH
86733: CALL_OW 12
86737: PPUSH
86738: LD_VAR 0 1
86742: PPUSH
86743: LD_INT 1
86745: PPUSH
86746: CALL_OW 55
// end ;
86750: GO 86560
// end ;
86752: LD_VAR 0 5
86756: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86757: LD_INT 0
86759: PPUSH
86760: PPUSH
86761: PPUSH
86762: PPUSH
86763: PPUSH
86764: PPUSH
86765: PPUSH
86766: PPUSH
// if not turrets or not factories then
86767: LD_VAR 0 1
86771: NOT
86772: PUSH
86773: LD_VAR 0 2
86777: NOT
86778: OR
86779: IFFALSE 86783
// exit ;
86781: GO 87090
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86783: LD_ADDR_VAR 0 10
86787: PUSH
86788: LD_INT 5
86790: PUSH
86791: LD_INT 6
86793: PUSH
86794: EMPTY
86795: LIST
86796: LIST
86797: PUSH
86798: LD_INT 2
86800: PUSH
86801: LD_INT 4
86803: PUSH
86804: EMPTY
86805: LIST
86806: LIST
86807: PUSH
86808: LD_INT 3
86810: PUSH
86811: LD_INT 5
86813: PUSH
86814: EMPTY
86815: LIST
86816: LIST
86817: PUSH
86818: EMPTY
86819: LIST
86820: LIST
86821: LIST
86822: PUSH
86823: LD_INT 24
86825: PUSH
86826: LD_INT 25
86828: PUSH
86829: EMPTY
86830: LIST
86831: LIST
86832: PUSH
86833: LD_INT 23
86835: PUSH
86836: LD_INT 27
86838: PUSH
86839: EMPTY
86840: LIST
86841: LIST
86842: PUSH
86843: EMPTY
86844: LIST
86845: LIST
86846: PUSH
86847: LD_INT 42
86849: PUSH
86850: LD_INT 43
86852: PUSH
86853: EMPTY
86854: LIST
86855: LIST
86856: PUSH
86857: LD_INT 44
86859: PUSH
86860: LD_INT 46
86862: PUSH
86863: EMPTY
86864: LIST
86865: LIST
86866: PUSH
86867: LD_INT 45
86869: PUSH
86870: LD_INT 47
86872: PUSH
86873: EMPTY
86874: LIST
86875: LIST
86876: PUSH
86877: EMPTY
86878: LIST
86879: LIST
86880: LIST
86881: PUSH
86882: EMPTY
86883: LIST
86884: LIST
86885: LIST
86886: ST_TO_ADDR
// result := [ ] ;
86887: LD_ADDR_VAR 0 3
86891: PUSH
86892: EMPTY
86893: ST_TO_ADDR
// for i in turrets do
86894: LD_ADDR_VAR 0 4
86898: PUSH
86899: LD_VAR 0 1
86903: PUSH
86904: FOR_IN
86905: IFFALSE 87088
// begin nat := GetNation ( i ) ;
86907: LD_ADDR_VAR 0 7
86911: PUSH
86912: LD_VAR 0 4
86916: PPUSH
86917: CALL_OW 248
86921: ST_TO_ADDR
// weapon := 0 ;
86922: LD_ADDR_VAR 0 8
86926: PUSH
86927: LD_INT 0
86929: ST_TO_ADDR
// if not nat then
86930: LD_VAR 0 7
86934: NOT
86935: IFFALSE 86939
// continue ;
86937: GO 86904
// for j in list [ nat ] do
86939: LD_ADDR_VAR 0 5
86943: PUSH
86944: LD_VAR 0 10
86948: PUSH
86949: LD_VAR 0 7
86953: ARRAY
86954: PUSH
86955: FOR_IN
86956: IFFALSE 86997
// if GetBWeapon ( i ) = j [ 1 ] then
86958: LD_VAR 0 4
86962: PPUSH
86963: CALL_OW 269
86967: PUSH
86968: LD_VAR 0 5
86972: PUSH
86973: LD_INT 1
86975: ARRAY
86976: EQUAL
86977: IFFALSE 86995
// begin weapon := j [ 2 ] ;
86979: LD_ADDR_VAR 0 8
86983: PUSH
86984: LD_VAR 0 5
86988: PUSH
86989: LD_INT 2
86991: ARRAY
86992: ST_TO_ADDR
// break ;
86993: GO 86997
// end ;
86995: GO 86955
86997: POP
86998: POP
// if not weapon then
86999: LD_VAR 0 8
87003: NOT
87004: IFFALSE 87008
// continue ;
87006: GO 86904
// for k in factories do
87008: LD_ADDR_VAR 0 6
87012: PUSH
87013: LD_VAR 0 2
87017: PUSH
87018: FOR_IN
87019: IFFALSE 87084
// begin weapons := AvailableWeaponList ( k ) ;
87021: LD_ADDR_VAR 0 9
87025: PUSH
87026: LD_VAR 0 6
87030: PPUSH
87031: CALL_OW 478
87035: ST_TO_ADDR
// if not weapons then
87036: LD_VAR 0 9
87040: NOT
87041: IFFALSE 87045
// continue ;
87043: GO 87018
// if weapon in weapons then
87045: LD_VAR 0 8
87049: PUSH
87050: LD_VAR 0 9
87054: IN
87055: IFFALSE 87082
// begin result := [ i , weapon ] ;
87057: LD_ADDR_VAR 0 3
87061: PUSH
87062: LD_VAR 0 4
87066: PUSH
87067: LD_VAR 0 8
87071: PUSH
87072: EMPTY
87073: LIST
87074: LIST
87075: ST_TO_ADDR
// exit ;
87076: POP
87077: POP
87078: POP
87079: POP
87080: GO 87090
// end ; end ;
87082: GO 87018
87084: POP
87085: POP
// end ;
87086: GO 86904
87088: POP
87089: POP
// end ;
87090: LD_VAR 0 3
87094: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87095: LD_INT 0
87097: PPUSH
// if not side or side > 8 then
87098: LD_VAR 0 3
87102: NOT
87103: PUSH
87104: LD_VAR 0 3
87108: PUSH
87109: LD_INT 8
87111: GREATER
87112: OR
87113: IFFALSE 87117
// exit ;
87115: GO 87176
// if not range then
87117: LD_VAR 0 4
87121: NOT
87122: IFFALSE 87133
// range := - 12 ;
87124: LD_ADDR_VAR 0 4
87128: PUSH
87129: LD_INT 12
87131: NEG
87132: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87133: LD_VAR 0 1
87137: PPUSH
87138: LD_VAR 0 2
87142: PPUSH
87143: LD_VAR 0 3
87147: PPUSH
87148: LD_VAR 0 4
87152: PPUSH
87153: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87157: LD_VAR 0 1
87161: PPUSH
87162: LD_VAR 0 2
87166: PPUSH
87167: LD_VAR 0 3
87171: PPUSH
87172: CALL_OW 331
// end ;
87176: LD_VAR 0 5
87180: RET
// export function Video ( mode ) ; begin
87181: LD_INT 0
87183: PPUSH
// ingame_video = mode ;
87184: LD_ADDR_OWVAR 52
87188: PUSH
87189: LD_VAR 0 1
87193: ST_TO_ADDR
// interface_hidden = mode ;
87194: LD_ADDR_OWVAR 54
87198: PUSH
87199: LD_VAR 0 1
87203: ST_TO_ADDR
// end ;
87204: LD_VAR 0 2
87208: RET
// export function Join ( array , element ) ; begin
87209: LD_INT 0
87211: PPUSH
// result := array ^ element ;
87212: LD_ADDR_VAR 0 3
87216: PUSH
87217: LD_VAR 0 1
87221: PUSH
87222: LD_VAR 0 2
87226: ADD
87227: ST_TO_ADDR
// end ;
87228: LD_VAR 0 3
87232: RET
// export function JoinUnion ( array , element ) ; begin
87233: LD_INT 0
87235: PPUSH
// result := array union element ;
87236: LD_ADDR_VAR 0 3
87240: PUSH
87241: LD_VAR 0 1
87245: PUSH
87246: LD_VAR 0 2
87250: UNION
87251: ST_TO_ADDR
// end ;
87252: LD_VAR 0 3
87256: RET
// export function GetBehemoths ( side ) ; begin
87257: LD_INT 0
87259: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
87260: LD_ADDR_VAR 0 2
87264: PUSH
87265: LD_INT 22
87267: PUSH
87268: LD_VAR 0 1
87272: PUSH
87273: EMPTY
87274: LIST
87275: LIST
87276: PUSH
87277: LD_INT 31
87279: PUSH
87280: LD_INT 25
87282: PUSH
87283: EMPTY
87284: LIST
87285: LIST
87286: PUSH
87287: EMPTY
87288: LIST
87289: LIST
87290: PPUSH
87291: CALL_OW 69
87295: ST_TO_ADDR
// end ;
87296: LD_VAR 0 2
87300: RET
// export function Shuffle ( array ) ; var i , index ; begin
87301: LD_INT 0
87303: PPUSH
87304: PPUSH
87305: PPUSH
// result := [ ] ;
87306: LD_ADDR_VAR 0 2
87310: PUSH
87311: EMPTY
87312: ST_TO_ADDR
// if not array then
87313: LD_VAR 0 1
87317: NOT
87318: IFFALSE 87322
// exit ;
87320: GO 87421
// Randomize ;
87322: CALL_OW 10
// for i = array downto 1 do
87326: LD_ADDR_VAR 0 3
87330: PUSH
87331: DOUBLE
87332: LD_VAR 0 1
87336: INC
87337: ST_TO_ADDR
87338: LD_INT 1
87340: PUSH
87341: FOR_DOWNTO
87342: IFFALSE 87419
// begin index := rand ( 1 , array ) ;
87344: LD_ADDR_VAR 0 4
87348: PUSH
87349: LD_INT 1
87351: PPUSH
87352: LD_VAR 0 1
87356: PPUSH
87357: CALL_OW 12
87361: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87362: LD_ADDR_VAR 0 2
87366: PUSH
87367: LD_VAR 0 2
87371: PPUSH
87372: LD_VAR 0 2
87376: PUSH
87377: LD_INT 1
87379: PLUS
87380: PPUSH
87381: LD_VAR 0 1
87385: PUSH
87386: LD_VAR 0 4
87390: ARRAY
87391: PPUSH
87392: CALL_OW 2
87396: ST_TO_ADDR
// array := Delete ( array , index ) ;
87397: LD_ADDR_VAR 0 1
87401: PUSH
87402: LD_VAR 0 1
87406: PPUSH
87407: LD_VAR 0 4
87411: PPUSH
87412: CALL_OW 3
87416: ST_TO_ADDR
// end ;
87417: GO 87341
87419: POP
87420: POP
// end ; end_of_file
87421: LD_VAR 0 2
87425: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
87426: GO 87428
87428: DISABLE
// begin ru_radar := 98 ;
87429: LD_ADDR_EXP 92
87433: PUSH
87434: LD_INT 98
87436: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
87437: LD_ADDR_EXP 93
87441: PUSH
87442: LD_INT 89
87444: ST_TO_ADDR
// us_hack := 99 ;
87445: LD_ADDR_EXP 94
87449: PUSH
87450: LD_INT 99
87452: ST_TO_ADDR
// us_artillery := 97 ;
87453: LD_ADDR_EXP 95
87457: PUSH
87458: LD_INT 97
87460: ST_TO_ADDR
// ar_bio_bomb := 91 ;
87461: LD_ADDR_EXP 96
87465: PUSH
87466: LD_INT 91
87468: ST_TO_ADDR
// end ;
87469: END
