// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 41
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 42
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 38
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 37
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 11
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 30
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 40
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 34
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 39
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 43
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 6057 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 1504 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 4862 0 0
// PrepareRussians ;
 229: CALL 5180 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 24
 291: PPUSH
 292: LD_EXP 25
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 7275 0 6
// PrepareCutsceneAttack ;
 312: CALL 4914 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 43
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun , tmp ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
// uc_side = 1 ;
 531: LD_ADDR_OWVAR 20
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// uc_nation = 1 ;
 539: LD_ADDR_OWVAR 21
 543: PUSH
 544: LD_INT 1
 546: ST_TO_ADDR
// if gammaCommander = 1 then
 547: LD_EXP 11
 551: PUSH
 552: LD_INT 1
 554: EQUAL
 555: IFFALSE 588
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 557: LD_ADDR_EXP 3
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL 5598 0 2
 572: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_INT 5
 580: PPUSH
 581: LD_INT 0
 583: PPUSH
 584: CALL_OW 49
// end ; if gammaCommander = 2 then
 588: LD_EXP 11
 592: PUSH
 593: LD_INT 2
 595: EQUAL
 596: IFFALSE 629
// begin Brown = PrepareUnit ( Brown , true ) ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_INT 1
 608: PPUSH
 609: CALL 5598 0 2
 613: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 614: LD_EXP 2
 618: PPUSH
 619: LD_INT 5
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
// end ; if gammaCommander = 3 then
 629: LD_EXP 11
 633: PUSH
 634: LD_INT 3
 636: EQUAL
 637: IFFALSE 670
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 639: LD_ADDR_EXP 12
 643: PUSH
 644: LD_STRING VanHouten
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: CALL 5598 0 2
 654: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 655: LD_EXP 12
 659: PPUSH
 660: LD_INT 5
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 670: LD_ADDR_EXP 21
 674: PUSH
 675: LD_STRING Harisson
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL 5598 0 2
 685: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 686: LD_ADDR_EXP 22
 690: PUSH
 691: LD_STRING Powell
 693: PPUSH
 694: LD_INT 0
 696: PPUSH
 697: CALL 5598 0 2
 701: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 702: LD_ADDR_EXP 10
 706: PUSH
 707: LD_STRING 07_othersGamma
 709: PPUSH
 710: CALL_OW 31
 714: ST_TO_ADDR
// tmp := 8 - others_gamma ;
 715: LD_ADDR_VAR 0 10
 719: PUSH
 720: LD_INT 8
 722: PUSH
 723: LD_EXP 10
 727: MINUS
 728: ST_TO_ADDR
// if tmp then
 729: LD_VAR 0 10
 733: IFFALSE 786
// for i = 1 to tmp do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_VAR 0 10
 749: PUSH
 750: FOR_TO
 751: IFFALSE 784
// begin PrepareHuman ( false , 1 , 5 ) ;
 753: LD_INT 0
 755: PPUSH
 756: LD_INT 1
 758: PPUSH
 759: LD_INT 5
 761: PPUSH
 762: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
 766: LD_ADDR_EXP 10
 770: PUSH
 771: LD_EXP 10
 775: PUSH
 776: CALL_OW 44
 780: ADD
 781: ST_TO_ADDR
// end ;
 782: GO 750
 784: POP
 785: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 786: LD_ADDR_VAR 0 5
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 5
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 820: LD_ADDR_VAR 0 4
 824: PUSH
 825: LD_INT 22
 827: PUSH
 828: LD_INT 1
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 2
 837: PUSH
 838: LD_INT 30
 840: PUSH
 841: LD_INT 6
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: LD_INT 30
 850: PUSH
 851: LD_INT 7
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: LD_INT 30
 860: PUSH
 861: LD_INT 8
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PPUSH
 878: CALL_OW 69
 882: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_INT 22
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 917: LD_ADDR_VAR 0 8
 921: PUSH
 922: LD_INT 22
 924: PUSH
 925: LD_INT 1
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 30
 934: PUSH
 935: LD_INT 36
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PPUSH
 946: CALL_OW 69
 950: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 951: LD_ADDR_VAR 0 9
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_INT 1
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: LD_INT 30
 971: PUSH
 972: LD_INT 31
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 32
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PPUSH
 998: CALL_OW 69
1002: ST_TO_ADDR
// for i in others_gamma do
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_EXP 10
1012: PUSH
1013: FOR_IN
1014: IFFALSE 1389
// begin placed := false ;
1016: LD_ADDR_VAR 0 7
1020: PUSH
1021: LD_INT 0
1023: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL_OW 257
1033: PUSH
1034: LD_INT 1
1036: EQUAL
1037: IFFALSE 1162
// begin if UnitFilter ( bun , [ f_empty ] ) then
1039: LD_VAR 0 9
1043: PPUSH
1044: LD_INT 58
1046: PUSH
1047: EMPTY
1048: LIST
1049: PPUSH
1050: CALL_OW 72
1054: IFFALSE 1093
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1056: LD_VAR 0 2
1060: PPUSH
1061: LD_VAR 0 9
1065: PPUSH
1066: LD_INT 58
1068: PUSH
1069: EMPTY
1070: LIST
1071: PPUSH
1072: CALL_OW 72
1076: PUSH
1077: LD_INT 1
1079: ARRAY
1080: PPUSH
1081: CALL_OW 52
// placed := true ;
1085: LD_ADDR_VAR 0 7
1089: PUSH
1090: LD_INT 1
1092: ST_TO_ADDR
// end ; if arm and not placed then
1093: LD_VAR 0 5
1097: PUSH
1098: LD_VAR 0 7
1102: NOT
1103: AND
1104: IFFALSE 1162
// begin for j in arm do
1106: LD_ADDR_VAR 0 6
1110: PUSH
1111: LD_VAR 0 5
1115: PUSH
1116: FOR_IN
1117: IFFALSE 1160
// if UnitsInside ( j ) < 6 then
1119: LD_VAR 0 6
1123: PPUSH
1124: CALL_OW 313
1128: PUSH
1129: LD_INT 6
1131: LESS
1132: IFFALSE 1158
// begin PlaceHumanInUnit ( i , j ) ;
1134: LD_VAR 0 2
1138: PPUSH
1139: LD_VAR 0 6
1143: PPUSH
1144: CALL_OW 52
// placed := true ;
1148: LD_ADDR_VAR 0 7
1152: PUSH
1153: LD_INT 1
1155: ST_TO_ADDR
// break ;
1156: GO 1160
// end ;
1158: GO 1116
1160: POP
1161: POP
// end ; end ; if GetClass ( i ) = 3 then
1162: LD_VAR 0 2
1166: PPUSH
1167: CALL_OW 257
1171: PUSH
1172: LD_INT 3
1174: EQUAL
1175: IFFALSE 1279
// if fac then
1177: LD_VAR 0 3
1181: IFFALSE 1279
// begin if ct then
1183: LD_VAR 0 8
1187: IFFALSE 1215
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1189: LD_VAR 0 2
1193: PPUSH
1194: LD_VAR 0 8
1198: PUSH
1199: LD_INT 1
1201: ARRAY
1202: PPUSH
1203: CALL_OW 52
// placed := true ;
1207: LD_ADDR_VAR 0 7
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
// end ; if placed then
1215: LD_VAR 0 7
1219: IFFALSE 1223
// continue ;
1221: GO 1013
// for j in fac do
1223: LD_ADDR_VAR 0 6
1227: PUSH
1228: LD_VAR 0 3
1232: PUSH
1233: FOR_IN
1234: IFFALSE 1277
// if UnitsInside ( j ) < 6 then
1236: LD_VAR 0 6
1240: PPUSH
1241: CALL_OW 313
1245: PUSH
1246: LD_INT 6
1248: LESS
1249: IFFALSE 1275
// begin PlaceHumanInUnit ( i , j ) ;
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_VAR 0 6
1260: PPUSH
1261: CALL_OW 52
// placed := true ;
1265: LD_ADDR_VAR 0 7
1269: PUSH
1270: LD_INT 1
1272: ST_TO_ADDR
// break ;
1273: GO 1277
// end ;
1275: GO 1233
1277: POP
1278: POP
// end ; if GetClass ( i ) = 4 then
1279: LD_VAR 0 2
1283: PPUSH
1284: CALL_OW 257
1288: PUSH
1289: LD_INT 4
1291: EQUAL
1292: IFFALSE 1356
// if lab then
1294: LD_VAR 0 4
1298: IFFALSE 1356
// begin for j in lab do
1300: LD_ADDR_VAR 0 6
1304: PUSH
1305: LD_VAR 0 4
1309: PUSH
1310: FOR_IN
1311: IFFALSE 1354
// if UnitsInside ( j ) < 6 then
1313: LD_VAR 0 6
1317: PPUSH
1318: CALL_OW 313
1322: PUSH
1323: LD_INT 6
1325: LESS
1326: IFFALSE 1352
// begin PlaceHumanInUnit ( i , j ) ;
1328: LD_VAR 0 2
1332: PPUSH
1333: LD_VAR 0 6
1337: PPUSH
1338: CALL_OW 52
// placed := true ;
1342: LD_ADDR_VAR 0 7
1346: PUSH
1347: LD_INT 1
1349: ST_TO_ADDR
// break ;
1350: GO 1354
// end ;
1352: GO 1310
1354: POP
1355: POP
// end ; if not placed then
1356: LD_VAR 0 7
1360: NOT
1361: IFFALSE 1387
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1363: LD_VAR 0 2
1367: PPUSH
1368: LD_INT 5
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// ComHold ( i ) ;
1378: LD_VAR 0 2
1382: PPUSH
1383: CALL_OW 140
// end ; end ;
1387: GO 1013
1389: POP
1390: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1391: LD_VAR 0 8
1395: PUSH
1396: LD_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: ARRAY
1404: PPUSH
1405: CALL_OW 313
1409: AND
1410: IFFALSE 1499
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1412: LD_ADDR_VAR 0 2
1416: PUSH
1417: LD_INT 22
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 33
1429: PUSH
1430: LD_INT 2
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PPUSH
1441: CALL_OW 69
1445: PUSH
1446: FOR_IN
1447: IFFALSE 1497
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_INT 1
1461: ARRAY
1462: PPUSH
1463: CALL_OW 313
1467: PUSH
1468: LD_INT 1
1470: PPUSH
1471: LD_VAR 0 8
1475: PUSH
1476: LD_INT 1
1478: ARRAY
1479: PPUSH
1480: CALL_OW 313
1484: PPUSH
1485: CALL_OW 12
1489: ARRAY
1490: PPUSH
1491: CALL_OW 135
1495: GO 1446
1497: POP
1498: POP
// end ; end ;
1499: LD_VAR 0 1
1503: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1504: LD_INT 0
1506: PPUSH
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1511: LD_INT 71
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1524: LD_ADDR_VAR 0 2
1528: PUSH
1529: LD_STRING GammaBase
1531: PPUSH
1532: EMPTY
1533: PPUSH
1534: CALL_OW 30
1538: ST_TO_ADDR
// uc_side := 1 ;
1539: LD_ADDR_OWVAR 20
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// uc_nation := 1 ;
1547: LD_ADDR_OWVAR 21
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// for i in blist do
1555: LD_ADDR_VAR 0 3
1559: PUSH
1560: LD_VAR 0 2
1564: PUSH
1565: FOR_IN
1566: IFFALSE 1974
// begin bc_type := i [ 1 ] ;
1568: LD_ADDR_OWVAR 42
1572: PUSH
1573: LD_VAR 0 3
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1582: LD_ADDR_OWVAR 43
1586: PUSH
1587: LD_VAR 0 3
1591: PUSH
1592: LD_INT 5
1594: ARRAY
1595: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1596: LD_VAR 0 3
1600: PUSH
1601: LD_INT 1
1603: ARRAY
1604: PUSH
1605: LD_INT 7
1607: PUSH
1608: LD_INT 8
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: IN
1615: IFFALSE 1671
// begin bc_kind1 := i [ 7 ] ;
1617: LD_ADDR_OWVAR 44
1621: PUSH
1622: LD_VAR 0 3
1626: PUSH
1627: LD_INT 7
1629: ARRAY
1630: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1631: LD_STRING 06_remoteVehs_1
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 30
1641: PUSH
1642: LD_INT 1
1644: EQUAL
1645: IFFALSE 1657
// begin bc_kind2 := 15 ;
1647: LD_ADDR_OWVAR 45
1651: PUSH
1652: LD_INT 15
1654: ST_TO_ADDR
// end else
1655: GO 1671
// begin bc_kind2 := i [ 8 ] ;
1657: LD_ADDR_OWVAR 45
1661: PUSH
1662: LD_VAR 0 3
1666: PUSH
1667: LD_INT 8
1669: ARRAY
1670: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1671: LD_OWVAR 42
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1797
// begin bc_type := b_warehouse ;
1681: LD_ADDR_OWVAR 42
1685: PUSH
1686: LD_INT 1
1688: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1689: LD_ADDR_EXP 36
1693: PUSH
1694: LD_VAR 0 3
1698: PUSH
1699: LD_INT 2
1701: ARRAY
1702: PPUSH
1703: LD_VAR 0 3
1707: PUSH
1708: LD_INT 3
1710: ARRAY
1711: PPUSH
1712: LD_VAR 0 3
1716: PUSH
1717: LD_INT 4
1719: ARRAY
1720: PPUSH
1721: CALL_OW 47
1725: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1726: LD_EXP 36
1730: PPUSH
1731: LD_STRING gamma
1733: PPUSH
1734: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1738: LD_EXP 36
1742: PPUSH
1743: CALL_OW 274
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_INT 200
1753: PUSH
1754: LD_INT 150
1756: PUSH
1757: LD_INT 100
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: LIST
1764: PUSH
1765: LD_OWVAR 67
1769: ARRAY
1770: PPUSH
1771: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1775: LD_EXP 36
1779: PPUSH
1780: CALL_OW 274
1784: PPUSH
1785: LD_INT 2
1787: PPUSH
1788: LD_INT 200
1790: PPUSH
1791: CALL_OW 277
// end else
1795: GO 1939
// begin if bc_type = 4 then
1797: LD_OWVAR 42
1801: PUSH
1802: LD_INT 4
1804: EQUAL
1805: IFFALSE 1854
// begin bc_type = 5 ;
1807: LD_ADDR_OWVAR 42
1811: PUSH
1812: LD_INT 5
1814: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1815: LD_ADDR_VAR 0 4
1819: PUSH
1820: LD_VAR 0 3
1824: PUSH
1825: LD_INT 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 3
1833: PUSH
1834: LD_INT 3
1836: ARRAY
1837: PPUSH
1838: LD_VAR 0 3
1842: PUSH
1843: LD_INT 4
1845: ARRAY
1846: PPUSH
1847: CALL_OW 47
1851: ST_TO_ADDR
// end else
1852: GO 1939
// begin bc_type := i [ 1 ] ;
1854: LD_ADDR_OWVAR 42
1858: PUSH
1859: LD_VAR 0 3
1863: PUSH
1864: LD_INT 1
1866: ARRAY
1867: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1868: LD_STRING 06_remoteVehs_1
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: CALL_OW 30
1878: PUSH
1879: LD_INT 1
1881: EQUAL
1882: PUSH
1883: LD_OWVAR 42
1887: PUSH
1888: LD_INT 7
1890: EQUAL
1891: AND
1892: IFFALSE 1902
// bc_type := b_lab_full ;
1894: LD_ADDR_OWVAR 42
1898: PUSH
1899: LD_INT 8
1901: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1902: LD_ADDR_VAR 0 4
1906: PUSH
1907: LD_VAR 0 3
1911: PUSH
1912: LD_INT 2
1914: ARRAY
1915: PPUSH
1916: LD_VAR 0 3
1920: PUSH
1921: LD_INT 3
1923: ARRAY
1924: PPUSH
1925: LD_VAR 0 3
1929: PUSH
1930: LD_INT 4
1932: ARRAY
1933: PPUSH
1934: CALL_OW 47
1938: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1939: LD_VAR 0 4
1943: PPUSH
1944: CALL_OW 266
1948: PUSH
1949: LD_INT 32
1951: EQUAL
1952: IFFALSE 1972
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1954: LD_VAR 0 4
1958: PPUSH
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 7
1966: ARRAY
1967: PPUSH
1968: CALL_OW 431
// end ;
1972: GO 1565
1974: POP
1975: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1976: LD_STRING 06_remoteVehs_1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 30
1986: PUSH
1987: LD_INT 1
1989: EQUAL
1990: IFFALSE 2194
// begin bc_type = 36 ;
1992: LD_ADDR_OWVAR 42
1996: PUSH
1997: LD_INT 36
1999: ST_TO_ADDR
// bc_level = 4 ;
2000: LD_ADDR_OWVAR 43
2004: PUSH
2005: LD_INT 4
2007: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2008: LD_INT 62
2010: PPUSH
2011: LD_INT 12
2013: PPUSH
2014: LD_INT 3
2016: PPUSH
2017: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2021: LD_ADDR_VAR 0 3
2025: PUSH
2026: DOUBLE
2027: LD_INT 1
2029: DEC
2030: ST_TO_ADDR
2031: LD_INT 3
2033: PUSH
2034: LD_INT 2
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PUSH
2045: LD_OWVAR 67
2049: ARRAY
2050: PUSH
2051: FOR_TO
2052: IFFALSE 2192
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2054: LD_ADDR_OWVAR 37
2058: PUSH
2059: LD_INT 3
2061: PUSH
2062: LD_INT 2
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 1
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: CALL_OW 12
2082: ARRAY
2083: PUSH
2084: LD_INT 2
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: PUSH
2092: LD_OWVAR 67
2096: ARRAY
2097: ST_TO_ADDR
// vc_engine = 1 ;
2098: LD_ADDR_OWVAR 39
2102: PUSH
2103: LD_INT 1
2105: ST_TO_ADDR
// vc_control = 2 ;
2106: LD_ADDR_OWVAR 38
2110: PUSH
2111: LD_INT 2
2113: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2114: LD_ADDR_OWVAR 40
2118: PUSH
2119: LD_INT 3
2121: PUSH
2122: LD_INT 4
2124: PUSH
2125: LD_INT 5
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 1
2135: PPUSH
2136: LD_INT 3
2138: PPUSH
2139: CALL_OW 12
2143: ARRAY
2144: ST_TO_ADDR
// veh = CreateVehicle ;
2145: LD_ADDR_VAR 0 5
2149: PUSH
2150: CALL_OW 45
2154: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2155: LD_VAR 0 5
2159: PPUSH
2160: LD_EXP 36
2164: PPUSH
2165: CALL_OW 250
2169: PPUSH
2170: LD_EXP 36
2174: PPUSH
2175: CALL_OW 251
2179: PPUSH
2180: LD_INT 7
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 50
// end ;
2190: GO 2051
2192: POP
2193: POP
// end ; end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
// uc_side = 1 ;
2205: LD_ADDR_OWVAR 20
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// uc_nation = 1 ;
2213: LD_ADDR_OWVAR 21
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2221: LD_ADDR_EXP 13
2225: PUSH
2226: LD_STRING 06c_Denis
2228: PPUSH
2229: LD_INT 1
2231: PPUSH
2232: CALL 5598 0 2
2236: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2237: LD_EXP 13
2241: PPUSH
2242: LD_INT 4
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2252: LD_ADDR_EXP 14
2256: PUSH
2257: LD_STRING 06c_Joan
2259: PPUSH
2260: LD_INT 1
2262: PPUSH
2263: CALL 5598 0 2
2267: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2268: LD_EXP 14
2272: PPUSH
2273: LD_INT 4
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
2283: LD_STRING GladstoneIn07
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: CALL_OW 30
2293: NOT
2294: IFFALSE 2362
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2296: LD_ADDR_EXP 8
2300: PUSH
2301: LD_STRING 06c_Gladstone
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: CALL 5598 0 2
2311: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2312: LD_EXP 8
2316: NOT
2317: PUSH
2318: LD_STRING GladstoneStayInDelta
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL_OW 30
2328: AND
2329: IFFALSE 2347
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2331: LD_ADDR_EXP 8
2335: PUSH
2336: LD_STRING 05_Gladstone
2338: PPUSH
2339: LD_INT 1
2341: PPUSH
2342: CALL 5598 0 2
2346: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2347: LD_EXP 8
2351: PPUSH
2352: LD_INT 4
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2362: LD_STRING LisaStayInDelta
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: CALL_OW 30
2372: IFFALSE 2405
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2374: LD_ADDR_EXP 6
2378: PUSH
2379: LD_STRING 05_Lisa
2381: PPUSH
2382: LD_INT 1
2384: PPUSH
2385: CALL 5598 0 2
2389: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2390: LD_EXP 6
2394: PPUSH
2395: LD_INT 4
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2405: LD_STRING BobbyStayInDelta
2407: PPUSH
2408: LD_INT 0
2410: PPUSH
2411: CALL_OW 30
2415: IFFALSE 2448
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2417: LD_ADDR_EXP 4
2421: PUSH
2422: LD_STRING 05_Bobby
2424: PPUSH
2425: LD_INT 1
2427: PPUSH
2428: CALL 5598 0 2
2432: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2433: LD_EXP 4
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2448: LD_STRING CyrusStayInDelta
2450: PPUSH
2451: LD_INT 0
2453: PPUSH
2454: CALL_OW 30
2458: IFFALSE 2491
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2460: LD_ADDR_EXP 5
2464: PUSH
2465: LD_STRING 05_Cyrus
2467: PPUSH
2468: LD_INT 1
2470: PPUSH
2471: CALL 5598 0 2
2475: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2476: LD_EXP 5
2480: PPUSH
2481: LD_INT 4
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2491: LD_STRING BrownStayInDelta
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: CALL_OW 30
2501: IFFALSE 2534
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
2503: LD_ADDR_EXP 2
2507: PUSH
2508: LD_STRING 05_Brown
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL 5598 0 2
2518: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2519: LD_EXP 2
2523: PPUSH
2524: LD_INT 4
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
2534: LD_STRING DonaldsonStayInDelta
2536: PPUSH
2537: LD_INT 0
2539: PPUSH
2540: CALL_OW 30
2544: IFFALSE 2577
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
2546: LD_ADDR_EXP 3
2550: PUSH
2551: LD_STRING 05_Donaldson
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL 5598 0 2
2561: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2562: LD_EXP 3
2566: PPUSH
2567: LD_INT 4
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: LD_STRING OtherStayInDelta
2584: PPUSH
2585: CALL_OW 31
2589: ST_TO_ADDR
// if other then
2590: LD_VAR 0 4
2594: IFFALSE 2639
// for j = 1 to other do
2596: LD_ADDR_VAR 0 3
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_VAR 0 4
2610: PUSH
2611: FOR_TO
2612: IFFALSE 2637
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2614: LD_VAR 0 4
2618: PUSH
2619: LD_VAR 0 3
2623: ARRAY
2624: PPUSH
2625: LD_INT 4
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
2635: GO 2611
2637: POP
2638: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2639: LD_ADDR_VAR 0 4
2643: PUSH
2644: LD_STRING 06_other_apemans
2646: PPUSH
2647: CALL_OW 31
2651: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
2652: LD_VAR 0 4
2656: PUSH
2657: LD_INT 5
2659: PUSH
2660: LD_INT 4
2662: PUSH
2663: LD_INT 3
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: LIST
2670: PUSH
2671: LD_OWVAR 67
2675: ARRAY
2676: GREATEREQUAL
2677: IFFALSE 2706
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
2679: LD_ADDR_VAR 0 3
2683: PUSH
2684: LD_INT 5
2686: PUSH
2687: LD_INT 4
2689: PUSH
2690: LD_INT 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_OWVAR 67
2702: ARRAY
2703: ST_TO_ADDR
2704: GO 2716
// j := other ;
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: LD_VAR 0 4
2715: ST_TO_ADDR
// for i = 1 to j do
2716: LD_ADDR_VAR 0 2
2720: PUSH
2721: DOUBLE
2722: LD_INT 1
2724: DEC
2725: ST_TO_ADDR
2726: LD_VAR 0 3
2730: PUSH
2731: FOR_TO
2732: IFFALSE 2757
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2734: LD_VAR 0 4
2738: PUSH
2739: LD_VAR 0 2
2743: ARRAY
2744: PPUSH
2745: LD_INT 4
2747: PPUSH
2748: LD_INT 0
2750: PPUSH
2751: CALL_OW 49
2755: GO 2731
2757: POP
2758: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2759: LD_INT 4
2761: PPUSH
2762: LD_INT 22
2764: PUSH
2765: LD_INT 1
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 21
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 70
2790: PPUSH
2791: LD_INT 53
2793: PPUSH
2794: LD_INT 19
2796: PPUSH
2797: CALL_OW 111
// firstAttack = 1 ;
2801: LD_ADDR_EXP 32
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
2819: PPUSH
2820: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: LD_STRING 07_vehicles
2828: PPUSH
2829: EMPTY
2830: PPUSH
2831: CALL_OW 30
2835: ST_TO_ADDR
// uc_side = 1 ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// uc_nation = 1 ;
2844: LD_ADDR_OWVAR 21
2848: PUSH
2849: LD_INT 1
2851: ST_TO_ADDR
// if vehicles > 0 then
2852: LD_VAR 0 4
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: IFFALSE 2999
// begin for i = 1 to vehicles do
2862: LD_ADDR_VAR 0 2
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_VAR 0 4
2876: PUSH
2877: FOR_TO
2878: IFFALSE 2997
// begin vc_chassis = vehicles [ i ] ;
2880: LD_ADDR_OWVAR 37
2884: PUSH
2885: LD_VAR 0 4
2889: PUSH
2890: LD_VAR 0 2
2894: ARRAY
2895: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2896: LD_ADDR_OWVAR 39
2900: PUSH
2901: LD_VAR 0 4
2905: PUSH
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 1
2913: PLUS
2914: ARRAY
2915: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2916: LD_ADDR_OWVAR 38
2920: PUSH
2921: LD_VAR 0 4
2925: PUSH
2926: LD_VAR 0 2
2930: PUSH
2931: LD_INT 2
2933: PLUS
2934: ARRAY
2935: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2936: LD_ADDR_OWVAR 40
2940: PUSH
2941: LD_VAR 0 4
2945: PUSH
2946: LD_VAR 0 2
2950: PUSH
2951: LD_INT 3
2953: PLUS
2954: ARRAY
2955: ST_TO_ADDR
// veh = CreateVehicle ;
2956: LD_ADDR_VAR 0 5
2960: PUSH
2961: CALL_OW 45
2965: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
2966: LD_VAR 0 5
2970: PPUSH
2971: LD_INT 4
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: CALL_OW 49
// i = i + 3 ;
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: LD_VAR 0 2
2990: PUSH
2991: LD_INT 3
2993: PLUS
2994: ST_TO_ADDR
// end ;
2995: GO 2877
2997: POP
2998: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2999: LD_ADDR_EXP 1
3003: PUSH
3004: LD_EXP 42
3008: PUSH
3009: LD_STRING JMM
3011: STR
3012: PPUSH
3013: LD_INT 1
3015: PPUSH
3016: CALL 5598 0 2
3020: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3021: LD_EXP 11
3025: PUSH
3026: LD_INT 1
3028: EQUAL
3029: PUSH
3030: LD_EXP 11
3034: PUSH
3035: LD_INT 3
3037: EQUAL
3038: OR
3039: IFFALSE 3063
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3041: LD_ADDR_EXP 2
3045: PUSH
3046: LD_EXP 42
3050: PUSH
3051: LD_STRING Brown
3053: STR
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: CALL 5598 0 2
3062: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3063: LD_EXP 11
3067: PUSH
3068: LD_INT 2
3070: EQUAL
3071: PUSH
3072: LD_EXP 11
3076: PUSH
3077: LD_INT 3
3079: EQUAL
3080: OR
3081: IFFALSE 3105
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3083: LD_ADDR_EXP 3
3087: PUSH
3088: LD_EXP 42
3092: PUSH
3093: LD_STRING Donaldson
3095: STR
3096: PPUSH
3097: LD_INT 1
3099: PPUSH
3100: CALL 5598 0 2
3104: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3105: LD_ADDR_EXP 4
3109: PUSH
3110: LD_EXP 42
3114: PUSH
3115: LD_STRING Bobby
3117: STR
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: CALL 5598 0 2
3126: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3127: LD_ADDR_EXP 5
3131: PUSH
3132: LD_EXP 42
3136: PUSH
3137: LD_STRING Cyrus
3139: STR
3140: PPUSH
3141: LD_INT 1
3143: PPUSH
3144: CALL 5598 0 2
3148: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 42
3158: PUSH
3159: LD_STRING Lisa
3161: STR
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL 5598 0 2
3170: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3171: LD_ADDR_EXP 7
3175: PUSH
3176: LD_EXP 42
3180: PUSH
3181: LD_STRING Frank
3183: STR
3184: PPUSH
3185: LD_INT 1
3187: PPUSH
3188: CALL 5598 0 2
3192: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3193: LD_ADDR_EXP 8
3197: PUSH
3198: LD_EXP 42
3202: PUSH
3203: LD_STRING Gladstone
3205: STR
3206: PPUSH
3207: LD_INT 1
3209: PPUSH
3210: CALL 5598 0 2
3214: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3215: LD_ADDR_EXP 9
3219: PUSH
3220: LD_EXP 42
3224: PUSH
3225: LD_STRING Kikuchi
3227: STR
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: CALL 5598 0 2
3236: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3237: LD_EXP 11
3241: PUSH
3242: LD_INT 1
3244: EQUAL
3245: PUSH
3246: LD_EXP 11
3250: PUSH
3251: LD_INT 3
3253: EQUAL
3254: OR
3255: IFFALSE 3272
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3257: LD_EXP 2
3261: PPUSH
3262: LD_INT 4
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3272: LD_EXP 11
3276: PUSH
3277: LD_INT 2
3279: EQUAL
3280: PUSH
3281: LD_EXP 11
3285: PUSH
3286: LD_INT 3
3288: EQUAL
3289: OR
3290: IFFALSE 3307
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3292: LD_EXP 3
3296: PPUSH
3297: LD_INT 4
3299: PPUSH
3300: LD_INT 0
3302: PPUSH
3303: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3307: LD_ADDR_VAR 0 5
3311: PUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 22
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: LD_INT 21
3327: PUSH
3328: LD_INT 2
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 58
3337: PUSH
3338: EMPTY
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: PPUSH
3346: CALL_OW 70
3350: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3351: LD_ADDR_EXP 1
3355: PUSH
3356: LD_EXP 42
3360: PUSH
3361: LD_STRING JMM
3363: STR
3364: PPUSH
3365: LD_INT 1
3367: PPUSH
3368: CALL 5598 0 2
3372: ST_TO_ADDR
// if veh > 0 then
3373: LD_VAR 0 5
3377: PUSH
3378: LD_INT 0
3380: GREATER
3381: IFFALSE 3403
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3383: LD_EXP 1
3387: PPUSH
3388: LD_VAR 0 5
3392: PUSH
3393: LD_INT 1
3395: ARRAY
3396: PPUSH
3397: CALL_OW 52
// end else
3401: GO 3418
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3403: LD_EXP 1
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3418: LD_ADDR_VAR 0 5
3422: PUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_INT 22
3428: PUSH
3429: LD_INT 1
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PUSH
3436: LD_INT 21
3438: PUSH
3439: LD_INT 2
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PUSH
3446: LD_INT 58
3448: PUSH
3449: EMPTY
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 70
3461: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3462: LD_ADDR_EXP 4
3466: PUSH
3467: LD_EXP 42
3471: PUSH
3472: LD_STRING Bobby
3474: STR
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL 5598 0 2
3483: ST_TO_ADDR
// if veh > 0 then
3484: LD_VAR 0 5
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: IFFALSE 3514
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3494: LD_EXP 4
3498: PPUSH
3499: LD_VAR 0 5
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: CALL_OW 52
// end else
3512: GO 3529
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3514: LD_EXP 4
3518: PPUSH
3519: LD_INT 4
3521: PPUSH
3522: LD_INT 0
3524: PPUSH
3525: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3529: LD_ADDR_VAR 0 5
3533: PUSH
3534: LD_INT 4
3536: PPUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 21
3549: PUSH
3550: LD_INT 2
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 58
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: LIST
3567: PPUSH
3568: CALL_OW 70
3572: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3573: LD_ADDR_EXP 5
3577: PUSH
3578: LD_EXP 42
3582: PUSH
3583: LD_STRING Cyrus
3585: STR
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL 5598 0 2
3594: ST_TO_ADDR
// if veh > 0 then
3595: LD_VAR 0 5
3599: PUSH
3600: LD_INT 0
3602: GREATER
3603: IFFALSE 3625
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3605: LD_EXP 5
3609: PPUSH
3610: LD_VAR 0 5
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PPUSH
3619: CALL_OW 52
// end else
3623: GO 3640
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3625: LD_EXP 5
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3640: LD_ADDR_VAR 0 5
3644: PUSH
3645: LD_INT 4
3647: PPUSH
3648: LD_INT 22
3650: PUSH
3651: LD_INT 1
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PUSH
3658: LD_INT 21
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 58
3670: PUSH
3671: EMPTY
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 70
3683: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3684: LD_ADDR_EXP 6
3688: PUSH
3689: LD_EXP 42
3693: PUSH
3694: LD_STRING Lisa
3696: STR
3697: PPUSH
3698: LD_INT 1
3700: PPUSH
3701: CALL 5598 0 2
3705: ST_TO_ADDR
// if veh > 0 then
3706: LD_VAR 0 5
3710: PUSH
3711: LD_INT 0
3713: GREATER
3714: IFFALSE 3736
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3716: LD_EXP 6
3720: PPUSH
3721: LD_VAR 0 5
3725: PUSH
3726: LD_INT 1
3728: ARRAY
3729: PPUSH
3730: CALL_OW 52
// end else
3734: GO 3751
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3736: LD_EXP 6
3740: PPUSH
3741: LD_INT 4
3743: PPUSH
3744: LD_INT 0
3746: PPUSH
3747: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_INT 4
3758: PPUSH
3759: LD_INT 22
3761: PUSH
3762: LD_INT 1
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 21
3771: PUSH
3772: LD_INT 2
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 58
3781: PUSH
3782: EMPTY
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 70
3794: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3795: LD_ADDR_EXP 7
3799: PUSH
3800: LD_EXP 42
3804: PUSH
3805: LD_STRING Frank
3807: STR
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: CALL 5598 0 2
3816: ST_TO_ADDR
// if veh > 0 then
3817: LD_VAR 0 5
3821: PUSH
3822: LD_INT 0
3824: GREATER
3825: IFFALSE 3847
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3827: LD_EXP 7
3831: PPUSH
3832: LD_VAR 0 5
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: PPUSH
3841: CALL_OW 52
// end else
3845: GO 3862
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3847: LD_EXP 7
3851: PPUSH
3852: LD_INT 4
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3862: LD_ADDR_VAR 0 5
3866: PUSH
3867: LD_INT 4
3869: PPUSH
3870: LD_INT 22
3872: PUSH
3873: LD_INT 1
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 21
3882: PUSH
3883: LD_INT 2
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_INT 58
3892: PUSH
3893: EMPTY
3894: LIST
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: LIST
3900: PPUSH
3901: CALL_OW 70
3905: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3906: LD_ADDR_EXP 8
3910: PUSH
3911: LD_EXP 42
3915: PUSH
3916: LD_STRING Gladstone
3918: STR
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: CALL 5598 0 2
3927: ST_TO_ADDR
// if veh > 0 then
3928: LD_VAR 0 5
3932: PUSH
3933: LD_INT 0
3935: GREATER
3936: IFFALSE 3958
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3938: LD_EXP 8
3942: PPUSH
3943: LD_VAR 0 5
3947: PUSH
3948: LD_INT 1
3950: ARRAY
3951: PPUSH
3952: CALL_OW 52
// end else
3956: GO 3973
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3958: LD_EXP 8
3962: PPUSH
3963: LD_INT 4
3965: PPUSH
3966: LD_INT 0
3968: PPUSH
3969: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3973: LD_ADDR_VAR 0 5
3977: PUSH
3978: LD_INT 4
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 21
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: LD_INT 58
4003: PUSH
4004: EMPTY
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: PPUSH
4012: CALL_OW 70
4016: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4017: LD_ADDR_EXP 9
4021: PUSH
4022: LD_EXP 42
4026: PUSH
4027: LD_STRING Kikuchi
4029: STR
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: CALL 5598 0 2
4038: ST_TO_ADDR
// if veh > 0 then
4039: LD_VAR 0 5
4043: PUSH
4044: LD_INT 0
4046: GREATER
4047: IFFALSE 4069
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4049: LD_EXP 9
4053: PPUSH
4054: LD_VAR 0 5
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PPUSH
4063: CALL_OW 52
// end else
4067: GO 4084
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4069: LD_EXP 9
4073: PPUSH
4074: LD_INT 4
4076: PPUSH
4077: LD_INT 0
4079: PPUSH
4080: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: LD_STRING 07c_others
4091: PPUSH
4092: CALL_OW 31
4096: ST_TO_ADDR
// for i in other do
4097: LD_ADDR_VAR 0 2
4101: PUSH
4102: LD_VAR 0 3
4106: PUSH
4107: FOR_IN
4108: IFFALSE 4201
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4110: LD_ADDR_VAR 0 5
4114: PUSH
4115: LD_INT 4
4117: PPUSH
4118: LD_INT 22
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 58
4140: PUSH
4141: EMPTY
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 70
4153: ST_TO_ADDR
// if veh > 0 then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_INT 0
4161: GREATER
4162: IFFALSE 4184
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4164: LD_VAR 0 2
4168: PPUSH
4169: LD_VAR 0 5
4173: PUSH
4174: LD_INT 1
4176: ARRAY
4177: PPUSH
4178: CALL_OW 52
// end else
4182: GO 4199
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4184: LD_VAR 0 2
4188: PPUSH
4189: LD_INT 4
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 49
// end ; end ;
4199: GO 4107
4201: POP
4202: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 22
4208: PUSH
4209: LD_INT 1
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: PPUSH
4219: CALL_OW 70
4223: PPUSH
4224: LD_INT 53
4226: PPUSH
4227: LD_INT 19
4229: PPUSH
4230: CALL_OW 111
// end ;
4234: LD_VAR 0 1
4238: RET
// export function PrepareSikorsky ; begin
4239: LD_INT 0
4241: PPUSH
// uc_side = 4 ;
4242: LD_ADDR_OWVAR 20
4246: PUSH
4247: LD_INT 4
4249: ST_TO_ADDR
// uc_nation = 1 ;
4250: LD_ADDR_OWVAR 21
4254: PUSH
4255: LD_INT 1
4257: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4258: LD_ADDR_EXP 15
4262: PUSH
4263: LD_STRING Sikorski
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL 5598 0 2
4273: ST_TO_ADDR
// vc_engine = 1 ;
4274: LD_ADDR_OWVAR 39
4278: PUSH
4279: LD_INT 1
4281: ST_TO_ADDR
// vc_control = 1 ;
4282: LD_ADDR_OWVAR 38
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4290: LD_ADDR_OWVAR 40
4294: PUSH
4295: LD_INT 5
4297: PUSH
4298: LD_INT 3
4300: PUSH
4301: LD_INT 4
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: PUSH
4309: LD_OWVAR 67
4313: ARRAY
4314: ST_TO_ADDR
// vc_chassis = 4 ;
4315: LD_ADDR_OWVAR 37
4319: PUSH
4320: LD_INT 4
4322: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4323: LD_ADDR_EXP 16
4327: PUSH
4328: CALL_OW 45
4332: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4333: LD_EXP 16
4337: PPUSH
4338: LD_INT 9
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4348: LD_EXP 15
4352: PPUSH
4353: LD_EXP 16
4357: PPUSH
4358: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4362: LD_EXP 16
4366: PPUSH
4367: LD_INT 5
4369: PPUSH
4370: CALL_OW 113
// end ;
4374: LD_VAR 0 1
4378: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4379: LD_INT 0
4381: PPUSH
4382: PPUSH
4383: PPUSH
4384: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4385: LD_ADDR_VAR 0 2
4389: PUSH
4390: DOUBLE
4391: LD_INT 1
4393: DEC
4394: ST_TO_ADDR
4395: LD_INT 8
4397: PUSH
4398: LD_INT 7
4400: PUSH
4401: LD_INT 7
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: PUSH
4409: LD_OWVAR 67
4413: ARRAY
4414: PUSH
4415: FOR_TO
4416: IFFALSE 4513
// begin uc_side = 4 ;
4418: LD_ADDR_OWVAR 20
4422: PUSH
4423: LD_INT 4
4425: ST_TO_ADDR
// uc_nation = 1 ;
4426: LD_ADDR_OWVAR 21
4430: PUSH
4431: LD_INT 1
4433: ST_TO_ADDR
// hc_name =  ;
4434: LD_ADDR_OWVAR 26
4438: PUSH
4439: LD_STRING 
4441: ST_TO_ADDR
// hc_gallery =  ;
4442: LD_ADDR_OWVAR 33
4446: PUSH
4447: LD_STRING 
4449: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4450: LD_INT 0
4452: PPUSH
4453: LD_INT 1
4455: PPUSH
4456: LD_INT 5
4458: PPUSH
4459: LD_INT 8
4461: PPUSH
4462: CALL_OW 12
4466: PPUSH
4467: CALL_OW 380
// un = CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_INT 9
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4496: LD_VAR 0 3
4500: PPUSH
4501: LD_INT 53
4503: PPUSH
4504: LD_INT 23
4506: PPUSH
4507: CALL_OW 111
// end ;
4511: GO 4415
4513: POP
4514: POP
// for i = 1 to 3 do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_INT 3
4527: PUSH
4528: FOR_TO
4529: IFFALSE 4626
// begin uc_side = 4 ;
4531: LD_ADDR_OWVAR 20
4535: PUSH
4536: LD_INT 4
4538: ST_TO_ADDR
// uc_nation = 1 ;
4539: LD_ADDR_OWVAR 21
4543: PUSH
4544: LD_INT 1
4546: ST_TO_ADDR
// hc_name =  ;
4547: LD_ADDR_OWVAR 26
4551: PUSH
4552: LD_STRING 
4554: ST_TO_ADDR
// hc_gallery =  ;
4555: LD_ADDR_OWVAR 33
4559: PUSH
4560: LD_STRING 
4562: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 4
4568: PPUSH
4569: LD_INT 5
4571: PPUSH
4572: LD_INT 8
4574: PPUSH
4575: CALL_OW 12
4579: PPUSH
4580: CALL_OW 380
// un = CreateHuman ;
4584: LD_ADDR_VAR 0 3
4588: PUSH
4589: CALL_OW 44
4593: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4594: LD_VAR 0 3
4598: PPUSH
4599: LD_INT 9
4601: PPUSH
4602: LD_INT 0
4604: PPUSH
4605: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4609: LD_VAR 0 3
4613: PPUSH
4614: LD_INT 53
4616: PPUSH
4617: LD_INT 23
4619: PPUSH
4620: CALL_OW 111
// end ;
4624: GO 4528
4626: POP
4627: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4628: LD_ADDR_VAR 0 2
4632: PUSH
4633: DOUBLE
4634: LD_INT 1
4636: DEC
4637: ST_TO_ADDR
4638: LD_INT 9
4640: PUSH
4641: LD_INT 8
4643: PUSH
4644: LD_INT 7
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: LIST
4651: PUSH
4652: LD_OWVAR 67
4656: ARRAY
4657: PUSH
4658: FOR_TO
4659: IFFALSE 4855
// begin uc_side = 4 ;
4661: LD_ADDR_OWVAR 20
4665: PUSH
4666: LD_INT 4
4668: ST_TO_ADDR
// uc_nation = 1 ;
4669: LD_ADDR_OWVAR 21
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// vc_engine = 1 ;
4677: LD_ADDR_OWVAR 39
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// vc_control = 1 ;
4685: LD_ADDR_OWVAR 38
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4693: LD_ADDR_OWVAR 40
4697: PUSH
4698: LD_INT 3
4700: PUSH
4701: LD_INT 4
4703: PUSH
4704: LD_INT 5
4706: PUSH
4707: LD_INT 6
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 1
4718: PPUSH
4719: LD_INT 4
4721: PPUSH
4722: CALL_OW 12
4726: ARRAY
4727: ST_TO_ADDR
// vc_chassis = 4 ;
4728: LD_ADDR_OWVAR 37
4732: PUSH
4733: LD_INT 4
4735: ST_TO_ADDR
// veh = CreateVehicle ;
4736: LD_ADDR_VAR 0 4
4740: PUSH
4741: CALL_OW 45
4745: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4746: LD_VAR 0 4
4750: PPUSH
4751: LD_INT 9
4753: PPUSH
4754: LD_INT 0
4756: PPUSH
4757: CALL_OW 49
// hc_name =  ;
4761: LD_ADDR_OWVAR 26
4765: PUSH
4766: LD_STRING 
4768: ST_TO_ADDR
// hc_gallery =  ;
4769: LD_ADDR_OWVAR 33
4773: PUSH
4774: LD_STRING 
4776: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4777: LD_INT 0
4779: PPUSH
4780: LD_INT 3
4782: PPUSH
4783: LD_INT 5
4785: PPUSH
4786: LD_INT 8
4788: PPUSH
4789: CALL_OW 12
4793: PPUSH
4794: CALL_OW 380
// un = CreateHuman ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: CALL_OW 44
4807: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_VAR 0 4
4817: PPUSH
4818: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4822: LD_VAR 0 4
4826: PUSH
4827: LD_VAR 0 3
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_INT 53
4838: PPUSH
4839: LD_INT 23
4841: PPUSH
4842: CALL_OW 111
// wait ( 0 0$5 ) ;
4846: LD_INT 175
4848: PPUSH
4849: CALL_OW 67
// end ;
4853: GO 4658
4855: POP
4856: POP
// end ; end_of_file
4857: LD_VAR 0 1
4861: RET
// export function PrepareRussianCommander ; begin
4862: LD_INT 0
4864: PPUSH
// uc_side = 3 ;
4865: LD_ADDR_OWVAR 20
4869: PUSH
4870: LD_INT 3
4872: ST_TO_ADDR
// uc_nation = 3 ;
4873: LD_ADDR_OWVAR 21
4877: PUSH
4878: LD_INT 3
4880: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4881: LD_ADDR_EXP 23
4885: PUSH
4886: LD_STRING Borodin
4888: PPUSH
4889: CALL_OW 25
4893: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
4894: LD_EXP 23
4898: PPUSH
4899: LD_INT 25
4901: PPUSH
4902: LD_INT 0
4904: PPUSH
4905: CALL_OW 49
// end ;
4909: LD_VAR 0 1
4913: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4914: LD_INT 0
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
// for i = 1 to 10 do
4920: LD_ADDR_VAR 0 2
4924: PUSH
4925: DOUBLE
4926: LD_INT 1
4928: DEC
4929: ST_TO_ADDR
4930: LD_INT 10
4932: PUSH
4933: FOR_TO
4934: IFFALSE 5008
// begin uc_side = 6 ;
4936: LD_ADDR_OWVAR 20
4940: PUSH
4941: LD_INT 6
4943: ST_TO_ADDR
// uc_nation = 3 ;
4944: LD_ADDR_OWVAR 21
4948: PUSH
4949: LD_INT 3
4951: ST_TO_ADDR
// hc_gallery =  ;
4952: LD_ADDR_OWVAR 33
4956: PUSH
4957: LD_STRING 
4959: ST_TO_ADDR
// hc_name =  ;
4960: LD_ADDR_OWVAR 26
4964: PUSH
4965: LD_STRING 
4967: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
4968: LD_INT 0
4970: PPUSH
4971: LD_INT 1
4973: PPUSH
4974: LD_INT 3
4976: PPUSH
4977: CALL_OW 380
// un = CreateHuman ;
4981: LD_ADDR_VAR 0 3
4985: PUSH
4986: CALL_OW 44
4990: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
4991: LD_VAR 0 3
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: LD_INT 0
5001: PPUSH
5002: CALL_OW 49
// end ;
5006: GO 4933
5008: POP
5009: POP
// for i = 1 to 3 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 3
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5173
// begin uc_side = 6 ;
5026: LD_ADDR_OWVAR 20
5030: PUSH
5031: LD_INT 6
5033: ST_TO_ADDR
// uc_nation = 3 ;
5034: LD_ADDR_OWVAR 21
5038: PUSH
5039: LD_INT 3
5041: ST_TO_ADDR
// vc_engine = 1 ;
5042: LD_ADDR_OWVAR 39
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// vc_control = 1 ;
5050: LD_ADDR_OWVAR 38
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5058: LD_ADDR_OWVAR 40
5062: PUSH
5063: LD_INT 43
5065: PUSH
5066: LD_INT 44
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 1
5075: PPUSH
5076: LD_INT 2
5078: PPUSH
5079: CALL_OW 12
5083: ARRAY
5084: ST_TO_ADDR
// vc_chassis = 22 ;
5085: LD_ADDR_OWVAR 37
5089: PUSH
5090: LD_INT 22
5092: ST_TO_ADDR
// veh = CreateVehicle ;
5093: LD_ADDR_VAR 0 4
5097: PUSH
5098: CALL_OW 45
5102: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5103: LD_VAR 0 4
5107: PPUSH
5108: LD_INT 2
5110: PPUSH
5111: LD_INT 0
5113: PPUSH
5114: CALL_OW 49
// hc_gallery =  ;
5118: LD_ADDR_OWVAR 33
5122: PUSH
5123: LD_STRING 
5125: ST_TO_ADDR
// hc_name =  ;
5126: LD_ADDR_OWVAR 26
5130: PUSH
5131: LD_STRING 
5133: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5134: LD_INT 0
5136: PPUSH
5137: LD_INT 3
5139: PPUSH
5140: LD_INT 4
5142: PPUSH
5143: CALL_OW 380
// un = CreateHuman ;
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: CALL_OW 44
5156: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5157: LD_VAR 0 3
5161: PPUSH
5162: LD_VAR 0 4
5166: PPUSH
5167: CALL_OW 52
// end ;
5171: GO 5023
5173: POP
5174: POP
// end ;
5175: LD_VAR 0 1
5179: RET
// export function PrepareRussians ; var i , un ; begin
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
5184: PPUSH
// for i = 1 to 14 do
5185: LD_ADDR_VAR 0 2
5189: PUSH
5190: DOUBLE
5191: LD_INT 1
5193: DEC
5194: ST_TO_ADDR
5195: LD_INT 14
5197: PUSH
5198: FOR_TO
5199: IFFALSE 5285
// begin uc_side = 3 ;
5201: LD_ADDR_OWVAR 20
5205: PUSH
5206: LD_INT 3
5208: ST_TO_ADDR
// uc_nation = 3 ;
5209: LD_ADDR_OWVAR 21
5213: PUSH
5214: LD_INT 3
5216: ST_TO_ADDR
// hc_gallery =  ;
5217: LD_ADDR_OWVAR 33
5221: PUSH
5222: LD_STRING 
5224: ST_TO_ADDR
// hc_name =  ;
5225: LD_ADDR_OWVAR 26
5229: PUSH
5230: LD_STRING 
5232: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5233: LD_INT 0
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: LD_EXP 24
5243: PPUSH
5244: LD_EXP 25
5248: PPUSH
5249: CALL_OW 12
5253: PPUSH
5254: CALL_OW 380
// un = CreateHuman ;
5258: LD_ADDR_VAR 0 3
5262: PUSH
5263: CALL_OW 44
5267: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5268: LD_VAR 0 3
5272: PPUSH
5273: LD_INT 3
5275: PPUSH
5276: LD_INT 0
5278: PPUSH
5279: CALL_OW 49
// end ;
5283: GO 5198
5285: POP
5286: POP
// for i = 1 to 6 do
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: DOUBLE
5293: LD_INT 1
5295: DEC
5296: ST_TO_ADDR
5297: LD_INT 6
5299: PUSH
5300: FOR_TO
5301: IFFALSE 5387
// begin uc_side = 3 ;
5303: LD_ADDR_OWVAR 20
5307: PUSH
5308: LD_INT 3
5310: ST_TO_ADDR
// uc_nation = 3 ;
5311: LD_ADDR_OWVAR 21
5315: PUSH
5316: LD_INT 3
5318: ST_TO_ADDR
// hc_gallery =  ;
5319: LD_ADDR_OWVAR 33
5323: PUSH
5324: LD_STRING 
5326: ST_TO_ADDR
// hc_name =  ;
5327: LD_ADDR_OWVAR 26
5331: PUSH
5332: LD_STRING 
5334: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_INT 2
5340: PPUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_EXP 25
5350: PPUSH
5351: CALL_OW 12
5355: PPUSH
5356: CALL_OW 380
// un = CreateHuman ;
5360: LD_ADDR_VAR 0 3
5364: PUSH
5365: CALL_OW 44
5369: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5370: LD_VAR 0 3
5374: PPUSH
5375: LD_INT 3
5377: PPUSH
5378: LD_INT 0
5380: PPUSH
5381: CALL_OW 49
// end ;
5385: GO 5300
5387: POP
5388: POP
// for i = 1 to 6 do
5389: LD_ADDR_VAR 0 2
5393: PUSH
5394: DOUBLE
5395: LD_INT 1
5397: DEC
5398: ST_TO_ADDR
5399: LD_INT 6
5401: PUSH
5402: FOR_TO
5403: IFFALSE 5489
// begin uc_side = 3 ;
5405: LD_ADDR_OWVAR 20
5409: PUSH
5410: LD_INT 3
5412: ST_TO_ADDR
// uc_nation = 3 ;
5413: LD_ADDR_OWVAR 21
5417: PUSH
5418: LD_INT 3
5420: ST_TO_ADDR
// hc_gallery =  ;
5421: LD_ADDR_OWVAR 33
5425: PUSH
5426: LD_STRING 
5428: ST_TO_ADDR
// hc_name =  ;
5429: LD_ADDR_OWVAR 26
5433: PUSH
5434: LD_STRING 
5436: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5437: LD_INT 0
5439: PPUSH
5440: LD_INT 3
5442: PPUSH
5443: LD_EXP 24
5447: PPUSH
5448: LD_EXP 25
5452: PPUSH
5453: CALL_OW 12
5457: PPUSH
5458: CALL_OW 380
// un = CreateHuman ;
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: CALL_OW 44
5471: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5472: LD_VAR 0 3
5476: PPUSH
5477: LD_INT 3
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 49
// end ;
5487: GO 5402
5489: POP
5490: POP
// for i = 1 to 4 do
5491: LD_ADDR_VAR 0 2
5495: PUSH
5496: DOUBLE
5497: LD_INT 1
5499: DEC
5500: ST_TO_ADDR
5501: LD_INT 4
5503: PUSH
5504: FOR_TO
5505: IFFALSE 5591
// begin uc_side = 3 ;
5507: LD_ADDR_OWVAR 20
5511: PUSH
5512: LD_INT 3
5514: ST_TO_ADDR
// uc_nation = 3 ;
5515: LD_ADDR_OWVAR 21
5519: PUSH
5520: LD_INT 3
5522: ST_TO_ADDR
// hc_gallery =  ;
5523: LD_ADDR_OWVAR 33
5527: PUSH
5528: LD_STRING 
5530: ST_TO_ADDR
// hc_name =  ;
5531: LD_ADDR_OWVAR 26
5535: PUSH
5536: LD_STRING 
5538: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5539: LD_INT 0
5541: PPUSH
5542: LD_INT 4
5544: PPUSH
5545: LD_EXP 24
5549: PPUSH
5550: LD_EXP 25
5554: PPUSH
5555: CALL_OW 12
5559: PPUSH
5560: CALL_OW 380
// un = CreateHuman ;
5564: LD_ADDR_VAR 0 3
5568: PUSH
5569: CALL_OW 44
5573: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_INT 3
5581: PPUSH
5582: LD_INT 0
5584: PPUSH
5585: CALL_OW 49
// end ;
5589: GO 5504
5591: POP
5592: POP
// end ; end_of_file
5593: LD_VAR 0 1
5597: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5598: LD_INT 0
5600: PPUSH
5601: PPUSH
// if exist_mode then
5602: LD_VAR 0 2
5606: IFFALSE 5625
// unit := CreateCharacter ( ident ) else
5608: LD_ADDR_VAR 0 4
5612: PUSH
5613: LD_VAR 0 1
5617: PPUSH
5618: CALL_OW 34
5622: ST_TO_ADDR
5623: GO 5640
// unit := NewCharacter ( ident ) ;
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 1
5634: PPUSH
5635: CALL_OW 25
5639: ST_TO_ADDR
// result := unit ;
5640: LD_ADDR_VAR 0 3
5644: PUSH
5645: LD_VAR 0 4
5649: ST_TO_ADDR
// end ;
5650: LD_VAR 0 3
5654: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5655: LD_INT 0
5657: PPUSH
5658: PPUSH
5659: PPUSH
// rnd = rand ( 1 , characters ) ;
5660: LD_ADDR_VAR 0 6
5664: PUSH
5665: LD_INT 1
5667: PPUSH
5668: LD_VAR 0 1
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
// for i = 1 to characters do
5678: LD_ADDR_VAR 0 5
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 1
5692: PUSH
5693: FOR_TO
5694: IFFALSE 5804
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5696: LD_VAR 0 5
5700: PUSH
5701: LD_VAR 0 6
5705: EQUAL
5706: PUSH
5707: LD_VAR 0 1
5711: PUSH
5712: LD_VAR 0 5
5716: ARRAY
5717: PPUSH
5718: CALL_OW 258
5722: PUSH
5723: LD_INT 1
5725: EQUAL
5726: AND
5727: IFFALSE 5749
// Say ( characters [ i ] , dialogMID ) ;
5729: LD_VAR 0 1
5733: PUSH
5734: LD_VAR 0 5
5738: ARRAY
5739: PPUSH
5740: LD_VAR 0 2
5744: PPUSH
5745: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5749: LD_VAR 0 5
5753: PUSH
5754: LD_VAR 0 6
5758: EQUAL
5759: PUSH
5760: LD_VAR 0 1
5764: PUSH
5765: LD_VAR 0 5
5769: ARRAY
5770: PPUSH
5771: CALL_OW 258
5775: PUSH
5776: LD_INT 2
5778: EQUAL
5779: AND
5780: IFFALSE 5802
// Say ( characters [ i ] , dialogFID ) ;
5782: LD_VAR 0 1
5786: PUSH
5787: LD_VAR 0 5
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 3
5797: PPUSH
5798: CALL_OW 88
// end ;
5802: GO 5693
5804: POP
5805: POP
// end ;
5806: LD_VAR 0 4
5810: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5811: LD_INT 0
5813: PPUSH
5814: PPUSH
5815: PPUSH
// uc_side := GetSide ( b ) ;
5816: LD_ADDR_OWVAR 20
5820: PUSH
5821: LD_VAR 0 2
5825: PPUSH
5826: CALL_OW 255
5830: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5831: LD_ADDR_OWVAR 21
5835: PUSH
5836: LD_VAR 0 2
5840: PPUSH
5841: CALL_OW 248
5845: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5846: LD_INT 0
5848: PPUSH
5849: LD_INT 1
5851: PPUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5861: LD_ADDR_VAR 0 5
5865: PUSH
5866: LD_VAR 0 2
5870: PPUSH
5871: CALL_OW 254
5875: PUSH
5876: LD_INT 3
5878: MINUS
5879: ST_TO_ADDR
// if dir < 0 then
5880: LD_VAR 0 5
5884: PUSH
5885: LD_INT 0
5887: LESS
5888: IFFALSE 5904
// dir := 6 + dir ;
5890: LD_ADDR_VAR 0 5
5894: PUSH
5895: LD_INT 6
5897: PUSH
5898: LD_VAR 0 5
5902: PLUS
5903: ST_TO_ADDR
// un := CreateHuman ;
5904: LD_ADDR_VAR 0 4
5908: PUSH
5909: CALL_OW 44
5913: ST_TO_ADDR
// SetDir ( un , dir ) ;
5914: LD_VAR 0 4
5918: PPUSH
5919: LD_VAR 0 5
5923: PPUSH
5924: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5928: LD_VAR 0 4
5932: PPUSH
5933: LD_VAR 0 2
5937: PPUSH
5938: CALL_OW 52
// end ;
5942: LD_VAR 0 3
5946: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
// for i = 1 to count do
5953: LD_ADDR_VAR 0 8
5957: PUSH
5958: DOUBLE
5959: LD_INT 1
5961: DEC
5962: ST_TO_ADDR
5963: LD_VAR 0 6
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6050
// begin uc_side = side ;
5971: LD_ADDR_OWVAR 20
5975: PUSH
5976: LD_VAR 0 1
5980: ST_TO_ADDR
// uc_nation = nation ;
5981: LD_ADDR_OWVAR 21
5985: PUSH
5986: LD_VAR 0 2
5990: ST_TO_ADDR
// hc_gallery =  ;
5991: LD_ADDR_OWVAR 33
5995: PUSH
5996: LD_STRING 
5998: ST_TO_ADDR
// hc_name =  ;
5999: LD_ADDR_OWVAR 26
6003: PUSH
6004: LD_STRING 
6006: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6007: LD_INT 0
6009: PPUSH
6010: LD_VAR 0 5
6014: PPUSH
6015: LD_VAR 0 4
6019: PPUSH
6020: CALL_OW 380
// un = CreateHuman ;
6024: LD_ADDR_VAR 0 10
6028: PUSH
6029: CALL_OW 44
6033: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6034: LD_VAR 0 10
6038: PPUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 52
// end ;
6048: GO 5968
6050: POP
6051: POP
// end ;
6052: LD_VAR 0 7
6056: RET
// export function PrepareDifficulty ; begin
6057: LD_INT 0
6059: PPUSH
// if Difficulty = 1 then
6060: LD_OWVAR 67
6064: PUSH
6065: LD_INT 1
6067: EQUAL
6068: IFFALSE 6086
// begin RuSolMinLevel = 4 ;
6070: LD_ADDR_EXP 24
6074: PUSH
6075: LD_INT 4
6077: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6078: LD_ADDR_EXP 25
6082: PUSH
6083: LD_INT 6
6085: ST_TO_ADDR
// end ; if Difficulty = 2 then
6086: LD_OWVAR 67
6090: PUSH
6091: LD_INT 2
6093: EQUAL
6094: IFFALSE 6164
// begin RuSolMinLevel = 5 ;
6096: LD_ADDR_EXP 24
6100: PUSH
6101: LD_INT 5
6103: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6104: LD_ADDR_EXP 25
6108: PUSH
6109: LD_INT 6
6111: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6112: LD_INT 51
6114: PPUSH
6115: LD_INT 3
6117: PPUSH
6118: LD_INT 1
6120: PPUSH
6121: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6125: LD_INT 57
6127: PPUSH
6128: LD_INT 3
6130: PPUSH
6131: LD_INT 1
6133: PPUSH
6134: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6138: LD_INT 57
6140: PPUSH
6141: LD_INT 6
6143: PPUSH
6144: LD_INT 2
6146: PPUSH
6147: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6151: LD_INT 51
6153: PPUSH
6154: LD_INT 6
6156: PPUSH
6157: LD_INT 2
6159: PPUSH
6160: CALL_OW 322
// end ; if Difficulty = 3 then
6164: LD_OWVAR 67
6168: PUSH
6169: LD_INT 3
6171: EQUAL
6172: IFFALSE 6255
// begin RuSolMinLevel = 5 ;
6174: LD_ADDR_EXP 24
6178: PUSH
6179: LD_INT 5
6181: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
6182: LD_ADDR_EXP 25
6186: PUSH
6187: LD_INT 7
6189: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6190: LD_INT 57
6192: PPUSH
6193: LD_INT 3
6195: PPUSH
6196: LD_INT 1
6198: PPUSH
6199: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6203: LD_INT 51
6205: PPUSH
6206: LD_INT 3
6208: PPUSH
6209: LD_INT 1
6211: PPUSH
6212: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6216: LD_INT 52
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 1
6224: PPUSH
6225: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6229: LD_INT 57
6231: PPUSH
6232: LD_INT 6
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6242: LD_INT 52
6244: PPUSH
6245: LD_INT 6
6247: PPUSH
6248: LD_INT 2
6250: PPUSH
6251: CALL_OW 322
// end ; end ;
6255: LD_VAR 0 1
6259: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6260: LD_INT 0
6262: PPUSH
6263: PPUSH
6264: PPUSH
6265: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 3
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 2
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: PPUSH
6295: CALL_OW 69
6299: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6300: LD_ADDR_VAR 0 4
6304: PUSH
6305: LD_INT 4
6307: PUSH
6308: LD_INT 75
6310: PUSH
6311: LD_INT 79
6313: PUSH
6314: LD_INT 2
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 4
6325: PUSH
6326: LD_INT 113
6328: PUSH
6329: LD_INT 94
6331: PUSH
6332: LD_INT 4
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 29
6343: PUSH
6344: LD_INT 106
6346: PUSH
6347: LD_INT 97
6349: PUSH
6350: LD_INT 3
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 26
6361: PUSH
6362: LD_INT 93
6364: PUSH
6365: LD_INT 97
6367: PUSH
6368: LD_INT 5
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 100
6382: PUSH
6383: LD_INT 89
6385: PUSH
6386: LD_INT 3
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 17
6397: PUSH
6398: LD_INT 96
6400: PUSH
6401: LD_INT 89
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 32
6415: PUSH
6416: LD_INT 78
6418: PUSH
6419: LD_INT 94
6421: PUSH
6422: LD_INT 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 32
6433: PUSH
6434: LD_INT 95
6436: PUSH
6437: LD_INT 82
6439: PUSH
6440: LD_INT 3
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 104
6454: PUSH
6455: LD_INT 85
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 32
6469: PUSH
6470: LD_INT 81
6472: PUSH
6473: LD_INT 78
6475: PUSH
6476: LD_INT 2
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 33
6487: PUSH
6488: LD_INT 109
6490: PUSH
6491: LD_INT 90
6493: PUSH
6494: LD_INT 3
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 33
6505: PUSH
6506: LD_INT 88
6508: PUSH
6509: LD_INT 79
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 33
6523: PUSH
6524: LD_INT 76
6526: PUSH
6527: LD_INT 87
6529: PUSH
6530: LD_INT 1
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 26
6541: PUSH
6542: LD_INT 96
6544: PUSH
6545: LD_INT 97
6547: PUSH
6548: LD_INT 5
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 26
6559: PUSH
6560: LD_INT 85
6562: PUSH
6563: LD_INT 84
6565: PUSH
6566: LD_INT 2
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 6
6577: PUSH
6578: LD_INT 88
6580: PUSH
6581: LD_INT 95
6583: PUSH
6584: LD_INT 0
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 19
6595: PUSH
6596: LD_INT 103
6598: PUSH
6599: LD_INT 89
6601: PUSH
6602: LD_INT 4
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 16
6613: PUSH
6614: LD_INT 97
6616: PUSH
6617: LD_INT 86
6619: PUSH
6620: LD_INT 2
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 24
6631: PUSH
6632: LD_INT 100
6634: PUSH
6635: LD_INT 85
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: ST_TO_ADDR
// for i := 1 to buildingsTab do
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_VAR 0 4
6682: PUSH
6683: FOR_TO
6684: IFFALSE 6757
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6686: LD_VAR 0 3
6690: PPUSH
6691: LD_VAR 0 4
6695: PUSH
6696: LD_VAR 0 2
6700: ARRAY
6701: PUSH
6702: LD_INT 1
6704: ARRAY
6705: PPUSH
6706: LD_VAR 0 4
6710: PUSH
6711: LD_VAR 0 2
6715: ARRAY
6716: PUSH
6717: LD_INT 2
6719: ARRAY
6720: PPUSH
6721: LD_VAR 0 4
6725: PUSH
6726: LD_VAR 0 2
6730: ARRAY
6731: PUSH
6732: LD_INT 3
6734: ARRAY
6735: PPUSH
6736: LD_VAR 0 4
6740: PUSH
6741: LD_VAR 0 2
6745: ARRAY
6746: PUSH
6747: LD_INT 4
6749: ARRAY
6750: PPUSH
6751: CALL_OW 205
6755: GO 6683
6757: POP
6758: POP
// end ;
6759: LD_VAR 0 1
6763: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6764: LD_INT 0
6766: PPUSH
6767: PPUSH
// for i in charactersList do
6768: LD_ADDR_VAR 0 4
6772: PUSH
6773: LD_VAR 0 1
6777: PUSH
6778: FOR_IN
6779: IFFALSE 6808
// begin if IsOk ( i ) then
6781: LD_VAR 0 4
6785: PPUSH
6786: CALL_OW 302
6790: IFFALSE 6806
// SaveCharacters ( i , ident ) ;
6792: LD_VAR 0 4
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 38
// end ;
6806: GO 6778
6808: POP
6809: POP
// end ;
6810: LD_VAR 0 3
6814: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6815: LD_INT 0
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
// for i = 1 to 72 do
6821: LD_ADDR_VAR 0 5
6825: PUSH
6826: DOUBLE
6827: LD_INT 1
6829: DEC
6830: ST_TO_ADDR
6831: LD_INT 72
6833: PUSH
6834: FOR_TO
6835: IFFALSE 6893
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_VAR 0 1
6846: PPUSH
6847: CALL_OW 321
6851: PUSH
6852: LD_INT 1
6854: EQUAL
6855: PUSH
6856: LD_VAR 0 5
6860: PPUSH
6861: LD_VAR 0 3
6865: PPUSH
6866: CALL_OW 482
6870: PUSH
6871: LD_INT 1
6873: EQUAL
6874: AND
6875: IFFALSE 6891
// AddComResearch ( lab , i ) ;
6877: LD_VAR 0 2
6881: PPUSH
6882: LD_VAR 0 5
6886: PPUSH
6887: CALL_OW 184
6891: GO 6834
6893: POP
6894: POP
// end ;
6895: LD_VAR 0 4
6899: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6900: LD_INT 0
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6910: LD_ADDR_VAR 0 6
6914: PUSH
6915: LD_INT 22
6917: PUSH
6918: LD_VAR 0 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 56
6939: PUSH
6940: EMPTY
6941: LIST
6942: PUSH
6943: LD_INT 24
6945: PUSH
6946: LD_INT 700
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: LD_INT 60
6958: PUSH
6959: EMPTY
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PUSH
6978: LD_EXP 23
6982: PUSH
6983: EMPTY
6984: LIST
6985: DIFF
6986: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
6987: LD_ADDR_VAR 0 7
6991: PUSH
6992: LD_INT 22
6994: PUSH
6995: LD_VAR 0 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 25
7006: PUSH
7007: LD_INT 1
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 54
7016: PUSH
7017: EMPTY
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: PPUSH
7025: CALL_OW 69
7029: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7030: LD_ADDR_VAR 0 8
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_VAR 0 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: LD_INT 32
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 58
7059: PUSH
7060: EMPTY
7061: LIST
7062: PUSH
7063: LD_INT 24
7065: PUSH
7066: LD_INT 251
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: PPUSH
7079: CALL_OW 69
7083: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7084: LD_ADDR_VAR 0 10
7088: PUSH
7089: LD_INT 22
7091: PUSH
7092: LD_VAR 0 1
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 30
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 5
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 24
7131: PUSH
7132: LD_INT 251
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: ST_TO_ADDR
// if barrackList > 0 then
7149: LD_VAR 0 10
7153: PUSH
7154: LD_INT 0
7156: GREATER
7157: IFFALSE 7270
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7159: LD_VAR 0 8
7163: PUSH
7164: LD_INT 0
7166: EQUAL
7167: PUSH
7168: LD_INT 24
7170: PPUSH
7171: LD_INT 22
7173: PUSH
7174: LD_INT 1
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 1
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 70
7199: PUSH
7200: LD_INT 0
7202: EQUAL
7203: AND
7204: IFFALSE 7253
// begin for i in soldiers_list do
7206: LD_ADDR_VAR 0 4
7210: PUSH
7211: LD_VAR 0 6
7215: PUSH
7216: FOR_IN
7217: IFFALSE 7249
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7219: LD_VAR 0 4
7223: PPUSH
7224: LD_VAR 0 10
7228: PUSH
7229: LD_INT 1
7231: PPUSH
7232: LD_VAR 0 10
7236: PPUSH
7237: CALL_OW 12
7241: ARRAY
7242: PPUSH
7243: CALL_OW 120
7247: GO 7216
7249: POP
7250: POP
// end else
7251: GO 7270
// begin for i in barrackList do
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_VAR 0 10
7262: PUSH
7263: FOR_IN
7264: IFFALSE 7268
// begin end ;
7266: GO 7263
7268: POP
7269: POP
// end ; end ; end ;
7270: LD_VAR 0 3
7274: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
7281: PPUSH
7282: PPUSH
// for i = 1 to infantryCount do
7283: LD_ADDR_VAR 0 8
7287: PUSH
7288: DOUBLE
7289: LD_INT 1
7291: DEC
7292: ST_TO_ADDR
7293: LD_VAR 0 5
7297: PUSH
7298: FOR_TO
7299: IFFALSE 7415
// begin uc_side = side ;
7301: LD_ADDR_OWVAR 20
7305: PUSH
7306: LD_VAR 0 1
7310: ST_TO_ADDR
// uc_nation = nation ;
7311: LD_ADDR_OWVAR 21
7315: PUSH
7316: LD_VAR 0 3
7320: ST_TO_ADDR
// hc_class = 1 ;
7321: LD_ADDR_OWVAR 28
7325: PUSH
7326: LD_INT 1
7328: ST_TO_ADDR
// hc_name =  ;
7329: LD_ADDR_OWVAR 26
7333: PUSH
7334: LD_STRING 
7336: ST_TO_ADDR
// hc_gallery =  ;
7337: LD_ADDR_OWVAR 33
7341: PUSH
7342: LD_STRING 
7344: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7345: LD_INT 0
7347: PPUSH
7348: LD_INT 1
7350: PPUSH
7351: LD_EXP 24
7355: PPUSH
7356: LD_EXP 25
7360: PPUSH
7361: CALL_OW 12
7365: PPUSH
7366: CALL_OW 380
// un = CreateHuman ;
7370: LD_ADDR_VAR 0 10
7374: PUSH
7375: CALL_OW 44
7379: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7380: LD_VAR 0 10
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_INT 0
7392: PPUSH
7393: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7397: LD_ADDR_EXP 31
7401: PUSH
7402: LD_EXP 31
7406: PUSH
7407: LD_VAR 0 10
7411: ADD
7412: ST_TO_ADDR
// end ;
7413: GO 7298
7415: POP
7416: POP
// for i = 1 to vehCount do
7417: LD_ADDR_VAR 0 8
7421: PUSH
7422: DOUBLE
7423: LD_INT 1
7425: DEC
7426: ST_TO_ADDR
7427: LD_VAR 0 6
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7640
// begin uc_side = side ;
7435: LD_ADDR_OWVAR 20
7439: PUSH
7440: LD_VAR 0 1
7444: ST_TO_ADDR
// uc_nation = nation ;
7445: LD_ADDR_OWVAR 21
7449: PUSH
7450: LD_VAR 0 3
7454: ST_TO_ADDR
// vc_Chassis = 22 ;
7455: LD_ADDR_OWVAR 37
7459: PUSH
7460: LD_INT 22
7462: ST_TO_ADDR
// vc_engine = 1 ;
7463: LD_ADDR_OWVAR 39
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// vc_control = 1 ;
7471: LD_ADDR_OWVAR 38
7475: PUSH
7476: LD_INT 1
7478: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7479: LD_ADDR_OWVAR 40
7483: PUSH
7484: LD_INT 43
7486: PUSH
7487: LD_INT 44
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 1
7496: PPUSH
7497: LD_INT 2
7499: PPUSH
7500: CALL_OW 12
7504: ARRAY
7505: ST_TO_ADDR
// veh = CreateVehicle ;
7506: LD_ADDR_VAR 0 12
7510: PUSH
7511: CALL_OW 45
7515: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7516: LD_VAR 0 12
7520: PPUSH
7521: LD_VAR 0 2
7525: PPUSH
7526: LD_INT 0
7528: PPUSH
7529: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
7533: LD_ADDR_EXP 31
7537: PUSH
7538: LD_EXP 31
7542: PUSH
7543: LD_VAR 0 12
7547: ADD
7548: ST_TO_ADDR
// hc_class = 3 ;
7549: LD_ADDR_OWVAR 28
7553: PUSH
7554: LD_INT 3
7556: ST_TO_ADDR
// hc_name =  ;
7557: LD_ADDR_OWVAR 26
7561: PUSH
7562: LD_STRING 
7564: ST_TO_ADDR
// hc_gallery =  ;
7565: LD_ADDR_OWVAR 33
7569: PUSH
7570: LD_STRING 
7572: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7573: LD_INT 0
7575: PPUSH
7576: LD_INT 3
7578: PPUSH
7579: LD_EXP 24
7583: PPUSH
7584: LD_EXP 25
7588: PPUSH
7589: CALL_OW 12
7593: PPUSH
7594: CALL_OW 380
// un = CreateHuman ;
7598: LD_ADDR_VAR 0 10
7602: PUSH
7603: CALL_OW 44
7607: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7608: LD_VAR 0 10
7612: PPUSH
7613: LD_VAR 0 12
7617: PPUSH
7618: CALL_OW 52
// defenders_list = defenders_list ^ un ;
7622: LD_ADDR_EXP 31
7626: PUSH
7627: LD_EXP 31
7631: PUSH
7632: LD_VAR 0 10
7636: ADD
7637: ST_TO_ADDR
// end ;
7638: GO 7432
7640: POP
7641: POP
// end ;
7642: LD_VAR 0 7
7646: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7647: LD_INT 0
7649: PPUSH
7650: PPUSH
7651: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7652: LD_VAR 0 2
7656: PPUSH
7657: LD_INT 22
7659: PUSH
7660: LD_VAR 0 1
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: PPUSH
7672: CALL_OW 70
7676: PUSH
7677: LD_INT 0
7679: EQUAL
7680: PUSH
7681: LD_EXP 31
7685: PUSH
7686: LD_INT 0
7688: GREATER
7689: AND
7690: IFFALSE 7736
// begin for i in defenders_list do
7692: LD_ADDR_VAR 0 4
7696: PUSH
7697: LD_EXP 31
7701: PUSH
7702: FOR_IN
7703: IFFALSE 7734
// begin ComMoveXY ( i , 65 , 68 ) ;
7705: LD_VAR 0 4
7709: PPUSH
7710: LD_INT 65
7712: PPUSH
7713: LD_INT 68
7715: PPUSH
7716: CALL_OW 111
// SetFuel ( i , 100 ) ;
7720: LD_VAR 0 4
7724: PPUSH
7725: LD_INT 100
7727: PPUSH
7728: CALL_OW 240
// end ;
7732: GO 7702
7734: POP
7735: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_INT 22
7743: PUSH
7744: LD_VAR 0 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: PPUSH
7756: CALL_OW 70
7760: PUSH
7761: LD_INT 0
7763: GREATER
7764: PUSH
7765: LD_EXP 31
7769: PUSH
7770: LD_INT 0
7772: GREATER
7773: AND
7774: IFFALSE 7942
// begin for i in defenders_list do
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_EXP 31
7785: PUSH
7786: FOR_IN
7787: IFFALSE 7837
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7789: LD_ADDR_VAR 0 5
7793: PUSH
7794: LD_INT 22
7796: PUSH
7797: LD_VAR 0 1
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PPUSH
7806: CALL_OW 69
7810: PPUSH
7811: LD_VAR 0 4
7815: PPUSH
7816: CALL_OW 74
7820: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7821: LD_VAR 0 4
7825: PPUSH
7826: LD_VAR 0 5
7830: PPUSH
7831: CALL_OW 115
// end ;
7835: GO 7786
7837: POP
7838: POP
// if russianAI = 0 then
7839: LD_EXP 26
7843: PUSH
7844: LD_INT 0
7846: EQUAL
7847: IFFALSE 7942
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7849: LD_ADDR_VAR 0 4
7853: PUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 25
7866: PUSH
7867: LD_INT 1
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 69
7882: PUSH
7883: LD_EXP 23
7887: DIFF
7888: PUSH
7889: FOR_IN
7890: IFFALSE 7940
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7892: LD_ADDR_VAR 0 5
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_VAR 0 1
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PPUSH
7909: CALL_OW 69
7913: PPUSH
7914: LD_VAR 0 4
7918: PPUSH
7919: CALL_OW 74
7923: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7924: LD_VAR 0 4
7928: PPUSH
7929: LD_VAR 0 5
7933: PPUSH
7934: CALL_OW 115
// end ;
7938: GO 7889
7940: POP
7941: POP
// end ; end ; end ;
7942: LD_VAR 0 3
7946: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7947: LD_INT 0
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7954: LD_ADDR_VAR 0 6
7958: PUSH
7959: LD_INT 22
7961: PUSH
7962: LD_VAR 0 1
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 2
7973: PUSH
7974: LD_INT 25
7976: PUSH
7977: LD_INT 2
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 25
7986: PUSH
7987: LD_INT 16
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 1000
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8019: LD_ADDR_VAR 0 4
8023: PUSH
8024: LD_INT 22
8026: PUSH
8027: LD_VAR 0 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 21
8038: PUSH
8039: LD_INT 3
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: LD_INT 3
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: LD_INT 1000
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8076: LD_VAR 0 4
8080: PUSH
8081: LD_INT 0
8083: GREATER
8084: PUSH
8085: LD_VAR 0 6
8089: PUSH
8090: LD_INT 0
8092: GREATER
8093: AND
8094: IFFALSE 8160
// begin for i in engineerOk_list do
8096: LD_ADDR_VAR 0 5
8100: PUSH
8101: LD_VAR 0 6
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8158
// begin for j in buildings_list do
8109: LD_ADDR_VAR 0 7
8113: PUSH
8114: LD_VAR 0 4
8118: PUSH
8119: FOR_IN
8120: IFFALSE 8154
// begin AddComExitBuilding ( i ) ;
8122: LD_VAR 0 5
8126: PPUSH
8127: CALL_OW 182
// wait ( 0 0$1 ) ;
8131: LD_INT 35
8133: PPUSH
8134: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8138: LD_VAR 0 5
8142: PPUSH
8143: LD_VAR 0 7
8147: PPUSH
8148: CALL_OW 190
// end ;
8152: GO 8119
8154: POP
8155: POP
// end ;
8156: GO 8106
8158: POP
8159: POP
// end ; if buildings_list = 0 then
8160: LD_VAR 0 4
8164: PUSH
8165: LD_INT 0
8167: EQUAL
8168: IFFALSE 8201
// begin for i in engineerOK_list do
8170: LD_ADDR_VAR 0 5
8174: PUSH
8175: LD_VAR 0 6
8179: PUSH
8180: FOR_IN
8181: IFFALSE 8199
// begin ComEnterUnit ( i , building ) ;
8183: LD_VAR 0 5
8187: PPUSH
8188: LD_VAR 0 2
8192: PPUSH
8193: CALL_OW 120
// end ;
8197: GO 8180
8199: POP
8200: POP
// end ; end ;
8201: LD_VAR 0 3
8205: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8206: LD_INT 0
8208: PPUSH
8209: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8210: LD_INT 22
8212: PUSH
8213: LD_VAR 0 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 2
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PPUSH
8236: CALL_OW 69
8240: PUSH
8241: LD_INT 0
8243: GREATER
8244: PUSH
8245: LD_INT 22
8247: PUSH
8248: LD_VAR 0 1
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 21
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: LD_INT 24
8272: PUSH
8273: LD_INT 1000
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: CALL_OW 69
8293: PUSH
8294: LD_INT 0
8296: EQUAL
8297: AND
8298: PUSH
8299: LD_VAR 0 2
8303: PUSH
8304: LD_INT 0
8306: GREATER
8307: AND
8308: IFFALSE 8407
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8310: LD_ADDR_VAR 0 4
8314: PUSH
8315: LD_INT 22
8317: PUSH
8318: LD_VAR 0 1
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 25
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PPUSH
8341: CALL_OW 69
8345: PUSH
8346: FOR_IN
8347: IFFALSE 8405
// begin AddComExitBuilding ( i ) ;
8349: LD_VAR 0 4
8353: PPUSH
8354: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8358: LD_VAR 0 4
8362: PPUSH
8363: LD_VAR 0 2
8367: PUSH
8368: LD_INT 1
8370: ARRAY
8371: PPUSH
8372: LD_VAR 0 2
8376: PUSH
8377: LD_INT 2
8379: ARRAY
8380: PPUSH
8381: LD_VAR 0 2
8385: PUSH
8386: LD_INT 3
8388: ARRAY
8389: PPUSH
8390: LD_VAR 0 2
8394: PUSH
8395: LD_INT 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 205
// end ;
8403: GO 8346
8405: POP
8406: POP
// end ; end ;
8407: LD_VAR 0 3
8411: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8412: LD_INT 0
8414: PPUSH
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 250 ] , [ f_class , 4 ] ] ) ;
8419: LD_ADDR_VAR 0 6
8423: PUSH
8424: LD_INT 22
8426: PUSH
8427: LD_VAR 0 1
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 24
8438: PUSH
8439: LD_INT 250
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 4
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: PPUSH
8461: CALL_OW 69
8465: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8466: LD_ADDR_VAR 0 9
8470: PUSH
8471: LD_VAR 0 3
8475: PPUSH
8476: LD_INT 22
8478: PUSH
8479: LD_VAR 0 1
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 3
8500: PUSH
8501: LD_INT 24
8503: PUSH
8504: LD_INT 750
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 70
8524: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8525: LD_VAR 0 9
8529: PUSH
8530: LD_INT 0
8532: GREATER
8533: PUSH
8534: LD_VAR 0 6
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: AND
8543: IFFALSE 8670
// begin for i = 1 to damageUnits do
8545: LD_ADDR_VAR 0 7
8549: PUSH
8550: DOUBLE
8551: LD_INT 1
8553: DEC
8554: ST_TO_ADDR
8555: LD_VAR 0 9
8559: PUSH
8560: FOR_TO
8561: IFFALSE 8585
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8563: LD_VAR 0 9
8567: PUSH
8568: LD_VAR 0 7
8572: ARRAY
8573: PPUSH
8574: LD_VAR 0 2
8578: PPUSH
8579: CALL_OW 113
8583: GO 8560
8585: POP
8586: POP
// for i in sci_list do
8587: LD_ADDR_VAR 0 7
8591: PUSH
8592: LD_VAR 0 6
8596: PUSH
8597: FOR_IN
8598: IFFALSE 8666
// begin ComExitBuilding ( i ) ;
8600: LD_VAR 0 7
8604: PPUSH
8605: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8609: LD_ADDR_VAR 0 8
8613: PUSH
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_INT 22
8621: PUSH
8622: LD_VAR 0 1
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 70
8635: PUSH
8636: FOR_IN
8637: IFFALSE 8662
// begin AddComHeal ( i , j ) ;
8639: LD_VAR 0 7
8643: PPUSH
8644: LD_VAR 0 8
8648: PPUSH
8649: CALL_OW 188
// wait ( 1 1$0 ) ;
8653: LD_INT 2100
8655: PPUSH
8656: CALL_OW 67
// end ;
8660: GO 8636
8662: POP
8663: POP
// end ;
8664: GO 8597
8666: POP
8667: POP
// end else
8668: GO 8684
// begin AddComEnterUnit ( sci_list , build ) ;
8670: LD_VAR 0 6
8674: PPUSH
8675: LD_VAR 0 4
8679: PPUSH
8680: CALL_OW 180
// end ; end ;
8684: LD_VAR 0 5
8688: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8689: LD_INT 0
8691: PPUSH
8692: PPUSH
8693: PPUSH
8694: PPUSH
8695: PPUSH
8696: PPUSH
8697: PPUSH
8698: PPUSH
8699: PPUSH
8700: PPUSH
8701: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8702: LD_ADDR_VAR 0 9
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_VAR 0 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 21
8721: PUSH
8722: LD_INT 2
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 33
8731: PUSH
8732: LD_INT 1
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 24
8741: PUSH
8742: LD_INT 660
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 3
8751: PUSH
8752: LD_INT 58
8754: PUSH
8755: EMPTY
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 3
8764: PUSH
8765: LD_INT 34
8767: PUSH
8768: LD_INT 53
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 69
8791: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8792: LD_ADDR_VAR 0 10
8796: PUSH
8797: LD_INT 22
8799: PUSH
8800: LD_VAR 0 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 33
8821: PUSH
8822: LD_INT 1
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 3
8831: PUSH
8832: LD_INT 24
8834: PUSH
8835: LD_INT 660
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 69
8856: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8857: LD_ADDR_VAR 0 11
8861: PUSH
8862: LD_VAR 0 2
8866: PPUSH
8867: LD_INT 22
8869: PUSH
8870: LD_VAR 0 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 2
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 33
8891: PUSH
8892: LD_INT 1
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: LD_INT 24
8904: PUSH
8905: LD_INT 1000
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 70
8926: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8927: LD_ADDR_VAR 0 12
8931: PUSH
8932: LD_VAR 0 2
8936: PPUSH
8937: LD_INT 22
8939: PUSH
8940: LD_VAR 0 1
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: LD_INT 21
8951: PUSH
8952: LD_INT 2
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 33
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 24
8971: PUSH
8972: LD_INT 1000
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: LD_INT 58
8981: PUSH
8982: EMPTY
8983: LIST
8984: PUSH
8985: LD_INT 3
8987: PUSH
8988: LD_INT 34
8990: PUSH
8991: LD_INT 53
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PPUSH
9010: CALL_OW 70
9014: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9015: LD_ADDR_VAR 0 13
9019: PUSH
9020: EMPTY
9021: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9022: LD_ADDR_VAR 0 14
9026: PUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: LD_INT 22
9034: PUSH
9035: LD_VAR 0 1
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 25
9046: PUSH
9047: LD_INT 3
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PPUSH
9058: CALL_OW 70
9062: ST_TO_ADDR
// if damageVehicle_list > 0 then
9063: LD_VAR 0 10
9067: PUSH
9068: LD_INT 0
9070: GREATER
9071: IFFALSE 9109
// begin for i in damageVehicle_list do
9073: LD_ADDR_VAR 0 7
9077: PUSH
9078: LD_VAR 0 10
9082: PUSH
9083: FOR_IN
9084: IFFALSE 9107
// begin ComMoveXY ( i , repX , repY ) ;
9086: LD_VAR 0 7
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_VAR 0 4
9100: PPUSH
9101: CALL_OW 111
// end ;
9105: GO 9083
9107: POP
9108: POP
// end ; if vehicleNeedRepair_list > 0 then
9109: LD_VAR 0 11
9113: PUSH
9114: LD_INT 0
9116: GREATER
9117: IFFALSE 9204
// begin for i in vehicleNeedRepair_list do
9119: LD_ADDR_VAR 0 7
9123: PUSH
9124: LD_VAR 0 11
9128: PUSH
9129: FOR_IN
9130: IFFALSE 9202
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9132: LD_ADDR_VAR 0 13
9136: PUSH
9137: LD_VAR 0 13
9141: PUSH
9142: LD_VAR 0 7
9146: PPUSH
9147: CALL_OW 313
9151: ADD
9152: ST_TO_ADDR
// for j in mechanicInside_list do
9153: LD_ADDR_VAR 0 8
9157: PUSH
9158: LD_VAR 0 13
9162: PUSH
9163: FOR_IN
9164: IFFALSE 9198
// begin ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9182: LD_VAR 0 7
9186: PPUSH
9187: LD_VAR 0 8
9191: PPUSH
9192: CALL_OW 129
// end ;
9196: GO 9163
9198: POP
9199: POP
// end ;
9200: GO 9129
9202: POP
9203: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9204: LD_VAR 0 12
9208: PUSH
9209: LD_INT 0
9211: GREATER
9212: IFFALSE 9252
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9214: LD_VAR 0 14
9218: PUSH
9219: LD_INT 1
9221: ARRAY
9222: PPUSH
9223: LD_VAR 0 12
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9236: LD_VAR 0 12
9240: PUSH
9241: LD_INT 1
9243: ARRAY
9244: PPUSH
9245: LD_INT 100
9247: PPUSH
9248: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9252: LD_VAR 0 9
9256: PUSH
9257: LD_INT 0
9259: GREATER
9260: IFFALSE 9451
// begin for i in vehicleOK_list do
9262: LD_ADDR_VAR 0 7
9266: PUSH
9267: LD_VAR 0 9
9271: PUSH
9272: FOR_IN
9273: IFFALSE 9449
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9275: LD_ADDR_VAR 0 15
9279: PUSH
9280: LD_INT 22
9282: PUSH
9283: LD_VAR 0 5
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: PPUSH
9297: LD_VAR 0 7
9301: PPUSH
9302: CALL_OW 74
9306: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9307: LD_ADDR_VAR 0 16
9311: PUSH
9312: LD_INT 22
9314: PUSH
9315: LD_VAR 0 5
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 2
9326: PUSH
9327: LD_INT 59
9329: PUSH
9330: EMPTY
9331: LIST
9332: PUSH
9333: LD_INT 21
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 21
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: PPUSH
9366: CALL_OW 69
9370: PPUSH
9371: LD_VAR 0 7
9375: PPUSH
9376: CALL_OW 74
9380: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9381: LD_VAR 0 7
9385: PPUSH
9386: LD_VAR 0 15
9390: PPUSH
9391: CALL_OW 296
9395: PUSH
9396: LD_INT 8
9398: PLUS
9399: PUSH
9400: LD_VAR 0 7
9404: PPUSH
9405: LD_VAR 0 16
9409: PPUSH
9410: CALL_OW 296
9414: LESS
9415: IFFALSE 9433
// begin ComAttackUnit ( i , target1 ) ;
9417: LD_VAR 0 7
9421: PPUSH
9422: LD_VAR 0 15
9426: PPUSH
9427: CALL_OW 115
// end else
9431: GO 9447
// begin ComAttackUnit ( i , target2 ) ;
9433: LD_VAR 0 7
9437: PPUSH
9438: LD_VAR 0 16
9442: PPUSH
9443: CALL_OW 115
// end ; end ;
9447: GO 9272
9449: POP
9450: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9451: LD_ADDR_VAR 0 7
9455: PUSH
9456: LD_VAR 0 2
9460: PPUSH
9461: LD_INT 22
9463: PUSH
9464: LD_VAR 0 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 70
9491: NOT
9492: PUSH
9493: FOR_IN
9494: IFFALSE 9517
// ComMoveXY ( i , repX , repY ) ;
9496: LD_VAR 0 7
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 111
9515: GO 9493
9517: POP
9518: POP
// end ;
9519: LD_VAR 0 6
9523: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9524: LD_INT 0
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9534: LD_INT 22
9536: PUSH
9537: LD_VAR 0 1
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 21
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 69
9564: PUSH
9565: LD_VAR 0 3
9569: LESSEQUAL
9570: IFFALSE 9637
// for i = 1 to vehCount do
9572: LD_ADDR_VAR 0 10
9576: PUSH
9577: DOUBLE
9578: LD_INT 1
9580: DEC
9581: ST_TO_ADDR
9582: LD_VAR 0 3
9586: PUSH
9587: FOR_TO
9588: IFFALSE 9635
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9590: LD_VAR 0 2
9594: PPUSH
9595: LD_VAR 0 8
9599: PPUSH
9600: LD_VAR 0 6
9604: PPUSH
9605: LD_VAR 0 7
9609: PPUSH
9610: LD_VAR 0 5
9614: PUSH
9615: LD_INT 1
9617: PPUSH
9618: LD_VAR 0 5
9622: PPUSH
9623: CALL_OW 12
9627: ARRAY
9628: PPUSH
9629: CALL_OW 185
9633: GO 9587
9635: POP
9636: POP
// repeat wait ( 0 0$1 ) ;
9637: LD_INT 35
9639: PPUSH
9640: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9644: LD_INT 22
9646: PUSH
9647: LD_VAR 0 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 21
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 24
9668: PUSH
9669: LD_INT 250
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 69
9685: PUSH
9686: LD_VAR 0 3
9690: GREATEREQUAL
9691: IFFALSE 9637
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9693: LD_INT 22
9695: PUSH
9696: LD_VAR 0 1
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 21
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 24
9717: PUSH
9718: LD_INT 250
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: PUSH
9735: LD_VAR 0 3
9739: GREATEREQUAL
9740: IFFALSE 10083
// begin repeat begin wait ( 0 0$1 ) ;
9742: LD_INT 35
9744: PPUSH
9745: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9749: LD_INT 22
9751: PUSH
9752: LD_VAR 0 1
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 21
9763: PUSH
9764: LD_INT 2
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 24
9773: PUSH
9774: LD_INT 651
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 69
9790: PUSH
9791: LD_INT 0
9793: GREATER
9794: IFFALSE 10022
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9796: LD_ADDR_VAR 0 10
9800: PUSH
9801: LD_INT 22
9803: PUSH
9804: LD_VAR 0 1
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 24
9825: PUSH
9826: LD_INT 651
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: PUSH
9843: FOR_IN
9844: IFFALSE 10020
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9846: LD_ADDR_VAR 0 15
9850: PUSH
9851: LD_INT 22
9853: PUSH
9854: LD_VAR 0 4
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PPUSH
9863: CALL_OW 69
9867: PPUSH
9868: LD_VAR 0 10
9872: PPUSH
9873: CALL_OW 74
9877: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9878: LD_ADDR_VAR 0 16
9882: PUSH
9883: LD_INT 22
9885: PUSH
9886: LD_VAR 0 4
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: LD_INT 59
9900: PUSH
9901: EMPTY
9902: LIST
9903: PUSH
9904: LD_INT 21
9906: PUSH
9907: LD_INT 1
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 2
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: PPUSH
9942: LD_VAR 0 10
9946: PPUSH
9947: CALL_OW 74
9951: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9952: LD_VAR 0 10
9956: PPUSH
9957: LD_VAR 0 15
9961: PPUSH
9962: CALL_OW 296
9966: PUSH
9967: LD_INT 8
9969: PLUS
9970: PUSH
9971: LD_VAR 0 10
9975: PPUSH
9976: LD_VAR 0 16
9980: PPUSH
9981: CALL_OW 296
9985: LESS
9986: IFFALSE 10004
// begin ComAttackUnit ( i , target1 ) ;
9988: LD_VAR 0 10
9992: PPUSH
9993: LD_VAR 0 15
9997: PPUSH
9998: CALL_OW 115
// end else
10002: GO 10018
// begin ComAttackUnit ( i , target2 ) ;
10004: LD_VAR 0 10
10008: PPUSH
10009: LD_VAR 0 16
10013: PPUSH
10014: CALL_OW 115
// end ; end ;
10018: GO 9843
10020: POP
10021: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
10022: LD_INT 22
10024: PUSH
10025: LD_VAR 0 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 21
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PUSH
10053: LD_INT 0
10055: EQUAL
10056: PUSH
10057: LD_INT 22
10059: PUSH
10060: LD_VAR 0 4
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: PPUSH
10072: CALL_OW 69
10076: PUSH
10077: LD_INT 0
10079: EQUAL
10080: OR
10081: IFFALSE 9742
// end ; end ;
10083: LD_VAR 0 9
10087: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10088: LD_INT 0
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
10096: PPUSH
10097: PPUSH
10098: PPUSH
10099: PPUSH
10100: PPUSH
// for i = 1 to medicCount do
10101: LD_ADDR_VAR 0 14
10105: PUSH
10106: DOUBLE
10107: LD_INT 1
10109: DEC
10110: ST_TO_ADDR
10111: LD_VAR 0 7
10115: PUSH
10116: FOR_TO
10117: IFFALSE 10199
// begin uc_side = side ;
10119: LD_ADDR_OWVAR 20
10123: PUSH
10124: LD_VAR 0 1
10128: ST_TO_ADDR
// uc_nation = nation ;
10129: LD_ADDR_OWVAR 21
10133: PUSH
10134: LD_VAR 0 2
10138: ST_TO_ADDR
// hc_name =  ;
10139: LD_ADDR_OWVAR 26
10143: PUSH
10144: LD_STRING 
10146: ST_TO_ADDR
// hc_gallery =  ;
10147: LD_ADDR_OWVAR 33
10151: PUSH
10152: LD_STRING 
10154: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10155: LD_INT 0
10157: PPUSH
10158: LD_INT 4
10160: PPUSH
10161: LD_VAR 0 8
10165: PPUSH
10166: CALL_OW 380
// un = CreateHuman ;
10170: LD_ADDR_VAR 0 16
10174: PUSH
10175: CALL_OW 44
10179: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10180: LD_VAR 0 16
10184: PPUSH
10185: LD_VAR 0 9
10189: PPUSH
10190: LD_INT 0
10192: PPUSH
10193: CALL_OW 49
// end ;
10197: GO 10116
10199: POP
10200: POP
// for i = 1 to soldierCount do
10201: LD_ADDR_VAR 0 14
10205: PUSH
10206: DOUBLE
10207: LD_INT 1
10209: DEC
10210: ST_TO_ADDR
10211: LD_VAR 0 3
10215: PUSH
10216: FOR_TO
10217: IFFALSE 10299
// begin uc_side = side ;
10219: LD_ADDR_OWVAR 20
10223: PUSH
10224: LD_VAR 0 1
10228: ST_TO_ADDR
// uc_nation = nation ;
10229: LD_ADDR_OWVAR 21
10233: PUSH
10234: LD_VAR 0 2
10238: ST_TO_ADDR
// hc_name =  ;
10239: LD_ADDR_OWVAR 26
10243: PUSH
10244: LD_STRING 
10246: ST_TO_ADDR
// hc_gallery =  ;
10247: LD_ADDR_OWVAR 33
10251: PUSH
10252: LD_STRING 
10254: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10255: LD_INT 0
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: LD_VAR 0 8
10265: PPUSH
10266: CALL_OW 380
// un = CreateHuman ;
10270: LD_ADDR_VAR 0 16
10274: PUSH
10275: CALL_OW 44
10279: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10280: LD_VAR 0 16
10284: PPUSH
10285: LD_VAR 0 9
10289: PPUSH
10290: LD_INT 0
10292: PPUSH
10293: CALL_OW 49
// end ;
10297: GO 10216
10299: POP
10300: POP
// for i = 1 to sniperCount do
10301: LD_ADDR_VAR 0 14
10305: PUSH
10306: DOUBLE
10307: LD_INT 1
10309: DEC
10310: ST_TO_ADDR
10311: LD_VAR 0 4
10315: PUSH
10316: FOR_TO
10317: IFFALSE 10399
// begin uc_side = side ;
10319: LD_ADDR_OWVAR 20
10323: PUSH
10324: LD_VAR 0 1
10328: ST_TO_ADDR
// uc_nation = nation ;
10329: LD_ADDR_OWVAR 21
10333: PUSH
10334: LD_VAR 0 2
10338: ST_TO_ADDR
// hc_name =  ;
10339: LD_ADDR_OWVAR 26
10343: PUSH
10344: LD_STRING 
10346: ST_TO_ADDR
// hc_gallery =  ;
10347: LD_ADDR_OWVAR 33
10351: PUSH
10352: LD_STRING 
10354: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10355: LD_INT 0
10357: PPUSH
10358: LD_INT 5
10360: PPUSH
10361: LD_VAR 0 8
10365: PPUSH
10366: CALL_OW 380
// un = CreateHuman ;
10370: LD_ADDR_VAR 0 16
10374: PUSH
10375: CALL_OW 44
10379: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10380: LD_VAR 0 16
10384: PPUSH
10385: LD_VAR 0 9
10389: PPUSH
10390: LD_INT 0
10392: PPUSH
10393: CALL_OW 49
// end ;
10397: GO 10316
10399: POP
10400: POP
// for i = 1 to bazookCount do
10401: LD_ADDR_VAR 0 14
10405: PUSH
10406: DOUBLE
10407: LD_INT 1
10409: DEC
10410: ST_TO_ADDR
10411: LD_VAR 0 5
10415: PUSH
10416: FOR_TO
10417: IFFALSE 10499
// begin uc_side = side ;
10419: LD_ADDR_OWVAR 20
10423: PUSH
10424: LD_VAR 0 1
10428: ST_TO_ADDR
// uc_nation = nation ;
10429: LD_ADDR_OWVAR 21
10433: PUSH
10434: LD_VAR 0 2
10438: ST_TO_ADDR
// hc_name =  ;
10439: LD_ADDR_OWVAR 26
10443: PUSH
10444: LD_STRING 
10446: ST_TO_ADDR
// hc_gallery =  ;
10447: LD_ADDR_OWVAR 33
10451: PUSH
10452: LD_STRING 
10454: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10455: LD_INT 0
10457: PPUSH
10458: LD_INT 9
10460: PPUSH
10461: LD_VAR 0 8
10465: PPUSH
10466: CALL_OW 380
// un = CreateHuman ;
10470: LD_ADDR_VAR 0 16
10474: PUSH
10475: CALL_OW 44
10479: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10480: LD_VAR 0 16
10484: PPUSH
10485: LD_VAR 0 9
10489: PPUSH
10490: LD_INT 0
10492: PPUSH
10493: CALL_OW 49
// end ;
10497: GO 10416
10499: POP
10500: POP
// for i = 1 to mortalCount do
10501: LD_ADDR_VAR 0 14
10505: PUSH
10506: DOUBLE
10507: LD_INT 1
10509: DEC
10510: ST_TO_ADDR
10511: LD_VAR 0 6
10515: PUSH
10516: FOR_TO
10517: IFFALSE 10599
// begin uc_side = side ;
10519: LD_ADDR_OWVAR 20
10523: PUSH
10524: LD_VAR 0 1
10528: ST_TO_ADDR
// uc_nation = nation ;
10529: LD_ADDR_OWVAR 21
10533: PUSH
10534: LD_VAR 0 2
10538: ST_TO_ADDR
// hc_name =  ;
10539: LD_ADDR_OWVAR 26
10543: PUSH
10544: LD_STRING 
10546: ST_TO_ADDR
// hc_gallery =  ;
10547: LD_ADDR_OWVAR 33
10551: PUSH
10552: LD_STRING 
10554: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10555: LD_INT 0
10557: PPUSH
10558: LD_INT 8
10560: PPUSH
10561: LD_VAR 0 8
10565: PPUSH
10566: CALL_OW 380
// un = CreateHuman ;
10570: LD_ADDR_VAR 0 16
10574: PUSH
10575: CALL_OW 44
10579: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10580: LD_VAR 0 16
10584: PPUSH
10585: LD_VAR 0 9
10589: PPUSH
10590: LD_INT 0
10592: PPUSH
10593: CALL_OW 49
// end ;
10597: GO 10516
10599: POP
10600: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10601: LD_ADDR_VAR 0 19
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_VAR 0 1
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 2
10620: PUSH
10621: LD_INT 25
10623: PUSH
10624: LD_INT 1
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 25
10633: PUSH
10634: LD_INT 5
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 25
10643: PUSH
10644: LD_INT 8
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 25
10653: PUSH
10654: LD_INT 9
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 69
10676: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10677: LD_ADDR_VAR 0 18
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_VAR 0 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 25
10696: PUSH
10697: LD_INT 4
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PPUSH
10708: CALL_OW 69
10712: ST_TO_ADDR
// for i in medic_list do
10713: LD_ADDR_VAR 0 14
10717: PUSH
10718: LD_VAR 0 18
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10742
// ComMoveToArea ( i , healArea ) ;
10726: LD_VAR 0 14
10730: PPUSH
10731: LD_VAR 0 10
10735: PPUSH
10736: CALL_OW 113
10740: GO 10723
10742: POP
10743: POP
// if strategy = 1 then
10744: LD_VAR 0 12
10748: PUSH
10749: LD_INT 1
10751: EQUAL
10752: IFFALSE 11298
// begin repeat wait ( 0 0$3 ) ;
10754: LD_INT 105
10756: PPUSH
10757: CALL_OW 67
// for i in soldiersOK_list do
10761: LD_ADDR_VAR 0 14
10765: PUSH
10766: LD_VAR 0 19
10770: PUSH
10771: FOR_IN
10772: IFFALSE 10836
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10774: LD_VAR 0 14
10778: PPUSH
10779: LD_INT 91
10781: PPUSH
10782: LD_INT 63
10784: PPUSH
10785: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
10789: LD_VAR 0 14
10793: PPUSH
10794: LD_INT 101
10796: PPUSH
10797: LD_INT 53
10799: PPUSH
10800: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
10804: LD_VAR 0 14
10808: PPUSH
10809: LD_INT 75
10811: PPUSH
10812: LD_INT 23
10814: PPUSH
10815: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
10819: LD_VAR 0 14
10823: PPUSH
10824: LD_INT 78
10826: PPUSH
10827: LD_INT 8
10829: PPUSH
10830: CALL_OW 174
// end ;
10834: GO 10771
10836: POP
10837: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10838: LD_INT 12
10840: PPUSH
10841: LD_INT 22
10843: PUSH
10844: LD_VAR 0 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 70
10857: PUSH
10858: LD_INT 2
10860: GREATER
10861: IFFALSE 10754
// repeat wait ( 0 0$1 ) ;
10863: LD_INT 35
10865: PPUSH
10866: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10870: LD_ADDR_VAR 0 17
10874: PUSH
10875: LD_INT 22
10877: PUSH
10878: LD_VAR 0 1
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: LD_INT 3
10892: PUSH
10893: LD_INT 24
10895: PUSH
10896: LD_INT 550
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 24
10909: PUSH
10910: LD_INT 250
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PPUSH
10926: CALL_OW 69
10930: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10931: LD_ADDR_VAR 0 19
10935: PUSH
10936: LD_INT 22
10938: PUSH
10939: LD_VAR 0 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 25
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 5
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 8
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 9
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 24
11000: PUSH
11001: LD_INT 1000
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 69
11017: ST_TO_ADDR
// if medicCount > 0 then
11018: LD_VAR 0 7
11022: PUSH
11023: LD_INT 0
11025: GREATER
11026: IFFALSE 11100
// begin if damageUnit_list > 0 then
11028: LD_VAR 0 17
11032: PUSH
11033: LD_INT 0
11035: GREATER
11036: IFFALSE 11100
// begin for i in damageUnit_list do
11038: LD_ADDR_VAR 0 14
11042: PUSH
11043: LD_VAR 0 17
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11098
// begin ComMoveToArea ( i , healArea ) ;
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 10
11060: PPUSH
11061: CALL_OW 113
// for j in medic_list do
11065: LD_ADDR_VAR 0 15
11069: PUSH
11070: LD_VAR 0 18
11074: PUSH
11075: FOR_IN
11076: IFFALSE 11094
// AddComHeal ( j , i ) ;
11078: LD_VAR 0 15
11082: PPUSH
11083: LD_VAR 0 14
11087: PPUSH
11088: CALL_OW 188
11092: GO 11075
11094: POP
11095: POP
// end ;
11096: GO 11048
11098: POP
11099: POP
// end ; end ; for i in soldiersOK_list do
11100: LD_ADDR_VAR 0 14
11104: PUSH
11105: LD_VAR 0 19
11109: PUSH
11110: FOR_IN
11111: IFFALSE 11287
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11113: LD_ADDR_VAR 0 22
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_VAR 0 11
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PPUSH
11130: CALL_OW 69
11134: PPUSH
11135: LD_VAR 0 14
11139: PPUSH
11140: CALL_OW 74
11144: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11145: LD_ADDR_VAR 0 23
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: LD_VAR 0 11
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: LD_INT 59
11167: PUSH
11168: EMPTY
11169: LIST
11170: PUSH
11171: LD_INT 21
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 21
11183: PUSH
11184: LD_INT 2
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: EMPTY
11202: LIST
11203: PPUSH
11204: CALL_OW 69
11208: PPUSH
11209: LD_VAR 0 14
11213: PPUSH
11214: CALL_OW 74
11218: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11219: LD_VAR 0 14
11223: PPUSH
11224: LD_VAR 0 22
11228: PPUSH
11229: CALL_OW 296
11233: PUSH
11234: LD_INT 6
11236: PLUS
11237: PUSH
11238: LD_VAR 0 14
11242: PPUSH
11243: LD_VAR 0 23
11247: PPUSH
11248: CALL_OW 296
11252: LESS
11253: IFFALSE 11271
// begin ComAttackUnit ( i , target1 ) ;
11255: LD_VAR 0 14
11259: PPUSH
11260: LD_VAR 0 22
11264: PPUSH
11265: CALL_OW 115
// end else
11269: GO 11285
// begin ComAttackUnit ( i , target2 ) ;
11271: LD_VAR 0 14
11275: PPUSH
11276: LD_VAR 0 23
11280: PPUSH
11281: CALL_OW 115
// end ; end ;
11285: GO 11110
11287: POP
11288: POP
// until soldiersOK_list = [ ] ;
11289: LD_VAR 0 19
11293: PUSH
11294: EMPTY
11295: EQUAL
11296: IFFALSE 10863
// end ; if strategy = 2 then
11298: LD_VAR 0 12
11302: PUSH
11303: LD_INT 2
11305: EQUAL
11306: IFFALSE 11822
// begin repeat wait ( 0 0$1 ) ;
11308: LD_INT 35
11310: PPUSH
11311: CALL_OW 67
// for i in soldiersOK_list do
11315: LD_ADDR_VAR 0 14
11319: PUSH
11320: LD_VAR 0 19
11324: PUSH
11325: FOR_IN
11326: IFFALSE 11360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11328: LD_VAR 0 14
11332: PPUSH
11333: LD_INT 91
11335: PPUSH
11336: LD_INT 63
11338: PPUSH
11339: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11343: LD_VAR 0 14
11347: PPUSH
11348: LD_INT 75
11350: PPUSH
11351: LD_INT 33
11353: PPUSH
11354: CALL_OW 174
// end ;
11358: GO 11325
11360: POP
11361: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11362: LD_INT 13
11364: PPUSH
11365: LD_INT 22
11367: PUSH
11368: LD_VAR 0 1
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 70
11381: PUSH
11382: LD_INT 2
11384: GREATER
11385: IFFALSE 11308
// repeat wait ( 0 0$3 ) ;
11387: LD_INT 105
11389: PPUSH
11390: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11394: LD_ADDR_VAR 0 17
11398: PUSH
11399: LD_INT 22
11401: PUSH
11402: LD_VAR 0 1
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 1
11413: PUSH
11414: LD_INT 3
11416: PUSH
11417: LD_INT 24
11419: PUSH
11420: LD_INT 550
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 24
11433: PUSH
11434: LD_INT 250
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11455: LD_ADDR_VAR 0 19
11459: PUSH
11460: LD_INT 22
11462: PUSH
11463: LD_VAR 0 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 2
11474: PUSH
11475: LD_INT 25
11477: PUSH
11478: LD_INT 1
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 25
11487: PUSH
11488: LD_INT 5
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 25
11497: PUSH
11498: LD_INT 8
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 25
11507: PUSH
11508: LD_INT 9
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 24
11524: PUSH
11525: LD_INT 1000
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: ST_TO_ADDR
// if medicCount > 0 then
11542: LD_VAR 0 7
11546: PUSH
11547: LD_INT 0
11549: GREATER
11550: IFFALSE 11624
// begin if damageUnit_list > 0 then
11552: LD_VAR 0 17
11556: PUSH
11557: LD_INT 0
11559: GREATER
11560: IFFALSE 11624
// begin for i in damageUnit_list do
11562: LD_ADDR_VAR 0 14
11566: PUSH
11567: LD_VAR 0 17
11571: PUSH
11572: FOR_IN
11573: IFFALSE 11622
// begin ComMoveToArea ( i , healArea ) ;
11575: LD_VAR 0 14
11579: PPUSH
11580: LD_VAR 0 10
11584: PPUSH
11585: CALL_OW 113
// for j in medic_list do
11589: LD_ADDR_VAR 0 15
11593: PUSH
11594: LD_VAR 0 18
11598: PUSH
11599: FOR_IN
11600: IFFALSE 11618
// AddComHeal ( j , i ) ;
11602: LD_VAR 0 15
11606: PPUSH
11607: LD_VAR 0 14
11611: PPUSH
11612: CALL_OW 188
11616: GO 11599
11618: POP
11619: POP
// end ;
11620: GO 11572
11622: POP
11623: POP
// end ; end ; for i in soldiersOK_list do
11624: LD_ADDR_VAR 0 14
11628: PUSH
11629: LD_VAR 0 19
11633: PUSH
11634: FOR_IN
11635: IFFALSE 11811
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11637: LD_ADDR_VAR 0 22
11641: PUSH
11642: LD_INT 22
11644: PUSH
11645: LD_VAR 0 11
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 69
11658: PPUSH
11659: LD_VAR 0 14
11663: PPUSH
11664: CALL_OW 74
11668: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11669: LD_ADDR_VAR 0 23
11673: PUSH
11674: LD_INT 22
11676: PUSH
11677: LD_VAR 0 11
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 2
11688: PUSH
11689: LD_INT 59
11691: PUSH
11692: EMPTY
11693: LIST
11694: PUSH
11695: LD_INT 21
11697: PUSH
11698: LD_INT 1
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 21
11707: PUSH
11708: LD_INT 2
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: PPUSH
11728: CALL_OW 69
11732: PPUSH
11733: LD_VAR 0 14
11737: PPUSH
11738: CALL_OW 74
11742: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11743: LD_VAR 0 14
11747: PPUSH
11748: LD_VAR 0 22
11752: PPUSH
11753: CALL_OW 296
11757: PUSH
11758: LD_INT 6
11760: PLUS
11761: PUSH
11762: LD_VAR 0 14
11766: PPUSH
11767: LD_VAR 0 23
11771: PPUSH
11772: CALL_OW 296
11776: LESS
11777: IFFALSE 11795
// begin ComAttackUnit ( i , target1 ) ;
11779: LD_VAR 0 14
11783: PPUSH
11784: LD_VAR 0 22
11788: PPUSH
11789: CALL_OW 115
// end else
11793: GO 11809
// begin ComAttackUnit ( i , target2 ) ;
11795: LD_VAR 0 14
11799: PPUSH
11800: LD_VAR 0 23
11804: PPUSH
11805: CALL_OW 115
// end ; end ;
11809: GO 11634
11811: POP
11812: POP
// until soldiersOK_list = [ ] ;
11813: LD_VAR 0 19
11817: PUSH
11818: EMPTY
11819: EQUAL
11820: IFFALSE 11387
// end ; if strategy = 3 then
11822: LD_VAR 0 12
11826: PUSH
11827: LD_INT 3
11829: EQUAL
11830: IFFALSE 12376
// begin repeat wait ( 0 0$3 ) ;
11832: LD_INT 105
11834: PPUSH
11835: CALL_OW 67
// for i in soldiersOK_list do
11839: LD_ADDR_VAR 0 14
11843: PUSH
11844: LD_VAR 0 19
11848: PUSH
11849: FOR_IN
11850: IFFALSE 11914
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11852: LD_VAR 0 14
11856: PPUSH
11857: LD_INT 63
11859: PPUSH
11860: LD_INT 71
11862: PPUSH
11863: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
11867: LD_VAR 0 14
11871: PPUSH
11872: LD_INT 35
11874: PPUSH
11875: LD_INT 44
11877: PPUSH
11878: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
11882: LD_VAR 0 14
11886: PPUSH
11887: LD_INT 23
11889: PPUSH
11890: LD_INT 18
11892: PPUSH
11893: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
11897: LD_VAR 0 14
11901: PPUSH
11902: LD_INT 26
11904: PPUSH
11905: LD_INT 12
11907: PPUSH
11908: CALL_OW 174
// end ;
11912: GO 11849
11914: POP
11915: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11916: LD_INT 14
11918: PPUSH
11919: LD_INT 22
11921: PUSH
11922: LD_VAR 0 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 70
11935: PUSH
11936: LD_INT 2
11938: GREATER
11939: IFFALSE 11832
// repeat wait ( 0 0$1 ) ;
11941: LD_INT 35
11943: PPUSH
11944: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11948: LD_ADDR_VAR 0 17
11952: PUSH
11953: LD_INT 22
11955: PUSH
11956: LD_VAR 0 1
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 1
11967: PUSH
11968: LD_INT 3
11970: PUSH
11971: LD_INT 24
11973: PUSH
11974: LD_INT 550
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 24
11987: PUSH
11988: LD_INT 250
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PPUSH
12004: CALL_OW 69
12008: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12009: LD_ADDR_VAR 0 19
12013: PUSH
12014: LD_INT 22
12016: PUSH
12017: LD_VAR 0 1
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: LD_INT 25
12031: PUSH
12032: LD_INT 1
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 25
12041: PUSH
12042: LD_INT 5
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 25
12051: PUSH
12052: LD_INT 8
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 25
12061: PUSH
12062: LD_INT 9
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 24
12078: PUSH
12079: LD_INT 1000
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 69
12095: ST_TO_ADDR
// if medicCount > 0 then
12096: LD_VAR 0 7
12100: PUSH
12101: LD_INT 0
12103: GREATER
12104: IFFALSE 12178
// begin if damageUnit_list > 0 then
12106: LD_VAR 0 17
12110: PUSH
12111: LD_INT 0
12113: GREATER
12114: IFFALSE 12178
// begin for i in damageUnit_list do
12116: LD_ADDR_VAR 0 14
12120: PUSH
12121: LD_VAR 0 17
12125: PUSH
12126: FOR_IN
12127: IFFALSE 12176
// begin ComMoveToArea ( i , healArea ) ;
12129: LD_VAR 0 14
12133: PPUSH
12134: LD_VAR 0 10
12138: PPUSH
12139: CALL_OW 113
// for j in medic_list do
12143: LD_ADDR_VAR 0 15
12147: PUSH
12148: LD_VAR 0 18
12152: PUSH
12153: FOR_IN
12154: IFFALSE 12172
// AddComHeal ( j , i ) ;
12156: LD_VAR 0 15
12160: PPUSH
12161: LD_VAR 0 14
12165: PPUSH
12166: CALL_OW 188
12170: GO 12153
12172: POP
12173: POP
// end ;
12174: GO 12126
12176: POP
12177: POP
// end ; end ; for i in soldiersOK_list do
12178: LD_ADDR_VAR 0 14
12182: PUSH
12183: LD_VAR 0 19
12187: PUSH
12188: FOR_IN
12189: IFFALSE 12365
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12191: LD_ADDR_VAR 0 22
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_VAR 0 11
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 69
12212: PPUSH
12213: LD_VAR 0 14
12217: PPUSH
12218: CALL_OW 74
12222: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12223: LD_ADDR_VAR 0 23
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_VAR 0 11
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 2
12242: PUSH
12243: LD_INT 59
12245: PUSH
12246: EMPTY
12247: LIST
12248: PUSH
12249: LD_INT 21
12251: PUSH
12252: LD_INT 1
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 21
12261: PUSH
12262: LD_INT 2
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: PPUSH
12287: LD_VAR 0 14
12291: PPUSH
12292: CALL_OW 74
12296: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12297: LD_VAR 0 14
12301: PPUSH
12302: LD_VAR 0 22
12306: PPUSH
12307: CALL_OW 296
12311: PUSH
12312: LD_INT 6
12314: PLUS
12315: PUSH
12316: LD_VAR 0 14
12320: PPUSH
12321: LD_VAR 0 23
12325: PPUSH
12326: CALL_OW 296
12330: LESS
12331: IFFALSE 12349
// begin ComAttackUnit ( i , target1 ) ;
12333: LD_VAR 0 14
12337: PPUSH
12338: LD_VAR 0 22
12342: PPUSH
12343: CALL_OW 115
// end else
12347: GO 12363
// begin ComAttackUnit ( i , target2 ) ;
12349: LD_VAR 0 14
12353: PPUSH
12354: LD_VAR 0 23
12358: PPUSH
12359: CALL_OW 115
// end ; end ;
12363: GO 12188
12365: POP
12366: POP
// until soldiersOK_list = [ ] ;
12367: LD_VAR 0 19
12371: PUSH
12372: EMPTY
12373: EQUAL
12374: IFFALSE 11941
// end ; end ;
12376: LD_VAR 0 13
12380: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12381: LD_INT 0
12383: PPUSH
12384: PPUSH
12385: PPUSH
12386: PPUSH
12387: PPUSH
12388: PPUSH
12389: PPUSH
12390: PPUSH
12391: PPUSH
12392: PPUSH
12393: PPUSH
// amChassisTab = [ ] ;
12394: LD_ADDR_VAR 0 19
12398: PUSH
12399: EMPTY
12400: ST_TO_ADDR
// arChassisTab = [ ] ;
12401: LD_ADDR_VAR 0 18
12405: PUSH
12406: EMPTY
12407: ST_TO_ADDR
// ruChassisTab = [ ] ;
12408: LD_ADDR_VAR 0 17
12412: PUSH
12413: EMPTY
12414: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12415: LD_INT 35
12417: PPUSH
12418: CALL_OW 67
// if nation = 1 then
12422: LD_VAR 0 5
12426: PUSH
12427: LD_INT 1
12429: EQUAL
12430: IFFALSE 12921
// begin uc_side = side ;
12432: LD_ADDR_OWVAR 20
12436: PUSH
12437: LD_VAR 0 2
12441: ST_TO_ADDR
// uc_nation = nation ;
12442: LD_ADDR_OWVAR 21
12446: PUSH
12447: LD_VAR 0 5
12451: ST_TO_ADDR
// vc_engine = vehengine ;
12452: LD_ADDR_OWVAR 39
12456: PUSH
12457: LD_VAR 0 6
12461: ST_TO_ADDR
// vc_control = vehcontrol ;
12462: LD_ADDR_OWVAR 38
12466: PUSH
12467: LD_VAR 0 7
12471: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12472: LD_ADDR_OWVAR 40
12476: PUSH
12477: LD_VAR 0 10
12481: PUSH
12482: LD_INT 1
12484: PPUSH
12485: LD_VAR 0 10
12489: PPUSH
12490: CALL_OW 12
12494: ARRAY
12495: ST_TO_ADDR
// for j = 1 to AMWeapon do
12496: LD_ADDR_VAR 0 14
12500: PUSH
12501: DOUBLE
12502: LD_INT 1
12504: DEC
12505: ST_TO_ADDR
12506: LD_VAR 0 10
12510: PUSH
12511: FOR_TO
12512: IFFALSE 12813
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12514: LD_VAR 0 10
12518: PUSH
12519: LD_VAR 0 14
12523: ARRAY
12524: PUSH
12525: LD_INT 2
12527: EQUAL
12528: PUSH
12529: LD_VAR 0 10
12533: PUSH
12534: LD_VAR 0 14
12538: ARRAY
12539: PUSH
12540: LD_INT 3
12542: EQUAL
12543: OR
12544: IFFALSE 12597
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12546: LD_ADDR_VAR 0 19
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: LD_INT 4
12562: PUSH
12563: LD_INT 5
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12573: LD_ADDR_OWVAR 37
12577: PUSH
12578: LD_VAR 0 19
12582: PUSH
12583: LD_INT 1
12585: PPUSH
12586: LD_VAR 0 19
12590: PPUSH
12591: CALL_OW 12
12595: ARRAY
12596: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12597: LD_VAR 0 10
12601: PUSH
12602: LD_VAR 0 14
12606: ARRAY
12607: PUSH
12608: LD_INT 4
12610: EQUAL
12611: PUSH
12612: LD_VAR 0 10
12616: PUSH
12617: LD_VAR 0 14
12621: ARRAY
12622: PUSH
12623: LD_INT 5
12625: EQUAL
12626: OR
12627: PUSH
12628: LD_VAR 0 10
12632: PUSH
12633: LD_VAR 0 14
12637: ARRAY
12638: PUSH
12639: LD_INT 9
12641: EQUAL
12642: OR
12643: PUSH
12644: LD_VAR 0 10
12648: PUSH
12649: LD_VAR 0 14
12653: ARRAY
12654: PUSH
12655: LD_INT 11
12657: EQUAL
12658: OR
12659: PUSH
12660: LD_VAR 0 10
12664: PUSH
12665: LD_VAR 0 14
12669: ARRAY
12670: PUSH
12671: LD_INT 7
12673: EQUAL
12674: OR
12675: IFFALSE 12724
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12677: LD_ADDR_VAR 0 19
12681: PUSH
12682: LD_INT 2
12684: PUSH
12685: LD_INT 3
12687: PUSH
12688: LD_INT 4
12690: PUSH
12691: LD_INT 5
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12700: LD_ADDR_OWVAR 37
12704: PUSH
12705: LD_VAR 0 19
12709: PUSH
12710: LD_INT 1
12712: PPUSH
12713: LD_VAR 0 19
12717: PPUSH
12718: CALL_OW 12
12722: ARRAY
12723: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12724: LD_VAR 0 10
12728: PUSH
12729: LD_VAR 0 14
12733: ARRAY
12734: PUSH
12735: LD_INT 8
12737: EQUAL
12738: PUSH
12739: LD_VAR 0 10
12743: PUSH
12744: LD_VAR 0 14
12748: ARRAY
12749: PUSH
12750: LD_INT 6
12752: EQUAL
12753: OR
12754: PUSH
12755: LD_VAR 0 10
12759: PUSH
12760: LD_VAR 0 14
12764: ARRAY
12765: PUSH
12766: LD_INT 10
12768: EQUAL
12769: OR
12770: IFFALSE 12811
// begin amChassisTab = [ 4 , 5 ] ;
12772: LD_ADDR_VAR 0 19
12776: PUSH
12777: LD_INT 4
12779: PUSH
12780: LD_INT 5
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12787: LD_ADDR_OWVAR 37
12791: PUSH
12792: LD_VAR 0 19
12796: PUSH
12797: LD_INT 1
12799: PPUSH
12800: LD_VAR 0 19
12804: PPUSH
12805: CALL_OW 12
12809: ARRAY
12810: ST_TO_ADDR
// end ; end ;
12811: GO 12511
12813: POP
12814: POP
// veh = CreateVehicle ;
12815: LD_ADDR_VAR 0 16
12819: PUSH
12820: CALL_OW 45
12824: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12825: LD_VAR 0 16
12829: PPUSH
12830: LD_VAR 0 1
12834: PPUSH
12835: LD_INT 0
12837: PPUSH
12838: CALL_OW 49
// if vehControl = 1 then
12842: LD_VAR 0 7
12846: PUSH
12847: LD_INT 1
12849: EQUAL
12850: IFFALSE 12907
// begin hc_gallery =  ;
12852: LD_ADDR_OWVAR 33
12856: PUSH
12857: LD_STRING 
12859: ST_TO_ADDR
// hc_name =  ;
12860: LD_ADDR_OWVAR 26
12864: PUSH
12865: LD_STRING 
12867: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12868: LD_INT 0
12870: PPUSH
12871: LD_INT 3
12873: PPUSH
12874: LD_VAR 0 4
12878: PPUSH
12879: CALL_OW 380
// un = CreateHuman ;
12883: LD_ADDR_VAR 0 15
12887: PUSH
12888: CALL_OW 44
12892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12893: LD_VAR 0 15
12897: PPUSH
12898: LD_VAR 0 16
12902: PPUSH
12903: CALL_OW 52
// end ; i = i + 1 ;
12907: LD_ADDR_VAR 0 13
12911: PUSH
12912: LD_VAR 0 13
12916: PUSH
12917: LD_INT 1
12919: PLUS
12920: ST_TO_ADDR
// end ; if nation = 2 then
12921: LD_VAR 0 5
12925: PUSH
12926: LD_INT 2
12928: EQUAL
12929: IFFALSE 13353
// begin uc_side = side ;
12931: LD_ADDR_OWVAR 20
12935: PUSH
12936: LD_VAR 0 2
12940: ST_TO_ADDR
// uc_nation = nation ;
12941: LD_ADDR_OWVAR 21
12945: PUSH
12946: LD_VAR 0 5
12950: ST_TO_ADDR
// vc_engine = vehengine ;
12951: LD_ADDR_OWVAR 39
12955: PUSH
12956: LD_VAR 0 6
12960: ST_TO_ADDR
// vc_control = vehcontrol ;
12961: LD_ADDR_OWVAR 38
12965: PUSH
12966: LD_VAR 0 7
12970: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12971: LD_ADDR_OWVAR 40
12975: PUSH
12976: LD_VAR 0 9
12980: PUSH
12981: LD_INT 1
12983: PPUSH
12984: LD_VAR 0 9
12988: PPUSH
12989: CALL_OW 12
12993: ARRAY
12994: ST_TO_ADDR
// for j = 1 to ARWeapons do
12995: LD_ADDR_VAR 0 14
12999: PUSH
13000: DOUBLE
13001: LD_INT 1
13003: DEC
13004: ST_TO_ADDR
13005: LD_VAR 0 9
13009: PUSH
13010: FOR_TO
13011: IFFALSE 13245
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13013: LD_VAR 0 9
13017: PUSH
13018: LD_VAR 0 14
13022: ARRAY
13023: PUSH
13024: LD_INT 24
13026: EQUAL
13027: PUSH
13028: LD_VAR 0 9
13032: PUSH
13033: LD_VAR 0 14
13037: ARRAY
13038: PUSH
13039: LD_INT 22
13041: EQUAL
13042: OR
13043: PUSH
13044: LD_VAR 0 9
13048: PUSH
13049: LD_VAR 0 14
13053: ARRAY
13054: PUSH
13055: LD_INT 23
13057: EQUAL
13058: OR
13059: PUSH
13060: LD_VAR 0 9
13064: PUSH
13065: LD_VAR 0 14
13069: ARRAY
13070: PUSH
13071: LD_INT 30
13073: EQUAL
13074: OR
13075: IFFALSE 13124
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13077: LD_ADDR_VAR 0 18
13081: PUSH
13082: LD_INT 11
13084: PUSH
13085: LD_INT 12
13087: PUSH
13088: LD_INT 13
13090: PUSH
13091: LD_INT 14
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13100: LD_ADDR_OWVAR 37
13104: PUSH
13105: LD_VAR 0 18
13109: PUSH
13110: LD_INT 1
13112: PPUSH
13113: LD_VAR 0 18
13117: PPUSH
13118: CALL_OW 12
13122: ARRAY
13123: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13124: LD_VAR 0 9
13128: PUSH
13129: LD_VAR 0 14
13133: ARRAY
13134: PUSH
13135: LD_INT 29
13137: EQUAL
13138: PUSH
13139: LD_VAR 0 9
13143: PUSH
13144: LD_VAR 0 14
13148: ARRAY
13149: PUSH
13150: LD_INT 28
13152: EQUAL
13153: OR
13154: PUSH
13155: LD_VAR 0 9
13159: PUSH
13160: LD_VAR 0 14
13164: ARRAY
13165: PUSH
13166: LD_INT 27
13168: EQUAL
13169: OR
13170: PUSH
13171: LD_VAR 0 9
13175: PUSH
13176: LD_VAR 0 14
13180: ARRAY
13181: PUSH
13182: LD_INT 26
13184: EQUAL
13185: OR
13186: PUSH
13187: LD_VAR 0 9
13191: PUSH
13192: LD_VAR 0 14
13196: ARRAY
13197: PUSH
13198: LD_INT 25
13200: EQUAL
13201: OR
13202: IFFALSE 13243
// begin arChassisTab = [ 13 , 14 ] ;
13204: LD_ADDR_VAR 0 18
13208: PUSH
13209: LD_INT 13
13211: PUSH
13212: LD_INT 14
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13219: LD_ADDR_OWVAR 37
13223: PUSH
13224: LD_VAR 0 18
13228: PUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_VAR 0 18
13236: PPUSH
13237: CALL_OW 12
13241: ARRAY
13242: ST_TO_ADDR
// end ; end ;
13243: GO 13010
13245: POP
13246: POP
// veh = CreateVehicle ;
13247: LD_ADDR_VAR 0 16
13251: PUSH
13252: CALL_OW 45
13256: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13257: LD_VAR 0 16
13261: PPUSH
13262: LD_VAR 0 1
13266: PPUSH
13267: LD_INT 0
13269: PPUSH
13270: CALL_OW 49
// if vehcontrol = 1 then
13274: LD_VAR 0 7
13278: PUSH
13279: LD_INT 1
13281: EQUAL
13282: IFFALSE 13339
// begin hc_gallery =  ;
13284: LD_ADDR_OWVAR 33
13288: PUSH
13289: LD_STRING 
13291: ST_TO_ADDR
// hc_name =  ;
13292: LD_ADDR_OWVAR 26
13296: PUSH
13297: LD_STRING 
13299: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13300: LD_INT 0
13302: PPUSH
13303: LD_INT 3
13305: PPUSH
13306: LD_VAR 0 4
13310: PPUSH
13311: CALL_OW 380
// un = CreateHuman ;
13315: LD_ADDR_VAR 0 15
13319: PUSH
13320: CALL_OW 44
13324: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13325: LD_VAR 0 15
13329: PPUSH
13330: LD_VAR 0 16
13334: PPUSH
13335: CALL_OW 52
// end ; i = i + 1 ;
13339: LD_ADDR_VAR 0 13
13343: PUSH
13344: LD_VAR 0 13
13348: PUSH
13349: LD_INT 1
13351: PLUS
13352: ST_TO_ADDR
// end ; if nation = 3 then
13353: LD_VAR 0 5
13357: PUSH
13358: LD_INT 3
13360: EQUAL
13361: IFFALSE 13753
// begin uc_side = side ;
13363: LD_ADDR_OWVAR 20
13367: PUSH
13368: LD_VAR 0 2
13372: ST_TO_ADDR
// uc_nation = nation ;
13373: LD_ADDR_OWVAR 21
13377: PUSH
13378: LD_VAR 0 5
13382: ST_TO_ADDR
// vc_engine = vehengine ;
13383: LD_ADDR_OWVAR 39
13387: PUSH
13388: LD_VAR 0 6
13392: ST_TO_ADDR
// vc_control = vehcontrol ;
13393: LD_ADDR_OWVAR 38
13397: PUSH
13398: LD_VAR 0 7
13402: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13403: LD_ADDR_OWVAR 40
13407: PUSH
13408: LD_VAR 0 8
13412: PUSH
13413: LD_INT 1
13415: PPUSH
13416: LD_VAR 0 8
13420: PPUSH
13421: CALL_OW 12
13425: ARRAY
13426: ST_TO_ADDR
// for j = 1 to RuWeapons do
13427: LD_ADDR_VAR 0 14
13431: PUSH
13432: DOUBLE
13433: LD_INT 1
13435: DEC
13436: ST_TO_ADDR
13437: LD_VAR 0 8
13441: PUSH
13442: FOR_TO
13443: IFFALSE 13645
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13445: LD_VAR 0 8
13449: PUSH
13450: LD_VAR 0 14
13454: ARRAY
13455: PUSH
13456: LD_INT 42
13458: EQUAL
13459: PUSH
13460: LD_VAR 0 8
13464: PUSH
13465: LD_VAR 0 14
13469: ARRAY
13470: PUSH
13471: LD_INT 43
13473: EQUAL
13474: OR
13475: PUSH
13476: LD_VAR 0 8
13480: PUSH
13481: LD_VAR 0 14
13485: ARRAY
13486: PUSH
13487: LD_INT 44
13489: EQUAL
13490: OR
13491: PUSH
13492: LD_VAR 0 8
13496: PUSH
13497: LD_VAR 0 14
13501: ARRAY
13502: PUSH
13503: LD_INT 45
13505: EQUAL
13506: OR
13507: PUSH
13508: LD_VAR 0 8
13512: PUSH
13513: LD_VAR 0 14
13517: ARRAY
13518: PUSH
13519: LD_INT 49
13521: EQUAL
13522: OR
13523: IFFALSE 13572
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13525: LD_ADDR_VAR 0 17
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_INT 23
13538: PUSH
13539: LD_INT 24
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13548: LD_ADDR_OWVAR 37
13552: PUSH
13553: LD_VAR 0 17
13557: PUSH
13558: LD_INT 1
13560: PPUSH
13561: LD_VAR 0 17
13565: PPUSH
13566: CALL_OW 12
13570: ARRAY
13571: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13572: LD_VAR 0 8
13576: PUSH
13577: LD_VAR 0 14
13581: ARRAY
13582: PUSH
13583: LD_INT 46
13585: EQUAL
13586: PUSH
13587: LD_VAR 0 8
13591: PUSH
13592: LD_VAR 0 14
13596: ARRAY
13597: PUSH
13598: LD_INT 47
13600: EQUAL
13601: OR
13602: IFFALSE 13643
// begin ruChassisTab = [ 23 , 24 ] ;
13604: LD_ADDR_VAR 0 17
13608: PUSH
13609: LD_INT 23
13611: PUSH
13612: LD_INT 24
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_VAR 0 17
13628: PUSH
13629: LD_INT 1
13631: PPUSH
13632: LD_VAR 0 17
13636: PPUSH
13637: CALL_OW 12
13641: ARRAY
13642: ST_TO_ADDR
// end ; end ;
13643: GO 13442
13645: POP
13646: POP
// veh = CreateVehicle ;
13647: LD_ADDR_VAR 0 16
13651: PUSH
13652: CALL_OW 45
13656: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13657: LD_VAR 0 16
13661: PPUSH
13662: LD_VAR 0 1
13666: PPUSH
13667: LD_INT 0
13669: PPUSH
13670: CALL_OW 49
// if vehcontrol = 1 then
13674: LD_VAR 0 7
13678: PUSH
13679: LD_INT 1
13681: EQUAL
13682: IFFALSE 13739
// begin hc_gallery =  ;
13684: LD_ADDR_OWVAR 33
13688: PUSH
13689: LD_STRING 
13691: ST_TO_ADDR
// hc_name =  ;
13692: LD_ADDR_OWVAR 26
13696: PUSH
13697: LD_STRING 
13699: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13700: LD_INT 0
13702: PPUSH
13703: LD_INT 3
13705: PPUSH
13706: LD_VAR 0 4
13710: PPUSH
13711: CALL_OW 380
// un = CreateHuman ;
13715: LD_ADDR_VAR 0 15
13719: PUSH
13720: CALL_OW 44
13724: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13725: LD_VAR 0 15
13729: PPUSH
13730: LD_VAR 0 16
13734: PPUSH
13735: CALL_OW 52
// end ; i = i + 1 ;
13739: LD_ADDR_VAR 0 13
13743: PUSH
13744: LD_VAR 0 13
13748: PUSH
13749: LD_INT 1
13751: PLUS
13752: ST_TO_ADDR
// end ; until i = vehCount ;
13753: LD_VAR 0 13
13757: PUSH
13758: LD_VAR 0 3
13762: EQUAL
13763: IFFALSE 12415
// repeat wait ( 0 0$1 ) ;
13765: LD_INT 35
13767: PPUSH
13768: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13772: LD_ADDR_VAR 0 20
13776: PUSH
13777: LD_INT 22
13779: PUSH
13780: LD_VAR 0 2
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 21
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 24
13801: PUSH
13802: LD_INT 661
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: ST_TO_ADDR
// if vehicleOK_list > 0 then
13819: LD_VAR 0 20
13823: PUSH
13824: LD_INT 0
13826: GREATER
13827: IFFALSE 14018
// begin for i in vehicleOK_list do
13829: LD_ADDR_VAR 0 13
13833: PUSH
13834: LD_VAR 0 20
13838: PUSH
13839: FOR_IN
13840: IFFALSE 14016
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13842: LD_ADDR_VAR 0 21
13846: PUSH
13847: LD_INT 22
13849: PUSH
13850: LD_VAR 0 11
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PPUSH
13859: CALL_OW 69
13863: PPUSH
13864: LD_VAR 0 13
13868: PPUSH
13869: CALL_OW 74
13873: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13874: LD_ADDR_VAR 0 22
13878: PUSH
13879: LD_INT 22
13881: PUSH
13882: LD_VAR 0 11
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: LD_INT 59
13896: PUSH
13897: EMPTY
13898: LIST
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 1
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 21
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: PPUSH
13933: CALL_OW 69
13937: PPUSH
13938: LD_VAR 0 13
13942: PPUSH
13943: CALL_OW 74
13947: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13948: LD_VAR 0 13
13952: PPUSH
13953: LD_VAR 0 21
13957: PPUSH
13958: CALL_OW 296
13962: PUSH
13963: LD_INT 6
13965: PLUS
13966: PUSH
13967: LD_VAR 0 13
13971: PPUSH
13972: LD_VAR 0 22
13976: PPUSH
13977: CALL_OW 296
13981: LESS
13982: IFFALSE 14000
// begin ComAttackUnit ( i , target1 ) ;
13984: LD_VAR 0 13
13988: PPUSH
13989: LD_VAR 0 21
13993: PPUSH
13994: CALL_OW 115
// end else
13998: GO 14014
// begin ComAttackUnit ( i , target2 ) ;
14000: LD_VAR 0 13
14004: PPUSH
14005: LD_VAR 0 22
14009: PPUSH
14010: CALL_OW 115
// end ; end ;
14014: GO 13839
14016: POP
14017: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
14018: LD_INT 22
14020: PUSH
14021: LD_VAR 0 2
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 21
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 250
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 69
14059: PUSH
14060: LD_INT 0
14062: EQUAL
14063: IFFALSE 13765
// end ;
14065: LD_VAR 0 12
14069: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14070: LD_INT 0
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
14076: PPUSH
14077: PPUSH
14078: PPUSH
14079: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14080: LD_ADDR_VAR 0 7
14084: PUSH
14085: LD_INT 22
14087: PUSH
14088: LD_VAR 0 1
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: LD_INT 3
14102: PUSH
14103: LD_INT 24
14105: PUSH
14106: LD_INT 550
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 24
14119: PUSH
14120: LD_INT 250
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PPUSH
14136: CALL_OW 69
14140: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14141: LD_ADDR_VAR 0 8
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_VAR 0 1
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 2
14160: PUSH
14161: LD_INT 25
14163: PUSH
14164: LD_INT 1
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 25
14173: PUSH
14174: LD_INT 5
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 25
14183: PUSH
14184: LD_INT 8
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: LD_INT 25
14193: PUSH
14194: LD_INT 9
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 24
14210: PUSH
14211: LD_INT 1000
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14228: LD_ADDR_VAR 0 9
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_VAR 0 1
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 25
14247: PUSH
14248: LD_INT 4
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PPUSH
14259: CALL_OW 69
14263: ST_TO_ADDR
// if medicCount > 0 then
14264: LD_VAR 0 9
14268: PUSH
14269: LD_INT 0
14271: GREATER
14272: IFFALSE 14346
// begin if damageUnit_list > 0 then
14274: LD_VAR 0 7
14278: PUSH
14279: LD_INT 0
14281: GREATER
14282: IFFALSE 14346
// begin for i in damageUnit_list do
14284: LD_ADDR_VAR 0 5
14288: PUSH
14289: LD_VAR 0 7
14293: PUSH
14294: FOR_IN
14295: IFFALSE 14344
// begin ComMoveToArea ( i , healArea ) ;
14297: LD_VAR 0 5
14301: PPUSH
14302: LD_VAR 0 2
14306: PPUSH
14307: CALL_OW 113
// for j in medicCount do
14311: LD_ADDR_VAR 0 6
14315: PUSH
14316: LD_VAR 0 9
14320: PUSH
14321: FOR_IN
14322: IFFALSE 14340
// AddComHeal ( j , i ) ;
14324: LD_VAR 0 6
14328: PPUSH
14329: LD_VAR 0 5
14333: PPUSH
14334: CALL_OW 188
14338: GO 14321
14340: POP
14341: POP
// end ;
14342: GO 14294
14344: POP
14345: POP
// end ; end ; if soldiersOK_list > 0 then
14346: LD_VAR 0 8
14350: PUSH
14351: LD_INT 0
14353: GREATER
14354: IFFALSE 14545
// begin for i in soldiersOK_list do
14356: LD_ADDR_VAR 0 5
14360: PUSH
14361: LD_VAR 0 8
14365: PUSH
14366: FOR_IN
14367: IFFALSE 14543
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14369: LD_ADDR_VAR 0 10
14373: PUSH
14374: LD_INT 22
14376: PUSH
14377: LD_VAR 0 3
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: PPUSH
14391: LD_VAR 0 5
14395: PPUSH
14396: CALL_OW 74
14400: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14401: LD_ADDR_VAR 0 11
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_VAR 0 3
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 2
14420: PUSH
14421: LD_INT 59
14423: PUSH
14424: EMPTY
14425: LIST
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 1
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 21
14439: PUSH
14440: LD_INT 2
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: PPUSH
14465: LD_VAR 0 5
14469: PPUSH
14470: CALL_OW 74
14474: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14475: LD_VAR 0 5
14479: PPUSH
14480: LD_VAR 0 10
14484: PPUSH
14485: CALL_OW 296
14489: PUSH
14490: LD_INT 8
14492: PLUS
14493: PUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: LD_VAR 0 11
14503: PPUSH
14504: CALL_OW 296
14508: LESS
14509: IFFALSE 14527
// begin ComAttackUnit ( i , target1 ) ;
14511: LD_VAR 0 5
14515: PPUSH
14516: LD_VAR 0 10
14520: PPUSH
14521: CALL_OW 115
// end else
14525: GO 14541
// begin ComAttackUnit ( i , target2 ) ;
14527: LD_VAR 0 5
14531: PPUSH
14532: LD_VAR 0 11
14536: PPUSH
14537: CALL_OW 115
// end ; end ;
14541: GO 14366
14543: POP
14544: POP
// end ; end ; end_of_file
14545: LD_VAR 0 4
14549: RET
// every 1 do var i ;
14550: GO 14552
14552: DISABLE
14553: LD_INT 0
14555: PPUSH
// begin InGameOn ;
14556: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14560: LD_INT 53
14562: PPUSH
14563: LD_INT 40
14565: PPUSH
14566: CALL_OW 84
// wait ( 0 0$5 ) ;
14570: LD_INT 175
14572: PPUSH
14573: CALL_OW 67
// if gammaCommander = 1 then
14577: LD_EXP 11
14581: PUSH
14582: LD_INT 1
14584: EQUAL
14585: IFFALSE 14596
// CenterNowOnUnits ( Donaldson ) ;
14587: LD_EXP 3
14591: PPUSH
14592: CALL_OW 87
// if gammaCommander = 2 then
14596: LD_EXP 11
14600: PUSH
14601: LD_INT 2
14603: EQUAL
14604: IFFALSE 14615
// CenterNowOnUnits ( Brown ) ;
14606: LD_EXP 2
14610: PPUSH
14611: CALL_OW 87
// if gammaCommander = 3 then
14615: LD_EXP 11
14619: PUSH
14620: LD_INT 3
14622: EQUAL
14623: IFFALSE 14634
// CenterNowOnUnits ( Houten ) ;
14625: LD_EXP 12
14629: PPUSH
14630: CALL_OW 87
// if gammaCommander = 1 then
14634: LD_EXP 11
14638: PUSH
14639: LD_INT 1
14641: EQUAL
14642: IFFALSE 14656
// Say ( Donaldson , D1-Don-1 ) ;
14644: LD_EXP 3
14648: PPUSH
14649: LD_STRING D1-Don-1
14651: PPUSH
14652: CALL_OW 88
// if gammaCommander = 2 then
14656: LD_EXP 11
14660: PUSH
14661: LD_INT 2
14663: EQUAL
14664: IFFALSE 14678
// Say ( Brown , D1-Brown-1 ) ;
14666: LD_EXP 2
14670: PPUSH
14671: LD_STRING D1-Brown-1
14673: PPUSH
14674: CALL_OW 88
// if gammaCommander = 3 then
14678: LD_EXP 11
14682: PUSH
14683: LD_INT 3
14685: EQUAL
14686: IFFALSE 14700
// Say ( Houten , D1-VanH-1 ) ;
14688: LD_EXP 12
14692: PPUSH
14693: LD_STRING D1-VanH-1
14695: PPUSH
14696: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
14700: LD_EXP 21
14704: PPUSH
14705: LD_STRING D1-Har-1
14707: PPUSH
14708: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
14712: LD_INT 53
14714: PPUSH
14715: LD_INT 40
14717: PPUSH
14718: CALL_OW 84
// if gammaCommander = 1 then
14722: LD_EXP 11
14726: PUSH
14727: LD_INT 1
14729: EQUAL
14730: IFFALSE 14744
// Say ( Donaldson , D1-Don-2 ) ;
14732: LD_EXP 3
14736: PPUSH
14737: LD_STRING D1-Don-2
14739: PPUSH
14740: CALL_OW 88
// if gammaCommander = 2 then
14744: LD_EXP 11
14748: PUSH
14749: LD_INT 2
14751: EQUAL
14752: IFFALSE 14766
// Say ( Brown , D1-Brown-2 ) ;
14754: LD_EXP 2
14758: PPUSH
14759: LD_STRING D1-Brown-2
14761: PPUSH
14762: CALL_OW 88
// if gammaCommander = 3 then
14766: LD_EXP 11
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: IFFALSE 14788
// Say ( Houten , D1-VanH-2 ) ;
14776: LD_EXP 12
14780: PPUSH
14781: LD_STRING D1-VanH-2
14783: PPUSH
14784: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
14788: LD_EXP 21
14792: PPUSH
14793: LD_STRING D1-Har-2
14795: PPUSH
14796: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
14800: LD_INT 22
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 33
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 61
14822: PUSH
14823: EMPTY
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: IFFALSE 14900
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
14837: LD_ADDR_VAR 0 1
14841: PUSH
14842: LD_INT 22
14844: PUSH
14845: LD_INT 1
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 33
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 61
14864: PUSH
14865: EMPTY
14866: LIST
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: PPUSH
14873: CALL_OW 69
14877: PUSH
14878: FOR_IN
14879: IFFALSE 14898
// ComAgressiveMove ( i , 70 , 41 ) ;
14881: LD_VAR 0 1
14885: PPUSH
14886: LD_INT 70
14888: PPUSH
14889: LD_INT 41
14891: PPUSH
14892: CALL_OW 114
14896: GO 14878
14898: POP
14899: POP
// repeat wait ( 0 0$1 ) ;
14900: LD_INT 35
14902: PPUSH
14903: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14907: LD_ADDR_VAR 0 1
14911: PUSH
14912: LD_INT 22
14914: PUSH
14915: LD_INT 6
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14950
// ComAgressiveMove ( i , 54 , 20 ) ;
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_INT 54
14940: PPUSH
14941: LD_INT 20
14943: PPUSH
14944: CALL_OW 114
14948: GO 14930
14950: POP
14951: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 25
14969: PUSH
14970: LD_INT 1
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: LD_INT 54
14982: PUSH
14983: EMPTY
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: PPUSH
14995: CALL_OW 69
14999: PUSH
15000: FOR_IN
15001: IFFALSE 15035
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
15003: LD_VAR 0 1
15007: PPUSH
15008: LD_INT 70
15010: PPUSH
15011: LD_INT 41
15013: PPUSH
15014: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
15018: LD_VAR 0 1
15022: PPUSH
15023: LD_INT 46
15025: PPUSH
15026: LD_INT 39
15028: PPUSH
15029: CALL_OW 174
// end ;
15033: GO 15000
15035: POP
15036: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
15037: LD_ADDR_VAR 0 1
15041: PUSH
15042: LD_INT 22
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 21
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 500
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: PPUSH
15084: CALL_OW 69
15088: PUSH
15089: FOR_IN
15090: IFFALSE 15123
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_EXP 36
15101: PPUSH
15102: CALL_OW 250
15106: PPUSH
15107: LD_EXP 36
15111: PPUSH
15112: CALL_OW 251
15116: PPUSH
15117: CALL_OW 111
15121: GO 15089
15123: POP
15124: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 4 ;
15125: LD_INT 22
15127: PUSH
15128: LD_INT 6
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 21
15137: PUSH
15138: LD_INT 1
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 24
15147: PUSH
15148: LD_INT 250
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: PPUSH
15160: CALL_OW 69
15164: PUSH
15165: LD_INT 4
15167: LESS
15168: IFFALSE 14900
// InGameOff ;
15170: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
15174: LD_STRING M1
15176: PPUSH
15177: CALL_OW 337
// SaveForQuickRestart ;
15181: CALL_OW 22
// startCutscene = 0 ;
15185: LD_ADDR_EXP 37
15189: PUSH
15190: LD_INT 0
15192: ST_TO_ADDR
// end ;
15193: PPOPN 1
15195: END
// every 1 1$0 do
15196: GO 15198
15198: DISABLE
// begin PrepareSupportFromDelta ;
15199: CALL 2199 0 0
// firstAttack = 1 ;
15203: LD_ADDR_EXP 32
15207: PUSH
15208: LD_INT 1
15210: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15211: LD_EXP 8
15215: PPUSH
15216: CALL_OW 302
15220: IFFALSE 15236
// begin Say ( Gladstone , D2-Glad-1 ) ;
15222: LD_EXP 8
15226: PPUSH
15227: LD_STRING D2-Glad-1
15229: PPUSH
15230: CALL_OW 88
// end else
15234: GO 15338
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15236: LD_INT 4
15238: PPUSH
15239: LD_INT 22
15241: PUSH
15242: LD_INT 1
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 21
15251: PUSH
15252: LD_INT 1
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 1
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 25
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 25
15284: PUSH
15285: LD_INT 3
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 25
15294: PUSH
15295: LD_INT 4
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 70
15318: PUSH
15319: LD_EXP 14
15323: PUSH
15324: EMPTY
15325: LIST
15326: DIFF
15327: PPUSH
15328: LD_STRING D2-Sol1-1
15330: PPUSH
15331: LD_STRING D2-FSol1-1
15333: PPUSH
15334: CALL 5655 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15338: LD_EXP 3
15342: PPUSH
15343: CALL_OW 302
15347: PUSH
15348: LD_EXP 11
15352: PUSH
15353: LD_INT 1
15355: EQUAL
15356: AND
15357: IFFALSE 15371
// Say ( Donaldson , D2-Don-1 ) ;
15359: LD_EXP 3
15363: PPUSH
15364: LD_STRING D2-Don-1
15366: PPUSH
15367: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15371: LD_EXP 2
15375: PPUSH
15376: CALL_OW 302
15380: PUSH
15381: LD_EXP 11
15385: PUSH
15386: LD_INT 2
15388: EQUAL
15389: AND
15390: IFFALSE 15404
// Say ( Brown , D2-Brown-1 ) ;
15392: LD_EXP 2
15396: PPUSH
15397: LD_STRING D2-Brown-1
15399: PPUSH
15400: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15404: LD_EXP 12
15408: PPUSH
15409: CALL_OW 302
15413: PUSH
15414: LD_EXP 11
15418: PUSH
15419: LD_INT 3
15421: EQUAL
15422: AND
15423: IFFALSE 15437
// Say ( Houten , D2-VanH-1 ) ;
15425: LD_EXP 12
15429: PPUSH
15430: LD_STRING D2-VanH-1
15432: PPUSH
15433: CALL_OW 88
// end ;
15437: END
// every 0 0$1 do
15438: GO 15440
15440: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
15441: LD_STRING 07_time
15443: PPUSH
15444: LD_INT 0
15446: PPUSH
15447: CALL_OW 30
15451: PUSH
15452: LD_INT 3
15454: DIV
15455: PPUSH
15456: CALL_OW 67
// PrepareMacmillanSquad ;
15460: CALL 2814 0 0
// CenterNowOnUnits ( JMM ) ;
15464: LD_EXP 1
15468: PPUSH
15469: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
15473: LD_EXP 1
15477: PPUSH
15478: LD_STRING D3-JMM-1
15480: PPUSH
15481: CALL_OW 88
// JMMArrive = 1 ;
15485: LD_ADDR_EXP 38
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15493: LD_EXP 3
15497: PPUSH
15498: CALL_OW 302
15502: PUSH
15503: LD_EXP 11
15507: PUSH
15508: LD_INT 1
15510: EQUAL
15511: AND
15512: IFFALSE 15528
// begin Say ( Donaldson , D3-Don-1 ) ;
15514: LD_EXP 3
15518: PPUSH
15519: LD_STRING D3-Don-1
15521: PPUSH
15522: CALL_OW 88
// end else
15526: GO 15580
// begin if gammaCommander = 1 then
15528: LD_EXP 11
15532: PUSH
15533: LD_INT 1
15535: EQUAL
15536: IFFALSE 15580
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
15538: LD_EXP 10
15542: PPUSH
15543: LD_INT 26
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 72
15557: PPUSH
15558: LD_STRING D3-Sol1-1
15560: PPUSH
15561: LD_STRING D3-Sol1-1
15563: PPUSH
15564: CALL 5655 0 3
// Say ( JMM , D3-JMM-2 ) ;
15568: LD_EXP 1
15572: PPUSH
15573: LD_STRING D3-JMM-2
15575: PPUSH
15576: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15580: LD_EXP 2
15584: PPUSH
15585: CALL_OW 302
15589: PUSH
15590: LD_EXP 11
15594: PUSH
15595: LD_INT 2
15597: EQUAL
15598: AND
15599: IFFALSE 15615
// begin Say ( Brown , D3-Brown-1 ) ;
15601: LD_EXP 2
15605: PPUSH
15606: LD_STRING D3-Brown-1
15608: PPUSH
15609: CALL_OW 88
// end else
15613: GO 15667
// begin if gammaCommander = 2 then
15615: LD_EXP 11
15619: PUSH
15620: LD_INT 2
15622: EQUAL
15623: IFFALSE 15667
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
15625: LD_EXP 10
15629: PPUSH
15630: LD_INT 26
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PPUSH
15640: CALL_OW 72
15644: PPUSH
15645: LD_STRING D3-Sol1-1a
15647: PPUSH
15648: LD_STRING D3-Sol1-1a
15650: PPUSH
15651: CALL 5655 0 3
// Say ( JMM , D3-JMM-2 ) ;
15655: LD_EXP 1
15659: PPUSH
15660: LD_STRING D3-JMM-2
15662: PPUSH
15663: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15667: LD_EXP 12
15671: PPUSH
15672: CALL_OW 302
15676: PUSH
15677: LD_EXP 11
15681: PUSH
15682: LD_INT 3
15684: EQUAL
15685: AND
15686: IFFALSE 15702
// begin Say ( Houten , D3-VanH-1 ) ;
15688: LD_EXP 12
15692: PPUSH
15693: LD_STRING D3-VanH-1
15695: PPUSH
15696: CALL_OW 88
// end else
15700: GO 15754
// begin if gammaCommander = 3 then
15702: LD_EXP 11
15706: PUSH
15707: LD_INT 3
15709: EQUAL
15710: IFFALSE 15754
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
15712: LD_EXP 10
15716: PPUSH
15717: LD_INT 26
15719: PUSH
15720: LD_INT 1
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PPUSH
15727: CALL_OW 72
15731: PPUSH
15732: LD_STRING D3-Sol1-1b
15734: PPUSH
15735: LD_STRING D3-Sol1-1b
15737: PPUSH
15738: CALL 5655 0 3
// Say ( JMM , D3-JMM-2 ) ;
15742: LD_EXP 1
15746: PPUSH
15747: LD_STRING D3-JMM-2
15749: PPUSH
15750: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15754: LD_EXP 14
15758: PPUSH
15759: CALL_OW 302
15763: IFFALSE 15791
// begin Say ( Joan , D3a-Joan-1 ) ;
15765: LD_EXP 14
15769: PPUSH
15770: LD_STRING D3a-Joan-1
15772: PPUSH
15773: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15777: LD_EXP 1
15781: PPUSH
15782: LD_STRING D3a-JMM-1
15784: PPUSH
15785: CALL_OW 88
// end else
15789: GO 16244
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15791: LD_EXP 3
15795: PPUSH
15796: CALL_OW 302
15800: PUSH
15801: LD_EXP 11
15805: PUSH
15806: LD_INT 1
15808: EQUAL
15809: AND
15810: PUSH
15811: LD_STRING 06_JoanStatus_1
15813: PPUSH
15814: LD_INT 0
15816: PPUSH
15817: CALL_OW 30
15821: PUSH
15822: LD_INT 1
15824: EQUAL
15825: AND
15826: IFFALSE 15877
// begin Say ( Donaldson , D3b-Don-1 ) ;
15828: LD_EXP 3
15832: PPUSH
15833: LD_STRING D3b-Don-1
15835: PPUSH
15836: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15840: LD_EXP 1
15844: PPUSH
15845: LD_STRING D3b-JMM-2
15847: PPUSH
15848: CALL_OW 88
// if IsOK ( Lisa ) then
15852: LD_EXP 6
15856: PPUSH
15857: CALL_OW 302
15861: IFFALSE 15875
// Say ( Lisa , D3b-Lisa-2 ) ;
15863: LD_EXP 6
15867: PPUSH
15868: LD_STRING D3b-Lisa-2
15870: PPUSH
15871: CALL_OW 88
// end else
15875: GO 15942
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15877: LD_EXP 10
15881: PPUSH
15882: LD_INT 26
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 72
15896: PPUSH
15897: LD_STRING D3b-Sol1-1
15899: PPUSH
15900: LD_STRING D3b-Sol1-1
15902: PPUSH
15903: CALL 5655 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15907: LD_EXP 1
15911: PPUSH
15912: LD_STRING D3b-JMM-2
15914: PPUSH
15915: CALL_OW 88
// if IsOK ( Lisa ) then
15919: LD_EXP 6
15923: PPUSH
15924: CALL_OW 302
15928: IFFALSE 15942
// Say ( Lisa , D3b-Lisa-2 ) ;
15930: LD_EXP 6
15934: PPUSH
15935: LD_STRING D3b-Lisa-2
15937: PPUSH
15938: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15942: LD_EXP 2
15946: PPUSH
15947: CALL_OW 302
15951: PUSH
15952: LD_EXP 11
15956: PUSH
15957: LD_INT 2
15959: EQUAL
15960: AND
15961: PUSH
15962: LD_STRING 06_JoanStatus_1
15964: PPUSH
15965: LD_INT 0
15967: PPUSH
15968: CALL_OW 30
15972: PUSH
15973: LD_INT 1
15975: EQUAL
15976: AND
15977: IFFALSE 16028
// begin Say ( Brown , D3b-Brown-1 ) ;
15979: LD_EXP 2
15983: PPUSH
15984: LD_STRING D3b-Brown-1
15986: PPUSH
15987: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15991: LD_EXP 1
15995: PPUSH
15996: LD_STRING D3b-JMM-2
15998: PPUSH
15999: CALL_OW 88
// if IsOK ( Lisa ) then
16003: LD_EXP 6
16007: PPUSH
16008: CALL_OW 302
16012: IFFALSE 16026
// Say ( Lisa , D3b-Lisa-2 ) ;
16014: LD_EXP 6
16018: PPUSH
16019: LD_STRING D3b-Lisa-2
16021: PPUSH
16022: CALL_OW 88
// end else
16026: GO 16093
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16028: LD_EXP 10
16032: PPUSH
16033: LD_INT 26
16035: PUSH
16036: LD_INT 1
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PPUSH
16043: CALL_OW 72
16047: PPUSH
16048: LD_STRING D3b-Sol1-1
16050: PPUSH
16051: LD_STRING D3b-Sol1-1
16053: PPUSH
16054: CALL 5655 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16058: LD_EXP 1
16062: PPUSH
16063: LD_STRING D3b-JMM-2
16065: PPUSH
16066: CALL_OW 88
// if IsOK ( Lisa ) then
16070: LD_EXP 6
16074: PPUSH
16075: CALL_OW 302
16079: IFFALSE 16093
// Say ( Lisa , D3b-Lisa-2 ) ;
16081: LD_EXP 6
16085: PPUSH
16086: LD_STRING D3b-Lisa-2
16088: PPUSH
16089: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16093: LD_EXP 12
16097: PPUSH
16098: CALL_OW 302
16102: PUSH
16103: LD_EXP 11
16107: PUSH
16108: LD_INT 3
16110: EQUAL
16111: AND
16112: PUSH
16113: LD_STRING 06_JoanStatus_1
16115: PPUSH
16116: LD_INT 0
16118: PPUSH
16119: CALL_OW 30
16123: PUSH
16124: LD_INT 1
16126: EQUAL
16127: AND
16128: IFFALSE 16179
// begin Say ( Houten , D3b-VanH-1 ) ;
16130: LD_EXP 12
16134: PPUSH
16135: LD_STRING D3b-VanH-1
16137: PPUSH
16138: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16142: LD_EXP 1
16146: PPUSH
16147: LD_STRING D3b-JMM-2
16149: PPUSH
16150: CALL_OW 88
// if IsOK ( Lisa ) then
16154: LD_EXP 6
16158: PPUSH
16159: CALL_OW 302
16163: IFFALSE 16177
// Say ( Lisa , D3b-Lisa-2 ) ;
16165: LD_EXP 6
16169: PPUSH
16170: LD_STRING D3b-Lisa-2
16172: PPUSH
16173: CALL_OW 88
// end else
16177: GO 16244
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16179: LD_EXP 10
16183: PPUSH
16184: LD_INT 26
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PPUSH
16194: CALL_OW 72
16198: PPUSH
16199: LD_STRING D3b-Sol1-1
16201: PPUSH
16202: LD_STRING D3b-Sol1-1
16204: PPUSH
16205: CALL 5655 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16209: LD_EXP 1
16213: PPUSH
16214: LD_STRING D3b-JMM-2
16216: PPUSH
16217: CALL_OW 88
// if IsOK ( Lisa ) then
16221: LD_EXP 6
16225: PPUSH
16226: CALL_OW 302
16230: IFFALSE 16244
// Say ( Lisa , D3b-Lisa-2 ) ;
16232: LD_EXP 6
16236: PPUSH
16237: LD_STRING D3b-Lisa-2
16239: PPUSH
16240: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16244: LD_INT 22
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 21
16256: PUSH
16257: LD_INT 1
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 26
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 25
16279: PUSH
16280: LD_INT 1
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 25
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 25
16299: PUSH
16300: LD_INT 3
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 25
16309: PUSH
16310: LD_INT 4
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: PPUSH
16330: CALL_OW 69
16334: PUSH
16335: LD_EXP 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: DIFF
16343: PPUSH
16344: LD_STRING DCa-Sol1-1
16346: PPUSH
16347: LD_STRING DCa-Sol1-1
16349: PPUSH
16350: CALL 5655 0 3
// Say ( JMM , DCb-JMM-1 ) ;
16354: LD_EXP 1
16358: PPUSH
16359: LD_STRING DCb-JMM-1
16361: PPUSH
16362: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16366: LD_INT 22
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 21
16378: PUSH
16379: LD_INT 1
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 26
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 2
16398: PUSH
16399: LD_INT 25
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 25
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 25
16421: PUSH
16422: LD_INT 3
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 25
16431: PUSH
16432: LD_INT 4
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 69
16456: PUSH
16457: LD_EXP 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: DIFF
16465: PPUSH
16466: LD_STRING DCb-Sol1-1
16468: PPUSH
16469: LD_STRING DCb-Sol1-1
16471: PPUSH
16472: CALL 5655 0 3
// Say ( JMM , DCb-JMM-2 ) ;
16476: LD_EXP 1
16480: PPUSH
16481: LD_STRING DCb-JMM-2
16483: PPUSH
16484: CALL_OW 88
// secondAttack = 1 ;
16488: LD_ADDR_EXP 33
16492: PUSH
16493: LD_INT 1
16495: ST_TO_ADDR
// end ;
16496: END
// every 0 0$01 trigger JMMArrive = 1 do
16497: LD_EXP 38
16501: PUSH
16502: LD_INT 1
16504: EQUAL
16505: IFFALSE 16585
16507: GO 16509
16509: DISABLE
// begin wait ( 3 3$0 ) ;
16510: LD_INT 6300
16512: PPUSH
16513: CALL_OW 67
// DialogueOn ;
16517: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16521: LD_EXP 22
16525: PPUSH
16526: LD_STRING D4-Pow-1
16528: PPUSH
16529: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16533: LD_EXP 1
16537: PPUSH
16538: LD_STRING D4-JMM-1
16540: PPUSH
16541: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16545: LD_EXP 22
16549: PPUSH
16550: LD_STRING D4-Pow-2
16552: PPUSH
16553: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16557: LD_EXP 1
16561: PPUSH
16562: LD_STRING D4-JMM-2
16564: PPUSH
16565: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16569: LD_EXP 22
16573: PPUSH
16574: LD_STRING D4-Pow-3
16576: PPUSH
16577: CALL_OW 94
// DialogueOff ;
16581: CALL_OW 7
// end ;
16585: END
// every 0 0$01 trigger JMMArrive = 1 do
16586: LD_EXP 38
16590: PUSH
16591: LD_INT 1
16593: EQUAL
16594: IFFALSE 16626
16596: GO 16598
16598: DISABLE
// begin wait ( 8 8$0 ) ;
16599: LD_INT 16800
16601: PPUSH
16602: CALL_OW 67
// DialogueOn ;
16606: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16610: LD_EXP 22
16614: PPUSH
16615: LD_STRING D4a-Pow-1
16617: PPUSH
16618: CALL_OW 94
// DialogueOff ;
16622: CALL_OW 7
// end ;
16626: END
// every 0 0$01 trigger JMMArrive = 1 do
16627: LD_EXP 38
16631: PUSH
16632: LD_INT 1
16634: EQUAL
16635: IFFALSE 16680
16637: GO 16639
16639: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
16640: LD_INT 21000
16642: PUSH
16643: LD_INT 25200
16645: PUSH
16646: LD_INT 31500
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: LIST
16653: PUSH
16654: LD_OWVAR 67
16658: ARRAY
16659: PPUSH
16660: CALL_OW 67
// PrepareSikorsky ;
16664: CALL 4239 0 0
// SikorskyArrive = 1 ;
16668: LD_ADDR_EXP 17
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// PrepareSikorskyArmy ;
16676: CALL 4379 0 0
// end ;
16680: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
16681: LD_EXP 16
16685: PPUSH
16686: LD_INT 5
16688: PPUSH
16689: CALL_OW 308
16693: IFFALSE 16885
16695: GO 16697
16697: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
16698: LD_EXP 16
16702: PPUSH
16703: CALL_OW 87
// DialogueOn ;
16707: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16711: LD_EXP 15
16715: PPUSH
16716: LD_STRING D5-Sik-1
16718: PPUSH
16719: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16723: LD_EXP 1
16727: PPUSH
16728: LD_STRING D5-JMM-1a
16730: PPUSH
16731: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16735: LD_EXP 15
16739: PPUSH
16740: LD_STRING D5-Sik-2
16742: PPUSH
16743: CALL_OW 88
// case query ( QSikorski ) of 1 :
16747: LD_STRING QSikorski
16749: PPUSH
16750: CALL_OW 97
16754: PUSH
16755: LD_INT 1
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16786
16763: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16764: LD_EXP 15
16768: PPUSH
16769: LD_STRING D5a-Sik-1
16771: PPUSH
16772: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
16776: LD_ADDR_EXP 18
16780: PUSH
16781: LD_INT 2100
16783: ST_TO_ADDR
// end ; 2 :
16784: GO 16873
16786: LD_INT 2
16788: DOUBLE
16789: EQUAL
16790: IFTRUE 16794
16792: GO 16817
16794: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16795: LD_EXP 15
16799: PPUSH
16800: LD_STRING D5b-Sik-1
16802: PPUSH
16803: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16807: LD_ADDR_EXP 18
16811: PUSH
16812: LD_INT 10500
16814: ST_TO_ADDR
// end ; 3 :
16815: GO 16873
16817: LD_INT 3
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16872
16825: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16826: LD_EXP 15
16830: PPUSH
16831: LD_STRING D5c-Sik-1
16833: PPUSH
16834: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16838: LD_EXP 1
16842: PPUSH
16843: LD_STRING D5c-JMM-1
16845: PPUSH
16846: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16850: LD_EXP 15
16854: PPUSH
16855: LD_STRING D5c-Sik-2
16857: PPUSH
16858: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16862: LD_ADDR_EXP 18
16866: PUSH
16867: LD_INT 10500
16869: ST_TO_ADDR
// end ; end ;
16870: GO 16873
16872: POP
// DialogueOff ;
16873: CALL_OW 7
// timerStatus = 1 ;
16877: LD_ADDR_EXP 34
16881: PUSH
16882: LD_INT 1
16884: ST_TO_ADDR
// end ;
16885: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16886: LD_EXP 18
16890: PUSH
16891: LD_INT 35
16893: LESS
16894: IFFALSE 16942
16896: GO 16898
16898: DISABLE
// begin timerStatus = 0 ;
16899: LD_ADDR_EXP 34
16903: PUSH
16904: LD_INT 0
16906: ST_TO_ADDR
// DialogueOn ;
16907: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16911: LD_EXP 15
16915: PPUSH
16916: LD_STRING D6-Sik-1
16918: PPUSH
16919: CALL_OW 88
// DialogueOff ;
16923: CALL_OW 7
// SikorskyAI = 1 ;
16927: LD_ADDR_EXP 19
16931: PUSH
16932: LD_INT 1
16934: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16935: LD_STRING M2
16937: PPUSH
16938: CALL_OW 337
// end ;
16942: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16943: LD_EXP 16
16947: PPUSH
16948: LD_INT 18
16950: PPUSH
16951: CALL_OW 308
16955: IFFALSE 17039
16957: GO 16959
16959: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16960: LD_EXP 15
16964: PPUSH
16965: LD_STRING D7-Sik-1
16967: PPUSH
16968: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16972: LD_EXP 1
16976: PPUSH
16977: LD_INT 24
16979: PPUSH
16980: CALL_OW 308
16984: PUSH
16985: LD_EXP 1
16989: PPUSH
16990: CALL_OW 310
16994: OR
16995: IFFALSE 17019
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16997: LD_EXP 15
17001: PPUSH
17002: LD_STRING D7a-Sik-1
17004: PPUSH
17005: CALL_OW 88
// SikorskyStatus = 1 ;
17009: LD_ADDR_EXP 20
17013: PUSH
17014: LD_INT 1
17016: ST_TO_ADDR
// end else
17017: GO 17039
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17019: LD_EXP 15
17023: PPUSH
17024: LD_STRING D7b-Sik-1
17026: PPUSH
17027: CALL_OW 88
// SikorskyStatus = 2 ;
17031: LD_ADDR_EXP 20
17035: PUSH
17036: LD_INT 2
17038: ST_TO_ADDR
// end ; end ;
17039: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
17040: LD_EXP 35
17044: PUSH
17045: LD_INT 1
17047: EQUAL
17048: IFFALSE 17157
17050: GO 17052
17052: DISABLE
17053: LD_INT 0
17055: PPUSH
// begin enable ;
17056: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
17057: LD_ADDR_VAR 0 1
17061: PUSH
17062: LD_INT 22
17064: PUSH
17065: LD_INT 3
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PPUSH
17072: CALL_OW 69
17076: PUSH
17077: FOR_IN
17078: IFFALSE 17105
// if IsInArea ( i , RussianEscape ) then
17080: LD_VAR 0 1
17084: PPUSH
17085: LD_INT 22
17087: PPUSH
17088: CALL_OW 308
17092: IFFALSE 17103
// RemoveUnit ( i ) ;
17094: LD_VAR 0 1
17098: PPUSH
17099: CALL_OW 64
17103: GO 17077
17105: POP
17106: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_INT 22
17114: PUSH
17115: LD_INT 6
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PPUSH
17122: CALL_OW 69
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17155
// if IsInArea ( i , RussianEscape ) then
17130: LD_VAR 0 1
17134: PPUSH
17135: LD_INT 22
17137: PPUSH
17138: CALL_OW 308
17142: IFFALSE 17153
// RemoveUnit ( i ) ;
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 64
17153: GO 17127
17155: POP
17156: POP
// end ; end_of_file
17157: PPOPN 1
17159: END
// on BuildingComplete ( building ) do var tmp , un ;
17160: LD_INT 0
17162: PPUSH
17163: PPUSH
// begin if GetSide ( building ) = 3 then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 255
17173: PUSH
17174: LD_INT 3
17176: EQUAL
17177: IFFALSE 17664
// begin if GetBType ( building ) = b_depot then
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL_OW 266
17188: PUSH
17189: LD_INT 0
17191: EQUAL
17192: IFFALSE 17260
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 274
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: LD_INT 5000
17209: PPUSH
17210: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17214: LD_VAR 0 1
17218: PPUSH
17219: CALL_OW 274
17223: PPUSH
17224: LD_INT 2
17226: PPUSH
17227: LD_INT 5000
17229: PPUSH
17230: CALL_OW 277
// SetBName ( building , konev ) ;
17234: LD_VAR 0 1
17238: PPUSH
17239: LD_STRING konev
17241: PPUSH
17242: CALL_OW 500
// ruDepot = building ;
17246: LD_ADDR_EXP 27
17250: PUSH
17251: LD_VAR 0 1
17255: ST_TO_ADDR
// BuildRussianBase ;
17256: CALL 6260 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 266
17269: PUSH
17270: LD_INT 0
17272: EQUAL
17273: PUSH
17274: LD_VAR 0 1
17278: PPUSH
17279: CALL_OW 266
17283: PUSH
17284: LD_INT 2
17286: EQUAL
17287: OR
17288: PUSH
17289: LD_VAR 0 1
17293: PPUSH
17294: CALL_OW 266
17298: PUSH
17299: LD_INT 4
17301: EQUAL
17302: OR
17303: IFFALSE 17314
// ComUpgrade ( building ) ;
17305: LD_VAR 0 1
17309: PPUSH
17310: CALL_OW 146
// if GetBType ( building ) = b_lab then
17314: LD_VAR 0 1
17318: PPUSH
17319: CALL_OW 266
17323: PUSH
17324: LD_INT 6
17326: EQUAL
17327: IFFALSE 17378
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17329: LD_VAR 0 1
17333: PPUSH
17334: LD_INT 10
17336: PPUSH
17337: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: LD_INT 12
17348: PPUSH
17349: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
17353: LD_INT 3
17355: PPUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: LD_INT 3
17363: PPUSH
17364: CALL 6815 0 3
// ruLab = building ;
17368: LD_ADDR_EXP 28
17372: PUSH
17373: LD_VAR 0 1
17377: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 266
17387: PUSH
17388: LD_INT 32
17390: EQUAL
17391: IFFALSE 17509
// begin uc_side = 3 ;
17393: LD_ADDR_OWVAR 20
17397: PUSH
17398: LD_INT 3
17400: ST_TO_ADDR
// uc_nation = 3 ;
17401: LD_ADDR_OWVAR 21
17405: PUSH
17406: LD_INT 3
17408: ST_TO_ADDR
// hc_gallery =  ;
17409: LD_ADDR_OWVAR 33
17413: PUSH
17414: LD_STRING 
17416: ST_TO_ADDR
// hc_name =  ;
17417: LD_ADDR_OWVAR 26
17421: PUSH
17422: LD_STRING 
17424: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17425: LD_INT 0
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: LD_EXP 24
17435: PPUSH
17436: LD_EXP 25
17440: PPUSH
17441: CALL_OW 12
17445: PPUSH
17446: CALL_OW 380
// un = CreateHuman ;
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: CALL_OW 44
17459: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_VAR 0 1
17469: PPUSH
17470: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17474: LD_VAR 0 1
17478: PPUSH
17479: LD_INT 43
17481: PUSH
17482: LD_INT 44
17484: PUSH
17485: LD_INT 46
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: PPUSH
17496: LD_INT 3
17498: PPUSH
17499: CALL_OW 12
17503: ARRAY
17504: PPUSH
17505: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
17509: LD_VAR 0 1
17513: PPUSH
17514: CALL_OW 266
17518: PUSH
17519: LD_INT 33
17521: EQUAL
17522: IFFALSE 17559
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_INT 43
17531: PUSH
17532: LD_INT 44
17534: PUSH
17535: LD_INT 46
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_INT 3
17548: PPUSH
17549: CALL_OW 12
17553: ARRAY
17554: PPUSH
17555: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 266
17568: PUSH
17569: LD_INT 24
17571: EQUAL
17572: IFFALSE 17582
// russianAI = 1 ;
17574: LD_ADDR_EXP 26
17578: PUSH
17579: LD_INT 1
17581: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
17582: LD_EXP 30
17586: PUSH
17587: LD_INT 0
17589: GREATER
17590: IFFALSE 17664
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17592: LD_ADDR_EXP 30
17596: PUSH
17597: LD_EXP 30
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 3
17609: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17610: LD_ADDR_EXP 30
17614: PUSH
17615: LD_EXP 30
17619: PPUSH
17620: LD_INT 1
17622: PPUSH
17623: CALL_OW 3
17627: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17628: LD_ADDR_EXP 30
17632: PUSH
17633: LD_EXP 30
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: CALL_OW 3
17645: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17646: LD_ADDR_EXP 30
17650: PUSH
17651: LD_EXP 30
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 3
17663: ST_TO_ADDR
// end ; end ; end ;
17664: PPOPN 3
17666: END
// on UpgradeComplete ( building ) do var i ;
17667: LD_INT 0
17669: PPUSH
// begin if GetSide ( building ) = 3 then
17670: LD_VAR 0 1
17674: PPUSH
17675: CALL_OW 255
17679: PUSH
17680: LD_INT 3
17682: EQUAL
17683: IFFALSE 17864
// begin if GetBType ( building ) = b_factory then
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 266
17694: PUSH
17695: LD_INT 3
17697: EQUAL
17698: IFFALSE 17765
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17700: LD_ADDR_VAR 0 2
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 25
17717: PUSH
17718: LD_INT 3
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PPUSH
17729: CALL_OW 69
17733: PUSH
17734: FOR_IN
17735: IFFALSE 17753
// ComEnterUnit ( i , building ) ;
17737: LD_VAR 0 2
17741: PPUSH
17742: LD_VAR 0 1
17746: PPUSH
17747: CALL_OW 120
17751: GO 17734
17753: POP
17754: POP
// ruFab = building ;
17755: LD_ADDR_EXP 29
17759: PUSH
17760: LD_VAR 0 1
17764: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 266
17774: PUSH
17775: LD_INT 8
17777: EQUAL
17778: IFFALSE 17835
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17780: LD_ADDR_VAR 0 2
17784: PUSH
17785: LD_INT 22
17787: PUSH
17788: LD_INT 3
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 25
17797: PUSH
17798: LD_INT 4
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PPUSH
17809: CALL_OW 69
17813: PUSH
17814: FOR_IN
17815: IFFALSE 17833
// ComEnterUnit ( i , building ) ;
17817: LD_VAR 0 2
17821: PPUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 120
17831: GO 17814
17833: POP
17834: POP
// if GetBType ( building ) = b_warehouse then
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 266
17844: PUSH
17845: LD_INT 1
17847: EQUAL
17848: IFFALSE 17864
// begin ComEnterUnit ( Borodin , building ) ;
17850: LD_EXP 23
17854: PPUSH
17855: LD_VAR 0 1
17859: PPUSH
17860: CALL_OW 120
// end ; end ; end ;
17864: PPOPN 2
17866: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL_OW 247
17876: PUSH
17877: LD_INT 2
17879: EQUAL
17880: PUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 263
17890: PUSH
17891: LD_INT 3
17893: EQUAL
17894: AND
17895: PUSH
17896: LD_EXP 40
17900: PUSH
17901: LD_INT 0
17903: EQUAL
17904: AND
17905: IFFALSE 18023
// begin varEvent1 = 1 ;
17907: LD_ADDR_EXP 40
17911: PUSH
17912: LD_INT 1
17914: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
17924: LD_INT 22
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 21
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 25
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 25
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 25
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 25
17979: PUSH
17980: LD_INT 4
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: PUSH
18004: LD_EXP 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: DIFF
18012: PPUSH
18013: LD_STRING DC-Sol1-1
18015: PPUSH
18016: LD_STRING DC-FSol1-1
18018: PPUSH
18019: CALL 5655 0 3
// end ; end ;
18023: PPOPN 1
18025: END
// on UnitDestroyed ( unit ) do var i ;
18026: LD_INT 0
18028: PPUSH
// begin if GetSide ( unit ) = 3 then
18029: LD_VAR 0 1
18033: PPUSH
18034: CALL_OW 255
18038: PUSH
18039: LD_INT 3
18041: EQUAL
18042: IFFALSE 18812
// begin if GetType ( unit ) = unit_building then
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 247
18053: PUSH
18054: LD_INT 3
18056: EQUAL
18057: IFFALSE 18749
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 266
18068: PUSH
18069: LD_INT 31
18071: EQUAL
18072: PUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 266
18082: PUSH
18083: LD_INT 32
18085: EQUAL
18086: OR
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 266
18097: PUSH
18098: LD_INT 36
18100: EQUAL
18101: OR
18102: PUSH
18103: LD_VAR 0 1
18107: PPUSH
18108: CALL_OW 266
18112: PUSH
18113: LD_INT 0
18115: EQUAL
18116: OR
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 266
18127: PUSH
18128: LD_INT 24
18130: EQUAL
18131: OR
18132: PUSH
18133: LD_VAR 0 1
18137: PPUSH
18138: CALL_OW 266
18142: PUSH
18143: LD_INT 17
18145: EQUAL
18146: OR
18147: PUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 266
18157: PUSH
18158: LD_INT 25
18160: EQUAL
18161: OR
18162: PUSH
18163: LD_VAR 0 1
18167: PPUSH
18168: CALL_OW 266
18172: PUSH
18173: LD_INT 19
18175: EQUAL
18176: OR
18177: PUSH
18178: LD_VAR 0 1
18182: PPUSH
18183: CALL_OW 266
18187: PUSH
18188: LD_INT 20
18190: EQUAL
18191: OR
18192: PUSH
18193: LD_VAR 0 1
18197: PPUSH
18198: CALL_OW 266
18202: PUSH
18203: LD_INT 18
18205: EQUAL
18206: OR
18207: PUSH
18208: LD_VAR 0 1
18212: PPUSH
18213: CALL_OW 266
18217: PUSH
18218: LD_INT 21
18220: EQUAL
18221: OR
18222: PUSH
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 266
18232: PUSH
18233: LD_INT 23
18235: EQUAL
18236: OR
18237: PUSH
18238: LD_VAR 0 1
18242: PPUSH
18243: CALL_OW 266
18247: PUSH
18248: LD_INT 16
18250: EQUAL
18251: OR
18252: PUSH
18253: LD_VAR 0 1
18257: PPUSH
18258: CALL_OW 266
18262: PUSH
18263: LD_INT 6
18265: EQUAL
18266: OR
18267: PUSH
18268: LD_VAR 0 1
18272: PPUSH
18273: CALL_OW 266
18277: PUSH
18278: LD_INT 29
18280: EQUAL
18281: OR
18282: PUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 266
18292: PUSH
18293: LD_INT 26
18295: EQUAL
18296: OR
18297: PUSH
18298: LD_VAR 0 1
18302: PPUSH
18303: CALL_OW 266
18307: PUSH
18308: LD_INT 30
18310: EQUAL
18311: OR
18312: PUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 266
18322: PUSH
18323: LD_INT 28
18325: EQUAL
18326: OR
18327: PUSH
18328: LD_VAR 0 1
18332: PPUSH
18333: CALL_OW 266
18337: PUSH
18338: LD_INT 27
18340: EQUAL
18341: OR
18342: PUSH
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 266
18352: PUSH
18353: LD_INT 33
18355: EQUAL
18356: OR
18357: PUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 266
18367: PUSH
18368: LD_INT 2
18370: EQUAL
18371: OR
18372: PUSH
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 266
18382: PUSH
18383: LD_INT 4
18385: EQUAL
18386: OR
18387: IFFALSE 18473
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18389: LD_ADDR_EXP 30
18393: PUSH
18394: LD_EXP 30
18398: PUSH
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 266
18408: ADD
18409: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18410: LD_ADDR_EXP 30
18414: PUSH
18415: LD_EXP 30
18419: PUSH
18420: LD_VAR 0 1
18424: PPUSH
18425: CALL_OW 250
18429: ADD
18430: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18431: LD_ADDR_EXP 30
18435: PUSH
18436: LD_EXP 30
18440: PUSH
18441: LD_VAR 0 1
18445: PPUSH
18446: CALL_OW 251
18450: ADD
18451: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18452: LD_ADDR_EXP 30
18456: PUSH
18457: LD_EXP 30
18461: PUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 254
18471: ADD
18472: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 266
18482: PUSH
18483: LD_INT 1
18485: EQUAL
18486: IFFALSE 18565
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
18488: LD_ADDR_EXP 30
18492: PUSH
18493: LD_EXP 30
18497: PUSH
18498: LD_INT 0
18500: ADD
18501: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18502: LD_ADDR_EXP 30
18506: PUSH
18507: LD_EXP 30
18511: PUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL_OW 250
18521: ADD
18522: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18523: LD_ADDR_EXP 30
18527: PUSH
18528: LD_EXP 30
18532: PUSH
18533: LD_VAR 0 1
18537: PPUSH
18538: CALL_OW 251
18542: ADD
18543: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18544: LD_ADDR_EXP 30
18548: PUSH
18549: LD_EXP 30
18553: PUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 254
18563: ADD
18564: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 266
18574: PUSH
18575: LD_INT 3
18577: EQUAL
18578: IFFALSE 18657
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18580: LD_ADDR_EXP 30
18584: PUSH
18585: LD_EXP 30
18589: PUSH
18590: LD_INT 2
18592: ADD
18593: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18594: LD_ADDR_EXP 30
18598: PUSH
18599: LD_EXP 30
18603: PUSH
18604: LD_VAR 0 1
18608: PPUSH
18609: CALL_OW 250
18613: ADD
18614: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18615: LD_ADDR_EXP 30
18619: PUSH
18620: LD_EXP 30
18624: PUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 251
18634: ADD
18635: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18636: LD_ADDR_EXP 30
18640: PUSH
18641: LD_EXP 30
18645: PUSH
18646: LD_VAR 0 1
18650: PPUSH
18651: CALL_OW 254
18655: ADD
18656: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18657: LD_VAR 0 1
18661: PPUSH
18662: CALL_OW 266
18666: PUSH
18667: LD_INT 5
18669: EQUAL
18670: IFFALSE 18749
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18672: LD_ADDR_EXP 30
18676: PUSH
18677: LD_EXP 30
18681: PUSH
18682: LD_INT 4
18684: ADD
18685: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18686: LD_ADDR_EXP 30
18690: PUSH
18691: LD_EXP 30
18695: PUSH
18696: LD_VAR 0 1
18700: PPUSH
18701: CALL_OW 250
18705: ADD
18706: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18707: LD_ADDR_EXP 30
18711: PUSH
18712: LD_EXP 30
18716: PUSH
18717: LD_VAR 0 1
18721: PPUSH
18722: CALL_OW 251
18726: ADD
18727: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18728: LD_ADDR_EXP 30
18732: PUSH
18733: LD_EXP 30
18737: PUSH
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 254
18747: ADD
18748: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 247
18758: PUSH
18759: LD_INT 1
18761: EQUAL
18762: IFFALSE 18812
// begin for i in defenders_list do
18764: LD_ADDR_VAR 0 2
18768: PUSH
18769: LD_EXP 31
18773: PUSH
18774: FOR_IN
18775: IFFALSE 18810
// if i = unit then
18777: LD_VAR 0 2
18781: PUSH
18782: LD_VAR 0 1
18786: EQUAL
18787: IFFALSE 18808
// defenders_list = defenders_list diff [ unit ] ;
18789: LD_ADDR_EXP 31
18793: PUSH
18794: LD_EXP 31
18798: PUSH
18799: LD_VAR 0 1
18803: PUSH
18804: EMPTY
18805: LIST
18806: DIFF
18807: ST_TO_ADDR
18808: GO 18774
18810: POP
18811: POP
// end ; end ; end ; end_of_file
18812: PPOPN 2
18814: END
// every 0 0$1 do
18815: GO 18817
18817: DISABLE
// begin enable ;
18818: ENABLE
// if escapeAvalaible = 0 then
18819: LD_EXP 35
18823: PUSH
18824: LD_INT 0
18826: EQUAL
18827: IFFALSE 18839
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18829: LD_INT 3
18831: PPUSH
18832: LD_INT 6
18834: PPUSH
18835: CALL 6900 0 2
// if escapeAvalaible = 0 then
18839: LD_EXP 35
18843: PUSH
18844: LD_INT 0
18846: EQUAL
18847: IFFALSE 18859
// DefenseBase ( 1 , RussianBaseTerritory ) ;
18849: LD_INT 1
18851: PPUSH
18852: LD_INT 24
18854: PPUSH
18855: CALL 7647 0 2
// if russianAI = 1 then
18859: LD_EXP 26
18863: PUSH
18864: LD_INT 1
18866: EQUAL
18867: IFFALSE 18930
// begin RepairBuilding ( 3 , ruDepot ) ;
18869: LD_INT 3
18871: PPUSH
18872: LD_EXP 27
18876: PPUSH
18877: CALL 7947 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
18881: LD_INT 3
18883: PPUSH
18884: LD_INT 7
18886: PPUSH
18887: LD_INT 6
18889: PPUSH
18890: LD_EXP 28
18894: PPUSH
18895: CALL 8412 0 4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18899: LD_INT 3
18901: PPUSH
18902: LD_EXP 30
18906: PPUSH
18907: CALL 8206 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
18911: LD_INT 6
18913: PPUSH
18914: LD_INT 8
18916: PPUSH
18917: LD_INT 93
18919: PPUSH
18920: LD_INT 93
18922: PPUSH
18923: LD_INT 1
18925: PPUSH
18926: CALL 8689 0 5
// end ; if SikorskyArrive = 1 then
18930: LD_EXP 17
18934: PUSH
18935: LD_INT 1
18937: EQUAL
18938: IFFALSE 18959
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
18940: LD_INT 3
18942: PPUSH
18943: LD_INT 10
18945: PPUSH
18946: LD_INT 53
18948: PPUSH
18949: LD_INT 59
18951: PPUSH
18952: LD_INT 3
18954: PPUSH
18955: CALL 8689 0 5
// end ;
18959: END
// every 0 0$1 trigger russianAI = 1 do var i ;
18960: LD_EXP 26
18964: PUSH
18965: LD_INT 1
18967: EQUAL
18968: IFFALSE 19244
18970: GO 18972
18972: DISABLE
18973: LD_INT 0
18975: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
18976: LD_ADDR_VAR 0 1
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_INT 3
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 3
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 30
19003: PUSH
19004: LD_INT 32
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 3
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: LD_INT 35
19019: PUSH
19020: LD_INT 43
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 35
19029: PUSH
19030: LD_INT 44
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 35
19039: PUSH
19040: LD_INT 46
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: PUSH
19068: FOR_IN
19069: IFFALSE 19108
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_INT 43
19078: PUSH
19079: LD_INT 44
19081: PUSH
19082: LD_INT 46
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PPUSH
19093: LD_INT 3
19095: PPUSH
19096: CALL_OW 12
19100: ARRAY
19101: PPUSH
19102: CALL_OW 431
19106: GO 19068
19108: POP
19109: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
19110: LD_ADDR_VAR 0 1
19114: PUSH
19115: LD_INT 22
19117: PUSH
19118: LD_INT 3
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 3
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 30
19137: PUSH
19138: LD_INT 33
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 3
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: LD_INT 35
19153: PUSH
19154: LD_INT 43
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 35
19163: PUSH
19164: LD_INT 44
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 35
19173: PUSH
19174: LD_INT 46
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: PPUSH
19197: CALL_OW 69
19201: PUSH
19202: FOR_IN
19203: IFFALSE 19242
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_INT 43
19212: PUSH
19213: LD_INT 44
19215: PUSH
19216: LD_INT 46
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: PPUSH
19227: LD_INT 3
19229: PPUSH
19230: CALL_OW 12
19234: ARRAY
19235: PPUSH
19236: CALL_OW 431
19240: GO 19202
19242: POP
19243: POP
// end ;
19244: PPOPN 1
19246: END
// every 0 0$1 trigger SikorskyAI = 1 do
19247: LD_EXP 19
19251: PUSH
19252: LD_INT 1
19254: EQUAL
19255: IFFALSE 19293
19257: GO 19259
19259: DISABLE
// begin enable ;
19260: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
19261: LD_INT 4
19263: PPUSH
19264: LD_INT 10
19266: PPUSH
19267: LD_INT 93
19269: PPUSH
19270: LD_INT 93
19272: PPUSH
19273: LD_INT 3
19275: PPUSH
19276: CALL 8689 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
19280: LD_INT 4
19282: PPUSH
19283: LD_INT 11
19285: PPUSH
19286: LD_INT 3
19288: PPUSH
19289: CALL 14070 0 3
// end ;
19293: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19294: LD_EXP 26
19298: PUSH
19299: LD_INT 1
19301: EQUAL
19302: PUSH
19303: LD_EXP 29
19307: PPUSH
19308: CALL_OW 302
19312: AND
19313: PUSH
19314: LD_EXP 29
19318: PPUSH
19319: CALL_OW 255
19323: PUSH
19324: LD_INT 3
19326: EQUAL
19327: AND
19328: PUSH
19329: LD_INT 22
19331: PUSH
19332: LD_INT 3
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 21
19341: PUSH
19342: LD_INT 2
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 33
19351: PUSH
19352: LD_INT 3
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: PPUSH
19364: CALL_OW 69
19368: PUSH
19369: LD_INT 0
19371: EQUAL
19372: AND
19373: IFFALSE 19552
19375: GO 19377
19377: DISABLE
// begin enable ;
19378: ENABLE
// if Difficulty = 1 then
19379: LD_OWVAR 67
19383: PUSH
19384: LD_INT 1
19386: EQUAL
19387: IFFALSE 19438
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
19389: LD_INT 3
19391: PPUSH
19392: LD_EXP 29
19396: PPUSH
19397: LD_INT 5
19399: PPUSH
19400: LD_INT 8
19402: PPUSH
19403: CALL_OW 12
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 43
19413: PUSH
19414: LD_INT 44
19416: PUSH
19417: LD_INT 46
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: LD_INT 3
19430: PPUSH
19431: LD_INT 24
19433: PPUSH
19434: CALL 9524 0 8
// if Difficulty = 2 then
19438: LD_OWVAR 67
19442: PUSH
19443: LD_INT 2
19445: EQUAL
19446: IFFALSE 19497
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
19448: LD_INT 3
19450: PPUSH
19451: LD_EXP 29
19455: PPUSH
19456: LD_INT 6
19458: PPUSH
19459: LD_INT 8
19461: PPUSH
19462: CALL_OW 12
19466: PPUSH
19467: LD_INT 1
19469: PPUSH
19470: LD_INT 44
19472: PUSH
19473: LD_INT 44
19475: PUSH
19476: LD_INT 46
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PPUSH
19484: LD_INT 1
19486: PPUSH
19487: LD_INT 3
19489: PPUSH
19490: LD_INT 24
19492: PPUSH
19493: CALL 9524 0 8
// if Difficulty = 3 then
19497: LD_OWVAR 67
19501: PUSH
19502: LD_INT 3
19504: EQUAL
19505: IFFALSE 19552
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
19507: LD_INT 3
19509: PPUSH
19510: LD_EXP 29
19514: PPUSH
19515: LD_INT 7
19517: PPUSH
19518: LD_INT 8
19520: PPUSH
19521: CALL_OW 12
19525: PPUSH
19526: LD_INT 1
19528: PPUSH
19529: LD_INT 44
19531: PUSH
19532: LD_INT 46
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: LD_INT 3
19544: PPUSH
19545: LD_INT 24
19547: PPUSH
19548: CALL 9524 0 8
// end ;
19552: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
19553: LD_EXP 37
19557: PUSH
19558: LD_INT 1
19560: EQUAL
19561: IFFALSE 19643
19563: GO 19565
19565: DISABLE
19566: LD_INT 0
19568: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
19569: LD_ADDR_VAR 0 1
19573: PUSH
19574: LD_INT 22
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 3
19596: PUSH
19597: LD_INT 24
19599: PUSH
19600: LD_INT 650
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PUSH
19621: FOR_IN
19622: IFFALSE 19641
// ComMoveXY ( i , 51 , 12 ) ;
19624: LD_VAR 0 1
19628: PPUSH
19629: LD_INT 51
19631: PPUSH
19632: LD_INT 12
19634: PPUSH
19635: CALL_OW 111
19639: GO 19621
19641: POP
19642: POP
// end ; end_of_file
19643: PPOPN 1
19645: END
// every 1 1$20 trigger firstAttack = 1 do
19646: LD_EXP 32
19650: PUSH
19651: LD_INT 1
19653: EQUAL
19654: IFFALSE 19760
19656: GO 19658
19658: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19659: LD_INT 6
19661: PPUSH
19662: LD_INT 3
19664: PPUSH
19665: LD_INT 5
19667: PPUSH
19668: LD_INT 6
19670: PPUSH
19671: CALL_OW 12
19675: PUSH
19676: LD_INT 5
19678: PPUSH
19679: LD_INT 6
19681: PPUSH
19682: CALL_OW 12
19686: PUSH
19687: LD_INT 5
19689: PPUSH
19690: LD_INT 6
19692: PPUSH
19693: CALL_OW 12
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: LIST
19702: PUSH
19703: LD_OWVAR 67
19707: ARRAY
19708: PPUSH
19709: LD_INT 0
19711: PPUSH
19712: LD_INT 0
19714: PPUSH
19715: LD_INT 0
19717: PPUSH
19718: LD_INT 0
19720: PPUSH
19721: LD_EXP 24
19725: PPUSH
19726: LD_EXP 25
19730: PPUSH
19731: CALL_OW 12
19735: PPUSH
19736: LD_INT 16
19738: PPUSH
19739: LD_INT 7
19741: PPUSH
19742: LD_INT 1
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: LD_INT 3
19750: PPUSH
19751: CALL_OW 12
19755: PPUSH
19756: CALL 10088 0 12
19760: END
// every 1 1$40 trigger firstAttack = 1 do
19761: LD_EXP 32
19765: PUSH
19766: LD_INT 1
19768: EQUAL
19769: IFFALSE 19869
19771: GO 19773
19773: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 5 , 6 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19774: LD_INT 16
19776: PPUSH
19777: LD_INT 6
19779: PPUSH
19780: LD_INT 3
19782: PPUSH
19783: LD_INT 4
19785: PPUSH
19786: CALL_OW 12
19790: PUSH
19791: LD_INT 4
19793: PPUSH
19794: LD_INT 5
19796: PPUSH
19797: CALL_OW 12
19801: PUSH
19802: LD_INT 5
19804: PPUSH
19805: LD_INT 6
19807: PPUSH
19808: CALL_OW 12
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: LD_OWVAR 67
19822: ARRAY
19823: PPUSH
19824: LD_EXP 24
19828: PPUSH
19829: LD_EXP 25
19833: PPUSH
19834: CALL_OW 12
19838: PPUSH
19839: LD_INT 3
19841: PPUSH
19842: LD_INT 1
19844: PPUSH
19845: LD_INT 3
19847: PPUSH
19848: LD_INT 44
19850: PUSH
19851: LD_INT 46
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: EMPTY
19859: PPUSH
19860: EMPTY
19861: PPUSH
19862: LD_INT 1
19864: PPUSH
19865: CALL 12381 0 11
19869: END
// every 3 3$10 trigger firstAttack = 1 do
19870: LD_EXP 32
19874: PUSH
19875: LD_INT 1
19877: EQUAL
19878: IFFALSE 19984
19880: GO 19882
19882: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19883: LD_INT 6
19885: PPUSH
19886: LD_INT 3
19888: PPUSH
19889: LD_INT 5
19891: PPUSH
19892: LD_INT 6
19894: PPUSH
19895: CALL_OW 12
19899: PUSH
19900: LD_INT 5
19902: PPUSH
19903: LD_INT 6
19905: PPUSH
19906: CALL_OW 12
19910: PUSH
19911: LD_INT 5
19913: PPUSH
19914: LD_INT 6
19916: PPUSH
19917: CALL_OW 12
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: PUSH
19927: LD_OWVAR 67
19931: ARRAY
19932: PPUSH
19933: LD_INT 0
19935: PPUSH
19936: LD_INT 0
19938: PPUSH
19939: LD_INT 0
19941: PPUSH
19942: LD_INT 0
19944: PPUSH
19945: LD_EXP 24
19949: PPUSH
19950: LD_EXP 25
19954: PPUSH
19955: CALL_OW 12
19959: PPUSH
19960: LD_INT 16
19962: PPUSH
19963: LD_INT 7
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: LD_INT 3
19974: PPUSH
19975: CALL_OW 12
19979: PPUSH
19980: CALL 10088 0 12
19984: END
// every 3 3$20 trigger firstAttack = 1 do
19985: LD_EXP 32
19989: PUSH
19990: LD_INT 1
19992: EQUAL
19993: IFFALSE 20101
19995: GO 19997
19997: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19998: LD_INT 16
20000: PPUSH
20001: LD_INT 6
20003: PPUSH
20004: LD_INT 4
20006: PPUSH
20007: LD_INT 5
20009: PPUSH
20010: CALL_OW 12
20014: PUSH
20015: LD_INT 5
20017: PPUSH
20018: LD_INT 6
20020: PPUSH
20021: CALL_OW 12
20025: PUSH
20026: LD_INT 6
20028: PPUSH
20029: LD_INT 7
20031: PPUSH
20032: CALL_OW 12
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: LD_OWVAR 67
20046: ARRAY
20047: PPUSH
20048: LD_EXP 24
20052: PPUSH
20053: LD_EXP 25
20057: PPUSH
20058: CALL_OW 12
20062: PPUSH
20063: LD_INT 3
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: LD_INT 3
20071: PPUSH
20072: LD_INT 42
20074: PUSH
20075: LD_INT 43
20077: PUSH
20078: LD_INT 44
20080: PUSH
20081: LD_INT 46
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: PPUSH
20090: EMPTY
20091: PPUSH
20092: EMPTY
20093: PPUSH
20094: LD_INT 1
20096: PPUSH
20097: CALL 12381 0 11
20101: END
// every 7 7$40 trigger firstAttack = 1 and JMMArrive = 0 do
20102: LD_EXP 32
20106: PUSH
20107: LD_INT 1
20109: EQUAL
20110: PUSH
20111: LD_EXP 38
20115: PUSH
20116: LD_INT 0
20118: EQUAL
20119: AND
20120: IFFALSE 20226
20122: GO 20124
20124: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20125: LD_INT 6
20127: PPUSH
20128: LD_INT 3
20130: PPUSH
20131: LD_INT 5
20133: PPUSH
20134: LD_INT 6
20136: PPUSH
20137: CALL_OW 12
20141: PUSH
20142: LD_INT 5
20144: PPUSH
20145: LD_INT 6
20147: PPUSH
20148: CALL_OW 12
20152: PUSH
20153: LD_INT 5
20155: PPUSH
20156: LD_INT 6
20158: PPUSH
20159: CALL_OW 12
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: PUSH
20169: LD_OWVAR 67
20173: ARRAY
20174: PPUSH
20175: LD_INT 0
20177: PPUSH
20178: LD_INT 0
20180: PPUSH
20181: LD_INT 0
20183: PPUSH
20184: LD_INT 0
20186: PPUSH
20187: LD_EXP 24
20191: PPUSH
20192: LD_EXP 25
20196: PPUSH
20197: CALL_OW 12
20201: PPUSH
20202: LD_INT 16
20204: PPUSH
20205: LD_INT 7
20207: PPUSH
20208: LD_INT 1
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: LD_INT 3
20216: PPUSH
20217: CALL_OW 12
20221: PPUSH
20222: CALL 10088 0 12
20226: END
// every 7 7$50 trigger firstAttack = 1 and JMMArrive = 0 do
20227: LD_EXP 32
20231: PUSH
20232: LD_INT 1
20234: EQUAL
20235: PUSH
20236: LD_EXP 38
20240: PUSH
20241: LD_INT 0
20243: EQUAL
20244: AND
20245: IFFALSE 20349
20247: GO 20249
20249: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , rand ( 7 , 8 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20250: LD_INT 16
20252: PPUSH
20253: LD_INT 6
20255: PPUSH
20256: LD_INT 5
20258: PPUSH
20259: LD_INT 6
20261: PPUSH
20262: CALL_OW 12
20266: PUSH
20267: LD_INT 6
20269: PPUSH
20270: LD_INT 7
20272: PPUSH
20273: CALL_OW 12
20277: PUSH
20278: LD_INT 7
20280: PPUSH
20281: LD_INT 8
20283: PPUSH
20284: CALL_OW 12
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: PUSH
20294: LD_OWVAR 67
20298: ARRAY
20299: PPUSH
20300: LD_EXP 24
20304: PPUSH
20305: LD_EXP 25
20309: PPUSH
20310: CALL_OW 12
20314: PPUSH
20315: LD_INT 3
20317: PPUSH
20318: LD_INT 1
20320: PPUSH
20321: LD_INT 3
20323: PPUSH
20324: LD_INT 43
20326: PUSH
20327: LD_INT 44
20329: PUSH
20330: LD_INT 46
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: PPUSH
20338: EMPTY
20339: PPUSH
20340: EMPTY
20341: PPUSH
20342: LD_INT 1
20344: PPUSH
20345: CALL 12381 0 11
20349: END
// every 10 10$00 trigger firstAttack = 1 and JMMArrive = 0 do
20350: LD_EXP 32
20354: PUSH
20355: LD_INT 1
20357: EQUAL
20358: PUSH
20359: LD_EXP 38
20363: PUSH
20364: LD_INT 0
20366: EQUAL
20367: AND
20368: IFFALSE 20444
20370: GO 20372
20372: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20373: LD_INT 16
20375: PPUSH
20376: LD_INT 6
20378: PPUSH
20379: LD_INT 6
20381: PUSH
20382: LD_INT 7
20384: PUSH
20385: LD_INT 8
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: PUSH
20393: LD_OWVAR 67
20397: ARRAY
20398: PPUSH
20399: LD_EXP 24
20403: PPUSH
20404: LD_EXP 25
20408: PPUSH
20409: CALL_OW 12
20413: PPUSH
20414: LD_INT 3
20416: PPUSH
20417: LD_INT 1
20419: PPUSH
20420: LD_INT 3
20422: PPUSH
20423: LD_INT 44
20425: PUSH
20426: LD_INT 46
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PPUSH
20433: EMPTY
20434: PPUSH
20435: EMPTY
20436: PPUSH
20437: LD_INT 1
20439: PPUSH
20440: CALL 12381 0 11
20444: END
// every 1 1$00 trigger secondAttack = 1 do
20445: LD_EXP 33
20449: PUSH
20450: LD_INT 1
20452: EQUAL
20453: IFFALSE 20559
20455: GO 20457
20457: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20458: LD_INT 6
20460: PPUSH
20461: LD_INT 3
20463: PPUSH
20464: LD_INT 4
20466: PPUSH
20467: LD_INT 7
20469: PPUSH
20470: CALL_OW 12
20474: PUSH
20475: LD_INT 6
20477: PPUSH
20478: LD_INT 7
20480: PPUSH
20481: CALL_OW 12
20485: PUSH
20486: LD_INT 6
20488: PPUSH
20489: LD_INT 10
20491: PPUSH
20492: CALL_OW 12
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: PUSH
20502: LD_OWVAR 67
20506: ARRAY
20507: PPUSH
20508: LD_INT 0
20510: PPUSH
20511: LD_INT 0
20513: PPUSH
20514: LD_INT 0
20516: PPUSH
20517: LD_INT 0
20519: PPUSH
20520: LD_EXP 24
20524: PPUSH
20525: LD_EXP 25
20529: PPUSH
20530: CALL_OW 12
20534: PPUSH
20535: LD_INT 16
20537: PPUSH
20538: LD_INT 7
20540: PPUSH
20541: LD_INT 1
20543: PPUSH
20544: LD_INT 1
20546: PPUSH
20547: LD_INT 3
20549: PPUSH
20550: CALL_OW 12
20554: PPUSH
20555: CALL 10088 0 12
20559: END
// every 1 1$00 trigger secondAttack = 1 do
20560: LD_EXP 33
20564: PUSH
20565: LD_INT 1
20567: EQUAL
20568: IFFALSE 20672
20570: GO 20572
20572: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20573: LD_INT 16
20575: PPUSH
20576: LD_INT 6
20578: PPUSH
20579: LD_INT 5
20581: PPUSH
20582: LD_INT 8
20584: PPUSH
20585: CALL_OW 12
20589: PUSH
20590: LD_INT 6
20592: PPUSH
20593: LD_INT 9
20595: PPUSH
20596: CALL_OW 12
20600: PUSH
20601: LD_INT 7
20603: PPUSH
20604: LD_INT 9
20606: PPUSH
20607: CALL_OW 12
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_OWVAR 67
20621: ARRAY
20622: PPUSH
20623: LD_EXP 24
20627: PPUSH
20628: LD_EXP 25
20632: PPUSH
20633: CALL_OW 12
20637: PPUSH
20638: LD_INT 3
20640: PPUSH
20641: LD_INT 1
20643: PPUSH
20644: LD_INT 3
20646: PPUSH
20647: LD_INT 43
20649: PUSH
20650: LD_INT 44
20652: PUSH
20653: LD_INT 46
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: PPUSH
20661: EMPTY
20662: PPUSH
20663: EMPTY
20664: PPUSH
20665: LD_INT 1
20667: PPUSH
20668: CALL 12381 0 11
20672: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20673: LD_EXP 17
20677: PUSH
20678: LD_INT 0
20680: EQUAL
20681: IFFALSE 20787
20683: GO 20685
20685: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20686: LD_INT 6
20688: PPUSH
20689: LD_INT 3
20691: PPUSH
20692: LD_INT 8
20694: PPUSH
20695: LD_INT 9
20697: PPUSH
20698: CALL_OW 12
20702: PUSH
20703: LD_INT 7
20705: PPUSH
20706: LD_INT 10
20708: PPUSH
20709: CALL_OW 12
20713: PUSH
20714: LD_INT 8
20716: PPUSH
20717: LD_INT 10
20719: PPUSH
20720: CALL_OW 12
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: LD_OWVAR 67
20734: ARRAY
20735: PPUSH
20736: LD_INT 0
20738: PPUSH
20739: LD_INT 0
20741: PPUSH
20742: LD_INT 0
20744: PPUSH
20745: LD_INT 0
20747: PPUSH
20748: LD_EXP 24
20752: PPUSH
20753: LD_EXP 25
20757: PPUSH
20758: CALL_OW 12
20762: PPUSH
20763: LD_INT 16
20765: PPUSH
20766: LD_INT 7
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 3
20777: PPUSH
20778: CALL_OW 12
20782: PPUSH
20783: CALL 10088 0 12
20787: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20788: LD_EXP 17
20792: PUSH
20793: LD_INT 0
20795: EQUAL
20796: IFFALSE 20896
20798: GO 20800
20800: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20801: LD_INT 16
20803: PPUSH
20804: LD_INT 6
20806: PPUSH
20807: LD_INT 5
20809: PPUSH
20810: LD_INT 8
20812: PPUSH
20813: CALL_OW 12
20817: PUSH
20818: LD_INT 6
20820: PPUSH
20821: LD_INT 9
20823: PPUSH
20824: CALL_OW 12
20828: PUSH
20829: LD_INT 7
20831: PPUSH
20832: LD_INT 9
20834: PPUSH
20835: CALL_OW 12
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: LD_OWVAR 67
20849: ARRAY
20850: PPUSH
20851: LD_EXP 24
20855: PPUSH
20856: LD_EXP 25
20860: PPUSH
20861: CALL_OW 12
20865: PPUSH
20866: LD_INT 3
20868: PPUSH
20869: LD_INT 1
20871: PPUSH
20872: LD_INT 3
20874: PPUSH
20875: LD_INT 44
20877: PUSH
20878: LD_INT 46
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PPUSH
20885: EMPTY
20886: PPUSH
20887: EMPTY
20888: PPUSH
20889: LD_INT 1
20891: PPUSH
20892: CALL 12381 0 11
20896: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20897: LD_EXP 17
20901: PUSH
20902: LD_INT 0
20904: EQUAL
20905: IFFALSE 21011
20907: GO 20909
20909: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20910: LD_INT 6
20912: PPUSH
20913: LD_INT 3
20915: PPUSH
20916: LD_INT 8
20918: PPUSH
20919: LD_INT 9
20921: PPUSH
20922: CALL_OW 12
20926: PUSH
20927: LD_INT 7
20929: PPUSH
20930: LD_INT 10
20932: PPUSH
20933: CALL_OW 12
20937: PUSH
20938: LD_INT 8
20940: PPUSH
20941: LD_INT 10
20943: PPUSH
20944: CALL_OW 12
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: LIST
20953: PUSH
20954: LD_OWVAR 67
20958: ARRAY
20959: PPUSH
20960: LD_INT 0
20962: PPUSH
20963: LD_INT 0
20965: PPUSH
20966: LD_INT 0
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: LD_EXP 24
20976: PPUSH
20977: LD_EXP 25
20981: PPUSH
20982: CALL_OW 12
20986: PPUSH
20987: LD_INT 16
20989: PPUSH
20990: LD_INT 7
20992: PPUSH
20993: LD_INT 1
20995: PPUSH
20996: LD_INT 1
20998: PPUSH
20999: LD_INT 3
21001: PPUSH
21002: CALL_OW 12
21006: PPUSH
21007: CALL 10088 0 12
21011: END
// every 25 25$0 trigger SikorskyArrive = 0 do
21012: LD_EXP 17
21016: PUSH
21017: LD_INT 0
21019: EQUAL
21020: IFFALSE 21120
21022: GO 21024
21024: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21025: LD_INT 16
21027: PPUSH
21028: LD_INT 6
21030: PPUSH
21031: LD_INT 5
21033: PPUSH
21034: LD_INT 8
21036: PPUSH
21037: CALL_OW 12
21041: PUSH
21042: LD_INT 6
21044: PPUSH
21045: LD_INT 9
21047: PPUSH
21048: CALL_OW 12
21052: PUSH
21053: LD_INT 7
21055: PPUSH
21056: LD_INT 9
21058: PPUSH
21059: CALL_OW 12
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: PUSH
21069: LD_OWVAR 67
21073: ARRAY
21074: PPUSH
21075: LD_EXP 24
21079: PPUSH
21080: LD_EXP 25
21084: PPUSH
21085: CALL_OW 12
21089: PPUSH
21090: LD_INT 3
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: LD_INT 3
21098: PPUSH
21099: LD_INT 44
21101: PUSH
21102: LD_INT 46
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: EMPTY
21110: PPUSH
21111: EMPTY
21112: PPUSH
21113: LD_INT 1
21115: PPUSH
21116: CALL 12381 0 11
21120: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21121: LD_EXP 17
21125: PUSH
21126: LD_INT 0
21128: EQUAL
21129: IFFALSE 21235
21131: GO 21133
21133: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21134: LD_INT 6
21136: PPUSH
21137: LD_INT 3
21139: PPUSH
21140: LD_INT 8
21142: PPUSH
21143: LD_INT 9
21145: PPUSH
21146: CALL_OW 12
21150: PUSH
21151: LD_INT 7
21153: PPUSH
21154: LD_INT 10
21156: PPUSH
21157: CALL_OW 12
21161: PUSH
21162: LD_INT 8
21164: PPUSH
21165: LD_INT 10
21167: PPUSH
21168: CALL_OW 12
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: PUSH
21178: LD_OWVAR 67
21182: ARRAY
21183: PPUSH
21184: LD_INT 0
21186: PPUSH
21187: LD_INT 0
21189: PPUSH
21190: LD_INT 0
21192: PPUSH
21193: LD_INT 0
21195: PPUSH
21196: LD_EXP 24
21200: PPUSH
21201: LD_EXP 25
21205: PPUSH
21206: CALL_OW 12
21210: PPUSH
21211: LD_INT 16
21213: PPUSH
21214: LD_INT 7
21216: PPUSH
21217: LD_INT 1
21219: PPUSH
21220: LD_INT 1
21222: PPUSH
21223: LD_INT 3
21225: PPUSH
21226: CALL_OW 12
21230: PPUSH
21231: CALL 10088 0 12
21235: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21236: LD_EXP 17
21240: PUSH
21241: LD_INT 0
21243: EQUAL
21244: IFFALSE 21344
21246: GO 21248
21248: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
21249: LD_INT 16
21251: PPUSH
21252: LD_INT 6
21254: PPUSH
21255: LD_INT 5
21257: PPUSH
21258: LD_INT 8
21260: PPUSH
21261: CALL_OW 12
21265: PUSH
21266: LD_INT 6
21268: PPUSH
21269: LD_INT 9
21271: PPUSH
21272: CALL_OW 12
21276: PUSH
21277: LD_INT 7
21279: PPUSH
21280: LD_INT 9
21282: PPUSH
21283: CALL_OW 12
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: PUSH
21293: LD_OWVAR 67
21297: ARRAY
21298: PPUSH
21299: LD_EXP 24
21303: PPUSH
21304: LD_EXP 25
21308: PPUSH
21309: CALL_OW 12
21313: PPUSH
21314: LD_INT 3
21316: PPUSH
21317: LD_INT 1
21319: PPUSH
21320: LD_INT 3
21322: PPUSH
21323: LD_INT 44
21325: PUSH
21326: LD_INT 46
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PPUSH
21333: EMPTY
21334: PPUSH
21335: EMPTY
21336: PPUSH
21337: LD_INT 1
21339: PPUSH
21340: CALL 12381 0 11
21344: END
// every 0 0$1 trigger timerStatus = 1 do
21345: LD_EXP 34
21349: PUSH
21350: LD_INT 1
21352: EQUAL
21353: IFFALSE 21390
21355: GO 21357
21357: DISABLE
// begin enable ;
21358: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
21359: LD_ADDR_OWVAR 47
21363: PUSH
21364: LD_STRING #Am08-1
21366: PUSH
21367: LD_EXP 18
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
21376: LD_ADDR_EXP 18
21380: PUSH
21381: LD_EXP 18
21385: PUSH
21386: LD_INT 35
21388: MINUS
21389: ST_TO_ADDR
// end ; end_of_file
21390: END
// every 1 1$0 do
21391: GO 21393
21393: DISABLE
// begin if supply <= 13 and supply > 7 then
21394: LD_EXP 39
21398: PUSH
21399: LD_INT 13
21401: LESSEQUAL
21402: PUSH
21403: LD_EXP 39
21407: PUSH
21408: LD_INT 7
21410: GREATER
21411: AND
21412: IFFALSE 21435
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
21414: LD_INT 3
21416: PPUSH
21417: LD_INT 5
21419: PPUSH
21420: CALL_OW 12
21424: PPUSH
21425: LD_INT 5
21427: PPUSH
21428: LD_INT 1
21430: PPUSH
21431: CALL_OW 55
// if supply <= 7 and supply > 4 then
21435: LD_EXP 39
21439: PUSH
21440: LD_INT 7
21442: LESSEQUAL
21443: PUSH
21444: LD_EXP 39
21448: PUSH
21449: LD_INT 4
21451: GREATER
21452: AND
21453: IFFALSE 21476
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
21455: LD_INT 3
21457: PPUSH
21458: LD_INT 5
21460: PPUSH
21461: CALL_OW 12
21465: PPUSH
21466: LD_INT 20
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: CALL_OW 55
// if supply <= 4 and supply > 0 then
21476: LD_EXP 39
21480: PUSH
21481: LD_INT 4
21483: LESSEQUAL
21484: PUSH
21485: LD_EXP 39
21489: PUSH
21490: LD_INT 0
21492: GREATER
21493: AND
21494: IFFALSE 21517
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
21496: LD_INT 3
21498: PPUSH
21499: LD_INT 5
21501: PPUSH
21502: CALL_OW 12
21506: PPUSH
21507: LD_INT 21
21509: PPUSH
21510: LD_INT 1
21512: PPUSH
21513: CALL_OW 55
// if supply > 0 then
21517: LD_EXP 39
21521: PUSH
21522: LD_INT 0
21524: GREATER
21525: IFFALSE 21542
// begin supply = supply - 1 ;
21527: LD_ADDR_EXP 39
21531: PUSH
21532: LD_EXP 39
21536: PUSH
21537: LD_INT 1
21539: MINUS
21540: ST_TO_ADDR
// enable ;
21541: ENABLE
// end ; end ; end_of_file
21542: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
21543: LD_EXP 38
21547: PUSH
21548: LD_INT 1
21550: EQUAL
21551: PUSH
21552: LD_EXP 1
21556: PPUSH
21557: CALL_OW 301
21561: AND
21562: IFFALSE 21574
21564: GO 21566
21566: DISABLE
// YouLost ( JMM ) ;
21567: LD_STRING JMM
21569: PPUSH
21570: CALL_OW 104
21574: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
21575: LD_EXP 17
21579: PUSH
21580: LD_INT 1
21582: EQUAL
21583: PUSH
21584: LD_EXP 15
21588: PPUSH
21589: CALL_OW 301
21593: AND
21594: IFFALSE 21626
21596: GO 21598
21598: DISABLE
// begin DialogueOn ;
21599: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
21603: LD_EXP 22
21607: PPUSH
21608: LD_STRING D8a-Pow-1
21610: PPUSH
21611: CALL_OW 94
// DialogueOff ;
21615: CALL_OW 7
// YouLost ( Dismissed ) ;
21619: LD_STRING Dismissed
21621: PPUSH
21622: CALL_OW 104
// end ;
21626: END
// every 0 0$1 trigger IsDead ( amDepot ) do
21627: LD_EXP 36
21631: PPUSH
21632: CALL_OW 301
21636: IFFALSE 21648
21638: GO 21640
21640: DISABLE
// YouLost ( Destroyed ) ; end_of_file
21641: LD_STRING Destroyed
21643: PPUSH
21644: CALL_OW 104
21648: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
21649: LD_EXP 23
21653: PPUSH
21654: CALL_OW 301
21658: IFFALSE 22003
21660: GO 21662
21662: DISABLE
21663: LD_INT 0
21665: PPUSH
// begin russianAI = 0 ;
21666: LD_ADDR_EXP 26
21670: PUSH
21671: LD_INT 0
21673: ST_TO_ADDR
// escapeAvalaible = 1 ;
21674: LD_ADDR_EXP 35
21678: PUSH
21679: LD_INT 1
21681: ST_TO_ADDR
// InGameOn ;
21682: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
21686: LD_INT 3
21688: PPUSH
21689: LD_INT 1
21691: PPUSH
21692: LD_INT 1
21694: PPUSH
21695: LD_INT 0
21697: PPUSH
21698: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
21702: LD_INT 6
21704: PPUSH
21705: LD_INT 1
21707: PPUSH
21708: LD_INT 1
21710: PPUSH
21711: LD_INT 0
21713: PPUSH
21714: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
21718: LD_INT 3
21720: PPUSH
21721: LD_INT 1
21723: PPUSH
21724: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
21728: LD_INT 97
21730: PPUSH
21731: LD_INT 91
21733: PPUSH
21734: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21738: LD_INT 22
21740: PUSH
21741: LD_INT 3
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 21
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PPUSH
21762: CALL_OW 69
21766: PPUSH
21767: CALL_OW 121
// wait ( 0 0$01 ) ;
21771: LD_INT 35
21773: PPUSH
21774: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21778: LD_INT 22
21780: PUSH
21781: LD_INT 3
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 21
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PPUSH
21802: CALL_OW 69
21806: PPUSH
21807: LD_INT 124
21809: PPUSH
21810: LD_INT 98
21812: PPUSH
21813: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21817: LD_INT 22
21819: PUSH
21820: LD_INT 6
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 21
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PPUSH
21841: CALL_OW 69
21845: PPUSH
21846: CALL_OW 121
// wait ( 0 0$01 ) ;
21850: LD_INT 35
21852: PPUSH
21853: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21857: LD_INT 22
21859: PUSH
21860: LD_INT 6
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 21
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PPUSH
21881: CALL_OW 69
21885: PPUSH
21886: LD_INT 124
21888: PPUSH
21889: LD_INT 98
21891: PPUSH
21892: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21896: LD_INT 22
21898: PUSH
21899: LD_INT 1
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 21
21908: PUSH
21909: LD_INT 1
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PPUSH
21920: CALL_OW 69
21924: PPUSH
21925: LD_INT 124
21927: PPUSH
21928: LD_INT 98
21930: PPUSH
21931: CALL_OW 114
// wait ( 0 0$4 ) ;
21935: LD_INT 140
21937: PPUSH
21938: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
21942: LD_INT 124
21944: PPUSH
21945: LD_INT 98
21947: PPUSH
21948: CALL_OW 84
// if SikorskyStatus = 1 then
21952: LD_EXP 20
21956: PUSH
21957: LD_INT 1
21959: EQUAL
21960: IFFALSE 21974
// begin Say ( Sikorski , D9-Sik-1 ) ;
21962: LD_EXP 15
21966: PPUSH
21967: LD_STRING D9-Sik-1
21969: PPUSH
21970: CALL_OW 88
// end ; if SikorskyStatus = 2 then
21974: LD_EXP 20
21978: PUSH
21979: LD_INT 2
21981: EQUAL
21982: IFFALSE 22003
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
21984: LD_EXP 22
21988: PPUSH
21989: LD_STRING D8b-Pow-1
21991: PPUSH
21992: CALL_OW 94
// YouLost ( Dismissed ) ;
21996: LD_STRING Dismissed
21998: PPUSH
21999: CALL_OW 104
// end ; end ;
22003: PPOPN 1
22005: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
22006: LD_INT 23
22008: PUSH
22009: LD_INT 3
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 21
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 24
22028: PUSH
22029: LD_INT 250
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: PUSH
22046: LD_INT 0
22048: EQUAL
22049: IFFALSE 22058
22051: GO 22053
22053: DISABLE
// FinishMission ;
22054: CALL 22059 0 0
22058: END
// export function FinishMission ; var tmp ; begin
22059: LD_INT 0
22061: PPUSH
22062: PPUSH
// AddMedal ( med1 , 1 ) ;
22063: LD_STRING med1
22065: PPUSH
22066: LD_INT 1
22068: PPUSH
22069: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
22073: LD_STRING med2
22075: PPUSH
22076: LD_INT 1
22078: PPUSH
22079: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
22083: LD_STRING perfect
22085: PPUSH
22086: LD_INT 1
22088: PPUSH
22089: CALL_OW 101
// GiveMedals ( Main ) ;
22093: LD_STRING Main
22095: PPUSH
22096: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22100: LD_INT 22
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 23
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 21
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 2
22132: PUSH
22133: LD_INT 25
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 25
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 25
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 25
22165: PUSH
22166: LD_INT 4
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PPUSH
22186: CALL_OW 69
22190: PPUSH
22191: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22195: LD_EXP 1
22199: PPUSH
22200: LD_EXP 41
22204: PUSH
22205: LD_STRING JMM
22207: STR
22208: PPUSH
22209: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22213: LD_EXP 2
22217: PPUSH
22218: LD_EXP 41
22222: PUSH
22223: LD_STRING Brown
22225: STR
22226: PPUSH
22227: CALL 6764 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22231: LD_EXP 3
22235: PPUSH
22236: LD_EXP 41
22240: PUSH
22241: LD_STRING Donaldson
22243: STR
22244: PPUSH
22245: CALL 6764 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22249: LD_EXP 4
22253: PPUSH
22254: LD_EXP 41
22258: PUSH
22259: LD_STRING Bobby
22261: STR
22262: PPUSH
22263: CALL 6764 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22267: LD_EXP 5
22271: PPUSH
22272: LD_EXP 41
22276: PUSH
22277: LD_STRING Cyrus
22279: STR
22280: PPUSH
22281: CALL 6764 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22285: LD_EXP 6
22289: PPUSH
22290: LD_EXP 41
22294: PUSH
22295: LD_STRING Lisa
22297: STR
22298: PPUSH
22299: CALL 6764 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22303: LD_EXP 7
22307: PPUSH
22308: LD_EXP 41
22312: PUSH
22313: LD_STRING Frank
22315: STR
22316: PPUSH
22317: CALL 6764 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22321: LD_EXP 8
22325: PPUSH
22326: LD_EXP 41
22330: PUSH
22331: LD_STRING Gladstone
22333: STR
22334: PPUSH
22335: CALL 6764 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22339: LD_EXP 9
22343: PPUSH
22344: LD_EXP 41
22348: PUSH
22349: LD_STRING Kikuchi
22351: STR
22352: PPUSH
22353: CALL 6764 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22357: LD_EXP 13
22361: PPUSH
22362: LD_EXP 41
22366: PUSH
22367: LD_STRING Denis
22369: STR
22370: PPUSH
22371: CALL 6764 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22375: LD_EXP 14
22379: PPUSH
22380: LD_EXP 41
22384: PUSH
22385: LD_STRING Joan
22387: STR
22388: PPUSH
22389: CALL 6764 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22393: LD_EXP 12
22397: PPUSH
22398: LD_EXP 41
22402: PUSH
22403: LD_STRING Houten
22405: STR
22406: PPUSH
22407: CALL 6764 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
22411: LD_INT 50
22413: PUSH
22414: EMPTY
22415: LIST
22416: PUSH
22417: LD_INT 22
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 21
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 2
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 25
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 25
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 25
22472: PUSH
22473: LD_INT 4
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: PPUSH
22493: CALL_OW 69
22497: PUSH
22498: LD_EXP 1
22502: PUSH
22503: LD_EXP 2
22507: PUSH
22508: LD_EXP 3
22512: PUSH
22513: LD_EXP 4
22517: PUSH
22518: LD_EXP 5
22522: PUSH
22523: LD_EXP 6
22527: PUSH
22528: LD_EXP 7
22532: PUSH
22533: LD_EXP 8
22537: PUSH
22538: LD_EXP 9
22542: PUSH
22543: LD_EXP 13
22547: PUSH
22548: LD_EXP 14
22552: PUSH
22553: LD_EXP 12
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: DIFF
22572: PPUSH
22573: LD_STRING 08_other_survivors
22575: PPUSH
22576: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
22580: LD_INT 23
22582: PPUSH
22583: CALL 22596 0 1
// YouWin ;
22587: CALL_OW 103
// end ;
22591: LD_VAR 0 1
22595: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22596: LD_INT 0
22598: PPUSH
22599: PPUSH
22600: PPUSH
22601: PPUSH
// gammaBase = [ ] ;
22602: LD_ADDR_VAR 0 4
22606: PUSH
22607: EMPTY
22608: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22609: LD_ADDR_VAR 0 5
22613: PUSH
22614: LD_VAR 0 1
22618: PPUSH
22619: LD_INT 22
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 21
22631: PUSH
22632: LD_INT 3
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 50
22641: PUSH
22642: EMPTY
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 70
22654: ST_TO_ADDR
// for i in buildings do
22655: LD_ADDR_VAR 0 3
22659: PUSH
22660: LD_VAR 0 5
22664: PUSH
22665: FOR_IN
22666: IFFALSE 23103
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22668: LD_VAR 0 3
22672: PPUSH
22673: CALL_OW 266
22677: PUSH
22678: LD_INT 6
22680: PUSH
22681: LD_INT 7
22683: PUSH
22684: LD_INT 8
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: IN
22692: IFFALSE 22806
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22694: LD_ADDR_VAR 0 4
22698: PUSH
22699: LD_VAR 0 4
22703: PUSH
22704: LD_VAR 0 3
22708: PPUSH
22709: CALL_OW 266
22713: PUSH
22714: LD_VAR 0 3
22718: PPUSH
22719: CALL_OW 250
22723: PUSH
22724: LD_VAR 0 3
22728: PPUSH
22729: CALL_OW 251
22733: PUSH
22734: LD_VAR 0 3
22738: PPUSH
22739: CALL_OW 254
22743: PUSH
22744: LD_VAR 0 3
22748: PPUSH
22749: CALL_OW 267
22753: PUSH
22754: LD_VAR 0 3
22758: PPUSH
22759: CALL_OW 248
22763: PUSH
22764: LD_VAR 0 3
22768: PPUSH
22769: LD_INT 1
22771: PPUSH
22772: CALL_OW 268
22776: PUSH
22777: LD_VAR 0 3
22781: PPUSH
22782: LD_INT 2
22784: PPUSH
22785: CALL_OW 268
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: ADD
22803: ST_TO_ADDR
22804: GO 23101
// if GetBType ( i ) = b_bunker then
22806: LD_VAR 0 3
22810: PPUSH
22811: CALL_OW 266
22815: PUSH
22816: LD_INT 32
22818: EQUAL
22819: IFFALSE 22916
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22821: LD_ADDR_VAR 0 4
22825: PUSH
22826: LD_VAR 0 4
22830: PUSH
22831: LD_VAR 0 3
22835: PPUSH
22836: CALL_OW 266
22840: PUSH
22841: LD_VAR 0 3
22845: PPUSH
22846: CALL_OW 250
22850: PUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: CALL_OW 251
22860: PUSH
22861: LD_VAR 0 3
22865: PPUSH
22866: CALL_OW 254
22870: PUSH
22871: LD_VAR 0 3
22875: PPUSH
22876: CALL_OW 267
22880: PUSH
22881: LD_VAR 0 3
22885: PPUSH
22886: CALL_OW 248
22890: PUSH
22891: LD_VAR 0 3
22895: PPUSH
22896: CALL_OW 269
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 23101
// if GetBType ( i ) = b_factory then
22916: LD_VAR 0 3
22920: PPUSH
22921: CALL_OW 266
22925: PUSH
22926: LD_INT 3
22928: EQUAL
22929: IFFALSE 23019
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
22931: LD_ADDR_VAR 0 4
22935: PUSH
22936: LD_VAR 0 4
22940: PPUSH
22941: LD_INT 1
22943: PPUSH
22944: LD_VAR 0 3
22948: PPUSH
22949: CALL_OW 266
22953: PUSH
22954: LD_VAR 0 3
22958: PPUSH
22959: CALL_OW 250
22963: PUSH
22964: LD_VAR 0 3
22968: PPUSH
22969: CALL_OW 251
22973: PUSH
22974: LD_VAR 0 3
22978: PPUSH
22979: CALL_OW 254
22983: PUSH
22984: LD_VAR 0 3
22988: PPUSH
22989: CALL_OW 267
22993: PUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: CALL_OW 248
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 2
23016: ST_TO_ADDR
23017: GO 23101
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23019: LD_ADDR_VAR 0 4
23023: PUSH
23024: LD_VAR 0 4
23028: PUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: CALL_OW 266
23038: PUSH
23039: LD_VAR 0 3
23043: PPUSH
23044: CALL_OW 250
23048: PUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: CALL_OW 251
23058: PUSH
23059: LD_VAR 0 3
23063: PPUSH
23064: CALL_OW 254
23068: PUSH
23069: LD_VAR 0 3
23073: PPUSH
23074: CALL_OW 267
23078: PUSH
23079: LD_VAR 0 3
23083: PPUSH
23084: CALL_OW 248
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: ADD
23100: ST_TO_ADDR
// end ;
23101: GO 22665
23103: POP
23104: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
23105: LD_VAR 0 4
23109: PPUSH
23110: LD_STRING 08_GammaBase
23112: PPUSH
23113: CALL_OW 39
// end ;
23117: LD_VAR 0 2
23121: RET
