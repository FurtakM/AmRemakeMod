// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7480 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6257 0 0
// PrepareRussians ;
 229: CALL 6575 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8901 0 6
// PrepareCutsceneAttack ;
 312: CALL 6309 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6993 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6993 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6993 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6993 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6993 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6993 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6993 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6993 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6993 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6993 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6993 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6993 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6993 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6993 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6993 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6993 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 52
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 2982
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2805
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// end else
2803: GO 2947
// begin if bc_type = 4 then
2805: LD_OWVAR 42
2809: PUSH
2810: LD_INT 4
2812: EQUAL
2813: IFFALSE 2862
// begin bc_type = 5 ;
2815: LD_ADDR_OWVAR 42
2819: PUSH
2820: LD_INT 5
2822: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2823: LD_ADDR_VAR 0 4
2827: PUSH
2828: LD_VAR 0 3
2832: PUSH
2833: LD_INT 2
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 4
2853: ARRAY
2854: PPUSH
2855: CALL_OW 47
2859: ST_TO_ADDR
// end else
2860: GO 2947
// begin bc_type := i [ 1 ] ;
2862: LD_ADDR_OWVAR 42
2866: PUSH
2867: LD_VAR 0 3
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2876: LD_STRING 06_remoteVehs_1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 30
2886: PUSH
2887: LD_INT 1
2889: EQUAL
2890: PUSH
2891: LD_OWVAR 42
2895: PUSH
2896: LD_INT 7
2898: EQUAL
2899: AND
2900: IFFALSE 2910
// bc_type := b_lab_full ;
2902: LD_ADDR_OWVAR 42
2906: PUSH
2907: LD_INT 8
2909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 2
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PUSH
2929: LD_INT 3
2931: ARRAY
2932: PPUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 4
2940: ARRAY
2941: PPUSH
2942: CALL_OW 47
2946: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2947: LD_VAR 0 4
2951: PPUSH
2952: CALL_OW 266
2956: PUSH
2957: LD_INT 32
2959: EQUAL
2960: IFFALSE 2980
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2962: LD_VAR 0 4
2966: PPUSH
2967: LD_VAR 0 3
2971: PUSH
2972: LD_INT 7
2974: ARRAY
2975: PPUSH
2976: CALL_OW 431
// end ;
2980: GO 2642
2982: POP
2983: POP
// if not FilterAllUnits ( [ [ f_btype , b_depot ] , [ f_nation , 1 ] ] ) then
2984: LD_INT 30
2986: PUSH
2987: LD_INT 0
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: PUSH
2994: LD_INT 23
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 69
3012: NOT
3013: IFFALSE 3050
// begin bc_type := b_warehouse ;
3015: LD_ADDR_OWVAR 42
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// bc_level := 6 ;
3023: LD_ADDR_OWVAR 43
3027: PUSH
3028: LD_INT 6
3030: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3031: LD_ADDR_EXP 37
3035: PUSH
3036: LD_INT 52
3038: PPUSH
3039: LD_INT 12
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3050: LD_EXP 37
3054: PPUSH
3055: LD_STRING gamma
3057: PPUSH
3058: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3062: LD_EXP 37
3066: PPUSH
3067: CALL_OW 274
3071: PPUSH
3072: LD_INT 1
3074: PPUSH
3075: LD_INT 500
3077: PUSH
3078: LD_INT 420
3080: PUSH
3081: LD_INT 350
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: LD_OWVAR 67
3093: ARRAY
3094: PPUSH
3095: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3099: LD_EXP 37
3103: PPUSH
3104: CALL_OW 274
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_INT 200
3114: PPUSH
3115: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3119: LD_INT 22
3121: PUSH
3122: LD_INT 1
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: LD_INT 30
3131: PUSH
3132: LD_INT 3
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 69
3147: IFFALSE 3395
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3149: LD_ADDR_VAR 0 4
3153: PUSH
3154: LD_INT 22
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: LD_INT 30
3166: PUSH
3167: LD_INT 3
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: CALL_OW 69
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3187: LD_ADDR_VAR 0 6
3191: PUSH
3192: LD_VAR 0 4
3196: PPUSH
3197: CALL_OW 250
3201: PPUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 251
3211: PPUSH
3212: LD_VAR 0 4
3216: PPUSH
3217: CALL_OW 254
3221: PPUSH
3222: CALL 16813 0 3
3226: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3227: LD_ADDR_VAR 0 2
3231: PUSH
3232: LD_INT 19
3234: PUSH
3235: LD_INT 17
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3242: LD_STRING 06_remoteVehs_1
3244: PPUSH
3245: LD_INT 0
3247: PPUSH
3248: CALL_OW 30
3252: IFFALSE 3275
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3254: LD_ADDR_VAR 0 2
3258: PUSH
3259: LD_VAR 0 2
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: LD_INT 20
3269: PPUSH
3270: CALL_OW 2
3274: ST_TO_ADDR
// for i in tmp do
3275: LD_ADDR_VAR 0 3
3279: PUSH
3280: LD_VAR 0 6
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3393
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3288: LD_VAR 0 3
3292: PUSH
3293: LD_INT 1
3295: ARRAY
3296: PPUSH
3297: LD_VAR 0 3
3301: PUSH
3302: LD_INT 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 428
3310: PUSH
3311: LD_INT 0
3313: EQUAL
3314: IFFALSE 3391
// begin bc_type := blist [ 1 ] ;
3316: LD_ADDR_OWVAR 42
3320: PUSH
3321: LD_VAR 0 2
3325: PUSH
3326: LD_INT 1
3328: ARRAY
3329: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3330: LD_VAR 0 3
3334: PUSH
3335: LD_INT 1
3337: ARRAY
3338: PPUSH
3339: LD_VAR 0 3
3343: PUSH
3344: LD_INT 2
3346: ARRAY
3347: PPUSH
3348: LD_VAR 0 3
3352: PUSH
3353: LD_INT 3
3355: ARRAY
3356: PPUSH
3357: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3361: LD_ADDR_VAR 0 2
3365: PUSH
3366: LD_VAR 0 2
3370: PPUSH
3371: LD_INT 1
3373: PPUSH
3374: CALL_OW 3
3378: ST_TO_ADDR
// if blist = 0 then
3379: LD_VAR 0 2
3383: PUSH
3384: LD_INT 0
3386: EQUAL
3387: IFFALSE 3391
// break ;
3389: GO 3393
// end ;
3391: GO 3285
3393: POP
3394: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3395: LD_STRING 06_remoteVehs_1
3397: PPUSH
3398: LD_INT 0
3400: PPUSH
3401: CALL_OW 30
3405: PUSH
3406: LD_INT 1
3408: EQUAL
3409: IFFALSE 3886
// begin bc_type = 36 ;
3411: LD_ADDR_OWVAR 42
3415: PUSH
3416: LD_INT 36
3418: ST_TO_ADDR
// bc_level = 4 ;
3419: LD_ADDR_OWVAR 43
3423: PUSH
3424: LD_INT 4
3426: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and FilterAllUnits ( [ f_distxy , 62 , 12 , 4 ] ) = 0 then
3427: LD_EXP 37
3431: PPUSH
3432: LD_INT 36
3434: PPUSH
3435: LD_INT 62
3437: PPUSH
3438: LD_INT 12
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: LD_INT 0
3446: PPUSH
3447: CALL 17683 0 6
3451: PUSH
3452: LD_INT 92
3454: PUSH
3455: LD_INT 62
3457: PUSH
3458: LD_INT 12
3460: PUSH
3461: LD_INT 4
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: PUSH
3475: LD_INT 0
3477: EQUAL
3478: AND
3479: IFFALSE 3496
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3481: LD_INT 62
3483: PPUSH
3484: LD_INT 12
3486: PPUSH
3487: LD_INT 3
3489: PPUSH
3490: CALL_OW 47
3494: GO 3701
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and FilterAllUnits ( [ f_distxy , 37 , 18 , 4 ] ) = 0 then
3496: LD_EXP 37
3500: PPUSH
3501: LD_INT 36
3503: PPUSH
3504: LD_INT 37
3506: PPUSH
3507: LD_INT 18
3509: PPUSH
3510: LD_INT 2
3512: PPUSH
3513: LD_INT 0
3515: PPUSH
3516: CALL 17683 0 6
3520: PUSH
3521: LD_INT 92
3523: PUSH
3524: LD_INT 37
3526: PUSH
3527: LD_INT 18
3529: PUSH
3530: LD_INT 4
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PPUSH
3539: CALL_OW 69
3543: PUSH
3544: LD_INT 0
3546: EQUAL
3547: AND
3548: IFFALSE 3565
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3550: LD_INT 37
3552: PPUSH
3553: LD_INT 18
3555: PPUSH
3556: LD_INT 2
3558: PPUSH
3559: CALL_OW 47
3563: GO 3701
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 4 , false ) and FilterAllUnits ( [ f_distxy , 37 , 18 , 4 ] ) = 0 then
3565: LD_EXP 37
3569: PPUSH
3570: LD_INT 36
3572: PPUSH
3573: LD_INT 37
3575: PPUSH
3576: LD_INT 18
3578: PPUSH
3579: LD_INT 4
3581: PPUSH
3582: LD_INT 0
3584: PPUSH
3585: CALL 17683 0 6
3589: PUSH
3590: LD_INT 92
3592: PUSH
3593: LD_INT 37
3595: PUSH
3596: LD_INT 18
3598: PUSH
3599: LD_INT 4
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: AND
3617: IFFALSE 3634
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3619: LD_INT 66
3621: PPUSH
3622: LD_INT 14
3624: PPUSH
3625: LD_INT 4
3627: PPUSH
3628: CALL_OW 47
3632: GO 3701
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) and FilterAllUnits ( [ f_distxy , 74 , 26 , 4 ] ) = 0 then
3634: LD_EXP 37
3638: PPUSH
3639: LD_INT 36
3641: PPUSH
3642: LD_INT 74
3644: PPUSH
3645: LD_INT 26
3647: PPUSH
3648: LD_INT 4
3650: PPUSH
3651: LD_INT 0
3653: PPUSH
3654: CALL 17683 0 6
3658: PUSH
3659: LD_INT 92
3661: PUSH
3662: LD_INT 74
3664: PUSH
3665: LD_INT 26
3667: PUSH
3668: LD_INT 4
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: PPUSH
3677: CALL_OW 69
3681: PUSH
3682: LD_INT 0
3684: EQUAL
3685: AND
3686: IFFALSE 3701
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3688: LD_INT 74
3690: PPUSH
3691: LD_INT 26
3693: PPUSH
3694: LD_INT 4
3696: PPUSH
3697: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3701: LD_ADDR_VAR 0 3
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_INT 3
3713: PUSH
3714: LD_INT 2
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: LD_OWVAR 67
3729: ARRAY
3730: PUSH
3731: FOR_TO
3732: IFFALSE 3884
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3734: LD_ADDR_OWVAR 37
3738: PUSH
3739: LD_INT 3
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: LD_INT 3
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 1
3754: PPUSH
3755: LD_INT 2
3757: PPUSH
3758: CALL_OW 12
3762: ARRAY
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: PUSH
3772: LD_OWVAR 67
3776: ARRAY
3777: ST_TO_ADDR
// vc_engine = 1 ;
3778: LD_ADDR_OWVAR 39
3782: PUSH
3783: LD_INT 1
3785: ST_TO_ADDR
// vc_control = 2 ;
3786: LD_ADDR_OWVAR 38
3790: PUSH
3791: LD_INT 2
3793: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3794: LD_ADDR_OWVAR 40
3798: PUSH
3799: LD_INT 3
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 5
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 3
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: ST_TO_ADDR
// veh = CreateVehicle ;
3825: LD_ADDR_VAR 0 5
3829: PUSH
3830: CALL_OW 45
3834: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3835: LD_VAR 0 5
3839: PPUSH
3840: LD_INT 4
3842: PPUSH
3843: CALL_OW 233
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3847: LD_VAR 0 5
3851: PPUSH
3852: LD_EXP 37
3856: PPUSH
3857: CALL_OW 250
3861: PPUSH
3862: LD_EXP 37
3866: PPUSH
3867: CALL_OW 251
3871: PPUSH
3872: LD_INT 7
3874: PPUSH
3875: LD_INT 0
3877: PPUSH
3878: CALL_OW 50
// end ;
3882: GO 3731
3884: POP
3885: POP
// end ; end ;
3886: LD_VAR 0 1
3890: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3891: LD_INT 0
3893: PPUSH
3894: PPUSH
3895: PPUSH
3896: PPUSH
// uc_side = 1 ;
3897: LD_ADDR_OWVAR 20
3901: PUSH
3902: LD_INT 1
3904: ST_TO_ADDR
// uc_nation = 1 ;
3905: LD_ADDR_OWVAR 21
3909: PUSH
3910: LD_INT 1
3912: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3913: LD_ADDR_EXP 14
3917: PUSH
3918: LD_STRING 06c_Denis
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: CALL 6993 0 2
3928: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3929: LD_EXP 14
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: LD_INT 0
3939: PPUSH
3940: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3944: LD_ADDR_EXP 15
3948: PUSH
3949: LD_STRING 06c_Joan
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: CALL 6993 0 2
3959: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3960: LD_EXP 15
3964: PPUSH
3965: LD_INT 4
3967: PPUSH
3968: LD_INT 0
3970: PPUSH
3971: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3975: LD_STRING GladstoneIn07
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 30
3985: NOT
3986: IFFALSE 4054
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3988: LD_ADDR_EXP 8
3992: PUSH
3993: LD_STRING 06c_Gladstone
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: CALL 6993 0 2
4003: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4004: LD_EXP 8
4008: NOT
4009: PUSH
4010: LD_STRING GladstoneStayInDelta
4012: PPUSH
4013: LD_INT 0
4015: PPUSH
4016: CALL_OW 30
4020: AND
4021: IFFALSE 4039
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
4023: LD_ADDR_EXP 8
4027: PUSH
4028: LD_STRING 05_Gladstone
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: CALL 6993 0 2
4038: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4039: LD_EXP 8
4043: PPUSH
4044: LD_INT 4
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4054: LD_STRING LisaStayInDelta
4056: PPUSH
4057: LD_INT 0
4059: PPUSH
4060: CALL_OW 30
4064: IFFALSE 4097
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
4066: LD_ADDR_EXP 6
4070: PUSH
4071: LD_STRING 05_Lisa
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL 6993 0 2
4081: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4082: LD_EXP 6
4086: PPUSH
4087: LD_INT 4
4089: PPUSH
4090: LD_INT 0
4092: PPUSH
4093: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4097: LD_STRING BobbyStayInDelta
4099: PPUSH
4100: LD_INT 0
4102: PPUSH
4103: CALL_OW 30
4107: IFFALSE 4140
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4109: LD_ADDR_EXP 4
4113: PUSH
4114: LD_STRING 05_Bobby
4116: PPUSH
4117: LD_INT 1
4119: PPUSH
4120: CALL 6993 0 2
4124: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4125: LD_EXP 4
4129: PPUSH
4130: LD_INT 4
4132: PPUSH
4133: LD_INT 0
4135: PPUSH
4136: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4140: LD_STRING CyrusStayInDelta
4142: PPUSH
4143: LD_INT 0
4145: PPUSH
4146: CALL_OW 30
4150: IFFALSE 4183
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4152: LD_ADDR_EXP 5
4156: PUSH
4157: LD_STRING 05_Cyrus
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: CALL 6993 0 2
4167: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4168: LD_EXP 5
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4183: LD_STRING BrownStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4226
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4195: LD_ADDR_EXP 2
4199: PUSH
4200: LD_STRING 05_Brown
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL 6993 0 2
4210: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4211: LD_EXP 2
4215: PPUSH
4216: LD_INT 4
4218: PPUSH
4219: LD_INT 0
4221: PPUSH
4222: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4226: LD_STRING DonaldsonStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: IFFALSE 4269
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4238: LD_ADDR_EXP 3
4242: PUSH
4243: LD_STRING 05_Donaldson
4245: PPUSH
4246: LD_INT 1
4248: PPUSH
4249: CALL 6993 0 2
4253: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4254: LD_EXP 3
4258: PPUSH
4259: LD_INT 4
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4269: LD_ADDR_VAR 0 4
4273: PUSH
4274: LD_STRING OthersStayInDelta
4276: PPUSH
4277: CALL_OW 31
4281: ST_TO_ADDR
// if other > 2 then
4282: LD_VAR 0 4
4286: PUSH
4287: LD_INT 2
4289: GREATER
4290: IFFALSE 4335
// begin for j = 1 to 2 do
4292: LD_ADDR_VAR 0 3
4296: PUSH
4297: DOUBLE
4298: LD_INT 1
4300: DEC
4301: ST_TO_ADDR
4302: LD_INT 2
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4331
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4308: LD_VAR 0 4
4312: PUSH
4313: LD_VAR 0 3
4317: ARRAY
4318: PPUSH
4319: LD_INT 4
4321: PPUSH
4322: LD_INT 0
4324: PPUSH
4325: CALL_OW 49
4329: GO 4305
4331: POP
4332: POP
// end else
4333: GO 4378
// begin for j = 1 to other do
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: DOUBLE
4341: LD_INT 1
4343: DEC
4344: ST_TO_ADDR
4345: LD_VAR 0 4
4349: PUSH
4350: FOR_TO
4351: IFFALSE 4376
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4353: LD_VAR 0 4
4357: PUSH
4358: LD_VAR 0 3
4362: ARRAY
4363: PPUSH
4364: LD_INT 4
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL_OW 49
4374: GO 4350
4376: POP
4377: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4378: LD_ADDR_VAR 0 4
4382: PUSH
4383: LD_STRING 06_other_apemans
4385: PPUSH
4386: CALL_OW 31
4390: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4391: LD_VAR 0 4
4395: PUSH
4396: LD_INT 5
4398: PUSH
4399: LD_INT 4
4401: PUSH
4402: LD_INT 3
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: PUSH
4410: LD_OWVAR 67
4414: ARRAY
4415: GREATEREQUAL
4416: IFFALSE 4445
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4418: LD_ADDR_VAR 0 3
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: LD_INT 4
4428: PUSH
4429: LD_INT 3
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_OWVAR 67
4441: ARRAY
4442: ST_TO_ADDR
4443: GO 4455
// j := other ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_VAR 0 4
4454: ST_TO_ADDR
// for i = 1 to j do
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4496
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4473: LD_VAR 0 4
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: PPUSH
4484: LD_INT 4
4486: PPUSH
4487: LD_INT 0
4489: PPUSH
4490: CALL_OW 49
4494: GO 4470
4496: POP
4497: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4498: LD_INT 4
4500: PPUSH
4501: LD_INT 22
4503: PUSH
4504: LD_INT 1
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: PUSH
4511: LD_INT 21
4513: PUSH
4514: LD_INT 1
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 70
4529: PPUSH
4530: LD_INT 53
4532: PPUSH
4533: LD_INT 19
4535: PPUSH
4536: CALL_OW 111
// firstAttack = 1 ;
4540: LD_ADDR_EXP 33
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// end ;
4548: LD_VAR 0 1
4552: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4564: LD_ADDR_VAR 0 8
4568: PUSH
4569: LD_STRING 07_vehicles
4571: PPUSH
4572: EMPTY
4573: PPUSH
4574: CALL_OW 30
4578: ST_TO_ADDR
// uc_side := 1 ;
4579: LD_ADDR_OWVAR 20
4583: PUSH
4584: LD_INT 1
4586: ST_TO_ADDR
// uc_nation := 1 ;
4587: LD_ADDR_OWVAR 21
4591: PUSH
4592: LD_INT 1
4594: ST_TO_ADDR
// if vehicles then
4595: LD_VAR 0 8
4599: IFFALSE 4758
// begin k := 1 ;
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_INT 1
4608: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4609: LD_ADDR_VAR 0 2
4613: PUSH
4614: DOUBLE
4615: LD_INT 1
4617: DEC
4618: ST_TO_ADDR
4619: LD_VAR 0 8
4623: PUSH
4624: LD_INT 4
4626: DIV
4627: PUSH
4628: FOR_TO
4629: IFFALSE 4756
// begin vc_chassis = vehicles [ k ] ;
4631: LD_ADDR_OWVAR 37
4635: PUSH
4636: LD_VAR 0 8
4640: PUSH
4641: LD_VAR 0 3
4645: ARRAY
4646: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4647: LD_ADDR_OWVAR 39
4651: PUSH
4652: LD_VAR 0 8
4656: PUSH
4657: LD_VAR 0 3
4661: PUSH
4662: LD_INT 1
4664: PLUS
4665: ARRAY
4666: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4667: LD_ADDR_OWVAR 38
4671: PUSH
4672: LD_VAR 0 8
4676: PUSH
4677: LD_VAR 0 3
4681: PUSH
4682: LD_INT 2
4684: PLUS
4685: ARRAY
4686: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4687: LD_ADDR_OWVAR 40
4691: PUSH
4692: LD_VAR 0 8
4696: PUSH
4697: LD_VAR 0 3
4701: PUSH
4702: LD_INT 3
4704: PLUS
4705: ARRAY
4706: ST_TO_ADDR
// k := k + 4 ;
4707: LD_ADDR_VAR 0 3
4711: PUSH
4712: LD_VAR 0 3
4716: PUSH
4717: LD_INT 4
4719: PLUS
4720: ST_TO_ADDR
// veh := CreateVehicle ;
4721: LD_ADDR_VAR 0 9
4725: PUSH
4726: CALL_OW 45
4730: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4731: LD_ADDR_VAR 0 7
4735: PUSH
4736: LD_VAR 0 7
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: LD_VAR 0 9
4748: PPUSH
4749: CALL_OW 2
4753: ST_TO_ADDR
// end ;
4754: GO 4628
4756: POP
4757: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4758: LD_ADDR_EXP 1
4762: PUSH
4763: LD_EXP 43
4767: PUSH
4768: LD_STRING JMM
4770: STR
4771: PPUSH
4772: LD_INT 1
4774: PPUSH
4775: CALL 6993 0 2
4779: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4780: LD_EXP 12
4784: PUSH
4785: LD_INT 1
4787: EQUAL
4788: PUSH
4789: LD_EXP 12
4793: PUSH
4794: LD_INT 3
4796: EQUAL
4797: OR
4798: PUSH
4799: LD_EXP 2
4803: NOT
4804: AND
4805: IFFALSE 4858
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4807: LD_ADDR_EXP 2
4811: PUSH
4812: LD_EXP 43
4816: PUSH
4817: LD_STRING Brown
4819: STR
4820: PPUSH
4821: LD_INT 1
4823: PPUSH
4824: CALL 6993 0 2
4828: ST_TO_ADDR
// if Brown then
4829: LD_EXP 2
4833: IFFALSE 4858
// tmp := Insert ( tmp , 1 , Brown ) ;
4835: LD_ADDR_VAR 0 6
4839: PUSH
4840: LD_VAR 0 6
4844: PPUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_EXP 2
4852: PPUSH
4853: CALL_OW 2
4857: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4858: LD_EXP 12
4862: PUSH
4863: LD_INT 2
4865: EQUAL
4866: PUSH
4867: LD_EXP 12
4871: PUSH
4872: LD_INT 3
4874: EQUAL
4875: OR
4876: PUSH
4877: LD_EXP 3
4881: NOT
4882: AND
4883: IFFALSE 4936
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4885: LD_ADDR_EXP 3
4889: PUSH
4890: LD_EXP 43
4894: PUSH
4895: LD_STRING Donaldson
4897: STR
4898: PPUSH
4899: LD_INT 1
4901: PPUSH
4902: CALL 6993 0 2
4906: ST_TO_ADDR
// if Donaldson then
4907: LD_EXP 3
4911: IFFALSE 4936
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4913: LD_ADDR_VAR 0 6
4917: PUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 1
4925: PPUSH
4926: LD_EXP 3
4930: PPUSH
4931: CALL_OW 2
4935: ST_TO_ADDR
// end ; if not Bobby then
4936: LD_EXP 4
4940: NOT
4941: IFFALSE 4994
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4943: LD_ADDR_EXP 4
4947: PUSH
4948: LD_EXP 43
4952: PUSH
4953: LD_STRING Bobby
4955: STR
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL 6993 0 2
4964: ST_TO_ADDR
// if Bobby then
4965: LD_EXP 4
4969: IFFALSE 4994
// tmp := Insert ( tmp , 1 , Bobby ) ;
4971: LD_ADDR_VAR 0 6
4975: PUSH
4976: LD_VAR 0 6
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: LD_EXP 4
4988: PPUSH
4989: CALL_OW 2
4993: ST_TO_ADDR
// end ; if not Cyrus then
4994: LD_EXP 5
4998: NOT
4999: IFFALSE 5052
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
5001: LD_ADDR_EXP 5
5005: PUSH
5006: LD_EXP 43
5010: PUSH
5011: LD_STRING Cyrus
5013: STR
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: CALL 6993 0 2
5022: ST_TO_ADDR
// if Cyrus then
5023: LD_EXP 5
5027: IFFALSE 5052
// tmp := Insert ( tmp , 1 , Cyrus ) ;
5029: LD_ADDR_VAR 0 6
5033: PUSH
5034: LD_VAR 0 6
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: LD_EXP 5
5046: PPUSH
5047: CALL_OW 2
5051: ST_TO_ADDR
// end ; if not Lisa then
5052: LD_EXP 6
5056: NOT
5057: IFFALSE 5110
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5059: LD_ADDR_EXP 6
5063: PUSH
5064: LD_EXP 43
5068: PUSH
5069: LD_STRING Lisa
5071: STR
5072: PPUSH
5073: LD_INT 1
5075: PPUSH
5076: CALL 6993 0 2
5080: ST_TO_ADDR
// if Lisa then
5081: LD_EXP 6
5085: IFFALSE 5110
// tmp := Insert ( tmp , 1 , Lisa ) ;
5087: LD_ADDR_VAR 0 6
5091: PUSH
5092: LD_VAR 0 6
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_EXP 6
5104: PPUSH
5105: CALL_OW 2
5109: ST_TO_ADDR
// end ; if not Frank then
5110: LD_EXP 7
5114: NOT
5115: IFFALSE 5168
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5117: LD_ADDR_EXP 7
5121: PUSH
5122: LD_EXP 43
5126: PUSH
5127: LD_STRING Frank
5129: STR
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL 6993 0 2
5138: ST_TO_ADDR
// if Frank then
5139: LD_EXP 7
5143: IFFALSE 5168
// tmp := Insert ( tmp , 1 , Frank ) ;
5145: LD_ADDR_VAR 0 6
5149: PUSH
5150: LD_VAR 0 6
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: LD_EXP 7
5162: PPUSH
5163: CALL_OW 2
5167: ST_TO_ADDR
// end ; if not Kikuchi then
5168: LD_EXP 9
5172: NOT
5173: IFFALSE 5226
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5175: LD_ADDR_EXP 9
5179: PUSH
5180: LD_EXP 43
5184: PUSH
5185: LD_STRING Kikuchi
5187: STR
5188: PPUSH
5189: LD_INT 1
5191: PPUSH
5192: CALL 6993 0 2
5196: ST_TO_ADDR
// if Kikuchi then
5197: LD_EXP 9
5201: IFFALSE 5226
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5203: LD_ADDR_VAR 0 6
5207: PUSH
5208: LD_VAR 0 6
5212: PPUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_EXP 9
5220: PPUSH
5221: CALL_OW 2
5225: ST_TO_ADDR
// end ; if not Gladstone then
5226: LD_EXP 8
5230: NOT
5231: IFFALSE 5284
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5233: LD_ADDR_EXP 8
5237: PUSH
5238: LD_EXP 43
5242: PUSH
5243: LD_STRING Gladstone
5245: STR
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: CALL 6993 0 2
5254: ST_TO_ADDR
// if Gladstone then
5255: LD_EXP 8
5259: IFFALSE 5284
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_VAR 0 6
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: LD_EXP 8
5278: PPUSH
5279: CALL_OW 2
5283: ST_TO_ADDR
// end ; if not Khatam then
5284: LD_EXP 10
5288: NOT
5289: IFFALSE 5342
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5291: LD_ADDR_EXP 10
5295: PUSH
5296: LD_EXP 43
5300: PUSH
5301: LD_STRING Khatam
5303: STR
5304: PPUSH
5305: LD_INT 1
5307: PPUSH
5308: CALL 6993 0 2
5312: ST_TO_ADDR
// if Khatam then
5313: LD_EXP 10
5317: IFFALSE 5342
// tmp := Insert ( tmp , 1 , Khatam ) ;
5319: LD_ADDR_VAR 0 6
5323: PUSH
5324: LD_VAR 0 6
5328: PPUSH
5329: LD_INT 1
5331: PPUSH
5332: LD_EXP 10
5336: PPUSH
5337: CALL_OW 2
5341: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5342: LD_ADDR_VAR 0 5
5346: PUSH
5347: LD_STRING 07c_others
5349: PPUSH
5350: CALL_OW 31
5354: ST_TO_ADDR
// if others then
5355: LD_VAR 0 5
5359: IFFALSE 5447
// for i in others do
5361: LD_ADDR_VAR 0 2
5365: PUSH
5366: LD_VAR 0 5
5370: PUSH
5371: FOR_IN
5372: IFFALSE 5445
// if GetClass ( i ) = 3 then
5374: LD_VAR 0 2
5378: PPUSH
5379: CALL_OW 257
5383: PUSH
5384: LD_INT 3
5386: EQUAL
5387: IFFALSE 5414
// tmp := Insert ( tmp , 1 , i ) else
5389: LD_ADDR_VAR 0 6
5393: PUSH
5394: LD_VAR 0 6
5398: PPUSH
5399: LD_INT 1
5401: PPUSH
5402: LD_VAR 0 2
5406: PPUSH
5407: CALL_OW 2
5411: ST_TO_ADDR
5412: GO 5443
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5414: LD_ADDR_VAR 0 6
5418: PUSH
5419: LD_VAR 0 6
5423: PPUSH
5424: LD_VAR 0 6
5428: PUSH
5429: LD_INT 1
5431: PLUS
5432: PPUSH
5433: LD_VAR 0 2
5437: PPUSH
5438: CALL_OW 2
5442: ST_TO_ADDR
5443: GO 5371
5445: POP
5446: POP
// wait ( 0 0$1 ) ;
5447: LD_INT 35
5449: PPUSH
5450: CALL_OW 67
// for i in tmp do
5454: LD_ADDR_VAR 0 2
5458: PUSH
5459: LD_VAR 0 6
5463: PUSH
5464: FOR_IN
5465: IFFALSE 5597
// begin SetDir ( i , 3 ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: LD_INT 3
5474: PPUSH
5475: CALL_OW 233
// if tmp_vehs then
5479: LD_VAR 0 7
5483: IFFALSE 5558
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5485: LD_VAR 0 7
5489: PUSH
5490: LD_INT 1
5492: ARRAY
5493: PPUSH
5494: LD_INT 3
5496: PPUSH
5497: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5501: LD_VAR 0 7
5505: PUSH
5506: LD_INT 1
5508: ARRAY
5509: PPUSH
5510: LD_INT 4
5512: PPUSH
5513: LD_INT 0
5515: PPUSH
5516: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_VAR 0 7
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5538: LD_ADDR_VAR 0 7
5542: PUSH
5543: LD_VAR 0 7
5547: PPUSH
5548: LD_INT 1
5550: PPUSH
5551: CALL_OW 3
5555: ST_TO_ADDR
// end else
5556: GO 5573
// PlaceUnitArea ( i , GammaSupport , false ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 4
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 77
5580: PPUSH
5581: LD_INT 16
5583: PPUSH
5584: CALL_OW 111
// wait ( 0 0$2 ) ;
5588: LD_INT 70
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5464
5597: POP
5598: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5599: LD_EXP 1
5603: PPUSH
5604: LD_INT 4
5606: PPUSH
5607: LD_INT 0
5609: PPUSH
5610: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5614: LD_EXP 1
5618: PPUSH
5619: LD_INT 77
5621: PPUSH
5622: LD_INT 16
5624: PPUSH
5625: CALL_OW 111
// end ;
5629: LD_VAR 0 1
5633: RET
// export function PrepareSikorsky ; begin
5634: LD_INT 0
5636: PPUSH
// uc_side = 4 ;
5637: LD_ADDR_OWVAR 20
5641: PUSH
5642: LD_INT 4
5644: ST_TO_ADDR
// uc_nation = 1 ;
5645: LD_ADDR_OWVAR 21
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5653: LD_ADDR_EXP 16
5657: PUSH
5658: LD_STRING Sikorski
5660: PPUSH
5661: LD_INT 0
5663: PPUSH
5664: CALL 6993 0 2
5668: ST_TO_ADDR
// vc_engine = 1 ;
5669: LD_ADDR_OWVAR 39
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// vc_control = 1 ;
5677: LD_ADDR_OWVAR 38
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5685: LD_ADDR_OWVAR 40
5689: PUSH
5690: LD_INT 5
5692: PUSH
5693: LD_INT 3
5695: PUSH
5696: LD_INT 4
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_OWVAR 67
5708: ARRAY
5709: ST_TO_ADDR
// vc_chassis = 4 ;
5710: LD_ADDR_OWVAR 37
5714: PUSH
5715: LD_INT 4
5717: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5718: LD_ADDR_EXP 17
5722: PUSH
5723: CALL_OW 45
5727: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5728: LD_EXP 17
5732: PPUSH
5733: LD_INT 9
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5743: LD_EXP 16
5747: PPUSH
5748: LD_EXP 17
5752: PPUSH
5753: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5757: LD_EXP 17
5761: PPUSH
5762: LD_INT 5
5764: PPUSH
5765: CALL_OW 113
// end ;
5769: LD_VAR 0 1
5773: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5780: LD_ADDR_VAR 0 2
5784: PUSH
5785: DOUBLE
5786: LD_INT 1
5788: DEC
5789: ST_TO_ADDR
5790: LD_INT 8
5792: PUSH
5793: LD_INT 7
5795: PUSH
5796: LD_INT 7
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: PUSH
5804: LD_OWVAR 67
5808: ARRAY
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5908
// begin uc_side = 4 ;
5813: LD_ADDR_OWVAR 20
5817: PUSH
5818: LD_INT 4
5820: ST_TO_ADDR
// uc_nation = 1 ;
5821: LD_ADDR_OWVAR 21
5825: PUSH
5826: LD_INT 1
5828: ST_TO_ADDR
// hc_name =  ;
5829: LD_ADDR_OWVAR 26
5833: PUSH
5834: LD_STRING 
5836: ST_TO_ADDR
// hc_gallery =  ;
5837: LD_ADDR_OWVAR 33
5841: PUSH
5842: LD_STRING 
5844: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5845: LD_INT 0
5847: PPUSH
5848: LD_INT 1
5850: PPUSH
5851: LD_INT 5
5853: PPUSH
5854: LD_INT 8
5856: PPUSH
5857: CALL_OW 12
5861: PPUSH
5862: CALL_OW 380
// un = CreateHuman ;
5866: LD_ADDR_VAR 0 3
5870: PUSH
5871: CALL_OW 44
5875: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5876: LD_VAR 0 3
5880: PPUSH
5881: LD_INT 9
5883: PPUSH
5884: LD_INT 0
5886: PPUSH
5887: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5891: LD_VAR 0 3
5895: PPUSH
5896: LD_INT 53
5898: PPUSH
5899: LD_INT 23
5901: PPUSH
5902: CALL_OW 111
// end ;
5906: GO 5810
5908: POP
5909: POP
// for i = 1 to 3 do
5910: LD_ADDR_VAR 0 2
5914: PUSH
5915: DOUBLE
5916: LD_INT 1
5918: DEC
5919: ST_TO_ADDR
5920: LD_INT 3
5922: PUSH
5923: FOR_TO
5924: IFFALSE 6021
// begin uc_side = 4 ;
5926: LD_ADDR_OWVAR 20
5930: PUSH
5931: LD_INT 4
5933: ST_TO_ADDR
// uc_nation = 1 ;
5934: LD_ADDR_OWVAR 21
5938: PUSH
5939: LD_INT 1
5941: ST_TO_ADDR
// hc_name =  ;
5942: LD_ADDR_OWVAR 26
5946: PUSH
5947: LD_STRING 
5949: ST_TO_ADDR
// hc_gallery =  ;
5950: LD_ADDR_OWVAR 33
5954: PUSH
5955: LD_STRING 
5957: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5958: LD_INT 0
5960: PPUSH
5961: LD_INT 4
5963: PPUSH
5964: LD_INT 5
5966: PPUSH
5967: LD_INT 8
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: CALL_OW 380
// un = CreateHuman ;
5979: LD_ADDR_VAR 0 3
5983: PUSH
5984: CALL_OW 44
5988: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5989: LD_VAR 0 3
5993: PPUSH
5994: LD_INT 9
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6004: LD_VAR 0 3
6008: PPUSH
6009: LD_INT 53
6011: PPUSH
6012: LD_INT 23
6014: PPUSH
6015: CALL_OW 111
// end ;
6019: GO 5923
6021: POP
6022: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6023: LD_ADDR_VAR 0 2
6027: PUSH
6028: DOUBLE
6029: LD_INT 1
6031: DEC
6032: ST_TO_ADDR
6033: LD_INT 9
6035: PUSH
6036: LD_INT 8
6038: PUSH
6039: LD_INT 7
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: LD_OWVAR 67
6051: ARRAY
6052: PUSH
6053: FOR_TO
6054: IFFALSE 6250
// begin uc_side = 4 ;
6056: LD_ADDR_OWVAR 20
6060: PUSH
6061: LD_INT 4
6063: ST_TO_ADDR
// uc_nation = 1 ;
6064: LD_ADDR_OWVAR 21
6068: PUSH
6069: LD_INT 1
6071: ST_TO_ADDR
// vc_engine = 1 ;
6072: LD_ADDR_OWVAR 39
6076: PUSH
6077: LD_INT 1
6079: ST_TO_ADDR
// vc_control = 1 ;
6080: LD_ADDR_OWVAR 38
6084: PUSH
6085: LD_INT 1
6087: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6088: LD_ADDR_OWVAR 40
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: LD_INT 4
6098: PUSH
6099: LD_INT 5
6101: PUSH
6102: LD_INT 6
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 1
6113: PPUSH
6114: LD_INT 4
6116: PPUSH
6117: CALL_OW 12
6121: ARRAY
6122: ST_TO_ADDR
// vc_chassis = 4 ;
6123: LD_ADDR_OWVAR 37
6127: PUSH
6128: LD_INT 4
6130: ST_TO_ADDR
// veh = CreateVehicle ;
6131: LD_ADDR_VAR 0 4
6135: PUSH
6136: CALL_OW 45
6140: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6141: LD_VAR 0 4
6145: PPUSH
6146: LD_INT 9
6148: PPUSH
6149: LD_INT 0
6151: PPUSH
6152: CALL_OW 49
// hc_name =  ;
6156: LD_ADDR_OWVAR 26
6160: PUSH
6161: LD_STRING 
6163: ST_TO_ADDR
// hc_gallery =  ;
6164: LD_ADDR_OWVAR 33
6168: PUSH
6169: LD_STRING 
6171: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6172: LD_INT 0
6174: PPUSH
6175: LD_INT 3
6177: PPUSH
6178: LD_INT 5
6180: PPUSH
6181: LD_INT 8
6183: PPUSH
6184: CALL_OW 12
6188: PPUSH
6189: CALL_OW 380
// un = CreateHuman ;
6193: LD_ADDR_VAR 0 3
6197: PUSH
6198: CALL_OW 44
6202: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6203: LD_VAR 0 3
6207: PPUSH
6208: LD_VAR 0 4
6212: PPUSH
6213: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6217: LD_VAR 0 4
6221: PUSH
6222: LD_VAR 0 3
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PPUSH
6231: LD_INT 53
6233: PPUSH
6234: LD_INT 23
6236: PPUSH
6237: CALL_OW 111
// wait ( 0 0$5 ) ;
6241: LD_INT 175
6243: PPUSH
6244: CALL_OW 67
// end ;
6248: GO 6053
6250: POP
6251: POP
// end ; end_of_file
6252: LD_VAR 0 1
6256: RET
// export function PrepareRussianCommander ; begin
6257: LD_INT 0
6259: PPUSH
// uc_side = 3 ;
6260: LD_ADDR_OWVAR 20
6264: PUSH
6265: LD_INT 3
6267: ST_TO_ADDR
// uc_nation = 3 ;
6268: LD_ADDR_OWVAR 21
6272: PUSH
6273: LD_INT 3
6275: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6276: LD_ADDR_EXP 24
6280: PUSH
6281: LD_STRING Borodin
6283: PPUSH
6284: CALL_OW 25
6288: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6289: LD_EXP 24
6293: PPUSH
6294: LD_INT 25
6296: PPUSH
6297: LD_INT 0
6299: PPUSH
6300: CALL_OW 49
// end ;
6304: LD_VAR 0 1
6308: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6309: LD_INT 0
6311: PPUSH
6312: PPUSH
6313: PPUSH
6314: PPUSH
// for i = 1 to 10 do
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: DOUBLE
6321: LD_INT 1
6323: DEC
6324: ST_TO_ADDR
6325: LD_INT 10
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6403
// begin uc_side = 6 ;
6331: LD_ADDR_OWVAR 20
6335: PUSH
6336: LD_INT 6
6338: ST_TO_ADDR
// uc_nation = 3 ;
6339: LD_ADDR_OWVAR 21
6343: PUSH
6344: LD_INT 3
6346: ST_TO_ADDR
// hc_gallery =  ;
6347: LD_ADDR_OWVAR 33
6351: PUSH
6352: LD_STRING 
6354: ST_TO_ADDR
// hc_name =  ;
6355: LD_ADDR_OWVAR 26
6359: PUSH
6360: LD_STRING 
6362: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6363: LD_INT 0
6365: PPUSH
6366: LD_INT 1
6368: PPUSH
6369: LD_INT 3
6371: PPUSH
6372: CALL_OW 380
// un = CreateHuman ;
6376: LD_ADDR_VAR 0 3
6380: PUSH
6381: CALL_OW 44
6385: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6386: LD_VAR 0 3
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: CALL_OW 49
// end ;
6401: GO 6328
6403: POP
6404: POP
// for i = 1 to 3 do
6405: LD_ADDR_VAR 0 2
6409: PUSH
6410: DOUBLE
6411: LD_INT 1
6413: DEC
6414: ST_TO_ADDR
6415: LD_INT 3
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6568
// begin uc_side = 6 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 6
6428: ST_TO_ADDR
// uc_nation = 3 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 3
6436: ST_TO_ADDR
// vc_engine = 1 ;
6437: LD_ADDR_OWVAR 39
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// vc_control = 1 ;
6445: LD_ADDR_OWVAR 38
6449: PUSH
6450: LD_INT 1
6452: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6453: LD_ADDR_OWVAR 40
6457: PUSH
6458: LD_INT 43
6460: PUSH
6461: LD_INT 44
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 1
6470: PPUSH
6471: LD_INT 2
6473: PPUSH
6474: CALL_OW 12
6478: ARRAY
6479: ST_TO_ADDR
// vc_chassis = 22 ;
6480: LD_ADDR_OWVAR 37
6484: PUSH
6485: LD_INT 22
6487: ST_TO_ADDR
// veh = CreateVehicle ;
6488: LD_ADDR_VAR 0 4
6492: PUSH
6493: CALL_OW 45
6497: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6498: LD_VAR 0 4
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: LD_INT 0
6508: PPUSH
6509: CALL_OW 49
// hc_gallery =  ;
6513: LD_ADDR_OWVAR 33
6517: PUSH
6518: LD_STRING 
6520: ST_TO_ADDR
// hc_name =  ;
6521: LD_ADDR_OWVAR 26
6525: PUSH
6526: LD_STRING 
6528: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6529: LD_INT 0
6531: PPUSH
6532: LD_INT 3
6534: PPUSH
6535: LD_INT 4
6537: PPUSH
6538: CALL_OW 380
// un = CreateHuman ;
6542: LD_ADDR_VAR 0 3
6546: PUSH
6547: CALL_OW 44
6551: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_VAR 0 4
6561: PPUSH
6562: CALL_OW 52
// end ;
6566: GO 6418
6568: POP
6569: POP
// end ;
6570: LD_VAR 0 1
6574: RET
// export function PrepareRussians ; var i , un ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
6579: PPUSH
// for i = 1 to 8 do
6580: LD_ADDR_VAR 0 2
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 8
6592: PUSH
6593: FOR_TO
6594: IFFALSE 6680
// begin uc_side = 3 ;
6596: LD_ADDR_OWVAR 20
6600: PUSH
6601: LD_INT 3
6603: ST_TO_ADDR
// uc_nation = 3 ;
6604: LD_ADDR_OWVAR 21
6608: PUSH
6609: LD_INT 3
6611: ST_TO_ADDR
// hc_gallery =  ;
6612: LD_ADDR_OWVAR 33
6616: PUSH
6617: LD_STRING 
6619: ST_TO_ADDR
// hc_name =  ;
6620: LD_ADDR_OWVAR 26
6624: PUSH
6625: LD_STRING 
6627: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6628: LD_INT 0
6630: PPUSH
6631: LD_INT 1
6633: PPUSH
6634: LD_EXP 25
6638: PPUSH
6639: LD_EXP 26
6643: PPUSH
6644: CALL_OW 12
6648: PPUSH
6649: CALL_OW 380
// un = CreateHuman ;
6653: LD_ADDR_VAR 0 3
6657: PUSH
6658: CALL_OW 44
6662: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_INT 3
6670: PPUSH
6671: LD_INT 0
6673: PPUSH
6674: CALL_OW 49
// end ;
6678: GO 6593
6680: POP
6681: POP
// for i = 1 to 4 do
6682: LD_ADDR_VAR 0 2
6686: PUSH
6687: DOUBLE
6688: LD_INT 1
6690: DEC
6691: ST_TO_ADDR
6692: LD_INT 4
6694: PUSH
6695: FOR_TO
6696: IFFALSE 6782
// begin uc_side = 3 ;
6698: LD_ADDR_OWVAR 20
6702: PUSH
6703: LD_INT 3
6705: ST_TO_ADDR
// uc_nation = 3 ;
6706: LD_ADDR_OWVAR 21
6710: PUSH
6711: LD_INT 3
6713: ST_TO_ADDR
// hc_gallery =  ;
6714: LD_ADDR_OWVAR 33
6718: PUSH
6719: LD_STRING 
6721: ST_TO_ADDR
// hc_name =  ;
6722: LD_ADDR_OWVAR 26
6726: PUSH
6727: LD_STRING 
6729: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6730: LD_INT 0
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: LD_EXP 25
6740: PPUSH
6741: LD_EXP 26
6745: PPUSH
6746: CALL_OW 12
6750: PPUSH
6751: CALL_OW 380
// un = CreateHuman ;
6755: LD_ADDR_VAR 0 3
6759: PUSH
6760: CALL_OW 44
6764: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6765: LD_VAR 0 3
6769: PPUSH
6770: LD_INT 3
6772: PPUSH
6773: LD_INT 0
6775: PPUSH
6776: CALL_OW 49
// end ;
6780: GO 6695
6782: POP
6783: POP
// for i = 1 to 3 do
6784: LD_ADDR_VAR 0 2
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_INT 3
6796: PUSH
6797: FOR_TO
6798: IFFALSE 6884
// begin uc_side = 3 ;
6800: LD_ADDR_OWVAR 20
6804: PUSH
6805: LD_INT 3
6807: ST_TO_ADDR
// uc_nation = 3 ;
6808: LD_ADDR_OWVAR 21
6812: PUSH
6813: LD_INT 3
6815: ST_TO_ADDR
// hc_gallery =  ;
6816: LD_ADDR_OWVAR 33
6820: PUSH
6821: LD_STRING 
6823: ST_TO_ADDR
// hc_name =  ;
6824: LD_ADDR_OWVAR 26
6828: PUSH
6829: LD_STRING 
6831: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6832: LD_INT 0
6834: PPUSH
6835: LD_INT 3
6837: PPUSH
6838: LD_EXP 25
6842: PPUSH
6843: LD_EXP 26
6847: PPUSH
6848: CALL_OW 12
6852: PPUSH
6853: CALL_OW 380
// un = CreateHuman ;
6857: LD_ADDR_VAR 0 3
6861: PUSH
6862: CALL_OW 44
6866: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6867: LD_VAR 0 3
6871: PPUSH
6872: LD_INT 3
6874: PPUSH
6875: LD_INT 0
6877: PPUSH
6878: CALL_OW 49
// end ;
6882: GO 6797
6884: POP
6885: POP
// for i = 1 to 2 do
6886: LD_ADDR_VAR 0 2
6890: PUSH
6891: DOUBLE
6892: LD_INT 1
6894: DEC
6895: ST_TO_ADDR
6896: LD_INT 2
6898: PUSH
6899: FOR_TO
6900: IFFALSE 6986
// begin uc_side = 3 ;
6902: LD_ADDR_OWVAR 20
6906: PUSH
6907: LD_INT 3
6909: ST_TO_ADDR
// uc_nation = 3 ;
6910: LD_ADDR_OWVAR 21
6914: PUSH
6915: LD_INT 3
6917: ST_TO_ADDR
// hc_gallery =  ;
6918: LD_ADDR_OWVAR 33
6922: PUSH
6923: LD_STRING 
6925: ST_TO_ADDR
// hc_name =  ;
6926: LD_ADDR_OWVAR 26
6930: PUSH
6931: LD_STRING 
6933: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6934: LD_INT 0
6936: PPUSH
6937: LD_INT 4
6939: PPUSH
6940: LD_EXP 25
6944: PPUSH
6945: LD_EXP 26
6949: PPUSH
6950: CALL_OW 12
6954: PPUSH
6955: CALL_OW 380
// un = CreateHuman ;
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: CALL_OW 44
6968: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6969: LD_VAR 0 3
6973: PPUSH
6974: LD_INT 3
6976: PPUSH
6977: LD_INT 0
6979: PPUSH
6980: CALL_OW 49
// end ;
6984: GO 6899
6986: POP
6987: POP
// end ; end_of_file
6988: LD_VAR 0 1
6992: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6993: LD_INT 0
6995: PPUSH
6996: PPUSH
// if exist_mode then
6997: LD_VAR 0 2
7001: IFFALSE 7020
// unit := CreateCharacter ( ident ) else
7003: LD_ADDR_VAR 0 4
7007: PUSH
7008: LD_VAR 0 1
7012: PPUSH
7013: CALL_OW 34
7017: ST_TO_ADDR
7018: GO 7035
// unit := NewCharacter ( ident ) ;
7020: LD_ADDR_VAR 0 4
7024: PUSH
7025: LD_VAR 0 1
7029: PPUSH
7030: CALL_OW 25
7034: ST_TO_ADDR
// result := unit ;
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_VAR 0 4
7044: ST_TO_ADDR
// end ;
7045: LD_VAR 0 3
7049: RET
// export function Video ( mode ) ; begin
7050: LD_INT 0
7052: PPUSH
// ingame_video = mode ;
7053: LD_ADDR_OWVAR 52
7057: PUSH
7058: LD_VAR 0 1
7062: ST_TO_ADDR
// interface_hidden = mode ;
7063: LD_ADDR_OWVAR 54
7067: PUSH
7068: LD_VAR 0 1
7072: ST_TO_ADDR
// end ;
7073: LD_VAR 0 2
7077: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7078: LD_INT 0
7080: PPUSH
7081: PPUSH
7082: PPUSH
// rnd = rand ( 1 , characters ) ;
7083: LD_ADDR_VAR 0 6
7087: PUSH
7088: LD_INT 1
7090: PPUSH
7091: LD_VAR 0 1
7095: PPUSH
7096: CALL_OW 12
7100: ST_TO_ADDR
// for i = 1 to characters do
7101: LD_ADDR_VAR 0 5
7105: PUSH
7106: DOUBLE
7107: LD_INT 1
7109: DEC
7110: ST_TO_ADDR
7111: LD_VAR 0 1
7115: PUSH
7116: FOR_TO
7117: IFFALSE 7227
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7119: LD_VAR 0 5
7123: PUSH
7124: LD_VAR 0 6
7128: EQUAL
7129: PUSH
7130: LD_VAR 0 1
7134: PUSH
7135: LD_VAR 0 5
7139: ARRAY
7140: PPUSH
7141: CALL_OW 258
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: AND
7150: IFFALSE 7172
// Say ( characters [ i ] , dialogMID ) ;
7152: LD_VAR 0 1
7156: PUSH
7157: LD_VAR 0 5
7161: ARRAY
7162: PPUSH
7163: LD_VAR 0 2
7167: PPUSH
7168: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7172: LD_VAR 0 5
7176: PUSH
7177: LD_VAR 0 6
7181: EQUAL
7182: PUSH
7183: LD_VAR 0 1
7187: PUSH
7188: LD_VAR 0 5
7192: ARRAY
7193: PPUSH
7194: CALL_OW 258
7198: PUSH
7199: LD_INT 2
7201: EQUAL
7202: AND
7203: IFFALSE 7225
// Say ( characters [ i ] , dialogFID ) ;
7205: LD_VAR 0 1
7209: PUSH
7210: LD_VAR 0 5
7214: ARRAY
7215: PPUSH
7216: LD_VAR 0 3
7220: PPUSH
7221: CALL_OW 88
// end ;
7225: GO 7116
7227: POP
7228: POP
// end ;
7229: LD_VAR 0 4
7233: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
// uc_side := GetSide ( b ) ;
7239: LD_ADDR_OWVAR 20
7243: PUSH
7244: LD_VAR 0 2
7248: PPUSH
7249: CALL_OW 255
7253: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7254: LD_ADDR_OWVAR 21
7258: PUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: CALL_OW 248
7268: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 1
7274: PPUSH
7275: LD_VAR 0 1
7279: PPUSH
7280: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7284: LD_ADDR_VAR 0 5
7288: PUSH
7289: LD_VAR 0 2
7293: PPUSH
7294: CALL_OW 254
7298: PUSH
7299: LD_INT 3
7301: MINUS
7302: ST_TO_ADDR
// if dir < 0 then
7303: LD_VAR 0 5
7307: PUSH
7308: LD_INT 0
7310: LESS
7311: IFFALSE 7327
// dir := 6 + dir ;
7313: LD_ADDR_VAR 0 5
7317: PUSH
7318: LD_INT 6
7320: PUSH
7321: LD_VAR 0 5
7325: PLUS
7326: ST_TO_ADDR
// un := CreateHuman ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: CALL_OW 44
7336: ST_TO_ADDR
// SetDir ( un , dir ) ;
7337: LD_VAR 0 4
7341: PPUSH
7342: LD_VAR 0 5
7346: PPUSH
7347: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7351: LD_VAR 0 4
7355: PPUSH
7356: LD_VAR 0 2
7360: PPUSH
7361: CALL_OW 52
// end ;
7365: LD_VAR 0 3
7369: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7370: LD_INT 0
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
// for i = 1 to count do
7376: LD_ADDR_VAR 0 8
7380: PUSH
7381: DOUBLE
7382: LD_INT 1
7384: DEC
7385: ST_TO_ADDR
7386: LD_VAR 0 6
7390: PUSH
7391: FOR_TO
7392: IFFALSE 7473
// begin uc_side = side ;
7394: LD_ADDR_OWVAR 20
7398: PUSH
7399: LD_VAR 0 1
7403: ST_TO_ADDR
// uc_nation = nation ;
7404: LD_ADDR_OWVAR 21
7408: PUSH
7409: LD_VAR 0 2
7413: ST_TO_ADDR
// hc_gallery =  ;
7414: LD_ADDR_OWVAR 33
7418: PUSH
7419: LD_STRING 
7421: ST_TO_ADDR
// hc_name =  ;
7422: LD_ADDR_OWVAR 26
7426: PUSH
7427: LD_STRING 
7429: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7430: LD_INT 0
7432: PPUSH
7433: LD_VAR 0 5
7437: PPUSH
7438: LD_VAR 0 4
7442: PPUSH
7443: CALL_OW 380
// un = CreateHuman ;
7447: LD_ADDR_VAR 0 10
7451: PUSH
7452: CALL_OW 44
7456: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7457: LD_VAR 0 10
7461: PPUSH
7462: LD_VAR 0 3
7466: PPUSH
7467: CALL_OW 52
// end ;
7471: GO 7391
7473: POP
7474: POP
// end ;
7475: LD_VAR 0 7
7479: RET
// export function PrepareDifficulty ; begin
7480: LD_INT 0
7482: PPUSH
// if Difficulty = 1 then
7483: LD_OWVAR 67
7487: PUSH
7488: LD_INT 1
7490: EQUAL
7491: IFFALSE 7509
// begin RuSolMinLevel = 4 ;
7493: LD_ADDR_EXP 25
7497: PUSH
7498: LD_INT 4
7500: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7501: LD_ADDR_EXP 26
7505: PUSH
7506: LD_INT 6
7508: ST_TO_ADDR
// end ; if Difficulty = 2 then
7509: LD_OWVAR 67
7513: PUSH
7514: LD_INT 2
7516: EQUAL
7517: IFFALSE 7587
// begin RuSolMinLevel = 5 ;
7519: LD_ADDR_EXP 25
7523: PUSH
7524: LD_INT 5
7526: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7527: LD_ADDR_EXP 26
7531: PUSH
7532: LD_INT 6
7534: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7535: LD_INT 51
7537: PPUSH
7538: LD_INT 3
7540: PPUSH
7541: LD_INT 1
7543: PPUSH
7544: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7548: LD_INT 57
7550: PPUSH
7551: LD_INT 3
7553: PPUSH
7554: LD_INT 1
7556: PPUSH
7557: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7561: LD_INT 57
7563: PPUSH
7564: LD_INT 6
7566: PPUSH
7567: LD_INT 2
7569: PPUSH
7570: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7574: LD_INT 51
7576: PPUSH
7577: LD_INT 6
7579: PPUSH
7580: LD_INT 2
7582: PPUSH
7583: CALL_OW 322
// end ; if Difficulty = 3 then
7587: LD_OWVAR 67
7591: PUSH
7592: LD_INT 3
7594: EQUAL
7595: IFFALSE 7678
// begin RuSolMinLevel = 5 ;
7597: LD_ADDR_EXP 25
7601: PUSH
7602: LD_INT 5
7604: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7605: LD_ADDR_EXP 26
7609: PUSH
7610: LD_INT 6
7612: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7613: LD_INT 57
7615: PPUSH
7616: LD_INT 3
7618: PPUSH
7619: LD_INT 1
7621: PPUSH
7622: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7626: LD_INT 51
7628: PPUSH
7629: LD_INT 3
7631: PPUSH
7632: LD_INT 1
7634: PPUSH
7635: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7639: LD_INT 52
7641: PPUSH
7642: LD_INT 3
7644: PPUSH
7645: LD_INT 1
7647: PPUSH
7648: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7652: LD_INT 57
7654: PPUSH
7655: LD_INT 6
7657: PPUSH
7658: LD_INT 2
7660: PPUSH
7661: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7665: LD_INT 52
7667: PPUSH
7668: LD_INT 6
7670: PPUSH
7671: LD_INT 2
7673: PPUSH
7674: CALL_OW 322
// end ; end ;
7678: LD_VAR 0 1
7682: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7683: LD_INT 0
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7689: LD_ADDR_VAR 0 3
7693: PUSH
7694: LD_INT 22
7696: PUSH
7697: LD_INT 3
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7723: LD_ADDR_VAR 0 4
7727: PUSH
7728: LD_INT 4
7730: PUSH
7731: LD_INT 75
7733: PUSH
7734: LD_INT 79
7736: PUSH
7737: LD_INT 2
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 4
7748: PUSH
7749: LD_INT 113
7751: PUSH
7752: LD_INT 94
7754: PUSH
7755: LD_INT 4
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 29
7766: PUSH
7767: LD_INT 106
7769: PUSH
7770: LD_INT 97
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 26
7784: PUSH
7785: LD_INT 93
7787: PUSH
7788: LD_INT 97
7790: PUSH
7791: LD_INT 5
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: LD_INT 100
7805: PUSH
7806: LD_INT 89
7808: PUSH
7809: LD_INT 3
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 17
7820: PUSH
7821: LD_INT 96
7823: PUSH
7824: LD_INT 89
7826: PUSH
7827: LD_INT 1
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 32
7838: PUSH
7839: LD_INT 78
7841: PUSH
7842: LD_INT 94
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 32
7856: PUSH
7857: LD_INT 95
7859: PUSH
7860: LD_INT 82
7862: PUSH
7863: LD_INT 3
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 32
7874: PUSH
7875: LD_INT 104
7877: PUSH
7878: LD_INT 85
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 32
7892: PUSH
7893: LD_INT 81
7895: PUSH
7896: LD_INT 78
7898: PUSH
7899: LD_INT 2
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 109
7913: PUSH
7914: LD_INT 90
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 33
7928: PUSH
7929: LD_INT 88
7931: PUSH
7932: LD_INT 79
7934: PUSH
7935: LD_INT 3
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 33
7946: PUSH
7947: LD_INT 76
7949: PUSH
7950: LD_INT 87
7952: PUSH
7953: LD_INT 1
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 26
7964: PUSH
7965: LD_INT 96
7967: PUSH
7968: LD_INT 97
7970: PUSH
7971: LD_INT 5
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 85
7985: PUSH
7986: LD_INT 84
7988: PUSH
7989: LD_INT 2
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 6
8000: PUSH
8001: LD_INT 88
8003: PUSH
8004: LD_INT 95
8006: PUSH
8007: LD_INT 0
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 19
8018: PUSH
8019: LD_INT 103
8021: PUSH
8022: LD_INT 89
8024: PUSH
8025: LD_INT 4
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 16
8036: PUSH
8037: LD_INT 97
8039: PUSH
8040: LD_INT 86
8042: PUSH
8043: LD_INT 2
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 24
8054: PUSH
8055: LD_INT 100
8057: PUSH
8058: LD_INT 85
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: ST_TO_ADDR
// for i := 1 to buildingsTab do
8091: LD_ADDR_VAR 0 2
8095: PUSH
8096: DOUBLE
8097: LD_INT 1
8099: DEC
8100: ST_TO_ADDR
8101: LD_VAR 0 4
8105: PUSH
8106: FOR_TO
8107: IFFALSE 8180
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8109: LD_VAR 0 3
8113: PPUSH
8114: LD_VAR 0 4
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: PUSH
8125: LD_INT 1
8127: ARRAY
8128: PPUSH
8129: LD_VAR 0 4
8133: PUSH
8134: LD_VAR 0 2
8138: ARRAY
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 4
8148: PUSH
8149: LD_VAR 0 2
8153: ARRAY
8154: PUSH
8155: LD_INT 3
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 4
8163: PUSH
8164: LD_VAR 0 2
8168: ARRAY
8169: PUSH
8170: LD_INT 4
8172: ARRAY
8173: PPUSH
8174: CALL_OW 205
8178: GO 8106
8180: POP
8181: POP
// end ;
8182: LD_VAR 0 1
8186: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8187: LD_INT 0
8189: PPUSH
8190: PPUSH
// for i in charactersList do
8191: LD_ADDR_VAR 0 4
8195: PUSH
8196: LD_VAR 0 1
8200: PUSH
8201: FOR_IN
8202: IFFALSE 8231
// begin if IsOk ( i ) then
8204: LD_VAR 0 4
8208: PPUSH
8209: CALL_OW 302
8213: IFFALSE 8229
// SaveCharacters ( i , ident ) ;
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 2
8224: PPUSH
8225: CALL_OW 38
// end ;
8229: GO 8201
8231: POP
8232: POP
// end ;
8233: LD_VAR 0 3
8237: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8245: LD_ADDR_VAR 0 8
8249: PUSH
8250: LD_INT 48
8252: PUSH
8253: LD_INT 49
8255: PUSH
8256: LD_INT 50
8258: PUSH
8259: LD_INT 20
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: LD_INT 51
8267: PUSH
8268: LD_INT 52
8270: PUSH
8271: LD_INT 69
8273: PUSH
8274: LD_INT 39
8276: PUSH
8277: LD_INT 34
8279: PUSH
8280: LD_INT 40
8282: PUSH
8283: LD_INT 53
8285: PUSH
8286: LD_INT 71
8288: PUSH
8289: LD_INT 57
8291: PUSH
8292: LD_INT 58
8294: PUSH
8295: LD_INT 44
8297: PUSH
8298: LD_INT 32
8300: PUSH
8301: LD_INT 27
8303: PUSH
8304: LD_INT 23
8306: PUSH
8307: LD_INT 33
8309: PUSH
8310: LD_INT 59
8312: PUSH
8313: LD_INT 54
8315: PUSH
8316: LD_INT 55
8318: PUSH
8319: LD_INT 56
8321: PUSH
8322: LD_INT 63
8324: PUSH
8325: LD_INT 64
8327: PUSH
8328: LD_INT 65
8330: PUSH
8331: LD_INT 30
8333: PUSH
8334: LD_INT 31
8336: PUSH
8337: LD_INT 21
8339: PUSH
8340: LD_INT 22
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8380: LD_ADDR_VAR 0 5
8384: PUSH
8385: DOUBLE
8386: LD_INT 1
8388: DEC
8389: ST_TO_ADDR
8390: LD_VAR 0 8
8394: PUSH
8395: FOR_TO
8396: IFFALSE 8472
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8398: LD_VAR 0 8
8402: PUSH
8403: LD_VAR 0 5
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: CALL_OW 321
8418: PUSH
8419: LD_INT 1
8421: EQUAL
8422: PUSH
8423: LD_VAR 0 8
8427: PUSH
8428: LD_VAR 0 5
8432: ARRAY
8433: PPUSH
8434: LD_VAR 0 3
8438: PPUSH
8439: CALL_OW 482
8443: PUSH
8444: LD_INT 1
8446: EQUAL
8447: AND
8448: IFFALSE 8470
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8450: LD_VAR 0 2
8454: PPUSH
8455: LD_VAR 0 8
8459: PUSH
8460: LD_VAR 0 5
8464: ARRAY
8465: PPUSH
8466: CALL_OW 184
8470: GO 8395
8472: POP
8473: POP
// end ;
8474: LD_VAR 0 4
8478: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8479: LD_INT 0
8481: PPUSH
8482: PPUSH
8483: PPUSH
8484: PPUSH
8485: PPUSH
8486: PPUSH
8487: PPUSH
8488: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8489: LD_ADDR_VAR 0 6
8493: PUSH
8494: LD_VAR 0 2
8498: PPUSH
8499: LD_INT 22
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 56
8513: PUSH
8514: EMPTY
8515: LIST
8516: PUSH
8517: LD_INT 24
8519: PUSH
8520: LD_INT 700
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 3
8529: PUSH
8530: LD_INT 60
8532: PUSH
8533: EMPTY
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 2
8542: PUSH
8543: LD_INT 25
8545: PUSH
8546: LD_INT 1
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 25
8555: PUSH
8556: LD_INT 5
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 25
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PUSH
8573: LD_INT 25
8575: PUSH
8576: LD_INT 9
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: PPUSH
8597: CALL_OW 70
8601: PUSH
8602: LD_EXP 24
8606: PUSH
8607: EMPTY
8608: LIST
8609: DIFF
8610: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8611: LD_ADDR_VAR 0 7
8615: PUSH
8616: LD_VAR 0 2
8620: PPUSH
8621: LD_INT 22
8623: PUSH
8624: LD_VAR 0 1
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: LD_INT 30
8635: PUSH
8636: LD_INT 32
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 58
8645: PUSH
8646: EMPTY
8647: LIST
8648: PUSH
8649: LD_INT 24
8651: PUSH
8652: LD_INT 251
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: PPUSH
8665: CALL_OW 70
8669: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8670: LD_ADDR_VAR 0 9
8674: PUSH
8675: LD_VAR 0 2
8679: PPUSH
8680: LD_INT 22
8682: PUSH
8683: LD_VAR 0 1
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 2
8694: PUSH
8695: LD_INT 30
8697: PUSH
8698: LD_INT 4
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 30
8707: PUSH
8708: LD_INT 5
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 24
8722: PUSH
8723: LD_INT 251
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 70
8739: ST_TO_ADDR
// if barrackList > 0 then
8740: LD_VAR 0 9
8744: PUSH
8745: LD_INT 0
8747: GREATER
8748: IFFALSE 8896
// begin if turretList = 0 then
8750: LD_VAR 0 7
8754: PUSH
8755: LD_INT 0
8757: EQUAL
8758: IFFALSE 8800
// begin if soldiers_list > 0 then
8760: LD_VAR 0 6
8764: PUSH
8765: LD_INT 0
8767: GREATER
8768: IFFALSE 8798
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8770: LD_VAR 0 6
8774: PPUSH
8775: LD_VAR 0 9
8779: PUSH
8780: LD_INT 1
8782: PPUSH
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 12
8792: ARRAY
8793: PPUSH
8794: CALL_OW 120
// end else
8798: GO 8896
// begin for i in barrackList do
8800: LD_ADDR_VAR 0 4
8804: PUSH
8805: LD_VAR 0 9
8809: PUSH
8810: FOR_IN
8811: IFFALSE 8894
// begin insideUnits = UnitsInside ( i ) ;
8813: LD_ADDR_VAR 0 10
8817: PUSH
8818: LD_VAR 0 4
8822: PPUSH
8823: CALL_OW 313
8827: ST_TO_ADDR
// if insideUnits > 0 then
8828: LD_VAR 0 10
8832: PUSH
8833: LD_INT 0
8835: GREATER
8836: IFFALSE 8860
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8838: LD_VAR 0 10
8842: PUSH
8843: LD_INT 1
8845: ARRAY
8846: PPUSH
8847: LD_VAR 0 7
8851: PUSH
8852: LD_INT 1
8854: ARRAY
8855: PPUSH
8856: CALL_OW 120
// if soldiers_list > 0 then
8860: LD_VAR 0 6
8864: PUSH
8865: LD_INT 0
8867: GREATER
8868: IFFALSE 8892
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8870: LD_VAR 0 6
8874: PUSH
8875: LD_INT 1
8877: ARRAY
8878: PPUSH
8879: LD_VAR 0 7
8883: PUSH
8884: LD_INT 1
8886: ARRAY
8887: PPUSH
8888: CALL_OW 120
// end ;
8892: GO 8810
8894: POP
8895: POP
// end ; end ; end ;
8896: LD_VAR 0 3
8900: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8901: LD_INT 0
8903: PPUSH
8904: PPUSH
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
// for i = 1 to vehCount do
8909: LD_ADDR_VAR 0 8
8913: PUSH
8914: DOUBLE
8915: LD_INT 1
8917: DEC
8918: ST_TO_ADDR
8919: LD_VAR 0 6
8923: PUSH
8924: FOR_TO
8925: IFFALSE 9132
// begin uc_side = side ;
8927: LD_ADDR_OWVAR 20
8931: PUSH
8932: LD_VAR 0 1
8936: ST_TO_ADDR
// uc_nation = nation ;
8937: LD_ADDR_OWVAR 21
8941: PUSH
8942: LD_VAR 0 3
8946: ST_TO_ADDR
// vc_Chassis = 22 ;
8947: LD_ADDR_OWVAR 37
8951: PUSH
8952: LD_INT 22
8954: ST_TO_ADDR
// vc_engine = 1 ;
8955: LD_ADDR_OWVAR 39
8959: PUSH
8960: LD_INT 1
8962: ST_TO_ADDR
// vc_control = 1 ;
8963: LD_ADDR_OWVAR 38
8967: PUSH
8968: LD_INT 1
8970: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8971: LD_ADDR_OWVAR 40
8975: PUSH
8976: LD_INT 43
8978: PUSH
8979: LD_INT 44
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 1
8988: PPUSH
8989: LD_INT 2
8991: PPUSH
8992: CALL_OW 12
8996: ARRAY
8997: ST_TO_ADDR
// veh = CreateVehicle ;
8998: LD_ADDR_VAR 0 12
9002: PUSH
9003: CALL_OW 45
9007: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9008: LD_VAR 0 12
9012: PPUSH
9013: LD_VAR 0 2
9017: PPUSH
9018: LD_INT 0
9020: PPUSH
9021: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9025: LD_ADDR_EXP 32
9029: PUSH
9030: LD_EXP 32
9034: PUSH
9035: LD_VAR 0 12
9039: ADD
9040: ST_TO_ADDR
// hc_class = 3 ;
9041: LD_ADDR_OWVAR 28
9045: PUSH
9046: LD_INT 3
9048: ST_TO_ADDR
// hc_name =  ;
9049: LD_ADDR_OWVAR 26
9053: PUSH
9054: LD_STRING 
9056: ST_TO_ADDR
// hc_gallery =  ;
9057: LD_ADDR_OWVAR 33
9061: PUSH
9062: LD_STRING 
9064: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9065: LD_INT 0
9067: PPUSH
9068: LD_INT 3
9070: PPUSH
9071: LD_EXP 25
9075: PPUSH
9076: LD_EXP 26
9080: PPUSH
9081: CALL_OW 12
9085: PPUSH
9086: CALL_OW 380
// un = CreateHuman ;
9090: LD_ADDR_VAR 0 10
9094: PUSH
9095: CALL_OW 44
9099: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9100: LD_VAR 0 10
9104: PPUSH
9105: LD_VAR 0 12
9109: PPUSH
9110: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9114: LD_ADDR_EXP 32
9118: PUSH
9119: LD_EXP 32
9123: PUSH
9124: LD_VAR 0 10
9128: ADD
9129: ST_TO_ADDR
// end ;
9130: GO 8924
9132: POP
9133: POP
// end ;
9134: LD_VAR 0 7
9138: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9139: LD_INT 0
9141: PPUSH
9142: PPUSH
9143: PPUSH
9144: PPUSH
9145: PPUSH
9146: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9147: LD_VAR 0 2
9151: PPUSH
9152: LD_INT 22
9154: PUSH
9155: LD_VAR 0 1
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: PPUSH
9167: CALL_OW 70
9171: PUSH
9172: LD_INT 0
9174: EQUAL
9175: PUSH
9176: LD_EXP 32
9180: AND
9181: IFFALSE 9468
// begin for i in defenders_list do
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: LD_EXP 32
9192: PUSH
9193: FOR_IN
9194: IFFALSE 9466
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9196: LD_VAR 0 4
9200: PPUSH
9201: LD_INT 63
9203: PPUSH
9204: LD_INT 75
9206: PPUSH
9207: CALL_OW 297
9211: PUSH
9212: LD_INT 8
9214: GREATER
9215: PUSH
9216: LD_VAR 0 4
9220: PPUSH
9221: CALL_OW 314
9225: NOT
9226: AND
9227: IFFALSE 9246
// ComMoveXY ( i , 63 , 75 ) else
9229: LD_VAR 0 4
9233: PPUSH
9234: LD_INT 63
9236: PPUSH
9237: LD_INT 75
9239: PPUSH
9240: CALL_OW 111
9244: GO 9464
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9246: LD_VAR 0 4
9250: PPUSH
9251: CALL_OW 257
9255: PUSH
9256: LD_INT 3
9258: EQUAL
9259: PUSH
9260: LD_VAR 0 4
9264: PPUSH
9265: CALL_OW 310
9269: NOT
9270: AND
9271: PUSH
9272: LD_VAR 0 4
9276: PPUSH
9277: CALL_OW 314
9281: NOT
9282: AND
9283: IFFALSE 9336
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9285: LD_VAR 0 4
9289: PPUSH
9290: LD_EXP 32
9294: PPUSH
9295: LD_INT 58
9297: PUSH
9298: EMPTY
9299: LIST
9300: PUSH
9301: LD_INT 24
9303: PUSH
9304: LD_INT 1000
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PPUSH
9315: CALL_OW 72
9319: PPUSH
9320: LD_VAR 0 4
9324: PPUSH
9325: CALL_OW 74
9329: PPUSH
9330: CALL_OW 120
9334: GO 9464
// if GetFuel ( i ) < 100 then
9336: LD_VAR 0 4
9340: PPUSH
9341: CALL_OW 261
9345: PUSH
9346: LD_INT 100
9348: LESS
9349: IFFALSE 9365
// SetFuel ( defenders_list , 100 ) else
9351: LD_EXP 32
9355: PPUSH
9356: LD_INT 100
9358: PPUSH
9359: CALL_OW 240
9363: GO 9464
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9365: LD_VAR 0 4
9369: PPUSH
9370: CALL_OW 263
9374: PUSH
9375: LD_INT 1
9377: EQUAL
9378: PUSH
9379: LD_VAR 0 4
9383: PPUSH
9384: CALL_OW 256
9388: PUSH
9389: LD_INT 990
9391: LESS
9392: AND
9393: IFFALSE 9464
// begin veh := i ;
9395: LD_ADDR_VAR 0 7
9399: PUSH
9400: LD_VAR 0 4
9404: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9405: LD_ADDR_VAR 0 8
9409: PUSH
9410: LD_VAR 0 4
9414: PPUSH
9415: CALL_OW 311
9419: ST_TO_ADDR
// if veh then
9420: LD_VAR 0 7
9424: IFFALSE 9464
// begin ComMoveXY ( i , 63 , 75 ) ;
9426: LD_VAR 0 4
9430: PPUSH
9431: LD_INT 63
9433: PPUSH
9434: LD_INT 75
9436: PPUSH
9437: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9441: LD_VAR 0 7
9445: PPUSH
9446: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9450: LD_VAR 0 8
9454: PPUSH
9455: LD_VAR 0 7
9459: PPUSH
9460: CALL_OW 189
// end ; end ; end ;
9464: GO 9193
9466: POP
9467: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9468: LD_ADDR_VAR 0 6
9472: PUSH
9473: LD_VAR 0 2
9477: PPUSH
9478: LD_INT 22
9480: PUSH
9481: LD_VAR 0 1
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: PPUSH
9493: CALL_OW 70
9497: ST_TO_ADDR
// if tmp and defenders_list then
9498: LD_VAR 0 6
9502: PUSH
9503: LD_EXP 32
9507: AND
9508: IFFALSE 9677
// for i in defenders_list do
9510: LD_ADDR_VAR 0 4
9514: PUSH
9515: LD_EXP 32
9519: PUSH
9520: FOR_IN
9521: IFFALSE 9675
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9523: LD_VAR 0 4
9527: PPUSH
9528: CALL_OW 257
9532: PUSH
9533: LD_INT 3
9535: EQUAL
9536: PUSH
9537: LD_VAR 0 4
9541: PPUSH
9542: CALL_OW 310
9546: NOT
9547: AND
9548: IFFALSE 9587
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9550: LD_VAR 0 4
9554: PPUSH
9555: LD_EXP 32
9559: PPUSH
9560: LD_INT 58
9562: PUSH
9563: EMPTY
9564: LIST
9565: PPUSH
9566: CALL_OW 72
9570: PPUSH
9571: LD_VAR 0 4
9575: PPUSH
9576: CALL_OW 74
9580: PPUSH
9581: CALL_OW 120
9585: GO 9673
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9587: LD_VAR 0 4
9591: PPUSH
9592: CALL_OW 314
9596: NOT
9597: PUSH
9598: LD_VAR 0 4
9602: PPUSH
9603: LD_VAR 0 2
9607: PPUSH
9608: CALL_OW 308
9612: AND
9613: IFFALSE 9641
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9615: LD_VAR 0 4
9619: PPUSH
9620: LD_VAR 0 6
9624: PPUSH
9625: LD_VAR 0 4
9629: PPUSH
9630: CALL_OW 74
9634: PPUSH
9635: CALL_OW 115
9639: GO 9673
// if not IsInArea ( i , defenseArea ) then
9641: LD_VAR 0 4
9645: PPUSH
9646: LD_VAR 0 2
9650: PPUSH
9651: CALL_OW 308
9655: NOT
9656: IFFALSE 9673
// ComMoveXY ( i , 63 , 75 ) ;
9658: LD_VAR 0 4
9662: PPUSH
9663: LD_INT 63
9665: PPUSH
9666: LD_INT 75
9668: PPUSH
9669: CALL_OW 111
// end ;
9673: GO 9520
9675: POP
9676: POP
// end ;
9677: LD_VAR 0 3
9681: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9682: LD_INT 0
9684: PPUSH
9685: PPUSH
9686: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9687: LD_INT 22
9689: PUSH
9690: LD_VAR 0 1
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 21
9701: PUSH
9702: LD_INT 2
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PPUSH
9713: CALL_OW 69
9717: PUSH
9718: LD_VAR 0 3
9722: LESSEQUAL
9723: IFFALSE 9831
// begin for i = 1 to vehCount do
9725: LD_ADDR_VAR 0 9
9729: PUSH
9730: DOUBLE
9731: LD_INT 1
9733: DEC
9734: ST_TO_ADDR
9735: LD_VAR 0 3
9739: PUSH
9740: FOR_TO
9741: IFFALSE 9829
// begin weapon = weaponTab [ i ] ;
9743: LD_ADDR_VAR 0 10
9747: PUSH
9748: LD_VAR 0 4
9752: PUSH
9753: LD_VAR 0 9
9757: ARRAY
9758: ST_TO_ADDR
// if weapon = 46 then
9759: LD_VAR 0 10
9763: PUSH
9764: LD_INT 46
9766: EQUAL
9767: IFFALSE 9798
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9769: LD_VAR 0 2
9773: PPUSH
9774: LD_INT 24
9776: PPUSH
9777: LD_VAR 0 5
9781: PPUSH
9782: LD_VAR 0 6
9786: PPUSH
9787: LD_VAR 0 10
9791: PPUSH
9792: CALL_OW 185
// end else
9796: GO 9827
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9798: LD_VAR 0 2
9802: PPUSH
9803: LD_VAR 0 7
9807: PPUSH
9808: LD_VAR 0 5
9812: PPUSH
9813: LD_VAR 0 6
9817: PPUSH
9818: LD_VAR 0 10
9822: PPUSH
9823: CALL_OW 185
// end ; end ;
9827: GO 9740
9829: POP
9830: POP
// end ; end ;
9831: LD_VAR 0 8
9835: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9836: LD_INT 0
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9842: LD_ADDR_VAR 0 8
9846: PUSH
9847: LD_INT 22
9849: PUSH
9850: LD_VAR 0 1
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 21
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_INT 24
9874: PUSH
9875: LD_INT 650
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: PPUSH
9891: CALL_OW 69
9895: ST_TO_ADDR
// if damageVehicles > 0 then
9896: LD_VAR 0 8
9900: PUSH
9901: LD_INT 0
9903: GREATER
9904: IFFALSE 9925
// ComMoveXY ( damageVehicles , repX , repY ) ;
9906: LD_VAR 0 8
9910: PPUSH
9911: LD_VAR 0 3
9915: PPUSH
9916: LD_VAR 0 4
9920: PPUSH
9921: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9925: LD_VAR 0 8
9929: PPUSH
9930: LD_INT 95
9932: PUSH
9933: LD_VAR 0 2
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 3
9944: PUSH
9945: LD_INT 58
9947: PUSH
9948: EMPTY
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PPUSH
9959: CALL_OW 72
9963: PUSH
9964: LD_INT 0
9966: GREATER
9967: IFFALSE 10034
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9969: LD_ADDR_VAR 0 6
9973: PUSH
9974: LD_VAR 0 8
9978: PPUSH
9979: LD_INT 95
9981: PUSH
9982: LD_VAR 0 2
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: LD_INT 58
9996: PUSH
9997: EMPTY
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PPUSH
10008: CALL_OW 72
10012: PUSH
10013: FOR_IN
10014: IFFALSE 10032
// ComExitVehicle ( UnitsInside ( i ) ) ;
10016: LD_VAR 0 6
10020: PPUSH
10021: CALL_OW 313
10025: PPUSH
10026: CALL_OW 121
10030: GO 10013
10032: POP
10033: POP
// end ;
10034: LD_VAR 0 5
10038: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10039: LD_INT 0
10041: PPUSH
10042: PPUSH
10043: PPUSH
10044: PPUSH
10045: PPUSH
10046: PPUSH
10047: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10048: LD_ADDR_VAR 0 8
10052: PUSH
10053: LD_INT 22
10055: PUSH
10056: LD_VAR 0 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 21
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 24
10077: PUSH
10078: LD_INT 250
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 58
10090: PUSH
10091: EMPTY
10092: LIST
10093: PUSH
10094: LD_INT 2
10096: PUSH
10097: LD_INT 34
10099: PUSH
10100: LD_INT 43
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 34
10109: PUSH
10110: LD_INT 44
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 34
10119: PUSH
10120: LD_INT 46
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10149: LD_INT 22
10151: PUSH
10152: LD_VAR 0 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 21
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 24
10173: PUSH
10174: LD_INT 1000
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 3
10183: PUSH
10184: LD_INT 58
10186: PUSH
10187: EMPTY
10188: LIST
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: LD_INT 34
10195: PUSH
10196: LD_INT 43
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 34
10205: PUSH
10206: LD_INT 44
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 34
10215: PUSH
10216: LD_INT 46
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: PPUSH
10240: CALL_OW 69
10244: PUSH
10245: LD_INT 5
10247: PUSH
10248: LD_INT 6
10250: PUSH
10251: LD_INT 7
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: PUSH
10259: LD_OWVAR 67
10263: ARRAY
10264: GREATEREQUAL
10265: IFFALSE 10830
// repeat wait ( 0 0$1 ) ;
10267: LD_INT 35
10269: PPUSH
10270: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10274: LD_ADDR_VAR 0 8
10278: PUSH
10279: LD_INT 22
10281: PUSH
10282: LD_VAR 0 1
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 21
10293: PUSH
10294: LD_INT 2
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 24
10303: PUSH
10304: LD_INT 250
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: LD_INT 34
10316: PUSH
10317: LD_INT 43
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 34
10326: PUSH
10327: LD_INT 44
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 34
10336: PUSH
10337: LD_INT 46
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: PUSH
10350: LD_INT 3
10352: PUSH
10353: LD_INT 58
10355: PUSH
10356: EMPTY
10357: LIST
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 69
10374: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10375: LD_INT 22
10377: PUSH
10378: LD_VAR 0 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 95
10389: PUSH
10390: LD_VAR 0 2
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 69
10407: NOT
10408: PUSH
10409: LD_VAR 0 11
10413: PUSH
10414: LD_INT 0
10416: EQUAL
10417: AND
10418: IFFALSE 10473
// for i := 1 to wayX do
10420: LD_ADDR_VAR 0 6
10424: PUSH
10425: DOUBLE
10426: LD_INT 1
10428: DEC
10429: ST_TO_ADDR
10430: LD_VAR 0 3
10434: PUSH
10435: FOR_TO
10436: IFFALSE 10471
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10438: LD_VAR 0 8
10442: PPUSH
10443: LD_VAR 0 3
10447: PUSH
10448: LD_VAR 0 6
10452: ARRAY
10453: PPUSH
10454: LD_VAR 0 4
10458: PUSH
10459: LD_VAR 0 6
10463: ARRAY
10464: PPUSH
10465: CALL_OW 114
10469: GO 10435
10471: POP
10472: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10473: LD_INT 22
10475: PUSH
10476: LD_VAR 0 1
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 95
10487: PUSH
10488: LD_VAR 0 2
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PPUSH
10501: CALL_OW 69
10505: IFFALSE 10729
// begin seeEnemy = 1 ;
10507: LD_ADDR_VAR 0 11
10511: PUSH
10512: LD_INT 1
10514: ST_TO_ADDR
// for j in vehiclesOK do
10515: LD_ADDR_VAR 0 7
10519: PUSH
10520: LD_VAR 0 8
10524: PUSH
10525: FOR_IN
10526: IFFALSE 10727
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10528: LD_ADDR_VAR 0 9
10532: PUSH
10533: LD_INT 81
10535: PUSH
10536: LD_VAR 0 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 101
10547: PUSH
10548: LD_INT 1
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 69
10563: PPUSH
10564: LD_VAR 0 7
10568: PPUSH
10569: CALL_OW 74
10573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10574: LD_ADDR_VAR 0 10
10578: PUSH
10579: LD_INT 81
10581: PUSH
10582: LD_VAR 0 1
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 101
10593: PUSH
10594: LD_INT 1
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 2
10603: PUSH
10604: LD_INT 59
10606: PUSH
10607: EMPTY
10608: LIST
10609: PUSH
10610: LD_INT 21
10612: PUSH
10613: LD_INT 1
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: PPUSH
10644: CALL_OW 69
10648: PPUSH
10649: LD_VAR 0 7
10653: PPUSH
10654: CALL_OW 74
10658: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10659: LD_VAR 0 7
10663: PPUSH
10664: LD_VAR 0 9
10668: PPUSH
10669: CALL_OW 296
10673: PUSH
10674: LD_INT 8
10676: PLUS
10677: PUSH
10678: LD_VAR 0 7
10682: PPUSH
10683: LD_VAR 0 10
10687: PPUSH
10688: CALL_OW 296
10692: LESS
10693: IFFALSE 10711
// ComAttackUnit ( j , target1 ) else
10695: LD_VAR 0 7
10699: PPUSH
10700: LD_VAR 0 9
10704: PPUSH
10705: CALL_OW 115
10709: GO 10725
// ComAttackUnit ( j , target2 ) ;
10711: LD_VAR 0 7
10715: PPUSH
10716: LD_VAR 0 10
10720: PPUSH
10721: CALL_OW 115
// end ;
10725: GO 10525
10727: POP
10728: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10729: LD_INT 22
10731: PUSH
10732: LD_VAR 0 1
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 21
10743: PUSH
10744: LD_INT 2
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 24
10753: PUSH
10754: LD_INT 250
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 2
10763: PUSH
10764: LD_INT 34
10766: PUSH
10767: LD_INT 43
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 34
10776: PUSH
10777: LD_INT 44
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 34
10786: PUSH
10787: LD_INT 46
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 3
10802: PUSH
10803: LD_INT 58
10805: PUSH
10806: EMPTY
10807: LIST
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 69
10824: PUSH
10825: LD_INT 0
10827: EQUAL
10828: IFFALSE 10267
// seeEnemy = 0 ;
10830: LD_ADDR_VAR 0 11
10834: PUSH
10835: LD_INT 0
10837: ST_TO_ADDR
// end ;
10838: LD_VAR 0 5
10842: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10843: LD_INT 0
10845: PPUSH
10846: PPUSH
10847: PPUSH
10848: PPUSH
10849: PPUSH
10850: PPUSH
// repeat wait ( 0 0$1 ) ;
10851: LD_INT 35
10853: PPUSH
10854: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10858: LD_ADDR_VAR 0 7
10862: PUSH
10863: LD_INT 22
10865: PUSH
10866: LD_VAR 0 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 21
10877: PUSH
10878: LD_INT 2
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 24
10887: PUSH
10888: LD_INT 651
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: PPUSH
10900: CALL_OW 69
10904: ST_TO_ADDR
// for j in vehiclesOK do
10905: LD_ADDR_VAR 0 4
10909: PUSH
10910: LD_VAR 0 7
10914: PUSH
10915: FOR_IN
10916: IFFALSE 11117
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10918: LD_ADDR_VAR 0 5
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_VAR 0 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 101
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: PPUSH
10954: LD_VAR 0 4
10958: PPUSH
10959: CALL_OW 74
10963: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10964: LD_ADDR_VAR 0 6
10968: PUSH
10969: LD_INT 81
10971: PUSH
10972: LD_VAR 0 1
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 101
10983: PUSH
10984: LD_INT 1
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 2
10993: PUSH
10994: LD_INT 59
10996: PUSH
10997: EMPTY
10998: LIST
10999: PUSH
11000: LD_INT 21
11002: PUSH
11003: LD_INT 1
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 21
11012: PUSH
11013: LD_INT 2
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: LIST
11030: PUSH
11031: EMPTY
11032: LIST
11033: PPUSH
11034: CALL_OW 69
11038: PPUSH
11039: LD_VAR 0 4
11043: PPUSH
11044: CALL_OW 74
11048: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11049: LD_VAR 0 4
11053: PPUSH
11054: LD_VAR 0 5
11058: PPUSH
11059: CALL_OW 296
11063: PUSH
11064: LD_INT 8
11066: PLUS
11067: PUSH
11068: LD_VAR 0 4
11072: PPUSH
11073: LD_VAR 0 6
11077: PPUSH
11078: CALL_OW 296
11082: LESS
11083: IFFALSE 11101
// ComAttackUnit ( j , target1 ) else
11085: LD_VAR 0 4
11089: PPUSH
11090: LD_VAR 0 5
11094: PPUSH
11095: CALL_OW 115
11099: GO 11115
// ComAttackUnit ( j , target2 ) ;
11101: LD_VAR 0 4
11105: PPUSH
11106: LD_VAR 0 6
11110: PPUSH
11111: CALL_OW 115
// end ;
11115: GO 10915
11117: POP
11118: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11119: LD_INT 22
11121: PUSH
11122: LD_VAR 0 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 2
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 24
11143: PUSH
11144: LD_INT 250
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: PPUSH
11156: CALL_OW 69
11160: PUSH
11161: LD_INT 0
11163: EQUAL
11164: IFFALSE 10851
// end ;
11166: LD_VAR 0 2
11170: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11171: LD_INT 0
11173: PPUSH
11174: PPUSH
11175: PPUSH
11176: PPUSH
11177: PPUSH
11178: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11179: LD_ADDR_VAR 0 8
11183: PUSH
11184: LD_VAR 0 2
11188: PPUSH
11189: CALL_OW 313
11193: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11194: LD_ADDR_VAR 0 9
11198: PUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_VAR 0 1
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 25
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 24
11228: PUSH
11229: LD_INT 750
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 54
11241: PUSH
11242: EMPTY
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 70
11259: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11260: LD_ADDR_VAR 0 6
11264: PUSH
11265: LD_VAR 0 3
11269: PPUSH
11270: LD_INT 22
11272: PUSH
11273: LD_VAR 0 1
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 21
11284: PUSH
11285: LD_INT 3
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 3
11294: PUSH
11295: LD_INT 24
11297: PUSH
11298: LD_INT 1000
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: PPUSH
11317: CALL_OW 70
11321: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11322: LD_VAR 0 6
11326: NOT
11327: PUSH
11328: LD_INT 22
11330: PUSH
11331: LD_VAR 0 1
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 25
11342: PUSH
11343: LD_INT 2
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 24
11352: PUSH
11353: LD_INT 250
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: PPUSH
11365: CALL_OW 69
11369: NOT
11370: AND
11371: IFFALSE 11375
// exit ;
11373: GO 11572
// if buildings_list > 0 and engineerOkInside then
11375: LD_VAR 0 6
11379: PUSH
11380: LD_INT 0
11382: GREATER
11383: PUSH
11384: LD_VAR 0 8
11388: AND
11389: IFFALSE 11415
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11391: LD_VAR 0 8
11395: PPUSH
11396: LD_INT 25
11398: PUSH
11399: LD_INT 2
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 72
11410: PPUSH
11411: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11415: LD_VAR 0 6
11419: PUSH
11420: LD_INT 0
11422: GREATER
11423: PUSH
11424: LD_VAR 0 9
11428: PUSH
11429: LD_INT 0
11431: GREATER
11432: AND
11433: IFFALSE 11453
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11435: LD_VAR 0 9
11439: PPUSH
11440: LD_VAR 0 6
11444: PUSH
11445: LD_INT 1
11447: ARRAY
11448: PPUSH
11449: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11453: LD_VAR 0 6
11457: PUSH
11458: LD_INT 0
11460: EQUAL
11461: PUSH
11462: LD_VAR 0 4
11466: PUSH
11467: LD_INT 0
11469: EQUAL
11470: AND
11471: PUSH
11472: LD_VAR 0 9
11476: PUSH
11477: LD_INT 0
11479: GREATER
11480: AND
11481: IFFALSE 11497
// ComEnterUnit ( engineerOkOutside , building ) ;
11483: LD_VAR 0 9
11487: PPUSH
11488: LD_VAR 0 2
11492: PPUSH
11493: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11497: LD_VAR 0 9
11501: PUSH
11502: LD_INT 0
11504: GREATER
11505: PUSH
11506: LD_VAR 0 6
11510: PUSH
11511: LD_INT 0
11513: EQUAL
11514: AND
11515: PUSH
11516: LD_VAR 0 4
11520: PUSH
11521: LD_INT 0
11523: GREATER
11524: AND
11525: IFFALSE 11572
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11527: LD_VAR 0 9
11531: PPUSH
11532: LD_VAR 0 4
11536: PUSH
11537: LD_INT 1
11539: ARRAY
11540: PPUSH
11541: LD_VAR 0 4
11545: PUSH
11546: LD_INT 2
11548: ARRAY
11549: PPUSH
11550: LD_VAR 0 4
11554: PUSH
11555: LD_INT 3
11557: ARRAY
11558: PPUSH
11559: LD_VAR 0 4
11563: PUSH
11564: LD_INT 4
11566: ARRAY
11567: PPUSH
11568: CALL_OW 145
// end ;
11572: LD_VAR 0 5
11576: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11577: LD_INT 0
11579: PPUSH
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
11587: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11588: LD_ADDR_VAR 0 6
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_VAR 0 1
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 25
11607: PUSH
11608: LD_INT 4
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 23
11617: PUSH
11618: LD_INT 2
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 24
11627: PUSH
11628: LD_INT 251
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11646: LD_ADDR_VAR 0 7
11650: PUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 22
11658: PUSH
11659: LD_VAR 0 1
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 23
11670: PUSH
11671: LD_INT 2
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 25
11680: PUSH
11681: LD_INT 4
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 50
11690: PUSH
11691: EMPTY
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 70
11704: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11705: LD_ADDR_VAR 0 10
11709: PUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: LD_INT 22
11717: PUSH
11718: LD_VAR 0 1
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 21
11729: PUSH
11730: LD_INT 1
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 3
11739: PUSH
11740: LD_INT 25
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 3
11756: PUSH
11757: LD_INT 24
11759: PUSH
11760: LD_INT 750
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PPUSH
11777: CALL_OW 70
11781: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11782: LD_ADDR_VAR 0 11
11786: PUSH
11787: LD_VAR 0 2
11791: PPUSH
11792: LD_INT 22
11794: PUSH
11795: LD_VAR 0 1
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 21
11806: PUSH
11807: LD_INT 1
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 3
11816: PUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 3
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: LD_INT 24
11836: PUSH
11837: LD_INT 1000
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: PPUSH
11854: CALL_OW 70
11858: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11859: LD_VAR 0 10
11863: NOT
11864: PUSH
11865: LD_VAR 0 11
11869: NOT
11870: AND
11871: PUSH
11872: LD_VAR 0 6
11876: NOT
11877: AND
11878: IFFALSE 11882
// exit ;
11880: GO 12116
// if damageUnits > 0 and sci_list > 0 then
11882: LD_VAR 0 10
11886: PUSH
11887: LD_INT 0
11889: GREATER
11890: PUSH
11891: LD_VAR 0 6
11895: PUSH
11896: LD_INT 0
11898: GREATER
11899: AND
11900: IFFALSE 11916
// ComMoveToArea ( damageUnits , healArea ) ;
11902: LD_VAR 0 10
11906: PPUSH
11907: LD_VAR 0 2
11911: PPUSH
11912: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11916: LD_VAR 0 11
11920: PUSH
11921: LD_INT 0
11923: GREATER
11924: PUSH
11925: LD_VAR 0 6
11929: PUSH
11930: LD_INT 0
11932: GREATER
11933: AND
11934: IFFALSE 11945
// ComExitBuilding ( sci_list ) ;
11936: LD_VAR 0 6
11940: PPUSH
11941: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11945: LD_VAR 0 11
11949: PUSH
11950: LD_INT 0
11952: GREATER
11953: PUSH
11954: LD_VAR 0 7
11958: PUSH
11959: LD_INT 0
11961: GREATER
11962: AND
11963: IFFALSE 11983
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11965: LD_VAR 0 7
11969: PPUSH
11970: LD_VAR 0 11
11974: PUSH
11975: LD_INT 1
11977: ARRAY
11978: PPUSH
11979: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11983: LD_VAR 0 10
11987: PUSH
11988: LD_INT 0
11990: EQUAL
11991: PUSH
11992: LD_VAR 0 11
11996: PUSH
11997: LD_INT 0
11999: EQUAL
12000: AND
12001: PUSH
12002: LD_VAR 0 7
12006: PUSH
12007: LD_INT 0
12009: GREATER
12010: AND
12011: IFFALSE 12116
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12013: LD_ADDR_VAR 0 12
12017: PUSH
12018: LD_INT 22
12020: PUSH
12021: LD_VAR 0 1
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 21
12032: PUSH
12033: LD_INT 3
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 8
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: PPUSH
12055: CALL_OW 69
12059: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12060: LD_ADDR_VAR 0 13
12064: PUSH
12065: LD_INT 1
12067: PPUSH
12068: LD_VAR 0 12
12072: PPUSH
12073: CALL_OW 12
12077: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12078: LD_VAR 0 7
12082: PPUSH
12083: LD_INT 3
12085: PUSH
12086: LD_INT 60
12088: PUSH
12089: EMPTY
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 72
12100: PPUSH
12101: LD_VAR 0 12
12105: PUSH
12106: LD_VAR 0 13
12110: ARRAY
12111: PPUSH
12112: CALL_OW 120
// end ; end ;
12116: LD_VAR 0 5
12120: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12121: LD_INT 0
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12128: LD_ADDR_VAR 0 6
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_VAR 0 1
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 30
12150: PUSH
12151: LD_INT 31
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 30
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 30
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: LD_INT 4
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 30
12190: PUSH
12191: LD_INT 5
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 69
12214: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12215: LD_ADDR_VAR 0 7
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_VAR 0 2
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 21
12234: PUSH
12235: LD_INT 3
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 58
12244: PUSH
12245: EMPTY
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: PPUSH
12253: CALL_OW 69
12257: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12258: LD_VAR 0 6
12262: PUSH
12263: LD_INT 0
12265: GREATER
12266: PUSH
12267: LD_VAR 0 7
12271: PUSH
12272: LD_INT 0
12274: GREATER
12275: AND
12276: IFFALSE 12346
// begin for i in turretsList do
12278: LD_ADDR_VAR 0 4
12282: PUSH
12283: LD_VAR 0 6
12287: PUSH
12288: FOR_IN
12289: IFFALSE 12344
// begin for j in enemyBuildings do
12291: LD_ADDR_VAR 0 5
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: FOR_IN
12302: IFFALSE 12340
// begin if GetDistUnits ( i , j ) < 20 then
12304: LD_VAR 0 4
12308: PPUSH
12309: LD_VAR 0 5
12313: PPUSH
12314: CALL_OW 296
12318: PUSH
12319: LD_INT 20
12321: LESS
12322: IFFALSE 12338
// begin ComAttackUnit ( i , j ) ;
12324: LD_VAR 0 4
12328: PPUSH
12329: LD_VAR 0 5
12333: PPUSH
12334: CALL_OW 115
// end ; end ;
12338: GO 12301
12340: POP
12341: POP
// end ;
12342: GO 12288
12344: POP
12345: POP
// end ; end ;
12346: LD_VAR 0 3
12350: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12351: LD_INT 0
12353: PPUSH
12354: PPUSH
12355: PPUSH
12356: PPUSH
12357: PPUSH
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
// for i = 1 to medicCount do
12364: LD_ADDR_VAR 0 14
12368: PUSH
12369: DOUBLE
12370: LD_INT 1
12372: DEC
12373: ST_TO_ADDR
12374: LD_VAR 0 7
12378: PUSH
12379: FOR_TO
12380: IFFALSE 12462
// begin uc_side = side ;
12382: LD_ADDR_OWVAR 20
12386: PUSH
12387: LD_VAR 0 1
12391: ST_TO_ADDR
// uc_nation = nation ;
12392: LD_ADDR_OWVAR 21
12396: PUSH
12397: LD_VAR 0 2
12401: ST_TO_ADDR
// hc_name =  ;
12402: LD_ADDR_OWVAR 26
12406: PUSH
12407: LD_STRING 
12409: ST_TO_ADDR
// hc_gallery =  ;
12410: LD_ADDR_OWVAR 33
12414: PUSH
12415: LD_STRING 
12417: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12418: LD_INT 0
12420: PPUSH
12421: LD_INT 4
12423: PPUSH
12424: LD_VAR 0 8
12428: PPUSH
12429: CALL_OW 380
// un = CreateHuman ;
12433: LD_ADDR_VAR 0 16
12437: PUSH
12438: CALL_OW 44
12442: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12443: LD_VAR 0 16
12447: PPUSH
12448: LD_VAR 0 9
12452: PPUSH
12453: LD_INT 0
12455: PPUSH
12456: CALL_OW 49
// end ;
12460: GO 12379
12462: POP
12463: POP
// for i = 1 to soldierCount do
12464: LD_ADDR_VAR 0 14
12468: PUSH
12469: DOUBLE
12470: LD_INT 1
12472: DEC
12473: ST_TO_ADDR
12474: LD_VAR 0 3
12478: PUSH
12479: FOR_TO
12480: IFFALSE 12562
// begin uc_side = side ;
12482: LD_ADDR_OWVAR 20
12486: PUSH
12487: LD_VAR 0 1
12491: ST_TO_ADDR
// uc_nation = nation ;
12492: LD_ADDR_OWVAR 21
12496: PUSH
12497: LD_VAR 0 2
12501: ST_TO_ADDR
// hc_name =  ;
12502: LD_ADDR_OWVAR 26
12506: PUSH
12507: LD_STRING 
12509: ST_TO_ADDR
// hc_gallery =  ;
12510: LD_ADDR_OWVAR 33
12514: PUSH
12515: LD_STRING 
12517: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12518: LD_INT 0
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: LD_VAR 0 8
12528: PPUSH
12529: CALL_OW 380
// un = CreateHuman ;
12533: LD_ADDR_VAR 0 16
12537: PUSH
12538: CALL_OW 44
12542: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12543: LD_VAR 0 16
12547: PPUSH
12548: LD_VAR 0 9
12552: PPUSH
12553: LD_INT 0
12555: PPUSH
12556: CALL_OW 49
// end ;
12560: GO 12479
12562: POP
12563: POP
// for i = 1 to sniperCount do
12564: LD_ADDR_VAR 0 14
12568: PUSH
12569: DOUBLE
12570: LD_INT 1
12572: DEC
12573: ST_TO_ADDR
12574: LD_VAR 0 4
12578: PUSH
12579: FOR_TO
12580: IFFALSE 12662
// begin uc_side = side ;
12582: LD_ADDR_OWVAR 20
12586: PUSH
12587: LD_VAR 0 1
12591: ST_TO_ADDR
// uc_nation = nation ;
12592: LD_ADDR_OWVAR 21
12596: PUSH
12597: LD_VAR 0 2
12601: ST_TO_ADDR
// hc_name =  ;
12602: LD_ADDR_OWVAR 26
12606: PUSH
12607: LD_STRING 
12609: ST_TO_ADDR
// hc_gallery =  ;
12610: LD_ADDR_OWVAR 33
12614: PUSH
12615: LD_STRING 
12617: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12618: LD_INT 0
12620: PPUSH
12621: LD_INT 5
12623: PPUSH
12624: LD_VAR 0 8
12628: PPUSH
12629: CALL_OW 380
// un = CreateHuman ;
12633: LD_ADDR_VAR 0 16
12637: PUSH
12638: CALL_OW 44
12642: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12643: LD_VAR 0 16
12647: PPUSH
12648: LD_VAR 0 9
12652: PPUSH
12653: LD_INT 0
12655: PPUSH
12656: CALL_OW 49
// end ;
12660: GO 12579
12662: POP
12663: POP
// for i = 1 to bazookCount do
12664: LD_ADDR_VAR 0 14
12668: PUSH
12669: DOUBLE
12670: LD_INT 1
12672: DEC
12673: ST_TO_ADDR
12674: LD_VAR 0 5
12678: PUSH
12679: FOR_TO
12680: IFFALSE 12762
// begin uc_side = side ;
12682: LD_ADDR_OWVAR 20
12686: PUSH
12687: LD_VAR 0 1
12691: ST_TO_ADDR
// uc_nation = nation ;
12692: LD_ADDR_OWVAR 21
12696: PUSH
12697: LD_VAR 0 2
12701: ST_TO_ADDR
// hc_name =  ;
12702: LD_ADDR_OWVAR 26
12706: PUSH
12707: LD_STRING 
12709: ST_TO_ADDR
// hc_gallery =  ;
12710: LD_ADDR_OWVAR 33
12714: PUSH
12715: LD_STRING 
12717: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12718: LD_INT 0
12720: PPUSH
12721: LD_INT 9
12723: PPUSH
12724: LD_VAR 0 8
12728: PPUSH
12729: CALL_OW 380
// un = CreateHuman ;
12733: LD_ADDR_VAR 0 16
12737: PUSH
12738: CALL_OW 44
12742: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12743: LD_VAR 0 16
12747: PPUSH
12748: LD_VAR 0 9
12752: PPUSH
12753: LD_INT 0
12755: PPUSH
12756: CALL_OW 49
// end ;
12760: GO 12679
12762: POP
12763: POP
// for i = 1 to mortalCount do
12764: LD_ADDR_VAR 0 14
12768: PUSH
12769: DOUBLE
12770: LD_INT 1
12772: DEC
12773: ST_TO_ADDR
12774: LD_VAR 0 6
12778: PUSH
12779: FOR_TO
12780: IFFALSE 12862
// begin uc_side = side ;
12782: LD_ADDR_OWVAR 20
12786: PUSH
12787: LD_VAR 0 1
12791: ST_TO_ADDR
// uc_nation = nation ;
12792: LD_ADDR_OWVAR 21
12796: PUSH
12797: LD_VAR 0 2
12801: ST_TO_ADDR
// hc_name =  ;
12802: LD_ADDR_OWVAR 26
12806: PUSH
12807: LD_STRING 
12809: ST_TO_ADDR
// hc_gallery =  ;
12810: LD_ADDR_OWVAR 33
12814: PUSH
12815: LD_STRING 
12817: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12818: LD_INT 0
12820: PPUSH
12821: LD_INT 8
12823: PPUSH
12824: LD_VAR 0 8
12828: PPUSH
12829: CALL_OW 380
// un = CreateHuman ;
12833: LD_ADDR_VAR 0 16
12837: PUSH
12838: CALL_OW 44
12842: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12843: LD_VAR 0 16
12847: PPUSH
12848: LD_VAR 0 9
12852: PPUSH
12853: LD_INT 0
12855: PPUSH
12856: CALL_OW 49
// end ;
12860: GO 12779
12862: POP
12863: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12864: LD_ADDR_VAR 0 19
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_VAR 0 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: LD_INT 25
12886: PUSH
12887: LD_INT 1
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 25
12896: PUSH
12897: LD_INT 5
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 25
12906: PUSH
12907: LD_INT 8
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 25
12916: PUSH
12917: LD_INT 9
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 69
12939: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12940: LD_ADDR_VAR 0 18
12944: PUSH
12945: LD_INT 22
12947: PUSH
12948: LD_VAR 0 1
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 25
12959: PUSH
12960: LD_INT 4
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: ST_TO_ADDR
// for i in medic_list do
12976: LD_ADDR_VAR 0 14
12980: PUSH
12981: LD_VAR 0 18
12985: PUSH
12986: FOR_IN
12987: IFFALSE 13005
// ComMoveToArea ( i , healArea ) ;
12989: LD_VAR 0 14
12993: PPUSH
12994: LD_VAR 0 10
12998: PPUSH
12999: CALL_OW 113
13003: GO 12986
13005: POP
13006: POP
// if strategy = 1 then
13007: LD_VAR 0 12
13011: PUSH
13012: LD_INT 1
13014: EQUAL
13015: IFFALSE 13561
// begin repeat wait ( 0 0$3 ) ;
13017: LD_INT 105
13019: PPUSH
13020: CALL_OW 67
// for i in soldiersOK_list do
13024: LD_ADDR_VAR 0 14
13028: PUSH
13029: LD_VAR 0 19
13033: PUSH
13034: FOR_IN
13035: IFFALSE 13099
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13037: LD_VAR 0 14
13041: PPUSH
13042: LD_INT 91
13044: PPUSH
13045: LD_INT 63
13047: PPUSH
13048: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13052: LD_VAR 0 14
13056: PPUSH
13057: LD_INT 101
13059: PPUSH
13060: LD_INT 53
13062: PPUSH
13063: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13067: LD_VAR 0 14
13071: PPUSH
13072: LD_INT 75
13074: PPUSH
13075: LD_INT 23
13077: PPUSH
13078: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13082: LD_VAR 0 14
13086: PPUSH
13087: LD_INT 78
13089: PPUSH
13090: LD_INT 8
13092: PPUSH
13093: CALL_OW 174
// end ;
13097: GO 13034
13099: POP
13100: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13101: LD_INT 12
13103: PPUSH
13104: LD_INT 22
13106: PUSH
13107: LD_VAR 0 1
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PPUSH
13116: CALL_OW 70
13120: PUSH
13121: LD_INT 2
13123: GREATER
13124: IFFALSE 13017
// repeat wait ( 0 0$1 ) ;
13126: LD_INT 35
13128: PPUSH
13129: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13133: LD_ADDR_VAR 0 17
13137: PUSH
13138: LD_INT 22
13140: PUSH
13141: LD_VAR 0 1
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 1
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: LD_INT 24
13158: PUSH
13159: LD_INT 550
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: LD_INT 250
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PPUSH
13189: CALL_OW 69
13193: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13194: LD_ADDR_VAR 0 19
13198: PUSH
13199: LD_INT 22
13201: PUSH
13202: LD_VAR 0 1
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: LD_INT 25
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 25
13226: PUSH
13227: LD_INT 5
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 25
13236: PUSH
13237: LD_INT 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 9
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 24
13263: PUSH
13264: LD_INT 1000
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: PPUSH
13276: CALL_OW 69
13280: ST_TO_ADDR
// if medicCount > 0 then
13281: LD_VAR 0 7
13285: PUSH
13286: LD_INT 0
13288: GREATER
13289: IFFALSE 13363
// begin if damageUnit_list > 0 then
13291: LD_VAR 0 17
13295: PUSH
13296: LD_INT 0
13298: GREATER
13299: IFFALSE 13363
// begin for i in damageUnit_list do
13301: LD_ADDR_VAR 0 14
13305: PUSH
13306: LD_VAR 0 17
13310: PUSH
13311: FOR_IN
13312: IFFALSE 13361
// begin ComMoveToArea ( i , healArea ) ;
13314: LD_VAR 0 14
13318: PPUSH
13319: LD_VAR 0 10
13323: PPUSH
13324: CALL_OW 113
// for j in medic_list do
13328: LD_ADDR_VAR 0 15
13332: PUSH
13333: LD_VAR 0 18
13337: PUSH
13338: FOR_IN
13339: IFFALSE 13357
// AddComHeal ( j , i ) ;
13341: LD_VAR 0 15
13345: PPUSH
13346: LD_VAR 0 14
13350: PPUSH
13351: CALL_OW 188
13355: GO 13338
13357: POP
13358: POP
// end ;
13359: GO 13311
13361: POP
13362: POP
// end ; end ; for i in soldiersOK_list do
13363: LD_ADDR_VAR 0 14
13367: PUSH
13368: LD_VAR 0 19
13372: PUSH
13373: FOR_IN
13374: IFFALSE 13550
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13376: LD_ADDR_VAR 0 22
13380: PUSH
13381: LD_INT 22
13383: PUSH
13384: LD_VAR 0 11
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PPUSH
13393: CALL_OW 69
13397: PPUSH
13398: LD_VAR 0 14
13402: PPUSH
13403: CALL_OW 74
13407: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13408: LD_ADDR_VAR 0 23
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_VAR 0 11
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: LD_INT 59
13430: PUSH
13431: EMPTY
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 21
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: PPUSH
13467: CALL_OW 69
13471: PPUSH
13472: LD_VAR 0 14
13476: PPUSH
13477: CALL_OW 74
13481: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13482: LD_VAR 0 14
13486: PPUSH
13487: LD_VAR 0 22
13491: PPUSH
13492: CALL_OW 296
13496: PUSH
13497: LD_INT 6
13499: PLUS
13500: PUSH
13501: LD_VAR 0 14
13505: PPUSH
13506: LD_VAR 0 23
13510: PPUSH
13511: CALL_OW 296
13515: LESS
13516: IFFALSE 13534
// begin ComAttackUnit ( i , target1 ) ;
13518: LD_VAR 0 14
13522: PPUSH
13523: LD_VAR 0 22
13527: PPUSH
13528: CALL_OW 115
// end else
13532: GO 13548
// begin ComAttackUnit ( i , target2 ) ;
13534: LD_VAR 0 14
13538: PPUSH
13539: LD_VAR 0 23
13543: PPUSH
13544: CALL_OW 115
// end ; end ;
13548: GO 13373
13550: POP
13551: POP
// until soldiersOK_list = [ ] ;
13552: LD_VAR 0 19
13556: PUSH
13557: EMPTY
13558: EQUAL
13559: IFFALSE 13126
// end ; if strategy = 2 then
13561: LD_VAR 0 12
13565: PUSH
13566: LD_INT 2
13568: EQUAL
13569: IFFALSE 14085
// begin repeat wait ( 0 0$1 ) ;
13571: LD_INT 35
13573: PPUSH
13574: CALL_OW 67
// for i in soldiersOK_list do
13578: LD_ADDR_VAR 0 14
13582: PUSH
13583: LD_VAR 0 19
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13623
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13591: LD_VAR 0 14
13595: PPUSH
13596: LD_INT 91
13598: PPUSH
13599: LD_INT 63
13601: PPUSH
13602: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13606: LD_VAR 0 14
13610: PPUSH
13611: LD_INT 75
13613: PPUSH
13614: LD_INT 33
13616: PPUSH
13617: CALL_OW 174
// end ;
13621: GO 13588
13623: POP
13624: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13625: LD_INT 13
13627: PPUSH
13628: LD_INT 22
13630: PUSH
13631: LD_VAR 0 1
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PPUSH
13640: CALL_OW 70
13644: PUSH
13645: LD_INT 2
13647: GREATER
13648: IFFALSE 13571
// repeat wait ( 0 0$3 ) ;
13650: LD_INT 105
13652: PPUSH
13653: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13657: LD_ADDR_VAR 0 17
13661: PUSH
13662: LD_INT 22
13664: PUSH
13665: LD_VAR 0 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: LD_INT 3
13679: PUSH
13680: LD_INT 24
13682: PUSH
13683: LD_INT 550
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 24
13696: PUSH
13697: LD_INT 250
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 69
13717: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13718: LD_ADDR_VAR 0 19
13722: PUSH
13723: LD_INT 22
13725: PUSH
13726: LD_VAR 0 1
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 25
13740: PUSH
13741: LD_INT 1
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 5
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 25
13760: PUSH
13761: LD_INT 8
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 25
13770: PUSH
13771: LD_INT 9
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 24
13787: PUSH
13788: LD_INT 1000
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: ST_TO_ADDR
// if medicCount > 0 then
13805: LD_VAR 0 7
13809: PUSH
13810: LD_INT 0
13812: GREATER
13813: IFFALSE 13887
// begin if damageUnit_list > 0 then
13815: LD_VAR 0 17
13819: PUSH
13820: LD_INT 0
13822: GREATER
13823: IFFALSE 13887
// begin for i in damageUnit_list do
13825: LD_ADDR_VAR 0 14
13829: PUSH
13830: LD_VAR 0 17
13834: PUSH
13835: FOR_IN
13836: IFFALSE 13885
// begin ComMoveToArea ( i , healArea ) ;
13838: LD_VAR 0 14
13842: PPUSH
13843: LD_VAR 0 10
13847: PPUSH
13848: CALL_OW 113
// for j in medic_list do
13852: LD_ADDR_VAR 0 15
13856: PUSH
13857: LD_VAR 0 18
13861: PUSH
13862: FOR_IN
13863: IFFALSE 13881
// AddComHeal ( j , i ) ;
13865: LD_VAR 0 15
13869: PPUSH
13870: LD_VAR 0 14
13874: PPUSH
13875: CALL_OW 188
13879: GO 13862
13881: POP
13882: POP
// end ;
13883: GO 13835
13885: POP
13886: POP
// end ; end ; for i in soldiersOK_list do
13887: LD_ADDR_VAR 0 14
13891: PUSH
13892: LD_VAR 0 19
13896: PUSH
13897: FOR_IN
13898: IFFALSE 14074
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13900: LD_ADDR_VAR 0 22
13904: PUSH
13905: LD_INT 22
13907: PUSH
13908: LD_VAR 0 11
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: PPUSH
13922: LD_VAR 0 14
13926: PPUSH
13927: CALL_OW 74
13931: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13932: LD_ADDR_VAR 0 23
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 11
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 2
13951: PUSH
13952: LD_INT 59
13954: PUSH
13955: EMPTY
13956: LIST
13957: PUSH
13958: LD_INT 21
13960: PUSH
13961: LD_INT 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 21
13970: PUSH
13971: LD_INT 2
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: EMPTY
13989: LIST
13990: PPUSH
13991: CALL_OW 69
13995: PPUSH
13996: LD_VAR 0 14
14000: PPUSH
14001: CALL_OW 74
14005: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14006: LD_VAR 0 14
14010: PPUSH
14011: LD_VAR 0 22
14015: PPUSH
14016: CALL_OW 296
14020: PUSH
14021: LD_INT 6
14023: PLUS
14024: PUSH
14025: LD_VAR 0 14
14029: PPUSH
14030: LD_VAR 0 23
14034: PPUSH
14035: CALL_OW 296
14039: LESS
14040: IFFALSE 14058
// begin ComAttackUnit ( i , target1 ) ;
14042: LD_VAR 0 14
14046: PPUSH
14047: LD_VAR 0 22
14051: PPUSH
14052: CALL_OW 115
// end else
14056: GO 14072
// begin ComAttackUnit ( i , target2 ) ;
14058: LD_VAR 0 14
14062: PPUSH
14063: LD_VAR 0 23
14067: PPUSH
14068: CALL_OW 115
// end ; end ;
14072: GO 13897
14074: POP
14075: POP
// until soldiersOK_list = [ ] ;
14076: LD_VAR 0 19
14080: PUSH
14081: EMPTY
14082: EQUAL
14083: IFFALSE 13650
// end ; if strategy = 3 then
14085: LD_VAR 0 12
14089: PUSH
14090: LD_INT 3
14092: EQUAL
14093: IFFALSE 14639
// begin repeat wait ( 0 0$3 ) ;
14095: LD_INT 105
14097: PPUSH
14098: CALL_OW 67
// for i in soldiersOK_list do
14102: LD_ADDR_VAR 0 14
14106: PUSH
14107: LD_VAR 0 19
14111: PUSH
14112: FOR_IN
14113: IFFALSE 14177
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14115: LD_VAR 0 14
14119: PPUSH
14120: LD_INT 63
14122: PPUSH
14123: LD_INT 71
14125: PPUSH
14126: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14130: LD_VAR 0 14
14134: PPUSH
14135: LD_INT 35
14137: PPUSH
14138: LD_INT 44
14140: PPUSH
14141: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14145: LD_VAR 0 14
14149: PPUSH
14150: LD_INT 23
14152: PPUSH
14153: LD_INT 18
14155: PPUSH
14156: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14160: LD_VAR 0 14
14164: PPUSH
14165: LD_INT 26
14167: PPUSH
14168: LD_INT 12
14170: PPUSH
14171: CALL_OW 174
// end ;
14175: GO 14112
14177: POP
14178: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14179: LD_INT 14
14181: PPUSH
14182: LD_INT 22
14184: PUSH
14185: LD_VAR 0 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PPUSH
14194: CALL_OW 70
14198: PUSH
14199: LD_INT 2
14201: GREATER
14202: IFFALSE 14095
// repeat wait ( 0 0$1 ) ;
14204: LD_INT 35
14206: PPUSH
14207: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14211: LD_ADDR_VAR 0 17
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_VAR 0 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 24
14236: PUSH
14237: LD_INT 550
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 24
14250: PUSH
14251: LD_INT 250
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 69
14271: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14272: LD_ADDR_VAR 0 19
14276: PUSH
14277: LD_INT 22
14279: PUSH
14280: LD_VAR 0 1
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: LD_INT 25
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 25
14304: PUSH
14305: LD_INT 5
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 25
14314: PUSH
14315: LD_INT 8
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 25
14324: PUSH
14325: LD_INT 9
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 24
14341: PUSH
14342: LD_INT 1000
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL_OW 69
14358: ST_TO_ADDR
// if medicCount > 0 then
14359: LD_VAR 0 7
14363: PUSH
14364: LD_INT 0
14366: GREATER
14367: IFFALSE 14441
// begin if damageUnit_list > 0 then
14369: LD_VAR 0 17
14373: PUSH
14374: LD_INT 0
14376: GREATER
14377: IFFALSE 14441
// begin for i in damageUnit_list do
14379: LD_ADDR_VAR 0 14
14383: PUSH
14384: LD_VAR 0 17
14388: PUSH
14389: FOR_IN
14390: IFFALSE 14439
// begin ComMoveToArea ( i , healArea ) ;
14392: LD_VAR 0 14
14396: PPUSH
14397: LD_VAR 0 10
14401: PPUSH
14402: CALL_OW 113
// for j in medic_list do
14406: LD_ADDR_VAR 0 15
14410: PUSH
14411: LD_VAR 0 18
14415: PUSH
14416: FOR_IN
14417: IFFALSE 14435
// AddComHeal ( j , i ) ;
14419: LD_VAR 0 15
14423: PPUSH
14424: LD_VAR 0 14
14428: PPUSH
14429: CALL_OW 188
14433: GO 14416
14435: POP
14436: POP
// end ;
14437: GO 14389
14439: POP
14440: POP
// end ; end ; for i in soldiersOK_list do
14441: LD_ADDR_VAR 0 14
14445: PUSH
14446: LD_VAR 0 19
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14628
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14454: LD_ADDR_VAR 0 22
14458: PUSH
14459: LD_INT 22
14461: PUSH
14462: LD_VAR 0 11
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 69
14475: PPUSH
14476: LD_VAR 0 14
14480: PPUSH
14481: CALL_OW 74
14485: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14486: LD_ADDR_VAR 0 23
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_VAR 0 11
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 2
14505: PUSH
14506: LD_INT 59
14508: PUSH
14509: EMPTY
14510: LIST
14511: PUSH
14512: LD_INT 21
14514: PUSH
14515: LD_INT 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 21
14524: PUSH
14525: LD_INT 2
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: EMPTY
14543: LIST
14544: PPUSH
14545: CALL_OW 69
14549: PPUSH
14550: LD_VAR 0 14
14554: PPUSH
14555: CALL_OW 74
14559: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14560: LD_VAR 0 14
14564: PPUSH
14565: LD_VAR 0 22
14569: PPUSH
14570: CALL_OW 296
14574: PUSH
14575: LD_INT 6
14577: PLUS
14578: PUSH
14579: LD_VAR 0 14
14583: PPUSH
14584: LD_VAR 0 23
14588: PPUSH
14589: CALL_OW 296
14593: LESS
14594: IFFALSE 14612
// begin ComAttackUnit ( i , target1 ) ;
14596: LD_VAR 0 14
14600: PPUSH
14601: LD_VAR 0 22
14605: PPUSH
14606: CALL_OW 115
// end else
14610: GO 14626
// begin ComAttackUnit ( i , target2 ) ;
14612: LD_VAR 0 14
14616: PPUSH
14617: LD_VAR 0 23
14621: PPUSH
14622: CALL_OW 115
// end ; end ;
14626: GO 14451
14628: POP
14629: POP
// until soldiersOK_list = [ ] ;
14630: LD_VAR 0 19
14634: PUSH
14635: EMPTY
14636: EQUAL
14637: IFFALSE 14204
// end ; end ;
14639: LD_VAR 0 13
14643: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14644: LD_INT 0
14646: PPUSH
14647: PPUSH
14648: PPUSH
14649: PPUSH
14650: PPUSH
14651: PPUSH
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
// amChassisTab = [ ] ;
14657: LD_ADDR_VAR 0 19
14661: PUSH
14662: EMPTY
14663: ST_TO_ADDR
// arChassisTab = [ ] ;
14664: LD_ADDR_VAR 0 18
14668: PUSH
14669: EMPTY
14670: ST_TO_ADDR
// ruChassisTab = [ ] ;
14671: LD_ADDR_VAR 0 17
14675: PUSH
14676: EMPTY
14677: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14678: LD_INT 35
14680: PPUSH
14681: CALL_OW 67
// if nation = 1 then
14685: LD_VAR 0 5
14689: PUSH
14690: LD_INT 1
14692: EQUAL
14693: IFFALSE 15184
// begin uc_side = side ;
14695: LD_ADDR_OWVAR 20
14699: PUSH
14700: LD_VAR 0 2
14704: ST_TO_ADDR
// uc_nation = nation ;
14705: LD_ADDR_OWVAR 21
14709: PUSH
14710: LD_VAR 0 5
14714: ST_TO_ADDR
// vc_engine = vehengine ;
14715: LD_ADDR_OWVAR 39
14719: PUSH
14720: LD_VAR 0 6
14724: ST_TO_ADDR
// vc_control = vehcontrol ;
14725: LD_ADDR_OWVAR 38
14729: PUSH
14730: LD_VAR 0 7
14734: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14735: LD_ADDR_OWVAR 40
14739: PUSH
14740: LD_VAR 0 10
14744: PUSH
14745: LD_INT 1
14747: PPUSH
14748: LD_VAR 0 10
14752: PPUSH
14753: CALL_OW 12
14757: ARRAY
14758: ST_TO_ADDR
// for j = 1 to AMWeapon do
14759: LD_ADDR_VAR 0 14
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_VAR 0 10
14773: PUSH
14774: FOR_TO
14775: IFFALSE 15076
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14777: LD_VAR 0 10
14781: PUSH
14782: LD_VAR 0 14
14786: ARRAY
14787: PUSH
14788: LD_INT 2
14790: EQUAL
14791: PUSH
14792: LD_VAR 0 10
14796: PUSH
14797: LD_VAR 0 14
14801: ARRAY
14802: PUSH
14803: LD_INT 3
14805: EQUAL
14806: OR
14807: IFFALSE 14860
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14809: LD_ADDR_VAR 0 19
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: LD_INT 3
14822: PUSH
14823: LD_INT 4
14825: PUSH
14826: LD_INT 5
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14836: LD_ADDR_OWVAR 37
14840: PUSH
14841: LD_VAR 0 19
14845: PUSH
14846: LD_INT 1
14848: PPUSH
14849: LD_VAR 0 19
14853: PPUSH
14854: CALL_OW 12
14858: ARRAY
14859: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14860: LD_VAR 0 10
14864: PUSH
14865: LD_VAR 0 14
14869: ARRAY
14870: PUSH
14871: LD_INT 4
14873: EQUAL
14874: PUSH
14875: LD_VAR 0 10
14879: PUSH
14880: LD_VAR 0 14
14884: ARRAY
14885: PUSH
14886: LD_INT 5
14888: EQUAL
14889: OR
14890: PUSH
14891: LD_VAR 0 10
14895: PUSH
14896: LD_VAR 0 14
14900: ARRAY
14901: PUSH
14902: LD_INT 9
14904: EQUAL
14905: OR
14906: PUSH
14907: LD_VAR 0 10
14911: PUSH
14912: LD_VAR 0 14
14916: ARRAY
14917: PUSH
14918: LD_INT 11
14920: EQUAL
14921: OR
14922: PUSH
14923: LD_VAR 0 10
14927: PUSH
14928: LD_VAR 0 14
14932: ARRAY
14933: PUSH
14934: LD_INT 7
14936: EQUAL
14937: OR
14938: IFFALSE 14987
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14940: LD_ADDR_VAR 0 19
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: LD_INT 3
14950: PUSH
14951: LD_INT 4
14953: PUSH
14954: LD_INT 5
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14963: LD_ADDR_OWVAR 37
14967: PUSH
14968: LD_VAR 0 19
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 19
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14987: LD_VAR 0 10
14991: PUSH
14992: LD_VAR 0 14
14996: ARRAY
14997: PUSH
14998: LD_INT 8
15000: EQUAL
15001: PUSH
15002: LD_VAR 0 10
15006: PUSH
15007: LD_VAR 0 14
15011: ARRAY
15012: PUSH
15013: LD_INT 6
15015: EQUAL
15016: OR
15017: PUSH
15018: LD_VAR 0 10
15022: PUSH
15023: LD_VAR 0 14
15027: ARRAY
15028: PUSH
15029: LD_INT 10
15031: EQUAL
15032: OR
15033: IFFALSE 15074
// begin amChassisTab = [ 4 , 5 ] ;
15035: LD_ADDR_VAR 0 19
15039: PUSH
15040: LD_INT 4
15042: PUSH
15043: LD_INT 5
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15050: LD_ADDR_OWVAR 37
15054: PUSH
15055: LD_VAR 0 19
15059: PUSH
15060: LD_INT 1
15062: PPUSH
15063: LD_VAR 0 19
15067: PPUSH
15068: CALL_OW 12
15072: ARRAY
15073: ST_TO_ADDR
// end ; end ;
15074: GO 14774
15076: POP
15077: POP
// veh = CreateVehicle ;
15078: LD_ADDR_VAR 0 16
15082: PUSH
15083: CALL_OW 45
15087: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15088: LD_VAR 0 16
15092: PPUSH
15093: LD_VAR 0 1
15097: PPUSH
15098: LD_INT 0
15100: PPUSH
15101: CALL_OW 49
// if vehControl = 1 then
15105: LD_VAR 0 7
15109: PUSH
15110: LD_INT 1
15112: EQUAL
15113: IFFALSE 15170
// begin hc_gallery =  ;
15115: LD_ADDR_OWVAR 33
15119: PUSH
15120: LD_STRING 
15122: ST_TO_ADDR
// hc_name =  ;
15123: LD_ADDR_OWVAR 26
15127: PUSH
15128: LD_STRING 
15130: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15131: LD_INT 0
15133: PPUSH
15134: LD_INT 3
15136: PPUSH
15137: LD_VAR 0 4
15141: PPUSH
15142: CALL_OW 380
// un = CreateHuman ;
15146: LD_ADDR_VAR 0 15
15150: PUSH
15151: CALL_OW 44
15155: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15156: LD_VAR 0 15
15160: PPUSH
15161: LD_VAR 0 16
15165: PPUSH
15166: CALL_OW 52
// end ; i = i + 1 ;
15170: LD_ADDR_VAR 0 13
15174: PUSH
15175: LD_VAR 0 13
15179: PUSH
15180: LD_INT 1
15182: PLUS
15183: ST_TO_ADDR
// end ; if nation = 2 then
15184: LD_VAR 0 5
15188: PUSH
15189: LD_INT 2
15191: EQUAL
15192: IFFALSE 15616
// begin uc_side = side ;
15194: LD_ADDR_OWVAR 20
15198: PUSH
15199: LD_VAR 0 2
15203: ST_TO_ADDR
// uc_nation = nation ;
15204: LD_ADDR_OWVAR 21
15208: PUSH
15209: LD_VAR 0 5
15213: ST_TO_ADDR
// vc_engine = vehengine ;
15214: LD_ADDR_OWVAR 39
15218: PUSH
15219: LD_VAR 0 6
15223: ST_TO_ADDR
// vc_control = vehcontrol ;
15224: LD_ADDR_OWVAR 38
15228: PUSH
15229: LD_VAR 0 7
15233: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15234: LD_ADDR_OWVAR 40
15238: PUSH
15239: LD_VAR 0 9
15243: PUSH
15244: LD_INT 1
15246: PPUSH
15247: LD_VAR 0 9
15251: PPUSH
15252: CALL_OW 12
15256: ARRAY
15257: ST_TO_ADDR
// for j = 1 to ARWeapons do
15258: LD_ADDR_VAR 0 14
15262: PUSH
15263: DOUBLE
15264: LD_INT 1
15266: DEC
15267: ST_TO_ADDR
15268: LD_VAR 0 9
15272: PUSH
15273: FOR_TO
15274: IFFALSE 15508
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15276: LD_VAR 0 9
15280: PUSH
15281: LD_VAR 0 14
15285: ARRAY
15286: PUSH
15287: LD_INT 24
15289: EQUAL
15290: PUSH
15291: LD_VAR 0 9
15295: PUSH
15296: LD_VAR 0 14
15300: ARRAY
15301: PUSH
15302: LD_INT 22
15304: EQUAL
15305: OR
15306: PUSH
15307: LD_VAR 0 9
15311: PUSH
15312: LD_VAR 0 14
15316: ARRAY
15317: PUSH
15318: LD_INT 23
15320: EQUAL
15321: OR
15322: PUSH
15323: LD_VAR 0 9
15327: PUSH
15328: LD_VAR 0 14
15332: ARRAY
15333: PUSH
15334: LD_INT 30
15336: EQUAL
15337: OR
15338: IFFALSE 15387
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15340: LD_ADDR_VAR 0 18
15344: PUSH
15345: LD_INT 11
15347: PUSH
15348: LD_INT 12
15350: PUSH
15351: LD_INT 13
15353: PUSH
15354: LD_INT 14
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15363: LD_ADDR_OWVAR 37
15367: PUSH
15368: LD_VAR 0 18
15372: PUSH
15373: LD_INT 1
15375: PPUSH
15376: LD_VAR 0 18
15380: PPUSH
15381: CALL_OW 12
15385: ARRAY
15386: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15387: LD_VAR 0 9
15391: PUSH
15392: LD_VAR 0 14
15396: ARRAY
15397: PUSH
15398: LD_INT 29
15400: EQUAL
15401: PUSH
15402: LD_VAR 0 9
15406: PUSH
15407: LD_VAR 0 14
15411: ARRAY
15412: PUSH
15413: LD_INT 28
15415: EQUAL
15416: OR
15417: PUSH
15418: LD_VAR 0 9
15422: PUSH
15423: LD_VAR 0 14
15427: ARRAY
15428: PUSH
15429: LD_INT 27
15431: EQUAL
15432: OR
15433: PUSH
15434: LD_VAR 0 9
15438: PUSH
15439: LD_VAR 0 14
15443: ARRAY
15444: PUSH
15445: LD_INT 26
15447: EQUAL
15448: OR
15449: PUSH
15450: LD_VAR 0 9
15454: PUSH
15455: LD_VAR 0 14
15459: ARRAY
15460: PUSH
15461: LD_INT 25
15463: EQUAL
15464: OR
15465: IFFALSE 15506
// begin arChassisTab = [ 13 , 14 ] ;
15467: LD_ADDR_VAR 0 18
15471: PUSH
15472: LD_INT 13
15474: PUSH
15475: LD_INT 14
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15482: LD_ADDR_OWVAR 37
15486: PUSH
15487: LD_VAR 0 18
15491: PUSH
15492: LD_INT 1
15494: PPUSH
15495: LD_VAR 0 18
15499: PPUSH
15500: CALL_OW 12
15504: ARRAY
15505: ST_TO_ADDR
// end ; end ;
15506: GO 15273
15508: POP
15509: POP
// veh = CreateVehicle ;
15510: LD_ADDR_VAR 0 16
15514: PUSH
15515: CALL_OW 45
15519: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15520: LD_VAR 0 16
15524: PPUSH
15525: LD_VAR 0 1
15529: PPUSH
15530: LD_INT 0
15532: PPUSH
15533: CALL_OW 49
// if vehcontrol = 1 then
15537: LD_VAR 0 7
15541: PUSH
15542: LD_INT 1
15544: EQUAL
15545: IFFALSE 15602
// begin hc_gallery =  ;
15547: LD_ADDR_OWVAR 33
15551: PUSH
15552: LD_STRING 
15554: ST_TO_ADDR
// hc_name =  ;
15555: LD_ADDR_OWVAR 26
15559: PUSH
15560: LD_STRING 
15562: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15563: LD_INT 0
15565: PPUSH
15566: LD_INT 3
15568: PPUSH
15569: LD_VAR 0 4
15573: PPUSH
15574: CALL_OW 380
// un = CreateHuman ;
15578: LD_ADDR_VAR 0 15
15582: PUSH
15583: CALL_OW 44
15587: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15588: LD_VAR 0 15
15592: PPUSH
15593: LD_VAR 0 16
15597: PPUSH
15598: CALL_OW 52
// end ; i = i + 1 ;
15602: LD_ADDR_VAR 0 13
15606: PUSH
15607: LD_VAR 0 13
15611: PUSH
15612: LD_INT 1
15614: PLUS
15615: ST_TO_ADDR
// end ; if nation = 3 then
15616: LD_VAR 0 5
15620: PUSH
15621: LD_INT 3
15623: EQUAL
15624: IFFALSE 16016
// begin uc_side = side ;
15626: LD_ADDR_OWVAR 20
15630: PUSH
15631: LD_VAR 0 2
15635: ST_TO_ADDR
// uc_nation = nation ;
15636: LD_ADDR_OWVAR 21
15640: PUSH
15641: LD_VAR 0 5
15645: ST_TO_ADDR
// vc_engine = vehengine ;
15646: LD_ADDR_OWVAR 39
15650: PUSH
15651: LD_VAR 0 6
15655: ST_TO_ADDR
// vc_control = vehcontrol ;
15656: LD_ADDR_OWVAR 38
15660: PUSH
15661: LD_VAR 0 7
15665: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15666: LD_ADDR_OWVAR 40
15670: PUSH
15671: LD_VAR 0 8
15675: PUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_VAR 0 8
15683: PPUSH
15684: CALL_OW 12
15688: ARRAY
15689: ST_TO_ADDR
// for j = 1 to RuWeapons do
15690: LD_ADDR_VAR 0 14
15694: PUSH
15695: DOUBLE
15696: LD_INT 1
15698: DEC
15699: ST_TO_ADDR
15700: LD_VAR 0 8
15704: PUSH
15705: FOR_TO
15706: IFFALSE 15908
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15708: LD_VAR 0 8
15712: PUSH
15713: LD_VAR 0 14
15717: ARRAY
15718: PUSH
15719: LD_INT 42
15721: EQUAL
15722: PUSH
15723: LD_VAR 0 8
15727: PUSH
15728: LD_VAR 0 14
15732: ARRAY
15733: PUSH
15734: LD_INT 43
15736: EQUAL
15737: OR
15738: PUSH
15739: LD_VAR 0 8
15743: PUSH
15744: LD_VAR 0 14
15748: ARRAY
15749: PUSH
15750: LD_INT 44
15752: EQUAL
15753: OR
15754: PUSH
15755: LD_VAR 0 8
15759: PUSH
15760: LD_VAR 0 14
15764: ARRAY
15765: PUSH
15766: LD_INT 45
15768: EQUAL
15769: OR
15770: PUSH
15771: LD_VAR 0 8
15775: PUSH
15776: LD_VAR 0 14
15780: ARRAY
15781: PUSH
15782: LD_INT 49
15784: EQUAL
15785: OR
15786: IFFALSE 15835
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15788: LD_ADDR_VAR 0 17
15792: PUSH
15793: LD_INT 21
15795: PUSH
15796: LD_INT 22
15798: PUSH
15799: LD_INT 23
15801: PUSH
15802: LD_INT 24
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15811: LD_ADDR_OWVAR 37
15815: PUSH
15816: LD_VAR 0 17
15820: PUSH
15821: LD_INT 1
15823: PPUSH
15824: LD_VAR 0 17
15828: PPUSH
15829: CALL_OW 12
15833: ARRAY
15834: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15835: LD_VAR 0 8
15839: PUSH
15840: LD_VAR 0 14
15844: ARRAY
15845: PUSH
15846: LD_INT 46
15848: EQUAL
15849: PUSH
15850: LD_VAR 0 8
15854: PUSH
15855: LD_VAR 0 14
15859: ARRAY
15860: PUSH
15861: LD_INT 47
15863: EQUAL
15864: OR
15865: IFFALSE 15906
// begin ruChassisTab = [ 23 , 24 ] ;
15867: LD_ADDR_VAR 0 17
15871: PUSH
15872: LD_INT 23
15874: PUSH
15875: LD_INT 24
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15882: LD_ADDR_OWVAR 37
15886: PUSH
15887: LD_VAR 0 17
15891: PUSH
15892: LD_INT 1
15894: PPUSH
15895: LD_VAR 0 17
15899: PPUSH
15900: CALL_OW 12
15904: ARRAY
15905: ST_TO_ADDR
// end ; end ;
15906: GO 15705
15908: POP
15909: POP
// veh = CreateVehicle ;
15910: LD_ADDR_VAR 0 16
15914: PUSH
15915: CALL_OW 45
15919: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15920: LD_VAR 0 16
15924: PPUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: LD_INT 0
15932: PPUSH
15933: CALL_OW 49
// if vehcontrol = 1 then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 1
15944: EQUAL
15945: IFFALSE 16002
// begin hc_gallery =  ;
15947: LD_ADDR_OWVAR 33
15951: PUSH
15952: LD_STRING 
15954: ST_TO_ADDR
// hc_name =  ;
15955: LD_ADDR_OWVAR 26
15959: PUSH
15960: LD_STRING 
15962: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15963: LD_INT 0
15965: PPUSH
15966: LD_INT 3
15968: PPUSH
15969: LD_VAR 0 4
15973: PPUSH
15974: CALL_OW 380
// un = CreateHuman ;
15978: LD_ADDR_VAR 0 15
15982: PUSH
15983: CALL_OW 44
15987: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15988: LD_VAR 0 15
15992: PPUSH
15993: LD_VAR 0 16
15997: PPUSH
15998: CALL_OW 52
// end ; i = i + 1 ;
16002: LD_ADDR_VAR 0 13
16006: PUSH
16007: LD_VAR 0 13
16011: PUSH
16012: LD_INT 1
16014: PLUS
16015: ST_TO_ADDR
// end ; until i = vehCount ;
16016: LD_VAR 0 13
16020: PUSH
16021: LD_VAR 0 3
16025: EQUAL
16026: IFFALSE 14678
// repeat wait ( 0 0$1 ) ;
16028: LD_INT 35
16030: PPUSH
16031: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16035: LD_ADDR_VAR 0 20
16039: PUSH
16040: LD_INT 22
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 21
16054: PUSH
16055: LD_INT 2
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 24
16064: PUSH
16065: LD_INT 250
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: PPUSH
16077: CALL_OW 69
16081: ST_TO_ADDR
// if vehicleOK_list > 0 then
16082: LD_VAR 0 20
16086: PUSH
16087: LD_INT 0
16089: GREATER
16090: IFFALSE 16281
// begin for i in vehicleOK_list do
16092: LD_ADDR_VAR 0 13
16096: PUSH
16097: LD_VAR 0 20
16101: PUSH
16102: FOR_IN
16103: IFFALSE 16279
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16105: LD_ADDR_VAR 0 21
16109: PUSH
16110: LD_INT 22
16112: PUSH
16113: LD_VAR 0 11
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 69
16126: PPUSH
16127: LD_VAR 0 13
16131: PPUSH
16132: CALL_OW 74
16136: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16137: LD_ADDR_VAR 0 22
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_VAR 0 11
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 59
16159: PUSH
16160: EMPTY
16161: LIST
16162: PUSH
16163: LD_INT 21
16165: PUSH
16166: LD_INT 1
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 21
16175: PUSH
16176: LD_INT 2
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: PPUSH
16201: LD_VAR 0 13
16205: PPUSH
16206: CALL_OW 74
16210: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16211: LD_VAR 0 13
16215: PPUSH
16216: LD_VAR 0 21
16220: PPUSH
16221: CALL_OW 296
16225: PUSH
16226: LD_INT 6
16228: PLUS
16229: PUSH
16230: LD_VAR 0 13
16234: PPUSH
16235: LD_VAR 0 22
16239: PPUSH
16240: CALL_OW 296
16244: LESS
16245: IFFALSE 16263
// begin ComAttackUnit ( i , target1 ) ;
16247: LD_VAR 0 13
16251: PPUSH
16252: LD_VAR 0 21
16256: PPUSH
16257: CALL_OW 115
// end else
16261: GO 16277
// begin ComAttackUnit ( i , target2 ) ;
16263: LD_VAR 0 13
16267: PPUSH
16268: LD_VAR 0 22
16272: PPUSH
16273: CALL_OW 115
// end ; end ;
16277: GO 16102
16279: POP
16280: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16281: LD_INT 22
16283: PUSH
16284: LD_VAR 0 2
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 21
16295: PUSH
16296: LD_INT 2
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 24
16305: PUSH
16306: LD_INT 250
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: PPUSH
16318: CALL_OW 69
16322: PUSH
16323: LD_INT 0
16325: EQUAL
16326: IFFALSE 16028
// end ;
16328: LD_VAR 0 12
16332: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
16342: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16343: LD_ADDR_VAR 0 7
16347: PUSH
16348: LD_INT 22
16350: PUSH
16351: LD_VAR 0 1
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: LD_INT 3
16365: PUSH
16366: LD_INT 24
16368: PUSH
16369: LD_INT 550
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 24
16382: PUSH
16383: LD_INT 250
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 69
16403: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16404: LD_ADDR_VAR 0 8
16408: PUSH
16409: LD_INT 22
16411: PUSH
16412: LD_VAR 0 1
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 2
16423: PUSH
16424: LD_INT 25
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 25
16436: PUSH
16437: LD_INT 5
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 25
16446: PUSH
16447: LD_INT 8
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 25
16456: PUSH
16457: LD_INT 9
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 24
16473: PUSH
16474: LD_INT 1000
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16491: LD_ADDR_VAR 0 9
16495: PUSH
16496: LD_INT 22
16498: PUSH
16499: LD_VAR 0 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 25
16510: PUSH
16511: LD_INT 4
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL_OW 69
16526: ST_TO_ADDR
// if medicCount > 0 then
16527: LD_VAR 0 9
16531: PUSH
16532: LD_INT 0
16534: GREATER
16535: IFFALSE 16609
// begin if damageUnit_list > 0 then
16537: LD_VAR 0 7
16541: PUSH
16542: LD_INT 0
16544: GREATER
16545: IFFALSE 16609
// begin for i in damageUnit_list do
16547: LD_ADDR_VAR 0 5
16551: PUSH
16552: LD_VAR 0 7
16556: PUSH
16557: FOR_IN
16558: IFFALSE 16607
// begin ComMoveToArea ( i , healArea ) ;
16560: LD_VAR 0 5
16564: PPUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 113
// for j in medicCount do
16574: LD_ADDR_VAR 0 6
16578: PUSH
16579: LD_VAR 0 9
16583: PUSH
16584: FOR_IN
16585: IFFALSE 16603
// AddComHeal ( j , i ) ;
16587: LD_VAR 0 6
16591: PPUSH
16592: LD_VAR 0 5
16596: PPUSH
16597: CALL_OW 188
16601: GO 16584
16603: POP
16604: POP
// end ;
16605: GO 16557
16607: POP
16608: POP
// end ; end ; if soldiersOK_list > 0 then
16609: LD_VAR 0 8
16613: PUSH
16614: LD_INT 0
16616: GREATER
16617: IFFALSE 16808
// begin for i in soldiersOK_list do
16619: LD_ADDR_VAR 0 5
16623: PUSH
16624: LD_VAR 0 8
16628: PUSH
16629: FOR_IN
16630: IFFALSE 16806
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16632: LD_ADDR_VAR 0 10
16636: PUSH
16637: LD_INT 22
16639: PUSH
16640: LD_VAR 0 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PPUSH
16649: CALL_OW 69
16653: PPUSH
16654: LD_VAR 0 5
16658: PPUSH
16659: CALL_OW 74
16663: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16664: LD_ADDR_VAR 0 11
16668: PUSH
16669: LD_INT 22
16671: PUSH
16672: LD_VAR 0 3
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 59
16686: PUSH
16687: EMPTY
16688: LIST
16689: PUSH
16690: LD_INT 21
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 21
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: PPUSH
16728: LD_VAR 0 5
16732: PPUSH
16733: CALL_OW 74
16737: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16738: LD_VAR 0 5
16742: PPUSH
16743: LD_VAR 0 10
16747: PPUSH
16748: CALL_OW 296
16752: PUSH
16753: LD_INT 8
16755: PLUS
16756: PUSH
16757: LD_VAR 0 5
16761: PPUSH
16762: LD_VAR 0 11
16766: PPUSH
16767: CALL_OW 296
16771: LESS
16772: IFFALSE 16790
// begin ComAttackUnit ( i , target1 ) ;
16774: LD_VAR 0 5
16778: PPUSH
16779: LD_VAR 0 10
16783: PPUSH
16784: CALL_OW 115
// end else
16788: GO 16804
// begin ComAttackUnit ( i , target2 ) ;
16790: LD_VAR 0 5
16794: PPUSH
16795: LD_VAR 0 11
16799: PPUSH
16800: CALL_OW 115
// end ; end ;
16804: GO 16629
16806: POP
16807: POP
// end ; end ;
16808: LD_VAR 0 4
16812: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16813: LD_INT 0
16815: PPUSH
16816: PPUSH
// list := [ ] ;
16817: LD_ADDR_VAR 0 5
16821: PUSH
16822: EMPTY
16823: ST_TO_ADDR
// case d of 0 :
16824: LD_VAR 0 3
16828: PUSH
16829: LD_INT 0
16831: DOUBLE
16832: EQUAL
16833: IFTRUE 16837
16835: GO 16970
16837: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16838: LD_ADDR_VAR 0 5
16842: PUSH
16843: LD_VAR 0 1
16847: PUSH
16848: LD_INT 4
16850: MINUS
16851: PUSH
16852: LD_VAR 0 2
16856: PUSH
16857: LD_INT 4
16859: MINUS
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: LD_VAR 0 1
16873: PUSH
16874: LD_INT 3
16876: MINUS
16877: PUSH
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_VAR 0 1
16895: PUSH
16896: LD_INT 4
16898: PLUS
16899: PUSH
16900: LD_VAR 0 2
16904: PUSH
16905: LD_INT 4
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: PUSH
16913: LD_VAR 0 1
16917: PUSH
16918: LD_INT 3
16920: PLUS
16921: PUSH
16922: LD_VAR 0 2
16926: PUSH
16927: LD_INT 3
16929: PLUS
16930: PUSH
16931: LD_INT 5
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_VAR 0 2
16948: PUSH
16949: LD_INT 4
16951: PLUS
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: ST_TO_ADDR
// end ; 1 :
16968: GO 17668
16970: LD_INT 1
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 17111
16978: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16979: LD_ADDR_VAR 0 5
16983: PUSH
16984: LD_VAR 0 1
16988: PUSH
16989: LD_VAR 0 2
16993: PUSH
16994: LD_INT 4
16996: MINUS
16997: PUSH
16998: LD_INT 3
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: PUSH
17006: LD_VAR 0 1
17010: PUSH
17011: LD_INT 3
17013: MINUS
17014: PUSH
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 3
17022: MINUS
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: LD_VAR 0 1
17036: PUSH
17037: LD_INT 4
17039: MINUS
17040: PUSH
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 1
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: PUSH
17054: LD_VAR 0 1
17058: PUSH
17059: LD_VAR 0 2
17063: PUSH
17064: LD_INT 3
17066: PLUS
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: PUSH
17076: LD_VAR 0 1
17080: PUSH
17081: LD_INT 4
17083: PLUS
17084: PUSH
17085: LD_VAR 0 2
17089: PUSH
17090: LD_INT 4
17092: PLUS
17093: PUSH
17094: LD_INT 5
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: ST_TO_ADDR
// end ; 2 :
17109: GO 17668
17111: LD_INT 2
17113: DOUBLE
17114: EQUAL
17115: IFTRUE 17119
17117: GO 17248
17119: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17120: LD_ADDR_VAR 0 5
17124: PUSH
17125: LD_VAR 0 1
17129: PUSH
17130: LD_VAR 0 2
17134: PUSH
17135: LD_INT 3
17137: MINUS
17138: PUSH
17139: LD_INT 3
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: LD_VAR 0 1
17151: PUSH
17152: LD_INT 4
17154: PLUS
17155: PUSH
17156: LD_VAR 0 2
17160: PUSH
17161: LD_INT 4
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: PUSH
17169: LD_VAR 0 1
17173: PUSH
17174: LD_VAR 0 2
17178: PUSH
17179: LD_INT 4
17181: PLUS
17182: PUSH
17183: LD_INT 0
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: PUSH
17191: LD_VAR 0 1
17195: PUSH
17196: LD_INT 3
17198: MINUS
17199: PUSH
17200: LD_VAR 0 2
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: PUSH
17213: LD_VAR 0 1
17217: PUSH
17218: LD_INT 4
17220: MINUS
17221: PUSH
17222: LD_VAR 0 2
17226: PUSH
17227: LD_INT 4
17229: MINUS
17230: PUSH
17231: LD_INT 2
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: ST_TO_ADDR
// end ; 3 :
17246: GO 17668
17248: LD_INT 3
17250: DOUBLE
17251: EQUAL
17252: IFTRUE 17256
17254: GO 17389
17256: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17257: LD_ADDR_VAR 0 5
17261: PUSH
17262: LD_VAR 0 1
17266: PUSH
17267: LD_INT 3
17269: PLUS
17270: PUSH
17271: LD_VAR 0 2
17275: PUSH
17276: LD_INT 4
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: LD_VAR 0 1
17288: PUSH
17289: LD_INT 4
17291: PLUS
17292: PUSH
17293: LD_VAR 0 2
17297: PUSH
17298: LD_INT 4
17300: PLUS
17301: PUSH
17302: LD_INT 5
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: PUSH
17310: LD_VAR 0 1
17314: PUSH
17315: LD_INT 4
17317: MINUS
17318: PUSH
17319: LD_VAR 0 2
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: PUSH
17332: LD_VAR 0 1
17336: PUSH
17337: LD_VAR 0 2
17341: PUSH
17342: LD_INT 4
17344: MINUS
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: LIST
17353: PUSH
17354: LD_VAR 0 1
17358: PUSH
17359: LD_INT 3
17361: MINUS
17362: PUSH
17363: LD_VAR 0 2
17367: PUSH
17368: LD_INT 3
17370: MINUS
17371: PUSH
17372: LD_INT 2
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: ST_TO_ADDR
// end ; 4 :
17387: GO 17668
17389: LD_INT 4
17391: DOUBLE
17392: EQUAL
17393: IFTRUE 17397
17395: GO 17530
17397: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17398: LD_ADDR_VAR 0 5
17402: PUSH
17403: LD_VAR 0 1
17407: PUSH
17408: LD_VAR 0 2
17412: PUSH
17413: LD_INT 4
17415: PLUS
17416: PUSH
17417: LD_INT 0
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: LD_VAR 0 1
17429: PUSH
17430: LD_INT 3
17432: PLUS
17433: PUSH
17434: LD_VAR 0 2
17438: PUSH
17439: LD_INT 3
17441: PLUS
17442: PUSH
17443: LD_INT 5
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: LIST
17450: PUSH
17451: LD_VAR 0 1
17455: PUSH
17456: LD_INT 3
17458: PLUS
17459: PUSH
17460: LD_VAR 0 2
17464: PUSH
17465: LD_INT 4
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: LD_VAR 0 1
17477: PUSH
17478: LD_VAR 0 2
17482: PUSH
17483: LD_INT 3
17485: MINUS
17486: PUSH
17487: LD_INT 3
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: PUSH
17495: LD_VAR 0 1
17499: PUSH
17500: LD_INT 4
17502: MINUS
17503: PUSH
17504: LD_VAR 0 2
17508: PUSH
17509: LD_INT 4
17511: MINUS
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: ST_TO_ADDR
// end ; 5 :
17528: GO 17668
17530: LD_INT 5
17532: DOUBLE
17533: EQUAL
17534: IFTRUE 17538
17536: GO 17667
17538: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17539: LD_ADDR_VAR 0 5
17543: PUSH
17544: LD_VAR 0 1
17548: PUSH
17549: LD_INT 4
17551: MINUS
17552: PUSH
17553: LD_VAR 0 2
17557: PUSH
17558: LD_INT 1
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: LD_VAR 0 1
17570: PUSH
17571: LD_VAR 0 2
17575: PUSH
17576: LD_INT 4
17578: MINUS
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: LD_VAR 0 1
17592: PUSH
17593: LD_INT 4
17595: PLUS
17596: PUSH
17597: LD_VAR 0 2
17601: PUSH
17602: LD_INT 4
17604: PLUS
17605: PUSH
17606: LD_INT 5
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: LD_VAR 0 1
17618: PUSH
17619: LD_INT 3
17621: PLUS
17622: PUSH
17623: LD_VAR 0 2
17627: PUSH
17628: LD_INT 4
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: LD_VAR 0 1
17640: PUSH
17641: LD_VAR 0 2
17645: PUSH
17646: LD_INT 3
17648: PLUS
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: ST_TO_ADDR
// end ; end ;
17665: GO 17668
17667: POP
// result := list ;
17668: LD_ADDR_VAR 0 4
17672: PUSH
17673: LD_VAR 0 5
17677: ST_TO_ADDR
// end ;
17678: LD_VAR 0 4
17682: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17683: LD_INT 0
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
// result := false ;
17694: LD_ADDR_VAR 0 7
17698: PUSH
17699: LD_INT 0
17701: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17702: LD_VAR 0 1
17706: NOT
17707: PUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 266
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: IN
17728: NOT
17729: OR
17730: PUSH
17731: LD_VAR 0 2
17735: NOT
17736: OR
17737: PUSH
17738: LD_VAR 0 5
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: LD_INT 1
17748: PUSH
17749: LD_INT 2
17751: PUSH
17752: LD_INT 3
17754: PUSH
17755: LD_INT 4
17757: PUSH
17758: LD_INT 5
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: IN
17769: NOT
17770: OR
17771: PUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_VAR 0 4
17781: PPUSH
17782: CALL_OW 488
17786: NOT
17787: OR
17788: IFFALSE 17792
// exit ;
17790: GO 18473
// pom := GetBase ( bdepot ) ;
17792: LD_ADDR_VAR 0 10
17796: PUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 274
17806: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17807: LD_ADDR_VAR 0 11
17811: PUSH
17812: LD_VAR 0 2
17816: PPUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 248
17826: PPUSH
17827: CALL_OW 450
17831: ST_TO_ADDR
// if check_cost then
17832: LD_VAR 0 6
17836: IFFALSE 17913
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17838: LD_VAR 0 10
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL_OW 275
17850: PUSH
17851: LD_VAR 0 11
17855: PUSH
17856: LD_INT 1
17858: ARRAY
17859: GREATEREQUAL
17860: PUSH
17861: LD_VAR 0 10
17865: PPUSH
17866: LD_INT 2
17868: PPUSH
17869: CALL_OW 275
17873: PUSH
17874: LD_VAR 0 11
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: GREATEREQUAL
17883: AND
17884: PUSH
17885: LD_VAR 0 10
17889: PPUSH
17890: LD_INT 3
17892: PPUSH
17893: CALL_OW 275
17897: PUSH
17898: LD_VAR 0 11
17902: PUSH
17903: LD_INT 3
17905: ARRAY
17906: GREATEREQUAL
17907: AND
17908: NOT
17909: IFFALSE 17913
// exit ;
17911: GO 18473
// if GetBType ( bdepot ) = b_depot then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 266
17922: PUSH
17923: LD_INT 0
17925: EQUAL
17926: IFFALSE 17938
// dist := 28 else
17928: LD_ADDR_VAR 0 14
17932: PUSH
17933: LD_INT 28
17935: ST_TO_ADDR
17936: GO 17946
// dist := 36 ;
17938: LD_ADDR_VAR 0 14
17942: PUSH
17943: LD_INT 36
17945: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_VAR 0 4
17960: PPUSH
17961: CALL_OW 297
17965: PUSH
17966: LD_VAR 0 14
17970: GREATER
17971: IFFALSE 17975
// exit ;
17973: GO 18473
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17975: LD_ADDR_VAR 0 12
17979: PUSH
17980: LD_VAR 0 2
17984: PPUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: LD_VAR 0 4
17994: PPUSH
17995: LD_VAR 0 5
17999: PPUSH
18000: LD_VAR 0 1
18004: PPUSH
18005: CALL_OW 248
18009: PPUSH
18010: LD_INT 0
18012: PPUSH
18013: CALL 18478 0 6
18017: ST_TO_ADDR
// if not hexes then
18018: LD_VAR 0 12
18022: NOT
18023: IFFALSE 18027
// exit ;
18025: GO 18473
// hex := GetHexInfo ( x , y ) ;
18027: LD_ADDR_VAR 0 15
18031: PUSH
18032: LD_VAR 0 3
18036: PPUSH
18037: LD_VAR 0 4
18041: PPUSH
18042: CALL_OW 546
18046: ST_TO_ADDR
// if hex [ 1 ] then
18047: LD_VAR 0 15
18051: PUSH
18052: LD_INT 1
18054: ARRAY
18055: IFFALSE 18059
// exit ;
18057: GO 18473
// height := hex [ 2 ] ;
18059: LD_ADDR_VAR 0 13
18063: PUSH
18064: LD_VAR 0 15
18068: PUSH
18069: LD_INT 2
18071: ARRAY
18072: ST_TO_ADDR
// for i = 1 to hexes do
18073: LD_ADDR_VAR 0 8
18077: PUSH
18078: DOUBLE
18079: LD_INT 1
18081: DEC
18082: ST_TO_ADDR
18083: LD_VAR 0 12
18087: PUSH
18088: FOR_TO
18089: IFFALSE 18417
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18091: LD_VAR 0 12
18095: PUSH
18096: LD_VAR 0 8
18100: ARRAY
18101: PUSH
18102: LD_INT 1
18104: ARRAY
18105: PPUSH
18106: LD_VAR 0 12
18110: PUSH
18111: LD_VAR 0 8
18115: ARRAY
18116: PUSH
18117: LD_INT 2
18119: ARRAY
18120: PPUSH
18121: CALL_OW 488
18125: NOT
18126: IFFALSE 18130
// continue ;
18128: GO 18088
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18130: LD_ADDR_VAR 0 9
18134: PUSH
18135: LD_VAR 0 12
18139: PUSH
18140: LD_VAR 0 8
18144: ARRAY
18145: PUSH
18146: LD_INT 1
18148: ARRAY
18149: PPUSH
18150: LD_VAR 0 12
18154: PUSH
18155: LD_VAR 0 8
18159: ARRAY
18160: PUSH
18161: LD_INT 2
18163: ARRAY
18164: PPUSH
18165: CALL_OW 546
18169: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18170: LD_VAR 0 9
18174: PUSH
18175: LD_INT 1
18177: ARRAY
18178: PUSH
18179: LD_VAR 0 9
18183: PUSH
18184: LD_INT 2
18186: ARRAY
18187: PUSH
18188: LD_VAR 0 13
18192: PUSH
18193: LD_INT 2
18195: PLUS
18196: GREATER
18197: OR
18198: PUSH
18199: LD_VAR 0 9
18203: PUSH
18204: LD_INT 2
18206: ARRAY
18207: PUSH
18208: LD_VAR 0 13
18212: PUSH
18213: LD_INT 2
18215: MINUS
18216: LESS
18217: OR
18218: PUSH
18219: LD_VAR 0 9
18223: PUSH
18224: LD_INT 3
18226: ARRAY
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: LD_INT 8
18233: PUSH
18234: LD_INT 9
18236: PUSH
18237: LD_INT 10
18239: PUSH
18240: LD_INT 11
18242: PUSH
18243: LD_INT 12
18245: PUSH
18246: LD_INT 13
18248: PUSH
18249: LD_INT 16
18251: PUSH
18252: LD_INT 17
18254: PUSH
18255: LD_INT 18
18257: PUSH
18258: LD_INT 19
18260: PUSH
18261: LD_INT 20
18263: PUSH
18264: LD_INT 21
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: IN
18282: NOT
18283: OR
18284: PUSH
18285: LD_VAR 0 9
18289: PUSH
18290: LD_INT 5
18292: ARRAY
18293: NOT
18294: OR
18295: PUSH
18296: LD_VAR 0 9
18300: PUSH
18301: LD_INT 6
18303: ARRAY
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: LD_INT 7
18313: PUSH
18314: LD_INT 9
18316: PUSH
18317: LD_INT 10
18319: PUSH
18320: LD_INT 11
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: IN
18331: NOT
18332: OR
18333: PUSH
18334: LD_VAR 0 12
18338: PUSH
18339: LD_VAR 0 8
18343: ARRAY
18344: PUSH
18345: LD_INT 1
18347: ARRAY
18348: PPUSH
18349: LD_VAR 0 12
18353: PUSH
18354: LD_VAR 0 8
18358: ARRAY
18359: PUSH
18360: LD_INT 2
18362: ARRAY
18363: PPUSH
18364: CALL_OW 428
18368: PUSH
18369: LD_INT 0
18371: GREATER
18372: OR
18373: PUSH
18374: LD_VAR 0 12
18378: PUSH
18379: LD_VAR 0 8
18383: ARRAY
18384: PUSH
18385: LD_INT 1
18387: ARRAY
18388: PPUSH
18389: LD_VAR 0 12
18393: PUSH
18394: LD_VAR 0 8
18398: ARRAY
18399: PUSH
18400: LD_INT 2
18402: ARRAY
18403: PPUSH
18404: CALL_OW 351
18408: OR
18409: IFFALSE 18415
// exit ;
18411: POP
18412: POP
18413: GO 18473
// end ;
18415: GO 18088
18417: POP
18418: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18419: LD_VAR 0 2
18423: PUSH
18424: LD_INT 29
18426: PUSH
18427: LD_INT 30
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: IN
18434: PUSH
18435: LD_VAR 0 3
18439: PPUSH
18440: LD_VAR 0 4
18444: PPUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 255
18454: PPUSH
18455: CALL_OW 440
18459: NOT
18460: AND
18461: IFFALSE 18465
// exit ;
18463: GO 18473
// result := true ;
18465: LD_ADDR_VAR 0 7
18469: PUSH
18470: LD_INT 1
18472: ST_TO_ADDR
// end ;
18473: LD_VAR 0 7
18477: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18478: LD_INT 0
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
18491: PPUSH
18492: PPUSH
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
18530: PPUSH
18531: PPUSH
18532: PPUSH
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
// result = [ ] ;
18538: LD_ADDR_VAR 0 7
18542: PUSH
18543: EMPTY
18544: ST_TO_ADDR
// temp_list = [ ] ;
18545: LD_ADDR_VAR 0 9
18549: PUSH
18550: EMPTY
18551: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18552: LD_VAR 0 4
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: LD_INT 3
18568: PUSH
18569: LD_INT 4
18571: PUSH
18572: LD_INT 5
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: IN
18583: NOT
18584: PUSH
18585: LD_VAR 0 1
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: IN
18600: PUSH
18601: LD_VAR 0 5
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: IN
18620: NOT
18621: AND
18622: OR
18623: IFFALSE 18627
// exit ;
18625: GO 37012
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18627: LD_VAR 0 1
18631: PUSH
18632: LD_INT 6
18634: PUSH
18635: LD_INT 7
18637: PUSH
18638: LD_INT 8
18640: PUSH
18641: LD_INT 13
18643: PUSH
18644: LD_INT 12
18646: PUSH
18647: LD_INT 15
18649: PUSH
18650: LD_INT 11
18652: PUSH
18653: LD_INT 14
18655: PUSH
18656: LD_INT 10
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: IN
18670: IFFALSE 18680
// btype = b_lab ;
18672: LD_ADDR_VAR 0 1
18676: PUSH
18677: LD_INT 6
18679: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18680: LD_VAR 0 6
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: LIST
18698: IN
18699: NOT
18700: PUSH
18701: LD_VAR 0 1
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: LD_INT 2
18714: PUSH
18715: LD_INT 3
18717: PUSH
18718: LD_INT 6
18720: PUSH
18721: LD_INT 36
18723: PUSH
18724: LD_INT 4
18726: PUSH
18727: LD_INT 5
18729: PUSH
18730: LD_INT 31
18732: PUSH
18733: LD_INT 32
18735: PUSH
18736: LD_INT 33
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: IN
18752: NOT
18753: PUSH
18754: LD_VAR 0 6
18758: PUSH
18759: LD_INT 1
18761: EQUAL
18762: AND
18763: OR
18764: PUSH
18765: LD_VAR 0 1
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 3
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: IN
18780: NOT
18781: PUSH
18782: LD_VAR 0 6
18786: PUSH
18787: LD_INT 2
18789: EQUAL
18790: AND
18791: OR
18792: IFFALSE 18802
// mode = 0 ;
18794: LD_ADDR_VAR 0 6
18798: PUSH
18799: LD_INT 0
18801: ST_TO_ADDR
// case mode of 0 :
18802: LD_VAR 0 6
18806: PUSH
18807: LD_INT 0
18809: DOUBLE
18810: EQUAL
18811: IFTRUE 18815
18813: GO 30268
18815: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18816: LD_ADDR_VAR 0 11
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 2
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 0
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 1
18951: NEG
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 3
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19009: LD_ADDR_VAR 0 12
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: NEG
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 2
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 1
19121: NEG
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 2
19132: NEG
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 2
19155: NEG
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 3
19166: NEG
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 3
19177: NEG
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19205: LD_ADDR_VAR 0 13
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 1
19274: NEG
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: NEG
19287: PUSH
19288: LD_INT 2
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: NEG
19353: PUSH
19354: LD_INT 3
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 3
19364: NEG
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 3
19376: NEG
19377: PUSH
19378: LD_INT 3
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19404: LD_ADDR_VAR 0 14
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: LD_INT 0
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: NEG
19486: PUSH
19487: LD_INT 2
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: LD_INT 2
19500: NEG
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: LD_INT 1
19511: NEG
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: LD_INT 2
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 0
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 3
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 3
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: LD_INT 2
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19600: LD_ADDR_VAR 0 15
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: LD_INT 1
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: LD_INT 1
19673: NEG
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: NEG
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 3
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 3
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19793: LD_ADDR_VAR 0 16
19797: PUSH
19798: LD_INT 0
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: NEG
19929: PUSH
19930: LD_INT 2
19932: NEG
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 3
19950: PUSH
19951: LD_INT 3
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19986: LD_ADDR_VAR 0 17
19990: PUSH
19991: LD_INT 0
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 0
20079: PUSH
20080: LD_INT 2
20082: NEG
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 1
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 2
20101: PUSH
20102: LD_INT 0
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 2
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: LD_INT 2
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: NEG
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 2
20185: NEG
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20216: LD_ADDR_VAR 0 18
20220: PUSH
20221: LD_INT 0
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: NEG
20286: PUSH
20287: LD_INT 1
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: LD_INT 2
20301: NEG
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 0
20309: PUSH
20310: LD_INT 2
20312: NEG
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: NEG
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: NEG
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20446: LD_ADDR_VAR 0 19
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 0
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 1
20515: NEG
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: LD_INT 2
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 2
20542: NEG
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: LD_INT 2
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: LD_INT 2
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 2
20622: NEG
20623: PUSH
20624: LD_INT 0
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 2
20633: NEG
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: LD_INT 2
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20676: LD_ADDR_VAR 0 20
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 0
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: LD_INT 1
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: LD_INT 2
20761: NEG
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: LD_INT 2
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: NEG
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 2
20875: NEG
20876: PUSH
20877: LD_INT 2
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20906: LD_ADDR_VAR 0 21
20910: PUSH
20911: LD_INT 0
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 0
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 2
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: LD_INT 2
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: LD_INT 1
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: LD_INT 0
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 1
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 2
21041: PUSH
21042: LD_INT 2
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: NEG
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 2
21082: NEG
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: NEG
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: LD_INT 2
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21136: LD_ADDR_VAR 0 22
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 1
21209: NEG
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: LD_INT 2
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: LD_INT 2
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 1
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21366: LD_ADDR_VAR 0 23
21370: PUSH
21371: LD_INT 0
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: NEG
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: LD_INT 2
21462: NEG
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 1
21531: NEG
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 2
21542: NEG
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: LD_INT 3
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: LD_INT 3
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21646: LD_ADDR_VAR 0 24
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: NEG
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PUSH
21729: LD_INT 2
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: LD_INT 2
21742: NEG
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 0
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 2
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 2
21822: NEG
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 2
21845: NEG
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 2
21860: NEG
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 3
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21922: LD_ADDR_VAR 0 25
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 1
21980: NEG
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: NEG
22110: PUSH
22111: LD_INT 1
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 2
22121: NEG
22122: PUSH
22123: LD_INT 2
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 3
22143: PUSH
22144: LD_INT 2
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22196: LD_ADDR_VAR 0 26
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: NEG
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 0
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 2
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 2
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: NEG
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: LD_INT 0
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 2
22383: NEG
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 2
22395: NEG
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: LD_INT 3
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 3
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22472: LD_ADDR_VAR 0 27
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: LD_INT 2
22568: NEG
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 2
22671: NEG
22672: PUSH
22673: LD_INT 2
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 3
22705: NEG
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 3
22717: NEG
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22752: LD_ADDR_VAR 0 28
22756: PUSH
22757: LD_INT 0
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 0
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: NEG
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: LD_INT 1
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: LD_INT 2
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 2
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: NEG
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: NEG
22940: PUSH
22941: LD_INT 1
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: LD_INT 3
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: LD_INT 3
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 3
22987: NEG
22988: PUSH
22989: LD_INT 1
22991: NEG
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 3
22999: NEG
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23034: LD_ADDR_VAR 0 29
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: LD_INT 2
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: NEG
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: LD_INT 3
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 2
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 3
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23313: LD_ADDR_VAR 0 30
23317: PUSH
23318: LD_INT 0
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 1
23371: NEG
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: LD_INT 3
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 2
23545: NEG
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 3
23556: NEG
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23591: LD_ADDR_VAR 0 31
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 2
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 2
23756: NEG
23757: PUSH
23758: LD_INT 1
23760: NEG
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: NEG
23769: PUSH
23770: LD_INT 2
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: LD_INT 3
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 3
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 3
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 3
23834: NEG
23835: PUSH
23836: LD_INT 2
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23869: LD_ADDR_VAR 0 32
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 2
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 2
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: NEG
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 2
24046: NEG
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: LD_INT 3
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 3
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 3
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 3
24112: NEG
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24147: LD_ADDR_VAR 0 33
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: LD_INT 1
24167: NEG
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 2
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 2
24325: NEG
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 3
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 3
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: LD_INT 3
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 3
24391: NEG
24392: PUSH
24393: LD_INT 2
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24426: LD_ADDR_VAR 0 34
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: LD_INT 2
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 2
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: NEG
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 2
24605: NEG
24606: PUSH
24607: LD_INT 2
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 3
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24706: LD_ADDR_VAR 0 35
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 2
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 2
24797: NEG
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24818: LD_ADDR_VAR 0 36
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: LD_INT 2
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24930: LD_ADDR_VAR 0 37
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25042: LD_ADDR_VAR 0 38
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25154: LD_ADDR_VAR 0 39
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25266: LD_ADDR_VAR 0 40
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: LD_INT 1
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25378: LD_ADDR_VAR 0 41
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 2
25544: NEG
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: NEG
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: LD_INT 3
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 3
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 3
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 3
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: LD_INT 3
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 2
25631: PUSH
25632: LD_INT 3
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: NEG
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 3
25652: NEG
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: NEG
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 3
25675: NEG
25676: PUSH
25677: LD_INT 2
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 3
25687: NEG
25688: PUSH
25689: LD_INT 3
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25728: LD_ADDR_VAR 0 42
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: NEG
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: NEG
25919: PUSH
25920: LD_INT 3
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 3
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 3
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: LD_INT 2
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 3
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 3
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 3
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 3
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: LD_INT 3
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 3
26025: NEG
26026: PUSH
26027: LD_INT 2
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 3
26037: NEG
26038: PUSH
26039: LD_INT 3
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26078: LD_ADDR_VAR 0 43
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: LD_INT 2
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: LD_INT 2
26174: NEG
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 2
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 2
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: NEG
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: NEG
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 3
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 3
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 3
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 3
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: LD_INT 3
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 3
26374: NEG
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 3
26385: NEG
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26426: LD_ADDR_VAR 0 44
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: NEG
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: LD_INT 2
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: NEG
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: LD_INT 2
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 2
26616: NEG
26617: PUSH
26618: LD_INT 3
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 3
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 3
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 3
26659: PUSH
26660: LD_INT 2
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 3
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: NEG
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 3
26700: NEG
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: NEG
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 3
26723: NEG
26724: PUSH
26725: LD_INT 2
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 3
26735: NEG
26736: PUSH
26737: LD_INT 3
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26776: LD_ADDR_VAR 0 45
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: LD_INT 2
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: LD_INT 2
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 2
26942: NEG
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: NEG
26955: PUSH
26956: LD_INT 2
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: LD_INT 3
26970: NEG
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: LD_INT 3
26982: NEG
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 3
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 2
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 3
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: LD_INT 3
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 2
27032: PUSH
27033: LD_INT 3
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: LD_INT 3
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 3
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: LD_INT 2
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 3
27073: NEG
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 3
27085: NEG
27086: PUSH
27087: LD_INT 3
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27126: LD_ADDR_VAR 0 46
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: NEG
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 1
27207: NEG
27208: PUSH
27209: LD_INT 2
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: LD_INT 2
27222: NEG
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 2
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 2
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: NEG
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: NEG
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 3
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 3
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 3
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 3
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 3
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 3
27422: NEG
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 3
27433: NEG
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27474: LD_ADDR_VAR 0 47
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27625: LD_ADDR_VAR 0 48
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 2
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27772: LD_ADDR_VAR 0 49
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27916: LD_ADDR_VAR 0 50
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28060: LD_ADDR_VAR 0 51
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: NEG
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 2
28183: NEG
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28207: LD_ADDR_VAR 0 52
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: NEG
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 2
28334: NEG
28335: PUSH
28336: LD_INT 2
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28358: LD_ADDR_VAR 0 53
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28588: LD_ADDR_VAR 0 54
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 2
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: NEG
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: NEG
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: LD_INT 2
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28818: LD_ADDR_VAR 0 55
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 2
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 2
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: NEG
29006: PUSH
29007: LD_INT 1
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 2
29017: NEG
29018: PUSH
29019: LD_INT 2
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29048: LD_ADDR_VAR 0 56
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 2
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 2
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 2
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 2
29235: NEG
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 2
29247: NEG
29248: PUSH
29249: LD_INT 2
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29278: LD_ADDR_VAR 0 57
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 0
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: LD_INT 1
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: LD_INT 2
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 2
29454: NEG
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: NEG
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29508: LD_ADDR_VAR 0 58
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 0
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: LD_INT 1
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 1
29589: NEG
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29738: LD_ADDR_VAR 0 59
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29826: LD_ADDR_VAR 0 60
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: NEG
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29914: LD_ADDR_VAR 0 61
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30002: LD_ADDR_VAR 0 62
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30090: LD_ADDR_VAR 0 63
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30178: LD_ADDR_VAR 0 64
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: ST_TO_ADDR
// end ; 1 :
30266: GO 36163
30268: LD_INT 1
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 32899
30276: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30277: LD_ADDR_VAR 0 11
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 3
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 3
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 2
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30321: LD_ADDR_VAR 0 12
30325: PUSH
30326: LD_INT 2
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 3
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30362: LD_ADDR_VAR 0 13
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 2
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30402: LD_ADDR_VAR 0 14
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30443: LD_ADDR_VAR 0 15
30447: PUSH
30448: LD_INT 2
30450: NEG
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 3
30461: NEG
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 3
30472: NEG
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30487: LD_ADDR_VAR 0 16
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 3
30518: NEG
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: LIST
30532: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30533: LD_ADDR_VAR 0 17
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: LD_INT 3
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 3
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30577: LD_ADDR_VAR 0 18
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30618: LD_ADDR_VAR 0 19
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: LD_INT 3
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30658: LD_ADDR_VAR 0 20
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: LD_INT 2
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30699: LD_ADDR_VAR 0 21
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 3
30717: NEG
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 3
30728: NEG
30729: PUSH
30730: LD_INT 1
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30743: LD_ADDR_VAR 0 22
30747: PUSH
30748: LD_INT 2
30750: NEG
30751: PUSH
30752: LD_INT 3
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: LD_INT 3
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30789: LD_ADDR_VAR 0 23
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 4
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30833: LD_ADDR_VAR 0 24
30837: PUSH
30838: LD_INT 3
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 4
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30874: LD_ADDR_VAR 0 25
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 4
30891: PUSH
30892: LD_INT 3
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: LD_INT 4
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30914: LD_ADDR_VAR 0 26
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 3
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 4
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30955: LD_ADDR_VAR 0 27
30959: PUSH
30960: LD_INT 3
30962: NEG
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 4
30984: NEG
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30999: LD_ADDR_VAR 0 28
31003: PUSH
31004: LD_INT 3
31006: NEG
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: LD_INT 4
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 4
31030: NEG
31031: PUSH
31032: LD_INT 3
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31045: LD_ADDR_VAR 0 29
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: LD_INT 3
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: LD_INT 3
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 4
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 4
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 3
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 5
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 5
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 4
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 6
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 6
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 5
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31200: LD_ADDR_VAR 0 30
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 3
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 4
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 4
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 5
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 5
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 5
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 6
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 6
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31343: LD_ADDR_VAR 0 31
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: LD_INT 3
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 3
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 4
31380: PUSH
31381: LD_INT 3
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 4
31390: PUSH
31391: LD_INT 4
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 3
31400: PUSH
31401: LD_INT 4
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 5
31410: PUSH
31411: LD_INT 4
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 5
31420: PUSH
31421: LD_INT 5
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 4
31430: PUSH
31431: LD_INT 5
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 6
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 6
31450: PUSH
31451: LD_INT 6
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 5
31460: PUSH
31461: LD_INT 6
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31482: LD_ADDR_VAR 0 32
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: LD_INT 3
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: LD_INT 3
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: LD_INT 4
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: LD_INT 4
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: PUSH
31552: LD_INT 5
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: LD_INT 5
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 4
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 6
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: LD_INT 6
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: LD_INT 5
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31625: LD_ADDR_VAR 0 33
31629: PUSH
31630: LD_INT 2
31632: NEG
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 3
31643: NEG
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 3
31654: NEG
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 4
31677: NEG
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 4
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 4
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 5
31711: NEG
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 5
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 5
31734: NEG
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 6
31745: NEG
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 6
31756: NEG
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31780: LD_ADDR_VAR 0 34
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 3
31823: NEG
31824: PUSH
31825: LD_INT 4
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 4
31835: NEG
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 4
31859: NEG
31860: PUSH
31861: LD_INT 5
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 5
31871: NEG
31872: PUSH
31873: LD_INT 4
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: LD_INT 5
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 5
31895: NEG
31896: PUSH
31897: LD_INT 6
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 6
31907: NEG
31908: PUSH
31909: LD_INT 5
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 6
31919: NEG
31920: PUSH
31921: LD_INT 6
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31943: LD_ADDR_VAR 0 41
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: LD_INT 2
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31987: LD_ADDR_VAR 0 42
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32028: LD_ADDR_VAR 0 43
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 2
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32068: LD_ADDR_VAR 0 44
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32109: LD_ADDR_VAR 0 45
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32153: LD_ADDR_VAR 0 46
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: LD_INT 3
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32199: LD_ADDR_VAR 0 47
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: LD_INT 3
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: LD_INT 3
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32232: LD_ADDR_VAR 0 48
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: LD_INT 2
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32263: LD_ADDR_VAR 0 49
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32292: LD_ADDR_VAR 0 50
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32321: LD_ADDR_VAR 0 51
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32352: LD_ADDR_VAR 0 52
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: LD_INT 2
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32385: LD_ADDR_VAR 0 53
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 3
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: LD_INT 3
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32429: LD_ADDR_VAR 0 54
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32470: LD_ADDR_VAR 0 55
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32510: LD_ADDR_VAR 0 56
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: LD_INT 3
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32551: LD_ADDR_VAR 0 57
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 3
32569: NEG
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: NEG
32581: PUSH
32582: LD_INT 1
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32595: LD_ADDR_VAR 0 58
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 3
32626: NEG
32627: PUSH
32628: LD_INT 3
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32641: LD_ADDR_VAR 0 59
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 2
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32685: LD_ADDR_VAR 0 60
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 2
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32726: LD_ADDR_VAR 0 61
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32766: LD_ADDR_VAR 0 62
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 2
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32807: LD_ADDR_VAR 0 63
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32851: LD_ADDR_VAR 0 64
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: NEG
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 2
32882: NEG
32883: PUSH
32884: LD_INT 2
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: ST_TO_ADDR
// end ; 2 :
32897: GO 36163
32899: LD_INT 2
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 36162
32907: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32908: LD_ADDR_VAR 0 29
32912: PUSH
32913: LD_INT 4
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 4
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 5
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 5
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 3
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 3
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 3
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: LD_INT 4
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 4
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 4
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 4
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 4
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: LD_INT 5
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 5
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: LD_INT 4
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 5
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 3
33202: NEG
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: NEG
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 3
33236: NEG
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 4
33247: NEG
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 4
33258: NEG
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 4
33270: NEG
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 2
33282: NEG
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: NEG
33294: PUSH
33295: LD_INT 4
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 4
33305: NEG
33306: PUSH
33307: LD_INT 5
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: LD_INT 4
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 3
33329: NEG
33330: PUSH
33331: LD_INT 3
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 4
33341: NEG
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 5
33353: NEG
33354: PUSH
33355: LD_INT 4
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 5
33365: NEG
33366: PUSH
33367: LD_INT 5
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: LD_INT 5
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 5
33389: NEG
33390: PUSH
33391: LD_INT 3
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33446: LD_ADDR_VAR 0 30
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 4
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 5
33473: PUSH
33474: LD_INT 4
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 5
33483: PUSH
33484: LD_INT 5
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 4
33493: PUSH
33494: LD_INT 5
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 3
33503: PUSH
33504: LD_INT 4
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 3
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 5
33523: PUSH
33524: LD_INT 3
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: PUSH
33534: LD_INT 5
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: LD_INT 3
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: LD_INT 4
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 4
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 4
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 4
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 5
33692: NEG
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 5
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 5
33715: NEG
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 3
33727: NEG
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: NEG
33739: PUSH
33740: LD_INT 3
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: LD_INT 4
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 3
33786: NEG
33787: PUSH
33788: LD_INT 2
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 4
33798: NEG
33799: PUSH
33800: LD_INT 3
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 4
33810: NEG
33811: PUSH
33812: LD_INT 4
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: LD_INT 4
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 4
33834: NEG
33835: PUSH
33836: LD_INT 2
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 4
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: LD_INT 5
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 4
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 4
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: LD_INT 5
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: LD_INT 3
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: LD_INT 5
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33993: LD_ADDR_VAR 0 31
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: LD_INT 4
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 4
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 5
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: LD_INT 5
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 4
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 3
34093: NEG
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 3
34104: NEG
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 3
34138: NEG
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 4
34149: NEG
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 4
34160: NEG
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 4
34172: NEG
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 4
34195: NEG
34196: PUSH
34197: LD_INT 4
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 4
34207: NEG
34208: PUSH
34209: LD_INT 5
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 3
34219: NEG
34220: PUSH
34221: LD_INT 4
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 3
34231: NEG
34232: PUSH
34233: LD_INT 3
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 4
34243: NEG
34244: PUSH
34245: LD_INT 3
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 5
34255: NEG
34256: PUSH
34257: LD_INT 4
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 5
34267: NEG
34268: PUSH
34269: LD_INT 5
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: NEG
34280: PUSH
34281: LD_INT 5
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 5
34291: NEG
34292: PUSH
34293: LD_INT 3
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 3
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 4
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: LD_INT 3
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 4
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: LD_INT 4
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 4
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 4
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 5
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 5
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 4
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 3
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 5
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34543: LD_ADDR_VAR 0 32
34547: PUSH
34548: LD_INT 4
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 4
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 3
34573: NEG
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: NEG
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 4
34595: NEG
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 5
34606: NEG
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 5
34617: NEG
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 5
34629: NEG
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 3
34641: NEG
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: NEG
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 3
34664: NEG
34665: PUSH
34666: LD_INT 4
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: LD_INT 3
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 3
34700: NEG
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 4
34712: NEG
34713: PUSH
34714: LD_INT 3
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 4
34724: NEG
34725: PUSH
34726: LD_INT 4
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: NEG
34737: PUSH
34738: LD_INT 4
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 4
34748: NEG
34749: PUSH
34750: LD_INT 2
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 4
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 5
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 4
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: LD_INT 3
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 3
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 4
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 5
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 3
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: NEG
34851: PUSH
34852: LD_INT 5
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 3
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 4
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 4
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 2
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 4
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 4
34955: PUSH
34956: LD_INT 4
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 4
34965: PUSH
34966: LD_INT 3
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 5
34975: PUSH
34976: LD_INT 4
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: LD_INT 5
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: LD_INT 5
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: LD_INT 4
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: LD_INT 3
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35090: LD_ADDR_VAR 0 33
35094: PUSH
35095: LD_INT 4
35097: NEG
35098: PUSH
35099: LD_INT 4
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 4
35109: NEG
35110: PUSH
35111: LD_INT 5
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 3
35121: NEG
35122: PUSH
35123: LD_INT 4
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 3
35133: NEG
35134: PUSH
35135: LD_INT 3
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 4
35145: NEG
35146: PUSH
35147: LD_INT 3
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 5
35157: NEG
35158: PUSH
35159: LD_INT 4
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 5
35169: NEG
35170: PUSH
35171: LD_INT 5
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 3
35181: NEG
35182: PUSH
35183: LD_INT 5
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 5
35193: NEG
35194: PUSH
35195: LD_INT 3
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 4
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 3
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 3
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: LD_INT 4
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 4
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 4
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 4
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 5
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 5
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 4
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 3
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 3
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 5
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: LD_INT 3
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 4
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 4
35430: PUSH
35431: LD_INT 4
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: LD_INT 4
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: LD_INT 3
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 4
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: LD_INT 4
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 4
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: LD_INT 3
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 4
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 5
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 5
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: LD_INT 4
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 3
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: LD_INT 5
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35628: LD_ADDR_VAR 0 34
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: LD_INT 4
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 5
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 4
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 3
35671: NEG
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 3
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 4
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 5
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 3
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 2
35725: NEG
35726: PUSH
35727: LD_INT 5
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 4
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 4
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 3
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 4
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 4
35830: PUSH
35831: LD_INT 4
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 4
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 5
35850: PUSH
35851: LD_INT 4
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 5
35860: PUSH
35861: LD_INT 5
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 4
35870: PUSH
35871: LD_INT 5
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: LD_INT 4
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 3
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: LD_INT 5
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: LD_INT 3
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 4
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 4
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 3
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: LD_INT 4
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 4
36013: NEG
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 4
36024: NEG
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 3
36036: NEG
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 3
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 4
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 5
36069: NEG
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 5
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 5
36092: NEG
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 3
36104: NEG
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: ST_TO_ADDR
// end ; end ;
36160: GO 36163
36162: POP
// case btype of b_depot , b_warehouse :
36163: LD_VAR 0 1
36167: PUSH
36168: LD_INT 0
36170: DOUBLE
36171: EQUAL
36172: IFTRUE 36182
36174: LD_INT 1
36176: DOUBLE
36177: EQUAL
36178: IFTRUE 36182
36180: GO 36383
36182: POP
// case nation of nation_american :
36183: LD_VAR 0 5
36187: PUSH
36188: LD_INT 1
36190: DOUBLE
36191: EQUAL
36192: IFTRUE 36196
36194: GO 36252
36196: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36197: LD_ADDR_VAR 0 9
36201: PUSH
36202: LD_VAR 0 11
36206: PUSH
36207: LD_VAR 0 12
36211: PUSH
36212: LD_VAR 0 13
36216: PUSH
36217: LD_VAR 0 14
36221: PUSH
36222: LD_VAR 0 15
36226: PUSH
36227: LD_VAR 0 16
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: PUSH
36240: LD_VAR 0 4
36244: PUSH
36245: LD_INT 1
36247: PLUS
36248: ARRAY
36249: ST_TO_ADDR
36250: GO 36381
36252: LD_INT 2
36254: DOUBLE
36255: EQUAL
36256: IFTRUE 36260
36258: GO 36316
36260: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36261: LD_ADDR_VAR 0 9
36265: PUSH
36266: LD_VAR 0 17
36270: PUSH
36271: LD_VAR 0 18
36275: PUSH
36276: LD_VAR 0 19
36280: PUSH
36281: LD_VAR 0 20
36285: PUSH
36286: LD_VAR 0 21
36290: PUSH
36291: LD_VAR 0 22
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: PUSH
36304: LD_VAR 0 4
36308: PUSH
36309: LD_INT 1
36311: PLUS
36312: ARRAY
36313: ST_TO_ADDR
36314: GO 36381
36316: LD_INT 3
36318: DOUBLE
36319: EQUAL
36320: IFTRUE 36324
36322: GO 36380
36324: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36325: LD_ADDR_VAR 0 9
36329: PUSH
36330: LD_VAR 0 23
36334: PUSH
36335: LD_VAR 0 24
36339: PUSH
36340: LD_VAR 0 25
36344: PUSH
36345: LD_VAR 0 26
36349: PUSH
36350: LD_VAR 0 27
36354: PUSH
36355: LD_VAR 0 28
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: PUSH
36368: LD_VAR 0 4
36372: PUSH
36373: LD_INT 1
36375: PLUS
36376: ARRAY
36377: ST_TO_ADDR
36378: GO 36381
36380: POP
36381: GO 36930
36383: LD_INT 2
36385: DOUBLE
36386: EQUAL
36387: IFTRUE 36397
36389: LD_INT 3
36391: DOUBLE
36392: EQUAL
36393: IFTRUE 36397
36395: GO 36453
36397: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_VAR 0 29
36407: PUSH
36408: LD_VAR 0 30
36412: PUSH
36413: LD_VAR 0 31
36417: PUSH
36418: LD_VAR 0 32
36422: PUSH
36423: LD_VAR 0 33
36427: PUSH
36428: LD_VAR 0 34
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: PUSH
36441: LD_VAR 0 4
36445: PUSH
36446: LD_INT 1
36448: PLUS
36449: ARRAY
36450: ST_TO_ADDR
36451: GO 36930
36453: LD_INT 16
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36509
36459: LD_INT 17
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36509
36465: LD_INT 18
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36509
36471: LD_INT 19
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36509
36477: LD_INT 20
36479: DOUBLE
36480: EQUAL
36481: IFTRUE 36509
36483: LD_INT 21
36485: DOUBLE
36486: EQUAL
36487: IFTRUE 36509
36489: LD_INT 23
36491: DOUBLE
36492: EQUAL
36493: IFTRUE 36509
36495: LD_INT 24
36497: DOUBLE
36498: EQUAL
36499: IFTRUE 36509
36501: LD_INT 25
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36509
36507: GO 36565
36509: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36510: LD_ADDR_VAR 0 9
36514: PUSH
36515: LD_VAR 0 35
36519: PUSH
36520: LD_VAR 0 36
36524: PUSH
36525: LD_VAR 0 37
36529: PUSH
36530: LD_VAR 0 38
36534: PUSH
36535: LD_VAR 0 39
36539: PUSH
36540: LD_VAR 0 40
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: PUSH
36553: LD_VAR 0 4
36557: PUSH
36558: LD_INT 1
36560: PLUS
36561: ARRAY
36562: ST_TO_ADDR
36563: GO 36930
36565: LD_INT 6
36567: DOUBLE
36568: EQUAL
36569: IFTRUE 36621
36571: LD_INT 7
36573: DOUBLE
36574: EQUAL
36575: IFTRUE 36621
36577: LD_INT 8
36579: DOUBLE
36580: EQUAL
36581: IFTRUE 36621
36583: LD_INT 13
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36621
36589: LD_INT 12
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36621
36595: LD_INT 15
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36621
36601: LD_INT 11
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36621
36607: LD_INT 14
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36621
36613: LD_INT 10
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36621
36619: GO 36677
36621: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36622: LD_ADDR_VAR 0 9
36626: PUSH
36627: LD_VAR 0 41
36631: PUSH
36632: LD_VAR 0 42
36636: PUSH
36637: LD_VAR 0 43
36641: PUSH
36642: LD_VAR 0 44
36646: PUSH
36647: LD_VAR 0 45
36651: PUSH
36652: LD_VAR 0 46
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: PUSH
36665: LD_VAR 0 4
36669: PUSH
36670: LD_INT 1
36672: PLUS
36673: ARRAY
36674: ST_TO_ADDR
36675: GO 36930
36677: LD_INT 36
36679: DOUBLE
36680: EQUAL
36681: IFTRUE 36685
36683: GO 36741
36685: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36686: LD_ADDR_VAR 0 9
36690: PUSH
36691: LD_VAR 0 47
36695: PUSH
36696: LD_VAR 0 48
36700: PUSH
36701: LD_VAR 0 49
36705: PUSH
36706: LD_VAR 0 50
36710: PUSH
36711: LD_VAR 0 51
36715: PUSH
36716: LD_VAR 0 52
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: PUSH
36729: LD_VAR 0 4
36733: PUSH
36734: LD_INT 1
36736: PLUS
36737: ARRAY
36738: ST_TO_ADDR
36739: GO 36930
36741: LD_INT 4
36743: DOUBLE
36744: EQUAL
36745: IFTRUE 36767
36747: LD_INT 5
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36767
36753: LD_INT 34
36755: DOUBLE
36756: EQUAL
36757: IFTRUE 36767
36759: LD_INT 37
36761: DOUBLE
36762: EQUAL
36763: IFTRUE 36767
36765: GO 36823
36767: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36768: LD_ADDR_VAR 0 9
36772: PUSH
36773: LD_VAR 0 53
36777: PUSH
36778: LD_VAR 0 54
36782: PUSH
36783: LD_VAR 0 55
36787: PUSH
36788: LD_VAR 0 56
36792: PUSH
36793: LD_VAR 0 57
36797: PUSH
36798: LD_VAR 0 58
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: PUSH
36811: LD_VAR 0 4
36815: PUSH
36816: LD_INT 1
36818: PLUS
36819: ARRAY
36820: ST_TO_ADDR
36821: GO 36930
36823: LD_INT 31
36825: DOUBLE
36826: EQUAL
36827: IFTRUE 36873
36829: LD_INT 32
36831: DOUBLE
36832: EQUAL
36833: IFTRUE 36873
36835: LD_INT 33
36837: DOUBLE
36838: EQUAL
36839: IFTRUE 36873
36841: LD_INT 27
36843: DOUBLE
36844: EQUAL
36845: IFTRUE 36873
36847: LD_INT 26
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36873
36853: LD_INT 28
36855: DOUBLE
36856: EQUAL
36857: IFTRUE 36873
36859: LD_INT 29
36861: DOUBLE
36862: EQUAL
36863: IFTRUE 36873
36865: LD_INT 30
36867: DOUBLE
36868: EQUAL
36869: IFTRUE 36873
36871: GO 36929
36873: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36874: LD_ADDR_VAR 0 9
36878: PUSH
36879: LD_VAR 0 59
36883: PUSH
36884: LD_VAR 0 60
36888: PUSH
36889: LD_VAR 0 61
36893: PUSH
36894: LD_VAR 0 62
36898: PUSH
36899: LD_VAR 0 63
36903: PUSH
36904: LD_VAR 0 64
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: PUSH
36917: LD_VAR 0 4
36921: PUSH
36922: LD_INT 1
36924: PLUS
36925: ARRAY
36926: ST_TO_ADDR
36927: GO 36930
36929: POP
// temp_list2 = [ ] ;
36930: LD_ADDR_VAR 0 10
36934: PUSH
36935: EMPTY
36936: ST_TO_ADDR
// for i in temp_list do
36937: LD_ADDR_VAR 0 8
36941: PUSH
36942: LD_VAR 0 9
36946: PUSH
36947: FOR_IN
36948: IFFALSE 37000
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36950: LD_ADDR_VAR 0 10
36954: PUSH
36955: LD_VAR 0 10
36959: PUSH
36960: LD_VAR 0 8
36964: PUSH
36965: LD_INT 1
36967: ARRAY
36968: PUSH
36969: LD_VAR 0 2
36973: PLUS
36974: PUSH
36975: LD_VAR 0 8
36979: PUSH
36980: LD_INT 2
36982: ARRAY
36983: PUSH
36984: LD_VAR 0 3
36988: PLUS
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: EMPTY
36995: LIST
36996: ADD
36997: ST_TO_ADDR
36998: GO 36947
37000: POP
37001: POP
// result = temp_list2 ;
37002: LD_ADDR_VAR 0 7
37006: PUSH
37007: LD_VAR 0 10
37011: ST_TO_ADDR
// end ; end_of_file
37012: LD_VAR 0 7
37016: RET
// every 1 do var i ;
37017: GO 37019
37019: DISABLE
37020: LD_INT 0
37022: PPUSH
// begin Video ( true ) ;
37023: LD_INT 1
37025: PPUSH
37026: CALL 7050 0 1
// CenterOnXY ( 53 , 40 ) ;
37030: LD_INT 53
37032: PPUSH
37033: LD_INT 40
37035: PPUSH
37036: CALL_OW 84
// wait ( 0 0$5 ) ;
37040: LD_INT 175
37042: PPUSH
37043: CALL_OW 67
// if gammaCommander = 1 then
37047: LD_EXP 12
37051: PUSH
37052: LD_INT 1
37054: EQUAL
37055: IFFALSE 37069
// Say ( Donaldson , D1-Don-1 ) ;
37057: LD_EXP 3
37061: PPUSH
37062: LD_STRING D1-Don-1
37064: PPUSH
37065: CALL_OW 88
// if gammaCommander = 2 then
37069: LD_EXP 12
37073: PUSH
37074: LD_INT 2
37076: EQUAL
37077: IFFALSE 37091
// Say ( Brown , D1-Brown-1 ) ;
37079: LD_EXP 2
37083: PPUSH
37084: LD_STRING D1-Brown-1
37086: PPUSH
37087: CALL_OW 88
// if gammaCommander = 3 then
37091: LD_EXP 12
37095: PUSH
37096: LD_INT 3
37098: EQUAL
37099: IFFALSE 37113
// Say ( Houten , D1-VanH-1 ) ;
37101: LD_EXP 13
37105: PPUSH
37106: LD_STRING D1-VanH-1
37108: PPUSH
37109: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37113: LD_EXP 22
37117: PPUSH
37118: LD_STRING D1-Har-1
37120: PPUSH
37121: CALL_OW 94
// if gammaCommander = 1 then
37125: LD_EXP 12
37129: PUSH
37130: LD_INT 1
37132: EQUAL
37133: IFFALSE 37147
// Say ( Donaldson , D1-Don-2 ) ;
37135: LD_EXP 3
37139: PPUSH
37140: LD_STRING D1-Don-2
37142: PPUSH
37143: CALL_OW 88
// if gammaCommander = 2 then
37147: LD_EXP 12
37151: PUSH
37152: LD_INT 2
37154: EQUAL
37155: IFFALSE 37169
// Say ( Brown , D1-Brown-2 ) ;
37157: LD_EXP 2
37161: PPUSH
37162: LD_STRING D1-Brown-2
37164: PPUSH
37165: CALL_OW 88
// if gammaCommander = 3 then
37169: LD_EXP 12
37173: PUSH
37174: LD_INT 3
37176: EQUAL
37177: IFFALSE 37191
// Say ( Houten , D1-VanH-2 ) ;
37179: LD_EXP 13
37183: PPUSH
37184: LD_STRING D1-VanH-2
37186: PPUSH
37187: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37191: LD_EXP 22
37195: PPUSH
37196: LD_STRING D1-Har-2
37198: PPUSH
37199: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37203: LD_INT 22
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 33
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 61
37225: PUSH
37226: EMPTY
37227: LIST
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: PPUSH
37234: CALL_OW 69
37238: IFFALSE 37303
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37240: LD_ADDR_VAR 0 1
37244: PUSH
37245: LD_INT 22
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 33
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 61
37267: PUSH
37268: EMPTY
37269: LIST
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: PPUSH
37276: CALL_OW 69
37280: PUSH
37281: FOR_IN
37282: IFFALSE 37301
// ComAgressiveMove ( i , 70 , 41 ) ;
37284: LD_VAR 0 1
37288: PPUSH
37289: LD_INT 70
37291: PPUSH
37292: LD_INT 41
37294: PPUSH
37295: CALL_OW 114
37299: GO 37281
37301: POP
37302: POP
// repeat wait ( 0 0$1 ) ;
37303: LD_INT 35
37305: PPUSH
37306: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37310: LD_ADDR_VAR 0 1
37314: PUSH
37315: LD_INT 22
37317: PUSH
37318: LD_INT 6
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: EMPTY
37326: LIST
37327: PPUSH
37328: CALL_OW 69
37332: PUSH
37333: FOR_IN
37334: IFFALSE 37353
// ComAgressiveMove ( i , 54 , 20 ) ;
37336: LD_VAR 0 1
37340: PPUSH
37341: LD_INT 54
37343: PPUSH
37344: LD_INT 20
37346: PPUSH
37347: CALL_OW 114
37351: GO 37333
37353: POP
37354: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37355: LD_ADDR_VAR 0 1
37359: PUSH
37360: LD_INT 22
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 25
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 3
37382: PUSH
37383: LD_INT 54
37385: PUSH
37386: EMPTY
37387: LIST
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: PPUSH
37398: CALL_OW 69
37402: PUSH
37403: FOR_IN
37404: IFFALSE 37438
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37406: LD_VAR 0 1
37410: PPUSH
37411: LD_INT 70
37413: PPUSH
37414: LD_INT 41
37416: PPUSH
37417: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37421: LD_VAR 0 1
37425: PPUSH
37426: LD_INT 46
37428: PPUSH
37429: LD_INT 39
37431: PPUSH
37432: CALL_OW 174
// end ;
37436: GO 37403
37438: POP
37439: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37440: LD_ADDR_VAR 0 1
37444: PUSH
37445: LD_INT 22
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 21
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 24
37470: PUSH
37471: LD_INT 500
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: PPUSH
37487: CALL_OW 69
37491: PUSH
37492: FOR_IN
37493: IFFALSE 37526
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37495: LD_VAR 0 1
37499: PPUSH
37500: LD_EXP 37
37504: PPUSH
37505: CALL_OW 250
37509: PPUSH
37510: LD_EXP 37
37514: PPUSH
37515: CALL_OW 251
37519: PPUSH
37520: CALL_OW 111
37524: GO 37492
37526: POP
37527: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37528: LD_INT 22
37530: PUSH
37531: LD_INT 6
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 21
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 24
37550: PUSH
37551: LD_INT 250
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: PPUSH
37563: CALL_OW 69
37567: PUSH
37568: LD_INT 5
37570: LESS
37571: IFFALSE 37303
// Video ( false ) ;
37573: LD_INT 0
37575: PPUSH
37576: CALL 7050 0 1
// ChangeMissionObjectives ( M1 ) ;
37580: LD_STRING M1
37582: PPUSH
37583: CALL_OW 337
// SaveForQuickRestart ;
37587: CALL_OW 22
// startCutscene = 0 ;
37591: LD_ADDR_EXP 38
37595: PUSH
37596: LD_INT 0
37598: ST_TO_ADDR
// end ;
37599: PPOPN 1
37601: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37602: LD_EXP 38
37606: IFFALSE 37697
37608: GO 37610
37610: DISABLE
37611: LD_INT 0
37613: PPUSH
37614: PPUSH
// begin enable ;
37615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37616: LD_ADDR_VAR 0 1
37620: PUSH
37621: LD_INT 22
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 21
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: LD_INT 24
37646: PUSH
37647: LD_INT 700
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: PPUSH
37663: CALL_OW 69
37667: ST_TO_ADDR
// for i in tmp do
37668: LD_ADDR_VAR 0 2
37672: PUSH
37673: LD_VAR 0 1
37677: PUSH
37678: FOR_IN
37679: IFFALSE 37695
// SetLives ( i , 700 ) ;
37681: LD_VAR 0 2
37685: PPUSH
37686: LD_INT 700
37688: PPUSH
37689: CALL_OW 234
37693: GO 37678
37695: POP
37696: POP
// end ;
37697: PPOPN 2
37699: END
// every 1 1$0 do
37700: GO 37702
37702: DISABLE
// begin PrepareSupportFromDelta ;
37703: CALL 3891 0 0
// firstAttack = 1 ;
37707: LD_ADDR_EXP 33
37711: PUSH
37712: LD_INT 1
37714: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37715: LD_EXP 8
37719: PPUSH
37720: CALL_OW 302
37724: IFFALSE 37740
// begin Say ( Gladstone , D2-Glad-1 ) ;
37726: LD_EXP 8
37730: PPUSH
37731: LD_STRING D2-Glad-1
37733: PPUSH
37734: CALL_OW 88
// end else
37738: GO 37848
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37740: LD_INT 4
37742: PPUSH
37743: LD_INT 22
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 21
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 25
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 25
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 25
37788: PUSH
37789: LD_INT 3
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 25
37798: PUSH
37799: LD_INT 4
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: PPUSH
37818: CALL_OW 70
37822: PUSH
37823: LD_EXP 15
37827: PUSH
37828: LD_EXP 14
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: DIFF
37837: PPUSH
37838: LD_STRING D2-Sol1-1
37840: PPUSH
37841: LD_STRING D2-FSol1-1
37843: PPUSH
37844: CALL 7078 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37848: LD_EXP 3
37852: PPUSH
37853: CALL_OW 302
37857: PUSH
37858: LD_EXP 12
37862: PUSH
37863: LD_INT 1
37865: EQUAL
37866: AND
37867: IFFALSE 37881
// Say ( Donaldson , D2-Don-1 ) ;
37869: LD_EXP 3
37873: PPUSH
37874: LD_STRING D2-Don-1
37876: PPUSH
37877: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37881: LD_EXP 2
37885: PPUSH
37886: CALL_OW 302
37890: PUSH
37891: LD_EXP 12
37895: PUSH
37896: LD_INT 2
37898: EQUAL
37899: AND
37900: IFFALSE 37914
// Say ( Brown , D2-Brown-1 ) ;
37902: LD_EXP 2
37906: PPUSH
37907: LD_STRING D2-Brown-1
37909: PPUSH
37910: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37914: LD_EXP 13
37918: PPUSH
37919: CALL_OW 302
37923: PUSH
37924: LD_EXP 12
37928: PUSH
37929: LD_INT 3
37931: EQUAL
37932: AND
37933: IFFALSE 37947
// Say ( Houten , D2-VanH-1 ) ;
37935: LD_EXP 13
37939: PPUSH
37940: LD_STRING D2-VanH-1
37942: PPUSH
37943: CALL_OW 88
// end ;
37947: END
// every 0 0$1 do
37948: GO 37950
37950: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37951: LD_STRING 07_time
37953: PPUSH
37954: LD_INT 12600
37956: PPUSH
37957: CALL_OW 30
37961: PUSH
37962: LD_INT 3
37964: DIV
37965: PPUSH
37966: CALL_OW 67
// PrepareMacmillanSquad ;
37970: CALL 4553 0 0
// CenterNowOnUnits ( JMM ) ;
37974: LD_EXP 1
37978: PPUSH
37979: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37983: LD_EXP 1
37987: PPUSH
37988: LD_STRING D3-JMM-1
37990: PPUSH
37991: CALL_OW 88
// JMMArrive = 1 ;
37995: LD_ADDR_EXP 39
37999: PUSH
38000: LD_INT 1
38002: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38003: LD_EXP 3
38007: PPUSH
38008: CALL_OW 302
38012: PUSH
38013: LD_EXP 12
38017: PUSH
38018: LD_INT 1
38020: EQUAL
38021: AND
38022: IFFALSE 38038
// begin Say ( Donaldson , D3-Don-1 ) ;
38024: LD_EXP 3
38028: PPUSH
38029: LD_STRING D3-Don-1
38031: PPUSH
38032: CALL_OW 88
// end else
38036: GO 38090
// begin if gammaCommander = 1 then
38038: LD_EXP 12
38042: PUSH
38043: LD_INT 1
38045: EQUAL
38046: IFFALSE 38090
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38048: LD_EXP 11
38052: PPUSH
38053: LD_INT 26
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PPUSH
38063: CALL_OW 72
38067: PPUSH
38068: LD_STRING D3-Sol1-1
38070: PPUSH
38071: LD_STRING D3-Sol1-1
38073: PPUSH
38074: CALL 7078 0 3
// Say ( JMM , D3-JMM-2 ) ;
38078: LD_EXP 1
38082: PPUSH
38083: LD_STRING D3-JMM-2
38085: PPUSH
38086: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38090: LD_EXP 2
38094: PPUSH
38095: CALL_OW 302
38099: PUSH
38100: LD_EXP 12
38104: PUSH
38105: LD_INT 2
38107: EQUAL
38108: AND
38109: IFFALSE 38125
// begin Say ( Brown , D3-Brown-1 ) ;
38111: LD_EXP 2
38115: PPUSH
38116: LD_STRING D3-Brown-1
38118: PPUSH
38119: CALL_OW 88
// end else
38123: GO 38177
// begin if gammaCommander = 2 then
38125: LD_EXP 12
38129: PUSH
38130: LD_INT 2
38132: EQUAL
38133: IFFALSE 38177
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38135: LD_EXP 11
38139: PPUSH
38140: LD_INT 26
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PPUSH
38150: CALL_OW 72
38154: PPUSH
38155: LD_STRING D3-Sol1-1a
38157: PPUSH
38158: LD_STRING D3-Sol1-1a
38160: PPUSH
38161: CALL 7078 0 3
// Say ( JMM , D3-JMM-2 ) ;
38165: LD_EXP 1
38169: PPUSH
38170: LD_STRING D3-JMM-2
38172: PPUSH
38173: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38177: LD_EXP 13
38181: PPUSH
38182: CALL_OW 302
38186: PUSH
38187: LD_EXP 12
38191: PUSH
38192: LD_INT 3
38194: EQUAL
38195: AND
38196: IFFALSE 38212
// begin Say ( Houten , D3-VanH-1 ) ;
38198: LD_EXP 13
38202: PPUSH
38203: LD_STRING D3-VanH-1
38205: PPUSH
38206: CALL_OW 88
// end else
38210: GO 38264
// begin if gammaCommander = 3 then
38212: LD_EXP 12
38216: PUSH
38217: LD_INT 3
38219: EQUAL
38220: IFFALSE 38264
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38222: LD_EXP 11
38226: PPUSH
38227: LD_INT 26
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 72
38241: PPUSH
38242: LD_STRING D3-Sol1-1b
38244: PPUSH
38245: LD_STRING D3-Sol1-1b
38247: PPUSH
38248: CALL 7078 0 3
// Say ( JMM , D3-JMM-2 ) ;
38252: LD_EXP 1
38256: PPUSH
38257: LD_STRING D3-JMM-2
38259: PPUSH
38260: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38264: LD_EXP 15
38268: PPUSH
38269: CALL_OW 302
38273: IFFALSE 38301
// begin Say ( Joan , D3a-Joan-1 ) ;
38275: LD_EXP 15
38279: PPUSH
38280: LD_STRING D3a-Joan-1
38282: PPUSH
38283: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38287: LD_EXP 1
38291: PPUSH
38292: LD_STRING D3a-JMM-1
38294: PPUSH
38295: CALL_OW 88
// end else
38299: GO 38643
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38301: LD_STRING 06_JoanStatus_1
38303: PPUSH
38304: LD_INT 0
38306: PPUSH
38307: CALL_OW 30
38311: PUSH
38312: LD_INT 1
38314: EQUAL
38315: IFFALSE 38643
// begin Say ( JMM , D3b-JMM-1 ) ;
38317: LD_EXP 1
38321: PPUSH
38322: LD_STRING D3b-JMM-1
38324: PPUSH
38325: CALL_OW 88
// if gammaCommander = 1 then
38329: LD_EXP 12
38333: PUSH
38334: LD_INT 1
38336: EQUAL
38337: IFFALSE 38394
// if IsOK ( Donaldson ) then
38339: LD_EXP 3
38343: PPUSH
38344: CALL_OW 302
38348: IFFALSE 38364
// Say ( Donaldson , D3b-Don-1 ) else
38350: LD_EXP 3
38354: PPUSH
38355: LD_STRING D3b-Don-1
38357: PPUSH
38358: CALL_OW 88
38362: GO 38394
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38364: LD_EXP 11
38368: PPUSH
38369: LD_INT 26
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PPUSH
38379: CALL_OW 72
38383: PPUSH
38384: LD_STRING D3b-Sol1-1
38386: PPUSH
38387: LD_STRING D3b-Sol1-1
38389: PPUSH
38390: CALL 7078 0 3
// if gammaCommander = 2 then
38394: LD_EXP 12
38398: PUSH
38399: LD_INT 2
38401: EQUAL
38402: IFFALSE 38459
// if IsOk ( Brown ) then
38404: LD_EXP 2
38408: PPUSH
38409: CALL_OW 302
38413: IFFALSE 38429
// Say ( Brown , D3b-Brown-1 ) else
38415: LD_EXP 2
38419: PPUSH
38420: LD_STRING D3b-Brown-1
38422: PPUSH
38423: CALL_OW 88
38427: GO 38459
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38429: LD_EXP 11
38433: PPUSH
38434: LD_INT 26
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PPUSH
38444: CALL_OW 72
38448: PPUSH
38449: LD_STRING D3b-Sol1-1
38451: PPUSH
38452: LD_STRING D3b-Sol1-1
38454: PPUSH
38455: CALL 7078 0 3
// if gammaCommander = 3 then
38459: LD_EXP 12
38463: PUSH
38464: LD_INT 3
38466: EQUAL
38467: IFFALSE 38524
// if IsOk ( Houten ) then
38469: LD_EXP 13
38473: PPUSH
38474: CALL_OW 302
38478: IFFALSE 38494
// Say ( Houten , D3b-VanH-1 ) else
38480: LD_EXP 13
38484: PPUSH
38485: LD_STRING D3b-VanH-1
38487: PPUSH
38488: CALL_OW 88
38492: GO 38524
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38494: LD_EXP 11
38498: PPUSH
38499: LD_INT 26
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PPUSH
38509: CALL_OW 72
38513: PPUSH
38514: LD_STRING D3b-Sol1-1
38516: PPUSH
38517: LD_STRING D3b-Sol1-1
38519: PPUSH
38520: CALL 7078 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38524: LD_EXP 11
38528: PPUSH
38529: LD_INT 26
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PPUSH
38539: CALL_OW 72
38543: PUSH
38544: LD_EXP 12
38548: PUSH
38549: LD_INT 1
38551: EQUAL
38552: PUSH
38553: LD_EXP 3
38557: PPUSH
38558: CALL_OW 302
38562: AND
38563: OR
38564: PUSH
38565: LD_EXP 12
38569: PUSH
38570: LD_INT 2
38572: EQUAL
38573: PUSH
38574: LD_EXP 2
38578: PPUSH
38579: CALL_OW 302
38583: AND
38584: OR
38585: PUSH
38586: LD_EXP 12
38590: PUSH
38591: LD_INT 3
38593: EQUAL
38594: PUSH
38595: LD_EXP 13
38599: PPUSH
38600: CALL_OW 302
38604: AND
38605: OR
38606: IFFALSE 38620
// Say ( JMM , D3b-JMM-2 ) ;
38608: LD_EXP 1
38612: PPUSH
38613: LD_STRING D3b-JMM-2
38615: PPUSH
38616: CALL_OW 88
// if IsOK ( Lisa ) then
38620: LD_EXP 6
38624: PPUSH
38625: CALL_OW 302
38629: IFFALSE 38643
// Say ( Lisa , D3b-Lisa-2 ) ;
38631: LD_EXP 6
38635: PPUSH
38636: LD_STRING D3b-Lisa-2
38638: PPUSH
38639: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38643: LD_INT 22
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 21
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 26
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: LD_INT 25
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 25
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 25
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 25
38708: PUSH
38709: LD_INT 4
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: PPUSH
38729: CALL_OW 69
38733: PUSH
38734: LD_EXP 1
38738: PUSH
38739: LD_EXP 2
38743: PUSH
38744: LD_EXP 3
38748: PUSH
38749: LD_EXP 4
38753: PUSH
38754: LD_EXP 5
38758: PUSH
38759: LD_EXP 6
38763: PUSH
38764: LD_EXP 7
38768: PUSH
38769: LD_EXP 8
38773: PUSH
38774: LD_EXP 9
38778: PUSH
38779: LD_EXP 10
38783: PUSH
38784: LD_EXP 15
38788: PUSH
38789: LD_EXP 14
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: DIFF
38808: PPUSH
38809: LD_STRING DCa-Sol1-1
38811: PPUSH
38812: LD_STRING DCa-Sol1-1
38814: PPUSH
38815: CALL 7078 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38819: LD_EXP 1
38823: PPUSH
38824: LD_STRING DCb-JMM-1
38826: PPUSH
38827: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38831: LD_INT 22
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 21
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 26
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 25
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 25
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 25
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 25
38896: PUSH
38897: LD_INT 4
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: PPUSH
38917: CALL_OW 69
38921: PUSH
38922: LD_EXP 1
38926: PUSH
38927: LD_EXP 2
38931: PUSH
38932: LD_EXP 3
38936: PUSH
38937: LD_EXP 4
38941: PUSH
38942: LD_EXP 5
38946: PUSH
38947: LD_EXP 6
38951: PUSH
38952: LD_EXP 7
38956: PUSH
38957: LD_EXP 8
38961: PUSH
38962: LD_EXP 9
38966: PUSH
38967: LD_EXP 10
38971: PUSH
38972: LD_EXP 15
38976: PUSH
38977: LD_EXP 14
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: DIFF
38996: PPUSH
38997: LD_STRING DCb-Sol1-1
38999: PPUSH
39000: LD_STRING DCb-Sol1-1
39002: PPUSH
39003: CALL 7078 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39007: LD_EXP 1
39011: PPUSH
39012: LD_STRING DCb-JMM-2
39014: PPUSH
39015: CALL_OW 88
// secondAttack = 1 ;
39019: LD_ADDR_EXP 34
39023: PUSH
39024: LD_INT 1
39026: ST_TO_ADDR
// end ;
39027: END
// every 0 0$01 trigger JMMArrive = 1 do
39028: LD_EXP 39
39032: PUSH
39033: LD_INT 1
39035: EQUAL
39036: IFFALSE 39116
39038: GO 39040
39040: DISABLE
// begin wait ( 3 3$0 ) ;
39041: LD_INT 6300
39043: PPUSH
39044: CALL_OW 67
// DialogueOn ;
39048: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39052: LD_EXP 23
39056: PPUSH
39057: LD_STRING D4-Pow-1
39059: PPUSH
39060: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39064: LD_EXP 1
39068: PPUSH
39069: LD_STRING D4-JMM-1
39071: PPUSH
39072: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39076: LD_EXP 23
39080: PPUSH
39081: LD_STRING D4-Pow-2
39083: PPUSH
39084: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39088: LD_EXP 1
39092: PPUSH
39093: LD_STRING D4-JMM-2
39095: PPUSH
39096: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39100: LD_EXP 23
39104: PPUSH
39105: LD_STRING D4-Pow-3
39107: PPUSH
39108: CALL_OW 94
// DialogueOff ;
39112: CALL_OW 7
// end ;
39116: END
// every 0 0$01 trigger JMMArrive = 1 do
39117: LD_EXP 39
39121: PUSH
39122: LD_INT 1
39124: EQUAL
39125: IFFALSE 39157
39127: GO 39129
39129: DISABLE
// begin wait ( 8 8$0 ) ;
39130: LD_INT 16800
39132: PPUSH
39133: CALL_OW 67
// DialogueOn ;
39137: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39141: LD_EXP 23
39145: PPUSH
39146: LD_STRING D4a-Pow-1
39148: PPUSH
39149: CALL_OW 94
// DialogueOff ;
39153: CALL_OW 7
// end ;
39157: END
// every 0 0$01 trigger JMMArrive = 1 do
39158: LD_EXP 39
39162: PUSH
39163: LD_INT 1
39165: EQUAL
39166: IFFALSE 39211
39168: GO 39170
39170: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39171: LD_INT 21000
39173: PUSH
39174: LD_INT 25200
39176: PUSH
39177: LD_INT 31500
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: PUSH
39185: LD_OWVAR 67
39189: ARRAY
39190: PPUSH
39191: CALL_OW 67
// PrepareSikorsky ;
39195: CALL 5634 0 0
// SikorskyArrive = 1 ;
39199: LD_ADDR_EXP 18
39203: PUSH
39204: LD_INT 1
39206: ST_TO_ADDR
// PrepareSikorskyArmy ;
39207: CALL 5774 0 0
// end ;
39211: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39212: LD_EXP 17
39216: PPUSH
39217: LD_INT 5
39219: PPUSH
39220: CALL_OW 308
39224: IFFALSE 39416
39226: GO 39228
39228: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39229: LD_EXP 17
39233: PPUSH
39234: CALL_OW 87
// DialogueOn ;
39238: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39242: LD_EXP 16
39246: PPUSH
39247: LD_STRING D5-Sik-1
39249: PPUSH
39250: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39254: LD_EXP 1
39258: PPUSH
39259: LD_STRING D5-JMM-1a
39261: PPUSH
39262: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39266: LD_EXP 16
39270: PPUSH
39271: LD_STRING D5-Sik-2
39273: PPUSH
39274: CALL_OW 88
// case query ( QSikorski ) of 1 :
39278: LD_STRING QSikorski
39280: PPUSH
39281: CALL_OW 97
39285: PUSH
39286: LD_INT 1
39288: DOUBLE
39289: EQUAL
39290: IFTRUE 39294
39292: GO 39317
39294: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39295: LD_EXP 16
39299: PPUSH
39300: LD_STRING D5a-Sik-1
39302: PPUSH
39303: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39307: LD_ADDR_EXP 19
39311: PUSH
39312: LD_INT 2100
39314: ST_TO_ADDR
// end ; 2 :
39315: GO 39404
39317: LD_INT 2
39319: DOUBLE
39320: EQUAL
39321: IFTRUE 39325
39323: GO 39348
39325: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39326: LD_EXP 16
39330: PPUSH
39331: LD_STRING D5b-Sik-1
39333: PPUSH
39334: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39338: LD_ADDR_EXP 19
39342: PUSH
39343: LD_INT 10500
39345: ST_TO_ADDR
// end ; 3 :
39346: GO 39404
39348: LD_INT 3
39350: DOUBLE
39351: EQUAL
39352: IFTRUE 39356
39354: GO 39403
39356: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39357: LD_EXP 16
39361: PPUSH
39362: LD_STRING D5c-Sik-1
39364: PPUSH
39365: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39369: LD_EXP 1
39373: PPUSH
39374: LD_STRING D5c-JMM-1
39376: PPUSH
39377: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39381: LD_EXP 16
39385: PPUSH
39386: LD_STRING D5c-Sik-2
39388: PPUSH
39389: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39393: LD_ADDR_EXP 19
39397: PUSH
39398: LD_INT 10500
39400: ST_TO_ADDR
// end ; end ;
39401: GO 39404
39403: POP
// DialogueOff ;
39404: CALL_OW 7
// timerStatus = 1 ;
39408: LD_ADDR_EXP 35
39412: PUSH
39413: LD_INT 1
39415: ST_TO_ADDR
// end ;
39416: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39417: LD_EXP 19
39421: PUSH
39422: LD_INT 35
39424: LESS
39425: IFFALSE 39473
39427: GO 39429
39429: DISABLE
// begin timerStatus = 0 ;
39430: LD_ADDR_EXP 35
39434: PUSH
39435: LD_INT 0
39437: ST_TO_ADDR
// DialogueOn ;
39438: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39442: LD_EXP 16
39446: PPUSH
39447: LD_STRING D6-Sik-1
39449: PPUSH
39450: CALL_OW 88
// DialogueOff ;
39454: CALL_OW 7
// SikorskyAI = 1 ;
39458: LD_ADDR_EXP 20
39462: PUSH
39463: LD_INT 1
39465: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39466: LD_STRING M2
39468: PPUSH
39469: CALL_OW 337
// end ;
39473: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39474: LD_EXP 17
39478: PPUSH
39479: LD_INT 18
39481: PPUSH
39482: CALL_OW 308
39486: IFFALSE 39570
39488: GO 39490
39490: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39491: LD_EXP 16
39495: PPUSH
39496: LD_STRING D7-Sik-1
39498: PPUSH
39499: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39503: LD_EXP 1
39507: PPUSH
39508: LD_INT 24
39510: PPUSH
39511: CALL_OW 308
39515: PUSH
39516: LD_EXP 1
39520: PPUSH
39521: CALL_OW 310
39525: OR
39526: IFFALSE 39550
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39528: LD_EXP 16
39532: PPUSH
39533: LD_STRING D7a-Sik-1
39535: PPUSH
39536: CALL_OW 88
// SikorskyStatus = 1 ;
39540: LD_ADDR_EXP 21
39544: PUSH
39545: LD_INT 1
39547: ST_TO_ADDR
// end else
39548: GO 39570
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39550: LD_EXP 16
39554: PPUSH
39555: LD_STRING D7b-Sik-1
39557: PPUSH
39558: CALL_OW 88
// SikorskyStatus = 2 ;
39562: LD_ADDR_EXP 21
39566: PUSH
39567: LD_INT 2
39569: ST_TO_ADDR
// end ; end ;
39570: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39571: LD_EXP 36
39575: PUSH
39576: LD_INT 1
39578: EQUAL
39579: IFFALSE 39688
39581: GO 39583
39583: DISABLE
39584: LD_INT 0
39586: PPUSH
// begin enable ;
39587: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39588: LD_ADDR_VAR 0 1
39592: PUSH
39593: LD_INT 22
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PPUSH
39603: CALL_OW 69
39607: PUSH
39608: FOR_IN
39609: IFFALSE 39636
// if IsInArea ( i , RussianEscape ) then
39611: LD_VAR 0 1
39615: PPUSH
39616: LD_INT 22
39618: PPUSH
39619: CALL_OW 308
39623: IFFALSE 39634
// RemoveUnit ( i ) ;
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 64
39634: GO 39608
39636: POP
39637: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39638: LD_ADDR_VAR 0 1
39642: PUSH
39643: LD_INT 22
39645: PUSH
39646: LD_INT 6
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PPUSH
39653: CALL_OW 69
39657: PUSH
39658: FOR_IN
39659: IFFALSE 39686
// if IsInArea ( i , RussianEscape ) then
39661: LD_VAR 0 1
39665: PPUSH
39666: LD_INT 22
39668: PPUSH
39669: CALL_OW 308
39673: IFFALSE 39684
// RemoveUnit ( i ) ;
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 64
39684: GO 39658
39686: POP
39687: POP
// end ; end_of_file
39688: PPOPN 1
39690: END
// on BuildingComplete ( building ) do var tmp , un ;
39691: LD_INT 0
39693: PPUSH
39694: PPUSH
// begin if GetSide ( building ) = 3 then
39695: LD_VAR 0 1
39699: PPUSH
39700: CALL_OW 255
39704: PUSH
39705: LD_INT 3
39707: EQUAL
39708: IFFALSE 40195
// begin if GetBType ( building ) = b_depot then
39710: LD_VAR 0 1
39714: PPUSH
39715: CALL_OW 266
39719: PUSH
39720: LD_INT 0
39722: EQUAL
39723: IFFALSE 39791
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39725: LD_VAR 0 1
39729: PPUSH
39730: CALL_OW 274
39734: PPUSH
39735: LD_INT 1
39737: PPUSH
39738: LD_INT 5000
39740: PPUSH
39741: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 274
39754: PPUSH
39755: LD_INT 2
39757: PPUSH
39758: LD_INT 5000
39760: PPUSH
39761: CALL_OW 277
// SetBName ( building , konev ) ;
39765: LD_VAR 0 1
39769: PPUSH
39770: LD_STRING konev
39772: PPUSH
39773: CALL_OW 500
// ruDepot = building ;
39777: LD_ADDR_EXP 28
39781: PUSH
39782: LD_VAR 0 1
39786: ST_TO_ADDR
// BuildRussianBase ;
39787: CALL 7683 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39791: LD_VAR 0 1
39795: PPUSH
39796: CALL_OW 266
39800: PUSH
39801: LD_INT 0
39803: EQUAL
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 266
39814: PUSH
39815: LD_INT 2
39817: EQUAL
39818: OR
39819: PUSH
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 266
39829: PUSH
39830: LD_INT 4
39832: EQUAL
39833: OR
39834: IFFALSE 39845
// ComUpgrade ( building ) ;
39836: LD_VAR 0 1
39840: PPUSH
39841: CALL_OW 146
// if GetBType ( building ) = b_lab then
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 266
39854: PUSH
39855: LD_INT 6
39857: EQUAL
39858: IFFALSE 39909
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39860: LD_VAR 0 1
39864: PPUSH
39865: LD_INT 10
39867: PPUSH
39868: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39872: LD_VAR 0 1
39876: PPUSH
39877: LD_INT 12
39879: PPUSH
39880: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39884: LD_INT 3
39886: PPUSH
39887: LD_VAR 0 1
39891: PPUSH
39892: LD_INT 3
39894: PPUSH
39895: CALL 8238 0 3
// ruLab = building ;
39899: LD_ADDR_EXP 29
39903: PUSH
39904: LD_VAR 0 1
39908: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39909: LD_VAR 0 1
39913: PPUSH
39914: CALL_OW 266
39918: PUSH
39919: LD_INT 32
39921: EQUAL
39922: IFFALSE 40040
// begin uc_side = 3 ;
39924: LD_ADDR_OWVAR 20
39928: PUSH
39929: LD_INT 3
39931: ST_TO_ADDR
// uc_nation = 3 ;
39932: LD_ADDR_OWVAR 21
39936: PUSH
39937: LD_INT 3
39939: ST_TO_ADDR
// hc_gallery =  ;
39940: LD_ADDR_OWVAR 33
39944: PUSH
39945: LD_STRING 
39947: ST_TO_ADDR
// hc_name =  ;
39948: LD_ADDR_OWVAR 26
39952: PUSH
39953: LD_STRING 
39955: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39956: LD_INT 0
39958: PPUSH
39959: LD_INT 1
39961: PPUSH
39962: LD_EXP 25
39966: PPUSH
39967: LD_EXP 26
39971: PPUSH
39972: CALL_OW 12
39976: PPUSH
39977: CALL_OW 380
// un = CreateHuman ;
39981: LD_ADDR_VAR 0 3
39985: PUSH
39986: CALL_OW 44
39990: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39991: LD_VAR 0 3
39995: PPUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40005: LD_VAR 0 1
40009: PPUSH
40010: LD_INT 43
40012: PUSH
40013: LD_INT 44
40015: PUSH
40016: LD_INT 46
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PPUSH
40027: LD_INT 3
40029: PPUSH
40030: CALL_OW 12
40034: ARRAY
40035: PPUSH
40036: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 266
40049: PUSH
40050: LD_INT 33
40052: EQUAL
40053: IFFALSE 40090
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40055: LD_VAR 0 1
40059: PPUSH
40060: LD_INT 43
40062: PUSH
40063: LD_INT 44
40065: PUSH
40066: LD_INT 46
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PPUSH
40077: LD_INT 3
40079: PPUSH
40080: CALL_OW 12
40084: ARRAY
40085: PPUSH
40086: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40090: LD_VAR 0 1
40094: PPUSH
40095: CALL_OW 266
40099: PUSH
40100: LD_INT 24
40102: EQUAL
40103: IFFALSE 40113
// russianAI = 1 ;
40105: LD_ADDR_EXP 27
40109: PUSH
40110: LD_INT 1
40112: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40113: LD_EXP 31
40117: PUSH
40118: LD_INT 0
40120: GREATER
40121: IFFALSE 40195
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40123: LD_ADDR_EXP 31
40127: PUSH
40128: LD_EXP 31
40132: PPUSH
40133: LD_INT 1
40135: PPUSH
40136: CALL_OW 3
40140: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40141: LD_ADDR_EXP 31
40145: PUSH
40146: LD_EXP 31
40150: PPUSH
40151: LD_INT 1
40153: PPUSH
40154: CALL_OW 3
40158: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40159: LD_ADDR_EXP 31
40163: PUSH
40164: LD_EXP 31
40168: PPUSH
40169: LD_INT 1
40171: PPUSH
40172: CALL_OW 3
40176: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40177: LD_ADDR_EXP 31
40181: PUSH
40182: LD_EXP 31
40186: PPUSH
40187: LD_INT 1
40189: PPUSH
40190: CALL_OW 3
40194: ST_TO_ADDR
// end ; end ; end ;
40195: PPOPN 3
40197: END
// on UpgradeComplete ( building ) do var i ;
40198: LD_INT 0
40200: PPUSH
// begin if GetSide ( building ) = 3 then
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 255
40210: PUSH
40211: LD_INT 3
40213: EQUAL
40214: IFFALSE 40395
// begin if GetBType ( building ) = b_factory then
40216: LD_VAR 0 1
40220: PPUSH
40221: CALL_OW 266
40225: PUSH
40226: LD_INT 3
40228: EQUAL
40229: IFFALSE 40296
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40231: LD_ADDR_VAR 0 2
40235: PUSH
40236: LD_INT 22
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 25
40248: PUSH
40249: LD_INT 3
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PPUSH
40260: CALL_OW 69
40264: PUSH
40265: FOR_IN
40266: IFFALSE 40284
// ComEnterUnit ( i , building ) ;
40268: LD_VAR 0 2
40272: PPUSH
40273: LD_VAR 0 1
40277: PPUSH
40278: CALL_OW 120
40282: GO 40265
40284: POP
40285: POP
// ruFab = building ;
40286: LD_ADDR_EXP 30
40290: PUSH
40291: LD_VAR 0 1
40295: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40296: LD_VAR 0 1
40300: PPUSH
40301: CALL_OW 266
40305: PUSH
40306: LD_INT 8
40308: EQUAL
40309: IFFALSE 40366
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40311: LD_ADDR_VAR 0 2
40315: PUSH
40316: LD_INT 22
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 25
40328: PUSH
40329: LD_INT 4
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PPUSH
40340: CALL_OW 69
40344: PUSH
40345: FOR_IN
40346: IFFALSE 40364
// ComEnterUnit ( i , building ) ;
40348: LD_VAR 0 2
40352: PPUSH
40353: LD_VAR 0 1
40357: PPUSH
40358: CALL_OW 120
40362: GO 40345
40364: POP
40365: POP
// if GetBType ( building ) = b_warehouse then
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 266
40375: PUSH
40376: LD_INT 1
40378: EQUAL
40379: IFFALSE 40395
// begin ComEnterUnit ( Borodin , building ) ;
40381: LD_EXP 24
40385: PPUSH
40386: LD_VAR 0 1
40390: PPUSH
40391: CALL_OW 120
// end ; end ; end ;
40395: PPOPN 2
40397: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40398: LD_VAR 0 1
40402: PPUSH
40403: CALL_OW 247
40407: PUSH
40408: LD_INT 2
40410: EQUAL
40411: PUSH
40412: LD_VAR 0 1
40416: PPUSH
40417: CALL_OW 263
40421: PUSH
40422: LD_INT 3
40424: EQUAL
40425: AND
40426: PUSH
40427: LD_EXP 41
40431: PUSH
40432: LD_INT 0
40434: EQUAL
40435: AND
40436: IFFALSE 40554
// begin varEvent1 = 1 ;
40438: LD_ADDR_EXP 41
40442: PUSH
40443: LD_INT 1
40445: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40455: LD_INT 22
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 21
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: PUSH
40478: LD_INT 25
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 25
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 25
40500: PUSH
40501: LD_INT 3
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 25
40510: PUSH
40511: LD_INT 4
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: PPUSH
40530: CALL_OW 69
40534: PUSH
40535: LD_EXP 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: DIFF
40543: PPUSH
40544: LD_STRING DC-Sol1-1
40546: PPUSH
40547: LD_STRING DC-FSol1-1
40549: PPUSH
40550: CALL 7078 0 3
// end ; end ;
40554: PPOPN 1
40556: END
// on UnitDestroyed ( unit ) do var i ;
40557: LD_INT 0
40559: PPUSH
// begin if GetSide ( unit ) = 3 then
40560: LD_VAR 0 1
40564: PPUSH
40565: CALL_OW 255
40569: PUSH
40570: LD_INT 3
40572: EQUAL
40573: IFFALSE 41343
// begin if GetType ( unit ) = unit_building then
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 247
40584: PUSH
40585: LD_INT 3
40587: EQUAL
40588: IFFALSE 41280
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 266
40599: PUSH
40600: LD_INT 31
40602: EQUAL
40603: PUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 266
40613: PUSH
40614: LD_INT 32
40616: EQUAL
40617: OR
40618: PUSH
40619: LD_VAR 0 1
40623: PPUSH
40624: CALL_OW 266
40628: PUSH
40629: LD_INT 36
40631: EQUAL
40632: OR
40633: PUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 266
40643: PUSH
40644: LD_INT 0
40646: EQUAL
40647: OR
40648: PUSH
40649: LD_VAR 0 1
40653: PPUSH
40654: CALL_OW 266
40658: PUSH
40659: LD_INT 24
40661: EQUAL
40662: OR
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 266
40673: PUSH
40674: LD_INT 17
40676: EQUAL
40677: OR
40678: PUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 266
40688: PUSH
40689: LD_INT 25
40691: EQUAL
40692: OR
40693: PUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 266
40703: PUSH
40704: LD_INT 19
40706: EQUAL
40707: OR
40708: PUSH
40709: LD_VAR 0 1
40713: PPUSH
40714: CALL_OW 266
40718: PUSH
40719: LD_INT 20
40721: EQUAL
40722: OR
40723: PUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 266
40733: PUSH
40734: LD_INT 18
40736: EQUAL
40737: OR
40738: PUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 266
40748: PUSH
40749: LD_INT 21
40751: EQUAL
40752: OR
40753: PUSH
40754: LD_VAR 0 1
40758: PPUSH
40759: CALL_OW 266
40763: PUSH
40764: LD_INT 23
40766: EQUAL
40767: OR
40768: PUSH
40769: LD_VAR 0 1
40773: PPUSH
40774: CALL_OW 266
40778: PUSH
40779: LD_INT 16
40781: EQUAL
40782: OR
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 266
40793: PUSH
40794: LD_INT 6
40796: EQUAL
40797: OR
40798: PUSH
40799: LD_VAR 0 1
40803: PPUSH
40804: CALL_OW 266
40808: PUSH
40809: LD_INT 29
40811: EQUAL
40812: OR
40813: PUSH
40814: LD_VAR 0 1
40818: PPUSH
40819: CALL_OW 266
40823: PUSH
40824: LD_INT 26
40826: EQUAL
40827: OR
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 266
40838: PUSH
40839: LD_INT 30
40841: EQUAL
40842: OR
40843: PUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: CALL_OW 266
40853: PUSH
40854: LD_INT 28
40856: EQUAL
40857: OR
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 266
40868: PUSH
40869: LD_INT 27
40871: EQUAL
40872: OR
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 266
40883: PUSH
40884: LD_INT 33
40886: EQUAL
40887: OR
40888: PUSH
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 266
40898: PUSH
40899: LD_INT 2
40901: EQUAL
40902: OR
40903: PUSH
40904: LD_VAR 0 1
40908: PPUSH
40909: CALL_OW 266
40913: PUSH
40914: LD_INT 4
40916: EQUAL
40917: OR
40918: IFFALSE 41004
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40920: LD_ADDR_EXP 31
40924: PUSH
40925: LD_EXP 31
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 266
40939: ADD
40940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40941: LD_ADDR_EXP 31
40945: PUSH
40946: LD_EXP 31
40950: PUSH
40951: LD_VAR 0 1
40955: PPUSH
40956: CALL_OW 250
40960: ADD
40961: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40962: LD_ADDR_EXP 31
40966: PUSH
40967: LD_EXP 31
40971: PUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 251
40981: ADD
40982: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40983: LD_ADDR_EXP 31
40987: PUSH
40988: LD_EXP 31
40992: PUSH
40993: LD_VAR 0 1
40997: PPUSH
40998: CALL_OW 254
41002: ADD
41003: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41004: LD_VAR 0 1
41008: PPUSH
41009: CALL_OW 266
41013: PUSH
41014: LD_INT 1
41016: EQUAL
41017: IFFALSE 41096
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41019: LD_ADDR_EXP 31
41023: PUSH
41024: LD_EXP 31
41028: PUSH
41029: LD_INT 0
41031: ADD
41032: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41033: LD_ADDR_EXP 31
41037: PUSH
41038: LD_EXP 31
41042: PUSH
41043: LD_VAR 0 1
41047: PPUSH
41048: CALL_OW 250
41052: ADD
41053: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41054: LD_ADDR_EXP 31
41058: PUSH
41059: LD_EXP 31
41063: PUSH
41064: LD_VAR 0 1
41068: PPUSH
41069: CALL_OW 251
41073: ADD
41074: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41075: LD_ADDR_EXP 31
41079: PUSH
41080: LD_EXP 31
41084: PUSH
41085: LD_VAR 0 1
41089: PPUSH
41090: CALL_OW 254
41094: ADD
41095: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41096: LD_VAR 0 1
41100: PPUSH
41101: CALL_OW 266
41105: PUSH
41106: LD_INT 3
41108: EQUAL
41109: IFFALSE 41188
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41111: LD_ADDR_EXP 31
41115: PUSH
41116: LD_EXP 31
41120: PUSH
41121: LD_INT 2
41123: ADD
41124: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41125: LD_ADDR_EXP 31
41129: PUSH
41130: LD_EXP 31
41134: PUSH
41135: LD_VAR 0 1
41139: PPUSH
41140: CALL_OW 250
41144: ADD
41145: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41146: LD_ADDR_EXP 31
41150: PUSH
41151: LD_EXP 31
41155: PUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: CALL_OW 251
41165: ADD
41166: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41167: LD_ADDR_EXP 31
41171: PUSH
41172: LD_EXP 31
41176: PUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 254
41186: ADD
41187: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41188: LD_VAR 0 1
41192: PPUSH
41193: CALL_OW 266
41197: PUSH
41198: LD_INT 5
41200: EQUAL
41201: IFFALSE 41280
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41203: LD_ADDR_EXP 31
41207: PUSH
41208: LD_EXP 31
41212: PUSH
41213: LD_INT 4
41215: ADD
41216: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41217: LD_ADDR_EXP 31
41221: PUSH
41222: LD_EXP 31
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 250
41236: ADD
41237: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41238: LD_ADDR_EXP 31
41242: PUSH
41243: LD_EXP 31
41247: PUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 251
41257: ADD
41258: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41259: LD_ADDR_EXP 31
41263: PUSH
41264: LD_EXP 31
41268: PUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 254
41278: ADD
41279: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41280: LD_VAR 0 1
41284: PPUSH
41285: CALL_OW 247
41289: PUSH
41290: LD_INT 1
41292: EQUAL
41293: IFFALSE 41343
// begin for i in defenders_list do
41295: LD_ADDR_VAR 0 2
41299: PUSH
41300: LD_EXP 32
41304: PUSH
41305: FOR_IN
41306: IFFALSE 41341
// if i = unit then
41308: LD_VAR 0 2
41312: PUSH
41313: LD_VAR 0 1
41317: EQUAL
41318: IFFALSE 41339
// defenders_list = defenders_list diff [ unit ] ;
41320: LD_ADDR_EXP 32
41324: PUSH
41325: LD_EXP 32
41329: PUSH
41330: LD_VAR 0 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: DIFF
41338: ST_TO_ADDR
41339: GO 41305
41341: POP
41342: POP
// end ; end ; end ; end_of_file
41343: PPOPN 2
41345: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41346: GO 41348
41348: DISABLE
41349: LD_INT 0
41351: PPUSH
// begin enemyWayX = [ ] ;
41352: LD_ADDR_EXP 45
41356: PUSH
41357: EMPTY
41358: ST_TO_ADDR
// enemyWayY = [ ] ;
41359: LD_ADDR_EXP 46
41363: PUSH
41364: EMPTY
41365: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41366: LD_ADDR_VAR 0 1
41370: PUSH
41371: LD_INT 1
41373: PPUSH
41374: LD_INT 3
41376: PPUSH
41377: CALL_OW 12
41381: ST_TO_ADDR
// if rnd = 1 then
41382: LD_VAR 0 1
41386: PUSH
41387: LD_INT 1
41389: EQUAL
41390: IFFALSE 41430
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41392: LD_ADDR_EXP 45
41396: PUSH
41397: LD_INT 73
41399: PUSH
41400: LD_INT 46
41402: PUSH
41403: LD_INT 29
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41411: LD_ADDR_EXP 46
41415: PUSH
41416: LD_INT 71
41418: PUSH
41419: LD_INT 43
41421: PUSH
41422: LD_INT 29
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// end ; if rnd = 2 then
41430: LD_VAR 0 1
41434: PUSH
41435: LD_INT 2
41437: EQUAL
41438: IFFALSE 41462
// begin enemyWayX = [ 64 ] ;
41440: LD_ADDR_EXP 45
41444: PUSH
41445: LD_INT 64
41447: PUSH
41448: EMPTY
41449: LIST
41450: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41451: LD_ADDR_EXP 46
41455: PUSH
41456: LD_INT 43
41458: PUSH
41459: EMPTY
41460: LIST
41461: ST_TO_ADDR
// end ; if rnd = 3 then
41462: LD_VAR 0 1
41466: PUSH
41467: LD_INT 3
41469: EQUAL
41470: IFFALSE 41494
// begin enemyWayX = [ 80 ] ;
41472: LD_ADDR_EXP 45
41476: PUSH
41477: LD_INT 80
41479: PUSH
41480: EMPTY
41481: LIST
41482: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41483: LD_ADDR_EXP 46
41487: PUSH
41488: LD_INT 28
41490: PUSH
41491: EMPTY
41492: LIST
41493: ST_TO_ADDR
// end ; enable ;
41494: ENABLE
// end ;
41495: PPOPN 1
41497: END
// every 0 0$1 do
41498: GO 41500
41500: DISABLE
// begin enable ;
41501: ENABLE
// if escapeAvalaible = 0 then
41502: LD_EXP 36
41506: PUSH
41507: LD_INT 0
41509: EQUAL
41510: IFFALSE 41522
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41512: LD_INT 3
41514: PPUSH
41515: LD_INT 6
41517: PPUSH
41518: CALL 8479 0 2
// if escapeAvalaible = 0 then
41522: LD_EXP 36
41526: PUSH
41527: LD_INT 0
41529: EQUAL
41530: IFFALSE 41542
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41532: LD_INT 1
41534: PPUSH
41535: LD_INT 24
41537: PPUSH
41538: CALL 9139 0 2
// if russianAI = 1 then
41542: LD_EXP 27
41546: PUSH
41547: LD_INT 1
41549: EQUAL
41550: IFFALSE 41620
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41552: LD_INT 3
41554: PPUSH
41555: LD_INT 7
41557: PPUSH
41558: LD_INT 6
41560: PPUSH
41561: LD_EXP 29
41565: PPUSH
41566: CALL 11577 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41570: LD_INT 3
41572: PPUSH
41573: LD_EXP 28
41577: PPUSH
41578: LD_INT 6
41580: PPUSH
41581: LD_EXP 31
41585: PPUSH
41586: CALL 11171 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41590: LD_INT 3
41592: PPUSH
41593: LD_INT 26
41595: PPUSH
41596: LD_EXP 45
41600: PPUSH
41601: LD_EXP 46
41605: PPUSH
41606: CALL 10039 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41610: LD_INT 3
41612: PPUSH
41613: LD_INT 1
41615: PPUSH
41616: CALL 12121 0 2
// end ; if SikorskyArrive = 1 then
41620: LD_EXP 18
41624: PUSH
41625: LD_INT 1
41627: EQUAL
41628: IFFALSE 41646
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41630: LD_INT 3
41632: PPUSH
41633: LD_INT 10
41635: PPUSH
41636: LD_INT 53
41638: PPUSH
41639: LD_INT 59
41641: PPUSH
41642: CALL 9836 0 4
// end ;
41646: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41647: LD_EXP 27
41651: PUSH
41652: LD_INT 1
41654: EQUAL
41655: IFFALSE 41931
41657: GO 41659
41659: DISABLE
41660: LD_INT 0
41662: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41663: LD_ADDR_VAR 0 1
41667: PUSH
41668: LD_INT 22
41670: PUSH
41671: LD_INT 3
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 21
41680: PUSH
41681: LD_INT 3
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 30
41690: PUSH
41691: LD_INT 32
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: LD_INT 35
41706: PUSH
41707: LD_INT 43
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 35
41716: PUSH
41717: LD_INT 44
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 35
41726: PUSH
41727: LD_INT 46
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: PPUSH
41750: CALL_OW 69
41754: PUSH
41755: FOR_IN
41756: IFFALSE 41795
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41758: LD_VAR 0 1
41762: PPUSH
41763: LD_INT 43
41765: PUSH
41766: LD_INT 44
41768: PUSH
41769: LD_INT 46
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PPUSH
41780: LD_INT 3
41782: PPUSH
41783: CALL_OW 12
41787: ARRAY
41788: PPUSH
41789: CALL_OW 431
41793: GO 41755
41795: POP
41796: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41797: LD_ADDR_VAR 0 1
41801: PUSH
41802: LD_INT 22
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 21
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 30
41824: PUSH
41825: LD_INT 33
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 3
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 35
41840: PUSH
41841: LD_INT 43
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 35
41850: PUSH
41851: LD_INT 44
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 35
41860: PUSH
41861: LD_INT 46
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: PPUSH
41884: CALL_OW 69
41888: PUSH
41889: FOR_IN
41890: IFFALSE 41929
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41892: LD_VAR 0 1
41896: PPUSH
41897: LD_INT 43
41899: PUSH
41900: LD_INT 44
41902: PUSH
41903: LD_INT 46
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PPUSH
41914: LD_INT 3
41916: PPUSH
41917: CALL_OW 12
41921: ARRAY
41922: PPUSH
41923: CALL_OW 431
41927: GO 41889
41929: POP
41930: POP
// end ;
41931: PPOPN 1
41933: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41934: LD_EXP 24
41938: PPUSH
41939: CALL_OW 310
41943: NOT
41944: PUSH
41945: LD_EXP 28
41949: PPUSH
41950: CALL_OW 302
41954: AND
41955: PUSH
41956: LD_EXP 28
41960: PPUSH
41961: CALL_OW 255
41965: PUSH
41966: LD_INT 3
41968: EQUAL
41969: AND
41970: IFFALSE 41990
41972: GO 41974
41974: DISABLE
// begin enable ;
41975: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41976: LD_EXP 24
41980: PPUSH
41981: LD_EXP 28
41985: PPUSH
41986: CALL_OW 120
// end ;
41990: END
// every 0 0$1 trigger SikorskyAI = 1 do
41991: LD_EXP 20
41995: PUSH
41996: LD_INT 1
41998: EQUAL
41999: IFFALSE 42034
42001: GO 42003
42003: DISABLE
// begin enable ;
42004: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42005: LD_INT 4
42007: PPUSH
42008: LD_INT 10
42010: PPUSH
42011: LD_INT 93
42013: PPUSH
42014: LD_INT 93
42016: PPUSH
42017: CALL 9836 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42021: LD_INT 4
42023: PPUSH
42024: LD_INT 11
42026: PPUSH
42027: LD_INT 3
42029: PPUSH
42030: CALL 16333 0 3
// end ;
42034: END
// every 0 0$1 trigger SikorskyAI = 1 do
42035: LD_EXP 20
42039: PUSH
42040: LD_INT 1
42042: EQUAL
42043: IFFALSE 42055
42045: GO 42047
42047: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42048: LD_INT 4
42050: PPUSH
42051: CALL 10843 0 1
42055: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42056: LD_EXP 27
42060: PUSH
42061: LD_INT 1
42063: EQUAL
42064: PUSH
42065: LD_EXP 30
42069: PPUSH
42070: CALL_OW 302
42074: AND
42075: PUSH
42076: LD_EXP 30
42080: PPUSH
42081: CALL_OW 255
42085: PUSH
42086: LD_INT 3
42088: EQUAL
42089: AND
42090: PUSH
42091: LD_INT 22
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 21
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 33
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: PPUSH
42126: CALL_OW 69
42130: PUSH
42131: LD_INT 0
42133: EQUAL
42134: AND
42135: IFFALSE 42369
42137: GO 42139
42139: DISABLE
// begin enable ;
42140: ENABLE
// if Difficulty = 1 then
42141: LD_OWVAR 67
42145: PUSH
42146: LD_INT 1
42148: EQUAL
42149: IFFALSE 42217
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42151: LD_INT 3
42153: PPUSH
42154: LD_EXP 30
42158: PPUSH
42159: LD_INT 5
42161: PPUSH
42162: LD_INT 8
42164: PPUSH
42165: CALL_OW 12
42169: PPUSH
42170: LD_INT 43
42172: PUSH
42173: LD_INT 43
42175: PUSH
42176: LD_INT 43
42178: PUSH
42179: LD_INT 43
42181: PUSH
42182: LD_INT 44
42184: PUSH
42185: LD_INT 44
42187: PUSH
42188: LD_INT 44
42190: PUSH
42191: LD_INT 46
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: PPUSH
42204: LD_INT 1
42206: PPUSH
42207: LD_INT 3
42209: PPUSH
42210: LD_INT 24
42212: PPUSH
42213: CALL 9682 0 7
// if Difficulty = 2 then
42217: LD_OWVAR 67
42221: PUSH
42222: LD_INT 2
42224: EQUAL
42225: IFFALSE 42293
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42227: LD_INT 3
42229: PPUSH
42230: LD_EXP 30
42234: PPUSH
42235: LD_INT 6
42237: PPUSH
42238: LD_INT 8
42240: PPUSH
42241: CALL_OW 12
42245: PPUSH
42246: LD_INT 43
42248: PUSH
42249: LD_INT 43
42251: PUSH
42252: LD_INT 44
42254: PUSH
42255: LD_INT 44
42257: PUSH
42258: LD_INT 44
42260: PUSH
42261: LD_INT 44
42263: PUSH
42264: LD_INT 46
42266: PUSH
42267: LD_INT 46
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: PPUSH
42280: LD_INT 1
42282: PPUSH
42283: LD_INT 3
42285: PPUSH
42286: LD_INT 24
42288: PPUSH
42289: CALL 9682 0 7
// if Difficulty = 3 then
42293: LD_OWVAR 67
42297: PUSH
42298: LD_INT 3
42300: EQUAL
42301: IFFALSE 42369
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42303: LD_INT 3
42305: PPUSH
42306: LD_EXP 30
42310: PPUSH
42311: LD_INT 7
42313: PPUSH
42314: LD_INT 8
42316: PPUSH
42317: CALL_OW 12
42321: PPUSH
42322: LD_INT 43
42324: PUSH
42325: LD_INT 43
42327: PUSH
42328: LD_INT 44
42330: PUSH
42331: LD_INT 44
42333: PUSH
42334: LD_INT 44
42336: PUSH
42337: LD_INT 46
42339: PUSH
42340: LD_INT 46
42342: PUSH
42343: LD_INT 46
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: PPUSH
42356: LD_INT 1
42358: PPUSH
42359: LD_INT 3
42361: PPUSH
42362: LD_INT 24
42364: PPUSH
42365: CALL 9682 0 7
// end ;
42369: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42370: LD_EXP 38
42374: PUSH
42375: LD_INT 1
42377: EQUAL
42378: IFFALSE 42460
42380: GO 42382
42382: DISABLE
42383: LD_INT 0
42385: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42386: LD_ADDR_VAR 0 1
42390: PUSH
42391: LD_INT 22
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 21
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: LD_INT 24
42416: PUSH
42417: LD_INT 650
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: PPUSH
42433: CALL_OW 69
42437: PUSH
42438: FOR_IN
42439: IFFALSE 42458
// ComMoveXY ( i , 51 , 12 ) ;
42441: LD_VAR 0 1
42445: PPUSH
42446: LD_INT 51
42448: PPUSH
42449: LD_INT 12
42451: PPUSH
42452: CALL_OW 111
42456: GO 42438
42458: POP
42459: POP
// end ; end_of_file
42460: PPOPN 1
42462: END
// every 1 1$20 trigger firstAttack = 1 do
42463: LD_EXP 33
42467: PUSH
42468: LD_INT 1
42470: EQUAL
42471: IFFALSE 42577
42473: GO 42475
42475: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42476: LD_INT 6
42478: PPUSH
42479: LD_INT 3
42481: PPUSH
42482: LD_INT 5
42484: PPUSH
42485: LD_INT 6
42487: PPUSH
42488: CALL_OW 12
42492: PUSH
42493: LD_INT 5
42495: PPUSH
42496: LD_INT 6
42498: PPUSH
42499: CALL_OW 12
42503: PUSH
42504: LD_INT 5
42506: PPUSH
42507: LD_INT 6
42509: PPUSH
42510: CALL_OW 12
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: PUSH
42520: LD_OWVAR 67
42524: ARRAY
42525: PPUSH
42526: LD_INT 0
42528: PPUSH
42529: LD_INT 0
42531: PPUSH
42532: LD_INT 0
42534: PPUSH
42535: LD_INT 0
42537: PPUSH
42538: LD_EXP 25
42542: PPUSH
42543: LD_EXP 26
42547: PPUSH
42548: CALL_OW 12
42552: PPUSH
42553: LD_INT 16
42555: PPUSH
42556: LD_INT 7
42558: PPUSH
42559: LD_INT 1
42561: PPUSH
42562: LD_INT 1
42564: PPUSH
42565: LD_INT 3
42567: PPUSH
42568: CALL_OW 12
42572: PPUSH
42573: CALL 12351 0 12
42577: END
// every 1 1$40 trigger firstAttack = 1 do
42578: LD_EXP 33
42582: PUSH
42583: LD_INT 1
42585: EQUAL
42586: IFFALSE 42678
42588: GO 42590
42590: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42591: LD_INT 16
42593: PPUSH
42594: LD_INT 6
42596: PPUSH
42597: LD_INT 3
42599: PPUSH
42600: LD_INT 4
42602: PPUSH
42603: CALL_OW 12
42607: PUSH
42608: LD_INT 4
42610: PPUSH
42611: LD_INT 5
42613: PPUSH
42614: CALL_OW 12
42618: PUSH
42619: LD_INT 5
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: PUSH
42627: LD_OWVAR 67
42631: ARRAY
42632: PPUSH
42633: LD_EXP 25
42637: PPUSH
42638: LD_EXP 26
42642: PPUSH
42643: CALL_OW 12
42647: PPUSH
42648: LD_INT 3
42650: PPUSH
42651: LD_INT 1
42653: PPUSH
42654: LD_INT 3
42656: PPUSH
42657: LD_INT 44
42659: PUSH
42660: LD_INT 46
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PPUSH
42667: EMPTY
42668: PPUSH
42669: EMPTY
42670: PPUSH
42671: LD_INT 1
42673: PPUSH
42674: CALL 14644 0 11
42678: END
// every 5 5$40 trigger firstAttack = 1 and JMMArrive = 0 do
42679: LD_EXP 33
42683: PUSH
42684: LD_INT 1
42686: EQUAL
42687: PUSH
42688: LD_EXP 39
42692: PUSH
42693: LD_INT 0
42695: EQUAL
42696: AND
42697: IFFALSE 42803
42699: GO 42701
42701: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42702: LD_INT 6
42704: PPUSH
42705: LD_INT 3
42707: PPUSH
42708: LD_INT 5
42710: PPUSH
42711: LD_INT 6
42713: PPUSH
42714: CALL_OW 12
42718: PUSH
42719: LD_INT 5
42721: PPUSH
42722: LD_INT 6
42724: PPUSH
42725: CALL_OW 12
42729: PUSH
42730: LD_INT 5
42732: PPUSH
42733: LD_INT 6
42735: PPUSH
42736: CALL_OW 12
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: PUSH
42746: LD_OWVAR 67
42750: ARRAY
42751: PPUSH
42752: LD_INT 0
42754: PPUSH
42755: LD_INT 0
42757: PPUSH
42758: LD_INT 0
42760: PPUSH
42761: LD_INT 0
42763: PPUSH
42764: LD_EXP 25
42768: PPUSH
42769: LD_EXP 26
42773: PPUSH
42774: CALL_OW 12
42778: PPUSH
42779: LD_INT 16
42781: PPUSH
42782: LD_INT 7
42784: PPUSH
42785: LD_INT 1
42787: PPUSH
42788: LD_INT 1
42790: PPUSH
42791: LD_INT 3
42793: PPUSH
42794: CALL_OW 12
42798: PPUSH
42799: CALL 12351 0 12
42803: END
// every 5 5$50 trigger firstAttack = 1 and JMMArrive = 0 do
42804: LD_EXP 33
42808: PUSH
42809: LD_INT 1
42811: EQUAL
42812: PUSH
42813: LD_EXP 39
42817: PUSH
42818: LD_INT 0
42820: EQUAL
42821: AND
42822: IFFALSE 42918
42824: GO 42826
42826: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42827: LD_INT 16
42829: PPUSH
42830: LD_INT 6
42832: PPUSH
42833: LD_INT 5
42835: PPUSH
42836: LD_INT 6
42838: PPUSH
42839: CALL_OW 12
42843: PUSH
42844: LD_INT 6
42846: PPUSH
42847: LD_INT 7
42849: PPUSH
42850: CALL_OW 12
42854: PUSH
42855: LD_INT 7
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: LIST
42862: PUSH
42863: LD_OWVAR 67
42867: ARRAY
42868: PPUSH
42869: LD_EXP 25
42873: PPUSH
42874: LD_EXP 26
42878: PPUSH
42879: CALL_OW 12
42883: PPUSH
42884: LD_INT 3
42886: PPUSH
42887: LD_INT 1
42889: PPUSH
42890: LD_INT 3
42892: PPUSH
42893: LD_INT 43
42895: PUSH
42896: LD_INT 44
42898: PUSH
42899: LD_INT 46
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: PPUSH
42907: EMPTY
42908: PPUSH
42909: EMPTY
42910: PPUSH
42911: LD_INT 1
42913: PPUSH
42914: CALL 14644 0 11
42918: END
// every 8 8$50 trigger firstAttack = 1 and JMMArrive = 0 do
42919: LD_EXP 33
42923: PUSH
42924: LD_INT 1
42926: EQUAL
42927: PUSH
42928: LD_EXP 39
42932: PUSH
42933: LD_INT 0
42935: EQUAL
42936: AND
42937: IFFALSE 43033
42939: GO 42941
42941: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42942: LD_INT 16
42944: PPUSH
42945: LD_INT 6
42947: PPUSH
42948: LD_INT 5
42950: PPUSH
42951: LD_INT 6
42953: PPUSH
42954: CALL_OW 12
42958: PUSH
42959: LD_INT 6
42961: PPUSH
42962: LD_INT 7
42964: PPUSH
42965: CALL_OW 12
42969: PUSH
42970: LD_INT 7
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: PUSH
42978: LD_OWVAR 67
42982: ARRAY
42983: PPUSH
42984: LD_EXP 25
42988: PPUSH
42989: LD_EXP 26
42993: PPUSH
42994: CALL_OW 12
42998: PPUSH
42999: LD_INT 3
43001: PPUSH
43002: LD_INT 1
43004: PPUSH
43005: LD_INT 3
43007: PPUSH
43008: LD_INT 43
43010: PUSH
43011: LD_INT 44
43013: PUSH
43014: LD_INT 46
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: PPUSH
43022: EMPTY
43023: PPUSH
43024: EMPTY
43025: PPUSH
43026: LD_INT 1
43028: PPUSH
43029: CALL 14644 0 11
43033: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43034: LD_EXP 33
43038: PUSH
43039: LD_INT 1
43041: EQUAL
43042: PUSH
43043: LD_EXP 39
43047: PUSH
43048: LD_INT 0
43050: EQUAL
43051: AND
43052: IFFALSE 43128
43054: GO 43056
43056: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43057: LD_INT 16
43059: PPUSH
43060: LD_INT 6
43062: PPUSH
43063: LD_INT 5
43065: PUSH
43066: LD_INT 6
43068: PUSH
43069: LD_INT 7
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: PUSH
43077: LD_OWVAR 67
43081: ARRAY
43082: PPUSH
43083: LD_EXP 25
43087: PPUSH
43088: LD_EXP 26
43092: PPUSH
43093: CALL_OW 12
43097: PPUSH
43098: LD_INT 3
43100: PPUSH
43101: LD_INT 1
43103: PPUSH
43104: LD_INT 3
43106: PPUSH
43107: LD_INT 44
43109: PUSH
43110: LD_INT 46
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PPUSH
43117: EMPTY
43118: PPUSH
43119: EMPTY
43120: PPUSH
43121: LD_INT 1
43123: PPUSH
43124: CALL 14644 0 11
43128: END
// every 1 1$00 trigger secondAttack = 1 do
43129: LD_EXP 34
43133: PUSH
43134: LD_INT 1
43136: EQUAL
43137: IFFALSE 43219
43139: GO 43141
43141: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43142: LD_INT 6
43144: PPUSH
43145: LD_INT 3
43147: PPUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 4
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: PUSH
43162: LD_OWVAR 67
43166: ARRAY
43167: PPUSH
43168: LD_INT 0
43170: PPUSH
43171: LD_INT 0
43173: PPUSH
43174: LD_INT 0
43176: PPUSH
43177: LD_INT 0
43179: PPUSH
43180: LD_EXP 25
43184: PPUSH
43185: LD_EXP 26
43189: PPUSH
43190: CALL_OW 12
43194: PPUSH
43195: LD_INT 16
43197: PPUSH
43198: LD_INT 7
43200: PPUSH
43201: LD_INT 1
43203: PPUSH
43204: LD_INT 1
43206: PPUSH
43207: LD_INT 3
43209: PPUSH
43210: CALL_OW 12
43214: PPUSH
43215: CALL 12351 0 12
43219: END
// every 1 1$00 trigger secondAttack = 1 do
43220: LD_EXP 34
43224: PUSH
43225: LD_INT 1
43227: EQUAL
43228: IFFALSE 43332
43230: GO 43232
43232: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43233: LD_INT 16
43235: PPUSH
43236: LD_INT 6
43238: PPUSH
43239: LD_INT 5
43241: PPUSH
43242: LD_INT 8
43244: PPUSH
43245: CALL_OW 12
43249: PUSH
43250: LD_INT 6
43252: PPUSH
43253: LD_INT 9
43255: PPUSH
43256: CALL_OW 12
43260: PUSH
43261: LD_INT 7
43263: PPUSH
43264: LD_INT 9
43266: PPUSH
43267: CALL_OW 12
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: PUSH
43277: LD_OWVAR 67
43281: ARRAY
43282: PPUSH
43283: LD_EXP 25
43287: PPUSH
43288: LD_EXP 26
43292: PPUSH
43293: CALL_OW 12
43297: PPUSH
43298: LD_INT 3
43300: PPUSH
43301: LD_INT 1
43303: PPUSH
43304: LD_INT 3
43306: PPUSH
43307: LD_INT 43
43309: PUSH
43310: LD_INT 44
43312: PUSH
43313: LD_INT 46
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: PPUSH
43321: EMPTY
43322: PPUSH
43323: EMPTY
43324: PPUSH
43325: LD_INT 1
43327: PPUSH
43328: CALL 14644 0 11
43332: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43333: LD_EXP 18
43337: PUSH
43338: LD_INT 0
43340: EQUAL
43341: IFFALSE 43423
43343: GO 43345
43345: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43346: LD_INT 6
43348: PPUSH
43349: LD_INT 3
43351: PPUSH
43352: LD_INT 3
43354: PUSH
43355: LD_INT 4
43357: PUSH
43358: LD_INT 5
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: PUSH
43366: LD_OWVAR 67
43370: ARRAY
43371: PPUSH
43372: LD_INT 0
43374: PPUSH
43375: LD_INT 0
43377: PPUSH
43378: LD_INT 0
43380: PPUSH
43381: LD_INT 0
43383: PPUSH
43384: LD_EXP 25
43388: PPUSH
43389: LD_EXP 26
43393: PPUSH
43394: CALL_OW 12
43398: PPUSH
43399: LD_INT 16
43401: PPUSH
43402: LD_INT 7
43404: PPUSH
43405: LD_INT 1
43407: PPUSH
43408: LD_INT 1
43410: PPUSH
43411: LD_INT 3
43413: PPUSH
43414: CALL_OW 12
43418: PPUSH
43419: CALL 12351 0 12
43423: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43424: LD_EXP 18
43428: PUSH
43429: LD_INT 0
43431: EQUAL
43432: IFFALSE 43532
43434: GO 43436
43436: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43437: LD_INT 16
43439: PPUSH
43440: LD_INT 6
43442: PPUSH
43443: LD_INT 5
43445: PPUSH
43446: LD_INT 8
43448: PPUSH
43449: CALL_OW 12
43453: PUSH
43454: LD_INT 6
43456: PPUSH
43457: LD_INT 9
43459: PPUSH
43460: CALL_OW 12
43464: PUSH
43465: LD_INT 7
43467: PPUSH
43468: LD_INT 9
43470: PPUSH
43471: CALL_OW 12
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: PUSH
43481: LD_OWVAR 67
43485: ARRAY
43486: PPUSH
43487: LD_EXP 25
43491: PPUSH
43492: LD_EXP 26
43496: PPUSH
43497: CALL_OW 12
43501: PPUSH
43502: LD_INT 3
43504: PPUSH
43505: LD_INT 1
43507: PPUSH
43508: LD_INT 3
43510: PPUSH
43511: LD_INT 44
43513: PUSH
43514: LD_INT 46
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PPUSH
43521: EMPTY
43522: PPUSH
43523: EMPTY
43524: PPUSH
43525: LD_INT 1
43527: PPUSH
43528: CALL 14644 0 11
43532: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43533: LD_EXP 18
43537: PUSH
43538: LD_INT 0
43540: EQUAL
43541: IFFALSE 43623
43543: GO 43545
43545: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43546: LD_INT 6
43548: PPUSH
43549: LD_INT 3
43551: PPUSH
43552: LD_INT 3
43554: PUSH
43555: LD_INT 4
43557: PUSH
43558: LD_INT 5
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: PUSH
43566: LD_OWVAR 67
43570: ARRAY
43571: PPUSH
43572: LD_INT 0
43574: PPUSH
43575: LD_INT 0
43577: PPUSH
43578: LD_INT 0
43580: PPUSH
43581: LD_INT 0
43583: PPUSH
43584: LD_EXP 25
43588: PPUSH
43589: LD_EXP 26
43593: PPUSH
43594: CALL_OW 12
43598: PPUSH
43599: LD_INT 16
43601: PPUSH
43602: LD_INT 7
43604: PPUSH
43605: LD_INT 1
43607: PPUSH
43608: LD_INT 1
43610: PPUSH
43611: LD_INT 3
43613: PPUSH
43614: CALL_OW 12
43618: PPUSH
43619: CALL 12351 0 12
43623: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43624: LD_EXP 18
43628: PUSH
43629: LD_INT 0
43631: EQUAL
43632: IFFALSE 43732
43634: GO 43636
43636: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43637: LD_INT 16
43639: PPUSH
43640: LD_INT 6
43642: PPUSH
43643: LD_INT 5
43645: PPUSH
43646: LD_INT 8
43648: PPUSH
43649: CALL_OW 12
43653: PUSH
43654: LD_INT 6
43656: PPUSH
43657: LD_INT 9
43659: PPUSH
43660: CALL_OW 12
43664: PUSH
43665: LD_INT 7
43667: PPUSH
43668: LD_INT 9
43670: PPUSH
43671: CALL_OW 12
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: PUSH
43681: LD_OWVAR 67
43685: ARRAY
43686: PPUSH
43687: LD_EXP 25
43691: PPUSH
43692: LD_EXP 26
43696: PPUSH
43697: CALL_OW 12
43701: PPUSH
43702: LD_INT 3
43704: PPUSH
43705: LD_INT 1
43707: PPUSH
43708: LD_INT 3
43710: PPUSH
43711: LD_INT 44
43713: PUSH
43714: LD_INT 46
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PPUSH
43721: EMPTY
43722: PPUSH
43723: EMPTY
43724: PPUSH
43725: LD_INT 1
43727: PPUSH
43728: CALL 14644 0 11
43732: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43733: LD_EXP 18
43737: PUSH
43738: LD_INT 0
43740: EQUAL
43741: IFFALSE 43823
43743: GO 43745
43745: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43746: LD_INT 6
43748: PPUSH
43749: LD_INT 3
43751: PPUSH
43752: LD_INT 3
43754: PUSH
43755: LD_INT 4
43757: PUSH
43758: LD_INT 5
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: PUSH
43766: LD_OWVAR 67
43770: ARRAY
43771: PPUSH
43772: LD_INT 0
43774: PPUSH
43775: LD_INT 0
43777: PPUSH
43778: LD_INT 0
43780: PPUSH
43781: LD_INT 0
43783: PPUSH
43784: LD_EXP 25
43788: PPUSH
43789: LD_EXP 26
43793: PPUSH
43794: CALL_OW 12
43798: PPUSH
43799: LD_INT 16
43801: PPUSH
43802: LD_INT 7
43804: PPUSH
43805: LD_INT 1
43807: PPUSH
43808: LD_INT 1
43810: PPUSH
43811: LD_INT 3
43813: PPUSH
43814: CALL_OW 12
43818: PPUSH
43819: CALL 12351 0 12
43823: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43824: LD_EXP 18
43828: PUSH
43829: LD_INT 0
43831: EQUAL
43832: IFFALSE 43932
43834: GO 43836
43836: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43837: LD_INT 16
43839: PPUSH
43840: LD_INT 6
43842: PPUSH
43843: LD_INT 5
43845: PPUSH
43846: LD_INT 8
43848: PPUSH
43849: CALL_OW 12
43853: PUSH
43854: LD_INT 6
43856: PPUSH
43857: LD_INT 9
43859: PPUSH
43860: CALL_OW 12
43864: PUSH
43865: LD_INT 7
43867: PPUSH
43868: LD_INT 9
43870: PPUSH
43871: CALL_OW 12
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: PUSH
43881: LD_OWVAR 67
43885: ARRAY
43886: PPUSH
43887: LD_EXP 25
43891: PPUSH
43892: LD_EXP 26
43896: PPUSH
43897: CALL_OW 12
43901: PPUSH
43902: LD_INT 3
43904: PPUSH
43905: LD_INT 1
43907: PPUSH
43908: LD_INT 3
43910: PPUSH
43911: LD_INT 44
43913: PUSH
43914: LD_INT 46
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PPUSH
43921: EMPTY
43922: PPUSH
43923: EMPTY
43924: PPUSH
43925: LD_INT 1
43927: PPUSH
43928: CALL 14644 0 11
43932: END
// every 0 0$1 trigger timerStatus = 1 do
43933: LD_EXP 35
43937: PUSH
43938: LD_INT 1
43940: EQUAL
43941: IFFALSE 44001
43943: GO 43945
43945: DISABLE
// begin repeat wait ( 0 0$1 ) ;
43946: LD_INT 35
43948: PPUSH
43949: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43953: LD_ADDR_OWVAR 47
43957: PUSH
43958: LD_STRING #Am08-1
43960: PUSH
43961: LD_EXP 19
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43970: LD_ADDR_EXP 19
43974: PUSH
43975: LD_EXP 19
43979: PUSH
43980: LD_INT 35
43982: MINUS
43983: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
43984: LD_EXP 19
43988: PUSH
43989: LD_INT 0
43991: EQUAL
43992: IFFALSE 43946
// display_strings := [ ] ;
43994: LD_ADDR_OWVAR 47
43998: PUSH
43999: EMPTY
44000: ST_TO_ADDR
// end ; end_of_file
44001: END
// every 1 1$0 do
44002: GO 44004
44004: DISABLE
// begin if supply <= 13 and supply > 7 then
44005: LD_EXP 40
44009: PUSH
44010: LD_INT 13
44012: LESSEQUAL
44013: PUSH
44014: LD_EXP 40
44018: PUSH
44019: LD_INT 7
44021: GREATER
44022: AND
44023: IFFALSE 44046
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44025: LD_INT 3
44027: PPUSH
44028: LD_INT 5
44030: PPUSH
44031: CALL_OW 12
44035: PPUSH
44036: LD_INT 5
44038: PPUSH
44039: LD_INT 1
44041: PPUSH
44042: CALL_OW 55
// if supply <= 7 and supply > 4 then
44046: LD_EXP 40
44050: PUSH
44051: LD_INT 7
44053: LESSEQUAL
44054: PUSH
44055: LD_EXP 40
44059: PUSH
44060: LD_INT 4
44062: GREATER
44063: AND
44064: IFFALSE 44087
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44066: LD_INT 3
44068: PPUSH
44069: LD_INT 5
44071: PPUSH
44072: CALL_OW 12
44076: PPUSH
44077: LD_INT 20
44079: PPUSH
44080: LD_INT 1
44082: PPUSH
44083: CALL_OW 55
// if supply <= 4 and supply > 0 then
44087: LD_EXP 40
44091: PUSH
44092: LD_INT 4
44094: LESSEQUAL
44095: PUSH
44096: LD_EXP 40
44100: PUSH
44101: LD_INT 0
44103: GREATER
44104: AND
44105: IFFALSE 44128
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44107: LD_INT 3
44109: PPUSH
44110: LD_INT 5
44112: PPUSH
44113: CALL_OW 12
44117: PPUSH
44118: LD_INT 21
44120: PPUSH
44121: LD_INT 1
44123: PPUSH
44124: CALL_OW 55
// if supply > 0 then
44128: LD_EXP 40
44132: PUSH
44133: LD_INT 0
44135: GREATER
44136: IFFALSE 44153
// begin supply = supply - 1 ;
44138: LD_ADDR_EXP 40
44142: PUSH
44143: LD_EXP 40
44147: PUSH
44148: LD_INT 1
44150: MINUS
44151: ST_TO_ADDR
// enable ;
44152: ENABLE
// end ; end ; end_of_file
44153: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44154: LD_EXP 39
44158: PUSH
44159: LD_INT 1
44161: EQUAL
44162: PUSH
44163: LD_EXP 1
44167: PPUSH
44168: CALL_OW 301
44172: AND
44173: IFFALSE 44185
44175: GO 44177
44177: DISABLE
// YouLost ( JMM ) ;
44178: LD_STRING JMM
44180: PPUSH
44181: CALL_OW 104
44185: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44186: LD_EXP 18
44190: PUSH
44191: LD_INT 1
44193: EQUAL
44194: PUSH
44195: LD_EXP 16
44199: PPUSH
44200: CALL_OW 301
44204: AND
44205: IFFALSE 44237
44207: GO 44209
44209: DISABLE
// begin DialogueOn ;
44210: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44214: LD_EXP 23
44218: PPUSH
44219: LD_STRING D8a-Pow-1
44221: PPUSH
44222: CALL_OW 94
// DialogueOff ;
44226: CALL_OW 7
// YouLost ( Dismissed ) ;
44230: LD_STRING Dismissed
44232: PPUSH
44233: CALL_OW 104
// end ;
44237: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44238: LD_INT 22
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 30
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 30
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PPUSH
44280: CALL_OW 69
44284: PUSH
44285: LD_INT 0
44287: EQUAL
44288: IFFALSE 44300
44290: GO 44292
44292: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44293: LD_STRING Destroyed
44295: PPUSH
44296: CALL_OW 104
44300: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44301: LD_EXP 24
44305: PPUSH
44306: CALL_OW 301
44310: PUSH
44311: LD_INT 22
44313: PUSH
44314: LD_INT 3
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 21
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PPUSH
44335: CALL_OW 69
44339: PUSH
44340: LD_INT 7
44342: PUSH
44343: LD_INT 6
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: PUSH
44354: LD_OWVAR 67
44358: ARRAY
44359: LESS
44360: AND
44361: PUSH
44362: LD_EXP 1
44366: PPUSH
44367: CALL_OW 305
44371: AND
44372: IFFALSE 44820
44374: GO 44376
44376: DISABLE
44377: LD_INT 0
44379: PPUSH
44380: PPUSH
// begin russianAI = 0 ;
44381: LD_ADDR_EXP 27
44385: PUSH
44386: LD_INT 0
44388: ST_TO_ADDR
// escapeAvalaible = 1 ;
44389: LD_ADDR_EXP 36
44393: PUSH
44394: LD_INT 1
44396: ST_TO_ADDR
// InGameOn ;
44397: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44401: LD_INT 3
44403: PPUSH
44404: LD_INT 1
44406: PPUSH
44407: LD_INT 1
44409: PPUSH
44410: LD_INT 0
44412: PPUSH
44413: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44417: LD_INT 6
44419: PPUSH
44420: LD_INT 1
44422: PPUSH
44423: LD_INT 1
44425: PPUSH
44426: LD_INT 0
44428: PPUSH
44429: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44433: LD_INT 3
44435: PPUSH
44436: LD_INT 1
44438: PPUSH
44439: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44443: LD_INT 97
44445: PPUSH
44446: LD_INT 91
44448: PPUSH
44449: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44453: LD_INT 22
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 21
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PPUSH
44477: CALL_OW 69
44481: PPUSH
44482: CALL_OW 121
// wait ( 0 0$01 ) ;
44486: LD_INT 35
44488: PPUSH
44489: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44493: LD_INT 22
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 21
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PPUSH
44517: CALL_OW 69
44521: PPUSH
44522: LD_INT 124
44524: PPUSH
44525: LD_INT 98
44527: PPUSH
44528: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44532: LD_INT 22
44534: PUSH
44535: LD_INT 6
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 21
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PPUSH
44556: CALL_OW 69
44560: PPUSH
44561: CALL_OW 121
// wait ( 0 0$01 ) ;
44565: LD_INT 35
44567: PPUSH
44568: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44572: LD_INT 22
44574: PUSH
44575: LD_INT 6
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 21
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PPUSH
44596: CALL_OW 69
44600: PPUSH
44601: LD_INT 124
44603: PPUSH
44604: LD_INT 98
44606: PPUSH
44607: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44611: LD_INT 22
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 21
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: LD_INT 54
44636: PUSH
44637: EMPTY
44638: LIST
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: PPUSH
44649: CALL_OW 69
44653: PPUSH
44654: LD_INT 124
44656: PPUSH
44657: LD_INT 98
44659: PPUSH
44660: CALL_OW 114
// wait ( 0 0$4 ) ;
44664: LD_INT 140
44666: PPUSH
44667: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44671: LD_INT 124
44673: PPUSH
44674: LD_INT 98
44676: PPUSH
44677: CALL_OW 84
// if SikorskyStatus = 1 then
44681: LD_EXP 21
44685: PUSH
44686: LD_INT 1
44688: EQUAL
44689: IFFALSE 44703
// begin Say ( Sikorski , D9-Sik-1 ) ;
44691: LD_EXP 16
44695: PPUSH
44696: LD_STRING D9-Sik-1
44698: PPUSH
44699: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44703: LD_EXP 21
44707: PUSH
44708: LD_INT 2
44710: EQUAL
44711: IFFALSE 44732
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44713: LD_EXP 23
44717: PPUSH
44718: LD_STRING D8b-Pow-1
44720: PPUSH
44721: CALL_OW 94
// YouLost ( Dismissed ) ;
44725: LD_STRING Dismissed
44727: PPUSH
44728: CALL_OW 104
// end ; p := 0 0$0 ;
44732: LD_ADDR_VAR 0 2
44736: PUSH
44737: LD_INT 0
44739: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44740: LD_INT 35
44742: PPUSH
44743: CALL_OW 67
// p := p + 0 0$1 ;
44747: LD_ADDR_VAR 0 2
44751: PUSH
44752: LD_VAR 0 2
44756: PUSH
44757: LD_INT 35
44759: PLUS
44760: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44761: LD_INT 23
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 21
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 24
44783: PUSH
44784: LD_INT 250
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: PPUSH
44796: CALL_OW 69
44800: PUSH
44801: LD_INT 0
44803: EQUAL
44804: PUSH
44805: LD_VAR 0 2
44809: PUSH
44810: LD_INT 245
44812: GREATEREQUAL
44813: OR
44814: IFFALSE 44740
// FinishMission ;
44816: CALL 44823 0 0
// end ;
44820: PPOPN 2
44822: END
// export function FinishMission ; var tmp ; begin
44823: LD_INT 0
44825: PPUSH
44826: PPUSH
// AddMedal ( med1 , 1 ) ;
44827: LD_STRING med1
44829: PPUSH
44830: LD_INT 1
44832: PPUSH
44833: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44837: LD_STRING med2
44839: PPUSH
44840: LD_INT 1
44842: PPUSH
44843: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44847: LD_STRING perfect
44849: PPUSH
44850: LD_INT 1
44852: PPUSH
44853: CALL_OW 101
// GiveMedals ( Main ) ;
44857: LD_STRING Main
44859: PPUSH
44860: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44864: LD_INT 22
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 23
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 21
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 25
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 25
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 25
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 25
44929: PUSH
44930: LD_INT 4
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: PPUSH
44950: CALL_OW 69
44954: PPUSH
44955: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44959: LD_EXP 1
44963: PPUSH
44964: LD_EXP 42
44968: PUSH
44969: LD_STRING JMM
44971: STR
44972: PPUSH
44973: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44977: LD_EXP 2
44981: PPUSH
44982: LD_EXP 42
44986: PUSH
44987: LD_STRING Brown
44989: STR
44990: PPUSH
44991: CALL 8187 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44995: LD_EXP 3
44999: PPUSH
45000: LD_EXP 42
45004: PUSH
45005: LD_STRING Donaldson
45007: STR
45008: PPUSH
45009: CALL 8187 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45013: LD_EXP 4
45017: PPUSH
45018: LD_EXP 42
45022: PUSH
45023: LD_STRING Bobby
45025: STR
45026: PPUSH
45027: CALL 8187 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45031: LD_EXP 5
45035: PPUSH
45036: LD_EXP 42
45040: PUSH
45041: LD_STRING Cyrus
45043: STR
45044: PPUSH
45045: CALL 8187 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45049: LD_EXP 6
45053: PPUSH
45054: LD_EXP 42
45058: PUSH
45059: LD_STRING Lisa
45061: STR
45062: PPUSH
45063: CALL 8187 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45067: LD_EXP 7
45071: PPUSH
45072: LD_EXP 42
45076: PUSH
45077: LD_STRING Frank
45079: STR
45080: PPUSH
45081: CALL 8187 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45085: LD_EXP 8
45089: PPUSH
45090: LD_EXP 42
45094: PUSH
45095: LD_STRING Gladstone
45097: STR
45098: PPUSH
45099: CALL 8187 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45103: LD_EXP 9
45107: PPUSH
45108: LD_EXP 42
45112: PUSH
45113: LD_STRING Kikuchi
45115: STR
45116: PPUSH
45117: CALL 8187 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45121: LD_EXP 14
45125: PPUSH
45126: LD_EXP 42
45130: PUSH
45131: LD_STRING Denis
45133: STR
45134: PPUSH
45135: CALL 8187 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45139: LD_EXP 15
45143: PPUSH
45144: LD_EXP 42
45148: PUSH
45149: LD_STRING Joan
45151: STR
45152: PPUSH
45153: CALL 8187 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45157: LD_EXP 10
45161: PPUSH
45162: LD_EXP 42
45166: PUSH
45167: LD_STRING Khatam
45169: STR
45170: PPUSH
45171: CALL 8187 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45175: LD_EXP 13
45179: PPUSH
45180: LD_EXP 42
45184: PUSH
45185: LD_STRING Houten
45187: STR
45188: PPUSH
45189: CALL 8187 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45193: LD_INT 50
45195: PUSH
45196: EMPTY
45197: LIST
45198: PUSH
45199: LD_INT 22
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 21
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 25
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 25
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 25
45244: PUSH
45245: LD_INT 3
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 25
45254: PUSH
45255: LD_INT 4
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: PPUSH
45275: CALL_OW 69
45279: PUSH
45280: LD_EXP 1
45284: PUSH
45285: LD_EXP 2
45289: PUSH
45290: LD_EXP 3
45294: PUSH
45295: LD_EXP 4
45299: PUSH
45300: LD_EXP 5
45304: PUSH
45305: LD_EXP 6
45309: PUSH
45310: LD_EXP 7
45314: PUSH
45315: LD_EXP 8
45319: PUSH
45320: LD_EXP 9
45324: PUSH
45325: LD_EXP 14
45329: PUSH
45330: LD_EXP 15
45334: PUSH
45335: LD_EXP 13
45339: PUSH
45340: LD_EXP 10
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: DIFF
45360: PPUSH
45361: LD_STRING 08_other_survivors
45363: PPUSH
45364: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45368: LD_INT 23
45370: PPUSH
45371: CALL 45384 0 1
// YouWin ;
45375: CALL_OW 103
// end ;
45379: LD_VAR 0 1
45383: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45384: LD_INT 0
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
// gammaBase = [ ] ;
45390: LD_ADDR_VAR 0 4
45394: PUSH
45395: EMPTY
45396: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45397: LD_ADDR_VAR 0 5
45401: PUSH
45402: LD_VAR 0 1
45406: PPUSH
45407: LD_INT 22
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 21
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 50
45429: PUSH
45430: EMPTY
45431: LIST
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: PPUSH
45438: CALL_OW 70
45442: ST_TO_ADDR
// for i in buildings do
45443: LD_ADDR_VAR 0 3
45447: PUSH
45448: LD_VAR 0 5
45452: PUSH
45453: FOR_IN
45454: IFFALSE 45891
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45456: LD_VAR 0 3
45460: PPUSH
45461: CALL_OW 266
45465: PUSH
45466: LD_INT 6
45468: PUSH
45469: LD_INT 7
45471: PUSH
45472: LD_INT 8
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: IN
45480: IFFALSE 45594
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45482: LD_ADDR_VAR 0 4
45486: PUSH
45487: LD_VAR 0 4
45491: PUSH
45492: LD_VAR 0 3
45496: PPUSH
45497: CALL_OW 266
45501: PUSH
45502: LD_VAR 0 3
45506: PPUSH
45507: CALL_OW 250
45511: PUSH
45512: LD_VAR 0 3
45516: PPUSH
45517: CALL_OW 251
45521: PUSH
45522: LD_VAR 0 3
45526: PPUSH
45527: CALL_OW 254
45531: PUSH
45532: LD_VAR 0 3
45536: PPUSH
45537: CALL_OW 267
45541: PUSH
45542: LD_VAR 0 3
45546: PPUSH
45547: CALL_OW 248
45551: PUSH
45552: LD_VAR 0 3
45556: PPUSH
45557: LD_INT 1
45559: PPUSH
45560: CALL_OW 268
45564: PUSH
45565: LD_VAR 0 3
45569: PPUSH
45570: LD_INT 2
45572: PPUSH
45573: CALL_OW 268
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: ADD
45591: ST_TO_ADDR
45592: GO 45889
// if GetBType ( i ) = b_bunker then
45594: LD_VAR 0 3
45598: PPUSH
45599: CALL_OW 266
45603: PUSH
45604: LD_INT 32
45606: EQUAL
45607: IFFALSE 45704
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45609: LD_ADDR_VAR 0 4
45613: PUSH
45614: LD_VAR 0 4
45618: PUSH
45619: LD_VAR 0 3
45623: PPUSH
45624: CALL_OW 266
45628: PUSH
45629: LD_VAR 0 3
45633: PPUSH
45634: CALL_OW 250
45638: PUSH
45639: LD_VAR 0 3
45643: PPUSH
45644: CALL_OW 251
45648: PUSH
45649: LD_VAR 0 3
45653: PPUSH
45654: CALL_OW 254
45658: PUSH
45659: LD_VAR 0 3
45663: PPUSH
45664: CALL_OW 267
45668: PUSH
45669: LD_VAR 0 3
45673: PPUSH
45674: CALL_OW 248
45678: PUSH
45679: LD_VAR 0 3
45683: PPUSH
45684: CALL_OW 269
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: ADD
45701: ST_TO_ADDR
45702: GO 45889
// if GetBType ( i ) = b_factory then
45704: LD_VAR 0 3
45708: PPUSH
45709: CALL_OW 266
45713: PUSH
45714: LD_INT 3
45716: EQUAL
45717: IFFALSE 45807
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45719: LD_ADDR_VAR 0 4
45723: PUSH
45724: LD_VAR 0 4
45728: PPUSH
45729: LD_INT 1
45731: PPUSH
45732: LD_VAR 0 3
45736: PPUSH
45737: CALL_OW 266
45741: PUSH
45742: LD_VAR 0 3
45746: PPUSH
45747: CALL_OW 250
45751: PUSH
45752: LD_VAR 0 3
45756: PPUSH
45757: CALL_OW 251
45761: PUSH
45762: LD_VAR 0 3
45766: PPUSH
45767: CALL_OW 254
45771: PUSH
45772: LD_VAR 0 3
45776: PPUSH
45777: CALL_OW 267
45781: PUSH
45782: LD_VAR 0 3
45786: PPUSH
45787: CALL_OW 248
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: PPUSH
45800: CALL_OW 2
45804: ST_TO_ADDR
45805: GO 45889
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45807: LD_ADDR_VAR 0 4
45811: PUSH
45812: LD_VAR 0 4
45816: PUSH
45817: LD_VAR 0 3
45821: PPUSH
45822: CALL_OW 266
45826: PUSH
45827: LD_VAR 0 3
45831: PPUSH
45832: CALL_OW 250
45836: PUSH
45837: LD_VAR 0 3
45841: PPUSH
45842: CALL_OW 251
45846: PUSH
45847: LD_VAR 0 3
45851: PPUSH
45852: CALL_OW 254
45856: PUSH
45857: LD_VAR 0 3
45861: PPUSH
45862: CALL_OW 267
45866: PUSH
45867: LD_VAR 0 3
45871: PPUSH
45872: CALL_OW 248
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: ADD
45888: ST_TO_ADDR
// end ;
45889: GO 45453
45891: POP
45892: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45893: LD_VAR 0 4
45897: PPUSH
45898: LD_STRING 08_GammaBase
45900: PPUSH
45901: CALL_OW 39
// end ;
45905: LD_VAR 0 2
45909: RET
