// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 41
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 42
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 38
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 37
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 11
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 30
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 40
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 34
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 39
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 43
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 6562 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 1732 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5367 0 0
// PrepareRussians ;
 229: CALL 5685 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 24
 291: PPUSH
 292: LD_EXP 25
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 7780 0 6
// PrepareCutsceneAttack ;
 312: CALL 5419 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 43
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side = 1 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 1
 542: ST_TO_ADDR
// uc_nation = 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// if gammaCommander = 1 then
 551: LD_EXP 11
 555: PUSH
 556: LD_INT 1
 558: EQUAL
 559: IFFALSE 592
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 561: LD_ADDR_EXP 3
 565: PUSH
 566: LD_STRING Donaldson
 568: PPUSH
 569: LD_INT 1
 571: PPUSH
 572: CALL 6103 0 2
 576: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 577: LD_EXP 3
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: LD_INT 0
 587: PPUSH
 588: CALL_OW 49
// end ; if gammaCommander = 2 then
 592: LD_EXP 11
 596: PUSH
 597: LD_INT 2
 599: EQUAL
 600: IFFALSE 633
// begin Brown = PrepareUnit ( Brown , true ) ;
 602: LD_ADDR_EXP 2
 606: PUSH
 607: LD_STRING Brown
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 6103 0 2
 617: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 5
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; if gammaCommander = 3 then
 633: LD_EXP 11
 637: PUSH
 638: LD_INT 3
 640: EQUAL
 641: IFFALSE 674
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 643: LD_ADDR_EXP 12
 647: PUSH
 648: LD_STRING VanHouten
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL 6103 0 2
 658: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 659: LD_EXP 12
 663: PPUSH
 664: LD_INT 5
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 674: LD_ADDR_EXP 21
 678: PUSH
 679: LD_STRING Harisson
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
 685: CALL 6103 0 2
 689: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 690: LD_ADDR_EXP 22
 694: PUSH
 695: LD_STRING Powell
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL 6103 0 2
 705: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 706: LD_ADDR_EXP 10
 710: PUSH
 711: LD_STRING 07_othersGamma
 713: PPUSH
 714: CALL_OW 31
 718: ST_TO_ADDR
// tmp := 8 - others_gamma ;
 719: LD_ADDR_VAR 0 14
 723: PUSH
 724: LD_INT 8
 726: PUSH
 727: LD_EXP 10
 731: MINUS
 732: ST_TO_ADDR
// if tmp then
 733: LD_VAR 0 14
 737: IFFALSE 790
// for i = 1 to tmp do
 739: LD_ADDR_VAR 0 2
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_VAR 0 14
 753: PUSH
 754: FOR_TO
 755: IFFALSE 788
// begin PrepareHuman ( false , 1 , 5 ) ;
 757: LD_INT 0
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
 770: LD_ADDR_EXP 10
 774: PUSH
 775: LD_EXP 10
 779: PUSH
 780: CALL_OW 44
 784: ADD
 785: ST_TO_ADDR
// end ;
 786: GO 754
 788: POP
 789: POP
// if HexInfo ( 61 , 29 ) = 0 then
 790: LD_INT 61
 792: PPUSH
 793: LD_INT 29
 795: PPUSH
 796: CALL_OW 428
 800: PUSH
 801: LD_INT 0
 803: EQUAL
 804: IFFALSE 835
// begin bc_type := b_barracks ;
 806: LD_ADDR_OWVAR 42
 810: PUSH
 811: LD_INT 5
 813: ST_TO_ADDR
// bc_level := 6 ;
 814: LD_ADDR_OWVAR 43
 818: PUSH
 819: LD_INT 6
 821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
 822: LD_INT 61
 824: PPUSH
 825: LD_INT 29
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
 835: LD_ADDR_VAR 0 13
 839: PUSH
 840: LD_INT 22
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: LD_INT 31
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 69
 868: ST_TO_ADDR
// for i in bun do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 13
 878: PUSH
 879: FOR_IN
 880: IFFALSE 1012
// begin x := GetX ( i ) ;
 882: LD_ADDR_VAR 0 3
 886: PUSH
 887: LD_VAR 0 2
 891: PPUSH
 892: CALL_OW 250
 896: ST_TO_ADDR
// y := GetY ( i ) ;
 897: LD_ADDR_VAR 0 4
 901: PUSH
 902: LD_VAR 0 2
 906: PPUSH
 907: CALL_OW 251
 911: ST_TO_ADDR
// d := GetDir ( i ) ;
 912: LD_ADDR_VAR 0 5
 916: PUSH
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 254
 926: ST_TO_ADDR
// RemoveUnit ( i ) ;
 927: LD_VAR 0 2
 931: PPUSH
 932: CALL_OW 64
// bc_type := b_bunker ;
 936: LD_ADDR_OWVAR 42
 940: PUSH
 941: LD_INT 32
 943: ST_TO_ADDR
// bc_level := 6 ;
 944: LD_ADDR_OWVAR 43
 948: PUSH
 949: LD_INT 6
 951: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
 952: LD_ADDR_VAR 0 6
 956: PUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: LD_VAR 0 4
 966: PPUSH
 967: LD_VAR 0 5
 971: PPUSH
 972: CALL_OW 47
 976: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
 977: LD_VAR 0 6
 981: PPUSH
 982: LD_INT 5
 984: PUSH
 985: LD_INT 4
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_VAR 0 2
 996: PUSH
 997: LD_INT 2
 999: MOD
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: PPUSH
1006: CALL_OW 431
// end ;
1010: GO 879
1012: POP
1013: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1014: LD_ADDR_VAR 0 9
1018: PUSH
1019: LD_INT 22
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 30
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PPUSH
1043: CALL_OW 69
1047: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1048: LD_ADDR_VAR 0 8
1052: PUSH
1053: LD_INT 22
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: LD_INT 30
1068: PUSH
1069: LD_INT 6
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 30
1078: PUSH
1079: LD_INT 7
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 8
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1111: LD_ADDR_VAR 0 7
1115: PUSH
1116: LD_INT 22
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: CALL_OW 69
1144: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1145: LD_ADDR_VAR 0 12
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1179: LD_ADDR_VAR 0 13
1183: PUSH
1184: LD_INT 22
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 2
1196: PUSH
1197: LD_INT 30
1199: PUSH
1200: LD_INT 31
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 32
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 69
1230: ST_TO_ADDR
// for i in others_gamma do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_EXP 10
1240: PUSH
1241: FOR_IN
1242: IFFALSE 1617
// begin placed := false ;
1244: LD_ADDR_VAR 0 11
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1252: LD_VAR 0 2
1256: PPUSH
1257: CALL_OW 257
1261: PUSH
1262: LD_INT 1
1264: EQUAL
1265: IFFALSE 1390
// begin if UnitFilter ( bun , [ f_empty ] ) then
1267: LD_VAR 0 13
1271: PPUSH
1272: LD_INT 58
1274: PUSH
1275: EMPTY
1276: LIST
1277: PPUSH
1278: CALL_OW 72
1282: IFFALSE 1321
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1284: LD_VAR 0 2
1288: PPUSH
1289: LD_VAR 0 13
1293: PPUSH
1294: LD_INT 58
1296: PUSH
1297: EMPTY
1298: LIST
1299: PPUSH
1300: CALL_OW 72
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PPUSH
1309: CALL_OW 52
// placed := true ;
1313: LD_ADDR_VAR 0 11
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// end ; if arm and not placed then
1321: LD_VAR 0 9
1325: PUSH
1326: LD_VAR 0 11
1330: NOT
1331: AND
1332: IFFALSE 1390
// begin for j in arm do
1334: LD_ADDR_VAR 0 10
1338: PUSH
1339: LD_VAR 0 9
1343: PUSH
1344: FOR_IN
1345: IFFALSE 1388
// if UnitsInside ( j ) < 6 then
1347: LD_VAR 0 10
1351: PPUSH
1352: CALL_OW 313
1356: PUSH
1357: LD_INT 6
1359: LESS
1360: IFFALSE 1386
// begin PlaceHumanInUnit ( i , j ) ;
1362: LD_VAR 0 2
1366: PPUSH
1367: LD_VAR 0 10
1371: PPUSH
1372: CALL_OW 52
// placed := true ;
1376: LD_ADDR_VAR 0 11
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// break ;
1384: GO 1388
// end ;
1386: GO 1344
1388: POP
1389: POP
// end ; end ; if GetClass ( i ) = 3 then
1390: LD_VAR 0 2
1394: PPUSH
1395: CALL_OW 257
1399: PUSH
1400: LD_INT 3
1402: EQUAL
1403: IFFALSE 1507
// if fac then
1405: LD_VAR 0 7
1409: IFFALSE 1507
// begin if ct then
1411: LD_VAR 0 12
1415: IFFALSE 1443
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1417: LD_VAR 0 2
1421: PPUSH
1422: LD_VAR 0 12
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PPUSH
1431: CALL_OW 52
// placed := true ;
1435: LD_ADDR_VAR 0 11
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ; if placed then
1443: LD_VAR 0 11
1447: IFFALSE 1451
// continue ;
1449: GO 1241
// for j in fac do
1451: LD_ADDR_VAR 0 10
1455: PUSH
1456: LD_VAR 0 7
1460: PUSH
1461: FOR_IN
1462: IFFALSE 1505
// if UnitsInside ( j ) < 6 then
1464: LD_VAR 0 10
1468: PPUSH
1469: CALL_OW 313
1473: PUSH
1474: LD_INT 6
1476: LESS
1477: IFFALSE 1503
// begin PlaceHumanInUnit ( i , j ) ;
1479: LD_VAR 0 2
1483: PPUSH
1484: LD_VAR 0 10
1488: PPUSH
1489: CALL_OW 52
// placed := true ;
1493: LD_ADDR_VAR 0 11
1497: PUSH
1498: LD_INT 1
1500: ST_TO_ADDR
// break ;
1501: GO 1505
// end ;
1503: GO 1461
1505: POP
1506: POP
// end ; if GetClass ( i ) = 4 then
1507: LD_VAR 0 2
1511: PPUSH
1512: CALL_OW 257
1516: PUSH
1517: LD_INT 4
1519: EQUAL
1520: IFFALSE 1584
// if lab then
1522: LD_VAR 0 8
1526: IFFALSE 1584
// begin for j in lab do
1528: LD_ADDR_VAR 0 10
1532: PUSH
1533: LD_VAR 0 8
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1582
// if UnitsInside ( j ) < 6 then
1541: LD_VAR 0 10
1545: PPUSH
1546: CALL_OW 313
1550: PUSH
1551: LD_INT 6
1553: LESS
1554: IFFALSE 1580
// begin PlaceHumanInUnit ( i , j ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_VAR 0 10
1565: PPUSH
1566: CALL_OW 52
// placed := true ;
1570: LD_ADDR_VAR 0 11
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// break ;
1578: GO 1582
// end ;
1580: GO 1538
1582: POP
1583: POP
// end ; if not placed then
1584: LD_VAR 0 11
1588: NOT
1589: IFFALSE 1615
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1591: LD_VAR 0 2
1595: PPUSH
1596: LD_INT 5
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: CALL_OW 49
// ComHold ( i ) ;
1606: LD_VAR 0 2
1610: PPUSH
1611: CALL_OW 140
// end ; end ;
1615: GO 1241
1617: POP
1618: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1619: LD_VAR 0 12
1623: PUSH
1624: LD_VAR 0 12
1628: PUSH
1629: LD_INT 1
1631: ARRAY
1632: PPUSH
1633: CALL_OW 313
1637: AND
1638: IFFALSE 1727
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1640: LD_ADDR_VAR 0 2
1644: PUSH
1645: LD_INT 22
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 33
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PPUSH
1669: CALL_OW 69
1673: PUSH
1674: FOR_IN
1675: IFFALSE 1725
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1677: LD_VAR 0 2
1681: PPUSH
1682: LD_VAR 0 12
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: PPUSH
1691: CALL_OW 313
1695: PUSH
1696: LD_INT 1
1698: PPUSH
1699: LD_VAR 0 12
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: CALL_OW 313
1712: PPUSH
1713: CALL_OW 12
1717: ARRAY
1718: PPUSH
1719: CALL_OW 135
1723: GO 1674
1725: POP
1726: POP
// end ; end ;
1727: LD_VAR 0 1
1731: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
1732: LD_INT 0
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1740: LD_INT 71
1742: PPUSH
1743: LD_INT 5
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1753: LD_ADDR_VAR 0 2
1757: PUSH
1758: LD_STRING GammaBase
1760: PPUSH
1761: EMPTY
1762: PPUSH
1763: CALL_OW 30
1767: ST_TO_ADDR
// uc_side := 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation := 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// for i in blist do
1784: LD_ADDR_VAR 0 3
1788: PUSH
1789: LD_VAR 0 2
1793: PUSH
1794: FOR_IN
1795: IFFALSE 2203
// begin bc_type := i [ 1 ] ;
1797: LD_ADDR_OWVAR 42
1801: PUSH
1802: LD_VAR 0 3
1806: PUSH
1807: LD_INT 1
1809: ARRAY
1810: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1811: LD_ADDR_OWVAR 43
1815: PUSH
1816: LD_VAR 0 3
1820: PUSH
1821: LD_INT 5
1823: ARRAY
1824: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1825: LD_VAR 0 3
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PUSH
1834: LD_INT 7
1836: PUSH
1837: LD_INT 8
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: IN
1844: IFFALSE 1900
// begin bc_kind1 := i [ 7 ] ;
1846: LD_ADDR_OWVAR 44
1850: PUSH
1851: LD_VAR 0 3
1855: PUSH
1856: LD_INT 7
1858: ARRAY
1859: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1860: LD_STRING 06_remoteVehs_1
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 30
1870: PUSH
1871: LD_INT 1
1873: EQUAL
1874: IFFALSE 1886
// begin bc_kind2 := 15 ;
1876: LD_ADDR_OWVAR 45
1880: PUSH
1881: LD_INT 15
1883: ST_TO_ADDR
// end else
1884: GO 1900
// begin bc_kind2 := i [ 8 ] ;
1886: LD_ADDR_OWVAR 45
1890: PUSH
1891: LD_VAR 0 3
1895: PUSH
1896: LD_INT 8
1898: ARRAY
1899: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1900: LD_OWVAR 42
1904: PUSH
1905: LD_INT 0
1907: EQUAL
1908: IFFALSE 2026
// begin bc_type := b_warehouse ;
1910: LD_ADDR_OWVAR 42
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1918: LD_ADDR_EXP 36
1922: PUSH
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 2
1930: ARRAY
1931: PPUSH
1932: LD_VAR 0 3
1936: PUSH
1937: LD_INT 3
1939: ARRAY
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 4
1948: ARRAY
1949: PPUSH
1950: CALL_OW 47
1954: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1955: LD_EXP 36
1959: PPUSH
1960: LD_STRING gamma
1962: PPUSH
1963: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
1967: LD_EXP 36
1971: PPUSH
1972: CALL_OW 274
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: LD_INT 400
1982: PUSH
1983: LD_INT 350
1985: PUSH
1986: LD_INT 250
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: PPUSH
2000: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2004: LD_EXP 36
2008: PPUSH
2009: CALL_OW 274
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: LD_INT 200
2019: PPUSH
2020: CALL_OW 277
// end else
2024: GO 2168
// begin if bc_type = 4 then
2026: LD_OWVAR 42
2030: PUSH
2031: LD_INT 4
2033: EQUAL
2034: IFFALSE 2083
// begin bc_type = 5 ;
2036: LD_ADDR_OWVAR 42
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2044: LD_ADDR_VAR 0 4
2048: PUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 2
2056: ARRAY
2057: PPUSH
2058: LD_VAR 0 3
2062: PUSH
2063: LD_INT 3
2065: ARRAY
2066: PPUSH
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 4
2074: ARRAY
2075: PPUSH
2076: CALL_OW 47
2080: ST_TO_ADDR
// end else
2081: GO 2168
// begin bc_type := i [ 1 ] ;
2083: LD_ADDR_OWVAR 42
2087: PUSH
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2097: LD_STRING 06_remoteVehs_1
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: CALL_OW 30
2107: PUSH
2108: LD_INT 1
2110: EQUAL
2111: PUSH
2112: LD_OWVAR 42
2116: PUSH
2117: LD_INT 7
2119: EQUAL
2120: AND
2121: IFFALSE 2131
// bc_type := b_lab_full ;
2123: LD_ADDR_OWVAR 42
2127: PUSH
2128: LD_INT 8
2130: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PPUSH
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 3
2152: ARRAY
2153: PPUSH
2154: LD_VAR 0 3
2158: PUSH
2159: LD_INT 4
2161: ARRAY
2162: PPUSH
2163: CALL_OW 47
2167: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2168: LD_VAR 0 4
2172: PPUSH
2173: CALL_OW 266
2177: PUSH
2178: LD_INT 32
2180: EQUAL
2181: IFFALSE 2201
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 7
2195: ARRAY
2196: PPUSH
2197: CALL_OW 431
// end ;
2201: GO 1794
2203: POP
2204: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2205: LD_INT 22
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 30
2217: PUSH
2218: LD_INT 3
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 69
2233: IFFALSE 2481
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2235: LD_ADDR_VAR 0 4
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 30
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2273: LD_ADDR_VAR 0 6
2277: PUSH
2278: LD_VAR 0 4
2282: PPUSH
2283: CALL_OW 250
2287: PPUSH
2288: LD_VAR 0 4
2292: PPUSH
2293: CALL_OW 251
2297: PPUSH
2298: LD_VAR 0 4
2302: PPUSH
2303: CALL_OW 254
2307: PPUSH
2308: CALL 15055 0 3
2312: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2313: LD_ADDR_VAR 0 2
2317: PUSH
2318: LD_INT 19
2320: PUSH
2321: LD_INT 17
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2328: LD_STRING 06_remoteVehs_1
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: CALL_OW 30
2338: IFFALSE 2361
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2340: LD_ADDR_VAR 0 2
2344: PUSH
2345: LD_VAR 0 2
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 20
2355: PPUSH
2356: CALL_OW 2
2360: ST_TO_ADDR
// for i in tmp do
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: PUSH
2371: FOR_IN
2372: IFFALSE 2479
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_VAR 0 3
2387: PUSH
2388: LD_INT 2
2390: ARRAY
2391: PPUSH
2392: CALL_OW 428
2396: PUSH
2397: LD_INT 0
2399: EQUAL
2400: IFFALSE 2477
// begin bc_type := blist [ 1 ] ;
2402: LD_ADDR_OWVAR 42
2406: PUSH
2407: LD_VAR 0 2
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: PPUSH
2425: LD_VAR 0 3
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PPUSH
2434: LD_VAR 0 3
2438: PUSH
2439: LD_INT 3
2441: ARRAY
2442: PPUSH
2443: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 3
2464: ST_TO_ADDR
// if blist = 0 then
2465: LD_VAR 0 2
2469: PUSH
2470: LD_INT 0
2472: EQUAL
2473: IFFALSE 2477
// break ;
2475: GO 2479
// end ;
2477: GO 2371
2479: POP
2480: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2481: LD_STRING 06_remoteVehs_1
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL_OW 30
2491: PUSH
2492: LD_INT 1
2494: EQUAL
2495: IFFALSE 2699
// begin bc_type = 36 ;
2497: LD_ADDR_OWVAR 42
2501: PUSH
2502: LD_INT 36
2504: ST_TO_ADDR
// bc_level = 4 ;
2505: LD_ADDR_OWVAR 43
2509: PUSH
2510: LD_INT 4
2512: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2513: LD_INT 62
2515: PPUSH
2516: LD_INT 12
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: DOUBLE
2532: LD_INT 1
2534: DEC
2535: ST_TO_ADDR
2536: LD_INT 3
2538: PUSH
2539: LD_INT 2
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_OWVAR 67
2554: ARRAY
2555: PUSH
2556: FOR_TO
2557: IFFALSE 2697
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2559: LD_ADDR_OWVAR 37
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 2
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 1
2579: PPUSH
2580: LD_INT 2
2582: PPUSH
2583: CALL_OW 12
2587: ARRAY
2588: PUSH
2589: LD_INT 2
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_OWVAR 67
2601: ARRAY
2602: ST_TO_ADDR
// vc_engine = 1 ;
2603: LD_ADDR_OWVAR 39
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// vc_control = 2 ;
2611: LD_ADDR_OWVAR 38
2615: PUSH
2616: LD_INT 2
2618: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2619: LD_ADDR_OWVAR 40
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: LD_INT 4
2629: PUSH
2630: LD_INT 5
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 3
2643: PPUSH
2644: CALL_OW 12
2648: ARRAY
2649: ST_TO_ADDR
// veh = CreateVehicle ;
2650: LD_ADDR_VAR 0 5
2654: PUSH
2655: CALL_OW 45
2659: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2660: LD_VAR 0 5
2664: PPUSH
2665: LD_EXP 36
2669: PPUSH
2670: CALL_OW 250
2674: PPUSH
2675: LD_EXP 36
2679: PPUSH
2680: CALL_OW 251
2684: PPUSH
2685: LD_INT 7
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: CALL_OW 50
// end ;
2695: GO 2556
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// uc_side = 1 ;
2710: LD_ADDR_OWVAR 20
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// uc_nation = 1 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2726: LD_ADDR_EXP 13
2730: PUSH
2731: LD_STRING 06c_Denis
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL 6103 0 2
2741: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2742: LD_EXP 13
2746: PPUSH
2747: LD_INT 4
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2757: LD_ADDR_EXP 14
2761: PUSH
2762: LD_STRING 06c_Joan
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL 6103 0 2
2772: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2773: LD_EXP 14
2777: PPUSH
2778: LD_INT 4
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
2788: LD_STRING GladstoneIn07
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 30
2798: NOT
2799: IFFALSE 2867
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2801: LD_ADDR_EXP 8
2805: PUSH
2806: LD_STRING 06c_Gladstone
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL 6103 0 2
2816: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2817: LD_EXP 8
2821: NOT
2822: PUSH
2823: LD_STRING GladstoneStayInDelta
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: CALL_OW 30
2833: AND
2834: IFFALSE 2852
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2836: LD_ADDR_EXP 8
2840: PUSH
2841: LD_STRING 05_Gladstone
2843: PPUSH
2844: LD_INT 1
2846: PPUSH
2847: CALL 6103 0 2
2851: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2852: LD_EXP 8
2856: PPUSH
2857: LD_INT 4
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2867: LD_STRING LisaStayInDelta
2869: PPUSH
2870: LD_INT 0
2872: PPUSH
2873: CALL_OW 30
2877: IFFALSE 2910
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2879: LD_ADDR_EXP 6
2883: PUSH
2884: LD_STRING 05_Lisa
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: CALL 6103 0 2
2894: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2895: LD_EXP 6
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2910: LD_STRING BobbyStayInDelta
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 30
2920: IFFALSE 2953
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2922: LD_ADDR_EXP 4
2926: PUSH
2927: LD_STRING 05_Bobby
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL 6103 0 2
2937: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2938: LD_EXP 4
2942: PPUSH
2943: LD_INT 4
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2953: LD_STRING CyrusStayInDelta
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: CALL_OW 30
2963: IFFALSE 2996
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2965: LD_ADDR_EXP 5
2969: PUSH
2970: LD_STRING 05_Cyrus
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL 6103 0 2
2980: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2981: LD_EXP 5
2985: PPUSH
2986: LD_INT 4
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2996: LD_STRING BrownStayInDelta
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 30
3006: IFFALSE 3039
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3008: LD_ADDR_EXP 2
3012: PUSH
3013: LD_STRING 05_Brown
3015: PPUSH
3016: LD_INT 1
3018: PPUSH
3019: CALL 6103 0 2
3023: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3024: LD_EXP 2
3028: PPUSH
3029: LD_INT 4
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3039: LD_STRING DonaldsonStayInDelta
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: CALL_OW 30
3049: IFFALSE 3082
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3051: LD_ADDR_EXP 3
3055: PUSH
3056: LD_STRING 05_Donaldson
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL 6103 0 2
3066: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3067: LD_EXP 3
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: LD_STRING OtherStayInDelta
3089: PPUSH
3090: CALL_OW 31
3094: ST_TO_ADDR
// if other then
3095: LD_VAR 0 4
3099: IFFALSE 3144
// for j = 1 to other do
3101: LD_ADDR_VAR 0 3
3105: PUSH
3106: DOUBLE
3107: LD_INT 1
3109: DEC
3110: ST_TO_ADDR
3111: LD_VAR 0 4
3115: PUSH
3116: FOR_TO
3117: IFFALSE 3142
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3119: LD_VAR 0 4
3123: PUSH
3124: LD_VAR 0 3
3128: ARRAY
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 49
3140: GO 3116
3142: POP
3143: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3144: LD_ADDR_VAR 0 4
3148: PUSH
3149: LD_STRING 06_other_apemans
3151: PPUSH
3152: CALL_OW 31
3156: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3157: LD_VAR 0 4
3161: PUSH
3162: LD_INT 5
3164: PUSH
3165: LD_INT 4
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PUSH
3176: LD_OWVAR 67
3180: ARRAY
3181: GREATEREQUAL
3182: IFFALSE 3211
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3184: LD_ADDR_VAR 0 3
3188: PUSH
3189: LD_INT 5
3191: PUSH
3192: LD_INT 4
3194: PUSH
3195: LD_INT 3
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_OWVAR 67
3207: ARRAY
3208: ST_TO_ADDR
3209: GO 3221
// j := other ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: LD_VAR 0 4
3220: ST_TO_ADDR
// for i = 1 to j do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_VAR 0 3
3235: PUSH
3236: FOR_TO
3237: IFFALSE 3262
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3239: LD_VAR 0 4
3243: PUSH
3244: LD_VAR 0 2
3248: ARRAY
3249: PPUSH
3250: LD_INT 4
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
3260: GO 3236
3262: POP
3263: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3264: LD_INT 4
3266: PPUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 21
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 70
3295: PPUSH
3296: LD_INT 53
3298: PPUSH
3299: LD_INT 19
3301: PPUSH
3302: CALL_OW 111
// firstAttack = 1 ;
3306: LD_ADDR_EXP 32
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// end ;
3314: LD_VAR 0 1
3318: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3319: LD_INT 0
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3326: LD_ADDR_VAR 0 4
3330: PUSH
3331: LD_STRING 07_vehicles
3333: PPUSH
3334: EMPTY
3335: PPUSH
3336: CALL_OW 30
3340: ST_TO_ADDR
// uc_side = 1 ;
3341: LD_ADDR_OWVAR 20
3345: PUSH
3346: LD_INT 1
3348: ST_TO_ADDR
// uc_nation = 1 ;
3349: LD_ADDR_OWVAR 21
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// if vehicles > 0 then
3357: LD_VAR 0 4
3361: PUSH
3362: LD_INT 0
3364: GREATER
3365: IFFALSE 3504
// begin for i = 1 to vehicles do
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: LD_VAR 0 4
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3502
// begin vc_chassis = vehicles [ i ] ;
3385: LD_ADDR_OWVAR 37
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3401: LD_ADDR_OWVAR 39
3405: PUSH
3406: LD_VAR 0 4
3410: PUSH
3411: LD_VAR 0 2
3415: PUSH
3416: LD_INT 1
3418: PLUS
3419: ARRAY
3420: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3421: LD_ADDR_OWVAR 38
3425: PUSH
3426: LD_VAR 0 4
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: LD_INT 2
3438: PLUS
3439: ARRAY
3440: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3441: LD_ADDR_OWVAR 40
3445: PUSH
3446: LD_VAR 0 4
3450: PUSH
3451: LD_VAR 0 2
3455: PUSH
3456: LD_INT 3
3458: PLUS
3459: ARRAY
3460: ST_TO_ADDR
// veh = CreateVehicle ;
3461: LD_ADDR_VAR 0 5
3465: PUSH
3466: CALL_OW 45
3470: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3471: LD_VAR 0 5
3475: PPUSH
3476: LD_INT 4
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 49
// i = i + 3 ;
3486: LD_ADDR_VAR 0 2
3490: PUSH
3491: LD_VAR 0 2
3495: PUSH
3496: LD_INT 3
3498: PLUS
3499: ST_TO_ADDR
// end ;
3500: GO 3382
3502: POP
3503: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3504: LD_ADDR_EXP 1
3508: PUSH
3509: LD_EXP 42
3513: PUSH
3514: LD_STRING JMM
3516: STR
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: CALL 6103 0 2
3525: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3526: LD_EXP 11
3530: PUSH
3531: LD_INT 1
3533: EQUAL
3534: PUSH
3535: LD_EXP 11
3539: PUSH
3540: LD_INT 3
3542: EQUAL
3543: OR
3544: IFFALSE 3568
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3546: LD_ADDR_EXP 2
3550: PUSH
3551: LD_EXP 42
3555: PUSH
3556: LD_STRING Brown
3558: STR
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: CALL 6103 0 2
3567: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3568: LD_EXP 11
3572: PUSH
3573: LD_INT 2
3575: EQUAL
3576: PUSH
3577: LD_EXP 11
3581: PUSH
3582: LD_INT 3
3584: EQUAL
3585: OR
3586: IFFALSE 3610
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3588: LD_ADDR_EXP 3
3592: PUSH
3593: LD_EXP 42
3597: PUSH
3598: LD_STRING Donaldson
3600: STR
3601: PPUSH
3602: LD_INT 1
3604: PPUSH
3605: CALL 6103 0 2
3609: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3610: LD_ADDR_EXP 4
3614: PUSH
3615: LD_EXP 42
3619: PUSH
3620: LD_STRING Bobby
3622: STR
3623: PPUSH
3624: LD_INT 1
3626: PPUSH
3627: CALL 6103 0 2
3631: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3632: LD_ADDR_EXP 5
3636: PUSH
3637: LD_EXP 42
3641: PUSH
3642: LD_STRING Cyrus
3644: STR
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
3649: CALL 6103 0 2
3653: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3654: LD_ADDR_EXP 6
3658: PUSH
3659: LD_EXP 42
3663: PUSH
3664: LD_STRING Lisa
3666: STR
3667: PPUSH
3668: LD_INT 1
3670: PPUSH
3671: CALL 6103 0 2
3675: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3676: LD_ADDR_EXP 7
3680: PUSH
3681: LD_EXP 42
3685: PUSH
3686: LD_STRING Frank
3688: STR
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: CALL 6103 0 2
3697: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3698: LD_ADDR_EXP 8
3702: PUSH
3703: LD_EXP 42
3707: PUSH
3708: LD_STRING Gladstone
3710: STR
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
3715: CALL 6103 0 2
3719: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3720: LD_ADDR_EXP 9
3724: PUSH
3725: LD_EXP 42
3729: PUSH
3730: LD_STRING Kikuchi
3732: STR
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: CALL 6103 0 2
3741: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3742: LD_EXP 11
3746: PUSH
3747: LD_INT 1
3749: EQUAL
3750: PUSH
3751: LD_EXP 11
3755: PUSH
3756: LD_INT 3
3758: EQUAL
3759: OR
3760: IFFALSE 3777
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3762: LD_EXP 2
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3777: LD_EXP 11
3781: PUSH
3782: LD_INT 2
3784: EQUAL
3785: PUSH
3786: LD_EXP 11
3790: PUSH
3791: LD_INT 3
3793: EQUAL
3794: OR
3795: IFFALSE 3812
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3797: LD_EXP 3
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 0
3807: PPUSH
3808: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3812: LD_ADDR_VAR 0 5
3816: PUSH
3817: LD_INT 4
3819: PPUSH
3820: LD_INT 22
3822: PUSH
3823: LD_INT 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 21
3832: PUSH
3833: LD_INT 2
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 58
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 70
3855: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3856: LD_ADDR_EXP 1
3860: PUSH
3861: LD_EXP 42
3865: PUSH
3866: LD_STRING JMM
3868: STR
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
3873: CALL 6103 0 2
3877: ST_TO_ADDR
// if veh > 0 then
3878: LD_VAR 0 5
3882: PUSH
3883: LD_INT 0
3885: GREATER
3886: IFFALSE 3908
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_VAR 0 5
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: PPUSH
3902: CALL_OW 52
// end else
3906: GO 3923
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3908: LD_EXP 1
3912: PPUSH
3913: LD_INT 4
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3923: LD_ADDR_VAR 0 5
3927: PUSH
3928: LD_INT 4
3930: PPUSH
3931: LD_INT 22
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 21
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 58
3953: PUSH
3954: EMPTY
3955: LIST
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PPUSH
3962: CALL_OW 70
3966: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: LD_EXP 42
3976: PUSH
3977: LD_STRING Bobby
3979: STR
3980: PPUSH
3981: LD_INT 1
3983: PPUSH
3984: CALL 6103 0 2
3988: ST_TO_ADDR
// if veh > 0 then
3989: LD_VAR 0 5
3993: PUSH
3994: LD_INT 0
3996: GREATER
3997: IFFALSE 4019
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3999: LD_EXP 4
4003: PPUSH
4004: LD_VAR 0 5
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: CALL_OW 52
// end else
4017: GO 4034
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4019: LD_EXP 4
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: LD_INT 4
4041: PPUSH
4042: LD_INT 22
4044: PUSH
4045: LD_INT 1
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 58
4064: PUSH
4065: EMPTY
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 70
4077: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4078: LD_ADDR_EXP 5
4082: PUSH
4083: LD_EXP 42
4087: PUSH
4088: LD_STRING Cyrus
4090: STR
4091: PPUSH
4092: LD_INT 1
4094: PPUSH
4095: CALL 6103 0 2
4099: ST_TO_ADDR
// if veh > 0 then
4100: LD_VAR 0 5
4104: PUSH
4105: LD_INT 0
4107: GREATER
4108: IFFALSE 4130
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4110: LD_EXP 5
4114: PPUSH
4115: LD_VAR 0 5
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PPUSH
4124: CALL_OW 52
// end else
4128: GO 4145
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4130: LD_EXP 5
4134: PPUSH
4135: LD_INT 4
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: LD_INT 4
4152: PPUSH
4153: LD_INT 22
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 2
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 58
4175: PUSH
4176: EMPTY
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 70
4188: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4189: LD_ADDR_EXP 6
4193: PUSH
4194: LD_EXP 42
4198: PUSH
4199: LD_STRING Lisa
4201: STR
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL 6103 0 2
4210: ST_TO_ADDR
// if veh > 0 then
4211: LD_VAR 0 5
4215: PUSH
4216: LD_INT 0
4218: GREATER
4219: IFFALSE 4241
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4221: LD_EXP 6
4225: PPUSH
4226: LD_VAR 0 5
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: CALL_OW 52
// end else
4239: GO 4256
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4241: LD_EXP 6
4245: PPUSH
4246: LD_INT 4
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4256: LD_ADDR_VAR 0 5
4260: PUSH
4261: LD_INT 4
4263: PPUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 21
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 58
4286: PUSH
4287: EMPTY
4288: LIST
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 70
4299: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4300: LD_ADDR_EXP 7
4304: PUSH
4305: LD_EXP 42
4309: PUSH
4310: LD_STRING Frank
4312: STR
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL 6103 0 2
4321: ST_TO_ADDR
// if veh > 0 then
4322: LD_VAR 0 5
4326: PUSH
4327: LD_INT 0
4329: GREATER
4330: IFFALSE 4352
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4332: LD_EXP 7
4336: PPUSH
4337: LD_VAR 0 5
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: CALL_OW 52
// end else
4350: GO 4367
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4352: LD_EXP 7
4356: PPUSH
4357: LD_INT 4
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4367: LD_ADDR_VAR 0 5
4371: PUSH
4372: LD_INT 4
4374: PPUSH
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 21
4387: PUSH
4388: LD_INT 2
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 58
4397: PUSH
4398: EMPTY
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 70
4410: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4411: LD_ADDR_EXP 8
4415: PUSH
4416: LD_EXP 42
4420: PUSH
4421: LD_STRING Gladstone
4423: STR
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6103 0 2
4432: ST_TO_ADDR
// if veh > 0 then
4433: LD_VAR 0 5
4437: PUSH
4438: LD_INT 0
4440: GREATER
4441: IFFALSE 4463
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4443: LD_EXP 8
4447: PPUSH
4448: LD_VAR 0 5
4452: PUSH
4453: LD_INT 1
4455: ARRAY
4456: PPUSH
4457: CALL_OW 52
// end else
4461: GO 4478
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4463: LD_EXP 8
4467: PPUSH
4468: LD_INT 4
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4478: LD_ADDR_VAR 0 5
4482: PUSH
4483: LD_INT 4
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 58
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 70
4521: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4522: LD_ADDR_EXP 9
4526: PUSH
4527: LD_EXP 42
4531: PUSH
4532: LD_STRING Kikuchi
4534: STR
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: CALL 6103 0 2
4543: ST_TO_ADDR
// if veh > 0 then
4544: LD_VAR 0 5
4548: PUSH
4549: LD_INT 0
4551: GREATER
4552: IFFALSE 4574
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4554: LD_EXP 9
4558: PPUSH
4559: LD_VAR 0 5
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: PPUSH
4568: CALL_OW 52
// end else
4572: GO 4589
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4574: LD_EXP 9
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: LD_STRING 07c_others
4596: PPUSH
4597: CALL_OW 31
4601: ST_TO_ADDR
// for i in other do
4602: LD_ADDR_VAR 0 2
4606: PUSH
4607: LD_VAR 0 3
4611: PUSH
4612: FOR_IN
4613: IFFALSE 4706
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4615: LD_ADDR_VAR 0 5
4619: PUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 22
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 21
4635: PUSH
4636: LD_INT 2
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 58
4645: PUSH
4646: EMPTY
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PPUSH
4654: CALL_OW 70
4658: ST_TO_ADDR
// if veh > 0 then
4659: LD_VAR 0 5
4663: PUSH
4664: LD_INT 0
4666: GREATER
4667: IFFALSE 4689
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4669: LD_VAR 0 2
4673: PPUSH
4674: LD_VAR 0 5
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 52
// end else
4687: GO 4704
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4689: LD_VAR 0 2
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: LD_INT 0
4699: PPUSH
4700: CALL_OW 49
// end ; end ;
4704: GO 4612
4706: POP
4707: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: PPUSH
4724: CALL_OW 70
4728: PPUSH
4729: LD_INT 53
4731: PPUSH
4732: LD_INT 19
4734: PPUSH
4735: CALL_OW 111
// end ;
4739: LD_VAR 0 1
4743: RET
// export function PrepareSikorsky ; begin
4744: LD_INT 0
4746: PPUSH
// uc_side = 4 ;
4747: LD_ADDR_OWVAR 20
4751: PUSH
4752: LD_INT 4
4754: ST_TO_ADDR
// uc_nation = 1 ;
4755: LD_ADDR_OWVAR 21
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4763: LD_ADDR_EXP 15
4767: PUSH
4768: LD_STRING Sikorski
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL 6103 0 2
4778: ST_TO_ADDR
// vc_engine = 1 ;
4779: LD_ADDR_OWVAR 39
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// vc_control = 1 ;
4787: LD_ADDR_OWVAR 38
4791: PUSH
4792: LD_INT 1
4794: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4795: LD_ADDR_OWVAR 40
4799: PUSH
4800: LD_INT 5
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: LD_INT 4
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_OWVAR 67
4818: ARRAY
4819: ST_TO_ADDR
// vc_chassis = 4 ;
4820: LD_ADDR_OWVAR 37
4824: PUSH
4825: LD_INT 4
4827: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4828: LD_ADDR_EXP 16
4832: PUSH
4833: CALL_OW 45
4837: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4838: LD_EXP 16
4842: PPUSH
4843: LD_INT 9
4845: PPUSH
4846: LD_INT 0
4848: PPUSH
4849: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4853: LD_EXP 15
4857: PPUSH
4858: LD_EXP 16
4862: PPUSH
4863: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4867: LD_EXP 16
4871: PPUSH
4872: LD_INT 5
4874: PPUSH
4875: CALL_OW 113
// end ;
4879: LD_VAR 0 1
4883: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4884: LD_INT 0
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4890: LD_ADDR_VAR 0 2
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_INT 8
4902: PUSH
4903: LD_INT 7
4905: PUSH
4906: LD_INT 7
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: LD_OWVAR 67
4918: ARRAY
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5018
// begin uc_side = 4 ;
4923: LD_ADDR_OWVAR 20
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// uc_nation = 1 ;
4931: LD_ADDR_OWVAR 21
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// hc_name =  ;
4939: LD_ADDR_OWVAR 26
4943: PUSH
4944: LD_STRING 
4946: ST_TO_ADDR
// hc_gallery =  ;
4947: LD_ADDR_OWVAR 33
4951: PUSH
4952: LD_STRING 
4954: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4955: LD_INT 0
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 5
4963: PPUSH
4964: LD_INT 8
4966: PPUSH
4967: CALL_OW 12
4971: PPUSH
4972: CALL_OW 380
// un = CreateHuman ;
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: CALL_OW 44
4985: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: LD_INT 9
4993: PPUSH
4994: LD_INT 0
4996: PPUSH
4997: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: LD_INT 53
5008: PPUSH
5009: LD_INT 23
5011: PPUSH
5012: CALL_OW 111
// end ;
5016: GO 4920
5018: POP
5019: POP
// for i = 1 to 3 do
5020: LD_ADDR_VAR 0 2
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 3
5032: PUSH
5033: FOR_TO
5034: IFFALSE 5131
// begin uc_side = 4 ;
5036: LD_ADDR_OWVAR 20
5040: PUSH
5041: LD_INT 4
5043: ST_TO_ADDR
// uc_nation = 1 ;
5044: LD_ADDR_OWVAR 21
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// hc_name =  ;
5052: LD_ADDR_OWVAR 26
5056: PUSH
5057: LD_STRING 
5059: ST_TO_ADDR
// hc_gallery =  ;
5060: LD_ADDR_OWVAR 33
5064: PUSH
5065: LD_STRING 
5067: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5068: LD_INT 0
5070: PPUSH
5071: LD_INT 4
5073: PPUSH
5074: LD_INT 5
5076: PPUSH
5077: LD_INT 8
5079: PPUSH
5080: CALL_OW 12
5084: PPUSH
5085: CALL_OW 380
// un = CreateHuman ;
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: CALL_OW 44
5098: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5099: LD_VAR 0 3
5103: PPUSH
5104: LD_INT 9
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5114: LD_VAR 0 3
5118: PPUSH
5119: LD_INT 53
5121: PPUSH
5122: LD_INT 23
5124: PPUSH
5125: CALL_OW 111
// end ;
5129: GO 5033
5131: POP
5132: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5133: LD_ADDR_VAR 0 2
5137: PUSH
5138: DOUBLE
5139: LD_INT 1
5141: DEC
5142: ST_TO_ADDR
5143: LD_INT 9
5145: PUSH
5146: LD_INT 8
5148: PUSH
5149: LD_INT 7
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: PUSH
5157: LD_OWVAR 67
5161: ARRAY
5162: PUSH
5163: FOR_TO
5164: IFFALSE 5360
// begin uc_side = 4 ;
5166: LD_ADDR_OWVAR 20
5170: PUSH
5171: LD_INT 4
5173: ST_TO_ADDR
// uc_nation = 1 ;
5174: LD_ADDR_OWVAR 21
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// vc_engine = 1 ;
5182: LD_ADDR_OWVAR 39
5186: PUSH
5187: LD_INT 1
5189: ST_TO_ADDR
// vc_control = 1 ;
5190: LD_ADDR_OWVAR 38
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5198: LD_ADDR_OWVAR 40
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 4
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 4
5226: PPUSH
5227: CALL_OW 12
5231: ARRAY
5232: ST_TO_ADDR
// vc_chassis = 4 ;
5233: LD_ADDR_OWVAR 37
5237: PUSH
5238: LD_INT 4
5240: ST_TO_ADDR
// veh = CreateVehicle ;
5241: LD_ADDR_VAR 0 4
5245: PUSH
5246: CALL_OW 45
5250: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5251: LD_VAR 0 4
5255: PPUSH
5256: LD_INT 9
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: CALL_OW 49
// hc_name =  ;
5266: LD_ADDR_OWVAR 26
5270: PUSH
5271: LD_STRING 
5273: ST_TO_ADDR
// hc_gallery =  ;
5274: LD_ADDR_OWVAR 33
5278: PUSH
5279: LD_STRING 
5281: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5282: LD_INT 0
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 5
5290: PPUSH
5291: LD_INT 8
5293: PPUSH
5294: CALL_OW 12
5298: PPUSH
5299: CALL_OW 380
// un = CreateHuman ;
5303: LD_ADDR_VAR 0 3
5307: PUSH
5308: CALL_OW 44
5312: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5313: LD_VAR 0 3
5317: PPUSH
5318: LD_VAR 0 4
5322: PPUSH
5323: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5327: LD_VAR 0 4
5331: PUSH
5332: LD_VAR 0 3
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_INT 53
5343: PPUSH
5344: LD_INT 23
5346: PPUSH
5347: CALL_OW 111
// wait ( 0 0$5 ) ;
5351: LD_INT 175
5353: PPUSH
5354: CALL_OW 67
// end ;
5358: GO 5163
5360: POP
5361: POP
// end ; end_of_file
5362: LD_VAR 0 1
5366: RET
// export function PrepareRussianCommander ; begin
5367: LD_INT 0
5369: PPUSH
// uc_side = 3 ;
5370: LD_ADDR_OWVAR 20
5374: PUSH
5375: LD_INT 3
5377: ST_TO_ADDR
// uc_nation = 3 ;
5378: LD_ADDR_OWVAR 21
5382: PUSH
5383: LD_INT 3
5385: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5386: LD_ADDR_EXP 23
5390: PUSH
5391: LD_STRING Borodin
5393: PPUSH
5394: CALL_OW 25
5398: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5399: LD_EXP 23
5403: PPUSH
5404: LD_INT 25
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: LD_VAR 0 1
5418: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5419: LD_INT 0
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
// for i = 1 to 10 do
5425: LD_ADDR_VAR 0 2
5429: PUSH
5430: DOUBLE
5431: LD_INT 1
5433: DEC
5434: ST_TO_ADDR
5435: LD_INT 10
5437: PUSH
5438: FOR_TO
5439: IFFALSE 5513
// begin uc_side = 6 ;
5441: LD_ADDR_OWVAR 20
5445: PUSH
5446: LD_INT 6
5448: ST_TO_ADDR
// uc_nation = 3 ;
5449: LD_ADDR_OWVAR 21
5453: PUSH
5454: LD_INT 3
5456: ST_TO_ADDR
// hc_gallery =  ;
5457: LD_ADDR_OWVAR 33
5461: PUSH
5462: LD_STRING 
5464: ST_TO_ADDR
// hc_name =  ;
5465: LD_ADDR_OWVAR 26
5469: PUSH
5470: LD_STRING 
5472: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5473: LD_INT 0
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_INT 3
5481: PPUSH
5482: CALL_OW 380
// un = CreateHuman ;
5486: LD_ADDR_VAR 0 3
5490: PUSH
5491: CALL_OW 44
5495: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5496: LD_VAR 0 3
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 0
5506: PPUSH
5507: CALL_OW 49
// end ;
5511: GO 5438
5513: POP
5514: POP
// for i = 1 to 3 do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_INT 3
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5678
// begin uc_side = 6 ;
5531: LD_ADDR_OWVAR 20
5535: PUSH
5536: LD_INT 6
5538: ST_TO_ADDR
// uc_nation = 3 ;
5539: LD_ADDR_OWVAR 21
5543: PUSH
5544: LD_INT 3
5546: ST_TO_ADDR
// vc_engine = 1 ;
5547: LD_ADDR_OWVAR 39
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// vc_control = 1 ;
5555: LD_ADDR_OWVAR 38
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5563: LD_ADDR_OWVAR 40
5567: PUSH
5568: LD_INT 43
5570: PUSH
5571: LD_INT 44
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 1
5580: PPUSH
5581: LD_INT 2
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: ST_TO_ADDR
// vc_chassis = 22 ;
5590: LD_ADDR_OWVAR 37
5594: PUSH
5595: LD_INT 22
5597: ST_TO_ADDR
// veh = CreateVehicle ;
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: CALL_OW 45
5607: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_INT 2
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// hc_gallery =  ;
5623: LD_ADDR_OWVAR 33
5627: PUSH
5628: LD_STRING 
5630: ST_TO_ADDR
// hc_name =  ;
5631: LD_ADDR_OWVAR 26
5635: PUSH
5636: LD_STRING 
5638: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5639: LD_INT 0
5641: PPUSH
5642: LD_INT 3
5644: PPUSH
5645: LD_INT 4
5647: PPUSH
5648: CALL_OW 380
// un = CreateHuman ;
5652: LD_ADDR_VAR 0 3
5656: PUSH
5657: CALL_OW 44
5661: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5662: LD_VAR 0 3
5666: PPUSH
5667: LD_VAR 0 4
5671: PPUSH
5672: CALL_OW 52
// end ;
5676: GO 5528
5678: POP
5679: POP
// end ;
5680: LD_VAR 0 1
5684: RET
// export function PrepareRussians ; var i , un ; begin
5685: LD_INT 0
5687: PPUSH
5688: PPUSH
5689: PPUSH
// for i = 1 to 14 do
5690: LD_ADDR_VAR 0 2
5694: PUSH
5695: DOUBLE
5696: LD_INT 1
5698: DEC
5699: ST_TO_ADDR
5700: LD_INT 14
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5790
// begin uc_side = 3 ;
5706: LD_ADDR_OWVAR 20
5710: PUSH
5711: LD_INT 3
5713: ST_TO_ADDR
// uc_nation = 3 ;
5714: LD_ADDR_OWVAR 21
5718: PUSH
5719: LD_INT 3
5721: ST_TO_ADDR
// hc_gallery =  ;
5722: LD_ADDR_OWVAR 33
5726: PUSH
5727: LD_STRING 
5729: ST_TO_ADDR
// hc_name =  ;
5730: LD_ADDR_OWVAR 26
5734: PUSH
5735: LD_STRING 
5737: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_EXP 24
5748: PPUSH
5749: LD_EXP 25
5753: PPUSH
5754: CALL_OW 12
5758: PPUSH
5759: CALL_OW 380
// un = CreateHuman ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: CALL_OW 44
5772: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_INT 3
5780: PPUSH
5781: LD_INT 0
5783: PPUSH
5784: CALL_OW 49
// end ;
5788: GO 5703
5790: POP
5791: POP
// for i = 1 to 6 do
5792: LD_ADDR_VAR 0 2
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_INT 6
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5892
// begin uc_side = 3 ;
5808: LD_ADDR_OWVAR 20
5812: PUSH
5813: LD_INT 3
5815: ST_TO_ADDR
// uc_nation = 3 ;
5816: LD_ADDR_OWVAR 21
5820: PUSH
5821: LD_INT 3
5823: ST_TO_ADDR
// hc_gallery =  ;
5824: LD_ADDR_OWVAR 33
5828: PUSH
5829: LD_STRING 
5831: ST_TO_ADDR
// hc_name =  ;
5832: LD_ADDR_OWVAR 26
5836: PUSH
5837: LD_STRING 
5839: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5840: LD_INT 0
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: LD_EXP 24
5850: PPUSH
5851: LD_EXP 25
5855: PPUSH
5856: CALL_OW 12
5860: PPUSH
5861: CALL_OW 380
// un = CreateHuman ;
5865: LD_ADDR_VAR 0 3
5869: PUSH
5870: CALL_OW 44
5874: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5875: LD_VAR 0 3
5879: PPUSH
5880: LD_INT 3
5882: PPUSH
5883: LD_INT 0
5885: PPUSH
5886: CALL_OW 49
// end ;
5890: GO 5805
5892: POP
5893: POP
// for i = 1 to 6 do
5894: LD_ADDR_VAR 0 2
5898: PUSH
5899: DOUBLE
5900: LD_INT 1
5902: DEC
5903: ST_TO_ADDR
5904: LD_INT 6
5906: PUSH
5907: FOR_TO
5908: IFFALSE 5994
// begin uc_side = 3 ;
5910: LD_ADDR_OWVAR 20
5914: PUSH
5915: LD_INT 3
5917: ST_TO_ADDR
// uc_nation = 3 ;
5918: LD_ADDR_OWVAR 21
5922: PUSH
5923: LD_INT 3
5925: ST_TO_ADDR
// hc_gallery =  ;
5926: LD_ADDR_OWVAR 33
5930: PUSH
5931: LD_STRING 
5933: ST_TO_ADDR
// hc_name =  ;
5934: LD_ADDR_OWVAR 26
5938: PUSH
5939: LD_STRING 
5941: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5942: LD_INT 0
5944: PPUSH
5945: LD_INT 3
5947: PPUSH
5948: LD_EXP 24
5952: PPUSH
5953: LD_EXP 25
5957: PPUSH
5958: CALL_OW 12
5962: PPUSH
5963: CALL_OW 380
// un = CreateHuman ;
5967: LD_ADDR_VAR 0 3
5971: PUSH
5972: CALL_OW 44
5976: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5977: LD_VAR 0 3
5981: PPUSH
5982: LD_INT 3
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 49
// end ;
5992: GO 5907
5994: POP
5995: POP
// for i = 1 to 4 do
5996: LD_ADDR_VAR 0 2
6000: PUSH
6001: DOUBLE
6002: LD_INT 1
6004: DEC
6005: ST_TO_ADDR
6006: LD_INT 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6096
// begin uc_side = 3 ;
6012: LD_ADDR_OWVAR 20
6016: PUSH
6017: LD_INT 3
6019: ST_TO_ADDR
// uc_nation = 3 ;
6020: LD_ADDR_OWVAR 21
6024: PUSH
6025: LD_INT 3
6027: ST_TO_ADDR
// hc_gallery =  ;
6028: LD_ADDR_OWVAR 33
6032: PUSH
6033: LD_STRING 
6035: ST_TO_ADDR
// hc_name =  ;
6036: LD_ADDR_OWVAR 26
6040: PUSH
6041: LD_STRING 
6043: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6044: LD_INT 0
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: LD_EXP 24
6054: PPUSH
6055: LD_EXP 25
6059: PPUSH
6060: CALL_OW 12
6064: PPUSH
6065: CALL_OW 380
// un = CreateHuman ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: CALL_OW 44
6078: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6079: LD_VAR 0 3
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: LD_INT 0
6089: PPUSH
6090: CALL_OW 49
// end ;
6094: GO 6009
6096: POP
6097: POP
// end ; end_of_file
6098: LD_VAR 0 1
6102: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
// if exist_mode then
6107: LD_VAR 0 2
6111: IFFALSE 6130
// unit := CreateCharacter ( ident ) else
6113: LD_ADDR_VAR 0 4
6117: PUSH
6118: LD_VAR 0 1
6122: PPUSH
6123: CALL_OW 34
6127: ST_TO_ADDR
6128: GO 6145
// unit := NewCharacter ( ident ) ;
6130: LD_ADDR_VAR 0 4
6134: PUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: CALL_OW 25
6144: ST_TO_ADDR
// result := unit ;
6145: LD_ADDR_VAR 0 3
6149: PUSH
6150: LD_VAR 0 4
6154: ST_TO_ADDR
// end ;
6155: LD_VAR 0 3
6159: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6160: LD_INT 0
6162: PPUSH
6163: PPUSH
6164: PPUSH
// rnd = rand ( 1 , characters ) ;
6165: LD_ADDR_VAR 0 6
6169: PUSH
6170: LD_INT 1
6172: PPUSH
6173: LD_VAR 0 1
6177: PPUSH
6178: CALL_OW 12
6182: ST_TO_ADDR
// for i = 1 to characters do
6183: LD_ADDR_VAR 0 5
6187: PUSH
6188: DOUBLE
6189: LD_INT 1
6191: DEC
6192: ST_TO_ADDR
6193: LD_VAR 0 1
6197: PUSH
6198: FOR_TO
6199: IFFALSE 6309
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6201: LD_VAR 0 5
6205: PUSH
6206: LD_VAR 0 6
6210: EQUAL
6211: PUSH
6212: LD_VAR 0 1
6216: PUSH
6217: LD_VAR 0 5
6221: ARRAY
6222: PPUSH
6223: CALL_OW 258
6227: PUSH
6228: LD_INT 1
6230: EQUAL
6231: AND
6232: IFFALSE 6254
// Say ( characters [ i ] , dialogMID ) ;
6234: LD_VAR 0 1
6238: PUSH
6239: LD_VAR 0 5
6243: ARRAY
6244: PPUSH
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6254: LD_VAR 0 5
6258: PUSH
6259: LD_VAR 0 6
6263: EQUAL
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: LD_VAR 0 5
6274: ARRAY
6275: PPUSH
6276: CALL_OW 258
6280: PUSH
6281: LD_INT 2
6283: EQUAL
6284: AND
6285: IFFALSE 6307
// Say ( characters [ i ] , dialogFID ) ;
6287: LD_VAR 0 1
6291: PUSH
6292: LD_VAR 0 5
6296: ARRAY
6297: PPUSH
6298: LD_VAR 0 3
6302: PPUSH
6303: CALL_OW 88
// end ;
6307: GO 6198
6309: POP
6310: POP
// end ;
6311: LD_VAR 0 4
6315: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
// uc_side := GetSide ( b ) ;
6321: LD_ADDR_OWVAR 20
6325: PUSH
6326: LD_VAR 0 2
6330: PPUSH
6331: CALL_OW 255
6335: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6336: LD_ADDR_OWVAR 21
6340: PUSH
6341: LD_VAR 0 2
6345: PPUSH
6346: CALL_OW 248
6350: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6366: LD_ADDR_VAR 0 5
6370: PUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 254
6380: PUSH
6381: LD_INT 3
6383: MINUS
6384: ST_TO_ADDR
// if dir < 0 then
6385: LD_VAR 0 5
6389: PUSH
6390: LD_INT 0
6392: LESS
6393: IFFALSE 6409
// dir := 6 + dir ;
6395: LD_ADDR_VAR 0 5
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: LD_VAR 0 5
6407: PLUS
6408: ST_TO_ADDR
// un := CreateHuman ;
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: CALL_OW 44
6418: ST_TO_ADDR
// SetDir ( un , dir ) ;
6419: LD_VAR 0 4
6423: PPUSH
6424: LD_VAR 0 5
6428: PPUSH
6429: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6433: LD_VAR 0 4
6437: PPUSH
6438: LD_VAR 0 2
6442: PPUSH
6443: CALL_OW 52
// end ;
6447: LD_VAR 0 3
6451: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
6456: PPUSH
6457: PPUSH
// for i = 1 to count do
6458: LD_ADDR_VAR 0 8
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_VAR 0 6
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6555
// begin uc_side = side ;
6476: LD_ADDR_OWVAR 20
6480: PUSH
6481: LD_VAR 0 1
6485: ST_TO_ADDR
// uc_nation = nation ;
6486: LD_ADDR_OWVAR 21
6490: PUSH
6491: LD_VAR 0 2
6495: ST_TO_ADDR
// hc_gallery =  ;
6496: LD_ADDR_OWVAR 33
6500: PUSH
6501: LD_STRING 
6503: ST_TO_ADDR
// hc_name =  ;
6504: LD_ADDR_OWVAR 26
6508: PUSH
6509: LD_STRING 
6511: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6512: LD_INT 0
6514: PPUSH
6515: LD_VAR 0 5
6519: PPUSH
6520: LD_VAR 0 4
6524: PPUSH
6525: CALL_OW 380
// un = CreateHuman ;
6529: LD_ADDR_VAR 0 10
6533: PUSH
6534: CALL_OW 44
6538: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6539: LD_VAR 0 10
6543: PPUSH
6544: LD_VAR 0 3
6548: PPUSH
6549: CALL_OW 52
// end ;
6553: GO 6473
6555: POP
6556: POP
// end ;
6557: LD_VAR 0 7
6561: RET
// export function PrepareDifficulty ; begin
6562: LD_INT 0
6564: PPUSH
// if Difficulty = 1 then
6565: LD_OWVAR 67
6569: PUSH
6570: LD_INT 1
6572: EQUAL
6573: IFFALSE 6591
// begin RuSolMinLevel = 4 ;
6575: LD_ADDR_EXP 24
6579: PUSH
6580: LD_INT 4
6582: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6583: LD_ADDR_EXP 25
6587: PUSH
6588: LD_INT 6
6590: ST_TO_ADDR
// end ; if Difficulty = 2 then
6591: LD_OWVAR 67
6595: PUSH
6596: LD_INT 2
6598: EQUAL
6599: IFFALSE 6669
// begin RuSolMinLevel = 5 ;
6601: LD_ADDR_EXP 24
6605: PUSH
6606: LD_INT 5
6608: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6609: LD_ADDR_EXP 25
6613: PUSH
6614: LD_INT 6
6616: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6617: LD_INT 51
6619: PPUSH
6620: LD_INT 3
6622: PPUSH
6623: LD_INT 1
6625: PPUSH
6626: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6630: LD_INT 57
6632: PPUSH
6633: LD_INT 3
6635: PPUSH
6636: LD_INT 1
6638: PPUSH
6639: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6643: LD_INT 57
6645: PPUSH
6646: LD_INT 6
6648: PPUSH
6649: LD_INT 2
6651: PPUSH
6652: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6656: LD_INT 51
6658: PPUSH
6659: LD_INT 6
6661: PPUSH
6662: LD_INT 2
6664: PPUSH
6665: CALL_OW 322
// end ; if Difficulty = 3 then
6669: LD_OWVAR 67
6673: PUSH
6674: LD_INT 3
6676: EQUAL
6677: IFFALSE 6760
// begin RuSolMinLevel = 5 ;
6679: LD_ADDR_EXP 24
6683: PUSH
6684: LD_INT 5
6686: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6687: LD_ADDR_EXP 25
6691: PUSH
6692: LD_INT 6
6694: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6695: LD_INT 57
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 1
6703: PPUSH
6704: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6708: LD_INT 51
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6721: LD_INT 52
6723: PPUSH
6724: LD_INT 3
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6734: LD_INT 57
6736: PPUSH
6737: LD_INT 6
6739: PPUSH
6740: LD_INT 2
6742: PPUSH
6743: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6747: LD_INT 52
6749: PPUSH
6750: LD_INT 6
6752: PPUSH
6753: LD_INT 2
6755: PPUSH
6756: CALL_OW 322
// end ; end ;
6760: LD_VAR 0 1
6764: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
6769: PPUSH
6770: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6771: LD_ADDR_VAR 0 3
6775: PUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 25
6788: PUSH
6789: LD_INT 2
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6805: LD_ADDR_VAR 0 4
6809: PUSH
6810: LD_INT 4
6812: PUSH
6813: LD_INT 75
6815: PUSH
6816: LD_INT 79
6818: PUSH
6819: LD_INT 2
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 4
6830: PUSH
6831: LD_INT 113
6833: PUSH
6834: LD_INT 94
6836: PUSH
6837: LD_INT 4
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 29
6848: PUSH
6849: LD_INT 106
6851: PUSH
6852: LD_INT 97
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 26
6866: PUSH
6867: LD_INT 93
6869: PUSH
6870: LD_INT 97
6872: PUSH
6873: LD_INT 5
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: LD_INT 100
6887: PUSH
6888: LD_INT 89
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 17
6902: PUSH
6903: LD_INT 96
6905: PUSH
6906: LD_INT 89
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 32
6920: PUSH
6921: LD_INT 78
6923: PUSH
6924: LD_INT 94
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 32
6938: PUSH
6939: LD_INT 95
6941: PUSH
6942: LD_INT 82
6944: PUSH
6945: LD_INT 3
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 32
6956: PUSH
6957: LD_INT 104
6959: PUSH
6960: LD_INT 85
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 32
6974: PUSH
6975: LD_INT 81
6977: PUSH
6978: LD_INT 78
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 33
6992: PUSH
6993: LD_INT 109
6995: PUSH
6996: LD_INT 90
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 33
7010: PUSH
7011: LD_INT 88
7013: PUSH
7014: LD_INT 79
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 33
7028: PUSH
7029: LD_INT 76
7031: PUSH
7032: LD_INT 87
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 26
7046: PUSH
7047: LD_INT 96
7049: PUSH
7050: LD_INT 97
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 85
7067: PUSH
7068: LD_INT 84
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 6
7082: PUSH
7083: LD_INT 88
7085: PUSH
7086: LD_INT 95
7088: PUSH
7089: LD_INT 0
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 19
7100: PUSH
7101: LD_INT 103
7103: PUSH
7104: LD_INT 89
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 16
7118: PUSH
7119: LD_INT 97
7121: PUSH
7122: LD_INT 86
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 24
7136: PUSH
7137: LD_INT 100
7139: PUSH
7140: LD_INT 85
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: ST_TO_ADDR
// for i := 1 to buildingsTab do
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: DOUBLE
7179: LD_INT 1
7181: DEC
7182: ST_TO_ADDR
7183: LD_VAR 0 4
7187: PUSH
7188: FOR_TO
7189: IFFALSE 7262
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7191: LD_VAR 0 3
7195: PPUSH
7196: LD_VAR 0 4
7200: PUSH
7201: LD_VAR 0 2
7205: ARRAY
7206: PUSH
7207: LD_INT 1
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 4
7215: PUSH
7216: LD_VAR 0 2
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PPUSH
7226: LD_VAR 0 4
7230: PUSH
7231: LD_VAR 0 2
7235: ARRAY
7236: PUSH
7237: LD_INT 3
7239: ARRAY
7240: PPUSH
7241: LD_VAR 0 4
7245: PUSH
7246: LD_VAR 0 2
7250: ARRAY
7251: PUSH
7252: LD_INT 4
7254: ARRAY
7255: PPUSH
7256: CALL_OW 205
7260: GO 7188
7262: POP
7263: POP
// end ;
7264: LD_VAR 0 1
7268: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
// for i in charactersList do
7273: LD_ADDR_VAR 0 4
7277: PUSH
7278: LD_VAR 0 1
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7313
// begin if IsOk ( i ) then
7286: LD_VAR 0 4
7290: PPUSH
7291: CALL_OW 302
7295: IFFALSE 7311
// SaveCharacters ( i , ident ) ;
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: CALL_OW 38
// end ;
7311: GO 7283
7313: POP
7314: POP
// end ;
7315: LD_VAR 0 3
7319: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7320: LD_INT 0
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// for i = 1 to 72 do
7326: LD_ADDR_VAR 0 5
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_INT 72
7338: PUSH
7339: FOR_TO
7340: IFFALSE 7398
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7342: LD_VAR 0 5
7346: PPUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 321
7356: PUSH
7357: LD_INT 1
7359: EQUAL
7360: PUSH
7361: LD_VAR 0 5
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: CALL_OW 482
7375: PUSH
7376: LD_INT 1
7378: EQUAL
7379: AND
7380: IFFALSE 7396
// AddComResearch ( lab , i ) ;
7382: LD_VAR 0 2
7386: PPUSH
7387: LD_VAR 0 5
7391: PPUSH
7392: CALL_OW 184
7396: GO 7339
7398: POP
7399: POP
// end ;
7400: LD_VAR 0 4
7404: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
7415: LD_ADDR_VAR 0 6
7419: PUSH
7420: LD_INT 22
7422: PUSH
7423: LD_VAR 0 1
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 25
7434: PUSH
7435: LD_INT 1
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 56
7444: PUSH
7445: EMPTY
7446: LIST
7447: PUSH
7448: LD_INT 24
7450: PUSH
7451: LD_INT 700
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 3
7460: PUSH
7461: LD_INT 60
7463: PUSH
7464: EMPTY
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: PUSH
7483: LD_EXP 23
7487: PUSH
7488: EMPTY
7489: LIST
7490: DIFF
7491: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7492: LD_ADDR_VAR 0 7
7496: PUSH
7497: LD_INT 22
7499: PUSH
7500: LD_VAR 0 1
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 25
7511: PUSH
7512: LD_INT 1
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 54
7521: PUSH
7522: EMPTY
7523: LIST
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7535: LD_ADDR_VAR 0 8
7539: PUSH
7540: LD_INT 22
7542: PUSH
7543: LD_VAR 0 1
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 30
7554: PUSH
7555: LD_INT 32
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 58
7564: PUSH
7565: EMPTY
7566: LIST
7567: PUSH
7568: LD_INT 24
7570: PUSH
7571: LD_INT 251
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7589: LD_ADDR_VAR 0 10
7593: PUSH
7594: LD_INT 22
7596: PUSH
7597: LD_VAR 0 1
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: LD_INT 30
7611: PUSH
7612: LD_INT 4
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 30
7621: PUSH
7622: LD_INT 5
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 24
7636: PUSH
7637: LD_INT 251
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 69
7653: ST_TO_ADDR
// if barrackList > 0 then
7654: LD_VAR 0 10
7658: PUSH
7659: LD_INT 0
7661: GREATER
7662: IFFALSE 7775
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7664: LD_VAR 0 8
7668: PUSH
7669: LD_INT 0
7671: EQUAL
7672: PUSH
7673: LD_INT 24
7675: PPUSH
7676: LD_INT 22
7678: PUSH
7679: LD_INT 1
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 21
7688: PUSH
7689: LD_INT 1
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 70
7704: PUSH
7705: LD_INT 0
7707: EQUAL
7708: AND
7709: IFFALSE 7758
// begin for i in soldiers_list do
7711: LD_ADDR_VAR 0 4
7715: PUSH
7716: LD_VAR 0 6
7720: PUSH
7721: FOR_IN
7722: IFFALSE 7754
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7724: LD_VAR 0 4
7728: PPUSH
7729: LD_VAR 0 10
7733: PUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_VAR 0 10
7741: PPUSH
7742: CALL_OW 12
7746: ARRAY
7747: PPUSH
7748: CALL_OW 120
7752: GO 7721
7754: POP
7755: POP
// end else
7756: GO 7775
// begin for i in barrackList do
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 10
7767: PUSH
7768: FOR_IN
7769: IFFALSE 7773
// begin end ;
7771: GO 7768
7773: POP
7774: POP
// end ; end ; end ;
7775: LD_VAR 0 3
7779: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7780: LD_INT 0
7782: PPUSH
7783: PPUSH
7784: PPUSH
7785: PPUSH
7786: PPUSH
7787: PPUSH
// for i = 1 to infantryCount do
7788: LD_ADDR_VAR 0 8
7792: PUSH
7793: DOUBLE
7794: LD_INT 1
7796: DEC
7797: ST_TO_ADDR
7798: LD_VAR 0 5
7802: PUSH
7803: FOR_TO
7804: IFFALSE 7920
// begin uc_side = side ;
7806: LD_ADDR_OWVAR 20
7810: PUSH
7811: LD_VAR 0 1
7815: ST_TO_ADDR
// uc_nation = nation ;
7816: LD_ADDR_OWVAR 21
7820: PUSH
7821: LD_VAR 0 3
7825: ST_TO_ADDR
// hc_class = 1 ;
7826: LD_ADDR_OWVAR 28
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// hc_name =  ;
7834: LD_ADDR_OWVAR 26
7838: PUSH
7839: LD_STRING 
7841: ST_TO_ADDR
// hc_gallery =  ;
7842: LD_ADDR_OWVAR 33
7846: PUSH
7847: LD_STRING 
7849: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7850: LD_INT 0
7852: PPUSH
7853: LD_INT 1
7855: PPUSH
7856: LD_EXP 24
7860: PPUSH
7861: LD_EXP 25
7865: PPUSH
7866: CALL_OW 12
7870: PPUSH
7871: CALL_OW 380
// un = CreateHuman ;
7875: LD_ADDR_VAR 0 10
7879: PUSH
7880: CALL_OW 44
7884: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7885: LD_VAR 0 10
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: LD_INT 0
7897: PPUSH
7898: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7902: LD_ADDR_EXP 31
7906: PUSH
7907: LD_EXP 31
7911: PUSH
7912: LD_VAR 0 10
7916: ADD
7917: ST_TO_ADDR
// end ;
7918: GO 7803
7920: POP
7921: POP
// for i = 1 to vehCount do
7922: LD_ADDR_VAR 0 8
7926: PUSH
7927: DOUBLE
7928: LD_INT 1
7930: DEC
7931: ST_TO_ADDR
7932: LD_VAR 0 6
7936: PUSH
7937: FOR_TO
7938: IFFALSE 8145
// begin uc_side = side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 1
7949: ST_TO_ADDR
// uc_nation = nation ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_VAR 0 3
7959: ST_TO_ADDR
// vc_Chassis = 22 ;
7960: LD_ADDR_OWVAR 37
7964: PUSH
7965: LD_INT 22
7967: ST_TO_ADDR
// vc_engine = 1 ;
7968: LD_ADDR_OWVAR 39
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// vc_control = 1 ;
7976: LD_ADDR_OWVAR 38
7980: PUSH
7981: LD_INT 1
7983: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7984: LD_ADDR_OWVAR 40
7988: PUSH
7989: LD_INT 43
7991: PUSH
7992: LD_INT 44
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 1
8001: PPUSH
8002: LD_INT 2
8004: PPUSH
8005: CALL_OW 12
8009: ARRAY
8010: ST_TO_ADDR
// veh = CreateVehicle ;
8011: LD_ADDR_VAR 0 12
8015: PUSH
8016: CALL_OW 45
8020: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8021: LD_VAR 0 12
8025: PPUSH
8026: LD_VAR 0 2
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8038: LD_ADDR_EXP 31
8042: PUSH
8043: LD_EXP 31
8047: PUSH
8048: LD_VAR 0 12
8052: ADD
8053: ST_TO_ADDR
// hc_class = 3 ;
8054: LD_ADDR_OWVAR 28
8058: PUSH
8059: LD_INT 3
8061: ST_TO_ADDR
// hc_name =  ;
8062: LD_ADDR_OWVAR 26
8066: PUSH
8067: LD_STRING 
8069: ST_TO_ADDR
// hc_gallery =  ;
8070: LD_ADDR_OWVAR 33
8074: PUSH
8075: LD_STRING 
8077: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8078: LD_INT 0
8080: PPUSH
8081: LD_INT 3
8083: PPUSH
8084: LD_EXP 24
8088: PPUSH
8089: LD_EXP 25
8093: PPUSH
8094: CALL_OW 12
8098: PPUSH
8099: CALL_OW 380
// un = CreateHuman ;
8103: LD_ADDR_VAR 0 10
8107: PUSH
8108: CALL_OW 44
8112: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8113: LD_VAR 0 10
8117: PPUSH
8118: LD_VAR 0 12
8122: PPUSH
8123: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8127: LD_ADDR_EXP 31
8131: PUSH
8132: LD_EXP 31
8136: PUSH
8137: LD_VAR 0 10
8141: ADD
8142: ST_TO_ADDR
// end ;
8143: GO 7937
8145: POP
8146: POP
// end ;
8147: LD_VAR 0 7
8151: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
8156: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8157: LD_VAR 0 2
8161: PPUSH
8162: LD_INT 22
8164: PUSH
8165: LD_VAR 0 1
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: EMPTY
8175: LIST
8176: PPUSH
8177: CALL_OW 70
8181: PUSH
8182: LD_INT 0
8184: EQUAL
8185: PUSH
8186: LD_EXP 31
8190: PUSH
8191: LD_INT 0
8193: GREATER
8194: AND
8195: IFFALSE 8241
// begin for i in defenders_list do
8197: LD_ADDR_VAR 0 4
8201: PUSH
8202: LD_EXP 31
8206: PUSH
8207: FOR_IN
8208: IFFALSE 8239
// begin ComMoveXY ( i , 65 , 68 ) ;
8210: LD_VAR 0 4
8214: PPUSH
8215: LD_INT 65
8217: PPUSH
8218: LD_INT 68
8220: PPUSH
8221: CALL_OW 111
// SetFuel ( i , 100 ) ;
8225: LD_VAR 0 4
8229: PPUSH
8230: LD_INT 100
8232: PPUSH
8233: CALL_OW 240
// end ;
8237: GO 8207
8239: POP
8240: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8241: LD_VAR 0 2
8245: PPUSH
8246: LD_INT 22
8248: PUSH
8249: LD_VAR 0 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: PPUSH
8261: CALL_OW 70
8265: PUSH
8266: LD_INT 0
8268: GREATER
8269: PUSH
8270: LD_EXP 31
8274: PUSH
8275: LD_INT 0
8277: GREATER
8278: AND
8279: IFFALSE 8447
// begin for i in defenders_list do
8281: LD_ADDR_VAR 0 4
8285: PUSH
8286: LD_EXP 31
8290: PUSH
8291: FOR_IN
8292: IFFALSE 8342
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8294: LD_ADDR_VAR 0 5
8298: PUSH
8299: LD_INT 22
8301: PUSH
8302: LD_VAR 0 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: PPUSH
8316: LD_VAR 0 4
8320: PPUSH
8321: CALL_OW 74
8325: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
8326: LD_VAR 0 4
8330: PPUSH
8331: LD_VAR 0 5
8335: PPUSH
8336: CALL_OW 115
// end ;
8340: GO 8291
8342: POP
8343: POP
// if russianAI = 0 then
8344: LD_EXP 26
8348: PUSH
8349: LD_INT 0
8351: EQUAL
8352: IFFALSE 8447
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 22
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 25
8371: PUSH
8372: LD_INT 1
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: PUSH
8388: LD_EXP 23
8392: DIFF
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8445
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8397: LD_ADDR_VAR 0 5
8401: PUSH
8402: LD_INT 22
8404: PUSH
8405: LD_VAR 0 1
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 69
8418: PPUSH
8419: LD_VAR 0 4
8423: PPUSH
8424: CALL_OW 74
8428: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
8429: LD_VAR 0 4
8433: PPUSH
8434: LD_VAR 0 5
8438: PPUSH
8439: CALL_OW 115
// end ;
8443: GO 8394
8445: POP
8446: POP
// end ; end ; end ;
8447: LD_VAR 0 3
8451: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
8452: LD_INT 0
8454: PPUSH
8455: PPUSH
8456: PPUSH
8457: PPUSH
8458: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
8459: LD_ADDR_VAR 0 6
8463: PUSH
8464: LD_INT 22
8466: PUSH
8467: LD_VAR 0 1
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 2
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 16
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 24
8506: PUSH
8507: LD_INT 1000
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: PPUSH
8519: CALL_OW 69
8523: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8524: LD_ADDR_VAR 0 4
8528: PUSH
8529: LD_INT 22
8531: PUSH
8532: LD_VAR 0 1
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 21
8543: PUSH
8544: LD_INT 3
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 24
8556: PUSH
8557: LD_INT 1000
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: PUSH
8573: EMPTY
8574: LIST
8575: PPUSH
8576: CALL_OW 69
8580: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8581: LD_VAR 0 4
8585: PUSH
8586: LD_INT 0
8588: GREATER
8589: PUSH
8590: LD_VAR 0 6
8594: PUSH
8595: LD_INT 0
8597: GREATER
8598: AND
8599: IFFALSE 8665
// begin for i in engineerOk_list do
8601: LD_ADDR_VAR 0 5
8605: PUSH
8606: LD_VAR 0 6
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8663
// begin for j in buildings_list do
8614: LD_ADDR_VAR 0 7
8618: PUSH
8619: LD_VAR 0 4
8623: PUSH
8624: FOR_IN
8625: IFFALSE 8659
// begin AddComExitBuilding ( i ) ;
8627: LD_VAR 0 5
8631: PPUSH
8632: CALL_OW 182
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8643: LD_VAR 0 5
8647: PPUSH
8648: LD_VAR 0 7
8652: PPUSH
8653: CALL_OW 190
// end ;
8657: GO 8624
8659: POP
8660: POP
// end ;
8661: GO 8611
8663: POP
8664: POP
// end ; if buildings_list = 0 then
8665: LD_VAR 0 4
8669: PUSH
8670: LD_INT 0
8672: EQUAL
8673: IFFALSE 8706
// begin for i in engineerOK_list do
8675: LD_ADDR_VAR 0 5
8679: PUSH
8680: LD_VAR 0 6
8684: PUSH
8685: FOR_IN
8686: IFFALSE 8704
// begin ComEnterUnit ( i , building ) ;
8688: LD_VAR 0 5
8692: PPUSH
8693: LD_VAR 0 2
8697: PPUSH
8698: CALL_OW 120
// end ;
8702: GO 8685
8704: POP
8705: POP
// end ; end ;
8706: LD_VAR 0 3
8710: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8711: LD_INT 0
8713: PPUSH
8714: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 25
8729: PUSH
8730: LD_INT 2
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PPUSH
8741: CALL_OW 69
8745: PUSH
8746: LD_INT 0
8748: GREATER
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_VAR 0 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 3
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 3
8774: PUSH
8775: LD_INT 24
8777: PUSH
8778: LD_INT 1000
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: LIST
8793: PPUSH
8794: CALL_OW 69
8798: PUSH
8799: LD_INT 0
8801: EQUAL
8802: AND
8803: PUSH
8804: LD_VAR 0 2
8808: PUSH
8809: LD_INT 0
8811: GREATER
8812: AND
8813: IFFALSE 8912
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8815: LD_ADDR_VAR 0 4
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_VAR 0 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 25
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: PUSH
8851: FOR_IN
8852: IFFALSE 8910
// begin AddComExitBuilding ( i ) ;
8854: LD_VAR 0 4
8858: PPUSH
8859: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8863: LD_VAR 0 4
8867: PPUSH
8868: LD_VAR 0 2
8872: PUSH
8873: LD_INT 1
8875: ARRAY
8876: PPUSH
8877: LD_VAR 0 2
8881: PUSH
8882: LD_INT 2
8884: ARRAY
8885: PPUSH
8886: LD_VAR 0 2
8890: PUSH
8891: LD_INT 3
8893: ARRAY
8894: PPUSH
8895: LD_VAR 0 2
8899: PUSH
8900: LD_INT 4
8902: ARRAY
8903: PPUSH
8904: CALL_OW 205
// end ;
8908: GO 8851
8910: POP
8911: POP
// end ; end ;
8912: LD_VAR 0 3
8916: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8917: LD_INT 0
8919: PPUSH
8920: PPUSH
8921: PPUSH
8922: PPUSH
8923: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 250 ] , [ f_class , 4 ] ] ) ;
8924: LD_ADDR_VAR 0 6
8928: PUSH
8929: LD_INT 22
8931: PUSH
8932: LD_VAR 0 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 250
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 25
8953: PUSH
8954: LD_INT 4
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 69
8970: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8971: LD_ADDR_VAR 0 9
8975: PUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: LD_INT 22
8983: PUSH
8984: LD_VAR 0 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 21
8995: PUSH
8996: LD_INT 1
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: LD_INT 24
9008: PUSH
9009: LD_INT 750
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: PUSH
9039: LD_VAR 0 6
9043: PUSH
9044: LD_INT 0
9046: GREATER
9047: AND
9048: IFFALSE 9175
// begin for i = 1 to damageUnits do
9050: LD_ADDR_VAR 0 7
9054: PUSH
9055: DOUBLE
9056: LD_INT 1
9058: DEC
9059: ST_TO_ADDR
9060: LD_VAR 0 9
9064: PUSH
9065: FOR_TO
9066: IFFALSE 9090
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9068: LD_VAR 0 9
9072: PUSH
9073: LD_VAR 0 7
9077: ARRAY
9078: PPUSH
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 113
9088: GO 9065
9090: POP
9091: POP
// for i in sci_list do
9092: LD_ADDR_VAR 0 7
9096: PUSH
9097: LD_VAR 0 6
9101: PUSH
9102: FOR_IN
9103: IFFALSE 9171
// begin ComExitBuilding ( i ) ;
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9114: LD_ADDR_VAR 0 8
9118: PUSH
9119: LD_VAR 0 2
9123: PPUSH
9124: LD_INT 22
9126: PUSH
9127: LD_VAR 0 1
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 70
9140: PUSH
9141: FOR_IN
9142: IFFALSE 9167
// begin AddComHeal ( i , j ) ;
9144: LD_VAR 0 7
9148: PPUSH
9149: LD_VAR 0 8
9153: PPUSH
9154: CALL_OW 188
// wait ( 1 1$0 ) ;
9158: LD_INT 2100
9160: PPUSH
9161: CALL_OW 67
// end ;
9165: GO 9141
9167: POP
9168: POP
// end ;
9169: GO 9102
9171: POP
9172: POP
// end else
9173: GO 9189
// begin AddComEnterUnit ( sci_list , build ) ;
9175: LD_VAR 0 6
9179: PPUSH
9180: LD_VAR 0 4
9184: PPUSH
9185: CALL_OW 180
// end ; end ;
9189: LD_VAR 0 5
9193: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
9194: LD_INT 0
9196: PPUSH
9197: PPUSH
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
9205: PPUSH
9206: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
9207: LD_ADDR_VAR 0 9
9211: PUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 21
9226: PUSH
9227: LD_INT 2
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 33
9236: PUSH
9237: LD_INT 1
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 24
9246: PUSH
9247: LD_INT 660
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 3
9256: PUSH
9257: LD_INT 58
9259: PUSH
9260: EMPTY
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_INT 34
9272: PUSH
9273: LD_INT 53
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
9297: LD_ADDR_VAR 0 10
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 33
9326: PUSH
9327: LD_INT 1
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 3
9336: PUSH
9337: LD_INT 24
9339: PUSH
9340: LD_INT 660
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 69
9361: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9362: LD_ADDR_VAR 0 11
9366: PUSH
9367: LD_VAR 0 2
9371: PPUSH
9372: LD_INT 22
9374: PUSH
9375: LD_VAR 0 1
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 21
9386: PUSH
9387: LD_INT 2
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 33
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 3
9406: PUSH
9407: LD_INT 24
9409: PUSH
9410: LD_INT 1000
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: PPUSH
9427: CALL_OW 70
9431: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
9432: LD_ADDR_VAR 0 12
9436: PUSH
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 21
9456: PUSH
9457: LD_INT 2
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 33
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 24
9476: PUSH
9477: LD_INT 1000
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 58
9486: PUSH
9487: EMPTY
9488: LIST
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 34
9495: PUSH
9496: LD_INT 53
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PPUSH
9515: CALL_OW 70
9519: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9520: LD_ADDR_VAR 0 13
9524: PUSH
9525: EMPTY
9526: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9527: LD_ADDR_VAR 0 14
9531: PUSH
9532: LD_VAR 0 2
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_VAR 0 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 70
9567: ST_TO_ADDR
// if damageVehicle_list > 0 then
9568: LD_VAR 0 10
9572: PUSH
9573: LD_INT 0
9575: GREATER
9576: IFFALSE 9614
// begin for i in damageVehicle_list do
9578: LD_ADDR_VAR 0 7
9582: PUSH
9583: LD_VAR 0 10
9587: PUSH
9588: FOR_IN
9589: IFFALSE 9612
// begin ComMoveXY ( i , repX , repY ) ;
9591: LD_VAR 0 7
9595: PPUSH
9596: LD_VAR 0 3
9600: PPUSH
9601: LD_VAR 0 4
9605: PPUSH
9606: CALL_OW 111
// end ;
9610: GO 9588
9612: POP
9613: POP
// end ; if vehicleNeedRepair_list > 0 then
9614: LD_VAR 0 11
9618: PUSH
9619: LD_INT 0
9621: GREATER
9622: IFFALSE 9709
// begin for i in vehicleNeedRepair_list do
9624: LD_ADDR_VAR 0 7
9628: PUSH
9629: LD_VAR 0 11
9633: PUSH
9634: FOR_IN
9635: IFFALSE 9707
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9637: LD_ADDR_VAR 0 13
9641: PUSH
9642: LD_VAR 0 13
9646: PUSH
9647: LD_VAR 0 7
9651: PPUSH
9652: CALL_OW 313
9656: ADD
9657: ST_TO_ADDR
// for j in mechanicInside_list do
9658: LD_ADDR_VAR 0 8
9662: PUSH
9663: LD_VAR 0 13
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9703
// begin ComExitVehicle ( i ) ;
9671: LD_VAR 0 7
9675: PPUSH
9676: CALL_OW 121
// wait ( 0 0$1 ) ;
9680: LD_INT 35
9682: PPUSH
9683: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 8
9696: PPUSH
9697: CALL_OW 129
// end ;
9701: GO 9668
9703: POP
9704: POP
// end ;
9705: GO 9634
9707: POP
9708: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9709: LD_VAR 0 12
9713: PUSH
9714: LD_INT 0
9716: GREATER
9717: IFFALSE 9757
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9719: LD_VAR 0 14
9723: PUSH
9724: LD_INT 1
9726: ARRAY
9727: PPUSH
9728: LD_VAR 0 12
9732: PUSH
9733: LD_INT 1
9735: ARRAY
9736: PPUSH
9737: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9741: LD_VAR 0 12
9745: PUSH
9746: LD_INT 1
9748: ARRAY
9749: PPUSH
9750: LD_INT 100
9752: PPUSH
9753: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9757: LD_VAR 0 9
9761: PUSH
9762: LD_INT 0
9764: GREATER
9765: IFFALSE 9956
// begin for i in vehicleOK_list do
9767: LD_ADDR_VAR 0 7
9771: PUSH
9772: LD_VAR 0 9
9776: PUSH
9777: FOR_IN
9778: IFFALSE 9954
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9780: LD_ADDR_VAR 0 15
9784: PUSH
9785: LD_INT 22
9787: PUSH
9788: LD_VAR 0 5
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PPUSH
9797: CALL_OW 69
9801: PPUSH
9802: LD_VAR 0 7
9806: PPUSH
9807: CALL_OW 74
9811: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9812: LD_ADDR_VAR 0 16
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_VAR 0 5
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: LD_INT 59
9834: PUSH
9835: EMPTY
9836: LIST
9837: PUSH
9838: LD_INT 21
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 21
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: PPUSH
9876: LD_VAR 0 7
9880: PPUSH
9881: CALL_OW 74
9885: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9886: LD_VAR 0 7
9890: PPUSH
9891: LD_VAR 0 15
9895: PPUSH
9896: CALL_OW 296
9900: PUSH
9901: LD_INT 8
9903: PLUS
9904: PUSH
9905: LD_VAR 0 7
9909: PPUSH
9910: LD_VAR 0 16
9914: PPUSH
9915: CALL_OW 296
9919: LESS
9920: IFFALSE 9938
// begin ComAttackUnit ( i , target1 ) ;
9922: LD_VAR 0 7
9926: PPUSH
9927: LD_VAR 0 15
9931: PPUSH
9932: CALL_OW 115
// end else
9936: GO 9952
// begin ComAttackUnit ( i , target2 ) ;
9938: LD_VAR 0 7
9942: PPUSH
9943: LD_VAR 0 16
9947: PPUSH
9948: CALL_OW 115
// end ; end ;
9952: GO 9777
9954: POP
9955: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9956: LD_ADDR_VAR 0 7
9960: PUSH
9961: LD_VAR 0 2
9965: PPUSH
9966: LD_INT 22
9968: PUSH
9969: LD_VAR 0 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 25
9980: PUSH
9981: LD_INT 3
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PPUSH
9992: CALL_OW 70
9996: NOT
9997: PUSH
9998: FOR_IN
9999: IFFALSE 10022
// ComMoveXY ( i , repX , repY ) ;
10001: LD_VAR 0 7
10005: PPUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_VAR 0 4
10015: PPUSH
10016: CALL_OW 111
10020: GO 9998
10022: POP
10023: POP
// end ;
10024: LD_VAR 0 6
10028: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
10029: LD_INT 0
10031: PPUSH
10032: PPUSH
10033: PPUSH
10034: PPUSH
10035: PPUSH
10036: PPUSH
10037: PPUSH
10038: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
10039: LD_INT 22
10041: PUSH
10042: LD_VAR 0 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 21
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PPUSH
10065: CALL_OW 69
10069: PUSH
10070: LD_VAR 0 3
10074: LESSEQUAL
10075: IFFALSE 10142
// for i = 1 to vehCount do
10077: LD_ADDR_VAR 0 10
10081: PUSH
10082: DOUBLE
10083: LD_INT 1
10085: DEC
10086: ST_TO_ADDR
10087: LD_VAR 0 3
10091: PUSH
10092: FOR_TO
10093: IFFALSE 10140
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
10095: LD_VAR 0 2
10099: PPUSH
10100: LD_VAR 0 8
10104: PPUSH
10105: LD_VAR 0 6
10109: PPUSH
10110: LD_VAR 0 7
10114: PPUSH
10115: LD_VAR 0 5
10119: PUSH
10120: LD_INT 1
10122: PPUSH
10123: LD_VAR 0 5
10127: PPUSH
10128: CALL_OW 12
10132: ARRAY
10133: PPUSH
10134: CALL_OW 185
10138: GO 10092
10140: POP
10141: POP
// repeat wait ( 0 0$1 ) ;
10142: LD_INT 35
10144: PPUSH
10145: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
10149: LD_INT 22
10151: PUSH
10152: LD_VAR 0 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 21
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 24
10173: PUSH
10174: LD_INT 250
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: PPUSH
10186: CALL_OW 69
10190: PUSH
10191: LD_VAR 0 3
10195: GREATEREQUAL
10196: IFFALSE 10142
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
10198: LD_INT 22
10200: PUSH
10201: LD_VAR 0 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 21
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 24
10222: PUSH
10223: LD_INT 250
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: PPUSH
10235: CALL_OW 69
10239: PUSH
10240: LD_VAR 0 3
10244: GREATEREQUAL
10245: IFFALSE 10588
// begin repeat begin wait ( 0 0$1 ) ;
10247: LD_INT 35
10249: PPUSH
10250: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
10254: LD_INT 22
10256: PUSH
10257: LD_VAR 0 1
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 21
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 24
10278: PUSH
10279: LD_INT 651
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: PUSH
10296: LD_INT 0
10298: GREATER
10299: IFFALSE 10527
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
10301: LD_ADDR_VAR 0 10
10305: PUSH
10306: LD_INT 22
10308: PUSH
10309: LD_VAR 0 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 2
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 24
10330: PUSH
10331: LD_INT 651
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 69
10347: PUSH
10348: FOR_IN
10349: IFFALSE 10525
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10351: LD_ADDR_VAR 0 15
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_VAR 0 4
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 69
10372: PPUSH
10373: LD_VAR 0 10
10377: PPUSH
10378: CALL_OW 74
10382: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10383: LD_ADDR_VAR 0 16
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_VAR 0 4
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 2
10402: PUSH
10403: LD_INT 59
10405: PUSH
10406: EMPTY
10407: LIST
10408: PUSH
10409: LD_INT 21
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 21
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: PPUSH
10447: LD_VAR 0 10
10451: PPUSH
10452: CALL_OW 74
10456: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10457: LD_VAR 0 10
10461: PPUSH
10462: LD_VAR 0 15
10466: PPUSH
10467: CALL_OW 296
10471: PUSH
10472: LD_INT 8
10474: PLUS
10475: PUSH
10476: LD_VAR 0 10
10480: PPUSH
10481: LD_VAR 0 16
10485: PPUSH
10486: CALL_OW 296
10490: LESS
10491: IFFALSE 10509
// begin ComAttackUnit ( i , target1 ) ;
10493: LD_VAR 0 10
10497: PPUSH
10498: LD_VAR 0 15
10502: PPUSH
10503: CALL_OW 115
// end else
10507: GO 10523
// begin ComAttackUnit ( i , target2 ) ;
10509: LD_VAR 0 10
10513: PPUSH
10514: LD_VAR 0 16
10518: PPUSH
10519: CALL_OW 115
// end ; end ;
10523: GO 10348
10525: POP
10526: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
10527: LD_INT 22
10529: PUSH
10530: LD_VAR 0 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PPUSH
10553: CALL_OW 69
10557: PUSH
10558: LD_INT 0
10560: EQUAL
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 4
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PUSH
10582: LD_INT 0
10584: EQUAL
10585: OR
10586: IFFALSE 10247
// end ; end ;
10588: LD_VAR 0 9
10592: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10593: LD_INT 0
10595: PPUSH
10596: PPUSH
10597: PPUSH
10598: PPUSH
10599: PPUSH
10600: PPUSH
10601: PPUSH
10602: PPUSH
10603: PPUSH
10604: PPUSH
10605: PPUSH
// for i = 1 to medicCount do
10606: LD_ADDR_VAR 0 14
10610: PUSH
10611: DOUBLE
10612: LD_INT 1
10614: DEC
10615: ST_TO_ADDR
10616: LD_VAR 0 7
10620: PUSH
10621: FOR_TO
10622: IFFALSE 10704
// begin uc_side = side ;
10624: LD_ADDR_OWVAR 20
10628: PUSH
10629: LD_VAR 0 1
10633: ST_TO_ADDR
// uc_nation = nation ;
10634: LD_ADDR_OWVAR 21
10638: PUSH
10639: LD_VAR 0 2
10643: ST_TO_ADDR
// hc_name =  ;
10644: LD_ADDR_OWVAR 26
10648: PUSH
10649: LD_STRING 
10651: ST_TO_ADDR
// hc_gallery =  ;
10652: LD_ADDR_OWVAR 33
10656: PUSH
10657: LD_STRING 
10659: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10660: LD_INT 0
10662: PPUSH
10663: LD_INT 4
10665: PPUSH
10666: LD_VAR 0 8
10670: PPUSH
10671: CALL_OW 380
// un = CreateHuman ;
10675: LD_ADDR_VAR 0 16
10679: PUSH
10680: CALL_OW 44
10684: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10685: LD_VAR 0 16
10689: PPUSH
10690: LD_VAR 0 9
10694: PPUSH
10695: LD_INT 0
10697: PPUSH
10698: CALL_OW 49
// end ;
10702: GO 10621
10704: POP
10705: POP
// for i = 1 to soldierCount do
10706: LD_ADDR_VAR 0 14
10710: PUSH
10711: DOUBLE
10712: LD_INT 1
10714: DEC
10715: ST_TO_ADDR
10716: LD_VAR 0 3
10720: PUSH
10721: FOR_TO
10722: IFFALSE 10804
// begin uc_side = side ;
10724: LD_ADDR_OWVAR 20
10728: PUSH
10729: LD_VAR 0 1
10733: ST_TO_ADDR
// uc_nation = nation ;
10734: LD_ADDR_OWVAR 21
10738: PUSH
10739: LD_VAR 0 2
10743: ST_TO_ADDR
// hc_name =  ;
10744: LD_ADDR_OWVAR 26
10748: PUSH
10749: LD_STRING 
10751: ST_TO_ADDR
// hc_gallery =  ;
10752: LD_ADDR_OWVAR 33
10756: PUSH
10757: LD_STRING 
10759: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10760: LD_INT 0
10762: PPUSH
10763: LD_INT 1
10765: PPUSH
10766: LD_VAR 0 8
10770: PPUSH
10771: CALL_OW 380
// un = CreateHuman ;
10775: LD_ADDR_VAR 0 16
10779: PUSH
10780: CALL_OW 44
10784: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10785: LD_VAR 0 16
10789: PPUSH
10790: LD_VAR 0 9
10794: PPUSH
10795: LD_INT 0
10797: PPUSH
10798: CALL_OW 49
// end ;
10802: GO 10721
10804: POP
10805: POP
// for i = 1 to sniperCount do
10806: LD_ADDR_VAR 0 14
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_VAR 0 4
10820: PUSH
10821: FOR_TO
10822: IFFALSE 10904
// begin uc_side = side ;
10824: LD_ADDR_OWVAR 20
10828: PUSH
10829: LD_VAR 0 1
10833: ST_TO_ADDR
// uc_nation = nation ;
10834: LD_ADDR_OWVAR 21
10838: PUSH
10839: LD_VAR 0 2
10843: ST_TO_ADDR
// hc_name =  ;
10844: LD_ADDR_OWVAR 26
10848: PUSH
10849: LD_STRING 
10851: ST_TO_ADDR
// hc_gallery =  ;
10852: LD_ADDR_OWVAR 33
10856: PUSH
10857: LD_STRING 
10859: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10860: LD_INT 0
10862: PPUSH
10863: LD_INT 5
10865: PPUSH
10866: LD_VAR 0 8
10870: PPUSH
10871: CALL_OW 380
// un = CreateHuman ;
10875: LD_ADDR_VAR 0 16
10879: PUSH
10880: CALL_OW 44
10884: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10885: LD_VAR 0 16
10889: PPUSH
10890: LD_VAR 0 9
10894: PPUSH
10895: LD_INT 0
10897: PPUSH
10898: CALL_OW 49
// end ;
10902: GO 10821
10904: POP
10905: POP
// for i = 1 to bazookCount do
10906: LD_ADDR_VAR 0 14
10910: PUSH
10911: DOUBLE
10912: LD_INT 1
10914: DEC
10915: ST_TO_ADDR
10916: LD_VAR 0 5
10920: PUSH
10921: FOR_TO
10922: IFFALSE 11004
// begin uc_side = side ;
10924: LD_ADDR_OWVAR 20
10928: PUSH
10929: LD_VAR 0 1
10933: ST_TO_ADDR
// uc_nation = nation ;
10934: LD_ADDR_OWVAR 21
10938: PUSH
10939: LD_VAR 0 2
10943: ST_TO_ADDR
// hc_name =  ;
10944: LD_ADDR_OWVAR 26
10948: PUSH
10949: LD_STRING 
10951: ST_TO_ADDR
// hc_gallery =  ;
10952: LD_ADDR_OWVAR 33
10956: PUSH
10957: LD_STRING 
10959: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10960: LD_INT 0
10962: PPUSH
10963: LD_INT 9
10965: PPUSH
10966: LD_VAR 0 8
10970: PPUSH
10971: CALL_OW 380
// un = CreateHuman ;
10975: LD_ADDR_VAR 0 16
10979: PUSH
10980: CALL_OW 44
10984: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10985: LD_VAR 0 16
10989: PPUSH
10990: LD_VAR 0 9
10994: PPUSH
10995: LD_INT 0
10997: PPUSH
10998: CALL_OW 49
// end ;
11002: GO 10921
11004: POP
11005: POP
// for i = 1 to mortalCount do
11006: LD_ADDR_VAR 0 14
11010: PUSH
11011: DOUBLE
11012: LD_INT 1
11014: DEC
11015: ST_TO_ADDR
11016: LD_VAR 0 6
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11104
// begin uc_side = side ;
11024: LD_ADDR_OWVAR 20
11028: PUSH
11029: LD_VAR 0 1
11033: ST_TO_ADDR
// uc_nation = nation ;
11034: LD_ADDR_OWVAR 21
11038: PUSH
11039: LD_VAR 0 2
11043: ST_TO_ADDR
// hc_name =  ;
11044: LD_ADDR_OWVAR 26
11048: PUSH
11049: LD_STRING 
11051: ST_TO_ADDR
// hc_gallery =  ;
11052: LD_ADDR_OWVAR 33
11056: PUSH
11057: LD_STRING 
11059: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11060: LD_INT 0
11062: PPUSH
11063: LD_INT 8
11065: PPUSH
11066: LD_VAR 0 8
11070: PPUSH
11071: CALL_OW 380
// un = CreateHuman ;
11075: LD_ADDR_VAR 0 16
11079: PUSH
11080: CALL_OW 44
11084: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11085: LD_VAR 0 16
11089: PPUSH
11090: LD_VAR 0 9
11094: PPUSH
11095: LD_INT 0
11097: PPUSH
11098: CALL_OW 49
// end ;
11102: GO 11021
11104: POP
11105: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11106: LD_ADDR_VAR 0 19
11110: PUSH
11111: LD_INT 22
11113: PUSH
11114: LD_VAR 0 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 2
11125: PUSH
11126: LD_INT 25
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 5
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 25
11148: PUSH
11149: LD_INT 8
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 25
11158: PUSH
11159: LD_INT 9
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PPUSH
11177: CALL_OW 69
11181: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11182: LD_ADDR_VAR 0 18
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_VAR 0 1
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 25
11201: PUSH
11202: LD_INT 4
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: ST_TO_ADDR
// for i in medic_list do
11218: LD_ADDR_VAR 0 14
11222: PUSH
11223: LD_VAR 0 18
11227: PUSH
11228: FOR_IN
11229: IFFALSE 11247
// ComMoveToArea ( i , healArea ) ;
11231: LD_VAR 0 14
11235: PPUSH
11236: LD_VAR 0 10
11240: PPUSH
11241: CALL_OW 113
11245: GO 11228
11247: POP
11248: POP
// if strategy = 1 then
11249: LD_VAR 0 12
11253: PUSH
11254: LD_INT 1
11256: EQUAL
11257: IFFALSE 11803
// begin repeat wait ( 0 0$3 ) ;
11259: LD_INT 105
11261: PPUSH
11262: CALL_OW 67
// for i in soldiersOK_list do
11266: LD_ADDR_VAR 0 14
11270: PUSH
11271: LD_VAR 0 19
11275: PUSH
11276: FOR_IN
11277: IFFALSE 11341
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11279: LD_VAR 0 14
11283: PPUSH
11284: LD_INT 91
11286: PPUSH
11287: LD_INT 63
11289: PPUSH
11290: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
11294: LD_VAR 0 14
11298: PPUSH
11299: LD_INT 101
11301: PPUSH
11302: LD_INT 53
11304: PPUSH
11305: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
11309: LD_VAR 0 14
11313: PPUSH
11314: LD_INT 75
11316: PPUSH
11317: LD_INT 23
11319: PPUSH
11320: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
11324: LD_VAR 0 14
11328: PPUSH
11329: LD_INT 78
11331: PPUSH
11332: LD_INT 8
11334: PPUSH
11335: CALL_OW 174
// end ;
11339: GO 11276
11341: POP
11342: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
11343: LD_INT 12
11345: PPUSH
11346: LD_INT 22
11348: PUSH
11349: LD_VAR 0 1
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PPUSH
11358: CALL_OW 70
11362: PUSH
11363: LD_INT 2
11365: GREATER
11366: IFFALSE 11259
// repeat wait ( 0 0$1 ) ;
11368: LD_INT 35
11370: PPUSH
11371: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11375: LD_ADDR_VAR 0 17
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_VAR 0 1
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 1
11394: PUSH
11395: LD_INT 3
11397: PUSH
11398: LD_INT 24
11400: PUSH
11401: LD_INT 550
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 24
11414: PUSH
11415: LD_INT 250
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PPUSH
11431: CALL_OW 69
11435: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11436: LD_ADDR_VAR 0 19
11440: PUSH
11441: LD_INT 22
11443: PUSH
11444: LD_VAR 0 1
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: LD_INT 25
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 25
11468: PUSH
11469: LD_INT 5
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 25
11478: PUSH
11479: LD_INT 8
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 25
11488: PUSH
11489: LD_INT 9
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 24
11505: PUSH
11506: LD_INT 1000
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: PPUSH
11518: CALL_OW 69
11522: ST_TO_ADDR
// if medicCount > 0 then
11523: LD_VAR 0 7
11527: PUSH
11528: LD_INT 0
11530: GREATER
11531: IFFALSE 11605
// begin if damageUnit_list > 0 then
11533: LD_VAR 0 17
11537: PUSH
11538: LD_INT 0
11540: GREATER
11541: IFFALSE 11605
// begin for i in damageUnit_list do
11543: LD_ADDR_VAR 0 14
11547: PUSH
11548: LD_VAR 0 17
11552: PUSH
11553: FOR_IN
11554: IFFALSE 11603
// begin ComMoveToArea ( i , healArea ) ;
11556: LD_VAR 0 14
11560: PPUSH
11561: LD_VAR 0 10
11565: PPUSH
11566: CALL_OW 113
// for j in medic_list do
11570: LD_ADDR_VAR 0 15
11574: PUSH
11575: LD_VAR 0 18
11579: PUSH
11580: FOR_IN
11581: IFFALSE 11599
// AddComHeal ( j , i ) ;
11583: LD_VAR 0 15
11587: PPUSH
11588: LD_VAR 0 14
11592: PPUSH
11593: CALL_OW 188
11597: GO 11580
11599: POP
11600: POP
// end ;
11601: GO 11553
11603: POP
11604: POP
// end ; end ; for i in soldiersOK_list do
11605: LD_ADDR_VAR 0 14
11609: PUSH
11610: LD_VAR 0 19
11614: PUSH
11615: FOR_IN
11616: IFFALSE 11792
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11618: LD_ADDR_VAR 0 22
11622: PUSH
11623: LD_INT 22
11625: PUSH
11626: LD_VAR 0 11
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL_OW 69
11639: PPUSH
11640: LD_VAR 0 14
11644: PPUSH
11645: CALL_OW 74
11649: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11650: LD_ADDR_VAR 0 23
11654: PUSH
11655: LD_INT 22
11657: PUSH
11658: LD_VAR 0 11
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 2
11669: PUSH
11670: LD_INT 59
11672: PUSH
11673: EMPTY
11674: LIST
11675: PUSH
11676: LD_INT 21
11678: PUSH
11679: LD_INT 1
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 2
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: PPUSH
11709: CALL_OW 69
11713: PPUSH
11714: LD_VAR 0 14
11718: PPUSH
11719: CALL_OW 74
11723: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11724: LD_VAR 0 14
11728: PPUSH
11729: LD_VAR 0 22
11733: PPUSH
11734: CALL_OW 296
11738: PUSH
11739: LD_INT 6
11741: PLUS
11742: PUSH
11743: LD_VAR 0 14
11747: PPUSH
11748: LD_VAR 0 23
11752: PPUSH
11753: CALL_OW 296
11757: LESS
11758: IFFALSE 11776
// begin ComAttackUnit ( i , target1 ) ;
11760: LD_VAR 0 14
11764: PPUSH
11765: LD_VAR 0 22
11769: PPUSH
11770: CALL_OW 115
// end else
11774: GO 11790
// begin ComAttackUnit ( i , target2 ) ;
11776: LD_VAR 0 14
11780: PPUSH
11781: LD_VAR 0 23
11785: PPUSH
11786: CALL_OW 115
// end ; end ;
11790: GO 11615
11792: POP
11793: POP
// until soldiersOK_list = [ ] ;
11794: LD_VAR 0 19
11798: PUSH
11799: EMPTY
11800: EQUAL
11801: IFFALSE 11368
// end ; if strategy = 2 then
11803: LD_VAR 0 12
11807: PUSH
11808: LD_INT 2
11810: EQUAL
11811: IFFALSE 12327
// begin repeat wait ( 0 0$1 ) ;
11813: LD_INT 35
11815: PPUSH
11816: CALL_OW 67
// for i in soldiersOK_list do
11820: LD_ADDR_VAR 0 14
11824: PUSH
11825: LD_VAR 0 19
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11865
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11833: LD_VAR 0 14
11837: PPUSH
11838: LD_INT 91
11840: PPUSH
11841: LD_INT 63
11843: PPUSH
11844: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11848: LD_VAR 0 14
11852: PPUSH
11853: LD_INT 75
11855: PPUSH
11856: LD_INT 33
11858: PPUSH
11859: CALL_OW 174
// end ;
11863: GO 11830
11865: POP
11866: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11867: LD_INT 13
11869: PPUSH
11870: LD_INT 22
11872: PUSH
11873: LD_VAR 0 1
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 70
11886: PUSH
11887: LD_INT 2
11889: GREATER
11890: IFFALSE 11813
// repeat wait ( 0 0$3 ) ;
11892: LD_INT 105
11894: PPUSH
11895: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11899: LD_ADDR_VAR 0 17
11903: PUSH
11904: LD_INT 22
11906: PUSH
11907: LD_VAR 0 1
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 1
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: LD_INT 24
11924: PUSH
11925: LD_INT 550
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 24
11938: PUSH
11939: LD_INT 250
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11960: LD_ADDR_VAR 0 19
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_VAR 0 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 1
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 25
11992: PUSH
11993: LD_INT 5
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 25
12002: PUSH
12003: LD_INT 8
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 25
12012: PUSH
12013: LD_INT 9
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 1000
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: ST_TO_ADDR
// if medicCount > 0 then
12047: LD_VAR 0 7
12051: PUSH
12052: LD_INT 0
12054: GREATER
12055: IFFALSE 12129
// begin if damageUnit_list > 0 then
12057: LD_VAR 0 17
12061: PUSH
12062: LD_INT 0
12064: GREATER
12065: IFFALSE 12129
// begin for i in damageUnit_list do
12067: LD_ADDR_VAR 0 14
12071: PUSH
12072: LD_VAR 0 17
12076: PUSH
12077: FOR_IN
12078: IFFALSE 12127
// begin ComMoveToArea ( i , healArea ) ;
12080: LD_VAR 0 14
12084: PPUSH
12085: LD_VAR 0 10
12089: PPUSH
12090: CALL_OW 113
// for j in medic_list do
12094: LD_ADDR_VAR 0 15
12098: PUSH
12099: LD_VAR 0 18
12103: PUSH
12104: FOR_IN
12105: IFFALSE 12123
// AddComHeal ( j , i ) ;
12107: LD_VAR 0 15
12111: PPUSH
12112: LD_VAR 0 14
12116: PPUSH
12117: CALL_OW 188
12121: GO 12104
12123: POP
12124: POP
// end ;
12125: GO 12077
12127: POP
12128: POP
// end ; end ; for i in soldiersOK_list do
12129: LD_ADDR_VAR 0 14
12133: PUSH
12134: LD_VAR 0 19
12138: PUSH
12139: FOR_IN
12140: IFFALSE 12316
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12142: LD_ADDR_VAR 0 22
12146: PUSH
12147: LD_INT 22
12149: PUSH
12150: LD_VAR 0 11
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 69
12163: PPUSH
12164: LD_VAR 0 14
12168: PPUSH
12169: CALL_OW 74
12173: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12174: LD_ADDR_VAR 0 23
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_VAR 0 11
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 59
12196: PUSH
12197: EMPTY
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: PPUSH
12233: CALL_OW 69
12237: PPUSH
12238: LD_VAR 0 14
12242: PPUSH
12243: CALL_OW 74
12247: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12248: LD_VAR 0 14
12252: PPUSH
12253: LD_VAR 0 22
12257: PPUSH
12258: CALL_OW 296
12262: PUSH
12263: LD_INT 6
12265: PLUS
12266: PUSH
12267: LD_VAR 0 14
12271: PPUSH
12272: LD_VAR 0 23
12276: PPUSH
12277: CALL_OW 296
12281: LESS
12282: IFFALSE 12300
// begin ComAttackUnit ( i , target1 ) ;
12284: LD_VAR 0 14
12288: PPUSH
12289: LD_VAR 0 22
12293: PPUSH
12294: CALL_OW 115
// end else
12298: GO 12314
// begin ComAttackUnit ( i , target2 ) ;
12300: LD_VAR 0 14
12304: PPUSH
12305: LD_VAR 0 23
12309: PPUSH
12310: CALL_OW 115
// end ; end ;
12314: GO 12139
12316: POP
12317: POP
// until soldiersOK_list = [ ] ;
12318: LD_VAR 0 19
12322: PUSH
12323: EMPTY
12324: EQUAL
12325: IFFALSE 11892
// end ; if strategy = 3 then
12327: LD_VAR 0 12
12331: PUSH
12332: LD_INT 3
12334: EQUAL
12335: IFFALSE 12881
// begin repeat wait ( 0 0$3 ) ;
12337: LD_INT 105
12339: PPUSH
12340: CALL_OW 67
// for i in soldiersOK_list do
12344: LD_ADDR_VAR 0 14
12348: PUSH
12349: LD_VAR 0 19
12353: PUSH
12354: FOR_IN
12355: IFFALSE 12419
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12357: LD_VAR 0 14
12361: PPUSH
12362: LD_INT 63
12364: PPUSH
12365: LD_INT 71
12367: PPUSH
12368: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
12372: LD_VAR 0 14
12376: PPUSH
12377: LD_INT 35
12379: PPUSH
12380: LD_INT 44
12382: PPUSH
12383: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
12387: LD_VAR 0 14
12391: PPUSH
12392: LD_INT 23
12394: PPUSH
12395: LD_INT 18
12397: PPUSH
12398: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
12402: LD_VAR 0 14
12406: PPUSH
12407: LD_INT 26
12409: PPUSH
12410: LD_INT 12
12412: PPUSH
12413: CALL_OW 174
// end ;
12417: GO 12354
12419: POP
12420: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
12421: LD_INT 14
12423: PPUSH
12424: LD_INT 22
12426: PUSH
12427: LD_VAR 0 1
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PPUSH
12436: CALL_OW 70
12440: PUSH
12441: LD_INT 2
12443: GREATER
12444: IFFALSE 12337
// repeat wait ( 0 0$1 ) ;
12446: LD_INT 35
12448: PPUSH
12449: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12453: LD_ADDR_VAR 0 17
12457: PUSH
12458: LD_INT 22
12460: PUSH
12461: LD_VAR 0 1
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 1
12472: PUSH
12473: LD_INT 3
12475: PUSH
12476: LD_INT 24
12478: PUSH
12479: LD_INT 550
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 24
12492: PUSH
12493: LD_INT 250
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 69
12513: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12514: LD_ADDR_VAR 0 19
12518: PUSH
12519: LD_INT 22
12521: PUSH
12522: LD_VAR 0 1
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: LD_INT 25
12536: PUSH
12537: LD_INT 1
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 25
12546: PUSH
12547: LD_INT 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 25
12556: PUSH
12557: LD_INT 8
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 25
12566: PUSH
12567: LD_INT 9
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 24
12583: PUSH
12584: LD_INT 1000
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PPUSH
12596: CALL_OW 69
12600: ST_TO_ADDR
// if medicCount > 0 then
12601: LD_VAR 0 7
12605: PUSH
12606: LD_INT 0
12608: GREATER
12609: IFFALSE 12683
// begin if damageUnit_list > 0 then
12611: LD_VAR 0 17
12615: PUSH
12616: LD_INT 0
12618: GREATER
12619: IFFALSE 12683
// begin for i in damageUnit_list do
12621: LD_ADDR_VAR 0 14
12625: PUSH
12626: LD_VAR 0 17
12630: PUSH
12631: FOR_IN
12632: IFFALSE 12681
// begin ComMoveToArea ( i , healArea ) ;
12634: LD_VAR 0 14
12638: PPUSH
12639: LD_VAR 0 10
12643: PPUSH
12644: CALL_OW 113
// for j in medic_list do
12648: LD_ADDR_VAR 0 15
12652: PUSH
12653: LD_VAR 0 18
12657: PUSH
12658: FOR_IN
12659: IFFALSE 12677
// AddComHeal ( j , i ) ;
12661: LD_VAR 0 15
12665: PPUSH
12666: LD_VAR 0 14
12670: PPUSH
12671: CALL_OW 188
12675: GO 12658
12677: POP
12678: POP
// end ;
12679: GO 12631
12681: POP
12682: POP
// end ; end ; for i in soldiersOK_list do
12683: LD_ADDR_VAR 0 14
12687: PUSH
12688: LD_VAR 0 19
12692: PUSH
12693: FOR_IN
12694: IFFALSE 12870
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12696: LD_ADDR_VAR 0 22
12700: PUSH
12701: LD_INT 22
12703: PUSH
12704: LD_VAR 0 11
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PPUSH
12713: CALL_OW 69
12717: PPUSH
12718: LD_VAR 0 14
12722: PPUSH
12723: CALL_OW 74
12727: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12728: LD_ADDR_VAR 0 23
12732: PUSH
12733: LD_INT 22
12735: PUSH
12736: LD_VAR 0 11
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: LD_INT 2
12747: PUSH
12748: LD_INT 59
12750: PUSH
12751: EMPTY
12752: LIST
12753: PUSH
12754: LD_INT 21
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 21
12766: PUSH
12767: LD_INT 2
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: PPUSH
12792: LD_VAR 0 14
12796: PPUSH
12797: CALL_OW 74
12801: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12802: LD_VAR 0 14
12806: PPUSH
12807: LD_VAR 0 22
12811: PPUSH
12812: CALL_OW 296
12816: PUSH
12817: LD_INT 6
12819: PLUS
12820: PUSH
12821: LD_VAR 0 14
12825: PPUSH
12826: LD_VAR 0 23
12830: PPUSH
12831: CALL_OW 296
12835: LESS
12836: IFFALSE 12854
// begin ComAttackUnit ( i , target1 ) ;
12838: LD_VAR 0 14
12842: PPUSH
12843: LD_VAR 0 22
12847: PPUSH
12848: CALL_OW 115
// end else
12852: GO 12868
// begin ComAttackUnit ( i , target2 ) ;
12854: LD_VAR 0 14
12858: PPUSH
12859: LD_VAR 0 23
12863: PPUSH
12864: CALL_OW 115
// end ; end ;
12868: GO 12693
12870: POP
12871: POP
// until soldiersOK_list = [ ] ;
12872: LD_VAR 0 19
12876: PUSH
12877: EMPTY
12878: EQUAL
12879: IFFALSE 12446
// end ; end ;
12881: LD_VAR 0 13
12885: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
12894: PPUSH
12895: PPUSH
12896: PPUSH
12897: PPUSH
12898: PPUSH
// amChassisTab = [ ] ;
12899: LD_ADDR_VAR 0 19
12903: PUSH
12904: EMPTY
12905: ST_TO_ADDR
// arChassisTab = [ ] ;
12906: LD_ADDR_VAR 0 18
12910: PUSH
12911: EMPTY
12912: ST_TO_ADDR
// ruChassisTab = [ ] ;
12913: LD_ADDR_VAR 0 17
12917: PUSH
12918: EMPTY
12919: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12920: LD_INT 35
12922: PPUSH
12923: CALL_OW 67
// if nation = 1 then
12927: LD_VAR 0 5
12931: PUSH
12932: LD_INT 1
12934: EQUAL
12935: IFFALSE 13426
// begin uc_side = side ;
12937: LD_ADDR_OWVAR 20
12941: PUSH
12942: LD_VAR 0 2
12946: ST_TO_ADDR
// uc_nation = nation ;
12947: LD_ADDR_OWVAR 21
12951: PUSH
12952: LD_VAR 0 5
12956: ST_TO_ADDR
// vc_engine = vehengine ;
12957: LD_ADDR_OWVAR 39
12961: PUSH
12962: LD_VAR 0 6
12966: ST_TO_ADDR
// vc_control = vehcontrol ;
12967: LD_ADDR_OWVAR 38
12971: PUSH
12972: LD_VAR 0 7
12976: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12977: LD_ADDR_OWVAR 40
12981: PUSH
12982: LD_VAR 0 10
12986: PUSH
12987: LD_INT 1
12989: PPUSH
12990: LD_VAR 0 10
12994: PPUSH
12995: CALL_OW 12
12999: ARRAY
13000: ST_TO_ADDR
// for j = 1 to AMWeapon do
13001: LD_ADDR_VAR 0 14
13005: PUSH
13006: DOUBLE
13007: LD_INT 1
13009: DEC
13010: ST_TO_ADDR
13011: LD_VAR 0 10
13015: PUSH
13016: FOR_TO
13017: IFFALSE 13318
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13019: LD_VAR 0 10
13023: PUSH
13024: LD_VAR 0 14
13028: ARRAY
13029: PUSH
13030: LD_INT 2
13032: EQUAL
13033: PUSH
13034: LD_VAR 0 10
13038: PUSH
13039: LD_VAR 0 14
13043: ARRAY
13044: PUSH
13045: LD_INT 3
13047: EQUAL
13048: OR
13049: IFFALSE 13102
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13051: LD_ADDR_VAR 0 19
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 3
13064: PUSH
13065: LD_INT 4
13067: PUSH
13068: LD_INT 5
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_VAR 0 19
13087: PUSH
13088: LD_INT 1
13090: PPUSH
13091: LD_VAR 0 19
13095: PPUSH
13096: CALL_OW 12
13100: ARRAY
13101: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13102: LD_VAR 0 10
13106: PUSH
13107: LD_VAR 0 14
13111: ARRAY
13112: PUSH
13113: LD_INT 4
13115: EQUAL
13116: PUSH
13117: LD_VAR 0 10
13121: PUSH
13122: LD_VAR 0 14
13126: ARRAY
13127: PUSH
13128: LD_INT 5
13130: EQUAL
13131: OR
13132: PUSH
13133: LD_VAR 0 10
13137: PUSH
13138: LD_VAR 0 14
13142: ARRAY
13143: PUSH
13144: LD_INT 9
13146: EQUAL
13147: OR
13148: PUSH
13149: LD_VAR 0 10
13153: PUSH
13154: LD_VAR 0 14
13158: ARRAY
13159: PUSH
13160: LD_INT 11
13162: EQUAL
13163: OR
13164: PUSH
13165: LD_VAR 0 10
13169: PUSH
13170: LD_VAR 0 14
13174: ARRAY
13175: PUSH
13176: LD_INT 7
13178: EQUAL
13179: OR
13180: IFFALSE 13229
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13182: LD_ADDR_VAR 0 19
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: LD_INT 4
13195: PUSH
13196: LD_INT 5
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13205: LD_ADDR_OWVAR 37
13209: PUSH
13210: LD_VAR 0 19
13214: PUSH
13215: LD_INT 1
13217: PPUSH
13218: LD_VAR 0 19
13222: PPUSH
13223: CALL_OW 12
13227: ARRAY
13228: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13229: LD_VAR 0 10
13233: PUSH
13234: LD_VAR 0 14
13238: ARRAY
13239: PUSH
13240: LD_INT 8
13242: EQUAL
13243: PUSH
13244: LD_VAR 0 10
13248: PUSH
13249: LD_VAR 0 14
13253: ARRAY
13254: PUSH
13255: LD_INT 6
13257: EQUAL
13258: OR
13259: PUSH
13260: LD_VAR 0 10
13264: PUSH
13265: LD_VAR 0 14
13269: ARRAY
13270: PUSH
13271: LD_INT 10
13273: EQUAL
13274: OR
13275: IFFALSE 13316
// begin amChassisTab = [ 4 , 5 ] ;
13277: LD_ADDR_VAR 0 19
13281: PUSH
13282: LD_INT 4
13284: PUSH
13285: LD_INT 5
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13292: LD_ADDR_OWVAR 37
13296: PUSH
13297: LD_VAR 0 19
13301: PUSH
13302: LD_INT 1
13304: PPUSH
13305: LD_VAR 0 19
13309: PPUSH
13310: CALL_OW 12
13314: ARRAY
13315: ST_TO_ADDR
// end ; end ;
13316: GO 13016
13318: POP
13319: POP
// veh = CreateVehicle ;
13320: LD_ADDR_VAR 0 16
13324: PUSH
13325: CALL_OW 45
13329: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13330: LD_VAR 0 16
13334: PPUSH
13335: LD_VAR 0 1
13339: PPUSH
13340: LD_INT 0
13342: PPUSH
13343: CALL_OW 49
// if vehControl = 1 then
13347: LD_VAR 0 7
13351: PUSH
13352: LD_INT 1
13354: EQUAL
13355: IFFALSE 13412
// begin hc_gallery =  ;
13357: LD_ADDR_OWVAR 33
13361: PUSH
13362: LD_STRING 
13364: ST_TO_ADDR
// hc_name =  ;
13365: LD_ADDR_OWVAR 26
13369: PUSH
13370: LD_STRING 
13372: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13373: LD_INT 0
13375: PPUSH
13376: LD_INT 3
13378: PPUSH
13379: LD_VAR 0 4
13383: PPUSH
13384: CALL_OW 380
// un = CreateHuman ;
13388: LD_ADDR_VAR 0 15
13392: PUSH
13393: CALL_OW 44
13397: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13398: LD_VAR 0 15
13402: PPUSH
13403: LD_VAR 0 16
13407: PPUSH
13408: CALL_OW 52
// end ; i = i + 1 ;
13412: LD_ADDR_VAR 0 13
13416: PUSH
13417: LD_VAR 0 13
13421: PUSH
13422: LD_INT 1
13424: PLUS
13425: ST_TO_ADDR
// end ; if nation = 2 then
13426: LD_VAR 0 5
13430: PUSH
13431: LD_INT 2
13433: EQUAL
13434: IFFALSE 13858
// begin uc_side = side ;
13436: LD_ADDR_OWVAR 20
13440: PUSH
13441: LD_VAR 0 2
13445: ST_TO_ADDR
// uc_nation = nation ;
13446: LD_ADDR_OWVAR 21
13450: PUSH
13451: LD_VAR 0 5
13455: ST_TO_ADDR
// vc_engine = vehengine ;
13456: LD_ADDR_OWVAR 39
13460: PUSH
13461: LD_VAR 0 6
13465: ST_TO_ADDR
// vc_control = vehcontrol ;
13466: LD_ADDR_OWVAR 38
13470: PUSH
13471: LD_VAR 0 7
13475: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13476: LD_ADDR_OWVAR 40
13480: PUSH
13481: LD_VAR 0 9
13485: PUSH
13486: LD_INT 1
13488: PPUSH
13489: LD_VAR 0 9
13493: PPUSH
13494: CALL_OW 12
13498: ARRAY
13499: ST_TO_ADDR
// for j = 1 to ARWeapons do
13500: LD_ADDR_VAR 0 14
13504: PUSH
13505: DOUBLE
13506: LD_INT 1
13508: DEC
13509: ST_TO_ADDR
13510: LD_VAR 0 9
13514: PUSH
13515: FOR_TO
13516: IFFALSE 13750
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13518: LD_VAR 0 9
13522: PUSH
13523: LD_VAR 0 14
13527: ARRAY
13528: PUSH
13529: LD_INT 24
13531: EQUAL
13532: PUSH
13533: LD_VAR 0 9
13537: PUSH
13538: LD_VAR 0 14
13542: ARRAY
13543: PUSH
13544: LD_INT 22
13546: EQUAL
13547: OR
13548: PUSH
13549: LD_VAR 0 9
13553: PUSH
13554: LD_VAR 0 14
13558: ARRAY
13559: PUSH
13560: LD_INT 23
13562: EQUAL
13563: OR
13564: PUSH
13565: LD_VAR 0 9
13569: PUSH
13570: LD_VAR 0 14
13574: ARRAY
13575: PUSH
13576: LD_INT 30
13578: EQUAL
13579: OR
13580: IFFALSE 13629
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13582: LD_ADDR_VAR 0 18
13586: PUSH
13587: LD_INT 11
13589: PUSH
13590: LD_INT 12
13592: PUSH
13593: LD_INT 13
13595: PUSH
13596: LD_INT 14
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13605: LD_ADDR_OWVAR 37
13609: PUSH
13610: LD_VAR 0 18
13614: PUSH
13615: LD_INT 1
13617: PPUSH
13618: LD_VAR 0 18
13622: PPUSH
13623: CALL_OW 12
13627: ARRAY
13628: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13629: LD_VAR 0 9
13633: PUSH
13634: LD_VAR 0 14
13638: ARRAY
13639: PUSH
13640: LD_INT 29
13642: EQUAL
13643: PUSH
13644: LD_VAR 0 9
13648: PUSH
13649: LD_VAR 0 14
13653: ARRAY
13654: PUSH
13655: LD_INT 28
13657: EQUAL
13658: OR
13659: PUSH
13660: LD_VAR 0 9
13664: PUSH
13665: LD_VAR 0 14
13669: ARRAY
13670: PUSH
13671: LD_INT 27
13673: EQUAL
13674: OR
13675: PUSH
13676: LD_VAR 0 9
13680: PUSH
13681: LD_VAR 0 14
13685: ARRAY
13686: PUSH
13687: LD_INT 26
13689: EQUAL
13690: OR
13691: PUSH
13692: LD_VAR 0 9
13696: PUSH
13697: LD_VAR 0 14
13701: ARRAY
13702: PUSH
13703: LD_INT 25
13705: EQUAL
13706: OR
13707: IFFALSE 13748
// begin arChassisTab = [ 13 , 14 ] ;
13709: LD_ADDR_VAR 0 18
13713: PUSH
13714: LD_INT 13
13716: PUSH
13717: LD_INT 14
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13724: LD_ADDR_OWVAR 37
13728: PUSH
13729: LD_VAR 0 18
13733: PUSH
13734: LD_INT 1
13736: PPUSH
13737: LD_VAR 0 18
13741: PPUSH
13742: CALL_OW 12
13746: ARRAY
13747: ST_TO_ADDR
// end ; end ;
13748: GO 13515
13750: POP
13751: POP
// veh = CreateVehicle ;
13752: LD_ADDR_VAR 0 16
13756: PUSH
13757: CALL_OW 45
13761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13762: LD_VAR 0 16
13766: PPUSH
13767: LD_VAR 0 1
13771: PPUSH
13772: LD_INT 0
13774: PPUSH
13775: CALL_OW 49
// if vehcontrol = 1 then
13779: LD_VAR 0 7
13783: PUSH
13784: LD_INT 1
13786: EQUAL
13787: IFFALSE 13844
// begin hc_gallery =  ;
13789: LD_ADDR_OWVAR 33
13793: PUSH
13794: LD_STRING 
13796: ST_TO_ADDR
// hc_name =  ;
13797: LD_ADDR_OWVAR 26
13801: PUSH
13802: LD_STRING 
13804: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13805: LD_INT 0
13807: PPUSH
13808: LD_INT 3
13810: PPUSH
13811: LD_VAR 0 4
13815: PPUSH
13816: CALL_OW 380
// un = CreateHuman ;
13820: LD_ADDR_VAR 0 15
13824: PUSH
13825: CALL_OW 44
13829: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13830: LD_VAR 0 15
13834: PPUSH
13835: LD_VAR 0 16
13839: PPUSH
13840: CALL_OW 52
// end ; i = i + 1 ;
13844: LD_ADDR_VAR 0 13
13848: PUSH
13849: LD_VAR 0 13
13853: PUSH
13854: LD_INT 1
13856: PLUS
13857: ST_TO_ADDR
// end ; if nation = 3 then
13858: LD_VAR 0 5
13862: PUSH
13863: LD_INT 3
13865: EQUAL
13866: IFFALSE 14258
// begin uc_side = side ;
13868: LD_ADDR_OWVAR 20
13872: PUSH
13873: LD_VAR 0 2
13877: ST_TO_ADDR
// uc_nation = nation ;
13878: LD_ADDR_OWVAR 21
13882: PUSH
13883: LD_VAR 0 5
13887: ST_TO_ADDR
// vc_engine = vehengine ;
13888: LD_ADDR_OWVAR 39
13892: PUSH
13893: LD_VAR 0 6
13897: ST_TO_ADDR
// vc_control = vehcontrol ;
13898: LD_ADDR_OWVAR 38
13902: PUSH
13903: LD_VAR 0 7
13907: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13908: LD_ADDR_OWVAR 40
13912: PUSH
13913: LD_VAR 0 8
13917: PUSH
13918: LD_INT 1
13920: PPUSH
13921: LD_VAR 0 8
13925: PPUSH
13926: CALL_OW 12
13930: ARRAY
13931: ST_TO_ADDR
// for j = 1 to RuWeapons do
13932: LD_ADDR_VAR 0 14
13936: PUSH
13937: DOUBLE
13938: LD_INT 1
13940: DEC
13941: ST_TO_ADDR
13942: LD_VAR 0 8
13946: PUSH
13947: FOR_TO
13948: IFFALSE 14150
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13950: LD_VAR 0 8
13954: PUSH
13955: LD_VAR 0 14
13959: ARRAY
13960: PUSH
13961: LD_INT 42
13963: EQUAL
13964: PUSH
13965: LD_VAR 0 8
13969: PUSH
13970: LD_VAR 0 14
13974: ARRAY
13975: PUSH
13976: LD_INT 43
13978: EQUAL
13979: OR
13980: PUSH
13981: LD_VAR 0 8
13985: PUSH
13986: LD_VAR 0 14
13990: ARRAY
13991: PUSH
13992: LD_INT 44
13994: EQUAL
13995: OR
13996: PUSH
13997: LD_VAR 0 8
14001: PUSH
14002: LD_VAR 0 14
14006: ARRAY
14007: PUSH
14008: LD_INT 45
14010: EQUAL
14011: OR
14012: PUSH
14013: LD_VAR 0 8
14017: PUSH
14018: LD_VAR 0 14
14022: ARRAY
14023: PUSH
14024: LD_INT 49
14026: EQUAL
14027: OR
14028: IFFALSE 14077
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14030: LD_ADDR_VAR 0 17
14034: PUSH
14035: LD_INT 21
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_INT 23
14043: PUSH
14044: LD_INT 24
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14053: LD_ADDR_OWVAR 37
14057: PUSH
14058: LD_VAR 0 17
14062: PUSH
14063: LD_INT 1
14065: PPUSH
14066: LD_VAR 0 17
14070: PPUSH
14071: CALL_OW 12
14075: ARRAY
14076: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14077: LD_VAR 0 8
14081: PUSH
14082: LD_VAR 0 14
14086: ARRAY
14087: PUSH
14088: LD_INT 46
14090: EQUAL
14091: PUSH
14092: LD_VAR 0 8
14096: PUSH
14097: LD_VAR 0 14
14101: ARRAY
14102: PUSH
14103: LD_INT 47
14105: EQUAL
14106: OR
14107: IFFALSE 14148
// begin ruChassisTab = [ 23 , 24 ] ;
14109: LD_ADDR_VAR 0 17
14113: PUSH
14114: LD_INT 23
14116: PUSH
14117: LD_INT 24
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14124: LD_ADDR_OWVAR 37
14128: PUSH
14129: LD_VAR 0 17
14133: PUSH
14134: LD_INT 1
14136: PPUSH
14137: LD_VAR 0 17
14141: PPUSH
14142: CALL_OW 12
14146: ARRAY
14147: ST_TO_ADDR
// end ; end ;
14148: GO 13947
14150: POP
14151: POP
// veh = CreateVehicle ;
14152: LD_ADDR_VAR 0 16
14156: PUSH
14157: CALL_OW 45
14161: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14162: LD_VAR 0 16
14166: PPUSH
14167: LD_VAR 0 1
14171: PPUSH
14172: LD_INT 0
14174: PPUSH
14175: CALL_OW 49
// if vehcontrol = 1 then
14179: LD_VAR 0 7
14183: PUSH
14184: LD_INT 1
14186: EQUAL
14187: IFFALSE 14244
// begin hc_gallery =  ;
14189: LD_ADDR_OWVAR 33
14193: PUSH
14194: LD_STRING 
14196: ST_TO_ADDR
// hc_name =  ;
14197: LD_ADDR_OWVAR 26
14201: PUSH
14202: LD_STRING 
14204: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14205: LD_INT 0
14207: PPUSH
14208: LD_INT 3
14210: PPUSH
14211: LD_VAR 0 4
14215: PPUSH
14216: CALL_OW 380
// un = CreateHuman ;
14220: LD_ADDR_VAR 0 15
14224: PUSH
14225: CALL_OW 44
14229: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14230: LD_VAR 0 15
14234: PPUSH
14235: LD_VAR 0 16
14239: PPUSH
14240: CALL_OW 52
// end ; i = i + 1 ;
14244: LD_ADDR_VAR 0 13
14248: PUSH
14249: LD_VAR 0 13
14253: PUSH
14254: LD_INT 1
14256: PLUS
14257: ST_TO_ADDR
// end ; until i = vehCount ;
14258: LD_VAR 0 13
14262: PUSH
14263: LD_VAR 0 3
14267: EQUAL
14268: IFFALSE 12920
// repeat wait ( 0 0$1 ) ;
14270: LD_INT 35
14272: PPUSH
14273: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
14277: LD_ADDR_VAR 0 20
14281: PUSH
14282: LD_INT 22
14284: PUSH
14285: LD_VAR 0 2
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 21
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 24
14306: PUSH
14307: LD_INT 661
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 69
14323: ST_TO_ADDR
// if vehicleOK_list > 0 then
14324: LD_VAR 0 20
14328: PUSH
14329: LD_INT 0
14331: GREATER
14332: IFFALSE 14523
// begin for i in vehicleOK_list do
14334: LD_ADDR_VAR 0 13
14338: PUSH
14339: LD_VAR 0 20
14343: PUSH
14344: FOR_IN
14345: IFFALSE 14521
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14347: LD_ADDR_VAR 0 21
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_VAR 0 11
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 69
14368: PPUSH
14369: LD_VAR 0 13
14373: PPUSH
14374: CALL_OW 74
14378: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14379: LD_ADDR_VAR 0 22
14383: PUSH
14384: LD_INT 22
14386: PUSH
14387: LD_VAR 0 11
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 2
14398: PUSH
14399: LD_INT 59
14401: PUSH
14402: EMPTY
14403: LIST
14404: PUSH
14405: LD_INT 21
14407: PUSH
14408: LD_INT 1
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 21
14417: PUSH
14418: LD_INT 2
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: PPUSH
14438: CALL_OW 69
14442: PPUSH
14443: LD_VAR 0 13
14447: PPUSH
14448: CALL_OW 74
14452: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14453: LD_VAR 0 13
14457: PPUSH
14458: LD_VAR 0 21
14462: PPUSH
14463: CALL_OW 296
14467: PUSH
14468: LD_INT 6
14470: PLUS
14471: PUSH
14472: LD_VAR 0 13
14476: PPUSH
14477: LD_VAR 0 22
14481: PPUSH
14482: CALL_OW 296
14486: LESS
14487: IFFALSE 14505
// begin ComAttackUnit ( i , target1 ) ;
14489: LD_VAR 0 13
14493: PPUSH
14494: LD_VAR 0 21
14498: PPUSH
14499: CALL_OW 115
// end else
14503: GO 14519
// begin ComAttackUnit ( i , target2 ) ;
14505: LD_VAR 0 13
14509: PPUSH
14510: LD_VAR 0 22
14514: PPUSH
14515: CALL_OW 115
// end ; end ;
14519: GO 14344
14521: POP
14522: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
14523: LD_INT 22
14525: PUSH
14526: LD_VAR 0 2
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 21
14537: PUSH
14538: LD_INT 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 24
14547: PUSH
14548: LD_INT 250
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: PPUSH
14560: CALL_OW 69
14564: PUSH
14565: LD_INT 0
14567: EQUAL
14568: IFFALSE 14270
// end ;
14570: LD_VAR 0 12
14574: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14575: LD_INT 0
14577: PPUSH
14578: PPUSH
14579: PPUSH
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
14584: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14585: LD_ADDR_VAR 0 7
14589: PUSH
14590: LD_INT 22
14592: PUSH
14593: LD_VAR 0 1
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: LD_INT 3
14607: PUSH
14608: LD_INT 24
14610: PUSH
14611: LD_INT 550
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 24
14624: PUSH
14625: LD_INT 250
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PPUSH
14641: CALL_OW 69
14645: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14646: LD_ADDR_VAR 0 8
14650: PUSH
14651: LD_INT 22
14653: PUSH
14654: LD_VAR 0 1
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 2
14665: PUSH
14666: LD_INT 25
14668: PUSH
14669: LD_INT 1
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 25
14678: PUSH
14679: LD_INT 5
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 25
14688: PUSH
14689: LD_INT 8
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 25
14698: PUSH
14699: LD_INT 9
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 24
14715: PUSH
14716: LD_INT 1000
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14733: LD_ADDR_VAR 0 9
14737: PUSH
14738: LD_INT 22
14740: PUSH
14741: LD_VAR 0 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 25
14752: PUSH
14753: LD_INT 4
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PPUSH
14764: CALL_OW 69
14768: ST_TO_ADDR
// if medicCount > 0 then
14769: LD_VAR 0 9
14773: PUSH
14774: LD_INT 0
14776: GREATER
14777: IFFALSE 14851
// begin if damageUnit_list > 0 then
14779: LD_VAR 0 7
14783: PUSH
14784: LD_INT 0
14786: GREATER
14787: IFFALSE 14851
// begin for i in damageUnit_list do
14789: LD_ADDR_VAR 0 5
14793: PUSH
14794: LD_VAR 0 7
14798: PUSH
14799: FOR_IN
14800: IFFALSE 14849
// begin ComMoveToArea ( i , healArea ) ;
14802: LD_VAR 0 5
14806: PPUSH
14807: LD_VAR 0 2
14811: PPUSH
14812: CALL_OW 113
// for j in medicCount do
14816: LD_ADDR_VAR 0 6
14820: PUSH
14821: LD_VAR 0 9
14825: PUSH
14826: FOR_IN
14827: IFFALSE 14845
// AddComHeal ( j , i ) ;
14829: LD_VAR 0 6
14833: PPUSH
14834: LD_VAR 0 5
14838: PPUSH
14839: CALL_OW 188
14843: GO 14826
14845: POP
14846: POP
// end ;
14847: GO 14799
14849: POP
14850: POP
// end ; end ; if soldiersOK_list > 0 then
14851: LD_VAR 0 8
14855: PUSH
14856: LD_INT 0
14858: GREATER
14859: IFFALSE 15050
// begin for i in soldiersOK_list do
14861: LD_ADDR_VAR 0 5
14865: PUSH
14866: LD_VAR 0 8
14870: PUSH
14871: FOR_IN
14872: IFFALSE 15048
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14874: LD_ADDR_VAR 0 10
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_VAR 0 3
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: PPUSH
14896: LD_VAR 0 5
14900: PPUSH
14901: CALL_OW 74
14905: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14906: LD_ADDR_VAR 0 11
14910: PUSH
14911: LD_INT 22
14913: PUSH
14914: LD_VAR 0 3
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 2
14925: PUSH
14926: LD_INT 59
14928: PUSH
14929: EMPTY
14930: LIST
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: LD_INT 1
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 21
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: PPUSH
14965: CALL_OW 69
14969: PPUSH
14970: LD_VAR 0 5
14974: PPUSH
14975: CALL_OW 74
14979: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14980: LD_VAR 0 5
14984: PPUSH
14985: LD_VAR 0 10
14989: PPUSH
14990: CALL_OW 296
14994: PUSH
14995: LD_INT 8
14997: PLUS
14998: PUSH
14999: LD_VAR 0 5
15003: PPUSH
15004: LD_VAR 0 11
15008: PPUSH
15009: CALL_OW 296
15013: LESS
15014: IFFALSE 15032
// begin ComAttackUnit ( i , target1 ) ;
15016: LD_VAR 0 5
15020: PPUSH
15021: LD_VAR 0 10
15025: PPUSH
15026: CALL_OW 115
// end else
15030: GO 15046
// begin ComAttackUnit ( i , target2 ) ;
15032: LD_VAR 0 5
15036: PPUSH
15037: LD_VAR 0 11
15041: PPUSH
15042: CALL_OW 115
// end ; end ;
15046: GO 14871
15048: POP
15049: POP
// end ; end ;
15050: LD_VAR 0 4
15054: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
// list := [ ] ;
15059: LD_ADDR_VAR 0 5
15063: PUSH
15064: EMPTY
15065: ST_TO_ADDR
// case d of 0 :
15066: LD_VAR 0 3
15070: PUSH
15071: LD_INT 0
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15212
15079: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15080: LD_ADDR_VAR 0 5
15084: PUSH
15085: LD_VAR 0 1
15089: PUSH
15090: LD_INT 4
15092: MINUS
15093: PUSH
15094: LD_VAR 0 2
15098: PUSH
15099: LD_INT 4
15101: MINUS
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: PUSH
15111: LD_VAR 0 1
15115: PUSH
15116: LD_INT 3
15118: MINUS
15119: PUSH
15120: LD_VAR 0 2
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: LD_VAR 0 1
15137: PUSH
15138: LD_INT 4
15140: PLUS
15141: PUSH
15142: LD_VAR 0 2
15146: PUSH
15147: LD_INT 4
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: LD_VAR 0 1
15159: PUSH
15160: LD_INT 3
15162: PLUS
15163: PUSH
15164: LD_VAR 0 2
15168: PUSH
15169: LD_INT 3
15171: PLUS
15172: PUSH
15173: LD_INT 5
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PUSH
15181: LD_VAR 0 1
15185: PUSH
15186: LD_VAR 0 2
15190: PUSH
15191: LD_INT 4
15193: PLUS
15194: PUSH
15195: LD_INT 0
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: ST_TO_ADDR
// end ; 1 :
15210: GO 15910
15212: LD_INT 1
15214: DOUBLE
15215: EQUAL
15216: IFTRUE 15220
15218: GO 15353
15220: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
15221: LD_ADDR_VAR 0 5
15225: PUSH
15226: LD_VAR 0 1
15230: PUSH
15231: LD_VAR 0 2
15235: PUSH
15236: LD_INT 4
15238: MINUS
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: LD_VAR 0 1
15252: PUSH
15253: LD_INT 3
15255: MINUS
15256: PUSH
15257: LD_VAR 0 2
15261: PUSH
15262: LD_INT 3
15264: MINUS
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: LD_VAR 0 1
15278: PUSH
15279: LD_INT 4
15281: MINUS
15282: PUSH
15283: LD_VAR 0 2
15287: PUSH
15288: LD_INT 1
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: PUSH
15296: LD_VAR 0 1
15300: PUSH
15301: LD_VAR 0 2
15305: PUSH
15306: LD_INT 3
15308: PLUS
15309: PUSH
15310: LD_INT 0
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: PUSH
15318: LD_VAR 0 1
15322: PUSH
15323: LD_INT 4
15325: PLUS
15326: PUSH
15327: LD_VAR 0 2
15331: PUSH
15332: LD_INT 4
15334: PLUS
15335: PUSH
15336: LD_INT 5
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: ST_TO_ADDR
// end ; 2 :
15351: GO 15910
15353: LD_INT 2
15355: DOUBLE
15356: EQUAL
15357: IFTRUE 15361
15359: GO 15490
15361: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
15362: LD_ADDR_VAR 0 5
15366: PUSH
15367: LD_VAR 0 1
15371: PUSH
15372: LD_VAR 0 2
15376: PUSH
15377: LD_INT 3
15379: MINUS
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: LIST
15388: PUSH
15389: LD_VAR 0 1
15393: PUSH
15394: LD_INT 4
15396: PLUS
15397: PUSH
15398: LD_VAR 0 2
15402: PUSH
15403: LD_INT 4
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: PUSH
15411: LD_VAR 0 1
15415: PUSH
15416: LD_VAR 0 2
15420: PUSH
15421: LD_INT 4
15423: PLUS
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: PUSH
15433: LD_VAR 0 1
15437: PUSH
15438: LD_INT 3
15440: MINUS
15441: PUSH
15442: LD_VAR 0 2
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: LD_VAR 0 1
15459: PUSH
15460: LD_INT 4
15462: MINUS
15463: PUSH
15464: LD_VAR 0 2
15468: PUSH
15469: LD_INT 4
15471: MINUS
15472: PUSH
15473: LD_INT 2
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: ST_TO_ADDR
// end ; 3 :
15488: GO 15910
15490: LD_INT 3
15492: DOUBLE
15493: EQUAL
15494: IFTRUE 15498
15496: GO 15631
15498: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
15499: LD_ADDR_VAR 0 5
15503: PUSH
15504: LD_VAR 0 1
15508: PUSH
15509: LD_INT 3
15511: PLUS
15512: PUSH
15513: LD_VAR 0 2
15517: PUSH
15518: LD_INT 4
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: LD_VAR 0 1
15530: PUSH
15531: LD_INT 4
15533: PLUS
15534: PUSH
15535: LD_VAR 0 2
15539: PUSH
15540: LD_INT 4
15542: PLUS
15543: PUSH
15544: LD_INT 5
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: PUSH
15552: LD_VAR 0 1
15556: PUSH
15557: LD_INT 4
15559: MINUS
15560: PUSH
15561: LD_VAR 0 2
15565: PUSH
15566: LD_INT 1
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: PUSH
15574: LD_VAR 0 1
15578: PUSH
15579: LD_VAR 0 2
15583: PUSH
15584: LD_INT 4
15586: MINUS
15587: PUSH
15588: LD_INT 3
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: PUSH
15596: LD_VAR 0 1
15600: PUSH
15601: LD_INT 3
15603: MINUS
15604: PUSH
15605: LD_VAR 0 2
15609: PUSH
15610: LD_INT 3
15612: MINUS
15613: PUSH
15614: LD_INT 2
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: ST_TO_ADDR
// end ; 4 :
15629: GO 15910
15631: LD_INT 4
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15772
15639: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
15640: LD_ADDR_VAR 0 5
15644: PUSH
15645: LD_VAR 0 1
15649: PUSH
15650: LD_VAR 0 2
15654: PUSH
15655: LD_INT 4
15657: PLUS
15658: PUSH
15659: LD_INT 0
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: PUSH
15667: LD_VAR 0 1
15671: PUSH
15672: LD_INT 3
15674: PLUS
15675: PUSH
15676: LD_VAR 0 2
15680: PUSH
15681: LD_INT 3
15683: PLUS
15684: PUSH
15685: LD_INT 5
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_VAR 0 1
15697: PUSH
15698: LD_INT 3
15700: PLUS
15701: PUSH
15702: LD_VAR 0 2
15706: PUSH
15707: LD_INT 4
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: LIST
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: LD_VAR 0 2
15724: PUSH
15725: LD_INT 3
15727: MINUS
15728: PUSH
15729: LD_INT 3
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: PUSH
15737: LD_VAR 0 1
15741: PUSH
15742: LD_INT 4
15744: MINUS
15745: PUSH
15746: LD_VAR 0 2
15750: PUSH
15751: LD_INT 4
15753: MINUS
15754: PUSH
15755: LD_INT 2
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: ST_TO_ADDR
// end ; 5 :
15770: GO 15910
15772: LD_INT 5
15774: DOUBLE
15775: EQUAL
15776: IFTRUE 15780
15778: GO 15909
15780: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: LD_VAR 0 1
15790: PUSH
15791: LD_INT 4
15793: MINUS
15794: PUSH
15795: LD_VAR 0 2
15799: PUSH
15800: LD_INT 1
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: LD_VAR 0 1
15812: PUSH
15813: LD_VAR 0 2
15817: PUSH
15818: LD_INT 4
15820: MINUS
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: PUSH
15830: LD_VAR 0 1
15834: PUSH
15835: LD_INT 4
15837: PLUS
15838: PUSH
15839: LD_VAR 0 2
15843: PUSH
15844: LD_INT 4
15846: PLUS
15847: PUSH
15848: LD_INT 5
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_VAR 0 1
15860: PUSH
15861: LD_INT 3
15863: PLUS
15864: PUSH
15865: LD_VAR 0 2
15869: PUSH
15870: LD_INT 4
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: LD_VAR 0 1
15882: PUSH
15883: LD_VAR 0 2
15887: PUSH
15888: LD_INT 3
15890: PLUS
15891: PUSH
15892: LD_INT 0
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: ST_TO_ADDR
// end ; end ;
15907: GO 15910
15909: POP
// result := list ;
15910: LD_ADDR_VAR 0 4
15914: PUSH
15915: LD_VAR 0 5
15919: ST_TO_ADDR
// end ; end_of_file
15920: LD_VAR 0 4
15924: RET
// every 1 do var i ;
15925: GO 15927
15927: DISABLE
15928: LD_INT 0
15930: PPUSH
// begin InGameOn ;
15931: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
15935: LD_INT 53
15937: PPUSH
15938: LD_INT 40
15940: PPUSH
15941: CALL_OW 84
// wait ( 0 0$5 ) ;
15945: LD_INT 175
15947: PPUSH
15948: CALL_OW 67
// if gammaCommander = 1 then
15952: LD_EXP 11
15956: PUSH
15957: LD_INT 1
15959: EQUAL
15960: IFFALSE 15971
// CenterNowOnUnits ( Donaldson ) ;
15962: LD_EXP 3
15966: PPUSH
15967: CALL_OW 87
// if gammaCommander = 2 then
15971: LD_EXP 11
15975: PUSH
15976: LD_INT 2
15978: EQUAL
15979: IFFALSE 15990
// CenterNowOnUnits ( Brown ) ;
15981: LD_EXP 2
15985: PPUSH
15986: CALL_OW 87
// if gammaCommander = 3 then
15990: LD_EXP 11
15994: PUSH
15995: LD_INT 3
15997: EQUAL
15998: IFFALSE 16009
// CenterNowOnUnits ( Houten ) ;
16000: LD_EXP 12
16004: PPUSH
16005: CALL_OW 87
// if gammaCommander = 1 then
16009: LD_EXP 11
16013: PUSH
16014: LD_INT 1
16016: EQUAL
16017: IFFALSE 16031
// Say ( Donaldson , D1-Don-1 ) ;
16019: LD_EXP 3
16023: PPUSH
16024: LD_STRING D1-Don-1
16026: PPUSH
16027: CALL_OW 88
// if gammaCommander = 2 then
16031: LD_EXP 11
16035: PUSH
16036: LD_INT 2
16038: EQUAL
16039: IFFALSE 16053
// Say ( Brown , D1-Brown-1 ) ;
16041: LD_EXP 2
16045: PPUSH
16046: LD_STRING D1-Brown-1
16048: PPUSH
16049: CALL_OW 88
// if gammaCommander = 3 then
16053: LD_EXP 11
16057: PUSH
16058: LD_INT 3
16060: EQUAL
16061: IFFALSE 16075
// Say ( Houten , D1-VanH-1 ) ;
16063: LD_EXP 12
16067: PPUSH
16068: LD_STRING D1-VanH-1
16070: PPUSH
16071: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
16075: LD_EXP 21
16079: PPUSH
16080: LD_STRING D1-Har-1
16082: PPUSH
16083: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
16087: LD_INT 53
16089: PPUSH
16090: LD_INT 40
16092: PPUSH
16093: CALL_OW 84
// if gammaCommander = 1 then
16097: LD_EXP 11
16101: PUSH
16102: LD_INT 1
16104: EQUAL
16105: IFFALSE 16119
// Say ( Donaldson , D1-Don-2 ) ;
16107: LD_EXP 3
16111: PPUSH
16112: LD_STRING D1-Don-2
16114: PPUSH
16115: CALL_OW 88
// if gammaCommander = 2 then
16119: LD_EXP 11
16123: PUSH
16124: LD_INT 2
16126: EQUAL
16127: IFFALSE 16141
// Say ( Brown , D1-Brown-2 ) ;
16129: LD_EXP 2
16133: PPUSH
16134: LD_STRING D1-Brown-2
16136: PPUSH
16137: CALL_OW 88
// if gammaCommander = 3 then
16141: LD_EXP 11
16145: PUSH
16146: LD_INT 3
16148: EQUAL
16149: IFFALSE 16163
// Say ( Houten , D1-VanH-2 ) ;
16151: LD_EXP 12
16155: PPUSH
16156: LD_STRING D1-VanH-2
16158: PPUSH
16159: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
16163: LD_EXP 21
16167: PPUSH
16168: LD_STRING D1-Har-2
16170: PPUSH
16171: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
16175: LD_INT 22
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 33
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 61
16197: PUSH
16198: EMPTY
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 69
16210: IFFALSE 16275
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
16212: LD_ADDR_VAR 0 1
16216: PUSH
16217: LD_INT 22
16219: PUSH
16220: LD_INT 1
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 33
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 61
16239: PUSH
16240: EMPTY
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16273
// ComAgressiveMove ( i , 70 , 41 ) ;
16256: LD_VAR 0 1
16260: PPUSH
16261: LD_INT 70
16263: PPUSH
16264: LD_INT 41
16266: PPUSH
16267: CALL_OW 114
16271: GO 16253
16273: POP
16274: POP
// repeat wait ( 0 0$1 ) ;
16275: LD_INT 35
16277: PPUSH
16278: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_INT 6
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: PPUSH
16300: CALL_OW 69
16304: PUSH
16305: FOR_IN
16306: IFFALSE 16325
// ComAgressiveMove ( i , 54 , 20 ) ;
16308: LD_VAR 0 1
16312: PPUSH
16313: LD_INT 54
16315: PPUSH
16316: LD_INT 20
16318: PPUSH
16319: CALL_OW 114
16323: GO 16305
16325: POP
16326: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 25
16344: PUSH
16345: LD_INT 1
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 3
16354: PUSH
16355: LD_INT 54
16357: PUSH
16358: EMPTY
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: PPUSH
16370: CALL_OW 69
16374: PUSH
16375: FOR_IN
16376: IFFALSE 16410
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_INT 70
16385: PPUSH
16386: LD_INT 41
16388: PPUSH
16389: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_INT 46
16400: PPUSH
16401: LD_INT 39
16403: PPUSH
16404: CALL_OW 174
// end ;
16408: GO 16375
16410: POP
16411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
16412: LD_ADDR_VAR 0 1
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 21
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 3
16439: PUSH
16440: LD_INT 24
16442: PUSH
16443: LD_INT 500
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PUSH
16464: FOR_IN
16465: IFFALSE 16498
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
16467: LD_VAR 0 1
16471: PPUSH
16472: LD_EXP 36
16476: PPUSH
16477: CALL_OW 250
16481: PPUSH
16482: LD_EXP 36
16486: PPUSH
16487: CALL_OW 251
16491: PPUSH
16492: CALL_OW 111
16496: GO 16464
16498: POP
16499: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
16500: LD_INT 22
16502: PUSH
16503: LD_INT 6
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 250
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: PPUSH
16535: CALL_OW 69
16539: PUSH
16540: LD_INT 6
16542: LESS
16543: IFFALSE 16275
// InGameOff ;
16545: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
16549: LD_STRING M1
16551: PPUSH
16552: CALL_OW 337
// SaveForQuickRestart ;
16556: CALL_OW 22
// startCutscene = 0 ;
16560: LD_ADDR_EXP 37
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// end ;
16568: PPOPN 1
16570: END
// every 1 1$0 do
16571: GO 16573
16573: DISABLE
// begin PrepareSupportFromDelta ;
16574: CALL 2704 0 0
// firstAttack = 1 ;
16578: LD_ADDR_EXP 32
16582: PUSH
16583: LD_INT 1
16585: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16586: LD_EXP 8
16590: PPUSH
16591: CALL_OW 302
16595: IFFALSE 16611
// begin Say ( Gladstone , D2-Glad-1 ) ;
16597: LD_EXP 8
16601: PPUSH
16602: LD_STRING D2-Glad-1
16604: PPUSH
16605: CALL_OW 88
// end else
16609: GO 16713
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16611: LD_INT 4
16613: PPUSH
16614: LD_INT 22
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 21
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: LD_INT 25
16639: PUSH
16640: LD_INT 1
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 25
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 25
16659: PUSH
16660: LD_INT 3
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 25
16669: PUSH
16670: LD_INT 4
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 70
16693: PUSH
16694: LD_EXP 14
16698: PUSH
16699: EMPTY
16700: LIST
16701: DIFF
16702: PPUSH
16703: LD_STRING D2-Sol1-1
16705: PPUSH
16706: LD_STRING D2-FSol1-1
16708: PPUSH
16709: CALL 6160 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
16713: LD_EXP 3
16717: PPUSH
16718: CALL_OW 302
16722: PUSH
16723: LD_EXP 11
16727: PUSH
16728: LD_INT 1
16730: EQUAL
16731: AND
16732: IFFALSE 16746
// Say ( Donaldson , D2-Don-1 ) ;
16734: LD_EXP 3
16738: PPUSH
16739: LD_STRING D2-Don-1
16741: PPUSH
16742: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16746: LD_EXP 2
16750: PPUSH
16751: CALL_OW 302
16755: PUSH
16756: LD_EXP 11
16760: PUSH
16761: LD_INT 2
16763: EQUAL
16764: AND
16765: IFFALSE 16779
// Say ( Brown , D2-Brown-1 ) ;
16767: LD_EXP 2
16771: PPUSH
16772: LD_STRING D2-Brown-1
16774: PPUSH
16775: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16779: LD_EXP 12
16783: PPUSH
16784: CALL_OW 302
16788: PUSH
16789: LD_EXP 11
16793: PUSH
16794: LD_INT 3
16796: EQUAL
16797: AND
16798: IFFALSE 16812
// Say ( Houten , D2-VanH-1 ) ;
16800: LD_EXP 12
16804: PPUSH
16805: LD_STRING D2-VanH-1
16807: PPUSH
16808: CALL_OW 88
// end ;
16812: END
// every 0 0$1 do
16813: GO 16815
16815: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
16816: LD_STRING 07_time
16818: PPUSH
16819: LD_INT 0
16821: PPUSH
16822: CALL_OW 30
16826: PUSH
16827: LD_INT 3
16829: DIV
16830: PPUSH
16831: CALL_OW 67
// PrepareMacmillanSquad ;
16835: CALL 3319 0 0
// CenterNowOnUnits ( JMM ) ;
16839: LD_EXP 1
16843: PPUSH
16844: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
16848: LD_EXP 1
16852: PPUSH
16853: LD_STRING D3-JMM-1
16855: PPUSH
16856: CALL_OW 88
// JMMArrive = 1 ;
16860: LD_ADDR_EXP 38
16864: PUSH
16865: LD_INT 1
16867: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16868: LD_EXP 3
16872: PPUSH
16873: CALL_OW 302
16877: PUSH
16878: LD_EXP 11
16882: PUSH
16883: LD_INT 1
16885: EQUAL
16886: AND
16887: IFFALSE 16903
// begin Say ( Donaldson , D3-Don-1 ) ;
16889: LD_EXP 3
16893: PPUSH
16894: LD_STRING D3-Don-1
16896: PPUSH
16897: CALL_OW 88
// end else
16901: GO 16955
// begin if gammaCommander = 1 then
16903: LD_EXP 11
16907: PUSH
16908: LD_INT 1
16910: EQUAL
16911: IFFALSE 16955
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
16913: LD_EXP 10
16917: PPUSH
16918: LD_INT 26
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PPUSH
16928: CALL_OW 72
16932: PPUSH
16933: LD_STRING D3-Sol1-1
16935: PPUSH
16936: LD_STRING D3-Sol1-1
16938: PPUSH
16939: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
16943: LD_EXP 1
16947: PPUSH
16948: LD_STRING D3-JMM-2
16950: PPUSH
16951: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16955: LD_EXP 2
16959: PPUSH
16960: CALL_OW 302
16964: PUSH
16965: LD_EXP 11
16969: PUSH
16970: LD_INT 2
16972: EQUAL
16973: AND
16974: IFFALSE 16990
// begin Say ( Brown , D3-Brown-1 ) ;
16976: LD_EXP 2
16980: PPUSH
16981: LD_STRING D3-Brown-1
16983: PPUSH
16984: CALL_OW 88
// end else
16988: GO 17042
// begin if gammaCommander = 2 then
16990: LD_EXP 11
16994: PUSH
16995: LD_INT 2
16997: EQUAL
16998: IFFALSE 17042
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17000: LD_EXP 10
17004: PPUSH
17005: LD_INT 26
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PPUSH
17015: CALL_OW 72
17019: PPUSH
17020: LD_STRING D3-Sol1-1a
17022: PPUSH
17023: LD_STRING D3-Sol1-1a
17025: PPUSH
17026: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17030: LD_EXP 1
17034: PPUSH
17035: LD_STRING D3-JMM-2
17037: PPUSH
17038: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17042: LD_EXP 12
17046: PPUSH
17047: CALL_OW 302
17051: PUSH
17052: LD_EXP 11
17056: PUSH
17057: LD_INT 3
17059: EQUAL
17060: AND
17061: IFFALSE 17077
// begin Say ( Houten , D3-VanH-1 ) ;
17063: LD_EXP 12
17067: PPUSH
17068: LD_STRING D3-VanH-1
17070: PPUSH
17071: CALL_OW 88
// end else
17075: GO 17129
// begin if gammaCommander = 3 then
17077: LD_EXP 11
17081: PUSH
17082: LD_INT 3
17084: EQUAL
17085: IFFALSE 17129
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17087: LD_EXP 10
17091: PPUSH
17092: LD_INT 26
17094: PUSH
17095: LD_INT 1
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 72
17106: PPUSH
17107: LD_STRING D3-Sol1-1b
17109: PPUSH
17110: LD_STRING D3-Sol1-1b
17112: PPUSH
17113: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17117: LD_EXP 1
17121: PPUSH
17122: LD_STRING D3-JMM-2
17124: PPUSH
17125: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17129: LD_EXP 14
17133: PPUSH
17134: CALL_OW 302
17138: IFFALSE 17166
// begin Say ( Joan , D3a-Joan-1 ) ;
17140: LD_EXP 14
17144: PPUSH
17145: LD_STRING D3a-Joan-1
17147: PPUSH
17148: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17152: LD_EXP 1
17156: PPUSH
17157: LD_STRING D3a-JMM-1
17159: PPUSH
17160: CALL_OW 88
// end else
17164: GO 17619
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17166: LD_EXP 3
17170: PPUSH
17171: CALL_OW 302
17175: PUSH
17176: LD_EXP 11
17180: PUSH
17181: LD_INT 1
17183: EQUAL
17184: AND
17185: PUSH
17186: LD_STRING 06_JoanStatus_1
17188: PPUSH
17189: LD_INT 0
17191: PPUSH
17192: CALL_OW 30
17196: PUSH
17197: LD_INT 1
17199: EQUAL
17200: AND
17201: IFFALSE 17252
// begin Say ( Donaldson , D3b-Don-1 ) ;
17203: LD_EXP 3
17207: PPUSH
17208: LD_STRING D3b-Don-1
17210: PPUSH
17211: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17215: LD_EXP 1
17219: PPUSH
17220: LD_STRING D3b-JMM-2
17222: PPUSH
17223: CALL_OW 88
// if IsOK ( Lisa ) then
17227: LD_EXP 6
17231: PPUSH
17232: CALL_OW 302
17236: IFFALSE 17250
// Say ( Lisa , D3b-Lisa-2 ) ;
17238: LD_EXP 6
17242: PPUSH
17243: LD_STRING D3b-Lisa-2
17245: PPUSH
17246: CALL_OW 88
// end else
17250: GO 17317
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17252: LD_EXP 10
17256: PPUSH
17257: LD_INT 26
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 72
17271: PPUSH
17272: LD_STRING D3b-Sol1-1
17274: PPUSH
17275: LD_STRING D3b-Sol1-1
17277: PPUSH
17278: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17282: LD_EXP 1
17286: PPUSH
17287: LD_STRING D3b-JMM-2
17289: PPUSH
17290: CALL_OW 88
// if IsOK ( Lisa ) then
17294: LD_EXP 6
17298: PPUSH
17299: CALL_OW 302
17303: IFFALSE 17317
// Say ( Lisa , D3b-Lisa-2 ) ;
17305: LD_EXP 6
17309: PPUSH
17310: LD_STRING D3b-Lisa-2
17312: PPUSH
17313: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17317: LD_EXP 2
17321: PPUSH
17322: CALL_OW 302
17326: PUSH
17327: LD_EXP 11
17331: PUSH
17332: LD_INT 2
17334: EQUAL
17335: AND
17336: PUSH
17337: LD_STRING 06_JoanStatus_1
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 30
17347: PUSH
17348: LD_INT 1
17350: EQUAL
17351: AND
17352: IFFALSE 17403
// begin Say ( Brown , D3b-Brown-1 ) ;
17354: LD_EXP 2
17358: PPUSH
17359: LD_STRING D3b-Brown-1
17361: PPUSH
17362: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17366: LD_EXP 1
17370: PPUSH
17371: LD_STRING D3b-JMM-2
17373: PPUSH
17374: CALL_OW 88
// if IsOK ( Lisa ) then
17378: LD_EXP 6
17382: PPUSH
17383: CALL_OW 302
17387: IFFALSE 17401
// Say ( Lisa , D3b-Lisa-2 ) ;
17389: LD_EXP 6
17393: PPUSH
17394: LD_STRING D3b-Lisa-2
17396: PPUSH
17397: CALL_OW 88
// end else
17401: GO 17468
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17403: LD_EXP 10
17407: PPUSH
17408: LD_INT 26
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 72
17422: PPUSH
17423: LD_STRING D3b-Sol1-1
17425: PPUSH
17426: LD_STRING D3b-Sol1-1
17428: PPUSH
17429: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17433: LD_EXP 1
17437: PPUSH
17438: LD_STRING D3b-JMM-2
17440: PPUSH
17441: CALL_OW 88
// if IsOK ( Lisa ) then
17445: LD_EXP 6
17449: PPUSH
17450: CALL_OW 302
17454: IFFALSE 17468
// Say ( Lisa , D3b-Lisa-2 ) ;
17456: LD_EXP 6
17460: PPUSH
17461: LD_STRING D3b-Lisa-2
17463: PPUSH
17464: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17468: LD_EXP 12
17472: PPUSH
17473: CALL_OW 302
17477: PUSH
17478: LD_EXP 11
17482: PUSH
17483: LD_INT 3
17485: EQUAL
17486: AND
17487: PUSH
17488: LD_STRING 06_JoanStatus_1
17490: PPUSH
17491: LD_INT 0
17493: PPUSH
17494: CALL_OW 30
17498: PUSH
17499: LD_INT 1
17501: EQUAL
17502: AND
17503: IFFALSE 17554
// begin Say ( Houten , D3b-VanH-1 ) ;
17505: LD_EXP 12
17509: PPUSH
17510: LD_STRING D3b-VanH-1
17512: PPUSH
17513: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17517: LD_EXP 1
17521: PPUSH
17522: LD_STRING D3b-JMM-2
17524: PPUSH
17525: CALL_OW 88
// if IsOK ( Lisa ) then
17529: LD_EXP 6
17533: PPUSH
17534: CALL_OW 302
17538: IFFALSE 17552
// Say ( Lisa , D3b-Lisa-2 ) ;
17540: LD_EXP 6
17544: PPUSH
17545: LD_STRING D3b-Lisa-2
17547: PPUSH
17548: CALL_OW 88
// end else
17552: GO 17619
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17554: LD_EXP 10
17558: PPUSH
17559: LD_INT 26
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PPUSH
17569: CALL_OW 72
17573: PPUSH
17574: LD_STRING D3b-Sol1-1
17576: PPUSH
17577: LD_STRING D3b-Sol1-1
17579: PPUSH
17580: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17584: LD_EXP 1
17588: PPUSH
17589: LD_STRING D3b-JMM-2
17591: PPUSH
17592: CALL_OW 88
// if IsOK ( Lisa ) then
17596: LD_EXP 6
17600: PPUSH
17601: CALL_OW 302
17605: IFFALSE 17619
// Say ( Lisa , D3b-Lisa-2 ) ;
17607: LD_EXP 6
17611: PPUSH
17612: LD_STRING D3b-Lisa-2
17614: PPUSH
17615: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
17619: LD_INT 22
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 21
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 26
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: LD_INT 25
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 25
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 25
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 25
17684: PUSH
17685: LD_INT 4
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: PPUSH
17705: CALL_OW 69
17709: PUSH
17710: LD_EXP 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: DIFF
17718: PPUSH
17719: LD_STRING DCa-Sol1-1
17721: PPUSH
17722: LD_STRING DCa-Sol1-1
17724: PPUSH
17725: CALL 6160 0 3
// Say ( JMM , DCb-JMM-1 ) ;
17729: LD_EXP 1
17733: PPUSH
17734: LD_STRING DCb-JMM-1
17736: PPUSH
17737: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
17741: LD_INT 22
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 21
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 26
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 25
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 25
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 25
17796: PUSH
17797: LD_INT 3
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 25
17806: PUSH
17807: LD_INT 4
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: PPUSH
17827: CALL_OW 69
17831: PUSH
17832: LD_EXP 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: DIFF
17840: PPUSH
17841: LD_STRING DCb-Sol1-1
17843: PPUSH
17844: LD_STRING DCb-Sol1-1
17846: PPUSH
17847: CALL 6160 0 3
// Say ( JMM , DCb-JMM-2 ) ;
17851: LD_EXP 1
17855: PPUSH
17856: LD_STRING DCb-JMM-2
17858: PPUSH
17859: CALL_OW 88
// secondAttack = 1 ;
17863: LD_ADDR_EXP 33
17867: PUSH
17868: LD_INT 1
17870: ST_TO_ADDR
// end ;
17871: END
// every 0 0$01 trigger JMMArrive = 1 do
17872: LD_EXP 38
17876: PUSH
17877: LD_INT 1
17879: EQUAL
17880: IFFALSE 17960
17882: GO 17884
17884: DISABLE
// begin wait ( 3 3$0 ) ;
17885: LD_INT 6300
17887: PPUSH
17888: CALL_OW 67
// DialogueOn ;
17892: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17896: LD_EXP 22
17900: PPUSH
17901: LD_STRING D4-Pow-1
17903: PPUSH
17904: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17908: LD_EXP 1
17912: PPUSH
17913: LD_STRING D4-JMM-1
17915: PPUSH
17916: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17920: LD_EXP 22
17924: PPUSH
17925: LD_STRING D4-Pow-2
17927: PPUSH
17928: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17932: LD_EXP 1
17936: PPUSH
17937: LD_STRING D4-JMM-2
17939: PPUSH
17940: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17944: LD_EXP 22
17948: PPUSH
17949: LD_STRING D4-Pow-3
17951: PPUSH
17952: CALL_OW 94
// DialogueOff ;
17956: CALL_OW 7
// end ;
17960: END
// every 0 0$01 trigger JMMArrive = 1 do
17961: LD_EXP 38
17965: PUSH
17966: LD_INT 1
17968: EQUAL
17969: IFFALSE 18001
17971: GO 17973
17973: DISABLE
// begin wait ( 8 8$0 ) ;
17974: LD_INT 16800
17976: PPUSH
17977: CALL_OW 67
// DialogueOn ;
17981: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17985: LD_EXP 22
17989: PPUSH
17990: LD_STRING D4a-Pow-1
17992: PPUSH
17993: CALL_OW 94
// DialogueOff ;
17997: CALL_OW 7
// end ;
18001: END
// every 0 0$01 trigger JMMArrive = 1 do
18002: LD_EXP 38
18006: PUSH
18007: LD_INT 1
18009: EQUAL
18010: IFFALSE 18055
18012: GO 18014
18014: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18015: LD_INT 21000
18017: PUSH
18018: LD_INT 25200
18020: PUSH
18021: LD_INT 31500
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: LD_OWVAR 67
18033: ARRAY
18034: PPUSH
18035: CALL_OW 67
// PrepareSikorsky ;
18039: CALL 4744 0 0
// SikorskyArrive = 1 ;
18043: LD_ADDR_EXP 17
18047: PUSH
18048: LD_INT 1
18050: ST_TO_ADDR
// PrepareSikorskyArmy ;
18051: CALL 4884 0 0
// end ;
18055: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18056: LD_EXP 16
18060: PPUSH
18061: LD_INT 5
18063: PPUSH
18064: CALL_OW 308
18068: IFFALSE 18260
18070: GO 18072
18072: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18073: LD_EXP 16
18077: PPUSH
18078: CALL_OW 87
// DialogueOn ;
18082: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18086: LD_EXP 15
18090: PPUSH
18091: LD_STRING D5-Sik-1
18093: PPUSH
18094: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
18098: LD_EXP 1
18102: PPUSH
18103: LD_STRING D5-JMM-1a
18105: PPUSH
18106: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18110: LD_EXP 15
18114: PPUSH
18115: LD_STRING D5-Sik-2
18117: PPUSH
18118: CALL_OW 88
// case query ( QSikorski ) of 1 :
18122: LD_STRING QSikorski
18124: PPUSH
18125: CALL_OW 97
18129: PUSH
18130: LD_INT 1
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18161
18138: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18139: LD_EXP 15
18143: PPUSH
18144: LD_STRING D5a-Sik-1
18146: PPUSH
18147: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
18151: LD_ADDR_EXP 18
18155: PUSH
18156: LD_INT 2100
18158: ST_TO_ADDR
// end ; 2 :
18159: GO 18248
18161: LD_INT 2
18163: DOUBLE
18164: EQUAL
18165: IFTRUE 18169
18167: GO 18192
18169: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18170: LD_EXP 15
18174: PPUSH
18175: LD_STRING D5b-Sik-1
18177: PPUSH
18178: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18182: LD_ADDR_EXP 18
18186: PUSH
18187: LD_INT 10500
18189: ST_TO_ADDR
// end ; 3 :
18190: GO 18248
18192: LD_INT 3
18194: DOUBLE
18195: EQUAL
18196: IFTRUE 18200
18198: GO 18247
18200: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18201: LD_EXP 15
18205: PPUSH
18206: LD_STRING D5c-Sik-1
18208: PPUSH
18209: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18213: LD_EXP 1
18217: PPUSH
18218: LD_STRING D5c-JMM-1
18220: PPUSH
18221: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18225: LD_EXP 15
18229: PPUSH
18230: LD_STRING D5c-Sik-2
18232: PPUSH
18233: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18237: LD_ADDR_EXP 18
18241: PUSH
18242: LD_INT 10500
18244: ST_TO_ADDR
// end ; end ;
18245: GO 18248
18247: POP
// DialogueOff ;
18248: CALL_OW 7
// timerStatus = 1 ;
18252: LD_ADDR_EXP 34
18256: PUSH
18257: LD_INT 1
18259: ST_TO_ADDR
// end ;
18260: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
18261: LD_EXP 18
18265: PUSH
18266: LD_INT 35
18268: LESS
18269: IFFALSE 18317
18271: GO 18273
18273: DISABLE
// begin timerStatus = 0 ;
18274: LD_ADDR_EXP 34
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// DialogueOn ;
18282: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18286: LD_EXP 15
18290: PPUSH
18291: LD_STRING D6-Sik-1
18293: PPUSH
18294: CALL_OW 88
// DialogueOff ;
18298: CALL_OW 7
// SikorskyAI = 1 ;
18302: LD_ADDR_EXP 19
18306: PUSH
18307: LD_INT 1
18309: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
18310: LD_STRING M2
18312: PPUSH
18313: CALL_OW 337
// end ;
18317: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
18318: LD_EXP 16
18322: PPUSH
18323: LD_INT 18
18325: PPUSH
18326: CALL_OW 308
18330: IFFALSE 18414
18332: GO 18334
18334: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18335: LD_EXP 15
18339: PPUSH
18340: LD_STRING D7-Sik-1
18342: PPUSH
18343: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
18347: LD_EXP 1
18351: PPUSH
18352: LD_INT 24
18354: PPUSH
18355: CALL_OW 308
18359: PUSH
18360: LD_EXP 1
18364: PPUSH
18365: CALL_OW 310
18369: OR
18370: IFFALSE 18394
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18372: LD_EXP 15
18376: PPUSH
18377: LD_STRING D7a-Sik-1
18379: PPUSH
18380: CALL_OW 88
// SikorskyStatus = 1 ;
18384: LD_ADDR_EXP 20
18388: PUSH
18389: LD_INT 1
18391: ST_TO_ADDR
// end else
18392: GO 18414
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18394: LD_EXP 15
18398: PPUSH
18399: LD_STRING D7b-Sik-1
18401: PPUSH
18402: CALL_OW 88
// SikorskyStatus = 2 ;
18406: LD_ADDR_EXP 20
18410: PUSH
18411: LD_INT 2
18413: ST_TO_ADDR
// end ; end ;
18414: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18415: LD_EXP 35
18419: PUSH
18420: LD_INT 1
18422: EQUAL
18423: IFFALSE 18532
18425: GO 18427
18427: DISABLE
18428: LD_INT 0
18430: PPUSH
// begin enable ;
18431: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18432: LD_ADDR_VAR 0 1
18436: PUSH
18437: LD_INT 22
18439: PUSH
18440: LD_INT 3
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PUSH
18452: FOR_IN
18453: IFFALSE 18480
// if IsInArea ( i , RussianEscape ) then
18455: LD_VAR 0 1
18459: PPUSH
18460: LD_INT 22
18462: PPUSH
18463: CALL_OW 308
18467: IFFALSE 18478
// RemoveUnit ( i ) ;
18469: LD_VAR 0 1
18473: PPUSH
18474: CALL_OW 64
18478: GO 18452
18480: POP
18481: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18482: LD_ADDR_VAR 0 1
18486: PUSH
18487: LD_INT 22
18489: PUSH
18490: LD_INT 6
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 69
18501: PUSH
18502: FOR_IN
18503: IFFALSE 18530
// if IsInArea ( i , RussianEscape ) then
18505: LD_VAR 0 1
18509: PPUSH
18510: LD_INT 22
18512: PPUSH
18513: CALL_OW 308
18517: IFFALSE 18528
// RemoveUnit ( i ) ;
18519: LD_VAR 0 1
18523: PPUSH
18524: CALL_OW 64
18528: GO 18502
18530: POP
18531: POP
// end ; end_of_file
18532: PPOPN 1
18534: END
// on BuildingComplete ( building ) do var tmp , un ;
18535: LD_INT 0
18537: PPUSH
18538: PPUSH
// begin if GetSide ( building ) = 3 then
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 255
18548: PUSH
18549: LD_INT 3
18551: EQUAL
18552: IFFALSE 19039
// begin if GetBType ( building ) = b_depot then
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 266
18563: PUSH
18564: LD_INT 0
18566: EQUAL
18567: IFFALSE 18635
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 274
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_INT 5000
18584: PPUSH
18585: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 274
18598: PPUSH
18599: LD_INT 2
18601: PPUSH
18602: LD_INT 5000
18604: PPUSH
18605: CALL_OW 277
// SetBName ( building , konev ) ;
18609: LD_VAR 0 1
18613: PPUSH
18614: LD_STRING konev
18616: PPUSH
18617: CALL_OW 500
// ruDepot = building ;
18621: LD_ADDR_EXP 27
18625: PUSH
18626: LD_VAR 0 1
18630: ST_TO_ADDR
// BuildRussianBase ;
18631: CALL 6765 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 266
18644: PUSH
18645: LD_INT 0
18647: EQUAL
18648: PUSH
18649: LD_VAR 0 1
18653: PPUSH
18654: CALL_OW 266
18658: PUSH
18659: LD_INT 2
18661: EQUAL
18662: OR
18663: PUSH
18664: LD_VAR 0 1
18668: PPUSH
18669: CALL_OW 266
18673: PUSH
18674: LD_INT 4
18676: EQUAL
18677: OR
18678: IFFALSE 18689
// ComUpgrade ( building ) ;
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 146
// if GetBType ( building ) = b_lab then
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 266
18698: PUSH
18699: LD_INT 6
18701: EQUAL
18702: IFFALSE 18753
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_INT 10
18711: PPUSH
18712: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18716: LD_VAR 0 1
18720: PPUSH
18721: LD_INT 12
18723: PPUSH
18724: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
18728: LD_INT 3
18730: PPUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: LD_INT 3
18738: PPUSH
18739: CALL 7320 0 3
// ruLab = building ;
18743: LD_ADDR_EXP 28
18747: PUSH
18748: LD_VAR 0 1
18752: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
18753: LD_VAR 0 1
18757: PPUSH
18758: CALL_OW 266
18762: PUSH
18763: LD_INT 32
18765: EQUAL
18766: IFFALSE 18884
// begin uc_side = 3 ;
18768: LD_ADDR_OWVAR 20
18772: PUSH
18773: LD_INT 3
18775: ST_TO_ADDR
// uc_nation = 3 ;
18776: LD_ADDR_OWVAR 21
18780: PUSH
18781: LD_INT 3
18783: ST_TO_ADDR
// hc_gallery =  ;
18784: LD_ADDR_OWVAR 33
18788: PUSH
18789: LD_STRING 
18791: ST_TO_ADDR
// hc_name =  ;
18792: LD_ADDR_OWVAR 26
18796: PUSH
18797: LD_STRING 
18799: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18800: LD_INT 0
18802: PPUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_EXP 24
18810: PPUSH
18811: LD_EXP 25
18815: PPUSH
18816: CALL_OW 12
18820: PPUSH
18821: CALL_OW 380
// un = CreateHuman ;
18825: LD_ADDR_VAR 0 3
18829: PUSH
18830: CALL_OW 44
18834: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
18835: LD_VAR 0 3
18839: PPUSH
18840: LD_VAR 0 1
18844: PPUSH
18845: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_INT 43
18856: PUSH
18857: LD_INT 44
18859: PUSH
18860: LD_INT 46
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PPUSH
18871: LD_INT 3
18873: PPUSH
18874: CALL_OW 12
18878: ARRAY
18879: PPUSH
18880: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL_OW 266
18893: PUSH
18894: LD_INT 33
18896: EQUAL
18897: IFFALSE 18934
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18899: LD_VAR 0 1
18903: PPUSH
18904: LD_INT 43
18906: PUSH
18907: LD_INT 44
18909: PUSH
18910: LD_INT 46
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PPUSH
18921: LD_INT 3
18923: PPUSH
18924: CALL_OW 12
18928: ARRAY
18929: PPUSH
18930: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL_OW 266
18943: PUSH
18944: LD_INT 24
18946: EQUAL
18947: IFFALSE 18957
// russianAI = 1 ;
18949: LD_ADDR_EXP 26
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
18957: LD_EXP 30
18961: PUSH
18962: LD_INT 0
18964: GREATER
18965: IFFALSE 19039
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18967: LD_ADDR_EXP 30
18971: PUSH
18972: LD_EXP 30
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 3
18984: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18985: LD_ADDR_EXP 30
18989: PUSH
18990: LD_EXP 30
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: CALL_OW 3
19002: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19003: LD_ADDR_EXP 30
19007: PUSH
19008: LD_EXP 30
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 3
19020: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19021: LD_ADDR_EXP 30
19025: PUSH
19026: LD_EXP 30
19030: PPUSH
19031: LD_INT 1
19033: PPUSH
19034: CALL_OW 3
19038: ST_TO_ADDR
// end ; end ; end ;
19039: PPOPN 3
19041: END
// on UpgradeComplete ( building ) do var i ;
19042: LD_INT 0
19044: PPUSH
// begin if GetSide ( building ) = 3 then
19045: LD_VAR 0 1
19049: PPUSH
19050: CALL_OW 255
19054: PUSH
19055: LD_INT 3
19057: EQUAL
19058: IFFALSE 19239
// begin if GetBType ( building ) = b_factory then
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 266
19069: PUSH
19070: LD_INT 3
19072: EQUAL
19073: IFFALSE 19140
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19075: LD_ADDR_VAR 0 2
19079: PUSH
19080: LD_INT 22
19082: PUSH
19083: LD_INT 3
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 25
19092: PUSH
19093: LD_INT 3
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: PUSH
19109: FOR_IN
19110: IFFALSE 19128
// ComEnterUnit ( i , building ) ;
19112: LD_VAR 0 2
19116: PPUSH
19117: LD_VAR 0 1
19121: PPUSH
19122: CALL_OW 120
19126: GO 19109
19128: POP
19129: POP
// ruFab = building ;
19130: LD_ADDR_EXP 29
19134: PUSH
19135: LD_VAR 0 1
19139: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19140: LD_VAR 0 1
19144: PPUSH
19145: CALL_OW 266
19149: PUSH
19150: LD_INT 8
19152: EQUAL
19153: IFFALSE 19210
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19155: LD_ADDR_VAR 0 2
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 3
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 25
19172: PUSH
19173: LD_INT 4
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PPUSH
19184: CALL_OW 69
19188: PUSH
19189: FOR_IN
19190: IFFALSE 19208
// ComEnterUnit ( i , building ) ;
19192: LD_VAR 0 2
19196: PPUSH
19197: LD_VAR 0 1
19201: PPUSH
19202: CALL_OW 120
19206: GO 19189
19208: POP
19209: POP
// if GetBType ( building ) = b_warehouse then
19210: LD_VAR 0 1
19214: PPUSH
19215: CALL_OW 266
19219: PUSH
19220: LD_INT 1
19222: EQUAL
19223: IFFALSE 19239
// begin ComEnterUnit ( Borodin , building ) ;
19225: LD_EXP 23
19229: PPUSH
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 120
// end ; end ; end ;
19239: PPOPN 2
19241: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 247
19251: PUSH
19252: LD_INT 2
19254: EQUAL
19255: PUSH
19256: LD_VAR 0 1
19260: PPUSH
19261: CALL_OW 263
19265: PUSH
19266: LD_INT 3
19268: EQUAL
19269: AND
19270: PUSH
19271: LD_EXP 40
19275: PUSH
19276: LD_INT 0
19278: EQUAL
19279: AND
19280: IFFALSE 19398
// begin varEvent1 = 1 ;
19282: LD_ADDR_EXP 40
19286: PUSH
19287: LD_INT 1
19289: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
19299: LD_INT 22
19301: PUSH
19302: LD_INT 1
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 21
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: LD_INT 25
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 25
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 25
19344: PUSH
19345: LD_INT 3
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 25
19354: PUSH
19355: LD_INT 4
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PPUSH
19374: CALL_OW 69
19378: PUSH
19379: LD_EXP 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: DIFF
19387: PPUSH
19388: LD_STRING DC-Sol1-1
19390: PPUSH
19391: LD_STRING DC-FSol1-1
19393: PPUSH
19394: CALL 6160 0 3
// end ; end ;
19398: PPOPN 1
19400: END
// on UnitDestroyed ( unit ) do var i ;
19401: LD_INT 0
19403: PPUSH
// begin if GetSide ( unit ) = 3 then
19404: LD_VAR 0 1
19408: PPUSH
19409: CALL_OW 255
19413: PUSH
19414: LD_INT 3
19416: EQUAL
19417: IFFALSE 20187
// begin if GetType ( unit ) = unit_building then
19419: LD_VAR 0 1
19423: PPUSH
19424: CALL_OW 247
19428: PUSH
19429: LD_INT 3
19431: EQUAL
19432: IFFALSE 20124
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 266
19443: PUSH
19444: LD_INT 31
19446: EQUAL
19447: PUSH
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 266
19457: PUSH
19458: LD_INT 32
19460: EQUAL
19461: OR
19462: PUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 266
19472: PUSH
19473: LD_INT 36
19475: EQUAL
19476: OR
19477: PUSH
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 266
19487: PUSH
19488: LD_INT 0
19490: EQUAL
19491: OR
19492: PUSH
19493: LD_VAR 0 1
19497: PPUSH
19498: CALL_OW 266
19502: PUSH
19503: LD_INT 24
19505: EQUAL
19506: OR
19507: PUSH
19508: LD_VAR 0 1
19512: PPUSH
19513: CALL_OW 266
19517: PUSH
19518: LD_INT 17
19520: EQUAL
19521: OR
19522: PUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 266
19532: PUSH
19533: LD_INT 25
19535: EQUAL
19536: OR
19537: PUSH
19538: LD_VAR 0 1
19542: PPUSH
19543: CALL_OW 266
19547: PUSH
19548: LD_INT 19
19550: EQUAL
19551: OR
19552: PUSH
19553: LD_VAR 0 1
19557: PPUSH
19558: CALL_OW 266
19562: PUSH
19563: LD_INT 20
19565: EQUAL
19566: OR
19567: PUSH
19568: LD_VAR 0 1
19572: PPUSH
19573: CALL_OW 266
19577: PUSH
19578: LD_INT 18
19580: EQUAL
19581: OR
19582: PUSH
19583: LD_VAR 0 1
19587: PPUSH
19588: CALL_OW 266
19592: PUSH
19593: LD_INT 21
19595: EQUAL
19596: OR
19597: PUSH
19598: LD_VAR 0 1
19602: PPUSH
19603: CALL_OW 266
19607: PUSH
19608: LD_INT 23
19610: EQUAL
19611: OR
19612: PUSH
19613: LD_VAR 0 1
19617: PPUSH
19618: CALL_OW 266
19622: PUSH
19623: LD_INT 16
19625: EQUAL
19626: OR
19627: PUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 266
19637: PUSH
19638: LD_INT 6
19640: EQUAL
19641: OR
19642: PUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 266
19652: PUSH
19653: LD_INT 29
19655: EQUAL
19656: OR
19657: PUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 266
19667: PUSH
19668: LD_INT 26
19670: EQUAL
19671: OR
19672: PUSH
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 266
19682: PUSH
19683: LD_INT 30
19685: EQUAL
19686: OR
19687: PUSH
19688: LD_VAR 0 1
19692: PPUSH
19693: CALL_OW 266
19697: PUSH
19698: LD_INT 28
19700: EQUAL
19701: OR
19702: PUSH
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 266
19712: PUSH
19713: LD_INT 27
19715: EQUAL
19716: OR
19717: PUSH
19718: LD_VAR 0 1
19722: PPUSH
19723: CALL_OW 266
19727: PUSH
19728: LD_INT 33
19730: EQUAL
19731: OR
19732: PUSH
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 266
19742: PUSH
19743: LD_INT 2
19745: EQUAL
19746: OR
19747: PUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 266
19757: PUSH
19758: LD_INT 4
19760: EQUAL
19761: OR
19762: IFFALSE 19848
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
19764: LD_ADDR_EXP 30
19768: PUSH
19769: LD_EXP 30
19773: PUSH
19774: LD_VAR 0 1
19778: PPUSH
19779: CALL_OW 266
19783: ADD
19784: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19785: LD_ADDR_EXP 30
19789: PUSH
19790: LD_EXP 30
19794: PUSH
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 250
19804: ADD
19805: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19806: LD_ADDR_EXP 30
19810: PUSH
19811: LD_EXP 30
19815: PUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 251
19825: ADD
19826: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19827: LD_ADDR_EXP 30
19831: PUSH
19832: LD_EXP 30
19836: PUSH
19837: LD_VAR 0 1
19841: PPUSH
19842: CALL_OW 254
19846: ADD
19847: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
19848: LD_VAR 0 1
19852: PPUSH
19853: CALL_OW 266
19857: PUSH
19858: LD_INT 1
19860: EQUAL
19861: IFFALSE 19940
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
19863: LD_ADDR_EXP 30
19867: PUSH
19868: LD_EXP 30
19872: PUSH
19873: LD_INT 0
19875: ADD
19876: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19877: LD_ADDR_EXP 30
19881: PUSH
19882: LD_EXP 30
19886: PUSH
19887: LD_VAR 0 1
19891: PPUSH
19892: CALL_OW 250
19896: ADD
19897: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19898: LD_ADDR_EXP 30
19902: PUSH
19903: LD_EXP 30
19907: PUSH
19908: LD_VAR 0 1
19912: PPUSH
19913: CALL_OW 251
19917: ADD
19918: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19919: LD_ADDR_EXP 30
19923: PUSH
19924: LD_EXP 30
19928: PUSH
19929: LD_VAR 0 1
19933: PPUSH
19934: CALL_OW 254
19938: ADD
19939: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL_OW 266
19949: PUSH
19950: LD_INT 3
19952: EQUAL
19953: IFFALSE 20032
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
19955: LD_ADDR_EXP 30
19959: PUSH
19960: LD_EXP 30
19964: PUSH
19965: LD_INT 2
19967: ADD
19968: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19969: LD_ADDR_EXP 30
19973: PUSH
19974: LD_EXP 30
19978: PUSH
19979: LD_VAR 0 1
19983: PPUSH
19984: CALL_OW 250
19988: ADD
19989: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19990: LD_ADDR_EXP 30
19994: PUSH
19995: LD_EXP 30
19999: PUSH
20000: LD_VAR 0 1
20004: PPUSH
20005: CALL_OW 251
20009: ADD
20010: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20011: LD_ADDR_EXP 30
20015: PUSH
20016: LD_EXP 30
20020: PUSH
20021: LD_VAR 0 1
20025: PPUSH
20026: CALL_OW 254
20030: ADD
20031: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20032: LD_VAR 0 1
20036: PPUSH
20037: CALL_OW 266
20041: PUSH
20042: LD_INT 5
20044: EQUAL
20045: IFFALSE 20124
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20047: LD_ADDR_EXP 30
20051: PUSH
20052: LD_EXP 30
20056: PUSH
20057: LD_INT 4
20059: ADD
20060: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20061: LD_ADDR_EXP 30
20065: PUSH
20066: LD_EXP 30
20070: PUSH
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 250
20080: ADD
20081: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20082: LD_ADDR_EXP 30
20086: PUSH
20087: LD_EXP 30
20091: PUSH
20092: LD_VAR 0 1
20096: PPUSH
20097: CALL_OW 251
20101: ADD
20102: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20103: LD_ADDR_EXP 30
20107: PUSH
20108: LD_EXP 30
20112: PUSH
20113: LD_VAR 0 1
20117: PPUSH
20118: CALL_OW 254
20122: ADD
20123: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20124: LD_VAR 0 1
20128: PPUSH
20129: CALL_OW 247
20133: PUSH
20134: LD_INT 1
20136: EQUAL
20137: IFFALSE 20187
// begin for i in defenders_list do
20139: LD_ADDR_VAR 0 2
20143: PUSH
20144: LD_EXP 31
20148: PUSH
20149: FOR_IN
20150: IFFALSE 20185
// if i = unit then
20152: LD_VAR 0 2
20156: PUSH
20157: LD_VAR 0 1
20161: EQUAL
20162: IFFALSE 20183
// defenders_list = defenders_list diff [ unit ] ;
20164: LD_ADDR_EXP 31
20168: PUSH
20169: LD_EXP 31
20173: PUSH
20174: LD_VAR 0 1
20178: PUSH
20179: EMPTY
20180: LIST
20181: DIFF
20182: ST_TO_ADDR
20183: GO 20149
20185: POP
20186: POP
// end ; end ; end ; end_of_file
20187: PPOPN 2
20189: END
// every 0 0$1 do
20190: GO 20192
20192: DISABLE
// begin enable ;
20193: ENABLE
// if escapeAvalaible = 0 then
20194: LD_EXP 35
20198: PUSH
20199: LD_INT 0
20201: EQUAL
20202: IFFALSE 20214
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20204: LD_INT 3
20206: PPUSH
20207: LD_INT 6
20209: PPUSH
20210: CALL 7405 0 2
// if escapeAvalaible = 0 then
20214: LD_EXP 35
20218: PUSH
20219: LD_INT 0
20221: EQUAL
20222: IFFALSE 20234
// DefenseBase ( 1 , RussianBaseTerritory ) ;
20224: LD_INT 1
20226: PPUSH
20227: LD_INT 24
20229: PPUSH
20230: CALL 8152 0 2
// if russianAI = 1 then
20234: LD_EXP 26
20238: PUSH
20239: LD_INT 1
20241: EQUAL
20242: IFFALSE 20305
// begin RepairBuilding ( 3 , ruDepot ) ;
20244: LD_INT 3
20246: PPUSH
20247: LD_EXP 27
20251: PPUSH
20252: CALL 8452 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
20256: LD_INT 3
20258: PPUSH
20259: LD_INT 7
20261: PPUSH
20262: LD_INT 6
20264: PPUSH
20265: LD_EXP 28
20269: PPUSH
20270: CALL 8917 0 4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20274: LD_INT 3
20276: PPUSH
20277: LD_EXP 30
20281: PPUSH
20282: CALL 8711 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
20286: LD_INT 6
20288: PPUSH
20289: LD_INT 8
20291: PPUSH
20292: LD_INT 93
20294: PPUSH
20295: LD_INT 93
20297: PPUSH
20298: LD_INT 1
20300: PPUSH
20301: CALL 9194 0 5
// end ; if SikorskyArrive = 1 then
20305: LD_EXP 17
20309: PUSH
20310: LD_INT 1
20312: EQUAL
20313: IFFALSE 20334
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
20315: LD_INT 3
20317: PPUSH
20318: LD_INT 10
20320: PPUSH
20321: LD_INT 53
20323: PPUSH
20324: LD_INT 59
20326: PPUSH
20327: LD_INT 3
20329: PPUSH
20330: CALL 9194 0 5
// end ;
20334: END
// every 0 0$1 trigger russianAI = 1 do var i ;
20335: LD_EXP 26
20339: PUSH
20340: LD_INT 1
20342: EQUAL
20343: IFFALSE 20619
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
20351: LD_ADDR_VAR 0 1
20355: PUSH
20356: LD_INT 22
20358: PUSH
20359: LD_INT 3
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 21
20368: PUSH
20369: LD_INT 3
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 30
20378: PUSH
20379: LD_INT 32
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 3
20388: PUSH
20389: LD_INT 2
20391: PUSH
20392: LD_INT 35
20394: PUSH
20395: LD_INT 43
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 35
20404: PUSH
20405: LD_INT 44
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 35
20414: PUSH
20415: LD_INT 46
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: PUSH
20443: FOR_IN
20444: IFFALSE 20483
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_INT 43
20453: PUSH
20454: LD_INT 44
20456: PUSH
20457: LD_INT 46
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PPUSH
20468: LD_INT 3
20470: PPUSH
20471: CALL_OW 12
20475: ARRAY
20476: PPUSH
20477: CALL_OW 431
20481: GO 20443
20483: POP
20484: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
20485: LD_ADDR_VAR 0 1
20489: PUSH
20490: LD_INT 22
20492: PUSH
20493: LD_INT 3
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 21
20502: PUSH
20503: LD_INT 3
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 30
20512: PUSH
20513: LD_INT 33
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 3
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 35
20528: PUSH
20529: LD_INT 43
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 35
20538: PUSH
20539: LD_INT 44
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 35
20548: PUSH
20549: LD_INT 46
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: PPUSH
20572: CALL_OW 69
20576: PUSH
20577: FOR_IN
20578: IFFALSE 20617
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_INT 43
20587: PUSH
20588: LD_INT 44
20590: PUSH
20591: LD_INT 46
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: PPUSH
20602: LD_INT 3
20604: PPUSH
20605: CALL_OW 12
20609: ARRAY
20610: PPUSH
20611: CALL_OW 431
20615: GO 20577
20617: POP
20618: POP
// end ;
20619: PPOPN 1
20621: END
// every 0 0$1 trigger SikorskyAI = 1 do
20622: LD_EXP 19
20626: PUSH
20627: LD_INT 1
20629: EQUAL
20630: IFFALSE 20668
20632: GO 20634
20634: DISABLE
// begin enable ;
20635: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
20636: LD_INT 4
20638: PPUSH
20639: LD_INT 10
20641: PPUSH
20642: LD_INT 93
20644: PPUSH
20645: LD_INT 93
20647: PPUSH
20648: LD_INT 3
20650: PPUSH
20651: CALL 9194 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
20655: LD_INT 4
20657: PPUSH
20658: LD_INT 11
20660: PPUSH
20661: LD_INT 3
20663: PPUSH
20664: CALL 14575 0 3
// end ;
20668: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20669: LD_EXP 26
20673: PUSH
20674: LD_INT 1
20676: EQUAL
20677: PUSH
20678: LD_EXP 29
20682: PPUSH
20683: CALL_OW 302
20687: AND
20688: PUSH
20689: LD_EXP 29
20693: PPUSH
20694: CALL_OW 255
20698: PUSH
20699: LD_INT 3
20701: EQUAL
20702: AND
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_INT 3
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 21
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 33
20726: PUSH
20727: LD_INT 3
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: LIST
20738: PPUSH
20739: CALL_OW 69
20743: PUSH
20744: LD_INT 0
20746: EQUAL
20747: AND
20748: IFFALSE 20927
20750: GO 20752
20752: DISABLE
// begin enable ;
20753: ENABLE
// if Difficulty = 1 then
20754: LD_OWVAR 67
20758: PUSH
20759: LD_INT 1
20761: EQUAL
20762: IFFALSE 20813
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
20764: LD_INT 3
20766: PPUSH
20767: LD_EXP 29
20771: PPUSH
20772: LD_INT 5
20774: PPUSH
20775: LD_INT 8
20777: PPUSH
20778: CALL_OW 12
20782: PPUSH
20783: LD_INT 1
20785: PPUSH
20786: LD_INT 43
20788: PUSH
20789: LD_INT 44
20791: PUSH
20792: LD_INT 46
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: PPUSH
20800: LD_INT 1
20802: PPUSH
20803: LD_INT 3
20805: PPUSH
20806: LD_INT 24
20808: PPUSH
20809: CALL 10029 0 8
// if Difficulty = 2 then
20813: LD_OWVAR 67
20817: PUSH
20818: LD_INT 2
20820: EQUAL
20821: IFFALSE 20872
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
20823: LD_INT 3
20825: PPUSH
20826: LD_EXP 29
20830: PPUSH
20831: LD_INT 6
20833: PPUSH
20834: LD_INT 8
20836: PPUSH
20837: CALL_OW 12
20841: PPUSH
20842: LD_INT 1
20844: PPUSH
20845: LD_INT 44
20847: PUSH
20848: LD_INT 44
20850: PUSH
20851: LD_INT 46
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PPUSH
20859: LD_INT 1
20861: PPUSH
20862: LD_INT 3
20864: PPUSH
20865: LD_INT 24
20867: PPUSH
20868: CALL 10029 0 8
// if Difficulty = 3 then
20872: LD_OWVAR 67
20876: PUSH
20877: LD_INT 3
20879: EQUAL
20880: IFFALSE 20927
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
20882: LD_INT 3
20884: PPUSH
20885: LD_EXP 29
20889: PPUSH
20890: LD_INT 7
20892: PPUSH
20893: LD_INT 8
20895: PPUSH
20896: CALL_OW 12
20900: PPUSH
20901: LD_INT 1
20903: PPUSH
20904: LD_INT 44
20906: PUSH
20907: LD_INT 46
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PPUSH
20914: LD_INT 1
20916: PPUSH
20917: LD_INT 3
20919: PPUSH
20920: LD_INT 24
20922: PPUSH
20923: CALL 10029 0 8
// end ;
20927: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
20928: LD_EXP 37
20932: PUSH
20933: LD_INT 1
20935: EQUAL
20936: IFFALSE 21018
20938: GO 20940
20940: DISABLE
20941: LD_INT 0
20943: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
20944: LD_ADDR_VAR 0 1
20948: PUSH
20949: LD_INT 22
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 3
20971: PUSH
20972: LD_INT 24
20974: PUSH
20975: LD_INT 650
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: PPUSH
20991: CALL_OW 69
20995: PUSH
20996: FOR_IN
20997: IFFALSE 21016
// ComMoveXY ( i , 51 , 12 ) ;
20999: LD_VAR 0 1
21003: PPUSH
21004: LD_INT 51
21006: PPUSH
21007: LD_INT 12
21009: PPUSH
21010: CALL_OW 111
21014: GO 20996
21016: POP
21017: POP
// end ; end_of_file
21018: PPOPN 1
21020: END
// every 3 3$20 trigger firstAttack = 1 do
21021: LD_EXP 32
21025: PUSH
21026: LD_INT 1
21028: EQUAL
21029: IFFALSE 21135
21031: GO 21033
21033: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21034: LD_INT 6
21036: PPUSH
21037: LD_INT 3
21039: PPUSH
21040: LD_INT 5
21042: PPUSH
21043: LD_INT 6
21045: PPUSH
21046: CALL_OW 12
21050: PUSH
21051: LD_INT 5
21053: PPUSH
21054: LD_INT 6
21056: PPUSH
21057: CALL_OW 12
21061: PUSH
21062: LD_INT 5
21064: PPUSH
21065: LD_INT 6
21067: PPUSH
21068: CALL_OW 12
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: PUSH
21078: LD_OWVAR 67
21082: ARRAY
21083: PPUSH
21084: LD_INT 0
21086: PPUSH
21087: LD_INT 0
21089: PPUSH
21090: LD_INT 0
21092: PPUSH
21093: LD_INT 0
21095: PPUSH
21096: LD_EXP 24
21100: PPUSH
21101: LD_EXP 25
21105: PPUSH
21106: CALL_OW 12
21110: PPUSH
21111: LD_INT 16
21113: PPUSH
21114: LD_INT 7
21116: PPUSH
21117: LD_INT 1
21119: PPUSH
21120: LD_INT 1
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 12
21130: PPUSH
21131: CALL 10593 0 12
21135: END
// every 3 3$40 trigger firstAttack = 1 do
21136: LD_EXP 32
21140: PUSH
21141: LD_INT 1
21143: EQUAL
21144: IFFALSE 21236
21146: GO 21148
21148: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21149: LD_INT 16
21151: PPUSH
21152: LD_INT 6
21154: PPUSH
21155: LD_INT 3
21157: PPUSH
21158: LD_INT 4
21160: PPUSH
21161: CALL_OW 12
21165: PUSH
21166: LD_INT 4
21168: PPUSH
21169: LD_INT 5
21171: PPUSH
21172: CALL_OW 12
21176: PUSH
21177: LD_INT 5
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: LD_OWVAR 67
21189: ARRAY
21190: PPUSH
21191: LD_EXP 24
21195: PPUSH
21196: LD_EXP 25
21200: PPUSH
21201: CALL_OW 12
21205: PPUSH
21206: LD_INT 3
21208: PPUSH
21209: LD_INT 1
21211: PPUSH
21212: LD_INT 3
21214: PPUSH
21215: LD_INT 44
21217: PUSH
21218: LD_INT 46
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PPUSH
21225: EMPTY
21226: PPUSH
21227: EMPTY
21228: PPUSH
21229: LD_INT 1
21231: PPUSH
21232: CALL 12886 0 11
21236: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
21237: LD_EXP 32
21241: PUSH
21242: LD_INT 1
21244: EQUAL
21245: PUSH
21246: LD_EXP 38
21250: PUSH
21251: LD_INT 0
21253: EQUAL
21254: AND
21255: IFFALSE 21361
21257: GO 21259
21259: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21260: LD_INT 6
21262: PPUSH
21263: LD_INT 3
21265: PPUSH
21266: LD_INT 5
21268: PPUSH
21269: LD_INT 6
21271: PPUSH
21272: CALL_OW 12
21276: PUSH
21277: LD_INT 5
21279: PPUSH
21280: LD_INT 6
21282: PPUSH
21283: CALL_OW 12
21287: PUSH
21288: LD_INT 5
21290: PPUSH
21291: LD_INT 6
21293: PPUSH
21294: CALL_OW 12
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: LD_OWVAR 67
21308: ARRAY
21309: PPUSH
21310: LD_INT 0
21312: PPUSH
21313: LD_INT 0
21315: PPUSH
21316: LD_INT 0
21318: PPUSH
21319: LD_INT 0
21321: PPUSH
21322: LD_EXP 24
21326: PPUSH
21327: LD_EXP 25
21331: PPUSH
21332: CALL_OW 12
21336: PPUSH
21337: LD_INT 16
21339: PPUSH
21340: LD_INT 7
21342: PPUSH
21343: LD_INT 1
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: LD_INT 3
21351: PPUSH
21352: CALL_OW 12
21356: PPUSH
21357: CALL 10593 0 12
21361: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
21362: LD_EXP 32
21366: PUSH
21367: LD_INT 1
21369: EQUAL
21370: PUSH
21371: LD_EXP 38
21375: PUSH
21376: LD_INT 0
21378: EQUAL
21379: AND
21380: IFFALSE 21476
21382: GO 21384
21384: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
21385: LD_INT 16
21387: PPUSH
21388: LD_INT 6
21390: PPUSH
21391: LD_INT 5
21393: PPUSH
21394: LD_INT 6
21396: PPUSH
21397: CALL_OW 12
21401: PUSH
21402: LD_INT 6
21404: PPUSH
21405: LD_INT 7
21407: PPUSH
21408: CALL_OW 12
21412: PUSH
21413: LD_INT 7
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: LD_OWVAR 67
21425: ARRAY
21426: PPUSH
21427: LD_EXP 24
21431: PPUSH
21432: LD_EXP 25
21436: PPUSH
21437: CALL_OW 12
21441: PPUSH
21442: LD_INT 3
21444: PPUSH
21445: LD_INT 1
21447: PPUSH
21448: LD_INT 3
21450: PPUSH
21451: LD_INT 43
21453: PUSH
21454: LD_INT 44
21456: PUSH
21457: LD_INT 46
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: PPUSH
21465: EMPTY
21466: PPUSH
21467: EMPTY
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: CALL 12886 0 11
21476: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
21477: LD_EXP 32
21481: PUSH
21482: LD_INT 1
21484: EQUAL
21485: PUSH
21486: LD_EXP 38
21490: PUSH
21491: LD_INT 0
21493: EQUAL
21494: AND
21495: IFFALSE 21571
21497: GO 21499
21499: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21500: LD_INT 16
21502: PPUSH
21503: LD_INT 6
21505: PPUSH
21506: LD_INT 5
21508: PUSH
21509: LD_INT 6
21511: PUSH
21512: LD_INT 7
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: LIST
21519: PUSH
21520: LD_OWVAR 67
21524: ARRAY
21525: PPUSH
21526: LD_EXP 24
21530: PPUSH
21531: LD_EXP 25
21535: PPUSH
21536: CALL_OW 12
21540: PPUSH
21541: LD_INT 3
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: LD_INT 3
21549: PPUSH
21550: LD_INT 44
21552: PUSH
21553: LD_INT 46
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PPUSH
21560: EMPTY
21561: PPUSH
21562: EMPTY
21563: PPUSH
21564: LD_INT 1
21566: PPUSH
21567: CALL 12886 0 11
21571: END
// every 1 1$00 trigger secondAttack = 1 do
21572: LD_EXP 33
21576: PUSH
21577: LD_INT 1
21579: EQUAL
21580: IFFALSE 21686
21582: GO 21584
21584: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21585: LD_INT 6
21587: PPUSH
21588: LD_INT 3
21590: PPUSH
21591: LD_INT 4
21593: PPUSH
21594: LD_INT 7
21596: PPUSH
21597: CALL_OW 12
21601: PUSH
21602: LD_INT 6
21604: PPUSH
21605: LD_INT 7
21607: PPUSH
21608: CALL_OW 12
21612: PUSH
21613: LD_INT 6
21615: PPUSH
21616: LD_INT 10
21618: PPUSH
21619: CALL_OW 12
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: PUSH
21629: LD_OWVAR 67
21633: ARRAY
21634: PPUSH
21635: LD_INT 0
21637: PPUSH
21638: LD_INT 0
21640: PPUSH
21641: LD_INT 0
21643: PPUSH
21644: LD_INT 0
21646: PPUSH
21647: LD_EXP 24
21651: PPUSH
21652: LD_EXP 25
21656: PPUSH
21657: CALL_OW 12
21661: PPUSH
21662: LD_INT 16
21664: PPUSH
21665: LD_INT 7
21667: PPUSH
21668: LD_INT 1
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: LD_INT 3
21676: PPUSH
21677: CALL_OW 12
21681: PPUSH
21682: CALL 10593 0 12
21686: END
// every 1 1$00 trigger secondAttack = 1 do
21687: LD_EXP 33
21691: PUSH
21692: LD_INT 1
21694: EQUAL
21695: IFFALSE 21799
21697: GO 21699
21699: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
21700: LD_INT 16
21702: PPUSH
21703: LD_INT 6
21705: PPUSH
21706: LD_INT 5
21708: PPUSH
21709: LD_INT 8
21711: PPUSH
21712: CALL_OW 12
21716: PUSH
21717: LD_INT 6
21719: PPUSH
21720: LD_INT 9
21722: PPUSH
21723: CALL_OW 12
21727: PUSH
21728: LD_INT 7
21730: PPUSH
21731: LD_INT 9
21733: PPUSH
21734: CALL_OW 12
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: LD_OWVAR 67
21748: ARRAY
21749: PPUSH
21750: LD_EXP 24
21754: PPUSH
21755: LD_EXP 25
21759: PPUSH
21760: CALL_OW 12
21764: PPUSH
21765: LD_INT 3
21767: PPUSH
21768: LD_INT 1
21770: PPUSH
21771: LD_INT 3
21773: PPUSH
21774: LD_INT 43
21776: PUSH
21777: LD_INT 44
21779: PUSH
21780: LD_INT 46
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: PPUSH
21788: EMPTY
21789: PPUSH
21790: EMPTY
21791: PPUSH
21792: LD_INT 1
21794: PPUSH
21795: CALL 12886 0 11
21799: END
// every 22 22$0 trigger SikorskyArrive = 0 do
21800: LD_EXP 17
21804: PUSH
21805: LD_INT 0
21807: EQUAL
21808: IFFALSE 21914
21810: GO 21812
21812: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21813: LD_INT 6
21815: PPUSH
21816: LD_INT 3
21818: PPUSH
21819: LD_INT 8
21821: PPUSH
21822: LD_INT 9
21824: PPUSH
21825: CALL_OW 12
21829: PUSH
21830: LD_INT 7
21832: PPUSH
21833: LD_INT 10
21835: PPUSH
21836: CALL_OW 12
21840: PUSH
21841: LD_INT 8
21843: PPUSH
21844: LD_INT 10
21846: PPUSH
21847: CALL_OW 12
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: PUSH
21857: LD_OWVAR 67
21861: ARRAY
21862: PPUSH
21863: LD_INT 0
21865: PPUSH
21866: LD_INT 0
21868: PPUSH
21869: LD_INT 0
21871: PPUSH
21872: LD_INT 0
21874: PPUSH
21875: LD_EXP 24
21879: PPUSH
21880: LD_EXP 25
21884: PPUSH
21885: CALL_OW 12
21889: PPUSH
21890: LD_INT 16
21892: PPUSH
21893: LD_INT 7
21895: PPUSH
21896: LD_INT 1
21898: PPUSH
21899: LD_INT 1
21901: PPUSH
21902: LD_INT 3
21904: PPUSH
21905: CALL_OW 12
21909: PPUSH
21910: CALL 10593 0 12
21914: END
// every 22 22$0 trigger SikorskyArrive = 0 do
21915: LD_EXP 17
21919: PUSH
21920: LD_INT 0
21922: EQUAL
21923: IFFALSE 22023
21925: GO 21927
21927: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21928: LD_INT 16
21930: PPUSH
21931: LD_INT 6
21933: PPUSH
21934: LD_INT 5
21936: PPUSH
21937: LD_INT 8
21939: PPUSH
21940: CALL_OW 12
21944: PUSH
21945: LD_INT 6
21947: PPUSH
21948: LD_INT 9
21950: PPUSH
21951: CALL_OW 12
21955: PUSH
21956: LD_INT 7
21958: PPUSH
21959: LD_INT 9
21961: PPUSH
21962: CALL_OW 12
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: PUSH
21972: LD_OWVAR 67
21976: ARRAY
21977: PPUSH
21978: LD_EXP 24
21982: PPUSH
21983: LD_EXP 25
21987: PPUSH
21988: CALL_OW 12
21992: PPUSH
21993: LD_INT 3
21995: PPUSH
21996: LD_INT 1
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: LD_INT 44
22004: PUSH
22005: LD_INT 46
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PPUSH
22012: EMPTY
22013: PPUSH
22014: EMPTY
22015: PPUSH
22016: LD_INT 1
22018: PPUSH
22019: CALL 12886 0 11
22023: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22024: LD_EXP 17
22028: PUSH
22029: LD_INT 0
22031: EQUAL
22032: IFFALSE 22138
22034: GO 22036
22036: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22037: LD_INT 6
22039: PPUSH
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 8
22045: PPUSH
22046: LD_INT 9
22048: PPUSH
22049: CALL_OW 12
22053: PUSH
22054: LD_INT 7
22056: PPUSH
22057: LD_INT 10
22059: PPUSH
22060: CALL_OW 12
22064: PUSH
22065: LD_INT 8
22067: PPUSH
22068: LD_INT 10
22070: PPUSH
22071: CALL_OW 12
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: PUSH
22081: LD_OWVAR 67
22085: ARRAY
22086: PPUSH
22087: LD_INT 0
22089: PPUSH
22090: LD_INT 0
22092: PPUSH
22093: LD_INT 0
22095: PPUSH
22096: LD_INT 0
22098: PPUSH
22099: LD_EXP 24
22103: PPUSH
22104: LD_EXP 25
22108: PPUSH
22109: CALL_OW 12
22113: PPUSH
22114: LD_INT 16
22116: PPUSH
22117: LD_INT 7
22119: PPUSH
22120: LD_INT 1
22122: PPUSH
22123: LD_INT 1
22125: PPUSH
22126: LD_INT 3
22128: PPUSH
22129: CALL_OW 12
22133: PPUSH
22134: CALL 10593 0 12
22138: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22139: LD_EXP 17
22143: PUSH
22144: LD_INT 0
22146: EQUAL
22147: IFFALSE 22247
22149: GO 22151
22151: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22152: LD_INT 16
22154: PPUSH
22155: LD_INT 6
22157: PPUSH
22158: LD_INT 5
22160: PPUSH
22161: LD_INT 8
22163: PPUSH
22164: CALL_OW 12
22168: PUSH
22169: LD_INT 6
22171: PPUSH
22172: LD_INT 9
22174: PPUSH
22175: CALL_OW 12
22179: PUSH
22180: LD_INT 7
22182: PPUSH
22183: LD_INT 9
22185: PPUSH
22186: CALL_OW 12
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: PUSH
22196: LD_OWVAR 67
22200: ARRAY
22201: PPUSH
22202: LD_EXP 24
22206: PPUSH
22207: LD_EXP 25
22211: PPUSH
22212: CALL_OW 12
22216: PPUSH
22217: LD_INT 3
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: LD_INT 3
22225: PPUSH
22226: LD_INT 44
22228: PUSH
22229: LD_INT 46
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PPUSH
22236: EMPTY
22237: PPUSH
22238: EMPTY
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: CALL 12886 0 11
22247: END
// every 35 35$0 trigger SikorskyArrive = 0 do
22248: LD_EXP 17
22252: PUSH
22253: LD_INT 0
22255: EQUAL
22256: IFFALSE 22362
22258: GO 22260
22260: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22261: LD_INT 6
22263: PPUSH
22264: LD_INT 3
22266: PPUSH
22267: LD_INT 8
22269: PPUSH
22270: LD_INT 9
22272: PPUSH
22273: CALL_OW 12
22277: PUSH
22278: LD_INT 7
22280: PPUSH
22281: LD_INT 10
22283: PPUSH
22284: CALL_OW 12
22288: PUSH
22289: LD_INT 8
22291: PPUSH
22292: LD_INT 10
22294: PPUSH
22295: CALL_OW 12
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: LD_OWVAR 67
22309: ARRAY
22310: PPUSH
22311: LD_INT 0
22313: PPUSH
22314: LD_INT 0
22316: PPUSH
22317: LD_INT 0
22319: PPUSH
22320: LD_INT 0
22322: PPUSH
22323: LD_EXP 24
22327: PPUSH
22328: LD_EXP 25
22332: PPUSH
22333: CALL_OW 12
22337: PPUSH
22338: LD_INT 16
22340: PPUSH
22341: LD_INT 7
22343: PPUSH
22344: LD_INT 1
22346: PPUSH
22347: LD_INT 1
22349: PPUSH
22350: LD_INT 3
22352: PPUSH
22353: CALL_OW 12
22357: PPUSH
22358: CALL 10593 0 12
22362: END
// every 35 35$0 trigger SikorskyArrive = 0 do
22363: LD_EXP 17
22367: PUSH
22368: LD_INT 0
22370: EQUAL
22371: IFFALSE 22471
22373: GO 22375
22375: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22376: LD_INT 16
22378: PPUSH
22379: LD_INT 6
22381: PPUSH
22382: LD_INT 5
22384: PPUSH
22385: LD_INT 8
22387: PPUSH
22388: CALL_OW 12
22392: PUSH
22393: LD_INT 6
22395: PPUSH
22396: LD_INT 9
22398: PPUSH
22399: CALL_OW 12
22403: PUSH
22404: LD_INT 7
22406: PPUSH
22407: LD_INT 9
22409: PPUSH
22410: CALL_OW 12
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: PUSH
22420: LD_OWVAR 67
22424: ARRAY
22425: PPUSH
22426: LD_EXP 24
22430: PPUSH
22431: LD_EXP 25
22435: PPUSH
22436: CALL_OW 12
22440: PPUSH
22441: LD_INT 3
22443: PPUSH
22444: LD_INT 1
22446: PPUSH
22447: LD_INT 3
22449: PPUSH
22450: LD_INT 44
22452: PUSH
22453: LD_INT 46
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PPUSH
22460: EMPTY
22461: PPUSH
22462: EMPTY
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL 12886 0 11
22471: END
// every 0 0$1 trigger timerStatus = 1 do
22472: LD_EXP 34
22476: PUSH
22477: LD_INT 1
22479: EQUAL
22480: IFFALSE 22517
22482: GO 22484
22484: DISABLE
// begin enable ;
22485: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
22486: LD_ADDR_OWVAR 47
22490: PUSH
22491: LD_STRING #Am08-1
22493: PUSH
22494: LD_EXP 18
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
22503: LD_ADDR_EXP 18
22507: PUSH
22508: LD_EXP 18
22512: PUSH
22513: LD_INT 35
22515: MINUS
22516: ST_TO_ADDR
// end ; end_of_file
22517: END
// every 1 1$0 do
22518: GO 22520
22520: DISABLE
// begin if supply <= 13 and supply > 7 then
22521: LD_EXP 39
22525: PUSH
22526: LD_INT 13
22528: LESSEQUAL
22529: PUSH
22530: LD_EXP 39
22534: PUSH
22535: LD_INT 7
22537: GREATER
22538: AND
22539: IFFALSE 22562
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
22541: LD_INT 3
22543: PPUSH
22544: LD_INT 5
22546: PPUSH
22547: CALL_OW 12
22551: PPUSH
22552: LD_INT 5
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: CALL_OW 55
// if supply <= 7 and supply > 4 then
22562: LD_EXP 39
22566: PUSH
22567: LD_INT 7
22569: LESSEQUAL
22570: PUSH
22571: LD_EXP 39
22575: PUSH
22576: LD_INT 4
22578: GREATER
22579: AND
22580: IFFALSE 22603
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
22582: LD_INT 3
22584: PPUSH
22585: LD_INT 5
22587: PPUSH
22588: CALL_OW 12
22592: PPUSH
22593: LD_INT 20
22595: PPUSH
22596: LD_INT 1
22598: PPUSH
22599: CALL_OW 55
// if supply <= 4 and supply > 0 then
22603: LD_EXP 39
22607: PUSH
22608: LD_INT 4
22610: LESSEQUAL
22611: PUSH
22612: LD_EXP 39
22616: PUSH
22617: LD_INT 0
22619: GREATER
22620: AND
22621: IFFALSE 22644
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
22623: LD_INT 3
22625: PPUSH
22626: LD_INT 5
22628: PPUSH
22629: CALL_OW 12
22633: PPUSH
22634: LD_INT 21
22636: PPUSH
22637: LD_INT 1
22639: PPUSH
22640: CALL_OW 55
// if supply > 0 then
22644: LD_EXP 39
22648: PUSH
22649: LD_INT 0
22651: GREATER
22652: IFFALSE 22669
// begin supply = supply - 1 ;
22654: LD_ADDR_EXP 39
22658: PUSH
22659: LD_EXP 39
22663: PUSH
22664: LD_INT 1
22666: MINUS
22667: ST_TO_ADDR
// enable ;
22668: ENABLE
// end ; end ; end_of_file
22669: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
22670: LD_EXP 38
22674: PUSH
22675: LD_INT 1
22677: EQUAL
22678: PUSH
22679: LD_EXP 1
22683: PPUSH
22684: CALL_OW 301
22688: AND
22689: IFFALSE 22701
22691: GO 22693
22693: DISABLE
// YouLost ( JMM ) ;
22694: LD_STRING JMM
22696: PPUSH
22697: CALL_OW 104
22701: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
22702: LD_EXP 17
22706: PUSH
22707: LD_INT 1
22709: EQUAL
22710: PUSH
22711: LD_EXP 15
22715: PPUSH
22716: CALL_OW 301
22720: AND
22721: IFFALSE 22753
22723: GO 22725
22725: DISABLE
// begin DialogueOn ;
22726: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
22730: LD_EXP 22
22734: PPUSH
22735: LD_STRING D8a-Pow-1
22737: PPUSH
22738: CALL_OW 94
// DialogueOff ;
22742: CALL_OW 7
// YouLost ( Dismissed ) ;
22746: LD_STRING Dismissed
22748: PPUSH
22749: CALL_OW 104
// end ;
22753: END
// every 0 0$1 trigger IsDead ( amDepot ) do
22754: LD_EXP 36
22758: PPUSH
22759: CALL_OW 301
22763: IFFALSE 22775
22765: GO 22767
22767: DISABLE
// YouLost ( Destroyed ) ; end_of_file
22768: LD_STRING Destroyed
22770: PPUSH
22771: CALL_OW 104
22775: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
22776: LD_EXP 23
22780: PPUSH
22781: CALL_OW 301
22785: IFFALSE 23130
22787: GO 22789
22789: DISABLE
22790: LD_INT 0
22792: PPUSH
// begin russianAI = 0 ;
22793: LD_ADDR_EXP 26
22797: PUSH
22798: LD_INT 0
22800: ST_TO_ADDR
// escapeAvalaible = 1 ;
22801: LD_ADDR_EXP 35
22805: PUSH
22806: LD_INT 1
22808: ST_TO_ADDR
// InGameOn ;
22809: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
22813: LD_INT 3
22815: PPUSH
22816: LD_INT 1
22818: PPUSH
22819: LD_INT 1
22821: PPUSH
22822: LD_INT 0
22824: PPUSH
22825: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
22829: LD_INT 6
22831: PPUSH
22832: LD_INT 1
22834: PPUSH
22835: LD_INT 1
22837: PPUSH
22838: LD_INT 0
22840: PPUSH
22841: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
22845: LD_INT 3
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
22855: LD_INT 97
22857: PPUSH
22858: LD_INT 91
22860: PPUSH
22861: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22865: LD_INT 22
22867: PUSH
22868: LD_INT 3
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 21
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PPUSH
22889: CALL_OW 69
22893: PPUSH
22894: CALL_OW 121
// wait ( 0 0$01 ) ;
22898: LD_INT 35
22900: PPUSH
22901: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
22905: LD_INT 22
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 21
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PPUSH
22929: CALL_OW 69
22933: PPUSH
22934: LD_INT 124
22936: PPUSH
22937: LD_INT 98
22939: PPUSH
22940: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
22944: LD_INT 22
22946: PUSH
22947: LD_INT 6
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 21
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: PPUSH
22973: CALL_OW 121
// wait ( 0 0$01 ) ;
22977: LD_INT 35
22979: PPUSH
22980: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
22984: LD_INT 22
22986: PUSH
22987: LD_INT 6
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 21
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PPUSH
23008: CALL_OW 69
23012: PPUSH
23013: LD_INT 124
23015: PPUSH
23016: LD_INT 98
23018: PPUSH
23019: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23023: LD_INT 22
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 21
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PPUSH
23047: CALL_OW 69
23051: PPUSH
23052: LD_INT 124
23054: PPUSH
23055: LD_INT 98
23057: PPUSH
23058: CALL_OW 114
// wait ( 0 0$4 ) ;
23062: LD_INT 140
23064: PPUSH
23065: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
23069: LD_INT 124
23071: PPUSH
23072: LD_INT 98
23074: PPUSH
23075: CALL_OW 84
// if SikorskyStatus = 1 then
23079: LD_EXP 20
23083: PUSH
23084: LD_INT 1
23086: EQUAL
23087: IFFALSE 23101
// begin Say ( Sikorski , D9-Sik-1 ) ;
23089: LD_EXP 15
23093: PPUSH
23094: LD_STRING D9-Sik-1
23096: PPUSH
23097: CALL_OW 88
// end ; if SikorskyStatus = 2 then
23101: LD_EXP 20
23105: PUSH
23106: LD_INT 2
23108: EQUAL
23109: IFFALSE 23130
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
23111: LD_EXP 22
23115: PPUSH
23116: LD_STRING D8b-Pow-1
23118: PPUSH
23119: CALL_OW 94
// YouLost ( Dismissed ) ;
23123: LD_STRING Dismissed
23125: PPUSH
23126: CALL_OW 104
// end ; end ;
23130: PPOPN 1
23132: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
23133: LD_INT 23
23135: PUSH
23136: LD_INT 3
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 21
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 24
23155: PUSH
23156: LD_INT 250
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: PUSH
23173: LD_INT 0
23175: EQUAL
23176: IFFALSE 23185
23178: GO 23180
23180: DISABLE
// FinishMission ;
23181: CALL 23186 0 0
23185: END
// export function FinishMission ; var tmp ; begin
23186: LD_INT 0
23188: PPUSH
23189: PPUSH
// AddMedal ( med1 , 1 ) ;
23190: LD_STRING med1
23192: PPUSH
23193: LD_INT 1
23195: PPUSH
23196: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
23200: LD_STRING med2
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
23210: LD_STRING perfect
23212: PPUSH
23213: LD_INT 1
23215: PPUSH
23216: CALL_OW 101
// GiveMedals ( Main ) ;
23220: LD_STRING Main
23222: PPUSH
23223: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23227: LD_INT 22
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 23
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 21
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: LD_INT 25
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 25
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 25
23282: PUSH
23283: LD_INT 3
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 25
23292: PUSH
23293: LD_INT 4
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: PPUSH
23313: CALL_OW 69
23317: PPUSH
23318: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23322: LD_EXP 1
23326: PPUSH
23327: LD_EXP 41
23331: PUSH
23332: LD_STRING JMM
23334: STR
23335: PPUSH
23336: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23340: LD_EXP 2
23344: PPUSH
23345: LD_EXP 41
23349: PUSH
23350: LD_STRING Brown
23352: STR
23353: PPUSH
23354: CALL 7269 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23358: LD_EXP 3
23362: PPUSH
23363: LD_EXP 41
23367: PUSH
23368: LD_STRING Donaldson
23370: STR
23371: PPUSH
23372: CALL 7269 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23376: LD_EXP 4
23380: PPUSH
23381: LD_EXP 41
23385: PUSH
23386: LD_STRING Bobby
23388: STR
23389: PPUSH
23390: CALL 7269 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23394: LD_EXP 5
23398: PPUSH
23399: LD_EXP 41
23403: PUSH
23404: LD_STRING Cyrus
23406: STR
23407: PPUSH
23408: CALL 7269 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23412: LD_EXP 6
23416: PPUSH
23417: LD_EXP 41
23421: PUSH
23422: LD_STRING Lisa
23424: STR
23425: PPUSH
23426: CALL 7269 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23430: LD_EXP 7
23434: PPUSH
23435: LD_EXP 41
23439: PUSH
23440: LD_STRING Frank
23442: STR
23443: PPUSH
23444: CALL 7269 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23448: LD_EXP 8
23452: PPUSH
23453: LD_EXP 41
23457: PUSH
23458: LD_STRING Gladstone
23460: STR
23461: PPUSH
23462: CALL 7269 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23466: LD_EXP 9
23470: PPUSH
23471: LD_EXP 41
23475: PUSH
23476: LD_STRING Kikuchi
23478: STR
23479: PPUSH
23480: CALL 7269 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23484: LD_EXP 13
23488: PPUSH
23489: LD_EXP 41
23493: PUSH
23494: LD_STRING Denis
23496: STR
23497: PPUSH
23498: CALL 7269 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23502: LD_EXP 14
23506: PPUSH
23507: LD_EXP 41
23511: PUSH
23512: LD_STRING Joan
23514: STR
23515: PPUSH
23516: CALL 7269 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23520: LD_EXP 12
23524: PPUSH
23525: LD_EXP 41
23529: PUSH
23530: LD_STRING Houten
23532: STR
23533: PPUSH
23534: CALL 7269 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
23538: LD_INT 50
23540: PUSH
23541: EMPTY
23542: LIST
23543: PUSH
23544: LD_INT 22
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 21
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 25
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 25
23579: PUSH
23580: LD_INT 2
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 25
23589: PUSH
23590: LD_INT 3
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 25
23599: PUSH
23600: LD_INT 4
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PPUSH
23620: CALL_OW 69
23624: PUSH
23625: LD_EXP 1
23629: PUSH
23630: LD_EXP 2
23634: PUSH
23635: LD_EXP 3
23639: PUSH
23640: LD_EXP 4
23644: PUSH
23645: LD_EXP 5
23649: PUSH
23650: LD_EXP 6
23654: PUSH
23655: LD_EXP 7
23659: PUSH
23660: LD_EXP 8
23664: PUSH
23665: LD_EXP 9
23669: PUSH
23670: LD_EXP 13
23674: PUSH
23675: LD_EXP 14
23679: PUSH
23680: LD_EXP 12
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: DIFF
23699: PPUSH
23700: LD_STRING 08_other_survivors
23702: PPUSH
23703: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
23707: LD_INT 23
23709: PPUSH
23710: CALL 23723 0 1
// YouWin ;
23714: CALL_OW 103
// end ;
23718: LD_VAR 0 1
23722: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
23723: LD_INT 0
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
// gammaBase = [ ] ;
23729: LD_ADDR_VAR 0 4
23733: PUSH
23734: EMPTY
23735: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
23736: LD_ADDR_VAR 0 5
23740: PUSH
23741: LD_VAR 0 1
23745: PPUSH
23746: LD_INT 22
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 21
23758: PUSH
23759: LD_INT 3
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 50
23768: PUSH
23769: EMPTY
23770: LIST
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: PPUSH
23777: CALL_OW 70
23781: ST_TO_ADDR
// for i in buildings do
23782: LD_ADDR_VAR 0 3
23786: PUSH
23787: LD_VAR 0 5
23791: PUSH
23792: FOR_IN
23793: IFFALSE 24230
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
23795: LD_VAR 0 3
23799: PPUSH
23800: CALL_OW 266
23804: PUSH
23805: LD_INT 6
23807: PUSH
23808: LD_INT 7
23810: PUSH
23811: LD_INT 8
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: IN
23819: IFFALSE 23933
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
23821: LD_ADDR_VAR 0 4
23825: PUSH
23826: LD_VAR 0 4
23830: PUSH
23831: LD_VAR 0 3
23835: PPUSH
23836: CALL_OW 266
23840: PUSH
23841: LD_VAR 0 3
23845: PPUSH
23846: CALL_OW 250
23850: PUSH
23851: LD_VAR 0 3
23855: PPUSH
23856: CALL_OW 251
23860: PUSH
23861: LD_VAR 0 3
23865: PPUSH
23866: CALL_OW 254
23870: PUSH
23871: LD_VAR 0 3
23875: PPUSH
23876: CALL_OW 267
23880: PUSH
23881: LD_VAR 0 3
23885: PPUSH
23886: CALL_OW 248
23890: PUSH
23891: LD_VAR 0 3
23895: PPUSH
23896: LD_INT 1
23898: PPUSH
23899: CALL_OW 268
23903: PUSH
23904: LD_VAR 0 3
23908: PPUSH
23909: LD_INT 2
23911: PPUSH
23912: CALL_OW 268
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: ADD
23930: ST_TO_ADDR
23931: GO 24228
// if GetBType ( i ) = b_bunker then
23933: LD_VAR 0 3
23937: PPUSH
23938: CALL_OW 266
23942: PUSH
23943: LD_INT 32
23945: EQUAL
23946: IFFALSE 24043
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_VAR 0 4
23957: PUSH
23958: LD_VAR 0 3
23962: PPUSH
23963: CALL_OW 266
23967: PUSH
23968: LD_VAR 0 3
23972: PPUSH
23973: CALL_OW 250
23977: PUSH
23978: LD_VAR 0 3
23982: PPUSH
23983: CALL_OW 251
23987: PUSH
23988: LD_VAR 0 3
23992: PPUSH
23993: CALL_OW 254
23997: PUSH
23998: LD_VAR 0 3
24002: PPUSH
24003: CALL_OW 267
24007: PUSH
24008: LD_VAR 0 3
24012: PPUSH
24013: CALL_OW 248
24017: PUSH
24018: LD_VAR 0 3
24022: PPUSH
24023: CALL_OW 269
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: PUSH
24037: EMPTY
24038: LIST
24039: ADD
24040: ST_TO_ADDR
24041: GO 24228
// if GetBType ( i ) = b_factory then
24043: LD_VAR 0 3
24047: PPUSH
24048: CALL_OW 266
24052: PUSH
24053: LD_INT 3
24055: EQUAL
24056: IFFALSE 24146
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24058: LD_ADDR_VAR 0 4
24062: PUSH
24063: LD_VAR 0 4
24067: PPUSH
24068: LD_INT 1
24070: PPUSH
24071: LD_VAR 0 3
24075: PPUSH
24076: CALL_OW 266
24080: PUSH
24081: LD_VAR 0 3
24085: PPUSH
24086: CALL_OW 250
24090: PUSH
24091: LD_VAR 0 3
24095: PPUSH
24096: CALL_OW 251
24100: PUSH
24101: LD_VAR 0 3
24105: PPUSH
24106: CALL_OW 254
24110: PUSH
24111: LD_VAR 0 3
24115: PPUSH
24116: CALL_OW 267
24120: PUSH
24121: LD_VAR 0 3
24125: PPUSH
24126: CALL_OW 248
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: PPUSH
24139: CALL_OW 2
24143: ST_TO_ADDR
24144: GO 24228
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24146: LD_ADDR_VAR 0 4
24150: PUSH
24151: LD_VAR 0 4
24155: PUSH
24156: LD_VAR 0 3
24160: PPUSH
24161: CALL_OW 266
24165: PUSH
24166: LD_VAR 0 3
24170: PPUSH
24171: CALL_OW 250
24175: PUSH
24176: LD_VAR 0 3
24180: PPUSH
24181: CALL_OW 251
24185: PUSH
24186: LD_VAR 0 3
24190: PPUSH
24191: CALL_OW 254
24195: PUSH
24196: LD_VAR 0 3
24200: PPUSH
24201: CALL_OW 267
24205: PUSH
24206: LD_VAR 0 3
24210: PPUSH
24211: CALL_OW 248
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: PUSH
24224: EMPTY
24225: LIST
24226: ADD
24227: ST_TO_ADDR
// end ;
24228: GO 23792
24230: POP
24231: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
24232: LD_VAR 0 4
24236: PPUSH
24237: LD_STRING 08_GammaBase
24239: PPUSH
24240: CALL_OW 39
// end ;
24244: LD_VAR 0 2
24248: RET
