// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7302 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6079 0 0
// PrepareRussians ;
 229: CALL 6397 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8723 0 6
// PrepareCutsceneAttack ;
 312: CALL 6131 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6815 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6815 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6815 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6815 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6815 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6815 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6815 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6815 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6815 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6815 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6815 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6815 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6815 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6815 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6815 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6815 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 51
2588: PUSH
2589: LD_INT 10
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 3051
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2874
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2803: LD_EXP 37
2807: PPUSH
2808: LD_STRING gamma
2810: PPUSH
2811: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2815: LD_EXP 37
2819: PPUSH
2820: CALL_OW 274
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 500
2830: PUSH
2831: LD_INT 420
2833: PUSH
2834: LD_INT 350
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_OWVAR 67
2846: ARRAY
2847: PPUSH
2848: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2852: LD_EXP 37
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 200
2867: PPUSH
2868: CALL_OW 277
// end else
2872: GO 3016
// begin if bc_type = 4 then
2874: LD_OWVAR 42
2878: PUSH
2879: LD_INT 4
2881: EQUAL
2882: IFFALSE 2931
// begin bc_type = 5 ;
2884: LD_ADDR_OWVAR 42
2888: PUSH
2889: LD_INT 5
2891: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_INT 2
2904: ARRAY
2905: PPUSH
2906: LD_VAR 0 3
2910: PUSH
2911: LD_INT 3
2913: ARRAY
2914: PPUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 4
2922: ARRAY
2923: PPUSH
2924: CALL_OW 47
2928: ST_TO_ADDR
// end else
2929: GO 3016
// begin bc_type := i [ 1 ] ;
2931: LD_ADDR_OWVAR 42
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2945: LD_STRING 06_remoteVehs_1
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 30
2955: PUSH
2956: LD_INT 1
2958: EQUAL
2959: PUSH
2960: LD_OWVAR 42
2964: PUSH
2965: LD_INT 7
2967: EQUAL
2968: AND
2969: IFFALSE 2979
// bc_type := b_lab_full ;
2971: LD_ADDR_OWVAR 42
2975: PUSH
2976: LD_INT 8
2978: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_VAR 0 3
2988: PUSH
2989: LD_INT 2
2991: ARRAY
2992: PPUSH
2993: LD_VAR 0 3
2997: PUSH
2998: LD_INT 3
3000: ARRAY
3001: PPUSH
3002: LD_VAR 0 3
3006: PUSH
3007: LD_INT 4
3009: ARRAY
3010: PPUSH
3011: CALL_OW 47
3015: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 266
3025: PUSH
3026: LD_INT 32
3028: EQUAL
3029: IFFALSE 3049
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 3
3040: PUSH
3041: LD_INT 7
3043: ARRAY
3044: PPUSH
3045: CALL_OW 431
// end ;
3049: GO 2642
3051: POP
3052: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3053: LD_INT 22
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 30
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 69
3081: IFFALSE 3329
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: LD_INT 22
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 30
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3121: LD_ADDR_VAR 0 6
3125: PUSH
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 250
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 251
3145: PPUSH
3146: LD_VAR 0 4
3150: PPUSH
3151: CALL_OW 254
3155: PPUSH
3156: CALL 16635 0 3
3160: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_INT 19
3168: PUSH
3169: LD_INT 17
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3176: LD_STRING 06_remoteVehs_1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 30
3186: IFFALSE 3209
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_VAR 0 2
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: CALL_OW 2
3208: ST_TO_ADDR
// for i in tmp do
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_VAR 0 6
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3327
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3222: LD_VAR 0 3
3226: PUSH
3227: LD_INT 1
3229: ARRAY
3230: PPUSH
3231: LD_VAR 0 3
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 428
3244: PUSH
3245: LD_INT 0
3247: EQUAL
3248: IFFALSE 3325
// begin bc_type := blist [ 1 ] ;
3250: LD_ADDR_OWVAR 42
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: LD_VAR 0 3
3286: PUSH
3287: LD_INT 3
3289: ARRAY
3290: PPUSH
3291: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 3
3312: ST_TO_ADDR
// if blist = 0 then
3313: LD_VAR 0 2
3317: PUSH
3318: LD_INT 0
3320: EQUAL
3321: IFFALSE 3325
// break ;
3323: GO 3327
// end ;
3325: GO 3219
3327: POP
3328: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3329: LD_STRING 06_remoteVehs_1
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 30
3339: PUSH
3340: LD_INT 1
3342: EQUAL
3343: IFFALSE 3708
// begin bc_type = 36 ;
3345: LD_ADDR_OWVAR 42
3349: PUSH
3350: LD_INT 36
3352: ST_TO_ADDR
// bc_level = 4 ;
3353: LD_ADDR_OWVAR 43
3357: PUSH
3358: LD_INT 4
3360: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) then
3361: LD_EXP 37
3365: PPUSH
3366: LD_INT 36
3368: PPUSH
3369: LD_INT 62
3371: PPUSH
3372: LD_INT 12
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL 17505 0 6
3385: IFFALSE 3402
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3387: LD_INT 62
3389: PPUSH
3390: LD_INT 12
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 47
3400: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) then
3402: LD_EXP 37
3406: PPUSH
3407: LD_INT 36
3409: PPUSH
3410: LD_INT 37
3412: PPUSH
3413: LD_INT 18
3415: PPUSH
3416: LD_INT 2
3418: PPUSH
3419: LD_INT 0
3421: PPUSH
3422: CALL 17505 0 6
3426: IFFALSE 3443
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3428: LD_INT 37
3430: PPUSH
3431: LD_INT 18
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: CALL_OW 47
3441: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) then
3443: LD_EXP 37
3447: PPUSH
3448: LD_INT 36
3450: PPUSH
3451: LD_INT 66
3453: PPUSH
3454: LD_INT 14
3456: PPUSH
3457: LD_INT 4
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: CALL 17505 0 6
3467: IFFALSE 3484
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3469: LD_INT 66
3471: PPUSH
3472: LD_INT 14
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: CALL_OW 47
3482: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3484: LD_EXP 37
3488: PPUSH
3489: LD_INT 36
3491: PPUSH
3492: LD_INT 74
3494: PPUSH
3495: LD_INT 26
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 0
3503: PPUSH
3504: CALL 17505 0 6
3508: IFFALSE 3523
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3510: LD_INT 74
3512: PPUSH
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 3
3535: PUSH
3536: LD_INT 2
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_OWVAR 67
3551: ARRAY
3552: PUSH
3553: FOR_TO
3554: IFFALSE 3706
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3556: LD_ADDR_OWVAR 37
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 3
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: ST_TO_ADDR
// vc_engine = 1 ;
3600: LD_ADDR_OWVAR 39
3604: PUSH
3605: LD_INT 1
3607: ST_TO_ADDR
// vc_control = 2 ;
3608: LD_ADDR_OWVAR 38
3612: PUSH
3613: LD_INT 2
3615: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3616: LD_ADDR_OWVAR 40
3620: PUSH
3621: LD_INT 3
3623: PUSH
3624: LD_INT 4
3626: PUSH
3627: LD_INT 5
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 1
3637: PPUSH
3638: LD_INT 3
3640: PPUSH
3641: CALL_OW 12
3645: ARRAY
3646: ST_TO_ADDR
// veh = CreateVehicle ;
3647: LD_ADDR_VAR 0 5
3651: PUSH
3652: CALL_OW 45
3656: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3657: LD_VAR 0 5
3661: PPUSH
3662: LD_INT 4
3664: PPUSH
3665: CALL_OW 233
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3669: LD_VAR 0 5
3673: PPUSH
3674: LD_EXP 37
3678: PPUSH
3679: CALL_OW 250
3683: PPUSH
3684: LD_EXP 37
3688: PPUSH
3689: CALL_OW 251
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL_OW 50
// end ;
3704: GO 3553
3706: POP
3707: POP
// end ; end ;
3708: LD_VAR 0 1
3712: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
// uc_side = 1 ;
3719: LD_ADDR_OWVAR 20
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// uc_nation = 1 ;
3727: LD_ADDR_OWVAR 21
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3735: LD_ADDR_EXP 14
3739: PUSH
3740: LD_STRING 06c_Denis
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: CALL 6815 0 2
3750: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3751: LD_EXP 14
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: LD_INT 0
3761: PPUSH
3762: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3766: LD_ADDR_EXP 15
3770: PUSH
3771: LD_STRING 06c_Joan
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL 6815 0 2
3781: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3782: LD_EXP 15
3786: PPUSH
3787: LD_INT 4
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3797: LD_STRING GladstoneIn07
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 30
3807: NOT
3808: IFFALSE 3876
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3810: LD_ADDR_EXP 8
3814: PUSH
3815: LD_STRING 06c_Gladstone
3817: PPUSH
3818: LD_INT 1
3820: PPUSH
3821: CALL 6815 0 2
3825: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3826: LD_EXP 8
3830: NOT
3831: PUSH
3832: LD_STRING GladstoneStayInDelta
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 30
3842: AND
3843: IFFALSE 3861
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3845: LD_ADDR_EXP 8
3849: PUSH
3850: LD_STRING 05_Gladstone
3852: PPUSH
3853: LD_INT 1
3855: PPUSH
3856: CALL 6815 0 2
3860: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3861: LD_EXP 8
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: LD_INT 0
3871: PPUSH
3872: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3876: LD_STRING LisaStayInDelta
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 30
3886: IFFALSE 3919
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3888: LD_ADDR_EXP 6
3892: PUSH
3893: LD_STRING 05_Lisa
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: CALL 6815 0 2
3903: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3904: LD_EXP 6
3908: PPUSH
3909: LD_INT 4
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3919: LD_STRING BobbyStayInDelta
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 30
3929: IFFALSE 3962
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3931: LD_ADDR_EXP 4
3935: PUSH
3936: LD_STRING 05_Bobby
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: CALL 6815 0 2
3946: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3947: LD_EXP 4
3951: PPUSH
3952: LD_INT 4
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3962: LD_STRING CyrusStayInDelta
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 30
3972: IFFALSE 4005
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3974: LD_ADDR_EXP 5
3978: PUSH
3979: LD_STRING 05_Cyrus
3981: PPUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL 6815 0 2
3989: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3990: LD_EXP 5
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4005: LD_STRING BrownStayInDelta
4007: PPUSH
4008: LD_INT 0
4010: PPUSH
4011: CALL_OW 30
4015: IFFALSE 4048
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4017: LD_ADDR_EXP 2
4021: PUSH
4022: LD_STRING 05_Brown
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: CALL 6815 0 2
4032: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4033: LD_EXP 2
4037: PPUSH
4038: LD_INT 4
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4048: LD_STRING DonaldsonStayInDelta
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 30
4058: IFFALSE 4091
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4060: LD_ADDR_EXP 3
4064: PUSH
4065: LD_STRING 05_Donaldson
4067: PPUSH
4068: LD_INT 1
4070: PPUSH
4071: CALL 6815 0 2
4075: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4076: LD_EXP 3
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4091: LD_ADDR_VAR 0 4
4095: PUSH
4096: LD_STRING OthersStayInDelta
4098: PPUSH
4099: CALL_OW 31
4103: ST_TO_ADDR
// if other > 2 then
4104: LD_VAR 0 4
4108: PUSH
4109: LD_INT 2
4111: GREATER
4112: IFFALSE 4157
// begin for j = 1 to 2 do
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: DOUBLE
4120: LD_INT 1
4122: DEC
4123: ST_TO_ADDR
4124: LD_INT 2
4126: PUSH
4127: FOR_TO
4128: IFFALSE 4153
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4130: LD_VAR 0 4
4134: PUSH
4135: LD_VAR 0 3
4139: ARRAY
4140: PPUSH
4141: LD_INT 4
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 49
4151: GO 4127
4153: POP
4154: POP
// end else
4155: GO 4200
// begin for j = 1 to other do
4157: LD_ADDR_VAR 0 3
4161: PUSH
4162: DOUBLE
4163: LD_INT 1
4165: DEC
4166: ST_TO_ADDR
4167: LD_VAR 0 4
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4198
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4175: LD_VAR 0 4
4179: PUSH
4180: LD_VAR 0 3
4184: ARRAY
4185: PPUSH
4186: LD_INT 4
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL_OW 49
4196: GO 4172
4198: POP
4199: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4200: LD_ADDR_VAR 0 4
4204: PUSH
4205: LD_STRING 06_other_apemans
4207: PPUSH
4208: CALL_OW 31
4212: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4213: LD_VAR 0 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: LD_INT 4
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: LD_OWVAR 67
4236: ARRAY
4237: GREATEREQUAL
4238: IFFALSE 4267
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: LD_INT 5
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: LD_OWVAR 67
4263: ARRAY
4264: ST_TO_ADDR
4265: GO 4277
// j := other ;
4267: LD_ADDR_VAR 0 3
4271: PUSH
4272: LD_VAR 0 4
4276: ST_TO_ADDR
// for i = 1 to j do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4318
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4295: LD_VAR 0 4
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 49
4316: GO 4292
4318: POP
4319: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4320: LD_INT 4
4322: PPUSH
4323: LD_INT 22
4325: PUSH
4326: LD_INT 1
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 21
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 70
4351: PPUSH
4352: LD_INT 53
4354: PPUSH
4355: LD_INT 19
4357: PPUSH
4358: CALL_OW 111
// firstAttack = 1 ;
4362: LD_ADDR_EXP 33
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// end ;
4370: LD_VAR 0 1
4374: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4375: LD_INT 0
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
4382: PPUSH
4383: PPUSH
4384: PPUSH
4385: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4386: LD_ADDR_VAR 0 8
4390: PUSH
4391: LD_STRING 07_vehicles
4393: PPUSH
4394: EMPTY
4395: PPUSH
4396: CALL_OW 30
4400: ST_TO_ADDR
// uc_side := 1 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// uc_nation := 1 ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 1
4416: ST_TO_ADDR
// if vehicles then
4417: LD_VAR 0 8
4421: IFFALSE 4580
// begin k := 1 ;
4423: LD_ADDR_VAR 0 3
4427: PUSH
4428: LD_INT 1
4430: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4431: LD_ADDR_VAR 0 2
4435: PUSH
4436: DOUBLE
4437: LD_INT 1
4439: DEC
4440: ST_TO_ADDR
4441: LD_VAR 0 8
4445: PUSH
4446: LD_INT 4
4448: DIV
4449: PUSH
4450: FOR_TO
4451: IFFALSE 4578
// begin vc_chassis = vehicles [ k ] ;
4453: LD_ADDR_OWVAR 37
4457: PUSH
4458: LD_VAR 0 8
4462: PUSH
4463: LD_VAR 0 3
4467: ARRAY
4468: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4469: LD_ADDR_OWVAR 39
4473: PUSH
4474: LD_VAR 0 8
4478: PUSH
4479: LD_VAR 0 3
4483: PUSH
4484: LD_INT 1
4486: PLUS
4487: ARRAY
4488: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4489: LD_ADDR_OWVAR 38
4493: PUSH
4494: LD_VAR 0 8
4498: PUSH
4499: LD_VAR 0 3
4503: PUSH
4504: LD_INT 2
4506: PLUS
4507: ARRAY
4508: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4509: LD_ADDR_OWVAR 40
4513: PUSH
4514: LD_VAR 0 8
4518: PUSH
4519: LD_VAR 0 3
4523: PUSH
4524: LD_INT 3
4526: PLUS
4527: ARRAY
4528: ST_TO_ADDR
// k := k + 4 ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: LD_VAR 0 3
4538: PUSH
4539: LD_INT 4
4541: PLUS
4542: ST_TO_ADDR
// veh := CreateVehicle ;
4543: LD_ADDR_VAR 0 9
4547: PUSH
4548: CALL_OW 45
4552: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4553: LD_ADDR_VAR 0 7
4557: PUSH
4558: LD_VAR 0 7
4562: PPUSH
4563: LD_INT 1
4565: PPUSH
4566: LD_VAR 0 9
4570: PPUSH
4571: CALL_OW 2
4575: ST_TO_ADDR
// end ;
4576: GO 4450
4578: POP
4579: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4580: LD_ADDR_EXP 1
4584: PUSH
4585: LD_EXP 43
4589: PUSH
4590: LD_STRING JMM
4592: STR
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL 6815 0 2
4601: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4602: LD_EXP 12
4606: PUSH
4607: LD_INT 1
4609: EQUAL
4610: PUSH
4611: LD_EXP 12
4615: PUSH
4616: LD_INT 3
4618: EQUAL
4619: OR
4620: PUSH
4621: LD_EXP 2
4625: NOT
4626: AND
4627: IFFALSE 4680
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4629: LD_ADDR_EXP 2
4633: PUSH
4634: LD_EXP 43
4638: PUSH
4639: LD_STRING Brown
4641: STR
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: CALL 6815 0 2
4650: ST_TO_ADDR
// if Brown then
4651: LD_EXP 2
4655: IFFALSE 4680
// tmp := Insert ( tmp , 1 , Brown ) ;
4657: LD_ADDR_VAR 0 6
4661: PUSH
4662: LD_VAR 0 6
4666: PPUSH
4667: LD_INT 1
4669: PPUSH
4670: LD_EXP 2
4674: PPUSH
4675: CALL_OW 2
4679: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4680: LD_EXP 12
4684: PUSH
4685: LD_INT 2
4687: EQUAL
4688: PUSH
4689: LD_EXP 12
4693: PUSH
4694: LD_INT 3
4696: EQUAL
4697: OR
4698: PUSH
4699: LD_EXP 3
4703: NOT
4704: AND
4705: IFFALSE 4758
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4707: LD_ADDR_EXP 3
4711: PUSH
4712: LD_EXP 43
4716: PUSH
4717: LD_STRING Donaldson
4719: STR
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL 6815 0 2
4728: ST_TO_ADDR
// if Donaldson then
4729: LD_EXP 3
4733: IFFALSE 4758
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4735: LD_ADDR_VAR 0 6
4739: PUSH
4740: LD_VAR 0 6
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: LD_EXP 3
4752: PPUSH
4753: CALL_OW 2
4757: ST_TO_ADDR
// end ; if not Bobby then
4758: LD_EXP 4
4762: NOT
4763: IFFALSE 4816
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4765: LD_ADDR_EXP 4
4769: PUSH
4770: LD_EXP 43
4774: PUSH
4775: LD_STRING Bobby
4777: STR
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL 6815 0 2
4786: ST_TO_ADDR
// if Bobby then
4787: LD_EXP 4
4791: IFFALSE 4816
// tmp := Insert ( tmp , 1 , Bobby ) ;
4793: LD_ADDR_VAR 0 6
4797: PUSH
4798: LD_VAR 0 6
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: LD_EXP 4
4810: PPUSH
4811: CALL_OW 2
4815: ST_TO_ADDR
// end ; if not Cyrus then
4816: LD_EXP 5
4820: NOT
4821: IFFALSE 4874
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4823: LD_ADDR_EXP 5
4827: PUSH
4828: LD_EXP 43
4832: PUSH
4833: LD_STRING Cyrus
4835: STR
4836: PPUSH
4837: LD_INT 1
4839: PPUSH
4840: CALL 6815 0 2
4844: ST_TO_ADDR
// if Cyrus then
4845: LD_EXP 5
4849: IFFALSE 4874
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4851: LD_ADDR_VAR 0 6
4855: PUSH
4856: LD_VAR 0 6
4860: PPUSH
4861: LD_INT 1
4863: PPUSH
4864: LD_EXP 5
4868: PPUSH
4869: CALL_OW 2
4873: ST_TO_ADDR
// end ; if not Lisa then
4874: LD_EXP 6
4878: NOT
4879: IFFALSE 4932
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4881: LD_ADDR_EXP 6
4885: PUSH
4886: LD_EXP 43
4890: PUSH
4891: LD_STRING Lisa
4893: STR
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: CALL 6815 0 2
4902: ST_TO_ADDR
// if Lisa then
4903: LD_EXP 6
4907: IFFALSE 4932
// tmp := Insert ( tmp , 1 , Lisa ) ;
4909: LD_ADDR_VAR 0 6
4913: PUSH
4914: LD_VAR 0 6
4918: PPUSH
4919: LD_INT 1
4921: PPUSH
4922: LD_EXP 6
4926: PPUSH
4927: CALL_OW 2
4931: ST_TO_ADDR
// end ; if not Frank then
4932: LD_EXP 7
4936: NOT
4937: IFFALSE 4990
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4939: LD_ADDR_EXP 7
4943: PUSH
4944: LD_EXP 43
4948: PUSH
4949: LD_STRING Frank
4951: STR
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL 6815 0 2
4960: ST_TO_ADDR
// if Frank then
4961: LD_EXP 7
4965: IFFALSE 4990
// tmp := Insert ( tmp , 1 , Frank ) ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_VAR 0 6
4976: PPUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 7
4984: PPUSH
4985: CALL_OW 2
4989: ST_TO_ADDR
// end ; if not Kikuchi then
4990: LD_EXP 9
4994: NOT
4995: IFFALSE 5048
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_EXP 43
5006: PUSH
5007: LD_STRING Kikuchi
5009: STR
5010: PPUSH
5011: LD_INT 1
5013: PPUSH
5014: CALL 6815 0 2
5018: ST_TO_ADDR
// if Kikuchi then
5019: LD_EXP 9
5023: IFFALSE 5048
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5025: LD_ADDR_VAR 0 6
5029: PUSH
5030: LD_VAR 0 6
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: LD_EXP 9
5042: PPUSH
5043: CALL_OW 2
5047: ST_TO_ADDR
// end ; if not Gladstone then
5048: LD_EXP 8
5052: NOT
5053: IFFALSE 5106
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5055: LD_ADDR_EXP 8
5059: PUSH
5060: LD_EXP 43
5064: PUSH
5065: LD_STRING Gladstone
5067: STR
5068: PPUSH
5069: LD_INT 1
5071: PPUSH
5072: CALL 6815 0 2
5076: ST_TO_ADDR
// if Gladstone then
5077: LD_EXP 8
5081: IFFALSE 5106
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5083: LD_ADDR_VAR 0 6
5087: PUSH
5088: LD_VAR 0 6
5092: PPUSH
5093: LD_INT 1
5095: PPUSH
5096: LD_EXP 8
5100: PPUSH
5101: CALL_OW 2
5105: ST_TO_ADDR
// end ; if not Khatam then
5106: LD_EXP 10
5110: NOT
5111: IFFALSE 5164
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5113: LD_ADDR_EXP 10
5117: PUSH
5118: LD_EXP 43
5122: PUSH
5123: LD_STRING Khatam
5125: STR
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL 6815 0 2
5134: ST_TO_ADDR
// if Khatam then
5135: LD_EXP 10
5139: IFFALSE 5164
// tmp := Insert ( tmp , 1 , Khatam ) ;
5141: LD_ADDR_VAR 0 6
5145: PUSH
5146: LD_VAR 0 6
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: LD_EXP 10
5158: PPUSH
5159: CALL_OW 2
5163: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5164: LD_ADDR_VAR 0 5
5168: PUSH
5169: LD_STRING 07c_others
5171: PPUSH
5172: CALL_OW 31
5176: ST_TO_ADDR
// if others then
5177: LD_VAR 0 5
5181: IFFALSE 5269
// for i in others do
5183: LD_ADDR_VAR 0 2
5187: PUSH
5188: LD_VAR 0 5
5192: PUSH
5193: FOR_IN
5194: IFFALSE 5267
// if GetClass ( i ) = 3 then
5196: LD_VAR 0 2
5200: PPUSH
5201: CALL_OW 257
5205: PUSH
5206: LD_INT 3
5208: EQUAL
5209: IFFALSE 5236
// tmp := Insert ( tmp , 1 , i ) else
5211: LD_ADDR_VAR 0 6
5215: PUSH
5216: LD_VAR 0 6
5220: PPUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_VAR 0 2
5228: PPUSH
5229: CALL_OW 2
5233: ST_TO_ADDR
5234: GO 5265
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5236: LD_ADDR_VAR 0 6
5240: PUSH
5241: LD_VAR 0 6
5245: PPUSH
5246: LD_VAR 0 6
5250: PUSH
5251: LD_INT 1
5253: PLUS
5254: PPUSH
5255: LD_VAR 0 2
5259: PPUSH
5260: CALL_OW 2
5264: ST_TO_ADDR
5265: GO 5193
5267: POP
5268: POP
// wait ( 0 0$1 ) ;
5269: LD_INT 35
5271: PPUSH
5272: CALL_OW 67
// for i in tmp do
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: LD_VAR 0 6
5285: PUSH
5286: FOR_IN
5287: IFFALSE 5419
// begin SetDir ( i , 3 ) ;
5289: LD_VAR 0 2
5293: PPUSH
5294: LD_INT 3
5296: PPUSH
5297: CALL_OW 233
// if tmp_vehs then
5301: LD_VAR 0 7
5305: IFFALSE 5380
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5307: LD_VAR 0 7
5311: PUSH
5312: LD_INT 1
5314: ARRAY
5315: PPUSH
5316: LD_INT 3
5318: PPUSH
5319: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5323: LD_VAR 0 7
5327: PUSH
5328: LD_INT 1
5330: ARRAY
5331: PPUSH
5332: LD_INT 4
5334: PPUSH
5335: LD_INT 0
5337: PPUSH
5338: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5342: LD_VAR 0 2
5346: PPUSH
5347: LD_VAR 0 7
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5360: LD_ADDR_VAR 0 7
5364: PUSH
5365: LD_VAR 0 7
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL_OW 3
5377: ST_TO_ADDR
// end else
5378: GO 5395
// PlaceUnitArea ( i , GammaSupport , false ) ;
5380: LD_VAR 0 2
5384: PPUSH
5385: LD_INT 4
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5395: LD_VAR 0 2
5399: PPUSH
5400: LD_INT 77
5402: PPUSH
5403: LD_INT 16
5405: PPUSH
5406: CALL_OW 111
// wait ( 0 0$2 ) ;
5410: LD_INT 70
5412: PPUSH
5413: CALL_OW 67
// end ;
5417: GO 5286
5419: POP
5420: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5421: LD_EXP 1
5425: PPUSH
5426: LD_INT 4
5428: PPUSH
5429: LD_INT 0
5431: PPUSH
5432: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5436: LD_EXP 1
5440: PPUSH
5441: LD_INT 77
5443: PPUSH
5444: LD_INT 16
5446: PPUSH
5447: CALL_OW 111
// end ;
5451: LD_VAR 0 1
5455: RET
// export function PrepareSikorsky ; begin
5456: LD_INT 0
5458: PPUSH
// uc_side = 4 ;
5459: LD_ADDR_OWVAR 20
5463: PUSH
5464: LD_INT 4
5466: ST_TO_ADDR
// uc_nation = 1 ;
5467: LD_ADDR_OWVAR 21
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5475: LD_ADDR_EXP 16
5479: PUSH
5480: LD_STRING Sikorski
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: CALL 6815 0 2
5490: ST_TO_ADDR
// vc_engine = 1 ;
5491: LD_ADDR_OWVAR 39
5495: PUSH
5496: LD_INT 1
5498: ST_TO_ADDR
// vc_control = 1 ;
5499: LD_ADDR_OWVAR 38
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5507: LD_ADDR_OWVAR 40
5511: PUSH
5512: LD_INT 5
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: PUSH
5526: LD_OWVAR 67
5530: ARRAY
5531: ST_TO_ADDR
// vc_chassis = 4 ;
5532: LD_ADDR_OWVAR 37
5536: PUSH
5537: LD_INT 4
5539: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5540: LD_ADDR_EXP 17
5544: PUSH
5545: CALL_OW 45
5549: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5550: LD_EXP 17
5554: PPUSH
5555: LD_INT 9
5557: PPUSH
5558: LD_INT 0
5560: PPUSH
5561: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5565: LD_EXP 16
5569: PPUSH
5570: LD_EXP 17
5574: PPUSH
5575: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5579: LD_EXP 17
5583: PPUSH
5584: LD_INT 5
5586: PPUSH
5587: CALL_OW 113
// end ;
5591: LD_VAR 0 1
5595: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5596: LD_INT 0
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5602: LD_ADDR_VAR 0 2
5606: PUSH
5607: DOUBLE
5608: LD_INT 1
5610: DEC
5611: ST_TO_ADDR
5612: LD_INT 8
5614: PUSH
5615: LD_INT 7
5617: PUSH
5618: LD_INT 7
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: PUSH
5626: LD_OWVAR 67
5630: ARRAY
5631: PUSH
5632: FOR_TO
5633: IFFALSE 5730
// begin uc_side = 4 ;
5635: LD_ADDR_OWVAR 20
5639: PUSH
5640: LD_INT 4
5642: ST_TO_ADDR
// uc_nation = 1 ;
5643: LD_ADDR_OWVAR 21
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// hc_name =  ;
5651: LD_ADDR_OWVAR 26
5655: PUSH
5656: LD_STRING 
5658: ST_TO_ADDR
// hc_gallery =  ;
5659: LD_ADDR_OWVAR 33
5663: PUSH
5664: LD_STRING 
5666: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5667: LD_INT 0
5669: PPUSH
5670: LD_INT 1
5672: PPUSH
5673: LD_INT 5
5675: PPUSH
5676: LD_INT 8
5678: PPUSH
5679: CALL_OW 12
5683: PPUSH
5684: CALL_OW 380
// un = CreateHuman ;
5688: LD_ADDR_VAR 0 3
5692: PUSH
5693: CALL_OW 44
5697: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 9
5705: PPUSH
5706: LD_INT 0
5708: PPUSH
5709: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5713: LD_VAR 0 3
5717: PPUSH
5718: LD_INT 53
5720: PPUSH
5721: LD_INT 23
5723: PPUSH
5724: CALL_OW 111
// end ;
5728: GO 5632
5730: POP
5731: POP
// for i = 1 to 3 do
5732: LD_ADDR_VAR 0 2
5736: PUSH
5737: DOUBLE
5738: LD_INT 1
5740: DEC
5741: ST_TO_ADDR
5742: LD_INT 3
5744: PUSH
5745: FOR_TO
5746: IFFALSE 5843
// begin uc_side = 4 ;
5748: LD_ADDR_OWVAR 20
5752: PUSH
5753: LD_INT 4
5755: ST_TO_ADDR
// uc_nation = 1 ;
5756: LD_ADDR_OWVAR 21
5760: PUSH
5761: LD_INT 1
5763: ST_TO_ADDR
// hc_name =  ;
5764: LD_ADDR_OWVAR 26
5768: PUSH
5769: LD_STRING 
5771: ST_TO_ADDR
// hc_gallery =  ;
5772: LD_ADDR_OWVAR 33
5776: PUSH
5777: LD_STRING 
5779: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 4
5785: PPUSH
5786: LD_INT 5
5788: PPUSH
5789: LD_INT 8
5791: PPUSH
5792: CALL_OW 12
5796: PPUSH
5797: CALL_OW 380
// un = CreateHuman ;
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: CALL_OW 44
5810: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5811: LD_VAR 0 3
5815: PPUSH
5816: LD_INT 9
5818: PPUSH
5819: LD_INT 0
5821: PPUSH
5822: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5826: LD_VAR 0 3
5830: PPUSH
5831: LD_INT 53
5833: PPUSH
5834: LD_INT 23
5836: PPUSH
5837: CALL_OW 111
// end ;
5841: GO 5745
5843: POP
5844: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5845: LD_ADDR_VAR 0 2
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_INT 9
5857: PUSH
5858: LD_INT 8
5860: PUSH
5861: LD_INT 7
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_OWVAR 67
5873: ARRAY
5874: PUSH
5875: FOR_TO
5876: IFFALSE 6072
// begin uc_side = 4 ;
5878: LD_ADDR_OWVAR 20
5882: PUSH
5883: LD_INT 4
5885: ST_TO_ADDR
// uc_nation = 1 ;
5886: LD_ADDR_OWVAR 21
5890: PUSH
5891: LD_INT 1
5893: ST_TO_ADDR
// vc_engine = 1 ;
5894: LD_ADDR_OWVAR 39
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// vc_control = 1 ;
5902: LD_ADDR_OWVAR 38
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5910: LD_ADDR_OWVAR 40
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: LD_INT 4
5920: PUSH
5921: LD_INT 5
5923: PUSH
5924: LD_INT 6
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 1
5935: PPUSH
5936: LD_INT 4
5938: PPUSH
5939: CALL_OW 12
5943: ARRAY
5944: ST_TO_ADDR
// vc_chassis = 4 ;
5945: LD_ADDR_OWVAR 37
5949: PUSH
5950: LD_INT 4
5952: ST_TO_ADDR
// veh = CreateVehicle ;
5953: LD_ADDR_VAR 0 4
5957: PUSH
5958: CALL_OW 45
5962: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5963: LD_VAR 0 4
5967: PPUSH
5968: LD_INT 9
5970: PPUSH
5971: LD_INT 0
5973: PPUSH
5974: CALL_OW 49
// hc_name =  ;
5978: LD_ADDR_OWVAR 26
5982: PUSH
5983: LD_STRING 
5985: ST_TO_ADDR
// hc_gallery =  ;
5986: LD_ADDR_OWVAR 33
5990: PUSH
5991: LD_STRING 
5993: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5994: LD_INT 0
5996: PPUSH
5997: LD_INT 3
5999: PPUSH
6000: LD_INT 5
6002: PPUSH
6003: LD_INT 8
6005: PPUSH
6006: CALL_OW 12
6010: PPUSH
6011: CALL_OW 380
// un = CreateHuman ;
6015: LD_ADDR_VAR 0 3
6019: PUSH
6020: CALL_OW 44
6024: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6025: LD_VAR 0 3
6029: PPUSH
6030: LD_VAR 0 4
6034: PPUSH
6035: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6039: LD_VAR 0 4
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PPUSH
6053: LD_INT 53
6055: PPUSH
6056: LD_INT 23
6058: PPUSH
6059: CALL_OW 111
// wait ( 0 0$5 ) ;
6063: LD_INT 175
6065: PPUSH
6066: CALL_OW 67
// end ;
6070: GO 5875
6072: POP
6073: POP
// end ; end_of_file
6074: LD_VAR 0 1
6078: RET
// export function PrepareRussianCommander ; begin
6079: LD_INT 0
6081: PPUSH
// uc_side = 3 ;
6082: LD_ADDR_OWVAR 20
6086: PUSH
6087: LD_INT 3
6089: ST_TO_ADDR
// uc_nation = 3 ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 3
6097: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6098: LD_ADDR_EXP 24
6102: PUSH
6103: LD_STRING Borodin
6105: PPUSH
6106: CALL_OW 25
6110: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6111: LD_EXP 24
6115: PPUSH
6116: LD_INT 25
6118: PPUSH
6119: LD_INT 0
6121: PPUSH
6122: CALL_OW 49
// end ;
6126: LD_VAR 0 1
6130: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
// for i = 1 to 10 do
6137: LD_ADDR_VAR 0 2
6141: PUSH
6142: DOUBLE
6143: LD_INT 1
6145: DEC
6146: ST_TO_ADDR
6147: LD_INT 10
6149: PUSH
6150: FOR_TO
6151: IFFALSE 6225
// begin uc_side = 6 ;
6153: LD_ADDR_OWVAR 20
6157: PUSH
6158: LD_INT 6
6160: ST_TO_ADDR
// uc_nation = 3 ;
6161: LD_ADDR_OWVAR 21
6165: PUSH
6166: LD_INT 3
6168: ST_TO_ADDR
// hc_gallery =  ;
6169: LD_ADDR_OWVAR 33
6173: PUSH
6174: LD_STRING 
6176: ST_TO_ADDR
// hc_name =  ;
6177: LD_ADDR_OWVAR 26
6181: PUSH
6182: LD_STRING 
6184: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6185: LD_INT 0
6187: PPUSH
6188: LD_INT 1
6190: PPUSH
6191: LD_INT 3
6193: PPUSH
6194: CALL_OW 380
// un = CreateHuman ;
6198: LD_ADDR_VAR 0 3
6202: PUSH
6203: CALL_OW 44
6207: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6208: LD_VAR 0 3
6212: PPUSH
6213: LD_INT 1
6215: PPUSH
6216: LD_INT 0
6218: PPUSH
6219: CALL_OW 49
// end ;
6223: GO 6150
6225: POP
6226: POP
// for i = 1 to 3 do
6227: LD_ADDR_VAR 0 2
6231: PUSH
6232: DOUBLE
6233: LD_INT 1
6235: DEC
6236: ST_TO_ADDR
6237: LD_INT 3
6239: PUSH
6240: FOR_TO
6241: IFFALSE 6390
// begin uc_side = 6 ;
6243: LD_ADDR_OWVAR 20
6247: PUSH
6248: LD_INT 6
6250: ST_TO_ADDR
// uc_nation = 3 ;
6251: LD_ADDR_OWVAR 21
6255: PUSH
6256: LD_INT 3
6258: ST_TO_ADDR
// vc_engine = 1 ;
6259: LD_ADDR_OWVAR 39
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// vc_control = 1 ;
6267: LD_ADDR_OWVAR 38
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6275: LD_ADDR_OWVAR 40
6279: PUSH
6280: LD_INT 43
6282: PUSH
6283: LD_INT 44
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 1
6292: PPUSH
6293: LD_INT 2
6295: PPUSH
6296: CALL_OW 12
6300: ARRAY
6301: ST_TO_ADDR
// vc_chassis = 22 ;
6302: LD_ADDR_OWVAR 37
6306: PUSH
6307: LD_INT 22
6309: ST_TO_ADDR
// veh = CreateVehicle ;
6310: LD_ADDR_VAR 0 4
6314: PUSH
6315: CALL_OW 45
6319: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6320: LD_VAR 0 4
6324: PPUSH
6325: LD_INT 2
6327: PPUSH
6328: LD_INT 0
6330: PPUSH
6331: CALL_OW 49
// hc_gallery =  ;
6335: LD_ADDR_OWVAR 33
6339: PUSH
6340: LD_STRING 
6342: ST_TO_ADDR
// hc_name =  ;
6343: LD_ADDR_OWVAR 26
6347: PUSH
6348: LD_STRING 
6350: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 3
6356: PPUSH
6357: LD_INT 4
6359: PPUSH
6360: CALL_OW 380
// un = CreateHuman ;
6364: LD_ADDR_VAR 0 3
6368: PUSH
6369: CALL_OW 44
6373: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6374: LD_VAR 0 3
6378: PPUSH
6379: LD_VAR 0 4
6383: PPUSH
6384: CALL_OW 52
// end ;
6388: GO 6240
6390: POP
6391: POP
// end ;
6392: LD_VAR 0 1
6396: RET
// export function PrepareRussians ; var i , un ; begin
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
6401: PPUSH
// for i = 1 to 8 do
6402: LD_ADDR_VAR 0 2
6406: PUSH
6407: DOUBLE
6408: LD_INT 1
6410: DEC
6411: ST_TO_ADDR
6412: LD_INT 8
6414: PUSH
6415: FOR_TO
6416: IFFALSE 6502
// begin uc_side = 3 ;
6418: LD_ADDR_OWVAR 20
6422: PUSH
6423: LD_INT 3
6425: ST_TO_ADDR
// uc_nation = 3 ;
6426: LD_ADDR_OWVAR 21
6430: PUSH
6431: LD_INT 3
6433: ST_TO_ADDR
// hc_gallery =  ;
6434: LD_ADDR_OWVAR 33
6438: PUSH
6439: LD_STRING 
6441: ST_TO_ADDR
// hc_name =  ;
6442: LD_ADDR_OWVAR 26
6446: PUSH
6447: LD_STRING 
6449: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6450: LD_INT 0
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_EXP 25
6460: PPUSH
6461: LD_EXP 26
6465: PPUSH
6466: CALL_OW 12
6470: PPUSH
6471: CALL_OW 380
// un = CreateHuman ;
6475: LD_ADDR_VAR 0 3
6479: PUSH
6480: CALL_OW 44
6484: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6485: LD_VAR 0 3
6489: PPUSH
6490: LD_INT 3
6492: PPUSH
6493: LD_INT 0
6495: PPUSH
6496: CALL_OW 49
// end ;
6500: GO 6415
6502: POP
6503: POP
// for i = 1 to 4 do
6504: LD_ADDR_VAR 0 2
6508: PUSH
6509: DOUBLE
6510: LD_INT 1
6512: DEC
6513: ST_TO_ADDR
6514: LD_INT 4
6516: PUSH
6517: FOR_TO
6518: IFFALSE 6604
// begin uc_side = 3 ;
6520: LD_ADDR_OWVAR 20
6524: PUSH
6525: LD_INT 3
6527: ST_TO_ADDR
// uc_nation = 3 ;
6528: LD_ADDR_OWVAR 21
6532: PUSH
6533: LD_INT 3
6535: ST_TO_ADDR
// hc_gallery =  ;
6536: LD_ADDR_OWVAR 33
6540: PUSH
6541: LD_STRING 
6543: ST_TO_ADDR
// hc_name =  ;
6544: LD_ADDR_OWVAR 26
6548: PUSH
6549: LD_STRING 
6551: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6552: LD_INT 0
6554: PPUSH
6555: LD_INT 2
6557: PPUSH
6558: LD_EXP 25
6562: PPUSH
6563: LD_EXP 26
6567: PPUSH
6568: CALL_OW 12
6572: PPUSH
6573: CALL_OW 380
// un = CreateHuman ;
6577: LD_ADDR_VAR 0 3
6581: PUSH
6582: CALL_OW 44
6586: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 0
6597: PPUSH
6598: CALL_OW 49
// end ;
6602: GO 6517
6604: POP
6605: POP
// for i = 1 to 3 do
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: DOUBLE
6612: LD_INT 1
6614: DEC
6615: ST_TO_ADDR
6616: LD_INT 3
6618: PUSH
6619: FOR_TO
6620: IFFALSE 6706
// begin uc_side = 3 ;
6622: LD_ADDR_OWVAR 20
6626: PUSH
6627: LD_INT 3
6629: ST_TO_ADDR
// uc_nation = 3 ;
6630: LD_ADDR_OWVAR 21
6634: PUSH
6635: LD_INT 3
6637: ST_TO_ADDR
// hc_gallery =  ;
6638: LD_ADDR_OWVAR 33
6642: PUSH
6643: LD_STRING 
6645: ST_TO_ADDR
// hc_name =  ;
6646: LD_ADDR_OWVAR 26
6650: PUSH
6651: LD_STRING 
6653: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6654: LD_INT 0
6656: PPUSH
6657: LD_INT 3
6659: PPUSH
6660: LD_EXP 25
6664: PPUSH
6665: LD_EXP 26
6669: PPUSH
6670: CALL_OW 12
6674: PPUSH
6675: CALL_OW 380
// un = CreateHuman ;
6679: LD_ADDR_VAR 0 3
6683: PUSH
6684: CALL_OW 44
6688: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6689: LD_VAR 0 3
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 0
6699: PPUSH
6700: CALL_OW 49
// end ;
6704: GO 6619
6706: POP
6707: POP
// for i = 1 to 2 do
6708: LD_ADDR_VAR 0 2
6712: PUSH
6713: DOUBLE
6714: LD_INT 1
6716: DEC
6717: ST_TO_ADDR
6718: LD_INT 2
6720: PUSH
6721: FOR_TO
6722: IFFALSE 6808
// begin uc_side = 3 ;
6724: LD_ADDR_OWVAR 20
6728: PUSH
6729: LD_INT 3
6731: ST_TO_ADDR
// uc_nation = 3 ;
6732: LD_ADDR_OWVAR 21
6736: PUSH
6737: LD_INT 3
6739: ST_TO_ADDR
// hc_gallery =  ;
6740: LD_ADDR_OWVAR 33
6744: PUSH
6745: LD_STRING 
6747: ST_TO_ADDR
// hc_name =  ;
6748: LD_ADDR_OWVAR 26
6752: PUSH
6753: LD_STRING 
6755: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6756: LD_INT 0
6758: PPUSH
6759: LD_INT 4
6761: PPUSH
6762: LD_EXP 25
6766: PPUSH
6767: LD_EXP 26
6771: PPUSH
6772: CALL_OW 12
6776: PPUSH
6777: CALL_OW 380
// un = CreateHuman ;
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: CALL_OW 44
6790: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_INT 3
6798: PPUSH
6799: LD_INT 0
6801: PPUSH
6802: CALL_OW 49
// end ;
6806: GO 6721
6808: POP
6809: POP
// end ; end_of_file
6810: LD_VAR 0 1
6814: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6815: LD_INT 0
6817: PPUSH
6818: PPUSH
// if exist_mode then
6819: LD_VAR 0 2
6823: IFFALSE 6842
// unit := CreateCharacter ( ident ) else
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 34
6839: ST_TO_ADDR
6840: GO 6857
// unit := NewCharacter ( ident ) ;
6842: LD_ADDR_VAR 0 4
6846: PUSH
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 25
6856: ST_TO_ADDR
// result := unit ;
6857: LD_ADDR_VAR 0 3
6861: PUSH
6862: LD_VAR 0 4
6866: ST_TO_ADDR
// end ;
6867: LD_VAR 0 3
6871: RET
// export function Video ( mode ) ; begin
6872: LD_INT 0
6874: PPUSH
// ingame_video = mode ;
6875: LD_ADDR_OWVAR 52
6879: PUSH
6880: LD_VAR 0 1
6884: ST_TO_ADDR
// interface_hidden = mode ;
6885: LD_ADDR_OWVAR 54
6889: PUSH
6890: LD_VAR 0 1
6894: ST_TO_ADDR
// end ;
6895: LD_VAR 0 2
6899: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6900: LD_INT 0
6902: PPUSH
6903: PPUSH
6904: PPUSH
// rnd = rand ( 1 , characters ) ;
6905: LD_ADDR_VAR 0 6
6909: PUSH
6910: LD_INT 1
6912: PPUSH
6913: LD_VAR 0 1
6917: PPUSH
6918: CALL_OW 12
6922: ST_TO_ADDR
// for i = 1 to characters do
6923: LD_ADDR_VAR 0 5
6927: PUSH
6928: DOUBLE
6929: LD_INT 1
6931: DEC
6932: ST_TO_ADDR
6933: LD_VAR 0 1
6937: PUSH
6938: FOR_TO
6939: IFFALSE 7049
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6941: LD_VAR 0 5
6945: PUSH
6946: LD_VAR 0 6
6950: EQUAL
6951: PUSH
6952: LD_VAR 0 1
6956: PUSH
6957: LD_VAR 0 5
6961: ARRAY
6962: PPUSH
6963: CALL_OW 258
6967: PUSH
6968: LD_INT 1
6970: EQUAL
6971: AND
6972: IFFALSE 6994
// Say ( characters [ i ] , dialogMID ) ;
6974: LD_VAR 0 1
6978: PUSH
6979: LD_VAR 0 5
6983: ARRAY
6984: PPUSH
6985: LD_VAR 0 2
6989: PPUSH
6990: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6994: LD_VAR 0 5
6998: PUSH
6999: LD_VAR 0 6
7003: EQUAL
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_VAR 0 5
7014: ARRAY
7015: PPUSH
7016: CALL_OW 258
7020: PUSH
7021: LD_INT 2
7023: EQUAL
7024: AND
7025: IFFALSE 7047
// Say ( characters [ i ] , dialogFID ) ;
7027: LD_VAR 0 1
7031: PUSH
7032: LD_VAR 0 5
7036: ARRAY
7037: PPUSH
7038: LD_VAR 0 3
7042: PPUSH
7043: CALL_OW 88
// end ;
7047: GO 6938
7049: POP
7050: POP
// end ;
7051: LD_VAR 0 4
7055: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7056: LD_INT 0
7058: PPUSH
7059: PPUSH
7060: PPUSH
// uc_side := GetSide ( b ) ;
7061: LD_ADDR_OWVAR 20
7065: PUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: CALL_OW 255
7075: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7076: LD_ADDR_OWVAR 21
7080: PUSH
7081: LD_VAR 0 2
7085: PPUSH
7086: CALL_OW 248
7090: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7091: LD_INT 0
7093: PPUSH
7094: LD_INT 1
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7106: LD_ADDR_VAR 0 5
7110: PUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: CALL_OW 254
7120: PUSH
7121: LD_INT 3
7123: MINUS
7124: ST_TO_ADDR
// if dir < 0 then
7125: LD_VAR 0 5
7129: PUSH
7130: LD_INT 0
7132: LESS
7133: IFFALSE 7149
// dir := 6 + dir ;
7135: LD_ADDR_VAR 0 5
7139: PUSH
7140: LD_INT 6
7142: PUSH
7143: LD_VAR 0 5
7147: PLUS
7148: ST_TO_ADDR
// un := CreateHuman ;
7149: LD_ADDR_VAR 0 4
7153: PUSH
7154: CALL_OW 44
7158: ST_TO_ADDR
// SetDir ( un , dir ) ;
7159: LD_VAR 0 4
7163: PPUSH
7164: LD_VAR 0 5
7168: PPUSH
7169: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 52
// end ;
7187: LD_VAR 0 3
7191: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7192: LD_INT 0
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
// for i = 1 to count do
7198: LD_ADDR_VAR 0 8
7202: PUSH
7203: DOUBLE
7204: LD_INT 1
7206: DEC
7207: ST_TO_ADDR
7208: LD_VAR 0 6
7212: PUSH
7213: FOR_TO
7214: IFFALSE 7295
// begin uc_side = side ;
7216: LD_ADDR_OWVAR 20
7220: PUSH
7221: LD_VAR 0 1
7225: ST_TO_ADDR
// uc_nation = nation ;
7226: LD_ADDR_OWVAR 21
7230: PUSH
7231: LD_VAR 0 2
7235: ST_TO_ADDR
// hc_gallery =  ;
7236: LD_ADDR_OWVAR 33
7240: PUSH
7241: LD_STRING 
7243: ST_TO_ADDR
// hc_name =  ;
7244: LD_ADDR_OWVAR 26
7248: PUSH
7249: LD_STRING 
7251: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_VAR 0 5
7259: PPUSH
7260: LD_VAR 0 4
7264: PPUSH
7265: CALL_OW 380
// un = CreateHuman ;
7269: LD_ADDR_VAR 0 10
7273: PUSH
7274: CALL_OW 44
7278: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7279: LD_VAR 0 10
7283: PPUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: CALL_OW 52
// end ;
7293: GO 7213
7295: POP
7296: POP
// end ;
7297: LD_VAR 0 7
7301: RET
// export function PrepareDifficulty ; begin
7302: LD_INT 0
7304: PPUSH
// if Difficulty = 1 then
7305: LD_OWVAR 67
7309: PUSH
7310: LD_INT 1
7312: EQUAL
7313: IFFALSE 7331
// begin RuSolMinLevel = 4 ;
7315: LD_ADDR_EXP 25
7319: PUSH
7320: LD_INT 4
7322: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7323: LD_ADDR_EXP 26
7327: PUSH
7328: LD_INT 6
7330: ST_TO_ADDR
// end ; if Difficulty = 2 then
7331: LD_OWVAR 67
7335: PUSH
7336: LD_INT 2
7338: EQUAL
7339: IFFALSE 7409
// begin RuSolMinLevel = 5 ;
7341: LD_ADDR_EXP 25
7345: PUSH
7346: LD_INT 5
7348: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7349: LD_ADDR_EXP 26
7353: PUSH
7354: LD_INT 6
7356: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7357: LD_INT 51
7359: PPUSH
7360: LD_INT 3
7362: PPUSH
7363: LD_INT 1
7365: PPUSH
7366: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7370: LD_INT 57
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7383: LD_INT 57
7385: PPUSH
7386: LD_INT 6
7388: PPUSH
7389: LD_INT 2
7391: PPUSH
7392: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7396: LD_INT 51
7398: PPUSH
7399: LD_INT 6
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: CALL_OW 322
// end ; if Difficulty = 3 then
7409: LD_OWVAR 67
7413: PUSH
7414: LD_INT 3
7416: EQUAL
7417: IFFALSE 7500
// begin RuSolMinLevel = 5 ;
7419: LD_ADDR_EXP 25
7423: PUSH
7424: LD_INT 5
7426: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7427: LD_ADDR_EXP 26
7431: PUSH
7432: LD_INT 6
7434: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7435: LD_INT 57
7437: PPUSH
7438: LD_INT 3
7440: PPUSH
7441: LD_INT 1
7443: PPUSH
7444: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7448: LD_INT 51
7450: PPUSH
7451: LD_INT 3
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7461: LD_INT 52
7463: PPUSH
7464: LD_INT 3
7466: PPUSH
7467: LD_INT 1
7469: PPUSH
7470: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7474: LD_INT 57
7476: PPUSH
7477: LD_INT 6
7479: PPUSH
7480: LD_INT 2
7482: PPUSH
7483: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7487: LD_INT 52
7489: PPUSH
7490: LD_INT 6
7492: PPUSH
7493: LD_INT 2
7495: PPUSH
7496: CALL_OW 322
// end ; end ;
7500: LD_VAR 0 1
7504: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 22
7518: PUSH
7519: LD_INT 3
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 25
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 69
7544: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7545: LD_ADDR_VAR 0 4
7549: PUSH
7550: LD_INT 4
7552: PUSH
7553: LD_INT 75
7555: PUSH
7556: LD_INT 79
7558: PUSH
7559: LD_INT 2
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 4
7570: PUSH
7571: LD_INT 113
7573: PUSH
7574: LD_INT 94
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 29
7588: PUSH
7589: LD_INT 106
7591: PUSH
7592: LD_INT 97
7594: PUSH
7595: LD_INT 3
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 93
7609: PUSH
7610: LD_INT 97
7612: PUSH
7613: LD_INT 5
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 100
7627: PUSH
7628: LD_INT 89
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 17
7642: PUSH
7643: LD_INT 96
7645: PUSH
7646: LD_INT 89
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 32
7660: PUSH
7661: LD_INT 78
7663: PUSH
7664: LD_INT 94
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 32
7678: PUSH
7679: LD_INT 95
7681: PUSH
7682: LD_INT 82
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 32
7696: PUSH
7697: LD_INT 104
7699: PUSH
7700: LD_INT 85
7702: PUSH
7703: LD_INT 2
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 32
7714: PUSH
7715: LD_INT 81
7717: PUSH
7718: LD_INT 78
7720: PUSH
7721: LD_INT 2
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 33
7732: PUSH
7733: LD_INT 109
7735: PUSH
7736: LD_INT 90
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 33
7750: PUSH
7751: LD_INT 88
7753: PUSH
7754: LD_INT 79
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 76
7771: PUSH
7772: LD_INT 87
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 26
7786: PUSH
7787: LD_INT 96
7789: PUSH
7790: LD_INT 97
7792: PUSH
7793: LD_INT 5
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 26
7804: PUSH
7805: LD_INT 85
7807: PUSH
7808: LD_INT 84
7810: PUSH
7811: LD_INT 2
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 6
7822: PUSH
7823: LD_INT 88
7825: PUSH
7826: LD_INT 95
7828: PUSH
7829: LD_INT 0
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 19
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 89
7846: PUSH
7847: LD_INT 4
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 16
7858: PUSH
7859: LD_INT 97
7861: PUSH
7862: LD_INT 86
7864: PUSH
7865: LD_INT 2
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 24
7876: PUSH
7877: LD_INT 100
7879: PUSH
7880: LD_INT 85
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: ST_TO_ADDR
// for i := 1 to buildingsTab do
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: DOUBLE
7919: LD_INT 1
7921: DEC
7922: ST_TO_ADDR
7923: LD_VAR 0 4
7927: PUSH
7928: FOR_TO
7929: IFFALSE 8002
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7931: LD_VAR 0 3
7935: PPUSH
7936: LD_VAR 0 4
7940: PUSH
7941: LD_VAR 0 2
7945: ARRAY
7946: PUSH
7947: LD_INT 1
7949: ARRAY
7950: PPUSH
7951: LD_VAR 0 4
7955: PUSH
7956: LD_VAR 0 2
7960: ARRAY
7961: PUSH
7962: LD_INT 2
7964: ARRAY
7965: PPUSH
7966: LD_VAR 0 4
7970: PUSH
7971: LD_VAR 0 2
7975: ARRAY
7976: PUSH
7977: LD_INT 3
7979: ARRAY
7980: PPUSH
7981: LD_VAR 0 4
7985: PUSH
7986: LD_VAR 0 2
7990: ARRAY
7991: PUSH
7992: LD_INT 4
7994: ARRAY
7995: PPUSH
7996: CALL_OW 205
8000: GO 7928
8002: POP
8003: POP
// end ;
8004: LD_VAR 0 1
8008: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8009: LD_INT 0
8011: PPUSH
8012: PPUSH
// for i in charactersList do
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_VAR 0 1
8022: PUSH
8023: FOR_IN
8024: IFFALSE 8053
// begin if IsOk ( i ) then
8026: LD_VAR 0 4
8030: PPUSH
8031: CALL_OW 302
8035: IFFALSE 8051
// SaveCharacters ( i , ident ) ;
8037: LD_VAR 0 4
8041: PPUSH
8042: LD_VAR 0 2
8046: PPUSH
8047: CALL_OW 38
// end ;
8051: GO 8023
8053: POP
8054: POP
// end ;
8055: LD_VAR 0 3
8059: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
8066: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8067: LD_ADDR_VAR 0 8
8071: PUSH
8072: LD_INT 48
8074: PUSH
8075: LD_INT 49
8077: PUSH
8078: LD_INT 50
8080: PUSH
8081: LD_INT 20
8083: PUSH
8084: LD_INT 1
8086: PUSH
8087: LD_INT 51
8089: PUSH
8090: LD_INT 52
8092: PUSH
8093: LD_INT 69
8095: PUSH
8096: LD_INT 39
8098: PUSH
8099: LD_INT 34
8101: PUSH
8102: LD_INT 40
8104: PUSH
8105: LD_INT 53
8107: PUSH
8108: LD_INT 71
8110: PUSH
8111: LD_INT 57
8113: PUSH
8114: LD_INT 58
8116: PUSH
8117: LD_INT 44
8119: PUSH
8120: LD_INT 32
8122: PUSH
8123: LD_INT 27
8125: PUSH
8126: LD_INT 23
8128: PUSH
8129: LD_INT 33
8131: PUSH
8132: LD_INT 59
8134: PUSH
8135: LD_INT 54
8137: PUSH
8138: LD_INT 55
8140: PUSH
8141: LD_INT 56
8143: PUSH
8144: LD_INT 63
8146: PUSH
8147: LD_INT 64
8149: PUSH
8150: LD_INT 65
8152: PUSH
8153: LD_INT 30
8155: PUSH
8156: LD_INT 31
8158: PUSH
8159: LD_INT 21
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 25
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8202: LD_ADDR_VAR 0 5
8206: PUSH
8207: DOUBLE
8208: LD_INT 1
8210: DEC
8211: ST_TO_ADDR
8212: LD_VAR 0 8
8216: PUSH
8217: FOR_TO
8218: IFFALSE 8294
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8220: LD_VAR 0 8
8224: PUSH
8225: LD_VAR 0 5
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 1
8235: PPUSH
8236: CALL_OW 321
8240: PUSH
8241: LD_INT 1
8243: EQUAL
8244: PUSH
8245: LD_VAR 0 8
8249: PUSH
8250: LD_VAR 0 5
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 3
8260: PPUSH
8261: CALL_OW 482
8265: PUSH
8266: LD_INT 1
8268: EQUAL
8269: AND
8270: IFFALSE 8292
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8272: LD_VAR 0 2
8276: PPUSH
8277: LD_VAR 0 8
8281: PUSH
8282: LD_VAR 0 5
8286: ARRAY
8287: PPUSH
8288: CALL_OW 184
8292: GO 8217
8294: POP
8295: POP
// end ;
8296: LD_VAR 0 4
8300: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8301: LD_INT 0
8303: PPUSH
8304: PPUSH
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8311: LD_ADDR_VAR 0 6
8315: PUSH
8316: LD_VAR 0 2
8320: PPUSH
8321: LD_INT 22
8323: PUSH
8324: LD_VAR 0 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 56
8335: PUSH
8336: EMPTY
8337: LIST
8338: PUSH
8339: LD_INT 24
8341: PUSH
8342: LD_INT 700
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 3
8351: PUSH
8352: LD_INT 60
8354: PUSH
8355: EMPTY
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 2
8364: PUSH
8365: LD_INT 25
8367: PUSH
8368: LD_INT 1
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: LD_INT 25
8377: PUSH
8378: LD_INT 5
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PUSH
8385: LD_INT 25
8387: PUSH
8388: LD_INT 8
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 25
8397: PUSH
8398: LD_INT 9
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 70
8423: PUSH
8424: LD_EXP 24
8428: PUSH
8429: EMPTY
8430: LIST
8431: DIFF
8432: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8433: LD_ADDR_VAR 0 7
8437: PUSH
8438: LD_VAR 0 2
8442: PPUSH
8443: LD_INT 22
8445: PUSH
8446: LD_VAR 0 1
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: LD_INT 30
8457: PUSH
8458: LD_INT 32
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 58
8467: PUSH
8468: EMPTY
8469: LIST
8470: PUSH
8471: LD_INT 24
8473: PUSH
8474: LD_INT 251
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8492: LD_ADDR_VAR 0 9
8496: PUSH
8497: LD_VAR 0 2
8501: PPUSH
8502: LD_INT 22
8504: PUSH
8505: LD_VAR 0 1
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 2
8516: PUSH
8517: LD_INT 30
8519: PUSH
8520: LD_INT 4
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 30
8529: PUSH
8530: LD_INT 5
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 24
8544: PUSH
8545: LD_INT 251
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 70
8561: ST_TO_ADDR
// if barrackList > 0 then
8562: LD_VAR 0 9
8566: PUSH
8567: LD_INT 0
8569: GREATER
8570: IFFALSE 8718
// begin if turretList = 0 then
8572: LD_VAR 0 7
8576: PUSH
8577: LD_INT 0
8579: EQUAL
8580: IFFALSE 8622
// begin if soldiers_list > 0 then
8582: LD_VAR 0 6
8586: PUSH
8587: LD_INT 0
8589: GREATER
8590: IFFALSE 8620
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8592: LD_VAR 0 6
8596: PPUSH
8597: LD_VAR 0 9
8601: PUSH
8602: LD_INT 1
8604: PPUSH
8605: LD_VAR 0 9
8609: PPUSH
8610: CALL_OW 12
8614: ARRAY
8615: PPUSH
8616: CALL_OW 120
// end else
8620: GO 8718
// begin for i in barrackList do
8622: LD_ADDR_VAR 0 4
8626: PUSH
8627: LD_VAR 0 9
8631: PUSH
8632: FOR_IN
8633: IFFALSE 8716
// begin insideUnits = UnitsInside ( i ) ;
8635: LD_ADDR_VAR 0 10
8639: PUSH
8640: LD_VAR 0 4
8644: PPUSH
8645: CALL_OW 313
8649: ST_TO_ADDR
// if insideUnits > 0 then
8650: LD_VAR 0 10
8654: PUSH
8655: LD_INT 0
8657: GREATER
8658: IFFALSE 8682
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8660: LD_VAR 0 10
8664: PUSH
8665: LD_INT 1
8667: ARRAY
8668: PPUSH
8669: LD_VAR 0 7
8673: PUSH
8674: LD_INT 1
8676: ARRAY
8677: PPUSH
8678: CALL_OW 120
// if soldiers_list > 0 then
8682: LD_VAR 0 6
8686: PUSH
8687: LD_INT 0
8689: GREATER
8690: IFFALSE 8714
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8692: LD_VAR 0 6
8696: PUSH
8697: LD_INT 1
8699: ARRAY
8700: PPUSH
8701: LD_VAR 0 7
8705: PUSH
8706: LD_INT 1
8708: ARRAY
8709: PPUSH
8710: CALL_OW 120
// end ;
8714: GO 8632
8716: POP
8717: POP
// end ; end ; end ;
8718: LD_VAR 0 3
8722: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8723: LD_INT 0
8725: PPUSH
8726: PPUSH
8727: PPUSH
8728: PPUSH
8729: PPUSH
8730: PPUSH
// for i = 1 to vehCount do
8731: LD_ADDR_VAR 0 8
8735: PUSH
8736: DOUBLE
8737: LD_INT 1
8739: DEC
8740: ST_TO_ADDR
8741: LD_VAR 0 6
8745: PUSH
8746: FOR_TO
8747: IFFALSE 8954
// begin uc_side = side ;
8749: LD_ADDR_OWVAR 20
8753: PUSH
8754: LD_VAR 0 1
8758: ST_TO_ADDR
// uc_nation = nation ;
8759: LD_ADDR_OWVAR 21
8763: PUSH
8764: LD_VAR 0 3
8768: ST_TO_ADDR
// vc_Chassis = 22 ;
8769: LD_ADDR_OWVAR 37
8773: PUSH
8774: LD_INT 22
8776: ST_TO_ADDR
// vc_engine = 1 ;
8777: LD_ADDR_OWVAR 39
8781: PUSH
8782: LD_INT 1
8784: ST_TO_ADDR
// vc_control = 1 ;
8785: LD_ADDR_OWVAR 38
8789: PUSH
8790: LD_INT 1
8792: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8793: LD_ADDR_OWVAR 40
8797: PUSH
8798: LD_INT 43
8800: PUSH
8801: LD_INT 44
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 1
8810: PPUSH
8811: LD_INT 2
8813: PPUSH
8814: CALL_OW 12
8818: ARRAY
8819: ST_TO_ADDR
// veh = CreateVehicle ;
8820: LD_ADDR_VAR 0 12
8824: PUSH
8825: CALL_OW 45
8829: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8830: LD_VAR 0 12
8834: PPUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: LD_INT 0
8842: PPUSH
8843: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8847: LD_ADDR_EXP 32
8851: PUSH
8852: LD_EXP 32
8856: PUSH
8857: LD_VAR 0 12
8861: ADD
8862: ST_TO_ADDR
// hc_class = 3 ;
8863: LD_ADDR_OWVAR 28
8867: PUSH
8868: LD_INT 3
8870: ST_TO_ADDR
// hc_name =  ;
8871: LD_ADDR_OWVAR 26
8875: PUSH
8876: LD_STRING 
8878: ST_TO_ADDR
// hc_gallery =  ;
8879: LD_ADDR_OWVAR 33
8883: PUSH
8884: LD_STRING 
8886: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8887: LD_INT 0
8889: PPUSH
8890: LD_INT 3
8892: PPUSH
8893: LD_EXP 25
8897: PPUSH
8898: LD_EXP 26
8902: PPUSH
8903: CALL_OW 12
8907: PPUSH
8908: CALL_OW 380
// un = CreateHuman ;
8912: LD_ADDR_VAR 0 10
8916: PUSH
8917: CALL_OW 44
8921: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8922: LD_VAR 0 10
8926: PPUSH
8927: LD_VAR 0 12
8931: PPUSH
8932: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8936: LD_ADDR_EXP 32
8940: PUSH
8941: LD_EXP 32
8945: PUSH
8946: LD_VAR 0 10
8950: ADD
8951: ST_TO_ADDR
// end ;
8952: GO 8746
8954: POP
8955: POP
// end ;
8956: LD_VAR 0 7
8960: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
8961: LD_INT 0
8963: PPUSH
8964: PPUSH
8965: PPUSH
8966: PPUSH
8967: PPUSH
8968: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
8969: LD_VAR 0 2
8973: PPUSH
8974: LD_INT 22
8976: PUSH
8977: LD_VAR 0 1
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: PPUSH
8989: CALL_OW 70
8993: PUSH
8994: LD_INT 0
8996: EQUAL
8997: PUSH
8998: LD_EXP 32
9002: AND
9003: IFFALSE 9290
// begin for i in defenders_list do
9005: LD_ADDR_VAR 0 4
9009: PUSH
9010: LD_EXP 32
9014: PUSH
9015: FOR_IN
9016: IFFALSE 9288
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9018: LD_VAR 0 4
9022: PPUSH
9023: LD_INT 63
9025: PPUSH
9026: LD_INT 75
9028: PPUSH
9029: CALL_OW 297
9033: PUSH
9034: LD_INT 8
9036: GREATER
9037: PUSH
9038: LD_VAR 0 4
9042: PPUSH
9043: CALL_OW 314
9047: NOT
9048: AND
9049: IFFALSE 9068
// ComMoveXY ( i , 63 , 75 ) else
9051: LD_VAR 0 4
9055: PPUSH
9056: LD_INT 63
9058: PPUSH
9059: LD_INT 75
9061: PPUSH
9062: CALL_OW 111
9066: GO 9286
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9068: LD_VAR 0 4
9072: PPUSH
9073: CALL_OW 257
9077: PUSH
9078: LD_INT 3
9080: EQUAL
9081: PUSH
9082: LD_VAR 0 4
9086: PPUSH
9087: CALL_OW 310
9091: NOT
9092: AND
9093: PUSH
9094: LD_VAR 0 4
9098: PPUSH
9099: CALL_OW 314
9103: NOT
9104: AND
9105: IFFALSE 9158
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9107: LD_VAR 0 4
9111: PPUSH
9112: LD_EXP 32
9116: PPUSH
9117: LD_INT 58
9119: PUSH
9120: EMPTY
9121: LIST
9122: PUSH
9123: LD_INT 24
9125: PUSH
9126: LD_INT 1000
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PPUSH
9137: CALL_OW 72
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: CALL_OW 74
9151: PPUSH
9152: CALL_OW 120
9156: GO 9286
// if GetFuel ( i ) < 100 then
9158: LD_VAR 0 4
9162: PPUSH
9163: CALL_OW 261
9167: PUSH
9168: LD_INT 100
9170: LESS
9171: IFFALSE 9187
// SetFuel ( defenders_list , 100 ) else
9173: LD_EXP 32
9177: PPUSH
9178: LD_INT 100
9180: PPUSH
9181: CALL_OW 240
9185: GO 9286
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9187: LD_VAR 0 4
9191: PPUSH
9192: CALL_OW 263
9196: PUSH
9197: LD_INT 1
9199: EQUAL
9200: PUSH
9201: LD_VAR 0 4
9205: PPUSH
9206: CALL_OW 256
9210: PUSH
9211: LD_INT 990
9213: LESS
9214: AND
9215: IFFALSE 9286
// begin veh := i ;
9217: LD_ADDR_VAR 0 7
9221: PUSH
9222: LD_VAR 0 4
9226: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9227: LD_ADDR_VAR 0 8
9231: PUSH
9232: LD_VAR 0 4
9236: PPUSH
9237: CALL_OW 311
9241: ST_TO_ADDR
// if veh then
9242: LD_VAR 0 7
9246: IFFALSE 9286
// begin ComMoveXY ( i , 63 , 75 ) ;
9248: LD_VAR 0 4
9252: PPUSH
9253: LD_INT 63
9255: PPUSH
9256: LD_INT 75
9258: PPUSH
9259: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9263: LD_VAR 0 7
9267: PPUSH
9268: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9272: LD_VAR 0 8
9276: PPUSH
9277: LD_VAR 0 7
9281: PPUSH
9282: CALL_OW 189
// end ; end ; end ;
9286: GO 9015
9288: POP
9289: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9290: LD_ADDR_VAR 0 6
9294: PUSH
9295: LD_VAR 0 2
9299: PPUSH
9300: LD_INT 22
9302: PUSH
9303: LD_VAR 0 1
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: PPUSH
9315: CALL_OW 70
9319: ST_TO_ADDR
// if tmp and defenders_list then
9320: LD_VAR 0 6
9324: PUSH
9325: LD_EXP 32
9329: AND
9330: IFFALSE 9499
// for i in defenders_list do
9332: LD_ADDR_VAR 0 4
9336: PUSH
9337: LD_EXP 32
9341: PUSH
9342: FOR_IN
9343: IFFALSE 9497
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9345: LD_VAR 0 4
9349: PPUSH
9350: CALL_OW 257
9354: PUSH
9355: LD_INT 3
9357: EQUAL
9358: PUSH
9359: LD_VAR 0 4
9363: PPUSH
9364: CALL_OW 310
9368: NOT
9369: AND
9370: IFFALSE 9409
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9372: LD_VAR 0 4
9376: PPUSH
9377: LD_EXP 32
9381: PPUSH
9382: LD_INT 58
9384: PUSH
9385: EMPTY
9386: LIST
9387: PPUSH
9388: CALL_OW 72
9392: PPUSH
9393: LD_VAR 0 4
9397: PPUSH
9398: CALL_OW 74
9402: PPUSH
9403: CALL_OW 120
9407: GO 9495
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9409: LD_VAR 0 4
9413: PPUSH
9414: CALL_OW 314
9418: NOT
9419: PUSH
9420: LD_VAR 0 4
9424: PPUSH
9425: LD_VAR 0 2
9429: PPUSH
9430: CALL_OW 308
9434: AND
9435: IFFALSE 9463
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9437: LD_VAR 0 4
9441: PPUSH
9442: LD_VAR 0 6
9446: PPUSH
9447: LD_VAR 0 4
9451: PPUSH
9452: CALL_OW 74
9456: PPUSH
9457: CALL_OW 115
9461: GO 9495
// if not IsInArea ( i , defenseArea ) then
9463: LD_VAR 0 4
9467: PPUSH
9468: LD_VAR 0 2
9472: PPUSH
9473: CALL_OW 308
9477: NOT
9478: IFFALSE 9495
// ComMoveXY ( i , 63 , 75 ) ;
9480: LD_VAR 0 4
9484: PPUSH
9485: LD_INT 63
9487: PPUSH
9488: LD_INT 75
9490: PPUSH
9491: CALL_OW 111
// end ;
9495: GO 9342
9497: POP
9498: POP
// end ;
9499: LD_VAR 0 3
9503: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9509: LD_INT 22
9511: PUSH
9512: LD_VAR 0 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 21
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 69
9539: PUSH
9540: LD_VAR 0 3
9544: LESSEQUAL
9545: IFFALSE 9653
// begin for i = 1 to vehCount do
9547: LD_ADDR_VAR 0 9
9551: PUSH
9552: DOUBLE
9553: LD_INT 1
9555: DEC
9556: ST_TO_ADDR
9557: LD_VAR 0 3
9561: PUSH
9562: FOR_TO
9563: IFFALSE 9651
// begin weapon = weaponTab [ i ] ;
9565: LD_ADDR_VAR 0 10
9569: PUSH
9570: LD_VAR 0 4
9574: PUSH
9575: LD_VAR 0 9
9579: ARRAY
9580: ST_TO_ADDR
// if weapon = 46 then
9581: LD_VAR 0 10
9585: PUSH
9586: LD_INT 46
9588: EQUAL
9589: IFFALSE 9620
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9591: LD_VAR 0 2
9595: PPUSH
9596: LD_INT 24
9598: PPUSH
9599: LD_VAR 0 5
9603: PPUSH
9604: LD_VAR 0 6
9608: PPUSH
9609: LD_VAR 0 10
9613: PPUSH
9614: CALL_OW 185
// end else
9618: GO 9649
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9620: LD_VAR 0 2
9624: PPUSH
9625: LD_VAR 0 7
9629: PPUSH
9630: LD_VAR 0 5
9634: PPUSH
9635: LD_VAR 0 6
9639: PPUSH
9640: LD_VAR 0 10
9644: PPUSH
9645: CALL_OW 185
// end ; end ;
9649: GO 9562
9651: POP
9652: POP
// end ; end ;
9653: LD_VAR 0 8
9657: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9658: LD_INT 0
9660: PPUSH
9661: PPUSH
9662: PPUSH
9663: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9664: LD_ADDR_VAR 0 8
9668: PUSH
9669: LD_INT 22
9671: PUSH
9672: LD_VAR 0 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 21
9683: PUSH
9684: LD_INT 2
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 650
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: PPUSH
9713: CALL_OW 69
9717: ST_TO_ADDR
// if damageVehicles > 0 then
9718: LD_VAR 0 8
9722: PUSH
9723: LD_INT 0
9725: GREATER
9726: IFFALSE 9747
// ComMoveXY ( damageVehicles , repX , repY ) ;
9728: LD_VAR 0 8
9732: PPUSH
9733: LD_VAR 0 3
9737: PPUSH
9738: LD_VAR 0 4
9742: PPUSH
9743: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9747: LD_VAR 0 8
9751: PPUSH
9752: LD_INT 95
9754: PUSH
9755: LD_VAR 0 2
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 3
9766: PUSH
9767: LD_INT 58
9769: PUSH
9770: EMPTY
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 72
9785: PUSH
9786: LD_INT 0
9788: GREATER
9789: IFFALSE 9856
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9791: LD_ADDR_VAR 0 6
9795: PUSH
9796: LD_VAR 0 8
9800: PPUSH
9801: LD_INT 95
9803: PUSH
9804: LD_VAR 0 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 3
9815: PUSH
9816: LD_INT 58
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PPUSH
9830: CALL_OW 72
9834: PUSH
9835: FOR_IN
9836: IFFALSE 9854
// ComExitVehicle ( UnitsInside ( i ) ) ;
9838: LD_VAR 0 6
9842: PPUSH
9843: CALL_OW 313
9847: PPUSH
9848: CALL_OW 121
9852: GO 9835
9854: POP
9855: POP
// end ;
9856: LD_VAR 0 5
9860: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9861: LD_INT 0
9863: PPUSH
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
9869: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9870: LD_ADDR_VAR 0 8
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_VAR 0 1
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 21
9889: PUSH
9890: LD_INT 2
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 24
9899: PUSH
9900: LD_INT 250
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 3
9909: PUSH
9910: LD_INT 58
9912: PUSH
9913: EMPTY
9914: LIST
9915: PUSH
9916: LD_INT 2
9918: PUSH
9919: LD_INT 34
9921: PUSH
9922: LD_INT 43
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 34
9931: PUSH
9932: LD_INT 44
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 34
9941: PUSH
9942: LD_INT 46
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 69
9970: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9971: LD_INT 22
9973: PUSH
9974: LD_VAR 0 1
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: LD_INT 1000
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 58
10008: PUSH
10009: EMPTY
10010: LIST
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: LD_INT 34
10017: PUSH
10018: LD_INT 43
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 34
10027: PUSH
10028: LD_INT 44
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 34
10037: PUSH
10038: LD_INT 46
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 69
10066: PUSH
10067: LD_INT 5
10069: PUSH
10070: LD_INT 6
10072: PUSH
10073: LD_INT 7
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: LD_OWVAR 67
10085: ARRAY
10086: GREATEREQUAL
10087: IFFALSE 10652
// repeat wait ( 0 0$1 ) ;
10089: LD_INT 35
10091: PPUSH
10092: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10096: LD_ADDR_VAR 0 8
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_VAR 0 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 24
10125: PUSH
10126: LD_INT 250
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 2
10135: PUSH
10136: LD_INT 34
10138: PUSH
10139: LD_INT 43
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 34
10148: PUSH
10149: LD_INT 44
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 34
10158: PUSH
10159: LD_INT 46
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: LD_INT 58
10177: PUSH
10178: EMPTY
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10197: LD_INT 22
10199: PUSH
10200: LD_VAR 0 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 95
10211: PUSH
10212: LD_VAR 0 2
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 69
10229: NOT
10230: PUSH
10231: LD_VAR 0 11
10235: PUSH
10236: LD_INT 0
10238: EQUAL
10239: AND
10240: IFFALSE 10295
// for i := 1 to wayX do
10242: LD_ADDR_VAR 0 6
10246: PUSH
10247: DOUBLE
10248: LD_INT 1
10250: DEC
10251: ST_TO_ADDR
10252: LD_VAR 0 3
10256: PUSH
10257: FOR_TO
10258: IFFALSE 10293
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10260: LD_VAR 0 8
10264: PPUSH
10265: LD_VAR 0 3
10269: PUSH
10270: LD_VAR 0 6
10274: ARRAY
10275: PPUSH
10276: LD_VAR 0 4
10280: PUSH
10281: LD_VAR 0 6
10285: ARRAY
10286: PPUSH
10287: CALL_OW 114
10291: GO 10257
10293: POP
10294: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10295: LD_INT 22
10297: PUSH
10298: LD_VAR 0 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 95
10309: PUSH
10310: LD_VAR 0 2
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: IFFALSE 10551
// begin seeEnemy = 1 ;
10329: LD_ADDR_VAR 0 11
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// for j in vehiclesOK do
10337: LD_ADDR_VAR 0 7
10341: PUSH
10342: LD_VAR 0 8
10346: PUSH
10347: FOR_IN
10348: IFFALSE 10549
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10350: LD_ADDR_VAR 0 9
10354: PUSH
10355: LD_INT 81
10357: PUSH
10358: LD_VAR 0 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 101
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: PPUSH
10386: LD_VAR 0 7
10390: PPUSH
10391: CALL_OW 74
10395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10396: LD_ADDR_VAR 0 10
10400: PUSH
10401: LD_INT 81
10403: PUSH
10404: LD_VAR 0 1
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 101
10415: PUSH
10416: LD_INT 1
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 2
10425: PUSH
10426: LD_INT 59
10428: PUSH
10429: EMPTY
10430: LIST
10431: PUSH
10432: LD_INT 21
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 21
10444: PUSH
10445: LD_INT 2
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: PPUSH
10471: LD_VAR 0 7
10475: PPUSH
10476: CALL_OW 74
10480: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10481: LD_VAR 0 7
10485: PPUSH
10486: LD_VAR 0 9
10490: PPUSH
10491: CALL_OW 296
10495: PUSH
10496: LD_INT 8
10498: PLUS
10499: PUSH
10500: LD_VAR 0 7
10504: PPUSH
10505: LD_VAR 0 10
10509: PPUSH
10510: CALL_OW 296
10514: LESS
10515: IFFALSE 10533
// ComAttackUnit ( j , target1 ) else
10517: LD_VAR 0 7
10521: PPUSH
10522: LD_VAR 0 9
10526: PPUSH
10527: CALL_OW 115
10531: GO 10547
// ComAttackUnit ( j , target2 ) ;
10533: LD_VAR 0 7
10537: PPUSH
10538: LD_VAR 0 10
10542: PPUSH
10543: CALL_OW 115
// end ;
10547: GO 10347
10549: POP
10550: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10551: LD_INT 22
10553: PUSH
10554: LD_VAR 0 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 21
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 24
10575: PUSH
10576: LD_INT 250
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 2
10585: PUSH
10586: LD_INT 34
10588: PUSH
10589: LD_INT 43
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 34
10598: PUSH
10599: LD_INT 44
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 34
10608: PUSH
10609: LD_INT 46
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: LD_INT 58
10627: PUSH
10628: EMPTY
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: PUSH
10647: LD_INT 0
10649: EQUAL
10650: IFFALSE 10089
// seeEnemy = 0 ;
10652: LD_ADDR_VAR 0 11
10656: PUSH
10657: LD_INT 0
10659: ST_TO_ADDR
// end ;
10660: LD_VAR 0 5
10664: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
10669: PPUSH
10670: PPUSH
10671: PPUSH
10672: PPUSH
// repeat wait ( 0 0$1 ) ;
10673: LD_INT 35
10675: PPUSH
10676: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10680: LD_ADDR_VAR 0 7
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 2
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 24
10709: PUSH
10710: LD_INT 651
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: ST_TO_ADDR
// for j in vehiclesOK do
10727: LD_ADDR_VAR 0 4
10731: PUSH
10732: LD_VAR 0 7
10736: PUSH
10737: FOR_IN
10738: IFFALSE 10939
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_INT 81
10747: PUSH
10748: LD_VAR 0 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 101
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PPUSH
10776: LD_VAR 0 4
10780: PPUSH
10781: CALL_OW 74
10785: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10786: LD_ADDR_VAR 0 6
10790: PUSH
10791: LD_INT 81
10793: PUSH
10794: LD_VAR 0 1
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 101
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 2
10815: PUSH
10816: LD_INT 59
10818: PUSH
10819: EMPTY
10820: LIST
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 1
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 74
10870: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10871: LD_VAR 0 4
10875: PPUSH
10876: LD_VAR 0 5
10880: PPUSH
10881: CALL_OW 296
10885: PUSH
10886: LD_INT 8
10888: PLUS
10889: PUSH
10890: LD_VAR 0 4
10894: PPUSH
10895: LD_VAR 0 6
10899: PPUSH
10900: CALL_OW 296
10904: LESS
10905: IFFALSE 10923
// ComAttackUnit ( j , target1 ) else
10907: LD_VAR 0 4
10911: PPUSH
10912: LD_VAR 0 5
10916: PPUSH
10917: CALL_OW 115
10921: GO 10937
// ComAttackUnit ( j , target2 ) ;
10923: LD_VAR 0 4
10927: PPUSH
10928: LD_VAR 0 6
10932: PPUSH
10933: CALL_OW 115
// end ;
10937: GO 10737
10939: POP
10940: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10941: LD_INT 22
10943: PUSH
10944: LD_VAR 0 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 24
10965: PUSH
10966: LD_INT 250
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: PUSH
10983: LD_INT 0
10985: EQUAL
10986: IFFALSE 10673
// end ;
10988: LD_VAR 0 2
10992: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11001: LD_ADDR_VAR 0 8
11005: PUSH
11006: LD_VAR 0 2
11010: PPUSH
11011: CALL_OW 313
11015: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11016: LD_ADDR_VAR 0 9
11020: PUSH
11021: LD_VAR 0 3
11025: PPUSH
11026: LD_INT 22
11028: PUSH
11029: LD_VAR 0 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 25
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 24
11050: PUSH
11051: LD_INT 750
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 3
11060: PUSH
11061: LD_INT 54
11063: PUSH
11064: EMPTY
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 70
11081: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11082: LD_ADDR_VAR 0 6
11086: PUSH
11087: LD_VAR 0 3
11091: PPUSH
11092: LD_INT 22
11094: PUSH
11095: LD_VAR 0 1
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 21
11106: PUSH
11107: LD_INT 3
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: LD_INT 24
11119: PUSH
11120: LD_INT 1000
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: PPUSH
11139: CALL_OW 70
11143: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11144: LD_VAR 0 6
11148: NOT
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: LD_VAR 0 1
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 25
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 24
11174: PUSH
11175: LD_INT 250
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 69
11191: NOT
11192: AND
11193: IFFALSE 11197
// exit ;
11195: GO 11394
// if buildings_list > 0 and engineerOkInside then
11197: LD_VAR 0 6
11201: PUSH
11202: LD_INT 0
11204: GREATER
11205: PUSH
11206: LD_VAR 0 8
11210: AND
11211: IFFALSE 11237
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11213: LD_VAR 0 8
11217: PPUSH
11218: LD_INT 25
11220: PUSH
11221: LD_INT 2
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 72
11232: PPUSH
11233: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11237: LD_VAR 0 6
11241: PUSH
11242: LD_INT 0
11244: GREATER
11245: PUSH
11246: LD_VAR 0 9
11250: PUSH
11251: LD_INT 0
11253: GREATER
11254: AND
11255: IFFALSE 11275
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11257: LD_VAR 0 9
11261: PPUSH
11262: LD_VAR 0 6
11266: PUSH
11267: LD_INT 1
11269: ARRAY
11270: PPUSH
11271: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11275: LD_VAR 0 6
11279: PUSH
11280: LD_INT 0
11282: EQUAL
11283: PUSH
11284: LD_VAR 0 4
11288: PUSH
11289: LD_INT 0
11291: EQUAL
11292: AND
11293: PUSH
11294: LD_VAR 0 9
11298: PUSH
11299: LD_INT 0
11301: GREATER
11302: AND
11303: IFFALSE 11319
// ComEnterUnit ( engineerOkOutside , building ) ;
11305: LD_VAR 0 9
11309: PPUSH
11310: LD_VAR 0 2
11314: PPUSH
11315: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11319: LD_VAR 0 9
11323: PUSH
11324: LD_INT 0
11326: GREATER
11327: PUSH
11328: LD_VAR 0 6
11332: PUSH
11333: LD_INT 0
11335: EQUAL
11336: AND
11337: PUSH
11338: LD_VAR 0 4
11342: PUSH
11343: LD_INT 0
11345: GREATER
11346: AND
11347: IFFALSE 11394
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11349: LD_VAR 0 9
11353: PPUSH
11354: LD_VAR 0 4
11358: PUSH
11359: LD_INT 1
11361: ARRAY
11362: PPUSH
11363: LD_VAR 0 4
11367: PUSH
11368: LD_INT 2
11370: ARRAY
11371: PPUSH
11372: LD_VAR 0 4
11376: PUSH
11377: LD_INT 3
11379: ARRAY
11380: PPUSH
11381: LD_VAR 0 4
11385: PUSH
11386: LD_INT 4
11388: ARRAY
11389: PPUSH
11390: CALL_OW 145
// end ;
11394: LD_VAR 0 5
11398: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11399: LD_INT 0
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
11407: PPUSH
11408: PPUSH
11409: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11410: LD_ADDR_VAR 0 6
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_VAR 0 1
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 25
11429: PUSH
11430: LD_INT 4
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 23
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 24
11449: PUSH
11450: LD_INT 251
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 69
11467: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11468: LD_ADDR_VAR 0 7
11472: PUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 22
11480: PUSH
11481: LD_VAR 0 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 23
11492: PUSH
11493: LD_INT 2
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 25
11502: PUSH
11503: LD_INT 4
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 50
11512: PUSH
11513: EMPTY
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PPUSH
11522: CALL_OW 70
11526: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11527: LD_ADDR_VAR 0 10
11531: PUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 22
11539: PUSH
11540: LD_VAR 0 1
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 21
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 3
11561: PUSH
11562: LD_INT 25
11564: PUSH
11565: LD_INT 3
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: LD_INT 24
11581: PUSH
11582: LD_INT 750
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 70
11603: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11604: LD_ADDR_VAR 0 11
11608: PUSH
11609: LD_VAR 0 2
11613: PPUSH
11614: LD_INT 22
11616: PUSH
11617: LD_VAR 0 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 21
11628: PUSH
11629: LD_INT 1
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 3
11638: PUSH
11639: LD_INT 25
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 3
11655: PUSH
11656: LD_INT 24
11658: PUSH
11659: LD_INT 1000
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 70
11680: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11681: LD_VAR 0 10
11685: NOT
11686: PUSH
11687: LD_VAR 0 11
11691: NOT
11692: AND
11693: PUSH
11694: LD_VAR 0 6
11698: NOT
11699: AND
11700: IFFALSE 11704
// exit ;
11702: GO 11938
// if damageUnits > 0 and sci_list > 0 then
11704: LD_VAR 0 10
11708: PUSH
11709: LD_INT 0
11711: GREATER
11712: PUSH
11713: LD_VAR 0 6
11717: PUSH
11718: LD_INT 0
11720: GREATER
11721: AND
11722: IFFALSE 11738
// ComMoveToArea ( damageUnits , healArea ) ;
11724: LD_VAR 0 10
11728: PPUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11738: LD_VAR 0 11
11742: PUSH
11743: LD_INT 0
11745: GREATER
11746: PUSH
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: GREATER
11755: AND
11756: IFFALSE 11767
// ComExitBuilding ( sci_list ) ;
11758: LD_VAR 0 6
11762: PPUSH
11763: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11767: LD_VAR 0 11
11771: PUSH
11772: LD_INT 0
11774: GREATER
11775: PUSH
11776: LD_VAR 0 7
11780: PUSH
11781: LD_INT 0
11783: GREATER
11784: AND
11785: IFFALSE 11805
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11787: LD_VAR 0 7
11791: PPUSH
11792: LD_VAR 0 11
11796: PUSH
11797: LD_INT 1
11799: ARRAY
11800: PPUSH
11801: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11805: LD_VAR 0 10
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: PUSH
11814: LD_VAR 0 11
11818: PUSH
11819: LD_INT 0
11821: EQUAL
11822: AND
11823: PUSH
11824: LD_VAR 0 7
11828: PUSH
11829: LD_INT 0
11831: GREATER
11832: AND
11833: IFFALSE 11938
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11835: LD_ADDR_VAR 0 12
11839: PUSH
11840: LD_INT 22
11842: PUSH
11843: LD_VAR 0 1
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 3
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 30
11864: PUSH
11865: LD_INT 8
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11882: LD_ADDR_VAR 0 13
11886: PUSH
11887: LD_INT 1
11889: PPUSH
11890: LD_VAR 0 12
11894: PPUSH
11895: CALL_OW 12
11899: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11900: LD_VAR 0 7
11904: PPUSH
11905: LD_INT 3
11907: PUSH
11908: LD_INT 60
11910: PUSH
11911: EMPTY
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 72
11922: PPUSH
11923: LD_VAR 0 12
11927: PUSH
11928: LD_VAR 0 13
11932: ARRAY
11933: PPUSH
11934: CALL_OW 120
// end ; end ;
11938: LD_VAR 0 5
11942: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11943: LD_INT 0
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11950: LD_ADDR_VAR 0 6
11954: PUSH
11955: LD_INT 22
11957: PUSH
11958: LD_VAR 0 1
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 31
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 30
11982: PUSH
11983: LD_INT 32
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 30
11992: PUSH
11993: LD_INT 33
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 30
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 5
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12037: LD_ADDR_VAR 0 7
12041: PUSH
12042: LD_INT 22
12044: PUSH
12045: LD_VAR 0 2
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 21
12056: PUSH
12057: LD_INT 3
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 58
12066: PUSH
12067: EMPTY
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 69
12079: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12080: LD_VAR 0 6
12084: PUSH
12085: LD_INT 0
12087: GREATER
12088: PUSH
12089: LD_VAR 0 7
12093: PUSH
12094: LD_INT 0
12096: GREATER
12097: AND
12098: IFFALSE 12168
// begin for i in turretsList do
12100: LD_ADDR_VAR 0 4
12104: PUSH
12105: LD_VAR 0 6
12109: PUSH
12110: FOR_IN
12111: IFFALSE 12166
// begin for j in enemyBuildings do
12113: LD_ADDR_VAR 0 5
12117: PUSH
12118: LD_VAR 0 7
12122: PUSH
12123: FOR_IN
12124: IFFALSE 12162
// begin if GetDistUnits ( i , j ) < 20 then
12126: LD_VAR 0 4
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 296
12140: PUSH
12141: LD_INT 20
12143: LESS
12144: IFFALSE 12160
// begin ComAttackUnit ( i , j ) ;
12146: LD_VAR 0 4
12150: PPUSH
12151: LD_VAR 0 5
12155: PPUSH
12156: CALL_OW 115
// end ; end ;
12160: GO 12123
12162: POP
12163: POP
// end ;
12164: GO 12110
12166: POP
12167: POP
// end ; end ;
12168: LD_VAR 0 3
12172: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12173: LD_INT 0
12175: PPUSH
12176: PPUSH
12177: PPUSH
12178: PPUSH
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
// for i = 1 to medicCount do
12186: LD_ADDR_VAR 0 14
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12284
// begin uc_side = side ;
12204: LD_ADDR_OWVAR 20
12208: PUSH
12209: LD_VAR 0 1
12213: ST_TO_ADDR
// uc_nation = nation ;
12214: LD_ADDR_OWVAR 21
12218: PUSH
12219: LD_VAR 0 2
12223: ST_TO_ADDR
// hc_name =  ;
12224: LD_ADDR_OWVAR 26
12228: PUSH
12229: LD_STRING 
12231: ST_TO_ADDR
// hc_gallery =  ;
12232: LD_ADDR_OWVAR 33
12236: PUSH
12237: LD_STRING 
12239: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12240: LD_INT 0
12242: PPUSH
12243: LD_INT 4
12245: PPUSH
12246: LD_VAR 0 8
12250: PPUSH
12251: CALL_OW 380
// un = CreateHuman ;
12255: LD_ADDR_VAR 0 16
12259: PUSH
12260: CALL_OW 44
12264: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12265: LD_VAR 0 16
12269: PPUSH
12270: LD_VAR 0 9
12274: PPUSH
12275: LD_INT 0
12277: PPUSH
12278: CALL_OW 49
// end ;
12282: GO 12201
12284: POP
12285: POP
// for i = 1 to soldierCount do
12286: LD_ADDR_VAR 0 14
12290: PUSH
12291: DOUBLE
12292: LD_INT 1
12294: DEC
12295: ST_TO_ADDR
12296: LD_VAR 0 3
12300: PUSH
12301: FOR_TO
12302: IFFALSE 12384
// begin uc_side = side ;
12304: LD_ADDR_OWVAR 20
12308: PUSH
12309: LD_VAR 0 1
12313: ST_TO_ADDR
// uc_nation = nation ;
12314: LD_ADDR_OWVAR 21
12318: PUSH
12319: LD_VAR 0 2
12323: ST_TO_ADDR
// hc_name =  ;
12324: LD_ADDR_OWVAR 26
12328: PUSH
12329: LD_STRING 
12331: ST_TO_ADDR
// hc_gallery =  ;
12332: LD_ADDR_OWVAR 33
12336: PUSH
12337: LD_STRING 
12339: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12340: LD_INT 0
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: LD_VAR 0 8
12350: PPUSH
12351: CALL_OW 380
// un = CreateHuman ;
12355: LD_ADDR_VAR 0 16
12359: PUSH
12360: CALL_OW 44
12364: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12365: LD_VAR 0 16
12369: PPUSH
12370: LD_VAR 0 9
12374: PPUSH
12375: LD_INT 0
12377: PPUSH
12378: CALL_OW 49
// end ;
12382: GO 12301
12384: POP
12385: POP
// for i = 1 to sniperCount do
12386: LD_ADDR_VAR 0 14
12390: PUSH
12391: DOUBLE
12392: LD_INT 1
12394: DEC
12395: ST_TO_ADDR
12396: LD_VAR 0 4
12400: PUSH
12401: FOR_TO
12402: IFFALSE 12484
// begin uc_side = side ;
12404: LD_ADDR_OWVAR 20
12408: PUSH
12409: LD_VAR 0 1
12413: ST_TO_ADDR
// uc_nation = nation ;
12414: LD_ADDR_OWVAR 21
12418: PUSH
12419: LD_VAR 0 2
12423: ST_TO_ADDR
// hc_name =  ;
12424: LD_ADDR_OWVAR 26
12428: PUSH
12429: LD_STRING 
12431: ST_TO_ADDR
// hc_gallery =  ;
12432: LD_ADDR_OWVAR 33
12436: PUSH
12437: LD_STRING 
12439: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12440: LD_INT 0
12442: PPUSH
12443: LD_INT 5
12445: PPUSH
12446: LD_VAR 0 8
12450: PPUSH
12451: CALL_OW 380
// un = CreateHuman ;
12455: LD_ADDR_VAR 0 16
12459: PUSH
12460: CALL_OW 44
12464: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12465: LD_VAR 0 16
12469: PPUSH
12470: LD_VAR 0 9
12474: PPUSH
12475: LD_INT 0
12477: PPUSH
12478: CALL_OW 49
// end ;
12482: GO 12401
12484: POP
12485: POP
// for i = 1 to bazookCount do
12486: LD_ADDR_VAR 0 14
12490: PUSH
12491: DOUBLE
12492: LD_INT 1
12494: DEC
12495: ST_TO_ADDR
12496: LD_VAR 0 5
12500: PUSH
12501: FOR_TO
12502: IFFALSE 12584
// begin uc_side = side ;
12504: LD_ADDR_OWVAR 20
12508: PUSH
12509: LD_VAR 0 1
12513: ST_TO_ADDR
// uc_nation = nation ;
12514: LD_ADDR_OWVAR 21
12518: PUSH
12519: LD_VAR 0 2
12523: ST_TO_ADDR
// hc_name =  ;
12524: LD_ADDR_OWVAR 26
12528: PUSH
12529: LD_STRING 
12531: ST_TO_ADDR
// hc_gallery =  ;
12532: LD_ADDR_OWVAR 33
12536: PUSH
12537: LD_STRING 
12539: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12540: LD_INT 0
12542: PPUSH
12543: LD_INT 9
12545: PPUSH
12546: LD_VAR 0 8
12550: PPUSH
12551: CALL_OW 380
// un = CreateHuman ;
12555: LD_ADDR_VAR 0 16
12559: PUSH
12560: CALL_OW 44
12564: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12565: LD_VAR 0 16
12569: PPUSH
12570: LD_VAR 0 9
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 49
// end ;
12582: GO 12501
12584: POP
12585: POP
// for i = 1 to mortalCount do
12586: LD_ADDR_VAR 0 14
12590: PUSH
12591: DOUBLE
12592: LD_INT 1
12594: DEC
12595: ST_TO_ADDR
12596: LD_VAR 0 6
12600: PUSH
12601: FOR_TO
12602: IFFALSE 12684
// begin uc_side = side ;
12604: LD_ADDR_OWVAR 20
12608: PUSH
12609: LD_VAR 0 1
12613: ST_TO_ADDR
// uc_nation = nation ;
12614: LD_ADDR_OWVAR 21
12618: PUSH
12619: LD_VAR 0 2
12623: ST_TO_ADDR
// hc_name =  ;
12624: LD_ADDR_OWVAR 26
12628: PUSH
12629: LD_STRING 
12631: ST_TO_ADDR
// hc_gallery =  ;
12632: LD_ADDR_OWVAR 33
12636: PUSH
12637: LD_STRING 
12639: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12640: LD_INT 0
12642: PPUSH
12643: LD_INT 8
12645: PPUSH
12646: LD_VAR 0 8
12650: PPUSH
12651: CALL_OW 380
// un = CreateHuman ;
12655: LD_ADDR_VAR 0 16
12659: PUSH
12660: CALL_OW 44
12664: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12665: LD_VAR 0 16
12669: PPUSH
12670: LD_VAR 0 9
12674: PPUSH
12675: LD_INT 0
12677: PPUSH
12678: CALL_OW 49
// end ;
12682: GO 12601
12684: POP
12685: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12686: LD_ADDR_VAR 0 19
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_VAR 0 1
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: LD_INT 25
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 25
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 25
12728: PUSH
12729: LD_INT 8
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 25
12738: PUSH
12739: LD_INT 9
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 69
12761: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12762: LD_ADDR_VAR 0 18
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_VAR 0 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 25
12781: PUSH
12782: LD_INT 4
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 69
12797: ST_TO_ADDR
// for i in medic_list do
12798: LD_ADDR_VAR 0 14
12802: PUSH
12803: LD_VAR 0 18
12807: PUSH
12808: FOR_IN
12809: IFFALSE 12827
// ComMoveToArea ( i , healArea ) ;
12811: LD_VAR 0 14
12815: PPUSH
12816: LD_VAR 0 10
12820: PPUSH
12821: CALL_OW 113
12825: GO 12808
12827: POP
12828: POP
// if strategy = 1 then
12829: LD_VAR 0 12
12833: PUSH
12834: LD_INT 1
12836: EQUAL
12837: IFFALSE 13383
// begin repeat wait ( 0 0$3 ) ;
12839: LD_INT 105
12841: PPUSH
12842: CALL_OW 67
// for i in soldiersOK_list do
12846: LD_ADDR_VAR 0 14
12850: PUSH
12851: LD_VAR 0 19
12855: PUSH
12856: FOR_IN
12857: IFFALSE 12921
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12859: LD_VAR 0 14
12863: PPUSH
12864: LD_INT 91
12866: PPUSH
12867: LD_INT 63
12869: PPUSH
12870: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12874: LD_VAR 0 14
12878: PPUSH
12879: LD_INT 101
12881: PPUSH
12882: LD_INT 53
12884: PPUSH
12885: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12889: LD_VAR 0 14
12893: PPUSH
12894: LD_INT 75
12896: PPUSH
12897: LD_INT 23
12899: PPUSH
12900: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12904: LD_VAR 0 14
12908: PPUSH
12909: LD_INT 78
12911: PPUSH
12912: LD_INT 8
12914: PPUSH
12915: CALL_OW 174
// end ;
12919: GO 12856
12921: POP
12922: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12923: LD_INT 12
12925: PPUSH
12926: LD_INT 22
12928: PUSH
12929: LD_VAR 0 1
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 70
12942: PUSH
12943: LD_INT 2
12945: GREATER
12946: IFFALSE 12839
// repeat wait ( 0 0$1 ) ;
12948: LD_INT 35
12950: PPUSH
12951: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12955: LD_ADDR_VAR 0 17
12959: PUSH
12960: LD_INT 22
12962: PUSH
12963: LD_VAR 0 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: LD_INT 3
12977: PUSH
12978: LD_INT 24
12980: PUSH
12981: LD_INT 550
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 24
12994: PUSH
12995: LD_INT 250
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13016: LD_ADDR_VAR 0 19
13020: PUSH
13021: LD_INT 22
13023: PUSH
13024: LD_VAR 0 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 5
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 25
13058: PUSH
13059: LD_INT 8
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 25
13068: PUSH
13069: LD_INT 9
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 24
13085: PUSH
13086: LD_INT 1000
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: PPUSH
13098: CALL_OW 69
13102: ST_TO_ADDR
// if medicCount > 0 then
13103: LD_VAR 0 7
13107: PUSH
13108: LD_INT 0
13110: GREATER
13111: IFFALSE 13185
// begin if damageUnit_list > 0 then
13113: LD_VAR 0 17
13117: PUSH
13118: LD_INT 0
13120: GREATER
13121: IFFALSE 13185
// begin for i in damageUnit_list do
13123: LD_ADDR_VAR 0 14
13127: PUSH
13128: LD_VAR 0 17
13132: PUSH
13133: FOR_IN
13134: IFFALSE 13183
// begin ComMoveToArea ( i , healArea ) ;
13136: LD_VAR 0 14
13140: PPUSH
13141: LD_VAR 0 10
13145: PPUSH
13146: CALL_OW 113
// for j in medic_list do
13150: LD_ADDR_VAR 0 15
13154: PUSH
13155: LD_VAR 0 18
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13179
// AddComHeal ( j , i ) ;
13163: LD_VAR 0 15
13167: PPUSH
13168: LD_VAR 0 14
13172: PPUSH
13173: CALL_OW 188
13177: GO 13160
13179: POP
13180: POP
// end ;
13181: GO 13133
13183: POP
13184: POP
// end ; end ; for i in soldiersOK_list do
13185: LD_ADDR_VAR 0 14
13189: PUSH
13190: LD_VAR 0 19
13194: PUSH
13195: FOR_IN
13196: IFFALSE 13372
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13198: LD_ADDR_VAR 0 22
13202: PUSH
13203: LD_INT 22
13205: PUSH
13206: LD_VAR 0 11
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 69
13219: PPUSH
13220: LD_VAR 0 14
13224: PPUSH
13225: CALL_OW 74
13229: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13230: LD_ADDR_VAR 0 23
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_VAR 0 11
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: LD_INT 59
13252: PUSH
13253: EMPTY
13254: LIST
13255: PUSH
13256: LD_INT 21
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 2
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PPUSH
13294: LD_VAR 0 14
13298: PPUSH
13299: CALL_OW 74
13303: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13304: LD_VAR 0 14
13308: PPUSH
13309: LD_VAR 0 22
13313: PPUSH
13314: CALL_OW 296
13318: PUSH
13319: LD_INT 6
13321: PLUS
13322: PUSH
13323: LD_VAR 0 14
13327: PPUSH
13328: LD_VAR 0 23
13332: PPUSH
13333: CALL_OW 296
13337: LESS
13338: IFFALSE 13356
// begin ComAttackUnit ( i , target1 ) ;
13340: LD_VAR 0 14
13344: PPUSH
13345: LD_VAR 0 22
13349: PPUSH
13350: CALL_OW 115
// end else
13354: GO 13370
// begin ComAttackUnit ( i , target2 ) ;
13356: LD_VAR 0 14
13360: PPUSH
13361: LD_VAR 0 23
13365: PPUSH
13366: CALL_OW 115
// end ; end ;
13370: GO 13195
13372: POP
13373: POP
// until soldiersOK_list = [ ] ;
13374: LD_VAR 0 19
13378: PUSH
13379: EMPTY
13380: EQUAL
13381: IFFALSE 12948
// end ; if strategy = 2 then
13383: LD_VAR 0 12
13387: PUSH
13388: LD_INT 2
13390: EQUAL
13391: IFFALSE 13907
// begin repeat wait ( 0 0$1 ) ;
13393: LD_INT 35
13395: PPUSH
13396: CALL_OW 67
// for i in soldiersOK_list do
13400: LD_ADDR_VAR 0 14
13404: PUSH
13405: LD_VAR 0 19
13409: PUSH
13410: FOR_IN
13411: IFFALSE 13445
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13413: LD_VAR 0 14
13417: PPUSH
13418: LD_INT 91
13420: PPUSH
13421: LD_INT 63
13423: PPUSH
13424: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13428: LD_VAR 0 14
13432: PPUSH
13433: LD_INT 75
13435: PPUSH
13436: LD_INT 33
13438: PPUSH
13439: CALL_OW 174
// end ;
13443: GO 13410
13445: POP
13446: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13447: LD_INT 13
13449: PPUSH
13450: LD_INT 22
13452: PUSH
13453: LD_VAR 0 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 70
13466: PUSH
13467: LD_INT 2
13469: GREATER
13470: IFFALSE 13393
// repeat wait ( 0 0$3 ) ;
13472: LD_INT 105
13474: PPUSH
13475: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13479: LD_ADDR_VAR 0 17
13483: PUSH
13484: LD_INT 22
13486: PUSH
13487: LD_VAR 0 1
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: LD_INT 3
13501: PUSH
13502: LD_INT 24
13504: PUSH
13505: LD_INT 550
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 24
13518: PUSH
13519: LD_INT 250
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 69
13539: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13540: LD_ADDR_VAR 0 19
13544: PUSH
13545: LD_INT 22
13547: PUSH
13548: LD_VAR 0 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 5
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 8
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 9
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 24
13609: PUSH
13610: LD_INT 1000
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 69
13626: ST_TO_ADDR
// if medicCount > 0 then
13627: LD_VAR 0 7
13631: PUSH
13632: LD_INT 0
13634: GREATER
13635: IFFALSE 13709
// begin if damageUnit_list > 0 then
13637: LD_VAR 0 17
13641: PUSH
13642: LD_INT 0
13644: GREATER
13645: IFFALSE 13709
// begin for i in damageUnit_list do
13647: LD_ADDR_VAR 0 14
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: FOR_IN
13658: IFFALSE 13707
// begin ComMoveToArea ( i , healArea ) ;
13660: LD_VAR 0 14
13664: PPUSH
13665: LD_VAR 0 10
13669: PPUSH
13670: CALL_OW 113
// for j in medic_list do
13674: LD_ADDR_VAR 0 15
13678: PUSH
13679: LD_VAR 0 18
13683: PUSH
13684: FOR_IN
13685: IFFALSE 13703
// AddComHeal ( j , i ) ;
13687: LD_VAR 0 15
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 188
13701: GO 13684
13703: POP
13704: POP
// end ;
13705: GO 13657
13707: POP
13708: POP
// end ; end ; for i in soldiersOK_list do
13709: LD_ADDR_VAR 0 14
13713: PUSH
13714: LD_VAR 0 19
13718: PUSH
13719: FOR_IN
13720: IFFALSE 13896
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13722: LD_ADDR_VAR 0 22
13726: PUSH
13727: LD_INT 22
13729: PUSH
13730: LD_VAR 0 11
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PPUSH
13739: CALL_OW 69
13743: PPUSH
13744: LD_VAR 0 14
13748: PPUSH
13749: CALL_OW 74
13753: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13754: LD_ADDR_VAR 0 23
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_VAR 0 11
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 2
13773: PUSH
13774: LD_INT 59
13776: PUSH
13777: EMPTY
13778: LIST
13779: PUSH
13780: LD_INT 21
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 21
13792: PUSH
13793: LD_INT 2
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: PPUSH
13818: LD_VAR 0 14
13822: PPUSH
13823: CALL_OW 74
13827: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 22
13837: PPUSH
13838: CALL_OW 296
13842: PUSH
13843: LD_INT 6
13845: PLUS
13846: PUSH
13847: LD_VAR 0 14
13851: PPUSH
13852: LD_VAR 0 23
13856: PPUSH
13857: CALL_OW 296
13861: LESS
13862: IFFALSE 13880
// begin ComAttackUnit ( i , target1 ) ;
13864: LD_VAR 0 14
13868: PPUSH
13869: LD_VAR 0 22
13873: PPUSH
13874: CALL_OW 115
// end else
13878: GO 13894
// begin ComAttackUnit ( i , target2 ) ;
13880: LD_VAR 0 14
13884: PPUSH
13885: LD_VAR 0 23
13889: PPUSH
13890: CALL_OW 115
// end ; end ;
13894: GO 13719
13896: POP
13897: POP
// until soldiersOK_list = [ ] ;
13898: LD_VAR 0 19
13902: PUSH
13903: EMPTY
13904: EQUAL
13905: IFFALSE 13472
// end ; if strategy = 3 then
13907: LD_VAR 0 12
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: IFFALSE 14461
// begin repeat wait ( 0 0$3 ) ;
13917: LD_INT 105
13919: PPUSH
13920: CALL_OW 67
// for i in soldiersOK_list do
13924: LD_ADDR_VAR 0 14
13928: PUSH
13929: LD_VAR 0 19
13933: PUSH
13934: FOR_IN
13935: IFFALSE 13999
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13937: LD_VAR 0 14
13941: PPUSH
13942: LD_INT 63
13944: PPUSH
13945: LD_INT 71
13947: PPUSH
13948: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13952: LD_VAR 0 14
13956: PPUSH
13957: LD_INT 35
13959: PPUSH
13960: LD_INT 44
13962: PPUSH
13963: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13967: LD_VAR 0 14
13971: PPUSH
13972: LD_INT 23
13974: PPUSH
13975: LD_INT 18
13977: PPUSH
13978: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13982: LD_VAR 0 14
13986: PPUSH
13987: LD_INT 26
13989: PPUSH
13990: LD_INT 12
13992: PPUSH
13993: CALL_OW 174
// end ;
13997: GO 13934
13999: POP
14000: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14001: LD_INT 14
14003: PPUSH
14004: LD_INT 22
14006: PUSH
14007: LD_VAR 0 1
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PPUSH
14016: CALL_OW 70
14020: PUSH
14021: LD_INT 2
14023: GREATER
14024: IFFALSE 13917
// repeat wait ( 0 0$1 ) ;
14026: LD_INT 35
14028: PPUSH
14029: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14033: LD_ADDR_VAR 0 17
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_VAR 0 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: LD_INT 3
14055: PUSH
14056: LD_INT 24
14058: PUSH
14059: LD_INT 550
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: LD_INT 250
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 69
14093: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14094: LD_ADDR_VAR 0 19
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_VAR 0 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 25
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 5
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 8
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 9
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 24
14163: PUSH
14164: LD_INT 1000
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: ST_TO_ADDR
// if medicCount > 0 then
14181: LD_VAR 0 7
14185: PUSH
14186: LD_INT 0
14188: GREATER
14189: IFFALSE 14263
// begin if damageUnit_list > 0 then
14191: LD_VAR 0 17
14195: PUSH
14196: LD_INT 0
14198: GREATER
14199: IFFALSE 14263
// begin for i in damageUnit_list do
14201: LD_ADDR_VAR 0 14
14205: PUSH
14206: LD_VAR 0 17
14210: PUSH
14211: FOR_IN
14212: IFFALSE 14261
// begin ComMoveToArea ( i , healArea ) ;
14214: LD_VAR 0 14
14218: PPUSH
14219: LD_VAR 0 10
14223: PPUSH
14224: CALL_OW 113
// for j in medic_list do
14228: LD_ADDR_VAR 0 15
14232: PUSH
14233: LD_VAR 0 18
14237: PUSH
14238: FOR_IN
14239: IFFALSE 14257
// AddComHeal ( j , i ) ;
14241: LD_VAR 0 15
14245: PPUSH
14246: LD_VAR 0 14
14250: PPUSH
14251: CALL_OW 188
14255: GO 14238
14257: POP
14258: POP
// end ;
14259: GO 14211
14261: POP
14262: POP
// end ; end ; for i in soldiersOK_list do
14263: LD_ADDR_VAR 0 14
14267: PUSH
14268: LD_VAR 0 19
14272: PUSH
14273: FOR_IN
14274: IFFALSE 14450
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14276: LD_ADDR_VAR 0 22
14280: PUSH
14281: LD_INT 22
14283: PUSH
14284: LD_VAR 0 11
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PPUSH
14298: LD_VAR 0 14
14302: PPUSH
14303: CALL_OW 74
14307: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14308: LD_ADDR_VAR 0 23
14312: PUSH
14313: LD_INT 22
14315: PUSH
14316: LD_VAR 0 11
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 2
14327: PUSH
14328: LD_INT 59
14330: PUSH
14331: EMPTY
14332: LIST
14333: PUSH
14334: LD_INT 21
14336: PUSH
14337: LD_INT 1
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 21
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: PPUSH
14367: CALL_OW 69
14371: PPUSH
14372: LD_VAR 0 14
14376: PPUSH
14377: CALL_OW 74
14381: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14382: LD_VAR 0 14
14386: PPUSH
14387: LD_VAR 0 22
14391: PPUSH
14392: CALL_OW 296
14396: PUSH
14397: LD_INT 6
14399: PLUS
14400: PUSH
14401: LD_VAR 0 14
14405: PPUSH
14406: LD_VAR 0 23
14410: PPUSH
14411: CALL_OW 296
14415: LESS
14416: IFFALSE 14434
// begin ComAttackUnit ( i , target1 ) ;
14418: LD_VAR 0 14
14422: PPUSH
14423: LD_VAR 0 22
14427: PPUSH
14428: CALL_OW 115
// end else
14432: GO 14448
// begin ComAttackUnit ( i , target2 ) ;
14434: LD_VAR 0 14
14438: PPUSH
14439: LD_VAR 0 23
14443: PPUSH
14444: CALL_OW 115
// end ; end ;
14448: GO 14273
14450: POP
14451: POP
// until soldiersOK_list = [ ] ;
14452: LD_VAR 0 19
14456: PUSH
14457: EMPTY
14458: EQUAL
14459: IFFALSE 14026
// end ; end ;
14461: LD_VAR 0 13
14465: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14466: LD_INT 0
14468: PPUSH
14469: PPUSH
14470: PPUSH
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
14475: PPUSH
14476: PPUSH
14477: PPUSH
14478: PPUSH
// amChassisTab = [ ] ;
14479: LD_ADDR_VAR 0 19
14483: PUSH
14484: EMPTY
14485: ST_TO_ADDR
// arChassisTab = [ ] ;
14486: LD_ADDR_VAR 0 18
14490: PUSH
14491: EMPTY
14492: ST_TO_ADDR
// ruChassisTab = [ ] ;
14493: LD_ADDR_VAR 0 17
14497: PUSH
14498: EMPTY
14499: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14500: LD_INT 35
14502: PPUSH
14503: CALL_OW 67
// if nation = 1 then
14507: LD_VAR 0 5
14511: PUSH
14512: LD_INT 1
14514: EQUAL
14515: IFFALSE 15006
// begin uc_side = side ;
14517: LD_ADDR_OWVAR 20
14521: PUSH
14522: LD_VAR 0 2
14526: ST_TO_ADDR
// uc_nation = nation ;
14527: LD_ADDR_OWVAR 21
14531: PUSH
14532: LD_VAR 0 5
14536: ST_TO_ADDR
// vc_engine = vehengine ;
14537: LD_ADDR_OWVAR 39
14541: PUSH
14542: LD_VAR 0 6
14546: ST_TO_ADDR
// vc_control = vehcontrol ;
14547: LD_ADDR_OWVAR 38
14551: PUSH
14552: LD_VAR 0 7
14556: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14557: LD_ADDR_OWVAR 40
14561: PUSH
14562: LD_VAR 0 10
14566: PUSH
14567: LD_INT 1
14569: PPUSH
14570: LD_VAR 0 10
14574: PPUSH
14575: CALL_OW 12
14579: ARRAY
14580: ST_TO_ADDR
// for j = 1 to AMWeapon do
14581: LD_ADDR_VAR 0 14
14585: PUSH
14586: DOUBLE
14587: LD_INT 1
14589: DEC
14590: ST_TO_ADDR
14591: LD_VAR 0 10
14595: PUSH
14596: FOR_TO
14597: IFFALSE 14898
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14599: LD_VAR 0 10
14603: PUSH
14604: LD_VAR 0 14
14608: ARRAY
14609: PUSH
14610: LD_INT 2
14612: EQUAL
14613: PUSH
14614: LD_VAR 0 10
14618: PUSH
14619: LD_VAR 0 14
14623: ARRAY
14624: PUSH
14625: LD_INT 3
14627: EQUAL
14628: OR
14629: IFFALSE 14682
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14631: LD_ADDR_VAR 0 19
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: LD_INT 2
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: LD_INT 4
14647: PUSH
14648: LD_INT 5
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14658: LD_ADDR_OWVAR 37
14662: PUSH
14663: LD_VAR 0 19
14667: PUSH
14668: LD_INT 1
14670: PPUSH
14671: LD_VAR 0 19
14675: PPUSH
14676: CALL_OW 12
14680: ARRAY
14681: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14682: LD_VAR 0 10
14686: PUSH
14687: LD_VAR 0 14
14691: ARRAY
14692: PUSH
14693: LD_INT 4
14695: EQUAL
14696: PUSH
14697: LD_VAR 0 10
14701: PUSH
14702: LD_VAR 0 14
14706: ARRAY
14707: PUSH
14708: LD_INT 5
14710: EQUAL
14711: OR
14712: PUSH
14713: LD_VAR 0 10
14717: PUSH
14718: LD_VAR 0 14
14722: ARRAY
14723: PUSH
14724: LD_INT 9
14726: EQUAL
14727: OR
14728: PUSH
14729: LD_VAR 0 10
14733: PUSH
14734: LD_VAR 0 14
14738: ARRAY
14739: PUSH
14740: LD_INT 11
14742: EQUAL
14743: OR
14744: PUSH
14745: LD_VAR 0 10
14749: PUSH
14750: LD_VAR 0 14
14754: ARRAY
14755: PUSH
14756: LD_INT 7
14758: EQUAL
14759: OR
14760: IFFALSE 14809
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14762: LD_ADDR_VAR 0 19
14766: PUSH
14767: LD_INT 2
14769: PUSH
14770: LD_INT 3
14772: PUSH
14773: LD_INT 4
14775: PUSH
14776: LD_INT 5
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14785: LD_ADDR_OWVAR 37
14789: PUSH
14790: LD_VAR 0 19
14794: PUSH
14795: LD_INT 1
14797: PPUSH
14798: LD_VAR 0 19
14802: PPUSH
14803: CALL_OW 12
14807: ARRAY
14808: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14809: LD_VAR 0 10
14813: PUSH
14814: LD_VAR 0 14
14818: ARRAY
14819: PUSH
14820: LD_INT 8
14822: EQUAL
14823: PUSH
14824: LD_VAR 0 10
14828: PUSH
14829: LD_VAR 0 14
14833: ARRAY
14834: PUSH
14835: LD_INT 6
14837: EQUAL
14838: OR
14839: PUSH
14840: LD_VAR 0 10
14844: PUSH
14845: LD_VAR 0 14
14849: ARRAY
14850: PUSH
14851: LD_INT 10
14853: EQUAL
14854: OR
14855: IFFALSE 14896
// begin amChassisTab = [ 4 , 5 ] ;
14857: LD_ADDR_VAR 0 19
14861: PUSH
14862: LD_INT 4
14864: PUSH
14865: LD_INT 5
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14872: LD_ADDR_OWVAR 37
14876: PUSH
14877: LD_VAR 0 19
14881: PUSH
14882: LD_INT 1
14884: PPUSH
14885: LD_VAR 0 19
14889: PPUSH
14890: CALL_OW 12
14894: ARRAY
14895: ST_TO_ADDR
// end ; end ;
14896: GO 14596
14898: POP
14899: POP
// veh = CreateVehicle ;
14900: LD_ADDR_VAR 0 16
14904: PUSH
14905: CALL_OW 45
14909: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14910: LD_VAR 0 16
14914: PPUSH
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: CALL_OW 49
// if vehControl = 1 then
14927: LD_VAR 0 7
14931: PUSH
14932: LD_INT 1
14934: EQUAL
14935: IFFALSE 14992
// begin hc_gallery =  ;
14937: LD_ADDR_OWVAR 33
14941: PUSH
14942: LD_STRING 
14944: ST_TO_ADDR
// hc_name =  ;
14945: LD_ADDR_OWVAR 26
14949: PUSH
14950: LD_STRING 
14952: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14953: LD_INT 0
14955: PPUSH
14956: LD_INT 3
14958: PPUSH
14959: LD_VAR 0 4
14963: PPUSH
14964: CALL_OW 380
// un = CreateHuman ;
14968: LD_ADDR_VAR 0 15
14972: PUSH
14973: CALL_OW 44
14977: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14978: LD_VAR 0 15
14982: PPUSH
14983: LD_VAR 0 16
14987: PPUSH
14988: CALL_OW 52
// end ; i = i + 1 ;
14992: LD_ADDR_VAR 0 13
14996: PUSH
14997: LD_VAR 0 13
15001: PUSH
15002: LD_INT 1
15004: PLUS
15005: ST_TO_ADDR
// end ; if nation = 2 then
15006: LD_VAR 0 5
15010: PUSH
15011: LD_INT 2
15013: EQUAL
15014: IFFALSE 15438
// begin uc_side = side ;
15016: LD_ADDR_OWVAR 20
15020: PUSH
15021: LD_VAR 0 2
15025: ST_TO_ADDR
// uc_nation = nation ;
15026: LD_ADDR_OWVAR 21
15030: PUSH
15031: LD_VAR 0 5
15035: ST_TO_ADDR
// vc_engine = vehengine ;
15036: LD_ADDR_OWVAR 39
15040: PUSH
15041: LD_VAR 0 6
15045: ST_TO_ADDR
// vc_control = vehcontrol ;
15046: LD_ADDR_OWVAR 38
15050: PUSH
15051: LD_VAR 0 7
15055: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15056: LD_ADDR_OWVAR 40
15060: PUSH
15061: LD_VAR 0 9
15065: PUSH
15066: LD_INT 1
15068: PPUSH
15069: LD_VAR 0 9
15073: PPUSH
15074: CALL_OW 12
15078: ARRAY
15079: ST_TO_ADDR
// for j = 1 to ARWeapons do
15080: LD_ADDR_VAR 0 14
15084: PUSH
15085: DOUBLE
15086: LD_INT 1
15088: DEC
15089: ST_TO_ADDR
15090: LD_VAR 0 9
15094: PUSH
15095: FOR_TO
15096: IFFALSE 15330
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15098: LD_VAR 0 9
15102: PUSH
15103: LD_VAR 0 14
15107: ARRAY
15108: PUSH
15109: LD_INT 24
15111: EQUAL
15112: PUSH
15113: LD_VAR 0 9
15117: PUSH
15118: LD_VAR 0 14
15122: ARRAY
15123: PUSH
15124: LD_INT 22
15126: EQUAL
15127: OR
15128: PUSH
15129: LD_VAR 0 9
15133: PUSH
15134: LD_VAR 0 14
15138: ARRAY
15139: PUSH
15140: LD_INT 23
15142: EQUAL
15143: OR
15144: PUSH
15145: LD_VAR 0 9
15149: PUSH
15150: LD_VAR 0 14
15154: ARRAY
15155: PUSH
15156: LD_INT 30
15158: EQUAL
15159: OR
15160: IFFALSE 15209
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15162: LD_ADDR_VAR 0 18
15166: PUSH
15167: LD_INT 11
15169: PUSH
15170: LD_INT 12
15172: PUSH
15173: LD_INT 13
15175: PUSH
15176: LD_INT 14
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15185: LD_ADDR_OWVAR 37
15189: PUSH
15190: LD_VAR 0 18
15194: PUSH
15195: LD_INT 1
15197: PPUSH
15198: LD_VAR 0 18
15202: PPUSH
15203: CALL_OW 12
15207: ARRAY
15208: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15209: LD_VAR 0 9
15213: PUSH
15214: LD_VAR 0 14
15218: ARRAY
15219: PUSH
15220: LD_INT 29
15222: EQUAL
15223: PUSH
15224: LD_VAR 0 9
15228: PUSH
15229: LD_VAR 0 14
15233: ARRAY
15234: PUSH
15235: LD_INT 28
15237: EQUAL
15238: OR
15239: PUSH
15240: LD_VAR 0 9
15244: PUSH
15245: LD_VAR 0 14
15249: ARRAY
15250: PUSH
15251: LD_INT 27
15253: EQUAL
15254: OR
15255: PUSH
15256: LD_VAR 0 9
15260: PUSH
15261: LD_VAR 0 14
15265: ARRAY
15266: PUSH
15267: LD_INT 26
15269: EQUAL
15270: OR
15271: PUSH
15272: LD_VAR 0 9
15276: PUSH
15277: LD_VAR 0 14
15281: ARRAY
15282: PUSH
15283: LD_INT 25
15285: EQUAL
15286: OR
15287: IFFALSE 15328
// begin arChassisTab = [ 13 , 14 ] ;
15289: LD_ADDR_VAR 0 18
15293: PUSH
15294: LD_INT 13
15296: PUSH
15297: LD_INT 14
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15304: LD_ADDR_OWVAR 37
15308: PUSH
15309: LD_VAR 0 18
15313: PUSH
15314: LD_INT 1
15316: PPUSH
15317: LD_VAR 0 18
15321: PPUSH
15322: CALL_OW 12
15326: ARRAY
15327: ST_TO_ADDR
// end ; end ;
15328: GO 15095
15330: POP
15331: POP
// veh = CreateVehicle ;
15332: LD_ADDR_VAR 0 16
15336: PUSH
15337: CALL_OW 45
15341: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15342: LD_VAR 0 16
15346: PPUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: LD_INT 0
15354: PPUSH
15355: CALL_OW 49
// if vehcontrol = 1 then
15359: LD_VAR 0 7
15363: PUSH
15364: LD_INT 1
15366: EQUAL
15367: IFFALSE 15424
// begin hc_gallery =  ;
15369: LD_ADDR_OWVAR 33
15373: PUSH
15374: LD_STRING 
15376: ST_TO_ADDR
// hc_name =  ;
15377: LD_ADDR_OWVAR 26
15381: PUSH
15382: LD_STRING 
15384: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15385: LD_INT 0
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_VAR 0 4
15395: PPUSH
15396: CALL_OW 380
// un = CreateHuman ;
15400: LD_ADDR_VAR 0 15
15404: PUSH
15405: CALL_OW 44
15409: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15410: LD_VAR 0 15
15414: PPUSH
15415: LD_VAR 0 16
15419: PPUSH
15420: CALL_OW 52
// end ; i = i + 1 ;
15424: LD_ADDR_VAR 0 13
15428: PUSH
15429: LD_VAR 0 13
15433: PUSH
15434: LD_INT 1
15436: PLUS
15437: ST_TO_ADDR
// end ; if nation = 3 then
15438: LD_VAR 0 5
15442: PUSH
15443: LD_INT 3
15445: EQUAL
15446: IFFALSE 15838
// begin uc_side = side ;
15448: LD_ADDR_OWVAR 20
15452: PUSH
15453: LD_VAR 0 2
15457: ST_TO_ADDR
// uc_nation = nation ;
15458: LD_ADDR_OWVAR 21
15462: PUSH
15463: LD_VAR 0 5
15467: ST_TO_ADDR
// vc_engine = vehengine ;
15468: LD_ADDR_OWVAR 39
15472: PUSH
15473: LD_VAR 0 6
15477: ST_TO_ADDR
// vc_control = vehcontrol ;
15478: LD_ADDR_OWVAR 38
15482: PUSH
15483: LD_VAR 0 7
15487: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15488: LD_ADDR_OWVAR 40
15492: PUSH
15493: LD_VAR 0 8
15497: PUSH
15498: LD_INT 1
15500: PPUSH
15501: LD_VAR 0 8
15505: PPUSH
15506: CALL_OW 12
15510: ARRAY
15511: ST_TO_ADDR
// for j = 1 to RuWeapons do
15512: LD_ADDR_VAR 0 14
15516: PUSH
15517: DOUBLE
15518: LD_INT 1
15520: DEC
15521: ST_TO_ADDR
15522: LD_VAR 0 8
15526: PUSH
15527: FOR_TO
15528: IFFALSE 15730
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15530: LD_VAR 0 8
15534: PUSH
15535: LD_VAR 0 14
15539: ARRAY
15540: PUSH
15541: LD_INT 42
15543: EQUAL
15544: PUSH
15545: LD_VAR 0 8
15549: PUSH
15550: LD_VAR 0 14
15554: ARRAY
15555: PUSH
15556: LD_INT 43
15558: EQUAL
15559: OR
15560: PUSH
15561: LD_VAR 0 8
15565: PUSH
15566: LD_VAR 0 14
15570: ARRAY
15571: PUSH
15572: LD_INT 44
15574: EQUAL
15575: OR
15576: PUSH
15577: LD_VAR 0 8
15581: PUSH
15582: LD_VAR 0 14
15586: ARRAY
15587: PUSH
15588: LD_INT 45
15590: EQUAL
15591: OR
15592: PUSH
15593: LD_VAR 0 8
15597: PUSH
15598: LD_VAR 0 14
15602: ARRAY
15603: PUSH
15604: LD_INT 49
15606: EQUAL
15607: OR
15608: IFFALSE 15657
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15610: LD_ADDR_VAR 0 17
15614: PUSH
15615: LD_INT 21
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_INT 23
15623: PUSH
15624: LD_INT 24
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15633: LD_ADDR_OWVAR 37
15637: PUSH
15638: LD_VAR 0 17
15642: PUSH
15643: LD_INT 1
15645: PPUSH
15646: LD_VAR 0 17
15650: PPUSH
15651: CALL_OW 12
15655: ARRAY
15656: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15657: LD_VAR 0 8
15661: PUSH
15662: LD_VAR 0 14
15666: ARRAY
15667: PUSH
15668: LD_INT 46
15670: EQUAL
15671: PUSH
15672: LD_VAR 0 8
15676: PUSH
15677: LD_VAR 0 14
15681: ARRAY
15682: PUSH
15683: LD_INT 47
15685: EQUAL
15686: OR
15687: IFFALSE 15728
// begin ruChassisTab = [ 23 , 24 ] ;
15689: LD_ADDR_VAR 0 17
15693: PUSH
15694: LD_INT 23
15696: PUSH
15697: LD_INT 24
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15704: LD_ADDR_OWVAR 37
15708: PUSH
15709: LD_VAR 0 17
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_VAR 0 17
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// end ; end ;
15728: GO 15527
15730: POP
15731: POP
// veh = CreateVehicle ;
15732: LD_ADDR_VAR 0 16
15736: PUSH
15737: CALL_OW 45
15741: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15742: LD_VAR 0 16
15746: PPUSH
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_INT 0
15754: PPUSH
15755: CALL_OW 49
// if vehcontrol = 1 then
15759: LD_VAR 0 7
15763: PUSH
15764: LD_INT 1
15766: EQUAL
15767: IFFALSE 15824
// begin hc_gallery =  ;
15769: LD_ADDR_OWVAR 33
15773: PUSH
15774: LD_STRING 
15776: ST_TO_ADDR
// hc_name =  ;
15777: LD_ADDR_OWVAR 26
15781: PUSH
15782: LD_STRING 
15784: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15785: LD_INT 0
15787: PPUSH
15788: LD_INT 3
15790: PPUSH
15791: LD_VAR 0 4
15795: PPUSH
15796: CALL_OW 380
// un = CreateHuman ;
15800: LD_ADDR_VAR 0 15
15804: PUSH
15805: CALL_OW 44
15809: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15810: LD_VAR 0 15
15814: PPUSH
15815: LD_VAR 0 16
15819: PPUSH
15820: CALL_OW 52
// end ; i = i + 1 ;
15824: LD_ADDR_VAR 0 13
15828: PUSH
15829: LD_VAR 0 13
15833: PUSH
15834: LD_INT 1
15836: PLUS
15837: ST_TO_ADDR
// end ; until i = vehCount ;
15838: LD_VAR 0 13
15842: PUSH
15843: LD_VAR 0 3
15847: EQUAL
15848: IFFALSE 14500
// repeat wait ( 0 0$1 ) ;
15850: LD_INT 35
15852: PPUSH
15853: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15857: LD_ADDR_VAR 0 20
15861: PUSH
15862: LD_INT 22
15864: PUSH
15865: LD_VAR 0 2
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 24
15886: PUSH
15887: LD_INT 250
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: PPUSH
15899: CALL_OW 69
15903: ST_TO_ADDR
// if vehicleOK_list > 0 then
15904: LD_VAR 0 20
15908: PUSH
15909: LD_INT 0
15911: GREATER
15912: IFFALSE 16103
// begin for i in vehicleOK_list do
15914: LD_ADDR_VAR 0 13
15918: PUSH
15919: LD_VAR 0 20
15923: PUSH
15924: FOR_IN
15925: IFFALSE 16101
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15927: LD_ADDR_VAR 0 21
15931: PUSH
15932: LD_INT 22
15934: PUSH
15935: LD_VAR 0 11
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PPUSH
15944: CALL_OW 69
15948: PPUSH
15949: LD_VAR 0 13
15953: PPUSH
15954: CALL_OW 74
15958: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15959: LD_ADDR_VAR 0 22
15963: PUSH
15964: LD_INT 22
15966: PUSH
15967: LD_VAR 0 11
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 2
15978: PUSH
15979: LD_INT 59
15981: PUSH
15982: EMPTY
15983: LIST
15984: PUSH
15985: LD_INT 21
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 21
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: PPUSH
16018: CALL_OW 69
16022: PPUSH
16023: LD_VAR 0 13
16027: PPUSH
16028: CALL_OW 74
16032: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16033: LD_VAR 0 13
16037: PPUSH
16038: LD_VAR 0 21
16042: PPUSH
16043: CALL_OW 296
16047: PUSH
16048: LD_INT 6
16050: PLUS
16051: PUSH
16052: LD_VAR 0 13
16056: PPUSH
16057: LD_VAR 0 22
16061: PPUSH
16062: CALL_OW 296
16066: LESS
16067: IFFALSE 16085
// begin ComAttackUnit ( i , target1 ) ;
16069: LD_VAR 0 13
16073: PPUSH
16074: LD_VAR 0 21
16078: PPUSH
16079: CALL_OW 115
// end else
16083: GO 16099
// begin ComAttackUnit ( i , target2 ) ;
16085: LD_VAR 0 13
16089: PPUSH
16090: LD_VAR 0 22
16094: PPUSH
16095: CALL_OW 115
// end ; end ;
16099: GO 15924
16101: POP
16102: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16103: LD_INT 22
16105: PUSH
16106: LD_VAR 0 2
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 21
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 250
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: LIST
16139: PPUSH
16140: CALL_OW 69
16144: PUSH
16145: LD_INT 0
16147: EQUAL
16148: IFFALSE 15850
// end ;
16150: LD_VAR 0 12
16154: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16155: LD_INT 0
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16165: LD_ADDR_VAR 0 7
16169: PUSH
16170: LD_INT 22
16172: PUSH
16173: LD_VAR 0 1
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: LD_INT 3
16187: PUSH
16188: LD_INT 24
16190: PUSH
16191: LD_INT 550
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 24
16204: PUSH
16205: LD_INT 250
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16226: LD_ADDR_VAR 0 8
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: LD_VAR 0 1
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: LD_INT 25
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 25
16258: PUSH
16259: LD_INT 5
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 25
16268: PUSH
16269: LD_INT 8
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 25
16278: PUSH
16279: LD_INT 9
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 24
16295: PUSH
16296: LD_INT 1000
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: PPUSH
16308: CALL_OW 69
16312: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16313: LD_ADDR_VAR 0 9
16317: PUSH
16318: LD_INT 22
16320: PUSH
16321: LD_VAR 0 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 25
16332: PUSH
16333: LD_INT 4
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if medicCount > 0 then
16349: LD_VAR 0 9
16353: PUSH
16354: LD_INT 0
16356: GREATER
16357: IFFALSE 16431
// begin if damageUnit_list > 0 then
16359: LD_VAR 0 7
16363: PUSH
16364: LD_INT 0
16366: GREATER
16367: IFFALSE 16431
// begin for i in damageUnit_list do
16369: LD_ADDR_VAR 0 5
16373: PUSH
16374: LD_VAR 0 7
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16429
// begin ComMoveToArea ( i , healArea ) ;
16382: LD_VAR 0 5
16386: PPUSH
16387: LD_VAR 0 2
16391: PPUSH
16392: CALL_OW 113
// for j in medicCount do
16396: LD_ADDR_VAR 0 6
16400: PUSH
16401: LD_VAR 0 9
16405: PUSH
16406: FOR_IN
16407: IFFALSE 16425
// AddComHeal ( j , i ) ;
16409: LD_VAR 0 6
16413: PPUSH
16414: LD_VAR 0 5
16418: PPUSH
16419: CALL_OW 188
16423: GO 16406
16425: POP
16426: POP
// end ;
16427: GO 16379
16429: POP
16430: POP
// end ; end ; if soldiersOK_list > 0 then
16431: LD_VAR 0 8
16435: PUSH
16436: LD_INT 0
16438: GREATER
16439: IFFALSE 16630
// begin for i in soldiersOK_list do
16441: LD_ADDR_VAR 0 5
16445: PUSH
16446: LD_VAR 0 8
16450: PUSH
16451: FOR_IN
16452: IFFALSE 16628
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16454: LD_ADDR_VAR 0 10
16458: PUSH
16459: LD_INT 22
16461: PUSH
16462: LD_VAR 0 3
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PPUSH
16471: CALL_OW 69
16475: PPUSH
16476: LD_VAR 0 5
16480: PPUSH
16481: CALL_OW 74
16485: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16486: LD_ADDR_VAR 0 11
16490: PUSH
16491: LD_INT 22
16493: PUSH
16494: LD_VAR 0 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 59
16508: PUSH
16509: EMPTY
16510: LIST
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: PPUSH
16550: LD_VAR 0 5
16554: PPUSH
16555: CALL_OW 74
16559: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16560: LD_VAR 0 5
16564: PPUSH
16565: LD_VAR 0 10
16569: PPUSH
16570: CALL_OW 296
16574: PUSH
16575: LD_INT 8
16577: PLUS
16578: PUSH
16579: LD_VAR 0 5
16583: PPUSH
16584: LD_VAR 0 11
16588: PPUSH
16589: CALL_OW 296
16593: LESS
16594: IFFALSE 16612
// begin ComAttackUnit ( i , target1 ) ;
16596: LD_VAR 0 5
16600: PPUSH
16601: LD_VAR 0 10
16605: PPUSH
16606: CALL_OW 115
// end else
16610: GO 16626
// begin ComAttackUnit ( i , target2 ) ;
16612: LD_VAR 0 5
16616: PPUSH
16617: LD_VAR 0 11
16621: PPUSH
16622: CALL_OW 115
// end ; end ;
16626: GO 16451
16628: POP
16629: POP
// end ; end ;
16630: LD_VAR 0 4
16634: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16635: LD_INT 0
16637: PPUSH
16638: PPUSH
// list := [ ] ;
16639: LD_ADDR_VAR 0 5
16643: PUSH
16644: EMPTY
16645: ST_TO_ADDR
// case d of 0 :
16646: LD_VAR 0 3
16650: PUSH
16651: LD_INT 0
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16792
16659: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16660: LD_ADDR_VAR 0 5
16664: PUSH
16665: LD_VAR 0 1
16669: PUSH
16670: LD_INT 4
16672: MINUS
16673: PUSH
16674: LD_VAR 0 2
16678: PUSH
16679: LD_INT 4
16681: MINUS
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: PUSH
16691: LD_VAR 0 1
16695: PUSH
16696: LD_INT 3
16698: MINUS
16699: PUSH
16700: LD_VAR 0 2
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: LIST
16712: PUSH
16713: LD_VAR 0 1
16717: PUSH
16718: LD_INT 4
16720: PLUS
16721: PUSH
16722: LD_VAR 0 2
16726: PUSH
16727: LD_INT 4
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: LIST
16734: PUSH
16735: LD_VAR 0 1
16739: PUSH
16740: LD_INT 3
16742: PLUS
16743: PUSH
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 3
16751: PLUS
16752: PUSH
16753: LD_INT 5
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: PUSH
16761: LD_VAR 0 1
16765: PUSH
16766: LD_VAR 0 2
16770: PUSH
16771: LD_INT 4
16773: PLUS
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: ST_TO_ADDR
// end ; 1 :
16790: GO 17490
16792: LD_INT 1
16794: DOUBLE
16795: EQUAL
16796: IFTRUE 16800
16798: GO 16933
16800: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16801: LD_ADDR_VAR 0 5
16805: PUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_VAR 0 2
16815: PUSH
16816: LD_INT 4
16818: MINUS
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: PUSH
16828: LD_VAR 0 1
16832: PUSH
16833: LD_INT 3
16835: MINUS
16836: PUSH
16837: LD_VAR 0 2
16841: PUSH
16842: LD_INT 3
16844: MINUS
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: PUSH
16854: LD_VAR 0 1
16858: PUSH
16859: LD_INT 4
16861: MINUS
16862: PUSH
16863: LD_VAR 0 2
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: LD_VAR 0 1
16880: PUSH
16881: LD_VAR 0 2
16885: PUSH
16886: LD_INT 3
16888: PLUS
16889: PUSH
16890: LD_INT 0
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: PUSH
16898: LD_VAR 0 1
16902: PUSH
16903: LD_INT 4
16905: PLUS
16906: PUSH
16907: LD_VAR 0 2
16911: PUSH
16912: LD_INT 4
16914: PLUS
16915: PUSH
16916: LD_INT 5
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: ST_TO_ADDR
// end ; 2 :
16931: GO 17490
16933: LD_INT 2
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 17070
16941: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16942: LD_ADDR_VAR 0 5
16946: PUSH
16947: LD_VAR 0 1
16951: PUSH
16952: LD_VAR 0 2
16956: PUSH
16957: LD_INT 3
16959: MINUS
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_VAR 0 1
16973: PUSH
16974: LD_INT 4
16976: PLUS
16977: PUSH
16978: LD_VAR 0 2
16982: PUSH
16983: LD_INT 4
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: LD_VAR 0 1
16995: PUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 4
17003: PLUS
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: PUSH
17013: LD_VAR 0 1
17017: PUSH
17018: LD_INT 3
17020: MINUS
17021: PUSH
17022: LD_VAR 0 2
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_VAR 0 1
17039: PUSH
17040: LD_INT 4
17042: MINUS
17043: PUSH
17044: LD_VAR 0 2
17048: PUSH
17049: LD_INT 4
17051: MINUS
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: ST_TO_ADDR
// end ; 3 :
17068: GO 17490
17070: LD_INT 3
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17211
17078: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17079: LD_ADDR_VAR 0 5
17083: PUSH
17084: LD_VAR 0 1
17088: PUSH
17089: LD_INT 3
17091: PLUS
17092: PUSH
17093: LD_VAR 0 2
17097: PUSH
17098: LD_INT 4
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: LD_VAR 0 1
17110: PUSH
17111: LD_INT 4
17113: PLUS
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: LD_INT 4
17122: PLUS
17123: PUSH
17124: LD_INT 5
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: PUSH
17132: LD_VAR 0 1
17136: PUSH
17137: LD_INT 4
17139: MINUS
17140: PUSH
17141: LD_VAR 0 2
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: PUSH
17154: LD_VAR 0 1
17158: PUSH
17159: LD_VAR 0 2
17163: PUSH
17164: LD_INT 4
17166: MINUS
17167: PUSH
17168: LD_INT 3
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: PUSH
17176: LD_VAR 0 1
17180: PUSH
17181: LD_INT 3
17183: MINUS
17184: PUSH
17185: LD_VAR 0 2
17189: PUSH
17190: LD_INT 3
17192: MINUS
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: ST_TO_ADDR
// end ; 4 :
17209: GO 17490
17211: LD_INT 4
17213: DOUBLE
17214: EQUAL
17215: IFTRUE 17219
17217: GO 17352
17219: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17220: LD_ADDR_VAR 0 5
17224: PUSH
17225: LD_VAR 0 1
17229: PUSH
17230: LD_VAR 0 2
17234: PUSH
17235: LD_INT 4
17237: PLUS
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: PUSH
17247: LD_VAR 0 1
17251: PUSH
17252: LD_INT 3
17254: PLUS
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: LD_INT 3
17263: PLUS
17264: PUSH
17265: LD_INT 5
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: PUSH
17273: LD_VAR 0 1
17277: PUSH
17278: LD_INT 3
17280: PLUS
17281: PUSH
17282: LD_VAR 0 2
17286: PUSH
17287: LD_INT 4
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: PUSH
17295: LD_VAR 0 1
17299: PUSH
17300: LD_VAR 0 2
17304: PUSH
17305: LD_INT 3
17307: MINUS
17308: PUSH
17309: LD_INT 3
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: PUSH
17317: LD_VAR 0 1
17321: PUSH
17322: LD_INT 4
17324: MINUS
17325: PUSH
17326: LD_VAR 0 2
17330: PUSH
17331: LD_INT 4
17333: MINUS
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: ST_TO_ADDR
// end ; 5 :
17350: GO 17490
17352: LD_INT 5
17354: DOUBLE
17355: EQUAL
17356: IFTRUE 17360
17358: GO 17489
17360: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17361: LD_ADDR_VAR 0 5
17365: PUSH
17366: LD_VAR 0 1
17370: PUSH
17371: LD_INT 4
17373: MINUS
17374: PUSH
17375: LD_VAR 0 2
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: PUSH
17388: LD_VAR 0 1
17392: PUSH
17393: LD_VAR 0 2
17397: PUSH
17398: LD_INT 4
17400: MINUS
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: PUSH
17410: LD_VAR 0 1
17414: PUSH
17415: LD_INT 4
17417: PLUS
17418: PUSH
17419: LD_VAR 0 2
17423: PUSH
17424: LD_INT 4
17426: PLUS
17427: PUSH
17428: LD_INT 5
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_VAR 0 1
17440: PUSH
17441: LD_INT 3
17443: PLUS
17444: PUSH
17445: LD_VAR 0 2
17449: PUSH
17450: LD_INT 4
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: PUSH
17458: LD_VAR 0 1
17462: PUSH
17463: LD_VAR 0 2
17467: PUSH
17468: LD_INT 3
17470: PLUS
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: ST_TO_ADDR
// end ; end ;
17487: GO 17490
17489: POP
// result := list ;
17490: LD_ADDR_VAR 0 4
17494: PUSH
17495: LD_VAR 0 5
17499: ST_TO_ADDR
// end ;
17500: LD_VAR 0 4
17504: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17505: LD_INT 0
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
// result := false ;
17516: LD_ADDR_VAR 0 7
17520: PUSH
17521: LD_INT 0
17523: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17524: LD_VAR 0 1
17528: NOT
17529: PUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 266
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: IN
17550: NOT
17551: OR
17552: PUSH
17553: LD_VAR 0 2
17557: NOT
17558: OR
17559: PUSH
17560: LD_VAR 0 5
17564: PUSH
17565: LD_INT 0
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: LD_INT 4
17579: PUSH
17580: LD_INT 5
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: IN
17591: NOT
17592: OR
17593: PUSH
17594: LD_VAR 0 3
17598: PPUSH
17599: LD_VAR 0 4
17603: PPUSH
17604: CALL_OW 488
17608: NOT
17609: OR
17610: IFFALSE 17614
// exit ;
17612: GO 18295
// pom := GetBase ( bdepot ) ;
17614: LD_ADDR_VAR 0 10
17618: PUSH
17619: LD_VAR 0 1
17623: PPUSH
17624: CALL_OW 274
17628: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17629: LD_ADDR_VAR 0 11
17633: PUSH
17634: LD_VAR 0 2
17638: PPUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL_OW 248
17648: PPUSH
17649: CALL_OW 450
17653: ST_TO_ADDR
// if check_cost then
17654: LD_VAR 0 6
17658: IFFALSE 17735
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17660: LD_VAR 0 10
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 275
17672: PUSH
17673: LD_VAR 0 11
17677: PUSH
17678: LD_INT 1
17680: ARRAY
17681: GREATEREQUAL
17682: PUSH
17683: LD_VAR 0 10
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: CALL_OW 275
17695: PUSH
17696: LD_VAR 0 11
17700: PUSH
17701: LD_INT 2
17703: ARRAY
17704: GREATEREQUAL
17705: AND
17706: PUSH
17707: LD_VAR 0 10
17711: PPUSH
17712: LD_INT 3
17714: PPUSH
17715: CALL_OW 275
17719: PUSH
17720: LD_VAR 0 11
17724: PUSH
17725: LD_INT 3
17727: ARRAY
17728: GREATEREQUAL
17729: AND
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 18295
// if GetBType ( bdepot ) = b_depot then
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 266
17744: PUSH
17745: LD_INT 0
17747: EQUAL
17748: IFFALSE 17760
// dist := 28 else
17750: LD_ADDR_VAR 0 14
17754: PUSH
17755: LD_INT 28
17757: ST_TO_ADDR
17758: GO 17768
// dist := 36 ;
17760: LD_ADDR_VAR 0 14
17764: PUSH
17765: LD_INT 36
17767: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17768: LD_VAR 0 1
17772: PPUSH
17773: LD_VAR 0 3
17777: PPUSH
17778: LD_VAR 0 4
17782: PPUSH
17783: CALL_OW 297
17787: PUSH
17788: LD_VAR 0 14
17792: GREATER
17793: IFFALSE 17797
// exit ;
17795: GO 18295
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17797: LD_ADDR_VAR 0 12
17801: PUSH
17802: LD_VAR 0 2
17806: PPUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_VAR 0 4
17816: PPUSH
17817: LD_VAR 0 5
17821: PPUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 248
17831: PPUSH
17832: LD_INT 0
17834: PPUSH
17835: CALL 18300 0 6
17839: ST_TO_ADDR
// if not hexes then
17840: LD_VAR 0 12
17844: NOT
17845: IFFALSE 17849
// exit ;
17847: GO 18295
// hex := GetHexInfo ( x , y ) ;
17849: LD_ADDR_VAR 0 15
17853: PUSH
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_VAR 0 4
17863: PPUSH
17864: CALL_OW 546
17868: ST_TO_ADDR
// if hex [ 1 ] then
17869: LD_VAR 0 15
17873: PUSH
17874: LD_INT 1
17876: ARRAY
17877: IFFALSE 17881
// exit ;
17879: GO 18295
// height := hex [ 2 ] ;
17881: LD_ADDR_VAR 0 13
17885: PUSH
17886: LD_VAR 0 15
17890: PUSH
17891: LD_INT 2
17893: ARRAY
17894: ST_TO_ADDR
// for i = 1 to hexes do
17895: LD_ADDR_VAR 0 8
17899: PUSH
17900: DOUBLE
17901: LD_INT 1
17903: DEC
17904: ST_TO_ADDR
17905: LD_VAR 0 12
17909: PUSH
17910: FOR_TO
17911: IFFALSE 18239
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17913: LD_VAR 0 12
17917: PUSH
17918: LD_VAR 0 8
17922: ARRAY
17923: PUSH
17924: LD_INT 1
17926: ARRAY
17927: PPUSH
17928: LD_VAR 0 12
17932: PUSH
17933: LD_VAR 0 8
17937: ARRAY
17938: PUSH
17939: LD_INT 2
17941: ARRAY
17942: PPUSH
17943: CALL_OW 488
17947: NOT
17948: IFFALSE 17952
// continue ;
17950: GO 17910
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17952: LD_ADDR_VAR 0 9
17956: PUSH
17957: LD_VAR 0 12
17961: PUSH
17962: LD_VAR 0 8
17966: ARRAY
17967: PUSH
17968: LD_INT 1
17970: ARRAY
17971: PPUSH
17972: LD_VAR 0 12
17976: PUSH
17977: LD_VAR 0 8
17981: ARRAY
17982: PUSH
17983: LD_INT 2
17985: ARRAY
17986: PPUSH
17987: CALL_OW 546
17991: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17992: LD_VAR 0 9
17996: PUSH
17997: LD_INT 1
17999: ARRAY
18000: PUSH
18001: LD_VAR 0 9
18005: PUSH
18006: LD_INT 2
18008: ARRAY
18009: PUSH
18010: LD_VAR 0 13
18014: PUSH
18015: LD_INT 2
18017: PLUS
18018: GREATER
18019: OR
18020: PUSH
18021: LD_VAR 0 9
18025: PUSH
18026: LD_INT 2
18028: ARRAY
18029: PUSH
18030: LD_VAR 0 13
18034: PUSH
18035: LD_INT 2
18037: MINUS
18038: LESS
18039: OR
18040: PUSH
18041: LD_VAR 0 9
18045: PUSH
18046: LD_INT 3
18048: ARRAY
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 8
18055: PUSH
18056: LD_INT 9
18058: PUSH
18059: LD_INT 10
18061: PUSH
18062: LD_INT 11
18064: PUSH
18065: LD_INT 12
18067: PUSH
18068: LD_INT 13
18070: PUSH
18071: LD_INT 16
18073: PUSH
18074: LD_INT 17
18076: PUSH
18077: LD_INT 18
18079: PUSH
18080: LD_INT 19
18082: PUSH
18083: LD_INT 20
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: IN
18104: NOT
18105: OR
18106: PUSH
18107: LD_VAR 0 9
18111: PUSH
18112: LD_INT 5
18114: ARRAY
18115: NOT
18116: OR
18117: PUSH
18118: LD_VAR 0 9
18122: PUSH
18123: LD_INT 6
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: LD_INT 7
18135: PUSH
18136: LD_INT 9
18138: PUSH
18139: LD_INT 10
18141: PUSH
18142: LD_INT 11
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: IN
18153: NOT
18154: OR
18155: PUSH
18156: LD_VAR 0 12
18160: PUSH
18161: LD_VAR 0 8
18165: ARRAY
18166: PUSH
18167: LD_INT 1
18169: ARRAY
18170: PPUSH
18171: LD_VAR 0 12
18175: PUSH
18176: LD_VAR 0 8
18180: ARRAY
18181: PUSH
18182: LD_INT 2
18184: ARRAY
18185: PPUSH
18186: CALL_OW 428
18190: PUSH
18191: LD_INT 0
18193: GREATER
18194: OR
18195: PUSH
18196: LD_VAR 0 12
18200: PUSH
18201: LD_VAR 0 8
18205: ARRAY
18206: PUSH
18207: LD_INT 1
18209: ARRAY
18210: PPUSH
18211: LD_VAR 0 12
18215: PUSH
18216: LD_VAR 0 8
18220: ARRAY
18221: PUSH
18222: LD_INT 2
18224: ARRAY
18225: PPUSH
18226: CALL_OW 351
18230: OR
18231: IFFALSE 18237
// exit ;
18233: POP
18234: POP
18235: GO 18295
// end ;
18237: GO 17910
18239: POP
18240: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18241: LD_VAR 0 2
18245: PUSH
18246: LD_INT 29
18248: PUSH
18249: LD_INT 30
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: IN
18256: PUSH
18257: LD_VAR 0 3
18261: PPUSH
18262: LD_VAR 0 4
18266: PPUSH
18267: LD_VAR 0 1
18271: PPUSH
18272: CALL_OW 255
18276: PPUSH
18277: CALL_OW 440
18281: NOT
18282: AND
18283: IFFALSE 18287
// exit ;
18285: GO 18295
// result := true ;
18287: LD_ADDR_VAR 0 7
18291: PUSH
18292: LD_INT 1
18294: ST_TO_ADDR
// end ;
18295: LD_VAR 0 7
18299: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18300: LD_INT 0
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
18306: PPUSH
18307: PPUSH
18308: PPUSH
18309: PPUSH
18310: PPUSH
18311: PPUSH
18312: PPUSH
18313: PPUSH
18314: PPUSH
18315: PPUSH
18316: PPUSH
18317: PPUSH
18318: PPUSH
18319: PPUSH
18320: PPUSH
18321: PPUSH
18322: PPUSH
18323: PPUSH
18324: PPUSH
18325: PPUSH
18326: PPUSH
18327: PPUSH
18328: PPUSH
18329: PPUSH
18330: PPUSH
18331: PPUSH
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
18336: PPUSH
18337: PPUSH
18338: PPUSH
18339: PPUSH
18340: PPUSH
18341: PPUSH
18342: PPUSH
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
18347: PPUSH
18348: PPUSH
18349: PPUSH
18350: PPUSH
18351: PPUSH
18352: PPUSH
18353: PPUSH
18354: PPUSH
18355: PPUSH
18356: PPUSH
18357: PPUSH
18358: PPUSH
18359: PPUSH
// result = [ ] ;
18360: LD_ADDR_VAR 0 7
18364: PUSH
18365: EMPTY
18366: ST_TO_ADDR
// temp_list = [ ] ;
18367: LD_ADDR_VAR 0 9
18371: PUSH
18372: EMPTY
18373: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18374: LD_VAR 0 4
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 3
18390: PUSH
18391: LD_INT 4
18393: PUSH
18394: LD_INT 5
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: IN
18405: NOT
18406: PUSH
18407: LD_VAR 0 1
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: IN
18422: PUSH
18423: LD_VAR 0 5
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: LD_INT 2
18433: PUSH
18434: LD_INT 3
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: IN
18442: NOT
18443: AND
18444: OR
18445: IFFALSE 18449
// exit ;
18447: GO 36834
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18449: LD_VAR 0 1
18453: PUSH
18454: LD_INT 6
18456: PUSH
18457: LD_INT 7
18459: PUSH
18460: LD_INT 8
18462: PUSH
18463: LD_INT 13
18465: PUSH
18466: LD_INT 12
18468: PUSH
18469: LD_INT 15
18471: PUSH
18472: LD_INT 11
18474: PUSH
18475: LD_INT 14
18477: PUSH
18478: LD_INT 10
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: IN
18492: IFFALSE 18502
// btype = b_lab ;
18494: LD_ADDR_VAR 0 1
18498: PUSH
18499: LD_INT 6
18501: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18502: LD_VAR 0 6
18506: PUSH
18507: LD_INT 0
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: LD_INT 2
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: IN
18521: NOT
18522: PUSH
18523: LD_VAR 0 1
18527: PUSH
18528: LD_INT 0
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: LD_INT 3
18539: PUSH
18540: LD_INT 6
18542: PUSH
18543: LD_INT 36
18545: PUSH
18546: LD_INT 4
18548: PUSH
18549: LD_INT 5
18551: PUSH
18552: LD_INT 31
18554: PUSH
18555: LD_INT 32
18557: PUSH
18558: LD_INT 33
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: IN
18574: NOT
18575: PUSH
18576: LD_VAR 0 6
18580: PUSH
18581: LD_INT 1
18583: EQUAL
18584: AND
18585: OR
18586: PUSH
18587: LD_VAR 0 1
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 3
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: IN
18602: NOT
18603: PUSH
18604: LD_VAR 0 6
18608: PUSH
18609: LD_INT 2
18611: EQUAL
18612: AND
18613: OR
18614: IFFALSE 18624
// mode = 0 ;
18616: LD_ADDR_VAR 0 6
18620: PUSH
18621: LD_INT 0
18623: ST_TO_ADDR
// case mode of 0 :
18624: LD_VAR 0 6
18628: PUSH
18629: LD_INT 0
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 30090
18637: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18638: LD_ADDR_VAR 0 11
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 1
18658: NEG
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: NEG
18720: PUSH
18721: LD_INT 2
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 0
18731: PUSH
18732: LD_INT 2
18734: NEG
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: LD_INT 3
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 1
18804: NEG
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18831: LD_ADDR_VAR 0 12
18835: PUSH
18836: LD_INT 0
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: LD_INT 1
18904: NEG
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: NEG
18944: PUSH
18945: LD_INT 1
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 2
18954: NEG
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 2
18965: NEG
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 2
18977: NEG
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 3
18988: NEG
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 3
18999: NEG
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19027: LD_ADDR_VAR 0 13
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: LD_INT 1
19047: NEG
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 2
19150: NEG
19151: PUSH
19152: LD_INT 1
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: NEG
19163: PUSH
19164: LD_INT 2
19166: NEG
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: LD_INT 3
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 3
19186: NEG
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 3
19198: NEG
19199: PUSH
19200: LD_INT 3
19202: NEG
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19226: LD_ADDR_VAR 0 14
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: NEG
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 1
19307: NEG
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 0
19319: PUSH
19320: LD_INT 2
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: LD_INT 1
19333: NEG
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 1
19341: PUSH
19342: LD_INT 2
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: LD_INT 2
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: NEG
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: LD_INT 3
19376: NEG
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: LD_INT 3
19387: NEG
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19422: LD_ADDR_VAR 0 15
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 1
19491: NEG
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: NEG
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 3
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 3
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19615: LD_ADDR_VAR 0 16
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 1
19673: NEG
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: LD_INT 2
19700: NEG
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: LD_INT 1
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: NEG
19751: PUSH
19752: LD_INT 2
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 3
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 3
19772: PUSH
19773: LD_INT 3
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: LD_INT 3
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19808: LD_ADDR_VAR 0 17
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: NEG
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: NEG
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20038: LD_ADDR_VAR 0 18
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 1
20107: NEG
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 2
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 2
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: LD_INT 1
20145: NEG
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: NEG
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: NEG
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20268: LD_ADDR_VAR 0 19
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 1
20349: NEG
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 0
20361: PUSH
20362: LD_INT 2
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 2
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: NEG
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 2
20467: NEG
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20498: LD_ADDR_VAR 0 20
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 0
20515: PUSH
20516: LD_INT 1
20518: NEG
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 2
20674: NEG
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: NEG
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 2
20697: NEG
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20728: LD_ADDR_VAR 0 21
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 0
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: NEG
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 1
20797: NEG
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: NEG
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 2
20904: NEG
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 2
20927: NEG
20928: PUSH
20929: LD_INT 2
20931: NEG
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20958: LD_ADDR_VAR 0 22
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 0
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 1
21016: NEG
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 1
21027: NEG
21028: PUSH
21029: LD_INT 1
21031: NEG
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 2
21134: NEG
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: NEG
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21188: LD_ADDR_VAR 0 23
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 2
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: LD_INT 2
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 0
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: NEG
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 2
21364: NEG
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 2
21375: NEG
21376: PUSH
21377: LD_INT 1
21379: NEG
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: NEG
21388: PUSH
21389: LD_INT 2
21391: NEG
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: LD_INT 3
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 3
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 2
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 1
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21468: LD_ADDR_VAR 0 24
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: LD_INT 1
21488: NEG
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: LD_INT 0
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: NEG
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 0
21561: PUSH
21562: LD_INT 2
21564: NEG
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 2
21644: NEG
21645: PUSH
21646: LD_INT 0
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 2
21655: NEG
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: NEG
21668: PUSH
21669: LD_INT 2
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 3
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 3
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21744: LD_ADDR_VAR 0 25
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: LD_INT 0
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 1
21813: NEG
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 2
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: LD_INT 2
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 1
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: NEG
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 2
21920: NEG
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: NEG
21932: PUSH
21933: LD_INT 1
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 2
21943: NEG
21944: PUSH
21945: LD_INT 2
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 3
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 3
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: LD_INT 3
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: LD_INT 3
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22018: LD_ADDR_VAR 0 26
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 1
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: NEG
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 1
22099: NEG
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 0
22111: PUSH
22112: LD_INT 2
22114: NEG
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 2
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: NEG
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 2
22194: NEG
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: NEG
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 2
22217: NEG
22218: PUSH
22219: LD_INT 2
22221: NEG
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: LD_INT 3
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: LD_INT 3
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 2
22260: NEG
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22294: LD_ADDR_VAR 0 27
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 0
22387: PUSH
22388: LD_INT 2
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 1
22401: NEG
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 0
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 2
22470: NEG
22471: PUSH
22472: LD_INT 0
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 2
22481: NEG
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: NEG
22494: PUSH
22495: LD_INT 2
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 2
22516: NEG
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 3
22527: NEG
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 3
22539: NEG
22540: PUSH
22541: LD_INT 2
22543: NEG
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22574: LD_ADDR_VAR 0 28
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 1
22632: NEG
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 0
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: NEG
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: NEG
22762: PUSH
22763: LD_INT 1
22765: NEG
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 2
22773: NEG
22774: PUSH
22775: LD_INT 2
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 2
22785: NEG
22786: PUSH
22787: LD_INT 3
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: LD_INT 3
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 3
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 3
22821: NEG
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22856: LD_ADDR_VAR 0 29
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 0
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: LD_INT 0
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: LD_INT 2
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: LD_INT 2
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: NEG
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 2
23022: NEG
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: LD_INT 3
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 2
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 3
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: LD_INT 3
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 3
23100: NEG
23101: PUSH
23102: LD_INT 2
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23135: LD_ADDR_VAR 0 30
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 1
23193: NEG
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: LD_INT 3
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 2
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 2
23357: PUSH
23358: LD_INT 3
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 2
23367: NEG
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 3
23378: NEG
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23413: LD_ADDR_VAR 0 31
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 3
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 3
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: LD_INT 3
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 3
23656: NEG
23657: PUSH
23658: LD_INT 2
23660: NEG
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23691: LD_ADDR_VAR 0 32
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: NEG
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: LD_INT 2
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: LD_INT 2
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 2
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 2
23868: NEG
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: LD_INT 3
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: LD_INT 2
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 3
23903: PUSH
23904: LD_INT 2
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: LD_INT 3
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 2
23923: NEG
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 3
23934: NEG
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23969: LD_ADDR_VAR 0 33
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 0
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: LD_INT 2
24054: NEG
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: LD_INT 2
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 2
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: NEG
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 2
24135: NEG
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: NEG
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: LD_INT 3
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 3
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 3
24213: NEG
24214: PUSH
24215: LD_INT 2
24217: NEG
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24248: LD_ADDR_VAR 0 34
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 2
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: LD_INT 2
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 2
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 2
24404: NEG
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: NEG
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 2
24427: NEG
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: LD_INT 3
24443: NEG
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 3
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 2
24472: PUSH
24473: LD_INT 3
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: NEG
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 3
24493: NEG
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24528: LD_ADDR_VAR 0 35
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 2
24619: NEG
24620: PUSH
24621: LD_INT 1
24623: NEG
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24640: LD_ADDR_VAR 0 36
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: LD_INT 2
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: LD_INT 2
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24752: LD_ADDR_VAR 0 37
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24864: LD_ADDR_VAR 0 38
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 1
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24976: LD_ADDR_VAR 0 39
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: LD_INT 2
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25088: LD_ADDR_VAR 0 40
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: LD_INT 0
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25200: LD_ADDR_VAR 0 41
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: LD_INT 2
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 2
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: NEG
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: NEG
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 2
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 3
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 3
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 3
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 3
25443: PUSH
25444: LD_INT 3
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: LD_INT 3
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 3
25474: NEG
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 3
25485: NEG
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: NEG
25498: PUSH
25499: LD_INT 2
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 3
25509: NEG
25510: PUSH
25511: LD_INT 3
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25550: LD_ADDR_VAR 0 42
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: NEG
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 2
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 2
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: LD_INT 2
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: LD_INT 3
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: LD_INT 3
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: LD_INT 3
25767: NEG
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 2
25778: NEG
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 3
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: LD_INT 3
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: LD_INT 3
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 3
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 3
25847: NEG
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 3
25859: NEG
25860: PUSH
25861: LD_INT 3
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25900: LD_ADDR_VAR 0 43
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: LD_INT 1
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: LD_INT 2
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 2
25996: NEG
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 3
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 3
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 2
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: LD_INT 1
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 3
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 3
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 3
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 3
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: NEG
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 3
26196: NEG
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 3
26207: NEG
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26248: LD_ADDR_VAR 0 44
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 2
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 2
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: NEG
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: NEG
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: LD_INT 3
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 3
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 3
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 3
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 3
26491: PUSH
26492: LD_INT 3
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: LD_INT 3
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 2
26511: NEG
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 3
26522: NEG
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: NEG
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 3
26545: NEG
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 3
26557: NEG
26558: PUSH
26559: LD_INT 3
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26598: LD_ADDR_VAR 0 45
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: LD_INT 2
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: NEG
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: LD_INT 2
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: NEG
26789: PUSH
26790: LD_INT 3
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: LD_INT 3
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 3
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 2
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 3
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: LD_INT 3
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 3
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 3
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 3
26907: NEG
26908: PUSH
26909: LD_INT 3
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26948: LD_ADDR_VAR 0 46
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: LD_INT 2
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 2
27114: NEG
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: LD_INT 3
27141: NEG
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: LD_INT 3
27152: NEG
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: LD_INT 3
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 3
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: NEG
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 3
27244: NEG
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 3
27255: NEG
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27296: LD_ADDR_VAR 0 47
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: LD_INT 2
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27447: LD_ADDR_VAR 0 48
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: LD_INT 2
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 2
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 2
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27594: LD_ADDR_VAR 0 49
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27738: LD_ADDR_VAR 0 50
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27882: LD_ADDR_VAR 0 51
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28029: LD_ADDR_VAR 0 52
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: LD_INT 1
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: NEG
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 2
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 2
28156: NEG
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28180: LD_ADDR_VAR 0 53
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: LD_INT 2
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 2
28356: NEG
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28410: LD_ADDR_VAR 0 54
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 2
28586: NEG
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28640: LD_ADDR_VAR 0 55
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 2
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 2
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28870: LD_ADDR_VAR 0 56
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 2
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: LD_INT 2
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: NEG
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29100: LD_ADDR_VAR 0 57
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 2
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: NEG
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 2
29299: NEG
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29330: LD_ADDR_VAR 0 58
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 2
29529: NEG
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29560: LD_ADDR_VAR 0 59
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29648: LD_ADDR_VAR 0 60
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29736: LD_ADDR_VAR 0 61
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29824: LD_ADDR_VAR 0 62
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29912: LD_ADDR_VAR 0 63
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30000: LD_ADDR_VAR 0 64
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// end ; 1 :
30088: GO 35985
30090: LD_INT 1
30092: DOUBLE
30093: EQUAL
30094: IFTRUE 30098
30096: GO 32721
30098: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30099: LD_ADDR_VAR 0 11
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: LD_INT 3
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 2
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30143: LD_ADDR_VAR 0 12
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30184: LD_ADDR_VAR 0 13
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30224: LD_ADDR_VAR 0 14
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30265: LD_ADDR_VAR 0 15
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 3
30283: NEG
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 3
30294: NEG
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30309: LD_ADDR_VAR 0 16
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: LD_INT 3
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: LD_INT 2
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 3
30340: NEG
30341: PUSH
30342: LD_INT 3
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30355: LD_ADDR_VAR 0 17
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 3
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30399: LD_ADDR_VAR 0 18
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 3
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30440: LD_ADDR_VAR 0 19
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: LD_INT 3
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30480: LD_ADDR_VAR 0 20
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: NEG
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30521: LD_ADDR_VAR 0 21
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 3
30539: NEG
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30565: LD_ADDR_VAR 0 22
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 3
30584: NEG
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 3
30596: NEG
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30611: LD_ADDR_VAR 0 23
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 3
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: LD_INT 4
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 3
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30655: LD_ADDR_VAR 0 24
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30696: LD_ADDR_VAR 0 25
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 4
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30736: LD_ADDR_VAR 0 26
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: LD_INT 3
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 4
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30777: LD_ADDR_VAR 0 27
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 4
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30821: LD_ADDR_VAR 0 28
30825: PUSH
30826: LD_INT 3
30828: NEG
30829: PUSH
30830: LD_INT 3
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 3
30840: NEG
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 4
30852: NEG
30853: PUSH
30854: LD_INT 3
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30867: LD_ADDR_VAR 0 29
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: LD_INT 3
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: LD_INT 4
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: LD_INT 4
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 3
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: LD_INT 5
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 5
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 6
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 6
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 5
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31022: LD_ADDR_VAR 0 30
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 3
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 3
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 3
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 4
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 4
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 4
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 5
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 5
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 5
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 6
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 6
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31165: LD_ADDR_VAR 0 31
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 4
31202: PUSH
31203: LD_INT 3
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 4
31212: PUSH
31213: LD_INT 4
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: LD_INT 4
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 5
31232: PUSH
31233: LD_INT 4
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 5
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 4
31252: PUSH
31253: LD_INT 5
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 6
31262: PUSH
31263: LD_INT 5
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 6
31272: PUSH
31273: LD_INT 6
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 5
31282: PUSH
31283: LD_INT 6
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31304: LD_ADDR_VAR 0 32
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 3
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 4
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 4
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 3
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 5
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 4
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 6
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: LD_INT 6
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: LD_INT 5
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31447: LD_ADDR_VAR 0 33
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 3
31476: NEG
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 4
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 4
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 4
31522: NEG
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 5
31533: NEG
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 5
31544: NEG
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 5
31556: NEG
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 6
31567: NEG
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 6
31578: NEG
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31602: LD_ADDR_VAR 0 34
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 3
31621: NEG
31622: PUSH
31623: LD_INT 2
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 3
31633: NEG
31634: PUSH
31635: LD_INT 3
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: NEG
31646: PUSH
31647: LD_INT 4
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 4
31657: NEG
31658: PUSH
31659: LD_INT 3
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 4
31669: NEG
31670: PUSH
31671: LD_INT 4
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 4
31681: NEG
31682: PUSH
31683: LD_INT 5
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 5
31693: NEG
31694: PUSH
31695: LD_INT 4
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 5
31705: NEG
31706: PUSH
31707: LD_INT 5
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 5
31717: NEG
31718: PUSH
31719: LD_INT 6
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 6
31729: NEG
31730: PUSH
31731: LD_INT 5
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 6
31741: NEG
31742: PUSH
31743: LD_INT 6
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31765: LD_ADDR_VAR 0 41
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: LD_INT 3
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 2
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31809: LD_ADDR_VAR 0 42
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31850: LD_ADDR_VAR 0 43
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31890: LD_ADDR_VAR 0 44
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 3
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31931: LD_ADDR_VAR 0 45
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: NEG
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31975: LD_ADDR_VAR 0 46
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 3
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 3
32006: NEG
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32021: LD_ADDR_VAR 0 47
32025: PUSH
32026: LD_INT 2
32028: NEG
32029: PUSH
32030: LD_INT 3
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: LD_INT 3
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32054: LD_ADDR_VAR 0 48
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32085: LD_ADDR_VAR 0 49
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 3
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32114: LD_ADDR_VAR 0 50
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32143: LD_ADDR_VAR 0 51
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32174: LD_ADDR_VAR 0 52
32178: PUSH
32179: LD_INT 3
32181: NEG
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 3
32193: NEG
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32207: LD_ADDR_VAR 0 53
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 3
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 3
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: LD_INT 2
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32251: LD_ADDR_VAR 0 54
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32292: LD_ADDR_VAR 0 55
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32332: LD_ADDR_VAR 0 56
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32373: LD_ADDR_VAR 0 57
32377: PUSH
32378: LD_INT 2
32380: NEG
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: NEG
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32417: LD_ADDR_VAR 0 58
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: LD_INT 3
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 3
32436: NEG
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 3
32448: NEG
32449: PUSH
32450: LD_INT 3
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32463: LD_ADDR_VAR 0 59
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: LD_INT 2
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32507: LD_ADDR_VAR 0 60
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32548: LD_ADDR_VAR 0 61
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32588: LD_ADDR_VAR 0 62
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: LIST
32628: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32629: LD_ADDR_VAR 0 63
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32673: LD_ADDR_VAR 0 64
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 2
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: ST_TO_ADDR
// end ; 2 :
32719: GO 35985
32721: LD_INT 2
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 35984
32729: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32730: LD_ADDR_VAR 0 29
32734: PUSH
32735: LD_INT 4
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 4
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 5
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 5
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 4
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: LD_INT 2
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 4
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 4
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 3
32870: PUSH
32871: LD_INT 4
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 3
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 4
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 4
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: LD_INT 4
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 4
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 5
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 5
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: LD_INT 4
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 3
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 5
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 3
33013: NEG
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 4
33069: NEG
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 4
33080: NEG
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 4
33092: NEG
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 4
33115: NEG
33116: PUSH
33117: LD_INT 4
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: NEG
33128: PUSH
33129: LD_INT 5
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: LD_INT 4
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 3
33151: NEG
33152: PUSH
33153: LD_INT 3
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: LD_INT 3
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 5
33175: NEG
33176: PUSH
33177: LD_INT 4
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 5
33187: NEG
33188: PUSH
33189: LD_INT 5
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 3
33199: NEG
33200: PUSH
33201: LD_INT 5
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 5
33211: NEG
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33268: LD_ADDR_VAR 0 30
33272: PUSH
33273: LD_INT 4
33275: PUSH
33276: LD_INT 4
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 5
33295: PUSH
33296: LD_INT 4
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: LD_INT 5
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: LD_INT 5
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 3
33325: PUSH
33326: LD_INT 4
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 3
33335: PUSH
33336: LD_INT 3
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 5
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 3
33355: PUSH
33356: LD_INT 5
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: LD_INT 3
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 3
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 4
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 4
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 4
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: NEG
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 4
33458: NEG
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 4
33469: NEG
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 4
33503: NEG
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 5
33514: NEG
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 5
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 5
33537: NEG
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: NEG
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 3
33560: NEG
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 3
33572: NEG
33573: PUSH
33574: LD_INT 4
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: LD_INT 3
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 4
33620: NEG
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 4
33632: NEG
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 4
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 4
33656: NEG
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 4
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 5
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 4
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 4
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 5
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: NEG
33759: PUSH
33760: LD_INT 5
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33815: LD_ADDR_VAR 0 31
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 4
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: LD_INT 4
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 5
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 5
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 4
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 5
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: NEG
33905: PUSH
33906: LD_INT 3
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: LD_INT 1
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 3
33960: NEG
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 4
33971: NEG
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 4
33982: NEG
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 4
33994: NEG
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 4
34017: NEG
34018: PUSH
34019: LD_INT 4
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 4
34029: NEG
34030: PUSH
34031: LD_INT 5
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: LD_INT 4
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: NEG
34054: PUSH
34055: LD_INT 3
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 4
34065: NEG
34066: PUSH
34067: LD_INT 3
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 5
34077: NEG
34078: PUSH
34079: LD_INT 4
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 5
34089: NEG
34090: PUSH
34091: LD_INT 5
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 3
34101: NEG
34102: PUSH
34103: LD_INT 5
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 5
34113: NEG
34114: PUSH
34115: LD_INT 3
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 3
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: LD_INT 4
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: LD_INT 3
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: LD_INT 3
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: PUSH
34194: LD_INT 4
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: NEG
34216: PUSH
34217: LD_INT 4
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 4
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 4
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 5
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 5
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 4
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 3
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 3
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34365: LD_ADDR_VAR 0 32
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 4
34383: NEG
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 3
34395: NEG
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 3
34406: NEG
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 4
34417: NEG
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 5
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 5
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 5
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 3
34463: NEG
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 3
34474: NEG
34475: PUSH
34476: LD_INT 3
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 3
34486: NEG
34487: PUSH
34488: LD_INT 4
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 2
34498: NEG
34499: PUSH
34500: LD_INT 3
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: NEG
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 3
34522: NEG
34523: PUSH
34524: LD_INT 2
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 4
34534: NEG
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 4
34546: NEG
34547: PUSH
34548: LD_INT 4
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: NEG
34559: PUSH
34560: LD_INT 4
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 4
34570: NEG
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 4
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 5
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 4
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 3
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: LD_INT 3
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: LD_INT 4
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: LD_INT 5
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 3
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 5
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 3
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 3
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 4
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 4
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 4
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 4
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 5
34797: PUSH
34798: LD_INT 4
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 5
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 4
34817: PUSH
34818: LD_INT 5
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 4
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 3
34837: PUSH
34838: LD_INT 3
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 5
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34912: LD_ADDR_VAR 0 33
34916: PUSH
34917: LD_INT 4
34919: NEG
34920: PUSH
34921: LD_INT 4
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 4
34931: NEG
34932: PUSH
34933: LD_INT 5
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 3
34943: NEG
34944: PUSH
34945: LD_INT 4
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 3
34955: NEG
34956: PUSH
34957: LD_INT 3
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 4
34967: NEG
34968: PUSH
34969: LD_INT 3
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 5
34979: NEG
34980: PUSH
34981: LD_INT 4
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 5
34991: NEG
34992: PUSH
34993: LD_INT 5
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 3
35003: NEG
35004: PUSH
35005: LD_INT 5
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 5
35015: NEG
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 3
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 4
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: LD_INT 3
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 4
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: LD_INT 4
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 4
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 4
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 5
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 5
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 3
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 3
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 5
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 3
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 4
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 4
35252: PUSH
35253: LD_INT 4
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: PUSH
35263: LD_INT 4
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: LD_INT 4
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 4
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: LD_INT 4
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 5
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 4
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 2
35384: PUSH
35385: LD_INT 5
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35450: LD_ADDR_VAR 0 34
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: LD_INT 4
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 5
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 4
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 3
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 4
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 5
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: LD_INT 3
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: NEG
35548: PUSH
35549: LD_INT 5
35551: NEG
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 3
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 4
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 4
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 2
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 4
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 4
35652: PUSH
35653: LD_INT 4
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 4
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 5
35672: PUSH
35673: LD_INT 4
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 5
35682: PUSH
35683: LD_INT 5
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 4
35692: PUSH
35693: LD_INT 5
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 3
35702: PUSH
35703: LD_INT 4
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: LD_INT 3
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 5
35722: PUSH
35723: LD_INT 3
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 3
35732: PUSH
35733: LD_INT 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: LD_INT 3
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 4
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: LD_INT 4
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: LD_INT 4
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: NEG
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 4
35835: NEG
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 4
35846: NEG
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 3
35858: NEG
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 3
35869: NEG
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 4
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 5
35891: NEG
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 5
35902: NEG
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 5
35914: NEG
35915: PUSH
35916: LD_INT 2
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 3
35926: NEG
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
// end ; end ;
35982: GO 35985
35984: POP
// case btype of b_depot , b_warehouse :
35985: LD_VAR 0 1
35989: PUSH
35990: LD_INT 0
35992: DOUBLE
35993: EQUAL
35994: IFTRUE 36004
35996: LD_INT 1
35998: DOUBLE
35999: EQUAL
36000: IFTRUE 36004
36002: GO 36205
36004: POP
// case nation of nation_american :
36005: LD_VAR 0 5
36009: PUSH
36010: LD_INT 1
36012: DOUBLE
36013: EQUAL
36014: IFTRUE 36018
36016: GO 36074
36018: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36019: LD_ADDR_VAR 0 9
36023: PUSH
36024: LD_VAR 0 11
36028: PUSH
36029: LD_VAR 0 12
36033: PUSH
36034: LD_VAR 0 13
36038: PUSH
36039: LD_VAR 0 14
36043: PUSH
36044: LD_VAR 0 15
36048: PUSH
36049: LD_VAR 0 16
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: PUSH
36062: LD_VAR 0 4
36066: PUSH
36067: LD_INT 1
36069: PLUS
36070: ARRAY
36071: ST_TO_ADDR
36072: GO 36203
36074: LD_INT 2
36076: DOUBLE
36077: EQUAL
36078: IFTRUE 36082
36080: GO 36138
36082: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36083: LD_ADDR_VAR 0 9
36087: PUSH
36088: LD_VAR 0 17
36092: PUSH
36093: LD_VAR 0 18
36097: PUSH
36098: LD_VAR 0 19
36102: PUSH
36103: LD_VAR 0 20
36107: PUSH
36108: LD_VAR 0 21
36112: PUSH
36113: LD_VAR 0 22
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: PUSH
36126: LD_VAR 0 4
36130: PUSH
36131: LD_INT 1
36133: PLUS
36134: ARRAY
36135: ST_TO_ADDR
36136: GO 36203
36138: LD_INT 3
36140: DOUBLE
36141: EQUAL
36142: IFTRUE 36146
36144: GO 36202
36146: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36147: LD_ADDR_VAR 0 9
36151: PUSH
36152: LD_VAR 0 23
36156: PUSH
36157: LD_VAR 0 24
36161: PUSH
36162: LD_VAR 0 25
36166: PUSH
36167: LD_VAR 0 26
36171: PUSH
36172: LD_VAR 0 27
36176: PUSH
36177: LD_VAR 0 28
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: PUSH
36190: LD_VAR 0 4
36194: PUSH
36195: LD_INT 1
36197: PLUS
36198: ARRAY
36199: ST_TO_ADDR
36200: GO 36203
36202: POP
36203: GO 36752
36205: LD_INT 2
36207: DOUBLE
36208: EQUAL
36209: IFTRUE 36219
36211: LD_INT 3
36213: DOUBLE
36214: EQUAL
36215: IFTRUE 36219
36217: GO 36275
36219: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36220: LD_ADDR_VAR 0 9
36224: PUSH
36225: LD_VAR 0 29
36229: PUSH
36230: LD_VAR 0 30
36234: PUSH
36235: LD_VAR 0 31
36239: PUSH
36240: LD_VAR 0 32
36244: PUSH
36245: LD_VAR 0 33
36249: PUSH
36250: LD_VAR 0 34
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: PUSH
36263: LD_VAR 0 4
36267: PUSH
36268: LD_INT 1
36270: PLUS
36271: ARRAY
36272: ST_TO_ADDR
36273: GO 36752
36275: LD_INT 16
36277: DOUBLE
36278: EQUAL
36279: IFTRUE 36331
36281: LD_INT 17
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36331
36287: LD_INT 18
36289: DOUBLE
36290: EQUAL
36291: IFTRUE 36331
36293: LD_INT 19
36295: DOUBLE
36296: EQUAL
36297: IFTRUE 36331
36299: LD_INT 20
36301: DOUBLE
36302: EQUAL
36303: IFTRUE 36331
36305: LD_INT 21
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36331
36311: LD_INT 23
36313: DOUBLE
36314: EQUAL
36315: IFTRUE 36331
36317: LD_INT 24
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36331
36323: LD_INT 25
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36387
36331: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36332: LD_ADDR_VAR 0 9
36336: PUSH
36337: LD_VAR 0 35
36341: PUSH
36342: LD_VAR 0 36
36346: PUSH
36347: LD_VAR 0 37
36351: PUSH
36352: LD_VAR 0 38
36356: PUSH
36357: LD_VAR 0 39
36361: PUSH
36362: LD_VAR 0 40
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: LD_VAR 0 4
36379: PUSH
36380: LD_INT 1
36382: PLUS
36383: ARRAY
36384: ST_TO_ADDR
36385: GO 36752
36387: LD_INT 6
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36443
36393: LD_INT 7
36395: DOUBLE
36396: EQUAL
36397: IFTRUE 36443
36399: LD_INT 8
36401: DOUBLE
36402: EQUAL
36403: IFTRUE 36443
36405: LD_INT 13
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36443
36411: LD_INT 12
36413: DOUBLE
36414: EQUAL
36415: IFTRUE 36443
36417: LD_INT 15
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36443
36423: LD_INT 11
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36443
36429: LD_INT 14
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36443
36435: LD_INT 10
36437: DOUBLE
36438: EQUAL
36439: IFTRUE 36443
36441: GO 36499
36443: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36444: LD_ADDR_VAR 0 9
36448: PUSH
36449: LD_VAR 0 41
36453: PUSH
36454: LD_VAR 0 42
36458: PUSH
36459: LD_VAR 0 43
36463: PUSH
36464: LD_VAR 0 44
36468: PUSH
36469: LD_VAR 0 45
36473: PUSH
36474: LD_VAR 0 46
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: LD_VAR 0 4
36491: PUSH
36492: LD_INT 1
36494: PLUS
36495: ARRAY
36496: ST_TO_ADDR
36497: GO 36752
36499: LD_INT 36
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36507
36505: GO 36563
36507: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36508: LD_ADDR_VAR 0 9
36512: PUSH
36513: LD_VAR 0 47
36517: PUSH
36518: LD_VAR 0 48
36522: PUSH
36523: LD_VAR 0 49
36527: PUSH
36528: LD_VAR 0 50
36532: PUSH
36533: LD_VAR 0 51
36537: PUSH
36538: LD_VAR 0 52
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: PUSH
36551: LD_VAR 0 4
36555: PUSH
36556: LD_INT 1
36558: PLUS
36559: ARRAY
36560: ST_TO_ADDR
36561: GO 36752
36563: LD_INT 4
36565: DOUBLE
36566: EQUAL
36567: IFTRUE 36589
36569: LD_INT 5
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36589
36575: LD_INT 34
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36589
36581: LD_INT 37
36583: DOUBLE
36584: EQUAL
36585: IFTRUE 36589
36587: GO 36645
36589: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36590: LD_ADDR_VAR 0 9
36594: PUSH
36595: LD_VAR 0 53
36599: PUSH
36600: LD_VAR 0 54
36604: PUSH
36605: LD_VAR 0 55
36609: PUSH
36610: LD_VAR 0 56
36614: PUSH
36615: LD_VAR 0 57
36619: PUSH
36620: LD_VAR 0 58
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: PUSH
36633: LD_VAR 0 4
36637: PUSH
36638: LD_INT 1
36640: PLUS
36641: ARRAY
36642: ST_TO_ADDR
36643: GO 36752
36645: LD_INT 31
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36695
36651: LD_INT 32
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36695
36657: LD_INT 33
36659: DOUBLE
36660: EQUAL
36661: IFTRUE 36695
36663: LD_INT 27
36665: DOUBLE
36666: EQUAL
36667: IFTRUE 36695
36669: LD_INT 26
36671: DOUBLE
36672: EQUAL
36673: IFTRUE 36695
36675: LD_INT 28
36677: DOUBLE
36678: EQUAL
36679: IFTRUE 36695
36681: LD_INT 29
36683: DOUBLE
36684: EQUAL
36685: IFTRUE 36695
36687: LD_INT 30
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36751
36695: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36696: LD_ADDR_VAR 0 9
36700: PUSH
36701: LD_VAR 0 59
36705: PUSH
36706: LD_VAR 0 60
36710: PUSH
36711: LD_VAR 0 61
36715: PUSH
36716: LD_VAR 0 62
36720: PUSH
36721: LD_VAR 0 63
36725: PUSH
36726: LD_VAR 0 64
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: PUSH
36739: LD_VAR 0 4
36743: PUSH
36744: LD_INT 1
36746: PLUS
36747: ARRAY
36748: ST_TO_ADDR
36749: GO 36752
36751: POP
// temp_list2 = [ ] ;
36752: LD_ADDR_VAR 0 10
36756: PUSH
36757: EMPTY
36758: ST_TO_ADDR
// for i in temp_list do
36759: LD_ADDR_VAR 0 8
36763: PUSH
36764: LD_VAR 0 9
36768: PUSH
36769: FOR_IN
36770: IFFALSE 36822
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36772: LD_ADDR_VAR 0 10
36776: PUSH
36777: LD_VAR 0 10
36781: PUSH
36782: LD_VAR 0 8
36786: PUSH
36787: LD_INT 1
36789: ARRAY
36790: PUSH
36791: LD_VAR 0 2
36795: PLUS
36796: PUSH
36797: LD_VAR 0 8
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PUSH
36806: LD_VAR 0 3
36810: PLUS
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: ADD
36819: ST_TO_ADDR
36820: GO 36769
36822: POP
36823: POP
// result = temp_list2 ;
36824: LD_ADDR_VAR 0 7
36828: PUSH
36829: LD_VAR 0 10
36833: ST_TO_ADDR
// end ; end_of_file
36834: LD_VAR 0 7
36838: RET
// every 1 do var i ;
36839: GO 36841
36841: DISABLE
36842: LD_INT 0
36844: PPUSH
// begin Video ( true ) ;
36845: LD_INT 1
36847: PPUSH
36848: CALL 6872 0 1
// CenterOnXY ( 53 , 40 ) ;
36852: LD_INT 53
36854: PPUSH
36855: LD_INT 40
36857: PPUSH
36858: CALL_OW 84
// wait ( 0 0$5 ) ;
36862: LD_INT 175
36864: PPUSH
36865: CALL_OW 67
// if gammaCommander = 1 then
36869: LD_EXP 12
36873: PUSH
36874: LD_INT 1
36876: EQUAL
36877: IFFALSE 36891
// Say ( Donaldson , D1-Don-1 ) ;
36879: LD_EXP 3
36883: PPUSH
36884: LD_STRING D1-Don-1
36886: PPUSH
36887: CALL_OW 88
// if gammaCommander = 2 then
36891: LD_EXP 12
36895: PUSH
36896: LD_INT 2
36898: EQUAL
36899: IFFALSE 36913
// Say ( Brown , D1-Brown-1 ) ;
36901: LD_EXP 2
36905: PPUSH
36906: LD_STRING D1-Brown-1
36908: PPUSH
36909: CALL_OW 88
// if gammaCommander = 3 then
36913: LD_EXP 12
36917: PUSH
36918: LD_INT 3
36920: EQUAL
36921: IFFALSE 36935
// Say ( Houten , D1-VanH-1 ) ;
36923: LD_EXP 13
36927: PPUSH
36928: LD_STRING D1-VanH-1
36930: PPUSH
36931: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
36935: LD_EXP 22
36939: PPUSH
36940: LD_STRING D1-Har-1
36942: PPUSH
36943: CALL_OW 94
// if gammaCommander = 1 then
36947: LD_EXP 12
36951: PUSH
36952: LD_INT 1
36954: EQUAL
36955: IFFALSE 36969
// Say ( Donaldson , D1-Don-2 ) ;
36957: LD_EXP 3
36961: PPUSH
36962: LD_STRING D1-Don-2
36964: PPUSH
36965: CALL_OW 88
// if gammaCommander = 2 then
36969: LD_EXP 12
36973: PUSH
36974: LD_INT 2
36976: EQUAL
36977: IFFALSE 36991
// Say ( Brown , D1-Brown-2 ) ;
36979: LD_EXP 2
36983: PPUSH
36984: LD_STRING D1-Brown-2
36986: PPUSH
36987: CALL_OW 88
// if gammaCommander = 3 then
36991: LD_EXP 12
36995: PUSH
36996: LD_INT 3
36998: EQUAL
36999: IFFALSE 37013
// Say ( Houten , D1-VanH-2 ) ;
37001: LD_EXP 13
37005: PPUSH
37006: LD_STRING D1-VanH-2
37008: PPUSH
37009: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37013: LD_EXP 22
37017: PPUSH
37018: LD_STRING D1-Har-2
37020: PPUSH
37021: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37025: LD_INT 22
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 33
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 61
37047: PUSH
37048: EMPTY
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: PPUSH
37056: CALL_OW 69
37060: IFFALSE 37125
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37062: LD_ADDR_VAR 0 1
37066: PUSH
37067: LD_INT 22
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 33
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 61
37089: PUSH
37090: EMPTY
37091: LIST
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: PPUSH
37098: CALL_OW 69
37102: PUSH
37103: FOR_IN
37104: IFFALSE 37123
// ComAgressiveMove ( i , 70 , 41 ) ;
37106: LD_VAR 0 1
37110: PPUSH
37111: LD_INT 70
37113: PPUSH
37114: LD_INT 41
37116: PPUSH
37117: CALL_OW 114
37121: GO 37103
37123: POP
37124: POP
// repeat wait ( 0 0$1 ) ;
37125: LD_INT 35
37127: PPUSH
37128: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37132: LD_ADDR_VAR 0 1
37136: PUSH
37137: LD_INT 22
37139: PUSH
37140: LD_INT 6
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: EMPTY
37148: LIST
37149: PPUSH
37150: CALL_OW 69
37154: PUSH
37155: FOR_IN
37156: IFFALSE 37175
// ComAgressiveMove ( i , 54 , 20 ) ;
37158: LD_VAR 0 1
37162: PPUSH
37163: LD_INT 54
37165: PPUSH
37166: LD_INT 20
37168: PPUSH
37169: CALL_OW 114
37173: GO 37155
37175: POP
37176: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37177: LD_ADDR_VAR 0 1
37181: PUSH
37182: LD_INT 22
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 25
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 3
37204: PUSH
37205: LD_INT 54
37207: PUSH
37208: EMPTY
37209: LIST
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: PPUSH
37220: CALL_OW 69
37224: PUSH
37225: FOR_IN
37226: IFFALSE 37260
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37228: LD_VAR 0 1
37232: PPUSH
37233: LD_INT 70
37235: PPUSH
37236: LD_INT 41
37238: PPUSH
37239: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37243: LD_VAR 0 1
37247: PPUSH
37248: LD_INT 46
37250: PPUSH
37251: LD_INT 39
37253: PPUSH
37254: CALL_OW 174
// end ;
37258: GO 37225
37260: POP
37261: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37262: LD_ADDR_VAR 0 1
37266: PUSH
37267: LD_INT 22
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 21
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 3
37289: PUSH
37290: LD_INT 24
37292: PUSH
37293: LD_INT 500
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 69
37313: PUSH
37314: FOR_IN
37315: IFFALSE 37348
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37317: LD_VAR 0 1
37321: PPUSH
37322: LD_EXP 37
37326: PPUSH
37327: CALL_OW 250
37331: PPUSH
37332: LD_EXP 37
37336: PPUSH
37337: CALL_OW 251
37341: PPUSH
37342: CALL_OW 111
37346: GO 37314
37348: POP
37349: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37350: LD_INT 22
37352: PUSH
37353: LD_INT 6
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 21
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 24
37372: PUSH
37373: LD_INT 250
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: LIST
37384: PPUSH
37385: CALL_OW 69
37389: PUSH
37390: LD_INT 5
37392: LESS
37393: IFFALSE 37125
// Video ( false ) ;
37395: LD_INT 0
37397: PPUSH
37398: CALL 6872 0 1
// ChangeMissionObjectives ( M1 ) ;
37402: LD_STRING M1
37404: PPUSH
37405: CALL_OW 337
// SaveForQuickRestart ;
37409: CALL_OW 22
// startCutscene = 0 ;
37413: LD_ADDR_EXP 38
37417: PUSH
37418: LD_INT 0
37420: ST_TO_ADDR
// end ;
37421: PPOPN 1
37423: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37424: LD_EXP 38
37428: IFFALSE 37519
37430: GO 37432
37432: DISABLE
37433: LD_INT 0
37435: PPUSH
37436: PPUSH
// begin enable ;
37437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37438: LD_ADDR_VAR 0 1
37442: PUSH
37443: LD_INT 22
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 21
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: LD_INT 24
37468: PUSH
37469: LD_INT 700
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: PPUSH
37485: CALL_OW 69
37489: ST_TO_ADDR
// for i in tmp do
37490: LD_ADDR_VAR 0 2
37494: PUSH
37495: LD_VAR 0 1
37499: PUSH
37500: FOR_IN
37501: IFFALSE 37517
// SetLives ( i , 700 ) ;
37503: LD_VAR 0 2
37507: PPUSH
37508: LD_INT 700
37510: PPUSH
37511: CALL_OW 234
37515: GO 37500
37517: POP
37518: POP
// end ;
37519: PPOPN 2
37521: END
// every 1 1$0 do
37522: GO 37524
37524: DISABLE
// begin PrepareSupportFromDelta ;
37525: CALL 3713 0 0
// firstAttack = 1 ;
37529: LD_ADDR_EXP 33
37533: PUSH
37534: LD_INT 1
37536: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37537: LD_EXP 8
37541: PPUSH
37542: CALL_OW 302
37546: IFFALSE 37562
// begin Say ( Gladstone , D2-Glad-1 ) ;
37548: LD_EXP 8
37552: PPUSH
37553: LD_STRING D2-Glad-1
37555: PPUSH
37556: CALL_OW 88
// end else
37560: GO 37670
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37562: LD_INT 4
37564: PPUSH
37565: LD_INT 22
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 21
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: LD_INT 25
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 25
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 25
37610: PUSH
37611: LD_INT 3
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 25
37620: PUSH
37621: LD_INT 4
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: PPUSH
37640: CALL_OW 70
37644: PUSH
37645: LD_EXP 15
37649: PUSH
37650: LD_EXP 14
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: DIFF
37659: PPUSH
37660: LD_STRING D2-Sol1-1
37662: PPUSH
37663: LD_STRING D2-FSol1-1
37665: PPUSH
37666: CALL 6900 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37670: LD_EXP 3
37674: PPUSH
37675: CALL_OW 302
37679: PUSH
37680: LD_EXP 12
37684: PUSH
37685: LD_INT 1
37687: EQUAL
37688: AND
37689: IFFALSE 37703
// Say ( Donaldson , D2-Don-1 ) ;
37691: LD_EXP 3
37695: PPUSH
37696: LD_STRING D2-Don-1
37698: PPUSH
37699: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37703: LD_EXP 2
37707: PPUSH
37708: CALL_OW 302
37712: PUSH
37713: LD_EXP 12
37717: PUSH
37718: LD_INT 2
37720: EQUAL
37721: AND
37722: IFFALSE 37736
// Say ( Brown , D2-Brown-1 ) ;
37724: LD_EXP 2
37728: PPUSH
37729: LD_STRING D2-Brown-1
37731: PPUSH
37732: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37736: LD_EXP 13
37740: PPUSH
37741: CALL_OW 302
37745: PUSH
37746: LD_EXP 12
37750: PUSH
37751: LD_INT 3
37753: EQUAL
37754: AND
37755: IFFALSE 37769
// Say ( Houten , D2-VanH-1 ) ;
37757: LD_EXP 13
37761: PPUSH
37762: LD_STRING D2-VanH-1
37764: PPUSH
37765: CALL_OW 88
// end ;
37769: END
// every 0 0$1 do
37770: GO 37772
37772: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37773: LD_STRING 07_time
37775: PPUSH
37776: LD_INT 12600
37778: PPUSH
37779: CALL_OW 30
37783: PUSH
37784: LD_INT 3
37786: DIV
37787: PPUSH
37788: CALL_OW 67
// PrepareMacmillanSquad ;
37792: CALL 4375 0 0
// CenterNowOnUnits ( JMM ) ;
37796: LD_EXP 1
37800: PPUSH
37801: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37805: LD_EXP 1
37809: PPUSH
37810: LD_STRING D3-JMM-1
37812: PPUSH
37813: CALL_OW 88
// JMMArrive = 1 ;
37817: LD_ADDR_EXP 39
37821: PUSH
37822: LD_INT 1
37824: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37825: LD_EXP 3
37829: PPUSH
37830: CALL_OW 302
37834: PUSH
37835: LD_EXP 12
37839: PUSH
37840: LD_INT 1
37842: EQUAL
37843: AND
37844: IFFALSE 37860
// begin Say ( Donaldson , D3-Don-1 ) ;
37846: LD_EXP 3
37850: PPUSH
37851: LD_STRING D3-Don-1
37853: PPUSH
37854: CALL_OW 88
// end else
37858: GO 37912
// begin if gammaCommander = 1 then
37860: LD_EXP 12
37864: PUSH
37865: LD_INT 1
37867: EQUAL
37868: IFFALSE 37912
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
37870: LD_EXP 11
37874: PPUSH
37875: LD_INT 26
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PPUSH
37885: CALL_OW 72
37889: PPUSH
37890: LD_STRING D3-Sol1-1
37892: PPUSH
37893: LD_STRING D3-Sol1-1
37895: PPUSH
37896: CALL 6900 0 3
// Say ( JMM , D3-JMM-2 ) ;
37900: LD_EXP 1
37904: PPUSH
37905: LD_STRING D3-JMM-2
37907: PPUSH
37908: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
37912: LD_EXP 2
37916: PPUSH
37917: CALL_OW 302
37921: PUSH
37922: LD_EXP 12
37926: PUSH
37927: LD_INT 2
37929: EQUAL
37930: AND
37931: IFFALSE 37947
// begin Say ( Brown , D3-Brown-1 ) ;
37933: LD_EXP 2
37937: PPUSH
37938: LD_STRING D3-Brown-1
37940: PPUSH
37941: CALL_OW 88
// end else
37945: GO 37999
// begin if gammaCommander = 2 then
37947: LD_EXP 12
37951: PUSH
37952: LD_INT 2
37954: EQUAL
37955: IFFALSE 37999
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
37957: LD_EXP 11
37961: PPUSH
37962: LD_INT 26
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PPUSH
37972: CALL_OW 72
37976: PPUSH
37977: LD_STRING D3-Sol1-1a
37979: PPUSH
37980: LD_STRING D3-Sol1-1a
37982: PPUSH
37983: CALL 6900 0 3
// Say ( JMM , D3-JMM-2 ) ;
37987: LD_EXP 1
37991: PPUSH
37992: LD_STRING D3-JMM-2
37994: PPUSH
37995: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
37999: LD_EXP 13
38003: PPUSH
38004: CALL_OW 302
38008: PUSH
38009: LD_EXP 12
38013: PUSH
38014: LD_INT 3
38016: EQUAL
38017: AND
38018: IFFALSE 38034
// begin Say ( Houten , D3-VanH-1 ) ;
38020: LD_EXP 13
38024: PPUSH
38025: LD_STRING D3-VanH-1
38027: PPUSH
38028: CALL_OW 88
// end else
38032: GO 38086
// begin if gammaCommander = 3 then
38034: LD_EXP 12
38038: PUSH
38039: LD_INT 3
38041: EQUAL
38042: IFFALSE 38086
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38044: LD_EXP 11
38048: PPUSH
38049: LD_INT 26
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PPUSH
38059: CALL_OW 72
38063: PPUSH
38064: LD_STRING D3-Sol1-1b
38066: PPUSH
38067: LD_STRING D3-Sol1-1b
38069: PPUSH
38070: CALL 6900 0 3
// Say ( JMM , D3-JMM-2 ) ;
38074: LD_EXP 1
38078: PPUSH
38079: LD_STRING D3-JMM-2
38081: PPUSH
38082: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38086: LD_EXP 15
38090: PPUSH
38091: CALL_OW 302
38095: IFFALSE 38123
// begin Say ( Joan , D3a-Joan-1 ) ;
38097: LD_EXP 15
38101: PPUSH
38102: LD_STRING D3a-Joan-1
38104: PPUSH
38105: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38109: LD_EXP 1
38113: PPUSH
38114: LD_STRING D3a-JMM-1
38116: PPUSH
38117: CALL_OW 88
// end else
38121: GO 38465
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38123: LD_STRING 06_JoanStatus_1
38125: PPUSH
38126: LD_INT 0
38128: PPUSH
38129: CALL_OW 30
38133: PUSH
38134: LD_INT 1
38136: EQUAL
38137: IFFALSE 38465
// begin Say ( JMM , D3b-JMM-1 ) ;
38139: LD_EXP 1
38143: PPUSH
38144: LD_STRING D3b-JMM-1
38146: PPUSH
38147: CALL_OW 88
// if gammaCommander = 1 then
38151: LD_EXP 12
38155: PUSH
38156: LD_INT 1
38158: EQUAL
38159: IFFALSE 38216
// if IsOK ( Donaldson ) then
38161: LD_EXP 3
38165: PPUSH
38166: CALL_OW 302
38170: IFFALSE 38186
// Say ( Donaldson , D3b-Don-1 ) else
38172: LD_EXP 3
38176: PPUSH
38177: LD_STRING D3b-Don-1
38179: PPUSH
38180: CALL_OW 88
38184: GO 38216
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38186: LD_EXP 11
38190: PPUSH
38191: LD_INT 26
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PPUSH
38201: CALL_OW 72
38205: PPUSH
38206: LD_STRING D3b-Sol1-1
38208: PPUSH
38209: LD_STRING D3b-Sol1-1
38211: PPUSH
38212: CALL 6900 0 3
// if gammaCommander = 2 then
38216: LD_EXP 12
38220: PUSH
38221: LD_INT 2
38223: EQUAL
38224: IFFALSE 38281
// if IsOk ( Brown ) then
38226: LD_EXP 2
38230: PPUSH
38231: CALL_OW 302
38235: IFFALSE 38251
// Say ( Brown , D3b-Brown-1 ) else
38237: LD_EXP 2
38241: PPUSH
38242: LD_STRING D3b-Brown-1
38244: PPUSH
38245: CALL_OW 88
38249: GO 38281
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38251: LD_EXP 11
38255: PPUSH
38256: LD_INT 26
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PPUSH
38266: CALL_OW 72
38270: PPUSH
38271: LD_STRING D3b-Sol1-1
38273: PPUSH
38274: LD_STRING D3b-Sol1-1
38276: PPUSH
38277: CALL 6900 0 3
// if gammaCommander = 3 then
38281: LD_EXP 12
38285: PUSH
38286: LD_INT 3
38288: EQUAL
38289: IFFALSE 38346
// if IsOk ( Houten ) then
38291: LD_EXP 13
38295: PPUSH
38296: CALL_OW 302
38300: IFFALSE 38316
// Say ( Houten , D3b-VanH-1 ) else
38302: LD_EXP 13
38306: PPUSH
38307: LD_STRING D3b-VanH-1
38309: PPUSH
38310: CALL_OW 88
38314: GO 38346
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38316: LD_EXP 11
38320: PPUSH
38321: LD_INT 26
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PPUSH
38331: CALL_OW 72
38335: PPUSH
38336: LD_STRING D3b-Sol1-1
38338: PPUSH
38339: LD_STRING D3b-Sol1-1
38341: PPUSH
38342: CALL 6900 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38346: LD_EXP 11
38350: PPUSH
38351: LD_INT 26
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PPUSH
38361: CALL_OW 72
38365: PUSH
38366: LD_EXP 12
38370: PUSH
38371: LD_INT 1
38373: EQUAL
38374: PUSH
38375: LD_EXP 3
38379: PPUSH
38380: CALL_OW 302
38384: AND
38385: OR
38386: PUSH
38387: LD_EXP 12
38391: PUSH
38392: LD_INT 2
38394: EQUAL
38395: PUSH
38396: LD_EXP 2
38400: PPUSH
38401: CALL_OW 302
38405: AND
38406: OR
38407: PUSH
38408: LD_EXP 12
38412: PUSH
38413: LD_INT 3
38415: EQUAL
38416: PUSH
38417: LD_EXP 13
38421: PPUSH
38422: CALL_OW 302
38426: AND
38427: OR
38428: IFFALSE 38442
// Say ( JMM , D3b-JMM-2 ) ;
38430: LD_EXP 1
38434: PPUSH
38435: LD_STRING D3b-JMM-2
38437: PPUSH
38438: CALL_OW 88
// if IsOK ( Lisa ) then
38442: LD_EXP 6
38446: PPUSH
38447: CALL_OW 302
38451: IFFALSE 38465
// Say ( Lisa , D3b-Lisa-2 ) ;
38453: LD_EXP 6
38457: PPUSH
38458: LD_STRING D3b-Lisa-2
38460: PPUSH
38461: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38465: LD_INT 22
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 21
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 26
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 2
38497: PUSH
38498: LD_INT 25
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 25
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 25
38520: PUSH
38521: LD_INT 3
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 25
38530: PUSH
38531: LD_INT 4
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 69
38555: PUSH
38556: LD_EXP 1
38560: PUSH
38561: LD_EXP 2
38565: PUSH
38566: LD_EXP 3
38570: PUSH
38571: LD_EXP 4
38575: PUSH
38576: LD_EXP 5
38580: PUSH
38581: LD_EXP 6
38585: PUSH
38586: LD_EXP 7
38590: PUSH
38591: LD_EXP 8
38595: PUSH
38596: LD_EXP 9
38600: PUSH
38601: LD_EXP 10
38605: PUSH
38606: LD_EXP 15
38610: PUSH
38611: LD_EXP 14
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: DIFF
38630: PPUSH
38631: LD_STRING DCa-Sol1-1
38633: PPUSH
38634: LD_STRING DCa-Sol1-1
38636: PPUSH
38637: CALL 6900 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38641: LD_EXP 1
38645: PPUSH
38646: LD_STRING DCb-JMM-1
38648: PPUSH
38649: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38653: LD_INT 22
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 21
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 26
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: LD_INT 25
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 25
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 25
38708: PUSH
38709: LD_INT 3
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 25
38718: PUSH
38719: LD_INT 4
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: PPUSH
38739: CALL_OW 69
38743: PUSH
38744: LD_EXP 1
38748: PUSH
38749: LD_EXP 2
38753: PUSH
38754: LD_EXP 3
38758: PUSH
38759: LD_EXP 4
38763: PUSH
38764: LD_EXP 5
38768: PUSH
38769: LD_EXP 6
38773: PUSH
38774: LD_EXP 7
38778: PUSH
38779: LD_EXP 8
38783: PUSH
38784: LD_EXP 9
38788: PUSH
38789: LD_EXP 10
38793: PUSH
38794: LD_EXP 15
38798: PUSH
38799: LD_EXP 14
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: DIFF
38818: PPUSH
38819: LD_STRING DCb-Sol1-1
38821: PPUSH
38822: LD_STRING DCb-Sol1-1
38824: PPUSH
38825: CALL 6900 0 3
// Say ( JMM , DCb-JMM-2 ) ;
38829: LD_EXP 1
38833: PPUSH
38834: LD_STRING DCb-JMM-2
38836: PPUSH
38837: CALL_OW 88
// secondAttack = 1 ;
38841: LD_ADDR_EXP 34
38845: PUSH
38846: LD_INT 1
38848: ST_TO_ADDR
// end ;
38849: END
// every 0 0$01 trigger JMMArrive = 1 do
38850: LD_EXP 39
38854: PUSH
38855: LD_INT 1
38857: EQUAL
38858: IFFALSE 38938
38860: GO 38862
38862: DISABLE
// begin wait ( 3 3$0 ) ;
38863: LD_INT 6300
38865: PPUSH
38866: CALL_OW 67
// DialogueOn ;
38870: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
38874: LD_EXP 23
38878: PPUSH
38879: LD_STRING D4-Pow-1
38881: PPUSH
38882: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
38886: LD_EXP 1
38890: PPUSH
38891: LD_STRING D4-JMM-1
38893: PPUSH
38894: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
38898: LD_EXP 23
38902: PPUSH
38903: LD_STRING D4-Pow-2
38905: PPUSH
38906: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
38910: LD_EXP 1
38914: PPUSH
38915: LD_STRING D4-JMM-2
38917: PPUSH
38918: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
38922: LD_EXP 23
38926: PPUSH
38927: LD_STRING D4-Pow-3
38929: PPUSH
38930: CALL_OW 94
// DialogueOff ;
38934: CALL_OW 7
// end ;
38938: END
// every 0 0$01 trigger JMMArrive = 1 do
38939: LD_EXP 39
38943: PUSH
38944: LD_INT 1
38946: EQUAL
38947: IFFALSE 38979
38949: GO 38951
38951: DISABLE
// begin wait ( 8 8$0 ) ;
38952: LD_INT 16800
38954: PPUSH
38955: CALL_OW 67
// DialogueOn ;
38959: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
38963: LD_EXP 23
38967: PPUSH
38968: LD_STRING D4a-Pow-1
38970: PPUSH
38971: CALL_OW 94
// DialogueOff ;
38975: CALL_OW 7
// end ;
38979: END
// every 0 0$01 trigger JMMArrive = 1 do
38980: LD_EXP 39
38984: PUSH
38985: LD_INT 1
38987: EQUAL
38988: IFFALSE 39033
38990: GO 38992
38992: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
38993: LD_INT 21000
38995: PUSH
38996: LD_INT 25200
38998: PUSH
38999: LD_INT 31500
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: PUSH
39007: LD_OWVAR 67
39011: ARRAY
39012: PPUSH
39013: CALL_OW 67
// PrepareSikorsky ;
39017: CALL 5456 0 0
// SikorskyArrive = 1 ;
39021: LD_ADDR_EXP 18
39025: PUSH
39026: LD_INT 1
39028: ST_TO_ADDR
// PrepareSikorskyArmy ;
39029: CALL 5596 0 0
// end ;
39033: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39034: LD_EXP 17
39038: PPUSH
39039: LD_INT 5
39041: PPUSH
39042: CALL_OW 308
39046: IFFALSE 39238
39048: GO 39050
39050: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39051: LD_EXP 17
39055: PPUSH
39056: CALL_OW 87
// DialogueOn ;
39060: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39064: LD_EXP 16
39068: PPUSH
39069: LD_STRING D5-Sik-1
39071: PPUSH
39072: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39076: LD_EXP 1
39080: PPUSH
39081: LD_STRING D5-JMM-1a
39083: PPUSH
39084: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39088: LD_EXP 16
39092: PPUSH
39093: LD_STRING D5-Sik-2
39095: PPUSH
39096: CALL_OW 88
// case query ( QSikorski ) of 1 :
39100: LD_STRING QSikorski
39102: PPUSH
39103: CALL_OW 97
39107: PUSH
39108: LD_INT 1
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39116
39114: GO 39139
39116: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39117: LD_EXP 16
39121: PPUSH
39122: LD_STRING D5a-Sik-1
39124: PPUSH
39125: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39129: LD_ADDR_EXP 19
39133: PUSH
39134: LD_INT 2100
39136: ST_TO_ADDR
// end ; 2 :
39137: GO 39226
39139: LD_INT 2
39141: DOUBLE
39142: EQUAL
39143: IFTRUE 39147
39145: GO 39170
39147: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39148: LD_EXP 16
39152: PPUSH
39153: LD_STRING D5b-Sik-1
39155: PPUSH
39156: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39160: LD_ADDR_EXP 19
39164: PUSH
39165: LD_INT 10500
39167: ST_TO_ADDR
// end ; 3 :
39168: GO 39226
39170: LD_INT 3
39172: DOUBLE
39173: EQUAL
39174: IFTRUE 39178
39176: GO 39225
39178: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39179: LD_EXP 16
39183: PPUSH
39184: LD_STRING D5c-Sik-1
39186: PPUSH
39187: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39191: LD_EXP 1
39195: PPUSH
39196: LD_STRING D5c-JMM-1
39198: PPUSH
39199: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39203: LD_EXP 16
39207: PPUSH
39208: LD_STRING D5c-Sik-2
39210: PPUSH
39211: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39215: LD_ADDR_EXP 19
39219: PUSH
39220: LD_INT 10500
39222: ST_TO_ADDR
// end ; end ;
39223: GO 39226
39225: POP
// DialogueOff ;
39226: CALL_OW 7
// timerStatus = 1 ;
39230: LD_ADDR_EXP 35
39234: PUSH
39235: LD_INT 1
39237: ST_TO_ADDR
// end ;
39238: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39239: LD_EXP 19
39243: PUSH
39244: LD_INT 35
39246: LESS
39247: IFFALSE 39295
39249: GO 39251
39251: DISABLE
// begin timerStatus = 0 ;
39252: LD_ADDR_EXP 35
39256: PUSH
39257: LD_INT 0
39259: ST_TO_ADDR
// DialogueOn ;
39260: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39264: LD_EXP 16
39268: PPUSH
39269: LD_STRING D6-Sik-1
39271: PPUSH
39272: CALL_OW 88
// DialogueOff ;
39276: CALL_OW 7
// SikorskyAI = 1 ;
39280: LD_ADDR_EXP 20
39284: PUSH
39285: LD_INT 1
39287: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39288: LD_STRING M2
39290: PPUSH
39291: CALL_OW 337
// end ;
39295: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39296: LD_EXP 17
39300: PPUSH
39301: LD_INT 18
39303: PPUSH
39304: CALL_OW 308
39308: IFFALSE 39392
39310: GO 39312
39312: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39313: LD_EXP 16
39317: PPUSH
39318: LD_STRING D7-Sik-1
39320: PPUSH
39321: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39325: LD_EXP 1
39329: PPUSH
39330: LD_INT 24
39332: PPUSH
39333: CALL_OW 308
39337: PUSH
39338: LD_EXP 1
39342: PPUSH
39343: CALL_OW 310
39347: OR
39348: IFFALSE 39372
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39350: LD_EXP 16
39354: PPUSH
39355: LD_STRING D7a-Sik-1
39357: PPUSH
39358: CALL_OW 88
// SikorskyStatus = 1 ;
39362: LD_ADDR_EXP 21
39366: PUSH
39367: LD_INT 1
39369: ST_TO_ADDR
// end else
39370: GO 39392
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39372: LD_EXP 16
39376: PPUSH
39377: LD_STRING D7b-Sik-1
39379: PPUSH
39380: CALL_OW 88
// SikorskyStatus = 2 ;
39384: LD_ADDR_EXP 21
39388: PUSH
39389: LD_INT 2
39391: ST_TO_ADDR
// end ; end ;
39392: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39393: LD_EXP 36
39397: PUSH
39398: LD_INT 1
39400: EQUAL
39401: IFFALSE 39510
39403: GO 39405
39405: DISABLE
39406: LD_INT 0
39408: PPUSH
// begin enable ;
39409: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39410: LD_ADDR_VAR 0 1
39414: PUSH
39415: LD_INT 22
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PPUSH
39425: CALL_OW 69
39429: PUSH
39430: FOR_IN
39431: IFFALSE 39458
// if IsInArea ( i , RussianEscape ) then
39433: LD_VAR 0 1
39437: PPUSH
39438: LD_INT 22
39440: PPUSH
39441: CALL_OW 308
39445: IFFALSE 39456
// RemoveUnit ( i ) ;
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 64
39456: GO 39430
39458: POP
39459: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39460: LD_ADDR_VAR 0 1
39464: PUSH
39465: LD_INT 22
39467: PUSH
39468: LD_INT 6
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PPUSH
39475: CALL_OW 69
39479: PUSH
39480: FOR_IN
39481: IFFALSE 39508
// if IsInArea ( i , RussianEscape ) then
39483: LD_VAR 0 1
39487: PPUSH
39488: LD_INT 22
39490: PPUSH
39491: CALL_OW 308
39495: IFFALSE 39506
// RemoveUnit ( i ) ;
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 64
39506: GO 39480
39508: POP
39509: POP
// end ; end_of_file
39510: PPOPN 1
39512: END
// on BuildingComplete ( building ) do var tmp , un ;
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
// begin if GetSide ( building ) = 3 then
39517: LD_VAR 0 1
39521: PPUSH
39522: CALL_OW 255
39526: PUSH
39527: LD_INT 3
39529: EQUAL
39530: IFFALSE 40017
// begin if GetBType ( building ) = b_depot then
39532: LD_VAR 0 1
39536: PPUSH
39537: CALL_OW 266
39541: PUSH
39542: LD_INT 0
39544: EQUAL
39545: IFFALSE 39613
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39547: LD_VAR 0 1
39551: PPUSH
39552: CALL_OW 274
39556: PPUSH
39557: LD_INT 1
39559: PPUSH
39560: LD_INT 5000
39562: PPUSH
39563: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 274
39576: PPUSH
39577: LD_INT 2
39579: PPUSH
39580: LD_INT 5000
39582: PPUSH
39583: CALL_OW 277
// SetBName ( building , konev ) ;
39587: LD_VAR 0 1
39591: PPUSH
39592: LD_STRING konev
39594: PPUSH
39595: CALL_OW 500
// ruDepot = building ;
39599: LD_ADDR_EXP 28
39603: PUSH
39604: LD_VAR 0 1
39608: ST_TO_ADDR
// BuildRussianBase ;
39609: CALL 7505 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39613: LD_VAR 0 1
39617: PPUSH
39618: CALL_OW 266
39622: PUSH
39623: LD_INT 0
39625: EQUAL
39626: PUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: CALL_OW 266
39636: PUSH
39637: LD_INT 2
39639: EQUAL
39640: OR
39641: PUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 266
39651: PUSH
39652: LD_INT 4
39654: EQUAL
39655: OR
39656: IFFALSE 39667
// ComUpgrade ( building ) ;
39658: LD_VAR 0 1
39662: PPUSH
39663: CALL_OW 146
// if GetBType ( building ) = b_lab then
39667: LD_VAR 0 1
39671: PPUSH
39672: CALL_OW 266
39676: PUSH
39677: LD_INT 6
39679: EQUAL
39680: IFFALSE 39731
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39682: LD_VAR 0 1
39686: PPUSH
39687: LD_INT 10
39689: PPUSH
39690: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39694: LD_VAR 0 1
39698: PPUSH
39699: LD_INT 12
39701: PPUSH
39702: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39706: LD_INT 3
39708: PPUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: LD_INT 3
39716: PPUSH
39717: CALL 8060 0 3
// ruLab = building ;
39721: LD_ADDR_EXP 29
39725: PUSH
39726: LD_VAR 0 1
39730: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39731: LD_VAR 0 1
39735: PPUSH
39736: CALL_OW 266
39740: PUSH
39741: LD_INT 32
39743: EQUAL
39744: IFFALSE 39862
// begin uc_side = 3 ;
39746: LD_ADDR_OWVAR 20
39750: PUSH
39751: LD_INT 3
39753: ST_TO_ADDR
// uc_nation = 3 ;
39754: LD_ADDR_OWVAR 21
39758: PUSH
39759: LD_INT 3
39761: ST_TO_ADDR
// hc_gallery =  ;
39762: LD_ADDR_OWVAR 33
39766: PUSH
39767: LD_STRING 
39769: ST_TO_ADDR
// hc_name =  ;
39770: LD_ADDR_OWVAR 26
39774: PUSH
39775: LD_STRING 
39777: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39778: LD_INT 0
39780: PPUSH
39781: LD_INT 1
39783: PPUSH
39784: LD_EXP 25
39788: PPUSH
39789: LD_EXP 26
39793: PPUSH
39794: CALL_OW 12
39798: PPUSH
39799: CALL_OW 380
// un = CreateHuman ;
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: CALL_OW 44
39812: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39813: LD_VAR 0 3
39817: PPUSH
39818: LD_VAR 0 1
39822: PPUSH
39823: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39827: LD_VAR 0 1
39831: PPUSH
39832: LD_INT 43
39834: PUSH
39835: LD_INT 44
39837: PUSH
39838: LD_INT 46
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PPUSH
39849: LD_INT 3
39851: PPUSH
39852: CALL_OW 12
39856: ARRAY
39857: PPUSH
39858: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 266
39871: PUSH
39872: LD_INT 33
39874: EQUAL
39875: IFFALSE 39912
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39877: LD_VAR 0 1
39881: PPUSH
39882: LD_INT 43
39884: PUSH
39885: LD_INT 44
39887: PUSH
39888: LD_INT 46
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PPUSH
39899: LD_INT 3
39901: PPUSH
39902: CALL_OW 12
39906: ARRAY
39907: PPUSH
39908: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
39912: LD_VAR 0 1
39916: PPUSH
39917: CALL_OW 266
39921: PUSH
39922: LD_INT 24
39924: EQUAL
39925: IFFALSE 39935
// russianAI = 1 ;
39927: LD_ADDR_EXP 27
39931: PUSH
39932: LD_INT 1
39934: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
39935: LD_EXP 31
39939: PUSH
39940: LD_INT 0
39942: GREATER
39943: IFFALSE 40017
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39945: LD_ADDR_EXP 31
39949: PUSH
39950: LD_EXP 31
39954: PPUSH
39955: LD_INT 1
39957: PPUSH
39958: CALL_OW 3
39962: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39963: LD_ADDR_EXP 31
39967: PUSH
39968: LD_EXP 31
39972: PPUSH
39973: LD_INT 1
39975: PPUSH
39976: CALL_OW 3
39980: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39981: LD_ADDR_EXP 31
39985: PUSH
39986: LD_EXP 31
39990: PPUSH
39991: LD_INT 1
39993: PPUSH
39994: CALL_OW 3
39998: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39999: LD_ADDR_EXP 31
40003: PUSH
40004: LD_EXP 31
40008: PPUSH
40009: LD_INT 1
40011: PPUSH
40012: CALL_OW 3
40016: ST_TO_ADDR
// end ; end ; end ;
40017: PPOPN 3
40019: END
// on UpgradeComplete ( building ) do var i ;
40020: LD_INT 0
40022: PPUSH
// begin if GetSide ( building ) = 3 then
40023: LD_VAR 0 1
40027: PPUSH
40028: CALL_OW 255
40032: PUSH
40033: LD_INT 3
40035: EQUAL
40036: IFFALSE 40217
// begin if GetBType ( building ) = b_factory then
40038: LD_VAR 0 1
40042: PPUSH
40043: CALL_OW 266
40047: PUSH
40048: LD_INT 3
40050: EQUAL
40051: IFFALSE 40118
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40053: LD_ADDR_VAR 0 2
40057: PUSH
40058: LD_INT 22
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 25
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PPUSH
40082: CALL_OW 69
40086: PUSH
40087: FOR_IN
40088: IFFALSE 40106
// ComEnterUnit ( i , building ) ;
40090: LD_VAR 0 2
40094: PPUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 120
40104: GO 40087
40106: POP
40107: POP
// ruFab = building ;
40108: LD_ADDR_EXP 30
40112: PUSH
40113: LD_VAR 0 1
40117: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40118: LD_VAR 0 1
40122: PPUSH
40123: CALL_OW 266
40127: PUSH
40128: LD_INT 8
40130: EQUAL
40131: IFFALSE 40188
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40133: LD_ADDR_VAR 0 2
40137: PUSH
40138: LD_INT 22
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 25
40150: PUSH
40151: LD_INT 4
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PPUSH
40162: CALL_OW 69
40166: PUSH
40167: FOR_IN
40168: IFFALSE 40186
// ComEnterUnit ( i , building ) ;
40170: LD_VAR 0 2
40174: PPUSH
40175: LD_VAR 0 1
40179: PPUSH
40180: CALL_OW 120
40184: GO 40167
40186: POP
40187: POP
// if GetBType ( building ) = b_warehouse then
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 266
40197: PUSH
40198: LD_INT 1
40200: EQUAL
40201: IFFALSE 40217
// begin ComEnterUnit ( Borodin , building ) ;
40203: LD_EXP 24
40207: PPUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 120
// end ; end ; end ;
40217: PPOPN 2
40219: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40220: LD_VAR 0 1
40224: PPUSH
40225: CALL_OW 247
40229: PUSH
40230: LD_INT 2
40232: EQUAL
40233: PUSH
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 263
40243: PUSH
40244: LD_INT 3
40246: EQUAL
40247: AND
40248: PUSH
40249: LD_EXP 41
40253: PUSH
40254: LD_INT 0
40256: EQUAL
40257: AND
40258: IFFALSE 40376
// begin varEvent1 = 1 ;
40260: LD_ADDR_EXP 41
40264: PUSH
40265: LD_INT 1
40267: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40277: LD_INT 22
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 21
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 25
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 25
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 25
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 25
40332: PUSH
40333: LD_INT 4
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: PPUSH
40352: CALL_OW 69
40356: PUSH
40357: LD_EXP 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: DIFF
40365: PPUSH
40366: LD_STRING DC-Sol1-1
40368: PPUSH
40369: LD_STRING DC-FSol1-1
40371: PPUSH
40372: CALL 6900 0 3
// end ; end ;
40376: PPOPN 1
40378: END
// on UnitDestroyed ( unit ) do var i ;
40379: LD_INT 0
40381: PPUSH
// begin if GetSide ( unit ) = 3 then
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 255
40391: PUSH
40392: LD_INT 3
40394: EQUAL
40395: IFFALSE 41165
// begin if GetType ( unit ) = unit_building then
40397: LD_VAR 0 1
40401: PPUSH
40402: CALL_OW 247
40406: PUSH
40407: LD_INT 3
40409: EQUAL
40410: IFFALSE 41102
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40412: LD_VAR 0 1
40416: PPUSH
40417: CALL_OW 266
40421: PUSH
40422: LD_INT 31
40424: EQUAL
40425: PUSH
40426: LD_VAR 0 1
40430: PPUSH
40431: CALL_OW 266
40435: PUSH
40436: LD_INT 32
40438: EQUAL
40439: OR
40440: PUSH
40441: LD_VAR 0 1
40445: PPUSH
40446: CALL_OW 266
40450: PUSH
40451: LD_INT 36
40453: EQUAL
40454: OR
40455: PUSH
40456: LD_VAR 0 1
40460: PPUSH
40461: CALL_OW 266
40465: PUSH
40466: LD_INT 0
40468: EQUAL
40469: OR
40470: PUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: CALL_OW 266
40480: PUSH
40481: LD_INT 24
40483: EQUAL
40484: OR
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 266
40495: PUSH
40496: LD_INT 17
40498: EQUAL
40499: OR
40500: PUSH
40501: LD_VAR 0 1
40505: PPUSH
40506: CALL_OW 266
40510: PUSH
40511: LD_INT 25
40513: EQUAL
40514: OR
40515: PUSH
40516: LD_VAR 0 1
40520: PPUSH
40521: CALL_OW 266
40525: PUSH
40526: LD_INT 19
40528: EQUAL
40529: OR
40530: PUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: CALL_OW 266
40540: PUSH
40541: LD_INT 20
40543: EQUAL
40544: OR
40545: PUSH
40546: LD_VAR 0 1
40550: PPUSH
40551: CALL_OW 266
40555: PUSH
40556: LD_INT 18
40558: EQUAL
40559: OR
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 266
40570: PUSH
40571: LD_INT 21
40573: EQUAL
40574: OR
40575: PUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 266
40585: PUSH
40586: LD_INT 23
40588: EQUAL
40589: OR
40590: PUSH
40591: LD_VAR 0 1
40595: PPUSH
40596: CALL_OW 266
40600: PUSH
40601: LD_INT 16
40603: EQUAL
40604: OR
40605: PUSH
40606: LD_VAR 0 1
40610: PPUSH
40611: CALL_OW 266
40615: PUSH
40616: LD_INT 6
40618: EQUAL
40619: OR
40620: PUSH
40621: LD_VAR 0 1
40625: PPUSH
40626: CALL_OW 266
40630: PUSH
40631: LD_INT 29
40633: EQUAL
40634: OR
40635: PUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 266
40645: PUSH
40646: LD_INT 26
40648: EQUAL
40649: OR
40650: PUSH
40651: LD_VAR 0 1
40655: PPUSH
40656: CALL_OW 266
40660: PUSH
40661: LD_INT 30
40663: EQUAL
40664: OR
40665: PUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL_OW 266
40675: PUSH
40676: LD_INT 28
40678: EQUAL
40679: OR
40680: PUSH
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 266
40690: PUSH
40691: LD_INT 27
40693: EQUAL
40694: OR
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 266
40705: PUSH
40706: LD_INT 33
40708: EQUAL
40709: OR
40710: PUSH
40711: LD_VAR 0 1
40715: PPUSH
40716: CALL_OW 266
40720: PUSH
40721: LD_INT 2
40723: EQUAL
40724: OR
40725: PUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: CALL_OW 266
40735: PUSH
40736: LD_INT 4
40738: EQUAL
40739: OR
40740: IFFALSE 40826
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40742: LD_ADDR_EXP 31
40746: PUSH
40747: LD_EXP 31
40751: PUSH
40752: LD_VAR 0 1
40756: PPUSH
40757: CALL_OW 266
40761: ADD
40762: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40763: LD_ADDR_EXP 31
40767: PUSH
40768: LD_EXP 31
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 250
40782: ADD
40783: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40784: LD_ADDR_EXP 31
40788: PUSH
40789: LD_EXP 31
40793: PUSH
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 251
40803: ADD
40804: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40805: LD_ADDR_EXP 31
40809: PUSH
40810: LD_EXP 31
40814: PUSH
40815: LD_VAR 0 1
40819: PPUSH
40820: CALL_OW 254
40824: ADD
40825: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
40826: LD_VAR 0 1
40830: PPUSH
40831: CALL_OW 266
40835: PUSH
40836: LD_INT 1
40838: EQUAL
40839: IFFALSE 40918
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
40841: LD_ADDR_EXP 31
40845: PUSH
40846: LD_EXP 31
40850: PUSH
40851: LD_INT 0
40853: ADD
40854: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40855: LD_ADDR_EXP 31
40859: PUSH
40860: LD_EXP 31
40864: PUSH
40865: LD_VAR 0 1
40869: PPUSH
40870: CALL_OW 250
40874: ADD
40875: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40876: LD_ADDR_EXP 31
40880: PUSH
40881: LD_EXP 31
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 251
40895: ADD
40896: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40897: LD_ADDR_EXP 31
40901: PUSH
40902: LD_EXP 31
40906: PUSH
40907: LD_VAR 0 1
40911: PPUSH
40912: CALL_OW 254
40916: ADD
40917: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 266
40927: PUSH
40928: LD_INT 3
40930: EQUAL
40931: IFFALSE 41010
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
40933: LD_ADDR_EXP 31
40937: PUSH
40938: LD_EXP 31
40942: PUSH
40943: LD_INT 2
40945: ADD
40946: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40947: LD_ADDR_EXP 31
40951: PUSH
40952: LD_EXP 31
40956: PUSH
40957: LD_VAR 0 1
40961: PPUSH
40962: CALL_OW 250
40966: ADD
40967: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40968: LD_ADDR_EXP 31
40972: PUSH
40973: LD_EXP 31
40977: PUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 251
40987: ADD
40988: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40989: LD_ADDR_EXP 31
40993: PUSH
40994: LD_EXP 31
40998: PUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: CALL_OW 254
41008: ADD
41009: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41010: LD_VAR 0 1
41014: PPUSH
41015: CALL_OW 266
41019: PUSH
41020: LD_INT 5
41022: EQUAL
41023: IFFALSE 41102
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41025: LD_ADDR_EXP 31
41029: PUSH
41030: LD_EXP 31
41034: PUSH
41035: LD_INT 4
41037: ADD
41038: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41039: LD_ADDR_EXP 31
41043: PUSH
41044: LD_EXP 31
41048: PUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: CALL_OW 250
41058: ADD
41059: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41060: LD_ADDR_EXP 31
41064: PUSH
41065: LD_EXP 31
41069: PUSH
41070: LD_VAR 0 1
41074: PPUSH
41075: CALL_OW 251
41079: ADD
41080: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41081: LD_ADDR_EXP 31
41085: PUSH
41086: LD_EXP 31
41090: PUSH
41091: LD_VAR 0 1
41095: PPUSH
41096: CALL_OW 254
41100: ADD
41101: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 247
41111: PUSH
41112: LD_INT 1
41114: EQUAL
41115: IFFALSE 41165
// begin for i in defenders_list do
41117: LD_ADDR_VAR 0 2
41121: PUSH
41122: LD_EXP 32
41126: PUSH
41127: FOR_IN
41128: IFFALSE 41163
// if i = unit then
41130: LD_VAR 0 2
41134: PUSH
41135: LD_VAR 0 1
41139: EQUAL
41140: IFFALSE 41161
// defenders_list = defenders_list diff [ unit ] ;
41142: LD_ADDR_EXP 32
41146: PUSH
41147: LD_EXP 32
41151: PUSH
41152: LD_VAR 0 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: DIFF
41160: ST_TO_ADDR
41161: GO 41127
41163: POP
41164: POP
// end ; end ; end ; end_of_file
41165: PPOPN 2
41167: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41168: GO 41170
41170: DISABLE
41171: LD_INT 0
41173: PPUSH
// begin enemyWayX = [ ] ;
41174: LD_ADDR_EXP 45
41178: PUSH
41179: EMPTY
41180: ST_TO_ADDR
// enemyWayY = [ ] ;
41181: LD_ADDR_EXP 46
41185: PUSH
41186: EMPTY
41187: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41188: LD_ADDR_VAR 0 1
41192: PUSH
41193: LD_INT 1
41195: PPUSH
41196: LD_INT 3
41198: PPUSH
41199: CALL_OW 12
41203: ST_TO_ADDR
// if rnd = 1 then
41204: LD_VAR 0 1
41208: PUSH
41209: LD_INT 1
41211: EQUAL
41212: IFFALSE 41252
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41214: LD_ADDR_EXP 45
41218: PUSH
41219: LD_INT 73
41221: PUSH
41222: LD_INT 46
41224: PUSH
41225: LD_INT 29
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41233: LD_ADDR_EXP 46
41237: PUSH
41238: LD_INT 71
41240: PUSH
41241: LD_INT 43
41243: PUSH
41244: LD_INT 29
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// end ; if rnd = 2 then
41252: LD_VAR 0 1
41256: PUSH
41257: LD_INT 2
41259: EQUAL
41260: IFFALSE 41284
// begin enemyWayX = [ 64 ] ;
41262: LD_ADDR_EXP 45
41266: PUSH
41267: LD_INT 64
41269: PUSH
41270: EMPTY
41271: LIST
41272: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41273: LD_ADDR_EXP 46
41277: PUSH
41278: LD_INT 43
41280: PUSH
41281: EMPTY
41282: LIST
41283: ST_TO_ADDR
// end ; if rnd = 3 then
41284: LD_VAR 0 1
41288: PUSH
41289: LD_INT 3
41291: EQUAL
41292: IFFALSE 41316
// begin enemyWayX = [ 80 ] ;
41294: LD_ADDR_EXP 45
41298: PUSH
41299: LD_INT 80
41301: PUSH
41302: EMPTY
41303: LIST
41304: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41305: LD_ADDR_EXP 46
41309: PUSH
41310: LD_INT 28
41312: PUSH
41313: EMPTY
41314: LIST
41315: ST_TO_ADDR
// end ; enable ;
41316: ENABLE
// end ;
41317: PPOPN 1
41319: END
// every 0 0$1 do
41320: GO 41322
41322: DISABLE
// begin enable ;
41323: ENABLE
// if escapeAvalaible = 0 then
41324: LD_EXP 36
41328: PUSH
41329: LD_INT 0
41331: EQUAL
41332: IFFALSE 41344
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41334: LD_INT 3
41336: PPUSH
41337: LD_INT 6
41339: PPUSH
41340: CALL 8301 0 2
// if escapeAvalaible = 0 then
41344: LD_EXP 36
41348: PUSH
41349: LD_INT 0
41351: EQUAL
41352: IFFALSE 41364
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41354: LD_INT 1
41356: PPUSH
41357: LD_INT 24
41359: PPUSH
41360: CALL 8961 0 2
// if russianAI = 1 then
41364: LD_EXP 27
41368: PUSH
41369: LD_INT 1
41371: EQUAL
41372: IFFALSE 41442
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41374: LD_INT 3
41376: PPUSH
41377: LD_INT 7
41379: PPUSH
41380: LD_INT 6
41382: PPUSH
41383: LD_EXP 29
41387: PPUSH
41388: CALL 11399 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41392: LD_INT 3
41394: PPUSH
41395: LD_EXP 28
41399: PPUSH
41400: LD_INT 6
41402: PPUSH
41403: LD_EXP 31
41407: PPUSH
41408: CALL 10993 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41412: LD_INT 3
41414: PPUSH
41415: LD_INT 26
41417: PPUSH
41418: LD_EXP 45
41422: PPUSH
41423: LD_EXP 46
41427: PPUSH
41428: CALL 9861 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41432: LD_INT 3
41434: PPUSH
41435: LD_INT 1
41437: PPUSH
41438: CALL 11943 0 2
// end ; if SikorskyArrive = 1 then
41442: LD_EXP 18
41446: PUSH
41447: LD_INT 1
41449: EQUAL
41450: IFFALSE 41468
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41452: LD_INT 3
41454: PPUSH
41455: LD_INT 10
41457: PPUSH
41458: LD_INT 53
41460: PPUSH
41461: LD_INT 59
41463: PPUSH
41464: CALL 9658 0 4
// end ;
41468: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41469: LD_EXP 27
41473: PUSH
41474: LD_INT 1
41476: EQUAL
41477: IFFALSE 41753
41479: GO 41481
41481: DISABLE
41482: LD_INT 0
41484: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41485: LD_ADDR_VAR 0 1
41489: PUSH
41490: LD_INT 22
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 21
41502: PUSH
41503: LD_INT 3
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 30
41512: PUSH
41513: LD_INT 32
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 35
41528: PUSH
41529: LD_INT 43
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 35
41538: PUSH
41539: LD_INT 44
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 35
41548: PUSH
41549: LD_INT 46
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: PPUSH
41572: CALL_OW 69
41576: PUSH
41577: FOR_IN
41578: IFFALSE 41617
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41580: LD_VAR 0 1
41584: PPUSH
41585: LD_INT 43
41587: PUSH
41588: LD_INT 44
41590: PUSH
41591: LD_INT 46
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PPUSH
41602: LD_INT 3
41604: PPUSH
41605: CALL_OW 12
41609: ARRAY
41610: PPUSH
41611: CALL_OW 431
41615: GO 41577
41617: POP
41618: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41619: LD_ADDR_VAR 0 1
41623: PUSH
41624: LD_INT 22
41626: PUSH
41627: LD_INT 3
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 21
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 30
41646: PUSH
41647: LD_INT 33
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 35
41662: PUSH
41663: LD_INT 43
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 35
41672: PUSH
41673: LD_INT 44
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 35
41682: PUSH
41683: LD_INT 46
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: PPUSH
41706: CALL_OW 69
41710: PUSH
41711: FOR_IN
41712: IFFALSE 41751
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41714: LD_VAR 0 1
41718: PPUSH
41719: LD_INT 43
41721: PUSH
41722: LD_INT 44
41724: PUSH
41725: LD_INT 46
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PPUSH
41736: LD_INT 3
41738: PPUSH
41739: CALL_OW 12
41743: ARRAY
41744: PPUSH
41745: CALL_OW 431
41749: GO 41711
41751: POP
41752: POP
// end ;
41753: PPOPN 1
41755: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41756: LD_EXP 24
41760: PPUSH
41761: CALL_OW 310
41765: NOT
41766: PUSH
41767: LD_EXP 28
41771: PPUSH
41772: CALL_OW 302
41776: AND
41777: PUSH
41778: LD_EXP 28
41782: PPUSH
41783: CALL_OW 255
41787: PUSH
41788: LD_INT 3
41790: EQUAL
41791: AND
41792: IFFALSE 41812
41794: GO 41796
41796: DISABLE
// begin enable ;
41797: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41798: LD_EXP 24
41802: PPUSH
41803: LD_EXP 28
41807: PPUSH
41808: CALL_OW 120
// end ;
41812: END
// every 0 0$1 trigger SikorskyAI = 1 do
41813: LD_EXP 20
41817: PUSH
41818: LD_INT 1
41820: EQUAL
41821: IFFALSE 41856
41823: GO 41825
41825: DISABLE
// begin enable ;
41826: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
41827: LD_INT 4
41829: PPUSH
41830: LD_INT 10
41832: PPUSH
41833: LD_INT 93
41835: PPUSH
41836: LD_INT 93
41838: PPUSH
41839: CALL 9658 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
41843: LD_INT 4
41845: PPUSH
41846: LD_INT 11
41848: PPUSH
41849: LD_INT 3
41851: PPUSH
41852: CALL 16155 0 3
// end ;
41856: END
// every 0 0$1 trigger SikorskyAI = 1 do
41857: LD_EXP 20
41861: PUSH
41862: LD_INT 1
41864: EQUAL
41865: IFFALSE 41877
41867: GO 41869
41869: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
41870: LD_INT 4
41872: PPUSH
41873: CALL 10665 0 1
41877: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
41878: LD_EXP 27
41882: PUSH
41883: LD_INT 1
41885: EQUAL
41886: PUSH
41887: LD_EXP 30
41891: PPUSH
41892: CALL_OW 302
41896: AND
41897: PUSH
41898: LD_EXP 30
41902: PPUSH
41903: CALL_OW 255
41907: PUSH
41908: LD_INT 3
41910: EQUAL
41911: AND
41912: PUSH
41913: LD_INT 22
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 21
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 33
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: PPUSH
41948: CALL_OW 69
41952: PUSH
41953: LD_INT 0
41955: EQUAL
41956: AND
41957: IFFALSE 42191
41959: GO 41961
41961: DISABLE
// begin enable ;
41962: ENABLE
// if Difficulty = 1 then
41963: LD_OWVAR 67
41967: PUSH
41968: LD_INT 1
41970: EQUAL
41971: IFFALSE 42039
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
41973: LD_INT 3
41975: PPUSH
41976: LD_EXP 30
41980: PPUSH
41981: LD_INT 5
41983: PPUSH
41984: LD_INT 8
41986: PPUSH
41987: CALL_OW 12
41991: PPUSH
41992: LD_INT 43
41994: PUSH
41995: LD_INT 43
41997: PUSH
41998: LD_INT 43
42000: PUSH
42001: LD_INT 43
42003: PUSH
42004: LD_INT 44
42006: PUSH
42007: LD_INT 44
42009: PUSH
42010: LD_INT 44
42012: PUSH
42013: LD_INT 46
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: PPUSH
42026: LD_INT 1
42028: PPUSH
42029: LD_INT 3
42031: PPUSH
42032: LD_INT 24
42034: PPUSH
42035: CALL 9504 0 7
// if Difficulty = 2 then
42039: LD_OWVAR 67
42043: PUSH
42044: LD_INT 2
42046: EQUAL
42047: IFFALSE 42115
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42049: LD_INT 3
42051: PPUSH
42052: LD_EXP 30
42056: PPUSH
42057: LD_INT 6
42059: PPUSH
42060: LD_INT 8
42062: PPUSH
42063: CALL_OW 12
42067: PPUSH
42068: LD_INT 43
42070: PUSH
42071: LD_INT 43
42073: PUSH
42074: LD_INT 44
42076: PUSH
42077: LD_INT 44
42079: PUSH
42080: LD_INT 44
42082: PUSH
42083: LD_INT 44
42085: PUSH
42086: LD_INT 46
42088: PUSH
42089: LD_INT 46
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: PPUSH
42102: LD_INT 1
42104: PPUSH
42105: LD_INT 3
42107: PPUSH
42108: LD_INT 24
42110: PPUSH
42111: CALL 9504 0 7
// if Difficulty = 3 then
42115: LD_OWVAR 67
42119: PUSH
42120: LD_INT 3
42122: EQUAL
42123: IFFALSE 42191
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42125: LD_INT 3
42127: PPUSH
42128: LD_EXP 30
42132: PPUSH
42133: LD_INT 7
42135: PPUSH
42136: LD_INT 8
42138: PPUSH
42139: CALL_OW 12
42143: PPUSH
42144: LD_INT 43
42146: PUSH
42147: LD_INT 43
42149: PUSH
42150: LD_INT 44
42152: PUSH
42153: LD_INT 44
42155: PUSH
42156: LD_INT 44
42158: PUSH
42159: LD_INT 46
42161: PUSH
42162: LD_INT 46
42164: PUSH
42165: LD_INT 46
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: PPUSH
42178: LD_INT 1
42180: PPUSH
42181: LD_INT 3
42183: PPUSH
42184: LD_INT 24
42186: PPUSH
42187: CALL 9504 0 7
// end ;
42191: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42192: LD_EXP 38
42196: PUSH
42197: LD_INT 1
42199: EQUAL
42200: IFFALSE 42282
42202: GO 42204
42204: DISABLE
42205: LD_INT 0
42207: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42208: LD_ADDR_VAR 0 1
42212: PUSH
42213: LD_INT 22
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 21
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 3
42235: PUSH
42236: LD_INT 24
42238: PUSH
42239: LD_INT 650
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: PPUSH
42255: CALL_OW 69
42259: PUSH
42260: FOR_IN
42261: IFFALSE 42280
// ComMoveXY ( i , 51 , 12 ) ;
42263: LD_VAR 0 1
42267: PPUSH
42268: LD_INT 51
42270: PPUSH
42271: LD_INT 12
42273: PPUSH
42274: CALL_OW 111
42278: GO 42260
42280: POP
42281: POP
// end ; end_of_file
42282: PPOPN 1
42284: END
// every 3 3$20 trigger firstAttack = 1 do
42285: LD_EXP 33
42289: PUSH
42290: LD_INT 1
42292: EQUAL
42293: IFFALSE 42399
42295: GO 42297
42297: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42298: LD_INT 6
42300: PPUSH
42301: LD_INT 3
42303: PPUSH
42304: LD_INT 5
42306: PPUSH
42307: LD_INT 6
42309: PPUSH
42310: CALL_OW 12
42314: PUSH
42315: LD_INT 5
42317: PPUSH
42318: LD_INT 6
42320: PPUSH
42321: CALL_OW 12
42325: PUSH
42326: LD_INT 5
42328: PPUSH
42329: LD_INT 6
42331: PPUSH
42332: CALL_OW 12
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: PUSH
42342: LD_OWVAR 67
42346: ARRAY
42347: PPUSH
42348: LD_INT 0
42350: PPUSH
42351: LD_INT 0
42353: PPUSH
42354: LD_INT 0
42356: PPUSH
42357: LD_INT 0
42359: PPUSH
42360: LD_EXP 25
42364: PPUSH
42365: LD_EXP 26
42369: PPUSH
42370: CALL_OW 12
42374: PPUSH
42375: LD_INT 16
42377: PPUSH
42378: LD_INT 7
42380: PPUSH
42381: LD_INT 1
42383: PPUSH
42384: LD_INT 1
42386: PPUSH
42387: LD_INT 3
42389: PPUSH
42390: CALL_OW 12
42394: PPUSH
42395: CALL 12173 0 12
42399: END
// every 3 3$40 trigger firstAttack = 1 do
42400: LD_EXP 33
42404: PUSH
42405: LD_INT 1
42407: EQUAL
42408: IFFALSE 42500
42410: GO 42412
42412: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42413: LD_INT 16
42415: PPUSH
42416: LD_INT 6
42418: PPUSH
42419: LD_INT 3
42421: PPUSH
42422: LD_INT 4
42424: PPUSH
42425: CALL_OW 12
42429: PUSH
42430: LD_INT 4
42432: PPUSH
42433: LD_INT 5
42435: PPUSH
42436: CALL_OW 12
42440: PUSH
42441: LD_INT 5
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: PUSH
42449: LD_OWVAR 67
42453: ARRAY
42454: PPUSH
42455: LD_EXP 25
42459: PPUSH
42460: LD_EXP 26
42464: PPUSH
42465: CALL_OW 12
42469: PPUSH
42470: LD_INT 3
42472: PPUSH
42473: LD_INT 1
42475: PPUSH
42476: LD_INT 3
42478: PPUSH
42479: LD_INT 44
42481: PUSH
42482: LD_INT 46
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PPUSH
42489: EMPTY
42490: PPUSH
42491: EMPTY
42492: PPUSH
42493: LD_INT 1
42495: PPUSH
42496: CALL 14466 0 11
42500: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
42501: LD_EXP 33
42505: PUSH
42506: LD_INT 1
42508: EQUAL
42509: PUSH
42510: LD_EXP 39
42514: PUSH
42515: LD_INT 0
42517: EQUAL
42518: AND
42519: IFFALSE 42625
42521: GO 42523
42523: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42524: LD_INT 6
42526: PPUSH
42527: LD_INT 3
42529: PPUSH
42530: LD_INT 5
42532: PPUSH
42533: LD_INT 6
42535: PPUSH
42536: CALL_OW 12
42540: PUSH
42541: LD_INT 5
42543: PPUSH
42544: LD_INT 6
42546: PPUSH
42547: CALL_OW 12
42551: PUSH
42552: LD_INT 5
42554: PPUSH
42555: LD_INT 6
42557: PPUSH
42558: CALL_OW 12
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: PUSH
42568: LD_OWVAR 67
42572: ARRAY
42573: PPUSH
42574: LD_INT 0
42576: PPUSH
42577: LD_INT 0
42579: PPUSH
42580: LD_INT 0
42582: PPUSH
42583: LD_INT 0
42585: PPUSH
42586: LD_EXP 25
42590: PPUSH
42591: LD_EXP 26
42595: PPUSH
42596: CALL_OW 12
42600: PPUSH
42601: LD_INT 16
42603: PPUSH
42604: LD_INT 7
42606: PPUSH
42607: LD_INT 1
42609: PPUSH
42610: LD_INT 1
42612: PPUSH
42613: LD_INT 3
42615: PPUSH
42616: CALL_OW 12
42620: PPUSH
42621: CALL 12173 0 12
42625: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
42626: LD_EXP 33
42630: PUSH
42631: LD_INT 1
42633: EQUAL
42634: PUSH
42635: LD_EXP 39
42639: PUSH
42640: LD_INT 0
42642: EQUAL
42643: AND
42644: IFFALSE 42740
42646: GO 42648
42648: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42649: LD_INT 16
42651: PPUSH
42652: LD_INT 6
42654: PPUSH
42655: LD_INT 5
42657: PPUSH
42658: LD_INT 6
42660: PPUSH
42661: CALL_OW 12
42665: PUSH
42666: LD_INT 6
42668: PPUSH
42669: LD_INT 7
42671: PPUSH
42672: CALL_OW 12
42676: PUSH
42677: LD_INT 7
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: PUSH
42685: LD_OWVAR 67
42689: ARRAY
42690: PPUSH
42691: LD_EXP 25
42695: PPUSH
42696: LD_EXP 26
42700: PPUSH
42701: CALL_OW 12
42705: PPUSH
42706: LD_INT 3
42708: PPUSH
42709: LD_INT 1
42711: PPUSH
42712: LD_INT 3
42714: PPUSH
42715: LD_INT 43
42717: PUSH
42718: LD_INT 44
42720: PUSH
42721: LD_INT 46
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: LIST
42728: PPUSH
42729: EMPTY
42730: PPUSH
42731: EMPTY
42732: PPUSH
42733: LD_INT 1
42735: PPUSH
42736: CALL 14466 0 11
42740: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
42741: LD_EXP 33
42745: PUSH
42746: LD_INT 1
42748: EQUAL
42749: PUSH
42750: LD_EXP 39
42754: PUSH
42755: LD_INT 0
42757: EQUAL
42758: AND
42759: IFFALSE 42835
42761: GO 42763
42763: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42764: LD_INT 16
42766: PPUSH
42767: LD_INT 6
42769: PPUSH
42770: LD_INT 5
42772: PUSH
42773: LD_INT 6
42775: PUSH
42776: LD_INT 7
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: PUSH
42784: LD_OWVAR 67
42788: ARRAY
42789: PPUSH
42790: LD_EXP 25
42794: PPUSH
42795: LD_EXP 26
42799: PPUSH
42800: CALL_OW 12
42804: PPUSH
42805: LD_INT 3
42807: PPUSH
42808: LD_INT 1
42810: PPUSH
42811: LD_INT 3
42813: PPUSH
42814: LD_INT 44
42816: PUSH
42817: LD_INT 46
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PPUSH
42824: EMPTY
42825: PPUSH
42826: EMPTY
42827: PPUSH
42828: LD_INT 1
42830: PPUSH
42831: CALL 14466 0 11
42835: END
// every 1 1$00 trigger secondAttack = 1 do
42836: LD_EXP 34
42840: PUSH
42841: LD_INT 1
42843: EQUAL
42844: IFFALSE 42926
42846: GO 42848
42848: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42849: LD_INT 6
42851: PPUSH
42852: LD_INT 3
42854: PPUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 4
42860: PUSH
42861: LD_INT 5
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: PUSH
42869: LD_OWVAR 67
42873: ARRAY
42874: PPUSH
42875: LD_INT 0
42877: PPUSH
42878: LD_INT 0
42880: PPUSH
42881: LD_INT 0
42883: PPUSH
42884: LD_INT 0
42886: PPUSH
42887: LD_EXP 25
42891: PPUSH
42892: LD_EXP 26
42896: PPUSH
42897: CALL_OW 12
42901: PPUSH
42902: LD_INT 16
42904: PPUSH
42905: LD_INT 7
42907: PPUSH
42908: LD_INT 1
42910: PPUSH
42911: LD_INT 1
42913: PPUSH
42914: LD_INT 3
42916: PPUSH
42917: CALL_OW 12
42921: PPUSH
42922: CALL 12173 0 12
42926: END
// every 1 1$00 trigger secondAttack = 1 do
42927: LD_EXP 34
42931: PUSH
42932: LD_INT 1
42934: EQUAL
42935: IFFALSE 43039
42937: GO 42939
42939: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42940: LD_INT 16
42942: PPUSH
42943: LD_INT 6
42945: PPUSH
42946: LD_INT 5
42948: PPUSH
42949: LD_INT 8
42951: PPUSH
42952: CALL_OW 12
42956: PUSH
42957: LD_INT 6
42959: PPUSH
42960: LD_INT 9
42962: PPUSH
42963: CALL_OW 12
42967: PUSH
42968: LD_INT 7
42970: PPUSH
42971: LD_INT 9
42973: PPUSH
42974: CALL_OW 12
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: LIST
42983: PUSH
42984: LD_OWVAR 67
42988: ARRAY
42989: PPUSH
42990: LD_EXP 25
42994: PPUSH
42995: LD_EXP 26
42999: PPUSH
43000: CALL_OW 12
43004: PPUSH
43005: LD_INT 3
43007: PPUSH
43008: LD_INT 1
43010: PPUSH
43011: LD_INT 3
43013: PPUSH
43014: LD_INT 43
43016: PUSH
43017: LD_INT 44
43019: PUSH
43020: LD_INT 46
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: PPUSH
43028: EMPTY
43029: PPUSH
43030: EMPTY
43031: PPUSH
43032: LD_INT 1
43034: PPUSH
43035: CALL 14466 0 11
43039: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43040: LD_EXP 18
43044: PUSH
43045: LD_INT 0
43047: EQUAL
43048: IFFALSE 43130
43050: GO 43052
43052: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43053: LD_INT 6
43055: PPUSH
43056: LD_INT 3
43058: PPUSH
43059: LD_INT 3
43061: PUSH
43062: LD_INT 4
43064: PUSH
43065: LD_INT 5
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: PUSH
43073: LD_OWVAR 67
43077: ARRAY
43078: PPUSH
43079: LD_INT 0
43081: PPUSH
43082: LD_INT 0
43084: PPUSH
43085: LD_INT 0
43087: PPUSH
43088: LD_INT 0
43090: PPUSH
43091: LD_EXP 25
43095: PPUSH
43096: LD_EXP 26
43100: PPUSH
43101: CALL_OW 12
43105: PPUSH
43106: LD_INT 16
43108: PPUSH
43109: LD_INT 7
43111: PPUSH
43112: LD_INT 1
43114: PPUSH
43115: LD_INT 1
43117: PPUSH
43118: LD_INT 3
43120: PPUSH
43121: CALL_OW 12
43125: PPUSH
43126: CALL 12173 0 12
43130: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43131: LD_EXP 18
43135: PUSH
43136: LD_INT 0
43138: EQUAL
43139: IFFALSE 43239
43141: GO 43143
43143: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43144: LD_INT 16
43146: PPUSH
43147: LD_INT 6
43149: PPUSH
43150: LD_INT 5
43152: PPUSH
43153: LD_INT 8
43155: PPUSH
43156: CALL_OW 12
43160: PUSH
43161: LD_INT 6
43163: PPUSH
43164: LD_INT 9
43166: PPUSH
43167: CALL_OW 12
43171: PUSH
43172: LD_INT 7
43174: PPUSH
43175: LD_INT 9
43177: PPUSH
43178: CALL_OW 12
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: PUSH
43188: LD_OWVAR 67
43192: ARRAY
43193: PPUSH
43194: LD_EXP 25
43198: PPUSH
43199: LD_EXP 26
43203: PPUSH
43204: CALL_OW 12
43208: PPUSH
43209: LD_INT 3
43211: PPUSH
43212: LD_INT 1
43214: PPUSH
43215: LD_INT 3
43217: PPUSH
43218: LD_INT 44
43220: PUSH
43221: LD_INT 46
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PPUSH
43228: EMPTY
43229: PPUSH
43230: EMPTY
43231: PPUSH
43232: LD_INT 1
43234: PPUSH
43235: CALL 14466 0 11
43239: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43240: LD_EXP 18
43244: PUSH
43245: LD_INT 0
43247: EQUAL
43248: IFFALSE 43330
43250: GO 43252
43252: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43253: LD_INT 6
43255: PPUSH
43256: LD_INT 3
43258: PPUSH
43259: LD_INT 3
43261: PUSH
43262: LD_INT 4
43264: PUSH
43265: LD_INT 5
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: PUSH
43273: LD_OWVAR 67
43277: ARRAY
43278: PPUSH
43279: LD_INT 0
43281: PPUSH
43282: LD_INT 0
43284: PPUSH
43285: LD_INT 0
43287: PPUSH
43288: LD_INT 0
43290: PPUSH
43291: LD_EXP 25
43295: PPUSH
43296: LD_EXP 26
43300: PPUSH
43301: CALL_OW 12
43305: PPUSH
43306: LD_INT 16
43308: PPUSH
43309: LD_INT 7
43311: PPUSH
43312: LD_INT 1
43314: PPUSH
43315: LD_INT 1
43317: PPUSH
43318: LD_INT 3
43320: PPUSH
43321: CALL_OW 12
43325: PPUSH
43326: CALL 12173 0 12
43330: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43331: LD_EXP 18
43335: PUSH
43336: LD_INT 0
43338: EQUAL
43339: IFFALSE 43439
43341: GO 43343
43343: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43344: LD_INT 16
43346: PPUSH
43347: LD_INT 6
43349: PPUSH
43350: LD_INT 5
43352: PPUSH
43353: LD_INT 8
43355: PPUSH
43356: CALL_OW 12
43360: PUSH
43361: LD_INT 6
43363: PPUSH
43364: LD_INT 9
43366: PPUSH
43367: CALL_OW 12
43371: PUSH
43372: LD_INT 7
43374: PPUSH
43375: LD_INT 9
43377: PPUSH
43378: CALL_OW 12
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: PUSH
43388: LD_OWVAR 67
43392: ARRAY
43393: PPUSH
43394: LD_EXP 25
43398: PPUSH
43399: LD_EXP 26
43403: PPUSH
43404: CALL_OW 12
43408: PPUSH
43409: LD_INT 3
43411: PPUSH
43412: LD_INT 1
43414: PPUSH
43415: LD_INT 3
43417: PPUSH
43418: LD_INT 44
43420: PUSH
43421: LD_INT 46
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PPUSH
43428: EMPTY
43429: PPUSH
43430: EMPTY
43431: PPUSH
43432: LD_INT 1
43434: PPUSH
43435: CALL 14466 0 11
43439: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43440: LD_EXP 18
43444: PUSH
43445: LD_INT 0
43447: EQUAL
43448: IFFALSE 43530
43450: GO 43452
43452: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43453: LD_INT 6
43455: PPUSH
43456: LD_INT 3
43458: PPUSH
43459: LD_INT 3
43461: PUSH
43462: LD_INT 4
43464: PUSH
43465: LD_INT 5
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: PUSH
43473: LD_OWVAR 67
43477: ARRAY
43478: PPUSH
43479: LD_INT 0
43481: PPUSH
43482: LD_INT 0
43484: PPUSH
43485: LD_INT 0
43487: PPUSH
43488: LD_INT 0
43490: PPUSH
43491: LD_EXP 25
43495: PPUSH
43496: LD_EXP 26
43500: PPUSH
43501: CALL_OW 12
43505: PPUSH
43506: LD_INT 16
43508: PPUSH
43509: LD_INT 7
43511: PPUSH
43512: LD_INT 1
43514: PPUSH
43515: LD_INT 1
43517: PPUSH
43518: LD_INT 3
43520: PPUSH
43521: CALL_OW 12
43525: PPUSH
43526: CALL 12173 0 12
43530: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43531: LD_EXP 18
43535: PUSH
43536: LD_INT 0
43538: EQUAL
43539: IFFALSE 43639
43541: GO 43543
43543: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43544: LD_INT 16
43546: PPUSH
43547: LD_INT 6
43549: PPUSH
43550: LD_INT 5
43552: PPUSH
43553: LD_INT 8
43555: PPUSH
43556: CALL_OW 12
43560: PUSH
43561: LD_INT 6
43563: PPUSH
43564: LD_INT 9
43566: PPUSH
43567: CALL_OW 12
43571: PUSH
43572: LD_INT 7
43574: PPUSH
43575: LD_INT 9
43577: PPUSH
43578: CALL_OW 12
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: PUSH
43588: LD_OWVAR 67
43592: ARRAY
43593: PPUSH
43594: LD_EXP 25
43598: PPUSH
43599: LD_EXP 26
43603: PPUSH
43604: CALL_OW 12
43608: PPUSH
43609: LD_INT 3
43611: PPUSH
43612: LD_INT 1
43614: PPUSH
43615: LD_INT 3
43617: PPUSH
43618: LD_INT 44
43620: PUSH
43621: LD_INT 46
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PPUSH
43628: EMPTY
43629: PPUSH
43630: EMPTY
43631: PPUSH
43632: LD_INT 1
43634: PPUSH
43635: CALL 14466 0 11
43639: END
// every 0 0$1 trigger timerStatus = 1 do
43640: LD_EXP 35
43644: PUSH
43645: LD_INT 1
43647: EQUAL
43648: IFFALSE 43685
43650: GO 43652
43652: DISABLE
// begin enable ;
43653: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43654: LD_ADDR_OWVAR 47
43658: PUSH
43659: LD_STRING #Am08-1
43661: PUSH
43662: LD_EXP 19
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43671: LD_ADDR_EXP 19
43675: PUSH
43676: LD_EXP 19
43680: PUSH
43681: LD_INT 35
43683: MINUS
43684: ST_TO_ADDR
// end ; end_of_file
43685: END
// every 1 1$0 do
43686: GO 43688
43688: DISABLE
// begin if supply <= 13 and supply > 7 then
43689: LD_EXP 40
43693: PUSH
43694: LD_INT 13
43696: LESSEQUAL
43697: PUSH
43698: LD_EXP 40
43702: PUSH
43703: LD_INT 7
43705: GREATER
43706: AND
43707: IFFALSE 43730
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
43709: LD_INT 3
43711: PPUSH
43712: LD_INT 5
43714: PPUSH
43715: CALL_OW 12
43719: PPUSH
43720: LD_INT 5
43722: PPUSH
43723: LD_INT 1
43725: PPUSH
43726: CALL_OW 55
// if supply <= 7 and supply > 4 then
43730: LD_EXP 40
43734: PUSH
43735: LD_INT 7
43737: LESSEQUAL
43738: PUSH
43739: LD_EXP 40
43743: PUSH
43744: LD_INT 4
43746: GREATER
43747: AND
43748: IFFALSE 43771
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
43750: LD_INT 3
43752: PPUSH
43753: LD_INT 5
43755: PPUSH
43756: CALL_OW 12
43760: PPUSH
43761: LD_INT 20
43763: PPUSH
43764: LD_INT 1
43766: PPUSH
43767: CALL_OW 55
// if supply <= 4 and supply > 0 then
43771: LD_EXP 40
43775: PUSH
43776: LD_INT 4
43778: LESSEQUAL
43779: PUSH
43780: LD_EXP 40
43784: PUSH
43785: LD_INT 0
43787: GREATER
43788: AND
43789: IFFALSE 43812
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
43791: LD_INT 3
43793: PPUSH
43794: LD_INT 5
43796: PPUSH
43797: CALL_OW 12
43801: PPUSH
43802: LD_INT 21
43804: PPUSH
43805: LD_INT 1
43807: PPUSH
43808: CALL_OW 55
// if supply > 0 then
43812: LD_EXP 40
43816: PUSH
43817: LD_INT 0
43819: GREATER
43820: IFFALSE 43837
// begin supply = supply - 1 ;
43822: LD_ADDR_EXP 40
43826: PUSH
43827: LD_EXP 40
43831: PUSH
43832: LD_INT 1
43834: MINUS
43835: ST_TO_ADDR
// enable ;
43836: ENABLE
// end ; end ; end_of_file
43837: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
43838: LD_EXP 39
43842: PUSH
43843: LD_INT 1
43845: EQUAL
43846: PUSH
43847: LD_EXP 1
43851: PPUSH
43852: CALL_OW 301
43856: AND
43857: IFFALSE 43869
43859: GO 43861
43861: DISABLE
// YouLost ( JMM ) ;
43862: LD_STRING JMM
43864: PPUSH
43865: CALL_OW 104
43869: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
43870: LD_EXP 18
43874: PUSH
43875: LD_INT 1
43877: EQUAL
43878: PUSH
43879: LD_EXP 16
43883: PPUSH
43884: CALL_OW 301
43888: AND
43889: IFFALSE 43921
43891: GO 43893
43893: DISABLE
// begin DialogueOn ;
43894: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
43898: LD_EXP 23
43902: PPUSH
43903: LD_STRING D8a-Pow-1
43905: PPUSH
43906: CALL_OW 94
// DialogueOff ;
43910: CALL_OW 7
// YouLost ( Dismissed ) ;
43914: LD_STRING Dismissed
43916: PPUSH
43917: CALL_OW 104
// end ;
43921: END
// every 0 0$1 trigger IsDead ( amDepot ) do
43922: LD_EXP 37
43926: PPUSH
43927: CALL_OW 301
43931: IFFALSE 43943
43933: GO 43935
43935: DISABLE
// YouLost ( Destroyed ) ; end_of_file
43936: LD_STRING Destroyed
43938: PPUSH
43939: CALL_OW 104
43943: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
43944: LD_EXP 24
43948: PPUSH
43949: CALL_OW 301
43953: PUSH
43954: LD_INT 22
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 21
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PPUSH
43978: CALL_OW 69
43982: PUSH
43983: LD_INT 14
43985: PUSH
43986: LD_INT 13
43988: PUSH
43989: LD_INT 12
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: PUSH
43997: LD_OWVAR 67
44001: ARRAY
44002: LESS
44003: AND
44004: IFFALSE 44452
44006: GO 44008
44008: DISABLE
44009: LD_INT 0
44011: PPUSH
44012: PPUSH
// begin russianAI = 0 ;
44013: LD_ADDR_EXP 27
44017: PUSH
44018: LD_INT 0
44020: ST_TO_ADDR
// escapeAvalaible = 1 ;
44021: LD_ADDR_EXP 36
44025: PUSH
44026: LD_INT 1
44028: ST_TO_ADDR
// InGameOn ;
44029: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44033: LD_INT 3
44035: PPUSH
44036: LD_INT 1
44038: PPUSH
44039: LD_INT 1
44041: PPUSH
44042: LD_INT 0
44044: PPUSH
44045: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44049: LD_INT 6
44051: PPUSH
44052: LD_INT 1
44054: PPUSH
44055: LD_INT 1
44057: PPUSH
44058: LD_INT 0
44060: PPUSH
44061: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44065: LD_INT 3
44067: PPUSH
44068: LD_INT 1
44070: PPUSH
44071: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44075: LD_INT 97
44077: PPUSH
44078: LD_INT 91
44080: PPUSH
44081: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44085: LD_INT 22
44087: PUSH
44088: LD_INT 3
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 21
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PPUSH
44109: CALL_OW 69
44113: PPUSH
44114: CALL_OW 121
// wait ( 0 0$01 ) ;
44118: LD_INT 35
44120: PPUSH
44121: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44125: LD_INT 22
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 21
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PPUSH
44149: CALL_OW 69
44153: PPUSH
44154: LD_INT 124
44156: PPUSH
44157: LD_INT 98
44159: PPUSH
44160: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44164: LD_INT 22
44166: PUSH
44167: LD_INT 6
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 21
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PPUSH
44188: CALL_OW 69
44192: PPUSH
44193: CALL_OW 121
// wait ( 0 0$01 ) ;
44197: LD_INT 35
44199: PPUSH
44200: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44204: LD_INT 22
44206: PUSH
44207: LD_INT 6
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 21
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PPUSH
44228: CALL_OW 69
44232: PPUSH
44233: LD_INT 124
44235: PPUSH
44236: LD_INT 98
44238: PPUSH
44239: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44243: LD_INT 22
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 21
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: PUSH
44266: LD_INT 54
44268: PUSH
44269: EMPTY
44270: LIST
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: PPUSH
44281: CALL_OW 69
44285: PPUSH
44286: LD_INT 124
44288: PPUSH
44289: LD_INT 98
44291: PPUSH
44292: CALL_OW 114
// wait ( 0 0$4 ) ;
44296: LD_INT 140
44298: PPUSH
44299: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44303: LD_INT 124
44305: PPUSH
44306: LD_INT 98
44308: PPUSH
44309: CALL_OW 84
// if SikorskyStatus = 1 then
44313: LD_EXP 21
44317: PUSH
44318: LD_INT 1
44320: EQUAL
44321: IFFALSE 44335
// begin Say ( Sikorski , D9-Sik-1 ) ;
44323: LD_EXP 16
44327: PPUSH
44328: LD_STRING D9-Sik-1
44330: PPUSH
44331: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44335: LD_EXP 21
44339: PUSH
44340: LD_INT 2
44342: EQUAL
44343: IFFALSE 44364
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44345: LD_EXP 23
44349: PPUSH
44350: LD_STRING D8b-Pow-1
44352: PPUSH
44353: CALL_OW 94
// YouLost ( Dismissed ) ;
44357: LD_STRING Dismissed
44359: PPUSH
44360: CALL_OW 104
// end ; p := 0 0$0 ;
44364: LD_ADDR_VAR 0 2
44368: PUSH
44369: LD_INT 0
44371: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44372: LD_INT 35
44374: PPUSH
44375: CALL_OW 67
// p := p + 0 0$1 ;
44379: LD_ADDR_VAR 0 2
44383: PUSH
44384: LD_VAR 0 2
44388: PUSH
44389: LD_INT 35
44391: PLUS
44392: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44393: LD_INT 23
44395: PUSH
44396: LD_INT 3
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 21
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 24
44415: PUSH
44416: LD_INT 250
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: PPUSH
44428: CALL_OW 69
44432: PUSH
44433: LD_INT 0
44435: EQUAL
44436: PUSH
44437: LD_VAR 0 2
44441: PUSH
44442: LD_INT 245
44444: GREATEREQUAL
44445: OR
44446: IFFALSE 44372
// FinishMission ;
44448: CALL 44455 0 0
// end ;
44452: PPOPN 2
44454: END
// export function FinishMission ; var tmp ; begin
44455: LD_INT 0
44457: PPUSH
44458: PPUSH
// AddMedal ( med1 , 1 ) ;
44459: LD_STRING med1
44461: PPUSH
44462: LD_INT 1
44464: PPUSH
44465: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44469: LD_STRING med2
44471: PPUSH
44472: LD_INT 1
44474: PPUSH
44475: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44479: LD_STRING perfect
44481: PPUSH
44482: LD_INT 1
44484: PPUSH
44485: CALL_OW 101
// GiveMedals ( Main ) ;
44489: LD_STRING Main
44491: PPUSH
44492: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44496: LD_INT 22
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 23
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 21
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 25
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 25
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 25
44551: PUSH
44552: LD_INT 3
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 25
44561: PUSH
44562: LD_INT 4
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: PPUSH
44582: CALL_OW 69
44586: PPUSH
44587: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44591: LD_EXP 1
44595: PPUSH
44596: LD_EXP 42
44600: PUSH
44601: LD_STRING JMM
44603: STR
44604: PPUSH
44605: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44609: LD_EXP 2
44613: PPUSH
44614: LD_EXP 42
44618: PUSH
44619: LD_STRING Brown
44621: STR
44622: PPUSH
44623: CALL 8009 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44627: LD_EXP 3
44631: PPUSH
44632: LD_EXP 42
44636: PUSH
44637: LD_STRING Donaldson
44639: STR
44640: PPUSH
44641: CALL 8009 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44645: LD_EXP 4
44649: PPUSH
44650: LD_EXP 42
44654: PUSH
44655: LD_STRING Bobby
44657: STR
44658: PPUSH
44659: CALL 8009 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44663: LD_EXP 5
44667: PPUSH
44668: LD_EXP 42
44672: PUSH
44673: LD_STRING Cyrus
44675: STR
44676: PPUSH
44677: CALL 8009 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
44681: LD_EXP 6
44685: PPUSH
44686: LD_EXP 42
44690: PUSH
44691: LD_STRING Lisa
44693: STR
44694: PPUSH
44695: CALL 8009 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
44699: LD_EXP 7
44703: PPUSH
44704: LD_EXP 42
44708: PUSH
44709: LD_STRING Frank
44711: STR
44712: PPUSH
44713: CALL 8009 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
44717: LD_EXP 8
44721: PPUSH
44722: LD_EXP 42
44726: PUSH
44727: LD_STRING Gladstone
44729: STR
44730: PPUSH
44731: CALL 8009 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
44735: LD_EXP 9
44739: PPUSH
44740: LD_EXP 42
44744: PUSH
44745: LD_STRING Kikuchi
44747: STR
44748: PPUSH
44749: CALL 8009 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
44753: LD_EXP 14
44757: PPUSH
44758: LD_EXP 42
44762: PUSH
44763: LD_STRING Denis
44765: STR
44766: PPUSH
44767: CALL 8009 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
44771: LD_EXP 15
44775: PPUSH
44776: LD_EXP 42
44780: PUSH
44781: LD_STRING Joan
44783: STR
44784: PPUSH
44785: CALL 8009 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
44789: LD_EXP 10
44793: PPUSH
44794: LD_EXP 42
44798: PUSH
44799: LD_STRING Khatam
44801: STR
44802: PPUSH
44803: CALL 8009 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
44807: LD_EXP 13
44811: PPUSH
44812: LD_EXP 42
44816: PUSH
44817: LD_STRING Houten
44819: STR
44820: PPUSH
44821: CALL 8009 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
44825: LD_INT 50
44827: PUSH
44828: EMPTY
44829: LIST
44830: PUSH
44831: LD_INT 22
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 21
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 25
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 25
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 25
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 25
44886: PUSH
44887: LD_INT 4
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: PPUSH
44907: CALL_OW 69
44911: PUSH
44912: LD_EXP 1
44916: PUSH
44917: LD_EXP 2
44921: PUSH
44922: LD_EXP 3
44926: PUSH
44927: LD_EXP 4
44931: PUSH
44932: LD_EXP 5
44936: PUSH
44937: LD_EXP 6
44941: PUSH
44942: LD_EXP 7
44946: PUSH
44947: LD_EXP 8
44951: PUSH
44952: LD_EXP 9
44956: PUSH
44957: LD_EXP 14
44961: PUSH
44962: LD_EXP 15
44966: PUSH
44967: LD_EXP 13
44971: PUSH
44972: LD_EXP 10
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: DIFF
44992: PPUSH
44993: LD_STRING 08_other_survivors
44995: PPUSH
44996: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45000: LD_INT 23
45002: PPUSH
45003: CALL 45016 0 1
// YouWin ;
45007: CALL_OW 103
// end ;
45011: LD_VAR 0 1
45015: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45016: LD_INT 0
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
// gammaBase = [ ] ;
45022: LD_ADDR_VAR 0 4
45026: PUSH
45027: EMPTY
45028: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45029: LD_ADDR_VAR 0 5
45033: PUSH
45034: LD_VAR 0 1
45038: PPUSH
45039: LD_INT 22
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 21
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 50
45061: PUSH
45062: EMPTY
45063: LIST
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: PPUSH
45070: CALL_OW 70
45074: ST_TO_ADDR
// for i in buildings do
45075: LD_ADDR_VAR 0 3
45079: PUSH
45080: LD_VAR 0 5
45084: PUSH
45085: FOR_IN
45086: IFFALSE 45523
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45088: LD_VAR 0 3
45092: PPUSH
45093: CALL_OW 266
45097: PUSH
45098: LD_INT 6
45100: PUSH
45101: LD_INT 7
45103: PUSH
45104: LD_INT 8
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: IN
45112: IFFALSE 45226
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45114: LD_ADDR_VAR 0 4
45118: PUSH
45119: LD_VAR 0 4
45123: PUSH
45124: LD_VAR 0 3
45128: PPUSH
45129: CALL_OW 266
45133: PUSH
45134: LD_VAR 0 3
45138: PPUSH
45139: CALL_OW 250
45143: PUSH
45144: LD_VAR 0 3
45148: PPUSH
45149: CALL_OW 251
45153: PUSH
45154: LD_VAR 0 3
45158: PPUSH
45159: CALL_OW 254
45163: PUSH
45164: LD_VAR 0 3
45168: PPUSH
45169: CALL_OW 267
45173: PUSH
45174: LD_VAR 0 3
45178: PPUSH
45179: CALL_OW 248
45183: PUSH
45184: LD_VAR 0 3
45188: PPUSH
45189: LD_INT 1
45191: PPUSH
45192: CALL_OW 268
45196: PUSH
45197: LD_VAR 0 3
45201: PPUSH
45202: LD_INT 2
45204: PPUSH
45205: CALL_OW 268
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: PUSH
45220: EMPTY
45221: LIST
45222: ADD
45223: ST_TO_ADDR
45224: GO 45521
// if GetBType ( i ) = b_bunker then
45226: LD_VAR 0 3
45230: PPUSH
45231: CALL_OW 266
45235: PUSH
45236: LD_INT 32
45238: EQUAL
45239: IFFALSE 45336
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45241: LD_ADDR_VAR 0 4
45245: PUSH
45246: LD_VAR 0 4
45250: PUSH
45251: LD_VAR 0 3
45255: PPUSH
45256: CALL_OW 266
45260: PUSH
45261: LD_VAR 0 3
45265: PPUSH
45266: CALL_OW 250
45270: PUSH
45271: LD_VAR 0 3
45275: PPUSH
45276: CALL_OW 251
45280: PUSH
45281: LD_VAR 0 3
45285: PPUSH
45286: CALL_OW 254
45290: PUSH
45291: LD_VAR 0 3
45295: PPUSH
45296: CALL_OW 267
45300: PUSH
45301: LD_VAR 0 3
45305: PPUSH
45306: CALL_OW 248
45310: PUSH
45311: LD_VAR 0 3
45315: PPUSH
45316: CALL_OW 269
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: ADD
45333: ST_TO_ADDR
45334: GO 45521
// if GetBType ( i ) = b_factory then
45336: LD_VAR 0 3
45340: PPUSH
45341: CALL_OW 266
45345: PUSH
45346: LD_INT 3
45348: EQUAL
45349: IFFALSE 45439
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45351: LD_ADDR_VAR 0 4
45355: PUSH
45356: LD_VAR 0 4
45360: PPUSH
45361: LD_INT 1
45363: PPUSH
45364: LD_VAR 0 3
45368: PPUSH
45369: CALL_OW 266
45373: PUSH
45374: LD_VAR 0 3
45378: PPUSH
45379: CALL_OW 250
45383: PUSH
45384: LD_VAR 0 3
45388: PPUSH
45389: CALL_OW 251
45393: PUSH
45394: LD_VAR 0 3
45398: PPUSH
45399: CALL_OW 254
45403: PUSH
45404: LD_VAR 0 3
45408: PPUSH
45409: CALL_OW 267
45413: PUSH
45414: LD_VAR 0 3
45418: PPUSH
45419: CALL_OW 248
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: PPUSH
45432: CALL_OW 2
45436: ST_TO_ADDR
45437: GO 45521
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45439: LD_ADDR_VAR 0 4
45443: PUSH
45444: LD_VAR 0 4
45448: PUSH
45449: LD_VAR 0 3
45453: PPUSH
45454: CALL_OW 266
45458: PUSH
45459: LD_VAR 0 3
45463: PPUSH
45464: CALL_OW 250
45468: PUSH
45469: LD_VAR 0 3
45473: PPUSH
45474: CALL_OW 251
45478: PUSH
45479: LD_VAR 0 3
45483: PPUSH
45484: CALL_OW 254
45488: PUSH
45489: LD_VAR 0 3
45493: PPUSH
45494: CALL_OW 267
45498: PUSH
45499: LD_VAR 0 3
45503: PPUSH
45504: CALL_OW 248
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: ADD
45520: ST_TO_ADDR
// end ;
45521: GO 45085
45523: POP
45524: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45525: LD_VAR 0 4
45529: PPUSH
45530: LD_STRING 08_GammaBase
45532: PPUSH
45533: CALL_OW 39
// end ;
45537: LD_VAR 0 2
45541: RET
