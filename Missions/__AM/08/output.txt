// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: NOP4
// RandomizeAll ;
   4: NOP4
// mission_prefix := 08_ ;
   8: NOP4
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: NOP4
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: NOP4
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: NOP4
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: NOP4
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: NOP4
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: NOP4
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: NOP4
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: NOP4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: NOP4
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: NOP4
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: NOP4
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: NOP4
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: NOP4
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: NOP4
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: NOP4
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: NOP4
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: NOP4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: NOP4
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: NOP4
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: NOP4
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: NOP4
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: NOP4
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: NOP4
// PrepareBase ;
 217: NOP4
// PrepareHeroes ;
 221: NOP4
// PrepareRussianCommander ;
 225: NOP4
// PrepareRussians ;
 229: NOP4
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: NOP4
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: NOP4
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: NOP4
 291: PPUSH
 292: NOP4
 296: PPUSH
 297: NOP4
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: NOP4
// PrepareCutsceneAttack ;
 312: NOP4
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: NOP4
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: NOP4
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: NOP4
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: NOP4
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: NOP4
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: NOP4
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: NOP4
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: NOP4
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: NOP4
 435: PPUSH
 436: NOP4
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: NOP4
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: NOP4
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: NOP4
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: NOP4
 496: PPUSH
 497: NOP4
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: NOP4
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side = 1 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 1
 542: ST_TO_ADDR
// uc_nation = 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// if gammaCommander = 1 then
 551: NOP4
 555: PUSH
 556: LD_INT 1
 558: EQUAL
 559: IFFALSE 592
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 561: NOP4
 565: PUSH
 566: LD_STRING Donaldson
 568: PPUSH
 569: LD_INT 1
 571: PPUSH
 572: NOP4
 576: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 577: NOP4
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: LD_INT 0
 587: PPUSH
 588: NOP4
// end ; if gammaCommander = 2 then
 592: NOP4
 596: PUSH
 597: LD_INT 2
 599: EQUAL
 600: IFFALSE 633
// begin Brown = PrepareUnit ( Brown , true ) ;
 602: NOP4
 606: PUSH
 607: LD_STRING Brown
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: NOP4
 617: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 618: NOP4
 622: PPUSH
 623: LD_INT 5
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: NOP4
// end ; if gammaCommander = 3 then
 633: NOP4
 637: PUSH
 638: LD_INT 3
 640: EQUAL
 641: IFFALSE 674
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 643: NOP4
 647: PUSH
 648: LD_STRING VanHouten
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: NOP4
 658: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 659: NOP4
 663: PPUSH
 664: LD_INT 5
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: NOP4
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 674: NOP4
 678: PUSH
 679: LD_STRING Harisson
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
 685: NOP4
 689: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 690: NOP4
 694: PUSH
 695: LD_STRING Powell
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: NOP4
 705: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 706: NOP4
 710: PUSH
 711: LD_STRING 07_othersGamma
 713: PPUSH
 714: NOP4
 718: ST_TO_ADDR
// tmp := 8 - others_gamma ;
 719: NOP4
 723: PUSH
 724: LD_INT 8
 726: PUSH
 727: NOP4
 731: MINUS
 732: ST_TO_ADDR
// if tmp then
 733: NOP4
 737: IFFALSE 790
// for i = 1 to tmp do
 739: NOP4
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: NOP4
 753: PUSH
 754: FOR_TO
 755: IFFALSE 788
// begin PrepareHuman ( false , 1 , 5 ) ;
 757: LD_INT 0
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: NOP4
// others_gamma := others_gamma ^ CreateHuman ;
 770: NOP4
 774: PUSH
 775: NOP4
 779: PUSH
 780: NOP4
 784: ADD
 785: ST_TO_ADDR
// end ;
 786: GO 754
 788: POP
 789: POP
// if HexInfo ( 61 , 29 ) = 0 then
 790: LD_INT 61
 792: PPUSH
 793: LD_INT 29
 795: PPUSH
 796: NOP4
 800: PUSH
 801: LD_INT 0
 803: EQUAL
 804: IFFALSE 835
// begin bc_type := b_barracks ;
 806: LD_ADDR_OWVAR 42
 810: PUSH
 811: LD_INT 5
 813: ST_TO_ADDR
// bc_level := 6 ;
 814: LD_ADDR_OWVAR 43
 818: PUSH
 819: LD_INT 6
 821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
 822: LD_INT 61
 824: PPUSH
 825: LD_INT 29
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: NOP4
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
 835: NOP4
 839: PUSH
 840: LD_INT 22
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: LD_INT 31
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PPUSH
 864: NOP4
 868: ST_TO_ADDR
// for i in bun do
 869: NOP4
 873: PUSH
 874: NOP4
 878: PUSH
 879: FOR_IN
 880: IFFALSE 1012
// begin x := GetX ( i ) ;
 882: NOP4
 886: PUSH
 887: NOP4
 891: PPUSH
 892: NOP4
 896: ST_TO_ADDR
// y := GetY ( i ) ;
 897: NOP4
 901: PUSH
 902: NOP4
 906: PPUSH
 907: NOP4
 911: ST_TO_ADDR
// d := GetDir ( i ) ;
 912: NOP4
 916: PUSH
 917: NOP4
 921: PPUSH
 922: NOP4
 926: ST_TO_ADDR
// RemoveUnit ( i ) ;
 927: NOP4
 931: PPUSH
 932: NOP4
// bc_type := b_bunker ;
 936: LD_ADDR_OWVAR 42
 940: PUSH
 941: LD_INT 32
 943: ST_TO_ADDR
// bc_level := 6 ;
 944: LD_ADDR_OWVAR 43
 948: PUSH
 949: LD_INT 6
 951: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
 952: NOP4
 956: PUSH
 957: NOP4
 961: PPUSH
 962: NOP4
 966: PPUSH
 967: NOP4
 971: PPUSH
 972: NOP4
 976: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
 977: NOP4
 981: PPUSH
 982: LD_INT 5
 984: PUSH
 985: LD_INT 4
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: NOP4
 996: PUSH
 997: LD_INT 2
 999: MOD
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: PPUSH
1006: NOP4
// end ;
1010: GO 879
1012: POP
1013: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1014: NOP4
1018: PUSH
1019: LD_INT 22
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 30
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PPUSH
1043: NOP4
1047: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1048: NOP4
1052: PUSH
1053: LD_INT 22
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: LD_INT 30
1068: PUSH
1069: LD_INT 6
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 30
1078: PUSH
1079: LD_INT 7
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 8
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: NOP4
1110: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1111: NOP4
1115: PUSH
1116: LD_INT 22
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: NOP4
1144: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1145: NOP4
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: NOP4
1178: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1179: NOP4
1183: PUSH
1184: LD_INT 22
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 2
1196: PUSH
1197: LD_INT 30
1199: PUSH
1200: LD_INT 31
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 32
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: NOP4
1230: ST_TO_ADDR
// for i in others_gamma do
1231: NOP4
1235: PUSH
1236: NOP4
1240: PUSH
1241: FOR_IN
1242: IFFALSE 1617
// begin placed := false ;
1244: NOP4
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1252: NOP4
1256: PPUSH
1257: NOP4
1261: PUSH
1262: LD_INT 1
1264: EQUAL
1265: IFFALSE 1390
// begin if UnitFilter ( bun , [ f_empty ] ) then
1267: NOP4
1271: PPUSH
1272: LD_INT 58
1274: PUSH
1275: EMPTY
1276: LIST
1277: PPUSH
1278: NOP4
1282: IFFALSE 1321
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1284: NOP4
1288: PPUSH
1289: NOP4
1293: PPUSH
1294: LD_INT 58
1296: PUSH
1297: EMPTY
1298: LIST
1299: PPUSH
1300: NOP4
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PPUSH
1309: NOP4
// placed := true ;
1313: NOP4
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// end ; if arm and not placed then
1321: NOP4
1325: PUSH
1326: NOP4
1330: NOT
1331: AND
1332: IFFALSE 1390
// begin for j in arm do
1334: NOP4
1338: PUSH
1339: NOP4
1343: PUSH
1344: FOR_IN
1345: IFFALSE 1388
// if UnitsInside ( j ) < 6 then
1347: NOP4
1351: PPUSH
1352: NOP4
1356: PUSH
1357: LD_INT 6
1359: LESS
1360: IFFALSE 1386
// begin PlaceHumanInUnit ( i , j ) ;
1362: NOP4
1366: PPUSH
1367: NOP4
1371: PPUSH
1372: NOP4
// placed := true ;
1376: NOP4
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// break ;
1384: GO 1388
// end ;
1386: GO 1344
1388: POP
1389: POP
// end ; end ; if GetClass ( i ) = 3 then
1390: NOP4
1394: PPUSH
1395: NOP4
1399: PUSH
1400: LD_INT 3
1402: EQUAL
1403: IFFALSE 1507
// if fac then
1405: NOP4
1409: IFFALSE 1507
// begin if ct then
1411: NOP4
1415: IFFALSE 1443
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1417: NOP4
1421: PPUSH
1422: NOP4
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PPUSH
1431: NOP4
// placed := true ;
1435: NOP4
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ; if placed then
1443: NOP4
1447: IFFALSE 1451
// continue ;
1449: GO 1241
// for j in fac do
1451: NOP4
1455: PUSH
1456: NOP4
1460: PUSH
1461: FOR_IN
1462: IFFALSE 1505
// if UnitsInside ( j ) < 6 then
1464: NOP4
1468: PPUSH
1469: NOP4
1473: PUSH
1474: LD_INT 6
1476: LESS
1477: IFFALSE 1503
// begin PlaceHumanInUnit ( i , j ) ;
1479: NOP4
1483: PPUSH
1484: NOP4
1488: PPUSH
1489: NOP4
// placed := true ;
1493: NOP4
1497: PUSH
1498: LD_INT 1
1500: ST_TO_ADDR
// break ;
1501: GO 1505
// end ;
1503: GO 1461
1505: POP
1506: POP
// end ; if GetClass ( i ) = 4 then
1507: NOP4
1511: PPUSH
1512: NOP4
1516: PUSH
1517: LD_INT 4
1519: EQUAL
1520: IFFALSE 1584
// if lab then
1522: NOP4
1526: IFFALSE 1584
// begin for j in lab do
1528: NOP4
1532: PUSH
1533: NOP4
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1582
// if UnitsInside ( j ) < 6 then
1541: NOP4
1545: PPUSH
1546: NOP4
1550: PUSH
1551: LD_INT 6
1553: LESS
1554: IFFALSE 1580
// begin PlaceHumanInUnit ( i , j ) ;
1556: NOP4
1560: PPUSH
1561: NOP4
1565: PPUSH
1566: NOP4
// placed := true ;
1570: NOP4
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// break ;
1578: GO 1582
// end ;
1580: GO 1538
1582: POP
1583: POP
// end ; if not placed then
1584: NOP4
1588: NOT
1589: IFFALSE 1615
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1591: NOP4
1595: PPUSH
1596: LD_INT 5
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: NOP4
// ComHold ( i ) ;
1606: NOP4
1610: PPUSH
1611: NOP4
// end ; end ;
1615: GO 1241
1617: POP
1618: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1619: NOP4
1623: PUSH
1624: NOP4
1628: PUSH
1629: LD_INT 1
1631: ARRAY
1632: PPUSH
1633: NOP4
1637: AND
1638: IFFALSE 1727
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1640: NOP4
1644: PUSH
1645: LD_INT 22
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 33
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PPUSH
1669: NOP4
1673: PUSH
1674: FOR_IN
1675: IFFALSE 1725
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1677: NOP4
1681: PPUSH
1682: NOP4
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: PPUSH
1691: NOP4
1695: PUSH
1696: LD_INT 1
1698: PPUSH
1699: NOP4
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: NOP4
1712: PPUSH
1713: NOP4
1717: ARRAY
1718: PPUSH
1719: NOP4
1723: GO 1674
1725: POP
1726: POP
// end ; end ;
1727: LD_VAR 0 1
1731: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
1732: LD_INT 0
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1740: LD_INT 71
1742: PPUSH
1743: LD_INT 5
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: NOP4
// blist := LoadVariable ( GammaBase , [ ] ) ;
1753: NOP4
1757: PUSH
1758: LD_STRING GammaBase
1760: PPUSH
1761: EMPTY
1762: PPUSH
1763: NOP4
1767: ST_TO_ADDR
// uc_side := 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation := 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// for i in blist do
1784: NOP4
1788: PUSH
1789: NOP4
1793: PUSH
1794: FOR_IN
1795: IFFALSE 2203
// begin bc_type := i [ 1 ] ;
1797: LD_ADDR_OWVAR 42
1801: PUSH
1802: NOP4
1806: PUSH
1807: LD_INT 1
1809: ARRAY
1810: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1811: LD_ADDR_OWVAR 43
1815: PUSH
1816: NOP4
1820: PUSH
1821: LD_INT 5
1823: ARRAY
1824: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1825: NOP4
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PUSH
1834: LD_INT 7
1836: PUSH
1837: LD_INT 8
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: IN
1844: IFFALSE 1900
// begin bc_kind1 := i [ 7 ] ;
1846: LD_ADDR_OWVAR 44
1850: PUSH
1851: NOP4
1855: PUSH
1856: LD_INT 7
1858: ARRAY
1859: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1860: LD_STRING 06_remoteVehs_1
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: NOP4
1870: PUSH
1871: LD_INT 1
1873: EQUAL
1874: IFFALSE 1886
// begin bc_kind2 := 15 ;
1876: LD_ADDR_OWVAR 45
1880: PUSH
1881: LD_INT 15
1883: ST_TO_ADDR
// end else
1884: GO 1900
// begin bc_kind2 := i [ 8 ] ;
1886: LD_ADDR_OWVAR 45
1890: PUSH
1891: NOP4
1895: PUSH
1896: LD_INT 8
1898: ARRAY
1899: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1900: NOP4
1904: PUSH
1905: LD_INT 0
1907: EQUAL
1908: IFFALSE 2026
// begin bc_type := b_warehouse ;
1910: LD_ADDR_OWVAR 42
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1918: NOP4
1922: PUSH
1923: NOP4
1927: PUSH
1928: LD_INT 2
1930: ARRAY
1931: PPUSH
1932: NOP4
1936: PUSH
1937: LD_INT 3
1939: ARRAY
1940: PPUSH
1941: NOP4
1945: PUSH
1946: LD_INT 4
1948: ARRAY
1949: PPUSH
1950: NOP4
1954: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1955: NOP4
1959: PPUSH
1960: LD_STRING gamma
1962: PPUSH
1963: NOP4
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
1967: NOP4
1971: PPUSH
1972: NOP4
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: LD_INT 400
1982: PUSH
1983: LD_INT 350
1985: PUSH
1986: LD_INT 250
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: NOP4
1998: ARRAY
1999: PPUSH
2000: NOP4
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2004: NOP4
2008: PPUSH
2009: NOP4
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: LD_INT 200
2019: PPUSH
2020: NOP4
// end else
2024: GO 2168
// begin if bc_type = 4 then
2026: NOP4
2030: PUSH
2031: LD_INT 4
2033: EQUAL
2034: IFFALSE 2083
// begin bc_type = 5 ;
2036: LD_ADDR_OWVAR 42
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2044: NOP4
2048: PUSH
2049: NOP4
2053: PUSH
2054: LD_INT 2
2056: ARRAY
2057: PPUSH
2058: NOP4
2062: PUSH
2063: LD_INT 3
2065: ARRAY
2066: PPUSH
2067: NOP4
2071: PUSH
2072: LD_INT 4
2074: ARRAY
2075: PPUSH
2076: NOP4
2080: ST_TO_ADDR
// end else
2081: GO 2168
// begin bc_type := i [ 1 ] ;
2083: LD_ADDR_OWVAR 42
2087: PUSH
2088: NOP4
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2097: LD_STRING 06_remoteVehs_1
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: NOP4
2107: PUSH
2108: LD_INT 1
2110: EQUAL
2111: PUSH
2112: NOP4
2116: PUSH
2117: LD_INT 7
2119: EQUAL
2120: AND
2121: IFFALSE 2131
// bc_type := b_lab_full ;
2123: LD_ADDR_OWVAR 42
2127: PUSH
2128: LD_INT 8
2130: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2131: NOP4
2135: PUSH
2136: NOP4
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PPUSH
2145: NOP4
2149: PUSH
2150: LD_INT 3
2152: ARRAY
2153: PPUSH
2154: NOP4
2158: PUSH
2159: LD_INT 4
2161: ARRAY
2162: PPUSH
2163: NOP4
2167: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2168: NOP4
2172: PPUSH
2173: NOP4
2177: PUSH
2178: LD_INT 32
2180: EQUAL
2181: IFFALSE 2201
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2183: NOP4
2187: PPUSH
2188: NOP4
2192: PUSH
2193: LD_INT 7
2195: ARRAY
2196: PPUSH
2197: NOP4
// end ;
2201: GO 1794
2203: POP
2204: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2205: LD_INT 22
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 30
2217: PUSH
2218: LD_INT 3
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: NOP4
2233: IFFALSE 2481
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2235: NOP4
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 30
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: NOP4
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2273: NOP4
2277: PUSH
2278: NOP4
2282: PPUSH
2283: NOP4
2287: PPUSH
2288: NOP4
2292: PPUSH
2293: NOP4
2297: PPUSH
2298: NOP4
2302: PPUSH
2303: NOP4
2307: PPUSH
2308: NOP4
2312: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2313: NOP4
2317: PUSH
2318: LD_INT 19
2320: PUSH
2321: LD_INT 17
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2328: LD_STRING 06_remoteVehs_1
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: NOP4
2338: IFFALSE 2361
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2340: NOP4
2344: PUSH
2345: NOP4
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 20
2355: PPUSH
2356: NOP4
2360: ST_TO_ADDR
// for i in tmp do
2361: NOP4
2365: PUSH
2366: NOP4
2370: PUSH
2371: FOR_IN
2372: IFFALSE 2479
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2374: NOP4
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: NOP4
2387: PUSH
2388: LD_INT 2
2390: ARRAY
2391: PPUSH
2392: NOP4
2396: PUSH
2397: LD_INT 0
2399: EQUAL
2400: IFFALSE 2477
// begin bc_type := blist [ 1 ] ;
2402: LD_ADDR_OWVAR 42
2406: PUSH
2407: NOP4
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2416: NOP4
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: PPUSH
2425: NOP4
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PPUSH
2434: NOP4
2438: PUSH
2439: LD_INT 3
2441: ARRAY
2442: PPUSH
2443: NOP4
// blist := Delete ( blist , 1 ) ;
2447: NOP4
2451: PUSH
2452: NOP4
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: NOP4
2464: ST_TO_ADDR
// if blist = 0 then
2465: NOP4
2469: PUSH
2470: LD_INT 0
2472: EQUAL
2473: IFFALSE 2477
// break ;
2475: GO 2479
// end ;
2477: GO 2371
2479: POP
2480: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2481: LD_STRING 06_remoteVehs_1
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: NOP4
2491: PUSH
2492: LD_INT 1
2494: EQUAL
2495: IFFALSE 2699
// begin bc_type = 36 ;
2497: LD_ADDR_OWVAR 42
2501: PUSH
2502: LD_INT 36
2504: ST_TO_ADDR
// bc_level = 4 ;
2505: LD_ADDR_OWVAR 43
2509: PUSH
2510: LD_INT 4
2512: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2513: LD_INT 62
2515: PPUSH
2516: LD_INT 12
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: NOP4
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2526: NOP4
2530: PUSH
2531: DOUBLE
2532: LD_INT 1
2534: DEC
2535: ST_TO_ADDR
2536: LD_INT 3
2538: PUSH
2539: LD_INT 2
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: NOP4
2554: ARRAY
2555: PUSH
2556: FOR_TO
2557: IFFALSE 2697
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2559: LD_ADDR_OWVAR 37
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 2
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 1
2579: PPUSH
2580: LD_INT 2
2582: PPUSH
2583: NOP4
2587: ARRAY
2588: PUSH
2589: LD_INT 2
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: NOP4
2601: ARRAY
2602: ST_TO_ADDR
// vc_engine = 1 ;
2603: LD_ADDR_OWVAR 39
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// vc_control = 2 ;
2611: LD_ADDR_OWVAR 38
2615: PUSH
2616: LD_INT 2
2618: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2619: LD_ADDR_OWVAR 40
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: LD_INT 4
2629: PUSH
2630: LD_INT 5
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 3
2643: PPUSH
2644: NOP4
2648: ARRAY
2649: ST_TO_ADDR
// veh = CreateVehicle ;
2650: NOP4
2654: PUSH
2655: NOP4
2659: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2660: NOP4
2664: PPUSH
2665: NOP4
2669: PPUSH
2670: NOP4
2674: PPUSH
2675: NOP4
2679: PPUSH
2680: NOP4
2684: PPUSH
2685: LD_INT 7
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: NOP4
// end ;
2695: GO 2556
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// uc_side = 1 ;
2710: LD_ADDR_OWVAR 20
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// uc_nation = 1 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2726: NOP4
2730: PUSH
2731: LD_STRING 06c_Denis
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: NOP4
2741: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2742: NOP4
2746: PPUSH
2747: LD_INT 4
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: NOP4
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2757: NOP4
2761: PUSH
2762: LD_STRING 06c_Joan
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: NOP4
2772: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2773: NOP4
2777: PPUSH
2778: LD_INT 4
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: NOP4
// if not LoadVariable ( GladstoneIn07 , 0 ) then
2788: LD_STRING GladstoneIn07
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: NOP4
2798: NOT
2799: IFFALSE 2867
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2801: NOP4
2805: PUSH
2806: LD_STRING 06c_Gladstone
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: NOP4
2816: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2817: NOP4
2821: NOT
2822: PUSH
2823: LD_STRING GladstoneStayInDelta
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: NOP4
2833: AND
2834: IFFALSE 2852
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2836: NOP4
2840: PUSH
2841: LD_STRING 05_Gladstone
2843: PPUSH
2844: LD_INT 1
2846: PPUSH
2847: NOP4
2851: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2852: NOP4
2856: PPUSH
2857: LD_INT 4
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: NOP4
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2867: LD_STRING LisaStayInDelta
2869: PPUSH
2870: LD_INT 0
2872: PPUSH
2873: NOP4
2877: IFFALSE 2910
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2879: NOP4
2883: PUSH
2884: LD_STRING 05_Lisa
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: NOP4
2894: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2895: NOP4
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: NOP4
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2910: LD_STRING BobbyStayInDelta
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: NOP4
2920: IFFALSE 2953
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2922: NOP4
2926: PUSH
2927: LD_STRING 05_Bobby
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: NOP4
2937: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2938: NOP4
2942: PPUSH
2943: LD_INT 4
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: NOP4
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2953: LD_STRING CyrusStayInDelta
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: NOP4
2963: IFFALSE 2996
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2965: NOP4
2969: PUSH
2970: LD_STRING 05_Cyrus
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: NOP4
2980: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2981: NOP4
2985: PPUSH
2986: LD_INT 4
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: NOP4
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2996: LD_STRING BrownStayInDelta
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: NOP4
3006: IFFALSE 3039
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3008: NOP4
3012: PUSH
3013: LD_STRING 05_Brown
3015: PPUSH
3016: LD_INT 1
3018: PPUSH
3019: NOP4
3023: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3024: NOP4
3028: PPUSH
3029: LD_INT 4
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: NOP4
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3039: LD_STRING DonaldsonStayInDelta
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: NOP4
3049: IFFALSE 3082
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3051: NOP4
3055: PUSH
3056: LD_STRING 05_Donaldson
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: NOP4
3066: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3067: NOP4
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: NOP4
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3082: NOP4
3086: PUSH
3087: LD_STRING OtherStayInDelta
3089: PPUSH
3090: NOP4
3094: ST_TO_ADDR
// if other then
3095: NOP4
3099: IFFALSE 3144
// for j = 1 to other do
3101: NOP4
3105: PUSH
3106: DOUBLE
3107: LD_INT 1
3109: DEC
3110: ST_TO_ADDR
3111: NOP4
3115: PUSH
3116: FOR_TO
3117: IFFALSE 3142
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3119: NOP4
3123: PUSH
3124: NOP4
3128: ARRAY
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: NOP4
3140: GO 3116
3142: POP
3143: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3144: NOP4
3148: PUSH
3149: LD_STRING 06_other_apemans
3151: PPUSH
3152: NOP4
3156: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3157: NOP4
3161: PUSH
3162: LD_INT 5
3164: PUSH
3165: LD_INT 4
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PUSH
3176: NOP4
3180: ARRAY
3181: GREATEREQUAL
3182: IFFALSE 3211
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3184: NOP4
3188: PUSH
3189: LD_INT 5
3191: PUSH
3192: LD_INT 4
3194: PUSH
3195: LD_INT 3
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: NOP4
3207: ARRAY
3208: ST_TO_ADDR
3209: GO 3221
// j := other ;
3211: NOP4
3215: PUSH
3216: NOP4
3220: ST_TO_ADDR
// for i = 1 to j do
3221: NOP4
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: NOP4
3235: PUSH
3236: FOR_TO
3237: IFFALSE 3262
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3239: NOP4
3243: PUSH
3244: NOP4
3248: ARRAY
3249: PPUSH
3250: LD_INT 4
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: NOP4
3260: GO 3236
3262: POP
3263: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3264: LD_INT 4
3266: PPUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 21
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: NOP4
3295: PPUSH
3296: LD_INT 53
3298: PPUSH
3299: LD_INT 19
3301: PPUSH
3302: NOP4
// firstAttack = 1 ;
3306: NOP4
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// end ;
3314: LD_VAR 0 1
3318: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3319: LD_INT 0
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3326: NOP4
3330: PUSH
3331: LD_STRING 07_vehicles
3333: PPUSH
3334: EMPTY
3335: PPUSH
3336: NOP4
3340: ST_TO_ADDR
// uc_side = 1 ;
3341: LD_ADDR_OWVAR 20
3345: PUSH
3346: LD_INT 1
3348: ST_TO_ADDR
// uc_nation = 1 ;
3349: LD_ADDR_OWVAR 21
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// if vehicles > 0 then
3357: NOP4
3361: PUSH
3362: LD_INT 0
3364: GREATER
3365: IFFALSE 3504
// begin for i = 1 to vehicles do
3367: NOP4
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: NOP4
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3502
// begin vc_chassis = vehicles [ i ] ;
3385: LD_ADDR_OWVAR 37
3389: PUSH
3390: NOP4
3394: PUSH
3395: NOP4
3399: ARRAY
3400: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3401: LD_ADDR_OWVAR 39
3405: PUSH
3406: NOP4
3410: PUSH
3411: NOP4
3415: PUSH
3416: LD_INT 1
3418: PLUS
3419: ARRAY
3420: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3421: LD_ADDR_OWVAR 38
3425: PUSH
3426: NOP4
3430: PUSH
3431: NOP4
3435: PUSH
3436: LD_INT 2
3438: PLUS
3439: ARRAY
3440: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3441: LD_ADDR_OWVAR 40
3445: PUSH
3446: NOP4
3450: PUSH
3451: NOP4
3455: PUSH
3456: LD_INT 3
3458: PLUS
3459: ARRAY
3460: ST_TO_ADDR
// veh = CreateVehicle ;
3461: NOP4
3465: PUSH
3466: NOP4
3470: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3471: NOP4
3475: PPUSH
3476: LD_INT 4
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: NOP4
// i = i + 3 ;
3486: NOP4
3490: PUSH
3491: NOP4
3495: PUSH
3496: LD_INT 3
3498: PLUS
3499: ST_TO_ADDR
// end ;
3500: GO 3382
3502: POP
3503: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3504: NOP4
3508: PUSH
3509: NOP4
3513: PUSH
3514: LD_STRING JMM
3516: STR
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: NOP4
3525: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3526: NOP4
3530: PUSH
3531: LD_INT 1
3533: EQUAL
3534: PUSH
3535: NOP4
3539: PUSH
3540: LD_INT 3
3542: EQUAL
3543: OR
3544: IFFALSE 3568
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3546: NOP4
3550: PUSH
3551: NOP4
3555: PUSH
3556: LD_STRING Brown
3558: STR
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: NOP4
3567: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3568: NOP4
3572: PUSH
3573: LD_INT 2
3575: EQUAL
3576: PUSH
3577: NOP4
3581: PUSH
3582: LD_INT 3
3584: EQUAL
3585: OR
3586: IFFALSE 3610
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3588: NOP4
3592: PUSH
3593: NOP4
3597: PUSH
3598: LD_STRING Donaldson
3600: STR
3601: PPUSH
3602: LD_INT 1
3604: PPUSH
3605: NOP4
3609: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3610: NOP4
3614: PUSH
3615: NOP4
3619: PUSH
3620: LD_STRING Bobby
3622: STR
3623: PPUSH
3624: LD_INT 1
3626: PPUSH
3627: NOP4
3631: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3632: NOP4
3636: PUSH
3637: NOP4
3641: PUSH
3642: LD_STRING Cyrus
3644: STR
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
3649: NOP4
3653: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3654: NOP4
3658: PUSH
3659: NOP4
3663: PUSH
3664: LD_STRING Lisa
3666: STR
3667: PPUSH
3668: LD_INT 1
3670: PPUSH
3671: NOP4
3675: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3676: NOP4
3680: PUSH
3681: NOP4
3685: PUSH
3686: LD_STRING Frank
3688: STR
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: NOP4
3697: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3698: NOP4
3702: PUSH
3703: NOP4
3707: PUSH
3708: LD_STRING Gladstone
3710: STR
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
3715: NOP4
3719: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3720: NOP4
3724: PUSH
3725: NOP4
3729: PUSH
3730: LD_STRING Kikuchi
3732: STR
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: NOP4
3741: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3742: NOP4
3746: PUSH
3747: LD_INT 1
3749: EQUAL
3750: PUSH
3751: NOP4
3755: PUSH
3756: LD_INT 3
3758: EQUAL
3759: OR
3760: IFFALSE 3777
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3762: NOP4
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: NOP4
// if gammaCommander = 2 or gammaCommander = 3 then
3777: NOP4
3781: PUSH
3782: LD_INT 2
3784: EQUAL
3785: PUSH
3786: NOP4
3790: PUSH
3791: LD_INT 3
3793: EQUAL
3794: OR
3795: IFFALSE 3812
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3797: NOP4
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 0
3807: PPUSH
3808: NOP4
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3812: NOP4
3816: PUSH
3817: LD_INT 4
3819: PPUSH
3820: LD_INT 22
3822: PUSH
3823: LD_INT 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 21
3832: PUSH
3833: LD_INT 2
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 58
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: NOP4
3855: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3856: NOP4
3860: PUSH
3861: NOP4
3865: PUSH
3866: LD_STRING JMM
3868: STR
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
3873: NOP4
3877: ST_TO_ADDR
// if veh > 0 then
3878: NOP4
3882: PUSH
3883: LD_INT 0
3885: GREATER
3886: IFFALSE 3908
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3888: NOP4
3892: PPUSH
3893: NOP4
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: PPUSH
3902: NOP4
// end else
3906: GO 3923
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3908: NOP4
3912: PPUSH
3913: LD_INT 4
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3923: NOP4
3927: PUSH
3928: LD_INT 4
3930: PPUSH
3931: LD_INT 22
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 21
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 58
3953: PUSH
3954: EMPTY
3955: LIST
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PPUSH
3962: NOP4
3966: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3967: NOP4
3971: PUSH
3972: NOP4
3976: PUSH
3977: LD_STRING Bobby
3979: STR
3980: PPUSH
3981: LD_INT 1
3983: PPUSH
3984: NOP4
3988: ST_TO_ADDR
// if veh > 0 then
3989: NOP4
3993: PUSH
3994: LD_INT 0
3996: GREATER
3997: IFFALSE 4019
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3999: NOP4
4003: PPUSH
4004: NOP4
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: NOP4
// end else
4017: GO 4034
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4019: NOP4
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4034: NOP4
4038: PUSH
4039: LD_INT 4
4041: PPUSH
4042: LD_INT 22
4044: PUSH
4045: LD_INT 1
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 58
4064: PUSH
4065: EMPTY
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: NOP4
4077: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4078: NOP4
4082: PUSH
4083: NOP4
4087: PUSH
4088: LD_STRING Cyrus
4090: STR
4091: PPUSH
4092: LD_INT 1
4094: PPUSH
4095: NOP4
4099: ST_TO_ADDR
// if veh > 0 then
4100: NOP4
4104: PUSH
4105: LD_INT 0
4107: GREATER
4108: IFFALSE 4130
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4110: NOP4
4114: PPUSH
4115: NOP4
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PPUSH
4124: NOP4
// end else
4128: GO 4145
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4130: NOP4
4134: PPUSH
4135: LD_INT 4
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4145: NOP4
4149: PUSH
4150: LD_INT 4
4152: PPUSH
4153: LD_INT 22
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 2
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 58
4175: PUSH
4176: EMPTY
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: PPUSH
4184: NOP4
4188: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4189: NOP4
4193: PUSH
4194: NOP4
4198: PUSH
4199: LD_STRING Lisa
4201: STR
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: NOP4
4210: ST_TO_ADDR
// if veh > 0 then
4211: NOP4
4215: PUSH
4216: LD_INT 0
4218: GREATER
4219: IFFALSE 4241
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4221: NOP4
4225: PPUSH
4226: NOP4
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: NOP4
// end else
4239: GO 4256
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4241: NOP4
4245: PPUSH
4246: LD_INT 4
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4256: NOP4
4260: PUSH
4261: LD_INT 4
4263: PPUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 21
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 58
4286: PUSH
4287: EMPTY
4288: LIST
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PPUSH
4295: NOP4
4299: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4300: NOP4
4304: PUSH
4305: NOP4
4309: PUSH
4310: LD_STRING Frank
4312: STR
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: NOP4
4321: ST_TO_ADDR
// if veh > 0 then
4322: NOP4
4326: PUSH
4327: LD_INT 0
4329: GREATER
4330: IFFALSE 4352
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4332: NOP4
4336: PPUSH
4337: NOP4
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: NOP4
// end else
4350: GO 4367
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4352: NOP4
4356: PPUSH
4357: LD_INT 4
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4367: NOP4
4371: PUSH
4372: LD_INT 4
4374: PPUSH
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 21
4387: PUSH
4388: LD_INT 2
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 58
4397: PUSH
4398: EMPTY
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: NOP4
4410: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4411: NOP4
4415: PUSH
4416: NOP4
4420: PUSH
4421: LD_STRING Gladstone
4423: STR
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: NOP4
4432: ST_TO_ADDR
// if veh > 0 then
4433: NOP4
4437: PUSH
4438: LD_INT 0
4440: GREATER
4441: IFFALSE 4463
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4443: NOP4
4447: PPUSH
4448: NOP4
4452: PUSH
4453: LD_INT 1
4455: ARRAY
4456: PPUSH
4457: NOP4
// end else
4461: GO 4478
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4463: NOP4
4467: PPUSH
4468: LD_INT 4
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4478: NOP4
4482: PUSH
4483: LD_INT 4
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 58
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: PPUSH
4517: NOP4
4521: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4522: NOP4
4526: PUSH
4527: NOP4
4531: PUSH
4532: LD_STRING Kikuchi
4534: STR
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: NOP4
4543: ST_TO_ADDR
// if veh > 0 then
4544: NOP4
4548: PUSH
4549: LD_INT 0
4551: GREATER
4552: IFFALSE 4574
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4554: NOP4
4558: PPUSH
4559: NOP4
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: PPUSH
4568: NOP4
// end else
4572: GO 4589
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4574: NOP4
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4589: NOP4
4593: PUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 22
4599: PUSH
4600: LD_INT 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 21
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 58
4619: PUSH
4620: EMPTY
4621: LIST
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: PPUSH
4628: NOP4
4632: ST_TO_ADDR
// Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
4633: NOP4
4637: PUSH
4638: NOP4
4642: PUSH
4643: LD_STRING Khatam
4645: STR
4646: PPUSH
4647: LD_INT 1
4649: PPUSH
4650: NOP4
4654: ST_TO_ADDR
// if veh > 0 then
4655: NOP4
4659: PUSH
4660: LD_INT 0
4662: GREATER
4663: IFFALSE 4685
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
4665: NOP4
4669: PPUSH
4670: NOP4
4674: PUSH
4675: LD_INT 1
4677: ARRAY
4678: PPUSH
4679: NOP4
// end else
4683: GO 4700
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
4685: NOP4
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: LD_INT 0
4695: PPUSH
4696: NOP4
// end ; other = CreateCharacterSet ( 07c_others ) ;
4700: NOP4
4704: PUSH
4705: LD_STRING 07c_others
4707: PPUSH
4708: NOP4
4712: ST_TO_ADDR
// for i in other do
4713: NOP4
4717: PUSH
4718: NOP4
4722: PUSH
4723: FOR_IN
4724: IFFALSE 4817
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4726: NOP4
4730: PUSH
4731: LD_INT 4
4733: PPUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 1
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 2
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 58
4756: PUSH
4757: EMPTY
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: PPUSH
4765: NOP4
4769: ST_TO_ADDR
// if veh > 0 then
4770: NOP4
4774: PUSH
4775: LD_INT 0
4777: GREATER
4778: IFFALSE 4800
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4780: NOP4
4784: PPUSH
4785: NOP4
4789: PUSH
4790: LD_INT 1
4792: ARRAY
4793: PPUSH
4794: NOP4
// end else
4798: GO 4815
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4800: NOP4
4804: PPUSH
4805: LD_INT 4
4807: PPUSH
4808: LD_INT 0
4810: PPUSH
4811: NOP4
// end ; end ;
4815: GO 4723
4817: POP
4818: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4819: LD_INT 4
4821: PPUSH
4822: LD_INT 22
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: PPUSH
4835: NOP4
4839: PPUSH
4840: LD_INT 53
4842: PPUSH
4843: LD_INT 19
4845: PPUSH
4846: NOP4
// end ;
4850: LD_VAR 0 1
4854: RET
// export function PrepareSikorsky ; begin
4855: LD_INT 0
4857: PPUSH
// uc_side = 4 ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_INT 4
4865: ST_TO_ADDR
// uc_nation = 1 ;
4866: LD_ADDR_OWVAR 21
4870: PUSH
4871: LD_INT 1
4873: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4874: NOP4
4878: PUSH
4879: LD_STRING Sikorski
4881: PPUSH
4882: LD_INT 0
4884: PPUSH
4885: NOP4
4889: ST_TO_ADDR
// vc_engine = 1 ;
4890: LD_ADDR_OWVAR 39
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// vc_control = 1 ;
4898: LD_ADDR_OWVAR 38
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4906: LD_ADDR_OWVAR 40
4910: PUSH
4911: LD_INT 5
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: LD_INT 4
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: NOP4
4929: ARRAY
4930: ST_TO_ADDR
// vc_chassis = 4 ;
4931: LD_ADDR_OWVAR 37
4935: PUSH
4936: LD_INT 4
4938: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4939: NOP4
4943: PUSH
4944: NOP4
4948: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4949: NOP4
4953: PPUSH
4954: LD_INT 9
4956: PPUSH
4957: LD_INT 0
4959: PPUSH
4960: NOP4
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4964: NOP4
4968: PPUSH
4969: NOP4
4973: PPUSH
4974: NOP4
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4978: NOP4
4982: PPUSH
4983: LD_INT 5
4985: PPUSH
4986: NOP4
// end ;
4990: LD_VAR 0 1
4994: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4995: LD_INT 0
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5001: NOP4
5005: PUSH
5006: DOUBLE
5007: LD_INT 1
5009: DEC
5010: ST_TO_ADDR
5011: LD_INT 8
5013: PUSH
5014: LD_INT 7
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: PUSH
5025: NOP4
5029: ARRAY
5030: PUSH
5031: FOR_TO
5032: IFFALSE 5129
// begin uc_side = 4 ;
5034: LD_ADDR_OWVAR 20
5038: PUSH
5039: LD_INT 4
5041: ST_TO_ADDR
// uc_nation = 1 ;
5042: LD_ADDR_OWVAR 21
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// hc_name =  ;
5050: LD_ADDR_OWVAR 26
5054: PUSH
5055: LD_STRING 
5057: ST_TO_ADDR
// hc_gallery =  ;
5058: LD_ADDR_OWVAR 33
5062: PUSH
5063: LD_STRING 
5065: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5066: LD_INT 0
5068: PPUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_INT 5
5074: PPUSH
5075: LD_INT 8
5077: PPUSH
5078: NOP4
5082: PPUSH
5083: NOP4
// un = CreateHuman ;
5087: NOP4
5091: PUSH
5092: NOP4
5096: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5097: NOP4
5101: PPUSH
5102: LD_INT 9
5104: PPUSH
5105: LD_INT 0
5107: PPUSH
5108: NOP4
// ComMoveXY ( un , 53 , 23 ) ;
5112: NOP4
5116: PPUSH
5117: LD_INT 53
5119: PPUSH
5120: LD_INT 23
5122: PPUSH
5123: NOP4
// end ;
5127: GO 5031
5129: POP
5130: POP
// for i = 1 to 3 do
5131: NOP4
5135: PUSH
5136: DOUBLE
5137: LD_INT 1
5139: DEC
5140: ST_TO_ADDR
5141: LD_INT 3
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5242
// begin uc_side = 4 ;
5147: LD_ADDR_OWVAR 20
5151: PUSH
5152: LD_INT 4
5154: ST_TO_ADDR
// uc_nation = 1 ;
5155: LD_ADDR_OWVAR 21
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// hc_name =  ;
5163: LD_ADDR_OWVAR 26
5167: PUSH
5168: LD_STRING 
5170: ST_TO_ADDR
// hc_gallery =  ;
5171: LD_ADDR_OWVAR 33
5175: PUSH
5176: LD_STRING 
5178: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5179: LD_INT 0
5181: PPUSH
5182: LD_INT 4
5184: PPUSH
5185: LD_INT 5
5187: PPUSH
5188: LD_INT 8
5190: PPUSH
5191: NOP4
5195: PPUSH
5196: NOP4
// un = CreateHuman ;
5200: NOP4
5204: PUSH
5205: NOP4
5209: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5210: NOP4
5214: PPUSH
5215: LD_INT 9
5217: PPUSH
5218: LD_INT 0
5220: PPUSH
5221: NOP4
// ComMoveXY ( un , 53 , 23 ) ;
5225: NOP4
5229: PPUSH
5230: LD_INT 53
5232: PPUSH
5233: LD_INT 23
5235: PPUSH
5236: NOP4
// end ;
5240: GO 5144
5242: POP
5243: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5244: NOP4
5248: PUSH
5249: DOUBLE
5250: LD_INT 1
5252: DEC
5253: ST_TO_ADDR
5254: LD_INT 9
5256: PUSH
5257: LD_INT 8
5259: PUSH
5260: LD_INT 7
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: LIST
5267: PUSH
5268: NOP4
5272: ARRAY
5273: PUSH
5274: FOR_TO
5275: IFFALSE 5471
// begin uc_side = 4 ;
5277: LD_ADDR_OWVAR 20
5281: PUSH
5282: LD_INT 4
5284: ST_TO_ADDR
// uc_nation = 1 ;
5285: LD_ADDR_OWVAR 21
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// vc_engine = 1 ;
5293: LD_ADDR_OWVAR 39
5297: PUSH
5298: LD_INT 1
5300: ST_TO_ADDR
// vc_control = 1 ;
5301: LD_ADDR_OWVAR 38
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5309: LD_ADDR_OWVAR 40
5313: PUSH
5314: LD_INT 3
5316: PUSH
5317: LD_INT 4
5319: PUSH
5320: LD_INT 5
5322: PUSH
5323: LD_INT 6
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_INT 4
5337: PPUSH
5338: NOP4
5342: ARRAY
5343: ST_TO_ADDR
// vc_chassis = 4 ;
5344: LD_ADDR_OWVAR 37
5348: PUSH
5349: LD_INT 4
5351: ST_TO_ADDR
// veh = CreateVehicle ;
5352: NOP4
5356: PUSH
5357: NOP4
5361: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5362: NOP4
5366: PPUSH
5367: LD_INT 9
5369: PPUSH
5370: LD_INT 0
5372: PPUSH
5373: NOP4
// hc_name =  ;
5377: LD_ADDR_OWVAR 26
5381: PUSH
5382: LD_STRING 
5384: ST_TO_ADDR
// hc_gallery =  ;
5385: LD_ADDR_OWVAR 33
5389: PUSH
5390: LD_STRING 
5392: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5393: LD_INT 0
5395: PPUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: LD_INT 8
5404: PPUSH
5405: NOP4
5409: PPUSH
5410: NOP4
// un = CreateHuman ;
5414: NOP4
5418: PUSH
5419: NOP4
5423: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5424: NOP4
5428: PPUSH
5429: NOP4
5433: PPUSH
5434: NOP4
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5438: NOP4
5442: PUSH
5443: NOP4
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: LD_INT 53
5454: PPUSH
5455: LD_INT 23
5457: PPUSH
5458: NOP4
// wait ( 0 0$5 ) ;
5462: LD_INT 175
5464: PPUSH
5465: NOP4
// end ;
5469: GO 5274
5471: POP
5472: POP
// end ; end_of_file
5473: LD_VAR 0 1
5477: RET
// export function PrepareRussianCommander ; begin
5478: LD_INT 0
5480: PPUSH
// uc_side = 3 ;
5481: LD_ADDR_OWVAR 20
5485: PUSH
5486: LD_INT 3
5488: ST_TO_ADDR
// uc_nation = 3 ;
5489: LD_ADDR_OWVAR 21
5493: PUSH
5494: LD_INT 3
5496: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5497: NOP4
5501: PUSH
5502: LD_STRING Borodin
5504: PPUSH
5505: NOP4
5509: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5510: NOP4
5514: PPUSH
5515: LD_INT 25
5517: PPUSH
5518: LD_INT 0
5520: PPUSH
5521: NOP4
// end ;
5525: LD_VAR 0 1
5529: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5530: LD_INT 0
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
// for i = 1 to 10 do
5536: NOP4
5540: PUSH
5541: DOUBLE
5542: LD_INT 1
5544: DEC
5545: ST_TO_ADDR
5546: LD_INT 10
5548: PUSH
5549: FOR_TO
5550: IFFALSE 5624
// begin uc_side = 6 ;
5552: LD_ADDR_OWVAR 20
5556: PUSH
5557: LD_INT 6
5559: ST_TO_ADDR
// uc_nation = 3 ;
5560: LD_ADDR_OWVAR 21
5564: PUSH
5565: LD_INT 3
5567: ST_TO_ADDR
// hc_gallery =  ;
5568: LD_ADDR_OWVAR 33
5572: PUSH
5573: LD_STRING 
5575: ST_TO_ADDR
// hc_name =  ;
5576: LD_ADDR_OWVAR 26
5580: PUSH
5581: LD_STRING 
5583: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5584: LD_INT 0
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: LD_INT 3
5592: PPUSH
5593: NOP4
// un = CreateHuman ;
5597: NOP4
5601: PUSH
5602: NOP4
5606: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5607: NOP4
5611: PPUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 0
5617: PPUSH
5618: NOP4
// end ;
5622: GO 5549
5624: POP
5625: POP
// for i = 1 to 3 do
5626: NOP4
5630: PUSH
5631: DOUBLE
5632: LD_INT 1
5634: DEC
5635: ST_TO_ADDR
5636: LD_INT 3
5638: PUSH
5639: FOR_TO
5640: IFFALSE 5789
// begin uc_side = 6 ;
5642: LD_ADDR_OWVAR 20
5646: PUSH
5647: LD_INT 6
5649: ST_TO_ADDR
// uc_nation = 3 ;
5650: LD_ADDR_OWVAR 21
5654: PUSH
5655: LD_INT 3
5657: ST_TO_ADDR
// vc_engine = 1 ;
5658: LD_ADDR_OWVAR 39
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// vc_control = 1 ;
5666: LD_ADDR_OWVAR 38
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5674: LD_ADDR_OWVAR 40
5678: PUSH
5679: LD_INT 43
5681: PUSH
5682: LD_INT 44
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: NOP4
5699: ARRAY
5700: ST_TO_ADDR
// vc_chassis = 22 ;
5701: LD_ADDR_OWVAR 37
5705: PUSH
5706: LD_INT 22
5708: ST_TO_ADDR
// veh = CreateVehicle ;
5709: NOP4
5713: PUSH
5714: NOP4
5718: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5719: NOP4
5723: PPUSH
5724: LD_INT 2
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: NOP4
// hc_gallery =  ;
5734: LD_ADDR_OWVAR 33
5738: PUSH
5739: LD_STRING 
5741: ST_TO_ADDR
// hc_name =  ;
5742: LD_ADDR_OWVAR 26
5746: PUSH
5747: LD_STRING 
5749: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 4
5758: PPUSH
5759: NOP4
// un = CreateHuman ;
5763: NOP4
5767: PUSH
5768: NOP4
5772: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5773: NOP4
5777: PPUSH
5778: NOP4
5782: PPUSH
5783: NOP4
// end ;
5787: GO 5639
5789: POP
5790: POP
// end ;
5791: LD_VAR 0 1
5795: RET
// export function PrepareRussians ; var i , un ; begin
5796: LD_INT 0
5798: PPUSH
5799: PPUSH
5800: PPUSH
// for i = 1 to 14 do
5801: NOP4
5805: PUSH
5806: DOUBLE
5807: LD_INT 1
5809: DEC
5810: ST_TO_ADDR
5811: LD_INT 14
5813: PUSH
5814: FOR_TO
5815: IFFALSE 5901
// begin uc_side = 3 ;
5817: LD_ADDR_OWVAR 20
5821: PUSH
5822: LD_INT 3
5824: ST_TO_ADDR
// uc_nation = 3 ;
5825: LD_ADDR_OWVAR 21
5829: PUSH
5830: LD_INT 3
5832: ST_TO_ADDR
// hc_gallery =  ;
5833: LD_ADDR_OWVAR 33
5837: PUSH
5838: LD_STRING 
5840: ST_TO_ADDR
// hc_name =  ;
5841: LD_ADDR_OWVAR 26
5845: PUSH
5846: LD_STRING 
5848: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5849: LD_INT 0
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: NOP4
5859: PPUSH
5860: NOP4
5864: PPUSH
5865: NOP4
5869: PPUSH
5870: NOP4
// un = CreateHuman ;
5874: NOP4
5878: PUSH
5879: NOP4
5883: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5884: NOP4
5888: PPUSH
5889: LD_INT 3
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: NOP4
// end ;
5899: GO 5814
5901: POP
5902: POP
// for i = 1 to 6 do
5903: NOP4
5907: PUSH
5908: DOUBLE
5909: LD_INT 1
5911: DEC
5912: ST_TO_ADDR
5913: LD_INT 6
5915: PUSH
5916: FOR_TO
5917: IFFALSE 6003
// begin uc_side = 3 ;
5919: LD_ADDR_OWVAR 20
5923: PUSH
5924: LD_INT 3
5926: ST_TO_ADDR
// uc_nation = 3 ;
5927: LD_ADDR_OWVAR 21
5931: PUSH
5932: LD_INT 3
5934: ST_TO_ADDR
// hc_gallery =  ;
5935: LD_ADDR_OWVAR 33
5939: PUSH
5940: LD_STRING 
5942: ST_TO_ADDR
// hc_name =  ;
5943: LD_ADDR_OWVAR 26
5947: PUSH
5948: LD_STRING 
5950: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5951: LD_INT 0
5953: PPUSH
5954: LD_INT 2
5956: PPUSH
5957: NOP4
5961: PPUSH
5962: NOP4
5966: PPUSH
5967: NOP4
5971: PPUSH
5972: NOP4
// un = CreateHuman ;
5976: NOP4
5980: PUSH
5981: NOP4
5985: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5986: NOP4
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: LD_INT 0
5996: PPUSH
5997: NOP4
// end ;
6001: GO 5916
6003: POP
6004: POP
// for i = 1 to 6 do
6005: NOP4
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 6
6017: PUSH
6018: FOR_TO
6019: IFFALSE 6105
// begin uc_side = 3 ;
6021: LD_ADDR_OWVAR 20
6025: PUSH
6026: LD_INT 3
6028: ST_TO_ADDR
// uc_nation = 3 ;
6029: LD_ADDR_OWVAR 21
6033: PUSH
6034: LD_INT 3
6036: ST_TO_ADDR
// hc_gallery =  ;
6037: LD_ADDR_OWVAR 33
6041: PUSH
6042: LD_STRING 
6044: ST_TO_ADDR
// hc_name =  ;
6045: LD_ADDR_OWVAR 26
6049: PUSH
6050: LD_STRING 
6052: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6053: LD_INT 0
6055: PPUSH
6056: LD_INT 3
6058: PPUSH
6059: NOP4
6063: PPUSH
6064: NOP4
6068: PPUSH
6069: NOP4
6073: PPUSH
6074: NOP4
// un = CreateHuman ;
6078: NOP4
6082: PUSH
6083: NOP4
6087: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6088: NOP4
6092: PPUSH
6093: LD_INT 3
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: NOP4
// end ;
6103: GO 6018
6105: POP
6106: POP
// for i = 1 to 4 do
6107: NOP4
6111: PUSH
6112: DOUBLE
6113: LD_INT 1
6115: DEC
6116: ST_TO_ADDR
6117: LD_INT 4
6119: PUSH
6120: FOR_TO
6121: IFFALSE 6207
// begin uc_side = 3 ;
6123: LD_ADDR_OWVAR 20
6127: PUSH
6128: LD_INT 3
6130: ST_TO_ADDR
// uc_nation = 3 ;
6131: LD_ADDR_OWVAR 21
6135: PUSH
6136: LD_INT 3
6138: ST_TO_ADDR
// hc_gallery =  ;
6139: LD_ADDR_OWVAR 33
6143: PUSH
6144: LD_STRING 
6146: ST_TO_ADDR
// hc_name =  ;
6147: LD_ADDR_OWVAR 26
6151: PUSH
6152: LD_STRING 
6154: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6155: LD_INT 0
6157: PPUSH
6158: LD_INT 4
6160: PPUSH
6161: NOP4
6165: PPUSH
6166: NOP4
6170: PPUSH
6171: NOP4
6175: PPUSH
6176: NOP4
// un = CreateHuman ;
6180: NOP4
6184: PUSH
6185: NOP4
6189: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6190: NOP4
6194: PPUSH
6195: LD_INT 3
6197: PPUSH
6198: LD_INT 0
6200: PPUSH
6201: NOP4
// end ;
6205: GO 6120
6207: POP
6208: POP
// end ; end_of_file
6209: LD_VAR 0 1
6213: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6214: LD_INT 0
6216: PPUSH
6217: PPUSH
// if exist_mode then
6218: NOP4
6222: IFFALSE 6241
// unit := CreateCharacter ( ident ) else
6224: NOP4
6228: PUSH
6229: NOP4
6233: PPUSH
6234: NOP4
6238: ST_TO_ADDR
6239: GO 6256
// unit := NewCharacter ( ident ) ;
6241: NOP4
6245: PUSH
6246: NOP4
6250: PPUSH
6251: NOP4
6255: ST_TO_ADDR
// result := unit ;
6256: NOP4
6260: PUSH
6261: NOP4
6265: ST_TO_ADDR
// end ;
6266: LD_VAR 0 3
6270: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6271: LD_INT 0
6273: PPUSH
6274: PPUSH
6275: PPUSH
// rnd = rand ( 1 , characters ) ;
6276: NOP4
6280: PUSH
6281: LD_INT 1
6283: PPUSH
6284: NOP4
6288: PPUSH
6289: NOP4
6293: ST_TO_ADDR
// for i = 1 to characters do
6294: NOP4
6298: PUSH
6299: DOUBLE
6300: LD_INT 1
6302: DEC
6303: ST_TO_ADDR
6304: NOP4
6308: PUSH
6309: FOR_TO
6310: IFFALSE 6420
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6312: NOP4
6316: PUSH
6317: NOP4
6321: EQUAL
6322: PUSH
6323: NOP4
6327: PUSH
6328: NOP4
6332: ARRAY
6333: PPUSH
6334: NOP4
6338: PUSH
6339: LD_INT 1
6341: EQUAL
6342: AND
6343: IFFALSE 6365
// Say ( characters [ i ] , dialogMID ) ;
6345: NOP4
6349: PUSH
6350: NOP4
6354: ARRAY
6355: PPUSH
6356: NOP4
6360: PPUSH
6361: NOP4
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6365: NOP4
6369: PUSH
6370: NOP4
6374: EQUAL
6375: PUSH
6376: NOP4
6380: PUSH
6381: NOP4
6385: ARRAY
6386: PPUSH
6387: NOP4
6391: PUSH
6392: LD_INT 2
6394: EQUAL
6395: AND
6396: IFFALSE 6418
// Say ( characters [ i ] , dialogFID ) ;
6398: NOP4
6402: PUSH
6403: NOP4
6407: ARRAY
6408: PPUSH
6409: NOP4
6413: PPUSH
6414: NOP4
// end ;
6418: GO 6309
6420: POP
6421: POP
// end ;
6422: LD_VAR 0 4
6426: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6427: LD_INT 0
6429: PPUSH
6430: PPUSH
6431: PPUSH
// uc_side := GetSide ( b ) ;
6432: LD_ADDR_OWVAR 20
6436: PUSH
6437: NOP4
6441: PPUSH
6442: NOP4
6446: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6447: LD_ADDR_OWVAR 21
6451: PUSH
6452: NOP4
6456: PPUSH
6457: NOP4
6461: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6462: LD_INT 0
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: NOP4
6472: PPUSH
6473: NOP4
// dir := GetDir ( b ) - 3 ;
6477: NOP4
6481: PUSH
6482: NOP4
6486: PPUSH
6487: NOP4
6491: PUSH
6492: LD_INT 3
6494: MINUS
6495: ST_TO_ADDR
// if dir < 0 then
6496: NOP4
6500: PUSH
6501: LD_INT 0
6503: LESS
6504: IFFALSE 6520
// dir := 6 + dir ;
6506: NOP4
6510: PUSH
6511: LD_INT 6
6513: PUSH
6514: NOP4
6518: PLUS
6519: ST_TO_ADDR
// un := CreateHuman ;
6520: NOP4
6524: PUSH
6525: NOP4
6529: ST_TO_ADDR
// SetDir ( un , dir ) ;
6530: NOP4
6534: PPUSH
6535: NOP4
6539: PPUSH
6540: NOP4
// PlaceHumanInUnit ( un , b ) ;
6544: NOP4
6548: PPUSH
6549: NOP4
6553: PPUSH
6554: NOP4
// end ;
6558: LD_VAR 0 3
6562: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6563: LD_INT 0
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
// for i = 1 to count do
6569: NOP4
6573: PUSH
6574: DOUBLE
6575: LD_INT 1
6577: DEC
6578: ST_TO_ADDR
6579: NOP4
6583: PUSH
6584: FOR_TO
6585: IFFALSE 6666
// begin uc_side = side ;
6587: LD_ADDR_OWVAR 20
6591: PUSH
6592: NOP4
6596: ST_TO_ADDR
// uc_nation = nation ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: NOP4
6606: ST_TO_ADDR
// hc_gallery =  ;
6607: LD_ADDR_OWVAR 33
6611: PUSH
6612: LD_STRING 
6614: ST_TO_ADDR
// hc_name =  ;
6615: LD_ADDR_OWVAR 26
6619: PUSH
6620: LD_STRING 
6622: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6623: LD_INT 0
6625: PPUSH
6626: NOP4
6630: PPUSH
6631: NOP4
6635: PPUSH
6636: NOP4
// un = CreateHuman ;
6640: NOP4
6644: PUSH
6645: NOP4
6649: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6650: NOP4
6654: PPUSH
6655: NOP4
6659: PPUSH
6660: NOP4
// end ;
6664: GO 6584
6666: POP
6667: POP
// end ;
6668: LD_VAR 0 7
6672: RET
// export function PrepareDifficulty ; begin
6673: LD_INT 0
6675: PPUSH
// if Difficulty = 1 then
6676: NOP4
6680: PUSH
6681: LD_INT 1
6683: EQUAL
6684: IFFALSE 6702
// begin RuSolMinLevel = 4 ;
6686: NOP4
6690: PUSH
6691: LD_INT 4
6693: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6694: NOP4
6698: PUSH
6699: LD_INT 6
6701: ST_TO_ADDR
// end ; if Difficulty = 2 then
6702: NOP4
6706: PUSH
6707: LD_INT 2
6709: EQUAL
6710: IFFALSE 6780
// begin RuSolMinLevel = 5 ;
6712: NOP4
6716: PUSH
6717: LD_INT 5
6719: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6720: NOP4
6724: PUSH
6725: LD_INT 6
6727: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6728: LD_INT 51
6730: PPUSH
6731: LD_INT 3
6733: PPUSH
6734: LD_INT 1
6736: PPUSH
6737: NOP4
// SetTech ( 57 , 3 , state_enabled ) ;
6741: LD_INT 57
6743: PPUSH
6744: LD_INT 3
6746: PPUSH
6747: LD_INT 1
6749: PPUSH
6750: NOP4
// SetTech ( 57 , 6 , state_researched ) ;
6754: LD_INT 57
6756: PPUSH
6757: LD_INT 6
6759: PPUSH
6760: LD_INT 2
6762: PPUSH
6763: NOP4
// SetTech ( 51 , 6 , state_researched ) ;
6767: LD_INT 51
6769: PPUSH
6770: LD_INT 6
6772: PPUSH
6773: LD_INT 2
6775: PPUSH
6776: NOP4
// end ; if Difficulty = 3 then
6780: NOP4
6784: PUSH
6785: LD_INT 3
6787: EQUAL
6788: IFFALSE 6871
// begin RuSolMinLevel = 5 ;
6790: NOP4
6794: PUSH
6795: LD_INT 5
6797: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6798: NOP4
6802: PUSH
6803: LD_INT 6
6805: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6806: LD_INT 57
6808: PPUSH
6809: LD_INT 3
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: NOP4
// SetTech ( 51 , 3 , state_enabled ) ;
6819: LD_INT 51
6821: PPUSH
6822: LD_INT 3
6824: PPUSH
6825: LD_INT 1
6827: PPUSH
6828: NOP4
// SetTech ( 52 , 3 , state_enabled ) ;
6832: LD_INT 52
6834: PPUSH
6835: LD_INT 3
6837: PPUSH
6838: LD_INT 1
6840: PPUSH
6841: NOP4
// SetTech ( 57 , 6 , state_researched ) ;
6845: LD_INT 57
6847: PPUSH
6848: LD_INT 6
6850: PPUSH
6851: LD_INT 2
6853: PPUSH
6854: NOP4
// SetTech ( 52 , 6 , state_researched ) ;
6858: LD_INT 52
6860: PPUSH
6861: LD_INT 6
6863: PPUSH
6864: LD_INT 2
6866: PPUSH
6867: NOP4
// end ; end ;
6871: LD_VAR 0 1
6875: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6876: LD_INT 0
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6882: NOP4
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_INT 3
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 25
6899: PUSH
6900: LD_INT 2
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: NOP4
6915: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6916: NOP4
6920: PUSH
6921: LD_INT 4
6923: PUSH
6924: LD_INT 75
6926: PUSH
6927: LD_INT 79
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 4
6941: PUSH
6942: LD_INT 113
6944: PUSH
6945: LD_INT 94
6947: PUSH
6948: LD_INT 4
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 29
6959: PUSH
6960: LD_INT 106
6962: PUSH
6963: LD_INT 97
6965: PUSH
6966: LD_INT 3
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 26
6977: PUSH
6978: LD_INT 93
6980: PUSH
6981: LD_INT 97
6983: PUSH
6984: LD_INT 5
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: LD_INT 100
6998: PUSH
6999: LD_INT 89
7001: PUSH
7002: LD_INT 3
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 17
7013: PUSH
7014: LD_INT 96
7016: PUSH
7017: LD_INT 89
7019: PUSH
7020: LD_INT 1
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: LD_INT 78
7034: PUSH
7035: LD_INT 94
7037: PUSH
7038: LD_INT 1
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 32
7049: PUSH
7050: LD_INT 95
7052: PUSH
7053: LD_INT 82
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 32
7067: PUSH
7068: LD_INT 104
7070: PUSH
7071: LD_INT 85
7073: PUSH
7074: LD_INT 2
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: LD_INT 81
7088: PUSH
7089: LD_INT 78
7091: PUSH
7092: LD_INT 2
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 33
7103: PUSH
7104: LD_INT 109
7106: PUSH
7107: LD_INT 90
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 33
7121: PUSH
7122: LD_INT 88
7124: PUSH
7125: LD_INT 79
7127: PUSH
7128: LD_INT 3
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 33
7139: PUSH
7140: LD_INT 76
7142: PUSH
7143: LD_INT 87
7145: PUSH
7146: LD_INT 1
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 26
7157: PUSH
7158: LD_INT 96
7160: PUSH
7161: LD_INT 97
7163: PUSH
7164: LD_INT 5
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 26
7175: PUSH
7176: LD_INT 85
7178: PUSH
7179: LD_INT 84
7181: PUSH
7182: LD_INT 2
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 6
7193: PUSH
7194: LD_INT 88
7196: PUSH
7197: LD_INT 95
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 19
7211: PUSH
7212: LD_INT 103
7214: PUSH
7215: LD_INT 89
7217: PUSH
7218: LD_INT 4
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 16
7229: PUSH
7230: LD_INT 97
7232: PUSH
7233: LD_INT 86
7235: PUSH
7236: LD_INT 2
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 24
7247: PUSH
7248: LD_INT 100
7250: PUSH
7251: LD_INT 85
7253: PUSH
7254: LD_INT 3
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: ST_TO_ADDR
// for i := 1 to buildingsTab do
7284: NOP4
7288: PUSH
7289: DOUBLE
7290: LD_INT 1
7292: DEC
7293: ST_TO_ADDR
7294: NOP4
7298: PUSH
7299: FOR_TO
7300: IFFALSE 7373
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7302: NOP4
7306: PPUSH
7307: NOP4
7311: PUSH
7312: NOP4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: NOP4
7326: PUSH
7327: NOP4
7331: ARRAY
7332: PUSH
7333: LD_INT 2
7335: ARRAY
7336: PPUSH
7337: NOP4
7341: PUSH
7342: NOP4
7346: ARRAY
7347: PUSH
7348: LD_INT 3
7350: ARRAY
7351: PPUSH
7352: NOP4
7356: PUSH
7357: NOP4
7361: ARRAY
7362: PUSH
7363: LD_INT 4
7365: ARRAY
7366: PPUSH
7367: NOP4
7371: GO 7299
7373: POP
7374: POP
// end ;
7375: LD_VAR 0 1
7379: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7380: LD_INT 0
7382: PPUSH
7383: PPUSH
// for i in charactersList do
7384: NOP4
7388: PUSH
7389: NOP4
7393: PUSH
7394: FOR_IN
7395: IFFALSE 7424
// begin if IsOk ( i ) then
7397: NOP4
7401: PPUSH
7402: NOP4
7406: IFFALSE 7422
// SaveCharacters ( i , ident ) ;
7408: NOP4
7412: PPUSH
7413: NOP4
7417: PPUSH
7418: NOP4
// end ;
7422: GO 7394
7424: POP
7425: POP
// end ;
7426: LD_VAR 0 3
7430: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7431: LD_INT 0
7433: PPUSH
7434: PPUSH
7435: PPUSH
7436: PPUSH
// for i = 1 to 72 do
7437: NOP4
7441: PUSH
7442: DOUBLE
7443: LD_INT 1
7445: DEC
7446: ST_TO_ADDR
7447: LD_INT 72
7449: PUSH
7450: FOR_TO
7451: IFFALSE 7509
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7453: NOP4
7457: PPUSH
7458: NOP4
7462: PPUSH
7463: NOP4
7467: PUSH
7468: LD_INT 1
7470: EQUAL
7471: PUSH
7472: NOP4
7476: PPUSH
7477: NOP4
7481: PPUSH
7482: NOP4
7486: PUSH
7487: LD_INT 1
7489: EQUAL
7490: AND
7491: IFFALSE 7507
// AddComResearch ( lab , i ) ;
7493: NOP4
7497: PPUSH
7498: NOP4
7502: PPUSH
7503: NOP4
7507: GO 7450
7509: POP
7510: POP
// end ;
7511: LD_VAR 0 4
7515: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7516: LD_INT 0
7518: PPUSH
7519: PPUSH
7520: PPUSH
7521: PPUSH
7522: PPUSH
7523: PPUSH
7524: PPUSH
7525: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7526: NOP4
7530: PUSH
7531: NOP4
7535: PPUSH
7536: LD_INT 22
7538: PUSH
7539: NOP4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 56
7550: PUSH
7551: EMPTY
7552: LIST
7553: PUSH
7554: LD_INT 24
7556: PUSH
7557: LD_INT 700
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: LD_INT 60
7569: PUSH
7570: EMPTY
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 1
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 25
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 25
7602: PUSH
7603: LD_INT 8
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 25
7612: PUSH
7613: LD_INT 9
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PPUSH
7634: NOP4
7638: PUSH
7639: NOP4
7643: PUSH
7644: EMPTY
7645: LIST
7646: DIFF
7647: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7648: NOP4
7652: PUSH
7653: NOP4
7657: PPUSH
7658: LD_INT 22
7660: PUSH
7661: NOP4
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 30
7672: PUSH
7673: LD_INT 32
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 58
7682: PUSH
7683: EMPTY
7684: LIST
7685: PUSH
7686: LD_INT 24
7688: PUSH
7689: LD_INT 251
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: PPUSH
7702: NOP4
7706: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7707: NOP4
7711: PUSH
7712: NOP4
7716: PPUSH
7717: LD_INT 22
7719: PUSH
7720: NOP4
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 30
7734: PUSH
7735: LD_INT 4
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 30
7744: PUSH
7745: LD_INT 5
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 24
7759: PUSH
7760: LD_INT 251
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PPUSH
7772: NOP4
7776: ST_TO_ADDR
// if barrackList > 0 then
7777: NOP4
7781: PUSH
7782: LD_INT 0
7784: GREATER
7785: IFFALSE 7933
// begin if turretList = 0 then
7787: NOP4
7791: PUSH
7792: LD_INT 0
7794: EQUAL
7795: IFFALSE 7837
// begin if soldiers_list > 0 then
7797: NOP4
7801: PUSH
7802: LD_INT 0
7804: GREATER
7805: IFFALSE 7835
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
7807: NOP4
7811: PPUSH
7812: NOP4
7816: PUSH
7817: LD_INT 1
7819: PPUSH
7820: NOP4
7824: PPUSH
7825: NOP4
7829: ARRAY
7830: PPUSH
7831: NOP4
// end else
7835: GO 7933
// begin for i in barrackList do
7837: NOP4
7841: PUSH
7842: NOP4
7846: PUSH
7847: FOR_IN
7848: IFFALSE 7931
// begin insideUnits = UnitsInside ( i ) ;
7850: NOP4
7854: PUSH
7855: NOP4
7859: PPUSH
7860: NOP4
7864: ST_TO_ADDR
// if insideUnits > 0 then
7865: NOP4
7869: PUSH
7870: LD_INT 0
7872: GREATER
7873: IFFALSE 7897
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
7875: NOP4
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: NOP4
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: NOP4
// if soldiers_list > 0 then
7897: NOP4
7901: PUSH
7902: LD_INT 0
7904: GREATER
7905: IFFALSE 7929
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
7907: NOP4
7911: PUSH
7912: LD_INT 1
7914: ARRAY
7915: PPUSH
7916: NOP4
7920: PUSH
7921: LD_INT 1
7923: ARRAY
7924: PPUSH
7925: NOP4
// end ;
7929: GO 7847
7931: POP
7932: POP
// end ; end ; end ;
7933: LD_VAR 0 3
7937: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
7945: PPUSH
// for i = 1 to infantryCount do
7946: NOP4
7950: PUSH
7951: DOUBLE
7952: LD_INT 1
7954: DEC
7955: ST_TO_ADDR
7956: NOP4
7960: PUSH
7961: FOR_TO
7962: IFFALSE 8078
// begin uc_side = side ;
7964: LD_ADDR_OWVAR 20
7968: PUSH
7969: NOP4
7973: ST_TO_ADDR
// uc_nation = nation ;
7974: LD_ADDR_OWVAR 21
7978: PUSH
7979: NOP4
7983: ST_TO_ADDR
// hc_class = 1 ;
7984: LD_ADDR_OWVAR 28
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// hc_name =  ;
7992: LD_ADDR_OWVAR 26
7996: PUSH
7997: LD_STRING 
7999: ST_TO_ADDR
// hc_gallery =  ;
8000: LD_ADDR_OWVAR 33
8004: PUSH
8005: LD_STRING 
8007: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8008: LD_INT 0
8010: PPUSH
8011: LD_INT 1
8013: PPUSH
8014: NOP4
8018: PPUSH
8019: NOP4
8023: PPUSH
8024: NOP4
8028: PPUSH
8029: NOP4
// un = CreateHuman ;
8033: NOP4
8037: PUSH
8038: NOP4
8042: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8043: NOP4
8047: PPUSH
8048: NOP4
8052: PPUSH
8053: LD_INT 0
8055: PPUSH
8056: NOP4
// defenders_list = defenders_list ^ un ;
8060: NOP4
8064: PUSH
8065: NOP4
8069: PUSH
8070: NOP4
8074: ADD
8075: ST_TO_ADDR
// end ;
8076: GO 7961
8078: POP
8079: POP
// for i = 1 to vehCount do
8080: NOP4
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: NOP4
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8303
// begin uc_side = side ;
8098: LD_ADDR_OWVAR 20
8102: PUSH
8103: NOP4
8107: ST_TO_ADDR
// uc_nation = nation ;
8108: LD_ADDR_OWVAR 21
8112: PUSH
8113: NOP4
8117: ST_TO_ADDR
// vc_Chassis = 22 ;
8118: LD_ADDR_OWVAR 37
8122: PUSH
8123: LD_INT 22
8125: ST_TO_ADDR
// vc_engine = 1 ;
8126: LD_ADDR_OWVAR 39
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// vc_control = 1 ;
8134: LD_ADDR_OWVAR 38
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8142: LD_ADDR_OWVAR 40
8146: PUSH
8147: LD_INT 43
8149: PUSH
8150: LD_INT 44
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 1
8159: PPUSH
8160: LD_INT 2
8162: PPUSH
8163: NOP4
8167: ARRAY
8168: ST_TO_ADDR
// veh = CreateVehicle ;
8169: NOP4
8173: PUSH
8174: NOP4
8178: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8179: NOP4
8183: PPUSH
8184: NOP4
8188: PPUSH
8189: LD_INT 0
8191: PPUSH
8192: NOP4
// defenders_list = defenders_list ^ veh ;
8196: NOP4
8200: PUSH
8201: NOP4
8205: PUSH
8206: NOP4
8210: ADD
8211: ST_TO_ADDR
// hc_class = 3 ;
8212: LD_ADDR_OWVAR 28
8216: PUSH
8217: LD_INT 3
8219: ST_TO_ADDR
// hc_name =  ;
8220: LD_ADDR_OWVAR 26
8224: PUSH
8225: LD_STRING 
8227: ST_TO_ADDR
// hc_gallery =  ;
8228: LD_ADDR_OWVAR 33
8232: PUSH
8233: LD_STRING 
8235: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8236: LD_INT 0
8238: PPUSH
8239: LD_INT 3
8241: PPUSH
8242: NOP4
8246: PPUSH
8247: NOP4
8251: PPUSH
8252: NOP4
8256: PPUSH
8257: NOP4
// un = CreateHuman ;
8261: NOP4
8265: PUSH
8266: NOP4
8270: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8271: NOP4
8275: PPUSH
8276: NOP4
8280: PPUSH
8281: NOP4
// defenders_list = defenders_list ^ un ;
8285: NOP4
8289: PUSH
8290: NOP4
8294: PUSH
8295: NOP4
8299: ADD
8300: ST_TO_ADDR
// end ;
8301: GO 8095
8303: POP
8304: POP
// end ;
8305: LD_VAR 0 7
8309: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8310: LD_INT 0
8312: PPUSH
8313: PPUSH
8314: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8315: NOP4
8319: PPUSH
8320: LD_INT 22
8322: PUSH
8323: NOP4
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: EMPTY
8333: LIST
8334: PPUSH
8335: NOP4
8339: PUSH
8340: LD_INT 0
8342: EQUAL
8343: PUSH
8344: NOP4
8348: PUSH
8349: LD_INT 0
8351: GREATER
8352: AND
8353: IFFALSE 8382
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8355: NOP4
8359: PPUSH
8360: LD_INT 65
8362: PPUSH
8363: LD_INT 68
8365: PPUSH
8366: NOP4
// SetFuel ( defenders_list , 100 ) ;
8370: NOP4
8374: PPUSH
8375: LD_INT 100
8377: PPUSH
8378: NOP4
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8382: NOP4
8386: PPUSH
8387: LD_INT 22
8389: PUSH
8390: NOP4
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: PPUSH
8402: NOP4
8406: PUSH
8407: LD_INT 0
8409: GREATER
8410: PUSH
8411: NOP4
8415: PUSH
8416: LD_INT 0
8418: GREATER
8419: AND
8420: IFFALSE 8499
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8422: NOP4
8426: PPUSH
8427: NOP4
8431: PPUSH
8432: LD_INT 22
8434: PUSH
8435: NOP4
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: PPUSH
8447: NOP4
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: NOP4
8460: PPUSH
8461: NOP4
8465: PPUSH
8466: LD_INT 22
8468: PUSH
8469: NOP4
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: PPUSH
8481: NOP4
8485: PUSH
8486: LD_INT 1
8488: ARRAY
8489: PPUSH
8490: NOP4
8494: PPUSH
8495: NOP4
// end ;
8499: LD_VAR 0 3
8503: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8504: LD_INT 0
8506: PPUSH
8507: PPUSH
8508: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8509: LD_INT 22
8511: PUSH
8512: NOP4
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 21
8523: PUSH
8524: LD_INT 2
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PPUSH
8535: NOP4
8539: PUSH
8540: NOP4
8544: LESSEQUAL
8545: IFFALSE 8653
// begin for i = 1 to vehCount do
8547: NOP4
8551: PUSH
8552: DOUBLE
8553: LD_INT 1
8555: DEC
8556: ST_TO_ADDR
8557: NOP4
8561: PUSH
8562: FOR_TO
8563: IFFALSE 8651
// begin weapon = weaponTab [ i ] ;
8565: NOP4
8569: PUSH
8570: NOP4
8574: PUSH
8575: NOP4
8579: ARRAY
8580: ST_TO_ADDR
// if weapon = 46 then
8581: NOP4
8585: PUSH
8586: LD_INT 46
8588: EQUAL
8589: IFFALSE 8620
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8591: NOP4
8595: PPUSH
8596: LD_INT 24
8598: PPUSH
8599: NOP4
8603: PPUSH
8604: NOP4
8608: PPUSH
8609: NOP4
8613: PPUSH
8614: NOP4
// end else
8618: GO 8649
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8620: NOP4
8624: PPUSH
8625: NOP4
8629: PPUSH
8630: NOP4
8634: PPUSH
8635: NOP4
8639: PPUSH
8640: NOP4
8644: PPUSH
8645: NOP4
// end ; end ;
8649: GO 8562
8651: POP
8652: POP
// end ; end ;
8653: LD_VAR 0 8
8657: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
8658: LD_INT 0
8660: PPUSH
8661: PPUSH
8662: PPUSH
8663: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8664: NOP4
8668: PUSH
8669: LD_INT 22
8671: PUSH
8672: NOP4
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 21
8683: PUSH
8684: LD_INT 2
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 24
8696: PUSH
8697: LD_INT 650
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PPUSH
8713: NOP4
8717: ST_TO_ADDR
// if damageVehicles > 0 then
8718: NOP4
8722: PUSH
8723: LD_INT 0
8725: GREATER
8726: IFFALSE 8747
// ComMoveXY ( damageVehicles , repX , repY ) ;
8728: NOP4
8732: PPUSH
8733: NOP4
8737: PPUSH
8738: NOP4
8742: PPUSH
8743: NOP4
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
8747: NOP4
8751: PPUSH
8752: LD_INT 95
8754: PUSH
8755: NOP4
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: LD_INT 58
8769: PUSH
8770: EMPTY
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: NOP4
8785: PUSH
8786: LD_INT 0
8788: GREATER
8789: IFFALSE 8856
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
8791: NOP4
8795: PUSH
8796: NOP4
8800: PPUSH
8801: LD_INT 95
8803: PUSH
8804: NOP4
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 3
8815: PUSH
8816: LD_INT 58
8818: PUSH
8819: EMPTY
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: NOP4
8834: PUSH
8835: FOR_IN
8836: IFFALSE 8854
// ComExitVehicle ( UnitsInside ( i ) ) ;
8838: NOP4
8842: PPUSH
8843: NOP4
8847: PPUSH
8848: NOP4
8852: GO 8835
8854: POP
8855: POP
// end ;
8856: LD_VAR 0 5
8860: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
8861: LD_INT 0
8863: PPUSH
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8870: NOP4
8874: PUSH
8875: LD_INT 22
8877: PUSH
8878: NOP4
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 21
8889: PUSH
8890: LD_INT 2
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: LD_INT 24
8899: PUSH
8900: LD_INT 250
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 58
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: LD_INT 34
8921: PUSH
8922: LD_INT 43
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 44
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 34
8941: PUSH
8942: LD_INT 46
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: PPUSH
8966: NOP4
8970: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
8971: LD_INT 22
8973: PUSH
8974: NOP4
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 2
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 24
8995: PUSH
8996: LD_INT 1000
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: LD_INT 58
9008: PUSH
9009: EMPTY
9010: LIST
9011: PUSH
9012: LD_INT 2
9014: PUSH
9015: LD_INT 34
9017: PUSH
9018: LD_INT 43
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 34
9027: PUSH
9028: LD_INT 44
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 34
9037: PUSH
9038: LD_INT 46
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: PPUSH
9062: NOP4
9066: PUSH
9067: LD_INT 5
9069: PUSH
9070: LD_INT 6
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: NOP4
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9652
// repeat wait ( 0 0$1 ) ;
9089: LD_INT 35
9091: PPUSH
9092: NOP4
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9096: NOP4
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: NOP4
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 24
9125: PUSH
9126: LD_INT 250
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: LD_INT 34
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 34
9148: PUSH
9149: LD_INT 44
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 34
9158: PUSH
9159: LD_INT 46
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 58
9177: PUSH
9178: EMPTY
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: NOP4
9196: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9197: LD_INT 22
9199: PUSH
9200: NOP4
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 95
9211: PUSH
9212: NOP4
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PPUSH
9225: NOP4
9229: NOT
9230: PUSH
9231: NOP4
9235: PUSH
9236: LD_INT 0
9238: EQUAL
9239: AND
9240: IFFALSE 9295
// for i := 1 to wayX do
9242: NOP4
9246: PUSH
9247: DOUBLE
9248: LD_INT 1
9250: DEC
9251: ST_TO_ADDR
9252: NOP4
9256: PUSH
9257: FOR_TO
9258: IFFALSE 9293
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9260: NOP4
9264: PPUSH
9265: NOP4
9269: PUSH
9270: NOP4
9274: ARRAY
9275: PPUSH
9276: NOP4
9280: PUSH
9281: NOP4
9285: ARRAY
9286: PPUSH
9287: NOP4
9291: GO 9257
9293: POP
9294: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9295: LD_INT 22
9297: PUSH
9298: NOP4
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 95
9309: PUSH
9310: NOP4
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: NOP4
9327: IFFALSE 9551
// begin seeEnemy = 1 ;
9329: NOP4
9333: PUSH
9334: LD_INT 1
9336: ST_TO_ADDR
// for j in vehiclesOK do
9337: NOP4
9341: PUSH
9342: NOP4
9346: PUSH
9347: FOR_IN
9348: IFFALSE 9549
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9350: NOP4
9354: PUSH
9355: LD_INT 81
9357: PUSH
9358: NOP4
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 101
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PPUSH
9381: NOP4
9385: PPUSH
9386: NOP4
9390: PPUSH
9391: NOP4
9395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9396: NOP4
9400: PUSH
9401: LD_INT 81
9403: PUSH
9404: NOP4
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 101
9415: PUSH
9416: LD_INT 1
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: LD_INT 59
9428: PUSH
9429: EMPTY
9430: LIST
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 1
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 21
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: PPUSH
9466: NOP4
9470: PPUSH
9471: NOP4
9475: PPUSH
9476: NOP4
9480: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9481: NOP4
9485: PPUSH
9486: NOP4
9490: PPUSH
9491: NOP4
9495: PUSH
9496: LD_INT 8
9498: PLUS
9499: PUSH
9500: NOP4
9504: PPUSH
9505: NOP4
9509: PPUSH
9510: NOP4
9514: LESS
9515: IFFALSE 9533
// ComAttackUnit ( j , target1 ) else
9517: NOP4
9521: PPUSH
9522: NOP4
9526: PPUSH
9527: NOP4
9531: GO 9547
// ComAttackUnit ( j , target2 ) ;
9533: NOP4
9537: PPUSH
9538: NOP4
9542: PPUSH
9543: NOP4
// end ;
9547: GO 9347
9549: POP
9550: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9551: LD_INT 22
9553: PUSH
9554: NOP4
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: LD_INT 21
9565: PUSH
9566: LD_INT 2
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 24
9575: PUSH
9576: LD_INT 250
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 34
9588: PUSH
9589: LD_INT 43
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 34
9598: PUSH
9599: LD_INT 44
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 34
9608: PUSH
9609: LD_INT 46
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 58
9627: PUSH
9628: EMPTY
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: PPUSH
9642: NOP4
9646: PUSH
9647: LD_INT 0
9649: EQUAL
9650: IFFALSE 9089
// seeEnemy = 0 ;
9652: NOP4
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// end ;
9660: LD_VAR 0 5
9664: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
9665: LD_INT 0
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
// repeat wait ( 0 0$1 ) ;
9673: LD_INT 35
9675: PPUSH
9676: NOP4
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
9680: NOP4
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: NOP4
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 21
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 24
9709: PUSH
9710: LD_INT 651
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: PPUSH
9722: NOP4
9726: ST_TO_ADDR
// for j in vehiclesOK do
9727: NOP4
9731: PUSH
9732: NOP4
9736: PUSH
9737: FOR_IN
9738: IFFALSE 9939
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9740: NOP4
9744: PUSH
9745: LD_INT 81
9747: PUSH
9748: NOP4
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 101
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PPUSH
9771: NOP4
9775: PPUSH
9776: NOP4
9780: PPUSH
9781: NOP4
9785: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9786: NOP4
9790: PUSH
9791: LD_INT 81
9793: PUSH
9794: NOP4
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 101
9805: PUSH
9806: LD_INT 1
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 2
9815: PUSH
9816: LD_INT 59
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_INT 21
9824: PUSH
9825: LD_INT 1
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 21
9834: PUSH
9835: LD_INT 2
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: NOP4
9860: PPUSH
9861: NOP4
9865: PPUSH
9866: NOP4
9870: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9871: NOP4
9875: PPUSH
9876: NOP4
9880: PPUSH
9881: NOP4
9885: PUSH
9886: LD_INT 8
9888: PLUS
9889: PUSH
9890: NOP4
9894: PPUSH
9895: NOP4
9899: PPUSH
9900: NOP4
9904: LESS
9905: IFFALSE 9923
// ComAttackUnit ( j , target1 ) else
9907: NOP4
9911: PPUSH
9912: NOP4
9916: PPUSH
9917: NOP4
9921: GO 9937
// ComAttackUnit ( j , target2 ) ;
9923: NOP4
9927: PPUSH
9928: NOP4
9932: PPUSH
9933: NOP4
// end ;
9937: GO 9737
9939: POP
9940: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
9941: LD_INT 22
9943: PUSH
9944: NOP4
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 21
9955: PUSH
9956: LD_INT 2
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 24
9965: PUSH
9966: LD_INT 250
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: PPUSH
9978: NOP4
9982: PUSH
9983: LD_INT 0
9985: EQUAL
9986: IFFALSE 9673
// end ;
9988: LD_VAR 0 2
9992: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9993: LD_INT 0
9995: PPUSH
9996: PPUSH
9997: PPUSH
9998: PPUSH
9999: PPUSH
10000: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10001: NOP4
10005: PUSH
10006: NOP4
10010: PPUSH
10011: NOP4
10015: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10016: NOP4
10020: PUSH
10021: NOP4
10025: PPUSH
10026: LD_INT 22
10028: PUSH
10029: NOP4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 24
10050: PUSH
10051: LD_INT 750
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 3
10060: PUSH
10061: LD_INT 54
10063: PUSH
10064: EMPTY
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: PPUSH
10077: NOP4
10081: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10082: NOP4
10086: PUSH
10087: NOP4
10091: PPUSH
10092: LD_INT 22
10094: PUSH
10095: NOP4
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 21
10106: PUSH
10107: LD_INT 3
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 3
10116: PUSH
10117: LD_INT 24
10119: PUSH
10120: LD_INT 1000
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: PPUSH
10139: NOP4
10143: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10144: NOP4
10148: NOT
10149: PUSH
10150: LD_INT 22
10152: PUSH
10153: NOP4
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 2
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 24
10174: PUSH
10175: LD_INT 250
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: PPUSH
10187: NOP4
10191: NOT
10192: AND
10193: IFFALSE 10197
// exit ;
10195: GO 10379
// if buildings_list > 0 and engineerOkInside then
10197: NOP4
10201: PUSH
10202: LD_INT 0
10204: GREATER
10205: PUSH
10206: NOP4
10210: AND
10211: IFFALSE 10222
// ComExitBuilding ( engineerOkInside ) ;
10213: NOP4
10217: PPUSH
10218: NOP4
// if buildings_list > 0 and engineerOkOutside > 0 then
10222: NOP4
10226: PUSH
10227: LD_INT 0
10229: GREATER
10230: PUSH
10231: NOP4
10235: PUSH
10236: LD_INT 0
10238: GREATER
10239: AND
10240: IFFALSE 10260
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10242: NOP4
10246: PPUSH
10247: NOP4
10251: PUSH
10252: LD_INT 1
10254: ARRAY
10255: PPUSH
10256: NOP4
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10260: NOP4
10264: PUSH
10265: LD_INT 0
10267: EQUAL
10268: PUSH
10269: NOP4
10273: PUSH
10274: LD_INT 0
10276: EQUAL
10277: AND
10278: PUSH
10279: NOP4
10283: PUSH
10284: LD_INT 0
10286: GREATER
10287: AND
10288: IFFALSE 10304
// ComEnterUnit ( engineerOkOutside , building ) ;
10290: NOP4
10294: PPUSH
10295: NOP4
10299: PPUSH
10300: NOP4
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10304: NOP4
10308: PUSH
10309: LD_INT 0
10311: GREATER
10312: PUSH
10313: NOP4
10317: PUSH
10318: LD_INT 0
10320: EQUAL
10321: AND
10322: PUSH
10323: NOP4
10327: PUSH
10328: LD_INT 0
10330: GREATER
10331: AND
10332: IFFALSE 10379
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10334: NOP4
10338: PPUSH
10339: NOP4
10343: PUSH
10344: LD_INT 1
10346: ARRAY
10347: PPUSH
10348: NOP4
10352: PUSH
10353: LD_INT 2
10355: ARRAY
10356: PPUSH
10357: NOP4
10361: PUSH
10362: LD_INT 3
10364: ARRAY
10365: PPUSH
10366: NOP4
10370: PUSH
10371: LD_INT 4
10373: ARRAY
10374: PPUSH
10375: NOP4
// end ;
10379: LD_VAR 0 5
10383: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
10388: PPUSH
10389: PPUSH
10390: PPUSH
10391: PPUSH
10392: PPUSH
10393: PPUSH
10394: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10395: NOP4
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: NOP4
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 25
10414: PUSH
10415: LD_INT 4
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 24
10434: PUSH
10435: LD_INT 251
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: PPUSH
10448: NOP4
10452: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10453: NOP4
10457: PUSH
10458: NOP4
10462: PPUSH
10463: LD_INT 22
10465: PUSH
10466: NOP4
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: LD_INT 23
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 25
10487: PUSH
10488: LD_INT 4
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 50
10497: PUSH
10498: EMPTY
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PPUSH
10507: NOP4
10511: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10512: NOP4
10516: PUSH
10517: NOP4
10521: PPUSH
10522: LD_INT 22
10524: PUSH
10525: NOP4
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 1
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 3
10546: PUSH
10547: LD_INT 25
10549: PUSH
10550: LD_INT 3
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 3
10563: PUSH
10564: LD_INT 24
10566: PUSH
10567: LD_INT 750
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PPUSH
10584: NOP4
10588: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10589: NOP4
10593: PUSH
10594: NOP4
10598: PPUSH
10599: LD_INT 22
10601: PUSH
10602: NOP4
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 21
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 3
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 3
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 3
10640: PUSH
10641: LD_INT 24
10643: PUSH
10644: LD_INT 1000
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PPUSH
10661: NOP4
10665: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10666: NOP4
10670: NOT
10671: PUSH
10672: NOP4
10676: NOT
10677: AND
10678: PUSH
10679: NOP4
10683: NOT
10684: AND
10685: IFFALSE 10689
// exit ;
10687: GO 10923
// if damageUnits > 0 and sci_list > 0 then
10689: NOP4
10693: PUSH
10694: LD_INT 0
10696: GREATER
10697: PUSH
10698: NOP4
10702: PUSH
10703: LD_INT 0
10705: GREATER
10706: AND
10707: IFFALSE 10723
// ComMoveToArea ( damageUnits , healArea ) ;
10709: NOP4
10713: PPUSH
10714: NOP4
10718: PPUSH
10719: NOP4
// if unitsToHeal > 0 and sci_list > 0 then
10723: NOP4
10727: PUSH
10728: LD_INT 0
10730: GREATER
10731: PUSH
10732: NOP4
10736: PUSH
10737: LD_INT 0
10739: GREATER
10740: AND
10741: IFFALSE 10752
// ComExitBuilding ( sci_list ) ;
10743: NOP4
10747: PPUSH
10748: NOP4
// if unitsToHeal > 0 and sci_listOutside > 0 then
10752: NOP4
10756: PUSH
10757: LD_INT 0
10759: GREATER
10760: PUSH
10761: NOP4
10765: PUSH
10766: LD_INT 0
10768: GREATER
10769: AND
10770: IFFALSE 10790
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10772: NOP4
10776: PPUSH
10777: NOP4
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: NOP4
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10790: NOP4
10794: PUSH
10795: LD_INT 0
10797: EQUAL
10798: PUSH
10799: NOP4
10803: PUSH
10804: LD_INT 0
10806: EQUAL
10807: AND
10808: PUSH
10809: NOP4
10813: PUSH
10814: LD_INT 0
10816: GREATER
10817: AND
10818: IFFALSE 10923
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10820: NOP4
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: NOP4
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 3
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 30
10849: PUSH
10850: LD_INT 8
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: PPUSH
10862: NOP4
10866: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10867: NOP4
10871: PUSH
10872: LD_INT 1
10874: PPUSH
10875: NOP4
10879: PPUSH
10880: NOP4
10884: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10885: NOP4
10889: PPUSH
10890: LD_INT 3
10892: PUSH
10893: LD_INT 60
10895: PUSH
10896: EMPTY
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: NOP4
10907: PPUSH
10908: NOP4
10912: PUSH
10913: NOP4
10917: ARRAY
10918: PPUSH
10919: NOP4
// end ; end ;
10923: LD_VAR 0 5
10927: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10928: LD_INT 0
10930: PPUSH
10931: PPUSH
10932: PPUSH
10933: PPUSH
10934: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10935: NOP4
10939: PUSH
10940: LD_INT 22
10942: PUSH
10943: NOP4
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 30
10957: PUSH
10958: LD_INT 31
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 30
10967: PUSH
10968: LD_INT 32
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 30
10977: PUSH
10978: LD_INT 33
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 30
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PPUSH
11017: NOP4
11021: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11022: NOP4
11026: PUSH
11027: LD_INT 22
11029: PUSH
11030: NOP4
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 58
11051: PUSH
11052: EMPTY
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: PPUSH
11060: NOP4
11064: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11065: NOP4
11069: PUSH
11070: LD_INT 0
11072: GREATER
11073: PUSH
11074: NOP4
11078: PUSH
11079: LD_INT 0
11081: GREATER
11082: AND
11083: IFFALSE 11153
// begin for i in turretsList do
11085: NOP4
11089: PUSH
11090: NOP4
11094: PUSH
11095: FOR_IN
11096: IFFALSE 11151
// begin for j in enemyBuildings do
11098: NOP4
11102: PUSH
11103: NOP4
11107: PUSH
11108: FOR_IN
11109: IFFALSE 11147
// begin if GetDistUnits ( i , j ) < 20 then
11111: NOP4
11115: PPUSH
11116: NOP4
11120: PPUSH
11121: NOP4
11125: PUSH
11126: LD_INT 20
11128: LESS
11129: IFFALSE 11145
// begin ComAttackUnit ( i , j ) ;
11131: NOP4
11135: PPUSH
11136: NOP4
11140: PPUSH
11141: NOP4
// end ; end ;
11145: GO 11108
11147: POP
11148: POP
// end ;
11149: GO 11095
11151: POP
11152: POP
// end ; end ;
11153: LD_VAR 0 3
11157: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11158: LD_INT 0
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
11169: PPUSH
11170: PPUSH
// for i = 1 to medicCount do
11171: NOP4
11175: PUSH
11176: DOUBLE
11177: LD_INT 1
11179: DEC
11180: ST_TO_ADDR
11181: NOP4
11185: PUSH
11186: FOR_TO
11187: IFFALSE 11269
// begin uc_side = side ;
11189: LD_ADDR_OWVAR 20
11193: PUSH
11194: NOP4
11198: ST_TO_ADDR
// uc_nation = nation ;
11199: LD_ADDR_OWVAR 21
11203: PUSH
11204: NOP4
11208: ST_TO_ADDR
// hc_name =  ;
11209: LD_ADDR_OWVAR 26
11213: PUSH
11214: LD_STRING 
11216: ST_TO_ADDR
// hc_gallery =  ;
11217: LD_ADDR_OWVAR 33
11221: PUSH
11222: LD_STRING 
11224: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11225: LD_INT 0
11227: PPUSH
11228: LD_INT 4
11230: PPUSH
11231: NOP4
11235: PPUSH
11236: NOP4
// un = CreateHuman ;
11240: NOP4
11244: PUSH
11245: NOP4
11249: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11250: NOP4
11254: PPUSH
11255: NOP4
11259: PPUSH
11260: LD_INT 0
11262: PPUSH
11263: NOP4
// end ;
11267: GO 11186
11269: POP
11270: POP
// for i = 1 to soldierCount do
11271: NOP4
11275: PUSH
11276: DOUBLE
11277: LD_INT 1
11279: DEC
11280: ST_TO_ADDR
11281: NOP4
11285: PUSH
11286: FOR_TO
11287: IFFALSE 11369
// begin uc_side = side ;
11289: LD_ADDR_OWVAR 20
11293: PUSH
11294: NOP4
11298: ST_TO_ADDR
// uc_nation = nation ;
11299: LD_ADDR_OWVAR 21
11303: PUSH
11304: NOP4
11308: ST_TO_ADDR
// hc_name =  ;
11309: LD_ADDR_OWVAR 26
11313: PUSH
11314: LD_STRING 
11316: ST_TO_ADDR
// hc_gallery =  ;
11317: LD_ADDR_OWVAR 33
11321: PUSH
11322: LD_STRING 
11324: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11325: LD_INT 0
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: NOP4
11335: PPUSH
11336: NOP4
// un = CreateHuman ;
11340: NOP4
11344: PUSH
11345: NOP4
11349: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11350: NOP4
11354: PPUSH
11355: NOP4
11359: PPUSH
11360: LD_INT 0
11362: PPUSH
11363: NOP4
// end ;
11367: GO 11286
11369: POP
11370: POP
// for i = 1 to sniperCount do
11371: NOP4
11375: PUSH
11376: DOUBLE
11377: LD_INT 1
11379: DEC
11380: ST_TO_ADDR
11381: NOP4
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11469
// begin uc_side = side ;
11389: LD_ADDR_OWVAR 20
11393: PUSH
11394: NOP4
11398: ST_TO_ADDR
// uc_nation = nation ;
11399: LD_ADDR_OWVAR 21
11403: PUSH
11404: NOP4
11408: ST_TO_ADDR
// hc_name =  ;
11409: LD_ADDR_OWVAR 26
11413: PUSH
11414: LD_STRING 
11416: ST_TO_ADDR
// hc_gallery =  ;
11417: LD_ADDR_OWVAR 33
11421: PUSH
11422: LD_STRING 
11424: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11425: LD_INT 0
11427: PPUSH
11428: LD_INT 5
11430: PPUSH
11431: NOP4
11435: PPUSH
11436: NOP4
// un = CreateHuman ;
11440: NOP4
11444: PUSH
11445: NOP4
11449: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11450: NOP4
11454: PPUSH
11455: NOP4
11459: PPUSH
11460: LD_INT 0
11462: PPUSH
11463: NOP4
// end ;
11467: GO 11386
11469: POP
11470: POP
// for i = 1 to bazookCount do
11471: NOP4
11475: PUSH
11476: DOUBLE
11477: LD_INT 1
11479: DEC
11480: ST_TO_ADDR
11481: NOP4
11485: PUSH
11486: FOR_TO
11487: IFFALSE 11569
// begin uc_side = side ;
11489: LD_ADDR_OWVAR 20
11493: PUSH
11494: NOP4
11498: ST_TO_ADDR
// uc_nation = nation ;
11499: LD_ADDR_OWVAR 21
11503: PUSH
11504: NOP4
11508: ST_TO_ADDR
// hc_name =  ;
11509: LD_ADDR_OWVAR 26
11513: PUSH
11514: LD_STRING 
11516: ST_TO_ADDR
// hc_gallery =  ;
11517: LD_ADDR_OWVAR 33
11521: PUSH
11522: LD_STRING 
11524: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11525: LD_INT 0
11527: PPUSH
11528: LD_INT 9
11530: PPUSH
11531: NOP4
11535: PPUSH
11536: NOP4
// un = CreateHuman ;
11540: NOP4
11544: PUSH
11545: NOP4
11549: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11550: NOP4
11554: PPUSH
11555: NOP4
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: NOP4
// end ;
11567: GO 11486
11569: POP
11570: POP
// for i = 1 to mortalCount do
11571: NOP4
11575: PUSH
11576: DOUBLE
11577: LD_INT 1
11579: DEC
11580: ST_TO_ADDR
11581: NOP4
11585: PUSH
11586: FOR_TO
11587: IFFALSE 11669
// begin uc_side = side ;
11589: LD_ADDR_OWVAR 20
11593: PUSH
11594: NOP4
11598: ST_TO_ADDR
// uc_nation = nation ;
11599: LD_ADDR_OWVAR 21
11603: PUSH
11604: NOP4
11608: ST_TO_ADDR
// hc_name =  ;
11609: LD_ADDR_OWVAR 26
11613: PUSH
11614: LD_STRING 
11616: ST_TO_ADDR
// hc_gallery =  ;
11617: LD_ADDR_OWVAR 33
11621: PUSH
11622: LD_STRING 
11624: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11625: LD_INT 0
11627: PPUSH
11628: LD_INT 8
11630: PPUSH
11631: NOP4
11635: PPUSH
11636: NOP4
// un = CreateHuman ;
11640: NOP4
11644: PUSH
11645: NOP4
11649: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11650: NOP4
11654: PPUSH
11655: NOP4
11659: PPUSH
11660: LD_INT 0
11662: PPUSH
11663: NOP4
// end ;
11667: GO 11586
11669: POP
11670: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11671: NOP4
11675: PUSH
11676: LD_INT 22
11678: PUSH
11679: NOP4
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 5
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 8
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 25
11723: PUSH
11724: LD_INT 9
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: NOP4
11746: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11747: NOP4
11751: PUSH
11752: LD_INT 22
11754: PUSH
11755: NOP4
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 4
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PPUSH
11778: NOP4
11782: ST_TO_ADDR
// for i in medic_list do
11783: NOP4
11787: PUSH
11788: NOP4
11792: PUSH
11793: FOR_IN
11794: IFFALSE 11812
// ComMoveToArea ( i , healArea ) ;
11796: NOP4
11800: PPUSH
11801: NOP4
11805: PPUSH
11806: NOP4
11810: GO 11793
11812: POP
11813: POP
// if strategy = 1 then
11814: NOP4
11818: PUSH
11819: LD_INT 1
11821: EQUAL
11822: IFFALSE 12368
// begin repeat wait ( 0 0$3 ) ;
11824: LD_INT 105
11826: PPUSH
11827: NOP4
// for i in soldiersOK_list do
11831: NOP4
11835: PUSH
11836: NOP4
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11906
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11844: NOP4
11848: PPUSH
11849: LD_INT 91
11851: PPUSH
11852: LD_INT 63
11854: PPUSH
11855: NOP4
// AddComAgressiveMove ( i , 101 , 53 ) ;
11859: NOP4
11863: PPUSH
11864: LD_INT 101
11866: PPUSH
11867: LD_INT 53
11869: PPUSH
11870: NOP4
// AddComAgressiveMove ( i , 75 , 23 ) ;
11874: NOP4
11878: PPUSH
11879: LD_INT 75
11881: PPUSH
11882: LD_INT 23
11884: PPUSH
11885: NOP4
// AddComAgressiveMove ( i , 78 , 8 ) ;
11889: NOP4
11893: PPUSH
11894: LD_INT 78
11896: PPUSH
11897: LD_INT 8
11899: PPUSH
11900: NOP4
// end ;
11904: GO 11841
11906: POP
11907: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
11908: LD_INT 12
11910: PPUSH
11911: LD_INT 22
11913: PUSH
11914: NOP4
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: NOP4
11927: PUSH
11928: LD_INT 2
11930: GREATER
11931: IFFALSE 11824
// repeat wait ( 0 0$1 ) ;
11933: LD_INT 35
11935: PPUSH
11936: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11940: NOP4
11944: PUSH
11945: LD_INT 22
11947: PUSH
11948: NOP4
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: LD_INT 24
11965: PUSH
11966: LD_INT 550
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 24
11979: PUSH
11980: LD_INT 250
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: NOP4
12000: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12001: NOP4
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: NOP4
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 2
12020: PUSH
12021: LD_INT 25
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 25
12033: PUSH
12034: LD_INT 5
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 25
12043: PUSH
12044: LD_INT 8
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 9
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 24
12070: PUSH
12071: LD_INT 1000
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: PPUSH
12083: NOP4
12087: ST_TO_ADDR
// if medicCount > 0 then
12088: NOP4
12092: PUSH
12093: LD_INT 0
12095: GREATER
12096: IFFALSE 12170
// begin if damageUnit_list > 0 then
12098: NOP4
12102: PUSH
12103: LD_INT 0
12105: GREATER
12106: IFFALSE 12170
// begin for i in damageUnit_list do
12108: NOP4
12112: PUSH
12113: NOP4
12117: PUSH
12118: FOR_IN
12119: IFFALSE 12168
// begin ComMoveToArea ( i , healArea ) ;
12121: NOP4
12125: PPUSH
12126: NOP4
12130: PPUSH
12131: NOP4
// for j in medic_list do
12135: NOP4
12139: PUSH
12140: NOP4
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12164
// AddComHeal ( j , i ) ;
12148: NOP4
12152: PPUSH
12153: NOP4
12157: PPUSH
12158: NOP4
12162: GO 12145
12164: POP
12165: POP
// end ;
12166: GO 12118
12168: POP
12169: POP
// end ; end ; for i in soldiersOK_list do
12170: NOP4
12174: PUSH
12175: NOP4
12179: PUSH
12180: FOR_IN
12181: IFFALSE 12357
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12183: NOP4
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: NOP4
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PPUSH
12200: NOP4
12204: PPUSH
12205: NOP4
12209: PPUSH
12210: NOP4
12214: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12215: NOP4
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: NOP4
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 2
12234: PUSH
12235: LD_INT 59
12237: PUSH
12238: EMPTY
12239: LIST
12240: PUSH
12241: LD_INT 21
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 21
12253: PUSH
12254: LD_INT 2
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: PPUSH
12274: NOP4
12278: PPUSH
12279: NOP4
12283: PPUSH
12284: NOP4
12288: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12289: NOP4
12293: PPUSH
12294: NOP4
12298: PPUSH
12299: NOP4
12303: PUSH
12304: LD_INT 6
12306: PLUS
12307: PUSH
12308: NOP4
12312: PPUSH
12313: NOP4
12317: PPUSH
12318: NOP4
12322: LESS
12323: IFFALSE 12341
// begin ComAttackUnit ( i , target1 ) ;
12325: NOP4
12329: PPUSH
12330: NOP4
12334: PPUSH
12335: NOP4
// end else
12339: GO 12355
// begin ComAttackUnit ( i , target2 ) ;
12341: NOP4
12345: PPUSH
12346: NOP4
12350: PPUSH
12351: NOP4
// end ; end ;
12355: GO 12180
12357: POP
12358: POP
// until soldiersOK_list = [ ] ;
12359: NOP4
12363: PUSH
12364: EMPTY
12365: EQUAL
12366: IFFALSE 11933
// end ; if strategy = 2 then
12368: NOP4
12372: PUSH
12373: LD_INT 2
12375: EQUAL
12376: IFFALSE 12892
// begin repeat wait ( 0 0$1 ) ;
12378: LD_INT 35
12380: PPUSH
12381: NOP4
// for i in soldiersOK_list do
12385: NOP4
12389: PUSH
12390: NOP4
12394: PUSH
12395: FOR_IN
12396: IFFALSE 12430
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12398: NOP4
12402: PPUSH
12403: LD_INT 91
12405: PPUSH
12406: LD_INT 63
12408: PPUSH
12409: NOP4
// AddComAgressiveMove ( i , 75 , 33 ) ;
12413: NOP4
12417: PPUSH
12418: LD_INT 75
12420: PPUSH
12421: LD_INT 33
12423: PPUSH
12424: NOP4
// end ;
12428: GO 12395
12430: POP
12431: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12432: LD_INT 13
12434: PPUSH
12435: LD_INT 22
12437: PUSH
12438: NOP4
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: NOP4
12451: PUSH
12452: LD_INT 2
12454: GREATER
12455: IFFALSE 12378
// repeat wait ( 0 0$3 ) ;
12457: LD_INT 105
12459: PPUSH
12460: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12464: NOP4
12468: PUSH
12469: LD_INT 22
12471: PUSH
12472: NOP4
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 1
12483: PUSH
12484: LD_INT 3
12486: PUSH
12487: LD_INT 24
12489: PUSH
12490: LD_INT 550
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 24
12503: PUSH
12504: LD_INT 250
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: NOP4
12524: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12525: NOP4
12529: PUSH
12530: LD_INT 22
12532: PUSH
12533: NOP4
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 25
12557: PUSH
12558: LD_INT 5
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 25
12567: PUSH
12568: LD_INT 8
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 25
12577: PUSH
12578: LD_INT 9
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 24
12594: PUSH
12595: LD_INT 1000
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: PPUSH
12607: NOP4
12611: ST_TO_ADDR
// if medicCount > 0 then
12612: NOP4
12616: PUSH
12617: LD_INT 0
12619: GREATER
12620: IFFALSE 12694
// begin if damageUnit_list > 0 then
12622: NOP4
12626: PUSH
12627: LD_INT 0
12629: GREATER
12630: IFFALSE 12694
// begin for i in damageUnit_list do
12632: NOP4
12636: PUSH
12637: NOP4
12641: PUSH
12642: FOR_IN
12643: IFFALSE 12692
// begin ComMoveToArea ( i , healArea ) ;
12645: NOP4
12649: PPUSH
12650: NOP4
12654: PPUSH
12655: NOP4
// for j in medic_list do
12659: NOP4
12663: PUSH
12664: NOP4
12668: PUSH
12669: FOR_IN
12670: IFFALSE 12688
// AddComHeal ( j , i ) ;
12672: NOP4
12676: PPUSH
12677: NOP4
12681: PPUSH
12682: NOP4
12686: GO 12669
12688: POP
12689: POP
// end ;
12690: GO 12642
12692: POP
12693: POP
// end ; end ; for i in soldiersOK_list do
12694: NOP4
12698: PUSH
12699: NOP4
12703: PUSH
12704: FOR_IN
12705: IFFALSE 12881
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12707: NOP4
12711: PUSH
12712: LD_INT 22
12714: PUSH
12715: NOP4
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: NOP4
12728: PPUSH
12729: NOP4
12733: PPUSH
12734: NOP4
12738: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12739: NOP4
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: NOP4
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 2
12758: PUSH
12759: LD_INT 59
12761: PUSH
12762: EMPTY
12763: LIST
12764: PUSH
12765: LD_INT 21
12767: PUSH
12768: LD_INT 1
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 21
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: PPUSH
12798: NOP4
12802: PPUSH
12803: NOP4
12807: PPUSH
12808: NOP4
12812: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12813: NOP4
12817: PPUSH
12818: NOP4
12822: PPUSH
12823: NOP4
12827: PUSH
12828: LD_INT 6
12830: PLUS
12831: PUSH
12832: NOP4
12836: PPUSH
12837: NOP4
12841: PPUSH
12842: NOP4
12846: LESS
12847: IFFALSE 12865
// begin ComAttackUnit ( i , target1 ) ;
12849: NOP4
12853: PPUSH
12854: NOP4
12858: PPUSH
12859: NOP4
// end else
12863: GO 12879
// begin ComAttackUnit ( i , target2 ) ;
12865: NOP4
12869: PPUSH
12870: NOP4
12874: PPUSH
12875: NOP4
// end ; end ;
12879: GO 12704
12881: POP
12882: POP
// until soldiersOK_list = [ ] ;
12883: NOP4
12887: PUSH
12888: EMPTY
12889: EQUAL
12890: IFFALSE 12457
// end ; if strategy = 3 then
12892: NOP4
12896: PUSH
12897: LD_INT 3
12899: EQUAL
12900: IFFALSE 13446
// begin repeat wait ( 0 0$3 ) ;
12902: LD_INT 105
12904: PPUSH
12905: NOP4
// for i in soldiersOK_list do
12909: NOP4
12913: PUSH
12914: NOP4
12918: PUSH
12919: FOR_IN
12920: IFFALSE 12984
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12922: NOP4
12926: PPUSH
12927: LD_INT 63
12929: PPUSH
12930: LD_INT 71
12932: PPUSH
12933: NOP4
// AddComAgressiveMove ( i , 35 , 44 ) ;
12937: NOP4
12941: PPUSH
12942: LD_INT 35
12944: PPUSH
12945: LD_INT 44
12947: PPUSH
12948: NOP4
// AddComAgressiveMove ( i , 23 , 18 ) ;
12952: NOP4
12956: PPUSH
12957: LD_INT 23
12959: PPUSH
12960: LD_INT 18
12962: PPUSH
12963: NOP4
// AddComAgressiveMove ( i , 26 , 12 ) ;
12967: NOP4
12971: PPUSH
12972: LD_INT 26
12974: PPUSH
12975: LD_INT 12
12977: PPUSH
12978: NOP4
// end ;
12982: GO 12919
12984: POP
12985: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
12986: LD_INT 14
12988: PPUSH
12989: LD_INT 22
12991: PUSH
12992: NOP4
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PPUSH
13001: NOP4
13005: PUSH
13006: LD_INT 2
13008: GREATER
13009: IFFALSE 12902
// repeat wait ( 0 0$1 ) ;
13011: LD_INT 35
13013: PPUSH
13014: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13018: NOP4
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: NOP4
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: LD_INT 3
13040: PUSH
13041: LD_INT 24
13043: PUSH
13044: LD_INT 550
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 24
13057: PUSH
13058: LD_INT 250
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: NOP4
13078: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13079: NOP4
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: NOP4
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 25
13111: PUSH
13112: LD_INT 5
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 8
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 9
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 24
13148: PUSH
13149: LD_INT 1000
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: PPUSH
13161: NOP4
13165: ST_TO_ADDR
// if medicCount > 0 then
13166: NOP4
13170: PUSH
13171: LD_INT 0
13173: GREATER
13174: IFFALSE 13248
// begin if damageUnit_list > 0 then
13176: NOP4
13180: PUSH
13181: LD_INT 0
13183: GREATER
13184: IFFALSE 13248
// begin for i in damageUnit_list do
13186: NOP4
13190: PUSH
13191: NOP4
13195: PUSH
13196: FOR_IN
13197: IFFALSE 13246
// begin ComMoveToArea ( i , healArea ) ;
13199: NOP4
13203: PPUSH
13204: NOP4
13208: PPUSH
13209: NOP4
// for j in medic_list do
13213: NOP4
13217: PUSH
13218: NOP4
13222: PUSH
13223: FOR_IN
13224: IFFALSE 13242
// AddComHeal ( j , i ) ;
13226: NOP4
13230: PPUSH
13231: NOP4
13235: PPUSH
13236: NOP4
13240: GO 13223
13242: POP
13243: POP
// end ;
13244: GO 13196
13246: POP
13247: POP
// end ; end ; for i in soldiersOK_list do
13248: NOP4
13252: PUSH
13253: NOP4
13257: PUSH
13258: FOR_IN
13259: IFFALSE 13435
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13261: NOP4
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: NOP4
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: NOP4
13282: PPUSH
13283: NOP4
13287: PPUSH
13288: NOP4
13292: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13293: NOP4
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: NOP4
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 2
13312: PUSH
13313: LD_INT 59
13315: PUSH
13316: EMPTY
13317: LIST
13318: PUSH
13319: LD_INT 21
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: EMPTY
13350: LIST
13351: PPUSH
13352: NOP4
13356: PPUSH
13357: NOP4
13361: PPUSH
13362: NOP4
13366: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13367: NOP4
13371: PPUSH
13372: NOP4
13376: PPUSH
13377: NOP4
13381: PUSH
13382: LD_INT 6
13384: PLUS
13385: PUSH
13386: NOP4
13390: PPUSH
13391: NOP4
13395: PPUSH
13396: NOP4
13400: LESS
13401: IFFALSE 13419
// begin ComAttackUnit ( i , target1 ) ;
13403: NOP4
13407: PPUSH
13408: NOP4
13412: PPUSH
13413: NOP4
// end else
13417: GO 13433
// begin ComAttackUnit ( i , target2 ) ;
13419: NOP4
13423: PPUSH
13424: NOP4
13428: PPUSH
13429: NOP4
// end ; end ;
13433: GO 13258
13435: POP
13436: POP
// until soldiersOK_list = [ ] ;
13437: NOP4
13441: PUSH
13442: EMPTY
13443: EQUAL
13444: IFFALSE 13011
// end ; end ;
13446: LD_VAR 0 13
13450: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13451: LD_INT 0
13453: PPUSH
13454: PPUSH
13455: PPUSH
13456: PPUSH
13457: PPUSH
13458: PPUSH
13459: PPUSH
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
// amChassisTab = [ ] ;
13464: NOP4
13468: PUSH
13469: EMPTY
13470: ST_TO_ADDR
// arChassisTab = [ ] ;
13471: NOP4
13475: PUSH
13476: EMPTY
13477: ST_TO_ADDR
// ruChassisTab = [ ] ;
13478: NOP4
13482: PUSH
13483: EMPTY
13484: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13485: LD_INT 35
13487: PPUSH
13488: NOP4
// if nation = 1 then
13492: NOP4
13496: PUSH
13497: LD_INT 1
13499: EQUAL
13500: IFFALSE 13991
// begin uc_side = side ;
13502: LD_ADDR_OWVAR 20
13506: PUSH
13507: NOP4
13511: ST_TO_ADDR
// uc_nation = nation ;
13512: LD_ADDR_OWVAR 21
13516: PUSH
13517: NOP4
13521: ST_TO_ADDR
// vc_engine = vehengine ;
13522: LD_ADDR_OWVAR 39
13526: PUSH
13527: NOP4
13531: ST_TO_ADDR
// vc_control = vehcontrol ;
13532: LD_ADDR_OWVAR 38
13536: PUSH
13537: NOP4
13541: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13542: LD_ADDR_OWVAR 40
13546: PUSH
13547: NOP4
13551: PUSH
13552: LD_INT 1
13554: PPUSH
13555: NOP4
13559: PPUSH
13560: NOP4
13564: ARRAY
13565: ST_TO_ADDR
// for j = 1 to AMWeapon do
13566: NOP4
13570: PUSH
13571: DOUBLE
13572: LD_INT 1
13574: DEC
13575: ST_TO_ADDR
13576: NOP4
13580: PUSH
13581: FOR_TO
13582: IFFALSE 13883
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13584: NOP4
13588: PUSH
13589: NOP4
13593: ARRAY
13594: PUSH
13595: LD_INT 2
13597: EQUAL
13598: PUSH
13599: NOP4
13603: PUSH
13604: NOP4
13608: ARRAY
13609: PUSH
13610: LD_INT 3
13612: EQUAL
13613: OR
13614: IFFALSE 13667
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13616: NOP4
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: LD_INT 3
13629: PUSH
13630: LD_INT 4
13632: PUSH
13633: LD_INT 5
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13643: LD_ADDR_OWVAR 37
13647: PUSH
13648: NOP4
13652: PUSH
13653: LD_INT 1
13655: PPUSH
13656: NOP4
13660: PPUSH
13661: NOP4
13665: ARRAY
13666: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13667: NOP4
13671: PUSH
13672: NOP4
13676: ARRAY
13677: PUSH
13678: LD_INT 4
13680: EQUAL
13681: PUSH
13682: NOP4
13686: PUSH
13687: NOP4
13691: ARRAY
13692: PUSH
13693: LD_INT 5
13695: EQUAL
13696: OR
13697: PUSH
13698: NOP4
13702: PUSH
13703: NOP4
13707: ARRAY
13708: PUSH
13709: LD_INT 9
13711: EQUAL
13712: OR
13713: PUSH
13714: NOP4
13718: PUSH
13719: NOP4
13723: ARRAY
13724: PUSH
13725: LD_INT 11
13727: EQUAL
13728: OR
13729: PUSH
13730: NOP4
13734: PUSH
13735: NOP4
13739: ARRAY
13740: PUSH
13741: LD_INT 7
13743: EQUAL
13744: OR
13745: IFFALSE 13794
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13747: NOP4
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 3
13757: PUSH
13758: LD_INT 4
13760: PUSH
13761: LD_INT 5
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13770: LD_ADDR_OWVAR 37
13774: PUSH
13775: NOP4
13779: PUSH
13780: LD_INT 1
13782: PPUSH
13783: NOP4
13787: PPUSH
13788: NOP4
13792: ARRAY
13793: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13794: NOP4
13798: PUSH
13799: NOP4
13803: ARRAY
13804: PUSH
13805: LD_INT 8
13807: EQUAL
13808: PUSH
13809: NOP4
13813: PUSH
13814: NOP4
13818: ARRAY
13819: PUSH
13820: LD_INT 6
13822: EQUAL
13823: OR
13824: PUSH
13825: NOP4
13829: PUSH
13830: NOP4
13834: ARRAY
13835: PUSH
13836: LD_INT 10
13838: EQUAL
13839: OR
13840: IFFALSE 13881
// begin amChassisTab = [ 4 , 5 ] ;
13842: NOP4
13846: PUSH
13847: LD_INT 4
13849: PUSH
13850: LD_INT 5
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13857: LD_ADDR_OWVAR 37
13861: PUSH
13862: NOP4
13866: PUSH
13867: LD_INT 1
13869: PPUSH
13870: NOP4
13874: PPUSH
13875: NOP4
13879: ARRAY
13880: ST_TO_ADDR
// end ; end ;
13881: GO 13581
13883: POP
13884: POP
// veh = CreateVehicle ;
13885: NOP4
13889: PUSH
13890: NOP4
13894: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13895: NOP4
13899: PPUSH
13900: NOP4
13904: PPUSH
13905: LD_INT 0
13907: PPUSH
13908: NOP4
// if vehControl = 1 then
13912: NOP4
13916: PUSH
13917: LD_INT 1
13919: EQUAL
13920: IFFALSE 13977
// begin hc_gallery =  ;
13922: LD_ADDR_OWVAR 33
13926: PUSH
13927: LD_STRING 
13929: ST_TO_ADDR
// hc_name =  ;
13930: LD_ADDR_OWVAR 26
13934: PUSH
13935: LD_STRING 
13937: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13938: LD_INT 0
13940: PPUSH
13941: LD_INT 3
13943: PPUSH
13944: NOP4
13948: PPUSH
13949: NOP4
// un = CreateHuman ;
13953: NOP4
13957: PUSH
13958: NOP4
13962: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13963: NOP4
13967: PPUSH
13968: NOP4
13972: PPUSH
13973: NOP4
// end ; i = i + 1 ;
13977: NOP4
13981: PUSH
13982: NOP4
13986: PUSH
13987: LD_INT 1
13989: PLUS
13990: ST_TO_ADDR
// end ; if nation = 2 then
13991: NOP4
13995: PUSH
13996: LD_INT 2
13998: EQUAL
13999: IFFALSE 14423
// begin uc_side = side ;
14001: LD_ADDR_OWVAR 20
14005: PUSH
14006: NOP4
14010: ST_TO_ADDR
// uc_nation = nation ;
14011: LD_ADDR_OWVAR 21
14015: PUSH
14016: NOP4
14020: ST_TO_ADDR
// vc_engine = vehengine ;
14021: LD_ADDR_OWVAR 39
14025: PUSH
14026: NOP4
14030: ST_TO_ADDR
// vc_control = vehcontrol ;
14031: LD_ADDR_OWVAR 38
14035: PUSH
14036: NOP4
14040: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14041: LD_ADDR_OWVAR 40
14045: PUSH
14046: NOP4
14050: PUSH
14051: LD_INT 1
14053: PPUSH
14054: NOP4
14058: PPUSH
14059: NOP4
14063: ARRAY
14064: ST_TO_ADDR
// for j = 1 to ARWeapons do
14065: NOP4
14069: PUSH
14070: DOUBLE
14071: LD_INT 1
14073: DEC
14074: ST_TO_ADDR
14075: NOP4
14079: PUSH
14080: FOR_TO
14081: IFFALSE 14315
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14083: NOP4
14087: PUSH
14088: NOP4
14092: ARRAY
14093: PUSH
14094: LD_INT 24
14096: EQUAL
14097: PUSH
14098: NOP4
14102: PUSH
14103: NOP4
14107: ARRAY
14108: PUSH
14109: LD_INT 22
14111: EQUAL
14112: OR
14113: PUSH
14114: NOP4
14118: PUSH
14119: NOP4
14123: ARRAY
14124: PUSH
14125: LD_INT 23
14127: EQUAL
14128: OR
14129: PUSH
14130: NOP4
14134: PUSH
14135: NOP4
14139: ARRAY
14140: PUSH
14141: LD_INT 30
14143: EQUAL
14144: OR
14145: IFFALSE 14194
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14147: NOP4
14151: PUSH
14152: LD_INT 11
14154: PUSH
14155: LD_INT 12
14157: PUSH
14158: LD_INT 13
14160: PUSH
14161: LD_INT 14
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14170: LD_ADDR_OWVAR 37
14174: PUSH
14175: NOP4
14179: PUSH
14180: LD_INT 1
14182: PPUSH
14183: NOP4
14187: PPUSH
14188: NOP4
14192: ARRAY
14193: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14194: NOP4
14198: PUSH
14199: NOP4
14203: ARRAY
14204: PUSH
14205: LD_INT 29
14207: EQUAL
14208: PUSH
14209: NOP4
14213: PUSH
14214: NOP4
14218: ARRAY
14219: PUSH
14220: LD_INT 28
14222: EQUAL
14223: OR
14224: PUSH
14225: NOP4
14229: PUSH
14230: NOP4
14234: ARRAY
14235: PUSH
14236: LD_INT 27
14238: EQUAL
14239: OR
14240: PUSH
14241: NOP4
14245: PUSH
14246: NOP4
14250: ARRAY
14251: PUSH
14252: LD_INT 26
14254: EQUAL
14255: OR
14256: PUSH
14257: NOP4
14261: PUSH
14262: NOP4
14266: ARRAY
14267: PUSH
14268: LD_INT 25
14270: EQUAL
14271: OR
14272: IFFALSE 14313
// begin arChassisTab = [ 13 , 14 ] ;
14274: NOP4
14278: PUSH
14279: LD_INT 13
14281: PUSH
14282: LD_INT 14
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14289: LD_ADDR_OWVAR 37
14293: PUSH
14294: NOP4
14298: PUSH
14299: LD_INT 1
14301: PPUSH
14302: NOP4
14306: PPUSH
14307: NOP4
14311: ARRAY
14312: ST_TO_ADDR
// end ; end ;
14313: GO 14080
14315: POP
14316: POP
// veh = CreateVehicle ;
14317: NOP4
14321: PUSH
14322: NOP4
14326: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14327: NOP4
14331: PPUSH
14332: NOP4
14336: PPUSH
14337: LD_INT 0
14339: PPUSH
14340: NOP4
// if vehcontrol = 1 then
14344: NOP4
14348: PUSH
14349: LD_INT 1
14351: EQUAL
14352: IFFALSE 14409
// begin hc_gallery =  ;
14354: LD_ADDR_OWVAR 33
14358: PUSH
14359: LD_STRING 
14361: ST_TO_ADDR
// hc_name =  ;
14362: LD_ADDR_OWVAR 26
14366: PUSH
14367: LD_STRING 
14369: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14370: LD_INT 0
14372: PPUSH
14373: LD_INT 3
14375: PPUSH
14376: NOP4
14380: PPUSH
14381: NOP4
// un = CreateHuman ;
14385: NOP4
14389: PUSH
14390: NOP4
14394: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14395: NOP4
14399: PPUSH
14400: NOP4
14404: PPUSH
14405: NOP4
// end ; i = i + 1 ;
14409: NOP4
14413: PUSH
14414: NOP4
14418: PUSH
14419: LD_INT 1
14421: PLUS
14422: ST_TO_ADDR
// end ; if nation = 3 then
14423: NOP4
14427: PUSH
14428: LD_INT 3
14430: EQUAL
14431: IFFALSE 14823
// begin uc_side = side ;
14433: LD_ADDR_OWVAR 20
14437: PUSH
14438: NOP4
14442: ST_TO_ADDR
// uc_nation = nation ;
14443: LD_ADDR_OWVAR 21
14447: PUSH
14448: NOP4
14452: ST_TO_ADDR
// vc_engine = vehengine ;
14453: LD_ADDR_OWVAR 39
14457: PUSH
14458: NOP4
14462: ST_TO_ADDR
// vc_control = vehcontrol ;
14463: LD_ADDR_OWVAR 38
14467: PUSH
14468: NOP4
14472: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14473: LD_ADDR_OWVAR 40
14477: PUSH
14478: NOP4
14482: PUSH
14483: LD_INT 1
14485: PPUSH
14486: NOP4
14490: PPUSH
14491: NOP4
14495: ARRAY
14496: ST_TO_ADDR
// for j = 1 to RuWeapons do
14497: NOP4
14501: PUSH
14502: DOUBLE
14503: LD_INT 1
14505: DEC
14506: ST_TO_ADDR
14507: NOP4
14511: PUSH
14512: FOR_TO
14513: IFFALSE 14715
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14515: NOP4
14519: PUSH
14520: NOP4
14524: ARRAY
14525: PUSH
14526: LD_INT 42
14528: EQUAL
14529: PUSH
14530: NOP4
14534: PUSH
14535: NOP4
14539: ARRAY
14540: PUSH
14541: LD_INT 43
14543: EQUAL
14544: OR
14545: PUSH
14546: NOP4
14550: PUSH
14551: NOP4
14555: ARRAY
14556: PUSH
14557: LD_INT 44
14559: EQUAL
14560: OR
14561: PUSH
14562: NOP4
14566: PUSH
14567: NOP4
14571: ARRAY
14572: PUSH
14573: LD_INT 45
14575: EQUAL
14576: OR
14577: PUSH
14578: NOP4
14582: PUSH
14583: NOP4
14587: ARRAY
14588: PUSH
14589: LD_INT 49
14591: EQUAL
14592: OR
14593: IFFALSE 14642
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14595: NOP4
14599: PUSH
14600: LD_INT 21
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 23
14608: PUSH
14609: LD_INT 24
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14618: LD_ADDR_OWVAR 37
14622: PUSH
14623: NOP4
14627: PUSH
14628: LD_INT 1
14630: PPUSH
14631: NOP4
14635: PPUSH
14636: NOP4
14640: ARRAY
14641: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14642: NOP4
14646: PUSH
14647: NOP4
14651: ARRAY
14652: PUSH
14653: LD_INT 46
14655: EQUAL
14656: PUSH
14657: NOP4
14661: PUSH
14662: NOP4
14666: ARRAY
14667: PUSH
14668: LD_INT 47
14670: EQUAL
14671: OR
14672: IFFALSE 14713
// begin ruChassisTab = [ 23 , 24 ] ;
14674: NOP4
14678: PUSH
14679: LD_INT 23
14681: PUSH
14682: LD_INT 24
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14689: LD_ADDR_OWVAR 37
14693: PUSH
14694: NOP4
14698: PUSH
14699: LD_INT 1
14701: PPUSH
14702: NOP4
14706: PPUSH
14707: NOP4
14711: ARRAY
14712: ST_TO_ADDR
// end ; end ;
14713: GO 14512
14715: POP
14716: POP
// veh = CreateVehicle ;
14717: NOP4
14721: PUSH
14722: NOP4
14726: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14727: NOP4
14731: PPUSH
14732: NOP4
14736: PPUSH
14737: LD_INT 0
14739: PPUSH
14740: NOP4
// if vehcontrol = 1 then
14744: NOP4
14748: PUSH
14749: LD_INT 1
14751: EQUAL
14752: IFFALSE 14809
// begin hc_gallery =  ;
14754: LD_ADDR_OWVAR 33
14758: PUSH
14759: LD_STRING 
14761: ST_TO_ADDR
// hc_name =  ;
14762: LD_ADDR_OWVAR 26
14766: PUSH
14767: LD_STRING 
14769: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14770: LD_INT 0
14772: PPUSH
14773: LD_INT 3
14775: PPUSH
14776: NOP4
14780: PPUSH
14781: NOP4
// un = CreateHuman ;
14785: NOP4
14789: PUSH
14790: NOP4
14794: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14795: NOP4
14799: PPUSH
14800: NOP4
14804: PPUSH
14805: NOP4
// end ; i = i + 1 ;
14809: NOP4
14813: PUSH
14814: NOP4
14818: PUSH
14819: LD_INT 1
14821: PLUS
14822: ST_TO_ADDR
// end ; until i = vehCount ;
14823: NOP4
14827: PUSH
14828: NOP4
14832: EQUAL
14833: IFFALSE 13485
// repeat wait ( 0 0$1 ) ;
14835: LD_INT 35
14837: PPUSH
14838: NOP4
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
14842: NOP4
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: NOP4
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 24
14871: PUSH
14872: LD_INT 250
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: PPUSH
14884: NOP4
14888: ST_TO_ADDR
// if vehicleOK_list > 0 then
14889: NOP4
14893: PUSH
14894: LD_INT 0
14896: GREATER
14897: IFFALSE 15088
// begin for i in vehicleOK_list do
14899: NOP4
14903: PUSH
14904: NOP4
14908: PUSH
14909: FOR_IN
14910: IFFALSE 15086
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14912: NOP4
14916: PUSH
14917: LD_INT 22
14919: PUSH
14920: NOP4
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PPUSH
14929: NOP4
14933: PPUSH
14934: NOP4
14938: PPUSH
14939: NOP4
14943: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14944: NOP4
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: NOP4
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 59
14966: PUSH
14967: EMPTY
14968: LIST
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: PPUSH
15003: NOP4
15007: PPUSH
15008: NOP4
15012: PPUSH
15013: NOP4
15017: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15018: NOP4
15022: PPUSH
15023: NOP4
15027: PPUSH
15028: NOP4
15032: PUSH
15033: LD_INT 6
15035: PLUS
15036: PUSH
15037: NOP4
15041: PPUSH
15042: NOP4
15046: PPUSH
15047: NOP4
15051: LESS
15052: IFFALSE 15070
// begin ComAttackUnit ( i , target1 ) ;
15054: NOP4
15058: PPUSH
15059: NOP4
15063: PPUSH
15064: NOP4
// end else
15068: GO 15084
// begin ComAttackUnit ( i , target2 ) ;
15070: NOP4
15074: PPUSH
15075: NOP4
15079: PPUSH
15080: NOP4
// end ; end ;
15084: GO 14909
15086: POP
15087: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15088: LD_INT 22
15090: PUSH
15091: NOP4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 21
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 24
15112: PUSH
15113: LD_INT 250
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: PPUSH
15125: NOP4
15129: PUSH
15130: LD_INT 0
15132: EQUAL
15133: IFFALSE 14835
// end ;
15135: LD_VAR 0 12
15139: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15150: NOP4
15154: PUSH
15155: LD_INT 22
15157: PUSH
15158: NOP4
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 24
15175: PUSH
15176: LD_INT 550
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 24
15189: PUSH
15190: LD_INT 250
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PPUSH
15206: NOP4
15210: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15211: NOP4
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: NOP4
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 2
15230: PUSH
15231: LD_INT 25
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 25
15243: PUSH
15244: LD_INT 5
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 25
15253: PUSH
15254: LD_INT 8
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 25
15263: PUSH
15264: LD_INT 9
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 24
15280: PUSH
15281: LD_INT 1000
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PPUSH
15293: NOP4
15297: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15298: NOP4
15302: PUSH
15303: LD_INT 22
15305: PUSH
15306: NOP4
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 25
15317: PUSH
15318: LD_INT 4
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: NOP4
15333: ST_TO_ADDR
// if medicCount > 0 then
15334: NOP4
15338: PUSH
15339: LD_INT 0
15341: GREATER
15342: IFFALSE 15416
// begin if damageUnit_list > 0 then
15344: NOP4
15348: PUSH
15349: LD_INT 0
15351: GREATER
15352: IFFALSE 15416
// begin for i in damageUnit_list do
15354: NOP4
15358: PUSH
15359: NOP4
15363: PUSH
15364: FOR_IN
15365: IFFALSE 15414
// begin ComMoveToArea ( i , healArea ) ;
15367: NOP4
15371: PPUSH
15372: NOP4
15376: PPUSH
15377: NOP4
// for j in medicCount do
15381: NOP4
15385: PUSH
15386: NOP4
15390: PUSH
15391: FOR_IN
15392: IFFALSE 15410
// AddComHeal ( j , i ) ;
15394: NOP4
15398: PPUSH
15399: NOP4
15403: PPUSH
15404: NOP4
15408: GO 15391
15410: POP
15411: POP
// end ;
15412: GO 15364
15414: POP
15415: POP
// end ; end ; if soldiersOK_list > 0 then
15416: NOP4
15420: PUSH
15421: LD_INT 0
15423: GREATER
15424: IFFALSE 15615
// begin for i in soldiersOK_list do
15426: NOP4
15430: PUSH
15431: NOP4
15435: PUSH
15436: FOR_IN
15437: IFFALSE 15613
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15439: NOP4
15443: PUSH
15444: LD_INT 22
15446: PUSH
15447: NOP4
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PPUSH
15456: NOP4
15460: PPUSH
15461: NOP4
15465: PPUSH
15466: NOP4
15470: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15471: NOP4
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: NOP4
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 59
15493: PUSH
15494: EMPTY
15495: LIST
15496: PUSH
15497: LD_INT 21
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: PPUSH
15530: NOP4
15534: PPUSH
15535: NOP4
15539: PPUSH
15540: NOP4
15544: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15545: NOP4
15549: PPUSH
15550: NOP4
15554: PPUSH
15555: NOP4
15559: PUSH
15560: LD_INT 8
15562: PLUS
15563: PUSH
15564: NOP4
15568: PPUSH
15569: NOP4
15573: PPUSH
15574: NOP4
15578: LESS
15579: IFFALSE 15597
// begin ComAttackUnit ( i , target1 ) ;
15581: NOP4
15585: PPUSH
15586: NOP4
15590: PPUSH
15591: NOP4
// end else
15595: GO 15611
// begin ComAttackUnit ( i , target2 ) ;
15597: NOP4
15601: PPUSH
15602: NOP4
15606: PPUSH
15607: NOP4
// end ; end ;
15611: GO 15436
15613: POP
15614: POP
// end ; end ;
15615: LD_VAR 0 4
15619: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
// list := [ ] ;
15624: NOP4
15628: PUSH
15629: EMPTY
15630: ST_TO_ADDR
// case d of 0 :
15631: NOP4
15635: PUSH
15636: LD_INT 0
15638: DOUBLE
15639: EQUAL
15640: IFTRUE 15644
15642: GO 15777
15644: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15645: NOP4
15649: PUSH
15650: NOP4
15654: PUSH
15655: LD_INT 4
15657: MINUS
15658: PUSH
15659: NOP4
15663: PUSH
15664: LD_INT 4
15666: MINUS
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: PUSH
15676: NOP4
15680: PUSH
15681: LD_INT 3
15683: MINUS
15684: PUSH
15685: NOP4
15689: PUSH
15690: LD_INT 1
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: NOP4
15702: PUSH
15703: LD_INT 4
15705: PLUS
15706: PUSH
15707: NOP4
15711: PUSH
15712: LD_INT 4
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: PUSH
15720: NOP4
15724: PUSH
15725: LD_INT 3
15727: PLUS
15728: PUSH
15729: NOP4
15733: PUSH
15734: LD_INT 3
15736: PLUS
15737: PUSH
15738: LD_INT 5
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: NOP4
15750: PUSH
15751: NOP4
15755: PUSH
15756: LD_INT 4
15758: PLUS
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: ST_TO_ADDR
// end ; 1 :
15775: GO 16475
15777: LD_INT 1
15779: DOUBLE
15780: EQUAL
15781: IFTRUE 15785
15783: GO 15918
15785: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
15786: NOP4
15790: PUSH
15791: NOP4
15795: PUSH
15796: NOP4
15800: PUSH
15801: LD_INT 4
15803: MINUS
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: PUSH
15813: NOP4
15817: PUSH
15818: LD_INT 3
15820: MINUS
15821: PUSH
15822: NOP4
15826: PUSH
15827: LD_INT 3
15829: MINUS
15830: PUSH
15831: LD_INT 2
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: PUSH
15839: NOP4
15843: PUSH
15844: LD_INT 4
15846: MINUS
15847: PUSH
15848: NOP4
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: PUSH
15861: NOP4
15865: PUSH
15866: NOP4
15870: PUSH
15871: LD_INT 3
15873: PLUS
15874: PUSH
15875: LD_INT 0
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: PUSH
15883: NOP4
15887: PUSH
15888: LD_INT 4
15890: PLUS
15891: PUSH
15892: NOP4
15896: PUSH
15897: LD_INT 4
15899: PLUS
15900: PUSH
15901: LD_INT 5
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: ST_TO_ADDR
// end ; 2 :
15916: GO 16475
15918: LD_INT 2
15920: DOUBLE
15921: EQUAL
15922: IFTRUE 15926
15924: GO 16055
15926: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
15927: NOP4
15931: PUSH
15932: NOP4
15936: PUSH
15937: NOP4
15941: PUSH
15942: LD_INT 3
15944: MINUS
15945: PUSH
15946: LD_INT 3
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: PUSH
15954: NOP4
15958: PUSH
15959: LD_INT 4
15961: PLUS
15962: PUSH
15963: NOP4
15967: PUSH
15968: LD_INT 4
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: NOP4
15980: PUSH
15981: NOP4
15985: PUSH
15986: LD_INT 4
15988: PLUS
15989: PUSH
15990: LD_INT 0
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: PUSH
15998: NOP4
16002: PUSH
16003: LD_INT 3
16005: MINUS
16006: PUSH
16007: NOP4
16011: PUSH
16012: LD_INT 1
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: NOP4
16024: PUSH
16025: LD_INT 4
16027: MINUS
16028: PUSH
16029: NOP4
16033: PUSH
16034: LD_INT 4
16036: MINUS
16037: PUSH
16038: LD_INT 2
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: ST_TO_ADDR
// end ; 3 :
16053: GO 16475
16055: LD_INT 3
16057: DOUBLE
16058: EQUAL
16059: IFTRUE 16063
16061: GO 16196
16063: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16064: NOP4
16068: PUSH
16069: NOP4
16073: PUSH
16074: LD_INT 3
16076: PLUS
16077: PUSH
16078: NOP4
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: PUSH
16091: NOP4
16095: PUSH
16096: LD_INT 4
16098: PLUS
16099: PUSH
16100: NOP4
16104: PUSH
16105: LD_INT 4
16107: PLUS
16108: PUSH
16109: LD_INT 5
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: NOP4
16121: PUSH
16122: LD_INT 4
16124: MINUS
16125: PUSH
16126: NOP4
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: NOP4
16143: PUSH
16144: NOP4
16148: PUSH
16149: LD_INT 4
16151: MINUS
16152: PUSH
16153: LD_INT 3
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: PUSH
16161: NOP4
16165: PUSH
16166: LD_INT 3
16168: MINUS
16169: PUSH
16170: NOP4
16174: PUSH
16175: LD_INT 3
16177: MINUS
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: ST_TO_ADDR
// end ; 4 :
16194: GO 16475
16196: LD_INT 4
16198: DOUBLE
16199: EQUAL
16200: IFTRUE 16204
16202: GO 16337
16204: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16205: NOP4
16209: PUSH
16210: NOP4
16214: PUSH
16215: NOP4
16219: PUSH
16220: LD_INT 4
16222: PLUS
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: PUSH
16232: NOP4
16236: PUSH
16237: LD_INT 3
16239: PLUS
16240: PUSH
16241: NOP4
16245: PUSH
16246: LD_INT 3
16248: PLUS
16249: PUSH
16250: LD_INT 5
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: LIST
16257: PUSH
16258: NOP4
16262: PUSH
16263: LD_INT 3
16265: PLUS
16266: PUSH
16267: NOP4
16271: PUSH
16272: LD_INT 4
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: PUSH
16280: NOP4
16284: PUSH
16285: NOP4
16289: PUSH
16290: LD_INT 3
16292: MINUS
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: NOP4
16306: PUSH
16307: LD_INT 4
16309: MINUS
16310: PUSH
16311: NOP4
16315: PUSH
16316: LD_INT 4
16318: MINUS
16319: PUSH
16320: LD_INT 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: ST_TO_ADDR
// end ; 5 :
16335: GO 16475
16337: LD_INT 5
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16474
16345: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16346: NOP4
16350: PUSH
16351: NOP4
16355: PUSH
16356: LD_INT 4
16358: MINUS
16359: PUSH
16360: NOP4
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: PUSH
16373: NOP4
16377: PUSH
16378: NOP4
16382: PUSH
16383: LD_INT 4
16385: MINUS
16386: PUSH
16387: LD_INT 3
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: NOP4
16399: PUSH
16400: LD_INT 4
16402: PLUS
16403: PUSH
16404: NOP4
16408: PUSH
16409: LD_INT 4
16411: PLUS
16412: PUSH
16413: LD_INT 5
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: PUSH
16421: NOP4
16425: PUSH
16426: LD_INT 3
16428: PLUS
16429: PUSH
16430: NOP4
16434: PUSH
16435: LD_INT 4
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: NOP4
16447: PUSH
16448: NOP4
16452: PUSH
16453: LD_INT 3
16455: PLUS
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: ST_TO_ADDR
// end ; end ;
16472: GO 16475
16474: POP
// result := list ;
16475: NOP4
16479: PUSH
16480: NOP4
16484: ST_TO_ADDR
// end ; end_of_file
16485: LD_VAR 0 4
16489: RET
// every 1 do var i ;
16490: GO 16492
16492: DISABLE
16493: LD_INT 0
16495: PPUSH
// begin InGameOn ;
16496: NOP4
// CenterOnXY ( 53 , 40 ) ;
16500: LD_INT 53
16502: PPUSH
16503: LD_INT 40
16505: PPUSH
16506: NOP4
// wait ( 0 0$5 ) ;
16510: LD_INT 175
16512: PPUSH
16513: NOP4
// if gammaCommander = 1 then
16517: NOP4
16521: PUSH
16522: LD_INT 1
16524: EQUAL
16525: IFFALSE 16536
// CenterNowOnUnits ( Donaldson ) ;
16527: NOP4
16531: PPUSH
16532: NOP4
// if gammaCommander = 2 then
16536: NOP4
16540: PUSH
16541: LD_INT 2
16543: EQUAL
16544: IFFALSE 16555
// CenterNowOnUnits ( Brown ) ;
16546: NOP4
16550: PPUSH
16551: NOP4
// if gammaCommander = 3 then
16555: NOP4
16559: PUSH
16560: LD_INT 3
16562: EQUAL
16563: IFFALSE 16574
// CenterNowOnUnits ( Houten ) ;
16565: NOP4
16569: PPUSH
16570: NOP4
// if gammaCommander = 1 then
16574: NOP4
16578: PUSH
16579: LD_INT 1
16581: EQUAL
16582: IFFALSE 16596
// Say ( Donaldson , D1-Don-1 ) ;
16584: NOP4
16588: PPUSH
16589: LD_STRING D1-Don-1
16591: PPUSH
16592: NOP4
// if gammaCommander = 2 then
16596: NOP4
16600: PUSH
16601: LD_INT 2
16603: EQUAL
16604: IFFALSE 16618
// Say ( Brown , D1-Brown-1 ) ;
16606: NOP4
16610: PPUSH
16611: LD_STRING D1-Brown-1
16613: PPUSH
16614: NOP4
// if gammaCommander = 3 then
16618: NOP4
16622: PUSH
16623: LD_INT 3
16625: EQUAL
16626: IFFALSE 16640
// Say ( Houten , D1-VanH-1 ) ;
16628: NOP4
16632: PPUSH
16633: LD_STRING D1-VanH-1
16635: PPUSH
16636: NOP4
// SayRadio ( Harisson , D1-Har-1 ) ;
16640: NOP4
16644: PPUSH
16645: LD_STRING D1-Har-1
16647: PPUSH
16648: NOP4
// CenterOnXY ( 53 , 40 ) ;
16652: LD_INT 53
16654: PPUSH
16655: LD_INT 40
16657: PPUSH
16658: NOP4
// if gammaCommander = 1 then
16662: NOP4
16666: PUSH
16667: LD_INT 1
16669: EQUAL
16670: IFFALSE 16684
// Say ( Donaldson , D1-Don-2 ) ;
16672: NOP4
16676: PPUSH
16677: LD_STRING D1-Don-2
16679: PPUSH
16680: NOP4
// if gammaCommander = 2 then
16684: NOP4
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: IFFALSE 16706
// Say ( Brown , D1-Brown-2 ) ;
16694: NOP4
16698: PPUSH
16699: LD_STRING D1-Brown-2
16701: PPUSH
16702: NOP4
// if gammaCommander = 3 then
16706: NOP4
16710: PUSH
16711: LD_INT 3
16713: EQUAL
16714: IFFALSE 16728
// Say ( Houten , D1-VanH-2 ) ;
16716: NOP4
16720: PPUSH
16721: LD_STRING D1-VanH-2
16723: PPUSH
16724: NOP4
// SayRadio ( Harisson , D1-Har-2 ) ;
16728: NOP4
16732: PPUSH
16733: LD_STRING D1-Har-2
16735: PPUSH
16736: NOP4
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
16740: LD_INT 22
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 33
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 61
16762: PUSH
16763: EMPTY
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: PPUSH
16771: NOP4
16775: IFFALSE 16840
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
16777: NOP4
16781: PUSH
16782: LD_INT 22
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 33
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 61
16804: PUSH
16805: EMPTY
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: PPUSH
16813: NOP4
16817: PUSH
16818: FOR_IN
16819: IFFALSE 16838
// ComAgressiveMove ( i , 70 , 41 ) ;
16821: NOP4
16825: PPUSH
16826: LD_INT 70
16828: PPUSH
16829: LD_INT 41
16831: PPUSH
16832: NOP4
16836: GO 16818
16838: POP
16839: POP
// repeat wait ( 0 0$1 ) ;
16840: LD_INT 35
16842: PPUSH
16843: NOP4
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
16847: NOP4
16851: PUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 6
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: EMPTY
16863: LIST
16864: PPUSH
16865: NOP4
16869: PUSH
16870: FOR_IN
16871: IFFALSE 16890
// ComAgressiveMove ( i , 54 , 20 ) ;
16873: NOP4
16877: PPUSH
16878: LD_INT 54
16880: PPUSH
16881: LD_INT 20
16883: PPUSH
16884: NOP4
16888: GO 16870
16890: POP
16891: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
16892: NOP4
16896: PUSH
16897: LD_INT 22
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 25
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 3
16919: PUSH
16920: LD_INT 54
16922: PUSH
16923: EMPTY
16924: LIST
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: PPUSH
16935: NOP4
16939: PUSH
16940: FOR_IN
16941: IFFALSE 16975
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
16943: NOP4
16947: PPUSH
16948: LD_INT 70
16950: PPUSH
16951: LD_INT 41
16953: PPUSH
16954: NOP4
// AddComAgressiveMove ( i , 46 , 39 ) ;
16958: NOP4
16962: PPUSH
16963: LD_INT 46
16965: PPUSH
16966: LD_INT 39
16968: PPUSH
16969: NOP4
// end ;
16973: GO 16940
16975: POP
16976: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
16977: NOP4
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 21
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 3
17004: PUSH
17005: LD_INT 24
17007: PUSH
17008: LD_INT 500
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: PPUSH
17024: NOP4
17028: PUSH
17029: FOR_IN
17030: IFFALSE 17063
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17032: NOP4
17036: PPUSH
17037: NOP4
17041: PPUSH
17042: NOP4
17046: PPUSH
17047: NOP4
17051: PPUSH
17052: NOP4
17056: PPUSH
17057: NOP4
17061: GO 17029
17063: POP
17064: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17065: LD_INT 22
17067: PUSH
17068: LD_INT 6
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 21
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 24
17087: PUSH
17088: LD_INT 250
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PPUSH
17100: NOP4
17104: PUSH
17105: LD_INT 6
17107: LESS
17108: IFFALSE 16840
// InGameOff ;
17110: NOP4
// ChangeMissionObjectives ( M1 ) ;
17114: LD_STRING M1
17116: PPUSH
17117: NOP4
// SaveForQuickRestart ;
17121: NOP4
// startCutscene = 0 ;
17125: NOP4
17129: PUSH
17130: LD_INT 0
17132: ST_TO_ADDR
// end ;
17133: PPOPN 1
17135: END
// every 1 1$0 do
17136: GO 17138
17138: DISABLE
// begin PrepareSupportFromDelta ;
17139: NOP4
// firstAttack = 1 ;
17143: NOP4
17147: PUSH
17148: LD_INT 1
17150: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17151: NOP4
17155: PPUSH
17156: NOP4
17160: IFFALSE 17176
// begin Say ( Gladstone , D2-Glad-1 ) ;
17162: NOP4
17166: PPUSH
17167: LD_STRING D2-Glad-1
17169: PPUSH
17170: NOP4
// end else
17174: GO 17278
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17176: LD_INT 4
17178: PPUSH
17179: LD_INT 22
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: LD_INT 25
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 25
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 25
17224: PUSH
17225: LD_INT 3
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 25
17234: PUSH
17235: LD_INT 4
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: PPUSH
17254: NOP4
17258: PUSH
17259: NOP4
17263: PUSH
17264: EMPTY
17265: LIST
17266: DIFF
17267: PPUSH
17268: LD_STRING D2-Sol1-1
17270: PPUSH
17271: LD_STRING D2-FSol1-1
17273: PPUSH
17274: NOP4
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17278: NOP4
17282: PPUSH
17283: NOP4
17287: PUSH
17288: NOP4
17292: PUSH
17293: LD_INT 1
17295: EQUAL
17296: AND
17297: IFFALSE 17311
// Say ( Donaldson , D2-Don-1 ) ;
17299: NOP4
17303: PPUSH
17304: LD_STRING D2-Don-1
17306: PPUSH
17307: NOP4
// if IsOK ( Brown ) and gammaCommander = 2 then
17311: NOP4
17315: PPUSH
17316: NOP4
17320: PUSH
17321: NOP4
17325: PUSH
17326: LD_INT 2
17328: EQUAL
17329: AND
17330: IFFALSE 17344
// Say ( Brown , D2-Brown-1 ) ;
17332: NOP4
17336: PPUSH
17337: LD_STRING D2-Brown-1
17339: PPUSH
17340: NOP4
// if IsOK ( Houten ) and gammaCommander = 3 then
17344: NOP4
17348: PPUSH
17349: NOP4
17353: PUSH
17354: NOP4
17358: PUSH
17359: LD_INT 3
17361: EQUAL
17362: AND
17363: IFFALSE 17377
// Say ( Houten , D2-VanH-1 ) ;
17365: NOP4
17369: PPUSH
17370: LD_STRING D2-VanH-1
17372: PPUSH
17373: NOP4
// end ;
17377: END
// every 0 0$1 do
17378: GO 17380
17380: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
17381: LD_STRING 07_time
17383: PPUSH
17384: LD_INT 0
17386: PPUSH
17387: NOP4
17391: PUSH
17392: LD_INT 3
17394: DIV
17395: PPUSH
17396: NOP4
// PrepareMacmillanSquad ;
17400: NOP4
// CenterNowOnUnits ( JMM ) ;
17404: NOP4
17408: PPUSH
17409: NOP4
// Say ( JMM , D3-JMM-1 ) ;
17413: NOP4
17417: PPUSH
17418: LD_STRING D3-JMM-1
17420: PPUSH
17421: NOP4
// JMMArrive = 1 ;
17425: NOP4
17429: PUSH
17430: LD_INT 1
17432: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17433: NOP4
17437: PPUSH
17438: NOP4
17442: PUSH
17443: NOP4
17447: PUSH
17448: LD_INT 1
17450: EQUAL
17451: AND
17452: IFFALSE 17468
// begin Say ( Donaldson , D3-Don-1 ) ;
17454: NOP4
17458: PPUSH
17459: LD_STRING D3-Don-1
17461: PPUSH
17462: NOP4
// end else
17466: GO 17520
// begin if gammaCommander = 1 then
17468: NOP4
17472: PUSH
17473: LD_INT 1
17475: EQUAL
17476: IFFALSE 17520
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17478: NOP4
17482: PPUSH
17483: LD_INT 26
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: NOP4
17497: PPUSH
17498: LD_STRING D3-Sol1-1
17500: PPUSH
17501: LD_STRING D3-Sol1-1
17503: PPUSH
17504: NOP4
// Say ( JMM , D3-JMM-2 ) ;
17508: NOP4
17512: PPUSH
17513: LD_STRING D3-JMM-2
17515: PPUSH
17516: NOP4
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17520: NOP4
17524: PPUSH
17525: NOP4
17529: PUSH
17530: NOP4
17534: PUSH
17535: LD_INT 2
17537: EQUAL
17538: AND
17539: IFFALSE 17555
// begin Say ( Brown , D3-Brown-1 ) ;
17541: NOP4
17545: PPUSH
17546: LD_STRING D3-Brown-1
17548: PPUSH
17549: NOP4
// end else
17553: GO 17607
// begin if gammaCommander = 2 then
17555: NOP4
17559: PUSH
17560: LD_INT 2
17562: EQUAL
17563: IFFALSE 17607
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17565: NOP4
17569: PPUSH
17570: LD_INT 26
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PPUSH
17580: NOP4
17584: PPUSH
17585: LD_STRING D3-Sol1-1a
17587: PPUSH
17588: LD_STRING D3-Sol1-1a
17590: PPUSH
17591: NOP4
// Say ( JMM , D3-JMM-2 ) ;
17595: NOP4
17599: PPUSH
17600: LD_STRING D3-JMM-2
17602: PPUSH
17603: NOP4
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17607: NOP4
17611: PPUSH
17612: NOP4
17616: PUSH
17617: NOP4
17621: PUSH
17622: LD_INT 3
17624: EQUAL
17625: AND
17626: IFFALSE 17642
// begin Say ( Houten , D3-VanH-1 ) ;
17628: NOP4
17632: PPUSH
17633: LD_STRING D3-VanH-1
17635: PPUSH
17636: NOP4
// end else
17640: GO 17694
// begin if gammaCommander = 3 then
17642: NOP4
17646: PUSH
17647: LD_INT 3
17649: EQUAL
17650: IFFALSE 17694
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17652: NOP4
17656: PPUSH
17657: LD_INT 26
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: NOP4
17671: PPUSH
17672: LD_STRING D3-Sol1-1b
17674: PPUSH
17675: LD_STRING D3-Sol1-1b
17677: PPUSH
17678: NOP4
// Say ( JMM , D3-JMM-2 ) ;
17682: NOP4
17686: PPUSH
17687: LD_STRING D3-JMM-2
17689: PPUSH
17690: NOP4
// end ; end ; if IsOK ( Joan ) then
17694: NOP4
17698: PPUSH
17699: NOP4
17703: IFFALSE 17731
// begin Say ( Joan , D3a-Joan-1 ) ;
17705: NOP4
17709: PPUSH
17710: LD_STRING D3a-Joan-1
17712: PPUSH
17713: NOP4
// Say ( JMM , D3a-JMM-1 ) ;
17717: NOP4
17721: PPUSH
17722: LD_STRING D3a-JMM-1
17724: PPUSH
17725: NOP4
// end else
17729: GO 18184
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17731: NOP4
17735: PPUSH
17736: NOP4
17740: PUSH
17741: NOP4
17745: PUSH
17746: LD_INT 1
17748: EQUAL
17749: AND
17750: PUSH
17751: LD_STRING 06_JoanStatus_1
17753: PPUSH
17754: LD_INT 0
17756: PPUSH
17757: NOP4
17761: PUSH
17762: LD_INT 1
17764: EQUAL
17765: AND
17766: IFFALSE 17817
// begin Say ( Donaldson , D3b-Don-1 ) ;
17768: NOP4
17772: PPUSH
17773: LD_STRING D3b-Don-1
17775: PPUSH
17776: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17780: NOP4
17784: PPUSH
17785: LD_STRING D3b-JMM-2
17787: PPUSH
17788: NOP4
// if IsOK ( Lisa ) then
17792: NOP4
17796: PPUSH
17797: NOP4
17801: IFFALSE 17815
// Say ( Lisa , D3b-Lisa-2 ) ;
17803: NOP4
17807: PPUSH
17808: LD_STRING D3b-Lisa-2
17810: PPUSH
17811: NOP4
// end else
17815: GO 17882
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17817: NOP4
17821: PPUSH
17822: LD_INT 26
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: NOP4
17836: PPUSH
17837: LD_STRING D3b-Sol1-1
17839: PPUSH
17840: LD_STRING D3b-Sol1-1
17842: PPUSH
17843: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17847: NOP4
17851: PPUSH
17852: LD_STRING D3b-JMM-2
17854: PPUSH
17855: NOP4
// if IsOK ( Lisa ) then
17859: NOP4
17863: PPUSH
17864: NOP4
17868: IFFALSE 17882
// Say ( Lisa , D3b-Lisa-2 ) ;
17870: NOP4
17874: PPUSH
17875: LD_STRING D3b-Lisa-2
17877: PPUSH
17878: NOP4
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17882: NOP4
17886: PPUSH
17887: NOP4
17891: PUSH
17892: NOP4
17896: PUSH
17897: LD_INT 2
17899: EQUAL
17900: AND
17901: PUSH
17902: LD_STRING 06_JoanStatus_1
17904: PPUSH
17905: LD_INT 0
17907: PPUSH
17908: NOP4
17912: PUSH
17913: LD_INT 1
17915: EQUAL
17916: AND
17917: IFFALSE 17968
// begin Say ( Brown , D3b-Brown-1 ) ;
17919: NOP4
17923: PPUSH
17924: LD_STRING D3b-Brown-1
17926: PPUSH
17927: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17931: NOP4
17935: PPUSH
17936: LD_STRING D3b-JMM-2
17938: PPUSH
17939: NOP4
// if IsOK ( Lisa ) then
17943: NOP4
17947: PPUSH
17948: NOP4
17952: IFFALSE 17966
// Say ( Lisa , D3b-Lisa-2 ) ;
17954: NOP4
17958: PPUSH
17959: LD_STRING D3b-Lisa-2
17961: PPUSH
17962: NOP4
// end else
17966: GO 18033
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17968: NOP4
17972: PPUSH
17973: LD_INT 26
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PPUSH
17983: NOP4
17987: PPUSH
17988: LD_STRING D3b-Sol1-1
17990: PPUSH
17991: LD_STRING D3b-Sol1-1
17993: PPUSH
17994: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17998: NOP4
18002: PPUSH
18003: LD_STRING D3b-JMM-2
18005: PPUSH
18006: NOP4
// if IsOK ( Lisa ) then
18010: NOP4
18014: PPUSH
18015: NOP4
18019: IFFALSE 18033
// Say ( Lisa , D3b-Lisa-2 ) ;
18021: NOP4
18025: PPUSH
18026: LD_STRING D3b-Lisa-2
18028: PPUSH
18029: NOP4
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18033: NOP4
18037: PPUSH
18038: NOP4
18042: PUSH
18043: NOP4
18047: PUSH
18048: LD_INT 3
18050: EQUAL
18051: AND
18052: PUSH
18053: LD_STRING 06_JoanStatus_1
18055: PPUSH
18056: LD_INT 0
18058: PPUSH
18059: NOP4
18063: PUSH
18064: LD_INT 1
18066: EQUAL
18067: AND
18068: IFFALSE 18119
// begin Say ( Houten , D3b-VanH-1 ) ;
18070: NOP4
18074: PPUSH
18075: LD_STRING D3b-VanH-1
18077: PPUSH
18078: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
18082: NOP4
18086: PPUSH
18087: LD_STRING D3b-JMM-2
18089: PPUSH
18090: NOP4
// if IsOK ( Lisa ) then
18094: NOP4
18098: PPUSH
18099: NOP4
18103: IFFALSE 18117
// Say ( Lisa , D3b-Lisa-2 ) ;
18105: NOP4
18109: PPUSH
18110: LD_STRING D3b-Lisa-2
18112: PPUSH
18113: NOP4
// end else
18117: GO 18184
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18119: NOP4
18123: PPUSH
18124: LD_INT 26
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: NOP4
18138: PPUSH
18139: LD_STRING D3b-Sol1-1
18141: PPUSH
18142: LD_STRING D3b-Sol1-1
18144: PPUSH
18145: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
18149: NOP4
18153: PPUSH
18154: LD_STRING D3b-JMM-2
18156: PPUSH
18157: NOP4
// if IsOK ( Lisa ) then
18161: NOP4
18165: PPUSH
18166: NOP4
18170: IFFALSE 18184
// Say ( Lisa , D3b-Lisa-2 ) ;
18172: NOP4
18176: PPUSH
18177: LD_STRING D3b-Lisa-2
18179: PPUSH
18180: NOP4
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18184: LD_INT 22
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 21
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 26
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 25
18239: PUSH
18240: LD_INT 3
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 25
18249: PUSH
18250: LD_INT 4
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: PPUSH
18270: NOP4
18274: PUSH
18275: NOP4
18279: PUSH
18280: EMPTY
18281: LIST
18282: DIFF
18283: PPUSH
18284: LD_STRING DCa-Sol1-1
18286: PPUSH
18287: LD_STRING DCa-Sol1-1
18289: PPUSH
18290: NOP4
// Say ( JMM , DCb-JMM-1 ) ;
18294: NOP4
18298: PPUSH
18299: LD_STRING DCb-JMM-1
18301: PPUSH
18302: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18306: LD_INT 22
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 21
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 26
18328: PUSH
18329: LD_INT 1
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: LD_INT 25
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 25
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 25
18361: PUSH
18362: LD_INT 3
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 25
18371: PUSH
18372: LD_INT 4
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: PPUSH
18392: NOP4
18396: PUSH
18397: NOP4
18401: PUSH
18402: EMPTY
18403: LIST
18404: DIFF
18405: PPUSH
18406: LD_STRING DCb-Sol1-1
18408: PPUSH
18409: LD_STRING DCb-Sol1-1
18411: PPUSH
18412: NOP4
// Say ( JMM , DCb-JMM-2 ) ;
18416: NOP4
18420: PPUSH
18421: LD_STRING DCb-JMM-2
18423: PPUSH
18424: NOP4
// secondAttack = 1 ;
18428: NOP4
18432: PUSH
18433: LD_INT 1
18435: ST_TO_ADDR
// end ;
18436: END
// every 0 0$01 trigger JMMArrive = 1 do
18437: NOP4
18441: PUSH
18442: LD_INT 1
18444: EQUAL
18445: IFFALSE 18525
18447: GO 18449
18449: DISABLE
// begin wait ( 3 3$0 ) ;
18450: LD_INT 6300
18452: PPUSH
18453: NOP4
// DialogueOn ;
18457: NOP4
// SayRadio ( Powell , D4-Pow-1 ) ;
18461: NOP4
18465: PPUSH
18466: LD_STRING D4-Pow-1
18468: PPUSH
18469: NOP4
// Say ( JMM , D4-JMM-1 ) ;
18473: NOP4
18477: PPUSH
18478: LD_STRING D4-JMM-1
18480: PPUSH
18481: NOP4
// SayRadio ( Powell , D4-Pow-2 ) ;
18485: NOP4
18489: PPUSH
18490: LD_STRING D4-Pow-2
18492: PPUSH
18493: NOP4
// Say ( JMM , D4-JMM-2 ) ;
18497: NOP4
18501: PPUSH
18502: LD_STRING D4-JMM-2
18504: PPUSH
18505: NOP4
// SayRadio ( Powell , D4-Pow-3 ) ;
18509: NOP4
18513: PPUSH
18514: LD_STRING D4-Pow-3
18516: PPUSH
18517: NOP4
// DialogueOff ;
18521: NOP4
// end ;
18525: END
// every 0 0$01 trigger JMMArrive = 1 do
18526: NOP4
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: IFFALSE 18566
18536: GO 18538
18538: DISABLE
// begin wait ( 8 8$0 ) ;
18539: LD_INT 16800
18541: PPUSH
18542: NOP4
// DialogueOn ;
18546: NOP4
// SayRadio ( Powell , D4a-Pow-1 ) ;
18550: NOP4
18554: PPUSH
18555: LD_STRING D4a-Pow-1
18557: PPUSH
18558: NOP4
// DialogueOff ;
18562: NOP4
// end ;
18566: END
// every 0 0$01 trigger JMMArrive = 1 do
18567: NOP4
18571: PUSH
18572: LD_INT 1
18574: EQUAL
18575: IFFALSE 18620
18577: GO 18579
18579: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18580: LD_INT 21000
18582: PUSH
18583: LD_INT 25200
18585: PUSH
18586: LD_INT 31500
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: PUSH
18594: NOP4
18598: ARRAY
18599: PPUSH
18600: NOP4
// PrepareSikorsky ;
18604: NOP4
// SikorskyArrive = 1 ;
18608: NOP4
18612: PUSH
18613: LD_INT 1
18615: ST_TO_ADDR
// PrepareSikorskyArmy ;
18616: NOP4
// end ;
18620: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18621: NOP4
18625: PPUSH
18626: LD_INT 5
18628: PPUSH
18629: NOP4
18633: IFFALSE 18825
18635: GO 18637
18637: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18638: NOP4
18642: PPUSH
18643: NOP4
// DialogueOn ;
18647: NOP4
// Say ( Sikorski , D5-Sik-1 ) ;
18651: NOP4
18655: PPUSH
18656: LD_STRING D5-Sik-1
18658: PPUSH
18659: NOP4
// Say ( JMM , D5-JMM-1a ) ;
18663: NOP4
18667: PPUSH
18668: LD_STRING D5-JMM-1a
18670: PPUSH
18671: NOP4
// Say ( Sikorski , D5-Sik-2 ) ;
18675: NOP4
18679: PPUSH
18680: LD_STRING D5-Sik-2
18682: PPUSH
18683: NOP4
// case query ( QSikorski ) of 1 :
18687: LD_STRING QSikorski
18689: PPUSH
18690: NOP4
18694: PUSH
18695: LD_INT 1
18697: DOUBLE
18698: EQUAL
18699: IFTRUE 18703
18701: GO 18726
18703: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18704: NOP4
18708: PPUSH
18709: LD_STRING D5a-Sik-1
18711: PPUSH
18712: NOP4
// SikorskyTimer = 1 1$00 ;
18716: NOP4
18720: PUSH
18721: LD_INT 2100
18723: ST_TO_ADDR
// end ; 2 :
18724: GO 18813
18726: LD_INT 2
18728: DOUBLE
18729: EQUAL
18730: IFTRUE 18734
18732: GO 18757
18734: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18735: NOP4
18739: PPUSH
18740: LD_STRING D5b-Sik-1
18742: PPUSH
18743: NOP4
// SikorskyTimer = 5 5$00 ;
18747: NOP4
18751: PUSH
18752: LD_INT 10500
18754: ST_TO_ADDR
// end ; 3 :
18755: GO 18813
18757: LD_INT 3
18759: DOUBLE
18760: EQUAL
18761: IFTRUE 18765
18763: GO 18812
18765: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18766: NOP4
18770: PPUSH
18771: LD_STRING D5c-Sik-1
18773: PPUSH
18774: NOP4
// Say ( JMM , D5c-JMM-1 ) ;
18778: NOP4
18782: PPUSH
18783: LD_STRING D5c-JMM-1
18785: PPUSH
18786: NOP4
// Say ( Sikorski , D5c-Sik-2 ) ;
18790: NOP4
18794: PPUSH
18795: LD_STRING D5c-Sik-2
18797: PPUSH
18798: NOP4
// SikorskyTimer = 5 5$00 ;
18802: NOP4
18806: PUSH
18807: LD_INT 10500
18809: ST_TO_ADDR
// end ; end ;
18810: GO 18813
18812: POP
// DialogueOff ;
18813: NOP4
// timerStatus = 1 ;
18817: NOP4
18821: PUSH
18822: LD_INT 1
18824: ST_TO_ADDR
// end ;
18825: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
18826: NOP4
18830: PUSH
18831: LD_INT 35
18833: LESS
18834: IFFALSE 18882
18836: GO 18838
18838: DISABLE
// begin timerStatus = 0 ;
18839: NOP4
18843: PUSH
18844: LD_INT 0
18846: ST_TO_ADDR
// DialogueOn ;
18847: NOP4
// Say ( Sikorski , D6-Sik-1 ) ;
18851: NOP4
18855: PPUSH
18856: LD_STRING D6-Sik-1
18858: PPUSH
18859: NOP4
// DialogueOff ;
18863: NOP4
// SikorskyAI = 1 ;
18867: NOP4
18871: PUSH
18872: LD_INT 1
18874: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
18875: LD_STRING M2
18877: PPUSH
18878: NOP4
// end ;
18882: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
18883: NOP4
18887: PPUSH
18888: LD_INT 18
18890: PPUSH
18891: NOP4
18895: IFFALSE 18979
18897: GO 18899
18899: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18900: NOP4
18904: PPUSH
18905: LD_STRING D7-Sik-1
18907: PPUSH
18908: NOP4
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
18912: NOP4
18916: PPUSH
18917: LD_INT 24
18919: PPUSH
18920: NOP4
18924: PUSH
18925: NOP4
18929: PPUSH
18930: NOP4
18934: OR
18935: IFFALSE 18959
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18937: NOP4
18941: PPUSH
18942: LD_STRING D7a-Sik-1
18944: PPUSH
18945: NOP4
// SikorskyStatus = 1 ;
18949: NOP4
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
// end else
18957: GO 18979
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18959: NOP4
18963: PPUSH
18964: LD_STRING D7b-Sik-1
18966: PPUSH
18967: NOP4
// SikorskyStatus = 2 ;
18971: NOP4
18975: PUSH
18976: LD_INT 2
18978: ST_TO_ADDR
// end ; end ;
18979: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18980: NOP4
18984: PUSH
18985: LD_INT 1
18987: EQUAL
18988: IFFALSE 19097
18990: GO 18992
18992: DISABLE
18993: LD_INT 0
18995: PPUSH
// begin enable ;
18996: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18997: NOP4
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_INT 3
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: NOP4
19016: PUSH
19017: FOR_IN
19018: IFFALSE 19045
// if IsInArea ( i , RussianEscape ) then
19020: NOP4
19024: PPUSH
19025: LD_INT 22
19027: PPUSH
19028: NOP4
19032: IFFALSE 19043
// RemoveUnit ( i ) ;
19034: NOP4
19038: PPUSH
19039: NOP4
19043: GO 19017
19045: POP
19046: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19047: NOP4
19051: PUSH
19052: LD_INT 22
19054: PUSH
19055: LD_INT 6
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PPUSH
19062: NOP4
19066: PUSH
19067: FOR_IN
19068: IFFALSE 19095
// if IsInArea ( i , RussianEscape ) then
19070: NOP4
19074: PPUSH
19075: LD_INT 22
19077: PPUSH
19078: NOP4
19082: IFFALSE 19093
// RemoveUnit ( i ) ;
19084: NOP4
19088: PPUSH
19089: NOP4
19093: GO 19067
19095: POP
19096: POP
// end ; end_of_file
19097: PPOPN 1
19099: END
// on BuildingComplete ( building ) do var tmp , un ;
19100: LD_INT 0
19102: PPUSH
19103: PPUSH
// begin if GetSide ( building ) = 3 then
19104: NOP4
19108: PPUSH
19109: NOP4
19113: PUSH
19114: LD_INT 3
19116: EQUAL
19117: IFFALSE 19604
// begin if GetBType ( building ) = b_depot then
19119: NOP4
19123: PPUSH
19124: NOP4
19128: PUSH
19129: LD_INT 0
19131: EQUAL
19132: IFFALSE 19200
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19134: NOP4
19138: PPUSH
19139: NOP4
19143: PPUSH
19144: LD_INT 1
19146: PPUSH
19147: LD_INT 5000
19149: PPUSH
19150: NOP4
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19154: NOP4
19158: PPUSH
19159: NOP4
19163: PPUSH
19164: LD_INT 2
19166: PPUSH
19167: LD_INT 5000
19169: PPUSH
19170: NOP4
// SetBName ( building , konev ) ;
19174: NOP4
19178: PPUSH
19179: LD_STRING konev
19181: PPUSH
19182: NOP4
// ruDepot = building ;
19186: NOP4
19190: PUSH
19191: NOP4
19195: ST_TO_ADDR
// BuildRussianBase ;
19196: NOP4
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19200: NOP4
19204: PPUSH
19205: NOP4
19209: PUSH
19210: LD_INT 0
19212: EQUAL
19213: PUSH
19214: NOP4
19218: PPUSH
19219: NOP4
19223: PUSH
19224: LD_INT 2
19226: EQUAL
19227: OR
19228: PUSH
19229: NOP4
19233: PPUSH
19234: NOP4
19238: PUSH
19239: LD_INT 4
19241: EQUAL
19242: OR
19243: IFFALSE 19254
// ComUpgrade ( building ) ;
19245: NOP4
19249: PPUSH
19250: NOP4
// if GetBType ( building ) = b_lab then
19254: NOP4
19258: PPUSH
19259: NOP4
19263: PUSH
19264: LD_INT 6
19266: EQUAL
19267: IFFALSE 19318
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19269: NOP4
19273: PPUSH
19274: LD_INT 10
19276: PPUSH
19277: NOP4
// AddComUpgradeLab ( building , b_lab_computer ) ;
19281: NOP4
19285: PPUSH
19286: LD_INT 12
19288: PPUSH
19289: NOP4
// ResAllTechs ( 3 , building , 3 ) ;
19293: LD_INT 3
19295: PPUSH
19296: NOP4
19300: PPUSH
19301: LD_INT 3
19303: PPUSH
19304: NOP4
// ruLab = building ;
19308: NOP4
19312: PUSH
19313: NOP4
19317: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19318: NOP4
19322: PPUSH
19323: NOP4
19327: PUSH
19328: LD_INT 32
19330: EQUAL
19331: IFFALSE 19449
// begin uc_side = 3 ;
19333: LD_ADDR_OWVAR 20
19337: PUSH
19338: LD_INT 3
19340: ST_TO_ADDR
// uc_nation = 3 ;
19341: LD_ADDR_OWVAR 21
19345: PUSH
19346: LD_INT 3
19348: ST_TO_ADDR
// hc_gallery =  ;
19349: LD_ADDR_OWVAR 33
19353: PUSH
19354: LD_STRING 
19356: ST_TO_ADDR
// hc_name =  ;
19357: LD_ADDR_OWVAR 26
19361: PUSH
19362: LD_STRING 
19364: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19365: LD_INT 0
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: NOP4
19375: PPUSH
19376: NOP4
19380: PPUSH
19381: NOP4
19385: PPUSH
19386: NOP4
// un = CreateHuman ;
19390: NOP4
19394: PUSH
19395: NOP4
19399: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19400: NOP4
19404: PPUSH
19405: NOP4
19409: PPUSH
19410: NOP4
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19414: NOP4
19418: PPUSH
19419: LD_INT 43
19421: PUSH
19422: LD_INT 44
19424: PUSH
19425: LD_INT 46
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PPUSH
19436: LD_INT 3
19438: PPUSH
19439: NOP4
19443: ARRAY
19444: PPUSH
19445: NOP4
// end ; if GetBType ( building ) = b_turret then
19449: NOP4
19453: PPUSH
19454: NOP4
19458: PUSH
19459: LD_INT 33
19461: EQUAL
19462: IFFALSE 19499
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19464: NOP4
19468: PPUSH
19469: LD_INT 43
19471: PUSH
19472: LD_INT 44
19474: PUSH
19475: LD_INT 46
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PPUSH
19486: LD_INT 3
19488: PPUSH
19489: NOP4
19493: ARRAY
19494: PPUSH
19495: NOP4
// if GetBType ( building ) = b_ext_computer then
19499: NOP4
19503: PPUSH
19504: NOP4
19508: PUSH
19509: LD_INT 24
19511: EQUAL
19512: IFFALSE 19522
// russianAI = 1 ;
19514: NOP4
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19522: NOP4
19526: PUSH
19527: LD_INT 0
19529: GREATER
19530: IFFALSE 19604
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19532: NOP4
19536: PUSH
19537: NOP4
19541: PPUSH
19542: LD_INT 1
19544: PPUSH
19545: NOP4
19549: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19550: NOP4
19554: PUSH
19555: NOP4
19559: PPUSH
19560: LD_INT 1
19562: PPUSH
19563: NOP4
19567: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19568: NOP4
19572: PUSH
19573: NOP4
19577: PPUSH
19578: LD_INT 1
19580: PPUSH
19581: NOP4
19585: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19586: NOP4
19590: PUSH
19591: NOP4
19595: PPUSH
19596: LD_INT 1
19598: PPUSH
19599: NOP4
19603: ST_TO_ADDR
// end ; end ; end ;
19604: PPOPN 3
19606: END
// on UpgradeComplete ( building ) do var i ;
19607: LD_INT 0
19609: PPUSH
// begin if GetSide ( building ) = 3 then
19610: NOP4
19614: PPUSH
19615: NOP4
19619: PUSH
19620: LD_INT 3
19622: EQUAL
19623: IFFALSE 19804
// begin if GetBType ( building ) = b_factory then
19625: NOP4
19629: PPUSH
19630: NOP4
19634: PUSH
19635: LD_INT 3
19637: EQUAL
19638: IFFALSE 19705
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19640: NOP4
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_INT 3
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 25
19657: PUSH
19658: LD_INT 3
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: NOP4
19673: PUSH
19674: FOR_IN
19675: IFFALSE 19693
// ComEnterUnit ( i , building ) ;
19677: NOP4
19681: PPUSH
19682: NOP4
19686: PPUSH
19687: NOP4
19691: GO 19674
19693: POP
19694: POP
// ruFab = building ;
19695: NOP4
19699: PUSH
19700: NOP4
19704: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19705: NOP4
19709: PPUSH
19710: NOP4
19714: PUSH
19715: LD_INT 8
19717: EQUAL
19718: IFFALSE 19775
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19720: NOP4
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 25
19737: PUSH
19738: LD_INT 4
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PPUSH
19749: NOP4
19753: PUSH
19754: FOR_IN
19755: IFFALSE 19773
// ComEnterUnit ( i , building ) ;
19757: NOP4
19761: PPUSH
19762: NOP4
19766: PPUSH
19767: NOP4
19771: GO 19754
19773: POP
19774: POP
// if GetBType ( building ) = b_warehouse then
19775: NOP4
19779: PPUSH
19780: NOP4
19784: PUSH
19785: LD_INT 1
19787: EQUAL
19788: IFFALSE 19804
// begin ComEnterUnit ( Borodin , building ) ;
19790: NOP4
19794: PPUSH
19795: NOP4
19799: PPUSH
19800: NOP4
// end ; end ; end ;
19804: PPOPN 2
19806: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
19807: NOP4
19811: PPUSH
19812: NOP4
19816: PUSH
19817: LD_INT 2
19819: EQUAL
19820: PUSH
19821: NOP4
19825: PPUSH
19826: NOP4
19830: PUSH
19831: LD_INT 3
19833: EQUAL
19834: AND
19835: PUSH
19836: NOP4
19840: PUSH
19841: LD_INT 0
19843: EQUAL
19844: AND
19845: IFFALSE 19963
// begin varEvent1 = 1 ;
19847: NOP4
19851: PUSH
19852: LD_INT 1
19854: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
19855: NOP4
19859: PPUSH
19860: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
19864: LD_INT 22
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 21
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: LD_INT 25
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 25
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 4
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: PPUSH
19939: NOP4
19943: PUSH
19944: NOP4
19948: PUSH
19949: EMPTY
19950: LIST
19951: DIFF
19952: PPUSH
19953: LD_STRING DC-Sol1-1
19955: PPUSH
19956: LD_STRING DC-FSol1-1
19958: PPUSH
19959: NOP4
// end ; end ;
19963: PPOPN 1
19965: END
// on UnitDestroyed ( unit ) do var i ;
19966: LD_INT 0
19968: PPUSH
// begin if GetSide ( unit ) = 3 then
19969: NOP4
19973: PPUSH
19974: NOP4
19978: PUSH
19979: LD_INT 3
19981: EQUAL
19982: IFFALSE 20752
// begin if GetType ( unit ) = unit_building then
19984: NOP4
19988: PPUSH
19989: NOP4
19993: PUSH
19994: LD_INT 3
19996: EQUAL
19997: IFFALSE 20689
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
19999: NOP4
20003: PPUSH
20004: NOP4
20008: PUSH
20009: LD_INT 31
20011: EQUAL
20012: PUSH
20013: NOP4
20017: PPUSH
20018: NOP4
20022: PUSH
20023: LD_INT 32
20025: EQUAL
20026: OR
20027: PUSH
20028: NOP4
20032: PPUSH
20033: NOP4
20037: PUSH
20038: LD_INT 36
20040: EQUAL
20041: OR
20042: PUSH
20043: NOP4
20047: PPUSH
20048: NOP4
20052: PUSH
20053: LD_INT 0
20055: EQUAL
20056: OR
20057: PUSH
20058: NOP4
20062: PPUSH
20063: NOP4
20067: PUSH
20068: LD_INT 24
20070: EQUAL
20071: OR
20072: PUSH
20073: NOP4
20077: PPUSH
20078: NOP4
20082: PUSH
20083: LD_INT 17
20085: EQUAL
20086: OR
20087: PUSH
20088: NOP4
20092: PPUSH
20093: NOP4
20097: PUSH
20098: LD_INT 25
20100: EQUAL
20101: OR
20102: PUSH
20103: NOP4
20107: PPUSH
20108: NOP4
20112: PUSH
20113: LD_INT 19
20115: EQUAL
20116: OR
20117: PUSH
20118: NOP4
20122: PPUSH
20123: NOP4
20127: PUSH
20128: LD_INT 20
20130: EQUAL
20131: OR
20132: PUSH
20133: NOP4
20137: PPUSH
20138: NOP4
20142: PUSH
20143: LD_INT 18
20145: EQUAL
20146: OR
20147: PUSH
20148: NOP4
20152: PPUSH
20153: NOP4
20157: PUSH
20158: LD_INT 21
20160: EQUAL
20161: OR
20162: PUSH
20163: NOP4
20167: PPUSH
20168: NOP4
20172: PUSH
20173: LD_INT 23
20175: EQUAL
20176: OR
20177: PUSH
20178: NOP4
20182: PPUSH
20183: NOP4
20187: PUSH
20188: LD_INT 16
20190: EQUAL
20191: OR
20192: PUSH
20193: NOP4
20197: PPUSH
20198: NOP4
20202: PUSH
20203: LD_INT 6
20205: EQUAL
20206: OR
20207: PUSH
20208: NOP4
20212: PPUSH
20213: NOP4
20217: PUSH
20218: LD_INT 29
20220: EQUAL
20221: OR
20222: PUSH
20223: NOP4
20227: PPUSH
20228: NOP4
20232: PUSH
20233: LD_INT 26
20235: EQUAL
20236: OR
20237: PUSH
20238: NOP4
20242: PPUSH
20243: NOP4
20247: PUSH
20248: LD_INT 30
20250: EQUAL
20251: OR
20252: PUSH
20253: NOP4
20257: PPUSH
20258: NOP4
20262: PUSH
20263: LD_INT 28
20265: EQUAL
20266: OR
20267: PUSH
20268: NOP4
20272: PPUSH
20273: NOP4
20277: PUSH
20278: LD_INT 27
20280: EQUAL
20281: OR
20282: PUSH
20283: NOP4
20287: PPUSH
20288: NOP4
20292: PUSH
20293: LD_INT 33
20295: EQUAL
20296: OR
20297: PUSH
20298: NOP4
20302: PPUSH
20303: NOP4
20307: PUSH
20308: LD_INT 2
20310: EQUAL
20311: OR
20312: PUSH
20313: NOP4
20317: PPUSH
20318: NOP4
20322: PUSH
20323: LD_INT 4
20325: EQUAL
20326: OR
20327: IFFALSE 20413
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20329: NOP4
20333: PUSH
20334: NOP4
20338: PUSH
20339: NOP4
20343: PPUSH
20344: NOP4
20348: ADD
20349: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20350: NOP4
20354: PUSH
20355: NOP4
20359: PUSH
20360: NOP4
20364: PPUSH
20365: NOP4
20369: ADD
20370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20371: NOP4
20375: PUSH
20376: NOP4
20380: PUSH
20381: NOP4
20385: PPUSH
20386: NOP4
20390: ADD
20391: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20392: NOP4
20396: PUSH
20397: NOP4
20401: PUSH
20402: NOP4
20406: PPUSH
20407: NOP4
20411: ADD
20412: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20413: NOP4
20417: PPUSH
20418: NOP4
20422: PUSH
20423: LD_INT 1
20425: EQUAL
20426: IFFALSE 20505
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20428: NOP4
20432: PUSH
20433: NOP4
20437: PUSH
20438: LD_INT 0
20440: ADD
20441: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20442: NOP4
20446: PUSH
20447: NOP4
20451: PUSH
20452: NOP4
20456: PPUSH
20457: NOP4
20461: ADD
20462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20463: NOP4
20467: PUSH
20468: NOP4
20472: PUSH
20473: NOP4
20477: PPUSH
20478: NOP4
20482: ADD
20483: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20484: NOP4
20488: PUSH
20489: NOP4
20493: PUSH
20494: NOP4
20498: PPUSH
20499: NOP4
20503: ADD
20504: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20505: NOP4
20509: PPUSH
20510: NOP4
20514: PUSH
20515: LD_INT 3
20517: EQUAL
20518: IFFALSE 20597
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20520: NOP4
20524: PUSH
20525: NOP4
20529: PUSH
20530: LD_INT 2
20532: ADD
20533: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20534: NOP4
20538: PUSH
20539: NOP4
20543: PUSH
20544: NOP4
20548: PPUSH
20549: NOP4
20553: ADD
20554: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20555: NOP4
20559: PUSH
20560: NOP4
20564: PUSH
20565: NOP4
20569: PPUSH
20570: NOP4
20574: ADD
20575: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20576: NOP4
20580: PUSH
20581: NOP4
20585: PUSH
20586: NOP4
20590: PPUSH
20591: NOP4
20595: ADD
20596: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20597: NOP4
20601: PPUSH
20602: NOP4
20606: PUSH
20607: LD_INT 5
20609: EQUAL
20610: IFFALSE 20689
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20612: NOP4
20616: PUSH
20617: NOP4
20621: PUSH
20622: LD_INT 4
20624: ADD
20625: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20626: NOP4
20630: PUSH
20631: NOP4
20635: PUSH
20636: NOP4
20640: PPUSH
20641: NOP4
20645: ADD
20646: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20647: NOP4
20651: PUSH
20652: NOP4
20656: PUSH
20657: NOP4
20661: PPUSH
20662: NOP4
20666: ADD
20667: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20668: NOP4
20672: PUSH
20673: NOP4
20677: PUSH
20678: NOP4
20682: PPUSH
20683: NOP4
20687: ADD
20688: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20689: NOP4
20693: PPUSH
20694: NOP4
20698: PUSH
20699: LD_INT 1
20701: EQUAL
20702: IFFALSE 20752
// begin for i in defenders_list do
20704: NOP4
20708: PUSH
20709: NOP4
20713: PUSH
20714: FOR_IN
20715: IFFALSE 20750
// if i = unit then
20717: NOP4
20721: PUSH
20722: NOP4
20726: EQUAL
20727: IFFALSE 20748
// defenders_list = defenders_list diff [ unit ] ;
20729: NOP4
20733: PUSH
20734: NOP4
20738: PUSH
20739: NOP4
20743: PUSH
20744: EMPTY
20745: LIST
20746: DIFF
20747: ST_TO_ADDR
20748: GO 20714
20750: POP
20751: POP
// end ; end ; end ; end_of_file
20752: PPOPN 2
20754: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20755: GO 20757
20757: DISABLE
20758: LD_INT 0
20760: PPUSH
// begin enemyWayX = [ ] ;
20761: NOP4
20765: PUSH
20766: EMPTY
20767: ST_TO_ADDR
// enemyWayY = [ ] ;
20768: NOP4
20772: PUSH
20773: EMPTY
20774: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
20775: NOP4
20779: PUSH
20780: LD_INT 1
20782: PPUSH
20783: LD_INT 3
20785: PPUSH
20786: NOP4
20790: ST_TO_ADDR
// if rnd = 1 then
20791: NOP4
20795: PUSH
20796: LD_INT 1
20798: EQUAL
20799: IFFALSE 20839
// begin enemyWayX = [ 73 , 46 , 29 ] ;
20801: NOP4
20805: PUSH
20806: LD_INT 73
20808: PUSH
20809: LD_INT 46
20811: PUSH
20812: LD_INT 29
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
20820: NOP4
20824: PUSH
20825: LD_INT 71
20827: PUSH
20828: LD_INT 43
20830: PUSH
20831: LD_INT 29
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: ST_TO_ADDR
// end ; if rnd = 2 then
20839: NOP4
20843: PUSH
20844: LD_INT 2
20846: EQUAL
20847: IFFALSE 20871
// begin enemyWayX = [ 64 ] ;
20849: NOP4
20853: PUSH
20854: LD_INT 64
20856: PUSH
20857: EMPTY
20858: LIST
20859: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
20860: NOP4
20864: PUSH
20865: LD_INT 43
20867: PUSH
20868: EMPTY
20869: LIST
20870: ST_TO_ADDR
// end ; if rnd = 3 then
20871: NOP4
20875: PUSH
20876: LD_INT 3
20878: EQUAL
20879: IFFALSE 20903
// begin enemyWayX = [ 80 ] ;
20881: NOP4
20885: PUSH
20886: LD_INT 80
20888: PUSH
20889: EMPTY
20890: LIST
20891: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
20892: NOP4
20896: PUSH
20897: LD_INT 28
20899: PUSH
20900: EMPTY
20901: LIST
20902: ST_TO_ADDR
// end ; enable ;
20903: ENABLE
// end ;
20904: PPOPN 1
20906: END
// every 0 0$1 do
20907: GO 20909
20909: DISABLE
// begin enable ;
20910: ENABLE
// if escapeAvalaible = 0 then
20911: NOP4
20915: PUSH
20916: LD_INT 0
20918: EQUAL
20919: IFFALSE 20931
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20921: LD_INT 3
20923: PPUSH
20924: LD_INT 6
20926: PPUSH
20927: NOP4
// if escapeAvalaible = 0 then
20931: NOP4
20935: PUSH
20936: LD_INT 0
20938: EQUAL
20939: IFFALSE 20951
// DefenseBase ( 1 , RussianBaseTerritory ) ;
20941: LD_INT 1
20943: PPUSH
20944: LD_INT 24
20946: PPUSH
20947: NOP4
// if russianAI = 1 then
20951: NOP4
20955: PUSH
20956: LD_INT 1
20958: EQUAL
20959: IFFALSE 21031
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
20961: LD_INT 3
20963: PPUSH
20964: LD_INT 7
20966: PPUSH
20967: LD_INT 6
20969: PPUSH
20970: NOP4
20974: PPUSH
20975: NOP4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
20979: LD_INT 3
20981: PPUSH
20982: NOP4
20986: PPUSH
20987: LD_INT 6
20989: PPUSH
20990: NOP4
20994: PPUSH
20995: NOP4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20999: LD_INT 3
21001: PPUSH
21002: NOP4
21006: PPUSH
21007: NOP4
21011: PPUSH
21012: NOP4
21016: PPUSH
21017: NOP4
// AttackNearBuildings ( 3 , 1 ) ;
21021: LD_INT 3
21023: PPUSH
21024: LD_INT 1
21026: PPUSH
21027: NOP4
// end ; if SikorskyArrive = 1 then
21031: NOP4
21035: PUSH
21036: LD_INT 1
21038: EQUAL
21039: IFFALSE 21057
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21041: LD_INT 3
21043: PPUSH
21044: LD_INT 10
21046: PPUSH
21047: LD_INT 53
21049: PPUSH
21050: LD_INT 59
21052: PPUSH
21053: NOP4
// end ;
21057: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21058: NOP4
21062: PUSH
21063: LD_INT 1
21065: EQUAL
21066: IFFALSE 21342
21068: GO 21070
21070: DISABLE
21071: LD_INT 0
21073: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21074: NOP4
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_INT 3
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 21
21091: PUSH
21092: LD_INT 3
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 30
21101: PUSH
21102: LD_INT 32
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 3
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: LD_INT 35
21117: PUSH
21118: LD_INT 43
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 35
21127: PUSH
21128: LD_INT 44
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 35
21137: PUSH
21138: LD_INT 46
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: PPUSH
21161: NOP4
21165: PUSH
21166: FOR_IN
21167: IFFALSE 21206
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21169: NOP4
21173: PPUSH
21174: LD_INT 43
21176: PUSH
21177: LD_INT 44
21179: PUSH
21180: LD_INT 46
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 1
21190: PPUSH
21191: LD_INT 3
21193: PPUSH
21194: NOP4
21198: ARRAY
21199: PPUSH
21200: NOP4
21204: GO 21166
21206: POP
21207: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21208: NOP4
21212: PUSH
21213: LD_INT 22
21215: PUSH
21216: LD_INT 3
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 30
21235: PUSH
21236: LD_INT 33
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: LD_INT 35
21251: PUSH
21252: LD_INT 43
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 35
21261: PUSH
21262: LD_INT 44
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 35
21271: PUSH
21272: LD_INT 46
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: PPUSH
21295: NOP4
21299: PUSH
21300: FOR_IN
21301: IFFALSE 21340
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21303: NOP4
21307: PPUSH
21308: LD_INT 43
21310: PUSH
21311: LD_INT 44
21313: PUSH
21314: LD_INT 46
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: PPUSH
21325: LD_INT 3
21327: PPUSH
21328: NOP4
21332: ARRAY
21333: PPUSH
21334: NOP4
21338: GO 21300
21340: POP
21341: POP
// end ;
21342: PPOPN 1
21344: END
// every 0 0$1 trigger SikorskyAI = 1 do
21345: NOP4
21349: PUSH
21350: LD_INT 1
21352: EQUAL
21353: IFFALSE 21388
21355: GO 21357
21357: DISABLE
// begin enable ;
21358: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21359: LD_INT 4
21361: PPUSH
21362: LD_INT 10
21364: PPUSH
21365: LD_INT 93
21367: PPUSH
21368: LD_INT 93
21370: PPUSH
21371: NOP4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21375: LD_INT 4
21377: PPUSH
21378: LD_INT 11
21380: PPUSH
21381: LD_INT 3
21383: PPUSH
21384: NOP4
// end ;
21388: END
// every 0 0$1 trigger SikorskyAI = 1 do
21389: NOP4
21393: PUSH
21394: LD_INT 1
21396: EQUAL
21397: IFFALSE 21409
21399: GO 21401
21401: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21402: LD_INT 4
21404: PPUSH
21405: NOP4
21409: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21410: NOP4
21414: PUSH
21415: LD_INT 1
21417: EQUAL
21418: PUSH
21419: NOP4
21423: PPUSH
21424: NOP4
21428: AND
21429: PUSH
21430: NOP4
21434: PPUSH
21435: NOP4
21439: PUSH
21440: LD_INT 3
21442: EQUAL
21443: AND
21444: PUSH
21445: LD_INT 22
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 21
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 33
21467: PUSH
21468: LD_INT 3
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: PPUSH
21480: NOP4
21484: PUSH
21485: LD_INT 0
21487: EQUAL
21488: AND
21489: IFFALSE 21723
21491: GO 21493
21493: DISABLE
// begin enable ;
21494: ENABLE
// if Difficulty = 1 then
21495: NOP4
21499: PUSH
21500: LD_INT 1
21502: EQUAL
21503: IFFALSE 21571
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21505: LD_INT 3
21507: PPUSH
21508: NOP4
21512: PPUSH
21513: LD_INT 5
21515: PPUSH
21516: LD_INT 8
21518: PPUSH
21519: NOP4
21523: PPUSH
21524: LD_INT 43
21526: PUSH
21527: LD_INT 43
21529: PUSH
21530: LD_INT 43
21532: PUSH
21533: LD_INT 43
21535: PUSH
21536: LD_INT 44
21538: PUSH
21539: LD_INT 44
21541: PUSH
21542: LD_INT 44
21544: PUSH
21545: LD_INT 46
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: PPUSH
21558: LD_INT 1
21560: PPUSH
21561: LD_INT 3
21563: PPUSH
21564: LD_INT 24
21566: PPUSH
21567: NOP4
// if Difficulty = 2 then
21571: NOP4
21575: PUSH
21576: LD_INT 2
21578: EQUAL
21579: IFFALSE 21647
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
21581: LD_INT 3
21583: PPUSH
21584: NOP4
21588: PPUSH
21589: LD_INT 6
21591: PPUSH
21592: LD_INT 8
21594: PPUSH
21595: NOP4
21599: PPUSH
21600: LD_INT 43
21602: PUSH
21603: LD_INT 43
21605: PUSH
21606: LD_INT 44
21608: PUSH
21609: LD_INT 44
21611: PUSH
21612: LD_INT 44
21614: PUSH
21615: LD_INT 44
21617: PUSH
21618: LD_INT 46
21620: PUSH
21621: LD_INT 46
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: PPUSH
21634: LD_INT 1
21636: PPUSH
21637: LD_INT 3
21639: PPUSH
21640: LD_INT 24
21642: PPUSH
21643: NOP4
// if Difficulty = 3 then
21647: NOP4
21651: PUSH
21652: LD_INT 3
21654: EQUAL
21655: IFFALSE 21723
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
21657: LD_INT 3
21659: PPUSH
21660: NOP4
21664: PPUSH
21665: LD_INT 7
21667: PPUSH
21668: LD_INT 8
21670: PPUSH
21671: NOP4
21675: PPUSH
21676: LD_INT 43
21678: PUSH
21679: LD_INT 43
21681: PUSH
21682: LD_INT 44
21684: PUSH
21685: LD_INT 44
21687: PUSH
21688: LD_INT 44
21690: PUSH
21691: LD_INT 46
21693: PUSH
21694: LD_INT 46
21696: PUSH
21697: LD_INT 46
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: PPUSH
21710: LD_INT 1
21712: PPUSH
21713: LD_INT 3
21715: PPUSH
21716: LD_INT 24
21718: PPUSH
21719: NOP4
// end ;
21723: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
21724: NOP4
21728: PUSH
21729: LD_INT 1
21731: EQUAL
21732: IFFALSE 21814
21734: GO 21736
21736: DISABLE
21737: LD_INT 0
21739: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
21740: NOP4
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 21
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: LD_INT 24
21770: PUSH
21771: LD_INT 650
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PPUSH
21787: NOP4
21791: PUSH
21792: FOR_IN
21793: IFFALSE 21812
// ComMoveXY ( i , 51 , 12 ) ;
21795: NOP4
21799: PPUSH
21800: LD_INT 51
21802: PPUSH
21803: LD_INT 12
21805: PPUSH
21806: NOP4
21810: GO 21792
21812: POP
21813: POP
// end ; end_of_file
21814: PPOPN 1
21816: END
// every 3 3$20 trigger firstAttack = 1 do
21817: NOP4
21821: PUSH
21822: LD_INT 1
21824: EQUAL
21825: IFFALSE 21931
21827: GO 21829
21829: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21830: LD_INT 6
21832: PPUSH
21833: LD_INT 3
21835: PPUSH
21836: LD_INT 5
21838: PPUSH
21839: LD_INT 6
21841: PPUSH
21842: NOP4
21846: PUSH
21847: LD_INT 5
21849: PPUSH
21850: LD_INT 6
21852: PPUSH
21853: NOP4
21857: PUSH
21858: LD_INT 5
21860: PPUSH
21861: LD_INT 6
21863: PPUSH
21864: NOP4
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: NOP4
21878: ARRAY
21879: PPUSH
21880: LD_INT 0
21882: PPUSH
21883: LD_INT 0
21885: PPUSH
21886: LD_INT 0
21888: PPUSH
21889: LD_INT 0
21891: PPUSH
21892: NOP4
21896: PPUSH
21897: NOP4
21901: PPUSH
21902: NOP4
21906: PPUSH
21907: LD_INT 16
21909: PPUSH
21910: LD_INT 7
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: LD_INT 1
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: NOP4
21926: PPUSH
21927: NOP4
21931: END
// every 3 3$40 trigger firstAttack = 1 do
21932: NOP4
21936: PUSH
21937: LD_INT 1
21939: EQUAL
21940: IFFALSE 22032
21942: GO 21944
21944: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21945: LD_INT 16
21947: PPUSH
21948: LD_INT 6
21950: PPUSH
21951: LD_INT 3
21953: PPUSH
21954: LD_INT 4
21956: PPUSH
21957: NOP4
21961: PUSH
21962: LD_INT 4
21964: PPUSH
21965: LD_INT 5
21967: PPUSH
21968: NOP4
21972: PUSH
21973: LD_INT 5
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: NOP4
21985: ARRAY
21986: PPUSH
21987: NOP4
21991: PPUSH
21992: NOP4
21996: PPUSH
21997: NOP4
22001: PPUSH
22002: LD_INT 3
22004: PPUSH
22005: LD_INT 1
22007: PPUSH
22008: LD_INT 3
22010: PPUSH
22011: LD_INT 44
22013: PUSH
22014: LD_INT 46
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PPUSH
22021: EMPTY
22022: PPUSH
22023: EMPTY
22024: PPUSH
22025: LD_INT 1
22027: PPUSH
22028: NOP4
22032: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22033: NOP4
22037: PUSH
22038: LD_INT 1
22040: EQUAL
22041: PUSH
22042: NOP4
22046: PUSH
22047: LD_INT 0
22049: EQUAL
22050: AND
22051: IFFALSE 22157
22053: GO 22055
22055: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22056: LD_INT 6
22058: PPUSH
22059: LD_INT 3
22061: PPUSH
22062: LD_INT 5
22064: PPUSH
22065: LD_INT 6
22067: PPUSH
22068: NOP4
22072: PUSH
22073: LD_INT 5
22075: PPUSH
22076: LD_INT 6
22078: PPUSH
22079: NOP4
22083: PUSH
22084: LD_INT 5
22086: PPUSH
22087: LD_INT 6
22089: PPUSH
22090: NOP4
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: LIST
22099: PUSH
22100: NOP4
22104: ARRAY
22105: PPUSH
22106: LD_INT 0
22108: PPUSH
22109: LD_INT 0
22111: PPUSH
22112: LD_INT 0
22114: PPUSH
22115: LD_INT 0
22117: PPUSH
22118: NOP4
22122: PPUSH
22123: NOP4
22127: PPUSH
22128: NOP4
22132: PPUSH
22133: LD_INT 16
22135: PPUSH
22136: LD_INT 7
22138: PPUSH
22139: LD_INT 1
22141: PPUSH
22142: LD_INT 1
22144: PPUSH
22145: LD_INT 3
22147: PPUSH
22148: NOP4
22152: PPUSH
22153: NOP4
22157: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22158: NOP4
22162: PUSH
22163: LD_INT 1
22165: EQUAL
22166: PUSH
22167: NOP4
22171: PUSH
22172: LD_INT 0
22174: EQUAL
22175: AND
22176: IFFALSE 22272
22178: GO 22180
22180: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22181: LD_INT 16
22183: PPUSH
22184: LD_INT 6
22186: PPUSH
22187: LD_INT 5
22189: PPUSH
22190: LD_INT 6
22192: PPUSH
22193: NOP4
22197: PUSH
22198: LD_INT 6
22200: PPUSH
22201: LD_INT 7
22203: PPUSH
22204: NOP4
22208: PUSH
22209: LD_INT 7
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: PUSH
22217: NOP4
22221: ARRAY
22222: PPUSH
22223: NOP4
22227: PPUSH
22228: NOP4
22232: PPUSH
22233: NOP4
22237: PPUSH
22238: LD_INT 3
22240: PPUSH
22241: LD_INT 1
22243: PPUSH
22244: LD_INT 3
22246: PPUSH
22247: LD_INT 43
22249: PUSH
22250: LD_INT 44
22252: PUSH
22253: LD_INT 46
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: PPUSH
22261: EMPTY
22262: PPUSH
22263: EMPTY
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: NOP4
22272: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22273: NOP4
22277: PUSH
22278: LD_INT 1
22280: EQUAL
22281: PUSH
22282: NOP4
22286: PUSH
22287: LD_INT 0
22289: EQUAL
22290: AND
22291: IFFALSE 22367
22293: GO 22295
22295: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22296: LD_INT 16
22298: PPUSH
22299: LD_INT 6
22301: PPUSH
22302: LD_INT 5
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 7
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: PUSH
22316: NOP4
22320: ARRAY
22321: PPUSH
22322: NOP4
22326: PPUSH
22327: NOP4
22331: PPUSH
22332: NOP4
22336: PPUSH
22337: LD_INT 3
22339: PPUSH
22340: LD_INT 1
22342: PPUSH
22343: LD_INT 3
22345: PPUSH
22346: LD_INT 44
22348: PUSH
22349: LD_INT 46
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PPUSH
22356: EMPTY
22357: PPUSH
22358: EMPTY
22359: PPUSH
22360: LD_INT 1
22362: PPUSH
22363: NOP4
22367: END
// every 1 1$00 trigger secondAttack = 1 do
22368: NOP4
22372: PUSH
22373: LD_INT 1
22375: EQUAL
22376: IFFALSE 22482
22378: GO 22380
22380: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22381: LD_INT 6
22383: PPUSH
22384: LD_INT 3
22386: PPUSH
22387: LD_INT 4
22389: PPUSH
22390: LD_INT 7
22392: PPUSH
22393: NOP4
22397: PUSH
22398: LD_INT 6
22400: PPUSH
22401: LD_INT 7
22403: PPUSH
22404: NOP4
22408: PUSH
22409: LD_INT 6
22411: PPUSH
22412: LD_INT 10
22414: PPUSH
22415: NOP4
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: LIST
22424: PUSH
22425: NOP4
22429: ARRAY
22430: PPUSH
22431: LD_INT 0
22433: PPUSH
22434: LD_INT 0
22436: PPUSH
22437: LD_INT 0
22439: PPUSH
22440: LD_INT 0
22442: PPUSH
22443: NOP4
22447: PPUSH
22448: NOP4
22452: PPUSH
22453: NOP4
22457: PPUSH
22458: LD_INT 16
22460: PPUSH
22461: LD_INT 7
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_INT 1
22469: PPUSH
22470: LD_INT 3
22472: PPUSH
22473: NOP4
22477: PPUSH
22478: NOP4
22482: END
// every 1 1$00 trigger secondAttack = 1 do
22483: NOP4
22487: PUSH
22488: LD_INT 1
22490: EQUAL
22491: IFFALSE 22595
22493: GO 22495
22495: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22496: LD_INT 16
22498: PPUSH
22499: LD_INT 6
22501: PPUSH
22502: LD_INT 5
22504: PPUSH
22505: LD_INT 8
22507: PPUSH
22508: NOP4
22512: PUSH
22513: LD_INT 6
22515: PPUSH
22516: LD_INT 9
22518: PPUSH
22519: NOP4
22523: PUSH
22524: LD_INT 7
22526: PPUSH
22527: LD_INT 9
22529: PPUSH
22530: NOP4
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: NOP4
22544: ARRAY
22545: PPUSH
22546: NOP4
22550: PPUSH
22551: NOP4
22555: PPUSH
22556: NOP4
22560: PPUSH
22561: LD_INT 3
22563: PPUSH
22564: LD_INT 1
22566: PPUSH
22567: LD_INT 3
22569: PPUSH
22570: LD_INT 43
22572: PUSH
22573: LD_INT 44
22575: PUSH
22576: LD_INT 46
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: PPUSH
22584: EMPTY
22585: PPUSH
22586: EMPTY
22587: PPUSH
22588: LD_INT 1
22590: PPUSH
22591: NOP4
22595: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22596: NOP4
22600: PUSH
22601: LD_INT 0
22603: EQUAL
22604: IFFALSE 22710
22606: GO 22608
22608: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22609: LD_INT 6
22611: PPUSH
22612: LD_INT 3
22614: PPUSH
22615: LD_INT 8
22617: PPUSH
22618: LD_INT 9
22620: PPUSH
22621: NOP4
22625: PUSH
22626: LD_INT 7
22628: PPUSH
22629: LD_INT 10
22631: PPUSH
22632: NOP4
22636: PUSH
22637: LD_INT 8
22639: PPUSH
22640: LD_INT 10
22642: PPUSH
22643: NOP4
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: PUSH
22653: NOP4
22657: ARRAY
22658: PPUSH
22659: LD_INT 0
22661: PPUSH
22662: LD_INT 0
22664: PPUSH
22665: LD_INT 0
22667: PPUSH
22668: LD_INT 0
22670: PPUSH
22671: NOP4
22675: PPUSH
22676: NOP4
22680: PPUSH
22681: NOP4
22685: PPUSH
22686: LD_INT 16
22688: PPUSH
22689: LD_INT 7
22691: PPUSH
22692: LD_INT 1
22694: PPUSH
22695: LD_INT 1
22697: PPUSH
22698: LD_INT 3
22700: PPUSH
22701: NOP4
22705: PPUSH
22706: NOP4
22710: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22711: NOP4
22715: PUSH
22716: LD_INT 0
22718: EQUAL
22719: IFFALSE 22819
22721: GO 22723
22723: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22724: LD_INT 16
22726: PPUSH
22727: LD_INT 6
22729: PPUSH
22730: LD_INT 5
22732: PPUSH
22733: LD_INT 8
22735: PPUSH
22736: NOP4
22740: PUSH
22741: LD_INT 6
22743: PPUSH
22744: LD_INT 9
22746: PPUSH
22747: NOP4
22751: PUSH
22752: LD_INT 7
22754: PPUSH
22755: LD_INT 9
22757: PPUSH
22758: NOP4
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: PUSH
22768: NOP4
22772: ARRAY
22773: PPUSH
22774: NOP4
22778: PPUSH
22779: NOP4
22783: PPUSH
22784: NOP4
22788: PPUSH
22789: LD_INT 3
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: LD_INT 3
22797: PPUSH
22798: LD_INT 44
22800: PUSH
22801: LD_INT 46
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PPUSH
22808: EMPTY
22809: PPUSH
22810: EMPTY
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: NOP4
22819: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22820: NOP4
22824: PUSH
22825: LD_INT 0
22827: EQUAL
22828: IFFALSE 22934
22830: GO 22832
22832: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22833: LD_INT 6
22835: PPUSH
22836: LD_INT 3
22838: PPUSH
22839: LD_INT 8
22841: PPUSH
22842: LD_INT 9
22844: PPUSH
22845: NOP4
22849: PUSH
22850: LD_INT 7
22852: PPUSH
22853: LD_INT 10
22855: PPUSH
22856: NOP4
22860: PUSH
22861: LD_INT 8
22863: PPUSH
22864: LD_INT 10
22866: PPUSH
22867: NOP4
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: NOP4
22881: ARRAY
22882: PPUSH
22883: LD_INT 0
22885: PPUSH
22886: LD_INT 0
22888: PPUSH
22889: LD_INT 0
22891: PPUSH
22892: LD_INT 0
22894: PPUSH
22895: NOP4
22899: PPUSH
22900: NOP4
22904: PPUSH
22905: NOP4
22909: PPUSH
22910: LD_INT 16
22912: PPUSH
22913: LD_INT 7
22915: PPUSH
22916: LD_INT 1
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: LD_INT 3
22924: PPUSH
22925: NOP4
22929: PPUSH
22930: NOP4
22934: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22935: NOP4
22939: PUSH
22940: LD_INT 0
22942: EQUAL
22943: IFFALSE 23043
22945: GO 22947
22947: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22948: LD_INT 16
22950: PPUSH
22951: LD_INT 6
22953: PPUSH
22954: LD_INT 5
22956: PPUSH
22957: LD_INT 8
22959: PPUSH
22960: NOP4
22964: PUSH
22965: LD_INT 6
22967: PPUSH
22968: LD_INT 9
22970: PPUSH
22971: NOP4
22975: PUSH
22976: LD_INT 7
22978: PPUSH
22979: LD_INT 9
22981: PPUSH
22982: NOP4
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: PUSH
22992: NOP4
22996: ARRAY
22997: PPUSH
22998: NOP4
23002: PPUSH
23003: NOP4
23007: PPUSH
23008: NOP4
23012: PPUSH
23013: LD_INT 3
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: LD_INT 3
23021: PPUSH
23022: LD_INT 44
23024: PUSH
23025: LD_INT 46
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PPUSH
23032: EMPTY
23033: PPUSH
23034: EMPTY
23035: PPUSH
23036: LD_INT 1
23038: PPUSH
23039: NOP4
23043: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23044: NOP4
23048: PUSH
23049: LD_INT 0
23051: EQUAL
23052: IFFALSE 23158
23054: GO 23056
23056: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23057: LD_INT 6
23059: PPUSH
23060: LD_INT 3
23062: PPUSH
23063: LD_INT 8
23065: PPUSH
23066: LD_INT 9
23068: PPUSH
23069: NOP4
23073: PUSH
23074: LD_INT 7
23076: PPUSH
23077: LD_INT 10
23079: PPUSH
23080: NOP4
23084: PUSH
23085: LD_INT 8
23087: PPUSH
23088: LD_INT 10
23090: PPUSH
23091: NOP4
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: PUSH
23101: NOP4
23105: ARRAY
23106: PPUSH
23107: LD_INT 0
23109: PPUSH
23110: LD_INT 0
23112: PPUSH
23113: LD_INT 0
23115: PPUSH
23116: LD_INT 0
23118: PPUSH
23119: NOP4
23123: PPUSH
23124: NOP4
23128: PPUSH
23129: NOP4
23133: PPUSH
23134: LD_INT 16
23136: PPUSH
23137: LD_INT 7
23139: PPUSH
23140: LD_INT 1
23142: PPUSH
23143: LD_INT 1
23145: PPUSH
23146: LD_INT 3
23148: PPUSH
23149: NOP4
23153: PPUSH
23154: NOP4
23158: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23159: NOP4
23163: PUSH
23164: LD_INT 0
23166: EQUAL
23167: IFFALSE 23267
23169: GO 23171
23171: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23172: LD_INT 16
23174: PPUSH
23175: LD_INT 6
23177: PPUSH
23178: LD_INT 5
23180: PPUSH
23181: LD_INT 8
23183: PPUSH
23184: NOP4
23188: PUSH
23189: LD_INT 6
23191: PPUSH
23192: LD_INT 9
23194: PPUSH
23195: NOP4
23199: PUSH
23200: LD_INT 7
23202: PPUSH
23203: LD_INT 9
23205: PPUSH
23206: NOP4
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: PUSH
23216: NOP4
23220: ARRAY
23221: PPUSH
23222: NOP4
23226: PPUSH
23227: NOP4
23231: PPUSH
23232: NOP4
23236: PPUSH
23237: LD_INT 3
23239: PPUSH
23240: LD_INT 1
23242: PPUSH
23243: LD_INT 3
23245: PPUSH
23246: LD_INT 44
23248: PUSH
23249: LD_INT 46
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PPUSH
23256: EMPTY
23257: PPUSH
23258: EMPTY
23259: PPUSH
23260: LD_INT 1
23262: PPUSH
23263: NOP4
23267: END
// every 0 0$1 trigger timerStatus = 1 do
23268: NOP4
23272: PUSH
23273: LD_INT 1
23275: EQUAL
23276: IFFALSE 23313
23278: GO 23280
23280: DISABLE
// begin enable ;
23281: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23282: LD_ADDR_OWVAR 47
23286: PUSH
23287: LD_STRING #Am08-1
23289: PUSH
23290: NOP4
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23299: NOP4
23303: PUSH
23304: NOP4
23308: PUSH
23309: LD_INT 35
23311: MINUS
23312: ST_TO_ADDR
// end ; end_of_file
23313: END
// every 1 1$0 do
23314: GO 23316
23316: DISABLE
// begin if supply <= 13 and supply > 7 then
23317: NOP4
23321: PUSH
23322: LD_INT 13
23324: LESSEQUAL
23325: PUSH
23326: NOP4
23330: PUSH
23331: LD_INT 7
23333: GREATER
23334: AND
23335: IFFALSE 23358
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23337: LD_INT 3
23339: PPUSH
23340: LD_INT 5
23342: PPUSH
23343: NOP4
23347: PPUSH
23348: LD_INT 5
23350: PPUSH
23351: LD_INT 1
23353: PPUSH
23354: NOP4
// if supply <= 7 and supply > 4 then
23358: NOP4
23362: PUSH
23363: LD_INT 7
23365: LESSEQUAL
23366: PUSH
23367: NOP4
23371: PUSH
23372: LD_INT 4
23374: GREATER
23375: AND
23376: IFFALSE 23399
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23378: LD_INT 3
23380: PPUSH
23381: LD_INT 5
23383: PPUSH
23384: NOP4
23388: PPUSH
23389: LD_INT 20
23391: PPUSH
23392: LD_INT 1
23394: PPUSH
23395: NOP4
// if supply <= 4 and supply > 0 then
23399: NOP4
23403: PUSH
23404: LD_INT 4
23406: LESSEQUAL
23407: PUSH
23408: NOP4
23412: PUSH
23413: LD_INT 0
23415: GREATER
23416: AND
23417: IFFALSE 23440
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23419: LD_INT 3
23421: PPUSH
23422: LD_INT 5
23424: PPUSH
23425: NOP4
23429: PPUSH
23430: LD_INT 21
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: NOP4
// if supply > 0 then
23440: NOP4
23444: PUSH
23445: LD_INT 0
23447: GREATER
23448: IFFALSE 23465
// begin supply = supply - 1 ;
23450: NOP4
23454: PUSH
23455: NOP4
23459: PUSH
23460: LD_INT 1
23462: MINUS
23463: ST_TO_ADDR
// enable ;
23464: ENABLE
// end ; end ; end_of_file
23465: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23466: NOP4
23470: PUSH
23471: LD_INT 1
23473: EQUAL
23474: PUSH
23475: NOP4
23479: PPUSH
23480: NOP4
23484: AND
23485: IFFALSE 23497
23487: GO 23489
23489: DISABLE
// YouLost ( JMM ) ;
23490: LD_STRING JMM
23492: PPUSH
23493: NOP4
23497: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23498: NOP4
23502: PUSH
23503: LD_INT 1
23505: EQUAL
23506: PUSH
23507: NOP4
23511: PPUSH
23512: NOP4
23516: AND
23517: IFFALSE 23549
23519: GO 23521
23521: DISABLE
// begin DialogueOn ;
23522: NOP4
// SayRadio ( Powell , D8a-Pow-1 ) ;
23526: NOP4
23530: PPUSH
23531: LD_STRING D8a-Pow-1
23533: PPUSH
23534: NOP4
// DialogueOff ;
23538: NOP4
// YouLost ( Dismissed ) ;
23542: LD_STRING Dismissed
23544: PPUSH
23545: NOP4
// end ;
23549: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23550: NOP4
23554: PPUSH
23555: NOP4
23559: IFFALSE 23571
23561: GO 23563
23563: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23564: LD_STRING Destroyed
23566: PPUSH
23567: NOP4
23571: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23572: NOP4
23576: PPUSH
23577: NOP4
23581: IFFALSE 23926
23583: GO 23585
23585: DISABLE
23586: LD_INT 0
23588: PPUSH
// begin russianAI = 0 ;
23589: NOP4
23593: PUSH
23594: LD_INT 0
23596: ST_TO_ADDR
// escapeAvalaible = 1 ;
23597: NOP4
23601: PUSH
23602: LD_INT 1
23604: ST_TO_ADDR
// InGameOn ;
23605: NOP4
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23609: LD_INT 3
23611: PPUSH
23612: LD_INT 1
23614: PPUSH
23615: LD_INT 1
23617: PPUSH
23618: LD_INT 0
23620: PPUSH
23621: NOP4
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23625: LD_INT 6
23627: PPUSH
23628: LD_INT 1
23630: PPUSH
23631: LD_INT 1
23633: PPUSH
23634: LD_INT 0
23636: PPUSH
23637: NOP4
// ChangeSideFog ( 3 , 1 ) ;
23641: LD_INT 3
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: NOP4
// CenterOnXY ( 97 , 91 ) ;
23651: LD_INT 97
23653: PPUSH
23654: LD_INT 91
23656: PPUSH
23657: NOP4
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23661: LD_INT 22
23663: PUSH
23664: LD_INT 3
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 21
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PPUSH
23685: NOP4
23689: PPUSH
23690: NOP4
// wait ( 0 0$01 ) ;
23694: LD_INT 35
23696: PPUSH
23697: NOP4
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23701: LD_INT 22
23703: PUSH
23704: LD_INT 3
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 21
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PPUSH
23725: NOP4
23729: PPUSH
23730: LD_INT 124
23732: PPUSH
23733: LD_INT 98
23735: PPUSH
23736: NOP4
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
23740: LD_INT 22
23742: PUSH
23743: LD_INT 6
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PPUSH
23764: NOP4
23768: PPUSH
23769: NOP4
// wait ( 0 0$01 ) ;
23773: LD_INT 35
23775: PPUSH
23776: NOP4
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23780: LD_INT 22
23782: PUSH
23783: LD_INT 6
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 21
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PPUSH
23804: NOP4
23808: PPUSH
23809: LD_INT 124
23811: PPUSH
23812: LD_INT 98
23814: PPUSH
23815: NOP4
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23819: LD_INT 22
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 21
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PPUSH
23843: NOP4
23847: PPUSH
23848: LD_INT 124
23850: PPUSH
23851: LD_INT 98
23853: PPUSH
23854: NOP4
// wait ( 0 0$4 ) ;
23858: LD_INT 140
23860: PPUSH
23861: NOP4
// CenterOnXY ( 124 , 98 ) ;
23865: LD_INT 124
23867: PPUSH
23868: LD_INT 98
23870: PPUSH
23871: NOP4
// if SikorskyStatus = 1 then
23875: NOP4
23879: PUSH
23880: LD_INT 1
23882: EQUAL
23883: IFFALSE 23897
// begin Say ( Sikorski , D9-Sik-1 ) ;
23885: NOP4
23889: PPUSH
23890: LD_STRING D9-Sik-1
23892: PPUSH
23893: NOP4
// end ; if SikorskyStatus = 2 then
23897: NOP4
23901: PUSH
23902: LD_INT 2
23904: EQUAL
23905: IFFALSE 23926
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
23907: NOP4
23911: PPUSH
23912: LD_STRING D8b-Pow-1
23914: PPUSH
23915: NOP4
// YouLost ( Dismissed ) ;
23919: LD_STRING Dismissed
23921: PPUSH
23922: NOP4
// end ; end ;
23926: PPOPN 1
23928: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
23929: LD_INT 23
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 21
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 24
23951: PUSH
23952: LD_INT 250
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: PPUSH
23964: NOP4
23968: PUSH
23969: LD_INT 0
23971: EQUAL
23972: IFFALSE 23981
23974: GO 23976
23976: DISABLE
// FinishMission ;
23977: NOP4
23981: END
// export function FinishMission ; var tmp ; begin
23982: LD_INT 0
23984: PPUSH
23985: PPUSH
// AddMedal ( med1 , 1 ) ;
23986: LD_STRING med1
23988: PPUSH
23989: LD_INT 1
23991: PPUSH
23992: NOP4
// AddMedal ( med2 , 1 ) ;
23996: LD_STRING med2
23998: PPUSH
23999: LD_INT 1
24001: PPUSH
24002: NOP4
// AddMedal ( perfect , 1 ) ;
24006: LD_STRING perfect
24008: PPUSH
24009: LD_INT 1
24011: PPUSH
24012: NOP4
// GiveMedals ( Main ) ;
24016: LD_STRING Main
24018: PPUSH
24019: NOP4
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24023: LD_INT 22
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 23
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 21
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 25
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 25
24078: PUSH
24079: LD_INT 3
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 25
24088: PUSH
24089: LD_INT 4
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: PPUSH
24109: NOP4
24113: PPUSH
24114: NOP4
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24118: NOP4
24122: PPUSH
24123: NOP4
24127: PUSH
24128: LD_STRING JMM
24130: STR
24131: PPUSH
24132: NOP4
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24136: NOP4
24140: PPUSH
24141: NOP4
24145: PUSH
24146: LD_STRING Brown
24148: STR
24149: PPUSH
24150: NOP4
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24154: NOP4
24158: PPUSH
24159: NOP4
24163: PUSH
24164: LD_STRING Donaldson
24166: STR
24167: PPUSH
24168: NOP4
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24172: NOP4
24176: PPUSH
24177: NOP4
24181: PUSH
24182: LD_STRING Bobby
24184: STR
24185: PPUSH
24186: NOP4
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24190: NOP4
24194: PPUSH
24195: NOP4
24199: PUSH
24200: LD_STRING Cyrus
24202: STR
24203: PPUSH
24204: NOP4
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24208: NOP4
24212: PPUSH
24213: NOP4
24217: PUSH
24218: LD_STRING Lisa
24220: STR
24221: PPUSH
24222: NOP4
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24226: NOP4
24230: PPUSH
24231: NOP4
24235: PUSH
24236: LD_STRING Frank
24238: STR
24239: PPUSH
24240: NOP4
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24244: NOP4
24248: PPUSH
24249: NOP4
24253: PUSH
24254: LD_STRING Gladstone
24256: STR
24257: PPUSH
24258: NOP4
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24262: NOP4
24266: PPUSH
24267: NOP4
24271: PUSH
24272: LD_STRING Kikuchi
24274: STR
24275: PPUSH
24276: NOP4
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24280: NOP4
24284: PPUSH
24285: NOP4
24289: PUSH
24290: LD_STRING Denis
24292: STR
24293: PPUSH
24294: NOP4
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24298: NOP4
24302: PPUSH
24303: NOP4
24307: PUSH
24308: LD_STRING Joan
24310: STR
24311: PPUSH
24312: NOP4
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24316: NOP4
24320: PPUSH
24321: NOP4
24325: PUSH
24326: LD_STRING Khatam
24328: STR
24329: PPUSH
24330: NOP4
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24334: NOP4
24338: PPUSH
24339: NOP4
24343: PUSH
24344: LD_STRING Houten
24346: STR
24347: PPUSH
24348: NOP4
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24352: LD_INT 50
24354: PUSH
24355: EMPTY
24356: LIST
24357: PUSH
24358: LD_INT 22
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 21
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 2
24380: PUSH
24381: LD_INT 25
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 25
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 25
24403: PUSH
24404: LD_INT 3
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 25
24413: PUSH
24414: LD_INT 4
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: PPUSH
24434: NOP4
24438: PUSH
24439: NOP4
24443: PUSH
24444: NOP4
24448: PUSH
24449: NOP4
24453: PUSH
24454: NOP4
24458: PUSH
24459: NOP4
24463: PUSH
24464: NOP4
24468: PUSH
24469: NOP4
24473: PUSH
24474: NOP4
24478: PUSH
24479: NOP4
24483: PUSH
24484: NOP4
24488: PUSH
24489: NOP4
24493: PUSH
24494: NOP4
24498: PUSH
24499: NOP4
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: DIFF
24519: PPUSH
24520: LD_STRING 08_other_survivors
24522: PPUSH
24523: NOP4
// SaveBase ( GammaBaseArea ) ;
24527: LD_INT 23
24529: PPUSH
24530: NOP4
// YouWin ;
24534: NOP4
// end ;
24538: LD_VAR 0 1
24542: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24543: LD_INT 0
24545: PPUSH
24546: PPUSH
24547: PPUSH
24548: PPUSH
// gammaBase = [ ] ;
24549: NOP4
24553: PUSH
24554: EMPTY
24555: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24556: NOP4
24560: PUSH
24561: NOP4
24565: PPUSH
24566: LD_INT 22
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 21
24578: PUSH
24579: LD_INT 3
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 50
24588: PUSH
24589: EMPTY
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: LIST
24596: PPUSH
24597: NOP4
24601: ST_TO_ADDR
// for i in buildings do
24602: NOP4
24606: PUSH
24607: NOP4
24611: PUSH
24612: FOR_IN
24613: IFFALSE 25050
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24615: NOP4
24619: PPUSH
24620: NOP4
24624: PUSH
24625: LD_INT 6
24627: PUSH
24628: LD_INT 7
24630: PUSH
24631: LD_INT 8
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: IN
24639: IFFALSE 24753
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24641: NOP4
24645: PUSH
24646: NOP4
24650: PUSH
24651: NOP4
24655: PPUSH
24656: NOP4
24660: PUSH
24661: NOP4
24665: PPUSH
24666: NOP4
24670: PUSH
24671: NOP4
24675: PPUSH
24676: NOP4
24680: PUSH
24681: NOP4
24685: PPUSH
24686: NOP4
24690: PUSH
24691: NOP4
24695: PPUSH
24696: NOP4
24700: PUSH
24701: NOP4
24705: PPUSH
24706: NOP4
24710: PUSH
24711: NOP4
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: NOP4
24723: PUSH
24724: NOP4
24728: PPUSH
24729: LD_INT 2
24731: PPUSH
24732: NOP4
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: PUSH
24747: EMPTY
24748: LIST
24749: ADD
24750: ST_TO_ADDR
24751: GO 25048
// if GetBType ( i ) = b_bunker then
24753: NOP4
24757: PPUSH
24758: NOP4
24762: PUSH
24763: LD_INT 32
24765: EQUAL
24766: IFFALSE 24863
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24768: NOP4
24772: PUSH
24773: NOP4
24777: PUSH
24778: NOP4
24782: PPUSH
24783: NOP4
24787: PUSH
24788: NOP4
24792: PPUSH
24793: NOP4
24797: PUSH
24798: NOP4
24802: PPUSH
24803: NOP4
24807: PUSH
24808: NOP4
24812: PPUSH
24813: NOP4
24817: PUSH
24818: NOP4
24822: PPUSH
24823: NOP4
24827: PUSH
24828: NOP4
24832: PPUSH
24833: NOP4
24837: PUSH
24838: NOP4
24842: PPUSH
24843: NOP4
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: EMPTY
24858: LIST
24859: ADD
24860: ST_TO_ADDR
24861: GO 25048
// if GetBType ( i ) = b_factory then
24863: NOP4
24867: PPUSH
24868: NOP4
24872: PUSH
24873: LD_INT 3
24875: EQUAL
24876: IFFALSE 24966
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24878: NOP4
24882: PUSH
24883: NOP4
24887: PPUSH
24888: LD_INT 1
24890: PPUSH
24891: NOP4
24895: PPUSH
24896: NOP4
24900: PUSH
24901: NOP4
24905: PPUSH
24906: NOP4
24910: PUSH
24911: NOP4
24915: PPUSH
24916: NOP4
24920: PUSH
24921: NOP4
24925: PPUSH
24926: NOP4
24930: PUSH
24931: NOP4
24935: PPUSH
24936: NOP4
24940: PUSH
24941: NOP4
24945: PPUSH
24946: NOP4
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: PPUSH
24959: NOP4
24963: ST_TO_ADDR
24964: GO 25048
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24966: NOP4
24970: PUSH
24971: NOP4
24975: PUSH
24976: NOP4
24980: PPUSH
24981: NOP4
24985: PUSH
24986: NOP4
24990: PPUSH
24991: NOP4
24995: PUSH
24996: NOP4
25000: PPUSH
25001: NOP4
25005: PUSH
25006: NOP4
25010: PPUSH
25011: NOP4
25015: PUSH
25016: NOP4
25020: PPUSH
25021: NOP4
25025: PUSH
25026: NOP4
25030: PPUSH
25031: NOP4
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: ADD
25047: ST_TO_ADDR
// end ;
25048: GO 24612
25050: POP
25051: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25052: NOP4
25056: PPUSH
25057: LD_STRING 08_GammaBase
25059: PPUSH
25060: NOP4
// end ;
25064: LD_VAR 0 2
25068: RET
