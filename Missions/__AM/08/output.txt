// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: NOP4
// RandomizeAll ;
   4: NOP4
// mission_prefix := 08_ ;
   8: NOP4
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: NOP4
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: NOP4
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: NOP4
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: NOP4
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: NOP4
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: NOP4
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: NOP4
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: NOP4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: NOP4
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: NOP4
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: NOP4
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: NOP4
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: NOP4
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: NOP4
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: NOP4
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: NOP4
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: NOP4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: NOP4
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: NOP4
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: NOP4
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: NOP4
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: NOP4
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: NOP4
// PrepareBase ;
 217: NOP4
// PrepareHeroes ;
 221: NOP4
// PrepareRussianCommander ;
 225: NOP4
// PrepareRussians ;
 229: NOP4
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: NOP4
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: NOP4
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: NOP4
 291: PPUSH
 292: NOP4
 296: PPUSH
 297: NOP4
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: NOP4
// PrepareCutsceneAttack ;
 312: NOP4
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: NOP4
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: NOP4
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: NOP4
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: NOP4
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: NOP4
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: NOP4
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: NOP4
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: NOP4
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: NOP4
 435: PPUSH
 436: NOP4
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: NOP4
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: NOP4
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: NOP4
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: NOP4
 496: PPUSH
 497: NOP4
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: NOP4
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
// uc_side = 1 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// uc_nation = 1 ;
 538: LD_ADDR_OWVAR 21
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// if gammaCommander = 1 then
 546: NOP4
 550: PUSH
 551: LD_INT 1
 553: EQUAL
 554: IFFALSE 587
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 556: NOP4
 560: PUSH
 561: LD_STRING Donaldson
 563: PPUSH
 564: LD_INT 1
 566: PPUSH
 567: NOP4
 571: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 572: NOP4
 576: PPUSH
 577: LD_INT 5
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: NOP4
// end ; if gammaCommander = 2 then
 587: NOP4
 591: PUSH
 592: LD_INT 2
 594: EQUAL
 595: IFFALSE 628
// begin Brown = PrepareUnit ( Brown , true ) ;
 597: NOP4
 601: PUSH
 602: LD_STRING Brown
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: NOP4
 612: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 613: NOP4
 617: PPUSH
 618: LD_INT 5
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: NOP4
// end ; if gammaCommander = 3 then
 628: NOP4
 632: PUSH
 633: LD_INT 3
 635: EQUAL
 636: IFFALSE 669
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 638: NOP4
 642: PUSH
 643: LD_STRING VanHouten
 645: PPUSH
 646: LD_INT 1
 648: PPUSH
 649: NOP4
 653: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 654: NOP4
 658: PPUSH
 659: LD_INT 5
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: NOP4
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 669: NOP4
 673: PUSH
 674: LD_STRING Harisson
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: NOP4
 684: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 685: NOP4
 689: PUSH
 690: LD_STRING Powell
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: NOP4
 700: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 701: NOP4
 705: PUSH
 706: LD_STRING 07_othersGamma
 708: PPUSH
 709: NOP4
 713: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 714: NOP4
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 30
 731: PUSH
 732: LD_INT 5
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: NOP4
 747: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 748: NOP4
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 1
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 30
 768: PUSH
 769: LD_INT 6
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 30
 778: PUSH
 779: LD_INT 7
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 30
 788: PUSH
 789: LD_INT 8
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: NOP4
 810: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 811: NOP4
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_INT 1
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 30
 828: PUSH
 829: LD_INT 3
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: PPUSH
 840: NOP4
 844: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 845: NOP4
 849: PUSH
 850: LD_INT 22
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: LD_INT 30
 862: PUSH
 863: LD_INT 36
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PPUSH
 874: NOP4
 878: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 879: NOP4
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 2
 896: PUSH
 897: LD_INT 30
 899: PUSH
 900: LD_INT 31
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 30
 909: PUSH
 910: LD_INT 32
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: LIST
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PPUSH
 926: NOP4
 930: ST_TO_ADDR
// for i in others_gamma do
 931: NOP4
 935: PUSH
 936: NOP4
 940: PUSH
 941: FOR_IN
 942: IFFALSE 1317
// begin placed := false ;
 944: NOP4
 948: PUSH
 949: LD_INT 0
 951: ST_TO_ADDR
// if GetClass ( i ) = 1 then
 952: NOP4
 956: PPUSH
 957: NOP4
 961: PUSH
 962: LD_INT 1
 964: EQUAL
 965: IFFALSE 1090
// begin if UnitFilter ( bun , [ f_empty ] ) then
 967: NOP4
 971: PPUSH
 972: LD_INT 58
 974: PUSH
 975: EMPTY
 976: LIST
 977: PPUSH
 978: NOP4
 982: IFFALSE 1021
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
 984: NOP4
 988: PPUSH
 989: NOP4
 993: PPUSH
 994: LD_INT 58
 996: PUSH
 997: EMPTY
 998: LIST
 999: PPUSH
1000: NOP4
1004: PUSH
1005: LD_INT 1
1007: ARRAY
1008: PPUSH
1009: NOP4
// placed := true ;
1013: NOP4
1017: PUSH
1018: LD_INT 1
1020: ST_TO_ADDR
// end ; if arm and not placed then
1021: NOP4
1025: PUSH
1026: NOP4
1030: NOT
1031: AND
1032: IFFALSE 1090
// begin for j in arm do
1034: NOP4
1038: PUSH
1039: NOP4
1043: PUSH
1044: FOR_IN
1045: IFFALSE 1088
// if UnitsInside ( j ) < 6 then
1047: NOP4
1051: PPUSH
1052: NOP4
1056: PUSH
1057: LD_INT 6
1059: LESS
1060: IFFALSE 1086
// begin PlaceHumanInUnit ( i , j ) ;
1062: NOP4
1066: PPUSH
1067: NOP4
1071: PPUSH
1072: NOP4
// placed := true ;
1076: NOP4
1080: PUSH
1081: LD_INT 1
1083: ST_TO_ADDR
// break ;
1084: GO 1088
// end ;
1086: GO 1044
1088: POP
1089: POP
// end ; end ; if GetClass ( i ) = 3 then
1090: NOP4
1094: PPUSH
1095: NOP4
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: IFFALSE 1207
// if fac then
1105: NOP4
1109: IFFALSE 1207
// begin if ct then
1111: NOP4
1115: IFFALSE 1143
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1117: NOP4
1121: PPUSH
1122: NOP4
1126: PUSH
1127: LD_INT 1
1129: ARRAY
1130: PPUSH
1131: NOP4
// placed := true ;
1135: NOP4
1139: PUSH
1140: LD_INT 1
1142: ST_TO_ADDR
// end ; if placed then
1143: NOP4
1147: IFFALSE 1151
// continue ;
1149: GO 941
// for j in fac do
1151: NOP4
1155: PUSH
1156: NOP4
1160: PUSH
1161: FOR_IN
1162: IFFALSE 1205
// if UnitsInside ( j ) < 6 then
1164: NOP4
1168: PPUSH
1169: NOP4
1173: PUSH
1174: LD_INT 6
1176: LESS
1177: IFFALSE 1203
// begin PlaceHumanInUnit ( i , j ) ;
1179: NOP4
1183: PPUSH
1184: NOP4
1188: PPUSH
1189: NOP4
// placed := true ;
1193: NOP4
1197: PUSH
1198: LD_INT 1
1200: ST_TO_ADDR
// break ;
1201: GO 1205
// end ;
1203: GO 1161
1205: POP
1206: POP
// end ; if GetClass ( i ) = 4 then
1207: NOP4
1211: PPUSH
1212: NOP4
1216: PUSH
1217: LD_INT 4
1219: EQUAL
1220: IFFALSE 1284
// if lab then
1222: NOP4
1226: IFFALSE 1284
// begin for j in lab do
1228: NOP4
1232: PUSH
1233: NOP4
1237: PUSH
1238: FOR_IN
1239: IFFALSE 1282
// if UnitsInside ( j ) < 6 then
1241: NOP4
1245: PPUSH
1246: NOP4
1250: PUSH
1251: LD_INT 6
1253: LESS
1254: IFFALSE 1280
// begin PlaceHumanInUnit ( i , j ) ;
1256: NOP4
1260: PPUSH
1261: NOP4
1265: PPUSH
1266: NOP4
// placed := true ;
1270: NOP4
1274: PUSH
1275: LD_INT 1
1277: ST_TO_ADDR
// break ;
1278: GO 1282
// end ;
1280: GO 1238
1282: POP
1283: POP
// end ; if not placed then
1284: NOP4
1288: NOT
1289: IFFALSE 1315
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1291: NOP4
1295: PPUSH
1296: LD_INT 5
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: NOP4
// ComHold ( i ) ;
1306: NOP4
1310: PPUSH
1311: NOP4
// end ; end ;
1315: GO 941
1317: POP
1318: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1319: NOP4
1323: PUSH
1324: NOP4
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PPUSH
1333: NOP4
1337: AND
1338: IFFALSE 1427
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1340: NOP4
1344: PUSH
1345: LD_INT 22
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: LD_INT 33
1357: PUSH
1358: LD_INT 2
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PPUSH
1369: NOP4
1373: PUSH
1374: FOR_IN
1375: IFFALSE 1425
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1377: NOP4
1381: PPUSH
1382: NOP4
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: PPUSH
1391: NOP4
1395: PUSH
1396: LD_INT 1
1398: PPUSH
1399: NOP4
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: NOP4
1412: PPUSH
1413: NOP4
1417: ARRAY
1418: PPUSH
1419: NOP4
1423: GO 1374
1425: POP
1426: POP
// end ; end ;
1427: LD_VAR 0 1
1431: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1432: LD_INT 0
1434: PPUSH
1435: PPUSH
1436: PPUSH
1437: PPUSH
1438: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1439: LD_INT 71
1441: PPUSH
1442: LD_INT 5
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: NOP4
// blist := LoadVariable ( GammaBase , [ ] ) ;
1452: NOP4
1456: PUSH
1457: LD_STRING GammaBase
1459: PPUSH
1460: EMPTY
1461: PPUSH
1462: NOP4
1466: ST_TO_ADDR
// uc_side := 1 ;
1467: LD_ADDR_OWVAR 20
1471: PUSH
1472: LD_INT 1
1474: ST_TO_ADDR
// uc_nation := 1 ;
1475: LD_ADDR_OWVAR 21
1479: PUSH
1480: LD_INT 1
1482: ST_TO_ADDR
// for i in blist do
1483: NOP4
1487: PUSH
1488: NOP4
1492: PUSH
1493: FOR_IN
1494: IFFALSE 1902
// begin bc_type := i [ 1 ] ;
1496: LD_ADDR_OWVAR 42
1500: PUSH
1501: NOP4
1505: PUSH
1506: LD_INT 1
1508: ARRAY
1509: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1510: LD_ADDR_OWVAR 43
1514: PUSH
1515: NOP4
1519: PUSH
1520: LD_INT 5
1522: ARRAY
1523: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1524: NOP4
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PUSH
1533: LD_INT 7
1535: PUSH
1536: LD_INT 8
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: IN
1543: IFFALSE 1599
// begin bc_kind1 := i [ 7 ] ;
1545: LD_ADDR_OWVAR 44
1549: PUSH
1550: NOP4
1554: PUSH
1555: LD_INT 7
1557: ARRAY
1558: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1559: LD_STRING 06_remoteVehs_1
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: NOP4
1569: PUSH
1570: LD_INT 1
1572: EQUAL
1573: IFFALSE 1585
// begin bc_kind2 := 15 ;
1575: LD_ADDR_OWVAR 45
1579: PUSH
1580: LD_INT 15
1582: ST_TO_ADDR
// end else
1583: GO 1599
// begin bc_kind2 := i [ 8 ] ;
1585: LD_ADDR_OWVAR 45
1589: PUSH
1590: NOP4
1594: PUSH
1595: LD_INT 8
1597: ARRAY
1598: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1599: NOP4
1603: PUSH
1604: LD_INT 0
1606: EQUAL
1607: IFFALSE 1725
// begin bc_type := b_warehouse ;
1609: LD_ADDR_OWVAR 42
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1617: NOP4
1621: PUSH
1622: NOP4
1626: PUSH
1627: LD_INT 2
1629: ARRAY
1630: PPUSH
1631: NOP4
1635: PUSH
1636: LD_INT 3
1638: ARRAY
1639: PPUSH
1640: NOP4
1644: PUSH
1645: LD_INT 4
1647: ARRAY
1648: PPUSH
1649: NOP4
1653: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1654: NOP4
1658: PPUSH
1659: LD_STRING gamma
1661: PPUSH
1662: NOP4
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1666: NOP4
1670: PPUSH
1671: NOP4
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: LD_INT 200
1681: PUSH
1682: LD_INT 150
1684: PUSH
1685: LD_INT 100
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: NOP4
1697: ARRAY
1698: PPUSH
1699: NOP4
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1703: NOP4
1707: PPUSH
1708: NOP4
1712: PPUSH
1713: LD_INT 2
1715: PPUSH
1716: LD_INT 200
1718: PPUSH
1719: NOP4
// end else
1723: GO 1867
// begin if bc_type = 4 then
1725: NOP4
1729: PUSH
1730: LD_INT 4
1732: EQUAL
1733: IFFALSE 1782
// begin bc_type = 5 ;
1735: LD_ADDR_OWVAR 42
1739: PUSH
1740: LD_INT 5
1742: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1743: NOP4
1747: PUSH
1748: NOP4
1752: PUSH
1753: LD_INT 2
1755: ARRAY
1756: PPUSH
1757: NOP4
1761: PUSH
1762: LD_INT 3
1764: ARRAY
1765: PPUSH
1766: NOP4
1770: PUSH
1771: LD_INT 4
1773: ARRAY
1774: PPUSH
1775: NOP4
1779: ST_TO_ADDR
// end else
1780: GO 1867
// begin bc_type := i [ 1 ] ;
1782: LD_ADDR_OWVAR 42
1786: PUSH
1787: NOP4
1791: PUSH
1792: LD_INT 1
1794: ARRAY
1795: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1796: LD_STRING 06_remoteVehs_1
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: NOP4
1806: PUSH
1807: LD_INT 1
1809: EQUAL
1810: PUSH
1811: NOP4
1815: PUSH
1816: LD_INT 7
1818: EQUAL
1819: AND
1820: IFFALSE 1830
// bc_type := b_lab_full ;
1822: LD_ADDR_OWVAR 42
1826: PUSH
1827: LD_INT 8
1829: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1830: NOP4
1834: PUSH
1835: NOP4
1839: PUSH
1840: LD_INT 2
1842: ARRAY
1843: PPUSH
1844: NOP4
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PPUSH
1853: NOP4
1857: PUSH
1858: LD_INT 4
1860: ARRAY
1861: PPUSH
1862: NOP4
1866: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1867: NOP4
1871: PPUSH
1872: NOP4
1876: PUSH
1877: LD_INT 32
1879: EQUAL
1880: IFFALSE 1900
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1882: NOP4
1886: PPUSH
1887: NOP4
1891: PUSH
1892: LD_INT 7
1894: ARRAY
1895: PPUSH
1896: NOP4
// end ;
1900: GO 1493
1902: POP
1903: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1904: LD_STRING 06_remoteVehs_1
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: NOP4
1914: PUSH
1915: LD_INT 1
1917: EQUAL
1918: IFFALSE 2122
// begin bc_type = 36 ;
1920: LD_ADDR_OWVAR 42
1924: PUSH
1925: LD_INT 36
1927: ST_TO_ADDR
// bc_level = 4 ;
1928: LD_ADDR_OWVAR 43
1932: PUSH
1933: LD_INT 4
1935: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1936: LD_INT 62
1938: PPUSH
1939: LD_INT 12
1941: PPUSH
1942: LD_INT 3
1944: PPUSH
1945: NOP4
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1949: NOP4
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 3
1961: PUSH
1962: LD_INT 2
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: NOP4
1977: ARRAY
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2120
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1982: LD_ADDR_OWVAR 37
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 2
2005: PPUSH
2006: NOP4
2010: ARRAY
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: NOP4
2024: ARRAY
2025: ST_TO_ADDR
// vc_engine = 1 ;
2026: LD_ADDR_OWVAR 39
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// vc_control = 2 ;
2034: LD_ADDR_OWVAR 38
2038: PUSH
2039: LD_INT 2
2041: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2042: LD_ADDR_OWVAR 40
2046: PUSH
2047: LD_INT 3
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: LD_INT 5
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: NOP4
2071: ARRAY
2072: ST_TO_ADDR
// veh = CreateVehicle ;
2073: NOP4
2077: PUSH
2078: NOP4
2082: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2083: NOP4
2087: PPUSH
2088: NOP4
2092: PPUSH
2093: NOP4
2097: PPUSH
2098: NOP4
2102: PPUSH
2103: NOP4
2107: PPUSH
2108: LD_INT 7
2110: PPUSH
2111: LD_INT 0
2113: PPUSH
2114: NOP4
// end ;
2118: GO 1979
2120: POP
2121: POP
// end ; end ;
2122: LD_VAR 0 1
2126: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// uc_side = 1 ;
2133: LD_ADDR_OWVAR 20
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// uc_nation = 1 ;
2141: LD_ADDR_OWVAR 21
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2149: NOP4
2153: PUSH
2154: LD_STRING 06c_Denis
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: NOP4
2164: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2165: NOP4
2169: PPUSH
2170: LD_INT 4
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: NOP4
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2180: NOP4
2184: PUSH
2185: LD_STRING 06c_Joan
2187: PPUSH
2188: LD_INT 1
2190: PPUSH
2191: NOP4
2195: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2196: NOP4
2200: PPUSH
2201: LD_INT 4
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: NOP4
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
2211: LD_STRING GladstoneIn07
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: NOP4
2221: PUSH
2222: LD_INT 0
2224: EQUAL
2225: IFFALSE 2293
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2227: NOP4
2231: PUSH
2232: LD_STRING 06c_Gladstone
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: NOP4
2242: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2243: NOP4
2247: NOT
2248: PUSH
2249: LD_STRING GladstoneStayInDelta
2251: PPUSH
2252: LD_INT 0
2254: PPUSH
2255: NOP4
2259: AND
2260: IFFALSE 2278
// Gladstone = PrepareUnit ( 06_Gladstone , true ) ;
2262: NOP4
2266: PUSH
2267: LD_STRING 06_Gladstone
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: NOP4
2277: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2278: NOP4
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: NOP4
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2293: LD_STRING LisaStayInDelta
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: NOP4
2303: IFFALSE 2336
// begin Lisa = PrepareUnit ( 06_Lisa , true ) ;
2305: NOP4
2309: PUSH
2310: LD_STRING 06_Lisa
2312: PPUSH
2313: LD_INT 1
2315: PPUSH
2316: NOP4
2320: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2321: NOP4
2325: PPUSH
2326: LD_INT 4
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: NOP4
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2336: LD_STRING BobbyStayInDelta
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: NOP4
2346: IFFALSE 2379
// begin Bobby = PrepareUnit ( 06_Bobby , true ) ;
2348: NOP4
2352: PUSH
2353: LD_STRING 06_Bobby
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: NOP4
2363: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2364: NOP4
2368: PPUSH
2369: LD_INT 4
2371: PPUSH
2372: LD_INT 0
2374: PPUSH
2375: NOP4
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2379: LD_STRING CyrusStayInDelta
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: NOP4
2389: IFFALSE 2422
// begin Cyrus = PrepareUnit ( 06_Cyrus , true ) ;
2391: NOP4
2395: PUSH
2396: LD_STRING 06_Cyrus
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: NOP4
2406: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2407: NOP4
2411: PPUSH
2412: LD_INT 4
2414: PPUSH
2415: LD_INT 0
2417: PPUSH
2418: NOP4
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2422: LD_STRING BrownStayInDelta
2424: PPUSH
2425: LD_INT 0
2427: PPUSH
2428: NOP4
2432: IFFALSE 2465
// begin Brown = PrepareUnit ( 06_Brown , true ) ;
2434: NOP4
2438: PUSH
2439: LD_STRING 06_Brown
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: NOP4
2449: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2450: NOP4
2454: PPUSH
2455: LD_INT 4
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: NOP4
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
2465: LD_STRING DonaldsonStayInDelta
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: NOP4
2475: IFFALSE 2508
// begin Donaldson = PrepareUnit ( 06_Donaldson , true ) ;
2477: NOP4
2481: PUSH
2482: LD_STRING 06_Donaldson
2484: PPUSH
2485: LD_INT 1
2487: PPUSH
2488: NOP4
2492: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2493: NOP4
2497: PPUSH
2498: LD_INT 4
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: NOP4
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2508: NOP4
2512: PUSH
2513: LD_STRING OtherStayInDelta
2515: PPUSH
2516: NOP4
2520: ST_TO_ADDR
// if other then
2521: NOP4
2525: IFFALSE 2570
// for j = 1 to other do
2527: NOP4
2531: PUSH
2532: DOUBLE
2533: LD_INT 1
2535: DEC
2536: ST_TO_ADDR
2537: NOP4
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2568
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2545: NOP4
2549: PUSH
2550: NOP4
2554: ARRAY
2555: PPUSH
2556: LD_INT 4
2558: PPUSH
2559: LD_INT 0
2561: PPUSH
2562: NOP4
2566: GO 2542
2568: POP
2569: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2570: NOP4
2574: PUSH
2575: LD_STRING 06_other_apemans
2577: PPUSH
2578: NOP4
2582: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
2583: NOP4
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 3
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: PUSH
2602: NOP4
2606: ARRAY
2607: GREATEREQUAL
2608: IFFALSE 2637
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
2610: NOP4
2614: PUSH
2615: LD_INT 5
2617: PUSH
2618: LD_INT 4
2620: PUSH
2621: LD_INT 3
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: PUSH
2629: NOP4
2633: ARRAY
2634: ST_TO_ADDR
2635: GO 2647
// j := other ;
2637: NOP4
2641: PUSH
2642: NOP4
2646: ST_TO_ADDR
// for i = 1 to j do
2647: NOP4
2651: PUSH
2652: DOUBLE
2653: LD_INT 1
2655: DEC
2656: ST_TO_ADDR
2657: NOP4
2661: PUSH
2662: FOR_TO
2663: IFFALSE 2688
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2665: NOP4
2669: PUSH
2670: NOP4
2674: ARRAY
2675: PPUSH
2676: LD_INT 4
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: NOP4
2686: GO 2662
2688: POP
2689: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2690: LD_INT 4
2692: PPUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 21
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PPUSH
2717: NOP4
2721: PPUSH
2722: LD_INT 53
2724: PPUSH
2725: LD_INT 19
2727: PPUSH
2728: NOP4
// firstAttack = 1 ;
2732: NOP4
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// end ;
2740: LD_VAR 0 1
2744: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2752: NOP4
2756: PUSH
2757: LD_STRING 07_vehicles
2759: PPUSH
2760: EMPTY
2761: PPUSH
2762: NOP4
2766: ST_TO_ADDR
// uc_side = 1 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 1
2774: ST_TO_ADDR
// uc_nation = 1 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// if vehicles > 0 then
2783: NOP4
2787: PUSH
2788: LD_INT 0
2790: GREATER
2791: IFFALSE 2930
// begin for i = 1 to vehicles do
2793: NOP4
2797: PUSH
2798: DOUBLE
2799: LD_INT 1
2801: DEC
2802: ST_TO_ADDR
2803: NOP4
2807: PUSH
2808: FOR_TO
2809: IFFALSE 2928
// begin vc_chassis = vehicles [ i ] ;
2811: LD_ADDR_OWVAR 37
2815: PUSH
2816: NOP4
2820: PUSH
2821: NOP4
2825: ARRAY
2826: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2827: LD_ADDR_OWVAR 39
2831: PUSH
2832: NOP4
2836: PUSH
2837: NOP4
2841: PUSH
2842: LD_INT 1
2844: PLUS
2845: ARRAY
2846: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2847: LD_ADDR_OWVAR 38
2851: PUSH
2852: NOP4
2856: PUSH
2857: NOP4
2861: PUSH
2862: LD_INT 2
2864: PLUS
2865: ARRAY
2866: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2867: LD_ADDR_OWVAR 40
2871: PUSH
2872: NOP4
2876: PUSH
2877: NOP4
2881: PUSH
2882: LD_INT 3
2884: PLUS
2885: ARRAY
2886: ST_TO_ADDR
// veh = CreateVehicle ;
2887: NOP4
2891: PUSH
2892: NOP4
2896: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
2897: NOP4
2901: PPUSH
2902: LD_INT 4
2904: PPUSH
2905: LD_INT 0
2907: PPUSH
2908: NOP4
// i = i + 3 ;
2912: NOP4
2916: PUSH
2917: NOP4
2921: PUSH
2922: LD_INT 3
2924: PLUS
2925: ST_TO_ADDR
// end ;
2926: GO 2808
2928: POP
2929: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2930: NOP4
2934: PUSH
2935: NOP4
2939: PUSH
2940: LD_STRING JMM
2942: STR
2943: PPUSH
2944: LD_INT 1
2946: PPUSH
2947: NOP4
2951: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2952: NOP4
2956: PUSH
2957: LD_INT 1
2959: EQUAL
2960: PUSH
2961: NOP4
2965: PUSH
2966: LD_INT 3
2968: EQUAL
2969: OR
2970: IFFALSE 2994
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
2972: NOP4
2976: PUSH
2977: NOP4
2981: PUSH
2982: LD_STRING Brown
2984: STR
2985: PPUSH
2986: LD_INT 1
2988: PPUSH
2989: NOP4
2993: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
2994: NOP4
2998: PUSH
2999: LD_INT 2
3001: EQUAL
3002: PUSH
3003: NOP4
3007: PUSH
3008: LD_INT 3
3010: EQUAL
3011: OR
3012: IFFALSE 3036
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3014: NOP4
3018: PUSH
3019: NOP4
3023: PUSH
3024: LD_STRING Donaldson
3026: STR
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: NOP4
3035: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3036: NOP4
3040: PUSH
3041: NOP4
3045: PUSH
3046: LD_STRING Bobby
3048: STR
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: NOP4
3057: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3058: NOP4
3062: PUSH
3063: NOP4
3067: PUSH
3068: LD_STRING Cyrus
3070: STR
3071: PPUSH
3072: LD_INT 1
3074: PPUSH
3075: NOP4
3079: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3080: NOP4
3084: PUSH
3085: NOP4
3089: PUSH
3090: LD_STRING Lisa
3092: STR
3093: PPUSH
3094: LD_INT 1
3096: PPUSH
3097: NOP4
3101: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3102: NOP4
3106: PUSH
3107: NOP4
3111: PUSH
3112: LD_STRING Frank
3114: STR
3115: PPUSH
3116: LD_INT 1
3118: PPUSH
3119: NOP4
3123: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3124: NOP4
3128: PUSH
3129: NOP4
3133: PUSH
3134: LD_STRING Gladstone
3136: STR
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: NOP4
3145: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3146: NOP4
3150: PUSH
3151: NOP4
3155: PUSH
3156: LD_STRING Kikuchi
3158: STR
3159: PPUSH
3160: LD_INT 1
3162: PPUSH
3163: NOP4
3167: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3168: NOP4
3172: PUSH
3173: LD_INT 1
3175: EQUAL
3176: PUSH
3177: NOP4
3181: PUSH
3182: LD_INT 3
3184: EQUAL
3185: OR
3186: IFFALSE 3203
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3188: NOP4
3192: PPUSH
3193: LD_INT 4
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: NOP4
// if gammaCommander = 2 or gammaCommander = 3 then
3203: NOP4
3207: PUSH
3208: LD_INT 2
3210: EQUAL
3211: PUSH
3212: NOP4
3216: PUSH
3217: LD_INT 3
3219: EQUAL
3220: OR
3221: IFFALSE 3238
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3223: NOP4
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: LD_INT 0
3233: PPUSH
3234: NOP4
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3238: NOP4
3242: PUSH
3243: LD_INT 4
3245: PPUSH
3246: LD_INT 22
3248: PUSH
3249: LD_INT 1
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 21
3258: PUSH
3259: LD_INT 2
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 58
3268: PUSH
3269: EMPTY
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: PPUSH
3277: NOP4
3281: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3282: NOP4
3286: PUSH
3287: NOP4
3291: PUSH
3292: LD_STRING JMM
3294: STR
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: NOP4
3303: ST_TO_ADDR
// if veh > 0 then
3304: NOP4
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: IFFALSE 3334
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3314: NOP4
3318: PPUSH
3319: NOP4
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: NOP4
// end else
3332: GO 3349
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3334: NOP4
3338: PPUSH
3339: LD_INT 4
3341: PPUSH
3342: LD_INT 0
3344: PPUSH
3345: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3349: NOP4
3353: PUSH
3354: LD_INT 4
3356: PPUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 2
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 58
3379: PUSH
3380: EMPTY
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: LIST
3387: PPUSH
3388: NOP4
3392: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3393: NOP4
3397: PUSH
3398: NOP4
3402: PUSH
3403: LD_STRING Bobby
3405: STR
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: NOP4
3414: ST_TO_ADDR
// if veh > 0 then
3415: NOP4
3419: PUSH
3420: LD_INT 0
3422: GREATER
3423: IFFALSE 3445
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3425: NOP4
3429: PPUSH
3430: NOP4
3434: PUSH
3435: LD_INT 1
3437: ARRAY
3438: PPUSH
3439: NOP4
// end else
3443: GO 3460
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3445: NOP4
3449: PPUSH
3450: LD_INT 4
3452: PPUSH
3453: LD_INT 0
3455: PPUSH
3456: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3460: NOP4
3464: PUSH
3465: LD_INT 4
3467: PPUSH
3468: LD_INT 22
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 21
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 58
3490: PUSH
3491: EMPTY
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PPUSH
3499: NOP4
3503: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3504: NOP4
3508: PUSH
3509: NOP4
3513: PUSH
3514: LD_STRING Cyrus
3516: STR
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: NOP4
3525: ST_TO_ADDR
// if veh > 0 then
3526: NOP4
3530: PUSH
3531: LD_INT 0
3533: GREATER
3534: IFFALSE 3556
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3536: NOP4
3540: PPUSH
3541: NOP4
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: NOP4
// end else
3554: GO 3571
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3556: NOP4
3560: PPUSH
3561: LD_INT 4
3563: PPUSH
3564: LD_INT 0
3566: PPUSH
3567: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3571: NOP4
3575: PUSH
3576: LD_INT 4
3578: PPUSH
3579: LD_INT 22
3581: PUSH
3582: LD_INT 1
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 21
3591: PUSH
3592: LD_INT 2
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 58
3601: PUSH
3602: EMPTY
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PPUSH
3610: NOP4
3614: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3615: NOP4
3619: PUSH
3620: NOP4
3624: PUSH
3625: LD_STRING Lisa
3627: STR
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: NOP4
3636: ST_TO_ADDR
// if veh > 0 then
3637: NOP4
3641: PUSH
3642: LD_INT 0
3644: GREATER
3645: IFFALSE 3667
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3647: NOP4
3651: PPUSH
3652: NOP4
3656: PUSH
3657: LD_INT 1
3659: ARRAY
3660: PPUSH
3661: NOP4
// end else
3665: GO 3682
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3667: NOP4
3671: PPUSH
3672: LD_INT 4
3674: PPUSH
3675: LD_INT 0
3677: PPUSH
3678: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3682: NOP4
3686: PUSH
3687: LD_INT 4
3689: PPUSH
3690: LD_INT 22
3692: PUSH
3693: LD_INT 1
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 21
3702: PUSH
3703: LD_INT 2
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 58
3712: PUSH
3713: EMPTY
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: PPUSH
3721: NOP4
3725: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3726: NOP4
3730: PUSH
3731: NOP4
3735: PUSH
3736: LD_STRING Frank
3738: STR
3739: PPUSH
3740: LD_INT 1
3742: PPUSH
3743: NOP4
3747: ST_TO_ADDR
// if veh > 0 then
3748: NOP4
3752: PUSH
3753: LD_INT 0
3755: GREATER
3756: IFFALSE 3778
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3758: NOP4
3762: PPUSH
3763: NOP4
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: NOP4
// end else
3776: GO 3793
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3778: NOP4
3782: PPUSH
3783: LD_INT 4
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3793: NOP4
3797: PUSH
3798: LD_INT 4
3800: PPUSH
3801: LD_INT 22
3803: PUSH
3804: LD_INT 1
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 58
3823: PUSH
3824: EMPTY
3825: LIST
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: PPUSH
3832: NOP4
3836: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3837: NOP4
3841: PUSH
3842: NOP4
3846: PUSH
3847: LD_STRING Gladstone
3849: STR
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: NOP4
3858: ST_TO_ADDR
// if veh > 0 then
3859: NOP4
3863: PUSH
3864: LD_INT 0
3866: GREATER
3867: IFFALSE 3889
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3869: NOP4
3873: PPUSH
3874: NOP4
3878: PUSH
3879: LD_INT 1
3881: ARRAY
3882: PPUSH
3883: NOP4
// end else
3887: GO 3904
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3889: NOP4
3893: PPUSH
3894: LD_INT 4
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3904: NOP4
3908: PUSH
3909: LD_INT 4
3911: PPUSH
3912: LD_INT 22
3914: PUSH
3915: LD_INT 1
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 2
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 58
3934: PUSH
3935: EMPTY
3936: LIST
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: PPUSH
3943: NOP4
3947: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3948: NOP4
3952: PUSH
3953: NOP4
3957: PUSH
3958: LD_STRING Kikuchi
3960: STR
3961: PPUSH
3962: LD_INT 1
3964: PPUSH
3965: NOP4
3969: ST_TO_ADDR
// if veh > 0 then
3970: NOP4
3974: PUSH
3975: LD_INT 0
3977: GREATER
3978: IFFALSE 4000
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
3980: NOP4
3984: PPUSH
3985: NOP4
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: NOP4
// end else
3998: GO 4015
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4000: NOP4
4004: PPUSH
4005: LD_INT 4
4007: PPUSH
4008: LD_INT 0
4010: PPUSH
4011: NOP4
// end ; other = CreateCharacterSet ( 07c_others ) ;
4015: NOP4
4019: PUSH
4020: LD_STRING 07c_others
4022: PPUSH
4023: NOP4
4027: ST_TO_ADDR
// for i in other do
4028: NOP4
4032: PUSH
4033: NOP4
4037: PUSH
4038: FOR_IN
4039: IFFALSE 4132
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4041: NOP4
4045: PUSH
4046: LD_INT 4
4048: PPUSH
4049: LD_INT 22
4051: PUSH
4052: LD_INT 1
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 21
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 58
4071: PUSH
4072: EMPTY
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: PPUSH
4080: NOP4
4084: ST_TO_ADDR
// if veh > 0 then
4085: NOP4
4089: PUSH
4090: LD_INT 0
4092: GREATER
4093: IFFALSE 4115
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4095: NOP4
4099: PPUSH
4100: NOP4
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: NOP4
// end else
4113: GO 4130
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4115: NOP4
4119: PPUSH
4120: LD_INT 4
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: NOP4
// end ; end ;
4130: GO 4038
4132: POP
4133: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4134: LD_INT 4
4136: PPUSH
4137: LD_INT 22
4139: PUSH
4140: LD_INT 1
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: PPUSH
4150: NOP4
4154: PPUSH
4155: LD_INT 53
4157: PPUSH
4158: LD_INT 19
4160: PPUSH
4161: NOP4
// end ;
4165: LD_VAR 0 1
4169: RET
// export function PrepareSikorsky ; begin
4170: LD_INT 0
4172: PPUSH
// uc_side = 4 ;
4173: LD_ADDR_OWVAR 20
4177: PUSH
4178: LD_INT 4
4180: ST_TO_ADDR
// uc_nation = 1 ;
4181: LD_ADDR_OWVAR 21
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4189: NOP4
4193: PUSH
4194: LD_STRING Sikorski
4196: PPUSH
4197: LD_INT 0
4199: PPUSH
4200: NOP4
4204: ST_TO_ADDR
// vc_engine = 1 ;
4205: LD_ADDR_OWVAR 39
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// vc_control = 1 ;
4213: LD_ADDR_OWVAR 38
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4221: LD_ADDR_OWVAR 40
4225: PUSH
4226: LD_INT 5
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 4
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: NOP4
4244: ARRAY
4245: ST_TO_ADDR
// vc_chassis = 4 ;
4246: LD_ADDR_OWVAR 37
4250: PUSH
4251: LD_INT 4
4253: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4254: NOP4
4258: PUSH
4259: NOP4
4263: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4264: NOP4
4268: PPUSH
4269: LD_INT 9
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: NOP4
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4279: NOP4
4283: PPUSH
4284: NOP4
4288: PPUSH
4289: NOP4
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4293: NOP4
4297: PPUSH
4298: LD_INT 5
4300: PPUSH
4301: NOP4
// end ;
4305: LD_VAR 0 1
4309: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4310: LD_INT 0
4312: PPUSH
4313: PPUSH
4314: PPUSH
4315: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4316: NOP4
4320: PUSH
4321: DOUBLE
4322: LD_INT 1
4324: DEC
4325: ST_TO_ADDR
4326: LD_INT 8
4328: PUSH
4329: LD_INT 7
4331: PUSH
4332: LD_INT 7
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: PUSH
4340: NOP4
4344: ARRAY
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4444
// begin uc_side = 4 ;
4349: LD_ADDR_OWVAR 20
4353: PUSH
4354: LD_INT 4
4356: ST_TO_ADDR
// uc_nation = 1 ;
4357: LD_ADDR_OWVAR 21
4361: PUSH
4362: LD_INT 1
4364: ST_TO_ADDR
// hc_name =  ;
4365: LD_ADDR_OWVAR 26
4369: PUSH
4370: LD_STRING 
4372: ST_TO_ADDR
// hc_gallery =  ;
4373: LD_ADDR_OWVAR 33
4377: PUSH
4378: LD_STRING 
4380: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4381: LD_INT 0
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: LD_INT 5
4389: PPUSH
4390: LD_INT 8
4392: PPUSH
4393: NOP4
4397: PPUSH
4398: NOP4
// un = CreateHuman ;
4402: NOP4
4406: PUSH
4407: NOP4
4411: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4412: NOP4
4416: PPUSH
4417: LD_INT 9
4419: PPUSH
4420: LD_INT 0
4422: PPUSH
4423: NOP4
// ComMoveXY ( un , 53 , 23 ) ;
4427: NOP4
4431: PPUSH
4432: LD_INT 53
4434: PPUSH
4435: LD_INT 23
4437: PPUSH
4438: NOP4
// end ;
4442: GO 4346
4444: POP
4445: POP
// for i = 1 to 3 do
4446: NOP4
4450: PUSH
4451: DOUBLE
4452: LD_INT 1
4454: DEC
4455: ST_TO_ADDR
4456: LD_INT 3
4458: PUSH
4459: FOR_TO
4460: IFFALSE 4557
// begin uc_side = 4 ;
4462: LD_ADDR_OWVAR 20
4466: PUSH
4467: LD_INT 4
4469: ST_TO_ADDR
// uc_nation = 1 ;
4470: LD_ADDR_OWVAR 21
4474: PUSH
4475: LD_INT 1
4477: ST_TO_ADDR
// hc_name =  ;
4478: LD_ADDR_OWVAR 26
4482: PUSH
4483: LD_STRING 
4485: ST_TO_ADDR
// hc_gallery =  ;
4486: LD_ADDR_OWVAR 33
4490: PUSH
4491: LD_STRING 
4493: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 4
4499: PPUSH
4500: LD_INT 5
4502: PPUSH
4503: LD_INT 8
4505: PPUSH
4506: NOP4
4510: PPUSH
4511: NOP4
// un = CreateHuman ;
4515: NOP4
4519: PUSH
4520: NOP4
4524: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4525: NOP4
4529: PPUSH
4530: LD_INT 9
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: NOP4
// ComMoveXY ( un , 53 , 23 ) ;
4540: NOP4
4544: PPUSH
4545: LD_INT 53
4547: PPUSH
4548: LD_INT 23
4550: PPUSH
4551: NOP4
// end ;
4555: GO 4459
4557: POP
4558: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4559: NOP4
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 9
4571: PUSH
4572: LD_INT 8
4574: PUSH
4575: LD_INT 7
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: NOP4
4587: ARRAY
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4786
// begin uc_side = 4 ;
4592: LD_ADDR_OWVAR 20
4596: PUSH
4597: LD_INT 4
4599: ST_TO_ADDR
// uc_nation = 1 ;
4600: LD_ADDR_OWVAR 21
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// vc_engine = 1 ;
4608: LD_ADDR_OWVAR 39
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// vc_control = 1 ;
4616: LD_ADDR_OWVAR 38
4620: PUSH
4621: LD_INT 1
4623: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4624: LD_ADDR_OWVAR 40
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 4
4634: PUSH
4635: LD_INT 5
4637: PUSH
4638: LD_INT 6
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PUSH
4647: LD_INT 1
4649: PPUSH
4650: LD_INT 4
4652: PPUSH
4653: NOP4
4657: ARRAY
4658: ST_TO_ADDR
// vc_chassis = 4 ;
4659: LD_ADDR_OWVAR 37
4663: PUSH
4664: LD_INT 4
4666: ST_TO_ADDR
// veh = CreateVehicle ;
4667: NOP4
4671: PUSH
4672: NOP4
4676: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4677: NOP4
4681: PPUSH
4682: LD_INT 9
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: NOP4
// hc_name =  ;
4692: LD_ADDR_OWVAR 26
4696: PUSH
4697: LD_STRING 
4699: ST_TO_ADDR
// hc_gallery =  ;
4700: LD_ADDR_OWVAR 33
4704: PUSH
4705: LD_STRING 
4707: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4708: LD_INT 0
4710: PPUSH
4711: LD_INT 3
4713: PPUSH
4714: LD_INT 5
4716: PPUSH
4717: LD_INT 8
4719: PPUSH
4720: NOP4
4724: PPUSH
4725: NOP4
// un = CreateHuman ;
4729: NOP4
4733: PUSH
4734: NOP4
4738: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4739: NOP4
4743: PPUSH
4744: NOP4
4748: PPUSH
4749: NOP4
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4753: NOP4
4757: PUSH
4758: NOP4
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: LD_INT 53
4769: PPUSH
4770: LD_INT 23
4772: PPUSH
4773: NOP4
// wait ( 0 0$5 ) ;
4777: LD_INT 175
4779: PPUSH
4780: NOP4
// end ;
4784: GO 4589
4786: POP
4787: POP
// end ; end_of_file
4788: LD_VAR 0 1
4792: RET
// export function PrepareRussianCommander ; begin
4793: LD_INT 0
4795: PPUSH
// uc_side = 3 ;
4796: LD_ADDR_OWVAR 20
4800: PUSH
4801: LD_INT 3
4803: ST_TO_ADDR
// uc_nation = 3 ;
4804: LD_ADDR_OWVAR 21
4808: PUSH
4809: LD_INT 3
4811: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4812: NOP4
4816: PUSH
4817: LD_STRING Borodin
4819: PPUSH
4820: NOP4
4824: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
4825: NOP4
4829: PPUSH
4830: NOP4
4834: PPUSH
4835: LD_INT 0
4837: PPUSH
4838: NOP4
// end ;
4842: LD_VAR 0 1
4846: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4847: LD_INT 0
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
// for i = 1 to 10 do
4853: NOP4
4857: PUSH
4858: DOUBLE
4859: LD_INT 1
4861: DEC
4862: ST_TO_ADDR
4863: LD_INT 10
4865: PUSH
4866: FOR_TO
4867: IFFALSE 4941
// begin uc_side = 6 ;
4869: LD_ADDR_OWVAR 20
4873: PUSH
4874: LD_INT 6
4876: ST_TO_ADDR
// uc_nation = 3 ;
4877: LD_ADDR_OWVAR 21
4881: PUSH
4882: LD_INT 3
4884: ST_TO_ADDR
// hc_gallery =  ;
4885: LD_ADDR_OWVAR 33
4889: PUSH
4890: LD_STRING 
4892: ST_TO_ADDR
// hc_name =  ;
4893: LD_ADDR_OWVAR 26
4897: PUSH
4898: LD_STRING 
4900: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
4901: LD_INT 0
4903: PPUSH
4904: LD_INT 1
4906: PPUSH
4907: LD_INT 3
4909: PPUSH
4910: NOP4
// un = CreateHuman ;
4914: NOP4
4918: PUSH
4919: NOP4
4923: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
4924: NOP4
4928: PPUSH
4929: LD_INT 1
4931: PPUSH
4932: LD_INT 0
4934: PPUSH
4935: NOP4
// end ;
4939: GO 4866
4941: POP
4942: POP
// for i = 1 to 3 do
4943: NOP4
4947: PUSH
4948: DOUBLE
4949: LD_INT 1
4951: DEC
4952: ST_TO_ADDR
4953: LD_INT 3
4955: PUSH
4956: FOR_TO
4957: IFFALSE 5106
// begin uc_side = 6 ;
4959: LD_ADDR_OWVAR 20
4963: PUSH
4964: LD_INT 6
4966: ST_TO_ADDR
// uc_nation = 3 ;
4967: LD_ADDR_OWVAR 21
4971: PUSH
4972: LD_INT 3
4974: ST_TO_ADDR
// vc_engine = 1 ;
4975: LD_ADDR_OWVAR 39
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
// vc_control = 1 ;
4983: LD_ADDR_OWVAR 38
4987: PUSH
4988: LD_INT 1
4990: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
4991: LD_ADDR_OWVAR 40
4995: PUSH
4996: LD_INT 43
4998: PUSH
4999: LD_INT 44
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: LD_INT 1
5008: PPUSH
5009: LD_INT 2
5011: PPUSH
5012: NOP4
5016: ARRAY
5017: ST_TO_ADDR
// vc_chassis = 22 ;
5018: LD_ADDR_OWVAR 37
5022: PUSH
5023: LD_INT 22
5025: ST_TO_ADDR
// veh = CreateVehicle ;
5026: NOP4
5030: PUSH
5031: NOP4
5035: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5036: NOP4
5040: PPUSH
5041: LD_INT 2
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: NOP4
// hc_gallery =  ;
5051: LD_ADDR_OWVAR 33
5055: PUSH
5056: LD_STRING 
5058: ST_TO_ADDR
// hc_name =  ;
5059: LD_ADDR_OWVAR 26
5063: PUSH
5064: LD_STRING 
5066: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5067: LD_INT 0
5069: PPUSH
5070: LD_INT 3
5072: PPUSH
5073: LD_INT 4
5075: PPUSH
5076: NOP4
// un = CreateHuman ;
5080: NOP4
5084: PUSH
5085: NOP4
5089: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5090: NOP4
5094: PPUSH
5095: NOP4
5099: PPUSH
5100: NOP4
// end ;
5104: GO 4956
5106: POP
5107: POP
// end ;
5108: LD_VAR 0 1
5112: RET
// export function PrepareRussians ; var i , un ; begin
5113: LD_INT 0
5115: PPUSH
5116: PPUSH
5117: PPUSH
// for i = 1 to 14 do
5118: NOP4
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 14
5130: PUSH
5131: FOR_TO
5132: IFFALSE 5218
// begin uc_side = 3 ;
5134: LD_ADDR_OWVAR 20
5138: PUSH
5139: LD_INT 3
5141: ST_TO_ADDR
// uc_nation = 3 ;
5142: LD_ADDR_OWVAR 21
5146: PUSH
5147: LD_INT 3
5149: ST_TO_ADDR
// hc_gallery =  ;
5150: LD_ADDR_OWVAR 33
5154: PUSH
5155: LD_STRING 
5157: ST_TO_ADDR
// hc_name =  ;
5158: LD_ADDR_OWVAR 26
5162: PUSH
5163: LD_STRING 
5165: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5166: LD_INT 0
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: NOP4
5176: PPUSH
5177: NOP4
5181: PPUSH
5182: NOP4
5186: PPUSH
5187: NOP4
// un = CreateHuman ;
5191: NOP4
5195: PUSH
5196: NOP4
5200: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5201: NOP4
5205: PPUSH
5206: LD_INT 3
5208: PPUSH
5209: LD_INT 0
5211: PPUSH
5212: NOP4
// end ;
5216: GO 5131
5218: POP
5219: POP
// for i = 1 to 6 do
5220: NOP4
5224: PUSH
5225: DOUBLE
5226: LD_INT 1
5228: DEC
5229: ST_TO_ADDR
5230: LD_INT 6
5232: PUSH
5233: FOR_TO
5234: IFFALSE 5320
// begin uc_side = 3 ;
5236: LD_ADDR_OWVAR 20
5240: PUSH
5241: LD_INT 3
5243: ST_TO_ADDR
// uc_nation = 3 ;
5244: LD_ADDR_OWVAR 21
5248: PUSH
5249: LD_INT 3
5251: ST_TO_ADDR
// hc_gallery =  ;
5252: LD_ADDR_OWVAR 33
5256: PUSH
5257: LD_STRING 
5259: ST_TO_ADDR
// hc_name =  ;
5260: LD_ADDR_OWVAR 26
5264: PUSH
5265: LD_STRING 
5267: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5268: LD_INT 0
5270: PPUSH
5271: LD_INT 2
5273: PPUSH
5274: NOP4
5278: PPUSH
5279: NOP4
5283: PPUSH
5284: NOP4
5288: PPUSH
5289: NOP4
// un = CreateHuman ;
5293: NOP4
5297: PUSH
5298: NOP4
5302: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5303: NOP4
5307: PPUSH
5308: LD_INT 3
5310: PPUSH
5311: LD_INT 0
5313: PPUSH
5314: NOP4
// end ;
5318: GO 5233
5320: POP
5321: POP
// for i = 1 to 6 do
5322: NOP4
5326: PUSH
5327: DOUBLE
5328: LD_INT 1
5330: DEC
5331: ST_TO_ADDR
5332: LD_INT 6
5334: PUSH
5335: FOR_TO
5336: IFFALSE 5422
// begin uc_side = 3 ;
5338: LD_ADDR_OWVAR 20
5342: PUSH
5343: LD_INT 3
5345: ST_TO_ADDR
// uc_nation = 3 ;
5346: LD_ADDR_OWVAR 21
5350: PUSH
5351: LD_INT 3
5353: ST_TO_ADDR
// hc_gallery =  ;
5354: LD_ADDR_OWVAR 33
5358: PUSH
5359: LD_STRING 
5361: ST_TO_ADDR
// hc_name =  ;
5362: LD_ADDR_OWVAR 26
5366: PUSH
5367: LD_STRING 
5369: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5370: LD_INT 0
5372: PPUSH
5373: LD_INT 3
5375: PPUSH
5376: NOP4
5380: PPUSH
5381: NOP4
5385: PPUSH
5386: NOP4
5390: PPUSH
5391: NOP4
// un = CreateHuman ;
5395: NOP4
5399: PUSH
5400: NOP4
5404: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5405: NOP4
5409: PPUSH
5410: LD_INT 3
5412: PPUSH
5413: LD_INT 0
5415: PPUSH
5416: NOP4
// end ;
5420: GO 5335
5422: POP
5423: POP
// for i = 1 to 4 do
5424: NOP4
5428: PUSH
5429: DOUBLE
5430: LD_INT 1
5432: DEC
5433: ST_TO_ADDR
5434: LD_INT 4
5436: PUSH
5437: FOR_TO
5438: IFFALSE 5524
// begin uc_side = 3 ;
5440: LD_ADDR_OWVAR 20
5444: PUSH
5445: LD_INT 3
5447: ST_TO_ADDR
// uc_nation = 3 ;
5448: LD_ADDR_OWVAR 21
5452: PUSH
5453: LD_INT 3
5455: ST_TO_ADDR
// hc_gallery =  ;
5456: LD_ADDR_OWVAR 33
5460: PUSH
5461: LD_STRING 
5463: ST_TO_ADDR
// hc_name =  ;
5464: LD_ADDR_OWVAR 26
5468: PUSH
5469: LD_STRING 
5471: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5472: LD_INT 0
5474: PPUSH
5475: LD_INT 4
5477: PPUSH
5478: NOP4
5482: PPUSH
5483: NOP4
5487: PPUSH
5488: NOP4
5492: PPUSH
5493: NOP4
// un = CreateHuman ;
5497: NOP4
5501: PUSH
5502: NOP4
5506: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5507: NOP4
5511: PPUSH
5512: LD_INT 3
5514: PPUSH
5515: LD_INT 0
5517: PPUSH
5518: NOP4
// end ;
5522: GO 5437
5524: POP
5525: POP
// end ; end_of_file
5526: LD_VAR 0 1
5530: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5531: LD_INT 0
5533: PPUSH
5534: PPUSH
// if exist_mode then
5535: NOP4
5539: IFFALSE 5558
// unit := CreateCharacter ( ident ) else
5541: NOP4
5545: PUSH
5546: NOP4
5550: PPUSH
5551: NOP4
5555: ST_TO_ADDR
5556: GO 5573
// unit := NewCharacter ( ident ) ;
5558: NOP4
5562: PUSH
5563: NOP4
5567: PPUSH
5568: NOP4
5572: ST_TO_ADDR
// result := unit ;
5573: NOP4
5577: PUSH
5578: NOP4
5582: ST_TO_ADDR
// end ;
5583: LD_VAR 0 3
5587: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5588: LD_INT 0
5590: PPUSH
5591: PPUSH
5592: PPUSH
// rnd = rand ( 1 , characters ) ;
5593: NOP4
5597: PUSH
5598: LD_INT 1
5600: PPUSH
5601: NOP4
5605: PPUSH
5606: NOP4
5610: ST_TO_ADDR
// for i = 1 to characters do
5611: NOP4
5615: PUSH
5616: DOUBLE
5617: LD_INT 1
5619: DEC
5620: ST_TO_ADDR
5621: NOP4
5625: PUSH
5626: FOR_TO
5627: IFFALSE 5737
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5629: NOP4
5633: PUSH
5634: NOP4
5638: EQUAL
5639: PUSH
5640: NOP4
5644: PUSH
5645: NOP4
5649: ARRAY
5650: PPUSH
5651: NOP4
5655: PUSH
5656: LD_INT 1
5658: EQUAL
5659: AND
5660: IFFALSE 5682
// Say ( characters [ i ] , dialogMID ) ;
5662: NOP4
5666: PUSH
5667: NOP4
5671: ARRAY
5672: PPUSH
5673: NOP4
5677: PPUSH
5678: NOP4
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5682: NOP4
5686: PUSH
5687: NOP4
5691: EQUAL
5692: PUSH
5693: NOP4
5697: PUSH
5698: NOP4
5702: ARRAY
5703: PPUSH
5704: NOP4
5708: PUSH
5709: LD_INT 2
5711: EQUAL
5712: AND
5713: IFFALSE 5735
// Say ( characters [ i ] , dialogFID ) ;
5715: NOP4
5719: PUSH
5720: NOP4
5724: ARRAY
5725: PPUSH
5726: NOP4
5730: PPUSH
5731: NOP4
// end ;
5735: GO 5626
5737: POP
5738: POP
// end ;
5739: LD_VAR 0 4
5743: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5744: LD_INT 0
5746: PPUSH
5747: PPUSH
5748: PPUSH
// uc_side := GetSide ( b ) ;
5749: LD_ADDR_OWVAR 20
5753: PUSH
5754: NOP4
5758: PPUSH
5759: NOP4
5763: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5764: LD_ADDR_OWVAR 21
5768: PUSH
5769: NOP4
5773: PPUSH
5774: NOP4
5778: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5779: LD_INT 0
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: NOP4
5789: PPUSH
5790: NOP4
// dir := GetDir ( b ) - 3 ;
5794: NOP4
5798: PUSH
5799: NOP4
5803: PPUSH
5804: NOP4
5808: PUSH
5809: LD_INT 3
5811: MINUS
5812: ST_TO_ADDR
// if dir < 0 then
5813: NOP4
5817: PUSH
5818: LD_INT 0
5820: LESS
5821: IFFALSE 5837
// dir := 6 + dir ;
5823: NOP4
5827: PUSH
5828: LD_INT 6
5830: PUSH
5831: NOP4
5835: PLUS
5836: ST_TO_ADDR
// un := CreateHuman ;
5837: NOP4
5841: PUSH
5842: NOP4
5846: ST_TO_ADDR
// SetDir ( un , dir ) ;
5847: NOP4
5851: PPUSH
5852: NOP4
5856: PPUSH
5857: NOP4
// PlaceHumanInUnit ( un , b ) ;
5861: NOP4
5865: PPUSH
5866: NOP4
5870: PPUSH
5871: NOP4
// end ;
5875: LD_VAR 0 3
5879: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// for i = 1 to count do
5886: NOP4
5890: PUSH
5891: DOUBLE
5892: LD_INT 1
5894: DEC
5895: ST_TO_ADDR
5896: NOP4
5900: PUSH
5901: FOR_TO
5902: IFFALSE 5983
// begin uc_side = side ;
5904: LD_ADDR_OWVAR 20
5908: PUSH
5909: NOP4
5913: ST_TO_ADDR
// uc_nation = nation ;
5914: LD_ADDR_OWVAR 21
5918: PUSH
5919: NOP4
5923: ST_TO_ADDR
// hc_gallery =  ;
5924: LD_ADDR_OWVAR 33
5928: PUSH
5929: LD_STRING 
5931: ST_TO_ADDR
// hc_name =  ;
5932: LD_ADDR_OWVAR 26
5936: PUSH
5937: LD_STRING 
5939: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5940: LD_INT 0
5942: PPUSH
5943: NOP4
5947: PPUSH
5948: NOP4
5952: PPUSH
5953: NOP4
// un = CreateHuman ;
5957: NOP4
5961: PUSH
5962: NOP4
5966: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5967: NOP4
5971: PPUSH
5972: NOP4
5976: PPUSH
5977: NOP4
// end ;
5981: GO 5901
5983: POP
5984: POP
// end ;
5985: LD_VAR 0 7
5989: RET
// export function PrepareDifficulty ; begin
5990: LD_INT 0
5992: PPUSH
// if Difficulty = 1 then
5993: NOP4
5997: PUSH
5998: LD_INT 1
6000: EQUAL
6001: IFFALSE 6019
// begin RuSolMinLevel = 4 ;
6003: NOP4
6007: PUSH
6008: LD_INT 4
6010: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6011: NOP4
6015: PUSH
6016: LD_INT 6
6018: ST_TO_ADDR
// end ; if Difficulty = 2 then
6019: NOP4
6023: PUSH
6024: LD_INT 2
6026: EQUAL
6027: IFFALSE 6097
// begin RuSolMinLevel = 5 ;
6029: NOP4
6033: PUSH
6034: LD_INT 5
6036: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6037: NOP4
6041: PUSH
6042: LD_INT 6
6044: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6045: LD_INT 51
6047: PPUSH
6048: LD_INT 3
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: NOP4
// SetTech ( 57 , 3 , state_enabled ) ;
6058: LD_INT 57
6060: PPUSH
6061: LD_INT 3
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: NOP4
// SetTech ( 57 , 6 , state_researched ) ;
6071: LD_INT 57
6073: PPUSH
6074: LD_INT 6
6076: PPUSH
6077: LD_INT 2
6079: PPUSH
6080: NOP4
// SetTech ( 51 , 6 , state_researched ) ;
6084: LD_INT 51
6086: PPUSH
6087: LD_INT 6
6089: PPUSH
6090: LD_INT 2
6092: PPUSH
6093: NOP4
// end ; if Difficulty = 3 then
6097: NOP4
6101: PUSH
6102: LD_INT 3
6104: EQUAL
6105: IFFALSE 6188
// begin RuSolMinLevel = 5 ;
6107: NOP4
6111: PUSH
6112: LD_INT 5
6114: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
6115: NOP4
6119: PUSH
6120: LD_INT 7
6122: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6123: LD_INT 57
6125: PPUSH
6126: LD_INT 3
6128: PPUSH
6129: LD_INT 1
6131: PPUSH
6132: NOP4
// SetTech ( 51 , 3 , state_enabled ) ;
6136: LD_INT 51
6138: PPUSH
6139: LD_INT 3
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: NOP4
// SetTech ( 52 , 3 , state_enabled ) ;
6149: LD_INT 52
6151: PPUSH
6152: LD_INT 3
6154: PPUSH
6155: LD_INT 1
6157: PPUSH
6158: NOP4
// SetTech ( 57 , 6 , state_researched ) ;
6162: LD_INT 57
6164: PPUSH
6165: LD_INT 6
6167: PPUSH
6168: LD_INT 2
6170: PPUSH
6171: NOP4
// SetTech ( 52 , 6 , state_researched ) ;
6175: LD_INT 52
6177: PPUSH
6178: LD_INT 6
6180: PPUSH
6181: LD_INT 2
6183: PPUSH
6184: NOP4
// end ; end ;
6188: LD_VAR 0 1
6192: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6193: LD_INT 0
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6199: NOP4
6203: PUSH
6204: LD_INT 22
6206: PUSH
6207: LD_INT 3
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 25
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PPUSH
6228: NOP4
6232: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6233: NOP4
6237: PUSH
6238: LD_INT 4
6240: PUSH
6241: LD_INT 75
6243: PUSH
6244: LD_INT 79
6246: PUSH
6247: LD_INT 2
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: LD_INT 113
6261: PUSH
6262: LD_INT 94
6264: PUSH
6265: LD_INT 4
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 29
6276: PUSH
6277: LD_INT 106
6279: PUSH
6280: LD_INT 97
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 26
6294: PUSH
6295: LD_INT 93
6297: PUSH
6298: LD_INT 97
6300: PUSH
6301: LD_INT 5
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 100
6315: PUSH
6316: LD_INT 89
6318: PUSH
6319: LD_INT 3
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 17
6330: PUSH
6331: LD_INT 96
6333: PUSH
6334: LD_INT 89
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 32
6348: PUSH
6349: LD_INT 78
6351: PUSH
6352: LD_INT 94
6354: PUSH
6355: LD_INT 1
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: LD_INT 32
6366: PUSH
6367: LD_INT 95
6369: PUSH
6370: LD_INT 82
6372: PUSH
6373: LD_INT 3
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 32
6384: PUSH
6385: LD_INT 104
6387: PUSH
6388: LD_INT 85
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 32
6402: PUSH
6403: LD_INT 81
6405: PUSH
6406: LD_INT 78
6408: PUSH
6409: LD_INT 2
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 33
6420: PUSH
6421: LD_INT 109
6423: PUSH
6424: LD_INT 90
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 33
6438: PUSH
6439: LD_INT 88
6441: PUSH
6442: LD_INT 79
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 33
6456: PUSH
6457: LD_INT 76
6459: PUSH
6460: LD_INT 87
6462: PUSH
6463: LD_INT 1
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: PUSH
6472: LD_INT 26
6474: PUSH
6475: LD_INT 96
6477: PUSH
6478: LD_INT 97
6480: PUSH
6481: LD_INT 5
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 26
6492: PUSH
6493: LD_INT 85
6495: PUSH
6496: LD_INT 84
6498: PUSH
6499: LD_INT 2
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 6
6510: PUSH
6511: LD_INT 88
6513: PUSH
6514: LD_INT 95
6516: PUSH
6517: LD_INT 0
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 19
6528: PUSH
6529: LD_INT 103
6531: PUSH
6532: LD_INT 89
6534: PUSH
6535: LD_INT 4
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 16
6546: PUSH
6547: LD_INT 97
6549: PUSH
6550: LD_INT 86
6552: PUSH
6553: LD_INT 2
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 24
6564: PUSH
6565: LD_INT 100
6567: PUSH
6568: LD_INT 85
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: ST_TO_ADDR
// for i := 1 to buildingsTab do
6601: NOP4
6605: PUSH
6606: DOUBLE
6607: LD_INT 1
6609: DEC
6610: ST_TO_ADDR
6611: NOP4
6615: PUSH
6616: FOR_TO
6617: IFFALSE 6690
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6619: NOP4
6623: PPUSH
6624: NOP4
6628: PUSH
6629: NOP4
6633: ARRAY
6634: PUSH
6635: LD_INT 1
6637: ARRAY
6638: PPUSH
6639: NOP4
6643: PUSH
6644: NOP4
6648: ARRAY
6649: PUSH
6650: LD_INT 2
6652: ARRAY
6653: PPUSH
6654: NOP4
6658: PUSH
6659: NOP4
6663: ARRAY
6664: PUSH
6665: LD_INT 3
6667: ARRAY
6668: PPUSH
6669: NOP4
6673: PUSH
6674: NOP4
6678: ARRAY
6679: PUSH
6680: LD_INT 4
6682: ARRAY
6683: PPUSH
6684: NOP4
6688: GO 6616
6690: POP
6691: POP
// end ;
6692: LD_VAR 0 1
6696: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6697: LD_INT 0
6699: PPUSH
6700: PPUSH
// for i in charactersList do
6701: NOP4
6705: PUSH
6706: NOP4
6710: PUSH
6711: FOR_IN
6712: IFFALSE 6741
// begin if IsOk ( i ) then
6714: NOP4
6718: PPUSH
6719: NOP4
6723: IFFALSE 6739
// SaveCharacters ( i , ident ) ;
6725: NOP4
6729: PPUSH
6730: NOP4
6734: PPUSH
6735: NOP4
// end ;
6739: GO 6711
6741: POP
6742: POP
// end ;
6743: LD_VAR 0 3
6747: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
6752: PPUSH
6753: PPUSH
// for i = 1 to 72 do
6754: NOP4
6758: PUSH
6759: DOUBLE
6760: LD_INT 1
6762: DEC
6763: ST_TO_ADDR
6764: LD_INT 72
6766: PUSH
6767: FOR_TO
6768: IFFALSE 6826
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6770: NOP4
6774: PPUSH
6775: NOP4
6779: PPUSH
6780: NOP4
6784: PUSH
6785: LD_INT 1
6787: EQUAL
6788: PUSH
6789: NOP4
6793: PPUSH
6794: NOP4
6798: PPUSH
6799: NOP4
6803: PUSH
6804: LD_INT 1
6806: EQUAL
6807: AND
6808: IFFALSE 6824
// AddComResearch ( lab , i ) ;
6810: NOP4
6814: PPUSH
6815: NOP4
6819: PPUSH
6820: NOP4
6824: GO 6767
6826: POP
6827: POP
// end ;
6828: LD_VAR 0 4
6832: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6833: LD_INT 0
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6843: NOP4
6847: PUSH
6848: LD_INT 22
6850: PUSH
6851: NOP4
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 25
6862: PUSH
6863: LD_INT 1
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 56
6872: PUSH
6873: EMPTY
6874: LIST
6875: PUSH
6876: LD_INT 24
6878: PUSH
6879: LD_INT 700
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 3
6888: PUSH
6889: LD_INT 60
6891: PUSH
6892: EMPTY
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: PPUSH
6906: NOP4
6910: PUSH
6911: NOP4
6915: PUSH
6916: EMPTY
6917: LIST
6918: DIFF
6919: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
6920: NOP4
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: NOP4
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 25
6939: PUSH
6940: LD_INT 1
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 54
6949: PUSH
6950: EMPTY
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: PPUSH
6958: NOP4
6962: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6963: NOP4
6967: PUSH
6968: LD_INT 22
6970: PUSH
6971: NOP4
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 30
6982: PUSH
6983: LD_INT 32
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 58
6992: PUSH
6993: EMPTY
6994: LIST
6995: PUSH
6996: LD_INT 24
6998: PUSH
6999: LD_INT 251
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: PPUSH
7012: NOP4
7016: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7017: NOP4
7021: PUSH
7022: LD_INT 22
7024: PUSH
7025: NOP4
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 2
7036: PUSH
7037: LD_INT 30
7039: PUSH
7040: LD_INT 4
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: LD_INT 5
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 24
7064: PUSH
7065: LD_INT 251
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: PPUSH
7077: NOP4
7081: ST_TO_ADDR
// if barrackList > 0 then
7082: NOP4
7086: PUSH
7087: LD_INT 0
7089: GREATER
7090: IFFALSE 7203
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7092: NOP4
7096: PUSH
7097: LD_INT 0
7099: EQUAL
7100: PUSH
7101: LD_INT 24
7103: PPUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: NOP4
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: AND
7137: IFFALSE 7186
// begin for i in soldiers_list do
7139: NOP4
7143: PUSH
7144: NOP4
7148: PUSH
7149: FOR_IN
7150: IFFALSE 7182
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7152: NOP4
7156: PPUSH
7157: NOP4
7161: PUSH
7162: LD_INT 1
7164: PPUSH
7165: NOP4
7169: PPUSH
7170: NOP4
7174: ARRAY
7175: PPUSH
7176: NOP4
7180: GO 7149
7182: POP
7183: POP
// end else
7184: GO 7203
// begin for i in barrackList do
7186: NOP4
7190: PUSH
7191: NOP4
7195: PUSH
7196: FOR_IN
7197: IFFALSE 7201
// begin end ;
7199: GO 7196
7201: POP
7202: POP
// end ; end ; end ;
7203: LD_VAR 0 3
7207: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7208: LD_INT 0
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
// for i = 1 to infantryCount do
7216: NOP4
7220: PUSH
7221: DOUBLE
7222: LD_INT 1
7224: DEC
7225: ST_TO_ADDR
7226: NOP4
7230: PUSH
7231: FOR_TO
7232: IFFALSE 7348
// begin uc_side = side ;
7234: LD_ADDR_OWVAR 20
7238: PUSH
7239: NOP4
7243: ST_TO_ADDR
// uc_nation = nation ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: NOP4
7253: ST_TO_ADDR
// hc_class = 1 ;
7254: LD_ADDR_OWVAR 28
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// hc_name =  ;
7262: LD_ADDR_OWVAR 26
7266: PUSH
7267: LD_STRING 
7269: ST_TO_ADDR
// hc_gallery =  ;
7270: LD_ADDR_OWVAR 33
7274: PUSH
7275: LD_STRING 
7277: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 1
7283: PPUSH
7284: NOP4
7288: PPUSH
7289: NOP4
7293: PPUSH
7294: NOP4
7298: PPUSH
7299: NOP4
// un = CreateHuman ;
7303: NOP4
7307: PUSH
7308: NOP4
7312: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7313: NOP4
7317: PPUSH
7318: NOP4
7322: PPUSH
7323: LD_INT 0
7325: PPUSH
7326: NOP4
// defenders_list = defenders_list ^ un ;
7330: NOP4
7334: PUSH
7335: NOP4
7339: PUSH
7340: NOP4
7344: ADD
7345: ST_TO_ADDR
// end ;
7346: GO 7231
7348: POP
7349: POP
// for i = 1 to vehCount do
7350: NOP4
7354: PUSH
7355: DOUBLE
7356: LD_INT 1
7358: DEC
7359: ST_TO_ADDR
7360: NOP4
7364: PUSH
7365: FOR_TO
7366: IFFALSE 7573
// begin uc_side = side ;
7368: LD_ADDR_OWVAR 20
7372: PUSH
7373: NOP4
7377: ST_TO_ADDR
// uc_nation = nation ;
7378: LD_ADDR_OWVAR 21
7382: PUSH
7383: NOP4
7387: ST_TO_ADDR
// vc_Chassis = 22 ;
7388: LD_ADDR_OWVAR 37
7392: PUSH
7393: LD_INT 22
7395: ST_TO_ADDR
// vc_engine = 1 ;
7396: LD_ADDR_OWVAR 39
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// vc_control = 1 ;
7404: LD_ADDR_OWVAR 38
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7412: LD_ADDR_OWVAR 40
7416: PUSH
7417: LD_INT 43
7419: PUSH
7420: LD_INT 44
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 2
7432: PPUSH
7433: NOP4
7437: ARRAY
7438: ST_TO_ADDR
// veh = CreateVehicle ;
7439: NOP4
7443: PUSH
7444: NOP4
7448: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7449: NOP4
7453: PPUSH
7454: NOP4
7458: PPUSH
7459: LD_INT 0
7461: PPUSH
7462: NOP4
// defenders_list = defenders_list ^ veh ;
7466: NOP4
7470: PUSH
7471: NOP4
7475: PUSH
7476: NOP4
7480: ADD
7481: ST_TO_ADDR
// hc_class = 3 ;
7482: LD_ADDR_OWVAR 28
7486: PUSH
7487: LD_INT 3
7489: ST_TO_ADDR
// hc_name =  ;
7490: LD_ADDR_OWVAR 26
7494: PUSH
7495: LD_STRING 
7497: ST_TO_ADDR
// hc_gallery =  ;
7498: LD_ADDR_OWVAR 33
7502: PUSH
7503: LD_STRING 
7505: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7506: LD_INT 0
7508: PPUSH
7509: LD_INT 3
7511: PPUSH
7512: NOP4
7516: PPUSH
7517: NOP4
7521: PPUSH
7522: NOP4
7526: PPUSH
7527: NOP4
// un = CreateHuman ;
7531: NOP4
7535: PUSH
7536: NOP4
7540: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7541: NOP4
7545: PPUSH
7546: NOP4
7550: PPUSH
7551: NOP4
// defenders_list = defenders_list ^ un ;
7555: NOP4
7559: PUSH
7560: NOP4
7564: PUSH
7565: NOP4
7569: ADD
7570: ST_TO_ADDR
// end ;
7571: GO 7365
7573: POP
7574: POP
// end ;
7575: LD_VAR 0 7
7579: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7580: LD_INT 0
7582: PPUSH
7583: PPUSH
7584: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7585: NOP4
7589: PPUSH
7590: LD_INT 22
7592: PUSH
7593: NOP4
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: EMPTY
7603: LIST
7604: PPUSH
7605: NOP4
7609: PUSH
7610: LD_INT 0
7612: EQUAL
7613: PUSH
7614: NOP4
7618: PUSH
7619: LD_INT 0
7621: GREATER
7622: AND
7623: IFFALSE 7669
// begin for i in defenders_list do
7625: NOP4
7629: PUSH
7630: NOP4
7634: PUSH
7635: FOR_IN
7636: IFFALSE 7667
// begin ComMoveXY ( i , 65 , 68 ) ;
7638: NOP4
7642: PPUSH
7643: LD_INT 65
7645: PPUSH
7646: LD_INT 68
7648: PPUSH
7649: NOP4
// SetFuel ( i , 100 ) ;
7653: NOP4
7657: PPUSH
7658: LD_INT 100
7660: PPUSH
7661: NOP4
// end ;
7665: GO 7635
7667: POP
7668: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7669: NOP4
7673: PPUSH
7674: LD_INT 22
7676: PUSH
7677: NOP4
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: PPUSH
7689: NOP4
7693: PUSH
7694: LD_INT 0
7696: GREATER
7697: PUSH
7698: NOP4
7702: PUSH
7703: LD_INT 0
7705: GREATER
7706: AND
7707: IFFALSE 7875
// begin for i in defenders_list do
7709: NOP4
7713: PUSH
7714: NOP4
7718: PUSH
7719: FOR_IN
7720: IFFALSE 7770
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7722: NOP4
7726: PUSH
7727: LD_INT 22
7729: PUSH
7730: NOP4
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PPUSH
7739: NOP4
7743: PPUSH
7744: NOP4
7748: PPUSH
7749: NOP4
7753: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7754: NOP4
7758: PPUSH
7759: NOP4
7763: PPUSH
7764: NOP4
// end ;
7768: GO 7719
7770: POP
7771: POP
// if russianAI = 0 then
7772: NOP4
7776: PUSH
7777: LD_INT 0
7779: EQUAL
7780: IFFALSE 7875
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7782: NOP4
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 25
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PPUSH
7811: NOP4
7815: PUSH
7816: NOP4
7820: DIFF
7821: PUSH
7822: FOR_IN
7823: IFFALSE 7873
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7825: NOP4
7829: PUSH
7830: LD_INT 22
7832: PUSH
7833: NOP4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: NOP4
7846: PPUSH
7847: NOP4
7851: PPUSH
7852: NOP4
7856: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7857: NOP4
7861: PPUSH
7862: NOP4
7866: PPUSH
7867: NOP4
// end ;
7871: GO 7822
7873: POP
7874: POP
// end ; end ; end ;
7875: LD_VAR 0 3
7879: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7880: LD_INT 0
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
7886: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7887: NOP4
7891: PUSH
7892: LD_INT 22
7894: PUSH
7895: NOP4
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: LD_INT 25
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 25
7919: PUSH
7920: LD_INT 16
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 24
7934: PUSH
7935: LD_INT 1000
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: PPUSH
7947: NOP4
7951: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7952: NOP4
7956: PUSH
7957: LD_INT 22
7959: PUSH
7960: NOP4
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 21
7971: PUSH
7972: LD_INT 3
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 3
7981: PUSH
7982: LD_INT 24
7984: PUSH
7985: LD_INT 1000
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: PPUSH
8004: NOP4
8008: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8009: NOP4
8013: PUSH
8014: LD_INT 0
8016: GREATER
8017: PUSH
8018: NOP4
8022: PUSH
8023: LD_INT 0
8025: GREATER
8026: AND
8027: IFFALSE 8093
// begin for i in engineerOk_list do
8029: NOP4
8033: PUSH
8034: NOP4
8038: PUSH
8039: FOR_IN
8040: IFFALSE 8091
// begin for j in buildings_list do
8042: NOP4
8046: PUSH
8047: NOP4
8051: PUSH
8052: FOR_IN
8053: IFFALSE 8087
// begin AddComExitBuilding ( i ) ;
8055: NOP4
8059: PPUSH
8060: NOP4
// wait ( 0 0$1 ) ;
8064: LD_INT 35
8066: PPUSH
8067: NOP4
// AddComRepairBuilding ( i , j ) ;
8071: NOP4
8075: PPUSH
8076: NOP4
8080: PPUSH
8081: NOP4
// end ;
8085: GO 8052
8087: POP
8088: POP
// end ;
8089: GO 8039
8091: POP
8092: POP
// end ; if buildings_list = 0 then
8093: NOP4
8097: PUSH
8098: LD_INT 0
8100: EQUAL
8101: IFFALSE 8134
// begin for i in engineerOK_list do
8103: NOP4
8107: PUSH
8108: NOP4
8112: PUSH
8113: FOR_IN
8114: IFFALSE 8132
// begin ComEnterUnit ( i , building ) ;
8116: NOP4
8120: PPUSH
8121: NOP4
8125: PPUSH
8126: NOP4
// end ;
8130: GO 8113
8132: POP
8133: POP
// end ; end ;
8134: LD_VAR 0 3
8138: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8139: LD_INT 0
8141: PPUSH
8142: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8143: LD_INT 22
8145: PUSH
8146: NOP4
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 25
8157: PUSH
8158: LD_INT 2
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PPUSH
8169: NOP4
8173: PUSH
8174: LD_INT 0
8176: GREATER
8177: PUSH
8178: LD_INT 22
8180: PUSH
8181: NOP4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 21
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 3
8202: PUSH
8203: LD_INT 24
8205: PUSH
8206: LD_INT 1000
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: PPUSH
8222: NOP4
8226: PUSH
8227: LD_INT 0
8229: EQUAL
8230: AND
8231: PUSH
8232: NOP4
8236: PUSH
8237: LD_INT 0
8239: GREATER
8240: AND
8241: IFFALSE 8340
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8243: NOP4
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: NOP4
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 25
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: NOP4
8278: PUSH
8279: FOR_IN
8280: IFFALSE 8338
// begin AddComExitBuilding ( i ) ;
8282: NOP4
8286: PPUSH
8287: NOP4
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8291: NOP4
8295: PPUSH
8296: NOP4
8300: PUSH
8301: LD_INT 1
8303: ARRAY
8304: PPUSH
8305: NOP4
8309: PUSH
8310: LD_INT 2
8312: ARRAY
8313: PPUSH
8314: NOP4
8318: PUSH
8319: LD_INT 3
8321: ARRAY
8322: PPUSH
8323: NOP4
8327: PUSH
8328: LD_INT 4
8330: ARRAY
8331: PPUSH
8332: NOP4
// end ;
8336: GO 8279
8338: POP
8339: POP
// end ; end ;
8340: LD_VAR 0 3
8344: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8345: LD_INT 0
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 250 ] , [ f_class , 4 ] ] ) ;
8352: NOP4
8356: PUSH
8357: LD_INT 22
8359: PUSH
8360: NOP4
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 24
8371: PUSH
8372: LD_INT 250
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 25
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: LIST
8393: PPUSH
8394: NOP4
8398: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8399: NOP4
8403: PUSH
8404: NOP4
8408: PPUSH
8409: LD_INT 22
8411: PUSH
8412: NOP4
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 21
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 3
8433: PUSH
8434: LD_INT 24
8436: PUSH
8437: LD_INT 750
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: PPUSH
8453: NOP4
8457: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8458: NOP4
8462: PUSH
8463: LD_INT 0
8465: GREATER
8466: PUSH
8467: NOP4
8471: PUSH
8472: LD_INT 0
8474: GREATER
8475: AND
8476: IFFALSE 8603
// begin for i = 1 to damageUnits do
8478: NOP4
8482: PUSH
8483: DOUBLE
8484: LD_INT 1
8486: DEC
8487: ST_TO_ADDR
8488: NOP4
8492: PUSH
8493: FOR_TO
8494: IFFALSE 8518
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8496: NOP4
8500: PUSH
8501: NOP4
8505: ARRAY
8506: PPUSH
8507: NOP4
8511: PPUSH
8512: NOP4
8516: GO 8493
8518: POP
8519: POP
// for i in sci_list do
8520: NOP4
8524: PUSH
8525: NOP4
8529: PUSH
8530: FOR_IN
8531: IFFALSE 8599
// begin ComExitBuilding ( i ) ;
8533: NOP4
8537: PPUSH
8538: NOP4
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8542: NOP4
8546: PUSH
8547: NOP4
8551: PPUSH
8552: LD_INT 22
8554: PUSH
8555: NOP4
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: NOP4
8568: PUSH
8569: FOR_IN
8570: IFFALSE 8595
// begin AddComHeal ( i , j ) ;
8572: NOP4
8576: PPUSH
8577: NOP4
8581: PPUSH
8582: NOP4
// wait ( 1 1$0 ) ;
8586: LD_INT 2100
8588: PPUSH
8589: NOP4
// end ;
8593: GO 8569
8595: POP
8596: POP
// end ;
8597: GO 8530
8599: POP
8600: POP
// end else
8601: GO 8617
// begin AddComEnterUnit ( sci_list , build ) ;
8603: NOP4
8607: PPUSH
8608: NOP4
8612: PPUSH
8613: NOP4
// end ; end ;
8617: LD_VAR 0 5
8621: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
8626: PPUSH
8627: PPUSH
8628: PPUSH
8629: PPUSH
8630: PPUSH
8631: PPUSH
8632: PPUSH
8633: PPUSH
8634: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8635: NOP4
8639: PUSH
8640: LD_INT 22
8642: PUSH
8643: NOP4
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 33
8664: PUSH
8665: LD_INT 1
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 24
8674: PUSH
8675: LD_INT 660
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 3
8684: PUSH
8685: LD_INT 58
8687: PUSH
8688: EMPTY
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 34
8700: PUSH
8701: LD_INT 53
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: NOP4
8724: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8725: NOP4
8729: PUSH
8730: LD_INT 22
8732: PUSH
8733: NOP4
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 21
8744: PUSH
8745: LD_INT 2
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 33
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 3
8764: PUSH
8765: LD_INT 24
8767: PUSH
8768: LD_INT 660
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: PPUSH
8785: NOP4
8789: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8790: NOP4
8794: PUSH
8795: NOP4
8799: PPUSH
8800: LD_INT 22
8802: PUSH
8803: NOP4
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 21
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 33
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 3
8834: PUSH
8835: LD_INT 24
8837: PUSH
8838: LD_INT 1000
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PPUSH
8855: NOP4
8859: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8860: NOP4
8864: PUSH
8865: NOP4
8869: PPUSH
8870: LD_INT 22
8872: PUSH
8873: NOP4
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 21
8884: PUSH
8885: LD_INT 2
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 33
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 24
8904: PUSH
8905: LD_INT 1000
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 58
8914: PUSH
8915: EMPTY
8916: LIST
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: LD_INT 34
8923: PUSH
8924: LD_INT 53
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: PPUSH
8943: NOP4
8947: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8948: NOP4
8952: PUSH
8953: EMPTY
8954: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8955: NOP4
8959: PUSH
8960: NOP4
8964: PPUSH
8965: LD_INT 22
8967: PUSH
8968: NOP4
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 25
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: NOP4
8995: ST_TO_ADDR
// if damageVehicle_list > 0 then
8996: NOP4
9000: PUSH
9001: LD_INT 0
9003: GREATER
9004: IFFALSE 9042
// begin for i in damageVehicle_list do
9006: NOP4
9010: PUSH
9011: NOP4
9015: PUSH
9016: FOR_IN
9017: IFFALSE 9040
// begin ComMoveXY ( i , repX , repY ) ;
9019: NOP4
9023: PPUSH
9024: NOP4
9028: PPUSH
9029: NOP4
9033: PPUSH
9034: NOP4
// end ;
9038: GO 9016
9040: POP
9041: POP
// end ; if vehicleNeedRepair_list > 0 then
9042: NOP4
9046: PUSH
9047: LD_INT 0
9049: GREATER
9050: IFFALSE 9137
// begin for i in vehicleNeedRepair_list do
9052: NOP4
9056: PUSH
9057: NOP4
9061: PUSH
9062: FOR_IN
9063: IFFALSE 9135
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9065: NOP4
9069: PUSH
9070: NOP4
9074: PUSH
9075: NOP4
9079: PPUSH
9080: NOP4
9084: ADD
9085: ST_TO_ADDR
// for j in mechanicInside_list do
9086: NOP4
9090: PUSH
9091: NOP4
9095: PUSH
9096: FOR_IN
9097: IFFALSE 9131
// begin ComExitVehicle ( i ) ;
9099: NOP4
9103: PPUSH
9104: NOP4
// wait ( 0 0$1 ) ;
9108: LD_INT 35
9110: PPUSH
9111: NOP4
// ComRepairVehicle ( i , j ) ;
9115: NOP4
9119: PPUSH
9120: NOP4
9124: PPUSH
9125: NOP4
// end ;
9129: GO 9096
9131: POP
9132: POP
// end ;
9133: GO 9062
9135: POP
9136: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9137: NOP4
9141: PUSH
9142: LD_INT 0
9144: GREATER
9145: IFFALSE 9185
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9147: NOP4
9151: PUSH
9152: LD_INT 1
9154: ARRAY
9155: PPUSH
9156: NOP4
9160: PUSH
9161: LD_INT 1
9163: ARRAY
9164: PPUSH
9165: NOP4
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9169: NOP4
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: LD_INT 100
9180: PPUSH
9181: NOP4
// end ; if vehicleOK_list > 0 then
9185: NOP4
9189: PUSH
9190: LD_INT 0
9192: GREATER
9193: IFFALSE 9384
// begin for i in vehicleOK_list do
9195: NOP4
9199: PUSH
9200: NOP4
9204: PUSH
9205: FOR_IN
9206: IFFALSE 9382
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9208: NOP4
9212: PUSH
9213: LD_INT 22
9215: PUSH
9216: NOP4
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PPUSH
9225: NOP4
9229: PPUSH
9230: NOP4
9234: PPUSH
9235: NOP4
9239: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9240: NOP4
9244: PUSH
9245: LD_INT 22
9247: PUSH
9248: NOP4
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 2
9259: PUSH
9260: LD_INT 59
9262: PUSH
9263: EMPTY
9264: LIST
9265: PUSH
9266: LD_INT 21
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 21
9278: PUSH
9279: LD_INT 2
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: PPUSH
9299: NOP4
9303: PPUSH
9304: NOP4
9308: PPUSH
9309: NOP4
9313: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9314: NOP4
9318: PPUSH
9319: NOP4
9323: PPUSH
9324: NOP4
9328: PUSH
9329: LD_INT 8
9331: PLUS
9332: PUSH
9333: NOP4
9337: PPUSH
9338: NOP4
9342: PPUSH
9343: NOP4
9347: LESS
9348: IFFALSE 9366
// begin ComAttackUnit ( i , target1 ) ;
9350: NOP4
9354: PPUSH
9355: NOP4
9359: PPUSH
9360: NOP4
// end else
9364: GO 9380
// begin ComAttackUnit ( i , target2 ) ;
9366: NOP4
9370: PPUSH
9371: NOP4
9375: PPUSH
9376: NOP4
// end ; end ;
9380: GO 9205
9382: POP
9383: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9384: NOP4
9388: PUSH
9389: NOP4
9393: PPUSH
9394: LD_INT 22
9396: PUSH
9397: NOP4
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 25
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PPUSH
9420: NOP4
9424: NOT
9425: PUSH
9426: FOR_IN
9427: IFFALSE 9450
// ComMoveXY ( i , repX , repY ) ;
9429: NOP4
9433: PPUSH
9434: NOP4
9438: PPUSH
9439: NOP4
9443: PPUSH
9444: NOP4
9448: GO 9426
9450: POP
9451: POP
// end ;
9452: LD_VAR 0 6
9456: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9457: LD_INT 0
9459: PPUSH
9460: PPUSH
9461: PPUSH
9462: PPUSH
9463: PPUSH
9464: PPUSH
9465: PPUSH
9466: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9467: LD_INT 22
9469: PUSH
9470: NOP4
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 21
9481: PUSH
9482: LD_INT 2
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: NOP4
9497: PUSH
9498: NOP4
9502: LESSEQUAL
9503: IFFALSE 9570
// for i = 1 to vehCount do
9505: NOP4
9509: PUSH
9510: DOUBLE
9511: LD_INT 1
9513: DEC
9514: ST_TO_ADDR
9515: NOP4
9519: PUSH
9520: FOR_TO
9521: IFFALSE 9568
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9523: NOP4
9527: PPUSH
9528: NOP4
9532: PPUSH
9533: NOP4
9537: PPUSH
9538: NOP4
9542: PPUSH
9543: NOP4
9547: PUSH
9548: LD_INT 1
9550: PPUSH
9551: NOP4
9555: PPUSH
9556: NOP4
9560: ARRAY
9561: PPUSH
9562: NOP4
9566: GO 9520
9568: POP
9569: POP
// repeat wait ( 0 0$1 ) ;
9570: LD_INT 35
9572: PPUSH
9573: NOP4
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9577: LD_INT 22
9579: PUSH
9580: NOP4
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 21
9591: PUSH
9592: LD_INT 2
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 24
9601: PUSH
9602: LD_INT 250
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: PPUSH
9614: NOP4
9618: PUSH
9619: NOP4
9623: GREATEREQUAL
9624: IFFALSE 9570
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9626: LD_INT 22
9628: PUSH
9629: NOP4
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 2
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 24
9650: PUSH
9651: LD_INT 250
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PPUSH
9663: NOP4
9667: PUSH
9668: NOP4
9672: GREATEREQUAL
9673: IFFALSE 10016
// begin repeat begin wait ( 0 0$1 ) ;
9675: LD_INT 35
9677: PPUSH
9678: NOP4
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9682: LD_INT 22
9684: PUSH
9685: NOP4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 21
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 24
9706: PUSH
9707: LD_INT 651
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: PPUSH
9719: NOP4
9723: PUSH
9724: LD_INT 0
9726: GREATER
9727: IFFALSE 9955
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9729: NOP4
9733: PUSH
9734: LD_INT 22
9736: PUSH
9737: NOP4
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 21
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 24
9758: PUSH
9759: LD_INT 651
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: PPUSH
9771: NOP4
9775: PUSH
9776: FOR_IN
9777: IFFALSE 9953
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9779: NOP4
9783: PUSH
9784: LD_INT 22
9786: PUSH
9787: NOP4
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PPUSH
9796: NOP4
9800: PPUSH
9801: NOP4
9805: PPUSH
9806: NOP4
9810: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9811: NOP4
9815: PUSH
9816: LD_INT 22
9818: PUSH
9819: NOP4
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 2
9830: PUSH
9831: LD_INT 59
9833: PUSH
9834: EMPTY
9835: LIST
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: PPUSH
9870: NOP4
9874: PPUSH
9875: NOP4
9879: PPUSH
9880: NOP4
9884: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9885: NOP4
9889: PPUSH
9890: NOP4
9894: PPUSH
9895: NOP4
9899: PUSH
9900: LD_INT 8
9902: PLUS
9903: PUSH
9904: NOP4
9908: PPUSH
9909: NOP4
9913: PPUSH
9914: NOP4
9918: LESS
9919: IFFALSE 9937
// begin ComAttackUnit ( i , target1 ) ;
9921: NOP4
9925: PPUSH
9926: NOP4
9930: PPUSH
9931: NOP4
// end else
9935: GO 9951
// begin ComAttackUnit ( i , target2 ) ;
9937: NOP4
9941: PPUSH
9942: NOP4
9946: PPUSH
9947: NOP4
// end ; end ;
9951: GO 9776
9953: POP
9954: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
9955: LD_INT 22
9957: PUSH
9958: NOP4
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 21
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PPUSH
9981: NOP4
9985: PUSH
9986: LD_INT 0
9988: EQUAL
9989: PUSH
9990: LD_INT 22
9992: PUSH
9993: NOP4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: PPUSH
10005: NOP4
10009: PUSH
10010: LD_INT 0
10012: EQUAL
10013: OR
10014: IFFALSE 9675
// end ; end ;
10016: LD_VAR 0 9
10020: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
10025: PPUSH
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
// for i = 1 to medicCount do
10034: NOP4
10038: PUSH
10039: DOUBLE
10040: LD_INT 1
10042: DEC
10043: ST_TO_ADDR
10044: NOP4
10048: PUSH
10049: FOR_TO
10050: IFFALSE 10132
// begin uc_side = side ;
10052: LD_ADDR_OWVAR 20
10056: PUSH
10057: NOP4
10061: ST_TO_ADDR
// uc_nation = nation ;
10062: LD_ADDR_OWVAR 21
10066: PUSH
10067: NOP4
10071: ST_TO_ADDR
// hc_name =  ;
10072: LD_ADDR_OWVAR 26
10076: PUSH
10077: LD_STRING 
10079: ST_TO_ADDR
// hc_gallery =  ;
10080: LD_ADDR_OWVAR 33
10084: PUSH
10085: LD_STRING 
10087: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10088: LD_INT 0
10090: PPUSH
10091: LD_INT 4
10093: PPUSH
10094: NOP4
10098: PPUSH
10099: NOP4
// un = CreateHuman ;
10103: NOP4
10107: PUSH
10108: NOP4
10112: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10113: NOP4
10117: PPUSH
10118: NOP4
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: NOP4
// end ;
10130: GO 10049
10132: POP
10133: POP
// for i = 1 to soldierCount do
10134: NOP4
10138: PUSH
10139: DOUBLE
10140: LD_INT 1
10142: DEC
10143: ST_TO_ADDR
10144: NOP4
10148: PUSH
10149: FOR_TO
10150: IFFALSE 10232
// begin uc_side = side ;
10152: LD_ADDR_OWVAR 20
10156: PUSH
10157: NOP4
10161: ST_TO_ADDR
// uc_nation = nation ;
10162: LD_ADDR_OWVAR 21
10166: PUSH
10167: NOP4
10171: ST_TO_ADDR
// hc_name =  ;
10172: LD_ADDR_OWVAR 26
10176: PUSH
10177: LD_STRING 
10179: ST_TO_ADDR
// hc_gallery =  ;
10180: LD_ADDR_OWVAR 33
10184: PUSH
10185: LD_STRING 
10187: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10188: LD_INT 0
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: NOP4
10198: PPUSH
10199: NOP4
// un = CreateHuman ;
10203: NOP4
10207: PUSH
10208: NOP4
10212: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10213: NOP4
10217: PPUSH
10218: NOP4
10222: PPUSH
10223: LD_INT 0
10225: PPUSH
10226: NOP4
// end ;
10230: GO 10149
10232: POP
10233: POP
// for i = 1 to sniperCount do
10234: NOP4
10238: PUSH
10239: DOUBLE
10240: LD_INT 1
10242: DEC
10243: ST_TO_ADDR
10244: NOP4
10248: PUSH
10249: FOR_TO
10250: IFFALSE 10332
// begin uc_side = side ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: NOP4
10261: ST_TO_ADDR
// uc_nation = nation ;
10262: LD_ADDR_OWVAR 21
10266: PUSH
10267: NOP4
10271: ST_TO_ADDR
// hc_name =  ;
10272: LD_ADDR_OWVAR 26
10276: PUSH
10277: LD_STRING 
10279: ST_TO_ADDR
// hc_gallery =  ;
10280: LD_ADDR_OWVAR 33
10284: PUSH
10285: LD_STRING 
10287: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10288: LD_INT 0
10290: PPUSH
10291: LD_INT 5
10293: PPUSH
10294: NOP4
10298: PPUSH
10299: NOP4
// un = CreateHuman ;
10303: NOP4
10307: PUSH
10308: NOP4
10312: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10313: NOP4
10317: PPUSH
10318: NOP4
10322: PPUSH
10323: LD_INT 0
10325: PPUSH
10326: NOP4
// end ;
10330: GO 10249
10332: POP
10333: POP
// for i = 1 to bazookCount do
10334: NOP4
10338: PUSH
10339: DOUBLE
10340: LD_INT 1
10342: DEC
10343: ST_TO_ADDR
10344: NOP4
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10432
// begin uc_side = side ;
10352: LD_ADDR_OWVAR 20
10356: PUSH
10357: NOP4
10361: ST_TO_ADDR
// uc_nation = nation ;
10362: LD_ADDR_OWVAR 21
10366: PUSH
10367: NOP4
10371: ST_TO_ADDR
// hc_name =  ;
10372: LD_ADDR_OWVAR 26
10376: PUSH
10377: LD_STRING 
10379: ST_TO_ADDR
// hc_gallery =  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10388: LD_INT 0
10390: PPUSH
10391: LD_INT 9
10393: PPUSH
10394: NOP4
10398: PPUSH
10399: NOP4
// un = CreateHuman ;
10403: NOP4
10407: PUSH
10408: NOP4
10412: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10413: NOP4
10417: PPUSH
10418: NOP4
10422: PPUSH
10423: LD_INT 0
10425: PPUSH
10426: NOP4
// end ;
10430: GO 10349
10432: POP
10433: POP
// for i = 1 to mortalCount do
10434: NOP4
10438: PUSH
10439: DOUBLE
10440: LD_INT 1
10442: DEC
10443: ST_TO_ADDR
10444: NOP4
10448: PUSH
10449: FOR_TO
10450: IFFALSE 10532
// begin uc_side = side ;
10452: LD_ADDR_OWVAR 20
10456: PUSH
10457: NOP4
10461: ST_TO_ADDR
// uc_nation = nation ;
10462: LD_ADDR_OWVAR 21
10466: PUSH
10467: NOP4
10471: ST_TO_ADDR
// hc_name =  ;
10472: LD_ADDR_OWVAR 26
10476: PUSH
10477: LD_STRING 
10479: ST_TO_ADDR
// hc_gallery =  ;
10480: LD_ADDR_OWVAR 33
10484: PUSH
10485: LD_STRING 
10487: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10488: LD_INT 0
10490: PPUSH
10491: LD_INT 8
10493: PPUSH
10494: NOP4
10498: PPUSH
10499: NOP4
// un = CreateHuman ;
10503: NOP4
10507: PUSH
10508: NOP4
10512: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10513: NOP4
10517: PPUSH
10518: NOP4
10522: PPUSH
10523: LD_INT 0
10525: PPUSH
10526: NOP4
// end ;
10530: GO 10449
10532: POP
10533: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10534: NOP4
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: NOP4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 1
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 25
10566: PUSH
10567: LD_INT 5
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 25
10576: PUSH
10577: LD_INT 8
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 9
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: NOP4
10609: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10610: NOP4
10614: PUSH
10615: LD_INT 22
10617: PUSH
10618: NOP4
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 25
10629: PUSH
10630: LD_INT 4
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PPUSH
10641: NOP4
10645: ST_TO_ADDR
// for i in medic_list do
10646: NOP4
10650: PUSH
10651: NOP4
10655: PUSH
10656: FOR_IN
10657: IFFALSE 10675
// ComMoveToArea ( i , healArea ) ;
10659: NOP4
10663: PPUSH
10664: NOP4
10668: PPUSH
10669: NOP4
10673: GO 10656
10675: POP
10676: POP
// if strategy = 1 then
10677: NOP4
10681: PUSH
10682: LD_INT 1
10684: EQUAL
10685: IFFALSE 11231
// begin repeat wait ( 0 0$3 ) ;
10687: LD_INT 105
10689: PPUSH
10690: NOP4
// for i in soldiersOK_list do
10694: NOP4
10698: PUSH
10699: NOP4
10703: PUSH
10704: FOR_IN
10705: IFFALSE 10769
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10707: NOP4
10711: PPUSH
10712: LD_INT 91
10714: PPUSH
10715: LD_INT 63
10717: PPUSH
10718: NOP4
// AddComAgressiveMove ( i , 101 , 53 ) ;
10722: NOP4
10726: PPUSH
10727: LD_INT 101
10729: PPUSH
10730: LD_INT 53
10732: PPUSH
10733: NOP4
// AddComAgressiveMove ( i , 75 , 23 ) ;
10737: NOP4
10741: PPUSH
10742: LD_INT 75
10744: PPUSH
10745: LD_INT 23
10747: PPUSH
10748: NOP4
// AddComAgressiveMove ( i , 78 , 8 ) ;
10752: NOP4
10756: PPUSH
10757: LD_INT 78
10759: PPUSH
10760: LD_INT 8
10762: PPUSH
10763: NOP4
// end ;
10767: GO 10704
10769: POP
10770: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10771: LD_INT 12
10773: PPUSH
10774: LD_INT 22
10776: PUSH
10777: NOP4
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PPUSH
10786: NOP4
10790: PUSH
10791: LD_INT 2
10793: GREATER
10794: IFFALSE 10687
// repeat wait ( 0 0$1 ) ;
10796: LD_INT 35
10798: PPUSH
10799: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10803: NOP4
10807: PUSH
10808: LD_INT 22
10810: PUSH
10811: NOP4
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 1
10822: PUSH
10823: LD_INT 3
10825: PUSH
10826: LD_INT 24
10828: PUSH
10829: LD_INT 550
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 24
10842: PUSH
10843: LD_INT 250
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PPUSH
10859: NOP4
10863: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10864: NOP4
10868: PUSH
10869: LD_INT 22
10871: PUSH
10872: NOP4
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: LD_INT 25
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 25
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 25
10906: PUSH
10907: LD_INT 8
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 25
10916: PUSH
10917: LD_INT 9
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 24
10933: PUSH
10934: LD_INT 1000
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: PPUSH
10946: NOP4
10950: ST_TO_ADDR
// if medicCount > 0 then
10951: NOP4
10955: PUSH
10956: LD_INT 0
10958: GREATER
10959: IFFALSE 11033
// begin if damageUnit_list > 0 then
10961: NOP4
10965: PUSH
10966: LD_INT 0
10968: GREATER
10969: IFFALSE 11033
// begin for i in damageUnit_list do
10971: NOP4
10975: PUSH
10976: NOP4
10980: PUSH
10981: FOR_IN
10982: IFFALSE 11031
// begin ComMoveToArea ( i , healArea ) ;
10984: NOP4
10988: PPUSH
10989: NOP4
10993: PPUSH
10994: NOP4
// for j in medic_list do
10998: NOP4
11002: PUSH
11003: NOP4
11007: PUSH
11008: FOR_IN
11009: IFFALSE 11027
// AddComHeal ( j , i ) ;
11011: NOP4
11015: PPUSH
11016: NOP4
11020: PPUSH
11021: NOP4
11025: GO 11008
11027: POP
11028: POP
// end ;
11029: GO 10981
11031: POP
11032: POP
// end ; end ; for i in soldiersOK_list do
11033: NOP4
11037: PUSH
11038: NOP4
11042: PUSH
11043: FOR_IN
11044: IFFALSE 11220
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11046: NOP4
11050: PUSH
11051: LD_INT 22
11053: PUSH
11054: NOP4
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PPUSH
11063: NOP4
11067: PPUSH
11068: NOP4
11072: PPUSH
11073: NOP4
11077: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11078: NOP4
11082: PUSH
11083: LD_INT 22
11085: PUSH
11086: NOP4
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 2
11097: PUSH
11098: LD_INT 59
11100: PUSH
11101: EMPTY
11102: LIST
11103: PUSH
11104: LD_INT 21
11106: PUSH
11107: LD_INT 1
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 21
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: PPUSH
11137: NOP4
11141: PPUSH
11142: NOP4
11146: PPUSH
11147: NOP4
11151: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11152: NOP4
11156: PPUSH
11157: NOP4
11161: PPUSH
11162: NOP4
11166: PUSH
11167: LD_INT 6
11169: PLUS
11170: PUSH
11171: NOP4
11175: PPUSH
11176: NOP4
11180: PPUSH
11181: NOP4
11185: LESS
11186: IFFALSE 11204
// begin ComAttackUnit ( i , target1 ) ;
11188: NOP4
11192: PPUSH
11193: NOP4
11197: PPUSH
11198: NOP4
// end else
11202: GO 11218
// begin ComAttackUnit ( i , target2 ) ;
11204: NOP4
11208: PPUSH
11209: NOP4
11213: PPUSH
11214: NOP4
// end ; end ;
11218: GO 11043
11220: POP
11221: POP
// until soldiersOK_list = [ ] ;
11222: NOP4
11226: PUSH
11227: EMPTY
11228: EQUAL
11229: IFFALSE 10796
// end ; if strategy = 2 then
11231: NOP4
11235: PUSH
11236: LD_INT 2
11238: EQUAL
11239: IFFALSE 11755
// begin repeat wait ( 0 0$1 ) ;
11241: LD_INT 35
11243: PPUSH
11244: NOP4
// for i in soldiersOK_list do
11248: NOP4
11252: PUSH
11253: NOP4
11257: PUSH
11258: FOR_IN
11259: IFFALSE 11293
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11261: NOP4
11265: PPUSH
11266: LD_INT 91
11268: PPUSH
11269: LD_INT 63
11271: PPUSH
11272: NOP4
// AddComAgressiveMove ( i , 75 , 33 ) ;
11276: NOP4
11280: PPUSH
11281: LD_INT 75
11283: PPUSH
11284: LD_INT 33
11286: PPUSH
11287: NOP4
// end ;
11291: GO 11258
11293: POP
11294: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11295: LD_INT 13
11297: PPUSH
11298: LD_INT 22
11300: PUSH
11301: NOP4
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PPUSH
11310: NOP4
11314: PUSH
11315: LD_INT 2
11317: GREATER
11318: IFFALSE 11241
// repeat wait ( 0 0$3 ) ;
11320: LD_INT 105
11322: PPUSH
11323: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11327: NOP4
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: NOP4
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: LD_INT 3
11349: PUSH
11350: LD_INT 24
11352: PUSH
11353: LD_INT 550
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 24
11366: PUSH
11367: LD_INT 250
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PPUSH
11383: NOP4
11387: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11388: NOP4
11392: PUSH
11393: LD_INT 22
11395: PUSH
11396: NOP4
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: LD_INT 25
11410: PUSH
11411: LD_INT 1
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 25
11420: PUSH
11421: LD_INT 5
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: LD_INT 25
11430: PUSH
11431: LD_INT 8
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 25
11440: PUSH
11441: LD_INT 9
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 24
11457: PUSH
11458: LD_INT 1000
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: PPUSH
11470: NOP4
11474: ST_TO_ADDR
// if medicCount > 0 then
11475: NOP4
11479: PUSH
11480: LD_INT 0
11482: GREATER
11483: IFFALSE 11557
// begin if damageUnit_list > 0 then
11485: NOP4
11489: PUSH
11490: LD_INT 0
11492: GREATER
11493: IFFALSE 11557
// begin for i in damageUnit_list do
11495: NOP4
11499: PUSH
11500: NOP4
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11555
// begin ComMoveToArea ( i , healArea ) ;
11508: NOP4
11512: PPUSH
11513: NOP4
11517: PPUSH
11518: NOP4
// for j in medic_list do
11522: NOP4
11526: PUSH
11527: NOP4
11531: PUSH
11532: FOR_IN
11533: IFFALSE 11551
// AddComHeal ( j , i ) ;
11535: NOP4
11539: PPUSH
11540: NOP4
11544: PPUSH
11545: NOP4
11549: GO 11532
11551: POP
11552: POP
// end ;
11553: GO 11505
11555: POP
11556: POP
// end ; end ; for i in soldiersOK_list do
11557: NOP4
11561: PUSH
11562: NOP4
11566: PUSH
11567: FOR_IN
11568: IFFALSE 11744
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11570: NOP4
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: NOP4
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: NOP4
11591: PPUSH
11592: NOP4
11596: PPUSH
11597: NOP4
11601: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11602: NOP4
11606: PUSH
11607: LD_INT 22
11609: PUSH
11610: NOP4
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: LD_INT 59
11624: PUSH
11625: EMPTY
11626: LIST
11627: PUSH
11628: LD_INT 21
11630: PUSH
11631: LD_INT 1
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 21
11640: PUSH
11641: LD_INT 2
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: PPUSH
11661: NOP4
11665: PPUSH
11666: NOP4
11670: PPUSH
11671: NOP4
11675: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11676: NOP4
11680: PPUSH
11681: NOP4
11685: PPUSH
11686: NOP4
11690: PUSH
11691: LD_INT 6
11693: PLUS
11694: PUSH
11695: NOP4
11699: PPUSH
11700: NOP4
11704: PPUSH
11705: NOP4
11709: LESS
11710: IFFALSE 11728
// begin ComAttackUnit ( i , target1 ) ;
11712: NOP4
11716: PPUSH
11717: NOP4
11721: PPUSH
11722: NOP4
// end else
11726: GO 11742
// begin ComAttackUnit ( i , target2 ) ;
11728: NOP4
11732: PPUSH
11733: NOP4
11737: PPUSH
11738: NOP4
// end ; end ;
11742: GO 11567
11744: POP
11745: POP
// until soldiersOK_list = [ ] ;
11746: NOP4
11750: PUSH
11751: EMPTY
11752: EQUAL
11753: IFFALSE 11320
// end ; if strategy = 3 then
11755: NOP4
11759: PUSH
11760: LD_INT 3
11762: EQUAL
11763: IFFALSE 12309
// begin repeat wait ( 0 0$3 ) ;
11765: LD_INT 105
11767: PPUSH
11768: NOP4
// for i in soldiersOK_list do
11772: NOP4
11776: PUSH
11777: NOP4
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11847
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11785: NOP4
11789: PPUSH
11790: LD_INT 63
11792: PPUSH
11793: LD_INT 71
11795: PPUSH
11796: NOP4
// AddComAgressiveMove ( i , 35 , 44 ) ;
11800: NOP4
11804: PPUSH
11805: LD_INT 35
11807: PPUSH
11808: LD_INT 44
11810: PPUSH
11811: NOP4
// AddComAgressiveMove ( i , 23 , 18 ) ;
11815: NOP4
11819: PPUSH
11820: LD_INT 23
11822: PPUSH
11823: LD_INT 18
11825: PPUSH
11826: NOP4
// AddComAgressiveMove ( i , 26 , 12 ) ;
11830: NOP4
11834: PPUSH
11835: LD_INT 26
11837: PPUSH
11838: LD_INT 12
11840: PPUSH
11841: NOP4
// end ;
11845: GO 11782
11847: POP
11848: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11849: LD_INT 14
11851: PPUSH
11852: LD_INT 22
11854: PUSH
11855: NOP4
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PPUSH
11864: NOP4
11868: PUSH
11869: LD_INT 2
11871: GREATER
11872: IFFALSE 11765
// repeat wait ( 0 0$1 ) ;
11874: LD_INT 35
11876: PPUSH
11877: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11881: NOP4
11885: PUSH
11886: LD_INT 22
11888: PUSH
11889: NOP4
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 1
11900: PUSH
11901: LD_INT 3
11903: PUSH
11904: LD_INT 24
11906: PUSH
11907: LD_INT 550
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 24
11920: PUSH
11921: LD_INT 250
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PPUSH
11937: NOP4
11941: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11942: NOP4
11946: PUSH
11947: LD_INT 22
11949: PUSH
11950: NOP4
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 2
11961: PUSH
11962: LD_INT 25
11964: PUSH
11965: LD_INT 1
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 5
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 25
11984: PUSH
11985: LD_INT 8
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 9
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 24
12011: PUSH
12012: LD_INT 1000
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: NOP4
12028: ST_TO_ADDR
// if medicCount > 0 then
12029: NOP4
12033: PUSH
12034: LD_INT 0
12036: GREATER
12037: IFFALSE 12111
// begin if damageUnit_list > 0 then
12039: NOP4
12043: PUSH
12044: LD_INT 0
12046: GREATER
12047: IFFALSE 12111
// begin for i in damageUnit_list do
12049: NOP4
12053: PUSH
12054: NOP4
12058: PUSH
12059: FOR_IN
12060: IFFALSE 12109
// begin ComMoveToArea ( i , healArea ) ;
12062: NOP4
12066: PPUSH
12067: NOP4
12071: PPUSH
12072: NOP4
// for j in medic_list do
12076: NOP4
12080: PUSH
12081: NOP4
12085: PUSH
12086: FOR_IN
12087: IFFALSE 12105
// AddComHeal ( j , i ) ;
12089: NOP4
12093: PPUSH
12094: NOP4
12098: PPUSH
12099: NOP4
12103: GO 12086
12105: POP
12106: POP
// end ;
12107: GO 12059
12109: POP
12110: POP
// end ; end ; for i in soldiersOK_list do
12111: NOP4
12115: PUSH
12116: NOP4
12120: PUSH
12121: FOR_IN
12122: IFFALSE 12298
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12124: NOP4
12128: PUSH
12129: LD_INT 22
12131: PUSH
12132: NOP4
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: NOP4
12145: PPUSH
12146: NOP4
12150: PPUSH
12151: NOP4
12155: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12156: NOP4
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: NOP4
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 59
12178: PUSH
12179: EMPTY
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 1
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 21
12194: PUSH
12195: LD_INT 2
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: PPUSH
12215: NOP4
12219: PPUSH
12220: NOP4
12224: PPUSH
12225: NOP4
12229: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12230: NOP4
12234: PPUSH
12235: NOP4
12239: PPUSH
12240: NOP4
12244: PUSH
12245: LD_INT 6
12247: PLUS
12248: PUSH
12249: NOP4
12253: PPUSH
12254: NOP4
12258: PPUSH
12259: NOP4
12263: LESS
12264: IFFALSE 12282
// begin ComAttackUnit ( i , target1 ) ;
12266: NOP4
12270: PPUSH
12271: NOP4
12275: PPUSH
12276: NOP4
// end else
12280: GO 12296
// begin ComAttackUnit ( i , target2 ) ;
12282: NOP4
12286: PPUSH
12287: NOP4
12291: PPUSH
12292: NOP4
// end ; end ;
12296: GO 12121
12298: POP
12299: POP
// until soldiersOK_list = [ ] ;
12300: NOP4
12304: PUSH
12305: EMPTY
12306: EQUAL
12307: IFFALSE 11874
// end ; end ;
12309: LD_VAR 0 13
12313: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12314: LD_INT 0
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
// amChassisTab = [ ] ;
12327: NOP4
12331: PUSH
12332: EMPTY
12333: ST_TO_ADDR
// arChassisTab = [ ] ;
12334: NOP4
12338: PUSH
12339: EMPTY
12340: ST_TO_ADDR
// ruChassisTab = [ ] ;
12341: NOP4
12345: PUSH
12346: EMPTY
12347: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12348: LD_INT 35
12350: PPUSH
12351: NOP4
// if nation = 1 then
12355: NOP4
12359: PUSH
12360: LD_INT 1
12362: EQUAL
12363: IFFALSE 12854
// begin uc_side = side ;
12365: LD_ADDR_OWVAR 20
12369: PUSH
12370: NOP4
12374: ST_TO_ADDR
// uc_nation = nation ;
12375: LD_ADDR_OWVAR 21
12379: PUSH
12380: NOP4
12384: ST_TO_ADDR
// vc_engine = vehengine ;
12385: LD_ADDR_OWVAR 39
12389: PUSH
12390: NOP4
12394: ST_TO_ADDR
// vc_control = vehcontrol ;
12395: LD_ADDR_OWVAR 38
12399: PUSH
12400: NOP4
12404: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12405: LD_ADDR_OWVAR 40
12409: PUSH
12410: NOP4
12414: PUSH
12415: LD_INT 1
12417: PPUSH
12418: NOP4
12422: PPUSH
12423: NOP4
12427: ARRAY
12428: ST_TO_ADDR
// for j = 1 to AMWeapon do
12429: NOP4
12433: PUSH
12434: DOUBLE
12435: LD_INT 1
12437: DEC
12438: ST_TO_ADDR
12439: NOP4
12443: PUSH
12444: FOR_TO
12445: IFFALSE 12746
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12447: NOP4
12451: PUSH
12452: NOP4
12456: ARRAY
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: PUSH
12462: NOP4
12466: PUSH
12467: NOP4
12471: ARRAY
12472: PUSH
12473: LD_INT 3
12475: EQUAL
12476: OR
12477: IFFALSE 12530
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12479: NOP4
12483: PUSH
12484: LD_INT 1
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: LD_INT 3
12492: PUSH
12493: LD_INT 4
12495: PUSH
12496: LD_INT 5
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12506: LD_ADDR_OWVAR 37
12510: PUSH
12511: NOP4
12515: PUSH
12516: LD_INT 1
12518: PPUSH
12519: NOP4
12523: PPUSH
12524: NOP4
12528: ARRAY
12529: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12530: NOP4
12534: PUSH
12535: NOP4
12539: ARRAY
12540: PUSH
12541: LD_INT 4
12543: EQUAL
12544: PUSH
12545: NOP4
12549: PUSH
12550: NOP4
12554: ARRAY
12555: PUSH
12556: LD_INT 5
12558: EQUAL
12559: OR
12560: PUSH
12561: NOP4
12565: PUSH
12566: NOP4
12570: ARRAY
12571: PUSH
12572: LD_INT 9
12574: EQUAL
12575: OR
12576: PUSH
12577: NOP4
12581: PUSH
12582: NOP4
12586: ARRAY
12587: PUSH
12588: LD_INT 11
12590: EQUAL
12591: OR
12592: PUSH
12593: NOP4
12597: PUSH
12598: NOP4
12602: ARRAY
12603: PUSH
12604: LD_INT 7
12606: EQUAL
12607: OR
12608: IFFALSE 12657
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12610: NOP4
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: LD_INT 4
12623: PUSH
12624: LD_INT 5
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12633: LD_ADDR_OWVAR 37
12637: PUSH
12638: NOP4
12642: PUSH
12643: LD_INT 1
12645: PPUSH
12646: NOP4
12650: PPUSH
12651: NOP4
12655: ARRAY
12656: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12657: NOP4
12661: PUSH
12662: NOP4
12666: ARRAY
12667: PUSH
12668: LD_INT 8
12670: EQUAL
12671: PUSH
12672: NOP4
12676: PUSH
12677: NOP4
12681: ARRAY
12682: PUSH
12683: LD_INT 6
12685: EQUAL
12686: OR
12687: PUSH
12688: NOP4
12692: PUSH
12693: NOP4
12697: ARRAY
12698: PUSH
12699: LD_INT 10
12701: EQUAL
12702: OR
12703: IFFALSE 12744
// begin amChassisTab = [ 4 , 5 ] ;
12705: NOP4
12709: PUSH
12710: LD_INT 4
12712: PUSH
12713: LD_INT 5
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12720: LD_ADDR_OWVAR 37
12724: PUSH
12725: NOP4
12729: PUSH
12730: LD_INT 1
12732: PPUSH
12733: NOP4
12737: PPUSH
12738: NOP4
12742: ARRAY
12743: ST_TO_ADDR
// end ; end ;
12744: GO 12444
12746: POP
12747: POP
// veh = CreateVehicle ;
12748: NOP4
12752: PUSH
12753: NOP4
12757: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12758: NOP4
12762: PPUSH
12763: NOP4
12767: PPUSH
12768: LD_INT 0
12770: PPUSH
12771: NOP4
// if vehControl = 1 then
12775: NOP4
12779: PUSH
12780: LD_INT 1
12782: EQUAL
12783: IFFALSE 12840
// begin hc_gallery =  ;
12785: LD_ADDR_OWVAR 33
12789: PUSH
12790: LD_STRING 
12792: ST_TO_ADDR
// hc_name =  ;
12793: LD_ADDR_OWVAR 26
12797: PUSH
12798: LD_STRING 
12800: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12801: LD_INT 0
12803: PPUSH
12804: LD_INT 3
12806: PPUSH
12807: NOP4
12811: PPUSH
12812: NOP4
// un = CreateHuman ;
12816: NOP4
12820: PUSH
12821: NOP4
12825: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12826: NOP4
12830: PPUSH
12831: NOP4
12835: PPUSH
12836: NOP4
// end ; i = i + 1 ;
12840: NOP4
12844: PUSH
12845: NOP4
12849: PUSH
12850: LD_INT 1
12852: PLUS
12853: ST_TO_ADDR
// end ; if nation = 2 then
12854: NOP4
12858: PUSH
12859: LD_INT 2
12861: EQUAL
12862: IFFALSE 13286
// begin uc_side = side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: NOP4
12873: ST_TO_ADDR
// uc_nation = nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: NOP4
12883: ST_TO_ADDR
// vc_engine = vehengine ;
12884: LD_ADDR_OWVAR 39
12888: PUSH
12889: NOP4
12893: ST_TO_ADDR
// vc_control = vehcontrol ;
12894: LD_ADDR_OWVAR 38
12898: PUSH
12899: NOP4
12903: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12904: LD_ADDR_OWVAR 40
12908: PUSH
12909: NOP4
12913: PUSH
12914: LD_INT 1
12916: PPUSH
12917: NOP4
12921: PPUSH
12922: NOP4
12926: ARRAY
12927: ST_TO_ADDR
// for j = 1 to ARWeapons do
12928: NOP4
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: NOP4
12942: PUSH
12943: FOR_TO
12944: IFFALSE 13178
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12946: NOP4
12950: PUSH
12951: NOP4
12955: ARRAY
12956: PUSH
12957: LD_INT 24
12959: EQUAL
12960: PUSH
12961: NOP4
12965: PUSH
12966: NOP4
12970: ARRAY
12971: PUSH
12972: LD_INT 22
12974: EQUAL
12975: OR
12976: PUSH
12977: NOP4
12981: PUSH
12982: NOP4
12986: ARRAY
12987: PUSH
12988: LD_INT 23
12990: EQUAL
12991: OR
12992: PUSH
12993: NOP4
12997: PUSH
12998: NOP4
13002: ARRAY
13003: PUSH
13004: LD_INT 30
13006: EQUAL
13007: OR
13008: IFFALSE 13057
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13010: NOP4
13014: PUSH
13015: LD_INT 11
13017: PUSH
13018: LD_INT 12
13020: PUSH
13021: LD_INT 13
13023: PUSH
13024: LD_INT 14
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13033: LD_ADDR_OWVAR 37
13037: PUSH
13038: NOP4
13042: PUSH
13043: LD_INT 1
13045: PPUSH
13046: NOP4
13050: PPUSH
13051: NOP4
13055: ARRAY
13056: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13057: NOP4
13061: PUSH
13062: NOP4
13066: ARRAY
13067: PUSH
13068: LD_INT 29
13070: EQUAL
13071: PUSH
13072: NOP4
13076: PUSH
13077: NOP4
13081: ARRAY
13082: PUSH
13083: LD_INT 28
13085: EQUAL
13086: OR
13087: PUSH
13088: NOP4
13092: PUSH
13093: NOP4
13097: ARRAY
13098: PUSH
13099: LD_INT 27
13101: EQUAL
13102: OR
13103: PUSH
13104: NOP4
13108: PUSH
13109: NOP4
13113: ARRAY
13114: PUSH
13115: LD_INT 26
13117: EQUAL
13118: OR
13119: PUSH
13120: NOP4
13124: PUSH
13125: NOP4
13129: ARRAY
13130: PUSH
13131: LD_INT 25
13133: EQUAL
13134: OR
13135: IFFALSE 13176
// begin arChassisTab = [ 13 , 14 ] ;
13137: NOP4
13141: PUSH
13142: LD_INT 13
13144: PUSH
13145: LD_INT 14
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13152: LD_ADDR_OWVAR 37
13156: PUSH
13157: NOP4
13161: PUSH
13162: LD_INT 1
13164: PPUSH
13165: NOP4
13169: PPUSH
13170: NOP4
13174: ARRAY
13175: ST_TO_ADDR
// end ; end ;
13176: GO 12943
13178: POP
13179: POP
// veh = CreateVehicle ;
13180: NOP4
13184: PUSH
13185: NOP4
13189: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13190: NOP4
13194: PPUSH
13195: NOP4
13199: PPUSH
13200: LD_INT 0
13202: PPUSH
13203: NOP4
// if vehcontrol = 1 then
13207: NOP4
13211: PUSH
13212: LD_INT 1
13214: EQUAL
13215: IFFALSE 13272
// begin hc_gallery =  ;
13217: LD_ADDR_OWVAR 33
13221: PUSH
13222: LD_STRING 
13224: ST_TO_ADDR
// hc_name =  ;
13225: LD_ADDR_OWVAR 26
13229: PUSH
13230: LD_STRING 
13232: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13233: LD_INT 0
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: NOP4
13243: PPUSH
13244: NOP4
// un = CreateHuman ;
13248: NOP4
13252: PUSH
13253: NOP4
13257: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13258: NOP4
13262: PPUSH
13263: NOP4
13267: PPUSH
13268: NOP4
// end ; i = i + 1 ;
13272: NOP4
13276: PUSH
13277: NOP4
13281: PUSH
13282: LD_INT 1
13284: PLUS
13285: ST_TO_ADDR
// end ; if nation = 3 then
13286: NOP4
13290: PUSH
13291: LD_INT 3
13293: EQUAL
13294: IFFALSE 13686
// begin uc_side = side ;
13296: LD_ADDR_OWVAR 20
13300: PUSH
13301: NOP4
13305: ST_TO_ADDR
// uc_nation = nation ;
13306: LD_ADDR_OWVAR 21
13310: PUSH
13311: NOP4
13315: ST_TO_ADDR
// vc_engine = vehengine ;
13316: LD_ADDR_OWVAR 39
13320: PUSH
13321: NOP4
13325: ST_TO_ADDR
// vc_control = vehcontrol ;
13326: LD_ADDR_OWVAR 38
13330: PUSH
13331: NOP4
13335: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13336: LD_ADDR_OWVAR 40
13340: PUSH
13341: NOP4
13345: PUSH
13346: LD_INT 1
13348: PPUSH
13349: NOP4
13353: PPUSH
13354: NOP4
13358: ARRAY
13359: ST_TO_ADDR
// for j = 1 to RuWeapons do
13360: NOP4
13364: PUSH
13365: DOUBLE
13366: LD_INT 1
13368: DEC
13369: ST_TO_ADDR
13370: NOP4
13374: PUSH
13375: FOR_TO
13376: IFFALSE 13578
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13378: NOP4
13382: PUSH
13383: NOP4
13387: ARRAY
13388: PUSH
13389: LD_INT 42
13391: EQUAL
13392: PUSH
13393: NOP4
13397: PUSH
13398: NOP4
13402: ARRAY
13403: PUSH
13404: LD_INT 43
13406: EQUAL
13407: OR
13408: PUSH
13409: NOP4
13413: PUSH
13414: NOP4
13418: ARRAY
13419: PUSH
13420: LD_INT 44
13422: EQUAL
13423: OR
13424: PUSH
13425: NOP4
13429: PUSH
13430: NOP4
13434: ARRAY
13435: PUSH
13436: LD_INT 45
13438: EQUAL
13439: OR
13440: PUSH
13441: NOP4
13445: PUSH
13446: NOP4
13450: ARRAY
13451: PUSH
13452: LD_INT 49
13454: EQUAL
13455: OR
13456: IFFALSE 13505
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13458: NOP4
13462: PUSH
13463: LD_INT 21
13465: PUSH
13466: LD_INT 22
13468: PUSH
13469: LD_INT 23
13471: PUSH
13472: LD_INT 24
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13481: LD_ADDR_OWVAR 37
13485: PUSH
13486: NOP4
13490: PUSH
13491: LD_INT 1
13493: PPUSH
13494: NOP4
13498: PPUSH
13499: NOP4
13503: ARRAY
13504: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13505: NOP4
13509: PUSH
13510: NOP4
13514: ARRAY
13515: PUSH
13516: LD_INT 46
13518: EQUAL
13519: PUSH
13520: NOP4
13524: PUSH
13525: NOP4
13529: ARRAY
13530: PUSH
13531: LD_INT 47
13533: EQUAL
13534: OR
13535: IFFALSE 13576
// begin ruChassisTab = [ 23 , 24 ] ;
13537: NOP4
13541: PUSH
13542: LD_INT 23
13544: PUSH
13545: LD_INT 24
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13552: LD_ADDR_OWVAR 37
13556: PUSH
13557: NOP4
13561: PUSH
13562: LD_INT 1
13564: PPUSH
13565: NOP4
13569: PPUSH
13570: NOP4
13574: ARRAY
13575: ST_TO_ADDR
// end ; end ;
13576: GO 13375
13578: POP
13579: POP
// veh = CreateVehicle ;
13580: NOP4
13584: PUSH
13585: NOP4
13589: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13590: NOP4
13594: PPUSH
13595: NOP4
13599: PPUSH
13600: LD_INT 0
13602: PPUSH
13603: NOP4
// if vehcontrol = 1 then
13607: NOP4
13611: PUSH
13612: LD_INT 1
13614: EQUAL
13615: IFFALSE 13672
// begin hc_gallery =  ;
13617: LD_ADDR_OWVAR 33
13621: PUSH
13622: LD_STRING 
13624: ST_TO_ADDR
// hc_name =  ;
13625: LD_ADDR_OWVAR 26
13629: PUSH
13630: LD_STRING 
13632: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13633: LD_INT 0
13635: PPUSH
13636: LD_INT 3
13638: PPUSH
13639: NOP4
13643: PPUSH
13644: NOP4
// un = CreateHuman ;
13648: NOP4
13652: PUSH
13653: NOP4
13657: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13658: NOP4
13662: PPUSH
13663: NOP4
13667: PPUSH
13668: NOP4
// end ; i = i + 1 ;
13672: NOP4
13676: PUSH
13677: NOP4
13681: PUSH
13682: LD_INT 1
13684: PLUS
13685: ST_TO_ADDR
// end ; until i = vehCount ;
13686: NOP4
13690: PUSH
13691: NOP4
13695: EQUAL
13696: IFFALSE 12348
// repeat wait ( 0 0$1 ) ;
13698: LD_INT 35
13700: PPUSH
13701: NOP4
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13705: NOP4
13709: PUSH
13710: LD_INT 22
13712: PUSH
13713: NOP4
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 21
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 24
13734: PUSH
13735: LD_INT 661
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: PPUSH
13747: NOP4
13751: ST_TO_ADDR
// if vehicleOK_list > 0 then
13752: NOP4
13756: PUSH
13757: LD_INT 0
13759: GREATER
13760: IFFALSE 13951
// begin for i in vehicleOK_list do
13762: NOP4
13766: PUSH
13767: NOP4
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13949
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13775: NOP4
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: NOP4
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: NOP4
13796: PPUSH
13797: NOP4
13801: PPUSH
13802: NOP4
13806: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13807: NOP4
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: NOP4
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: LD_INT 59
13829: PUSH
13830: EMPTY
13831: LIST
13832: PUSH
13833: LD_INT 21
13835: PUSH
13836: LD_INT 1
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 21
13845: PUSH
13846: LD_INT 2
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: PPUSH
13866: NOP4
13870: PPUSH
13871: NOP4
13875: PPUSH
13876: NOP4
13880: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13881: NOP4
13885: PPUSH
13886: NOP4
13890: PPUSH
13891: NOP4
13895: PUSH
13896: LD_INT 6
13898: PLUS
13899: PUSH
13900: NOP4
13904: PPUSH
13905: NOP4
13909: PPUSH
13910: NOP4
13914: LESS
13915: IFFALSE 13933
// begin ComAttackUnit ( i , target1 ) ;
13917: NOP4
13921: PPUSH
13922: NOP4
13926: PPUSH
13927: NOP4
// end else
13931: GO 13947
// begin ComAttackUnit ( i , target2 ) ;
13933: NOP4
13937: PPUSH
13938: NOP4
13942: PPUSH
13943: NOP4
// end ; end ;
13947: GO 13772
13949: POP
13950: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
13951: LD_INT 22
13953: PUSH
13954: NOP4
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 21
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 24
13975: PUSH
13976: LD_INT 250
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: PPUSH
13988: NOP4
13992: PUSH
13993: LD_INT 0
13995: EQUAL
13996: IFFALSE 13698
// end ;
13998: LD_VAR 0 12
14002: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14003: LD_INT 0
14005: PPUSH
14006: PPUSH
14007: PPUSH
14008: PPUSH
14009: PPUSH
14010: PPUSH
14011: PPUSH
14012: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14013: NOP4
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: NOP4
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 1
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: LD_INT 24
14038: PUSH
14039: LD_INT 550
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 24
14052: PUSH
14053: LD_INT 250
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PPUSH
14069: NOP4
14073: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14074: NOP4
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: NOP4
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 2
14093: PUSH
14094: LD_INT 25
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 25
14106: PUSH
14107: LD_INT 5
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 25
14116: PUSH
14117: LD_INT 8
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 9
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 24
14143: PUSH
14144: LD_INT 1000
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PPUSH
14156: NOP4
14160: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14161: NOP4
14165: PUSH
14166: LD_INT 22
14168: PUSH
14169: NOP4
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 25
14180: PUSH
14181: LD_INT 4
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PPUSH
14192: NOP4
14196: ST_TO_ADDR
// if medicCount > 0 then
14197: NOP4
14201: PUSH
14202: LD_INT 0
14204: GREATER
14205: IFFALSE 14279
// begin if damageUnit_list > 0 then
14207: NOP4
14211: PUSH
14212: LD_INT 0
14214: GREATER
14215: IFFALSE 14279
// begin for i in damageUnit_list do
14217: NOP4
14221: PUSH
14222: NOP4
14226: PUSH
14227: FOR_IN
14228: IFFALSE 14277
// begin ComMoveToArea ( i , healArea ) ;
14230: NOP4
14234: PPUSH
14235: NOP4
14239: PPUSH
14240: NOP4
// for j in medicCount do
14244: NOP4
14248: PUSH
14249: NOP4
14253: PUSH
14254: FOR_IN
14255: IFFALSE 14273
// AddComHeal ( j , i ) ;
14257: NOP4
14261: PPUSH
14262: NOP4
14266: PPUSH
14267: NOP4
14271: GO 14254
14273: POP
14274: POP
// end ;
14275: GO 14227
14277: POP
14278: POP
// end ; end ; if soldiersOK_list > 0 then
14279: NOP4
14283: PUSH
14284: LD_INT 0
14286: GREATER
14287: IFFALSE 14478
// begin for i in soldiersOK_list do
14289: NOP4
14293: PUSH
14294: NOP4
14298: PUSH
14299: FOR_IN
14300: IFFALSE 14476
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14302: NOP4
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: NOP4
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PPUSH
14319: NOP4
14323: PPUSH
14324: NOP4
14328: PPUSH
14329: NOP4
14333: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14334: NOP4
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: NOP4
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 2
14353: PUSH
14354: LD_INT 59
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: LD_INT 21
14362: PUSH
14363: LD_INT 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: PPUSH
14393: NOP4
14397: PPUSH
14398: NOP4
14402: PPUSH
14403: NOP4
14407: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14408: NOP4
14412: PPUSH
14413: NOP4
14417: PPUSH
14418: NOP4
14422: PUSH
14423: LD_INT 8
14425: PLUS
14426: PUSH
14427: NOP4
14431: PPUSH
14432: NOP4
14436: PPUSH
14437: NOP4
14441: LESS
14442: IFFALSE 14460
// begin ComAttackUnit ( i , target1 ) ;
14444: NOP4
14448: PPUSH
14449: NOP4
14453: PPUSH
14454: NOP4
// end else
14458: GO 14474
// begin ComAttackUnit ( i , target2 ) ;
14460: NOP4
14464: PPUSH
14465: NOP4
14469: PPUSH
14470: NOP4
// end ; end ;
14474: GO 14299
14476: POP
14477: POP
// end ; end ; end_of_file
14478: LD_VAR 0 4
14482: RET
// every 1 do var i ;
14483: GO 14485
14485: DISABLE
14486: LD_INT 0
14488: PPUSH
// begin InGameOn ;
14489: NOP4
// CenterOnXY ( 53 , 40 ) ;
14493: LD_INT 53
14495: PPUSH
14496: LD_INT 40
14498: PPUSH
14499: NOP4
// wait ( 0 0$5 ) ;
14503: LD_INT 175
14505: PPUSH
14506: NOP4
// if gammaCommander = 1 then
14510: NOP4
14514: PUSH
14515: LD_INT 1
14517: EQUAL
14518: IFFALSE 14529
// CenterNowOnUnits ( Donaldson ) ;
14520: NOP4
14524: PPUSH
14525: NOP4
// if gammaCommander = 2 then
14529: NOP4
14533: PUSH
14534: LD_INT 2
14536: EQUAL
14537: IFFALSE 14548
// CenterNowOnUnits ( Brown ) ;
14539: NOP4
14543: PPUSH
14544: NOP4
// if gammaCommander = 3 then
14548: NOP4
14552: PUSH
14553: LD_INT 3
14555: EQUAL
14556: IFFALSE 14567
// CenterNowOnUnits ( Houten ) ;
14558: NOP4
14562: PPUSH
14563: NOP4
// if gammaCommander = 1 then
14567: NOP4
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: IFFALSE 14589
// Say ( Donaldson , D1-Don-1 ) ;
14577: NOP4
14581: PPUSH
14582: LD_STRING D1-Don-1
14584: PPUSH
14585: NOP4
// if gammaCommander = 2 then
14589: NOP4
14593: PUSH
14594: LD_INT 2
14596: EQUAL
14597: IFFALSE 14611
// Say ( Brown , D1-Brown-1 ) ;
14599: NOP4
14603: PPUSH
14604: LD_STRING D1-Brown-1
14606: PPUSH
14607: NOP4
// if gammaCommander = 3 then
14611: NOP4
14615: PUSH
14616: LD_INT 3
14618: EQUAL
14619: IFFALSE 14633
// Say ( Houten , D1-VanH-1 ) ;
14621: NOP4
14625: PPUSH
14626: LD_STRING D1-VanH-1
14628: PPUSH
14629: NOP4
// SayRadio ( Harisson , D1-Har-1 ) ;
14633: NOP4
14637: PPUSH
14638: LD_STRING D1-Har-1
14640: PPUSH
14641: NOP4
// CenterOnXY ( 53 , 40 ) ;
14645: LD_INT 53
14647: PPUSH
14648: LD_INT 40
14650: PPUSH
14651: NOP4
// if gammaCommander = 1 then
14655: NOP4
14659: PUSH
14660: LD_INT 1
14662: EQUAL
14663: IFFALSE 14677
// Say ( Donaldson , D1-Don-2 ) ;
14665: NOP4
14669: PPUSH
14670: LD_STRING D1-Don-2
14672: PPUSH
14673: NOP4
// if gammaCommander = 2 then
14677: NOP4
14681: PUSH
14682: LD_INT 2
14684: EQUAL
14685: IFFALSE 14699
// Say ( Brown , D1-Brown-2 ) ;
14687: NOP4
14691: PPUSH
14692: LD_STRING D1-Brown-2
14694: PPUSH
14695: NOP4
// if gammaCommander = 3 then
14699: NOP4
14703: PUSH
14704: LD_INT 3
14706: EQUAL
14707: IFFALSE 14721
// Say ( Houten , D1-VanH-2 ) ;
14709: NOP4
14713: PPUSH
14714: LD_STRING D1-VanH-2
14716: PPUSH
14717: NOP4
// SayRadio ( Harisson , D1-Har-2 ) ;
14721: NOP4
14725: PPUSH
14726: LD_STRING D1-Har-2
14728: PPUSH
14729: NOP4
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
14733: LD_INT 22
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 33
14745: PUSH
14746: LD_INT 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 61
14755: PUSH
14756: EMPTY
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: PPUSH
14764: NOP4
14768: IFFALSE 14833
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
14770: NOP4
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 33
14787: PUSH
14788: LD_INT 2
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 61
14797: PUSH
14798: EMPTY
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: NOP4
14810: PUSH
14811: FOR_IN
14812: IFFALSE 14831
// ComAgressiveMove ( i , 70 , 41 ) ;
14814: NOP4
14818: PPUSH
14819: LD_INT 70
14821: PPUSH
14822: LD_INT 41
14824: PPUSH
14825: NOP4
14829: GO 14811
14831: POP
14832: POP
// repeat wait ( 0 0$1 ) ;
14833: LD_INT 35
14835: PPUSH
14836: NOP4
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14840: NOP4
14844: PUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 6
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: PPUSH
14858: NOP4
14862: PUSH
14863: FOR_IN
14864: IFFALSE 14883
// ComAgressiveMove ( i , 54 , 20 ) ;
14866: NOP4
14870: PPUSH
14871: LD_INT 54
14873: PPUSH
14874: LD_INT 20
14876: PPUSH
14877: NOP4
14881: GO 14863
14883: POP
14884: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14885: NOP4
14889: PUSH
14890: LD_INT 22
14892: PUSH
14893: LD_INT 1
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 25
14902: PUSH
14903: LD_INT 1
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: LD_INT 54
14915: PUSH
14916: EMPTY
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: PPUSH
14928: NOP4
14932: PUSH
14933: FOR_IN
14934: IFFALSE 14968
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
14936: NOP4
14940: PPUSH
14941: LD_INT 70
14943: PPUSH
14944: LD_INT 41
14946: PPUSH
14947: NOP4
// AddComAgressiveMove ( i , 46 , 39 ) ;
14951: NOP4
14955: PPUSH
14956: LD_INT 46
14958: PPUSH
14959: LD_INT 39
14961: PPUSH
14962: NOP4
// end ;
14966: GO 14933
14968: POP
14969: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
14970: NOP4
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 21
14987: PUSH
14988: LD_INT 1
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 3
14997: PUSH
14998: LD_INT 24
15000: PUSH
15001: LD_INT 500
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: PPUSH
15017: NOP4
15021: PUSH
15022: FOR_IN
15023: IFFALSE 15056
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15025: NOP4
15029: PPUSH
15030: NOP4
15034: PPUSH
15035: NOP4
15039: PPUSH
15040: NOP4
15044: PPUSH
15045: NOP4
15049: PPUSH
15050: NOP4
15054: GO 15022
15056: POP
15057: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 4 ;
15058: LD_INT 22
15060: PUSH
15061: LD_INT 6
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 21
15070: PUSH
15071: LD_INT 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 24
15080: PUSH
15081: LD_INT 250
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: PPUSH
15093: NOP4
15097: PUSH
15098: LD_INT 4
15100: LESS
15101: IFFALSE 14833
// InGameOff ;
15103: NOP4
// ChangeMissionObjectives ( M1 ) ;
15107: LD_STRING M1
15109: PPUSH
15110: NOP4
// SaveForQuickRestart ;
15114: NOP4
// startCutscene = 0 ;
15118: NOP4
15122: PUSH
15123: LD_INT 0
15125: ST_TO_ADDR
// end ;
15126: PPOPN 1
15128: END
// every 1 1$0 do
15129: GO 15131
15131: DISABLE
// begin PrepareSupportFromDelta ;
15132: NOP4
// firstAttack = 1 ;
15136: NOP4
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15144: NOP4
15148: PPUSH
15149: NOP4
15153: IFFALSE 15169
// begin Say ( Gladstone , D2-Glad-1 ) ;
15155: NOP4
15159: PPUSH
15160: LD_STRING D2-Glad-1
15162: PPUSH
15163: NOP4
// end else
15167: GO 15271
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15169: LD_INT 4
15171: PPUSH
15172: LD_INT 22
15174: PUSH
15175: LD_INT 1
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 21
15184: PUSH
15185: LD_INT 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 2
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 25
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 25
15217: PUSH
15218: LD_INT 3
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 25
15227: PUSH
15228: LD_INT 4
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: NOP4
15251: PUSH
15252: NOP4
15256: PUSH
15257: EMPTY
15258: LIST
15259: DIFF
15260: PPUSH
15261: LD_STRING D2-Sol1-1
15263: PPUSH
15264: LD_STRING D2-FSol1-1
15266: PPUSH
15267: NOP4
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15271: NOP4
15275: PPUSH
15276: NOP4
15280: PUSH
15281: NOP4
15285: PUSH
15286: LD_INT 1
15288: EQUAL
15289: AND
15290: IFFALSE 15304
// Say ( Donaldson , D2-Don-1 ) ;
15292: NOP4
15296: PPUSH
15297: LD_STRING D2-Don-1
15299: PPUSH
15300: NOP4
// if IsOK ( Brown ) and gammaCommander = 2 then
15304: NOP4
15308: PPUSH
15309: NOP4
15313: PUSH
15314: NOP4
15318: PUSH
15319: LD_INT 2
15321: EQUAL
15322: AND
15323: IFFALSE 15337
// Say ( Brown , D2-Brown-1 ) ;
15325: NOP4
15329: PPUSH
15330: LD_STRING D2-Brown-1
15332: PPUSH
15333: NOP4
// if IsOK ( Houten ) and gammaCommander = 3 then
15337: NOP4
15341: PPUSH
15342: NOP4
15346: PUSH
15347: NOP4
15351: PUSH
15352: LD_INT 3
15354: EQUAL
15355: AND
15356: IFFALSE 15370
// Say ( Houten , D2-VanH-1 ) ;
15358: NOP4
15362: PPUSH
15363: LD_STRING D2-VanH-1
15365: PPUSH
15366: NOP4
// end ;
15370: END
// every 0 0$1 do
15371: GO 15373
15373: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
15374: LD_STRING 07_time
15376: PPUSH
15377: LD_INT 0
15379: PPUSH
15380: NOP4
15384: PUSH
15385: LD_INT 3
15387: DIV
15388: PPUSH
15389: NOP4
// PrepareMacmillanSquad ;
15393: NOP4
// CenterNowOnUnits ( JMM ) ;
15397: NOP4
15401: PPUSH
15402: NOP4
// Say ( JMM , D3-JMM-1 ) ;
15406: NOP4
15410: PPUSH
15411: LD_STRING D3-JMM-1
15413: PPUSH
15414: NOP4
// JMMArrive = 1 ;
15418: NOP4
15422: PUSH
15423: LD_INT 1
15425: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15426: NOP4
15430: PPUSH
15431: NOP4
15435: PUSH
15436: NOP4
15440: PUSH
15441: LD_INT 1
15443: EQUAL
15444: AND
15445: IFFALSE 15461
// begin Say ( Donaldson , D3-Don-1 ) ;
15447: NOP4
15451: PPUSH
15452: LD_STRING D3-Don-1
15454: PPUSH
15455: NOP4
// end else
15459: GO 15513
// begin if gammaCommander = 1 then
15461: NOP4
15465: PUSH
15466: LD_INT 1
15468: EQUAL
15469: IFFALSE 15513
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
15471: NOP4
15475: PPUSH
15476: LD_INT 26
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PPUSH
15486: NOP4
15490: PPUSH
15491: LD_STRING D3-Sol1-1
15493: PPUSH
15494: LD_STRING D3-Sol1-1
15496: PPUSH
15497: NOP4
// Say ( JMM , D3-JMM-2 ) ;
15501: NOP4
15505: PPUSH
15506: LD_STRING D3-JMM-2
15508: PPUSH
15509: NOP4
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15513: NOP4
15517: PPUSH
15518: NOP4
15522: PUSH
15523: NOP4
15527: PUSH
15528: LD_INT 2
15530: EQUAL
15531: AND
15532: IFFALSE 15548
// begin Say ( Brown , D3-Brown-1 ) ;
15534: NOP4
15538: PPUSH
15539: LD_STRING D3-Brown-1
15541: PPUSH
15542: NOP4
// end else
15546: GO 15600
// begin if gammaCommander = 2 then
15548: NOP4
15552: PUSH
15553: LD_INT 2
15555: EQUAL
15556: IFFALSE 15600
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
15558: NOP4
15562: PPUSH
15563: LD_INT 26
15565: PUSH
15566: LD_INT 1
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PPUSH
15573: NOP4
15577: PPUSH
15578: LD_STRING D3-Sol1-1a
15580: PPUSH
15581: LD_STRING D3-Sol1-1a
15583: PPUSH
15584: NOP4
// Say ( JMM , D3-JMM-2 ) ;
15588: NOP4
15592: PPUSH
15593: LD_STRING D3-JMM-2
15595: PPUSH
15596: NOP4
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15600: NOP4
15604: PPUSH
15605: NOP4
15609: PUSH
15610: NOP4
15614: PUSH
15615: LD_INT 3
15617: EQUAL
15618: AND
15619: IFFALSE 15635
// begin Say ( Houten , D3-VanH-1 ) ;
15621: NOP4
15625: PPUSH
15626: LD_STRING D3-VanH-1
15628: PPUSH
15629: NOP4
// end else
15633: GO 15687
// begin if gammaCommander = 3 then
15635: NOP4
15639: PUSH
15640: LD_INT 3
15642: EQUAL
15643: IFFALSE 15687
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
15645: NOP4
15649: PPUSH
15650: LD_INT 26
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: NOP4
15664: PPUSH
15665: LD_STRING D3-Sol1-1b
15667: PPUSH
15668: LD_STRING D3-Sol1-1b
15670: PPUSH
15671: NOP4
// Say ( JMM , D3-JMM-2 ) ;
15675: NOP4
15679: PPUSH
15680: LD_STRING D3-JMM-2
15682: PPUSH
15683: NOP4
// end ; end ; if IsOK ( Joan ) then
15687: NOP4
15691: PPUSH
15692: NOP4
15696: IFFALSE 15724
// begin Say ( Joan , D3a-Joan-1 ) ;
15698: NOP4
15702: PPUSH
15703: LD_STRING D3a-Joan-1
15705: PPUSH
15706: NOP4
// Say ( JMM , D3a-JMM-1 ) ;
15710: NOP4
15714: PPUSH
15715: LD_STRING D3a-JMM-1
15717: PPUSH
15718: NOP4
// end else
15722: GO 16177
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15724: NOP4
15728: PPUSH
15729: NOP4
15733: PUSH
15734: NOP4
15738: PUSH
15739: LD_INT 1
15741: EQUAL
15742: AND
15743: PUSH
15744: LD_STRING 06_JoanStatus_1
15746: PPUSH
15747: LD_INT 0
15749: PPUSH
15750: NOP4
15754: PUSH
15755: LD_INT 1
15757: EQUAL
15758: AND
15759: IFFALSE 15810
// begin Say ( Donaldson , D3b-Don-1 ) ;
15761: NOP4
15765: PPUSH
15766: LD_STRING D3b-Don-1
15768: PPUSH
15769: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
15773: NOP4
15777: PPUSH
15778: LD_STRING D3b-JMM-2
15780: PPUSH
15781: NOP4
// if IsOK ( Lisa ) then
15785: NOP4
15789: PPUSH
15790: NOP4
15794: IFFALSE 15808
// Say ( Lisa , D3b-Lisa-2 ) ;
15796: NOP4
15800: PPUSH
15801: LD_STRING D3b-Lisa-2
15803: PPUSH
15804: NOP4
// end else
15808: GO 15875
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15810: NOP4
15814: PPUSH
15815: LD_INT 26
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PPUSH
15825: NOP4
15829: PPUSH
15830: LD_STRING D3b-Sol1-1
15832: PPUSH
15833: LD_STRING D3b-Sol1-1
15835: PPUSH
15836: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
15840: NOP4
15844: PPUSH
15845: LD_STRING D3b-JMM-2
15847: PPUSH
15848: NOP4
// if IsOK ( Lisa ) then
15852: NOP4
15856: PPUSH
15857: NOP4
15861: IFFALSE 15875
// Say ( Lisa , D3b-Lisa-2 ) ;
15863: NOP4
15867: PPUSH
15868: LD_STRING D3b-Lisa-2
15870: PPUSH
15871: NOP4
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15875: NOP4
15879: PPUSH
15880: NOP4
15884: PUSH
15885: NOP4
15889: PUSH
15890: LD_INT 2
15892: EQUAL
15893: AND
15894: PUSH
15895: LD_STRING 06_JoanStatus_1
15897: PPUSH
15898: LD_INT 0
15900: PPUSH
15901: NOP4
15905: PUSH
15906: LD_INT 1
15908: EQUAL
15909: AND
15910: IFFALSE 15961
// begin Say ( Brown , D3b-Brown-1 ) ;
15912: NOP4
15916: PPUSH
15917: LD_STRING D3b-Brown-1
15919: PPUSH
15920: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
15924: NOP4
15928: PPUSH
15929: LD_STRING D3b-JMM-2
15931: PPUSH
15932: NOP4
// if IsOK ( Lisa ) then
15936: NOP4
15940: PPUSH
15941: NOP4
15945: IFFALSE 15959
// Say ( Lisa , D3b-Lisa-2 ) ;
15947: NOP4
15951: PPUSH
15952: LD_STRING D3b-Lisa-2
15954: PPUSH
15955: NOP4
// end else
15959: GO 16026
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15961: NOP4
15965: PPUSH
15966: LD_INT 26
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: NOP4
15980: PPUSH
15981: LD_STRING D3b-Sol1-1
15983: PPUSH
15984: LD_STRING D3b-Sol1-1
15986: PPUSH
15987: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
15991: NOP4
15995: PPUSH
15996: LD_STRING D3b-JMM-2
15998: PPUSH
15999: NOP4
// if IsOK ( Lisa ) then
16003: NOP4
16007: PPUSH
16008: NOP4
16012: IFFALSE 16026
// Say ( Lisa , D3b-Lisa-2 ) ;
16014: NOP4
16018: PPUSH
16019: LD_STRING D3b-Lisa-2
16021: PPUSH
16022: NOP4
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16026: NOP4
16030: PPUSH
16031: NOP4
16035: PUSH
16036: NOP4
16040: PUSH
16041: LD_INT 3
16043: EQUAL
16044: AND
16045: PUSH
16046: LD_STRING 06_JoanStatus_1
16048: PPUSH
16049: LD_INT 0
16051: PPUSH
16052: NOP4
16056: PUSH
16057: LD_INT 1
16059: EQUAL
16060: AND
16061: IFFALSE 16112
// begin Say ( Houten , D3b-VanH-1 ) ;
16063: NOP4
16067: PPUSH
16068: LD_STRING D3b-VanH-1
16070: PPUSH
16071: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
16075: NOP4
16079: PPUSH
16080: LD_STRING D3b-JMM-2
16082: PPUSH
16083: NOP4
// if IsOK ( Lisa ) then
16087: NOP4
16091: PPUSH
16092: NOP4
16096: IFFALSE 16110
// Say ( Lisa , D3b-Lisa-2 ) ;
16098: NOP4
16102: PPUSH
16103: LD_STRING D3b-Lisa-2
16105: PPUSH
16106: NOP4
// end else
16110: GO 16177
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16112: NOP4
16116: PPUSH
16117: LD_INT 26
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: NOP4
16131: PPUSH
16132: LD_STRING D3b-Sol1-1
16134: PPUSH
16135: LD_STRING D3b-Sol1-1
16137: PPUSH
16138: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
16142: NOP4
16146: PPUSH
16147: LD_STRING D3b-JMM-2
16149: PPUSH
16150: NOP4
// if IsOK ( Lisa ) then
16154: NOP4
16158: PPUSH
16159: NOP4
16163: IFFALSE 16177
// Say ( Lisa , D3b-Lisa-2 ) ;
16165: NOP4
16169: PPUSH
16170: LD_STRING D3b-Lisa-2
16172: PPUSH
16173: NOP4
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16177: LD_INT 22
16179: PUSH
16180: LD_INT 1
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 21
16189: PUSH
16190: LD_INT 1
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 26
16199: PUSH
16200: LD_INT 1
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: LD_INT 25
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 25
16222: PUSH
16223: LD_INT 2
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 25
16232: PUSH
16233: LD_INT 3
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 25
16242: PUSH
16243: LD_INT 4
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: PPUSH
16263: NOP4
16267: PUSH
16268: NOP4
16272: PUSH
16273: EMPTY
16274: LIST
16275: DIFF
16276: PPUSH
16277: LD_STRING DCa-Sol1-1
16279: PPUSH
16280: LD_STRING DCa-Sol1-1
16282: PPUSH
16283: NOP4
// Say ( JMM , DCb-JMM-1 ) ;
16287: NOP4
16291: PPUSH
16292: LD_STRING DCb-JMM-1
16294: PPUSH
16295: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16299: LD_INT 22
16301: PUSH
16302: LD_INT 1
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 21
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 26
16321: PUSH
16322: LD_INT 1
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 2
16331: PUSH
16332: LD_INT 25
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 25
16344: PUSH
16345: LD_INT 2
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 25
16354: PUSH
16355: LD_INT 3
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 25
16364: PUSH
16365: LD_INT 4
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: NOP4
16389: PUSH
16390: NOP4
16394: PUSH
16395: EMPTY
16396: LIST
16397: DIFF
16398: PPUSH
16399: LD_STRING DCb-Sol1-1
16401: PPUSH
16402: LD_STRING DCb-Sol1-1
16404: PPUSH
16405: NOP4
// Say ( JMM , DCb-JMM-2 ) ;
16409: NOP4
16413: PPUSH
16414: LD_STRING DCb-JMM-2
16416: PPUSH
16417: NOP4
// secondAttack = 1 ;
16421: NOP4
16425: PUSH
16426: LD_INT 1
16428: ST_TO_ADDR
// end ;
16429: END
// every 0 0$01 trigger JMMArrive = 1 do
16430: NOP4
16434: PUSH
16435: LD_INT 1
16437: EQUAL
16438: IFFALSE 16518
16440: GO 16442
16442: DISABLE
// begin wait ( 3 3$0 ) ;
16443: LD_INT 6300
16445: PPUSH
16446: NOP4
// DialogueOn ;
16450: NOP4
// SayRadio ( Powell , D4-Pow-1 ) ;
16454: NOP4
16458: PPUSH
16459: LD_STRING D4-Pow-1
16461: PPUSH
16462: NOP4
// Say ( JMM , D4-JMM-1 ) ;
16466: NOP4
16470: PPUSH
16471: LD_STRING D4-JMM-1
16473: PPUSH
16474: NOP4
// SayRadio ( Powell , D4-Pow-2 ) ;
16478: NOP4
16482: PPUSH
16483: LD_STRING D4-Pow-2
16485: PPUSH
16486: NOP4
// Say ( JMM , D4-JMM-2 ) ;
16490: NOP4
16494: PPUSH
16495: LD_STRING D4-JMM-2
16497: PPUSH
16498: NOP4
// SayRadio ( Powell , D4-Pow-3 ) ;
16502: NOP4
16506: PPUSH
16507: LD_STRING D4-Pow-3
16509: PPUSH
16510: NOP4
// DialogueOff ;
16514: NOP4
// end ;
16518: END
// every 0 0$01 trigger JMMArrive = 1 do
16519: NOP4
16523: PUSH
16524: LD_INT 1
16526: EQUAL
16527: IFFALSE 16559
16529: GO 16531
16531: DISABLE
// begin wait ( 8 8$0 ) ;
16532: LD_INT 16800
16534: PPUSH
16535: NOP4
// DialogueOn ;
16539: NOP4
// SayRadio ( Powell , D4a-Pow-1 ) ;
16543: NOP4
16547: PPUSH
16548: LD_STRING D4a-Pow-1
16550: PPUSH
16551: NOP4
// DialogueOff ;
16555: NOP4
// end ;
16559: END
// every 0 0$01 trigger JMMArrive = 1 do
16560: NOP4
16564: PUSH
16565: LD_INT 1
16567: EQUAL
16568: IFFALSE 16613
16570: GO 16572
16572: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
16573: LD_INT 21000
16575: PUSH
16576: LD_INT 25200
16578: PUSH
16579: LD_INT 31500
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: PUSH
16587: NOP4
16591: ARRAY
16592: PPUSH
16593: NOP4
// PrepareSikorsky ;
16597: NOP4
// SikorskyArrive = 1 ;
16601: NOP4
16605: PUSH
16606: LD_INT 1
16608: ST_TO_ADDR
// PrepareSikorskyArmy ;
16609: NOP4
// end ;
16613: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
16614: NOP4
16618: PPUSH
16619: LD_INT 5
16621: PPUSH
16622: NOP4
16626: IFFALSE 16818
16628: GO 16630
16630: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
16631: NOP4
16635: PPUSH
16636: NOP4
// DialogueOn ;
16640: NOP4
// Say ( Sikorski , D5-Sik-1 ) ;
16644: NOP4
16648: PPUSH
16649: LD_STRING D5-Sik-1
16651: PPUSH
16652: NOP4
// Say ( JMM , D5-JMM-1a ) ;
16656: NOP4
16660: PPUSH
16661: LD_STRING D5-JMM-1a
16663: PPUSH
16664: NOP4
// Say ( Sikorski , D5-Sik-2 ) ;
16668: NOP4
16672: PPUSH
16673: LD_STRING D5-Sik-2
16675: PPUSH
16676: NOP4
// case query ( QSikorski ) of 1 :
16680: LD_STRING QSikorski
16682: PPUSH
16683: NOP4
16687: PUSH
16688: LD_INT 1
16690: DOUBLE
16691: EQUAL
16692: IFTRUE 16696
16694: GO 16719
16696: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16697: NOP4
16701: PPUSH
16702: LD_STRING D5a-Sik-1
16704: PPUSH
16705: NOP4
// SikorskyTimer = 1 1$00 ;
16709: NOP4
16713: PUSH
16714: LD_INT 2100
16716: ST_TO_ADDR
// end ; 2 :
16717: GO 16806
16719: LD_INT 2
16721: DOUBLE
16722: EQUAL
16723: IFTRUE 16727
16725: GO 16750
16727: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16728: NOP4
16732: PPUSH
16733: LD_STRING D5b-Sik-1
16735: PPUSH
16736: NOP4
// SikorskyTimer = 5 5$00 ;
16740: NOP4
16744: PUSH
16745: LD_INT 10500
16747: ST_TO_ADDR
// end ; 3 :
16748: GO 16806
16750: LD_INT 3
16752: DOUBLE
16753: EQUAL
16754: IFTRUE 16758
16756: GO 16805
16758: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16759: NOP4
16763: PPUSH
16764: LD_STRING D5c-Sik-1
16766: PPUSH
16767: NOP4
// Say ( JMM , D5c-JMM-1 ) ;
16771: NOP4
16775: PPUSH
16776: LD_STRING D5c-JMM-1
16778: PPUSH
16779: NOP4
// Say ( Sikorski , D5c-Sik-2 ) ;
16783: NOP4
16787: PPUSH
16788: LD_STRING D5c-Sik-2
16790: PPUSH
16791: NOP4
// SikorskyTimer = 5 5$00 ;
16795: NOP4
16799: PUSH
16800: LD_INT 10500
16802: ST_TO_ADDR
// end ; end ;
16803: GO 16806
16805: POP
// DialogueOff ;
16806: NOP4
// timerStatus = 1 ;
16810: NOP4
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// end ;
16818: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16819: NOP4
16823: PUSH
16824: LD_INT 35
16826: LESS
16827: IFFALSE 16875
16829: GO 16831
16831: DISABLE
// begin timerStatus = 0 ;
16832: NOP4
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// DialogueOn ;
16840: NOP4
// Say ( Sikorski , D6-Sik-1 ) ;
16844: NOP4
16848: PPUSH
16849: LD_STRING D6-Sik-1
16851: PPUSH
16852: NOP4
// DialogueOff ;
16856: NOP4
// SikorskyAI = 1 ;
16860: NOP4
16864: PUSH
16865: LD_INT 1
16867: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16868: LD_STRING M2
16870: PPUSH
16871: NOP4
// end ;
16875: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16876: NOP4
16880: PPUSH
16881: LD_INT 18
16883: PPUSH
16884: NOP4
16888: IFFALSE 16972
16890: GO 16892
16892: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16893: NOP4
16897: PPUSH
16898: LD_STRING D7-Sik-1
16900: PPUSH
16901: NOP4
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16905: NOP4
16909: PPUSH
16910: LD_INT 24
16912: PPUSH
16913: NOP4
16917: PUSH
16918: NOP4
16922: PPUSH
16923: NOP4
16927: OR
16928: IFFALSE 16952
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16930: NOP4
16934: PPUSH
16935: LD_STRING D7a-Sik-1
16937: PPUSH
16938: NOP4
// SikorskyStatus = 1 ;
16942: NOP4
16946: PUSH
16947: LD_INT 1
16949: ST_TO_ADDR
// end else
16950: GO 16972
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16952: NOP4
16956: PPUSH
16957: LD_STRING D7b-Sik-1
16959: PPUSH
16960: NOP4
// SikorskyStatus = 2 ;
16964: NOP4
16968: PUSH
16969: LD_INT 2
16971: ST_TO_ADDR
// end ; end ;
16972: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
16973: NOP4
16977: PUSH
16978: LD_INT 1
16980: EQUAL
16981: IFFALSE 17090
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
// begin enable ;
16989: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
16990: NOP4
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_INT 3
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PPUSH
17005: NOP4
17009: PUSH
17010: FOR_IN
17011: IFFALSE 17038
// if IsInArea ( i , RussianEscape ) then
17013: NOP4
17017: PPUSH
17018: LD_INT 22
17020: PPUSH
17021: NOP4
17025: IFFALSE 17036
// RemoveUnit ( i ) ;
17027: NOP4
17031: PPUSH
17032: NOP4
17036: GO 17010
17038: POP
17039: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17040: NOP4
17044: PUSH
17045: LD_INT 22
17047: PUSH
17048: LD_INT 6
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PPUSH
17055: NOP4
17059: PUSH
17060: FOR_IN
17061: IFFALSE 17088
// if IsInArea ( i , RussianEscape ) then
17063: NOP4
17067: PPUSH
17068: LD_INT 22
17070: PPUSH
17071: NOP4
17075: IFFALSE 17086
// RemoveUnit ( i ) ;
17077: NOP4
17081: PPUSH
17082: NOP4
17086: GO 17060
17088: POP
17089: POP
// end ; end_of_file
17090: PPOPN 1
17092: END
// on BuildingComplete ( building ) do var tmp , un ;
17093: LD_INT 0
17095: PPUSH
17096: PPUSH
// begin if GetSide ( building ) = 3 then
17097: NOP4
17101: PPUSH
17102: NOP4
17106: PUSH
17107: LD_INT 3
17109: EQUAL
17110: IFFALSE 17597
// begin if GetBType ( building ) = b_depot then
17112: NOP4
17116: PPUSH
17117: NOP4
17121: PUSH
17122: LD_INT 0
17124: EQUAL
17125: IFFALSE 17193
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17127: NOP4
17131: PPUSH
17132: NOP4
17136: PPUSH
17137: LD_INT 1
17139: PPUSH
17140: LD_INT 5000
17142: PPUSH
17143: NOP4
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17147: NOP4
17151: PPUSH
17152: NOP4
17156: PPUSH
17157: LD_INT 2
17159: PPUSH
17160: LD_INT 5000
17162: PPUSH
17163: NOP4
// SetBName ( building , konev ) ;
17167: NOP4
17171: PPUSH
17172: LD_STRING konev
17174: PPUSH
17175: NOP4
// ruDepot = building ;
17179: NOP4
17183: PUSH
17184: NOP4
17188: ST_TO_ADDR
// BuildRussianBase ;
17189: NOP4
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17193: NOP4
17197: PPUSH
17198: NOP4
17202: PUSH
17203: LD_INT 0
17205: EQUAL
17206: PUSH
17207: NOP4
17211: PPUSH
17212: NOP4
17216: PUSH
17217: LD_INT 2
17219: EQUAL
17220: OR
17221: PUSH
17222: NOP4
17226: PPUSH
17227: NOP4
17231: PUSH
17232: LD_INT 4
17234: EQUAL
17235: OR
17236: IFFALSE 17247
// ComUpgrade ( building ) ;
17238: NOP4
17242: PPUSH
17243: NOP4
// if GetBType ( building ) = b_lab then
17247: NOP4
17251: PPUSH
17252: NOP4
17256: PUSH
17257: LD_INT 6
17259: EQUAL
17260: IFFALSE 17311
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17262: NOP4
17266: PPUSH
17267: LD_INT 10
17269: PPUSH
17270: NOP4
// AddComUpgradeLab ( building , b_lab_computer ) ;
17274: NOP4
17278: PPUSH
17279: LD_INT 12
17281: PPUSH
17282: NOP4
// ResAllTechs ( 3 , building , 3 ) ;
17286: LD_INT 3
17288: PPUSH
17289: NOP4
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: NOP4
// ruLab = building ;
17301: NOP4
17305: PUSH
17306: NOP4
17310: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17311: NOP4
17315: PPUSH
17316: NOP4
17320: PUSH
17321: LD_INT 32
17323: EQUAL
17324: IFFALSE 17442
// begin uc_side = 3 ;
17326: LD_ADDR_OWVAR 20
17330: PUSH
17331: LD_INT 3
17333: ST_TO_ADDR
// uc_nation = 3 ;
17334: LD_ADDR_OWVAR 21
17338: PUSH
17339: LD_INT 3
17341: ST_TO_ADDR
// hc_gallery =  ;
17342: LD_ADDR_OWVAR 33
17346: PUSH
17347: LD_STRING 
17349: ST_TO_ADDR
// hc_name =  ;
17350: LD_ADDR_OWVAR 26
17354: PUSH
17355: LD_STRING 
17357: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17358: LD_INT 0
17360: PPUSH
17361: LD_INT 1
17363: PPUSH
17364: NOP4
17368: PPUSH
17369: NOP4
17373: PPUSH
17374: NOP4
17378: PPUSH
17379: NOP4
// un = CreateHuman ;
17383: NOP4
17387: PUSH
17388: NOP4
17392: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17393: NOP4
17397: PPUSH
17398: NOP4
17402: PPUSH
17403: NOP4
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17407: NOP4
17411: PPUSH
17412: LD_INT 43
17414: PUSH
17415: LD_INT 44
17417: PUSH
17418: LD_INT 46
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 1
17428: PPUSH
17429: LD_INT 3
17431: PPUSH
17432: NOP4
17436: ARRAY
17437: PPUSH
17438: NOP4
// end ; if GetBType ( building ) = b_turret then
17442: NOP4
17446: PPUSH
17447: NOP4
17451: PUSH
17452: LD_INT 33
17454: EQUAL
17455: IFFALSE 17492
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17457: NOP4
17461: PPUSH
17462: LD_INT 43
17464: PUSH
17465: LD_INT 44
17467: PUSH
17468: LD_INT 46
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 1
17478: PPUSH
17479: LD_INT 3
17481: PPUSH
17482: NOP4
17486: ARRAY
17487: PPUSH
17488: NOP4
// if GetBType ( building ) = b_ext_computer then
17492: NOP4
17496: PPUSH
17497: NOP4
17501: PUSH
17502: LD_INT 24
17504: EQUAL
17505: IFFALSE 17515
// russianAI = 1 ;
17507: NOP4
17511: PUSH
17512: LD_INT 1
17514: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
17515: NOP4
17519: PUSH
17520: LD_INT 0
17522: GREATER
17523: IFFALSE 17597
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17525: NOP4
17529: PUSH
17530: NOP4
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: NOP4
17542: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17543: NOP4
17547: PUSH
17548: NOP4
17552: PPUSH
17553: LD_INT 1
17555: PPUSH
17556: NOP4
17560: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17561: NOP4
17565: PUSH
17566: NOP4
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: NOP4
17578: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17579: NOP4
17583: PUSH
17584: NOP4
17588: PPUSH
17589: LD_INT 1
17591: PPUSH
17592: NOP4
17596: ST_TO_ADDR
// end ; end ; end ;
17597: PPOPN 3
17599: END
// on UpgradeComplete ( building ) do var i ;
17600: LD_INT 0
17602: PPUSH
// begin if GetSide ( building ) = 3 then
17603: NOP4
17607: PPUSH
17608: NOP4
17612: PUSH
17613: LD_INT 3
17615: EQUAL
17616: IFFALSE 17797
// begin if GetBType ( building ) = b_factory then
17618: NOP4
17622: PPUSH
17623: NOP4
17627: PUSH
17628: LD_INT 3
17630: EQUAL
17631: IFFALSE 17698
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17633: NOP4
17637: PUSH
17638: LD_INT 22
17640: PUSH
17641: LD_INT 3
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 25
17650: PUSH
17651: LD_INT 3
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PPUSH
17662: NOP4
17666: PUSH
17667: FOR_IN
17668: IFFALSE 17686
// ComEnterUnit ( i , building ) ;
17670: NOP4
17674: PPUSH
17675: NOP4
17679: PPUSH
17680: NOP4
17684: GO 17667
17686: POP
17687: POP
// ruFab = building ;
17688: NOP4
17692: PUSH
17693: NOP4
17697: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
17698: NOP4
17702: PPUSH
17703: NOP4
17707: PUSH
17708: LD_INT 8
17710: EQUAL
17711: IFFALSE 17768
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17713: NOP4
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 25
17730: PUSH
17731: LD_INT 4
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PPUSH
17742: NOP4
17746: PUSH
17747: FOR_IN
17748: IFFALSE 17766
// ComEnterUnit ( i , building ) ;
17750: NOP4
17754: PPUSH
17755: NOP4
17759: PPUSH
17760: NOP4
17764: GO 17747
17766: POP
17767: POP
// if GetBType ( building ) = b_warehouse then
17768: NOP4
17772: PPUSH
17773: NOP4
17777: PUSH
17778: LD_INT 1
17780: EQUAL
17781: IFFALSE 17797
// begin ComEnterUnit ( Borodin , building ) ;
17783: NOP4
17787: PPUSH
17788: NOP4
17792: PPUSH
17793: NOP4
// end ; end ; end ;
17797: PPOPN 2
17799: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
17800: NOP4
17804: PPUSH
17805: NOP4
17809: PUSH
17810: LD_INT 2
17812: EQUAL
17813: PUSH
17814: NOP4
17818: PPUSH
17819: NOP4
17823: PUSH
17824: LD_INT 3
17826: EQUAL
17827: AND
17828: PUSH
17829: NOP4
17833: PUSH
17834: LD_INT 0
17836: EQUAL
17837: AND
17838: IFFALSE 17956
// begin varEvent1 = 1 ;
17840: NOP4
17844: PUSH
17845: LD_INT 1
17847: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
17848: NOP4
17852: PPUSH
17853: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
17857: LD_INT 22
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 21
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 25
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 25
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 25
17902: PUSH
17903: LD_INT 3
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 25
17912: PUSH
17913: LD_INT 4
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: PPUSH
17932: NOP4
17936: PUSH
17937: NOP4
17941: PUSH
17942: EMPTY
17943: LIST
17944: DIFF
17945: PPUSH
17946: LD_STRING DC-Sol1-1
17948: PPUSH
17949: LD_STRING DC-FSol1-1
17951: PPUSH
17952: NOP4
// end ; end ;
17956: PPOPN 1
17958: END
// on UnitDestroyed ( unit ) do var i ;
17959: LD_INT 0
17961: PPUSH
// begin if GetSide ( unit ) = 3 then
17962: NOP4
17966: PPUSH
17967: NOP4
17971: PUSH
17972: LD_INT 3
17974: EQUAL
17975: IFFALSE 18745
// begin if GetType ( unit ) = unit_building then
17977: NOP4
17981: PPUSH
17982: NOP4
17986: PUSH
17987: LD_INT 3
17989: EQUAL
17990: IFFALSE 18682
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17992: NOP4
17996: PPUSH
17997: NOP4
18001: PUSH
18002: LD_INT 31
18004: EQUAL
18005: PUSH
18006: NOP4
18010: PPUSH
18011: NOP4
18015: PUSH
18016: LD_INT 32
18018: EQUAL
18019: OR
18020: PUSH
18021: NOP4
18025: PPUSH
18026: NOP4
18030: PUSH
18031: LD_INT 36
18033: EQUAL
18034: OR
18035: PUSH
18036: NOP4
18040: PPUSH
18041: NOP4
18045: PUSH
18046: LD_INT 0
18048: EQUAL
18049: OR
18050: PUSH
18051: NOP4
18055: PPUSH
18056: NOP4
18060: PUSH
18061: LD_INT 24
18063: EQUAL
18064: OR
18065: PUSH
18066: NOP4
18070: PPUSH
18071: NOP4
18075: PUSH
18076: LD_INT 17
18078: EQUAL
18079: OR
18080: PUSH
18081: NOP4
18085: PPUSH
18086: NOP4
18090: PUSH
18091: LD_INT 25
18093: EQUAL
18094: OR
18095: PUSH
18096: NOP4
18100: PPUSH
18101: NOP4
18105: PUSH
18106: LD_INT 19
18108: EQUAL
18109: OR
18110: PUSH
18111: NOP4
18115: PPUSH
18116: NOP4
18120: PUSH
18121: LD_INT 20
18123: EQUAL
18124: OR
18125: PUSH
18126: NOP4
18130: PPUSH
18131: NOP4
18135: PUSH
18136: LD_INT 18
18138: EQUAL
18139: OR
18140: PUSH
18141: NOP4
18145: PPUSH
18146: NOP4
18150: PUSH
18151: LD_INT 21
18153: EQUAL
18154: OR
18155: PUSH
18156: NOP4
18160: PPUSH
18161: NOP4
18165: PUSH
18166: LD_INT 23
18168: EQUAL
18169: OR
18170: PUSH
18171: NOP4
18175: PPUSH
18176: NOP4
18180: PUSH
18181: LD_INT 16
18183: EQUAL
18184: OR
18185: PUSH
18186: NOP4
18190: PPUSH
18191: NOP4
18195: PUSH
18196: LD_INT 6
18198: EQUAL
18199: OR
18200: PUSH
18201: NOP4
18205: PPUSH
18206: NOP4
18210: PUSH
18211: LD_INT 29
18213: EQUAL
18214: OR
18215: PUSH
18216: NOP4
18220: PPUSH
18221: NOP4
18225: PUSH
18226: LD_INT 26
18228: EQUAL
18229: OR
18230: PUSH
18231: NOP4
18235: PPUSH
18236: NOP4
18240: PUSH
18241: LD_INT 30
18243: EQUAL
18244: OR
18245: PUSH
18246: NOP4
18250: PPUSH
18251: NOP4
18255: PUSH
18256: LD_INT 28
18258: EQUAL
18259: OR
18260: PUSH
18261: NOP4
18265: PPUSH
18266: NOP4
18270: PUSH
18271: LD_INT 27
18273: EQUAL
18274: OR
18275: PUSH
18276: NOP4
18280: PPUSH
18281: NOP4
18285: PUSH
18286: LD_INT 33
18288: EQUAL
18289: OR
18290: PUSH
18291: NOP4
18295: PPUSH
18296: NOP4
18300: PUSH
18301: LD_INT 2
18303: EQUAL
18304: OR
18305: PUSH
18306: NOP4
18310: PPUSH
18311: NOP4
18315: PUSH
18316: LD_INT 4
18318: EQUAL
18319: OR
18320: IFFALSE 18406
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18322: NOP4
18326: PUSH
18327: NOP4
18331: PUSH
18332: NOP4
18336: PPUSH
18337: NOP4
18341: ADD
18342: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18343: NOP4
18347: PUSH
18348: NOP4
18352: PUSH
18353: NOP4
18357: PPUSH
18358: NOP4
18362: ADD
18363: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18364: NOP4
18368: PUSH
18369: NOP4
18373: PUSH
18374: NOP4
18378: PPUSH
18379: NOP4
18383: ADD
18384: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18385: NOP4
18389: PUSH
18390: NOP4
18394: PUSH
18395: NOP4
18399: PPUSH
18400: NOP4
18404: ADD
18405: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18406: NOP4
18410: PPUSH
18411: NOP4
18415: PUSH
18416: LD_INT 1
18418: EQUAL
18419: IFFALSE 18498
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
18421: NOP4
18425: PUSH
18426: NOP4
18430: PUSH
18431: LD_INT 0
18433: ADD
18434: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18435: NOP4
18439: PUSH
18440: NOP4
18444: PUSH
18445: NOP4
18449: PPUSH
18450: NOP4
18454: ADD
18455: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18456: NOP4
18460: PUSH
18461: NOP4
18465: PUSH
18466: NOP4
18470: PPUSH
18471: NOP4
18475: ADD
18476: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18477: NOP4
18481: PUSH
18482: NOP4
18486: PUSH
18487: NOP4
18491: PPUSH
18492: NOP4
18496: ADD
18497: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18498: NOP4
18502: PPUSH
18503: NOP4
18507: PUSH
18508: LD_INT 3
18510: EQUAL
18511: IFFALSE 18590
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18513: NOP4
18517: PUSH
18518: NOP4
18522: PUSH
18523: LD_INT 2
18525: ADD
18526: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18527: NOP4
18531: PUSH
18532: NOP4
18536: PUSH
18537: NOP4
18541: PPUSH
18542: NOP4
18546: ADD
18547: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18548: NOP4
18552: PUSH
18553: NOP4
18557: PUSH
18558: NOP4
18562: PPUSH
18563: NOP4
18567: ADD
18568: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18569: NOP4
18573: PUSH
18574: NOP4
18578: PUSH
18579: NOP4
18583: PPUSH
18584: NOP4
18588: ADD
18589: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18590: NOP4
18594: PPUSH
18595: NOP4
18599: PUSH
18600: LD_INT 5
18602: EQUAL
18603: IFFALSE 18682
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18605: NOP4
18609: PUSH
18610: NOP4
18614: PUSH
18615: LD_INT 4
18617: ADD
18618: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18619: NOP4
18623: PUSH
18624: NOP4
18628: PUSH
18629: NOP4
18633: PPUSH
18634: NOP4
18638: ADD
18639: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18640: NOP4
18644: PUSH
18645: NOP4
18649: PUSH
18650: NOP4
18654: PPUSH
18655: NOP4
18659: ADD
18660: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18661: NOP4
18665: PUSH
18666: NOP4
18670: PUSH
18671: NOP4
18675: PPUSH
18676: NOP4
18680: ADD
18681: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
18682: NOP4
18686: PPUSH
18687: NOP4
18691: PUSH
18692: LD_INT 1
18694: EQUAL
18695: IFFALSE 18745
// begin for i in defenders_list do
18697: NOP4
18701: PUSH
18702: NOP4
18706: PUSH
18707: FOR_IN
18708: IFFALSE 18743
// if i = unit then
18710: NOP4
18714: PUSH
18715: NOP4
18719: EQUAL
18720: IFFALSE 18741
// defenders_list = defenders_list diff [ unit ] ;
18722: NOP4
18726: PUSH
18727: NOP4
18731: PUSH
18732: NOP4
18736: PUSH
18737: EMPTY
18738: LIST
18739: DIFF
18740: ST_TO_ADDR
18741: GO 18707
18743: POP
18744: POP
// end ; end ; end ; end_of_file
18745: PPOPN 2
18747: END
// every 0 0$1 do
18748: GO 18750
18750: DISABLE
// begin enable ;
18751: ENABLE
// if escapeAvalaible = 0 then
18752: NOP4
18756: PUSH
18757: LD_INT 0
18759: EQUAL
18760: IFFALSE 18772
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18762: LD_INT 3
18764: PPUSH
18765: LD_INT 6
18767: PPUSH
18768: NOP4
// if escapeAvalaible = 0 then
18772: NOP4
18776: PUSH
18777: LD_INT 0
18779: EQUAL
18780: IFFALSE 18792
// DefenseBase ( 1 , RussianBaseTerritory ) ;
18782: LD_INT 1
18784: PPUSH
18785: LD_INT 24
18787: PPUSH
18788: NOP4
// if russianAI = 1 then
18792: NOP4
18796: PUSH
18797: LD_INT 1
18799: EQUAL
18800: IFFALSE 18863
// begin RepairBuilding ( 3 , ruDepot ) ;
18802: LD_INT 3
18804: PPUSH
18805: NOP4
18809: PPUSH
18810: NOP4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
18814: LD_INT 3
18816: PPUSH
18817: LD_INT 7
18819: PPUSH
18820: LD_INT 6
18822: PPUSH
18823: NOP4
18827: PPUSH
18828: NOP4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18832: LD_INT 3
18834: PPUSH
18835: NOP4
18839: PPUSH
18840: NOP4
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
18844: LD_INT 6
18846: PPUSH
18847: LD_INT 8
18849: PPUSH
18850: LD_INT 93
18852: PPUSH
18853: LD_INT 93
18855: PPUSH
18856: LD_INT 1
18858: PPUSH
18859: NOP4
// end ; if SikorskyArrive = 1 then
18863: NOP4
18867: PUSH
18868: LD_INT 1
18870: EQUAL
18871: IFFALSE 18892
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
18873: LD_INT 3
18875: PPUSH
18876: LD_INT 10
18878: PPUSH
18879: LD_INT 53
18881: PPUSH
18882: LD_INT 59
18884: PPUSH
18885: LD_INT 3
18887: PPUSH
18888: NOP4
// end ;
18892: END
// every 0 0$1 trigger russianAI = 1 do var i ;
18893: NOP4
18897: PUSH
18898: LD_INT 1
18900: EQUAL
18901: IFFALSE 19177
18903: GO 18905
18905: DISABLE
18906: LD_INT 0
18908: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
18909: NOP4
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_INT 3
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 3
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 30
18936: PUSH
18937: LD_INT 32
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 3
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 35
18952: PUSH
18953: LD_INT 43
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 35
18962: PUSH
18963: LD_INT 44
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 35
18972: PUSH
18973: LD_INT 46
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: PPUSH
18996: NOP4
19000: PUSH
19001: FOR_IN
19002: IFFALSE 19041
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19004: NOP4
19008: PPUSH
19009: LD_INT 43
19011: PUSH
19012: LD_INT 44
19014: PUSH
19015: LD_INT 46
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: PPUSH
19026: LD_INT 3
19028: PPUSH
19029: NOP4
19033: ARRAY
19034: PPUSH
19035: NOP4
19039: GO 19001
19041: POP
19042: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
19043: NOP4
19047: PUSH
19048: LD_INT 22
19050: PUSH
19051: LD_INT 3
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 21
19060: PUSH
19061: LD_INT 3
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 30
19070: PUSH
19071: LD_INT 33
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: LD_INT 35
19086: PUSH
19087: LD_INT 43
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 35
19096: PUSH
19097: LD_INT 44
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 35
19106: PUSH
19107: LD_INT 46
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: PPUSH
19130: NOP4
19134: PUSH
19135: FOR_IN
19136: IFFALSE 19175
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19138: NOP4
19142: PPUSH
19143: LD_INT 43
19145: PUSH
19146: LD_INT 44
19148: PUSH
19149: LD_INT 46
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: PPUSH
19160: LD_INT 3
19162: PPUSH
19163: NOP4
19167: ARRAY
19168: PPUSH
19169: NOP4
19173: GO 19135
19175: POP
19176: POP
// end ;
19177: PPOPN 1
19179: END
// every 0 0$1 trigger SikorskyAI = 1 do
19180: NOP4
19184: PUSH
19185: LD_INT 1
19187: EQUAL
19188: IFFALSE 19226
19190: GO 19192
19192: DISABLE
// begin enable ;
19193: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
19194: LD_INT 4
19196: PPUSH
19197: LD_INT 10
19199: PPUSH
19200: LD_INT 93
19202: PPUSH
19203: LD_INT 93
19205: PPUSH
19206: LD_INT 3
19208: PPUSH
19209: NOP4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
19213: LD_INT 4
19215: PPUSH
19216: LD_INT 11
19218: PPUSH
19219: LD_INT 3
19221: PPUSH
19222: NOP4
// end ;
19226: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19227: NOP4
19231: PUSH
19232: LD_INT 1
19234: EQUAL
19235: PUSH
19236: NOP4
19240: PPUSH
19241: NOP4
19245: AND
19246: PUSH
19247: NOP4
19251: PPUSH
19252: NOP4
19256: PUSH
19257: LD_INT 3
19259: EQUAL
19260: AND
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_INT 3
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 33
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: LIST
19296: PPUSH
19297: NOP4
19301: PUSH
19302: LD_INT 0
19304: EQUAL
19305: AND
19306: IFFALSE 19485
19308: GO 19310
19310: DISABLE
// begin enable ;
19311: ENABLE
// if Difficulty = 1 then
19312: NOP4
19316: PUSH
19317: LD_INT 1
19319: EQUAL
19320: IFFALSE 19371
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
19322: LD_INT 3
19324: PPUSH
19325: NOP4
19329: PPUSH
19330: LD_INT 5
19332: PPUSH
19333: LD_INT 8
19335: PPUSH
19336: NOP4
19340: PPUSH
19341: LD_INT 1
19343: PPUSH
19344: LD_INT 43
19346: PUSH
19347: LD_INT 44
19349: PUSH
19350: LD_INT 46
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: PPUSH
19358: LD_INT 1
19360: PPUSH
19361: LD_INT 3
19363: PPUSH
19364: LD_INT 24
19366: PPUSH
19367: NOP4
// if Difficulty = 2 then
19371: NOP4
19375: PUSH
19376: LD_INT 2
19378: EQUAL
19379: IFFALSE 19430
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
19381: LD_INT 3
19383: PPUSH
19384: NOP4
19388: PPUSH
19389: LD_INT 6
19391: PPUSH
19392: LD_INT 8
19394: PPUSH
19395: NOP4
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: LD_INT 44
19405: PUSH
19406: LD_INT 44
19408: PUSH
19409: LD_INT 46
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: LD_INT 3
19422: PPUSH
19423: LD_INT 24
19425: PPUSH
19426: NOP4
// if Difficulty = 3 then
19430: NOP4
19434: PUSH
19435: LD_INT 3
19437: EQUAL
19438: IFFALSE 19485
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
19440: LD_INT 3
19442: PPUSH
19443: NOP4
19447: PPUSH
19448: LD_INT 7
19450: PPUSH
19451: LD_INT 8
19453: PPUSH
19454: NOP4
19458: PPUSH
19459: LD_INT 1
19461: PPUSH
19462: LD_INT 44
19464: PUSH
19465: LD_INT 46
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PPUSH
19472: LD_INT 1
19474: PPUSH
19475: LD_INT 3
19477: PPUSH
19478: LD_INT 24
19480: PPUSH
19481: NOP4
// end ;
19485: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
19486: NOP4
19490: PUSH
19491: LD_INT 1
19493: EQUAL
19494: IFFALSE 19576
19496: GO 19498
19498: DISABLE
19499: LD_INT 0
19501: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
19502: NOP4
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 3
19529: PUSH
19530: LD_INT 24
19532: PUSH
19533: LD_INT 650
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: PPUSH
19549: NOP4
19553: PUSH
19554: FOR_IN
19555: IFFALSE 19574
// ComMoveXY ( i , 51 , 12 ) ;
19557: NOP4
19561: PPUSH
19562: LD_INT 51
19564: PPUSH
19565: LD_INT 12
19567: PPUSH
19568: NOP4
19572: GO 19554
19574: POP
19575: POP
// end ; end_of_file
19576: PPOPN 1
19578: END
// every 2 2$1 trigger firstAttack = 1 do
19579: NOP4
19583: PUSH
19584: LD_INT 1
19586: EQUAL
19587: IFFALSE 19693
19589: GO 19591
19591: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19592: LD_INT 6
19594: PPUSH
19595: LD_INT 3
19597: PPUSH
19598: LD_INT 5
19600: PPUSH
19601: LD_INT 6
19603: PPUSH
19604: NOP4
19608: PUSH
19609: LD_INT 5
19611: PPUSH
19612: LD_INT 6
19614: PPUSH
19615: NOP4
19619: PUSH
19620: LD_INT 5
19622: PPUSH
19623: LD_INT 6
19625: PPUSH
19626: NOP4
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: NOP4
19640: ARRAY
19641: PPUSH
19642: LD_INT 0
19644: PPUSH
19645: LD_INT 0
19647: PPUSH
19648: LD_INT 0
19650: PPUSH
19651: LD_INT 0
19653: PPUSH
19654: NOP4
19658: PPUSH
19659: NOP4
19663: PPUSH
19664: NOP4
19668: PPUSH
19669: LD_INT 16
19671: PPUSH
19672: LD_INT 7
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: LD_INT 1
19680: PPUSH
19681: LD_INT 3
19683: PPUSH
19684: NOP4
19688: PPUSH
19689: NOP4
19693: END
// every 2 2$1 trigger firstAttack = 1 do
19694: NOP4
19698: PUSH
19699: LD_INT 1
19701: EQUAL
19702: IFFALSE 19802
19704: GO 19706
19706: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19707: LD_INT 16
19709: PPUSH
19710: LD_INT 6
19712: PPUSH
19713: LD_INT 5
19715: PPUSH
19716: LD_INT 8
19718: PPUSH
19719: NOP4
19723: PUSH
19724: LD_INT 6
19726: PPUSH
19727: LD_INT 9
19729: PPUSH
19730: NOP4
19734: PUSH
19735: LD_INT 7
19737: PPUSH
19738: LD_INT 9
19740: PPUSH
19741: NOP4
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: PUSH
19751: NOP4
19755: ARRAY
19756: PPUSH
19757: NOP4
19761: PPUSH
19762: NOP4
19766: PPUSH
19767: NOP4
19771: PPUSH
19772: LD_INT 3
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: LD_INT 3
19780: PPUSH
19781: LD_INT 44
19783: PUSH
19784: LD_INT 46
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PPUSH
19791: EMPTY
19792: PPUSH
19793: EMPTY
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: NOP4
19802: END
// every 3 3$1 trigger firstAttack = 1 do
19803: NOP4
19807: PUSH
19808: LD_INT 1
19810: EQUAL
19811: IFFALSE 19917
19813: GO 19815
19815: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19816: LD_INT 6
19818: PPUSH
19819: LD_INT 3
19821: PPUSH
19822: LD_INT 5
19824: PPUSH
19825: LD_INT 6
19827: PPUSH
19828: NOP4
19832: PUSH
19833: LD_INT 5
19835: PPUSH
19836: LD_INT 6
19838: PPUSH
19839: NOP4
19843: PUSH
19844: LD_INT 5
19846: PPUSH
19847: LD_INT 6
19849: PPUSH
19850: NOP4
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: PUSH
19860: NOP4
19864: ARRAY
19865: PPUSH
19866: LD_INT 0
19868: PPUSH
19869: LD_INT 0
19871: PPUSH
19872: LD_INT 0
19874: PPUSH
19875: LD_INT 0
19877: PPUSH
19878: NOP4
19882: PPUSH
19883: NOP4
19887: PPUSH
19888: NOP4
19892: PPUSH
19893: LD_INT 16
19895: PPUSH
19896: LD_INT 7
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_INT 1
19904: PPUSH
19905: LD_INT 3
19907: PPUSH
19908: NOP4
19912: PPUSH
19913: NOP4
19917: END
// every 3 3$1 trigger firstAttack = 1 do
19918: NOP4
19922: PUSH
19923: LD_INT 1
19925: EQUAL
19926: IFFALSE 20034
19928: GO 19930
19930: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19931: LD_INT 16
19933: PPUSH
19934: LD_INT 6
19936: PPUSH
19937: LD_INT 5
19939: PPUSH
19940: LD_INT 8
19942: PPUSH
19943: NOP4
19947: PUSH
19948: LD_INT 6
19950: PPUSH
19951: LD_INT 9
19953: PPUSH
19954: NOP4
19958: PUSH
19959: LD_INT 7
19961: PPUSH
19962: LD_INT 9
19964: PPUSH
19965: NOP4
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: PUSH
19975: NOP4
19979: ARRAY
19980: PPUSH
19981: NOP4
19985: PPUSH
19986: NOP4
19990: PPUSH
19991: NOP4
19995: PPUSH
19996: LD_INT 3
19998: PPUSH
19999: LD_INT 1
20001: PPUSH
20002: LD_INT 3
20004: PPUSH
20005: LD_INT 42
20007: PUSH
20008: LD_INT 43
20010: PUSH
20011: LD_INT 44
20013: PUSH
20014: LD_INT 46
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: PPUSH
20023: EMPTY
20024: PPUSH
20025: EMPTY
20026: PPUSH
20027: LD_INT 1
20029: PPUSH
20030: NOP4
20034: END
// every 7 7$1 trigger firstAttack = 1 and JMMArrive = 0 do
20035: NOP4
20039: PUSH
20040: LD_INT 1
20042: EQUAL
20043: PUSH
20044: NOP4
20048: PUSH
20049: LD_INT 0
20051: EQUAL
20052: AND
20053: IFFALSE 20159
20055: GO 20057
20057: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20058: LD_INT 6
20060: PPUSH
20061: LD_INT 3
20063: PPUSH
20064: LD_INT 5
20066: PPUSH
20067: LD_INT 6
20069: PPUSH
20070: NOP4
20074: PUSH
20075: LD_INT 5
20077: PPUSH
20078: LD_INT 6
20080: PPUSH
20081: NOP4
20085: PUSH
20086: LD_INT 5
20088: PPUSH
20089: LD_INT 6
20091: PPUSH
20092: NOP4
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: PUSH
20102: NOP4
20106: ARRAY
20107: PPUSH
20108: LD_INT 0
20110: PPUSH
20111: LD_INT 0
20113: PPUSH
20114: LD_INT 0
20116: PPUSH
20117: LD_INT 0
20119: PPUSH
20120: NOP4
20124: PPUSH
20125: NOP4
20129: PPUSH
20130: NOP4
20134: PPUSH
20135: LD_INT 16
20137: PPUSH
20138: LD_INT 7
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: LD_INT 1
20146: PPUSH
20147: LD_INT 3
20149: PPUSH
20150: NOP4
20154: PPUSH
20155: NOP4
20159: END
// every 7 7$1 trigger firstAttack = 1 and JMMArrive = 0 do
20160: NOP4
20164: PUSH
20165: LD_INT 1
20167: EQUAL
20168: PUSH
20169: NOP4
20173: PUSH
20174: LD_INT 0
20176: EQUAL
20177: AND
20178: IFFALSE 20282
20180: GO 20182
20182: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20183: LD_INT 16
20185: PPUSH
20186: LD_INT 6
20188: PPUSH
20189: LD_INT 5
20191: PPUSH
20192: LD_INT 8
20194: PPUSH
20195: NOP4
20199: PUSH
20200: LD_INT 6
20202: PPUSH
20203: LD_INT 9
20205: PPUSH
20206: NOP4
20210: PUSH
20211: LD_INT 7
20213: PPUSH
20214: LD_INT 9
20216: PPUSH
20217: NOP4
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: NOP4
20231: ARRAY
20232: PPUSH
20233: NOP4
20237: PPUSH
20238: NOP4
20242: PPUSH
20243: NOP4
20247: PPUSH
20248: LD_INT 3
20250: PPUSH
20251: LD_INT 1
20253: PPUSH
20254: LD_INT 3
20256: PPUSH
20257: LD_INT 43
20259: PUSH
20260: LD_INT 44
20262: PUSH
20263: LD_INT 46
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: PPUSH
20271: EMPTY
20272: PPUSH
20273: EMPTY
20274: PPUSH
20275: LD_INT 1
20277: PPUSH
20278: NOP4
20282: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
20283: NOP4
20287: PUSH
20288: LD_INT 1
20290: EQUAL
20291: PUSH
20292: NOP4
20296: PUSH
20297: LD_INT 0
20299: EQUAL
20300: AND
20301: IFFALSE 20401
20303: GO 20305
20305: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20306: LD_INT 16
20308: PPUSH
20309: LD_INT 6
20311: PPUSH
20312: LD_INT 5
20314: PPUSH
20315: LD_INT 8
20317: PPUSH
20318: NOP4
20322: PUSH
20323: LD_INT 6
20325: PPUSH
20326: LD_INT 9
20328: PPUSH
20329: NOP4
20333: PUSH
20334: LD_INT 7
20336: PPUSH
20337: LD_INT 9
20339: PPUSH
20340: NOP4
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: PUSH
20350: NOP4
20354: ARRAY
20355: PPUSH
20356: NOP4
20360: PPUSH
20361: NOP4
20365: PPUSH
20366: NOP4
20370: PPUSH
20371: LD_INT 3
20373: PPUSH
20374: LD_INT 1
20376: PPUSH
20377: LD_INT 3
20379: PPUSH
20380: LD_INT 44
20382: PUSH
20383: LD_INT 46
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PPUSH
20390: EMPTY
20391: PPUSH
20392: EMPTY
20393: PPUSH
20394: LD_INT 1
20396: PPUSH
20397: NOP4
20401: END
// every 1 1$1 trigger secondAttack = 1 do
20402: NOP4
20406: PUSH
20407: LD_INT 1
20409: EQUAL
20410: IFFALSE 20516
20412: GO 20414
20414: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20415: LD_INT 6
20417: PPUSH
20418: LD_INT 3
20420: PPUSH
20421: LD_INT 4
20423: PPUSH
20424: LD_INT 7
20426: PPUSH
20427: NOP4
20431: PUSH
20432: LD_INT 6
20434: PPUSH
20435: LD_INT 7
20437: PPUSH
20438: NOP4
20442: PUSH
20443: LD_INT 6
20445: PPUSH
20446: LD_INT 10
20448: PPUSH
20449: NOP4
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: LIST
20458: PUSH
20459: NOP4
20463: ARRAY
20464: PPUSH
20465: LD_INT 0
20467: PPUSH
20468: LD_INT 0
20470: PPUSH
20471: LD_INT 0
20473: PPUSH
20474: LD_INT 0
20476: PPUSH
20477: NOP4
20481: PPUSH
20482: NOP4
20486: PPUSH
20487: NOP4
20491: PPUSH
20492: LD_INT 16
20494: PPUSH
20495: LD_INT 7
20497: PPUSH
20498: LD_INT 1
20500: PPUSH
20501: LD_INT 1
20503: PPUSH
20504: LD_INT 3
20506: PPUSH
20507: NOP4
20511: PPUSH
20512: NOP4
20516: END
// every 1 1$1 trigger secondAttack = 1 do
20517: NOP4
20521: PUSH
20522: LD_INT 1
20524: EQUAL
20525: IFFALSE 20629
20527: GO 20529
20529: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20530: LD_INT 16
20532: PPUSH
20533: LD_INT 6
20535: PPUSH
20536: LD_INT 5
20538: PPUSH
20539: LD_INT 8
20541: PPUSH
20542: NOP4
20546: PUSH
20547: LD_INT 6
20549: PPUSH
20550: LD_INT 9
20552: PPUSH
20553: NOP4
20557: PUSH
20558: LD_INT 7
20560: PPUSH
20561: LD_INT 9
20563: PPUSH
20564: NOP4
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: PUSH
20574: NOP4
20578: ARRAY
20579: PPUSH
20580: NOP4
20584: PPUSH
20585: NOP4
20589: PPUSH
20590: NOP4
20594: PPUSH
20595: LD_INT 3
20597: PPUSH
20598: LD_INT 1
20600: PPUSH
20601: LD_INT 3
20603: PPUSH
20604: LD_INT 43
20606: PUSH
20607: LD_INT 44
20609: PUSH
20610: LD_INT 46
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: PPUSH
20618: EMPTY
20619: PPUSH
20620: EMPTY
20621: PPUSH
20622: LD_INT 1
20624: PPUSH
20625: NOP4
20629: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20630: NOP4
20634: PUSH
20635: LD_INT 0
20637: EQUAL
20638: IFFALSE 20744
20640: GO 20642
20642: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20643: LD_INT 6
20645: PPUSH
20646: LD_INT 3
20648: PPUSH
20649: LD_INT 8
20651: PPUSH
20652: LD_INT 9
20654: PPUSH
20655: NOP4
20659: PUSH
20660: LD_INT 7
20662: PPUSH
20663: LD_INT 10
20665: PPUSH
20666: NOP4
20670: PUSH
20671: LD_INT 8
20673: PPUSH
20674: LD_INT 10
20676: PPUSH
20677: NOP4
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: LIST
20686: PUSH
20687: NOP4
20691: ARRAY
20692: PPUSH
20693: LD_INT 0
20695: PPUSH
20696: LD_INT 0
20698: PPUSH
20699: LD_INT 0
20701: PPUSH
20702: LD_INT 0
20704: PPUSH
20705: NOP4
20709: PPUSH
20710: NOP4
20714: PPUSH
20715: NOP4
20719: PPUSH
20720: LD_INT 16
20722: PPUSH
20723: LD_INT 7
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: LD_INT 1
20731: PPUSH
20732: LD_INT 3
20734: PPUSH
20735: NOP4
20739: PPUSH
20740: NOP4
20744: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20745: NOP4
20749: PUSH
20750: LD_INT 0
20752: EQUAL
20753: IFFALSE 20853
20755: GO 20757
20757: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20758: LD_INT 16
20760: PPUSH
20761: LD_INT 6
20763: PPUSH
20764: LD_INT 5
20766: PPUSH
20767: LD_INT 8
20769: PPUSH
20770: NOP4
20774: PUSH
20775: LD_INT 6
20777: PPUSH
20778: LD_INT 9
20780: PPUSH
20781: NOP4
20785: PUSH
20786: LD_INT 7
20788: PPUSH
20789: LD_INT 9
20791: PPUSH
20792: NOP4
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: NOP4
20806: ARRAY
20807: PPUSH
20808: NOP4
20812: PPUSH
20813: NOP4
20817: PPUSH
20818: NOP4
20822: PPUSH
20823: LD_INT 3
20825: PPUSH
20826: LD_INT 1
20828: PPUSH
20829: LD_INT 3
20831: PPUSH
20832: LD_INT 44
20834: PUSH
20835: LD_INT 46
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PPUSH
20842: EMPTY
20843: PPUSH
20844: EMPTY
20845: PPUSH
20846: LD_INT 1
20848: PPUSH
20849: NOP4
20853: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20854: NOP4
20858: PUSH
20859: LD_INT 0
20861: EQUAL
20862: IFFALSE 20968
20864: GO 20866
20866: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20867: LD_INT 6
20869: PPUSH
20870: LD_INT 3
20872: PPUSH
20873: LD_INT 8
20875: PPUSH
20876: LD_INT 9
20878: PPUSH
20879: NOP4
20883: PUSH
20884: LD_INT 7
20886: PPUSH
20887: LD_INT 10
20889: PPUSH
20890: NOP4
20894: PUSH
20895: LD_INT 8
20897: PPUSH
20898: LD_INT 10
20900: PPUSH
20901: NOP4
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: PUSH
20911: NOP4
20915: ARRAY
20916: PPUSH
20917: LD_INT 0
20919: PPUSH
20920: LD_INT 0
20922: PPUSH
20923: LD_INT 0
20925: PPUSH
20926: LD_INT 0
20928: PPUSH
20929: NOP4
20933: PPUSH
20934: NOP4
20938: PPUSH
20939: NOP4
20943: PPUSH
20944: LD_INT 16
20946: PPUSH
20947: LD_INT 7
20949: PPUSH
20950: LD_INT 1
20952: PPUSH
20953: LD_INT 1
20955: PPUSH
20956: LD_INT 3
20958: PPUSH
20959: NOP4
20963: PPUSH
20964: NOP4
20968: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20969: NOP4
20973: PUSH
20974: LD_INT 0
20976: EQUAL
20977: IFFALSE 21077
20979: GO 20981
20981: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20982: LD_INT 16
20984: PPUSH
20985: LD_INT 6
20987: PPUSH
20988: LD_INT 5
20990: PPUSH
20991: LD_INT 8
20993: PPUSH
20994: NOP4
20998: PUSH
20999: LD_INT 6
21001: PPUSH
21002: LD_INT 9
21004: PPUSH
21005: NOP4
21009: PUSH
21010: LD_INT 7
21012: PPUSH
21013: LD_INT 9
21015: PPUSH
21016: NOP4
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: PUSH
21026: NOP4
21030: ARRAY
21031: PPUSH
21032: NOP4
21036: PPUSH
21037: NOP4
21041: PPUSH
21042: NOP4
21046: PPUSH
21047: LD_INT 3
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: LD_INT 3
21055: PPUSH
21056: LD_INT 44
21058: PUSH
21059: LD_INT 46
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PPUSH
21066: EMPTY
21067: PPUSH
21068: EMPTY
21069: PPUSH
21070: LD_INT 1
21072: PPUSH
21073: NOP4
21077: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21078: NOP4
21082: PUSH
21083: LD_INT 0
21085: EQUAL
21086: IFFALSE 21192
21088: GO 21090
21090: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21091: LD_INT 6
21093: PPUSH
21094: LD_INT 3
21096: PPUSH
21097: LD_INT 8
21099: PPUSH
21100: LD_INT 9
21102: PPUSH
21103: NOP4
21107: PUSH
21108: LD_INT 7
21110: PPUSH
21111: LD_INT 10
21113: PPUSH
21114: NOP4
21118: PUSH
21119: LD_INT 8
21121: PPUSH
21122: LD_INT 10
21124: PPUSH
21125: NOP4
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: PUSH
21135: NOP4
21139: ARRAY
21140: PPUSH
21141: LD_INT 0
21143: PPUSH
21144: LD_INT 0
21146: PPUSH
21147: LD_INT 0
21149: PPUSH
21150: LD_INT 0
21152: PPUSH
21153: NOP4
21157: PPUSH
21158: NOP4
21162: PPUSH
21163: NOP4
21167: PPUSH
21168: LD_INT 16
21170: PPUSH
21171: LD_INT 7
21173: PPUSH
21174: LD_INT 1
21176: PPUSH
21177: LD_INT 1
21179: PPUSH
21180: LD_INT 3
21182: PPUSH
21183: NOP4
21187: PPUSH
21188: NOP4
21192: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21193: NOP4
21197: PUSH
21198: LD_INT 0
21200: EQUAL
21201: IFFALSE 21301
21203: GO 21205
21205: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
21206: LD_INT 16
21208: PPUSH
21209: LD_INT 6
21211: PPUSH
21212: LD_INT 5
21214: PPUSH
21215: LD_INT 8
21217: PPUSH
21218: NOP4
21222: PUSH
21223: LD_INT 6
21225: PPUSH
21226: LD_INT 9
21228: PPUSH
21229: NOP4
21233: PUSH
21234: LD_INT 7
21236: PPUSH
21237: LD_INT 9
21239: PPUSH
21240: NOP4
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: PUSH
21250: NOP4
21254: ARRAY
21255: PPUSH
21256: NOP4
21260: PPUSH
21261: NOP4
21265: PPUSH
21266: NOP4
21270: PPUSH
21271: LD_INT 3
21273: PPUSH
21274: LD_INT 1
21276: PPUSH
21277: LD_INT 3
21279: PPUSH
21280: LD_INT 44
21282: PUSH
21283: LD_INT 46
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PPUSH
21290: EMPTY
21291: PPUSH
21292: EMPTY
21293: PPUSH
21294: LD_INT 1
21296: PPUSH
21297: NOP4
21301: END
// every 0 0$1 trigger timerStatus = 1 do
21302: NOP4
21306: PUSH
21307: LD_INT 1
21309: EQUAL
21310: IFFALSE 21347
21312: GO 21314
21314: DISABLE
// begin enable ;
21315: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
21316: LD_ADDR_OWVAR 47
21320: PUSH
21321: LD_STRING #Am08-1
21323: PUSH
21324: NOP4
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
21333: NOP4
21337: PUSH
21338: NOP4
21342: PUSH
21343: LD_INT 35
21345: MINUS
21346: ST_TO_ADDR
// end ; end_of_file
21347: END
// every 1 1$0 do
21348: GO 21350
21350: DISABLE
// begin if supply <= 13 and supply > 7 then
21351: NOP4
21355: PUSH
21356: LD_INT 13
21358: LESSEQUAL
21359: PUSH
21360: NOP4
21364: PUSH
21365: LD_INT 7
21367: GREATER
21368: AND
21369: IFFALSE 21392
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
21371: LD_INT 3
21373: PPUSH
21374: LD_INT 5
21376: PPUSH
21377: NOP4
21381: PPUSH
21382: LD_INT 5
21384: PPUSH
21385: LD_INT 1
21387: PPUSH
21388: NOP4
// if supply <= 7 and supply > 4 then
21392: NOP4
21396: PUSH
21397: LD_INT 7
21399: LESSEQUAL
21400: PUSH
21401: NOP4
21405: PUSH
21406: LD_INT 4
21408: GREATER
21409: AND
21410: IFFALSE 21433
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
21412: LD_INT 3
21414: PPUSH
21415: LD_INT 5
21417: PPUSH
21418: NOP4
21422: PPUSH
21423: LD_INT 20
21425: PPUSH
21426: LD_INT 1
21428: PPUSH
21429: NOP4
// if supply <= 4 and supply > 0 then
21433: NOP4
21437: PUSH
21438: LD_INT 4
21440: LESSEQUAL
21441: PUSH
21442: NOP4
21446: PUSH
21447: LD_INT 0
21449: GREATER
21450: AND
21451: IFFALSE 21474
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
21453: LD_INT 3
21455: PPUSH
21456: LD_INT 5
21458: PPUSH
21459: NOP4
21463: PPUSH
21464: LD_INT 21
21466: PPUSH
21467: LD_INT 1
21469: PPUSH
21470: NOP4
// if supply > 0 then
21474: NOP4
21478: PUSH
21479: LD_INT 0
21481: GREATER
21482: IFFALSE 21499
// begin supply = supply - 1 ;
21484: NOP4
21488: PUSH
21489: NOP4
21493: PUSH
21494: LD_INT 1
21496: MINUS
21497: ST_TO_ADDR
// enable ;
21498: ENABLE
// end ; end ; end_of_file
21499: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
21500: NOP4
21504: PUSH
21505: LD_INT 1
21507: EQUAL
21508: PUSH
21509: NOP4
21513: PPUSH
21514: NOP4
21518: AND
21519: IFFALSE 21531
21521: GO 21523
21523: DISABLE
// YouLost ( JMM ) ;
21524: LD_STRING JMM
21526: PPUSH
21527: NOP4
21531: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
21532: NOP4
21536: PUSH
21537: LD_INT 1
21539: EQUAL
21540: PUSH
21541: NOP4
21545: PPUSH
21546: NOP4
21550: AND
21551: IFFALSE 21583
21553: GO 21555
21555: DISABLE
// begin DialogueOn ;
21556: NOP4
// SayRadio ( Powell , D8a-Pow-1 ) ;
21560: NOP4
21564: PPUSH
21565: LD_STRING D8a-Pow-1
21567: PPUSH
21568: NOP4
// DialogueOff ;
21572: NOP4
// YouLost ( Dismissed ) ;
21576: LD_STRING Dismissed
21578: PPUSH
21579: NOP4
// end ;
21583: END
// every 0 0$1 trigger IsDead ( amDepot ) do
21584: NOP4
21588: PPUSH
21589: NOP4
21593: IFFALSE 21605
21595: GO 21597
21597: DISABLE
// YouLost ( Destroyed ) ; end_of_file
21598: LD_STRING Destroyed
21600: PPUSH
21601: NOP4
21605: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
21606: NOP4
21610: PPUSH
21611: NOP4
21615: IFFALSE 21960
21617: GO 21619
21619: DISABLE
21620: LD_INT 0
21622: PPUSH
// begin russianAI = 0 ;
21623: NOP4
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// escapeAvalaible = 1 ;
21631: NOP4
21635: PUSH
21636: LD_INT 1
21638: ST_TO_ADDR
// InGameOn ;
21639: NOP4
// SetAttitude ( 3 , 1 , att_friend , false ) ;
21643: LD_INT 3
21645: PPUSH
21646: LD_INT 1
21648: PPUSH
21649: LD_INT 1
21651: PPUSH
21652: LD_INT 0
21654: PPUSH
21655: NOP4
// SetAttitude ( 6 , 1 , att_friend , false ) ;
21659: LD_INT 6
21661: PPUSH
21662: LD_INT 1
21664: PPUSH
21665: LD_INT 1
21667: PPUSH
21668: LD_INT 0
21670: PPUSH
21671: NOP4
// ChangeSideFog ( 3 , 1 ) ;
21675: LD_INT 3
21677: PPUSH
21678: LD_INT 1
21680: PPUSH
21681: NOP4
// CenterOnXY ( 97 , 91 ) ;
21685: LD_INT 97
21687: PPUSH
21688: LD_INT 91
21690: PPUSH
21691: NOP4
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21695: LD_INT 22
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 21
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PPUSH
21719: NOP4
21723: PPUSH
21724: NOP4
// wait ( 0 0$01 ) ;
21728: LD_INT 35
21730: PPUSH
21731: NOP4
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21735: LD_INT 22
21737: PUSH
21738: LD_INT 3
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 21
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PPUSH
21759: NOP4
21763: PPUSH
21764: LD_INT 124
21766: PPUSH
21767: LD_INT 98
21769: PPUSH
21770: NOP4
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21774: LD_INT 22
21776: PUSH
21777: LD_INT 6
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 21
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PPUSH
21798: NOP4
21802: PPUSH
21803: NOP4
// wait ( 0 0$01 ) ;
21807: LD_INT 35
21809: PPUSH
21810: NOP4
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21814: LD_INT 22
21816: PUSH
21817: LD_INT 6
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PPUSH
21838: NOP4
21842: PPUSH
21843: LD_INT 124
21845: PPUSH
21846: LD_INT 98
21848: PPUSH
21849: NOP4
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21853: LD_INT 22
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 21
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PPUSH
21877: NOP4
21881: PPUSH
21882: LD_INT 124
21884: PPUSH
21885: LD_INT 98
21887: PPUSH
21888: NOP4
// wait ( 0 0$4 ) ;
21892: LD_INT 140
21894: PPUSH
21895: NOP4
// CenterOnXY ( 124 , 98 ) ;
21899: LD_INT 124
21901: PPUSH
21902: LD_INT 98
21904: PPUSH
21905: NOP4
// if SikorskyStatus = 1 then
21909: NOP4
21913: PUSH
21914: LD_INT 1
21916: EQUAL
21917: IFFALSE 21931
// begin Say ( Sikorski , D9-Sik-1 ) ;
21919: NOP4
21923: PPUSH
21924: LD_STRING D9-Sik-1
21926: PPUSH
21927: NOP4
// end ; if SikorskyStatus = 2 then
21931: NOP4
21935: PUSH
21936: LD_INT 2
21938: EQUAL
21939: IFFALSE 21960
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
21941: NOP4
21945: PPUSH
21946: LD_STRING D8b-Pow-1
21948: PPUSH
21949: NOP4
// YouLost ( Dismissed ) ;
21953: LD_STRING Dismissed
21955: PPUSH
21956: NOP4
// end ; end ;
21960: PPOPN 1
21962: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
21963: LD_INT 23
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 21
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 24
21985: PUSH
21986: LD_INT 250
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: PPUSH
21998: NOP4
22002: PUSH
22003: LD_INT 0
22005: EQUAL
22006: IFFALSE 22015
22008: GO 22010
22010: DISABLE
// FinishMission ;
22011: NOP4
22015: END
// export function FinishMission ; var tmp ; begin
22016: LD_INT 0
22018: PPUSH
22019: PPUSH
// AddMedal ( med1 , 1 ) ;
22020: LD_STRING med1
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: NOP4
// AddMedal ( med2 , 1 ) ;
22030: LD_STRING med2
22032: PPUSH
22033: LD_INT 1
22035: PPUSH
22036: NOP4
// AddMedal ( perfect , 1 ) ;
22040: LD_STRING perfect
22042: PPUSH
22043: LD_INT 1
22045: PPUSH
22046: NOP4
// GiveMedals ( Main ) ;
22050: LD_STRING Main
22052: PPUSH
22053: NOP4
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22057: LD_INT 22
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 23
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 21
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: LD_INT 25
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 25
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 25
22112: PUSH
22113: LD_INT 3
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 25
22122: PUSH
22123: LD_INT 4
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: PPUSH
22143: NOP4
22147: PPUSH
22148: NOP4
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22152: NOP4
22156: PPUSH
22157: NOP4
22161: PUSH
22162: LD_STRING JMM
22164: STR
22165: PPUSH
22166: NOP4
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22170: NOP4
22174: PPUSH
22175: NOP4
22179: PUSH
22180: LD_STRING Brown
22182: STR
22183: PPUSH
22184: NOP4
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22188: NOP4
22192: PPUSH
22193: NOP4
22197: PUSH
22198: LD_STRING Donaldson
22200: STR
22201: PPUSH
22202: NOP4
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22206: NOP4
22210: PPUSH
22211: NOP4
22215: PUSH
22216: LD_STRING Bobby
22218: STR
22219: PPUSH
22220: NOP4
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22224: NOP4
22228: PPUSH
22229: NOP4
22233: PUSH
22234: LD_STRING Cyrus
22236: STR
22237: PPUSH
22238: NOP4
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22242: NOP4
22246: PPUSH
22247: NOP4
22251: PUSH
22252: LD_STRING Lisa
22254: STR
22255: PPUSH
22256: NOP4
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22260: NOP4
22264: PPUSH
22265: NOP4
22269: PUSH
22270: LD_STRING Frank
22272: STR
22273: PPUSH
22274: NOP4
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22278: NOP4
22282: PPUSH
22283: NOP4
22287: PUSH
22288: LD_STRING Gladstone
22290: STR
22291: PPUSH
22292: NOP4
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22296: NOP4
22300: PPUSH
22301: NOP4
22305: PUSH
22306: LD_STRING Kikuchi
22308: STR
22309: PPUSH
22310: NOP4
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22314: NOP4
22318: PPUSH
22319: NOP4
22323: PUSH
22324: LD_STRING Denis
22326: STR
22327: PPUSH
22328: NOP4
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22332: NOP4
22336: PPUSH
22337: NOP4
22341: PUSH
22342: LD_STRING Joan
22344: STR
22345: PPUSH
22346: NOP4
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22350: NOP4
22354: PPUSH
22355: NOP4
22359: PUSH
22360: LD_STRING Houten
22362: STR
22363: PPUSH
22364: NOP4
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
22368: LD_INT 50
22370: PUSH
22371: EMPTY
22372: LIST
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 21
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 25
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 25
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 25
22419: PUSH
22420: LD_INT 3
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 25
22429: PUSH
22430: LD_INT 4
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: PPUSH
22450: NOP4
22454: PUSH
22455: NOP4
22459: PUSH
22460: NOP4
22464: PUSH
22465: NOP4
22469: PUSH
22470: NOP4
22474: PUSH
22475: NOP4
22479: PUSH
22480: NOP4
22484: PUSH
22485: NOP4
22489: PUSH
22490: NOP4
22494: PUSH
22495: NOP4
22499: PUSH
22500: NOP4
22504: PUSH
22505: NOP4
22509: PUSH
22510: NOP4
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: DIFF
22529: PPUSH
22530: LD_STRING 08_other_survivors
22532: PPUSH
22533: NOP4
// SaveBase ( GammaBaseArea ) ;
22537: LD_INT 23
22539: PPUSH
22540: NOP4
// YouWin ;
22544: NOP4
// end ;
22548: LD_VAR 0 1
22552: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22553: LD_INT 0
22555: PPUSH
22556: PPUSH
22557: PPUSH
22558: PPUSH
// gammaBase = [ ] ;
22559: NOP4
22563: PUSH
22564: EMPTY
22565: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22566: NOP4
22570: PUSH
22571: NOP4
22575: PPUSH
22576: LD_INT 22
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 21
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 50
22598: PUSH
22599: EMPTY
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: PPUSH
22607: NOP4
22611: ST_TO_ADDR
// for i in buildings do
22612: NOP4
22616: PUSH
22617: NOP4
22621: PUSH
22622: FOR_IN
22623: IFFALSE 23060
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22625: NOP4
22629: PPUSH
22630: NOP4
22634: PUSH
22635: LD_INT 6
22637: PUSH
22638: LD_INT 7
22640: PUSH
22641: LD_INT 8
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: IN
22649: IFFALSE 22763
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22651: NOP4
22655: PUSH
22656: NOP4
22660: PUSH
22661: NOP4
22665: PPUSH
22666: NOP4
22670: PUSH
22671: NOP4
22675: PPUSH
22676: NOP4
22680: PUSH
22681: NOP4
22685: PPUSH
22686: NOP4
22690: PUSH
22691: NOP4
22695: PPUSH
22696: NOP4
22700: PUSH
22701: NOP4
22705: PPUSH
22706: NOP4
22710: PUSH
22711: NOP4
22715: PPUSH
22716: NOP4
22720: PUSH
22721: NOP4
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: NOP4
22733: PUSH
22734: NOP4
22738: PPUSH
22739: LD_INT 2
22741: PPUSH
22742: NOP4
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: ADD
22760: ST_TO_ADDR
22761: GO 23058
// if GetBType ( i ) = b_bunker then
22763: NOP4
22767: PPUSH
22768: NOP4
22772: PUSH
22773: LD_INT 32
22775: EQUAL
22776: IFFALSE 22873
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22778: NOP4
22782: PUSH
22783: NOP4
22787: PUSH
22788: NOP4
22792: PPUSH
22793: NOP4
22797: PUSH
22798: NOP4
22802: PPUSH
22803: NOP4
22807: PUSH
22808: NOP4
22812: PPUSH
22813: NOP4
22817: PUSH
22818: NOP4
22822: PPUSH
22823: NOP4
22827: PUSH
22828: NOP4
22832: PPUSH
22833: NOP4
22837: PUSH
22838: NOP4
22842: PPUSH
22843: NOP4
22847: PUSH
22848: NOP4
22852: PPUSH
22853: NOP4
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: ADD
22870: ST_TO_ADDR
22871: GO 23058
// if GetBType ( i ) = b_factory then
22873: NOP4
22877: PPUSH
22878: NOP4
22882: PUSH
22883: LD_INT 3
22885: EQUAL
22886: IFFALSE 22976
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
22888: NOP4
22892: PUSH
22893: NOP4
22897: PPUSH
22898: LD_INT 1
22900: PPUSH
22901: NOP4
22905: PPUSH
22906: NOP4
22910: PUSH
22911: NOP4
22915: PPUSH
22916: NOP4
22920: PUSH
22921: NOP4
22925: PPUSH
22926: NOP4
22930: PUSH
22931: NOP4
22935: PPUSH
22936: NOP4
22940: PUSH
22941: NOP4
22945: PPUSH
22946: NOP4
22950: PUSH
22951: NOP4
22955: PPUSH
22956: NOP4
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: NOP4
22973: ST_TO_ADDR
22974: GO 23058
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22976: NOP4
22980: PUSH
22981: NOP4
22985: PUSH
22986: NOP4
22990: PPUSH
22991: NOP4
22995: PUSH
22996: NOP4
23000: PPUSH
23001: NOP4
23005: PUSH
23006: NOP4
23010: PPUSH
23011: NOP4
23015: PUSH
23016: NOP4
23020: PPUSH
23021: NOP4
23025: PUSH
23026: NOP4
23030: PPUSH
23031: NOP4
23035: PUSH
23036: NOP4
23040: PPUSH
23041: NOP4
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: ADD
23057: ST_TO_ADDR
// end ;
23058: GO 22622
23060: POP
23061: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
23062: NOP4
23066: PPUSH
23067: LD_STRING 08_GammaBase
23069: PPUSH
23070: NOP4
// end ;
23074: LD_VAR 0 2
23078: RET
