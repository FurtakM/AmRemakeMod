// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyBuilds ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 40
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 41
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 37
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyBuilds = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 35
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// defenders_list = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// varEvent1 = 0 ;
 126: LD_ADDR_EXP 39
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// timerStatus = 0 ;
 134: LD_ADDR_EXP 34
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 142: LD_ADDR_EXP 38
 146: PUSH
 147: LD_INT 18
 149: PUSH
 150: LD_INT 17
 152: PUSH
 153: LD_INT 15
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_OWVAR 67
 165: ARRAY
 166: ST_TO_ADDR
// debugMode = 0 ;
 167: LD_ADDR_EXP 42
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// PrepareDifficulty ;
 175: CALL 5030 0 0
// PrepareBase ;
 179: CALL 690 0 0
// PrepareHeroes ;
 183: CALL 310 0 0
// PrepareSoldiers ;
 187: CALL 535 0 0
// PrepareRussianCommander ;
 191: CALL 3835 0 0
// PrepareRussians ;
 195: CALL 4153 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 199: LD_INT 22
 201: PUSH
 202: LD_INT 3
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 25
 211: PUSH
 212: LD_INT 2
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PPUSH
 223: CALL_OW 69
 227: PPUSH
 228: LD_INT 0
 230: PPUSH
 231: LD_INT 90
 233: PPUSH
 234: LD_INT 86
 236: PPUSH
 237: LD_INT 3
 239: PPUSH
 240: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 244: LD_INT 3
 246: PPUSH
 247: LD_INT 24
 249: PPUSH
 250: LD_INT 3
 252: PPUSH
 253: LD_EXP 24
 257: PPUSH
 258: LD_EXP 25
 262: PPUSH
 263: CALL_OW 12
 267: PPUSH
 268: LD_INT 6
 270: PPUSH
 271: LD_INT 4
 273: PPUSH
 274: CALL 6248 0 6
// PrepareCutsceneAttack ;
 278: CALL 3887 0 0
// end ;
 282: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 283: LD_EXP 42
 287: PUSH
 288: LD_INT 1
 290: EQUAL
 291: IFFALSE 307
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// fogoff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// end ; end_of_file
 307: PPOPN 1
 309: END
// export function PrepareHeroes ; var i ; begin
 310: LD_INT 0
 312: PPUSH
 313: PPUSH
// uc_side = 1 ;
 314: LD_ADDR_OWVAR 20
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// uc_nation = 1 ;
 322: LD_ADDR_OWVAR 21
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// if gammaCommander = 1 then
 330: LD_EXP 11
 334: PUSH
 335: LD_INT 1
 337: EQUAL
 338: IFFALSE 371
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 340: LD_ADDR_EXP 3
 344: PUSH
 345: LD_STRING Donaldson
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: CALL 4571 0 2
 355: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 356: LD_EXP 3
 360: PPUSH
 361: LD_INT 5
 363: PPUSH
 364: LD_INT 0
 366: PPUSH
 367: CALL_OW 49
// end ; if gammaCommander = 2 then
 371: LD_EXP 11
 375: PUSH
 376: LD_INT 2
 378: EQUAL
 379: IFFALSE 412
// begin Brown = PrepareUnit ( Brown , true ) ;
 381: LD_ADDR_EXP 2
 385: PUSH
 386: LD_STRING Brown
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: CALL 4571 0 2
 396: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 397: LD_EXP 2
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: LD_INT 0
 407: PPUSH
 408: CALL_OW 49
// end ; if gammaCommander = 3 then
 412: LD_EXP 11
 416: PUSH
 417: LD_INT 3
 419: EQUAL
 420: IFFALSE 453
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 422: LD_ADDR_EXP 12
 426: PUSH
 427: LD_STRING VanHouten
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL 4571 0 2
 437: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 438: LD_EXP 12
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 453: LD_ADDR_EXP 21
 457: PUSH
 458: LD_STRING Harisson
 460: PPUSH
 461: LD_INT 0
 463: PPUSH
 464: CALL 4571 0 2
 468: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 469: LD_ADDR_EXP 22
 473: PUSH
 474: LD_STRING Powell
 476: PPUSH
 477: LD_INT 0
 479: PPUSH
 480: CALL 4571 0 2
 484: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 485: LD_ADDR_EXP 10
 489: PUSH
 490: LD_STRING 07_othersGamma
 492: PPUSH
 493: CALL_OW 31
 497: ST_TO_ADDR
// for i in others_gamma do
 498: LD_ADDR_VAR 0 2
 502: PUSH
 503: LD_EXP 10
 507: PUSH
 508: FOR_IN
 509: IFFALSE 528
// PlaceUnitArea ( i , GammaSpawn , false ) ;
 511: LD_VAR 0 2
 515: PPUSH
 516: LD_INT 5
 518: PPUSH
 519: LD_INT 0
 521: PPUSH
 522: CALL_OW 49
 526: GO 508
 528: POP
 529: POP
// end ;
 530: LD_VAR 0 1
 534: RET
// export function PrepareSoldiers ; var i ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// uc_side = 1 ;
 539: LD_ADDR_OWVAR 20
 543: PUSH
 544: LD_INT 1
 546: ST_TO_ADDR
// uc_nation = 1 ;
 547: LD_ADDR_OWVAR 21
 551: PUSH
 552: LD_INT 1
 554: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: LD_INT 22
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 30
 572: PUSH
 573: LD_INT 32
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: PPUSH
 584: CALL_OW 69
 588: PUSH
 589: FOR_IN
 590: IFFALSE 618
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 592: LD_INT 1
 594: PPUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_VAR 0 2
 602: PPUSH
 603: LD_INT 4
 605: PPUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 4920 0 6
 616: GO 589
 618: POP
 619: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
 620: LD_ADDR_VAR 0 2
 624: PUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 30
 637: PUSH
 638: LD_INT 31
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: FOR_IN
 655: IFFALSE 683
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 657: LD_INT 1
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_VAR 0 2
 667: PPUSH
 668: LD_INT 4
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 4920 0 6
 681: GO 654
 683: POP
 684: POP
// end ;
 685: LD_VAR 0 1
 689: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
 690: LD_INT 0
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
 696: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
 697: LD_INT 71
 699: PPUSH
 700: LD_INT 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
 710: LD_ADDR_VAR 0 2
 714: PUSH
 715: LD_STRING GammaBase
 717: PPUSH
 718: EMPTY
 719: PPUSH
 720: CALL_OW 30
 724: ST_TO_ADDR
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := 1 ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// for i in blist do
 741: LD_ADDR_VAR 0 3
 745: PUSH
 746: LD_VAR 0 2
 750: PUSH
 751: FOR_IN
 752: IFFALSE 1150
// begin bc_type := i [ 1 ] ;
 754: LD_ADDR_OWVAR 42
 758: PUSH
 759: LD_VAR 0 3
 763: PUSH
 764: LD_INT 1
 766: ARRAY
 767: ST_TO_ADDR
// bc_level := i [ 5 ] ;
 768: LD_ADDR_OWVAR 43
 772: PUSH
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 5
 780: ARRAY
 781: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
 782: LD_VAR 0 3
 786: PUSH
 787: LD_INT 1
 789: ARRAY
 790: PUSH
 791: LD_INT 7
 793: PUSH
 794: LD_INT 8
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: IN
 801: IFFALSE 857
// begin bc_kind1 := i [ 7 ] ;
 803: LD_ADDR_OWVAR 44
 807: PUSH
 808: LD_VAR 0 3
 812: PUSH
 813: LD_INT 7
 815: ARRAY
 816: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
 817: LD_STRING 06_remoteVehs_1
 819: PPUSH
 820: LD_INT 0
 822: PPUSH
 823: CALL_OW 30
 827: PUSH
 828: LD_INT 1
 830: EQUAL
 831: IFFALSE 843
// begin bc_kind2 := 15 ;
 833: LD_ADDR_OWVAR 45
 837: PUSH
 838: LD_INT 15
 840: ST_TO_ADDR
// end else
 841: GO 857
// begin bc_kind2 := i [ 8 ] ;
 843: LD_ADDR_OWVAR 45
 847: PUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 8
 855: ARRAY
 856: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
 857: LD_OWVAR 42
 861: PUSH
 862: LD_INT 0
 864: EQUAL
 865: IFFALSE 983
// begin bc_type := b_warehouse ;
 867: LD_ADDR_OWVAR 42
 871: PUSH
 872: LD_INT 1
 874: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 875: LD_ADDR_EXP 36
 879: PUSH
 880: LD_VAR 0 3
 884: PUSH
 885: LD_INT 2
 887: ARRAY
 888: PPUSH
 889: LD_VAR 0 3
 893: PUSH
 894: LD_INT 3
 896: ARRAY
 897: PPUSH
 898: LD_VAR 0 3
 902: PUSH
 903: LD_INT 4
 905: ARRAY
 906: PPUSH
 907: CALL_OW 47
 911: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
 912: LD_EXP 36
 916: PPUSH
 917: LD_STRING gamma
 919: PPUSH
 920: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
 924: LD_EXP 36
 928: PPUSH
 929: CALL_OW 274
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: LD_INT 200
 939: PUSH
 940: LD_INT 150
 942: PUSH
 943: LD_INT 100
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: PUSH
 951: LD_OWVAR 67
 955: ARRAY
 956: PPUSH
 957: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
 961: LD_EXP 36
 965: PPUSH
 966: CALL_OW 274
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 200
 976: PPUSH
 977: CALL_OW 277
// end else
 981: GO 1115
// begin if bc_type = 4 then
 983: LD_OWVAR 42
 987: PUSH
 988: LD_INT 4
 990: EQUAL
 991: IFFALSE 1040
// begin bc_type = 5 ;
 993: LD_ADDR_OWVAR 42
 997: PUSH
 998: LD_INT 5
1000: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1001: LD_ADDR_VAR 0 4
1005: PUSH
1006: LD_VAR 0 3
1010: PUSH
1011: LD_INT 2
1013: ARRAY
1014: PPUSH
1015: LD_VAR 0 3
1019: PUSH
1020: LD_INT 3
1022: ARRAY
1023: PPUSH
1024: LD_VAR 0 3
1028: PUSH
1029: LD_INT 4
1031: ARRAY
1032: PPUSH
1033: CALL_OW 47
1037: ST_TO_ADDR
// end else
1038: GO 1115
// begin bc_type := i [ 1 ] ;
1040: LD_ADDR_OWVAR 42
1044: PUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_INT 1
1052: ARRAY
1053: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1054: LD_STRING 06_remoteVehs_1
1056: PPUSH
1057: LD_INT 0
1059: PPUSH
1060: CALL_OW 30
1064: PUSH
1065: LD_INT 1
1067: EQUAL
1068: IFFALSE 1078
// bc_type := b_lab_full ;
1070: LD_ADDR_OWVAR 42
1074: PUSH
1075: LD_INT 8
1077: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1078: LD_ADDR_VAR 0 4
1082: PUSH
1083: LD_VAR 0 3
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: PPUSH
1092: LD_VAR 0 3
1096: PUSH
1097: LD_INT 3
1099: ARRAY
1100: PPUSH
1101: LD_VAR 0 3
1105: PUSH
1106: LD_INT 4
1108: ARRAY
1109: PPUSH
1110: CALL_OW 47
1114: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1115: LD_VAR 0 4
1119: PPUSH
1120: CALL_OW 266
1124: PUSH
1125: LD_INT 32
1127: EQUAL
1128: IFFALSE 1148
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1130: LD_VAR 0 4
1134: PPUSH
1135: LD_VAR 0 3
1139: PUSH
1140: LD_INT 7
1142: ARRAY
1143: PPUSH
1144: CALL_OW 431
// end ;
1148: GO 751
1150: POP
1151: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1152: LD_STRING 06_remoteVehs_1
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL_OW 30
1162: PUSH
1163: LD_INT 1
1165: EQUAL
1166: IFFALSE 1370
// begin bc_type = 36 ;
1168: LD_ADDR_OWVAR 42
1172: PUSH
1173: LD_INT 36
1175: ST_TO_ADDR
// bc_level = 4 ;
1176: LD_ADDR_OWVAR 43
1180: PUSH
1181: LD_INT 4
1183: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1184: LD_INT 62
1186: PPUSH
1187: LD_INT 12
1189: PPUSH
1190: LD_INT 3
1192: PPUSH
1193: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1197: LD_ADDR_VAR 0 3
1201: PUSH
1202: DOUBLE
1203: LD_INT 1
1205: DEC
1206: ST_TO_ADDR
1207: LD_INT 3
1209: PUSH
1210: LD_INT 2
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: PUSH
1221: LD_OWVAR 67
1225: ARRAY
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1368
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1230: LD_ADDR_OWVAR 37
1234: PUSH
1235: LD_INT 3
1237: PUSH
1238: LD_INT 2
1240: PUSH
1241: LD_INT 3
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: CALL_OW 12
1258: ARRAY
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_OWVAR 67
1272: ARRAY
1273: ST_TO_ADDR
// vc_engine = 1 ;
1274: LD_ADDR_OWVAR 39
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// vc_control = 2 ;
1282: LD_ADDR_OWVAR 38
1286: PUSH
1287: LD_INT 2
1289: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1290: LD_ADDR_OWVAR 40
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 4
1300: PUSH
1301: LD_INT 5
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 1
1311: PPUSH
1312: LD_INT 3
1314: PPUSH
1315: CALL_OW 12
1319: ARRAY
1320: ST_TO_ADDR
// veh = CreateVehicle ;
1321: LD_ADDR_VAR 0 5
1325: PUSH
1326: CALL_OW 45
1330: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
1331: LD_VAR 0 5
1335: PPUSH
1336: LD_EXP 36
1340: PPUSH
1341: CALL_OW 250
1345: PPUSH
1346: LD_EXP 36
1350: PPUSH
1351: CALL_OW 251
1355: PPUSH
1356: LD_INT 7
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 50
// end ;
1366: GO 1227
1368: POP
1369: POP
// end ; end ;
1370: LD_VAR 0 1
1374: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
1375: LD_INT 0
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
// uc_side = 1 ;
1381: LD_ADDR_OWVAR 20
1385: PUSH
1386: LD_INT 1
1388: ST_TO_ADDR
// uc_nation = 1 ;
1389: LD_ADDR_OWVAR 21
1393: PUSH
1394: LD_INT 1
1396: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
1397: LD_ADDR_EXP 13
1401: PUSH
1402: LD_STRING 06c_Denis
1404: PPUSH
1405: LD_INT 1
1407: PPUSH
1408: CALL 4571 0 2
1412: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
1413: LD_EXP 13
1417: PPUSH
1418: LD_INT 4
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
// if IsOk ( Denis ) then
1428: LD_EXP 13
1432: PPUSH
1433: CALL_OW 302
1437: IFFALSE 1453
// i = i + 1 ;
1439: LD_ADDR_VAR 0 2
1443: PUSH
1444: LD_VAR 0 2
1448: PUSH
1449: LD_INT 1
1451: PLUS
1452: ST_TO_ADDR
// Joan = PrepareUnit ( 06c_Joan , true ) ;
1453: LD_ADDR_EXP 14
1457: PUSH
1458: LD_STRING 06c_Joan
1460: PPUSH
1461: LD_INT 1
1463: PPUSH
1464: CALL 4571 0 2
1468: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
1469: LD_EXP 14
1473: PPUSH
1474: LD_INT 4
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: CALL_OW 49
// if IsOk ( Joan ) then
1484: LD_EXP 14
1488: PPUSH
1489: CALL_OW 302
1493: IFFALSE 1509
// i = i + 1 ;
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: LD_VAR 0 2
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
1509: LD_STRING GladstoneIn07
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 30
1519: PUSH
1520: LD_INT 0
1522: EQUAL
1523: IFFALSE 1570
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
1525: LD_ADDR_EXP 8
1529: PUSH
1530: LD_STRING 06c_Gladstone
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL 4571 0 2
1540: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
1541: LD_EXP 8
1545: PPUSH
1546: LD_INT 4
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 49
// i = i + 1 ;
1556: LD_ADDR_VAR 0 2
1560: PUSH
1561: LD_VAR 0 2
1565: PUSH
1566: LD_INT 1
1568: PLUS
1569: ST_TO_ADDR
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_STRING OtherStayInDelta
1577: PPUSH
1578: CALL_OW 31
1582: ST_TO_ADDR
// for j = 3 to 3 + 3 - i do
1583: LD_ADDR_VAR 0 3
1587: PUSH
1588: DOUBLE
1589: LD_INT 3
1591: DEC
1592: ST_TO_ADDR
1593: LD_INT 3
1595: PUSH
1596: LD_INT 3
1598: PLUS
1599: PUSH
1600: LD_VAR 0 2
1604: MINUS
1605: PUSH
1606: FOR_TO
1607: IFFALSE 1632
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
1609: LD_VAR 0 4
1613: PUSH
1614: LD_VAR 0 3
1618: ARRAY
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: LD_INT 0
1625: PPUSH
1626: CALL_OW 49
1630: GO 1606
1632: POP
1633: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: LD_STRING 06_other_apemans
1641: PPUSH
1642: CALL_OW 31
1646: ST_TO_ADDR
// if other >= 5 then
1647: LD_VAR 0 4
1651: PUSH
1652: LD_INT 5
1654: GREATEREQUAL
1655: IFFALSE 1700
// begin for i := 1 to 5 do
1657: LD_ADDR_VAR 0 2
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 5
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1696
// begin PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
1673: LD_VAR 0 4
1677: PUSH
1678: LD_VAR 0 2
1682: ARRAY
1683: PPUSH
1684: LD_INT 4
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL_OW 49
// end ;
1694: GO 1670
1696: POP
1697: POP
// end else
1698: GO 1732
// begin for i in other do
1700: LD_ADDR_VAR 0 2
1704: PUSH
1705: LD_VAR 0 4
1709: PUSH
1710: FOR_IN
1711: IFFALSE 1730
// PlaceUnitArea ( i , GammaSupport , false ) ;
1713: LD_VAR 0 2
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 49
1728: GO 1710
1730: POP
1731: POP
// end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
1732: LD_INT 4
1734: PPUSH
1735: LD_INT 22
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 21
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PPUSH
1759: CALL_OW 70
1763: PPUSH
1764: LD_INT 53
1766: PPUSH
1767: LD_INT 19
1769: PPUSH
1770: CALL_OW 111
// firstAttack = 1 ;
1774: LD_ADDR_EXP 32
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
// end ;
1782: LD_VAR 0 1
1786: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
1787: LD_INT 0
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_STRING 07_vehicles
1801: PPUSH
1802: EMPTY
1803: PPUSH
1804: CALL_OW 30
1808: ST_TO_ADDR
// uc_side = 1 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// uc_nation = 1 ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// if vehicles > 0 then
1825: LD_VAR 0 4
1829: PUSH
1830: LD_INT 0
1832: GREATER
1833: IFFALSE 1972
// begin for i = 1 to vehicles do
1835: LD_ADDR_VAR 0 2
1839: PUSH
1840: DOUBLE
1841: LD_INT 1
1843: DEC
1844: ST_TO_ADDR
1845: LD_VAR 0 4
1849: PUSH
1850: FOR_TO
1851: IFFALSE 1970
// begin vc_chassis = vehicles [ i ] ;
1853: LD_ADDR_OWVAR 37
1857: PUSH
1858: LD_VAR 0 4
1862: PUSH
1863: LD_VAR 0 2
1867: ARRAY
1868: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
1869: LD_ADDR_OWVAR 39
1873: PUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_VAR 0 2
1883: PUSH
1884: LD_INT 1
1886: PLUS
1887: ARRAY
1888: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
1889: LD_ADDR_OWVAR 38
1893: PUSH
1894: LD_VAR 0 4
1898: PUSH
1899: LD_VAR 0 2
1903: PUSH
1904: LD_INT 2
1906: PLUS
1907: ARRAY
1908: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
1909: LD_ADDR_OWVAR 40
1913: PUSH
1914: LD_VAR 0 4
1918: PUSH
1919: LD_VAR 0 2
1923: PUSH
1924: LD_INT 3
1926: PLUS
1927: ARRAY
1928: ST_TO_ADDR
// veh = CreateVehicle ;
1929: LD_ADDR_VAR 0 5
1933: PUSH
1934: CALL_OW 45
1938: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
1939: LD_VAR 0 5
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: LD_INT 0
1949: PPUSH
1950: CALL_OW 49
// i = i + 3 ;
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: LD_VAR 0 2
1963: PUSH
1964: LD_INT 3
1966: PLUS
1967: ST_TO_ADDR
// end ;
1968: GO 1850
1970: POP
1971: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
1972: LD_ADDR_EXP 1
1976: PUSH
1977: LD_EXP 41
1981: PUSH
1982: LD_STRING JMM
1984: STR
1985: PPUSH
1986: LD_INT 1
1988: PPUSH
1989: CALL 4571 0 2
1993: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
1994: LD_EXP 11
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: PUSH
2003: LD_EXP 11
2007: PUSH
2008: LD_INT 3
2010: EQUAL
2011: OR
2012: IFFALSE 2036
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
2014: LD_ADDR_EXP 2
2018: PUSH
2019: LD_EXP 41
2023: PUSH
2024: LD_STRING Brown
2026: STR
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL 4571 0 2
2035: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
2036: LD_EXP 11
2040: PUSH
2041: LD_INT 2
2043: EQUAL
2044: PUSH
2045: LD_EXP 11
2049: PUSH
2050: LD_INT 3
2052: EQUAL
2053: OR
2054: IFFALSE 2078
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
2056: LD_ADDR_EXP 3
2060: PUSH
2061: LD_EXP 41
2065: PUSH
2066: LD_STRING Donaldson
2068: STR
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL 4571 0 2
2077: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2078: LD_ADDR_EXP 4
2082: PUSH
2083: LD_EXP 41
2087: PUSH
2088: LD_STRING Bobby
2090: STR
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL 4571 0 2
2099: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2100: LD_ADDR_EXP 5
2104: PUSH
2105: LD_EXP 41
2109: PUSH
2110: LD_STRING Cyrus
2112: STR
2113: PPUSH
2114: LD_INT 1
2116: PPUSH
2117: CALL 4571 0 2
2121: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2122: LD_ADDR_EXP 6
2126: PUSH
2127: LD_EXP 41
2131: PUSH
2132: LD_STRING Lisa
2134: STR
2135: PPUSH
2136: LD_INT 1
2138: PPUSH
2139: CALL 4571 0 2
2143: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2144: LD_ADDR_EXP 7
2148: PUSH
2149: LD_EXP 41
2153: PUSH
2154: LD_STRING Frank
2156: STR
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL 4571 0 2
2165: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
2166: LD_ADDR_EXP 8
2170: PUSH
2171: LD_EXP 41
2175: PUSH
2176: LD_STRING Gladstone
2178: STR
2179: PPUSH
2180: LD_INT 1
2182: PPUSH
2183: CALL 4571 0 2
2187: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
2188: LD_ADDR_EXP 9
2192: PUSH
2193: LD_EXP 41
2197: PUSH
2198: LD_STRING Kikuchi
2200: STR
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: CALL 4571 0 2
2209: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2210: LD_EXP 11
2214: PUSH
2215: LD_INT 1
2217: EQUAL
2218: PUSH
2219: LD_EXP 11
2223: PUSH
2224: LD_INT 3
2226: EQUAL
2227: OR
2228: IFFALSE 2245
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2230: LD_EXP 2
2234: PPUSH
2235: LD_INT 4
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
2245: LD_EXP 11
2249: PUSH
2250: LD_INT 2
2252: EQUAL
2253: PUSH
2254: LD_EXP 11
2258: PUSH
2259: LD_INT 3
2261: EQUAL
2262: OR
2263: IFFALSE 2280
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2265: LD_EXP 3
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2280: LD_ADDR_VAR 0 5
2284: PUSH
2285: LD_INT 4
2287: PPUSH
2288: LD_INT 22
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 21
2300: PUSH
2301: LD_INT 2
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: LD_INT 58
2310: PUSH
2311: EMPTY
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PPUSH
2319: CALL_OW 70
2323: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2324: LD_ADDR_EXP 1
2328: PUSH
2329: LD_EXP 41
2333: PUSH
2334: LD_STRING JMM
2336: STR
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL 4571 0 2
2345: ST_TO_ADDR
// if veh > 0 then
2346: LD_VAR 0 5
2350: PUSH
2351: LD_INT 0
2353: GREATER
2354: IFFALSE 2376
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
2356: LD_EXP 1
2360: PPUSH
2361: LD_VAR 0 5
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 52
// end else
2374: GO 2391
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 4
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2391: LD_ADDR_VAR 0 5
2395: PUSH
2396: LD_INT 4
2398: PPUSH
2399: LD_INT 22
2401: PUSH
2402: LD_INT 1
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 21
2411: PUSH
2412: LD_INT 2
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 58
2421: PUSH
2422: EMPTY
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PPUSH
2430: CALL_OW 70
2434: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2435: LD_ADDR_EXP 4
2439: PUSH
2440: LD_EXP 41
2444: PUSH
2445: LD_STRING Bobby
2447: STR
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: CALL 4571 0 2
2456: ST_TO_ADDR
// if veh > 0 then
2457: LD_VAR 0 5
2461: PUSH
2462: LD_INT 0
2464: GREATER
2465: IFFALSE 2487
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
2467: LD_EXP 4
2471: PPUSH
2472: LD_VAR 0 5
2476: PUSH
2477: LD_INT 1
2479: ARRAY
2480: PPUSH
2481: CALL_OW 52
// end else
2485: GO 2502
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2487: LD_EXP 4
2491: PPUSH
2492: LD_INT 4
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2502: LD_ADDR_VAR 0 5
2506: PUSH
2507: LD_INT 4
2509: PPUSH
2510: LD_INT 22
2512: PUSH
2513: LD_INT 1
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 21
2522: PUSH
2523: LD_INT 2
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 58
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: PPUSH
2541: CALL_OW 70
2545: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2546: LD_ADDR_EXP 5
2550: PUSH
2551: LD_EXP 41
2555: PUSH
2556: LD_STRING Cyrus
2558: STR
2559: PPUSH
2560: LD_INT 1
2562: PPUSH
2563: CALL 4571 0 2
2567: ST_TO_ADDR
// if veh > 0 then
2568: LD_VAR 0 5
2572: PUSH
2573: LD_INT 0
2575: GREATER
2576: IFFALSE 2598
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
2578: LD_EXP 5
2582: PPUSH
2583: LD_VAR 0 5
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// end else
2596: GO 2613
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2598: LD_EXP 5
2602: PPUSH
2603: LD_INT 4
2605: PPUSH
2606: LD_INT 0
2608: PPUSH
2609: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2613: LD_ADDR_VAR 0 5
2617: PUSH
2618: LD_INT 4
2620: PPUSH
2621: LD_INT 22
2623: PUSH
2624: LD_INT 1
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 21
2633: PUSH
2634: LD_INT 2
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 58
2643: PUSH
2644: EMPTY
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: PPUSH
2652: CALL_OW 70
2656: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2657: LD_ADDR_EXP 6
2661: PUSH
2662: LD_EXP 41
2666: PUSH
2667: LD_STRING Lisa
2669: STR
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: CALL 4571 0 2
2678: ST_TO_ADDR
// if veh > 0 then
2679: LD_VAR 0 5
2683: PUSH
2684: LD_INT 0
2686: GREATER
2687: IFFALSE 2709
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
2689: LD_EXP 6
2693: PPUSH
2694: LD_VAR 0 5
2698: PUSH
2699: LD_INT 1
2701: ARRAY
2702: PPUSH
2703: CALL_OW 52
// end else
2707: GO 2724
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2709: LD_EXP 6
2713: PPUSH
2714: LD_INT 4
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2724: LD_ADDR_VAR 0 5
2728: PUSH
2729: LD_INT 4
2731: PPUSH
2732: LD_INT 22
2734: PUSH
2735: LD_INT 1
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 21
2744: PUSH
2745: LD_INT 2
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 58
2754: PUSH
2755: EMPTY
2756: LIST
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 70
2767: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2768: LD_ADDR_EXP 7
2772: PUSH
2773: LD_EXP 41
2777: PUSH
2778: LD_STRING Frank
2780: STR
2781: PPUSH
2782: LD_INT 1
2784: PPUSH
2785: CALL 4571 0 2
2789: ST_TO_ADDR
// if veh > 0 then
2790: LD_VAR 0 5
2794: PUSH
2795: LD_INT 0
2797: GREATER
2798: IFFALSE 2820
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
2800: LD_EXP 7
2804: PPUSH
2805: LD_VAR 0 5
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: PPUSH
2814: CALL_OW 52
// end else
2818: GO 2835
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
2820: LD_EXP 7
2824: PPUSH
2825: LD_INT 4
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2835: LD_ADDR_VAR 0 5
2839: PUSH
2840: LD_INT 4
2842: PPUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: LD_INT 21
2855: PUSH
2856: LD_INT 2
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_INT 58
2865: PUSH
2866: EMPTY
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: LIST
2873: PPUSH
2874: CALL_OW 70
2878: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
2879: LD_ADDR_EXP 8
2883: PUSH
2884: LD_EXP 41
2888: PUSH
2889: LD_STRING Gladstone
2891: STR
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: CALL 4571 0 2
2900: ST_TO_ADDR
// if veh > 0 then
2901: LD_VAR 0 5
2905: PUSH
2906: LD_INT 0
2908: GREATER
2909: IFFALSE 2931
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
2911: LD_EXP 8
2915: PPUSH
2916: LD_VAR 0 5
2920: PUSH
2921: LD_INT 1
2923: ARRAY
2924: PPUSH
2925: CALL_OW 52
// end else
2929: GO 2946
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2931: LD_EXP 8
2935: PPUSH
2936: LD_INT 4
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2946: LD_ADDR_VAR 0 5
2950: PUSH
2951: LD_INT 4
2953: PPUSH
2954: LD_INT 22
2956: PUSH
2957: LD_INT 1
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 21
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 58
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: LIST
2984: PPUSH
2985: CALL_OW 70
2989: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
2990: LD_ADDR_EXP 9
2994: PUSH
2995: LD_EXP 41
2999: PUSH
3000: LD_STRING Kikuchi
3002: STR
3003: PPUSH
3004: LD_INT 1
3006: PPUSH
3007: CALL 4571 0 2
3011: ST_TO_ADDR
// if veh > 0 then
3012: LD_VAR 0 5
3016: PUSH
3017: LD_INT 0
3019: GREATER
3020: IFFALSE 3042
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
3022: LD_EXP 9
3026: PPUSH
3027: LD_VAR 0 5
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PPUSH
3036: CALL_OW 52
// end else
3040: GO 3057
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
3042: LD_EXP 9
3046: PPUSH
3047: LD_INT 4
3049: PPUSH
3050: LD_INT 0
3052: PPUSH
3053: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: LD_STRING 07c_others
3064: PPUSH
3065: CALL_OW 31
3069: ST_TO_ADDR
// for i in other do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: LD_VAR 0 3
3079: PUSH
3080: FOR_IN
3081: IFFALSE 3174
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3083: LD_ADDR_VAR 0 5
3087: PUSH
3088: LD_INT 4
3090: PPUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 1
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 21
3103: PUSH
3104: LD_INT 2
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: LD_INT 58
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: PPUSH
3122: CALL_OW 70
3126: ST_TO_ADDR
// if veh > 0 then
3127: LD_VAR 0 5
3131: PUSH
3132: LD_INT 0
3134: GREATER
3135: IFFALSE 3157
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_VAR 0 5
3146: PUSH
3147: LD_INT 1
3149: ARRAY
3150: PPUSH
3151: CALL_OW 52
// end else
3155: GO 3172
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
3157: LD_VAR 0 2
3161: PPUSH
3162: LD_INT 4
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 49
// end ; end ;
3172: GO 3080
3174: POP
3175: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
3176: LD_INT 4
3178: PPUSH
3179: LD_INT 22
3181: PUSH
3182: LD_INT 1
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: EMPTY
3190: LIST
3191: PPUSH
3192: CALL_OW 70
3196: PPUSH
3197: LD_INT 53
3199: PPUSH
3200: LD_INT 19
3202: PPUSH
3203: CALL_OW 111
// end ;
3207: LD_VAR 0 1
3211: RET
// export function PrepareSikorsky ; begin
3212: LD_INT 0
3214: PPUSH
// uc_side = 4 ;
3215: LD_ADDR_OWVAR 20
3219: PUSH
3220: LD_INT 4
3222: ST_TO_ADDR
// uc_nation = 1 ;
3223: LD_ADDR_OWVAR 21
3227: PUSH
3228: LD_INT 1
3230: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
3231: LD_ADDR_EXP 15
3235: PUSH
3236: LD_STRING Sikorski
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL 4571 0 2
3246: ST_TO_ADDR
// vc_engine = 1 ;
3247: LD_ADDR_OWVAR 39
3251: PUSH
3252: LD_INT 1
3254: ST_TO_ADDR
// vc_control = 1 ;
3255: LD_ADDR_OWVAR 38
3259: PUSH
3260: LD_INT 1
3262: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
3263: LD_ADDR_OWVAR 40
3267: PUSH
3268: LD_INT 5
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 4
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_OWVAR 67
3286: ARRAY
3287: ST_TO_ADDR
// vc_chassis = 4 ;
3288: LD_ADDR_OWVAR 37
3292: PUSH
3293: LD_INT 4
3295: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
3296: LD_ADDR_EXP 16
3300: PUSH
3301: CALL_OW 45
3305: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
3306: LD_EXP 16
3310: PPUSH
3311: LD_INT 9
3313: PPUSH
3314: LD_INT 0
3316: PPUSH
3317: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
3321: LD_EXP 15
3325: PPUSH
3326: LD_EXP 16
3330: PPUSH
3331: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
3335: LD_EXP 16
3339: PPUSH
3340: LD_INT 5
3342: PPUSH
3343: CALL_OW 113
// end ;
3347: LD_VAR 0 1
3351: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
3352: LD_INT 0
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
3358: LD_ADDR_VAR 0 2
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 8
3370: PUSH
3371: LD_INT 7
3373: PUSH
3374: LD_INT 7
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3486
// begin uc_side = 4 ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_INT 4
3398: ST_TO_ADDR
// uc_nation = 1 ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_INT 1
3406: ST_TO_ADDR
// hc_name =  ;
3407: LD_ADDR_OWVAR 26
3411: PUSH
3412: LD_STRING 
3414: ST_TO_ADDR
// hc_gallery =  ;
3415: LD_ADDR_OWVAR 33
3419: PUSH
3420: LD_STRING 
3422: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
3423: LD_INT 0
3425: PPUSH
3426: LD_INT 1
3428: PPUSH
3429: LD_INT 5
3431: PPUSH
3432: LD_INT 8
3434: PPUSH
3435: CALL_OW 12
3439: PPUSH
3440: CALL_OW 380
// un = CreateHuman ;
3444: LD_ADDR_VAR 0 3
3448: PUSH
3449: CALL_OW 44
3453: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_INT 9
3461: PPUSH
3462: LD_INT 0
3464: PPUSH
3465: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3469: LD_VAR 0 3
3473: PPUSH
3474: LD_INT 53
3476: PPUSH
3477: LD_INT 23
3479: PPUSH
3480: CALL_OW 111
// end ;
3484: GO 3388
3486: POP
3487: POP
// for i = 1 to 3 do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 3
3500: PUSH
3501: FOR_TO
3502: IFFALSE 3599
// begin uc_side = 4 ;
3504: LD_ADDR_OWVAR 20
3508: PUSH
3509: LD_INT 4
3511: ST_TO_ADDR
// uc_nation = 1 ;
3512: LD_ADDR_OWVAR 21
3516: PUSH
3517: LD_INT 1
3519: ST_TO_ADDR
// hc_name =  ;
3520: LD_ADDR_OWVAR 26
3524: PUSH
3525: LD_STRING 
3527: ST_TO_ADDR
// hc_gallery =  ;
3528: LD_ADDR_OWVAR 33
3532: PUSH
3533: LD_STRING 
3535: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
3536: LD_INT 0
3538: PPUSH
3539: LD_INT 4
3541: PPUSH
3542: LD_INT 5
3544: PPUSH
3545: LD_INT 8
3547: PPUSH
3548: CALL_OW 12
3552: PPUSH
3553: CALL_OW 380
// un = CreateHuman ;
3557: LD_ADDR_VAR 0 3
3561: PUSH
3562: CALL_OW 44
3566: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3567: LD_VAR 0 3
3571: PPUSH
3572: LD_INT 9
3574: PPUSH
3575: LD_INT 0
3577: PPUSH
3578: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3582: LD_VAR 0 3
3586: PPUSH
3587: LD_INT 53
3589: PPUSH
3590: LD_INT 23
3592: PPUSH
3593: CALL_OW 111
// end ;
3597: GO 3501
3599: POP
3600: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
3601: LD_ADDR_VAR 0 2
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_INT 9
3613: PUSH
3614: LD_INT 8
3616: PUSH
3617: LD_INT 7
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_OWVAR 67
3629: ARRAY
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3828
// begin uc_side = 4 ;
3634: LD_ADDR_OWVAR 20
3638: PUSH
3639: LD_INT 4
3641: ST_TO_ADDR
// uc_nation = 1 ;
3642: LD_ADDR_OWVAR 21
3646: PUSH
3647: LD_INT 1
3649: ST_TO_ADDR
// vc_engine = 1 ;
3650: LD_ADDR_OWVAR 39
3654: PUSH
3655: LD_INT 1
3657: ST_TO_ADDR
// vc_control = 1 ;
3658: LD_ADDR_OWVAR 38
3662: PUSH
3663: LD_INT 1
3665: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
3666: LD_ADDR_OWVAR 40
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: LD_INT 4
3676: PUSH
3677: LD_INT 5
3679: PUSH
3680: LD_INT 6
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 1
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 12
3699: ARRAY
3700: ST_TO_ADDR
// vc_chassis = 4 ;
3701: LD_ADDR_OWVAR 37
3705: PUSH
3706: LD_INT 4
3708: ST_TO_ADDR
// veh = CreateVehicle ;
3709: LD_ADDR_VAR 0 4
3713: PUSH
3714: CALL_OW 45
3718: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
3719: LD_VAR 0 4
3723: PPUSH
3724: LD_INT 9
3726: PPUSH
3727: LD_INT 0
3729: PPUSH
3730: CALL_OW 49
// hc_name =  ;
3734: LD_ADDR_OWVAR 26
3738: PUSH
3739: LD_STRING 
3741: ST_TO_ADDR
// hc_gallery =  ;
3742: LD_ADDR_OWVAR 33
3746: PUSH
3747: LD_STRING 
3749: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 3
3755: PPUSH
3756: LD_INT 5
3758: PPUSH
3759: LD_INT 8
3761: PPUSH
3762: CALL_OW 12
3766: PPUSH
3767: CALL_OW 380
// un = CreateHuman ;
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_VAR 0 4
3790: PPUSH
3791: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
3795: LD_VAR 0 4
3799: PUSH
3800: LD_VAR 0 3
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: LD_INT 53
3811: PPUSH
3812: LD_INT 23
3814: PPUSH
3815: CALL_OW 111
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// end ;
3826: GO 3631
3828: POP
3829: POP
// end ; end_of_file
3830: LD_VAR 0 1
3834: RET
// export function PrepareRussianCommander ; begin
3835: LD_INT 0
3837: PPUSH
// uc_side = 3 ;
3838: LD_ADDR_OWVAR 20
3842: PUSH
3843: LD_INT 3
3845: ST_TO_ADDR
// uc_nation = 3 ;
3846: LD_ADDR_OWVAR 21
3850: PUSH
3851: LD_INT 3
3853: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
3854: LD_ADDR_EXP 23
3858: PUSH
3859: LD_STRING Borodin
3861: PPUSH
3862: CALL_OW 25
3866: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
3867: LD_EXP 23
3871: PPUSH
3872: LD_INT 3
3874: PPUSH
3875: LD_INT 0
3877: PPUSH
3878: CALL_OW 49
// end ;
3882: LD_VAR 0 1
3886: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
3887: LD_INT 0
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
// for i = 1 to 10 do
3893: LD_ADDR_VAR 0 2
3897: PUSH
3898: DOUBLE
3899: LD_INT 1
3901: DEC
3902: ST_TO_ADDR
3903: LD_INT 10
3905: PUSH
3906: FOR_TO
3907: IFFALSE 3981
// begin uc_side = 6 ;
3909: LD_ADDR_OWVAR 20
3913: PUSH
3914: LD_INT 6
3916: ST_TO_ADDR
// uc_nation = 3 ;
3917: LD_ADDR_OWVAR 21
3921: PUSH
3922: LD_INT 3
3924: ST_TO_ADDR
// hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 1
3946: PPUSH
3947: LD_INT 3
3949: PPUSH
3950: CALL_OW 380
// un = CreateHuman ;
3954: LD_ADDR_VAR 0 3
3958: PUSH
3959: CALL_OW 44
3963: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
3964: LD_VAR 0 3
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL_OW 49
// end ;
3979: GO 3906
3981: POP
3982: POP
// for i = 1 to 3 do
3983: LD_ADDR_VAR 0 2
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_INT 3
3995: PUSH
3996: FOR_TO
3997: IFFALSE 4146
// begin uc_side = 6 ;
3999: LD_ADDR_OWVAR 20
4003: PUSH
4004: LD_INT 6
4006: ST_TO_ADDR
// uc_nation = 3 ;
4007: LD_ADDR_OWVAR 21
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// vc_engine = 1 ;
4015: LD_ADDR_OWVAR 39
4019: PUSH
4020: LD_INT 1
4022: ST_TO_ADDR
// vc_control = 1 ;
4023: LD_ADDR_OWVAR 38
4027: PUSH
4028: LD_INT 1
4030: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
4031: LD_ADDR_OWVAR 40
4035: PUSH
4036: LD_INT 43
4038: PUSH
4039: LD_INT 44
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 1
4048: PPUSH
4049: LD_INT 2
4051: PPUSH
4052: CALL_OW 12
4056: ARRAY
4057: ST_TO_ADDR
// vc_chassis = 22 ;
4058: LD_ADDR_OWVAR 37
4062: PUSH
4063: LD_INT 22
4065: ST_TO_ADDR
// veh = CreateVehicle ;
4066: LD_ADDR_VAR 0 4
4070: PUSH
4071: CALL_OW 45
4075: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
4076: LD_VAR 0 4
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// hc_gallery =  ;
4091: LD_ADDR_OWVAR 33
4095: PUSH
4096: LD_STRING 
4098: ST_TO_ADDR
// hc_name =  ;
4099: LD_ADDR_OWVAR 26
4103: PUSH
4104: LD_STRING 
4106: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
4107: LD_INT 0
4109: PPUSH
4110: LD_INT 3
4112: PPUSH
4113: LD_INT 4
4115: PPUSH
4116: CALL_OW 380
// un = CreateHuman ;
4120: LD_ADDR_VAR 0 3
4124: PUSH
4125: CALL_OW 44
4129: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4130: LD_VAR 0 3
4134: PPUSH
4135: LD_VAR 0 4
4139: PPUSH
4140: CALL_OW 52
// end ;
4144: GO 3996
4146: POP
4147: POP
// end ;
4148: LD_VAR 0 1
4152: RET
// export function PrepareRussians ; var i , un ; begin
4153: LD_INT 0
4155: PPUSH
4156: PPUSH
4157: PPUSH
// for i = 1 to 14 do
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: DOUBLE
4164: LD_INT 1
4166: DEC
4167: ST_TO_ADDR
4168: LD_INT 14
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4258
// begin uc_side = 3 ;
4174: LD_ADDR_OWVAR 20
4178: PUSH
4179: LD_INT 3
4181: ST_TO_ADDR
// uc_nation = 3 ;
4182: LD_ADDR_OWVAR 21
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// hc_gallery =  ;
4190: LD_ADDR_OWVAR 33
4194: PUSH
4195: LD_STRING 
4197: ST_TO_ADDR
// hc_name =  ;
4198: LD_ADDR_OWVAR 26
4202: PUSH
4203: LD_STRING 
4205: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4206: LD_INT 0
4208: PPUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_EXP 24
4216: PPUSH
4217: LD_EXP 25
4221: PPUSH
4222: CALL_OW 12
4226: PPUSH
4227: CALL_OW 380
// un = CreateHuman ;
4231: LD_ADDR_VAR 0 3
4235: PUSH
4236: CALL_OW 44
4240: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4241: LD_VAR 0 3
4245: PPUSH
4246: LD_INT 3
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// end ;
4256: GO 4171
4258: POP
4259: POP
// for i = 1 to 6 do
4260: LD_ADDR_VAR 0 2
4264: PUSH
4265: DOUBLE
4266: LD_INT 1
4268: DEC
4269: ST_TO_ADDR
4270: LD_INT 6
4272: PUSH
4273: FOR_TO
4274: IFFALSE 4360
// begin uc_side = 3 ;
4276: LD_ADDR_OWVAR 20
4280: PUSH
4281: LD_INT 3
4283: ST_TO_ADDR
// uc_nation = 3 ;
4284: LD_ADDR_OWVAR 21
4288: PUSH
4289: LD_INT 3
4291: ST_TO_ADDR
// hc_gallery =  ;
4292: LD_ADDR_OWVAR 33
4296: PUSH
4297: LD_STRING 
4299: ST_TO_ADDR
// hc_name =  ;
4300: LD_ADDR_OWVAR 26
4304: PUSH
4305: LD_STRING 
4307: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4308: LD_INT 0
4310: PPUSH
4311: LD_INT 2
4313: PPUSH
4314: LD_EXP 24
4318: PPUSH
4319: LD_EXP 25
4323: PPUSH
4324: CALL_OW 12
4328: PPUSH
4329: CALL_OW 380
// un = CreateHuman ;
4333: LD_ADDR_VAR 0 3
4337: PUSH
4338: CALL_OW 44
4342: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 49
// end ;
4358: GO 4273
4360: POP
4361: POP
// for i = 1 to 6 do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 6
4374: PUSH
4375: FOR_TO
4376: IFFALSE 4462
// begin uc_side = 3 ;
4378: LD_ADDR_OWVAR 20
4382: PUSH
4383: LD_INT 3
4385: ST_TO_ADDR
// uc_nation = 3 ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_INT 3
4393: ST_TO_ADDR
// hc_gallery =  ;
4394: LD_ADDR_OWVAR 33
4398: PUSH
4399: LD_STRING 
4401: ST_TO_ADDR
// hc_name =  ;
4402: LD_ADDR_OWVAR 26
4406: PUSH
4407: LD_STRING 
4409: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4410: LD_INT 0
4412: PPUSH
4413: LD_INT 3
4415: PPUSH
4416: LD_EXP 24
4420: PPUSH
4421: LD_EXP 25
4425: PPUSH
4426: CALL_OW 12
4430: PPUSH
4431: CALL_OW 380
// un = CreateHuman ;
4435: LD_ADDR_VAR 0 3
4439: PUSH
4440: CALL_OW 44
4444: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4445: LD_VAR 0 3
4449: PPUSH
4450: LD_INT 3
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ;
4460: GO 4375
4462: POP
4463: POP
// for i = 1 to 4 do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_INT 4
4476: PUSH
4477: FOR_TO
4478: IFFALSE 4564
// begin uc_side = 3 ;
4480: LD_ADDR_OWVAR 20
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// uc_nation = 3 ;
4488: LD_ADDR_OWVAR 21
4492: PUSH
4493: LD_INT 3
4495: ST_TO_ADDR
// hc_gallery =  ;
4496: LD_ADDR_OWVAR 33
4500: PUSH
4501: LD_STRING 
4503: ST_TO_ADDR
// hc_name =  ;
4504: LD_ADDR_OWVAR 26
4508: PUSH
4509: LD_STRING 
4511: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4512: LD_INT 0
4514: PPUSH
4515: LD_INT 4
4517: PPUSH
4518: LD_EXP 24
4522: PPUSH
4523: LD_EXP 25
4527: PPUSH
4528: CALL_OW 12
4532: PPUSH
4533: CALL_OW 380
// un = CreateHuman ;
4537: LD_ADDR_VAR 0 3
4541: PUSH
4542: CALL_OW 44
4546: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4547: LD_VAR 0 3
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: CALL_OW 49
// end ;
4562: GO 4477
4564: POP
4565: POP
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4571: LD_INT 0
4573: PPUSH
4574: PPUSH
// if exist_mode then
4575: LD_VAR 0 2
4579: IFFALSE 4598
// unit := CreateCharacter ( ident ) else
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: LD_VAR 0 1
4590: PPUSH
4591: CALL_OW 34
4595: ST_TO_ADDR
4596: GO 4613
// unit := NewCharacter ( ident ) ;
4598: LD_ADDR_VAR 0 4
4602: PUSH
4603: LD_VAR 0 1
4607: PPUSH
4608: CALL_OW 25
4612: ST_TO_ADDR
// result := unit ;
4613: LD_ADDR_VAR 0 3
4617: PUSH
4618: LD_VAR 0 4
4622: ST_TO_ADDR
// end ;
4623: LD_VAR 0 3
4627: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4628: LD_INT 0
4630: PPUSH
4631: PPUSH
4632: PPUSH
// rnd = rand ( 1 , characters ) ;
4633: LD_ADDR_VAR 0 6
4637: PUSH
4638: LD_INT 1
4640: PPUSH
4641: LD_VAR 0 1
4645: PPUSH
4646: CALL_OW 12
4650: ST_TO_ADDR
// for i = 1 to characters do
4651: LD_ADDR_VAR 0 5
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_VAR 0 1
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4777
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4669: LD_VAR 0 5
4673: PUSH
4674: LD_VAR 0 6
4678: EQUAL
4679: PUSH
4680: LD_VAR 0 1
4684: PUSH
4685: LD_VAR 0 5
4689: ARRAY
4690: PPUSH
4691: CALL_OW 258
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: AND
4700: IFFALSE 4722
// Say ( characters [ i ] , dialogMID ) ;
4702: LD_VAR 0 1
4706: PUSH
4707: LD_VAR 0 5
4711: ARRAY
4712: PPUSH
4713: LD_VAR 0 2
4717: PPUSH
4718: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4722: LD_VAR 0 5
4726: PUSH
4727: LD_VAR 0 6
4731: EQUAL
4732: PUSH
4733: LD_VAR 0 1
4737: PUSH
4738: LD_VAR 0 5
4742: ARRAY
4743: PPUSH
4744: CALL_OW 258
4748: PUSH
4749: LD_INT 2
4751: EQUAL
4752: AND
4753: IFFALSE 4775
// Say ( characters [ i ] , dialogFID ) ;
4755: LD_VAR 0 1
4759: PUSH
4760: LD_VAR 0 5
4764: ARRAY
4765: PPUSH
4766: LD_VAR 0 3
4770: PPUSH
4771: CALL_OW 88
// end ;
4775: GO 4666
4777: POP
4778: POP
// end ;
4779: LD_VAR 0 4
4783: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4784: LD_INT 0
4786: PPUSH
4787: PPUSH
4788: PPUSH
// uc_side := GetSide ( b ) ;
4789: LD_ADDR_OWVAR 20
4793: PUSH
4794: LD_VAR 0 2
4798: PPUSH
4799: CALL_OW 255
4803: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4804: LD_ADDR_OWVAR 21
4808: PUSH
4809: LD_VAR 0 2
4813: PPUSH
4814: CALL_OW 248
4818: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4819: LD_INT 0
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 1
4829: PPUSH
4830: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4834: LD_ADDR_VAR 0 5
4838: PUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: CALL_OW 254
4848: PUSH
4849: LD_INT 3
4851: MINUS
4852: ST_TO_ADDR
// if dir < 0 then
4853: LD_VAR 0 5
4857: PUSH
4858: LD_INT 0
4860: LESS
4861: IFFALSE 4877
// dir := 6 + dir ;
4863: LD_ADDR_VAR 0 5
4867: PUSH
4868: LD_INT 6
4870: PUSH
4871: LD_VAR 0 5
4875: PLUS
4876: ST_TO_ADDR
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 4
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// SetDir ( un , dir ) ;
4887: LD_VAR 0 4
4891: PPUSH
4892: LD_VAR 0 5
4896: PPUSH
4897: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4901: LD_VAR 0 4
4905: PPUSH
4906: LD_VAR 0 2
4910: PPUSH
4911: CALL_OW 52
// end ;
4915: LD_VAR 0 3
4919: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
// for i = 1 to count do
4926: LD_ADDR_VAR 0 8
4930: PUSH
4931: DOUBLE
4932: LD_INT 1
4934: DEC
4935: ST_TO_ADDR
4936: LD_VAR 0 6
4940: PUSH
4941: FOR_TO
4942: IFFALSE 5023
// begin uc_side = side ;
4944: LD_ADDR_OWVAR 20
4948: PUSH
4949: LD_VAR 0 1
4953: ST_TO_ADDR
// uc_nation = nation ;
4954: LD_ADDR_OWVAR 21
4958: PUSH
4959: LD_VAR 0 2
4963: ST_TO_ADDR
// hc_gallery =  ;
4964: LD_ADDR_OWVAR 33
4968: PUSH
4969: LD_STRING 
4971: ST_TO_ADDR
// hc_name =  ;
4972: LD_ADDR_OWVAR 26
4976: PUSH
4977: LD_STRING 
4979: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4980: LD_INT 0
4982: PPUSH
4983: LD_VAR 0 5
4987: PPUSH
4988: LD_VAR 0 4
4992: PPUSH
4993: CALL_OW 380
// un = CreateHuman ;
4997: LD_ADDR_VAR 0 10
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5007: LD_VAR 0 10
5011: PPUSH
5012: LD_VAR 0 3
5016: PPUSH
5017: CALL_OW 52
// end ;
5021: GO 4941
5023: POP
5024: POP
// end ;
5025: LD_VAR 0 7
5029: RET
// export function PrepareDifficulty ; begin
5030: LD_INT 0
5032: PPUSH
// if Difficulty = 1 then
5033: LD_OWVAR 67
5037: PUSH
5038: LD_INT 1
5040: EQUAL
5041: IFFALSE 5059
// begin RuSolMinLevel = 2 ;
5043: LD_ADDR_EXP 24
5047: PUSH
5048: LD_INT 2
5050: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5051: LD_ADDR_EXP 25
5055: PUSH
5056: LD_INT 4
5058: ST_TO_ADDR
// end ; if Difficulty = 2 then
5059: LD_OWVAR 67
5063: PUSH
5064: LD_INT 2
5066: EQUAL
5067: IFFALSE 5137
// begin RuSolMinLevel = 3 ;
5069: LD_ADDR_EXP 24
5073: PUSH
5074: LD_INT 3
5076: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5077: LD_ADDR_EXP 25
5081: PUSH
5082: LD_INT 5
5084: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
5085: LD_INT 51
5087: PPUSH
5088: LD_INT 3
5090: PPUSH
5091: LD_INT 1
5093: PPUSH
5094: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
5098: LD_INT 57
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
5111: LD_INT 57
5113: PPUSH
5114: LD_INT 6
5116: PPUSH
5117: LD_INT 2
5119: PPUSH
5120: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
5124: LD_INT 51
5126: PPUSH
5127: LD_INT 6
5129: PPUSH
5130: LD_INT 2
5132: PPUSH
5133: CALL_OW 322
// end ; if Difficulty = 3 then
5137: LD_OWVAR 67
5141: PUSH
5142: LD_INT 3
5144: EQUAL
5145: IFFALSE 5228
// begin RuSolMinLevel = 3 ;
5147: LD_ADDR_EXP 24
5151: PUSH
5152: LD_INT 3
5154: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5155: LD_ADDR_EXP 25
5159: PUSH
5160: LD_INT 6
5162: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
5163: LD_INT 57
5165: PPUSH
5166: LD_INT 3
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
5176: LD_INT 51
5178: PPUSH
5179: LD_INT 3
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5189: LD_INT 52
5191: PPUSH
5192: LD_INT 3
5194: PPUSH
5195: LD_INT 1
5197: PPUSH
5198: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
5202: LD_INT 57
5204: PPUSH
5205: LD_INT 6
5207: PPUSH
5208: LD_INT 2
5210: PPUSH
5211: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
5215: LD_INT 52
5217: PPUSH
5218: LD_INT 6
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: CALL_OW 322
// end ; end ;
5228: LD_VAR 0 1
5232: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
5233: LD_INT 0
5235: PPUSH
5236: PPUSH
5237: PPUSH
5238: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
5239: LD_ADDR_VAR 0 3
5243: PUSH
5244: LD_INT 22
5246: PUSH
5247: LD_INT 3
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 25
5256: PUSH
5257: LD_INT 2
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PPUSH
5268: CALL_OW 69
5272: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
5273: LD_ADDR_VAR 0 4
5277: PUSH
5278: LD_INT 4
5280: PUSH
5281: LD_INT 75
5283: PUSH
5284: LD_INT 79
5286: PUSH
5287: LD_INT 2
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 4
5298: PUSH
5299: LD_INT 113
5301: PUSH
5302: LD_INT 94
5304: PUSH
5305: LD_INT 4
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 29
5316: PUSH
5317: LD_INT 106
5319: PUSH
5320: LD_INT 97
5322: PUSH
5323: LD_INT 3
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 26
5334: PUSH
5335: LD_INT 93
5337: PUSH
5338: LD_INT 97
5340: PUSH
5341: LD_INT 5
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 2
5352: PUSH
5353: LD_INT 100
5355: PUSH
5356: LD_INT 89
5358: PUSH
5359: LD_INT 3
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 17
5370: PUSH
5371: LD_INT 96
5373: PUSH
5374: LD_INT 89
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 32
5388: PUSH
5389: LD_INT 78
5391: PUSH
5392: LD_INT 94
5394: PUSH
5395: LD_INT 1
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: PUSH
5404: LD_INT 32
5406: PUSH
5407: LD_INT 95
5409: PUSH
5410: LD_INT 82
5412: PUSH
5413: LD_INT 3
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 32
5424: PUSH
5425: LD_INT 104
5427: PUSH
5428: LD_INT 85
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 32
5442: PUSH
5443: LD_INT 81
5445: PUSH
5446: LD_INT 78
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PUSH
5458: LD_INT 33
5460: PUSH
5461: LD_INT 109
5463: PUSH
5464: LD_INT 90
5466: PUSH
5467: LD_INT 3
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 33
5478: PUSH
5479: LD_INT 88
5481: PUSH
5482: LD_INT 79
5484: PUSH
5485: LD_INT 3
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 33
5496: PUSH
5497: LD_INT 76
5499: PUSH
5500: LD_INT 87
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 26
5514: PUSH
5515: LD_INT 96
5517: PUSH
5518: LD_INT 97
5520: PUSH
5521: LD_INT 5
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 26
5532: PUSH
5533: LD_INT 85
5535: PUSH
5536: LD_INT 84
5538: PUSH
5539: LD_INT 2
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 6
5550: PUSH
5551: LD_INT 88
5553: PUSH
5554: LD_INT 95
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 19
5568: PUSH
5569: LD_INT 103
5571: PUSH
5572: LD_INT 89
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 16
5586: PUSH
5587: LD_INT 97
5589: PUSH
5590: LD_INT 86
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: PUSH
5602: LD_INT 24
5604: PUSH
5605: LD_INT 100
5607: PUSH
5608: LD_INT 85
5610: PUSH
5611: LD_INT 3
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: ST_TO_ADDR
// for i := 1 to buildingsTab do
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: DOUBLE
5647: LD_INT 1
5649: DEC
5650: ST_TO_ADDR
5651: LD_VAR 0 4
5655: PUSH
5656: FOR_TO
5657: IFFALSE 5730
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
5659: LD_VAR 0 3
5663: PPUSH
5664: LD_VAR 0 4
5668: PUSH
5669: LD_VAR 0 2
5673: ARRAY
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_VAR 0 4
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: LD_VAR 0 4
5698: PUSH
5699: LD_VAR 0 2
5703: ARRAY
5704: PUSH
5705: LD_INT 3
5707: ARRAY
5708: PPUSH
5709: LD_VAR 0 4
5713: PUSH
5714: LD_VAR 0 2
5718: ARRAY
5719: PUSH
5720: LD_INT 4
5722: ARRAY
5723: PPUSH
5724: CALL_OW 205
5728: GO 5656
5730: POP
5731: POP
// end ;
5732: LD_VAR 0 1
5736: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5737: LD_INT 0
5739: PPUSH
5740: PPUSH
// for i in charactersList do
5741: LD_ADDR_VAR 0 4
5745: PUSH
5746: LD_VAR 0 1
5750: PUSH
5751: FOR_IN
5752: IFFALSE 5781
// begin if IsOk ( i ) then
5754: LD_VAR 0 4
5758: PPUSH
5759: CALL_OW 302
5763: IFFALSE 5779
// SaveCharacters ( i , ident ) ;
5765: LD_VAR 0 4
5769: PPUSH
5770: LD_VAR 0 2
5774: PPUSH
5775: CALL_OW 38
// end ;
5779: GO 5751
5781: POP
5782: POP
// end ;
5783: LD_VAR 0 3
5787: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5788: LD_INT 0
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// for i = 1 to 72 do
5794: LD_ADDR_VAR 0 5
5798: PUSH
5799: DOUBLE
5800: LD_INT 1
5802: DEC
5803: ST_TO_ADDR
5804: LD_INT 72
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5866
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5810: LD_VAR 0 5
5814: PPUSH
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 321
5824: PUSH
5825: LD_INT 1
5827: EQUAL
5828: PUSH
5829: LD_VAR 0 5
5833: PPUSH
5834: LD_VAR 0 3
5838: PPUSH
5839: CALL_OW 482
5843: PUSH
5844: LD_INT 1
5846: EQUAL
5847: AND
5848: IFFALSE 5864
// AddComResearch ( lab , i ) ;
5850: LD_VAR 0 2
5854: PPUSH
5855: LD_VAR 0 5
5859: PPUSH
5860: CALL_OW 184
5864: GO 5807
5866: POP
5867: POP
// end ;
5868: LD_VAR 0 4
5872: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
5873: LD_INT 0
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
5883: LD_ADDR_VAR 0 6
5887: PUSH
5888: LD_INT 22
5890: PUSH
5891: LD_VAR 0 1
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 25
5902: PUSH
5903: LD_INT 1
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 56
5912: PUSH
5913: EMPTY
5914: LIST
5915: PUSH
5916: LD_INT 24
5918: PUSH
5919: LD_INT 700
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 3
5928: PUSH
5929: LD_INT 60
5931: PUSH
5932: EMPTY
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 69
5950: PUSH
5951: LD_EXP 23
5955: PUSH
5956: EMPTY
5957: LIST
5958: DIFF
5959: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
5960: LD_ADDR_VAR 0 7
5964: PUSH
5965: LD_INT 22
5967: PUSH
5968: LD_VAR 0 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 25
5979: PUSH
5980: LD_INT 1
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 54
5989: PUSH
5990: EMPTY
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: LIST
5997: PPUSH
5998: CALL_OW 69
6002: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6003: LD_ADDR_VAR 0 8
6007: PUSH
6008: LD_INT 22
6010: PUSH
6011: LD_VAR 0 1
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 30
6022: PUSH
6023: LD_INT 32
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: LD_INT 58
6032: PUSH
6033: EMPTY
6034: LIST
6035: PUSH
6036: LD_INT 24
6038: PUSH
6039: LD_INT 251
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: PPUSH
6052: CALL_OW 69
6056: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
6057: LD_ADDR_VAR 0 10
6061: PUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 2
6076: PUSH
6077: LD_INT 30
6079: PUSH
6080: LD_INT 4
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 30
6089: PUSH
6090: LD_INT 5
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 24
6104: PUSH
6105: LD_INT 251
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: PPUSH
6117: CALL_OW 69
6121: ST_TO_ADDR
// if barrackList > 0 then
6122: LD_VAR 0 10
6126: PUSH
6127: LD_INT 0
6129: GREATER
6130: IFFALSE 6243
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
6132: LD_VAR 0 8
6136: PUSH
6137: LD_INT 0
6139: EQUAL
6140: PUSH
6141: LD_INT 24
6143: PPUSH
6144: LD_INT 22
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 21
6156: PUSH
6157: LD_INT 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: CALL_OW 70
6172: PUSH
6173: LD_INT 0
6175: EQUAL
6176: AND
6177: IFFALSE 6226
// begin for i in soldiers_list do
6179: LD_ADDR_VAR 0 4
6183: PUSH
6184: LD_VAR 0 6
6188: PUSH
6189: FOR_IN
6190: IFFALSE 6222
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_VAR 0 10
6201: PUSH
6202: LD_INT 1
6204: PPUSH
6205: LD_VAR 0 10
6209: PPUSH
6210: CALL_OW 12
6214: ARRAY
6215: PPUSH
6216: CALL_OW 120
6220: GO 6189
6222: POP
6223: POP
// end else
6224: GO 6243
// begin for i in barrackList do
6226: LD_ADDR_VAR 0 4
6230: PUSH
6231: LD_VAR 0 10
6235: PUSH
6236: FOR_IN
6237: IFFALSE 6241
// begin end ;
6239: GO 6236
6241: POP
6242: POP
// end ; end ; end ;
6243: LD_VAR 0 3
6247: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
6248: LD_INT 0
6250: PPUSH
6251: PPUSH
6252: PPUSH
6253: PPUSH
6254: PPUSH
6255: PPUSH
// for i = 1 to infantryCount do
6256: LD_ADDR_VAR 0 8
6260: PUSH
6261: DOUBLE
6262: LD_INT 1
6264: DEC
6265: ST_TO_ADDR
6266: LD_VAR 0 5
6270: PUSH
6271: FOR_TO
6272: IFFALSE 6388
// begin uc_side = side ;
6274: LD_ADDR_OWVAR 20
6278: PUSH
6279: LD_VAR 0 1
6283: ST_TO_ADDR
// uc_nation = nation ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_VAR 0 3
6293: ST_TO_ADDR
// hc_class = 1 ;
6294: LD_ADDR_OWVAR 28
6298: PUSH
6299: LD_INT 1
6301: ST_TO_ADDR
// hc_name =  ;
6302: LD_ADDR_OWVAR 26
6306: PUSH
6307: LD_STRING 
6309: ST_TO_ADDR
// hc_gallery =  ;
6310: LD_ADDR_OWVAR 33
6314: PUSH
6315: LD_STRING 
6317: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6318: LD_INT 0
6320: PPUSH
6321: LD_INT 1
6323: PPUSH
6324: LD_EXP 24
6328: PPUSH
6329: LD_EXP 25
6333: PPUSH
6334: CALL_OW 12
6338: PPUSH
6339: CALL_OW 380
// un = CreateHuman ;
6343: LD_ADDR_VAR 0 10
6347: PUSH
6348: CALL_OW 44
6352: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
6353: LD_VAR 0 10
6357: PPUSH
6358: LD_VAR 0 2
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 49
// defenders_list = defenders_list ^ un ;
6370: LD_ADDR_EXP 31
6374: PUSH
6375: LD_EXP 31
6379: PUSH
6380: LD_VAR 0 10
6384: ADD
6385: ST_TO_ADDR
// end ;
6386: GO 6271
6388: POP
6389: POP
// for i = 1 to vehCount do
6390: LD_ADDR_VAR 0 8
6394: PUSH
6395: DOUBLE
6396: LD_INT 1
6398: DEC
6399: ST_TO_ADDR
6400: LD_VAR 0 6
6404: PUSH
6405: FOR_TO
6406: IFFALSE 6613
// begin uc_side = side ;
6408: LD_ADDR_OWVAR 20
6412: PUSH
6413: LD_VAR 0 1
6417: ST_TO_ADDR
// uc_nation = nation ;
6418: LD_ADDR_OWVAR 21
6422: PUSH
6423: LD_VAR 0 3
6427: ST_TO_ADDR
// vc_Chassis = 22 ;
6428: LD_ADDR_OWVAR 37
6432: PUSH
6433: LD_INT 22
6435: ST_TO_ADDR
// vc_engine = 1 ;
6436: LD_ADDR_OWVAR 39
6440: PUSH
6441: LD_INT 1
6443: ST_TO_ADDR
// vc_control = 1 ;
6444: LD_ADDR_OWVAR 38
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6452: LD_ADDR_OWVAR 40
6456: PUSH
6457: LD_INT 43
6459: PUSH
6460: LD_INT 44
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 1
6469: PPUSH
6470: LD_INT 2
6472: PPUSH
6473: CALL_OW 12
6477: ARRAY
6478: ST_TO_ADDR
// veh = CreateVehicle ;
6479: LD_ADDR_VAR 0 12
6483: PUSH
6484: CALL_OW 45
6488: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
6489: LD_VAR 0 12
6493: PPUSH
6494: LD_VAR 0 2
6498: PPUSH
6499: LD_INT 0
6501: PPUSH
6502: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
6506: LD_ADDR_EXP 31
6510: PUSH
6511: LD_EXP 31
6515: PUSH
6516: LD_VAR 0 12
6520: ADD
6521: ST_TO_ADDR
// hc_class = 3 ;
6522: LD_ADDR_OWVAR 28
6526: PUSH
6527: LD_INT 3
6529: ST_TO_ADDR
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_EXP 24
6556: PPUSH
6557: LD_EXP 25
6561: PPUSH
6562: CALL_OW 12
6566: PPUSH
6567: CALL_OW 380
// un = CreateHuman ;
6571: LD_ADDR_VAR 0 10
6575: PUSH
6576: CALL_OW 44
6580: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6581: LD_VAR 0 10
6585: PPUSH
6586: LD_VAR 0 12
6590: PPUSH
6591: CALL_OW 52
// defenders_list = defenders_list ^ un ;
6595: LD_ADDR_EXP 31
6599: PUSH
6600: LD_EXP 31
6604: PUSH
6605: LD_VAR 0 10
6609: ADD
6610: ST_TO_ADDR
// end ;
6611: GO 6405
6613: POP
6614: POP
// end ;
6615: LD_VAR 0 7
6619: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
6620: LD_INT 0
6622: PPUSH
6623: PPUSH
6624: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
6625: LD_VAR 0 2
6629: PPUSH
6630: LD_INT 22
6632: PUSH
6633: LD_VAR 0 1
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: PPUSH
6645: CALL_OW 70
6649: PUSH
6650: LD_INT 0
6652: EQUAL
6653: PUSH
6654: LD_EXP 31
6658: PUSH
6659: LD_INT 0
6661: GREATER
6662: AND
6663: IFFALSE 6709
// begin for i in defenders_list do
6665: LD_ADDR_VAR 0 4
6669: PUSH
6670: LD_EXP 31
6674: PUSH
6675: FOR_IN
6676: IFFALSE 6707
// begin AddComMoveXY ( i , 65 , 68 ) ;
6678: LD_VAR 0 4
6682: PPUSH
6683: LD_INT 65
6685: PPUSH
6686: LD_INT 68
6688: PPUSH
6689: CALL_OW 171
// SetFuel ( i , 100 ) ;
6693: LD_VAR 0 4
6697: PPUSH
6698: LD_INT 100
6700: PPUSH
6701: CALL_OW 240
// end ;
6705: GO 6675
6707: POP
6708: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
6709: LD_VAR 0 2
6713: PPUSH
6714: LD_INT 22
6716: PUSH
6717: LD_VAR 0 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: PPUSH
6729: CALL_OW 70
6733: PUSH
6734: LD_INT 0
6736: GREATER
6737: PUSH
6738: LD_EXP 31
6742: PUSH
6743: LD_INT 0
6745: GREATER
6746: AND
6747: IFFALSE 6915
// begin for i in defenders_list do
6749: LD_ADDR_VAR 0 4
6753: PUSH
6754: LD_EXP 31
6758: PUSH
6759: FOR_IN
6760: IFFALSE 6810
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6762: LD_ADDR_VAR 0 5
6766: PUSH
6767: LD_INT 22
6769: PUSH
6770: LD_VAR 0 1
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PPUSH
6779: CALL_OW 69
6783: PPUSH
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 74
6793: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
6794: LD_VAR 0 4
6798: PPUSH
6799: LD_VAR 0 5
6803: PPUSH
6804: CALL_OW 115
// end ;
6808: GO 6759
6810: POP
6811: POP
// if russianAI = 0 then
6812: LD_EXP 26
6816: PUSH
6817: LD_INT 0
6819: EQUAL
6820: IFFALSE 6915
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
6822: LD_ADDR_VAR 0 4
6826: PUSH
6827: LD_INT 22
6829: PUSH
6830: LD_INT 3
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 25
6839: PUSH
6840: LD_INT 1
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: PUSH
6856: LD_EXP 23
6860: DIFF
6861: PUSH
6862: FOR_IN
6863: IFFALSE 6913
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6865: LD_ADDR_VAR 0 5
6869: PUSH
6870: LD_INT 22
6872: PUSH
6873: LD_VAR 0 1
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 69
6886: PPUSH
6887: LD_VAR 0 4
6891: PPUSH
6892: CALL_OW 74
6896: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
6897: LD_VAR 0 4
6901: PPUSH
6902: LD_VAR 0 5
6906: PPUSH
6907: CALL_OW 115
// end ;
6911: GO 6862
6913: POP
6914: POP
// end ; end ; end ;
6915: LD_VAR 0 3
6919: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
6924: PPUSH
6925: PPUSH
6926: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
6927: LD_ADDR_VAR 0 6
6931: PUSH
6932: LD_INT 22
6934: PUSH
6935: LD_VAR 0 1
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 2
6946: PUSH
6947: LD_INT 25
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 25
6959: PUSH
6960: LD_INT 16
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 24
6974: PUSH
6975: LD_INT 1000
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6992: LD_ADDR_VAR 0 4
6996: PUSH
6997: LD_INT 22
6999: PUSH
7000: LD_VAR 0 1
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 21
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: LD_INT 24
7024: PUSH
7025: LD_INT 1000
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: PPUSH
7044: CALL_OW 69
7048: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
7049: LD_VAR 0 4
7053: PUSH
7054: LD_INT 0
7056: GREATER
7057: PUSH
7058: LD_VAR 0 6
7062: PUSH
7063: LD_INT 0
7065: GREATER
7066: AND
7067: IFFALSE 7133
// begin for i in engineerOk_list do
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 6
7078: PUSH
7079: FOR_IN
7080: IFFALSE 7131
// begin for j in buildings_list do
7082: LD_ADDR_VAR 0 7
7086: PUSH
7087: LD_VAR 0 4
7091: PUSH
7092: FOR_IN
7093: IFFALSE 7127
// begin AddComExitBuilding ( i ) ;
7095: LD_VAR 0 5
7099: PPUSH
7100: CALL_OW 182
// wait ( 0 0$1 ) ;
7104: LD_INT 35
7106: PPUSH
7107: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
7111: LD_VAR 0 5
7115: PPUSH
7116: LD_VAR 0 7
7120: PPUSH
7121: CALL_OW 190
// end ;
7125: GO 7092
7127: POP
7128: POP
// end ;
7129: GO 7079
7131: POP
7132: POP
// end ; if buildings_list = 0 then
7133: LD_VAR 0 4
7137: PUSH
7138: LD_INT 0
7140: EQUAL
7141: IFFALSE 7174
// begin for i in engineerOK_list do
7143: LD_ADDR_VAR 0 5
7147: PUSH
7148: LD_VAR 0 6
7152: PUSH
7153: FOR_IN
7154: IFFALSE 7172
// begin ComEnterUnit ( i , building ) ;
7156: LD_VAR 0 5
7160: PPUSH
7161: LD_VAR 0 2
7165: PPUSH
7166: CALL_OW 120
// end ;
7170: GO 7153
7172: POP
7173: POP
// end ; end ;
7174: LD_VAR 0 3
7178: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7179: LD_INT 0
7181: PPUSH
7182: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7183: LD_INT 22
7185: PUSH
7186: LD_VAR 0 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 25
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 69
7213: PUSH
7214: LD_INT 0
7216: GREATER
7217: PUSH
7218: LD_INT 22
7220: PUSH
7221: LD_VAR 0 1
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 21
7232: PUSH
7233: LD_INT 3
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: LD_INT 24
7245: PUSH
7246: LD_INT 1000
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: PPUSH
7262: CALL_OW 69
7266: PUSH
7267: LD_INT 0
7269: EQUAL
7270: AND
7271: PUSH
7272: LD_VAR 0 2
7276: PUSH
7277: LD_INT 0
7279: GREATER
7280: AND
7281: IFFALSE 7380
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_INT 22
7290: PUSH
7291: LD_VAR 0 1
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 25
7302: PUSH
7303: LD_INT 2
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 69
7318: PUSH
7319: FOR_IN
7320: IFFALSE 7378
// begin AddComExitBuilding ( i ) ;
7322: LD_VAR 0 4
7326: PPUSH
7327: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7331: LD_VAR 0 4
7335: PPUSH
7336: LD_VAR 0 2
7340: PUSH
7341: LD_INT 1
7343: ARRAY
7344: PPUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_INT 2
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 3
7361: ARRAY
7362: PPUSH
7363: LD_VAR 0 2
7367: PUSH
7368: LD_INT 4
7370: ARRAY
7371: PPUSH
7372: CALL_OW 205
// end ;
7376: GO 7319
7378: POP
7379: POP
// end ; end ;
7380: LD_VAR 0 3
7384: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
7385: LD_INT 0
7387: PPUSH
7388: PPUSH
7389: PPUSH
7390: PPUSH
7391: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7392: LD_ADDR_VAR 0 6
7396: PUSH
7397: LD_INT 22
7399: PUSH
7400: LD_VAR 0 1
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 25
7411: PUSH
7412: LD_INT 4
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 69
7427: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7428: LD_ADDR_VAR 0 9
7432: PUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: LD_INT 22
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 21
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 24
7465: PUSH
7466: LD_INT 750
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: PPUSH
7482: CALL_OW 70
7486: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
7487: LD_VAR 0 9
7491: PUSH
7492: LD_INT 0
7494: GREATER
7495: PUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 0
7503: GREATER
7504: AND
7505: IFFALSE 7632
// begin for i = 1 to damageUnits do
7507: LD_ADDR_VAR 0 7
7511: PUSH
7512: DOUBLE
7513: LD_INT 1
7515: DEC
7516: ST_TO_ADDR
7517: LD_VAR 0 9
7521: PUSH
7522: FOR_TO
7523: IFFALSE 7547
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
7525: LD_VAR 0 9
7529: PUSH
7530: LD_VAR 0 7
7534: ARRAY
7535: PPUSH
7536: LD_VAR 0 2
7540: PPUSH
7541: CALL_OW 113
7545: GO 7522
7547: POP
7548: POP
// for i in sci_list do
7549: LD_ADDR_VAR 0 7
7553: PUSH
7554: LD_VAR 0 6
7558: PUSH
7559: FOR_IN
7560: IFFALSE 7628
// begin ComExitBuilding ( i ) ;
7562: LD_VAR 0 7
7566: PPUSH
7567: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
7571: LD_ADDR_VAR 0 8
7575: PUSH
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_INT 22
7583: PUSH
7584: LD_VAR 0 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 70
7597: PUSH
7598: FOR_IN
7599: IFFALSE 7624
// begin AddComHeal ( i , j ) ;
7601: LD_VAR 0 7
7605: PPUSH
7606: LD_VAR 0 8
7610: PPUSH
7611: CALL_OW 188
// wait ( 1 1$0 ) ;
7615: LD_INT 2100
7617: PPUSH
7618: CALL_OW 67
// end ;
7622: GO 7598
7624: POP
7625: POP
// end ;
7626: GO 7559
7628: POP
7629: POP
// end else
7630: GO 7646
// begin AddComEnterUnit ( sci_list , build ) ;
7632: LD_VAR 0 6
7636: PPUSH
7637: LD_VAR 0 4
7641: PPUSH
7642: CALL_OW 180
// end ; end ;
7646: LD_VAR 0 5
7650: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
7651: LD_INT 0
7653: PPUSH
7654: PPUSH
7655: PPUSH
7656: PPUSH
7657: PPUSH
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
7662: PPUSH
7663: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7664: LD_ADDR_VAR 0 9
7668: PUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 21
7683: PUSH
7684: LD_INT 2
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 33
7693: PUSH
7694: LD_INT 1
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: LD_INT 660
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 3
7713: PUSH
7714: LD_INT 58
7716: PUSH
7717: EMPTY
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 34
7729: PUSH
7730: LD_INT 53
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: PPUSH
7749: CALL_OW 69
7753: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7754: LD_ADDR_VAR 0 10
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_VAR 0 1
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 21
7773: PUSH
7774: LD_INT 2
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 33
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 3
7793: PUSH
7794: LD_INT 24
7796: PUSH
7797: LD_INT 660
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 69
7818: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7819: LD_ADDR_VAR 0 11
7823: PUSH
7824: LD_VAR 0 2
7828: PPUSH
7829: LD_INT 22
7831: PUSH
7832: LD_VAR 0 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 33
7853: PUSH
7854: LD_INT 1
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 24
7866: PUSH
7867: LD_INT 1000
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: PPUSH
7884: CALL_OW 70
7888: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7889: LD_ADDR_VAR 0 12
7893: PUSH
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_INT 22
7901: PUSH
7902: LD_VAR 0 1
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 21
7913: PUSH
7914: LD_INT 2
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 33
7923: PUSH
7924: LD_INT 1
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: PUSH
7931: LD_INT 24
7933: PUSH
7934: LD_INT 1000
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 58
7943: PUSH
7944: EMPTY
7945: LIST
7946: PUSH
7947: LD_INT 3
7949: PUSH
7950: LD_INT 34
7952: PUSH
7953: LD_INT 53
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PPUSH
7972: CALL_OW 70
7976: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7977: LD_ADDR_VAR 0 13
7981: PUSH
7982: EMPTY
7983: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7984: LD_ADDR_VAR 0 14
7988: PUSH
7989: LD_VAR 0 2
7993: PPUSH
7994: LD_INT 22
7996: PUSH
7997: LD_VAR 0 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 25
8008: PUSH
8009: LD_INT 3
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: PPUSH
8020: CALL_OW 70
8024: ST_TO_ADDR
// if damageVehicle_list > 0 then
8025: LD_VAR 0 10
8029: PUSH
8030: LD_INT 0
8032: GREATER
8033: IFFALSE 8071
// begin for i in damageVehicle_list do
8035: LD_ADDR_VAR 0 7
8039: PUSH
8040: LD_VAR 0 10
8044: PUSH
8045: FOR_IN
8046: IFFALSE 8069
// begin ComMoveXY ( i , repX , repY ) ;
8048: LD_VAR 0 7
8052: PPUSH
8053: LD_VAR 0 3
8057: PPUSH
8058: LD_VAR 0 4
8062: PPUSH
8063: CALL_OW 111
// end ;
8067: GO 8045
8069: POP
8070: POP
// end ; if vehicleNeedRepair_list > 0 then
8071: LD_VAR 0 11
8075: PUSH
8076: LD_INT 0
8078: GREATER
8079: IFFALSE 8166
// begin for i in vehicleNeedRepair_list do
8081: LD_ADDR_VAR 0 7
8085: PUSH
8086: LD_VAR 0 11
8090: PUSH
8091: FOR_IN
8092: IFFALSE 8164
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8094: LD_ADDR_VAR 0 13
8098: PUSH
8099: LD_VAR 0 13
8103: PUSH
8104: LD_VAR 0 7
8108: PPUSH
8109: CALL_OW 313
8113: ADD
8114: ST_TO_ADDR
// for j in mechanicInside_list do
8115: LD_ADDR_VAR 0 8
8119: PUSH
8120: LD_VAR 0 13
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8160
// begin ComExitVehicle ( i ) ;
8128: LD_VAR 0 7
8132: PPUSH
8133: CALL_OW 121
// wait ( 0 0$1 ) ;
8137: LD_INT 35
8139: PPUSH
8140: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8144: LD_VAR 0 7
8148: PPUSH
8149: LD_VAR 0 8
8153: PPUSH
8154: CALL_OW 129
// end ;
8158: GO 8125
8160: POP
8161: POP
// end ;
8162: GO 8091
8164: POP
8165: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8166: LD_VAR 0 12
8170: PUSH
8171: LD_INT 0
8173: GREATER
8174: IFFALSE 8214
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8176: LD_VAR 0 14
8180: PUSH
8181: LD_INT 1
8183: ARRAY
8184: PPUSH
8185: LD_VAR 0 12
8189: PUSH
8190: LD_INT 1
8192: ARRAY
8193: PPUSH
8194: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: ARRAY
8206: PPUSH
8207: LD_INT 100
8209: PPUSH
8210: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8214: LD_VAR 0 9
8218: PUSH
8219: LD_INT 0
8221: GREATER
8222: IFFALSE 8413
// begin for i in vehicleOK_list do
8224: LD_ADDR_VAR 0 7
8228: PUSH
8229: LD_VAR 0 9
8233: PUSH
8234: FOR_IN
8235: IFFALSE 8411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8237: LD_ADDR_VAR 0 15
8241: PUSH
8242: LD_INT 22
8244: PUSH
8245: LD_VAR 0 5
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: PPUSH
8259: LD_VAR 0 7
8263: PPUSH
8264: CALL_OW 74
8268: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8269: LD_ADDR_VAR 0 16
8273: PUSH
8274: LD_INT 22
8276: PUSH
8277: LD_VAR 0 5
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 2
8288: PUSH
8289: LD_INT 59
8291: PUSH
8292: EMPTY
8293: LIST
8294: PUSH
8295: LD_INT 21
8297: PUSH
8298: LD_INT 1
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 21
8307: PUSH
8308: LD_INT 2
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: PPUSH
8328: CALL_OW 69
8332: PPUSH
8333: LD_VAR 0 7
8337: PPUSH
8338: CALL_OW 74
8342: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8343: LD_VAR 0 7
8347: PPUSH
8348: LD_VAR 0 15
8352: PPUSH
8353: CALL_OW 296
8357: PUSH
8358: LD_INT 8
8360: PLUS
8361: PUSH
8362: LD_VAR 0 7
8366: PPUSH
8367: LD_VAR 0 16
8371: PPUSH
8372: CALL_OW 296
8376: LESS
8377: IFFALSE 8395
// begin ComAttackUnit ( i , target1 ) ;
8379: LD_VAR 0 7
8383: PPUSH
8384: LD_VAR 0 15
8388: PPUSH
8389: CALL_OW 115
// end else
8393: GO 8409
// begin ComAttackUnit ( i , target2 ) ;
8395: LD_VAR 0 7
8399: PPUSH
8400: LD_VAR 0 16
8404: PPUSH
8405: CALL_OW 115
// end ; end ;
8409: GO 8234
8411: POP
8412: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8413: LD_ADDR_VAR 0 7
8417: PUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 22
8425: PUSH
8426: LD_VAR 0 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 25
8437: PUSH
8438: LD_INT 3
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PPUSH
8449: CALL_OW 70
8453: NOT
8454: PUSH
8455: FOR_IN
8456: IFFALSE 8479
// ComMoveXY ( i , repX , repY ) ;
8458: LD_VAR 0 7
8462: PPUSH
8463: LD_VAR 0 3
8467: PPUSH
8468: LD_VAR 0 4
8472: PPUSH
8473: CALL_OW 111
8477: GO 8455
8479: POP
8480: POP
// end ;
8481: LD_VAR 0 6
8485: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
8486: LD_INT 0
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8496: LD_INT 22
8498: PUSH
8499: LD_VAR 0 1
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 21
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PPUSH
8522: CALL_OW 69
8526: PUSH
8527: LD_VAR 0 3
8531: LESSEQUAL
8532: IFFALSE 8599
// for i = 1 to vehCount do
8534: LD_ADDR_VAR 0 10
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_VAR 0 3
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8597
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
8552: LD_VAR 0 2
8556: PPUSH
8557: LD_VAR 0 8
8561: PPUSH
8562: LD_VAR 0 6
8566: PPUSH
8567: LD_VAR 0 7
8571: PPUSH
8572: LD_VAR 0 5
8576: PUSH
8577: LD_INT 1
8579: PPUSH
8580: LD_VAR 0 5
8584: PPUSH
8585: CALL_OW 12
8589: ARRAY
8590: PPUSH
8591: CALL_OW 185
8595: GO 8549
8597: POP
8598: POP
// repeat wait ( 0 0$1 ) ;
8599: LD_INT 35
8601: PPUSH
8602: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
8606: LD_INT 22
8608: PUSH
8609: LD_VAR 0 1
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 21
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 24
8630: PUSH
8631: LD_INT 250
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: PPUSH
8643: CALL_OW 69
8647: PUSH
8648: LD_VAR 0 3
8652: GREATEREQUAL
8653: IFFALSE 8599
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
8655: LD_INT 22
8657: PUSH
8658: LD_VAR 0 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 24
8679: PUSH
8680: LD_INT 250
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 69
8696: PUSH
8697: LD_VAR 0 3
8701: GREATEREQUAL
8702: IFFALSE 9045
// begin repeat begin wait ( 0 0$1 ) ;
8704: LD_INT 35
8706: PPUSH
8707: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
8711: LD_INT 22
8713: PUSH
8714: LD_VAR 0 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 2
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 24
8735: PUSH
8736: LD_INT 651
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 69
8752: PUSH
8753: LD_INT 0
8755: GREATER
8756: IFFALSE 8984
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
8758: LD_ADDR_VAR 0 10
8762: PUSH
8763: LD_INT 22
8765: PUSH
8766: LD_VAR 0 1
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 21
8777: PUSH
8778: LD_INT 2
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 24
8787: PUSH
8788: LD_INT 651
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: PUSH
8805: FOR_IN
8806: IFFALSE 8982
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8808: LD_ADDR_VAR 0 15
8812: PUSH
8813: LD_INT 22
8815: PUSH
8816: LD_VAR 0 4
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: PPUSH
8830: LD_VAR 0 10
8834: PPUSH
8835: CALL_OW 74
8839: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8840: LD_ADDR_VAR 0 16
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_VAR 0 4
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 2
8859: PUSH
8860: LD_INT 59
8862: PUSH
8863: EMPTY
8864: LIST
8865: PUSH
8866: LD_INT 21
8868: PUSH
8869: LD_INT 1
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 21
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: PPUSH
8899: CALL_OW 69
8903: PPUSH
8904: LD_VAR 0 10
8908: PPUSH
8909: CALL_OW 74
8913: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8914: LD_VAR 0 10
8918: PPUSH
8919: LD_VAR 0 15
8923: PPUSH
8924: CALL_OW 296
8928: PUSH
8929: LD_INT 8
8931: PLUS
8932: PUSH
8933: LD_VAR 0 10
8937: PPUSH
8938: LD_VAR 0 16
8942: PPUSH
8943: CALL_OW 296
8947: LESS
8948: IFFALSE 8966
// begin ComAttackUnit ( i , target1 ) ;
8950: LD_VAR 0 10
8954: PPUSH
8955: LD_VAR 0 15
8959: PPUSH
8960: CALL_OW 115
// end else
8964: GO 8980
// begin ComAttackUnit ( i , target2 ) ;
8966: LD_VAR 0 10
8970: PPUSH
8971: LD_VAR 0 16
8975: PPUSH
8976: CALL_OW 115
// end ; end ;
8980: GO 8805
8982: POP
8983: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
8984: LD_INT 22
8986: PUSH
8987: LD_VAR 0 1
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 21
8998: PUSH
8999: LD_INT 2
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PPUSH
9010: CALL_OW 69
9014: PUSH
9015: LD_INT 0
9017: EQUAL
9018: PUSH
9019: LD_INT 22
9021: PUSH
9022: LD_VAR 0 4
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: PPUSH
9034: CALL_OW 69
9038: PUSH
9039: LD_INT 0
9041: EQUAL
9042: OR
9043: IFFALSE 8704
// end ; end ;
9045: LD_VAR 0 9
9049: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
9055: PPUSH
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
// for i = 1 to medicCount do
9063: LD_ADDR_VAR 0 14
9067: PUSH
9068: DOUBLE
9069: LD_INT 1
9071: DEC
9072: ST_TO_ADDR
9073: LD_VAR 0 7
9077: PUSH
9078: FOR_TO
9079: IFFALSE 9161
// begin uc_side = side ;
9081: LD_ADDR_OWVAR 20
9085: PUSH
9086: LD_VAR 0 1
9090: ST_TO_ADDR
// uc_nation = nation ;
9091: LD_ADDR_OWVAR 21
9095: PUSH
9096: LD_VAR 0 2
9100: ST_TO_ADDR
// hc_name =  ;
9101: LD_ADDR_OWVAR 26
9105: PUSH
9106: LD_STRING 
9108: ST_TO_ADDR
// hc_gallery =  ;
9109: LD_ADDR_OWVAR 33
9113: PUSH
9114: LD_STRING 
9116: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9117: LD_INT 0
9119: PPUSH
9120: LD_INT 4
9122: PPUSH
9123: LD_VAR 0 8
9127: PPUSH
9128: CALL_OW 380
// un = CreateHuman ;
9132: LD_ADDR_VAR 0 16
9136: PUSH
9137: CALL_OW 44
9141: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9142: LD_VAR 0 16
9146: PPUSH
9147: LD_VAR 0 9
9151: PPUSH
9152: LD_INT 0
9154: PPUSH
9155: CALL_OW 49
// end ;
9159: GO 9078
9161: POP
9162: POP
// for i = 1 to soldierCount do
9163: LD_ADDR_VAR 0 14
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_VAR 0 3
9177: PUSH
9178: FOR_TO
9179: IFFALSE 9261
// begin uc_side = side ;
9181: LD_ADDR_OWVAR 20
9185: PUSH
9186: LD_VAR 0 1
9190: ST_TO_ADDR
// uc_nation = nation ;
9191: LD_ADDR_OWVAR 21
9195: PUSH
9196: LD_VAR 0 2
9200: ST_TO_ADDR
// hc_name =  ;
9201: LD_ADDR_OWVAR 26
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_gallery =  ;
9209: LD_ADDR_OWVAR 33
9213: PUSH
9214: LD_STRING 
9216: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9217: LD_INT 0
9219: PPUSH
9220: LD_INT 1
9222: PPUSH
9223: LD_VAR 0 8
9227: PPUSH
9228: CALL_OW 380
// un = CreateHuman ;
9232: LD_ADDR_VAR 0 16
9236: PUSH
9237: CALL_OW 44
9241: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9242: LD_VAR 0 16
9246: PPUSH
9247: LD_VAR 0 9
9251: PPUSH
9252: LD_INT 0
9254: PPUSH
9255: CALL_OW 49
// end ;
9259: GO 9178
9261: POP
9262: POP
// for i = 1 to sniperCount do
9263: LD_ADDR_VAR 0 14
9267: PUSH
9268: DOUBLE
9269: LD_INT 1
9271: DEC
9272: ST_TO_ADDR
9273: LD_VAR 0 4
9277: PUSH
9278: FOR_TO
9279: IFFALSE 9361
// begin uc_side = side ;
9281: LD_ADDR_OWVAR 20
9285: PUSH
9286: LD_VAR 0 1
9290: ST_TO_ADDR
// uc_nation = nation ;
9291: LD_ADDR_OWVAR 21
9295: PUSH
9296: LD_VAR 0 2
9300: ST_TO_ADDR
// hc_name =  ;
9301: LD_ADDR_OWVAR 26
9305: PUSH
9306: LD_STRING 
9308: ST_TO_ADDR
// hc_gallery =  ;
9309: LD_ADDR_OWVAR 33
9313: PUSH
9314: LD_STRING 
9316: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9317: LD_INT 0
9319: PPUSH
9320: LD_INT 5
9322: PPUSH
9323: LD_VAR 0 8
9327: PPUSH
9328: CALL_OW 380
// un = CreateHuman ;
9332: LD_ADDR_VAR 0 16
9336: PUSH
9337: CALL_OW 44
9341: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9342: LD_VAR 0 16
9346: PPUSH
9347: LD_VAR 0 9
9351: PPUSH
9352: LD_INT 0
9354: PPUSH
9355: CALL_OW 49
// end ;
9359: GO 9278
9361: POP
9362: POP
// for i = 1 to bazookCount do
9363: LD_ADDR_VAR 0 14
9367: PUSH
9368: DOUBLE
9369: LD_INT 1
9371: DEC
9372: ST_TO_ADDR
9373: LD_VAR 0 5
9377: PUSH
9378: FOR_TO
9379: IFFALSE 9461
// begin uc_side = side ;
9381: LD_ADDR_OWVAR 20
9385: PUSH
9386: LD_VAR 0 1
9390: ST_TO_ADDR
// uc_nation = nation ;
9391: LD_ADDR_OWVAR 21
9395: PUSH
9396: LD_VAR 0 2
9400: ST_TO_ADDR
// hc_name =  ;
9401: LD_ADDR_OWVAR 26
9405: PUSH
9406: LD_STRING 
9408: ST_TO_ADDR
// hc_gallery =  ;
9409: LD_ADDR_OWVAR 33
9413: PUSH
9414: LD_STRING 
9416: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9417: LD_INT 0
9419: PPUSH
9420: LD_INT 9
9422: PPUSH
9423: LD_VAR 0 8
9427: PPUSH
9428: CALL_OW 380
// un = CreateHuman ;
9432: LD_ADDR_VAR 0 16
9436: PUSH
9437: CALL_OW 44
9441: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9442: LD_VAR 0 16
9446: PPUSH
9447: LD_VAR 0 9
9451: PPUSH
9452: LD_INT 0
9454: PPUSH
9455: CALL_OW 49
// end ;
9459: GO 9378
9461: POP
9462: POP
// for i = 1 to mortalCount do
9463: LD_ADDR_VAR 0 14
9467: PUSH
9468: DOUBLE
9469: LD_INT 1
9471: DEC
9472: ST_TO_ADDR
9473: LD_VAR 0 6
9477: PUSH
9478: FOR_TO
9479: IFFALSE 9561
// begin uc_side = side ;
9481: LD_ADDR_OWVAR 20
9485: PUSH
9486: LD_VAR 0 1
9490: ST_TO_ADDR
// uc_nation = nation ;
9491: LD_ADDR_OWVAR 21
9495: PUSH
9496: LD_VAR 0 2
9500: ST_TO_ADDR
// hc_name =  ;
9501: LD_ADDR_OWVAR 26
9505: PUSH
9506: LD_STRING 
9508: ST_TO_ADDR
// hc_gallery =  ;
9509: LD_ADDR_OWVAR 33
9513: PUSH
9514: LD_STRING 
9516: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9517: LD_INT 0
9519: PPUSH
9520: LD_INT 8
9522: PPUSH
9523: LD_VAR 0 8
9527: PPUSH
9528: CALL_OW 380
// un = CreateHuman ;
9532: LD_ADDR_VAR 0 16
9536: PUSH
9537: CALL_OW 44
9541: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9542: LD_VAR 0 16
9546: PPUSH
9547: LD_VAR 0 9
9551: PPUSH
9552: LD_INT 0
9554: PPUSH
9555: CALL_OW 49
// end ;
9559: GO 9478
9561: POP
9562: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9563: LD_ADDR_VAR 0 19
9567: PUSH
9568: LD_INT 22
9570: PUSH
9571: LD_VAR 0 1
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: LD_INT 25
9585: PUSH
9586: LD_INT 1
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 25
9595: PUSH
9596: LD_INT 5
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 8
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 25
9615: PUSH
9616: LD_INT 9
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PPUSH
9634: CALL_OW 69
9638: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9639: LD_ADDR_VAR 0 18
9643: PUSH
9644: LD_INT 22
9646: PUSH
9647: LD_VAR 0 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 25
9658: PUSH
9659: LD_INT 4
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: ST_TO_ADDR
// for i in medic_list do
9675: LD_ADDR_VAR 0 14
9679: PUSH
9680: LD_VAR 0 18
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9704
// ComMoveToArea ( i , healArea ) ;
9688: LD_VAR 0 14
9692: PPUSH
9693: LD_VAR 0 10
9697: PPUSH
9698: CALL_OW 113
9702: GO 9685
9704: POP
9705: POP
// if strategy = 1 then
9706: LD_VAR 0 12
9710: PUSH
9711: LD_INT 1
9713: EQUAL
9714: IFFALSE 10449
// begin repeat wait ( 0 0$3 ) ;
9716: LD_INT 105
9718: PPUSH
9719: CALL_OW 67
// for i in soldiersOK_list do
9723: LD_ADDR_VAR 0 14
9727: PUSH
9728: LD_VAR 0 19
9732: PUSH
9733: FOR_IN
9734: IFFALSE 9798
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9736: LD_VAR 0 14
9740: PPUSH
9741: LD_INT 91
9743: PPUSH
9744: LD_INT 63
9746: PPUSH
9747: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
9751: LD_VAR 0 14
9755: PPUSH
9756: LD_INT 101
9758: PPUSH
9759: LD_INT 53
9761: PPUSH
9762: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
9766: LD_VAR 0 14
9770: PPUSH
9771: LD_INT 75
9773: PPUSH
9774: LD_INT 23
9776: PPUSH
9777: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
9781: LD_VAR 0 14
9785: PPUSH
9786: LD_INT 78
9788: PPUSH
9789: LD_INT 8
9791: PPUSH
9792: CALL_OW 174
// end ;
9796: GO 9733
9798: POP
9799: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
9800: LD_INT 12
9802: PPUSH
9803: LD_INT 22
9805: PUSH
9806: LD_VAR 0 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PPUSH
9815: CALL_OW 70
9819: PUSH
9820: LD_INT 2
9822: GREATER
9823: IFFALSE 9716
// repeat wait ( 0 0$1 ) ;
9825: LD_INT 35
9827: PPUSH
9828: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9832: LD_ADDR_VAR 0 17
9836: PUSH
9837: LD_INT 22
9839: PUSH
9840: LD_VAR 0 1
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 1
9851: PUSH
9852: LD_INT 3
9854: PUSH
9855: LD_INT 24
9857: PUSH
9858: LD_INT 550
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 24
9871: PUSH
9872: LD_INT 250
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 69
9892: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9893: LD_ADDR_VAR 0 19
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_VAR 0 1
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: LD_INT 25
9915: PUSH
9916: LD_INT 1
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 25
9925: PUSH
9926: LD_INT 5
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 25
9935: PUSH
9936: LD_INT 8
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 25
9945: PUSH
9946: LD_INT 9
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 24
9962: PUSH
9963: LD_INT 1000
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 69
9979: ST_TO_ADDR
// if medicCount > 0 then
9980: LD_VAR 0 7
9984: PUSH
9985: LD_INT 0
9987: GREATER
9988: IFFALSE 10062
// begin if damageUnit_list > 0 then
9990: LD_VAR 0 17
9994: PUSH
9995: LD_INT 0
9997: GREATER
9998: IFFALSE 10062
// begin for i in damageUnit_list do
10000: LD_ADDR_VAR 0 14
10004: PUSH
10005: LD_VAR 0 17
10009: PUSH
10010: FOR_IN
10011: IFFALSE 10060
// begin ComMoveToArea ( i , healArea ) ;
10013: LD_VAR 0 14
10017: PPUSH
10018: LD_VAR 0 10
10022: PPUSH
10023: CALL_OW 113
// for j in medic_list do
10027: LD_ADDR_VAR 0 15
10031: PUSH
10032: LD_VAR 0 18
10036: PUSH
10037: FOR_IN
10038: IFFALSE 10056
// AddComHeal ( j , i ) ;
10040: LD_VAR 0 15
10044: PPUSH
10045: LD_VAR 0 14
10049: PPUSH
10050: CALL_OW 188
10054: GO 10037
10056: POP
10057: POP
// end ;
10058: GO 10010
10060: POP
10061: POP
// end ; end ; for i in soldiersOK_list do
10062: LD_ADDR_VAR 0 14
10066: PUSH
10067: LD_VAR 0 19
10071: PUSH
10072: FOR_IN
10073: IFFALSE 10249
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10075: LD_ADDR_VAR 0 22
10079: PUSH
10080: LD_INT 22
10082: PUSH
10083: LD_VAR 0 11
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: PPUSH
10097: LD_VAR 0 14
10101: PPUSH
10102: CALL_OW 74
10106: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10107: LD_ADDR_VAR 0 23
10111: PUSH
10112: LD_INT 22
10114: PUSH
10115: LD_VAR 0 11
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 59
10129: PUSH
10130: EMPTY
10131: LIST
10132: PUSH
10133: LD_INT 21
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 21
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: PPUSH
10171: LD_VAR 0 14
10175: PPUSH
10176: CALL_OW 74
10180: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10181: LD_VAR 0 14
10185: PPUSH
10186: LD_VAR 0 22
10190: PPUSH
10191: CALL_OW 296
10195: PUSH
10196: LD_INT 8
10198: PLUS
10199: PUSH
10200: LD_VAR 0 14
10204: PPUSH
10205: LD_VAR 0 23
10209: PPUSH
10210: CALL_OW 296
10214: LESS
10215: IFFALSE 10233
// begin ComAttackUnit ( i , target1 ) ;
10217: LD_VAR 0 14
10221: PPUSH
10222: LD_VAR 0 22
10226: PPUSH
10227: CALL_OW 115
// end else
10231: GO 10247
// begin ComAttackUnit ( i , target2 ) ;
10233: LD_VAR 0 14
10237: PPUSH
10238: LD_VAR 0 23
10242: PPUSH
10243: CALL_OW 115
// end ; end ;
10247: GO 10072
10249: POP
10250: POP
// for i in soldiersOK_list do
10251: LD_ADDR_VAR 0 14
10255: PUSH
10256: LD_VAR 0 19
10260: PUSH
10261: FOR_IN
10262: IFFALSE 10438
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10264: LD_ADDR_VAR 0 22
10268: PUSH
10269: LD_INT 22
10271: PUSH
10272: LD_VAR 0 11
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 69
10285: PPUSH
10286: LD_VAR 0 14
10290: PPUSH
10291: CALL_OW 74
10295: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10296: LD_ADDR_VAR 0 23
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: LD_VAR 0 11
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: LD_INT 59
10318: PUSH
10319: EMPTY
10320: LIST
10321: PUSH
10322: LD_INT 21
10324: PUSH
10325: LD_INT 1
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 21
10334: PUSH
10335: LD_INT 2
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: PPUSH
10355: CALL_OW 69
10359: PPUSH
10360: LD_VAR 0 14
10364: PPUSH
10365: CALL_OW 74
10369: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10370: LD_VAR 0 14
10374: PPUSH
10375: LD_VAR 0 22
10379: PPUSH
10380: CALL_OW 296
10384: PUSH
10385: LD_INT 8
10387: PLUS
10388: PUSH
10389: LD_VAR 0 14
10393: PPUSH
10394: LD_VAR 0 23
10398: PPUSH
10399: CALL_OW 296
10403: LESS
10404: IFFALSE 10422
// begin ComAttackUnit ( i , target1 ) ;
10406: LD_VAR 0 14
10410: PPUSH
10411: LD_VAR 0 22
10415: PPUSH
10416: CALL_OW 115
// end else
10420: GO 10436
// begin ComAttackUnit ( i , target2 ) ;
10422: LD_VAR 0 14
10426: PPUSH
10427: LD_VAR 0 23
10431: PPUSH
10432: CALL_OW 115
// end ; end ;
10436: GO 10261
10438: POP
10439: POP
// until soldiersOK_list = [ ] ;
10440: LD_VAR 0 19
10444: PUSH
10445: EMPTY
10446: EQUAL
10447: IFFALSE 9825
// end ; if strategy = 2 then
10449: LD_VAR 0 12
10453: PUSH
10454: LD_INT 2
10456: EQUAL
10457: IFFALSE 11162
// begin repeat wait ( 0 0$1 ) ;
10459: LD_INT 35
10461: PPUSH
10462: CALL_OW 67
// for i in soldiersOK_list do
10466: LD_ADDR_VAR 0 14
10470: PUSH
10471: LD_VAR 0 19
10475: PUSH
10476: FOR_IN
10477: IFFALSE 10511
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10479: LD_VAR 0 14
10483: PPUSH
10484: LD_INT 91
10486: PPUSH
10487: LD_INT 63
10489: PPUSH
10490: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
10494: LD_VAR 0 14
10498: PPUSH
10499: LD_INT 75
10501: PPUSH
10502: LD_INT 33
10504: PPUSH
10505: CALL_OW 174
// end ;
10509: GO 10476
10511: POP
10512: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
10513: LD_INT 13
10515: PPUSH
10516: LD_INT 22
10518: PUSH
10519: LD_VAR 0 1
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 70
10532: PUSH
10533: LD_INT 2
10535: GREATER
10536: IFFALSE 10459
// repeat wait ( 0 0$3 ) ;
10538: LD_INT 105
10540: PPUSH
10541: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10545: LD_ADDR_VAR 0 17
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_VAR 0 1
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 1
10564: PUSH
10565: LD_INT 3
10567: PUSH
10568: LD_INT 24
10570: PUSH
10571: LD_INT 550
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 24
10584: PUSH
10585: LD_INT 250
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10606: LD_ADDR_VAR 0 19
10610: PUSH
10611: LD_INT 22
10613: PUSH
10614: LD_VAR 0 1
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 25
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 25
10638: PUSH
10639: LD_INT 5
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 8
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 25
10658: PUSH
10659: LD_INT 9
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 24
10675: PUSH
10676: LD_INT 1000
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 69
10692: ST_TO_ADDR
// if medicCount > 0 then
10693: LD_VAR 0 7
10697: PUSH
10698: LD_INT 0
10700: GREATER
10701: IFFALSE 10775
// begin if damageUnit_list > 0 then
10703: LD_VAR 0 17
10707: PUSH
10708: LD_INT 0
10710: GREATER
10711: IFFALSE 10775
// begin for i in damageUnit_list do
10713: LD_ADDR_VAR 0 14
10717: PUSH
10718: LD_VAR 0 17
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10773
// begin ComMoveToArea ( i , healArea ) ;
10726: LD_VAR 0 14
10730: PPUSH
10731: LD_VAR 0 10
10735: PPUSH
10736: CALL_OW 113
// for j in medic_list do
10740: LD_ADDR_VAR 0 15
10744: PUSH
10745: LD_VAR 0 18
10749: PUSH
10750: FOR_IN
10751: IFFALSE 10769
// AddComHeal ( j , i ) ;
10753: LD_VAR 0 15
10757: PPUSH
10758: LD_VAR 0 14
10762: PPUSH
10763: CALL_OW 188
10767: GO 10750
10769: POP
10770: POP
// end ;
10771: GO 10723
10773: POP
10774: POP
// end ; end ; for i in soldiersOK_list do
10775: LD_ADDR_VAR 0 14
10779: PUSH
10780: LD_VAR 0 19
10784: PUSH
10785: FOR_IN
10786: IFFALSE 10962
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10788: LD_ADDR_VAR 0 22
10792: PUSH
10793: LD_INT 22
10795: PUSH
10796: LD_VAR 0 11
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: PPUSH
10810: LD_VAR 0 14
10814: PPUSH
10815: CALL_OW 74
10819: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10820: LD_ADDR_VAR 0 23
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_VAR 0 11
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 2
10839: PUSH
10840: LD_INT 59
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: LD_INT 21
10848: PUSH
10849: LD_INT 1
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 21
10858: PUSH
10859: LD_INT 2
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: PPUSH
10879: CALL_OW 69
10883: PPUSH
10884: LD_VAR 0 14
10888: PPUSH
10889: CALL_OW 74
10893: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10894: LD_VAR 0 14
10898: PPUSH
10899: LD_VAR 0 22
10903: PPUSH
10904: CALL_OW 296
10908: PUSH
10909: LD_INT 8
10911: PLUS
10912: PUSH
10913: LD_VAR 0 14
10917: PPUSH
10918: LD_VAR 0 23
10922: PPUSH
10923: CALL_OW 296
10927: LESS
10928: IFFALSE 10946
// begin ComAttackUnit ( i , target1 ) ;
10930: LD_VAR 0 14
10934: PPUSH
10935: LD_VAR 0 22
10939: PPUSH
10940: CALL_OW 115
// end else
10944: GO 10960
// begin ComAttackUnit ( i , target2 ) ;
10946: LD_VAR 0 14
10950: PPUSH
10951: LD_VAR 0 23
10955: PPUSH
10956: CALL_OW 115
// end ; end ;
10960: GO 10785
10962: POP
10963: POP
// for i in soldiersOK_list do
10964: LD_ADDR_VAR 0 14
10968: PUSH
10969: LD_VAR 0 19
10973: PUSH
10974: FOR_IN
10975: IFFALSE 11151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10977: LD_ADDR_VAR 0 22
10981: PUSH
10982: LD_INT 22
10984: PUSH
10985: LD_VAR 0 11
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PPUSH
10994: CALL_OW 69
10998: PPUSH
10999: LD_VAR 0 14
11003: PPUSH
11004: CALL_OW 74
11008: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11009: LD_ADDR_VAR 0 23
11013: PUSH
11014: LD_INT 22
11016: PUSH
11017: LD_VAR 0 11
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 2
11028: PUSH
11029: LD_INT 59
11031: PUSH
11032: EMPTY
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 1
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 21
11047: PUSH
11048: LD_INT 2
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: PPUSH
11073: LD_VAR 0 14
11077: PPUSH
11078: CALL_OW 74
11082: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11083: LD_VAR 0 14
11087: PPUSH
11088: LD_VAR 0 22
11092: PPUSH
11093: CALL_OW 296
11097: PUSH
11098: LD_INT 8
11100: PLUS
11101: PUSH
11102: LD_VAR 0 14
11106: PPUSH
11107: LD_VAR 0 23
11111: PPUSH
11112: CALL_OW 296
11116: LESS
11117: IFFALSE 11135
// begin ComAttackUnit ( i , target1 ) ;
11119: LD_VAR 0 14
11123: PPUSH
11124: LD_VAR 0 22
11128: PPUSH
11129: CALL_OW 115
// end else
11133: GO 11149
// begin ComAttackUnit ( i , target2 ) ;
11135: LD_VAR 0 14
11139: PPUSH
11140: LD_VAR 0 23
11144: PPUSH
11145: CALL_OW 115
// end ; end ;
11149: GO 10974
11151: POP
11152: POP
// until soldiersOK_list = [ ] ;
11153: LD_VAR 0 19
11157: PUSH
11158: EMPTY
11159: EQUAL
11160: IFFALSE 10538
// end ; if strategy = 3 then
11162: LD_VAR 0 12
11166: PUSH
11167: LD_INT 3
11169: EQUAL
11170: IFFALSE 11905
// begin repeat wait ( 0 0$3 ) ;
11172: LD_INT 105
11174: PPUSH
11175: CALL_OW 67
// for i in soldiersOK_list do
11179: LD_ADDR_VAR 0 14
11183: PUSH
11184: LD_VAR 0 19
11188: PUSH
11189: FOR_IN
11190: IFFALSE 11254
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11192: LD_VAR 0 14
11196: PPUSH
11197: LD_INT 63
11199: PPUSH
11200: LD_INT 71
11202: PPUSH
11203: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
11207: LD_VAR 0 14
11211: PPUSH
11212: LD_INT 35
11214: PPUSH
11215: LD_INT 44
11217: PPUSH
11218: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
11222: LD_VAR 0 14
11226: PPUSH
11227: LD_INT 23
11229: PPUSH
11230: LD_INT 18
11232: PPUSH
11233: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
11237: LD_VAR 0 14
11241: PPUSH
11242: LD_INT 26
11244: PPUSH
11245: LD_INT 12
11247: PPUSH
11248: CALL_OW 174
// end ;
11252: GO 11189
11254: POP
11255: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11256: LD_INT 14
11258: PPUSH
11259: LD_INT 22
11261: PUSH
11262: LD_VAR 0 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 70
11275: PUSH
11276: LD_INT 2
11278: GREATER
11279: IFFALSE 11172
// repeat wait ( 0 0$1 ) ;
11281: LD_INT 35
11283: PPUSH
11284: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11288: LD_ADDR_VAR 0 17
11292: PUSH
11293: LD_INT 22
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: LD_INT 24
11313: PUSH
11314: LD_INT 550
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 24
11327: PUSH
11328: LD_INT 250
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 69
11348: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11349: LD_ADDR_VAR 0 19
11353: PUSH
11354: LD_INT 22
11356: PUSH
11357: LD_VAR 0 1
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 2
11368: PUSH
11369: LD_INT 25
11371: PUSH
11372: LD_INT 1
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 25
11381: PUSH
11382: LD_INT 5
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 25
11391: PUSH
11392: LD_INT 8
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 25
11401: PUSH
11402: LD_INT 9
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 24
11418: PUSH
11419: LD_INT 1000
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: PPUSH
11431: CALL_OW 69
11435: ST_TO_ADDR
// if medicCount > 0 then
11436: LD_VAR 0 7
11440: PUSH
11441: LD_INT 0
11443: GREATER
11444: IFFALSE 11518
// begin if damageUnit_list > 0 then
11446: LD_VAR 0 17
11450: PUSH
11451: LD_INT 0
11453: GREATER
11454: IFFALSE 11518
// begin for i in damageUnit_list do
11456: LD_ADDR_VAR 0 14
11460: PUSH
11461: LD_VAR 0 17
11465: PUSH
11466: FOR_IN
11467: IFFALSE 11516
// begin ComMoveToArea ( i , healArea ) ;
11469: LD_VAR 0 14
11473: PPUSH
11474: LD_VAR 0 10
11478: PPUSH
11479: CALL_OW 113
// for j in medic_list do
11483: LD_ADDR_VAR 0 15
11487: PUSH
11488: LD_VAR 0 18
11492: PUSH
11493: FOR_IN
11494: IFFALSE 11512
// AddComHeal ( j , i ) ;
11496: LD_VAR 0 15
11500: PPUSH
11501: LD_VAR 0 14
11505: PPUSH
11506: CALL_OW 188
11510: GO 11493
11512: POP
11513: POP
// end ;
11514: GO 11466
11516: POP
11517: POP
// end ; end ; for i in soldiersOK_list do
11518: LD_ADDR_VAR 0 14
11522: PUSH
11523: LD_VAR 0 19
11527: PUSH
11528: FOR_IN
11529: IFFALSE 11705
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11531: LD_ADDR_VAR 0 22
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_VAR 0 11
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PPUSH
11548: CALL_OW 69
11552: PPUSH
11553: LD_VAR 0 14
11557: PPUSH
11558: CALL_OW 74
11562: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11563: LD_ADDR_VAR 0 23
11567: PUSH
11568: LD_INT 22
11570: PUSH
11571: LD_VAR 0 11
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: LD_INT 59
11585: PUSH
11586: EMPTY
11587: LIST
11588: PUSH
11589: LD_INT 21
11591: PUSH
11592: LD_INT 1
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 21
11601: PUSH
11602: LD_INT 2
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: PPUSH
11622: CALL_OW 69
11626: PPUSH
11627: LD_VAR 0 14
11631: PPUSH
11632: CALL_OW 74
11636: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11637: LD_VAR 0 14
11641: PPUSH
11642: LD_VAR 0 22
11646: PPUSH
11647: CALL_OW 296
11651: PUSH
11652: LD_INT 8
11654: PLUS
11655: PUSH
11656: LD_VAR 0 14
11660: PPUSH
11661: LD_VAR 0 23
11665: PPUSH
11666: CALL_OW 296
11670: LESS
11671: IFFALSE 11689
// begin ComAttackUnit ( i , target1 ) ;
11673: LD_VAR 0 14
11677: PPUSH
11678: LD_VAR 0 22
11682: PPUSH
11683: CALL_OW 115
// end else
11687: GO 11703
// begin ComAttackUnit ( i , target2 ) ;
11689: LD_VAR 0 14
11693: PPUSH
11694: LD_VAR 0 23
11698: PPUSH
11699: CALL_OW 115
// end ; end ;
11703: GO 11528
11705: POP
11706: POP
// for i in soldiersOK_list do
11707: LD_ADDR_VAR 0 14
11711: PUSH
11712: LD_VAR 0 19
11716: PUSH
11717: FOR_IN
11718: IFFALSE 11894
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11720: LD_ADDR_VAR 0 22
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_VAR 0 11
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 69
11741: PPUSH
11742: LD_VAR 0 14
11746: PPUSH
11747: CALL_OW 74
11751: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11752: LD_ADDR_VAR 0 23
11756: PUSH
11757: LD_INT 22
11759: PUSH
11760: LD_VAR 0 11
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: LD_INT 59
11774: PUSH
11775: EMPTY
11776: LIST
11777: PUSH
11778: LD_INT 21
11780: PUSH
11781: LD_INT 1
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 21
11790: PUSH
11791: LD_INT 2
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: PPUSH
11816: LD_VAR 0 14
11820: PPUSH
11821: CALL_OW 74
11825: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11826: LD_VAR 0 14
11830: PPUSH
11831: LD_VAR 0 22
11835: PPUSH
11836: CALL_OW 296
11840: PUSH
11841: LD_INT 8
11843: PLUS
11844: PUSH
11845: LD_VAR 0 14
11849: PPUSH
11850: LD_VAR 0 23
11854: PPUSH
11855: CALL_OW 296
11859: LESS
11860: IFFALSE 11878
// begin ComAttackUnit ( i , target1 ) ;
11862: LD_VAR 0 14
11866: PPUSH
11867: LD_VAR 0 22
11871: PPUSH
11872: CALL_OW 115
// end else
11876: GO 11892
// begin ComAttackUnit ( i , target2 ) ;
11878: LD_VAR 0 14
11882: PPUSH
11883: LD_VAR 0 23
11887: PPUSH
11888: CALL_OW 115
// end ; end ;
11892: GO 11717
11894: POP
11895: POP
// until soldiersOK_list = [ ] ;
11896: LD_VAR 0 19
11900: PUSH
11901: EMPTY
11902: EQUAL
11903: IFFALSE 11281
// end ; end ;
11905: LD_VAR 0 13
11909: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
11910: LD_INT 0
11912: PPUSH
11913: PPUSH
11914: PPUSH
11915: PPUSH
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
// amChassisTab = [ ] ;
11923: LD_ADDR_VAR 0 19
11927: PUSH
11928: EMPTY
11929: ST_TO_ADDR
// arChassisTab = [ ] ;
11930: LD_ADDR_VAR 0 18
11934: PUSH
11935: EMPTY
11936: ST_TO_ADDR
// ruChassisTab = [ ] ;
11937: LD_ADDR_VAR 0 17
11941: PUSH
11942: EMPTY
11943: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11944: LD_INT 35
11946: PPUSH
11947: CALL_OW 67
// if nation = 1 then
11951: LD_VAR 0 5
11955: PUSH
11956: LD_INT 1
11958: EQUAL
11959: IFFALSE 12450
// begin uc_side = side ;
11961: LD_ADDR_OWVAR 20
11965: PUSH
11966: LD_VAR 0 2
11970: ST_TO_ADDR
// uc_nation = nation ;
11971: LD_ADDR_OWVAR 21
11975: PUSH
11976: LD_VAR 0 5
11980: ST_TO_ADDR
// vc_engine = vehengine ;
11981: LD_ADDR_OWVAR 39
11985: PUSH
11986: LD_VAR 0 6
11990: ST_TO_ADDR
// vc_control = vehcontrol ;
11991: LD_ADDR_OWVAR 38
11995: PUSH
11996: LD_VAR 0 7
12000: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12001: LD_ADDR_OWVAR 40
12005: PUSH
12006: LD_VAR 0 10
12010: PUSH
12011: LD_INT 1
12013: PPUSH
12014: LD_VAR 0 10
12018: PPUSH
12019: CALL_OW 12
12023: ARRAY
12024: ST_TO_ADDR
// for j = 1 to AMWeapon do
12025: LD_ADDR_VAR 0 14
12029: PUSH
12030: DOUBLE
12031: LD_INT 1
12033: DEC
12034: ST_TO_ADDR
12035: LD_VAR 0 10
12039: PUSH
12040: FOR_TO
12041: IFFALSE 12342
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12043: LD_VAR 0 10
12047: PUSH
12048: LD_VAR 0 14
12052: ARRAY
12053: PUSH
12054: LD_INT 2
12056: EQUAL
12057: PUSH
12058: LD_VAR 0 10
12062: PUSH
12063: LD_VAR 0 14
12067: ARRAY
12068: PUSH
12069: LD_INT 3
12071: EQUAL
12072: OR
12073: IFFALSE 12126
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12075: LD_ADDR_VAR 0 19
12079: PUSH
12080: LD_INT 1
12082: PUSH
12083: LD_INT 2
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: LD_INT 4
12091: PUSH
12092: LD_INT 5
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12102: LD_ADDR_OWVAR 37
12106: PUSH
12107: LD_VAR 0 19
12111: PUSH
12112: LD_INT 1
12114: PPUSH
12115: LD_VAR 0 19
12119: PPUSH
12120: CALL_OW 12
12124: ARRAY
12125: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12126: LD_VAR 0 10
12130: PUSH
12131: LD_VAR 0 14
12135: ARRAY
12136: PUSH
12137: LD_INT 4
12139: EQUAL
12140: PUSH
12141: LD_VAR 0 10
12145: PUSH
12146: LD_VAR 0 14
12150: ARRAY
12151: PUSH
12152: LD_INT 5
12154: EQUAL
12155: OR
12156: PUSH
12157: LD_VAR 0 10
12161: PUSH
12162: LD_VAR 0 14
12166: ARRAY
12167: PUSH
12168: LD_INT 9
12170: EQUAL
12171: OR
12172: PUSH
12173: LD_VAR 0 10
12177: PUSH
12178: LD_VAR 0 14
12182: ARRAY
12183: PUSH
12184: LD_INT 11
12186: EQUAL
12187: OR
12188: PUSH
12189: LD_VAR 0 10
12193: PUSH
12194: LD_VAR 0 14
12198: ARRAY
12199: PUSH
12200: LD_INT 7
12202: EQUAL
12203: OR
12204: IFFALSE 12253
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12206: LD_ADDR_VAR 0 19
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: LD_INT 3
12216: PUSH
12217: LD_INT 4
12219: PUSH
12220: LD_INT 5
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12229: LD_ADDR_OWVAR 37
12233: PUSH
12234: LD_VAR 0 19
12238: PUSH
12239: LD_INT 1
12241: PPUSH
12242: LD_VAR 0 19
12246: PPUSH
12247: CALL_OW 12
12251: ARRAY
12252: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12253: LD_VAR 0 10
12257: PUSH
12258: LD_VAR 0 14
12262: ARRAY
12263: PUSH
12264: LD_INT 8
12266: EQUAL
12267: PUSH
12268: LD_VAR 0 10
12272: PUSH
12273: LD_VAR 0 14
12277: ARRAY
12278: PUSH
12279: LD_INT 6
12281: EQUAL
12282: OR
12283: PUSH
12284: LD_VAR 0 10
12288: PUSH
12289: LD_VAR 0 14
12293: ARRAY
12294: PUSH
12295: LD_INT 10
12297: EQUAL
12298: OR
12299: IFFALSE 12340
// begin amChassisTab = [ 4 , 5 ] ;
12301: LD_ADDR_VAR 0 19
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: LD_INT 5
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12316: LD_ADDR_OWVAR 37
12320: PUSH
12321: LD_VAR 0 19
12325: PUSH
12326: LD_INT 1
12328: PPUSH
12329: LD_VAR 0 19
12333: PPUSH
12334: CALL_OW 12
12338: ARRAY
12339: ST_TO_ADDR
// end ; end ;
12340: GO 12040
12342: POP
12343: POP
// veh = CreateVehicle ;
12344: LD_ADDR_VAR 0 16
12348: PUSH
12349: CALL_OW 45
12353: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12354: LD_VAR 0 16
12358: PPUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: LD_INT 0
12366: PPUSH
12367: CALL_OW 49
// if vehControl = 1 then
12371: LD_VAR 0 7
12375: PUSH
12376: LD_INT 1
12378: EQUAL
12379: IFFALSE 12436
// begin hc_gallery =  ;
12381: LD_ADDR_OWVAR 33
12385: PUSH
12386: LD_STRING 
12388: ST_TO_ADDR
// hc_name =  ;
12389: LD_ADDR_OWVAR 26
12393: PUSH
12394: LD_STRING 
12396: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12397: LD_INT 0
12399: PPUSH
12400: LD_INT 3
12402: PPUSH
12403: LD_VAR 0 4
12407: PPUSH
12408: CALL_OW 380
// un = CreateHuman ;
12412: LD_ADDR_VAR 0 15
12416: PUSH
12417: CALL_OW 44
12421: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12422: LD_VAR 0 15
12426: PPUSH
12427: LD_VAR 0 16
12431: PPUSH
12432: CALL_OW 52
// end ; i = i + 1 ;
12436: LD_ADDR_VAR 0 13
12440: PUSH
12441: LD_VAR 0 13
12445: PUSH
12446: LD_INT 1
12448: PLUS
12449: ST_TO_ADDR
// end ; if nation = 2 then
12450: LD_VAR 0 5
12454: PUSH
12455: LD_INT 2
12457: EQUAL
12458: IFFALSE 12882
// begin uc_side = side ;
12460: LD_ADDR_OWVAR 20
12464: PUSH
12465: LD_VAR 0 2
12469: ST_TO_ADDR
// uc_nation = nation ;
12470: LD_ADDR_OWVAR 21
12474: PUSH
12475: LD_VAR 0 5
12479: ST_TO_ADDR
// vc_engine = vehengine ;
12480: LD_ADDR_OWVAR 39
12484: PUSH
12485: LD_VAR 0 6
12489: ST_TO_ADDR
// vc_control = vehcontrol ;
12490: LD_ADDR_OWVAR 38
12494: PUSH
12495: LD_VAR 0 7
12499: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12500: LD_ADDR_OWVAR 40
12504: PUSH
12505: LD_VAR 0 9
12509: PUSH
12510: LD_INT 1
12512: PPUSH
12513: LD_VAR 0 9
12517: PPUSH
12518: CALL_OW 12
12522: ARRAY
12523: ST_TO_ADDR
// for j = 1 to ARWeapons do
12524: LD_ADDR_VAR 0 14
12528: PUSH
12529: DOUBLE
12530: LD_INT 1
12532: DEC
12533: ST_TO_ADDR
12534: LD_VAR 0 9
12538: PUSH
12539: FOR_TO
12540: IFFALSE 12774
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12542: LD_VAR 0 9
12546: PUSH
12547: LD_VAR 0 14
12551: ARRAY
12552: PUSH
12553: LD_INT 24
12555: EQUAL
12556: PUSH
12557: LD_VAR 0 9
12561: PUSH
12562: LD_VAR 0 14
12566: ARRAY
12567: PUSH
12568: LD_INT 22
12570: EQUAL
12571: OR
12572: PUSH
12573: LD_VAR 0 9
12577: PUSH
12578: LD_VAR 0 14
12582: ARRAY
12583: PUSH
12584: LD_INT 23
12586: EQUAL
12587: OR
12588: PUSH
12589: LD_VAR 0 9
12593: PUSH
12594: LD_VAR 0 14
12598: ARRAY
12599: PUSH
12600: LD_INT 30
12602: EQUAL
12603: OR
12604: IFFALSE 12653
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
12606: LD_ADDR_VAR 0 18
12610: PUSH
12611: LD_INT 11
12613: PUSH
12614: LD_INT 12
12616: PUSH
12617: LD_INT 13
12619: PUSH
12620: LD_INT 14
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12629: LD_ADDR_OWVAR 37
12633: PUSH
12634: LD_VAR 0 18
12638: PUSH
12639: LD_INT 1
12641: PPUSH
12642: LD_VAR 0 18
12646: PPUSH
12647: CALL_OW 12
12651: ARRAY
12652: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
12653: LD_VAR 0 9
12657: PUSH
12658: LD_VAR 0 14
12662: ARRAY
12663: PUSH
12664: LD_INT 29
12666: EQUAL
12667: PUSH
12668: LD_VAR 0 9
12672: PUSH
12673: LD_VAR 0 14
12677: ARRAY
12678: PUSH
12679: LD_INT 28
12681: EQUAL
12682: OR
12683: PUSH
12684: LD_VAR 0 9
12688: PUSH
12689: LD_VAR 0 14
12693: ARRAY
12694: PUSH
12695: LD_INT 27
12697: EQUAL
12698: OR
12699: PUSH
12700: LD_VAR 0 9
12704: PUSH
12705: LD_VAR 0 14
12709: ARRAY
12710: PUSH
12711: LD_INT 26
12713: EQUAL
12714: OR
12715: PUSH
12716: LD_VAR 0 9
12720: PUSH
12721: LD_VAR 0 14
12725: ARRAY
12726: PUSH
12727: LD_INT 25
12729: EQUAL
12730: OR
12731: IFFALSE 12772
// begin arChassisTab = [ 13 , 14 ] ;
12733: LD_ADDR_VAR 0 18
12737: PUSH
12738: LD_INT 13
12740: PUSH
12741: LD_INT 14
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12748: LD_ADDR_OWVAR 37
12752: PUSH
12753: LD_VAR 0 18
12757: PUSH
12758: LD_INT 1
12760: PPUSH
12761: LD_VAR 0 18
12765: PPUSH
12766: CALL_OW 12
12770: ARRAY
12771: ST_TO_ADDR
// end ; end ;
12772: GO 12539
12774: POP
12775: POP
// veh = CreateVehicle ;
12776: LD_ADDR_VAR 0 16
12780: PUSH
12781: CALL_OW 45
12785: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12786: LD_VAR 0 16
12790: PPUSH
12791: LD_VAR 0 1
12795: PPUSH
12796: LD_INT 0
12798: PPUSH
12799: CALL_OW 49
// if vehcontrol = 1 then
12803: LD_VAR 0 7
12807: PUSH
12808: LD_INT 1
12810: EQUAL
12811: IFFALSE 12868
// begin hc_gallery =  ;
12813: LD_ADDR_OWVAR 33
12817: PUSH
12818: LD_STRING 
12820: ST_TO_ADDR
// hc_name =  ;
12821: LD_ADDR_OWVAR 26
12825: PUSH
12826: LD_STRING 
12828: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12829: LD_INT 0
12831: PPUSH
12832: LD_INT 3
12834: PPUSH
12835: LD_VAR 0 4
12839: PPUSH
12840: CALL_OW 380
// un = CreateHuman ;
12844: LD_ADDR_VAR 0 15
12848: PUSH
12849: CALL_OW 44
12853: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12854: LD_VAR 0 15
12858: PPUSH
12859: LD_VAR 0 16
12863: PPUSH
12864: CALL_OW 52
// end ; i = i + 1 ;
12868: LD_ADDR_VAR 0 13
12872: PUSH
12873: LD_VAR 0 13
12877: PUSH
12878: LD_INT 1
12880: PLUS
12881: ST_TO_ADDR
// end ; if nation = 3 then
12882: LD_VAR 0 5
12886: PUSH
12887: LD_INT 3
12889: EQUAL
12890: IFFALSE 13282
// begin uc_side = side ;
12892: LD_ADDR_OWVAR 20
12896: PUSH
12897: LD_VAR 0 2
12901: ST_TO_ADDR
// uc_nation = nation ;
12902: LD_ADDR_OWVAR 21
12906: PUSH
12907: LD_VAR 0 5
12911: ST_TO_ADDR
// vc_engine = vehengine ;
12912: LD_ADDR_OWVAR 39
12916: PUSH
12917: LD_VAR 0 6
12921: ST_TO_ADDR
// vc_control = vehcontrol ;
12922: LD_ADDR_OWVAR 38
12926: PUSH
12927: LD_VAR 0 7
12931: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
12932: LD_ADDR_OWVAR 40
12936: PUSH
12937: LD_VAR 0 8
12941: PUSH
12942: LD_INT 1
12944: PPUSH
12945: LD_VAR 0 8
12949: PPUSH
12950: CALL_OW 12
12954: ARRAY
12955: ST_TO_ADDR
// for j = 1 to RuWeapons do
12956: LD_ADDR_VAR 0 14
12960: PUSH
12961: DOUBLE
12962: LD_INT 1
12964: DEC
12965: ST_TO_ADDR
12966: LD_VAR 0 8
12970: PUSH
12971: FOR_TO
12972: IFFALSE 13174
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
12974: LD_VAR 0 8
12978: PUSH
12979: LD_VAR 0 14
12983: ARRAY
12984: PUSH
12985: LD_INT 42
12987: EQUAL
12988: PUSH
12989: LD_VAR 0 8
12993: PUSH
12994: LD_VAR 0 14
12998: ARRAY
12999: PUSH
13000: LD_INT 43
13002: EQUAL
13003: OR
13004: PUSH
13005: LD_VAR 0 8
13009: PUSH
13010: LD_VAR 0 14
13014: ARRAY
13015: PUSH
13016: LD_INT 44
13018: EQUAL
13019: OR
13020: PUSH
13021: LD_VAR 0 8
13025: PUSH
13026: LD_VAR 0 14
13030: ARRAY
13031: PUSH
13032: LD_INT 45
13034: EQUAL
13035: OR
13036: PUSH
13037: LD_VAR 0 8
13041: PUSH
13042: LD_VAR 0 14
13046: ARRAY
13047: PUSH
13048: LD_INT 49
13050: EQUAL
13051: OR
13052: IFFALSE 13101
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13054: LD_ADDR_VAR 0 17
13058: PUSH
13059: LD_INT 21
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 23
13067: PUSH
13068: LD_INT 24
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13077: LD_ADDR_OWVAR 37
13081: PUSH
13082: LD_VAR 0 17
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_VAR 0 17
13094: PPUSH
13095: CALL_OW 12
13099: ARRAY
13100: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13101: LD_VAR 0 8
13105: PUSH
13106: LD_VAR 0 14
13110: ARRAY
13111: PUSH
13112: LD_INT 46
13114: EQUAL
13115: PUSH
13116: LD_VAR 0 8
13120: PUSH
13121: LD_VAR 0 14
13125: ARRAY
13126: PUSH
13127: LD_INT 47
13129: EQUAL
13130: OR
13131: IFFALSE 13172
// begin ruChassisTab = [ 23 , 24 ] ;
13133: LD_ADDR_VAR 0 17
13137: PUSH
13138: LD_INT 23
13140: PUSH
13141: LD_INT 24
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13148: LD_ADDR_OWVAR 37
13152: PUSH
13153: LD_VAR 0 17
13157: PUSH
13158: LD_INT 1
13160: PPUSH
13161: LD_VAR 0 17
13165: PPUSH
13166: CALL_OW 12
13170: ARRAY
13171: ST_TO_ADDR
// end ; end ;
13172: GO 12971
13174: POP
13175: POP
// veh = CreateVehicle ;
13176: LD_ADDR_VAR 0 16
13180: PUSH
13181: CALL_OW 45
13185: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13186: LD_VAR 0 16
13190: PPUSH
13191: LD_VAR 0 1
13195: PPUSH
13196: LD_INT 0
13198: PPUSH
13199: CALL_OW 49
// if vehcontrol = 1 then
13203: LD_VAR 0 7
13207: PUSH
13208: LD_INT 1
13210: EQUAL
13211: IFFALSE 13268
// begin hc_gallery =  ;
13213: LD_ADDR_OWVAR 33
13217: PUSH
13218: LD_STRING 
13220: ST_TO_ADDR
// hc_name =  ;
13221: LD_ADDR_OWVAR 26
13225: PUSH
13226: LD_STRING 
13228: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13229: LD_INT 0
13231: PPUSH
13232: LD_INT 3
13234: PPUSH
13235: LD_VAR 0 4
13239: PPUSH
13240: CALL_OW 380
// un = CreateHuman ;
13244: LD_ADDR_VAR 0 15
13248: PUSH
13249: CALL_OW 44
13253: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13254: LD_VAR 0 15
13258: PPUSH
13259: LD_VAR 0 16
13263: PPUSH
13264: CALL_OW 52
// end ; i = i + 1 ;
13268: LD_ADDR_VAR 0 13
13272: PUSH
13273: LD_VAR 0 13
13277: PUSH
13278: LD_INT 1
13280: PLUS
13281: ST_TO_ADDR
// end ; until i = vehCount ;
13282: LD_VAR 0 13
13286: PUSH
13287: LD_VAR 0 3
13291: EQUAL
13292: IFFALSE 11944
// repeat wait ( 0 0$1 ) ;
13294: LD_INT 35
13296: PPUSH
13297: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13301: LD_ADDR_VAR 0 20
13305: PUSH
13306: LD_INT 22
13308: PUSH
13309: LD_VAR 0 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 21
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 24
13330: PUSH
13331: LD_INT 661
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: ST_TO_ADDR
// if vehicleOK_list > 0 then
13348: LD_VAR 0 20
13352: PUSH
13353: LD_INT 0
13355: GREATER
13356: IFFALSE 13547
// begin for i in vehicleOK_list do
13358: LD_ADDR_VAR 0 13
13362: PUSH
13363: LD_VAR 0 20
13367: PUSH
13368: FOR_IN
13369: IFFALSE 13545
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13371: LD_ADDR_VAR 0 21
13375: PUSH
13376: LD_INT 22
13378: PUSH
13379: LD_VAR 0 11
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PPUSH
13388: CALL_OW 69
13392: PPUSH
13393: LD_VAR 0 13
13397: PPUSH
13398: CALL_OW 74
13402: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13403: LD_ADDR_VAR 0 22
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_VAR 0 11
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 59
13425: PUSH
13426: EMPTY
13427: LIST
13428: PUSH
13429: LD_INT 21
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 21
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: PPUSH
13467: LD_VAR 0 13
13471: PPUSH
13472: CALL_OW 74
13476: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13477: LD_VAR 0 13
13481: PPUSH
13482: LD_VAR 0 21
13486: PPUSH
13487: CALL_OW 296
13491: PUSH
13492: LD_INT 8
13494: PLUS
13495: PUSH
13496: LD_VAR 0 13
13500: PPUSH
13501: LD_VAR 0 22
13505: PPUSH
13506: CALL_OW 296
13510: LESS
13511: IFFALSE 13529
// begin ComAttackUnit ( i , target1 ) ;
13513: LD_VAR 0 13
13517: PPUSH
13518: LD_VAR 0 21
13522: PPUSH
13523: CALL_OW 115
// end else
13527: GO 13543
// begin ComAttackUnit ( i , target2 ) ;
13529: LD_VAR 0 13
13533: PPUSH
13534: LD_VAR 0 22
13538: PPUSH
13539: CALL_OW 115
// end ; end ;
13543: GO 13368
13545: POP
13546: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
13547: LD_INT 22
13549: PUSH
13550: LD_VAR 0 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 21
13561: PUSH
13562: LD_INT 2
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PPUSH
13573: CALL_OW 69
13577: PUSH
13578: LD_INT 0
13580: EQUAL
13581: IFFALSE 13294
// end ;
13583: LD_VAR 0 12
13587: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
13588: LD_INT 0
13590: PPUSH
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
13597: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13598: LD_ADDR_VAR 0 7
13602: PUSH
13603: LD_INT 22
13605: PUSH
13606: LD_VAR 0 1
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: LD_INT 3
13620: PUSH
13621: LD_INT 24
13623: PUSH
13624: LD_INT 550
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 24
13637: PUSH
13638: LD_INT 250
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PPUSH
13654: CALL_OW 69
13658: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13659: LD_ADDR_VAR 0 8
13663: PUSH
13664: LD_INT 22
13666: PUSH
13667: LD_VAR 0 1
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: LD_INT 25
13681: PUSH
13682: LD_INT 1
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 25
13691: PUSH
13692: LD_INT 5
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 25
13701: PUSH
13702: LD_INT 8
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 25
13711: PUSH
13712: LD_INT 9
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 24
13728: PUSH
13729: LD_INT 1000
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13746: LD_ADDR_VAR 0 9
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_VAR 0 1
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 4
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: ST_TO_ADDR
// if medicCount > 0 then
13782: LD_VAR 0 9
13786: PUSH
13787: LD_INT 0
13789: GREATER
13790: IFFALSE 13864
// begin if damageUnit_list > 0 then
13792: LD_VAR 0 7
13796: PUSH
13797: LD_INT 0
13799: GREATER
13800: IFFALSE 13864
// begin for i in damageUnit_list do
13802: LD_ADDR_VAR 0 5
13806: PUSH
13807: LD_VAR 0 7
13811: PUSH
13812: FOR_IN
13813: IFFALSE 13862
// begin ComMoveToArea ( i , healArea ) ;
13815: LD_VAR 0 5
13819: PPUSH
13820: LD_VAR 0 2
13824: PPUSH
13825: CALL_OW 113
// for j in medicCount do
13829: LD_ADDR_VAR 0 6
13833: PUSH
13834: LD_VAR 0 9
13838: PUSH
13839: FOR_IN
13840: IFFALSE 13858
// AddComHeal ( j , i ) ;
13842: LD_VAR 0 6
13846: PPUSH
13847: LD_VAR 0 5
13851: PPUSH
13852: CALL_OW 188
13856: GO 13839
13858: POP
13859: POP
// end ;
13860: GO 13812
13862: POP
13863: POP
// end ; end ; if soldiersOK_list > 0 then
13864: LD_VAR 0 8
13868: PUSH
13869: LD_INT 0
13871: GREATER
13872: IFFALSE 14063
// begin for i in soldiersOK_list do
13874: LD_ADDR_VAR 0 5
13878: PUSH
13879: LD_VAR 0 8
13883: PUSH
13884: FOR_IN
13885: IFFALSE 14061
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13887: LD_ADDR_VAR 0 10
13891: PUSH
13892: LD_INT 22
13894: PUSH
13895: LD_VAR 0 3
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PPUSH
13904: CALL_OW 69
13908: PPUSH
13909: LD_VAR 0 5
13913: PPUSH
13914: CALL_OW 74
13918: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13919: LD_ADDR_VAR 0 11
13923: PUSH
13924: LD_INT 22
13926: PUSH
13927: LD_VAR 0 3
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: LD_INT 59
13941: PUSH
13942: EMPTY
13943: LIST
13944: PUSH
13945: LD_INT 21
13947: PUSH
13948: LD_INT 1
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 21
13957: PUSH
13958: LD_INT 2
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: EMPTY
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PPUSH
13983: LD_VAR 0 5
13987: PPUSH
13988: CALL_OW 74
13992: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13993: LD_VAR 0 5
13997: PPUSH
13998: LD_VAR 0 10
14002: PPUSH
14003: CALL_OW 296
14007: PUSH
14008: LD_INT 8
14010: PLUS
14011: PUSH
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_VAR 0 11
14021: PPUSH
14022: CALL_OW 296
14026: LESS
14027: IFFALSE 14045
// begin ComAttackUnit ( i , target1 ) ;
14029: LD_VAR 0 5
14033: PPUSH
14034: LD_VAR 0 10
14038: PPUSH
14039: CALL_OW 115
// end else
14043: GO 14059
// begin ComAttackUnit ( i , target2 ) ;
14045: LD_VAR 0 5
14049: PPUSH
14050: LD_VAR 0 11
14054: PPUSH
14055: CALL_OW 115
// end ; end ;
14059: GO 13884
14061: POP
14062: POP
// end ; end ; end_of_file
14063: LD_VAR 0 4
14067: RET
// every 1 do var i ;
14068: GO 14070
14070: DISABLE
14071: LD_INT 0
14073: PPUSH
// begin InGameOn ;
14074: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14078: LD_INT 53
14080: PPUSH
14081: LD_INT 40
14083: PPUSH
14084: CALL_OW 84
// wait ( 0 0$5 ) ;
14088: LD_INT 175
14090: PPUSH
14091: CALL_OW 67
// if gammaCommander = 1 then
14095: LD_EXP 11
14099: PUSH
14100: LD_INT 1
14102: EQUAL
14103: IFFALSE 14114
// CenterNowOnUnits ( Donaldson ) ;
14105: LD_EXP 3
14109: PPUSH
14110: CALL_OW 87
// if gammaCommander = 2 then
14114: LD_EXP 11
14118: PUSH
14119: LD_INT 2
14121: EQUAL
14122: IFFALSE 14133
// CenterNowOnUnits ( Brown ) ;
14124: LD_EXP 2
14128: PPUSH
14129: CALL_OW 87
// if gammaCommander = 3 then
14133: LD_EXP 11
14137: PUSH
14138: LD_INT 3
14140: EQUAL
14141: IFFALSE 14152
// CenterNowOnUnits ( Houten ) ;
14143: LD_EXP 12
14147: PPUSH
14148: CALL_OW 87
// if gammaCommander = 1 then
14152: LD_EXP 11
14156: PUSH
14157: LD_INT 1
14159: EQUAL
14160: IFFALSE 14174
// Say ( Donaldson , D1-Don-1 ) ;
14162: LD_EXP 3
14166: PPUSH
14167: LD_STRING D1-Don-1
14169: PPUSH
14170: CALL_OW 88
// if gammaCommander = 2 then
14174: LD_EXP 11
14178: PUSH
14179: LD_INT 2
14181: EQUAL
14182: IFFALSE 14196
// Say ( Brown , D1-Brown-1 ) ;
14184: LD_EXP 2
14188: PPUSH
14189: LD_STRING D1-Brown-1
14191: PPUSH
14192: CALL_OW 88
// if gammaCommander = 3 then
14196: LD_EXP 11
14200: PUSH
14201: LD_INT 3
14203: EQUAL
14204: IFFALSE 14218
// Say ( Houten , D1-VanH-1 ) ;
14206: LD_EXP 12
14210: PPUSH
14211: LD_STRING D1-VanH-1
14213: PPUSH
14214: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
14218: LD_EXP 21
14222: PPUSH
14223: LD_STRING D1-Har-1
14225: PPUSH
14226: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
14230: LD_INT 53
14232: PPUSH
14233: LD_INT 40
14235: PPUSH
14236: CALL_OW 84
// if gammaCommander = 1 then
14240: LD_EXP 11
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: IFFALSE 14262
// Say ( Donaldson , D1-Don-2 ) ;
14250: LD_EXP 3
14254: PPUSH
14255: LD_STRING D1-Don-2
14257: PPUSH
14258: CALL_OW 88
// if gammaCommander = 2 then
14262: LD_EXP 11
14266: PUSH
14267: LD_INT 2
14269: EQUAL
14270: IFFALSE 14284
// Say ( Brown , D1-Brown-2 ) ;
14272: LD_EXP 2
14276: PPUSH
14277: LD_STRING D1-Brown-2
14279: PPUSH
14280: CALL_OW 88
// if gammaCommander = 3 then
14284: LD_EXP 11
14288: PUSH
14289: LD_INT 3
14291: EQUAL
14292: IFFALSE 14306
// Say ( Houten , D1-VanH-2 ) ;
14294: LD_EXP 12
14298: PPUSH
14299: LD_STRING D1-VanH-2
14301: PPUSH
14302: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
14306: LD_EXP 21
14310: PPUSH
14311: LD_STRING D1-Har-2
14313: PPUSH
14314: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
14318: LD_INT 35
14320: PPUSH
14321: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14325: LD_ADDR_VAR 0 1
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 6
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: PPUSH
14343: CALL_OW 69
14347: PUSH
14348: FOR_IN
14349: IFFALSE 14368
// ComAgressiveMove ( i , 54 , 20 ) ;
14351: LD_VAR 0 1
14355: PPUSH
14356: LD_INT 54
14358: PPUSH
14359: LD_INT 20
14361: PPUSH
14362: CALL_OW 114
14366: GO 14348
14368: POP
14369: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 25
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 3
14397: PUSH
14398: LD_INT 54
14400: PUSH
14401: EMPTY
14402: LIST
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: PPUSH
14413: CALL_OW 69
14417: PUSH
14418: FOR_IN
14419: IFFALSE 14453
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
14421: LD_VAR 0 1
14425: PPUSH
14426: LD_INT 70
14428: PPUSH
14429: LD_INT 41
14431: PPUSH
14432: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
14436: LD_VAR 0 1
14440: PPUSH
14441: LD_INT 46
14443: PPUSH
14444: LD_INT 39
14446: PPUSH
14447: CALL_OW 174
// end ;
14451: GO 14418
14453: POP
14454: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 ;
14455: LD_INT 22
14457: PUSH
14458: LD_INT 6
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 1
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 24
14477: PUSH
14478: LD_INT 250
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: PUSH
14495: LD_INT 0
14497: EQUAL
14498: IFFALSE 14318
// InGameOff ;
14500: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
14504: LD_STRING M1
14506: PPUSH
14507: CALL_OW 337
// SaveForQuickRestart ;
14511: CALL_OW 22
// end ;
14515: PPOPN 1
14517: END
// every 1 1$0 do
14518: GO 14520
14520: DISABLE
// begin PrepareSupportFromDelta ;
14521: CALL 1375 0 0
// firstAttack = 1 ;
14525: LD_ADDR_EXP 32
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14533: LD_EXP 8
14537: PPUSH
14538: CALL_OW 302
14542: IFFALSE 14558
// begin Say ( Gladstone , D2-Glad-1 ) ;
14544: LD_EXP 8
14548: PPUSH
14549: LD_STRING D2-Glad-1
14551: PPUSH
14552: CALL_OW 88
// end else
14556: GO 14651
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 22
14563: PUSH
14564: LD_INT 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 21
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 25
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 25
14596: PUSH
14597: LD_INT 2
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 25
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 4
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: PPUSH
14636: CALL_OW 70
14640: PPUSH
14641: LD_STRING D2-Sol1-1
14643: PPUSH
14644: LD_STRING D2-FSol1-1
14646: PPUSH
14647: CALL 4628 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
14651: LD_EXP 3
14655: PPUSH
14656: CALL_OW 302
14660: PUSH
14661: LD_EXP 11
14665: PUSH
14666: LD_INT 1
14668: EQUAL
14669: AND
14670: IFFALSE 14684
// Say ( Donaldson , D2-Don-1 ) ;
14672: LD_EXP 3
14676: PPUSH
14677: LD_STRING D2-Don-1
14679: PPUSH
14680: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14684: LD_EXP 2
14688: PPUSH
14689: CALL_OW 302
14693: PUSH
14694: LD_EXP 11
14698: PUSH
14699: LD_INT 2
14701: EQUAL
14702: AND
14703: IFFALSE 14717
// Say ( Brown , D2-Brown-1 ) ;
14705: LD_EXP 2
14709: PPUSH
14710: LD_STRING D2-Brown-1
14712: PPUSH
14713: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14717: LD_EXP 12
14721: PPUSH
14722: CALL_OW 302
14726: PUSH
14727: LD_EXP 11
14731: PUSH
14732: LD_INT 3
14734: EQUAL
14735: AND
14736: IFFALSE 14750
// Say ( Houten , D2-VanH-1 ) ;
14738: LD_EXP 12
14742: PPUSH
14743: LD_STRING D2-VanH-1
14745: PPUSH
14746: CALL_OW 88
// end ;
14750: END
// every 0 0$1 do
14751: GO 14753
14753: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) / 2 ) ;
14754: LD_STRING 07_time
14756: PPUSH
14757: LD_INT 0
14759: PPUSH
14760: CALL_OW 30
14764: PUSH
14765: LD_INT 2
14767: DIVREAL
14768: PPUSH
14769: CALL_OW 67
// PrepareMacmillanSquad ;
14773: CALL 1787 0 0
// CenterNowOnUnits ( JMM ) ;
14777: LD_EXP 1
14781: PPUSH
14782: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
14786: LD_EXP 1
14790: PPUSH
14791: LD_STRING D3-JMM-1
14793: PPUSH
14794: CALL_OW 88
// JMMArrive = 1 ;
14798: LD_ADDR_EXP 37
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
14806: LD_EXP 3
14810: PPUSH
14811: CALL_OW 302
14815: PUSH
14816: LD_EXP 11
14820: PUSH
14821: LD_INT 1
14823: EQUAL
14824: AND
14825: IFFALSE 14841
// begin Say ( Donaldson , D3-Don-1 ) ;
14827: LD_EXP 3
14831: PPUSH
14832: LD_STRING D3-Don-1
14834: PPUSH
14835: CALL_OW 88
// end else
14839: GO 14878
// begin if gammaCommander = 1 then
14841: LD_EXP 11
14845: PUSH
14846: LD_INT 1
14848: EQUAL
14849: IFFALSE 14878
// begin DialogRandom ( others_gamma , D3-Sol1-1 , D3-Sol1-1 ) ;
14851: LD_EXP 10
14855: PPUSH
14856: LD_STRING D3-Sol1-1
14858: PPUSH
14859: LD_STRING D3-Sol1-1
14861: PPUSH
14862: CALL 4628 0 3
// Say ( JMM , D3-JMM-2 ) ;
14866: LD_EXP 1
14870: PPUSH
14871: LD_STRING D3-JMM-2
14873: PPUSH
14874: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
14878: LD_EXP 2
14882: PPUSH
14883: CALL_OW 302
14887: PUSH
14888: LD_EXP 11
14892: PUSH
14893: LD_INT 2
14895: EQUAL
14896: AND
14897: IFFALSE 14913
// begin Say ( Brown , D3-Brown-1 ) ;
14899: LD_EXP 2
14903: PPUSH
14904: LD_STRING D3-Brown-1
14906: PPUSH
14907: CALL_OW 88
// end else
14911: GO 14950
// begin if gammaCommander = 2 then
14913: LD_EXP 11
14917: PUSH
14918: LD_INT 2
14920: EQUAL
14921: IFFALSE 14950
// begin DialogRandom ( others_gamma , D3-Sol1-1a , D3-Sol1-1a ) ;
14923: LD_EXP 10
14927: PPUSH
14928: LD_STRING D3-Sol1-1a
14930: PPUSH
14931: LD_STRING D3-Sol1-1a
14933: PPUSH
14934: CALL 4628 0 3
// Say ( JMM , D3-JMM-2 ) ;
14938: LD_EXP 1
14942: PPUSH
14943: LD_STRING D3-JMM-2
14945: PPUSH
14946: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
14950: LD_EXP 12
14954: PPUSH
14955: CALL_OW 302
14959: PUSH
14960: LD_EXP 11
14964: PUSH
14965: LD_INT 3
14967: EQUAL
14968: AND
14969: IFFALSE 14985
// begin Say ( Houten , D3-VanH-1 ) ;
14971: LD_EXP 12
14975: PPUSH
14976: LD_STRING D3-VanH-1
14978: PPUSH
14979: CALL_OW 88
// end else
14983: GO 15022
// begin if gammaCommander = 3 then
14985: LD_EXP 11
14989: PUSH
14990: LD_INT 3
14992: EQUAL
14993: IFFALSE 15022
// begin DialogRandom ( others_gamma , D3-Sol1-1b , D3-Sol1-1b ) ;
14995: LD_EXP 10
14999: PPUSH
15000: LD_STRING D3-Sol1-1b
15002: PPUSH
15003: LD_STRING D3-Sol1-1b
15005: PPUSH
15006: CALL 4628 0 3
// Say ( JMM , D3-JMM-2 ) ;
15010: LD_EXP 1
15014: PPUSH
15015: LD_STRING D3-JMM-2
15017: PPUSH
15018: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15022: LD_EXP 14
15026: PPUSH
15027: CALL_OW 302
15031: IFFALSE 15059
// begin Say ( Joan , D3a-Joan-1 ) ;
15033: LD_EXP 14
15037: PPUSH
15038: LD_STRING D3a-Joan-1
15040: PPUSH
15041: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15045: LD_EXP 1
15049: PPUSH
15050: LD_STRING D3a-JMM-1
15052: PPUSH
15053: CALL_OW 88
// end else
15057: GO 15467
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15059: LD_EXP 3
15063: PPUSH
15064: CALL_OW 302
15068: PUSH
15069: LD_EXP 11
15073: PUSH
15074: LD_INT 1
15076: EQUAL
15077: AND
15078: PUSH
15079: LD_STRING 06_JoanStatus_1
15081: PPUSH
15082: LD_INT 0
15084: PPUSH
15085: CALL_OW 30
15089: PUSH
15090: LD_INT 1
15092: EQUAL
15093: AND
15094: IFFALSE 15145
// begin Say ( Donaldson , D3b-Don-1 ) ;
15096: LD_EXP 3
15100: PPUSH
15101: LD_STRING D3b-Don-1
15103: PPUSH
15104: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15108: LD_EXP 1
15112: PPUSH
15113: LD_STRING D3b-JMM-2
15115: PPUSH
15116: CALL_OW 88
// if IsOK ( Lisa ) then
15120: LD_EXP 6
15124: PPUSH
15125: CALL_OW 302
15129: IFFALSE 15143
// Say ( Lisa , D3b-Lisa-2 ) ;
15131: LD_EXP 6
15135: PPUSH
15136: LD_STRING D3b-Lisa-2
15138: PPUSH
15139: CALL_OW 88
// end else
15143: GO 15195
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15145: LD_EXP 10
15149: PPUSH
15150: LD_STRING D3b-Sol1-1
15152: PPUSH
15153: LD_STRING D3b-Sol1-1
15155: PPUSH
15156: CALL 4628 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15160: LD_EXP 1
15164: PPUSH
15165: LD_STRING D3b-JMM-2
15167: PPUSH
15168: CALL_OW 88
// if IsOK ( Lisa ) then
15172: LD_EXP 6
15176: PPUSH
15177: CALL_OW 302
15181: IFFALSE 15195
// Say ( Lisa , D3b-Lisa-2 ) ;
15183: LD_EXP 6
15187: PPUSH
15188: LD_STRING D3b-Lisa-2
15190: PPUSH
15191: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15195: LD_EXP 2
15199: PPUSH
15200: CALL_OW 302
15204: PUSH
15205: LD_EXP 11
15209: PUSH
15210: LD_INT 2
15212: EQUAL
15213: AND
15214: PUSH
15215: LD_STRING 06_JoanStatus_1
15217: PPUSH
15218: LD_INT 0
15220: PPUSH
15221: CALL_OW 30
15225: PUSH
15226: LD_INT 1
15228: EQUAL
15229: AND
15230: IFFALSE 15281
// begin Say ( Brown , D3b-Brown-1 ) ;
15232: LD_EXP 2
15236: PPUSH
15237: LD_STRING D3b-Brown-1
15239: PPUSH
15240: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15244: LD_EXP 1
15248: PPUSH
15249: LD_STRING D3b-JMM-2
15251: PPUSH
15252: CALL_OW 88
// if IsOK ( Lisa ) then
15256: LD_EXP 6
15260: PPUSH
15261: CALL_OW 302
15265: IFFALSE 15279
// Say ( Lisa , D3b-Lisa-2 ) ;
15267: LD_EXP 6
15271: PPUSH
15272: LD_STRING D3b-Lisa-2
15274: PPUSH
15275: CALL_OW 88
// end else
15279: GO 15331
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15281: LD_EXP 10
15285: PPUSH
15286: LD_STRING D3b-Sol1-1
15288: PPUSH
15289: LD_STRING D3b-Sol1-1
15291: PPUSH
15292: CALL 4628 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15296: LD_EXP 1
15300: PPUSH
15301: LD_STRING D3b-JMM-2
15303: PPUSH
15304: CALL_OW 88
// if IsOK ( Lisa ) then
15308: LD_EXP 6
15312: PPUSH
15313: CALL_OW 302
15317: IFFALSE 15331
// Say ( Lisa , D3b-Lisa-2 ) ;
15319: LD_EXP 6
15323: PPUSH
15324: LD_STRING D3b-Lisa-2
15326: PPUSH
15327: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15331: LD_EXP 12
15335: PPUSH
15336: CALL_OW 302
15340: PUSH
15341: LD_EXP 11
15345: PUSH
15346: LD_INT 3
15348: EQUAL
15349: AND
15350: PUSH
15351: LD_STRING 06_JoanStatus_1
15353: PPUSH
15354: LD_INT 0
15356: PPUSH
15357: CALL_OW 30
15361: PUSH
15362: LD_INT 1
15364: EQUAL
15365: AND
15366: IFFALSE 15417
// begin Say ( Houten , D3b-VanH-1 ) ;
15368: LD_EXP 12
15372: PPUSH
15373: LD_STRING D3b-VanH-1
15375: PPUSH
15376: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15380: LD_EXP 1
15384: PPUSH
15385: LD_STRING D3b-JMM-2
15387: PPUSH
15388: CALL_OW 88
// if IsOK ( Lisa ) then
15392: LD_EXP 6
15396: PPUSH
15397: CALL_OW 302
15401: IFFALSE 15415
// Say ( Lisa , D3b-Lisa-2 ) ;
15403: LD_EXP 6
15407: PPUSH
15408: LD_STRING D3b-Lisa-2
15410: PPUSH
15411: CALL_OW 88
// end else
15415: GO 15467
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15417: LD_EXP 10
15421: PPUSH
15422: LD_STRING D3b-Sol1-1
15424: PPUSH
15425: LD_STRING D3b-Sol1-1
15427: PPUSH
15428: CALL 4628 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15432: LD_EXP 1
15436: PPUSH
15437: LD_STRING D3b-JMM-2
15439: PPUSH
15440: CALL_OW 88
// if IsOK ( Lisa ) then
15444: LD_EXP 6
15448: PPUSH
15449: CALL_OW 302
15453: IFFALSE 15467
// Say ( Lisa , D3b-Lisa-2 ) ;
15455: LD_EXP 6
15459: PPUSH
15460: LD_STRING D3b-Lisa-2
15462: PPUSH
15463: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
15467: LD_INT 22
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 2
15499: PUSH
15500: LD_INT 25
15502: PUSH
15503: LD_INT 1
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 25
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 25
15522: PUSH
15523: LD_INT 3
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 25
15532: PUSH
15533: LD_INT 4
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 69
15557: PUSH
15558: LD_EXP 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: DIFF
15566: PPUSH
15567: LD_STRING DCa-Sol1-1
15569: PPUSH
15570: LD_STRING DCa-Sol1-1
15572: PPUSH
15573: CALL 4628 0 3
// Say ( JMM , DCb-JMM-1 ) ;
15577: LD_EXP 1
15581: PPUSH
15582: LD_STRING DCb-JMM-1
15584: PPUSH
15585: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
15589: LD_INT 22
15591: PUSH
15592: LD_INT 1
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 21
15601: PUSH
15602: LD_INT 1
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 26
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 25
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 25
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 25
15644: PUSH
15645: LD_INT 3
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 25
15654: PUSH
15655: LD_INT 4
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 69
15679: PUSH
15680: LD_EXP 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: DIFF
15688: PPUSH
15689: LD_STRING DCb-Sol1-1
15691: PPUSH
15692: LD_STRING DCb-Sol1-1
15694: PPUSH
15695: CALL 4628 0 3
// Say ( JMM , DCb-JMM-2 ) ;
15699: LD_EXP 1
15703: PPUSH
15704: LD_STRING DCb-JMM-2
15706: PPUSH
15707: CALL_OW 88
// secondAttack = 1 ;
15711: LD_ADDR_EXP 33
15715: PUSH
15716: LD_INT 1
15718: ST_TO_ADDR
// end ;
15719: END
// every 0 0$01 trigger JMMArrive = 1 do
15720: LD_EXP 37
15724: PUSH
15725: LD_INT 1
15727: EQUAL
15728: IFFALSE 15808
15730: GO 15732
15732: DISABLE
// begin wait ( 13 13$0 ) ;
15733: LD_INT 27300
15735: PPUSH
15736: CALL_OW 67
// DialogueOn ;
15740: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
15744: LD_EXP 22
15748: PPUSH
15749: LD_STRING D4-Pow-1
15751: PPUSH
15752: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
15756: LD_EXP 1
15760: PPUSH
15761: LD_STRING D4-JMM-1
15763: PPUSH
15764: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
15768: LD_EXP 22
15772: PPUSH
15773: LD_STRING D4-Pow-2
15775: PPUSH
15776: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
15780: LD_EXP 1
15784: PPUSH
15785: LD_STRING D4-JMM-2
15787: PPUSH
15788: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
15792: LD_EXP 22
15796: PPUSH
15797: LD_STRING D4-Pow-3
15799: PPUSH
15800: CALL_OW 94
// DialogueOff ;
15804: CALL_OW 7
// end ;
15808: END
// every 0 0$01 trigger JMMArrive = 1 do
15809: LD_EXP 37
15813: PUSH
15814: LD_INT 1
15816: EQUAL
15817: IFFALSE 15849
15819: GO 15821
15821: DISABLE
// begin wait ( 20 20$0 ) ;
15822: LD_INT 42000
15824: PPUSH
15825: CALL_OW 67
// DialogueOn ;
15829: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
15833: LD_EXP 22
15837: PPUSH
15838: LD_STRING D4a-Pow-1
15840: PPUSH
15841: CALL_OW 94
// DialogueOff ;
15845: CALL_OW 7
// end ;
15849: END
// every 0 0$01 trigger JMMArrive = 1 do
15850: LD_EXP 37
15854: PUSH
15855: LD_INT 1
15857: EQUAL
15858: IFFALSE 15878
15860: GO 15862
15862: DISABLE
// begin wait ( 30 30$0 ) ;
15863: LD_INT 63000
15865: PPUSH
15866: CALL_OW 67
// PrepareSikorsky ;
15870: CALL 3212 0 0
// PrepareSikorskyArmy ;
15874: CALL 3352 0 0
// end ;
15878: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
15879: LD_EXP 16
15883: PPUSH
15884: LD_INT 5
15886: PPUSH
15887: CALL_OW 308
15891: IFFALSE 16091
15893: GO 15895
15895: DISABLE
// begin SikorskyArrive = 1 ;
15896: LD_ADDR_EXP 17
15900: PUSH
15901: LD_INT 1
15903: ST_TO_ADDR
// CenterNowOnUnits ( SikorskyTank ) ;
15904: LD_EXP 16
15908: PPUSH
15909: CALL_OW 87
// DialogueOn ;
15913: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
15917: LD_EXP 15
15921: PPUSH
15922: LD_STRING D5-Sik-1
15924: PPUSH
15925: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
15929: LD_EXP 1
15933: PPUSH
15934: LD_STRING D5-JMM-1a
15936: PPUSH
15937: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
15941: LD_EXP 15
15945: PPUSH
15946: LD_STRING D5-Sik-2
15948: PPUSH
15949: CALL_OW 88
// case query ( QSikorski ) of 1 :
15953: LD_STRING QSikorski
15955: PPUSH
15956: CALL_OW 97
15960: PUSH
15961: LD_INT 1
15963: DOUBLE
15964: EQUAL
15965: IFTRUE 15969
15967: GO 15992
15969: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
15970: LD_EXP 15
15974: PPUSH
15975: LD_STRING D5a-Sik-1
15977: PPUSH
15978: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
15982: LD_ADDR_EXP 18
15986: PUSH
15987: LD_INT 2100
15989: ST_TO_ADDR
// end ; 2 :
15990: GO 16079
15992: LD_INT 2
15994: DOUBLE
15995: EQUAL
15996: IFTRUE 16000
15998: GO 16023
16000: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16001: LD_EXP 15
16005: PPUSH
16006: LD_STRING D5b-Sik-1
16008: PPUSH
16009: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16013: LD_ADDR_EXP 18
16017: PUSH
16018: LD_INT 10500
16020: ST_TO_ADDR
// end ; 3 :
16021: GO 16079
16023: LD_INT 3
16025: DOUBLE
16026: EQUAL
16027: IFTRUE 16031
16029: GO 16078
16031: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16032: LD_EXP 15
16036: PPUSH
16037: LD_STRING D5c-Sik-1
16039: PPUSH
16040: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16044: LD_EXP 1
16048: PPUSH
16049: LD_STRING D5c-JMM-1
16051: PPUSH
16052: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16056: LD_EXP 15
16060: PPUSH
16061: LD_STRING D5c-Sik-2
16063: PPUSH
16064: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16068: LD_ADDR_EXP 18
16072: PUSH
16073: LD_INT 10500
16075: ST_TO_ADDR
// end ; end ;
16076: GO 16079
16078: POP
// DialogueOff ;
16079: CALL_OW 7
// timerStatus = 1 ;
16083: LD_ADDR_EXP 34
16087: PUSH
16088: LD_INT 1
16090: ST_TO_ADDR
// end ;
16091: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16092: LD_EXP 18
16096: PUSH
16097: LD_INT 35
16099: LESS
16100: IFFALSE 16148
16102: GO 16104
16104: DISABLE
// begin timerStatus = 0 ;
16105: LD_ADDR_EXP 34
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// DialogueOn ;
16113: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16117: LD_EXP 15
16121: PPUSH
16122: LD_STRING D6-Sik-1
16124: PPUSH
16125: CALL_OW 88
// DialogueOff ;
16129: CALL_OW 7
// SikorskyAI = 1 ;
16133: LD_ADDR_EXP 19
16137: PUSH
16138: LD_INT 1
16140: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16141: LD_STRING M2
16143: PPUSH
16144: CALL_OW 337
// end ;
16148: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16149: LD_EXP 16
16153: PPUSH
16154: LD_INT 18
16156: PPUSH
16157: CALL_OW 308
16161: IFFALSE 16245
16163: GO 16165
16165: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16166: LD_EXP 15
16170: PPUSH
16171: LD_STRING D7-Sik-1
16173: PPUSH
16174: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16178: LD_EXP 1
16182: PPUSH
16183: LD_INT 24
16185: PPUSH
16186: CALL_OW 308
16190: PUSH
16191: LD_EXP 1
16195: PPUSH
16196: CALL_OW 310
16200: OR
16201: IFFALSE 16225
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16203: LD_EXP 15
16207: PPUSH
16208: LD_STRING D7a-Sik-1
16210: PPUSH
16211: CALL_OW 88
// SikorskyStatus = 1 ;
16215: LD_ADDR_EXP 20
16219: PUSH
16220: LD_INT 1
16222: ST_TO_ADDR
// end else
16223: GO 16245
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16225: LD_EXP 15
16229: PPUSH
16230: LD_STRING D7b-Sik-1
16232: PPUSH
16233: CALL_OW 88
// SikorskyStatus = 2 ;
16237: LD_ADDR_EXP 20
16241: PUSH
16242: LD_INT 2
16244: ST_TO_ADDR
// end ; end ;
16245: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
16246: LD_EXP 35
16250: PUSH
16251: LD_INT 1
16253: EQUAL
16254: IFFALSE 16363
16256: GO 16258
16258: DISABLE
16259: LD_INT 0
16261: PPUSH
// begin enable ;
16262: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
16263: LD_ADDR_VAR 0 1
16267: PUSH
16268: LD_INT 22
16270: PUSH
16271: LD_INT 3
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PPUSH
16278: CALL_OW 69
16282: PUSH
16283: FOR_IN
16284: IFFALSE 16311
// if IsInArea ( i , RussianEscape ) then
16286: LD_VAR 0 1
16290: PPUSH
16291: LD_INT 22
16293: PPUSH
16294: CALL_OW 308
16298: IFFALSE 16309
// RemoveUnit ( i ) ;
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 64
16309: GO 16283
16311: POP
16312: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
16313: LD_ADDR_VAR 0 1
16317: PUSH
16318: LD_INT 22
16320: PUSH
16321: LD_INT 6
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PPUSH
16328: CALL_OW 69
16332: PUSH
16333: FOR_IN
16334: IFFALSE 16361
// if IsInArea ( i , RussianEscape ) then
16336: LD_VAR 0 1
16340: PPUSH
16341: LD_INT 22
16343: PPUSH
16344: CALL_OW 308
16348: IFFALSE 16359
// RemoveUnit ( i ) ;
16350: LD_VAR 0 1
16354: PPUSH
16355: CALL_OW 64
16359: GO 16333
16361: POP
16362: POP
// end ; end_of_file
16363: PPOPN 1
16365: END
// on BuildingComplete ( building ) do var tmp , un ;
16366: LD_INT 0
16368: PPUSH
16369: PPUSH
// begin if GetSide ( building ) = 3 then
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 255
16379: PUSH
16380: LD_INT 3
16382: EQUAL
16383: IFFALSE 16788
// begin if GetBType ( building ) = b_depot then
16385: LD_VAR 0 1
16389: PPUSH
16390: CALL_OW 266
16394: PUSH
16395: LD_INT 0
16397: EQUAL
16398: IFFALSE 16466
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 274
16409: PPUSH
16410: LD_INT 1
16412: PPUSH
16413: LD_INT 5000
16415: PPUSH
16416: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 274
16429: PPUSH
16430: LD_INT 2
16432: PPUSH
16433: LD_INT 5000
16435: PPUSH
16436: CALL_OW 277
// SetBName ( building , konev ) ;
16440: LD_VAR 0 1
16444: PPUSH
16445: LD_STRING konev
16447: PPUSH
16448: CALL_OW 500
// ruDepot = building ;
16452: LD_ADDR_EXP 27
16456: PUSH
16457: LD_VAR 0 1
16461: ST_TO_ADDR
// BuildRussianBase ;
16462: CALL 5233 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
16466: LD_VAR 0 1
16470: PPUSH
16471: CALL_OW 266
16475: PUSH
16476: LD_INT 0
16478: EQUAL
16479: PUSH
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 266
16489: PUSH
16490: LD_INT 2
16492: EQUAL
16493: OR
16494: PUSH
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 266
16504: PUSH
16505: LD_INT 4
16507: EQUAL
16508: OR
16509: IFFALSE 16520
// ComUpgrade ( building ) ;
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 146
// if GetBType ( building ) = b_lab then
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 266
16529: PUSH
16530: LD_INT 6
16532: EQUAL
16533: IFFALSE 16584
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 10
16542: PPUSH
16543: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
16547: LD_VAR 0 1
16551: PPUSH
16552: LD_INT 12
16554: PPUSH
16555: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
16559: LD_INT 3
16561: PPUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL 5788 0 3
// ruLab = building ;
16574: LD_ADDR_EXP 28
16578: PUSH
16579: LD_VAR 0 1
16583: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 266
16593: PUSH
16594: LD_INT 32
16596: EQUAL
16597: IFFALSE 16715
// begin uc_side = 3 ;
16599: LD_ADDR_OWVAR 20
16603: PUSH
16604: LD_INT 3
16606: ST_TO_ADDR
// uc_nation = 3 ;
16607: LD_ADDR_OWVAR 21
16611: PUSH
16612: LD_INT 3
16614: ST_TO_ADDR
// hc_gallery =  ;
16615: LD_ADDR_OWVAR 33
16619: PUSH
16620: LD_STRING 
16622: ST_TO_ADDR
// hc_name =  ;
16623: LD_ADDR_OWVAR 26
16627: PUSH
16628: LD_STRING 
16630: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16631: LD_INT 0
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: LD_EXP 24
16641: PPUSH
16642: LD_EXP 25
16646: PPUSH
16647: CALL_OW 12
16651: PPUSH
16652: CALL_OW 380
// un = CreateHuman ;
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: CALL_OW 44
16665: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
16666: LD_VAR 0 3
16670: PPUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16680: LD_VAR 0 1
16684: PPUSH
16685: LD_INT 43
16687: PUSH
16688: LD_INT 44
16690: PUSH
16691: LD_INT 46
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 1
16701: PPUSH
16702: LD_INT 3
16704: PPUSH
16705: CALL_OW 12
16709: ARRAY
16710: PPUSH
16711: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 266
16724: PUSH
16725: LD_INT 33
16727: EQUAL
16728: IFFALSE 16765
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_INT 43
16737: PUSH
16738: LD_INT 44
16740: PUSH
16741: LD_INT 46
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 1
16751: PPUSH
16752: LD_INT 3
16754: PPUSH
16755: CALL_OW 12
16759: ARRAY
16760: PPUSH
16761: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 266
16774: PUSH
16775: LD_INT 24
16777: EQUAL
16778: IFFALSE 16788
// russianAI = 1 ;
16780: LD_ADDR_EXP 26
16784: PUSH
16785: LD_INT 1
16787: ST_TO_ADDR
// end ; end ;
16788: PPOPN 3
16790: END
// on UpgradeComplete ( building ) do var i ;
16791: LD_INT 0
16793: PPUSH
// begin if GetSide ( building ) = 3 then
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 255
16803: PUSH
16804: LD_INT 3
16806: EQUAL
16807: IFFALSE 16988
// begin if GetBType ( building ) = b_factory then
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 266
16818: PUSH
16819: LD_INT 3
16821: EQUAL
16822: IFFALSE 16889
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 22
16831: PUSH
16832: LD_INT 3
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 25
16841: PUSH
16842: LD_INT 3
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PPUSH
16853: CALL_OW 69
16857: PUSH
16858: FOR_IN
16859: IFFALSE 16877
// ComEnterUnit ( i , building ) ;
16861: LD_VAR 0 2
16865: PPUSH
16866: LD_VAR 0 1
16870: PPUSH
16871: CALL_OW 120
16875: GO 16858
16877: POP
16878: POP
// ruFab = building ;
16879: LD_ADDR_EXP 29
16883: PUSH
16884: LD_VAR 0 1
16888: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 266
16898: PUSH
16899: LD_INT 8
16901: EQUAL
16902: IFFALSE 16959
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_INT 22
16911: PUSH
16912: LD_INT 3
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 25
16921: PUSH
16922: LD_INT 4
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PPUSH
16933: CALL_OW 69
16937: PUSH
16938: FOR_IN
16939: IFFALSE 16957
// ComEnterUnit ( i , building ) ;
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 120
16955: GO 16938
16957: POP
16958: POP
// if GetBType ( building ) = b_warehouse then
16959: LD_VAR 0 1
16963: PPUSH
16964: CALL_OW 266
16968: PUSH
16969: LD_INT 1
16971: EQUAL
16972: IFFALSE 16988
// begin ComEnterUnit ( Borodin , building ) ;
16974: LD_EXP 23
16978: PPUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 120
// end ; end ; end ;
16988: PPOPN 2
16990: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 247
17000: PUSH
17001: LD_INT 2
17003: EQUAL
17004: PUSH
17005: LD_VAR 0 1
17009: PPUSH
17010: CALL_OW 263
17014: PUSH
17015: LD_INT 3
17017: EQUAL
17018: AND
17019: PUSH
17020: LD_EXP 39
17024: PUSH
17025: LD_INT 0
17027: EQUAL
17028: AND
17029: IFFALSE 17147
// begin varEvent1 = 1 ;
17031: LD_ADDR_EXP 39
17035: PUSH
17036: LD_INT 1
17038: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
17039: LD_VAR 0 1
17043: PPUSH
17044: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
17048: LD_INT 22
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 21
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 2
17070: PUSH
17071: LD_INT 25
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 25
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 25
17093: PUSH
17094: LD_INT 3
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 25
17103: PUSH
17104: LD_INT 4
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 69
17127: PUSH
17128: LD_EXP 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: DIFF
17136: PPUSH
17137: LD_STRING DC-Sol1-1
17139: PPUSH
17140: LD_STRING DC-FSol1-1
17142: PPUSH
17143: CALL 4628 0 3
// end ; end ; end_of_file
17147: PPOPN 1
17149: END
// every 0 0$1 do
17150: GO 17152
17152: DISABLE
// begin enable ;
17153: ENABLE
// if escapeAvalaible = 0 then
17154: LD_EXP 35
17158: PUSH
17159: LD_INT 0
17161: EQUAL
17162: IFFALSE 17174
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17164: LD_INT 3
17166: PPUSH
17167: LD_INT 6
17169: PPUSH
17170: CALL 5873 0 2
// if escapeAvalaible = 0 then
17174: LD_EXP 35
17178: PUSH
17179: LD_INT 0
17181: EQUAL
17182: IFFALSE 17194
// DefenseBase ( 1 , RussianBaseTerritory ) ;
17184: LD_INT 1
17186: PPUSH
17187: LD_INT 24
17189: PPUSH
17190: CALL 6620 0 2
// if russianAI = 1 then
17194: LD_EXP 26
17198: PUSH
17199: LD_INT 1
17201: EQUAL
17202: IFFALSE 17265
// begin RepairBuilding ( 3 , ruDepot ) ;
17204: LD_INT 3
17206: PPUSH
17207: LD_EXP 27
17211: PPUSH
17212: CALL 6920 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
17216: LD_INT 3
17218: PPUSH
17219: LD_INT 7
17221: PPUSH
17222: LD_INT 6
17224: PPUSH
17225: LD_EXP 28
17229: PPUSH
17230: CALL 7385 0 4
// RebuildBuildings ( 3 , ruDestroyBuilds ) ;
17234: LD_INT 3
17236: PPUSH
17237: LD_EXP 30
17241: PPUSH
17242: CALL 7179 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
17246: LD_INT 6
17248: PPUSH
17249: LD_INT 8
17251: PPUSH
17252: LD_INT 93
17254: PPUSH
17255: LD_INT 93
17257: PPUSH
17258: LD_INT 1
17260: PPUSH
17261: CALL 7651 0 5
// end ; if SikorskyArrive = 1 then
17265: LD_EXP 17
17269: PUSH
17270: LD_INT 1
17272: EQUAL
17273: IFFALSE 17294
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
17275: LD_INT 3
17277: PPUSH
17278: LD_INT 10
17280: PPUSH
17281: LD_INT 53
17283: PPUSH
17284: LD_INT 59
17286: PPUSH
17287: LD_INT 3
17289: PPUSH
17290: CALL 7651 0 5
// end ;
17294: END
// every 0 0$1 trigger SikorskyAI = 1 do
17295: LD_EXP 19
17299: PUSH
17300: LD_INT 1
17302: EQUAL
17303: IFFALSE 17341
17305: GO 17307
17307: DISABLE
// begin enable ;
17308: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
17309: LD_INT 4
17311: PPUSH
17312: LD_INT 10
17314: PPUSH
17315: LD_INT 93
17317: PPUSH
17318: LD_INT 93
17320: PPUSH
17321: LD_INT 3
17323: PPUSH
17324: CALL 7651 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
17328: LD_INT 4
17330: PPUSH
17331: LD_INT 11
17333: PPUSH
17334: LD_INT 3
17336: PPUSH
17337: CALL 13588 0 3
// end ;
17341: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17342: LD_EXP 26
17346: PUSH
17347: LD_INT 1
17349: EQUAL
17350: PUSH
17351: LD_EXP 29
17355: PPUSH
17356: CALL_OW 302
17360: AND
17361: PUSH
17362: LD_EXP 29
17366: PPUSH
17367: CALL_OW 255
17371: PUSH
17372: LD_INT 3
17374: EQUAL
17375: AND
17376: PUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 2
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 33
17399: PUSH
17400: LD_INT 3
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: PPUSH
17412: CALL_OW 69
17416: PUSH
17417: LD_INT 0
17419: EQUAL
17420: AND
17421: IFFALSE 17604
17423: GO 17425
17425: DISABLE
// begin enable ;
17426: ENABLE
// if Difficulty = 1 then
17427: LD_OWVAR 67
17431: PUSH
17432: LD_INT 1
17434: EQUAL
17435: IFFALSE 17490
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
17437: LD_INT 3
17439: PPUSH
17440: LD_EXP 29
17444: PPUSH
17445: LD_INT 5
17447: PPUSH
17448: LD_INT 8
17450: PPUSH
17451: CALL_OW 12
17455: PPUSH
17456: LD_INT 1
17458: PPUSH
17459: LD_INT 43
17461: PUSH
17462: LD_INT 43
17464: PUSH
17465: LD_INT 44
17467: PUSH
17468: LD_INT 46
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: LD_INT 3
17482: PPUSH
17483: LD_INT 24
17485: PPUSH
17486: CALL 8486 0 8
// if Difficulty = 2 then
17490: LD_OWVAR 67
17494: PUSH
17495: LD_INT 2
17497: EQUAL
17498: IFFALSE 17549
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
17500: LD_INT 3
17502: PPUSH
17503: LD_EXP 29
17507: PPUSH
17508: LD_INT 6
17510: PPUSH
17511: LD_INT 8
17513: PPUSH
17514: CALL_OW 12
17518: PPUSH
17519: LD_INT 1
17521: PPUSH
17522: LD_INT 44
17524: PUSH
17525: LD_INT 44
17527: PUSH
17528: LD_INT 46
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: PPUSH
17536: LD_INT 1
17538: PPUSH
17539: LD_INT 3
17541: PPUSH
17542: LD_INT 24
17544: PPUSH
17545: CALL 8486 0 8
// if Difficulty = 3 then
17549: LD_OWVAR 67
17553: PUSH
17554: LD_INT 3
17556: EQUAL
17557: IFFALSE 17604
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
17559: LD_INT 3
17561: PPUSH
17562: LD_EXP 29
17566: PPUSH
17567: LD_INT 7
17569: PPUSH
17570: LD_INT 8
17572: PPUSH
17573: CALL_OW 12
17577: PPUSH
17578: LD_INT 1
17580: PPUSH
17581: LD_INT 44
17583: PUSH
17584: LD_INT 46
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: LD_INT 3
17596: PPUSH
17597: LD_INT 24
17599: PPUSH
17600: CALL 8486 0 8
// end ; end_of_file
17604: END
// every 0 0$1 trigger firstAttack = 1 do
17605: LD_EXP 32
17609: PUSH
17610: LD_INT 1
17612: EQUAL
17613: IFFALSE 17719
17615: GO 17617
17617: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17618: LD_INT 6
17620: PPUSH
17621: LD_INT 3
17623: PPUSH
17624: LD_INT 5
17626: PPUSH
17627: LD_INT 6
17629: PPUSH
17630: CALL_OW 12
17634: PUSH
17635: LD_INT 5
17637: PPUSH
17638: LD_INT 6
17640: PPUSH
17641: CALL_OW 12
17645: PUSH
17646: LD_INT 5
17648: PPUSH
17649: LD_INT 6
17651: PPUSH
17652: CALL_OW 12
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: LIST
17661: PUSH
17662: LD_OWVAR 67
17666: ARRAY
17667: PPUSH
17668: LD_INT 0
17670: PPUSH
17671: LD_INT 0
17673: PPUSH
17674: LD_INT 0
17676: PPUSH
17677: LD_INT 0
17679: PPUSH
17680: LD_EXP 24
17684: PPUSH
17685: LD_EXP 25
17689: PPUSH
17690: CALL_OW 12
17694: PPUSH
17695: LD_INT 16
17697: PPUSH
17698: LD_INT 7
17700: PPUSH
17701: LD_INT 1
17703: PPUSH
17704: LD_INT 1
17706: PPUSH
17707: LD_INT 3
17709: PPUSH
17710: CALL_OW 12
17714: PPUSH
17715: CALL 9050 0 12
17719: END
// every 0 0$1 trigger firstAttack = 1 do
17720: LD_EXP 32
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17836
17730: GO 17732
17732: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
17733: LD_INT 16
17735: PPUSH
17736: LD_INT 6
17738: PPUSH
17739: LD_INT 5
17741: PPUSH
17742: LD_INT 8
17744: PPUSH
17745: CALL_OW 12
17749: PUSH
17750: LD_INT 6
17752: PPUSH
17753: LD_INT 9
17755: PPUSH
17756: CALL_OW 12
17760: PUSH
17761: LD_INT 7
17763: PPUSH
17764: LD_INT 9
17766: PPUSH
17767: CALL_OW 12
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: PUSH
17777: LD_OWVAR 67
17781: ARRAY
17782: PPUSH
17783: LD_EXP 24
17787: PPUSH
17788: LD_EXP 25
17792: PPUSH
17793: CALL_OW 12
17797: PPUSH
17798: LD_INT 3
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: LD_INT 3
17806: PPUSH
17807: LD_INT 42
17809: PUSH
17810: LD_INT 43
17812: PUSH
17813: LD_INT 44
17815: PUSH
17816: LD_INT 46
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: PPUSH
17825: EMPTY
17826: PPUSH
17827: EMPTY
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL 11910 0 11
17836: END
// every 3 3$1 trigger firstAttack = 1 do
17837: LD_EXP 32
17841: PUSH
17842: LD_INT 1
17844: EQUAL
17845: IFFALSE 17951
17847: GO 17849
17849: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17850: LD_INT 6
17852: PPUSH
17853: LD_INT 3
17855: PPUSH
17856: LD_INT 5
17858: PPUSH
17859: LD_INT 6
17861: PPUSH
17862: CALL_OW 12
17866: PUSH
17867: LD_INT 5
17869: PPUSH
17870: LD_INT 6
17872: PPUSH
17873: CALL_OW 12
17877: PUSH
17878: LD_INT 5
17880: PPUSH
17881: LD_INT 6
17883: PPUSH
17884: CALL_OW 12
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: LIST
17893: PUSH
17894: LD_OWVAR 67
17898: ARRAY
17899: PPUSH
17900: LD_INT 0
17902: PPUSH
17903: LD_INT 0
17905: PPUSH
17906: LD_INT 0
17908: PPUSH
17909: LD_INT 0
17911: PPUSH
17912: LD_EXP 24
17916: PPUSH
17917: LD_EXP 25
17921: PPUSH
17922: CALL_OW 12
17926: PPUSH
17927: LD_INT 16
17929: PPUSH
17930: LD_INT 7
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: LD_INT 3
17941: PPUSH
17942: CALL_OW 12
17946: PPUSH
17947: CALL 9050 0 12
17951: END
// every 3 3$1 trigger firstAttack = 1 do
17952: LD_EXP 32
17956: PUSH
17957: LD_INT 1
17959: EQUAL
17960: IFFALSE 18068
17962: GO 17964
17964: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
17965: LD_INT 16
17967: PPUSH
17968: LD_INT 6
17970: PPUSH
17971: LD_INT 5
17973: PPUSH
17974: LD_INT 8
17976: PPUSH
17977: CALL_OW 12
17981: PUSH
17982: LD_INT 6
17984: PPUSH
17985: LD_INT 9
17987: PPUSH
17988: CALL_OW 12
17992: PUSH
17993: LD_INT 7
17995: PPUSH
17996: LD_INT 9
17998: PPUSH
17999: CALL_OW 12
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: LD_OWVAR 67
18013: ARRAY
18014: PPUSH
18015: LD_EXP 24
18019: PPUSH
18020: LD_EXP 25
18024: PPUSH
18025: CALL_OW 12
18029: PPUSH
18030: LD_INT 3
18032: PPUSH
18033: LD_INT 1
18035: PPUSH
18036: LD_INT 3
18038: PPUSH
18039: LD_INT 42
18041: PUSH
18042: LD_INT 43
18044: PUSH
18045: LD_INT 44
18047: PUSH
18048: LD_INT 46
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: PPUSH
18057: EMPTY
18058: PPUSH
18059: EMPTY
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: CALL 11910 0 11
18068: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
18069: LD_EXP 32
18073: PUSH
18074: LD_INT 1
18076: EQUAL
18077: PUSH
18078: LD_EXP 37
18082: PUSH
18083: LD_INT 0
18085: EQUAL
18086: AND
18087: IFFALSE 18193
18089: GO 18091
18091: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18092: LD_INT 6
18094: PPUSH
18095: LD_INT 3
18097: PPUSH
18098: LD_INT 5
18100: PPUSH
18101: LD_INT 6
18103: PPUSH
18104: CALL_OW 12
18108: PUSH
18109: LD_INT 5
18111: PPUSH
18112: LD_INT 6
18114: PPUSH
18115: CALL_OW 12
18119: PUSH
18120: LD_INT 5
18122: PPUSH
18123: LD_INT 6
18125: PPUSH
18126: CALL_OW 12
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: LIST
18135: PUSH
18136: LD_OWVAR 67
18140: ARRAY
18141: PPUSH
18142: LD_INT 0
18144: PPUSH
18145: LD_INT 0
18147: PPUSH
18148: LD_INT 0
18150: PPUSH
18151: LD_INT 0
18153: PPUSH
18154: LD_EXP 24
18158: PPUSH
18159: LD_EXP 25
18163: PPUSH
18164: CALL_OW 12
18168: PPUSH
18169: LD_INT 16
18171: PPUSH
18172: LD_INT 7
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 1
18180: PPUSH
18181: LD_INT 3
18183: PPUSH
18184: CALL_OW 12
18188: PPUSH
18189: CALL 9050 0 12
18193: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
18194: LD_EXP 32
18198: PUSH
18199: LD_INT 1
18201: EQUAL
18202: PUSH
18203: LD_EXP 37
18207: PUSH
18208: LD_INT 0
18210: EQUAL
18211: AND
18212: IFFALSE 18320
18214: GO 18216
18216: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18217: LD_INT 16
18219: PPUSH
18220: LD_INT 6
18222: PPUSH
18223: LD_INT 5
18225: PPUSH
18226: LD_INT 8
18228: PPUSH
18229: CALL_OW 12
18233: PUSH
18234: LD_INT 6
18236: PPUSH
18237: LD_INT 9
18239: PPUSH
18240: CALL_OW 12
18244: PUSH
18245: LD_INT 7
18247: PPUSH
18248: LD_INT 9
18250: PPUSH
18251: CALL_OW 12
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: PUSH
18261: LD_OWVAR 67
18265: ARRAY
18266: PPUSH
18267: LD_EXP 24
18271: PPUSH
18272: LD_EXP 25
18276: PPUSH
18277: CALL_OW 12
18281: PPUSH
18282: LD_INT 3
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: LD_INT 3
18290: PPUSH
18291: LD_INT 42
18293: PUSH
18294: LD_INT 43
18296: PUSH
18297: LD_INT 44
18299: PUSH
18300: LD_INT 46
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: PPUSH
18309: EMPTY
18310: PPUSH
18311: EMPTY
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL 11910 0 11
18320: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
18321: LD_EXP 32
18325: PUSH
18326: LD_INT 1
18328: EQUAL
18329: PUSH
18330: LD_EXP 37
18334: PUSH
18335: LD_INT 0
18337: EQUAL
18338: AND
18339: IFFALSE 18447
18341: GO 18343
18343: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18344: LD_INT 16
18346: PPUSH
18347: LD_INT 6
18349: PPUSH
18350: LD_INT 5
18352: PPUSH
18353: LD_INT 8
18355: PPUSH
18356: CALL_OW 12
18360: PUSH
18361: LD_INT 6
18363: PPUSH
18364: LD_INT 9
18366: PPUSH
18367: CALL_OW 12
18371: PUSH
18372: LD_INT 7
18374: PPUSH
18375: LD_INT 9
18377: PPUSH
18378: CALL_OW 12
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: PUSH
18388: LD_OWVAR 67
18392: ARRAY
18393: PPUSH
18394: LD_EXP 24
18398: PPUSH
18399: LD_EXP 25
18403: PPUSH
18404: CALL_OW 12
18408: PPUSH
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: LD_INT 3
18417: PPUSH
18418: LD_INT 42
18420: PUSH
18421: LD_INT 43
18423: PUSH
18424: LD_INT 44
18426: PUSH
18427: LD_INT 46
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: PPUSH
18436: EMPTY
18437: PPUSH
18438: EMPTY
18439: PPUSH
18440: LD_INT 1
18442: PPUSH
18443: CALL 11910 0 11
18447: END
// every 1 1$1 trigger secondAttack = 1 do
18448: LD_EXP 33
18452: PUSH
18453: LD_INT 1
18455: EQUAL
18456: IFFALSE 18562
18458: GO 18460
18460: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18461: LD_INT 6
18463: PPUSH
18464: LD_INT 3
18466: PPUSH
18467: LD_INT 4
18469: PPUSH
18470: LD_INT 7
18472: PPUSH
18473: CALL_OW 12
18477: PUSH
18478: LD_INT 6
18480: PPUSH
18481: LD_INT 7
18483: PPUSH
18484: CALL_OW 12
18488: PUSH
18489: LD_INT 6
18491: PPUSH
18492: LD_INT 10
18494: PPUSH
18495: CALL_OW 12
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: LIST
18504: PUSH
18505: LD_OWVAR 67
18509: ARRAY
18510: PPUSH
18511: LD_INT 0
18513: PPUSH
18514: LD_INT 0
18516: PPUSH
18517: LD_INT 0
18519: PPUSH
18520: LD_INT 0
18522: PPUSH
18523: LD_EXP 24
18527: PPUSH
18528: LD_EXP 25
18532: PPUSH
18533: CALL_OW 12
18537: PPUSH
18538: LD_INT 16
18540: PPUSH
18541: LD_INT 7
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: LD_INT 1
18549: PPUSH
18550: LD_INT 3
18552: PPUSH
18553: CALL_OW 12
18557: PPUSH
18558: CALL 9050 0 12
18562: END
// every 1 1$1 trigger secondAttack = 1 do
18563: LD_EXP 33
18567: PUSH
18568: LD_INT 1
18570: EQUAL
18571: IFFALSE 18679
18573: GO 18575
18575: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18576: LD_INT 16
18578: PPUSH
18579: LD_INT 6
18581: PPUSH
18582: LD_INT 5
18584: PPUSH
18585: LD_INT 8
18587: PPUSH
18588: CALL_OW 12
18592: PUSH
18593: LD_INT 6
18595: PPUSH
18596: LD_INT 9
18598: PPUSH
18599: CALL_OW 12
18603: PUSH
18604: LD_INT 7
18606: PPUSH
18607: LD_INT 9
18609: PPUSH
18610: CALL_OW 12
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: PUSH
18620: LD_OWVAR 67
18624: ARRAY
18625: PPUSH
18626: LD_EXP 24
18630: PPUSH
18631: LD_EXP 25
18635: PPUSH
18636: CALL_OW 12
18640: PPUSH
18641: LD_INT 3
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: LD_INT 3
18649: PPUSH
18650: LD_INT 42
18652: PUSH
18653: LD_INT 43
18655: PUSH
18656: LD_INT 44
18658: PUSH
18659: LD_INT 46
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PPUSH
18668: EMPTY
18669: PPUSH
18670: EMPTY
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL 11910 0 11
18679: END
// every 20 20$0 do
18680: GO 18682
18682: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18683: LD_INT 6
18685: PPUSH
18686: LD_INT 3
18688: PPUSH
18689: LD_INT 8
18691: PPUSH
18692: LD_INT 9
18694: PPUSH
18695: CALL_OW 12
18699: PUSH
18700: LD_INT 7
18702: PPUSH
18703: LD_INT 10
18705: PPUSH
18706: CALL_OW 12
18710: PUSH
18711: LD_INT 8
18713: PPUSH
18714: LD_INT 10
18716: PPUSH
18717: CALL_OW 12
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: LD_OWVAR 67
18731: ARRAY
18732: PPUSH
18733: LD_INT 0
18735: PPUSH
18736: LD_INT 0
18738: PPUSH
18739: LD_INT 0
18741: PPUSH
18742: LD_INT 0
18744: PPUSH
18745: LD_EXP 24
18749: PPUSH
18750: LD_EXP 25
18754: PPUSH
18755: CALL_OW 12
18759: PPUSH
18760: LD_INT 16
18762: PPUSH
18763: LD_INT 7
18765: PPUSH
18766: LD_INT 1
18768: PPUSH
18769: LD_INT 1
18771: PPUSH
18772: LD_INT 3
18774: PPUSH
18775: CALL_OW 12
18779: PPUSH
18780: CALL 9050 0 12
18784: END
// every 20 20$0 do
18785: GO 18787
18787: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18788: LD_INT 16
18790: PPUSH
18791: LD_INT 6
18793: PPUSH
18794: LD_INT 5
18796: PPUSH
18797: LD_INT 8
18799: PPUSH
18800: CALL_OW 12
18804: PUSH
18805: LD_INT 6
18807: PPUSH
18808: LD_INT 9
18810: PPUSH
18811: CALL_OW 12
18815: PUSH
18816: LD_INT 7
18818: PPUSH
18819: LD_INT 9
18821: PPUSH
18822: CALL_OW 12
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: PUSH
18832: LD_OWVAR 67
18836: ARRAY
18837: PPUSH
18838: LD_EXP 24
18842: PPUSH
18843: LD_EXP 25
18847: PPUSH
18848: CALL_OW 12
18852: PPUSH
18853: LD_INT 3
18855: PPUSH
18856: LD_INT 1
18858: PPUSH
18859: LD_INT 3
18861: PPUSH
18862: LD_INT 42
18864: PUSH
18865: LD_INT 43
18867: PUSH
18868: LD_INT 44
18870: PUSH
18871: LD_INT 46
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: PPUSH
18880: EMPTY
18881: PPUSH
18882: EMPTY
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL 11910 0 11
18891: END
// every 25 25$0 do
18892: GO 18894
18894: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18895: LD_INT 6
18897: PPUSH
18898: LD_INT 3
18900: PPUSH
18901: LD_INT 8
18903: PPUSH
18904: LD_INT 9
18906: PPUSH
18907: CALL_OW 12
18911: PUSH
18912: LD_INT 7
18914: PPUSH
18915: LD_INT 10
18917: PPUSH
18918: CALL_OW 12
18922: PUSH
18923: LD_INT 8
18925: PPUSH
18926: LD_INT 10
18928: PPUSH
18929: CALL_OW 12
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: PUSH
18939: LD_OWVAR 67
18943: ARRAY
18944: PPUSH
18945: LD_INT 0
18947: PPUSH
18948: LD_INT 0
18950: PPUSH
18951: LD_INT 0
18953: PPUSH
18954: LD_INT 0
18956: PPUSH
18957: LD_EXP 24
18961: PPUSH
18962: LD_EXP 25
18966: PPUSH
18967: CALL_OW 12
18971: PPUSH
18972: LD_INT 16
18974: PPUSH
18975: LD_INT 7
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: LD_INT 1
18983: PPUSH
18984: LD_INT 3
18986: PPUSH
18987: CALL_OW 12
18991: PPUSH
18992: CALL 9050 0 12
18996: END
// every 25 25$0 do
18997: GO 18999
18999: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
19000: LD_INT 16
19002: PPUSH
19003: LD_INT 6
19005: PPUSH
19006: LD_INT 5
19008: PPUSH
19009: LD_INT 8
19011: PPUSH
19012: CALL_OW 12
19016: PUSH
19017: LD_INT 6
19019: PPUSH
19020: LD_INT 9
19022: PPUSH
19023: CALL_OW 12
19027: PUSH
19028: LD_INT 7
19030: PPUSH
19031: LD_INT 9
19033: PPUSH
19034: CALL_OW 12
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: PUSH
19044: LD_OWVAR 67
19048: ARRAY
19049: PPUSH
19050: LD_EXP 24
19054: PPUSH
19055: LD_EXP 25
19059: PPUSH
19060: CALL_OW 12
19064: PPUSH
19065: LD_INT 3
19067: PPUSH
19068: LD_INT 1
19070: PPUSH
19071: LD_INT 3
19073: PPUSH
19074: LD_INT 42
19076: PUSH
19077: LD_INT 43
19079: PUSH
19080: LD_INT 44
19082: PUSH
19083: LD_INT 46
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: PPUSH
19092: EMPTY
19093: PPUSH
19094: EMPTY
19095: PPUSH
19096: LD_INT 1
19098: PPUSH
19099: CALL 11910 0 11
19103: END
// every 0 0$1 trigger timerStatus = 1 do
19104: LD_EXP 34
19108: PUSH
19109: LD_INT 1
19111: EQUAL
19112: IFFALSE 19149
19114: GO 19116
19116: DISABLE
// begin enable ;
19117: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
19118: LD_ADDR_OWVAR 47
19122: PUSH
19123: LD_STRING #Am08-1
19125: PUSH
19126: LD_EXP 18
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
19135: LD_ADDR_EXP 18
19139: PUSH
19140: LD_EXP 18
19144: PUSH
19145: LD_INT 35
19147: MINUS
19148: ST_TO_ADDR
// end ; end_of_file
19149: END
// every 1 1$0 do
19150: GO 19152
19152: DISABLE
// begin if supply <= 13 and supply > 7 then
19153: LD_EXP 38
19157: PUSH
19158: LD_INT 13
19160: LESSEQUAL
19161: PUSH
19162: LD_EXP 38
19166: PUSH
19167: LD_INT 7
19169: GREATER
19170: AND
19171: IFFALSE 19194
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
19173: LD_INT 3
19175: PPUSH
19176: LD_INT 5
19178: PPUSH
19179: CALL_OW 12
19183: PPUSH
19184: LD_INT 5
19186: PPUSH
19187: LD_INT 1
19189: PPUSH
19190: CALL_OW 55
// if supply <= 7 and supply > 4 then
19194: LD_EXP 38
19198: PUSH
19199: LD_INT 7
19201: LESSEQUAL
19202: PUSH
19203: LD_EXP 38
19207: PUSH
19208: LD_INT 4
19210: GREATER
19211: AND
19212: IFFALSE 19235
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
19214: LD_INT 3
19216: PPUSH
19217: LD_INT 5
19219: PPUSH
19220: CALL_OW 12
19224: PPUSH
19225: LD_INT 20
19227: PPUSH
19228: LD_INT 1
19230: PPUSH
19231: CALL_OW 55
// if supply <= 4 and supply > 0 then
19235: LD_EXP 38
19239: PUSH
19240: LD_INT 4
19242: LESSEQUAL
19243: PUSH
19244: LD_EXP 38
19248: PUSH
19249: LD_INT 0
19251: GREATER
19252: AND
19253: IFFALSE 19276
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
19255: LD_INT 3
19257: PPUSH
19258: LD_INT 5
19260: PPUSH
19261: CALL_OW 12
19265: PPUSH
19266: LD_INT 21
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 55
// if supply > 0 then
19276: LD_EXP 38
19280: PUSH
19281: LD_INT 0
19283: GREATER
19284: IFFALSE 19301
// begin supply = supply - 1 ;
19286: LD_ADDR_EXP 38
19290: PUSH
19291: LD_EXP 38
19295: PUSH
19296: LD_INT 1
19298: MINUS
19299: ST_TO_ADDR
// enable ;
19300: ENABLE
// end ; end ; end_of_file
19301: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
19302: LD_EXP 37
19306: PUSH
19307: LD_INT 1
19309: EQUAL
19310: PUSH
19311: LD_EXP 1
19315: PPUSH
19316: CALL_OW 301
19320: AND
19321: IFFALSE 19333
19323: GO 19325
19325: DISABLE
// YouLost ( JMM ) ;
19326: LD_STRING JMM
19328: PPUSH
19329: CALL_OW 104
19333: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
19334: LD_EXP 17
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: PUSH
19343: LD_EXP 15
19347: PPUSH
19348: CALL_OW 301
19352: AND
19353: IFFALSE 19385
19355: GO 19357
19357: DISABLE
// begin DialogueOn ;
19358: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
19362: LD_EXP 22
19366: PPUSH
19367: LD_STRING D8a-Pow-1
19369: PPUSH
19370: CALL_OW 94
// DialogueOff ;
19374: CALL_OW 7
// YouLost ( Dismissed ) ;
19378: LD_STRING Dismissed
19380: PPUSH
19381: CALL_OW 104
// end ;
19385: END
// every 0 0$1 trigger IsDead ( amDepot ) do
19386: LD_EXP 36
19390: PPUSH
19391: CALL_OW 301
19395: IFFALSE 19407
19397: GO 19399
19399: DISABLE
// YouLost ( Destroyed ) ; end_of_file
19400: LD_STRING Destroyed
19402: PPUSH
19403: CALL_OW 104
19407: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
19408: LD_EXP 23
19412: PPUSH
19413: CALL_OW 301
19417: IFFALSE 19762
19419: GO 19421
19421: DISABLE
19422: LD_INT 0
19424: PPUSH
// begin russianAI = 0 ;
19425: LD_ADDR_EXP 26
19429: PUSH
19430: LD_INT 0
19432: ST_TO_ADDR
// escapeAvalaible = 1 ;
19433: LD_ADDR_EXP 35
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// InGameOn ;
19441: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19445: LD_INT 3
19447: PPUSH
19448: LD_INT 1
19450: PPUSH
19451: LD_INT 1
19453: PPUSH
19454: LD_INT 0
19456: PPUSH
19457: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19461: LD_INT 6
19463: PPUSH
19464: LD_INT 1
19466: PPUSH
19467: LD_INT 1
19469: PPUSH
19470: LD_INT 0
19472: PPUSH
19473: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19477: LD_INT 3
19479: PPUSH
19480: LD_INT 1
19482: PPUSH
19483: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19487: LD_INT 97
19489: PPUSH
19490: LD_INT 91
19492: PPUSH
19493: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19497: LD_INT 22
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 21
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: PPUSH
19526: CALL_OW 121
// wait ( 0 0$01 ) ;
19530: LD_INT 35
19532: PPUSH
19533: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19537: LD_INT 22
19539: PUSH
19540: LD_INT 3
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 21
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PPUSH
19561: CALL_OW 69
19565: PPUSH
19566: LD_INT 124
19568: PPUSH
19569: LD_INT 98
19571: PPUSH
19572: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19576: LD_INT 22
19578: PUSH
19579: LD_INT 6
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 21
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 69
19604: PPUSH
19605: CALL_OW 121
// wait ( 0 0$01 ) ;
19609: LD_INT 35
19611: PPUSH
19612: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19616: LD_INT 22
19618: PUSH
19619: LD_INT 6
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 21
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 69
19644: PPUSH
19645: LD_INT 124
19647: PPUSH
19648: LD_INT 98
19650: PPUSH
19651: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19655: LD_INT 22
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 21
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PPUSH
19679: CALL_OW 69
19683: PPUSH
19684: LD_INT 124
19686: PPUSH
19687: LD_INT 98
19689: PPUSH
19690: CALL_OW 114
// wait ( 0 0$4 ) ;
19694: LD_INT 140
19696: PPUSH
19697: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
19701: LD_INT 124
19703: PPUSH
19704: LD_INT 98
19706: PPUSH
19707: CALL_OW 84
// if SikorskyStatus = 1 then
19711: LD_EXP 20
19715: PUSH
19716: LD_INT 1
19718: EQUAL
19719: IFFALSE 19733
// begin Say ( Sikorski , D9-Sik-1 ) ;
19721: LD_EXP 15
19725: PPUSH
19726: LD_STRING D9-Sik-1
19728: PPUSH
19729: CALL_OW 88
// end ; if SikorskyStatus = 2 then
19733: LD_EXP 20
19737: PUSH
19738: LD_INT 2
19740: EQUAL
19741: IFFALSE 19762
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
19743: LD_EXP 22
19747: PPUSH
19748: LD_STRING D8b-Pow-1
19750: PPUSH
19751: CALL_OW 94
// YouLost ( Dismissed ) ;
19755: LD_STRING Dismissed
19757: PPUSH
19758: CALL_OW 104
// end ; end ;
19762: PPOPN 1
19764: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19765: LD_INT 23
19767: PUSH
19768: LD_INT 3
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 21
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 24
19787: PUSH
19788: LD_INT 250
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: PPUSH
19800: CALL_OW 69
19804: PUSH
19805: LD_INT 0
19807: EQUAL
19808: IFFALSE 19817
19810: GO 19812
19812: DISABLE
// FinishMission ;
19813: CALL 19818 0 0
19817: END
// export function FinishMission ; var tmp ; begin
19818: LD_INT 0
19820: PPUSH
19821: PPUSH
// AddMedal ( med1 , 1 ) ;
19822: LD_STRING med1
19824: PPUSH
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19832: LD_STRING med2
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
19842: LD_STRING perfect
19844: PPUSH
19845: LD_INT 1
19847: PPUSH
19848: CALL_OW 101
// GiveMedals ( Main ) ;
19852: LD_STRING Main
19854: PPUSH
19855: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19859: LD_INT 22
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 23
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 21
19881: PUSH
19882: LD_INT 1
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: LD_INT 25
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 25
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 25
19914: PUSH
19915: LD_INT 3
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 25
19924: PUSH
19925: LD_INT 4
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: PPUSH
19945: CALL_OW 69
19949: PPUSH
19950: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19954: LD_EXP 1
19958: PPUSH
19959: LD_EXP 40
19963: PUSH
19964: LD_STRING JMM
19966: STR
19967: PPUSH
19968: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19972: LD_EXP 2
19976: PPUSH
19977: LD_EXP 40
19981: PUSH
19982: LD_STRING Brown
19984: STR
19985: PPUSH
19986: CALL 5737 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19990: LD_EXP 3
19994: PPUSH
19995: LD_EXP 40
19999: PUSH
20000: LD_STRING Donaldson
20002: STR
20003: PPUSH
20004: CALL 5737 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20008: LD_EXP 4
20012: PPUSH
20013: LD_EXP 40
20017: PUSH
20018: LD_STRING Bobby
20020: STR
20021: PPUSH
20022: CALL 5737 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20026: LD_EXP 5
20030: PPUSH
20031: LD_EXP 40
20035: PUSH
20036: LD_STRING Cyrus
20038: STR
20039: PPUSH
20040: CALL 5737 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20044: LD_EXP 6
20048: PPUSH
20049: LD_EXP 40
20053: PUSH
20054: LD_STRING Lisa
20056: STR
20057: PPUSH
20058: CALL 5737 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20062: LD_EXP 7
20066: PPUSH
20067: LD_EXP 40
20071: PUSH
20072: LD_STRING Frank
20074: STR
20075: PPUSH
20076: CALL 5737 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20080: LD_EXP 8
20084: PPUSH
20085: LD_EXP 40
20089: PUSH
20090: LD_STRING Gladstone
20092: STR
20093: PPUSH
20094: CALL 5737 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20098: LD_EXP 9
20102: PPUSH
20103: LD_EXP 40
20107: PUSH
20108: LD_STRING Kikuchi
20110: STR
20111: PPUSH
20112: CALL 5737 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20116: LD_EXP 13
20120: PPUSH
20121: LD_EXP 40
20125: PUSH
20126: LD_STRING Denis
20128: STR
20129: PPUSH
20130: CALL 5737 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20134: LD_EXP 14
20138: PPUSH
20139: LD_EXP 40
20143: PUSH
20144: LD_STRING Joan
20146: STR
20147: PPUSH
20148: CALL 5737 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20152: LD_EXP 12
20156: PPUSH
20157: LD_EXP 40
20161: PUSH
20162: LD_STRING Houten
20164: STR
20165: PPUSH
20166: CALL 5737 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
20170: LD_INT 50
20172: PUSH
20173: EMPTY
20174: LIST
20175: PUSH
20176: LD_INT 22
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 21
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: LD_INT 25
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 25
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 25
20221: PUSH
20222: LD_INT 3
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 25
20231: PUSH
20232: LD_INT 4
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: PUSH
20257: LD_EXP 1
20261: PUSH
20262: LD_EXP 2
20266: PUSH
20267: LD_EXP 3
20271: PUSH
20272: LD_EXP 4
20276: PUSH
20277: LD_EXP 5
20281: PUSH
20282: LD_EXP 6
20286: PUSH
20287: LD_EXP 7
20291: PUSH
20292: LD_EXP 8
20296: PUSH
20297: LD_EXP 9
20301: PUSH
20302: LD_EXP 13
20306: PUSH
20307: LD_EXP 14
20311: PUSH
20312: LD_EXP 12
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: DIFF
20331: PPUSH
20332: LD_STRING 08_other_survivors
20334: PPUSH
20335: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
20339: LD_INT 23
20341: PPUSH
20342: CALL 20355 0 1
// YouWin ;
20346: CALL_OW 103
// end ;
20350: LD_VAR 0 1
20354: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20355: LD_INT 0
20357: PPUSH
20358: PPUSH
20359: PPUSH
20360: PPUSH
// gammaBase = [ ] ;
20361: LD_ADDR_VAR 0 4
20365: PUSH
20366: EMPTY
20367: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20368: LD_ADDR_VAR 0 5
20372: PUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: LD_INT 22
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 21
20390: PUSH
20391: LD_INT 3
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 50
20400: PUSH
20401: EMPTY
20402: LIST
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: PPUSH
20409: CALL_OW 70
20413: ST_TO_ADDR
// for i in buildings do
20414: LD_ADDR_VAR 0 3
20418: PUSH
20419: LD_VAR 0 5
20423: PUSH
20424: FOR_IN
20425: IFFALSE 20762
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20427: LD_VAR 0 3
20431: PPUSH
20432: CALL_OW 266
20436: PUSH
20437: LD_INT 6
20439: PUSH
20440: LD_INT 7
20442: PUSH
20443: LD_INT 8
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: IN
20451: IFFALSE 20565
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20453: LD_ADDR_VAR 0 4
20457: PUSH
20458: LD_VAR 0 4
20462: PUSH
20463: LD_VAR 0 3
20467: PPUSH
20468: CALL_OW 266
20472: PUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: CALL_OW 250
20482: PUSH
20483: LD_VAR 0 3
20487: PPUSH
20488: CALL_OW 251
20492: PUSH
20493: LD_VAR 0 3
20497: PPUSH
20498: CALL_OW 254
20502: PUSH
20503: LD_VAR 0 3
20507: PPUSH
20508: CALL_OW 267
20512: PUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: CALL_OW 248
20522: PUSH
20523: LD_VAR 0 3
20527: PPUSH
20528: LD_INT 1
20530: PPUSH
20531: CALL_OW 268
20535: PUSH
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 2
20543: PPUSH
20544: CALL_OW 268
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: PUSH
20559: EMPTY
20560: LIST
20561: ADD
20562: ST_TO_ADDR
20563: GO 20760
// if GetBType ( i ) in [ b_bunker ] then
20565: LD_VAR 0 3
20569: PPUSH
20570: CALL_OW 266
20574: PUSH
20575: LD_INT 32
20577: PUSH
20578: EMPTY
20579: LIST
20580: IN
20581: IFFALSE 20678
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20583: LD_ADDR_VAR 0 4
20587: PUSH
20588: LD_VAR 0 4
20592: PUSH
20593: LD_VAR 0 3
20597: PPUSH
20598: CALL_OW 266
20602: PUSH
20603: LD_VAR 0 3
20607: PPUSH
20608: CALL_OW 250
20612: PUSH
20613: LD_VAR 0 3
20617: PPUSH
20618: CALL_OW 251
20622: PUSH
20623: LD_VAR 0 3
20627: PPUSH
20628: CALL_OW 254
20632: PUSH
20633: LD_VAR 0 3
20637: PPUSH
20638: CALL_OW 267
20642: PUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: CALL_OW 248
20652: PUSH
20653: LD_VAR 0 3
20657: PPUSH
20658: CALL_OW 269
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: ADD
20675: ST_TO_ADDR
20676: GO 20760
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20678: LD_ADDR_VAR 0 4
20682: PUSH
20683: LD_VAR 0 4
20687: PUSH
20688: LD_VAR 0 3
20692: PPUSH
20693: CALL_OW 266
20697: PUSH
20698: LD_VAR 0 3
20702: PPUSH
20703: CALL_OW 250
20707: PUSH
20708: LD_VAR 0 3
20712: PPUSH
20713: CALL_OW 251
20717: PUSH
20718: LD_VAR 0 3
20722: PPUSH
20723: CALL_OW 254
20727: PUSH
20728: LD_VAR 0 3
20732: PPUSH
20733: CALL_OW 267
20737: PUSH
20738: LD_VAR 0 3
20742: PPUSH
20743: CALL_OW 248
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: PUSH
20756: EMPTY
20757: LIST
20758: ADD
20759: ST_TO_ADDR
// end ;
20760: GO 20424
20762: POP
20763: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
20764: LD_VAR 0 4
20768: PPUSH
20769: LD_STRING 08_GammaBase
20771: PPUSH
20772: CALL_OW 39
// end ;
20776: LD_VAR 0 2
20780: RET
