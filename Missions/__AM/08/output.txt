// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7155 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2109 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5960 0 0
// PrepareRussians ;
 229: CALL 6278 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8420 0 6
// PrepareCutsceneAttack ;
 312: CALL 6012 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 593
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6696 0 2
 577: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 5
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ; if gammaCommander = 2 then
 593: LD_EXP 12
 597: PUSH
 598: LD_INT 2
 600: EQUAL
 601: IFFALSE 634
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 603: LD_ADDR_EXP 2
 607: PUSH
 608: LD_STRING 04_Brown
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 6696 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 619: LD_EXP 2
 623: PPUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// end ; if gammaCommander = 3 then
 634: LD_EXP 12
 638: PUSH
 639: LD_INT 3
 641: EQUAL
 642: IFFALSE 675
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 644: LD_ADDR_EXP 13
 648: PUSH
 649: LD_STRING VanHouten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6696 0 2
 659: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 660: LD_EXP 13
 664: PPUSH
 665: LD_INT 5
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 675: LD_ADDR_EXP 22
 679: PUSH
 680: LD_STRING Harisson
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL 6696 0 2
 690: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 691: LD_ADDR_EXP 23
 695: PUSH
 696: LD_STRING Powell
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 6696 0 2
 706: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 707: LD_STRING 04_Lisa
 709: PUSH
 710: EMPTY
 711: LIST
 712: PPUSH
 713: CALL_OW 28
 717: PUSH
 718: LD_STRING LisaInDelta
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL_OW 30
 728: NOT
 729: AND
 730: PUSH
 731: LD_STRING 07_Lisa
 733: PUSH
 734: EMPTY
 735: LIST
 736: PPUSH
 737: CALL_OW 28
 741: NOT
 742: AND
 743: IFFALSE 777
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 745: LD_ADDR_EXP 6
 749: PUSH
 750: LD_STRING 04_Lisa
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6696 0 2
 760: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 761: LD_ADDR_VAR 0 15
 765: PUSH
 766: LD_VAR 0 15
 770: PUSH
 771: LD_EXP 6
 775: ADD
 776: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 777: LD_STRING 04_Bobby
 779: PUSH
 780: EMPTY
 781: LIST
 782: PPUSH
 783: CALL_OW 28
 787: PUSH
 788: LD_STRING BobbyInDelta
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 30
 798: NOT
 799: AND
 800: PUSH
 801: LD_STRING 07_Bobby
 803: PUSH
 804: EMPTY
 805: LIST
 806: PPUSH
 807: CALL_OW 28
 811: NOT
 812: AND
 813: IFFALSE 847
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 815: LD_ADDR_EXP 4
 819: PUSH
 820: LD_STRING 04_Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6696 0 2
 830: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 831: LD_ADDR_VAR 0 15
 835: PUSH
 836: LD_VAR 0 15
 840: PUSH
 841: LD_EXP 4
 845: ADD
 846: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 847: LD_STRING 04_Cyrus
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: PUSH
 858: LD_STRING CyrusInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Cyrus
 873: PUSH
 874: EMPTY
 875: LIST
 876: PPUSH
 877: CALL_OW 28
 881: NOT
 882: AND
 883: IFFALSE 917
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 885: LD_ADDR_EXP 5
 889: PUSH
 890: LD_STRING 04_Cyrus
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 6696 0 2
 900: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
 901: LD_ADDR_VAR 0 15
 905: PUSH
 906: LD_VAR 0 15
 910: PUSH
 911: LD_EXP 5
 915: ADD
 916: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
 917: LD_STRING 04_Brown
 919: PUSH
 920: EMPTY
 921: LIST
 922: PPUSH
 923: CALL_OW 28
 927: PUSH
 928: LD_STRING BrownInDelta
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 30
 938: NOT
 939: AND
 940: PUSH
 941: LD_STRING 07_Brown
 943: PUSH
 944: EMPTY
 945: LIST
 946: PPUSH
 947: CALL_OW 28
 951: NOT
 952: AND
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_INT 2
 961: NONEQUAL
 962: AND
 963: IFFALSE 997
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
 965: LD_ADDR_EXP 2
 969: PUSH
 970: LD_STRING 04_Brown
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 6696 0 2
 980: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
 981: LD_ADDR_VAR 0 15
 985: PUSH
 986: LD_VAR 0 15
 990: PUSH
 991: LD_EXP 2
 995: ADD
 996: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
 997: LD_STRING 04_Donaldson
 999: PUSH
1000: EMPTY
1001: LIST
1002: PPUSH
1003: CALL_OW 28
1007: PUSH
1008: LD_STRING DonaldsonInDelta
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 30
1018: NOT
1019: AND
1020: PUSH
1021: LD_STRING 07_Donaldson
1023: PUSH
1024: EMPTY
1025: LIST
1026: PPUSH
1027: CALL_OW 28
1031: NOT
1032: AND
1033: PUSH
1034: LD_EXP 12
1038: PUSH
1039: LD_INT 1
1041: NONEQUAL
1042: AND
1043: IFFALSE 1077
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: LD_STRING 04_Donaldson
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6696 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 3
1075: ADD
1076: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1077: LD_ADDR_EXP 11
1081: PUSH
1082: LD_STRING 07_othersGamma
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1090: LD_ADDR_VAR 0 14
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_EXP 11
1102: MINUS
1103: ST_TO_ADDR
// if tmp then
1104: LD_VAR 0 14
1108: IFFALSE 1161
// for i = 1 to tmp do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_VAR 0 14
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1159
// begin PrepareHuman ( false , 1 , 5 ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_INT 1
1133: PPUSH
1134: LD_INT 5
1136: PPUSH
1137: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: CALL_OW 44
1155: ADD
1156: ST_TO_ADDR
// end ;
1157: GO 1125
1159: POP
1160: POP
// if HexInfo ( 61 , 29 ) = 0 then
1161: LD_INT 61
1163: PPUSH
1164: LD_INT 29
1166: PPUSH
1167: CALL_OW 428
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: IFFALSE 1206
// begin bc_type := b_barracks ;
1177: LD_ADDR_OWVAR 42
1181: PUSH
1182: LD_INT 5
1184: ST_TO_ADDR
// bc_level := 6 ;
1185: LD_ADDR_OWVAR 43
1189: PUSH
1190: LD_INT 6
1192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1193: LD_INT 61
1195: PPUSH
1196: LD_INT 29
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1206: LD_ADDR_VAR 0 13
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 30
1223: PUSH
1224: LD_INT 31
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PPUSH
1235: CALL_OW 69
1239: ST_TO_ADDR
// for i in bun do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_VAR 0 13
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1383
// begin x := GetX ( i ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 250
1267: ST_TO_ADDR
// y := GetY ( i ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 251
1282: ST_TO_ADDR
// d := GetDir ( i ) ;
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PPUSH
1293: CALL_OW 254
1297: ST_TO_ADDR
// RemoveUnit ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 64
// bc_type := b_bunker ;
1307: LD_ADDR_OWVAR 42
1311: PUSH
1312: LD_INT 32
1314: ST_TO_ADDR
// bc_level := 6 ;
1315: LD_ADDR_OWVAR 43
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1323: LD_ADDR_VAR 0 6
1327: PUSH
1328: LD_VAR 0 3
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_VAR 0 5
1342: PPUSH
1343: CALL_OW 47
1347: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1348: LD_VAR 0 6
1352: PPUSH
1353: LD_INT 5
1355: PUSH
1356: LD_INT 4
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 2
1370: MOD
1371: PUSH
1372: LD_INT 1
1374: PLUS
1375: ARRAY
1376: PPUSH
1377: CALL_OW 431
// end ;
1381: GO 1250
1383: POP
1384: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1385: LD_ADDR_VAR 0 9
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1419: LD_ADDR_VAR 0 8
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 30
1439: PUSH
1440: LD_INT 6
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 8
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1482: LD_ADDR_VAR 0 7
1486: PUSH
1487: LD_INT 22
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 30
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1516: LD_ADDR_VAR 0 12
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 30
1533: PUSH
1534: LD_INT 36
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1550: LD_ADDR_VAR 0 13
1554: PUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 30
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 30
1580: PUSH
1581: LD_INT 32
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 11
1611: PUSH
1612: LD_VAR 0 15
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1994
// begin placed := false ;
1621: LD_ADDR_VAR 0 11
1625: PUSH
1626: LD_INT 0
1628: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1629: LD_VAR 0 2
1633: PPUSH
1634: CALL_OW 257
1638: PUSH
1639: LD_INT 1
1641: EQUAL
1642: IFFALSE 1767
// begin if UnitFilter ( bun , [ f_empty ] ) then
1644: LD_VAR 0 13
1648: PPUSH
1649: LD_INT 58
1651: PUSH
1652: EMPTY
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1698
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_VAR 0 13
1670: PPUSH
1671: LD_INT 58
1673: PUSH
1674: EMPTY
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PPUSH
1686: CALL_OW 52
// placed := true ;
1690: LD_ADDR_VAR 0 11
1694: PUSH
1695: LD_INT 1
1697: ST_TO_ADDR
// end ; if arm and not placed then
1698: LD_VAR 0 9
1702: PUSH
1703: LD_VAR 0 11
1707: NOT
1708: AND
1709: IFFALSE 1767
// begin for j in arm do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 9
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; end ; if GetClass ( i ) = 3 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 3
1779: EQUAL
1780: IFFALSE 1884
// if fac then
1782: LD_VAR 0 7
1786: IFFALSE 1884
// begin if ct then
1788: LD_VAR 0 12
1792: IFFALSE 1820
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1794: LD_VAR 0 2
1798: PPUSH
1799: LD_VAR 0 12
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: CALL_OW 52
// placed := true ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// end ; if placed then
1820: LD_VAR 0 11
1824: IFFALSE 1828
// continue ;
1826: GO 1618
// for j in fac do
1828: LD_ADDR_VAR 0 10
1832: PUSH
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_IN
1839: IFFALSE 1882
// if UnitsInside ( j ) < 6 then
1841: LD_VAR 0 10
1845: PPUSH
1846: CALL_OW 313
1850: PUSH
1851: LD_INT 6
1853: LESS
1854: IFFALSE 1880
// begin PlaceHumanInUnit ( i , j ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_VAR 0 10
1865: PPUSH
1866: CALL_OW 52
// placed := true ;
1870: LD_ADDR_VAR 0 11
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// break ;
1878: GO 1882
// end ;
1880: GO 1838
1882: POP
1883: POP
// end ; if GetClass ( i ) = 4 then
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 257
1893: PUSH
1894: LD_INT 4
1896: EQUAL
1897: IFFALSE 1961
// if lab then
1899: LD_VAR 0 8
1903: IFFALSE 1961
// begin for j in lab do
1905: LD_ADDR_VAR 0 10
1909: PUSH
1910: LD_VAR 0 8
1914: PUSH
1915: FOR_IN
1916: IFFALSE 1959
// if UnitsInside ( j ) < 6 then
1918: LD_VAR 0 10
1922: PPUSH
1923: CALL_OW 313
1927: PUSH
1928: LD_INT 6
1930: LESS
1931: IFFALSE 1957
// begin PlaceHumanInUnit ( i , j ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_VAR 0 10
1942: PPUSH
1943: CALL_OW 52
// placed := true ;
1947: LD_ADDR_VAR 0 11
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// break ;
1955: GO 1959
// end ;
1957: GO 1915
1959: POP
1960: POP
// end ; if not placed then
1961: LD_VAR 0 11
1965: NOT
1966: IFFALSE 1992
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_INT 5
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// ComHold ( i ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: CALL_OW 140
// end ; end ;
1992: GO 1618
1994: POP
1995: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1996: LD_VAR 0 12
2000: PUSH
2001: LD_VAR 0 12
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 313
2014: AND
2015: IFFALSE 2104
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 33
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2102
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 12
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_VAR 0 12
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 313
2089: PPUSH
2090: CALL_OW 12
2094: ARRAY
2095: PPUSH
2096: CALL_OW 135
2100: GO 2051
2102: POP
2103: POP
// end ; end ;
2104: LD_VAR 0 1
2108: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2117: LD_INT 71
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2130: LD_ADDR_VAR 0 2
2134: PUSH
2135: LD_STRING GammaBase
2137: PPUSH
2138: EMPTY
2139: PPUSH
2140: CALL_OW 30
2144: ST_TO_ADDR
// uc_side := 1 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// uc_nation := 1 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// for i in blist do
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_VAR 0 2
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2580
// begin bc_type := i [ 1 ] ;
2174: LD_ADDR_OWVAR 42
2178: PUSH
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2188: LD_ADDR_OWVAR 43
2192: PUSH
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 5
2200: ARRAY
2201: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2202: LD_VAR 0 3
2206: PUSH
2207: LD_INT 1
2209: ARRAY
2210: PUSH
2211: LD_INT 7
2213: PUSH
2214: LD_INT 8
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: IN
2221: IFFALSE 2277
// begin bc_kind1 := i [ 7 ] ;
2223: LD_ADDR_OWVAR 44
2227: PUSH
2228: LD_VAR 0 3
2232: PUSH
2233: LD_INT 7
2235: ARRAY
2236: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2237: LD_STRING 06_remoteVehs_1
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 30
2247: PUSH
2248: LD_INT 1
2250: EQUAL
2251: IFFALSE 2263
// begin bc_kind2 := 15 ;
2253: LD_ADDR_OWVAR 45
2257: PUSH
2258: LD_INT 15
2260: ST_TO_ADDR
// end else
2261: GO 2277
// begin bc_kind2 := i [ 8 ] ;
2263: LD_ADDR_OWVAR 45
2267: PUSH
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 8
2275: ARRAY
2276: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2277: LD_OWVAR 42
2281: PUSH
2282: LD_INT 0
2284: EQUAL
2285: IFFALSE 2403
// begin bc_type := b_warehouse ;
2287: LD_ADDR_OWVAR 42
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2295: LD_ADDR_EXP 37
2299: PUSH
2300: LD_VAR 0 3
2304: PUSH
2305: LD_INT 2
2307: ARRAY
2308: PPUSH
2309: LD_VAR 0 3
2313: PUSH
2314: LD_INT 3
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 3
2322: PUSH
2323: LD_INT 4
2325: ARRAY
2326: PPUSH
2327: CALL_OW 47
2331: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2332: LD_EXP 37
2336: PPUSH
2337: LD_STRING gamma
2339: PPUSH
2340: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2344: LD_EXP 37
2348: PPUSH
2349: CALL_OW 274
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_INT 400
2359: PUSH
2360: LD_INT 350
2362: PUSH
2363: LD_INT 250
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: PUSH
2371: LD_OWVAR 67
2375: ARRAY
2376: PPUSH
2377: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2381: LD_EXP 37
2385: PPUSH
2386: CALL_OW 274
2390: PPUSH
2391: LD_INT 2
2393: PPUSH
2394: LD_INT 200
2396: PPUSH
2397: CALL_OW 277
// end else
2401: GO 2545
// begin if bc_type = 4 then
2403: LD_OWVAR 42
2407: PUSH
2408: LD_INT 4
2410: EQUAL
2411: IFFALSE 2460
// begin bc_type = 5 ;
2413: LD_ADDR_OWVAR 42
2417: PUSH
2418: LD_INT 5
2420: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 3
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 3
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 3
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: CALL_OW 47
2457: ST_TO_ADDR
// end else
2458: GO 2545
// begin bc_type := i [ 1 ] ;
2460: LD_ADDR_OWVAR 42
2464: PUSH
2465: LD_VAR 0 3
2469: PUSH
2470: LD_INT 1
2472: ARRAY
2473: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2474: LD_STRING 06_remoteVehs_1
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: CALL_OW 30
2484: PUSH
2485: LD_INT 1
2487: EQUAL
2488: PUSH
2489: LD_OWVAR 42
2493: PUSH
2494: LD_INT 7
2496: EQUAL
2497: AND
2498: IFFALSE 2508
// bc_type := b_lab_full ;
2500: LD_ADDR_OWVAR 42
2504: PUSH
2505: LD_INT 8
2507: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2508: LD_ADDR_VAR 0 4
2512: PUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 2
2520: ARRAY
2521: PPUSH
2522: LD_VAR 0 3
2526: PUSH
2527: LD_INT 3
2529: ARRAY
2530: PPUSH
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 4
2538: ARRAY
2539: PPUSH
2540: CALL_OW 47
2544: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2545: LD_VAR 0 4
2549: PPUSH
2550: CALL_OW 266
2554: PUSH
2555: LD_INT 32
2557: EQUAL
2558: IFFALSE 2578
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2560: LD_VAR 0 4
2564: PPUSH
2565: LD_VAR 0 3
2569: PUSH
2570: LD_INT 7
2572: ARRAY
2573: PPUSH
2574: CALL_OW 431
// end ;
2578: GO 2171
2580: POP
2581: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_INT 1
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 30
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: PPUSH
2606: CALL_OW 69
2610: IFFALSE 2858
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_INT 22
2619: PUSH
2620: LD_INT 1
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 30
2629: PUSH
2630: LD_INT 3
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PPUSH
2641: CALL_OW 69
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2650: LD_ADDR_VAR 0 6
2654: PUSH
2655: LD_VAR 0 4
2659: PPUSH
2660: CALL_OW 250
2664: PPUSH
2665: LD_VAR 0 4
2669: PPUSH
2670: CALL_OW 251
2674: PPUSH
2675: LD_VAR 0 4
2679: PPUSH
2680: CALL_OW 254
2684: PPUSH
2685: CALL 16102 0 3
2689: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: LD_INT 19
2697: PUSH
2698: LD_INT 17
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2705: LD_STRING 06_remoteVehs_1
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL_OW 30
2715: IFFALSE 2738
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2717: LD_ADDR_VAR 0 2
2721: PUSH
2722: LD_VAR 0 2
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_INT 20
2732: PPUSH
2733: CALL_OW 2
2737: ST_TO_ADDR
// for i in tmp do
2738: LD_ADDR_VAR 0 3
2742: PUSH
2743: LD_VAR 0 6
2747: PUSH
2748: FOR_IN
2749: IFFALSE 2856
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2751: LD_VAR 0 3
2755: PUSH
2756: LD_INT 1
2758: ARRAY
2759: PPUSH
2760: LD_VAR 0 3
2764: PUSH
2765: LD_INT 2
2767: ARRAY
2768: PPUSH
2769: CALL_OW 428
2773: PUSH
2774: LD_INT 0
2776: EQUAL
2777: IFFALSE 2854
// begin bc_type := blist [ 1 ] ;
2779: LD_ADDR_OWVAR 42
2783: PUSH
2784: LD_VAR 0 2
2788: PUSH
2789: LD_INT 1
2791: ARRAY
2792: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2793: LD_VAR 0 3
2797: PUSH
2798: LD_INT 1
2800: ARRAY
2801: PPUSH
2802: LD_VAR 0 3
2806: PUSH
2807: LD_INT 2
2809: ARRAY
2810: PPUSH
2811: LD_VAR 0 3
2815: PUSH
2816: LD_INT 3
2818: ARRAY
2819: PPUSH
2820: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: LD_VAR 0 2
2833: PPUSH
2834: LD_INT 1
2836: PPUSH
2837: CALL_OW 3
2841: ST_TO_ADDR
// if blist = 0 then
2842: LD_VAR 0 2
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 2854
// break ;
2852: GO 2856
// end ;
2854: GO 2748
2856: POP
2857: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2858: LD_STRING 06_remoteVehs_1
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 30
2868: PUSH
2869: LD_INT 1
2871: EQUAL
2872: IFFALSE 3076
// begin bc_type = 36 ;
2874: LD_ADDR_OWVAR 42
2878: PUSH
2879: LD_INT 36
2881: ST_TO_ADDR
// bc_level = 4 ;
2882: LD_ADDR_OWVAR 43
2886: PUSH
2887: LD_INT 4
2889: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2890: LD_INT 62
2892: PPUSH
2893: LD_INT 12
2895: PPUSH
2896: LD_INT 3
2898: PPUSH
2899: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2903: LD_ADDR_VAR 0 3
2907: PUSH
2908: DOUBLE
2909: LD_INT 1
2911: DEC
2912: ST_TO_ADDR
2913: LD_INT 3
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 2
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: PUSH
2927: LD_OWVAR 67
2931: ARRAY
2932: PUSH
2933: FOR_TO
2934: IFFALSE 3074
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2936: LD_ADDR_OWVAR 37
2940: PUSH
2941: LD_INT 3
2943: PUSH
2944: LD_INT 2
2946: PUSH
2947: LD_INT 3
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 1
2956: PPUSH
2957: LD_INT 2
2959: PPUSH
2960: CALL_OW 12
2964: ARRAY
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: ST_TO_ADDR
// vc_engine = 1 ;
2980: LD_ADDR_OWVAR 39
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// vc_control = 2 ;
2988: LD_ADDR_OWVAR 38
2992: PUSH
2993: LD_INT 2
2995: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2996: LD_ADDR_OWVAR 40
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: LD_INT 4
3006: PUSH
3007: LD_INT 5
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 12
3025: ARRAY
3026: ST_TO_ADDR
// veh = CreateVehicle ;
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: CALL_OW 45
3036: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3037: LD_VAR 0 5
3041: PPUSH
3042: LD_EXP 37
3046: PPUSH
3047: CALL_OW 250
3051: PPUSH
3052: LD_EXP 37
3056: PPUSH
3057: CALL_OW 251
3061: PPUSH
3062: LD_INT 7
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: CALL_OW 50
// end ;
3072: GO 2933
3074: POP
3075: POP
// end ; end ;
3076: LD_VAR 0 1
3080: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3081: LD_INT 0
3083: PPUSH
3084: PPUSH
3085: PPUSH
3086: PPUSH
// uc_side = 1 ;
3087: LD_ADDR_OWVAR 20
3091: PUSH
3092: LD_INT 1
3094: ST_TO_ADDR
// uc_nation = 1 ;
3095: LD_ADDR_OWVAR 21
3099: PUSH
3100: LD_INT 1
3102: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3103: LD_ADDR_EXP 14
3107: PUSH
3108: LD_STRING 06c_Denis
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: CALL 6696 0 2
3118: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3119: LD_EXP 14
3123: PPUSH
3124: LD_INT 4
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3134: LD_ADDR_EXP 15
3138: PUSH
3139: LD_STRING 06c_Joan
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: CALL 6696 0 2
3149: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3150: LD_EXP 15
3154: PPUSH
3155: LD_INT 4
3157: PPUSH
3158: LD_INT 0
3160: PPUSH
3161: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3165: LD_STRING GladstoneIn07
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 30
3175: NOT
3176: IFFALSE 3244
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3178: LD_ADDR_EXP 8
3182: PUSH
3183: LD_STRING 06c_Gladstone
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL 6696 0 2
3193: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3194: LD_EXP 8
3198: NOT
3199: PUSH
3200: LD_STRING GladstoneStayInDelta
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 30
3210: AND
3211: IFFALSE 3229
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3213: LD_ADDR_EXP 8
3217: PUSH
3218: LD_STRING 05_Gladstone
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: CALL 6696 0 2
3228: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3229: LD_EXP 8
3233: PPUSH
3234: LD_INT 4
3236: PPUSH
3237: LD_INT 0
3239: PPUSH
3240: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3244: LD_STRING LisaStayInDelta
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 30
3254: IFFALSE 3287
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3256: LD_ADDR_EXP 6
3260: PUSH
3261: LD_STRING 05_Lisa
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: CALL 6696 0 2
3271: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3272: LD_EXP 6
3276: PPUSH
3277: LD_INT 4
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3287: LD_STRING BobbyStayInDelta
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 30
3297: IFFALSE 3330
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3299: LD_ADDR_EXP 4
3303: PUSH
3304: LD_STRING 05_Bobby
3306: PPUSH
3307: LD_INT 1
3309: PPUSH
3310: CALL 6696 0 2
3314: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3315: LD_EXP 4
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3330: LD_STRING CyrusStayInDelta
3332: PPUSH
3333: LD_INT 0
3335: PPUSH
3336: CALL_OW 30
3340: IFFALSE 3373
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3342: LD_ADDR_EXP 5
3346: PUSH
3347: LD_STRING 05_Cyrus
3349: PPUSH
3350: LD_INT 1
3352: PPUSH
3353: CALL 6696 0 2
3357: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3358: LD_EXP 5
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3373: LD_STRING BrownStayInDelta
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 30
3383: IFFALSE 3416
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3385: LD_ADDR_EXP 2
3389: PUSH
3390: LD_STRING 05_Brown
3392: PPUSH
3393: LD_INT 1
3395: PPUSH
3396: CALL 6696 0 2
3400: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3401: LD_EXP 2
3405: PPUSH
3406: LD_INT 4
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3416: LD_STRING DonaldsonStayInDelta
3418: PPUSH
3419: LD_INT 0
3421: PPUSH
3422: CALL_OW 30
3426: IFFALSE 3459
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3428: LD_ADDR_EXP 3
3432: PUSH
3433: LD_STRING 05_Donaldson
3435: PPUSH
3436: LD_INT 1
3438: PPUSH
3439: CALL 6696 0 2
3443: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3444: LD_EXP 3
3448: PPUSH
3449: LD_INT 4
3451: PPUSH
3452: LD_INT 0
3454: PPUSH
3455: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: LD_STRING OtherStayInDelta
3466: PPUSH
3467: CALL_OW 31
3471: ST_TO_ADDR
// if other then
3472: LD_VAR 0 4
3476: IFFALSE 3521
// for j = 1 to other do
3478: LD_ADDR_VAR 0 3
3482: PUSH
3483: DOUBLE
3484: LD_INT 1
3486: DEC
3487: ST_TO_ADDR
3488: LD_VAR 0 4
3492: PUSH
3493: FOR_TO
3494: IFFALSE 3519
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3496: LD_VAR 0 4
3500: PUSH
3501: LD_VAR 0 3
3505: ARRAY
3506: PPUSH
3507: LD_INT 4
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL_OW 49
3517: GO 3493
3519: POP
3520: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_STRING 06_other_apemans
3528: PPUSH
3529: CALL_OW 31
3533: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3534: LD_VAR 0 4
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: LD_INT 4
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: PUSH
3553: LD_OWVAR 67
3557: ARRAY
3558: GREATEREQUAL
3559: IFFALSE 3588
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: LD_INT 5
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: ST_TO_ADDR
3586: GO 3598
// j := other ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 4
3597: ST_TO_ADDR
// for i = 1 to j do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_VAR 0 3
3612: PUSH
3613: FOR_TO
3614: IFFALSE 3639
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3616: LD_VAR 0 4
3620: PUSH
3621: LD_VAR 0 2
3625: ARRAY
3626: PPUSH
3627: LD_INT 4
3629: PPUSH
3630: LD_INT 0
3632: PPUSH
3633: CALL_OW 49
3637: GO 3613
3639: POP
3640: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3641: LD_INT 4
3643: PPUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 1
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 21
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PPUSH
3668: CALL_OW 70
3672: PPUSH
3673: LD_INT 53
3675: PPUSH
3676: LD_INT 19
3678: PPUSH
3679: CALL_OW 111
// firstAttack = 1 ;
3683: LD_ADDR_EXP 33
3687: PUSH
3688: LD_INT 1
3690: ST_TO_ADDR
// end ;
3691: LD_VAR 0 1
3695: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3696: LD_INT 0
3698: PPUSH
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3703: LD_ADDR_VAR 0 4
3707: PUSH
3708: LD_STRING 07_vehicles
3710: PPUSH
3711: EMPTY
3712: PPUSH
3713: CALL_OW 30
3717: ST_TO_ADDR
// uc_side = 1 ;
3718: LD_ADDR_OWVAR 20
3722: PUSH
3723: LD_INT 1
3725: ST_TO_ADDR
// uc_nation = 1 ;
3726: LD_ADDR_OWVAR 21
3730: PUSH
3731: LD_INT 1
3733: ST_TO_ADDR
// if vehicles > 0 then
3734: LD_VAR 0 4
3738: PUSH
3739: LD_INT 0
3741: GREATER
3742: IFFALSE 3881
// begin for i = 1 to vehicles do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3879
// begin vc_chassis = vehicles [ i ] ;
3762: LD_ADDR_OWVAR 37
3766: PUSH
3767: LD_VAR 0 4
3771: PUSH
3772: LD_VAR 0 2
3776: ARRAY
3777: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3778: LD_ADDR_OWVAR 39
3782: PUSH
3783: LD_VAR 0 4
3787: PUSH
3788: LD_VAR 0 2
3792: PUSH
3793: LD_INT 1
3795: PLUS
3796: ARRAY
3797: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3798: LD_ADDR_OWVAR 38
3802: PUSH
3803: LD_VAR 0 4
3807: PUSH
3808: LD_VAR 0 2
3812: PUSH
3813: LD_INT 2
3815: PLUS
3816: ARRAY
3817: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3818: LD_ADDR_OWVAR 40
3822: PUSH
3823: LD_VAR 0 4
3827: PUSH
3828: LD_VAR 0 2
3832: PUSH
3833: LD_INT 3
3835: PLUS
3836: ARRAY
3837: ST_TO_ADDR
// veh = CreateVehicle ;
3838: LD_ADDR_VAR 0 5
3842: PUSH
3843: CALL_OW 45
3847: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3848: LD_VAR 0 5
3852: PPUSH
3853: LD_INT 4
3855: PPUSH
3856: LD_INT 0
3858: PPUSH
3859: CALL_OW 49
// i = i + 3 ;
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: LD_VAR 0 2
3872: PUSH
3873: LD_INT 3
3875: PLUS
3876: ST_TO_ADDR
// end ;
3877: GO 3759
3879: POP
3880: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3881: LD_ADDR_EXP 1
3885: PUSH
3886: LD_EXP 43
3890: PUSH
3891: LD_STRING JMM
3893: STR
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL 6696 0 2
3902: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3903: LD_EXP 12
3907: PUSH
3908: LD_INT 1
3910: EQUAL
3911: PUSH
3912: LD_EXP 12
3916: PUSH
3917: LD_INT 3
3919: EQUAL
3920: OR
3921: PUSH
3922: LD_EXP 2
3926: NOT
3927: AND
3928: IFFALSE 3952
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3930: LD_ADDR_EXP 2
3934: PUSH
3935: LD_EXP 43
3939: PUSH
3940: LD_STRING Brown
3942: STR
3943: PPUSH
3944: LD_INT 1
3946: PPUSH
3947: CALL 6696 0 2
3951: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
3952: LD_EXP 12
3956: PUSH
3957: LD_INT 2
3959: EQUAL
3960: PUSH
3961: LD_EXP 12
3965: PUSH
3966: LD_INT 3
3968: EQUAL
3969: OR
3970: PUSH
3971: LD_EXP 3
3975: NOT
3976: AND
3977: IFFALSE 4001
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3979: LD_ADDR_EXP 3
3983: PUSH
3984: LD_EXP 43
3988: PUSH
3989: LD_STRING Donaldson
3991: STR
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: CALL 6696 0 2
4000: ST_TO_ADDR
// if not Bobby then
4001: LD_EXP 4
4005: NOT
4006: IFFALSE 4030
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4008: LD_ADDR_EXP 4
4012: PUSH
4013: LD_EXP 43
4017: PUSH
4018: LD_STRING Bobby
4020: STR
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL 6696 0 2
4029: ST_TO_ADDR
// if not Cyrus then
4030: LD_EXP 5
4034: NOT
4035: IFFALSE 4059
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4037: LD_ADDR_EXP 5
4041: PUSH
4042: LD_EXP 43
4046: PUSH
4047: LD_STRING Cyrus
4049: STR
4050: PPUSH
4051: LD_INT 1
4053: PPUSH
4054: CALL 6696 0 2
4058: ST_TO_ADDR
// if not Lisa then
4059: LD_EXP 6
4063: NOT
4064: IFFALSE 4088
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4066: LD_ADDR_EXP 6
4070: PUSH
4071: LD_EXP 43
4075: PUSH
4076: LD_STRING Lisa
4078: STR
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: CALL 6696 0 2
4087: ST_TO_ADDR
// if not Frank then
4088: LD_EXP 7
4092: NOT
4093: IFFALSE 4117
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4095: LD_ADDR_EXP 7
4099: PUSH
4100: LD_EXP 43
4104: PUSH
4105: LD_STRING Frank
4107: STR
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL 6696 0 2
4116: ST_TO_ADDR
// if not Gladstone then
4117: LD_EXP 8
4121: NOT
4122: IFFALSE 4146
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4124: LD_ADDR_EXP 8
4128: PUSH
4129: LD_EXP 43
4133: PUSH
4134: LD_STRING Gladstone
4136: STR
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: CALL 6696 0 2
4145: ST_TO_ADDR
// if not Kikuchi then
4146: LD_EXP 9
4150: NOT
4151: IFFALSE 4175
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4153: LD_ADDR_EXP 9
4157: PUSH
4158: LD_EXP 43
4162: PUSH
4163: LD_STRING Kikuchi
4165: STR
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: CALL 6696 0 2
4174: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
4175: LD_EXP 12
4179: PUSH
4180: LD_INT 1
4182: EQUAL
4183: PUSH
4184: LD_EXP 12
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: OR
4193: IFFALSE 4210
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4195: LD_EXP 2
4199: PPUSH
4200: LD_INT 4
4202: PPUSH
4203: LD_INT 0
4205: PPUSH
4206: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
4210: LD_EXP 12
4214: PUSH
4215: LD_INT 2
4217: EQUAL
4218: PUSH
4219: LD_EXP 12
4223: PUSH
4224: LD_INT 3
4226: EQUAL
4227: OR
4228: IFFALSE 4245
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4230: LD_EXP 3
4234: PPUSH
4235: LD_INT 4
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4245: LD_ADDR_VAR 0 5
4249: PUSH
4250: LD_INT 4
4252: PPUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 1
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 2
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 58
4275: PUSH
4276: EMPTY
4277: LIST
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: LIST
4283: PPUSH
4284: CALL_OW 70
4288: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4289: LD_ADDR_EXP 1
4293: PUSH
4294: LD_EXP 43
4298: PUSH
4299: LD_STRING JMM
4301: STR
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: CALL 6696 0 2
4310: ST_TO_ADDR
// if veh > 0 then
4311: LD_VAR 0 5
4315: PUSH
4316: LD_INT 0
4318: GREATER
4319: IFFALSE 4341
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4321: LD_EXP 1
4325: PPUSH
4326: LD_VAR 0 5
4330: PUSH
4331: LD_INT 1
4333: ARRAY
4334: PPUSH
4335: CALL_OW 52
// end else
4339: GO 4356
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4341: LD_EXP 1
4345: PPUSH
4346: LD_INT 4
4348: PPUSH
4349: LD_INT 0
4351: PPUSH
4352: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4356: LD_ADDR_VAR 0 5
4360: PUSH
4361: LD_INT 4
4363: PPUSH
4364: LD_INT 22
4366: PUSH
4367: LD_INT 1
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 21
4376: PUSH
4377: LD_INT 2
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 58
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: PPUSH
4395: CALL_OW 70
4399: ST_TO_ADDR
// if not Bobby then
4400: LD_EXP 4
4404: NOT
4405: IFFALSE 4474
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4407: LD_ADDR_EXP 4
4411: PUSH
4412: LD_EXP 43
4416: PUSH
4417: LD_STRING Bobby
4419: STR
4420: PPUSH
4421: LD_INT 1
4423: PPUSH
4424: CALL 6696 0 2
4428: ST_TO_ADDR
// if veh > 0 then
4429: LD_VAR 0 5
4433: PUSH
4434: LD_INT 0
4436: GREATER
4437: IFFALSE 4459
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4439: LD_EXP 4
4443: PPUSH
4444: LD_VAR 0 5
4448: PUSH
4449: LD_INT 1
4451: ARRAY
4452: PPUSH
4453: CALL_OW 52
// end else
4457: GO 4474
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4459: LD_EXP 4
4463: PPUSH
4464: LD_INT 4
4466: PPUSH
4467: LD_INT 0
4469: PPUSH
4470: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4474: LD_ADDR_VAR 0 5
4478: PUSH
4479: LD_INT 4
4481: PPUSH
4482: LD_INT 22
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 21
4494: PUSH
4495: LD_INT 2
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 58
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 70
4517: ST_TO_ADDR
// if not Cyrus then
4518: LD_EXP 5
4522: NOT
4523: IFFALSE 4592
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4525: LD_ADDR_EXP 5
4529: PUSH
4530: LD_EXP 43
4534: PUSH
4535: LD_STRING Cyrus
4537: STR
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: CALL 6696 0 2
4546: ST_TO_ADDR
// if veh > 0 then
4547: LD_VAR 0 5
4551: PUSH
4552: LD_INT 0
4554: GREATER
4555: IFFALSE 4577
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4557: LD_EXP 5
4561: PPUSH
4562: LD_VAR 0 5
4566: PUSH
4567: LD_INT 1
4569: ARRAY
4570: PPUSH
4571: CALL_OW 52
// end else
4575: GO 4592
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4577: LD_EXP 5
4581: PPUSH
4582: LD_INT 4
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4592: LD_ADDR_VAR 0 5
4596: PUSH
4597: LD_INT 4
4599: PPUSH
4600: LD_INT 22
4602: PUSH
4603: LD_INT 1
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 21
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: LD_INT 58
4622: PUSH
4623: EMPTY
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: PPUSH
4631: CALL_OW 70
4635: ST_TO_ADDR
// if not Lisa then
4636: LD_EXP 6
4640: NOT
4641: IFFALSE 4710
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4643: LD_ADDR_EXP 6
4647: PUSH
4648: LD_EXP 43
4652: PUSH
4653: LD_STRING Lisa
4655: STR
4656: PPUSH
4657: LD_INT 1
4659: PPUSH
4660: CALL 6696 0 2
4664: ST_TO_ADDR
// if veh > 0 then
4665: LD_VAR 0 5
4669: PUSH
4670: LD_INT 0
4672: GREATER
4673: IFFALSE 4695
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4675: LD_EXP 6
4679: PPUSH
4680: LD_VAR 0 5
4684: PUSH
4685: LD_INT 1
4687: ARRAY
4688: PPUSH
4689: CALL_OW 52
// end else
4693: GO 4710
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4695: LD_EXP 6
4699: PPUSH
4700: LD_INT 4
4702: PPUSH
4703: LD_INT 0
4705: PPUSH
4706: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4710: LD_ADDR_VAR 0 5
4714: PUSH
4715: LD_INT 4
4717: PPUSH
4718: LD_INT 22
4720: PUSH
4721: LD_INT 1
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_INT 21
4730: PUSH
4731: LD_INT 2
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 58
4740: PUSH
4741: EMPTY
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: PPUSH
4749: CALL_OW 70
4753: ST_TO_ADDR
// if not Frank then
4754: LD_EXP 7
4758: NOT
4759: IFFALSE 4828
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4761: LD_ADDR_EXP 7
4765: PUSH
4766: LD_EXP 43
4770: PUSH
4771: LD_STRING Frank
4773: STR
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL 6696 0 2
4782: ST_TO_ADDR
// if veh > 0 then
4783: LD_VAR 0 5
4787: PUSH
4788: LD_INT 0
4790: GREATER
4791: IFFALSE 4813
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4793: LD_EXP 7
4797: PPUSH
4798: LD_VAR 0 5
4802: PUSH
4803: LD_INT 1
4805: ARRAY
4806: PPUSH
4807: CALL_OW 52
// end else
4811: GO 4828
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4813: LD_EXP 7
4817: PPUSH
4818: LD_INT 4
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4828: LD_ADDR_VAR 0 5
4832: PUSH
4833: LD_INT 4
4835: PPUSH
4836: LD_INT 22
4838: PUSH
4839: LD_INT 1
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 2
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 58
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 70
4871: ST_TO_ADDR
// if not Gladstone then
4872: LD_EXP 8
4876: NOT
4877: IFFALSE 4946
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4879: LD_ADDR_EXP 8
4883: PUSH
4884: LD_EXP 43
4888: PUSH
4889: LD_STRING Gladstone
4891: STR
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: CALL 6696 0 2
4900: ST_TO_ADDR
// if veh > 0 then
4901: LD_VAR 0 5
4905: PUSH
4906: LD_INT 0
4908: GREATER
4909: IFFALSE 4931
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4911: LD_EXP 8
4915: PPUSH
4916: LD_VAR 0 5
4920: PUSH
4921: LD_INT 1
4923: ARRAY
4924: PPUSH
4925: CALL_OW 52
// end else
4929: GO 4946
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4931: LD_EXP 8
4935: PPUSH
4936: LD_INT 4
4938: PPUSH
4939: LD_INT 0
4941: PPUSH
4942: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4946: LD_ADDR_VAR 0 5
4950: PUSH
4951: LD_INT 4
4953: PPUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 1
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 21
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 58
4976: PUSH
4977: EMPTY
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: PPUSH
4985: CALL_OW 70
4989: ST_TO_ADDR
// if not Kikuchi then
4990: LD_EXP 9
4994: NOT
4995: IFFALSE 5064
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_EXP 43
5006: PUSH
5007: LD_STRING Kikuchi
5009: STR
5010: PPUSH
5011: LD_INT 1
5013: PPUSH
5014: CALL 6696 0 2
5018: ST_TO_ADDR
// if veh > 0 then
5019: LD_VAR 0 5
5023: PUSH
5024: LD_INT 0
5026: GREATER
5027: IFFALSE 5049
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
5029: LD_EXP 9
5033: PPUSH
5034: LD_VAR 0 5
5038: PUSH
5039: LD_INT 1
5041: ARRAY
5042: PPUSH
5043: CALL_OW 52
// end else
5047: GO 5064
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
5049: LD_EXP 9
5053: PPUSH
5054: LD_INT 4
5056: PPUSH
5057: LD_INT 0
5059: PPUSH
5060: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_INT 4
5071: PPUSH
5072: LD_INT 22
5074: PUSH
5075: LD_INT 1
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 21
5084: PUSH
5085: LD_INT 2
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 58
5094: PUSH
5095: EMPTY
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 70
5107: ST_TO_ADDR
// if not Khatam then
5108: LD_EXP 10
5112: NOT
5113: IFFALSE 5182
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5115: LD_ADDR_EXP 10
5119: PUSH
5120: LD_EXP 43
5124: PUSH
5125: LD_STRING Khatam
5127: STR
5128: PPUSH
5129: LD_INT 1
5131: PPUSH
5132: CALL 6696 0 2
5136: ST_TO_ADDR
// if veh > 0 then
5137: LD_VAR 0 5
5141: PUSH
5142: LD_INT 0
5144: GREATER
5145: IFFALSE 5167
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5147: LD_EXP 10
5151: PPUSH
5152: LD_VAR 0 5
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 52
// end else
5165: GO 5182
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5167: LD_EXP 10
5171: PPUSH
5172: LD_INT 4
5174: PPUSH
5175: LD_INT 0
5177: PPUSH
5178: CALL_OW 49
// end ; end ; other = CreateCharacterSet ( 07c_others ) ;
5182: LD_ADDR_VAR 0 3
5186: PUSH
5187: LD_STRING 07c_others
5189: PPUSH
5190: CALL_OW 31
5194: ST_TO_ADDR
// for i in other do
5195: LD_ADDR_VAR 0 2
5199: PUSH
5200: LD_VAR 0 3
5204: PUSH
5205: FOR_IN
5206: IFFALSE 5299
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5208: LD_ADDR_VAR 0 5
5212: PUSH
5213: LD_INT 4
5215: PPUSH
5216: LD_INT 22
5218: PUSH
5219: LD_INT 1
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: LD_INT 21
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 58
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: CALL_OW 70
5251: ST_TO_ADDR
// if veh > 0 then
5252: LD_VAR 0 5
5256: PUSH
5257: LD_INT 0
5259: GREATER
5260: IFFALSE 5282
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_VAR 0 5
5271: PUSH
5272: LD_INT 1
5274: ARRAY
5275: PPUSH
5276: CALL_OW 52
// end else
5280: GO 5297
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5282: LD_VAR 0 2
5286: PPUSH
5287: LD_INT 4
5289: PPUSH
5290: LD_INT 0
5292: PPUSH
5293: CALL_OW 49
// end ; end ;
5297: GO 5205
5299: POP
5300: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5301: LD_INT 4
5303: PPUSH
5304: LD_INT 22
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: PPUSH
5317: CALL_OW 70
5321: PPUSH
5322: LD_INT 53
5324: PPUSH
5325: LD_INT 19
5327: PPUSH
5328: CALL_OW 111
// end ;
5332: LD_VAR 0 1
5336: RET
// export function PrepareSikorsky ; begin
5337: LD_INT 0
5339: PPUSH
// uc_side = 4 ;
5340: LD_ADDR_OWVAR 20
5344: PUSH
5345: LD_INT 4
5347: ST_TO_ADDR
// uc_nation = 1 ;
5348: LD_ADDR_OWVAR 21
5352: PUSH
5353: LD_INT 1
5355: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5356: LD_ADDR_EXP 16
5360: PUSH
5361: LD_STRING Sikorski
5363: PPUSH
5364: LD_INT 0
5366: PPUSH
5367: CALL 6696 0 2
5371: ST_TO_ADDR
// vc_engine = 1 ;
5372: LD_ADDR_OWVAR 39
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// vc_control = 1 ;
5380: LD_ADDR_OWVAR 38
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5388: LD_ADDR_OWVAR 40
5392: PUSH
5393: LD_INT 5
5395: PUSH
5396: LD_INT 3
5398: PUSH
5399: LD_INT 4
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_OWVAR 67
5411: ARRAY
5412: ST_TO_ADDR
// vc_chassis = 4 ;
5413: LD_ADDR_OWVAR 37
5417: PUSH
5418: LD_INT 4
5420: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5421: LD_ADDR_EXP 17
5425: PUSH
5426: CALL_OW 45
5430: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5431: LD_EXP 17
5435: PPUSH
5436: LD_INT 9
5438: PPUSH
5439: LD_INT 0
5441: PPUSH
5442: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5446: LD_EXP 16
5450: PPUSH
5451: LD_EXP 17
5455: PPUSH
5456: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5460: LD_EXP 17
5464: PPUSH
5465: LD_INT 5
5467: PPUSH
5468: CALL_OW 113
// end ;
5472: LD_VAR 0 1
5476: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5477: LD_INT 0
5479: PPUSH
5480: PPUSH
5481: PPUSH
5482: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5483: LD_ADDR_VAR 0 2
5487: PUSH
5488: DOUBLE
5489: LD_INT 1
5491: DEC
5492: ST_TO_ADDR
5493: LD_INT 8
5495: PUSH
5496: LD_INT 7
5498: PUSH
5499: LD_INT 7
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: PUSH
5507: LD_OWVAR 67
5511: ARRAY
5512: PUSH
5513: FOR_TO
5514: IFFALSE 5611
// begin uc_side = 4 ;
5516: LD_ADDR_OWVAR 20
5520: PUSH
5521: LD_INT 4
5523: ST_TO_ADDR
// uc_nation = 1 ;
5524: LD_ADDR_OWVAR 21
5528: PUSH
5529: LD_INT 1
5531: ST_TO_ADDR
// hc_name =  ;
5532: LD_ADDR_OWVAR 26
5536: PUSH
5537: LD_STRING 
5539: ST_TO_ADDR
// hc_gallery =  ;
5540: LD_ADDR_OWVAR 33
5544: PUSH
5545: LD_STRING 
5547: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5548: LD_INT 0
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: LD_INT 5
5556: PPUSH
5557: LD_INT 8
5559: PPUSH
5560: CALL_OW 12
5564: PPUSH
5565: CALL_OW 380
// un = CreateHuman ;
5569: LD_ADDR_VAR 0 3
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5579: LD_VAR 0 3
5583: PPUSH
5584: LD_INT 9
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5594: LD_VAR 0 3
5598: PPUSH
5599: LD_INT 53
5601: PPUSH
5602: LD_INT 23
5604: PPUSH
5605: CALL_OW 111
// end ;
5609: GO 5513
5611: POP
5612: POP
// for i = 1 to 3 do
5613: LD_ADDR_VAR 0 2
5617: PUSH
5618: DOUBLE
5619: LD_INT 1
5621: DEC
5622: ST_TO_ADDR
5623: LD_INT 3
5625: PUSH
5626: FOR_TO
5627: IFFALSE 5724
// begin uc_side = 4 ;
5629: LD_ADDR_OWVAR 20
5633: PUSH
5634: LD_INT 4
5636: ST_TO_ADDR
// uc_nation = 1 ;
5637: LD_ADDR_OWVAR 21
5641: PUSH
5642: LD_INT 1
5644: ST_TO_ADDR
// hc_name =  ;
5645: LD_ADDR_OWVAR 26
5649: PUSH
5650: LD_STRING 
5652: ST_TO_ADDR
// hc_gallery =  ;
5653: LD_ADDR_OWVAR 33
5657: PUSH
5658: LD_STRING 
5660: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5661: LD_INT 0
5663: PPUSH
5664: LD_INT 4
5666: PPUSH
5667: LD_INT 5
5669: PPUSH
5670: LD_INT 8
5672: PPUSH
5673: CALL_OW 12
5677: PPUSH
5678: CALL_OW 380
// un = CreateHuman ;
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: CALL_OW 44
5691: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_INT 9
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5707: LD_VAR 0 3
5711: PPUSH
5712: LD_INT 53
5714: PPUSH
5715: LD_INT 23
5717: PPUSH
5718: CALL_OW 111
// end ;
5722: GO 5626
5724: POP
5725: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5726: LD_ADDR_VAR 0 2
5730: PUSH
5731: DOUBLE
5732: LD_INT 1
5734: DEC
5735: ST_TO_ADDR
5736: LD_INT 9
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 7
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: LD_OWVAR 67
5754: ARRAY
5755: PUSH
5756: FOR_TO
5757: IFFALSE 5953
// begin uc_side = 4 ;
5759: LD_ADDR_OWVAR 20
5763: PUSH
5764: LD_INT 4
5766: ST_TO_ADDR
// uc_nation = 1 ;
5767: LD_ADDR_OWVAR 21
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// vc_engine = 1 ;
5775: LD_ADDR_OWVAR 39
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// vc_control = 1 ;
5783: LD_ADDR_OWVAR 38
5787: PUSH
5788: LD_INT 1
5790: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5791: LD_ADDR_OWVAR 40
5795: PUSH
5796: LD_INT 3
5798: PUSH
5799: LD_INT 4
5801: PUSH
5802: LD_INT 5
5804: PUSH
5805: LD_INT 6
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 1
5816: PPUSH
5817: LD_INT 4
5819: PPUSH
5820: CALL_OW 12
5824: ARRAY
5825: ST_TO_ADDR
// vc_chassis = 4 ;
5826: LD_ADDR_OWVAR 37
5830: PUSH
5831: LD_INT 4
5833: ST_TO_ADDR
// veh = CreateVehicle ;
5834: LD_ADDR_VAR 0 4
5838: PUSH
5839: CALL_OW 45
5843: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5844: LD_VAR 0 4
5848: PPUSH
5849: LD_INT 9
5851: PPUSH
5852: LD_INT 0
5854: PPUSH
5855: CALL_OW 49
// hc_name =  ;
5859: LD_ADDR_OWVAR 26
5863: PUSH
5864: LD_STRING 
5866: ST_TO_ADDR
// hc_gallery =  ;
5867: LD_ADDR_OWVAR 33
5871: PUSH
5872: LD_STRING 
5874: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5875: LD_INT 0
5877: PPUSH
5878: LD_INT 3
5880: PPUSH
5881: LD_INT 5
5883: PPUSH
5884: LD_INT 8
5886: PPUSH
5887: CALL_OW 12
5891: PPUSH
5892: CALL_OW 380
// un = CreateHuman ;
5896: LD_ADDR_VAR 0 3
5900: PUSH
5901: CALL_OW 44
5905: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_VAR 0 4
5915: PPUSH
5916: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5920: LD_VAR 0 4
5924: PUSH
5925: LD_VAR 0 3
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: LD_INT 53
5936: PPUSH
5937: LD_INT 23
5939: PPUSH
5940: CALL_OW 111
// wait ( 0 0$5 ) ;
5944: LD_INT 175
5946: PPUSH
5947: CALL_OW 67
// end ;
5951: GO 5756
5953: POP
5954: POP
// end ; end_of_file
5955: LD_VAR 0 1
5959: RET
// export function PrepareRussianCommander ; begin
5960: LD_INT 0
5962: PPUSH
// uc_side = 3 ;
5963: LD_ADDR_OWVAR 20
5967: PUSH
5968: LD_INT 3
5970: ST_TO_ADDR
// uc_nation = 3 ;
5971: LD_ADDR_OWVAR 21
5975: PUSH
5976: LD_INT 3
5978: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5979: LD_ADDR_EXP 24
5983: PUSH
5984: LD_STRING Borodin
5986: PPUSH
5987: CALL_OW 25
5991: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5992: LD_EXP 24
5996: PPUSH
5997: LD_INT 25
5999: PPUSH
6000: LD_INT 0
6002: PPUSH
6003: CALL_OW 49
// end ;
6007: LD_VAR 0 1
6011: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6012: LD_INT 0
6014: PPUSH
6015: PPUSH
6016: PPUSH
6017: PPUSH
// for i = 1 to 10 do
6018: LD_ADDR_VAR 0 2
6022: PUSH
6023: DOUBLE
6024: LD_INT 1
6026: DEC
6027: ST_TO_ADDR
6028: LD_INT 10
6030: PUSH
6031: FOR_TO
6032: IFFALSE 6106
// begin uc_side = 6 ;
6034: LD_ADDR_OWVAR 20
6038: PUSH
6039: LD_INT 6
6041: ST_TO_ADDR
// uc_nation = 3 ;
6042: LD_ADDR_OWVAR 21
6046: PUSH
6047: LD_INT 3
6049: ST_TO_ADDR
// hc_gallery =  ;
6050: LD_ADDR_OWVAR 33
6054: PUSH
6055: LD_STRING 
6057: ST_TO_ADDR
// hc_name =  ;
6058: LD_ADDR_OWVAR 26
6062: PUSH
6063: LD_STRING 
6065: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6066: LD_INT 0
6068: PPUSH
6069: LD_INT 1
6071: PPUSH
6072: LD_INT 3
6074: PPUSH
6075: CALL_OW 380
// un = CreateHuman ;
6079: LD_ADDR_VAR 0 3
6083: PUSH
6084: CALL_OW 44
6088: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6089: LD_VAR 0 3
6093: PPUSH
6094: LD_INT 1
6096: PPUSH
6097: LD_INT 0
6099: PPUSH
6100: CALL_OW 49
// end ;
6104: GO 6031
6106: POP
6107: POP
// for i = 1 to 3 do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: DOUBLE
6114: LD_INT 1
6116: DEC
6117: ST_TO_ADDR
6118: LD_INT 3
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6271
// begin uc_side = 6 ;
6124: LD_ADDR_OWVAR 20
6128: PUSH
6129: LD_INT 6
6131: ST_TO_ADDR
// uc_nation = 3 ;
6132: LD_ADDR_OWVAR 21
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_engine = 1 ;
6140: LD_ADDR_OWVAR 39
6144: PUSH
6145: LD_INT 1
6147: ST_TO_ADDR
// vc_control = 1 ;
6148: LD_ADDR_OWVAR 38
6152: PUSH
6153: LD_INT 1
6155: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6156: LD_ADDR_OWVAR 40
6160: PUSH
6161: LD_INT 43
6163: PUSH
6164: LD_INT 44
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: ST_TO_ADDR
// vc_chassis = 22 ;
6183: LD_ADDR_OWVAR 37
6187: PUSH
6188: LD_INT 22
6190: ST_TO_ADDR
// veh = CreateVehicle ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: CALL_OW 45
6200: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6201: LD_VAR 0 4
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: LD_INT 0
6211: PPUSH
6212: CALL_OW 49
// hc_gallery =  ;
6216: LD_ADDR_OWVAR 33
6220: PUSH
6221: LD_STRING 
6223: ST_TO_ADDR
// hc_name =  ;
6224: LD_ADDR_OWVAR 26
6228: PUSH
6229: LD_STRING 
6231: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6232: LD_INT 0
6234: PPUSH
6235: LD_INT 3
6237: PPUSH
6238: LD_INT 4
6240: PPUSH
6241: CALL_OW 380
// un = CreateHuman ;
6245: LD_ADDR_VAR 0 3
6249: PUSH
6250: CALL_OW 44
6254: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6255: LD_VAR 0 3
6259: PPUSH
6260: LD_VAR 0 4
6264: PPUSH
6265: CALL_OW 52
// end ;
6269: GO 6121
6271: POP
6272: POP
// end ;
6273: LD_VAR 0 1
6277: RET
// export function PrepareRussians ; var i , un ; begin
6278: LD_INT 0
6280: PPUSH
6281: PPUSH
6282: PPUSH
// for i = 1 to 14 do
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: DOUBLE
6289: LD_INT 1
6291: DEC
6292: ST_TO_ADDR
6293: LD_INT 14
6295: PUSH
6296: FOR_TO
6297: IFFALSE 6383
// begin uc_side = 3 ;
6299: LD_ADDR_OWVAR 20
6303: PUSH
6304: LD_INT 3
6306: ST_TO_ADDR
// uc_nation = 3 ;
6307: LD_ADDR_OWVAR 21
6311: PUSH
6312: LD_INT 3
6314: ST_TO_ADDR
// hc_gallery =  ;
6315: LD_ADDR_OWVAR 33
6319: PUSH
6320: LD_STRING 
6322: ST_TO_ADDR
// hc_name =  ;
6323: LD_ADDR_OWVAR 26
6327: PUSH
6328: LD_STRING 
6330: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6331: LD_INT 0
6333: PPUSH
6334: LD_INT 1
6336: PPUSH
6337: LD_EXP 25
6341: PPUSH
6342: LD_EXP 26
6346: PPUSH
6347: CALL_OW 12
6351: PPUSH
6352: CALL_OW 380
// un = CreateHuman ;
6356: LD_ADDR_VAR 0 3
6360: PUSH
6361: CALL_OW 44
6365: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_INT 3
6373: PPUSH
6374: LD_INT 0
6376: PPUSH
6377: CALL_OW 49
// end ;
6381: GO 6296
6383: POP
6384: POP
// for i = 1 to 6 do
6385: LD_ADDR_VAR 0 2
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_INT 6
6397: PUSH
6398: FOR_TO
6399: IFFALSE 6485
// begin uc_side = 3 ;
6401: LD_ADDR_OWVAR 20
6405: PUSH
6406: LD_INT 3
6408: ST_TO_ADDR
// uc_nation = 3 ;
6409: LD_ADDR_OWVAR 21
6413: PUSH
6414: LD_INT 3
6416: ST_TO_ADDR
// hc_gallery =  ;
6417: LD_ADDR_OWVAR 33
6421: PUSH
6422: LD_STRING 
6424: ST_TO_ADDR
// hc_name =  ;
6425: LD_ADDR_OWVAR 26
6429: PUSH
6430: LD_STRING 
6432: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6433: LD_INT 0
6435: PPUSH
6436: LD_INT 2
6438: PPUSH
6439: LD_EXP 25
6443: PPUSH
6444: LD_EXP 26
6448: PPUSH
6449: CALL_OW 12
6453: PPUSH
6454: CALL_OW 380
// un = CreateHuman ;
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: CALL_OW 44
6467: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6468: LD_VAR 0 3
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 0
6478: PPUSH
6479: CALL_OW 49
// end ;
6483: GO 6398
6485: POP
6486: POP
// for i = 1 to 6 do
6487: LD_ADDR_VAR 0 2
6491: PUSH
6492: DOUBLE
6493: LD_INT 1
6495: DEC
6496: ST_TO_ADDR
6497: LD_INT 6
6499: PUSH
6500: FOR_TO
6501: IFFALSE 6587
// begin uc_side = 3 ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_INT 3
6510: ST_TO_ADDR
// uc_nation = 3 ;
6511: LD_ADDR_OWVAR 21
6515: PUSH
6516: LD_INT 3
6518: ST_TO_ADDR
// hc_gallery =  ;
6519: LD_ADDR_OWVAR 33
6523: PUSH
6524: LD_STRING 
6526: ST_TO_ADDR
// hc_name =  ;
6527: LD_ADDR_OWVAR 26
6531: PUSH
6532: LD_STRING 
6534: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6535: LD_INT 0
6537: PPUSH
6538: LD_INT 3
6540: PPUSH
6541: LD_EXP 25
6545: PPUSH
6546: LD_EXP 26
6550: PPUSH
6551: CALL_OW 12
6555: PPUSH
6556: CALL_OW 380
// un = CreateHuman ;
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: CALL_OW 44
6569: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6570: LD_VAR 0 3
6574: PPUSH
6575: LD_INT 3
6577: PPUSH
6578: LD_INT 0
6580: PPUSH
6581: CALL_OW 49
// end ;
6585: GO 6500
6587: POP
6588: POP
// for i = 1 to 4 do
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: DOUBLE
6595: LD_INT 1
6597: DEC
6598: ST_TO_ADDR
6599: LD_INT 4
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6689
// begin uc_side = 3 ;
6605: LD_ADDR_OWVAR 20
6609: PUSH
6610: LD_INT 3
6612: ST_TO_ADDR
// uc_nation = 3 ;
6613: LD_ADDR_OWVAR 21
6617: PUSH
6618: LD_INT 3
6620: ST_TO_ADDR
// hc_gallery =  ;
6621: LD_ADDR_OWVAR 33
6625: PUSH
6626: LD_STRING 
6628: ST_TO_ADDR
// hc_name =  ;
6629: LD_ADDR_OWVAR 26
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6637: LD_INT 0
6639: PPUSH
6640: LD_INT 4
6642: PPUSH
6643: LD_EXP 25
6647: PPUSH
6648: LD_EXP 26
6652: PPUSH
6653: CALL_OW 12
6657: PPUSH
6658: CALL_OW 380
// un = CreateHuman ;
6662: LD_ADDR_VAR 0 3
6666: PUSH
6667: CALL_OW 44
6671: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6672: LD_VAR 0 3
6676: PPUSH
6677: LD_INT 3
6679: PPUSH
6680: LD_INT 0
6682: PPUSH
6683: CALL_OW 49
// end ;
6687: GO 6602
6689: POP
6690: POP
// end ; end_of_file
6691: LD_VAR 0 1
6695: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6696: LD_INT 0
6698: PPUSH
6699: PPUSH
// if exist_mode then
6700: LD_VAR 0 2
6704: IFFALSE 6723
// unit := CreateCharacter ( ident ) else
6706: LD_ADDR_VAR 0 4
6710: PUSH
6711: LD_VAR 0 1
6715: PPUSH
6716: CALL_OW 34
6720: ST_TO_ADDR
6721: GO 6738
// unit := NewCharacter ( ident ) ;
6723: LD_ADDR_VAR 0 4
6727: PUSH
6728: LD_VAR 0 1
6732: PPUSH
6733: CALL_OW 25
6737: ST_TO_ADDR
// result := unit ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ST_TO_ADDR
// end ;
6748: LD_VAR 0 3
6752: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6753: LD_INT 0
6755: PPUSH
6756: PPUSH
6757: PPUSH
// rnd = rand ( 1 , characters ) ;
6758: LD_ADDR_VAR 0 6
6762: PUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_VAR 0 1
6770: PPUSH
6771: CALL_OW 12
6775: ST_TO_ADDR
// for i = 1 to characters do
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_VAR 0 1
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6902
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6794: LD_VAR 0 5
6798: PUSH
6799: LD_VAR 0 6
6803: EQUAL
6804: PUSH
6805: LD_VAR 0 1
6809: PUSH
6810: LD_VAR 0 5
6814: ARRAY
6815: PPUSH
6816: CALL_OW 258
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: IFFALSE 6847
// Say ( characters [ i ] , dialogMID ) ;
6827: LD_VAR 0 1
6831: PUSH
6832: LD_VAR 0 5
6836: ARRAY
6837: PPUSH
6838: LD_VAR 0 2
6842: PPUSH
6843: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6847: LD_VAR 0 5
6851: PUSH
6852: LD_VAR 0 6
6856: EQUAL
6857: PUSH
6858: LD_VAR 0 1
6862: PUSH
6863: LD_VAR 0 5
6867: ARRAY
6868: PPUSH
6869: CALL_OW 258
6873: PUSH
6874: LD_INT 2
6876: EQUAL
6877: AND
6878: IFFALSE 6900
// Say ( characters [ i ] , dialogFID ) ;
6880: LD_VAR 0 1
6884: PUSH
6885: LD_VAR 0 5
6889: ARRAY
6890: PPUSH
6891: LD_VAR 0 3
6895: PPUSH
6896: CALL_OW 88
// end ;
6900: GO 6791
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 4
6908: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
// uc_side := GetSide ( b ) ;
6914: LD_ADDR_OWVAR 20
6918: PUSH
6919: LD_VAR 0 2
6923: PPUSH
6924: CALL_OW 255
6928: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6929: LD_ADDR_OWVAR 21
6933: PUSH
6934: LD_VAR 0 2
6938: PPUSH
6939: CALL_OW 248
6943: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6944: LD_INT 0
6946: PPUSH
6947: LD_INT 1
6949: PPUSH
6950: LD_VAR 0 1
6954: PPUSH
6955: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6959: LD_ADDR_VAR 0 5
6963: PUSH
6964: LD_VAR 0 2
6968: PPUSH
6969: CALL_OW 254
6973: PUSH
6974: LD_INT 3
6976: MINUS
6977: ST_TO_ADDR
// if dir < 0 then
6978: LD_VAR 0 5
6982: PUSH
6983: LD_INT 0
6985: LESS
6986: IFFALSE 7002
// dir := 6 + dir ;
6988: LD_ADDR_VAR 0 5
6992: PUSH
6993: LD_INT 6
6995: PUSH
6996: LD_VAR 0 5
7000: PLUS
7001: ST_TO_ADDR
// un := CreateHuman ;
7002: LD_ADDR_VAR 0 4
7006: PUSH
7007: CALL_OW 44
7011: ST_TO_ADDR
// SetDir ( un , dir ) ;
7012: LD_VAR 0 4
7016: PPUSH
7017: LD_VAR 0 5
7021: PPUSH
7022: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7026: LD_VAR 0 4
7030: PPUSH
7031: LD_VAR 0 2
7035: PPUSH
7036: CALL_OW 52
// end ;
7040: LD_VAR 0 3
7044: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7045: LD_INT 0
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
// for i = 1 to count do
7051: LD_ADDR_VAR 0 8
7055: PUSH
7056: DOUBLE
7057: LD_INT 1
7059: DEC
7060: ST_TO_ADDR
7061: LD_VAR 0 6
7065: PUSH
7066: FOR_TO
7067: IFFALSE 7148
// begin uc_side = side ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_VAR 0 1
7078: ST_TO_ADDR
// uc_nation = nation ;
7079: LD_ADDR_OWVAR 21
7083: PUSH
7084: LD_VAR 0 2
7088: ST_TO_ADDR
// hc_gallery =  ;
7089: LD_ADDR_OWVAR 33
7093: PUSH
7094: LD_STRING 
7096: ST_TO_ADDR
// hc_name =  ;
7097: LD_ADDR_OWVAR 26
7101: PUSH
7102: LD_STRING 
7104: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_VAR 0 5
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 380
// un = CreateHuman ;
7122: LD_ADDR_VAR 0 10
7126: PUSH
7127: CALL_OW 44
7131: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7132: LD_VAR 0 10
7136: PPUSH
7137: LD_VAR 0 3
7141: PPUSH
7142: CALL_OW 52
// end ;
7146: GO 7066
7148: POP
7149: POP
// end ;
7150: LD_VAR 0 7
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// if Difficulty = 1 then
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: EQUAL
7166: IFFALSE 7184
// begin RuSolMinLevel = 4 ;
7168: LD_ADDR_EXP 25
7172: PUSH
7173: LD_INT 4
7175: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7176: LD_ADDR_EXP 26
7180: PUSH
7181: LD_INT 6
7183: ST_TO_ADDR
// end ; if Difficulty = 2 then
7184: LD_OWVAR 67
7188: PUSH
7189: LD_INT 2
7191: EQUAL
7192: IFFALSE 7262
// begin RuSolMinLevel = 5 ;
7194: LD_ADDR_EXP 25
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7202: LD_ADDR_EXP 26
7206: PUSH
7207: LD_INT 6
7209: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7210: LD_INT 51
7212: PPUSH
7213: LD_INT 3
7215: PPUSH
7216: LD_INT 1
7218: PPUSH
7219: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7223: LD_INT 57
7225: PPUSH
7226: LD_INT 3
7228: PPUSH
7229: LD_INT 1
7231: PPUSH
7232: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7236: LD_INT 57
7238: PPUSH
7239: LD_INT 6
7241: PPUSH
7242: LD_INT 2
7244: PPUSH
7245: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7249: LD_INT 51
7251: PPUSH
7252: LD_INT 6
7254: PPUSH
7255: LD_INT 2
7257: PPUSH
7258: CALL_OW 322
// end ; if Difficulty = 3 then
7262: LD_OWVAR 67
7266: PUSH
7267: LD_INT 3
7269: EQUAL
7270: IFFALSE 7353
// begin RuSolMinLevel = 5 ;
7272: LD_ADDR_EXP 25
7276: PUSH
7277: LD_INT 5
7279: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7280: LD_ADDR_EXP 26
7284: PUSH
7285: LD_INT 6
7287: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7288: LD_INT 57
7290: PPUSH
7291: LD_INT 3
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7301: LD_INT 51
7303: PPUSH
7304: LD_INT 3
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7314: LD_INT 52
7316: PPUSH
7317: LD_INT 3
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7327: LD_INT 57
7329: PPUSH
7330: LD_INT 6
7332: PPUSH
7333: LD_INT 2
7335: PPUSH
7336: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7340: LD_INT 52
7342: PPUSH
7343: LD_INT 6
7345: PPUSH
7346: LD_INT 2
7348: PPUSH
7349: CALL_OW 322
// end ; end ;
7353: LD_VAR 0 1
7357: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
7363: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_INT 22
7371: PUSH
7372: LD_INT 3
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 25
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 69
7397: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7398: LD_ADDR_VAR 0 4
7402: PUSH
7403: LD_INT 4
7405: PUSH
7406: LD_INT 75
7408: PUSH
7409: LD_INT 79
7411: PUSH
7412: LD_INT 2
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 4
7423: PUSH
7424: LD_INT 113
7426: PUSH
7427: LD_INT 94
7429: PUSH
7430: LD_INT 4
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 29
7441: PUSH
7442: LD_INT 106
7444: PUSH
7445: LD_INT 97
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 26
7459: PUSH
7460: LD_INT 93
7462: PUSH
7463: LD_INT 97
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 2
7477: PUSH
7478: LD_INT 100
7480: PUSH
7481: LD_INT 89
7483: PUSH
7484: LD_INT 3
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 17
7495: PUSH
7496: LD_INT 96
7498: PUSH
7499: LD_INT 89
7501: PUSH
7502: LD_INT 1
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 32
7513: PUSH
7514: LD_INT 78
7516: PUSH
7517: LD_INT 94
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 32
7531: PUSH
7532: LD_INT 95
7534: PUSH
7535: LD_INT 82
7537: PUSH
7538: LD_INT 3
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 32
7549: PUSH
7550: LD_INT 104
7552: PUSH
7553: LD_INT 85
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 32
7567: PUSH
7568: LD_INT 81
7570: PUSH
7571: LD_INT 78
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 33
7585: PUSH
7586: LD_INT 109
7588: PUSH
7589: LD_INT 90
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 33
7603: PUSH
7604: LD_INT 88
7606: PUSH
7607: LD_INT 79
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 33
7621: PUSH
7622: LD_INT 76
7624: PUSH
7625: LD_INT 87
7627: PUSH
7628: LD_INT 1
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 26
7639: PUSH
7640: LD_INT 96
7642: PUSH
7643: LD_INT 97
7645: PUSH
7646: LD_INT 5
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 26
7657: PUSH
7658: LD_INT 85
7660: PUSH
7661: LD_INT 84
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 6
7675: PUSH
7676: LD_INT 88
7678: PUSH
7679: LD_INT 95
7681: PUSH
7682: LD_INT 0
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 19
7693: PUSH
7694: LD_INT 103
7696: PUSH
7697: LD_INT 89
7699: PUSH
7700: LD_INT 4
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 16
7711: PUSH
7712: LD_INT 97
7714: PUSH
7715: LD_INT 86
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 100
7732: PUSH
7733: LD_INT 85
7735: PUSH
7736: LD_INT 3
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: ST_TO_ADDR
// for i := 1 to buildingsTab do
7766: LD_ADDR_VAR 0 2
7770: PUSH
7771: DOUBLE
7772: LD_INT 1
7774: DEC
7775: ST_TO_ADDR
7776: LD_VAR 0 4
7780: PUSH
7781: FOR_TO
7782: IFFALSE 7855
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7784: LD_VAR 0 3
7788: PPUSH
7789: LD_VAR 0 4
7793: PUSH
7794: LD_VAR 0 2
7798: ARRAY
7799: PUSH
7800: LD_INT 1
7802: ARRAY
7803: PPUSH
7804: LD_VAR 0 4
7808: PUSH
7809: LD_VAR 0 2
7813: ARRAY
7814: PUSH
7815: LD_INT 2
7817: ARRAY
7818: PPUSH
7819: LD_VAR 0 4
7823: PUSH
7824: LD_VAR 0 2
7828: ARRAY
7829: PUSH
7830: LD_INT 3
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 4
7838: PUSH
7839: LD_VAR 0 2
7843: ARRAY
7844: PUSH
7845: LD_INT 4
7847: ARRAY
7848: PPUSH
7849: CALL_OW 205
7853: GO 7781
7855: POP
7856: POP
// end ;
7857: LD_VAR 0 1
7861: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7862: LD_INT 0
7864: PPUSH
7865: PPUSH
// for i in charactersList do
7866: LD_ADDR_VAR 0 4
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: FOR_IN
7877: IFFALSE 7906
// begin if IsOk ( i ) then
7879: LD_VAR 0 4
7883: PPUSH
7884: CALL_OW 302
7888: IFFALSE 7904
// SaveCharacters ( i , ident ) ;
7890: LD_VAR 0 4
7894: PPUSH
7895: LD_VAR 0 2
7899: PPUSH
7900: CALL_OW 38
// end ;
7904: GO 7876
7906: POP
7907: POP
// end ;
7908: LD_VAR 0 3
7912: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7913: LD_INT 0
7915: PPUSH
7916: PPUSH
7917: PPUSH
7918: PPUSH
// for i = 1 to 72 do
7919: LD_ADDR_VAR 0 5
7923: PUSH
7924: DOUBLE
7925: LD_INT 1
7927: DEC
7928: ST_TO_ADDR
7929: LD_INT 72
7931: PUSH
7932: FOR_TO
7933: IFFALSE 7991
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7935: LD_VAR 0 5
7939: PPUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 321
7949: PUSH
7950: LD_INT 1
7952: EQUAL
7953: PUSH
7954: LD_VAR 0 5
7958: PPUSH
7959: LD_VAR 0 3
7963: PPUSH
7964: CALL_OW 482
7968: PUSH
7969: LD_INT 1
7971: EQUAL
7972: AND
7973: IFFALSE 7989
// AddComResearch ( lab , i ) ;
7975: LD_VAR 0 2
7979: PPUSH
7980: LD_VAR 0 5
7984: PPUSH
7985: CALL_OW 184
7989: GO 7932
7991: POP
7992: POP
// end ;
7993: LD_VAR 0 4
7997: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7998: LD_INT 0
8000: PPUSH
8001: PPUSH
8002: PPUSH
8003: PPUSH
8004: PPUSH
8005: PPUSH
8006: PPUSH
8007: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8008: LD_ADDR_VAR 0 6
8012: PUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 56
8032: PUSH
8033: EMPTY
8034: LIST
8035: PUSH
8036: LD_INT 24
8038: PUSH
8039: LD_INT 700
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: LD_INT 3
8048: PUSH
8049: LD_INT 60
8051: PUSH
8052: EMPTY
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 25
8064: PUSH
8065: LD_INT 1
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 25
8074: PUSH
8075: LD_INT 5
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 25
8084: PUSH
8085: LD_INT 8
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 25
8094: PUSH
8095: LD_INT 9
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PPUSH
8116: CALL_OW 70
8120: PUSH
8121: LD_EXP 24
8125: PUSH
8126: EMPTY
8127: LIST
8128: DIFF
8129: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8130: LD_ADDR_VAR 0 7
8134: PUSH
8135: LD_VAR 0 2
8139: PPUSH
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 30
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: LD_INT 58
8164: PUSH
8165: EMPTY
8166: LIST
8167: PUSH
8168: LD_INT 24
8170: PUSH
8171: LD_INT 251
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 70
8188: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8189: LD_ADDR_VAR 0 9
8193: PUSH
8194: LD_VAR 0 2
8198: PPUSH
8199: LD_INT 22
8201: PUSH
8202: LD_VAR 0 1
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: LD_INT 30
8216: PUSH
8217: LD_INT 4
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 30
8226: PUSH
8227: LD_INT 5
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 24
8241: PUSH
8242: LD_INT 251
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 70
8258: ST_TO_ADDR
// if barrackList > 0 then
8259: LD_VAR 0 9
8263: PUSH
8264: LD_INT 0
8266: GREATER
8267: IFFALSE 8415
// begin if turretList = 0 then
8269: LD_VAR 0 7
8273: PUSH
8274: LD_INT 0
8276: EQUAL
8277: IFFALSE 8319
// begin if soldiers_list > 0 then
8279: LD_VAR 0 6
8283: PUSH
8284: LD_INT 0
8286: GREATER
8287: IFFALSE 8317
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8289: LD_VAR 0 6
8293: PPUSH
8294: LD_VAR 0 9
8298: PUSH
8299: LD_INT 1
8301: PPUSH
8302: LD_VAR 0 9
8306: PPUSH
8307: CALL_OW 12
8311: ARRAY
8312: PPUSH
8313: CALL_OW 120
// end else
8317: GO 8415
// begin for i in barrackList do
8319: LD_ADDR_VAR 0 4
8323: PUSH
8324: LD_VAR 0 9
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8413
// begin insideUnits = UnitsInside ( i ) ;
8332: LD_ADDR_VAR 0 10
8336: PUSH
8337: LD_VAR 0 4
8341: PPUSH
8342: CALL_OW 313
8346: ST_TO_ADDR
// if insideUnits > 0 then
8347: LD_VAR 0 10
8351: PUSH
8352: LD_INT 0
8354: GREATER
8355: IFFALSE 8379
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8357: LD_VAR 0 10
8361: PUSH
8362: LD_INT 1
8364: ARRAY
8365: PPUSH
8366: LD_VAR 0 7
8370: PUSH
8371: LD_INT 1
8373: ARRAY
8374: PPUSH
8375: CALL_OW 120
// if soldiers_list > 0 then
8379: LD_VAR 0 6
8383: PUSH
8384: LD_INT 0
8386: GREATER
8387: IFFALSE 8411
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8389: LD_VAR 0 6
8393: PUSH
8394: LD_INT 1
8396: ARRAY
8397: PPUSH
8398: LD_VAR 0 7
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PPUSH
8407: CALL_OW 120
// end ;
8411: GO 8329
8413: POP
8414: POP
// end ; end ; end ;
8415: LD_VAR 0 3
8419: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8420: LD_INT 0
8422: PPUSH
8423: PPUSH
8424: PPUSH
8425: PPUSH
8426: PPUSH
8427: PPUSH
// for i = 1 to infantryCount do
8428: LD_ADDR_VAR 0 8
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: LD_VAR 0 5
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8560
// begin uc_side = side ;
8446: LD_ADDR_OWVAR 20
8450: PUSH
8451: LD_VAR 0 1
8455: ST_TO_ADDR
// uc_nation = nation ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_VAR 0 3
8465: ST_TO_ADDR
// hc_class = 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// hc_name =  ;
8474: LD_ADDR_OWVAR 26
8478: PUSH
8479: LD_STRING 
8481: ST_TO_ADDR
// hc_gallery =  ;
8482: LD_ADDR_OWVAR 33
8486: PUSH
8487: LD_STRING 
8489: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8490: LD_INT 0
8492: PPUSH
8493: LD_INT 1
8495: PPUSH
8496: LD_EXP 25
8500: PPUSH
8501: LD_EXP 26
8505: PPUSH
8506: CALL_OW 12
8510: PPUSH
8511: CALL_OW 380
// un = CreateHuman ;
8515: LD_ADDR_VAR 0 10
8519: PUSH
8520: CALL_OW 44
8524: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8525: LD_VAR 0 10
8529: PPUSH
8530: LD_VAR 0 2
8534: PPUSH
8535: LD_INT 0
8537: PPUSH
8538: CALL_OW 49
// defenders_list = defenders_list ^ un ;
8542: LD_ADDR_EXP 32
8546: PUSH
8547: LD_EXP 32
8551: PUSH
8552: LD_VAR 0 10
8556: ADD
8557: ST_TO_ADDR
// end ;
8558: GO 8443
8560: POP
8561: POP
// for i = 1 to vehCount do
8562: LD_ADDR_VAR 0 8
8566: PUSH
8567: DOUBLE
8568: LD_INT 1
8570: DEC
8571: ST_TO_ADDR
8572: LD_VAR 0 6
8576: PUSH
8577: FOR_TO
8578: IFFALSE 8785
// begin uc_side = side ;
8580: LD_ADDR_OWVAR 20
8584: PUSH
8585: LD_VAR 0 1
8589: ST_TO_ADDR
// uc_nation = nation ;
8590: LD_ADDR_OWVAR 21
8594: PUSH
8595: LD_VAR 0 3
8599: ST_TO_ADDR
// vc_Chassis = 22 ;
8600: LD_ADDR_OWVAR 37
8604: PUSH
8605: LD_INT 22
8607: ST_TO_ADDR
// vc_engine = 1 ;
8608: LD_ADDR_OWVAR 39
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// vc_control = 1 ;
8616: LD_ADDR_OWVAR 38
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8624: LD_ADDR_OWVAR 40
8628: PUSH
8629: LD_INT 43
8631: PUSH
8632: LD_INT 44
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 1
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: CALL_OW 12
8649: ARRAY
8650: ST_TO_ADDR
// veh = CreateVehicle ;
8651: LD_ADDR_VAR 0 12
8655: PUSH
8656: CALL_OW 45
8660: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8661: LD_VAR 0 12
8665: PPUSH
8666: LD_VAR 0 2
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8678: LD_ADDR_EXP 32
8682: PUSH
8683: LD_EXP 32
8687: PUSH
8688: LD_VAR 0 12
8692: ADD
8693: ST_TO_ADDR
// hc_class = 3 ;
8694: LD_ADDR_OWVAR 28
8698: PUSH
8699: LD_INT 3
8701: ST_TO_ADDR
// hc_name =  ;
8702: LD_ADDR_OWVAR 26
8706: PUSH
8707: LD_STRING 
8709: ST_TO_ADDR
// hc_gallery =  ;
8710: LD_ADDR_OWVAR 33
8714: PUSH
8715: LD_STRING 
8717: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8718: LD_INT 0
8720: PPUSH
8721: LD_INT 3
8723: PPUSH
8724: LD_EXP 25
8728: PPUSH
8729: LD_EXP 26
8733: PPUSH
8734: CALL_OW 12
8738: PPUSH
8739: CALL_OW 380
// un = CreateHuman ;
8743: LD_ADDR_VAR 0 10
8747: PUSH
8748: CALL_OW 44
8752: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8753: LD_VAR 0 10
8757: PPUSH
8758: LD_VAR 0 12
8762: PPUSH
8763: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8767: LD_ADDR_EXP 32
8771: PUSH
8772: LD_EXP 32
8776: PUSH
8777: LD_VAR 0 10
8781: ADD
8782: ST_TO_ADDR
// end ;
8783: GO 8577
8785: POP
8786: POP
// end ;
8787: LD_VAR 0 7
8791: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
8796: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8797: LD_VAR 0 2
8801: PPUSH
8802: LD_INT 22
8804: PUSH
8805: LD_VAR 0 1
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: PPUSH
8817: CALL_OW 70
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: PUSH
8826: LD_EXP 32
8830: PUSH
8831: LD_INT 0
8833: GREATER
8834: AND
8835: IFFALSE 8864
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8837: LD_EXP 32
8841: PPUSH
8842: LD_INT 65
8844: PPUSH
8845: LD_INT 68
8847: PPUSH
8848: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8852: LD_EXP 32
8856: PPUSH
8857: LD_INT 100
8859: PPUSH
8860: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8864: LD_VAR 0 2
8868: PPUSH
8869: LD_INT 22
8871: PUSH
8872: LD_VAR 0 1
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: EMPTY
8882: LIST
8883: PPUSH
8884: CALL_OW 70
8888: PUSH
8889: LD_INT 0
8891: GREATER
8892: PUSH
8893: LD_EXP 32
8897: PUSH
8898: LD_INT 0
8900: GREATER
8901: AND
8902: IFFALSE 8981
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8904: LD_EXP 32
8908: PPUSH
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_INT 22
8916: PUSH
8917: LD_VAR 0 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: PPUSH
8929: CALL_OW 70
8933: PUSH
8934: LD_INT 1
8936: ARRAY
8937: PPUSH
8938: CALL_OW 250
8942: PPUSH
8943: LD_VAR 0 2
8947: PPUSH
8948: LD_INT 22
8950: PUSH
8951: LD_VAR 0 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: PPUSH
8963: CALL_OW 70
8967: PUSH
8968: LD_INT 1
8970: ARRAY
8971: PPUSH
8972: CALL_OW 251
8976: PPUSH
8977: CALL_OW 114
// end ;
8981: LD_VAR 0 3
8985: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8986: LD_INT 0
8988: PPUSH
8989: PPUSH
8990: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8991: LD_INT 22
8993: PUSH
8994: LD_VAR 0 1
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 21
9005: PUSH
9006: LD_INT 2
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: PUSH
9022: LD_VAR 0 3
9026: LESSEQUAL
9027: IFFALSE 9135
// begin for i = 1 to vehCount do
9029: LD_ADDR_VAR 0 9
9033: PUSH
9034: DOUBLE
9035: LD_INT 1
9037: DEC
9038: ST_TO_ADDR
9039: LD_VAR 0 3
9043: PUSH
9044: FOR_TO
9045: IFFALSE 9133
// begin weapon = weaponTab [ i ] ;
9047: LD_ADDR_VAR 0 10
9051: PUSH
9052: LD_VAR 0 4
9056: PUSH
9057: LD_VAR 0 9
9061: ARRAY
9062: ST_TO_ADDR
// if weapon = 46 then
9063: LD_VAR 0 10
9067: PUSH
9068: LD_INT 46
9070: EQUAL
9071: IFFALSE 9102
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9073: LD_VAR 0 2
9077: PPUSH
9078: LD_INT 24
9080: PPUSH
9081: LD_VAR 0 5
9085: PPUSH
9086: LD_VAR 0 6
9090: PPUSH
9091: LD_VAR 0 10
9095: PPUSH
9096: CALL_OW 185
// end else
9100: GO 9131
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9102: LD_VAR 0 2
9106: PPUSH
9107: LD_VAR 0 7
9111: PPUSH
9112: LD_VAR 0 5
9116: PPUSH
9117: LD_VAR 0 6
9121: PPUSH
9122: LD_VAR 0 10
9126: PPUSH
9127: CALL_OW 185
// end ; end ;
9131: GO 9044
9133: POP
9134: POP
// end ; end ;
9135: LD_VAR 0 8
9139: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9140: LD_INT 0
9142: PPUSH
9143: PPUSH
9144: PPUSH
9145: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9146: LD_ADDR_VAR 0 8
9150: PUSH
9151: LD_INT 22
9153: PUSH
9154: LD_VAR 0 1
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 21
9165: PUSH
9166: LD_INT 2
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 3
9175: PUSH
9176: LD_INT 24
9178: PUSH
9179: LD_INT 650
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: PPUSH
9195: CALL_OW 69
9199: ST_TO_ADDR
// if damageVehicles > 0 then
9200: LD_VAR 0 8
9204: PUSH
9205: LD_INT 0
9207: GREATER
9208: IFFALSE 9229
// ComMoveXY ( damageVehicles , repX , repY ) ;
9210: LD_VAR 0 8
9214: PPUSH
9215: LD_VAR 0 3
9219: PPUSH
9220: LD_VAR 0 4
9224: PPUSH
9225: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9229: LD_VAR 0 8
9233: PPUSH
9234: LD_INT 95
9236: PUSH
9237: LD_VAR 0 2
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 3
9248: PUSH
9249: LD_INT 58
9251: PUSH
9252: EMPTY
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PPUSH
9263: CALL_OW 72
9267: PUSH
9268: LD_INT 0
9270: GREATER
9271: IFFALSE 9338
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9273: LD_ADDR_VAR 0 6
9277: PUSH
9278: LD_VAR 0 8
9282: PPUSH
9283: LD_INT 95
9285: PUSH
9286: LD_VAR 0 2
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 3
9297: PUSH
9298: LD_INT 58
9300: PUSH
9301: EMPTY
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 72
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9336
// ComExitVehicle ( UnitsInside ( i ) ) ;
9320: LD_VAR 0 6
9324: PPUSH
9325: CALL_OW 313
9329: PPUSH
9330: CALL_OW 121
9334: GO 9317
9336: POP
9337: POP
// end ;
9338: LD_VAR 0 5
9342: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9343: LD_INT 0
9345: PPUSH
9346: PPUSH
9347: PPUSH
9348: PPUSH
9349: PPUSH
9350: PPUSH
9351: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9352: LD_ADDR_VAR 0 8
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 21
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 24
9381: PUSH
9382: LD_INT 250
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 3
9391: PUSH
9392: LD_INT 58
9394: PUSH
9395: EMPTY
9396: LIST
9397: PUSH
9398: LD_INT 2
9400: PUSH
9401: LD_INT 34
9403: PUSH
9404: LD_INT 43
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 34
9413: PUSH
9414: LD_INT 44
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 34
9423: PUSH
9424: LD_INT 46
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9453: LD_INT 22
9455: PUSH
9456: LD_VAR 0 1
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 21
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 24
9477: PUSH
9478: LD_INT 1000
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 3
9487: PUSH
9488: LD_INT 58
9490: PUSH
9491: EMPTY
9492: LIST
9493: PUSH
9494: LD_INT 2
9496: PUSH
9497: LD_INT 34
9499: PUSH
9500: LD_INT 43
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 34
9509: PUSH
9510: LD_INT 44
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 34
9519: PUSH
9520: LD_INT 46
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: PPUSH
9544: CALL_OW 69
9548: PUSH
9549: LD_INT 5
9551: PUSH
9552: LD_INT 6
9554: PUSH
9555: LD_INT 7
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: PUSH
9563: LD_OWVAR 67
9567: ARRAY
9568: GREATEREQUAL
9569: IFFALSE 10134
// repeat wait ( 0 0$1 ) ;
9571: LD_INT 35
9573: PPUSH
9574: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9578: LD_ADDR_VAR 0 8
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_VAR 0 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 21
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 24
9607: PUSH
9608: LD_INT 250
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 34
9620: PUSH
9621: LD_INT 43
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 34
9630: PUSH
9631: LD_INT 44
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 34
9640: PUSH
9641: LD_INT 46
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 3
9656: PUSH
9657: LD_INT 58
9659: PUSH
9660: EMPTY
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 69
9678: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9679: LD_INT 22
9681: PUSH
9682: LD_VAR 0 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 95
9693: PUSH
9694: LD_VAR 0 2
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: NOT
9712: PUSH
9713: LD_VAR 0 11
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: AND
9722: IFFALSE 9777
// for i := 1 to wayX do
9724: LD_ADDR_VAR 0 6
9728: PUSH
9729: DOUBLE
9730: LD_INT 1
9732: DEC
9733: ST_TO_ADDR
9734: LD_VAR 0 3
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9775
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9742: LD_VAR 0 8
9746: PPUSH
9747: LD_VAR 0 3
9751: PUSH
9752: LD_VAR 0 6
9756: ARRAY
9757: PPUSH
9758: LD_VAR 0 4
9762: PUSH
9763: LD_VAR 0 6
9767: ARRAY
9768: PPUSH
9769: CALL_OW 114
9773: GO 9739
9775: POP
9776: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9777: LD_INT 22
9779: PUSH
9780: LD_VAR 0 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 95
9791: PUSH
9792: LD_VAR 0 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PPUSH
9805: CALL_OW 69
9809: IFFALSE 10033
// begin seeEnemy = 1 ;
9811: LD_ADDR_VAR 0 11
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
// for j in vehiclesOK do
9819: LD_ADDR_VAR 0 7
9823: PUSH
9824: LD_VAR 0 8
9828: PUSH
9829: FOR_IN
9830: IFFALSE 10031
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9832: LD_ADDR_VAR 0 9
9836: PUSH
9837: LD_INT 81
9839: PUSH
9840: LD_VAR 0 1
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 101
9851: PUSH
9852: LD_INT 1
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PPUSH
9863: CALL_OW 69
9867: PPUSH
9868: LD_VAR 0 7
9872: PPUSH
9873: CALL_OW 74
9877: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9878: LD_ADDR_VAR 0 10
9882: PUSH
9883: LD_INT 81
9885: PUSH
9886: LD_VAR 0 1
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 101
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 2
9907: PUSH
9908: LD_INT 59
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 1
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 21
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: PPUSH
9953: LD_VAR 0 7
9957: PPUSH
9958: CALL_OW 74
9962: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 9
9972: PPUSH
9973: CALL_OW 296
9977: PUSH
9978: LD_INT 8
9980: PLUS
9981: PUSH
9982: LD_VAR 0 7
9986: PPUSH
9987: LD_VAR 0 10
9991: PPUSH
9992: CALL_OW 296
9996: LESS
9997: IFFALSE 10015
// ComAttackUnit ( j , target1 ) else
9999: LD_VAR 0 7
10003: PPUSH
10004: LD_VAR 0 9
10008: PPUSH
10009: CALL_OW 115
10013: GO 10029
// ComAttackUnit ( j , target2 ) ;
10015: LD_VAR 0 7
10019: PPUSH
10020: LD_VAR 0 10
10024: PPUSH
10025: CALL_OW 115
// end ;
10029: GO 9829
10031: POP
10032: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10033: LD_INT 22
10035: PUSH
10036: LD_VAR 0 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 21
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 24
10057: PUSH
10058: LD_INT 250
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: LD_INT 34
10070: PUSH
10071: LD_INT 43
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 34
10080: PUSH
10081: LD_INT 44
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 34
10090: PUSH
10091: LD_INT 46
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 3
10106: PUSH
10107: LD_INT 58
10109: PUSH
10110: EMPTY
10111: LIST
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PPUSH
10124: CALL_OW 69
10128: PUSH
10129: LD_INT 0
10131: EQUAL
10132: IFFALSE 9571
// seeEnemy = 0 ;
10134: LD_ADDR_VAR 0 11
10138: PUSH
10139: LD_INT 0
10141: ST_TO_ADDR
// end ;
10142: LD_VAR 0 5
10146: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10147: LD_INT 0
10149: PPUSH
10150: PPUSH
10151: PPUSH
10152: PPUSH
10153: PPUSH
10154: PPUSH
// repeat wait ( 0 0$1 ) ;
10155: LD_INT 35
10157: PPUSH
10158: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10162: LD_ADDR_VAR 0 7
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_VAR 0 1
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 21
10181: PUSH
10182: LD_INT 2
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 24
10191: PUSH
10192: LD_INT 651
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: PPUSH
10204: CALL_OW 69
10208: ST_TO_ADDR
// for j in vehiclesOK do
10209: LD_ADDR_VAR 0 4
10213: PUSH
10214: LD_VAR 0 7
10218: PUSH
10219: FOR_IN
10220: IFFALSE 10421
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10222: LD_ADDR_VAR 0 5
10226: PUSH
10227: LD_INT 81
10229: PUSH
10230: LD_VAR 0 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 101
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 69
10257: PPUSH
10258: LD_VAR 0 4
10262: PPUSH
10263: CALL_OW 74
10267: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10268: LD_ADDR_VAR 0 6
10272: PUSH
10273: LD_INT 81
10275: PUSH
10276: LD_VAR 0 1
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 101
10287: PUSH
10288: LD_INT 1
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 2
10297: PUSH
10298: LD_INT 59
10300: PUSH
10301: EMPTY
10302: LIST
10303: PUSH
10304: LD_INT 21
10306: PUSH
10307: LD_INT 1
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 21
10316: PUSH
10317: LD_INT 2
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: PPUSH
10338: CALL_OW 69
10342: PPUSH
10343: LD_VAR 0 4
10347: PPUSH
10348: CALL_OW 74
10352: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10353: LD_VAR 0 4
10357: PPUSH
10358: LD_VAR 0 5
10362: PPUSH
10363: CALL_OW 296
10367: PUSH
10368: LD_INT 8
10370: PLUS
10371: PUSH
10372: LD_VAR 0 4
10376: PPUSH
10377: LD_VAR 0 6
10381: PPUSH
10382: CALL_OW 296
10386: LESS
10387: IFFALSE 10405
// ComAttackUnit ( j , target1 ) else
10389: LD_VAR 0 4
10393: PPUSH
10394: LD_VAR 0 5
10398: PPUSH
10399: CALL_OW 115
10403: GO 10419
// ComAttackUnit ( j , target2 ) ;
10405: LD_VAR 0 4
10409: PPUSH
10410: LD_VAR 0 6
10414: PPUSH
10415: CALL_OW 115
// end ;
10419: GO 10219
10421: POP
10422: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10423: LD_INT 22
10425: PUSH
10426: LD_VAR 0 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 24
10447: PUSH
10448: LD_INT 250
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: PPUSH
10460: CALL_OW 69
10464: PUSH
10465: LD_INT 0
10467: EQUAL
10468: IFFALSE 10155
// end ;
10470: LD_VAR 0 2
10474: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10475: LD_INT 0
10477: PPUSH
10478: PPUSH
10479: PPUSH
10480: PPUSH
10481: PPUSH
10482: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10483: LD_ADDR_VAR 0 8
10487: PUSH
10488: LD_VAR 0 2
10492: PPUSH
10493: CALL_OW 313
10497: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10498: LD_ADDR_VAR 0 9
10502: PUSH
10503: LD_VAR 0 3
10507: PPUSH
10508: LD_INT 22
10510: PUSH
10511: LD_VAR 0 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 25
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 24
10532: PUSH
10533: LD_INT 750
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 3
10542: PUSH
10543: LD_INT 54
10545: PUSH
10546: EMPTY
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 70
10563: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10564: LD_ADDR_VAR 0 6
10568: PUSH
10569: LD_VAR 0 3
10573: PPUSH
10574: LD_INT 22
10576: PUSH
10577: LD_VAR 0 1
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 3
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 3
10598: PUSH
10599: LD_INT 24
10601: PUSH
10602: LD_INT 1000
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: PPUSH
10621: CALL_OW 70
10625: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10626: LD_VAR 0 6
10630: NOT
10631: PUSH
10632: LD_INT 22
10634: PUSH
10635: LD_VAR 0 1
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 25
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 24
10656: PUSH
10657: LD_INT 250
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: NOT
10674: AND
10675: IFFALSE 10679
// exit ;
10677: GO 10861
// if buildings_list > 0 and engineerOkInside then
10679: LD_VAR 0 6
10683: PUSH
10684: LD_INT 0
10686: GREATER
10687: PUSH
10688: LD_VAR 0 8
10692: AND
10693: IFFALSE 10704
// ComExitBuilding ( engineerOkInside ) ;
10695: LD_VAR 0 8
10699: PPUSH
10700: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10704: LD_VAR 0 6
10708: PUSH
10709: LD_INT 0
10711: GREATER
10712: PUSH
10713: LD_VAR 0 9
10717: PUSH
10718: LD_INT 0
10720: GREATER
10721: AND
10722: IFFALSE 10742
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10724: LD_VAR 0 9
10728: PPUSH
10729: LD_VAR 0 6
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10742: LD_VAR 0 6
10746: PUSH
10747: LD_INT 0
10749: EQUAL
10750: PUSH
10751: LD_VAR 0 4
10755: PUSH
10756: LD_INT 0
10758: EQUAL
10759: AND
10760: PUSH
10761: LD_VAR 0 9
10765: PUSH
10766: LD_INT 0
10768: GREATER
10769: AND
10770: IFFALSE 10786
// ComEnterUnit ( engineerOkOutside , building ) ;
10772: LD_VAR 0 9
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10786: LD_VAR 0 9
10790: PUSH
10791: LD_INT 0
10793: GREATER
10794: PUSH
10795: LD_VAR 0 6
10799: PUSH
10800: LD_INT 0
10802: EQUAL
10803: AND
10804: PUSH
10805: LD_VAR 0 4
10809: PUSH
10810: LD_INT 0
10812: GREATER
10813: AND
10814: IFFALSE 10861
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10816: LD_VAR 0 9
10820: PPUSH
10821: LD_VAR 0 4
10825: PUSH
10826: LD_INT 1
10828: ARRAY
10829: PPUSH
10830: LD_VAR 0 4
10834: PUSH
10835: LD_INT 2
10837: ARRAY
10838: PPUSH
10839: LD_VAR 0 4
10843: PUSH
10844: LD_INT 3
10846: ARRAY
10847: PPUSH
10848: LD_VAR 0 4
10852: PUSH
10853: LD_INT 4
10855: ARRAY
10856: PPUSH
10857: CALL_OW 145
// end ;
10861: LD_VAR 0 5
10865: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10866: LD_INT 0
10868: PPUSH
10869: PPUSH
10870: PPUSH
10871: PPUSH
10872: PPUSH
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10877: LD_ADDR_VAR 0 6
10881: PUSH
10882: LD_INT 22
10884: PUSH
10885: LD_VAR 0 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 25
10896: PUSH
10897: LD_INT 4
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 23
10906: PUSH
10907: LD_INT 2
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 24
10916: PUSH
10917: LD_INT 251
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PPUSH
10930: CALL_OW 69
10934: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10935: LD_ADDR_VAR 0 7
10939: PUSH
10940: LD_VAR 0 3
10944: PPUSH
10945: LD_INT 22
10947: PUSH
10948: LD_VAR 0 1
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 23
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 50
10979: PUSH
10980: EMPTY
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PPUSH
10989: CALL_OW 70
10993: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10994: LD_ADDR_VAR 0 10
10998: PUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: LD_INT 22
11006: PUSH
11007: LD_VAR 0 1
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 21
11018: PUSH
11019: LD_INT 1
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 3
11028: PUSH
11029: LD_INT 25
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: LD_INT 24
11048: PUSH
11049: LD_INT 750
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 70
11070: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11071: LD_ADDR_VAR 0 11
11075: PUSH
11076: LD_VAR 0 2
11080: PPUSH
11081: LD_INT 22
11083: PUSH
11084: LD_VAR 0 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 21
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 3
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 3
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 3
11122: PUSH
11123: LD_INT 24
11125: PUSH
11126: LD_INT 1000
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11148: LD_VAR 0 10
11152: NOT
11153: PUSH
11154: LD_VAR 0 11
11158: NOT
11159: AND
11160: PUSH
11161: LD_VAR 0 6
11165: NOT
11166: AND
11167: IFFALSE 11171
// exit ;
11169: GO 11405
// if damageUnits > 0 and sci_list > 0 then
11171: LD_VAR 0 10
11175: PUSH
11176: LD_INT 0
11178: GREATER
11179: PUSH
11180: LD_VAR 0 6
11184: PUSH
11185: LD_INT 0
11187: GREATER
11188: AND
11189: IFFALSE 11205
// ComMoveToArea ( damageUnits , healArea ) ;
11191: LD_VAR 0 10
11195: PPUSH
11196: LD_VAR 0 2
11200: PPUSH
11201: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11205: LD_VAR 0 11
11209: PUSH
11210: LD_INT 0
11212: GREATER
11213: PUSH
11214: LD_VAR 0 6
11218: PUSH
11219: LD_INT 0
11221: GREATER
11222: AND
11223: IFFALSE 11234
// ComExitBuilding ( sci_list ) ;
11225: LD_VAR 0 6
11229: PPUSH
11230: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11234: LD_VAR 0 11
11238: PUSH
11239: LD_INT 0
11241: GREATER
11242: PUSH
11243: LD_VAR 0 7
11247: PUSH
11248: LD_INT 0
11250: GREATER
11251: AND
11252: IFFALSE 11272
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11254: LD_VAR 0 7
11258: PPUSH
11259: LD_VAR 0 11
11263: PUSH
11264: LD_INT 1
11266: ARRAY
11267: PPUSH
11268: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11272: LD_VAR 0 10
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: PUSH
11281: LD_VAR 0 11
11285: PUSH
11286: LD_INT 0
11288: EQUAL
11289: AND
11290: PUSH
11291: LD_VAR 0 7
11295: PUSH
11296: LD_INT 0
11298: GREATER
11299: AND
11300: IFFALSE 11405
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11302: LD_ADDR_VAR 0 12
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_VAR 0 1
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 21
11321: PUSH
11322: LD_INT 3
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 8
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 69
11348: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11349: LD_ADDR_VAR 0 13
11353: PUSH
11354: LD_INT 1
11356: PPUSH
11357: LD_VAR 0 12
11361: PPUSH
11362: CALL_OW 12
11366: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11367: LD_VAR 0 7
11371: PPUSH
11372: LD_INT 3
11374: PUSH
11375: LD_INT 60
11377: PUSH
11378: EMPTY
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 72
11389: PPUSH
11390: LD_VAR 0 12
11394: PUSH
11395: LD_VAR 0 13
11399: ARRAY
11400: PPUSH
11401: CALL_OW 120
// end ; end ;
11405: LD_VAR 0 5
11409: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11410: LD_INT 0
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11417: LD_ADDR_VAR 0 6
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_VAR 0 1
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 2
11436: PUSH
11437: LD_INT 30
11439: PUSH
11440: LD_INT 31
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 30
11449: PUSH
11450: LD_INT 32
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 30
11459: PUSH
11460: LD_INT 33
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 30
11469: PUSH
11470: LD_INT 4
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 30
11479: PUSH
11480: LD_INT 5
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PPUSH
11499: CALL_OW 69
11503: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11504: LD_ADDR_VAR 0 7
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_VAR 0 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 21
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 58
11533: PUSH
11534: EMPTY
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: PPUSH
11542: CALL_OW 69
11546: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11547: LD_VAR 0 6
11551: PUSH
11552: LD_INT 0
11554: GREATER
11555: PUSH
11556: LD_VAR 0 7
11560: PUSH
11561: LD_INT 0
11563: GREATER
11564: AND
11565: IFFALSE 11635
// begin for i in turretsList do
11567: LD_ADDR_VAR 0 4
11571: PUSH
11572: LD_VAR 0 6
11576: PUSH
11577: FOR_IN
11578: IFFALSE 11633
// begin for j in enemyBuildings do
11580: LD_ADDR_VAR 0 5
11584: PUSH
11585: LD_VAR 0 7
11589: PUSH
11590: FOR_IN
11591: IFFALSE 11629
// begin if GetDistUnits ( i , j ) < 20 then
11593: LD_VAR 0 4
11597: PPUSH
11598: LD_VAR 0 5
11602: PPUSH
11603: CALL_OW 296
11607: PUSH
11608: LD_INT 20
11610: LESS
11611: IFFALSE 11627
// begin ComAttackUnit ( i , j ) ;
11613: LD_VAR 0 4
11617: PPUSH
11618: LD_VAR 0 5
11622: PPUSH
11623: CALL_OW 115
// end ; end ;
11627: GO 11590
11629: POP
11630: POP
// end ;
11631: GO 11577
11633: POP
11634: POP
// end ; end ;
11635: LD_VAR 0 3
11639: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11640: LD_INT 0
11642: PPUSH
11643: PPUSH
11644: PPUSH
11645: PPUSH
11646: PPUSH
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
11652: PPUSH
// for i = 1 to medicCount do
11653: LD_ADDR_VAR 0 14
11657: PUSH
11658: DOUBLE
11659: LD_INT 1
11661: DEC
11662: ST_TO_ADDR
11663: LD_VAR 0 7
11667: PUSH
11668: FOR_TO
11669: IFFALSE 11751
// begin uc_side = side ;
11671: LD_ADDR_OWVAR 20
11675: PUSH
11676: LD_VAR 0 1
11680: ST_TO_ADDR
// uc_nation = nation ;
11681: LD_ADDR_OWVAR 21
11685: PUSH
11686: LD_VAR 0 2
11690: ST_TO_ADDR
// hc_name =  ;
11691: LD_ADDR_OWVAR 26
11695: PUSH
11696: LD_STRING 
11698: ST_TO_ADDR
// hc_gallery =  ;
11699: LD_ADDR_OWVAR 33
11703: PUSH
11704: LD_STRING 
11706: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11707: LD_INT 0
11709: PPUSH
11710: LD_INT 4
11712: PPUSH
11713: LD_VAR 0 8
11717: PPUSH
11718: CALL_OW 380
// un = CreateHuman ;
11722: LD_ADDR_VAR 0 16
11726: PUSH
11727: CALL_OW 44
11731: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11732: LD_VAR 0 16
11736: PPUSH
11737: LD_VAR 0 9
11741: PPUSH
11742: LD_INT 0
11744: PPUSH
11745: CALL_OW 49
// end ;
11749: GO 11668
11751: POP
11752: POP
// for i = 1 to soldierCount do
11753: LD_ADDR_VAR 0 14
11757: PUSH
11758: DOUBLE
11759: LD_INT 1
11761: DEC
11762: ST_TO_ADDR
11763: LD_VAR 0 3
11767: PUSH
11768: FOR_TO
11769: IFFALSE 11851
// begin uc_side = side ;
11771: LD_ADDR_OWVAR 20
11775: PUSH
11776: LD_VAR 0 1
11780: ST_TO_ADDR
// uc_nation = nation ;
11781: LD_ADDR_OWVAR 21
11785: PUSH
11786: LD_VAR 0 2
11790: ST_TO_ADDR
// hc_name =  ;
11791: LD_ADDR_OWVAR 26
11795: PUSH
11796: LD_STRING 
11798: ST_TO_ADDR
// hc_gallery =  ;
11799: LD_ADDR_OWVAR 33
11803: PUSH
11804: LD_STRING 
11806: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11807: LD_INT 0
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: LD_VAR 0 8
11817: PPUSH
11818: CALL_OW 380
// un = CreateHuman ;
11822: LD_ADDR_VAR 0 16
11826: PUSH
11827: CALL_OW 44
11831: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11832: LD_VAR 0 16
11836: PPUSH
11837: LD_VAR 0 9
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 49
// end ;
11849: GO 11768
11851: POP
11852: POP
// for i = 1 to sniperCount do
11853: LD_ADDR_VAR 0 14
11857: PUSH
11858: DOUBLE
11859: LD_INT 1
11861: DEC
11862: ST_TO_ADDR
11863: LD_VAR 0 4
11867: PUSH
11868: FOR_TO
11869: IFFALSE 11951
// begin uc_side = side ;
11871: LD_ADDR_OWVAR 20
11875: PUSH
11876: LD_VAR 0 1
11880: ST_TO_ADDR
// uc_nation = nation ;
11881: LD_ADDR_OWVAR 21
11885: PUSH
11886: LD_VAR 0 2
11890: ST_TO_ADDR
// hc_name =  ;
11891: LD_ADDR_OWVAR 26
11895: PUSH
11896: LD_STRING 
11898: ST_TO_ADDR
// hc_gallery =  ;
11899: LD_ADDR_OWVAR 33
11903: PUSH
11904: LD_STRING 
11906: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11907: LD_INT 0
11909: PPUSH
11910: LD_INT 5
11912: PPUSH
11913: LD_VAR 0 8
11917: PPUSH
11918: CALL_OW 380
// un = CreateHuman ;
11922: LD_ADDR_VAR 0 16
11926: PUSH
11927: CALL_OW 44
11931: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11932: LD_VAR 0 16
11936: PPUSH
11937: LD_VAR 0 9
11941: PPUSH
11942: LD_INT 0
11944: PPUSH
11945: CALL_OW 49
// end ;
11949: GO 11868
11951: POP
11952: POP
// for i = 1 to bazookCount do
11953: LD_ADDR_VAR 0 14
11957: PUSH
11958: DOUBLE
11959: LD_INT 1
11961: DEC
11962: ST_TO_ADDR
11963: LD_VAR 0 5
11967: PUSH
11968: FOR_TO
11969: IFFALSE 12051
// begin uc_side = side ;
11971: LD_ADDR_OWVAR 20
11975: PUSH
11976: LD_VAR 0 1
11980: ST_TO_ADDR
// uc_nation = nation ;
11981: LD_ADDR_OWVAR 21
11985: PUSH
11986: LD_VAR 0 2
11990: ST_TO_ADDR
// hc_name =  ;
11991: LD_ADDR_OWVAR 26
11995: PUSH
11996: LD_STRING 
11998: ST_TO_ADDR
// hc_gallery =  ;
11999: LD_ADDR_OWVAR 33
12003: PUSH
12004: LD_STRING 
12006: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12007: LD_INT 0
12009: PPUSH
12010: LD_INT 9
12012: PPUSH
12013: LD_VAR 0 8
12017: PPUSH
12018: CALL_OW 380
// un = CreateHuman ;
12022: LD_ADDR_VAR 0 16
12026: PUSH
12027: CALL_OW 44
12031: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12032: LD_VAR 0 16
12036: PPUSH
12037: LD_VAR 0 9
12041: PPUSH
12042: LD_INT 0
12044: PPUSH
12045: CALL_OW 49
// end ;
12049: GO 11968
12051: POP
12052: POP
// for i = 1 to mortalCount do
12053: LD_ADDR_VAR 0 14
12057: PUSH
12058: DOUBLE
12059: LD_INT 1
12061: DEC
12062: ST_TO_ADDR
12063: LD_VAR 0 6
12067: PUSH
12068: FOR_TO
12069: IFFALSE 12151
// begin uc_side = side ;
12071: LD_ADDR_OWVAR 20
12075: PUSH
12076: LD_VAR 0 1
12080: ST_TO_ADDR
// uc_nation = nation ;
12081: LD_ADDR_OWVAR 21
12085: PUSH
12086: LD_VAR 0 2
12090: ST_TO_ADDR
// hc_name =  ;
12091: LD_ADDR_OWVAR 26
12095: PUSH
12096: LD_STRING 
12098: ST_TO_ADDR
// hc_gallery =  ;
12099: LD_ADDR_OWVAR 33
12103: PUSH
12104: LD_STRING 
12106: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12107: LD_INT 0
12109: PPUSH
12110: LD_INT 8
12112: PPUSH
12113: LD_VAR 0 8
12117: PPUSH
12118: CALL_OW 380
// un = CreateHuman ;
12122: LD_ADDR_VAR 0 16
12126: PUSH
12127: CALL_OW 44
12131: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12132: LD_VAR 0 16
12136: PPUSH
12137: LD_VAR 0 9
12141: PPUSH
12142: LD_INT 0
12144: PPUSH
12145: CALL_OW 49
// end ;
12149: GO 12068
12151: POP
12152: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12153: LD_ADDR_VAR 0 19
12157: PUSH
12158: LD_INT 22
12160: PUSH
12161: LD_VAR 0 1
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 2
12172: PUSH
12173: LD_INT 25
12175: PUSH
12176: LD_INT 1
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 25
12185: PUSH
12186: LD_INT 5
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 25
12195: PUSH
12196: LD_INT 8
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 9
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PPUSH
12224: CALL_OW 69
12228: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12229: LD_ADDR_VAR 0 18
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_VAR 0 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 25
12248: PUSH
12249: LD_INT 4
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// for i in medic_list do
12265: LD_ADDR_VAR 0 14
12269: PUSH
12270: LD_VAR 0 18
12274: PUSH
12275: FOR_IN
12276: IFFALSE 12294
// ComMoveToArea ( i , healArea ) ;
12278: LD_VAR 0 14
12282: PPUSH
12283: LD_VAR 0 10
12287: PPUSH
12288: CALL_OW 113
12292: GO 12275
12294: POP
12295: POP
// if strategy = 1 then
12296: LD_VAR 0 12
12300: PUSH
12301: LD_INT 1
12303: EQUAL
12304: IFFALSE 12850
// begin repeat wait ( 0 0$3 ) ;
12306: LD_INT 105
12308: PPUSH
12309: CALL_OW 67
// for i in soldiersOK_list do
12313: LD_ADDR_VAR 0 14
12317: PUSH
12318: LD_VAR 0 19
12322: PUSH
12323: FOR_IN
12324: IFFALSE 12388
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12326: LD_VAR 0 14
12330: PPUSH
12331: LD_INT 91
12333: PPUSH
12334: LD_INT 63
12336: PPUSH
12337: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12341: LD_VAR 0 14
12345: PPUSH
12346: LD_INT 101
12348: PPUSH
12349: LD_INT 53
12351: PPUSH
12352: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12356: LD_VAR 0 14
12360: PPUSH
12361: LD_INT 75
12363: PPUSH
12364: LD_INT 23
12366: PPUSH
12367: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12371: LD_VAR 0 14
12375: PPUSH
12376: LD_INT 78
12378: PPUSH
12379: LD_INT 8
12381: PPUSH
12382: CALL_OW 174
// end ;
12386: GO 12323
12388: POP
12389: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12390: LD_INT 12
12392: PPUSH
12393: LD_INT 22
12395: PUSH
12396: LD_VAR 0 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 70
12409: PUSH
12410: LD_INT 2
12412: GREATER
12413: IFFALSE 12306
// repeat wait ( 0 0$1 ) ;
12415: LD_INT 35
12417: PPUSH
12418: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12422: LD_ADDR_VAR 0 17
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: LD_INT 3
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: LD_INT 550
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 24
12461: PUSH
12462: LD_INT 250
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PPUSH
12478: CALL_OW 69
12482: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12483: LD_ADDR_VAR 0 19
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_VAR 0 1
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: LD_INT 25
12505: PUSH
12506: LD_INT 1
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 25
12515: PUSH
12516: LD_INT 5
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 25
12525: PUSH
12526: LD_INT 8
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 25
12535: PUSH
12536: LD_INT 9
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 24
12552: PUSH
12553: LD_INT 1000
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: ST_TO_ADDR
// if medicCount > 0 then
12570: LD_VAR 0 7
12574: PUSH
12575: LD_INT 0
12577: GREATER
12578: IFFALSE 12652
// begin if damageUnit_list > 0 then
12580: LD_VAR 0 17
12584: PUSH
12585: LD_INT 0
12587: GREATER
12588: IFFALSE 12652
// begin for i in damageUnit_list do
12590: LD_ADDR_VAR 0 14
12594: PUSH
12595: LD_VAR 0 17
12599: PUSH
12600: FOR_IN
12601: IFFALSE 12650
// begin ComMoveToArea ( i , healArea ) ;
12603: LD_VAR 0 14
12607: PPUSH
12608: LD_VAR 0 10
12612: PPUSH
12613: CALL_OW 113
// for j in medic_list do
12617: LD_ADDR_VAR 0 15
12621: PUSH
12622: LD_VAR 0 18
12626: PUSH
12627: FOR_IN
12628: IFFALSE 12646
// AddComHeal ( j , i ) ;
12630: LD_VAR 0 15
12634: PPUSH
12635: LD_VAR 0 14
12639: PPUSH
12640: CALL_OW 188
12644: GO 12627
12646: POP
12647: POP
// end ;
12648: GO 12600
12650: POP
12651: POP
// end ; end ; for i in soldiersOK_list do
12652: LD_ADDR_VAR 0 14
12656: PUSH
12657: LD_VAR 0 19
12661: PUSH
12662: FOR_IN
12663: IFFALSE 12839
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12665: LD_ADDR_VAR 0 22
12669: PUSH
12670: LD_INT 22
12672: PUSH
12673: LD_VAR 0 11
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: PPUSH
12687: LD_VAR 0 14
12691: PPUSH
12692: CALL_OW 74
12696: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12697: LD_ADDR_VAR 0 23
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_VAR 0 11
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: LD_INT 59
12719: PUSH
12720: EMPTY
12721: LIST
12722: PUSH
12723: LD_INT 21
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 21
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: PPUSH
12756: CALL_OW 69
12760: PPUSH
12761: LD_VAR 0 14
12765: PPUSH
12766: CALL_OW 74
12770: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12771: LD_VAR 0 14
12775: PPUSH
12776: LD_VAR 0 22
12780: PPUSH
12781: CALL_OW 296
12785: PUSH
12786: LD_INT 6
12788: PLUS
12789: PUSH
12790: LD_VAR 0 14
12794: PPUSH
12795: LD_VAR 0 23
12799: PPUSH
12800: CALL_OW 296
12804: LESS
12805: IFFALSE 12823
// begin ComAttackUnit ( i , target1 ) ;
12807: LD_VAR 0 14
12811: PPUSH
12812: LD_VAR 0 22
12816: PPUSH
12817: CALL_OW 115
// end else
12821: GO 12837
// begin ComAttackUnit ( i , target2 ) ;
12823: LD_VAR 0 14
12827: PPUSH
12828: LD_VAR 0 23
12832: PPUSH
12833: CALL_OW 115
// end ; end ;
12837: GO 12662
12839: POP
12840: POP
// until soldiersOK_list = [ ] ;
12841: LD_VAR 0 19
12845: PUSH
12846: EMPTY
12847: EQUAL
12848: IFFALSE 12415
// end ; if strategy = 2 then
12850: LD_VAR 0 12
12854: PUSH
12855: LD_INT 2
12857: EQUAL
12858: IFFALSE 13374
// begin repeat wait ( 0 0$1 ) ;
12860: LD_INT 35
12862: PPUSH
12863: CALL_OW 67
// for i in soldiersOK_list do
12867: LD_ADDR_VAR 0 14
12871: PUSH
12872: LD_VAR 0 19
12876: PUSH
12877: FOR_IN
12878: IFFALSE 12912
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12880: LD_VAR 0 14
12884: PPUSH
12885: LD_INT 91
12887: PPUSH
12888: LD_INT 63
12890: PPUSH
12891: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12895: LD_VAR 0 14
12899: PPUSH
12900: LD_INT 75
12902: PPUSH
12903: LD_INT 33
12905: PPUSH
12906: CALL_OW 174
// end ;
12910: GO 12877
12912: POP
12913: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12914: LD_INT 13
12916: PPUSH
12917: LD_INT 22
12919: PUSH
12920: LD_VAR 0 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 70
12933: PUSH
12934: LD_INT 2
12936: GREATER
12937: IFFALSE 12860
// repeat wait ( 0 0$3 ) ;
12939: LD_INT 105
12941: PPUSH
12942: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12946: LD_ADDR_VAR 0 17
12950: PUSH
12951: LD_INT 22
12953: PUSH
12954: LD_VAR 0 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 1
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: LD_INT 24
12971: PUSH
12972: LD_INT 550
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 24
12985: PUSH
12986: LD_INT 250
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PPUSH
13002: CALL_OW 69
13006: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13007: LD_ADDR_VAR 0 19
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_VAR 0 1
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 2
13026: PUSH
13027: LD_INT 25
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 25
13039: PUSH
13040: LD_INT 5
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 25
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 25
13059: PUSH
13060: LD_INT 9
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 24
13076: PUSH
13077: LD_INT 1000
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: ST_TO_ADDR
// if medicCount > 0 then
13094: LD_VAR 0 7
13098: PUSH
13099: LD_INT 0
13101: GREATER
13102: IFFALSE 13176
// begin if damageUnit_list > 0 then
13104: LD_VAR 0 17
13108: PUSH
13109: LD_INT 0
13111: GREATER
13112: IFFALSE 13176
// begin for i in damageUnit_list do
13114: LD_ADDR_VAR 0 14
13118: PUSH
13119: LD_VAR 0 17
13123: PUSH
13124: FOR_IN
13125: IFFALSE 13174
// begin ComMoveToArea ( i , healArea ) ;
13127: LD_VAR 0 14
13131: PPUSH
13132: LD_VAR 0 10
13136: PPUSH
13137: CALL_OW 113
// for j in medic_list do
13141: LD_ADDR_VAR 0 15
13145: PUSH
13146: LD_VAR 0 18
13150: PUSH
13151: FOR_IN
13152: IFFALSE 13170
// AddComHeal ( j , i ) ;
13154: LD_VAR 0 15
13158: PPUSH
13159: LD_VAR 0 14
13163: PPUSH
13164: CALL_OW 188
13168: GO 13151
13170: POP
13171: POP
// end ;
13172: GO 13124
13174: POP
13175: POP
// end ; end ; for i in soldiersOK_list do
13176: LD_ADDR_VAR 0 14
13180: PUSH
13181: LD_VAR 0 19
13185: PUSH
13186: FOR_IN
13187: IFFALSE 13363
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13189: LD_ADDR_VAR 0 22
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_VAR 0 11
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 69
13210: PPUSH
13211: LD_VAR 0 14
13215: PPUSH
13216: CALL_OW 74
13220: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13221: LD_ADDR_VAR 0 23
13225: PUSH
13226: LD_INT 22
13228: PUSH
13229: LD_VAR 0 11
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 59
13243: PUSH
13244: EMPTY
13245: LIST
13246: PUSH
13247: LD_INT 21
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 21
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: PPUSH
13285: LD_VAR 0 14
13289: PPUSH
13290: CALL_OW 74
13294: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13295: LD_VAR 0 14
13299: PPUSH
13300: LD_VAR 0 22
13304: PPUSH
13305: CALL_OW 296
13309: PUSH
13310: LD_INT 6
13312: PLUS
13313: PUSH
13314: LD_VAR 0 14
13318: PPUSH
13319: LD_VAR 0 23
13323: PPUSH
13324: CALL_OW 296
13328: LESS
13329: IFFALSE 13347
// begin ComAttackUnit ( i , target1 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_VAR 0 22
13340: PPUSH
13341: CALL_OW 115
// end else
13345: GO 13361
// begin ComAttackUnit ( i , target2 ) ;
13347: LD_VAR 0 14
13351: PPUSH
13352: LD_VAR 0 23
13356: PPUSH
13357: CALL_OW 115
// end ; end ;
13361: GO 13186
13363: POP
13364: POP
// until soldiersOK_list = [ ] ;
13365: LD_VAR 0 19
13369: PUSH
13370: EMPTY
13371: EQUAL
13372: IFFALSE 12939
// end ; if strategy = 3 then
13374: LD_VAR 0 12
13378: PUSH
13379: LD_INT 3
13381: EQUAL
13382: IFFALSE 13928
// begin repeat wait ( 0 0$3 ) ;
13384: LD_INT 105
13386: PPUSH
13387: CALL_OW 67
// for i in soldiersOK_list do
13391: LD_ADDR_VAR 0 14
13395: PUSH
13396: LD_VAR 0 19
13400: PUSH
13401: FOR_IN
13402: IFFALSE 13466
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13404: LD_VAR 0 14
13408: PPUSH
13409: LD_INT 63
13411: PPUSH
13412: LD_INT 71
13414: PPUSH
13415: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13419: LD_VAR 0 14
13423: PPUSH
13424: LD_INT 35
13426: PPUSH
13427: LD_INT 44
13429: PPUSH
13430: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13434: LD_VAR 0 14
13438: PPUSH
13439: LD_INT 23
13441: PPUSH
13442: LD_INT 18
13444: PPUSH
13445: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13449: LD_VAR 0 14
13453: PPUSH
13454: LD_INT 26
13456: PPUSH
13457: LD_INT 12
13459: PPUSH
13460: CALL_OW 174
// end ;
13464: GO 13401
13466: POP
13467: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13468: LD_INT 14
13470: PPUSH
13471: LD_INT 22
13473: PUSH
13474: LD_VAR 0 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 70
13487: PUSH
13488: LD_INT 2
13490: GREATER
13491: IFFALSE 13384
// repeat wait ( 0 0$1 ) ;
13493: LD_INT 35
13495: PPUSH
13496: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13500: LD_ADDR_VAR 0 17
13504: PUSH
13505: LD_INT 22
13507: PUSH
13508: LD_VAR 0 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 1
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: LD_INT 24
13525: PUSH
13526: LD_INT 550
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 24
13539: PUSH
13540: LD_INT 250
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 69
13560: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13561: LD_ADDR_VAR 0 19
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_VAR 0 1
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: LD_INT 25
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 25
13593: PUSH
13594: LD_INT 5
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 25
13603: PUSH
13604: LD_INT 8
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 25
13613: PUSH
13614: LD_INT 9
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 24
13630: PUSH
13631: LD_INT 1000
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: ST_TO_ADDR
// if medicCount > 0 then
13648: LD_VAR 0 7
13652: PUSH
13653: LD_INT 0
13655: GREATER
13656: IFFALSE 13730
// begin if damageUnit_list > 0 then
13658: LD_VAR 0 17
13662: PUSH
13663: LD_INT 0
13665: GREATER
13666: IFFALSE 13730
// begin for i in damageUnit_list do
13668: LD_ADDR_VAR 0 14
13672: PUSH
13673: LD_VAR 0 17
13677: PUSH
13678: FOR_IN
13679: IFFALSE 13728
// begin ComMoveToArea ( i , healArea ) ;
13681: LD_VAR 0 14
13685: PPUSH
13686: LD_VAR 0 10
13690: PPUSH
13691: CALL_OW 113
// for j in medic_list do
13695: LD_ADDR_VAR 0 15
13699: PUSH
13700: LD_VAR 0 18
13704: PUSH
13705: FOR_IN
13706: IFFALSE 13724
// AddComHeal ( j , i ) ;
13708: LD_VAR 0 15
13712: PPUSH
13713: LD_VAR 0 14
13717: PPUSH
13718: CALL_OW 188
13722: GO 13705
13724: POP
13725: POP
// end ;
13726: GO 13678
13728: POP
13729: POP
// end ; end ; for i in soldiersOK_list do
13730: LD_ADDR_VAR 0 14
13734: PUSH
13735: LD_VAR 0 19
13739: PUSH
13740: FOR_IN
13741: IFFALSE 13917
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13743: LD_ADDR_VAR 0 22
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 11
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: PPUSH
13765: LD_VAR 0 14
13769: PPUSH
13770: CALL_OW 74
13774: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13775: LD_ADDR_VAR 0 23
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_VAR 0 11
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: LD_INT 59
13797: PUSH
13798: EMPTY
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 21
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: PPUSH
13839: LD_VAR 0 14
13843: PPUSH
13844: CALL_OW 74
13848: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13849: LD_VAR 0 14
13853: PPUSH
13854: LD_VAR 0 22
13858: PPUSH
13859: CALL_OW 296
13863: PUSH
13864: LD_INT 6
13866: PLUS
13867: PUSH
13868: LD_VAR 0 14
13872: PPUSH
13873: LD_VAR 0 23
13877: PPUSH
13878: CALL_OW 296
13882: LESS
13883: IFFALSE 13901
// begin ComAttackUnit ( i , target1 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_VAR 0 22
13894: PPUSH
13895: CALL_OW 115
// end else
13899: GO 13915
// begin ComAttackUnit ( i , target2 ) ;
13901: LD_VAR 0 14
13905: PPUSH
13906: LD_VAR 0 23
13910: PPUSH
13911: CALL_OW 115
// end ; end ;
13915: GO 13740
13917: POP
13918: POP
// until soldiersOK_list = [ ] ;
13919: LD_VAR 0 19
13923: PUSH
13924: EMPTY
13925: EQUAL
13926: IFFALSE 13493
// end ; end ;
13928: LD_VAR 0 13
13932: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
13937: PPUSH
13938: PPUSH
13939: PPUSH
13940: PPUSH
13941: PPUSH
13942: PPUSH
13943: PPUSH
13944: PPUSH
13945: PPUSH
// amChassisTab = [ ] ;
13946: LD_ADDR_VAR 0 19
13950: PUSH
13951: EMPTY
13952: ST_TO_ADDR
// arChassisTab = [ ] ;
13953: LD_ADDR_VAR 0 18
13957: PUSH
13958: EMPTY
13959: ST_TO_ADDR
// ruChassisTab = [ ] ;
13960: LD_ADDR_VAR 0 17
13964: PUSH
13965: EMPTY
13966: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13967: LD_INT 35
13969: PPUSH
13970: CALL_OW 67
// if nation = 1 then
13974: LD_VAR 0 5
13978: PUSH
13979: LD_INT 1
13981: EQUAL
13982: IFFALSE 14473
// begin uc_side = side ;
13984: LD_ADDR_OWVAR 20
13988: PUSH
13989: LD_VAR 0 2
13993: ST_TO_ADDR
// uc_nation = nation ;
13994: LD_ADDR_OWVAR 21
13998: PUSH
13999: LD_VAR 0 5
14003: ST_TO_ADDR
// vc_engine = vehengine ;
14004: LD_ADDR_OWVAR 39
14008: PUSH
14009: LD_VAR 0 6
14013: ST_TO_ADDR
// vc_control = vehcontrol ;
14014: LD_ADDR_OWVAR 38
14018: PUSH
14019: LD_VAR 0 7
14023: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14024: LD_ADDR_OWVAR 40
14028: PUSH
14029: LD_VAR 0 10
14033: PUSH
14034: LD_INT 1
14036: PPUSH
14037: LD_VAR 0 10
14041: PPUSH
14042: CALL_OW 12
14046: ARRAY
14047: ST_TO_ADDR
// for j = 1 to AMWeapon do
14048: LD_ADDR_VAR 0 14
14052: PUSH
14053: DOUBLE
14054: LD_INT 1
14056: DEC
14057: ST_TO_ADDR
14058: LD_VAR 0 10
14062: PUSH
14063: FOR_TO
14064: IFFALSE 14365
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14066: LD_VAR 0 10
14070: PUSH
14071: LD_VAR 0 14
14075: ARRAY
14076: PUSH
14077: LD_INT 2
14079: EQUAL
14080: PUSH
14081: LD_VAR 0 10
14085: PUSH
14086: LD_VAR 0 14
14090: ARRAY
14091: PUSH
14092: LD_INT 3
14094: EQUAL
14095: OR
14096: IFFALSE 14149
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14098: LD_ADDR_VAR 0 19
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: LD_INT 3
14111: PUSH
14112: LD_INT 4
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14125: LD_ADDR_OWVAR 37
14129: PUSH
14130: LD_VAR 0 19
14134: PUSH
14135: LD_INT 1
14137: PPUSH
14138: LD_VAR 0 19
14142: PPUSH
14143: CALL_OW 12
14147: ARRAY
14148: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14149: LD_VAR 0 10
14153: PUSH
14154: LD_VAR 0 14
14158: ARRAY
14159: PUSH
14160: LD_INT 4
14162: EQUAL
14163: PUSH
14164: LD_VAR 0 10
14168: PUSH
14169: LD_VAR 0 14
14173: ARRAY
14174: PUSH
14175: LD_INT 5
14177: EQUAL
14178: OR
14179: PUSH
14180: LD_VAR 0 10
14184: PUSH
14185: LD_VAR 0 14
14189: ARRAY
14190: PUSH
14191: LD_INT 9
14193: EQUAL
14194: OR
14195: PUSH
14196: LD_VAR 0 10
14200: PUSH
14201: LD_VAR 0 14
14205: ARRAY
14206: PUSH
14207: LD_INT 11
14209: EQUAL
14210: OR
14211: PUSH
14212: LD_VAR 0 10
14216: PUSH
14217: LD_VAR 0 14
14221: ARRAY
14222: PUSH
14223: LD_INT 7
14225: EQUAL
14226: OR
14227: IFFALSE 14276
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14229: LD_ADDR_VAR 0 19
14233: PUSH
14234: LD_INT 2
14236: PUSH
14237: LD_INT 3
14239: PUSH
14240: LD_INT 4
14242: PUSH
14243: LD_INT 5
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14252: LD_ADDR_OWVAR 37
14256: PUSH
14257: LD_VAR 0 19
14261: PUSH
14262: LD_INT 1
14264: PPUSH
14265: LD_VAR 0 19
14269: PPUSH
14270: CALL_OW 12
14274: ARRAY
14275: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14276: LD_VAR 0 10
14280: PUSH
14281: LD_VAR 0 14
14285: ARRAY
14286: PUSH
14287: LD_INT 8
14289: EQUAL
14290: PUSH
14291: LD_VAR 0 10
14295: PUSH
14296: LD_VAR 0 14
14300: ARRAY
14301: PUSH
14302: LD_INT 6
14304: EQUAL
14305: OR
14306: PUSH
14307: LD_VAR 0 10
14311: PUSH
14312: LD_VAR 0 14
14316: ARRAY
14317: PUSH
14318: LD_INT 10
14320: EQUAL
14321: OR
14322: IFFALSE 14363
// begin amChassisTab = [ 4 , 5 ] ;
14324: LD_ADDR_VAR 0 19
14328: PUSH
14329: LD_INT 4
14331: PUSH
14332: LD_INT 5
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14339: LD_ADDR_OWVAR 37
14343: PUSH
14344: LD_VAR 0 19
14348: PUSH
14349: LD_INT 1
14351: PPUSH
14352: LD_VAR 0 19
14356: PPUSH
14357: CALL_OW 12
14361: ARRAY
14362: ST_TO_ADDR
// end ; end ;
14363: GO 14063
14365: POP
14366: POP
// veh = CreateVehicle ;
14367: LD_ADDR_VAR 0 16
14371: PUSH
14372: CALL_OW 45
14376: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14377: LD_VAR 0 16
14381: PPUSH
14382: LD_VAR 0 1
14386: PPUSH
14387: LD_INT 0
14389: PPUSH
14390: CALL_OW 49
// if vehControl = 1 then
14394: LD_VAR 0 7
14398: PUSH
14399: LD_INT 1
14401: EQUAL
14402: IFFALSE 14459
// begin hc_gallery =  ;
14404: LD_ADDR_OWVAR 33
14408: PUSH
14409: LD_STRING 
14411: ST_TO_ADDR
// hc_name =  ;
14412: LD_ADDR_OWVAR 26
14416: PUSH
14417: LD_STRING 
14419: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14420: LD_INT 0
14422: PPUSH
14423: LD_INT 3
14425: PPUSH
14426: LD_VAR 0 4
14430: PPUSH
14431: CALL_OW 380
// un = CreateHuman ;
14435: LD_ADDR_VAR 0 15
14439: PUSH
14440: CALL_OW 44
14444: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14445: LD_VAR 0 15
14449: PPUSH
14450: LD_VAR 0 16
14454: PPUSH
14455: CALL_OW 52
// end ; i = i + 1 ;
14459: LD_ADDR_VAR 0 13
14463: PUSH
14464: LD_VAR 0 13
14468: PUSH
14469: LD_INT 1
14471: PLUS
14472: ST_TO_ADDR
// end ; if nation = 2 then
14473: LD_VAR 0 5
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: IFFALSE 14905
// begin uc_side = side ;
14483: LD_ADDR_OWVAR 20
14487: PUSH
14488: LD_VAR 0 2
14492: ST_TO_ADDR
// uc_nation = nation ;
14493: LD_ADDR_OWVAR 21
14497: PUSH
14498: LD_VAR 0 5
14502: ST_TO_ADDR
// vc_engine = vehengine ;
14503: LD_ADDR_OWVAR 39
14507: PUSH
14508: LD_VAR 0 6
14512: ST_TO_ADDR
// vc_control = vehcontrol ;
14513: LD_ADDR_OWVAR 38
14517: PUSH
14518: LD_VAR 0 7
14522: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14523: LD_ADDR_OWVAR 40
14527: PUSH
14528: LD_VAR 0 9
14532: PUSH
14533: LD_INT 1
14535: PPUSH
14536: LD_VAR 0 9
14540: PPUSH
14541: CALL_OW 12
14545: ARRAY
14546: ST_TO_ADDR
// for j = 1 to ARWeapons do
14547: LD_ADDR_VAR 0 14
14551: PUSH
14552: DOUBLE
14553: LD_INT 1
14555: DEC
14556: ST_TO_ADDR
14557: LD_VAR 0 9
14561: PUSH
14562: FOR_TO
14563: IFFALSE 14797
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14565: LD_VAR 0 9
14569: PUSH
14570: LD_VAR 0 14
14574: ARRAY
14575: PUSH
14576: LD_INT 24
14578: EQUAL
14579: PUSH
14580: LD_VAR 0 9
14584: PUSH
14585: LD_VAR 0 14
14589: ARRAY
14590: PUSH
14591: LD_INT 22
14593: EQUAL
14594: OR
14595: PUSH
14596: LD_VAR 0 9
14600: PUSH
14601: LD_VAR 0 14
14605: ARRAY
14606: PUSH
14607: LD_INT 23
14609: EQUAL
14610: OR
14611: PUSH
14612: LD_VAR 0 9
14616: PUSH
14617: LD_VAR 0 14
14621: ARRAY
14622: PUSH
14623: LD_INT 30
14625: EQUAL
14626: OR
14627: IFFALSE 14676
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14629: LD_ADDR_VAR 0 18
14633: PUSH
14634: LD_INT 11
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: LD_INT 13
14642: PUSH
14643: LD_INT 14
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14652: LD_ADDR_OWVAR 37
14656: PUSH
14657: LD_VAR 0 18
14661: PUSH
14662: LD_INT 1
14664: PPUSH
14665: LD_VAR 0 18
14669: PPUSH
14670: CALL_OW 12
14674: ARRAY
14675: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14676: LD_VAR 0 9
14680: PUSH
14681: LD_VAR 0 14
14685: ARRAY
14686: PUSH
14687: LD_INT 29
14689: EQUAL
14690: PUSH
14691: LD_VAR 0 9
14695: PUSH
14696: LD_VAR 0 14
14700: ARRAY
14701: PUSH
14702: LD_INT 28
14704: EQUAL
14705: OR
14706: PUSH
14707: LD_VAR 0 9
14711: PUSH
14712: LD_VAR 0 14
14716: ARRAY
14717: PUSH
14718: LD_INT 27
14720: EQUAL
14721: OR
14722: PUSH
14723: LD_VAR 0 9
14727: PUSH
14728: LD_VAR 0 14
14732: ARRAY
14733: PUSH
14734: LD_INT 26
14736: EQUAL
14737: OR
14738: PUSH
14739: LD_VAR 0 9
14743: PUSH
14744: LD_VAR 0 14
14748: ARRAY
14749: PUSH
14750: LD_INT 25
14752: EQUAL
14753: OR
14754: IFFALSE 14795
// begin arChassisTab = [ 13 , 14 ] ;
14756: LD_ADDR_VAR 0 18
14760: PUSH
14761: LD_INT 13
14763: PUSH
14764: LD_INT 14
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14771: LD_ADDR_OWVAR 37
14775: PUSH
14776: LD_VAR 0 18
14780: PUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_VAR 0 18
14788: PPUSH
14789: CALL_OW 12
14793: ARRAY
14794: ST_TO_ADDR
// end ; end ;
14795: GO 14562
14797: POP
14798: POP
// veh = CreateVehicle ;
14799: LD_ADDR_VAR 0 16
14803: PUSH
14804: CALL_OW 45
14808: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14809: LD_VAR 0 16
14813: PPUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: LD_INT 0
14821: PPUSH
14822: CALL_OW 49
// if vehcontrol = 1 then
14826: LD_VAR 0 7
14830: PUSH
14831: LD_INT 1
14833: EQUAL
14834: IFFALSE 14891
// begin hc_gallery =  ;
14836: LD_ADDR_OWVAR 33
14840: PUSH
14841: LD_STRING 
14843: ST_TO_ADDR
// hc_name =  ;
14844: LD_ADDR_OWVAR 26
14848: PUSH
14849: LD_STRING 
14851: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14852: LD_INT 0
14854: PPUSH
14855: LD_INT 3
14857: PPUSH
14858: LD_VAR 0 4
14862: PPUSH
14863: CALL_OW 380
// un = CreateHuman ;
14867: LD_ADDR_VAR 0 15
14871: PUSH
14872: CALL_OW 44
14876: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14877: LD_VAR 0 15
14881: PPUSH
14882: LD_VAR 0 16
14886: PPUSH
14887: CALL_OW 52
// end ; i = i + 1 ;
14891: LD_ADDR_VAR 0 13
14895: PUSH
14896: LD_VAR 0 13
14900: PUSH
14901: LD_INT 1
14903: PLUS
14904: ST_TO_ADDR
// end ; if nation = 3 then
14905: LD_VAR 0 5
14909: PUSH
14910: LD_INT 3
14912: EQUAL
14913: IFFALSE 15305
// begin uc_side = side ;
14915: LD_ADDR_OWVAR 20
14919: PUSH
14920: LD_VAR 0 2
14924: ST_TO_ADDR
// uc_nation = nation ;
14925: LD_ADDR_OWVAR 21
14929: PUSH
14930: LD_VAR 0 5
14934: ST_TO_ADDR
// vc_engine = vehengine ;
14935: LD_ADDR_OWVAR 39
14939: PUSH
14940: LD_VAR 0 6
14944: ST_TO_ADDR
// vc_control = vehcontrol ;
14945: LD_ADDR_OWVAR 38
14949: PUSH
14950: LD_VAR 0 7
14954: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14955: LD_ADDR_OWVAR 40
14959: PUSH
14960: LD_VAR 0 8
14964: PUSH
14965: LD_INT 1
14967: PPUSH
14968: LD_VAR 0 8
14972: PPUSH
14973: CALL_OW 12
14977: ARRAY
14978: ST_TO_ADDR
// for j = 1 to RuWeapons do
14979: LD_ADDR_VAR 0 14
14983: PUSH
14984: DOUBLE
14985: LD_INT 1
14987: DEC
14988: ST_TO_ADDR
14989: LD_VAR 0 8
14993: PUSH
14994: FOR_TO
14995: IFFALSE 15197
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14997: LD_VAR 0 8
15001: PUSH
15002: LD_VAR 0 14
15006: ARRAY
15007: PUSH
15008: LD_INT 42
15010: EQUAL
15011: PUSH
15012: LD_VAR 0 8
15016: PUSH
15017: LD_VAR 0 14
15021: ARRAY
15022: PUSH
15023: LD_INT 43
15025: EQUAL
15026: OR
15027: PUSH
15028: LD_VAR 0 8
15032: PUSH
15033: LD_VAR 0 14
15037: ARRAY
15038: PUSH
15039: LD_INT 44
15041: EQUAL
15042: OR
15043: PUSH
15044: LD_VAR 0 8
15048: PUSH
15049: LD_VAR 0 14
15053: ARRAY
15054: PUSH
15055: LD_INT 45
15057: EQUAL
15058: OR
15059: PUSH
15060: LD_VAR 0 8
15064: PUSH
15065: LD_VAR 0 14
15069: ARRAY
15070: PUSH
15071: LD_INT 49
15073: EQUAL
15074: OR
15075: IFFALSE 15124
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15077: LD_ADDR_VAR 0 17
15081: PUSH
15082: LD_INT 21
15084: PUSH
15085: LD_INT 22
15087: PUSH
15088: LD_INT 23
15090: PUSH
15091: LD_INT 24
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15100: LD_ADDR_OWVAR 37
15104: PUSH
15105: LD_VAR 0 17
15109: PUSH
15110: LD_INT 1
15112: PPUSH
15113: LD_VAR 0 17
15117: PPUSH
15118: CALL_OW 12
15122: ARRAY
15123: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15124: LD_VAR 0 8
15128: PUSH
15129: LD_VAR 0 14
15133: ARRAY
15134: PUSH
15135: LD_INT 46
15137: EQUAL
15138: PUSH
15139: LD_VAR 0 8
15143: PUSH
15144: LD_VAR 0 14
15148: ARRAY
15149: PUSH
15150: LD_INT 47
15152: EQUAL
15153: OR
15154: IFFALSE 15195
// begin ruChassisTab = [ 23 , 24 ] ;
15156: LD_ADDR_VAR 0 17
15160: PUSH
15161: LD_INT 23
15163: PUSH
15164: LD_INT 24
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15171: LD_ADDR_OWVAR 37
15175: PUSH
15176: LD_VAR 0 17
15180: PUSH
15181: LD_INT 1
15183: PPUSH
15184: LD_VAR 0 17
15188: PPUSH
15189: CALL_OW 12
15193: ARRAY
15194: ST_TO_ADDR
// end ; end ;
15195: GO 14994
15197: POP
15198: POP
// veh = CreateVehicle ;
15199: LD_ADDR_VAR 0 16
15203: PUSH
15204: CALL_OW 45
15208: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15209: LD_VAR 0 16
15213: PPUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_INT 0
15221: PPUSH
15222: CALL_OW 49
// if vehcontrol = 1 then
15226: LD_VAR 0 7
15230: PUSH
15231: LD_INT 1
15233: EQUAL
15234: IFFALSE 15291
// begin hc_gallery =  ;
15236: LD_ADDR_OWVAR 33
15240: PUSH
15241: LD_STRING 
15243: ST_TO_ADDR
// hc_name =  ;
15244: LD_ADDR_OWVAR 26
15248: PUSH
15249: LD_STRING 
15251: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15252: LD_INT 0
15254: PPUSH
15255: LD_INT 3
15257: PPUSH
15258: LD_VAR 0 4
15262: PPUSH
15263: CALL_OW 380
// un = CreateHuman ;
15267: LD_ADDR_VAR 0 15
15271: PUSH
15272: CALL_OW 44
15276: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15277: LD_VAR 0 15
15281: PPUSH
15282: LD_VAR 0 16
15286: PPUSH
15287: CALL_OW 52
// end ; i = i + 1 ;
15291: LD_ADDR_VAR 0 13
15295: PUSH
15296: LD_VAR 0 13
15300: PUSH
15301: LD_INT 1
15303: PLUS
15304: ST_TO_ADDR
// end ; until i = vehCount ;
15305: LD_VAR 0 13
15309: PUSH
15310: LD_VAR 0 3
15314: EQUAL
15315: IFFALSE 13967
// repeat wait ( 0 0$1 ) ;
15317: LD_INT 35
15319: PPUSH
15320: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15324: LD_ADDR_VAR 0 20
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_VAR 0 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 21
15343: PUSH
15344: LD_INT 2
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 24
15353: PUSH
15354: LD_INT 250
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: PPUSH
15366: CALL_OW 69
15370: ST_TO_ADDR
// if vehicleOK_list > 0 then
15371: LD_VAR 0 20
15375: PUSH
15376: LD_INT 0
15378: GREATER
15379: IFFALSE 15570
// begin for i in vehicleOK_list do
15381: LD_ADDR_VAR 0 13
15385: PUSH
15386: LD_VAR 0 20
15390: PUSH
15391: FOR_IN
15392: IFFALSE 15568
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15394: LD_ADDR_VAR 0 21
15398: PUSH
15399: LD_INT 22
15401: PUSH
15402: LD_VAR 0 11
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL_OW 69
15415: PPUSH
15416: LD_VAR 0 13
15420: PPUSH
15421: CALL_OW 74
15425: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15426: LD_ADDR_VAR 0 22
15430: PUSH
15431: LD_INT 22
15433: PUSH
15434: LD_VAR 0 11
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: LD_INT 59
15448: PUSH
15449: EMPTY
15450: LIST
15451: PUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 21
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: PPUSH
15490: LD_VAR 0 13
15494: PPUSH
15495: CALL_OW 74
15499: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15500: LD_VAR 0 13
15504: PPUSH
15505: LD_VAR 0 21
15509: PPUSH
15510: CALL_OW 296
15514: PUSH
15515: LD_INT 6
15517: PLUS
15518: PUSH
15519: LD_VAR 0 13
15523: PPUSH
15524: LD_VAR 0 22
15528: PPUSH
15529: CALL_OW 296
15533: LESS
15534: IFFALSE 15552
// begin ComAttackUnit ( i , target1 ) ;
15536: LD_VAR 0 13
15540: PPUSH
15541: LD_VAR 0 21
15545: PPUSH
15546: CALL_OW 115
// end else
15550: GO 15566
// begin ComAttackUnit ( i , target2 ) ;
15552: LD_VAR 0 13
15556: PPUSH
15557: LD_VAR 0 22
15561: PPUSH
15562: CALL_OW 115
// end ; end ;
15566: GO 15391
15568: POP
15569: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15570: LD_INT 22
15572: PUSH
15573: LD_VAR 0 2
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 21
15584: PUSH
15585: LD_INT 2
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 24
15594: PUSH
15595: LD_INT 250
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: PPUSH
15607: CALL_OW 69
15611: PUSH
15612: LD_INT 0
15614: EQUAL
15615: IFFALSE 15317
// end ;
15617: LD_VAR 0 12
15621: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15622: LD_INT 0
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15632: LD_ADDR_VAR 0 7
15636: PUSH
15637: LD_INT 22
15639: PUSH
15640: LD_VAR 0 1
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: LD_INT 3
15654: PUSH
15655: LD_INT 24
15657: PUSH
15658: LD_INT 550
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 24
15671: PUSH
15672: LD_INT 250
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15693: LD_ADDR_VAR 0 8
15697: PUSH
15698: LD_INT 22
15700: PUSH
15701: LD_VAR 0 1
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 2
15712: PUSH
15713: LD_INT 25
15715: PUSH
15716: LD_INT 1
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 25
15725: PUSH
15726: LD_INT 5
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 25
15735: PUSH
15736: LD_INT 8
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 9
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 24
15762: PUSH
15763: LD_INT 1000
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: PPUSH
15775: CALL_OW 69
15779: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15780: LD_ADDR_VAR 0 9
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 25
15799: PUSH
15800: LD_INT 4
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PPUSH
15811: CALL_OW 69
15815: ST_TO_ADDR
// if medicCount > 0 then
15816: LD_VAR 0 9
15820: PUSH
15821: LD_INT 0
15823: GREATER
15824: IFFALSE 15898
// begin if damageUnit_list > 0 then
15826: LD_VAR 0 7
15830: PUSH
15831: LD_INT 0
15833: GREATER
15834: IFFALSE 15898
// begin for i in damageUnit_list do
15836: LD_ADDR_VAR 0 5
15840: PUSH
15841: LD_VAR 0 7
15845: PUSH
15846: FOR_IN
15847: IFFALSE 15896
// begin ComMoveToArea ( i , healArea ) ;
15849: LD_VAR 0 5
15853: PPUSH
15854: LD_VAR 0 2
15858: PPUSH
15859: CALL_OW 113
// for j in medicCount do
15863: LD_ADDR_VAR 0 6
15867: PUSH
15868: LD_VAR 0 9
15872: PUSH
15873: FOR_IN
15874: IFFALSE 15892
// AddComHeal ( j , i ) ;
15876: LD_VAR 0 6
15880: PPUSH
15881: LD_VAR 0 5
15885: PPUSH
15886: CALL_OW 188
15890: GO 15873
15892: POP
15893: POP
// end ;
15894: GO 15846
15896: POP
15897: POP
// end ; end ; if soldiersOK_list > 0 then
15898: LD_VAR 0 8
15902: PUSH
15903: LD_INT 0
15905: GREATER
15906: IFFALSE 16097
// begin for i in soldiersOK_list do
15908: LD_ADDR_VAR 0 5
15912: PUSH
15913: LD_VAR 0 8
15917: PUSH
15918: FOR_IN
15919: IFFALSE 16095
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15921: LD_ADDR_VAR 0 10
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_VAR 0 3
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PPUSH
15943: LD_VAR 0 5
15947: PPUSH
15948: CALL_OW 74
15952: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15953: LD_ADDR_VAR 0 11
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_VAR 0 3
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 2
15972: PUSH
15973: LD_INT 59
15975: PUSH
15976: EMPTY
15977: LIST
15978: PUSH
15979: LD_INT 21
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 21
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: EMPTY
16010: LIST
16011: PPUSH
16012: CALL_OW 69
16016: PPUSH
16017: LD_VAR 0 5
16021: PPUSH
16022: CALL_OW 74
16026: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16027: LD_VAR 0 5
16031: PPUSH
16032: LD_VAR 0 10
16036: PPUSH
16037: CALL_OW 296
16041: PUSH
16042: LD_INT 8
16044: PLUS
16045: PUSH
16046: LD_VAR 0 5
16050: PPUSH
16051: LD_VAR 0 11
16055: PPUSH
16056: CALL_OW 296
16060: LESS
16061: IFFALSE 16079
// begin ComAttackUnit ( i , target1 ) ;
16063: LD_VAR 0 5
16067: PPUSH
16068: LD_VAR 0 10
16072: PPUSH
16073: CALL_OW 115
// end else
16077: GO 16093
// begin ComAttackUnit ( i , target2 ) ;
16079: LD_VAR 0 5
16083: PPUSH
16084: LD_VAR 0 11
16088: PPUSH
16089: CALL_OW 115
// end ; end ;
16093: GO 15918
16095: POP
16096: POP
// end ; end ;
16097: LD_VAR 0 4
16101: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16102: LD_INT 0
16104: PPUSH
16105: PPUSH
// list := [ ] ;
16106: LD_ADDR_VAR 0 5
16110: PUSH
16111: EMPTY
16112: ST_TO_ADDR
// case d of 0 :
16113: LD_VAR 0 3
16117: PUSH
16118: LD_INT 0
16120: DOUBLE
16121: EQUAL
16122: IFTRUE 16126
16124: GO 16259
16126: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16127: LD_ADDR_VAR 0 5
16131: PUSH
16132: LD_VAR 0 1
16136: PUSH
16137: LD_INT 4
16139: MINUS
16140: PUSH
16141: LD_VAR 0 2
16145: PUSH
16146: LD_INT 4
16148: MINUS
16149: PUSH
16150: LD_INT 2
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: PUSH
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 3
16165: MINUS
16166: PUSH
16167: LD_VAR 0 2
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: PUSH
16180: LD_VAR 0 1
16184: PUSH
16185: LD_INT 4
16187: PLUS
16188: PUSH
16189: LD_VAR 0 2
16193: PUSH
16194: LD_INT 4
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: PUSH
16202: LD_VAR 0 1
16206: PUSH
16207: LD_INT 3
16209: PLUS
16210: PUSH
16211: LD_VAR 0 2
16215: PUSH
16216: LD_INT 3
16218: PLUS
16219: PUSH
16220: LD_INT 5
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: PUSH
16228: LD_VAR 0 1
16232: PUSH
16233: LD_VAR 0 2
16237: PUSH
16238: LD_INT 4
16240: PLUS
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// end ; 1 :
16257: GO 16957
16259: LD_INT 1
16261: DOUBLE
16262: EQUAL
16263: IFTRUE 16267
16265: GO 16400
16267: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16268: LD_ADDR_VAR 0 5
16272: PUSH
16273: LD_VAR 0 1
16277: PUSH
16278: LD_VAR 0 2
16282: PUSH
16283: LD_INT 4
16285: MINUS
16286: PUSH
16287: LD_INT 3
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: PUSH
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 3
16302: MINUS
16303: PUSH
16304: LD_VAR 0 2
16308: PUSH
16309: LD_INT 3
16311: MINUS
16312: PUSH
16313: LD_INT 2
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: PUSH
16321: LD_VAR 0 1
16325: PUSH
16326: LD_INT 4
16328: MINUS
16329: PUSH
16330: LD_VAR 0 2
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: PUSH
16343: LD_VAR 0 1
16347: PUSH
16348: LD_VAR 0 2
16352: PUSH
16353: LD_INT 3
16355: PLUS
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: LD_VAR 0 1
16369: PUSH
16370: LD_INT 4
16372: PLUS
16373: PUSH
16374: LD_VAR 0 2
16378: PUSH
16379: LD_INT 4
16381: PLUS
16382: PUSH
16383: LD_INT 5
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: ST_TO_ADDR
// end ; 2 :
16398: GO 16957
16400: LD_INT 2
16402: DOUBLE
16403: EQUAL
16404: IFTRUE 16408
16406: GO 16537
16408: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16409: LD_ADDR_VAR 0 5
16413: PUSH
16414: LD_VAR 0 1
16418: PUSH
16419: LD_VAR 0 2
16423: PUSH
16424: LD_INT 3
16426: MINUS
16427: PUSH
16428: LD_INT 3
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: PUSH
16436: LD_VAR 0 1
16440: PUSH
16441: LD_INT 4
16443: PLUS
16444: PUSH
16445: LD_VAR 0 2
16449: PUSH
16450: LD_INT 4
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: PUSH
16458: LD_VAR 0 1
16462: PUSH
16463: LD_VAR 0 2
16467: PUSH
16468: LD_INT 4
16470: PLUS
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: PUSH
16480: LD_VAR 0 1
16484: PUSH
16485: LD_INT 3
16487: MINUS
16488: PUSH
16489: LD_VAR 0 2
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: LIST
16501: PUSH
16502: LD_VAR 0 1
16506: PUSH
16507: LD_INT 4
16509: MINUS
16510: PUSH
16511: LD_VAR 0 2
16515: PUSH
16516: LD_INT 4
16518: MINUS
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: ST_TO_ADDR
// end ; 3 :
16535: GO 16957
16537: LD_INT 3
16539: DOUBLE
16540: EQUAL
16541: IFTRUE 16545
16543: GO 16678
16545: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16546: LD_ADDR_VAR 0 5
16550: PUSH
16551: LD_VAR 0 1
16555: PUSH
16556: LD_INT 3
16558: PLUS
16559: PUSH
16560: LD_VAR 0 2
16564: PUSH
16565: LD_INT 4
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PUSH
16573: LD_VAR 0 1
16577: PUSH
16578: LD_INT 4
16580: PLUS
16581: PUSH
16582: LD_VAR 0 2
16586: PUSH
16587: LD_INT 4
16589: PLUS
16590: PUSH
16591: LD_INT 5
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: PUSH
16599: LD_VAR 0 1
16603: PUSH
16604: LD_INT 4
16606: MINUS
16607: PUSH
16608: LD_VAR 0 2
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: PUSH
16621: LD_VAR 0 1
16625: PUSH
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 4
16633: MINUS
16634: PUSH
16635: LD_INT 3
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_VAR 0 1
16647: PUSH
16648: LD_INT 3
16650: MINUS
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 3
16659: MINUS
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: ST_TO_ADDR
// end ; 4 :
16676: GO 16957
16678: LD_INT 4
16680: DOUBLE
16681: EQUAL
16682: IFTRUE 16686
16684: GO 16819
16686: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16687: LD_ADDR_VAR 0 5
16691: PUSH
16692: LD_VAR 0 1
16696: PUSH
16697: LD_VAR 0 2
16701: PUSH
16702: LD_INT 4
16704: PLUS
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: PUSH
16714: LD_VAR 0 1
16718: PUSH
16719: LD_INT 3
16721: PLUS
16722: PUSH
16723: LD_VAR 0 2
16727: PUSH
16728: LD_INT 3
16730: PLUS
16731: PUSH
16732: LD_INT 5
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: PUSH
16740: LD_VAR 0 1
16744: PUSH
16745: LD_INT 3
16747: PLUS
16748: PUSH
16749: LD_VAR 0 2
16753: PUSH
16754: LD_INT 4
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: PUSH
16762: LD_VAR 0 1
16766: PUSH
16767: LD_VAR 0 2
16771: PUSH
16772: LD_INT 3
16774: MINUS
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: PUSH
16784: LD_VAR 0 1
16788: PUSH
16789: LD_INT 4
16791: MINUS
16792: PUSH
16793: LD_VAR 0 2
16797: PUSH
16798: LD_INT 4
16800: MINUS
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: ST_TO_ADDR
// end ; 5 :
16817: GO 16957
16819: LD_INT 5
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16956
16827: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16828: LD_ADDR_VAR 0 5
16832: PUSH
16833: LD_VAR 0 1
16837: PUSH
16838: LD_INT 4
16840: MINUS
16841: PUSH
16842: LD_VAR 0 2
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PUSH
16855: LD_VAR 0 1
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: LD_INT 4
16867: MINUS
16868: PUSH
16869: LD_INT 3
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: PUSH
16877: LD_VAR 0 1
16881: PUSH
16882: LD_INT 4
16884: PLUS
16885: PUSH
16886: LD_VAR 0 2
16890: PUSH
16891: LD_INT 4
16893: PLUS
16894: PUSH
16895: LD_INT 5
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: PUSH
16903: LD_VAR 0 1
16907: PUSH
16908: LD_INT 3
16910: PLUS
16911: PUSH
16912: LD_VAR 0 2
16916: PUSH
16917: LD_INT 4
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_VAR 0 1
16929: PUSH
16930: LD_VAR 0 2
16934: PUSH
16935: LD_INT 3
16937: PLUS
16938: PUSH
16939: LD_INT 0
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: ST_TO_ADDR
// end ; end ;
16954: GO 16957
16956: POP
// result := list ;
16957: LD_ADDR_VAR 0 4
16961: PUSH
16962: LD_VAR 0 5
16966: ST_TO_ADDR
// end ; end_of_file
16967: LD_VAR 0 4
16971: RET
// every 1 do var i ;
16972: GO 16974
16974: DISABLE
16975: LD_INT 0
16977: PPUSH
// begin InGameOn ;
16978: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16982: LD_INT 53
16984: PPUSH
16985: LD_INT 40
16987: PPUSH
16988: CALL_OW 84
// wait ( 0 0$5 ) ;
16992: LD_INT 175
16994: PPUSH
16995: CALL_OW 67
// if gammaCommander = 1 then
16999: LD_EXP 12
17003: PUSH
17004: LD_INT 1
17006: EQUAL
17007: IFFALSE 17018
// CenterNowOnUnits ( Donaldson ) ;
17009: LD_EXP 3
17013: PPUSH
17014: CALL_OW 87
// if gammaCommander = 2 then
17018: LD_EXP 12
17022: PUSH
17023: LD_INT 2
17025: EQUAL
17026: IFFALSE 17037
// CenterNowOnUnits ( Brown ) ;
17028: LD_EXP 2
17032: PPUSH
17033: CALL_OW 87
// if gammaCommander = 3 then
17037: LD_EXP 12
17041: PUSH
17042: LD_INT 3
17044: EQUAL
17045: IFFALSE 17056
// CenterNowOnUnits ( Houten ) ;
17047: LD_EXP 13
17051: PPUSH
17052: CALL_OW 87
// if gammaCommander = 1 then
17056: LD_EXP 12
17060: PUSH
17061: LD_INT 1
17063: EQUAL
17064: IFFALSE 17078
// Say ( Donaldson , D1-Don-1 ) ;
17066: LD_EXP 3
17070: PPUSH
17071: LD_STRING D1-Don-1
17073: PPUSH
17074: CALL_OW 88
// if gammaCommander = 2 then
17078: LD_EXP 12
17082: PUSH
17083: LD_INT 2
17085: EQUAL
17086: IFFALSE 17100
// Say ( Brown , D1-Brown-1 ) ;
17088: LD_EXP 2
17092: PPUSH
17093: LD_STRING D1-Brown-1
17095: PPUSH
17096: CALL_OW 88
// if gammaCommander = 3 then
17100: LD_EXP 12
17104: PUSH
17105: LD_INT 3
17107: EQUAL
17108: IFFALSE 17122
// Say ( Houten , D1-VanH-1 ) ;
17110: LD_EXP 13
17114: PPUSH
17115: LD_STRING D1-VanH-1
17117: PPUSH
17118: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17122: LD_EXP 22
17126: PPUSH
17127: LD_STRING D1-Har-1
17129: PPUSH
17130: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
17134: LD_INT 53
17136: PPUSH
17137: LD_INT 40
17139: PPUSH
17140: CALL_OW 84
// if gammaCommander = 1 then
17144: LD_EXP 12
17148: PUSH
17149: LD_INT 1
17151: EQUAL
17152: IFFALSE 17166
// Say ( Donaldson , D1-Don-2 ) ;
17154: LD_EXP 3
17158: PPUSH
17159: LD_STRING D1-Don-2
17161: PPUSH
17162: CALL_OW 88
// if gammaCommander = 2 then
17166: LD_EXP 12
17170: PUSH
17171: LD_INT 2
17173: EQUAL
17174: IFFALSE 17188
// Say ( Brown , D1-Brown-2 ) ;
17176: LD_EXP 2
17180: PPUSH
17181: LD_STRING D1-Brown-2
17183: PPUSH
17184: CALL_OW 88
// if gammaCommander = 3 then
17188: LD_EXP 12
17192: PUSH
17193: LD_INT 3
17195: EQUAL
17196: IFFALSE 17210
// Say ( Houten , D1-VanH-2 ) ;
17198: LD_EXP 13
17202: PPUSH
17203: LD_STRING D1-VanH-2
17205: PPUSH
17206: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17210: LD_EXP 22
17214: PPUSH
17215: LD_STRING D1-Har-2
17217: PPUSH
17218: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17222: LD_INT 22
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 33
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 61
17244: PUSH
17245: EMPTY
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: IFFALSE 17322
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17259: LD_ADDR_VAR 0 1
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 33
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 61
17286: PUSH
17287: EMPTY
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: PUSH
17300: FOR_IN
17301: IFFALSE 17320
// ComAgressiveMove ( i , 70 , 41 ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_INT 70
17310: PPUSH
17311: LD_INT 41
17313: PPUSH
17314: CALL_OW 114
17318: GO 17300
17320: POP
17321: POP
// repeat wait ( 0 0$1 ) ;
17322: LD_INT 35
17324: PPUSH
17325: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17329: LD_ADDR_VAR 0 1
17333: PUSH
17334: LD_INT 22
17336: PUSH
17337: LD_INT 6
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: PUSH
17352: FOR_IN
17353: IFFALSE 17372
// ComAgressiveMove ( i , 54 , 20 ) ;
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_INT 54
17362: PPUSH
17363: LD_INT 20
17365: PPUSH
17366: CALL_OW 114
17370: GO 17352
17372: POP
17373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17374: LD_ADDR_VAR 0 1
17378: PUSH
17379: LD_INT 22
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 25
17391: PUSH
17392: LD_INT 1
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 3
17401: PUSH
17402: LD_INT 54
17404: PUSH
17405: EMPTY
17406: LIST
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: PPUSH
17417: CALL_OW 69
17421: PUSH
17422: FOR_IN
17423: IFFALSE 17457
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_INT 70
17432: PPUSH
17433: LD_INT 41
17435: PPUSH
17436: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17440: LD_VAR 0 1
17444: PPUSH
17445: LD_INT 46
17447: PPUSH
17448: LD_INT 39
17450: PPUSH
17451: CALL_OW 174
// end ;
17455: GO 17422
17457: POP
17458: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17459: LD_ADDR_VAR 0 1
17463: PUSH
17464: LD_INT 22
17466: PUSH
17467: LD_INT 1
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 21
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 3
17486: PUSH
17487: LD_INT 24
17489: PUSH
17490: LD_INT 500
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL_OW 69
17510: PUSH
17511: FOR_IN
17512: IFFALSE 17545
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17514: LD_VAR 0 1
17518: PPUSH
17519: LD_EXP 37
17523: PPUSH
17524: CALL_OW 250
17528: PPUSH
17529: LD_EXP 37
17533: PPUSH
17534: CALL_OW 251
17538: PPUSH
17539: CALL_OW 111
17543: GO 17511
17545: POP
17546: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17547: LD_INT 22
17549: PUSH
17550: LD_INT 6
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 21
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 24
17569: PUSH
17570: LD_INT 250
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 69
17586: PUSH
17587: LD_INT 6
17589: LESS
17590: IFFALSE 17322
// InGameOff ;
17592: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17596: LD_STRING M1
17598: PPUSH
17599: CALL_OW 337
// SaveForQuickRestart ;
17603: CALL_OW 22
// startCutscene = 0 ;
17607: LD_ADDR_EXP 38
17611: PUSH
17612: LD_INT 0
17614: ST_TO_ADDR
// end ;
17615: PPOPN 1
17617: END
// every 1 1$0 do
17618: GO 17620
17620: DISABLE
// begin PrepareSupportFromDelta ;
17621: CALL 3081 0 0
// firstAttack = 1 ;
17625: LD_ADDR_EXP 33
17629: PUSH
17630: LD_INT 1
17632: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17633: LD_EXP 8
17637: PPUSH
17638: CALL_OW 302
17642: IFFALSE 17658
// begin Say ( Gladstone , D2-Glad-1 ) ;
17644: LD_EXP 8
17648: PPUSH
17649: LD_STRING D2-Glad-1
17651: PPUSH
17652: CALL_OW 88
// end else
17656: GO 17760
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17658: LD_INT 4
17660: PPUSH
17661: LD_INT 22
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 21
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 2
17683: PUSH
17684: LD_INT 25
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 25
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 25
17706: PUSH
17707: LD_INT 3
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 25
17716: PUSH
17717: LD_INT 4
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: PPUSH
17736: CALL_OW 70
17740: PUSH
17741: LD_EXP 15
17745: PUSH
17746: EMPTY
17747: LIST
17748: DIFF
17749: PPUSH
17750: LD_STRING D2-Sol1-1
17752: PPUSH
17753: LD_STRING D2-FSol1-1
17755: PPUSH
17756: CALL 6753 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17760: LD_EXP 3
17764: PPUSH
17765: CALL_OW 302
17769: PUSH
17770: LD_EXP 12
17774: PUSH
17775: LD_INT 1
17777: EQUAL
17778: AND
17779: IFFALSE 17793
// Say ( Donaldson , D2-Don-1 ) ;
17781: LD_EXP 3
17785: PPUSH
17786: LD_STRING D2-Don-1
17788: PPUSH
17789: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17793: LD_EXP 2
17797: PPUSH
17798: CALL_OW 302
17802: PUSH
17803: LD_EXP 12
17807: PUSH
17808: LD_INT 2
17810: EQUAL
17811: AND
17812: IFFALSE 17826
// Say ( Brown , D2-Brown-1 ) ;
17814: LD_EXP 2
17818: PPUSH
17819: LD_STRING D2-Brown-1
17821: PPUSH
17822: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17826: LD_EXP 13
17830: PPUSH
17831: CALL_OW 302
17835: PUSH
17836: LD_EXP 12
17840: PUSH
17841: LD_INT 3
17843: EQUAL
17844: AND
17845: IFFALSE 17859
// Say ( Houten , D2-VanH-1 ) ;
17847: LD_EXP 13
17851: PPUSH
17852: LD_STRING D2-VanH-1
17854: PPUSH
17855: CALL_OW 88
// end ;
17859: END
// every 0 0$1 do
17860: GO 17862
17862: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
17863: LD_STRING 07_time
17865: PPUSH
17866: LD_INT 0
17868: PPUSH
17869: CALL_OW 30
17873: PUSH
17874: LD_INT 3
17876: DIV
17877: PPUSH
17878: CALL_OW 67
// PrepareMacmillanSquad ;
17882: CALL 3696 0 0
// CenterNowOnUnits ( JMM ) ;
17886: LD_EXP 1
17890: PPUSH
17891: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17895: LD_EXP 1
17899: PPUSH
17900: LD_STRING D3-JMM-1
17902: PPUSH
17903: CALL_OW 88
// JMMArrive = 1 ;
17907: LD_ADDR_EXP 39
17911: PUSH
17912: LD_INT 1
17914: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17915: LD_EXP 3
17919: PPUSH
17920: CALL_OW 302
17924: PUSH
17925: LD_EXP 12
17929: PUSH
17930: LD_INT 1
17932: EQUAL
17933: AND
17934: IFFALSE 17950
// begin Say ( Donaldson , D3-Don-1 ) ;
17936: LD_EXP 3
17940: PPUSH
17941: LD_STRING D3-Don-1
17943: PPUSH
17944: CALL_OW 88
// end else
17948: GO 18002
// begin if gammaCommander = 1 then
17950: LD_EXP 12
17954: PUSH
17955: LD_INT 1
17957: EQUAL
17958: IFFALSE 18002
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17960: LD_EXP 11
17964: PPUSH
17965: LD_INT 26
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PPUSH
17975: CALL_OW 72
17979: PPUSH
17980: LD_STRING D3-Sol1-1
17982: PPUSH
17983: LD_STRING D3-Sol1-1
17985: PPUSH
17986: CALL 6753 0 3
// Say ( JMM , D3-JMM-2 ) ;
17990: LD_EXP 1
17994: PPUSH
17995: LD_STRING D3-JMM-2
17997: PPUSH
17998: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
18002: LD_EXP 2
18006: PPUSH
18007: CALL_OW 302
18011: PUSH
18012: LD_EXP 12
18016: PUSH
18017: LD_INT 2
18019: EQUAL
18020: AND
18021: IFFALSE 18037
// begin Say ( Brown , D3-Brown-1 ) ;
18023: LD_EXP 2
18027: PPUSH
18028: LD_STRING D3-Brown-1
18030: PPUSH
18031: CALL_OW 88
// end else
18035: GO 18089
// begin if gammaCommander = 2 then
18037: LD_EXP 12
18041: PUSH
18042: LD_INT 2
18044: EQUAL
18045: IFFALSE 18089
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
18047: LD_EXP 11
18051: PPUSH
18052: LD_INT 26
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 72
18066: PPUSH
18067: LD_STRING D3-Sol1-1a
18069: PPUSH
18070: LD_STRING D3-Sol1-1a
18072: PPUSH
18073: CALL 6753 0 3
// Say ( JMM , D3-JMM-2 ) ;
18077: LD_EXP 1
18081: PPUSH
18082: LD_STRING D3-JMM-2
18084: PPUSH
18085: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
18089: LD_EXP 13
18093: PPUSH
18094: CALL_OW 302
18098: PUSH
18099: LD_EXP 12
18103: PUSH
18104: LD_INT 3
18106: EQUAL
18107: AND
18108: IFFALSE 18124
// begin Say ( Houten , D3-VanH-1 ) ;
18110: LD_EXP 13
18114: PPUSH
18115: LD_STRING D3-VanH-1
18117: PPUSH
18118: CALL_OW 88
// end else
18122: GO 18176
// begin if gammaCommander = 3 then
18124: LD_EXP 12
18128: PUSH
18129: LD_INT 3
18131: EQUAL
18132: IFFALSE 18176
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
18134: LD_EXP 11
18138: PPUSH
18139: LD_INT 26
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 72
18153: PPUSH
18154: LD_STRING D3-Sol1-1b
18156: PPUSH
18157: LD_STRING D3-Sol1-1b
18159: PPUSH
18160: CALL 6753 0 3
// Say ( JMM , D3-JMM-2 ) ;
18164: LD_EXP 1
18168: PPUSH
18169: LD_STRING D3-JMM-2
18171: PPUSH
18172: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
18176: LD_EXP 15
18180: PPUSH
18181: CALL_OW 302
18185: IFFALSE 18213
// begin Say ( Joan , D3a-Joan-1 ) ;
18187: LD_EXP 15
18191: PPUSH
18192: LD_STRING D3a-Joan-1
18194: PPUSH
18195: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18199: LD_EXP 1
18203: PPUSH
18204: LD_STRING D3a-JMM-1
18206: PPUSH
18207: CALL_OW 88
// end else
18211: GO 18666
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18213: LD_EXP 3
18217: PPUSH
18218: CALL_OW 302
18222: PUSH
18223: LD_EXP 12
18227: PUSH
18228: LD_INT 1
18230: EQUAL
18231: AND
18232: PUSH
18233: LD_STRING 06_JoanStatus_1
18235: PPUSH
18236: LD_INT 0
18238: PPUSH
18239: CALL_OW 30
18243: PUSH
18244: LD_INT 1
18246: EQUAL
18247: AND
18248: IFFALSE 18299
// begin Say ( Donaldson , D3b-Don-1 ) ;
18250: LD_EXP 3
18254: PPUSH
18255: LD_STRING D3b-Don-1
18257: PPUSH
18258: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
18262: LD_EXP 1
18266: PPUSH
18267: LD_STRING D3b-JMM-2
18269: PPUSH
18270: CALL_OW 88
// if IsOK ( Lisa ) then
18274: LD_EXP 6
18278: PPUSH
18279: CALL_OW 302
18283: IFFALSE 18297
// Say ( Lisa , D3b-Lisa-2 ) ;
18285: LD_EXP 6
18289: PPUSH
18290: LD_STRING D3b-Lisa-2
18292: PPUSH
18293: CALL_OW 88
// end else
18297: GO 18364
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18299: LD_EXP 11
18303: PPUSH
18304: LD_INT 26
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PPUSH
18314: CALL_OW 72
18318: PPUSH
18319: LD_STRING D3b-Sol1-1
18321: PPUSH
18322: LD_STRING D3b-Sol1-1
18324: PPUSH
18325: CALL 6753 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18329: LD_EXP 1
18333: PPUSH
18334: LD_STRING D3b-JMM-2
18336: PPUSH
18337: CALL_OW 88
// if IsOK ( Lisa ) then
18341: LD_EXP 6
18345: PPUSH
18346: CALL_OW 302
18350: IFFALSE 18364
// Say ( Lisa , D3b-Lisa-2 ) ;
18352: LD_EXP 6
18356: PPUSH
18357: LD_STRING D3b-Lisa-2
18359: PPUSH
18360: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18364: LD_EXP 2
18368: PPUSH
18369: CALL_OW 302
18373: PUSH
18374: LD_EXP 12
18378: PUSH
18379: LD_INT 2
18381: EQUAL
18382: AND
18383: PUSH
18384: LD_STRING 06_JoanStatus_1
18386: PPUSH
18387: LD_INT 0
18389: PPUSH
18390: CALL_OW 30
18394: PUSH
18395: LD_INT 1
18397: EQUAL
18398: AND
18399: IFFALSE 18450
// begin Say ( Brown , D3b-Brown-1 ) ;
18401: LD_EXP 2
18405: PPUSH
18406: LD_STRING D3b-Brown-1
18408: PPUSH
18409: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
18413: LD_EXP 1
18417: PPUSH
18418: LD_STRING D3b-JMM-2
18420: PPUSH
18421: CALL_OW 88
// if IsOK ( Lisa ) then
18425: LD_EXP 6
18429: PPUSH
18430: CALL_OW 302
18434: IFFALSE 18448
// Say ( Lisa , D3b-Lisa-2 ) ;
18436: LD_EXP 6
18440: PPUSH
18441: LD_STRING D3b-Lisa-2
18443: PPUSH
18444: CALL_OW 88
// end else
18448: GO 18515
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18450: LD_EXP 11
18454: PPUSH
18455: LD_INT 26
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PPUSH
18465: CALL_OW 72
18469: PPUSH
18470: LD_STRING D3b-Sol1-1
18472: PPUSH
18473: LD_STRING D3b-Sol1-1
18475: PPUSH
18476: CALL 6753 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18480: LD_EXP 1
18484: PPUSH
18485: LD_STRING D3b-JMM-2
18487: PPUSH
18488: CALL_OW 88
// if IsOK ( Lisa ) then
18492: LD_EXP 6
18496: PPUSH
18497: CALL_OW 302
18501: IFFALSE 18515
// Say ( Lisa , D3b-Lisa-2 ) ;
18503: LD_EXP 6
18507: PPUSH
18508: LD_STRING D3b-Lisa-2
18510: PPUSH
18511: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18515: LD_EXP 13
18519: PPUSH
18520: CALL_OW 302
18524: PUSH
18525: LD_EXP 12
18529: PUSH
18530: LD_INT 3
18532: EQUAL
18533: AND
18534: PUSH
18535: LD_STRING 06_JoanStatus_1
18537: PPUSH
18538: LD_INT 0
18540: PPUSH
18541: CALL_OW 30
18545: PUSH
18546: LD_INT 1
18548: EQUAL
18549: AND
18550: IFFALSE 18601
// begin Say ( Houten , D3b-VanH-1 ) ;
18552: LD_EXP 13
18556: PPUSH
18557: LD_STRING D3b-VanH-1
18559: PPUSH
18560: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
18564: LD_EXP 1
18568: PPUSH
18569: LD_STRING D3b-JMM-2
18571: PPUSH
18572: CALL_OW 88
// if IsOK ( Lisa ) then
18576: LD_EXP 6
18580: PPUSH
18581: CALL_OW 302
18585: IFFALSE 18599
// Say ( Lisa , D3b-Lisa-2 ) ;
18587: LD_EXP 6
18591: PPUSH
18592: LD_STRING D3b-Lisa-2
18594: PPUSH
18595: CALL_OW 88
// end else
18599: GO 18666
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18601: LD_EXP 11
18605: PPUSH
18606: LD_INT 26
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PPUSH
18616: CALL_OW 72
18620: PPUSH
18621: LD_STRING D3b-Sol1-1
18623: PPUSH
18624: LD_STRING D3b-Sol1-1
18626: PPUSH
18627: CALL 6753 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18631: LD_EXP 1
18635: PPUSH
18636: LD_STRING D3b-JMM-2
18638: PPUSH
18639: CALL_OW 88
// if IsOK ( Lisa ) then
18643: LD_EXP 6
18647: PPUSH
18648: CALL_OW 302
18652: IFFALSE 18666
// Say ( Lisa , D3b-Lisa-2 ) ;
18654: LD_EXP 6
18658: PPUSH
18659: LD_STRING D3b-Lisa-2
18661: PPUSH
18662: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18666: LD_INT 22
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 21
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 26
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 25
18711: PUSH
18712: LD_INT 2
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 25
18721: PUSH
18722: LD_INT 3
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 25
18731: PUSH
18732: LD_INT 4
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: PUSH
18757: LD_EXP 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: DIFF
18765: PPUSH
18766: LD_STRING DCa-Sol1-1
18768: PPUSH
18769: LD_STRING DCa-Sol1-1
18771: PPUSH
18772: CALL 6753 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18776: LD_EXP 1
18780: PPUSH
18781: LD_STRING DCb-JMM-1
18783: PPUSH
18784: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18788: LD_INT 22
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 21
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 26
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: LD_INT 25
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 25
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 25
18843: PUSH
18844: LD_INT 3
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 25
18853: PUSH
18854: LD_INT 4
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: PPUSH
18874: CALL_OW 69
18878: PUSH
18879: LD_EXP 1
18883: PUSH
18884: EMPTY
18885: LIST
18886: DIFF
18887: PPUSH
18888: LD_STRING DCb-Sol1-1
18890: PPUSH
18891: LD_STRING DCb-Sol1-1
18893: PPUSH
18894: CALL 6753 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18898: LD_EXP 1
18902: PPUSH
18903: LD_STRING DCb-JMM-2
18905: PPUSH
18906: CALL_OW 88
// secondAttack = 1 ;
18910: LD_ADDR_EXP 34
18914: PUSH
18915: LD_INT 1
18917: ST_TO_ADDR
// end ;
18918: END
// every 0 0$01 trigger JMMArrive = 1 do
18919: LD_EXP 39
18923: PUSH
18924: LD_INT 1
18926: EQUAL
18927: IFFALSE 19007
18929: GO 18931
18931: DISABLE
// begin wait ( 3 3$0 ) ;
18932: LD_INT 6300
18934: PPUSH
18935: CALL_OW 67
// DialogueOn ;
18939: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18943: LD_EXP 23
18947: PPUSH
18948: LD_STRING D4-Pow-1
18950: PPUSH
18951: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18955: LD_EXP 1
18959: PPUSH
18960: LD_STRING D4-JMM-1
18962: PPUSH
18963: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18967: LD_EXP 23
18971: PPUSH
18972: LD_STRING D4-Pow-2
18974: PPUSH
18975: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18979: LD_EXP 1
18983: PPUSH
18984: LD_STRING D4-JMM-2
18986: PPUSH
18987: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18991: LD_EXP 23
18995: PPUSH
18996: LD_STRING D4-Pow-3
18998: PPUSH
18999: CALL_OW 94
// DialogueOff ;
19003: CALL_OW 7
// end ;
19007: END
// every 0 0$01 trigger JMMArrive = 1 do
19008: LD_EXP 39
19012: PUSH
19013: LD_INT 1
19015: EQUAL
19016: IFFALSE 19048
19018: GO 19020
19020: DISABLE
// begin wait ( 8 8$0 ) ;
19021: LD_INT 16800
19023: PPUSH
19024: CALL_OW 67
// DialogueOn ;
19028: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
19032: LD_EXP 23
19036: PPUSH
19037: LD_STRING D4a-Pow-1
19039: PPUSH
19040: CALL_OW 94
// DialogueOff ;
19044: CALL_OW 7
// end ;
19048: END
// every 0 0$01 trigger JMMArrive = 1 do
19049: LD_EXP 39
19053: PUSH
19054: LD_INT 1
19056: EQUAL
19057: IFFALSE 19102
19059: GO 19061
19061: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
19062: LD_INT 21000
19064: PUSH
19065: LD_INT 25200
19067: PUSH
19068: LD_INT 31500
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: LD_OWVAR 67
19080: ARRAY
19081: PPUSH
19082: CALL_OW 67
// PrepareSikorsky ;
19086: CALL 5337 0 0
// SikorskyArrive = 1 ;
19090: LD_ADDR_EXP 18
19094: PUSH
19095: LD_INT 1
19097: ST_TO_ADDR
// PrepareSikorskyArmy ;
19098: CALL 5477 0 0
// end ;
19102: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
19103: LD_EXP 17
19107: PPUSH
19108: LD_INT 5
19110: PPUSH
19111: CALL_OW 308
19115: IFFALSE 19307
19117: GO 19119
19119: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
19120: LD_EXP 17
19124: PPUSH
19125: CALL_OW 87
// DialogueOn ;
19129: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
19133: LD_EXP 16
19137: PPUSH
19138: LD_STRING D5-Sik-1
19140: PPUSH
19141: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
19145: LD_EXP 1
19149: PPUSH
19150: LD_STRING D5-JMM-1a
19152: PPUSH
19153: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
19157: LD_EXP 16
19161: PPUSH
19162: LD_STRING D5-Sik-2
19164: PPUSH
19165: CALL_OW 88
// case query ( QSikorski ) of 1 :
19169: LD_STRING QSikorski
19171: PPUSH
19172: CALL_OW 97
19176: PUSH
19177: LD_INT 1
19179: DOUBLE
19180: EQUAL
19181: IFTRUE 19185
19183: GO 19208
19185: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
19186: LD_EXP 16
19190: PPUSH
19191: LD_STRING D5a-Sik-1
19193: PPUSH
19194: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
19198: LD_ADDR_EXP 19
19202: PUSH
19203: LD_INT 2100
19205: ST_TO_ADDR
// end ; 2 :
19206: GO 19295
19208: LD_INT 2
19210: DOUBLE
19211: EQUAL
19212: IFTRUE 19216
19214: GO 19239
19216: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
19217: LD_EXP 16
19221: PPUSH
19222: LD_STRING D5b-Sik-1
19224: PPUSH
19225: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19229: LD_ADDR_EXP 19
19233: PUSH
19234: LD_INT 10500
19236: ST_TO_ADDR
// end ; 3 :
19237: GO 19295
19239: LD_INT 3
19241: DOUBLE
19242: EQUAL
19243: IFTRUE 19247
19245: GO 19294
19247: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
19248: LD_EXP 16
19252: PPUSH
19253: LD_STRING D5c-Sik-1
19255: PPUSH
19256: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
19260: LD_EXP 1
19264: PPUSH
19265: LD_STRING D5c-JMM-1
19267: PPUSH
19268: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
19272: LD_EXP 16
19276: PPUSH
19277: LD_STRING D5c-Sik-2
19279: PPUSH
19280: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19284: LD_ADDR_EXP 19
19288: PUSH
19289: LD_INT 10500
19291: ST_TO_ADDR
// end ; end ;
19292: GO 19295
19294: POP
// DialogueOff ;
19295: CALL_OW 7
// timerStatus = 1 ;
19299: LD_ADDR_EXP 35
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// end ;
19307: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19308: LD_EXP 19
19312: PUSH
19313: LD_INT 35
19315: LESS
19316: IFFALSE 19364
19318: GO 19320
19320: DISABLE
// begin timerStatus = 0 ;
19321: LD_ADDR_EXP 35
19325: PUSH
19326: LD_INT 0
19328: ST_TO_ADDR
// DialogueOn ;
19329: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19333: LD_EXP 16
19337: PPUSH
19338: LD_STRING D6-Sik-1
19340: PPUSH
19341: CALL_OW 88
// DialogueOff ;
19345: CALL_OW 7
// SikorskyAI = 1 ;
19349: LD_ADDR_EXP 20
19353: PUSH
19354: LD_INT 1
19356: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19357: LD_STRING M2
19359: PPUSH
19360: CALL_OW 337
// end ;
19364: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19365: LD_EXP 17
19369: PPUSH
19370: LD_INT 18
19372: PPUSH
19373: CALL_OW 308
19377: IFFALSE 19461
19379: GO 19381
19381: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19382: LD_EXP 16
19386: PPUSH
19387: LD_STRING D7-Sik-1
19389: PPUSH
19390: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19394: LD_EXP 1
19398: PPUSH
19399: LD_INT 24
19401: PPUSH
19402: CALL_OW 308
19406: PUSH
19407: LD_EXP 1
19411: PPUSH
19412: CALL_OW 310
19416: OR
19417: IFFALSE 19441
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19419: LD_EXP 16
19423: PPUSH
19424: LD_STRING D7a-Sik-1
19426: PPUSH
19427: CALL_OW 88
// SikorskyStatus = 1 ;
19431: LD_ADDR_EXP 21
19435: PUSH
19436: LD_INT 1
19438: ST_TO_ADDR
// end else
19439: GO 19461
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19441: LD_EXP 16
19445: PPUSH
19446: LD_STRING D7b-Sik-1
19448: PPUSH
19449: CALL_OW 88
// SikorskyStatus = 2 ;
19453: LD_ADDR_EXP 21
19457: PUSH
19458: LD_INT 2
19460: ST_TO_ADDR
// end ; end ;
19461: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19462: LD_EXP 36
19466: PUSH
19467: LD_INT 1
19469: EQUAL
19470: IFFALSE 19579
19472: GO 19474
19474: DISABLE
19475: LD_INT 0
19477: PPUSH
// begin enable ;
19478: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19479: LD_ADDR_VAR 0 1
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_INT 3
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PPUSH
19494: CALL_OW 69
19498: PUSH
19499: FOR_IN
19500: IFFALSE 19527
// if IsInArea ( i , RussianEscape ) then
19502: LD_VAR 0 1
19506: PPUSH
19507: LD_INT 22
19509: PPUSH
19510: CALL_OW 308
19514: IFFALSE 19525
// RemoveUnit ( i ) ;
19516: LD_VAR 0 1
19520: PPUSH
19521: CALL_OW 64
19525: GO 19499
19527: POP
19528: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19529: LD_ADDR_VAR 0 1
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_INT 6
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PPUSH
19544: CALL_OW 69
19548: PUSH
19549: FOR_IN
19550: IFFALSE 19577
// if IsInArea ( i , RussianEscape ) then
19552: LD_VAR 0 1
19556: PPUSH
19557: LD_INT 22
19559: PPUSH
19560: CALL_OW 308
19564: IFFALSE 19575
// RemoveUnit ( i ) ;
19566: LD_VAR 0 1
19570: PPUSH
19571: CALL_OW 64
19575: GO 19549
19577: POP
19578: POP
// end ; end_of_file
19579: PPOPN 1
19581: END
// on BuildingComplete ( building ) do var tmp , un ;
19582: LD_INT 0
19584: PPUSH
19585: PPUSH
// begin if GetSide ( building ) = 3 then
19586: LD_VAR 0 1
19590: PPUSH
19591: CALL_OW 255
19595: PUSH
19596: LD_INT 3
19598: EQUAL
19599: IFFALSE 20086
// begin if GetBType ( building ) = b_depot then
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 266
19610: PUSH
19611: LD_INT 0
19613: EQUAL
19614: IFFALSE 19682
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 274
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: LD_INT 5000
19631: PPUSH
19632: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19636: LD_VAR 0 1
19640: PPUSH
19641: CALL_OW 274
19645: PPUSH
19646: LD_INT 2
19648: PPUSH
19649: LD_INT 5000
19651: PPUSH
19652: CALL_OW 277
// SetBName ( building , konev ) ;
19656: LD_VAR 0 1
19660: PPUSH
19661: LD_STRING konev
19663: PPUSH
19664: CALL_OW 500
// ruDepot = building ;
19668: LD_ADDR_EXP 28
19672: PUSH
19673: LD_VAR 0 1
19677: ST_TO_ADDR
// BuildRussianBase ;
19678: CALL 7358 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 266
19691: PUSH
19692: LD_INT 0
19694: EQUAL
19695: PUSH
19696: LD_VAR 0 1
19700: PPUSH
19701: CALL_OW 266
19705: PUSH
19706: LD_INT 2
19708: EQUAL
19709: OR
19710: PUSH
19711: LD_VAR 0 1
19715: PPUSH
19716: CALL_OW 266
19720: PUSH
19721: LD_INT 4
19723: EQUAL
19724: OR
19725: IFFALSE 19736
// ComUpgrade ( building ) ;
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 146
// if GetBType ( building ) = b_lab then
19736: LD_VAR 0 1
19740: PPUSH
19741: CALL_OW 266
19745: PUSH
19746: LD_INT 6
19748: EQUAL
19749: IFFALSE 19800
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19751: LD_VAR 0 1
19755: PPUSH
19756: LD_INT 10
19758: PPUSH
19759: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19763: LD_VAR 0 1
19767: PPUSH
19768: LD_INT 12
19770: PPUSH
19771: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19775: LD_INT 3
19777: PPUSH
19778: LD_VAR 0 1
19782: PPUSH
19783: LD_INT 3
19785: PPUSH
19786: CALL 7913 0 3
// ruLab = building ;
19790: LD_ADDR_EXP 29
19794: PUSH
19795: LD_VAR 0 1
19799: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19800: LD_VAR 0 1
19804: PPUSH
19805: CALL_OW 266
19809: PUSH
19810: LD_INT 32
19812: EQUAL
19813: IFFALSE 19931
// begin uc_side = 3 ;
19815: LD_ADDR_OWVAR 20
19819: PUSH
19820: LD_INT 3
19822: ST_TO_ADDR
// uc_nation = 3 ;
19823: LD_ADDR_OWVAR 21
19827: PUSH
19828: LD_INT 3
19830: ST_TO_ADDR
// hc_gallery =  ;
19831: LD_ADDR_OWVAR 33
19835: PUSH
19836: LD_STRING 
19838: ST_TO_ADDR
// hc_name =  ;
19839: LD_ADDR_OWVAR 26
19843: PUSH
19844: LD_STRING 
19846: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19847: LD_INT 0
19849: PPUSH
19850: LD_INT 1
19852: PPUSH
19853: LD_EXP 25
19857: PPUSH
19858: LD_EXP 26
19862: PPUSH
19863: CALL_OW 12
19867: PPUSH
19868: CALL_OW 380
// un = CreateHuman ;
19872: LD_ADDR_VAR 0 3
19876: PUSH
19877: CALL_OW 44
19881: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19882: LD_VAR 0 3
19886: PPUSH
19887: LD_VAR 0 1
19891: PPUSH
19892: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19896: LD_VAR 0 1
19900: PPUSH
19901: LD_INT 43
19903: PUSH
19904: LD_INT 44
19906: PUSH
19907: LD_INT 46
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PPUSH
19918: LD_INT 3
19920: PPUSH
19921: CALL_OW 12
19925: ARRAY
19926: PPUSH
19927: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 266
19940: PUSH
19941: LD_INT 33
19943: EQUAL
19944: IFFALSE 19981
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19946: LD_VAR 0 1
19950: PPUSH
19951: LD_INT 43
19953: PUSH
19954: LD_INT 44
19956: PUSH
19957: LD_INT 46
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: PPUSH
19968: LD_INT 3
19970: PPUSH
19971: CALL_OW 12
19975: ARRAY
19976: PPUSH
19977: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19981: LD_VAR 0 1
19985: PPUSH
19986: CALL_OW 266
19990: PUSH
19991: LD_INT 24
19993: EQUAL
19994: IFFALSE 20004
// russianAI = 1 ;
19996: LD_ADDR_EXP 27
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20004: LD_EXP 31
20008: PUSH
20009: LD_INT 0
20011: GREATER
20012: IFFALSE 20086
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20014: LD_ADDR_EXP 31
20018: PUSH
20019: LD_EXP 31
20023: PPUSH
20024: LD_INT 1
20026: PPUSH
20027: CALL_OW 3
20031: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20032: LD_ADDR_EXP 31
20036: PUSH
20037: LD_EXP 31
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: CALL_OW 3
20049: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20050: LD_ADDR_EXP 31
20054: PUSH
20055: LD_EXP 31
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 3
20067: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20068: LD_ADDR_EXP 31
20072: PUSH
20073: LD_EXP 31
20077: PPUSH
20078: LD_INT 1
20080: PPUSH
20081: CALL_OW 3
20085: ST_TO_ADDR
// end ; end ; end ;
20086: PPOPN 3
20088: END
// on UpgradeComplete ( building ) do var i ;
20089: LD_INT 0
20091: PPUSH
// begin if GetSide ( building ) = 3 then
20092: LD_VAR 0 1
20096: PPUSH
20097: CALL_OW 255
20101: PUSH
20102: LD_INT 3
20104: EQUAL
20105: IFFALSE 20286
// begin if GetBType ( building ) = b_factory then
20107: LD_VAR 0 1
20111: PPUSH
20112: CALL_OW 266
20116: PUSH
20117: LD_INT 3
20119: EQUAL
20120: IFFALSE 20187
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20122: LD_ADDR_VAR 0 2
20126: PUSH
20127: LD_INT 22
20129: PUSH
20130: LD_INT 3
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 25
20139: PUSH
20140: LD_INT 3
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: PUSH
20156: FOR_IN
20157: IFFALSE 20175
// ComEnterUnit ( i , building ) ;
20159: LD_VAR 0 2
20163: PPUSH
20164: LD_VAR 0 1
20168: PPUSH
20169: CALL_OW 120
20173: GO 20156
20175: POP
20176: POP
// ruFab = building ;
20177: LD_ADDR_EXP 30
20181: PUSH
20182: LD_VAR 0 1
20186: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
20187: LD_VAR 0 1
20191: PPUSH
20192: CALL_OW 266
20196: PUSH
20197: LD_INT 8
20199: EQUAL
20200: IFFALSE 20257
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20202: LD_ADDR_VAR 0 2
20206: PUSH
20207: LD_INT 22
20209: PUSH
20210: LD_INT 3
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 25
20219: PUSH
20220: LD_INT 4
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 69
20235: PUSH
20236: FOR_IN
20237: IFFALSE 20255
// ComEnterUnit ( i , building ) ;
20239: LD_VAR 0 2
20243: PPUSH
20244: LD_VAR 0 1
20248: PPUSH
20249: CALL_OW 120
20253: GO 20236
20255: POP
20256: POP
// if GetBType ( building ) = b_warehouse then
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 266
20266: PUSH
20267: LD_INT 1
20269: EQUAL
20270: IFFALSE 20286
// begin ComEnterUnit ( Borodin , building ) ;
20272: LD_EXP 24
20276: PPUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL_OW 120
// end ; end ; end ;
20286: PPOPN 2
20288: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
20289: LD_VAR 0 1
20293: PPUSH
20294: CALL_OW 247
20298: PUSH
20299: LD_INT 2
20301: EQUAL
20302: PUSH
20303: LD_VAR 0 1
20307: PPUSH
20308: CALL_OW 263
20312: PUSH
20313: LD_INT 3
20315: EQUAL
20316: AND
20317: PUSH
20318: LD_EXP 41
20322: PUSH
20323: LD_INT 0
20325: EQUAL
20326: AND
20327: IFFALSE 20445
// begin varEvent1 = 1 ;
20329: LD_ADDR_EXP 41
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20337: LD_VAR 0 1
20341: PPUSH
20342: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20346: LD_INT 22
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 21
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: LD_INT 25
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 25
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 25
20391: PUSH
20392: LD_INT 3
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 25
20401: PUSH
20402: LD_INT 4
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: PPUSH
20421: CALL_OW 69
20425: PUSH
20426: LD_EXP 1
20430: PUSH
20431: EMPTY
20432: LIST
20433: DIFF
20434: PPUSH
20435: LD_STRING DC-Sol1-1
20437: PPUSH
20438: LD_STRING DC-FSol1-1
20440: PPUSH
20441: CALL 6753 0 3
// end ; end ;
20445: PPOPN 1
20447: END
// on UnitDestroyed ( unit ) do var i ;
20448: LD_INT 0
20450: PPUSH
// begin if GetSide ( unit ) = 3 then
20451: LD_VAR 0 1
20455: PPUSH
20456: CALL_OW 255
20460: PUSH
20461: LD_INT 3
20463: EQUAL
20464: IFFALSE 21234
// begin if GetType ( unit ) = unit_building then
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL_OW 247
20475: PUSH
20476: LD_INT 3
20478: EQUAL
20479: IFFALSE 21171
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20481: LD_VAR 0 1
20485: PPUSH
20486: CALL_OW 266
20490: PUSH
20491: LD_INT 31
20493: EQUAL
20494: PUSH
20495: LD_VAR 0 1
20499: PPUSH
20500: CALL_OW 266
20504: PUSH
20505: LD_INT 32
20507: EQUAL
20508: OR
20509: PUSH
20510: LD_VAR 0 1
20514: PPUSH
20515: CALL_OW 266
20519: PUSH
20520: LD_INT 36
20522: EQUAL
20523: OR
20524: PUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 266
20534: PUSH
20535: LD_INT 0
20537: EQUAL
20538: OR
20539: PUSH
20540: LD_VAR 0 1
20544: PPUSH
20545: CALL_OW 266
20549: PUSH
20550: LD_INT 24
20552: EQUAL
20553: OR
20554: PUSH
20555: LD_VAR 0 1
20559: PPUSH
20560: CALL_OW 266
20564: PUSH
20565: LD_INT 17
20567: EQUAL
20568: OR
20569: PUSH
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL_OW 266
20579: PUSH
20580: LD_INT 25
20582: EQUAL
20583: OR
20584: PUSH
20585: LD_VAR 0 1
20589: PPUSH
20590: CALL_OW 266
20594: PUSH
20595: LD_INT 19
20597: EQUAL
20598: OR
20599: PUSH
20600: LD_VAR 0 1
20604: PPUSH
20605: CALL_OW 266
20609: PUSH
20610: LD_INT 20
20612: EQUAL
20613: OR
20614: PUSH
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 266
20624: PUSH
20625: LD_INT 18
20627: EQUAL
20628: OR
20629: PUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: CALL_OW 266
20639: PUSH
20640: LD_INT 21
20642: EQUAL
20643: OR
20644: PUSH
20645: LD_VAR 0 1
20649: PPUSH
20650: CALL_OW 266
20654: PUSH
20655: LD_INT 23
20657: EQUAL
20658: OR
20659: PUSH
20660: LD_VAR 0 1
20664: PPUSH
20665: CALL_OW 266
20669: PUSH
20670: LD_INT 16
20672: EQUAL
20673: OR
20674: PUSH
20675: LD_VAR 0 1
20679: PPUSH
20680: CALL_OW 266
20684: PUSH
20685: LD_INT 6
20687: EQUAL
20688: OR
20689: PUSH
20690: LD_VAR 0 1
20694: PPUSH
20695: CALL_OW 266
20699: PUSH
20700: LD_INT 29
20702: EQUAL
20703: OR
20704: PUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 266
20714: PUSH
20715: LD_INT 26
20717: EQUAL
20718: OR
20719: PUSH
20720: LD_VAR 0 1
20724: PPUSH
20725: CALL_OW 266
20729: PUSH
20730: LD_INT 30
20732: EQUAL
20733: OR
20734: PUSH
20735: LD_VAR 0 1
20739: PPUSH
20740: CALL_OW 266
20744: PUSH
20745: LD_INT 28
20747: EQUAL
20748: OR
20749: PUSH
20750: LD_VAR 0 1
20754: PPUSH
20755: CALL_OW 266
20759: PUSH
20760: LD_INT 27
20762: EQUAL
20763: OR
20764: PUSH
20765: LD_VAR 0 1
20769: PPUSH
20770: CALL_OW 266
20774: PUSH
20775: LD_INT 33
20777: EQUAL
20778: OR
20779: PUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 266
20789: PUSH
20790: LD_INT 2
20792: EQUAL
20793: OR
20794: PUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 266
20804: PUSH
20805: LD_INT 4
20807: EQUAL
20808: OR
20809: IFFALSE 20895
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20811: LD_ADDR_EXP 31
20815: PUSH
20816: LD_EXP 31
20820: PUSH
20821: LD_VAR 0 1
20825: PPUSH
20826: CALL_OW 266
20830: ADD
20831: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20832: LD_ADDR_EXP 31
20836: PUSH
20837: LD_EXP 31
20841: PUSH
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 250
20851: ADD
20852: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20853: LD_ADDR_EXP 31
20857: PUSH
20858: LD_EXP 31
20862: PUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 251
20872: ADD
20873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20874: LD_ADDR_EXP 31
20878: PUSH
20879: LD_EXP 31
20883: PUSH
20884: LD_VAR 0 1
20888: PPUSH
20889: CALL_OW 254
20893: ADD
20894: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20895: LD_VAR 0 1
20899: PPUSH
20900: CALL_OW 266
20904: PUSH
20905: LD_INT 1
20907: EQUAL
20908: IFFALSE 20987
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20910: LD_ADDR_EXP 31
20914: PUSH
20915: LD_EXP 31
20919: PUSH
20920: LD_INT 0
20922: ADD
20923: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20924: LD_ADDR_EXP 31
20928: PUSH
20929: LD_EXP 31
20933: PUSH
20934: LD_VAR 0 1
20938: PPUSH
20939: CALL_OW 250
20943: ADD
20944: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20945: LD_ADDR_EXP 31
20949: PUSH
20950: LD_EXP 31
20954: PUSH
20955: LD_VAR 0 1
20959: PPUSH
20960: CALL_OW 251
20964: ADD
20965: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20966: LD_ADDR_EXP 31
20970: PUSH
20971: LD_EXP 31
20975: PUSH
20976: LD_VAR 0 1
20980: PPUSH
20981: CALL_OW 254
20985: ADD
20986: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 266
20996: PUSH
20997: LD_INT 3
20999: EQUAL
21000: IFFALSE 21079
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21002: LD_ADDR_EXP 31
21006: PUSH
21007: LD_EXP 31
21011: PUSH
21012: LD_INT 2
21014: ADD
21015: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21016: LD_ADDR_EXP 31
21020: PUSH
21021: LD_EXP 31
21025: PUSH
21026: LD_VAR 0 1
21030: PPUSH
21031: CALL_OW 250
21035: ADD
21036: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21037: LD_ADDR_EXP 31
21041: PUSH
21042: LD_EXP 31
21046: PUSH
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 251
21056: ADD
21057: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21058: LD_ADDR_EXP 31
21062: PUSH
21063: LD_EXP 31
21067: PUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 254
21077: ADD
21078: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL_OW 266
21088: PUSH
21089: LD_INT 5
21091: EQUAL
21092: IFFALSE 21171
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21094: LD_ADDR_EXP 31
21098: PUSH
21099: LD_EXP 31
21103: PUSH
21104: LD_INT 4
21106: ADD
21107: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21108: LD_ADDR_EXP 31
21112: PUSH
21113: LD_EXP 31
21117: PUSH
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 250
21127: ADD
21128: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21129: LD_ADDR_EXP 31
21133: PUSH
21134: LD_EXP 31
21138: PUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 251
21148: ADD
21149: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21150: LD_ADDR_EXP 31
21154: PUSH
21155: LD_EXP 31
21159: PUSH
21160: LD_VAR 0 1
21164: PPUSH
21165: CALL_OW 254
21169: ADD
21170: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 247
21180: PUSH
21181: LD_INT 1
21183: EQUAL
21184: IFFALSE 21234
// begin for i in defenders_list do
21186: LD_ADDR_VAR 0 2
21190: PUSH
21191: LD_EXP 32
21195: PUSH
21196: FOR_IN
21197: IFFALSE 21232
// if i = unit then
21199: LD_VAR 0 2
21203: PUSH
21204: LD_VAR 0 1
21208: EQUAL
21209: IFFALSE 21230
// defenders_list = defenders_list diff [ unit ] ;
21211: LD_ADDR_EXP 32
21215: PUSH
21216: LD_EXP 32
21220: PUSH
21221: LD_VAR 0 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: DIFF
21229: ST_TO_ADDR
21230: GO 21196
21232: POP
21233: POP
// end ; end ; end ; end_of_file
21234: PPOPN 2
21236: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21237: GO 21239
21239: DISABLE
21240: LD_INT 0
21242: PPUSH
// begin enemyWayX = [ ] ;
21243: LD_ADDR_EXP 45
21247: PUSH
21248: EMPTY
21249: ST_TO_ADDR
// enemyWayY = [ ] ;
21250: LD_ADDR_EXP 46
21254: PUSH
21255: EMPTY
21256: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
21257: LD_ADDR_VAR 0 1
21261: PUSH
21262: LD_INT 1
21264: PPUSH
21265: LD_INT 3
21267: PPUSH
21268: CALL_OW 12
21272: ST_TO_ADDR
// if rnd = 1 then
21273: LD_VAR 0 1
21277: PUSH
21278: LD_INT 1
21280: EQUAL
21281: IFFALSE 21321
// begin enemyWayX = [ 73 , 46 , 29 ] ;
21283: LD_ADDR_EXP 45
21287: PUSH
21288: LD_INT 73
21290: PUSH
21291: LD_INT 46
21293: PUSH
21294: LD_INT 29
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21302: LD_ADDR_EXP 46
21306: PUSH
21307: LD_INT 71
21309: PUSH
21310: LD_INT 43
21312: PUSH
21313: LD_INT 29
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: ST_TO_ADDR
// end ; if rnd = 2 then
21321: LD_VAR 0 1
21325: PUSH
21326: LD_INT 2
21328: EQUAL
21329: IFFALSE 21353
// begin enemyWayX = [ 64 ] ;
21331: LD_ADDR_EXP 45
21335: PUSH
21336: LD_INT 64
21338: PUSH
21339: EMPTY
21340: LIST
21341: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21342: LD_ADDR_EXP 46
21346: PUSH
21347: LD_INT 43
21349: PUSH
21350: EMPTY
21351: LIST
21352: ST_TO_ADDR
// end ; if rnd = 3 then
21353: LD_VAR 0 1
21357: PUSH
21358: LD_INT 3
21360: EQUAL
21361: IFFALSE 21385
// begin enemyWayX = [ 80 ] ;
21363: LD_ADDR_EXP 45
21367: PUSH
21368: LD_INT 80
21370: PUSH
21371: EMPTY
21372: LIST
21373: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21374: LD_ADDR_EXP 46
21378: PUSH
21379: LD_INT 28
21381: PUSH
21382: EMPTY
21383: LIST
21384: ST_TO_ADDR
// end ; enable ;
21385: ENABLE
// end ;
21386: PPOPN 1
21388: END
// every 0 0$1 do
21389: GO 21391
21391: DISABLE
// begin enable ;
21392: ENABLE
// if escapeAvalaible = 0 then
21393: LD_EXP 36
21397: PUSH
21398: LD_INT 0
21400: EQUAL
21401: IFFALSE 21413
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21403: LD_INT 3
21405: PPUSH
21406: LD_INT 6
21408: PPUSH
21409: CALL 7998 0 2
// if escapeAvalaible = 0 then
21413: LD_EXP 36
21417: PUSH
21418: LD_INT 0
21420: EQUAL
21421: IFFALSE 21433
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21423: LD_INT 1
21425: PPUSH
21426: LD_INT 24
21428: PPUSH
21429: CALL 8792 0 2
// if russianAI = 1 then
21433: LD_EXP 27
21437: PUSH
21438: LD_INT 1
21440: EQUAL
21441: IFFALSE 21511
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21443: LD_INT 3
21445: PPUSH
21446: LD_INT 7
21448: PPUSH
21449: LD_INT 6
21451: PPUSH
21452: LD_EXP 29
21456: PPUSH
21457: CALL 10866 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21461: LD_INT 3
21463: PPUSH
21464: LD_EXP 28
21468: PPUSH
21469: LD_INT 6
21471: PPUSH
21472: LD_EXP 31
21476: PPUSH
21477: CALL 10475 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21481: LD_INT 3
21483: PPUSH
21484: LD_INT 26
21486: PPUSH
21487: LD_EXP 45
21491: PPUSH
21492: LD_EXP 46
21496: PPUSH
21497: CALL 9343 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21501: LD_INT 3
21503: PPUSH
21504: LD_INT 1
21506: PPUSH
21507: CALL 11410 0 2
// end ; if SikorskyArrive = 1 then
21511: LD_EXP 18
21515: PUSH
21516: LD_INT 1
21518: EQUAL
21519: IFFALSE 21537
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21521: LD_INT 3
21523: PPUSH
21524: LD_INT 10
21526: PPUSH
21527: LD_INT 53
21529: PPUSH
21530: LD_INT 59
21532: PPUSH
21533: CALL 9140 0 4
// end ;
21537: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21538: LD_EXP 27
21542: PUSH
21543: LD_INT 1
21545: EQUAL
21546: IFFALSE 21822
21548: GO 21550
21550: DISABLE
21551: LD_INT 0
21553: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21554: LD_ADDR_VAR 0 1
21558: PUSH
21559: LD_INT 22
21561: PUSH
21562: LD_INT 3
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 21
21571: PUSH
21572: LD_INT 3
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 30
21581: PUSH
21582: LD_INT 32
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 3
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: LD_INT 35
21597: PUSH
21598: LD_INT 43
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 35
21607: PUSH
21608: LD_INT 44
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 35
21617: PUSH
21618: LD_INT 46
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: PPUSH
21641: CALL_OW 69
21645: PUSH
21646: FOR_IN
21647: IFFALSE 21686
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21649: LD_VAR 0 1
21653: PPUSH
21654: LD_INT 43
21656: PUSH
21657: LD_INT 44
21659: PUSH
21660: LD_INT 46
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: PPUSH
21671: LD_INT 3
21673: PPUSH
21674: CALL_OW 12
21678: ARRAY
21679: PPUSH
21680: CALL_OW 431
21684: GO 21646
21686: POP
21687: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21688: LD_ADDR_VAR 0 1
21692: PUSH
21693: LD_INT 22
21695: PUSH
21696: LD_INT 3
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 21
21705: PUSH
21706: LD_INT 3
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 30
21715: PUSH
21716: LD_INT 33
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 3
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 35
21731: PUSH
21732: LD_INT 43
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 35
21741: PUSH
21742: LD_INT 44
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 35
21751: PUSH
21752: LD_INT 46
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 69
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21820
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21783: LD_VAR 0 1
21787: PPUSH
21788: LD_INT 43
21790: PUSH
21791: LD_INT 44
21793: PUSH
21794: LD_INT 46
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: PPUSH
21805: LD_INT 3
21807: PPUSH
21808: CALL_OW 12
21812: ARRAY
21813: PPUSH
21814: CALL_OW 431
21818: GO 21780
21820: POP
21821: POP
// end ;
21822: PPOPN 1
21824: END
// every 0 0$1 trigger SikorskyAI = 1 do
21825: LD_EXP 20
21829: PUSH
21830: LD_INT 1
21832: EQUAL
21833: IFFALSE 21868
21835: GO 21837
21837: DISABLE
// begin enable ;
21838: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21839: LD_INT 4
21841: PPUSH
21842: LD_INT 10
21844: PPUSH
21845: LD_INT 93
21847: PPUSH
21848: LD_INT 93
21850: PPUSH
21851: CALL 9140 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21855: LD_INT 4
21857: PPUSH
21858: LD_INT 11
21860: PPUSH
21861: LD_INT 3
21863: PPUSH
21864: CALL 15622 0 3
// end ;
21868: END
// every 0 0$1 trigger SikorskyAI = 1 do
21869: LD_EXP 20
21873: PUSH
21874: LD_INT 1
21876: EQUAL
21877: IFFALSE 21889
21879: GO 21881
21881: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21882: LD_INT 4
21884: PPUSH
21885: CALL 10147 0 1
21889: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21890: LD_EXP 27
21894: PUSH
21895: LD_INT 1
21897: EQUAL
21898: PUSH
21899: LD_EXP 30
21903: PPUSH
21904: CALL_OW 302
21908: AND
21909: PUSH
21910: LD_EXP 30
21914: PPUSH
21915: CALL_OW 255
21919: PUSH
21920: LD_INT 3
21922: EQUAL
21923: AND
21924: PUSH
21925: LD_INT 22
21927: PUSH
21928: LD_INT 3
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 21
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 33
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: PPUSH
21960: CALL_OW 69
21964: PUSH
21965: LD_INT 0
21967: EQUAL
21968: AND
21969: IFFALSE 22203
21971: GO 21973
21973: DISABLE
// begin enable ;
21974: ENABLE
// if Difficulty = 1 then
21975: LD_OWVAR 67
21979: PUSH
21980: LD_INT 1
21982: EQUAL
21983: IFFALSE 22051
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21985: LD_INT 3
21987: PPUSH
21988: LD_EXP 30
21992: PPUSH
21993: LD_INT 5
21995: PPUSH
21996: LD_INT 8
21998: PPUSH
21999: CALL_OW 12
22003: PPUSH
22004: LD_INT 43
22006: PUSH
22007: LD_INT 43
22009: PUSH
22010: LD_INT 43
22012: PUSH
22013: LD_INT 43
22015: PUSH
22016: LD_INT 44
22018: PUSH
22019: LD_INT 44
22021: PUSH
22022: LD_INT 44
22024: PUSH
22025: LD_INT 46
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: LD_INT 3
22043: PPUSH
22044: LD_INT 24
22046: PPUSH
22047: CALL 8986 0 7
// if Difficulty = 2 then
22051: LD_OWVAR 67
22055: PUSH
22056: LD_INT 2
22058: EQUAL
22059: IFFALSE 22127
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
22061: LD_INT 3
22063: PPUSH
22064: LD_EXP 30
22068: PPUSH
22069: LD_INT 6
22071: PPUSH
22072: LD_INT 8
22074: PPUSH
22075: CALL_OW 12
22079: PPUSH
22080: LD_INT 43
22082: PUSH
22083: LD_INT 43
22085: PUSH
22086: LD_INT 44
22088: PUSH
22089: LD_INT 44
22091: PUSH
22092: LD_INT 44
22094: PUSH
22095: LD_INT 44
22097: PUSH
22098: LD_INT 46
22100: PUSH
22101: LD_INT 46
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PPUSH
22114: LD_INT 1
22116: PPUSH
22117: LD_INT 3
22119: PPUSH
22120: LD_INT 24
22122: PPUSH
22123: CALL 8986 0 7
// if Difficulty = 3 then
22127: LD_OWVAR 67
22131: PUSH
22132: LD_INT 3
22134: EQUAL
22135: IFFALSE 22203
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
22137: LD_INT 3
22139: PPUSH
22140: LD_EXP 30
22144: PPUSH
22145: LD_INT 7
22147: PPUSH
22148: LD_INT 8
22150: PPUSH
22151: CALL_OW 12
22155: PPUSH
22156: LD_INT 43
22158: PUSH
22159: LD_INT 43
22161: PUSH
22162: LD_INT 44
22164: PUSH
22165: LD_INT 44
22167: PUSH
22168: LD_INT 44
22170: PUSH
22171: LD_INT 46
22173: PUSH
22174: LD_INT 46
22176: PUSH
22177: LD_INT 46
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: PPUSH
22190: LD_INT 1
22192: PPUSH
22193: LD_INT 3
22195: PPUSH
22196: LD_INT 24
22198: PPUSH
22199: CALL 8986 0 7
// end ;
22203: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
22204: LD_EXP 38
22208: PUSH
22209: LD_INT 1
22211: EQUAL
22212: IFFALSE 22294
22214: GO 22216
22216: DISABLE
22217: LD_INT 0
22219: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
22220: LD_ADDR_VAR 0 1
22224: PUSH
22225: LD_INT 22
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 21
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 3
22247: PUSH
22248: LD_INT 24
22250: PUSH
22251: LD_INT 650
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PUSH
22272: FOR_IN
22273: IFFALSE 22292
// ComMoveXY ( i , 51 , 12 ) ;
22275: LD_VAR 0 1
22279: PPUSH
22280: LD_INT 51
22282: PPUSH
22283: LD_INT 12
22285: PPUSH
22286: CALL_OW 111
22290: GO 22272
22292: POP
22293: POP
// end ; end_of_file
22294: PPOPN 1
22296: END
// every 3 3$20 trigger firstAttack = 1 do
22297: LD_EXP 33
22301: PUSH
22302: LD_INT 1
22304: EQUAL
22305: IFFALSE 22411
22307: GO 22309
22309: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22310: LD_INT 6
22312: PPUSH
22313: LD_INT 3
22315: PPUSH
22316: LD_INT 5
22318: PPUSH
22319: LD_INT 6
22321: PPUSH
22322: CALL_OW 12
22326: PUSH
22327: LD_INT 5
22329: PPUSH
22330: LD_INT 6
22332: PPUSH
22333: CALL_OW 12
22337: PUSH
22338: LD_INT 5
22340: PPUSH
22341: LD_INT 6
22343: PPUSH
22344: CALL_OW 12
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: LD_OWVAR 67
22358: ARRAY
22359: PPUSH
22360: LD_INT 0
22362: PPUSH
22363: LD_INT 0
22365: PPUSH
22366: LD_INT 0
22368: PPUSH
22369: LD_INT 0
22371: PPUSH
22372: LD_EXP 25
22376: PPUSH
22377: LD_EXP 26
22381: PPUSH
22382: CALL_OW 12
22386: PPUSH
22387: LD_INT 16
22389: PPUSH
22390: LD_INT 7
22392: PPUSH
22393: LD_INT 1
22395: PPUSH
22396: LD_INT 1
22398: PPUSH
22399: LD_INT 3
22401: PPUSH
22402: CALL_OW 12
22406: PPUSH
22407: CALL 11640 0 12
22411: END
// every 3 3$40 trigger firstAttack = 1 do
22412: LD_EXP 33
22416: PUSH
22417: LD_INT 1
22419: EQUAL
22420: IFFALSE 22512
22422: GO 22424
22424: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22425: LD_INT 16
22427: PPUSH
22428: LD_INT 6
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: LD_INT 4
22436: PPUSH
22437: CALL_OW 12
22441: PUSH
22442: LD_INT 4
22444: PPUSH
22445: LD_INT 5
22447: PPUSH
22448: CALL_OW 12
22452: PUSH
22453: LD_INT 5
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: PUSH
22461: LD_OWVAR 67
22465: ARRAY
22466: PPUSH
22467: LD_EXP 25
22471: PPUSH
22472: LD_EXP 26
22476: PPUSH
22477: CALL_OW 12
22481: PPUSH
22482: LD_INT 3
22484: PPUSH
22485: LD_INT 1
22487: PPUSH
22488: LD_INT 3
22490: PPUSH
22491: LD_INT 44
22493: PUSH
22494: LD_INT 46
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PPUSH
22501: EMPTY
22502: PPUSH
22503: EMPTY
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: CALL 13933 0 11
22512: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22513: LD_EXP 33
22517: PUSH
22518: LD_INT 1
22520: EQUAL
22521: PUSH
22522: LD_EXP 39
22526: PUSH
22527: LD_INT 0
22529: EQUAL
22530: AND
22531: IFFALSE 22637
22533: GO 22535
22535: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22536: LD_INT 6
22538: PPUSH
22539: LD_INT 3
22541: PPUSH
22542: LD_INT 5
22544: PPUSH
22545: LD_INT 6
22547: PPUSH
22548: CALL_OW 12
22552: PUSH
22553: LD_INT 5
22555: PPUSH
22556: LD_INT 6
22558: PPUSH
22559: CALL_OW 12
22563: PUSH
22564: LD_INT 5
22566: PPUSH
22567: LD_INT 6
22569: PPUSH
22570: CALL_OW 12
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: LD_OWVAR 67
22584: ARRAY
22585: PPUSH
22586: LD_INT 0
22588: PPUSH
22589: LD_INT 0
22591: PPUSH
22592: LD_INT 0
22594: PPUSH
22595: LD_INT 0
22597: PPUSH
22598: LD_EXP 25
22602: PPUSH
22603: LD_EXP 26
22607: PPUSH
22608: CALL_OW 12
22612: PPUSH
22613: LD_INT 16
22615: PPUSH
22616: LD_INT 7
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: LD_INT 3
22627: PPUSH
22628: CALL_OW 12
22632: PPUSH
22633: CALL 11640 0 12
22637: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22638: LD_EXP 33
22642: PUSH
22643: LD_INT 1
22645: EQUAL
22646: PUSH
22647: LD_EXP 39
22651: PUSH
22652: LD_INT 0
22654: EQUAL
22655: AND
22656: IFFALSE 22752
22658: GO 22660
22660: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22661: LD_INT 16
22663: PPUSH
22664: LD_INT 6
22666: PPUSH
22667: LD_INT 5
22669: PPUSH
22670: LD_INT 6
22672: PPUSH
22673: CALL_OW 12
22677: PUSH
22678: LD_INT 6
22680: PPUSH
22681: LD_INT 7
22683: PPUSH
22684: CALL_OW 12
22688: PUSH
22689: LD_INT 7
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: LD_OWVAR 67
22701: ARRAY
22702: PPUSH
22703: LD_EXP 25
22707: PPUSH
22708: LD_EXP 26
22712: PPUSH
22713: CALL_OW 12
22717: PPUSH
22718: LD_INT 3
22720: PPUSH
22721: LD_INT 1
22723: PPUSH
22724: LD_INT 3
22726: PPUSH
22727: LD_INT 43
22729: PUSH
22730: LD_INT 44
22732: PUSH
22733: LD_INT 46
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: PPUSH
22741: EMPTY
22742: PPUSH
22743: EMPTY
22744: PPUSH
22745: LD_INT 1
22747: PPUSH
22748: CALL 13933 0 11
22752: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22753: LD_EXP 33
22757: PUSH
22758: LD_INT 1
22760: EQUAL
22761: PUSH
22762: LD_EXP 39
22766: PUSH
22767: LD_INT 0
22769: EQUAL
22770: AND
22771: IFFALSE 22847
22773: GO 22775
22775: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22776: LD_INT 16
22778: PPUSH
22779: LD_INT 6
22781: PPUSH
22782: LD_INT 5
22784: PUSH
22785: LD_INT 6
22787: PUSH
22788: LD_INT 7
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: PUSH
22796: LD_OWVAR 67
22800: ARRAY
22801: PPUSH
22802: LD_EXP 25
22806: PPUSH
22807: LD_EXP 26
22811: PPUSH
22812: CALL_OW 12
22816: PPUSH
22817: LD_INT 3
22819: PPUSH
22820: LD_INT 1
22822: PPUSH
22823: LD_INT 3
22825: PPUSH
22826: LD_INT 44
22828: PUSH
22829: LD_INT 46
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PPUSH
22836: EMPTY
22837: PPUSH
22838: EMPTY
22839: PPUSH
22840: LD_INT 1
22842: PPUSH
22843: CALL 13933 0 11
22847: END
// every 1 1$00 trigger secondAttack = 1 do
22848: LD_EXP 34
22852: PUSH
22853: LD_INT 1
22855: EQUAL
22856: IFFALSE 22962
22858: GO 22860
22860: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22861: LD_INT 6
22863: PPUSH
22864: LD_INT 3
22866: PPUSH
22867: LD_INT 4
22869: PPUSH
22870: LD_INT 7
22872: PPUSH
22873: CALL_OW 12
22877: PUSH
22878: LD_INT 6
22880: PPUSH
22881: LD_INT 7
22883: PPUSH
22884: CALL_OW 12
22888: PUSH
22889: LD_INT 6
22891: PPUSH
22892: LD_INT 10
22894: PPUSH
22895: CALL_OW 12
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: PUSH
22905: LD_OWVAR 67
22909: ARRAY
22910: PPUSH
22911: LD_INT 0
22913: PPUSH
22914: LD_INT 0
22916: PPUSH
22917: LD_INT 0
22919: PPUSH
22920: LD_INT 0
22922: PPUSH
22923: LD_EXP 25
22927: PPUSH
22928: LD_EXP 26
22932: PPUSH
22933: CALL_OW 12
22937: PPUSH
22938: LD_INT 16
22940: PPUSH
22941: LD_INT 7
22943: PPUSH
22944: LD_INT 1
22946: PPUSH
22947: LD_INT 1
22949: PPUSH
22950: LD_INT 3
22952: PPUSH
22953: CALL_OW 12
22957: PPUSH
22958: CALL 11640 0 12
22962: END
// every 1 1$00 trigger secondAttack = 1 do
22963: LD_EXP 34
22967: PUSH
22968: LD_INT 1
22970: EQUAL
22971: IFFALSE 23075
22973: GO 22975
22975: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22976: LD_INT 16
22978: PPUSH
22979: LD_INT 6
22981: PPUSH
22982: LD_INT 5
22984: PPUSH
22985: LD_INT 8
22987: PPUSH
22988: CALL_OW 12
22992: PUSH
22993: LD_INT 6
22995: PPUSH
22996: LD_INT 9
22998: PPUSH
22999: CALL_OW 12
23003: PUSH
23004: LD_INT 7
23006: PPUSH
23007: LD_INT 9
23009: PPUSH
23010: CALL_OW 12
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: PUSH
23020: LD_OWVAR 67
23024: ARRAY
23025: PPUSH
23026: LD_EXP 25
23030: PPUSH
23031: LD_EXP 26
23035: PPUSH
23036: CALL_OW 12
23040: PPUSH
23041: LD_INT 3
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: LD_INT 3
23049: PPUSH
23050: LD_INT 43
23052: PUSH
23053: LD_INT 44
23055: PUSH
23056: LD_INT 46
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: PPUSH
23064: EMPTY
23065: PPUSH
23066: EMPTY
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL 13933 0 11
23075: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23076: LD_EXP 18
23080: PUSH
23081: LD_INT 0
23083: EQUAL
23084: IFFALSE 23190
23086: GO 23088
23088: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23089: LD_INT 6
23091: PPUSH
23092: LD_INT 3
23094: PPUSH
23095: LD_INT 8
23097: PPUSH
23098: LD_INT 9
23100: PPUSH
23101: CALL_OW 12
23105: PUSH
23106: LD_INT 7
23108: PPUSH
23109: LD_INT 10
23111: PPUSH
23112: CALL_OW 12
23116: PUSH
23117: LD_INT 8
23119: PPUSH
23120: LD_INT 10
23122: PPUSH
23123: CALL_OW 12
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: LD_OWVAR 67
23137: ARRAY
23138: PPUSH
23139: LD_INT 0
23141: PPUSH
23142: LD_INT 0
23144: PPUSH
23145: LD_INT 0
23147: PPUSH
23148: LD_INT 0
23150: PPUSH
23151: LD_EXP 25
23155: PPUSH
23156: LD_EXP 26
23160: PPUSH
23161: CALL_OW 12
23165: PPUSH
23166: LD_INT 16
23168: PPUSH
23169: LD_INT 7
23171: PPUSH
23172: LD_INT 1
23174: PPUSH
23175: LD_INT 1
23177: PPUSH
23178: LD_INT 3
23180: PPUSH
23181: CALL_OW 12
23185: PPUSH
23186: CALL 11640 0 12
23190: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23191: LD_EXP 18
23195: PUSH
23196: LD_INT 0
23198: EQUAL
23199: IFFALSE 23299
23201: GO 23203
23203: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23204: LD_INT 16
23206: PPUSH
23207: LD_INT 6
23209: PPUSH
23210: LD_INT 5
23212: PPUSH
23213: LD_INT 8
23215: PPUSH
23216: CALL_OW 12
23220: PUSH
23221: LD_INT 6
23223: PPUSH
23224: LD_INT 9
23226: PPUSH
23227: CALL_OW 12
23231: PUSH
23232: LD_INT 7
23234: PPUSH
23235: LD_INT 9
23237: PPUSH
23238: CALL_OW 12
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: LD_OWVAR 67
23252: ARRAY
23253: PPUSH
23254: LD_EXP 25
23258: PPUSH
23259: LD_EXP 26
23263: PPUSH
23264: CALL_OW 12
23268: PPUSH
23269: LD_INT 3
23271: PPUSH
23272: LD_INT 1
23274: PPUSH
23275: LD_INT 3
23277: PPUSH
23278: LD_INT 44
23280: PUSH
23281: LD_INT 46
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: EMPTY
23289: PPUSH
23290: EMPTY
23291: PPUSH
23292: LD_INT 1
23294: PPUSH
23295: CALL 13933 0 11
23299: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23300: LD_EXP 18
23304: PUSH
23305: LD_INT 0
23307: EQUAL
23308: IFFALSE 23414
23310: GO 23312
23312: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23313: LD_INT 6
23315: PPUSH
23316: LD_INT 3
23318: PPUSH
23319: LD_INT 8
23321: PPUSH
23322: LD_INT 9
23324: PPUSH
23325: CALL_OW 12
23329: PUSH
23330: LD_INT 7
23332: PPUSH
23333: LD_INT 10
23335: PPUSH
23336: CALL_OW 12
23340: PUSH
23341: LD_INT 8
23343: PPUSH
23344: LD_INT 10
23346: PPUSH
23347: CALL_OW 12
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: LIST
23356: PUSH
23357: LD_OWVAR 67
23361: ARRAY
23362: PPUSH
23363: LD_INT 0
23365: PPUSH
23366: LD_INT 0
23368: PPUSH
23369: LD_INT 0
23371: PPUSH
23372: LD_INT 0
23374: PPUSH
23375: LD_EXP 25
23379: PPUSH
23380: LD_EXP 26
23384: PPUSH
23385: CALL_OW 12
23389: PPUSH
23390: LD_INT 16
23392: PPUSH
23393: LD_INT 7
23395: PPUSH
23396: LD_INT 1
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: LD_INT 3
23404: PPUSH
23405: CALL_OW 12
23409: PPUSH
23410: CALL 11640 0 12
23414: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23415: LD_EXP 18
23419: PUSH
23420: LD_INT 0
23422: EQUAL
23423: IFFALSE 23523
23425: GO 23427
23427: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23428: LD_INT 16
23430: PPUSH
23431: LD_INT 6
23433: PPUSH
23434: LD_INT 5
23436: PPUSH
23437: LD_INT 8
23439: PPUSH
23440: CALL_OW 12
23444: PUSH
23445: LD_INT 6
23447: PPUSH
23448: LD_INT 9
23450: PPUSH
23451: CALL_OW 12
23455: PUSH
23456: LD_INT 7
23458: PPUSH
23459: LD_INT 9
23461: PPUSH
23462: CALL_OW 12
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: PUSH
23472: LD_OWVAR 67
23476: ARRAY
23477: PPUSH
23478: LD_EXP 25
23482: PPUSH
23483: LD_EXP 26
23487: PPUSH
23488: CALL_OW 12
23492: PPUSH
23493: LD_INT 3
23495: PPUSH
23496: LD_INT 1
23498: PPUSH
23499: LD_INT 3
23501: PPUSH
23502: LD_INT 44
23504: PUSH
23505: LD_INT 46
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PPUSH
23512: EMPTY
23513: PPUSH
23514: EMPTY
23515: PPUSH
23516: LD_INT 1
23518: PPUSH
23519: CALL 13933 0 11
23523: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23524: LD_EXP 18
23528: PUSH
23529: LD_INT 0
23531: EQUAL
23532: IFFALSE 23638
23534: GO 23536
23536: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23537: LD_INT 6
23539: PPUSH
23540: LD_INT 3
23542: PPUSH
23543: LD_INT 8
23545: PPUSH
23546: LD_INT 9
23548: PPUSH
23549: CALL_OW 12
23553: PUSH
23554: LD_INT 7
23556: PPUSH
23557: LD_INT 10
23559: PPUSH
23560: CALL_OW 12
23564: PUSH
23565: LD_INT 8
23567: PPUSH
23568: LD_INT 10
23570: PPUSH
23571: CALL_OW 12
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: PUSH
23581: LD_OWVAR 67
23585: ARRAY
23586: PPUSH
23587: LD_INT 0
23589: PPUSH
23590: LD_INT 0
23592: PPUSH
23593: LD_INT 0
23595: PPUSH
23596: LD_INT 0
23598: PPUSH
23599: LD_EXP 25
23603: PPUSH
23604: LD_EXP 26
23608: PPUSH
23609: CALL_OW 12
23613: PPUSH
23614: LD_INT 16
23616: PPUSH
23617: LD_INT 7
23619: PPUSH
23620: LD_INT 1
23622: PPUSH
23623: LD_INT 1
23625: PPUSH
23626: LD_INT 3
23628: PPUSH
23629: CALL_OW 12
23633: PPUSH
23634: CALL 11640 0 12
23638: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23639: LD_EXP 18
23643: PUSH
23644: LD_INT 0
23646: EQUAL
23647: IFFALSE 23747
23649: GO 23651
23651: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23652: LD_INT 16
23654: PPUSH
23655: LD_INT 6
23657: PPUSH
23658: LD_INT 5
23660: PPUSH
23661: LD_INT 8
23663: PPUSH
23664: CALL_OW 12
23668: PUSH
23669: LD_INT 6
23671: PPUSH
23672: LD_INT 9
23674: PPUSH
23675: CALL_OW 12
23679: PUSH
23680: LD_INT 7
23682: PPUSH
23683: LD_INT 9
23685: PPUSH
23686: CALL_OW 12
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: PUSH
23696: LD_OWVAR 67
23700: ARRAY
23701: PPUSH
23702: LD_EXP 25
23706: PPUSH
23707: LD_EXP 26
23711: PPUSH
23712: CALL_OW 12
23716: PPUSH
23717: LD_INT 3
23719: PPUSH
23720: LD_INT 1
23722: PPUSH
23723: LD_INT 3
23725: PPUSH
23726: LD_INT 44
23728: PUSH
23729: LD_INT 46
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PPUSH
23736: EMPTY
23737: PPUSH
23738: EMPTY
23739: PPUSH
23740: LD_INT 1
23742: PPUSH
23743: CALL 13933 0 11
23747: END
// every 0 0$1 trigger timerStatus = 1 do
23748: LD_EXP 35
23752: PUSH
23753: LD_INT 1
23755: EQUAL
23756: IFFALSE 23793
23758: GO 23760
23760: DISABLE
// begin enable ;
23761: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23762: LD_ADDR_OWVAR 47
23766: PUSH
23767: LD_STRING #Am08-1
23769: PUSH
23770: LD_EXP 19
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23779: LD_ADDR_EXP 19
23783: PUSH
23784: LD_EXP 19
23788: PUSH
23789: LD_INT 35
23791: MINUS
23792: ST_TO_ADDR
// end ; end_of_file
23793: END
// every 1 1$0 do
23794: GO 23796
23796: DISABLE
// begin if supply <= 13 and supply > 7 then
23797: LD_EXP 40
23801: PUSH
23802: LD_INT 13
23804: LESSEQUAL
23805: PUSH
23806: LD_EXP 40
23810: PUSH
23811: LD_INT 7
23813: GREATER
23814: AND
23815: IFFALSE 23838
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23817: LD_INT 3
23819: PPUSH
23820: LD_INT 5
23822: PPUSH
23823: CALL_OW 12
23827: PPUSH
23828: LD_INT 5
23830: PPUSH
23831: LD_INT 1
23833: PPUSH
23834: CALL_OW 55
// if supply <= 7 and supply > 4 then
23838: LD_EXP 40
23842: PUSH
23843: LD_INT 7
23845: LESSEQUAL
23846: PUSH
23847: LD_EXP 40
23851: PUSH
23852: LD_INT 4
23854: GREATER
23855: AND
23856: IFFALSE 23879
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23858: LD_INT 3
23860: PPUSH
23861: LD_INT 5
23863: PPUSH
23864: CALL_OW 12
23868: PPUSH
23869: LD_INT 20
23871: PPUSH
23872: LD_INT 1
23874: PPUSH
23875: CALL_OW 55
// if supply <= 4 and supply > 0 then
23879: LD_EXP 40
23883: PUSH
23884: LD_INT 4
23886: LESSEQUAL
23887: PUSH
23888: LD_EXP 40
23892: PUSH
23893: LD_INT 0
23895: GREATER
23896: AND
23897: IFFALSE 23920
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23899: LD_INT 3
23901: PPUSH
23902: LD_INT 5
23904: PPUSH
23905: CALL_OW 12
23909: PPUSH
23910: LD_INT 21
23912: PPUSH
23913: LD_INT 1
23915: PPUSH
23916: CALL_OW 55
// if supply > 0 then
23920: LD_EXP 40
23924: PUSH
23925: LD_INT 0
23927: GREATER
23928: IFFALSE 23945
// begin supply = supply - 1 ;
23930: LD_ADDR_EXP 40
23934: PUSH
23935: LD_EXP 40
23939: PUSH
23940: LD_INT 1
23942: MINUS
23943: ST_TO_ADDR
// enable ;
23944: ENABLE
// end ; end ; end_of_file
23945: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23946: LD_EXP 39
23950: PUSH
23951: LD_INT 1
23953: EQUAL
23954: PUSH
23955: LD_EXP 1
23959: PPUSH
23960: CALL_OW 301
23964: AND
23965: IFFALSE 23977
23967: GO 23969
23969: DISABLE
// YouLost ( JMM ) ;
23970: LD_STRING JMM
23972: PPUSH
23973: CALL_OW 104
23977: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23978: LD_EXP 18
23982: PUSH
23983: LD_INT 1
23985: EQUAL
23986: PUSH
23987: LD_EXP 16
23991: PPUSH
23992: CALL_OW 301
23996: AND
23997: IFFALSE 24029
23999: GO 24001
24001: DISABLE
// begin DialogueOn ;
24002: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
24006: LD_EXP 23
24010: PPUSH
24011: LD_STRING D8a-Pow-1
24013: PPUSH
24014: CALL_OW 94
// DialogueOff ;
24018: CALL_OW 7
// YouLost ( Dismissed ) ;
24022: LD_STRING Dismissed
24024: PPUSH
24025: CALL_OW 104
// end ;
24029: END
// every 0 0$1 trigger IsDead ( amDepot ) do
24030: LD_EXP 37
24034: PPUSH
24035: CALL_OW 301
24039: IFFALSE 24051
24041: GO 24043
24043: DISABLE
// YouLost ( Destroyed ) ; end_of_file
24044: LD_STRING Destroyed
24046: PPUSH
24047: CALL_OW 104
24051: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
24052: LD_EXP 24
24056: PPUSH
24057: CALL_OW 301
24061: IFFALSE 24406
24063: GO 24065
24065: DISABLE
24066: LD_INT 0
24068: PPUSH
// begin russianAI = 0 ;
24069: LD_ADDR_EXP 27
24073: PUSH
24074: LD_INT 0
24076: ST_TO_ADDR
// escapeAvalaible = 1 ;
24077: LD_ADDR_EXP 36
24081: PUSH
24082: LD_INT 1
24084: ST_TO_ADDR
// InGameOn ;
24085: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
24089: LD_INT 3
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: LD_INT 1
24097: PPUSH
24098: LD_INT 0
24100: PPUSH
24101: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
24105: LD_INT 6
24107: PPUSH
24108: LD_INT 1
24110: PPUSH
24111: LD_INT 1
24113: PPUSH
24114: LD_INT 0
24116: PPUSH
24117: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
24121: LD_INT 3
24123: PPUSH
24124: LD_INT 1
24126: PPUSH
24127: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
24131: LD_INT 97
24133: PPUSH
24134: LD_INT 91
24136: PPUSH
24137: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
24141: LD_INT 22
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 21
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PPUSH
24165: CALL_OW 69
24169: PPUSH
24170: CALL_OW 121
// wait ( 0 0$01 ) ;
24174: LD_INT 35
24176: PPUSH
24177: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24181: LD_INT 22
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 21
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PPUSH
24205: CALL_OW 69
24209: PPUSH
24210: LD_INT 124
24212: PPUSH
24213: LD_INT 98
24215: PPUSH
24216: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
24220: LD_INT 22
24222: PUSH
24223: LD_INT 6
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PPUSH
24244: CALL_OW 69
24248: PPUSH
24249: CALL_OW 121
// wait ( 0 0$01 ) ;
24253: LD_INT 35
24255: PPUSH
24256: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24260: LD_INT 22
24262: PUSH
24263: LD_INT 6
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 21
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PPUSH
24284: CALL_OW 69
24288: PPUSH
24289: LD_INT 124
24291: PPUSH
24292: LD_INT 98
24294: PPUSH
24295: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24299: LD_INT 22
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 21
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PPUSH
24323: CALL_OW 69
24327: PPUSH
24328: LD_INT 124
24330: PPUSH
24331: LD_INT 98
24333: PPUSH
24334: CALL_OW 114
// wait ( 0 0$4 ) ;
24338: LD_INT 140
24340: PPUSH
24341: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24345: LD_INT 124
24347: PPUSH
24348: LD_INT 98
24350: PPUSH
24351: CALL_OW 84
// if SikorskyStatus = 1 then
24355: LD_EXP 21
24359: PUSH
24360: LD_INT 1
24362: EQUAL
24363: IFFALSE 24377
// begin Say ( Sikorski , D9-Sik-1 ) ;
24365: LD_EXP 16
24369: PPUSH
24370: LD_STRING D9-Sik-1
24372: PPUSH
24373: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24377: LD_EXP 21
24381: PUSH
24382: LD_INT 2
24384: EQUAL
24385: IFFALSE 24406
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24387: LD_EXP 23
24391: PPUSH
24392: LD_STRING D8b-Pow-1
24394: PPUSH
24395: CALL_OW 94
// YouLost ( Dismissed ) ;
24399: LD_STRING Dismissed
24401: PPUSH
24402: CALL_OW 104
// end ; end ;
24406: PPOPN 1
24408: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
24409: LD_INT 23
24411: PUSH
24412: LD_INT 3
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 24
24431: PUSH
24432: LD_INT 250
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: PPUSH
24444: CALL_OW 69
24448: PUSH
24449: LD_INT 0
24451: EQUAL
24452: IFFALSE 24461
24454: GO 24456
24456: DISABLE
// FinishMission ;
24457: CALL 24462 0 0
24461: END
// export function FinishMission ; var tmp ; begin
24462: LD_INT 0
24464: PPUSH
24465: PPUSH
// AddMedal ( med1 , 1 ) ;
24466: LD_STRING med1
24468: PPUSH
24469: LD_INT 1
24471: PPUSH
24472: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24476: LD_STRING med2
24478: PPUSH
24479: LD_INT 1
24481: PPUSH
24482: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24486: LD_STRING perfect
24488: PPUSH
24489: LD_INT 1
24491: PPUSH
24492: CALL_OW 101
// GiveMedals ( Main ) ;
24496: LD_STRING Main
24498: PPUSH
24499: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24503: LD_INT 22
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 23
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 21
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: LD_INT 25
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 25
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 25
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 25
24568: PUSH
24569: LD_INT 4
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: PPUSH
24589: CALL_OW 69
24593: PPUSH
24594: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24598: LD_EXP 1
24602: PPUSH
24603: LD_EXP 42
24607: PUSH
24608: LD_STRING JMM
24610: STR
24611: PPUSH
24612: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24616: LD_EXP 2
24620: PPUSH
24621: LD_EXP 42
24625: PUSH
24626: LD_STRING Brown
24628: STR
24629: PPUSH
24630: CALL 7862 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24634: LD_EXP 3
24638: PPUSH
24639: LD_EXP 42
24643: PUSH
24644: LD_STRING Donaldson
24646: STR
24647: PPUSH
24648: CALL 7862 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24652: LD_EXP 4
24656: PPUSH
24657: LD_EXP 42
24661: PUSH
24662: LD_STRING Bobby
24664: STR
24665: PPUSH
24666: CALL 7862 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24670: LD_EXP 5
24674: PPUSH
24675: LD_EXP 42
24679: PUSH
24680: LD_STRING Cyrus
24682: STR
24683: PPUSH
24684: CALL 7862 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24688: LD_EXP 6
24692: PPUSH
24693: LD_EXP 42
24697: PUSH
24698: LD_STRING Lisa
24700: STR
24701: PPUSH
24702: CALL 7862 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24706: LD_EXP 7
24710: PPUSH
24711: LD_EXP 42
24715: PUSH
24716: LD_STRING Frank
24718: STR
24719: PPUSH
24720: CALL 7862 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24724: LD_EXP 8
24728: PPUSH
24729: LD_EXP 42
24733: PUSH
24734: LD_STRING Gladstone
24736: STR
24737: PPUSH
24738: CALL 7862 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24742: LD_EXP 9
24746: PPUSH
24747: LD_EXP 42
24751: PUSH
24752: LD_STRING Kikuchi
24754: STR
24755: PPUSH
24756: CALL 7862 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24760: LD_EXP 14
24764: PPUSH
24765: LD_EXP 42
24769: PUSH
24770: LD_STRING Denis
24772: STR
24773: PPUSH
24774: CALL 7862 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24778: LD_EXP 15
24782: PPUSH
24783: LD_EXP 42
24787: PUSH
24788: LD_STRING Joan
24790: STR
24791: PPUSH
24792: CALL 7862 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24796: LD_EXP 10
24800: PPUSH
24801: LD_EXP 42
24805: PUSH
24806: LD_STRING Khatam
24808: STR
24809: PPUSH
24810: CALL 7862 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24814: LD_EXP 13
24818: PPUSH
24819: LD_EXP 42
24823: PUSH
24824: LD_STRING Houten
24826: STR
24827: PPUSH
24828: CALL 7862 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24832: LD_INT 50
24834: PUSH
24835: EMPTY
24836: LIST
24837: PUSH
24838: LD_INT 22
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 21
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 25
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 25
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 25
24883: PUSH
24884: LD_INT 3
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 25
24893: PUSH
24894: LD_INT 4
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: PPUSH
24914: CALL_OW 69
24918: PUSH
24919: LD_EXP 1
24923: PUSH
24924: LD_EXP 2
24928: PUSH
24929: LD_EXP 3
24933: PUSH
24934: LD_EXP 4
24938: PUSH
24939: LD_EXP 5
24943: PUSH
24944: LD_EXP 6
24948: PUSH
24949: LD_EXP 7
24953: PUSH
24954: LD_EXP 8
24958: PUSH
24959: LD_EXP 9
24963: PUSH
24964: LD_EXP 14
24968: PUSH
24969: LD_EXP 15
24973: PUSH
24974: LD_EXP 13
24978: PUSH
24979: LD_EXP 10
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: DIFF
24999: PPUSH
25000: LD_STRING 08_other_survivors
25002: PPUSH
25003: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
25007: LD_INT 23
25009: PPUSH
25010: CALL 25023 0 1
// YouWin ;
25014: CALL_OW 103
// end ;
25018: LD_VAR 0 1
25022: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
25023: LD_INT 0
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
// gammaBase = [ ] ;
25029: LD_ADDR_VAR 0 4
25033: PUSH
25034: EMPTY
25035: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
25036: LD_ADDR_VAR 0 5
25040: PUSH
25041: LD_VAR 0 1
25045: PPUSH
25046: LD_INT 22
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 21
25058: PUSH
25059: LD_INT 3
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 50
25068: PUSH
25069: EMPTY
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: PPUSH
25077: CALL_OW 70
25081: ST_TO_ADDR
// for i in buildings do
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_VAR 0 5
25091: PUSH
25092: FOR_IN
25093: IFFALSE 25530
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
25095: LD_VAR 0 3
25099: PPUSH
25100: CALL_OW 266
25104: PUSH
25105: LD_INT 6
25107: PUSH
25108: LD_INT 7
25110: PUSH
25111: LD_INT 8
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: IN
25119: IFFALSE 25233
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
25121: LD_ADDR_VAR 0 4
25125: PUSH
25126: LD_VAR 0 4
25130: PUSH
25131: LD_VAR 0 3
25135: PPUSH
25136: CALL_OW 266
25140: PUSH
25141: LD_VAR 0 3
25145: PPUSH
25146: CALL_OW 250
25150: PUSH
25151: LD_VAR 0 3
25155: PPUSH
25156: CALL_OW 251
25160: PUSH
25161: LD_VAR 0 3
25165: PPUSH
25166: CALL_OW 254
25170: PUSH
25171: LD_VAR 0 3
25175: PPUSH
25176: CALL_OW 267
25180: PUSH
25181: LD_VAR 0 3
25185: PPUSH
25186: CALL_OW 248
25190: PUSH
25191: LD_VAR 0 3
25195: PPUSH
25196: LD_INT 1
25198: PPUSH
25199: CALL_OW 268
25203: PUSH
25204: LD_VAR 0 3
25208: PPUSH
25209: LD_INT 2
25211: PPUSH
25212: CALL_OW 268
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: ADD
25230: ST_TO_ADDR
25231: GO 25528
// if GetBType ( i ) = b_bunker then
25233: LD_VAR 0 3
25237: PPUSH
25238: CALL_OW 266
25242: PUSH
25243: LD_INT 32
25245: EQUAL
25246: IFFALSE 25343
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25248: LD_ADDR_VAR 0 4
25252: PUSH
25253: LD_VAR 0 4
25257: PUSH
25258: LD_VAR 0 3
25262: PPUSH
25263: CALL_OW 266
25267: PUSH
25268: LD_VAR 0 3
25272: PPUSH
25273: CALL_OW 250
25277: PUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: CALL_OW 251
25287: PUSH
25288: LD_VAR 0 3
25292: PPUSH
25293: CALL_OW 254
25297: PUSH
25298: LD_VAR 0 3
25302: PPUSH
25303: CALL_OW 267
25307: PUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: CALL_OW 248
25317: PUSH
25318: LD_VAR 0 3
25322: PPUSH
25323: CALL_OW 269
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: ADD
25340: ST_TO_ADDR
25341: GO 25528
// if GetBType ( i ) = b_factory then
25343: LD_VAR 0 3
25347: PPUSH
25348: CALL_OW 266
25352: PUSH
25353: LD_INT 3
25355: EQUAL
25356: IFFALSE 25446
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25358: LD_ADDR_VAR 0 4
25362: PUSH
25363: LD_VAR 0 4
25367: PPUSH
25368: LD_INT 1
25370: PPUSH
25371: LD_VAR 0 3
25375: PPUSH
25376: CALL_OW 266
25380: PUSH
25381: LD_VAR 0 3
25385: PPUSH
25386: CALL_OW 250
25390: PUSH
25391: LD_VAR 0 3
25395: PPUSH
25396: CALL_OW 251
25400: PUSH
25401: LD_VAR 0 3
25405: PPUSH
25406: CALL_OW 254
25410: PUSH
25411: LD_VAR 0 3
25415: PPUSH
25416: CALL_OW 267
25420: PUSH
25421: LD_VAR 0 3
25425: PPUSH
25426: CALL_OW 248
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: PPUSH
25439: CALL_OW 2
25443: ST_TO_ADDR
25444: GO 25528
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25446: LD_ADDR_VAR 0 4
25450: PUSH
25451: LD_VAR 0 4
25455: PUSH
25456: LD_VAR 0 3
25460: PPUSH
25461: CALL_OW 266
25465: PUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: CALL_OW 250
25475: PUSH
25476: LD_VAR 0 3
25480: PPUSH
25481: CALL_OW 251
25485: PUSH
25486: LD_VAR 0 3
25490: PPUSH
25491: CALL_OW 254
25495: PUSH
25496: LD_VAR 0 3
25500: PPUSH
25501: CALL_OW 267
25505: PUSH
25506: LD_VAR 0 3
25510: PPUSH
25511: CALL_OW 248
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: ADD
25527: ST_TO_ADDR
// end ;
25528: GO 25092
25530: POP
25531: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25532: LD_VAR 0 4
25536: PPUSH
25537: LD_STRING 08_GammaBase
25539: PPUSH
25540: CALL_OW 39
// end ;
25544: LD_VAR 0 2
25548: RET
