// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 41
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 42
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 38
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 37
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 11
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 30
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 40
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 34
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 39
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 43
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 5985 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 1432 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 4790 0 0
// PrepareRussians ;
 229: CALL 5108 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 24
 291: PPUSH
 292: LD_EXP 25
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 7203 0 6
// PrepareCutsceneAttack ;
 312: CALL 4842 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 43
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
// uc_side = 1 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// uc_nation = 1 ;
 538: LD_ADDR_OWVAR 21
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// if gammaCommander = 1 then
 546: LD_EXP 11
 550: PUSH
 551: LD_INT 1
 553: EQUAL
 554: IFFALSE 587
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 556: LD_ADDR_EXP 3
 560: PUSH
 561: LD_STRING Donaldson
 563: PPUSH
 564: LD_INT 1
 566: PPUSH
 567: CALL 5526 0 2
 571: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 5
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// end ; if gammaCommander = 2 then
 587: LD_EXP 11
 591: PUSH
 592: LD_INT 2
 594: EQUAL
 595: IFFALSE 628
// begin Brown = PrepareUnit ( Brown , true ) ;
 597: LD_ADDR_EXP 2
 601: PUSH
 602: LD_STRING Brown
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: CALL 5526 0 2
 612: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 613: LD_EXP 2
 617: PPUSH
 618: LD_INT 5
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ; if gammaCommander = 3 then
 628: LD_EXP 11
 632: PUSH
 633: LD_INT 3
 635: EQUAL
 636: IFFALSE 669
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 638: LD_ADDR_EXP 12
 642: PUSH
 643: LD_STRING VanHouten
 645: PPUSH
 646: LD_INT 1
 648: PPUSH
 649: CALL 5526 0 2
 653: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 654: LD_EXP 12
 658: PPUSH
 659: LD_INT 5
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 669: LD_ADDR_EXP 21
 673: PUSH
 674: LD_STRING Harisson
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: CALL 5526 0 2
 684: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 685: LD_ADDR_EXP 22
 689: PUSH
 690: LD_STRING Powell
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL 5526 0 2
 700: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 701: LD_ADDR_EXP 10
 705: PUSH
 706: LD_STRING 07_othersGamma
 708: PPUSH
 709: CALL_OW 31
 713: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 714: LD_ADDR_VAR 0 5
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 30
 731: PUSH
 732: LD_INT 5
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 69
 747: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 1
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 30
 768: PUSH
 769: LD_INT 6
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 30
 778: PUSH
 779: LD_INT 7
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 30
 788: PUSH
 789: LD_INT 8
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: CALL_OW 69
 810: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_INT 1
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 30
 828: PUSH
 829: LD_INT 3
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: PPUSH
 840: CALL_OW 69
 844: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 845: LD_ADDR_VAR 0 8
 849: PUSH
 850: LD_INT 22
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: LD_INT 30
 862: PUSH
 863: LD_INT 36
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 879: LD_ADDR_VAR 0 9
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 2
 896: PUSH
 897: LD_INT 30
 899: PUSH
 900: LD_INT 31
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 30
 909: PUSH
 910: LD_INT 32
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: LIST
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PPUSH
 926: CALL_OW 69
 930: ST_TO_ADDR
// for i in others_gamma do
 931: LD_ADDR_VAR 0 2
 935: PUSH
 936: LD_EXP 10
 940: PUSH
 941: FOR_IN
 942: IFFALSE 1317
// begin placed := false ;
 944: LD_ADDR_VAR 0 7
 948: PUSH
 949: LD_INT 0
 951: ST_TO_ADDR
// if GetClass ( i ) = 1 then
 952: LD_VAR 0 2
 956: PPUSH
 957: CALL_OW 257
 961: PUSH
 962: LD_INT 1
 964: EQUAL
 965: IFFALSE 1090
// begin if UnitFilter ( bun , [ f_empty ] ) then
 967: LD_VAR 0 9
 971: PPUSH
 972: LD_INT 58
 974: PUSH
 975: EMPTY
 976: LIST
 977: PPUSH
 978: CALL_OW 72
 982: IFFALSE 1021
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
 984: LD_VAR 0 2
 988: PPUSH
 989: LD_VAR 0 9
 993: PPUSH
 994: LD_INT 58
 996: PUSH
 997: EMPTY
 998: LIST
 999: PPUSH
1000: CALL_OW 72
1004: PUSH
1005: LD_INT 1
1007: ARRAY
1008: PPUSH
1009: CALL_OW 52
// placed := true ;
1013: LD_ADDR_VAR 0 7
1017: PUSH
1018: LD_INT 1
1020: ST_TO_ADDR
// end ; if arm and not placed then
1021: LD_VAR 0 5
1025: PUSH
1026: LD_VAR 0 7
1030: NOT
1031: AND
1032: IFFALSE 1090
// begin for j in arm do
1034: LD_ADDR_VAR 0 6
1038: PUSH
1039: LD_VAR 0 5
1043: PUSH
1044: FOR_IN
1045: IFFALSE 1088
// if UnitsInside ( j ) < 6 then
1047: LD_VAR 0 6
1051: PPUSH
1052: CALL_OW 313
1056: PUSH
1057: LD_INT 6
1059: LESS
1060: IFFALSE 1086
// begin PlaceHumanInUnit ( i , j ) ;
1062: LD_VAR 0 2
1066: PPUSH
1067: LD_VAR 0 6
1071: PPUSH
1072: CALL_OW 52
// placed := true ;
1076: LD_ADDR_VAR 0 7
1080: PUSH
1081: LD_INT 1
1083: ST_TO_ADDR
// break ;
1084: GO 1088
// end ;
1086: GO 1044
1088: POP
1089: POP
// end ; end ; if GetClass ( i ) = 3 then
1090: LD_VAR 0 2
1094: PPUSH
1095: CALL_OW 257
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: IFFALSE 1207
// if fac then
1105: LD_VAR 0 3
1109: IFFALSE 1207
// begin if ct then
1111: LD_VAR 0 8
1115: IFFALSE 1143
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_VAR 0 8
1126: PUSH
1127: LD_INT 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 52
// placed := true ;
1135: LD_ADDR_VAR 0 7
1139: PUSH
1140: LD_INT 1
1142: ST_TO_ADDR
// end ; if placed then
1143: LD_VAR 0 7
1147: IFFALSE 1151
// continue ;
1149: GO 941
// for j in fac do
1151: LD_ADDR_VAR 0 6
1155: PUSH
1156: LD_VAR 0 3
1160: PUSH
1161: FOR_IN
1162: IFFALSE 1205
// if UnitsInside ( j ) < 6 then
1164: LD_VAR 0 6
1168: PPUSH
1169: CALL_OW 313
1173: PUSH
1174: LD_INT 6
1176: LESS
1177: IFFALSE 1203
// begin PlaceHumanInUnit ( i , j ) ;
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 6
1188: PPUSH
1189: CALL_OW 52
// placed := true ;
1193: LD_ADDR_VAR 0 7
1197: PUSH
1198: LD_INT 1
1200: ST_TO_ADDR
// break ;
1201: GO 1205
// end ;
1203: GO 1161
1205: POP
1206: POP
// end ; if GetClass ( i ) = 4 then
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 4
1219: EQUAL
1220: IFFALSE 1284
// if lab then
1222: LD_VAR 0 4
1226: IFFALSE 1284
// begin for j in lab do
1228: LD_ADDR_VAR 0 6
1232: PUSH
1233: LD_VAR 0 4
1237: PUSH
1238: FOR_IN
1239: IFFALSE 1282
// if UnitsInside ( j ) < 6 then
1241: LD_VAR 0 6
1245: PPUSH
1246: CALL_OW 313
1250: PUSH
1251: LD_INT 6
1253: LESS
1254: IFFALSE 1280
// begin PlaceHumanInUnit ( i , j ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_VAR 0 6
1265: PPUSH
1266: CALL_OW 52
// placed := true ;
1270: LD_ADDR_VAR 0 7
1274: PUSH
1275: LD_INT 1
1277: ST_TO_ADDR
// break ;
1278: GO 1282
// end ;
1280: GO 1238
1282: POP
1283: POP
// end ; if not placed then
1284: LD_VAR 0 7
1288: NOT
1289: IFFALSE 1315
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1291: LD_VAR 0 2
1295: PPUSH
1296: LD_INT 5
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: CALL_OW 49
// ComHold ( i ) ;
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 140
// end ; end ;
1315: GO 941
1317: POP
1318: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1319: LD_VAR 0 8
1323: PUSH
1324: LD_VAR 0 8
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PPUSH
1333: CALL_OW 313
1337: AND
1338: IFFALSE 1427
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 22
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: LD_INT 33
1357: PUSH
1358: LD_INT 2
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PPUSH
1369: CALL_OW 69
1373: PUSH
1374: FOR_IN
1375: IFFALSE 1425
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1377: LD_VAR 0 2
1381: PPUSH
1382: LD_VAR 0 8
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: PPUSH
1391: CALL_OW 313
1395: PUSH
1396: LD_INT 1
1398: PPUSH
1399: LD_VAR 0 8
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 313
1412: PPUSH
1413: CALL_OW 12
1417: ARRAY
1418: PPUSH
1419: CALL_OW 135
1423: GO 1374
1425: POP
1426: POP
// end ; end ;
1427: LD_VAR 0 1
1431: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1432: LD_INT 0
1434: PPUSH
1435: PPUSH
1436: PPUSH
1437: PPUSH
1438: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1439: LD_INT 71
1441: PPUSH
1442: LD_INT 5
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1452: LD_ADDR_VAR 0 2
1456: PUSH
1457: LD_STRING GammaBase
1459: PPUSH
1460: EMPTY
1461: PPUSH
1462: CALL_OW 30
1466: ST_TO_ADDR
// uc_side := 1 ;
1467: LD_ADDR_OWVAR 20
1471: PUSH
1472: LD_INT 1
1474: ST_TO_ADDR
// uc_nation := 1 ;
1475: LD_ADDR_OWVAR 21
1479: PUSH
1480: LD_INT 1
1482: ST_TO_ADDR
// for i in blist do
1483: LD_ADDR_VAR 0 3
1487: PUSH
1488: LD_VAR 0 2
1492: PUSH
1493: FOR_IN
1494: IFFALSE 1902
// begin bc_type := i [ 1 ] ;
1496: LD_ADDR_OWVAR 42
1500: PUSH
1501: LD_VAR 0 3
1505: PUSH
1506: LD_INT 1
1508: ARRAY
1509: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1510: LD_ADDR_OWVAR 43
1514: PUSH
1515: LD_VAR 0 3
1519: PUSH
1520: LD_INT 5
1522: ARRAY
1523: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1524: LD_VAR 0 3
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PUSH
1533: LD_INT 7
1535: PUSH
1536: LD_INT 8
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: IN
1543: IFFALSE 1599
// begin bc_kind1 := i [ 7 ] ;
1545: LD_ADDR_OWVAR 44
1549: PUSH
1550: LD_VAR 0 3
1554: PUSH
1555: LD_INT 7
1557: ARRAY
1558: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1559: LD_STRING 06_remoteVehs_1
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL_OW 30
1569: PUSH
1570: LD_INT 1
1572: EQUAL
1573: IFFALSE 1585
// begin bc_kind2 := 15 ;
1575: LD_ADDR_OWVAR 45
1579: PUSH
1580: LD_INT 15
1582: ST_TO_ADDR
// end else
1583: GO 1599
// begin bc_kind2 := i [ 8 ] ;
1585: LD_ADDR_OWVAR 45
1589: PUSH
1590: LD_VAR 0 3
1594: PUSH
1595: LD_INT 8
1597: ARRAY
1598: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1599: LD_OWVAR 42
1603: PUSH
1604: LD_INT 0
1606: EQUAL
1607: IFFALSE 1725
// begin bc_type := b_warehouse ;
1609: LD_ADDR_OWVAR 42
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1617: LD_ADDR_EXP 36
1621: PUSH
1622: LD_VAR 0 3
1626: PUSH
1627: LD_INT 2
1629: ARRAY
1630: PPUSH
1631: LD_VAR 0 3
1635: PUSH
1636: LD_INT 3
1638: ARRAY
1639: PPUSH
1640: LD_VAR 0 3
1644: PUSH
1645: LD_INT 4
1647: ARRAY
1648: PPUSH
1649: CALL_OW 47
1653: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1654: LD_EXP 36
1658: PPUSH
1659: LD_STRING gamma
1661: PPUSH
1662: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1666: LD_EXP 36
1670: PPUSH
1671: CALL_OW 274
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: LD_INT 200
1681: PUSH
1682: LD_INT 150
1684: PUSH
1685: LD_INT 100
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PPUSH
1699: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1703: LD_EXP 36
1707: PPUSH
1708: CALL_OW 274
1712: PPUSH
1713: LD_INT 2
1715: PPUSH
1716: LD_INT 200
1718: PPUSH
1719: CALL_OW 277
// end else
1723: GO 1867
// begin if bc_type = 4 then
1725: LD_OWVAR 42
1729: PUSH
1730: LD_INT 4
1732: EQUAL
1733: IFFALSE 1782
// begin bc_type = 5 ;
1735: LD_ADDR_OWVAR 42
1739: PUSH
1740: LD_INT 5
1742: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1743: LD_ADDR_VAR 0 4
1747: PUSH
1748: LD_VAR 0 3
1752: PUSH
1753: LD_INT 2
1755: ARRAY
1756: PPUSH
1757: LD_VAR 0 3
1761: PUSH
1762: LD_INT 3
1764: ARRAY
1765: PPUSH
1766: LD_VAR 0 3
1770: PUSH
1771: LD_INT 4
1773: ARRAY
1774: PPUSH
1775: CALL_OW 47
1779: ST_TO_ADDR
// end else
1780: GO 1867
// begin bc_type := i [ 1 ] ;
1782: LD_ADDR_OWVAR 42
1786: PUSH
1787: LD_VAR 0 3
1791: PUSH
1792: LD_INT 1
1794: ARRAY
1795: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1796: LD_STRING 06_remoteVehs_1
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL_OW 30
1806: PUSH
1807: LD_INT 1
1809: EQUAL
1810: PUSH
1811: LD_OWVAR 42
1815: PUSH
1816: LD_INT 7
1818: EQUAL
1819: AND
1820: IFFALSE 1830
// bc_type := b_lab_full ;
1822: LD_ADDR_OWVAR 42
1826: PUSH
1827: LD_INT 8
1829: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_VAR 0 3
1839: PUSH
1840: LD_INT 2
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PPUSH
1853: LD_VAR 0 3
1857: PUSH
1858: LD_INT 4
1860: ARRAY
1861: PPUSH
1862: CALL_OW 47
1866: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1867: LD_VAR 0 4
1871: PPUSH
1872: CALL_OW 266
1876: PUSH
1877: LD_INT 32
1879: EQUAL
1880: IFFALSE 1900
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1882: LD_VAR 0 4
1886: PPUSH
1887: LD_VAR 0 3
1891: PUSH
1892: LD_INT 7
1894: ARRAY
1895: PPUSH
1896: CALL_OW 431
// end ;
1900: GO 1493
1902: POP
1903: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1904: LD_STRING 06_remoteVehs_1
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 30
1914: PUSH
1915: LD_INT 1
1917: EQUAL
1918: IFFALSE 2122
// begin bc_type = 36 ;
1920: LD_ADDR_OWVAR 42
1924: PUSH
1925: LD_INT 36
1927: ST_TO_ADDR
// bc_level = 4 ;
1928: LD_ADDR_OWVAR 43
1932: PUSH
1933: LD_INT 4
1935: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1936: LD_INT 62
1938: PPUSH
1939: LD_INT 12
1941: PPUSH
1942: LD_INT 3
1944: PPUSH
1945: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1949: LD_ADDR_VAR 0 3
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 3
1961: PUSH
1962: LD_INT 2
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_OWVAR 67
1977: ARRAY
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2120
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1982: LD_ADDR_OWVAR 37
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 2
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_OWVAR 67
2024: ARRAY
2025: ST_TO_ADDR
// vc_engine = 1 ;
2026: LD_ADDR_OWVAR 39
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// vc_control = 2 ;
2034: LD_ADDR_OWVAR 38
2038: PUSH
2039: LD_INT 2
2041: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2042: LD_ADDR_OWVAR 40
2046: PUSH
2047: LD_INT 3
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: LD_INT 5
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 12
2071: ARRAY
2072: ST_TO_ADDR
// veh = CreateVehicle ;
2073: LD_ADDR_VAR 0 5
2077: PUSH
2078: CALL_OW 45
2082: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2083: LD_VAR 0 5
2087: PPUSH
2088: LD_EXP 36
2092: PPUSH
2093: CALL_OW 250
2097: PPUSH
2098: LD_EXP 36
2102: PPUSH
2103: CALL_OW 251
2107: PPUSH
2108: LD_INT 7
2110: PPUSH
2111: LD_INT 0
2113: PPUSH
2114: CALL_OW 50
// end ;
2118: GO 1979
2120: POP
2121: POP
// end ; end ;
2122: LD_VAR 0 1
2126: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// uc_side = 1 ;
2133: LD_ADDR_OWVAR 20
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// uc_nation = 1 ;
2141: LD_ADDR_OWVAR 21
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2149: LD_ADDR_EXP 13
2153: PUSH
2154: LD_STRING 06c_Denis
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL 5526 0 2
2164: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2165: LD_EXP 13
2169: PPUSH
2170: LD_INT 4
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2180: LD_ADDR_EXP 14
2184: PUSH
2185: LD_STRING 06c_Joan
2187: PPUSH
2188: LD_INT 1
2190: PPUSH
2191: CALL 5526 0 2
2195: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2196: LD_EXP 14
2200: PPUSH
2201: LD_INT 4
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
2211: LD_STRING GladstoneIn07
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 30
2221: NOT
2222: IFFALSE 2290
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2224: LD_ADDR_EXP 8
2228: PUSH
2229: LD_STRING 06c_Gladstone
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 5526 0 2
2239: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2240: LD_EXP 8
2244: NOT
2245: PUSH
2246: LD_STRING GladstoneStayInDelta
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 30
2256: AND
2257: IFFALSE 2275
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2259: LD_ADDR_EXP 8
2263: PUSH
2264: LD_STRING 05_Gladstone
2266: PPUSH
2267: LD_INT 1
2269: PPUSH
2270: CALL 5526 0 2
2274: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2275: LD_EXP 8
2279: PPUSH
2280: LD_INT 4
2282: PPUSH
2283: LD_INT 0
2285: PPUSH
2286: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2290: LD_STRING LisaStayInDelta
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL_OW 30
2300: IFFALSE 2333
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2302: LD_ADDR_EXP 6
2306: PUSH
2307: LD_STRING 05_Lisa
2309: PPUSH
2310: LD_INT 1
2312: PPUSH
2313: CALL 5526 0 2
2317: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2318: LD_EXP 6
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: LD_INT 0
2328: PPUSH
2329: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2333: LD_STRING BobbyStayInDelta
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL_OW 30
2343: IFFALSE 2376
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2345: LD_ADDR_EXP 4
2349: PUSH
2350: LD_STRING 05_Bobby
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: CALL 5526 0 2
2360: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2361: LD_EXP 4
2365: PPUSH
2366: LD_INT 4
2368: PPUSH
2369: LD_INT 0
2371: PPUSH
2372: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2376: LD_STRING CyrusStayInDelta
2378: PPUSH
2379: LD_INT 0
2381: PPUSH
2382: CALL_OW 30
2386: IFFALSE 2419
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2388: LD_ADDR_EXP 5
2392: PUSH
2393: LD_STRING 05_Cyrus
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: CALL 5526 0 2
2403: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2404: LD_EXP 5
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: LD_INT 0
2414: PPUSH
2415: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2419: LD_STRING BrownStayInDelta
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: CALL_OW 30
2429: IFFALSE 2462
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
2431: LD_ADDR_EXP 2
2435: PUSH
2436: LD_STRING 05_Brown
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL 5526 0 2
2446: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2447: LD_EXP 2
2451: PPUSH
2452: LD_INT 4
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
2462: LD_STRING DonaldsonStayInDelta
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: CALL_OW 30
2472: IFFALSE 2505
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
2474: LD_ADDR_EXP 3
2478: PUSH
2479: LD_STRING 05_Donaldson
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL 5526 0 2
2489: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2490: LD_EXP 3
2494: PPUSH
2495: LD_INT 4
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_STRING OtherStayInDelta
2512: PPUSH
2513: CALL_OW 31
2517: ST_TO_ADDR
// if other then
2518: LD_VAR 0 4
2522: IFFALSE 2567
// for j = 1 to other do
2524: LD_ADDR_VAR 0 3
2528: PUSH
2529: DOUBLE
2530: LD_INT 1
2532: DEC
2533: ST_TO_ADDR
2534: LD_VAR 0 4
2538: PUSH
2539: FOR_TO
2540: IFFALSE 2565
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2542: LD_VAR 0 4
2546: PUSH
2547: LD_VAR 0 3
2551: ARRAY
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: LD_INT 0
2558: PPUSH
2559: CALL_OW 49
2563: GO 2539
2565: POP
2566: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2567: LD_ADDR_VAR 0 4
2571: PUSH
2572: LD_STRING 06_other_apemans
2574: PPUSH
2575: CALL_OW 31
2579: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 5
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 3
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_OWVAR 67
2603: ARRAY
2604: GREATEREQUAL
2605: IFFALSE 2634
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
2607: LD_ADDR_VAR 0 3
2611: PUSH
2612: LD_INT 5
2614: PUSH
2615: LD_INT 4
2617: PUSH
2618: LD_INT 3
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: ST_TO_ADDR
2632: GO 2644
// j := other ;
2634: LD_ADDR_VAR 0 3
2638: PUSH
2639: LD_VAR 0 4
2643: ST_TO_ADDR
// for i = 1 to j do
2644: LD_ADDR_VAR 0 2
2648: PUSH
2649: DOUBLE
2650: LD_INT 1
2652: DEC
2653: ST_TO_ADDR
2654: LD_VAR 0 3
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2685
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2662: LD_VAR 0 4
2666: PUSH
2667: LD_VAR 0 2
2671: ARRAY
2672: PPUSH
2673: LD_INT 4
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
2683: GO 2659
2685: POP
2686: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2687: LD_INT 4
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 1
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PPUSH
2714: CALL_OW 70
2718: PPUSH
2719: LD_INT 53
2721: PPUSH
2722: LD_INT 19
2724: PPUSH
2725: CALL_OW 111
// firstAttack = 1 ;
2729: LD_ADDR_EXP 32
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// end ;
2737: LD_VAR 0 1
2741: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: LD_STRING 07_vehicles
2756: PPUSH
2757: EMPTY
2758: PPUSH
2759: CALL_OW 30
2763: ST_TO_ADDR
// uc_side = 1 ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_INT 1
2771: ST_TO_ADDR
// uc_nation = 1 ;
2772: LD_ADDR_OWVAR 21
2776: PUSH
2777: LD_INT 1
2779: ST_TO_ADDR
// if vehicles > 0 then
2780: LD_VAR 0 4
2784: PUSH
2785: LD_INT 0
2787: GREATER
2788: IFFALSE 2927
// begin for i = 1 to vehicles do
2790: LD_ADDR_VAR 0 2
2794: PUSH
2795: DOUBLE
2796: LD_INT 1
2798: DEC
2799: ST_TO_ADDR
2800: LD_VAR 0 4
2804: PUSH
2805: FOR_TO
2806: IFFALSE 2925
// begin vc_chassis = vehicles [ i ] ;
2808: LD_ADDR_OWVAR 37
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_VAR 0 2
2822: ARRAY
2823: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2824: LD_ADDR_OWVAR 39
2828: PUSH
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: PUSH
2839: LD_INT 1
2841: PLUS
2842: ARRAY
2843: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2844: LD_ADDR_OWVAR 38
2848: PUSH
2849: LD_VAR 0 4
2853: PUSH
2854: LD_VAR 0 2
2858: PUSH
2859: LD_INT 2
2861: PLUS
2862: ARRAY
2863: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2864: LD_ADDR_OWVAR 40
2868: PUSH
2869: LD_VAR 0 4
2873: PUSH
2874: LD_VAR 0 2
2878: PUSH
2879: LD_INT 3
2881: PLUS
2882: ARRAY
2883: ST_TO_ADDR
// veh = CreateVehicle ;
2884: LD_ADDR_VAR 0 5
2888: PUSH
2889: CALL_OW 45
2893: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
2894: LD_VAR 0 5
2898: PPUSH
2899: LD_INT 4
2901: PPUSH
2902: LD_INT 0
2904: PPUSH
2905: CALL_OW 49
// i = i + 3 ;
2909: LD_ADDR_VAR 0 2
2913: PUSH
2914: LD_VAR 0 2
2918: PUSH
2919: LD_INT 3
2921: PLUS
2922: ST_TO_ADDR
// end ;
2923: GO 2805
2925: POP
2926: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2927: LD_ADDR_EXP 1
2931: PUSH
2932: LD_EXP 42
2936: PUSH
2937: LD_STRING JMM
2939: STR
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL 5526 0 2
2948: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2949: LD_EXP 11
2953: PUSH
2954: LD_INT 1
2956: EQUAL
2957: PUSH
2958: LD_EXP 11
2962: PUSH
2963: LD_INT 3
2965: EQUAL
2966: OR
2967: IFFALSE 2991
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
2969: LD_ADDR_EXP 2
2973: PUSH
2974: LD_EXP 42
2978: PUSH
2979: LD_STRING Brown
2981: STR
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: CALL 5526 0 2
2990: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
2991: LD_EXP 11
2995: PUSH
2996: LD_INT 2
2998: EQUAL
2999: PUSH
3000: LD_EXP 11
3004: PUSH
3005: LD_INT 3
3007: EQUAL
3008: OR
3009: IFFALSE 3033
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3011: LD_ADDR_EXP 3
3015: PUSH
3016: LD_EXP 42
3020: PUSH
3021: LD_STRING Donaldson
3023: STR
3024: PPUSH
3025: LD_INT 1
3027: PPUSH
3028: CALL 5526 0 2
3032: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3033: LD_ADDR_EXP 4
3037: PUSH
3038: LD_EXP 42
3042: PUSH
3043: LD_STRING Bobby
3045: STR
3046: PPUSH
3047: LD_INT 1
3049: PPUSH
3050: CALL 5526 0 2
3054: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3055: LD_ADDR_EXP 5
3059: PUSH
3060: LD_EXP 42
3064: PUSH
3065: LD_STRING Cyrus
3067: STR
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL 5526 0 2
3076: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3077: LD_ADDR_EXP 6
3081: PUSH
3082: LD_EXP 42
3086: PUSH
3087: LD_STRING Lisa
3089: STR
3090: PPUSH
3091: LD_INT 1
3093: PPUSH
3094: CALL 5526 0 2
3098: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3099: LD_ADDR_EXP 7
3103: PUSH
3104: LD_EXP 42
3108: PUSH
3109: LD_STRING Frank
3111: STR
3112: PPUSH
3113: LD_INT 1
3115: PPUSH
3116: CALL 5526 0 2
3120: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3121: LD_ADDR_EXP 8
3125: PUSH
3126: LD_EXP 42
3130: PUSH
3131: LD_STRING Gladstone
3133: STR
3134: PPUSH
3135: LD_INT 1
3137: PPUSH
3138: CALL 5526 0 2
3142: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3143: LD_ADDR_EXP 9
3147: PUSH
3148: LD_EXP 42
3152: PUSH
3153: LD_STRING Kikuchi
3155: STR
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: CALL 5526 0 2
3164: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3165: LD_EXP 11
3169: PUSH
3170: LD_INT 1
3172: EQUAL
3173: PUSH
3174: LD_EXP 11
3178: PUSH
3179: LD_INT 3
3181: EQUAL
3182: OR
3183: IFFALSE 3200
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3185: LD_EXP 2
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3200: LD_EXP 11
3204: PUSH
3205: LD_INT 2
3207: EQUAL
3208: PUSH
3209: LD_EXP 11
3213: PUSH
3214: LD_INT 3
3216: EQUAL
3217: OR
3218: IFFALSE 3235
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3220: LD_EXP 3
3224: PPUSH
3225: LD_INT 4
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3235: LD_ADDR_VAR 0 5
3239: PUSH
3240: LD_INT 4
3242: PPUSH
3243: LD_INT 22
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 21
3255: PUSH
3256: LD_INT 2
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 58
3265: PUSH
3266: EMPTY
3267: LIST
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 70
3278: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3279: LD_ADDR_EXP 1
3283: PUSH
3284: LD_EXP 42
3288: PUSH
3289: LD_STRING JMM
3291: STR
3292: PPUSH
3293: LD_INT 1
3295: PPUSH
3296: CALL 5526 0 2
3300: ST_TO_ADDR
// if veh > 0 then
3301: LD_VAR 0 5
3305: PUSH
3306: LD_INT 0
3308: GREATER
3309: IFFALSE 3331
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3311: LD_EXP 1
3315: PPUSH
3316: LD_VAR 0 5
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: PPUSH
3325: CALL_OW 52
// end else
3329: GO 3346
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3331: LD_EXP 1
3335: PPUSH
3336: LD_INT 4
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3346: LD_ADDR_VAR 0 5
3350: PUSH
3351: LD_INT 4
3353: PPUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 1
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 21
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 58
3376: PUSH
3377: EMPTY
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 70
3389: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3390: LD_ADDR_EXP 4
3394: PUSH
3395: LD_EXP 42
3399: PUSH
3400: LD_STRING Bobby
3402: STR
3403: PPUSH
3404: LD_INT 1
3406: PPUSH
3407: CALL 5526 0 2
3411: ST_TO_ADDR
// if veh > 0 then
3412: LD_VAR 0 5
3416: PUSH
3417: LD_INT 0
3419: GREATER
3420: IFFALSE 3442
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3422: LD_EXP 4
3426: PPUSH
3427: LD_VAR 0 5
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: PPUSH
3436: CALL_OW 52
// end else
3440: GO 3457
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3442: LD_EXP 4
3446: PPUSH
3447: LD_INT 4
3449: PPUSH
3450: LD_INT 0
3452: PPUSH
3453: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3457: LD_ADDR_VAR 0 5
3461: PUSH
3462: LD_INT 4
3464: PPUSH
3465: LD_INT 22
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 21
3477: PUSH
3478: LD_INT 2
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 58
3487: PUSH
3488: EMPTY
3489: LIST
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: PPUSH
3496: CALL_OW 70
3500: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3501: LD_ADDR_EXP 5
3505: PUSH
3506: LD_EXP 42
3510: PUSH
3511: LD_STRING Cyrus
3513: STR
3514: PPUSH
3515: LD_INT 1
3517: PPUSH
3518: CALL 5526 0 2
3522: ST_TO_ADDR
// if veh > 0 then
3523: LD_VAR 0 5
3527: PUSH
3528: LD_INT 0
3530: GREATER
3531: IFFALSE 3553
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3533: LD_EXP 5
3537: PPUSH
3538: LD_VAR 0 5
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 52
// end else
3551: GO 3568
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3553: LD_EXP 5
3557: PPUSH
3558: LD_INT 4
3560: PPUSH
3561: LD_INT 0
3563: PPUSH
3564: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3568: LD_ADDR_VAR 0 5
3572: PUSH
3573: LD_INT 4
3575: PPUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 1
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 2
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 58
3598: PUSH
3599: EMPTY
3600: LIST
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: PPUSH
3607: CALL_OW 70
3611: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3612: LD_ADDR_EXP 6
3616: PUSH
3617: LD_EXP 42
3621: PUSH
3622: LD_STRING Lisa
3624: STR
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: CALL 5526 0 2
3633: ST_TO_ADDR
// if veh > 0 then
3634: LD_VAR 0 5
3638: PUSH
3639: LD_INT 0
3641: GREATER
3642: IFFALSE 3664
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3644: LD_EXP 6
3648: PPUSH
3649: LD_VAR 0 5
3653: PUSH
3654: LD_INT 1
3656: ARRAY
3657: PPUSH
3658: CALL_OW 52
// end else
3662: GO 3679
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3664: LD_EXP 6
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3679: LD_ADDR_VAR 0 5
3683: PUSH
3684: LD_INT 4
3686: PPUSH
3687: LD_INT 22
3689: PUSH
3690: LD_INT 1
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 21
3699: PUSH
3700: LD_INT 2
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 58
3709: PUSH
3710: EMPTY
3711: LIST
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: LIST
3717: PPUSH
3718: CALL_OW 70
3722: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3723: LD_ADDR_EXP 7
3727: PUSH
3728: LD_EXP 42
3732: PUSH
3733: LD_STRING Frank
3735: STR
3736: PPUSH
3737: LD_INT 1
3739: PPUSH
3740: CALL 5526 0 2
3744: ST_TO_ADDR
// if veh > 0 then
3745: LD_VAR 0 5
3749: PUSH
3750: LD_INT 0
3752: GREATER
3753: IFFALSE 3775
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3755: LD_EXP 7
3759: PPUSH
3760: LD_VAR 0 5
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PPUSH
3769: CALL_OW 52
// end else
3773: GO 3790
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3775: LD_EXP 7
3779: PPUSH
3780: LD_INT 4
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3790: LD_ADDR_VAR 0 5
3794: PUSH
3795: LD_INT 4
3797: PPUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 1
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 21
3810: PUSH
3811: LD_INT 2
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: LD_INT 58
3820: PUSH
3821: EMPTY
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: PPUSH
3829: CALL_OW 70
3833: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3834: LD_ADDR_EXP 8
3838: PUSH
3839: LD_EXP 42
3843: PUSH
3844: LD_STRING Gladstone
3846: STR
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: CALL 5526 0 2
3855: ST_TO_ADDR
// if veh > 0 then
3856: LD_VAR 0 5
3860: PUSH
3861: LD_INT 0
3863: GREATER
3864: IFFALSE 3886
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3866: LD_EXP 8
3870: PPUSH
3871: LD_VAR 0 5
3875: PUSH
3876: LD_INT 1
3878: ARRAY
3879: PPUSH
3880: CALL_OW 52
// end else
3884: GO 3901
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3886: LD_EXP 8
3890: PPUSH
3891: LD_INT 4
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3901: LD_ADDR_VAR 0 5
3905: PUSH
3906: LD_INT 4
3908: PPUSH
3909: LD_INT 22
3911: PUSH
3912: LD_INT 1
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 21
3921: PUSH
3922: LD_INT 2
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: LD_INT 58
3931: PUSH
3932: EMPTY
3933: LIST
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: LIST
3939: PPUSH
3940: CALL_OW 70
3944: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3945: LD_ADDR_EXP 9
3949: PUSH
3950: LD_EXP 42
3954: PUSH
3955: LD_STRING Kikuchi
3957: STR
3958: PPUSH
3959: LD_INT 1
3961: PPUSH
3962: CALL 5526 0 2
3966: ST_TO_ADDR
// if veh > 0 then
3967: LD_VAR 0 5
3971: PUSH
3972: LD_INT 0
3974: GREATER
3975: IFFALSE 3997
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
3977: LD_EXP 9
3981: PPUSH
3982: LD_VAR 0 5
3986: PUSH
3987: LD_INT 1
3989: ARRAY
3990: PPUSH
3991: CALL_OW 52
// end else
3995: GO 4012
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
3997: LD_EXP 9
4001: PPUSH
4002: LD_INT 4
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: LD_STRING 07c_others
4019: PPUSH
4020: CALL_OW 31
4024: ST_TO_ADDR
// for i in other do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_VAR 0 3
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4129
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4038: LD_ADDR_VAR 0 5
4042: PUSH
4043: LD_INT 4
4045: PPUSH
4046: LD_INT 22
4048: PUSH
4049: LD_INT 1
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 21
4058: PUSH
4059: LD_INT 2
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 58
4068: PUSH
4069: EMPTY
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 70
4081: ST_TO_ADDR
// if veh > 0 then
4082: LD_VAR 0 5
4086: PUSH
4087: LD_INT 0
4089: GREATER
4090: IFFALSE 4112
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4092: LD_VAR 0 2
4096: PPUSH
4097: LD_VAR 0 5
4101: PUSH
4102: LD_INT 1
4104: ARRAY
4105: PPUSH
4106: CALL_OW 52
// end else
4110: GO 4127
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4112: LD_VAR 0 2
4116: PPUSH
4117: LD_INT 4
4119: PPUSH
4120: LD_INT 0
4122: PPUSH
4123: CALL_OW 49
// end ; end ;
4127: GO 4035
4129: POP
4130: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4131: LD_INT 4
4133: PPUSH
4134: LD_INT 22
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: PPUSH
4147: CALL_OW 70
4151: PPUSH
4152: LD_INT 53
4154: PPUSH
4155: LD_INT 19
4157: PPUSH
4158: CALL_OW 111
// end ;
4162: LD_VAR 0 1
4166: RET
// export function PrepareSikorsky ; begin
4167: LD_INT 0
4169: PPUSH
// uc_side = 4 ;
4170: LD_ADDR_OWVAR 20
4174: PUSH
4175: LD_INT 4
4177: ST_TO_ADDR
// uc_nation = 1 ;
4178: LD_ADDR_OWVAR 21
4182: PUSH
4183: LD_INT 1
4185: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4186: LD_ADDR_EXP 15
4190: PUSH
4191: LD_STRING Sikorski
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL 5526 0 2
4201: ST_TO_ADDR
// vc_engine = 1 ;
4202: LD_ADDR_OWVAR 39
4206: PUSH
4207: LD_INT 1
4209: ST_TO_ADDR
// vc_control = 1 ;
4210: LD_ADDR_OWVAR 38
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4218: LD_ADDR_OWVAR 40
4222: PUSH
4223: LD_INT 5
4225: PUSH
4226: LD_INT 3
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: PUSH
4237: LD_OWVAR 67
4241: ARRAY
4242: ST_TO_ADDR
// vc_chassis = 4 ;
4243: LD_ADDR_OWVAR 37
4247: PUSH
4248: LD_INT 4
4250: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4251: LD_ADDR_EXP 16
4255: PUSH
4256: CALL_OW 45
4260: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4261: LD_EXP 16
4265: PPUSH
4266: LD_INT 9
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4276: LD_EXP 15
4280: PPUSH
4281: LD_EXP 16
4285: PPUSH
4286: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4290: LD_EXP 16
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: CALL_OW 113
// end ;
4302: LD_VAR 0 1
4306: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4307: LD_INT 0
4309: PPUSH
4310: PPUSH
4311: PPUSH
4312: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4313: LD_ADDR_VAR 0 2
4317: PUSH
4318: DOUBLE
4319: LD_INT 1
4321: DEC
4322: ST_TO_ADDR
4323: LD_INT 8
4325: PUSH
4326: LD_INT 7
4328: PUSH
4329: LD_INT 7
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: PUSH
4337: LD_OWVAR 67
4341: ARRAY
4342: PUSH
4343: FOR_TO
4344: IFFALSE 4441
// begin uc_side = 4 ;
4346: LD_ADDR_OWVAR 20
4350: PUSH
4351: LD_INT 4
4353: ST_TO_ADDR
// uc_nation = 1 ;
4354: LD_ADDR_OWVAR 21
4358: PUSH
4359: LD_INT 1
4361: ST_TO_ADDR
// hc_name =  ;
4362: LD_ADDR_OWVAR 26
4366: PUSH
4367: LD_STRING 
4369: ST_TO_ADDR
// hc_gallery =  ;
4370: LD_ADDR_OWVAR 33
4374: PUSH
4375: LD_STRING 
4377: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4378: LD_INT 0
4380: PPUSH
4381: LD_INT 1
4383: PPUSH
4384: LD_INT 5
4386: PPUSH
4387: LD_INT 8
4389: PPUSH
4390: CALL_OW 12
4394: PPUSH
4395: CALL_OW 380
// un = CreateHuman ;
4399: LD_ADDR_VAR 0 3
4403: PUSH
4404: CALL_OW 44
4408: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: LD_INT 9
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4424: LD_VAR 0 3
4428: PPUSH
4429: LD_INT 53
4431: PPUSH
4432: LD_INT 23
4434: PPUSH
4435: CALL_OW 111
// end ;
4439: GO 4343
4441: POP
4442: POP
// for i = 1 to 3 do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_INT 3
4455: PUSH
4456: FOR_TO
4457: IFFALSE 4554
// begin uc_side = 4 ;
4459: LD_ADDR_OWVAR 20
4463: PUSH
4464: LD_INT 4
4466: ST_TO_ADDR
// uc_nation = 1 ;
4467: LD_ADDR_OWVAR 21
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_name =  ;
4475: LD_ADDR_OWVAR 26
4479: PUSH
4480: LD_STRING 
4482: ST_TO_ADDR
// hc_gallery =  ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING 
4490: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4491: LD_INT 0
4493: PPUSH
4494: LD_INT 4
4496: PPUSH
4497: LD_INT 5
4499: PPUSH
4500: LD_INT 8
4502: PPUSH
4503: CALL_OW 12
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 3
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4522: LD_VAR 0 3
4526: PPUSH
4527: LD_INT 9
4529: PPUSH
4530: LD_INT 0
4532: PPUSH
4533: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4537: LD_VAR 0 3
4541: PPUSH
4542: LD_INT 53
4544: PPUSH
4545: LD_INT 23
4547: PPUSH
4548: CALL_OW 111
// end ;
4552: GO 4456
4554: POP
4555: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4556: LD_ADDR_VAR 0 2
4560: PUSH
4561: DOUBLE
4562: LD_INT 1
4564: DEC
4565: ST_TO_ADDR
4566: LD_INT 9
4568: PUSH
4569: LD_INT 8
4571: PUSH
4572: LD_INT 7
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: PUSH
4580: LD_OWVAR 67
4584: ARRAY
4585: PUSH
4586: FOR_TO
4587: IFFALSE 4783
// begin uc_side = 4 ;
4589: LD_ADDR_OWVAR 20
4593: PUSH
4594: LD_INT 4
4596: ST_TO_ADDR
// uc_nation = 1 ;
4597: LD_ADDR_OWVAR 21
4601: PUSH
4602: LD_INT 1
4604: ST_TO_ADDR
// vc_engine = 1 ;
4605: LD_ADDR_OWVAR 39
4609: PUSH
4610: LD_INT 1
4612: ST_TO_ADDR
// vc_control = 1 ;
4613: LD_ADDR_OWVAR 38
4617: PUSH
4618: LD_INT 1
4620: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4621: LD_ADDR_OWVAR 40
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 6
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 4
4649: PPUSH
4650: CALL_OW 12
4654: ARRAY
4655: ST_TO_ADDR
// vc_chassis = 4 ;
4656: LD_ADDR_OWVAR 37
4660: PUSH
4661: LD_INT 4
4663: ST_TO_ADDR
// veh = CreateVehicle ;
4664: LD_ADDR_VAR 0 4
4668: PUSH
4669: CALL_OW 45
4673: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4674: LD_VAR 0 4
4678: PPUSH
4679: LD_INT 9
4681: PPUSH
4682: LD_INT 0
4684: PPUSH
4685: CALL_OW 49
// hc_name =  ;
4689: LD_ADDR_OWVAR 26
4693: PUSH
4694: LD_STRING 
4696: ST_TO_ADDR
// hc_gallery =  ;
4697: LD_ADDR_OWVAR 33
4701: PUSH
4702: LD_STRING 
4704: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4705: LD_INT 0
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: LD_INT 5
4713: PPUSH
4714: LD_INT 8
4716: PPUSH
4717: CALL_OW 12
4721: PPUSH
4722: CALL_OW 380
// un = CreateHuman ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: CALL_OW 44
4735: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4736: LD_VAR 0 3
4740: PPUSH
4741: LD_VAR 0 4
4745: PPUSH
4746: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4750: LD_VAR 0 4
4754: PUSH
4755: LD_VAR 0 3
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PPUSH
4764: LD_INT 53
4766: PPUSH
4767: LD_INT 23
4769: PPUSH
4770: CALL_OW 111
// wait ( 0 0$5 ) ;
4774: LD_INT 175
4776: PPUSH
4777: CALL_OW 67
// end ;
4781: GO 4586
4783: POP
4784: POP
// end ; end_of_file
4785: LD_VAR 0 1
4789: RET
// export function PrepareRussianCommander ; begin
4790: LD_INT 0
4792: PPUSH
// uc_side = 3 ;
4793: LD_ADDR_OWVAR 20
4797: PUSH
4798: LD_INT 3
4800: ST_TO_ADDR
// uc_nation = 3 ;
4801: LD_ADDR_OWVAR 21
4805: PUSH
4806: LD_INT 3
4808: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4809: LD_ADDR_EXP 23
4813: PUSH
4814: LD_STRING Borodin
4816: PPUSH
4817: CALL_OW 25
4821: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
4822: LD_EXP 23
4826: PPUSH
4827: LD_INT 25
4829: PPUSH
4830: LD_INT 0
4832: PPUSH
4833: CALL_OW 49
// end ;
4837: LD_VAR 0 1
4841: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4842: LD_INT 0
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
// for i = 1 to 10 do
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: DOUBLE
4854: LD_INT 1
4856: DEC
4857: ST_TO_ADDR
4858: LD_INT 10
4860: PUSH
4861: FOR_TO
4862: IFFALSE 4936
// begin uc_side = 6 ;
4864: LD_ADDR_OWVAR 20
4868: PUSH
4869: LD_INT 6
4871: ST_TO_ADDR
// uc_nation = 3 ;
4872: LD_ADDR_OWVAR 21
4876: PUSH
4877: LD_INT 3
4879: ST_TO_ADDR
// hc_gallery =  ;
4880: LD_ADDR_OWVAR 33
4884: PUSH
4885: LD_STRING 
4887: ST_TO_ADDR
// hc_name =  ;
4888: LD_ADDR_OWVAR 26
4892: PUSH
4893: LD_STRING 
4895: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 1
4901: PPUSH
4902: LD_INT 3
4904: PPUSH
4905: CALL_OW 380
// un = CreateHuman ;
4909: LD_ADDR_VAR 0 3
4913: PUSH
4914: CALL_OW 44
4918: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
4919: LD_VAR 0 3
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: LD_INT 0
4929: PPUSH
4930: CALL_OW 49
// end ;
4934: GO 4861
4936: POP
4937: POP
// for i = 1 to 3 do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 3
4950: PUSH
4951: FOR_TO
4952: IFFALSE 5101
// begin uc_side = 6 ;
4954: LD_ADDR_OWVAR 20
4958: PUSH
4959: LD_INT 6
4961: ST_TO_ADDR
// uc_nation = 3 ;
4962: LD_ADDR_OWVAR 21
4966: PUSH
4967: LD_INT 3
4969: ST_TO_ADDR
// vc_engine = 1 ;
4970: LD_ADDR_OWVAR 39
4974: PUSH
4975: LD_INT 1
4977: ST_TO_ADDR
// vc_control = 1 ;
4978: LD_ADDR_OWVAR 38
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
4986: LD_ADDR_OWVAR 40
4990: PUSH
4991: LD_INT 43
4993: PUSH
4994: LD_INT 44
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 1
5003: PPUSH
5004: LD_INT 2
5006: PPUSH
5007: CALL_OW 12
5011: ARRAY
5012: ST_TO_ADDR
// vc_chassis = 22 ;
5013: LD_ADDR_OWVAR 37
5017: PUSH
5018: LD_INT 22
5020: ST_TO_ADDR
// veh = CreateVehicle ;
5021: LD_ADDR_VAR 0 4
5025: PUSH
5026: CALL_OW 45
5030: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5031: LD_VAR 0 4
5035: PPUSH
5036: LD_INT 2
5038: PPUSH
5039: LD_INT 0
5041: PPUSH
5042: CALL_OW 49
// hc_gallery =  ;
5046: LD_ADDR_OWVAR 33
5050: PUSH
5051: LD_STRING 
5053: ST_TO_ADDR
// hc_name =  ;
5054: LD_ADDR_OWVAR 26
5058: PUSH
5059: LD_STRING 
5061: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5062: LD_INT 0
5064: PPUSH
5065: LD_INT 3
5067: PPUSH
5068: LD_INT 4
5070: PPUSH
5071: CALL_OW 380
// un = CreateHuman ;
5075: LD_ADDR_VAR 0 3
5079: PUSH
5080: CALL_OW 44
5084: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5085: LD_VAR 0 3
5089: PPUSH
5090: LD_VAR 0 4
5094: PPUSH
5095: CALL_OW 52
// end ;
5099: GO 4951
5101: POP
5102: POP
// end ;
5103: LD_VAR 0 1
5107: RET
// export function PrepareRussians ; var i , un ; begin
5108: LD_INT 0
5110: PPUSH
5111: PPUSH
5112: PPUSH
// for i = 1 to 14 do
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: DOUBLE
5119: LD_INT 1
5121: DEC
5122: ST_TO_ADDR
5123: LD_INT 14
5125: PUSH
5126: FOR_TO
5127: IFFALSE 5213
// begin uc_side = 3 ;
5129: LD_ADDR_OWVAR 20
5133: PUSH
5134: LD_INT 3
5136: ST_TO_ADDR
// uc_nation = 3 ;
5137: LD_ADDR_OWVAR 21
5141: PUSH
5142: LD_INT 3
5144: ST_TO_ADDR
// hc_gallery =  ;
5145: LD_ADDR_OWVAR 33
5149: PUSH
5150: LD_STRING 
5152: ST_TO_ADDR
// hc_name =  ;
5153: LD_ADDR_OWVAR 26
5157: PUSH
5158: LD_STRING 
5160: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5161: LD_INT 0
5163: PPUSH
5164: LD_INT 1
5166: PPUSH
5167: LD_EXP 24
5171: PPUSH
5172: LD_EXP 25
5176: PPUSH
5177: CALL_OW 12
5181: PPUSH
5182: CALL_OW 380
// un = CreateHuman ;
5186: LD_ADDR_VAR 0 3
5190: PUSH
5191: CALL_OW 44
5195: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5196: LD_VAR 0 3
5200: PPUSH
5201: LD_INT 3
5203: PPUSH
5204: LD_INT 0
5206: PPUSH
5207: CALL_OW 49
// end ;
5211: GO 5126
5213: POP
5214: POP
// for i = 1 to 6 do
5215: LD_ADDR_VAR 0 2
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 6
5227: PUSH
5228: FOR_TO
5229: IFFALSE 5315
// begin uc_side = 3 ;
5231: LD_ADDR_OWVAR 20
5235: PUSH
5236: LD_INT 3
5238: ST_TO_ADDR
// uc_nation = 3 ;
5239: LD_ADDR_OWVAR 21
5243: PUSH
5244: LD_INT 3
5246: ST_TO_ADDR
// hc_gallery =  ;
5247: LD_ADDR_OWVAR 33
5251: PUSH
5252: LD_STRING 
5254: ST_TO_ADDR
// hc_name =  ;
5255: LD_ADDR_OWVAR 26
5259: PUSH
5260: LD_STRING 
5262: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5263: LD_INT 0
5265: PPUSH
5266: LD_INT 2
5268: PPUSH
5269: LD_EXP 24
5273: PPUSH
5274: LD_EXP 25
5278: PPUSH
5279: CALL_OW 12
5283: PPUSH
5284: CALL_OW 380
// un = CreateHuman ;
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: CALL_OW 44
5297: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5298: LD_VAR 0 3
5302: PPUSH
5303: LD_INT 3
5305: PPUSH
5306: LD_INT 0
5308: PPUSH
5309: CALL_OW 49
// end ;
5313: GO 5228
5315: POP
5316: POP
// for i = 1 to 6 do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_INT 6
5329: PUSH
5330: FOR_TO
5331: IFFALSE 5417
// begin uc_side = 3 ;
5333: LD_ADDR_OWVAR 20
5337: PUSH
5338: LD_INT 3
5340: ST_TO_ADDR
// uc_nation = 3 ;
5341: LD_ADDR_OWVAR 21
5345: PUSH
5346: LD_INT 3
5348: ST_TO_ADDR
// hc_gallery =  ;
5349: LD_ADDR_OWVAR 33
5353: PUSH
5354: LD_STRING 
5356: ST_TO_ADDR
// hc_name =  ;
5357: LD_ADDR_OWVAR 26
5361: PUSH
5362: LD_STRING 
5364: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5365: LD_INT 0
5367: PPUSH
5368: LD_INT 3
5370: PPUSH
5371: LD_EXP 24
5375: PPUSH
5376: LD_EXP 25
5380: PPUSH
5381: CALL_OW 12
5385: PPUSH
5386: CALL_OW 380
// un = CreateHuman ;
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: CALL_OW 44
5399: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5400: LD_VAR 0 3
5404: PPUSH
5405: LD_INT 3
5407: PPUSH
5408: LD_INT 0
5410: PPUSH
5411: CALL_OW 49
// end ;
5415: GO 5330
5417: POP
5418: POP
// for i = 1 to 4 do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: DOUBLE
5425: LD_INT 1
5427: DEC
5428: ST_TO_ADDR
5429: LD_INT 4
5431: PUSH
5432: FOR_TO
5433: IFFALSE 5519
// begin uc_side = 3 ;
5435: LD_ADDR_OWVAR 20
5439: PUSH
5440: LD_INT 3
5442: ST_TO_ADDR
// uc_nation = 3 ;
5443: LD_ADDR_OWVAR 21
5447: PUSH
5448: LD_INT 3
5450: ST_TO_ADDR
// hc_gallery =  ;
5451: LD_ADDR_OWVAR 33
5455: PUSH
5456: LD_STRING 
5458: ST_TO_ADDR
// hc_name =  ;
5459: LD_ADDR_OWVAR 26
5463: PUSH
5464: LD_STRING 
5466: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5467: LD_INT 0
5469: PPUSH
5470: LD_INT 4
5472: PPUSH
5473: LD_EXP 24
5477: PPUSH
5478: LD_EXP 25
5482: PPUSH
5483: CALL_OW 12
5487: PPUSH
5488: CALL_OW 380
// un = CreateHuman ;
5492: LD_ADDR_VAR 0 3
5496: PUSH
5497: CALL_OW 44
5501: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5502: LD_VAR 0 3
5506: PPUSH
5507: LD_INT 3
5509: PPUSH
5510: LD_INT 0
5512: PPUSH
5513: CALL_OW 49
// end ;
5517: GO 5432
5519: POP
5520: POP
// end ; end_of_file
5521: LD_VAR 0 1
5525: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5526: LD_INT 0
5528: PPUSH
5529: PPUSH
// if exist_mode then
5530: LD_VAR 0 2
5534: IFFALSE 5553
// unit := CreateCharacter ( ident ) else
5536: LD_ADDR_VAR 0 4
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 34
5550: ST_TO_ADDR
5551: GO 5568
// unit := NewCharacter ( ident ) ;
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: LD_VAR 0 1
5562: PPUSH
5563: CALL_OW 25
5567: ST_TO_ADDR
// result := unit ;
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: LD_VAR 0 4
5577: ST_TO_ADDR
// end ;
5578: LD_VAR 0 3
5582: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5583: LD_INT 0
5585: PPUSH
5586: PPUSH
5587: PPUSH
// rnd = rand ( 1 , characters ) ;
5588: LD_ADDR_VAR 0 6
5592: PUSH
5593: LD_INT 1
5595: PPUSH
5596: LD_VAR 0 1
5600: PPUSH
5601: CALL_OW 12
5605: ST_TO_ADDR
// for i = 1 to characters do
5606: LD_ADDR_VAR 0 5
5610: PUSH
5611: DOUBLE
5612: LD_INT 1
5614: DEC
5615: ST_TO_ADDR
5616: LD_VAR 0 1
5620: PUSH
5621: FOR_TO
5622: IFFALSE 5732
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5624: LD_VAR 0 5
5628: PUSH
5629: LD_VAR 0 6
5633: EQUAL
5634: PUSH
5635: LD_VAR 0 1
5639: PUSH
5640: LD_VAR 0 5
5644: ARRAY
5645: PPUSH
5646: CALL_OW 258
5650: PUSH
5651: LD_INT 1
5653: EQUAL
5654: AND
5655: IFFALSE 5677
// Say ( characters [ i ] , dialogMID ) ;
5657: LD_VAR 0 1
5661: PUSH
5662: LD_VAR 0 5
5666: ARRAY
5667: PPUSH
5668: LD_VAR 0 2
5672: PPUSH
5673: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5677: LD_VAR 0 5
5681: PUSH
5682: LD_VAR 0 6
5686: EQUAL
5687: PUSH
5688: LD_VAR 0 1
5692: PUSH
5693: LD_VAR 0 5
5697: ARRAY
5698: PPUSH
5699: CALL_OW 258
5703: PUSH
5704: LD_INT 2
5706: EQUAL
5707: AND
5708: IFFALSE 5730
// Say ( characters [ i ] , dialogFID ) ;
5710: LD_VAR 0 1
5714: PUSH
5715: LD_VAR 0 5
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 3
5725: PPUSH
5726: CALL_OW 88
// end ;
5730: GO 5621
5732: POP
5733: POP
// end ;
5734: LD_VAR 0 4
5738: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
// uc_side := GetSide ( b ) ;
5744: LD_ADDR_OWVAR 20
5748: PUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: CALL_OW 255
5758: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5759: LD_ADDR_OWVAR 21
5763: PUSH
5764: LD_VAR 0 2
5768: PPUSH
5769: CALL_OW 248
5773: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5774: LD_INT 0
5776: PPUSH
5777: LD_INT 1
5779: PPUSH
5780: LD_VAR 0 1
5784: PPUSH
5785: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5789: LD_ADDR_VAR 0 5
5793: PUSH
5794: LD_VAR 0 2
5798: PPUSH
5799: CALL_OW 254
5803: PUSH
5804: LD_INT 3
5806: MINUS
5807: ST_TO_ADDR
// if dir < 0 then
5808: LD_VAR 0 5
5812: PUSH
5813: LD_INT 0
5815: LESS
5816: IFFALSE 5832
// dir := 6 + dir ;
5818: LD_ADDR_VAR 0 5
5822: PUSH
5823: LD_INT 6
5825: PUSH
5826: LD_VAR 0 5
5830: PLUS
5831: ST_TO_ADDR
// un := CreateHuman ;
5832: LD_ADDR_VAR 0 4
5836: PUSH
5837: CALL_OW 44
5841: ST_TO_ADDR
// SetDir ( un , dir ) ;
5842: LD_VAR 0 4
5846: PPUSH
5847: LD_VAR 0 5
5851: PPUSH
5852: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5856: LD_VAR 0 4
5860: PPUSH
5861: LD_VAR 0 2
5865: PPUSH
5866: CALL_OW 52
// end ;
5870: LD_VAR 0 3
5874: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5875: LD_INT 0
5877: PPUSH
5878: PPUSH
5879: PPUSH
5880: PPUSH
// for i = 1 to count do
5881: LD_ADDR_VAR 0 8
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_VAR 0 6
5895: PUSH
5896: FOR_TO
5897: IFFALSE 5978
// begin uc_side = side ;
5899: LD_ADDR_OWVAR 20
5903: PUSH
5904: LD_VAR 0 1
5908: ST_TO_ADDR
// uc_nation = nation ;
5909: LD_ADDR_OWVAR 21
5913: PUSH
5914: LD_VAR 0 2
5918: ST_TO_ADDR
// hc_gallery =  ;
5919: LD_ADDR_OWVAR 33
5923: PUSH
5924: LD_STRING 
5926: ST_TO_ADDR
// hc_name =  ;
5927: LD_ADDR_OWVAR 26
5931: PUSH
5932: LD_STRING 
5934: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5935: LD_INT 0
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_VAR 0 4
5947: PPUSH
5948: CALL_OW 380
// un = CreateHuman ;
5952: LD_ADDR_VAR 0 10
5956: PUSH
5957: CALL_OW 44
5961: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5962: LD_VAR 0 10
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: CALL_OW 52
// end ;
5976: GO 5896
5978: POP
5979: POP
// end ;
5980: LD_VAR 0 7
5984: RET
// export function PrepareDifficulty ; begin
5985: LD_INT 0
5987: PPUSH
// if Difficulty = 1 then
5988: LD_OWVAR 67
5992: PUSH
5993: LD_INT 1
5995: EQUAL
5996: IFFALSE 6014
// begin RuSolMinLevel = 4 ;
5998: LD_ADDR_EXP 24
6002: PUSH
6003: LD_INT 4
6005: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6006: LD_ADDR_EXP 25
6010: PUSH
6011: LD_INT 6
6013: ST_TO_ADDR
// end ; if Difficulty = 2 then
6014: LD_OWVAR 67
6018: PUSH
6019: LD_INT 2
6021: EQUAL
6022: IFFALSE 6092
// begin RuSolMinLevel = 5 ;
6024: LD_ADDR_EXP 24
6028: PUSH
6029: LD_INT 5
6031: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6032: LD_ADDR_EXP 25
6036: PUSH
6037: LD_INT 6
6039: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6040: LD_INT 51
6042: PPUSH
6043: LD_INT 3
6045: PPUSH
6046: LD_INT 1
6048: PPUSH
6049: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6053: LD_INT 57
6055: PPUSH
6056: LD_INT 3
6058: PPUSH
6059: LD_INT 1
6061: PPUSH
6062: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6066: LD_INT 57
6068: PPUSH
6069: LD_INT 6
6071: PPUSH
6072: LD_INT 2
6074: PPUSH
6075: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6079: LD_INT 51
6081: PPUSH
6082: LD_INT 6
6084: PPUSH
6085: LD_INT 2
6087: PPUSH
6088: CALL_OW 322
// end ; if Difficulty = 3 then
6092: LD_OWVAR 67
6096: PUSH
6097: LD_INT 3
6099: EQUAL
6100: IFFALSE 6183
// begin RuSolMinLevel = 5 ;
6102: LD_ADDR_EXP 24
6106: PUSH
6107: LD_INT 5
6109: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
6110: LD_ADDR_EXP 25
6114: PUSH
6115: LD_INT 7
6117: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6118: LD_INT 57
6120: PPUSH
6121: LD_INT 3
6123: PPUSH
6124: LD_INT 1
6126: PPUSH
6127: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6131: LD_INT 51
6133: PPUSH
6134: LD_INT 3
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6144: LD_INT 52
6146: PPUSH
6147: LD_INT 3
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6157: LD_INT 57
6159: PPUSH
6160: LD_INT 6
6162: PPUSH
6163: LD_INT 2
6165: PPUSH
6166: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6170: LD_INT 52
6172: PPUSH
6173: LD_INT 6
6175: PPUSH
6176: LD_INT 2
6178: PPUSH
6179: CALL_OW 322
// end ; end ;
6183: LD_VAR 0 1
6187: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6188: LD_INT 0
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6194: LD_ADDR_VAR 0 3
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_INT 3
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6228: LD_ADDR_VAR 0 4
6232: PUSH
6233: LD_INT 4
6235: PUSH
6236: LD_INT 75
6238: PUSH
6239: LD_INT 79
6241: PUSH
6242: LD_INT 2
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 4
6253: PUSH
6254: LD_INT 113
6256: PUSH
6257: LD_INT 94
6259: PUSH
6260: LD_INT 4
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 29
6271: PUSH
6272: LD_INT 106
6274: PUSH
6275: LD_INT 97
6277: PUSH
6278: LD_INT 3
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 26
6289: PUSH
6290: LD_INT 93
6292: PUSH
6293: LD_INT 97
6295: PUSH
6296: LD_INT 5
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: LD_INT 100
6310: PUSH
6311: LD_INT 89
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 17
6325: PUSH
6326: LD_INT 96
6328: PUSH
6329: LD_INT 89
6331: PUSH
6332: LD_INT 1
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 32
6343: PUSH
6344: LD_INT 78
6346: PUSH
6347: LD_INT 94
6349: PUSH
6350: LD_INT 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 32
6361: PUSH
6362: LD_INT 95
6364: PUSH
6365: LD_INT 82
6367: PUSH
6368: LD_INT 3
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 32
6379: PUSH
6380: LD_INT 104
6382: PUSH
6383: LD_INT 85
6385: PUSH
6386: LD_INT 2
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 32
6397: PUSH
6398: LD_INT 81
6400: PUSH
6401: LD_INT 78
6403: PUSH
6404: LD_INT 2
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 33
6415: PUSH
6416: LD_INT 109
6418: PUSH
6419: LD_INT 90
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 33
6433: PUSH
6434: LD_INT 88
6436: PUSH
6437: LD_INT 79
6439: PUSH
6440: LD_INT 3
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 33
6451: PUSH
6452: LD_INT 76
6454: PUSH
6455: LD_INT 87
6457: PUSH
6458: LD_INT 1
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 26
6469: PUSH
6470: LD_INT 96
6472: PUSH
6473: LD_INT 97
6475: PUSH
6476: LD_INT 5
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 26
6487: PUSH
6488: LD_INT 85
6490: PUSH
6491: LD_INT 84
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 6
6505: PUSH
6506: LD_INT 88
6508: PUSH
6509: LD_INT 95
6511: PUSH
6512: LD_INT 0
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 19
6523: PUSH
6524: LD_INT 103
6526: PUSH
6527: LD_INT 89
6529: PUSH
6530: LD_INT 4
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 16
6541: PUSH
6542: LD_INT 97
6544: PUSH
6545: LD_INT 86
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 24
6559: PUSH
6560: LD_INT 100
6562: PUSH
6563: LD_INT 85
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: ST_TO_ADDR
// for i := 1 to buildingsTab do
6596: LD_ADDR_VAR 0 2
6600: PUSH
6601: DOUBLE
6602: LD_INT 1
6604: DEC
6605: ST_TO_ADDR
6606: LD_VAR 0 4
6610: PUSH
6611: FOR_TO
6612: IFFALSE 6685
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6614: LD_VAR 0 3
6618: PPUSH
6619: LD_VAR 0 4
6623: PUSH
6624: LD_VAR 0 2
6628: ARRAY
6629: PUSH
6630: LD_INT 1
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 4
6638: PUSH
6639: LD_VAR 0 2
6643: ARRAY
6644: PUSH
6645: LD_INT 2
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PUSH
6654: LD_VAR 0 2
6658: ARRAY
6659: PUSH
6660: LD_INT 3
6662: ARRAY
6663: PPUSH
6664: LD_VAR 0 4
6668: PUSH
6669: LD_VAR 0 2
6673: ARRAY
6674: PUSH
6675: LD_INT 4
6677: ARRAY
6678: PPUSH
6679: CALL_OW 205
6683: GO 6611
6685: POP
6686: POP
// end ;
6687: LD_VAR 0 1
6691: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6692: LD_INT 0
6694: PPUSH
6695: PPUSH
// for i in charactersList do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: LD_VAR 0 1
6705: PUSH
6706: FOR_IN
6707: IFFALSE 6736
// begin if IsOk ( i ) then
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 302
6718: IFFALSE 6734
// SaveCharacters ( i , ident ) ;
6720: LD_VAR 0 4
6724: PPUSH
6725: LD_VAR 0 2
6729: PPUSH
6730: CALL_OW 38
// end ;
6734: GO 6706
6736: POP
6737: POP
// end ;
6738: LD_VAR 0 3
6742: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6743: LD_INT 0
6745: PPUSH
6746: PPUSH
6747: PPUSH
6748: PPUSH
// for i = 1 to 72 do
6749: LD_ADDR_VAR 0 5
6753: PUSH
6754: DOUBLE
6755: LD_INT 1
6757: DEC
6758: ST_TO_ADDR
6759: LD_INT 72
6761: PUSH
6762: FOR_TO
6763: IFFALSE 6821
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6765: LD_VAR 0 5
6769: PPUSH
6770: LD_VAR 0 1
6774: PPUSH
6775: CALL_OW 321
6779: PUSH
6780: LD_INT 1
6782: EQUAL
6783: PUSH
6784: LD_VAR 0 5
6788: PPUSH
6789: LD_VAR 0 3
6793: PPUSH
6794: CALL_OW 482
6798: PUSH
6799: LD_INT 1
6801: EQUAL
6802: AND
6803: IFFALSE 6819
// AddComResearch ( lab , i ) ;
6805: LD_VAR 0 2
6809: PPUSH
6810: LD_VAR 0 5
6814: PPUSH
6815: CALL_OW 184
6819: GO 6762
6821: POP
6822: POP
// end ;
6823: LD_VAR 0 4
6827: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6828: LD_INT 0
6830: PPUSH
6831: PPUSH
6832: PPUSH
6833: PPUSH
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6838: LD_ADDR_VAR 0 6
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_VAR 0 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 25
6857: PUSH
6858: LD_INT 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 56
6867: PUSH
6868: EMPTY
6869: LIST
6870: PUSH
6871: LD_INT 24
6873: PUSH
6874: LD_INT 700
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: LD_INT 60
6886: PUSH
6887: EMPTY
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 69
6905: PUSH
6906: LD_EXP 23
6910: PUSH
6911: EMPTY
6912: LIST
6913: DIFF
6914: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
6915: LD_ADDR_VAR 0 7
6919: PUSH
6920: LD_INT 22
6922: PUSH
6923: LD_VAR 0 1
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 25
6934: PUSH
6935: LD_INT 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 54
6944: PUSH
6945: EMPTY
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6958: LD_ADDR_VAR 0 8
6962: PUSH
6963: LD_INT 22
6965: PUSH
6966: LD_VAR 0 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 30
6977: PUSH
6978: LD_INT 32
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 58
6987: PUSH
6988: EMPTY
6989: LIST
6990: PUSH
6991: LD_INT 24
6993: PUSH
6994: LD_INT 251
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7012: LD_ADDR_VAR 0 10
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_VAR 0 1
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 2
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 4
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 5
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 24
7059: PUSH
7060: LD_INT 251
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: PPUSH
7072: CALL_OW 69
7076: ST_TO_ADDR
// if barrackList > 0 then
7077: LD_VAR 0 10
7081: PUSH
7082: LD_INT 0
7084: GREATER
7085: IFFALSE 7198
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7087: LD_VAR 0 8
7091: PUSH
7092: LD_INT 0
7094: EQUAL
7095: PUSH
7096: LD_INT 24
7098: PPUSH
7099: LD_INT 22
7101: PUSH
7102: LD_INT 1
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 21
7111: PUSH
7112: LD_INT 1
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 70
7127: PUSH
7128: LD_INT 0
7130: EQUAL
7131: AND
7132: IFFALSE 7181
// begin for i in soldiers_list do
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_VAR 0 6
7143: PUSH
7144: FOR_IN
7145: IFFALSE 7177
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7147: LD_VAR 0 4
7151: PPUSH
7152: LD_VAR 0 10
7156: PUSH
7157: LD_INT 1
7159: PPUSH
7160: LD_VAR 0 10
7164: PPUSH
7165: CALL_OW 12
7169: ARRAY
7170: PPUSH
7171: CALL_OW 120
7175: GO 7144
7177: POP
7178: POP
// end else
7179: GO 7198
// begin for i in barrackList do
7181: LD_ADDR_VAR 0 4
7185: PUSH
7186: LD_VAR 0 10
7190: PUSH
7191: FOR_IN
7192: IFFALSE 7196
// begin end ;
7194: GO 7191
7196: POP
7197: POP
// end ; end ; end ;
7198: LD_VAR 0 3
7202: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7203: LD_INT 0
7205: PPUSH
7206: PPUSH
7207: PPUSH
7208: PPUSH
7209: PPUSH
7210: PPUSH
// for i = 1 to infantryCount do
7211: LD_ADDR_VAR 0 8
7215: PUSH
7216: DOUBLE
7217: LD_INT 1
7219: DEC
7220: ST_TO_ADDR
7221: LD_VAR 0 5
7225: PUSH
7226: FOR_TO
7227: IFFALSE 7343
// begin uc_side = side ;
7229: LD_ADDR_OWVAR 20
7233: PUSH
7234: LD_VAR 0 1
7238: ST_TO_ADDR
// uc_nation = nation ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_VAR 0 3
7248: ST_TO_ADDR
// hc_class = 1 ;
7249: LD_ADDR_OWVAR 28
7253: PUSH
7254: LD_INT 1
7256: ST_TO_ADDR
// hc_name =  ;
7257: LD_ADDR_OWVAR 26
7261: PUSH
7262: LD_STRING 
7264: ST_TO_ADDR
// hc_gallery =  ;
7265: LD_ADDR_OWVAR 33
7269: PUSH
7270: LD_STRING 
7272: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7273: LD_INT 0
7275: PPUSH
7276: LD_INT 1
7278: PPUSH
7279: LD_EXP 24
7283: PPUSH
7284: LD_EXP 25
7288: PPUSH
7289: CALL_OW 12
7293: PPUSH
7294: CALL_OW 380
// un = CreateHuman ;
7298: LD_ADDR_VAR 0 10
7302: PUSH
7303: CALL_OW 44
7307: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7308: LD_VAR 0 10
7312: PPUSH
7313: LD_VAR 0 2
7317: PPUSH
7318: LD_INT 0
7320: PPUSH
7321: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7325: LD_ADDR_EXP 31
7329: PUSH
7330: LD_EXP 31
7334: PUSH
7335: LD_VAR 0 10
7339: ADD
7340: ST_TO_ADDR
// end ;
7341: GO 7226
7343: POP
7344: POP
// for i = 1 to vehCount do
7345: LD_ADDR_VAR 0 8
7349: PUSH
7350: DOUBLE
7351: LD_INT 1
7353: DEC
7354: ST_TO_ADDR
7355: LD_VAR 0 6
7359: PUSH
7360: FOR_TO
7361: IFFALSE 7568
// begin uc_side = side ;
7363: LD_ADDR_OWVAR 20
7367: PUSH
7368: LD_VAR 0 1
7372: ST_TO_ADDR
// uc_nation = nation ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_VAR 0 3
7382: ST_TO_ADDR
// vc_Chassis = 22 ;
7383: LD_ADDR_OWVAR 37
7387: PUSH
7388: LD_INT 22
7390: ST_TO_ADDR
// vc_engine = 1 ;
7391: LD_ADDR_OWVAR 39
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// vc_control = 1 ;
7399: LD_ADDR_OWVAR 38
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7407: LD_ADDR_OWVAR 40
7411: PUSH
7412: LD_INT 43
7414: PUSH
7415: LD_INT 44
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 1
7424: PPUSH
7425: LD_INT 2
7427: PPUSH
7428: CALL_OW 12
7432: ARRAY
7433: ST_TO_ADDR
// veh = CreateVehicle ;
7434: LD_ADDR_VAR 0 12
7438: PUSH
7439: CALL_OW 45
7443: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7444: LD_VAR 0 12
7448: PPUSH
7449: LD_VAR 0 2
7453: PPUSH
7454: LD_INT 0
7456: PPUSH
7457: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
7461: LD_ADDR_EXP 31
7465: PUSH
7466: LD_EXP 31
7470: PUSH
7471: LD_VAR 0 12
7475: ADD
7476: ST_TO_ADDR
// hc_class = 3 ;
7477: LD_ADDR_OWVAR 28
7481: PUSH
7482: LD_INT 3
7484: ST_TO_ADDR
// hc_name =  ;
7485: LD_ADDR_OWVAR 26
7489: PUSH
7490: LD_STRING 
7492: ST_TO_ADDR
// hc_gallery =  ;
7493: LD_ADDR_OWVAR 33
7497: PUSH
7498: LD_STRING 
7500: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7501: LD_INT 0
7503: PPUSH
7504: LD_INT 3
7506: PPUSH
7507: LD_EXP 24
7511: PPUSH
7512: LD_EXP 25
7516: PPUSH
7517: CALL_OW 12
7521: PPUSH
7522: CALL_OW 380
// un = CreateHuman ;
7526: LD_ADDR_VAR 0 10
7530: PUSH
7531: CALL_OW 44
7535: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7536: LD_VAR 0 10
7540: PPUSH
7541: LD_VAR 0 12
7545: PPUSH
7546: CALL_OW 52
// defenders_list = defenders_list ^ un ;
7550: LD_ADDR_EXP 31
7554: PUSH
7555: LD_EXP 31
7559: PUSH
7560: LD_VAR 0 10
7564: ADD
7565: ST_TO_ADDR
// end ;
7566: GO 7360
7568: POP
7569: POP
// end ;
7570: LD_VAR 0 7
7574: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7575: LD_INT 0
7577: PPUSH
7578: PPUSH
7579: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7580: LD_VAR 0 2
7584: PPUSH
7585: LD_INT 22
7587: PUSH
7588: LD_VAR 0 1
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: PPUSH
7600: CALL_OW 70
7604: PUSH
7605: LD_INT 0
7607: EQUAL
7608: PUSH
7609: LD_EXP 31
7613: PUSH
7614: LD_INT 0
7616: GREATER
7617: AND
7618: IFFALSE 7664
// begin for i in defenders_list do
7620: LD_ADDR_VAR 0 4
7624: PUSH
7625: LD_EXP 31
7629: PUSH
7630: FOR_IN
7631: IFFALSE 7662
// begin ComMoveXY ( i , 65 , 68 ) ;
7633: LD_VAR 0 4
7637: PPUSH
7638: LD_INT 65
7640: PPUSH
7641: LD_INT 68
7643: PPUSH
7644: CALL_OW 111
// SetFuel ( i , 100 ) ;
7648: LD_VAR 0 4
7652: PPUSH
7653: LD_INT 100
7655: PPUSH
7656: CALL_OW 240
// end ;
7660: GO 7630
7662: POP
7663: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: PPUSH
7684: CALL_OW 70
7688: PUSH
7689: LD_INT 0
7691: GREATER
7692: PUSH
7693: LD_EXP 31
7697: PUSH
7698: LD_INT 0
7700: GREATER
7701: AND
7702: IFFALSE 7870
// begin for i in defenders_list do
7704: LD_ADDR_VAR 0 4
7708: PUSH
7709: LD_EXP 31
7713: PUSH
7714: FOR_IN
7715: IFFALSE 7765
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7717: LD_ADDR_VAR 0 5
7721: PUSH
7722: LD_INT 22
7724: PUSH
7725: LD_VAR 0 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PPUSH
7734: CALL_OW 69
7738: PPUSH
7739: LD_VAR 0 4
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7749: LD_VAR 0 4
7753: PPUSH
7754: LD_VAR 0 5
7758: PPUSH
7759: CALL_OW 115
// end ;
7763: GO 7714
7765: POP
7766: POP
// if russianAI = 0 then
7767: LD_EXP 26
7771: PUSH
7772: LD_INT 0
7774: EQUAL
7775: IFFALSE 7870
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7777: LD_ADDR_VAR 0 4
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 25
7794: PUSH
7795: LD_INT 1
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PPUSH
7806: CALL_OW 69
7810: PUSH
7811: LD_EXP 23
7815: DIFF
7816: PUSH
7817: FOR_IN
7818: IFFALSE 7868
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7820: LD_ADDR_VAR 0 5
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_VAR 0 1
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 69
7841: PPUSH
7842: LD_VAR 0 4
7846: PPUSH
7847: CALL_OW 74
7851: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7852: LD_VAR 0 4
7856: PPUSH
7857: LD_VAR 0 5
7861: PPUSH
7862: CALL_OW 115
// end ;
7866: GO 7817
7868: POP
7869: POP
// end ; end ; end ;
7870: LD_VAR 0 3
7874: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7875: LD_INT 0
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7882: LD_ADDR_VAR 0 6
7886: PUSH
7887: LD_INT 22
7889: PUSH
7890: LD_VAR 0 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 2
7901: PUSH
7902: LD_INT 25
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 16
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 24
7929: PUSH
7930: LD_INT 1000
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7947: LD_ADDR_VAR 0 4
7951: PUSH
7952: LD_INT 22
7954: PUSH
7955: LD_VAR 0 1
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 21
7966: PUSH
7967: LD_INT 3
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 24
7979: PUSH
7980: LD_INT 1000
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: PPUSH
7999: CALL_OW 69
8003: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8004: LD_VAR 0 4
8008: PUSH
8009: LD_INT 0
8011: GREATER
8012: PUSH
8013: LD_VAR 0 6
8017: PUSH
8018: LD_INT 0
8020: GREATER
8021: AND
8022: IFFALSE 8088
// begin for i in engineerOk_list do
8024: LD_ADDR_VAR 0 5
8028: PUSH
8029: LD_VAR 0 6
8033: PUSH
8034: FOR_IN
8035: IFFALSE 8086
// begin for j in buildings_list do
8037: LD_ADDR_VAR 0 7
8041: PUSH
8042: LD_VAR 0 4
8046: PUSH
8047: FOR_IN
8048: IFFALSE 8082
// begin AddComExitBuilding ( i ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: CALL_OW 182
// wait ( 0 0$1 ) ;
8059: LD_INT 35
8061: PPUSH
8062: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8066: LD_VAR 0 5
8070: PPUSH
8071: LD_VAR 0 7
8075: PPUSH
8076: CALL_OW 190
// end ;
8080: GO 8047
8082: POP
8083: POP
// end ;
8084: GO 8034
8086: POP
8087: POP
// end ; if buildings_list = 0 then
8088: LD_VAR 0 4
8092: PUSH
8093: LD_INT 0
8095: EQUAL
8096: IFFALSE 8129
// begin for i in engineerOK_list do
8098: LD_ADDR_VAR 0 5
8102: PUSH
8103: LD_VAR 0 6
8107: PUSH
8108: FOR_IN
8109: IFFALSE 8127
// begin ComEnterUnit ( i , building ) ;
8111: LD_VAR 0 5
8115: PPUSH
8116: LD_VAR 0 2
8120: PPUSH
8121: CALL_OW 120
// end ;
8125: GO 8108
8127: POP
8128: POP
// end ; end ;
8129: LD_VAR 0 3
8133: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8138: LD_INT 22
8140: PUSH
8141: LD_VAR 0 1
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 25
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 69
8168: PUSH
8169: LD_INT 0
8171: GREATER
8172: PUSH
8173: LD_INT 22
8175: PUSH
8176: LD_VAR 0 1
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 21
8187: PUSH
8188: LD_INT 3
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 3
8197: PUSH
8198: LD_INT 24
8200: PUSH
8201: LD_INT 1000
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: LIST
8216: PPUSH
8217: CALL_OW 69
8221: PUSH
8222: LD_INT 0
8224: EQUAL
8225: AND
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: LD_INT 0
8234: GREATER
8235: AND
8236: IFFALSE 8335
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8238: LD_ADDR_VAR 0 4
8242: PUSH
8243: LD_INT 22
8245: PUSH
8246: LD_VAR 0 1
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 25
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 69
8273: PUSH
8274: FOR_IN
8275: IFFALSE 8333
// begin AddComExitBuilding ( i ) ;
8277: LD_VAR 0 4
8281: PPUSH
8282: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8286: LD_VAR 0 4
8290: PPUSH
8291: LD_VAR 0 2
8295: PUSH
8296: LD_INT 1
8298: ARRAY
8299: PPUSH
8300: LD_VAR 0 2
8304: PUSH
8305: LD_INT 2
8307: ARRAY
8308: PPUSH
8309: LD_VAR 0 2
8313: PUSH
8314: LD_INT 3
8316: ARRAY
8317: PPUSH
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 4
8325: ARRAY
8326: PPUSH
8327: CALL_OW 205
// end ;
8331: GO 8274
8333: POP
8334: POP
// end ; end ;
8335: LD_VAR 0 3
8339: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8340: LD_INT 0
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 250 ] , [ f_class , 4 ] ] ) ;
8347: LD_ADDR_VAR 0 6
8351: PUSH
8352: LD_INT 22
8354: PUSH
8355: LD_VAR 0 1
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 24
8366: PUSH
8367: LD_INT 250
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 25
8376: PUSH
8377: LD_INT 4
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: PPUSH
8389: CALL_OW 69
8393: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8394: LD_ADDR_VAR 0 9
8398: PUSH
8399: LD_VAR 0 3
8403: PPUSH
8404: LD_INT 22
8406: PUSH
8407: LD_VAR 0 1
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 3
8428: PUSH
8429: LD_INT 24
8431: PUSH
8432: LD_INT 750
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 70
8452: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8453: LD_VAR 0 9
8457: PUSH
8458: LD_INT 0
8460: GREATER
8461: PUSH
8462: LD_VAR 0 6
8466: PUSH
8467: LD_INT 0
8469: GREATER
8470: AND
8471: IFFALSE 8598
// begin for i = 1 to damageUnits do
8473: LD_ADDR_VAR 0 7
8477: PUSH
8478: DOUBLE
8479: LD_INT 1
8481: DEC
8482: ST_TO_ADDR
8483: LD_VAR 0 9
8487: PUSH
8488: FOR_TO
8489: IFFALSE 8513
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8491: LD_VAR 0 9
8495: PUSH
8496: LD_VAR 0 7
8500: ARRAY
8501: PPUSH
8502: LD_VAR 0 2
8506: PPUSH
8507: CALL_OW 113
8511: GO 8488
8513: POP
8514: POP
// for i in sci_list do
8515: LD_ADDR_VAR 0 7
8519: PUSH
8520: LD_VAR 0 6
8524: PUSH
8525: FOR_IN
8526: IFFALSE 8594
// begin ComExitBuilding ( i ) ;
8528: LD_VAR 0 7
8532: PPUSH
8533: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8537: LD_ADDR_VAR 0 8
8541: PUSH
8542: LD_VAR 0 2
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 70
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8590
// begin AddComHeal ( i , j ) ;
8567: LD_VAR 0 7
8571: PPUSH
8572: LD_VAR 0 8
8576: PPUSH
8577: CALL_OW 188
// wait ( 1 1$0 ) ;
8581: LD_INT 2100
8583: PPUSH
8584: CALL_OW 67
// end ;
8588: GO 8564
8590: POP
8591: POP
// end ;
8592: GO 8525
8594: POP
8595: POP
// end else
8596: GO 8612
// begin AddComEnterUnit ( sci_list , build ) ;
8598: LD_VAR 0 6
8602: PPUSH
8603: LD_VAR 0 4
8607: PPUSH
8608: CALL_OW 180
// end ; end ;
8612: LD_VAR 0 5
8616: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8617: LD_INT 0
8619: PPUSH
8620: PPUSH
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
8626: PPUSH
8627: PPUSH
8628: PPUSH
8629: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8630: LD_ADDR_VAR 0 9
8634: PUSH
8635: LD_INT 22
8637: PUSH
8638: LD_VAR 0 1
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 33
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 24
8669: PUSH
8670: LD_INT 660
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 3
8679: PUSH
8680: LD_INT 58
8682: PUSH
8683: EMPTY
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: LD_INT 34
8695: PUSH
8696: LD_INT 53
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PPUSH
8715: CALL_OW 69
8719: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8720: LD_ADDR_VAR 0 10
8724: PUSH
8725: LD_INT 22
8727: PUSH
8728: LD_VAR 0 1
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 21
8739: PUSH
8740: LD_INT 2
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 33
8749: PUSH
8750: LD_INT 1
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 3
8759: PUSH
8760: LD_INT 24
8762: PUSH
8763: LD_INT 660
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: PPUSH
8780: CALL_OW 69
8784: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8785: LD_ADDR_VAR 0 11
8789: PUSH
8790: LD_VAR 0 2
8794: PPUSH
8795: LD_INT 22
8797: PUSH
8798: LD_VAR 0 1
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 21
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 33
8819: PUSH
8820: LD_INT 1
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: LD_INT 24
8832: PUSH
8833: LD_INT 1000
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 70
8854: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8855: LD_ADDR_VAR 0 12
8859: PUSH
8860: LD_VAR 0 2
8864: PPUSH
8865: LD_INT 22
8867: PUSH
8868: LD_VAR 0 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 21
8879: PUSH
8880: LD_INT 2
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 33
8889: PUSH
8890: LD_INT 1
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: LD_INT 24
8899: PUSH
8900: LD_INT 1000
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 58
8909: PUSH
8910: EMPTY
8911: LIST
8912: PUSH
8913: LD_INT 3
8915: PUSH
8916: LD_INT 34
8918: PUSH
8919: LD_INT 53
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: PPUSH
8938: CALL_OW 70
8942: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8943: LD_ADDR_VAR 0 13
8947: PUSH
8948: EMPTY
8949: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8950: LD_ADDR_VAR 0 14
8954: PUSH
8955: LD_VAR 0 2
8959: PPUSH
8960: LD_INT 22
8962: PUSH
8963: LD_VAR 0 1
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: LD_INT 25
8974: PUSH
8975: LD_INT 3
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PPUSH
8986: CALL_OW 70
8990: ST_TO_ADDR
// if damageVehicle_list > 0 then
8991: LD_VAR 0 10
8995: PUSH
8996: LD_INT 0
8998: GREATER
8999: IFFALSE 9037
// begin for i in damageVehicle_list do
9001: LD_ADDR_VAR 0 7
9005: PUSH
9006: LD_VAR 0 10
9010: PUSH
9011: FOR_IN
9012: IFFALSE 9035
// begin ComMoveXY ( i , repX , repY ) ;
9014: LD_VAR 0 7
9018: PPUSH
9019: LD_VAR 0 3
9023: PPUSH
9024: LD_VAR 0 4
9028: PPUSH
9029: CALL_OW 111
// end ;
9033: GO 9011
9035: POP
9036: POP
// end ; if vehicleNeedRepair_list > 0 then
9037: LD_VAR 0 11
9041: PUSH
9042: LD_INT 0
9044: GREATER
9045: IFFALSE 9132
// begin for i in vehicleNeedRepair_list do
9047: LD_ADDR_VAR 0 7
9051: PUSH
9052: LD_VAR 0 11
9056: PUSH
9057: FOR_IN
9058: IFFALSE 9130
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9060: LD_ADDR_VAR 0 13
9064: PUSH
9065: LD_VAR 0 13
9069: PUSH
9070: LD_VAR 0 7
9074: PPUSH
9075: CALL_OW 313
9079: ADD
9080: ST_TO_ADDR
// for j in mechanicInside_list do
9081: LD_ADDR_VAR 0 8
9085: PUSH
9086: LD_VAR 0 13
9090: PUSH
9091: FOR_IN
9092: IFFALSE 9126
// begin ComExitVehicle ( i ) ;
9094: LD_VAR 0 7
9098: PPUSH
9099: CALL_OW 121
// wait ( 0 0$1 ) ;
9103: LD_INT 35
9105: PPUSH
9106: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9110: LD_VAR 0 7
9114: PPUSH
9115: LD_VAR 0 8
9119: PPUSH
9120: CALL_OW 129
// end ;
9124: GO 9091
9126: POP
9127: POP
// end ;
9128: GO 9057
9130: POP
9131: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9132: LD_VAR 0 12
9136: PUSH
9137: LD_INT 0
9139: GREATER
9140: IFFALSE 9180
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9142: LD_VAR 0 14
9146: PUSH
9147: LD_INT 1
9149: ARRAY
9150: PPUSH
9151: LD_VAR 0 12
9155: PUSH
9156: LD_INT 1
9158: ARRAY
9159: PPUSH
9160: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9164: LD_VAR 0 12
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: LD_INT 100
9175: PPUSH
9176: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9180: LD_VAR 0 9
9184: PUSH
9185: LD_INT 0
9187: GREATER
9188: IFFALSE 9379
// begin for i in vehicleOK_list do
9190: LD_ADDR_VAR 0 7
9194: PUSH
9195: LD_VAR 0 9
9199: PUSH
9200: FOR_IN
9201: IFFALSE 9377
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9203: LD_ADDR_VAR 0 15
9207: PUSH
9208: LD_INT 22
9210: PUSH
9211: LD_VAR 0 5
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PPUSH
9220: CALL_OW 69
9224: PPUSH
9225: LD_VAR 0 7
9229: PPUSH
9230: CALL_OW 74
9234: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9235: LD_ADDR_VAR 0 16
9239: PUSH
9240: LD_INT 22
9242: PUSH
9243: LD_VAR 0 5
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: LD_INT 59
9257: PUSH
9258: EMPTY
9259: LIST
9260: PUSH
9261: LD_INT 21
9263: PUSH
9264: LD_INT 1
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 21
9273: PUSH
9274: LD_INT 2
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: PPUSH
9294: CALL_OW 69
9298: PPUSH
9299: LD_VAR 0 7
9303: PPUSH
9304: CALL_OW 74
9308: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9309: LD_VAR 0 7
9313: PPUSH
9314: LD_VAR 0 15
9318: PPUSH
9319: CALL_OW 296
9323: PUSH
9324: LD_INT 8
9326: PLUS
9327: PUSH
9328: LD_VAR 0 7
9332: PPUSH
9333: LD_VAR 0 16
9337: PPUSH
9338: CALL_OW 296
9342: LESS
9343: IFFALSE 9361
// begin ComAttackUnit ( i , target1 ) ;
9345: LD_VAR 0 7
9349: PPUSH
9350: LD_VAR 0 15
9354: PPUSH
9355: CALL_OW 115
// end else
9359: GO 9375
// begin ComAttackUnit ( i , target2 ) ;
9361: LD_VAR 0 7
9365: PPUSH
9366: LD_VAR 0 16
9370: PPUSH
9371: CALL_OW 115
// end ; end ;
9375: GO 9200
9377: POP
9378: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9379: LD_ADDR_VAR 0 7
9383: PUSH
9384: LD_VAR 0 2
9388: PPUSH
9389: LD_INT 22
9391: PUSH
9392: LD_VAR 0 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 25
9403: PUSH
9404: LD_INT 3
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PPUSH
9415: CALL_OW 70
9419: NOT
9420: PUSH
9421: FOR_IN
9422: IFFALSE 9445
// ComMoveXY ( i , repX , repY ) ;
9424: LD_VAR 0 7
9428: PPUSH
9429: LD_VAR 0 3
9433: PPUSH
9434: LD_VAR 0 4
9438: PPUSH
9439: CALL_OW 111
9443: GO 9421
9445: POP
9446: POP
// end ;
9447: LD_VAR 0 6
9451: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
9460: PPUSH
9461: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9462: LD_INT 22
9464: PUSH
9465: LD_VAR 0 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 21
9476: PUSH
9477: LD_INT 2
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PPUSH
9488: CALL_OW 69
9492: PUSH
9493: LD_VAR 0 3
9497: LESSEQUAL
9498: IFFALSE 9565
// for i = 1 to vehCount do
9500: LD_ADDR_VAR 0 10
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_VAR 0 3
9514: PUSH
9515: FOR_TO
9516: IFFALSE 9563
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9518: LD_VAR 0 2
9522: PPUSH
9523: LD_VAR 0 8
9527: PPUSH
9528: LD_VAR 0 6
9532: PPUSH
9533: LD_VAR 0 7
9537: PPUSH
9538: LD_VAR 0 5
9542: PUSH
9543: LD_INT 1
9545: PPUSH
9546: LD_VAR 0 5
9550: PPUSH
9551: CALL_OW 12
9555: ARRAY
9556: PPUSH
9557: CALL_OW 185
9561: GO 9515
9563: POP
9564: POP
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9572: LD_INT 22
9574: PUSH
9575: LD_VAR 0 1
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 21
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 24
9596: PUSH
9597: LD_INT 250
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 69
9613: PUSH
9614: LD_VAR 0 3
9618: GREATEREQUAL
9619: IFFALSE 9565
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9621: LD_INT 22
9623: PUSH
9624: LD_VAR 0 1
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 21
9635: PUSH
9636: LD_INT 2
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 24
9645: PUSH
9646: LD_INT 250
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 69
9662: PUSH
9663: LD_VAR 0 3
9667: GREATEREQUAL
9668: IFFALSE 10011
// begin repeat begin wait ( 0 0$1 ) ;
9670: LD_INT 35
9672: PPUSH
9673: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9677: LD_INT 22
9679: PUSH
9680: LD_VAR 0 1
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 21
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 24
9701: PUSH
9702: LD_INT 651
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 69
9718: PUSH
9719: LD_INT 0
9721: GREATER
9722: IFFALSE 9950
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9724: LD_ADDR_VAR 0 10
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_VAR 0 1
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 21
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: LD_INT 24
9753: PUSH
9754: LD_INT 651
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: LIST
9765: PPUSH
9766: CALL_OW 69
9770: PUSH
9771: FOR_IN
9772: IFFALSE 9948
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9774: LD_ADDR_VAR 0 15
9778: PUSH
9779: LD_INT 22
9781: PUSH
9782: LD_VAR 0 4
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 69
9795: PPUSH
9796: LD_VAR 0 10
9800: PPUSH
9801: CALL_OW 74
9805: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9806: LD_ADDR_VAR 0 16
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_VAR 0 4
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 2
9825: PUSH
9826: LD_INT 59
9828: PUSH
9829: EMPTY
9830: LIST
9831: PUSH
9832: LD_INT 21
9834: PUSH
9835: LD_INT 1
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: PPUSH
9865: CALL_OW 69
9869: PPUSH
9870: LD_VAR 0 10
9874: PPUSH
9875: CALL_OW 74
9879: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9880: LD_VAR 0 10
9884: PPUSH
9885: LD_VAR 0 15
9889: PPUSH
9890: CALL_OW 296
9894: PUSH
9895: LD_INT 8
9897: PLUS
9898: PUSH
9899: LD_VAR 0 10
9903: PPUSH
9904: LD_VAR 0 16
9908: PPUSH
9909: CALL_OW 296
9913: LESS
9914: IFFALSE 9932
// begin ComAttackUnit ( i , target1 ) ;
9916: LD_VAR 0 10
9920: PPUSH
9921: LD_VAR 0 15
9925: PPUSH
9926: CALL_OW 115
// end else
9930: GO 9946
// begin ComAttackUnit ( i , target2 ) ;
9932: LD_VAR 0 10
9936: PPUSH
9937: LD_VAR 0 16
9941: PPUSH
9942: CALL_OW 115
// end ; end ;
9946: GO 9771
9948: POP
9949: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
9950: LD_INT 22
9952: PUSH
9953: LD_VAR 0 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 21
9964: PUSH
9965: LD_INT 2
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PPUSH
9976: CALL_OW 69
9980: PUSH
9981: LD_INT 0
9983: EQUAL
9984: PUSH
9985: LD_INT 22
9987: PUSH
9988: LD_VAR 0 4
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: PPUSH
10000: CALL_OW 69
10004: PUSH
10005: LD_INT 0
10007: EQUAL
10008: OR
10009: IFFALSE 9670
// end ; end ;
10011: LD_VAR 0 9
10015: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10016: LD_INT 0
10018: PPUSH
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
10023: PPUSH
10024: PPUSH
10025: PPUSH
10026: PPUSH
10027: PPUSH
10028: PPUSH
// for i = 1 to medicCount do
10029: LD_ADDR_VAR 0 14
10033: PUSH
10034: DOUBLE
10035: LD_INT 1
10037: DEC
10038: ST_TO_ADDR
10039: LD_VAR 0 7
10043: PUSH
10044: FOR_TO
10045: IFFALSE 10127
// begin uc_side = side ;
10047: LD_ADDR_OWVAR 20
10051: PUSH
10052: LD_VAR 0 1
10056: ST_TO_ADDR
// uc_nation = nation ;
10057: LD_ADDR_OWVAR 21
10061: PUSH
10062: LD_VAR 0 2
10066: ST_TO_ADDR
// hc_name =  ;
10067: LD_ADDR_OWVAR 26
10071: PUSH
10072: LD_STRING 
10074: ST_TO_ADDR
// hc_gallery =  ;
10075: LD_ADDR_OWVAR 33
10079: PUSH
10080: LD_STRING 
10082: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10083: LD_INT 0
10085: PPUSH
10086: LD_INT 4
10088: PPUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: CALL_OW 380
// un = CreateHuman ;
10098: LD_ADDR_VAR 0 16
10102: PUSH
10103: CALL_OW 44
10107: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10108: LD_VAR 0 16
10112: PPUSH
10113: LD_VAR 0 9
10117: PPUSH
10118: LD_INT 0
10120: PPUSH
10121: CALL_OW 49
// end ;
10125: GO 10044
10127: POP
10128: POP
// for i = 1 to soldierCount do
10129: LD_ADDR_VAR 0 14
10133: PUSH
10134: DOUBLE
10135: LD_INT 1
10137: DEC
10138: ST_TO_ADDR
10139: LD_VAR 0 3
10143: PUSH
10144: FOR_TO
10145: IFFALSE 10227
// begin uc_side = side ;
10147: LD_ADDR_OWVAR 20
10151: PUSH
10152: LD_VAR 0 1
10156: ST_TO_ADDR
// uc_nation = nation ;
10157: LD_ADDR_OWVAR 21
10161: PUSH
10162: LD_VAR 0 2
10166: ST_TO_ADDR
// hc_name =  ;
10167: LD_ADDR_OWVAR 26
10171: PUSH
10172: LD_STRING 
10174: ST_TO_ADDR
// hc_gallery =  ;
10175: LD_ADDR_OWVAR 33
10179: PUSH
10180: LD_STRING 
10182: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10183: LD_INT 0
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: LD_VAR 0 8
10193: PPUSH
10194: CALL_OW 380
// un = CreateHuman ;
10198: LD_ADDR_VAR 0 16
10202: PUSH
10203: CALL_OW 44
10207: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10208: LD_VAR 0 16
10212: PPUSH
10213: LD_VAR 0 9
10217: PPUSH
10218: LD_INT 0
10220: PPUSH
10221: CALL_OW 49
// end ;
10225: GO 10144
10227: POP
10228: POP
// for i = 1 to sniperCount do
10229: LD_ADDR_VAR 0 14
10233: PUSH
10234: DOUBLE
10235: LD_INT 1
10237: DEC
10238: ST_TO_ADDR
10239: LD_VAR 0 4
10243: PUSH
10244: FOR_TO
10245: IFFALSE 10327
// begin uc_side = side ;
10247: LD_ADDR_OWVAR 20
10251: PUSH
10252: LD_VAR 0 1
10256: ST_TO_ADDR
// uc_nation = nation ;
10257: LD_ADDR_OWVAR 21
10261: PUSH
10262: LD_VAR 0 2
10266: ST_TO_ADDR
// hc_name =  ;
10267: LD_ADDR_OWVAR 26
10271: PUSH
10272: LD_STRING 
10274: ST_TO_ADDR
// hc_gallery =  ;
10275: LD_ADDR_OWVAR 33
10279: PUSH
10280: LD_STRING 
10282: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10283: LD_INT 0
10285: PPUSH
10286: LD_INT 5
10288: PPUSH
10289: LD_VAR 0 8
10293: PPUSH
10294: CALL_OW 380
// un = CreateHuman ;
10298: LD_ADDR_VAR 0 16
10302: PUSH
10303: CALL_OW 44
10307: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10308: LD_VAR 0 16
10312: PPUSH
10313: LD_VAR 0 9
10317: PPUSH
10318: LD_INT 0
10320: PPUSH
10321: CALL_OW 49
// end ;
10325: GO 10244
10327: POP
10328: POP
// for i = 1 to bazookCount do
10329: LD_ADDR_VAR 0 14
10333: PUSH
10334: DOUBLE
10335: LD_INT 1
10337: DEC
10338: ST_TO_ADDR
10339: LD_VAR 0 5
10343: PUSH
10344: FOR_TO
10345: IFFALSE 10427
// begin uc_side = side ;
10347: LD_ADDR_OWVAR 20
10351: PUSH
10352: LD_VAR 0 1
10356: ST_TO_ADDR
// uc_nation = nation ;
10357: LD_ADDR_OWVAR 21
10361: PUSH
10362: LD_VAR 0 2
10366: ST_TO_ADDR
// hc_name =  ;
10367: LD_ADDR_OWVAR 26
10371: PUSH
10372: LD_STRING 
10374: ST_TO_ADDR
// hc_gallery =  ;
10375: LD_ADDR_OWVAR 33
10379: PUSH
10380: LD_STRING 
10382: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10383: LD_INT 0
10385: PPUSH
10386: LD_INT 9
10388: PPUSH
10389: LD_VAR 0 8
10393: PPUSH
10394: CALL_OW 380
// un = CreateHuman ;
10398: LD_ADDR_VAR 0 16
10402: PUSH
10403: CALL_OW 44
10407: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10408: LD_VAR 0 16
10412: PPUSH
10413: LD_VAR 0 9
10417: PPUSH
10418: LD_INT 0
10420: PPUSH
10421: CALL_OW 49
// end ;
10425: GO 10344
10427: POP
10428: POP
// for i = 1 to mortalCount do
10429: LD_ADDR_VAR 0 14
10433: PUSH
10434: DOUBLE
10435: LD_INT 1
10437: DEC
10438: ST_TO_ADDR
10439: LD_VAR 0 6
10443: PUSH
10444: FOR_TO
10445: IFFALSE 10527
// begin uc_side = side ;
10447: LD_ADDR_OWVAR 20
10451: PUSH
10452: LD_VAR 0 1
10456: ST_TO_ADDR
// uc_nation = nation ;
10457: LD_ADDR_OWVAR 21
10461: PUSH
10462: LD_VAR 0 2
10466: ST_TO_ADDR
// hc_name =  ;
10467: LD_ADDR_OWVAR 26
10471: PUSH
10472: LD_STRING 
10474: ST_TO_ADDR
// hc_gallery =  ;
10475: LD_ADDR_OWVAR 33
10479: PUSH
10480: LD_STRING 
10482: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10483: LD_INT 0
10485: PPUSH
10486: LD_INT 8
10488: PPUSH
10489: LD_VAR 0 8
10493: PPUSH
10494: CALL_OW 380
// un = CreateHuman ;
10498: LD_ADDR_VAR 0 16
10502: PUSH
10503: CALL_OW 44
10507: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10508: LD_VAR 0 16
10512: PPUSH
10513: LD_VAR 0 9
10517: PPUSH
10518: LD_INT 0
10520: PPUSH
10521: CALL_OW 49
// end ;
10525: GO 10444
10527: POP
10528: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10529: LD_ADDR_VAR 0 19
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_VAR 0 1
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 2
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 25
10561: PUSH
10562: LD_INT 5
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 25
10571: PUSH
10572: LD_INT 8
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 25
10581: PUSH
10582: LD_INT 9
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10605: LD_ADDR_VAR 0 18
10609: PUSH
10610: LD_INT 22
10612: PUSH
10613: LD_VAR 0 1
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 25
10624: PUSH
10625: LD_INT 4
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 69
10640: ST_TO_ADDR
// for i in medic_list do
10641: LD_ADDR_VAR 0 14
10645: PUSH
10646: LD_VAR 0 18
10650: PUSH
10651: FOR_IN
10652: IFFALSE 10670
// ComMoveToArea ( i , healArea ) ;
10654: LD_VAR 0 14
10658: PPUSH
10659: LD_VAR 0 10
10663: PPUSH
10664: CALL_OW 113
10668: GO 10651
10670: POP
10671: POP
// if strategy = 1 then
10672: LD_VAR 0 12
10676: PUSH
10677: LD_INT 1
10679: EQUAL
10680: IFFALSE 11226
// begin repeat wait ( 0 0$3 ) ;
10682: LD_INT 105
10684: PPUSH
10685: CALL_OW 67
// for i in soldiersOK_list do
10689: LD_ADDR_VAR 0 14
10693: PUSH
10694: LD_VAR 0 19
10698: PUSH
10699: FOR_IN
10700: IFFALSE 10764
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10702: LD_VAR 0 14
10706: PPUSH
10707: LD_INT 91
10709: PPUSH
10710: LD_INT 63
10712: PPUSH
10713: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
10717: LD_VAR 0 14
10721: PPUSH
10722: LD_INT 101
10724: PPUSH
10725: LD_INT 53
10727: PPUSH
10728: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
10732: LD_VAR 0 14
10736: PPUSH
10737: LD_INT 75
10739: PPUSH
10740: LD_INT 23
10742: PPUSH
10743: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
10747: LD_VAR 0 14
10751: PPUSH
10752: LD_INT 78
10754: PPUSH
10755: LD_INT 8
10757: PPUSH
10758: CALL_OW 174
// end ;
10762: GO 10699
10764: POP
10765: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10766: LD_INT 12
10768: PPUSH
10769: LD_INT 22
10771: PUSH
10772: LD_VAR 0 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PPUSH
10781: CALL_OW 70
10785: PUSH
10786: LD_INT 2
10788: GREATER
10789: IFFALSE 10682
// repeat wait ( 0 0$1 ) ;
10791: LD_INT 35
10793: PPUSH
10794: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10798: LD_ADDR_VAR 0 17
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_VAR 0 1
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 3
10820: PUSH
10821: LD_INT 24
10823: PUSH
10824: LD_INT 550
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 24
10837: PUSH
10838: LD_INT 250
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10859: LD_ADDR_VAR 0 19
10863: PUSH
10864: LD_INT 22
10866: PUSH
10867: LD_VAR 0 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: LD_INT 25
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 25
10891: PUSH
10892: LD_INT 5
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 25
10901: PUSH
10902: LD_INT 8
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 25
10911: PUSH
10912: LD_INT 9
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 24
10928: PUSH
10929: LD_INT 1000
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: PPUSH
10941: CALL_OW 69
10945: ST_TO_ADDR
// if medicCount > 0 then
10946: LD_VAR 0 7
10950: PUSH
10951: LD_INT 0
10953: GREATER
10954: IFFALSE 11028
// begin if damageUnit_list > 0 then
10956: LD_VAR 0 17
10960: PUSH
10961: LD_INT 0
10963: GREATER
10964: IFFALSE 11028
// begin for i in damageUnit_list do
10966: LD_ADDR_VAR 0 14
10970: PUSH
10971: LD_VAR 0 17
10975: PUSH
10976: FOR_IN
10977: IFFALSE 11026
// begin ComMoveToArea ( i , healArea ) ;
10979: LD_VAR 0 14
10983: PPUSH
10984: LD_VAR 0 10
10988: PPUSH
10989: CALL_OW 113
// for j in medic_list do
10993: LD_ADDR_VAR 0 15
10997: PUSH
10998: LD_VAR 0 18
11002: PUSH
11003: FOR_IN
11004: IFFALSE 11022
// AddComHeal ( j , i ) ;
11006: LD_VAR 0 15
11010: PPUSH
11011: LD_VAR 0 14
11015: PPUSH
11016: CALL_OW 188
11020: GO 11003
11022: POP
11023: POP
// end ;
11024: GO 10976
11026: POP
11027: POP
// end ; end ; for i in soldiersOK_list do
11028: LD_ADDR_VAR 0 14
11032: PUSH
11033: LD_VAR 0 19
11037: PUSH
11038: FOR_IN
11039: IFFALSE 11215
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11041: LD_ADDR_VAR 0 22
11045: PUSH
11046: LD_INT 22
11048: PUSH
11049: LD_VAR 0 11
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PPUSH
11058: CALL_OW 69
11062: PPUSH
11063: LD_VAR 0 14
11067: PPUSH
11068: CALL_OW 74
11072: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11073: LD_ADDR_VAR 0 23
11077: PUSH
11078: LD_INT 22
11080: PUSH
11081: LD_VAR 0 11
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 2
11092: PUSH
11093: LD_INT 59
11095: PUSH
11096: EMPTY
11097: LIST
11098: PUSH
11099: LD_INT 21
11101: PUSH
11102: LD_INT 1
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 21
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: EMPTY
11130: LIST
11131: PPUSH
11132: CALL_OW 69
11136: PPUSH
11137: LD_VAR 0 14
11141: PPUSH
11142: CALL_OW 74
11146: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11147: LD_VAR 0 14
11151: PPUSH
11152: LD_VAR 0 22
11156: PPUSH
11157: CALL_OW 296
11161: PUSH
11162: LD_INT 6
11164: PLUS
11165: PUSH
11166: LD_VAR 0 14
11170: PPUSH
11171: LD_VAR 0 23
11175: PPUSH
11176: CALL_OW 296
11180: LESS
11181: IFFALSE 11199
// begin ComAttackUnit ( i , target1 ) ;
11183: LD_VAR 0 14
11187: PPUSH
11188: LD_VAR 0 22
11192: PPUSH
11193: CALL_OW 115
// end else
11197: GO 11213
// begin ComAttackUnit ( i , target2 ) ;
11199: LD_VAR 0 14
11203: PPUSH
11204: LD_VAR 0 23
11208: PPUSH
11209: CALL_OW 115
// end ; end ;
11213: GO 11038
11215: POP
11216: POP
// until soldiersOK_list = [ ] ;
11217: LD_VAR 0 19
11221: PUSH
11222: EMPTY
11223: EQUAL
11224: IFFALSE 10791
// end ; if strategy = 2 then
11226: LD_VAR 0 12
11230: PUSH
11231: LD_INT 2
11233: EQUAL
11234: IFFALSE 11750
// begin repeat wait ( 0 0$1 ) ;
11236: LD_INT 35
11238: PPUSH
11239: CALL_OW 67
// for i in soldiersOK_list do
11243: LD_ADDR_VAR 0 14
11247: PUSH
11248: LD_VAR 0 19
11252: PUSH
11253: FOR_IN
11254: IFFALSE 11288
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11256: LD_VAR 0 14
11260: PPUSH
11261: LD_INT 91
11263: PPUSH
11264: LD_INT 63
11266: PPUSH
11267: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11271: LD_VAR 0 14
11275: PPUSH
11276: LD_INT 75
11278: PPUSH
11279: LD_INT 33
11281: PPUSH
11282: CALL_OW 174
// end ;
11286: GO 11253
11288: POP
11289: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11290: LD_INT 13
11292: PPUSH
11293: LD_INT 22
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PPUSH
11305: CALL_OW 70
11309: PUSH
11310: LD_INT 2
11312: GREATER
11313: IFFALSE 11236
// repeat wait ( 0 0$3 ) ;
11315: LD_INT 105
11317: PPUSH
11318: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11322: LD_ADDR_VAR 0 17
11326: PUSH
11327: LD_INT 22
11329: PUSH
11330: LD_VAR 0 1
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 1
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: LD_INT 24
11347: PUSH
11348: LD_INT 550
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 24
11361: PUSH
11362: LD_INT 250
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 69
11382: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11383: LD_ADDR_VAR 0 19
11387: PUSH
11388: LD_INT 22
11390: PUSH
11391: LD_VAR 0 1
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: LD_INT 25
11405: PUSH
11406: LD_INT 1
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 25
11415: PUSH
11416: LD_INT 5
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 25
11425: PUSH
11426: LD_INT 8
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 25
11435: PUSH
11436: LD_INT 9
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 24
11452: PUSH
11453: LD_INT 1000
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: PPUSH
11465: CALL_OW 69
11469: ST_TO_ADDR
// if medicCount > 0 then
11470: LD_VAR 0 7
11474: PUSH
11475: LD_INT 0
11477: GREATER
11478: IFFALSE 11552
// begin if damageUnit_list > 0 then
11480: LD_VAR 0 17
11484: PUSH
11485: LD_INT 0
11487: GREATER
11488: IFFALSE 11552
// begin for i in damageUnit_list do
11490: LD_ADDR_VAR 0 14
11494: PUSH
11495: LD_VAR 0 17
11499: PUSH
11500: FOR_IN
11501: IFFALSE 11550
// begin ComMoveToArea ( i , healArea ) ;
11503: LD_VAR 0 14
11507: PPUSH
11508: LD_VAR 0 10
11512: PPUSH
11513: CALL_OW 113
// for j in medic_list do
11517: LD_ADDR_VAR 0 15
11521: PUSH
11522: LD_VAR 0 18
11526: PUSH
11527: FOR_IN
11528: IFFALSE 11546
// AddComHeal ( j , i ) ;
11530: LD_VAR 0 15
11534: PPUSH
11535: LD_VAR 0 14
11539: PPUSH
11540: CALL_OW 188
11544: GO 11527
11546: POP
11547: POP
// end ;
11548: GO 11500
11550: POP
11551: POP
// end ; end ; for i in soldiersOK_list do
11552: LD_ADDR_VAR 0 14
11556: PUSH
11557: LD_VAR 0 19
11561: PUSH
11562: FOR_IN
11563: IFFALSE 11739
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11565: LD_ADDR_VAR 0 22
11569: PUSH
11570: LD_INT 22
11572: PUSH
11573: LD_VAR 0 11
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: PPUSH
11587: LD_VAR 0 14
11591: PPUSH
11592: CALL_OW 74
11596: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11597: LD_ADDR_VAR 0 23
11601: PUSH
11602: LD_INT 22
11604: PUSH
11605: LD_VAR 0 11
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: LD_INT 59
11619: PUSH
11620: EMPTY
11621: LIST
11622: PUSH
11623: LD_INT 21
11625: PUSH
11626: LD_INT 1
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 21
11635: PUSH
11636: LD_INT 2
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: PPUSH
11656: CALL_OW 69
11660: PPUSH
11661: LD_VAR 0 14
11665: PPUSH
11666: CALL_OW 74
11670: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11671: LD_VAR 0 14
11675: PPUSH
11676: LD_VAR 0 22
11680: PPUSH
11681: CALL_OW 296
11685: PUSH
11686: LD_INT 6
11688: PLUS
11689: PUSH
11690: LD_VAR 0 14
11694: PPUSH
11695: LD_VAR 0 23
11699: PPUSH
11700: CALL_OW 296
11704: LESS
11705: IFFALSE 11723
// begin ComAttackUnit ( i , target1 ) ;
11707: LD_VAR 0 14
11711: PPUSH
11712: LD_VAR 0 22
11716: PPUSH
11717: CALL_OW 115
// end else
11721: GO 11737
// begin ComAttackUnit ( i , target2 ) ;
11723: LD_VAR 0 14
11727: PPUSH
11728: LD_VAR 0 23
11732: PPUSH
11733: CALL_OW 115
// end ; end ;
11737: GO 11562
11739: POP
11740: POP
// until soldiersOK_list = [ ] ;
11741: LD_VAR 0 19
11745: PUSH
11746: EMPTY
11747: EQUAL
11748: IFFALSE 11315
// end ; if strategy = 3 then
11750: LD_VAR 0 12
11754: PUSH
11755: LD_INT 3
11757: EQUAL
11758: IFFALSE 12304
// begin repeat wait ( 0 0$3 ) ;
11760: LD_INT 105
11762: PPUSH
11763: CALL_OW 67
// for i in soldiersOK_list do
11767: LD_ADDR_VAR 0 14
11771: PUSH
11772: LD_VAR 0 19
11776: PUSH
11777: FOR_IN
11778: IFFALSE 11842
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11780: LD_VAR 0 14
11784: PPUSH
11785: LD_INT 63
11787: PPUSH
11788: LD_INT 71
11790: PPUSH
11791: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
11795: LD_VAR 0 14
11799: PPUSH
11800: LD_INT 35
11802: PPUSH
11803: LD_INT 44
11805: PPUSH
11806: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
11810: LD_VAR 0 14
11814: PPUSH
11815: LD_INT 23
11817: PPUSH
11818: LD_INT 18
11820: PPUSH
11821: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
11825: LD_VAR 0 14
11829: PPUSH
11830: LD_INT 26
11832: PPUSH
11833: LD_INT 12
11835: PPUSH
11836: CALL_OW 174
// end ;
11840: GO 11777
11842: POP
11843: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11844: LD_INT 14
11846: PPUSH
11847: LD_INT 22
11849: PUSH
11850: LD_VAR 0 1
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PPUSH
11859: CALL_OW 70
11863: PUSH
11864: LD_INT 2
11866: GREATER
11867: IFFALSE 11760
// repeat wait ( 0 0$1 ) ;
11869: LD_INT 35
11871: PPUSH
11872: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11876: LD_ADDR_VAR 0 17
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 1
11895: PUSH
11896: LD_INT 3
11898: PUSH
11899: LD_INT 24
11901: PUSH
11902: LD_INT 550
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 24
11915: PUSH
11916: LD_INT 250
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 69
11936: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11937: LD_ADDR_VAR 0 19
11941: PUSH
11942: LD_INT 22
11944: PUSH
11945: LD_VAR 0 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 25
11959: PUSH
11960: LD_INT 1
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 25
11969: PUSH
11970: LD_INT 5
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 25
11979: PUSH
11980: LD_INT 8
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 25
11989: PUSH
11990: LD_INT 9
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 24
12006: PUSH
12007: LD_INT 1000
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 69
12023: ST_TO_ADDR
// if medicCount > 0 then
12024: LD_VAR 0 7
12028: PUSH
12029: LD_INT 0
12031: GREATER
12032: IFFALSE 12106
// begin if damageUnit_list > 0 then
12034: LD_VAR 0 17
12038: PUSH
12039: LD_INT 0
12041: GREATER
12042: IFFALSE 12106
// begin for i in damageUnit_list do
12044: LD_ADDR_VAR 0 14
12048: PUSH
12049: LD_VAR 0 17
12053: PUSH
12054: FOR_IN
12055: IFFALSE 12104
// begin ComMoveToArea ( i , healArea ) ;
12057: LD_VAR 0 14
12061: PPUSH
12062: LD_VAR 0 10
12066: PPUSH
12067: CALL_OW 113
// for j in medic_list do
12071: LD_ADDR_VAR 0 15
12075: PUSH
12076: LD_VAR 0 18
12080: PUSH
12081: FOR_IN
12082: IFFALSE 12100
// AddComHeal ( j , i ) ;
12084: LD_VAR 0 15
12088: PPUSH
12089: LD_VAR 0 14
12093: PPUSH
12094: CALL_OW 188
12098: GO 12081
12100: POP
12101: POP
// end ;
12102: GO 12054
12104: POP
12105: POP
// end ; end ; for i in soldiersOK_list do
12106: LD_ADDR_VAR 0 14
12110: PUSH
12111: LD_VAR 0 19
12115: PUSH
12116: FOR_IN
12117: IFFALSE 12293
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12119: LD_ADDR_VAR 0 22
12123: PUSH
12124: LD_INT 22
12126: PUSH
12127: LD_VAR 0 11
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PPUSH
12136: CALL_OW 69
12140: PPUSH
12141: LD_VAR 0 14
12145: PPUSH
12146: CALL_OW 74
12150: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12151: LD_ADDR_VAR 0 23
12155: PUSH
12156: LD_INT 22
12158: PUSH
12159: LD_VAR 0 11
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 59
12173: PUSH
12174: EMPTY
12175: LIST
12176: PUSH
12177: LD_INT 21
12179: PUSH
12180: LD_INT 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 21
12189: PUSH
12190: LD_INT 2
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: PPUSH
12210: CALL_OW 69
12214: PPUSH
12215: LD_VAR 0 14
12219: PPUSH
12220: CALL_OW 74
12224: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12225: LD_VAR 0 14
12229: PPUSH
12230: LD_VAR 0 22
12234: PPUSH
12235: CALL_OW 296
12239: PUSH
12240: LD_INT 6
12242: PLUS
12243: PUSH
12244: LD_VAR 0 14
12248: PPUSH
12249: LD_VAR 0 23
12253: PPUSH
12254: CALL_OW 296
12258: LESS
12259: IFFALSE 12277
// begin ComAttackUnit ( i , target1 ) ;
12261: LD_VAR 0 14
12265: PPUSH
12266: LD_VAR 0 22
12270: PPUSH
12271: CALL_OW 115
// end else
12275: GO 12291
// begin ComAttackUnit ( i , target2 ) ;
12277: LD_VAR 0 14
12281: PPUSH
12282: LD_VAR 0 23
12286: PPUSH
12287: CALL_OW 115
// end ; end ;
12291: GO 12116
12293: POP
12294: POP
// until soldiersOK_list = [ ] ;
12295: LD_VAR 0 19
12299: PUSH
12300: EMPTY
12301: EQUAL
12302: IFFALSE 11869
// end ; end ;
12304: LD_VAR 0 13
12308: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12309: LD_INT 0
12311: PPUSH
12312: PPUSH
12313: PPUSH
12314: PPUSH
12315: PPUSH
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
// amChassisTab = [ ] ;
12322: LD_ADDR_VAR 0 19
12326: PUSH
12327: EMPTY
12328: ST_TO_ADDR
// arChassisTab = [ ] ;
12329: LD_ADDR_VAR 0 18
12333: PUSH
12334: EMPTY
12335: ST_TO_ADDR
// ruChassisTab = [ ] ;
12336: LD_ADDR_VAR 0 17
12340: PUSH
12341: EMPTY
12342: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12343: LD_INT 35
12345: PPUSH
12346: CALL_OW 67
// if nation = 1 then
12350: LD_VAR 0 5
12354: PUSH
12355: LD_INT 1
12357: EQUAL
12358: IFFALSE 12849
// begin uc_side = side ;
12360: LD_ADDR_OWVAR 20
12364: PUSH
12365: LD_VAR 0 2
12369: ST_TO_ADDR
// uc_nation = nation ;
12370: LD_ADDR_OWVAR 21
12374: PUSH
12375: LD_VAR 0 5
12379: ST_TO_ADDR
// vc_engine = vehengine ;
12380: LD_ADDR_OWVAR 39
12384: PUSH
12385: LD_VAR 0 6
12389: ST_TO_ADDR
// vc_control = vehcontrol ;
12390: LD_ADDR_OWVAR 38
12394: PUSH
12395: LD_VAR 0 7
12399: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12400: LD_ADDR_OWVAR 40
12404: PUSH
12405: LD_VAR 0 10
12409: PUSH
12410: LD_INT 1
12412: PPUSH
12413: LD_VAR 0 10
12417: PPUSH
12418: CALL_OW 12
12422: ARRAY
12423: ST_TO_ADDR
// for j = 1 to AMWeapon do
12424: LD_ADDR_VAR 0 14
12428: PUSH
12429: DOUBLE
12430: LD_INT 1
12432: DEC
12433: ST_TO_ADDR
12434: LD_VAR 0 10
12438: PUSH
12439: FOR_TO
12440: IFFALSE 12741
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12442: LD_VAR 0 10
12446: PUSH
12447: LD_VAR 0 14
12451: ARRAY
12452: PUSH
12453: LD_INT 2
12455: EQUAL
12456: PUSH
12457: LD_VAR 0 10
12461: PUSH
12462: LD_VAR 0 14
12466: ARRAY
12467: PUSH
12468: LD_INT 3
12470: EQUAL
12471: OR
12472: IFFALSE 12525
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12474: LD_ADDR_VAR 0 19
12478: PUSH
12479: LD_INT 1
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: LD_INT 4
12490: PUSH
12491: LD_INT 5
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12501: LD_ADDR_OWVAR 37
12505: PUSH
12506: LD_VAR 0 19
12510: PUSH
12511: LD_INT 1
12513: PPUSH
12514: LD_VAR 0 19
12518: PPUSH
12519: CALL_OW 12
12523: ARRAY
12524: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12525: LD_VAR 0 10
12529: PUSH
12530: LD_VAR 0 14
12534: ARRAY
12535: PUSH
12536: LD_INT 4
12538: EQUAL
12539: PUSH
12540: LD_VAR 0 10
12544: PUSH
12545: LD_VAR 0 14
12549: ARRAY
12550: PUSH
12551: LD_INT 5
12553: EQUAL
12554: OR
12555: PUSH
12556: LD_VAR 0 10
12560: PUSH
12561: LD_VAR 0 14
12565: ARRAY
12566: PUSH
12567: LD_INT 9
12569: EQUAL
12570: OR
12571: PUSH
12572: LD_VAR 0 10
12576: PUSH
12577: LD_VAR 0 14
12581: ARRAY
12582: PUSH
12583: LD_INT 11
12585: EQUAL
12586: OR
12587: PUSH
12588: LD_VAR 0 10
12592: PUSH
12593: LD_VAR 0 14
12597: ARRAY
12598: PUSH
12599: LD_INT 7
12601: EQUAL
12602: OR
12603: IFFALSE 12652
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12605: LD_ADDR_VAR 0 19
12609: PUSH
12610: LD_INT 2
12612: PUSH
12613: LD_INT 3
12615: PUSH
12616: LD_INT 4
12618: PUSH
12619: LD_INT 5
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12628: LD_ADDR_OWVAR 37
12632: PUSH
12633: LD_VAR 0 19
12637: PUSH
12638: LD_INT 1
12640: PPUSH
12641: LD_VAR 0 19
12645: PPUSH
12646: CALL_OW 12
12650: ARRAY
12651: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12652: LD_VAR 0 10
12656: PUSH
12657: LD_VAR 0 14
12661: ARRAY
12662: PUSH
12663: LD_INT 8
12665: EQUAL
12666: PUSH
12667: LD_VAR 0 10
12671: PUSH
12672: LD_VAR 0 14
12676: ARRAY
12677: PUSH
12678: LD_INT 6
12680: EQUAL
12681: OR
12682: PUSH
12683: LD_VAR 0 10
12687: PUSH
12688: LD_VAR 0 14
12692: ARRAY
12693: PUSH
12694: LD_INT 10
12696: EQUAL
12697: OR
12698: IFFALSE 12739
// begin amChassisTab = [ 4 , 5 ] ;
12700: LD_ADDR_VAR 0 19
12704: PUSH
12705: LD_INT 4
12707: PUSH
12708: LD_INT 5
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12715: LD_ADDR_OWVAR 37
12719: PUSH
12720: LD_VAR 0 19
12724: PUSH
12725: LD_INT 1
12727: PPUSH
12728: LD_VAR 0 19
12732: PPUSH
12733: CALL_OW 12
12737: ARRAY
12738: ST_TO_ADDR
// end ; end ;
12739: GO 12439
12741: POP
12742: POP
// veh = CreateVehicle ;
12743: LD_ADDR_VAR 0 16
12747: PUSH
12748: CALL_OW 45
12752: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12753: LD_VAR 0 16
12757: PPUSH
12758: LD_VAR 0 1
12762: PPUSH
12763: LD_INT 0
12765: PPUSH
12766: CALL_OW 49
// if vehControl = 1 then
12770: LD_VAR 0 7
12774: PUSH
12775: LD_INT 1
12777: EQUAL
12778: IFFALSE 12835
// begin hc_gallery =  ;
12780: LD_ADDR_OWVAR 33
12784: PUSH
12785: LD_STRING 
12787: ST_TO_ADDR
// hc_name =  ;
12788: LD_ADDR_OWVAR 26
12792: PUSH
12793: LD_STRING 
12795: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12796: LD_INT 0
12798: PPUSH
12799: LD_INT 3
12801: PPUSH
12802: LD_VAR 0 4
12806: PPUSH
12807: CALL_OW 380
// un = CreateHuman ;
12811: LD_ADDR_VAR 0 15
12815: PUSH
12816: CALL_OW 44
12820: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12821: LD_VAR 0 15
12825: PPUSH
12826: LD_VAR 0 16
12830: PPUSH
12831: CALL_OW 52
// end ; i = i + 1 ;
12835: LD_ADDR_VAR 0 13
12839: PUSH
12840: LD_VAR 0 13
12844: PUSH
12845: LD_INT 1
12847: PLUS
12848: ST_TO_ADDR
// end ; if nation = 2 then
12849: LD_VAR 0 5
12853: PUSH
12854: LD_INT 2
12856: EQUAL
12857: IFFALSE 13281
// begin uc_side = side ;
12859: LD_ADDR_OWVAR 20
12863: PUSH
12864: LD_VAR 0 2
12868: ST_TO_ADDR
// uc_nation = nation ;
12869: LD_ADDR_OWVAR 21
12873: PUSH
12874: LD_VAR 0 5
12878: ST_TO_ADDR
// vc_engine = vehengine ;
12879: LD_ADDR_OWVAR 39
12883: PUSH
12884: LD_VAR 0 6
12888: ST_TO_ADDR
// vc_control = vehcontrol ;
12889: LD_ADDR_OWVAR 38
12893: PUSH
12894: LD_VAR 0 7
12898: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12899: LD_ADDR_OWVAR 40
12903: PUSH
12904: LD_VAR 0 9
12908: PUSH
12909: LD_INT 1
12911: PPUSH
12912: LD_VAR 0 9
12916: PPUSH
12917: CALL_OW 12
12921: ARRAY
12922: ST_TO_ADDR
// for j = 1 to ARWeapons do
12923: LD_ADDR_VAR 0 14
12927: PUSH
12928: DOUBLE
12929: LD_INT 1
12931: DEC
12932: ST_TO_ADDR
12933: LD_VAR 0 9
12937: PUSH
12938: FOR_TO
12939: IFFALSE 13173
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12941: LD_VAR 0 9
12945: PUSH
12946: LD_VAR 0 14
12950: ARRAY
12951: PUSH
12952: LD_INT 24
12954: EQUAL
12955: PUSH
12956: LD_VAR 0 9
12960: PUSH
12961: LD_VAR 0 14
12965: ARRAY
12966: PUSH
12967: LD_INT 22
12969: EQUAL
12970: OR
12971: PUSH
12972: LD_VAR 0 9
12976: PUSH
12977: LD_VAR 0 14
12981: ARRAY
12982: PUSH
12983: LD_INT 23
12985: EQUAL
12986: OR
12987: PUSH
12988: LD_VAR 0 9
12992: PUSH
12993: LD_VAR 0 14
12997: ARRAY
12998: PUSH
12999: LD_INT 30
13001: EQUAL
13002: OR
13003: IFFALSE 13052
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13005: LD_ADDR_VAR 0 18
13009: PUSH
13010: LD_INT 11
13012: PUSH
13013: LD_INT 12
13015: PUSH
13016: LD_INT 13
13018: PUSH
13019: LD_INT 14
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13028: LD_ADDR_OWVAR 37
13032: PUSH
13033: LD_VAR 0 18
13037: PUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_VAR 0 18
13045: PPUSH
13046: CALL_OW 12
13050: ARRAY
13051: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13052: LD_VAR 0 9
13056: PUSH
13057: LD_VAR 0 14
13061: ARRAY
13062: PUSH
13063: LD_INT 29
13065: EQUAL
13066: PUSH
13067: LD_VAR 0 9
13071: PUSH
13072: LD_VAR 0 14
13076: ARRAY
13077: PUSH
13078: LD_INT 28
13080: EQUAL
13081: OR
13082: PUSH
13083: LD_VAR 0 9
13087: PUSH
13088: LD_VAR 0 14
13092: ARRAY
13093: PUSH
13094: LD_INT 27
13096: EQUAL
13097: OR
13098: PUSH
13099: LD_VAR 0 9
13103: PUSH
13104: LD_VAR 0 14
13108: ARRAY
13109: PUSH
13110: LD_INT 26
13112: EQUAL
13113: OR
13114: PUSH
13115: LD_VAR 0 9
13119: PUSH
13120: LD_VAR 0 14
13124: ARRAY
13125: PUSH
13126: LD_INT 25
13128: EQUAL
13129: OR
13130: IFFALSE 13171
// begin arChassisTab = [ 13 , 14 ] ;
13132: LD_ADDR_VAR 0 18
13136: PUSH
13137: LD_INT 13
13139: PUSH
13140: LD_INT 14
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13147: LD_ADDR_OWVAR 37
13151: PUSH
13152: LD_VAR 0 18
13156: PUSH
13157: LD_INT 1
13159: PPUSH
13160: LD_VAR 0 18
13164: PPUSH
13165: CALL_OW 12
13169: ARRAY
13170: ST_TO_ADDR
// end ; end ;
13171: GO 12938
13173: POP
13174: POP
// veh = CreateVehicle ;
13175: LD_ADDR_VAR 0 16
13179: PUSH
13180: CALL_OW 45
13184: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13185: LD_VAR 0 16
13189: PPUSH
13190: LD_VAR 0 1
13194: PPUSH
13195: LD_INT 0
13197: PPUSH
13198: CALL_OW 49
// if vehcontrol = 1 then
13202: LD_VAR 0 7
13206: PUSH
13207: LD_INT 1
13209: EQUAL
13210: IFFALSE 13267
// begin hc_gallery =  ;
13212: LD_ADDR_OWVAR 33
13216: PUSH
13217: LD_STRING 
13219: ST_TO_ADDR
// hc_name =  ;
13220: LD_ADDR_OWVAR 26
13224: PUSH
13225: LD_STRING 
13227: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13228: LD_INT 0
13230: PPUSH
13231: LD_INT 3
13233: PPUSH
13234: LD_VAR 0 4
13238: PPUSH
13239: CALL_OW 380
// un = CreateHuman ;
13243: LD_ADDR_VAR 0 15
13247: PUSH
13248: CALL_OW 44
13252: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13253: LD_VAR 0 15
13257: PPUSH
13258: LD_VAR 0 16
13262: PPUSH
13263: CALL_OW 52
// end ; i = i + 1 ;
13267: LD_ADDR_VAR 0 13
13271: PUSH
13272: LD_VAR 0 13
13276: PUSH
13277: LD_INT 1
13279: PLUS
13280: ST_TO_ADDR
// end ; if nation = 3 then
13281: LD_VAR 0 5
13285: PUSH
13286: LD_INT 3
13288: EQUAL
13289: IFFALSE 13681
// begin uc_side = side ;
13291: LD_ADDR_OWVAR 20
13295: PUSH
13296: LD_VAR 0 2
13300: ST_TO_ADDR
// uc_nation = nation ;
13301: LD_ADDR_OWVAR 21
13305: PUSH
13306: LD_VAR 0 5
13310: ST_TO_ADDR
// vc_engine = vehengine ;
13311: LD_ADDR_OWVAR 39
13315: PUSH
13316: LD_VAR 0 6
13320: ST_TO_ADDR
// vc_control = vehcontrol ;
13321: LD_ADDR_OWVAR 38
13325: PUSH
13326: LD_VAR 0 7
13330: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13331: LD_ADDR_OWVAR 40
13335: PUSH
13336: LD_VAR 0 8
13340: PUSH
13341: LD_INT 1
13343: PPUSH
13344: LD_VAR 0 8
13348: PPUSH
13349: CALL_OW 12
13353: ARRAY
13354: ST_TO_ADDR
// for j = 1 to RuWeapons do
13355: LD_ADDR_VAR 0 14
13359: PUSH
13360: DOUBLE
13361: LD_INT 1
13363: DEC
13364: ST_TO_ADDR
13365: LD_VAR 0 8
13369: PUSH
13370: FOR_TO
13371: IFFALSE 13573
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13373: LD_VAR 0 8
13377: PUSH
13378: LD_VAR 0 14
13382: ARRAY
13383: PUSH
13384: LD_INT 42
13386: EQUAL
13387: PUSH
13388: LD_VAR 0 8
13392: PUSH
13393: LD_VAR 0 14
13397: ARRAY
13398: PUSH
13399: LD_INT 43
13401: EQUAL
13402: OR
13403: PUSH
13404: LD_VAR 0 8
13408: PUSH
13409: LD_VAR 0 14
13413: ARRAY
13414: PUSH
13415: LD_INT 44
13417: EQUAL
13418: OR
13419: PUSH
13420: LD_VAR 0 8
13424: PUSH
13425: LD_VAR 0 14
13429: ARRAY
13430: PUSH
13431: LD_INT 45
13433: EQUAL
13434: OR
13435: PUSH
13436: LD_VAR 0 8
13440: PUSH
13441: LD_VAR 0 14
13445: ARRAY
13446: PUSH
13447: LD_INT 49
13449: EQUAL
13450: OR
13451: IFFALSE 13500
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13453: LD_ADDR_VAR 0 17
13457: PUSH
13458: LD_INT 21
13460: PUSH
13461: LD_INT 22
13463: PUSH
13464: LD_INT 23
13466: PUSH
13467: LD_INT 24
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13476: LD_ADDR_OWVAR 37
13480: PUSH
13481: LD_VAR 0 17
13485: PUSH
13486: LD_INT 1
13488: PPUSH
13489: LD_VAR 0 17
13493: PPUSH
13494: CALL_OW 12
13498: ARRAY
13499: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13500: LD_VAR 0 8
13504: PUSH
13505: LD_VAR 0 14
13509: ARRAY
13510: PUSH
13511: LD_INT 46
13513: EQUAL
13514: PUSH
13515: LD_VAR 0 8
13519: PUSH
13520: LD_VAR 0 14
13524: ARRAY
13525: PUSH
13526: LD_INT 47
13528: EQUAL
13529: OR
13530: IFFALSE 13571
// begin ruChassisTab = [ 23 , 24 ] ;
13532: LD_ADDR_VAR 0 17
13536: PUSH
13537: LD_INT 23
13539: PUSH
13540: LD_INT 24
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13547: LD_ADDR_OWVAR 37
13551: PUSH
13552: LD_VAR 0 17
13556: PUSH
13557: LD_INT 1
13559: PPUSH
13560: LD_VAR 0 17
13564: PPUSH
13565: CALL_OW 12
13569: ARRAY
13570: ST_TO_ADDR
// end ; end ;
13571: GO 13370
13573: POP
13574: POP
// veh = CreateVehicle ;
13575: LD_ADDR_VAR 0 16
13579: PUSH
13580: CALL_OW 45
13584: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13585: LD_VAR 0 16
13589: PPUSH
13590: LD_VAR 0 1
13594: PPUSH
13595: LD_INT 0
13597: PPUSH
13598: CALL_OW 49
// if vehcontrol = 1 then
13602: LD_VAR 0 7
13606: PUSH
13607: LD_INT 1
13609: EQUAL
13610: IFFALSE 13667
// begin hc_gallery =  ;
13612: LD_ADDR_OWVAR 33
13616: PUSH
13617: LD_STRING 
13619: ST_TO_ADDR
// hc_name =  ;
13620: LD_ADDR_OWVAR 26
13624: PUSH
13625: LD_STRING 
13627: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13628: LD_INT 0
13630: PPUSH
13631: LD_INT 3
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: CALL_OW 380
// un = CreateHuman ;
13643: LD_ADDR_VAR 0 15
13647: PUSH
13648: CALL_OW 44
13652: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13653: LD_VAR 0 15
13657: PPUSH
13658: LD_VAR 0 16
13662: PPUSH
13663: CALL_OW 52
// end ; i = i + 1 ;
13667: LD_ADDR_VAR 0 13
13671: PUSH
13672: LD_VAR 0 13
13676: PUSH
13677: LD_INT 1
13679: PLUS
13680: ST_TO_ADDR
// end ; until i = vehCount ;
13681: LD_VAR 0 13
13685: PUSH
13686: LD_VAR 0 3
13690: EQUAL
13691: IFFALSE 12343
// repeat wait ( 0 0$1 ) ;
13693: LD_INT 35
13695: PPUSH
13696: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13700: LD_ADDR_VAR 0 20
13704: PUSH
13705: LD_INT 22
13707: PUSH
13708: LD_VAR 0 2
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 21
13719: PUSH
13720: LD_INT 2
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 24
13729: PUSH
13730: LD_INT 661
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: PPUSH
13742: CALL_OW 69
13746: ST_TO_ADDR
// if vehicleOK_list > 0 then
13747: LD_VAR 0 20
13751: PUSH
13752: LD_INT 0
13754: GREATER
13755: IFFALSE 13946
// begin for i in vehicleOK_list do
13757: LD_ADDR_VAR 0 13
13761: PUSH
13762: LD_VAR 0 20
13766: PUSH
13767: FOR_IN
13768: IFFALSE 13944
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13770: LD_ADDR_VAR 0 21
13774: PUSH
13775: LD_INT 22
13777: PUSH
13778: LD_VAR 0 11
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PPUSH
13787: CALL_OW 69
13791: PPUSH
13792: LD_VAR 0 13
13796: PPUSH
13797: CALL_OW 74
13801: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13802: LD_ADDR_VAR 0 22
13806: PUSH
13807: LD_INT 22
13809: PUSH
13810: LD_VAR 0 11
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 2
13821: PUSH
13822: LD_INT 59
13824: PUSH
13825: EMPTY
13826: LIST
13827: PUSH
13828: LD_INT 21
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 21
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: PPUSH
13861: CALL_OW 69
13865: PPUSH
13866: LD_VAR 0 13
13870: PPUSH
13871: CALL_OW 74
13875: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13876: LD_VAR 0 13
13880: PPUSH
13881: LD_VAR 0 21
13885: PPUSH
13886: CALL_OW 296
13890: PUSH
13891: LD_INT 6
13893: PLUS
13894: PUSH
13895: LD_VAR 0 13
13899: PPUSH
13900: LD_VAR 0 22
13904: PPUSH
13905: CALL_OW 296
13909: LESS
13910: IFFALSE 13928
// begin ComAttackUnit ( i , target1 ) ;
13912: LD_VAR 0 13
13916: PPUSH
13917: LD_VAR 0 21
13921: PPUSH
13922: CALL_OW 115
// end else
13926: GO 13942
// begin ComAttackUnit ( i , target2 ) ;
13928: LD_VAR 0 13
13932: PPUSH
13933: LD_VAR 0 22
13937: PPUSH
13938: CALL_OW 115
// end ; end ;
13942: GO 13767
13944: POP
13945: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
13946: LD_INT 22
13948: PUSH
13949: LD_VAR 0 2
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 21
13960: PUSH
13961: LD_INT 2
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 24
13970: PUSH
13971: LD_INT 250
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 69
13987: PUSH
13988: LD_INT 0
13990: EQUAL
13991: IFFALSE 13693
// end ;
13993: LD_VAR 0 12
13997: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
13998: LD_INT 0
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
14005: PPUSH
14006: PPUSH
14007: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14008: LD_ADDR_VAR 0 7
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_VAR 0 1
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: LD_INT 3
14030: PUSH
14031: LD_INT 24
14033: PUSH
14034: LD_INT 550
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 24
14047: PUSH
14048: LD_INT 250
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 69
14068: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14069: LD_ADDR_VAR 0 8
14073: PUSH
14074: LD_INT 22
14076: PUSH
14077: LD_VAR 0 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: LD_INT 25
14091: PUSH
14092: LD_INT 1
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 25
14101: PUSH
14102: LD_INT 5
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 25
14111: PUSH
14112: LD_INT 8
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 25
14121: PUSH
14122: LD_INT 9
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 1000
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14156: LD_ADDR_VAR 0 9
14160: PUSH
14161: LD_INT 22
14163: PUSH
14164: LD_VAR 0 1
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 25
14175: PUSH
14176: LD_INT 4
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PPUSH
14187: CALL_OW 69
14191: ST_TO_ADDR
// if medicCount > 0 then
14192: LD_VAR 0 9
14196: PUSH
14197: LD_INT 0
14199: GREATER
14200: IFFALSE 14274
// begin if damageUnit_list > 0 then
14202: LD_VAR 0 7
14206: PUSH
14207: LD_INT 0
14209: GREATER
14210: IFFALSE 14274
// begin for i in damageUnit_list do
14212: LD_ADDR_VAR 0 5
14216: PUSH
14217: LD_VAR 0 7
14221: PUSH
14222: FOR_IN
14223: IFFALSE 14272
// begin ComMoveToArea ( i , healArea ) ;
14225: LD_VAR 0 5
14229: PPUSH
14230: LD_VAR 0 2
14234: PPUSH
14235: CALL_OW 113
// for j in medicCount do
14239: LD_ADDR_VAR 0 6
14243: PUSH
14244: LD_VAR 0 9
14248: PUSH
14249: FOR_IN
14250: IFFALSE 14268
// AddComHeal ( j , i ) ;
14252: LD_VAR 0 6
14256: PPUSH
14257: LD_VAR 0 5
14261: PPUSH
14262: CALL_OW 188
14266: GO 14249
14268: POP
14269: POP
// end ;
14270: GO 14222
14272: POP
14273: POP
// end ; end ; if soldiersOK_list > 0 then
14274: LD_VAR 0 8
14278: PUSH
14279: LD_INT 0
14281: GREATER
14282: IFFALSE 14473
// begin for i in soldiersOK_list do
14284: LD_ADDR_VAR 0 5
14288: PUSH
14289: LD_VAR 0 8
14293: PUSH
14294: FOR_IN
14295: IFFALSE 14471
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14297: LD_ADDR_VAR 0 10
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_VAR 0 3
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: PPUSH
14319: LD_VAR 0 5
14323: PPUSH
14324: CALL_OW 74
14328: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14329: LD_ADDR_VAR 0 11
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_VAR 0 3
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: LD_INT 59
14351: PUSH
14352: EMPTY
14353: LIST
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 1
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: EMPTY
14386: LIST
14387: PPUSH
14388: CALL_OW 69
14392: PPUSH
14393: LD_VAR 0 5
14397: PPUSH
14398: CALL_OW 74
14402: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14403: LD_VAR 0 5
14407: PPUSH
14408: LD_VAR 0 10
14412: PPUSH
14413: CALL_OW 296
14417: PUSH
14418: LD_INT 8
14420: PLUS
14421: PUSH
14422: LD_VAR 0 5
14426: PPUSH
14427: LD_VAR 0 11
14431: PPUSH
14432: CALL_OW 296
14436: LESS
14437: IFFALSE 14455
// begin ComAttackUnit ( i , target1 ) ;
14439: LD_VAR 0 5
14443: PPUSH
14444: LD_VAR 0 10
14448: PPUSH
14449: CALL_OW 115
// end else
14453: GO 14469
// begin ComAttackUnit ( i , target2 ) ;
14455: LD_VAR 0 5
14459: PPUSH
14460: LD_VAR 0 11
14464: PPUSH
14465: CALL_OW 115
// end ; end ;
14469: GO 14294
14471: POP
14472: POP
// end ; end ; end_of_file
14473: LD_VAR 0 4
14477: RET
// every 1 do var i ;
14478: GO 14480
14480: DISABLE
14481: LD_INT 0
14483: PPUSH
// begin InGameOn ;
14484: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14488: LD_INT 53
14490: PPUSH
14491: LD_INT 40
14493: PPUSH
14494: CALL_OW 84
// wait ( 0 0$5 ) ;
14498: LD_INT 175
14500: PPUSH
14501: CALL_OW 67
// if gammaCommander = 1 then
14505: LD_EXP 11
14509: PUSH
14510: LD_INT 1
14512: EQUAL
14513: IFFALSE 14524
// CenterNowOnUnits ( Donaldson ) ;
14515: LD_EXP 3
14519: PPUSH
14520: CALL_OW 87
// if gammaCommander = 2 then
14524: LD_EXP 11
14528: PUSH
14529: LD_INT 2
14531: EQUAL
14532: IFFALSE 14543
// CenterNowOnUnits ( Brown ) ;
14534: LD_EXP 2
14538: PPUSH
14539: CALL_OW 87
// if gammaCommander = 3 then
14543: LD_EXP 11
14547: PUSH
14548: LD_INT 3
14550: EQUAL
14551: IFFALSE 14562
// CenterNowOnUnits ( Houten ) ;
14553: LD_EXP 12
14557: PPUSH
14558: CALL_OW 87
// if gammaCommander = 1 then
14562: LD_EXP 11
14566: PUSH
14567: LD_INT 1
14569: EQUAL
14570: IFFALSE 14584
// Say ( Donaldson , D1-Don-1 ) ;
14572: LD_EXP 3
14576: PPUSH
14577: LD_STRING D1-Don-1
14579: PPUSH
14580: CALL_OW 88
// if gammaCommander = 2 then
14584: LD_EXP 11
14588: PUSH
14589: LD_INT 2
14591: EQUAL
14592: IFFALSE 14606
// Say ( Brown , D1-Brown-1 ) ;
14594: LD_EXP 2
14598: PPUSH
14599: LD_STRING D1-Brown-1
14601: PPUSH
14602: CALL_OW 88
// if gammaCommander = 3 then
14606: LD_EXP 11
14610: PUSH
14611: LD_INT 3
14613: EQUAL
14614: IFFALSE 14628
// Say ( Houten , D1-VanH-1 ) ;
14616: LD_EXP 12
14620: PPUSH
14621: LD_STRING D1-VanH-1
14623: PPUSH
14624: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
14628: LD_EXP 21
14632: PPUSH
14633: LD_STRING D1-Har-1
14635: PPUSH
14636: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
14640: LD_INT 53
14642: PPUSH
14643: LD_INT 40
14645: PPUSH
14646: CALL_OW 84
// if gammaCommander = 1 then
14650: LD_EXP 11
14654: PUSH
14655: LD_INT 1
14657: EQUAL
14658: IFFALSE 14672
// Say ( Donaldson , D1-Don-2 ) ;
14660: LD_EXP 3
14664: PPUSH
14665: LD_STRING D1-Don-2
14667: PPUSH
14668: CALL_OW 88
// if gammaCommander = 2 then
14672: LD_EXP 11
14676: PUSH
14677: LD_INT 2
14679: EQUAL
14680: IFFALSE 14694
// Say ( Brown , D1-Brown-2 ) ;
14682: LD_EXP 2
14686: PPUSH
14687: LD_STRING D1-Brown-2
14689: PPUSH
14690: CALL_OW 88
// if gammaCommander = 3 then
14694: LD_EXP 11
14698: PUSH
14699: LD_INT 3
14701: EQUAL
14702: IFFALSE 14716
// Say ( Houten , D1-VanH-2 ) ;
14704: LD_EXP 12
14708: PPUSH
14709: LD_STRING D1-VanH-2
14711: PPUSH
14712: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
14716: LD_EXP 21
14720: PPUSH
14721: LD_STRING D1-Har-2
14723: PPUSH
14724: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
14728: LD_INT 22
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 33
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 61
14750: PUSH
14751: EMPTY
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: IFFALSE 14828
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
14765: LD_ADDR_VAR 0 1
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_INT 1
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 33
14782: PUSH
14783: LD_INT 2
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 61
14792: PUSH
14793: EMPTY
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: PUSH
14806: FOR_IN
14807: IFFALSE 14826
// ComAgressiveMove ( i , 70 , 41 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 70
14816: PPUSH
14817: LD_INT 41
14819: PPUSH
14820: CALL_OW 114
14824: GO 14806
14826: POP
14827: POP
// repeat wait ( 0 0$1 ) ;
14828: LD_INT 35
14830: PPUSH
14831: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14835: LD_ADDR_VAR 0 1
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 6
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: PUSH
14858: FOR_IN
14859: IFFALSE 14878
// ComAgressiveMove ( i , 54 , 20 ) ;
14861: LD_VAR 0 1
14865: PPUSH
14866: LD_INT 54
14868: PPUSH
14869: LD_INT 20
14871: PPUSH
14872: CALL_OW 114
14876: GO 14858
14878: POP
14879: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14880: LD_ADDR_VAR 0 1
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_INT 1
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 25
14897: PUSH
14898: LD_INT 1
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 3
14907: PUSH
14908: LD_INT 54
14910: PUSH
14911: EMPTY
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: PPUSH
14923: CALL_OW 69
14927: PUSH
14928: FOR_IN
14929: IFFALSE 14963
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
14931: LD_VAR 0 1
14935: PPUSH
14936: LD_INT 70
14938: PPUSH
14939: LD_INT 41
14941: PPUSH
14942: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
14946: LD_VAR 0 1
14950: PPUSH
14951: LD_INT 46
14953: PPUSH
14954: LD_INT 39
14956: PPUSH
14957: CALL_OW 174
// end ;
14961: GO 14928
14963: POP
14964: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
14965: LD_ADDR_VAR 0 1
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 1
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 24
14995: PUSH
14996: LD_INT 500
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: PPUSH
15012: CALL_OW 69
15016: PUSH
15017: FOR_IN
15018: IFFALSE 15051
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_EXP 36
15029: PPUSH
15030: CALL_OW 250
15034: PPUSH
15035: LD_EXP 36
15039: PPUSH
15040: CALL_OW 251
15044: PPUSH
15045: CALL_OW 111
15049: GO 15017
15051: POP
15052: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 4 ;
15053: LD_INT 22
15055: PUSH
15056: LD_INT 6
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 21
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 24
15075: PUSH
15076: LD_INT 250
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: PPUSH
15088: CALL_OW 69
15092: PUSH
15093: LD_INT 4
15095: LESS
15096: IFFALSE 14828
// InGameOff ;
15098: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
15102: LD_STRING M1
15104: PPUSH
15105: CALL_OW 337
// SaveForQuickRestart ;
15109: CALL_OW 22
// startCutscene = 0 ;
15113: LD_ADDR_EXP 37
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// end ;
15121: PPOPN 1
15123: END
// every 1 1$0 do
15124: GO 15126
15126: DISABLE
// begin PrepareSupportFromDelta ;
15127: CALL 2127 0 0
// firstAttack = 1 ;
15131: LD_ADDR_EXP 32
15135: PUSH
15136: LD_INT 1
15138: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15139: LD_EXP 8
15143: PPUSH
15144: CALL_OW 302
15148: IFFALSE 15164
// begin Say ( Gladstone , D2-Glad-1 ) ;
15150: LD_EXP 8
15154: PPUSH
15155: LD_STRING D2-Glad-1
15157: PPUSH
15158: CALL_OW 88
// end else
15162: GO 15266
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15164: LD_INT 4
15166: PPUSH
15167: LD_INT 22
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 21
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: LD_INT 25
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 2
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 25
15212: PUSH
15213: LD_INT 3
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 25
15222: PUSH
15223: LD_INT 4
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 70
15246: PUSH
15247: LD_EXP 14
15251: PUSH
15252: EMPTY
15253: LIST
15254: DIFF
15255: PPUSH
15256: LD_STRING D2-Sol1-1
15258: PPUSH
15259: LD_STRING D2-FSol1-1
15261: PPUSH
15262: CALL 5583 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15266: LD_EXP 3
15270: PPUSH
15271: CALL_OW 302
15275: PUSH
15276: LD_EXP 11
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: IFFALSE 15299
// Say ( Donaldson , D2-Don-1 ) ;
15287: LD_EXP 3
15291: PPUSH
15292: LD_STRING D2-Don-1
15294: PPUSH
15295: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15299: LD_EXP 2
15303: PPUSH
15304: CALL_OW 302
15308: PUSH
15309: LD_EXP 11
15313: PUSH
15314: LD_INT 2
15316: EQUAL
15317: AND
15318: IFFALSE 15332
// Say ( Brown , D2-Brown-1 ) ;
15320: LD_EXP 2
15324: PPUSH
15325: LD_STRING D2-Brown-1
15327: PPUSH
15328: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15332: LD_EXP 12
15336: PPUSH
15337: CALL_OW 302
15341: PUSH
15342: LD_EXP 11
15346: PUSH
15347: LD_INT 3
15349: EQUAL
15350: AND
15351: IFFALSE 15365
// Say ( Houten , D2-VanH-1 ) ;
15353: LD_EXP 12
15357: PPUSH
15358: LD_STRING D2-VanH-1
15360: PPUSH
15361: CALL_OW 88
// end ;
15365: END
// every 0 0$1 do
15366: GO 15368
15368: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
15369: LD_STRING 07_time
15371: PPUSH
15372: LD_INT 0
15374: PPUSH
15375: CALL_OW 30
15379: PUSH
15380: LD_INT 3
15382: DIV
15383: PPUSH
15384: CALL_OW 67
// PrepareMacmillanSquad ;
15388: CALL 2742 0 0
// CenterNowOnUnits ( JMM ) ;
15392: LD_EXP 1
15396: PPUSH
15397: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
15401: LD_EXP 1
15405: PPUSH
15406: LD_STRING D3-JMM-1
15408: PPUSH
15409: CALL_OW 88
// JMMArrive = 1 ;
15413: LD_ADDR_EXP 38
15417: PUSH
15418: LD_INT 1
15420: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15421: LD_EXP 3
15425: PPUSH
15426: CALL_OW 302
15430: PUSH
15431: LD_EXP 11
15435: PUSH
15436: LD_INT 1
15438: EQUAL
15439: AND
15440: IFFALSE 15456
// begin Say ( Donaldson , D3-Don-1 ) ;
15442: LD_EXP 3
15446: PPUSH
15447: LD_STRING D3-Don-1
15449: PPUSH
15450: CALL_OW 88
// end else
15454: GO 15508
// begin if gammaCommander = 1 then
15456: LD_EXP 11
15460: PUSH
15461: LD_INT 1
15463: EQUAL
15464: IFFALSE 15508
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
15466: LD_EXP 10
15470: PPUSH
15471: LD_INT 26
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 72
15485: PPUSH
15486: LD_STRING D3-Sol1-1
15488: PPUSH
15489: LD_STRING D3-Sol1-1
15491: PPUSH
15492: CALL 5583 0 3
// Say ( JMM , D3-JMM-2 ) ;
15496: LD_EXP 1
15500: PPUSH
15501: LD_STRING D3-JMM-2
15503: PPUSH
15504: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15508: LD_EXP 2
15512: PPUSH
15513: CALL_OW 302
15517: PUSH
15518: LD_EXP 11
15522: PUSH
15523: LD_INT 2
15525: EQUAL
15526: AND
15527: IFFALSE 15543
// begin Say ( Brown , D3-Brown-1 ) ;
15529: LD_EXP 2
15533: PPUSH
15534: LD_STRING D3-Brown-1
15536: PPUSH
15537: CALL_OW 88
// end else
15541: GO 15595
// begin if gammaCommander = 2 then
15543: LD_EXP 11
15547: PUSH
15548: LD_INT 2
15550: EQUAL
15551: IFFALSE 15595
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
15553: LD_EXP 10
15557: PPUSH
15558: LD_INT 26
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 72
15572: PPUSH
15573: LD_STRING D3-Sol1-1a
15575: PPUSH
15576: LD_STRING D3-Sol1-1a
15578: PPUSH
15579: CALL 5583 0 3
// Say ( JMM , D3-JMM-2 ) ;
15583: LD_EXP 1
15587: PPUSH
15588: LD_STRING D3-JMM-2
15590: PPUSH
15591: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15595: LD_EXP 12
15599: PPUSH
15600: CALL_OW 302
15604: PUSH
15605: LD_EXP 11
15609: PUSH
15610: LD_INT 3
15612: EQUAL
15613: AND
15614: IFFALSE 15630
// begin Say ( Houten , D3-VanH-1 ) ;
15616: LD_EXP 12
15620: PPUSH
15621: LD_STRING D3-VanH-1
15623: PPUSH
15624: CALL_OW 88
// end else
15628: GO 15682
// begin if gammaCommander = 3 then
15630: LD_EXP 11
15634: PUSH
15635: LD_INT 3
15637: EQUAL
15638: IFFALSE 15682
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
15640: LD_EXP 10
15644: PPUSH
15645: LD_INT 26
15647: PUSH
15648: LD_INT 1
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 72
15659: PPUSH
15660: LD_STRING D3-Sol1-1b
15662: PPUSH
15663: LD_STRING D3-Sol1-1b
15665: PPUSH
15666: CALL 5583 0 3
// Say ( JMM , D3-JMM-2 ) ;
15670: LD_EXP 1
15674: PPUSH
15675: LD_STRING D3-JMM-2
15677: PPUSH
15678: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15682: LD_EXP 14
15686: PPUSH
15687: CALL_OW 302
15691: IFFALSE 15719
// begin Say ( Joan , D3a-Joan-1 ) ;
15693: LD_EXP 14
15697: PPUSH
15698: LD_STRING D3a-Joan-1
15700: PPUSH
15701: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15705: LD_EXP 1
15709: PPUSH
15710: LD_STRING D3a-JMM-1
15712: PPUSH
15713: CALL_OW 88
// end else
15717: GO 16172
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15719: LD_EXP 3
15723: PPUSH
15724: CALL_OW 302
15728: PUSH
15729: LD_EXP 11
15733: PUSH
15734: LD_INT 1
15736: EQUAL
15737: AND
15738: PUSH
15739: LD_STRING 06_JoanStatus_1
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: CALL_OW 30
15749: PUSH
15750: LD_INT 1
15752: EQUAL
15753: AND
15754: IFFALSE 15805
// begin Say ( Donaldson , D3b-Don-1 ) ;
15756: LD_EXP 3
15760: PPUSH
15761: LD_STRING D3b-Don-1
15763: PPUSH
15764: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15768: LD_EXP 1
15772: PPUSH
15773: LD_STRING D3b-JMM-2
15775: PPUSH
15776: CALL_OW 88
// if IsOK ( Lisa ) then
15780: LD_EXP 6
15784: PPUSH
15785: CALL_OW 302
15789: IFFALSE 15803
// Say ( Lisa , D3b-Lisa-2 ) ;
15791: LD_EXP 6
15795: PPUSH
15796: LD_STRING D3b-Lisa-2
15798: PPUSH
15799: CALL_OW 88
// end else
15803: GO 15870
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15805: LD_EXP 10
15809: PPUSH
15810: LD_INT 26
15812: PUSH
15813: LD_INT 1
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PPUSH
15820: CALL_OW 72
15824: PPUSH
15825: LD_STRING D3b-Sol1-1
15827: PPUSH
15828: LD_STRING D3b-Sol1-1
15830: PPUSH
15831: CALL 5583 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15835: LD_EXP 1
15839: PPUSH
15840: LD_STRING D3b-JMM-2
15842: PPUSH
15843: CALL_OW 88
// if IsOK ( Lisa ) then
15847: LD_EXP 6
15851: PPUSH
15852: CALL_OW 302
15856: IFFALSE 15870
// Say ( Lisa , D3b-Lisa-2 ) ;
15858: LD_EXP 6
15862: PPUSH
15863: LD_STRING D3b-Lisa-2
15865: PPUSH
15866: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15870: LD_EXP 2
15874: PPUSH
15875: CALL_OW 302
15879: PUSH
15880: LD_EXP 11
15884: PUSH
15885: LD_INT 2
15887: EQUAL
15888: AND
15889: PUSH
15890: LD_STRING 06_JoanStatus_1
15892: PPUSH
15893: LD_INT 0
15895: PPUSH
15896: CALL_OW 30
15900: PUSH
15901: LD_INT 1
15903: EQUAL
15904: AND
15905: IFFALSE 15956
// begin Say ( Brown , D3b-Brown-1 ) ;
15907: LD_EXP 2
15911: PPUSH
15912: LD_STRING D3b-Brown-1
15914: PPUSH
15915: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15919: LD_EXP 1
15923: PPUSH
15924: LD_STRING D3b-JMM-2
15926: PPUSH
15927: CALL_OW 88
// if IsOK ( Lisa ) then
15931: LD_EXP 6
15935: PPUSH
15936: CALL_OW 302
15940: IFFALSE 15954
// Say ( Lisa , D3b-Lisa-2 ) ;
15942: LD_EXP 6
15946: PPUSH
15947: LD_STRING D3b-Lisa-2
15949: PPUSH
15950: CALL_OW 88
// end else
15954: GO 16021
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15956: LD_EXP 10
15960: PPUSH
15961: LD_INT 26
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 72
15975: PPUSH
15976: LD_STRING D3b-Sol1-1
15978: PPUSH
15979: LD_STRING D3b-Sol1-1
15981: PPUSH
15982: CALL 5583 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15986: LD_EXP 1
15990: PPUSH
15991: LD_STRING D3b-JMM-2
15993: PPUSH
15994: CALL_OW 88
// if IsOK ( Lisa ) then
15998: LD_EXP 6
16002: PPUSH
16003: CALL_OW 302
16007: IFFALSE 16021
// Say ( Lisa , D3b-Lisa-2 ) ;
16009: LD_EXP 6
16013: PPUSH
16014: LD_STRING D3b-Lisa-2
16016: PPUSH
16017: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16021: LD_EXP 12
16025: PPUSH
16026: CALL_OW 302
16030: PUSH
16031: LD_EXP 11
16035: PUSH
16036: LD_INT 3
16038: EQUAL
16039: AND
16040: PUSH
16041: LD_STRING 06_JoanStatus_1
16043: PPUSH
16044: LD_INT 0
16046: PPUSH
16047: CALL_OW 30
16051: PUSH
16052: LD_INT 1
16054: EQUAL
16055: AND
16056: IFFALSE 16107
// begin Say ( Houten , D3b-VanH-1 ) ;
16058: LD_EXP 12
16062: PPUSH
16063: LD_STRING D3b-VanH-1
16065: PPUSH
16066: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16070: LD_EXP 1
16074: PPUSH
16075: LD_STRING D3b-JMM-2
16077: PPUSH
16078: CALL_OW 88
// if IsOK ( Lisa ) then
16082: LD_EXP 6
16086: PPUSH
16087: CALL_OW 302
16091: IFFALSE 16105
// Say ( Lisa , D3b-Lisa-2 ) ;
16093: LD_EXP 6
16097: PPUSH
16098: LD_STRING D3b-Lisa-2
16100: PPUSH
16101: CALL_OW 88
// end else
16105: GO 16172
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16107: LD_EXP 10
16111: PPUSH
16112: LD_INT 26
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 72
16126: PPUSH
16127: LD_STRING D3b-Sol1-1
16129: PPUSH
16130: LD_STRING D3b-Sol1-1
16132: PPUSH
16133: CALL 5583 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16137: LD_EXP 1
16141: PPUSH
16142: LD_STRING D3b-JMM-2
16144: PPUSH
16145: CALL_OW 88
// if IsOK ( Lisa ) then
16149: LD_EXP 6
16153: PPUSH
16154: CALL_OW 302
16158: IFFALSE 16172
// Say ( Lisa , D3b-Lisa-2 ) ;
16160: LD_EXP 6
16164: PPUSH
16165: LD_STRING D3b-Lisa-2
16167: PPUSH
16168: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16172: LD_INT 22
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 21
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 26
16194: PUSH
16195: LD_INT 1
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 2
16204: PUSH
16205: LD_INT 25
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 25
16217: PUSH
16218: LD_INT 2
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 25
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 25
16237: PUSH
16238: LD_INT 4
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: PPUSH
16258: CALL_OW 69
16262: PUSH
16263: LD_EXP 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: DIFF
16271: PPUSH
16272: LD_STRING DCa-Sol1-1
16274: PPUSH
16275: LD_STRING DCa-Sol1-1
16277: PPUSH
16278: CALL 5583 0 3
// Say ( JMM , DCb-JMM-1 ) ;
16282: LD_EXP 1
16286: PPUSH
16287: LD_STRING DCb-JMM-1
16289: PPUSH
16290: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16294: LD_INT 22
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 21
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 26
16316: PUSH
16317: LD_INT 1
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 2
16326: PUSH
16327: LD_INT 25
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 25
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 25
16349: PUSH
16350: LD_INT 3
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 25
16359: PUSH
16360: LD_INT 4
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: PPUSH
16380: CALL_OW 69
16384: PUSH
16385: LD_EXP 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: DIFF
16393: PPUSH
16394: LD_STRING DCb-Sol1-1
16396: PPUSH
16397: LD_STRING DCb-Sol1-1
16399: PPUSH
16400: CALL 5583 0 3
// Say ( JMM , DCb-JMM-2 ) ;
16404: LD_EXP 1
16408: PPUSH
16409: LD_STRING DCb-JMM-2
16411: PPUSH
16412: CALL_OW 88
// secondAttack = 1 ;
16416: LD_ADDR_EXP 33
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// end ;
16424: END
// every 0 0$01 trigger JMMArrive = 1 do
16425: LD_EXP 38
16429: PUSH
16430: LD_INT 1
16432: EQUAL
16433: IFFALSE 16513
16435: GO 16437
16437: DISABLE
// begin wait ( 3 3$0 ) ;
16438: LD_INT 6300
16440: PPUSH
16441: CALL_OW 67
// DialogueOn ;
16445: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16449: LD_EXP 22
16453: PPUSH
16454: LD_STRING D4-Pow-1
16456: PPUSH
16457: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16461: LD_EXP 1
16465: PPUSH
16466: LD_STRING D4-JMM-1
16468: PPUSH
16469: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16473: LD_EXP 22
16477: PPUSH
16478: LD_STRING D4-Pow-2
16480: PPUSH
16481: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16485: LD_EXP 1
16489: PPUSH
16490: LD_STRING D4-JMM-2
16492: PPUSH
16493: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16497: LD_EXP 22
16501: PPUSH
16502: LD_STRING D4-Pow-3
16504: PPUSH
16505: CALL_OW 94
// DialogueOff ;
16509: CALL_OW 7
// end ;
16513: END
// every 0 0$01 trigger JMMArrive = 1 do
16514: LD_EXP 38
16518: PUSH
16519: LD_INT 1
16521: EQUAL
16522: IFFALSE 16554
16524: GO 16526
16526: DISABLE
// begin wait ( 8 8$0 ) ;
16527: LD_INT 16800
16529: PPUSH
16530: CALL_OW 67
// DialogueOn ;
16534: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16538: LD_EXP 22
16542: PPUSH
16543: LD_STRING D4a-Pow-1
16545: PPUSH
16546: CALL_OW 94
// DialogueOff ;
16550: CALL_OW 7
// end ;
16554: END
// every 0 0$01 trigger JMMArrive = 1 do
16555: LD_EXP 38
16559: PUSH
16560: LD_INT 1
16562: EQUAL
16563: IFFALSE 16608
16565: GO 16567
16567: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
16568: LD_INT 21000
16570: PUSH
16571: LD_INT 25200
16573: PUSH
16574: LD_INT 31500
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_OWVAR 67
16586: ARRAY
16587: PPUSH
16588: CALL_OW 67
// PrepareSikorsky ;
16592: CALL 4167 0 0
// SikorskyArrive = 1 ;
16596: LD_ADDR_EXP 17
16600: PUSH
16601: LD_INT 1
16603: ST_TO_ADDR
// PrepareSikorskyArmy ;
16604: CALL 4307 0 0
// end ;
16608: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
16609: LD_EXP 16
16613: PPUSH
16614: LD_INT 5
16616: PPUSH
16617: CALL_OW 308
16621: IFFALSE 16813
16623: GO 16625
16625: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
16626: LD_EXP 16
16630: PPUSH
16631: CALL_OW 87
// DialogueOn ;
16635: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16639: LD_EXP 15
16643: PPUSH
16644: LD_STRING D5-Sik-1
16646: PPUSH
16647: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16651: LD_EXP 1
16655: PPUSH
16656: LD_STRING D5-JMM-1a
16658: PPUSH
16659: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16663: LD_EXP 15
16667: PPUSH
16668: LD_STRING D5-Sik-2
16670: PPUSH
16671: CALL_OW 88
// case query ( QSikorski ) of 1 :
16675: LD_STRING QSikorski
16677: PPUSH
16678: CALL_OW 97
16682: PUSH
16683: LD_INT 1
16685: DOUBLE
16686: EQUAL
16687: IFTRUE 16691
16689: GO 16714
16691: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16692: LD_EXP 15
16696: PPUSH
16697: LD_STRING D5a-Sik-1
16699: PPUSH
16700: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
16704: LD_ADDR_EXP 18
16708: PUSH
16709: LD_INT 2100
16711: ST_TO_ADDR
// end ; 2 :
16712: GO 16801
16714: LD_INT 2
16716: DOUBLE
16717: EQUAL
16718: IFTRUE 16722
16720: GO 16745
16722: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16723: LD_EXP 15
16727: PPUSH
16728: LD_STRING D5b-Sik-1
16730: PPUSH
16731: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16735: LD_ADDR_EXP 18
16739: PUSH
16740: LD_INT 10500
16742: ST_TO_ADDR
// end ; 3 :
16743: GO 16801
16745: LD_INT 3
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16753
16751: GO 16800
16753: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16754: LD_EXP 15
16758: PPUSH
16759: LD_STRING D5c-Sik-1
16761: PPUSH
16762: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16766: LD_EXP 1
16770: PPUSH
16771: LD_STRING D5c-JMM-1
16773: PPUSH
16774: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16778: LD_EXP 15
16782: PPUSH
16783: LD_STRING D5c-Sik-2
16785: PPUSH
16786: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16790: LD_ADDR_EXP 18
16794: PUSH
16795: LD_INT 10500
16797: ST_TO_ADDR
// end ; end ;
16798: GO 16801
16800: POP
// DialogueOff ;
16801: CALL_OW 7
// timerStatus = 1 ;
16805: LD_ADDR_EXP 34
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
// end ;
16813: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16814: LD_EXP 18
16818: PUSH
16819: LD_INT 35
16821: LESS
16822: IFFALSE 16870
16824: GO 16826
16826: DISABLE
// begin timerStatus = 0 ;
16827: LD_ADDR_EXP 34
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// DialogueOn ;
16835: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16839: LD_EXP 15
16843: PPUSH
16844: LD_STRING D6-Sik-1
16846: PPUSH
16847: CALL_OW 88
// DialogueOff ;
16851: CALL_OW 7
// SikorskyAI = 1 ;
16855: LD_ADDR_EXP 19
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16863: LD_STRING M2
16865: PPUSH
16866: CALL_OW 337
// end ;
16870: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16871: LD_EXP 16
16875: PPUSH
16876: LD_INT 18
16878: PPUSH
16879: CALL_OW 308
16883: IFFALSE 16967
16885: GO 16887
16887: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16888: LD_EXP 15
16892: PPUSH
16893: LD_STRING D7-Sik-1
16895: PPUSH
16896: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16900: LD_EXP 1
16904: PPUSH
16905: LD_INT 24
16907: PPUSH
16908: CALL_OW 308
16912: PUSH
16913: LD_EXP 1
16917: PPUSH
16918: CALL_OW 310
16922: OR
16923: IFFALSE 16947
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16925: LD_EXP 15
16929: PPUSH
16930: LD_STRING D7a-Sik-1
16932: PPUSH
16933: CALL_OW 88
// SikorskyStatus = 1 ;
16937: LD_ADDR_EXP 20
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// end else
16945: GO 16967
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16947: LD_EXP 15
16951: PPUSH
16952: LD_STRING D7b-Sik-1
16954: PPUSH
16955: CALL_OW 88
// SikorskyStatus = 2 ;
16959: LD_ADDR_EXP 20
16963: PUSH
16964: LD_INT 2
16966: ST_TO_ADDR
// end ; end ;
16967: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
16968: LD_EXP 35
16972: PUSH
16973: LD_INT 1
16975: EQUAL
16976: IFFALSE 17085
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
// begin enable ;
16984: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
16985: LD_ADDR_VAR 0 1
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_INT 3
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: PUSH
17005: FOR_IN
17006: IFFALSE 17033
// if IsInArea ( i , RussianEscape ) then
17008: LD_VAR 0 1
17012: PPUSH
17013: LD_INT 22
17015: PPUSH
17016: CALL_OW 308
17020: IFFALSE 17031
// RemoveUnit ( i ) ;
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 64
17031: GO 17005
17033: POP
17034: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17035: LD_ADDR_VAR 0 1
17039: PUSH
17040: LD_INT 22
17042: PUSH
17043: LD_INT 6
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PPUSH
17050: CALL_OW 69
17054: PUSH
17055: FOR_IN
17056: IFFALSE 17083
// if IsInArea ( i , RussianEscape ) then
17058: LD_VAR 0 1
17062: PPUSH
17063: LD_INT 22
17065: PPUSH
17066: CALL_OW 308
17070: IFFALSE 17081
// RemoveUnit ( i ) ;
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 64
17081: GO 17055
17083: POP
17084: POP
// end ; end_of_file
17085: PPOPN 1
17087: END
// on BuildingComplete ( building ) do var tmp , un ;
17088: LD_INT 0
17090: PPUSH
17091: PPUSH
// begin if GetSide ( building ) = 3 then
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 255
17101: PUSH
17102: LD_INT 3
17104: EQUAL
17105: IFFALSE 17592
// begin if GetBType ( building ) = b_depot then
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 266
17116: PUSH
17117: LD_INT 0
17119: EQUAL
17120: IFFALSE 17188
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 274
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: LD_INT 5000
17137: PPUSH
17138: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: CALL_OW 274
17151: PPUSH
17152: LD_INT 2
17154: PPUSH
17155: LD_INT 5000
17157: PPUSH
17158: CALL_OW 277
// SetBName ( building , konev ) ;
17162: LD_VAR 0 1
17166: PPUSH
17167: LD_STRING konev
17169: PPUSH
17170: CALL_OW 500
// ruDepot = building ;
17174: LD_ADDR_EXP 27
17178: PUSH
17179: LD_VAR 0 1
17183: ST_TO_ADDR
// BuildRussianBase ;
17184: CALL 6188 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 266
17197: PUSH
17198: LD_INT 0
17200: EQUAL
17201: PUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 266
17211: PUSH
17212: LD_INT 2
17214: EQUAL
17215: OR
17216: PUSH
17217: LD_VAR 0 1
17221: PPUSH
17222: CALL_OW 266
17226: PUSH
17227: LD_INT 4
17229: EQUAL
17230: OR
17231: IFFALSE 17242
// ComUpgrade ( building ) ;
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 146
// if GetBType ( building ) = b_lab then
17242: LD_VAR 0 1
17246: PPUSH
17247: CALL_OW 266
17251: PUSH
17252: LD_INT 6
17254: EQUAL
17255: IFFALSE 17306
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17257: LD_VAR 0 1
17261: PPUSH
17262: LD_INT 10
17264: PPUSH
17265: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_INT 12
17276: PPUSH
17277: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
17281: LD_INT 3
17283: PPUSH
17284: LD_VAR 0 1
17288: PPUSH
17289: LD_INT 3
17291: PPUSH
17292: CALL 6743 0 3
// ruLab = building ;
17296: LD_ADDR_EXP 28
17300: PUSH
17301: LD_VAR 0 1
17305: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 266
17315: PUSH
17316: LD_INT 32
17318: EQUAL
17319: IFFALSE 17437
// begin uc_side = 3 ;
17321: LD_ADDR_OWVAR 20
17325: PUSH
17326: LD_INT 3
17328: ST_TO_ADDR
// uc_nation = 3 ;
17329: LD_ADDR_OWVAR 21
17333: PUSH
17334: LD_INT 3
17336: ST_TO_ADDR
// hc_gallery =  ;
17337: LD_ADDR_OWVAR 33
17341: PUSH
17342: LD_STRING 
17344: ST_TO_ADDR
// hc_name =  ;
17345: LD_ADDR_OWVAR 26
17349: PUSH
17350: LD_STRING 
17352: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17353: LD_INT 0
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: LD_EXP 24
17363: PPUSH
17364: LD_EXP 25
17368: PPUSH
17369: CALL_OW 12
17373: PPUSH
17374: CALL_OW 380
// un = CreateHuman ;
17378: LD_ADDR_VAR 0 3
17382: PUSH
17383: CALL_OW 44
17387: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17388: LD_VAR 0 3
17392: PPUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_INT 43
17409: PUSH
17410: LD_INT 44
17412: PUSH
17413: LD_INT 46
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: PPUSH
17424: LD_INT 3
17426: PPUSH
17427: CALL_OW 12
17431: ARRAY
17432: PPUSH
17433: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 266
17446: PUSH
17447: LD_INT 33
17449: EQUAL
17450: IFFALSE 17487
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17452: LD_VAR 0 1
17456: PPUSH
17457: LD_INT 43
17459: PUSH
17460: LD_INT 44
17462: PUSH
17463: LD_INT 46
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_INT 3
17476: PPUSH
17477: CALL_OW 12
17481: ARRAY
17482: PPUSH
17483: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
17487: LD_VAR 0 1
17491: PPUSH
17492: CALL_OW 266
17496: PUSH
17497: LD_INT 24
17499: EQUAL
17500: IFFALSE 17510
// russianAI = 1 ;
17502: LD_ADDR_EXP 26
17506: PUSH
17507: LD_INT 1
17509: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
17510: LD_EXP 30
17514: PUSH
17515: LD_INT 0
17517: GREATER
17518: IFFALSE 17592
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17520: LD_ADDR_EXP 30
17524: PUSH
17525: LD_EXP 30
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: CALL_OW 3
17537: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17538: LD_ADDR_EXP 30
17542: PUSH
17543: LD_EXP 30
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: CALL_OW 3
17555: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17556: LD_ADDR_EXP 30
17560: PUSH
17561: LD_EXP 30
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 3
17573: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17574: LD_ADDR_EXP 30
17578: PUSH
17579: LD_EXP 30
17583: PPUSH
17584: LD_INT 1
17586: PPUSH
17587: CALL_OW 3
17591: ST_TO_ADDR
// end ; end ; end ;
17592: PPOPN 3
17594: END
// on UpgradeComplete ( building ) do var i ;
17595: LD_INT 0
17597: PPUSH
// begin if GetSide ( building ) = 3 then
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 255
17607: PUSH
17608: LD_INT 3
17610: EQUAL
17611: IFFALSE 17792
// begin if GetBType ( building ) = b_factory then
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 266
17622: PUSH
17623: LD_INT 3
17625: EQUAL
17626: IFFALSE 17693
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17628: LD_ADDR_VAR 0 2
17632: PUSH
17633: LD_INT 22
17635: PUSH
17636: LD_INT 3
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 25
17645: PUSH
17646: LD_INT 3
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: PUSH
17662: FOR_IN
17663: IFFALSE 17681
// ComEnterUnit ( i , building ) ;
17665: LD_VAR 0 2
17669: PPUSH
17670: LD_VAR 0 1
17674: PPUSH
17675: CALL_OW 120
17679: GO 17662
17681: POP
17682: POP
// ruFab = building ;
17683: LD_ADDR_EXP 29
17687: PUSH
17688: LD_VAR 0 1
17692: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL_OW 266
17702: PUSH
17703: LD_INT 8
17705: EQUAL
17706: IFFALSE 17763
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 25
17725: PUSH
17726: LD_INT 4
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: PUSH
17742: FOR_IN
17743: IFFALSE 17761
// ComEnterUnit ( i , building ) ;
17745: LD_VAR 0 2
17749: PPUSH
17750: LD_VAR 0 1
17754: PPUSH
17755: CALL_OW 120
17759: GO 17742
17761: POP
17762: POP
// if GetBType ( building ) = b_warehouse then
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 266
17772: PUSH
17773: LD_INT 1
17775: EQUAL
17776: IFFALSE 17792
// begin ComEnterUnit ( Borodin , building ) ;
17778: LD_EXP 23
17782: PPUSH
17783: LD_VAR 0 1
17787: PPUSH
17788: CALL_OW 120
// end ; end ; end ;
17792: PPOPN 2
17794: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL_OW 247
17804: PUSH
17805: LD_INT 2
17807: EQUAL
17808: PUSH
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 263
17818: PUSH
17819: LD_INT 3
17821: EQUAL
17822: AND
17823: PUSH
17824: LD_EXP 40
17828: PUSH
17829: LD_INT 0
17831: EQUAL
17832: AND
17833: IFFALSE 17951
// begin varEvent1 = 1 ;
17835: LD_ADDR_EXP 40
17839: PUSH
17840: LD_INT 1
17842: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
17852: LD_INT 22
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 21
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 2
17874: PUSH
17875: LD_INT 25
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 25
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 25
17897: PUSH
17898: LD_INT 3
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 25
17907: PUSH
17908: LD_INT 4
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: LIST
17926: PPUSH
17927: CALL_OW 69
17931: PUSH
17932: LD_EXP 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: DIFF
17940: PPUSH
17941: LD_STRING DC-Sol1-1
17943: PPUSH
17944: LD_STRING DC-FSol1-1
17946: PPUSH
17947: CALL 5583 0 3
// end ; end ;
17951: PPOPN 1
17953: END
// on UnitDestroyed ( unit ) do var i ;
17954: LD_INT 0
17956: PPUSH
// begin if GetSide ( unit ) = 3 then
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL_OW 255
17966: PUSH
17967: LD_INT 3
17969: EQUAL
17970: IFFALSE 18740
// begin if GetType ( unit ) = unit_building then
17972: LD_VAR 0 1
17976: PPUSH
17977: CALL_OW 247
17981: PUSH
17982: LD_INT 3
17984: EQUAL
17985: IFFALSE 18677
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 266
17996: PUSH
17997: LD_INT 31
17999: EQUAL
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 266
18010: PUSH
18011: LD_INT 32
18013: EQUAL
18014: OR
18015: PUSH
18016: LD_VAR 0 1
18020: PPUSH
18021: CALL_OW 266
18025: PUSH
18026: LD_INT 36
18028: EQUAL
18029: OR
18030: PUSH
18031: LD_VAR 0 1
18035: PPUSH
18036: CALL_OW 266
18040: PUSH
18041: LD_INT 0
18043: EQUAL
18044: OR
18045: PUSH
18046: LD_VAR 0 1
18050: PPUSH
18051: CALL_OW 266
18055: PUSH
18056: LD_INT 24
18058: EQUAL
18059: OR
18060: PUSH
18061: LD_VAR 0 1
18065: PPUSH
18066: CALL_OW 266
18070: PUSH
18071: LD_INT 17
18073: EQUAL
18074: OR
18075: PUSH
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 266
18085: PUSH
18086: LD_INT 25
18088: EQUAL
18089: OR
18090: PUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 266
18100: PUSH
18101: LD_INT 19
18103: EQUAL
18104: OR
18105: PUSH
18106: LD_VAR 0 1
18110: PPUSH
18111: CALL_OW 266
18115: PUSH
18116: LD_INT 20
18118: EQUAL
18119: OR
18120: PUSH
18121: LD_VAR 0 1
18125: PPUSH
18126: CALL_OW 266
18130: PUSH
18131: LD_INT 18
18133: EQUAL
18134: OR
18135: PUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 266
18145: PUSH
18146: LD_INT 21
18148: EQUAL
18149: OR
18150: PUSH
18151: LD_VAR 0 1
18155: PPUSH
18156: CALL_OW 266
18160: PUSH
18161: LD_INT 23
18163: EQUAL
18164: OR
18165: PUSH
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 266
18175: PUSH
18176: LD_INT 16
18178: EQUAL
18179: OR
18180: PUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 266
18190: PUSH
18191: LD_INT 6
18193: EQUAL
18194: OR
18195: PUSH
18196: LD_VAR 0 1
18200: PPUSH
18201: CALL_OW 266
18205: PUSH
18206: LD_INT 29
18208: EQUAL
18209: OR
18210: PUSH
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 266
18220: PUSH
18221: LD_INT 26
18223: EQUAL
18224: OR
18225: PUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 266
18235: PUSH
18236: LD_INT 30
18238: EQUAL
18239: OR
18240: PUSH
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 266
18250: PUSH
18251: LD_INT 28
18253: EQUAL
18254: OR
18255: PUSH
18256: LD_VAR 0 1
18260: PPUSH
18261: CALL_OW 266
18265: PUSH
18266: LD_INT 27
18268: EQUAL
18269: OR
18270: PUSH
18271: LD_VAR 0 1
18275: PPUSH
18276: CALL_OW 266
18280: PUSH
18281: LD_INT 33
18283: EQUAL
18284: OR
18285: PUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 266
18295: PUSH
18296: LD_INT 2
18298: EQUAL
18299: OR
18300: PUSH
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 266
18310: PUSH
18311: LD_INT 4
18313: EQUAL
18314: OR
18315: IFFALSE 18401
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18317: LD_ADDR_EXP 30
18321: PUSH
18322: LD_EXP 30
18326: PUSH
18327: LD_VAR 0 1
18331: PPUSH
18332: CALL_OW 266
18336: ADD
18337: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18338: LD_ADDR_EXP 30
18342: PUSH
18343: LD_EXP 30
18347: PUSH
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 250
18357: ADD
18358: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18359: LD_ADDR_EXP 30
18363: PUSH
18364: LD_EXP 30
18368: PUSH
18369: LD_VAR 0 1
18373: PPUSH
18374: CALL_OW 251
18378: ADD
18379: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18380: LD_ADDR_EXP 30
18384: PUSH
18385: LD_EXP 30
18389: PUSH
18390: LD_VAR 0 1
18394: PPUSH
18395: CALL_OW 254
18399: ADD
18400: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18401: LD_VAR 0 1
18405: PPUSH
18406: CALL_OW 266
18410: PUSH
18411: LD_INT 1
18413: EQUAL
18414: IFFALSE 18493
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
18416: LD_ADDR_EXP 30
18420: PUSH
18421: LD_EXP 30
18425: PUSH
18426: LD_INT 0
18428: ADD
18429: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18430: LD_ADDR_EXP 30
18434: PUSH
18435: LD_EXP 30
18439: PUSH
18440: LD_VAR 0 1
18444: PPUSH
18445: CALL_OW 250
18449: ADD
18450: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18451: LD_ADDR_EXP 30
18455: PUSH
18456: LD_EXP 30
18460: PUSH
18461: LD_VAR 0 1
18465: PPUSH
18466: CALL_OW 251
18470: ADD
18471: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18472: LD_ADDR_EXP 30
18476: PUSH
18477: LD_EXP 30
18481: PUSH
18482: LD_VAR 0 1
18486: PPUSH
18487: CALL_OW 254
18491: ADD
18492: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 266
18502: PUSH
18503: LD_INT 3
18505: EQUAL
18506: IFFALSE 18585
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18508: LD_ADDR_EXP 30
18512: PUSH
18513: LD_EXP 30
18517: PUSH
18518: LD_INT 2
18520: ADD
18521: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18522: LD_ADDR_EXP 30
18526: PUSH
18527: LD_EXP 30
18531: PUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 250
18541: ADD
18542: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18543: LD_ADDR_EXP 30
18547: PUSH
18548: LD_EXP 30
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 251
18562: ADD
18563: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18564: LD_ADDR_EXP 30
18568: PUSH
18569: LD_EXP 30
18573: PUSH
18574: LD_VAR 0 1
18578: PPUSH
18579: CALL_OW 254
18583: ADD
18584: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18585: LD_VAR 0 1
18589: PPUSH
18590: CALL_OW 266
18594: PUSH
18595: LD_INT 5
18597: EQUAL
18598: IFFALSE 18677
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18600: LD_ADDR_EXP 30
18604: PUSH
18605: LD_EXP 30
18609: PUSH
18610: LD_INT 4
18612: ADD
18613: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18614: LD_ADDR_EXP 30
18618: PUSH
18619: LD_EXP 30
18623: PUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 250
18633: ADD
18634: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18635: LD_ADDR_EXP 30
18639: PUSH
18640: LD_EXP 30
18644: PUSH
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 251
18654: ADD
18655: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18656: LD_ADDR_EXP 30
18660: PUSH
18661: LD_EXP 30
18665: PUSH
18666: LD_VAR 0 1
18670: PPUSH
18671: CALL_OW 254
18675: ADD
18676: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 247
18686: PUSH
18687: LD_INT 1
18689: EQUAL
18690: IFFALSE 18740
// begin for i in defenders_list do
18692: LD_ADDR_VAR 0 2
18696: PUSH
18697: LD_EXP 31
18701: PUSH
18702: FOR_IN
18703: IFFALSE 18738
// if i = unit then
18705: LD_VAR 0 2
18709: PUSH
18710: LD_VAR 0 1
18714: EQUAL
18715: IFFALSE 18736
// defenders_list = defenders_list diff [ unit ] ;
18717: LD_ADDR_EXP 31
18721: PUSH
18722: LD_EXP 31
18726: PUSH
18727: LD_VAR 0 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: DIFF
18735: ST_TO_ADDR
18736: GO 18702
18738: POP
18739: POP
// end ; end ; end ; end_of_file
18740: PPOPN 2
18742: END
// every 0 0$1 do
18743: GO 18745
18745: DISABLE
// begin enable ;
18746: ENABLE
// if escapeAvalaible = 0 then
18747: LD_EXP 35
18751: PUSH
18752: LD_INT 0
18754: EQUAL
18755: IFFALSE 18767
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18757: LD_INT 3
18759: PPUSH
18760: LD_INT 6
18762: PPUSH
18763: CALL 6828 0 2
// if escapeAvalaible = 0 then
18767: LD_EXP 35
18771: PUSH
18772: LD_INT 0
18774: EQUAL
18775: IFFALSE 18787
// DefenseBase ( 1 , RussianBaseTerritory ) ;
18777: LD_INT 1
18779: PPUSH
18780: LD_INT 24
18782: PPUSH
18783: CALL 7575 0 2
// if russianAI = 1 then
18787: LD_EXP 26
18791: PUSH
18792: LD_INT 1
18794: EQUAL
18795: IFFALSE 18858
// begin RepairBuilding ( 3 , ruDepot ) ;
18797: LD_INT 3
18799: PPUSH
18800: LD_EXP 27
18804: PPUSH
18805: CALL 7875 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
18809: LD_INT 3
18811: PPUSH
18812: LD_INT 7
18814: PPUSH
18815: LD_INT 6
18817: PPUSH
18818: LD_EXP 28
18822: PPUSH
18823: CALL 8340 0 4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18827: LD_INT 3
18829: PPUSH
18830: LD_EXP 30
18834: PPUSH
18835: CALL 8134 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
18839: LD_INT 6
18841: PPUSH
18842: LD_INT 8
18844: PPUSH
18845: LD_INT 93
18847: PPUSH
18848: LD_INT 93
18850: PPUSH
18851: LD_INT 1
18853: PPUSH
18854: CALL 8617 0 5
// end ; if SikorskyArrive = 1 then
18858: LD_EXP 17
18862: PUSH
18863: LD_INT 1
18865: EQUAL
18866: IFFALSE 18887
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
18868: LD_INT 3
18870: PPUSH
18871: LD_INT 10
18873: PPUSH
18874: LD_INT 53
18876: PPUSH
18877: LD_INT 59
18879: PPUSH
18880: LD_INT 3
18882: PPUSH
18883: CALL 8617 0 5
// end ;
18887: END
// every 0 0$1 trigger russianAI = 1 do var i ;
18888: LD_EXP 26
18892: PUSH
18893: LD_INT 1
18895: EQUAL
18896: IFFALSE 19172
18898: GO 18900
18900: DISABLE
18901: LD_INT 0
18903: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
18904: LD_ADDR_VAR 0 1
18908: PUSH
18909: LD_INT 22
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 21
18921: PUSH
18922: LD_INT 3
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 30
18931: PUSH
18932: LD_INT 32
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 3
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 35
18947: PUSH
18948: LD_INT 43
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 35
18957: PUSH
18958: LD_INT 44
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 35
18967: PUSH
18968: LD_INT 46
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: PPUSH
18991: CALL_OW 69
18995: PUSH
18996: FOR_IN
18997: IFFALSE 19036
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18999: LD_VAR 0 1
19003: PPUSH
19004: LD_INT 43
19006: PUSH
19007: LD_INT 44
19009: PUSH
19010: LD_INT 46
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: PPUSH
19021: LD_INT 3
19023: PPUSH
19024: CALL_OW 12
19028: ARRAY
19029: PPUSH
19030: CALL_OW 431
19034: GO 18996
19036: POP
19037: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
19038: LD_ADDR_VAR 0 1
19042: PUSH
19043: LD_INT 22
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 30
19065: PUSH
19066: LD_INT 33
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: LD_INT 2
19078: PUSH
19079: LD_INT 35
19081: PUSH
19082: LD_INT 43
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 35
19091: PUSH
19092: LD_INT 44
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 35
19101: PUSH
19102: LD_INT 46
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: PUSH
19130: FOR_IN
19131: IFFALSE 19170
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_INT 43
19140: PUSH
19141: LD_INT 44
19143: PUSH
19144: LD_INT 46
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 1
19154: PPUSH
19155: LD_INT 3
19157: PPUSH
19158: CALL_OW 12
19162: ARRAY
19163: PPUSH
19164: CALL_OW 431
19168: GO 19130
19170: POP
19171: POP
// end ;
19172: PPOPN 1
19174: END
// every 0 0$1 trigger SikorskyAI = 1 do
19175: LD_EXP 19
19179: PUSH
19180: LD_INT 1
19182: EQUAL
19183: IFFALSE 19221
19185: GO 19187
19187: DISABLE
// begin enable ;
19188: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
19189: LD_INT 4
19191: PPUSH
19192: LD_INT 10
19194: PPUSH
19195: LD_INT 93
19197: PPUSH
19198: LD_INT 93
19200: PPUSH
19201: LD_INT 3
19203: PPUSH
19204: CALL 8617 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
19208: LD_INT 4
19210: PPUSH
19211: LD_INT 11
19213: PPUSH
19214: LD_INT 3
19216: PPUSH
19217: CALL 13998 0 3
// end ;
19221: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19222: LD_EXP 26
19226: PUSH
19227: LD_INT 1
19229: EQUAL
19230: PUSH
19231: LD_EXP 29
19235: PPUSH
19236: CALL_OW 302
19240: AND
19241: PUSH
19242: LD_EXP 29
19246: PPUSH
19247: CALL_OW 255
19251: PUSH
19252: LD_INT 3
19254: EQUAL
19255: AND
19256: PUSH
19257: LD_INT 22
19259: PUSH
19260: LD_INT 3
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 21
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 33
19279: PUSH
19280: LD_INT 3
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 69
19296: PUSH
19297: LD_INT 0
19299: EQUAL
19300: AND
19301: IFFALSE 19480
19303: GO 19305
19305: DISABLE
// begin enable ;
19306: ENABLE
// if Difficulty = 1 then
19307: LD_OWVAR 67
19311: PUSH
19312: LD_INT 1
19314: EQUAL
19315: IFFALSE 19366
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
19317: LD_INT 3
19319: PPUSH
19320: LD_EXP 29
19324: PPUSH
19325: LD_INT 5
19327: PPUSH
19328: LD_INT 8
19330: PPUSH
19331: CALL_OW 12
19335: PPUSH
19336: LD_INT 1
19338: PPUSH
19339: LD_INT 43
19341: PUSH
19342: LD_INT 44
19344: PUSH
19345: LD_INT 46
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: PPUSH
19353: LD_INT 1
19355: PPUSH
19356: LD_INT 3
19358: PPUSH
19359: LD_INT 24
19361: PPUSH
19362: CALL 9452 0 8
// if Difficulty = 2 then
19366: LD_OWVAR 67
19370: PUSH
19371: LD_INT 2
19373: EQUAL
19374: IFFALSE 19425
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
19376: LD_INT 3
19378: PPUSH
19379: LD_EXP 29
19383: PPUSH
19384: LD_INT 6
19386: PPUSH
19387: LD_INT 8
19389: PPUSH
19390: CALL_OW 12
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: LD_INT 44
19400: PUSH
19401: LD_INT 44
19403: PUSH
19404: LD_INT 46
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: PPUSH
19412: LD_INT 1
19414: PPUSH
19415: LD_INT 3
19417: PPUSH
19418: LD_INT 24
19420: PPUSH
19421: CALL 9452 0 8
// if Difficulty = 3 then
19425: LD_OWVAR 67
19429: PUSH
19430: LD_INT 3
19432: EQUAL
19433: IFFALSE 19480
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
19435: LD_INT 3
19437: PPUSH
19438: LD_EXP 29
19442: PPUSH
19443: LD_INT 7
19445: PPUSH
19446: LD_INT 8
19448: PPUSH
19449: CALL_OW 12
19453: PPUSH
19454: LD_INT 1
19456: PPUSH
19457: LD_INT 44
19459: PUSH
19460: LD_INT 46
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PPUSH
19467: LD_INT 1
19469: PPUSH
19470: LD_INT 3
19472: PPUSH
19473: LD_INT 24
19475: PPUSH
19476: CALL 9452 0 8
// end ;
19480: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
19481: LD_EXP 37
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: IFFALSE 19571
19491: GO 19493
19493: DISABLE
19494: LD_INT 0
19496: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
19497: LD_ADDR_VAR 0 1
19501: PUSH
19502: LD_INT 22
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: LD_INT 24
19527: PUSH
19528: LD_INT 650
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: PPUSH
19544: CALL_OW 69
19548: PUSH
19549: FOR_IN
19550: IFFALSE 19569
// ComMoveXY ( i , 51 , 12 ) ;
19552: LD_VAR 0 1
19556: PPUSH
19557: LD_INT 51
19559: PPUSH
19560: LD_INT 12
19562: PPUSH
19563: CALL_OW 111
19567: GO 19549
19569: POP
19570: POP
// end ; end_of_file
19571: PPOPN 1
19573: END
// every 1 1$20 trigger firstAttack = 1 do
19574: LD_EXP 32
19578: PUSH
19579: LD_INT 1
19581: EQUAL
19582: IFFALSE 19688
19584: GO 19586
19586: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19587: LD_INT 6
19589: PPUSH
19590: LD_INT 3
19592: PPUSH
19593: LD_INT 5
19595: PPUSH
19596: LD_INT 6
19598: PPUSH
19599: CALL_OW 12
19603: PUSH
19604: LD_INT 5
19606: PPUSH
19607: LD_INT 6
19609: PPUSH
19610: CALL_OW 12
19614: PUSH
19615: LD_INT 5
19617: PPUSH
19618: LD_INT 6
19620: PPUSH
19621: CALL_OW 12
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: PUSH
19631: LD_OWVAR 67
19635: ARRAY
19636: PPUSH
19637: LD_INT 0
19639: PPUSH
19640: LD_INT 0
19642: PPUSH
19643: LD_INT 0
19645: PPUSH
19646: LD_INT 0
19648: PPUSH
19649: LD_EXP 24
19653: PPUSH
19654: LD_EXP 25
19658: PPUSH
19659: CALL_OW 12
19663: PPUSH
19664: LD_INT 16
19666: PPUSH
19667: LD_INT 7
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: LD_INT 3
19678: PPUSH
19679: CALL_OW 12
19683: PPUSH
19684: CALL 10016 0 12
19688: END
// every 1 1$40 trigger firstAttack = 1 do
19689: LD_EXP 32
19693: PUSH
19694: LD_INT 1
19696: EQUAL
19697: IFFALSE 19797
19699: GO 19701
19701: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 5 , 6 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19702: LD_INT 16
19704: PPUSH
19705: LD_INT 6
19707: PPUSH
19708: LD_INT 3
19710: PPUSH
19711: LD_INT 4
19713: PPUSH
19714: CALL_OW 12
19718: PUSH
19719: LD_INT 4
19721: PPUSH
19722: LD_INT 5
19724: PPUSH
19725: CALL_OW 12
19729: PUSH
19730: LD_INT 5
19732: PPUSH
19733: LD_INT 6
19735: PPUSH
19736: CALL_OW 12
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: PUSH
19746: LD_OWVAR 67
19750: ARRAY
19751: PPUSH
19752: LD_EXP 24
19756: PPUSH
19757: LD_EXP 25
19761: PPUSH
19762: CALL_OW 12
19766: PPUSH
19767: LD_INT 3
19769: PPUSH
19770: LD_INT 1
19772: PPUSH
19773: LD_INT 3
19775: PPUSH
19776: LD_INT 44
19778: PUSH
19779: LD_INT 46
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PPUSH
19786: EMPTY
19787: PPUSH
19788: EMPTY
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL 12309 0 11
19797: END
// every 3 3$10 trigger firstAttack = 1 do
19798: LD_EXP 32
19802: PUSH
19803: LD_INT 1
19805: EQUAL
19806: IFFALSE 19912
19808: GO 19810
19810: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19811: LD_INT 6
19813: PPUSH
19814: LD_INT 3
19816: PPUSH
19817: LD_INT 5
19819: PPUSH
19820: LD_INT 6
19822: PPUSH
19823: CALL_OW 12
19827: PUSH
19828: LD_INT 5
19830: PPUSH
19831: LD_INT 6
19833: PPUSH
19834: CALL_OW 12
19838: PUSH
19839: LD_INT 5
19841: PPUSH
19842: LD_INT 6
19844: PPUSH
19845: CALL_OW 12
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: PUSH
19855: LD_OWVAR 67
19859: ARRAY
19860: PPUSH
19861: LD_INT 0
19863: PPUSH
19864: LD_INT 0
19866: PPUSH
19867: LD_INT 0
19869: PPUSH
19870: LD_INT 0
19872: PPUSH
19873: LD_EXP 24
19877: PPUSH
19878: LD_EXP 25
19882: PPUSH
19883: CALL_OW 12
19887: PPUSH
19888: LD_INT 16
19890: PPUSH
19891: LD_INT 7
19893: PPUSH
19894: LD_INT 1
19896: PPUSH
19897: LD_INT 1
19899: PPUSH
19900: LD_INT 3
19902: PPUSH
19903: CALL_OW 12
19907: PPUSH
19908: CALL 10016 0 12
19912: END
// every 3 3$20 trigger firstAttack = 1 do
19913: LD_EXP 32
19917: PUSH
19918: LD_INT 1
19920: EQUAL
19921: IFFALSE 20029
19923: GO 19925
19925: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19926: LD_INT 16
19928: PPUSH
19929: LD_INT 6
19931: PPUSH
19932: LD_INT 4
19934: PPUSH
19935: LD_INT 5
19937: PPUSH
19938: CALL_OW 12
19942: PUSH
19943: LD_INT 5
19945: PPUSH
19946: LD_INT 6
19948: PPUSH
19949: CALL_OW 12
19953: PUSH
19954: LD_INT 6
19956: PPUSH
19957: LD_INT 7
19959: PPUSH
19960: CALL_OW 12
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: PUSH
19970: LD_OWVAR 67
19974: ARRAY
19975: PPUSH
19976: LD_EXP 24
19980: PPUSH
19981: LD_EXP 25
19985: PPUSH
19986: CALL_OW 12
19990: PPUSH
19991: LD_INT 3
19993: PPUSH
19994: LD_INT 1
19996: PPUSH
19997: LD_INT 3
19999: PPUSH
20000: LD_INT 42
20002: PUSH
20003: LD_INT 43
20005: PUSH
20006: LD_INT 44
20008: PUSH
20009: LD_INT 46
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: PPUSH
20018: EMPTY
20019: PPUSH
20020: EMPTY
20021: PPUSH
20022: LD_INT 1
20024: PPUSH
20025: CALL 12309 0 11
20029: END
// every 7 7$40 trigger firstAttack = 1 and JMMArrive = 0 do
20030: LD_EXP 32
20034: PUSH
20035: LD_INT 1
20037: EQUAL
20038: PUSH
20039: LD_EXP 38
20043: PUSH
20044: LD_INT 0
20046: EQUAL
20047: AND
20048: IFFALSE 20154
20050: GO 20052
20052: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20053: LD_INT 6
20055: PPUSH
20056: LD_INT 3
20058: PPUSH
20059: LD_INT 5
20061: PPUSH
20062: LD_INT 6
20064: PPUSH
20065: CALL_OW 12
20069: PUSH
20070: LD_INT 5
20072: PPUSH
20073: LD_INT 6
20075: PPUSH
20076: CALL_OW 12
20080: PUSH
20081: LD_INT 5
20083: PPUSH
20084: LD_INT 6
20086: PPUSH
20087: CALL_OW 12
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: PUSH
20097: LD_OWVAR 67
20101: ARRAY
20102: PPUSH
20103: LD_INT 0
20105: PPUSH
20106: LD_INT 0
20108: PPUSH
20109: LD_INT 0
20111: PPUSH
20112: LD_INT 0
20114: PPUSH
20115: LD_EXP 24
20119: PPUSH
20120: LD_EXP 25
20124: PPUSH
20125: CALL_OW 12
20129: PPUSH
20130: LD_INT 16
20132: PPUSH
20133: LD_INT 7
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: LD_INT 3
20144: PPUSH
20145: CALL_OW 12
20149: PPUSH
20150: CALL 10016 0 12
20154: END
// every 7 7$50 trigger firstAttack = 1 and JMMArrive = 0 do
20155: LD_EXP 32
20159: PUSH
20160: LD_INT 1
20162: EQUAL
20163: PUSH
20164: LD_EXP 38
20168: PUSH
20169: LD_INT 0
20171: EQUAL
20172: AND
20173: IFFALSE 20277
20175: GO 20177
20177: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , rand ( 7 , 8 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20178: LD_INT 16
20180: PPUSH
20181: LD_INT 6
20183: PPUSH
20184: LD_INT 5
20186: PPUSH
20187: LD_INT 6
20189: PPUSH
20190: CALL_OW 12
20194: PUSH
20195: LD_INT 6
20197: PPUSH
20198: LD_INT 7
20200: PPUSH
20201: CALL_OW 12
20205: PUSH
20206: LD_INT 7
20208: PPUSH
20209: LD_INT 8
20211: PPUSH
20212: CALL_OW 12
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: PUSH
20222: LD_OWVAR 67
20226: ARRAY
20227: PPUSH
20228: LD_EXP 24
20232: PPUSH
20233: LD_EXP 25
20237: PPUSH
20238: CALL_OW 12
20242: PPUSH
20243: LD_INT 3
20245: PPUSH
20246: LD_INT 1
20248: PPUSH
20249: LD_INT 3
20251: PPUSH
20252: LD_INT 43
20254: PUSH
20255: LD_INT 44
20257: PUSH
20258: LD_INT 46
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: LIST
20265: PPUSH
20266: EMPTY
20267: PPUSH
20268: EMPTY
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL 12309 0 11
20277: END
// every 10 10$00 trigger firstAttack = 1 and JMMArrive = 0 do
20278: LD_EXP 32
20282: PUSH
20283: LD_INT 1
20285: EQUAL
20286: PUSH
20287: LD_EXP 38
20291: PUSH
20292: LD_INT 0
20294: EQUAL
20295: AND
20296: IFFALSE 20372
20298: GO 20300
20300: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20301: LD_INT 16
20303: PPUSH
20304: LD_INT 6
20306: PPUSH
20307: LD_INT 6
20309: PUSH
20310: LD_INT 7
20312: PUSH
20313: LD_INT 8
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: LIST
20320: PUSH
20321: LD_OWVAR 67
20325: ARRAY
20326: PPUSH
20327: LD_EXP 24
20331: PPUSH
20332: LD_EXP 25
20336: PPUSH
20337: CALL_OW 12
20341: PPUSH
20342: LD_INT 3
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: LD_INT 3
20350: PPUSH
20351: LD_INT 44
20353: PUSH
20354: LD_INT 46
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PPUSH
20361: EMPTY
20362: PPUSH
20363: EMPTY
20364: PPUSH
20365: LD_INT 1
20367: PPUSH
20368: CALL 12309 0 11
20372: END
// every 1 1$00 trigger secondAttack = 1 do
20373: LD_EXP 33
20377: PUSH
20378: LD_INT 1
20380: EQUAL
20381: IFFALSE 20487
20383: GO 20385
20385: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20386: LD_INT 6
20388: PPUSH
20389: LD_INT 3
20391: PPUSH
20392: LD_INT 4
20394: PPUSH
20395: LD_INT 7
20397: PPUSH
20398: CALL_OW 12
20402: PUSH
20403: LD_INT 6
20405: PPUSH
20406: LD_INT 7
20408: PPUSH
20409: CALL_OW 12
20413: PUSH
20414: LD_INT 6
20416: PPUSH
20417: LD_INT 10
20419: PPUSH
20420: CALL_OW 12
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: PUSH
20430: LD_OWVAR 67
20434: ARRAY
20435: PPUSH
20436: LD_INT 0
20438: PPUSH
20439: LD_INT 0
20441: PPUSH
20442: LD_INT 0
20444: PPUSH
20445: LD_INT 0
20447: PPUSH
20448: LD_EXP 24
20452: PPUSH
20453: LD_EXP 25
20457: PPUSH
20458: CALL_OW 12
20462: PPUSH
20463: LD_INT 16
20465: PPUSH
20466: LD_INT 7
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: LD_INT 1
20474: PPUSH
20475: LD_INT 3
20477: PPUSH
20478: CALL_OW 12
20482: PPUSH
20483: CALL 10016 0 12
20487: END
// every 1 1$00 trigger secondAttack = 1 do
20488: LD_EXP 33
20492: PUSH
20493: LD_INT 1
20495: EQUAL
20496: IFFALSE 20600
20498: GO 20500
20500: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20501: LD_INT 16
20503: PPUSH
20504: LD_INT 6
20506: PPUSH
20507: LD_INT 5
20509: PPUSH
20510: LD_INT 8
20512: PPUSH
20513: CALL_OW 12
20517: PUSH
20518: LD_INT 6
20520: PPUSH
20521: LD_INT 9
20523: PPUSH
20524: CALL_OW 12
20528: PUSH
20529: LD_INT 7
20531: PPUSH
20532: LD_INT 9
20534: PPUSH
20535: CALL_OW 12
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PUSH
20545: LD_OWVAR 67
20549: ARRAY
20550: PPUSH
20551: LD_EXP 24
20555: PPUSH
20556: LD_EXP 25
20560: PPUSH
20561: CALL_OW 12
20565: PPUSH
20566: LD_INT 3
20568: PPUSH
20569: LD_INT 1
20571: PPUSH
20572: LD_INT 3
20574: PPUSH
20575: LD_INT 43
20577: PUSH
20578: LD_INT 44
20580: PUSH
20581: LD_INT 46
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: PPUSH
20589: EMPTY
20590: PPUSH
20591: EMPTY
20592: PPUSH
20593: LD_INT 1
20595: PPUSH
20596: CALL 12309 0 11
20600: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20601: LD_EXP 17
20605: PUSH
20606: LD_INT 0
20608: EQUAL
20609: IFFALSE 20715
20611: GO 20613
20613: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20614: LD_INT 6
20616: PPUSH
20617: LD_INT 3
20619: PPUSH
20620: LD_INT 8
20622: PPUSH
20623: LD_INT 9
20625: PPUSH
20626: CALL_OW 12
20630: PUSH
20631: LD_INT 7
20633: PPUSH
20634: LD_INT 10
20636: PPUSH
20637: CALL_OW 12
20641: PUSH
20642: LD_INT 8
20644: PPUSH
20645: LD_INT 10
20647: PPUSH
20648: CALL_OW 12
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: PUSH
20658: LD_OWVAR 67
20662: ARRAY
20663: PPUSH
20664: LD_INT 0
20666: PPUSH
20667: LD_INT 0
20669: PPUSH
20670: LD_INT 0
20672: PPUSH
20673: LD_INT 0
20675: PPUSH
20676: LD_EXP 24
20680: PPUSH
20681: LD_EXP 25
20685: PPUSH
20686: CALL_OW 12
20690: PPUSH
20691: LD_INT 16
20693: PPUSH
20694: LD_INT 7
20696: PPUSH
20697: LD_INT 1
20699: PPUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_INT 3
20705: PPUSH
20706: CALL_OW 12
20710: PPUSH
20711: CALL 10016 0 12
20715: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20716: LD_EXP 17
20720: PUSH
20721: LD_INT 0
20723: EQUAL
20724: IFFALSE 20824
20726: GO 20728
20728: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20729: LD_INT 16
20731: PPUSH
20732: LD_INT 6
20734: PPUSH
20735: LD_INT 5
20737: PPUSH
20738: LD_INT 8
20740: PPUSH
20741: CALL_OW 12
20745: PUSH
20746: LD_INT 6
20748: PPUSH
20749: LD_INT 9
20751: PPUSH
20752: CALL_OW 12
20756: PUSH
20757: LD_INT 7
20759: PPUSH
20760: LD_INT 9
20762: PPUSH
20763: CALL_OW 12
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: PUSH
20773: LD_OWVAR 67
20777: ARRAY
20778: PPUSH
20779: LD_EXP 24
20783: PPUSH
20784: LD_EXP 25
20788: PPUSH
20789: CALL_OW 12
20793: PPUSH
20794: LD_INT 3
20796: PPUSH
20797: LD_INT 1
20799: PPUSH
20800: LD_INT 3
20802: PPUSH
20803: LD_INT 44
20805: PUSH
20806: LD_INT 46
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PPUSH
20813: EMPTY
20814: PPUSH
20815: EMPTY
20816: PPUSH
20817: LD_INT 1
20819: PPUSH
20820: CALL 12309 0 11
20824: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20825: LD_EXP 17
20829: PUSH
20830: LD_INT 0
20832: EQUAL
20833: IFFALSE 20939
20835: GO 20837
20837: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20838: LD_INT 6
20840: PPUSH
20841: LD_INT 3
20843: PPUSH
20844: LD_INT 8
20846: PPUSH
20847: LD_INT 9
20849: PPUSH
20850: CALL_OW 12
20854: PUSH
20855: LD_INT 7
20857: PPUSH
20858: LD_INT 10
20860: PPUSH
20861: CALL_OW 12
20865: PUSH
20866: LD_INT 8
20868: PPUSH
20869: LD_INT 10
20871: PPUSH
20872: CALL_OW 12
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: LD_OWVAR 67
20886: ARRAY
20887: PPUSH
20888: LD_INT 0
20890: PPUSH
20891: LD_INT 0
20893: PPUSH
20894: LD_INT 0
20896: PPUSH
20897: LD_INT 0
20899: PPUSH
20900: LD_EXP 24
20904: PPUSH
20905: LD_EXP 25
20909: PPUSH
20910: CALL_OW 12
20914: PPUSH
20915: LD_INT 16
20917: PPUSH
20918: LD_INT 7
20920: PPUSH
20921: LD_INT 1
20923: PPUSH
20924: LD_INT 1
20926: PPUSH
20927: LD_INT 3
20929: PPUSH
20930: CALL_OW 12
20934: PPUSH
20935: CALL 10016 0 12
20939: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20940: LD_EXP 17
20944: PUSH
20945: LD_INT 0
20947: EQUAL
20948: IFFALSE 21048
20950: GO 20952
20952: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20953: LD_INT 16
20955: PPUSH
20956: LD_INT 6
20958: PPUSH
20959: LD_INT 5
20961: PPUSH
20962: LD_INT 8
20964: PPUSH
20965: CALL_OW 12
20969: PUSH
20970: LD_INT 6
20972: PPUSH
20973: LD_INT 9
20975: PPUSH
20976: CALL_OW 12
20980: PUSH
20981: LD_INT 7
20983: PPUSH
20984: LD_INT 9
20986: PPUSH
20987: CALL_OW 12
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: PUSH
20997: LD_OWVAR 67
21001: ARRAY
21002: PPUSH
21003: LD_EXP 24
21007: PPUSH
21008: LD_EXP 25
21012: PPUSH
21013: CALL_OW 12
21017: PPUSH
21018: LD_INT 3
21020: PPUSH
21021: LD_INT 1
21023: PPUSH
21024: LD_INT 3
21026: PPUSH
21027: LD_INT 44
21029: PUSH
21030: LD_INT 46
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PPUSH
21037: EMPTY
21038: PPUSH
21039: EMPTY
21040: PPUSH
21041: LD_INT 1
21043: PPUSH
21044: CALL 12309 0 11
21048: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21049: LD_EXP 17
21053: PUSH
21054: LD_INT 0
21056: EQUAL
21057: IFFALSE 21163
21059: GO 21061
21061: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21062: LD_INT 6
21064: PPUSH
21065: LD_INT 3
21067: PPUSH
21068: LD_INT 8
21070: PPUSH
21071: LD_INT 9
21073: PPUSH
21074: CALL_OW 12
21078: PUSH
21079: LD_INT 7
21081: PPUSH
21082: LD_INT 10
21084: PPUSH
21085: CALL_OW 12
21089: PUSH
21090: LD_INT 8
21092: PPUSH
21093: LD_INT 10
21095: PPUSH
21096: CALL_OW 12
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: PUSH
21106: LD_OWVAR 67
21110: ARRAY
21111: PPUSH
21112: LD_INT 0
21114: PPUSH
21115: LD_INT 0
21117: PPUSH
21118: LD_INT 0
21120: PPUSH
21121: LD_INT 0
21123: PPUSH
21124: LD_EXP 24
21128: PPUSH
21129: LD_EXP 25
21133: PPUSH
21134: CALL_OW 12
21138: PPUSH
21139: LD_INT 16
21141: PPUSH
21142: LD_INT 7
21144: PPUSH
21145: LD_INT 1
21147: PPUSH
21148: LD_INT 1
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 12
21158: PPUSH
21159: CALL 10016 0 12
21163: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21164: LD_EXP 17
21168: PUSH
21169: LD_INT 0
21171: EQUAL
21172: IFFALSE 21272
21174: GO 21176
21176: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
21177: LD_INT 16
21179: PPUSH
21180: LD_INT 6
21182: PPUSH
21183: LD_INT 5
21185: PPUSH
21186: LD_INT 8
21188: PPUSH
21189: CALL_OW 12
21193: PUSH
21194: LD_INT 6
21196: PPUSH
21197: LD_INT 9
21199: PPUSH
21200: CALL_OW 12
21204: PUSH
21205: LD_INT 7
21207: PPUSH
21208: LD_INT 9
21210: PPUSH
21211: CALL_OW 12
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: LD_OWVAR 67
21225: ARRAY
21226: PPUSH
21227: LD_EXP 24
21231: PPUSH
21232: LD_EXP 25
21236: PPUSH
21237: CALL_OW 12
21241: PPUSH
21242: LD_INT 3
21244: PPUSH
21245: LD_INT 1
21247: PPUSH
21248: LD_INT 3
21250: PPUSH
21251: LD_INT 44
21253: PUSH
21254: LD_INT 46
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PPUSH
21261: EMPTY
21262: PPUSH
21263: EMPTY
21264: PPUSH
21265: LD_INT 1
21267: PPUSH
21268: CALL 12309 0 11
21272: END
// every 0 0$1 trigger timerStatus = 1 do
21273: LD_EXP 34
21277: PUSH
21278: LD_INT 1
21280: EQUAL
21281: IFFALSE 21318
21283: GO 21285
21285: DISABLE
// begin enable ;
21286: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
21287: LD_ADDR_OWVAR 47
21291: PUSH
21292: LD_STRING #Am08-1
21294: PUSH
21295: LD_EXP 18
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
21304: LD_ADDR_EXP 18
21308: PUSH
21309: LD_EXP 18
21313: PUSH
21314: LD_INT 35
21316: MINUS
21317: ST_TO_ADDR
// end ; end_of_file
21318: END
// every 1 1$0 do
21319: GO 21321
21321: DISABLE
// begin if supply <= 13 and supply > 7 then
21322: LD_EXP 39
21326: PUSH
21327: LD_INT 13
21329: LESSEQUAL
21330: PUSH
21331: LD_EXP 39
21335: PUSH
21336: LD_INT 7
21338: GREATER
21339: AND
21340: IFFALSE 21363
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
21342: LD_INT 3
21344: PPUSH
21345: LD_INT 5
21347: PPUSH
21348: CALL_OW 12
21352: PPUSH
21353: LD_INT 5
21355: PPUSH
21356: LD_INT 1
21358: PPUSH
21359: CALL_OW 55
// if supply <= 7 and supply > 4 then
21363: LD_EXP 39
21367: PUSH
21368: LD_INT 7
21370: LESSEQUAL
21371: PUSH
21372: LD_EXP 39
21376: PUSH
21377: LD_INT 4
21379: GREATER
21380: AND
21381: IFFALSE 21404
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
21383: LD_INT 3
21385: PPUSH
21386: LD_INT 5
21388: PPUSH
21389: CALL_OW 12
21393: PPUSH
21394: LD_INT 20
21396: PPUSH
21397: LD_INT 1
21399: PPUSH
21400: CALL_OW 55
// if supply <= 4 and supply > 0 then
21404: LD_EXP 39
21408: PUSH
21409: LD_INT 4
21411: LESSEQUAL
21412: PUSH
21413: LD_EXP 39
21417: PUSH
21418: LD_INT 0
21420: GREATER
21421: AND
21422: IFFALSE 21445
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
21424: LD_INT 3
21426: PPUSH
21427: LD_INT 5
21429: PPUSH
21430: CALL_OW 12
21434: PPUSH
21435: LD_INT 21
21437: PPUSH
21438: LD_INT 1
21440: PPUSH
21441: CALL_OW 55
// if supply > 0 then
21445: LD_EXP 39
21449: PUSH
21450: LD_INT 0
21452: GREATER
21453: IFFALSE 21470
// begin supply = supply - 1 ;
21455: LD_ADDR_EXP 39
21459: PUSH
21460: LD_EXP 39
21464: PUSH
21465: LD_INT 1
21467: MINUS
21468: ST_TO_ADDR
// enable ;
21469: ENABLE
// end ; end ; end_of_file
21470: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
21471: LD_EXP 38
21475: PUSH
21476: LD_INT 1
21478: EQUAL
21479: PUSH
21480: LD_EXP 1
21484: PPUSH
21485: CALL_OW 301
21489: AND
21490: IFFALSE 21502
21492: GO 21494
21494: DISABLE
// YouLost ( JMM ) ;
21495: LD_STRING JMM
21497: PPUSH
21498: CALL_OW 104
21502: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
21503: LD_EXP 17
21507: PUSH
21508: LD_INT 1
21510: EQUAL
21511: PUSH
21512: LD_EXP 15
21516: PPUSH
21517: CALL_OW 301
21521: AND
21522: IFFALSE 21554
21524: GO 21526
21526: DISABLE
// begin DialogueOn ;
21527: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
21531: LD_EXP 22
21535: PPUSH
21536: LD_STRING D8a-Pow-1
21538: PPUSH
21539: CALL_OW 94
// DialogueOff ;
21543: CALL_OW 7
// YouLost ( Dismissed ) ;
21547: LD_STRING Dismissed
21549: PPUSH
21550: CALL_OW 104
// end ;
21554: END
// every 0 0$1 trigger IsDead ( amDepot ) do
21555: LD_EXP 36
21559: PPUSH
21560: CALL_OW 301
21564: IFFALSE 21576
21566: GO 21568
21568: DISABLE
// YouLost ( Destroyed ) ; end_of_file
21569: LD_STRING Destroyed
21571: PPUSH
21572: CALL_OW 104
21576: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
21577: LD_EXP 23
21581: PPUSH
21582: CALL_OW 301
21586: IFFALSE 21931
21588: GO 21590
21590: DISABLE
21591: LD_INT 0
21593: PPUSH
// begin russianAI = 0 ;
21594: LD_ADDR_EXP 26
21598: PUSH
21599: LD_INT 0
21601: ST_TO_ADDR
// escapeAvalaible = 1 ;
21602: LD_ADDR_EXP 35
21606: PUSH
21607: LD_INT 1
21609: ST_TO_ADDR
// InGameOn ;
21610: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
21614: LD_INT 3
21616: PPUSH
21617: LD_INT 1
21619: PPUSH
21620: LD_INT 1
21622: PPUSH
21623: LD_INT 0
21625: PPUSH
21626: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
21630: LD_INT 6
21632: PPUSH
21633: LD_INT 1
21635: PPUSH
21636: LD_INT 1
21638: PPUSH
21639: LD_INT 0
21641: PPUSH
21642: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
21646: LD_INT 3
21648: PPUSH
21649: LD_INT 1
21651: PPUSH
21652: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
21656: LD_INT 97
21658: PPUSH
21659: LD_INT 91
21661: PPUSH
21662: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21666: LD_INT 22
21668: PUSH
21669: LD_INT 3
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PPUSH
21690: CALL_OW 69
21694: PPUSH
21695: CALL_OW 121
// wait ( 0 0$01 ) ;
21699: LD_INT 35
21701: PPUSH
21702: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21706: LD_INT 22
21708: PUSH
21709: LD_INT 3
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 21
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PPUSH
21730: CALL_OW 69
21734: PPUSH
21735: LD_INT 124
21737: PPUSH
21738: LD_INT 98
21740: PPUSH
21741: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21745: LD_INT 22
21747: PUSH
21748: LD_INT 6
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 21
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PPUSH
21769: CALL_OW 69
21773: PPUSH
21774: CALL_OW 121
// wait ( 0 0$01 ) ;
21778: LD_INT 35
21780: PPUSH
21781: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21785: LD_INT 22
21787: PUSH
21788: LD_INT 6
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 21
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PPUSH
21809: CALL_OW 69
21813: PPUSH
21814: LD_INT 124
21816: PPUSH
21817: LD_INT 98
21819: PPUSH
21820: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21824: LD_INT 22
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 21
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PPUSH
21848: CALL_OW 69
21852: PPUSH
21853: LD_INT 124
21855: PPUSH
21856: LD_INT 98
21858: PPUSH
21859: CALL_OW 114
// wait ( 0 0$4 ) ;
21863: LD_INT 140
21865: PPUSH
21866: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
21870: LD_INT 124
21872: PPUSH
21873: LD_INT 98
21875: PPUSH
21876: CALL_OW 84
// if SikorskyStatus = 1 then
21880: LD_EXP 20
21884: PUSH
21885: LD_INT 1
21887: EQUAL
21888: IFFALSE 21902
// begin Say ( Sikorski , D9-Sik-1 ) ;
21890: LD_EXP 15
21894: PPUSH
21895: LD_STRING D9-Sik-1
21897: PPUSH
21898: CALL_OW 88
// end ; if SikorskyStatus = 2 then
21902: LD_EXP 20
21906: PUSH
21907: LD_INT 2
21909: EQUAL
21910: IFFALSE 21931
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
21912: LD_EXP 22
21916: PPUSH
21917: LD_STRING D8b-Pow-1
21919: PPUSH
21920: CALL_OW 94
// YouLost ( Dismissed ) ;
21924: LD_STRING Dismissed
21926: PPUSH
21927: CALL_OW 104
// end ; end ;
21931: PPOPN 1
21933: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
21934: LD_INT 23
21936: PUSH
21937: LD_INT 3
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 21
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 24
21956: PUSH
21957: LD_INT 250
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: LIST
21968: PPUSH
21969: CALL_OW 69
21973: PUSH
21974: LD_INT 0
21976: EQUAL
21977: IFFALSE 21986
21979: GO 21981
21981: DISABLE
// FinishMission ;
21982: CALL 21987 0 0
21986: END
// export function FinishMission ; var tmp ; begin
21987: LD_INT 0
21989: PPUSH
21990: PPUSH
// AddMedal ( med1 , 1 ) ;
21991: LD_STRING med1
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
22001: LD_STRING med2
22003: PPUSH
22004: LD_INT 1
22006: PPUSH
22007: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
22011: LD_STRING perfect
22013: PPUSH
22014: LD_INT 1
22016: PPUSH
22017: CALL_OW 101
// GiveMedals ( Main ) ;
22021: LD_STRING Main
22023: PPUSH
22024: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22028: LD_INT 22
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 23
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 21
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: LD_INT 25
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 25
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 25
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 25
22093: PUSH
22094: LD_INT 4
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PPUSH
22114: CALL_OW 69
22118: PPUSH
22119: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22123: LD_EXP 1
22127: PPUSH
22128: LD_EXP 41
22132: PUSH
22133: LD_STRING JMM
22135: STR
22136: PPUSH
22137: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22141: LD_EXP 2
22145: PPUSH
22146: LD_EXP 41
22150: PUSH
22151: LD_STRING Brown
22153: STR
22154: PPUSH
22155: CALL 6692 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22159: LD_EXP 3
22163: PPUSH
22164: LD_EXP 41
22168: PUSH
22169: LD_STRING Donaldson
22171: STR
22172: PPUSH
22173: CALL 6692 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22177: LD_EXP 4
22181: PPUSH
22182: LD_EXP 41
22186: PUSH
22187: LD_STRING Bobby
22189: STR
22190: PPUSH
22191: CALL 6692 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22195: LD_EXP 5
22199: PPUSH
22200: LD_EXP 41
22204: PUSH
22205: LD_STRING Cyrus
22207: STR
22208: PPUSH
22209: CALL 6692 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22213: LD_EXP 6
22217: PPUSH
22218: LD_EXP 41
22222: PUSH
22223: LD_STRING Lisa
22225: STR
22226: PPUSH
22227: CALL 6692 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22231: LD_EXP 7
22235: PPUSH
22236: LD_EXP 41
22240: PUSH
22241: LD_STRING Frank
22243: STR
22244: PPUSH
22245: CALL 6692 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22249: LD_EXP 8
22253: PPUSH
22254: LD_EXP 41
22258: PUSH
22259: LD_STRING Gladstone
22261: STR
22262: PPUSH
22263: CALL 6692 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22267: LD_EXP 9
22271: PPUSH
22272: LD_EXP 41
22276: PUSH
22277: LD_STRING Kikuchi
22279: STR
22280: PPUSH
22281: CALL 6692 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22285: LD_EXP 13
22289: PPUSH
22290: LD_EXP 41
22294: PUSH
22295: LD_STRING Denis
22297: STR
22298: PPUSH
22299: CALL 6692 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22303: LD_EXP 14
22307: PPUSH
22308: LD_EXP 41
22312: PUSH
22313: LD_STRING Joan
22315: STR
22316: PPUSH
22317: CALL 6692 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22321: LD_EXP 12
22325: PPUSH
22326: LD_EXP 41
22330: PUSH
22331: LD_STRING Houten
22333: STR
22334: PPUSH
22335: CALL 6692 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
22339: LD_INT 50
22341: PUSH
22342: EMPTY
22343: LIST
22344: PUSH
22345: LD_INT 22
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 21
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: LD_INT 25
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 25
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 25
22390: PUSH
22391: LD_INT 3
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 25
22400: PUSH
22401: LD_INT 4
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PPUSH
22421: CALL_OW 69
22425: PUSH
22426: LD_EXP 1
22430: PUSH
22431: LD_EXP 2
22435: PUSH
22436: LD_EXP 3
22440: PUSH
22441: LD_EXP 4
22445: PUSH
22446: LD_EXP 5
22450: PUSH
22451: LD_EXP 6
22455: PUSH
22456: LD_EXP 7
22460: PUSH
22461: LD_EXP 8
22465: PUSH
22466: LD_EXP 9
22470: PUSH
22471: LD_EXP 13
22475: PUSH
22476: LD_EXP 14
22480: PUSH
22481: LD_EXP 12
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: DIFF
22500: PPUSH
22501: LD_STRING 08_other_survivors
22503: PPUSH
22504: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
22508: LD_INT 23
22510: PPUSH
22511: CALL 22524 0 1
// YouWin ;
22515: CALL_OW 103
// end ;
22519: LD_VAR 0 1
22523: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
// gammaBase = [ ] ;
22530: LD_ADDR_VAR 0 4
22534: PUSH
22535: EMPTY
22536: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22537: LD_ADDR_VAR 0 5
22541: PUSH
22542: LD_VAR 0 1
22546: PPUSH
22547: LD_INT 22
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 21
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 50
22569: PUSH
22570: EMPTY
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: PPUSH
22578: CALL_OW 70
22582: ST_TO_ADDR
// for i in buildings do
22583: LD_ADDR_VAR 0 3
22587: PUSH
22588: LD_VAR 0 5
22592: PUSH
22593: FOR_IN
22594: IFFALSE 23031
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22596: LD_VAR 0 3
22600: PPUSH
22601: CALL_OW 266
22605: PUSH
22606: LD_INT 6
22608: PUSH
22609: LD_INT 7
22611: PUSH
22612: LD_INT 8
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: IN
22620: IFFALSE 22734
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22622: LD_ADDR_VAR 0 4
22626: PUSH
22627: LD_VAR 0 4
22631: PUSH
22632: LD_VAR 0 3
22636: PPUSH
22637: CALL_OW 266
22641: PUSH
22642: LD_VAR 0 3
22646: PPUSH
22647: CALL_OW 250
22651: PUSH
22652: LD_VAR 0 3
22656: PPUSH
22657: CALL_OW 251
22661: PUSH
22662: LD_VAR 0 3
22666: PPUSH
22667: CALL_OW 254
22671: PUSH
22672: LD_VAR 0 3
22676: PPUSH
22677: CALL_OW 267
22681: PUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 248
22691: PUSH
22692: LD_VAR 0 3
22696: PPUSH
22697: LD_INT 1
22699: PPUSH
22700: CALL_OW 268
22704: PUSH
22705: LD_VAR 0 3
22709: PPUSH
22710: LD_INT 2
22712: PPUSH
22713: CALL_OW 268
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: PUSH
22728: EMPTY
22729: LIST
22730: ADD
22731: ST_TO_ADDR
22732: GO 23029
// if GetBType ( i ) = b_bunker then
22734: LD_VAR 0 3
22738: PPUSH
22739: CALL_OW 266
22743: PUSH
22744: LD_INT 32
22746: EQUAL
22747: IFFALSE 22844
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22749: LD_ADDR_VAR 0 4
22753: PUSH
22754: LD_VAR 0 4
22758: PUSH
22759: LD_VAR 0 3
22763: PPUSH
22764: CALL_OW 266
22768: PUSH
22769: LD_VAR 0 3
22773: PPUSH
22774: CALL_OW 250
22778: PUSH
22779: LD_VAR 0 3
22783: PPUSH
22784: CALL_OW 251
22788: PUSH
22789: LD_VAR 0 3
22793: PPUSH
22794: CALL_OW 254
22798: PUSH
22799: LD_VAR 0 3
22803: PPUSH
22804: CALL_OW 267
22808: PUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: CALL_OW 248
22818: PUSH
22819: LD_VAR 0 3
22823: PPUSH
22824: CALL_OW 269
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: ADD
22841: ST_TO_ADDR
22842: GO 23029
// if GetBType ( i ) = b_factory then
22844: LD_VAR 0 3
22848: PPUSH
22849: CALL_OW 266
22853: PUSH
22854: LD_INT 3
22856: EQUAL
22857: IFFALSE 22947
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
22859: LD_ADDR_VAR 0 4
22863: PUSH
22864: LD_VAR 0 4
22868: PPUSH
22869: LD_INT 1
22871: PPUSH
22872: LD_VAR 0 3
22876: PPUSH
22877: CALL_OW 266
22881: PUSH
22882: LD_VAR 0 3
22886: PPUSH
22887: CALL_OW 250
22891: PUSH
22892: LD_VAR 0 3
22896: PPUSH
22897: CALL_OW 251
22901: PUSH
22902: LD_VAR 0 3
22906: PPUSH
22907: CALL_OW 254
22911: PUSH
22912: LD_VAR 0 3
22916: PPUSH
22917: CALL_OW 267
22921: PUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: CALL_OW 248
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 2
22944: ST_TO_ADDR
22945: GO 23029
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22947: LD_ADDR_VAR 0 4
22951: PUSH
22952: LD_VAR 0 4
22956: PUSH
22957: LD_VAR 0 3
22961: PPUSH
22962: CALL_OW 266
22966: PUSH
22967: LD_VAR 0 3
22971: PPUSH
22972: CALL_OW 250
22976: PUSH
22977: LD_VAR 0 3
22981: PPUSH
22982: CALL_OW 251
22986: PUSH
22987: LD_VAR 0 3
22991: PPUSH
22992: CALL_OW 254
22996: PUSH
22997: LD_VAR 0 3
23001: PPUSH
23002: CALL_OW 267
23006: PUSH
23007: LD_VAR 0 3
23011: PPUSH
23012: CALL_OW 248
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: PUSH
23025: EMPTY
23026: LIST
23027: ADD
23028: ST_TO_ADDR
// end ;
23029: GO 22593
23031: POP
23032: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
23033: LD_VAR 0 4
23037: PPUSH
23038: LD_STRING 08_GammaBase
23040: PPUSH
23041: CALL_OW 39
// end ;
23045: LD_VAR 0 2
23049: RET
