// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyBuilds ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 39
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 40
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 36
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 31
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 32
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyBuilds = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 34
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// varEvent1 = 0 ;
 119: LD_ADDR_EXP 38
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// timerStatus = 0 ;
 127: LD_ADDR_EXP 33
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// supply = [ 17 , 15 , 13 ] [ Difficulty ] ;
 135: LD_ADDR_EXP 37
 139: PUSH
 140: LD_INT 17
 142: PUSH
 143: LD_INT 15
 145: PUSH
 146: LD_INT 13
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: PUSH
 154: LD_OWVAR 67
 158: ARRAY
 159: ST_TO_ADDR
// debugMode = 1 ;
 160: LD_ADDR_EXP 41
 164: PUSH
 165: LD_INT 1
 167: ST_TO_ADDR
// PrepareDifficulty ;
 168: CALL 4895 0 0
// PrepareBase ;
 172: CALL 649 0 0
// PrepareHeroes ;
 176: CALL 269 0 0
// PrepareSoldiers ;
 180: CALL 494 0 0
// PrepareRussianCommander ;
 184: CALL 3700 0 0
// PrepareRussians ;
 188: CALL 4018 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 192: LD_INT 22
 194: PUSH
 195: LD_INT 3
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 2
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PPUSH
 216: CALL_OW 69
 220: PPUSH
 221: LD_INT 0
 223: PPUSH
 224: LD_INT 90
 226: PPUSH
 227: LD_INT 86
 229: PPUSH
 230: LD_INT 3
 232: PPUSH
 233: CALL_OW 205
// PrepareCutsceneAttack ;
 237: CALL 3752 0 0
// end ;
 241: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 242: LD_EXP 41
 246: PUSH
 247: LD_INT 1
 249: EQUAL
 250: IFFALSE 266
 252: GO 254
 254: DISABLE
 255: LD_INT 0
 257: PPUSH
// begin enable ;
 258: ENABLE
// fogoff ( true ) ;
 259: LD_INT 1
 261: PPUSH
 262: CALL_OW 344
// end ; end_of_file
 266: PPOPN 1
 268: END
// export function PrepareHeroes ; var i ; begin
 269: LD_INT 0
 271: PPUSH
 272: PPUSH
// uc_side = 1 ;
 273: LD_ADDR_OWVAR 20
 277: PUSH
 278: LD_INT 1
 280: ST_TO_ADDR
// uc_nation = 1 ;
 281: LD_ADDR_OWVAR 21
 285: PUSH
 286: LD_INT 1
 288: ST_TO_ADDR
// if gammaCommander = 1 then
 289: LD_EXP 11
 293: PUSH
 294: LD_INT 1
 296: EQUAL
 297: IFFALSE 330
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 299: LD_ADDR_EXP 3
 303: PUSH
 304: LD_STRING Donaldson
 306: PPUSH
 307: LD_INT 1
 309: PPUSH
 310: CALL 4436 0 2
 314: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 315: LD_EXP 3
 319: PPUSH
 320: LD_INT 5
 322: PPUSH
 323: LD_INT 0
 325: PPUSH
 326: CALL_OW 49
// end ; if gammaCommander = 2 then
 330: LD_EXP 11
 334: PUSH
 335: LD_INT 2
 337: EQUAL
 338: IFFALSE 371
// begin Brown = PrepareUnit ( Brown , true ) ;
 340: LD_ADDR_EXP 2
 344: PUSH
 345: LD_STRING Brown
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: CALL 4436 0 2
 355: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 356: LD_EXP 2
 360: PPUSH
 361: LD_INT 5
 363: PPUSH
 364: LD_INT 0
 366: PPUSH
 367: CALL_OW 49
// end ; if gammaCommander = 3 then
 371: LD_EXP 11
 375: PUSH
 376: LD_INT 3
 378: EQUAL
 379: IFFALSE 412
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 381: LD_ADDR_EXP 12
 385: PUSH
 386: LD_STRING VanHouten
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: CALL 4436 0 2
 396: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 397: LD_EXP 12
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: LD_INT 0
 407: PPUSH
 408: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 412: LD_ADDR_EXP 21
 416: PUSH
 417: LD_STRING Harisson
 419: PPUSH
 420: LD_INT 0
 422: PPUSH
 423: CALL 4436 0 2
 427: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 428: LD_ADDR_EXP 22
 432: PUSH
 433: LD_STRING Powell
 435: PPUSH
 436: LD_INT 0
 438: PPUSH
 439: CALL 4436 0 2
 443: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 444: LD_ADDR_EXP 10
 448: PUSH
 449: LD_STRING 07_othersGamma
 451: PPUSH
 452: CALL_OW 31
 456: ST_TO_ADDR
// for i in others_gamma do
 457: LD_ADDR_VAR 0 2
 461: PUSH
 462: LD_EXP 10
 466: PUSH
 467: FOR_IN
 468: IFFALSE 487
// PlaceUnitArea ( i , GammaSpawn , false ) ;
 470: LD_VAR 0 2
 474: PPUSH
 475: LD_INT 5
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 49
 485: GO 467
 487: POP
 488: POP
// end ;
 489: LD_VAR 0 1
 493: RET
// export function PrepareSoldiers ; var i ; begin
 494: LD_INT 0
 496: PPUSH
 497: PPUSH
// uc_side = 1 ;
 498: LD_ADDR_OWVAR 20
 502: PUSH
 503: LD_INT 1
 505: ST_TO_ADDR
// uc_nation = 1 ;
 506: LD_ADDR_OWVAR 21
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
 514: LD_ADDR_VAR 0 2
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 32
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: PUSH
 548: FOR_IN
 549: IFFALSE 577
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 551: LD_INT 1
 553: PPUSH
 554: LD_INT 1
 556: PPUSH
 557: LD_VAR 0 2
 561: PPUSH
 562: LD_INT 4
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL 4785 0 6
 575: GO 548
 577: POP
 578: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
 579: LD_ADDR_VAR 0 2
 583: PUSH
 584: LD_INT 22
 586: PUSH
 587: LD_INT 1
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 31
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PPUSH
 608: CALL_OW 69
 612: PUSH
 613: FOR_IN
 614: IFFALSE 642
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 616: LD_INT 1
 618: PPUSH
 619: LD_INT 1
 621: PPUSH
 622: LD_VAR 0 2
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 1
 635: PPUSH
 636: CALL 4785 0 6
 640: GO 613
 642: POP
 643: POP
// end ;
 644: LD_VAR 0 1
 648: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
 653: PPUSH
 654: PPUSH
 655: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
 656: LD_INT 71
 658: PPUSH
 659: LD_INT 5
 661: PPUSH
 662: LD_INT 1
 664: PPUSH
 665: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
 669: LD_ADDR_VAR 0 2
 673: PUSH
 674: LD_STRING GammaBase
 676: PPUSH
 677: EMPTY
 678: PPUSH
 679: CALL_OW 30
 683: ST_TO_ADDR
// uc_side := 1 ;
 684: LD_ADDR_OWVAR 20
 688: PUSH
 689: LD_INT 1
 691: ST_TO_ADDR
// uc_nation := 1 ;
 692: LD_ADDR_OWVAR 21
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// for i in blist do
 700: LD_ADDR_VAR 0 3
 704: PUSH
 705: LD_VAR 0 2
 709: PUSH
 710: FOR_IN
 711: IFFALSE 1059
// begin bc_type := i [ 1 ] ;
 713: LD_ADDR_OWVAR 42
 717: PUSH
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: ST_TO_ADDR
// bc_level := i [ 5 ] ;
 727: LD_ADDR_OWVAR 43
 731: PUSH
 732: LD_VAR 0 3
 736: PUSH
 737: LD_INT 5
 739: ARRAY
 740: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
 741: LD_VAR 0 3
 745: PUSH
 746: LD_INT 1
 748: ARRAY
 749: PUSH
 750: LD_INT 7
 752: PUSH
 753: LD_INT 8
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: IN
 760: IFFALSE 790
// begin bc_kind1 := i [ 7 ] ;
 762: LD_ADDR_OWVAR 44
 766: PUSH
 767: LD_VAR 0 3
 771: PUSH
 772: LD_INT 7
 774: ARRAY
 775: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
 776: LD_ADDR_OWVAR 45
 780: PUSH
 781: LD_VAR 0 3
 785: PUSH
 786: LD_INT 8
 788: ARRAY
 789: ST_TO_ADDR
// end ; if bc_type = b_depot then
 790: LD_OWVAR 42
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: IFFALSE 916
// begin bc_type := b_warehouse ;
 800: LD_ADDR_OWVAR 42
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 808: LD_ADDR_EXP 35
 812: PUSH
 813: LD_VAR 0 3
 817: PUSH
 818: LD_INT 2
 820: ARRAY
 821: PPUSH
 822: LD_VAR 0 3
 826: PUSH
 827: LD_INT 3
 829: ARRAY
 830: PPUSH
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 4
 838: ARRAY
 839: PPUSH
 840: CALL_OW 47
 844: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
 845: LD_EXP 35
 849: PPUSH
 850: LD_STRING gamma
 852: PPUSH
 853: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
 857: LD_EXP 35
 861: PPUSH
 862: CALL_OW 274
 866: PPUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 200
 872: PUSH
 873: LD_INT 150
 875: PUSH
 876: LD_INT 100
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_OWVAR 67
 888: ARRAY
 889: PPUSH
 890: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
 894: LD_EXP 35
 898: PPUSH
 899: CALL_OW 274
 903: PPUSH
 904: LD_INT 2
 906: PPUSH
 907: LD_INT 200
 909: PPUSH
 910: CALL_OW 277
// end else
 914: GO 1024
// begin if bc_type = 4 then
 916: LD_OWVAR 42
 920: PUSH
 921: LD_INT 4
 923: EQUAL
 924: IFFALSE 973
// begin bc_type = 5 ;
 926: LD_ADDR_OWVAR 42
 930: PUSH
 931: LD_INT 5
 933: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 934: LD_ADDR_VAR 0 4
 938: PUSH
 939: LD_VAR 0 3
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PPUSH
 948: LD_VAR 0 3
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: PPUSH
 957: LD_VAR 0 3
 961: PUSH
 962: LD_INT 4
 964: ARRAY
 965: PPUSH
 966: CALL_OW 47
 970: ST_TO_ADDR
// end else
 971: GO 1024
// begin bc_type := i [ 1 ] ;
 973: LD_ADDR_OWVAR 42
 977: PUSH
 978: LD_VAR 0 3
 982: PUSH
 983: LD_INT 1
 985: ARRAY
 986: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 987: LD_ADDR_VAR 0 4
 991: PUSH
 992: LD_VAR 0 3
 996: PUSH
 997: LD_INT 2
 999: ARRAY
1000: PPUSH
1001: LD_VAR 0 3
1005: PUSH
1006: LD_INT 3
1008: ARRAY
1009: PPUSH
1010: LD_VAR 0 3
1014: PUSH
1015: LD_INT 4
1017: ARRAY
1018: PPUSH
1019: CALL_OW 47
1023: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1024: LD_VAR 0 4
1028: PPUSH
1029: CALL_OW 266
1033: PUSH
1034: LD_INT 32
1036: EQUAL
1037: IFFALSE 1057
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1039: LD_VAR 0 4
1043: PPUSH
1044: LD_VAR 0 3
1048: PUSH
1049: LD_INT 7
1051: ARRAY
1052: PPUSH
1053: CALL_OW 431
// end ;
1057: GO 710
1059: POP
1060: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1061: LD_STRING 06_remoteVehs_1
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 30
1071: PUSH
1072: LD_INT 1
1074: EQUAL
1075: IFFALSE 1279
// begin bc_type = 36 ;
1077: LD_ADDR_OWVAR 42
1081: PUSH
1082: LD_INT 36
1084: ST_TO_ADDR
// bc_level = 4 ;
1085: LD_ADDR_OWVAR 43
1089: PUSH
1090: LD_INT 4
1092: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1093: LD_INT 62
1095: PPUSH
1096: LD_INT 12
1098: PPUSH
1099: LD_INT 3
1101: PPUSH
1102: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1106: LD_ADDR_VAR 0 3
1110: PUSH
1111: DOUBLE
1112: LD_INT 1
1114: DEC
1115: ST_TO_ADDR
1116: LD_INT 3
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: LD_INT 2
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_OWVAR 67
1134: ARRAY
1135: PUSH
1136: FOR_TO
1137: IFFALSE 1277
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1139: LD_ADDR_OWVAR 37
1143: PUSH
1144: LD_INT 3
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: LD_INT 3
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PUSH
1157: LD_INT 1
1159: PPUSH
1160: LD_INT 2
1162: PPUSH
1163: CALL_OW 12
1167: ARRAY
1168: PUSH
1169: LD_INT 2
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_OWVAR 67
1181: ARRAY
1182: ST_TO_ADDR
// vc_engine = 1 ;
1183: LD_ADDR_OWVAR 39
1187: PUSH
1188: LD_INT 1
1190: ST_TO_ADDR
// vc_control = 2 ;
1191: LD_ADDR_OWVAR 38
1195: PUSH
1196: LD_INT 2
1198: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1199: LD_ADDR_OWVAR 40
1203: PUSH
1204: LD_INT 3
1206: PUSH
1207: LD_INT 4
1209: PUSH
1210: LD_INT 5
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_INT 3
1223: PPUSH
1224: CALL_OW 12
1228: ARRAY
1229: ST_TO_ADDR
// veh = CreateVehicle ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: CALL_OW 45
1239: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
1240: LD_VAR 0 5
1244: PPUSH
1245: LD_EXP 35
1249: PPUSH
1250: CALL_OW 250
1254: PPUSH
1255: LD_EXP 35
1259: PPUSH
1260: CALL_OW 251
1264: PPUSH
1265: LD_INT 7
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 50
// end ;
1275: GO 1136
1277: POP
1278: POP
// end ; end ;
1279: LD_VAR 0 1
1283: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
1284: LD_INT 0
1286: PPUSH
1287: PPUSH
1288: PPUSH
1289: PPUSH
// uc_side = 1 ;
1290: LD_ADDR_OWVAR 20
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// uc_nation = 1 ;
1298: LD_ADDR_OWVAR 21
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
1306: LD_ADDR_EXP 13
1310: PUSH
1311: LD_STRING 06c_Denis
1313: PPUSH
1314: LD_INT 1
1316: PPUSH
1317: CALL 4436 0 2
1321: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
1322: LD_EXP 13
1326: PPUSH
1327: LD_INT 4
1329: PPUSH
1330: LD_INT 0
1332: PPUSH
1333: CALL_OW 49
// if IsOk ( Denis ) then
1337: LD_EXP 13
1341: PPUSH
1342: CALL_OW 302
1346: IFFALSE 1362
// i = i + 1 ;
1348: LD_ADDR_VAR 0 2
1352: PUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ST_TO_ADDR
// Joan = PrepareUnit ( 06c_Joan , true ) ;
1362: LD_ADDR_EXP 14
1366: PUSH
1367: LD_STRING 06c_Joan
1369: PPUSH
1370: LD_INT 1
1372: PPUSH
1373: CALL 4436 0 2
1377: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
1378: LD_EXP 14
1382: PPUSH
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 0
1388: PPUSH
1389: CALL_OW 49
// if IsOk ( Joan ) then
1393: LD_EXP 14
1397: PPUSH
1398: CALL_OW 302
1402: IFFALSE 1418
// i = i + 1 ;
1404: LD_ADDR_VAR 0 2
1408: PUSH
1409: LD_VAR 0 2
1413: PUSH
1414: LD_INT 1
1416: PLUS
1417: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
1418: LD_STRING GladstoneIn07
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 30
1428: PUSH
1429: LD_INT 0
1431: EQUAL
1432: IFFALSE 1479
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
1434: LD_ADDR_EXP 8
1438: PUSH
1439: LD_STRING 06c_Gladstone
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: CALL 4436 0 2
1449: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
1450: LD_EXP 8
1454: PPUSH
1455: LD_INT 4
1457: PPUSH
1458: LD_INT 0
1460: PPUSH
1461: CALL_OW 49
// i = i + 1 ;
1465: LD_ADDR_VAR 0 2
1469: PUSH
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 1
1477: PLUS
1478: ST_TO_ADDR
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: LD_STRING OtherStayInDelta
1486: PPUSH
1487: CALL_OW 31
1491: ST_TO_ADDR
// for j = 3 to 3 + 3 - i do
1492: LD_ADDR_VAR 0 3
1496: PUSH
1497: DOUBLE
1498: LD_INT 3
1500: DEC
1501: ST_TO_ADDR
1502: LD_INT 3
1504: PUSH
1505: LD_INT 3
1507: PLUS
1508: PUSH
1509: LD_VAR 0 2
1513: MINUS
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1541
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
1518: LD_VAR 0 4
1522: PUSH
1523: LD_VAR 0 3
1527: ARRAY
1528: PPUSH
1529: LD_INT 4
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 49
1539: GO 1515
1541: POP
1542: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
1543: LD_ADDR_VAR 0 4
1547: PUSH
1548: LD_STRING 06_other_apemans
1550: PPUSH
1551: CALL_OW 31
1555: ST_TO_ADDR
// if other >= 5 then
1556: LD_VAR 0 4
1560: PUSH
1561: LD_INT 5
1563: GREATEREQUAL
1564: IFFALSE 1609
// begin for i := 1 to 5 do
1566: LD_ADDR_VAR 0 2
1570: PUSH
1571: DOUBLE
1572: LD_INT 1
1574: DEC
1575: ST_TO_ADDR
1576: LD_INT 5
1578: PUSH
1579: FOR_TO
1580: IFFALSE 1605
// begin PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
1582: LD_VAR 0 4
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: PPUSH
1593: LD_INT 4
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: GO 1579
1605: POP
1606: POP
// end else
1607: GO 1641
// begin for i in other do
1609: LD_ADDR_VAR 0 2
1613: PUSH
1614: LD_VAR 0 4
1618: PUSH
1619: FOR_IN
1620: IFFALSE 1639
// PlaceUnitArea ( i , GammaSupport , false ) ;
1622: LD_VAR 0 2
1626: PPUSH
1627: LD_INT 4
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: CALL_OW 49
1637: GO 1619
1639: POP
1640: POP
// end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
1641: LD_INT 4
1643: PPUSH
1644: LD_INT 22
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 21
1656: PUSH
1657: LD_INT 1
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 70
1672: PPUSH
1673: LD_INT 53
1675: PPUSH
1676: LD_INT 19
1678: PPUSH
1679: CALL_OW 111
// firstAttack = 1 ;
1683: LD_ADDR_EXP 31
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// end ;
1691: LD_VAR 0 1
1695: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
1696: LD_INT 0
1698: PPUSH
1699: PPUSH
1700: PPUSH
1701: PPUSH
1702: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_STRING 07_vehicles
1710: PPUSH
1711: EMPTY
1712: PPUSH
1713: CALL_OW 30
1717: ST_TO_ADDR
// uc_side = 1 ;
1718: LD_ADDR_OWVAR 20
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// uc_nation = 1 ;
1726: LD_ADDR_OWVAR 21
1730: PUSH
1731: LD_INT 1
1733: ST_TO_ADDR
// if vehicles > 0 then
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 0
1741: GREATER
1742: IFFALSE 1881
// begin for i = 1 to vehicles do
1744: LD_ADDR_VAR 0 2
1748: PUSH
1749: DOUBLE
1750: LD_INT 1
1752: DEC
1753: ST_TO_ADDR
1754: LD_VAR 0 4
1758: PUSH
1759: FOR_TO
1760: IFFALSE 1879
// begin vc_chassis = vehicles [ i ] ;
1762: LD_ADDR_OWVAR 37
1766: PUSH
1767: LD_VAR 0 4
1771: PUSH
1772: LD_VAR 0 2
1776: ARRAY
1777: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
1778: LD_ADDR_OWVAR 39
1782: PUSH
1783: LD_VAR 0 4
1787: PUSH
1788: LD_VAR 0 2
1792: PUSH
1793: LD_INT 1
1795: PLUS
1796: ARRAY
1797: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
1798: LD_ADDR_OWVAR 38
1802: PUSH
1803: LD_VAR 0 4
1807: PUSH
1808: LD_VAR 0 2
1812: PUSH
1813: LD_INT 2
1815: PLUS
1816: ARRAY
1817: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
1818: LD_ADDR_OWVAR 40
1822: PUSH
1823: LD_VAR 0 4
1827: PUSH
1828: LD_VAR 0 2
1832: PUSH
1833: LD_INT 3
1835: PLUS
1836: ARRAY
1837: ST_TO_ADDR
// veh = CreateVehicle ;
1838: LD_ADDR_VAR 0 5
1842: PUSH
1843: CALL_OW 45
1847: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
1848: LD_VAR 0 5
1852: PPUSH
1853: LD_INT 4
1855: PPUSH
1856: LD_INT 0
1858: PPUSH
1859: CALL_OW 49
// i = i + 3 ;
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: LD_VAR 0 2
1872: PUSH
1873: LD_INT 3
1875: PLUS
1876: ST_TO_ADDR
// end ;
1877: GO 1759
1879: POP
1880: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
1881: LD_ADDR_EXP 1
1885: PUSH
1886: LD_EXP 40
1890: PUSH
1891: LD_STRING JMM
1893: STR
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: CALL 4436 0 2
1902: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
1903: LD_EXP 11
1907: PUSH
1908: LD_INT 1
1910: EQUAL
1911: PUSH
1912: LD_EXP 11
1916: PUSH
1917: LD_INT 3
1919: EQUAL
1920: OR
1921: IFFALSE 1945
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
1923: LD_ADDR_EXP 2
1927: PUSH
1928: LD_EXP 40
1932: PUSH
1933: LD_STRING Brown
1935: STR
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 4436 0 2
1944: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
1945: LD_EXP 11
1949: PUSH
1950: LD_INT 2
1952: EQUAL
1953: PUSH
1954: LD_EXP 11
1958: PUSH
1959: LD_INT 3
1961: EQUAL
1962: OR
1963: IFFALSE 1987
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
1965: LD_ADDR_EXP 3
1969: PUSH
1970: LD_EXP 40
1974: PUSH
1975: LD_STRING Donaldson
1977: STR
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 4436 0 2
1986: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
1987: LD_ADDR_EXP 4
1991: PUSH
1992: LD_EXP 40
1996: PUSH
1997: LD_STRING Bobby
1999: STR
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: CALL 4436 0 2
2008: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2009: LD_ADDR_EXP 5
2013: PUSH
2014: LD_EXP 40
2018: PUSH
2019: LD_STRING Cyrus
2021: STR
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: CALL 4436 0 2
2030: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2031: LD_ADDR_EXP 6
2035: PUSH
2036: LD_EXP 40
2040: PUSH
2041: LD_STRING Lisa
2043: STR
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL 4436 0 2
2052: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2053: LD_ADDR_EXP 7
2057: PUSH
2058: LD_EXP 40
2062: PUSH
2063: LD_STRING Frank
2065: STR
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL 4436 0 2
2074: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
2075: LD_ADDR_EXP 8
2079: PUSH
2080: LD_EXP 40
2084: PUSH
2085: LD_STRING Gladstone
2087: STR
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 4436 0 2
2096: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
2097: LD_ADDR_EXP 9
2101: PUSH
2102: LD_EXP 40
2106: PUSH
2107: LD_STRING Kikuchi
2109: STR
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL 4436 0 2
2118: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2119: LD_EXP 11
2123: PUSH
2124: LD_INT 1
2126: EQUAL
2127: PUSH
2128: LD_EXP 11
2132: PUSH
2133: LD_INT 3
2135: EQUAL
2136: OR
2137: IFFALSE 2154
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2139: LD_EXP 2
2143: PPUSH
2144: LD_INT 4
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
2154: LD_EXP 11
2158: PUSH
2159: LD_INT 2
2161: EQUAL
2162: PUSH
2163: LD_EXP 11
2167: PUSH
2168: LD_INT 3
2170: EQUAL
2171: OR
2172: IFFALSE 2189
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2174: LD_EXP 3
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2189: LD_ADDR_VAR 0 5
2193: PUSH
2194: LD_INT 4
2196: PPUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 21
2209: PUSH
2210: LD_INT 2
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 58
2219: PUSH
2220: EMPTY
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: PPUSH
2228: CALL_OW 70
2232: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2233: LD_ADDR_EXP 1
2237: PUSH
2238: LD_EXP 40
2242: PUSH
2243: LD_STRING JMM
2245: STR
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL 4436 0 2
2254: ST_TO_ADDR
// if veh > 0 then
2255: LD_VAR 0 5
2259: PUSH
2260: LD_INT 0
2262: GREATER
2263: IFFALSE 2285
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
2265: LD_EXP 1
2269: PPUSH
2270: LD_VAR 0 5
2274: PUSH
2275: LD_INT 1
2277: ARRAY
2278: PPUSH
2279: CALL_OW 52
// end else
2283: GO 2300
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
2285: LD_EXP 1
2289: PPUSH
2290: LD_INT 4
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2300: LD_ADDR_VAR 0 5
2304: PUSH
2305: LD_INT 4
2307: PPUSH
2308: LD_INT 22
2310: PUSH
2311: LD_INT 1
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: LD_INT 21
2320: PUSH
2321: LD_INT 2
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: PUSH
2328: LD_INT 58
2330: PUSH
2331: EMPTY
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: PPUSH
2339: CALL_OW 70
2343: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2344: LD_ADDR_EXP 4
2348: PUSH
2349: LD_EXP 40
2353: PUSH
2354: LD_STRING Bobby
2356: STR
2357: PPUSH
2358: LD_INT 1
2360: PPUSH
2361: CALL 4436 0 2
2365: ST_TO_ADDR
// if veh > 0 then
2366: LD_VAR 0 5
2370: PUSH
2371: LD_INT 0
2373: GREATER
2374: IFFALSE 2396
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
2376: LD_EXP 4
2380: PPUSH
2381: LD_VAR 0 5
2385: PUSH
2386: LD_INT 1
2388: ARRAY
2389: PPUSH
2390: CALL_OW 52
// end else
2394: GO 2411
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2396: LD_EXP 4
2400: PPUSH
2401: LD_INT 4
2403: PPUSH
2404: LD_INT 0
2406: PPUSH
2407: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2411: LD_ADDR_VAR 0 5
2415: PUSH
2416: LD_INT 4
2418: PPUSH
2419: LD_INT 22
2421: PUSH
2422: LD_INT 1
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 21
2431: PUSH
2432: LD_INT 2
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 58
2441: PUSH
2442: EMPTY
2443: LIST
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: PPUSH
2450: CALL_OW 70
2454: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2455: LD_ADDR_EXP 5
2459: PUSH
2460: LD_EXP 40
2464: PUSH
2465: LD_STRING Cyrus
2467: STR
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 4436 0 2
2476: ST_TO_ADDR
// if veh > 0 then
2477: LD_VAR 0 5
2481: PUSH
2482: LD_INT 0
2484: GREATER
2485: IFFALSE 2507
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
2487: LD_EXP 5
2491: PPUSH
2492: LD_VAR 0 5
2496: PUSH
2497: LD_INT 1
2499: ARRAY
2500: PPUSH
2501: CALL_OW 52
// end else
2505: GO 2522
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2507: LD_EXP 5
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 4
2529: PPUSH
2530: LD_INT 22
2532: PUSH
2533: LD_INT 1
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 21
2542: PUSH
2543: LD_INT 2
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 58
2552: PUSH
2553: EMPTY
2554: LIST
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 70
2565: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2566: LD_ADDR_EXP 6
2570: PUSH
2571: LD_EXP 40
2575: PUSH
2576: LD_STRING Lisa
2578: STR
2579: PPUSH
2580: LD_INT 1
2582: PPUSH
2583: CALL 4436 0 2
2587: ST_TO_ADDR
// if veh > 0 then
2588: LD_VAR 0 5
2592: PUSH
2593: LD_INT 0
2595: GREATER
2596: IFFALSE 2618
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
2598: LD_EXP 6
2602: PPUSH
2603: LD_VAR 0 5
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: PPUSH
2612: CALL_OW 52
// end else
2616: GO 2633
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2618: LD_EXP 6
2622: PPUSH
2623: LD_INT 4
2625: PPUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2633: LD_ADDR_VAR 0 5
2637: PUSH
2638: LD_INT 4
2640: PPUSH
2641: LD_INT 22
2643: PUSH
2644: LD_INT 1
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 21
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PUSH
2661: LD_INT 58
2663: PUSH
2664: EMPTY
2665: LIST
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: PPUSH
2672: CALL_OW 70
2676: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2677: LD_ADDR_EXP 7
2681: PUSH
2682: LD_EXP 40
2686: PUSH
2687: LD_STRING Frank
2689: STR
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: CALL 4436 0 2
2698: ST_TO_ADDR
// if veh > 0 then
2699: LD_VAR 0 5
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: IFFALSE 2729
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
2709: LD_EXP 7
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_INT 1
2721: ARRAY
2722: PPUSH
2723: CALL_OW 52
// end else
2727: GO 2744
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
2729: LD_EXP 7
2733: PPUSH
2734: LD_INT 4
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2744: LD_ADDR_VAR 0 5
2748: PUSH
2749: LD_INT 4
2751: PPUSH
2752: LD_INT 22
2754: PUSH
2755: LD_INT 1
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 21
2764: PUSH
2765: LD_INT 2
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 58
2774: PUSH
2775: EMPTY
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 70
2787: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
2788: LD_ADDR_EXP 8
2792: PUSH
2793: LD_EXP 40
2797: PUSH
2798: LD_STRING Gladstone
2800: STR
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL 4436 0 2
2809: ST_TO_ADDR
// if veh > 0 then
2810: LD_VAR 0 5
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: IFFALSE 2840
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
2820: LD_EXP 8
2824: PPUSH
2825: LD_VAR 0 5
2829: PUSH
2830: LD_INT 1
2832: ARRAY
2833: PPUSH
2834: CALL_OW 52
// end else
2838: GO 2855
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2840: LD_EXP 8
2844: PPUSH
2845: LD_INT 4
2847: PPUSH
2848: LD_INT 0
2850: PPUSH
2851: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2855: LD_ADDR_VAR 0 5
2859: PUSH
2860: LD_INT 4
2862: PPUSH
2863: LD_INT 22
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 21
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 58
2885: PUSH
2886: EMPTY
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 70
2898: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
2899: LD_ADDR_EXP 9
2903: PUSH
2904: LD_EXP 40
2908: PUSH
2909: LD_STRING Kikuchi
2911: STR
2912: PPUSH
2913: LD_INT 1
2915: PPUSH
2916: CALL 4436 0 2
2920: ST_TO_ADDR
// if veh > 0 then
2921: LD_VAR 0 5
2925: PUSH
2926: LD_INT 0
2928: GREATER
2929: IFFALSE 2951
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
2931: LD_EXP 9
2935: PPUSH
2936: LD_VAR 0 5
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: CALL_OW 52
// end else
2949: GO 2966
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
2951: LD_EXP 9
2955: PPUSH
2956: LD_INT 4
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_STRING 07c_others
2973: PPUSH
2974: CALL_OW 31
2978: ST_TO_ADDR
// for i in other do
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: LD_VAR 0 3
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3039
// begin if veh > 0 then
2992: LD_VAR 0 5
2996: PUSH
2997: LD_INT 0
2999: GREATER
3000: IFFALSE 3022
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
3002: LD_VAR 0 2
3006: PPUSH
3007: LD_VAR 0 5
3011: PUSH
3012: LD_INT 1
3014: ARRAY
3015: PPUSH
3016: CALL_OW 52
// end else
3020: GO 3037
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
3022: LD_VAR 0 2
3026: PPUSH
3027: LD_INT 4
3029: PPUSH
3030: LD_INT 0
3032: PPUSH
3033: CALL_OW 49
// end ; end ;
3037: GO 2989
3039: POP
3040: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
3041: LD_INT 4
3043: PPUSH
3044: LD_INT 22
3046: PUSH
3047: LD_INT 1
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: PPUSH
3057: CALL_OW 70
3061: PPUSH
3062: LD_INT 53
3064: PPUSH
3065: LD_INT 19
3067: PPUSH
3068: CALL_OW 111
// end ;
3072: LD_VAR 0 1
3076: RET
// export function PrepareSikorsky ; begin
3077: LD_INT 0
3079: PPUSH
// uc_side = 4 ;
3080: LD_ADDR_OWVAR 20
3084: PUSH
3085: LD_INT 4
3087: ST_TO_ADDR
// uc_nation = 1 ;
3088: LD_ADDR_OWVAR 21
3092: PUSH
3093: LD_INT 1
3095: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
3096: LD_ADDR_EXP 15
3100: PUSH
3101: LD_STRING Sikorski
3103: PPUSH
3104: LD_INT 0
3106: PPUSH
3107: CALL 4436 0 2
3111: ST_TO_ADDR
// vc_engine = 1 ;
3112: LD_ADDR_OWVAR 39
3116: PUSH
3117: LD_INT 1
3119: ST_TO_ADDR
// vc_control = 1 ;
3120: LD_ADDR_OWVAR 38
3124: PUSH
3125: LD_INT 1
3127: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
3128: LD_ADDR_OWVAR 40
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 4
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_OWVAR 67
3151: ARRAY
3152: ST_TO_ADDR
// vc_chassis = 4 ;
3153: LD_ADDR_OWVAR 37
3157: PUSH
3158: LD_INT 4
3160: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
3161: LD_ADDR_EXP 16
3165: PUSH
3166: CALL_OW 45
3170: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
3171: LD_EXP 16
3175: PPUSH
3176: LD_INT 9
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
3186: LD_EXP 15
3190: PPUSH
3191: LD_EXP 16
3195: PPUSH
3196: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
3200: LD_EXP 16
3204: PPUSH
3205: LD_INT 5
3207: PPUSH
3208: CALL_OW 113
// end ;
3212: LD_VAR 0 1
3216: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
3217: LD_INT 0
3219: PPUSH
3220: PPUSH
3221: PPUSH
3222: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
3223: LD_ADDR_VAR 0 2
3227: PUSH
3228: DOUBLE
3229: LD_INT 1
3231: DEC
3232: ST_TO_ADDR
3233: LD_INT 8
3235: PUSH
3236: LD_INT 7
3238: PUSH
3239: LD_INT 7
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: PUSH
3247: LD_OWVAR 67
3251: ARRAY
3252: PUSH
3253: FOR_TO
3254: IFFALSE 3351
// begin uc_side = 4 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// uc_nation = 1 ;
3264: LD_ADDR_OWVAR 21
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// hc_name =  ;
3272: LD_ADDR_OWVAR 26
3276: PUSH
3277: LD_STRING 
3279: ST_TO_ADDR
// hc_gallery =  ;
3280: LD_ADDR_OWVAR 33
3284: PUSH
3285: LD_STRING 
3287: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
3288: LD_INT 0
3290: PPUSH
3291: LD_INT 1
3293: PPUSH
3294: LD_INT 5
3296: PPUSH
3297: LD_INT 8
3299: PPUSH
3300: CALL_OW 12
3304: PPUSH
3305: CALL_OW 380
// un = CreateHuman ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: CALL_OW 44
3318: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3319: LD_VAR 0 3
3323: PPUSH
3324: LD_INT 9
3326: PPUSH
3327: LD_INT 0
3329: PPUSH
3330: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3334: LD_VAR 0 3
3338: PPUSH
3339: LD_INT 53
3341: PPUSH
3342: LD_INT 23
3344: PPUSH
3345: CALL_OW 111
// end ;
3349: GO 3253
3351: POP
3352: POP
// for i = 1 to 3 do
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: DOUBLE
3359: LD_INT 1
3361: DEC
3362: ST_TO_ADDR
3363: LD_INT 3
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3464
// begin uc_side = 4 ;
3369: LD_ADDR_OWVAR 20
3373: PUSH
3374: LD_INT 4
3376: ST_TO_ADDR
// uc_nation = 1 ;
3377: LD_ADDR_OWVAR 21
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// hc_name =  ;
3385: LD_ADDR_OWVAR 26
3389: PUSH
3390: LD_STRING 
3392: ST_TO_ADDR
// hc_gallery =  ;
3393: LD_ADDR_OWVAR 33
3397: PUSH
3398: LD_STRING 
3400: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: LD_INT 5
3409: PPUSH
3410: LD_INT 8
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// un = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 9
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3447: LD_VAR 0 3
3451: PPUSH
3452: LD_INT 53
3454: PPUSH
3455: LD_INT 23
3457: PPUSH
3458: CALL_OW 111
// end ;
3462: GO 3366
3464: POP
3465: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
3466: LD_ADDR_VAR 0 2
3470: PUSH
3471: DOUBLE
3472: LD_INT 1
3474: DEC
3475: ST_TO_ADDR
3476: LD_INT 9
3478: PUSH
3479: LD_INT 8
3481: PUSH
3482: LD_INT 7
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_OWVAR 67
3494: ARRAY
3495: PUSH
3496: FOR_TO
3497: IFFALSE 3693
// begin uc_side = 4 ;
3499: LD_ADDR_OWVAR 20
3503: PUSH
3504: LD_INT 4
3506: ST_TO_ADDR
// uc_nation = 1 ;
3507: LD_ADDR_OWVAR 21
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
// vc_engine = 1 ;
3515: LD_ADDR_OWVAR 39
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
// vc_control = 1 ;
3523: LD_ADDR_OWVAR 38
3527: PUSH
3528: LD_INT 1
3530: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
3531: LD_ADDR_OWVAR 40
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 4
3541: PUSH
3542: LD_INT 5
3544: PUSH
3545: LD_INT 6
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 1
3556: PPUSH
3557: LD_INT 4
3559: PPUSH
3560: CALL_OW 12
3564: ARRAY
3565: ST_TO_ADDR
// vc_chassis = 4 ;
3566: LD_ADDR_OWVAR 37
3570: PUSH
3571: LD_INT 4
3573: ST_TO_ADDR
// veh = CreateVehicle ;
3574: LD_ADDR_VAR 0 4
3578: PUSH
3579: CALL_OW 45
3583: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
3584: LD_VAR 0 4
3588: PPUSH
3589: LD_INT 9
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 49
// hc_name =  ;
3599: LD_ADDR_OWVAR 26
3603: PUSH
3604: LD_STRING 
3606: ST_TO_ADDR
// hc_gallery =  ;
3607: LD_ADDR_OWVAR 33
3611: PUSH
3612: LD_STRING 
3614: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
3615: LD_INT 0
3617: PPUSH
3618: LD_INT 3
3620: PPUSH
3621: LD_INT 5
3623: PPUSH
3624: LD_INT 8
3626: PPUSH
3627: CALL_OW 12
3631: PPUSH
3632: CALL_OW 380
// un = CreateHuman ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: CALL_OW 44
3645: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3646: LD_VAR 0 3
3650: PPUSH
3651: LD_VAR 0 4
3655: PPUSH
3656: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
3660: LD_VAR 0 4
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PPUSH
3674: LD_INT 53
3676: PPUSH
3677: LD_INT 23
3679: PPUSH
3680: CALL_OW 111
// wait ( 0 0$5 ) ;
3684: LD_INT 175
3686: PPUSH
3687: CALL_OW 67
// end ;
3691: GO 3496
3693: POP
3694: POP
// end ; end_of_file
3695: LD_VAR 0 1
3699: RET
// export function PrepareRussianCommander ; begin
3700: LD_INT 0
3702: PPUSH
// uc_side = 3 ;
3703: LD_ADDR_OWVAR 20
3707: PUSH
3708: LD_INT 3
3710: ST_TO_ADDR
// uc_nation = 3 ;
3711: LD_ADDR_OWVAR 21
3715: PUSH
3716: LD_INT 3
3718: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
3719: LD_ADDR_EXP 23
3723: PUSH
3724: LD_STRING Borodin
3726: PPUSH
3727: CALL_OW 25
3731: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
3732: LD_EXP 23
3736: PPUSH
3737: LD_INT 3
3739: PPUSH
3740: LD_INT 0
3742: PPUSH
3743: CALL_OW 49
// end ;
3747: LD_VAR 0 1
3751: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
// for i = 1 to 10 do
3758: LD_ADDR_VAR 0 2
3762: PUSH
3763: DOUBLE
3764: LD_INT 1
3766: DEC
3767: ST_TO_ADDR
3768: LD_INT 10
3770: PUSH
3771: FOR_TO
3772: IFFALSE 3846
// begin uc_side = 6 ;
3774: LD_ADDR_OWVAR 20
3778: PUSH
3779: LD_INT 6
3781: ST_TO_ADDR
// uc_nation = 3 ;
3782: LD_ADDR_OWVAR 21
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// hc_gallery =  ;
3790: LD_ADDR_OWVAR 33
3794: PUSH
3795: LD_STRING 
3797: ST_TO_ADDR
// hc_name =  ;
3798: LD_ADDR_OWVAR 26
3802: PUSH
3803: LD_STRING 
3805: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
3806: LD_INT 0
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 3
3814: PPUSH
3815: CALL_OW 380
// un = CreateHuman ;
3819: LD_ADDR_VAR 0 3
3823: PUSH
3824: CALL_OW 44
3828: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: LD_INT 1
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 49
// end ;
3844: GO 3771
3846: POP
3847: POP
// for i = 1 to 3 do
3848: LD_ADDR_VAR 0 2
3852: PUSH
3853: DOUBLE
3854: LD_INT 1
3856: DEC
3857: ST_TO_ADDR
3858: LD_INT 3
3860: PUSH
3861: FOR_TO
3862: IFFALSE 4011
// begin uc_side = 6 ;
3864: LD_ADDR_OWVAR 20
3868: PUSH
3869: LD_INT 6
3871: ST_TO_ADDR
// uc_nation = 3 ;
3872: LD_ADDR_OWVAR 21
3876: PUSH
3877: LD_INT 3
3879: ST_TO_ADDR
// vc_engine = 1 ;
3880: LD_ADDR_OWVAR 39
3884: PUSH
3885: LD_INT 1
3887: ST_TO_ADDR
// vc_control = 1 ;
3888: LD_ADDR_OWVAR 38
3892: PUSH
3893: LD_INT 1
3895: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
3896: LD_ADDR_OWVAR 40
3900: PUSH
3901: LD_INT 43
3903: PUSH
3904: LD_INT 44
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: PUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: PPUSH
3917: CALL_OW 12
3921: ARRAY
3922: ST_TO_ADDR
// vc_chassis = 22 ;
3923: LD_ADDR_OWVAR 37
3927: PUSH
3928: LD_INT 22
3930: ST_TO_ADDR
// veh = CreateVehicle ;
3931: LD_ADDR_VAR 0 4
3935: PUSH
3936: CALL_OW 45
3940: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_INT 2
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// hc_gallery =  ;
3956: LD_ADDR_OWVAR 33
3960: PUSH
3961: LD_STRING 
3963: ST_TO_ADDR
// hc_name =  ;
3964: LD_ADDR_OWVAR 26
3968: PUSH
3969: LD_STRING 
3971: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
3972: LD_INT 0
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: LD_INT 4
3980: PPUSH
3981: CALL_OW 380
// un = CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_VAR 0 4
4004: PPUSH
4005: CALL_OW 52
// end ;
4009: GO 3861
4011: POP
4012: POP
// end ;
4013: LD_VAR 0 1
4017: RET
// export function PrepareRussians ; var i , un ; begin
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
4022: PPUSH
// for i = 1 to 14 do
4023: LD_ADDR_VAR 0 2
4027: PUSH
4028: DOUBLE
4029: LD_INT 1
4031: DEC
4032: ST_TO_ADDR
4033: LD_INT 14
4035: PUSH
4036: FOR_TO
4037: IFFALSE 4123
// begin uc_side = 3 ;
4039: LD_ADDR_OWVAR 20
4043: PUSH
4044: LD_INT 3
4046: ST_TO_ADDR
// uc_nation = 3 ;
4047: LD_ADDR_OWVAR 21
4051: PUSH
4052: LD_INT 3
4054: ST_TO_ADDR
// hc_gallery =  ;
4055: LD_ADDR_OWVAR 33
4059: PUSH
4060: LD_STRING 
4062: ST_TO_ADDR
// hc_name =  ;
4063: LD_ADDR_OWVAR 26
4067: PUSH
4068: LD_STRING 
4070: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4071: LD_INT 0
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_EXP 24
4081: PPUSH
4082: LD_EXP 25
4086: PPUSH
4087: CALL_OW 12
4091: PPUSH
4092: CALL_OW 380
// un = CreateHuman ;
4096: LD_ADDR_VAR 0 3
4100: PUSH
4101: CALL_OW 44
4105: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4106: LD_VAR 0 3
4110: PPUSH
4111: LD_INT 3
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ;
4121: GO 4036
4123: POP
4124: POP
// for i = 1 to 6 do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: DOUBLE
4131: LD_INT 1
4133: DEC
4134: ST_TO_ADDR
4135: LD_INT 6
4137: PUSH
4138: FOR_TO
4139: IFFALSE 4225
// begin uc_side = 3 ;
4141: LD_ADDR_OWVAR 20
4145: PUSH
4146: LD_INT 3
4148: ST_TO_ADDR
// uc_nation = 3 ;
4149: LD_ADDR_OWVAR 21
4153: PUSH
4154: LD_INT 3
4156: ST_TO_ADDR
// hc_gallery =  ;
4157: LD_ADDR_OWVAR 33
4161: PUSH
4162: LD_STRING 
4164: ST_TO_ADDR
// hc_name =  ;
4165: LD_ADDR_OWVAR 26
4169: PUSH
4170: LD_STRING 
4172: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 2
4178: PPUSH
4179: LD_EXP 24
4183: PPUSH
4184: LD_EXP 25
4188: PPUSH
4189: CALL_OW 12
4193: PPUSH
4194: CALL_OW 380
// un = CreateHuman ;
4198: LD_ADDR_VAR 0 3
4202: PUSH
4203: CALL_OW 44
4207: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 3
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 49
// end ;
4223: GO 4138
4225: POP
4226: POP
// for i = 1 to 6 do
4227: LD_ADDR_VAR 0 2
4231: PUSH
4232: DOUBLE
4233: LD_INT 1
4235: DEC
4236: ST_TO_ADDR
4237: LD_INT 6
4239: PUSH
4240: FOR_TO
4241: IFFALSE 4327
// begin uc_side = 3 ;
4243: LD_ADDR_OWVAR 20
4247: PUSH
4248: LD_INT 3
4250: ST_TO_ADDR
// uc_nation = 3 ;
4251: LD_ADDR_OWVAR 21
4255: PUSH
4256: LD_INT 3
4258: ST_TO_ADDR
// hc_gallery =  ;
4259: LD_ADDR_OWVAR 33
4263: PUSH
4264: LD_STRING 
4266: ST_TO_ADDR
// hc_name =  ;
4267: LD_ADDR_OWVAR 26
4271: PUSH
4272: LD_STRING 
4274: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4275: LD_INT 0
4277: PPUSH
4278: LD_INT 3
4280: PPUSH
4281: LD_EXP 24
4285: PPUSH
4286: LD_EXP 25
4290: PPUSH
4291: CALL_OW 12
4295: PPUSH
4296: CALL_OW 380
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 3
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// end ;
4325: GO 4240
4327: POP
4328: POP
// for i = 1 to 4 do
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: DOUBLE
4335: LD_INT 1
4337: DEC
4338: ST_TO_ADDR
4339: LD_INT 4
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4429
// begin uc_side = 3 ;
4345: LD_ADDR_OWVAR 20
4349: PUSH
4350: LD_INT 3
4352: ST_TO_ADDR
// uc_nation = 3 ;
4353: LD_ADDR_OWVAR 21
4357: PUSH
4358: LD_INT 3
4360: ST_TO_ADDR
// hc_gallery =  ;
4361: LD_ADDR_OWVAR 33
4365: PUSH
4366: LD_STRING 
4368: ST_TO_ADDR
// hc_name =  ;
4369: LD_ADDR_OWVAR 26
4373: PUSH
4374: LD_STRING 
4376: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4377: LD_INT 0
4379: PPUSH
4380: LD_INT 4
4382: PPUSH
4383: LD_EXP 24
4387: PPUSH
4388: LD_EXP 25
4392: PPUSH
4393: CALL_OW 12
4397: PPUSH
4398: CALL_OW 380
// un = CreateHuman ;
4402: LD_ADDR_VAR 0 3
4406: PUSH
4407: CALL_OW 44
4411: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4412: LD_VAR 0 3
4416: PPUSH
4417: LD_INT 3
4419: PPUSH
4420: LD_INT 0
4422: PPUSH
4423: CALL_OW 49
// end ;
4427: GO 4342
4429: POP
4430: POP
// end ; end_of_file
4431: LD_VAR 0 1
4435: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
// if exist_mode then
4440: LD_VAR 0 2
4444: IFFALSE 4463
// unit := CreateCharacter ( ident ) else
4446: LD_ADDR_VAR 0 4
4450: PUSH
4451: LD_VAR 0 1
4455: PPUSH
4456: CALL_OW 34
4460: ST_TO_ADDR
4461: GO 4478
// unit := NewCharacter ( ident ) ;
4463: LD_ADDR_VAR 0 4
4467: PUSH
4468: LD_VAR 0 1
4472: PPUSH
4473: CALL_OW 25
4477: ST_TO_ADDR
// result := unit ;
4478: LD_ADDR_VAR 0 3
4482: PUSH
4483: LD_VAR 0 4
4487: ST_TO_ADDR
// end ;
4488: LD_VAR 0 3
4492: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4493: LD_INT 0
4495: PPUSH
4496: PPUSH
4497: PPUSH
// rnd = rand ( 1 , characters ) ;
4498: LD_ADDR_VAR 0 6
4502: PUSH
4503: LD_INT 1
4505: PPUSH
4506: LD_VAR 0 1
4510: PPUSH
4511: CALL_OW 12
4515: ST_TO_ADDR
// for i = 1 to characters do
4516: LD_ADDR_VAR 0 5
4520: PUSH
4521: DOUBLE
4522: LD_INT 1
4524: DEC
4525: ST_TO_ADDR
4526: LD_VAR 0 1
4530: PUSH
4531: FOR_TO
4532: IFFALSE 4642
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 6
4543: EQUAL
4544: PUSH
4545: LD_VAR 0 1
4549: PUSH
4550: LD_VAR 0 5
4554: ARRAY
4555: PPUSH
4556: CALL_OW 258
4560: PUSH
4561: LD_INT 1
4563: EQUAL
4564: AND
4565: IFFALSE 4587
// Say ( characters [ i ] , dialogMID ) ;
4567: LD_VAR 0 1
4571: PUSH
4572: LD_VAR 0 5
4576: ARRAY
4577: PPUSH
4578: LD_VAR 0 2
4582: PPUSH
4583: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4587: LD_VAR 0 5
4591: PUSH
4592: LD_VAR 0 6
4596: EQUAL
4597: PUSH
4598: LD_VAR 0 1
4602: PUSH
4603: LD_VAR 0 5
4607: ARRAY
4608: PPUSH
4609: CALL_OW 258
4613: PUSH
4614: LD_INT 2
4616: EQUAL
4617: AND
4618: IFFALSE 4640
// Say ( characters [ i ] , dialogFID ) ;
4620: LD_VAR 0 1
4624: PUSH
4625: LD_VAR 0 5
4629: ARRAY
4630: PPUSH
4631: LD_VAR 0 3
4635: PPUSH
4636: CALL_OW 88
// end ;
4640: GO 4531
4642: POP
4643: POP
// end ;
4644: LD_VAR 0 4
4648: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4649: LD_INT 0
4651: PPUSH
4652: PPUSH
4653: PPUSH
// uc_side := GetSide ( b ) ;
4654: LD_ADDR_OWVAR 20
4658: PUSH
4659: LD_VAR 0 2
4663: PPUSH
4664: CALL_OW 255
4668: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4669: LD_ADDR_OWVAR 21
4673: PUSH
4674: LD_VAR 0 2
4678: PPUSH
4679: CALL_OW 248
4683: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4684: LD_INT 0
4686: PPUSH
4687: LD_INT 1
4689: PPUSH
4690: LD_VAR 0 1
4694: PPUSH
4695: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4699: LD_ADDR_VAR 0 5
4703: PUSH
4704: LD_VAR 0 2
4708: PPUSH
4709: CALL_OW 254
4713: PUSH
4714: LD_INT 3
4716: MINUS
4717: ST_TO_ADDR
// if dir < 0 then
4718: LD_VAR 0 5
4722: PUSH
4723: LD_INT 0
4725: LESS
4726: IFFALSE 4742
// dir := 6 + dir ;
4728: LD_ADDR_VAR 0 5
4732: PUSH
4733: LD_INT 6
4735: PUSH
4736: LD_VAR 0 5
4740: PLUS
4741: ST_TO_ADDR
// un := CreateHuman ;
4742: LD_ADDR_VAR 0 4
4746: PUSH
4747: CALL_OW 44
4751: ST_TO_ADDR
// SetDir ( un , dir ) ;
4752: LD_VAR 0 4
4756: PPUSH
4757: LD_VAR 0 5
4761: PPUSH
4762: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4766: LD_VAR 0 4
4770: PPUSH
4771: LD_VAR 0 2
4775: PPUSH
4776: CALL_OW 52
// end ;
4780: LD_VAR 0 3
4784: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
// for i = 1 to count do
4791: LD_ADDR_VAR 0 8
4795: PUSH
4796: DOUBLE
4797: LD_INT 1
4799: DEC
4800: ST_TO_ADDR
4801: LD_VAR 0 6
4805: PUSH
4806: FOR_TO
4807: IFFALSE 4888
// begin uc_side = side ;
4809: LD_ADDR_OWVAR 20
4813: PUSH
4814: LD_VAR 0 1
4818: ST_TO_ADDR
// uc_nation = nation ;
4819: LD_ADDR_OWVAR 21
4823: PUSH
4824: LD_VAR 0 2
4828: ST_TO_ADDR
// hc_gallery =  ;
4829: LD_ADDR_OWVAR 33
4833: PUSH
4834: LD_STRING 
4836: ST_TO_ADDR
// hc_name =  ;
4837: LD_ADDR_OWVAR 26
4841: PUSH
4842: LD_STRING 
4844: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4845: LD_INT 0
4847: PPUSH
4848: LD_VAR 0 5
4852: PPUSH
4853: LD_VAR 0 4
4857: PPUSH
4858: CALL_OW 380
// un = CreateHuman ;
4862: LD_ADDR_VAR 0 10
4866: PUSH
4867: CALL_OW 44
4871: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4872: LD_VAR 0 10
4876: PPUSH
4877: LD_VAR 0 3
4881: PPUSH
4882: CALL_OW 52
// end ;
4886: GO 4806
4888: POP
4889: POP
// end ;
4890: LD_VAR 0 7
4894: RET
// export function PrepareDifficulty ; begin
4895: LD_INT 0
4897: PPUSH
// if Difficulty = 1 then
4898: LD_OWVAR 67
4902: PUSH
4903: LD_INT 1
4905: EQUAL
4906: IFFALSE 4924
// begin RuSolMinLevel = 5 ;
4908: LD_ADDR_EXP 24
4912: PUSH
4913: LD_INT 5
4915: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4916: LD_ADDR_EXP 25
4920: PUSH
4921: LD_INT 6
4923: ST_TO_ADDR
// end ; if Difficulty = 2 then
4924: LD_OWVAR 67
4928: PUSH
4929: LD_INT 2
4931: EQUAL
4932: IFFALSE 5002
// begin RuSolMinLevel = 6 ;
4934: LD_ADDR_EXP 24
4938: PUSH
4939: LD_INT 6
4941: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4942: LD_ADDR_EXP 25
4946: PUSH
4947: LD_INT 6
4949: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
4950: LD_INT 51
4952: PPUSH
4953: LD_INT 3
4955: PPUSH
4956: LD_INT 1
4958: PPUSH
4959: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
4963: LD_INT 57
4965: PPUSH
4966: LD_INT 3
4968: PPUSH
4969: LD_INT 1
4971: PPUSH
4972: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
4976: LD_INT 57
4978: PPUSH
4979: LD_INT 6
4981: PPUSH
4982: LD_INT 2
4984: PPUSH
4985: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
4989: LD_INT 51
4991: PPUSH
4992: LD_INT 6
4994: PPUSH
4995: LD_INT 2
4997: PPUSH
4998: CALL_OW 322
// end ; if Difficulty = 3 then
5002: LD_OWVAR 67
5006: PUSH
5007: LD_INT 3
5009: EQUAL
5010: IFFALSE 5093
// begin RuSolMinLevel = 6 ;
5012: LD_ADDR_EXP 24
5016: PUSH
5017: LD_INT 6
5019: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5020: LD_ADDR_EXP 25
5024: PUSH
5025: LD_INT 7
5027: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
5028: LD_INT 57
5030: PPUSH
5031: LD_INT 3
5033: PPUSH
5034: LD_INT 1
5036: PPUSH
5037: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
5041: LD_INT 51
5043: PPUSH
5044: LD_INT 3
5046: PPUSH
5047: LD_INT 1
5049: PPUSH
5050: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5054: LD_INT 52
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 1
5062: PPUSH
5063: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
5067: LD_INT 57
5069: PPUSH
5070: LD_INT 6
5072: PPUSH
5073: LD_INT 2
5075: PPUSH
5076: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
5080: LD_INT 52
5082: PPUSH
5083: LD_INT 6
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 322
// end ; end ;
5093: LD_VAR 0 1
5097: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
5098: LD_INT 0
5100: PPUSH
5101: PPUSH
5102: PPUSH
5103: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
5104: LD_ADDR_VAR 0 3
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 25
5121: PUSH
5122: LD_INT 2
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PPUSH
5133: CALL_OW 69
5137: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
5138: LD_ADDR_VAR 0 4
5142: PUSH
5143: LD_INT 4
5145: PUSH
5146: LD_INT 75
5148: PUSH
5149: LD_INT 79
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 4
5163: PUSH
5164: LD_INT 113
5166: PUSH
5167: LD_INT 94
5169: PUSH
5170: LD_INT 4
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 29
5181: PUSH
5182: LD_INT 106
5184: PUSH
5185: LD_INT 97
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 26
5199: PUSH
5200: LD_INT 93
5202: PUSH
5203: LD_INT 97
5205: PUSH
5206: LD_INT 5
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: LD_INT 2
5217: PUSH
5218: LD_INT 100
5220: PUSH
5221: LD_INT 89
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 17
5235: PUSH
5236: LD_INT 96
5238: PUSH
5239: LD_INT 89
5241: PUSH
5242: LD_INT 1
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 32
5253: PUSH
5254: LD_INT 78
5256: PUSH
5257: LD_INT 94
5259: PUSH
5260: LD_INT 1
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 32
5271: PUSH
5272: LD_INT 95
5274: PUSH
5275: LD_INT 82
5277: PUSH
5278: LD_INT 3
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 32
5289: PUSH
5290: LD_INT 104
5292: PUSH
5293: LD_INT 85
5295: PUSH
5296: LD_INT 2
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 32
5307: PUSH
5308: LD_INT 81
5310: PUSH
5311: LD_INT 78
5313: PUSH
5314: LD_INT 2
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 33
5325: PUSH
5326: LD_INT 109
5328: PUSH
5329: LD_INT 90
5331: PUSH
5332: LD_INT 3
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 33
5343: PUSH
5344: LD_INT 88
5346: PUSH
5347: LD_INT 79
5349: PUSH
5350: LD_INT 3
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: PUSH
5359: LD_INT 33
5361: PUSH
5362: LD_INT 76
5364: PUSH
5365: LD_INT 87
5367: PUSH
5368: LD_INT 1
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 26
5379: PUSH
5380: LD_INT 96
5382: PUSH
5383: LD_INT 97
5385: PUSH
5386: LD_INT 5
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 26
5397: PUSH
5398: LD_INT 85
5400: PUSH
5401: LD_INT 84
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 6
5415: PUSH
5416: LD_INT 88
5418: PUSH
5419: LD_INT 95
5421: PUSH
5422: LD_INT 0
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 19
5433: PUSH
5434: LD_INT 103
5436: PUSH
5437: LD_INT 89
5439: PUSH
5440: LD_INT 4
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 16
5451: PUSH
5452: LD_INT 97
5454: PUSH
5455: LD_INT 86
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 24
5469: PUSH
5470: LD_INT 100
5472: PUSH
5473: LD_INT 85
5475: PUSH
5476: LD_INT 3
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: ST_TO_ADDR
// for i := 1 to buildingsTab do
5506: LD_ADDR_VAR 0 2
5510: PUSH
5511: DOUBLE
5512: LD_INT 1
5514: DEC
5515: ST_TO_ADDR
5516: LD_VAR 0 4
5520: PUSH
5521: FOR_TO
5522: IFFALSE 5595
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
5524: LD_VAR 0 3
5528: PPUSH
5529: LD_VAR 0 4
5533: PUSH
5534: LD_VAR 0 2
5538: ARRAY
5539: PUSH
5540: LD_INT 1
5542: ARRAY
5543: PPUSH
5544: LD_VAR 0 4
5548: PUSH
5549: LD_VAR 0 2
5553: ARRAY
5554: PUSH
5555: LD_INT 2
5557: ARRAY
5558: PPUSH
5559: LD_VAR 0 4
5563: PUSH
5564: LD_VAR 0 2
5568: ARRAY
5569: PUSH
5570: LD_INT 3
5572: ARRAY
5573: PPUSH
5574: LD_VAR 0 4
5578: PUSH
5579: LD_VAR 0 2
5583: ARRAY
5584: PUSH
5585: LD_INT 4
5587: ARRAY
5588: PPUSH
5589: CALL_OW 205
5593: GO 5521
5595: POP
5596: POP
// end ;
5597: LD_VAR 0 1
5601: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5602: LD_INT 0
5604: PPUSH
5605: PPUSH
// for i in charactersList do
5606: LD_ADDR_VAR 0 4
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: FOR_IN
5617: IFFALSE 5646
// begin if IsOk ( i ) then
5619: LD_VAR 0 4
5623: PPUSH
5624: CALL_OW 302
5628: IFFALSE 5644
// SaveCharacters ( i , ident ) ;
5630: LD_VAR 0 4
5634: PPUSH
5635: LD_VAR 0 2
5639: PPUSH
5640: CALL_OW 38
// end ;
5644: GO 5616
5646: POP
5647: POP
// end ;
5648: LD_VAR 0 3
5652: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5653: LD_INT 0
5655: PPUSH
5656: PPUSH
5657: PPUSH
5658: PPUSH
// for i = 1 to 72 do
5659: LD_ADDR_VAR 0 5
5663: PUSH
5664: DOUBLE
5665: LD_INT 1
5667: DEC
5668: ST_TO_ADDR
5669: LD_INT 72
5671: PUSH
5672: FOR_TO
5673: IFFALSE 5731
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5675: LD_VAR 0 5
5679: PPUSH
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 321
5689: PUSH
5690: LD_INT 1
5692: EQUAL
5693: PUSH
5694: LD_VAR 0 5
5698: PPUSH
5699: LD_VAR 0 3
5703: PPUSH
5704: CALL_OW 482
5708: PUSH
5709: LD_INT 1
5711: EQUAL
5712: AND
5713: IFFALSE 5729
// AddComResearch ( lab , i ) ;
5715: LD_VAR 0 2
5719: PPUSH
5720: LD_VAR 0 5
5724: PPUSH
5725: CALL_OW 184
5729: GO 5672
5731: POP
5732: POP
// end ;
5733: LD_VAR 0 4
5737: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
5748: LD_ADDR_VAR 0 6
5752: PUSH
5753: LD_INT 22
5755: PUSH
5756: LD_VAR 0 1
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 25
5767: PUSH
5768: LD_INT 1
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 56
5777: PUSH
5778: EMPTY
5779: LIST
5780: PUSH
5781: LD_INT 24
5783: PUSH
5784: LD_INT 700
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: LD_INT 3
5793: PUSH
5794: LD_INT 60
5796: PUSH
5797: EMPTY
5798: LIST
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PPUSH
5811: CALL_OW 69
5815: PUSH
5816: LD_EXP 23
5820: PUSH
5821: EMPTY
5822: LIST
5823: DIFF
5824: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_INT 22
5832: PUSH
5833: LD_VAR 0 1
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 25
5844: PUSH
5845: LD_INT 1
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PUSH
5852: LD_INT 54
5854: PUSH
5855: EMPTY
5856: LIST
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: PPUSH
5863: CALL_OW 69
5867: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
5868: LD_ADDR_VAR 0 8
5872: PUSH
5873: LD_INT 22
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 30
5887: PUSH
5888: LD_INT 32
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 58
5897: PUSH
5898: EMPTY
5899: LIST
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: LD_INT 251
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PPUSH
5917: CALL_OW 69
5921: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
5922: LD_ADDR_VAR 0 10
5926: PUSH
5927: LD_INT 22
5929: PUSH
5930: LD_VAR 0 1
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: LD_INT 2
5941: PUSH
5942: LD_INT 30
5944: PUSH
5945: LD_INT 4
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 30
5954: PUSH
5955: LD_INT 5
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 24
5969: PUSH
5970: LD_INT 251
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: PPUSH
5982: CALL_OW 69
5986: ST_TO_ADDR
// if barrackList > 0 then
5987: LD_VAR 0 10
5991: PUSH
5992: LD_INT 0
5994: GREATER
5995: IFFALSE 6071
// begin if turretList = 0 then
5997: LD_VAR 0 8
6001: PUSH
6002: LD_INT 0
6004: EQUAL
6005: IFFALSE 6054
// begin for i in soldiers_list do
6007: LD_ADDR_VAR 0 4
6011: PUSH
6012: LD_VAR 0 6
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6050
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
6020: LD_VAR 0 4
6024: PPUSH
6025: LD_VAR 0 10
6029: PUSH
6030: LD_INT 1
6032: PPUSH
6033: LD_VAR 0 10
6037: PPUSH
6038: CALL_OW 12
6042: ARRAY
6043: PPUSH
6044: CALL_OW 120
6048: GO 6017
6050: POP
6051: POP
// end else
6052: GO 6071
// begin for i in barrackList do
6054: LD_ADDR_VAR 0 4
6058: PUSH
6059: LD_VAR 0 10
6063: PUSH
6064: FOR_IN
6065: IFFALSE 6069
// begin end ;
6067: GO 6064
6069: POP
6070: POP
// end ; end ; end ;
6071: LD_VAR 0 3
6075: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
6076: LD_INT 0
6078: PPUSH
6079: PPUSH
6080: PPUSH
6081: PPUSH
6082: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
6083: LD_ADDR_VAR 0 6
6087: PUSH
6088: LD_INT 22
6090: PUSH
6091: LD_VAR 0 1
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 2
6102: PUSH
6103: LD_INT 25
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_INT 25
6115: PUSH
6116: LD_INT 16
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 24
6130: PUSH
6131: LD_INT 1000
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6148: LD_ADDR_VAR 0 4
6152: PUSH
6153: LD_INT 22
6155: PUSH
6156: LD_VAR 0 1
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 21
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 24
6180: PUSH
6181: LD_INT 1000
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
6205: LD_VAR 0 4
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: PUSH
6214: LD_VAR 0 6
6218: PUSH
6219: LD_INT 0
6221: GREATER
6222: AND
6223: IFFALSE 6289
// begin for i in engineerOk_list do
6225: LD_ADDR_VAR 0 5
6229: PUSH
6230: LD_VAR 0 6
6234: PUSH
6235: FOR_IN
6236: IFFALSE 6287
// begin for j in buildings_list do
6238: LD_ADDR_VAR 0 7
6242: PUSH
6243: LD_VAR 0 4
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6283
// begin AddComExitBuilding ( i ) ;
6251: LD_VAR 0 5
6255: PPUSH
6256: CALL_OW 182
// wait ( 0 0$1 ) ;
6260: LD_INT 35
6262: PPUSH
6263: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
6267: LD_VAR 0 5
6271: PPUSH
6272: LD_VAR 0 7
6276: PPUSH
6277: CALL_OW 190
// end ;
6281: GO 6248
6283: POP
6284: POP
// end ;
6285: GO 6235
6287: POP
6288: POP
// end ; if buildings_list = 0 then
6289: LD_VAR 0 4
6293: PUSH
6294: LD_INT 0
6296: EQUAL
6297: IFFALSE 6330
// begin for i in engineerOK_list do
6299: LD_ADDR_VAR 0 5
6303: PUSH
6304: LD_VAR 0 6
6308: PUSH
6309: FOR_IN
6310: IFFALSE 6328
// begin ComEnterUnit ( i , building ) ;
6312: LD_VAR 0 5
6316: PPUSH
6317: LD_VAR 0 2
6321: PPUSH
6322: CALL_OW 120
// end ;
6326: GO 6309
6328: POP
6329: POP
// end ; end ;
6330: LD_VAR 0 3
6334: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
6339: LD_INT 22
6341: PUSH
6342: LD_VAR 0 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 2
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PPUSH
6365: CALL_OW 69
6369: PUSH
6370: LD_INT 0
6372: GREATER
6373: PUSH
6374: LD_INT 22
6376: PUSH
6377: LD_VAR 0 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 21
6388: PUSH
6389: LD_INT 3
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 1000
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: PUSH
6423: LD_INT 0
6425: EQUAL
6426: AND
6427: PUSH
6428: LD_VAR 0 2
6432: PUSH
6433: LD_INT 0
6435: GREATER
6436: AND
6437: IFFALSE 6536
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
6439: LD_ADDR_VAR 0 4
6443: PUSH
6444: LD_INT 22
6446: PUSH
6447: LD_VAR 0 1
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: PUSH
6456: LD_INT 25
6458: PUSH
6459: LD_INT 2
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PPUSH
6470: CALL_OW 69
6474: PUSH
6475: FOR_IN
6476: IFFALSE 6534
// begin AddComExitBuilding ( i ) ;
6478: LD_VAR 0 4
6482: PPUSH
6483: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
6487: LD_VAR 0 4
6491: PPUSH
6492: LD_VAR 0 2
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: LD_VAR 0 2
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 3
6517: ARRAY
6518: PPUSH
6519: LD_VAR 0 2
6523: PUSH
6524: LD_INT 4
6526: ARRAY
6527: PPUSH
6528: CALL_OW 205
// end ;
6532: GO 6475
6534: POP
6535: POP
// end ; end ;
6536: LD_VAR 0 3
6540: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6541: LD_INT 0
6543: PPUSH
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6548: LD_ADDR_VAR 0 6
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 25
6567: PUSH
6568: LD_INT 4
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PPUSH
6579: CALL_OW 69
6583: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6584: LD_ADDR_VAR 0 9
6588: PUSH
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_INT 22
6596: PUSH
6597: LD_VAR 0 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 21
6608: PUSH
6609: LD_INT 1
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 3
6618: PUSH
6619: LD_INT 24
6621: PUSH
6622: LD_INT 750
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 70
6642: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
6643: LD_VAR 0 9
6647: PUSH
6648: LD_INT 0
6650: GREATER
6651: PUSH
6652: LD_VAR 0 6
6656: PUSH
6657: LD_INT 0
6659: GREATER
6660: AND
6661: IFFALSE 6788
// begin for i = 1 to damageUnits do
6663: LD_ADDR_VAR 0 7
6667: PUSH
6668: DOUBLE
6669: LD_INT 1
6671: DEC
6672: ST_TO_ADDR
6673: LD_VAR 0 9
6677: PUSH
6678: FOR_TO
6679: IFFALSE 6703
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6681: LD_VAR 0 9
6685: PUSH
6686: LD_VAR 0 7
6690: ARRAY
6691: PPUSH
6692: LD_VAR 0 2
6696: PPUSH
6697: CALL_OW 113
6701: GO 6678
6703: POP
6704: POP
// for i in sci_list do
6705: LD_ADDR_VAR 0 7
6709: PUSH
6710: LD_VAR 0 6
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6784
// begin ComExitBuilding ( i ) ;
6718: LD_VAR 0 7
6722: PPUSH
6723: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6727: LD_ADDR_VAR 0 8
6731: PUSH
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_INT 22
6739: PUSH
6740: LD_VAR 0 1
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PPUSH
6749: CALL_OW 70
6753: PUSH
6754: FOR_IN
6755: IFFALSE 6780
// begin AddComHeal ( i , j ) ;
6757: LD_VAR 0 7
6761: PPUSH
6762: LD_VAR 0 8
6766: PPUSH
6767: CALL_OW 188
// wait ( 1 1$0 ) ;
6771: LD_INT 2100
6773: PPUSH
6774: CALL_OW 67
// end ;
6778: GO 6754
6780: POP
6781: POP
// end ;
6782: GO 6715
6784: POP
6785: POP
// end else
6786: GO 6802
// begin AddComEnterUnit ( sci_list , build ) ;
6788: LD_VAR 0 6
6792: PPUSH
6793: LD_VAR 0 4
6797: PPUSH
6798: CALL_OW 180
// end ; end ;
6802: LD_VAR 0 5
6806: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6807: LD_INT 0
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6820: LD_ADDR_VAR 0 9
6824: PUSH
6825: LD_INT 22
6827: PUSH
6828: LD_VAR 0 1
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 21
6839: PUSH
6840: LD_INT 2
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 33
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 24
6859: PUSH
6860: LD_INT 660
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: LD_INT 58
6872: PUSH
6873: EMPTY
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 34
6885: PUSH
6886: LD_INT 53
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 69
6909: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6910: LD_ADDR_VAR 0 10
6914: PUSH
6915: LD_INT 22
6917: PUSH
6918: LD_VAR 0 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 33
6939: PUSH
6940: LD_INT 1
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 3
6949: PUSH
6950: LD_INT 24
6952: PUSH
6953: LD_INT 660
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 69
6974: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6975: LD_ADDR_VAR 0 11
6979: PUSH
6980: LD_VAR 0 2
6984: PPUSH
6985: LD_INT 22
6987: PUSH
6988: LD_VAR 0 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 33
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: LD_INT 1000
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: PPUSH
7040: CALL_OW 70
7044: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7045: LD_ADDR_VAR 0 12
7049: PUSH
7050: LD_VAR 0 2
7054: PPUSH
7055: LD_INT 22
7057: PUSH
7058: LD_VAR 0 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 2
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 33
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 24
7089: PUSH
7090: LD_INT 1000
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 58
7099: PUSH
7100: EMPTY
7101: LIST
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: LD_INT 34
7108: PUSH
7109: LD_INT 53
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 70
7132: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7133: LD_ADDR_VAR 0 13
7137: PUSH
7138: EMPTY
7139: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7140: LD_ADDR_VAR 0 14
7144: PUSH
7145: LD_VAR 0 2
7149: PPUSH
7150: LD_INT 22
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PPUSH
7176: CALL_OW 70
7180: ST_TO_ADDR
// if damageVehicle_list > 0 then
7181: LD_VAR 0 10
7185: PUSH
7186: LD_INT 0
7188: GREATER
7189: IFFALSE 7227
// begin for i in damageVehicle_list do
7191: LD_ADDR_VAR 0 7
7195: PUSH
7196: LD_VAR 0 10
7200: PUSH
7201: FOR_IN
7202: IFFALSE 7225
// begin ComMoveXY ( i , repX , repY ) ;
7204: LD_VAR 0 7
7208: PPUSH
7209: LD_VAR 0 3
7213: PPUSH
7214: LD_VAR 0 4
7218: PPUSH
7219: CALL_OW 111
// end ;
7223: GO 7201
7225: POP
7226: POP
// end ; if vehicleNeedRepair_list > 0 then
7227: LD_VAR 0 11
7231: PUSH
7232: LD_INT 0
7234: GREATER
7235: IFFALSE 7322
// begin for i in vehicleNeedRepair_list do
7237: LD_ADDR_VAR 0 7
7241: PUSH
7242: LD_VAR 0 11
7246: PUSH
7247: FOR_IN
7248: IFFALSE 7320
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7250: LD_ADDR_VAR 0 13
7254: PUSH
7255: LD_VAR 0 13
7259: PUSH
7260: LD_VAR 0 7
7264: PPUSH
7265: CALL_OW 313
7269: ADD
7270: ST_TO_ADDR
// for j in mechanicInside_list do
7271: LD_ADDR_VAR 0 8
7275: PUSH
7276: LD_VAR 0 13
7280: PUSH
7281: FOR_IN
7282: IFFALSE 7316
// begin ComExitVehicle ( i ) ;
7284: LD_VAR 0 7
7288: PPUSH
7289: CALL_OW 121
// wait ( 0 0$1 ) ;
7293: LD_INT 35
7295: PPUSH
7296: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
7300: LD_VAR 0 7
7304: PPUSH
7305: LD_VAR 0 8
7309: PPUSH
7310: CALL_OW 129
// end ;
7314: GO 7281
7316: POP
7317: POP
// end ;
7318: GO 7247
7320: POP
7321: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7322: LD_VAR 0 12
7326: PUSH
7327: LD_INT 0
7329: GREATER
7330: IFFALSE 7370
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7332: LD_VAR 0 14
7336: PUSH
7337: LD_INT 1
7339: ARRAY
7340: PPUSH
7341: LD_VAR 0 12
7345: PUSH
7346: LD_INT 1
7348: ARRAY
7349: PPUSH
7350: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
7354: LD_VAR 0 12
7358: PUSH
7359: LD_INT 1
7361: ARRAY
7362: PPUSH
7363: LD_INT 100
7365: PPUSH
7366: CALL_OW 240
// end ; if vehicleOK_list > 0 then
7370: LD_VAR 0 9
7374: PUSH
7375: LD_INT 0
7377: GREATER
7378: IFFALSE 7569
// begin for i in vehicleOK_list do
7380: LD_ADDR_VAR 0 7
7384: PUSH
7385: LD_VAR 0 9
7389: PUSH
7390: FOR_IN
7391: IFFALSE 7567
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7393: LD_ADDR_VAR 0 15
7397: PUSH
7398: LD_INT 22
7400: PUSH
7401: LD_VAR 0 5
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: PPUSH
7410: CALL_OW 69
7414: PPUSH
7415: LD_VAR 0 7
7419: PPUSH
7420: CALL_OW 74
7424: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7425: LD_ADDR_VAR 0 16
7429: PUSH
7430: LD_INT 22
7432: PUSH
7433: LD_VAR 0 5
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 59
7447: PUSH
7448: EMPTY
7449: LIST
7450: PUSH
7451: LD_INT 21
7453: PUSH
7454: LD_INT 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 21
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: PPUSH
7484: CALL_OW 69
7488: PPUSH
7489: LD_VAR 0 7
7493: PPUSH
7494: CALL_OW 74
7498: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7499: LD_VAR 0 7
7503: PPUSH
7504: LD_VAR 0 15
7508: PPUSH
7509: CALL_OW 296
7513: PUSH
7514: LD_INT 8
7516: PLUS
7517: PUSH
7518: LD_VAR 0 7
7522: PPUSH
7523: LD_VAR 0 16
7527: PPUSH
7528: CALL_OW 296
7532: LESS
7533: IFFALSE 7551
// begin ComAttackUnit ( i , target1 ) ;
7535: LD_VAR 0 7
7539: PPUSH
7540: LD_VAR 0 15
7544: PPUSH
7545: CALL_OW 115
// end else
7549: GO 7565
// begin ComAttackUnit ( i , target2 ) ;
7551: LD_VAR 0 7
7555: PPUSH
7556: LD_VAR 0 16
7560: PPUSH
7561: CALL_OW 115
// end ; end ;
7565: GO 7390
7567: POP
7568: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7569: LD_ADDR_VAR 0 7
7573: PUSH
7574: LD_VAR 0 2
7578: PPUSH
7579: LD_INT 22
7581: PUSH
7582: LD_VAR 0 1
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 25
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 70
7609: NOT
7610: PUSH
7611: FOR_IN
7612: IFFALSE 7635
// ComMoveXY ( i , repX , repY ) ;
7614: LD_VAR 0 7
7618: PPUSH
7619: LD_VAR 0 3
7623: PPUSH
7624: LD_VAR 0 4
7628: PPUSH
7629: CALL_OW 111
7633: GO 7611
7635: POP
7636: POP
// end ;
7637: LD_VAR 0 6
7641: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
7642: LD_INT 0
7644: PPUSH
7645: PPUSH
7646: PPUSH
7647: PPUSH
7648: PPUSH
7649: PPUSH
7650: PPUSH
7651: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7652: LD_INT 22
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 69
7682: PUSH
7683: LD_VAR 0 3
7687: LESSEQUAL
7688: IFFALSE 7755
// for i = 1 to vehCount do
7690: LD_ADDR_VAR 0 10
7694: PUSH
7695: DOUBLE
7696: LD_INT 1
7698: DEC
7699: ST_TO_ADDR
7700: LD_VAR 0 3
7704: PUSH
7705: FOR_TO
7706: IFFALSE 7753
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
7708: LD_VAR 0 2
7712: PPUSH
7713: LD_VAR 0 8
7717: PPUSH
7718: LD_VAR 0 6
7722: PPUSH
7723: LD_VAR 0 7
7727: PPUSH
7728: LD_VAR 0 5
7732: PUSH
7733: LD_INT 1
7735: PPUSH
7736: LD_VAR 0 5
7740: PPUSH
7741: CALL_OW 12
7745: ARRAY
7746: PPUSH
7747: CALL_OW 185
7751: GO 7705
7753: POP
7754: POP
// repeat wait ( 0 0$1 ) ;
7755: LD_INT 35
7757: PPUSH
7758: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
7762: LD_INT 22
7764: PUSH
7765: LD_VAR 0 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 21
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 24
7786: PUSH
7787: LD_INT 250
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: PUSH
7804: LD_VAR 0 3
7808: GREATEREQUAL
7809: IFFALSE 7755
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
7811: LD_INT 22
7813: PUSH
7814: LD_VAR 0 1
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 21
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 24
7835: PUSH
7836: LD_INT 250
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: PPUSH
7848: CALL_OW 69
7852: PUSH
7853: LD_VAR 0 3
7857: GREATEREQUAL
7858: IFFALSE 8201
// begin repeat begin wait ( 0 0$1 ) ;
7860: LD_INT 35
7862: PPUSH
7863: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
7867: LD_INT 22
7869: PUSH
7870: LD_VAR 0 1
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 21
7881: PUSH
7882: LD_INT 2
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 24
7891: PUSH
7892: LD_INT 651
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: PUSH
7909: LD_INT 0
7911: GREATER
7912: IFFALSE 8140
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
7914: LD_ADDR_VAR 0 10
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_VAR 0 1
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: PUSH
7931: LD_INT 21
7933: PUSH
7934: LD_INT 2
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 24
7943: PUSH
7944: LD_INT 651
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PUSH
7961: FOR_IN
7962: IFFALSE 8138
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7964: LD_ADDR_VAR 0 15
7968: PUSH
7969: LD_INT 22
7971: PUSH
7972: LD_VAR 0 4
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PPUSH
7981: CALL_OW 69
7985: PPUSH
7986: LD_VAR 0 10
7990: PPUSH
7991: CALL_OW 74
7995: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7996: LD_ADDR_VAR 0 16
8000: PUSH
8001: LD_INT 22
8003: PUSH
8004: LD_VAR 0 4
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 2
8015: PUSH
8016: LD_INT 59
8018: PUSH
8019: EMPTY
8020: LIST
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 1
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 21
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: PPUSH
8060: LD_VAR 0 10
8064: PPUSH
8065: CALL_OW 74
8069: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8070: LD_VAR 0 10
8074: PPUSH
8075: LD_VAR 0 15
8079: PPUSH
8080: CALL_OW 296
8084: PUSH
8085: LD_INT 8
8087: PLUS
8088: PUSH
8089: LD_VAR 0 10
8093: PPUSH
8094: LD_VAR 0 16
8098: PPUSH
8099: CALL_OW 296
8103: LESS
8104: IFFALSE 8122
// begin ComAttackUnit ( i , target1 ) ;
8106: LD_VAR 0 10
8110: PPUSH
8111: LD_VAR 0 15
8115: PPUSH
8116: CALL_OW 115
// end else
8120: GO 8136
// begin ComAttackUnit ( i , target2 ) ;
8122: LD_VAR 0 10
8126: PPUSH
8127: LD_VAR 0 16
8131: PPUSH
8132: CALL_OW 115
// end ; end ;
8136: GO 7961
8138: POP
8139: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 21
8154: PUSH
8155: LD_INT 2
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PPUSH
8166: CALL_OW 69
8170: PUSH
8171: LD_INT 0
8173: EQUAL
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_VAR 0 4
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: PPUSH
8190: CALL_OW 69
8194: PUSH
8195: LD_INT 0
8197: EQUAL
8198: OR
8199: IFFALSE 7860
// end ; end ;
8201: LD_VAR 0 9
8205: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8206: LD_INT 0
8208: PPUSH
8209: PPUSH
8210: PPUSH
8211: PPUSH
8212: PPUSH
8213: PPUSH
8214: PPUSH
8215: PPUSH
8216: PPUSH
8217: PPUSH
8218: PPUSH
// for i = 1 to medicCount do
8219: LD_ADDR_VAR 0 14
8223: PUSH
8224: DOUBLE
8225: LD_INT 1
8227: DEC
8228: ST_TO_ADDR
8229: LD_VAR 0 7
8233: PUSH
8234: FOR_TO
8235: IFFALSE 8317
// begin uc_side = side ;
8237: LD_ADDR_OWVAR 20
8241: PUSH
8242: LD_VAR 0 1
8246: ST_TO_ADDR
// uc_nation = nation ;
8247: LD_ADDR_OWVAR 21
8251: PUSH
8252: LD_VAR 0 2
8256: ST_TO_ADDR
// hc_name =  ;
8257: LD_ADDR_OWVAR 26
8261: PUSH
8262: LD_STRING 
8264: ST_TO_ADDR
// hc_gallery =  ;
8265: LD_ADDR_OWVAR 33
8269: PUSH
8270: LD_STRING 
8272: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8273: LD_INT 0
8275: PPUSH
8276: LD_INT 4
8278: PPUSH
8279: LD_VAR 0 8
8283: PPUSH
8284: CALL_OW 380
// un = CreateHuman ;
8288: LD_ADDR_VAR 0 16
8292: PUSH
8293: CALL_OW 44
8297: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8298: LD_VAR 0 16
8302: PPUSH
8303: LD_VAR 0 9
8307: PPUSH
8308: LD_INT 0
8310: PPUSH
8311: CALL_OW 49
// end ;
8315: GO 8234
8317: POP
8318: POP
// for i = 1 to soldierCount do
8319: LD_ADDR_VAR 0 14
8323: PUSH
8324: DOUBLE
8325: LD_INT 1
8327: DEC
8328: ST_TO_ADDR
8329: LD_VAR 0 3
8333: PUSH
8334: FOR_TO
8335: IFFALSE 8417
// begin uc_side = side ;
8337: LD_ADDR_OWVAR 20
8341: PUSH
8342: LD_VAR 0 1
8346: ST_TO_ADDR
// uc_nation = nation ;
8347: LD_ADDR_OWVAR 21
8351: PUSH
8352: LD_VAR 0 2
8356: ST_TO_ADDR
// hc_name =  ;
8357: LD_ADDR_OWVAR 26
8361: PUSH
8362: LD_STRING 
8364: ST_TO_ADDR
// hc_gallery =  ;
8365: LD_ADDR_OWVAR 33
8369: PUSH
8370: LD_STRING 
8372: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8373: LD_INT 0
8375: PPUSH
8376: LD_INT 1
8378: PPUSH
8379: LD_VAR 0 8
8383: PPUSH
8384: CALL_OW 380
// un = CreateHuman ;
8388: LD_ADDR_VAR 0 16
8392: PUSH
8393: CALL_OW 44
8397: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8398: LD_VAR 0 16
8402: PPUSH
8403: LD_VAR 0 9
8407: PPUSH
8408: LD_INT 0
8410: PPUSH
8411: CALL_OW 49
// end ;
8415: GO 8334
8417: POP
8418: POP
// for i = 1 to sniperCount do
8419: LD_ADDR_VAR 0 14
8423: PUSH
8424: DOUBLE
8425: LD_INT 1
8427: DEC
8428: ST_TO_ADDR
8429: LD_VAR 0 4
8433: PUSH
8434: FOR_TO
8435: IFFALSE 8517
// begin uc_side = side ;
8437: LD_ADDR_OWVAR 20
8441: PUSH
8442: LD_VAR 0 1
8446: ST_TO_ADDR
// uc_nation = nation ;
8447: LD_ADDR_OWVAR 21
8451: PUSH
8452: LD_VAR 0 2
8456: ST_TO_ADDR
// hc_name =  ;
8457: LD_ADDR_OWVAR 26
8461: PUSH
8462: LD_STRING 
8464: ST_TO_ADDR
// hc_gallery =  ;
8465: LD_ADDR_OWVAR 33
8469: PUSH
8470: LD_STRING 
8472: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8473: LD_INT 0
8475: PPUSH
8476: LD_INT 5
8478: PPUSH
8479: LD_VAR 0 8
8483: PPUSH
8484: CALL_OW 380
// un = CreateHuman ;
8488: LD_ADDR_VAR 0 16
8492: PUSH
8493: CALL_OW 44
8497: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8498: LD_VAR 0 16
8502: PPUSH
8503: LD_VAR 0 9
8507: PPUSH
8508: LD_INT 0
8510: PPUSH
8511: CALL_OW 49
// end ;
8515: GO 8434
8517: POP
8518: POP
// for i = 1 to bazookCount do
8519: LD_ADDR_VAR 0 14
8523: PUSH
8524: DOUBLE
8525: LD_INT 1
8527: DEC
8528: ST_TO_ADDR
8529: LD_VAR 0 5
8533: PUSH
8534: FOR_TO
8535: IFFALSE 8617
// begin uc_side = side ;
8537: LD_ADDR_OWVAR 20
8541: PUSH
8542: LD_VAR 0 1
8546: ST_TO_ADDR
// uc_nation = nation ;
8547: LD_ADDR_OWVAR 21
8551: PUSH
8552: LD_VAR 0 2
8556: ST_TO_ADDR
// hc_name =  ;
8557: LD_ADDR_OWVAR 26
8561: PUSH
8562: LD_STRING 
8564: ST_TO_ADDR
// hc_gallery =  ;
8565: LD_ADDR_OWVAR 33
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_INT 9
8578: PPUSH
8579: LD_VAR 0 8
8583: PPUSH
8584: CALL_OW 380
// un = CreateHuman ;
8588: LD_ADDR_VAR 0 16
8592: PUSH
8593: CALL_OW 44
8597: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8598: LD_VAR 0 16
8602: PPUSH
8603: LD_VAR 0 9
8607: PPUSH
8608: LD_INT 0
8610: PPUSH
8611: CALL_OW 49
// end ;
8615: GO 8534
8617: POP
8618: POP
// for i = 1 to mortalCount do
8619: LD_ADDR_VAR 0 14
8623: PUSH
8624: DOUBLE
8625: LD_INT 1
8627: DEC
8628: ST_TO_ADDR
8629: LD_VAR 0 6
8633: PUSH
8634: FOR_TO
8635: IFFALSE 8717
// begin uc_side = side ;
8637: LD_ADDR_OWVAR 20
8641: PUSH
8642: LD_VAR 0 1
8646: ST_TO_ADDR
// uc_nation = nation ;
8647: LD_ADDR_OWVAR 21
8651: PUSH
8652: LD_VAR 0 2
8656: ST_TO_ADDR
// hc_name =  ;
8657: LD_ADDR_OWVAR 26
8661: PUSH
8662: LD_STRING 
8664: ST_TO_ADDR
// hc_gallery =  ;
8665: LD_ADDR_OWVAR 33
8669: PUSH
8670: LD_STRING 
8672: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8673: LD_INT 0
8675: PPUSH
8676: LD_INT 8
8678: PPUSH
8679: LD_VAR 0 8
8683: PPUSH
8684: CALL_OW 380
// un = CreateHuman ;
8688: LD_ADDR_VAR 0 16
8692: PUSH
8693: CALL_OW 44
8697: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8698: LD_VAR 0 16
8702: PPUSH
8703: LD_VAR 0 9
8707: PPUSH
8708: LD_INT 0
8710: PPUSH
8711: CALL_OW 49
// end ;
8715: GO 8634
8717: POP
8718: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8719: LD_ADDR_VAR 0 19
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_VAR 0 1
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 2
8738: PUSH
8739: LD_INT 25
8741: PUSH
8742: LD_INT 1
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 25
8751: PUSH
8752: LD_INT 5
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 25
8761: PUSH
8762: LD_INT 8
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: LD_INT 25
8771: PUSH
8772: LD_INT 9
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PPUSH
8790: CALL_OW 69
8794: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8795: LD_ADDR_VAR 0 18
8799: PUSH
8800: LD_INT 22
8802: PUSH
8803: LD_VAR 0 1
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 25
8814: PUSH
8815: LD_INT 4
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PPUSH
8826: CALL_OW 69
8830: ST_TO_ADDR
// for i in medic_list do
8831: LD_ADDR_VAR 0 14
8835: PUSH
8836: LD_VAR 0 18
8840: PUSH
8841: FOR_IN
8842: IFFALSE 8860
// ComMoveToArea ( i , healArea ) ;
8844: LD_VAR 0 14
8848: PPUSH
8849: LD_VAR 0 10
8853: PPUSH
8854: CALL_OW 113
8858: GO 8841
8860: POP
8861: POP
// if strategy = 1 then
8862: LD_VAR 0 12
8866: PUSH
8867: LD_INT 1
8869: EQUAL
8870: IFFALSE 9605
// begin repeat wait ( 0 0$3 ) ;
8872: LD_INT 105
8874: PPUSH
8875: CALL_OW 67
// for i in soldiersOK_list do
8879: LD_ADDR_VAR 0 14
8883: PUSH
8884: LD_VAR 0 19
8888: PUSH
8889: FOR_IN
8890: IFFALSE 8954
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8892: LD_VAR 0 14
8896: PPUSH
8897: LD_INT 91
8899: PPUSH
8900: LD_INT 63
8902: PPUSH
8903: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8907: LD_VAR 0 14
8911: PPUSH
8912: LD_INT 101
8914: PPUSH
8915: LD_INT 53
8917: PPUSH
8918: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8922: LD_VAR 0 14
8926: PPUSH
8927: LD_INT 75
8929: PPUSH
8930: LD_INT 23
8932: PPUSH
8933: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8937: LD_VAR 0 14
8941: PPUSH
8942: LD_INT 78
8944: PPUSH
8945: LD_INT 8
8947: PPUSH
8948: CALL_OW 174
// end ;
8952: GO 8889
8954: POP
8955: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8956: LD_INT 12
8958: PPUSH
8959: LD_INT 22
8961: PUSH
8962: LD_VAR 0 1
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 70
8975: PUSH
8976: LD_INT 2
8978: GREATER
8979: IFFALSE 8872
// repeat wait ( 0 0$1 ) ;
8981: LD_INT 35
8983: PPUSH
8984: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8988: LD_ADDR_VAR 0 17
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_VAR 0 1
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: LD_INT 3
9010: PUSH
9011: LD_INT 24
9013: PUSH
9014: LD_INT 550
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 24
9027: PUSH
9028: LD_INT 250
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9049: LD_ADDR_VAR 0 19
9053: PUSH
9054: LD_INT 22
9056: PUSH
9057: LD_VAR 0 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 2
9068: PUSH
9069: LD_INT 25
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 25
9081: PUSH
9082: LD_INT 5
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 25
9091: PUSH
9092: LD_INT 8
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: LD_INT 25
9101: PUSH
9102: LD_INT 9
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 24
9118: PUSH
9119: LD_INT 1000
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: ST_TO_ADDR
// if medicCount > 0 then
9136: LD_VAR 0 7
9140: PUSH
9141: LD_INT 0
9143: GREATER
9144: IFFALSE 9218
// begin if damageUnit_list > 0 then
9146: LD_VAR 0 17
9150: PUSH
9151: LD_INT 0
9153: GREATER
9154: IFFALSE 9218
// begin for i in damageUnit_list do
9156: LD_ADDR_VAR 0 14
9160: PUSH
9161: LD_VAR 0 17
9165: PUSH
9166: FOR_IN
9167: IFFALSE 9216
// begin ComMoveToArea ( i , healArea ) ;
9169: LD_VAR 0 14
9173: PPUSH
9174: LD_VAR 0 10
9178: PPUSH
9179: CALL_OW 113
// for j in medic_list do
9183: LD_ADDR_VAR 0 15
9187: PUSH
9188: LD_VAR 0 18
9192: PUSH
9193: FOR_IN
9194: IFFALSE 9212
// AddComHeal ( j , i ) ;
9196: LD_VAR 0 15
9200: PPUSH
9201: LD_VAR 0 14
9205: PPUSH
9206: CALL_OW 188
9210: GO 9193
9212: POP
9213: POP
// end ;
9214: GO 9166
9216: POP
9217: POP
// end ; end ; for i in soldiersOK_list do
9218: LD_ADDR_VAR 0 14
9222: PUSH
9223: LD_VAR 0 19
9227: PUSH
9228: FOR_IN
9229: IFFALSE 9405
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9231: LD_ADDR_VAR 0 22
9235: PUSH
9236: LD_INT 22
9238: PUSH
9239: LD_VAR 0 11
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: PPUSH
9253: LD_VAR 0 14
9257: PPUSH
9258: CALL_OW 74
9262: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9263: LD_ADDR_VAR 0 23
9267: PUSH
9268: LD_INT 22
9270: PUSH
9271: LD_VAR 0 11
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: LD_INT 59
9285: PUSH
9286: EMPTY
9287: LIST
9288: PUSH
9289: LD_INT 21
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 21
9301: PUSH
9302: LD_INT 2
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: PPUSH
9322: CALL_OW 69
9326: PPUSH
9327: LD_VAR 0 14
9331: PPUSH
9332: CALL_OW 74
9336: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9337: LD_VAR 0 14
9341: PPUSH
9342: LD_VAR 0 22
9346: PPUSH
9347: CALL_OW 296
9351: PUSH
9352: LD_INT 8
9354: PLUS
9355: PUSH
9356: LD_VAR 0 14
9360: PPUSH
9361: LD_VAR 0 23
9365: PPUSH
9366: CALL_OW 296
9370: LESS
9371: IFFALSE 9389
// begin ComAttackUnit ( i , target1 ) ;
9373: LD_VAR 0 14
9377: PPUSH
9378: LD_VAR 0 22
9382: PPUSH
9383: CALL_OW 115
// end else
9387: GO 9403
// begin ComAttackUnit ( i , target2 ) ;
9389: LD_VAR 0 14
9393: PPUSH
9394: LD_VAR 0 23
9398: PPUSH
9399: CALL_OW 115
// end ; end ;
9403: GO 9228
9405: POP
9406: POP
// for i in soldiersOK_list do
9407: LD_ADDR_VAR 0 14
9411: PUSH
9412: LD_VAR 0 19
9416: PUSH
9417: FOR_IN
9418: IFFALSE 9594
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9420: LD_ADDR_VAR 0 22
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_VAR 0 11
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: PPUSH
9442: LD_VAR 0 14
9446: PPUSH
9447: CALL_OW 74
9451: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9452: LD_ADDR_VAR 0 23
9456: PUSH
9457: LD_INT 22
9459: PUSH
9460: LD_VAR 0 11
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 2
9471: PUSH
9472: LD_INT 59
9474: PUSH
9475: EMPTY
9476: LIST
9477: PUSH
9478: LD_INT 21
9480: PUSH
9481: LD_INT 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 2
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: PPUSH
9511: CALL_OW 69
9515: PPUSH
9516: LD_VAR 0 14
9520: PPUSH
9521: CALL_OW 74
9525: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9526: LD_VAR 0 14
9530: PPUSH
9531: LD_VAR 0 22
9535: PPUSH
9536: CALL_OW 296
9540: PUSH
9541: LD_INT 8
9543: PLUS
9544: PUSH
9545: LD_VAR 0 14
9549: PPUSH
9550: LD_VAR 0 23
9554: PPUSH
9555: CALL_OW 296
9559: LESS
9560: IFFALSE 9578
// begin ComAttackUnit ( i , target1 ) ;
9562: LD_VAR 0 14
9566: PPUSH
9567: LD_VAR 0 22
9571: PPUSH
9572: CALL_OW 115
// end else
9576: GO 9592
// begin ComAttackUnit ( i , target2 ) ;
9578: LD_VAR 0 14
9582: PPUSH
9583: LD_VAR 0 23
9587: PPUSH
9588: CALL_OW 115
// end ; end ;
9592: GO 9417
9594: POP
9595: POP
// until soldiersOK_list = [ ] ;
9596: LD_VAR 0 19
9600: PUSH
9601: EMPTY
9602: EQUAL
9603: IFFALSE 8981
// end ; if strategy = 2 then
9605: LD_VAR 0 12
9609: PUSH
9610: LD_INT 2
9612: EQUAL
9613: IFFALSE 10318
// begin repeat wait ( 0 0$1 ) ;
9615: LD_INT 35
9617: PPUSH
9618: CALL_OW 67
// for i in soldiersOK_list do
9622: LD_ADDR_VAR 0 14
9626: PUSH
9627: LD_VAR 0 19
9631: PUSH
9632: FOR_IN
9633: IFFALSE 9667
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9635: LD_VAR 0 14
9639: PPUSH
9640: LD_INT 91
9642: PPUSH
9643: LD_INT 63
9645: PPUSH
9646: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9650: LD_VAR 0 14
9654: PPUSH
9655: LD_INT 75
9657: PPUSH
9658: LD_INT 33
9660: PPUSH
9661: CALL_OW 174
// end ;
9665: GO 9632
9667: POP
9668: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
9669: LD_INT 13
9671: PPUSH
9672: LD_INT 22
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PPUSH
9684: CALL_OW 70
9688: PUSH
9689: LD_INT 2
9691: GREATER
9692: IFFALSE 9615
// repeat wait ( 0 0$3 ) ;
9694: LD_INT 105
9696: PPUSH
9697: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9701: LD_ADDR_VAR 0 17
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_VAR 0 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 1
9720: PUSH
9721: LD_INT 3
9723: PUSH
9724: LD_INT 24
9726: PUSH
9727: LD_INT 550
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 24
9740: PUSH
9741: LD_INT 250
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PPUSH
9757: CALL_OW 69
9761: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9762: LD_ADDR_VAR 0 19
9766: PUSH
9767: LD_INT 22
9769: PUSH
9770: LD_VAR 0 1
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: LD_INT 25
9784: PUSH
9785: LD_INT 1
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 25
9794: PUSH
9795: LD_INT 5
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 25
9804: PUSH
9805: LD_INT 8
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 25
9814: PUSH
9815: LD_INT 9
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 24
9831: PUSH
9832: LD_INT 1000
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: PPUSH
9844: CALL_OW 69
9848: ST_TO_ADDR
// if medicCount > 0 then
9849: LD_VAR 0 7
9853: PUSH
9854: LD_INT 0
9856: GREATER
9857: IFFALSE 9931
// begin if damageUnit_list > 0 then
9859: LD_VAR 0 17
9863: PUSH
9864: LD_INT 0
9866: GREATER
9867: IFFALSE 9931
// begin for i in damageUnit_list do
9869: LD_ADDR_VAR 0 14
9873: PUSH
9874: LD_VAR 0 17
9878: PUSH
9879: FOR_IN
9880: IFFALSE 9929
// begin ComMoveToArea ( i , healArea ) ;
9882: LD_VAR 0 14
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL_OW 113
// for j in medic_list do
9896: LD_ADDR_VAR 0 15
9900: PUSH
9901: LD_VAR 0 18
9905: PUSH
9906: FOR_IN
9907: IFFALSE 9925
// AddComHeal ( j , i ) ;
9909: LD_VAR 0 15
9913: PPUSH
9914: LD_VAR 0 14
9918: PPUSH
9919: CALL_OW 188
9923: GO 9906
9925: POP
9926: POP
// end ;
9927: GO 9879
9929: POP
9930: POP
// end ; end ; for i in soldiersOK_list do
9931: LD_ADDR_VAR 0 14
9935: PUSH
9936: LD_VAR 0 19
9940: PUSH
9941: FOR_IN
9942: IFFALSE 10118
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9944: LD_ADDR_VAR 0 22
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_VAR 0 11
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 69
9965: PPUSH
9966: LD_VAR 0 14
9970: PPUSH
9971: CALL_OW 74
9975: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9976: LD_ADDR_VAR 0 23
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_VAR 0 11
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 59
9998: PUSH
9999: EMPTY
10000: LIST
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: EMPTY
10033: LIST
10034: PPUSH
10035: CALL_OW 69
10039: PPUSH
10040: LD_VAR 0 14
10044: PPUSH
10045: CALL_OW 74
10049: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10050: LD_VAR 0 14
10054: PPUSH
10055: LD_VAR 0 22
10059: PPUSH
10060: CALL_OW 296
10064: PUSH
10065: LD_INT 8
10067: PLUS
10068: PUSH
10069: LD_VAR 0 14
10073: PPUSH
10074: LD_VAR 0 23
10078: PPUSH
10079: CALL_OW 296
10083: LESS
10084: IFFALSE 10102
// begin ComAttackUnit ( i , target1 ) ;
10086: LD_VAR 0 14
10090: PPUSH
10091: LD_VAR 0 22
10095: PPUSH
10096: CALL_OW 115
// end else
10100: GO 10116
// begin ComAttackUnit ( i , target2 ) ;
10102: LD_VAR 0 14
10106: PPUSH
10107: LD_VAR 0 23
10111: PPUSH
10112: CALL_OW 115
// end ; end ;
10116: GO 9941
10118: POP
10119: POP
// for i in soldiersOK_list do
10120: LD_ADDR_VAR 0 14
10124: PUSH
10125: LD_VAR 0 19
10129: PUSH
10130: FOR_IN
10131: IFFALSE 10307
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10133: LD_ADDR_VAR 0 22
10137: PUSH
10138: LD_INT 22
10140: PUSH
10141: LD_VAR 0 11
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PPUSH
10150: CALL_OW 69
10154: PPUSH
10155: LD_VAR 0 14
10159: PPUSH
10160: CALL_OW 74
10164: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10165: LD_ADDR_VAR 0 23
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_VAR 0 11
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 2
10184: PUSH
10185: LD_INT 59
10187: PUSH
10188: EMPTY
10189: LIST
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 1
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 21
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PPUSH
10229: LD_VAR 0 14
10233: PPUSH
10234: CALL_OW 74
10238: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10239: LD_VAR 0 14
10243: PPUSH
10244: LD_VAR 0 22
10248: PPUSH
10249: CALL_OW 296
10253: PUSH
10254: LD_INT 8
10256: PLUS
10257: PUSH
10258: LD_VAR 0 14
10262: PPUSH
10263: LD_VAR 0 23
10267: PPUSH
10268: CALL_OW 296
10272: LESS
10273: IFFALSE 10291
// begin ComAttackUnit ( i , target1 ) ;
10275: LD_VAR 0 14
10279: PPUSH
10280: LD_VAR 0 22
10284: PPUSH
10285: CALL_OW 115
// end else
10289: GO 10305
// begin ComAttackUnit ( i , target2 ) ;
10291: LD_VAR 0 14
10295: PPUSH
10296: LD_VAR 0 23
10300: PPUSH
10301: CALL_OW 115
// end ; end ;
10305: GO 10130
10307: POP
10308: POP
// until soldiersOK_list = [ ] ;
10309: LD_VAR 0 19
10313: PUSH
10314: EMPTY
10315: EQUAL
10316: IFFALSE 9694
// end ; if strategy = 3 then
10318: LD_VAR 0 12
10322: PUSH
10323: LD_INT 3
10325: EQUAL
10326: IFFALSE 11061
// begin repeat wait ( 0 0$3 ) ;
10328: LD_INT 105
10330: PPUSH
10331: CALL_OW 67
// for i in soldiersOK_list do
10335: LD_ADDR_VAR 0 14
10339: PUSH
10340: LD_VAR 0 19
10344: PUSH
10345: FOR_IN
10346: IFFALSE 10410
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
10348: LD_VAR 0 14
10352: PPUSH
10353: LD_INT 63
10355: PPUSH
10356: LD_INT 71
10358: PPUSH
10359: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
10363: LD_VAR 0 14
10367: PPUSH
10368: LD_INT 35
10370: PPUSH
10371: LD_INT 44
10373: PPUSH
10374: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
10378: LD_VAR 0 14
10382: PPUSH
10383: LD_INT 23
10385: PPUSH
10386: LD_INT 18
10388: PPUSH
10389: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
10393: LD_VAR 0 14
10397: PPUSH
10398: LD_INT 26
10400: PPUSH
10401: LD_INT 12
10403: PPUSH
10404: CALL_OW 174
// end ;
10408: GO 10345
10410: POP
10411: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
10412: LD_INT 14
10414: PPUSH
10415: LD_INT 22
10417: PUSH
10418: LD_VAR 0 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 70
10431: PUSH
10432: LD_INT 2
10434: GREATER
10435: IFFALSE 10328
// repeat wait ( 0 0$1 ) ;
10437: LD_INT 35
10439: PPUSH
10440: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10444: LD_ADDR_VAR 0 17
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_VAR 0 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: LD_INT 3
10466: PUSH
10467: LD_INT 24
10469: PUSH
10470: LD_INT 550
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 24
10483: PUSH
10484: LD_INT 250
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PPUSH
10500: CALL_OW 69
10504: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10505: LD_ADDR_VAR 0 19
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_VAR 0 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: LD_INT 25
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 5
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 8
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 25
10557: PUSH
10558: LD_INT 9
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 24
10574: PUSH
10575: LD_INT 1000
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: PPUSH
10587: CALL_OW 69
10591: ST_TO_ADDR
// if medicCount > 0 then
10592: LD_VAR 0 7
10596: PUSH
10597: LD_INT 0
10599: GREATER
10600: IFFALSE 10674
// begin if damageUnit_list > 0 then
10602: LD_VAR 0 17
10606: PUSH
10607: LD_INT 0
10609: GREATER
10610: IFFALSE 10674
// begin for i in damageUnit_list do
10612: LD_ADDR_VAR 0 14
10616: PUSH
10617: LD_VAR 0 17
10621: PUSH
10622: FOR_IN
10623: IFFALSE 10672
// begin ComMoveToArea ( i , healArea ) ;
10625: LD_VAR 0 14
10629: PPUSH
10630: LD_VAR 0 10
10634: PPUSH
10635: CALL_OW 113
// for j in medic_list do
10639: LD_ADDR_VAR 0 15
10643: PUSH
10644: LD_VAR 0 18
10648: PUSH
10649: FOR_IN
10650: IFFALSE 10668
// AddComHeal ( j , i ) ;
10652: LD_VAR 0 15
10656: PPUSH
10657: LD_VAR 0 14
10661: PPUSH
10662: CALL_OW 188
10666: GO 10649
10668: POP
10669: POP
// end ;
10670: GO 10622
10672: POP
10673: POP
// end ; end ; for i in soldiersOK_list do
10674: LD_ADDR_VAR 0 14
10678: PUSH
10679: LD_VAR 0 19
10683: PUSH
10684: FOR_IN
10685: IFFALSE 10861
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10687: LD_ADDR_VAR 0 22
10691: PUSH
10692: LD_INT 22
10694: PUSH
10695: LD_VAR 0 11
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 14
10713: PPUSH
10714: CALL_OW 74
10718: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10719: LD_ADDR_VAR 0 23
10723: PUSH
10724: LD_INT 22
10726: PUSH
10727: LD_VAR 0 11
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 59
10741: PUSH
10742: EMPTY
10743: LIST
10744: PUSH
10745: LD_INT 21
10747: PUSH
10748: LD_INT 1
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 21
10757: PUSH
10758: LD_INT 2
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: EMPTY
10776: LIST
10777: PPUSH
10778: CALL_OW 69
10782: PPUSH
10783: LD_VAR 0 14
10787: PPUSH
10788: CALL_OW 74
10792: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10793: LD_VAR 0 14
10797: PPUSH
10798: LD_VAR 0 22
10802: PPUSH
10803: CALL_OW 296
10807: PUSH
10808: LD_INT 8
10810: PLUS
10811: PUSH
10812: LD_VAR 0 14
10816: PPUSH
10817: LD_VAR 0 23
10821: PPUSH
10822: CALL_OW 296
10826: LESS
10827: IFFALSE 10845
// begin ComAttackUnit ( i , target1 ) ;
10829: LD_VAR 0 14
10833: PPUSH
10834: LD_VAR 0 22
10838: PPUSH
10839: CALL_OW 115
// end else
10843: GO 10859
// begin ComAttackUnit ( i , target2 ) ;
10845: LD_VAR 0 14
10849: PPUSH
10850: LD_VAR 0 23
10854: PPUSH
10855: CALL_OW 115
// end ; end ;
10859: GO 10684
10861: POP
10862: POP
// for i in soldiersOK_list do
10863: LD_ADDR_VAR 0 14
10867: PUSH
10868: LD_VAR 0 19
10872: PUSH
10873: FOR_IN
10874: IFFALSE 11050
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10876: LD_ADDR_VAR 0 22
10880: PUSH
10881: LD_INT 22
10883: PUSH
10884: LD_VAR 0 11
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PPUSH
10893: CALL_OW 69
10897: PPUSH
10898: LD_VAR 0 14
10902: PPUSH
10903: CALL_OW 74
10907: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10908: LD_ADDR_VAR 0 23
10912: PUSH
10913: LD_INT 22
10915: PUSH
10916: LD_VAR 0 11
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: LD_INT 59
10930: PUSH
10931: EMPTY
10932: LIST
10933: PUSH
10934: LD_INT 21
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 21
10946: PUSH
10947: LD_INT 2
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: PPUSH
10967: CALL_OW 69
10971: PPUSH
10972: LD_VAR 0 14
10976: PPUSH
10977: CALL_OW 74
10981: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10982: LD_VAR 0 14
10986: PPUSH
10987: LD_VAR 0 22
10991: PPUSH
10992: CALL_OW 296
10996: PUSH
10997: LD_INT 8
10999: PLUS
11000: PUSH
11001: LD_VAR 0 14
11005: PPUSH
11006: LD_VAR 0 23
11010: PPUSH
11011: CALL_OW 296
11015: LESS
11016: IFFALSE 11034
// begin ComAttackUnit ( i , target1 ) ;
11018: LD_VAR 0 14
11022: PPUSH
11023: LD_VAR 0 22
11027: PPUSH
11028: CALL_OW 115
// end else
11032: GO 11048
// begin ComAttackUnit ( i , target2 ) ;
11034: LD_VAR 0 14
11038: PPUSH
11039: LD_VAR 0 23
11043: PPUSH
11044: CALL_OW 115
// end ; end ;
11048: GO 10873
11050: POP
11051: POP
// until soldiersOK_list = [ ] ;
11052: LD_VAR 0 19
11056: PUSH
11057: EMPTY
11058: EQUAL
11059: IFFALSE 10437
// end ; end ;
11061: LD_VAR 0 13
11065: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
11066: LD_INT 0
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
11073: PPUSH
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
11078: PPUSH
// amChassisTab = [ ] ;
11079: LD_ADDR_VAR 0 19
11083: PUSH
11084: EMPTY
11085: ST_TO_ADDR
// arChassisTab = [ ] ;
11086: LD_ADDR_VAR 0 18
11090: PUSH
11091: EMPTY
11092: ST_TO_ADDR
// ruChassisTab = [ ] ;
11093: LD_ADDR_VAR 0 17
11097: PUSH
11098: EMPTY
11099: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11100: LD_INT 35
11102: PPUSH
11103: CALL_OW 67
// if nation = 1 then
11107: LD_VAR 0 5
11111: PUSH
11112: LD_INT 1
11114: EQUAL
11115: IFFALSE 11606
// begin uc_side = side ;
11117: LD_ADDR_OWVAR 20
11121: PUSH
11122: LD_VAR 0 2
11126: ST_TO_ADDR
// uc_nation = nation ;
11127: LD_ADDR_OWVAR 21
11131: PUSH
11132: LD_VAR 0 5
11136: ST_TO_ADDR
// vc_engine = vehengine ;
11137: LD_ADDR_OWVAR 39
11141: PUSH
11142: LD_VAR 0 6
11146: ST_TO_ADDR
// vc_control = vehcontrol ;
11147: LD_ADDR_OWVAR 38
11151: PUSH
11152: LD_VAR 0 7
11156: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
11157: LD_ADDR_OWVAR 40
11161: PUSH
11162: LD_VAR 0 10
11166: PUSH
11167: LD_INT 1
11169: PPUSH
11170: LD_VAR 0 10
11174: PPUSH
11175: CALL_OW 12
11179: ARRAY
11180: ST_TO_ADDR
// for j = 1 to AMWeapon do
11181: LD_ADDR_VAR 0 14
11185: PUSH
11186: DOUBLE
11187: LD_INT 1
11189: DEC
11190: ST_TO_ADDR
11191: LD_VAR 0 10
11195: PUSH
11196: FOR_TO
11197: IFFALSE 11498
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
11199: LD_VAR 0 10
11203: PUSH
11204: LD_VAR 0 14
11208: ARRAY
11209: PUSH
11210: LD_INT 2
11212: EQUAL
11213: PUSH
11214: LD_VAR 0 10
11218: PUSH
11219: LD_VAR 0 14
11223: ARRAY
11224: PUSH
11225: LD_INT 3
11227: EQUAL
11228: OR
11229: IFFALSE 11282
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
11231: LD_ADDR_VAR 0 19
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: LD_INT 3
11244: PUSH
11245: LD_INT 4
11247: PUSH
11248: LD_INT 5
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
11258: LD_ADDR_OWVAR 37
11262: PUSH
11263: LD_VAR 0 19
11267: PUSH
11268: LD_INT 1
11270: PPUSH
11271: LD_VAR 0 19
11275: PPUSH
11276: CALL_OW 12
11280: ARRAY
11281: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
11282: LD_VAR 0 10
11286: PUSH
11287: LD_VAR 0 14
11291: ARRAY
11292: PUSH
11293: LD_INT 4
11295: EQUAL
11296: PUSH
11297: LD_VAR 0 10
11301: PUSH
11302: LD_VAR 0 14
11306: ARRAY
11307: PUSH
11308: LD_INT 5
11310: EQUAL
11311: OR
11312: PUSH
11313: LD_VAR 0 10
11317: PUSH
11318: LD_VAR 0 14
11322: ARRAY
11323: PUSH
11324: LD_INT 9
11326: EQUAL
11327: OR
11328: PUSH
11329: LD_VAR 0 10
11333: PUSH
11334: LD_VAR 0 14
11338: ARRAY
11339: PUSH
11340: LD_INT 11
11342: EQUAL
11343: OR
11344: PUSH
11345: LD_VAR 0 10
11349: PUSH
11350: LD_VAR 0 14
11354: ARRAY
11355: PUSH
11356: LD_INT 7
11358: EQUAL
11359: OR
11360: IFFALSE 11409
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
11362: LD_ADDR_VAR 0 19
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: LD_INT 3
11372: PUSH
11373: LD_INT 4
11375: PUSH
11376: LD_INT 5
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
11385: LD_ADDR_OWVAR 37
11389: PUSH
11390: LD_VAR 0 19
11394: PUSH
11395: LD_INT 1
11397: PPUSH
11398: LD_VAR 0 19
11402: PPUSH
11403: CALL_OW 12
11407: ARRAY
11408: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
11409: LD_VAR 0 10
11413: PUSH
11414: LD_VAR 0 14
11418: ARRAY
11419: PUSH
11420: LD_INT 8
11422: EQUAL
11423: PUSH
11424: LD_VAR 0 10
11428: PUSH
11429: LD_VAR 0 14
11433: ARRAY
11434: PUSH
11435: LD_INT 6
11437: EQUAL
11438: OR
11439: PUSH
11440: LD_VAR 0 10
11444: PUSH
11445: LD_VAR 0 14
11449: ARRAY
11450: PUSH
11451: LD_INT 10
11453: EQUAL
11454: OR
11455: IFFALSE 11496
// begin amChassisTab = [ 4 , 5 ] ;
11457: LD_ADDR_VAR 0 19
11461: PUSH
11462: LD_INT 4
11464: PUSH
11465: LD_INT 5
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
11472: LD_ADDR_OWVAR 37
11476: PUSH
11477: LD_VAR 0 19
11481: PUSH
11482: LD_INT 1
11484: PPUSH
11485: LD_VAR 0 19
11489: PPUSH
11490: CALL_OW 12
11494: ARRAY
11495: ST_TO_ADDR
// end ; end ;
11496: GO 11196
11498: POP
11499: POP
// veh = CreateVehicle ;
11500: LD_ADDR_VAR 0 16
11504: PUSH
11505: CALL_OW 45
11509: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11510: LD_VAR 0 16
11514: PPUSH
11515: LD_VAR 0 1
11519: PPUSH
11520: LD_INT 0
11522: PPUSH
11523: CALL_OW 49
// if vehControl = 1 then
11527: LD_VAR 0 7
11531: PUSH
11532: LD_INT 1
11534: EQUAL
11535: IFFALSE 11592
// begin hc_gallery =  ;
11537: LD_ADDR_OWVAR 33
11541: PUSH
11542: LD_STRING 
11544: ST_TO_ADDR
// hc_name =  ;
11545: LD_ADDR_OWVAR 26
11549: PUSH
11550: LD_STRING 
11552: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11553: LD_INT 0
11555: PPUSH
11556: LD_INT 3
11558: PPUSH
11559: LD_VAR 0 4
11563: PPUSH
11564: CALL_OW 380
// un = CreateHuman ;
11568: LD_ADDR_VAR 0 15
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11578: LD_VAR 0 15
11582: PPUSH
11583: LD_VAR 0 16
11587: PPUSH
11588: CALL_OW 52
// end ; i = i + 1 ;
11592: LD_ADDR_VAR 0 13
11596: PUSH
11597: LD_VAR 0 13
11601: PUSH
11602: LD_INT 1
11604: PLUS
11605: ST_TO_ADDR
// end ; if nation = 2 then
11606: LD_VAR 0 5
11610: PUSH
11611: LD_INT 2
11613: EQUAL
11614: IFFALSE 12038
// begin uc_side = side ;
11616: LD_ADDR_OWVAR 20
11620: PUSH
11621: LD_VAR 0 2
11625: ST_TO_ADDR
// uc_nation = nation ;
11626: LD_ADDR_OWVAR 21
11630: PUSH
11631: LD_VAR 0 5
11635: ST_TO_ADDR
// vc_engine = vehengine ;
11636: LD_ADDR_OWVAR 39
11640: PUSH
11641: LD_VAR 0 6
11645: ST_TO_ADDR
// vc_control = vehcontrol ;
11646: LD_ADDR_OWVAR 38
11650: PUSH
11651: LD_VAR 0 7
11655: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
11656: LD_ADDR_OWVAR 40
11660: PUSH
11661: LD_VAR 0 9
11665: PUSH
11666: LD_INT 1
11668: PPUSH
11669: LD_VAR 0 9
11673: PPUSH
11674: CALL_OW 12
11678: ARRAY
11679: ST_TO_ADDR
// for j = 1 to ARWeapons do
11680: LD_ADDR_VAR 0 14
11684: PUSH
11685: DOUBLE
11686: LD_INT 1
11688: DEC
11689: ST_TO_ADDR
11690: LD_VAR 0 9
11694: PUSH
11695: FOR_TO
11696: IFFALSE 11930
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
11698: LD_VAR 0 9
11702: PUSH
11703: LD_VAR 0 14
11707: ARRAY
11708: PUSH
11709: LD_INT 24
11711: EQUAL
11712: PUSH
11713: LD_VAR 0 9
11717: PUSH
11718: LD_VAR 0 14
11722: ARRAY
11723: PUSH
11724: LD_INT 22
11726: EQUAL
11727: OR
11728: PUSH
11729: LD_VAR 0 9
11733: PUSH
11734: LD_VAR 0 14
11738: ARRAY
11739: PUSH
11740: LD_INT 23
11742: EQUAL
11743: OR
11744: PUSH
11745: LD_VAR 0 9
11749: PUSH
11750: LD_VAR 0 14
11754: ARRAY
11755: PUSH
11756: LD_INT 30
11758: EQUAL
11759: OR
11760: IFFALSE 11809
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
11762: LD_ADDR_VAR 0 18
11766: PUSH
11767: LD_INT 11
11769: PUSH
11770: LD_INT 12
11772: PUSH
11773: LD_INT 13
11775: PUSH
11776: LD_INT 14
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
11785: LD_ADDR_OWVAR 37
11789: PUSH
11790: LD_VAR 0 18
11794: PUSH
11795: LD_INT 1
11797: PPUSH
11798: LD_VAR 0 18
11802: PPUSH
11803: CALL_OW 12
11807: ARRAY
11808: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
11809: LD_VAR 0 9
11813: PUSH
11814: LD_VAR 0 14
11818: ARRAY
11819: PUSH
11820: LD_INT 29
11822: EQUAL
11823: PUSH
11824: LD_VAR 0 9
11828: PUSH
11829: LD_VAR 0 14
11833: ARRAY
11834: PUSH
11835: LD_INT 28
11837: EQUAL
11838: OR
11839: PUSH
11840: LD_VAR 0 9
11844: PUSH
11845: LD_VAR 0 14
11849: ARRAY
11850: PUSH
11851: LD_INT 27
11853: EQUAL
11854: OR
11855: PUSH
11856: LD_VAR 0 9
11860: PUSH
11861: LD_VAR 0 14
11865: ARRAY
11866: PUSH
11867: LD_INT 26
11869: EQUAL
11870: OR
11871: PUSH
11872: LD_VAR 0 9
11876: PUSH
11877: LD_VAR 0 14
11881: ARRAY
11882: PUSH
11883: LD_INT 25
11885: EQUAL
11886: OR
11887: IFFALSE 11928
// begin arChassisTab = [ 13 , 14 ] ;
11889: LD_ADDR_VAR 0 18
11893: PUSH
11894: LD_INT 13
11896: PUSH
11897: LD_INT 14
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
11904: LD_ADDR_OWVAR 37
11908: PUSH
11909: LD_VAR 0 18
11913: PUSH
11914: LD_INT 1
11916: PPUSH
11917: LD_VAR 0 18
11921: PPUSH
11922: CALL_OW 12
11926: ARRAY
11927: ST_TO_ADDR
// end ; end ;
11928: GO 11695
11930: POP
11931: POP
// veh = CreateVehicle ;
11932: LD_ADDR_VAR 0 16
11936: PUSH
11937: CALL_OW 45
11941: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11942: LD_VAR 0 16
11946: PPUSH
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_INT 0
11954: PPUSH
11955: CALL_OW 49
// if vehcontrol = 1 then
11959: LD_VAR 0 7
11963: PUSH
11964: LD_INT 1
11966: EQUAL
11967: IFFALSE 12024
// begin hc_gallery =  ;
11969: LD_ADDR_OWVAR 33
11973: PUSH
11974: LD_STRING 
11976: ST_TO_ADDR
// hc_name =  ;
11977: LD_ADDR_OWVAR 26
11981: PUSH
11982: LD_STRING 
11984: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11985: LD_INT 0
11987: PPUSH
11988: LD_INT 3
11990: PPUSH
11991: LD_VAR 0 4
11995: PPUSH
11996: CALL_OW 380
// un = CreateHuman ;
12000: LD_ADDR_VAR 0 15
12004: PUSH
12005: CALL_OW 44
12009: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12010: LD_VAR 0 15
12014: PPUSH
12015: LD_VAR 0 16
12019: PPUSH
12020: CALL_OW 52
// end ; i = i + 1 ;
12024: LD_ADDR_VAR 0 13
12028: PUSH
12029: LD_VAR 0 13
12033: PUSH
12034: LD_INT 1
12036: PLUS
12037: ST_TO_ADDR
// end ; if nation = 3 then
12038: LD_VAR 0 5
12042: PUSH
12043: LD_INT 3
12045: EQUAL
12046: IFFALSE 12438
// begin uc_side = side ;
12048: LD_ADDR_OWVAR 20
12052: PUSH
12053: LD_VAR 0 2
12057: ST_TO_ADDR
// uc_nation = nation ;
12058: LD_ADDR_OWVAR 21
12062: PUSH
12063: LD_VAR 0 5
12067: ST_TO_ADDR
// vc_engine = vehengine ;
12068: LD_ADDR_OWVAR 39
12072: PUSH
12073: LD_VAR 0 6
12077: ST_TO_ADDR
// vc_control = vehcontrol ;
12078: LD_ADDR_OWVAR 38
12082: PUSH
12083: LD_VAR 0 7
12087: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
12088: LD_ADDR_OWVAR 40
12092: PUSH
12093: LD_VAR 0 8
12097: PUSH
12098: LD_INT 1
12100: PPUSH
12101: LD_VAR 0 8
12105: PPUSH
12106: CALL_OW 12
12110: ARRAY
12111: ST_TO_ADDR
// for j = 1 to RuWeapons do
12112: LD_ADDR_VAR 0 14
12116: PUSH
12117: DOUBLE
12118: LD_INT 1
12120: DEC
12121: ST_TO_ADDR
12122: LD_VAR 0 8
12126: PUSH
12127: FOR_TO
12128: IFFALSE 12330
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
12130: LD_VAR 0 8
12134: PUSH
12135: LD_VAR 0 14
12139: ARRAY
12140: PUSH
12141: LD_INT 42
12143: EQUAL
12144: PUSH
12145: LD_VAR 0 8
12149: PUSH
12150: LD_VAR 0 14
12154: ARRAY
12155: PUSH
12156: LD_INT 43
12158: EQUAL
12159: OR
12160: PUSH
12161: LD_VAR 0 8
12165: PUSH
12166: LD_VAR 0 14
12170: ARRAY
12171: PUSH
12172: LD_INT 44
12174: EQUAL
12175: OR
12176: PUSH
12177: LD_VAR 0 8
12181: PUSH
12182: LD_VAR 0 14
12186: ARRAY
12187: PUSH
12188: LD_INT 45
12190: EQUAL
12191: OR
12192: PUSH
12193: LD_VAR 0 8
12197: PUSH
12198: LD_VAR 0 14
12202: ARRAY
12203: PUSH
12204: LD_INT 49
12206: EQUAL
12207: OR
12208: IFFALSE 12257
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
12210: LD_ADDR_VAR 0 17
12214: PUSH
12215: LD_INT 21
12217: PUSH
12218: LD_INT 22
12220: PUSH
12221: LD_INT 23
12223: PUSH
12224: LD_INT 24
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
12233: LD_ADDR_OWVAR 37
12237: PUSH
12238: LD_VAR 0 17
12242: PUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_VAR 0 17
12250: PPUSH
12251: CALL_OW 12
12255: ARRAY
12256: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
12257: LD_VAR 0 8
12261: PUSH
12262: LD_VAR 0 14
12266: ARRAY
12267: PUSH
12268: LD_INT 46
12270: EQUAL
12271: PUSH
12272: LD_VAR 0 8
12276: PUSH
12277: LD_VAR 0 14
12281: ARRAY
12282: PUSH
12283: LD_INT 47
12285: EQUAL
12286: OR
12287: IFFALSE 12328
// begin ruChassisTab = [ 23 , 24 ] ;
12289: LD_ADDR_VAR 0 17
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 24
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
12304: LD_ADDR_OWVAR 37
12308: PUSH
12309: LD_VAR 0 17
12313: PUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_VAR 0 17
12321: PPUSH
12322: CALL_OW 12
12326: ARRAY
12327: ST_TO_ADDR
// end ; end ;
12328: GO 12127
12330: POP
12331: POP
// veh = CreateVehicle ;
12332: LD_ADDR_VAR 0 16
12336: PUSH
12337: CALL_OW 45
12341: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12342: LD_VAR 0 16
12346: PPUSH
12347: LD_VAR 0 1
12351: PPUSH
12352: LD_INT 0
12354: PPUSH
12355: CALL_OW 49
// if vehcontrol = 1 then
12359: LD_VAR 0 7
12363: PUSH
12364: LD_INT 1
12366: EQUAL
12367: IFFALSE 12424
// begin hc_gallery =  ;
12369: LD_ADDR_OWVAR 33
12373: PUSH
12374: LD_STRING 
12376: ST_TO_ADDR
// hc_name =  ;
12377: LD_ADDR_OWVAR 26
12381: PUSH
12382: LD_STRING 
12384: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12385: LD_INT 0
12387: PPUSH
12388: LD_INT 3
12390: PPUSH
12391: LD_VAR 0 4
12395: PPUSH
12396: CALL_OW 380
// un = CreateHuman ;
12400: LD_ADDR_VAR 0 15
12404: PUSH
12405: CALL_OW 44
12409: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12410: LD_VAR 0 15
12414: PPUSH
12415: LD_VAR 0 16
12419: PPUSH
12420: CALL_OW 52
// end ; i = i + 1 ;
12424: LD_ADDR_VAR 0 13
12428: PUSH
12429: LD_VAR 0 13
12433: PUSH
12434: LD_INT 1
12436: PLUS
12437: ST_TO_ADDR
// end ; until i = vehCount ;
12438: LD_VAR 0 13
12442: PUSH
12443: LD_VAR 0 3
12447: EQUAL
12448: IFFALSE 11100
// repeat wait ( 0 0$1 ) ;
12450: LD_INT 35
12452: PPUSH
12453: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
12457: LD_ADDR_VAR 0 20
12461: PUSH
12462: LD_INT 22
12464: PUSH
12465: LD_VAR 0 2
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 21
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 24
12486: PUSH
12487: LD_INT 661
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 69
12503: ST_TO_ADDR
// if vehicleOK_list > 0 then
12504: LD_VAR 0 20
12508: PUSH
12509: LD_INT 0
12511: GREATER
12512: IFFALSE 12703
// begin for i in vehicleOK_list do
12514: LD_ADDR_VAR 0 13
12518: PUSH
12519: LD_VAR 0 20
12523: PUSH
12524: FOR_IN
12525: IFFALSE 12701
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12527: LD_ADDR_VAR 0 21
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_VAR 0 11
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: PPUSH
12549: LD_VAR 0 13
12553: PPUSH
12554: CALL_OW 74
12558: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12559: LD_ADDR_VAR 0 22
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_VAR 0 11
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 2
12578: PUSH
12579: LD_INT 59
12581: PUSH
12582: EMPTY
12583: LIST
12584: PUSH
12585: LD_INT 21
12587: PUSH
12588: LD_INT 1
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 21
12597: PUSH
12598: LD_INT 2
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: PPUSH
12618: CALL_OW 69
12622: PPUSH
12623: LD_VAR 0 13
12627: PPUSH
12628: CALL_OW 74
12632: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12633: LD_VAR 0 13
12637: PPUSH
12638: LD_VAR 0 21
12642: PPUSH
12643: CALL_OW 296
12647: PUSH
12648: LD_INT 8
12650: PLUS
12651: PUSH
12652: LD_VAR 0 13
12656: PPUSH
12657: LD_VAR 0 22
12661: PPUSH
12662: CALL_OW 296
12666: LESS
12667: IFFALSE 12685
// begin ComAttackUnit ( i , target1 ) ;
12669: LD_VAR 0 13
12673: PPUSH
12674: LD_VAR 0 21
12678: PPUSH
12679: CALL_OW 115
// end else
12683: GO 12699
// begin ComAttackUnit ( i , target2 ) ;
12685: LD_VAR 0 13
12689: PPUSH
12690: LD_VAR 0 22
12694: PPUSH
12695: CALL_OW 115
// end ; end ;
12699: GO 12524
12701: POP
12702: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
12703: LD_INT 22
12705: PUSH
12706: LD_VAR 0 2
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 21
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PPUSH
12729: CALL_OW 69
12733: PUSH
12734: LD_INT 0
12736: EQUAL
12737: IFFALSE 12450
// end ;
12739: LD_VAR 0 12
12743: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
12744: LD_INT 0
12746: PPUSH
12747: PPUSH
12748: PPUSH
12749: PPUSH
12750: PPUSH
12751: PPUSH
12752: PPUSH
12753: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12754: LD_ADDR_VAR 0 7
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_VAR 0 1
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 1
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: LD_INT 24
12779: PUSH
12780: LD_INT 550
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 24
12793: PUSH
12794: LD_INT 250
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PPUSH
12810: CALL_OW 69
12814: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12815: LD_ADDR_VAR 0 8
12819: PUSH
12820: LD_INT 22
12822: PUSH
12823: LD_VAR 0 1
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 2
12834: PUSH
12835: LD_INT 25
12837: PUSH
12838: LD_INT 1
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 25
12847: PUSH
12848: LD_INT 5
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: LD_INT 8
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 25
12867: PUSH
12868: LD_INT 9
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 24
12884: PUSH
12885: LD_INT 1000
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: PPUSH
12897: CALL_OW 69
12901: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12902: LD_ADDR_VAR 0 9
12906: PUSH
12907: LD_INT 22
12909: PUSH
12910: LD_VAR 0 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 25
12921: PUSH
12922: LD_INT 4
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PPUSH
12933: CALL_OW 69
12937: ST_TO_ADDR
// if medicCount > 0 then
12938: LD_VAR 0 9
12942: PUSH
12943: LD_INT 0
12945: GREATER
12946: IFFALSE 13020
// begin if damageUnit_list > 0 then
12948: LD_VAR 0 7
12952: PUSH
12953: LD_INT 0
12955: GREATER
12956: IFFALSE 13020
// begin for i in damageUnit_list do
12958: LD_ADDR_VAR 0 5
12962: PUSH
12963: LD_VAR 0 7
12967: PUSH
12968: FOR_IN
12969: IFFALSE 13018
// begin ComMoveToArea ( i , healArea ) ;
12971: LD_VAR 0 5
12975: PPUSH
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 113
// for j in medicCount do
12985: LD_ADDR_VAR 0 6
12989: PUSH
12990: LD_VAR 0 9
12994: PUSH
12995: FOR_IN
12996: IFFALSE 13014
// AddComHeal ( j , i ) ;
12998: LD_VAR 0 6
13002: PPUSH
13003: LD_VAR 0 5
13007: PPUSH
13008: CALL_OW 188
13012: GO 12995
13014: POP
13015: POP
// end ;
13016: GO 12968
13018: POP
13019: POP
// end ; end ; if soldiersOK_list > 0 then
13020: LD_VAR 0 8
13024: PUSH
13025: LD_INT 0
13027: GREATER
13028: IFFALSE 13219
// begin for i in soldiersOK_list do
13030: LD_ADDR_VAR 0 5
13034: PUSH
13035: LD_VAR 0 8
13039: PUSH
13040: FOR_IN
13041: IFFALSE 13217
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13043: LD_ADDR_VAR 0 10
13047: PUSH
13048: LD_INT 22
13050: PUSH
13051: LD_VAR 0 3
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 69
13064: PPUSH
13065: LD_VAR 0 5
13069: PPUSH
13070: CALL_OW 74
13074: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13075: LD_ADDR_VAR 0 11
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_VAR 0 3
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 2
13094: PUSH
13095: LD_INT 59
13097: PUSH
13098: EMPTY
13099: LIST
13100: PUSH
13101: LD_INT 21
13103: PUSH
13104: LD_INT 1
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 21
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: PPUSH
13134: CALL_OW 69
13138: PPUSH
13139: LD_VAR 0 5
13143: PPUSH
13144: CALL_OW 74
13148: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13149: LD_VAR 0 5
13153: PPUSH
13154: LD_VAR 0 10
13158: PPUSH
13159: CALL_OW 296
13163: PUSH
13164: LD_INT 8
13166: PLUS
13167: PUSH
13168: LD_VAR 0 5
13172: PPUSH
13173: LD_VAR 0 11
13177: PPUSH
13178: CALL_OW 296
13182: LESS
13183: IFFALSE 13201
// begin ComAttackUnit ( i , target1 ) ;
13185: LD_VAR 0 5
13189: PPUSH
13190: LD_VAR 0 10
13194: PPUSH
13195: CALL_OW 115
// end else
13199: GO 13215
// begin ComAttackUnit ( i , target2 ) ;
13201: LD_VAR 0 5
13205: PPUSH
13206: LD_VAR 0 11
13210: PPUSH
13211: CALL_OW 115
// end ; end ;
13215: GO 13040
13217: POP
13218: POP
// end ; end ; end_of_file
13219: LD_VAR 0 4
13223: RET
// every 1 do var i ;
13224: GO 13226
13226: DISABLE
13227: LD_INT 0
13229: PPUSH
// begin InGameOn ;
13230: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
13234: LD_INT 53
13236: PPUSH
13237: LD_INT 40
13239: PPUSH
13240: CALL_OW 84
// wait ( 0 0$5 ) ;
13244: LD_INT 175
13246: PPUSH
13247: CALL_OW 67
// if gammaCommander = 1 then
13251: LD_EXP 11
13255: PUSH
13256: LD_INT 1
13258: EQUAL
13259: IFFALSE 13270
// CenterNowOnUnits ( Donaldson ) ;
13261: LD_EXP 3
13265: PPUSH
13266: CALL_OW 87
// if gammaCommander = 2 then
13270: LD_EXP 11
13274: PUSH
13275: LD_INT 2
13277: EQUAL
13278: IFFALSE 13289
// CenterNowOnUnits ( Brown ) ;
13280: LD_EXP 2
13284: PPUSH
13285: CALL_OW 87
// if gammaCommander = 3 then
13289: LD_EXP 11
13293: PUSH
13294: LD_INT 3
13296: EQUAL
13297: IFFALSE 13308
// CenterNowOnUnits ( Houten ) ;
13299: LD_EXP 12
13303: PPUSH
13304: CALL_OW 87
// if gammaCommander = 1 then
13308: LD_EXP 11
13312: PUSH
13313: LD_INT 1
13315: EQUAL
13316: IFFALSE 13330
// Say ( Donaldson , D1-Don-1 ) ;
13318: LD_EXP 3
13322: PPUSH
13323: LD_STRING D1-Don-1
13325: PPUSH
13326: CALL_OW 88
// if gammaCommander = 2 then
13330: LD_EXP 11
13334: PUSH
13335: LD_INT 2
13337: EQUAL
13338: IFFALSE 13352
// Say ( Brown , D1-Brown-1 ) ;
13340: LD_EXP 2
13344: PPUSH
13345: LD_STRING D1-Brown-1
13347: PPUSH
13348: CALL_OW 88
// if gammaCommander = 3 then
13352: LD_EXP 11
13356: PUSH
13357: LD_INT 3
13359: EQUAL
13360: IFFALSE 13374
// Say ( Houten , D1-VanH-1 ) ;
13362: LD_EXP 12
13366: PPUSH
13367: LD_STRING D1-VanH-1
13369: PPUSH
13370: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
13374: LD_EXP 21
13378: PPUSH
13379: LD_STRING D1-Har-1
13381: PPUSH
13382: CALL_OW 94
// if gammaCommander = 1 then
13386: LD_EXP 11
13390: PUSH
13391: LD_INT 1
13393: EQUAL
13394: IFFALSE 13408
// Say ( Donaldson , D1-Don-2 ) ;
13396: LD_EXP 3
13400: PPUSH
13401: LD_STRING D1-Don-2
13403: PPUSH
13404: CALL_OW 88
// if gammaCommander = 2 then
13408: LD_EXP 11
13412: PUSH
13413: LD_INT 2
13415: EQUAL
13416: IFFALSE 13430
// Say ( Brown , D1-Brown-2 ) ;
13418: LD_EXP 2
13422: PPUSH
13423: LD_STRING D1-Brown-2
13425: PPUSH
13426: CALL_OW 88
// if gammaCommander = 3 then
13430: LD_EXP 11
13434: PUSH
13435: LD_INT 3
13437: EQUAL
13438: IFFALSE 13452
// Say ( Houten , D1-VanH-2 ) ;
13440: LD_EXP 12
13444: PPUSH
13445: LD_STRING D1-VanH-2
13447: PPUSH
13448: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
13452: LD_EXP 21
13456: PPUSH
13457: LD_STRING D1-Har-2
13459: PPUSH
13460: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
13464: LD_INT 53
13466: PPUSH
13467: LD_INT 40
13469: PPUSH
13470: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
13474: LD_INT 35
13476: PPUSH
13477: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
13481: LD_ADDR_VAR 0 1
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 6
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: PPUSH
13499: CALL_OW 69
13503: PUSH
13504: FOR_IN
13505: IFFALSE 13524
// ComAgressiveMove ( i , 54 , 20 ) ;
13507: LD_VAR 0 1
13511: PPUSH
13512: LD_INT 54
13514: PPUSH
13515: LD_INT 20
13517: PPUSH
13518: CALL_OW 114
13522: GO 13504
13524: POP
13525: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 ;
13526: LD_INT 22
13528: PUSH
13529: LD_INT 6
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 21
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 24
13548: PUSH
13549: LD_INT 250
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PPUSH
13561: CALL_OW 69
13565: PUSH
13566: LD_INT 0
13568: EQUAL
13569: IFFALSE 13474
// InGameOff ;
13571: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
13575: LD_STRING M1
13577: PPUSH
13578: CALL_OW 337
// SaveForQuickRestart ;
13582: CALL_OW 22
// end ;
13586: PPOPN 1
13588: END
// every 1 1$0 do
13589: GO 13591
13591: DISABLE
// begin PrepareSupportFromDelta ;
13592: CALL 1284 0 0
// firstAttack = 1 ;
13596: LD_ADDR_EXP 31
13600: PUSH
13601: LD_INT 1
13603: ST_TO_ADDR
// if IsOk ( Gladstone ) then
13604: LD_EXP 8
13608: PPUSH
13609: CALL_OW 302
13613: IFFALSE 13629
// begin Say ( Gladstone , D2-Glad-1 ) ;
13615: LD_EXP 8
13619: PPUSH
13620: LD_STRING D2-Glad-1
13622: PPUSH
13623: CALL_OW 88
// end else
13627: GO 13722
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
13629: LD_INT 4
13631: PPUSH
13632: LD_INT 22
13634: PUSH
13635: LD_INT 1
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 21
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 25
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 25
13677: PUSH
13678: LD_INT 3
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 25
13687: PUSH
13688: LD_INT 4
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL_OW 70
13711: PPUSH
13712: LD_STRING D2-Sol1-1
13714: PPUSH
13715: LD_STRING D2-FSol1-1
13717: PPUSH
13718: CALL 4493 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
13722: LD_EXP 3
13726: PPUSH
13727: CALL_OW 302
13731: PUSH
13732: LD_EXP 11
13736: PUSH
13737: LD_INT 1
13739: EQUAL
13740: AND
13741: IFFALSE 13755
// Say ( Donaldson , D2-Don-1 ) ;
13743: LD_EXP 3
13747: PPUSH
13748: LD_STRING D2-Don-1
13750: PPUSH
13751: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
13755: LD_EXP 2
13759: PPUSH
13760: CALL_OW 302
13764: PUSH
13765: LD_EXP 11
13769: PUSH
13770: LD_INT 2
13772: EQUAL
13773: AND
13774: IFFALSE 13788
// Say ( Brown , D2-Brown-1 ) ;
13776: LD_EXP 2
13780: PPUSH
13781: LD_STRING D2-Brown-1
13783: PPUSH
13784: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
13788: LD_EXP 12
13792: PPUSH
13793: CALL_OW 302
13797: PUSH
13798: LD_EXP 11
13802: PUSH
13803: LD_INT 3
13805: EQUAL
13806: AND
13807: IFFALSE 13821
// Say ( Houten , D2-VanH-1 ) ;
13809: LD_EXP 12
13813: PPUSH
13814: LD_STRING D2-VanH-1
13816: PPUSH
13817: CALL_OW 88
// end ;
13821: END
// every 0 0$1 do
13822: GO 13824
13824: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) / 2 ) ;
13825: LD_STRING 07_time
13827: PPUSH
13828: LD_INT 0
13830: PPUSH
13831: CALL_OW 30
13835: PUSH
13836: LD_INT 2
13838: DIVREAL
13839: PPUSH
13840: CALL_OW 67
// PrepareMacmillanSquad ;
13844: CALL 1696 0 0
// CenterNowOnUnits ( JMM ) ;
13848: LD_EXP 1
13852: PPUSH
13853: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
13857: LD_EXP 1
13861: PPUSH
13862: LD_STRING D3-JMM-1
13864: PPUSH
13865: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
13869: LD_EXP 3
13873: PPUSH
13874: CALL_OW 302
13878: PUSH
13879: LD_EXP 11
13883: PUSH
13884: LD_INT 1
13886: EQUAL
13887: AND
13888: IFFALSE 13904
// begin Say ( Donaldson , D3-Don-1 ) ;
13890: LD_EXP 3
13894: PPUSH
13895: LD_STRING D3-Don-1
13897: PPUSH
13898: CALL_OW 88
// end else
13902: GO 13941
// begin if gammaCommander = 1 then
13904: LD_EXP 11
13908: PUSH
13909: LD_INT 1
13911: EQUAL
13912: IFFALSE 13941
// begin DialogRandom ( others_gamma , D3-Sol1-1 , D3-Sol1-1 ) ;
13914: LD_EXP 10
13918: PPUSH
13919: LD_STRING D3-Sol1-1
13921: PPUSH
13922: LD_STRING D3-Sol1-1
13924: PPUSH
13925: CALL 4493 0 3
// Say ( JMM , D3-JMM-2 ) ;
13929: LD_EXP 1
13933: PPUSH
13934: LD_STRING D3-JMM-2
13936: PPUSH
13937: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
13941: LD_EXP 2
13945: PPUSH
13946: CALL_OW 302
13950: PUSH
13951: LD_EXP 11
13955: PUSH
13956: LD_INT 2
13958: EQUAL
13959: AND
13960: IFFALSE 13976
// begin Say ( Brown , D3-Brown-1 ) ;
13962: LD_EXP 2
13966: PPUSH
13967: LD_STRING D3-Brown-1
13969: PPUSH
13970: CALL_OW 88
// end else
13974: GO 14013
// begin if gammaCommander = 2 then
13976: LD_EXP 11
13980: PUSH
13981: LD_INT 2
13983: EQUAL
13984: IFFALSE 14013
// begin DialogRandom ( others_gamma , D3-Sol1-1a , D3-Sol1-1a ) ;
13986: LD_EXP 10
13990: PPUSH
13991: LD_STRING D3-Sol1-1a
13993: PPUSH
13994: LD_STRING D3-Sol1-1a
13996: PPUSH
13997: CALL 4493 0 3
// Say ( JMM , D3-JMM-2 ) ;
14001: LD_EXP 1
14005: PPUSH
14006: LD_STRING D3-JMM-2
14008: PPUSH
14009: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
14013: LD_EXP 12
14017: PPUSH
14018: CALL_OW 302
14022: PUSH
14023: LD_EXP 11
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14048
// begin Say ( Houten , D3-VanH-1 ) ;
14034: LD_EXP 12
14038: PPUSH
14039: LD_STRING D3-VanH-1
14041: PPUSH
14042: CALL_OW 88
// end else
14046: GO 14085
// begin if gammaCommander = 3 then
14048: LD_EXP 11
14052: PUSH
14053: LD_INT 3
14055: EQUAL
14056: IFFALSE 14085
// begin DialogRandom ( others_gamma , D3-Sol1-1b , D3-Sol1-1b ) ;
14058: LD_EXP 10
14062: PPUSH
14063: LD_STRING D3-Sol1-1b
14065: PPUSH
14066: LD_STRING D3-Sol1-1b
14068: PPUSH
14069: CALL 4493 0 3
// Say ( JMM , D3-JMM-2 ) ;
14073: LD_EXP 1
14077: PPUSH
14078: LD_STRING D3-JMM-2
14080: PPUSH
14081: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
14085: LD_EXP 14
14089: PPUSH
14090: CALL_OW 302
14094: IFFALSE 14122
// begin Say ( Joan , D3a-Joan-1 ) ;
14096: LD_EXP 14
14100: PPUSH
14101: LD_STRING D3a-Joan-1
14103: PPUSH
14104: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
14108: LD_EXP 1
14112: PPUSH
14113: LD_STRING D3a-JMM-1
14115: PPUSH
14116: CALL_OW 88
// end else
14120: GO 14530
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
14122: LD_EXP 3
14126: PPUSH
14127: CALL_OW 302
14131: PUSH
14132: LD_EXP 11
14136: PUSH
14137: LD_INT 1
14139: EQUAL
14140: AND
14141: PUSH
14142: LD_STRING 06_JoanStatus_1
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 30
14152: PUSH
14153: LD_INT 1
14155: EQUAL
14156: AND
14157: IFFALSE 14208
// begin Say ( Donaldson , D3b-Don-1 ) ;
14159: LD_EXP 3
14163: PPUSH
14164: LD_STRING D3b-Don-1
14166: PPUSH
14167: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
14171: LD_EXP 1
14175: PPUSH
14176: LD_STRING D3b-JMM-2
14178: PPUSH
14179: CALL_OW 88
// if IsOK ( Lisa ) then
14183: LD_EXP 6
14187: PPUSH
14188: CALL_OW 302
14192: IFFALSE 14206
// Say ( Lisa , D3b-Lisa-2 ) ;
14194: LD_EXP 6
14198: PPUSH
14199: LD_STRING D3b-Lisa-2
14201: PPUSH
14202: CALL_OW 88
// end else
14206: GO 14258
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
14208: LD_EXP 10
14212: PPUSH
14213: LD_STRING D3b-Sol1-1
14215: PPUSH
14216: LD_STRING D3b-Sol1-1
14218: PPUSH
14219: CALL 4493 0 3
// Say ( JMM , D3b-JMM-2 ) ;
14223: LD_EXP 1
14227: PPUSH
14228: LD_STRING D3b-JMM-2
14230: PPUSH
14231: CALL_OW 88
// if IsOK ( Lisa ) then
14235: LD_EXP 6
14239: PPUSH
14240: CALL_OW 302
14244: IFFALSE 14258
// Say ( Lisa , D3b-Lisa-2 ) ;
14246: LD_EXP 6
14250: PPUSH
14251: LD_STRING D3b-Lisa-2
14253: PPUSH
14254: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
14258: LD_EXP 2
14262: PPUSH
14263: CALL_OW 302
14267: PUSH
14268: LD_EXP 11
14272: PUSH
14273: LD_INT 2
14275: EQUAL
14276: AND
14277: PUSH
14278: LD_STRING 06_JoanStatus_1
14280: PPUSH
14281: LD_INT 0
14283: PPUSH
14284: CALL_OW 30
14288: PUSH
14289: LD_INT 1
14291: EQUAL
14292: AND
14293: IFFALSE 14344
// begin Say ( Brown , D3b-Brown-1 ) ;
14295: LD_EXP 2
14299: PPUSH
14300: LD_STRING D3b-Brown-1
14302: PPUSH
14303: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
14307: LD_EXP 1
14311: PPUSH
14312: LD_STRING D3b-JMM-2
14314: PPUSH
14315: CALL_OW 88
// if IsOK ( Lisa ) then
14319: LD_EXP 6
14323: PPUSH
14324: CALL_OW 302
14328: IFFALSE 14342
// Say ( Lisa , D3b-Lisa-2 ) ;
14330: LD_EXP 6
14334: PPUSH
14335: LD_STRING D3b-Lisa-2
14337: PPUSH
14338: CALL_OW 88
// end else
14342: GO 14394
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
14344: LD_EXP 10
14348: PPUSH
14349: LD_STRING D3b-Sol1-1
14351: PPUSH
14352: LD_STRING D3b-Sol1-1
14354: PPUSH
14355: CALL 4493 0 3
// Say ( JMM , D3b-JMM-2 ) ;
14359: LD_EXP 1
14363: PPUSH
14364: LD_STRING D3b-JMM-2
14366: PPUSH
14367: CALL_OW 88
// if IsOK ( Lisa ) then
14371: LD_EXP 6
14375: PPUSH
14376: CALL_OW 302
14380: IFFALSE 14394
// Say ( Lisa , D3b-Lisa-2 ) ;
14382: LD_EXP 6
14386: PPUSH
14387: LD_STRING D3b-Lisa-2
14389: PPUSH
14390: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
14394: LD_EXP 12
14398: PPUSH
14399: CALL_OW 302
14403: PUSH
14404: LD_EXP 11
14408: PUSH
14409: LD_INT 3
14411: EQUAL
14412: AND
14413: PUSH
14414: LD_STRING 06_JoanStatus_1
14416: PPUSH
14417: LD_INT 0
14419: PPUSH
14420: CALL_OW 30
14424: PUSH
14425: LD_INT 1
14427: EQUAL
14428: AND
14429: IFFALSE 14480
// begin Say ( Houten , D3b-VanH-1 ) ;
14431: LD_EXP 12
14435: PPUSH
14436: LD_STRING D3b-VanH-1
14438: PPUSH
14439: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
14443: LD_EXP 1
14447: PPUSH
14448: LD_STRING D3b-JMM-2
14450: PPUSH
14451: CALL_OW 88
// if IsOK ( Lisa ) then
14455: LD_EXP 6
14459: PPUSH
14460: CALL_OW 302
14464: IFFALSE 14478
// Say ( Lisa , D3b-Lisa-2 ) ;
14466: LD_EXP 6
14470: PPUSH
14471: LD_STRING D3b-Lisa-2
14473: PPUSH
14474: CALL_OW 88
// end else
14478: GO 14530
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
14480: LD_EXP 10
14484: PPUSH
14485: LD_STRING D3b-Sol1-1
14487: PPUSH
14488: LD_STRING D3b-Sol1-1
14490: PPUSH
14491: CALL 4493 0 3
// Say ( JMM , D3b-JMM-2 ) ;
14495: LD_EXP 1
14499: PPUSH
14500: LD_STRING D3b-JMM-2
14502: PPUSH
14503: CALL_OW 88
// if IsOK ( Lisa ) then
14507: LD_EXP 6
14511: PPUSH
14512: CALL_OW 302
14516: IFFALSE 14530
// Say ( Lisa , D3b-Lisa-2 ) ;
14518: LD_EXP 6
14522: PPUSH
14523: LD_STRING D3b-Lisa-2
14525: PPUSH
14526: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
14530: LD_INT 22
14532: PUSH
14533: LD_INT 1
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 26
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: LD_INT 25
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 2
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 25
14585: PUSH
14586: LD_INT 3
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 25
14595: PUSH
14596: LD_INT 4
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: PPUSH
14616: CALL_OW 69
14620: PUSH
14621: LD_EXP 1
14625: PUSH
14626: EMPTY
14627: LIST
14628: DIFF
14629: PPUSH
14630: LD_STRING DCa-Sol1-1
14632: PPUSH
14633: LD_STRING DCa-Sol1-1
14635: PPUSH
14636: CALL 4493 0 3
// Say ( JMM , DCb-JMM-1 ) ;
14640: LD_EXP 1
14644: PPUSH
14645: LD_STRING DCb-JMM-1
14647: PPUSH
14648: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
14652: LD_INT 22
14654: PUSH
14655: LD_INT 1
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 1
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 26
14674: PUSH
14675: LD_INT 1
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: LD_INT 25
14687: PUSH
14688: LD_INT 1
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 25
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 25
14707: PUSH
14708: LD_INT 3
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 25
14717: PUSH
14718: LD_INT 4
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 69
14742: PUSH
14743: LD_EXP 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: DIFF
14751: PPUSH
14752: LD_STRING DCb-Sol1-1
14754: PPUSH
14755: LD_STRING DCb-Sol1-1
14757: PPUSH
14758: CALL 4493 0 3
// Say ( JMM , DCb-JMM-2 ) ;
14762: LD_EXP 1
14766: PPUSH
14767: LD_STRING DCb-JMM-2
14769: PPUSH
14770: CALL_OW 88
// JMMArrive = 1 ;
14774: LD_ADDR_EXP 36
14778: PUSH
14779: LD_INT 1
14781: ST_TO_ADDR
// secondAttack = 1 ;
14782: LD_ADDR_EXP 32
14786: PUSH
14787: LD_INT 1
14789: ST_TO_ADDR
// end ;
14790: END
// every 0 0$01 trigger JMMArrive = 1 do
14791: LD_EXP 36
14795: PUSH
14796: LD_INT 1
14798: EQUAL
14799: IFFALSE 14879
14801: GO 14803
14803: DISABLE
// begin wait ( 13 13$0 ) ;
14804: LD_INT 27300
14806: PPUSH
14807: CALL_OW 67
// DialogueOn ;
14811: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
14815: LD_EXP 22
14819: PPUSH
14820: LD_STRING D4-Pow-1
14822: PPUSH
14823: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14827: LD_EXP 1
14831: PPUSH
14832: LD_STRING D4-JMM-1
14834: PPUSH
14835: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
14839: LD_EXP 22
14843: PPUSH
14844: LD_STRING D4-Pow-2
14846: PPUSH
14847: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
14851: LD_EXP 1
14855: PPUSH
14856: LD_STRING D4-JMM-2
14858: PPUSH
14859: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
14863: LD_EXP 22
14867: PPUSH
14868: LD_STRING D4-Pow-3
14870: PPUSH
14871: CALL_OW 94
// DialogueOff ;
14875: CALL_OW 7
// end ;
14879: END
// every 0 0$01 trigger JMMArrive = 1 do
14880: LD_EXP 36
14884: PUSH
14885: LD_INT 1
14887: EQUAL
14888: IFFALSE 14920
14890: GO 14892
14892: DISABLE
// begin wait ( 20 20$0 ) ;
14893: LD_INT 42000
14895: PPUSH
14896: CALL_OW 67
// DialogueOn ;
14900: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
14904: LD_EXP 22
14908: PPUSH
14909: LD_STRING D4a-Pow-1
14911: PPUSH
14912: CALL_OW 94
// DialogueOff ;
14916: CALL_OW 7
// end ;
14920: END
// every 0 0$01 trigger JMMArrive = 1 do
14921: LD_EXP 36
14925: PUSH
14926: LD_INT 1
14928: EQUAL
14929: IFFALSE 14949
14931: GO 14933
14933: DISABLE
// begin wait ( 30 30$0 ) ;
14934: LD_INT 63000
14936: PPUSH
14937: CALL_OW 67
// PrepareSikorsky ;
14941: CALL 3077 0 0
// PrepareSikorskyArmy ;
14945: CALL 3217 0 0
// end ;
14949: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
14950: LD_EXP 16
14954: PPUSH
14955: LD_INT 5
14957: PPUSH
14958: CALL_OW 308
14962: IFFALSE 15162
14964: GO 14966
14966: DISABLE
// begin SikorskyArrive = 1 ;
14967: LD_ADDR_EXP 17
14971: PUSH
14972: LD_INT 1
14974: ST_TO_ADDR
// CenterNowOnUnits ( SikorskyTank ) ;
14975: LD_EXP 16
14979: PPUSH
14980: CALL_OW 87
// DialogueOn ;
14984: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
14988: LD_EXP 15
14992: PPUSH
14993: LD_STRING D5-Sik-1
14995: PPUSH
14996: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
15000: LD_EXP 1
15004: PPUSH
15005: LD_STRING D5-JMM-1a
15007: PPUSH
15008: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
15012: LD_EXP 15
15016: PPUSH
15017: LD_STRING D5-Sik-2
15019: PPUSH
15020: CALL_OW 88
// case query ( QSikorski ) of 1 :
15024: LD_STRING QSikorski
15026: PPUSH
15027: CALL_OW 97
15031: PUSH
15032: LD_INT 1
15034: DOUBLE
15035: EQUAL
15036: IFTRUE 15040
15038: GO 15063
15040: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
15041: LD_EXP 15
15045: PPUSH
15046: LD_STRING D5a-Sik-1
15048: PPUSH
15049: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
15053: LD_ADDR_EXP 18
15057: PUSH
15058: LD_INT 2100
15060: ST_TO_ADDR
// end ; 2 :
15061: GO 15150
15063: LD_INT 2
15065: DOUBLE
15066: EQUAL
15067: IFTRUE 15071
15069: GO 15094
15071: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
15072: LD_EXP 15
15076: PPUSH
15077: LD_STRING D5b-Sik-1
15079: PPUSH
15080: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
15084: LD_ADDR_EXP 18
15088: PUSH
15089: LD_INT 10500
15091: ST_TO_ADDR
// end ; 3 :
15092: GO 15150
15094: LD_INT 3
15096: DOUBLE
15097: EQUAL
15098: IFTRUE 15102
15100: GO 15149
15102: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
15103: LD_EXP 15
15107: PPUSH
15108: LD_STRING D5c-Sik-1
15110: PPUSH
15111: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
15115: LD_EXP 1
15119: PPUSH
15120: LD_STRING D5c-JMM-1
15122: PPUSH
15123: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
15127: LD_EXP 15
15131: PPUSH
15132: LD_STRING D5c-Sik-2
15134: PPUSH
15135: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
15139: LD_ADDR_EXP 18
15143: PUSH
15144: LD_INT 10500
15146: ST_TO_ADDR
// end ; end ;
15147: GO 15150
15149: POP
// DialogueOff ;
15150: CALL_OW 7
// timerStatus = 1 ;
15154: LD_ADDR_EXP 33
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// end ;
15162: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
15163: LD_EXP 18
15167: PUSH
15168: LD_INT 35
15170: LESS
15171: IFFALSE 15219
15173: GO 15175
15175: DISABLE
// begin timerStatus = 0 ;
15176: LD_ADDR_EXP 33
15180: PUSH
15181: LD_INT 0
15183: ST_TO_ADDR
// DialogueOn ;
15184: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
15188: LD_EXP 15
15192: PPUSH
15193: LD_STRING D6-Sik-1
15195: PPUSH
15196: CALL_OW 88
// DialogueOff ;
15200: CALL_OW 7
// SikorskyAI = 1 ;
15204: LD_ADDR_EXP 19
15208: PUSH
15209: LD_INT 1
15211: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
15212: LD_STRING M2
15214: PPUSH
15215: CALL_OW 337
// end ;
15219: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
15220: LD_EXP 16
15224: PPUSH
15225: LD_INT 18
15227: PPUSH
15228: CALL_OW 308
15232: IFFALSE 15311
15234: GO 15236
15236: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
15237: LD_EXP 15
15241: PPUSH
15242: LD_STRING D7-Sik-1
15244: PPUSH
15245: CALL_OW 88
// if GetDistUnits ( JMM , SikorskyTank ) < 20 then
15249: LD_EXP 1
15253: PPUSH
15254: LD_EXP 16
15258: PPUSH
15259: CALL_OW 296
15263: PUSH
15264: LD_INT 20
15266: LESS
15267: IFFALSE 15291
// begin Say ( Sikorski , D7a-Sik-1 ) ;
15269: LD_EXP 15
15273: PPUSH
15274: LD_STRING D7a-Sik-1
15276: PPUSH
15277: CALL_OW 88
// SikorskyStatus = 1 ;
15281: LD_ADDR_EXP 20
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// end else
15289: GO 15311
// begin Say ( Sikorski , D7b-Sik-1 ) ;
15291: LD_EXP 15
15295: PPUSH
15296: LD_STRING D7b-Sik-1
15298: PPUSH
15299: CALL_OW 88
// SikorskyStatus = 2 ;
15303: LD_ADDR_EXP 20
15307: PUSH
15308: LD_INT 2
15310: ST_TO_ADDR
// end ; end ;
15311: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
15312: LD_EXP 34
15316: PUSH
15317: LD_INT 1
15319: EQUAL
15320: IFFALSE 15429
15322: GO 15324
15324: DISABLE
15325: LD_INT 0
15327: PPUSH
// begin enable ;
15328: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
15329: LD_ADDR_VAR 0 1
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_INT 3
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: PUSH
15349: FOR_IN
15350: IFFALSE 15377
// if IsInArea ( i , RussianEscape ) then
15352: LD_VAR 0 1
15356: PPUSH
15357: LD_INT 22
15359: PPUSH
15360: CALL_OW 308
15364: IFFALSE 15375
// RemoveUnit ( i ) ;
15366: LD_VAR 0 1
15370: PPUSH
15371: CALL_OW 64
15375: GO 15349
15377: POP
15378: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_INT 22
15386: PUSH
15387: LD_INT 6
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PPUSH
15394: CALL_OW 69
15398: PUSH
15399: FOR_IN
15400: IFFALSE 15427
// if IsInArea ( i , RussianEscape ) then
15402: LD_VAR 0 1
15406: PPUSH
15407: LD_INT 22
15409: PPUSH
15410: CALL_OW 308
15414: IFFALSE 15425
// RemoveUnit ( i ) ;
15416: LD_VAR 0 1
15420: PPUSH
15421: CALL_OW 64
15425: GO 15399
15427: POP
15428: POP
// end ; end_of_file
15429: PPOPN 1
15431: END
// on BuildingComplete ( building ) do var tmp , un ;
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
// begin if GetSide ( building ) = 3 then
15436: LD_VAR 0 1
15440: PPUSH
15441: CALL_OW 255
15445: PUSH
15446: LD_INT 3
15448: EQUAL
15449: IFFALSE 15854
// begin if GetBType ( building ) = b_depot then
15451: LD_VAR 0 1
15455: PPUSH
15456: CALL_OW 266
15460: PUSH
15461: LD_INT 0
15463: EQUAL
15464: IFFALSE 15532
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
15466: LD_VAR 0 1
15470: PPUSH
15471: CALL_OW 274
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: LD_INT 5000
15481: PPUSH
15482: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
15486: LD_VAR 0 1
15490: PPUSH
15491: CALL_OW 274
15495: PPUSH
15496: LD_INT 2
15498: PPUSH
15499: LD_INT 5000
15501: PPUSH
15502: CALL_OW 277
// SetBName ( building , konev ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_STRING konev
15513: PPUSH
15514: CALL_OW 500
// ruDepot = building ;
15518: LD_ADDR_EXP 27
15522: PUSH
15523: LD_VAR 0 1
15527: ST_TO_ADDR
// BuildRussianBase ;
15528: CALL 5098 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 266
15541: PUSH
15542: LD_INT 0
15544: EQUAL
15545: PUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 266
15555: PUSH
15556: LD_INT 2
15558: EQUAL
15559: OR
15560: PUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 266
15570: PUSH
15571: LD_INT 4
15573: EQUAL
15574: OR
15575: IFFALSE 15586
// ComUpgrade ( building ) ;
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 146
// if GetBType ( building ) = b_lab then
15586: LD_VAR 0 1
15590: PPUSH
15591: CALL_OW 266
15595: PUSH
15596: LD_INT 6
15598: EQUAL
15599: IFFALSE 15650
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
15601: LD_VAR 0 1
15605: PPUSH
15606: LD_INT 10
15608: PPUSH
15609: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
15613: LD_VAR 0 1
15617: PPUSH
15618: LD_INT 12
15620: PPUSH
15621: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
15625: LD_INT 3
15627: PPUSH
15628: LD_VAR 0 1
15632: PPUSH
15633: LD_INT 3
15635: PPUSH
15636: CALL 5653 0 3
// ruLab = building ;
15640: LD_ADDR_EXP 28
15644: PUSH
15645: LD_VAR 0 1
15649: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 266
15659: PUSH
15660: LD_INT 32
15662: EQUAL
15663: IFFALSE 15781
// begin uc_side = 3 ;
15665: LD_ADDR_OWVAR 20
15669: PUSH
15670: LD_INT 3
15672: ST_TO_ADDR
// uc_nation = 3 ;
15673: LD_ADDR_OWVAR 21
15677: PUSH
15678: LD_INT 3
15680: ST_TO_ADDR
// hc_gallery =  ;
15681: LD_ADDR_OWVAR 33
15685: PUSH
15686: LD_STRING 
15688: ST_TO_ADDR
// hc_name =  ;
15689: LD_ADDR_OWVAR 26
15693: PUSH
15694: LD_STRING 
15696: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15697: LD_INT 0
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_EXP 24
15707: PPUSH
15708: LD_EXP 25
15712: PPUSH
15713: CALL_OW 12
15717: PPUSH
15718: CALL_OW 380
// un = CreateHuman ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: CALL_OW 44
15731: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_VAR 0 1
15741: PPUSH
15742: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_INT 43
15753: PUSH
15754: LD_INT 44
15756: PUSH
15757: LD_INT 46
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 1
15767: PPUSH
15768: LD_INT 3
15770: PPUSH
15771: CALL_OW 12
15775: ARRAY
15776: PPUSH
15777: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 266
15790: PUSH
15791: LD_INT 33
15793: EQUAL
15794: IFFALSE 15831
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
15796: LD_VAR 0 1
15800: PPUSH
15801: LD_INT 43
15803: PUSH
15804: LD_INT 44
15806: PUSH
15807: LD_INT 46
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 1
15817: PPUSH
15818: LD_INT 3
15820: PPUSH
15821: CALL_OW 12
15825: ARRAY
15826: PPUSH
15827: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 266
15840: PUSH
15841: LD_INT 24
15843: EQUAL
15844: IFFALSE 15854
// russianAI = 1 ;
15846: LD_ADDR_EXP 26
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// end ; end ;
15854: PPOPN 3
15856: END
// on UpgradeComplete ( building ) do var i ;
15857: LD_INT 0
15859: PPUSH
// begin if GetSide ( building ) = 3 then
15860: LD_VAR 0 1
15864: PPUSH
15865: CALL_OW 255
15869: PUSH
15870: LD_INT 3
15872: EQUAL
15873: IFFALSE 16054
// begin if GetBType ( building ) = b_factory then
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL_OW 266
15884: PUSH
15885: LD_INT 3
15887: EQUAL
15888: IFFALSE 15955
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
15890: LD_ADDR_VAR 0 2
15894: PUSH
15895: LD_INT 22
15897: PUSH
15898: LD_INT 3
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 25
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: PUSH
15924: FOR_IN
15925: IFFALSE 15943
// ComEnterUnit ( i , building ) ;
15927: LD_VAR 0 2
15931: PPUSH
15932: LD_VAR 0 1
15936: PPUSH
15937: CALL_OW 120
15941: GO 15924
15943: POP
15944: POP
// ruFab = building ;
15945: LD_ADDR_EXP 29
15949: PUSH
15950: LD_VAR 0 1
15954: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 266
15964: PUSH
15965: LD_INT 8
15967: EQUAL
15968: IFFALSE 16025
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
15970: LD_ADDR_VAR 0 2
15974: PUSH
15975: LD_INT 22
15977: PUSH
15978: LD_INT 3
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 25
15987: PUSH
15988: LD_INT 4
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PPUSH
15999: CALL_OW 69
16003: PUSH
16004: FOR_IN
16005: IFFALSE 16023
// ComEnterUnit ( i , building ) ;
16007: LD_VAR 0 2
16011: PPUSH
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 120
16021: GO 16004
16023: POP
16024: POP
// if GetBType ( building ) = b_warehouse then
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 266
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16054
// begin ComEnterUnit ( Borodin , building ) ;
16040: LD_EXP 23
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 120
// end ; end ; end ;
16054: PPOPN 2
16056: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 247
16066: PUSH
16067: LD_INT 2
16069: EQUAL
16070: PUSH
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 263
16080: PUSH
16081: LD_INT 3
16083: EQUAL
16084: AND
16085: PUSH
16086: LD_EXP 38
16090: PUSH
16091: LD_INT 0
16093: EQUAL
16094: AND
16095: IFFALSE 16213
// begin varEvent1 = 1 ;
16097: LD_ADDR_EXP 38
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
16114: LD_INT 22
16116: PUSH
16117: LD_INT 1
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 21
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 2
16136: PUSH
16137: LD_INT 25
16139: PUSH
16140: LD_INT 1
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 25
16149: PUSH
16150: LD_INT 2
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 25
16159: PUSH
16160: LD_INT 3
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 25
16169: PUSH
16170: LD_INT 4
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: PUSH
16194: LD_EXP 1
16198: PUSH
16199: EMPTY
16200: LIST
16201: DIFF
16202: PPUSH
16203: LD_STRING DC-Sol1-1
16205: PPUSH
16206: LD_STRING DC-FSol1-1
16208: PPUSH
16209: CALL 4493 0 3
// end ; end ; end_of_file
16213: PPOPN 1
16215: END
// every 0 0$1 do
16216: GO 16218
16218: DISABLE
// begin enable ;
16219: ENABLE
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
16220: LD_INT 3
16222: PPUSH
16223: LD_INT 6
16225: PPUSH
16226: CALL 5738 0 2
// if russianAI = 1 then
16230: LD_EXP 26
16234: PUSH
16235: LD_INT 1
16237: EQUAL
16238: IFFALSE 16320
// begin RepairBuilding ( 3 , ruDepot ) ;
16240: LD_INT 3
16242: PPUSH
16243: LD_EXP 27
16247: PPUSH
16248: CALL 6076 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
16252: LD_INT 3
16254: PPUSH
16255: LD_INT 7
16257: PPUSH
16258: LD_INT 6
16260: PPUSH
16261: LD_EXP 28
16265: PPUSH
16266: CALL 6541 0 4
// RebuildBuildings ( 3 , ruDestroyBuilds ) ;
16270: LD_INT 3
16272: PPUSH
16273: LD_EXP 30
16277: PPUSH
16278: CALL 6335 0 2
// RepairVehicle ( 3 , RussianRepairArea , 93 , 93 , 1 ) ;
16282: LD_INT 3
16284: PPUSH
16285: LD_INT 8
16287: PPUSH
16288: LD_INT 93
16290: PPUSH
16291: LD_INT 93
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL 6807 0 5
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
16301: LD_INT 6
16303: PPUSH
16304: LD_INT 8
16306: PPUSH
16307: LD_INT 93
16309: PPUSH
16310: LD_INT 93
16312: PPUSH
16313: LD_INT 1
16315: PPUSH
16316: CALL 6807 0 5
// end ; if SikorskyArrive = 1 then
16320: LD_EXP 17
16324: PUSH
16325: LD_INT 1
16327: EQUAL
16328: IFFALSE 16349
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
16330: LD_INT 3
16332: PPUSH
16333: LD_INT 10
16335: PPUSH
16336: LD_INT 53
16338: PPUSH
16339: LD_INT 59
16341: PPUSH
16342: LD_INT 3
16344: PPUSH
16345: CALL 6807 0 5
// end ;
16349: END
// every 0 0$1 trigger SikorskyAI = 1 do
16350: LD_EXP 19
16354: PUSH
16355: LD_INT 1
16357: EQUAL
16358: IFFALSE 16396
16360: GO 16362
16362: DISABLE
// begin enable ;
16363: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
16364: LD_INT 4
16366: PPUSH
16367: LD_INT 10
16369: PPUSH
16370: LD_INT 93
16372: PPUSH
16373: LD_INT 93
16375: PPUSH
16376: LD_INT 3
16378: PPUSH
16379: CALL 6807 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
16383: LD_INT 4
16385: PPUSH
16386: LD_INT 11
16388: PPUSH
16389: LD_INT 3
16391: PPUSH
16392: CALL 12744 0 3
// end ;
16396: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16397: LD_EXP 26
16401: PUSH
16402: LD_INT 1
16404: EQUAL
16405: PUSH
16406: LD_EXP 29
16410: PPUSH
16411: CALL_OW 302
16415: AND
16416: PUSH
16417: LD_EXP 29
16421: PPUSH
16422: CALL_OW 255
16426: PUSH
16427: LD_INT 3
16429: EQUAL
16430: AND
16431: PUSH
16432: LD_INT 22
16434: PUSH
16435: LD_INT 3
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 21
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: PUSH
16461: LD_INT 0
16463: EQUAL
16464: AND
16465: IFFALSE 16648
16467: GO 16469
16469: DISABLE
// begin enable ;
16470: ENABLE
// if Difficulty = 1 then
16471: LD_OWVAR 67
16475: PUSH
16476: LD_INT 1
16478: EQUAL
16479: IFFALSE 16534
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 6 ) , 1 , [ 43 , 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
16481: LD_INT 3
16483: PPUSH
16484: LD_EXP 29
16488: PPUSH
16489: LD_INT 5
16491: PPUSH
16492: LD_INT 6
16494: PPUSH
16495: CALL_OW 12
16499: PPUSH
16500: LD_INT 1
16502: PPUSH
16503: LD_INT 43
16505: PUSH
16506: LD_INT 43
16508: PUSH
16509: LD_INT 44
16511: PUSH
16512: LD_INT 46
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: PPUSH
16521: LD_INT 1
16523: PPUSH
16524: LD_INT 3
16526: PPUSH
16527: LD_INT 24
16529: PPUSH
16530: CALL 7642 0 8
// if Difficulty = 2 then
16534: LD_OWVAR 67
16538: PUSH
16539: LD_INT 2
16541: EQUAL
16542: IFFALSE 16593
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 7 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
16544: LD_INT 3
16546: PPUSH
16547: LD_EXP 29
16551: PPUSH
16552: LD_INT 5
16554: PPUSH
16555: LD_INT 7
16557: PPUSH
16558: CALL_OW 12
16562: PPUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_INT 44
16568: PUSH
16569: LD_INT 44
16571: PUSH
16572: LD_INT 46
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: PPUSH
16580: LD_INT 1
16582: PPUSH
16583: LD_INT 3
16585: PPUSH
16586: LD_INT 24
16588: PPUSH
16589: CALL 7642 0 8
// if Difficulty = 3 then
16593: LD_OWVAR 67
16597: PUSH
16598: LD_INT 3
16600: EQUAL
16601: IFFALSE 16648
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
16603: LD_INT 3
16605: PPUSH
16606: LD_EXP 29
16610: PPUSH
16611: LD_INT 5
16613: PPUSH
16614: LD_INT 8
16616: PPUSH
16617: CALL_OW 12
16621: PPUSH
16622: LD_INT 1
16624: PPUSH
16625: LD_INT 44
16627: PUSH
16628: LD_INT 46
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: LD_INT 3
16640: PPUSH
16641: LD_INT 24
16643: PPUSH
16644: CALL 7642 0 8
// end ; end_of_file
16648: END
// every 0 0$1 trigger firstAttack = 1 do
16649: LD_EXP 31
16653: PUSH
16654: LD_INT 1
16656: EQUAL
16657: IFFALSE 16763
16659: GO 16661
16661: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 12 ) , rand ( 9 , 12 ) , rand ( 10 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
16662: LD_INT 6
16664: PPUSH
16665: LD_INT 3
16667: PPUSH
16668: LD_INT 8
16670: PPUSH
16671: LD_INT 12
16673: PPUSH
16674: CALL_OW 12
16678: PUSH
16679: LD_INT 9
16681: PPUSH
16682: LD_INT 12
16684: PPUSH
16685: CALL_OW 12
16689: PUSH
16690: LD_INT 10
16692: PPUSH
16693: LD_INT 12
16695: PPUSH
16696: CALL_OW 12
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: LIST
16705: PUSH
16706: LD_OWVAR 67
16710: ARRAY
16711: PPUSH
16712: LD_INT 0
16714: PPUSH
16715: LD_INT 0
16717: PPUSH
16718: LD_INT 0
16720: PPUSH
16721: LD_INT 0
16723: PPUSH
16724: LD_EXP 24
16728: PPUSH
16729: LD_EXP 25
16733: PPUSH
16734: CALL_OW 12
16738: PPUSH
16739: LD_INT 16
16741: PPUSH
16742: LD_INT 7
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: LD_INT 1
16750: PPUSH
16751: LD_INT 3
16753: PPUSH
16754: CALL_OW 12
16758: PPUSH
16759: CALL 8206 0 12
16763: END
// every 0 0$1 trigger firstAttack = 1 do
16764: LD_EXP 31
16768: PUSH
16769: LD_INT 1
16771: EQUAL
16772: IFFALSE 16880
16774: GO 16776
16776: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
16777: LD_INT 16
16779: PPUSH
16780: LD_INT 6
16782: PPUSH
16783: LD_INT 5
16785: PPUSH
16786: LD_INT 8
16788: PPUSH
16789: CALL_OW 12
16793: PUSH
16794: LD_INT 6
16796: PPUSH
16797: LD_INT 9
16799: PPUSH
16800: CALL_OW 12
16804: PUSH
16805: LD_INT 7
16807: PPUSH
16808: LD_INT 9
16810: PPUSH
16811: CALL_OW 12
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: LD_OWVAR 67
16825: ARRAY
16826: PPUSH
16827: LD_EXP 24
16831: PPUSH
16832: LD_EXP 25
16836: PPUSH
16837: CALL_OW 12
16841: PPUSH
16842: LD_INT 3
16844: PPUSH
16845: LD_INT 1
16847: PPUSH
16848: LD_INT 3
16850: PPUSH
16851: LD_INT 42
16853: PUSH
16854: LD_INT 43
16856: PUSH
16857: LD_INT 44
16859: PUSH
16860: LD_INT 46
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: PPUSH
16869: EMPTY
16870: PPUSH
16871: EMPTY
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL 11066 0 11
16880: END
// every 0 0$1 trigger secondAttack = 1 do
16881: LD_EXP 32
16885: PUSH
16886: LD_INT 1
16888: EQUAL
16889: IFFALSE 16995
16891: GO 16893
16893: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 12 ) , rand ( 9 , 12 ) , rand ( 10 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
16894: LD_INT 6
16896: PPUSH
16897: LD_INT 3
16899: PPUSH
16900: LD_INT 8
16902: PPUSH
16903: LD_INT 12
16905: PPUSH
16906: CALL_OW 12
16910: PUSH
16911: LD_INT 9
16913: PPUSH
16914: LD_INT 12
16916: PPUSH
16917: CALL_OW 12
16921: PUSH
16922: LD_INT 10
16924: PPUSH
16925: LD_INT 12
16927: PPUSH
16928: CALL_OW 12
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: PUSH
16938: LD_OWVAR 67
16942: ARRAY
16943: PPUSH
16944: LD_INT 0
16946: PPUSH
16947: LD_INT 0
16949: PPUSH
16950: LD_INT 0
16952: PPUSH
16953: LD_INT 0
16955: PPUSH
16956: LD_EXP 24
16960: PPUSH
16961: LD_EXP 25
16965: PPUSH
16966: CALL_OW 12
16970: PPUSH
16971: LD_INT 16
16973: PPUSH
16974: LD_INT 7
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: LD_INT 3
16985: PPUSH
16986: CALL_OW 12
16990: PPUSH
16991: CALL 8206 0 12
16995: END
// every 0 0$1 trigger secondAttack = 1 do
16996: LD_EXP 32
17000: PUSH
17001: LD_INT 1
17003: EQUAL
17004: IFFALSE 17112
17006: GO 17008
17008: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
17009: LD_INT 16
17011: PPUSH
17012: LD_INT 6
17014: PPUSH
17015: LD_INT 5
17017: PPUSH
17018: LD_INT 8
17020: PPUSH
17021: CALL_OW 12
17025: PUSH
17026: LD_INT 6
17028: PPUSH
17029: LD_INT 9
17031: PPUSH
17032: CALL_OW 12
17036: PUSH
17037: LD_INT 7
17039: PPUSH
17040: LD_INT 9
17042: PPUSH
17043: CALL_OW 12
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_OWVAR 67
17057: ARRAY
17058: PPUSH
17059: LD_EXP 24
17063: PPUSH
17064: LD_EXP 25
17068: PPUSH
17069: CALL_OW 12
17073: PPUSH
17074: LD_INT 3
17076: PPUSH
17077: LD_INT 1
17079: PPUSH
17080: LD_INT 3
17082: PPUSH
17083: LD_INT 42
17085: PUSH
17086: LD_INT 43
17088: PUSH
17089: LD_INT 44
17091: PUSH
17092: LD_INT 46
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: PPUSH
17101: EMPTY
17102: PPUSH
17103: EMPTY
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL 11066 0 11
17112: END
// every 20 20$0 do
17113: GO 17115
17115: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 12 ) , rand ( 9 , 12 ) , rand ( 10 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17116: LD_INT 6
17118: PPUSH
17119: LD_INT 3
17121: PPUSH
17122: LD_INT 8
17124: PPUSH
17125: LD_INT 12
17127: PPUSH
17128: CALL_OW 12
17132: PUSH
17133: LD_INT 9
17135: PPUSH
17136: LD_INT 12
17138: PPUSH
17139: CALL_OW 12
17143: PUSH
17144: LD_INT 10
17146: PPUSH
17147: LD_INT 12
17149: PPUSH
17150: CALL_OW 12
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_OWVAR 67
17164: ARRAY
17165: PPUSH
17166: LD_INT 0
17168: PPUSH
17169: LD_INT 0
17171: PPUSH
17172: LD_INT 0
17174: PPUSH
17175: LD_INT 0
17177: PPUSH
17178: LD_EXP 24
17182: PPUSH
17183: LD_EXP 25
17187: PPUSH
17188: CALL_OW 12
17192: PPUSH
17193: LD_INT 16
17195: PPUSH
17196: LD_INT 7
17198: PPUSH
17199: LD_INT 1
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: LD_INT 3
17207: PPUSH
17208: CALL_OW 12
17212: PPUSH
17213: CALL 8206 0 12
17217: END
// every 20 20$0 do
17218: GO 17220
17220: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
17221: LD_INT 16
17223: PPUSH
17224: LD_INT 6
17226: PPUSH
17227: LD_INT 5
17229: PPUSH
17230: LD_INT 8
17232: PPUSH
17233: CALL_OW 12
17237: PUSH
17238: LD_INT 6
17240: PPUSH
17241: LD_INT 9
17243: PPUSH
17244: CALL_OW 12
17248: PUSH
17249: LD_INT 7
17251: PPUSH
17252: LD_INT 9
17254: PPUSH
17255: CALL_OW 12
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: PUSH
17265: LD_OWVAR 67
17269: ARRAY
17270: PPUSH
17271: LD_EXP 24
17275: PPUSH
17276: LD_EXP 25
17280: PPUSH
17281: CALL_OW 12
17285: PPUSH
17286: LD_INT 3
17288: PPUSH
17289: LD_INT 1
17291: PPUSH
17292: LD_INT 3
17294: PPUSH
17295: LD_INT 42
17297: PUSH
17298: LD_INT 43
17300: PUSH
17301: LD_INT 44
17303: PUSH
17304: LD_INT 46
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: PPUSH
17313: EMPTY
17314: PPUSH
17315: EMPTY
17316: PPUSH
17317: LD_INT 1
17319: PPUSH
17320: CALL 11066 0 11
17324: END
// every 25 25$0 do
17325: GO 17327
17327: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 12 ) , rand ( 9 , 12 ) , rand ( 10 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17328: LD_INT 6
17330: PPUSH
17331: LD_INT 3
17333: PPUSH
17334: LD_INT 8
17336: PPUSH
17337: LD_INT 12
17339: PPUSH
17340: CALL_OW 12
17344: PUSH
17345: LD_INT 9
17347: PPUSH
17348: LD_INT 12
17350: PPUSH
17351: CALL_OW 12
17355: PUSH
17356: LD_INT 10
17358: PPUSH
17359: LD_INT 12
17361: PPUSH
17362: CALL_OW 12
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: PUSH
17372: LD_OWVAR 67
17376: ARRAY
17377: PPUSH
17378: LD_INT 0
17380: PPUSH
17381: LD_INT 0
17383: PPUSH
17384: LD_INT 0
17386: PPUSH
17387: LD_INT 0
17389: PPUSH
17390: LD_EXP 24
17394: PPUSH
17395: LD_EXP 25
17399: PPUSH
17400: CALL_OW 12
17404: PPUSH
17405: LD_INT 16
17407: PPUSH
17408: LD_INT 7
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: LD_INT 3
17419: PPUSH
17420: CALL_OW 12
17424: PPUSH
17425: CALL 8206 0 12
17429: END
// every 25 25$0 do
17430: GO 17432
17432: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
17433: LD_INT 16
17435: PPUSH
17436: LD_INT 6
17438: PPUSH
17439: LD_INT 5
17441: PPUSH
17442: LD_INT 8
17444: PPUSH
17445: CALL_OW 12
17449: PUSH
17450: LD_INT 6
17452: PPUSH
17453: LD_INT 9
17455: PPUSH
17456: CALL_OW 12
17460: PUSH
17461: LD_INT 7
17463: PPUSH
17464: LD_INT 9
17466: PPUSH
17467: CALL_OW 12
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: PUSH
17477: LD_OWVAR 67
17481: ARRAY
17482: PPUSH
17483: LD_EXP 24
17487: PPUSH
17488: LD_EXP 25
17492: PPUSH
17493: CALL_OW 12
17497: PPUSH
17498: LD_INT 3
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: LD_INT 3
17506: PPUSH
17507: LD_INT 42
17509: PUSH
17510: LD_INT 43
17512: PUSH
17513: LD_INT 44
17515: PUSH
17516: LD_INT 46
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PPUSH
17525: EMPTY
17526: PPUSH
17527: EMPTY
17528: PPUSH
17529: LD_INT 1
17531: PPUSH
17532: CALL 11066 0 11
17536: END
// every 0 0$1 trigger timerStatus = 1 do
17537: LD_EXP 33
17541: PUSH
17542: LD_INT 1
17544: EQUAL
17545: IFFALSE 17582
17547: GO 17549
17549: DISABLE
// begin enable ;
17550: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
17551: LD_ADDR_OWVAR 47
17555: PUSH
17556: LD_STRING #Am08-1
17558: PUSH
17559: LD_EXP 18
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
17568: LD_ADDR_EXP 18
17572: PUSH
17573: LD_EXP 18
17577: PUSH
17578: LD_INT 35
17580: MINUS
17581: ST_TO_ADDR
// end ; end_of_file
17582: END
// every 1 1$15 do
17583: GO 17585
17585: DISABLE
// begin if supply <= 13 and supply > 7 then
17586: LD_EXP 37
17590: PUSH
17591: LD_INT 13
17593: LESSEQUAL
17594: PUSH
17595: LD_EXP 37
17599: PUSH
17600: LD_INT 7
17602: GREATER
17603: AND
17604: IFFALSE 17627
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
17606: LD_INT 3
17608: PPUSH
17609: LD_INT 5
17611: PPUSH
17612: CALL_OW 12
17616: PPUSH
17617: LD_INT 5
17619: PPUSH
17620: LD_INT 1
17622: PPUSH
17623: CALL_OW 55
// if supply <= 7 and supply > 4 then
17627: LD_EXP 37
17631: PUSH
17632: LD_INT 7
17634: LESSEQUAL
17635: PUSH
17636: LD_EXP 37
17640: PUSH
17641: LD_INT 4
17643: GREATER
17644: AND
17645: IFFALSE 17668
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
17647: LD_INT 3
17649: PPUSH
17650: LD_INT 5
17652: PPUSH
17653: CALL_OW 12
17657: PPUSH
17658: LD_INT 20
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: CALL_OW 55
// if supply <= 4 and supply > 0 then
17668: LD_EXP 37
17672: PUSH
17673: LD_INT 4
17675: LESSEQUAL
17676: PUSH
17677: LD_EXP 37
17681: PUSH
17682: LD_INT 0
17684: GREATER
17685: AND
17686: IFFALSE 17709
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
17688: LD_INT 3
17690: PPUSH
17691: LD_INT 5
17693: PPUSH
17694: CALL_OW 12
17698: PPUSH
17699: LD_INT 21
17701: PPUSH
17702: LD_INT 1
17704: PPUSH
17705: CALL_OW 55
// if supply > 0 then
17709: LD_EXP 37
17713: PUSH
17714: LD_INT 0
17716: GREATER
17717: IFFALSE 17734
// begin supply = supply - 1 ;
17719: LD_ADDR_EXP 37
17723: PUSH
17724: LD_EXP 37
17728: PUSH
17729: LD_INT 1
17731: MINUS
17732: ST_TO_ADDR
// enable ;
17733: ENABLE
// end ; end ; end_of_file
17734: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
17735: LD_EXP 36
17739: PUSH
17740: LD_INT 1
17742: EQUAL
17743: PUSH
17744: LD_EXP 1
17748: PPUSH
17749: CALL_OW 301
17753: AND
17754: IFFALSE 17766
17756: GO 17758
17758: DISABLE
// YouLost ( JMM ) ;
17759: LD_STRING JMM
17761: PPUSH
17762: CALL_OW 104
17766: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
17767: LD_EXP 17
17771: PUSH
17772: LD_INT 1
17774: EQUAL
17775: PUSH
17776: LD_EXP 15
17780: PPUSH
17781: CALL_OW 301
17785: AND
17786: IFFALSE 17818
17788: GO 17790
17790: DISABLE
// begin DialogueOn ;
17791: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
17795: LD_EXP 22
17799: PPUSH
17800: LD_STRING D8a-Pow-1
17802: PPUSH
17803: CALL_OW 94
// DialogueOff ;
17807: CALL_OW 7
// YouLost ( Dismissed ) ;
17811: LD_STRING Dismissed
17813: PPUSH
17814: CALL_OW 104
// end ;
17818: END
// every 0 0$1 trigger IsDead ( amDepot ) do
17819: LD_EXP 35
17823: PPUSH
17824: CALL_OW 301
17828: IFFALSE 17840
17830: GO 17832
17832: DISABLE
// YouLost ( Destroyed ) ; end_of_file
17833: LD_STRING Destroyed
17835: PPUSH
17836: CALL_OW 104
17840: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
17841: LD_EXP 23
17845: PPUSH
17846: CALL_OW 301
17850: IFFALSE 18195
17852: GO 17854
17854: DISABLE
17855: LD_INT 0
17857: PPUSH
// begin russianAI = 0 ;
17858: LD_ADDR_EXP 26
17862: PUSH
17863: LD_INT 0
17865: ST_TO_ADDR
// escapeAvalaible = 1 ;
17866: LD_ADDR_EXP 34
17870: PUSH
17871: LD_INT 1
17873: ST_TO_ADDR
// InGameOn ;
17874: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: LD_INT 1
17886: PPUSH
17887: LD_INT 0
17889: PPUSH
17890: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17894: LD_INT 6
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 0
17905: PPUSH
17906: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17910: LD_INT 3
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17920: LD_INT 97
17922: PPUSH
17923: LD_INT 91
17925: PPUSH
17926: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17930: LD_INT 22
17932: PUSH
17933: LD_INT 3
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 21
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PPUSH
17954: CALL_OW 69
17958: PPUSH
17959: CALL_OW 121
// wait ( 0 0$01 ) ;
17963: LD_INT 35
17965: PPUSH
17966: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17970: LD_INT 22
17972: PUSH
17973: LD_INT 3
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 21
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PPUSH
17994: CALL_OW 69
17998: PPUSH
17999: LD_INT 124
18001: PPUSH
18002: LD_INT 98
18004: PPUSH
18005: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18009: LD_INT 22
18011: PUSH
18012: LD_INT 6
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 21
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PPUSH
18033: CALL_OW 69
18037: PPUSH
18038: CALL_OW 121
// wait ( 0 0$01 ) ;
18042: LD_INT 35
18044: PPUSH
18045: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18049: LD_INT 22
18051: PUSH
18052: LD_INT 6
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 21
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PPUSH
18073: CALL_OW 69
18077: PPUSH
18078: LD_INT 124
18080: PPUSH
18081: LD_INT 98
18083: PPUSH
18084: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18088: LD_INT 22
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 21
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PPUSH
18112: CALL_OW 69
18116: PPUSH
18117: LD_INT 124
18119: PPUSH
18120: LD_INT 98
18122: PPUSH
18123: CALL_OW 114
// wait ( 0 0$4 ) ;
18127: LD_INT 140
18129: PPUSH
18130: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
18134: LD_INT 124
18136: PPUSH
18137: LD_INT 98
18139: PPUSH
18140: CALL_OW 84
// if SikorskyStatus = 1 then
18144: LD_EXP 20
18148: PUSH
18149: LD_INT 1
18151: EQUAL
18152: IFFALSE 18166
// begin Say ( Sikorski , D9-Sik-1 ) ;
18154: LD_EXP 15
18158: PPUSH
18159: LD_STRING D9-Sik-1
18161: PPUSH
18162: CALL_OW 88
// end ; if SikorskyStatus = 2 then
18166: LD_EXP 20
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: IFFALSE 18195
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
18176: LD_EXP 22
18180: PPUSH
18181: LD_STRING D8b-Pow-1
18183: PPUSH
18184: CALL_OW 94
// YouLost ( Dismissed ) ;
18188: LD_STRING Dismissed
18190: PPUSH
18191: CALL_OW 104
// end ; end ;
18195: PPOPN 1
18197: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
18198: LD_INT 23
18200: PUSH
18201: LD_INT 3
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 21
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 24
18220: PUSH
18221: LD_INT 250
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 69
18237: PUSH
18238: LD_INT 0
18240: EQUAL
18241: IFFALSE 18250
18243: GO 18245
18245: DISABLE
// FinishMission ;
18246: CALL 18251 0 0
18250: END
// export function FinishMission ; var tmp ; begin
18251: LD_INT 0
18253: PPUSH
18254: PPUSH
// AddMedal ( med1 , 1 ) ;
18255: LD_STRING med1
18257: PPUSH
18258: LD_INT 1
18260: PPUSH
18261: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
18265: LD_STRING med2
18267: PPUSH
18268: LD_INT 1
18270: PPUSH
18271: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
18275: LD_STRING perfect
18277: PPUSH
18278: LD_INT 1
18280: PPUSH
18281: CALL_OW 101
// GiveMedals ( Main ) ;
18285: LD_STRING Main
18287: PPUSH
18288: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18292: LD_INT 22
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 23
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 21
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: LD_INT 25
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 25
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 25
18347: PUSH
18348: LD_INT 3
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 25
18357: PUSH
18358: LD_INT 4
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: PPUSH
18378: CALL_OW 69
18382: PPUSH
18383: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18387: LD_EXP 1
18391: PPUSH
18392: LD_EXP 39
18396: PUSH
18397: LD_STRING JMM
18399: STR
18400: PPUSH
18401: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18405: LD_EXP 2
18409: PPUSH
18410: LD_EXP 39
18414: PUSH
18415: LD_STRING Brown
18417: STR
18418: PPUSH
18419: CALL 5602 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18423: LD_EXP 3
18427: PPUSH
18428: LD_EXP 39
18432: PUSH
18433: LD_STRING Donaldson
18435: STR
18436: PPUSH
18437: CALL 5602 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18441: LD_EXP 4
18445: PPUSH
18446: LD_EXP 39
18450: PUSH
18451: LD_STRING Bobby
18453: STR
18454: PPUSH
18455: CALL 5602 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18459: LD_EXP 5
18463: PPUSH
18464: LD_EXP 39
18468: PUSH
18469: LD_STRING Cyrus
18471: STR
18472: PPUSH
18473: CALL 5602 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18477: LD_EXP 6
18481: PPUSH
18482: LD_EXP 39
18486: PUSH
18487: LD_STRING Lisa
18489: STR
18490: PPUSH
18491: CALL 5602 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18495: LD_EXP 7
18499: PPUSH
18500: LD_EXP 39
18504: PUSH
18505: LD_STRING Frank
18507: STR
18508: PPUSH
18509: CALL 5602 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18513: LD_EXP 8
18517: PPUSH
18518: LD_EXP 39
18522: PUSH
18523: LD_STRING Gladstone
18525: STR
18526: PPUSH
18527: CALL 5602 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18531: LD_EXP 9
18535: PPUSH
18536: LD_EXP 39
18540: PUSH
18541: LD_STRING Kikuchi
18543: STR
18544: PPUSH
18545: CALL 5602 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18549: LD_EXP 13
18553: PPUSH
18554: LD_EXP 39
18558: PUSH
18559: LD_STRING Denis
18561: STR
18562: PPUSH
18563: CALL 5602 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18567: LD_EXP 14
18571: PPUSH
18572: LD_EXP 39
18576: PUSH
18577: LD_STRING Joan
18579: STR
18580: PPUSH
18581: CALL 5602 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18585: LD_EXP 12
18589: PPUSH
18590: LD_EXP 39
18594: PUSH
18595: LD_STRING Houten
18597: STR
18598: PPUSH
18599: CALL 5602 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
18603: LD_INT 50
18605: PUSH
18606: EMPTY
18607: LIST
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 21
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: LD_INT 25
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 25
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 25
18654: PUSH
18655: LD_INT 3
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 25
18664: PUSH
18665: LD_INT 4
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 69
18689: PUSH
18690: LD_EXP 1
18694: PUSH
18695: LD_EXP 2
18699: PUSH
18700: LD_EXP 3
18704: PUSH
18705: LD_EXP 4
18709: PUSH
18710: LD_EXP 5
18714: PUSH
18715: LD_EXP 6
18719: PUSH
18720: LD_EXP 7
18724: PUSH
18725: LD_EXP 8
18729: PUSH
18730: LD_EXP 9
18734: PUSH
18735: LD_EXP 13
18739: PUSH
18740: LD_EXP 14
18744: PUSH
18745: LD_EXP 12
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: DIFF
18764: PPUSH
18765: LD_STRING 08_other_survivors
18767: PPUSH
18768: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
18772: LD_INT 23
18774: PPUSH
18775: CALL 18788 0 1
// YouWin ;
18779: CALL_OW 103
// end ;
18783: LD_VAR 0 1
18787: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
18788: LD_INT 0
18790: PPUSH
18791: PPUSH
18792: PPUSH
18793: PPUSH
// gammaBase = [ ] ;
18794: LD_ADDR_VAR 0 4
18798: PUSH
18799: EMPTY
18800: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
18801: LD_ADDR_VAR 0 5
18805: PUSH
18806: LD_VAR 0 1
18810: PPUSH
18811: LD_INT 22
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 21
18823: PUSH
18824: LD_INT 3
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 50
18833: PUSH
18834: EMPTY
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: PPUSH
18842: CALL_OW 70
18846: ST_TO_ADDR
// for i in buildings do
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_VAR 0 5
18856: PUSH
18857: FOR_IN
18858: IFFALSE 19195
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
18860: LD_VAR 0 3
18864: PPUSH
18865: CALL_OW 266
18869: PUSH
18870: LD_INT 6
18872: PUSH
18873: LD_INT 7
18875: PUSH
18876: LD_INT 8
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: IN
18884: IFFALSE 18998
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
18886: LD_ADDR_VAR 0 4
18890: PUSH
18891: LD_VAR 0 4
18895: PUSH
18896: LD_VAR 0 3
18900: PPUSH
18901: CALL_OW 266
18905: PUSH
18906: LD_VAR 0 3
18910: PPUSH
18911: CALL_OW 250
18915: PUSH
18916: LD_VAR 0 3
18920: PPUSH
18921: CALL_OW 251
18925: PUSH
18926: LD_VAR 0 3
18930: PPUSH
18931: CALL_OW 254
18935: PUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 267
18945: PUSH
18946: LD_VAR 0 3
18950: PPUSH
18951: CALL_OW 248
18955: PUSH
18956: LD_VAR 0 3
18960: PPUSH
18961: LD_INT 1
18963: PPUSH
18964: CALL_OW 268
18968: PUSH
18969: LD_VAR 0 3
18973: PPUSH
18974: LD_INT 2
18976: PPUSH
18977: CALL_OW 268
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: ADD
18995: ST_TO_ADDR
18996: GO 19193
// if GetBType ( i ) in [ b_bunker ] then
18998: LD_VAR 0 3
19002: PPUSH
19003: CALL_OW 266
19007: PUSH
19008: LD_INT 32
19010: PUSH
19011: EMPTY
19012: LIST
19013: IN
19014: IFFALSE 19111
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19016: LD_ADDR_VAR 0 4
19020: PUSH
19021: LD_VAR 0 4
19025: PUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 266
19035: PUSH
19036: LD_VAR 0 3
19040: PPUSH
19041: CALL_OW 250
19045: PUSH
19046: LD_VAR 0 3
19050: PPUSH
19051: CALL_OW 251
19055: PUSH
19056: LD_VAR 0 3
19060: PPUSH
19061: CALL_OW 254
19065: PUSH
19066: LD_VAR 0 3
19070: PPUSH
19071: CALL_OW 267
19075: PUSH
19076: LD_VAR 0 3
19080: PPUSH
19081: CALL_OW 248
19085: PUSH
19086: LD_VAR 0 3
19090: PPUSH
19091: CALL_OW 269
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: ADD
19108: ST_TO_ADDR
19109: GO 19193
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19111: LD_ADDR_VAR 0 4
19115: PUSH
19116: LD_VAR 0 4
19120: PUSH
19121: LD_VAR 0 3
19125: PPUSH
19126: CALL_OW 266
19130: PUSH
19131: LD_VAR 0 3
19135: PPUSH
19136: CALL_OW 250
19140: PUSH
19141: LD_VAR 0 3
19145: PPUSH
19146: CALL_OW 251
19150: PUSH
19151: LD_VAR 0 3
19155: PPUSH
19156: CALL_OW 254
19160: PUSH
19161: LD_VAR 0 3
19165: PPUSH
19166: CALL_OW 267
19170: PUSH
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 248
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: ADD
19192: ST_TO_ADDR
// end ;
19193: GO 18857
19195: POP
19196: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
19197: LD_VAR 0 4
19201: PPUSH
19202: LD_STRING 08_GammaBase
19204: PPUSH
19205: CALL_OW 39
// end ;
19209: LD_VAR 0 2
19213: RET
