// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7038 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 1992 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5843 0 0
// PrepareRussians ;
 229: CALL 6161 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8303 0 6
// PrepareCutsceneAttack ;
 312: CALL 5895 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side = 1 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 1
 542: ST_TO_ADDR
// uc_nation = 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// if gammaCommander = 1 then
 551: LD_EXP 12
 555: PUSH
 556: LD_INT 1
 558: EQUAL
 559: IFFALSE 592
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 561: LD_ADDR_EXP 3
 565: PUSH
 566: LD_STRING 04_Donaldson
 568: PPUSH
 569: LD_INT 1
 571: PPUSH
 572: CALL 6579 0 2
 576: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 577: LD_EXP 3
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: LD_INT 0
 587: PPUSH
 588: CALL_OW 49
// end ; if gammaCommander = 2 then
 592: LD_EXP 12
 596: PUSH
 597: LD_INT 2
 599: EQUAL
 600: IFFALSE 633
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 602: LD_ADDR_EXP 2
 606: PUSH
 607: LD_STRING 04_Brown
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 6579 0 2
 617: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 5
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; if gammaCommander = 3 then
 633: LD_EXP 12
 637: PUSH
 638: LD_INT 3
 640: EQUAL
 641: IFFALSE 674
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 643: LD_ADDR_EXP 13
 647: PUSH
 648: LD_STRING VanHouten
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL 6579 0 2
 658: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 659: LD_EXP 13
 663: PPUSH
 664: LD_INT 5
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 674: LD_ADDR_EXP 22
 678: PUSH
 679: LD_STRING Harisson
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
 685: CALL 6579 0 2
 689: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 690: LD_ADDR_EXP 23
 694: PUSH
 695: LD_STRING Powell
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL 6579 0 2
 705: ST_TO_ADDR
// if CheckCharacterSet ( 04_Lisa ) and not LoadVariable ( LisaInDelta , 0 ) and not CheckCharacterSet ( 07_Lisa ) then
 706: LD_STRING 04_Lisa
 708: PPUSH
 709: CALL_OW 29
 713: PUSH
 714: LD_STRING LisaInDelta
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 30
 724: NOT
 725: AND
 726: PUSH
 727: LD_STRING 07_Lisa
 729: PPUSH
 730: CALL_OW 29
 734: NOT
 735: AND
 736: IFFALSE 754
// Lisa := PrepareUnit ( 04_Lisa , true ) ;
 738: LD_ADDR_EXP 6
 742: PUSH
 743: LD_STRING 04_Lisa
 745: PPUSH
 746: LD_INT 1
 748: PPUSH
 749: CALL 6579 0 2
 753: ST_TO_ADDR
// if CheckCharacterSet ( 04_Bobby ) and not LoadVariable ( BobbyInDelta , 0 ) and not CheckCharacterSet ( 07_Bobby ) then
 754: LD_STRING 04_Bobby
 756: PPUSH
 757: CALL_OW 29
 761: PUSH
 762: LD_STRING BobbyInDelta
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 30
 772: NOT
 773: AND
 774: PUSH
 775: LD_STRING 07_Bobby
 777: PPUSH
 778: CALL_OW 29
 782: NOT
 783: AND
 784: IFFALSE 802
// Bobby := PrepareUnit ( 04_Bobby , true ) ;
 786: LD_ADDR_EXP 4
 790: PUSH
 791: LD_STRING 04_Bobby
 793: PPUSH
 794: LD_INT 1
 796: PPUSH
 797: CALL 6579 0 2
 801: ST_TO_ADDR
// if CheckCharacterSet ( 04_Cyrus ) and not LoadVariable ( CyrusInDelta , 0 ) and not CheckCharacterSet ( 07_Cyrus ) then
 802: LD_STRING 04_Cyrus
 804: PPUSH
 805: CALL_OW 29
 809: PUSH
 810: LD_STRING CyrusInDelta
 812: PPUSH
 813: LD_INT 0
 815: PPUSH
 816: CALL_OW 30
 820: NOT
 821: AND
 822: PUSH
 823: LD_STRING 07_Cyrus
 825: PPUSH
 826: CALL_OW 29
 830: NOT
 831: AND
 832: IFFALSE 850
// Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 834: LD_ADDR_EXP 5
 838: PUSH
 839: LD_STRING 04_Cyrus
 841: PPUSH
 842: LD_INT 1
 844: PPUSH
 845: CALL 6579 0 2
 849: ST_TO_ADDR
// if CheckCharacterSet ( 04_Brown ) and not LoadVariable ( BrownInDelta , 0 ) and not CheckCharacterSet ( 07_Brown ) and gammaCommander <> 2 then
 850: LD_STRING 04_Brown
 852: PPUSH
 853: CALL_OW 29
 857: PUSH
 858: LD_STRING BrownInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Brown
 873: PPUSH
 874: CALL_OW 29
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 12
 885: PUSH
 886: LD_INT 2
 888: NONEQUAL
 889: AND
 890: IFFALSE 908
// Brown := PrepareUnit ( 04_Brown , true ) ;
 892: LD_ADDR_EXP 2
 896: PUSH
 897: LD_STRING 04_Brown
 899: PPUSH
 900: LD_INT 1
 902: PPUSH
 903: CALL 6579 0 2
 907: ST_TO_ADDR
// if CheckCharacterSet ( 04_Donaldson ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not CheckCharacterSet ( 07_Donaldson ) and gammaCommander <> 1 then
 908: LD_STRING 04_Donaldson
 910: PPUSH
 911: CALL_OW 29
 915: PUSH
 916: LD_STRING DonaldsonInDelta
 918: PPUSH
 919: LD_INT 0
 921: PPUSH
 922: CALL_OW 30
 926: NOT
 927: AND
 928: PUSH
 929: LD_STRING 07_Donaldson
 931: PPUSH
 932: CALL_OW 29
 936: NOT
 937: AND
 938: PUSH
 939: LD_EXP 12
 943: PUSH
 944: LD_INT 1
 946: NONEQUAL
 947: AND
 948: IFFALSE 966
// Brown := PrepareUnit ( 04_Donaldson , true ) ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_STRING 04_Donaldson
 957: PPUSH
 958: LD_INT 1
 960: PPUSH
 961: CALL 6579 0 2
 965: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 966: LD_ADDR_EXP 11
 970: PUSH
 971: LD_STRING 07_othersGamma
 973: PPUSH
 974: CALL_OW 31
 978: ST_TO_ADDR
// tmp := 8 - others_gamma ;
 979: LD_ADDR_VAR 0 14
 983: PUSH
 984: LD_INT 8
 986: PUSH
 987: LD_EXP 11
 991: MINUS
 992: ST_TO_ADDR
// if tmp then
 993: LD_VAR 0 14
 997: IFFALSE 1050
// for i = 1 to tmp do
 999: LD_ADDR_VAR 0 2
1003: PUSH
1004: DOUBLE
1005: LD_INT 1
1007: DEC
1008: ST_TO_ADDR
1009: LD_VAR 0 14
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1048
// begin PrepareHuman ( false , 1 , 5 ) ;
1017: LD_INT 0
1019: PPUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_INT 5
1025: PPUSH
1026: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1030: LD_ADDR_EXP 11
1034: PUSH
1035: LD_EXP 11
1039: PUSH
1040: CALL_OW 44
1044: ADD
1045: ST_TO_ADDR
// end ;
1046: GO 1014
1048: POP
1049: POP
// if HexInfo ( 61 , 29 ) = 0 then
1050: LD_INT 61
1052: PPUSH
1053: LD_INT 29
1055: PPUSH
1056: CALL_OW 428
1060: PUSH
1061: LD_INT 0
1063: EQUAL
1064: IFFALSE 1095
// begin bc_type := b_barracks ;
1066: LD_ADDR_OWVAR 42
1070: PUSH
1071: LD_INT 5
1073: ST_TO_ADDR
// bc_level := 6 ;
1074: LD_ADDR_OWVAR 43
1078: PUSH
1079: LD_INT 6
1081: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1082: LD_INT 61
1084: PPUSH
1085: LD_INT 29
1087: PPUSH
1088: LD_INT 5
1090: PPUSH
1091: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1095: LD_ADDR_VAR 0 13
1099: PUSH
1100: LD_INT 22
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PUSH
1110: LD_INT 30
1112: PUSH
1113: LD_INT 31
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PPUSH
1124: CALL_OW 69
1128: ST_TO_ADDR
// for i in bun do
1129: LD_ADDR_VAR 0 2
1133: PUSH
1134: LD_VAR 0 13
1138: PUSH
1139: FOR_IN
1140: IFFALSE 1272
// begin x := GetX ( i ) ;
1142: LD_ADDR_VAR 0 3
1146: PUSH
1147: LD_VAR 0 2
1151: PPUSH
1152: CALL_OW 250
1156: ST_TO_ADDR
// y := GetY ( i ) ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_VAR 0 2
1166: PPUSH
1167: CALL_OW 251
1171: ST_TO_ADDR
// d := GetDir ( i ) ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: LD_VAR 0 2
1181: PPUSH
1182: CALL_OW 254
1186: ST_TO_ADDR
// RemoveUnit ( i ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: CALL_OW 64
// bc_type := b_bunker ;
1196: LD_ADDR_OWVAR 42
1200: PUSH
1201: LD_INT 32
1203: ST_TO_ADDR
// bc_level := 6 ;
1204: LD_ADDR_OWVAR 43
1208: PUSH
1209: LD_INT 6
1211: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1212: LD_ADDR_VAR 0 6
1216: PUSH
1217: LD_VAR 0 3
1221: PPUSH
1222: LD_VAR 0 4
1226: PPUSH
1227: LD_VAR 0 5
1231: PPUSH
1232: CALL_OW 47
1236: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1237: LD_VAR 0 6
1241: PPUSH
1242: LD_INT 5
1244: PUSH
1245: LD_INT 4
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_VAR 0 2
1256: PUSH
1257: LD_INT 2
1259: MOD
1260: PUSH
1261: LD_INT 1
1263: PLUS
1264: ARRAY
1265: PPUSH
1266: CALL_OW 431
// end ;
1270: GO 1139
1272: POP
1273: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1274: LD_ADDR_VAR 0 9
1278: PUSH
1279: LD_INT 22
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 30
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1308: LD_ADDR_VAR 0 8
1312: PUSH
1313: LD_INT 22
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 2
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 6
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: LD_INT 30
1338: PUSH
1339: LD_INT 7
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PUSH
1346: LD_INT 30
1348: PUSH
1349: LD_INT 8
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PPUSH
1366: CALL_OW 69
1370: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1371: LD_ADDR_VAR 0 7
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_INT 1
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 30
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1405: LD_ADDR_VAR 0 12
1409: PUSH
1410: LD_INT 22
1412: PUSH
1413: LD_INT 1
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: LD_INT 30
1422: PUSH
1423: LD_INT 36
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PPUSH
1434: CALL_OW 69
1438: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1439: LD_ADDR_VAR 0 13
1443: PUSH
1444: LD_INT 22
1446: PUSH
1447: LD_INT 1
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 2
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 31
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: LD_INT 30
1469: PUSH
1470: LD_INT 32
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PPUSH
1486: CALL_OW 69
1490: ST_TO_ADDR
// for i in others_gamma do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: LD_EXP 11
1500: PUSH
1501: FOR_IN
1502: IFFALSE 1877
// begin placed := false ;
1504: LD_ADDR_VAR 0 11
1508: PUSH
1509: LD_INT 0
1511: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1512: LD_VAR 0 2
1516: PPUSH
1517: CALL_OW 257
1521: PUSH
1522: LD_INT 1
1524: EQUAL
1525: IFFALSE 1650
// begin if UnitFilter ( bun , [ f_empty ] ) then
1527: LD_VAR 0 13
1531: PPUSH
1532: LD_INT 58
1534: PUSH
1535: EMPTY
1536: LIST
1537: PPUSH
1538: CALL_OW 72
1542: IFFALSE 1581
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1544: LD_VAR 0 2
1548: PPUSH
1549: LD_VAR 0 13
1553: PPUSH
1554: LD_INT 58
1556: PUSH
1557: EMPTY
1558: LIST
1559: PPUSH
1560: CALL_OW 72
1564: PUSH
1565: LD_INT 1
1567: ARRAY
1568: PPUSH
1569: CALL_OW 52
// placed := true ;
1573: LD_ADDR_VAR 0 11
1577: PUSH
1578: LD_INT 1
1580: ST_TO_ADDR
// end ; if arm and not placed then
1581: LD_VAR 0 9
1585: PUSH
1586: LD_VAR 0 11
1590: NOT
1591: AND
1592: IFFALSE 1650
// begin for j in arm do
1594: LD_ADDR_VAR 0 10
1598: PUSH
1599: LD_VAR 0 9
1603: PUSH
1604: FOR_IN
1605: IFFALSE 1648
// if UnitsInside ( j ) < 6 then
1607: LD_VAR 0 10
1611: PPUSH
1612: CALL_OW 313
1616: PUSH
1617: LD_INT 6
1619: LESS
1620: IFFALSE 1646
// begin PlaceHumanInUnit ( i , j ) ;
1622: LD_VAR 0 2
1626: PPUSH
1627: LD_VAR 0 10
1631: PPUSH
1632: CALL_OW 52
// placed := true ;
1636: LD_ADDR_VAR 0 11
1640: PUSH
1641: LD_INT 1
1643: ST_TO_ADDR
// break ;
1644: GO 1648
// end ;
1646: GO 1604
1648: POP
1649: POP
// end ; end ; if GetClass ( i ) = 3 then
1650: LD_VAR 0 2
1654: PPUSH
1655: CALL_OW 257
1659: PUSH
1660: LD_INT 3
1662: EQUAL
1663: IFFALSE 1767
// if fac then
1665: LD_VAR 0 7
1669: IFFALSE 1767
// begin if ct then
1671: LD_VAR 0 12
1675: IFFALSE 1703
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1677: LD_VAR 0 2
1681: PPUSH
1682: LD_VAR 0 12
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: PPUSH
1691: CALL_OW 52
// placed := true ;
1695: LD_ADDR_VAR 0 11
1699: PUSH
1700: LD_INT 1
1702: ST_TO_ADDR
// end ; if placed then
1703: LD_VAR 0 11
1707: IFFALSE 1711
// continue ;
1709: GO 1501
// for j in fac do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 7
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; if GetClass ( i ) = 4 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 4
1779: EQUAL
1780: IFFALSE 1844
// if lab then
1782: LD_VAR 0 8
1786: IFFALSE 1844
// begin for j in lab do
1788: LD_ADDR_VAR 0 10
1792: PUSH
1793: LD_VAR 0 8
1797: PUSH
1798: FOR_IN
1799: IFFALSE 1842
// if UnitsInside ( j ) < 6 then
1801: LD_VAR 0 10
1805: PPUSH
1806: CALL_OW 313
1810: PUSH
1811: LD_INT 6
1813: LESS
1814: IFFALSE 1840
// begin PlaceHumanInUnit ( i , j ) ;
1816: LD_VAR 0 2
1820: PPUSH
1821: LD_VAR 0 10
1825: PPUSH
1826: CALL_OW 52
// placed := true ;
1830: LD_ADDR_VAR 0 11
1834: PUSH
1835: LD_INT 1
1837: ST_TO_ADDR
// break ;
1838: GO 1842
// end ;
1840: GO 1798
1842: POP
1843: POP
// end ; if not placed then
1844: LD_VAR 0 11
1848: NOT
1849: IFFALSE 1875
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1851: LD_VAR 0 2
1855: PPUSH
1856: LD_INT 5
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
// ComHold ( i ) ;
1866: LD_VAR 0 2
1870: PPUSH
1871: CALL_OW 140
// end ; end ;
1875: GO 1501
1877: POP
1878: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1879: LD_VAR 0 12
1883: PUSH
1884: LD_VAR 0 12
1888: PUSH
1889: LD_INT 1
1891: ARRAY
1892: PPUSH
1893: CALL_OW 313
1897: AND
1898: IFFALSE 1987
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1900: LD_ADDR_VAR 0 2
1904: PUSH
1905: LD_INT 22
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 33
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: PUSH
1934: FOR_IN
1935: IFFALSE 1985
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_VAR 0 12
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 313
1955: PUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_VAR 0 12
1963: PUSH
1964: LD_INT 1
1966: ARRAY
1967: PPUSH
1968: CALL_OW 313
1972: PPUSH
1973: CALL_OW 12
1977: ARRAY
1978: PPUSH
1979: CALL_OW 135
1983: GO 1934
1985: POP
1986: POP
// end ; end ;
1987: LD_VAR 0 1
1991: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2000: LD_INT 71
2002: PPUSH
2003: LD_INT 5
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2013: LD_ADDR_VAR 0 2
2017: PUSH
2018: LD_STRING GammaBase
2020: PPUSH
2021: EMPTY
2022: PPUSH
2023: CALL_OW 30
2027: ST_TO_ADDR
// uc_side := 1 ;
2028: LD_ADDR_OWVAR 20
2032: PUSH
2033: LD_INT 1
2035: ST_TO_ADDR
// uc_nation := 1 ;
2036: LD_ADDR_OWVAR 21
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// for i in blist do
2044: LD_ADDR_VAR 0 3
2048: PUSH
2049: LD_VAR 0 2
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2463
// begin bc_type := i [ 1 ] ;
2057: LD_ADDR_OWVAR 42
2061: PUSH
2062: LD_VAR 0 3
2066: PUSH
2067: LD_INT 1
2069: ARRAY
2070: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2071: LD_ADDR_OWVAR 43
2075: PUSH
2076: LD_VAR 0 3
2080: PUSH
2081: LD_INT 5
2083: ARRAY
2084: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 1
2092: ARRAY
2093: PUSH
2094: LD_INT 7
2096: PUSH
2097: LD_INT 8
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: IN
2104: IFFALSE 2160
// begin bc_kind1 := i [ 7 ] ;
2106: LD_ADDR_OWVAR 44
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: LD_INT 7
2118: ARRAY
2119: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2120: LD_STRING 06_remoteVehs_1
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: CALL_OW 30
2130: PUSH
2131: LD_INT 1
2133: EQUAL
2134: IFFALSE 2146
// begin bc_kind2 := 15 ;
2136: LD_ADDR_OWVAR 45
2140: PUSH
2141: LD_INT 15
2143: ST_TO_ADDR
// end else
2144: GO 2160
// begin bc_kind2 := i [ 8 ] ;
2146: LD_ADDR_OWVAR 45
2150: PUSH
2151: LD_VAR 0 3
2155: PUSH
2156: LD_INT 8
2158: ARRAY
2159: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2160: LD_OWVAR 42
2164: PUSH
2165: LD_INT 0
2167: EQUAL
2168: IFFALSE 2286
// begin bc_type := b_warehouse ;
2170: LD_ADDR_OWVAR 42
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2178: LD_ADDR_EXP 37
2182: PUSH
2183: LD_VAR 0 3
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: LD_VAR 0 3
2196: PUSH
2197: LD_INT 3
2199: ARRAY
2200: PPUSH
2201: LD_VAR 0 3
2205: PUSH
2206: LD_INT 4
2208: ARRAY
2209: PPUSH
2210: CALL_OW 47
2214: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2215: LD_EXP 37
2219: PPUSH
2220: LD_STRING gamma
2222: PPUSH
2223: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2227: LD_EXP 37
2231: PPUSH
2232: CALL_OW 274
2236: PPUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_INT 400
2242: PUSH
2243: LD_INT 350
2245: PUSH
2246: LD_INT 250
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: PUSH
2254: LD_OWVAR 67
2258: ARRAY
2259: PPUSH
2260: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2264: LD_EXP 37
2268: PPUSH
2269: CALL_OW 274
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: LD_INT 200
2279: PPUSH
2280: CALL_OW 277
// end else
2284: GO 2428
// begin if bc_type = 4 then
2286: LD_OWVAR 42
2290: PUSH
2291: LD_INT 4
2293: EQUAL
2294: IFFALSE 2343
// begin bc_type = 5 ;
2296: LD_ADDR_OWVAR 42
2300: PUSH
2301: LD_INT 5
2303: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_VAR 0 3
2313: PUSH
2314: LD_INT 2
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 3
2322: PUSH
2323: LD_INT 3
2325: ARRAY
2326: PPUSH
2327: LD_VAR 0 3
2331: PUSH
2332: LD_INT 4
2334: ARRAY
2335: PPUSH
2336: CALL_OW 47
2340: ST_TO_ADDR
// end else
2341: GO 2428
// begin bc_type := i [ 1 ] ;
2343: LD_ADDR_OWVAR 42
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 1
2355: ARRAY
2356: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2357: LD_STRING 06_remoteVehs_1
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 30
2367: PUSH
2368: LD_INT 1
2370: EQUAL
2371: PUSH
2372: LD_OWVAR 42
2376: PUSH
2377: LD_INT 7
2379: EQUAL
2380: AND
2381: IFFALSE 2391
// bc_type := b_lab_full ;
2383: LD_ADDR_OWVAR 42
2387: PUSH
2388: LD_INT 8
2390: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2391: LD_ADDR_VAR 0 4
2395: PUSH
2396: LD_VAR 0 3
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: LD_VAR 0 3
2409: PUSH
2410: LD_INT 3
2412: ARRAY
2413: PPUSH
2414: LD_VAR 0 3
2418: PUSH
2419: LD_INT 4
2421: ARRAY
2422: PPUSH
2423: CALL_OW 47
2427: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2428: LD_VAR 0 4
2432: PPUSH
2433: CALL_OW 266
2437: PUSH
2438: LD_INT 32
2440: EQUAL
2441: IFFALSE 2461
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: LD_VAR 0 3
2452: PUSH
2453: LD_INT 7
2455: ARRAY
2456: PPUSH
2457: CALL_OW 431
// end ;
2461: GO 2054
2463: POP
2464: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2465: LD_INT 22
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 30
2477: PUSH
2478: LD_INT 3
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 69
2493: IFFALSE 2741
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2495: LD_ADDR_VAR 0 4
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 1
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 30
2512: PUSH
2513: LD_INT 3
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 69
2528: PUSH
2529: LD_INT 1
2531: ARRAY
2532: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2533: LD_ADDR_VAR 0 6
2537: PUSH
2538: LD_VAR 0 4
2542: PPUSH
2543: CALL_OW 250
2547: PPUSH
2548: LD_VAR 0 4
2552: PPUSH
2553: CALL_OW 251
2557: PPUSH
2558: LD_VAR 0 4
2562: PPUSH
2563: CALL_OW 254
2567: PPUSH
2568: CALL 15985 0 3
2572: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2573: LD_ADDR_VAR 0 2
2577: PUSH
2578: LD_INT 19
2580: PUSH
2581: LD_INT 17
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2588: LD_STRING 06_remoteVehs_1
2590: PPUSH
2591: LD_INT 0
2593: PPUSH
2594: CALL_OW 30
2598: IFFALSE 2621
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2600: LD_ADDR_VAR 0 2
2604: PUSH
2605: LD_VAR 0 2
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: LD_INT 20
2615: PPUSH
2616: CALL_OW 2
2620: ST_TO_ADDR
// for i in tmp do
2621: LD_ADDR_VAR 0 3
2625: PUSH
2626: LD_VAR 0 6
2630: PUSH
2631: FOR_IN
2632: IFFALSE 2739
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2634: LD_VAR 0 3
2638: PUSH
2639: LD_INT 1
2641: ARRAY
2642: PPUSH
2643: LD_VAR 0 3
2647: PUSH
2648: LD_INT 2
2650: ARRAY
2651: PPUSH
2652: CALL_OW 428
2656: PUSH
2657: LD_INT 0
2659: EQUAL
2660: IFFALSE 2737
// begin bc_type := blist [ 1 ] ;
2662: LD_ADDR_OWVAR 42
2666: PUSH
2667: LD_VAR 0 2
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2676: LD_VAR 0 3
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: LD_VAR 0 3
2689: PUSH
2690: LD_INT 2
2692: ARRAY
2693: PPUSH
2694: LD_VAR 0 3
2698: PUSH
2699: LD_INT 3
2701: ARRAY
2702: PPUSH
2703: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2707: LD_ADDR_VAR 0 2
2711: PUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: CALL_OW 3
2724: ST_TO_ADDR
// if blist = 0 then
2725: LD_VAR 0 2
2729: PUSH
2730: LD_INT 0
2732: EQUAL
2733: IFFALSE 2737
// break ;
2735: GO 2739
// end ;
2737: GO 2631
2739: POP
2740: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2741: LD_STRING 06_remoteVehs_1
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 30
2751: PUSH
2752: LD_INT 1
2754: EQUAL
2755: IFFALSE 2959
// begin bc_type = 36 ;
2757: LD_ADDR_OWVAR 42
2761: PUSH
2762: LD_INT 36
2764: ST_TO_ADDR
// bc_level = 4 ;
2765: LD_ADDR_OWVAR 43
2769: PUSH
2770: LD_INT 4
2772: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2773: LD_INT 62
2775: PPUSH
2776: LD_INT 12
2778: PPUSH
2779: LD_INT 3
2781: PPUSH
2782: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2786: LD_ADDR_VAR 0 3
2790: PUSH
2791: DOUBLE
2792: LD_INT 1
2794: DEC
2795: ST_TO_ADDR
2796: LD_INT 3
2798: PUSH
2799: LD_INT 2
2801: PUSH
2802: LD_INT 2
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: PUSH
2810: LD_OWVAR 67
2814: ARRAY
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2957
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2819: LD_ADDR_OWVAR 37
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 2
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: LD_INT 1
2839: PPUSH
2840: LD_INT 2
2842: PPUSH
2843: CALL_OW 12
2847: ARRAY
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: LD_OWVAR 67
2861: ARRAY
2862: ST_TO_ADDR
// vc_engine = 1 ;
2863: LD_ADDR_OWVAR 39
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// vc_control = 2 ;
2871: LD_ADDR_OWVAR 38
2875: PUSH
2876: LD_INT 2
2878: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 3
2886: PUSH
2887: LD_INT 4
2889: PUSH
2890: LD_INT 5
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: LIST
2897: PUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 3
2903: PPUSH
2904: CALL_OW 12
2908: ARRAY
2909: ST_TO_ADDR
// veh = CreateVehicle ;
2910: LD_ADDR_VAR 0 5
2914: PUSH
2915: CALL_OW 45
2919: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2920: LD_VAR 0 5
2924: PPUSH
2925: LD_EXP 37
2929: PPUSH
2930: CALL_OW 250
2934: PPUSH
2935: LD_EXP 37
2939: PPUSH
2940: CALL_OW 251
2944: PPUSH
2945: LD_INT 7
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 50
// end ;
2955: GO 2816
2957: POP
2958: POP
// end ; end ;
2959: LD_VAR 0 1
2963: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2964: LD_INT 0
2966: PPUSH
2967: PPUSH
2968: PPUSH
2969: PPUSH
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// uc_nation = 1 ;
2978: LD_ADDR_OWVAR 21
2982: PUSH
2983: LD_INT 1
2985: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2986: LD_ADDR_EXP 14
2990: PUSH
2991: LD_STRING 06c_Denis
2993: PPUSH
2994: LD_INT 1
2996: PPUSH
2997: CALL 6579 0 2
3001: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3002: LD_EXP 14
3006: PPUSH
3007: LD_INT 4
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3017: LD_ADDR_EXP 15
3021: PUSH
3022: LD_STRING 06c_Joan
3024: PPUSH
3025: LD_INT 1
3027: PPUSH
3028: CALL 6579 0 2
3032: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3033: LD_EXP 15
3037: PPUSH
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3048: LD_STRING GladstoneIn07
3050: PPUSH
3051: LD_INT 0
3053: PPUSH
3054: CALL_OW 30
3058: NOT
3059: IFFALSE 3127
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3061: LD_ADDR_EXP 8
3065: PUSH
3066: LD_STRING 06c_Gladstone
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL 6579 0 2
3076: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3077: LD_EXP 8
3081: NOT
3082: PUSH
3083: LD_STRING GladstoneStayInDelta
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: AND
3094: IFFALSE 3112
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3096: LD_ADDR_EXP 8
3100: PUSH
3101: LD_STRING 05_Gladstone
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: CALL 6579 0 2
3111: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3112: LD_EXP 8
3116: PPUSH
3117: LD_INT 4
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3127: LD_STRING LisaStayInDelta
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 30
3137: IFFALSE 3170
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3139: LD_ADDR_EXP 6
3143: PUSH
3144: LD_STRING 05_Lisa
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL 6579 0 2
3154: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3155: LD_EXP 6
3159: PPUSH
3160: LD_INT 4
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3170: LD_STRING BobbyStayInDelta
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 30
3180: IFFALSE 3213
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3182: LD_ADDR_EXP 4
3186: PUSH
3187: LD_STRING 05_Bobby
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: CALL 6579 0 2
3197: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3198: LD_EXP 4
3202: PPUSH
3203: LD_INT 4
3205: PPUSH
3206: LD_INT 0
3208: PPUSH
3209: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3213: LD_STRING CyrusStayInDelta
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 30
3223: IFFALSE 3256
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3225: LD_ADDR_EXP 5
3229: PUSH
3230: LD_STRING 05_Cyrus
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL 6579 0 2
3240: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3241: LD_EXP 5
3245: PPUSH
3246: LD_INT 4
3248: PPUSH
3249: LD_INT 0
3251: PPUSH
3252: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3256: LD_STRING BrownStayInDelta
3258: PPUSH
3259: LD_INT 0
3261: PPUSH
3262: CALL_OW 30
3266: IFFALSE 3299
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3268: LD_ADDR_EXP 2
3272: PUSH
3273: LD_STRING 05_Brown
3275: PPUSH
3276: LD_INT 1
3278: PPUSH
3279: CALL 6579 0 2
3283: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3284: LD_EXP 2
3288: PPUSH
3289: LD_INT 4
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3299: LD_STRING DonaldsonStayInDelta
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 30
3309: IFFALSE 3342
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3311: LD_ADDR_EXP 3
3315: PUSH
3316: LD_STRING 05_Donaldson
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: CALL 6579 0 2
3326: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3327: LD_EXP 3
3331: PPUSH
3332: LD_INT 4
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3342: LD_ADDR_VAR 0 4
3346: PUSH
3347: LD_STRING OtherStayInDelta
3349: PPUSH
3350: CALL_OW 31
3354: ST_TO_ADDR
// if other then
3355: LD_VAR 0 4
3359: IFFALSE 3404
// for j = 1 to other do
3361: LD_ADDR_VAR 0 3
3365: PUSH
3366: DOUBLE
3367: LD_INT 1
3369: DEC
3370: ST_TO_ADDR
3371: LD_VAR 0 4
3375: PUSH
3376: FOR_TO
3377: IFFALSE 3402
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3379: LD_VAR 0 4
3383: PUSH
3384: LD_VAR 0 3
3388: ARRAY
3389: PPUSH
3390: LD_INT 4
3392: PPUSH
3393: LD_INT 0
3395: PPUSH
3396: CALL_OW 49
3400: GO 3376
3402: POP
3403: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3404: LD_ADDR_VAR 0 4
3408: PUSH
3409: LD_STRING 06_other_apemans
3411: PPUSH
3412: CALL_OW 31
3416: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3417: LD_VAR 0 4
3421: PUSH
3422: LD_INT 5
3424: PUSH
3425: LD_INT 4
3427: PUSH
3428: LD_INT 3
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: PUSH
3436: LD_OWVAR 67
3440: ARRAY
3441: GREATEREQUAL
3442: IFFALSE 3471
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3444: LD_ADDR_VAR 0 3
3448: PUSH
3449: LD_INT 5
3451: PUSH
3452: LD_INT 4
3454: PUSH
3455: LD_INT 3
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: ST_TO_ADDR
3469: GO 3481
// j := other ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_VAR 0 4
3480: ST_TO_ADDR
// for i = 1 to j do
3481: LD_ADDR_VAR 0 2
3485: PUSH
3486: DOUBLE
3487: LD_INT 1
3489: DEC
3490: ST_TO_ADDR
3491: LD_VAR 0 3
3495: PUSH
3496: FOR_TO
3497: IFFALSE 3522
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3499: LD_VAR 0 4
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: LD_INT 0
3515: PPUSH
3516: CALL_OW 49
3520: GO 3496
3522: POP
3523: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3524: LD_INT 4
3526: PPUSH
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 21
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PPUSH
3551: CALL_OW 70
3555: PPUSH
3556: LD_INT 53
3558: PPUSH
3559: LD_INT 19
3561: PPUSH
3562: CALL_OW 111
// firstAttack = 1 ;
3566: LD_ADDR_EXP 33
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// end ;
3574: LD_VAR 0 1
3578: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3579: LD_INT 0
3581: PPUSH
3582: PPUSH
3583: PPUSH
3584: PPUSH
3585: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3586: LD_ADDR_VAR 0 4
3590: PUSH
3591: LD_STRING 07_vehicles
3593: PPUSH
3594: EMPTY
3595: PPUSH
3596: CALL_OW 30
3600: ST_TO_ADDR
// uc_side = 1 ;
3601: LD_ADDR_OWVAR 20
3605: PUSH
3606: LD_INT 1
3608: ST_TO_ADDR
// uc_nation = 1 ;
3609: LD_ADDR_OWVAR 21
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// if vehicles > 0 then
3617: LD_VAR 0 4
3621: PUSH
3622: LD_INT 0
3624: GREATER
3625: IFFALSE 3764
// begin for i = 1 to vehicles do
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_VAR 0 4
3641: PUSH
3642: FOR_TO
3643: IFFALSE 3762
// begin vc_chassis = vehicles [ i ] ;
3645: LD_ADDR_OWVAR 37
3649: PUSH
3650: LD_VAR 0 4
3654: PUSH
3655: LD_VAR 0 2
3659: ARRAY
3660: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3661: LD_ADDR_OWVAR 39
3665: PUSH
3666: LD_VAR 0 4
3670: PUSH
3671: LD_VAR 0 2
3675: PUSH
3676: LD_INT 1
3678: PLUS
3679: ARRAY
3680: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3681: LD_ADDR_OWVAR 38
3685: PUSH
3686: LD_VAR 0 4
3690: PUSH
3691: LD_VAR 0 2
3695: PUSH
3696: LD_INT 2
3698: PLUS
3699: ARRAY
3700: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3701: LD_ADDR_OWVAR 40
3705: PUSH
3706: LD_VAR 0 4
3710: PUSH
3711: LD_VAR 0 2
3715: PUSH
3716: LD_INT 3
3718: PLUS
3719: ARRAY
3720: ST_TO_ADDR
// veh = CreateVehicle ;
3721: LD_ADDR_VAR 0 5
3725: PUSH
3726: CALL_OW 45
3730: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3731: LD_VAR 0 5
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL_OW 49
// i = i + 3 ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: LD_VAR 0 2
3755: PUSH
3756: LD_INT 3
3758: PLUS
3759: ST_TO_ADDR
// end ;
3760: GO 3642
3762: POP
3763: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3764: LD_ADDR_EXP 1
3768: PUSH
3769: LD_EXP 43
3773: PUSH
3774: LD_STRING JMM
3776: STR
3777: PPUSH
3778: LD_INT 1
3780: PPUSH
3781: CALL 6579 0 2
3785: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3786: LD_EXP 12
3790: PUSH
3791: LD_INT 1
3793: EQUAL
3794: PUSH
3795: LD_EXP 12
3799: PUSH
3800: LD_INT 3
3802: EQUAL
3803: OR
3804: PUSH
3805: LD_EXP 2
3809: NOT
3810: AND
3811: IFFALSE 3835
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3813: LD_ADDR_EXP 2
3817: PUSH
3818: LD_EXP 43
3822: PUSH
3823: LD_STRING Brown
3825: STR
3826: PPUSH
3827: LD_INT 1
3829: PPUSH
3830: CALL 6579 0 2
3834: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
3835: LD_EXP 12
3839: PUSH
3840: LD_INT 2
3842: EQUAL
3843: PUSH
3844: LD_EXP 12
3848: PUSH
3849: LD_INT 3
3851: EQUAL
3852: OR
3853: PUSH
3854: LD_EXP 3
3858: NOT
3859: AND
3860: IFFALSE 3884
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3862: LD_ADDR_EXP 3
3866: PUSH
3867: LD_EXP 43
3871: PUSH
3872: LD_STRING Donaldson
3874: STR
3875: PPUSH
3876: LD_INT 1
3878: PPUSH
3879: CALL 6579 0 2
3883: ST_TO_ADDR
// if not Bobby then
3884: LD_EXP 4
3888: NOT
3889: IFFALSE 3913
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3891: LD_ADDR_EXP 4
3895: PUSH
3896: LD_EXP 43
3900: PUSH
3901: LD_STRING Bobby
3903: STR
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 6579 0 2
3912: ST_TO_ADDR
// if not Cyrus then
3913: LD_EXP 5
3917: NOT
3918: IFFALSE 3942
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3920: LD_ADDR_EXP 5
3924: PUSH
3925: LD_EXP 43
3929: PUSH
3930: LD_STRING Cyrus
3932: STR
3933: PPUSH
3934: LD_INT 1
3936: PPUSH
3937: CALL 6579 0 2
3941: ST_TO_ADDR
// if not Lisa then
3942: LD_EXP 6
3946: NOT
3947: IFFALSE 3971
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3949: LD_ADDR_EXP 6
3953: PUSH
3954: LD_EXP 43
3958: PUSH
3959: LD_STRING Lisa
3961: STR
3962: PPUSH
3963: LD_INT 1
3965: PPUSH
3966: CALL 6579 0 2
3970: ST_TO_ADDR
// if not Frank then
3971: LD_EXP 7
3975: NOT
3976: IFFALSE 4000
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3978: LD_ADDR_EXP 7
3982: PUSH
3983: LD_EXP 43
3987: PUSH
3988: LD_STRING Frank
3990: STR
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: CALL 6579 0 2
3999: ST_TO_ADDR
// if not Gladstone then
4000: LD_EXP 8
4004: NOT
4005: IFFALSE 4029
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4007: LD_ADDR_EXP 8
4011: PUSH
4012: LD_EXP 43
4016: PUSH
4017: LD_STRING Gladstone
4019: STR
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL 6579 0 2
4028: ST_TO_ADDR
// if not Kikuchi then
4029: LD_EXP 9
4033: NOT
4034: IFFALSE 4058
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4036: LD_ADDR_EXP 9
4040: PUSH
4041: LD_EXP 43
4045: PUSH
4046: LD_STRING Kikuchi
4048: STR
4049: PPUSH
4050: LD_INT 1
4052: PPUSH
4053: CALL 6579 0 2
4057: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
4058: LD_EXP 12
4062: PUSH
4063: LD_INT 1
4065: EQUAL
4066: PUSH
4067: LD_EXP 12
4071: PUSH
4072: LD_INT 3
4074: EQUAL
4075: OR
4076: IFFALSE 4093
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4078: LD_EXP 2
4082: PPUSH
4083: LD_INT 4
4085: PPUSH
4086: LD_INT 0
4088: PPUSH
4089: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
4093: LD_EXP 12
4097: PUSH
4098: LD_INT 2
4100: EQUAL
4101: PUSH
4102: LD_EXP 12
4106: PUSH
4107: LD_INT 3
4109: EQUAL
4110: OR
4111: IFFALSE 4128
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4113: LD_EXP 3
4117: PPUSH
4118: LD_INT 4
4120: PPUSH
4121: LD_INT 0
4123: PPUSH
4124: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4128: LD_ADDR_VAR 0 5
4132: PUSH
4133: LD_INT 4
4135: PPUSH
4136: LD_INT 22
4138: PUSH
4139: LD_INT 1
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: LD_INT 21
4148: PUSH
4149: LD_INT 2
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 58
4158: PUSH
4159: EMPTY
4160: LIST
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: PPUSH
4167: CALL_OW 70
4171: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4172: LD_ADDR_EXP 1
4176: PUSH
4177: LD_EXP 43
4181: PUSH
4182: LD_STRING JMM
4184: STR
4185: PPUSH
4186: LD_INT 1
4188: PPUSH
4189: CALL 6579 0 2
4193: ST_TO_ADDR
// if veh > 0 then
4194: LD_VAR 0 5
4198: PUSH
4199: LD_INT 0
4201: GREATER
4202: IFFALSE 4224
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4204: LD_EXP 1
4208: PPUSH
4209: LD_VAR 0 5
4213: PUSH
4214: LD_INT 1
4216: ARRAY
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4239
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4224: LD_EXP 1
4228: PPUSH
4229: LD_INT 4
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4239: LD_ADDR_VAR 0 5
4243: PUSH
4244: LD_INT 4
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 2
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 58
4269: PUSH
4270: EMPTY
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: LIST
4277: PPUSH
4278: CALL_OW 70
4282: ST_TO_ADDR
// if not Bobby then
4283: LD_EXP 4
4287: NOT
4288: IFFALSE 4357
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4290: LD_ADDR_EXP 4
4294: PUSH
4295: LD_EXP 43
4299: PUSH
4300: LD_STRING Bobby
4302: STR
4303: PPUSH
4304: LD_INT 1
4306: PPUSH
4307: CALL 6579 0 2
4311: ST_TO_ADDR
// if veh > 0 then
4312: LD_VAR 0 5
4316: PUSH
4317: LD_INT 0
4319: GREATER
4320: IFFALSE 4342
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4322: LD_EXP 4
4326: PPUSH
4327: LD_VAR 0 5
4331: PUSH
4332: LD_INT 1
4334: ARRAY
4335: PPUSH
4336: CALL_OW 52
// end else
4340: GO 4357
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4342: LD_EXP 4
4346: PPUSH
4347: LD_INT 4
4349: PPUSH
4350: LD_INT 0
4352: PPUSH
4353: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4357: LD_ADDR_VAR 0 5
4361: PUSH
4362: LD_INT 4
4364: PPUSH
4365: LD_INT 22
4367: PUSH
4368: LD_INT 1
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_INT 21
4377: PUSH
4378: LD_INT 2
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 58
4387: PUSH
4388: EMPTY
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 70
4400: ST_TO_ADDR
// if not Cyrus then
4401: LD_EXP 5
4405: NOT
4406: IFFALSE 4475
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4408: LD_ADDR_EXP 5
4412: PUSH
4413: LD_EXP 43
4417: PUSH
4418: LD_STRING Cyrus
4420: STR
4421: PPUSH
4422: LD_INT 1
4424: PPUSH
4425: CALL 6579 0 2
4429: ST_TO_ADDR
// if veh > 0 then
4430: LD_VAR 0 5
4434: PUSH
4435: LD_INT 0
4437: GREATER
4438: IFFALSE 4460
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4440: LD_EXP 5
4444: PPUSH
4445: LD_VAR 0 5
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// end else
4458: GO 4475
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4460: LD_EXP 5
4464: PPUSH
4465: LD_INT 4
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4475: LD_ADDR_VAR 0 5
4479: PUSH
4480: LD_INT 4
4482: PPUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 21
4495: PUSH
4496: LD_INT 2
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 58
4505: PUSH
4506: EMPTY
4507: LIST
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: PPUSH
4514: CALL_OW 70
4518: ST_TO_ADDR
// if not Lisa then
4519: LD_EXP 6
4523: NOT
4524: IFFALSE 4593
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4526: LD_ADDR_EXP 6
4530: PUSH
4531: LD_EXP 43
4535: PUSH
4536: LD_STRING Lisa
4538: STR
4539: PPUSH
4540: LD_INT 1
4542: PPUSH
4543: CALL 6579 0 2
4547: ST_TO_ADDR
// if veh > 0 then
4548: LD_VAR 0 5
4552: PUSH
4553: LD_INT 0
4555: GREATER
4556: IFFALSE 4578
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4558: LD_EXP 6
4562: PPUSH
4563: LD_VAR 0 5
4567: PUSH
4568: LD_INT 1
4570: ARRAY
4571: PPUSH
4572: CALL_OW 52
// end else
4576: GO 4593
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4578: LD_EXP 6
4582: PPUSH
4583: LD_INT 4
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4593: LD_ADDR_VAR 0 5
4597: PUSH
4598: LD_INT 4
4600: PPUSH
4601: LD_INT 22
4603: PUSH
4604: LD_INT 1
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 2
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 58
4623: PUSH
4624: EMPTY
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 70
4636: ST_TO_ADDR
// if not Frank then
4637: LD_EXP 7
4641: NOT
4642: IFFALSE 4711
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4644: LD_ADDR_EXP 7
4648: PUSH
4649: LD_EXP 43
4653: PUSH
4654: LD_STRING Frank
4656: STR
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL 6579 0 2
4665: ST_TO_ADDR
// if veh > 0 then
4666: LD_VAR 0 5
4670: PUSH
4671: LD_INT 0
4673: GREATER
4674: IFFALSE 4696
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4676: LD_EXP 7
4680: PPUSH
4681: LD_VAR 0 5
4685: PUSH
4686: LD_INT 1
4688: ARRAY
4689: PPUSH
4690: CALL_OW 52
// end else
4694: GO 4711
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4696: LD_EXP 7
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: LD_INT 4
4718: PPUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 1
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 2
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: LD_INT 58
4741: PUSH
4742: EMPTY
4743: LIST
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 70
4754: ST_TO_ADDR
// if not Gladstone then
4755: LD_EXP 8
4759: NOT
4760: IFFALSE 4829
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4762: LD_ADDR_EXP 8
4766: PUSH
4767: LD_EXP 43
4771: PUSH
4772: LD_STRING Gladstone
4774: STR
4775: PPUSH
4776: LD_INT 1
4778: PPUSH
4779: CALL 6579 0 2
4783: ST_TO_ADDR
// if veh > 0 then
4784: LD_VAR 0 5
4788: PUSH
4789: LD_INT 0
4791: GREATER
4792: IFFALSE 4814
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4794: LD_EXP 8
4798: PPUSH
4799: LD_VAR 0 5
4803: PUSH
4804: LD_INT 1
4806: ARRAY
4807: PPUSH
4808: CALL_OW 52
// end else
4812: GO 4829
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4814: LD_EXP 8
4818: PPUSH
4819: LD_INT 4
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4829: LD_ADDR_VAR 0 5
4833: PUSH
4834: LD_INT 4
4836: PPUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 21
4849: PUSH
4850: LD_INT 2
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 58
4859: PUSH
4860: EMPTY
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PPUSH
4868: CALL_OW 70
4872: ST_TO_ADDR
// if not Kikuchi then
4873: LD_EXP 9
4877: NOT
4878: IFFALSE 4947
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4880: LD_ADDR_EXP 9
4884: PUSH
4885: LD_EXP 43
4889: PUSH
4890: LD_STRING Kikuchi
4892: STR
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: CALL 6579 0 2
4901: ST_TO_ADDR
// if veh > 0 then
4902: LD_VAR 0 5
4906: PUSH
4907: LD_INT 0
4909: GREATER
4910: IFFALSE 4932
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4912: LD_EXP 9
4916: PPUSH
4917: LD_VAR 0 5
4921: PUSH
4922: LD_INT 1
4924: ARRAY
4925: PPUSH
4926: CALL_OW 52
// end else
4930: GO 4947
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4932: LD_EXP 9
4936: PPUSH
4937: LD_INT 4
4939: PPUSH
4940: LD_INT 0
4942: PPUSH
4943: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4947: LD_ADDR_VAR 0 5
4951: PUSH
4952: LD_INT 4
4954: PPUSH
4955: LD_INT 22
4957: PUSH
4958: LD_INT 1
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: LD_INT 21
4967: PUSH
4968: LD_INT 2
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 58
4977: PUSH
4978: EMPTY
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: PPUSH
4986: CALL_OW 70
4990: ST_TO_ADDR
// if not Khatam then
4991: LD_EXP 10
4995: NOT
4996: IFFALSE 5065
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
4998: LD_ADDR_EXP 10
5002: PUSH
5003: LD_EXP 43
5007: PUSH
5008: LD_STRING Khatam
5010: STR
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: CALL 6579 0 2
5019: ST_TO_ADDR
// if veh > 0 then
5020: LD_VAR 0 5
5024: PUSH
5025: LD_INT 0
5027: GREATER
5028: IFFALSE 5050
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5030: LD_EXP 10
5034: PPUSH
5035: LD_VAR 0 5
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PPUSH
5044: CALL_OW 52
// end else
5048: GO 5065
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5050: LD_EXP 10
5054: PPUSH
5055: LD_INT 4
5057: PPUSH
5058: LD_INT 0
5060: PPUSH
5061: CALL_OW 49
// end ; end ; other = CreateCharacterSet ( 07c_others ) ;
5065: LD_ADDR_VAR 0 3
5069: PUSH
5070: LD_STRING 07c_others
5072: PPUSH
5073: CALL_OW 31
5077: ST_TO_ADDR
// for i in other do
5078: LD_ADDR_VAR 0 2
5082: PUSH
5083: LD_VAR 0 3
5087: PUSH
5088: FOR_IN
5089: IFFALSE 5182
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5091: LD_ADDR_VAR 0 5
5095: PUSH
5096: LD_INT 4
5098: PPUSH
5099: LD_INT 22
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 21
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 58
5121: PUSH
5122: EMPTY
5123: LIST
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: CALL_OW 70
5134: ST_TO_ADDR
// if veh > 0 then
5135: LD_VAR 0 5
5139: PUSH
5140: LD_INT 0
5142: GREATER
5143: IFFALSE 5165
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5145: LD_VAR 0 2
5149: PPUSH
5150: LD_VAR 0 5
5154: PUSH
5155: LD_INT 1
5157: ARRAY
5158: PPUSH
5159: CALL_OW 52
// end else
5163: GO 5180
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5165: LD_VAR 0 2
5169: PPUSH
5170: LD_INT 4
5172: PPUSH
5173: LD_INT 0
5175: PPUSH
5176: CALL_OW 49
// end ; end ;
5180: GO 5088
5182: POP
5183: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5184: LD_INT 4
5186: PPUSH
5187: LD_INT 22
5189: PUSH
5190: LD_INT 1
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: EMPTY
5198: LIST
5199: PPUSH
5200: CALL_OW 70
5204: PPUSH
5205: LD_INT 53
5207: PPUSH
5208: LD_INT 19
5210: PPUSH
5211: CALL_OW 111
// end ;
5215: LD_VAR 0 1
5219: RET
// export function PrepareSikorsky ; begin
5220: LD_INT 0
5222: PPUSH
// uc_side = 4 ;
5223: LD_ADDR_OWVAR 20
5227: PUSH
5228: LD_INT 4
5230: ST_TO_ADDR
// uc_nation = 1 ;
5231: LD_ADDR_OWVAR 21
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5239: LD_ADDR_EXP 16
5243: PUSH
5244: LD_STRING Sikorski
5246: PPUSH
5247: LD_INT 0
5249: PPUSH
5250: CALL 6579 0 2
5254: ST_TO_ADDR
// vc_engine = 1 ;
5255: LD_ADDR_OWVAR 39
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// vc_control = 1 ;
5263: LD_ADDR_OWVAR 38
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5271: LD_ADDR_OWVAR 40
5275: PUSH
5276: LD_INT 5
5278: PUSH
5279: LD_INT 3
5281: PUSH
5282: LD_INT 4
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: PUSH
5290: LD_OWVAR 67
5294: ARRAY
5295: ST_TO_ADDR
// vc_chassis = 4 ;
5296: LD_ADDR_OWVAR 37
5300: PUSH
5301: LD_INT 4
5303: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5304: LD_ADDR_EXP 17
5308: PUSH
5309: CALL_OW 45
5313: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5314: LD_EXP 17
5318: PPUSH
5319: LD_INT 9
5321: PPUSH
5322: LD_INT 0
5324: PPUSH
5325: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5329: LD_EXP 16
5333: PPUSH
5334: LD_EXP 17
5338: PPUSH
5339: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5343: LD_EXP 17
5347: PPUSH
5348: LD_INT 5
5350: PPUSH
5351: CALL_OW 113
// end ;
5355: LD_VAR 0 1
5359: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5360: LD_INT 0
5362: PPUSH
5363: PPUSH
5364: PPUSH
5365: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5366: LD_ADDR_VAR 0 2
5370: PUSH
5371: DOUBLE
5372: LD_INT 1
5374: DEC
5375: ST_TO_ADDR
5376: LD_INT 8
5378: PUSH
5379: LD_INT 7
5381: PUSH
5382: LD_INT 7
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: PUSH
5390: LD_OWVAR 67
5394: ARRAY
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5494
// begin uc_side = 4 ;
5399: LD_ADDR_OWVAR 20
5403: PUSH
5404: LD_INT 4
5406: ST_TO_ADDR
// uc_nation = 1 ;
5407: LD_ADDR_OWVAR 21
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// hc_name =  ;
5415: LD_ADDR_OWVAR 26
5419: PUSH
5420: LD_STRING 
5422: ST_TO_ADDR
// hc_gallery =  ;
5423: LD_ADDR_OWVAR 33
5427: PUSH
5428: LD_STRING 
5430: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5431: LD_INT 0
5433: PPUSH
5434: LD_INT 1
5436: PPUSH
5437: LD_INT 5
5439: PPUSH
5440: LD_INT 8
5442: PPUSH
5443: CALL_OW 12
5447: PPUSH
5448: CALL_OW 380
// un = CreateHuman ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: CALL_OW 44
5461: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 9
5469: PPUSH
5470: LD_INT 0
5472: PPUSH
5473: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: LD_INT 53
5484: PPUSH
5485: LD_INT 23
5487: PPUSH
5488: CALL_OW 111
// end ;
5492: GO 5396
5494: POP
5495: POP
// for i = 1 to 3 do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: DOUBLE
5502: LD_INT 1
5504: DEC
5505: ST_TO_ADDR
5506: LD_INT 3
5508: PUSH
5509: FOR_TO
5510: IFFALSE 5607
// begin uc_side = 4 ;
5512: LD_ADDR_OWVAR 20
5516: PUSH
5517: LD_INT 4
5519: ST_TO_ADDR
// uc_nation = 1 ;
5520: LD_ADDR_OWVAR 21
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// hc_name =  ;
5528: LD_ADDR_OWVAR 26
5532: PUSH
5533: LD_STRING 
5535: ST_TO_ADDR
// hc_gallery =  ;
5536: LD_ADDR_OWVAR 33
5540: PUSH
5541: LD_STRING 
5543: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5544: LD_INT 0
5546: PPUSH
5547: LD_INT 4
5549: PPUSH
5550: LD_INT 5
5552: PPUSH
5553: LD_INT 8
5555: PPUSH
5556: CALL_OW 12
5560: PPUSH
5561: CALL_OW 380
// un = CreateHuman ;
5565: LD_ADDR_VAR 0 3
5569: PUSH
5570: CALL_OW 44
5574: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5575: LD_VAR 0 3
5579: PPUSH
5580: LD_INT 9
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 53
5597: PPUSH
5598: LD_INT 23
5600: PPUSH
5601: CALL_OW 111
// end ;
5605: GO 5509
5607: POP
5608: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_INT 9
5621: PUSH
5622: LD_INT 8
5624: PUSH
5625: LD_INT 7
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: PUSH
5633: LD_OWVAR 67
5637: ARRAY
5638: PUSH
5639: FOR_TO
5640: IFFALSE 5836
// begin uc_side = 4 ;
5642: LD_ADDR_OWVAR 20
5646: PUSH
5647: LD_INT 4
5649: ST_TO_ADDR
// uc_nation = 1 ;
5650: LD_ADDR_OWVAR 21
5654: PUSH
5655: LD_INT 1
5657: ST_TO_ADDR
// vc_engine = 1 ;
5658: LD_ADDR_OWVAR 39
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// vc_control = 1 ;
5666: LD_ADDR_OWVAR 38
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5674: LD_ADDR_OWVAR 40
5678: PUSH
5679: LD_INT 3
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: LD_INT 5
5687: PUSH
5688: LD_INT 6
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 1
5699: PPUSH
5700: LD_INT 4
5702: PPUSH
5703: CALL_OW 12
5707: ARRAY
5708: ST_TO_ADDR
// vc_chassis = 4 ;
5709: LD_ADDR_OWVAR 37
5713: PUSH
5714: LD_INT 4
5716: ST_TO_ADDR
// veh = CreateVehicle ;
5717: LD_ADDR_VAR 0 4
5721: PUSH
5722: CALL_OW 45
5726: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 9
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// hc_name =  ;
5742: LD_ADDR_OWVAR 26
5746: PUSH
5747: LD_STRING 
5749: ST_TO_ADDR
// hc_gallery =  ;
5750: LD_ADDR_OWVAR 33
5754: PUSH
5755: LD_STRING 
5757: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5758: LD_INT 0
5760: PPUSH
5761: LD_INT 3
5763: PPUSH
5764: LD_INT 5
5766: PPUSH
5767: LD_INT 8
5769: PPUSH
5770: CALL_OW 12
5774: PPUSH
5775: CALL_OW 380
// un = CreateHuman ;
5779: LD_ADDR_VAR 0 3
5783: PUSH
5784: CALL_OW 44
5788: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 4
5798: PPUSH
5799: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5803: LD_VAR 0 4
5807: PUSH
5808: LD_VAR 0 3
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PPUSH
5817: LD_INT 53
5819: PPUSH
5820: LD_INT 23
5822: PPUSH
5823: CALL_OW 111
// wait ( 0 0$5 ) ;
5827: LD_INT 175
5829: PPUSH
5830: CALL_OW 67
// end ;
5834: GO 5639
5836: POP
5837: POP
// end ; end_of_file
5838: LD_VAR 0 1
5842: RET
// export function PrepareRussianCommander ; begin
5843: LD_INT 0
5845: PPUSH
// uc_side = 3 ;
5846: LD_ADDR_OWVAR 20
5850: PUSH
5851: LD_INT 3
5853: ST_TO_ADDR
// uc_nation = 3 ;
5854: LD_ADDR_OWVAR 21
5858: PUSH
5859: LD_INT 3
5861: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5862: LD_ADDR_EXP 24
5866: PUSH
5867: LD_STRING Borodin
5869: PPUSH
5870: CALL_OW 25
5874: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5875: LD_EXP 24
5879: PPUSH
5880: LD_INT 25
5882: PPUSH
5883: LD_INT 0
5885: PPUSH
5886: CALL_OW 49
// end ;
5890: LD_VAR 0 1
5894: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5895: LD_INT 0
5897: PPUSH
5898: PPUSH
5899: PPUSH
5900: PPUSH
// for i = 1 to 10 do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: DOUBLE
5907: LD_INT 1
5909: DEC
5910: ST_TO_ADDR
5911: LD_INT 10
5913: PUSH
5914: FOR_TO
5915: IFFALSE 5989
// begin uc_side = 6 ;
5917: LD_ADDR_OWVAR 20
5921: PUSH
5922: LD_INT 6
5924: ST_TO_ADDR
// uc_nation = 3 ;
5925: LD_ADDR_OWVAR 21
5929: PUSH
5930: LD_INT 3
5932: ST_TO_ADDR
// hc_gallery =  ;
5933: LD_ADDR_OWVAR 33
5937: PUSH
5938: LD_STRING 
5940: ST_TO_ADDR
// hc_name =  ;
5941: LD_ADDR_OWVAR 26
5945: PUSH
5946: LD_STRING 
5948: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5949: LD_INT 0
5951: PPUSH
5952: LD_INT 1
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL_OW 380
// un = CreateHuman ;
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: CALL_OW 44
5971: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5972: LD_VAR 0 3
5976: PPUSH
5977: LD_INT 1
5979: PPUSH
5980: LD_INT 0
5982: PPUSH
5983: CALL_OW 49
// end ;
5987: GO 5914
5989: POP
5990: POP
// for i = 1 to 3 do
5991: LD_ADDR_VAR 0 2
5995: PUSH
5996: DOUBLE
5997: LD_INT 1
5999: DEC
6000: ST_TO_ADDR
6001: LD_INT 3
6003: PUSH
6004: FOR_TO
6005: IFFALSE 6154
// begin uc_side = 6 ;
6007: LD_ADDR_OWVAR 20
6011: PUSH
6012: LD_INT 6
6014: ST_TO_ADDR
// uc_nation = 3 ;
6015: LD_ADDR_OWVAR 21
6019: PUSH
6020: LD_INT 3
6022: ST_TO_ADDR
// vc_engine = 1 ;
6023: LD_ADDR_OWVAR 39
6027: PUSH
6028: LD_INT 1
6030: ST_TO_ADDR
// vc_control = 1 ;
6031: LD_ADDR_OWVAR 38
6035: PUSH
6036: LD_INT 1
6038: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6039: LD_ADDR_OWVAR 40
6043: PUSH
6044: LD_INT 43
6046: PUSH
6047: LD_INT 44
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 2
6059: PPUSH
6060: CALL_OW 12
6064: ARRAY
6065: ST_TO_ADDR
// vc_chassis = 22 ;
6066: LD_ADDR_OWVAR 37
6070: PUSH
6071: LD_INT 22
6073: ST_TO_ADDR
// veh = CreateVehicle ;
6074: LD_ADDR_VAR 0 4
6078: PUSH
6079: CALL_OW 45
6083: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6084: LD_VAR 0 4
6088: PPUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 0
6094: PPUSH
6095: CALL_OW 49
// hc_gallery =  ;
6099: LD_ADDR_OWVAR 33
6103: PUSH
6104: LD_STRING 
6106: ST_TO_ADDR
// hc_name =  ;
6107: LD_ADDR_OWVAR 26
6111: PUSH
6112: LD_STRING 
6114: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6115: LD_INT 0
6117: PPUSH
6118: LD_INT 3
6120: PPUSH
6121: LD_INT 4
6123: PPUSH
6124: CALL_OW 380
// un = CreateHuman ;
6128: LD_ADDR_VAR 0 3
6132: PUSH
6133: CALL_OW 44
6137: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6138: LD_VAR 0 3
6142: PPUSH
6143: LD_VAR 0 4
6147: PPUSH
6148: CALL_OW 52
// end ;
6152: GO 6004
6154: POP
6155: POP
// end ;
6156: LD_VAR 0 1
6160: RET
// export function PrepareRussians ; var i , un ; begin
6161: LD_INT 0
6163: PPUSH
6164: PPUSH
6165: PPUSH
// for i = 1 to 14 do
6166: LD_ADDR_VAR 0 2
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_INT 14
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6266
// begin uc_side = 3 ;
6182: LD_ADDR_OWVAR 20
6186: PUSH
6187: LD_INT 3
6189: ST_TO_ADDR
// uc_nation = 3 ;
6190: LD_ADDR_OWVAR 21
6194: PUSH
6195: LD_INT 3
6197: ST_TO_ADDR
// hc_gallery =  ;
6198: LD_ADDR_OWVAR 33
6202: PUSH
6203: LD_STRING 
6205: ST_TO_ADDR
// hc_name =  ;
6206: LD_ADDR_OWVAR 26
6210: PUSH
6211: LD_STRING 
6213: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6214: LD_INT 0
6216: PPUSH
6217: LD_INT 1
6219: PPUSH
6220: LD_EXP 25
6224: PPUSH
6225: LD_EXP 26
6229: PPUSH
6230: CALL_OW 12
6234: PPUSH
6235: CALL_OW 380
// un = CreateHuman ;
6239: LD_ADDR_VAR 0 3
6243: PUSH
6244: CALL_OW 44
6248: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6249: LD_VAR 0 3
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: LD_INT 0
6259: PPUSH
6260: CALL_OW 49
// end ;
6264: GO 6179
6266: POP
6267: POP
// for i = 1 to 6 do
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: DOUBLE
6274: LD_INT 1
6276: DEC
6277: ST_TO_ADDR
6278: LD_INT 6
6280: PUSH
6281: FOR_TO
6282: IFFALSE 6368
// begin uc_side = 3 ;
6284: LD_ADDR_OWVAR 20
6288: PUSH
6289: LD_INT 3
6291: ST_TO_ADDR
// uc_nation = 3 ;
6292: LD_ADDR_OWVAR 21
6296: PUSH
6297: LD_INT 3
6299: ST_TO_ADDR
// hc_gallery =  ;
6300: LD_ADDR_OWVAR 33
6304: PUSH
6305: LD_STRING 
6307: ST_TO_ADDR
// hc_name =  ;
6308: LD_ADDR_OWVAR 26
6312: PUSH
6313: LD_STRING 
6315: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6316: LD_INT 0
6318: PPUSH
6319: LD_INT 2
6321: PPUSH
6322: LD_EXP 25
6326: PPUSH
6327: LD_EXP 26
6331: PPUSH
6332: CALL_OW 12
6336: PPUSH
6337: CALL_OW 380
// un = CreateHuman ;
6341: LD_ADDR_VAR 0 3
6345: PUSH
6346: CALL_OW 44
6350: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6351: LD_VAR 0 3
6355: PPUSH
6356: LD_INT 3
6358: PPUSH
6359: LD_INT 0
6361: PPUSH
6362: CALL_OW 49
// end ;
6366: GO 6281
6368: POP
6369: POP
// for i = 1 to 6 do
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: DOUBLE
6376: LD_INT 1
6378: DEC
6379: ST_TO_ADDR
6380: LD_INT 6
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6470
// begin uc_side = 3 ;
6386: LD_ADDR_OWVAR 20
6390: PUSH
6391: LD_INT 3
6393: ST_TO_ADDR
// uc_nation = 3 ;
6394: LD_ADDR_OWVAR 21
6398: PUSH
6399: LD_INT 3
6401: ST_TO_ADDR
// hc_gallery =  ;
6402: LD_ADDR_OWVAR 33
6406: PUSH
6407: LD_STRING 
6409: ST_TO_ADDR
// hc_name =  ;
6410: LD_ADDR_OWVAR 26
6414: PUSH
6415: LD_STRING 
6417: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6418: LD_INT 0
6420: PPUSH
6421: LD_INT 3
6423: PPUSH
6424: LD_EXP 25
6428: PPUSH
6429: LD_EXP 26
6433: PPUSH
6434: CALL_OW 12
6438: PPUSH
6439: CALL_OW 380
// un = CreateHuman ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: CALL_OW 44
6452: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6453: LD_VAR 0 3
6457: PPUSH
6458: LD_INT 3
6460: PPUSH
6461: LD_INT 0
6463: PPUSH
6464: CALL_OW 49
// end ;
6468: GO 6383
6470: POP
6471: POP
// for i = 1 to 4 do
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: DOUBLE
6478: LD_INT 1
6480: DEC
6481: ST_TO_ADDR
6482: LD_INT 4
6484: PUSH
6485: FOR_TO
6486: IFFALSE 6572
// begin uc_side = 3 ;
6488: LD_ADDR_OWVAR 20
6492: PUSH
6493: LD_INT 3
6495: ST_TO_ADDR
// uc_nation = 3 ;
6496: LD_ADDR_OWVAR 21
6500: PUSH
6501: LD_INT 3
6503: ST_TO_ADDR
// hc_gallery =  ;
6504: LD_ADDR_OWVAR 33
6508: PUSH
6509: LD_STRING 
6511: ST_TO_ADDR
// hc_name =  ;
6512: LD_ADDR_OWVAR 26
6516: PUSH
6517: LD_STRING 
6519: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6520: LD_INT 0
6522: PPUSH
6523: LD_INT 4
6525: PPUSH
6526: LD_EXP 25
6530: PPUSH
6531: LD_EXP 26
6535: PPUSH
6536: CALL_OW 12
6540: PPUSH
6541: CALL_OW 380
// un = CreateHuman ;
6545: LD_ADDR_VAR 0 3
6549: PUSH
6550: CALL_OW 44
6554: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6555: LD_VAR 0 3
6559: PPUSH
6560: LD_INT 3
6562: PPUSH
6563: LD_INT 0
6565: PPUSH
6566: CALL_OW 49
// end ;
6570: GO 6485
6572: POP
6573: POP
// end ; end_of_file
6574: LD_VAR 0 1
6578: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6579: LD_INT 0
6581: PPUSH
6582: PPUSH
// if exist_mode then
6583: LD_VAR 0 2
6587: IFFALSE 6606
// unit := CreateCharacter ( ident ) else
6589: LD_ADDR_VAR 0 4
6593: PUSH
6594: LD_VAR 0 1
6598: PPUSH
6599: CALL_OW 34
6603: ST_TO_ADDR
6604: GO 6621
// unit := NewCharacter ( ident ) ;
6606: LD_ADDR_VAR 0 4
6610: PUSH
6611: LD_VAR 0 1
6615: PPUSH
6616: CALL_OW 25
6620: ST_TO_ADDR
// result := unit ;
6621: LD_ADDR_VAR 0 3
6625: PUSH
6626: LD_VAR 0 4
6630: ST_TO_ADDR
// end ;
6631: LD_VAR 0 3
6635: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6636: LD_INT 0
6638: PPUSH
6639: PPUSH
6640: PPUSH
// rnd = rand ( 1 , characters ) ;
6641: LD_ADDR_VAR 0 6
6645: PUSH
6646: LD_INT 1
6648: PPUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: CALL_OW 12
6658: ST_TO_ADDR
// for i = 1 to characters do
6659: LD_ADDR_VAR 0 5
6663: PUSH
6664: DOUBLE
6665: LD_INT 1
6667: DEC
6668: ST_TO_ADDR
6669: LD_VAR 0 1
6673: PUSH
6674: FOR_TO
6675: IFFALSE 6785
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6677: LD_VAR 0 5
6681: PUSH
6682: LD_VAR 0 6
6686: EQUAL
6687: PUSH
6688: LD_VAR 0 1
6692: PUSH
6693: LD_VAR 0 5
6697: ARRAY
6698: PPUSH
6699: CALL_OW 258
6703: PUSH
6704: LD_INT 1
6706: EQUAL
6707: AND
6708: IFFALSE 6730
// Say ( characters [ i ] , dialogMID ) ;
6710: LD_VAR 0 1
6714: PUSH
6715: LD_VAR 0 5
6719: ARRAY
6720: PPUSH
6721: LD_VAR 0 2
6725: PPUSH
6726: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6730: LD_VAR 0 5
6734: PUSH
6735: LD_VAR 0 6
6739: EQUAL
6740: PUSH
6741: LD_VAR 0 1
6745: PUSH
6746: LD_VAR 0 5
6750: ARRAY
6751: PPUSH
6752: CALL_OW 258
6756: PUSH
6757: LD_INT 2
6759: EQUAL
6760: AND
6761: IFFALSE 6783
// Say ( characters [ i ] , dialogFID ) ;
6763: LD_VAR 0 1
6767: PUSH
6768: LD_VAR 0 5
6772: ARRAY
6773: PPUSH
6774: LD_VAR 0 3
6778: PPUSH
6779: CALL_OW 88
// end ;
6783: GO 6674
6785: POP
6786: POP
// end ;
6787: LD_VAR 0 4
6791: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
6796: PPUSH
// uc_side := GetSide ( b ) ;
6797: LD_ADDR_OWVAR 20
6801: PUSH
6802: LD_VAR 0 2
6806: PPUSH
6807: CALL_OW 255
6811: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6812: LD_ADDR_OWVAR 21
6816: PUSH
6817: LD_VAR 0 2
6821: PPUSH
6822: CALL_OW 248
6826: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6827: LD_INT 0
6829: PPUSH
6830: LD_INT 1
6832: PPUSH
6833: LD_VAR 0 1
6837: PPUSH
6838: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6842: LD_ADDR_VAR 0 5
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL_OW 254
6856: PUSH
6857: LD_INT 3
6859: MINUS
6860: ST_TO_ADDR
// if dir < 0 then
6861: LD_VAR 0 5
6865: PUSH
6866: LD_INT 0
6868: LESS
6869: IFFALSE 6885
// dir := 6 + dir ;
6871: LD_ADDR_VAR 0 5
6875: PUSH
6876: LD_INT 6
6878: PUSH
6879: LD_VAR 0 5
6883: PLUS
6884: ST_TO_ADDR
// un := CreateHuman ;
6885: LD_ADDR_VAR 0 4
6889: PUSH
6890: CALL_OW 44
6894: ST_TO_ADDR
// SetDir ( un , dir ) ;
6895: LD_VAR 0 4
6899: PPUSH
6900: LD_VAR 0 5
6904: PPUSH
6905: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6909: LD_VAR 0 4
6913: PPUSH
6914: LD_VAR 0 2
6918: PPUSH
6919: CALL_OW 52
// end ;
6923: LD_VAR 0 3
6927: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
6933: PPUSH
// for i = 1 to count do
6934: LD_ADDR_VAR 0 8
6938: PUSH
6939: DOUBLE
6940: LD_INT 1
6942: DEC
6943: ST_TO_ADDR
6944: LD_VAR 0 6
6948: PUSH
6949: FOR_TO
6950: IFFALSE 7031
// begin uc_side = side ;
6952: LD_ADDR_OWVAR 20
6956: PUSH
6957: LD_VAR 0 1
6961: ST_TO_ADDR
// uc_nation = nation ;
6962: LD_ADDR_OWVAR 21
6966: PUSH
6967: LD_VAR 0 2
6971: ST_TO_ADDR
// hc_gallery =  ;
6972: LD_ADDR_OWVAR 33
6976: PUSH
6977: LD_STRING 
6979: ST_TO_ADDR
// hc_name =  ;
6980: LD_ADDR_OWVAR 26
6984: PUSH
6985: LD_STRING 
6987: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6988: LD_INT 0
6990: PPUSH
6991: LD_VAR 0 5
6995: PPUSH
6996: LD_VAR 0 4
7000: PPUSH
7001: CALL_OW 380
// un = CreateHuman ;
7005: LD_ADDR_VAR 0 10
7009: PUSH
7010: CALL_OW 44
7014: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7015: LD_VAR 0 10
7019: PPUSH
7020: LD_VAR 0 3
7024: PPUSH
7025: CALL_OW 52
// end ;
7029: GO 6949
7031: POP
7032: POP
// end ;
7033: LD_VAR 0 7
7037: RET
// export function PrepareDifficulty ; begin
7038: LD_INT 0
7040: PPUSH
// if Difficulty = 1 then
7041: LD_OWVAR 67
7045: PUSH
7046: LD_INT 1
7048: EQUAL
7049: IFFALSE 7067
// begin RuSolMinLevel = 4 ;
7051: LD_ADDR_EXP 25
7055: PUSH
7056: LD_INT 4
7058: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7059: LD_ADDR_EXP 26
7063: PUSH
7064: LD_INT 6
7066: ST_TO_ADDR
// end ; if Difficulty = 2 then
7067: LD_OWVAR 67
7071: PUSH
7072: LD_INT 2
7074: EQUAL
7075: IFFALSE 7145
// begin RuSolMinLevel = 5 ;
7077: LD_ADDR_EXP 25
7081: PUSH
7082: LD_INT 5
7084: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7085: LD_ADDR_EXP 26
7089: PUSH
7090: LD_INT 6
7092: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7093: LD_INT 51
7095: PPUSH
7096: LD_INT 3
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7106: LD_INT 57
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7119: LD_INT 57
7121: PPUSH
7122: LD_INT 6
7124: PPUSH
7125: LD_INT 2
7127: PPUSH
7128: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7132: LD_INT 51
7134: PPUSH
7135: LD_INT 6
7137: PPUSH
7138: LD_INT 2
7140: PPUSH
7141: CALL_OW 322
// end ; if Difficulty = 3 then
7145: LD_OWVAR 67
7149: PUSH
7150: LD_INT 3
7152: EQUAL
7153: IFFALSE 7236
// begin RuSolMinLevel = 5 ;
7155: LD_ADDR_EXP 25
7159: PUSH
7160: LD_INT 5
7162: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7163: LD_ADDR_EXP 26
7167: PUSH
7168: LD_INT 6
7170: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7171: LD_INT 57
7173: PPUSH
7174: LD_INT 3
7176: PPUSH
7177: LD_INT 1
7179: PPUSH
7180: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7184: LD_INT 51
7186: PPUSH
7187: LD_INT 3
7189: PPUSH
7190: LD_INT 1
7192: PPUSH
7193: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7197: LD_INT 52
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_INT 1
7205: PPUSH
7206: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7210: LD_INT 57
7212: PPUSH
7213: LD_INT 6
7215: PPUSH
7216: LD_INT 2
7218: PPUSH
7219: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7223: LD_INT 52
7225: PPUSH
7226: LD_INT 6
7228: PPUSH
7229: LD_INT 2
7231: PPUSH
7232: CALL_OW 322
// end ; end ;
7236: LD_VAR 0 1
7240: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7241: LD_INT 0
7243: PPUSH
7244: PPUSH
7245: PPUSH
7246: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 25
7264: PUSH
7265: LD_INT 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PPUSH
7276: CALL_OW 69
7280: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7281: LD_ADDR_VAR 0 4
7285: PUSH
7286: LD_INT 4
7288: PUSH
7289: LD_INT 75
7291: PUSH
7292: LD_INT 79
7294: PUSH
7295: LD_INT 2
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 4
7306: PUSH
7307: LD_INT 113
7309: PUSH
7310: LD_INT 94
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 29
7324: PUSH
7325: LD_INT 106
7327: PUSH
7328: LD_INT 97
7330: PUSH
7331: LD_INT 3
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: LD_INT 26
7342: PUSH
7343: LD_INT 93
7345: PUSH
7346: LD_INT 97
7348: PUSH
7349: LD_INT 5
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: LD_INT 100
7363: PUSH
7364: LD_INT 89
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 17
7378: PUSH
7379: LD_INT 96
7381: PUSH
7382: LD_INT 89
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 32
7396: PUSH
7397: LD_INT 78
7399: PUSH
7400: LD_INT 94
7402: PUSH
7403: LD_INT 1
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 32
7414: PUSH
7415: LD_INT 95
7417: PUSH
7418: LD_INT 82
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 32
7432: PUSH
7433: LD_INT 104
7435: PUSH
7436: LD_INT 85
7438: PUSH
7439: LD_INT 2
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 32
7450: PUSH
7451: LD_INT 81
7453: PUSH
7454: LD_INT 78
7456: PUSH
7457: LD_INT 2
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 33
7468: PUSH
7469: LD_INT 109
7471: PUSH
7472: LD_INT 90
7474: PUSH
7475: LD_INT 3
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: PUSH
7484: LD_INT 33
7486: PUSH
7487: LD_INT 88
7489: PUSH
7490: LD_INT 79
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 33
7504: PUSH
7505: LD_INT 76
7507: PUSH
7508: LD_INT 87
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 26
7522: PUSH
7523: LD_INT 96
7525: PUSH
7526: LD_INT 97
7528: PUSH
7529: LD_INT 5
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 26
7540: PUSH
7541: LD_INT 85
7543: PUSH
7544: LD_INT 84
7546: PUSH
7547: LD_INT 2
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 6
7558: PUSH
7559: LD_INT 88
7561: PUSH
7562: LD_INT 95
7564: PUSH
7565: LD_INT 0
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 19
7576: PUSH
7577: LD_INT 103
7579: PUSH
7580: LD_INT 89
7582: PUSH
7583: LD_INT 4
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 16
7594: PUSH
7595: LD_INT 97
7597: PUSH
7598: LD_INT 86
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 24
7612: PUSH
7613: LD_INT 100
7615: PUSH
7616: LD_INT 85
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: ST_TO_ADDR
// for i := 1 to buildingsTab do
7649: LD_ADDR_VAR 0 2
7653: PUSH
7654: DOUBLE
7655: LD_INT 1
7657: DEC
7658: ST_TO_ADDR
7659: LD_VAR 0 4
7663: PUSH
7664: FOR_TO
7665: IFFALSE 7738
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7667: LD_VAR 0 3
7671: PPUSH
7672: LD_VAR 0 4
7676: PUSH
7677: LD_VAR 0 2
7681: ARRAY
7682: PUSH
7683: LD_INT 1
7685: ARRAY
7686: PPUSH
7687: LD_VAR 0 4
7691: PUSH
7692: LD_VAR 0 2
7696: ARRAY
7697: PUSH
7698: LD_INT 2
7700: ARRAY
7701: PPUSH
7702: LD_VAR 0 4
7706: PUSH
7707: LD_VAR 0 2
7711: ARRAY
7712: PUSH
7713: LD_INT 3
7715: ARRAY
7716: PPUSH
7717: LD_VAR 0 4
7721: PUSH
7722: LD_VAR 0 2
7726: ARRAY
7727: PUSH
7728: LD_INT 4
7730: ARRAY
7731: PPUSH
7732: CALL_OW 205
7736: GO 7664
7738: POP
7739: POP
// end ;
7740: LD_VAR 0 1
7744: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7745: LD_INT 0
7747: PPUSH
7748: PPUSH
// for i in charactersList do
7749: LD_ADDR_VAR 0 4
7753: PUSH
7754: LD_VAR 0 1
7758: PUSH
7759: FOR_IN
7760: IFFALSE 7789
// begin if IsOk ( i ) then
7762: LD_VAR 0 4
7766: PPUSH
7767: CALL_OW 302
7771: IFFALSE 7787
// SaveCharacters ( i , ident ) ;
7773: LD_VAR 0 4
7777: PPUSH
7778: LD_VAR 0 2
7782: PPUSH
7783: CALL_OW 38
// end ;
7787: GO 7759
7789: POP
7790: POP
// end ;
7791: LD_VAR 0 3
7795: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7796: LD_INT 0
7798: PPUSH
7799: PPUSH
7800: PPUSH
7801: PPUSH
// for i = 1 to 72 do
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: DOUBLE
7808: LD_INT 1
7810: DEC
7811: ST_TO_ADDR
7812: LD_INT 72
7814: PUSH
7815: FOR_TO
7816: IFFALSE 7874
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7818: LD_VAR 0 5
7822: PPUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL_OW 321
7832: PUSH
7833: LD_INT 1
7835: EQUAL
7836: PUSH
7837: LD_VAR 0 5
7841: PPUSH
7842: LD_VAR 0 3
7846: PPUSH
7847: CALL_OW 482
7851: PUSH
7852: LD_INT 1
7854: EQUAL
7855: AND
7856: IFFALSE 7872
// AddComResearch ( lab , i ) ;
7858: LD_VAR 0 2
7862: PPUSH
7863: LD_VAR 0 5
7867: PPUSH
7868: CALL_OW 184
7872: GO 7815
7874: POP
7875: POP
// end ;
7876: LD_VAR 0 4
7880: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7881: LD_INT 0
7883: PPUSH
7884: PPUSH
7885: PPUSH
7886: PPUSH
7887: PPUSH
7888: PPUSH
7889: PPUSH
7890: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7891: LD_ADDR_VAR 0 6
7895: PUSH
7896: LD_VAR 0 2
7900: PPUSH
7901: LD_INT 22
7903: PUSH
7904: LD_VAR 0 1
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 56
7915: PUSH
7916: EMPTY
7917: LIST
7918: PUSH
7919: LD_INT 24
7921: PUSH
7922: LD_INT 700
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 60
7934: PUSH
7935: EMPTY
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: LD_INT 25
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 25
7957: PUSH
7958: LD_INT 5
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 25
7967: PUSH
7968: LD_INT 8
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 25
7977: PUSH
7978: LD_INT 9
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 70
8003: PUSH
8004: LD_EXP 24
8008: PUSH
8009: EMPTY
8010: LIST
8011: DIFF
8012: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8013: LD_ADDR_VAR 0 7
8017: PUSH
8018: LD_VAR 0 2
8022: PPUSH
8023: LD_INT 22
8025: PUSH
8026: LD_VAR 0 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 30
8037: PUSH
8038: LD_INT 32
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 58
8047: PUSH
8048: EMPTY
8049: LIST
8050: PUSH
8051: LD_INT 24
8053: PUSH
8054: LD_INT 251
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 70
8071: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8072: LD_ADDR_VAR 0 9
8076: PUSH
8077: LD_VAR 0 2
8081: PPUSH
8082: LD_INT 22
8084: PUSH
8085: LD_VAR 0 1
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 2
8096: PUSH
8097: LD_INT 30
8099: PUSH
8100: LD_INT 4
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 30
8109: PUSH
8110: LD_INT 5
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 24
8124: PUSH
8125: LD_INT 251
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 70
8141: ST_TO_ADDR
// if barrackList > 0 then
8142: LD_VAR 0 9
8146: PUSH
8147: LD_INT 0
8149: GREATER
8150: IFFALSE 8298
// begin if turretList = 0 then
8152: LD_VAR 0 7
8156: PUSH
8157: LD_INT 0
8159: EQUAL
8160: IFFALSE 8202
// begin if soldiers_list > 0 then
8162: LD_VAR 0 6
8166: PUSH
8167: LD_INT 0
8169: GREATER
8170: IFFALSE 8200
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8172: LD_VAR 0 6
8176: PPUSH
8177: LD_VAR 0 9
8181: PUSH
8182: LD_INT 1
8184: PPUSH
8185: LD_VAR 0 9
8189: PPUSH
8190: CALL_OW 12
8194: ARRAY
8195: PPUSH
8196: CALL_OW 120
// end else
8200: GO 8298
// begin for i in barrackList do
8202: LD_ADDR_VAR 0 4
8206: PUSH
8207: LD_VAR 0 9
8211: PUSH
8212: FOR_IN
8213: IFFALSE 8296
// begin insideUnits = UnitsInside ( i ) ;
8215: LD_ADDR_VAR 0 10
8219: PUSH
8220: LD_VAR 0 4
8224: PPUSH
8225: CALL_OW 313
8229: ST_TO_ADDR
// if insideUnits > 0 then
8230: LD_VAR 0 10
8234: PUSH
8235: LD_INT 0
8237: GREATER
8238: IFFALSE 8262
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8240: LD_VAR 0 10
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: PPUSH
8249: LD_VAR 0 7
8253: PUSH
8254: LD_INT 1
8256: ARRAY
8257: PPUSH
8258: CALL_OW 120
// if soldiers_list > 0 then
8262: LD_VAR 0 6
8266: PUSH
8267: LD_INT 0
8269: GREATER
8270: IFFALSE 8294
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8272: LD_VAR 0 6
8276: PUSH
8277: LD_INT 1
8279: ARRAY
8280: PPUSH
8281: LD_VAR 0 7
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: CALL_OW 120
// end ;
8294: GO 8212
8296: POP
8297: POP
// end ; end ; end ;
8298: LD_VAR 0 3
8302: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
// for i = 1 to infantryCount do
8311: LD_ADDR_VAR 0 8
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_VAR 0 5
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8443
// begin uc_side = side ;
8329: LD_ADDR_OWVAR 20
8333: PUSH
8334: LD_VAR 0 1
8338: ST_TO_ADDR
// uc_nation = nation ;
8339: LD_ADDR_OWVAR 21
8343: PUSH
8344: LD_VAR 0 3
8348: ST_TO_ADDR
// hc_class = 1 ;
8349: LD_ADDR_OWVAR 28
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// hc_name =  ;
8357: LD_ADDR_OWVAR 26
8361: PUSH
8362: LD_STRING 
8364: ST_TO_ADDR
// hc_gallery =  ;
8365: LD_ADDR_OWVAR 33
8369: PUSH
8370: LD_STRING 
8372: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8373: LD_INT 0
8375: PPUSH
8376: LD_INT 1
8378: PPUSH
8379: LD_EXP 25
8383: PPUSH
8384: LD_EXP 26
8388: PPUSH
8389: CALL_OW 12
8393: PPUSH
8394: CALL_OW 380
// un = CreateHuman ;
8398: LD_ADDR_VAR 0 10
8402: PUSH
8403: CALL_OW 44
8407: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8408: LD_VAR 0 10
8412: PPUSH
8413: LD_VAR 0 2
8417: PPUSH
8418: LD_INT 0
8420: PPUSH
8421: CALL_OW 49
// defenders_list = defenders_list ^ un ;
8425: LD_ADDR_EXP 32
8429: PUSH
8430: LD_EXP 32
8434: PUSH
8435: LD_VAR 0 10
8439: ADD
8440: ST_TO_ADDR
// end ;
8441: GO 8326
8443: POP
8444: POP
// for i = 1 to vehCount do
8445: LD_ADDR_VAR 0 8
8449: PUSH
8450: DOUBLE
8451: LD_INT 1
8453: DEC
8454: ST_TO_ADDR
8455: LD_VAR 0 6
8459: PUSH
8460: FOR_TO
8461: IFFALSE 8668
// begin uc_side = side ;
8463: LD_ADDR_OWVAR 20
8467: PUSH
8468: LD_VAR 0 1
8472: ST_TO_ADDR
// uc_nation = nation ;
8473: LD_ADDR_OWVAR 21
8477: PUSH
8478: LD_VAR 0 3
8482: ST_TO_ADDR
// vc_Chassis = 22 ;
8483: LD_ADDR_OWVAR 37
8487: PUSH
8488: LD_INT 22
8490: ST_TO_ADDR
// vc_engine = 1 ;
8491: LD_ADDR_OWVAR 39
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// vc_control = 1 ;
8499: LD_ADDR_OWVAR 38
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8507: LD_ADDR_OWVAR 40
8511: PUSH
8512: LD_INT 43
8514: PUSH
8515: LD_INT 44
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 1
8524: PPUSH
8525: LD_INT 2
8527: PPUSH
8528: CALL_OW 12
8532: ARRAY
8533: ST_TO_ADDR
// veh = CreateVehicle ;
8534: LD_ADDR_VAR 0 12
8538: PUSH
8539: CALL_OW 45
8543: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8544: LD_VAR 0 12
8548: PPUSH
8549: LD_VAR 0 2
8553: PPUSH
8554: LD_INT 0
8556: PPUSH
8557: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8561: LD_ADDR_EXP 32
8565: PUSH
8566: LD_EXP 32
8570: PUSH
8571: LD_VAR 0 12
8575: ADD
8576: ST_TO_ADDR
// hc_class = 3 ;
8577: LD_ADDR_OWVAR 28
8581: PUSH
8582: LD_INT 3
8584: ST_TO_ADDR
// hc_name =  ;
8585: LD_ADDR_OWVAR 26
8589: PUSH
8590: LD_STRING 
8592: ST_TO_ADDR
// hc_gallery =  ;
8593: LD_ADDR_OWVAR 33
8597: PUSH
8598: LD_STRING 
8600: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8601: LD_INT 0
8603: PPUSH
8604: LD_INT 3
8606: PPUSH
8607: LD_EXP 25
8611: PPUSH
8612: LD_EXP 26
8616: PPUSH
8617: CALL_OW 12
8621: PPUSH
8622: CALL_OW 380
// un = CreateHuman ;
8626: LD_ADDR_VAR 0 10
8630: PUSH
8631: CALL_OW 44
8635: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8636: LD_VAR 0 10
8640: PPUSH
8641: LD_VAR 0 12
8645: PPUSH
8646: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8650: LD_ADDR_EXP 32
8654: PUSH
8655: LD_EXP 32
8659: PUSH
8660: LD_VAR 0 10
8664: ADD
8665: ST_TO_ADDR
// end ;
8666: GO 8460
8668: POP
8669: POP
// end ;
8670: LD_VAR 0 7
8674: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8675: LD_INT 0
8677: PPUSH
8678: PPUSH
8679: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8680: LD_VAR 0 2
8684: PPUSH
8685: LD_INT 22
8687: PUSH
8688: LD_VAR 0 1
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: PPUSH
8700: CALL_OW 70
8704: PUSH
8705: LD_INT 0
8707: EQUAL
8708: PUSH
8709: LD_EXP 32
8713: PUSH
8714: LD_INT 0
8716: GREATER
8717: AND
8718: IFFALSE 8747
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8720: LD_EXP 32
8724: PPUSH
8725: LD_INT 65
8727: PPUSH
8728: LD_INT 68
8730: PPUSH
8731: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8735: LD_EXP 32
8739: PPUSH
8740: LD_INT 100
8742: PPUSH
8743: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8747: LD_VAR 0 2
8751: PPUSH
8752: LD_INT 22
8754: PUSH
8755: LD_VAR 0 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: EMPTY
8765: LIST
8766: PPUSH
8767: CALL_OW 70
8771: PUSH
8772: LD_INT 0
8774: GREATER
8775: PUSH
8776: LD_EXP 32
8780: PUSH
8781: LD_INT 0
8783: GREATER
8784: AND
8785: IFFALSE 8864
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8787: LD_EXP 32
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: LD_INT 22
8799: PUSH
8800: LD_VAR 0 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: PPUSH
8812: CALL_OW 70
8816: PUSH
8817: LD_INT 1
8819: ARRAY
8820: PPUSH
8821: CALL_OW 250
8825: PPUSH
8826: LD_VAR 0 2
8830: PPUSH
8831: LD_INT 22
8833: PUSH
8834: LD_VAR 0 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: PPUSH
8846: CALL_OW 70
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: CALL_OW 251
8859: PPUSH
8860: CALL_OW 114
// end ;
8864: LD_VAR 0 3
8868: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8869: LD_INT 0
8871: PPUSH
8872: PPUSH
8873: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8874: LD_INT 22
8876: PUSH
8877: LD_VAR 0 1
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 21
8888: PUSH
8889: LD_INT 2
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: PUSH
8905: LD_VAR 0 3
8909: LESSEQUAL
8910: IFFALSE 9018
// begin for i = 1 to vehCount do
8912: LD_ADDR_VAR 0 9
8916: PUSH
8917: DOUBLE
8918: LD_INT 1
8920: DEC
8921: ST_TO_ADDR
8922: LD_VAR 0 3
8926: PUSH
8927: FOR_TO
8928: IFFALSE 9016
// begin weapon = weaponTab [ i ] ;
8930: LD_ADDR_VAR 0 10
8934: PUSH
8935: LD_VAR 0 4
8939: PUSH
8940: LD_VAR 0 9
8944: ARRAY
8945: ST_TO_ADDR
// if weapon = 46 then
8946: LD_VAR 0 10
8950: PUSH
8951: LD_INT 46
8953: EQUAL
8954: IFFALSE 8985
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8956: LD_VAR 0 2
8960: PPUSH
8961: LD_INT 24
8963: PPUSH
8964: LD_VAR 0 5
8968: PPUSH
8969: LD_VAR 0 6
8973: PPUSH
8974: LD_VAR 0 10
8978: PPUSH
8979: CALL_OW 185
// end else
8983: GO 9014
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8985: LD_VAR 0 2
8989: PPUSH
8990: LD_VAR 0 7
8994: PPUSH
8995: LD_VAR 0 5
8999: PPUSH
9000: LD_VAR 0 6
9004: PPUSH
9005: LD_VAR 0 10
9009: PPUSH
9010: CALL_OW 185
// end ; end ;
9014: GO 8927
9016: POP
9017: POP
// end ; end ;
9018: LD_VAR 0 8
9022: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9023: LD_INT 0
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9029: LD_ADDR_VAR 0 8
9033: PUSH
9034: LD_INT 22
9036: PUSH
9037: LD_VAR 0 1
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 2
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 3
9058: PUSH
9059: LD_INT 24
9061: PUSH
9062: LD_INT 650
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: LIST
9077: PPUSH
9078: CALL_OW 69
9082: ST_TO_ADDR
// if damageVehicles > 0 then
9083: LD_VAR 0 8
9087: PUSH
9088: LD_INT 0
9090: GREATER
9091: IFFALSE 9112
// ComMoveXY ( damageVehicles , repX , repY ) ;
9093: LD_VAR 0 8
9097: PPUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: LD_VAR 0 4
9107: PPUSH
9108: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9112: LD_VAR 0 8
9116: PPUSH
9117: LD_INT 95
9119: PUSH
9120: LD_VAR 0 2
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 3
9131: PUSH
9132: LD_INT 58
9134: PUSH
9135: EMPTY
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 72
9150: PUSH
9151: LD_INT 0
9153: GREATER
9154: IFFALSE 9221
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9156: LD_ADDR_VAR 0 6
9160: PUSH
9161: LD_VAR 0 8
9165: PPUSH
9166: LD_INT 95
9168: PUSH
9169: LD_VAR 0 2
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 3
9180: PUSH
9181: LD_INT 58
9183: PUSH
9184: EMPTY
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PPUSH
9195: CALL_OW 72
9199: PUSH
9200: FOR_IN
9201: IFFALSE 9219
// ComExitVehicle ( UnitsInside ( i ) ) ;
9203: LD_VAR 0 6
9207: PPUSH
9208: CALL_OW 313
9212: PPUSH
9213: CALL_OW 121
9217: GO 9200
9219: POP
9220: POP
// end ;
9221: LD_VAR 0 5
9225: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9226: LD_INT 0
9228: PPUSH
9229: PPUSH
9230: PPUSH
9231: PPUSH
9232: PPUSH
9233: PPUSH
9234: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9235: LD_ADDR_VAR 0 8
9239: PUSH
9240: LD_INT 22
9242: PUSH
9243: LD_VAR 0 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 21
9254: PUSH
9255: LD_INT 2
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 24
9264: PUSH
9265: LD_INT 250
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 3
9274: PUSH
9275: LD_INT 58
9277: PUSH
9278: EMPTY
9279: LIST
9280: PUSH
9281: LD_INT 2
9283: PUSH
9284: LD_INT 34
9286: PUSH
9287: LD_INT 43
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 34
9296: PUSH
9297: LD_INT 44
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 34
9306: PUSH
9307: LD_INT 46
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: PPUSH
9331: CALL_OW 69
9335: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9336: LD_INT 22
9338: PUSH
9339: LD_VAR 0 1
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 21
9350: PUSH
9351: LD_INT 2
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: LD_INT 24
9360: PUSH
9361: LD_INT 1000
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 3
9370: PUSH
9371: LD_INT 58
9373: PUSH
9374: EMPTY
9375: LIST
9376: PUSH
9377: LD_INT 2
9379: PUSH
9380: LD_INT 34
9382: PUSH
9383: LD_INT 43
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: LD_INT 34
9392: PUSH
9393: LD_INT 44
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 34
9402: PUSH
9403: LD_INT 46
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: PUSH
9432: LD_INT 5
9434: PUSH
9435: LD_INT 6
9437: PUSH
9438: LD_INT 7
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_OWVAR 67
9450: ARRAY
9451: GREATEREQUAL
9452: IFFALSE 10017
// repeat wait ( 0 0$1 ) ;
9454: LD_INT 35
9456: PPUSH
9457: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9461: LD_ADDR_VAR 0 8
9465: PUSH
9466: LD_INT 22
9468: PUSH
9469: LD_VAR 0 1
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 21
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 24
9490: PUSH
9491: LD_INT 250
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 34
9503: PUSH
9504: LD_INT 43
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 34
9513: PUSH
9514: LD_INT 44
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 34
9523: PUSH
9524: LD_INT 46
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 3
9539: PUSH
9540: LD_INT 58
9542: PUSH
9543: EMPTY
9544: LIST
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: PPUSH
9557: CALL_OW 69
9561: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9562: LD_INT 22
9564: PUSH
9565: LD_VAR 0 1
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 95
9576: PUSH
9577: LD_VAR 0 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 69
9594: NOT
9595: PUSH
9596: LD_VAR 0 11
9600: PUSH
9601: LD_INT 0
9603: EQUAL
9604: AND
9605: IFFALSE 9660
// for i := 1 to wayX do
9607: LD_ADDR_VAR 0 6
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9658
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9625: LD_VAR 0 8
9629: PPUSH
9630: LD_VAR 0 3
9634: PUSH
9635: LD_VAR 0 6
9639: ARRAY
9640: PPUSH
9641: LD_VAR 0 4
9645: PUSH
9646: LD_VAR 0 6
9650: ARRAY
9651: PPUSH
9652: CALL_OW 114
9656: GO 9622
9658: POP
9659: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9660: LD_INT 22
9662: PUSH
9663: LD_VAR 0 1
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 95
9674: PUSH
9675: LD_VAR 0 2
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 69
9692: IFFALSE 9916
// begin seeEnemy = 1 ;
9694: LD_ADDR_VAR 0 11
9698: PUSH
9699: LD_INT 1
9701: ST_TO_ADDR
// for j in vehiclesOK do
9702: LD_ADDR_VAR 0 7
9706: PUSH
9707: LD_VAR 0 8
9711: PUSH
9712: FOR_IN
9713: IFFALSE 9914
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9715: LD_ADDR_VAR 0 9
9719: PUSH
9720: LD_INT 81
9722: PUSH
9723: LD_VAR 0 1
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 101
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PPUSH
9746: CALL_OW 69
9750: PPUSH
9751: LD_VAR 0 7
9755: PPUSH
9756: CALL_OW 74
9760: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9761: LD_ADDR_VAR 0 10
9765: PUSH
9766: LD_INT 81
9768: PUSH
9769: LD_VAR 0 1
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 101
9780: PUSH
9781: LD_INT 1
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 2
9790: PUSH
9791: LD_INT 59
9793: PUSH
9794: EMPTY
9795: LIST
9796: PUSH
9797: LD_INT 21
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 21
9809: PUSH
9810: LD_INT 2
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: EMPTY
9829: LIST
9830: PPUSH
9831: CALL_OW 69
9835: PPUSH
9836: LD_VAR 0 7
9840: PPUSH
9841: CALL_OW 74
9845: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9846: LD_VAR 0 7
9850: PPUSH
9851: LD_VAR 0 9
9855: PPUSH
9856: CALL_OW 296
9860: PUSH
9861: LD_INT 8
9863: PLUS
9864: PUSH
9865: LD_VAR 0 7
9869: PPUSH
9870: LD_VAR 0 10
9874: PPUSH
9875: CALL_OW 296
9879: LESS
9880: IFFALSE 9898
// ComAttackUnit ( j , target1 ) else
9882: LD_VAR 0 7
9886: PPUSH
9887: LD_VAR 0 9
9891: PPUSH
9892: CALL_OW 115
9896: GO 9912
// ComAttackUnit ( j , target2 ) ;
9898: LD_VAR 0 7
9902: PPUSH
9903: LD_VAR 0 10
9907: PPUSH
9908: CALL_OW 115
// end ;
9912: GO 9712
9914: POP
9915: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9916: LD_INT 22
9918: PUSH
9919: LD_VAR 0 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 21
9930: PUSH
9931: LD_INT 2
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 24
9940: PUSH
9941: LD_INT 250
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 2
9950: PUSH
9951: LD_INT 34
9953: PUSH
9954: LD_INT 43
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 34
9963: PUSH
9964: LD_INT 44
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 34
9973: PUSH
9974: LD_INT 46
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: LD_INT 58
9992: PUSH
9993: EMPTY
9994: LIST
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PUSH
10012: LD_INT 0
10014: EQUAL
10015: IFFALSE 9454
// seeEnemy = 0 ;
10017: LD_ADDR_VAR 0 11
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// end ;
10025: LD_VAR 0 5
10029: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10030: LD_INT 0
10032: PPUSH
10033: PPUSH
10034: PPUSH
10035: PPUSH
10036: PPUSH
10037: PPUSH
// repeat wait ( 0 0$1 ) ;
10038: LD_INT 35
10040: PPUSH
10041: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10045: LD_ADDR_VAR 0 7
10049: PUSH
10050: LD_INT 22
10052: PUSH
10053: LD_VAR 0 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 21
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: LD_INT 24
10074: PUSH
10075: LD_INT 651
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: LIST
10086: PPUSH
10087: CALL_OW 69
10091: ST_TO_ADDR
// for j in vehiclesOK do
10092: LD_ADDR_VAR 0 4
10096: PUSH
10097: LD_VAR 0 7
10101: PUSH
10102: FOR_IN
10103: IFFALSE 10304
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10105: LD_ADDR_VAR 0 5
10109: PUSH
10110: LD_INT 81
10112: PUSH
10113: LD_VAR 0 1
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 101
10124: PUSH
10125: LD_INT 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PPUSH
10136: CALL_OW 69
10140: PPUSH
10141: LD_VAR 0 4
10145: PPUSH
10146: CALL_OW 74
10150: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10151: LD_ADDR_VAR 0 6
10155: PUSH
10156: LD_INT 81
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 101
10170: PUSH
10171: LD_INT 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: LD_INT 59
10183: PUSH
10184: EMPTY
10185: LIST
10186: PUSH
10187: LD_INT 21
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 21
10199: PUSH
10200: LD_INT 2
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: LIST
10217: PUSH
10218: EMPTY
10219: LIST
10220: PPUSH
10221: CALL_OW 69
10225: PPUSH
10226: LD_VAR 0 4
10230: PPUSH
10231: CALL_OW 74
10235: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10236: LD_VAR 0 4
10240: PPUSH
10241: LD_VAR 0 5
10245: PPUSH
10246: CALL_OW 296
10250: PUSH
10251: LD_INT 8
10253: PLUS
10254: PUSH
10255: LD_VAR 0 4
10259: PPUSH
10260: LD_VAR 0 6
10264: PPUSH
10265: CALL_OW 296
10269: LESS
10270: IFFALSE 10288
// ComAttackUnit ( j , target1 ) else
10272: LD_VAR 0 4
10276: PPUSH
10277: LD_VAR 0 5
10281: PPUSH
10282: CALL_OW 115
10286: GO 10302
// ComAttackUnit ( j , target2 ) ;
10288: LD_VAR 0 4
10292: PPUSH
10293: LD_VAR 0 6
10297: PPUSH
10298: CALL_OW 115
// end ;
10302: GO 10102
10304: POP
10305: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10306: LD_INT 22
10308: PUSH
10309: LD_VAR 0 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 2
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 24
10330: PUSH
10331: LD_INT 250
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 69
10347: PUSH
10348: LD_INT 0
10350: EQUAL
10351: IFFALSE 10038
// end ;
10353: LD_VAR 0 2
10357: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10358: LD_INT 0
10360: PPUSH
10361: PPUSH
10362: PPUSH
10363: PPUSH
10364: PPUSH
10365: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10366: LD_ADDR_VAR 0 8
10370: PUSH
10371: LD_VAR 0 2
10375: PPUSH
10376: CALL_OW 313
10380: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10381: LD_ADDR_VAR 0 9
10385: PUSH
10386: LD_VAR 0 3
10390: PPUSH
10391: LD_INT 22
10393: PUSH
10394: LD_VAR 0 1
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 25
10405: PUSH
10406: LD_INT 2
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 24
10415: PUSH
10416: LD_INT 750
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 3
10425: PUSH
10426: LD_INT 54
10428: PUSH
10429: EMPTY
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 70
10446: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10447: LD_ADDR_VAR 0 6
10451: PUSH
10452: LD_VAR 0 3
10456: PPUSH
10457: LD_INT 22
10459: PUSH
10460: LD_VAR 0 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 21
10471: PUSH
10472: LD_INT 3
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 3
10481: PUSH
10482: LD_INT 24
10484: PUSH
10485: LD_INT 1000
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: PPUSH
10504: CALL_OW 70
10508: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10509: LD_VAR 0 6
10513: NOT
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_VAR 0 1
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 25
10529: PUSH
10530: LD_INT 2
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 24
10539: PUSH
10540: LD_INT 250
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: PPUSH
10552: CALL_OW 69
10556: NOT
10557: AND
10558: IFFALSE 10562
// exit ;
10560: GO 10744
// if buildings_list > 0 and engineerOkInside then
10562: LD_VAR 0 6
10566: PUSH
10567: LD_INT 0
10569: GREATER
10570: PUSH
10571: LD_VAR 0 8
10575: AND
10576: IFFALSE 10587
// ComExitBuilding ( engineerOkInside ) ;
10578: LD_VAR 0 8
10582: PPUSH
10583: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10587: LD_VAR 0 6
10591: PUSH
10592: LD_INT 0
10594: GREATER
10595: PUSH
10596: LD_VAR 0 9
10600: PUSH
10601: LD_INT 0
10603: GREATER
10604: AND
10605: IFFALSE 10625
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10607: LD_VAR 0 9
10611: PPUSH
10612: LD_VAR 0 6
10616: PUSH
10617: LD_INT 1
10619: ARRAY
10620: PPUSH
10621: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10625: LD_VAR 0 6
10629: PUSH
10630: LD_INT 0
10632: EQUAL
10633: PUSH
10634: LD_VAR 0 4
10638: PUSH
10639: LD_INT 0
10641: EQUAL
10642: AND
10643: PUSH
10644: LD_VAR 0 9
10648: PUSH
10649: LD_INT 0
10651: GREATER
10652: AND
10653: IFFALSE 10669
// ComEnterUnit ( engineerOkOutside , building ) ;
10655: LD_VAR 0 9
10659: PPUSH
10660: LD_VAR 0 2
10664: PPUSH
10665: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10669: LD_VAR 0 9
10673: PUSH
10674: LD_INT 0
10676: GREATER
10677: PUSH
10678: LD_VAR 0 6
10682: PUSH
10683: LD_INT 0
10685: EQUAL
10686: AND
10687: PUSH
10688: LD_VAR 0 4
10692: PUSH
10693: LD_INT 0
10695: GREATER
10696: AND
10697: IFFALSE 10744
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10699: LD_VAR 0 9
10703: PPUSH
10704: LD_VAR 0 4
10708: PUSH
10709: LD_INT 1
10711: ARRAY
10712: PPUSH
10713: LD_VAR 0 4
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PPUSH
10722: LD_VAR 0 4
10726: PUSH
10727: LD_INT 3
10729: ARRAY
10730: PPUSH
10731: LD_VAR 0 4
10735: PUSH
10736: LD_INT 4
10738: ARRAY
10739: PPUSH
10740: CALL_OW 145
// end ;
10744: LD_VAR 0 5
10748: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10749: LD_INT 0
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
10757: PPUSH
10758: PPUSH
10759: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10760: LD_ADDR_VAR 0 6
10764: PUSH
10765: LD_INT 22
10767: PUSH
10768: LD_VAR 0 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 25
10779: PUSH
10780: LD_INT 4
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 23
10789: PUSH
10790: LD_INT 2
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 24
10799: PUSH
10800: LD_INT 251
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 69
10817: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10818: LD_ADDR_VAR 0 7
10822: PUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: LD_INT 22
10830: PUSH
10831: LD_VAR 0 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 23
10842: PUSH
10843: LD_INT 2
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 25
10852: PUSH
10853: LD_INT 4
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 50
10862: PUSH
10863: EMPTY
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 70
10876: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10877: LD_ADDR_VAR 0 10
10881: PUSH
10882: LD_VAR 0 3
10886: PPUSH
10887: LD_INT 22
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 21
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 3
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: LD_INT 24
10931: PUSH
10932: LD_INT 750
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 70
10953: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10954: LD_ADDR_VAR 0 11
10958: PUSH
10959: LD_VAR 0 2
10963: PPUSH
10964: LD_INT 22
10966: PUSH
10967: LD_VAR 0 1
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 21
10978: PUSH
10979: LD_INT 1
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 3
10988: PUSH
10989: LD_INT 25
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 3
11005: PUSH
11006: LD_INT 24
11008: PUSH
11009: LD_INT 1000
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PPUSH
11026: CALL_OW 70
11030: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11031: LD_VAR 0 10
11035: NOT
11036: PUSH
11037: LD_VAR 0 11
11041: NOT
11042: AND
11043: PUSH
11044: LD_VAR 0 6
11048: NOT
11049: AND
11050: IFFALSE 11054
// exit ;
11052: GO 11288
// if damageUnits > 0 and sci_list > 0 then
11054: LD_VAR 0 10
11058: PUSH
11059: LD_INT 0
11061: GREATER
11062: PUSH
11063: LD_VAR 0 6
11067: PUSH
11068: LD_INT 0
11070: GREATER
11071: AND
11072: IFFALSE 11088
// ComMoveToArea ( damageUnits , healArea ) ;
11074: LD_VAR 0 10
11078: PPUSH
11079: LD_VAR 0 2
11083: PPUSH
11084: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11088: LD_VAR 0 11
11092: PUSH
11093: LD_INT 0
11095: GREATER
11096: PUSH
11097: LD_VAR 0 6
11101: PUSH
11102: LD_INT 0
11104: GREATER
11105: AND
11106: IFFALSE 11117
// ComExitBuilding ( sci_list ) ;
11108: LD_VAR 0 6
11112: PPUSH
11113: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11117: LD_VAR 0 11
11121: PUSH
11122: LD_INT 0
11124: GREATER
11125: PUSH
11126: LD_VAR 0 7
11130: PUSH
11131: LD_INT 0
11133: GREATER
11134: AND
11135: IFFALSE 11155
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11137: LD_VAR 0 7
11141: PPUSH
11142: LD_VAR 0 11
11146: PUSH
11147: LD_INT 1
11149: ARRAY
11150: PPUSH
11151: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11155: LD_VAR 0 10
11159: PUSH
11160: LD_INT 0
11162: EQUAL
11163: PUSH
11164: LD_VAR 0 11
11168: PUSH
11169: LD_INT 0
11171: EQUAL
11172: AND
11173: PUSH
11174: LD_VAR 0 7
11178: PUSH
11179: LD_INT 0
11181: GREATER
11182: AND
11183: IFFALSE 11288
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11185: LD_ADDR_VAR 0 12
11189: PUSH
11190: LD_INT 22
11192: PUSH
11193: LD_VAR 0 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 21
11204: PUSH
11205: LD_INT 3
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 30
11214: PUSH
11215: LD_INT 8
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11232: LD_ADDR_VAR 0 13
11236: PUSH
11237: LD_INT 1
11239: PPUSH
11240: LD_VAR 0 12
11244: PPUSH
11245: CALL_OW 12
11249: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11250: LD_VAR 0 7
11254: PPUSH
11255: LD_INT 3
11257: PUSH
11258: LD_INT 60
11260: PUSH
11261: EMPTY
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PPUSH
11268: CALL_OW 72
11272: PPUSH
11273: LD_VAR 0 12
11277: PUSH
11278: LD_VAR 0 13
11282: ARRAY
11283: PPUSH
11284: CALL_OW 120
// end ; end ;
11288: LD_VAR 0 5
11292: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11293: LD_INT 0
11295: PPUSH
11296: PPUSH
11297: PPUSH
11298: PPUSH
11299: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11300: LD_ADDR_VAR 0 6
11304: PUSH
11305: LD_INT 22
11307: PUSH
11308: LD_VAR 0 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 2
11319: PUSH
11320: LD_INT 30
11322: PUSH
11323: LD_INT 31
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 30
11332: PUSH
11333: LD_INT 32
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 30
11342: PUSH
11343: LD_INT 33
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 30
11352: PUSH
11353: LD_INT 4
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 30
11362: PUSH
11363: LD_INT 5
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PPUSH
11382: CALL_OW 69
11386: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11387: LD_ADDR_VAR 0 7
11391: PUSH
11392: LD_INT 22
11394: PUSH
11395: LD_VAR 0 2
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 21
11406: PUSH
11407: LD_INT 3
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 58
11416: PUSH
11417: EMPTY
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: PPUSH
11425: CALL_OW 69
11429: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11430: LD_VAR 0 6
11434: PUSH
11435: LD_INT 0
11437: GREATER
11438: PUSH
11439: LD_VAR 0 7
11443: PUSH
11444: LD_INT 0
11446: GREATER
11447: AND
11448: IFFALSE 11518
// begin for i in turretsList do
11450: LD_ADDR_VAR 0 4
11454: PUSH
11455: LD_VAR 0 6
11459: PUSH
11460: FOR_IN
11461: IFFALSE 11516
// begin for j in enemyBuildings do
11463: LD_ADDR_VAR 0 5
11467: PUSH
11468: LD_VAR 0 7
11472: PUSH
11473: FOR_IN
11474: IFFALSE 11512
// begin if GetDistUnits ( i , j ) < 20 then
11476: LD_VAR 0 4
11480: PPUSH
11481: LD_VAR 0 5
11485: PPUSH
11486: CALL_OW 296
11490: PUSH
11491: LD_INT 20
11493: LESS
11494: IFFALSE 11510
// begin ComAttackUnit ( i , j ) ;
11496: LD_VAR 0 4
11500: PPUSH
11501: LD_VAR 0 5
11505: PPUSH
11506: CALL_OW 115
// end ; end ;
11510: GO 11473
11512: POP
11513: POP
// end ;
11514: GO 11460
11516: POP
11517: POP
// end ; end ;
11518: LD_VAR 0 3
11522: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11523: LD_INT 0
11525: PPUSH
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
11532: PPUSH
11533: PPUSH
11534: PPUSH
11535: PPUSH
// for i = 1 to medicCount do
11536: LD_ADDR_VAR 0 14
11540: PUSH
11541: DOUBLE
11542: LD_INT 1
11544: DEC
11545: ST_TO_ADDR
11546: LD_VAR 0 7
11550: PUSH
11551: FOR_TO
11552: IFFALSE 11634
// begin uc_side = side ;
11554: LD_ADDR_OWVAR 20
11558: PUSH
11559: LD_VAR 0 1
11563: ST_TO_ADDR
// uc_nation = nation ;
11564: LD_ADDR_OWVAR 21
11568: PUSH
11569: LD_VAR 0 2
11573: ST_TO_ADDR
// hc_name =  ;
11574: LD_ADDR_OWVAR 26
11578: PUSH
11579: LD_STRING 
11581: ST_TO_ADDR
// hc_gallery =  ;
11582: LD_ADDR_OWVAR 33
11586: PUSH
11587: LD_STRING 
11589: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11590: LD_INT 0
11592: PPUSH
11593: LD_INT 4
11595: PPUSH
11596: LD_VAR 0 8
11600: PPUSH
11601: CALL_OW 380
// un = CreateHuman ;
11605: LD_ADDR_VAR 0 16
11609: PUSH
11610: CALL_OW 44
11614: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11615: LD_VAR 0 16
11619: PPUSH
11620: LD_VAR 0 9
11624: PPUSH
11625: LD_INT 0
11627: PPUSH
11628: CALL_OW 49
// end ;
11632: GO 11551
11634: POP
11635: POP
// for i = 1 to soldierCount do
11636: LD_ADDR_VAR 0 14
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_VAR 0 3
11650: PUSH
11651: FOR_TO
11652: IFFALSE 11734
// begin uc_side = side ;
11654: LD_ADDR_OWVAR 20
11658: PUSH
11659: LD_VAR 0 1
11663: ST_TO_ADDR
// uc_nation = nation ;
11664: LD_ADDR_OWVAR 21
11668: PUSH
11669: LD_VAR 0 2
11673: ST_TO_ADDR
// hc_name =  ;
11674: LD_ADDR_OWVAR 26
11678: PUSH
11679: LD_STRING 
11681: ST_TO_ADDR
// hc_gallery =  ;
11682: LD_ADDR_OWVAR 33
11686: PUSH
11687: LD_STRING 
11689: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11690: LD_INT 0
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: LD_VAR 0 8
11700: PPUSH
11701: CALL_OW 380
// un = CreateHuman ;
11705: LD_ADDR_VAR 0 16
11709: PUSH
11710: CALL_OW 44
11714: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11715: LD_VAR 0 16
11719: PPUSH
11720: LD_VAR 0 9
11724: PPUSH
11725: LD_INT 0
11727: PPUSH
11728: CALL_OW 49
// end ;
11732: GO 11651
11734: POP
11735: POP
// for i = 1 to sniperCount do
11736: LD_ADDR_VAR 0 14
11740: PUSH
11741: DOUBLE
11742: LD_INT 1
11744: DEC
11745: ST_TO_ADDR
11746: LD_VAR 0 4
11750: PUSH
11751: FOR_TO
11752: IFFALSE 11834
// begin uc_side = side ;
11754: LD_ADDR_OWVAR 20
11758: PUSH
11759: LD_VAR 0 1
11763: ST_TO_ADDR
// uc_nation = nation ;
11764: LD_ADDR_OWVAR 21
11768: PUSH
11769: LD_VAR 0 2
11773: ST_TO_ADDR
// hc_name =  ;
11774: LD_ADDR_OWVAR 26
11778: PUSH
11779: LD_STRING 
11781: ST_TO_ADDR
// hc_gallery =  ;
11782: LD_ADDR_OWVAR 33
11786: PUSH
11787: LD_STRING 
11789: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11790: LD_INT 0
11792: PPUSH
11793: LD_INT 5
11795: PPUSH
11796: LD_VAR 0 8
11800: PPUSH
11801: CALL_OW 380
// un = CreateHuman ;
11805: LD_ADDR_VAR 0 16
11809: PUSH
11810: CALL_OW 44
11814: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11815: LD_VAR 0 16
11819: PPUSH
11820: LD_VAR 0 9
11824: PPUSH
11825: LD_INT 0
11827: PPUSH
11828: CALL_OW 49
// end ;
11832: GO 11751
11834: POP
11835: POP
// for i = 1 to bazookCount do
11836: LD_ADDR_VAR 0 14
11840: PUSH
11841: DOUBLE
11842: LD_INT 1
11844: DEC
11845: ST_TO_ADDR
11846: LD_VAR 0 5
11850: PUSH
11851: FOR_TO
11852: IFFALSE 11934
// begin uc_side = side ;
11854: LD_ADDR_OWVAR 20
11858: PUSH
11859: LD_VAR 0 1
11863: ST_TO_ADDR
// uc_nation = nation ;
11864: LD_ADDR_OWVAR 21
11868: PUSH
11869: LD_VAR 0 2
11873: ST_TO_ADDR
// hc_name =  ;
11874: LD_ADDR_OWVAR 26
11878: PUSH
11879: LD_STRING 
11881: ST_TO_ADDR
// hc_gallery =  ;
11882: LD_ADDR_OWVAR 33
11886: PUSH
11887: LD_STRING 
11889: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11890: LD_INT 0
11892: PPUSH
11893: LD_INT 9
11895: PPUSH
11896: LD_VAR 0 8
11900: PPUSH
11901: CALL_OW 380
// un = CreateHuman ;
11905: LD_ADDR_VAR 0 16
11909: PUSH
11910: CALL_OW 44
11914: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11915: LD_VAR 0 16
11919: PPUSH
11920: LD_VAR 0 9
11924: PPUSH
11925: LD_INT 0
11927: PPUSH
11928: CALL_OW 49
// end ;
11932: GO 11851
11934: POP
11935: POP
// for i = 1 to mortalCount do
11936: LD_ADDR_VAR 0 14
11940: PUSH
11941: DOUBLE
11942: LD_INT 1
11944: DEC
11945: ST_TO_ADDR
11946: LD_VAR 0 6
11950: PUSH
11951: FOR_TO
11952: IFFALSE 12034
// begin uc_side = side ;
11954: LD_ADDR_OWVAR 20
11958: PUSH
11959: LD_VAR 0 1
11963: ST_TO_ADDR
// uc_nation = nation ;
11964: LD_ADDR_OWVAR 21
11968: PUSH
11969: LD_VAR 0 2
11973: ST_TO_ADDR
// hc_name =  ;
11974: LD_ADDR_OWVAR 26
11978: PUSH
11979: LD_STRING 
11981: ST_TO_ADDR
// hc_gallery =  ;
11982: LD_ADDR_OWVAR 33
11986: PUSH
11987: LD_STRING 
11989: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11990: LD_INT 0
11992: PPUSH
11993: LD_INT 8
11995: PPUSH
11996: LD_VAR 0 8
12000: PPUSH
12001: CALL_OW 380
// un = CreateHuman ;
12005: LD_ADDR_VAR 0 16
12009: PUSH
12010: CALL_OW 44
12014: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12015: LD_VAR 0 16
12019: PPUSH
12020: LD_VAR 0 9
12024: PPUSH
12025: LD_INT 0
12027: PPUSH
12028: CALL_OW 49
// end ;
12032: GO 11951
12034: POP
12035: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12036: LD_ADDR_VAR 0 19
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_VAR 0 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 2
12055: PUSH
12056: LD_INT 25
12058: PUSH
12059: LD_INT 1
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 25
12068: PUSH
12069: LD_INT 5
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 25
12078: PUSH
12079: LD_INT 8
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 25
12088: PUSH
12089: LD_INT 9
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 69
12111: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12112: LD_ADDR_VAR 0 18
12116: PUSH
12117: LD_INT 22
12119: PUSH
12120: LD_VAR 0 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 25
12131: PUSH
12132: LD_INT 4
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: ST_TO_ADDR
// for i in medic_list do
12148: LD_ADDR_VAR 0 14
12152: PUSH
12153: LD_VAR 0 18
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12177
// ComMoveToArea ( i , healArea ) ;
12161: LD_VAR 0 14
12165: PPUSH
12166: LD_VAR 0 10
12170: PPUSH
12171: CALL_OW 113
12175: GO 12158
12177: POP
12178: POP
// if strategy = 1 then
12179: LD_VAR 0 12
12183: PUSH
12184: LD_INT 1
12186: EQUAL
12187: IFFALSE 12733
// begin repeat wait ( 0 0$3 ) ;
12189: LD_INT 105
12191: PPUSH
12192: CALL_OW 67
// for i in soldiersOK_list do
12196: LD_ADDR_VAR 0 14
12200: PUSH
12201: LD_VAR 0 19
12205: PUSH
12206: FOR_IN
12207: IFFALSE 12271
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12209: LD_VAR 0 14
12213: PPUSH
12214: LD_INT 91
12216: PPUSH
12217: LD_INT 63
12219: PPUSH
12220: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12224: LD_VAR 0 14
12228: PPUSH
12229: LD_INT 101
12231: PPUSH
12232: LD_INT 53
12234: PPUSH
12235: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12239: LD_VAR 0 14
12243: PPUSH
12244: LD_INT 75
12246: PPUSH
12247: LD_INT 23
12249: PPUSH
12250: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12254: LD_VAR 0 14
12258: PPUSH
12259: LD_INT 78
12261: PPUSH
12262: LD_INT 8
12264: PPUSH
12265: CALL_OW 174
// end ;
12269: GO 12206
12271: POP
12272: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12273: LD_INT 12
12275: PPUSH
12276: LD_INT 22
12278: PUSH
12279: LD_VAR 0 1
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 70
12292: PUSH
12293: LD_INT 2
12295: GREATER
12296: IFFALSE 12189
// repeat wait ( 0 0$1 ) ;
12298: LD_INT 35
12300: PPUSH
12301: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12305: LD_ADDR_VAR 0 17
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_VAR 0 1
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 1
12324: PUSH
12325: LD_INT 3
12327: PUSH
12328: LD_INT 24
12330: PUSH
12331: LD_INT 550
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 24
12344: PUSH
12345: LD_INT 250
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12366: LD_ADDR_VAR 0 19
12370: PUSH
12371: LD_INT 22
12373: PUSH
12374: LD_VAR 0 1
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: LD_INT 25
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 25
12398: PUSH
12399: LD_INT 5
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 25
12408: PUSH
12409: LD_INT 8
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 25
12418: PUSH
12419: LD_INT 9
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 24
12435: PUSH
12436: LD_INT 1000
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: ST_TO_ADDR
// if medicCount > 0 then
12453: LD_VAR 0 7
12457: PUSH
12458: LD_INT 0
12460: GREATER
12461: IFFALSE 12535
// begin if damageUnit_list > 0 then
12463: LD_VAR 0 17
12467: PUSH
12468: LD_INT 0
12470: GREATER
12471: IFFALSE 12535
// begin for i in damageUnit_list do
12473: LD_ADDR_VAR 0 14
12477: PUSH
12478: LD_VAR 0 17
12482: PUSH
12483: FOR_IN
12484: IFFALSE 12533
// begin ComMoveToArea ( i , healArea ) ;
12486: LD_VAR 0 14
12490: PPUSH
12491: LD_VAR 0 10
12495: PPUSH
12496: CALL_OW 113
// for j in medic_list do
12500: LD_ADDR_VAR 0 15
12504: PUSH
12505: LD_VAR 0 18
12509: PUSH
12510: FOR_IN
12511: IFFALSE 12529
// AddComHeal ( j , i ) ;
12513: LD_VAR 0 15
12517: PPUSH
12518: LD_VAR 0 14
12522: PPUSH
12523: CALL_OW 188
12527: GO 12510
12529: POP
12530: POP
// end ;
12531: GO 12483
12533: POP
12534: POP
// end ; end ; for i in soldiersOK_list do
12535: LD_ADDR_VAR 0 14
12539: PUSH
12540: LD_VAR 0 19
12544: PUSH
12545: FOR_IN
12546: IFFALSE 12722
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12548: LD_ADDR_VAR 0 22
12552: PUSH
12553: LD_INT 22
12555: PUSH
12556: LD_VAR 0 11
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: PPUSH
12570: LD_VAR 0 14
12574: PPUSH
12575: CALL_OW 74
12579: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12580: LD_ADDR_VAR 0 23
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_VAR 0 11
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: LD_INT 59
12602: PUSH
12603: EMPTY
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 1
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 21
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: PPUSH
12639: CALL_OW 69
12643: PPUSH
12644: LD_VAR 0 14
12648: PPUSH
12649: CALL_OW 74
12653: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12654: LD_VAR 0 14
12658: PPUSH
12659: LD_VAR 0 22
12663: PPUSH
12664: CALL_OW 296
12668: PUSH
12669: LD_INT 6
12671: PLUS
12672: PUSH
12673: LD_VAR 0 14
12677: PPUSH
12678: LD_VAR 0 23
12682: PPUSH
12683: CALL_OW 296
12687: LESS
12688: IFFALSE 12706
// begin ComAttackUnit ( i , target1 ) ;
12690: LD_VAR 0 14
12694: PPUSH
12695: LD_VAR 0 22
12699: PPUSH
12700: CALL_OW 115
// end else
12704: GO 12720
// begin ComAttackUnit ( i , target2 ) ;
12706: LD_VAR 0 14
12710: PPUSH
12711: LD_VAR 0 23
12715: PPUSH
12716: CALL_OW 115
// end ; end ;
12720: GO 12545
12722: POP
12723: POP
// until soldiersOK_list = [ ] ;
12724: LD_VAR 0 19
12728: PUSH
12729: EMPTY
12730: EQUAL
12731: IFFALSE 12298
// end ; if strategy = 2 then
12733: LD_VAR 0 12
12737: PUSH
12738: LD_INT 2
12740: EQUAL
12741: IFFALSE 13257
// begin repeat wait ( 0 0$1 ) ;
12743: LD_INT 35
12745: PPUSH
12746: CALL_OW 67
// for i in soldiersOK_list do
12750: LD_ADDR_VAR 0 14
12754: PUSH
12755: LD_VAR 0 19
12759: PUSH
12760: FOR_IN
12761: IFFALSE 12795
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12763: LD_VAR 0 14
12767: PPUSH
12768: LD_INT 91
12770: PPUSH
12771: LD_INT 63
12773: PPUSH
12774: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12778: LD_VAR 0 14
12782: PPUSH
12783: LD_INT 75
12785: PPUSH
12786: LD_INT 33
12788: PPUSH
12789: CALL_OW 174
// end ;
12793: GO 12760
12795: POP
12796: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12797: LD_INT 13
12799: PPUSH
12800: LD_INT 22
12802: PUSH
12803: LD_VAR 0 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PPUSH
12812: CALL_OW 70
12816: PUSH
12817: LD_INT 2
12819: GREATER
12820: IFFALSE 12743
// repeat wait ( 0 0$3 ) ;
12822: LD_INT 105
12824: PPUSH
12825: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12829: LD_ADDR_VAR 0 17
12833: PUSH
12834: LD_INT 22
12836: PUSH
12837: LD_VAR 0 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: LD_INT 3
12851: PUSH
12852: LD_INT 24
12854: PUSH
12855: LD_INT 550
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 24
12868: PUSH
12869: LD_INT 250
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 69
12889: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_VAR 0 1
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: LD_INT 25
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 5
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 25
12932: PUSH
12933: LD_INT 8
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 25
12942: PUSH
12943: LD_INT 9
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 24
12959: PUSH
12960: LD_INT 1000
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 69
12976: ST_TO_ADDR
// if medicCount > 0 then
12977: LD_VAR 0 7
12981: PUSH
12982: LD_INT 0
12984: GREATER
12985: IFFALSE 13059
// begin if damageUnit_list > 0 then
12987: LD_VAR 0 17
12991: PUSH
12992: LD_INT 0
12994: GREATER
12995: IFFALSE 13059
// begin for i in damageUnit_list do
12997: LD_ADDR_VAR 0 14
13001: PUSH
13002: LD_VAR 0 17
13006: PUSH
13007: FOR_IN
13008: IFFALSE 13057
// begin ComMoveToArea ( i , healArea ) ;
13010: LD_VAR 0 14
13014: PPUSH
13015: LD_VAR 0 10
13019: PPUSH
13020: CALL_OW 113
// for j in medic_list do
13024: LD_ADDR_VAR 0 15
13028: PUSH
13029: LD_VAR 0 18
13033: PUSH
13034: FOR_IN
13035: IFFALSE 13053
// AddComHeal ( j , i ) ;
13037: LD_VAR 0 15
13041: PPUSH
13042: LD_VAR 0 14
13046: PPUSH
13047: CALL_OW 188
13051: GO 13034
13053: POP
13054: POP
// end ;
13055: GO 13007
13057: POP
13058: POP
// end ; end ; for i in soldiersOK_list do
13059: LD_ADDR_VAR 0 14
13063: PUSH
13064: LD_VAR 0 19
13068: PUSH
13069: FOR_IN
13070: IFFALSE 13246
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13072: LD_ADDR_VAR 0 22
13076: PUSH
13077: LD_INT 22
13079: PUSH
13080: LD_VAR 0 11
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: PPUSH
13094: LD_VAR 0 14
13098: PPUSH
13099: CALL_OW 74
13103: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13104: LD_ADDR_VAR 0 23
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_VAR 0 11
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: LD_INT 59
13126: PUSH
13127: EMPTY
13128: LIST
13129: PUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 21
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: EMPTY
13161: LIST
13162: PPUSH
13163: CALL_OW 69
13167: PPUSH
13168: LD_VAR 0 14
13172: PPUSH
13173: CALL_OW 74
13177: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13178: LD_VAR 0 14
13182: PPUSH
13183: LD_VAR 0 22
13187: PPUSH
13188: CALL_OW 296
13192: PUSH
13193: LD_INT 6
13195: PLUS
13196: PUSH
13197: LD_VAR 0 14
13201: PPUSH
13202: LD_VAR 0 23
13206: PPUSH
13207: CALL_OW 296
13211: LESS
13212: IFFALSE 13230
// begin ComAttackUnit ( i , target1 ) ;
13214: LD_VAR 0 14
13218: PPUSH
13219: LD_VAR 0 22
13223: PPUSH
13224: CALL_OW 115
// end else
13228: GO 13244
// begin ComAttackUnit ( i , target2 ) ;
13230: LD_VAR 0 14
13234: PPUSH
13235: LD_VAR 0 23
13239: PPUSH
13240: CALL_OW 115
// end ; end ;
13244: GO 13069
13246: POP
13247: POP
// until soldiersOK_list = [ ] ;
13248: LD_VAR 0 19
13252: PUSH
13253: EMPTY
13254: EQUAL
13255: IFFALSE 12822
// end ; if strategy = 3 then
13257: LD_VAR 0 12
13261: PUSH
13262: LD_INT 3
13264: EQUAL
13265: IFFALSE 13811
// begin repeat wait ( 0 0$3 ) ;
13267: LD_INT 105
13269: PPUSH
13270: CALL_OW 67
// for i in soldiersOK_list do
13274: LD_ADDR_VAR 0 14
13278: PUSH
13279: LD_VAR 0 19
13283: PUSH
13284: FOR_IN
13285: IFFALSE 13349
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13287: LD_VAR 0 14
13291: PPUSH
13292: LD_INT 63
13294: PPUSH
13295: LD_INT 71
13297: PPUSH
13298: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13302: LD_VAR 0 14
13306: PPUSH
13307: LD_INT 35
13309: PPUSH
13310: LD_INT 44
13312: PPUSH
13313: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13317: LD_VAR 0 14
13321: PPUSH
13322: LD_INT 23
13324: PPUSH
13325: LD_INT 18
13327: PPUSH
13328: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13332: LD_VAR 0 14
13336: PPUSH
13337: LD_INT 26
13339: PPUSH
13340: LD_INT 12
13342: PPUSH
13343: CALL_OW 174
// end ;
13347: GO 13284
13349: POP
13350: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13351: LD_INT 14
13353: PPUSH
13354: LD_INT 22
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 70
13370: PUSH
13371: LD_INT 2
13373: GREATER
13374: IFFALSE 13267
// repeat wait ( 0 0$1 ) ;
13376: LD_INT 35
13378: PPUSH
13379: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13383: LD_ADDR_VAR 0 17
13387: PUSH
13388: LD_INT 22
13390: PUSH
13391: LD_VAR 0 1
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 1
13402: PUSH
13403: LD_INT 3
13405: PUSH
13406: LD_INT 24
13408: PUSH
13409: LD_INT 550
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 24
13422: PUSH
13423: LD_INT 250
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 69
13443: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13444: LD_ADDR_VAR 0 19
13448: PUSH
13449: LD_INT 22
13451: PUSH
13452: LD_VAR 0 1
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 2
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 1
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 25
13486: PUSH
13487: LD_INT 8
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 25
13496: PUSH
13497: LD_INT 9
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 24
13513: PUSH
13514: LD_INT 1000
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: PPUSH
13526: CALL_OW 69
13530: ST_TO_ADDR
// if medicCount > 0 then
13531: LD_VAR 0 7
13535: PUSH
13536: LD_INT 0
13538: GREATER
13539: IFFALSE 13613
// begin if damageUnit_list > 0 then
13541: LD_VAR 0 17
13545: PUSH
13546: LD_INT 0
13548: GREATER
13549: IFFALSE 13613
// begin for i in damageUnit_list do
13551: LD_ADDR_VAR 0 14
13555: PUSH
13556: LD_VAR 0 17
13560: PUSH
13561: FOR_IN
13562: IFFALSE 13611
// begin ComMoveToArea ( i , healArea ) ;
13564: LD_VAR 0 14
13568: PPUSH
13569: LD_VAR 0 10
13573: PPUSH
13574: CALL_OW 113
// for j in medic_list do
13578: LD_ADDR_VAR 0 15
13582: PUSH
13583: LD_VAR 0 18
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13607
// AddComHeal ( j , i ) ;
13591: LD_VAR 0 15
13595: PPUSH
13596: LD_VAR 0 14
13600: PPUSH
13601: CALL_OW 188
13605: GO 13588
13607: POP
13608: POP
// end ;
13609: GO 13561
13611: POP
13612: POP
// end ; end ; for i in soldiersOK_list do
13613: LD_ADDR_VAR 0 14
13617: PUSH
13618: LD_VAR 0 19
13622: PUSH
13623: FOR_IN
13624: IFFALSE 13800
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13626: LD_ADDR_VAR 0 22
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_VAR 0 11
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: PPUSH
13648: LD_VAR 0 14
13652: PPUSH
13653: CALL_OW 74
13657: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13658: LD_ADDR_VAR 0 23
13662: PUSH
13663: LD_INT 22
13665: PUSH
13666: LD_VAR 0 11
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: LD_INT 59
13680: PUSH
13681: EMPTY
13682: LIST
13683: PUSH
13684: LD_INT 21
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 21
13696: PUSH
13697: LD_INT 2
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: PPUSH
13722: LD_VAR 0 14
13726: PPUSH
13727: CALL_OW 74
13731: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13732: LD_VAR 0 14
13736: PPUSH
13737: LD_VAR 0 22
13741: PPUSH
13742: CALL_OW 296
13746: PUSH
13747: LD_INT 6
13749: PLUS
13750: PUSH
13751: LD_VAR 0 14
13755: PPUSH
13756: LD_VAR 0 23
13760: PPUSH
13761: CALL_OW 296
13765: LESS
13766: IFFALSE 13784
// begin ComAttackUnit ( i , target1 ) ;
13768: LD_VAR 0 14
13772: PPUSH
13773: LD_VAR 0 22
13777: PPUSH
13778: CALL_OW 115
// end else
13782: GO 13798
// begin ComAttackUnit ( i , target2 ) ;
13784: LD_VAR 0 14
13788: PPUSH
13789: LD_VAR 0 23
13793: PPUSH
13794: CALL_OW 115
// end ; end ;
13798: GO 13623
13800: POP
13801: POP
// until soldiersOK_list = [ ] ;
13802: LD_VAR 0 19
13806: PUSH
13807: EMPTY
13808: EQUAL
13809: IFFALSE 13376
// end ; end ;
13811: LD_VAR 0 13
13815: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13816: LD_INT 0
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
13824: PPUSH
13825: PPUSH
13826: PPUSH
13827: PPUSH
13828: PPUSH
// amChassisTab = [ ] ;
13829: LD_ADDR_VAR 0 19
13833: PUSH
13834: EMPTY
13835: ST_TO_ADDR
// arChassisTab = [ ] ;
13836: LD_ADDR_VAR 0 18
13840: PUSH
13841: EMPTY
13842: ST_TO_ADDR
// ruChassisTab = [ ] ;
13843: LD_ADDR_VAR 0 17
13847: PUSH
13848: EMPTY
13849: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13850: LD_INT 35
13852: PPUSH
13853: CALL_OW 67
// if nation = 1 then
13857: LD_VAR 0 5
13861: PUSH
13862: LD_INT 1
13864: EQUAL
13865: IFFALSE 14356
// begin uc_side = side ;
13867: LD_ADDR_OWVAR 20
13871: PUSH
13872: LD_VAR 0 2
13876: ST_TO_ADDR
// uc_nation = nation ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_VAR 0 5
13886: ST_TO_ADDR
// vc_engine = vehengine ;
13887: LD_ADDR_OWVAR 39
13891: PUSH
13892: LD_VAR 0 6
13896: ST_TO_ADDR
// vc_control = vehcontrol ;
13897: LD_ADDR_OWVAR 38
13901: PUSH
13902: LD_VAR 0 7
13906: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13907: LD_ADDR_OWVAR 40
13911: PUSH
13912: LD_VAR 0 10
13916: PUSH
13917: LD_INT 1
13919: PPUSH
13920: LD_VAR 0 10
13924: PPUSH
13925: CALL_OW 12
13929: ARRAY
13930: ST_TO_ADDR
// for j = 1 to AMWeapon do
13931: LD_ADDR_VAR 0 14
13935: PUSH
13936: DOUBLE
13937: LD_INT 1
13939: DEC
13940: ST_TO_ADDR
13941: LD_VAR 0 10
13945: PUSH
13946: FOR_TO
13947: IFFALSE 14248
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13949: LD_VAR 0 10
13953: PUSH
13954: LD_VAR 0 14
13958: ARRAY
13959: PUSH
13960: LD_INT 2
13962: EQUAL
13963: PUSH
13964: LD_VAR 0 10
13968: PUSH
13969: LD_VAR 0 14
13973: ARRAY
13974: PUSH
13975: LD_INT 3
13977: EQUAL
13978: OR
13979: IFFALSE 14032
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13981: LD_ADDR_VAR 0 19
13985: PUSH
13986: LD_INT 1
13988: PUSH
13989: LD_INT 2
13991: PUSH
13992: LD_INT 3
13994: PUSH
13995: LD_INT 4
13997: PUSH
13998: LD_INT 5
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14008: LD_ADDR_OWVAR 37
14012: PUSH
14013: LD_VAR 0 19
14017: PUSH
14018: LD_INT 1
14020: PPUSH
14021: LD_VAR 0 19
14025: PPUSH
14026: CALL_OW 12
14030: ARRAY
14031: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14032: LD_VAR 0 10
14036: PUSH
14037: LD_VAR 0 14
14041: ARRAY
14042: PUSH
14043: LD_INT 4
14045: EQUAL
14046: PUSH
14047: LD_VAR 0 10
14051: PUSH
14052: LD_VAR 0 14
14056: ARRAY
14057: PUSH
14058: LD_INT 5
14060: EQUAL
14061: OR
14062: PUSH
14063: LD_VAR 0 10
14067: PUSH
14068: LD_VAR 0 14
14072: ARRAY
14073: PUSH
14074: LD_INT 9
14076: EQUAL
14077: OR
14078: PUSH
14079: LD_VAR 0 10
14083: PUSH
14084: LD_VAR 0 14
14088: ARRAY
14089: PUSH
14090: LD_INT 11
14092: EQUAL
14093: OR
14094: PUSH
14095: LD_VAR 0 10
14099: PUSH
14100: LD_VAR 0 14
14104: ARRAY
14105: PUSH
14106: LD_INT 7
14108: EQUAL
14109: OR
14110: IFFALSE 14159
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14112: LD_ADDR_VAR 0 19
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: LD_INT 3
14122: PUSH
14123: LD_INT 4
14125: PUSH
14126: LD_INT 5
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14135: LD_ADDR_OWVAR 37
14139: PUSH
14140: LD_VAR 0 19
14144: PUSH
14145: LD_INT 1
14147: PPUSH
14148: LD_VAR 0 19
14152: PPUSH
14153: CALL_OW 12
14157: ARRAY
14158: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14159: LD_VAR 0 10
14163: PUSH
14164: LD_VAR 0 14
14168: ARRAY
14169: PUSH
14170: LD_INT 8
14172: EQUAL
14173: PUSH
14174: LD_VAR 0 10
14178: PUSH
14179: LD_VAR 0 14
14183: ARRAY
14184: PUSH
14185: LD_INT 6
14187: EQUAL
14188: OR
14189: PUSH
14190: LD_VAR 0 10
14194: PUSH
14195: LD_VAR 0 14
14199: ARRAY
14200: PUSH
14201: LD_INT 10
14203: EQUAL
14204: OR
14205: IFFALSE 14246
// begin amChassisTab = [ 4 , 5 ] ;
14207: LD_ADDR_VAR 0 19
14211: PUSH
14212: LD_INT 4
14214: PUSH
14215: LD_INT 5
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14222: LD_ADDR_OWVAR 37
14226: PUSH
14227: LD_VAR 0 19
14231: PUSH
14232: LD_INT 1
14234: PPUSH
14235: LD_VAR 0 19
14239: PPUSH
14240: CALL_OW 12
14244: ARRAY
14245: ST_TO_ADDR
// end ; end ;
14246: GO 13946
14248: POP
14249: POP
// veh = CreateVehicle ;
14250: LD_ADDR_VAR 0 16
14254: PUSH
14255: CALL_OW 45
14259: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14260: LD_VAR 0 16
14264: PPUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: LD_INT 0
14272: PPUSH
14273: CALL_OW 49
// if vehControl = 1 then
14277: LD_VAR 0 7
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14342
// begin hc_gallery =  ;
14287: LD_ADDR_OWVAR 33
14291: PUSH
14292: LD_STRING 
14294: ST_TO_ADDR
// hc_name =  ;
14295: LD_ADDR_OWVAR 26
14299: PUSH
14300: LD_STRING 
14302: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14303: LD_INT 0
14305: PPUSH
14306: LD_INT 3
14308: PPUSH
14309: LD_VAR 0 4
14313: PPUSH
14314: CALL_OW 380
// un = CreateHuman ;
14318: LD_ADDR_VAR 0 15
14322: PUSH
14323: CALL_OW 44
14327: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14328: LD_VAR 0 15
14332: PPUSH
14333: LD_VAR 0 16
14337: PPUSH
14338: CALL_OW 52
// end ; i = i + 1 ;
14342: LD_ADDR_VAR 0 13
14346: PUSH
14347: LD_VAR 0 13
14351: PUSH
14352: LD_INT 1
14354: PLUS
14355: ST_TO_ADDR
// end ; if nation = 2 then
14356: LD_VAR 0 5
14360: PUSH
14361: LD_INT 2
14363: EQUAL
14364: IFFALSE 14788
// begin uc_side = side ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_VAR 0 2
14375: ST_TO_ADDR
// uc_nation = nation ;
14376: LD_ADDR_OWVAR 21
14380: PUSH
14381: LD_VAR 0 5
14385: ST_TO_ADDR
// vc_engine = vehengine ;
14386: LD_ADDR_OWVAR 39
14390: PUSH
14391: LD_VAR 0 6
14395: ST_TO_ADDR
// vc_control = vehcontrol ;
14396: LD_ADDR_OWVAR 38
14400: PUSH
14401: LD_VAR 0 7
14405: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14406: LD_ADDR_OWVAR 40
14410: PUSH
14411: LD_VAR 0 9
14415: PUSH
14416: LD_INT 1
14418: PPUSH
14419: LD_VAR 0 9
14423: PPUSH
14424: CALL_OW 12
14428: ARRAY
14429: ST_TO_ADDR
// for j = 1 to ARWeapons do
14430: LD_ADDR_VAR 0 14
14434: PUSH
14435: DOUBLE
14436: LD_INT 1
14438: DEC
14439: ST_TO_ADDR
14440: LD_VAR 0 9
14444: PUSH
14445: FOR_TO
14446: IFFALSE 14680
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14448: LD_VAR 0 9
14452: PUSH
14453: LD_VAR 0 14
14457: ARRAY
14458: PUSH
14459: LD_INT 24
14461: EQUAL
14462: PUSH
14463: LD_VAR 0 9
14467: PUSH
14468: LD_VAR 0 14
14472: ARRAY
14473: PUSH
14474: LD_INT 22
14476: EQUAL
14477: OR
14478: PUSH
14479: LD_VAR 0 9
14483: PUSH
14484: LD_VAR 0 14
14488: ARRAY
14489: PUSH
14490: LD_INT 23
14492: EQUAL
14493: OR
14494: PUSH
14495: LD_VAR 0 9
14499: PUSH
14500: LD_VAR 0 14
14504: ARRAY
14505: PUSH
14506: LD_INT 30
14508: EQUAL
14509: OR
14510: IFFALSE 14559
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14512: LD_ADDR_VAR 0 18
14516: PUSH
14517: LD_INT 11
14519: PUSH
14520: LD_INT 12
14522: PUSH
14523: LD_INT 13
14525: PUSH
14526: LD_INT 14
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14535: LD_ADDR_OWVAR 37
14539: PUSH
14540: LD_VAR 0 18
14544: PUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_VAR 0 18
14552: PPUSH
14553: CALL_OW 12
14557: ARRAY
14558: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14559: LD_VAR 0 9
14563: PUSH
14564: LD_VAR 0 14
14568: ARRAY
14569: PUSH
14570: LD_INT 29
14572: EQUAL
14573: PUSH
14574: LD_VAR 0 9
14578: PUSH
14579: LD_VAR 0 14
14583: ARRAY
14584: PUSH
14585: LD_INT 28
14587: EQUAL
14588: OR
14589: PUSH
14590: LD_VAR 0 9
14594: PUSH
14595: LD_VAR 0 14
14599: ARRAY
14600: PUSH
14601: LD_INT 27
14603: EQUAL
14604: OR
14605: PUSH
14606: LD_VAR 0 9
14610: PUSH
14611: LD_VAR 0 14
14615: ARRAY
14616: PUSH
14617: LD_INT 26
14619: EQUAL
14620: OR
14621: PUSH
14622: LD_VAR 0 9
14626: PUSH
14627: LD_VAR 0 14
14631: ARRAY
14632: PUSH
14633: LD_INT 25
14635: EQUAL
14636: OR
14637: IFFALSE 14678
// begin arChassisTab = [ 13 , 14 ] ;
14639: LD_ADDR_VAR 0 18
14643: PUSH
14644: LD_INT 13
14646: PUSH
14647: LD_INT 14
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14654: LD_ADDR_OWVAR 37
14658: PUSH
14659: LD_VAR 0 18
14663: PUSH
14664: LD_INT 1
14666: PPUSH
14667: LD_VAR 0 18
14671: PPUSH
14672: CALL_OW 12
14676: ARRAY
14677: ST_TO_ADDR
// end ; end ;
14678: GO 14445
14680: POP
14681: POP
// veh = CreateVehicle ;
14682: LD_ADDR_VAR 0 16
14686: PUSH
14687: CALL_OW 45
14691: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14692: LD_VAR 0 16
14696: PPUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 0
14704: PPUSH
14705: CALL_OW 49
// if vehcontrol = 1 then
14709: LD_VAR 0 7
14713: PUSH
14714: LD_INT 1
14716: EQUAL
14717: IFFALSE 14774
// begin hc_gallery =  ;
14719: LD_ADDR_OWVAR 33
14723: PUSH
14724: LD_STRING 
14726: ST_TO_ADDR
// hc_name =  ;
14727: LD_ADDR_OWVAR 26
14731: PUSH
14732: LD_STRING 
14734: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14735: LD_INT 0
14737: PPUSH
14738: LD_INT 3
14740: PPUSH
14741: LD_VAR 0 4
14745: PPUSH
14746: CALL_OW 380
// un = CreateHuman ;
14750: LD_ADDR_VAR 0 15
14754: PUSH
14755: CALL_OW 44
14759: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14760: LD_VAR 0 15
14764: PPUSH
14765: LD_VAR 0 16
14769: PPUSH
14770: CALL_OW 52
// end ; i = i + 1 ;
14774: LD_ADDR_VAR 0 13
14778: PUSH
14779: LD_VAR 0 13
14783: PUSH
14784: LD_INT 1
14786: PLUS
14787: ST_TO_ADDR
// end ; if nation = 3 then
14788: LD_VAR 0 5
14792: PUSH
14793: LD_INT 3
14795: EQUAL
14796: IFFALSE 15188
// begin uc_side = side ;
14798: LD_ADDR_OWVAR 20
14802: PUSH
14803: LD_VAR 0 2
14807: ST_TO_ADDR
// uc_nation = nation ;
14808: LD_ADDR_OWVAR 21
14812: PUSH
14813: LD_VAR 0 5
14817: ST_TO_ADDR
// vc_engine = vehengine ;
14818: LD_ADDR_OWVAR 39
14822: PUSH
14823: LD_VAR 0 6
14827: ST_TO_ADDR
// vc_control = vehcontrol ;
14828: LD_ADDR_OWVAR 38
14832: PUSH
14833: LD_VAR 0 7
14837: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14838: LD_ADDR_OWVAR 40
14842: PUSH
14843: LD_VAR 0 8
14847: PUSH
14848: LD_INT 1
14850: PPUSH
14851: LD_VAR 0 8
14855: PPUSH
14856: CALL_OW 12
14860: ARRAY
14861: ST_TO_ADDR
// for j = 1 to RuWeapons do
14862: LD_ADDR_VAR 0 14
14866: PUSH
14867: DOUBLE
14868: LD_INT 1
14870: DEC
14871: ST_TO_ADDR
14872: LD_VAR 0 8
14876: PUSH
14877: FOR_TO
14878: IFFALSE 15080
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14880: LD_VAR 0 8
14884: PUSH
14885: LD_VAR 0 14
14889: ARRAY
14890: PUSH
14891: LD_INT 42
14893: EQUAL
14894: PUSH
14895: LD_VAR 0 8
14899: PUSH
14900: LD_VAR 0 14
14904: ARRAY
14905: PUSH
14906: LD_INT 43
14908: EQUAL
14909: OR
14910: PUSH
14911: LD_VAR 0 8
14915: PUSH
14916: LD_VAR 0 14
14920: ARRAY
14921: PUSH
14922: LD_INT 44
14924: EQUAL
14925: OR
14926: PUSH
14927: LD_VAR 0 8
14931: PUSH
14932: LD_VAR 0 14
14936: ARRAY
14937: PUSH
14938: LD_INT 45
14940: EQUAL
14941: OR
14942: PUSH
14943: LD_VAR 0 8
14947: PUSH
14948: LD_VAR 0 14
14952: ARRAY
14953: PUSH
14954: LD_INT 49
14956: EQUAL
14957: OR
14958: IFFALSE 15007
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14960: LD_ADDR_VAR 0 17
14964: PUSH
14965: LD_INT 21
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_INT 23
14973: PUSH
14974: LD_INT 24
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14983: LD_ADDR_OWVAR 37
14987: PUSH
14988: LD_VAR 0 17
14992: PUSH
14993: LD_INT 1
14995: PPUSH
14996: LD_VAR 0 17
15000: PPUSH
15001: CALL_OW 12
15005: ARRAY
15006: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15007: LD_VAR 0 8
15011: PUSH
15012: LD_VAR 0 14
15016: ARRAY
15017: PUSH
15018: LD_INT 46
15020: EQUAL
15021: PUSH
15022: LD_VAR 0 8
15026: PUSH
15027: LD_VAR 0 14
15031: ARRAY
15032: PUSH
15033: LD_INT 47
15035: EQUAL
15036: OR
15037: IFFALSE 15078
// begin ruChassisTab = [ 23 , 24 ] ;
15039: LD_ADDR_VAR 0 17
15043: PUSH
15044: LD_INT 23
15046: PUSH
15047: LD_INT 24
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15054: LD_ADDR_OWVAR 37
15058: PUSH
15059: LD_VAR 0 17
15063: PUSH
15064: LD_INT 1
15066: PPUSH
15067: LD_VAR 0 17
15071: PPUSH
15072: CALL_OW 12
15076: ARRAY
15077: ST_TO_ADDR
// end ; end ;
15078: GO 14877
15080: POP
15081: POP
// veh = CreateVehicle ;
15082: LD_ADDR_VAR 0 16
15086: PUSH
15087: CALL_OW 45
15091: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15092: LD_VAR 0 16
15096: PPUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_INT 0
15104: PPUSH
15105: CALL_OW 49
// if vehcontrol = 1 then
15109: LD_VAR 0 7
15113: PUSH
15114: LD_INT 1
15116: EQUAL
15117: IFFALSE 15174
// begin hc_gallery =  ;
15119: LD_ADDR_OWVAR 33
15123: PUSH
15124: LD_STRING 
15126: ST_TO_ADDR
// hc_name =  ;
15127: LD_ADDR_OWVAR 26
15131: PUSH
15132: LD_STRING 
15134: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15135: LD_INT 0
15137: PPUSH
15138: LD_INT 3
15140: PPUSH
15141: LD_VAR 0 4
15145: PPUSH
15146: CALL_OW 380
// un = CreateHuman ;
15150: LD_ADDR_VAR 0 15
15154: PUSH
15155: CALL_OW 44
15159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15160: LD_VAR 0 15
15164: PPUSH
15165: LD_VAR 0 16
15169: PPUSH
15170: CALL_OW 52
// end ; i = i + 1 ;
15174: LD_ADDR_VAR 0 13
15178: PUSH
15179: LD_VAR 0 13
15183: PUSH
15184: LD_INT 1
15186: PLUS
15187: ST_TO_ADDR
// end ; until i = vehCount ;
15188: LD_VAR 0 13
15192: PUSH
15193: LD_VAR 0 3
15197: EQUAL
15198: IFFALSE 13850
// repeat wait ( 0 0$1 ) ;
15200: LD_INT 35
15202: PPUSH
15203: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15207: LD_ADDR_VAR 0 20
15211: PUSH
15212: LD_INT 22
15214: PUSH
15215: LD_VAR 0 2
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 2
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 24
15236: PUSH
15237: LD_INT 250
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 69
15253: ST_TO_ADDR
// if vehicleOK_list > 0 then
15254: LD_VAR 0 20
15258: PUSH
15259: LD_INT 0
15261: GREATER
15262: IFFALSE 15453
// begin for i in vehicleOK_list do
15264: LD_ADDR_VAR 0 13
15268: PUSH
15269: LD_VAR 0 20
15273: PUSH
15274: FOR_IN
15275: IFFALSE 15451
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15277: LD_ADDR_VAR 0 21
15281: PUSH
15282: LD_INT 22
15284: PUSH
15285: LD_VAR 0 11
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: PPUSH
15299: LD_VAR 0 13
15303: PPUSH
15304: CALL_OW 74
15308: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15309: LD_ADDR_VAR 0 22
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_VAR 0 11
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 59
15331: PUSH
15332: EMPTY
15333: LIST
15334: PUSH
15335: LD_INT 21
15337: PUSH
15338: LD_INT 1
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 21
15347: PUSH
15348: LD_INT 2
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: PPUSH
15368: CALL_OW 69
15372: PPUSH
15373: LD_VAR 0 13
15377: PPUSH
15378: CALL_OW 74
15382: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15383: LD_VAR 0 13
15387: PPUSH
15388: LD_VAR 0 21
15392: PPUSH
15393: CALL_OW 296
15397: PUSH
15398: LD_INT 6
15400: PLUS
15401: PUSH
15402: LD_VAR 0 13
15406: PPUSH
15407: LD_VAR 0 22
15411: PPUSH
15412: CALL_OW 296
15416: LESS
15417: IFFALSE 15435
// begin ComAttackUnit ( i , target1 ) ;
15419: LD_VAR 0 13
15423: PPUSH
15424: LD_VAR 0 21
15428: PPUSH
15429: CALL_OW 115
// end else
15433: GO 15449
// begin ComAttackUnit ( i , target2 ) ;
15435: LD_VAR 0 13
15439: PPUSH
15440: LD_VAR 0 22
15444: PPUSH
15445: CALL_OW 115
// end ; end ;
15449: GO 15274
15451: POP
15452: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15453: LD_INT 22
15455: PUSH
15456: LD_VAR 0 2
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 21
15467: PUSH
15468: LD_INT 2
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 24
15477: PUSH
15478: LD_INT 250
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: PPUSH
15490: CALL_OW 69
15494: PUSH
15495: LD_INT 0
15497: EQUAL
15498: IFFALSE 15200
// end ;
15500: LD_VAR 0 12
15504: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15505: LD_INT 0
15507: PPUSH
15508: PPUSH
15509: PPUSH
15510: PPUSH
15511: PPUSH
15512: PPUSH
15513: PPUSH
15514: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15515: LD_ADDR_VAR 0 7
15519: PUSH
15520: LD_INT 22
15522: PUSH
15523: LD_VAR 0 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: LD_INT 3
15537: PUSH
15538: LD_INT 24
15540: PUSH
15541: LD_INT 550
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 24
15554: PUSH
15555: LD_INT 250
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 69
15575: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15576: LD_ADDR_VAR 0 8
15580: PUSH
15581: LD_INT 22
15583: PUSH
15584: LD_VAR 0 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: LD_INT 25
15598: PUSH
15599: LD_INT 1
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 25
15608: PUSH
15609: LD_INT 5
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 25
15618: PUSH
15619: LD_INT 8
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 25
15628: PUSH
15629: LD_INT 9
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 24
15645: PUSH
15646: LD_INT 1000
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15663: LD_ADDR_VAR 0 9
15667: PUSH
15668: LD_INT 22
15670: PUSH
15671: LD_VAR 0 1
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 25
15682: PUSH
15683: LD_INT 4
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: ST_TO_ADDR
// if medicCount > 0 then
15699: LD_VAR 0 9
15703: PUSH
15704: LD_INT 0
15706: GREATER
15707: IFFALSE 15781
// begin if damageUnit_list > 0 then
15709: LD_VAR 0 7
15713: PUSH
15714: LD_INT 0
15716: GREATER
15717: IFFALSE 15781
// begin for i in damageUnit_list do
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 7
15728: PUSH
15729: FOR_IN
15730: IFFALSE 15779
// begin ComMoveToArea ( i , healArea ) ;
15732: LD_VAR 0 5
15736: PPUSH
15737: LD_VAR 0 2
15741: PPUSH
15742: CALL_OW 113
// for j in medicCount do
15746: LD_ADDR_VAR 0 6
15750: PUSH
15751: LD_VAR 0 9
15755: PUSH
15756: FOR_IN
15757: IFFALSE 15775
// AddComHeal ( j , i ) ;
15759: LD_VAR 0 6
15763: PPUSH
15764: LD_VAR 0 5
15768: PPUSH
15769: CALL_OW 188
15773: GO 15756
15775: POP
15776: POP
// end ;
15777: GO 15729
15779: POP
15780: POP
// end ; end ; if soldiersOK_list > 0 then
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 0
15788: GREATER
15789: IFFALSE 15980
// begin for i in soldiersOK_list do
15791: LD_ADDR_VAR 0 5
15795: PUSH
15796: LD_VAR 0 8
15800: PUSH
15801: FOR_IN
15802: IFFALSE 15978
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15804: LD_ADDR_VAR 0 10
15808: PUSH
15809: LD_INT 22
15811: PUSH
15812: LD_VAR 0 3
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PPUSH
15821: CALL_OW 69
15825: PPUSH
15826: LD_VAR 0 5
15830: PPUSH
15831: CALL_OW 74
15835: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15836: LD_ADDR_VAR 0 11
15840: PUSH
15841: LD_INT 22
15843: PUSH
15844: LD_VAR 0 3
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 2
15855: PUSH
15856: LD_INT 59
15858: PUSH
15859: EMPTY
15860: LIST
15861: PUSH
15862: LD_INT 21
15864: PUSH
15865: LD_INT 1
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 21
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: EMPTY
15893: LIST
15894: PPUSH
15895: CALL_OW 69
15899: PPUSH
15900: LD_VAR 0 5
15904: PPUSH
15905: CALL_OW 74
15909: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15910: LD_VAR 0 5
15914: PPUSH
15915: LD_VAR 0 10
15919: PPUSH
15920: CALL_OW 296
15924: PUSH
15925: LD_INT 8
15927: PLUS
15928: PUSH
15929: LD_VAR 0 5
15933: PPUSH
15934: LD_VAR 0 11
15938: PPUSH
15939: CALL_OW 296
15943: LESS
15944: IFFALSE 15962
// begin ComAttackUnit ( i , target1 ) ;
15946: LD_VAR 0 5
15950: PPUSH
15951: LD_VAR 0 10
15955: PPUSH
15956: CALL_OW 115
// end else
15960: GO 15976
// begin ComAttackUnit ( i , target2 ) ;
15962: LD_VAR 0 5
15966: PPUSH
15967: LD_VAR 0 11
15971: PPUSH
15972: CALL_OW 115
// end ; end ;
15976: GO 15801
15978: POP
15979: POP
// end ; end ;
15980: LD_VAR 0 4
15984: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15985: LD_INT 0
15987: PPUSH
15988: PPUSH
// list := [ ] ;
15989: LD_ADDR_VAR 0 5
15993: PUSH
15994: EMPTY
15995: ST_TO_ADDR
// case d of 0 :
15996: LD_VAR 0 3
16000: PUSH
16001: LD_INT 0
16003: DOUBLE
16004: EQUAL
16005: IFTRUE 16009
16007: GO 16142
16009: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16010: LD_ADDR_VAR 0 5
16014: PUSH
16015: LD_VAR 0 1
16019: PUSH
16020: LD_INT 4
16022: MINUS
16023: PUSH
16024: LD_VAR 0 2
16028: PUSH
16029: LD_INT 4
16031: MINUS
16032: PUSH
16033: LD_INT 2
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: PUSH
16041: LD_VAR 0 1
16045: PUSH
16046: LD_INT 3
16048: MINUS
16049: PUSH
16050: LD_VAR 0 2
16054: PUSH
16055: LD_INT 1
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: PUSH
16063: LD_VAR 0 1
16067: PUSH
16068: LD_INT 4
16070: PLUS
16071: PUSH
16072: LD_VAR 0 2
16076: PUSH
16077: LD_INT 4
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: PUSH
16085: LD_VAR 0 1
16089: PUSH
16090: LD_INT 3
16092: PLUS
16093: PUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_INT 3
16101: PLUS
16102: PUSH
16103: LD_INT 5
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: PUSH
16111: LD_VAR 0 1
16115: PUSH
16116: LD_VAR 0 2
16120: PUSH
16121: LD_INT 4
16123: PLUS
16124: PUSH
16125: LD_INT 0
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: ST_TO_ADDR
// end ; 1 :
16140: GO 16840
16142: LD_INT 1
16144: DOUBLE
16145: EQUAL
16146: IFTRUE 16150
16148: GO 16283
16150: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16151: LD_ADDR_VAR 0 5
16155: PUSH
16156: LD_VAR 0 1
16160: PUSH
16161: LD_VAR 0 2
16165: PUSH
16166: LD_INT 4
16168: MINUS
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: LIST
16177: PUSH
16178: LD_VAR 0 1
16182: PUSH
16183: LD_INT 3
16185: MINUS
16186: PUSH
16187: LD_VAR 0 2
16191: PUSH
16192: LD_INT 3
16194: MINUS
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: PUSH
16204: LD_VAR 0 1
16208: PUSH
16209: LD_INT 4
16211: MINUS
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: PUSH
16226: LD_VAR 0 1
16230: PUSH
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 3
16238: PLUS
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: PUSH
16248: LD_VAR 0 1
16252: PUSH
16253: LD_INT 4
16255: PLUS
16256: PUSH
16257: LD_VAR 0 2
16261: PUSH
16262: LD_INT 4
16264: PLUS
16265: PUSH
16266: LD_INT 5
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: ST_TO_ADDR
// end ; 2 :
16281: GO 16840
16283: LD_INT 2
16285: DOUBLE
16286: EQUAL
16287: IFTRUE 16291
16289: GO 16420
16291: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16292: LD_ADDR_VAR 0 5
16296: PUSH
16297: LD_VAR 0 1
16301: PUSH
16302: LD_VAR 0 2
16306: PUSH
16307: LD_INT 3
16309: MINUS
16310: PUSH
16311: LD_INT 3
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: PUSH
16319: LD_VAR 0 1
16323: PUSH
16324: LD_INT 4
16326: PLUS
16327: PUSH
16328: LD_VAR 0 2
16332: PUSH
16333: LD_INT 4
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: LIST
16340: PUSH
16341: LD_VAR 0 1
16345: PUSH
16346: LD_VAR 0 2
16350: PUSH
16351: LD_INT 4
16353: PLUS
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: LD_VAR 0 1
16367: PUSH
16368: LD_INT 3
16370: MINUS
16371: PUSH
16372: LD_VAR 0 2
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: PUSH
16385: LD_VAR 0 1
16389: PUSH
16390: LD_INT 4
16392: MINUS
16393: PUSH
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 4
16401: MINUS
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: ST_TO_ADDR
// end ; 3 :
16418: GO 16840
16420: LD_INT 3
16422: DOUBLE
16423: EQUAL
16424: IFTRUE 16428
16426: GO 16561
16428: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16429: LD_ADDR_VAR 0 5
16433: PUSH
16434: LD_VAR 0 1
16438: PUSH
16439: LD_INT 3
16441: PLUS
16442: PUSH
16443: LD_VAR 0 2
16447: PUSH
16448: LD_INT 4
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: PUSH
16456: LD_VAR 0 1
16460: PUSH
16461: LD_INT 4
16463: PLUS
16464: PUSH
16465: LD_VAR 0 2
16469: PUSH
16470: LD_INT 4
16472: PLUS
16473: PUSH
16474: LD_INT 5
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_VAR 0 1
16486: PUSH
16487: LD_INT 4
16489: MINUS
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: PUSH
16504: LD_VAR 0 1
16508: PUSH
16509: LD_VAR 0 2
16513: PUSH
16514: LD_INT 4
16516: MINUS
16517: PUSH
16518: LD_INT 3
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: LD_INT 3
16533: MINUS
16534: PUSH
16535: LD_VAR 0 2
16539: PUSH
16540: LD_INT 3
16542: MINUS
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: ST_TO_ADDR
// end ; 4 :
16559: GO 16840
16561: LD_INT 4
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16702
16569: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16570: LD_ADDR_VAR 0 5
16574: PUSH
16575: LD_VAR 0 1
16579: PUSH
16580: LD_VAR 0 2
16584: PUSH
16585: LD_INT 4
16587: PLUS
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: LD_INT 3
16604: PLUS
16605: PUSH
16606: LD_VAR 0 2
16610: PUSH
16611: LD_INT 3
16613: PLUS
16614: PUSH
16615: LD_INT 5
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_VAR 0 1
16627: PUSH
16628: LD_INT 3
16630: PLUS
16631: PUSH
16632: LD_VAR 0 2
16636: PUSH
16637: LD_INT 4
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: LIST
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: LD_VAR 0 2
16654: PUSH
16655: LD_INT 3
16657: MINUS
16658: PUSH
16659: LD_INT 3
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: PUSH
16667: LD_VAR 0 1
16671: PUSH
16672: LD_INT 4
16674: MINUS
16675: PUSH
16676: LD_VAR 0 2
16680: PUSH
16681: LD_INT 4
16683: MINUS
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: ST_TO_ADDR
// end ; 5 :
16700: GO 16840
16702: LD_INT 5
16704: DOUBLE
16705: EQUAL
16706: IFTRUE 16710
16708: GO 16839
16710: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16711: LD_ADDR_VAR 0 5
16715: PUSH
16716: LD_VAR 0 1
16720: PUSH
16721: LD_INT 4
16723: MINUS
16724: PUSH
16725: LD_VAR 0 2
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: PUSH
16738: LD_VAR 0 1
16742: PUSH
16743: LD_VAR 0 2
16747: PUSH
16748: LD_INT 4
16750: MINUS
16751: PUSH
16752: LD_INT 3
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: LIST
16759: PUSH
16760: LD_VAR 0 1
16764: PUSH
16765: LD_INT 4
16767: PLUS
16768: PUSH
16769: LD_VAR 0 2
16773: PUSH
16774: LD_INT 4
16776: PLUS
16777: PUSH
16778: LD_INT 5
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: PUSH
16786: LD_VAR 0 1
16790: PUSH
16791: LD_INT 3
16793: PLUS
16794: PUSH
16795: LD_VAR 0 2
16799: PUSH
16800: LD_INT 4
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: PUSH
16808: LD_VAR 0 1
16812: PUSH
16813: LD_VAR 0 2
16817: PUSH
16818: LD_INT 3
16820: PLUS
16821: PUSH
16822: LD_INT 0
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: ST_TO_ADDR
// end ; end ;
16837: GO 16840
16839: POP
// result := list ;
16840: LD_ADDR_VAR 0 4
16844: PUSH
16845: LD_VAR 0 5
16849: ST_TO_ADDR
// end ; end_of_file
16850: LD_VAR 0 4
16854: RET
// every 1 do var i ;
16855: GO 16857
16857: DISABLE
16858: LD_INT 0
16860: PPUSH
// begin InGameOn ;
16861: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16865: LD_INT 53
16867: PPUSH
16868: LD_INT 40
16870: PPUSH
16871: CALL_OW 84
// wait ( 0 0$5 ) ;
16875: LD_INT 175
16877: PPUSH
16878: CALL_OW 67
// if gammaCommander = 1 then
16882: LD_EXP 12
16886: PUSH
16887: LD_INT 1
16889: EQUAL
16890: IFFALSE 16901
// CenterNowOnUnits ( Donaldson ) ;
16892: LD_EXP 3
16896: PPUSH
16897: CALL_OW 87
// if gammaCommander = 2 then
16901: LD_EXP 12
16905: PUSH
16906: LD_INT 2
16908: EQUAL
16909: IFFALSE 16920
// CenterNowOnUnits ( Brown ) ;
16911: LD_EXP 2
16915: PPUSH
16916: CALL_OW 87
// if gammaCommander = 3 then
16920: LD_EXP 12
16924: PUSH
16925: LD_INT 3
16927: EQUAL
16928: IFFALSE 16939
// CenterNowOnUnits ( Houten ) ;
16930: LD_EXP 13
16934: PPUSH
16935: CALL_OW 87
// if gammaCommander = 1 then
16939: LD_EXP 12
16943: PUSH
16944: LD_INT 1
16946: EQUAL
16947: IFFALSE 16961
// Say ( Donaldson , D1-Don-1 ) ;
16949: LD_EXP 3
16953: PPUSH
16954: LD_STRING D1-Don-1
16956: PPUSH
16957: CALL_OW 88
// if gammaCommander = 2 then
16961: LD_EXP 12
16965: PUSH
16966: LD_INT 2
16968: EQUAL
16969: IFFALSE 16983
// Say ( Brown , D1-Brown-1 ) ;
16971: LD_EXP 2
16975: PPUSH
16976: LD_STRING D1-Brown-1
16978: PPUSH
16979: CALL_OW 88
// if gammaCommander = 3 then
16983: LD_EXP 12
16987: PUSH
16988: LD_INT 3
16990: EQUAL
16991: IFFALSE 17005
// Say ( Houten , D1-VanH-1 ) ;
16993: LD_EXP 13
16997: PPUSH
16998: LD_STRING D1-VanH-1
17000: PPUSH
17001: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17005: LD_EXP 22
17009: PPUSH
17010: LD_STRING D1-Har-1
17012: PPUSH
17013: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
17017: LD_INT 53
17019: PPUSH
17020: LD_INT 40
17022: PPUSH
17023: CALL_OW 84
// if gammaCommander = 1 then
17027: LD_EXP 12
17031: PUSH
17032: LD_INT 1
17034: EQUAL
17035: IFFALSE 17049
// Say ( Donaldson , D1-Don-2 ) ;
17037: LD_EXP 3
17041: PPUSH
17042: LD_STRING D1-Don-2
17044: PPUSH
17045: CALL_OW 88
// if gammaCommander = 2 then
17049: LD_EXP 12
17053: PUSH
17054: LD_INT 2
17056: EQUAL
17057: IFFALSE 17071
// Say ( Brown , D1-Brown-2 ) ;
17059: LD_EXP 2
17063: PPUSH
17064: LD_STRING D1-Brown-2
17066: PPUSH
17067: CALL_OW 88
// if gammaCommander = 3 then
17071: LD_EXP 12
17075: PUSH
17076: LD_INT 3
17078: EQUAL
17079: IFFALSE 17093
// Say ( Houten , D1-VanH-2 ) ;
17081: LD_EXP 13
17085: PPUSH
17086: LD_STRING D1-VanH-2
17088: PPUSH
17089: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17093: LD_EXP 22
17097: PPUSH
17098: LD_STRING D1-Har-2
17100: PPUSH
17101: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17105: LD_INT 22
17107: PUSH
17108: LD_INT 1
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 33
17117: PUSH
17118: LD_INT 2
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 61
17127: PUSH
17128: EMPTY
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL_OW 69
17140: IFFALSE 17205
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17142: LD_ADDR_VAR 0 1
17146: PUSH
17147: LD_INT 22
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 33
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 61
17169: PUSH
17170: EMPTY
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: PUSH
17183: FOR_IN
17184: IFFALSE 17203
// ComAgressiveMove ( i , 70 , 41 ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: LD_INT 70
17193: PPUSH
17194: LD_INT 41
17196: PPUSH
17197: CALL_OW 114
17201: GO 17183
17203: POP
17204: POP
// repeat wait ( 0 0$1 ) ;
17205: LD_INT 35
17207: PPUSH
17208: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17212: LD_ADDR_VAR 0 1
17216: PUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 6
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: PPUSH
17230: CALL_OW 69
17234: PUSH
17235: FOR_IN
17236: IFFALSE 17255
// ComAgressiveMove ( i , 54 , 20 ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 54
17245: PPUSH
17246: LD_INT 20
17248: PPUSH
17249: CALL_OW 114
17253: GO 17235
17255: POP
17256: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_INT 22
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 25
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 3
17284: PUSH
17285: LD_INT 54
17287: PUSH
17288: EMPTY
17289: LIST
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PUSH
17305: FOR_IN
17306: IFFALSE 17340
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17308: LD_VAR 0 1
17312: PPUSH
17313: LD_INT 70
17315: PPUSH
17316: LD_INT 41
17318: PPUSH
17319: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_INT 46
17330: PPUSH
17331: LD_INT 39
17333: PPUSH
17334: CALL_OW 174
// end ;
17338: GO 17305
17340: POP
17341: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: LD_INT 22
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 21
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: LD_INT 24
17372: PUSH
17373: LD_INT 500
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 69
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17428
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_EXP 37
17406: PPUSH
17407: CALL_OW 250
17411: PPUSH
17412: LD_EXP 37
17416: PPUSH
17417: CALL_OW 251
17421: PPUSH
17422: CALL_OW 111
17426: GO 17394
17428: POP
17429: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17430: LD_INT 22
17432: PUSH
17433: LD_INT 6
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 21
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 24
17452: PUSH
17453: LD_INT 250
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: PUSH
17470: LD_INT 6
17472: LESS
17473: IFFALSE 17205
// InGameOff ;
17475: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17479: LD_STRING M1
17481: PPUSH
17482: CALL_OW 337
// SaveForQuickRestart ;
17486: CALL_OW 22
// startCutscene = 0 ;
17490: LD_ADDR_EXP 38
17494: PUSH
17495: LD_INT 0
17497: ST_TO_ADDR
// end ;
17498: PPOPN 1
17500: END
// every 1 1$0 do
17501: GO 17503
17503: DISABLE
// begin PrepareSupportFromDelta ;
17504: CALL 2964 0 0
// firstAttack = 1 ;
17508: LD_ADDR_EXP 33
17512: PUSH
17513: LD_INT 1
17515: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17516: LD_EXP 8
17520: PPUSH
17521: CALL_OW 302
17525: IFFALSE 17541
// begin Say ( Gladstone , D2-Glad-1 ) ;
17527: LD_EXP 8
17531: PPUSH
17532: LD_STRING D2-Glad-1
17534: PPUSH
17535: CALL_OW 88
// end else
17539: GO 17643
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17541: LD_INT 4
17543: PPUSH
17544: LD_INT 22
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 21
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 2
17566: PUSH
17567: LD_INT 25
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 25
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 25
17589: PUSH
17590: LD_INT 3
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 25
17599: PUSH
17600: LD_INT 4
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 70
17623: PUSH
17624: LD_EXP 15
17628: PUSH
17629: EMPTY
17630: LIST
17631: DIFF
17632: PPUSH
17633: LD_STRING D2-Sol1-1
17635: PPUSH
17636: LD_STRING D2-FSol1-1
17638: PPUSH
17639: CALL 6636 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17643: LD_EXP 3
17647: PPUSH
17648: CALL_OW 302
17652: PUSH
17653: LD_EXP 12
17657: PUSH
17658: LD_INT 1
17660: EQUAL
17661: AND
17662: IFFALSE 17676
// Say ( Donaldson , D2-Don-1 ) ;
17664: LD_EXP 3
17668: PPUSH
17669: LD_STRING D2-Don-1
17671: PPUSH
17672: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17676: LD_EXP 2
17680: PPUSH
17681: CALL_OW 302
17685: PUSH
17686: LD_EXP 12
17690: PUSH
17691: LD_INT 2
17693: EQUAL
17694: AND
17695: IFFALSE 17709
// Say ( Brown , D2-Brown-1 ) ;
17697: LD_EXP 2
17701: PPUSH
17702: LD_STRING D2-Brown-1
17704: PPUSH
17705: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17709: LD_EXP 13
17713: PPUSH
17714: CALL_OW 302
17718: PUSH
17719: LD_EXP 12
17723: PUSH
17724: LD_INT 3
17726: EQUAL
17727: AND
17728: IFFALSE 17742
// Say ( Houten , D2-VanH-1 ) ;
17730: LD_EXP 13
17734: PPUSH
17735: LD_STRING D2-VanH-1
17737: PPUSH
17738: CALL_OW 88
// end ;
17742: END
// every 0 0$1 do
17743: GO 17745
17745: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
17746: LD_STRING 07_time
17748: PPUSH
17749: LD_INT 0
17751: PPUSH
17752: CALL_OW 30
17756: PUSH
17757: LD_INT 3
17759: DIV
17760: PPUSH
17761: CALL_OW 67
// PrepareMacmillanSquad ;
17765: CALL 3579 0 0
// CenterNowOnUnits ( JMM ) ;
17769: LD_EXP 1
17773: PPUSH
17774: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17778: LD_EXP 1
17782: PPUSH
17783: LD_STRING D3-JMM-1
17785: PPUSH
17786: CALL_OW 88
// JMMArrive = 1 ;
17790: LD_ADDR_EXP 39
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17798: LD_EXP 3
17802: PPUSH
17803: CALL_OW 302
17807: PUSH
17808: LD_EXP 12
17812: PUSH
17813: LD_INT 1
17815: EQUAL
17816: AND
17817: IFFALSE 17833
// begin Say ( Donaldson , D3-Don-1 ) ;
17819: LD_EXP 3
17823: PPUSH
17824: LD_STRING D3-Don-1
17826: PPUSH
17827: CALL_OW 88
// end else
17831: GO 17885
// begin if gammaCommander = 1 then
17833: LD_EXP 12
17837: PUSH
17838: LD_INT 1
17840: EQUAL
17841: IFFALSE 17885
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17843: LD_EXP 11
17847: PPUSH
17848: LD_INT 26
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 72
17862: PPUSH
17863: LD_STRING D3-Sol1-1
17865: PPUSH
17866: LD_STRING D3-Sol1-1
17868: PPUSH
17869: CALL 6636 0 3
// Say ( JMM , D3-JMM-2 ) ;
17873: LD_EXP 1
17877: PPUSH
17878: LD_STRING D3-JMM-2
17880: PPUSH
17881: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17885: LD_EXP 2
17889: PPUSH
17890: CALL_OW 302
17894: PUSH
17895: LD_EXP 12
17899: PUSH
17900: LD_INT 2
17902: EQUAL
17903: AND
17904: IFFALSE 17920
// begin Say ( Brown , D3-Brown-1 ) ;
17906: LD_EXP 2
17910: PPUSH
17911: LD_STRING D3-Brown-1
17913: PPUSH
17914: CALL_OW 88
// end else
17918: GO 17972
// begin if gammaCommander = 2 then
17920: LD_EXP 12
17924: PUSH
17925: LD_INT 2
17927: EQUAL
17928: IFFALSE 17972
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17930: LD_EXP 11
17934: PPUSH
17935: LD_INT 26
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PPUSH
17945: CALL_OW 72
17949: PPUSH
17950: LD_STRING D3-Sol1-1a
17952: PPUSH
17953: LD_STRING D3-Sol1-1a
17955: PPUSH
17956: CALL 6636 0 3
// Say ( JMM , D3-JMM-2 ) ;
17960: LD_EXP 1
17964: PPUSH
17965: LD_STRING D3-JMM-2
17967: PPUSH
17968: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17972: LD_EXP 13
17976: PPUSH
17977: CALL_OW 302
17981: PUSH
17982: LD_EXP 12
17986: PUSH
17987: LD_INT 3
17989: EQUAL
17990: AND
17991: IFFALSE 18007
// begin Say ( Houten , D3-VanH-1 ) ;
17993: LD_EXP 13
17997: PPUSH
17998: LD_STRING D3-VanH-1
18000: PPUSH
18001: CALL_OW 88
// end else
18005: GO 18059
// begin if gammaCommander = 3 then
18007: LD_EXP 12
18011: PUSH
18012: LD_INT 3
18014: EQUAL
18015: IFFALSE 18059
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
18017: LD_EXP 11
18021: PPUSH
18022: LD_INT 26
18024: PUSH
18025: LD_INT 1
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 72
18036: PPUSH
18037: LD_STRING D3-Sol1-1b
18039: PPUSH
18040: LD_STRING D3-Sol1-1b
18042: PPUSH
18043: CALL 6636 0 3
// Say ( JMM , D3-JMM-2 ) ;
18047: LD_EXP 1
18051: PPUSH
18052: LD_STRING D3-JMM-2
18054: PPUSH
18055: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
18059: LD_EXP 15
18063: PPUSH
18064: CALL_OW 302
18068: IFFALSE 18096
// begin Say ( Joan , D3a-Joan-1 ) ;
18070: LD_EXP 15
18074: PPUSH
18075: LD_STRING D3a-Joan-1
18077: PPUSH
18078: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18082: LD_EXP 1
18086: PPUSH
18087: LD_STRING D3a-JMM-1
18089: PPUSH
18090: CALL_OW 88
// end else
18094: GO 18549
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18096: LD_EXP 3
18100: PPUSH
18101: CALL_OW 302
18105: PUSH
18106: LD_EXP 12
18110: PUSH
18111: LD_INT 1
18113: EQUAL
18114: AND
18115: PUSH
18116: LD_STRING 06_JoanStatus_1
18118: PPUSH
18119: LD_INT 0
18121: PPUSH
18122: CALL_OW 30
18126: PUSH
18127: LD_INT 1
18129: EQUAL
18130: AND
18131: IFFALSE 18182
// begin Say ( Donaldson , D3b-Don-1 ) ;
18133: LD_EXP 3
18137: PPUSH
18138: LD_STRING D3b-Don-1
18140: PPUSH
18141: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
18145: LD_EXP 1
18149: PPUSH
18150: LD_STRING D3b-JMM-2
18152: PPUSH
18153: CALL_OW 88
// if IsOK ( Lisa ) then
18157: LD_EXP 6
18161: PPUSH
18162: CALL_OW 302
18166: IFFALSE 18180
// Say ( Lisa , D3b-Lisa-2 ) ;
18168: LD_EXP 6
18172: PPUSH
18173: LD_STRING D3b-Lisa-2
18175: PPUSH
18176: CALL_OW 88
// end else
18180: GO 18247
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18182: LD_EXP 11
18186: PPUSH
18187: LD_INT 26
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 72
18201: PPUSH
18202: LD_STRING D3b-Sol1-1
18204: PPUSH
18205: LD_STRING D3b-Sol1-1
18207: PPUSH
18208: CALL 6636 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18212: LD_EXP 1
18216: PPUSH
18217: LD_STRING D3b-JMM-2
18219: PPUSH
18220: CALL_OW 88
// if IsOK ( Lisa ) then
18224: LD_EXP 6
18228: PPUSH
18229: CALL_OW 302
18233: IFFALSE 18247
// Say ( Lisa , D3b-Lisa-2 ) ;
18235: LD_EXP 6
18239: PPUSH
18240: LD_STRING D3b-Lisa-2
18242: PPUSH
18243: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18247: LD_EXP 2
18251: PPUSH
18252: CALL_OW 302
18256: PUSH
18257: LD_EXP 12
18261: PUSH
18262: LD_INT 2
18264: EQUAL
18265: AND
18266: PUSH
18267: LD_STRING 06_JoanStatus_1
18269: PPUSH
18270: LD_INT 0
18272: PPUSH
18273: CALL_OW 30
18277: PUSH
18278: LD_INT 1
18280: EQUAL
18281: AND
18282: IFFALSE 18333
// begin Say ( Brown , D3b-Brown-1 ) ;
18284: LD_EXP 2
18288: PPUSH
18289: LD_STRING D3b-Brown-1
18291: PPUSH
18292: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
18296: LD_EXP 1
18300: PPUSH
18301: LD_STRING D3b-JMM-2
18303: PPUSH
18304: CALL_OW 88
// if IsOK ( Lisa ) then
18308: LD_EXP 6
18312: PPUSH
18313: CALL_OW 302
18317: IFFALSE 18331
// Say ( Lisa , D3b-Lisa-2 ) ;
18319: LD_EXP 6
18323: PPUSH
18324: LD_STRING D3b-Lisa-2
18326: PPUSH
18327: CALL_OW 88
// end else
18331: GO 18398
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18333: LD_EXP 11
18337: PPUSH
18338: LD_INT 26
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PPUSH
18348: CALL_OW 72
18352: PPUSH
18353: LD_STRING D3b-Sol1-1
18355: PPUSH
18356: LD_STRING D3b-Sol1-1
18358: PPUSH
18359: CALL 6636 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18363: LD_EXP 1
18367: PPUSH
18368: LD_STRING D3b-JMM-2
18370: PPUSH
18371: CALL_OW 88
// if IsOK ( Lisa ) then
18375: LD_EXP 6
18379: PPUSH
18380: CALL_OW 302
18384: IFFALSE 18398
// Say ( Lisa , D3b-Lisa-2 ) ;
18386: LD_EXP 6
18390: PPUSH
18391: LD_STRING D3b-Lisa-2
18393: PPUSH
18394: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18398: LD_EXP 13
18402: PPUSH
18403: CALL_OW 302
18407: PUSH
18408: LD_EXP 12
18412: PUSH
18413: LD_INT 3
18415: EQUAL
18416: AND
18417: PUSH
18418: LD_STRING 06_JoanStatus_1
18420: PPUSH
18421: LD_INT 0
18423: PPUSH
18424: CALL_OW 30
18428: PUSH
18429: LD_INT 1
18431: EQUAL
18432: AND
18433: IFFALSE 18484
// begin Say ( Houten , D3b-VanH-1 ) ;
18435: LD_EXP 13
18439: PPUSH
18440: LD_STRING D3b-VanH-1
18442: PPUSH
18443: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
18447: LD_EXP 1
18451: PPUSH
18452: LD_STRING D3b-JMM-2
18454: PPUSH
18455: CALL_OW 88
// if IsOK ( Lisa ) then
18459: LD_EXP 6
18463: PPUSH
18464: CALL_OW 302
18468: IFFALSE 18482
// Say ( Lisa , D3b-Lisa-2 ) ;
18470: LD_EXP 6
18474: PPUSH
18475: LD_STRING D3b-Lisa-2
18477: PPUSH
18478: CALL_OW 88
// end else
18482: GO 18549
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18484: LD_EXP 11
18488: PPUSH
18489: LD_INT 26
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PPUSH
18499: CALL_OW 72
18503: PPUSH
18504: LD_STRING D3b-Sol1-1
18506: PPUSH
18507: LD_STRING D3b-Sol1-1
18509: PPUSH
18510: CALL 6636 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18514: LD_EXP 1
18518: PPUSH
18519: LD_STRING D3b-JMM-2
18521: PPUSH
18522: CALL_OW 88
// if IsOK ( Lisa ) then
18526: LD_EXP 6
18530: PPUSH
18531: CALL_OW 302
18535: IFFALSE 18549
// Say ( Lisa , D3b-Lisa-2 ) ;
18537: LD_EXP 6
18541: PPUSH
18542: LD_STRING D3b-Lisa-2
18544: PPUSH
18545: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18549: LD_INT 22
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 21
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 26
18571: PUSH
18572: LD_INT 1
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: LD_INT 25
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 25
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 25
18604: PUSH
18605: LD_INT 3
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 25
18614: PUSH
18615: LD_INT 4
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: PPUSH
18635: CALL_OW 69
18639: PUSH
18640: LD_EXP 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: DIFF
18648: PPUSH
18649: LD_STRING DCa-Sol1-1
18651: PPUSH
18652: LD_STRING DCa-Sol1-1
18654: PPUSH
18655: CALL 6636 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18659: LD_EXP 1
18663: PPUSH
18664: LD_STRING DCb-JMM-1
18666: PPUSH
18667: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18671: LD_INT 22
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 21
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 26
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: LD_INT 25
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 25
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 25
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 25
18736: PUSH
18737: LD_INT 4
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: PUSH
18762: LD_EXP 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: DIFF
18770: PPUSH
18771: LD_STRING DCb-Sol1-1
18773: PPUSH
18774: LD_STRING DCb-Sol1-1
18776: PPUSH
18777: CALL 6636 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18781: LD_EXP 1
18785: PPUSH
18786: LD_STRING DCb-JMM-2
18788: PPUSH
18789: CALL_OW 88
// secondAttack = 1 ;
18793: LD_ADDR_EXP 34
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// end ;
18801: END
// every 0 0$01 trigger JMMArrive = 1 do
18802: LD_EXP 39
18806: PUSH
18807: LD_INT 1
18809: EQUAL
18810: IFFALSE 18890
18812: GO 18814
18814: DISABLE
// begin wait ( 3 3$0 ) ;
18815: LD_INT 6300
18817: PPUSH
18818: CALL_OW 67
// DialogueOn ;
18822: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18826: LD_EXP 23
18830: PPUSH
18831: LD_STRING D4-Pow-1
18833: PPUSH
18834: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18838: LD_EXP 1
18842: PPUSH
18843: LD_STRING D4-JMM-1
18845: PPUSH
18846: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18850: LD_EXP 23
18854: PPUSH
18855: LD_STRING D4-Pow-2
18857: PPUSH
18858: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18862: LD_EXP 1
18866: PPUSH
18867: LD_STRING D4-JMM-2
18869: PPUSH
18870: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18874: LD_EXP 23
18878: PPUSH
18879: LD_STRING D4-Pow-3
18881: PPUSH
18882: CALL_OW 94
// DialogueOff ;
18886: CALL_OW 7
// end ;
18890: END
// every 0 0$01 trigger JMMArrive = 1 do
18891: LD_EXP 39
18895: PUSH
18896: LD_INT 1
18898: EQUAL
18899: IFFALSE 18931
18901: GO 18903
18903: DISABLE
// begin wait ( 8 8$0 ) ;
18904: LD_INT 16800
18906: PPUSH
18907: CALL_OW 67
// DialogueOn ;
18911: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18915: LD_EXP 23
18919: PPUSH
18920: LD_STRING D4a-Pow-1
18922: PPUSH
18923: CALL_OW 94
// DialogueOff ;
18927: CALL_OW 7
// end ;
18931: END
// every 0 0$01 trigger JMMArrive = 1 do
18932: LD_EXP 39
18936: PUSH
18937: LD_INT 1
18939: EQUAL
18940: IFFALSE 18985
18942: GO 18944
18944: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18945: LD_INT 21000
18947: PUSH
18948: LD_INT 25200
18950: PUSH
18951: LD_INT 31500
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: PUSH
18959: LD_OWVAR 67
18963: ARRAY
18964: PPUSH
18965: CALL_OW 67
// PrepareSikorsky ;
18969: CALL 5220 0 0
// SikorskyArrive = 1 ;
18973: LD_ADDR_EXP 18
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// PrepareSikorskyArmy ;
18981: CALL 5360 0 0
// end ;
18985: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18986: LD_EXP 17
18990: PPUSH
18991: LD_INT 5
18993: PPUSH
18994: CALL_OW 308
18998: IFFALSE 19190
19000: GO 19002
19002: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
19003: LD_EXP 17
19007: PPUSH
19008: CALL_OW 87
// DialogueOn ;
19012: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
19016: LD_EXP 16
19020: PPUSH
19021: LD_STRING D5-Sik-1
19023: PPUSH
19024: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
19028: LD_EXP 1
19032: PPUSH
19033: LD_STRING D5-JMM-1a
19035: PPUSH
19036: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
19040: LD_EXP 16
19044: PPUSH
19045: LD_STRING D5-Sik-2
19047: PPUSH
19048: CALL_OW 88
// case query ( QSikorski ) of 1 :
19052: LD_STRING QSikorski
19054: PPUSH
19055: CALL_OW 97
19059: PUSH
19060: LD_INT 1
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19091
19068: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
19069: LD_EXP 16
19073: PPUSH
19074: LD_STRING D5a-Sik-1
19076: PPUSH
19077: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
19081: LD_ADDR_EXP 19
19085: PUSH
19086: LD_INT 2100
19088: ST_TO_ADDR
// end ; 2 :
19089: GO 19178
19091: LD_INT 2
19093: DOUBLE
19094: EQUAL
19095: IFTRUE 19099
19097: GO 19122
19099: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
19100: LD_EXP 16
19104: PPUSH
19105: LD_STRING D5b-Sik-1
19107: PPUSH
19108: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19112: LD_ADDR_EXP 19
19116: PUSH
19117: LD_INT 10500
19119: ST_TO_ADDR
// end ; 3 :
19120: GO 19178
19122: LD_INT 3
19124: DOUBLE
19125: EQUAL
19126: IFTRUE 19130
19128: GO 19177
19130: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
19131: LD_EXP 16
19135: PPUSH
19136: LD_STRING D5c-Sik-1
19138: PPUSH
19139: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
19143: LD_EXP 1
19147: PPUSH
19148: LD_STRING D5c-JMM-1
19150: PPUSH
19151: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
19155: LD_EXP 16
19159: PPUSH
19160: LD_STRING D5c-Sik-2
19162: PPUSH
19163: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19167: LD_ADDR_EXP 19
19171: PUSH
19172: LD_INT 10500
19174: ST_TO_ADDR
// end ; end ;
19175: GO 19178
19177: POP
// DialogueOff ;
19178: CALL_OW 7
// timerStatus = 1 ;
19182: LD_ADDR_EXP 35
19186: PUSH
19187: LD_INT 1
19189: ST_TO_ADDR
// end ;
19190: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19191: LD_EXP 19
19195: PUSH
19196: LD_INT 35
19198: LESS
19199: IFFALSE 19247
19201: GO 19203
19203: DISABLE
// begin timerStatus = 0 ;
19204: LD_ADDR_EXP 35
19208: PUSH
19209: LD_INT 0
19211: ST_TO_ADDR
// DialogueOn ;
19212: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19216: LD_EXP 16
19220: PPUSH
19221: LD_STRING D6-Sik-1
19223: PPUSH
19224: CALL_OW 88
// DialogueOff ;
19228: CALL_OW 7
// SikorskyAI = 1 ;
19232: LD_ADDR_EXP 20
19236: PUSH
19237: LD_INT 1
19239: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19240: LD_STRING M2
19242: PPUSH
19243: CALL_OW 337
// end ;
19247: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19248: LD_EXP 17
19252: PPUSH
19253: LD_INT 18
19255: PPUSH
19256: CALL_OW 308
19260: IFFALSE 19344
19262: GO 19264
19264: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19265: LD_EXP 16
19269: PPUSH
19270: LD_STRING D7-Sik-1
19272: PPUSH
19273: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19277: LD_EXP 1
19281: PPUSH
19282: LD_INT 24
19284: PPUSH
19285: CALL_OW 308
19289: PUSH
19290: LD_EXP 1
19294: PPUSH
19295: CALL_OW 310
19299: OR
19300: IFFALSE 19324
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19302: LD_EXP 16
19306: PPUSH
19307: LD_STRING D7a-Sik-1
19309: PPUSH
19310: CALL_OW 88
// SikorskyStatus = 1 ;
19314: LD_ADDR_EXP 21
19318: PUSH
19319: LD_INT 1
19321: ST_TO_ADDR
// end else
19322: GO 19344
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19324: LD_EXP 16
19328: PPUSH
19329: LD_STRING D7b-Sik-1
19331: PPUSH
19332: CALL_OW 88
// SikorskyStatus = 2 ;
19336: LD_ADDR_EXP 21
19340: PUSH
19341: LD_INT 2
19343: ST_TO_ADDR
// end ; end ;
19344: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19345: LD_EXP 36
19349: PUSH
19350: LD_INT 1
19352: EQUAL
19353: IFFALSE 19462
19355: GO 19357
19357: DISABLE
19358: LD_INT 0
19360: PPUSH
// begin enable ;
19361: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19362: LD_ADDR_VAR 0 1
19366: PUSH
19367: LD_INT 22
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PPUSH
19377: CALL_OW 69
19381: PUSH
19382: FOR_IN
19383: IFFALSE 19410
// if IsInArea ( i , RussianEscape ) then
19385: LD_VAR 0 1
19389: PPUSH
19390: LD_INT 22
19392: PPUSH
19393: CALL_OW 308
19397: IFFALSE 19408
// RemoveUnit ( i ) ;
19399: LD_VAR 0 1
19403: PPUSH
19404: CALL_OW 64
19408: GO 19382
19410: POP
19411: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19412: LD_ADDR_VAR 0 1
19416: PUSH
19417: LD_INT 22
19419: PUSH
19420: LD_INT 6
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 69
19431: PUSH
19432: FOR_IN
19433: IFFALSE 19460
// if IsInArea ( i , RussianEscape ) then
19435: LD_VAR 0 1
19439: PPUSH
19440: LD_INT 22
19442: PPUSH
19443: CALL_OW 308
19447: IFFALSE 19458
// RemoveUnit ( i ) ;
19449: LD_VAR 0 1
19453: PPUSH
19454: CALL_OW 64
19458: GO 19432
19460: POP
19461: POP
// end ; end_of_file
19462: PPOPN 1
19464: END
// on BuildingComplete ( building ) do var tmp , un ;
19465: LD_INT 0
19467: PPUSH
19468: PPUSH
// begin if GetSide ( building ) = 3 then
19469: LD_VAR 0 1
19473: PPUSH
19474: CALL_OW 255
19478: PUSH
19479: LD_INT 3
19481: EQUAL
19482: IFFALSE 19969
// begin if GetBType ( building ) = b_depot then
19484: LD_VAR 0 1
19488: PPUSH
19489: CALL_OW 266
19493: PUSH
19494: LD_INT 0
19496: EQUAL
19497: IFFALSE 19565
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19499: LD_VAR 0 1
19503: PPUSH
19504: CALL_OW 274
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: LD_INT 5000
19514: PPUSH
19515: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19519: LD_VAR 0 1
19523: PPUSH
19524: CALL_OW 274
19528: PPUSH
19529: LD_INT 2
19531: PPUSH
19532: LD_INT 5000
19534: PPUSH
19535: CALL_OW 277
// SetBName ( building , konev ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_STRING konev
19546: PPUSH
19547: CALL_OW 500
// ruDepot = building ;
19551: LD_ADDR_EXP 28
19555: PUSH
19556: LD_VAR 0 1
19560: ST_TO_ADDR
// BuildRussianBase ;
19561: CALL 7241 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 266
19574: PUSH
19575: LD_INT 0
19577: EQUAL
19578: PUSH
19579: LD_VAR 0 1
19583: PPUSH
19584: CALL_OW 266
19588: PUSH
19589: LD_INT 2
19591: EQUAL
19592: OR
19593: PUSH
19594: LD_VAR 0 1
19598: PPUSH
19599: CALL_OW 266
19603: PUSH
19604: LD_INT 4
19606: EQUAL
19607: OR
19608: IFFALSE 19619
// ComUpgrade ( building ) ;
19610: LD_VAR 0 1
19614: PPUSH
19615: CALL_OW 146
// if GetBType ( building ) = b_lab then
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 266
19628: PUSH
19629: LD_INT 6
19631: EQUAL
19632: IFFALSE 19683
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19634: LD_VAR 0 1
19638: PPUSH
19639: LD_INT 10
19641: PPUSH
19642: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19646: LD_VAR 0 1
19650: PPUSH
19651: LD_INT 12
19653: PPUSH
19654: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19658: LD_INT 3
19660: PPUSH
19661: LD_VAR 0 1
19665: PPUSH
19666: LD_INT 3
19668: PPUSH
19669: CALL 7796 0 3
// ruLab = building ;
19673: LD_ADDR_EXP 29
19677: PUSH
19678: LD_VAR 0 1
19682: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19683: LD_VAR 0 1
19687: PPUSH
19688: CALL_OW 266
19692: PUSH
19693: LD_INT 32
19695: EQUAL
19696: IFFALSE 19814
// begin uc_side = 3 ;
19698: LD_ADDR_OWVAR 20
19702: PUSH
19703: LD_INT 3
19705: ST_TO_ADDR
// uc_nation = 3 ;
19706: LD_ADDR_OWVAR 21
19710: PUSH
19711: LD_INT 3
19713: ST_TO_ADDR
// hc_gallery =  ;
19714: LD_ADDR_OWVAR 33
19718: PUSH
19719: LD_STRING 
19721: ST_TO_ADDR
// hc_name =  ;
19722: LD_ADDR_OWVAR 26
19726: PUSH
19727: LD_STRING 
19729: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19730: LD_INT 0
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: LD_EXP 25
19740: PPUSH
19741: LD_EXP 26
19745: PPUSH
19746: CALL_OW 12
19750: PPUSH
19751: CALL_OW 380
// un = CreateHuman ;
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: CALL_OW 44
19764: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19765: LD_VAR 0 3
19769: PPUSH
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19779: LD_VAR 0 1
19783: PPUSH
19784: LD_INT 43
19786: PUSH
19787: LD_INT 44
19789: PUSH
19790: LD_INT 46
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 1
19800: PPUSH
19801: LD_INT 3
19803: PPUSH
19804: CALL_OW 12
19808: ARRAY
19809: PPUSH
19810: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19814: LD_VAR 0 1
19818: PPUSH
19819: CALL_OW 266
19823: PUSH
19824: LD_INT 33
19826: EQUAL
19827: IFFALSE 19864
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 43
19836: PUSH
19837: LD_INT 44
19839: PUSH
19840: LD_INT 46
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: PPUSH
19851: LD_INT 3
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: PPUSH
19860: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL_OW 266
19873: PUSH
19874: LD_INT 24
19876: EQUAL
19877: IFFALSE 19887
// russianAI = 1 ;
19879: LD_ADDR_EXP 27
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19887: LD_EXP 31
19891: PUSH
19892: LD_INT 0
19894: GREATER
19895: IFFALSE 19969
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19897: LD_ADDR_EXP 31
19901: PUSH
19902: LD_EXP 31
19906: PPUSH
19907: LD_INT 1
19909: PPUSH
19910: CALL_OW 3
19914: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19915: LD_ADDR_EXP 31
19919: PUSH
19920: LD_EXP 31
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 3
19932: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19933: LD_ADDR_EXP 31
19937: PUSH
19938: LD_EXP 31
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: CALL_OW 3
19950: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19951: LD_ADDR_EXP 31
19955: PUSH
19956: LD_EXP 31
19960: PPUSH
19961: LD_INT 1
19963: PPUSH
19964: CALL_OW 3
19968: ST_TO_ADDR
// end ; end ; end ;
19969: PPOPN 3
19971: END
// on UpgradeComplete ( building ) do var i ;
19972: LD_INT 0
19974: PPUSH
// begin if GetSide ( building ) = 3 then
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 255
19984: PUSH
19985: LD_INT 3
19987: EQUAL
19988: IFFALSE 20169
// begin if GetBType ( building ) = b_factory then
19990: LD_VAR 0 1
19994: PPUSH
19995: CALL_OW 266
19999: PUSH
20000: LD_INT 3
20002: EQUAL
20003: IFFALSE 20070
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_INT 22
20012: PUSH
20013: LD_INT 3
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 25
20022: PUSH
20023: LD_INT 3
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PPUSH
20034: CALL_OW 69
20038: PUSH
20039: FOR_IN
20040: IFFALSE 20058
// ComEnterUnit ( i , building ) ;
20042: LD_VAR 0 2
20046: PPUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 120
20056: GO 20039
20058: POP
20059: POP
// ruFab = building ;
20060: LD_ADDR_EXP 30
20064: PUSH
20065: LD_VAR 0 1
20069: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 266
20079: PUSH
20080: LD_INT 8
20082: EQUAL
20083: IFFALSE 20140
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20085: LD_ADDR_VAR 0 2
20089: PUSH
20090: LD_INT 22
20092: PUSH
20093: LD_INT 3
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 25
20102: PUSH
20103: LD_INT 4
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PPUSH
20114: CALL_OW 69
20118: PUSH
20119: FOR_IN
20120: IFFALSE 20138
// ComEnterUnit ( i , building ) ;
20122: LD_VAR 0 2
20126: PPUSH
20127: LD_VAR 0 1
20131: PPUSH
20132: CALL_OW 120
20136: GO 20119
20138: POP
20139: POP
// if GetBType ( building ) = b_warehouse then
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 266
20149: PUSH
20150: LD_INT 1
20152: EQUAL
20153: IFFALSE 20169
// begin ComEnterUnit ( Borodin , building ) ;
20155: LD_EXP 24
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 120
// end ; end ; end ;
20169: PPOPN 2
20171: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL_OW 247
20181: PUSH
20182: LD_INT 2
20184: EQUAL
20185: PUSH
20186: LD_VAR 0 1
20190: PPUSH
20191: CALL_OW 263
20195: PUSH
20196: LD_INT 3
20198: EQUAL
20199: AND
20200: PUSH
20201: LD_EXP 41
20205: PUSH
20206: LD_INT 0
20208: EQUAL
20209: AND
20210: IFFALSE 20328
// begin varEvent1 = 1 ;
20212: LD_ADDR_EXP 41
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20229: LD_INT 22
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 21
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 25
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 25
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 25
20274: PUSH
20275: LD_INT 3
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 25
20284: PUSH
20285: LD_INT 4
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: PPUSH
20304: CALL_OW 69
20308: PUSH
20309: LD_EXP 1
20313: PUSH
20314: EMPTY
20315: LIST
20316: DIFF
20317: PPUSH
20318: LD_STRING DC-Sol1-1
20320: PPUSH
20321: LD_STRING DC-FSol1-1
20323: PPUSH
20324: CALL 6636 0 3
// end ; end ;
20328: PPOPN 1
20330: END
// on UnitDestroyed ( unit ) do var i ;
20331: LD_INT 0
20333: PPUSH
// begin if GetSide ( unit ) = 3 then
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 255
20343: PUSH
20344: LD_INT 3
20346: EQUAL
20347: IFFALSE 21117
// begin if GetType ( unit ) = unit_building then
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 247
20358: PUSH
20359: LD_INT 3
20361: EQUAL
20362: IFFALSE 21054
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 266
20373: PUSH
20374: LD_INT 31
20376: EQUAL
20377: PUSH
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 266
20387: PUSH
20388: LD_INT 32
20390: EQUAL
20391: OR
20392: PUSH
20393: LD_VAR 0 1
20397: PPUSH
20398: CALL_OW 266
20402: PUSH
20403: LD_INT 36
20405: EQUAL
20406: OR
20407: PUSH
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 266
20417: PUSH
20418: LD_INT 0
20420: EQUAL
20421: OR
20422: PUSH
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 266
20432: PUSH
20433: LD_INT 24
20435: EQUAL
20436: OR
20437: PUSH
20438: LD_VAR 0 1
20442: PPUSH
20443: CALL_OW 266
20447: PUSH
20448: LD_INT 17
20450: EQUAL
20451: OR
20452: PUSH
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 266
20462: PUSH
20463: LD_INT 25
20465: EQUAL
20466: OR
20467: PUSH
20468: LD_VAR 0 1
20472: PPUSH
20473: CALL_OW 266
20477: PUSH
20478: LD_INT 19
20480: EQUAL
20481: OR
20482: PUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: CALL_OW 266
20492: PUSH
20493: LD_INT 20
20495: EQUAL
20496: OR
20497: PUSH
20498: LD_VAR 0 1
20502: PPUSH
20503: CALL_OW 266
20507: PUSH
20508: LD_INT 18
20510: EQUAL
20511: OR
20512: PUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 266
20522: PUSH
20523: LD_INT 21
20525: EQUAL
20526: OR
20527: PUSH
20528: LD_VAR 0 1
20532: PPUSH
20533: CALL_OW 266
20537: PUSH
20538: LD_INT 23
20540: EQUAL
20541: OR
20542: PUSH
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 266
20552: PUSH
20553: LD_INT 16
20555: EQUAL
20556: OR
20557: PUSH
20558: LD_VAR 0 1
20562: PPUSH
20563: CALL_OW 266
20567: PUSH
20568: LD_INT 6
20570: EQUAL
20571: OR
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 266
20582: PUSH
20583: LD_INT 29
20585: EQUAL
20586: OR
20587: PUSH
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 266
20597: PUSH
20598: LD_INT 26
20600: EQUAL
20601: OR
20602: PUSH
20603: LD_VAR 0 1
20607: PPUSH
20608: CALL_OW 266
20612: PUSH
20613: LD_INT 30
20615: EQUAL
20616: OR
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 266
20627: PUSH
20628: LD_INT 28
20630: EQUAL
20631: OR
20632: PUSH
20633: LD_VAR 0 1
20637: PPUSH
20638: CALL_OW 266
20642: PUSH
20643: LD_INT 27
20645: EQUAL
20646: OR
20647: PUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 266
20657: PUSH
20658: LD_INT 33
20660: EQUAL
20661: OR
20662: PUSH
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 266
20672: PUSH
20673: LD_INT 2
20675: EQUAL
20676: OR
20677: PUSH
20678: LD_VAR 0 1
20682: PPUSH
20683: CALL_OW 266
20687: PUSH
20688: LD_INT 4
20690: EQUAL
20691: OR
20692: IFFALSE 20778
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20694: LD_ADDR_EXP 31
20698: PUSH
20699: LD_EXP 31
20703: PUSH
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 266
20713: ADD
20714: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20715: LD_ADDR_EXP 31
20719: PUSH
20720: LD_EXP 31
20724: PUSH
20725: LD_VAR 0 1
20729: PPUSH
20730: CALL_OW 250
20734: ADD
20735: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20736: LD_ADDR_EXP 31
20740: PUSH
20741: LD_EXP 31
20745: PUSH
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL_OW 251
20755: ADD
20756: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20757: LD_ADDR_EXP 31
20761: PUSH
20762: LD_EXP 31
20766: PUSH
20767: LD_VAR 0 1
20771: PPUSH
20772: CALL_OW 254
20776: ADD
20777: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 266
20787: PUSH
20788: LD_INT 1
20790: EQUAL
20791: IFFALSE 20870
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20793: LD_ADDR_EXP 31
20797: PUSH
20798: LD_EXP 31
20802: PUSH
20803: LD_INT 0
20805: ADD
20806: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20807: LD_ADDR_EXP 31
20811: PUSH
20812: LD_EXP 31
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 250
20826: ADD
20827: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20828: LD_ADDR_EXP 31
20832: PUSH
20833: LD_EXP 31
20837: PUSH
20838: LD_VAR 0 1
20842: PPUSH
20843: CALL_OW 251
20847: ADD
20848: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20849: LD_ADDR_EXP 31
20853: PUSH
20854: LD_EXP 31
20858: PUSH
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 254
20868: ADD
20869: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 266
20879: PUSH
20880: LD_INT 3
20882: EQUAL
20883: IFFALSE 20962
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20885: LD_ADDR_EXP 31
20889: PUSH
20890: LD_EXP 31
20894: PUSH
20895: LD_INT 2
20897: ADD
20898: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20899: LD_ADDR_EXP 31
20903: PUSH
20904: LD_EXP 31
20908: PUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 250
20918: ADD
20919: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20920: LD_ADDR_EXP 31
20924: PUSH
20925: LD_EXP 31
20929: PUSH
20930: LD_VAR 0 1
20934: PPUSH
20935: CALL_OW 251
20939: ADD
20940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20941: LD_ADDR_EXP 31
20945: PUSH
20946: LD_EXP 31
20950: PUSH
20951: LD_VAR 0 1
20955: PPUSH
20956: CALL_OW 254
20960: ADD
20961: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20962: LD_VAR 0 1
20966: PPUSH
20967: CALL_OW 266
20971: PUSH
20972: LD_INT 5
20974: EQUAL
20975: IFFALSE 21054
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20977: LD_ADDR_EXP 31
20981: PUSH
20982: LD_EXP 31
20986: PUSH
20987: LD_INT 4
20989: ADD
20990: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20991: LD_ADDR_EXP 31
20995: PUSH
20996: LD_EXP 31
21000: PUSH
21001: LD_VAR 0 1
21005: PPUSH
21006: CALL_OW 250
21010: ADD
21011: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21012: LD_ADDR_EXP 31
21016: PUSH
21017: LD_EXP 31
21021: PUSH
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 251
21031: ADD
21032: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21033: LD_ADDR_EXP 31
21037: PUSH
21038: LD_EXP 31
21042: PUSH
21043: LD_VAR 0 1
21047: PPUSH
21048: CALL_OW 254
21052: ADD
21053: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
21054: LD_VAR 0 1
21058: PPUSH
21059: CALL_OW 247
21063: PUSH
21064: LD_INT 1
21066: EQUAL
21067: IFFALSE 21117
// begin for i in defenders_list do
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: LD_EXP 32
21078: PUSH
21079: FOR_IN
21080: IFFALSE 21115
// if i = unit then
21082: LD_VAR 0 2
21086: PUSH
21087: LD_VAR 0 1
21091: EQUAL
21092: IFFALSE 21113
// defenders_list = defenders_list diff [ unit ] ;
21094: LD_ADDR_EXP 32
21098: PUSH
21099: LD_EXP 32
21103: PUSH
21104: LD_VAR 0 1
21108: PUSH
21109: EMPTY
21110: LIST
21111: DIFF
21112: ST_TO_ADDR
21113: GO 21079
21115: POP
21116: POP
// end ; end ; end ; end_of_file
21117: PPOPN 2
21119: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21120: GO 21122
21122: DISABLE
21123: LD_INT 0
21125: PPUSH
// begin enemyWayX = [ ] ;
21126: LD_ADDR_EXP 45
21130: PUSH
21131: EMPTY
21132: ST_TO_ADDR
// enemyWayY = [ ] ;
21133: LD_ADDR_EXP 46
21137: PUSH
21138: EMPTY
21139: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
21140: LD_ADDR_VAR 0 1
21144: PUSH
21145: LD_INT 1
21147: PPUSH
21148: LD_INT 3
21150: PPUSH
21151: CALL_OW 12
21155: ST_TO_ADDR
// if rnd = 1 then
21156: LD_VAR 0 1
21160: PUSH
21161: LD_INT 1
21163: EQUAL
21164: IFFALSE 21204
// begin enemyWayX = [ 73 , 46 , 29 ] ;
21166: LD_ADDR_EXP 45
21170: PUSH
21171: LD_INT 73
21173: PUSH
21174: LD_INT 46
21176: PUSH
21177: LD_INT 29
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21185: LD_ADDR_EXP 46
21189: PUSH
21190: LD_INT 71
21192: PUSH
21193: LD_INT 43
21195: PUSH
21196: LD_INT 29
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: ST_TO_ADDR
// end ; if rnd = 2 then
21204: LD_VAR 0 1
21208: PUSH
21209: LD_INT 2
21211: EQUAL
21212: IFFALSE 21236
// begin enemyWayX = [ 64 ] ;
21214: LD_ADDR_EXP 45
21218: PUSH
21219: LD_INT 64
21221: PUSH
21222: EMPTY
21223: LIST
21224: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21225: LD_ADDR_EXP 46
21229: PUSH
21230: LD_INT 43
21232: PUSH
21233: EMPTY
21234: LIST
21235: ST_TO_ADDR
// end ; if rnd = 3 then
21236: LD_VAR 0 1
21240: PUSH
21241: LD_INT 3
21243: EQUAL
21244: IFFALSE 21268
// begin enemyWayX = [ 80 ] ;
21246: LD_ADDR_EXP 45
21250: PUSH
21251: LD_INT 80
21253: PUSH
21254: EMPTY
21255: LIST
21256: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21257: LD_ADDR_EXP 46
21261: PUSH
21262: LD_INT 28
21264: PUSH
21265: EMPTY
21266: LIST
21267: ST_TO_ADDR
// end ; enable ;
21268: ENABLE
// end ;
21269: PPOPN 1
21271: END
// every 0 0$1 do
21272: GO 21274
21274: DISABLE
// begin enable ;
21275: ENABLE
// if escapeAvalaible = 0 then
21276: LD_EXP 36
21280: PUSH
21281: LD_INT 0
21283: EQUAL
21284: IFFALSE 21296
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21286: LD_INT 3
21288: PPUSH
21289: LD_INT 6
21291: PPUSH
21292: CALL 7881 0 2
// if escapeAvalaible = 0 then
21296: LD_EXP 36
21300: PUSH
21301: LD_INT 0
21303: EQUAL
21304: IFFALSE 21316
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21306: LD_INT 1
21308: PPUSH
21309: LD_INT 24
21311: PPUSH
21312: CALL 8675 0 2
// if russianAI = 1 then
21316: LD_EXP 27
21320: PUSH
21321: LD_INT 1
21323: EQUAL
21324: IFFALSE 21394
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21326: LD_INT 3
21328: PPUSH
21329: LD_INT 7
21331: PPUSH
21332: LD_INT 6
21334: PPUSH
21335: LD_EXP 29
21339: PPUSH
21340: CALL 10749 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21344: LD_INT 3
21346: PPUSH
21347: LD_EXP 28
21351: PPUSH
21352: LD_INT 6
21354: PPUSH
21355: LD_EXP 31
21359: PPUSH
21360: CALL 10358 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21364: LD_INT 3
21366: PPUSH
21367: LD_INT 26
21369: PPUSH
21370: LD_EXP 45
21374: PPUSH
21375: LD_EXP 46
21379: PPUSH
21380: CALL 9226 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21384: LD_INT 3
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL 11293 0 2
// end ; if SikorskyArrive = 1 then
21394: LD_EXP 18
21398: PUSH
21399: LD_INT 1
21401: EQUAL
21402: IFFALSE 21420
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21404: LD_INT 3
21406: PPUSH
21407: LD_INT 10
21409: PPUSH
21410: LD_INT 53
21412: PPUSH
21413: LD_INT 59
21415: PPUSH
21416: CALL 9023 0 4
// end ;
21420: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21421: LD_EXP 27
21425: PUSH
21426: LD_INT 1
21428: EQUAL
21429: IFFALSE 21705
21431: GO 21433
21433: DISABLE
21434: LD_INT 0
21436: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21437: LD_ADDR_VAR 0 1
21441: PUSH
21442: LD_INT 22
21444: PUSH
21445: LD_INT 3
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 21
21454: PUSH
21455: LD_INT 3
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 30
21464: PUSH
21465: LD_INT 32
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 35
21480: PUSH
21481: LD_INT 43
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 35
21490: PUSH
21491: LD_INT 44
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 35
21500: PUSH
21501: LD_INT 46
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: PPUSH
21524: CALL_OW 69
21528: PUSH
21529: FOR_IN
21530: IFFALSE 21569
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21532: LD_VAR 0 1
21536: PPUSH
21537: LD_INT 43
21539: PUSH
21540: LD_INT 44
21542: PUSH
21543: LD_INT 46
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_INT 3
21556: PPUSH
21557: CALL_OW 12
21561: ARRAY
21562: PPUSH
21563: CALL_OW 431
21567: GO 21529
21569: POP
21570: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21571: LD_ADDR_VAR 0 1
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_INT 3
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 21
21588: PUSH
21589: LD_INT 3
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 30
21598: PUSH
21599: LD_INT 33
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 3
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: LD_INT 35
21614: PUSH
21615: LD_INT 43
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 35
21624: PUSH
21625: LD_INT 44
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 35
21634: PUSH
21635: LD_INT 46
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: PPUSH
21658: CALL_OW 69
21662: PUSH
21663: FOR_IN
21664: IFFALSE 21703
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21666: LD_VAR 0 1
21670: PPUSH
21671: LD_INT 43
21673: PUSH
21674: LD_INT 44
21676: PUSH
21677: LD_INT 46
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: PPUSH
21688: LD_INT 3
21690: PPUSH
21691: CALL_OW 12
21695: ARRAY
21696: PPUSH
21697: CALL_OW 431
21701: GO 21663
21703: POP
21704: POP
// end ;
21705: PPOPN 1
21707: END
// every 0 0$1 trigger SikorskyAI = 1 do
21708: LD_EXP 20
21712: PUSH
21713: LD_INT 1
21715: EQUAL
21716: IFFALSE 21751
21718: GO 21720
21720: DISABLE
// begin enable ;
21721: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21722: LD_INT 4
21724: PPUSH
21725: LD_INT 10
21727: PPUSH
21728: LD_INT 93
21730: PPUSH
21731: LD_INT 93
21733: PPUSH
21734: CALL 9023 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21738: LD_INT 4
21740: PPUSH
21741: LD_INT 11
21743: PPUSH
21744: LD_INT 3
21746: PPUSH
21747: CALL 15505 0 3
// end ;
21751: END
// every 0 0$1 trigger SikorskyAI = 1 do
21752: LD_EXP 20
21756: PUSH
21757: LD_INT 1
21759: EQUAL
21760: IFFALSE 21772
21762: GO 21764
21764: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21765: LD_INT 4
21767: PPUSH
21768: CALL 10030 0 1
21772: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21773: LD_EXP 27
21777: PUSH
21778: LD_INT 1
21780: EQUAL
21781: PUSH
21782: LD_EXP 30
21786: PPUSH
21787: CALL_OW 302
21791: AND
21792: PUSH
21793: LD_EXP 30
21797: PPUSH
21798: CALL_OW 255
21802: PUSH
21803: LD_INT 3
21805: EQUAL
21806: AND
21807: PUSH
21808: LD_INT 22
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 21
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 33
21830: PUSH
21831: LD_INT 3
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: LIST
21842: PPUSH
21843: CALL_OW 69
21847: PUSH
21848: LD_INT 0
21850: EQUAL
21851: AND
21852: IFFALSE 22086
21854: GO 21856
21856: DISABLE
// begin enable ;
21857: ENABLE
// if Difficulty = 1 then
21858: LD_OWVAR 67
21862: PUSH
21863: LD_INT 1
21865: EQUAL
21866: IFFALSE 21934
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21868: LD_INT 3
21870: PPUSH
21871: LD_EXP 30
21875: PPUSH
21876: LD_INT 5
21878: PPUSH
21879: LD_INT 8
21881: PPUSH
21882: CALL_OW 12
21886: PPUSH
21887: LD_INT 43
21889: PUSH
21890: LD_INT 43
21892: PUSH
21893: LD_INT 43
21895: PUSH
21896: LD_INT 43
21898: PUSH
21899: LD_INT 44
21901: PUSH
21902: LD_INT 44
21904: PUSH
21905: LD_INT 44
21907: PUSH
21908: LD_INT 46
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: PPUSH
21921: LD_INT 1
21923: PPUSH
21924: LD_INT 3
21926: PPUSH
21927: LD_INT 24
21929: PPUSH
21930: CALL 8869 0 7
// if Difficulty = 2 then
21934: LD_OWVAR 67
21938: PUSH
21939: LD_INT 2
21941: EQUAL
21942: IFFALSE 22010
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
21944: LD_INT 3
21946: PPUSH
21947: LD_EXP 30
21951: PPUSH
21952: LD_INT 6
21954: PPUSH
21955: LD_INT 8
21957: PPUSH
21958: CALL_OW 12
21962: PPUSH
21963: LD_INT 43
21965: PUSH
21966: LD_INT 43
21968: PUSH
21969: LD_INT 44
21971: PUSH
21972: LD_INT 44
21974: PUSH
21975: LD_INT 44
21977: PUSH
21978: LD_INT 44
21980: PUSH
21981: LD_INT 46
21983: PUSH
21984: LD_INT 46
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: PPUSH
21997: LD_INT 1
21999: PPUSH
22000: LD_INT 3
22002: PPUSH
22003: LD_INT 24
22005: PPUSH
22006: CALL 8869 0 7
// if Difficulty = 3 then
22010: LD_OWVAR 67
22014: PUSH
22015: LD_INT 3
22017: EQUAL
22018: IFFALSE 22086
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
22020: LD_INT 3
22022: PPUSH
22023: LD_EXP 30
22027: PPUSH
22028: LD_INT 7
22030: PPUSH
22031: LD_INT 8
22033: PPUSH
22034: CALL_OW 12
22038: PPUSH
22039: LD_INT 43
22041: PUSH
22042: LD_INT 43
22044: PUSH
22045: LD_INT 44
22047: PUSH
22048: LD_INT 44
22050: PUSH
22051: LD_INT 44
22053: PUSH
22054: LD_INT 46
22056: PUSH
22057: LD_INT 46
22059: PUSH
22060: LD_INT 46
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: PPUSH
22073: LD_INT 1
22075: PPUSH
22076: LD_INT 3
22078: PPUSH
22079: LD_INT 24
22081: PPUSH
22082: CALL 8869 0 7
// end ;
22086: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
22087: LD_EXP 38
22091: PUSH
22092: LD_INT 1
22094: EQUAL
22095: IFFALSE 22177
22097: GO 22099
22099: DISABLE
22100: LD_INT 0
22102: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
22103: LD_ADDR_VAR 0 1
22107: PUSH
22108: LD_INT 22
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 21
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: LD_INT 24
22133: PUSH
22134: LD_INT 650
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: PPUSH
22150: CALL_OW 69
22154: PUSH
22155: FOR_IN
22156: IFFALSE 22175
// ComMoveXY ( i , 51 , 12 ) ;
22158: LD_VAR 0 1
22162: PPUSH
22163: LD_INT 51
22165: PPUSH
22166: LD_INT 12
22168: PPUSH
22169: CALL_OW 111
22173: GO 22155
22175: POP
22176: POP
// end ; end_of_file
22177: PPOPN 1
22179: END
// every 3 3$20 trigger firstAttack = 1 do
22180: LD_EXP 33
22184: PUSH
22185: LD_INT 1
22187: EQUAL
22188: IFFALSE 22294
22190: GO 22192
22192: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22193: LD_INT 6
22195: PPUSH
22196: LD_INT 3
22198: PPUSH
22199: LD_INT 5
22201: PPUSH
22202: LD_INT 6
22204: PPUSH
22205: CALL_OW 12
22209: PUSH
22210: LD_INT 5
22212: PPUSH
22213: LD_INT 6
22215: PPUSH
22216: CALL_OW 12
22220: PUSH
22221: LD_INT 5
22223: PPUSH
22224: LD_INT 6
22226: PPUSH
22227: CALL_OW 12
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: PUSH
22237: LD_OWVAR 67
22241: ARRAY
22242: PPUSH
22243: LD_INT 0
22245: PPUSH
22246: LD_INT 0
22248: PPUSH
22249: LD_INT 0
22251: PPUSH
22252: LD_INT 0
22254: PPUSH
22255: LD_EXP 25
22259: PPUSH
22260: LD_EXP 26
22264: PPUSH
22265: CALL_OW 12
22269: PPUSH
22270: LD_INT 16
22272: PPUSH
22273: LD_INT 7
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: LD_INT 1
22281: PPUSH
22282: LD_INT 3
22284: PPUSH
22285: CALL_OW 12
22289: PPUSH
22290: CALL 11523 0 12
22294: END
// every 3 3$40 trigger firstAttack = 1 do
22295: LD_EXP 33
22299: PUSH
22300: LD_INT 1
22302: EQUAL
22303: IFFALSE 22395
22305: GO 22307
22307: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22308: LD_INT 16
22310: PPUSH
22311: LD_INT 6
22313: PPUSH
22314: LD_INT 3
22316: PPUSH
22317: LD_INT 4
22319: PPUSH
22320: CALL_OW 12
22324: PUSH
22325: LD_INT 4
22327: PPUSH
22328: LD_INT 5
22330: PPUSH
22331: CALL_OW 12
22335: PUSH
22336: LD_INT 5
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_OWVAR 67
22348: ARRAY
22349: PPUSH
22350: LD_EXP 25
22354: PPUSH
22355: LD_EXP 26
22359: PPUSH
22360: CALL_OW 12
22364: PPUSH
22365: LD_INT 3
22367: PPUSH
22368: LD_INT 1
22370: PPUSH
22371: LD_INT 3
22373: PPUSH
22374: LD_INT 44
22376: PUSH
22377: LD_INT 46
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PPUSH
22384: EMPTY
22385: PPUSH
22386: EMPTY
22387: PPUSH
22388: LD_INT 1
22390: PPUSH
22391: CALL 13816 0 11
22395: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22396: LD_EXP 33
22400: PUSH
22401: LD_INT 1
22403: EQUAL
22404: PUSH
22405: LD_EXP 39
22409: PUSH
22410: LD_INT 0
22412: EQUAL
22413: AND
22414: IFFALSE 22520
22416: GO 22418
22418: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22419: LD_INT 6
22421: PPUSH
22422: LD_INT 3
22424: PPUSH
22425: LD_INT 5
22427: PPUSH
22428: LD_INT 6
22430: PPUSH
22431: CALL_OW 12
22435: PUSH
22436: LD_INT 5
22438: PPUSH
22439: LD_INT 6
22441: PPUSH
22442: CALL_OW 12
22446: PUSH
22447: LD_INT 5
22449: PPUSH
22450: LD_INT 6
22452: PPUSH
22453: CALL_OW 12
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: PUSH
22463: LD_OWVAR 67
22467: ARRAY
22468: PPUSH
22469: LD_INT 0
22471: PPUSH
22472: LD_INT 0
22474: PPUSH
22475: LD_INT 0
22477: PPUSH
22478: LD_INT 0
22480: PPUSH
22481: LD_EXP 25
22485: PPUSH
22486: LD_EXP 26
22490: PPUSH
22491: CALL_OW 12
22495: PPUSH
22496: LD_INT 16
22498: PPUSH
22499: LD_INT 7
22501: PPUSH
22502: LD_INT 1
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: LD_INT 3
22510: PPUSH
22511: CALL_OW 12
22515: PPUSH
22516: CALL 11523 0 12
22520: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22521: LD_EXP 33
22525: PUSH
22526: LD_INT 1
22528: EQUAL
22529: PUSH
22530: LD_EXP 39
22534: PUSH
22535: LD_INT 0
22537: EQUAL
22538: AND
22539: IFFALSE 22635
22541: GO 22543
22543: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22544: LD_INT 16
22546: PPUSH
22547: LD_INT 6
22549: PPUSH
22550: LD_INT 5
22552: PPUSH
22553: LD_INT 6
22555: PPUSH
22556: CALL_OW 12
22560: PUSH
22561: LD_INT 6
22563: PPUSH
22564: LD_INT 7
22566: PPUSH
22567: CALL_OW 12
22571: PUSH
22572: LD_INT 7
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: LD_OWVAR 67
22584: ARRAY
22585: PPUSH
22586: LD_EXP 25
22590: PPUSH
22591: LD_EXP 26
22595: PPUSH
22596: CALL_OW 12
22600: PPUSH
22601: LD_INT 3
22603: PPUSH
22604: LD_INT 1
22606: PPUSH
22607: LD_INT 3
22609: PPUSH
22610: LD_INT 43
22612: PUSH
22613: LD_INT 44
22615: PUSH
22616: LD_INT 46
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: PPUSH
22624: EMPTY
22625: PPUSH
22626: EMPTY
22627: PPUSH
22628: LD_INT 1
22630: PPUSH
22631: CALL 13816 0 11
22635: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22636: LD_EXP 33
22640: PUSH
22641: LD_INT 1
22643: EQUAL
22644: PUSH
22645: LD_EXP 39
22649: PUSH
22650: LD_INT 0
22652: EQUAL
22653: AND
22654: IFFALSE 22730
22656: GO 22658
22658: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22659: LD_INT 16
22661: PPUSH
22662: LD_INT 6
22664: PPUSH
22665: LD_INT 5
22667: PUSH
22668: LD_INT 6
22670: PUSH
22671: LD_INT 7
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: PUSH
22679: LD_OWVAR 67
22683: ARRAY
22684: PPUSH
22685: LD_EXP 25
22689: PPUSH
22690: LD_EXP 26
22694: PPUSH
22695: CALL_OW 12
22699: PPUSH
22700: LD_INT 3
22702: PPUSH
22703: LD_INT 1
22705: PPUSH
22706: LD_INT 3
22708: PPUSH
22709: LD_INT 44
22711: PUSH
22712: LD_INT 46
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: EMPTY
22720: PPUSH
22721: EMPTY
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: CALL 13816 0 11
22730: END
// every 1 1$00 trigger secondAttack = 1 do
22731: LD_EXP 34
22735: PUSH
22736: LD_INT 1
22738: EQUAL
22739: IFFALSE 22845
22741: GO 22743
22743: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22744: LD_INT 6
22746: PPUSH
22747: LD_INT 3
22749: PPUSH
22750: LD_INT 4
22752: PPUSH
22753: LD_INT 7
22755: PPUSH
22756: CALL_OW 12
22760: PUSH
22761: LD_INT 6
22763: PPUSH
22764: LD_INT 7
22766: PPUSH
22767: CALL_OW 12
22771: PUSH
22772: LD_INT 6
22774: PPUSH
22775: LD_INT 10
22777: PPUSH
22778: CALL_OW 12
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: PUSH
22788: LD_OWVAR 67
22792: ARRAY
22793: PPUSH
22794: LD_INT 0
22796: PPUSH
22797: LD_INT 0
22799: PPUSH
22800: LD_INT 0
22802: PPUSH
22803: LD_INT 0
22805: PPUSH
22806: LD_EXP 25
22810: PPUSH
22811: LD_EXP 26
22815: PPUSH
22816: CALL_OW 12
22820: PPUSH
22821: LD_INT 16
22823: PPUSH
22824: LD_INT 7
22826: PPUSH
22827: LD_INT 1
22829: PPUSH
22830: LD_INT 1
22832: PPUSH
22833: LD_INT 3
22835: PPUSH
22836: CALL_OW 12
22840: PPUSH
22841: CALL 11523 0 12
22845: END
// every 1 1$00 trigger secondAttack = 1 do
22846: LD_EXP 34
22850: PUSH
22851: LD_INT 1
22853: EQUAL
22854: IFFALSE 22958
22856: GO 22858
22858: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22859: LD_INT 16
22861: PPUSH
22862: LD_INT 6
22864: PPUSH
22865: LD_INT 5
22867: PPUSH
22868: LD_INT 8
22870: PPUSH
22871: CALL_OW 12
22875: PUSH
22876: LD_INT 6
22878: PPUSH
22879: LD_INT 9
22881: PPUSH
22882: CALL_OW 12
22886: PUSH
22887: LD_INT 7
22889: PPUSH
22890: LD_INT 9
22892: PPUSH
22893: CALL_OW 12
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: LD_OWVAR 67
22907: ARRAY
22908: PPUSH
22909: LD_EXP 25
22913: PPUSH
22914: LD_EXP 26
22918: PPUSH
22919: CALL_OW 12
22923: PPUSH
22924: LD_INT 3
22926: PPUSH
22927: LD_INT 1
22929: PPUSH
22930: LD_INT 3
22932: PPUSH
22933: LD_INT 43
22935: PUSH
22936: LD_INT 44
22938: PUSH
22939: LD_INT 46
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: PPUSH
22947: EMPTY
22948: PPUSH
22949: EMPTY
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL 13816 0 11
22958: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22959: LD_EXP 18
22963: PUSH
22964: LD_INT 0
22966: EQUAL
22967: IFFALSE 23073
22969: GO 22971
22971: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22972: LD_INT 6
22974: PPUSH
22975: LD_INT 3
22977: PPUSH
22978: LD_INT 8
22980: PPUSH
22981: LD_INT 9
22983: PPUSH
22984: CALL_OW 12
22988: PUSH
22989: LD_INT 7
22991: PPUSH
22992: LD_INT 10
22994: PPUSH
22995: CALL_OW 12
22999: PUSH
23000: LD_INT 8
23002: PPUSH
23003: LD_INT 10
23005: PPUSH
23006: CALL_OW 12
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: LD_OWVAR 67
23020: ARRAY
23021: PPUSH
23022: LD_INT 0
23024: PPUSH
23025: LD_INT 0
23027: PPUSH
23028: LD_INT 0
23030: PPUSH
23031: LD_INT 0
23033: PPUSH
23034: LD_EXP 25
23038: PPUSH
23039: LD_EXP 26
23043: PPUSH
23044: CALL_OW 12
23048: PPUSH
23049: LD_INT 16
23051: PPUSH
23052: LD_INT 7
23054: PPUSH
23055: LD_INT 1
23057: PPUSH
23058: LD_INT 1
23060: PPUSH
23061: LD_INT 3
23063: PPUSH
23064: CALL_OW 12
23068: PPUSH
23069: CALL 11523 0 12
23073: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23074: LD_EXP 18
23078: PUSH
23079: LD_INT 0
23081: EQUAL
23082: IFFALSE 23182
23084: GO 23086
23086: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23087: LD_INT 16
23089: PPUSH
23090: LD_INT 6
23092: PPUSH
23093: LD_INT 5
23095: PPUSH
23096: LD_INT 8
23098: PPUSH
23099: CALL_OW 12
23103: PUSH
23104: LD_INT 6
23106: PPUSH
23107: LD_INT 9
23109: PPUSH
23110: CALL_OW 12
23114: PUSH
23115: LD_INT 7
23117: PPUSH
23118: LD_INT 9
23120: PPUSH
23121: CALL_OW 12
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: PUSH
23131: LD_OWVAR 67
23135: ARRAY
23136: PPUSH
23137: LD_EXP 25
23141: PPUSH
23142: LD_EXP 26
23146: PPUSH
23147: CALL_OW 12
23151: PPUSH
23152: LD_INT 3
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: LD_INT 3
23160: PPUSH
23161: LD_INT 44
23163: PUSH
23164: LD_INT 46
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: EMPTY
23172: PPUSH
23173: EMPTY
23174: PPUSH
23175: LD_INT 1
23177: PPUSH
23178: CALL 13816 0 11
23182: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23183: LD_EXP 18
23187: PUSH
23188: LD_INT 0
23190: EQUAL
23191: IFFALSE 23297
23193: GO 23195
23195: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23196: LD_INT 6
23198: PPUSH
23199: LD_INT 3
23201: PPUSH
23202: LD_INT 8
23204: PPUSH
23205: LD_INT 9
23207: PPUSH
23208: CALL_OW 12
23212: PUSH
23213: LD_INT 7
23215: PPUSH
23216: LD_INT 10
23218: PPUSH
23219: CALL_OW 12
23223: PUSH
23224: LD_INT 8
23226: PPUSH
23227: LD_INT 10
23229: PPUSH
23230: CALL_OW 12
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: PUSH
23240: LD_OWVAR 67
23244: ARRAY
23245: PPUSH
23246: LD_INT 0
23248: PPUSH
23249: LD_INT 0
23251: PPUSH
23252: LD_INT 0
23254: PPUSH
23255: LD_INT 0
23257: PPUSH
23258: LD_EXP 25
23262: PPUSH
23263: LD_EXP 26
23267: PPUSH
23268: CALL_OW 12
23272: PPUSH
23273: LD_INT 16
23275: PPUSH
23276: LD_INT 7
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: LD_INT 1
23284: PPUSH
23285: LD_INT 3
23287: PPUSH
23288: CALL_OW 12
23292: PPUSH
23293: CALL 11523 0 12
23297: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23298: LD_EXP 18
23302: PUSH
23303: LD_INT 0
23305: EQUAL
23306: IFFALSE 23406
23308: GO 23310
23310: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23311: LD_INT 16
23313: PPUSH
23314: LD_INT 6
23316: PPUSH
23317: LD_INT 5
23319: PPUSH
23320: LD_INT 8
23322: PPUSH
23323: CALL_OW 12
23327: PUSH
23328: LD_INT 6
23330: PPUSH
23331: LD_INT 9
23333: PPUSH
23334: CALL_OW 12
23338: PUSH
23339: LD_INT 7
23341: PPUSH
23342: LD_INT 9
23344: PPUSH
23345: CALL_OW 12
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: PUSH
23355: LD_OWVAR 67
23359: ARRAY
23360: PPUSH
23361: LD_EXP 25
23365: PPUSH
23366: LD_EXP 26
23370: PPUSH
23371: CALL_OW 12
23375: PPUSH
23376: LD_INT 3
23378: PPUSH
23379: LD_INT 1
23381: PPUSH
23382: LD_INT 3
23384: PPUSH
23385: LD_INT 44
23387: PUSH
23388: LD_INT 46
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PPUSH
23395: EMPTY
23396: PPUSH
23397: EMPTY
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: CALL 13816 0 11
23406: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23407: LD_EXP 18
23411: PUSH
23412: LD_INT 0
23414: EQUAL
23415: IFFALSE 23521
23417: GO 23419
23419: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23420: LD_INT 6
23422: PPUSH
23423: LD_INT 3
23425: PPUSH
23426: LD_INT 8
23428: PPUSH
23429: LD_INT 9
23431: PPUSH
23432: CALL_OW 12
23436: PUSH
23437: LD_INT 7
23439: PPUSH
23440: LD_INT 10
23442: PPUSH
23443: CALL_OW 12
23447: PUSH
23448: LD_INT 8
23450: PPUSH
23451: LD_INT 10
23453: PPUSH
23454: CALL_OW 12
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: PUSH
23464: LD_OWVAR 67
23468: ARRAY
23469: PPUSH
23470: LD_INT 0
23472: PPUSH
23473: LD_INT 0
23475: PPUSH
23476: LD_INT 0
23478: PPUSH
23479: LD_INT 0
23481: PPUSH
23482: LD_EXP 25
23486: PPUSH
23487: LD_EXP 26
23491: PPUSH
23492: CALL_OW 12
23496: PPUSH
23497: LD_INT 16
23499: PPUSH
23500: LD_INT 7
23502: PPUSH
23503: LD_INT 1
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: LD_INT 3
23511: PPUSH
23512: CALL_OW 12
23516: PPUSH
23517: CALL 11523 0 12
23521: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23522: LD_EXP 18
23526: PUSH
23527: LD_INT 0
23529: EQUAL
23530: IFFALSE 23630
23532: GO 23534
23534: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23535: LD_INT 16
23537: PPUSH
23538: LD_INT 6
23540: PPUSH
23541: LD_INT 5
23543: PPUSH
23544: LD_INT 8
23546: PPUSH
23547: CALL_OW 12
23551: PUSH
23552: LD_INT 6
23554: PPUSH
23555: LD_INT 9
23557: PPUSH
23558: CALL_OW 12
23562: PUSH
23563: LD_INT 7
23565: PPUSH
23566: LD_INT 9
23568: PPUSH
23569: CALL_OW 12
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: LD_OWVAR 67
23583: ARRAY
23584: PPUSH
23585: LD_EXP 25
23589: PPUSH
23590: LD_EXP 26
23594: PPUSH
23595: CALL_OW 12
23599: PPUSH
23600: LD_INT 3
23602: PPUSH
23603: LD_INT 1
23605: PPUSH
23606: LD_INT 3
23608: PPUSH
23609: LD_INT 44
23611: PUSH
23612: LD_INT 46
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PPUSH
23619: EMPTY
23620: PPUSH
23621: EMPTY
23622: PPUSH
23623: LD_INT 1
23625: PPUSH
23626: CALL 13816 0 11
23630: END
// every 0 0$1 trigger timerStatus = 1 do
23631: LD_EXP 35
23635: PUSH
23636: LD_INT 1
23638: EQUAL
23639: IFFALSE 23676
23641: GO 23643
23643: DISABLE
// begin enable ;
23644: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23645: LD_ADDR_OWVAR 47
23649: PUSH
23650: LD_STRING #Am08-1
23652: PUSH
23653: LD_EXP 19
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23662: LD_ADDR_EXP 19
23666: PUSH
23667: LD_EXP 19
23671: PUSH
23672: LD_INT 35
23674: MINUS
23675: ST_TO_ADDR
// end ; end_of_file
23676: END
// every 1 1$0 do
23677: GO 23679
23679: DISABLE
// begin if supply <= 13 and supply > 7 then
23680: LD_EXP 40
23684: PUSH
23685: LD_INT 13
23687: LESSEQUAL
23688: PUSH
23689: LD_EXP 40
23693: PUSH
23694: LD_INT 7
23696: GREATER
23697: AND
23698: IFFALSE 23721
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23700: LD_INT 3
23702: PPUSH
23703: LD_INT 5
23705: PPUSH
23706: CALL_OW 12
23710: PPUSH
23711: LD_INT 5
23713: PPUSH
23714: LD_INT 1
23716: PPUSH
23717: CALL_OW 55
// if supply <= 7 and supply > 4 then
23721: LD_EXP 40
23725: PUSH
23726: LD_INT 7
23728: LESSEQUAL
23729: PUSH
23730: LD_EXP 40
23734: PUSH
23735: LD_INT 4
23737: GREATER
23738: AND
23739: IFFALSE 23762
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23741: LD_INT 3
23743: PPUSH
23744: LD_INT 5
23746: PPUSH
23747: CALL_OW 12
23751: PPUSH
23752: LD_INT 20
23754: PPUSH
23755: LD_INT 1
23757: PPUSH
23758: CALL_OW 55
// if supply <= 4 and supply > 0 then
23762: LD_EXP 40
23766: PUSH
23767: LD_INT 4
23769: LESSEQUAL
23770: PUSH
23771: LD_EXP 40
23775: PUSH
23776: LD_INT 0
23778: GREATER
23779: AND
23780: IFFALSE 23803
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23782: LD_INT 3
23784: PPUSH
23785: LD_INT 5
23787: PPUSH
23788: CALL_OW 12
23792: PPUSH
23793: LD_INT 21
23795: PPUSH
23796: LD_INT 1
23798: PPUSH
23799: CALL_OW 55
// if supply > 0 then
23803: LD_EXP 40
23807: PUSH
23808: LD_INT 0
23810: GREATER
23811: IFFALSE 23828
// begin supply = supply - 1 ;
23813: LD_ADDR_EXP 40
23817: PUSH
23818: LD_EXP 40
23822: PUSH
23823: LD_INT 1
23825: MINUS
23826: ST_TO_ADDR
// enable ;
23827: ENABLE
// end ; end ; end_of_file
23828: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23829: LD_EXP 39
23833: PUSH
23834: LD_INT 1
23836: EQUAL
23837: PUSH
23838: LD_EXP 1
23842: PPUSH
23843: CALL_OW 301
23847: AND
23848: IFFALSE 23860
23850: GO 23852
23852: DISABLE
// YouLost ( JMM ) ;
23853: LD_STRING JMM
23855: PPUSH
23856: CALL_OW 104
23860: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23861: LD_EXP 18
23865: PUSH
23866: LD_INT 1
23868: EQUAL
23869: PUSH
23870: LD_EXP 16
23874: PPUSH
23875: CALL_OW 301
23879: AND
23880: IFFALSE 23912
23882: GO 23884
23884: DISABLE
// begin DialogueOn ;
23885: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23889: LD_EXP 23
23893: PPUSH
23894: LD_STRING D8a-Pow-1
23896: PPUSH
23897: CALL_OW 94
// DialogueOff ;
23901: CALL_OW 7
// YouLost ( Dismissed ) ;
23905: LD_STRING Dismissed
23907: PPUSH
23908: CALL_OW 104
// end ;
23912: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23913: LD_EXP 37
23917: PPUSH
23918: CALL_OW 301
23922: IFFALSE 23934
23924: GO 23926
23926: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23927: LD_STRING Destroyed
23929: PPUSH
23930: CALL_OW 104
23934: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23935: LD_EXP 24
23939: PPUSH
23940: CALL_OW 301
23944: IFFALSE 24289
23946: GO 23948
23948: DISABLE
23949: LD_INT 0
23951: PPUSH
// begin russianAI = 0 ;
23952: LD_ADDR_EXP 27
23956: PUSH
23957: LD_INT 0
23959: ST_TO_ADDR
// escapeAvalaible = 1 ;
23960: LD_ADDR_EXP 36
23964: PUSH
23965: LD_INT 1
23967: ST_TO_ADDR
// InGameOn ;
23968: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23972: LD_INT 3
23974: PPUSH
23975: LD_INT 1
23977: PPUSH
23978: LD_INT 1
23980: PPUSH
23981: LD_INT 0
23983: PPUSH
23984: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23988: LD_INT 6
23990: PPUSH
23991: LD_INT 1
23993: PPUSH
23994: LD_INT 1
23996: PPUSH
23997: LD_INT 0
23999: PPUSH
24000: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
24004: LD_INT 3
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
24014: LD_INT 97
24016: PPUSH
24017: LD_INT 91
24019: PPUSH
24020: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
24024: LD_INT 22
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 21
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: PPUSH
24053: CALL_OW 121
// wait ( 0 0$01 ) ;
24057: LD_INT 35
24059: PPUSH
24060: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24064: LD_INT 22
24066: PUSH
24067: LD_INT 3
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 21
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PPUSH
24088: CALL_OW 69
24092: PPUSH
24093: LD_INT 124
24095: PPUSH
24096: LD_INT 98
24098: PPUSH
24099: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
24103: LD_INT 22
24105: PUSH
24106: LD_INT 6
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 21
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: CALL_OW 69
24131: PPUSH
24132: CALL_OW 121
// wait ( 0 0$01 ) ;
24136: LD_INT 35
24138: PPUSH
24139: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24143: LD_INT 22
24145: PUSH
24146: LD_INT 6
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 21
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PPUSH
24167: CALL_OW 69
24171: PPUSH
24172: LD_INT 124
24174: PPUSH
24175: LD_INT 98
24177: PPUSH
24178: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24182: LD_INT 22
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 21
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL_OW 69
24210: PPUSH
24211: LD_INT 124
24213: PPUSH
24214: LD_INT 98
24216: PPUSH
24217: CALL_OW 114
// wait ( 0 0$4 ) ;
24221: LD_INT 140
24223: PPUSH
24224: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24228: LD_INT 124
24230: PPUSH
24231: LD_INT 98
24233: PPUSH
24234: CALL_OW 84
// if SikorskyStatus = 1 then
24238: LD_EXP 21
24242: PUSH
24243: LD_INT 1
24245: EQUAL
24246: IFFALSE 24260
// begin Say ( Sikorski , D9-Sik-1 ) ;
24248: LD_EXP 16
24252: PPUSH
24253: LD_STRING D9-Sik-1
24255: PPUSH
24256: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24260: LD_EXP 21
24264: PUSH
24265: LD_INT 2
24267: EQUAL
24268: IFFALSE 24289
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24270: LD_EXP 23
24274: PPUSH
24275: LD_STRING D8b-Pow-1
24277: PPUSH
24278: CALL_OW 94
// YouLost ( Dismissed ) ;
24282: LD_STRING Dismissed
24284: PPUSH
24285: CALL_OW 104
// end ; end ;
24289: PPOPN 1
24291: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
24292: LD_INT 23
24294: PUSH
24295: LD_INT 3
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 21
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 24
24314: PUSH
24315: LD_INT 250
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: PPUSH
24327: CALL_OW 69
24331: PUSH
24332: LD_INT 0
24334: EQUAL
24335: IFFALSE 24344
24337: GO 24339
24339: DISABLE
// FinishMission ;
24340: CALL 24345 0 0
24344: END
// export function FinishMission ; var tmp ; begin
24345: LD_INT 0
24347: PPUSH
24348: PPUSH
// AddMedal ( med1 , 1 ) ;
24349: LD_STRING med1
24351: PPUSH
24352: LD_INT 1
24354: PPUSH
24355: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24359: LD_STRING med2
24361: PPUSH
24362: LD_INT 1
24364: PPUSH
24365: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24369: LD_STRING perfect
24371: PPUSH
24372: LD_INT 1
24374: PPUSH
24375: CALL_OW 101
// GiveMedals ( Main ) ;
24379: LD_STRING Main
24381: PPUSH
24382: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24386: LD_INT 22
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 23
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 21
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: LD_INT 25
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 25
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 25
24441: PUSH
24442: LD_INT 3
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 25
24451: PUSH
24452: LD_INT 4
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: PPUSH
24472: CALL_OW 69
24476: PPUSH
24477: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24481: LD_EXP 1
24485: PPUSH
24486: LD_EXP 42
24490: PUSH
24491: LD_STRING JMM
24493: STR
24494: PPUSH
24495: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24499: LD_EXP 2
24503: PPUSH
24504: LD_EXP 42
24508: PUSH
24509: LD_STRING Brown
24511: STR
24512: PPUSH
24513: CALL 7745 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24517: LD_EXP 3
24521: PPUSH
24522: LD_EXP 42
24526: PUSH
24527: LD_STRING Donaldson
24529: STR
24530: PPUSH
24531: CALL 7745 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24535: LD_EXP 4
24539: PPUSH
24540: LD_EXP 42
24544: PUSH
24545: LD_STRING Bobby
24547: STR
24548: PPUSH
24549: CALL 7745 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24553: LD_EXP 5
24557: PPUSH
24558: LD_EXP 42
24562: PUSH
24563: LD_STRING Cyrus
24565: STR
24566: PPUSH
24567: CALL 7745 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24571: LD_EXP 6
24575: PPUSH
24576: LD_EXP 42
24580: PUSH
24581: LD_STRING Lisa
24583: STR
24584: PPUSH
24585: CALL 7745 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24589: LD_EXP 7
24593: PPUSH
24594: LD_EXP 42
24598: PUSH
24599: LD_STRING Frank
24601: STR
24602: PPUSH
24603: CALL 7745 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24607: LD_EXP 8
24611: PPUSH
24612: LD_EXP 42
24616: PUSH
24617: LD_STRING Gladstone
24619: STR
24620: PPUSH
24621: CALL 7745 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24625: LD_EXP 9
24629: PPUSH
24630: LD_EXP 42
24634: PUSH
24635: LD_STRING Kikuchi
24637: STR
24638: PPUSH
24639: CALL 7745 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24643: LD_EXP 14
24647: PPUSH
24648: LD_EXP 42
24652: PUSH
24653: LD_STRING Denis
24655: STR
24656: PPUSH
24657: CALL 7745 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24661: LD_EXP 15
24665: PPUSH
24666: LD_EXP 42
24670: PUSH
24671: LD_STRING Joan
24673: STR
24674: PPUSH
24675: CALL 7745 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24679: LD_EXP 10
24683: PPUSH
24684: LD_EXP 42
24688: PUSH
24689: LD_STRING Khatam
24691: STR
24692: PPUSH
24693: CALL 7745 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24697: LD_EXP 13
24701: PPUSH
24702: LD_EXP 42
24706: PUSH
24707: LD_STRING Houten
24709: STR
24710: PPUSH
24711: CALL 7745 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24715: LD_INT 50
24717: PUSH
24718: EMPTY
24719: LIST
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 21
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 25
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 25
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 25
24766: PUSH
24767: LD_INT 3
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 25
24776: PUSH
24777: LD_INT 4
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: PPUSH
24797: CALL_OW 69
24801: PUSH
24802: LD_EXP 1
24806: PUSH
24807: LD_EXP 2
24811: PUSH
24812: LD_EXP 3
24816: PUSH
24817: LD_EXP 4
24821: PUSH
24822: LD_EXP 5
24826: PUSH
24827: LD_EXP 6
24831: PUSH
24832: LD_EXP 7
24836: PUSH
24837: LD_EXP 8
24841: PUSH
24842: LD_EXP 9
24846: PUSH
24847: LD_EXP 14
24851: PUSH
24852: LD_EXP 15
24856: PUSH
24857: LD_EXP 13
24861: PUSH
24862: LD_EXP 10
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: DIFF
24882: PPUSH
24883: LD_STRING 08_other_survivors
24885: PPUSH
24886: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
24890: LD_INT 23
24892: PPUSH
24893: CALL 24906 0 1
// YouWin ;
24897: CALL_OW 103
// end ;
24901: LD_VAR 0 1
24905: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24906: LD_INT 0
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
// gammaBase = [ ] ;
24912: LD_ADDR_VAR 0 4
24916: PUSH
24917: EMPTY
24918: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24919: LD_ADDR_VAR 0 5
24923: PUSH
24924: LD_VAR 0 1
24928: PPUSH
24929: LD_INT 22
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 21
24941: PUSH
24942: LD_INT 3
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 50
24951: PUSH
24952: EMPTY
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: PPUSH
24960: CALL_OW 70
24964: ST_TO_ADDR
// for i in buildings do
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_VAR 0 5
24974: PUSH
24975: FOR_IN
24976: IFFALSE 25413
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24978: LD_VAR 0 3
24982: PPUSH
24983: CALL_OW 266
24987: PUSH
24988: LD_INT 6
24990: PUSH
24991: LD_INT 7
24993: PUSH
24994: LD_INT 8
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: IN
25002: IFFALSE 25116
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
25004: LD_ADDR_VAR 0 4
25008: PUSH
25009: LD_VAR 0 4
25013: PUSH
25014: LD_VAR 0 3
25018: PPUSH
25019: CALL_OW 266
25023: PUSH
25024: LD_VAR 0 3
25028: PPUSH
25029: CALL_OW 250
25033: PUSH
25034: LD_VAR 0 3
25038: PPUSH
25039: CALL_OW 251
25043: PUSH
25044: LD_VAR 0 3
25048: PPUSH
25049: CALL_OW 254
25053: PUSH
25054: LD_VAR 0 3
25058: PPUSH
25059: CALL_OW 267
25063: PUSH
25064: LD_VAR 0 3
25068: PPUSH
25069: CALL_OW 248
25073: PUSH
25074: LD_VAR 0 3
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: CALL_OW 268
25086: PUSH
25087: LD_VAR 0 3
25091: PPUSH
25092: LD_INT 2
25094: PPUSH
25095: CALL_OW 268
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: ADD
25113: ST_TO_ADDR
25114: GO 25411
// if GetBType ( i ) = b_bunker then
25116: LD_VAR 0 3
25120: PPUSH
25121: CALL_OW 266
25125: PUSH
25126: LD_INT 32
25128: EQUAL
25129: IFFALSE 25226
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25131: LD_ADDR_VAR 0 4
25135: PUSH
25136: LD_VAR 0 4
25140: PUSH
25141: LD_VAR 0 3
25145: PPUSH
25146: CALL_OW 266
25150: PUSH
25151: LD_VAR 0 3
25155: PPUSH
25156: CALL_OW 250
25160: PUSH
25161: LD_VAR 0 3
25165: PPUSH
25166: CALL_OW 251
25170: PUSH
25171: LD_VAR 0 3
25175: PPUSH
25176: CALL_OW 254
25180: PUSH
25181: LD_VAR 0 3
25185: PPUSH
25186: CALL_OW 267
25190: PUSH
25191: LD_VAR 0 3
25195: PPUSH
25196: CALL_OW 248
25200: PUSH
25201: LD_VAR 0 3
25205: PPUSH
25206: CALL_OW 269
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: PUSH
25220: EMPTY
25221: LIST
25222: ADD
25223: ST_TO_ADDR
25224: GO 25411
// if GetBType ( i ) = b_factory then
25226: LD_VAR 0 3
25230: PPUSH
25231: CALL_OW 266
25235: PUSH
25236: LD_INT 3
25238: EQUAL
25239: IFFALSE 25329
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25241: LD_ADDR_VAR 0 4
25245: PUSH
25246: LD_VAR 0 4
25250: PPUSH
25251: LD_INT 1
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: CALL_OW 266
25263: PUSH
25264: LD_VAR 0 3
25268: PPUSH
25269: CALL_OW 250
25273: PUSH
25274: LD_VAR 0 3
25278: PPUSH
25279: CALL_OW 251
25283: PUSH
25284: LD_VAR 0 3
25288: PPUSH
25289: CALL_OW 254
25293: PUSH
25294: LD_VAR 0 3
25298: PPUSH
25299: CALL_OW 267
25303: PUSH
25304: LD_VAR 0 3
25308: PPUSH
25309: CALL_OW 248
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: PPUSH
25322: CALL_OW 2
25326: ST_TO_ADDR
25327: GO 25411
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25329: LD_ADDR_VAR 0 4
25333: PUSH
25334: LD_VAR 0 4
25338: PUSH
25339: LD_VAR 0 3
25343: PPUSH
25344: CALL_OW 266
25348: PUSH
25349: LD_VAR 0 3
25353: PPUSH
25354: CALL_OW 250
25358: PUSH
25359: LD_VAR 0 3
25363: PPUSH
25364: CALL_OW 251
25368: PUSH
25369: LD_VAR 0 3
25373: PPUSH
25374: CALL_OW 254
25378: PUSH
25379: LD_VAR 0 3
25383: PPUSH
25384: CALL_OW 267
25388: PUSH
25389: LD_VAR 0 3
25393: PPUSH
25394: CALL_OW 248
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: ADD
25410: ST_TO_ADDR
// end ;
25411: GO 24975
25413: POP
25414: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25415: LD_VAR 0 4
25419: PPUSH
25420: LD_STRING 08_GammaBase
25422: PPUSH
25423: CALL_OW 39
// end ;
25427: LD_VAR 0 2
25431: RET
