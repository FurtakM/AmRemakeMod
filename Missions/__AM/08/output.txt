// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 41
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 42
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 38
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 37
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 11
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 30
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 40
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 34
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 39
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 43
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 6562 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 1732 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5367 0 0
// PrepareRussians ;
 229: CALL 5685 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 24
 291: PPUSH
 292: LD_EXP 25
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 7827 0 6
// PrepareCutsceneAttack ;
 312: CALL 5419 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 43
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side = 1 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 1
 542: ST_TO_ADDR
// uc_nation = 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// if gammaCommander = 1 then
 551: LD_EXP 11
 555: PUSH
 556: LD_INT 1
 558: EQUAL
 559: IFFALSE 592
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 561: LD_ADDR_EXP 3
 565: PUSH
 566: LD_STRING Donaldson
 568: PPUSH
 569: LD_INT 1
 571: PPUSH
 572: CALL 6103 0 2
 576: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 577: LD_EXP 3
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: LD_INT 0
 587: PPUSH
 588: CALL_OW 49
// end ; if gammaCommander = 2 then
 592: LD_EXP 11
 596: PUSH
 597: LD_INT 2
 599: EQUAL
 600: IFFALSE 633
// begin Brown = PrepareUnit ( Brown , true ) ;
 602: LD_ADDR_EXP 2
 606: PUSH
 607: LD_STRING Brown
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 6103 0 2
 617: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 5
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; if gammaCommander = 3 then
 633: LD_EXP 11
 637: PUSH
 638: LD_INT 3
 640: EQUAL
 641: IFFALSE 674
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 643: LD_ADDR_EXP 12
 647: PUSH
 648: LD_STRING VanHouten
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL 6103 0 2
 658: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 659: LD_EXP 12
 663: PPUSH
 664: LD_INT 5
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 674: LD_ADDR_EXP 21
 678: PUSH
 679: LD_STRING Harisson
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
 685: CALL 6103 0 2
 689: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 690: LD_ADDR_EXP 22
 694: PUSH
 695: LD_STRING Powell
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL 6103 0 2
 705: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 706: LD_ADDR_EXP 10
 710: PUSH
 711: LD_STRING 07_othersGamma
 713: PPUSH
 714: CALL_OW 31
 718: ST_TO_ADDR
// tmp := 8 - others_gamma ;
 719: LD_ADDR_VAR 0 14
 723: PUSH
 724: LD_INT 8
 726: PUSH
 727: LD_EXP 10
 731: MINUS
 732: ST_TO_ADDR
// if tmp then
 733: LD_VAR 0 14
 737: IFFALSE 790
// for i = 1 to tmp do
 739: LD_ADDR_VAR 0 2
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_VAR 0 14
 753: PUSH
 754: FOR_TO
 755: IFFALSE 788
// begin PrepareHuman ( false , 1 , 5 ) ;
 757: LD_INT 0
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
 770: LD_ADDR_EXP 10
 774: PUSH
 775: LD_EXP 10
 779: PUSH
 780: CALL_OW 44
 784: ADD
 785: ST_TO_ADDR
// end ;
 786: GO 754
 788: POP
 789: POP
// if HexInfo ( 61 , 29 ) = 0 then
 790: LD_INT 61
 792: PPUSH
 793: LD_INT 29
 795: PPUSH
 796: CALL_OW 428
 800: PUSH
 801: LD_INT 0
 803: EQUAL
 804: IFFALSE 835
// begin bc_type := b_barracks ;
 806: LD_ADDR_OWVAR 42
 810: PUSH
 811: LD_INT 5
 813: ST_TO_ADDR
// bc_level := 6 ;
 814: LD_ADDR_OWVAR 43
 818: PUSH
 819: LD_INT 6
 821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
 822: LD_INT 61
 824: PPUSH
 825: LD_INT 29
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
 835: LD_ADDR_VAR 0 13
 839: PUSH
 840: LD_INT 22
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: LD_INT 31
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 69
 868: ST_TO_ADDR
// for i in bun do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 13
 878: PUSH
 879: FOR_IN
 880: IFFALSE 1012
// begin x := GetX ( i ) ;
 882: LD_ADDR_VAR 0 3
 886: PUSH
 887: LD_VAR 0 2
 891: PPUSH
 892: CALL_OW 250
 896: ST_TO_ADDR
// y := GetY ( i ) ;
 897: LD_ADDR_VAR 0 4
 901: PUSH
 902: LD_VAR 0 2
 906: PPUSH
 907: CALL_OW 251
 911: ST_TO_ADDR
// d := GetDir ( i ) ;
 912: LD_ADDR_VAR 0 5
 916: PUSH
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 254
 926: ST_TO_ADDR
// RemoveUnit ( i ) ;
 927: LD_VAR 0 2
 931: PPUSH
 932: CALL_OW 64
// bc_type := b_bunker ;
 936: LD_ADDR_OWVAR 42
 940: PUSH
 941: LD_INT 32
 943: ST_TO_ADDR
// bc_level := 6 ;
 944: LD_ADDR_OWVAR 43
 948: PUSH
 949: LD_INT 6
 951: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
 952: LD_ADDR_VAR 0 6
 956: PUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: LD_VAR 0 4
 966: PPUSH
 967: LD_VAR 0 5
 971: PPUSH
 972: CALL_OW 47
 976: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
 977: LD_VAR 0 6
 981: PPUSH
 982: LD_INT 5
 984: PUSH
 985: LD_INT 4
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_VAR 0 2
 996: PUSH
 997: LD_INT 2
 999: MOD
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: PPUSH
1006: CALL_OW 431
// end ;
1010: GO 879
1012: POP
1013: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1014: LD_ADDR_VAR 0 9
1018: PUSH
1019: LD_INT 22
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 30
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PPUSH
1043: CALL_OW 69
1047: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1048: LD_ADDR_VAR 0 8
1052: PUSH
1053: LD_INT 22
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: LD_INT 30
1068: PUSH
1069: LD_INT 6
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 30
1078: PUSH
1079: LD_INT 7
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 8
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1111: LD_ADDR_VAR 0 7
1115: PUSH
1116: LD_INT 22
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: CALL_OW 69
1144: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1145: LD_ADDR_VAR 0 12
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1179: LD_ADDR_VAR 0 13
1183: PUSH
1184: LD_INT 22
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 2
1196: PUSH
1197: LD_INT 30
1199: PUSH
1200: LD_INT 31
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 32
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 69
1230: ST_TO_ADDR
// for i in others_gamma do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_EXP 10
1240: PUSH
1241: FOR_IN
1242: IFFALSE 1617
// begin placed := false ;
1244: LD_ADDR_VAR 0 11
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1252: LD_VAR 0 2
1256: PPUSH
1257: CALL_OW 257
1261: PUSH
1262: LD_INT 1
1264: EQUAL
1265: IFFALSE 1390
// begin if UnitFilter ( bun , [ f_empty ] ) then
1267: LD_VAR 0 13
1271: PPUSH
1272: LD_INT 58
1274: PUSH
1275: EMPTY
1276: LIST
1277: PPUSH
1278: CALL_OW 72
1282: IFFALSE 1321
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1284: LD_VAR 0 2
1288: PPUSH
1289: LD_VAR 0 13
1293: PPUSH
1294: LD_INT 58
1296: PUSH
1297: EMPTY
1298: LIST
1299: PPUSH
1300: CALL_OW 72
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PPUSH
1309: CALL_OW 52
// placed := true ;
1313: LD_ADDR_VAR 0 11
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// end ; if arm and not placed then
1321: LD_VAR 0 9
1325: PUSH
1326: LD_VAR 0 11
1330: NOT
1331: AND
1332: IFFALSE 1390
// begin for j in arm do
1334: LD_ADDR_VAR 0 10
1338: PUSH
1339: LD_VAR 0 9
1343: PUSH
1344: FOR_IN
1345: IFFALSE 1388
// if UnitsInside ( j ) < 6 then
1347: LD_VAR 0 10
1351: PPUSH
1352: CALL_OW 313
1356: PUSH
1357: LD_INT 6
1359: LESS
1360: IFFALSE 1386
// begin PlaceHumanInUnit ( i , j ) ;
1362: LD_VAR 0 2
1366: PPUSH
1367: LD_VAR 0 10
1371: PPUSH
1372: CALL_OW 52
// placed := true ;
1376: LD_ADDR_VAR 0 11
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// break ;
1384: GO 1388
// end ;
1386: GO 1344
1388: POP
1389: POP
// end ; end ; if GetClass ( i ) = 3 then
1390: LD_VAR 0 2
1394: PPUSH
1395: CALL_OW 257
1399: PUSH
1400: LD_INT 3
1402: EQUAL
1403: IFFALSE 1507
// if fac then
1405: LD_VAR 0 7
1409: IFFALSE 1507
// begin if ct then
1411: LD_VAR 0 12
1415: IFFALSE 1443
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1417: LD_VAR 0 2
1421: PPUSH
1422: LD_VAR 0 12
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PPUSH
1431: CALL_OW 52
// placed := true ;
1435: LD_ADDR_VAR 0 11
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ; if placed then
1443: LD_VAR 0 11
1447: IFFALSE 1451
// continue ;
1449: GO 1241
// for j in fac do
1451: LD_ADDR_VAR 0 10
1455: PUSH
1456: LD_VAR 0 7
1460: PUSH
1461: FOR_IN
1462: IFFALSE 1505
// if UnitsInside ( j ) < 6 then
1464: LD_VAR 0 10
1468: PPUSH
1469: CALL_OW 313
1473: PUSH
1474: LD_INT 6
1476: LESS
1477: IFFALSE 1503
// begin PlaceHumanInUnit ( i , j ) ;
1479: LD_VAR 0 2
1483: PPUSH
1484: LD_VAR 0 10
1488: PPUSH
1489: CALL_OW 52
// placed := true ;
1493: LD_ADDR_VAR 0 11
1497: PUSH
1498: LD_INT 1
1500: ST_TO_ADDR
// break ;
1501: GO 1505
// end ;
1503: GO 1461
1505: POP
1506: POP
// end ; if GetClass ( i ) = 4 then
1507: LD_VAR 0 2
1511: PPUSH
1512: CALL_OW 257
1516: PUSH
1517: LD_INT 4
1519: EQUAL
1520: IFFALSE 1584
// if lab then
1522: LD_VAR 0 8
1526: IFFALSE 1584
// begin for j in lab do
1528: LD_ADDR_VAR 0 10
1532: PUSH
1533: LD_VAR 0 8
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1582
// if UnitsInside ( j ) < 6 then
1541: LD_VAR 0 10
1545: PPUSH
1546: CALL_OW 313
1550: PUSH
1551: LD_INT 6
1553: LESS
1554: IFFALSE 1580
// begin PlaceHumanInUnit ( i , j ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_VAR 0 10
1565: PPUSH
1566: CALL_OW 52
// placed := true ;
1570: LD_ADDR_VAR 0 11
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// break ;
1578: GO 1582
// end ;
1580: GO 1538
1582: POP
1583: POP
// end ; if not placed then
1584: LD_VAR 0 11
1588: NOT
1589: IFFALSE 1615
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1591: LD_VAR 0 2
1595: PPUSH
1596: LD_INT 5
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: CALL_OW 49
// ComHold ( i ) ;
1606: LD_VAR 0 2
1610: PPUSH
1611: CALL_OW 140
// end ; end ;
1615: GO 1241
1617: POP
1618: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1619: LD_VAR 0 12
1623: PUSH
1624: LD_VAR 0 12
1628: PUSH
1629: LD_INT 1
1631: ARRAY
1632: PPUSH
1633: CALL_OW 313
1637: AND
1638: IFFALSE 1727
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1640: LD_ADDR_VAR 0 2
1644: PUSH
1645: LD_INT 22
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 33
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PPUSH
1669: CALL_OW 69
1673: PUSH
1674: FOR_IN
1675: IFFALSE 1725
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1677: LD_VAR 0 2
1681: PPUSH
1682: LD_VAR 0 12
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: PPUSH
1691: CALL_OW 313
1695: PUSH
1696: LD_INT 1
1698: PPUSH
1699: LD_VAR 0 12
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: CALL_OW 313
1712: PPUSH
1713: CALL_OW 12
1717: ARRAY
1718: PPUSH
1719: CALL_OW 135
1723: GO 1674
1725: POP
1726: POP
// end ; end ;
1727: LD_VAR 0 1
1731: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
1732: LD_INT 0
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1740: LD_INT 71
1742: PPUSH
1743: LD_INT 5
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1753: LD_ADDR_VAR 0 2
1757: PUSH
1758: LD_STRING GammaBase
1760: PPUSH
1761: EMPTY
1762: PPUSH
1763: CALL_OW 30
1767: ST_TO_ADDR
// uc_side := 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation := 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// for i in blist do
1784: LD_ADDR_VAR 0 3
1788: PUSH
1789: LD_VAR 0 2
1793: PUSH
1794: FOR_IN
1795: IFFALSE 2203
// begin bc_type := i [ 1 ] ;
1797: LD_ADDR_OWVAR 42
1801: PUSH
1802: LD_VAR 0 3
1806: PUSH
1807: LD_INT 1
1809: ARRAY
1810: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1811: LD_ADDR_OWVAR 43
1815: PUSH
1816: LD_VAR 0 3
1820: PUSH
1821: LD_INT 5
1823: ARRAY
1824: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1825: LD_VAR 0 3
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PUSH
1834: LD_INT 7
1836: PUSH
1837: LD_INT 8
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: IN
1844: IFFALSE 1900
// begin bc_kind1 := i [ 7 ] ;
1846: LD_ADDR_OWVAR 44
1850: PUSH
1851: LD_VAR 0 3
1855: PUSH
1856: LD_INT 7
1858: ARRAY
1859: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1860: LD_STRING 06_remoteVehs_1
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 30
1870: PUSH
1871: LD_INT 1
1873: EQUAL
1874: IFFALSE 1886
// begin bc_kind2 := 15 ;
1876: LD_ADDR_OWVAR 45
1880: PUSH
1881: LD_INT 15
1883: ST_TO_ADDR
// end else
1884: GO 1900
// begin bc_kind2 := i [ 8 ] ;
1886: LD_ADDR_OWVAR 45
1890: PUSH
1891: LD_VAR 0 3
1895: PUSH
1896: LD_INT 8
1898: ARRAY
1899: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1900: LD_OWVAR 42
1904: PUSH
1905: LD_INT 0
1907: EQUAL
1908: IFFALSE 2026
// begin bc_type := b_warehouse ;
1910: LD_ADDR_OWVAR 42
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1918: LD_ADDR_EXP 36
1922: PUSH
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 2
1930: ARRAY
1931: PPUSH
1932: LD_VAR 0 3
1936: PUSH
1937: LD_INT 3
1939: ARRAY
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 4
1948: ARRAY
1949: PPUSH
1950: CALL_OW 47
1954: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1955: LD_EXP 36
1959: PPUSH
1960: LD_STRING gamma
1962: PPUSH
1963: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
1967: LD_EXP 36
1971: PPUSH
1972: CALL_OW 274
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: LD_INT 400
1982: PUSH
1983: LD_INT 350
1985: PUSH
1986: LD_INT 250
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: PPUSH
2000: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2004: LD_EXP 36
2008: PPUSH
2009: CALL_OW 274
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: LD_INT 200
2019: PPUSH
2020: CALL_OW 277
// end else
2024: GO 2168
// begin if bc_type = 4 then
2026: LD_OWVAR 42
2030: PUSH
2031: LD_INT 4
2033: EQUAL
2034: IFFALSE 2083
// begin bc_type = 5 ;
2036: LD_ADDR_OWVAR 42
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2044: LD_ADDR_VAR 0 4
2048: PUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 2
2056: ARRAY
2057: PPUSH
2058: LD_VAR 0 3
2062: PUSH
2063: LD_INT 3
2065: ARRAY
2066: PPUSH
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 4
2074: ARRAY
2075: PPUSH
2076: CALL_OW 47
2080: ST_TO_ADDR
// end else
2081: GO 2168
// begin bc_type := i [ 1 ] ;
2083: LD_ADDR_OWVAR 42
2087: PUSH
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2097: LD_STRING 06_remoteVehs_1
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: CALL_OW 30
2107: PUSH
2108: LD_INT 1
2110: EQUAL
2111: PUSH
2112: LD_OWVAR 42
2116: PUSH
2117: LD_INT 7
2119: EQUAL
2120: AND
2121: IFFALSE 2131
// bc_type := b_lab_full ;
2123: LD_ADDR_OWVAR 42
2127: PUSH
2128: LD_INT 8
2130: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PPUSH
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 3
2152: ARRAY
2153: PPUSH
2154: LD_VAR 0 3
2158: PUSH
2159: LD_INT 4
2161: ARRAY
2162: PPUSH
2163: CALL_OW 47
2167: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2168: LD_VAR 0 4
2172: PPUSH
2173: CALL_OW 266
2177: PUSH
2178: LD_INT 32
2180: EQUAL
2181: IFFALSE 2201
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 7
2195: ARRAY
2196: PPUSH
2197: CALL_OW 431
// end ;
2201: GO 1794
2203: POP
2204: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2205: LD_INT 22
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 30
2217: PUSH
2218: LD_INT 3
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 69
2233: IFFALSE 2481
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2235: LD_ADDR_VAR 0 4
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 30
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2273: LD_ADDR_VAR 0 6
2277: PUSH
2278: LD_VAR 0 4
2282: PPUSH
2283: CALL_OW 250
2287: PPUSH
2288: LD_VAR 0 4
2292: PPUSH
2293: CALL_OW 251
2297: PPUSH
2298: LD_VAR 0 4
2302: PPUSH
2303: CALL_OW 254
2307: PPUSH
2308: CALL 15181 0 3
2312: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2313: LD_ADDR_VAR 0 2
2317: PUSH
2318: LD_INT 19
2320: PUSH
2321: LD_INT 17
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2328: LD_STRING 06_remoteVehs_1
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: CALL_OW 30
2338: IFFALSE 2361
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2340: LD_ADDR_VAR 0 2
2344: PUSH
2345: LD_VAR 0 2
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 20
2355: PPUSH
2356: CALL_OW 2
2360: ST_TO_ADDR
// for i in tmp do
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: PUSH
2371: FOR_IN
2372: IFFALSE 2479
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_VAR 0 3
2387: PUSH
2388: LD_INT 2
2390: ARRAY
2391: PPUSH
2392: CALL_OW 428
2396: PUSH
2397: LD_INT 0
2399: EQUAL
2400: IFFALSE 2477
// begin bc_type := blist [ 1 ] ;
2402: LD_ADDR_OWVAR 42
2406: PUSH
2407: LD_VAR 0 2
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: PPUSH
2425: LD_VAR 0 3
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PPUSH
2434: LD_VAR 0 3
2438: PUSH
2439: LD_INT 3
2441: ARRAY
2442: PPUSH
2443: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 3
2464: ST_TO_ADDR
// if blist = 0 then
2465: LD_VAR 0 2
2469: PUSH
2470: LD_INT 0
2472: EQUAL
2473: IFFALSE 2477
// break ;
2475: GO 2479
// end ;
2477: GO 2371
2479: POP
2480: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2481: LD_STRING 06_remoteVehs_1
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL_OW 30
2491: PUSH
2492: LD_INT 1
2494: EQUAL
2495: IFFALSE 2699
// begin bc_type = 36 ;
2497: LD_ADDR_OWVAR 42
2501: PUSH
2502: LD_INT 36
2504: ST_TO_ADDR
// bc_level = 4 ;
2505: LD_ADDR_OWVAR 43
2509: PUSH
2510: LD_INT 4
2512: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2513: LD_INT 62
2515: PPUSH
2516: LD_INT 12
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: DOUBLE
2532: LD_INT 1
2534: DEC
2535: ST_TO_ADDR
2536: LD_INT 3
2538: PUSH
2539: LD_INT 2
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_OWVAR 67
2554: ARRAY
2555: PUSH
2556: FOR_TO
2557: IFFALSE 2697
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2559: LD_ADDR_OWVAR 37
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 2
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 1
2579: PPUSH
2580: LD_INT 2
2582: PPUSH
2583: CALL_OW 12
2587: ARRAY
2588: PUSH
2589: LD_INT 2
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_OWVAR 67
2601: ARRAY
2602: ST_TO_ADDR
// vc_engine = 1 ;
2603: LD_ADDR_OWVAR 39
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// vc_control = 2 ;
2611: LD_ADDR_OWVAR 38
2615: PUSH
2616: LD_INT 2
2618: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2619: LD_ADDR_OWVAR 40
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: LD_INT 4
2629: PUSH
2630: LD_INT 5
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 3
2643: PPUSH
2644: CALL_OW 12
2648: ARRAY
2649: ST_TO_ADDR
// veh = CreateVehicle ;
2650: LD_ADDR_VAR 0 5
2654: PUSH
2655: CALL_OW 45
2659: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2660: LD_VAR 0 5
2664: PPUSH
2665: LD_EXP 36
2669: PPUSH
2670: CALL_OW 250
2674: PPUSH
2675: LD_EXP 36
2679: PPUSH
2680: CALL_OW 251
2684: PPUSH
2685: LD_INT 7
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: CALL_OW 50
// end ;
2695: GO 2556
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// uc_side = 1 ;
2710: LD_ADDR_OWVAR 20
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// uc_nation = 1 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2726: LD_ADDR_EXP 13
2730: PUSH
2731: LD_STRING 06c_Denis
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL 6103 0 2
2741: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2742: LD_EXP 13
2746: PPUSH
2747: LD_INT 4
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2757: LD_ADDR_EXP 14
2761: PUSH
2762: LD_STRING 06c_Joan
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL 6103 0 2
2772: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2773: LD_EXP 14
2777: PPUSH
2778: LD_INT 4
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
2788: LD_STRING GladstoneIn07
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 30
2798: NOT
2799: IFFALSE 2867
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2801: LD_ADDR_EXP 8
2805: PUSH
2806: LD_STRING 06c_Gladstone
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL 6103 0 2
2816: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2817: LD_EXP 8
2821: NOT
2822: PUSH
2823: LD_STRING GladstoneStayInDelta
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: CALL_OW 30
2833: AND
2834: IFFALSE 2852
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2836: LD_ADDR_EXP 8
2840: PUSH
2841: LD_STRING 05_Gladstone
2843: PPUSH
2844: LD_INT 1
2846: PPUSH
2847: CALL 6103 0 2
2851: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2852: LD_EXP 8
2856: PPUSH
2857: LD_INT 4
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2867: LD_STRING LisaStayInDelta
2869: PPUSH
2870: LD_INT 0
2872: PPUSH
2873: CALL_OW 30
2877: IFFALSE 2910
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2879: LD_ADDR_EXP 6
2883: PUSH
2884: LD_STRING 05_Lisa
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: CALL 6103 0 2
2894: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2895: LD_EXP 6
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2910: LD_STRING BobbyStayInDelta
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 30
2920: IFFALSE 2953
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2922: LD_ADDR_EXP 4
2926: PUSH
2927: LD_STRING 05_Bobby
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL 6103 0 2
2937: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2938: LD_EXP 4
2942: PPUSH
2943: LD_INT 4
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2953: LD_STRING CyrusStayInDelta
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: CALL_OW 30
2963: IFFALSE 2996
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2965: LD_ADDR_EXP 5
2969: PUSH
2970: LD_STRING 05_Cyrus
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL 6103 0 2
2980: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2981: LD_EXP 5
2985: PPUSH
2986: LD_INT 4
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2996: LD_STRING BrownStayInDelta
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 30
3006: IFFALSE 3039
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3008: LD_ADDR_EXP 2
3012: PUSH
3013: LD_STRING 05_Brown
3015: PPUSH
3016: LD_INT 1
3018: PPUSH
3019: CALL 6103 0 2
3023: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3024: LD_EXP 2
3028: PPUSH
3029: LD_INT 4
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3039: LD_STRING DonaldsonStayInDelta
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: CALL_OW 30
3049: IFFALSE 3082
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3051: LD_ADDR_EXP 3
3055: PUSH
3056: LD_STRING 05_Donaldson
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL 6103 0 2
3066: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3067: LD_EXP 3
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: LD_STRING OtherStayInDelta
3089: PPUSH
3090: CALL_OW 31
3094: ST_TO_ADDR
// if other then
3095: LD_VAR 0 4
3099: IFFALSE 3144
// for j = 1 to other do
3101: LD_ADDR_VAR 0 3
3105: PUSH
3106: DOUBLE
3107: LD_INT 1
3109: DEC
3110: ST_TO_ADDR
3111: LD_VAR 0 4
3115: PUSH
3116: FOR_TO
3117: IFFALSE 3142
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3119: LD_VAR 0 4
3123: PUSH
3124: LD_VAR 0 3
3128: ARRAY
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 49
3140: GO 3116
3142: POP
3143: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3144: LD_ADDR_VAR 0 4
3148: PUSH
3149: LD_STRING 06_other_apemans
3151: PPUSH
3152: CALL_OW 31
3156: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3157: LD_VAR 0 4
3161: PUSH
3162: LD_INT 5
3164: PUSH
3165: LD_INT 4
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PUSH
3176: LD_OWVAR 67
3180: ARRAY
3181: GREATEREQUAL
3182: IFFALSE 3211
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3184: LD_ADDR_VAR 0 3
3188: PUSH
3189: LD_INT 5
3191: PUSH
3192: LD_INT 4
3194: PUSH
3195: LD_INT 3
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_OWVAR 67
3207: ARRAY
3208: ST_TO_ADDR
3209: GO 3221
// j := other ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: LD_VAR 0 4
3220: ST_TO_ADDR
// for i = 1 to j do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_VAR 0 3
3235: PUSH
3236: FOR_TO
3237: IFFALSE 3262
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3239: LD_VAR 0 4
3243: PUSH
3244: LD_VAR 0 2
3248: ARRAY
3249: PPUSH
3250: LD_INT 4
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
3260: GO 3236
3262: POP
3263: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3264: LD_INT 4
3266: PPUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 21
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 70
3295: PPUSH
3296: LD_INT 53
3298: PPUSH
3299: LD_INT 19
3301: PPUSH
3302: CALL_OW 111
// firstAttack = 1 ;
3306: LD_ADDR_EXP 32
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// end ;
3314: LD_VAR 0 1
3318: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3319: LD_INT 0
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3326: LD_ADDR_VAR 0 4
3330: PUSH
3331: LD_STRING 07_vehicles
3333: PPUSH
3334: EMPTY
3335: PPUSH
3336: CALL_OW 30
3340: ST_TO_ADDR
// uc_side = 1 ;
3341: LD_ADDR_OWVAR 20
3345: PUSH
3346: LD_INT 1
3348: ST_TO_ADDR
// uc_nation = 1 ;
3349: LD_ADDR_OWVAR 21
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// if vehicles > 0 then
3357: LD_VAR 0 4
3361: PUSH
3362: LD_INT 0
3364: GREATER
3365: IFFALSE 3504
// begin for i = 1 to vehicles do
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: LD_VAR 0 4
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3502
// begin vc_chassis = vehicles [ i ] ;
3385: LD_ADDR_OWVAR 37
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3401: LD_ADDR_OWVAR 39
3405: PUSH
3406: LD_VAR 0 4
3410: PUSH
3411: LD_VAR 0 2
3415: PUSH
3416: LD_INT 1
3418: PLUS
3419: ARRAY
3420: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3421: LD_ADDR_OWVAR 38
3425: PUSH
3426: LD_VAR 0 4
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: LD_INT 2
3438: PLUS
3439: ARRAY
3440: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3441: LD_ADDR_OWVAR 40
3445: PUSH
3446: LD_VAR 0 4
3450: PUSH
3451: LD_VAR 0 2
3455: PUSH
3456: LD_INT 3
3458: PLUS
3459: ARRAY
3460: ST_TO_ADDR
// veh = CreateVehicle ;
3461: LD_ADDR_VAR 0 5
3465: PUSH
3466: CALL_OW 45
3470: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3471: LD_VAR 0 5
3475: PPUSH
3476: LD_INT 4
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 49
// i = i + 3 ;
3486: LD_ADDR_VAR 0 2
3490: PUSH
3491: LD_VAR 0 2
3495: PUSH
3496: LD_INT 3
3498: PLUS
3499: ST_TO_ADDR
// end ;
3500: GO 3382
3502: POP
3503: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3504: LD_ADDR_EXP 1
3508: PUSH
3509: LD_EXP 42
3513: PUSH
3514: LD_STRING JMM
3516: STR
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: CALL 6103 0 2
3525: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3526: LD_EXP 11
3530: PUSH
3531: LD_INT 1
3533: EQUAL
3534: PUSH
3535: LD_EXP 11
3539: PUSH
3540: LD_INT 3
3542: EQUAL
3543: OR
3544: IFFALSE 3568
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3546: LD_ADDR_EXP 2
3550: PUSH
3551: LD_EXP 42
3555: PUSH
3556: LD_STRING Brown
3558: STR
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: CALL 6103 0 2
3567: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3568: LD_EXP 11
3572: PUSH
3573: LD_INT 2
3575: EQUAL
3576: PUSH
3577: LD_EXP 11
3581: PUSH
3582: LD_INT 3
3584: EQUAL
3585: OR
3586: IFFALSE 3610
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3588: LD_ADDR_EXP 3
3592: PUSH
3593: LD_EXP 42
3597: PUSH
3598: LD_STRING Donaldson
3600: STR
3601: PPUSH
3602: LD_INT 1
3604: PPUSH
3605: CALL 6103 0 2
3609: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3610: LD_ADDR_EXP 4
3614: PUSH
3615: LD_EXP 42
3619: PUSH
3620: LD_STRING Bobby
3622: STR
3623: PPUSH
3624: LD_INT 1
3626: PPUSH
3627: CALL 6103 0 2
3631: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3632: LD_ADDR_EXP 5
3636: PUSH
3637: LD_EXP 42
3641: PUSH
3642: LD_STRING Cyrus
3644: STR
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
3649: CALL 6103 0 2
3653: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3654: LD_ADDR_EXP 6
3658: PUSH
3659: LD_EXP 42
3663: PUSH
3664: LD_STRING Lisa
3666: STR
3667: PPUSH
3668: LD_INT 1
3670: PPUSH
3671: CALL 6103 0 2
3675: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3676: LD_ADDR_EXP 7
3680: PUSH
3681: LD_EXP 42
3685: PUSH
3686: LD_STRING Frank
3688: STR
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: CALL 6103 0 2
3697: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3698: LD_ADDR_EXP 8
3702: PUSH
3703: LD_EXP 42
3707: PUSH
3708: LD_STRING Gladstone
3710: STR
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
3715: CALL 6103 0 2
3719: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3720: LD_ADDR_EXP 9
3724: PUSH
3725: LD_EXP 42
3729: PUSH
3730: LD_STRING Kikuchi
3732: STR
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: CALL 6103 0 2
3741: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3742: LD_EXP 11
3746: PUSH
3747: LD_INT 1
3749: EQUAL
3750: PUSH
3751: LD_EXP 11
3755: PUSH
3756: LD_INT 3
3758: EQUAL
3759: OR
3760: IFFALSE 3777
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3762: LD_EXP 2
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3777: LD_EXP 11
3781: PUSH
3782: LD_INT 2
3784: EQUAL
3785: PUSH
3786: LD_EXP 11
3790: PUSH
3791: LD_INT 3
3793: EQUAL
3794: OR
3795: IFFALSE 3812
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3797: LD_EXP 3
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 0
3807: PPUSH
3808: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3812: LD_ADDR_VAR 0 5
3816: PUSH
3817: LD_INT 4
3819: PPUSH
3820: LD_INT 22
3822: PUSH
3823: LD_INT 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 21
3832: PUSH
3833: LD_INT 2
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 58
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 70
3855: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3856: LD_ADDR_EXP 1
3860: PUSH
3861: LD_EXP 42
3865: PUSH
3866: LD_STRING JMM
3868: STR
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
3873: CALL 6103 0 2
3877: ST_TO_ADDR
// if veh > 0 then
3878: LD_VAR 0 5
3882: PUSH
3883: LD_INT 0
3885: GREATER
3886: IFFALSE 3908
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_VAR 0 5
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: PPUSH
3902: CALL_OW 52
// end else
3906: GO 3923
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3908: LD_EXP 1
3912: PPUSH
3913: LD_INT 4
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3923: LD_ADDR_VAR 0 5
3927: PUSH
3928: LD_INT 4
3930: PPUSH
3931: LD_INT 22
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 21
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 58
3953: PUSH
3954: EMPTY
3955: LIST
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PPUSH
3962: CALL_OW 70
3966: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: LD_EXP 42
3976: PUSH
3977: LD_STRING Bobby
3979: STR
3980: PPUSH
3981: LD_INT 1
3983: PPUSH
3984: CALL 6103 0 2
3988: ST_TO_ADDR
// if veh > 0 then
3989: LD_VAR 0 5
3993: PUSH
3994: LD_INT 0
3996: GREATER
3997: IFFALSE 4019
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3999: LD_EXP 4
4003: PPUSH
4004: LD_VAR 0 5
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: CALL_OW 52
// end else
4017: GO 4034
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4019: LD_EXP 4
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: LD_INT 4
4041: PPUSH
4042: LD_INT 22
4044: PUSH
4045: LD_INT 1
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 58
4064: PUSH
4065: EMPTY
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 70
4077: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4078: LD_ADDR_EXP 5
4082: PUSH
4083: LD_EXP 42
4087: PUSH
4088: LD_STRING Cyrus
4090: STR
4091: PPUSH
4092: LD_INT 1
4094: PPUSH
4095: CALL 6103 0 2
4099: ST_TO_ADDR
// if veh > 0 then
4100: LD_VAR 0 5
4104: PUSH
4105: LD_INT 0
4107: GREATER
4108: IFFALSE 4130
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4110: LD_EXP 5
4114: PPUSH
4115: LD_VAR 0 5
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PPUSH
4124: CALL_OW 52
// end else
4128: GO 4145
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4130: LD_EXP 5
4134: PPUSH
4135: LD_INT 4
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: LD_INT 4
4152: PPUSH
4153: LD_INT 22
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 2
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 58
4175: PUSH
4176: EMPTY
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 70
4188: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4189: LD_ADDR_EXP 6
4193: PUSH
4194: LD_EXP 42
4198: PUSH
4199: LD_STRING Lisa
4201: STR
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL 6103 0 2
4210: ST_TO_ADDR
// if veh > 0 then
4211: LD_VAR 0 5
4215: PUSH
4216: LD_INT 0
4218: GREATER
4219: IFFALSE 4241
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4221: LD_EXP 6
4225: PPUSH
4226: LD_VAR 0 5
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: CALL_OW 52
// end else
4239: GO 4256
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4241: LD_EXP 6
4245: PPUSH
4246: LD_INT 4
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4256: LD_ADDR_VAR 0 5
4260: PUSH
4261: LD_INT 4
4263: PPUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 21
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 58
4286: PUSH
4287: EMPTY
4288: LIST
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 70
4299: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4300: LD_ADDR_EXP 7
4304: PUSH
4305: LD_EXP 42
4309: PUSH
4310: LD_STRING Frank
4312: STR
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL 6103 0 2
4321: ST_TO_ADDR
// if veh > 0 then
4322: LD_VAR 0 5
4326: PUSH
4327: LD_INT 0
4329: GREATER
4330: IFFALSE 4352
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4332: LD_EXP 7
4336: PPUSH
4337: LD_VAR 0 5
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: CALL_OW 52
// end else
4350: GO 4367
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4352: LD_EXP 7
4356: PPUSH
4357: LD_INT 4
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4367: LD_ADDR_VAR 0 5
4371: PUSH
4372: LD_INT 4
4374: PPUSH
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 21
4387: PUSH
4388: LD_INT 2
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 58
4397: PUSH
4398: EMPTY
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 70
4410: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4411: LD_ADDR_EXP 8
4415: PUSH
4416: LD_EXP 42
4420: PUSH
4421: LD_STRING Gladstone
4423: STR
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6103 0 2
4432: ST_TO_ADDR
// if veh > 0 then
4433: LD_VAR 0 5
4437: PUSH
4438: LD_INT 0
4440: GREATER
4441: IFFALSE 4463
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4443: LD_EXP 8
4447: PPUSH
4448: LD_VAR 0 5
4452: PUSH
4453: LD_INT 1
4455: ARRAY
4456: PPUSH
4457: CALL_OW 52
// end else
4461: GO 4478
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4463: LD_EXP 8
4467: PPUSH
4468: LD_INT 4
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4478: LD_ADDR_VAR 0 5
4482: PUSH
4483: LD_INT 4
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 58
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 70
4521: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4522: LD_ADDR_EXP 9
4526: PUSH
4527: LD_EXP 42
4531: PUSH
4532: LD_STRING Kikuchi
4534: STR
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: CALL 6103 0 2
4543: ST_TO_ADDR
// if veh > 0 then
4544: LD_VAR 0 5
4548: PUSH
4549: LD_INT 0
4551: GREATER
4552: IFFALSE 4574
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4554: LD_EXP 9
4558: PPUSH
4559: LD_VAR 0 5
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: PPUSH
4568: CALL_OW 52
// end else
4572: GO 4589
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4574: LD_EXP 9
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: LD_STRING 07c_others
4596: PPUSH
4597: CALL_OW 31
4601: ST_TO_ADDR
// for i in other do
4602: LD_ADDR_VAR 0 2
4606: PUSH
4607: LD_VAR 0 3
4611: PUSH
4612: FOR_IN
4613: IFFALSE 4706
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4615: LD_ADDR_VAR 0 5
4619: PUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 22
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 21
4635: PUSH
4636: LD_INT 2
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 58
4645: PUSH
4646: EMPTY
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PPUSH
4654: CALL_OW 70
4658: ST_TO_ADDR
// if veh > 0 then
4659: LD_VAR 0 5
4663: PUSH
4664: LD_INT 0
4666: GREATER
4667: IFFALSE 4689
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4669: LD_VAR 0 2
4673: PPUSH
4674: LD_VAR 0 5
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 52
// end else
4687: GO 4704
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4689: LD_VAR 0 2
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: LD_INT 0
4699: PPUSH
4700: CALL_OW 49
// end ; end ;
4704: GO 4612
4706: POP
4707: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: PPUSH
4724: CALL_OW 70
4728: PPUSH
4729: LD_INT 53
4731: PPUSH
4732: LD_INT 19
4734: PPUSH
4735: CALL_OW 111
// end ;
4739: LD_VAR 0 1
4743: RET
// export function PrepareSikorsky ; begin
4744: LD_INT 0
4746: PPUSH
// uc_side = 4 ;
4747: LD_ADDR_OWVAR 20
4751: PUSH
4752: LD_INT 4
4754: ST_TO_ADDR
// uc_nation = 1 ;
4755: LD_ADDR_OWVAR 21
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4763: LD_ADDR_EXP 15
4767: PUSH
4768: LD_STRING Sikorski
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL 6103 0 2
4778: ST_TO_ADDR
// vc_engine = 1 ;
4779: LD_ADDR_OWVAR 39
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// vc_control = 1 ;
4787: LD_ADDR_OWVAR 38
4791: PUSH
4792: LD_INT 1
4794: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4795: LD_ADDR_OWVAR 40
4799: PUSH
4800: LD_INT 5
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: LD_INT 4
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_OWVAR 67
4818: ARRAY
4819: ST_TO_ADDR
// vc_chassis = 4 ;
4820: LD_ADDR_OWVAR 37
4824: PUSH
4825: LD_INT 4
4827: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4828: LD_ADDR_EXP 16
4832: PUSH
4833: CALL_OW 45
4837: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4838: LD_EXP 16
4842: PPUSH
4843: LD_INT 9
4845: PPUSH
4846: LD_INT 0
4848: PPUSH
4849: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4853: LD_EXP 15
4857: PPUSH
4858: LD_EXP 16
4862: PPUSH
4863: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4867: LD_EXP 16
4871: PPUSH
4872: LD_INT 5
4874: PPUSH
4875: CALL_OW 113
// end ;
4879: LD_VAR 0 1
4883: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4884: LD_INT 0
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4890: LD_ADDR_VAR 0 2
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_INT 8
4902: PUSH
4903: LD_INT 7
4905: PUSH
4906: LD_INT 7
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: LD_OWVAR 67
4918: ARRAY
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5018
// begin uc_side = 4 ;
4923: LD_ADDR_OWVAR 20
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// uc_nation = 1 ;
4931: LD_ADDR_OWVAR 21
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// hc_name =  ;
4939: LD_ADDR_OWVAR 26
4943: PUSH
4944: LD_STRING 
4946: ST_TO_ADDR
// hc_gallery =  ;
4947: LD_ADDR_OWVAR 33
4951: PUSH
4952: LD_STRING 
4954: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4955: LD_INT 0
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 5
4963: PPUSH
4964: LD_INT 8
4966: PPUSH
4967: CALL_OW 12
4971: PPUSH
4972: CALL_OW 380
// un = CreateHuman ;
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: CALL_OW 44
4985: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: LD_INT 9
4993: PPUSH
4994: LD_INT 0
4996: PPUSH
4997: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: LD_INT 53
5008: PPUSH
5009: LD_INT 23
5011: PPUSH
5012: CALL_OW 111
// end ;
5016: GO 4920
5018: POP
5019: POP
// for i = 1 to 3 do
5020: LD_ADDR_VAR 0 2
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 3
5032: PUSH
5033: FOR_TO
5034: IFFALSE 5131
// begin uc_side = 4 ;
5036: LD_ADDR_OWVAR 20
5040: PUSH
5041: LD_INT 4
5043: ST_TO_ADDR
// uc_nation = 1 ;
5044: LD_ADDR_OWVAR 21
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// hc_name =  ;
5052: LD_ADDR_OWVAR 26
5056: PUSH
5057: LD_STRING 
5059: ST_TO_ADDR
// hc_gallery =  ;
5060: LD_ADDR_OWVAR 33
5064: PUSH
5065: LD_STRING 
5067: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5068: LD_INT 0
5070: PPUSH
5071: LD_INT 4
5073: PPUSH
5074: LD_INT 5
5076: PPUSH
5077: LD_INT 8
5079: PPUSH
5080: CALL_OW 12
5084: PPUSH
5085: CALL_OW 380
// un = CreateHuman ;
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: CALL_OW 44
5098: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5099: LD_VAR 0 3
5103: PPUSH
5104: LD_INT 9
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5114: LD_VAR 0 3
5118: PPUSH
5119: LD_INT 53
5121: PPUSH
5122: LD_INT 23
5124: PPUSH
5125: CALL_OW 111
// end ;
5129: GO 5033
5131: POP
5132: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5133: LD_ADDR_VAR 0 2
5137: PUSH
5138: DOUBLE
5139: LD_INT 1
5141: DEC
5142: ST_TO_ADDR
5143: LD_INT 9
5145: PUSH
5146: LD_INT 8
5148: PUSH
5149: LD_INT 7
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: PUSH
5157: LD_OWVAR 67
5161: ARRAY
5162: PUSH
5163: FOR_TO
5164: IFFALSE 5360
// begin uc_side = 4 ;
5166: LD_ADDR_OWVAR 20
5170: PUSH
5171: LD_INT 4
5173: ST_TO_ADDR
// uc_nation = 1 ;
5174: LD_ADDR_OWVAR 21
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// vc_engine = 1 ;
5182: LD_ADDR_OWVAR 39
5186: PUSH
5187: LD_INT 1
5189: ST_TO_ADDR
// vc_control = 1 ;
5190: LD_ADDR_OWVAR 38
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5198: LD_ADDR_OWVAR 40
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 4
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 4
5226: PPUSH
5227: CALL_OW 12
5231: ARRAY
5232: ST_TO_ADDR
// vc_chassis = 4 ;
5233: LD_ADDR_OWVAR 37
5237: PUSH
5238: LD_INT 4
5240: ST_TO_ADDR
// veh = CreateVehicle ;
5241: LD_ADDR_VAR 0 4
5245: PUSH
5246: CALL_OW 45
5250: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5251: LD_VAR 0 4
5255: PPUSH
5256: LD_INT 9
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: CALL_OW 49
// hc_name =  ;
5266: LD_ADDR_OWVAR 26
5270: PUSH
5271: LD_STRING 
5273: ST_TO_ADDR
// hc_gallery =  ;
5274: LD_ADDR_OWVAR 33
5278: PUSH
5279: LD_STRING 
5281: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5282: LD_INT 0
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 5
5290: PPUSH
5291: LD_INT 8
5293: PPUSH
5294: CALL_OW 12
5298: PPUSH
5299: CALL_OW 380
// un = CreateHuman ;
5303: LD_ADDR_VAR 0 3
5307: PUSH
5308: CALL_OW 44
5312: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5313: LD_VAR 0 3
5317: PPUSH
5318: LD_VAR 0 4
5322: PPUSH
5323: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5327: LD_VAR 0 4
5331: PUSH
5332: LD_VAR 0 3
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_INT 53
5343: PPUSH
5344: LD_INT 23
5346: PPUSH
5347: CALL_OW 111
// wait ( 0 0$5 ) ;
5351: LD_INT 175
5353: PPUSH
5354: CALL_OW 67
// end ;
5358: GO 5163
5360: POP
5361: POP
// end ; end_of_file
5362: LD_VAR 0 1
5366: RET
// export function PrepareRussianCommander ; begin
5367: LD_INT 0
5369: PPUSH
// uc_side = 3 ;
5370: LD_ADDR_OWVAR 20
5374: PUSH
5375: LD_INT 3
5377: ST_TO_ADDR
// uc_nation = 3 ;
5378: LD_ADDR_OWVAR 21
5382: PUSH
5383: LD_INT 3
5385: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5386: LD_ADDR_EXP 23
5390: PUSH
5391: LD_STRING Borodin
5393: PPUSH
5394: CALL_OW 25
5398: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5399: LD_EXP 23
5403: PPUSH
5404: LD_INT 25
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: LD_VAR 0 1
5418: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5419: LD_INT 0
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
// for i = 1 to 10 do
5425: LD_ADDR_VAR 0 2
5429: PUSH
5430: DOUBLE
5431: LD_INT 1
5433: DEC
5434: ST_TO_ADDR
5435: LD_INT 10
5437: PUSH
5438: FOR_TO
5439: IFFALSE 5513
// begin uc_side = 6 ;
5441: LD_ADDR_OWVAR 20
5445: PUSH
5446: LD_INT 6
5448: ST_TO_ADDR
// uc_nation = 3 ;
5449: LD_ADDR_OWVAR 21
5453: PUSH
5454: LD_INT 3
5456: ST_TO_ADDR
// hc_gallery =  ;
5457: LD_ADDR_OWVAR 33
5461: PUSH
5462: LD_STRING 
5464: ST_TO_ADDR
// hc_name =  ;
5465: LD_ADDR_OWVAR 26
5469: PUSH
5470: LD_STRING 
5472: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5473: LD_INT 0
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_INT 3
5481: PPUSH
5482: CALL_OW 380
// un = CreateHuman ;
5486: LD_ADDR_VAR 0 3
5490: PUSH
5491: CALL_OW 44
5495: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5496: LD_VAR 0 3
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 0
5506: PPUSH
5507: CALL_OW 49
// end ;
5511: GO 5438
5513: POP
5514: POP
// for i = 1 to 3 do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_INT 3
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5678
// begin uc_side = 6 ;
5531: LD_ADDR_OWVAR 20
5535: PUSH
5536: LD_INT 6
5538: ST_TO_ADDR
// uc_nation = 3 ;
5539: LD_ADDR_OWVAR 21
5543: PUSH
5544: LD_INT 3
5546: ST_TO_ADDR
// vc_engine = 1 ;
5547: LD_ADDR_OWVAR 39
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// vc_control = 1 ;
5555: LD_ADDR_OWVAR 38
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5563: LD_ADDR_OWVAR 40
5567: PUSH
5568: LD_INT 43
5570: PUSH
5571: LD_INT 44
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 1
5580: PPUSH
5581: LD_INT 2
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: ST_TO_ADDR
// vc_chassis = 22 ;
5590: LD_ADDR_OWVAR 37
5594: PUSH
5595: LD_INT 22
5597: ST_TO_ADDR
// veh = CreateVehicle ;
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: CALL_OW 45
5607: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_INT 2
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// hc_gallery =  ;
5623: LD_ADDR_OWVAR 33
5627: PUSH
5628: LD_STRING 
5630: ST_TO_ADDR
// hc_name =  ;
5631: LD_ADDR_OWVAR 26
5635: PUSH
5636: LD_STRING 
5638: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5639: LD_INT 0
5641: PPUSH
5642: LD_INT 3
5644: PPUSH
5645: LD_INT 4
5647: PPUSH
5648: CALL_OW 380
// un = CreateHuman ;
5652: LD_ADDR_VAR 0 3
5656: PUSH
5657: CALL_OW 44
5661: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5662: LD_VAR 0 3
5666: PPUSH
5667: LD_VAR 0 4
5671: PPUSH
5672: CALL_OW 52
// end ;
5676: GO 5528
5678: POP
5679: POP
// end ;
5680: LD_VAR 0 1
5684: RET
// export function PrepareRussians ; var i , un ; begin
5685: LD_INT 0
5687: PPUSH
5688: PPUSH
5689: PPUSH
// for i = 1 to 14 do
5690: LD_ADDR_VAR 0 2
5694: PUSH
5695: DOUBLE
5696: LD_INT 1
5698: DEC
5699: ST_TO_ADDR
5700: LD_INT 14
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5790
// begin uc_side = 3 ;
5706: LD_ADDR_OWVAR 20
5710: PUSH
5711: LD_INT 3
5713: ST_TO_ADDR
// uc_nation = 3 ;
5714: LD_ADDR_OWVAR 21
5718: PUSH
5719: LD_INT 3
5721: ST_TO_ADDR
// hc_gallery =  ;
5722: LD_ADDR_OWVAR 33
5726: PUSH
5727: LD_STRING 
5729: ST_TO_ADDR
// hc_name =  ;
5730: LD_ADDR_OWVAR 26
5734: PUSH
5735: LD_STRING 
5737: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_EXP 24
5748: PPUSH
5749: LD_EXP 25
5753: PPUSH
5754: CALL_OW 12
5758: PPUSH
5759: CALL_OW 380
// un = CreateHuman ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: CALL_OW 44
5772: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_INT 3
5780: PPUSH
5781: LD_INT 0
5783: PPUSH
5784: CALL_OW 49
// end ;
5788: GO 5703
5790: POP
5791: POP
// for i = 1 to 6 do
5792: LD_ADDR_VAR 0 2
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_INT 6
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5892
// begin uc_side = 3 ;
5808: LD_ADDR_OWVAR 20
5812: PUSH
5813: LD_INT 3
5815: ST_TO_ADDR
// uc_nation = 3 ;
5816: LD_ADDR_OWVAR 21
5820: PUSH
5821: LD_INT 3
5823: ST_TO_ADDR
// hc_gallery =  ;
5824: LD_ADDR_OWVAR 33
5828: PUSH
5829: LD_STRING 
5831: ST_TO_ADDR
// hc_name =  ;
5832: LD_ADDR_OWVAR 26
5836: PUSH
5837: LD_STRING 
5839: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5840: LD_INT 0
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: LD_EXP 24
5850: PPUSH
5851: LD_EXP 25
5855: PPUSH
5856: CALL_OW 12
5860: PPUSH
5861: CALL_OW 380
// un = CreateHuman ;
5865: LD_ADDR_VAR 0 3
5869: PUSH
5870: CALL_OW 44
5874: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5875: LD_VAR 0 3
5879: PPUSH
5880: LD_INT 3
5882: PPUSH
5883: LD_INT 0
5885: PPUSH
5886: CALL_OW 49
// end ;
5890: GO 5805
5892: POP
5893: POP
// for i = 1 to 6 do
5894: LD_ADDR_VAR 0 2
5898: PUSH
5899: DOUBLE
5900: LD_INT 1
5902: DEC
5903: ST_TO_ADDR
5904: LD_INT 6
5906: PUSH
5907: FOR_TO
5908: IFFALSE 5994
// begin uc_side = 3 ;
5910: LD_ADDR_OWVAR 20
5914: PUSH
5915: LD_INT 3
5917: ST_TO_ADDR
// uc_nation = 3 ;
5918: LD_ADDR_OWVAR 21
5922: PUSH
5923: LD_INT 3
5925: ST_TO_ADDR
// hc_gallery =  ;
5926: LD_ADDR_OWVAR 33
5930: PUSH
5931: LD_STRING 
5933: ST_TO_ADDR
// hc_name =  ;
5934: LD_ADDR_OWVAR 26
5938: PUSH
5939: LD_STRING 
5941: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5942: LD_INT 0
5944: PPUSH
5945: LD_INT 3
5947: PPUSH
5948: LD_EXP 24
5952: PPUSH
5953: LD_EXP 25
5957: PPUSH
5958: CALL_OW 12
5962: PPUSH
5963: CALL_OW 380
// un = CreateHuman ;
5967: LD_ADDR_VAR 0 3
5971: PUSH
5972: CALL_OW 44
5976: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5977: LD_VAR 0 3
5981: PPUSH
5982: LD_INT 3
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 49
// end ;
5992: GO 5907
5994: POP
5995: POP
// for i = 1 to 4 do
5996: LD_ADDR_VAR 0 2
6000: PUSH
6001: DOUBLE
6002: LD_INT 1
6004: DEC
6005: ST_TO_ADDR
6006: LD_INT 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6096
// begin uc_side = 3 ;
6012: LD_ADDR_OWVAR 20
6016: PUSH
6017: LD_INT 3
6019: ST_TO_ADDR
// uc_nation = 3 ;
6020: LD_ADDR_OWVAR 21
6024: PUSH
6025: LD_INT 3
6027: ST_TO_ADDR
// hc_gallery =  ;
6028: LD_ADDR_OWVAR 33
6032: PUSH
6033: LD_STRING 
6035: ST_TO_ADDR
// hc_name =  ;
6036: LD_ADDR_OWVAR 26
6040: PUSH
6041: LD_STRING 
6043: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6044: LD_INT 0
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: LD_EXP 24
6054: PPUSH
6055: LD_EXP 25
6059: PPUSH
6060: CALL_OW 12
6064: PPUSH
6065: CALL_OW 380
// un = CreateHuman ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: CALL_OW 44
6078: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6079: LD_VAR 0 3
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: LD_INT 0
6089: PPUSH
6090: CALL_OW 49
// end ;
6094: GO 6009
6096: POP
6097: POP
// end ; end_of_file
6098: LD_VAR 0 1
6102: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
// if exist_mode then
6107: LD_VAR 0 2
6111: IFFALSE 6130
// unit := CreateCharacter ( ident ) else
6113: LD_ADDR_VAR 0 4
6117: PUSH
6118: LD_VAR 0 1
6122: PPUSH
6123: CALL_OW 34
6127: ST_TO_ADDR
6128: GO 6145
// unit := NewCharacter ( ident ) ;
6130: LD_ADDR_VAR 0 4
6134: PUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: CALL_OW 25
6144: ST_TO_ADDR
// result := unit ;
6145: LD_ADDR_VAR 0 3
6149: PUSH
6150: LD_VAR 0 4
6154: ST_TO_ADDR
// end ;
6155: LD_VAR 0 3
6159: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6160: LD_INT 0
6162: PPUSH
6163: PPUSH
6164: PPUSH
// rnd = rand ( 1 , characters ) ;
6165: LD_ADDR_VAR 0 6
6169: PUSH
6170: LD_INT 1
6172: PPUSH
6173: LD_VAR 0 1
6177: PPUSH
6178: CALL_OW 12
6182: ST_TO_ADDR
// for i = 1 to characters do
6183: LD_ADDR_VAR 0 5
6187: PUSH
6188: DOUBLE
6189: LD_INT 1
6191: DEC
6192: ST_TO_ADDR
6193: LD_VAR 0 1
6197: PUSH
6198: FOR_TO
6199: IFFALSE 6309
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6201: LD_VAR 0 5
6205: PUSH
6206: LD_VAR 0 6
6210: EQUAL
6211: PUSH
6212: LD_VAR 0 1
6216: PUSH
6217: LD_VAR 0 5
6221: ARRAY
6222: PPUSH
6223: CALL_OW 258
6227: PUSH
6228: LD_INT 1
6230: EQUAL
6231: AND
6232: IFFALSE 6254
// Say ( characters [ i ] , dialogMID ) ;
6234: LD_VAR 0 1
6238: PUSH
6239: LD_VAR 0 5
6243: ARRAY
6244: PPUSH
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6254: LD_VAR 0 5
6258: PUSH
6259: LD_VAR 0 6
6263: EQUAL
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: LD_VAR 0 5
6274: ARRAY
6275: PPUSH
6276: CALL_OW 258
6280: PUSH
6281: LD_INT 2
6283: EQUAL
6284: AND
6285: IFFALSE 6307
// Say ( characters [ i ] , dialogFID ) ;
6287: LD_VAR 0 1
6291: PUSH
6292: LD_VAR 0 5
6296: ARRAY
6297: PPUSH
6298: LD_VAR 0 3
6302: PPUSH
6303: CALL_OW 88
// end ;
6307: GO 6198
6309: POP
6310: POP
// end ;
6311: LD_VAR 0 4
6315: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
// uc_side := GetSide ( b ) ;
6321: LD_ADDR_OWVAR 20
6325: PUSH
6326: LD_VAR 0 2
6330: PPUSH
6331: CALL_OW 255
6335: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6336: LD_ADDR_OWVAR 21
6340: PUSH
6341: LD_VAR 0 2
6345: PPUSH
6346: CALL_OW 248
6350: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6366: LD_ADDR_VAR 0 5
6370: PUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 254
6380: PUSH
6381: LD_INT 3
6383: MINUS
6384: ST_TO_ADDR
// if dir < 0 then
6385: LD_VAR 0 5
6389: PUSH
6390: LD_INT 0
6392: LESS
6393: IFFALSE 6409
// dir := 6 + dir ;
6395: LD_ADDR_VAR 0 5
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: LD_VAR 0 5
6407: PLUS
6408: ST_TO_ADDR
// un := CreateHuman ;
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: CALL_OW 44
6418: ST_TO_ADDR
// SetDir ( un , dir ) ;
6419: LD_VAR 0 4
6423: PPUSH
6424: LD_VAR 0 5
6428: PPUSH
6429: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6433: LD_VAR 0 4
6437: PPUSH
6438: LD_VAR 0 2
6442: PPUSH
6443: CALL_OW 52
// end ;
6447: LD_VAR 0 3
6451: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
6456: PPUSH
6457: PPUSH
// for i = 1 to count do
6458: LD_ADDR_VAR 0 8
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_VAR 0 6
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6555
// begin uc_side = side ;
6476: LD_ADDR_OWVAR 20
6480: PUSH
6481: LD_VAR 0 1
6485: ST_TO_ADDR
// uc_nation = nation ;
6486: LD_ADDR_OWVAR 21
6490: PUSH
6491: LD_VAR 0 2
6495: ST_TO_ADDR
// hc_gallery =  ;
6496: LD_ADDR_OWVAR 33
6500: PUSH
6501: LD_STRING 
6503: ST_TO_ADDR
// hc_name =  ;
6504: LD_ADDR_OWVAR 26
6508: PUSH
6509: LD_STRING 
6511: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6512: LD_INT 0
6514: PPUSH
6515: LD_VAR 0 5
6519: PPUSH
6520: LD_VAR 0 4
6524: PPUSH
6525: CALL_OW 380
// un = CreateHuman ;
6529: LD_ADDR_VAR 0 10
6533: PUSH
6534: CALL_OW 44
6538: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6539: LD_VAR 0 10
6543: PPUSH
6544: LD_VAR 0 3
6548: PPUSH
6549: CALL_OW 52
// end ;
6553: GO 6473
6555: POP
6556: POP
// end ;
6557: LD_VAR 0 7
6561: RET
// export function PrepareDifficulty ; begin
6562: LD_INT 0
6564: PPUSH
// if Difficulty = 1 then
6565: LD_OWVAR 67
6569: PUSH
6570: LD_INT 1
6572: EQUAL
6573: IFFALSE 6591
// begin RuSolMinLevel = 4 ;
6575: LD_ADDR_EXP 24
6579: PUSH
6580: LD_INT 4
6582: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6583: LD_ADDR_EXP 25
6587: PUSH
6588: LD_INT 6
6590: ST_TO_ADDR
// end ; if Difficulty = 2 then
6591: LD_OWVAR 67
6595: PUSH
6596: LD_INT 2
6598: EQUAL
6599: IFFALSE 6669
// begin RuSolMinLevel = 5 ;
6601: LD_ADDR_EXP 24
6605: PUSH
6606: LD_INT 5
6608: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6609: LD_ADDR_EXP 25
6613: PUSH
6614: LD_INT 6
6616: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6617: LD_INT 51
6619: PPUSH
6620: LD_INT 3
6622: PPUSH
6623: LD_INT 1
6625: PPUSH
6626: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6630: LD_INT 57
6632: PPUSH
6633: LD_INT 3
6635: PPUSH
6636: LD_INT 1
6638: PPUSH
6639: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6643: LD_INT 57
6645: PPUSH
6646: LD_INT 6
6648: PPUSH
6649: LD_INT 2
6651: PPUSH
6652: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6656: LD_INT 51
6658: PPUSH
6659: LD_INT 6
6661: PPUSH
6662: LD_INT 2
6664: PPUSH
6665: CALL_OW 322
// end ; if Difficulty = 3 then
6669: LD_OWVAR 67
6673: PUSH
6674: LD_INT 3
6676: EQUAL
6677: IFFALSE 6760
// begin RuSolMinLevel = 5 ;
6679: LD_ADDR_EXP 24
6683: PUSH
6684: LD_INT 5
6686: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6687: LD_ADDR_EXP 25
6691: PUSH
6692: LD_INT 6
6694: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6695: LD_INT 57
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 1
6703: PPUSH
6704: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6708: LD_INT 51
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6721: LD_INT 52
6723: PPUSH
6724: LD_INT 3
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6734: LD_INT 57
6736: PPUSH
6737: LD_INT 6
6739: PPUSH
6740: LD_INT 2
6742: PPUSH
6743: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6747: LD_INT 52
6749: PPUSH
6750: LD_INT 6
6752: PPUSH
6753: LD_INT 2
6755: PPUSH
6756: CALL_OW 322
// end ; end ;
6760: LD_VAR 0 1
6764: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
6769: PPUSH
6770: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6771: LD_ADDR_VAR 0 3
6775: PUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 25
6788: PUSH
6789: LD_INT 2
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6805: LD_ADDR_VAR 0 4
6809: PUSH
6810: LD_INT 4
6812: PUSH
6813: LD_INT 75
6815: PUSH
6816: LD_INT 79
6818: PUSH
6819: LD_INT 2
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 4
6830: PUSH
6831: LD_INT 113
6833: PUSH
6834: LD_INT 94
6836: PUSH
6837: LD_INT 4
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 29
6848: PUSH
6849: LD_INT 106
6851: PUSH
6852: LD_INT 97
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 26
6866: PUSH
6867: LD_INT 93
6869: PUSH
6870: LD_INT 97
6872: PUSH
6873: LD_INT 5
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: LD_INT 100
6887: PUSH
6888: LD_INT 89
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 17
6902: PUSH
6903: LD_INT 96
6905: PUSH
6906: LD_INT 89
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 32
6920: PUSH
6921: LD_INT 78
6923: PUSH
6924: LD_INT 94
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 32
6938: PUSH
6939: LD_INT 95
6941: PUSH
6942: LD_INT 82
6944: PUSH
6945: LD_INT 3
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 32
6956: PUSH
6957: LD_INT 104
6959: PUSH
6960: LD_INT 85
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 32
6974: PUSH
6975: LD_INT 81
6977: PUSH
6978: LD_INT 78
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 33
6992: PUSH
6993: LD_INT 109
6995: PUSH
6996: LD_INT 90
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 33
7010: PUSH
7011: LD_INT 88
7013: PUSH
7014: LD_INT 79
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 33
7028: PUSH
7029: LD_INT 76
7031: PUSH
7032: LD_INT 87
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 26
7046: PUSH
7047: LD_INT 96
7049: PUSH
7050: LD_INT 97
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 85
7067: PUSH
7068: LD_INT 84
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 6
7082: PUSH
7083: LD_INT 88
7085: PUSH
7086: LD_INT 95
7088: PUSH
7089: LD_INT 0
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 19
7100: PUSH
7101: LD_INT 103
7103: PUSH
7104: LD_INT 89
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 16
7118: PUSH
7119: LD_INT 97
7121: PUSH
7122: LD_INT 86
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 24
7136: PUSH
7137: LD_INT 100
7139: PUSH
7140: LD_INT 85
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: ST_TO_ADDR
// for i := 1 to buildingsTab do
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: DOUBLE
7179: LD_INT 1
7181: DEC
7182: ST_TO_ADDR
7183: LD_VAR 0 4
7187: PUSH
7188: FOR_TO
7189: IFFALSE 7262
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7191: LD_VAR 0 3
7195: PPUSH
7196: LD_VAR 0 4
7200: PUSH
7201: LD_VAR 0 2
7205: ARRAY
7206: PUSH
7207: LD_INT 1
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 4
7215: PUSH
7216: LD_VAR 0 2
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PPUSH
7226: LD_VAR 0 4
7230: PUSH
7231: LD_VAR 0 2
7235: ARRAY
7236: PUSH
7237: LD_INT 3
7239: ARRAY
7240: PPUSH
7241: LD_VAR 0 4
7245: PUSH
7246: LD_VAR 0 2
7250: ARRAY
7251: PUSH
7252: LD_INT 4
7254: ARRAY
7255: PPUSH
7256: CALL_OW 205
7260: GO 7188
7262: POP
7263: POP
// end ;
7264: LD_VAR 0 1
7268: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
// for i in charactersList do
7273: LD_ADDR_VAR 0 4
7277: PUSH
7278: LD_VAR 0 1
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7313
// begin if IsOk ( i ) then
7286: LD_VAR 0 4
7290: PPUSH
7291: CALL_OW 302
7295: IFFALSE 7311
// SaveCharacters ( i , ident ) ;
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: CALL_OW 38
// end ;
7311: GO 7283
7313: POP
7314: POP
// end ;
7315: LD_VAR 0 3
7319: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7320: LD_INT 0
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// for i = 1 to 72 do
7326: LD_ADDR_VAR 0 5
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_INT 72
7338: PUSH
7339: FOR_TO
7340: IFFALSE 7398
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7342: LD_VAR 0 5
7346: PPUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 321
7356: PUSH
7357: LD_INT 1
7359: EQUAL
7360: PUSH
7361: LD_VAR 0 5
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: CALL_OW 482
7375: PUSH
7376: LD_INT 1
7378: EQUAL
7379: AND
7380: IFFALSE 7396
// AddComResearch ( lab , i ) ;
7382: LD_VAR 0 2
7386: PPUSH
7387: LD_VAR 0 5
7391: PPUSH
7392: CALL_OW 184
7396: GO 7339
7398: POP
7399: POP
// end ;
7400: LD_VAR 0 4
7404: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7415: LD_ADDR_VAR 0 6
7419: PUSH
7420: LD_VAR 0 2
7424: PPUSH
7425: LD_INT 22
7427: PUSH
7428: LD_VAR 0 1
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 56
7439: PUSH
7440: EMPTY
7441: LIST
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: LD_INT 700
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 3
7455: PUSH
7456: LD_INT 60
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 5
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 8
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 9
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 70
7527: PUSH
7528: LD_EXP 23
7532: PUSH
7533: EMPTY
7534: LIST
7535: DIFF
7536: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7537: LD_ADDR_VAR 0 7
7541: PUSH
7542: LD_VAR 0 2
7546: PPUSH
7547: LD_INT 22
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 30
7561: PUSH
7562: LD_INT 32
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 58
7571: PUSH
7572: EMPTY
7573: LIST
7574: PUSH
7575: LD_INT 24
7577: PUSH
7578: LD_INT 251
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 70
7595: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7596: LD_ADDR_VAR 0 9
7600: PUSH
7601: LD_VAR 0 2
7605: PPUSH
7606: LD_INT 22
7608: PUSH
7609: LD_VAR 0 1
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: LD_INT 30
7623: PUSH
7624: LD_INT 4
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 30
7633: PUSH
7634: LD_INT 5
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 24
7648: PUSH
7649: LD_INT 251
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 70
7665: ST_TO_ADDR
// if barrackList > 0 then
7666: LD_VAR 0 9
7670: PUSH
7671: LD_INT 0
7673: GREATER
7674: IFFALSE 7822
// begin if turretList = 0 then
7676: LD_VAR 0 7
7680: PUSH
7681: LD_INT 0
7683: EQUAL
7684: IFFALSE 7726
// begin if soldiers_list > 0 then
7686: LD_VAR 0 6
7690: PUSH
7691: LD_INT 0
7693: GREATER
7694: IFFALSE 7724
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
7696: LD_VAR 0 6
7700: PPUSH
7701: LD_VAR 0 9
7705: PUSH
7706: LD_INT 1
7708: PPUSH
7709: LD_VAR 0 9
7713: PPUSH
7714: CALL_OW 12
7718: ARRAY
7719: PPUSH
7720: CALL_OW 120
// end else
7724: GO 7822
// begin for i in barrackList do
7726: LD_ADDR_VAR 0 4
7730: PUSH
7731: LD_VAR 0 9
7735: PUSH
7736: FOR_IN
7737: IFFALSE 7820
// begin insideUnits = UnitsInside ( i ) ;
7739: LD_ADDR_VAR 0 10
7743: PUSH
7744: LD_VAR 0 4
7748: PPUSH
7749: CALL_OW 313
7753: ST_TO_ADDR
// if insideUnits > 0 then
7754: LD_VAR 0 10
7758: PUSH
7759: LD_INT 0
7761: GREATER
7762: IFFALSE 7786
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
7764: LD_VAR 0 10
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PPUSH
7773: LD_VAR 0 7
7777: PUSH
7778: LD_INT 1
7780: ARRAY
7781: PPUSH
7782: CALL_OW 120
// if soldiers_list > 0 then
7786: LD_VAR 0 6
7790: PUSH
7791: LD_INT 0
7793: GREATER
7794: IFFALSE 7818
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
7796: LD_VAR 0 6
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 7
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: CALL_OW 120
// end ;
7818: GO 7736
7820: POP
7821: POP
// end ; end ; end ;
7822: LD_VAR 0 3
7826: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
7831: PPUSH
7832: PPUSH
7833: PPUSH
7834: PPUSH
// for i = 1 to infantryCount do
7835: LD_ADDR_VAR 0 8
7839: PUSH
7840: DOUBLE
7841: LD_INT 1
7843: DEC
7844: ST_TO_ADDR
7845: LD_VAR 0 5
7849: PUSH
7850: FOR_TO
7851: IFFALSE 7967
// begin uc_side = side ;
7853: LD_ADDR_OWVAR 20
7857: PUSH
7858: LD_VAR 0 1
7862: ST_TO_ADDR
// uc_nation = nation ;
7863: LD_ADDR_OWVAR 21
7867: PUSH
7868: LD_VAR 0 3
7872: ST_TO_ADDR
// hc_class = 1 ;
7873: LD_ADDR_OWVAR 28
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// hc_name =  ;
7881: LD_ADDR_OWVAR 26
7885: PUSH
7886: LD_STRING 
7888: ST_TO_ADDR
// hc_gallery =  ;
7889: LD_ADDR_OWVAR 33
7893: PUSH
7894: LD_STRING 
7896: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7897: LD_INT 0
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: LD_EXP 24
7907: PPUSH
7908: LD_EXP 25
7912: PPUSH
7913: CALL_OW 12
7917: PPUSH
7918: CALL_OW 380
// un = CreateHuman ;
7922: LD_ADDR_VAR 0 10
7926: PUSH
7927: CALL_OW 44
7931: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7932: LD_VAR 0 10
7936: PPUSH
7937: LD_VAR 0 2
7941: PPUSH
7942: LD_INT 0
7944: PPUSH
7945: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7949: LD_ADDR_EXP 31
7953: PUSH
7954: LD_EXP 31
7958: PUSH
7959: LD_VAR 0 10
7963: ADD
7964: ST_TO_ADDR
// end ;
7965: GO 7850
7967: POP
7968: POP
// for i = 1 to vehCount do
7969: LD_ADDR_VAR 0 8
7973: PUSH
7974: DOUBLE
7975: LD_INT 1
7977: DEC
7978: ST_TO_ADDR
7979: LD_VAR 0 6
7983: PUSH
7984: FOR_TO
7985: IFFALSE 8192
// begin uc_side = side ;
7987: LD_ADDR_OWVAR 20
7991: PUSH
7992: LD_VAR 0 1
7996: ST_TO_ADDR
// uc_nation = nation ;
7997: LD_ADDR_OWVAR 21
8001: PUSH
8002: LD_VAR 0 3
8006: ST_TO_ADDR
// vc_Chassis = 22 ;
8007: LD_ADDR_OWVAR 37
8011: PUSH
8012: LD_INT 22
8014: ST_TO_ADDR
// vc_engine = 1 ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// vc_control = 1 ;
8023: LD_ADDR_OWVAR 38
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8031: LD_ADDR_OWVAR 40
8035: PUSH
8036: LD_INT 43
8038: PUSH
8039: LD_INT 44
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: CALL_OW 12
8056: ARRAY
8057: ST_TO_ADDR
// veh = CreateVehicle ;
8058: LD_ADDR_VAR 0 12
8062: PUSH
8063: CALL_OW 45
8067: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8068: LD_VAR 0 12
8072: PPUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8085: LD_ADDR_EXP 31
8089: PUSH
8090: LD_EXP 31
8094: PUSH
8095: LD_VAR 0 12
8099: ADD
8100: ST_TO_ADDR
// hc_class = 3 ;
8101: LD_ADDR_OWVAR 28
8105: PUSH
8106: LD_INT 3
8108: ST_TO_ADDR
// hc_name =  ;
8109: LD_ADDR_OWVAR 26
8113: PUSH
8114: LD_STRING 
8116: ST_TO_ADDR
// hc_gallery =  ;
8117: LD_ADDR_OWVAR 33
8121: PUSH
8122: LD_STRING 
8124: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8125: LD_INT 0
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: LD_EXP 24
8135: PPUSH
8136: LD_EXP 25
8140: PPUSH
8141: CALL_OW 12
8145: PPUSH
8146: CALL_OW 380
// un = CreateHuman ;
8150: LD_ADDR_VAR 0 10
8154: PUSH
8155: CALL_OW 44
8159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8160: LD_VAR 0 10
8164: PPUSH
8165: LD_VAR 0 12
8169: PPUSH
8170: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8174: LD_ADDR_EXP 31
8178: PUSH
8179: LD_EXP 31
8183: PUSH
8184: LD_VAR 0 10
8188: ADD
8189: ST_TO_ADDR
// end ;
8190: GO 7984
8192: POP
8193: POP
// end ;
8194: LD_VAR 0 7
8198: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8199: LD_INT 0
8201: PPUSH
8202: PPUSH
8203: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8204: LD_VAR 0 2
8208: PPUSH
8209: LD_INT 22
8211: PUSH
8212: LD_VAR 0 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: PPUSH
8224: CALL_OW 70
8228: PUSH
8229: LD_INT 0
8231: EQUAL
8232: PUSH
8233: LD_EXP 31
8237: PUSH
8238: LD_INT 0
8240: GREATER
8241: AND
8242: IFFALSE 8271
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8244: LD_EXP 31
8248: PPUSH
8249: LD_INT 65
8251: PPUSH
8252: LD_INT 68
8254: PPUSH
8255: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8259: LD_EXP 31
8263: PPUSH
8264: LD_INT 100
8266: PPUSH
8267: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8271: LD_VAR 0 2
8275: PPUSH
8276: LD_INT 22
8278: PUSH
8279: LD_VAR 0 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: PPUSH
8291: CALL_OW 70
8295: PUSH
8296: LD_INT 0
8298: GREATER
8299: PUSH
8300: LD_EXP 31
8304: PUSH
8305: LD_INT 0
8307: GREATER
8308: AND
8309: IFFALSE 8388
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8311: LD_EXP 31
8315: PPUSH
8316: LD_VAR 0 2
8320: PPUSH
8321: LD_INT 22
8323: PUSH
8324: LD_VAR 0 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: PPUSH
8336: CALL_OW 70
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PPUSH
8345: CALL_OW 250
8349: PPUSH
8350: LD_VAR 0 2
8354: PPUSH
8355: LD_INT 22
8357: PUSH
8358: LD_VAR 0 1
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: PPUSH
8370: CALL_OW 70
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 251
8383: PPUSH
8384: CALL_OW 114
// end ;
8388: LD_VAR 0 3
8392: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8393: LD_INT 0
8395: PPUSH
8396: PPUSH
8397: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8398: LD_INT 22
8400: PUSH
8401: LD_VAR 0 1
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 21
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PPUSH
8424: CALL_OW 69
8428: PUSH
8429: LD_VAR 0 3
8433: LESSEQUAL
8434: IFFALSE 8542
// begin for i = 1 to vehCount do
8436: LD_ADDR_VAR 0 9
8440: PUSH
8441: DOUBLE
8442: LD_INT 1
8444: DEC
8445: ST_TO_ADDR
8446: LD_VAR 0 3
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8540
// begin weapon = weaponTab [ i ] ;
8454: LD_ADDR_VAR 0 10
8458: PUSH
8459: LD_VAR 0 4
8463: PUSH
8464: LD_VAR 0 9
8468: ARRAY
8469: ST_TO_ADDR
// if weapon = 46 then
8470: LD_VAR 0 10
8474: PUSH
8475: LD_INT 46
8477: EQUAL
8478: IFFALSE 8509
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8480: LD_VAR 0 2
8484: PPUSH
8485: LD_INT 24
8487: PPUSH
8488: LD_VAR 0 5
8492: PPUSH
8493: LD_VAR 0 6
8497: PPUSH
8498: LD_VAR 0 10
8502: PPUSH
8503: CALL_OW 185
// end else
8507: GO 8538
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8509: LD_VAR 0 2
8513: PPUSH
8514: LD_VAR 0 7
8518: PPUSH
8519: LD_VAR 0 5
8523: PPUSH
8524: LD_VAR 0 6
8528: PPUSH
8529: LD_VAR 0 10
8533: PPUSH
8534: CALL_OW 185
// end ; end ;
8538: GO 8451
8540: POP
8541: POP
// end ; end ;
8542: LD_VAR 0 8
8546: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8553: LD_ADDR_VAR 0 8
8557: PUSH
8558: LD_INT 22
8560: PUSH
8561: LD_VAR 0 1
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 21
8572: PUSH
8573: LD_INT 2
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 24
8585: PUSH
8586: LD_INT 650
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: PPUSH
8602: CALL_OW 69
8606: ST_TO_ADDR
// if damageVehicles > 0 then
8607: LD_VAR 0 8
8611: PUSH
8612: LD_INT 0
8614: GREATER
8615: IFFALSE 8636
// ComMoveXY ( damageVehicles , repX , repY ) ;
8617: LD_VAR 0 8
8621: PPUSH
8622: LD_VAR 0 3
8626: PPUSH
8627: LD_VAR 0 4
8631: PPUSH
8632: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
8636: LD_VAR 0 8
8640: PPUSH
8641: LD_INT 95
8643: PUSH
8644: LD_VAR 0 2
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 3
8655: PUSH
8656: LD_INT 58
8658: PUSH
8659: EMPTY
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PPUSH
8670: CALL_OW 72
8674: PUSH
8675: LD_INT 0
8677: GREATER
8678: IFFALSE 8745
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
8680: LD_ADDR_VAR 0 6
8684: PUSH
8685: LD_VAR 0 8
8689: PPUSH
8690: LD_INT 95
8692: PUSH
8693: LD_VAR 0 2
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 58
8707: PUSH
8708: EMPTY
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 72
8723: PUSH
8724: FOR_IN
8725: IFFALSE 8743
// ComExitVehicle ( UnitsInside ( i ) ) ;
8727: LD_VAR 0 6
8731: PPUSH
8732: CALL_OW 313
8736: PPUSH
8737: CALL_OW 121
8741: GO 8724
8743: POP
8744: POP
// end ;
8745: LD_VAR 0 5
8749: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8759: LD_ADDR_VAR 0 8
8763: PUSH
8764: LD_INT 22
8766: PUSH
8767: LD_VAR 0 1
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 21
8778: PUSH
8779: LD_INT 2
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 24
8788: PUSH
8789: LD_INT 250
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 3
8798: PUSH
8799: LD_INT 58
8801: PUSH
8802: EMPTY
8803: LIST
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 34
8810: PUSH
8811: LD_INT 43
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 34
8820: PUSH
8821: LD_INT 44
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 34
8830: PUSH
8831: LD_INT 46
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
8860: LD_INT 22
8862: PUSH
8863: LD_VAR 0 1
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 21
8874: PUSH
8875: LD_INT 2
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 24
8884: PUSH
8885: LD_INT 1000
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 3
8894: PUSH
8895: LD_INT 58
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: LD_INT 2
8903: PUSH
8904: LD_INT 34
8906: PUSH
8907: LD_INT 43
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 34
8916: PUSH
8917: LD_INT 44
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 34
8926: PUSH
8927: LD_INT 46
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 69
8955: PUSH
8956: LD_INT 5
8958: PUSH
8959: LD_INT 6
8961: PUSH
8962: LD_INT 7
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_OWVAR 67
8974: ARRAY
8975: GREATEREQUAL
8976: IFFALSE 9541
// repeat wait ( 0 0$1 ) ;
8978: LD_INT 35
8980: PPUSH
8981: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8985: LD_ADDR_VAR 0 8
8989: PUSH
8990: LD_INT 22
8992: PUSH
8993: LD_VAR 0 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 2
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 24
9014: PUSH
9015: LD_INT 250
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 3
9024: PUSH
9025: LD_INT 58
9027: PUSH
9028: EMPTY
9029: LIST
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: LD_INT 34
9036: PUSH
9037: LD_INT 43
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 34
9046: PUSH
9047: LD_INT 44
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 34
9056: PUSH
9057: LD_INT 46
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 69
9085: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 95
9100: PUSH
9101: LD_VAR 0 2
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PPUSH
9114: CALL_OW 69
9118: NOT
9119: PUSH
9120: LD_VAR 0 11
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: AND
9129: IFFALSE 9184
// for i := 1 to wayX do
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: DOUBLE
9137: LD_INT 1
9139: DEC
9140: ST_TO_ADDR
9141: LD_VAR 0 3
9145: PUSH
9146: FOR_TO
9147: IFFALSE 9182
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9149: LD_VAR 0 8
9153: PPUSH
9154: LD_VAR 0 3
9158: PUSH
9159: LD_VAR 0 6
9163: ARRAY
9164: PPUSH
9165: LD_VAR 0 4
9169: PUSH
9170: LD_VAR 0 6
9174: ARRAY
9175: PPUSH
9176: CALL_OW 114
9180: GO 9146
9182: POP
9183: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9184: LD_INT 22
9186: PUSH
9187: LD_VAR 0 1
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 95
9198: PUSH
9199: LD_VAR 0 2
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PPUSH
9212: CALL_OW 69
9216: IFFALSE 9440
// begin seeEnemy = 1 ;
9218: LD_ADDR_VAR 0 11
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// for j in vehiclesOK do
9226: LD_ADDR_VAR 0 7
9230: PUSH
9231: LD_VAR 0 8
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9438
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9239: LD_ADDR_VAR 0 9
9243: PUSH
9244: LD_INT 81
9246: PUSH
9247: LD_VAR 0 1
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 101
9258: PUSH
9259: LD_INT 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL_OW 69
9274: PPUSH
9275: LD_VAR 0 7
9279: PPUSH
9280: CALL_OW 74
9284: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9285: LD_ADDR_VAR 0 10
9289: PUSH
9290: LD_INT 81
9292: PUSH
9293: LD_VAR 0 1
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 101
9304: PUSH
9305: LD_INT 1
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: LD_INT 59
9317: PUSH
9318: EMPTY
9319: LIST
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 1
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: LD_INT 21
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: PPUSH
9355: CALL_OW 69
9359: PPUSH
9360: LD_VAR 0 7
9364: PPUSH
9365: CALL_OW 74
9369: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9370: LD_VAR 0 7
9374: PPUSH
9375: LD_VAR 0 9
9379: PPUSH
9380: CALL_OW 296
9384: PUSH
9385: LD_INT 8
9387: PLUS
9388: PUSH
9389: LD_VAR 0 7
9393: PPUSH
9394: LD_VAR 0 10
9398: PPUSH
9399: CALL_OW 296
9403: LESS
9404: IFFALSE 9422
// ComAttackUnit ( j , target1 ) else
9406: LD_VAR 0 7
9410: PPUSH
9411: LD_VAR 0 9
9415: PPUSH
9416: CALL_OW 115
9420: GO 9436
// ComAttackUnit ( j , target2 ) ;
9422: LD_VAR 0 7
9426: PPUSH
9427: LD_VAR 0 10
9431: PPUSH
9432: CALL_OW 115
// end ;
9436: GO 9236
9438: POP
9439: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
9440: LD_INT 22
9442: PUSH
9443: LD_VAR 0 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 2
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 24
9464: PUSH
9465: LD_INT 1000
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: LD_INT 58
9477: PUSH
9478: EMPTY
9479: LIST
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 34
9486: PUSH
9487: LD_INT 43
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 34
9496: PUSH
9497: LD_INT 44
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 34
9506: PUSH
9507: LD_INT 46
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PPUSH
9531: CALL_OW 69
9535: PUSH
9536: LD_INT 0
9538: EQUAL
9539: IFFALSE 8978
// seeEnemy = 0 ;
9541: LD_ADDR_VAR 0 11
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 5
9553: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
9562: LD_ADDR_VAR 0 8
9566: PUSH
9567: LD_VAR 0 2
9571: PPUSH
9572: CALL_OW 313
9576: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
9577: LD_ADDR_VAR 0 9
9581: PUSH
9582: LD_VAR 0 3
9586: PPUSH
9587: LD_INT 22
9589: PUSH
9590: LD_VAR 0 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 24
9611: PUSH
9612: LD_INT 750
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 3
9621: PUSH
9622: LD_INT 54
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 70
9642: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9643: LD_ADDR_VAR 0 6
9647: PUSH
9648: LD_VAR 0 3
9652: PPUSH
9653: LD_INT 22
9655: PUSH
9656: LD_VAR 0 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 21
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: LD_INT 24
9680: PUSH
9681: LD_INT 1000
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: PPUSH
9700: CALL_OW 70
9704: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9705: LD_VAR 0 6
9709: NOT
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_VAR 0 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 2
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 250
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 69
9752: NOT
9753: AND
9754: IFFALSE 9758
// exit ;
9756: GO 9940
// if buildings_list > 0 and engineerOkInside then
9758: LD_VAR 0 6
9762: PUSH
9763: LD_INT 0
9765: GREATER
9766: PUSH
9767: LD_VAR 0 8
9771: AND
9772: IFFALSE 9783
// ComExitBuilding ( engineerOkInside ) ;
9774: LD_VAR 0 8
9778: PPUSH
9779: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9783: LD_VAR 0 6
9787: PUSH
9788: LD_INT 0
9790: GREATER
9791: PUSH
9792: LD_VAR 0 9
9796: PUSH
9797: LD_INT 0
9799: GREATER
9800: AND
9801: IFFALSE 9821
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9803: LD_VAR 0 9
9807: PPUSH
9808: LD_VAR 0 6
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9821: LD_VAR 0 6
9825: PUSH
9826: LD_INT 0
9828: EQUAL
9829: PUSH
9830: LD_VAR 0 4
9834: PUSH
9835: LD_INT 0
9837: EQUAL
9838: AND
9839: PUSH
9840: LD_VAR 0 9
9844: PUSH
9845: LD_INT 0
9847: GREATER
9848: AND
9849: IFFALSE 9865
// ComEnterUnit ( engineerOkOutside , building ) ;
9851: LD_VAR 0 9
9855: PPUSH
9856: LD_VAR 0 2
9860: PPUSH
9861: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9865: LD_VAR 0 9
9869: PUSH
9870: LD_INT 0
9872: GREATER
9873: PUSH
9874: LD_VAR 0 6
9878: PUSH
9879: LD_INT 0
9881: EQUAL
9882: AND
9883: PUSH
9884: LD_VAR 0 4
9888: PUSH
9889: LD_INT 0
9891: GREATER
9892: AND
9893: IFFALSE 9940
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9895: LD_VAR 0 9
9899: PPUSH
9900: LD_VAR 0 4
9904: PUSH
9905: LD_INT 1
9907: ARRAY
9908: PPUSH
9909: LD_VAR 0 4
9913: PUSH
9914: LD_INT 2
9916: ARRAY
9917: PPUSH
9918: LD_VAR 0 4
9922: PUSH
9923: LD_INT 3
9925: ARRAY
9926: PPUSH
9927: LD_VAR 0 4
9931: PUSH
9932: LD_INT 4
9934: ARRAY
9935: PPUSH
9936: CALL_OW 145
// end ;
9940: LD_VAR 0 5
9944: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
9945: LD_INT 0
9947: PPUSH
9948: PPUSH
9949: PPUSH
9950: PPUSH
9951: PPUSH
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
9956: LD_ADDR_VAR 0 6
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_VAR 0 1
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 25
9975: PUSH
9976: LD_INT 4
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 23
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: LD_INT 251
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PPUSH
10009: CALL_OW 69
10013: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10014: LD_ADDR_VAR 0 7
10018: PUSH
10019: LD_VAR 0 3
10023: PPUSH
10024: LD_INT 22
10026: PUSH
10027: LD_VAR 0 1
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 23
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 4
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 50
10058: PUSH
10059: EMPTY
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: PPUSH
10068: CALL_OW 70
10072: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10073: LD_ADDR_VAR 0 10
10077: PUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: LD_INT 22
10085: PUSH
10086: LD_VAR 0 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 21
10097: PUSH
10098: LD_INT 1
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 3
10107: PUSH
10108: LD_INT 25
10110: PUSH
10111: LD_INT 3
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 3
10124: PUSH
10125: LD_INT 24
10127: PUSH
10128: LD_INT 750
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 70
10149: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10150: LD_ADDR_VAR 0 11
10154: PUSH
10155: LD_VAR 0 2
10159: PPUSH
10160: LD_INT 22
10162: PUSH
10163: LD_VAR 0 1
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 21
10174: PUSH
10175: LD_INT 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 3
10184: PUSH
10185: LD_INT 25
10187: PUSH
10188: LD_INT 3
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 3
10201: PUSH
10202: LD_INT 24
10204: PUSH
10205: LD_INT 1000
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL_OW 70
10226: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10227: LD_VAR 0 10
10231: NOT
10232: PUSH
10233: LD_VAR 0 11
10237: NOT
10238: AND
10239: PUSH
10240: LD_VAR 0 6
10244: NOT
10245: AND
10246: IFFALSE 10250
// exit ;
10248: GO 10484
// if damageUnits > 0 and sci_list > 0 then
10250: LD_VAR 0 10
10254: PUSH
10255: LD_INT 0
10257: GREATER
10258: PUSH
10259: LD_VAR 0 6
10263: PUSH
10264: LD_INT 0
10266: GREATER
10267: AND
10268: IFFALSE 10284
// ComMoveToArea ( damageUnits , healArea ) ;
10270: LD_VAR 0 10
10274: PPUSH
10275: LD_VAR 0 2
10279: PPUSH
10280: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10284: LD_VAR 0 11
10288: PUSH
10289: LD_INT 0
10291: GREATER
10292: PUSH
10293: LD_VAR 0 6
10297: PUSH
10298: LD_INT 0
10300: GREATER
10301: AND
10302: IFFALSE 10313
// ComExitBuilding ( sci_list ) ;
10304: LD_VAR 0 6
10308: PPUSH
10309: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10313: LD_VAR 0 11
10317: PUSH
10318: LD_INT 0
10320: GREATER
10321: PUSH
10322: LD_VAR 0 7
10326: PUSH
10327: LD_INT 0
10329: GREATER
10330: AND
10331: IFFALSE 10351
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10333: LD_VAR 0 7
10337: PPUSH
10338: LD_VAR 0 11
10342: PUSH
10343: LD_INT 1
10345: ARRAY
10346: PPUSH
10347: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10351: LD_VAR 0 10
10355: PUSH
10356: LD_INT 0
10358: EQUAL
10359: PUSH
10360: LD_VAR 0 11
10364: PUSH
10365: LD_INT 0
10367: EQUAL
10368: AND
10369: PUSH
10370: LD_VAR 0 7
10374: PUSH
10375: LD_INT 0
10377: GREATER
10378: AND
10379: IFFALSE 10484
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10381: LD_ADDR_VAR 0 12
10385: PUSH
10386: LD_INT 22
10388: PUSH
10389: LD_VAR 0 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 3
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 30
10410: PUSH
10411: LD_INT 8
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10428: LD_ADDR_VAR 0 13
10432: PUSH
10433: LD_INT 1
10435: PPUSH
10436: LD_VAR 0 12
10440: PPUSH
10441: CALL_OW 12
10445: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10446: LD_VAR 0 7
10450: PPUSH
10451: LD_INT 3
10453: PUSH
10454: LD_INT 60
10456: PUSH
10457: EMPTY
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PPUSH
10464: CALL_OW 72
10468: PPUSH
10469: LD_VAR 0 12
10473: PUSH
10474: LD_VAR 0 13
10478: ARRAY
10479: PPUSH
10480: CALL_OW 120
// end ; end ;
10484: LD_VAR 0 5
10488: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10489: LD_INT 0
10491: PPUSH
10492: PPUSH
10493: PPUSH
10494: PPUSH
10495: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10496: LD_ADDR_VAR 0 6
10500: PUSH
10501: LD_INT 22
10503: PUSH
10504: LD_VAR 0 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 2
10515: PUSH
10516: LD_INT 30
10518: PUSH
10519: LD_INT 31
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 30
10528: PUSH
10529: LD_INT 32
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 30
10538: PUSH
10539: LD_INT 33
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 30
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 30
10558: PUSH
10559: LD_INT 5
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 69
10582: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10583: LD_ADDR_VAR 0 7
10587: PUSH
10588: LD_INT 22
10590: PUSH
10591: LD_VAR 0 2
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 3
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 58
10612: PUSH
10613: EMPTY
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: PPUSH
10621: CALL_OW 69
10625: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10626: LD_VAR 0 6
10630: PUSH
10631: LD_INT 0
10633: GREATER
10634: PUSH
10635: LD_VAR 0 7
10639: PUSH
10640: LD_INT 0
10642: GREATER
10643: AND
10644: IFFALSE 10714
// begin for i in turretsList do
10646: LD_ADDR_VAR 0 4
10650: PUSH
10651: LD_VAR 0 6
10655: PUSH
10656: FOR_IN
10657: IFFALSE 10712
// begin for j in enemyBuildings do
10659: LD_ADDR_VAR 0 5
10663: PUSH
10664: LD_VAR 0 7
10668: PUSH
10669: FOR_IN
10670: IFFALSE 10708
// begin if GetDistUnits ( i , j ) < 20 then
10672: LD_VAR 0 4
10676: PPUSH
10677: LD_VAR 0 5
10681: PPUSH
10682: CALL_OW 296
10686: PUSH
10687: LD_INT 20
10689: LESS
10690: IFFALSE 10706
// begin ComAttackUnit ( i , j ) ;
10692: LD_VAR 0 4
10696: PPUSH
10697: LD_VAR 0 5
10701: PPUSH
10702: CALL_OW 115
// end ; end ;
10706: GO 10669
10708: POP
10709: POP
// end ;
10710: GO 10656
10712: POP
10713: POP
// end ; end ;
10714: LD_VAR 0 3
10718: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10719: LD_INT 0
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
// for i = 1 to medicCount do
10732: LD_ADDR_VAR 0 14
10736: PUSH
10737: DOUBLE
10738: LD_INT 1
10740: DEC
10741: ST_TO_ADDR
10742: LD_VAR 0 7
10746: PUSH
10747: FOR_TO
10748: IFFALSE 10830
// begin uc_side = side ;
10750: LD_ADDR_OWVAR 20
10754: PUSH
10755: LD_VAR 0 1
10759: ST_TO_ADDR
// uc_nation = nation ;
10760: LD_ADDR_OWVAR 21
10764: PUSH
10765: LD_VAR 0 2
10769: ST_TO_ADDR
// hc_name =  ;
10770: LD_ADDR_OWVAR 26
10774: PUSH
10775: LD_STRING 
10777: ST_TO_ADDR
// hc_gallery =  ;
10778: LD_ADDR_OWVAR 33
10782: PUSH
10783: LD_STRING 
10785: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10786: LD_INT 0
10788: PPUSH
10789: LD_INT 4
10791: PPUSH
10792: LD_VAR 0 8
10796: PPUSH
10797: CALL_OW 380
// un = CreateHuman ;
10801: LD_ADDR_VAR 0 16
10805: PUSH
10806: CALL_OW 44
10810: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10811: LD_VAR 0 16
10815: PPUSH
10816: LD_VAR 0 9
10820: PPUSH
10821: LD_INT 0
10823: PPUSH
10824: CALL_OW 49
// end ;
10828: GO 10747
10830: POP
10831: POP
// for i = 1 to soldierCount do
10832: LD_ADDR_VAR 0 14
10836: PUSH
10837: DOUBLE
10838: LD_INT 1
10840: DEC
10841: ST_TO_ADDR
10842: LD_VAR 0 3
10846: PUSH
10847: FOR_TO
10848: IFFALSE 10930
// begin uc_side = side ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_VAR 0 1
10859: ST_TO_ADDR
// uc_nation = nation ;
10860: LD_ADDR_OWVAR 21
10864: PUSH
10865: LD_VAR 0 2
10869: ST_TO_ADDR
// hc_name =  ;
10870: LD_ADDR_OWVAR 26
10874: PUSH
10875: LD_STRING 
10877: ST_TO_ADDR
// hc_gallery =  ;
10878: LD_ADDR_OWVAR 33
10882: PUSH
10883: LD_STRING 
10885: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10886: LD_INT 0
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: LD_VAR 0 8
10896: PPUSH
10897: CALL_OW 380
// un = CreateHuman ;
10901: LD_ADDR_VAR 0 16
10905: PUSH
10906: CALL_OW 44
10910: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10911: LD_VAR 0 16
10915: PPUSH
10916: LD_VAR 0 9
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 49
// end ;
10928: GO 10847
10930: POP
10931: POP
// for i = 1 to sniperCount do
10932: LD_ADDR_VAR 0 14
10936: PUSH
10937: DOUBLE
10938: LD_INT 1
10940: DEC
10941: ST_TO_ADDR
10942: LD_VAR 0 4
10946: PUSH
10947: FOR_TO
10948: IFFALSE 11030
// begin uc_side = side ;
10950: LD_ADDR_OWVAR 20
10954: PUSH
10955: LD_VAR 0 1
10959: ST_TO_ADDR
// uc_nation = nation ;
10960: LD_ADDR_OWVAR 21
10964: PUSH
10965: LD_VAR 0 2
10969: ST_TO_ADDR
// hc_name =  ;
10970: LD_ADDR_OWVAR 26
10974: PUSH
10975: LD_STRING 
10977: ST_TO_ADDR
// hc_gallery =  ;
10978: LD_ADDR_OWVAR 33
10982: PUSH
10983: LD_STRING 
10985: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10986: LD_INT 0
10988: PPUSH
10989: LD_INT 5
10991: PPUSH
10992: LD_VAR 0 8
10996: PPUSH
10997: CALL_OW 380
// un = CreateHuman ;
11001: LD_ADDR_VAR 0 16
11005: PUSH
11006: CALL_OW 44
11010: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11011: LD_VAR 0 16
11015: PPUSH
11016: LD_VAR 0 9
11020: PPUSH
11021: LD_INT 0
11023: PPUSH
11024: CALL_OW 49
// end ;
11028: GO 10947
11030: POP
11031: POP
// for i = 1 to bazookCount do
11032: LD_ADDR_VAR 0 14
11036: PUSH
11037: DOUBLE
11038: LD_INT 1
11040: DEC
11041: ST_TO_ADDR
11042: LD_VAR 0 5
11046: PUSH
11047: FOR_TO
11048: IFFALSE 11130
// begin uc_side = side ;
11050: LD_ADDR_OWVAR 20
11054: PUSH
11055: LD_VAR 0 1
11059: ST_TO_ADDR
// uc_nation = nation ;
11060: LD_ADDR_OWVAR 21
11064: PUSH
11065: LD_VAR 0 2
11069: ST_TO_ADDR
// hc_name =  ;
11070: LD_ADDR_OWVAR 26
11074: PUSH
11075: LD_STRING 
11077: ST_TO_ADDR
// hc_gallery =  ;
11078: LD_ADDR_OWVAR 33
11082: PUSH
11083: LD_STRING 
11085: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11086: LD_INT 0
11088: PPUSH
11089: LD_INT 9
11091: PPUSH
11092: LD_VAR 0 8
11096: PPUSH
11097: CALL_OW 380
// un = CreateHuman ;
11101: LD_ADDR_VAR 0 16
11105: PUSH
11106: CALL_OW 44
11110: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11111: LD_VAR 0 16
11115: PPUSH
11116: LD_VAR 0 9
11120: PPUSH
11121: LD_INT 0
11123: PPUSH
11124: CALL_OW 49
// end ;
11128: GO 11047
11130: POP
11131: POP
// for i = 1 to mortalCount do
11132: LD_ADDR_VAR 0 14
11136: PUSH
11137: DOUBLE
11138: LD_INT 1
11140: DEC
11141: ST_TO_ADDR
11142: LD_VAR 0 6
11146: PUSH
11147: FOR_TO
11148: IFFALSE 11230
// begin uc_side = side ;
11150: LD_ADDR_OWVAR 20
11154: PUSH
11155: LD_VAR 0 1
11159: ST_TO_ADDR
// uc_nation = nation ;
11160: LD_ADDR_OWVAR 21
11164: PUSH
11165: LD_VAR 0 2
11169: ST_TO_ADDR
// hc_name =  ;
11170: LD_ADDR_OWVAR 26
11174: PUSH
11175: LD_STRING 
11177: ST_TO_ADDR
// hc_gallery =  ;
11178: LD_ADDR_OWVAR 33
11182: PUSH
11183: LD_STRING 
11185: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11186: LD_INT 0
11188: PPUSH
11189: LD_INT 8
11191: PPUSH
11192: LD_VAR 0 8
11196: PPUSH
11197: CALL_OW 380
// un = CreateHuman ;
11201: LD_ADDR_VAR 0 16
11205: PUSH
11206: CALL_OW 44
11210: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11211: LD_VAR 0 16
11215: PPUSH
11216: LD_VAR 0 9
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: CALL_OW 49
// end ;
11228: GO 11147
11230: POP
11231: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11232: LD_ADDR_VAR 0 19
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_VAR 0 1
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 2
11251: PUSH
11252: LD_INT 25
11254: PUSH
11255: LD_INT 1
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 25
11274: PUSH
11275: LD_INT 8
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 25
11284: PUSH
11285: LD_INT 9
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: CALL_OW 69
11307: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11308: LD_ADDR_VAR 0 18
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_VAR 0 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 4
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// for i in medic_list do
11344: LD_ADDR_VAR 0 14
11348: PUSH
11349: LD_VAR 0 18
11353: PUSH
11354: FOR_IN
11355: IFFALSE 11373
// ComMoveToArea ( i , healArea ) ;
11357: LD_VAR 0 14
11361: PPUSH
11362: LD_VAR 0 10
11366: PPUSH
11367: CALL_OW 113
11371: GO 11354
11373: POP
11374: POP
// if strategy = 1 then
11375: LD_VAR 0 12
11379: PUSH
11380: LD_INT 1
11382: EQUAL
11383: IFFALSE 11929
// begin repeat wait ( 0 0$3 ) ;
11385: LD_INT 105
11387: PPUSH
11388: CALL_OW 67
// for i in soldiersOK_list do
11392: LD_ADDR_VAR 0 14
11396: PUSH
11397: LD_VAR 0 19
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11467
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11405: LD_VAR 0 14
11409: PPUSH
11410: LD_INT 91
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
11420: LD_VAR 0 14
11424: PPUSH
11425: LD_INT 101
11427: PPUSH
11428: LD_INT 53
11430: PPUSH
11431: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
11435: LD_VAR 0 14
11439: PPUSH
11440: LD_INT 75
11442: PPUSH
11443: LD_INT 23
11445: PPUSH
11446: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
11450: LD_VAR 0 14
11454: PPUSH
11455: LD_INT 78
11457: PPUSH
11458: LD_INT 8
11460: PPUSH
11461: CALL_OW 174
// end ;
11465: GO 11402
11467: POP
11468: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
11469: LD_INT 12
11471: PPUSH
11472: LD_INT 22
11474: PUSH
11475: LD_VAR 0 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PPUSH
11484: CALL_OW 70
11488: PUSH
11489: LD_INT 2
11491: GREATER
11492: IFFALSE 11385
// repeat wait ( 0 0$1 ) ;
11494: LD_INT 35
11496: PPUSH
11497: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11501: LD_ADDR_VAR 0 17
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_VAR 0 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 1
11520: PUSH
11521: LD_INT 3
11523: PUSH
11524: LD_INT 24
11526: PUSH
11527: LD_INT 550
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 24
11540: PUSH
11541: LD_INT 250
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PPUSH
11557: CALL_OW 69
11561: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11562: LD_ADDR_VAR 0 19
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_VAR 0 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 2
11581: PUSH
11582: LD_INT 25
11584: PUSH
11585: LD_INT 1
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 25
11594: PUSH
11595: LD_INT 5
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 25
11604: PUSH
11605: LD_INT 8
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 25
11614: PUSH
11615: LD_INT 9
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 24
11631: PUSH
11632: LD_INT 1000
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: ST_TO_ADDR
// if medicCount > 0 then
11649: LD_VAR 0 7
11653: PUSH
11654: LD_INT 0
11656: GREATER
11657: IFFALSE 11731
// begin if damageUnit_list > 0 then
11659: LD_VAR 0 17
11663: PUSH
11664: LD_INT 0
11666: GREATER
11667: IFFALSE 11731
// begin for i in damageUnit_list do
11669: LD_ADDR_VAR 0 14
11673: PUSH
11674: LD_VAR 0 17
11678: PUSH
11679: FOR_IN
11680: IFFALSE 11729
// begin ComMoveToArea ( i , healArea ) ;
11682: LD_VAR 0 14
11686: PPUSH
11687: LD_VAR 0 10
11691: PPUSH
11692: CALL_OW 113
// for j in medic_list do
11696: LD_ADDR_VAR 0 15
11700: PUSH
11701: LD_VAR 0 18
11705: PUSH
11706: FOR_IN
11707: IFFALSE 11725
// AddComHeal ( j , i ) ;
11709: LD_VAR 0 15
11713: PPUSH
11714: LD_VAR 0 14
11718: PPUSH
11719: CALL_OW 188
11723: GO 11706
11725: POP
11726: POP
// end ;
11727: GO 11679
11729: POP
11730: POP
// end ; end ; for i in soldiersOK_list do
11731: LD_ADDR_VAR 0 14
11735: PUSH
11736: LD_VAR 0 19
11740: PUSH
11741: FOR_IN
11742: IFFALSE 11918
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11744: LD_ADDR_VAR 0 22
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: LD_VAR 0 11
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 69
11765: PPUSH
11766: LD_VAR 0 14
11770: PPUSH
11771: CALL_OW 74
11775: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11776: LD_ADDR_VAR 0 23
11780: PUSH
11781: LD_INT 22
11783: PUSH
11784: LD_VAR 0 11
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 2
11795: PUSH
11796: LD_INT 59
11798: PUSH
11799: EMPTY
11800: LIST
11801: PUSH
11802: LD_INT 21
11804: PUSH
11805: LD_INT 1
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 21
11814: PUSH
11815: LD_INT 2
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: PPUSH
11835: CALL_OW 69
11839: PPUSH
11840: LD_VAR 0 14
11844: PPUSH
11845: CALL_OW 74
11849: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11850: LD_VAR 0 14
11854: PPUSH
11855: LD_VAR 0 22
11859: PPUSH
11860: CALL_OW 296
11864: PUSH
11865: LD_INT 6
11867: PLUS
11868: PUSH
11869: LD_VAR 0 14
11873: PPUSH
11874: LD_VAR 0 23
11878: PPUSH
11879: CALL_OW 296
11883: LESS
11884: IFFALSE 11902
// begin ComAttackUnit ( i , target1 ) ;
11886: LD_VAR 0 14
11890: PPUSH
11891: LD_VAR 0 22
11895: PPUSH
11896: CALL_OW 115
// end else
11900: GO 11916
// begin ComAttackUnit ( i , target2 ) ;
11902: LD_VAR 0 14
11906: PPUSH
11907: LD_VAR 0 23
11911: PPUSH
11912: CALL_OW 115
// end ; end ;
11916: GO 11741
11918: POP
11919: POP
// until soldiersOK_list = [ ] ;
11920: LD_VAR 0 19
11924: PUSH
11925: EMPTY
11926: EQUAL
11927: IFFALSE 11494
// end ; if strategy = 2 then
11929: LD_VAR 0 12
11933: PUSH
11934: LD_INT 2
11936: EQUAL
11937: IFFALSE 12453
// begin repeat wait ( 0 0$1 ) ;
11939: LD_INT 35
11941: PPUSH
11942: CALL_OW 67
// for i in soldiersOK_list do
11946: LD_ADDR_VAR 0 14
11950: PUSH
11951: LD_VAR 0 19
11955: PUSH
11956: FOR_IN
11957: IFFALSE 11991
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11959: LD_VAR 0 14
11963: PPUSH
11964: LD_INT 91
11966: PPUSH
11967: LD_INT 63
11969: PPUSH
11970: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11974: LD_VAR 0 14
11978: PPUSH
11979: LD_INT 75
11981: PPUSH
11982: LD_INT 33
11984: PPUSH
11985: CALL_OW 174
// end ;
11989: GO 11956
11991: POP
11992: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11993: LD_INT 13
11995: PPUSH
11996: LD_INT 22
11998: PUSH
11999: LD_VAR 0 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PPUSH
12008: CALL_OW 70
12012: PUSH
12013: LD_INT 2
12015: GREATER
12016: IFFALSE 11939
// repeat wait ( 0 0$3 ) ;
12018: LD_INT 105
12020: PPUSH
12021: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12025: LD_ADDR_VAR 0 17
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: LD_VAR 0 1
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 1
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 24
12050: PUSH
12051: LD_INT 550
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 24
12064: PUSH
12065: LD_INT 250
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PPUSH
12081: CALL_OW 69
12085: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12086: LD_ADDR_VAR 0 19
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_VAR 0 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 25
12118: PUSH
12119: LD_INT 5
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 25
12128: PUSH
12129: LD_INT 8
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 25
12138: PUSH
12139: LD_INT 9
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 24
12155: PUSH
12156: LD_INT 1000
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 69
12172: ST_TO_ADDR
// if medicCount > 0 then
12173: LD_VAR 0 7
12177: PUSH
12178: LD_INT 0
12180: GREATER
12181: IFFALSE 12255
// begin if damageUnit_list > 0 then
12183: LD_VAR 0 17
12187: PUSH
12188: LD_INT 0
12190: GREATER
12191: IFFALSE 12255
// begin for i in damageUnit_list do
12193: LD_ADDR_VAR 0 14
12197: PUSH
12198: LD_VAR 0 17
12202: PUSH
12203: FOR_IN
12204: IFFALSE 12253
// begin ComMoveToArea ( i , healArea ) ;
12206: LD_VAR 0 14
12210: PPUSH
12211: LD_VAR 0 10
12215: PPUSH
12216: CALL_OW 113
// for j in medic_list do
12220: LD_ADDR_VAR 0 15
12224: PUSH
12225: LD_VAR 0 18
12229: PUSH
12230: FOR_IN
12231: IFFALSE 12249
// AddComHeal ( j , i ) ;
12233: LD_VAR 0 15
12237: PPUSH
12238: LD_VAR 0 14
12242: PPUSH
12243: CALL_OW 188
12247: GO 12230
12249: POP
12250: POP
// end ;
12251: GO 12203
12253: POP
12254: POP
// end ; end ; for i in soldiersOK_list do
12255: LD_ADDR_VAR 0 14
12259: PUSH
12260: LD_VAR 0 19
12264: PUSH
12265: FOR_IN
12266: IFFALSE 12442
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12268: LD_ADDR_VAR 0 22
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_VAR 0 11
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 69
12289: PPUSH
12290: LD_VAR 0 14
12294: PPUSH
12295: CALL_OW 74
12299: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12300: LD_ADDR_VAR 0 23
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: LD_VAR 0 11
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 2
12319: PUSH
12320: LD_INT 59
12322: PUSH
12323: EMPTY
12324: LIST
12325: PUSH
12326: LD_INT 21
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: PPUSH
12359: CALL_OW 69
12363: PPUSH
12364: LD_VAR 0 14
12368: PPUSH
12369: CALL_OW 74
12373: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12374: LD_VAR 0 14
12378: PPUSH
12379: LD_VAR 0 22
12383: PPUSH
12384: CALL_OW 296
12388: PUSH
12389: LD_INT 6
12391: PLUS
12392: PUSH
12393: LD_VAR 0 14
12397: PPUSH
12398: LD_VAR 0 23
12402: PPUSH
12403: CALL_OW 296
12407: LESS
12408: IFFALSE 12426
// begin ComAttackUnit ( i , target1 ) ;
12410: LD_VAR 0 14
12414: PPUSH
12415: LD_VAR 0 22
12419: PPUSH
12420: CALL_OW 115
// end else
12424: GO 12440
// begin ComAttackUnit ( i , target2 ) ;
12426: LD_VAR 0 14
12430: PPUSH
12431: LD_VAR 0 23
12435: PPUSH
12436: CALL_OW 115
// end ; end ;
12440: GO 12265
12442: POP
12443: POP
// until soldiersOK_list = [ ] ;
12444: LD_VAR 0 19
12448: PUSH
12449: EMPTY
12450: EQUAL
12451: IFFALSE 12018
// end ; if strategy = 3 then
12453: LD_VAR 0 12
12457: PUSH
12458: LD_INT 3
12460: EQUAL
12461: IFFALSE 13007
// begin repeat wait ( 0 0$3 ) ;
12463: LD_INT 105
12465: PPUSH
12466: CALL_OW 67
// for i in soldiersOK_list do
12470: LD_ADDR_VAR 0 14
12474: PUSH
12475: LD_VAR 0 19
12479: PUSH
12480: FOR_IN
12481: IFFALSE 12545
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12483: LD_VAR 0 14
12487: PPUSH
12488: LD_INT 63
12490: PPUSH
12491: LD_INT 71
12493: PPUSH
12494: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
12498: LD_VAR 0 14
12502: PPUSH
12503: LD_INT 35
12505: PPUSH
12506: LD_INT 44
12508: PPUSH
12509: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
12513: LD_VAR 0 14
12517: PPUSH
12518: LD_INT 23
12520: PPUSH
12521: LD_INT 18
12523: PPUSH
12524: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
12528: LD_VAR 0 14
12532: PPUSH
12533: LD_INT 26
12535: PPUSH
12536: LD_INT 12
12538: PPUSH
12539: CALL_OW 174
// end ;
12543: GO 12480
12545: POP
12546: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
12547: LD_INT 14
12549: PPUSH
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: CALL_OW 70
12566: PUSH
12567: LD_INT 2
12569: GREATER
12570: IFFALSE 12463
// repeat wait ( 0 0$1 ) ;
12572: LD_INT 35
12574: PPUSH
12575: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12579: LD_ADDR_VAR 0 17
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_VAR 0 1
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: LD_INT 3
12601: PUSH
12602: LD_INT 24
12604: PUSH
12605: LD_INT 550
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 24
12618: PUSH
12619: LD_INT 250
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PPUSH
12635: CALL_OW 69
12639: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12640: LD_ADDR_VAR 0 19
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: LD_VAR 0 1
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 2
12659: PUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 1
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 25
12672: PUSH
12673: LD_INT 5
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 25
12682: PUSH
12683: LD_INT 8
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 25
12692: PUSH
12693: LD_INT 9
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 24
12709: PUSH
12710: LD_INT 1000
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: ST_TO_ADDR
// if medicCount > 0 then
12727: LD_VAR 0 7
12731: PUSH
12732: LD_INT 0
12734: GREATER
12735: IFFALSE 12809
// begin if damageUnit_list > 0 then
12737: LD_VAR 0 17
12741: PUSH
12742: LD_INT 0
12744: GREATER
12745: IFFALSE 12809
// begin for i in damageUnit_list do
12747: LD_ADDR_VAR 0 14
12751: PUSH
12752: LD_VAR 0 17
12756: PUSH
12757: FOR_IN
12758: IFFALSE 12807
// begin ComMoveToArea ( i , healArea ) ;
12760: LD_VAR 0 14
12764: PPUSH
12765: LD_VAR 0 10
12769: PPUSH
12770: CALL_OW 113
// for j in medic_list do
12774: LD_ADDR_VAR 0 15
12778: PUSH
12779: LD_VAR 0 18
12783: PUSH
12784: FOR_IN
12785: IFFALSE 12803
// AddComHeal ( j , i ) ;
12787: LD_VAR 0 15
12791: PPUSH
12792: LD_VAR 0 14
12796: PPUSH
12797: CALL_OW 188
12801: GO 12784
12803: POP
12804: POP
// end ;
12805: GO 12757
12807: POP
12808: POP
// end ; end ; for i in soldiersOK_list do
12809: LD_ADDR_VAR 0 14
12813: PUSH
12814: LD_VAR 0 19
12818: PUSH
12819: FOR_IN
12820: IFFALSE 12996
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12822: LD_ADDR_VAR 0 22
12826: PUSH
12827: LD_INT 22
12829: PUSH
12830: LD_VAR 0 11
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 69
12843: PPUSH
12844: LD_VAR 0 14
12848: PPUSH
12849: CALL_OW 74
12853: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12854: LD_ADDR_VAR 0 23
12858: PUSH
12859: LD_INT 22
12861: PUSH
12862: LD_VAR 0 11
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: LD_INT 59
12876: PUSH
12877: EMPTY
12878: LIST
12879: PUSH
12880: LD_INT 21
12882: PUSH
12883: LD_INT 1
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 21
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: PPUSH
12913: CALL_OW 69
12917: PPUSH
12918: LD_VAR 0 14
12922: PPUSH
12923: CALL_OW 74
12927: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12928: LD_VAR 0 14
12932: PPUSH
12933: LD_VAR 0 22
12937: PPUSH
12938: CALL_OW 296
12942: PUSH
12943: LD_INT 6
12945: PLUS
12946: PUSH
12947: LD_VAR 0 14
12951: PPUSH
12952: LD_VAR 0 23
12956: PPUSH
12957: CALL_OW 296
12961: LESS
12962: IFFALSE 12980
// begin ComAttackUnit ( i , target1 ) ;
12964: LD_VAR 0 14
12968: PPUSH
12969: LD_VAR 0 22
12973: PPUSH
12974: CALL_OW 115
// end else
12978: GO 12994
// begin ComAttackUnit ( i , target2 ) ;
12980: LD_VAR 0 14
12984: PPUSH
12985: LD_VAR 0 23
12989: PPUSH
12990: CALL_OW 115
// end ; end ;
12994: GO 12819
12996: POP
12997: POP
// until soldiersOK_list = [ ] ;
12998: LD_VAR 0 19
13002: PUSH
13003: EMPTY
13004: EQUAL
13005: IFFALSE 12572
// end ; end ;
13007: LD_VAR 0 13
13011: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13012: LD_INT 0
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
13018: PPUSH
13019: PPUSH
13020: PPUSH
13021: PPUSH
13022: PPUSH
13023: PPUSH
13024: PPUSH
// amChassisTab = [ ] ;
13025: LD_ADDR_VAR 0 19
13029: PUSH
13030: EMPTY
13031: ST_TO_ADDR
// arChassisTab = [ ] ;
13032: LD_ADDR_VAR 0 18
13036: PUSH
13037: EMPTY
13038: ST_TO_ADDR
// ruChassisTab = [ ] ;
13039: LD_ADDR_VAR 0 17
13043: PUSH
13044: EMPTY
13045: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13046: LD_INT 35
13048: PPUSH
13049: CALL_OW 67
// if nation = 1 then
13053: LD_VAR 0 5
13057: PUSH
13058: LD_INT 1
13060: EQUAL
13061: IFFALSE 13552
// begin uc_side = side ;
13063: LD_ADDR_OWVAR 20
13067: PUSH
13068: LD_VAR 0 2
13072: ST_TO_ADDR
// uc_nation = nation ;
13073: LD_ADDR_OWVAR 21
13077: PUSH
13078: LD_VAR 0 5
13082: ST_TO_ADDR
// vc_engine = vehengine ;
13083: LD_ADDR_OWVAR 39
13087: PUSH
13088: LD_VAR 0 6
13092: ST_TO_ADDR
// vc_control = vehcontrol ;
13093: LD_ADDR_OWVAR 38
13097: PUSH
13098: LD_VAR 0 7
13102: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13103: LD_ADDR_OWVAR 40
13107: PUSH
13108: LD_VAR 0 10
13112: PUSH
13113: LD_INT 1
13115: PPUSH
13116: LD_VAR 0 10
13120: PPUSH
13121: CALL_OW 12
13125: ARRAY
13126: ST_TO_ADDR
// for j = 1 to AMWeapon do
13127: LD_ADDR_VAR 0 14
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_VAR 0 10
13141: PUSH
13142: FOR_TO
13143: IFFALSE 13444
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13145: LD_VAR 0 10
13149: PUSH
13150: LD_VAR 0 14
13154: ARRAY
13155: PUSH
13156: LD_INT 2
13158: EQUAL
13159: PUSH
13160: LD_VAR 0 10
13164: PUSH
13165: LD_VAR 0 14
13169: ARRAY
13170: PUSH
13171: LD_INT 3
13173: EQUAL
13174: OR
13175: IFFALSE 13228
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13177: LD_ADDR_VAR 0 19
13181: PUSH
13182: LD_INT 1
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: LD_INT 3
13190: PUSH
13191: LD_INT 4
13193: PUSH
13194: LD_INT 5
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13204: LD_ADDR_OWVAR 37
13208: PUSH
13209: LD_VAR 0 19
13213: PUSH
13214: LD_INT 1
13216: PPUSH
13217: LD_VAR 0 19
13221: PPUSH
13222: CALL_OW 12
13226: ARRAY
13227: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13228: LD_VAR 0 10
13232: PUSH
13233: LD_VAR 0 14
13237: ARRAY
13238: PUSH
13239: LD_INT 4
13241: EQUAL
13242: PUSH
13243: LD_VAR 0 10
13247: PUSH
13248: LD_VAR 0 14
13252: ARRAY
13253: PUSH
13254: LD_INT 5
13256: EQUAL
13257: OR
13258: PUSH
13259: LD_VAR 0 10
13263: PUSH
13264: LD_VAR 0 14
13268: ARRAY
13269: PUSH
13270: LD_INT 9
13272: EQUAL
13273: OR
13274: PUSH
13275: LD_VAR 0 10
13279: PUSH
13280: LD_VAR 0 14
13284: ARRAY
13285: PUSH
13286: LD_INT 11
13288: EQUAL
13289: OR
13290: PUSH
13291: LD_VAR 0 10
13295: PUSH
13296: LD_VAR 0 14
13300: ARRAY
13301: PUSH
13302: LD_INT 7
13304: EQUAL
13305: OR
13306: IFFALSE 13355
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13308: LD_ADDR_VAR 0 19
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 3
13318: PUSH
13319: LD_INT 4
13321: PUSH
13322: LD_INT 5
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13331: LD_ADDR_OWVAR 37
13335: PUSH
13336: LD_VAR 0 19
13340: PUSH
13341: LD_INT 1
13343: PPUSH
13344: LD_VAR 0 19
13348: PPUSH
13349: CALL_OW 12
13353: ARRAY
13354: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13355: LD_VAR 0 10
13359: PUSH
13360: LD_VAR 0 14
13364: ARRAY
13365: PUSH
13366: LD_INT 8
13368: EQUAL
13369: PUSH
13370: LD_VAR 0 10
13374: PUSH
13375: LD_VAR 0 14
13379: ARRAY
13380: PUSH
13381: LD_INT 6
13383: EQUAL
13384: OR
13385: PUSH
13386: LD_VAR 0 10
13390: PUSH
13391: LD_VAR 0 14
13395: ARRAY
13396: PUSH
13397: LD_INT 10
13399: EQUAL
13400: OR
13401: IFFALSE 13442
// begin amChassisTab = [ 4 , 5 ] ;
13403: LD_ADDR_VAR 0 19
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13418: LD_ADDR_OWVAR 37
13422: PUSH
13423: LD_VAR 0 19
13427: PUSH
13428: LD_INT 1
13430: PPUSH
13431: LD_VAR 0 19
13435: PPUSH
13436: CALL_OW 12
13440: ARRAY
13441: ST_TO_ADDR
// end ; end ;
13442: GO 13142
13444: POP
13445: POP
// veh = CreateVehicle ;
13446: LD_ADDR_VAR 0 16
13450: PUSH
13451: CALL_OW 45
13455: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13456: LD_VAR 0 16
13460: PPUSH
13461: LD_VAR 0 1
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 49
// if vehControl = 1 then
13473: LD_VAR 0 7
13477: PUSH
13478: LD_INT 1
13480: EQUAL
13481: IFFALSE 13538
// begin hc_gallery =  ;
13483: LD_ADDR_OWVAR 33
13487: PUSH
13488: LD_STRING 
13490: ST_TO_ADDR
// hc_name =  ;
13491: LD_ADDR_OWVAR 26
13495: PUSH
13496: LD_STRING 
13498: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13499: LD_INT 0
13501: PPUSH
13502: LD_INT 3
13504: PPUSH
13505: LD_VAR 0 4
13509: PPUSH
13510: CALL_OW 380
// un = CreateHuman ;
13514: LD_ADDR_VAR 0 15
13518: PUSH
13519: CALL_OW 44
13523: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13524: LD_VAR 0 15
13528: PPUSH
13529: LD_VAR 0 16
13533: PPUSH
13534: CALL_OW 52
// end ; i = i + 1 ;
13538: LD_ADDR_VAR 0 13
13542: PUSH
13543: LD_VAR 0 13
13547: PUSH
13548: LD_INT 1
13550: PLUS
13551: ST_TO_ADDR
// end ; if nation = 2 then
13552: LD_VAR 0 5
13556: PUSH
13557: LD_INT 2
13559: EQUAL
13560: IFFALSE 13984
// begin uc_side = side ;
13562: LD_ADDR_OWVAR 20
13566: PUSH
13567: LD_VAR 0 2
13571: ST_TO_ADDR
// uc_nation = nation ;
13572: LD_ADDR_OWVAR 21
13576: PUSH
13577: LD_VAR 0 5
13581: ST_TO_ADDR
// vc_engine = vehengine ;
13582: LD_ADDR_OWVAR 39
13586: PUSH
13587: LD_VAR 0 6
13591: ST_TO_ADDR
// vc_control = vehcontrol ;
13592: LD_ADDR_OWVAR 38
13596: PUSH
13597: LD_VAR 0 7
13601: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13602: LD_ADDR_OWVAR 40
13606: PUSH
13607: LD_VAR 0 9
13611: PUSH
13612: LD_INT 1
13614: PPUSH
13615: LD_VAR 0 9
13619: PPUSH
13620: CALL_OW 12
13624: ARRAY
13625: ST_TO_ADDR
// for j = 1 to ARWeapons do
13626: LD_ADDR_VAR 0 14
13630: PUSH
13631: DOUBLE
13632: LD_INT 1
13634: DEC
13635: ST_TO_ADDR
13636: LD_VAR 0 9
13640: PUSH
13641: FOR_TO
13642: IFFALSE 13876
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13644: LD_VAR 0 9
13648: PUSH
13649: LD_VAR 0 14
13653: ARRAY
13654: PUSH
13655: LD_INT 24
13657: EQUAL
13658: PUSH
13659: LD_VAR 0 9
13663: PUSH
13664: LD_VAR 0 14
13668: ARRAY
13669: PUSH
13670: LD_INT 22
13672: EQUAL
13673: OR
13674: PUSH
13675: LD_VAR 0 9
13679: PUSH
13680: LD_VAR 0 14
13684: ARRAY
13685: PUSH
13686: LD_INT 23
13688: EQUAL
13689: OR
13690: PUSH
13691: LD_VAR 0 9
13695: PUSH
13696: LD_VAR 0 14
13700: ARRAY
13701: PUSH
13702: LD_INT 30
13704: EQUAL
13705: OR
13706: IFFALSE 13755
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13708: LD_ADDR_VAR 0 18
13712: PUSH
13713: LD_INT 11
13715: PUSH
13716: LD_INT 12
13718: PUSH
13719: LD_INT 13
13721: PUSH
13722: LD_INT 14
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13731: LD_ADDR_OWVAR 37
13735: PUSH
13736: LD_VAR 0 18
13740: PUSH
13741: LD_INT 1
13743: PPUSH
13744: LD_VAR 0 18
13748: PPUSH
13749: CALL_OW 12
13753: ARRAY
13754: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13755: LD_VAR 0 9
13759: PUSH
13760: LD_VAR 0 14
13764: ARRAY
13765: PUSH
13766: LD_INT 29
13768: EQUAL
13769: PUSH
13770: LD_VAR 0 9
13774: PUSH
13775: LD_VAR 0 14
13779: ARRAY
13780: PUSH
13781: LD_INT 28
13783: EQUAL
13784: OR
13785: PUSH
13786: LD_VAR 0 9
13790: PUSH
13791: LD_VAR 0 14
13795: ARRAY
13796: PUSH
13797: LD_INT 27
13799: EQUAL
13800: OR
13801: PUSH
13802: LD_VAR 0 9
13806: PUSH
13807: LD_VAR 0 14
13811: ARRAY
13812: PUSH
13813: LD_INT 26
13815: EQUAL
13816: OR
13817: PUSH
13818: LD_VAR 0 9
13822: PUSH
13823: LD_VAR 0 14
13827: ARRAY
13828: PUSH
13829: LD_INT 25
13831: EQUAL
13832: OR
13833: IFFALSE 13874
// begin arChassisTab = [ 13 , 14 ] ;
13835: LD_ADDR_VAR 0 18
13839: PUSH
13840: LD_INT 13
13842: PUSH
13843: LD_INT 14
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13850: LD_ADDR_OWVAR 37
13854: PUSH
13855: LD_VAR 0 18
13859: PUSH
13860: LD_INT 1
13862: PPUSH
13863: LD_VAR 0 18
13867: PPUSH
13868: CALL_OW 12
13872: ARRAY
13873: ST_TO_ADDR
// end ; end ;
13874: GO 13641
13876: POP
13877: POP
// veh = CreateVehicle ;
13878: LD_ADDR_VAR 0 16
13882: PUSH
13883: CALL_OW 45
13887: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13888: LD_VAR 0 16
13892: PPUSH
13893: LD_VAR 0 1
13897: PPUSH
13898: LD_INT 0
13900: PPUSH
13901: CALL_OW 49
// if vehcontrol = 1 then
13905: LD_VAR 0 7
13909: PUSH
13910: LD_INT 1
13912: EQUAL
13913: IFFALSE 13970
// begin hc_gallery =  ;
13915: LD_ADDR_OWVAR 33
13919: PUSH
13920: LD_STRING 
13922: ST_TO_ADDR
// hc_name =  ;
13923: LD_ADDR_OWVAR 26
13927: PUSH
13928: LD_STRING 
13930: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13931: LD_INT 0
13933: PPUSH
13934: LD_INT 3
13936: PPUSH
13937: LD_VAR 0 4
13941: PPUSH
13942: CALL_OW 380
// un = CreateHuman ;
13946: LD_ADDR_VAR 0 15
13950: PUSH
13951: CALL_OW 44
13955: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13956: LD_VAR 0 15
13960: PPUSH
13961: LD_VAR 0 16
13965: PPUSH
13966: CALL_OW 52
// end ; i = i + 1 ;
13970: LD_ADDR_VAR 0 13
13974: PUSH
13975: LD_VAR 0 13
13979: PUSH
13980: LD_INT 1
13982: PLUS
13983: ST_TO_ADDR
// end ; if nation = 3 then
13984: LD_VAR 0 5
13988: PUSH
13989: LD_INT 3
13991: EQUAL
13992: IFFALSE 14384
// begin uc_side = side ;
13994: LD_ADDR_OWVAR 20
13998: PUSH
13999: LD_VAR 0 2
14003: ST_TO_ADDR
// uc_nation = nation ;
14004: LD_ADDR_OWVAR 21
14008: PUSH
14009: LD_VAR 0 5
14013: ST_TO_ADDR
// vc_engine = vehengine ;
14014: LD_ADDR_OWVAR 39
14018: PUSH
14019: LD_VAR 0 6
14023: ST_TO_ADDR
// vc_control = vehcontrol ;
14024: LD_ADDR_OWVAR 38
14028: PUSH
14029: LD_VAR 0 7
14033: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14034: LD_ADDR_OWVAR 40
14038: PUSH
14039: LD_VAR 0 8
14043: PUSH
14044: LD_INT 1
14046: PPUSH
14047: LD_VAR 0 8
14051: PPUSH
14052: CALL_OW 12
14056: ARRAY
14057: ST_TO_ADDR
// for j = 1 to RuWeapons do
14058: LD_ADDR_VAR 0 14
14062: PUSH
14063: DOUBLE
14064: LD_INT 1
14066: DEC
14067: ST_TO_ADDR
14068: LD_VAR 0 8
14072: PUSH
14073: FOR_TO
14074: IFFALSE 14276
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14076: LD_VAR 0 8
14080: PUSH
14081: LD_VAR 0 14
14085: ARRAY
14086: PUSH
14087: LD_INT 42
14089: EQUAL
14090: PUSH
14091: LD_VAR 0 8
14095: PUSH
14096: LD_VAR 0 14
14100: ARRAY
14101: PUSH
14102: LD_INT 43
14104: EQUAL
14105: OR
14106: PUSH
14107: LD_VAR 0 8
14111: PUSH
14112: LD_VAR 0 14
14116: ARRAY
14117: PUSH
14118: LD_INT 44
14120: EQUAL
14121: OR
14122: PUSH
14123: LD_VAR 0 8
14127: PUSH
14128: LD_VAR 0 14
14132: ARRAY
14133: PUSH
14134: LD_INT 45
14136: EQUAL
14137: OR
14138: PUSH
14139: LD_VAR 0 8
14143: PUSH
14144: LD_VAR 0 14
14148: ARRAY
14149: PUSH
14150: LD_INT 49
14152: EQUAL
14153: OR
14154: IFFALSE 14203
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14156: LD_ADDR_VAR 0 17
14160: PUSH
14161: LD_INT 21
14163: PUSH
14164: LD_INT 22
14166: PUSH
14167: LD_INT 23
14169: PUSH
14170: LD_INT 24
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14179: LD_ADDR_OWVAR 37
14183: PUSH
14184: LD_VAR 0 17
14188: PUSH
14189: LD_INT 1
14191: PPUSH
14192: LD_VAR 0 17
14196: PPUSH
14197: CALL_OW 12
14201: ARRAY
14202: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14203: LD_VAR 0 8
14207: PUSH
14208: LD_VAR 0 14
14212: ARRAY
14213: PUSH
14214: LD_INT 46
14216: EQUAL
14217: PUSH
14218: LD_VAR 0 8
14222: PUSH
14223: LD_VAR 0 14
14227: ARRAY
14228: PUSH
14229: LD_INT 47
14231: EQUAL
14232: OR
14233: IFFALSE 14274
// begin ruChassisTab = [ 23 , 24 ] ;
14235: LD_ADDR_VAR 0 17
14239: PUSH
14240: LD_INT 23
14242: PUSH
14243: LD_INT 24
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14250: LD_ADDR_OWVAR 37
14254: PUSH
14255: LD_VAR 0 17
14259: PUSH
14260: LD_INT 1
14262: PPUSH
14263: LD_VAR 0 17
14267: PPUSH
14268: CALL_OW 12
14272: ARRAY
14273: ST_TO_ADDR
// end ; end ;
14274: GO 14073
14276: POP
14277: POP
// veh = CreateVehicle ;
14278: LD_ADDR_VAR 0 16
14282: PUSH
14283: CALL_OW 45
14287: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14288: LD_VAR 0 16
14292: PPUSH
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 0
14300: PPUSH
14301: CALL_OW 49
// if vehcontrol = 1 then
14305: LD_VAR 0 7
14309: PUSH
14310: LD_INT 1
14312: EQUAL
14313: IFFALSE 14370
// begin hc_gallery =  ;
14315: LD_ADDR_OWVAR 33
14319: PUSH
14320: LD_STRING 
14322: ST_TO_ADDR
// hc_name =  ;
14323: LD_ADDR_OWVAR 26
14327: PUSH
14328: LD_STRING 
14330: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14331: LD_INT 0
14333: PPUSH
14334: LD_INT 3
14336: PPUSH
14337: LD_VAR 0 4
14341: PPUSH
14342: CALL_OW 380
// un = CreateHuman ;
14346: LD_ADDR_VAR 0 15
14350: PUSH
14351: CALL_OW 44
14355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14356: LD_VAR 0 15
14360: PPUSH
14361: LD_VAR 0 16
14365: PPUSH
14366: CALL_OW 52
// end ; i = i + 1 ;
14370: LD_ADDR_VAR 0 13
14374: PUSH
14375: LD_VAR 0 13
14379: PUSH
14380: LD_INT 1
14382: PLUS
14383: ST_TO_ADDR
// end ; until i = vehCount ;
14384: LD_VAR 0 13
14388: PUSH
14389: LD_VAR 0 3
14393: EQUAL
14394: IFFALSE 13046
// repeat wait ( 0 0$1 ) ;
14396: LD_INT 35
14398: PPUSH
14399: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
14403: LD_ADDR_VAR 0 20
14407: PUSH
14408: LD_INT 22
14410: PUSH
14411: LD_VAR 0 2
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 24
14432: PUSH
14433: LD_INT 661
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: ST_TO_ADDR
// if vehicleOK_list > 0 then
14450: LD_VAR 0 20
14454: PUSH
14455: LD_INT 0
14457: GREATER
14458: IFFALSE 14649
// begin for i in vehicleOK_list do
14460: LD_ADDR_VAR 0 13
14464: PUSH
14465: LD_VAR 0 20
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14647
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14473: LD_ADDR_VAR 0 21
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_VAR 0 11
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: PPUSH
14495: LD_VAR 0 13
14499: PPUSH
14500: CALL_OW 74
14504: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14505: LD_ADDR_VAR 0 22
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 11
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 2
14524: PUSH
14525: LD_INT 59
14527: PUSH
14528: EMPTY
14529: LIST
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 21
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: PPUSH
14564: CALL_OW 69
14568: PPUSH
14569: LD_VAR 0 13
14573: PPUSH
14574: CALL_OW 74
14578: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14579: LD_VAR 0 13
14583: PPUSH
14584: LD_VAR 0 21
14588: PPUSH
14589: CALL_OW 296
14593: PUSH
14594: LD_INT 6
14596: PLUS
14597: PUSH
14598: LD_VAR 0 13
14602: PPUSH
14603: LD_VAR 0 22
14607: PPUSH
14608: CALL_OW 296
14612: LESS
14613: IFFALSE 14631
// begin ComAttackUnit ( i , target1 ) ;
14615: LD_VAR 0 13
14619: PPUSH
14620: LD_VAR 0 21
14624: PPUSH
14625: CALL_OW 115
// end else
14629: GO 14645
// begin ComAttackUnit ( i , target2 ) ;
14631: LD_VAR 0 13
14635: PPUSH
14636: LD_VAR 0 22
14640: PPUSH
14641: CALL_OW 115
// end ; end ;
14645: GO 14470
14647: POP
14648: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
14649: LD_INT 22
14651: PUSH
14652: LD_VAR 0 2
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 2
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 24
14673: PUSH
14674: LD_INT 250
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: PPUSH
14686: CALL_OW 69
14690: PUSH
14691: LD_INT 0
14693: EQUAL
14694: IFFALSE 14396
// end ;
14696: LD_VAR 0 12
14700: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14701: LD_INT 0
14703: PPUSH
14704: PPUSH
14705: PPUSH
14706: PPUSH
14707: PPUSH
14708: PPUSH
14709: PPUSH
14710: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14711: LD_ADDR_VAR 0 7
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_VAR 0 1
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 1
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: LD_INT 24
14736: PUSH
14737: LD_INT 550
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 24
14750: PUSH
14751: LD_INT 250
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 69
14771: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14772: LD_ADDR_VAR 0 8
14776: PUSH
14777: LD_INT 22
14779: PUSH
14780: LD_VAR 0 1
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 5
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 25
14814: PUSH
14815: LD_INT 8
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 25
14824: PUSH
14825: LD_INT 9
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 24
14841: PUSH
14842: LD_INT 1000
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14859: LD_ADDR_VAR 0 9
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_VAR 0 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 4
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: ST_TO_ADDR
// if medicCount > 0 then
14895: LD_VAR 0 9
14899: PUSH
14900: LD_INT 0
14902: GREATER
14903: IFFALSE 14977
// begin if damageUnit_list > 0 then
14905: LD_VAR 0 7
14909: PUSH
14910: LD_INT 0
14912: GREATER
14913: IFFALSE 14977
// begin for i in damageUnit_list do
14915: LD_ADDR_VAR 0 5
14919: PUSH
14920: LD_VAR 0 7
14924: PUSH
14925: FOR_IN
14926: IFFALSE 14975
// begin ComMoveToArea ( i , healArea ) ;
14928: LD_VAR 0 5
14932: PPUSH
14933: LD_VAR 0 2
14937: PPUSH
14938: CALL_OW 113
// for j in medicCount do
14942: LD_ADDR_VAR 0 6
14946: PUSH
14947: LD_VAR 0 9
14951: PUSH
14952: FOR_IN
14953: IFFALSE 14971
// AddComHeal ( j , i ) ;
14955: LD_VAR 0 6
14959: PPUSH
14960: LD_VAR 0 5
14964: PPUSH
14965: CALL_OW 188
14969: GO 14952
14971: POP
14972: POP
// end ;
14973: GO 14925
14975: POP
14976: POP
// end ; end ; if soldiersOK_list > 0 then
14977: LD_VAR 0 8
14981: PUSH
14982: LD_INT 0
14984: GREATER
14985: IFFALSE 15176
// begin for i in soldiersOK_list do
14987: LD_ADDR_VAR 0 5
14991: PUSH
14992: LD_VAR 0 8
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15174
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15000: LD_ADDR_VAR 0 10
15004: PUSH
15005: LD_INT 22
15007: PUSH
15008: LD_VAR 0 3
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PPUSH
15017: CALL_OW 69
15021: PPUSH
15022: LD_VAR 0 5
15026: PPUSH
15027: CALL_OW 74
15031: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15032: LD_ADDR_VAR 0 11
15036: PUSH
15037: LD_INT 22
15039: PUSH
15040: LD_VAR 0 3
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 2
15051: PUSH
15052: LD_INT 59
15054: PUSH
15055: EMPTY
15056: LIST
15057: PUSH
15058: LD_INT 21
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 21
15070: PUSH
15071: LD_INT 2
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: PPUSH
15096: LD_VAR 0 5
15100: PPUSH
15101: CALL_OW 74
15105: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15106: LD_VAR 0 5
15110: PPUSH
15111: LD_VAR 0 10
15115: PPUSH
15116: CALL_OW 296
15120: PUSH
15121: LD_INT 8
15123: PLUS
15124: PUSH
15125: LD_VAR 0 5
15129: PPUSH
15130: LD_VAR 0 11
15134: PPUSH
15135: CALL_OW 296
15139: LESS
15140: IFFALSE 15158
// begin ComAttackUnit ( i , target1 ) ;
15142: LD_VAR 0 5
15146: PPUSH
15147: LD_VAR 0 10
15151: PPUSH
15152: CALL_OW 115
// end else
15156: GO 15172
// begin ComAttackUnit ( i , target2 ) ;
15158: LD_VAR 0 5
15162: PPUSH
15163: LD_VAR 0 11
15167: PPUSH
15168: CALL_OW 115
// end ; end ;
15172: GO 14997
15174: POP
15175: POP
// end ; end ;
15176: LD_VAR 0 4
15180: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15181: LD_INT 0
15183: PPUSH
15184: PPUSH
// list := [ ] ;
15185: LD_ADDR_VAR 0 5
15189: PUSH
15190: EMPTY
15191: ST_TO_ADDR
// case d of 0 :
15192: LD_VAR 0 3
15196: PUSH
15197: LD_INT 0
15199: DOUBLE
15200: EQUAL
15201: IFTRUE 15205
15203: GO 15338
15205: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15206: LD_ADDR_VAR 0 5
15210: PUSH
15211: LD_VAR 0 1
15215: PUSH
15216: LD_INT 4
15218: MINUS
15219: PUSH
15220: LD_VAR 0 2
15224: PUSH
15225: LD_INT 4
15227: MINUS
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: LD_INT 3
15244: MINUS
15245: PUSH
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: PUSH
15259: LD_VAR 0 1
15263: PUSH
15264: LD_INT 4
15266: PLUS
15267: PUSH
15268: LD_VAR 0 2
15272: PUSH
15273: LD_INT 4
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: PUSH
15281: LD_VAR 0 1
15285: PUSH
15286: LD_INT 3
15288: PLUS
15289: PUSH
15290: LD_VAR 0 2
15294: PUSH
15295: LD_INT 3
15297: PLUS
15298: PUSH
15299: LD_INT 5
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: PUSH
15307: LD_VAR 0 1
15311: PUSH
15312: LD_VAR 0 2
15316: PUSH
15317: LD_INT 4
15319: PLUS
15320: PUSH
15321: LD_INT 0
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: ST_TO_ADDR
// end ; 1 :
15336: GO 16036
15338: LD_INT 1
15340: DOUBLE
15341: EQUAL
15342: IFTRUE 15346
15344: GO 15479
15346: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
15347: LD_ADDR_VAR 0 5
15351: PUSH
15352: LD_VAR 0 1
15356: PUSH
15357: LD_VAR 0 2
15361: PUSH
15362: LD_INT 4
15364: MINUS
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: PUSH
15374: LD_VAR 0 1
15378: PUSH
15379: LD_INT 3
15381: MINUS
15382: PUSH
15383: LD_VAR 0 2
15387: PUSH
15388: LD_INT 3
15390: MINUS
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: PUSH
15400: LD_VAR 0 1
15404: PUSH
15405: LD_INT 4
15407: MINUS
15408: PUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PUSH
15422: LD_VAR 0 1
15426: PUSH
15427: LD_VAR 0 2
15431: PUSH
15432: LD_INT 3
15434: PLUS
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 1
15448: PUSH
15449: LD_INT 4
15451: PLUS
15452: PUSH
15453: LD_VAR 0 2
15457: PUSH
15458: LD_INT 4
15460: PLUS
15461: PUSH
15462: LD_INT 5
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: ST_TO_ADDR
// end ; 2 :
15477: GO 16036
15479: LD_INT 2
15481: DOUBLE
15482: EQUAL
15483: IFTRUE 15487
15485: GO 15616
15487: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
15488: LD_ADDR_VAR 0 5
15492: PUSH
15493: LD_VAR 0 1
15497: PUSH
15498: LD_VAR 0 2
15502: PUSH
15503: LD_INT 3
15505: MINUS
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: LD_VAR 0 1
15519: PUSH
15520: LD_INT 4
15522: PLUS
15523: PUSH
15524: LD_VAR 0 2
15528: PUSH
15529: LD_INT 4
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_VAR 0 1
15541: PUSH
15542: LD_VAR 0 2
15546: PUSH
15547: LD_INT 4
15549: PLUS
15550: PUSH
15551: LD_INT 0
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: PUSH
15559: LD_VAR 0 1
15563: PUSH
15564: LD_INT 3
15566: MINUS
15567: PUSH
15568: LD_VAR 0 2
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: LD_VAR 0 1
15585: PUSH
15586: LD_INT 4
15588: MINUS
15589: PUSH
15590: LD_VAR 0 2
15594: PUSH
15595: LD_INT 4
15597: MINUS
15598: PUSH
15599: LD_INT 2
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: ST_TO_ADDR
// end ; 3 :
15614: GO 16036
15616: LD_INT 3
15618: DOUBLE
15619: EQUAL
15620: IFTRUE 15624
15622: GO 15757
15624: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
15625: LD_ADDR_VAR 0 5
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 3
15637: PLUS
15638: PUSH
15639: LD_VAR 0 2
15643: PUSH
15644: LD_INT 4
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: LIST
15651: PUSH
15652: LD_VAR 0 1
15656: PUSH
15657: LD_INT 4
15659: PLUS
15660: PUSH
15661: LD_VAR 0 2
15665: PUSH
15666: LD_INT 4
15668: PLUS
15669: PUSH
15670: LD_INT 5
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: PUSH
15678: LD_VAR 0 1
15682: PUSH
15683: LD_INT 4
15685: MINUS
15686: PUSH
15687: LD_VAR 0 2
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: LD_VAR 0 1
15704: PUSH
15705: LD_VAR 0 2
15709: PUSH
15710: LD_INT 4
15712: MINUS
15713: PUSH
15714: LD_INT 3
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: PUSH
15722: LD_VAR 0 1
15726: PUSH
15727: LD_INT 3
15729: MINUS
15730: PUSH
15731: LD_VAR 0 2
15735: PUSH
15736: LD_INT 3
15738: MINUS
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: ST_TO_ADDR
// end ; 4 :
15755: GO 16036
15757: LD_INT 4
15759: DOUBLE
15760: EQUAL
15761: IFTRUE 15765
15763: GO 15898
15765: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
15766: LD_ADDR_VAR 0 5
15770: PUSH
15771: LD_VAR 0 1
15775: PUSH
15776: LD_VAR 0 2
15780: PUSH
15781: LD_INT 4
15783: PLUS
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: LD_VAR 0 1
15797: PUSH
15798: LD_INT 3
15800: PLUS
15801: PUSH
15802: LD_VAR 0 2
15806: PUSH
15807: LD_INT 3
15809: PLUS
15810: PUSH
15811: LD_INT 5
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: PUSH
15819: LD_VAR 0 1
15823: PUSH
15824: LD_INT 3
15826: PLUS
15827: PUSH
15828: LD_VAR 0 2
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: LD_VAR 0 1
15845: PUSH
15846: LD_VAR 0 2
15850: PUSH
15851: LD_INT 3
15853: MINUS
15854: PUSH
15855: LD_INT 3
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: PUSH
15863: LD_VAR 0 1
15867: PUSH
15868: LD_INT 4
15870: MINUS
15871: PUSH
15872: LD_VAR 0 2
15876: PUSH
15877: LD_INT 4
15879: MINUS
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: ST_TO_ADDR
// end ; 5 :
15896: GO 16036
15898: LD_INT 5
15900: DOUBLE
15901: EQUAL
15902: IFTRUE 15906
15904: GO 16035
15906: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
15907: LD_ADDR_VAR 0 5
15911: PUSH
15912: LD_VAR 0 1
15916: PUSH
15917: LD_INT 4
15919: MINUS
15920: PUSH
15921: LD_VAR 0 2
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: LD_VAR 0 1
15938: PUSH
15939: LD_VAR 0 2
15943: PUSH
15944: LD_INT 4
15946: MINUS
15947: PUSH
15948: LD_INT 3
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: LD_VAR 0 1
15960: PUSH
15961: LD_INT 4
15963: PLUS
15964: PUSH
15965: LD_VAR 0 2
15969: PUSH
15970: LD_INT 4
15972: PLUS
15973: PUSH
15974: LD_INT 5
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: PUSH
15982: LD_VAR 0 1
15986: PUSH
15987: LD_INT 3
15989: PLUS
15990: PUSH
15991: LD_VAR 0 2
15995: PUSH
15996: LD_INT 4
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: LD_VAR 0 1
16008: PUSH
16009: LD_VAR 0 2
16013: PUSH
16014: LD_INT 3
16016: PLUS
16017: PUSH
16018: LD_INT 0
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: ST_TO_ADDR
// end ; end ;
16033: GO 16036
16035: POP
// result := list ;
16036: LD_ADDR_VAR 0 4
16040: PUSH
16041: LD_VAR 0 5
16045: ST_TO_ADDR
// end ; end_of_file
16046: LD_VAR 0 4
16050: RET
// every 1 do var i ;
16051: GO 16053
16053: DISABLE
16054: LD_INT 0
16056: PPUSH
// begin InGameOn ;
16057: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16061: LD_INT 53
16063: PPUSH
16064: LD_INT 40
16066: PPUSH
16067: CALL_OW 84
// wait ( 0 0$5 ) ;
16071: LD_INT 175
16073: PPUSH
16074: CALL_OW 67
// if gammaCommander = 1 then
16078: LD_EXP 11
16082: PUSH
16083: LD_INT 1
16085: EQUAL
16086: IFFALSE 16097
// CenterNowOnUnits ( Donaldson ) ;
16088: LD_EXP 3
16092: PPUSH
16093: CALL_OW 87
// if gammaCommander = 2 then
16097: LD_EXP 11
16101: PUSH
16102: LD_INT 2
16104: EQUAL
16105: IFFALSE 16116
// CenterNowOnUnits ( Brown ) ;
16107: LD_EXP 2
16111: PPUSH
16112: CALL_OW 87
// if gammaCommander = 3 then
16116: LD_EXP 11
16120: PUSH
16121: LD_INT 3
16123: EQUAL
16124: IFFALSE 16135
// CenterNowOnUnits ( Houten ) ;
16126: LD_EXP 12
16130: PPUSH
16131: CALL_OW 87
// if gammaCommander = 1 then
16135: LD_EXP 11
16139: PUSH
16140: LD_INT 1
16142: EQUAL
16143: IFFALSE 16157
// Say ( Donaldson , D1-Don-1 ) ;
16145: LD_EXP 3
16149: PPUSH
16150: LD_STRING D1-Don-1
16152: PPUSH
16153: CALL_OW 88
// if gammaCommander = 2 then
16157: LD_EXP 11
16161: PUSH
16162: LD_INT 2
16164: EQUAL
16165: IFFALSE 16179
// Say ( Brown , D1-Brown-1 ) ;
16167: LD_EXP 2
16171: PPUSH
16172: LD_STRING D1-Brown-1
16174: PPUSH
16175: CALL_OW 88
// if gammaCommander = 3 then
16179: LD_EXP 11
16183: PUSH
16184: LD_INT 3
16186: EQUAL
16187: IFFALSE 16201
// Say ( Houten , D1-VanH-1 ) ;
16189: LD_EXP 12
16193: PPUSH
16194: LD_STRING D1-VanH-1
16196: PPUSH
16197: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
16201: LD_EXP 21
16205: PPUSH
16206: LD_STRING D1-Har-1
16208: PPUSH
16209: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
16213: LD_INT 53
16215: PPUSH
16216: LD_INT 40
16218: PPUSH
16219: CALL_OW 84
// if gammaCommander = 1 then
16223: LD_EXP 11
16227: PUSH
16228: LD_INT 1
16230: EQUAL
16231: IFFALSE 16245
// Say ( Donaldson , D1-Don-2 ) ;
16233: LD_EXP 3
16237: PPUSH
16238: LD_STRING D1-Don-2
16240: PPUSH
16241: CALL_OW 88
// if gammaCommander = 2 then
16245: LD_EXP 11
16249: PUSH
16250: LD_INT 2
16252: EQUAL
16253: IFFALSE 16267
// Say ( Brown , D1-Brown-2 ) ;
16255: LD_EXP 2
16259: PPUSH
16260: LD_STRING D1-Brown-2
16262: PPUSH
16263: CALL_OW 88
// if gammaCommander = 3 then
16267: LD_EXP 11
16271: PUSH
16272: LD_INT 3
16274: EQUAL
16275: IFFALSE 16289
// Say ( Houten , D1-VanH-2 ) ;
16277: LD_EXP 12
16281: PPUSH
16282: LD_STRING D1-VanH-2
16284: PPUSH
16285: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
16289: LD_EXP 21
16293: PPUSH
16294: LD_STRING D1-Har-2
16296: PPUSH
16297: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
16301: LD_INT 22
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 33
16313: PUSH
16314: LD_INT 2
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 61
16323: PUSH
16324: EMPTY
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: PPUSH
16332: CALL_OW 69
16336: IFFALSE 16401
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
16338: LD_ADDR_VAR 0 1
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 33
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 61
16365: PUSH
16366: EMPTY
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: LIST
16373: PPUSH
16374: CALL_OW 69
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16399
// ComAgressiveMove ( i , 70 , 41 ) ;
16382: LD_VAR 0 1
16386: PPUSH
16387: LD_INT 70
16389: PPUSH
16390: LD_INT 41
16392: PPUSH
16393: CALL_OW 114
16397: GO 16379
16399: POP
16400: POP
// repeat wait ( 0 0$1 ) ;
16401: LD_INT 35
16403: PPUSH
16404: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
16408: LD_ADDR_VAR 0 1
16412: PUSH
16413: LD_INT 22
16415: PUSH
16416: LD_INT 6
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: PPUSH
16426: CALL_OW 69
16430: PUSH
16431: FOR_IN
16432: IFFALSE 16451
// ComAgressiveMove ( i , 54 , 20 ) ;
16434: LD_VAR 0 1
16438: PPUSH
16439: LD_INT 54
16441: PPUSH
16442: LD_INT 20
16444: PPUSH
16445: CALL_OW 114
16449: GO 16431
16451: POP
16452: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
16453: LD_ADDR_VAR 0 1
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_INT 1
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 25
16470: PUSH
16471: LD_INT 1
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: LD_INT 54
16483: PUSH
16484: EMPTY
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PPUSH
16496: CALL_OW 69
16500: PUSH
16501: FOR_IN
16502: IFFALSE 16536
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
16504: LD_VAR 0 1
16508: PPUSH
16509: LD_INT 70
16511: PPUSH
16512: LD_INT 41
16514: PPUSH
16515: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
16519: LD_VAR 0 1
16523: PPUSH
16524: LD_INT 46
16526: PPUSH
16527: LD_INT 39
16529: PPUSH
16530: CALL_OW 174
// end ;
16534: GO 16501
16536: POP
16537: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
16538: LD_ADDR_VAR 0 1
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 21
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 3
16565: PUSH
16566: LD_INT 24
16568: PUSH
16569: LD_INT 500
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: PUSH
16590: FOR_IN
16591: IFFALSE 16624
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
16593: LD_VAR 0 1
16597: PPUSH
16598: LD_EXP 36
16602: PPUSH
16603: CALL_OW 250
16607: PPUSH
16608: LD_EXP 36
16612: PPUSH
16613: CALL_OW 251
16617: PPUSH
16618: CALL_OW 111
16622: GO 16590
16624: POP
16625: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
16626: LD_INT 22
16628: PUSH
16629: LD_INT 6
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 21
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 24
16648: PUSH
16649: LD_INT 250
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: PPUSH
16661: CALL_OW 69
16665: PUSH
16666: LD_INT 6
16668: LESS
16669: IFFALSE 16401
// InGameOff ;
16671: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
16675: LD_STRING M1
16677: PPUSH
16678: CALL_OW 337
// SaveForQuickRestart ;
16682: CALL_OW 22
// startCutscene = 0 ;
16686: LD_ADDR_EXP 37
16690: PUSH
16691: LD_INT 0
16693: ST_TO_ADDR
// end ;
16694: PPOPN 1
16696: END
// every 1 1$0 do
16697: GO 16699
16699: DISABLE
// begin PrepareSupportFromDelta ;
16700: CALL 2704 0 0
// firstAttack = 1 ;
16704: LD_ADDR_EXP 32
16708: PUSH
16709: LD_INT 1
16711: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16712: LD_EXP 8
16716: PPUSH
16717: CALL_OW 302
16721: IFFALSE 16737
// begin Say ( Gladstone , D2-Glad-1 ) ;
16723: LD_EXP 8
16727: PPUSH
16728: LD_STRING D2-Glad-1
16730: PPUSH
16731: CALL_OW 88
// end else
16735: GO 16839
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16737: LD_INT 4
16739: PPUSH
16740: LD_INT 22
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 21
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: LD_INT 25
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 25
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 25
16795: PUSH
16796: LD_INT 4
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: PPUSH
16815: CALL_OW 70
16819: PUSH
16820: LD_EXP 14
16824: PUSH
16825: EMPTY
16826: LIST
16827: DIFF
16828: PPUSH
16829: LD_STRING D2-Sol1-1
16831: PPUSH
16832: LD_STRING D2-FSol1-1
16834: PPUSH
16835: CALL 6160 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
16839: LD_EXP 3
16843: PPUSH
16844: CALL_OW 302
16848: PUSH
16849: LD_EXP 11
16853: PUSH
16854: LD_INT 1
16856: EQUAL
16857: AND
16858: IFFALSE 16872
// Say ( Donaldson , D2-Don-1 ) ;
16860: LD_EXP 3
16864: PPUSH
16865: LD_STRING D2-Don-1
16867: PPUSH
16868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16872: LD_EXP 2
16876: PPUSH
16877: CALL_OW 302
16881: PUSH
16882: LD_EXP 11
16886: PUSH
16887: LD_INT 2
16889: EQUAL
16890: AND
16891: IFFALSE 16905
// Say ( Brown , D2-Brown-1 ) ;
16893: LD_EXP 2
16897: PPUSH
16898: LD_STRING D2-Brown-1
16900: PPUSH
16901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16905: LD_EXP 12
16909: PPUSH
16910: CALL_OW 302
16914: PUSH
16915: LD_EXP 11
16919: PUSH
16920: LD_INT 3
16922: EQUAL
16923: AND
16924: IFFALSE 16938
// Say ( Houten , D2-VanH-1 ) ;
16926: LD_EXP 12
16930: PPUSH
16931: LD_STRING D2-VanH-1
16933: PPUSH
16934: CALL_OW 88
// end ;
16938: END
// every 0 0$1 do
16939: GO 16941
16941: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
16942: LD_STRING 07_time
16944: PPUSH
16945: LD_INT 0
16947: PPUSH
16948: CALL_OW 30
16952: PUSH
16953: LD_INT 3
16955: DIV
16956: PPUSH
16957: CALL_OW 67
// PrepareMacmillanSquad ;
16961: CALL 3319 0 0
// CenterNowOnUnits ( JMM ) ;
16965: LD_EXP 1
16969: PPUSH
16970: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
16974: LD_EXP 1
16978: PPUSH
16979: LD_STRING D3-JMM-1
16981: PPUSH
16982: CALL_OW 88
// JMMArrive = 1 ;
16986: LD_ADDR_EXP 38
16990: PUSH
16991: LD_INT 1
16993: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16994: LD_EXP 3
16998: PPUSH
16999: CALL_OW 302
17003: PUSH
17004: LD_EXP 11
17008: PUSH
17009: LD_INT 1
17011: EQUAL
17012: AND
17013: IFFALSE 17029
// begin Say ( Donaldson , D3-Don-1 ) ;
17015: LD_EXP 3
17019: PPUSH
17020: LD_STRING D3-Don-1
17022: PPUSH
17023: CALL_OW 88
// end else
17027: GO 17081
// begin if gammaCommander = 1 then
17029: LD_EXP 11
17033: PUSH
17034: LD_INT 1
17036: EQUAL
17037: IFFALSE 17081
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17039: LD_EXP 10
17043: PPUSH
17044: LD_INT 26
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 72
17058: PPUSH
17059: LD_STRING D3-Sol1-1
17061: PPUSH
17062: LD_STRING D3-Sol1-1
17064: PPUSH
17065: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17069: LD_EXP 1
17073: PPUSH
17074: LD_STRING D3-JMM-2
17076: PPUSH
17077: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17081: LD_EXP 2
17085: PPUSH
17086: CALL_OW 302
17090: PUSH
17091: LD_EXP 11
17095: PUSH
17096: LD_INT 2
17098: EQUAL
17099: AND
17100: IFFALSE 17116
// begin Say ( Brown , D3-Brown-1 ) ;
17102: LD_EXP 2
17106: PPUSH
17107: LD_STRING D3-Brown-1
17109: PPUSH
17110: CALL_OW 88
// end else
17114: GO 17168
// begin if gammaCommander = 2 then
17116: LD_EXP 11
17120: PUSH
17121: LD_INT 2
17123: EQUAL
17124: IFFALSE 17168
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17126: LD_EXP 10
17130: PPUSH
17131: LD_INT 26
17133: PUSH
17134: LD_INT 1
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 72
17145: PPUSH
17146: LD_STRING D3-Sol1-1a
17148: PPUSH
17149: LD_STRING D3-Sol1-1a
17151: PPUSH
17152: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17156: LD_EXP 1
17160: PPUSH
17161: LD_STRING D3-JMM-2
17163: PPUSH
17164: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17168: LD_EXP 12
17172: PPUSH
17173: CALL_OW 302
17177: PUSH
17178: LD_EXP 11
17182: PUSH
17183: LD_INT 3
17185: EQUAL
17186: AND
17187: IFFALSE 17203
// begin Say ( Houten , D3-VanH-1 ) ;
17189: LD_EXP 12
17193: PPUSH
17194: LD_STRING D3-VanH-1
17196: PPUSH
17197: CALL_OW 88
// end else
17201: GO 17255
// begin if gammaCommander = 3 then
17203: LD_EXP 11
17207: PUSH
17208: LD_INT 3
17210: EQUAL
17211: IFFALSE 17255
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17213: LD_EXP 10
17217: PPUSH
17218: LD_INT 26
17220: PUSH
17221: LD_INT 1
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 72
17232: PPUSH
17233: LD_STRING D3-Sol1-1b
17235: PPUSH
17236: LD_STRING D3-Sol1-1b
17238: PPUSH
17239: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17243: LD_EXP 1
17247: PPUSH
17248: LD_STRING D3-JMM-2
17250: PPUSH
17251: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17255: LD_EXP 14
17259: PPUSH
17260: CALL_OW 302
17264: IFFALSE 17292
// begin Say ( Joan , D3a-Joan-1 ) ;
17266: LD_EXP 14
17270: PPUSH
17271: LD_STRING D3a-Joan-1
17273: PPUSH
17274: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17278: LD_EXP 1
17282: PPUSH
17283: LD_STRING D3a-JMM-1
17285: PPUSH
17286: CALL_OW 88
// end else
17290: GO 17745
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17292: LD_EXP 3
17296: PPUSH
17297: CALL_OW 302
17301: PUSH
17302: LD_EXP 11
17306: PUSH
17307: LD_INT 1
17309: EQUAL
17310: AND
17311: PUSH
17312: LD_STRING 06_JoanStatus_1
17314: PPUSH
17315: LD_INT 0
17317: PPUSH
17318: CALL_OW 30
17322: PUSH
17323: LD_INT 1
17325: EQUAL
17326: AND
17327: IFFALSE 17378
// begin Say ( Donaldson , D3b-Don-1 ) ;
17329: LD_EXP 3
17333: PPUSH
17334: LD_STRING D3b-Don-1
17336: PPUSH
17337: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17341: LD_EXP 1
17345: PPUSH
17346: LD_STRING D3b-JMM-2
17348: PPUSH
17349: CALL_OW 88
// if IsOK ( Lisa ) then
17353: LD_EXP 6
17357: PPUSH
17358: CALL_OW 302
17362: IFFALSE 17376
// Say ( Lisa , D3b-Lisa-2 ) ;
17364: LD_EXP 6
17368: PPUSH
17369: LD_STRING D3b-Lisa-2
17371: PPUSH
17372: CALL_OW 88
// end else
17376: GO 17443
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17378: LD_EXP 10
17382: PPUSH
17383: LD_INT 26
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PPUSH
17393: CALL_OW 72
17397: PPUSH
17398: LD_STRING D3b-Sol1-1
17400: PPUSH
17401: LD_STRING D3b-Sol1-1
17403: PPUSH
17404: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17408: LD_EXP 1
17412: PPUSH
17413: LD_STRING D3b-JMM-2
17415: PPUSH
17416: CALL_OW 88
// if IsOK ( Lisa ) then
17420: LD_EXP 6
17424: PPUSH
17425: CALL_OW 302
17429: IFFALSE 17443
// Say ( Lisa , D3b-Lisa-2 ) ;
17431: LD_EXP 6
17435: PPUSH
17436: LD_STRING D3b-Lisa-2
17438: PPUSH
17439: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17443: LD_EXP 2
17447: PPUSH
17448: CALL_OW 302
17452: PUSH
17453: LD_EXP 11
17457: PUSH
17458: LD_INT 2
17460: EQUAL
17461: AND
17462: PUSH
17463: LD_STRING 06_JoanStatus_1
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: CALL_OW 30
17473: PUSH
17474: LD_INT 1
17476: EQUAL
17477: AND
17478: IFFALSE 17529
// begin Say ( Brown , D3b-Brown-1 ) ;
17480: LD_EXP 2
17484: PPUSH
17485: LD_STRING D3b-Brown-1
17487: PPUSH
17488: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17492: LD_EXP 1
17496: PPUSH
17497: LD_STRING D3b-JMM-2
17499: PPUSH
17500: CALL_OW 88
// if IsOK ( Lisa ) then
17504: LD_EXP 6
17508: PPUSH
17509: CALL_OW 302
17513: IFFALSE 17527
// Say ( Lisa , D3b-Lisa-2 ) ;
17515: LD_EXP 6
17519: PPUSH
17520: LD_STRING D3b-Lisa-2
17522: PPUSH
17523: CALL_OW 88
// end else
17527: GO 17594
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17529: LD_EXP 10
17533: PPUSH
17534: LD_INT 26
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 72
17548: PPUSH
17549: LD_STRING D3b-Sol1-1
17551: PPUSH
17552: LD_STRING D3b-Sol1-1
17554: PPUSH
17555: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17559: LD_EXP 1
17563: PPUSH
17564: LD_STRING D3b-JMM-2
17566: PPUSH
17567: CALL_OW 88
// if IsOK ( Lisa ) then
17571: LD_EXP 6
17575: PPUSH
17576: CALL_OW 302
17580: IFFALSE 17594
// Say ( Lisa , D3b-Lisa-2 ) ;
17582: LD_EXP 6
17586: PPUSH
17587: LD_STRING D3b-Lisa-2
17589: PPUSH
17590: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17594: LD_EXP 12
17598: PPUSH
17599: CALL_OW 302
17603: PUSH
17604: LD_EXP 11
17608: PUSH
17609: LD_INT 3
17611: EQUAL
17612: AND
17613: PUSH
17614: LD_STRING 06_JoanStatus_1
17616: PPUSH
17617: LD_INT 0
17619: PPUSH
17620: CALL_OW 30
17624: PUSH
17625: LD_INT 1
17627: EQUAL
17628: AND
17629: IFFALSE 17680
// begin Say ( Houten , D3b-VanH-1 ) ;
17631: LD_EXP 12
17635: PPUSH
17636: LD_STRING D3b-VanH-1
17638: PPUSH
17639: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17643: LD_EXP 1
17647: PPUSH
17648: LD_STRING D3b-JMM-2
17650: PPUSH
17651: CALL_OW 88
// if IsOK ( Lisa ) then
17655: LD_EXP 6
17659: PPUSH
17660: CALL_OW 302
17664: IFFALSE 17678
// Say ( Lisa , D3b-Lisa-2 ) ;
17666: LD_EXP 6
17670: PPUSH
17671: LD_STRING D3b-Lisa-2
17673: PPUSH
17674: CALL_OW 88
// end else
17678: GO 17745
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17680: LD_EXP 10
17684: PPUSH
17685: LD_INT 26
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PPUSH
17695: CALL_OW 72
17699: PPUSH
17700: LD_STRING D3b-Sol1-1
17702: PPUSH
17703: LD_STRING D3b-Sol1-1
17705: PPUSH
17706: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17710: LD_EXP 1
17714: PPUSH
17715: LD_STRING D3b-JMM-2
17717: PPUSH
17718: CALL_OW 88
// if IsOK ( Lisa ) then
17722: LD_EXP 6
17726: PPUSH
17727: CALL_OW 302
17731: IFFALSE 17745
// Say ( Lisa , D3b-Lisa-2 ) ;
17733: LD_EXP 6
17737: PPUSH
17738: LD_STRING D3b-Lisa-2
17740: PPUSH
17741: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
17745: LD_INT 22
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 21
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 26
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 2
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 25
17800: PUSH
17801: LD_INT 3
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 25
17810: PUSH
17811: LD_INT 4
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: PPUSH
17831: CALL_OW 69
17835: PUSH
17836: LD_EXP 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: DIFF
17844: PPUSH
17845: LD_STRING DCa-Sol1-1
17847: PPUSH
17848: LD_STRING DCa-Sol1-1
17850: PPUSH
17851: CALL 6160 0 3
// Say ( JMM , DCb-JMM-1 ) ;
17855: LD_EXP 1
17859: PPUSH
17860: LD_STRING DCb-JMM-1
17862: PPUSH
17863: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
17867: LD_INT 22
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 21
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 26
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: LD_INT 25
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 25
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 25
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 25
17932: PUSH
17933: LD_INT 4
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: PUSH
17958: LD_EXP 1
17962: PUSH
17963: EMPTY
17964: LIST
17965: DIFF
17966: PPUSH
17967: LD_STRING DCb-Sol1-1
17969: PPUSH
17970: LD_STRING DCb-Sol1-1
17972: PPUSH
17973: CALL 6160 0 3
// Say ( JMM , DCb-JMM-2 ) ;
17977: LD_EXP 1
17981: PPUSH
17982: LD_STRING DCb-JMM-2
17984: PPUSH
17985: CALL_OW 88
// secondAttack = 1 ;
17989: LD_ADDR_EXP 33
17993: PUSH
17994: LD_INT 1
17996: ST_TO_ADDR
// end ;
17997: END
// every 0 0$01 trigger JMMArrive = 1 do
17998: LD_EXP 38
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: IFFALSE 18086
18008: GO 18010
18010: DISABLE
// begin wait ( 3 3$0 ) ;
18011: LD_INT 6300
18013: PPUSH
18014: CALL_OW 67
// DialogueOn ;
18018: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18022: LD_EXP 22
18026: PPUSH
18027: LD_STRING D4-Pow-1
18029: PPUSH
18030: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18034: LD_EXP 1
18038: PPUSH
18039: LD_STRING D4-JMM-1
18041: PPUSH
18042: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18046: LD_EXP 22
18050: PPUSH
18051: LD_STRING D4-Pow-2
18053: PPUSH
18054: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18058: LD_EXP 1
18062: PPUSH
18063: LD_STRING D4-JMM-2
18065: PPUSH
18066: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18070: LD_EXP 22
18074: PPUSH
18075: LD_STRING D4-Pow-3
18077: PPUSH
18078: CALL_OW 94
// DialogueOff ;
18082: CALL_OW 7
// end ;
18086: END
// every 0 0$01 trigger JMMArrive = 1 do
18087: LD_EXP 38
18091: PUSH
18092: LD_INT 1
18094: EQUAL
18095: IFFALSE 18127
18097: GO 18099
18099: DISABLE
// begin wait ( 8 8$0 ) ;
18100: LD_INT 16800
18102: PPUSH
18103: CALL_OW 67
// DialogueOn ;
18107: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18111: LD_EXP 22
18115: PPUSH
18116: LD_STRING D4a-Pow-1
18118: PPUSH
18119: CALL_OW 94
// DialogueOff ;
18123: CALL_OW 7
// end ;
18127: END
// every 0 0$01 trigger JMMArrive = 1 do
18128: LD_EXP 38
18132: PUSH
18133: LD_INT 1
18135: EQUAL
18136: IFFALSE 18181
18138: GO 18140
18140: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18141: LD_INT 21000
18143: PUSH
18144: LD_INT 25200
18146: PUSH
18147: LD_INT 31500
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: PUSH
18155: LD_OWVAR 67
18159: ARRAY
18160: PPUSH
18161: CALL_OW 67
// PrepareSikorsky ;
18165: CALL 4744 0 0
// SikorskyArrive = 1 ;
18169: LD_ADDR_EXP 17
18173: PUSH
18174: LD_INT 1
18176: ST_TO_ADDR
// PrepareSikorskyArmy ;
18177: CALL 4884 0 0
// end ;
18181: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18182: LD_EXP 16
18186: PPUSH
18187: LD_INT 5
18189: PPUSH
18190: CALL_OW 308
18194: IFFALSE 18386
18196: GO 18198
18198: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18199: LD_EXP 16
18203: PPUSH
18204: CALL_OW 87
// DialogueOn ;
18208: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18212: LD_EXP 15
18216: PPUSH
18217: LD_STRING D5-Sik-1
18219: PPUSH
18220: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
18224: LD_EXP 1
18228: PPUSH
18229: LD_STRING D5-JMM-1a
18231: PPUSH
18232: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18236: LD_EXP 15
18240: PPUSH
18241: LD_STRING D5-Sik-2
18243: PPUSH
18244: CALL_OW 88
// case query ( QSikorski ) of 1 :
18248: LD_STRING QSikorski
18250: PPUSH
18251: CALL_OW 97
18255: PUSH
18256: LD_INT 1
18258: DOUBLE
18259: EQUAL
18260: IFTRUE 18264
18262: GO 18287
18264: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18265: LD_EXP 15
18269: PPUSH
18270: LD_STRING D5a-Sik-1
18272: PPUSH
18273: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
18277: LD_ADDR_EXP 18
18281: PUSH
18282: LD_INT 2100
18284: ST_TO_ADDR
// end ; 2 :
18285: GO 18374
18287: LD_INT 2
18289: DOUBLE
18290: EQUAL
18291: IFTRUE 18295
18293: GO 18318
18295: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18296: LD_EXP 15
18300: PPUSH
18301: LD_STRING D5b-Sik-1
18303: PPUSH
18304: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18308: LD_ADDR_EXP 18
18312: PUSH
18313: LD_INT 10500
18315: ST_TO_ADDR
// end ; 3 :
18316: GO 18374
18318: LD_INT 3
18320: DOUBLE
18321: EQUAL
18322: IFTRUE 18326
18324: GO 18373
18326: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18327: LD_EXP 15
18331: PPUSH
18332: LD_STRING D5c-Sik-1
18334: PPUSH
18335: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18339: LD_EXP 1
18343: PPUSH
18344: LD_STRING D5c-JMM-1
18346: PPUSH
18347: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18351: LD_EXP 15
18355: PPUSH
18356: LD_STRING D5c-Sik-2
18358: PPUSH
18359: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18363: LD_ADDR_EXP 18
18367: PUSH
18368: LD_INT 10500
18370: ST_TO_ADDR
// end ; end ;
18371: GO 18374
18373: POP
// DialogueOff ;
18374: CALL_OW 7
// timerStatus = 1 ;
18378: LD_ADDR_EXP 34
18382: PUSH
18383: LD_INT 1
18385: ST_TO_ADDR
// end ;
18386: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
18387: LD_EXP 18
18391: PUSH
18392: LD_INT 35
18394: LESS
18395: IFFALSE 18443
18397: GO 18399
18399: DISABLE
// begin timerStatus = 0 ;
18400: LD_ADDR_EXP 34
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// DialogueOn ;
18408: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18412: LD_EXP 15
18416: PPUSH
18417: LD_STRING D6-Sik-1
18419: PPUSH
18420: CALL_OW 88
// DialogueOff ;
18424: CALL_OW 7
// SikorskyAI = 1 ;
18428: LD_ADDR_EXP 19
18432: PUSH
18433: LD_INT 1
18435: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
18436: LD_STRING M2
18438: PPUSH
18439: CALL_OW 337
// end ;
18443: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
18444: LD_EXP 16
18448: PPUSH
18449: LD_INT 18
18451: PPUSH
18452: CALL_OW 308
18456: IFFALSE 18540
18458: GO 18460
18460: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18461: LD_EXP 15
18465: PPUSH
18466: LD_STRING D7-Sik-1
18468: PPUSH
18469: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
18473: LD_EXP 1
18477: PPUSH
18478: LD_INT 24
18480: PPUSH
18481: CALL_OW 308
18485: PUSH
18486: LD_EXP 1
18490: PPUSH
18491: CALL_OW 310
18495: OR
18496: IFFALSE 18520
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18498: LD_EXP 15
18502: PPUSH
18503: LD_STRING D7a-Sik-1
18505: PPUSH
18506: CALL_OW 88
// SikorskyStatus = 1 ;
18510: LD_ADDR_EXP 20
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// end else
18518: GO 18540
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18520: LD_EXP 15
18524: PPUSH
18525: LD_STRING D7b-Sik-1
18527: PPUSH
18528: CALL_OW 88
// SikorskyStatus = 2 ;
18532: LD_ADDR_EXP 20
18536: PUSH
18537: LD_INT 2
18539: ST_TO_ADDR
// end ; end ;
18540: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18541: LD_EXP 35
18545: PUSH
18546: LD_INT 1
18548: EQUAL
18549: IFFALSE 18658
18551: GO 18553
18553: DISABLE
18554: LD_INT 0
18556: PPUSH
// begin enable ;
18557: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18558: LD_ADDR_VAR 0 1
18562: PUSH
18563: LD_INT 22
18565: PUSH
18566: LD_INT 3
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PPUSH
18573: CALL_OW 69
18577: PUSH
18578: FOR_IN
18579: IFFALSE 18606
// if IsInArea ( i , RussianEscape ) then
18581: LD_VAR 0 1
18585: PPUSH
18586: LD_INT 22
18588: PPUSH
18589: CALL_OW 308
18593: IFFALSE 18604
// RemoveUnit ( i ) ;
18595: LD_VAR 0 1
18599: PPUSH
18600: CALL_OW 64
18604: GO 18578
18606: POP
18607: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18608: LD_ADDR_VAR 0 1
18612: PUSH
18613: LD_INT 22
18615: PUSH
18616: LD_INT 6
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PPUSH
18623: CALL_OW 69
18627: PUSH
18628: FOR_IN
18629: IFFALSE 18656
// if IsInArea ( i , RussianEscape ) then
18631: LD_VAR 0 1
18635: PPUSH
18636: LD_INT 22
18638: PPUSH
18639: CALL_OW 308
18643: IFFALSE 18654
// RemoveUnit ( i ) ;
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 64
18654: GO 18628
18656: POP
18657: POP
// end ; end_of_file
18658: PPOPN 1
18660: END
// on BuildingComplete ( building ) do var tmp , un ;
18661: LD_INT 0
18663: PPUSH
18664: PPUSH
// begin if GetSide ( building ) = 3 then
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 255
18674: PUSH
18675: LD_INT 3
18677: EQUAL
18678: IFFALSE 19165
// begin if GetBType ( building ) = b_depot then
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 266
18689: PUSH
18690: LD_INT 0
18692: EQUAL
18693: IFFALSE 18761
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18695: LD_VAR 0 1
18699: PPUSH
18700: CALL_OW 274
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_INT 5000
18710: PPUSH
18711: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18715: LD_VAR 0 1
18719: PPUSH
18720: CALL_OW 274
18724: PPUSH
18725: LD_INT 2
18727: PPUSH
18728: LD_INT 5000
18730: PPUSH
18731: CALL_OW 277
// SetBName ( building , konev ) ;
18735: LD_VAR 0 1
18739: PPUSH
18740: LD_STRING konev
18742: PPUSH
18743: CALL_OW 500
// ruDepot = building ;
18747: LD_ADDR_EXP 27
18751: PUSH
18752: LD_VAR 0 1
18756: ST_TO_ADDR
// BuildRussianBase ;
18757: CALL 6765 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18761: LD_VAR 0 1
18765: PPUSH
18766: CALL_OW 266
18770: PUSH
18771: LD_INT 0
18773: EQUAL
18774: PUSH
18775: LD_VAR 0 1
18779: PPUSH
18780: CALL_OW 266
18784: PUSH
18785: LD_INT 2
18787: EQUAL
18788: OR
18789: PUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 266
18799: PUSH
18800: LD_INT 4
18802: EQUAL
18803: OR
18804: IFFALSE 18815
// ComUpgrade ( building ) ;
18806: LD_VAR 0 1
18810: PPUSH
18811: CALL_OW 146
// if GetBType ( building ) = b_lab then
18815: LD_VAR 0 1
18819: PPUSH
18820: CALL_OW 266
18824: PUSH
18825: LD_INT 6
18827: EQUAL
18828: IFFALSE 18879
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_INT 10
18837: PPUSH
18838: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18842: LD_VAR 0 1
18846: PPUSH
18847: LD_INT 12
18849: PPUSH
18850: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
18854: LD_INT 3
18856: PPUSH
18857: LD_VAR 0 1
18861: PPUSH
18862: LD_INT 3
18864: PPUSH
18865: CALL 7320 0 3
// ruLab = building ;
18869: LD_ADDR_EXP 28
18873: PUSH
18874: LD_VAR 0 1
18878: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL_OW 266
18888: PUSH
18889: LD_INT 32
18891: EQUAL
18892: IFFALSE 19010
// begin uc_side = 3 ;
18894: LD_ADDR_OWVAR 20
18898: PUSH
18899: LD_INT 3
18901: ST_TO_ADDR
// uc_nation = 3 ;
18902: LD_ADDR_OWVAR 21
18906: PUSH
18907: LD_INT 3
18909: ST_TO_ADDR
// hc_gallery =  ;
18910: LD_ADDR_OWVAR 33
18914: PUSH
18915: LD_STRING 
18917: ST_TO_ADDR
// hc_name =  ;
18918: LD_ADDR_OWVAR 26
18922: PUSH
18923: LD_STRING 
18925: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18926: LD_INT 0
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: LD_EXP 24
18936: PPUSH
18937: LD_EXP 25
18941: PPUSH
18942: CALL_OW 12
18946: PPUSH
18947: CALL_OW 380
// un = CreateHuman ;
18951: LD_ADDR_VAR 0 3
18955: PUSH
18956: CALL_OW 44
18960: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
18961: LD_VAR 0 3
18965: PPUSH
18966: LD_VAR 0 1
18970: PPUSH
18971: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: LD_INT 43
18982: PUSH
18983: LD_INT 44
18985: PUSH
18986: LD_INT 46
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PPUSH
18997: LD_INT 3
18999: PPUSH
19000: CALL_OW 12
19004: ARRAY
19005: PPUSH
19006: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 266
19019: PUSH
19020: LD_INT 33
19022: EQUAL
19023: IFFALSE 19060
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19025: LD_VAR 0 1
19029: PPUSH
19030: LD_INT 43
19032: PUSH
19033: LD_INT 44
19035: PUSH
19036: LD_INT 46
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: PPUSH
19047: LD_INT 3
19049: PPUSH
19050: CALL_OW 12
19054: ARRAY
19055: PPUSH
19056: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 266
19069: PUSH
19070: LD_INT 24
19072: EQUAL
19073: IFFALSE 19083
// russianAI = 1 ;
19075: LD_ADDR_EXP 26
19079: PUSH
19080: LD_INT 1
19082: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19083: LD_EXP 30
19087: PUSH
19088: LD_INT 0
19090: GREATER
19091: IFFALSE 19165
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19093: LD_ADDR_EXP 30
19097: PUSH
19098: LD_EXP 30
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 3
19110: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19111: LD_ADDR_EXP 30
19115: PUSH
19116: LD_EXP 30
19120: PPUSH
19121: LD_INT 1
19123: PPUSH
19124: CALL_OW 3
19128: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19129: LD_ADDR_EXP 30
19133: PUSH
19134: LD_EXP 30
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 3
19146: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19147: LD_ADDR_EXP 30
19151: PUSH
19152: LD_EXP 30
19156: PPUSH
19157: LD_INT 1
19159: PPUSH
19160: CALL_OW 3
19164: ST_TO_ADDR
// end ; end ; end ;
19165: PPOPN 3
19167: END
// on UpgradeComplete ( building ) do var i ;
19168: LD_INT 0
19170: PPUSH
// begin if GetSide ( building ) = 3 then
19171: LD_VAR 0 1
19175: PPUSH
19176: CALL_OW 255
19180: PUSH
19181: LD_INT 3
19183: EQUAL
19184: IFFALSE 19365
// begin if GetBType ( building ) = b_factory then
19186: LD_VAR 0 1
19190: PPUSH
19191: CALL_OW 266
19195: PUSH
19196: LD_INT 3
19198: EQUAL
19199: IFFALSE 19266
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_INT 22
19208: PUSH
19209: LD_INT 3
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 25
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PPUSH
19230: CALL_OW 69
19234: PUSH
19235: FOR_IN
19236: IFFALSE 19254
// ComEnterUnit ( i , building ) ;
19238: LD_VAR 0 2
19242: PPUSH
19243: LD_VAR 0 1
19247: PPUSH
19248: CALL_OW 120
19252: GO 19235
19254: POP
19255: POP
// ruFab = building ;
19256: LD_ADDR_EXP 29
19260: PUSH
19261: LD_VAR 0 1
19265: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19266: LD_VAR 0 1
19270: PPUSH
19271: CALL_OW 266
19275: PUSH
19276: LD_INT 8
19278: EQUAL
19279: IFFALSE 19336
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19281: LD_ADDR_VAR 0 2
19285: PUSH
19286: LD_INT 22
19288: PUSH
19289: LD_INT 3
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 25
19298: PUSH
19299: LD_INT 4
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: CALL_OW 69
19314: PUSH
19315: FOR_IN
19316: IFFALSE 19334
// ComEnterUnit ( i , building ) ;
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 120
19332: GO 19315
19334: POP
19335: POP
// if GetBType ( building ) = b_warehouse then
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 266
19345: PUSH
19346: LD_INT 1
19348: EQUAL
19349: IFFALSE 19365
// begin ComEnterUnit ( Borodin , building ) ;
19351: LD_EXP 23
19355: PPUSH
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 120
// end ; end ; end ;
19365: PPOPN 2
19367: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 247
19377: PUSH
19378: LD_INT 2
19380: EQUAL
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 263
19391: PUSH
19392: LD_INT 3
19394: EQUAL
19395: AND
19396: PUSH
19397: LD_EXP 40
19401: PUSH
19402: LD_INT 0
19404: EQUAL
19405: AND
19406: IFFALSE 19524
// begin varEvent1 = 1 ;
19408: LD_ADDR_EXP 40
19412: PUSH
19413: LD_INT 1
19415: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
19425: LD_INT 22
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 21
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 25
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 25
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 25
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 25
19480: PUSH
19481: LD_INT 4
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 69
19504: PUSH
19505: LD_EXP 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: DIFF
19513: PPUSH
19514: LD_STRING DC-Sol1-1
19516: PPUSH
19517: LD_STRING DC-FSol1-1
19519: PPUSH
19520: CALL 6160 0 3
// end ; end ;
19524: PPOPN 1
19526: END
// on UnitDestroyed ( unit ) do var i ;
19527: LD_INT 0
19529: PPUSH
// begin if GetSide ( unit ) = 3 then
19530: LD_VAR 0 1
19534: PPUSH
19535: CALL_OW 255
19539: PUSH
19540: LD_INT 3
19542: EQUAL
19543: IFFALSE 20313
// begin if GetType ( unit ) = unit_building then
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 247
19554: PUSH
19555: LD_INT 3
19557: EQUAL
19558: IFFALSE 20250
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 266
19569: PUSH
19570: LD_INT 31
19572: EQUAL
19573: PUSH
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 266
19583: PUSH
19584: LD_INT 32
19586: EQUAL
19587: OR
19588: PUSH
19589: LD_VAR 0 1
19593: PPUSH
19594: CALL_OW 266
19598: PUSH
19599: LD_INT 36
19601: EQUAL
19602: OR
19603: PUSH
19604: LD_VAR 0 1
19608: PPUSH
19609: CALL_OW 266
19613: PUSH
19614: LD_INT 0
19616: EQUAL
19617: OR
19618: PUSH
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 266
19628: PUSH
19629: LD_INT 24
19631: EQUAL
19632: OR
19633: PUSH
19634: LD_VAR 0 1
19638: PPUSH
19639: CALL_OW 266
19643: PUSH
19644: LD_INT 17
19646: EQUAL
19647: OR
19648: PUSH
19649: LD_VAR 0 1
19653: PPUSH
19654: CALL_OW 266
19658: PUSH
19659: LD_INT 25
19661: EQUAL
19662: OR
19663: PUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 266
19673: PUSH
19674: LD_INT 19
19676: EQUAL
19677: OR
19678: PUSH
19679: LD_VAR 0 1
19683: PPUSH
19684: CALL_OW 266
19688: PUSH
19689: LD_INT 20
19691: EQUAL
19692: OR
19693: PUSH
19694: LD_VAR 0 1
19698: PPUSH
19699: CALL_OW 266
19703: PUSH
19704: LD_INT 18
19706: EQUAL
19707: OR
19708: PUSH
19709: LD_VAR 0 1
19713: PPUSH
19714: CALL_OW 266
19718: PUSH
19719: LD_INT 21
19721: EQUAL
19722: OR
19723: PUSH
19724: LD_VAR 0 1
19728: PPUSH
19729: CALL_OW 266
19733: PUSH
19734: LD_INT 23
19736: EQUAL
19737: OR
19738: PUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 266
19748: PUSH
19749: LD_INT 16
19751: EQUAL
19752: OR
19753: PUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL_OW 266
19763: PUSH
19764: LD_INT 6
19766: EQUAL
19767: OR
19768: PUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 266
19778: PUSH
19779: LD_INT 29
19781: EQUAL
19782: OR
19783: PUSH
19784: LD_VAR 0 1
19788: PPUSH
19789: CALL_OW 266
19793: PUSH
19794: LD_INT 26
19796: EQUAL
19797: OR
19798: PUSH
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 266
19808: PUSH
19809: LD_INT 30
19811: EQUAL
19812: OR
19813: PUSH
19814: LD_VAR 0 1
19818: PPUSH
19819: CALL_OW 266
19823: PUSH
19824: LD_INT 28
19826: EQUAL
19827: OR
19828: PUSH
19829: LD_VAR 0 1
19833: PPUSH
19834: CALL_OW 266
19838: PUSH
19839: LD_INT 27
19841: EQUAL
19842: OR
19843: PUSH
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 266
19853: PUSH
19854: LD_INT 33
19856: EQUAL
19857: OR
19858: PUSH
19859: LD_VAR 0 1
19863: PPUSH
19864: CALL_OW 266
19868: PUSH
19869: LD_INT 2
19871: EQUAL
19872: OR
19873: PUSH
19874: LD_VAR 0 1
19878: PPUSH
19879: CALL_OW 266
19883: PUSH
19884: LD_INT 4
19886: EQUAL
19887: OR
19888: IFFALSE 19974
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
19890: LD_ADDR_EXP 30
19894: PUSH
19895: LD_EXP 30
19899: PUSH
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 266
19909: ADD
19910: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19911: LD_ADDR_EXP 30
19915: PUSH
19916: LD_EXP 30
19920: PUSH
19921: LD_VAR 0 1
19925: PPUSH
19926: CALL_OW 250
19930: ADD
19931: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19932: LD_ADDR_EXP 30
19936: PUSH
19937: LD_EXP 30
19941: PUSH
19942: LD_VAR 0 1
19946: PPUSH
19947: CALL_OW 251
19951: ADD
19952: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19953: LD_ADDR_EXP 30
19957: PUSH
19958: LD_EXP 30
19962: PUSH
19963: LD_VAR 0 1
19967: PPUSH
19968: CALL_OW 254
19972: ADD
19973: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 266
19983: PUSH
19984: LD_INT 1
19986: EQUAL
19987: IFFALSE 20066
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
19989: LD_ADDR_EXP 30
19993: PUSH
19994: LD_EXP 30
19998: PUSH
19999: LD_INT 0
20001: ADD
20002: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20003: LD_ADDR_EXP 30
20007: PUSH
20008: LD_EXP 30
20012: PUSH
20013: LD_VAR 0 1
20017: PPUSH
20018: CALL_OW 250
20022: ADD
20023: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20024: LD_ADDR_EXP 30
20028: PUSH
20029: LD_EXP 30
20033: PUSH
20034: LD_VAR 0 1
20038: PPUSH
20039: CALL_OW 251
20043: ADD
20044: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20045: LD_ADDR_EXP 30
20049: PUSH
20050: LD_EXP 30
20054: PUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 254
20064: ADD
20065: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20066: LD_VAR 0 1
20070: PPUSH
20071: CALL_OW 266
20075: PUSH
20076: LD_INT 3
20078: EQUAL
20079: IFFALSE 20158
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20081: LD_ADDR_EXP 30
20085: PUSH
20086: LD_EXP 30
20090: PUSH
20091: LD_INT 2
20093: ADD
20094: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20095: LD_ADDR_EXP 30
20099: PUSH
20100: LD_EXP 30
20104: PUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 250
20114: ADD
20115: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20116: LD_ADDR_EXP 30
20120: PUSH
20121: LD_EXP 30
20125: PUSH
20126: LD_VAR 0 1
20130: PPUSH
20131: CALL_OW 251
20135: ADD
20136: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20137: LD_ADDR_EXP 30
20141: PUSH
20142: LD_EXP 30
20146: PUSH
20147: LD_VAR 0 1
20151: PPUSH
20152: CALL_OW 254
20156: ADD
20157: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 266
20167: PUSH
20168: LD_INT 5
20170: EQUAL
20171: IFFALSE 20250
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20173: LD_ADDR_EXP 30
20177: PUSH
20178: LD_EXP 30
20182: PUSH
20183: LD_INT 4
20185: ADD
20186: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20187: LD_ADDR_EXP 30
20191: PUSH
20192: LD_EXP 30
20196: PUSH
20197: LD_VAR 0 1
20201: PPUSH
20202: CALL_OW 250
20206: ADD
20207: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20208: LD_ADDR_EXP 30
20212: PUSH
20213: LD_EXP 30
20217: PUSH
20218: LD_VAR 0 1
20222: PPUSH
20223: CALL_OW 251
20227: ADD
20228: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20229: LD_ADDR_EXP 30
20233: PUSH
20234: LD_EXP 30
20238: PUSH
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 254
20248: ADD
20249: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20250: LD_VAR 0 1
20254: PPUSH
20255: CALL_OW 247
20259: PUSH
20260: LD_INT 1
20262: EQUAL
20263: IFFALSE 20313
// begin for i in defenders_list do
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: LD_EXP 31
20274: PUSH
20275: FOR_IN
20276: IFFALSE 20311
// if i = unit then
20278: LD_VAR 0 2
20282: PUSH
20283: LD_VAR 0 1
20287: EQUAL
20288: IFFALSE 20309
// defenders_list = defenders_list diff [ unit ] ;
20290: LD_ADDR_EXP 31
20294: PUSH
20295: LD_EXP 31
20299: PUSH
20300: LD_VAR 0 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: DIFF
20308: ST_TO_ADDR
20309: GO 20275
20311: POP
20312: POP
// end ; end ; end ; end_of_file
20313: PPOPN 2
20315: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20316: GO 20318
20318: DISABLE
20319: LD_INT 0
20321: PPUSH
// begin enemyWayX = [ ] ;
20322: LD_ADDR_EXP 44
20326: PUSH
20327: EMPTY
20328: ST_TO_ADDR
// enemyWayY = [ ] ;
20329: LD_ADDR_EXP 45
20333: PUSH
20334: EMPTY
20335: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
20336: LD_ADDR_VAR 0 1
20340: PUSH
20341: LD_INT 1
20343: PPUSH
20344: LD_INT 3
20346: PPUSH
20347: CALL_OW 12
20351: ST_TO_ADDR
// if rnd = 1 then
20352: LD_VAR 0 1
20356: PUSH
20357: LD_INT 1
20359: EQUAL
20360: IFFALSE 20400
// begin enemyWayX = [ 73 , 46 , 29 ] ;
20362: LD_ADDR_EXP 44
20366: PUSH
20367: LD_INT 73
20369: PUSH
20370: LD_INT 46
20372: PUSH
20373: LD_INT 29
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
20381: LD_ADDR_EXP 45
20385: PUSH
20386: LD_INT 71
20388: PUSH
20389: LD_INT 43
20391: PUSH
20392: LD_INT 29
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: ST_TO_ADDR
// end ; if rnd = 2 then
20400: LD_VAR 0 1
20404: PUSH
20405: LD_INT 2
20407: EQUAL
20408: IFFALSE 20432
// begin enemyWayX = [ 64 ] ;
20410: LD_ADDR_EXP 44
20414: PUSH
20415: LD_INT 64
20417: PUSH
20418: EMPTY
20419: LIST
20420: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
20421: LD_ADDR_EXP 45
20425: PUSH
20426: LD_INT 43
20428: PUSH
20429: EMPTY
20430: LIST
20431: ST_TO_ADDR
// end ; if rnd = 3 then
20432: LD_VAR 0 1
20436: PUSH
20437: LD_INT 3
20439: EQUAL
20440: IFFALSE 20464
// begin enemyWayX = [ 80 ] ;
20442: LD_ADDR_EXP 44
20446: PUSH
20447: LD_INT 80
20449: PUSH
20450: EMPTY
20451: LIST
20452: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
20453: LD_ADDR_EXP 45
20457: PUSH
20458: LD_INT 28
20460: PUSH
20461: EMPTY
20462: LIST
20463: ST_TO_ADDR
// end ; enable ;
20464: ENABLE
// end ;
20465: PPOPN 1
20467: END
// every 0 0$1 do
20468: GO 20470
20470: DISABLE
// begin enable ;
20471: ENABLE
// if escapeAvalaible = 0 then
20472: LD_EXP 35
20476: PUSH
20477: LD_INT 0
20479: EQUAL
20480: IFFALSE 20492
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20482: LD_INT 3
20484: PPUSH
20485: LD_INT 6
20487: PPUSH
20488: CALL 7405 0 2
// if escapeAvalaible = 0 then
20492: LD_EXP 35
20496: PUSH
20497: LD_INT 0
20499: EQUAL
20500: IFFALSE 20512
// DefenseBase ( 1 , RussianBaseTerritory ) ;
20502: LD_INT 1
20504: PPUSH
20505: LD_INT 24
20507: PPUSH
20508: CALL 8199 0 2
// if russianAI = 1 then
20512: LD_EXP 26
20516: PUSH
20517: LD_INT 1
20519: EQUAL
20520: IFFALSE 20590
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
20522: LD_INT 3
20524: PPUSH
20525: LD_INT 7
20527: PPUSH
20528: LD_INT 6
20530: PPUSH
20531: LD_EXP 28
20535: PPUSH
20536: CALL 9945 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
20540: LD_INT 3
20542: PPUSH
20543: LD_EXP 27
20547: PPUSH
20548: LD_INT 6
20550: PPUSH
20551: LD_EXP 30
20555: PPUSH
20556: CALL 9554 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20560: LD_INT 3
20562: PPUSH
20563: LD_INT 26
20565: PPUSH
20566: LD_EXP 44
20570: PPUSH
20571: LD_EXP 45
20575: PPUSH
20576: CALL 8750 0 4
// AttackNearBuildings ( 3 , 1 ) ;
20580: LD_INT 3
20582: PPUSH
20583: LD_INT 1
20585: PPUSH
20586: CALL 10489 0 2
// end ; if SikorskyArrive = 1 then
20590: LD_EXP 17
20594: PUSH
20595: LD_INT 1
20597: EQUAL
20598: IFFALSE 20616
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
20600: LD_INT 3
20602: PPUSH
20603: LD_INT 10
20605: PPUSH
20606: LD_INT 53
20608: PPUSH
20609: LD_INT 59
20611: PPUSH
20612: CALL 8547 0 4
// end ;
20616: END
// every 0 0$1 trigger russianAI = 1 do var i ;
20617: LD_EXP 26
20621: PUSH
20622: LD_INT 1
20624: EQUAL
20625: IFFALSE 20901
20627: GO 20629
20629: DISABLE
20630: LD_INT 0
20632: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
20633: LD_ADDR_VAR 0 1
20637: PUSH
20638: LD_INT 22
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 21
20650: PUSH
20651: LD_INT 3
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 30
20660: PUSH
20661: LD_INT 32
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 3
20670: PUSH
20671: LD_INT 2
20673: PUSH
20674: LD_INT 35
20676: PUSH
20677: LD_INT 43
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 35
20686: PUSH
20687: LD_INT 44
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 35
20696: PUSH
20697: LD_INT 46
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 69
20724: PUSH
20725: FOR_IN
20726: IFFALSE 20765
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20728: LD_VAR 0 1
20732: PPUSH
20733: LD_INT 43
20735: PUSH
20736: LD_INT 44
20738: PUSH
20739: LD_INT 46
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PPUSH
20750: LD_INT 3
20752: PPUSH
20753: CALL_OW 12
20757: ARRAY
20758: PPUSH
20759: CALL_OW 431
20763: GO 20725
20765: POP
20766: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
20767: LD_ADDR_VAR 0 1
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 21
20784: PUSH
20785: LD_INT 3
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 33
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: LD_INT 35
20810: PUSH
20811: LD_INT 43
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 35
20820: PUSH
20821: LD_INT 44
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 35
20830: PUSH
20831: LD_INT 46
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: PUSH
20859: FOR_IN
20860: IFFALSE 20899
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20862: LD_VAR 0 1
20866: PPUSH
20867: LD_INT 43
20869: PUSH
20870: LD_INT 44
20872: PUSH
20873: LD_INT 46
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: PPUSH
20884: LD_INT 3
20886: PPUSH
20887: CALL_OW 12
20891: ARRAY
20892: PPUSH
20893: CALL_OW 431
20897: GO 20859
20899: POP
20900: POP
// end ;
20901: PPOPN 1
20903: END
// every 0 0$1 trigger SikorskyAI = 1 do
20904: LD_EXP 19
20908: PUSH
20909: LD_INT 1
20911: EQUAL
20912: IFFALSE 20947
20914: GO 20916
20916: DISABLE
// begin enable ;
20917: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
20918: LD_INT 4
20920: PPUSH
20921: LD_INT 10
20923: PPUSH
20924: LD_INT 93
20926: PPUSH
20927: LD_INT 93
20929: PPUSH
20930: CALL 8547 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
20934: LD_INT 4
20936: PPUSH
20937: LD_INT 11
20939: PPUSH
20940: LD_INT 3
20942: PPUSH
20943: CALL 14701 0 3
// end ;
20947: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20948: LD_EXP 26
20952: PUSH
20953: LD_INT 1
20955: EQUAL
20956: PUSH
20957: LD_EXP 29
20961: PPUSH
20962: CALL_OW 302
20966: AND
20967: PUSH
20968: LD_EXP 29
20972: PPUSH
20973: CALL_OW 255
20977: PUSH
20978: LD_INT 3
20980: EQUAL
20981: AND
20982: PUSH
20983: LD_INT 22
20985: PUSH
20986: LD_INT 3
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 21
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 33
21005: PUSH
21006: LD_INT 3
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: PPUSH
21018: CALL_OW 69
21022: PUSH
21023: LD_INT 0
21025: EQUAL
21026: AND
21027: IFFALSE 21197
21029: GO 21031
21031: DISABLE
// begin enable ;
21032: ENABLE
// if Difficulty = 1 then
21033: LD_OWVAR 67
21037: PUSH
21038: LD_INT 1
21040: EQUAL
21041: IFFALSE 21089
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
21043: LD_INT 3
21045: PPUSH
21046: LD_EXP 29
21050: PPUSH
21051: LD_INT 5
21053: PPUSH
21054: LD_INT 8
21056: PPUSH
21057: CALL_OW 12
21061: PPUSH
21062: LD_INT 43
21064: PUSH
21065: LD_INT 44
21067: PUSH
21068: LD_INT 46
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: PPUSH
21076: LD_INT 1
21078: PPUSH
21079: LD_INT 3
21081: PPUSH
21082: LD_INT 24
21084: PPUSH
21085: CALL 8393 0 7
// if Difficulty = 2 then
21089: LD_OWVAR 67
21093: PUSH
21094: LD_INT 2
21096: EQUAL
21097: IFFALSE 21145
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21099: LD_INT 3
21101: PPUSH
21102: LD_EXP 29
21106: PPUSH
21107: LD_INT 6
21109: PPUSH
21110: LD_INT 8
21112: PPUSH
21113: CALL_OW 12
21117: PPUSH
21118: LD_INT 44
21120: PUSH
21121: LD_INT 44
21123: PUSH
21124: LD_INT 46
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: LIST
21131: PPUSH
21132: LD_INT 1
21134: PPUSH
21135: LD_INT 3
21137: PPUSH
21138: LD_INT 24
21140: PPUSH
21141: CALL 8393 0 7
// if Difficulty = 3 then
21145: LD_OWVAR 67
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21197
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 44 , 46 ] , 1 , 3 , 24 ) ;
21155: LD_INT 3
21157: PPUSH
21158: LD_EXP 29
21162: PPUSH
21163: LD_INT 7
21165: PPUSH
21166: LD_INT 8
21168: PPUSH
21169: CALL_OW 12
21173: PPUSH
21174: LD_INT 44
21176: PUSH
21177: LD_INT 46
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: LD_INT 1
21186: PPUSH
21187: LD_INT 3
21189: PPUSH
21190: LD_INT 24
21192: PPUSH
21193: CALL 8393 0 7
// end ;
21197: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
21198: LD_EXP 37
21202: PUSH
21203: LD_INT 1
21205: EQUAL
21206: IFFALSE 21288
21208: GO 21210
21210: DISABLE
21211: LD_INT 0
21213: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
21214: LD_ADDR_VAR 0 1
21218: PUSH
21219: LD_INT 22
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 21
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 3
21241: PUSH
21242: LD_INT 24
21244: PUSH
21245: LD_INT 650
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PPUSH
21261: CALL_OW 69
21265: PUSH
21266: FOR_IN
21267: IFFALSE 21286
// ComMoveXY ( i , 51 , 12 ) ;
21269: LD_VAR 0 1
21273: PPUSH
21274: LD_INT 51
21276: PPUSH
21277: LD_INT 12
21279: PPUSH
21280: CALL_OW 111
21284: GO 21266
21286: POP
21287: POP
// end ; end_of_file
21288: PPOPN 1
21290: END
// every 3 3$20 trigger firstAttack = 1 do
21291: LD_EXP 32
21295: PUSH
21296: LD_INT 1
21298: EQUAL
21299: IFFALSE 21405
21301: GO 21303
21303: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21304: LD_INT 6
21306: PPUSH
21307: LD_INT 3
21309: PPUSH
21310: LD_INT 5
21312: PPUSH
21313: LD_INT 6
21315: PPUSH
21316: CALL_OW 12
21320: PUSH
21321: LD_INT 5
21323: PPUSH
21324: LD_INT 6
21326: PPUSH
21327: CALL_OW 12
21331: PUSH
21332: LD_INT 5
21334: PPUSH
21335: LD_INT 6
21337: PPUSH
21338: CALL_OW 12
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: PUSH
21348: LD_OWVAR 67
21352: ARRAY
21353: PPUSH
21354: LD_INT 0
21356: PPUSH
21357: LD_INT 0
21359: PPUSH
21360: LD_INT 0
21362: PPUSH
21363: LD_INT 0
21365: PPUSH
21366: LD_EXP 24
21370: PPUSH
21371: LD_EXP 25
21375: PPUSH
21376: CALL_OW 12
21380: PPUSH
21381: LD_INT 16
21383: PPUSH
21384: LD_INT 7
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: LD_INT 1
21392: PPUSH
21393: LD_INT 3
21395: PPUSH
21396: CALL_OW 12
21400: PPUSH
21401: CALL 10719 0 12
21405: END
// every 3 3$40 trigger firstAttack = 1 do
21406: LD_EXP 32
21410: PUSH
21411: LD_INT 1
21413: EQUAL
21414: IFFALSE 21506
21416: GO 21418
21418: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21419: LD_INT 16
21421: PPUSH
21422: LD_INT 6
21424: PPUSH
21425: LD_INT 3
21427: PPUSH
21428: LD_INT 4
21430: PPUSH
21431: CALL_OW 12
21435: PUSH
21436: LD_INT 4
21438: PPUSH
21439: LD_INT 5
21441: PPUSH
21442: CALL_OW 12
21446: PUSH
21447: LD_INT 5
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: PUSH
21455: LD_OWVAR 67
21459: ARRAY
21460: PPUSH
21461: LD_EXP 24
21465: PPUSH
21466: LD_EXP 25
21470: PPUSH
21471: CALL_OW 12
21475: PPUSH
21476: LD_INT 3
21478: PPUSH
21479: LD_INT 1
21481: PPUSH
21482: LD_INT 3
21484: PPUSH
21485: LD_INT 44
21487: PUSH
21488: LD_INT 46
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: EMPTY
21496: PPUSH
21497: EMPTY
21498: PPUSH
21499: LD_INT 1
21501: PPUSH
21502: CALL 13012 0 11
21506: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
21507: LD_EXP 32
21511: PUSH
21512: LD_INT 1
21514: EQUAL
21515: PUSH
21516: LD_EXP 38
21520: PUSH
21521: LD_INT 0
21523: EQUAL
21524: AND
21525: IFFALSE 21631
21527: GO 21529
21529: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21530: LD_INT 6
21532: PPUSH
21533: LD_INT 3
21535: PPUSH
21536: LD_INT 5
21538: PPUSH
21539: LD_INT 6
21541: PPUSH
21542: CALL_OW 12
21546: PUSH
21547: LD_INT 5
21549: PPUSH
21550: LD_INT 6
21552: PPUSH
21553: CALL_OW 12
21557: PUSH
21558: LD_INT 5
21560: PPUSH
21561: LD_INT 6
21563: PPUSH
21564: CALL_OW 12
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: LD_OWVAR 67
21578: ARRAY
21579: PPUSH
21580: LD_INT 0
21582: PPUSH
21583: LD_INT 0
21585: PPUSH
21586: LD_INT 0
21588: PPUSH
21589: LD_INT 0
21591: PPUSH
21592: LD_EXP 24
21596: PPUSH
21597: LD_EXP 25
21601: PPUSH
21602: CALL_OW 12
21606: PPUSH
21607: LD_INT 16
21609: PPUSH
21610: LD_INT 7
21612: PPUSH
21613: LD_INT 1
21615: PPUSH
21616: LD_INT 1
21618: PPUSH
21619: LD_INT 3
21621: PPUSH
21622: CALL_OW 12
21626: PPUSH
21627: CALL 10719 0 12
21631: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
21632: LD_EXP 32
21636: PUSH
21637: LD_INT 1
21639: EQUAL
21640: PUSH
21641: LD_EXP 38
21645: PUSH
21646: LD_INT 0
21648: EQUAL
21649: AND
21650: IFFALSE 21746
21652: GO 21654
21654: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
21655: LD_INT 16
21657: PPUSH
21658: LD_INT 6
21660: PPUSH
21661: LD_INT 5
21663: PPUSH
21664: LD_INT 6
21666: PPUSH
21667: CALL_OW 12
21671: PUSH
21672: LD_INT 6
21674: PPUSH
21675: LD_INT 7
21677: PPUSH
21678: CALL_OW 12
21682: PUSH
21683: LD_INT 7
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: LD_OWVAR 67
21695: ARRAY
21696: PPUSH
21697: LD_EXP 24
21701: PPUSH
21702: LD_EXP 25
21706: PPUSH
21707: CALL_OW 12
21711: PPUSH
21712: LD_INT 3
21714: PPUSH
21715: LD_INT 1
21717: PPUSH
21718: LD_INT 3
21720: PPUSH
21721: LD_INT 43
21723: PUSH
21724: LD_INT 44
21726: PUSH
21727: LD_INT 46
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: LIST
21734: PPUSH
21735: EMPTY
21736: PPUSH
21737: EMPTY
21738: PPUSH
21739: LD_INT 1
21741: PPUSH
21742: CALL 13012 0 11
21746: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
21747: LD_EXP 32
21751: PUSH
21752: LD_INT 1
21754: EQUAL
21755: PUSH
21756: LD_EXP 38
21760: PUSH
21761: LD_INT 0
21763: EQUAL
21764: AND
21765: IFFALSE 21841
21767: GO 21769
21769: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21770: LD_INT 16
21772: PPUSH
21773: LD_INT 6
21775: PPUSH
21776: LD_INT 5
21778: PUSH
21779: LD_INT 6
21781: PUSH
21782: LD_INT 7
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: PUSH
21790: LD_OWVAR 67
21794: ARRAY
21795: PPUSH
21796: LD_EXP 24
21800: PPUSH
21801: LD_EXP 25
21805: PPUSH
21806: CALL_OW 12
21810: PPUSH
21811: LD_INT 3
21813: PPUSH
21814: LD_INT 1
21816: PPUSH
21817: LD_INT 3
21819: PPUSH
21820: LD_INT 44
21822: PUSH
21823: LD_INT 46
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PPUSH
21830: EMPTY
21831: PPUSH
21832: EMPTY
21833: PPUSH
21834: LD_INT 1
21836: PPUSH
21837: CALL 13012 0 11
21841: END
// every 1 1$00 trigger secondAttack = 1 do
21842: LD_EXP 33
21846: PUSH
21847: LD_INT 1
21849: EQUAL
21850: IFFALSE 21956
21852: GO 21854
21854: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21855: LD_INT 6
21857: PPUSH
21858: LD_INT 3
21860: PPUSH
21861: LD_INT 4
21863: PPUSH
21864: LD_INT 7
21866: PPUSH
21867: CALL_OW 12
21871: PUSH
21872: LD_INT 6
21874: PPUSH
21875: LD_INT 7
21877: PPUSH
21878: CALL_OW 12
21882: PUSH
21883: LD_INT 6
21885: PPUSH
21886: LD_INT 10
21888: PPUSH
21889: CALL_OW 12
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: LD_OWVAR 67
21903: ARRAY
21904: PPUSH
21905: LD_INT 0
21907: PPUSH
21908: LD_INT 0
21910: PPUSH
21911: LD_INT 0
21913: PPUSH
21914: LD_INT 0
21916: PPUSH
21917: LD_EXP 24
21921: PPUSH
21922: LD_EXP 25
21926: PPUSH
21927: CALL_OW 12
21931: PPUSH
21932: LD_INT 16
21934: PPUSH
21935: LD_INT 7
21937: PPUSH
21938: LD_INT 1
21940: PPUSH
21941: LD_INT 1
21943: PPUSH
21944: LD_INT 3
21946: PPUSH
21947: CALL_OW 12
21951: PPUSH
21952: CALL 10719 0 12
21956: END
// every 1 1$00 trigger secondAttack = 1 do
21957: LD_EXP 33
21961: PUSH
21962: LD_INT 1
21964: EQUAL
21965: IFFALSE 22069
21967: GO 21969
21969: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
21970: LD_INT 16
21972: PPUSH
21973: LD_INT 6
21975: PPUSH
21976: LD_INT 5
21978: PPUSH
21979: LD_INT 8
21981: PPUSH
21982: CALL_OW 12
21986: PUSH
21987: LD_INT 6
21989: PPUSH
21990: LD_INT 9
21992: PPUSH
21993: CALL_OW 12
21997: PUSH
21998: LD_INT 7
22000: PPUSH
22001: LD_INT 9
22003: PPUSH
22004: CALL_OW 12
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: PUSH
22014: LD_OWVAR 67
22018: ARRAY
22019: PPUSH
22020: LD_EXP 24
22024: PPUSH
22025: LD_EXP 25
22029: PPUSH
22030: CALL_OW 12
22034: PPUSH
22035: LD_INT 3
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: LD_INT 3
22043: PPUSH
22044: LD_INT 43
22046: PUSH
22047: LD_INT 44
22049: PUSH
22050: LD_INT 46
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: PPUSH
22058: EMPTY
22059: PPUSH
22060: EMPTY
22061: PPUSH
22062: LD_INT 1
22064: PPUSH
22065: CALL 13012 0 11
22069: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22070: LD_EXP 17
22074: PUSH
22075: LD_INT 0
22077: EQUAL
22078: IFFALSE 22184
22080: GO 22082
22082: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22083: LD_INT 6
22085: PPUSH
22086: LD_INT 3
22088: PPUSH
22089: LD_INT 8
22091: PPUSH
22092: LD_INT 9
22094: PPUSH
22095: CALL_OW 12
22099: PUSH
22100: LD_INT 7
22102: PPUSH
22103: LD_INT 10
22105: PPUSH
22106: CALL_OW 12
22110: PUSH
22111: LD_INT 8
22113: PPUSH
22114: LD_INT 10
22116: PPUSH
22117: CALL_OW 12
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: LIST
22126: PUSH
22127: LD_OWVAR 67
22131: ARRAY
22132: PPUSH
22133: LD_INT 0
22135: PPUSH
22136: LD_INT 0
22138: PPUSH
22139: LD_INT 0
22141: PPUSH
22142: LD_INT 0
22144: PPUSH
22145: LD_EXP 24
22149: PPUSH
22150: LD_EXP 25
22154: PPUSH
22155: CALL_OW 12
22159: PPUSH
22160: LD_INT 16
22162: PPUSH
22163: LD_INT 7
22165: PPUSH
22166: LD_INT 1
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_INT 3
22174: PPUSH
22175: CALL_OW 12
22179: PPUSH
22180: CALL 10719 0 12
22184: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22185: LD_EXP 17
22189: PUSH
22190: LD_INT 0
22192: EQUAL
22193: IFFALSE 22293
22195: GO 22197
22197: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22198: LD_INT 16
22200: PPUSH
22201: LD_INT 6
22203: PPUSH
22204: LD_INT 5
22206: PPUSH
22207: LD_INT 8
22209: PPUSH
22210: CALL_OW 12
22214: PUSH
22215: LD_INT 6
22217: PPUSH
22218: LD_INT 9
22220: PPUSH
22221: CALL_OW 12
22225: PUSH
22226: LD_INT 7
22228: PPUSH
22229: LD_INT 9
22231: PPUSH
22232: CALL_OW 12
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: LD_OWVAR 67
22246: ARRAY
22247: PPUSH
22248: LD_EXP 24
22252: PPUSH
22253: LD_EXP 25
22257: PPUSH
22258: CALL_OW 12
22262: PPUSH
22263: LD_INT 3
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: LD_INT 3
22271: PPUSH
22272: LD_INT 44
22274: PUSH
22275: LD_INT 46
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PPUSH
22282: EMPTY
22283: PPUSH
22284: EMPTY
22285: PPUSH
22286: LD_INT 1
22288: PPUSH
22289: CALL 13012 0 11
22293: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22294: LD_EXP 17
22298: PUSH
22299: LD_INT 0
22301: EQUAL
22302: IFFALSE 22408
22304: GO 22306
22306: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22307: LD_INT 6
22309: PPUSH
22310: LD_INT 3
22312: PPUSH
22313: LD_INT 8
22315: PPUSH
22316: LD_INT 9
22318: PPUSH
22319: CALL_OW 12
22323: PUSH
22324: LD_INT 7
22326: PPUSH
22327: LD_INT 10
22329: PPUSH
22330: CALL_OW 12
22334: PUSH
22335: LD_INT 8
22337: PPUSH
22338: LD_INT 10
22340: PPUSH
22341: CALL_OW 12
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: LD_OWVAR 67
22355: ARRAY
22356: PPUSH
22357: LD_INT 0
22359: PPUSH
22360: LD_INT 0
22362: PPUSH
22363: LD_INT 0
22365: PPUSH
22366: LD_INT 0
22368: PPUSH
22369: LD_EXP 24
22373: PPUSH
22374: LD_EXP 25
22378: PPUSH
22379: CALL_OW 12
22383: PPUSH
22384: LD_INT 16
22386: PPUSH
22387: LD_INT 7
22389: PPUSH
22390: LD_INT 1
22392: PPUSH
22393: LD_INT 1
22395: PPUSH
22396: LD_INT 3
22398: PPUSH
22399: CALL_OW 12
22403: PPUSH
22404: CALL 10719 0 12
22408: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22409: LD_EXP 17
22413: PUSH
22414: LD_INT 0
22416: EQUAL
22417: IFFALSE 22517
22419: GO 22421
22421: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22422: LD_INT 16
22424: PPUSH
22425: LD_INT 6
22427: PPUSH
22428: LD_INT 5
22430: PPUSH
22431: LD_INT 8
22433: PPUSH
22434: CALL_OW 12
22438: PUSH
22439: LD_INT 6
22441: PPUSH
22442: LD_INT 9
22444: PPUSH
22445: CALL_OW 12
22449: PUSH
22450: LD_INT 7
22452: PPUSH
22453: LD_INT 9
22455: PPUSH
22456: CALL_OW 12
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: LD_OWVAR 67
22470: ARRAY
22471: PPUSH
22472: LD_EXP 24
22476: PPUSH
22477: LD_EXP 25
22481: PPUSH
22482: CALL_OW 12
22486: PPUSH
22487: LD_INT 3
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: LD_INT 3
22495: PPUSH
22496: LD_INT 44
22498: PUSH
22499: LD_INT 46
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PPUSH
22506: EMPTY
22507: PPUSH
22508: EMPTY
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: CALL 13012 0 11
22517: END
// every 35 35$0 trigger SikorskyArrive = 0 do
22518: LD_EXP 17
22522: PUSH
22523: LD_INT 0
22525: EQUAL
22526: IFFALSE 22632
22528: GO 22530
22530: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22531: LD_INT 6
22533: PPUSH
22534: LD_INT 3
22536: PPUSH
22537: LD_INT 8
22539: PPUSH
22540: LD_INT 9
22542: PPUSH
22543: CALL_OW 12
22547: PUSH
22548: LD_INT 7
22550: PPUSH
22551: LD_INT 10
22553: PPUSH
22554: CALL_OW 12
22558: PUSH
22559: LD_INT 8
22561: PPUSH
22562: LD_INT 10
22564: PPUSH
22565: CALL_OW 12
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: PUSH
22575: LD_OWVAR 67
22579: ARRAY
22580: PPUSH
22581: LD_INT 0
22583: PPUSH
22584: LD_INT 0
22586: PPUSH
22587: LD_INT 0
22589: PPUSH
22590: LD_INT 0
22592: PPUSH
22593: LD_EXP 24
22597: PPUSH
22598: LD_EXP 25
22602: PPUSH
22603: CALL_OW 12
22607: PPUSH
22608: LD_INT 16
22610: PPUSH
22611: LD_INT 7
22613: PPUSH
22614: LD_INT 1
22616: PPUSH
22617: LD_INT 1
22619: PPUSH
22620: LD_INT 3
22622: PPUSH
22623: CALL_OW 12
22627: PPUSH
22628: CALL 10719 0 12
22632: END
// every 35 35$0 trigger SikorskyArrive = 0 do
22633: LD_EXP 17
22637: PUSH
22638: LD_INT 0
22640: EQUAL
22641: IFFALSE 22741
22643: GO 22645
22645: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22646: LD_INT 16
22648: PPUSH
22649: LD_INT 6
22651: PPUSH
22652: LD_INT 5
22654: PPUSH
22655: LD_INT 8
22657: PPUSH
22658: CALL_OW 12
22662: PUSH
22663: LD_INT 6
22665: PPUSH
22666: LD_INT 9
22668: PPUSH
22669: CALL_OW 12
22673: PUSH
22674: LD_INT 7
22676: PPUSH
22677: LD_INT 9
22679: PPUSH
22680: CALL_OW 12
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: LD_OWVAR 67
22694: ARRAY
22695: PPUSH
22696: LD_EXP 24
22700: PPUSH
22701: LD_EXP 25
22705: PPUSH
22706: CALL_OW 12
22710: PPUSH
22711: LD_INT 3
22713: PPUSH
22714: LD_INT 1
22716: PPUSH
22717: LD_INT 3
22719: PPUSH
22720: LD_INT 44
22722: PUSH
22723: LD_INT 46
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PPUSH
22730: EMPTY
22731: PPUSH
22732: EMPTY
22733: PPUSH
22734: LD_INT 1
22736: PPUSH
22737: CALL 13012 0 11
22741: END
// every 0 0$1 trigger timerStatus = 1 do
22742: LD_EXP 34
22746: PUSH
22747: LD_INT 1
22749: EQUAL
22750: IFFALSE 22787
22752: GO 22754
22754: DISABLE
// begin enable ;
22755: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
22756: LD_ADDR_OWVAR 47
22760: PUSH
22761: LD_STRING #Am08-1
22763: PUSH
22764: LD_EXP 18
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
22773: LD_ADDR_EXP 18
22777: PUSH
22778: LD_EXP 18
22782: PUSH
22783: LD_INT 35
22785: MINUS
22786: ST_TO_ADDR
// end ; end_of_file
22787: END
// every 1 1$0 do
22788: GO 22790
22790: DISABLE
// begin if supply <= 13 and supply > 7 then
22791: LD_EXP 39
22795: PUSH
22796: LD_INT 13
22798: LESSEQUAL
22799: PUSH
22800: LD_EXP 39
22804: PUSH
22805: LD_INT 7
22807: GREATER
22808: AND
22809: IFFALSE 22832
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
22811: LD_INT 3
22813: PPUSH
22814: LD_INT 5
22816: PPUSH
22817: CALL_OW 12
22821: PPUSH
22822: LD_INT 5
22824: PPUSH
22825: LD_INT 1
22827: PPUSH
22828: CALL_OW 55
// if supply <= 7 and supply > 4 then
22832: LD_EXP 39
22836: PUSH
22837: LD_INT 7
22839: LESSEQUAL
22840: PUSH
22841: LD_EXP 39
22845: PUSH
22846: LD_INT 4
22848: GREATER
22849: AND
22850: IFFALSE 22873
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
22852: LD_INT 3
22854: PPUSH
22855: LD_INT 5
22857: PPUSH
22858: CALL_OW 12
22862: PPUSH
22863: LD_INT 20
22865: PPUSH
22866: LD_INT 1
22868: PPUSH
22869: CALL_OW 55
// if supply <= 4 and supply > 0 then
22873: LD_EXP 39
22877: PUSH
22878: LD_INT 4
22880: LESSEQUAL
22881: PUSH
22882: LD_EXP 39
22886: PUSH
22887: LD_INT 0
22889: GREATER
22890: AND
22891: IFFALSE 22914
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
22893: LD_INT 3
22895: PPUSH
22896: LD_INT 5
22898: PPUSH
22899: CALL_OW 12
22903: PPUSH
22904: LD_INT 21
22906: PPUSH
22907: LD_INT 1
22909: PPUSH
22910: CALL_OW 55
// if supply > 0 then
22914: LD_EXP 39
22918: PUSH
22919: LD_INT 0
22921: GREATER
22922: IFFALSE 22939
// begin supply = supply - 1 ;
22924: LD_ADDR_EXP 39
22928: PUSH
22929: LD_EXP 39
22933: PUSH
22934: LD_INT 1
22936: MINUS
22937: ST_TO_ADDR
// enable ;
22938: ENABLE
// end ; end ; end_of_file
22939: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
22940: LD_EXP 38
22944: PUSH
22945: LD_INT 1
22947: EQUAL
22948: PUSH
22949: LD_EXP 1
22953: PPUSH
22954: CALL_OW 301
22958: AND
22959: IFFALSE 22971
22961: GO 22963
22963: DISABLE
// YouLost ( JMM ) ;
22964: LD_STRING JMM
22966: PPUSH
22967: CALL_OW 104
22971: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
22972: LD_EXP 17
22976: PUSH
22977: LD_INT 1
22979: EQUAL
22980: PUSH
22981: LD_EXP 15
22985: PPUSH
22986: CALL_OW 301
22990: AND
22991: IFFALSE 23023
22993: GO 22995
22995: DISABLE
// begin DialogueOn ;
22996: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23000: LD_EXP 22
23004: PPUSH
23005: LD_STRING D8a-Pow-1
23007: PPUSH
23008: CALL_OW 94
// DialogueOff ;
23012: CALL_OW 7
// YouLost ( Dismissed ) ;
23016: LD_STRING Dismissed
23018: PPUSH
23019: CALL_OW 104
// end ;
23023: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23024: LD_EXP 36
23028: PPUSH
23029: CALL_OW 301
23033: IFFALSE 23045
23035: GO 23037
23037: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23038: LD_STRING Destroyed
23040: PPUSH
23041: CALL_OW 104
23045: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23046: LD_EXP 23
23050: PPUSH
23051: CALL_OW 301
23055: IFFALSE 23400
23057: GO 23059
23059: DISABLE
23060: LD_INT 0
23062: PPUSH
// begin russianAI = 0 ;
23063: LD_ADDR_EXP 26
23067: PUSH
23068: LD_INT 0
23070: ST_TO_ADDR
// escapeAvalaible = 1 ;
23071: LD_ADDR_EXP 35
23075: PUSH
23076: LD_INT 1
23078: ST_TO_ADDR
// InGameOn ;
23079: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23083: LD_INT 3
23085: PPUSH
23086: LD_INT 1
23088: PPUSH
23089: LD_INT 1
23091: PPUSH
23092: LD_INT 0
23094: PPUSH
23095: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23099: LD_INT 6
23101: PPUSH
23102: LD_INT 1
23104: PPUSH
23105: LD_INT 1
23107: PPUSH
23108: LD_INT 0
23110: PPUSH
23111: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
23115: LD_INT 3
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
23125: LD_INT 97
23127: PPUSH
23128: LD_INT 91
23130: PPUSH
23131: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23135: LD_INT 22
23137: PUSH
23138: LD_INT 3
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 21
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PPUSH
23159: CALL_OW 69
23163: PPUSH
23164: CALL_OW 121
// wait ( 0 0$01 ) ;
23168: LD_INT 35
23170: PPUSH
23171: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23175: LD_INT 22
23177: PUSH
23178: LD_INT 3
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 21
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PPUSH
23199: CALL_OW 69
23203: PPUSH
23204: LD_INT 124
23206: PPUSH
23207: LD_INT 98
23209: PPUSH
23210: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
23214: LD_INT 22
23216: PUSH
23217: LD_INT 6
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 21
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PPUSH
23238: CALL_OW 69
23242: PPUSH
23243: CALL_OW 121
// wait ( 0 0$01 ) ;
23247: LD_INT 35
23249: PPUSH
23250: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23254: LD_INT 22
23256: PUSH
23257: LD_INT 6
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 21
23266: PUSH
23267: LD_INT 1
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 69
23282: PPUSH
23283: LD_INT 124
23285: PPUSH
23286: LD_INT 98
23288: PPUSH
23289: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23293: LD_INT 22
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 21
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PPUSH
23317: CALL_OW 69
23321: PPUSH
23322: LD_INT 124
23324: PPUSH
23325: LD_INT 98
23327: PPUSH
23328: CALL_OW 114
// wait ( 0 0$4 ) ;
23332: LD_INT 140
23334: PPUSH
23335: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
23339: LD_INT 124
23341: PPUSH
23342: LD_INT 98
23344: PPUSH
23345: CALL_OW 84
// if SikorskyStatus = 1 then
23349: LD_EXP 20
23353: PUSH
23354: LD_INT 1
23356: EQUAL
23357: IFFALSE 23371
// begin Say ( Sikorski , D9-Sik-1 ) ;
23359: LD_EXP 15
23363: PPUSH
23364: LD_STRING D9-Sik-1
23366: PPUSH
23367: CALL_OW 88
// end ; if SikorskyStatus = 2 then
23371: LD_EXP 20
23375: PUSH
23376: LD_INT 2
23378: EQUAL
23379: IFFALSE 23400
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
23381: LD_EXP 22
23385: PPUSH
23386: LD_STRING D8b-Pow-1
23388: PPUSH
23389: CALL_OW 94
// YouLost ( Dismissed ) ;
23393: LD_STRING Dismissed
23395: PPUSH
23396: CALL_OW 104
// end ; end ;
23400: PPOPN 1
23402: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
23403: LD_INT 23
23405: PUSH
23406: LD_INT 3
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 21
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 24
23425: PUSH
23426: LD_INT 250
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: PPUSH
23438: CALL_OW 69
23442: PUSH
23443: LD_INT 0
23445: EQUAL
23446: IFFALSE 23455
23448: GO 23450
23450: DISABLE
// FinishMission ;
23451: CALL 23456 0 0
23455: END
// export function FinishMission ; var tmp ; begin
23456: LD_INT 0
23458: PPUSH
23459: PPUSH
// AddMedal ( med1 , 1 ) ;
23460: LD_STRING med1
23462: PPUSH
23463: LD_INT 1
23465: PPUSH
23466: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
23470: LD_STRING med2
23472: PPUSH
23473: LD_INT 1
23475: PPUSH
23476: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
23480: LD_STRING perfect
23482: PPUSH
23483: LD_INT 1
23485: PPUSH
23486: CALL_OW 101
// GiveMedals ( Main ) ;
23490: LD_STRING Main
23492: PPUSH
23493: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23497: LD_INT 22
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 23
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 21
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: LD_INT 25
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 25
23542: PUSH
23543: LD_INT 2
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 25
23552: PUSH
23553: LD_INT 3
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 25
23562: PUSH
23563: LD_INT 4
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: PPUSH
23583: CALL_OW 69
23587: PPUSH
23588: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23592: LD_EXP 1
23596: PPUSH
23597: LD_EXP 41
23601: PUSH
23602: LD_STRING JMM
23604: STR
23605: PPUSH
23606: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23610: LD_EXP 2
23614: PPUSH
23615: LD_EXP 41
23619: PUSH
23620: LD_STRING Brown
23622: STR
23623: PPUSH
23624: CALL 7269 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23628: LD_EXP 3
23632: PPUSH
23633: LD_EXP 41
23637: PUSH
23638: LD_STRING Donaldson
23640: STR
23641: PPUSH
23642: CALL 7269 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23646: LD_EXP 4
23650: PPUSH
23651: LD_EXP 41
23655: PUSH
23656: LD_STRING Bobby
23658: STR
23659: PPUSH
23660: CALL 7269 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23664: LD_EXP 5
23668: PPUSH
23669: LD_EXP 41
23673: PUSH
23674: LD_STRING Cyrus
23676: STR
23677: PPUSH
23678: CALL 7269 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23682: LD_EXP 6
23686: PPUSH
23687: LD_EXP 41
23691: PUSH
23692: LD_STRING Lisa
23694: STR
23695: PPUSH
23696: CALL 7269 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23700: LD_EXP 7
23704: PPUSH
23705: LD_EXP 41
23709: PUSH
23710: LD_STRING Frank
23712: STR
23713: PPUSH
23714: CALL 7269 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23718: LD_EXP 8
23722: PPUSH
23723: LD_EXP 41
23727: PUSH
23728: LD_STRING Gladstone
23730: STR
23731: PPUSH
23732: CALL 7269 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23736: LD_EXP 9
23740: PPUSH
23741: LD_EXP 41
23745: PUSH
23746: LD_STRING Kikuchi
23748: STR
23749: PPUSH
23750: CALL 7269 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23754: LD_EXP 13
23758: PPUSH
23759: LD_EXP 41
23763: PUSH
23764: LD_STRING Denis
23766: STR
23767: PPUSH
23768: CALL 7269 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23772: LD_EXP 14
23776: PPUSH
23777: LD_EXP 41
23781: PUSH
23782: LD_STRING Joan
23784: STR
23785: PPUSH
23786: CALL 7269 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23790: LD_EXP 12
23794: PPUSH
23795: LD_EXP 41
23799: PUSH
23800: LD_STRING Houten
23802: STR
23803: PPUSH
23804: CALL 7269 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
23808: LD_INT 50
23810: PUSH
23811: EMPTY
23812: LIST
23813: PUSH
23814: LD_INT 22
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 21
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: LD_INT 25
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 25
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 25
23859: PUSH
23860: LD_INT 3
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 25
23869: PUSH
23870: LD_INT 4
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 69
23894: PUSH
23895: LD_EXP 1
23899: PUSH
23900: LD_EXP 2
23904: PUSH
23905: LD_EXP 3
23909: PUSH
23910: LD_EXP 4
23914: PUSH
23915: LD_EXP 5
23919: PUSH
23920: LD_EXP 6
23924: PUSH
23925: LD_EXP 7
23929: PUSH
23930: LD_EXP 8
23934: PUSH
23935: LD_EXP 9
23939: PUSH
23940: LD_EXP 13
23944: PUSH
23945: LD_EXP 14
23949: PUSH
23950: LD_EXP 12
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: DIFF
23969: PPUSH
23970: LD_STRING 08_other_survivors
23972: PPUSH
23973: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
23977: LD_INT 23
23979: PPUSH
23980: CALL 23993 0 1
// YouWin ;
23984: CALL_OW 103
// end ;
23988: LD_VAR 0 1
23992: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
23993: LD_INT 0
23995: PPUSH
23996: PPUSH
23997: PPUSH
23998: PPUSH
// gammaBase = [ ] ;
23999: LD_ADDR_VAR 0 4
24003: PUSH
24004: EMPTY
24005: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24006: LD_ADDR_VAR 0 5
24010: PUSH
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_INT 22
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 50
24038: PUSH
24039: EMPTY
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: PPUSH
24047: CALL_OW 70
24051: ST_TO_ADDR
// for i in buildings do
24052: LD_ADDR_VAR 0 3
24056: PUSH
24057: LD_VAR 0 5
24061: PUSH
24062: FOR_IN
24063: IFFALSE 24500
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24065: LD_VAR 0 3
24069: PPUSH
24070: CALL_OW 266
24074: PUSH
24075: LD_INT 6
24077: PUSH
24078: LD_INT 7
24080: PUSH
24081: LD_INT 8
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: IN
24089: IFFALSE 24203
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24091: LD_ADDR_VAR 0 4
24095: PUSH
24096: LD_VAR 0 4
24100: PUSH
24101: LD_VAR 0 3
24105: PPUSH
24106: CALL_OW 266
24110: PUSH
24111: LD_VAR 0 3
24115: PPUSH
24116: CALL_OW 250
24120: PUSH
24121: LD_VAR 0 3
24125: PPUSH
24126: CALL_OW 251
24130: PUSH
24131: LD_VAR 0 3
24135: PPUSH
24136: CALL_OW 254
24140: PUSH
24141: LD_VAR 0 3
24145: PPUSH
24146: CALL_OW 267
24150: PUSH
24151: LD_VAR 0 3
24155: PPUSH
24156: CALL_OW 248
24160: PUSH
24161: LD_VAR 0 3
24165: PPUSH
24166: LD_INT 1
24168: PPUSH
24169: CALL_OW 268
24173: PUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: LD_INT 2
24181: PPUSH
24182: CALL_OW 268
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: ADD
24200: ST_TO_ADDR
24201: GO 24498
// if GetBType ( i ) = b_bunker then
24203: LD_VAR 0 3
24207: PPUSH
24208: CALL_OW 266
24212: PUSH
24213: LD_INT 32
24215: EQUAL
24216: IFFALSE 24313
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24218: LD_ADDR_VAR 0 4
24222: PUSH
24223: LD_VAR 0 4
24227: PUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: CALL_OW 266
24237: PUSH
24238: LD_VAR 0 3
24242: PPUSH
24243: CALL_OW 250
24247: PUSH
24248: LD_VAR 0 3
24252: PPUSH
24253: CALL_OW 251
24257: PUSH
24258: LD_VAR 0 3
24262: PPUSH
24263: CALL_OW 254
24267: PUSH
24268: LD_VAR 0 3
24272: PPUSH
24273: CALL_OW 267
24277: PUSH
24278: LD_VAR 0 3
24282: PPUSH
24283: CALL_OW 248
24287: PUSH
24288: LD_VAR 0 3
24292: PPUSH
24293: CALL_OW 269
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: ADD
24310: ST_TO_ADDR
24311: GO 24498
// if GetBType ( i ) = b_factory then
24313: LD_VAR 0 3
24317: PPUSH
24318: CALL_OW 266
24322: PUSH
24323: LD_INT 3
24325: EQUAL
24326: IFFALSE 24416
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24328: LD_ADDR_VAR 0 4
24332: PUSH
24333: LD_VAR 0 4
24337: PPUSH
24338: LD_INT 1
24340: PPUSH
24341: LD_VAR 0 3
24345: PPUSH
24346: CALL_OW 266
24350: PUSH
24351: LD_VAR 0 3
24355: PPUSH
24356: CALL_OW 250
24360: PUSH
24361: LD_VAR 0 3
24365: PPUSH
24366: CALL_OW 251
24370: PUSH
24371: LD_VAR 0 3
24375: PPUSH
24376: CALL_OW 254
24380: PUSH
24381: LD_VAR 0 3
24385: PPUSH
24386: CALL_OW 267
24390: PUSH
24391: LD_VAR 0 3
24395: PPUSH
24396: CALL_OW 248
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 2
24413: ST_TO_ADDR
24414: GO 24498
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24416: LD_ADDR_VAR 0 4
24420: PUSH
24421: LD_VAR 0 4
24425: PUSH
24426: LD_VAR 0 3
24430: PPUSH
24431: CALL_OW 266
24435: PUSH
24436: LD_VAR 0 3
24440: PPUSH
24441: CALL_OW 250
24445: PUSH
24446: LD_VAR 0 3
24450: PPUSH
24451: CALL_OW 251
24455: PUSH
24456: LD_VAR 0 3
24460: PPUSH
24461: CALL_OW 254
24465: PUSH
24466: LD_VAR 0 3
24470: PPUSH
24471: CALL_OW 267
24475: PUSH
24476: LD_VAR 0 3
24480: PPUSH
24481: CALL_OW 248
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: ADD
24497: ST_TO_ADDR
// end ;
24498: GO 24062
24500: POP
24501: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
24502: LD_VAR 0 4
24506: PPUSH
24507: LD_STRING 08_GammaBase
24509: PPUSH
24510: CALL_OW 39
// end ;
24514: LD_VAR 0 2
24518: RET
