// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7438 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6215 0 0
// PrepareRussians ;
 229: CALL 6533 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8848 0 6
// PrepareCutsceneAttack ;
 312: CALL 6267 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6951 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6951 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6951 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6951 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6951 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6951 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6951 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6951 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6951 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6951 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6951 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6951 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6951 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6951 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6951 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6951 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 52
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 2982
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2805
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// end else
2803: GO 2947
// begin if bc_type = 4 then
2805: LD_OWVAR 42
2809: PUSH
2810: LD_INT 4
2812: EQUAL
2813: IFFALSE 2862
// begin bc_type = 5 ;
2815: LD_ADDR_OWVAR 42
2819: PUSH
2820: LD_INT 5
2822: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2823: LD_ADDR_VAR 0 4
2827: PUSH
2828: LD_VAR 0 3
2832: PUSH
2833: LD_INT 2
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 4
2853: ARRAY
2854: PPUSH
2855: CALL_OW 47
2859: ST_TO_ADDR
// end else
2860: GO 2947
// begin bc_type := i [ 1 ] ;
2862: LD_ADDR_OWVAR 42
2866: PUSH
2867: LD_VAR 0 3
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2876: LD_STRING 06_remoteVehs_1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 30
2886: PUSH
2887: LD_INT 1
2889: EQUAL
2890: PUSH
2891: LD_OWVAR 42
2895: PUSH
2896: LD_INT 7
2898: EQUAL
2899: AND
2900: IFFALSE 2910
// bc_type := b_lab_full ;
2902: LD_ADDR_OWVAR 42
2906: PUSH
2907: LD_INT 8
2909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 2
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PUSH
2929: LD_INT 3
2931: ARRAY
2932: PPUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 4
2940: ARRAY
2941: PPUSH
2942: CALL_OW 47
2946: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2947: LD_VAR 0 4
2951: PPUSH
2952: CALL_OW 266
2956: PUSH
2957: LD_INT 32
2959: EQUAL
2960: IFFALSE 2980
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2962: LD_VAR 0 4
2966: PPUSH
2967: LD_VAR 0 3
2971: PUSH
2972: LD_INT 7
2974: ARRAY
2975: PPUSH
2976: CALL_OW 431
// end ;
2980: GO 2642
2982: POP
2983: POP
// if not amDepot then
2984: LD_EXP 37
2988: NOT
2989: IFFALSE 3026
// begin bc_type := b_warehouse ;
2991: LD_ADDR_OWVAR 42
2995: PUSH
2996: LD_INT 1
2998: ST_TO_ADDR
// bc_level := 6 ;
2999: LD_ADDR_OWVAR 43
3003: PUSH
3004: LD_INT 6
3006: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3007: LD_ADDR_EXP 37
3011: PUSH
3012: LD_INT 52
3014: PPUSH
3015: LD_INT 12
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 47
3025: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3026: LD_EXP 37
3030: PPUSH
3031: LD_STRING gamma
3033: PPUSH
3034: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3038: LD_EXP 37
3042: PPUSH
3043: CALL_OW 274
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: LD_INT 500
3053: PUSH
3054: LD_INT 420
3056: PUSH
3057: LD_INT 350
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_OWVAR 67
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3075: LD_EXP 37
3079: PPUSH
3080: CALL_OW 274
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: LD_INT 200
3090: PPUSH
3091: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3095: LD_INT 22
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: LD_INT 30
3107: PUSH
3108: LD_INT 3
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PPUSH
3119: CALL_OW 69
3123: IFFALSE 3371
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3125: LD_ADDR_VAR 0 4
3129: PUSH
3130: LD_INT 22
3132: PUSH
3133: LD_INT 1
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 30
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PPUSH
3154: CALL_OW 69
3158: PUSH
3159: LD_INT 1
3161: ARRAY
3162: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 4
3172: PPUSH
3173: CALL_OW 250
3177: PPUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: CALL_OW 251
3187: PPUSH
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 254
3197: PPUSH
3198: CALL 16760 0 3
3202: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: LD_INT 19
3210: PUSH
3211: LD_INT 17
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3218: LD_STRING 06_remoteVehs_1
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 30
3228: IFFALSE 3251
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 20
3245: PPUSH
3246: CALL_OW 2
3250: ST_TO_ADDR
// for i in tmp do
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_VAR 0 6
3260: PUSH
3261: FOR_IN
3262: IFFALSE 3369
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: CALL_OW 428
3286: PUSH
3287: LD_INT 0
3289: EQUAL
3290: IFFALSE 3367
// begin bc_type := blist [ 1 ] ;
3292: LD_ADDR_OWVAR 42
3296: PUSH
3297: LD_VAR 0 2
3301: PUSH
3302: LD_INT 1
3304: ARRAY
3305: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3306: LD_VAR 0 3
3310: PUSH
3311: LD_INT 1
3313: ARRAY
3314: PPUSH
3315: LD_VAR 0 3
3319: PUSH
3320: LD_INT 2
3322: ARRAY
3323: PPUSH
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 3
3331: ARRAY
3332: PPUSH
3333: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_VAR 0 2
3346: PPUSH
3347: LD_INT 1
3349: PPUSH
3350: CALL_OW 3
3354: ST_TO_ADDR
// if blist = 0 then
3355: LD_VAR 0 2
3359: PUSH
3360: LD_INT 0
3362: EQUAL
3363: IFFALSE 3367
// break ;
3365: GO 3369
// end ;
3367: GO 3261
3369: POP
3370: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3371: LD_STRING 06_remoteVehs_1
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 30
3381: PUSH
3382: LD_INT 1
3384: EQUAL
3385: IFFALSE 3844
// begin bc_type = 36 ;
3387: LD_ADDR_OWVAR 42
3391: PUSH
3392: LD_INT 36
3394: ST_TO_ADDR
// bc_level = 4 ;
3395: LD_ADDR_OWVAR 43
3399: PUSH
3400: LD_INT 4
3402: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 5 ] ) then
3403: LD_EXP 37
3407: PPUSH
3408: LD_INT 36
3410: PPUSH
3411: LD_INT 62
3413: PPUSH
3414: LD_INT 12
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: LD_INT 0
3422: PPUSH
3423: CALL 17630 0 6
3427: PUSH
3428: LD_INT 92
3430: PUSH
3431: LD_INT 62
3433: PUSH
3434: LD_INT 12
3436: PUSH
3437: LD_INT 5
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: NOT
3451: AND
3452: IFFALSE 3469
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3454: LD_INT 62
3456: PPUSH
3457: LD_INT 12
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: CALL_OW 47
3467: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 5 ] ) then
3469: LD_EXP 37
3473: PPUSH
3474: LD_INT 36
3476: PPUSH
3477: LD_INT 37
3479: PPUSH
3480: LD_INT 18
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: CALL 17630 0 6
3493: PUSH
3494: LD_INT 92
3496: PUSH
3497: LD_INT 37
3499: PUSH
3500: LD_INT 18
3502: PUSH
3503: LD_INT 5
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: PPUSH
3512: CALL_OW 69
3516: NOT
3517: AND
3518: IFFALSE 3535
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3520: LD_INT 37
3522: PPUSH
3523: LD_INT 18
3525: PPUSH
3526: LD_INT 2
3528: PPUSH
3529: CALL_OW 47
3533: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 5 ] ) then
3535: LD_EXP 37
3539: PPUSH
3540: LD_INT 36
3542: PPUSH
3543: LD_INT 66
3545: PPUSH
3546: LD_INT 14
3548: PPUSH
3549: LD_INT 4
3551: PPUSH
3552: LD_INT 0
3554: PPUSH
3555: CALL 17630 0 6
3559: PUSH
3560: LD_INT 92
3562: PUSH
3563: LD_INT 66
3565: PUSH
3566: LD_INT 14
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: NOT
3583: AND
3584: IFFALSE 3601
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3586: LD_INT 66
3588: PPUSH
3589: LD_INT 14
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: CALL_OW 47
3599: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3601: LD_EXP 37
3605: PPUSH
3606: LD_INT 36
3608: PPUSH
3609: LD_INT 74
3611: PPUSH
3612: LD_INT 26
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 17630 0 6
3625: IFFALSE 3640
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3627: LD_INT 74
3629: PPUSH
3630: LD_INT 26
3632: PPUSH
3633: LD_INT 4
3635: PPUSH
3636: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3640: LD_INT 22
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 30
3652: PUSH
3653: LD_INT 36
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 69
3668: NOT
3669: IFFALSE 3673
// exit ;
3671: GO 3844
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: DOUBLE
3679: LD_INT 1
3681: DEC
3682: ST_TO_ADDR
3683: LD_INT 3
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: LD_INT 2
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_OWVAR 67
3701: ARRAY
3702: PUSH
3703: FOR_TO
3704: IFFALSE 3842
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3706: LD_ADDR_OWVAR 37
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: LD_INT 2
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 1
3726: PPUSH
3727: LD_INT 2
3729: PPUSH
3730: CALL_OW 12
3734: ARRAY
3735: PUSH
3736: LD_INT 2
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: ST_TO_ADDR
// vc_engine = 1 ;
3750: LD_ADDR_OWVAR 39
3754: PUSH
3755: LD_INT 1
3757: ST_TO_ADDR
// vc_control = 2 ;
3758: LD_ADDR_OWVAR 38
3762: PUSH
3763: LD_INT 2
3765: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3766: LD_ADDR_OWVAR 40
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 5
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 3
3790: PPUSH
3791: CALL_OW 12
3795: ARRAY
3796: ST_TO_ADDR
// veh = CreateVehicle ;
3797: LD_ADDR_VAR 0 5
3801: PUSH
3802: CALL_OW 45
3806: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3807: LD_VAR 0 5
3811: PPUSH
3812: LD_INT 4
3814: PPUSH
3815: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3819: LD_VAR 0 5
3823: PPUSH
3824: LD_INT 56
3826: PPUSH
3827: LD_INT 17
3829: PPUSH
3830: LD_INT 9
3832: PPUSH
3833: LD_INT 0
3835: PPUSH
3836: CALL_OW 50
// end ;
3840: GO 3703
3842: POP
3843: POP
// end ; end ;
3844: LD_VAR 0 1
3848: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3849: LD_INT 0
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
// uc_side = 1 ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_INT 1
3862: ST_TO_ADDR
// uc_nation = 1 ;
3863: LD_ADDR_OWVAR 21
3867: PUSH
3868: LD_INT 1
3870: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3871: LD_ADDR_EXP 14
3875: PUSH
3876: LD_STRING 06c_Denis
3878: PPUSH
3879: LD_INT 1
3881: PPUSH
3882: CALL 6951 0 2
3886: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3887: LD_EXP 14
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3902: LD_ADDR_EXP 15
3906: PUSH
3907: LD_STRING 06c_Joan
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL 6951 0 2
3917: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3918: LD_EXP 15
3922: PPUSH
3923: LD_INT 4
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3933: LD_STRING GladstoneIn07
3935: PPUSH
3936: LD_INT 0
3938: PPUSH
3939: CALL_OW 30
3943: NOT
3944: IFFALSE 4012
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3946: LD_ADDR_EXP 8
3950: PUSH
3951: LD_STRING 06c_Gladstone
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL 6951 0 2
3961: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3962: LD_EXP 8
3966: NOT
3967: PUSH
3968: LD_STRING GladstoneStayInDelta
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: CALL_OW 30
3978: AND
3979: IFFALSE 3997
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3981: LD_ADDR_EXP 8
3985: PUSH
3986: LD_STRING 05_Gladstone
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: CALL 6951 0 2
3996: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3997: LD_EXP 8
4001: PPUSH
4002: LD_INT 4
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4012: LD_STRING LisaStayInDelta
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 30
4022: IFFALSE 4055
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
4024: LD_ADDR_EXP 6
4028: PUSH
4029: LD_STRING 05_Lisa
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL 6951 0 2
4039: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4040: LD_EXP 6
4044: PPUSH
4045: LD_INT 4
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4055: LD_STRING BobbyStayInDelta
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 30
4065: IFFALSE 4098
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4067: LD_ADDR_EXP 4
4071: PUSH
4072: LD_STRING 05_Bobby
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: CALL 6951 0 2
4082: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4083: LD_EXP 4
4087: PPUSH
4088: LD_INT 4
4090: PPUSH
4091: LD_INT 0
4093: PPUSH
4094: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4098: LD_STRING CyrusStayInDelta
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 30
4108: IFFALSE 4141
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4110: LD_ADDR_EXP 5
4114: PUSH
4115: LD_STRING 05_Cyrus
4117: PPUSH
4118: LD_INT 1
4120: PPUSH
4121: CALL 6951 0 2
4125: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4126: LD_EXP 5
4130: PPUSH
4131: LD_INT 4
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4141: LD_STRING BrownStayInDelta
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 30
4151: IFFALSE 4184
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4153: LD_ADDR_EXP 2
4157: PUSH
4158: LD_STRING 05_Brown
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: CALL 6951 0 2
4168: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4169: LD_EXP 2
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4184: LD_STRING DonaldsonStayInDelta
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 30
4194: IFFALSE 4227
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4196: LD_ADDR_EXP 3
4200: PUSH
4201: LD_STRING 05_Donaldson
4203: PPUSH
4204: LD_INT 1
4206: PPUSH
4207: CALL 6951 0 2
4211: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4212: LD_EXP 3
4216: PPUSH
4217: LD_INT 4
4219: PPUSH
4220: LD_INT 0
4222: PPUSH
4223: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4227: LD_ADDR_VAR 0 4
4231: PUSH
4232: LD_STRING OthersStayInDelta
4234: PPUSH
4235: CALL_OW 31
4239: ST_TO_ADDR
// if other > 2 then
4240: LD_VAR 0 4
4244: PUSH
4245: LD_INT 2
4247: GREATER
4248: IFFALSE 4293
// begin for j = 1 to 2 do
4250: LD_ADDR_VAR 0 3
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 2
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4289
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4266: LD_VAR 0 4
4270: PUSH
4271: LD_VAR 0 3
4275: ARRAY
4276: PPUSH
4277: LD_INT 4
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 49
4287: GO 4263
4289: POP
4290: POP
// end else
4291: GO 4336
// begin for j = 1 to other do
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_VAR 0 4
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4334
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4311: LD_VAR 0 4
4315: PUSH
4316: LD_VAR 0 3
4320: ARRAY
4321: PPUSH
4322: LD_INT 4
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 49
4332: GO 4308
4334: POP
4335: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4336: LD_ADDR_VAR 0 4
4340: PUSH
4341: LD_STRING 06_other_apemans
4343: PPUSH
4344: CALL_OW 31
4348: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4349: LD_VAR 0 4
4353: PUSH
4354: LD_INT 5
4356: PUSH
4357: LD_INT 4
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_OWVAR 67
4372: ARRAY
4373: GREATEREQUAL
4374: IFFALSE 4403
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: LD_OWVAR 67
4399: ARRAY
4400: ST_TO_ADDR
4401: GO 4413
// j := other ;
4403: LD_ADDR_VAR 0 3
4407: PUSH
4408: LD_VAR 0 4
4412: ST_TO_ADDR
// for i = 1 to j do
4413: LD_ADDR_VAR 0 2
4417: PUSH
4418: DOUBLE
4419: LD_INT 1
4421: DEC
4422: ST_TO_ADDR
4423: LD_VAR 0 3
4427: PUSH
4428: FOR_TO
4429: IFFALSE 4454
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4431: LD_VAR 0 4
4435: PUSH
4436: LD_VAR 0 2
4440: ARRAY
4441: PPUSH
4442: LD_INT 4
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
4452: GO 4428
4454: POP
4455: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4456: LD_INT 4
4458: PPUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 21
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PPUSH
4483: CALL_OW 70
4487: PPUSH
4488: LD_INT 53
4490: PPUSH
4491: LD_INT 19
4493: PPUSH
4494: CALL_OW 111
// firstAttack = 1 ;
4498: LD_ADDR_EXP 33
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// end ;
4506: LD_VAR 0 1
4510: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4522: LD_ADDR_VAR 0 8
4526: PUSH
4527: LD_STRING 07_vehicles
4529: PPUSH
4530: EMPTY
4531: PPUSH
4532: CALL_OW 30
4536: ST_TO_ADDR
// uc_side := 1 ;
4537: LD_ADDR_OWVAR 20
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// uc_nation := 1 ;
4545: LD_ADDR_OWVAR 21
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// if vehicles then
4553: LD_VAR 0 8
4557: IFFALSE 4716
// begin k := 1 ;
4559: LD_ADDR_VAR 0 3
4563: PUSH
4564: LD_INT 1
4566: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: DOUBLE
4573: LD_INT 1
4575: DEC
4576: ST_TO_ADDR
4577: LD_VAR 0 8
4581: PUSH
4582: LD_INT 4
4584: DIV
4585: PUSH
4586: FOR_TO
4587: IFFALSE 4714
// begin vc_chassis = vehicles [ k ] ;
4589: LD_ADDR_OWVAR 37
4593: PUSH
4594: LD_VAR 0 8
4598: PUSH
4599: LD_VAR 0 3
4603: ARRAY
4604: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4605: LD_ADDR_OWVAR 39
4609: PUSH
4610: LD_VAR 0 8
4614: PUSH
4615: LD_VAR 0 3
4619: PUSH
4620: LD_INT 1
4622: PLUS
4623: ARRAY
4624: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4625: LD_ADDR_OWVAR 38
4629: PUSH
4630: LD_VAR 0 8
4634: PUSH
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 2
4642: PLUS
4643: ARRAY
4644: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4645: LD_ADDR_OWVAR 40
4649: PUSH
4650: LD_VAR 0 8
4654: PUSH
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 3
4662: PLUS
4663: ARRAY
4664: ST_TO_ADDR
// k := k + 4 ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 4
4677: PLUS
4678: ST_TO_ADDR
// veh := CreateVehicle ;
4679: LD_ADDR_VAR 0 9
4683: PUSH
4684: CALL_OW 45
4688: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4689: LD_ADDR_VAR 0 7
4693: PUSH
4694: LD_VAR 0 7
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: LD_VAR 0 9
4706: PPUSH
4707: CALL_OW 2
4711: ST_TO_ADDR
// end ;
4712: GO 4586
4714: POP
4715: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4716: LD_ADDR_EXP 1
4720: PUSH
4721: LD_EXP 43
4725: PUSH
4726: LD_STRING JMM
4728: STR
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: CALL 6951 0 2
4737: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4738: LD_EXP 12
4742: PUSH
4743: LD_INT 1
4745: EQUAL
4746: PUSH
4747: LD_EXP 12
4751: PUSH
4752: LD_INT 3
4754: EQUAL
4755: OR
4756: PUSH
4757: LD_EXP 2
4761: NOT
4762: AND
4763: IFFALSE 4816
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4765: LD_ADDR_EXP 2
4769: PUSH
4770: LD_EXP 43
4774: PUSH
4775: LD_STRING Brown
4777: STR
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL 6951 0 2
4786: ST_TO_ADDR
// if Brown then
4787: LD_EXP 2
4791: IFFALSE 4816
// tmp := Insert ( tmp , 1 , Brown ) ;
4793: LD_ADDR_VAR 0 6
4797: PUSH
4798: LD_VAR 0 6
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: LD_EXP 2
4810: PPUSH
4811: CALL_OW 2
4815: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4816: LD_EXP 12
4820: PUSH
4821: LD_INT 2
4823: EQUAL
4824: PUSH
4825: LD_EXP 12
4829: PUSH
4830: LD_INT 3
4832: EQUAL
4833: OR
4834: PUSH
4835: LD_EXP 3
4839: NOT
4840: AND
4841: IFFALSE 4894
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4843: LD_ADDR_EXP 3
4847: PUSH
4848: LD_EXP 43
4852: PUSH
4853: LD_STRING Donaldson
4855: STR
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: CALL 6951 0 2
4864: ST_TO_ADDR
// if Donaldson then
4865: LD_EXP 3
4869: IFFALSE 4894
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4871: LD_ADDR_VAR 0 6
4875: PUSH
4876: LD_VAR 0 6
4880: PPUSH
4881: LD_INT 1
4883: PPUSH
4884: LD_EXP 3
4888: PPUSH
4889: CALL_OW 2
4893: ST_TO_ADDR
// end ; if not Bobby then
4894: LD_EXP 4
4898: NOT
4899: IFFALSE 4952
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4901: LD_ADDR_EXP 4
4905: PUSH
4906: LD_EXP 43
4910: PUSH
4911: LD_STRING Bobby
4913: STR
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL 6951 0 2
4922: ST_TO_ADDR
// if Bobby then
4923: LD_EXP 4
4927: IFFALSE 4952
// tmp := Insert ( tmp , 1 , Bobby ) ;
4929: LD_ADDR_VAR 0 6
4933: PUSH
4934: LD_VAR 0 6
4938: PPUSH
4939: LD_INT 1
4941: PPUSH
4942: LD_EXP 4
4946: PPUSH
4947: CALL_OW 2
4951: ST_TO_ADDR
// end ; if not Cyrus then
4952: LD_EXP 5
4956: NOT
4957: IFFALSE 5010
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4959: LD_ADDR_EXP 5
4963: PUSH
4964: LD_EXP 43
4968: PUSH
4969: LD_STRING Cyrus
4971: STR
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL 6951 0 2
4980: ST_TO_ADDR
// if Cyrus then
4981: LD_EXP 5
4985: IFFALSE 5010
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_VAR 0 6
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: LD_EXP 5
5004: PPUSH
5005: CALL_OW 2
5009: ST_TO_ADDR
// end ; if not Lisa then
5010: LD_EXP 6
5014: NOT
5015: IFFALSE 5068
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5017: LD_ADDR_EXP 6
5021: PUSH
5022: LD_EXP 43
5026: PUSH
5027: LD_STRING Lisa
5029: STR
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL 6951 0 2
5038: ST_TO_ADDR
// if Lisa then
5039: LD_EXP 6
5043: IFFALSE 5068
// tmp := Insert ( tmp , 1 , Lisa ) ;
5045: LD_ADDR_VAR 0 6
5049: PUSH
5050: LD_VAR 0 6
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 6
5062: PPUSH
5063: CALL_OW 2
5067: ST_TO_ADDR
// end ; if not Frank then
5068: LD_EXP 7
5072: NOT
5073: IFFALSE 5126
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5075: LD_ADDR_EXP 7
5079: PUSH
5080: LD_EXP 43
5084: PUSH
5085: LD_STRING Frank
5087: STR
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: CALL 6951 0 2
5096: ST_TO_ADDR
// if Frank then
5097: LD_EXP 7
5101: IFFALSE 5126
// tmp := Insert ( tmp , 1 , Frank ) ;
5103: LD_ADDR_VAR 0 6
5107: PUSH
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: LD_EXP 7
5120: PPUSH
5121: CALL_OW 2
5125: ST_TO_ADDR
// end ; if not Kikuchi then
5126: LD_EXP 9
5130: NOT
5131: IFFALSE 5184
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5133: LD_ADDR_EXP 9
5137: PUSH
5138: LD_EXP 43
5142: PUSH
5143: LD_STRING Kikuchi
5145: STR
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL 6951 0 2
5154: ST_TO_ADDR
// if Kikuchi then
5155: LD_EXP 9
5159: IFFALSE 5184
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5161: LD_ADDR_VAR 0 6
5165: PUSH
5166: LD_VAR 0 6
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: LD_EXP 9
5178: PPUSH
5179: CALL_OW 2
5183: ST_TO_ADDR
// end ; if not Gladstone then
5184: LD_EXP 8
5188: NOT
5189: IFFALSE 5242
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5191: LD_ADDR_EXP 8
5195: PUSH
5196: LD_EXP 43
5200: PUSH
5201: LD_STRING Gladstone
5203: STR
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL 6951 0 2
5212: ST_TO_ADDR
// if Gladstone then
5213: LD_EXP 8
5217: IFFALSE 5242
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_VAR 0 6
5228: PPUSH
5229: LD_INT 1
5231: PPUSH
5232: LD_EXP 8
5236: PPUSH
5237: CALL_OW 2
5241: ST_TO_ADDR
// end ; if not Khatam then
5242: LD_EXP 10
5246: NOT
5247: IFFALSE 5300
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5249: LD_ADDR_EXP 10
5253: PUSH
5254: LD_EXP 43
5258: PUSH
5259: LD_STRING Khatam
5261: STR
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL 6951 0 2
5270: ST_TO_ADDR
// if Khatam then
5271: LD_EXP 10
5275: IFFALSE 5300
// tmp := Insert ( tmp , 1 , Khatam ) ;
5277: LD_ADDR_VAR 0 6
5281: PUSH
5282: LD_VAR 0 6
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: LD_EXP 10
5294: PPUSH
5295: CALL_OW 2
5299: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5300: LD_ADDR_VAR 0 5
5304: PUSH
5305: LD_STRING 07c_others
5307: PPUSH
5308: CALL_OW 31
5312: ST_TO_ADDR
// if others then
5313: LD_VAR 0 5
5317: IFFALSE 5405
// for i in others do
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 5
5328: PUSH
5329: FOR_IN
5330: IFFALSE 5403
// if GetClass ( i ) = 3 then
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 257
5341: PUSH
5342: LD_INT 3
5344: EQUAL
5345: IFFALSE 5372
// tmp := Insert ( tmp , 1 , i ) else
5347: LD_ADDR_VAR 0 6
5351: PUSH
5352: LD_VAR 0 6
5356: PPUSH
5357: LD_INT 1
5359: PPUSH
5360: LD_VAR 0 2
5364: PPUSH
5365: CALL_OW 2
5369: ST_TO_ADDR
5370: GO 5401
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5372: LD_ADDR_VAR 0 6
5376: PUSH
5377: LD_VAR 0 6
5381: PPUSH
5382: LD_VAR 0 6
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: PPUSH
5391: LD_VAR 0 2
5395: PPUSH
5396: CALL_OW 2
5400: ST_TO_ADDR
5401: GO 5329
5403: POP
5404: POP
// wait ( 0 0$1 ) ;
5405: LD_INT 35
5407: PPUSH
5408: CALL_OW 67
// for i in tmp do
5412: LD_ADDR_VAR 0 2
5416: PUSH
5417: LD_VAR 0 6
5421: PUSH
5422: FOR_IN
5423: IFFALSE 5555
// begin SetDir ( i , 3 ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: LD_INT 3
5432: PPUSH
5433: CALL_OW 233
// if tmp_vehs then
5437: LD_VAR 0 7
5441: IFFALSE 5516
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5443: LD_VAR 0 7
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 3
5454: PPUSH
5455: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5459: LD_VAR 0 7
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_INT 4
5470: PPUSH
5471: LD_INT 0
5473: PPUSH
5474: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5478: LD_VAR 0 2
5482: PPUSH
5483: LD_VAR 0 7
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: PPUSH
5492: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5496: LD_ADDR_VAR 0 7
5500: PUSH
5501: LD_VAR 0 7
5505: PPUSH
5506: LD_INT 1
5508: PPUSH
5509: CALL_OW 3
5513: ST_TO_ADDR
// end else
5514: GO 5531
// PlaceUnitArea ( i , GammaSupport , false ) ;
5516: LD_VAR 0 2
5520: PPUSH
5521: LD_INT 4
5523: PPUSH
5524: LD_INT 0
5526: PPUSH
5527: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_INT 77
5538: PPUSH
5539: LD_INT 16
5541: PPUSH
5542: CALL_OW 111
// wait ( 0 0$2 ) ;
5546: LD_INT 70
5548: PPUSH
5549: CALL_OW 67
// end ;
5553: GO 5422
5555: POP
5556: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_INT 4
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5572: LD_EXP 1
5576: PPUSH
5577: LD_INT 77
5579: PPUSH
5580: LD_INT 16
5582: PPUSH
5583: CALL_OW 111
// end ;
5587: LD_VAR 0 1
5591: RET
// export function PrepareSikorsky ; begin
5592: LD_INT 0
5594: PPUSH
// uc_side = 4 ;
5595: LD_ADDR_OWVAR 20
5599: PUSH
5600: LD_INT 4
5602: ST_TO_ADDR
// uc_nation = 1 ;
5603: LD_ADDR_OWVAR 21
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5611: LD_ADDR_EXP 16
5615: PUSH
5616: LD_STRING Sikorski
5618: PPUSH
5619: LD_INT 0
5621: PPUSH
5622: CALL 6951 0 2
5626: ST_TO_ADDR
// vc_engine = 1 ;
5627: LD_ADDR_OWVAR 39
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// vc_control = 1 ;
5635: LD_ADDR_OWVAR 38
5639: PUSH
5640: LD_INT 1
5642: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5643: LD_ADDR_OWVAR 40
5647: PUSH
5648: LD_INT 5
5650: PUSH
5651: LD_INT 3
5653: PUSH
5654: LD_INT 4
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_OWVAR 67
5666: ARRAY
5667: ST_TO_ADDR
// vc_chassis = 4 ;
5668: LD_ADDR_OWVAR 37
5672: PUSH
5673: LD_INT 4
5675: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5676: LD_ADDR_EXP 17
5680: PUSH
5681: CALL_OW 45
5685: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5686: LD_EXP 17
5690: PPUSH
5691: LD_INT 9
5693: PPUSH
5694: LD_INT 0
5696: PPUSH
5697: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5701: LD_EXP 16
5705: PPUSH
5706: LD_EXP 17
5710: PPUSH
5711: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5715: LD_EXP 17
5719: PPUSH
5720: LD_INT 5
5722: PPUSH
5723: CALL_OW 113
// end ;
5727: LD_VAR 0 1
5731: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
5736: PPUSH
5737: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: DOUBLE
5744: LD_INT 1
5746: DEC
5747: ST_TO_ADDR
5748: LD_INT 8
5750: PUSH
5751: LD_INT 7
5753: PUSH
5754: LD_INT 7
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: LD_OWVAR 67
5766: ARRAY
5767: PUSH
5768: FOR_TO
5769: IFFALSE 5866
// begin uc_side = 4 ;
5771: LD_ADDR_OWVAR 20
5775: PUSH
5776: LD_INT 4
5778: ST_TO_ADDR
// uc_nation = 1 ;
5779: LD_ADDR_OWVAR 21
5783: PUSH
5784: LD_INT 1
5786: ST_TO_ADDR
// hc_name =  ;
5787: LD_ADDR_OWVAR 26
5791: PUSH
5792: LD_STRING 
5794: ST_TO_ADDR
// hc_gallery =  ;
5795: LD_ADDR_OWVAR 33
5799: PUSH
5800: LD_STRING 
5802: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5803: LD_INT 0
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 5
5811: PPUSH
5812: LD_INT 8
5814: PPUSH
5815: CALL_OW 12
5819: PPUSH
5820: CALL_OW 380
// un = CreateHuman ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: CALL_OW 44
5833: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 9
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5849: LD_VAR 0 3
5853: PPUSH
5854: LD_INT 53
5856: PPUSH
5857: LD_INT 23
5859: PPUSH
5860: CALL_OW 111
// end ;
5864: GO 5768
5866: POP
5867: POP
// for i = 1 to 3 do
5868: LD_ADDR_VAR 0 2
5872: PUSH
5873: DOUBLE
5874: LD_INT 1
5876: DEC
5877: ST_TO_ADDR
5878: LD_INT 3
5880: PUSH
5881: FOR_TO
5882: IFFALSE 5979
// begin uc_side = 4 ;
5884: LD_ADDR_OWVAR 20
5888: PUSH
5889: LD_INT 4
5891: ST_TO_ADDR
// uc_nation = 1 ;
5892: LD_ADDR_OWVAR 21
5896: PUSH
5897: LD_INT 1
5899: ST_TO_ADDR
// hc_name =  ;
5900: LD_ADDR_OWVAR 26
5904: PUSH
5905: LD_STRING 
5907: ST_TO_ADDR
// hc_gallery =  ;
5908: LD_ADDR_OWVAR 33
5912: PUSH
5913: LD_STRING 
5915: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5916: LD_INT 0
5918: PPUSH
5919: LD_INT 4
5921: PPUSH
5922: LD_INT 5
5924: PPUSH
5925: LD_INT 8
5927: PPUSH
5928: CALL_OW 12
5932: PPUSH
5933: CALL_OW 380
// un = CreateHuman ;
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: CALL_OW 44
5946: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5947: LD_VAR 0 3
5951: PPUSH
5952: LD_INT 9
5954: PPUSH
5955: LD_INT 0
5957: PPUSH
5958: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5962: LD_VAR 0 3
5966: PPUSH
5967: LD_INT 53
5969: PPUSH
5970: LD_INT 23
5972: PPUSH
5973: CALL_OW 111
// end ;
5977: GO 5881
5979: POP
5980: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5981: LD_ADDR_VAR 0 2
5985: PUSH
5986: DOUBLE
5987: LD_INT 1
5989: DEC
5990: ST_TO_ADDR
5991: LD_INT 9
5993: PUSH
5994: LD_INT 8
5996: PUSH
5997: LD_INT 7
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: PUSH
6005: LD_OWVAR 67
6009: ARRAY
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6208
// begin uc_side = 4 ;
6014: LD_ADDR_OWVAR 20
6018: PUSH
6019: LD_INT 4
6021: ST_TO_ADDR
// uc_nation = 1 ;
6022: LD_ADDR_OWVAR 21
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// vc_engine = 1 ;
6030: LD_ADDR_OWVAR 39
6034: PUSH
6035: LD_INT 1
6037: ST_TO_ADDR
// vc_control = 1 ;
6038: LD_ADDR_OWVAR 38
6042: PUSH
6043: LD_INT 1
6045: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6046: LD_ADDR_OWVAR 40
6050: PUSH
6051: LD_INT 3
6053: PUSH
6054: LD_INT 4
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: LD_INT 6
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 1
6071: PPUSH
6072: LD_INT 4
6074: PPUSH
6075: CALL_OW 12
6079: ARRAY
6080: ST_TO_ADDR
// vc_chassis = 4 ;
6081: LD_ADDR_OWVAR 37
6085: PUSH
6086: LD_INT 4
6088: ST_TO_ADDR
// veh = CreateVehicle ;
6089: LD_ADDR_VAR 0 4
6093: PUSH
6094: CALL_OW 45
6098: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6099: LD_VAR 0 4
6103: PPUSH
6104: LD_INT 9
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 49
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 3
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_VAR 0 4
6170: PPUSH
6171: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6175: LD_VAR 0 4
6179: PUSH
6180: LD_VAR 0 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PPUSH
6189: LD_INT 53
6191: PPUSH
6192: LD_INT 23
6194: PPUSH
6195: CALL_OW 111
// wait ( 0 0$5 ) ;
6199: LD_INT 175
6201: PPUSH
6202: CALL_OW 67
// end ;
6206: GO 6011
6208: POP
6209: POP
// end ; end_of_file
6210: LD_VAR 0 1
6214: RET
// export function PrepareRussianCommander ; begin
6215: LD_INT 0
6217: PPUSH
// uc_side = 3 ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// uc_nation = 3 ;
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 3
6233: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6234: LD_ADDR_EXP 24
6238: PUSH
6239: LD_STRING Borodin
6241: PPUSH
6242: CALL_OW 25
6246: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6247: LD_EXP 24
6251: PPUSH
6252: LD_INT 25
6254: PPUSH
6255: LD_INT 0
6257: PPUSH
6258: CALL_OW 49
// end ;
6262: LD_VAR 0 1
6266: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6267: LD_INT 0
6269: PPUSH
6270: PPUSH
6271: PPUSH
6272: PPUSH
// for i = 1 to 10 do
6273: LD_ADDR_VAR 0 2
6277: PUSH
6278: DOUBLE
6279: LD_INT 1
6281: DEC
6282: ST_TO_ADDR
6283: LD_INT 10
6285: PUSH
6286: FOR_TO
6287: IFFALSE 6361
// begin uc_side = 6 ;
6289: LD_ADDR_OWVAR 20
6293: PUSH
6294: LD_INT 6
6296: ST_TO_ADDR
// uc_nation = 3 ;
6297: LD_ADDR_OWVAR 21
6301: PUSH
6302: LD_INT 3
6304: ST_TO_ADDR
// hc_gallery =  ;
6305: LD_ADDR_OWVAR 33
6309: PUSH
6310: LD_STRING 
6312: ST_TO_ADDR
// hc_name =  ;
6313: LD_ADDR_OWVAR 26
6317: PUSH
6318: LD_STRING 
6320: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6321: LD_INT 0
6323: PPUSH
6324: LD_INT 1
6326: PPUSH
6327: LD_INT 3
6329: PPUSH
6330: CALL_OW 380
// un = CreateHuman ;
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: CALL_OW 44
6343: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6344: LD_VAR 0 3
6348: PPUSH
6349: LD_INT 1
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 49
// end ;
6359: GO 6286
6361: POP
6362: POP
// for i = 1 to 3 do
6363: LD_ADDR_VAR 0 2
6367: PUSH
6368: DOUBLE
6369: LD_INT 1
6371: DEC
6372: ST_TO_ADDR
6373: LD_INT 3
6375: PUSH
6376: FOR_TO
6377: IFFALSE 6526
// begin uc_side = 6 ;
6379: LD_ADDR_OWVAR 20
6383: PUSH
6384: LD_INT 6
6386: ST_TO_ADDR
// uc_nation = 3 ;
6387: LD_ADDR_OWVAR 21
6391: PUSH
6392: LD_INT 3
6394: ST_TO_ADDR
// vc_engine = 1 ;
6395: LD_ADDR_OWVAR 39
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// vc_control = 1 ;
6403: LD_ADDR_OWVAR 38
6407: PUSH
6408: LD_INT 1
6410: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6411: LD_ADDR_OWVAR 40
6415: PUSH
6416: LD_INT 43
6418: PUSH
6419: LD_INT 44
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 1
6428: PPUSH
6429: LD_INT 2
6431: PPUSH
6432: CALL_OW 12
6436: ARRAY
6437: ST_TO_ADDR
// vc_chassis = 22 ;
6438: LD_ADDR_OWVAR 37
6442: PUSH
6443: LD_INT 22
6445: ST_TO_ADDR
// veh = CreateVehicle ;
6446: LD_ADDR_VAR 0 4
6450: PUSH
6451: CALL_OW 45
6455: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6456: LD_VAR 0 4
6460: PPUSH
6461: LD_INT 2
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 49
// hc_gallery =  ;
6471: LD_ADDR_OWVAR 33
6475: PUSH
6476: LD_STRING 
6478: ST_TO_ADDR
// hc_name =  ;
6479: LD_ADDR_OWVAR 26
6483: PUSH
6484: LD_STRING 
6486: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6487: LD_INT 0
6489: PPUSH
6490: LD_INT 3
6492: PPUSH
6493: LD_INT 4
6495: PPUSH
6496: CALL_OW 380
// un = CreateHuman ;
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: CALL_OW 44
6509: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6510: LD_VAR 0 3
6514: PPUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: CALL_OW 52
// end ;
6524: GO 6376
6526: POP
6527: POP
// end ;
6528: LD_VAR 0 1
6532: RET
// export function PrepareRussians ; var i , un ; begin
6533: LD_INT 0
6535: PPUSH
6536: PPUSH
6537: PPUSH
// for i = 1 to 8 do
6538: LD_ADDR_VAR 0 2
6542: PUSH
6543: DOUBLE
6544: LD_INT 1
6546: DEC
6547: ST_TO_ADDR
6548: LD_INT 8
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6638
// begin uc_side = 3 ;
6554: LD_ADDR_OWVAR 20
6558: PUSH
6559: LD_INT 3
6561: ST_TO_ADDR
// uc_nation = 3 ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_INT 3
6569: ST_TO_ADDR
// hc_gallery =  ;
6570: LD_ADDR_OWVAR 33
6574: PUSH
6575: LD_STRING 
6577: ST_TO_ADDR
// hc_name =  ;
6578: LD_ADDR_OWVAR 26
6582: PUSH
6583: LD_STRING 
6585: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6586: LD_INT 0
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: LD_EXP 25
6596: PPUSH
6597: LD_EXP 26
6601: PPUSH
6602: CALL_OW 12
6606: PPUSH
6607: CALL_OW 380
// un = CreateHuman ;
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: CALL_OW 44
6620: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6621: LD_VAR 0 3
6625: PPUSH
6626: LD_INT 3
6628: PPUSH
6629: LD_INT 0
6631: PPUSH
6632: CALL_OW 49
// end ;
6636: GO 6551
6638: POP
6639: POP
// for i = 1 to 4 do
6640: LD_ADDR_VAR 0 2
6644: PUSH
6645: DOUBLE
6646: LD_INT 1
6648: DEC
6649: ST_TO_ADDR
6650: LD_INT 4
6652: PUSH
6653: FOR_TO
6654: IFFALSE 6740
// begin uc_side = 3 ;
6656: LD_ADDR_OWVAR 20
6660: PUSH
6661: LD_INT 3
6663: ST_TO_ADDR
// uc_nation = 3 ;
6664: LD_ADDR_OWVAR 21
6668: PUSH
6669: LD_INT 3
6671: ST_TO_ADDR
// hc_gallery =  ;
6672: LD_ADDR_OWVAR 33
6676: PUSH
6677: LD_STRING 
6679: ST_TO_ADDR
// hc_name =  ;
6680: LD_ADDR_OWVAR 26
6684: PUSH
6685: LD_STRING 
6687: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6688: LD_INT 0
6690: PPUSH
6691: LD_INT 2
6693: PPUSH
6694: LD_EXP 25
6698: PPUSH
6699: LD_EXP 26
6703: PPUSH
6704: CALL_OW 12
6708: PPUSH
6709: CALL_OW 380
// un = CreateHuman ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: CALL_OW 44
6722: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6723: LD_VAR 0 3
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 0
6733: PPUSH
6734: CALL_OW 49
// end ;
6738: GO 6653
6740: POP
6741: POP
// for i = 1 to 3 do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: DOUBLE
6748: LD_INT 1
6750: DEC
6751: ST_TO_ADDR
6752: LD_INT 3
6754: PUSH
6755: FOR_TO
6756: IFFALSE 6842
// begin uc_side = 3 ;
6758: LD_ADDR_OWVAR 20
6762: PUSH
6763: LD_INT 3
6765: ST_TO_ADDR
// uc_nation = 3 ;
6766: LD_ADDR_OWVAR 21
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// hc_gallery =  ;
6774: LD_ADDR_OWVAR 33
6778: PUSH
6779: LD_STRING 
6781: ST_TO_ADDR
// hc_name =  ;
6782: LD_ADDR_OWVAR 26
6786: PUSH
6787: LD_STRING 
6789: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6790: LD_INT 0
6792: PPUSH
6793: LD_INT 3
6795: PPUSH
6796: LD_EXP 25
6800: PPUSH
6801: LD_EXP 26
6805: PPUSH
6806: CALL_OW 12
6810: PPUSH
6811: CALL_OW 380
// un = CreateHuman ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 44
6824: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6825: LD_VAR 0 3
6829: PPUSH
6830: LD_INT 3
6832: PPUSH
6833: LD_INT 0
6835: PPUSH
6836: CALL_OW 49
// end ;
6840: GO 6755
6842: POP
6843: POP
// for i = 1 to 2 do
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: DOUBLE
6850: LD_INT 1
6852: DEC
6853: ST_TO_ADDR
6854: LD_INT 2
6856: PUSH
6857: FOR_TO
6858: IFFALSE 6944
// begin uc_side = 3 ;
6860: LD_ADDR_OWVAR 20
6864: PUSH
6865: LD_INT 3
6867: ST_TO_ADDR
// uc_nation = 3 ;
6868: LD_ADDR_OWVAR 21
6872: PUSH
6873: LD_INT 3
6875: ST_TO_ADDR
// hc_gallery =  ;
6876: LD_ADDR_OWVAR 33
6880: PUSH
6881: LD_STRING 
6883: ST_TO_ADDR
// hc_name =  ;
6884: LD_ADDR_OWVAR 26
6888: PUSH
6889: LD_STRING 
6891: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6892: LD_INT 0
6894: PPUSH
6895: LD_INT 4
6897: PPUSH
6898: LD_EXP 25
6902: PPUSH
6903: LD_EXP 26
6907: PPUSH
6908: CALL_OW 12
6912: PPUSH
6913: CALL_OW 380
// un = CreateHuman ;
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: CALL_OW 44
6926: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: LD_INT 0
6937: PPUSH
6938: CALL_OW 49
// end ;
6942: GO 6857
6944: POP
6945: POP
// end ; end_of_file
6946: LD_VAR 0 1
6950: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6951: LD_INT 0
6953: PPUSH
6954: PPUSH
// if exist_mode then
6955: LD_VAR 0 2
6959: IFFALSE 6978
// unit := CreateCharacter ( ident ) else
6961: LD_ADDR_VAR 0 4
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 34
6975: ST_TO_ADDR
6976: GO 6993
// unit := NewCharacter ( ident ) ;
6978: LD_ADDR_VAR 0 4
6982: PUSH
6983: LD_VAR 0 1
6987: PPUSH
6988: CALL_OW 25
6992: ST_TO_ADDR
// result := unit ;
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_VAR 0 4
7002: ST_TO_ADDR
// end ;
7003: LD_VAR 0 3
7007: RET
// export function Video ( mode ) ; begin
7008: LD_INT 0
7010: PPUSH
// ingame_video = mode ;
7011: LD_ADDR_OWVAR 52
7015: PUSH
7016: LD_VAR 0 1
7020: ST_TO_ADDR
// interface_hidden = mode ;
7021: LD_ADDR_OWVAR 54
7025: PUSH
7026: LD_VAR 0 1
7030: ST_TO_ADDR
// end ;
7031: LD_VAR 0 2
7035: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
// rnd = rand ( 1 , characters ) ;
7041: LD_ADDR_VAR 0 6
7045: PUSH
7046: LD_INT 1
7048: PPUSH
7049: LD_VAR 0 1
7053: PPUSH
7054: CALL_OW 12
7058: ST_TO_ADDR
// for i = 1 to characters do
7059: LD_ADDR_VAR 0 5
7063: PUSH
7064: DOUBLE
7065: LD_INT 1
7067: DEC
7068: ST_TO_ADDR
7069: LD_VAR 0 1
7073: PUSH
7074: FOR_TO
7075: IFFALSE 7185
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7077: LD_VAR 0 5
7081: PUSH
7082: LD_VAR 0 6
7086: EQUAL
7087: PUSH
7088: LD_VAR 0 1
7092: PUSH
7093: LD_VAR 0 5
7097: ARRAY
7098: PPUSH
7099: CALL_OW 258
7103: PUSH
7104: LD_INT 1
7106: EQUAL
7107: AND
7108: IFFALSE 7130
// Say ( characters [ i ] , dialogMID ) ;
7110: LD_VAR 0 1
7114: PUSH
7115: LD_VAR 0 5
7119: ARRAY
7120: PPUSH
7121: LD_VAR 0 2
7125: PPUSH
7126: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7130: LD_VAR 0 5
7134: PUSH
7135: LD_VAR 0 6
7139: EQUAL
7140: PUSH
7141: LD_VAR 0 1
7145: PUSH
7146: LD_VAR 0 5
7150: ARRAY
7151: PPUSH
7152: CALL_OW 258
7156: PUSH
7157: LD_INT 2
7159: EQUAL
7160: AND
7161: IFFALSE 7183
// Say ( characters [ i ] , dialogFID ) ;
7163: LD_VAR 0 1
7167: PUSH
7168: LD_VAR 0 5
7172: ARRAY
7173: PPUSH
7174: LD_VAR 0 3
7178: PPUSH
7179: CALL_OW 88
// end ;
7183: GO 7074
7185: POP
7186: POP
// end ;
7187: LD_VAR 0 4
7191: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7192: LD_INT 0
7194: PPUSH
7195: PPUSH
7196: PPUSH
// uc_side := GetSide ( b ) ;
7197: LD_ADDR_OWVAR 20
7201: PUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 255
7211: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7212: LD_ADDR_OWVAR 21
7216: PUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: CALL_OW 248
7226: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7227: LD_INT 0
7229: PPUSH
7230: LD_INT 1
7232: PPUSH
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7242: LD_ADDR_VAR 0 5
7246: PUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: CALL_OW 254
7256: PUSH
7257: LD_INT 3
7259: MINUS
7260: ST_TO_ADDR
// if dir < 0 then
7261: LD_VAR 0 5
7265: PUSH
7266: LD_INT 0
7268: LESS
7269: IFFALSE 7285
// dir := 6 + dir ;
7271: LD_ADDR_VAR 0 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_VAR 0 5
7283: PLUS
7284: ST_TO_ADDR
// un := CreateHuman ;
7285: LD_ADDR_VAR 0 4
7289: PUSH
7290: CALL_OW 44
7294: ST_TO_ADDR
// SetDir ( un , dir ) ;
7295: LD_VAR 0 4
7299: PPUSH
7300: LD_VAR 0 5
7304: PPUSH
7305: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7309: LD_VAR 0 4
7313: PPUSH
7314: LD_VAR 0 2
7318: PPUSH
7319: CALL_OW 52
// end ;
7323: LD_VAR 0 3
7327: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7328: LD_INT 0
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
// for i = 1 to count do
7334: LD_ADDR_VAR 0 8
7338: PUSH
7339: DOUBLE
7340: LD_INT 1
7342: DEC
7343: ST_TO_ADDR
7344: LD_VAR 0 6
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7431
// begin uc_side = side ;
7352: LD_ADDR_OWVAR 20
7356: PUSH
7357: LD_VAR 0 1
7361: ST_TO_ADDR
// uc_nation = nation ;
7362: LD_ADDR_OWVAR 21
7366: PUSH
7367: LD_VAR 0 2
7371: ST_TO_ADDR
// hc_gallery =  ;
7372: LD_ADDR_OWVAR 33
7376: PUSH
7377: LD_STRING 
7379: ST_TO_ADDR
// hc_name =  ;
7380: LD_ADDR_OWVAR 26
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7388: LD_INT 0
7390: PPUSH
7391: LD_VAR 0 5
7395: PPUSH
7396: LD_VAR 0 4
7400: PPUSH
7401: CALL_OW 380
// un = CreateHuman ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: CALL_OW 44
7414: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7415: LD_VAR 0 10
7419: PPUSH
7420: LD_VAR 0 3
7424: PPUSH
7425: CALL_OW 52
// end ;
7429: GO 7349
7431: POP
7432: POP
// end ;
7433: LD_VAR 0 7
7437: RET
// export function PrepareDifficulty ; begin
7438: LD_INT 0
7440: PPUSH
// if Difficulty = 1 then
7441: LD_OWVAR 67
7445: PUSH
7446: LD_INT 1
7448: EQUAL
7449: IFFALSE 7467
// begin RuSolMinLevel = 4 ;
7451: LD_ADDR_EXP 25
7455: PUSH
7456: LD_INT 4
7458: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7459: LD_ADDR_EXP 26
7463: PUSH
7464: LD_INT 6
7466: ST_TO_ADDR
// end ; if Difficulty = 2 then
7467: LD_OWVAR 67
7471: PUSH
7472: LD_INT 2
7474: EQUAL
7475: IFFALSE 7545
// begin RuSolMinLevel = 5 ;
7477: LD_ADDR_EXP 25
7481: PUSH
7482: LD_INT 5
7484: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7485: LD_ADDR_EXP 26
7489: PUSH
7490: LD_INT 6
7492: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7493: LD_INT 51
7495: PPUSH
7496: LD_INT 3
7498: PPUSH
7499: LD_INT 1
7501: PPUSH
7502: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7506: LD_INT 57
7508: PPUSH
7509: LD_INT 3
7511: PPUSH
7512: LD_INT 1
7514: PPUSH
7515: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7519: LD_INT 57
7521: PPUSH
7522: LD_INT 6
7524: PPUSH
7525: LD_INT 2
7527: PPUSH
7528: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7532: LD_INT 51
7534: PPUSH
7535: LD_INT 6
7537: PPUSH
7538: LD_INT 2
7540: PPUSH
7541: CALL_OW 322
// end ; if Difficulty = 3 then
7545: LD_OWVAR 67
7549: PUSH
7550: LD_INT 3
7552: EQUAL
7553: IFFALSE 7636
// begin RuSolMinLevel = 5 ;
7555: LD_ADDR_EXP 25
7559: PUSH
7560: LD_INT 5
7562: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7563: LD_ADDR_EXP 26
7567: PUSH
7568: LD_INT 6
7570: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7571: LD_INT 57
7573: PPUSH
7574: LD_INT 3
7576: PPUSH
7577: LD_INT 1
7579: PPUSH
7580: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7584: LD_INT 51
7586: PPUSH
7587: LD_INT 3
7589: PPUSH
7590: LD_INT 1
7592: PPUSH
7593: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7597: LD_INT 52
7599: PPUSH
7600: LD_INT 3
7602: PPUSH
7603: LD_INT 1
7605: PPUSH
7606: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7610: LD_INT 57
7612: PPUSH
7613: LD_INT 6
7615: PPUSH
7616: LD_INT 2
7618: PPUSH
7619: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7623: LD_INT 52
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: LD_INT 2
7631: PPUSH
7632: CALL_OW 322
// end ; end ;
7636: LD_VAR 0 1
7640: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7641: LD_INT 0
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 25
7664: PUSH
7665: LD_INT 2
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7681: LD_ADDR_VAR 0 4
7685: PUSH
7686: LD_INT 4
7688: PUSH
7689: LD_INT 75
7691: PUSH
7692: LD_INT 79
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 4
7706: PUSH
7707: LD_INT 113
7709: PUSH
7710: LD_INT 94
7712: PUSH
7713: LD_INT 4
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 29
7724: PUSH
7725: LD_INT 106
7727: PUSH
7728: LD_INT 97
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 26
7742: PUSH
7743: LD_INT 93
7745: PUSH
7746: LD_INT 97
7748: PUSH
7749: LD_INT 5
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 2
7760: PUSH
7761: LD_INT 100
7763: PUSH
7764: LD_INT 89
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 17
7778: PUSH
7779: LD_INT 96
7781: PUSH
7782: LD_INT 89
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 32
7796: PUSH
7797: LD_INT 78
7799: PUSH
7800: LD_INT 94
7802: PUSH
7803: LD_INT 1
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 32
7814: PUSH
7815: LD_INT 95
7817: PUSH
7818: LD_INT 82
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 32
7832: PUSH
7833: LD_INT 104
7835: PUSH
7836: LD_INT 85
7838: PUSH
7839: LD_INT 2
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 32
7850: PUSH
7851: LD_INT 81
7853: PUSH
7854: LD_INT 78
7856: PUSH
7857: LD_INT 2
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 33
7868: PUSH
7869: LD_INT 109
7871: PUSH
7872: LD_INT 90
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 33
7886: PUSH
7887: LD_INT 88
7889: PUSH
7890: LD_INT 79
7892: PUSH
7893: LD_INT 3
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 33
7904: PUSH
7905: LD_INT 76
7907: PUSH
7908: LD_INT 87
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 26
7922: PUSH
7923: LD_INT 96
7925: PUSH
7926: LD_INT 97
7928: PUSH
7929: LD_INT 5
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 85
7943: PUSH
7944: LD_INT 84
7946: PUSH
7947: LD_INT 2
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 6
7958: PUSH
7959: LD_INT 88
7961: PUSH
7962: LD_INT 95
7964: PUSH
7965: LD_INT 0
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 19
7976: PUSH
7977: LD_INT 103
7979: PUSH
7980: LD_INT 89
7982: PUSH
7983: LD_INT 4
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 16
7994: PUSH
7995: LD_INT 97
7997: PUSH
7998: LD_INT 86
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 24
8012: PUSH
8013: LD_INT 100
8015: PUSH
8016: LD_INT 85
8018: PUSH
8019: LD_INT 3
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: ST_TO_ADDR
// for i := 1 to buildingsTab do
8049: LD_ADDR_VAR 0 2
8053: PUSH
8054: DOUBLE
8055: LD_INT 1
8057: DEC
8058: ST_TO_ADDR
8059: LD_VAR 0 4
8063: PUSH
8064: FOR_TO
8065: IFFALSE 8138
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8067: LD_VAR 0 3
8071: PPUSH
8072: LD_VAR 0 4
8076: PUSH
8077: LD_VAR 0 2
8081: ARRAY
8082: PUSH
8083: LD_INT 1
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 4
8091: PUSH
8092: LD_VAR 0 2
8096: ARRAY
8097: PUSH
8098: LD_INT 2
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 4
8106: PUSH
8107: LD_VAR 0 2
8111: ARRAY
8112: PUSH
8113: LD_INT 3
8115: ARRAY
8116: PPUSH
8117: LD_VAR 0 4
8121: PUSH
8122: LD_VAR 0 2
8126: ARRAY
8127: PUSH
8128: LD_INT 4
8130: ARRAY
8131: PPUSH
8132: CALL_OW 205
8136: GO 8064
8138: POP
8139: POP
// end ;
8140: LD_VAR 0 1
8144: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
// for i in charactersList do
8149: LD_ADDR_VAR 0 4
8153: PUSH
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_IN
8160: IFFALSE 8178
// SaveCharacters ( i , ident ) ;
8162: LD_VAR 0 4
8166: PPUSH
8167: LD_VAR 0 2
8171: PPUSH
8172: CALL_OW 38
8176: GO 8159
8178: POP
8179: POP
// end ;
8180: LD_VAR 0 3
8184: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8185: LD_INT 0
8187: PPUSH
8188: PPUSH
8189: PPUSH
8190: PPUSH
8191: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8192: LD_ADDR_VAR 0 8
8196: PUSH
8197: LD_INT 48
8199: PUSH
8200: LD_INT 49
8202: PUSH
8203: LD_INT 50
8205: PUSH
8206: LD_INT 20
8208: PUSH
8209: LD_INT 1
8211: PUSH
8212: LD_INT 51
8214: PUSH
8215: LD_INT 52
8217: PUSH
8218: LD_INT 69
8220: PUSH
8221: LD_INT 39
8223: PUSH
8224: LD_INT 34
8226: PUSH
8227: LD_INT 40
8229: PUSH
8230: LD_INT 53
8232: PUSH
8233: LD_INT 71
8235: PUSH
8236: LD_INT 57
8238: PUSH
8239: LD_INT 58
8241: PUSH
8242: LD_INT 44
8244: PUSH
8245: LD_INT 32
8247: PUSH
8248: LD_INT 27
8250: PUSH
8251: LD_INT 23
8253: PUSH
8254: LD_INT 33
8256: PUSH
8257: LD_INT 59
8259: PUSH
8260: LD_INT 54
8262: PUSH
8263: LD_INT 55
8265: PUSH
8266: LD_INT 56
8268: PUSH
8269: LD_INT 63
8271: PUSH
8272: LD_INT 64
8274: PUSH
8275: LD_INT 65
8277: PUSH
8278: LD_INT 30
8280: PUSH
8281: LD_INT 31
8283: PUSH
8284: LD_INT 21
8286: PUSH
8287: LD_INT 22
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8327: LD_ADDR_VAR 0 5
8331: PUSH
8332: DOUBLE
8333: LD_INT 1
8335: DEC
8336: ST_TO_ADDR
8337: LD_VAR 0 8
8341: PUSH
8342: FOR_TO
8343: IFFALSE 8419
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8345: LD_VAR 0 8
8349: PUSH
8350: LD_VAR 0 5
8354: ARRAY
8355: PPUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 321
8365: PUSH
8366: LD_INT 1
8368: EQUAL
8369: PUSH
8370: LD_VAR 0 8
8374: PUSH
8375: LD_VAR 0 5
8379: ARRAY
8380: PPUSH
8381: LD_VAR 0 3
8385: PPUSH
8386: CALL_OW 482
8390: PUSH
8391: LD_INT 1
8393: EQUAL
8394: AND
8395: IFFALSE 8417
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_VAR 0 8
8406: PUSH
8407: LD_VAR 0 5
8411: ARRAY
8412: PPUSH
8413: CALL_OW 184
8417: GO 8342
8419: POP
8420: POP
// end ;
8421: LD_VAR 0 4
8425: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8426: LD_INT 0
8428: PPUSH
8429: PPUSH
8430: PPUSH
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8436: LD_ADDR_VAR 0 6
8440: PUSH
8441: LD_VAR 0 2
8445: PPUSH
8446: LD_INT 22
8448: PUSH
8449: LD_VAR 0 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 56
8460: PUSH
8461: EMPTY
8462: LIST
8463: PUSH
8464: LD_INT 24
8466: PUSH
8467: LD_INT 700
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 3
8476: PUSH
8477: LD_INT 60
8479: PUSH
8480: EMPTY
8481: LIST
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 2
8489: PUSH
8490: LD_INT 25
8492: PUSH
8493: LD_INT 1
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 25
8502: PUSH
8503: LD_INT 5
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 25
8512: PUSH
8513: LD_INT 8
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 25
8522: PUSH
8523: LD_INT 9
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 70
8548: PUSH
8549: LD_EXP 24
8553: PUSH
8554: EMPTY
8555: LIST
8556: DIFF
8557: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8558: LD_ADDR_VAR 0 7
8562: PUSH
8563: LD_VAR 0 2
8567: PPUSH
8568: LD_INT 22
8570: PUSH
8571: LD_VAR 0 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 30
8582: PUSH
8583: LD_INT 32
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 58
8592: PUSH
8593: EMPTY
8594: LIST
8595: PUSH
8596: LD_INT 24
8598: PUSH
8599: LD_INT 251
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 70
8616: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8617: LD_ADDR_VAR 0 9
8621: PUSH
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_INT 22
8629: PUSH
8630: LD_VAR 0 1
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 2
8641: PUSH
8642: LD_INT 30
8644: PUSH
8645: LD_INT 4
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 30
8654: PUSH
8655: LD_INT 5
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 24
8669: PUSH
8670: LD_INT 251
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 70
8686: ST_TO_ADDR
// if barrackList > 0 then
8687: LD_VAR 0 9
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: IFFALSE 8843
// begin if turretList = 0 then
8697: LD_VAR 0 7
8701: PUSH
8702: LD_INT 0
8704: EQUAL
8705: IFFALSE 8747
// begin if soldiers_list > 0 then
8707: LD_VAR 0 6
8711: PUSH
8712: LD_INT 0
8714: GREATER
8715: IFFALSE 8745
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8717: LD_VAR 0 6
8721: PPUSH
8722: LD_VAR 0 9
8726: PUSH
8727: LD_INT 1
8729: PPUSH
8730: LD_VAR 0 9
8734: PPUSH
8735: CALL_OW 12
8739: ARRAY
8740: PPUSH
8741: CALL_OW 120
// end else
8745: GO 8843
// begin for i in barrackList do
8747: LD_ADDR_VAR 0 4
8751: PUSH
8752: LD_VAR 0 9
8756: PUSH
8757: FOR_IN
8758: IFFALSE 8841
// begin insideUnits = UnitsInside ( i ) ;
8760: LD_ADDR_VAR 0 10
8764: PUSH
8765: LD_VAR 0 4
8769: PPUSH
8770: CALL_OW 313
8774: ST_TO_ADDR
// if insideUnits > 0 then
8775: LD_VAR 0 10
8779: PUSH
8780: LD_INT 0
8782: GREATER
8783: IFFALSE 8807
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8785: LD_VAR 0 10
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PPUSH
8794: LD_VAR 0 7
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: PPUSH
8803: CALL_OW 120
// if soldiers_list > 0 then
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 0
8814: GREATER
8815: IFFALSE 8839
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8817: LD_VAR 0 6
8821: PUSH
8822: LD_INT 1
8824: ARRAY
8825: PPUSH
8826: LD_VAR 0 7
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: CALL_OW 120
// end ;
8839: GO 8757
8841: POP
8842: POP
// end ; end ; end ;
8843: LD_VAR 0 3
8847: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8848: LD_INT 0
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
// for i = 1 to vehCount do
8856: LD_ADDR_VAR 0 8
8860: PUSH
8861: DOUBLE
8862: LD_INT 1
8864: DEC
8865: ST_TO_ADDR
8866: LD_VAR 0 6
8870: PUSH
8871: FOR_TO
8872: IFFALSE 9079
// begin uc_side = side ;
8874: LD_ADDR_OWVAR 20
8878: PUSH
8879: LD_VAR 0 1
8883: ST_TO_ADDR
// uc_nation = nation ;
8884: LD_ADDR_OWVAR 21
8888: PUSH
8889: LD_VAR 0 3
8893: ST_TO_ADDR
// vc_Chassis = 22 ;
8894: LD_ADDR_OWVAR 37
8898: PUSH
8899: LD_INT 22
8901: ST_TO_ADDR
// vc_engine = 1 ;
8902: LD_ADDR_OWVAR 39
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
// vc_control = 1 ;
8910: LD_ADDR_OWVAR 38
8914: PUSH
8915: LD_INT 1
8917: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8918: LD_ADDR_OWVAR 40
8922: PUSH
8923: LD_INT 43
8925: PUSH
8926: LD_INT 44
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 1
8935: PPUSH
8936: LD_INT 2
8938: PPUSH
8939: CALL_OW 12
8943: ARRAY
8944: ST_TO_ADDR
// veh = CreateVehicle ;
8945: LD_ADDR_VAR 0 12
8949: PUSH
8950: CALL_OW 45
8954: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8955: LD_VAR 0 12
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: LD_INT 0
8967: PPUSH
8968: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8972: LD_ADDR_EXP 32
8976: PUSH
8977: LD_EXP 32
8981: PUSH
8982: LD_VAR 0 12
8986: ADD
8987: ST_TO_ADDR
// hc_class = 3 ;
8988: LD_ADDR_OWVAR 28
8992: PUSH
8993: LD_INT 3
8995: ST_TO_ADDR
// hc_name =  ;
8996: LD_ADDR_OWVAR 26
9000: PUSH
9001: LD_STRING 
9003: ST_TO_ADDR
// hc_gallery =  ;
9004: LD_ADDR_OWVAR 33
9008: PUSH
9009: LD_STRING 
9011: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9012: LD_INT 0
9014: PPUSH
9015: LD_INT 3
9017: PPUSH
9018: LD_EXP 25
9022: PPUSH
9023: LD_EXP 26
9027: PPUSH
9028: CALL_OW 12
9032: PPUSH
9033: CALL_OW 380
// un = CreateHuman ;
9037: LD_ADDR_VAR 0 10
9041: PUSH
9042: CALL_OW 44
9046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9047: LD_VAR 0 10
9051: PPUSH
9052: LD_VAR 0 12
9056: PPUSH
9057: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9061: LD_ADDR_EXP 32
9065: PUSH
9066: LD_EXP 32
9070: PUSH
9071: LD_VAR 0 10
9075: ADD
9076: ST_TO_ADDR
// end ;
9077: GO 8871
9079: POP
9080: POP
// end ;
9081: LD_VAR 0 7
9085: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9086: LD_INT 0
9088: PPUSH
9089: PPUSH
9090: PPUSH
9091: PPUSH
9092: PPUSH
9093: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9094: LD_VAR 0 2
9098: PPUSH
9099: LD_INT 22
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: PPUSH
9114: CALL_OW 70
9118: PUSH
9119: LD_INT 0
9121: EQUAL
9122: PUSH
9123: LD_EXP 32
9127: AND
9128: IFFALSE 9415
// begin for i in defenders_list do
9130: LD_ADDR_VAR 0 4
9134: PUSH
9135: LD_EXP 32
9139: PUSH
9140: FOR_IN
9141: IFFALSE 9413
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9143: LD_VAR 0 4
9147: PPUSH
9148: LD_INT 63
9150: PPUSH
9151: LD_INT 75
9153: PPUSH
9154: CALL_OW 297
9158: PUSH
9159: LD_INT 8
9161: GREATER
9162: PUSH
9163: LD_VAR 0 4
9167: PPUSH
9168: CALL_OW 314
9172: NOT
9173: AND
9174: IFFALSE 9193
// ComMoveXY ( i , 63 , 75 ) else
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_INT 63
9183: PPUSH
9184: LD_INT 75
9186: PPUSH
9187: CALL_OW 111
9191: GO 9411
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9193: LD_VAR 0 4
9197: PPUSH
9198: CALL_OW 257
9202: PUSH
9203: LD_INT 3
9205: EQUAL
9206: PUSH
9207: LD_VAR 0 4
9211: PPUSH
9212: CALL_OW 310
9216: NOT
9217: AND
9218: PUSH
9219: LD_VAR 0 4
9223: PPUSH
9224: CALL_OW 314
9228: NOT
9229: AND
9230: IFFALSE 9283
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9232: LD_VAR 0 4
9236: PPUSH
9237: LD_EXP 32
9241: PPUSH
9242: LD_INT 58
9244: PUSH
9245: EMPTY
9246: LIST
9247: PUSH
9248: LD_INT 24
9250: PUSH
9251: LD_INT 1000
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 72
9266: PPUSH
9267: LD_VAR 0 4
9271: PPUSH
9272: CALL_OW 74
9276: PPUSH
9277: CALL_OW 120
9281: GO 9411
// if GetFuel ( i ) < 100 then
9283: LD_VAR 0 4
9287: PPUSH
9288: CALL_OW 261
9292: PUSH
9293: LD_INT 100
9295: LESS
9296: IFFALSE 9312
// SetFuel ( defenders_list , 100 ) else
9298: LD_EXP 32
9302: PPUSH
9303: LD_INT 100
9305: PPUSH
9306: CALL_OW 240
9310: GO 9411
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9312: LD_VAR 0 4
9316: PPUSH
9317: CALL_OW 263
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: PUSH
9326: LD_VAR 0 4
9330: PPUSH
9331: CALL_OW 256
9335: PUSH
9336: LD_INT 990
9338: LESS
9339: AND
9340: IFFALSE 9411
// begin veh := i ;
9342: LD_ADDR_VAR 0 7
9346: PUSH
9347: LD_VAR 0 4
9351: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9352: LD_ADDR_VAR 0 8
9356: PUSH
9357: LD_VAR 0 4
9361: PPUSH
9362: CALL_OW 311
9366: ST_TO_ADDR
// if veh then
9367: LD_VAR 0 7
9371: IFFALSE 9411
// begin ComMoveXY ( i , 63 , 75 ) ;
9373: LD_VAR 0 4
9377: PPUSH
9378: LD_INT 63
9380: PPUSH
9381: LD_INT 75
9383: PPUSH
9384: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9388: LD_VAR 0 7
9392: PPUSH
9393: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9397: LD_VAR 0 8
9401: PPUSH
9402: LD_VAR 0 7
9406: PPUSH
9407: CALL_OW 189
// end ; end ; end ;
9411: GO 9140
9413: POP
9414: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9415: LD_ADDR_VAR 0 6
9419: PUSH
9420: LD_VAR 0 2
9424: PPUSH
9425: LD_INT 22
9427: PUSH
9428: LD_VAR 0 1
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: PPUSH
9440: CALL_OW 70
9444: ST_TO_ADDR
// if tmp and defenders_list then
9445: LD_VAR 0 6
9449: PUSH
9450: LD_EXP 32
9454: AND
9455: IFFALSE 9624
// for i in defenders_list do
9457: LD_ADDR_VAR 0 4
9461: PUSH
9462: LD_EXP 32
9466: PUSH
9467: FOR_IN
9468: IFFALSE 9622
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9470: LD_VAR 0 4
9474: PPUSH
9475: CALL_OW 257
9479: PUSH
9480: LD_INT 3
9482: EQUAL
9483: PUSH
9484: LD_VAR 0 4
9488: PPUSH
9489: CALL_OW 310
9493: NOT
9494: AND
9495: IFFALSE 9534
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9497: LD_VAR 0 4
9501: PPUSH
9502: LD_EXP 32
9506: PPUSH
9507: LD_INT 58
9509: PUSH
9510: EMPTY
9511: LIST
9512: PPUSH
9513: CALL_OW 72
9517: PPUSH
9518: LD_VAR 0 4
9522: PPUSH
9523: CALL_OW 74
9527: PPUSH
9528: CALL_OW 120
9532: GO 9620
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9534: LD_VAR 0 4
9538: PPUSH
9539: CALL_OW 314
9543: NOT
9544: PUSH
9545: LD_VAR 0 4
9549: PPUSH
9550: LD_VAR 0 2
9554: PPUSH
9555: CALL_OW 308
9559: AND
9560: IFFALSE 9588
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9562: LD_VAR 0 4
9566: PPUSH
9567: LD_VAR 0 6
9571: PPUSH
9572: LD_VAR 0 4
9576: PPUSH
9577: CALL_OW 74
9581: PPUSH
9582: CALL_OW 115
9586: GO 9620
// if not IsInArea ( i , defenseArea ) then
9588: LD_VAR 0 4
9592: PPUSH
9593: LD_VAR 0 2
9597: PPUSH
9598: CALL_OW 308
9602: NOT
9603: IFFALSE 9620
// ComMoveXY ( i , 63 , 75 ) ;
9605: LD_VAR 0 4
9609: PPUSH
9610: LD_INT 63
9612: PPUSH
9613: LD_INT 75
9615: PPUSH
9616: CALL_OW 111
// end ;
9620: GO 9467
9622: POP
9623: POP
// end ;
9624: LD_VAR 0 3
9628: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9629: LD_INT 0
9631: PPUSH
9632: PPUSH
9633: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9634: LD_INT 22
9636: PUSH
9637: LD_VAR 0 1
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 21
9648: PUSH
9649: LD_INT 2
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PPUSH
9660: CALL_OW 69
9664: PUSH
9665: LD_VAR 0 3
9669: LESSEQUAL
9670: IFFALSE 9778
// begin for i = 1 to vehCount do
9672: LD_ADDR_VAR 0 9
9676: PUSH
9677: DOUBLE
9678: LD_INT 1
9680: DEC
9681: ST_TO_ADDR
9682: LD_VAR 0 3
9686: PUSH
9687: FOR_TO
9688: IFFALSE 9776
// begin weapon = weaponTab [ i ] ;
9690: LD_ADDR_VAR 0 10
9694: PUSH
9695: LD_VAR 0 4
9699: PUSH
9700: LD_VAR 0 9
9704: ARRAY
9705: ST_TO_ADDR
// if weapon = 46 then
9706: LD_VAR 0 10
9710: PUSH
9711: LD_INT 46
9713: EQUAL
9714: IFFALSE 9745
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9716: LD_VAR 0 2
9720: PPUSH
9721: LD_INT 24
9723: PPUSH
9724: LD_VAR 0 5
9728: PPUSH
9729: LD_VAR 0 6
9733: PPUSH
9734: LD_VAR 0 10
9738: PPUSH
9739: CALL_OW 185
// end else
9743: GO 9774
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9745: LD_VAR 0 2
9749: PPUSH
9750: LD_VAR 0 7
9754: PPUSH
9755: LD_VAR 0 5
9759: PPUSH
9760: LD_VAR 0 6
9764: PPUSH
9765: LD_VAR 0 10
9769: PPUSH
9770: CALL_OW 185
// end ; end ;
9774: GO 9687
9776: POP
9777: POP
// end ; end ;
9778: LD_VAR 0 8
9782: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9783: LD_INT 0
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9789: LD_ADDR_VAR 0 8
9793: PUSH
9794: LD_INT 22
9796: PUSH
9797: LD_VAR 0 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 3
9818: PUSH
9819: LD_INT 24
9821: PUSH
9822: LD_INT 650
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: ST_TO_ADDR
// if damageVehicles > 0 then
9843: LD_VAR 0 8
9847: PUSH
9848: LD_INT 0
9850: GREATER
9851: IFFALSE 9872
// ComMoveXY ( damageVehicles , repX , repY ) ;
9853: LD_VAR 0 8
9857: PPUSH
9858: LD_VAR 0 3
9862: PPUSH
9863: LD_VAR 0 4
9867: PPUSH
9868: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9872: LD_VAR 0 8
9876: PPUSH
9877: LD_INT 95
9879: PUSH
9880: LD_VAR 0 2
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 3
9891: PUSH
9892: LD_INT 58
9894: PUSH
9895: EMPTY
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 72
9910: PUSH
9911: LD_INT 0
9913: GREATER
9914: IFFALSE 9981
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9916: LD_ADDR_VAR 0 6
9920: PUSH
9921: LD_VAR 0 8
9925: PPUSH
9926: LD_INT 95
9928: PUSH
9929: LD_VAR 0 2
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 3
9940: PUSH
9941: LD_INT 58
9943: PUSH
9944: EMPTY
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 72
9959: PUSH
9960: FOR_IN
9961: IFFALSE 9979
// ComExitVehicle ( UnitsInside ( i ) ) ;
9963: LD_VAR 0 6
9967: PPUSH
9968: CALL_OW 313
9972: PPUSH
9973: CALL_OW 121
9977: GO 9960
9979: POP
9980: POP
// end ;
9981: LD_VAR 0 5
9985: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
9990: PPUSH
9991: PPUSH
9992: PPUSH
9993: PPUSH
9994: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9995: LD_ADDR_VAR 0 8
9999: PUSH
10000: LD_INT 22
10002: PUSH
10003: LD_VAR 0 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 24
10024: PUSH
10025: LD_INT 250
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: LD_INT 58
10037: PUSH
10038: EMPTY
10039: LIST
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: LD_INT 34
10046: PUSH
10047: LD_INT 43
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 34
10056: PUSH
10057: LD_INT 44
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 34
10066: PUSH
10067: LD_INT 46
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10096: LD_INT 22
10098: PUSH
10099: LD_VAR 0 1
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 21
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 24
10120: PUSH
10121: LD_INT 1000
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 3
10130: PUSH
10131: LD_INT 58
10133: PUSH
10134: EMPTY
10135: LIST
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 43
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 34
10152: PUSH
10153: LD_INT 44
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: LD_INT 34
10162: PUSH
10163: LD_INT 46
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: PPUSH
10187: CALL_OW 69
10191: PUSH
10192: LD_INT 5
10194: PUSH
10195: LD_INT 6
10197: PUSH
10198: LD_INT 7
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: LD_OWVAR 67
10210: ARRAY
10211: GREATEREQUAL
10212: IFFALSE 10777
// repeat wait ( 0 0$1 ) ;
10214: LD_INT 35
10216: PPUSH
10217: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10221: LD_ADDR_VAR 0 8
10225: PUSH
10226: LD_INT 22
10228: PUSH
10229: LD_VAR 0 1
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 21
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 24
10250: PUSH
10251: LD_INT 250
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 2
10260: PUSH
10261: LD_INT 34
10263: PUSH
10264: LD_INT 43
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 34
10273: PUSH
10274: LD_INT 44
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 34
10283: PUSH
10284: LD_INT 46
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 3
10299: PUSH
10300: LD_INT 58
10302: PUSH
10303: EMPTY
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 69
10321: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10322: LD_INT 22
10324: PUSH
10325: LD_VAR 0 1
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 95
10336: PUSH
10337: LD_VAR 0 2
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PPUSH
10350: CALL_OW 69
10354: NOT
10355: PUSH
10356: LD_VAR 0 11
10360: PUSH
10361: LD_INT 0
10363: EQUAL
10364: AND
10365: IFFALSE 10420
// for i := 1 to wayX do
10367: LD_ADDR_VAR 0 6
10371: PUSH
10372: DOUBLE
10373: LD_INT 1
10375: DEC
10376: ST_TO_ADDR
10377: LD_VAR 0 3
10381: PUSH
10382: FOR_TO
10383: IFFALSE 10418
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10385: LD_VAR 0 8
10389: PPUSH
10390: LD_VAR 0 3
10394: PUSH
10395: LD_VAR 0 6
10399: ARRAY
10400: PPUSH
10401: LD_VAR 0 4
10405: PUSH
10406: LD_VAR 0 6
10410: ARRAY
10411: PPUSH
10412: CALL_OW 114
10416: GO 10382
10418: POP
10419: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10420: LD_INT 22
10422: PUSH
10423: LD_VAR 0 1
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 95
10434: PUSH
10435: LD_VAR 0 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: IFFALSE 10676
// begin seeEnemy = 1 ;
10454: LD_ADDR_VAR 0 11
10458: PUSH
10459: LD_INT 1
10461: ST_TO_ADDR
// for j in vehiclesOK do
10462: LD_ADDR_VAR 0 7
10466: PUSH
10467: LD_VAR 0 8
10471: PUSH
10472: FOR_IN
10473: IFFALSE 10674
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10475: LD_ADDR_VAR 0 9
10479: PUSH
10480: LD_INT 81
10482: PUSH
10483: LD_VAR 0 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 101
10494: PUSH
10495: LD_INT 1
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 69
10510: PPUSH
10511: LD_VAR 0 7
10515: PPUSH
10516: CALL_OW 74
10520: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10521: LD_ADDR_VAR 0 10
10525: PUSH
10526: LD_INT 81
10528: PUSH
10529: LD_VAR 0 1
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 101
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: LD_INT 59
10553: PUSH
10554: EMPTY
10555: LIST
10556: PUSH
10557: LD_INT 21
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 21
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: PPUSH
10591: CALL_OW 69
10595: PPUSH
10596: LD_VAR 0 7
10600: PPUSH
10601: CALL_OW 74
10605: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10606: LD_VAR 0 7
10610: PPUSH
10611: LD_VAR 0 9
10615: PPUSH
10616: CALL_OW 296
10620: PUSH
10621: LD_INT 8
10623: PLUS
10624: PUSH
10625: LD_VAR 0 7
10629: PPUSH
10630: LD_VAR 0 10
10634: PPUSH
10635: CALL_OW 296
10639: LESS
10640: IFFALSE 10658
// ComAttackUnit ( j , target1 ) else
10642: LD_VAR 0 7
10646: PPUSH
10647: LD_VAR 0 9
10651: PPUSH
10652: CALL_OW 115
10656: GO 10672
// ComAttackUnit ( j , target2 ) ;
10658: LD_VAR 0 7
10662: PPUSH
10663: LD_VAR 0 10
10667: PPUSH
10668: CALL_OW 115
// end ;
10672: GO 10472
10674: POP
10675: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10676: LD_INT 22
10678: PUSH
10679: LD_VAR 0 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 21
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 24
10700: PUSH
10701: LD_INT 250
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: LD_INT 34
10713: PUSH
10714: LD_INT 43
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 34
10723: PUSH
10724: LD_INT 44
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 34
10733: PUSH
10734: LD_INT 46
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 3
10749: PUSH
10750: LD_INT 58
10752: PUSH
10753: EMPTY
10754: LIST
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: PPUSH
10767: CALL_OW 69
10771: PUSH
10772: LD_INT 0
10774: EQUAL
10775: IFFALSE 10214
// seeEnemy = 0 ;
10777: LD_ADDR_VAR 0 11
10781: PUSH
10782: LD_INT 0
10784: ST_TO_ADDR
// end ;
10785: LD_VAR 0 5
10789: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10790: LD_INT 0
10792: PPUSH
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
// repeat wait ( 0 0$1 ) ;
10798: LD_INT 35
10800: PPUSH
10801: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10805: LD_ADDR_VAR 0 7
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_VAR 0 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 2
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 24
10834: PUSH
10835: LD_INT 651
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: PPUSH
10847: CALL_OW 69
10851: ST_TO_ADDR
// for j in vehiclesOK do
10852: LD_ADDR_VAR 0 4
10856: PUSH
10857: LD_VAR 0 7
10861: PUSH
10862: FOR_IN
10863: IFFALSE 11064
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10865: LD_ADDR_VAR 0 5
10869: PUSH
10870: LD_INT 81
10872: PUSH
10873: LD_VAR 0 1
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 101
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PPUSH
10896: CALL_OW 69
10900: PPUSH
10901: LD_VAR 0 4
10905: PPUSH
10906: CALL_OW 74
10910: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10911: LD_ADDR_VAR 0 6
10915: PUSH
10916: LD_INT 81
10918: PUSH
10919: LD_VAR 0 1
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 101
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: LD_INT 59
10943: PUSH
10944: EMPTY
10945: LIST
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 1
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 21
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: PUSH
10978: EMPTY
10979: LIST
10980: PPUSH
10981: CALL_OW 69
10985: PPUSH
10986: LD_VAR 0 4
10990: PPUSH
10991: CALL_OW 74
10995: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10996: LD_VAR 0 4
11000: PPUSH
11001: LD_VAR 0 5
11005: PPUSH
11006: CALL_OW 296
11010: PUSH
11011: LD_INT 8
11013: PLUS
11014: PUSH
11015: LD_VAR 0 4
11019: PPUSH
11020: LD_VAR 0 6
11024: PPUSH
11025: CALL_OW 296
11029: LESS
11030: IFFALSE 11048
// ComAttackUnit ( j , target1 ) else
11032: LD_VAR 0 4
11036: PPUSH
11037: LD_VAR 0 5
11041: PPUSH
11042: CALL_OW 115
11046: GO 11062
// ComAttackUnit ( j , target2 ) ;
11048: LD_VAR 0 4
11052: PPUSH
11053: LD_VAR 0 6
11057: PPUSH
11058: CALL_OW 115
// end ;
11062: GO 10862
11064: POP
11065: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11066: LD_INT 22
11068: PUSH
11069: LD_VAR 0 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 2
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 24
11090: PUSH
11091: LD_INT 250
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 69
11107: PUSH
11108: LD_INT 0
11110: EQUAL
11111: IFFALSE 10798
// end ;
11113: LD_VAR 0 2
11117: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11118: LD_INT 0
11120: PPUSH
11121: PPUSH
11122: PPUSH
11123: PPUSH
11124: PPUSH
11125: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11126: LD_ADDR_VAR 0 8
11130: PUSH
11131: LD_VAR 0 2
11135: PPUSH
11136: CALL_OW 313
11140: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11141: LD_ADDR_VAR 0 9
11145: PUSH
11146: LD_VAR 0 3
11150: PPUSH
11151: LD_INT 22
11153: PUSH
11154: LD_VAR 0 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 25
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 24
11175: PUSH
11176: LD_INT 750
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 3
11185: PUSH
11186: LD_INT 54
11188: PUSH
11189: EMPTY
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 70
11206: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11207: LD_ADDR_VAR 0 6
11211: PUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: LD_INT 22
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 21
11231: PUSH
11232: LD_INT 3
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: LD_INT 3
11241: PUSH
11242: LD_INT 24
11244: PUSH
11245: LD_INT 1000
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: PPUSH
11264: CALL_OW 70
11268: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11269: LD_VAR 0 6
11273: NOT
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_VAR 0 1
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 25
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 24
11299: PUSH
11300: LD_INT 250
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: NOT
11317: AND
11318: IFFALSE 11322
// exit ;
11320: GO 11519
// if buildings_list > 0 and engineerOkInside then
11322: LD_VAR 0 6
11326: PUSH
11327: LD_INT 0
11329: GREATER
11330: PUSH
11331: LD_VAR 0 8
11335: AND
11336: IFFALSE 11362
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11338: LD_VAR 0 8
11342: PPUSH
11343: LD_INT 25
11345: PUSH
11346: LD_INT 2
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 72
11357: PPUSH
11358: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11362: LD_VAR 0 6
11366: PUSH
11367: LD_INT 0
11369: GREATER
11370: PUSH
11371: LD_VAR 0 9
11375: PUSH
11376: LD_INT 0
11378: GREATER
11379: AND
11380: IFFALSE 11400
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11382: LD_VAR 0 9
11386: PPUSH
11387: LD_VAR 0 6
11391: PUSH
11392: LD_INT 1
11394: ARRAY
11395: PPUSH
11396: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11400: LD_VAR 0 6
11404: PUSH
11405: LD_INT 0
11407: EQUAL
11408: PUSH
11409: LD_VAR 0 4
11413: PUSH
11414: LD_INT 0
11416: EQUAL
11417: AND
11418: PUSH
11419: LD_VAR 0 9
11423: PUSH
11424: LD_INT 0
11426: GREATER
11427: AND
11428: IFFALSE 11444
// ComEnterUnit ( engineerOkOutside , building ) ;
11430: LD_VAR 0 9
11434: PPUSH
11435: LD_VAR 0 2
11439: PPUSH
11440: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11444: LD_VAR 0 9
11448: PUSH
11449: LD_INT 0
11451: GREATER
11452: PUSH
11453: LD_VAR 0 6
11457: PUSH
11458: LD_INT 0
11460: EQUAL
11461: AND
11462: PUSH
11463: LD_VAR 0 4
11467: PUSH
11468: LD_INT 0
11470: GREATER
11471: AND
11472: IFFALSE 11519
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11474: LD_VAR 0 9
11478: PPUSH
11479: LD_VAR 0 4
11483: PUSH
11484: LD_INT 1
11486: ARRAY
11487: PPUSH
11488: LD_VAR 0 4
11492: PUSH
11493: LD_INT 2
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 4
11501: PUSH
11502: LD_INT 3
11504: ARRAY
11505: PPUSH
11506: LD_VAR 0 4
11510: PUSH
11511: LD_INT 4
11513: ARRAY
11514: PPUSH
11515: CALL_OW 145
// end ;
11519: LD_VAR 0 5
11523: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11524: LD_INT 0
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
11532: PPUSH
11533: PPUSH
11534: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11535: LD_ADDR_VAR 0 6
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_VAR 0 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 25
11554: PUSH
11555: LD_INT 4
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 23
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 24
11574: PUSH
11575: LD_INT 251
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PPUSH
11588: CALL_OW 69
11592: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11593: LD_ADDR_VAR 0 7
11597: PUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 22
11605: PUSH
11606: LD_VAR 0 1
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 23
11617: PUSH
11618: LD_INT 2
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 25
11627: PUSH
11628: LD_INT 4
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 50
11637: PUSH
11638: EMPTY
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 70
11651: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11652: LD_ADDR_VAR 0 10
11656: PUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: LD_INT 22
11664: PUSH
11665: LD_VAR 0 1
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 21
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 3
11686: PUSH
11687: LD_INT 25
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 3
11703: PUSH
11704: LD_INT 24
11706: PUSH
11707: LD_INT 750
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 70
11728: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11729: LD_ADDR_VAR 0 11
11733: PUSH
11734: LD_VAR 0 2
11738: PPUSH
11739: LD_INT 22
11741: PUSH
11742: LD_VAR 0 1
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 21
11753: PUSH
11754: LD_INT 1
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 3
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: LD_INT 24
11783: PUSH
11784: LD_INT 1000
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 70
11805: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11806: LD_VAR 0 10
11810: NOT
11811: PUSH
11812: LD_VAR 0 11
11816: NOT
11817: AND
11818: PUSH
11819: LD_VAR 0 6
11823: NOT
11824: AND
11825: IFFALSE 11829
// exit ;
11827: GO 12063
// if damageUnits > 0 and sci_list > 0 then
11829: LD_VAR 0 10
11833: PUSH
11834: LD_INT 0
11836: GREATER
11837: PUSH
11838: LD_VAR 0 6
11842: PUSH
11843: LD_INT 0
11845: GREATER
11846: AND
11847: IFFALSE 11863
// ComMoveToArea ( damageUnits , healArea ) ;
11849: LD_VAR 0 10
11853: PPUSH
11854: LD_VAR 0 2
11858: PPUSH
11859: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11863: LD_VAR 0 11
11867: PUSH
11868: LD_INT 0
11870: GREATER
11871: PUSH
11872: LD_VAR 0 6
11876: PUSH
11877: LD_INT 0
11879: GREATER
11880: AND
11881: IFFALSE 11892
// ComExitBuilding ( sci_list ) ;
11883: LD_VAR 0 6
11887: PPUSH
11888: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11892: LD_VAR 0 11
11896: PUSH
11897: LD_INT 0
11899: GREATER
11900: PUSH
11901: LD_VAR 0 7
11905: PUSH
11906: LD_INT 0
11908: GREATER
11909: AND
11910: IFFALSE 11930
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11912: LD_VAR 0 7
11916: PPUSH
11917: LD_VAR 0 11
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11930: LD_VAR 0 10
11934: PUSH
11935: LD_INT 0
11937: EQUAL
11938: PUSH
11939: LD_VAR 0 11
11943: PUSH
11944: LD_INT 0
11946: EQUAL
11947: AND
11948: PUSH
11949: LD_VAR 0 7
11953: PUSH
11954: LD_INT 0
11956: GREATER
11957: AND
11958: IFFALSE 12063
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11960: LD_ADDR_VAR 0 12
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_VAR 0 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 21
11979: PUSH
11980: LD_INT 3
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 30
11989: PUSH
11990: LD_INT 8
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: PPUSH
12002: CALL_OW 69
12006: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12007: LD_ADDR_VAR 0 13
12011: PUSH
12012: LD_INT 1
12014: PPUSH
12015: LD_VAR 0 12
12019: PPUSH
12020: CALL_OW 12
12024: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12025: LD_VAR 0 7
12029: PPUSH
12030: LD_INT 3
12032: PUSH
12033: LD_INT 60
12035: PUSH
12036: EMPTY
12037: LIST
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PPUSH
12043: CALL_OW 72
12047: PPUSH
12048: LD_VAR 0 12
12052: PUSH
12053: LD_VAR 0 13
12057: ARRAY
12058: PPUSH
12059: CALL_OW 120
// end ; end ;
12063: LD_VAR 0 5
12067: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12068: LD_INT 0
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12075: LD_ADDR_VAR 0 6
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_VAR 0 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 2
12094: PUSH
12095: LD_INT 30
12097: PUSH
12098: LD_INT 31
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 30
12107: PUSH
12108: LD_INT 32
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 30
12117: PUSH
12118: LD_INT 33
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 30
12127: PUSH
12128: LD_INT 4
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 30
12137: PUSH
12138: LD_INT 5
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 69
12161: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12162: LD_ADDR_VAR 0 7
12166: PUSH
12167: LD_INT 22
12169: PUSH
12170: LD_VAR 0 2
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 21
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 58
12191: PUSH
12192: EMPTY
12193: LIST
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: PPUSH
12200: CALL_OW 69
12204: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12205: LD_VAR 0 6
12209: PUSH
12210: LD_INT 0
12212: GREATER
12213: PUSH
12214: LD_VAR 0 7
12218: PUSH
12219: LD_INT 0
12221: GREATER
12222: AND
12223: IFFALSE 12293
// begin for i in turretsList do
12225: LD_ADDR_VAR 0 4
12229: PUSH
12230: LD_VAR 0 6
12234: PUSH
12235: FOR_IN
12236: IFFALSE 12291
// begin for j in enemyBuildings do
12238: LD_ADDR_VAR 0 5
12242: PUSH
12243: LD_VAR 0 7
12247: PUSH
12248: FOR_IN
12249: IFFALSE 12287
// begin if GetDistUnits ( i , j ) < 20 then
12251: LD_VAR 0 4
12255: PPUSH
12256: LD_VAR 0 5
12260: PPUSH
12261: CALL_OW 296
12265: PUSH
12266: LD_INT 20
12268: LESS
12269: IFFALSE 12285
// begin ComAttackUnit ( i , j ) ;
12271: LD_VAR 0 4
12275: PPUSH
12276: LD_VAR 0 5
12280: PPUSH
12281: CALL_OW 115
// end ; end ;
12285: GO 12248
12287: POP
12288: POP
// end ;
12289: GO 12235
12291: POP
12292: POP
// end ; end ;
12293: LD_VAR 0 3
12297: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12298: LD_INT 0
12300: PPUSH
12301: PPUSH
12302: PPUSH
12303: PPUSH
12304: PPUSH
12305: PPUSH
12306: PPUSH
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
// for i = 1 to medicCount do
12311: LD_ADDR_VAR 0 14
12315: PUSH
12316: DOUBLE
12317: LD_INT 1
12319: DEC
12320: ST_TO_ADDR
12321: LD_VAR 0 7
12325: PUSH
12326: FOR_TO
12327: IFFALSE 12409
// begin uc_side = side ;
12329: LD_ADDR_OWVAR 20
12333: PUSH
12334: LD_VAR 0 1
12338: ST_TO_ADDR
// uc_nation = nation ;
12339: LD_ADDR_OWVAR 21
12343: PUSH
12344: LD_VAR 0 2
12348: ST_TO_ADDR
// hc_name =  ;
12349: LD_ADDR_OWVAR 26
12353: PUSH
12354: LD_STRING 
12356: ST_TO_ADDR
// hc_gallery =  ;
12357: LD_ADDR_OWVAR 33
12361: PUSH
12362: LD_STRING 
12364: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12365: LD_INT 0
12367: PPUSH
12368: LD_INT 4
12370: PPUSH
12371: LD_VAR 0 8
12375: PPUSH
12376: CALL_OW 380
// un = CreateHuman ;
12380: LD_ADDR_VAR 0 16
12384: PUSH
12385: CALL_OW 44
12389: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12390: LD_VAR 0 16
12394: PPUSH
12395: LD_VAR 0 9
12399: PPUSH
12400: LD_INT 0
12402: PPUSH
12403: CALL_OW 49
// end ;
12407: GO 12326
12409: POP
12410: POP
// for i = 1 to soldierCount do
12411: LD_ADDR_VAR 0 14
12415: PUSH
12416: DOUBLE
12417: LD_INT 1
12419: DEC
12420: ST_TO_ADDR
12421: LD_VAR 0 3
12425: PUSH
12426: FOR_TO
12427: IFFALSE 12509
// begin uc_side = side ;
12429: LD_ADDR_OWVAR 20
12433: PUSH
12434: LD_VAR 0 1
12438: ST_TO_ADDR
// uc_nation = nation ;
12439: LD_ADDR_OWVAR 21
12443: PUSH
12444: LD_VAR 0 2
12448: ST_TO_ADDR
// hc_name =  ;
12449: LD_ADDR_OWVAR 26
12453: PUSH
12454: LD_STRING 
12456: ST_TO_ADDR
// hc_gallery =  ;
12457: LD_ADDR_OWVAR 33
12461: PUSH
12462: LD_STRING 
12464: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12465: LD_INT 0
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_VAR 0 8
12475: PPUSH
12476: CALL_OW 380
// un = CreateHuman ;
12480: LD_ADDR_VAR 0 16
12484: PUSH
12485: CALL_OW 44
12489: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12490: LD_VAR 0 16
12494: PPUSH
12495: LD_VAR 0 9
12499: PPUSH
12500: LD_INT 0
12502: PPUSH
12503: CALL_OW 49
// end ;
12507: GO 12426
12509: POP
12510: POP
// for i = 1 to sniperCount do
12511: LD_ADDR_VAR 0 14
12515: PUSH
12516: DOUBLE
12517: LD_INT 1
12519: DEC
12520: ST_TO_ADDR
12521: LD_VAR 0 4
12525: PUSH
12526: FOR_TO
12527: IFFALSE 12609
// begin uc_side = side ;
12529: LD_ADDR_OWVAR 20
12533: PUSH
12534: LD_VAR 0 1
12538: ST_TO_ADDR
// uc_nation = nation ;
12539: LD_ADDR_OWVAR 21
12543: PUSH
12544: LD_VAR 0 2
12548: ST_TO_ADDR
// hc_name =  ;
12549: LD_ADDR_OWVAR 26
12553: PUSH
12554: LD_STRING 
12556: ST_TO_ADDR
// hc_gallery =  ;
12557: LD_ADDR_OWVAR 33
12561: PUSH
12562: LD_STRING 
12564: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12565: LD_INT 0
12567: PPUSH
12568: LD_INT 5
12570: PPUSH
12571: LD_VAR 0 8
12575: PPUSH
12576: CALL_OW 380
// un = CreateHuman ;
12580: LD_ADDR_VAR 0 16
12584: PUSH
12585: CALL_OW 44
12589: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12590: LD_VAR 0 16
12594: PPUSH
12595: LD_VAR 0 9
12599: PPUSH
12600: LD_INT 0
12602: PPUSH
12603: CALL_OW 49
// end ;
12607: GO 12526
12609: POP
12610: POP
// for i = 1 to bazookCount do
12611: LD_ADDR_VAR 0 14
12615: PUSH
12616: DOUBLE
12617: LD_INT 1
12619: DEC
12620: ST_TO_ADDR
12621: LD_VAR 0 5
12625: PUSH
12626: FOR_TO
12627: IFFALSE 12709
// begin uc_side = side ;
12629: LD_ADDR_OWVAR 20
12633: PUSH
12634: LD_VAR 0 1
12638: ST_TO_ADDR
// uc_nation = nation ;
12639: LD_ADDR_OWVAR 21
12643: PUSH
12644: LD_VAR 0 2
12648: ST_TO_ADDR
// hc_name =  ;
12649: LD_ADDR_OWVAR 26
12653: PUSH
12654: LD_STRING 
12656: ST_TO_ADDR
// hc_gallery =  ;
12657: LD_ADDR_OWVAR 33
12661: PUSH
12662: LD_STRING 
12664: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12665: LD_INT 0
12667: PPUSH
12668: LD_INT 9
12670: PPUSH
12671: LD_VAR 0 8
12675: PPUSH
12676: CALL_OW 380
// un = CreateHuman ;
12680: LD_ADDR_VAR 0 16
12684: PUSH
12685: CALL_OW 44
12689: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12690: LD_VAR 0 16
12694: PPUSH
12695: LD_VAR 0 9
12699: PPUSH
12700: LD_INT 0
12702: PPUSH
12703: CALL_OW 49
// end ;
12707: GO 12626
12709: POP
12710: POP
// for i = 1 to mortalCount do
12711: LD_ADDR_VAR 0 14
12715: PUSH
12716: DOUBLE
12717: LD_INT 1
12719: DEC
12720: ST_TO_ADDR
12721: LD_VAR 0 6
12725: PUSH
12726: FOR_TO
12727: IFFALSE 12809
// begin uc_side = side ;
12729: LD_ADDR_OWVAR 20
12733: PUSH
12734: LD_VAR 0 1
12738: ST_TO_ADDR
// uc_nation = nation ;
12739: LD_ADDR_OWVAR 21
12743: PUSH
12744: LD_VAR 0 2
12748: ST_TO_ADDR
// hc_name =  ;
12749: LD_ADDR_OWVAR 26
12753: PUSH
12754: LD_STRING 
12756: ST_TO_ADDR
// hc_gallery =  ;
12757: LD_ADDR_OWVAR 33
12761: PUSH
12762: LD_STRING 
12764: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12765: LD_INT 0
12767: PPUSH
12768: LD_INT 8
12770: PPUSH
12771: LD_VAR 0 8
12775: PPUSH
12776: CALL_OW 380
// un = CreateHuman ;
12780: LD_ADDR_VAR 0 16
12784: PUSH
12785: CALL_OW 44
12789: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12790: LD_VAR 0 16
12794: PPUSH
12795: LD_VAR 0 9
12799: PPUSH
12800: LD_INT 0
12802: PPUSH
12803: CALL_OW 49
// end ;
12807: GO 12726
12809: POP
12810: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12811: LD_ADDR_VAR 0 19
12815: PUSH
12816: LD_INT 22
12818: PUSH
12819: LD_VAR 0 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: LD_INT 25
12833: PUSH
12834: LD_INT 1
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 25
12843: PUSH
12844: LD_INT 5
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 25
12853: PUSH
12854: LD_INT 8
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 25
12863: PUSH
12864: LD_INT 9
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PPUSH
12882: CALL_OW 69
12886: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12887: LD_ADDR_VAR 0 18
12891: PUSH
12892: LD_INT 22
12894: PUSH
12895: LD_VAR 0 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 25
12906: PUSH
12907: LD_INT 4
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PPUSH
12918: CALL_OW 69
12922: ST_TO_ADDR
// for i in medic_list do
12923: LD_ADDR_VAR 0 14
12927: PUSH
12928: LD_VAR 0 18
12932: PUSH
12933: FOR_IN
12934: IFFALSE 12952
// ComMoveToArea ( i , healArea ) ;
12936: LD_VAR 0 14
12940: PPUSH
12941: LD_VAR 0 10
12945: PPUSH
12946: CALL_OW 113
12950: GO 12933
12952: POP
12953: POP
// if strategy = 1 then
12954: LD_VAR 0 12
12958: PUSH
12959: LD_INT 1
12961: EQUAL
12962: IFFALSE 13508
// begin repeat wait ( 0 0$3 ) ;
12964: LD_INT 105
12966: PPUSH
12967: CALL_OW 67
// for i in soldiersOK_list do
12971: LD_ADDR_VAR 0 14
12975: PUSH
12976: LD_VAR 0 19
12980: PUSH
12981: FOR_IN
12982: IFFALSE 13046
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12984: LD_VAR 0 14
12988: PPUSH
12989: LD_INT 91
12991: PPUSH
12992: LD_INT 63
12994: PPUSH
12995: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12999: LD_VAR 0 14
13003: PPUSH
13004: LD_INT 101
13006: PPUSH
13007: LD_INT 53
13009: PPUSH
13010: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13014: LD_VAR 0 14
13018: PPUSH
13019: LD_INT 75
13021: PPUSH
13022: LD_INT 23
13024: PPUSH
13025: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13029: LD_VAR 0 14
13033: PPUSH
13034: LD_INT 78
13036: PPUSH
13037: LD_INT 8
13039: PPUSH
13040: CALL_OW 174
// end ;
13044: GO 12981
13046: POP
13047: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13048: LD_INT 12
13050: PPUSH
13051: LD_INT 22
13053: PUSH
13054: LD_VAR 0 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 70
13067: PUSH
13068: LD_INT 2
13070: GREATER
13071: IFFALSE 12964
// repeat wait ( 0 0$1 ) ;
13073: LD_INT 35
13075: PPUSH
13076: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13080: LD_ADDR_VAR 0 17
13084: PUSH
13085: LD_INT 22
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: LD_INT 24
13105: PUSH
13106: LD_INT 550
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 24
13119: PUSH
13120: LD_INT 250
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PPUSH
13136: CALL_OW 69
13140: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13141: LD_ADDR_VAR 0 19
13145: PUSH
13146: LD_INT 22
13148: PUSH
13149: LD_VAR 0 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: LD_INT 25
13163: PUSH
13164: LD_INT 1
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 25
13173: PUSH
13174: LD_INT 5
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 25
13183: PUSH
13184: LD_INT 8
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 25
13193: PUSH
13194: LD_INT 9
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 24
13210: PUSH
13211: LD_INT 1000
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: PPUSH
13223: CALL_OW 69
13227: ST_TO_ADDR
// if medicCount > 0 then
13228: LD_VAR 0 7
13232: PUSH
13233: LD_INT 0
13235: GREATER
13236: IFFALSE 13310
// begin if damageUnit_list > 0 then
13238: LD_VAR 0 17
13242: PUSH
13243: LD_INT 0
13245: GREATER
13246: IFFALSE 13310
// begin for i in damageUnit_list do
13248: LD_ADDR_VAR 0 14
13252: PUSH
13253: LD_VAR 0 17
13257: PUSH
13258: FOR_IN
13259: IFFALSE 13308
// begin ComMoveToArea ( i , healArea ) ;
13261: LD_VAR 0 14
13265: PPUSH
13266: LD_VAR 0 10
13270: PPUSH
13271: CALL_OW 113
// for j in medic_list do
13275: LD_ADDR_VAR 0 15
13279: PUSH
13280: LD_VAR 0 18
13284: PUSH
13285: FOR_IN
13286: IFFALSE 13304
// AddComHeal ( j , i ) ;
13288: LD_VAR 0 15
13292: PPUSH
13293: LD_VAR 0 14
13297: PPUSH
13298: CALL_OW 188
13302: GO 13285
13304: POP
13305: POP
// end ;
13306: GO 13258
13308: POP
13309: POP
// end ; end ; for i in soldiersOK_list do
13310: LD_ADDR_VAR 0 14
13314: PUSH
13315: LD_VAR 0 19
13319: PUSH
13320: FOR_IN
13321: IFFALSE 13497
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13323: LD_ADDR_VAR 0 22
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_VAR 0 11
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: PPUSH
13345: LD_VAR 0 14
13349: PPUSH
13350: CALL_OW 74
13354: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13355: LD_ADDR_VAR 0 23
13359: PUSH
13360: LD_INT 22
13362: PUSH
13363: LD_VAR 0 11
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 2
13374: PUSH
13375: LD_INT 59
13377: PUSH
13378: EMPTY
13379: LIST
13380: PUSH
13381: LD_INT 21
13383: PUSH
13384: LD_INT 1
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 21
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: PPUSH
13419: LD_VAR 0 14
13423: PPUSH
13424: CALL_OW 74
13428: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13429: LD_VAR 0 14
13433: PPUSH
13434: LD_VAR 0 22
13438: PPUSH
13439: CALL_OW 296
13443: PUSH
13444: LD_INT 6
13446: PLUS
13447: PUSH
13448: LD_VAR 0 14
13452: PPUSH
13453: LD_VAR 0 23
13457: PPUSH
13458: CALL_OW 296
13462: LESS
13463: IFFALSE 13481
// begin ComAttackUnit ( i , target1 ) ;
13465: LD_VAR 0 14
13469: PPUSH
13470: LD_VAR 0 22
13474: PPUSH
13475: CALL_OW 115
// end else
13479: GO 13495
// begin ComAttackUnit ( i , target2 ) ;
13481: LD_VAR 0 14
13485: PPUSH
13486: LD_VAR 0 23
13490: PPUSH
13491: CALL_OW 115
// end ; end ;
13495: GO 13320
13497: POP
13498: POP
// until soldiersOK_list = [ ] ;
13499: LD_VAR 0 19
13503: PUSH
13504: EMPTY
13505: EQUAL
13506: IFFALSE 13073
// end ; if strategy = 2 then
13508: LD_VAR 0 12
13512: PUSH
13513: LD_INT 2
13515: EQUAL
13516: IFFALSE 14032
// begin repeat wait ( 0 0$1 ) ;
13518: LD_INT 35
13520: PPUSH
13521: CALL_OW 67
// for i in soldiersOK_list do
13525: LD_ADDR_VAR 0 14
13529: PUSH
13530: LD_VAR 0 19
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13570
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13538: LD_VAR 0 14
13542: PPUSH
13543: LD_INT 91
13545: PPUSH
13546: LD_INT 63
13548: PPUSH
13549: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13553: LD_VAR 0 14
13557: PPUSH
13558: LD_INT 75
13560: PPUSH
13561: LD_INT 33
13563: PPUSH
13564: CALL_OW 174
// end ;
13568: GO 13535
13570: POP
13571: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13572: LD_INT 13
13574: PPUSH
13575: LD_INT 22
13577: PUSH
13578: LD_VAR 0 1
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PPUSH
13587: CALL_OW 70
13591: PUSH
13592: LD_INT 2
13594: GREATER
13595: IFFALSE 13518
// repeat wait ( 0 0$3 ) ;
13597: LD_INT 105
13599: PPUSH
13600: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13604: LD_ADDR_VAR 0 17
13608: PUSH
13609: LD_INT 22
13611: PUSH
13612: LD_VAR 0 1
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: LD_INT 3
13626: PUSH
13627: LD_INT 24
13629: PUSH
13630: LD_INT 550
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 24
13643: PUSH
13644: LD_INT 250
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PPUSH
13660: CALL_OW 69
13664: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13665: LD_ADDR_VAR 0 19
13669: PUSH
13670: LD_INT 22
13672: PUSH
13673: LD_VAR 0 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: LD_INT 25
13687: PUSH
13688: LD_INT 1
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 25
13697: PUSH
13698: LD_INT 5
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: LD_INT 25
13707: PUSH
13708: LD_INT 8
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 25
13717: PUSH
13718: LD_INT 9
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 24
13734: PUSH
13735: LD_INT 1000
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: PPUSH
13747: CALL_OW 69
13751: ST_TO_ADDR
// if medicCount > 0 then
13752: LD_VAR 0 7
13756: PUSH
13757: LD_INT 0
13759: GREATER
13760: IFFALSE 13834
// begin if damageUnit_list > 0 then
13762: LD_VAR 0 17
13766: PUSH
13767: LD_INT 0
13769: GREATER
13770: IFFALSE 13834
// begin for i in damageUnit_list do
13772: LD_ADDR_VAR 0 14
13776: PUSH
13777: LD_VAR 0 17
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13832
// begin ComMoveToArea ( i , healArea ) ;
13785: LD_VAR 0 14
13789: PPUSH
13790: LD_VAR 0 10
13794: PPUSH
13795: CALL_OW 113
// for j in medic_list do
13799: LD_ADDR_VAR 0 15
13803: PUSH
13804: LD_VAR 0 18
13808: PUSH
13809: FOR_IN
13810: IFFALSE 13828
// AddComHeal ( j , i ) ;
13812: LD_VAR 0 15
13816: PPUSH
13817: LD_VAR 0 14
13821: PPUSH
13822: CALL_OW 188
13826: GO 13809
13828: POP
13829: POP
// end ;
13830: GO 13782
13832: POP
13833: POP
// end ; end ; for i in soldiersOK_list do
13834: LD_ADDR_VAR 0 14
13838: PUSH
13839: LD_VAR 0 19
13843: PUSH
13844: FOR_IN
13845: IFFALSE 14021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13847: LD_ADDR_VAR 0 22
13851: PUSH
13852: LD_INT 22
13854: PUSH
13855: LD_VAR 0 11
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: PPUSH
13869: LD_VAR 0 14
13873: PPUSH
13874: CALL_OW 74
13878: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13879: LD_ADDR_VAR 0 23
13883: PUSH
13884: LD_INT 22
13886: PUSH
13887: LD_VAR 0 11
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 2
13898: PUSH
13899: LD_INT 59
13901: PUSH
13902: EMPTY
13903: LIST
13904: PUSH
13905: LD_INT 21
13907: PUSH
13908: LD_INT 1
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 21
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: PPUSH
13943: LD_VAR 0 14
13947: PPUSH
13948: CALL_OW 74
13952: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13953: LD_VAR 0 14
13957: PPUSH
13958: LD_VAR 0 22
13962: PPUSH
13963: CALL_OW 296
13967: PUSH
13968: LD_INT 6
13970: PLUS
13971: PUSH
13972: LD_VAR 0 14
13976: PPUSH
13977: LD_VAR 0 23
13981: PPUSH
13982: CALL_OW 296
13986: LESS
13987: IFFALSE 14005
// begin ComAttackUnit ( i , target1 ) ;
13989: LD_VAR 0 14
13993: PPUSH
13994: LD_VAR 0 22
13998: PPUSH
13999: CALL_OW 115
// end else
14003: GO 14019
// begin ComAttackUnit ( i , target2 ) ;
14005: LD_VAR 0 14
14009: PPUSH
14010: LD_VAR 0 23
14014: PPUSH
14015: CALL_OW 115
// end ; end ;
14019: GO 13844
14021: POP
14022: POP
// until soldiersOK_list = [ ] ;
14023: LD_VAR 0 19
14027: PUSH
14028: EMPTY
14029: EQUAL
14030: IFFALSE 13597
// end ; if strategy = 3 then
14032: LD_VAR 0 12
14036: PUSH
14037: LD_INT 3
14039: EQUAL
14040: IFFALSE 14586
// begin repeat wait ( 0 0$3 ) ;
14042: LD_INT 105
14044: PPUSH
14045: CALL_OW 67
// for i in soldiersOK_list do
14049: LD_ADDR_VAR 0 14
14053: PUSH
14054: LD_VAR 0 19
14058: PUSH
14059: FOR_IN
14060: IFFALSE 14124
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14062: LD_VAR 0 14
14066: PPUSH
14067: LD_INT 63
14069: PPUSH
14070: LD_INT 71
14072: PPUSH
14073: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14077: LD_VAR 0 14
14081: PPUSH
14082: LD_INT 35
14084: PPUSH
14085: LD_INT 44
14087: PPUSH
14088: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14092: LD_VAR 0 14
14096: PPUSH
14097: LD_INT 23
14099: PPUSH
14100: LD_INT 18
14102: PPUSH
14103: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14107: LD_VAR 0 14
14111: PPUSH
14112: LD_INT 26
14114: PPUSH
14115: LD_INT 12
14117: PPUSH
14118: CALL_OW 174
// end ;
14122: GO 14059
14124: POP
14125: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14126: LD_INT 14
14128: PPUSH
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 70
14145: PUSH
14146: LD_INT 2
14148: GREATER
14149: IFFALSE 14042
// repeat wait ( 0 0$1 ) ;
14151: LD_INT 35
14153: PPUSH
14154: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14158: LD_ADDR_VAR 0 17
14162: PUSH
14163: LD_INT 22
14165: PUSH
14166: LD_VAR 0 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 1
14177: PUSH
14178: LD_INT 3
14180: PUSH
14181: LD_INT 24
14183: PUSH
14184: LD_INT 550
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 24
14197: PUSH
14198: LD_INT 250
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PPUSH
14214: CALL_OW 69
14218: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14219: LD_ADDR_VAR 0 19
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_VAR 0 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: LD_INT 25
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 25
14251: PUSH
14252: LD_INT 5
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 25
14261: PUSH
14262: LD_INT 8
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 25
14271: PUSH
14272: LD_INT 9
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 24
14288: PUSH
14289: LD_INT 1000
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: PPUSH
14301: CALL_OW 69
14305: ST_TO_ADDR
// if medicCount > 0 then
14306: LD_VAR 0 7
14310: PUSH
14311: LD_INT 0
14313: GREATER
14314: IFFALSE 14388
// begin if damageUnit_list > 0 then
14316: LD_VAR 0 17
14320: PUSH
14321: LD_INT 0
14323: GREATER
14324: IFFALSE 14388
// begin for i in damageUnit_list do
14326: LD_ADDR_VAR 0 14
14330: PUSH
14331: LD_VAR 0 17
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14386
// begin ComMoveToArea ( i , healArea ) ;
14339: LD_VAR 0 14
14343: PPUSH
14344: LD_VAR 0 10
14348: PPUSH
14349: CALL_OW 113
// for j in medic_list do
14353: LD_ADDR_VAR 0 15
14357: PUSH
14358: LD_VAR 0 18
14362: PUSH
14363: FOR_IN
14364: IFFALSE 14382
// AddComHeal ( j , i ) ;
14366: LD_VAR 0 15
14370: PPUSH
14371: LD_VAR 0 14
14375: PPUSH
14376: CALL_OW 188
14380: GO 14363
14382: POP
14383: POP
// end ;
14384: GO 14336
14386: POP
14387: POP
// end ; end ; for i in soldiersOK_list do
14388: LD_ADDR_VAR 0 14
14392: PUSH
14393: LD_VAR 0 19
14397: PUSH
14398: FOR_IN
14399: IFFALSE 14575
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14401: LD_ADDR_VAR 0 22
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_VAR 0 11
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PPUSH
14418: CALL_OW 69
14422: PPUSH
14423: LD_VAR 0 14
14427: PPUSH
14428: CALL_OW 74
14432: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14433: LD_ADDR_VAR 0 23
14437: PUSH
14438: LD_INT 22
14440: PUSH
14441: LD_VAR 0 11
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 2
14452: PUSH
14453: LD_INT 59
14455: PUSH
14456: EMPTY
14457: LIST
14458: PUSH
14459: LD_INT 21
14461: PUSH
14462: LD_INT 1
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 21
14471: PUSH
14472: LD_INT 2
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: EMPTY
14490: LIST
14491: PPUSH
14492: CALL_OW 69
14496: PPUSH
14497: LD_VAR 0 14
14501: PPUSH
14502: CALL_OW 74
14506: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14507: LD_VAR 0 14
14511: PPUSH
14512: LD_VAR 0 22
14516: PPUSH
14517: CALL_OW 296
14521: PUSH
14522: LD_INT 6
14524: PLUS
14525: PUSH
14526: LD_VAR 0 14
14530: PPUSH
14531: LD_VAR 0 23
14535: PPUSH
14536: CALL_OW 296
14540: LESS
14541: IFFALSE 14559
// begin ComAttackUnit ( i , target1 ) ;
14543: LD_VAR 0 14
14547: PPUSH
14548: LD_VAR 0 22
14552: PPUSH
14553: CALL_OW 115
// end else
14557: GO 14573
// begin ComAttackUnit ( i , target2 ) ;
14559: LD_VAR 0 14
14563: PPUSH
14564: LD_VAR 0 23
14568: PPUSH
14569: CALL_OW 115
// end ; end ;
14573: GO 14398
14575: POP
14576: POP
// until soldiersOK_list = [ ] ;
14577: LD_VAR 0 19
14581: PUSH
14582: EMPTY
14583: EQUAL
14584: IFFALSE 14151
// end ; end ;
14586: LD_VAR 0 13
14590: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14591: LD_INT 0
14593: PPUSH
14594: PPUSH
14595: PPUSH
14596: PPUSH
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
// amChassisTab = [ ] ;
14604: LD_ADDR_VAR 0 19
14608: PUSH
14609: EMPTY
14610: ST_TO_ADDR
// arChassisTab = [ ] ;
14611: LD_ADDR_VAR 0 18
14615: PUSH
14616: EMPTY
14617: ST_TO_ADDR
// ruChassisTab = [ ] ;
14618: LD_ADDR_VAR 0 17
14622: PUSH
14623: EMPTY
14624: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14625: LD_INT 35
14627: PPUSH
14628: CALL_OW 67
// if nation = 1 then
14632: LD_VAR 0 5
14636: PUSH
14637: LD_INT 1
14639: EQUAL
14640: IFFALSE 15131
// begin uc_side = side ;
14642: LD_ADDR_OWVAR 20
14646: PUSH
14647: LD_VAR 0 2
14651: ST_TO_ADDR
// uc_nation = nation ;
14652: LD_ADDR_OWVAR 21
14656: PUSH
14657: LD_VAR 0 5
14661: ST_TO_ADDR
// vc_engine = vehengine ;
14662: LD_ADDR_OWVAR 39
14666: PUSH
14667: LD_VAR 0 6
14671: ST_TO_ADDR
// vc_control = vehcontrol ;
14672: LD_ADDR_OWVAR 38
14676: PUSH
14677: LD_VAR 0 7
14681: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14682: LD_ADDR_OWVAR 40
14686: PUSH
14687: LD_VAR 0 10
14691: PUSH
14692: LD_INT 1
14694: PPUSH
14695: LD_VAR 0 10
14699: PPUSH
14700: CALL_OW 12
14704: ARRAY
14705: ST_TO_ADDR
// for j = 1 to AMWeapon do
14706: LD_ADDR_VAR 0 14
14710: PUSH
14711: DOUBLE
14712: LD_INT 1
14714: DEC
14715: ST_TO_ADDR
14716: LD_VAR 0 10
14720: PUSH
14721: FOR_TO
14722: IFFALSE 15023
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14724: LD_VAR 0 10
14728: PUSH
14729: LD_VAR 0 14
14733: ARRAY
14734: PUSH
14735: LD_INT 2
14737: EQUAL
14738: PUSH
14739: LD_VAR 0 10
14743: PUSH
14744: LD_VAR 0 14
14748: ARRAY
14749: PUSH
14750: LD_INT 3
14752: EQUAL
14753: OR
14754: IFFALSE 14807
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14756: LD_ADDR_VAR 0 19
14760: PUSH
14761: LD_INT 1
14763: PUSH
14764: LD_INT 2
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: LD_INT 4
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14783: LD_ADDR_OWVAR 37
14787: PUSH
14788: LD_VAR 0 19
14792: PUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_VAR 0 19
14800: PPUSH
14801: CALL_OW 12
14805: ARRAY
14806: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14807: LD_VAR 0 10
14811: PUSH
14812: LD_VAR 0 14
14816: ARRAY
14817: PUSH
14818: LD_INT 4
14820: EQUAL
14821: PUSH
14822: LD_VAR 0 10
14826: PUSH
14827: LD_VAR 0 14
14831: ARRAY
14832: PUSH
14833: LD_INT 5
14835: EQUAL
14836: OR
14837: PUSH
14838: LD_VAR 0 10
14842: PUSH
14843: LD_VAR 0 14
14847: ARRAY
14848: PUSH
14849: LD_INT 9
14851: EQUAL
14852: OR
14853: PUSH
14854: LD_VAR 0 10
14858: PUSH
14859: LD_VAR 0 14
14863: ARRAY
14864: PUSH
14865: LD_INT 11
14867: EQUAL
14868: OR
14869: PUSH
14870: LD_VAR 0 10
14874: PUSH
14875: LD_VAR 0 14
14879: ARRAY
14880: PUSH
14881: LD_INT 7
14883: EQUAL
14884: OR
14885: IFFALSE 14934
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14887: LD_ADDR_VAR 0 19
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: LD_INT 4
14900: PUSH
14901: LD_INT 5
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14910: LD_ADDR_OWVAR 37
14914: PUSH
14915: LD_VAR 0 19
14919: PUSH
14920: LD_INT 1
14922: PPUSH
14923: LD_VAR 0 19
14927: PPUSH
14928: CALL_OW 12
14932: ARRAY
14933: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14934: LD_VAR 0 10
14938: PUSH
14939: LD_VAR 0 14
14943: ARRAY
14944: PUSH
14945: LD_INT 8
14947: EQUAL
14948: PUSH
14949: LD_VAR 0 10
14953: PUSH
14954: LD_VAR 0 14
14958: ARRAY
14959: PUSH
14960: LD_INT 6
14962: EQUAL
14963: OR
14964: PUSH
14965: LD_VAR 0 10
14969: PUSH
14970: LD_VAR 0 14
14974: ARRAY
14975: PUSH
14976: LD_INT 10
14978: EQUAL
14979: OR
14980: IFFALSE 15021
// begin amChassisTab = [ 4 , 5 ] ;
14982: LD_ADDR_VAR 0 19
14986: PUSH
14987: LD_INT 4
14989: PUSH
14990: LD_INT 5
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14997: LD_ADDR_OWVAR 37
15001: PUSH
15002: LD_VAR 0 19
15006: PUSH
15007: LD_INT 1
15009: PPUSH
15010: LD_VAR 0 19
15014: PPUSH
15015: CALL_OW 12
15019: ARRAY
15020: ST_TO_ADDR
// end ; end ;
15021: GO 14721
15023: POP
15024: POP
// veh = CreateVehicle ;
15025: LD_ADDR_VAR 0 16
15029: PUSH
15030: CALL_OW 45
15034: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15035: LD_VAR 0 16
15039: PPUSH
15040: LD_VAR 0 1
15044: PPUSH
15045: LD_INT 0
15047: PPUSH
15048: CALL_OW 49
// if vehControl = 1 then
15052: LD_VAR 0 7
15056: PUSH
15057: LD_INT 1
15059: EQUAL
15060: IFFALSE 15117
// begin hc_gallery =  ;
15062: LD_ADDR_OWVAR 33
15066: PUSH
15067: LD_STRING 
15069: ST_TO_ADDR
// hc_name =  ;
15070: LD_ADDR_OWVAR 26
15074: PUSH
15075: LD_STRING 
15077: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15078: LD_INT 0
15080: PPUSH
15081: LD_INT 3
15083: PPUSH
15084: LD_VAR 0 4
15088: PPUSH
15089: CALL_OW 380
// un = CreateHuman ;
15093: LD_ADDR_VAR 0 15
15097: PUSH
15098: CALL_OW 44
15102: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15103: LD_VAR 0 15
15107: PPUSH
15108: LD_VAR 0 16
15112: PPUSH
15113: CALL_OW 52
// end ; i = i + 1 ;
15117: LD_ADDR_VAR 0 13
15121: PUSH
15122: LD_VAR 0 13
15126: PUSH
15127: LD_INT 1
15129: PLUS
15130: ST_TO_ADDR
// end ; if nation = 2 then
15131: LD_VAR 0 5
15135: PUSH
15136: LD_INT 2
15138: EQUAL
15139: IFFALSE 15563
// begin uc_side = side ;
15141: LD_ADDR_OWVAR 20
15145: PUSH
15146: LD_VAR 0 2
15150: ST_TO_ADDR
// uc_nation = nation ;
15151: LD_ADDR_OWVAR 21
15155: PUSH
15156: LD_VAR 0 5
15160: ST_TO_ADDR
// vc_engine = vehengine ;
15161: LD_ADDR_OWVAR 39
15165: PUSH
15166: LD_VAR 0 6
15170: ST_TO_ADDR
// vc_control = vehcontrol ;
15171: LD_ADDR_OWVAR 38
15175: PUSH
15176: LD_VAR 0 7
15180: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15181: LD_ADDR_OWVAR 40
15185: PUSH
15186: LD_VAR 0 9
15190: PUSH
15191: LD_INT 1
15193: PPUSH
15194: LD_VAR 0 9
15198: PPUSH
15199: CALL_OW 12
15203: ARRAY
15204: ST_TO_ADDR
// for j = 1 to ARWeapons do
15205: LD_ADDR_VAR 0 14
15209: PUSH
15210: DOUBLE
15211: LD_INT 1
15213: DEC
15214: ST_TO_ADDR
15215: LD_VAR 0 9
15219: PUSH
15220: FOR_TO
15221: IFFALSE 15455
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15223: LD_VAR 0 9
15227: PUSH
15228: LD_VAR 0 14
15232: ARRAY
15233: PUSH
15234: LD_INT 24
15236: EQUAL
15237: PUSH
15238: LD_VAR 0 9
15242: PUSH
15243: LD_VAR 0 14
15247: ARRAY
15248: PUSH
15249: LD_INT 22
15251: EQUAL
15252: OR
15253: PUSH
15254: LD_VAR 0 9
15258: PUSH
15259: LD_VAR 0 14
15263: ARRAY
15264: PUSH
15265: LD_INT 23
15267: EQUAL
15268: OR
15269: PUSH
15270: LD_VAR 0 9
15274: PUSH
15275: LD_VAR 0 14
15279: ARRAY
15280: PUSH
15281: LD_INT 30
15283: EQUAL
15284: OR
15285: IFFALSE 15334
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15287: LD_ADDR_VAR 0 18
15291: PUSH
15292: LD_INT 11
15294: PUSH
15295: LD_INT 12
15297: PUSH
15298: LD_INT 13
15300: PUSH
15301: LD_INT 14
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15310: LD_ADDR_OWVAR 37
15314: PUSH
15315: LD_VAR 0 18
15319: PUSH
15320: LD_INT 1
15322: PPUSH
15323: LD_VAR 0 18
15327: PPUSH
15328: CALL_OW 12
15332: ARRAY
15333: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15334: LD_VAR 0 9
15338: PUSH
15339: LD_VAR 0 14
15343: ARRAY
15344: PUSH
15345: LD_INT 29
15347: EQUAL
15348: PUSH
15349: LD_VAR 0 9
15353: PUSH
15354: LD_VAR 0 14
15358: ARRAY
15359: PUSH
15360: LD_INT 28
15362: EQUAL
15363: OR
15364: PUSH
15365: LD_VAR 0 9
15369: PUSH
15370: LD_VAR 0 14
15374: ARRAY
15375: PUSH
15376: LD_INT 27
15378: EQUAL
15379: OR
15380: PUSH
15381: LD_VAR 0 9
15385: PUSH
15386: LD_VAR 0 14
15390: ARRAY
15391: PUSH
15392: LD_INT 26
15394: EQUAL
15395: OR
15396: PUSH
15397: LD_VAR 0 9
15401: PUSH
15402: LD_VAR 0 14
15406: ARRAY
15407: PUSH
15408: LD_INT 25
15410: EQUAL
15411: OR
15412: IFFALSE 15453
// begin arChassisTab = [ 13 , 14 ] ;
15414: LD_ADDR_VAR 0 18
15418: PUSH
15419: LD_INT 13
15421: PUSH
15422: LD_INT 14
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15429: LD_ADDR_OWVAR 37
15433: PUSH
15434: LD_VAR 0 18
15438: PUSH
15439: LD_INT 1
15441: PPUSH
15442: LD_VAR 0 18
15446: PPUSH
15447: CALL_OW 12
15451: ARRAY
15452: ST_TO_ADDR
// end ; end ;
15453: GO 15220
15455: POP
15456: POP
// veh = CreateVehicle ;
15457: LD_ADDR_VAR 0 16
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15467: LD_VAR 0 16
15471: PPUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: LD_INT 0
15479: PPUSH
15480: CALL_OW 49
// if vehcontrol = 1 then
15484: LD_VAR 0 7
15488: PUSH
15489: LD_INT 1
15491: EQUAL
15492: IFFALSE 15549
// begin hc_gallery =  ;
15494: LD_ADDR_OWVAR 33
15498: PUSH
15499: LD_STRING 
15501: ST_TO_ADDR
// hc_name =  ;
15502: LD_ADDR_OWVAR 26
15506: PUSH
15507: LD_STRING 
15509: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_VAR 0 4
15520: PPUSH
15521: CALL_OW 380
// un = CreateHuman ;
15525: LD_ADDR_VAR 0 15
15529: PUSH
15530: CALL_OW 44
15534: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15535: LD_VAR 0 15
15539: PPUSH
15540: LD_VAR 0 16
15544: PPUSH
15545: CALL_OW 52
// end ; i = i + 1 ;
15549: LD_ADDR_VAR 0 13
15553: PUSH
15554: LD_VAR 0 13
15558: PUSH
15559: LD_INT 1
15561: PLUS
15562: ST_TO_ADDR
// end ; if nation = 3 then
15563: LD_VAR 0 5
15567: PUSH
15568: LD_INT 3
15570: EQUAL
15571: IFFALSE 15963
// begin uc_side = side ;
15573: LD_ADDR_OWVAR 20
15577: PUSH
15578: LD_VAR 0 2
15582: ST_TO_ADDR
// uc_nation = nation ;
15583: LD_ADDR_OWVAR 21
15587: PUSH
15588: LD_VAR 0 5
15592: ST_TO_ADDR
// vc_engine = vehengine ;
15593: LD_ADDR_OWVAR 39
15597: PUSH
15598: LD_VAR 0 6
15602: ST_TO_ADDR
// vc_control = vehcontrol ;
15603: LD_ADDR_OWVAR 38
15607: PUSH
15608: LD_VAR 0 7
15612: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15613: LD_ADDR_OWVAR 40
15617: PUSH
15618: LD_VAR 0 8
15622: PUSH
15623: LD_INT 1
15625: PPUSH
15626: LD_VAR 0 8
15630: PPUSH
15631: CALL_OW 12
15635: ARRAY
15636: ST_TO_ADDR
// for j = 1 to RuWeapons do
15637: LD_ADDR_VAR 0 14
15641: PUSH
15642: DOUBLE
15643: LD_INT 1
15645: DEC
15646: ST_TO_ADDR
15647: LD_VAR 0 8
15651: PUSH
15652: FOR_TO
15653: IFFALSE 15855
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15655: LD_VAR 0 8
15659: PUSH
15660: LD_VAR 0 14
15664: ARRAY
15665: PUSH
15666: LD_INT 42
15668: EQUAL
15669: PUSH
15670: LD_VAR 0 8
15674: PUSH
15675: LD_VAR 0 14
15679: ARRAY
15680: PUSH
15681: LD_INT 43
15683: EQUAL
15684: OR
15685: PUSH
15686: LD_VAR 0 8
15690: PUSH
15691: LD_VAR 0 14
15695: ARRAY
15696: PUSH
15697: LD_INT 44
15699: EQUAL
15700: OR
15701: PUSH
15702: LD_VAR 0 8
15706: PUSH
15707: LD_VAR 0 14
15711: ARRAY
15712: PUSH
15713: LD_INT 45
15715: EQUAL
15716: OR
15717: PUSH
15718: LD_VAR 0 8
15722: PUSH
15723: LD_VAR 0 14
15727: ARRAY
15728: PUSH
15729: LD_INT 49
15731: EQUAL
15732: OR
15733: IFFALSE 15782
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15735: LD_ADDR_VAR 0 17
15739: PUSH
15740: LD_INT 21
15742: PUSH
15743: LD_INT 22
15745: PUSH
15746: LD_INT 23
15748: PUSH
15749: LD_INT 24
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15758: LD_ADDR_OWVAR 37
15762: PUSH
15763: LD_VAR 0 17
15767: PUSH
15768: LD_INT 1
15770: PPUSH
15771: LD_VAR 0 17
15775: PPUSH
15776: CALL_OW 12
15780: ARRAY
15781: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15782: LD_VAR 0 8
15786: PUSH
15787: LD_VAR 0 14
15791: ARRAY
15792: PUSH
15793: LD_INT 46
15795: EQUAL
15796: PUSH
15797: LD_VAR 0 8
15801: PUSH
15802: LD_VAR 0 14
15806: ARRAY
15807: PUSH
15808: LD_INT 47
15810: EQUAL
15811: OR
15812: IFFALSE 15853
// begin ruChassisTab = [ 23 , 24 ] ;
15814: LD_ADDR_VAR 0 17
15818: PUSH
15819: LD_INT 23
15821: PUSH
15822: LD_INT 24
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15829: LD_ADDR_OWVAR 37
15833: PUSH
15834: LD_VAR 0 17
15838: PUSH
15839: LD_INT 1
15841: PPUSH
15842: LD_VAR 0 17
15846: PPUSH
15847: CALL_OW 12
15851: ARRAY
15852: ST_TO_ADDR
// end ; end ;
15853: GO 15652
15855: POP
15856: POP
// veh = CreateVehicle ;
15857: LD_ADDR_VAR 0 16
15861: PUSH
15862: CALL_OW 45
15866: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15867: LD_VAR 0 16
15871: PPUSH
15872: LD_VAR 0 1
15876: PPUSH
15877: LD_INT 0
15879: PPUSH
15880: CALL_OW 49
// if vehcontrol = 1 then
15884: LD_VAR 0 7
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: IFFALSE 15949
// begin hc_gallery =  ;
15894: LD_ADDR_OWVAR 33
15898: PUSH
15899: LD_STRING 
15901: ST_TO_ADDR
// hc_name =  ;
15902: LD_ADDR_OWVAR 26
15906: PUSH
15907: LD_STRING 
15909: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15910: LD_INT 0
15912: PPUSH
15913: LD_INT 3
15915: PPUSH
15916: LD_VAR 0 4
15920: PPUSH
15921: CALL_OW 380
// un = CreateHuman ;
15925: LD_ADDR_VAR 0 15
15929: PUSH
15930: CALL_OW 44
15934: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15935: LD_VAR 0 15
15939: PPUSH
15940: LD_VAR 0 16
15944: PPUSH
15945: CALL_OW 52
// end ; i = i + 1 ;
15949: LD_ADDR_VAR 0 13
15953: PUSH
15954: LD_VAR 0 13
15958: PUSH
15959: LD_INT 1
15961: PLUS
15962: ST_TO_ADDR
// end ; until i = vehCount ;
15963: LD_VAR 0 13
15967: PUSH
15968: LD_VAR 0 3
15972: EQUAL
15973: IFFALSE 14625
// repeat wait ( 0 0$1 ) ;
15975: LD_INT 35
15977: PPUSH
15978: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15982: LD_ADDR_VAR 0 20
15986: PUSH
15987: LD_INT 22
15989: PUSH
15990: LD_VAR 0 2
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 21
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 24
16011: PUSH
16012: LD_INT 250
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 69
16028: ST_TO_ADDR
// if vehicleOK_list > 0 then
16029: LD_VAR 0 20
16033: PUSH
16034: LD_INT 0
16036: GREATER
16037: IFFALSE 16228
// begin for i in vehicleOK_list do
16039: LD_ADDR_VAR 0 13
16043: PUSH
16044: LD_VAR 0 20
16048: PUSH
16049: FOR_IN
16050: IFFALSE 16226
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16052: LD_ADDR_VAR 0 21
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_VAR 0 11
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 69
16073: PPUSH
16074: LD_VAR 0 13
16078: PPUSH
16079: CALL_OW 74
16083: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16084: LD_ADDR_VAR 0 22
16088: PUSH
16089: LD_INT 22
16091: PUSH
16092: LD_VAR 0 11
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: LD_INT 59
16106: PUSH
16107: EMPTY
16108: LIST
16109: PUSH
16110: LD_INT 21
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 2
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: PPUSH
16143: CALL_OW 69
16147: PPUSH
16148: LD_VAR 0 13
16152: PPUSH
16153: CALL_OW 74
16157: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16158: LD_VAR 0 13
16162: PPUSH
16163: LD_VAR 0 21
16167: PPUSH
16168: CALL_OW 296
16172: PUSH
16173: LD_INT 6
16175: PLUS
16176: PUSH
16177: LD_VAR 0 13
16181: PPUSH
16182: LD_VAR 0 22
16186: PPUSH
16187: CALL_OW 296
16191: LESS
16192: IFFALSE 16210
// begin ComAttackUnit ( i , target1 ) ;
16194: LD_VAR 0 13
16198: PPUSH
16199: LD_VAR 0 21
16203: PPUSH
16204: CALL_OW 115
// end else
16208: GO 16224
// begin ComAttackUnit ( i , target2 ) ;
16210: LD_VAR 0 13
16214: PPUSH
16215: LD_VAR 0 22
16219: PPUSH
16220: CALL_OW 115
// end ; end ;
16224: GO 16049
16226: POP
16227: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16228: LD_INT 22
16230: PUSH
16231: LD_VAR 0 2
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 21
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 24
16252: PUSH
16253: LD_INT 250
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: PPUSH
16265: CALL_OW 69
16269: PUSH
16270: LD_INT 0
16272: EQUAL
16273: IFFALSE 15975
// end ;
16275: LD_VAR 0 12
16279: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
16289: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16290: LD_ADDR_VAR 0 7
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_VAR 0 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: LD_INT 3
16312: PUSH
16313: LD_INT 24
16315: PUSH
16316: LD_INT 550
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 24
16329: PUSH
16330: LD_INT 250
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PPUSH
16346: CALL_OW 69
16350: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16351: LD_ADDR_VAR 0 8
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_VAR 0 1
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 2
16370: PUSH
16371: LD_INT 25
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 25
16383: PUSH
16384: LD_INT 5
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 25
16393: PUSH
16394: LD_INT 8
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 25
16403: PUSH
16404: LD_INT 9
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 24
16420: PUSH
16421: LD_INT 1000
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL_OW 69
16437: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16438: LD_ADDR_VAR 0 9
16442: PUSH
16443: LD_INT 22
16445: PUSH
16446: LD_VAR 0 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 25
16457: PUSH
16458: LD_INT 4
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// if medicCount > 0 then
16474: LD_VAR 0 9
16478: PUSH
16479: LD_INT 0
16481: GREATER
16482: IFFALSE 16556
// begin if damageUnit_list > 0 then
16484: LD_VAR 0 7
16488: PUSH
16489: LD_INT 0
16491: GREATER
16492: IFFALSE 16556
// begin for i in damageUnit_list do
16494: LD_ADDR_VAR 0 5
16498: PUSH
16499: LD_VAR 0 7
16503: PUSH
16504: FOR_IN
16505: IFFALSE 16554
// begin ComMoveToArea ( i , healArea ) ;
16507: LD_VAR 0 5
16511: PPUSH
16512: LD_VAR 0 2
16516: PPUSH
16517: CALL_OW 113
// for j in medicCount do
16521: LD_ADDR_VAR 0 6
16525: PUSH
16526: LD_VAR 0 9
16530: PUSH
16531: FOR_IN
16532: IFFALSE 16550
// AddComHeal ( j , i ) ;
16534: LD_VAR 0 6
16538: PPUSH
16539: LD_VAR 0 5
16543: PPUSH
16544: CALL_OW 188
16548: GO 16531
16550: POP
16551: POP
// end ;
16552: GO 16504
16554: POP
16555: POP
// end ; end ; if soldiersOK_list > 0 then
16556: LD_VAR 0 8
16560: PUSH
16561: LD_INT 0
16563: GREATER
16564: IFFALSE 16755
// begin for i in soldiersOK_list do
16566: LD_ADDR_VAR 0 5
16570: PUSH
16571: LD_VAR 0 8
16575: PUSH
16576: FOR_IN
16577: IFFALSE 16753
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16579: LD_ADDR_VAR 0 10
16583: PUSH
16584: LD_INT 22
16586: PUSH
16587: LD_VAR 0 3
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PPUSH
16596: CALL_OW 69
16600: PPUSH
16601: LD_VAR 0 5
16605: PPUSH
16606: CALL_OW 74
16610: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16611: LD_ADDR_VAR 0 11
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_VAR 0 3
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 59
16633: PUSH
16634: EMPTY
16635: LIST
16636: PUSH
16637: LD_INT 21
16639: PUSH
16640: LD_INT 1
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: PPUSH
16670: CALL_OW 69
16674: PPUSH
16675: LD_VAR 0 5
16679: PPUSH
16680: CALL_OW 74
16684: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16685: LD_VAR 0 5
16689: PPUSH
16690: LD_VAR 0 10
16694: PPUSH
16695: CALL_OW 296
16699: PUSH
16700: LD_INT 8
16702: PLUS
16703: PUSH
16704: LD_VAR 0 5
16708: PPUSH
16709: LD_VAR 0 11
16713: PPUSH
16714: CALL_OW 296
16718: LESS
16719: IFFALSE 16737
// begin ComAttackUnit ( i , target1 ) ;
16721: LD_VAR 0 5
16725: PPUSH
16726: LD_VAR 0 10
16730: PPUSH
16731: CALL_OW 115
// end else
16735: GO 16751
// begin ComAttackUnit ( i , target2 ) ;
16737: LD_VAR 0 5
16741: PPUSH
16742: LD_VAR 0 11
16746: PPUSH
16747: CALL_OW 115
// end ; end ;
16751: GO 16576
16753: POP
16754: POP
// end ; end ;
16755: LD_VAR 0 4
16759: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
// list := [ ] ;
16764: LD_ADDR_VAR 0 5
16768: PUSH
16769: EMPTY
16770: ST_TO_ADDR
// case d of 0 :
16771: LD_VAR 0 3
16775: PUSH
16776: LD_INT 0
16778: DOUBLE
16779: EQUAL
16780: IFTRUE 16784
16782: GO 16917
16784: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16785: LD_ADDR_VAR 0 5
16789: PUSH
16790: LD_VAR 0 1
16794: PUSH
16795: LD_INT 4
16797: MINUS
16798: PUSH
16799: LD_VAR 0 2
16803: PUSH
16804: LD_INT 4
16806: MINUS
16807: PUSH
16808: LD_INT 2
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: LD_VAR 0 1
16820: PUSH
16821: LD_INT 3
16823: MINUS
16824: PUSH
16825: LD_VAR 0 2
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: PUSH
16838: LD_VAR 0 1
16842: PUSH
16843: LD_INT 4
16845: PLUS
16846: PUSH
16847: LD_VAR 0 2
16851: PUSH
16852: LD_INT 4
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: PUSH
16860: LD_VAR 0 1
16864: PUSH
16865: LD_INT 3
16867: PLUS
16868: PUSH
16869: LD_VAR 0 2
16873: PUSH
16874: LD_INT 3
16876: PLUS
16877: PUSH
16878: LD_INT 5
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: PUSH
16886: LD_VAR 0 1
16890: PUSH
16891: LD_VAR 0 2
16895: PUSH
16896: LD_INT 4
16898: PLUS
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: ST_TO_ADDR
// end ; 1 :
16915: GO 17615
16917: LD_INT 1
16919: DOUBLE
16920: EQUAL
16921: IFTRUE 16925
16923: GO 17058
16925: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16926: LD_ADDR_VAR 0 5
16930: PUSH
16931: LD_VAR 0 1
16935: PUSH
16936: LD_VAR 0 2
16940: PUSH
16941: LD_INT 4
16943: MINUS
16944: PUSH
16945: LD_INT 3
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: LIST
16952: PUSH
16953: LD_VAR 0 1
16957: PUSH
16958: LD_INT 3
16960: MINUS
16961: PUSH
16962: LD_VAR 0 2
16966: PUSH
16967: LD_INT 3
16969: MINUS
16970: PUSH
16971: LD_INT 2
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: PUSH
16979: LD_VAR 0 1
16983: PUSH
16984: LD_INT 4
16986: MINUS
16987: PUSH
16988: LD_VAR 0 2
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: PUSH
17001: LD_VAR 0 1
17005: PUSH
17006: LD_VAR 0 2
17010: PUSH
17011: LD_INT 3
17013: PLUS
17014: PUSH
17015: LD_INT 0
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: PUSH
17023: LD_VAR 0 1
17027: PUSH
17028: LD_INT 4
17030: PLUS
17031: PUSH
17032: LD_VAR 0 2
17036: PUSH
17037: LD_INT 4
17039: PLUS
17040: PUSH
17041: LD_INT 5
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: ST_TO_ADDR
// end ; 2 :
17056: GO 17615
17058: LD_INT 2
17060: DOUBLE
17061: EQUAL
17062: IFTRUE 17066
17064: GO 17195
17066: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17067: LD_ADDR_VAR 0 5
17071: PUSH
17072: LD_VAR 0 1
17076: PUSH
17077: LD_VAR 0 2
17081: PUSH
17082: LD_INT 3
17084: MINUS
17085: PUSH
17086: LD_INT 3
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: PUSH
17094: LD_VAR 0 1
17098: PUSH
17099: LD_INT 4
17101: PLUS
17102: PUSH
17103: LD_VAR 0 2
17107: PUSH
17108: LD_INT 4
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: PUSH
17116: LD_VAR 0 1
17120: PUSH
17121: LD_VAR 0 2
17125: PUSH
17126: LD_INT 4
17128: PLUS
17129: PUSH
17130: LD_INT 0
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: LD_VAR 0 1
17142: PUSH
17143: LD_INT 3
17145: MINUS
17146: PUSH
17147: LD_VAR 0 2
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_VAR 0 1
17164: PUSH
17165: LD_INT 4
17167: MINUS
17168: PUSH
17169: LD_VAR 0 2
17173: PUSH
17174: LD_INT 4
17176: MINUS
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: ST_TO_ADDR
// end ; 3 :
17193: GO 17615
17195: LD_INT 3
17197: DOUBLE
17198: EQUAL
17199: IFTRUE 17203
17201: GO 17336
17203: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17204: LD_ADDR_VAR 0 5
17208: PUSH
17209: LD_VAR 0 1
17213: PUSH
17214: LD_INT 3
17216: PLUS
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: LD_INT 4
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: PUSH
17231: LD_VAR 0 1
17235: PUSH
17236: LD_INT 4
17238: PLUS
17239: PUSH
17240: LD_VAR 0 2
17244: PUSH
17245: LD_INT 4
17247: PLUS
17248: PUSH
17249: LD_INT 5
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: LD_VAR 0 1
17261: PUSH
17262: LD_INT 4
17264: MINUS
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: PUSH
17279: LD_VAR 0 1
17283: PUSH
17284: LD_VAR 0 2
17288: PUSH
17289: LD_INT 4
17291: MINUS
17292: PUSH
17293: LD_INT 3
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: LIST
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 3
17308: MINUS
17309: PUSH
17310: LD_VAR 0 2
17314: PUSH
17315: LD_INT 3
17317: MINUS
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
// end ; 4 :
17334: GO 17615
17336: LD_INT 4
17338: DOUBLE
17339: EQUAL
17340: IFTRUE 17344
17342: GO 17477
17344: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17345: LD_ADDR_VAR 0 5
17349: PUSH
17350: LD_VAR 0 1
17354: PUSH
17355: LD_VAR 0 2
17359: PUSH
17360: LD_INT 4
17362: PLUS
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: PUSH
17372: LD_VAR 0 1
17376: PUSH
17377: LD_INT 3
17379: PLUS
17380: PUSH
17381: LD_VAR 0 2
17385: PUSH
17386: LD_INT 3
17388: PLUS
17389: PUSH
17390: LD_INT 5
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_VAR 0 1
17402: PUSH
17403: LD_INT 3
17405: PLUS
17406: PUSH
17407: LD_VAR 0 2
17411: PUSH
17412: LD_INT 4
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: PUSH
17420: LD_VAR 0 1
17424: PUSH
17425: LD_VAR 0 2
17429: PUSH
17430: LD_INT 3
17432: MINUS
17433: PUSH
17434: LD_INT 3
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: PUSH
17442: LD_VAR 0 1
17446: PUSH
17447: LD_INT 4
17449: MINUS
17450: PUSH
17451: LD_VAR 0 2
17455: PUSH
17456: LD_INT 4
17458: MINUS
17459: PUSH
17460: LD_INT 2
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: ST_TO_ADDR
// end ; 5 :
17475: GO 17615
17477: LD_INT 5
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17614
17485: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17486: LD_ADDR_VAR 0 5
17490: PUSH
17491: LD_VAR 0 1
17495: PUSH
17496: LD_INT 4
17498: MINUS
17499: PUSH
17500: LD_VAR 0 2
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: LIST
17512: PUSH
17513: LD_VAR 0 1
17517: PUSH
17518: LD_VAR 0 2
17522: PUSH
17523: LD_INT 4
17525: MINUS
17526: PUSH
17527: LD_INT 3
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: PUSH
17535: LD_VAR 0 1
17539: PUSH
17540: LD_INT 4
17542: PLUS
17543: PUSH
17544: LD_VAR 0 2
17548: PUSH
17549: LD_INT 4
17551: PLUS
17552: PUSH
17553: LD_INT 5
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: PUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 3
17568: PLUS
17569: PUSH
17570: LD_VAR 0 2
17574: PUSH
17575: LD_INT 4
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: PUSH
17583: LD_VAR 0 1
17587: PUSH
17588: LD_VAR 0 2
17592: PUSH
17593: LD_INT 3
17595: PLUS
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: ST_TO_ADDR
// end ; end ;
17612: GO 17615
17614: POP
// result := list ;
17615: LD_ADDR_VAR 0 4
17619: PUSH
17620: LD_VAR 0 5
17624: ST_TO_ADDR
// end ;
17625: LD_VAR 0 4
17629: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17630: LD_INT 0
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
// result := false ;
17641: LD_ADDR_VAR 0 7
17645: PUSH
17646: LD_INT 0
17648: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17649: LD_VAR 0 1
17653: NOT
17654: PUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 266
17664: PUSH
17665: LD_INT 0
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: IN
17675: NOT
17676: OR
17677: PUSH
17678: LD_VAR 0 2
17682: NOT
17683: OR
17684: PUSH
17685: LD_VAR 0 5
17689: PUSH
17690: LD_INT 0
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: LD_INT 3
17701: PUSH
17702: LD_INT 4
17704: PUSH
17705: LD_INT 5
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: IN
17716: NOT
17717: OR
17718: PUSH
17719: LD_VAR 0 3
17723: PPUSH
17724: LD_VAR 0 4
17728: PPUSH
17729: CALL_OW 488
17733: NOT
17734: OR
17735: IFFALSE 17739
// exit ;
17737: GO 18420
// pom := GetBase ( bdepot ) ;
17739: LD_ADDR_VAR 0 10
17743: PUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL_OW 274
17753: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17754: LD_ADDR_VAR 0 11
17758: PUSH
17759: LD_VAR 0 2
17763: PPUSH
17764: LD_VAR 0 1
17768: PPUSH
17769: CALL_OW 248
17773: PPUSH
17774: CALL_OW 450
17778: ST_TO_ADDR
// if check_cost then
17779: LD_VAR 0 6
17783: IFFALSE 17860
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17785: LD_VAR 0 10
17789: PPUSH
17790: LD_INT 1
17792: PPUSH
17793: CALL_OW 275
17797: PUSH
17798: LD_VAR 0 11
17802: PUSH
17803: LD_INT 1
17805: ARRAY
17806: GREATEREQUAL
17807: PUSH
17808: LD_VAR 0 10
17812: PPUSH
17813: LD_INT 2
17815: PPUSH
17816: CALL_OW 275
17820: PUSH
17821: LD_VAR 0 11
17825: PUSH
17826: LD_INT 2
17828: ARRAY
17829: GREATEREQUAL
17830: AND
17831: PUSH
17832: LD_VAR 0 10
17836: PPUSH
17837: LD_INT 3
17839: PPUSH
17840: CALL_OW 275
17844: PUSH
17845: LD_VAR 0 11
17849: PUSH
17850: LD_INT 3
17852: ARRAY
17853: GREATEREQUAL
17854: AND
17855: NOT
17856: IFFALSE 17860
// exit ;
17858: GO 18420
// if GetBType ( bdepot ) = b_depot then
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 266
17869: PUSH
17870: LD_INT 0
17872: EQUAL
17873: IFFALSE 17885
// dist := 28 else
17875: LD_ADDR_VAR 0 14
17879: PUSH
17880: LD_INT 28
17882: ST_TO_ADDR
17883: GO 17893
// dist := 36 ;
17885: LD_ADDR_VAR 0 14
17889: PUSH
17890: LD_INT 36
17892: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17893: LD_VAR 0 1
17897: PPUSH
17898: LD_VAR 0 3
17902: PPUSH
17903: LD_VAR 0 4
17907: PPUSH
17908: CALL_OW 297
17912: PUSH
17913: LD_VAR 0 14
17917: GREATER
17918: IFFALSE 17922
// exit ;
17920: GO 18420
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17922: LD_ADDR_VAR 0 12
17926: PUSH
17927: LD_VAR 0 2
17931: PPUSH
17932: LD_VAR 0 3
17936: PPUSH
17937: LD_VAR 0 4
17941: PPUSH
17942: LD_VAR 0 5
17946: PPUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 248
17956: PPUSH
17957: LD_INT 0
17959: PPUSH
17960: CALL 18425 0 6
17964: ST_TO_ADDR
// if not hexes then
17965: LD_VAR 0 12
17969: NOT
17970: IFFALSE 17974
// exit ;
17972: GO 18420
// hex := GetHexInfo ( x , y ) ;
17974: LD_ADDR_VAR 0 15
17978: PUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: LD_VAR 0 4
17988: PPUSH
17989: CALL_OW 546
17993: ST_TO_ADDR
// if hex [ 1 ] then
17994: LD_VAR 0 15
17998: PUSH
17999: LD_INT 1
18001: ARRAY
18002: IFFALSE 18006
// exit ;
18004: GO 18420
// height := hex [ 2 ] ;
18006: LD_ADDR_VAR 0 13
18010: PUSH
18011: LD_VAR 0 15
18015: PUSH
18016: LD_INT 2
18018: ARRAY
18019: ST_TO_ADDR
// for i = 1 to hexes do
18020: LD_ADDR_VAR 0 8
18024: PUSH
18025: DOUBLE
18026: LD_INT 1
18028: DEC
18029: ST_TO_ADDR
18030: LD_VAR 0 12
18034: PUSH
18035: FOR_TO
18036: IFFALSE 18364
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18038: LD_VAR 0 12
18042: PUSH
18043: LD_VAR 0 8
18047: ARRAY
18048: PUSH
18049: LD_INT 1
18051: ARRAY
18052: PPUSH
18053: LD_VAR 0 12
18057: PUSH
18058: LD_VAR 0 8
18062: ARRAY
18063: PUSH
18064: LD_INT 2
18066: ARRAY
18067: PPUSH
18068: CALL_OW 488
18072: NOT
18073: IFFALSE 18077
// continue ;
18075: GO 18035
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18077: LD_ADDR_VAR 0 9
18081: PUSH
18082: LD_VAR 0 12
18086: PUSH
18087: LD_VAR 0 8
18091: ARRAY
18092: PUSH
18093: LD_INT 1
18095: ARRAY
18096: PPUSH
18097: LD_VAR 0 12
18101: PUSH
18102: LD_VAR 0 8
18106: ARRAY
18107: PUSH
18108: LD_INT 2
18110: ARRAY
18111: PPUSH
18112: CALL_OW 546
18116: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18117: LD_VAR 0 9
18121: PUSH
18122: LD_INT 1
18124: ARRAY
18125: PUSH
18126: LD_VAR 0 9
18130: PUSH
18131: LD_INT 2
18133: ARRAY
18134: PUSH
18135: LD_VAR 0 13
18139: PUSH
18140: LD_INT 2
18142: PLUS
18143: GREATER
18144: OR
18145: PUSH
18146: LD_VAR 0 9
18150: PUSH
18151: LD_INT 2
18153: ARRAY
18154: PUSH
18155: LD_VAR 0 13
18159: PUSH
18160: LD_INT 2
18162: MINUS
18163: LESS
18164: OR
18165: PUSH
18166: LD_VAR 0 9
18170: PUSH
18171: LD_INT 3
18173: ARRAY
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: LD_INT 8
18180: PUSH
18181: LD_INT 9
18183: PUSH
18184: LD_INT 10
18186: PUSH
18187: LD_INT 11
18189: PUSH
18190: LD_INT 12
18192: PUSH
18193: LD_INT 13
18195: PUSH
18196: LD_INT 16
18198: PUSH
18199: LD_INT 17
18201: PUSH
18202: LD_INT 18
18204: PUSH
18205: LD_INT 19
18207: PUSH
18208: LD_INT 20
18210: PUSH
18211: LD_INT 21
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: IN
18229: NOT
18230: OR
18231: PUSH
18232: LD_VAR 0 9
18236: PUSH
18237: LD_INT 5
18239: ARRAY
18240: NOT
18241: OR
18242: PUSH
18243: LD_VAR 0 9
18247: PUSH
18248: LD_INT 6
18250: ARRAY
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: LD_INT 7
18260: PUSH
18261: LD_INT 9
18263: PUSH
18264: LD_INT 10
18266: PUSH
18267: LD_INT 11
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: IN
18278: NOT
18279: OR
18280: PUSH
18281: LD_VAR 0 12
18285: PUSH
18286: LD_VAR 0 8
18290: ARRAY
18291: PUSH
18292: LD_INT 1
18294: ARRAY
18295: PPUSH
18296: LD_VAR 0 12
18300: PUSH
18301: LD_VAR 0 8
18305: ARRAY
18306: PUSH
18307: LD_INT 2
18309: ARRAY
18310: PPUSH
18311: CALL_OW 428
18315: PUSH
18316: LD_INT 0
18318: GREATER
18319: OR
18320: PUSH
18321: LD_VAR 0 12
18325: PUSH
18326: LD_VAR 0 8
18330: ARRAY
18331: PUSH
18332: LD_INT 1
18334: ARRAY
18335: PPUSH
18336: LD_VAR 0 12
18340: PUSH
18341: LD_VAR 0 8
18345: ARRAY
18346: PUSH
18347: LD_INT 2
18349: ARRAY
18350: PPUSH
18351: CALL_OW 351
18355: OR
18356: IFFALSE 18362
// exit ;
18358: POP
18359: POP
18360: GO 18420
// end ;
18362: GO 18035
18364: POP
18365: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18366: LD_VAR 0 2
18370: PUSH
18371: LD_INT 29
18373: PUSH
18374: LD_INT 30
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: IN
18381: PUSH
18382: LD_VAR 0 3
18386: PPUSH
18387: LD_VAR 0 4
18391: PPUSH
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 255
18401: PPUSH
18402: CALL_OW 440
18406: NOT
18407: AND
18408: IFFALSE 18412
// exit ;
18410: GO 18420
// result := true ;
18412: LD_ADDR_VAR 0 7
18416: PUSH
18417: LD_INT 1
18419: ST_TO_ADDR
// end ;
18420: LD_VAR 0 7
18424: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
18432: PPUSH
18433: PPUSH
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
// result = [ ] ;
18485: LD_ADDR_VAR 0 7
18489: PUSH
18490: EMPTY
18491: ST_TO_ADDR
// temp_list = [ ] ;
18492: LD_ADDR_VAR 0 9
18496: PUSH
18497: EMPTY
18498: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18499: LD_VAR 0 4
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: LD_INT 3
18515: PUSH
18516: LD_INT 4
18518: PUSH
18519: LD_INT 5
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: IN
18530: NOT
18531: PUSH
18532: LD_VAR 0 1
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: IN
18547: PUSH
18548: LD_VAR 0 5
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 3
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: IN
18567: NOT
18568: AND
18569: OR
18570: IFFALSE 18574
// exit ;
18572: GO 36959
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18574: LD_VAR 0 1
18578: PUSH
18579: LD_INT 6
18581: PUSH
18582: LD_INT 7
18584: PUSH
18585: LD_INT 8
18587: PUSH
18588: LD_INT 13
18590: PUSH
18591: LD_INT 12
18593: PUSH
18594: LD_INT 15
18596: PUSH
18597: LD_INT 11
18599: PUSH
18600: LD_INT 14
18602: PUSH
18603: LD_INT 10
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: IN
18617: IFFALSE 18627
// btype = b_lab ;
18619: LD_ADDR_VAR 0 1
18623: PUSH
18624: LD_INT 6
18626: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18627: LD_VAR 0 6
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: IN
18646: NOT
18647: PUSH
18648: LD_VAR 0 1
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: LD_INT 3
18664: PUSH
18665: LD_INT 6
18667: PUSH
18668: LD_INT 36
18670: PUSH
18671: LD_INT 4
18673: PUSH
18674: LD_INT 5
18676: PUSH
18677: LD_INT 31
18679: PUSH
18680: LD_INT 32
18682: PUSH
18683: LD_INT 33
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: IN
18699: NOT
18700: PUSH
18701: LD_VAR 0 6
18705: PUSH
18706: LD_INT 1
18708: EQUAL
18709: AND
18710: OR
18711: PUSH
18712: LD_VAR 0 1
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: LD_INT 3
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: IN
18727: NOT
18728: PUSH
18729: LD_VAR 0 6
18733: PUSH
18734: LD_INT 2
18736: EQUAL
18737: AND
18738: OR
18739: IFFALSE 18749
// mode = 0 ;
18741: LD_ADDR_VAR 0 6
18745: PUSH
18746: LD_INT 0
18748: ST_TO_ADDR
// case mode of 0 :
18749: LD_VAR 0 6
18753: PUSH
18754: LD_INT 0
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 30215
18762: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18763: LD_ADDR_VAR 0 11
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: LD_INT 1
18783: NEG
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: LD_INT 2
18848: NEG
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 1
18870: NEG
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: LD_INT 3
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 3
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: NEG
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18956: LD_ADDR_VAR 0 12
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: NEG
19091: PUSH
19092: LD_INT 1
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: NEG
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 3
19113: NEG
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 3
19124: NEG
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19152: LD_ADDR_VAR 0 13
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: LD_INT 1
19172: NEG
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: LD_INT 1
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: LD_INT 2
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: NEG
19300: PUSH
19301: LD_INT 3
19303: NEG
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 3
19311: NEG
19312: PUSH
19313: LD_INT 2
19315: NEG
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 3
19323: NEG
19324: PUSH
19325: LD_INT 3
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19351: LD_ADDR_VAR 0 14
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: LD_INT 1
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: NEG
19433: PUSH
19434: LD_INT 2
19436: NEG
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: LD_INT 2
19447: NEG
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: LD_INT 1
19458: NEG
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: LD_INT 3
19501: NEG
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: LD_INT 3
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: LD_INT 2
19523: NEG
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19547: LD_ADDR_VAR 0 15
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 3
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 3
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19740: LD_ADDR_VAR 0 16
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 1
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 2
19863: NEG
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: LD_INT 2
19879: NEG
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: LD_INT 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 3
19897: PUSH
19898: LD_INT 3
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 3
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19933: LD_ADDR_VAR 0 17
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: LD_INT 0
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: LD_INT 1
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: NEG
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 2
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: NEG
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: LD_INT 2
20136: NEG
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20163: LD_ADDR_VAR 0 18
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: NEG
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 1
20270: NEG
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: LD_INT 2
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: NEG
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: NEG
20340: PUSH
20341: LD_INT 0
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 2
20350: NEG
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 2
20362: NEG
20363: PUSH
20364: LD_INT 2
20366: NEG
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20393: LD_ADDR_VAR 0 19
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: NEG
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: NEG
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: LD_INT 2
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20623: LD_ADDR_VAR 0 20
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: NEG
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: NEG
20811: PUSH
20812: LD_INT 1
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: NEG
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20853: LD_ADDR_VAR 0 21
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: LD_INT 0
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: LD_INT 1
20873: NEG
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: NEG
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: LD_INT 2
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: LD_INT 1
20960: NEG
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: NEG
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 2
21029: NEG
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: LD_INT 1
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 2
21052: NEG
21053: PUSH
21054: LD_INT 2
21056: NEG
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21083: LD_ADDR_VAR 0 22
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: LD_INT 2
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: NEG
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21313: LD_ADDR_VAR 0 23
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 1
21371: NEG
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: NEG
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 2
21409: NEG
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: NEG
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: NEG
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 2
21524: NEG
21525: PUSH
21526: LD_INT 3
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: PUSH
21538: LD_INT 3
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21593: LD_ADDR_VAR 0 24
21597: PUSH
21598: LD_INT 0
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 0
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: NEG
21675: PUSH
21676: LD_INT 2
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: LD_INT 2
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: LD_INT 1
21700: NEG
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 2
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 0
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: NEG
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: NEG
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 2
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: LD_INT 1
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 3
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21869: LD_ADDR_VAR 0 25
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: LD_INT 0
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: LD_INT 0
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: NEG
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: LD_INT 2
21954: NEG
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: LD_INT 2
21965: NEG
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 2
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 2
22045: NEG
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 3
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 3
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22143: LD_ADDR_VAR 0 26
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 2
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 2
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: LD_INT 2
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 2
22319: NEG
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: NEG
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 2
22342: NEG
22343: PUSH
22344: LD_INT 2
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: LD_INT 3
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 2
22385: NEG
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22419: LD_ADDR_VAR 0 27
22423: PUSH
22424: LD_INT 0
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 0
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: LD_INT 2
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: LD_INT 2
22515: NEG
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: LD_INT 0
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: LD_INT 2
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: LD_INT 2
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: NEG
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: NEG
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: NEG
22619: PUSH
22620: LD_INT 2
22622: NEG
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 2
22641: NEG
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 3
22652: NEG
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 3
22664: NEG
22665: PUSH
22666: LD_INT 2
22668: NEG
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22699: LD_ADDR_VAR 0 28
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 2
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: NEG
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: NEG
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: LD_INT 3
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: NEG
22923: PUSH
22924: LD_INT 3
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: NEG
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 3
22946: NEG
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22981: LD_ADDR_VAR 0 29
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: LD_INT 1
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: LD_INT 3
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 2
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 3
23225: NEG
23226: PUSH
23227: LD_INT 2
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23260: LD_ADDR_VAR 0 30
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PUSH
23343: LD_INT 2
23345: NEG
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: NEG
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 3
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: LD_INT 2
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: LD_INT 3
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 3
23503: NEG
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23538: LD_ADDR_VAR 0 31
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 2
23703: NEG
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: NEG
23716: PUSH
23717: LD_INT 2
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: NEG
23728: PUSH
23729: LD_INT 3
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 3
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 3
23781: NEG
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23816: LD_ADDR_VAR 0 32
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: LD_INT 0
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: NEG
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: LD_INT 3
24009: NEG
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: LD_INT 3
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 3
24059: NEG
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24094: LD_ADDR_VAR 0 33
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: NEG
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 1
24167: NEG
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: LD_INT 2
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 2
24249: NEG
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: LD_INT 3
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 2
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: LD_INT 3
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 3
24338: NEG
24339: PUSH
24340: LD_INT 2
24342: NEG
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24373: LD_ADDR_VAR 0 34
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 2
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: LD_INT 3
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: LD_INT 2
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: LD_INT 3
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: NEG
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 3
24618: NEG
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24653: LD_ADDR_VAR 0 35
24657: PUSH
24658: LD_INT 0
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 2
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24765: LD_ADDR_VAR 0 36
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 0
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: PUSH
24848: LD_INT 2
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 2
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24877: LD_ADDR_VAR 0 37
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: LD_INT 0
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24989: LD_ADDR_VAR 0 38
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 2
25080: NEG
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25101: LD_ADDR_VAR 0 39
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: LD_INT 2
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25213: LD_ADDR_VAR 0 40
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25325: LD_ADDR_VAR 0 41
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 2
25503: NEG
25504: PUSH
25505: LD_INT 2
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: LD_INT 3
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 3
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 3
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 3
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 3
25568: PUSH
25569: LD_INT 3
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 3
25599: NEG
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 3
25610: NEG
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 3
25622: NEG
25623: PUSH
25624: LD_INT 2
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 3
25634: NEG
25635: PUSH
25636: LD_INT 3
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25675: LD_ADDR_VAR 0 42
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: NEG
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: LD_INT 2
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: NEG
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: LD_INT 3
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 3
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 3
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: LD_INT 3
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: LD_INT 3
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 3
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 3
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 3
25972: NEG
25973: PUSH
25974: LD_INT 2
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 3
25984: NEG
25985: PUSH
25986: LD_INT 3
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26025: LD_ADDR_VAR 0 43
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 2
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: NEG
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 3
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 3
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 2
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 3
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: LD_INT 3
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: LD_INT 3
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 3
26321: NEG
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 3
26332: NEG
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26373: LD_ADDR_VAR 0 44
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: LD_INT 2
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: NEG
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: NEG
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: LD_INT 3
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 3
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 3
26616: PUSH
26617: LD_INT 3
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: LD_INT 3
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 2
26636: NEG
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 3
26647: NEG
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 3
26658: NEG
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 3
26670: NEG
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 3
26682: NEG
26683: PUSH
26684: LD_INT 3
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26723: LD_ADDR_VAR 0 45
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: LD_INT 2
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 2
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: NEG
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 2
26901: NEG
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: NEG
26914: PUSH
26915: LD_INT 3
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: LD_INT 3
26929: NEG
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 3
26940: NEG
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: LD_INT 3
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 2
26979: PUSH
26980: LD_INT 3
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 3
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 3
27020: NEG
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 3
27032: NEG
27033: PUSH
27034: LD_INT 3
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27073: LD_ADDR_VAR 0 46
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 1
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: LD_INT 2
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 3
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 3
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 3
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 3
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 3
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 3
27369: NEG
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 3
27380: NEG
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27421: LD_ADDR_VAR 0 47
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: LD_INT 1
27540: NEG
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27572: LD_ADDR_VAR 0 48
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27719: LD_ADDR_VAR 0 49
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27863: LD_ADDR_VAR 0 50
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28007: LD_ADDR_VAR 0 51
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28154: LD_ADDR_VAR 0 52
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28305: LD_ADDR_VAR 0 53
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: LD_INT 2
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 2
28492: NEG
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 2
28504: NEG
28505: PUSH
28506: LD_INT 2
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28535: LD_ADDR_VAR 0 54
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: LD_INT 2
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 2
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28765: LD_ADDR_VAR 0 55
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: LD_INT 2
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: LD_INT 2
28861: NEG
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: LD_INT 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 2
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28995: LD_ADDR_VAR 0 56
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: NEG
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 2
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: NEG
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29225: LD_ADDR_VAR 0 57
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: LD_INT 2
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29455: LD_ADDR_VAR 0 58
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 2
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 2
29654: NEG
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29685: LD_ADDR_VAR 0 59
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29773: LD_ADDR_VAR 0 60
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29861: LD_ADDR_VAR 0 61
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: LD_INT 1
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 0
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29949: LD_ADDR_VAR 0 62
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30037: LD_ADDR_VAR 0 63
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30125: LD_ADDR_VAR 0 64
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: ST_TO_ADDR
// end ; 1 :
30213: GO 36110
30215: LD_INT 1
30217: DOUBLE
30218: EQUAL
30219: IFTRUE 30223
30221: GO 32846
30223: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30224: LD_ADDR_VAR 0 11
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: LD_INT 3
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 2
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30268: LD_ADDR_VAR 0 12
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30309: LD_ADDR_VAR 0 13
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30349: LD_ADDR_VAR 0 14
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30390: LD_ADDR_VAR 0 15
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 3
30408: NEG
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30434: LD_ADDR_VAR 0 16
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: LD_INT 3
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 3
30453: NEG
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: LD_INT 3
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30480: LD_ADDR_VAR 0 17
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: LD_INT 3
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 2
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30524: LD_ADDR_VAR 0 18
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30565: LD_ADDR_VAR 0 19
30569: PUSH
30570: LD_INT 3
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 3
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30605: LD_ADDR_VAR 0 20
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30646: LD_ADDR_VAR 0 21
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 3
30675: NEG
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30690: LD_ADDR_VAR 0 22
30694: PUSH
30695: LD_INT 2
30697: NEG
30698: PUSH
30699: LD_INT 3
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 3
30721: NEG
30722: PUSH
30723: LD_INT 3
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30736: LD_ADDR_VAR 0 23
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: LD_INT 3
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 4
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: LD_INT 3
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30780: LD_ADDR_VAR 0 24
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 4
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30821: LD_ADDR_VAR 0 25
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 4
30838: PUSH
30839: LD_INT 3
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: LD_INT 4
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30861: LD_ADDR_VAR 0 26
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: LD_INT 4
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30902: LD_ADDR_VAR 0 27
30906: PUSH
30907: LD_INT 3
30909: NEG
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 3
30920: NEG
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 4
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30946: LD_ADDR_VAR 0 28
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 3
30965: NEG
30966: PUSH
30967: LD_INT 4
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 4
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30992: LD_ADDR_VAR 0 29
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 3
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: LD_INT 2
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: LD_INT 4
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 4
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 3
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: NEG
31068: PUSH
31069: LD_INT 5
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 5
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 4
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: LD_INT 6
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: LD_INT 6
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 5
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31147: LD_ADDR_VAR 0 30
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 4
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 4
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 4
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 5
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 5
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 5
31247: PUSH
31248: LD_INT 1
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 6
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 6
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31290: LD_ADDR_VAR 0 31
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 3
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 4
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 4
31337: PUSH
31338: LD_INT 4
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: PUSH
31348: LD_INT 4
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 5
31357: PUSH
31358: LD_INT 4
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 5
31367: PUSH
31368: LD_INT 5
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 4
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 6
31387: PUSH
31388: LD_INT 5
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 6
31397: PUSH
31398: LD_INT 6
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 5
31407: PUSH
31408: LD_INT 6
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31429: LD_ADDR_VAR 0 32
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 3
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: LD_INT 4
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: LD_INT 4
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: LD_INT 3
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 5
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: LD_INT 4
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 6
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 6
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 5
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31572: LD_ADDR_VAR 0 33
31576: PUSH
31577: LD_INT 2
31579: NEG
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 4
31624: NEG
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 4
31635: NEG
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 4
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 5
31658: NEG
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 5
31669: NEG
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 5
31681: NEG
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 6
31692: NEG
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 6
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31727: LD_ADDR_VAR 0 34
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: LD_INT 2
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 3
31758: NEG
31759: PUSH
31760: LD_INT 3
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: LD_INT 4
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 4
31782: NEG
31783: PUSH
31784: LD_INT 3
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: LD_INT 4
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 4
31806: NEG
31807: PUSH
31808: LD_INT 5
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 5
31818: NEG
31819: PUSH
31820: LD_INT 4
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 5
31830: NEG
31831: PUSH
31832: LD_INT 5
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 5
31842: NEG
31843: PUSH
31844: LD_INT 6
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 6
31854: NEG
31855: PUSH
31856: LD_INT 5
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 6
31866: NEG
31867: PUSH
31868: LD_INT 6
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31890: LD_ADDR_VAR 0 41
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 2
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: LD_INT 3
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31934: LD_ADDR_VAR 0 42
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31975: LD_ADDR_VAR 0 43
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32015: LD_ADDR_VAR 0 44
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32056: LD_ADDR_VAR 0 45
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: NEG
32086: PUSH
32087: LD_INT 1
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32100: LD_ADDR_VAR 0 46
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: NEG
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32146: LD_ADDR_VAR 0 47
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: LD_INT 3
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 3
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32179: LD_ADDR_VAR 0 48
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 2
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32210: LD_ADDR_VAR 0 49
32214: PUSH
32215: LD_INT 3
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: LD_INT 2
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32239: LD_ADDR_VAR 0 50
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32268: LD_ADDR_VAR 0 51
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: NEG
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32299: LD_ADDR_VAR 0 52
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 3
32318: NEG
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32332: LD_ADDR_VAR 0 53
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 3
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32376: LD_ADDR_VAR 0 54
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 3
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 3
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32417: LD_ADDR_VAR 0 55
32421: PUSH
32422: LD_INT 3
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32457: LD_ADDR_VAR 0 56
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32498: LD_ADDR_VAR 0 57
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: NEG
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32542: LD_ADDR_VAR 0 58
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: LD_INT 3
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 3
32573: NEG
32574: PUSH
32575: LD_INT 3
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32588: LD_ADDR_VAR 0 59
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32632: LD_ADDR_VAR 0 60
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32673: LD_ADDR_VAR 0 61
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: LD_INT 2
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32713: LD_ADDR_VAR 0 62
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32754: LD_ADDR_VAR 0 63
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 2
32772: NEG
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32798: LD_ADDR_VAR 0 64
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: ST_TO_ADDR
// end ; 2 :
32844: GO 36110
32846: LD_INT 2
32848: DOUBLE
32849: EQUAL
32850: IFTRUE 32854
32852: GO 36109
32854: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32855: LD_ADDR_VAR 0 29
32859: PUSH
32860: LD_INT 4
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 4
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 5
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 4
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 3
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 5
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 3
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 3
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 4
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 4
32985: PUSH
32986: LD_INT 4
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 3
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 4
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 4
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: LD_INT 4
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: LD_INT 5
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 5
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 4
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: LD_INT 5
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 3
33138: NEG
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 3
33149: NEG
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 3
33183: NEG
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 4
33205: NEG
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 4
33217: NEG
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 2
33229: NEG
33230: PUSH
33231: LD_INT 2
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 4
33240: NEG
33241: PUSH
33242: LD_INT 4
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 4
33252: NEG
33253: PUSH
33254: LD_INT 5
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: LD_INT 4
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 3
33276: NEG
33277: PUSH
33278: LD_INT 3
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 4
33288: NEG
33289: PUSH
33290: LD_INT 3
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 5
33300: NEG
33301: PUSH
33302: LD_INT 4
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 5
33312: NEG
33313: PUSH
33314: LD_INT 5
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 3
33324: NEG
33325: PUSH
33326: LD_INT 5
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 5
33336: NEG
33337: PUSH
33338: LD_INT 3
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33393: LD_ADDR_VAR 0 30
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: LD_INT 4
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 4
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: LD_INT 4
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 4
33440: PUSH
33441: LD_INT 5
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 3
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: LD_INT 5
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: LD_INT 2
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 3
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: LD_INT 4
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 4
33583: NEG
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: NEG
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 3
33606: NEG
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 3
33617: NEG
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 5
33639: NEG
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 5
33650: NEG
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 5
33662: NEG
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 3
33685: NEG
33686: PUSH
33687: LD_INT 3
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 3
33697: NEG
33698: PUSH
33699: LD_INT 4
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: LD_INT 3
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: LD_INT 2
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 4
33745: NEG
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 4
33757: NEG
33758: PUSH
33759: LD_INT 4
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: NEG
33770: PUSH
33771: LD_INT 4
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 4
33781: NEG
33782: PUSH
33783: LD_INT 2
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 4
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 5
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: LD_INT 4
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 3
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: LD_INT 5
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 5
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33940: LD_ADDR_VAR 0 31
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 4
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 3
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 4
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 5
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: LD_INT 5
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 4
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 2
34029: NEG
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 3
34040: NEG
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: NEG
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 3
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 4
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 4
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 4
34119: NEG
34120: PUSH
34121: LD_INT 2
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 2
34131: NEG
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 4
34142: NEG
34143: PUSH
34144: LD_INT 4
34146: NEG
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 4
34154: NEG
34155: PUSH
34156: LD_INT 5
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 3
34166: NEG
34167: PUSH
34168: LD_INT 4
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: NEG
34179: PUSH
34180: LD_INT 3
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 4
34190: NEG
34191: PUSH
34192: LD_INT 3
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 5
34202: NEG
34203: PUSH
34204: LD_INT 4
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 5
34214: NEG
34215: PUSH
34216: LD_INT 5
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 3
34226: NEG
34227: PUSH
34228: LD_INT 5
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 5
34238: NEG
34239: PUSH
34240: LD_INT 3
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 3
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 4
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 3
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 2
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: LD_INT 3
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 4
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: LD_INT 4
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 4
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 4
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 5
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 5
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 4
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 5
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34490: LD_ADDR_VAR 0 32
34494: PUSH
34495: LD_INT 4
34497: NEG
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 4
34508: NEG
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 3
34520: NEG
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 3
34531: NEG
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 4
34542: NEG
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 5
34553: NEG
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 5
34564: NEG
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 5
34576: NEG
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 3
34588: NEG
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: NEG
34600: PUSH
34601: LD_INT 3
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 3
34611: NEG
34612: PUSH
34613: LD_INT 4
34615: NEG
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 2
34623: NEG
34624: PUSH
34625: LD_INT 3
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: NEG
34636: PUSH
34637: LD_INT 2
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 3
34647: NEG
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 4
34659: NEG
34660: PUSH
34661: LD_INT 3
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 4
34671: NEG
34672: PUSH
34673: LD_INT 4
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: LD_INT 4
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 4
34695: NEG
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 4
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: LD_INT 5
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: LD_INT 4
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: LD_INT 3
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 4
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 5
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: LD_INT 3
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: LD_INT 5
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 3
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 3
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 4
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 4
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 4
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 4
34902: PUSH
34903: LD_INT 4
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 4
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 5
34922: PUSH
34923: LD_INT 4
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 5
34932: PUSH
34933: LD_INT 5
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 4
34942: PUSH
34943: LD_INT 5
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 3
34952: PUSH
34953: LD_INT 4
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 3
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 5
34972: PUSH
34973: LD_INT 3
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 3
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35037: LD_ADDR_VAR 0 33
35041: PUSH
35042: LD_INT 4
35044: NEG
35045: PUSH
35046: LD_INT 4
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 4
35056: NEG
35057: PUSH
35058: LD_INT 5
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 3
35068: NEG
35069: PUSH
35070: LD_INT 4
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: NEG
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 4
35092: NEG
35093: PUSH
35094: LD_INT 3
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 5
35104: NEG
35105: PUSH
35106: LD_INT 4
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 5
35116: NEG
35117: PUSH
35118: LD_INT 5
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: LD_INT 5
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 5
35140: NEG
35141: PUSH
35142: LD_INT 3
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 3
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 4
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 4
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 2
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: NEG
35243: PUSH
35244: LD_INT 4
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 4
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 4
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 5
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 5
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 4
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 3
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 5
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: LD_INT 3
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 3
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 4
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 4
35377: PUSH
35378: LD_INT 4
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: LD_INT 4
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 4
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 2
35427: PUSH
35428: LD_INT 4
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 4
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 3
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 4
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 5
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 5
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 4
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 3
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 5
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35575: LD_ADDR_VAR 0 34
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 4
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: LD_INT 5
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: LD_INT 4
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 3
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 3
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: LD_INT 4
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 5
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: LD_INT 3
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 2
35672: NEG
35673: PUSH
35674: LD_INT 5
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 3
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 4
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 4
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 3
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 4
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 4
35777: PUSH
35778: LD_INT 4
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 4
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 5
35797: PUSH
35798: LD_INT 4
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: LD_INT 5
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 4
35817: PUSH
35818: LD_INT 5
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 3
35827: PUSH
35828: LD_INT 4
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 3
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 5
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 3
35857: PUSH
35858: LD_INT 5
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 3
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 4
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 4
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: LD_INT 4
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: NEG
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 4
35960: NEG
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 4
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 3
35983: NEG
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 3
35994: NEG
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 4
36005: NEG
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 5
36016: NEG
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 5
36027: NEG
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 5
36039: NEG
36040: PUSH
36041: LD_INT 2
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 3
36051: NEG
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: ST_TO_ADDR
// end ; end ;
36107: GO 36110
36109: POP
// case btype of b_depot , b_warehouse :
36110: LD_VAR 0 1
36114: PUSH
36115: LD_INT 0
36117: DOUBLE
36118: EQUAL
36119: IFTRUE 36129
36121: LD_INT 1
36123: DOUBLE
36124: EQUAL
36125: IFTRUE 36129
36127: GO 36330
36129: POP
// case nation of nation_american :
36130: LD_VAR 0 5
36134: PUSH
36135: LD_INT 1
36137: DOUBLE
36138: EQUAL
36139: IFTRUE 36143
36141: GO 36199
36143: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36144: LD_ADDR_VAR 0 9
36148: PUSH
36149: LD_VAR 0 11
36153: PUSH
36154: LD_VAR 0 12
36158: PUSH
36159: LD_VAR 0 13
36163: PUSH
36164: LD_VAR 0 14
36168: PUSH
36169: LD_VAR 0 15
36173: PUSH
36174: LD_VAR 0 16
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: PUSH
36187: LD_VAR 0 4
36191: PUSH
36192: LD_INT 1
36194: PLUS
36195: ARRAY
36196: ST_TO_ADDR
36197: GO 36328
36199: LD_INT 2
36201: DOUBLE
36202: EQUAL
36203: IFTRUE 36207
36205: GO 36263
36207: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36208: LD_ADDR_VAR 0 9
36212: PUSH
36213: LD_VAR 0 17
36217: PUSH
36218: LD_VAR 0 18
36222: PUSH
36223: LD_VAR 0 19
36227: PUSH
36228: LD_VAR 0 20
36232: PUSH
36233: LD_VAR 0 21
36237: PUSH
36238: LD_VAR 0 22
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: PUSH
36251: LD_VAR 0 4
36255: PUSH
36256: LD_INT 1
36258: PLUS
36259: ARRAY
36260: ST_TO_ADDR
36261: GO 36328
36263: LD_INT 3
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36327
36271: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36272: LD_ADDR_VAR 0 9
36276: PUSH
36277: LD_VAR 0 23
36281: PUSH
36282: LD_VAR 0 24
36286: PUSH
36287: LD_VAR 0 25
36291: PUSH
36292: LD_VAR 0 26
36296: PUSH
36297: LD_VAR 0 27
36301: PUSH
36302: LD_VAR 0 28
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: PUSH
36315: LD_VAR 0 4
36319: PUSH
36320: LD_INT 1
36322: PLUS
36323: ARRAY
36324: ST_TO_ADDR
36325: GO 36328
36327: POP
36328: GO 36877
36330: LD_INT 2
36332: DOUBLE
36333: EQUAL
36334: IFTRUE 36344
36336: LD_INT 3
36338: DOUBLE
36339: EQUAL
36340: IFTRUE 36344
36342: GO 36400
36344: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36345: LD_ADDR_VAR 0 9
36349: PUSH
36350: LD_VAR 0 29
36354: PUSH
36355: LD_VAR 0 30
36359: PUSH
36360: LD_VAR 0 31
36364: PUSH
36365: LD_VAR 0 32
36369: PUSH
36370: LD_VAR 0 33
36374: PUSH
36375: LD_VAR 0 34
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: PUSH
36388: LD_VAR 0 4
36392: PUSH
36393: LD_INT 1
36395: PLUS
36396: ARRAY
36397: ST_TO_ADDR
36398: GO 36877
36400: LD_INT 16
36402: DOUBLE
36403: EQUAL
36404: IFTRUE 36456
36406: LD_INT 17
36408: DOUBLE
36409: EQUAL
36410: IFTRUE 36456
36412: LD_INT 18
36414: DOUBLE
36415: EQUAL
36416: IFTRUE 36456
36418: LD_INT 19
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36456
36424: LD_INT 20
36426: DOUBLE
36427: EQUAL
36428: IFTRUE 36456
36430: LD_INT 21
36432: DOUBLE
36433: EQUAL
36434: IFTRUE 36456
36436: LD_INT 23
36438: DOUBLE
36439: EQUAL
36440: IFTRUE 36456
36442: LD_INT 24
36444: DOUBLE
36445: EQUAL
36446: IFTRUE 36456
36448: LD_INT 25
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 36512
36456: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36457: LD_ADDR_VAR 0 9
36461: PUSH
36462: LD_VAR 0 35
36466: PUSH
36467: LD_VAR 0 36
36471: PUSH
36472: LD_VAR 0 37
36476: PUSH
36477: LD_VAR 0 38
36481: PUSH
36482: LD_VAR 0 39
36486: PUSH
36487: LD_VAR 0 40
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: PUSH
36500: LD_VAR 0 4
36504: PUSH
36505: LD_INT 1
36507: PLUS
36508: ARRAY
36509: ST_TO_ADDR
36510: GO 36877
36512: LD_INT 6
36514: DOUBLE
36515: EQUAL
36516: IFTRUE 36568
36518: LD_INT 7
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36568
36524: LD_INT 8
36526: DOUBLE
36527: EQUAL
36528: IFTRUE 36568
36530: LD_INT 13
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36568
36536: LD_INT 12
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36568
36542: LD_INT 15
36544: DOUBLE
36545: EQUAL
36546: IFTRUE 36568
36548: LD_INT 11
36550: DOUBLE
36551: EQUAL
36552: IFTRUE 36568
36554: LD_INT 14
36556: DOUBLE
36557: EQUAL
36558: IFTRUE 36568
36560: LD_INT 10
36562: DOUBLE
36563: EQUAL
36564: IFTRUE 36568
36566: GO 36624
36568: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36569: LD_ADDR_VAR 0 9
36573: PUSH
36574: LD_VAR 0 41
36578: PUSH
36579: LD_VAR 0 42
36583: PUSH
36584: LD_VAR 0 43
36588: PUSH
36589: LD_VAR 0 44
36593: PUSH
36594: LD_VAR 0 45
36598: PUSH
36599: LD_VAR 0 46
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: PUSH
36612: LD_VAR 0 4
36616: PUSH
36617: LD_INT 1
36619: PLUS
36620: ARRAY
36621: ST_TO_ADDR
36622: GO 36877
36624: LD_INT 36
36626: DOUBLE
36627: EQUAL
36628: IFTRUE 36632
36630: GO 36688
36632: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36633: LD_ADDR_VAR 0 9
36637: PUSH
36638: LD_VAR 0 47
36642: PUSH
36643: LD_VAR 0 48
36647: PUSH
36648: LD_VAR 0 49
36652: PUSH
36653: LD_VAR 0 50
36657: PUSH
36658: LD_VAR 0 51
36662: PUSH
36663: LD_VAR 0 52
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: PUSH
36676: LD_VAR 0 4
36680: PUSH
36681: LD_INT 1
36683: PLUS
36684: ARRAY
36685: ST_TO_ADDR
36686: GO 36877
36688: LD_INT 4
36690: DOUBLE
36691: EQUAL
36692: IFTRUE 36714
36694: LD_INT 5
36696: DOUBLE
36697: EQUAL
36698: IFTRUE 36714
36700: LD_INT 34
36702: DOUBLE
36703: EQUAL
36704: IFTRUE 36714
36706: LD_INT 37
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36714
36712: GO 36770
36714: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36715: LD_ADDR_VAR 0 9
36719: PUSH
36720: LD_VAR 0 53
36724: PUSH
36725: LD_VAR 0 54
36729: PUSH
36730: LD_VAR 0 55
36734: PUSH
36735: LD_VAR 0 56
36739: PUSH
36740: LD_VAR 0 57
36744: PUSH
36745: LD_VAR 0 58
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: PUSH
36758: LD_VAR 0 4
36762: PUSH
36763: LD_INT 1
36765: PLUS
36766: ARRAY
36767: ST_TO_ADDR
36768: GO 36877
36770: LD_INT 31
36772: DOUBLE
36773: EQUAL
36774: IFTRUE 36820
36776: LD_INT 32
36778: DOUBLE
36779: EQUAL
36780: IFTRUE 36820
36782: LD_INT 33
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36820
36788: LD_INT 27
36790: DOUBLE
36791: EQUAL
36792: IFTRUE 36820
36794: LD_INT 26
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36820
36800: LD_INT 28
36802: DOUBLE
36803: EQUAL
36804: IFTRUE 36820
36806: LD_INT 29
36808: DOUBLE
36809: EQUAL
36810: IFTRUE 36820
36812: LD_INT 30
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36820
36818: GO 36876
36820: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36821: LD_ADDR_VAR 0 9
36825: PUSH
36826: LD_VAR 0 59
36830: PUSH
36831: LD_VAR 0 60
36835: PUSH
36836: LD_VAR 0 61
36840: PUSH
36841: LD_VAR 0 62
36845: PUSH
36846: LD_VAR 0 63
36850: PUSH
36851: LD_VAR 0 64
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: PUSH
36864: LD_VAR 0 4
36868: PUSH
36869: LD_INT 1
36871: PLUS
36872: ARRAY
36873: ST_TO_ADDR
36874: GO 36877
36876: POP
// temp_list2 = [ ] ;
36877: LD_ADDR_VAR 0 10
36881: PUSH
36882: EMPTY
36883: ST_TO_ADDR
// for i in temp_list do
36884: LD_ADDR_VAR 0 8
36888: PUSH
36889: LD_VAR 0 9
36893: PUSH
36894: FOR_IN
36895: IFFALSE 36947
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36897: LD_ADDR_VAR 0 10
36901: PUSH
36902: LD_VAR 0 10
36906: PUSH
36907: LD_VAR 0 8
36911: PUSH
36912: LD_INT 1
36914: ARRAY
36915: PUSH
36916: LD_VAR 0 2
36920: PLUS
36921: PUSH
36922: LD_VAR 0 8
36926: PUSH
36927: LD_INT 2
36929: ARRAY
36930: PUSH
36931: LD_VAR 0 3
36935: PLUS
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: EMPTY
36942: LIST
36943: ADD
36944: ST_TO_ADDR
36945: GO 36894
36947: POP
36948: POP
// result = temp_list2 ;
36949: LD_ADDR_VAR 0 7
36953: PUSH
36954: LD_VAR 0 10
36958: ST_TO_ADDR
// end ; end_of_file
36959: LD_VAR 0 7
36963: RET
// every 1 do var i ;
36964: GO 36966
36966: DISABLE
36967: LD_INT 0
36969: PPUSH
// begin Video ( true ) ;
36970: LD_INT 1
36972: PPUSH
36973: CALL 7008 0 1
// CenterOnXY ( 53 , 40 ) ;
36977: LD_INT 53
36979: PPUSH
36980: LD_INT 40
36982: PPUSH
36983: CALL_OW 84
// wait ( 0 0$5 ) ;
36987: LD_INT 175
36989: PPUSH
36990: CALL_OW 67
// if gammaCommander = 1 then
36994: LD_EXP 12
36998: PUSH
36999: LD_INT 1
37001: EQUAL
37002: IFFALSE 37016
// Say ( Donaldson , D1-Don-1 ) ;
37004: LD_EXP 3
37008: PPUSH
37009: LD_STRING D1-Don-1
37011: PPUSH
37012: CALL_OW 88
// if gammaCommander = 2 then
37016: LD_EXP 12
37020: PUSH
37021: LD_INT 2
37023: EQUAL
37024: IFFALSE 37038
// Say ( Brown , D1-Brown-1 ) ;
37026: LD_EXP 2
37030: PPUSH
37031: LD_STRING D1-Brown-1
37033: PPUSH
37034: CALL_OW 88
// if gammaCommander = 3 then
37038: LD_EXP 12
37042: PUSH
37043: LD_INT 3
37045: EQUAL
37046: IFFALSE 37060
// Say ( Houten , D1-VanH-1 ) ;
37048: LD_EXP 13
37052: PPUSH
37053: LD_STRING D1-VanH-1
37055: PPUSH
37056: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37060: LD_EXP 22
37064: PPUSH
37065: LD_STRING D1-Har-1
37067: PPUSH
37068: CALL_OW 94
// if gammaCommander = 1 then
37072: LD_EXP 12
37076: PUSH
37077: LD_INT 1
37079: EQUAL
37080: IFFALSE 37094
// Say ( Donaldson , D1-Don-2 ) ;
37082: LD_EXP 3
37086: PPUSH
37087: LD_STRING D1-Don-2
37089: PPUSH
37090: CALL_OW 88
// if gammaCommander = 2 then
37094: LD_EXP 12
37098: PUSH
37099: LD_INT 2
37101: EQUAL
37102: IFFALSE 37116
// Say ( Brown , D1-Brown-2 ) ;
37104: LD_EXP 2
37108: PPUSH
37109: LD_STRING D1-Brown-2
37111: PPUSH
37112: CALL_OW 88
// if gammaCommander = 3 then
37116: LD_EXP 12
37120: PUSH
37121: LD_INT 3
37123: EQUAL
37124: IFFALSE 37138
// Say ( Houten , D1-VanH-2 ) ;
37126: LD_EXP 13
37130: PPUSH
37131: LD_STRING D1-VanH-2
37133: PPUSH
37134: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37138: LD_EXP 22
37142: PPUSH
37143: LD_STRING D1-Har-2
37145: PPUSH
37146: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37150: LD_INT 22
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 33
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 61
37172: PUSH
37173: EMPTY
37174: LIST
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: PPUSH
37181: CALL_OW 69
37185: IFFALSE 37250
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37187: LD_ADDR_VAR 0 1
37191: PUSH
37192: LD_INT 22
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 33
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 61
37214: PUSH
37215: EMPTY
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: PPUSH
37223: CALL_OW 69
37227: PUSH
37228: FOR_IN
37229: IFFALSE 37248
// ComAgressiveMove ( i , 70 , 41 ) ;
37231: LD_VAR 0 1
37235: PPUSH
37236: LD_INT 70
37238: PPUSH
37239: LD_INT 41
37241: PPUSH
37242: CALL_OW 114
37246: GO 37228
37248: POP
37249: POP
// repeat wait ( 0 0$1 ) ;
37250: LD_INT 35
37252: PPUSH
37253: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37257: LD_ADDR_VAR 0 1
37261: PUSH
37262: LD_INT 22
37264: PUSH
37265: LD_INT 6
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: PPUSH
37275: CALL_OW 69
37279: PUSH
37280: FOR_IN
37281: IFFALSE 37300
// ComAgressiveMove ( i , 54 , 20 ) ;
37283: LD_VAR 0 1
37287: PPUSH
37288: LD_INT 54
37290: PPUSH
37291: LD_INT 20
37293: PPUSH
37294: CALL_OW 114
37298: GO 37280
37300: POP
37301: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37302: LD_ADDR_VAR 0 1
37306: PUSH
37307: LD_INT 22
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 25
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 3
37329: PUSH
37330: LD_INT 54
37332: PUSH
37333: EMPTY
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PPUSH
37345: CALL_OW 69
37349: PUSH
37350: FOR_IN
37351: IFFALSE 37385
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37353: LD_VAR 0 1
37357: PPUSH
37358: LD_INT 70
37360: PPUSH
37361: LD_INT 41
37363: PPUSH
37364: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37368: LD_VAR 0 1
37372: PPUSH
37373: LD_INT 46
37375: PPUSH
37376: LD_INT 39
37378: PPUSH
37379: CALL_OW 174
// end ;
37383: GO 37350
37385: POP
37386: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37387: LD_ADDR_VAR 0 1
37391: PUSH
37392: LD_INT 22
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 21
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 3
37414: PUSH
37415: LD_INT 24
37417: PUSH
37418: LD_INT 500
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: PPUSH
37434: CALL_OW 69
37438: PUSH
37439: FOR_IN
37440: IFFALSE 37473
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37442: LD_VAR 0 1
37446: PPUSH
37447: LD_EXP 37
37451: PPUSH
37452: CALL_OW 250
37456: PPUSH
37457: LD_EXP 37
37461: PPUSH
37462: CALL_OW 251
37466: PPUSH
37467: CALL_OW 111
37471: GO 37439
37473: POP
37474: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37475: LD_INT 22
37477: PUSH
37478: LD_INT 6
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 21
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 24
37497: PUSH
37498: LD_INT 250
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: PPUSH
37510: CALL_OW 69
37514: PUSH
37515: LD_INT 5
37517: LESS
37518: IFFALSE 37250
// Video ( false ) ;
37520: LD_INT 0
37522: PPUSH
37523: CALL 7008 0 1
// ChangeMissionObjectives ( M1 ) ;
37527: LD_STRING M1
37529: PPUSH
37530: CALL_OW 337
// SaveForQuickRestart ;
37534: CALL_OW 22
// startCutscene = 0 ;
37538: LD_ADDR_EXP 38
37542: PUSH
37543: LD_INT 0
37545: ST_TO_ADDR
// end ;
37546: PPOPN 1
37548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37549: LD_EXP 38
37553: IFFALSE 37644
37555: GO 37557
37557: DISABLE
37558: LD_INT 0
37560: PPUSH
37561: PPUSH
// begin enable ;
37562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37563: LD_ADDR_VAR 0 1
37567: PUSH
37568: LD_INT 22
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 21
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: LD_INT 24
37593: PUSH
37594: LD_INT 700
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: PPUSH
37610: CALL_OW 69
37614: ST_TO_ADDR
// for i in tmp do
37615: LD_ADDR_VAR 0 2
37619: PUSH
37620: LD_VAR 0 1
37624: PUSH
37625: FOR_IN
37626: IFFALSE 37642
// SetLives ( i , 700 ) ;
37628: LD_VAR 0 2
37632: PPUSH
37633: LD_INT 700
37635: PPUSH
37636: CALL_OW 234
37640: GO 37625
37642: POP
37643: POP
// end ;
37644: PPOPN 2
37646: END
// every 1 1$0 do
37647: GO 37649
37649: DISABLE
// begin PrepareSupportFromDelta ;
37650: CALL 3849 0 0
// firstAttack = 1 ;
37654: LD_ADDR_EXP 33
37658: PUSH
37659: LD_INT 1
37661: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37662: LD_EXP 8
37666: PPUSH
37667: CALL_OW 302
37671: IFFALSE 37687
// begin Say ( Gladstone , D2-Glad-1 ) ;
37673: LD_EXP 8
37677: PPUSH
37678: LD_STRING D2-Glad-1
37680: PPUSH
37681: CALL_OW 88
// end else
37685: GO 37795
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37687: LD_INT 4
37689: PPUSH
37690: LD_INT 22
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 21
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 25
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 25
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 25
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 25
37745: PUSH
37746: LD_INT 4
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: PPUSH
37765: CALL_OW 70
37769: PUSH
37770: LD_EXP 15
37774: PUSH
37775: LD_EXP 14
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: DIFF
37784: PPUSH
37785: LD_STRING D2-Sol1-1
37787: PPUSH
37788: LD_STRING D2-FSol1-1
37790: PPUSH
37791: CALL 7036 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37795: LD_EXP 3
37799: PPUSH
37800: CALL_OW 302
37804: PUSH
37805: LD_EXP 12
37809: PUSH
37810: LD_INT 1
37812: EQUAL
37813: AND
37814: IFFALSE 37828
// Say ( Donaldson , D2-Don-1 ) ;
37816: LD_EXP 3
37820: PPUSH
37821: LD_STRING D2-Don-1
37823: PPUSH
37824: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37828: LD_EXP 2
37832: PPUSH
37833: CALL_OW 302
37837: PUSH
37838: LD_EXP 12
37842: PUSH
37843: LD_INT 2
37845: EQUAL
37846: AND
37847: IFFALSE 37861
// Say ( Brown , D2-Brown-1 ) ;
37849: LD_EXP 2
37853: PPUSH
37854: LD_STRING D2-Brown-1
37856: PPUSH
37857: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37861: LD_EXP 13
37865: PPUSH
37866: CALL_OW 302
37870: PUSH
37871: LD_EXP 12
37875: PUSH
37876: LD_INT 3
37878: EQUAL
37879: AND
37880: IFFALSE 37894
// Say ( Houten , D2-VanH-1 ) ;
37882: LD_EXP 13
37886: PPUSH
37887: LD_STRING D2-VanH-1
37889: PPUSH
37890: CALL_OW 88
// end ;
37894: END
// every 0 0$1 do
37895: GO 37897
37897: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37898: LD_STRING 07_time
37900: PPUSH
37901: LD_INT 12600
37903: PPUSH
37904: CALL_OW 30
37908: PUSH
37909: LD_INT 3
37911: DIV
37912: PPUSH
37913: CALL_OW 67
// PrepareMacmillanSquad ;
37917: CALL 4511 0 0
// CenterNowOnUnits ( JMM ) ;
37921: LD_EXP 1
37925: PPUSH
37926: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37930: LD_EXP 1
37934: PPUSH
37935: LD_STRING D3-JMM-1
37937: PPUSH
37938: CALL_OW 88
// JMMArrive = 1 ;
37942: LD_ADDR_EXP 39
37946: PUSH
37947: LD_INT 1
37949: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37950: LD_EXP 3
37954: PPUSH
37955: CALL_OW 302
37959: PUSH
37960: LD_EXP 12
37964: PUSH
37965: LD_INT 1
37967: EQUAL
37968: AND
37969: IFFALSE 37985
// begin Say ( Donaldson , D3-Don-1 ) ;
37971: LD_EXP 3
37975: PPUSH
37976: LD_STRING D3-Don-1
37978: PPUSH
37979: CALL_OW 88
// end else
37983: GO 38037
// begin if gammaCommander = 1 then
37985: LD_EXP 12
37989: PUSH
37990: LD_INT 1
37992: EQUAL
37993: IFFALSE 38037
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
37995: LD_EXP 11
37999: PPUSH
38000: LD_INT 26
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PPUSH
38010: CALL_OW 72
38014: PPUSH
38015: LD_STRING D3-Sol1-1
38017: PPUSH
38018: LD_STRING D3-Sol1-1
38020: PPUSH
38021: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38025: LD_EXP 1
38029: PPUSH
38030: LD_STRING D3-JMM-2
38032: PPUSH
38033: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38037: LD_EXP 2
38041: PPUSH
38042: CALL_OW 302
38046: PUSH
38047: LD_EXP 12
38051: PUSH
38052: LD_INT 2
38054: EQUAL
38055: AND
38056: IFFALSE 38072
// begin Say ( Brown , D3-Brown-1 ) ;
38058: LD_EXP 2
38062: PPUSH
38063: LD_STRING D3-Brown-1
38065: PPUSH
38066: CALL_OW 88
// end else
38070: GO 38124
// begin if gammaCommander = 2 then
38072: LD_EXP 12
38076: PUSH
38077: LD_INT 2
38079: EQUAL
38080: IFFALSE 38124
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38082: LD_EXP 11
38086: PPUSH
38087: LD_INT 26
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PPUSH
38097: CALL_OW 72
38101: PPUSH
38102: LD_STRING D3-Sol1-1a
38104: PPUSH
38105: LD_STRING D3-Sol1-1a
38107: PPUSH
38108: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38112: LD_EXP 1
38116: PPUSH
38117: LD_STRING D3-JMM-2
38119: PPUSH
38120: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38124: LD_EXP 13
38128: PPUSH
38129: CALL_OW 302
38133: PUSH
38134: LD_EXP 12
38138: PUSH
38139: LD_INT 3
38141: EQUAL
38142: AND
38143: IFFALSE 38159
// begin Say ( Houten , D3-VanH-1 ) ;
38145: LD_EXP 13
38149: PPUSH
38150: LD_STRING D3-VanH-1
38152: PPUSH
38153: CALL_OW 88
// end else
38157: GO 38211
// begin if gammaCommander = 3 then
38159: LD_EXP 12
38163: PUSH
38164: LD_INT 3
38166: EQUAL
38167: IFFALSE 38211
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38169: LD_EXP 11
38173: PPUSH
38174: LD_INT 26
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PPUSH
38184: CALL_OW 72
38188: PPUSH
38189: LD_STRING D3-Sol1-1b
38191: PPUSH
38192: LD_STRING D3-Sol1-1b
38194: PPUSH
38195: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38199: LD_EXP 1
38203: PPUSH
38204: LD_STRING D3-JMM-2
38206: PPUSH
38207: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38211: LD_EXP 15
38215: PPUSH
38216: CALL_OW 302
38220: IFFALSE 38248
// begin Say ( Joan , D3a-Joan-1 ) ;
38222: LD_EXP 15
38226: PPUSH
38227: LD_STRING D3a-Joan-1
38229: PPUSH
38230: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38234: LD_EXP 1
38238: PPUSH
38239: LD_STRING D3a-JMM-1
38241: PPUSH
38242: CALL_OW 88
// end else
38246: GO 38590
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38248: LD_STRING 06_JoanStatus_1
38250: PPUSH
38251: LD_INT 0
38253: PPUSH
38254: CALL_OW 30
38258: PUSH
38259: LD_INT 1
38261: EQUAL
38262: IFFALSE 38590
// begin Say ( JMM , D3b-JMM-1 ) ;
38264: LD_EXP 1
38268: PPUSH
38269: LD_STRING D3b-JMM-1
38271: PPUSH
38272: CALL_OW 88
// if gammaCommander = 1 then
38276: LD_EXP 12
38280: PUSH
38281: LD_INT 1
38283: EQUAL
38284: IFFALSE 38341
// if IsOK ( Donaldson ) then
38286: LD_EXP 3
38290: PPUSH
38291: CALL_OW 302
38295: IFFALSE 38311
// Say ( Donaldson , D3b-Don-1 ) else
38297: LD_EXP 3
38301: PPUSH
38302: LD_STRING D3b-Don-1
38304: PPUSH
38305: CALL_OW 88
38309: GO 38341
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38311: LD_EXP 11
38315: PPUSH
38316: LD_INT 26
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PPUSH
38326: CALL_OW 72
38330: PPUSH
38331: LD_STRING D3b-Sol1-1
38333: PPUSH
38334: LD_STRING D3b-Sol1-1
38336: PPUSH
38337: CALL 7036 0 3
// if gammaCommander = 2 then
38341: LD_EXP 12
38345: PUSH
38346: LD_INT 2
38348: EQUAL
38349: IFFALSE 38406
// if IsOk ( Brown ) then
38351: LD_EXP 2
38355: PPUSH
38356: CALL_OW 302
38360: IFFALSE 38376
// Say ( Brown , D3b-Brown-1 ) else
38362: LD_EXP 2
38366: PPUSH
38367: LD_STRING D3b-Brown-1
38369: PPUSH
38370: CALL_OW 88
38374: GO 38406
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38376: LD_EXP 11
38380: PPUSH
38381: LD_INT 26
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PPUSH
38391: CALL_OW 72
38395: PPUSH
38396: LD_STRING D3b-Sol1-1
38398: PPUSH
38399: LD_STRING D3b-Sol1-1
38401: PPUSH
38402: CALL 7036 0 3
// if gammaCommander = 3 then
38406: LD_EXP 12
38410: PUSH
38411: LD_INT 3
38413: EQUAL
38414: IFFALSE 38471
// if IsOk ( Houten ) then
38416: LD_EXP 13
38420: PPUSH
38421: CALL_OW 302
38425: IFFALSE 38441
// Say ( Houten , D3b-VanH-1 ) else
38427: LD_EXP 13
38431: PPUSH
38432: LD_STRING D3b-VanH-1
38434: PPUSH
38435: CALL_OW 88
38439: GO 38471
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38441: LD_EXP 11
38445: PPUSH
38446: LD_INT 26
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PPUSH
38456: CALL_OW 72
38460: PPUSH
38461: LD_STRING D3b-Sol1-1
38463: PPUSH
38464: LD_STRING D3b-Sol1-1
38466: PPUSH
38467: CALL 7036 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38471: LD_EXP 11
38475: PPUSH
38476: LD_INT 26
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PPUSH
38486: CALL_OW 72
38490: PUSH
38491: LD_EXP 12
38495: PUSH
38496: LD_INT 1
38498: EQUAL
38499: PUSH
38500: LD_EXP 3
38504: PPUSH
38505: CALL_OW 302
38509: AND
38510: OR
38511: PUSH
38512: LD_EXP 12
38516: PUSH
38517: LD_INT 2
38519: EQUAL
38520: PUSH
38521: LD_EXP 2
38525: PPUSH
38526: CALL_OW 302
38530: AND
38531: OR
38532: PUSH
38533: LD_EXP 12
38537: PUSH
38538: LD_INT 3
38540: EQUAL
38541: PUSH
38542: LD_EXP 13
38546: PPUSH
38547: CALL_OW 302
38551: AND
38552: OR
38553: IFFALSE 38567
// Say ( JMM , D3b-JMM-2 ) ;
38555: LD_EXP 1
38559: PPUSH
38560: LD_STRING D3b-JMM-2
38562: PPUSH
38563: CALL_OW 88
// if IsOK ( Lisa ) then
38567: LD_EXP 6
38571: PPUSH
38572: CALL_OW 302
38576: IFFALSE 38590
// Say ( Lisa , D3b-Lisa-2 ) ;
38578: LD_EXP 6
38582: PPUSH
38583: LD_STRING D3b-Lisa-2
38585: PPUSH
38586: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38590: LD_INT 22
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 21
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 26
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 25
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 25
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 25
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 25
38655: PUSH
38656: LD_INT 4
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: PPUSH
38676: CALL_OW 69
38680: PUSH
38681: LD_EXP 1
38685: PUSH
38686: LD_EXP 2
38690: PUSH
38691: LD_EXP 3
38695: PUSH
38696: LD_EXP 4
38700: PUSH
38701: LD_EXP 5
38705: PUSH
38706: LD_EXP 6
38710: PUSH
38711: LD_EXP 7
38715: PUSH
38716: LD_EXP 8
38720: PUSH
38721: LD_EXP 9
38725: PUSH
38726: LD_EXP 10
38730: PUSH
38731: LD_EXP 15
38735: PUSH
38736: LD_EXP 14
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: DIFF
38755: PPUSH
38756: LD_STRING DCa-Sol1-1
38758: PPUSH
38759: LD_STRING DCa-Sol1-1
38761: PPUSH
38762: CALL 7036 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38766: LD_EXP 1
38770: PPUSH
38771: LD_STRING DCb-JMM-1
38773: PPUSH
38774: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38778: LD_INT 22
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 21
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 26
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: LD_INT 25
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 25
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 25
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 25
38843: PUSH
38844: LD_INT 4
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: PPUSH
38864: CALL_OW 69
38868: PUSH
38869: LD_EXP 1
38873: PUSH
38874: LD_EXP 2
38878: PUSH
38879: LD_EXP 3
38883: PUSH
38884: LD_EXP 4
38888: PUSH
38889: LD_EXP 5
38893: PUSH
38894: LD_EXP 6
38898: PUSH
38899: LD_EXP 7
38903: PUSH
38904: LD_EXP 8
38908: PUSH
38909: LD_EXP 9
38913: PUSH
38914: LD_EXP 10
38918: PUSH
38919: LD_EXP 15
38923: PUSH
38924: LD_EXP 14
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: DIFF
38943: PPUSH
38944: LD_STRING DCb-Sol1-1
38946: PPUSH
38947: LD_STRING DCb-Sol1-1
38949: PPUSH
38950: CALL 7036 0 3
// Say ( JMM , DCb-JMM-2 ) ;
38954: LD_EXP 1
38958: PPUSH
38959: LD_STRING DCb-JMM-2
38961: PPUSH
38962: CALL_OW 88
// secondAttack = 1 ;
38966: LD_ADDR_EXP 34
38970: PUSH
38971: LD_INT 1
38973: ST_TO_ADDR
// end ;
38974: END
// every 0 0$01 trigger JMMArrive = 1 do
38975: LD_EXP 39
38979: PUSH
38980: LD_INT 1
38982: EQUAL
38983: IFFALSE 39063
38985: GO 38987
38987: DISABLE
// begin wait ( 3 3$0 ) ;
38988: LD_INT 6300
38990: PPUSH
38991: CALL_OW 67
// DialogueOn ;
38995: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
38999: LD_EXP 23
39003: PPUSH
39004: LD_STRING D4-Pow-1
39006: PPUSH
39007: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39011: LD_EXP 1
39015: PPUSH
39016: LD_STRING D4-JMM-1
39018: PPUSH
39019: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39023: LD_EXP 23
39027: PPUSH
39028: LD_STRING D4-Pow-2
39030: PPUSH
39031: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39035: LD_EXP 1
39039: PPUSH
39040: LD_STRING D4-JMM-2
39042: PPUSH
39043: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39047: LD_EXP 23
39051: PPUSH
39052: LD_STRING D4-Pow-3
39054: PPUSH
39055: CALL_OW 94
// DialogueOff ;
39059: CALL_OW 7
// end ;
39063: END
// every 0 0$01 trigger JMMArrive = 1 do
39064: LD_EXP 39
39068: PUSH
39069: LD_INT 1
39071: EQUAL
39072: IFFALSE 39104
39074: GO 39076
39076: DISABLE
// begin wait ( 8 8$0 ) ;
39077: LD_INT 16800
39079: PPUSH
39080: CALL_OW 67
// DialogueOn ;
39084: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39088: LD_EXP 23
39092: PPUSH
39093: LD_STRING D4a-Pow-1
39095: PPUSH
39096: CALL_OW 94
// DialogueOff ;
39100: CALL_OW 7
// end ;
39104: END
// every 0 0$01 trigger JMMArrive = 1 do
39105: LD_EXP 39
39109: PUSH
39110: LD_INT 1
39112: EQUAL
39113: IFFALSE 39158
39115: GO 39117
39117: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39118: LD_INT 21000
39120: PUSH
39121: LD_INT 25200
39123: PUSH
39124: LD_INT 31500
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: PUSH
39132: LD_OWVAR 67
39136: ARRAY
39137: PPUSH
39138: CALL_OW 67
// PrepareSikorsky ;
39142: CALL 5592 0 0
// SikorskyArrive = 1 ;
39146: LD_ADDR_EXP 18
39150: PUSH
39151: LD_INT 1
39153: ST_TO_ADDR
// PrepareSikorskyArmy ;
39154: CALL 5732 0 0
// end ;
39158: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39159: LD_EXP 17
39163: PPUSH
39164: LD_INT 5
39166: PPUSH
39167: CALL_OW 308
39171: IFFALSE 39363
39173: GO 39175
39175: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39176: LD_EXP 17
39180: PPUSH
39181: CALL_OW 87
// DialogueOn ;
39185: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39189: LD_EXP 16
39193: PPUSH
39194: LD_STRING D5-Sik-1
39196: PPUSH
39197: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39201: LD_EXP 1
39205: PPUSH
39206: LD_STRING D5-JMM-1a
39208: PPUSH
39209: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39213: LD_EXP 16
39217: PPUSH
39218: LD_STRING D5-Sik-2
39220: PPUSH
39221: CALL_OW 88
// case query ( QSikorski ) of 1 :
39225: LD_STRING QSikorski
39227: PPUSH
39228: CALL_OW 97
39232: PUSH
39233: LD_INT 1
39235: DOUBLE
39236: EQUAL
39237: IFTRUE 39241
39239: GO 39264
39241: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39242: LD_EXP 16
39246: PPUSH
39247: LD_STRING D5a-Sik-1
39249: PPUSH
39250: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39254: LD_ADDR_EXP 19
39258: PUSH
39259: LD_INT 2100
39261: ST_TO_ADDR
// end ; 2 :
39262: GO 39351
39264: LD_INT 2
39266: DOUBLE
39267: EQUAL
39268: IFTRUE 39272
39270: GO 39295
39272: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39273: LD_EXP 16
39277: PPUSH
39278: LD_STRING D5b-Sik-1
39280: PPUSH
39281: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39285: LD_ADDR_EXP 19
39289: PUSH
39290: LD_INT 10500
39292: ST_TO_ADDR
// end ; 3 :
39293: GO 39351
39295: LD_INT 3
39297: DOUBLE
39298: EQUAL
39299: IFTRUE 39303
39301: GO 39350
39303: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39304: LD_EXP 16
39308: PPUSH
39309: LD_STRING D5c-Sik-1
39311: PPUSH
39312: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39316: LD_EXP 1
39320: PPUSH
39321: LD_STRING D5c-JMM-1
39323: PPUSH
39324: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39328: LD_EXP 16
39332: PPUSH
39333: LD_STRING D5c-Sik-2
39335: PPUSH
39336: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39340: LD_ADDR_EXP 19
39344: PUSH
39345: LD_INT 10500
39347: ST_TO_ADDR
// end ; end ;
39348: GO 39351
39350: POP
// DialogueOff ;
39351: CALL_OW 7
// timerStatus = 1 ;
39355: LD_ADDR_EXP 35
39359: PUSH
39360: LD_INT 1
39362: ST_TO_ADDR
// end ;
39363: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39364: LD_EXP 19
39368: PUSH
39369: LD_INT 35
39371: LESS
39372: IFFALSE 39420
39374: GO 39376
39376: DISABLE
// begin timerStatus = 0 ;
39377: LD_ADDR_EXP 35
39381: PUSH
39382: LD_INT 0
39384: ST_TO_ADDR
// DialogueOn ;
39385: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39389: LD_EXP 16
39393: PPUSH
39394: LD_STRING D6-Sik-1
39396: PPUSH
39397: CALL_OW 88
// DialogueOff ;
39401: CALL_OW 7
// SikorskyAI = 1 ;
39405: LD_ADDR_EXP 20
39409: PUSH
39410: LD_INT 1
39412: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39413: LD_STRING M2
39415: PPUSH
39416: CALL_OW 337
// end ;
39420: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39421: LD_EXP 17
39425: PPUSH
39426: LD_INT 18
39428: PPUSH
39429: CALL_OW 308
39433: IFFALSE 39517
39435: GO 39437
39437: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39438: LD_EXP 16
39442: PPUSH
39443: LD_STRING D7-Sik-1
39445: PPUSH
39446: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39450: LD_EXP 1
39454: PPUSH
39455: LD_INT 24
39457: PPUSH
39458: CALL_OW 308
39462: PUSH
39463: LD_EXP 1
39467: PPUSH
39468: CALL_OW 310
39472: OR
39473: IFFALSE 39497
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39475: LD_EXP 16
39479: PPUSH
39480: LD_STRING D7a-Sik-1
39482: PPUSH
39483: CALL_OW 88
// SikorskyStatus = 1 ;
39487: LD_ADDR_EXP 21
39491: PUSH
39492: LD_INT 1
39494: ST_TO_ADDR
// end else
39495: GO 39517
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39497: LD_EXP 16
39501: PPUSH
39502: LD_STRING D7b-Sik-1
39504: PPUSH
39505: CALL_OW 88
// SikorskyStatus = 2 ;
39509: LD_ADDR_EXP 21
39513: PUSH
39514: LD_INT 2
39516: ST_TO_ADDR
// end ; end ;
39517: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39518: LD_EXP 36
39522: PUSH
39523: LD_INT 1
39525: EQUAL
39526: IFFALSE 39635
39528: GO 39530
39530: DISABLE
39531: LD_INT 0
39533: PPUSH
// begin enable ;
39534: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39535: LD_ADDR_VAR 0 1
39539: PUSH
39540: LD_INT 22
39542: PUSH
39543: LD_INT 3
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PPUSH
39550: CALL_OW 69
39554: PUSH
39555: FOR_IN
39556: IFFALSE 39583
// if IsInArea ( i , RussianEscape ) then
39558: LD_VAR 0 1
39562: PPUSH
39563: LD_INT 22
39565: PPUSH
39566: CALL_OW 308
39570: IFFALSE 39581
// RemoveUnit ( i ) ;
39572: LD_VAR 0 1
39576: PPUSH
39577: CALL_OW 64
39581: GO 39555
39583: POP
39584: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39585: LD_ADDR_VAR 0 1
39589: PUSH
39590: LD_INT 22
39592: PUSH
39593: LD_INT 6
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PPUSH
39600: CALL_OW 69
39604: PUSH
39605: FOR_IN
39606: IFFALSE 39633
// if IsInArea ( i , RussianEscape ) then
39608: LD_VAR 0 1
39612: PPUSH
39613: LD_INT 22
39615: PPUSH
39616: CALL_OW 308
39620: IFFALSE 39631
// RemoveUnit ( i ) ;
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 64
39631: GO 39605
39633: POP
39634: POP
// end ; end_of_file
39635: PPOPN 1
39637: END
// on BuildingComplete ( building ) do var tmp , un ;
39638: LD_INT 0
39640: PPUSH
39641: PPUSH
// begin if GetSide ( building ) = 3 then
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 255
39651: PUSH
39652: LD_INT 3
39654: EQUAL
39655: IFFALSE 40192
// begin if GetBType ( building ) = b_depot then
39657: LD_VAR 0 1
39661: PPUSH
39662: CALL_OW 266
39666: PUSH
39667: LD_INT 0
39669: EQUAL
39670: IFFALSE 39738
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39672: LD_VAR 0 1
39676: PPUSH
39677: CALL_OW 274
39681: PPUSH
39682: LD_INT 1
39684: PPUSH
39685: LD_INT 5000
39687: PPUSH
39688: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39692: LD_VAR 0 1
39696: PPUSH
39697: CALL_OW 274
39701: PPUSH
39702: LD_INT 2
39704: PPUSH
39705: LD_INT 5000
39707: PPUSH
39708: CALL_OW 277
// SetBName ( building , konev ) ;
39712: LD_VAR 0 1
39716: PPUSH
39717: LD_STRING konev
39719: PPUSH
39720: CALL_OW 500
// ruDepot = building ;
39724: LD_ADDR_EXP 28
39728: PUSH
39729: LD_VAR 0 1
39733: ST_TO_ADDR
// BuildRussianBase ;
39734: CALL 7641 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 266
39747: PUSH
39748: LD_INT 0
39750: EQUAL
39751: PUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 266
39761: PUSH
39762: LD_INT 2
39764: EQUAL
39765: OR
39766: PUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 266
39776: PUSH
39777: LD_INT 4
39779: EQUAL
39780: OR
39781: IFFALSE 39792
// ComUpgrade ( building ) ;
39783: LD_VAR 0 1
39787: PPUSH
39788: CALL_OW 146
// if GetBType ( building ) = b_lab then
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL_OW 266
39801: PUSH
39802: LD_INT 6
39804: EQUAL
39805: IFFALSE 39856
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39807: LD_VAR 0 1
39811: PPUSH
39812: LD_INT 10
39814: PPUSH
39815: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39819: LD_VAR 0 1
39823: PPUSH
39824: LD_INT 12
39826: PPUSH
39827: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39831: LD_INT 3
39833: PPUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: LD_INT 3
39841: PPUSH
39842: CALL 8185 0 3
// ruLab = building ;
39846: LD_ADDR_EXP 29
39850: PUSH
39851: LD_VAR 0 1
39855: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39856: LD_VAR 0 1
39860: PPUSH
39861: CALL_OW 266
39865: PUSH
39866: LD_INT 32
39868: EQUAL
39869: IFFALSE 39987
// begin uc_side = 3 ;
39871: LD_ADDR_OWVAR 20
39875: PUSH
39876: LD_INT 3
39878: ST_TO_ADDR
// uc_nation = 3 ;
39879: LD_ADDR_OWVAR 21
39883: PUSH
39884: LD_INT 3
39886: ST_TO_ADDR
// hc_gallery =  ;
39887: LD_ADDR_OWVAR 33
39891: PUSH
39892: LD_STRING 
39894: ST_TO_ADDR
// hc_name =  ;
39895: LD_ADDR_OWVAR 26
39899: PUSH
39900: LD_STRING 
39902: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39903: LD_INT 0
39905: PPUSH
39906: LD_INT 1
39908: PPUSH
39909: LD_EXP 25
39913: PPUSH
39914: LD_EXP 26
39918: PPUSH
39919: CALL_OW 12
39923: PPUSH
39924: CALL_OW 380
// un = CreateHuman ;
39928: LD_ADDR_VAR 0 3
39932: PUSH
39933: CALL_OW 44
39937: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39938: LD_VAR 0 3
39942: PPUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39952: LD_VAR 0 1
39956: PPUSH
39957: LD_INT 43
39959: PUSH
39960: LD_INT 44
39962: PUSH
39963: LD_INT 46
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: PPUSH
39974: LD_INT 3
39976: PPUSH
39977: CALL_OW 12
39981: ARRAY
39982: PPUSH
39983: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
39987: LD_VAR 0 1
39991: PPUSH
39992: CALL_OW 266
39996: PUSH
39997: LD_INT 33
39999: EQUAL
40000: IFFALSE 40037
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40002: LD_VAR 0 1
40006: PPUSH
40007: LD_INT 43
40009: PUSH
40010: LD_INT 44
40012: PUSH
40013: LD_INT 46
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PPUSH
40024: LD_INT 3
40026: PPUSH
40027: CALL_OW 12
40031: ARRAY
40032: PPUSH
40033: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 266
40046: PUSH
40047: LD_INT 32
40049: EQUAL
40050: IFFALSE 40087
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40052: LD_VAR 0 1
40056: PPUSH
40057: LD_INT 43
40059: PUSH
40060: LD_INT 44
40062: PUSH
40063: LD_INT 46
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PPUSH
40074: LD_INT 3
40076: PPUSH
40077: CALL_OW 12
40081: ARRAY
40082: PPUSH
40083: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40087: LD_VAR 0 1
40091: PPUSH
40092: CALL_OW 266
40096: PUSH
40097: LD_INT 24
40099: EQUAL
40100: IFFALSE 40110
// russianAI = 1 ;
40102: LD_ADDR_EXP 27
40106: PUSH
40107: LD_INT 1
40109: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40110: LD_EXP 31
40114: PUSH
40115: LD_INT 0
40117: GREATER
40118: IFFALSE 40192
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40120: LD_ADDR_EXP 31
40124: PUSH
40125: LD_EXP 31
40129: PPUSH
40130: LD_INT 1
40132: PPUSH
40133: CALL_OW 3
40137: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40138: LD_ADDR_EXP 31
40142: PUSH
40143: LD_EXP 31
40147: PPUSH
40148: LD_INT 1
40150: PPUSH
40151: CALL_OW 3
40155: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40156: LD_ADDR_EXP 31
40160: PUSH
40161: LD_EXP 31
40165: PPUSH
40166: LD_INT 1
40168: PPUSH
40169: CALL_OW 3
40173: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40174: LD_ADDR_EXP 31
40178: PUSH
40179: LD_EXP 31
40183: PPUSH
40184: LD_INT 1
40186: PPUSH
40187: CALL_OW 3
40191: ST_TO_ADDR
// end ; end ; end ;
40192: PPOPN 3
40194: END
// on UpgradeComplete ( building ) do var i ;
40195: LD_INT 0
40197: PPUSH
// begin if GetSide ( building ) = 3 then
40198: LD_VAR 0 1
40202: PPUSH
40203: CALL_OW 255
40207: PUSH
40208: LD_INT 3
40210: EQUAL
40211: IFFALSE 40392
// begin if GetBType ( building ) = b_factory then
40213: LD_VAR 0 1
40217: PPUSH
40218: CALL_OW 266
40222: PUSH
40223: LD_INT 3
40225: EQUAL
40226: IFFALSE 40293
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40228: LD_ADDR_VAR 0 2
40232: PUSH
40233: LD_INT 22
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 25
40245: PUSH
40246: LD_INT 3
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PPUSH
40257: CALL_OW 69
40261: PUSH
40262: FOR_IN
40263: IFFALSE 40281
// ComEnterUnit ( i , building ) ;
40265: LD_VAR 0 2
40269: PPUSH
40270: LD_VAR 0 1
40274: PPUSH
40275: CALL_OW 120
40279: GO 40262
40281: POP
40282: POP
// ruFab = building ;
40283: LD_ADDR_EXP 30
40287: PUSH
40288: LD_VAR 0 1
40292: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40293: LD_VAR 0 1
40297: PPUSH
40298: CALL_OW 266
40302: PUSH
40303: LD_INT 8
40305: EQUAL
40306: IFFALSE 40363
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40308: LD_ADDR_VAR 0 2
40312: PUSH
40313: LD_INT 22
40315: PUSH
40316: LD_INT 3
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 25
40325: PUSH
40326: LD_INT 4
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PPUSH
40337: CALL_OW 69
40341: PUSH
40342: FOR_IN
40343: IFFALSE 40361
// ComEnterUnit ( i , building ) ;
40345: LD_VAR 0 2
40349: PPUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL_OW 120
40359: GO 40342
40361: POP
40362: POP
// if GetBType ( building ) = b_warehouse then
40363: LD_VAR 0 1
40367: PPUSH
40368: CALL_OW 266
40372: PUSH
40373: LD_INT 1
40375: EQUAL
40376: IFFALSE 40392
// begin ComEnterUnit ( Borodin , building ) ;
40378: LD_EXP 24
40382: PPUSH
40383: LD_VAR 0 1
40387: PPUSH
40388: CALL_OW 120
// end ; end ; end ;
40392: PPOPN 2
40394: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40395: LD_VAR 0 1
40399: PPUSH
40400: CALL_OW 247
40404: PUSH
40405: LD_INT 2
40407: EQUAL
40408: PUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 263
40418: PUSH
40419: LD_INT 3
40421: EQUAL
40422: AND
40423: PUSH
40424: LD_EXP 41
40428: PUSH
40429: LD_INT 0
40431: EQUAL
40432: AND
40433: IFFALSE 40551
// begin varEvent1 = 1 ;
40435: LD_ADDR_EXP 41
40439: PUSH
40440: LD_INT 1
40442: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40443: LD_VAR 0 1
40447: PPUSH
40448: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40452: LD_INT 22
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 21
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 25
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 25
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 25
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 25
40507: PUSH
40508: LD_INT 4
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: PPUSH
40527: CALL_OW 69
40531: PUSH
40532: LD_EXP 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: DIFF
40540: PPUSH
40541: LD_STRING DC-Sol1-1
40543: PPUSH
40544: LD_STRING DC-FSol1-1
40546: PPUSH
40547: CALL 7036 0 3
// end ; end ;
40551: PPOPN 1
40553: END
// on UnitDestroyed ( unit ) do var i ;
40554: LD_INT 0
40556: PPUSH
// begin if GetSide ( unit ) = 3 then
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 255
40566: PUSH
40567: LD_INT 3
40569: EQUAL
40570: IFFALSE 41340
// begin if GetType ( unit ) = unit_building then
40572: LD_VAR 0 1
40576: PPUSH
40577: CALL_OW 247
40581: PUSH
40582: LD_INT 3
40584: EQUAL
40585: IFFALSE 41277
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40587: LD_VAR 0 1
40591: PPUSH
40592: CALL_OW 266
40596: PUSH
40597: LD_INT 31
40599: EQUAL
40600: PUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 266
40610: PUSH
40611: LD_INT 32
40613: EQUAL
40614: OR
40615: PUSH
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 266
40625: PUSH
40626: LD_INT 36
40628: EQUAL
40629: OR
40630: PUSH
40631: LD_VAR 0 1
40635: PPUSH
40636: CALL_OW 266
40640: PUSH
40641: LD_INT 0
40643: EQUAL
40644: OR
40645: PUSH
40646: LD_VAR 0 1
40650: PPUSH
40651: CALL_OW 266
40655: PUSH
40656: LD_INT 24
40658: EQUAL
40659: OR
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: CALL_OW 266
40670: PUSH
40671: LD_INT 17
40673: EQUAL
40674: OR
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 266
40685: PUSH
40686: LD_INT 25
40688: EQUAL
40689: OR
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 266
40700: PUSH
40701: LD_INT 19
40703: EQUAL
40704: OR
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 266
40715: PUSH
40716: LD_INT 20
40718: EQUAL
40719: OR
40720: PUSH
40721: LD_VAR 0 1
40725: PPUSH
40726: CALL_OW 266
40730: PUSH
40731: LD_INT 18
40733: EQUAL
40734: OR
40735: PUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: CALL_OW 266
40745: PUSH
40746: LD_INT 21
40748: EQUAL
40749: OR
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: CALL_OW 266
40760: PUSH
40761: LD_INT 23
40763: EQUAL
40764: OR
40765: PUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: CALL_OW 266
40775: PUSH
40776: LD_INT 16
40778: EQUAL
40779: OR
40780: PUSH
40781: LD_VAR 0 1
40785: PPUSH
40786: CALL_OW 266
40790: PUSH
40791: LD_INT 6
40793: EQUAL
40794: OR
40795: PUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: CALL_OW 266
40805: PUSH
40806: LD_INT 29
40808: EQUAL
40809: OR
40810: PUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: CALL_OW 266
40820: PUSH
40821: LD_INT 26
40823: EQUAL
40824: OR
40825: PUSH
40826: LD_VAR 0 1
40830: PPUSH
40831: CALL_OW 266
40835: PUSH
40836: LD_INT 30
40838: EQUAL
40839: OR
40840: PUSH
40841: LD_VAR 0 1
40845: PPUSH
40846: CALL_OW 266
40850: PUSH
40851: LD_INT 28
40853: EQUAL
40854: OR
40855: PUSH
40856: LD_VAR 0 1
40860: PPUSH
40861: CALL_OW 266
40865: PUSH
40866: LD_INT 27
40868: EQUAL
40869: OR
40870: PUSH
40871: LD_VAR 0 1
40875: PPUSH
40876: CALL_OW 266
40880: PUSH
40881: LD_INT 33
40883: EQUAL
40884: OR
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 266
40895: PUSH
40896: LD_INT 2
40898: EQUAL
40899: OR
40900: PUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: CALL_OW 266
40910: PUSH
40911: LD_INT 4
40913: EQUAL
40914: OR
40915: IFFALSE 41001
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40917: LD_ADDR_EXP 31
40921: PUSH
40922: LD_EXP 31
40926: PUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 266
40936: ADD
40937: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40938: LD_ADDR_EXP 31
40942: PUSH
40943: LD_EXP 31
40947: PUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 250
40957: ADD
40958: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40959: LD_ADDR_EXP 31
40963: PUSH
40964: LD_EXP 31
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 251
40978: ADD
40979: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40980: LD_ADDR_EXP 31
40984: PUSH
40985: LD_EXP 31
40989: PUSH
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL_OW 254
40999: ADD
41000: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 266
41010: PUSH
41011: LD_INT 1
41013: EQUAL
41014: IFFALSE 41093
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41016: LD_ADDR_EXP 31
41020: PUSH
41021: LD_EXP 31
41025: PUSH
41026: LD_INT 0
41028: ADD
41029: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41030: LD_ADDR_EXP 31
41034: PUSH
41035: LD_EXP 31
41039: PUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: CALL_OW 250
41049: ADD
41050: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41051: LD_ADDR_EXP 31
41055: PUSH
41056: LD_EXP 31
41060: PUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 251
41070: ADD
41071: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41072: LD_ADDR_EXP 31
41076: PUSH
41077: LD_EXP 31
41081: PUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: CALL_OW 254
41091: ADD
41092: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 266
41102: PUSH
41103: LD_INT 3
41105: EQUAL
41106: IFFALSE 41185
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41108: LD_ADDR_EXP 31
41112: PUSH
41113: LD_EXP 31
41117: PUSH
41118: LD_INT 2
41120: ADD
41121: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41122: LD_ADDR_EXP 31
41126: PUSH
41127: LD_EXP 31
41131: PUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 250
41141: ADD
41142: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41143: LD_ADDR_EXP 31
41147: PUSH
41148: LD_EXP 31
41152: PUSH
41153: LD_VAR 0 1
41157: PPUSH
41158: CALL_OW 251
41162: ADD
41163: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41164: LD_ADDR_EXP 31
41168: PUSH
41169: LD_EXP 31
41173: PUSH
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 254
41183: ADD
41184: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41185: LD_VAR 0 1
41189: PPUSH
41190: CALL_OW 266
41194: PUSH
41195: LD_INT 5
41197: EQUAL
41198: IFFALSE 41277
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41200: LD_ADDR_EXP 31
41204: PUSH
41205: LD_EXP 31
41209: PUSH
41210: LD_INT 4
41212: ADD
41213: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41214: LD_ADDR_EXP 31
41218: PUSH
41219: LD_EXP 31
41223: PUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 250
41233: ADD
41234: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41235: LD_ADDR_EXP 31
41239: PUSH
41240: LD_EXP 31
41244: PUSH
41245: LD_VAR 0 1
41249: PPUSH
41250: CALL_OW 251
41254: ADD
41255: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41256: LD_ADDR_EXP 31
41260: PUSH
41261: LD_EXP 31
41265: PUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: CALL_OW 254
41275: ADD
41276: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL_OW 247
41286: PUSH
41287: LD_INT 1
41289: EQUAL
41290: IFFALSE 41340
// begin for i in defenders_list do
41292: LD_ADDR_VAR 0 2
41296: PUSH
41297: LD_EXP 32
41301: PUSH
41302: FOR_IN
41303: IFFALSE 41338
// if i = unit then
41305: LD_VAR 0 2
41309: PUSH
41310: LD_VAR 0 1
41314: EQUAL
41315: IFFALSE 41336
// defenders_list = defenders_list diff [ unit ] ;
41317: LD_ADDR_EXP 32
41321: PUSH
41322: LD_EXP 32
41326: PUSH
41327: LD_VAR 0 1
41331: PUSH
41332: EMPTY
41333: LIST
41334: DIFF
41335: ST_TO_ADDR
41336: GO 41302
41338: POP
41339: POP
// end ; end ; end ; end_of_file
41340: PPOPN 2
41342: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41343: GO 41345
41345: DISABLE
41346: LD_INT 0
41348: PPUSH
// begin enemyWayX = [ ] ;
41349: LD_ADDR_EXP 45
41353: PUSH
41354: EMPTY
41355: ST_TO_ADDR
// enemyWayY = [ ] ;
41356: LD_ADDR_EXP 46
41360: PUSH
41361: EMPTY
41362: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41363: LD_ADDR_VAR 0 1
41367: PUSH
41368: LD_INT 1
41370: PPUSH
41371: LD_INT 3
41373: PPUSH
41374: CALL_OW 12
41378: ST_TO_ADDR
// if rnd = 1 then
41379: LD_VAR 0 1
41383: PUSH
41384: LD_INT 1
41386: EQUAL
41387: IFFALSE 41427
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41389: LD_ADDR_EXP 45
41393: PUSH
41394: LD_INT 73
41396: PUSH
41397: LD_INT 46
41399: PUSH
41400: LD_INT 29
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41408: LD_ADDR_EXP 46
41412: PUSH
41413: LD_INT 71
41415: PUSH
41416: LD_INT 43
41418: PUSH
41419: LD_INT 29
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// end ; if rnd = 2 then
41427: LD_VAR 0 1
41431: PUSH
41432: LD_INT 2
41434: EQUAL
41435: IFFALSE 41459
// begin enemyWayX = [ 64 ] ;
41437: LD_ADDR_EXP 45
41441: PUSH
41442: LD_INT 64
41444: PUSH
41445: EMPTY
41446: LIST
41447: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41448: LD_ADDR_EXP 46
41452: PUSH
41453: LD_INT 43
41455: PUSH
41456: EMPTY
41457: LIST
41458: ST_TO_ADDR
// end ; if rnd = 3 then
41459: LD_VAR 0 1
41463: PUSH
41464: LD_INT 3
41466: EQUAL
41467: IFFALSE 41491
// begin enemyWayX = [ 80 ] ;
41469: LD_ADDR_EXP 45
41473: PUSH
41474: LD_INT 80
41476: PUSH
41477: EMPTY
41478: LIST
41479: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41480: LD_ADDR_EXP 46
41484: PUSH
41485: LD_INT 28
41487: PUSH
41488: EMPTY
41489: LIST
41490: ST_TO_ADDR
// end ; enable ;
41491: ENABLE
// end ;
41492: PPOPN 1
41494: END
// every 0 0$1 do
41495: GO 41497
41497: DISABLE
// begin enable ;
41498: ENABLE
// if escapeAvalaible = 0 then
41499: LD_EXP 36
41503: PUSH
41504: LD_INT 0
41506: EQUAL
41507: IFFALSE 41519
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41509: LD_INT 3
41511: PPUSH
41512: LD_INT 6
41514: PPUSH
41515: CALL 8426 0 2
// if escapeAvalaible = 0 then
41519: LD_EXP 36
41523: PUSH
41524: LD_INT 0
41526: EQUAL
41527: IFFALSE 41539
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41529: LD_INT 1
41531: PPUSH
41532: LD_INT 24
41534: PPUSH
41535: CALL 9086 0 2
// if russianAI = 1 then
41539: LD_EXP 27
41543: PUSH
41544: LD_INT 1
41546: EQUAL
41547: IFFALSE 41617
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41549: LD_INT 3
41551: PPUSH
41552: LD_INT 7
41554: PPUSH
41555: LD_INT 6
41557: PPUSH
41558: LD_EXP 29
41562: PPUSH
41563: CALL 11524 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41567: LD_INT 3
41569: PPUSH
41570: LD_EXP 28
41574: PPUSH
41575: LD_INT 6
41577: PPUSH
41578: LD_EXP 31
41582: PPUSH
41583: CALL 11118 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41587: LD_INT 3
41589: PPUSH
41590: LD_INT 26
41592: PPUSH
41593: LD_EXP 45
41597: PPUSH
41598: LD_EXP 46
41602: PPUSH
41603: CALL 9986 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41607: LD_INT 3
41609: PPUSH
41610: LD_INT 1
41612: PPUSH
41613: CALL 12068 0 2
// end ; if SikorskyArrive = 1 then
41617: LD_EXP 18
41621: PUSH
41622: LD_INT 1
41624: EQUAL
41625: IFFALSE 41643
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41627: LD_INT 3
41629: PPUSH
41630: LD_INT 10
41632: PPUSH
41633: LD_INT 53
41635: PPUSH
41636: LD_INT 59
41638: PPUSH
41639: CALL 9783 0 4
// end ;
41643: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41644: LD_EXP 27
41648: PUSH
41649: LD_INT 1
41651: EQUAL
41652: IFFALSE 41928
41654: GO 41656
41656: DISABLE
41657: LD_INT 0
41659: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41660: LD_ADDR_VAR 0 1
41664: PUSH
41665: LD_INT 22
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 21
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 30
41687: PUSH
41688: LD_INT 32
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 35
41703: PUSH
41704: LD_INT 43
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 35
41713: PUSH
41714: LD_INT 44
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 35
41723: PUSH
41724: LD_INT 46
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: PPUSH
41747: CALL_OW 69
41751: PUSH
41752: FOR_IN
41753: IFFALSE 41792
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41755: LD_VAR 0 1
41759: PPUSH
41760: LD_INT 43
41762: PUSH
41763: LD_INT 44
41765: PUSH
41766: LD_INT 46
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PPUSH
41777: LD_INT 3
41779: PPUSH
41780: CALL_OW 12
41784: ARRAY
41785: PPUSH
41786: CALL_OW 431
41790: GO 41752
41792: POP
41793: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41794: LD_ADDR_VAR 0 1
41798: PUSH
41799: LD_INT 22
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 21
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 30
41821: PUSH
41822: LD_INT 33
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 35
41837: PUSH
41838: LD_INT 43
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 35
41847: PUSH
41848: LD_INT 44
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 35
41857: PUSH
41858: LD_INT 46
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: PPUSH
41881: CALL_OW 69
41885: PUSH
41886: FOR_IN
41887: IFFALSE 41926
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41889: LD_VAR 0 1
41893: PPUSH
41894: LD_INT 43
41896: PUSH
41897: LD_INT 44
41899: PUSH
41900: LD_INT 46
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PPUSH
41911: LD_INT 3
41913: PPUSH
41914: CALL_OW 12
41918: ARRAY
41919: PPUSH
41920: CALL_OW 431
41924: GO 41886
41926: POP
41927: POP
// end ;
41928: PPOPN 1
41930: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41931: LD_EXP 24
41935: PPUSH
41936: CALL_OW 310
41940: NOT
41941: PUSH
41942: LD_EXP 28
41946: PPUSH
41947: CALL_OW 302
41951: AND
41952: PUSH
41953: LD_EXP 28
41957: PPUSH
41958: CALL_OW 255
41962: PUSH
41963: LD_INT 3
41965: EQUAL
41966: AND
41967: IFFALSE 41987
41969: GO 41971
41971: DISABLE
// begin enable ;
41972: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41973: LD_EXP 24
41977: PPUSH
41978: LD_EXP 28
41982: PPUSH
41983: CALL_OW 120
// end ;
41987: END
// every 0 0$1 trigger SikorskyAI = 1 do
41988: LD_EXP 20
41992: PUSH
41993: LD_INT 1
41995: EQUAL
41996: IFFALSE 42031
41998: GO 42000
42000: DISABLE
// begin enable ;
42001: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42002: LD_INT 4
42004: PPUSH
42005: LD_INT 10
42007: PPUSH
42008: LD_INT 93
42010: PPUSH
42011: LD_INT 93
42013: PPUSH
42014: CALL 9783 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42018: LD_INT 4
42020: PPUSH
42021: LD_INT 11
42023: PPUSH
42024: LD_INT 3
42026: PPUSH
42027: CALL 16280 0 3
// end ;
42031: END
// every 0 0$1 trigger SikorskyAI = 1 do
42032: LD_EXP 20
42036: PUSH
42037: LD_INT 1
42039: EQUAL
42040: IFFALSE 42052
42042: GO 42044
42044: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42045: LD_INT 4
42047: PPUSH
42048: CALL 10790 0 1
42052: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42053: LD_EXP 27
42057: PUSH
42058: LD_INT 1
42060: EQUAL
42061: PUSH
42062: LD_EXP 30
42066: PPUSH
42067: CALL_OW 302
42071: AND
42072: PUSH
42073: LD_EXP 30
42077: PPUSH
42078: CALL_OW 255
42082: PUSH
42083: LD_INT 3
42085: EQUAL
42086: AND
42087: PUSH
42088: LD_INT 22
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 21
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 33
42110: PUSH
42111: LD_INT 3
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: PPUSH
42123: CALL_OW 69
42127: PUSH
42128: LD_INT 0
42130: EQUAL
42131: AND
42132: IFFALSE 42366
42134: GO 42136
42136: DISABLE
// begin enable ;
42137: ENABLE
// if Difficulty = 1 then
42138: LD_OWVAR 67
42142: PUSH
42143: LD_INT 1
42145: EQUAL
42146: IFFALSE 42214
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42148: LD_INT 3
42150: PPUSH
42151: LD_EXP 30
42155: PPUSH
42156: LD_INT 5
42158: PPUSH
42159: LD_INT 8
42161: PPUSH
42162: CALL_OW 12
42166: PPUSH
42167: LD_INT 43
42169: PUSH
42170: LD_INT 43
42172: PUSH
42173: LD_INT 43
42175: PUSH
42176: LD_INT 43
42178: PUSH
42179: LD_INT 44
42181: PUSH
42182: LD_INT 44
42184: PUSH
42185: LD_INT 44
42187: PUSH
42188: LD_INT 46
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: PPUSH
42201: LD_INT 1
42203: PPUSH
42204: LD_INT 3
42206: PPUSH
42207: LD_INT 24
42209: PPUSH
42210: CALL 9629 0 7
// if Difficulty = 2 then
42214: LD_OWVAR 67
42218: PUSH
42219: LD_INT 2
42221: EQUAL
42222: IFFALSE 42290
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42224: LD_INT 3
42226: PPUSH
42227: LD_EXP 30
42231: PPUSH
42232: LD_INT 6
42234: PPUSH
42235: LD_INT 8
42237: PPUSH
42238: CALL_OW 12
42242: PPUSH
42243: LD_INT 43
42245: PUSH
42246: LD_INT 43
42248: PUSH
42249: LD_INT 44
42251: PUSH
42252: LD_INT 44
42254: PUSH
42255: LD_INT 44
42257: PUSH
42258: LD_INT 44
42260: PUSH
42261: LD_INT 46
42263: PUSH
42264: LD_INT 46
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: PPUSH
42277: LD_INT 1
42279: PPUSH
42280: LD_INT 3
42282: PPUSH
42283: LD_INT 24
42285: PPUSH
42286: CALL 9629 0 7
// if Difficulty = 3 then
42290: LD_OWVAR 67
42294: PUSH
42295: LD_INT 3
42297: EQUAL
42298: IFFALSE 42366
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42300: LD_INT 3
42302: PPUSH
42303: LD_EXP 30
42307: PPUSH
42308: LD_INT 7
42310: PPUSH
42311: LD_INT 8
42313: PPUSH
42314: CALL_OW 12
42318: PPUSH
42319: LD_INT 43
42321: PUSH
42322: LD_INT 43
42324: PUSH
42325: LD_INT 44
42327: PUSH
42328: LD_INT 44
42330: PUSH
42331: LD_INT 44
42333: PUSH
42334: LD_INT 46
42336: PUSH
42337: LD_INT 46
42339: PUSH
42340: LD_INT 46
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: PPUSH
42353: LD_INT 1
42355: PPUSH
42356: LD_INT 3
42358: PPUSH
42359: LD_INT 24
42361: PPUSH
42362: CALL 9629 0 7
// end ;
42366: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42367: LD_EXP 38
42371: PUSH
42372: LD_INT 1
42374: EQUAL
42375: IFFALSE 42457
42377: GO 42379
42379: DISABLE
42380: LD_INT 0
42382: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42383: LD_ADDR_VAR 0 1
42387: PUSH
42388: LD_INT 22
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 21
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: LD_INT 24
42413: PUSH
42414: LD_INT 650
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: PPUSH
42430: CALL_OW 69
42434: PUSH
42435: FOR_IN
42436: IFFALSE 42455
// ComMoveXY ( i , 51 , 12 ) ;
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_INT 51
42445: PPUSH
42446: LD_INT 12
42448: PPUSH
42449: CALL_OW 111
42453: GO 42435
42455: POP
42456: POP
// end ; end_of_file
42457: PPOPN 1
42459: END
// every 1 1$20 trigger firstAttack = 1 do
42460: LD_EXP 33
42464: PUSH
42465: LD_INT 1
42467: EQUAL
42468: IFFALSE 42574
42470: GO 42472
42472: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42473: LD_INT 6
42475: PPUSH
42476: LD_INT 3
42478: PPUSH
42479: LD_INT 5
42481: PPUSH
42482: LD_INT 6
42484: PPUSH
42485: CALL_OW 12
42489: PUSH
42490: LD_INT 5
42492: PPUSH
42493: LD_INT 6
42495: PPUSH
42496: CALL_OW 12
42500: PUSH
42501: LD_INT 5
42503: PPUSH
42504: LD_INT 6
42506: PPUSH
42507: CALL_OW 12
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: PUSH
42517: LD_OWVAR 67
42521: ARRAY
42522: PPUSH
42523: LD_INT 0
42525: PPUSH
42526: LD_INT 0
42528: PPUSH
42529: LD_INT 0
42531: PPUSH
42532: LD_INT 0
42534: PPUSH
42535: LD_EXP 25
42539: PPUSH
42540: LD_EXP 26
42544: PPUSH
42545: CALL_OW 12
42549: PPUSH
42550: LD_INT 16
42552: PPUSH
42553: LD_INT 7
42555: PPUSH
42556: LD_INT 1
42558: PPUSH
42559: LD_INT 1
42561: PPUSH
42562: LD_INT 3
42564: PPUSH
42565: CALL_OW 12
42569: PPUSH
42570: CALL 12298 0 12
42574: END
// every 1 1$40 trigger firstAttack = 1 do
42575: LD_EXP 33
42579: PUSH
42580: LD_INT 1
42582: EQUAL
42583: IFFALSE 42675
42585: GO 42587
42587: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42588: LD_INT 16
42590: PPUSH
42591: LD_INT 6
42593: PPUSH
42594: LD_INT 3
42596: PPUSH
42597: LD_INT 4
42599: PPUSH
42600: CALL_OW 12
42604: PUSH
42605: LD_INT 4
42607: PPUSH
42608: LD_INT 5
42610: PPUSH
42611: CALL_OW 12
42615: PUSH
42616: LD_INT 5
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: PUSH
42624: LD_OWVAR 67
42628: ARRAY
42629: PPUSH
42630: LD_EXP 25
42634: PPUSH
42635: LD_EXP 26
42639: PPUSH
42640: CALL_OW 12
42644: PPUSH
42645: LD_INT 3
42647: PPUSH
42648: LD_INT 1
42650: PPUSH
42651: LD_INT 3
42653: PPUSH
42654: LD_INT 44
42656: PUSH
42657: LD_INT 46
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PPUSH
42664: EMPTY
42665: PPUSH
42666: EMPTY
42667: PPUSH
42668: LD_INT 1
42670: PPUSH
42671: CALL 14591 0 11
42675: END
// every 5 5$40 trigger firstAttack = 1 and JMMArrive = 0 do
42676: LD_EXP 33
42680: PUSH
42681: LD_INT 1
42683: EQUAL
42684: PUSH
42685: LD_EXP 39
42689: PUSH
42690: LD_INT 0
42692: EQUAL
42693: AND
42694: IFFALSE 42800
42696: GO 42698
42698: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42699: LD_INT 6
42701: PPUSH
42702: LD_INT 3
42704: PPUSH
42705: LD_INT 5
42707: PPUSH
42708: LD_INT 6
42710: PPUSH
42711: CALL_OW 12
42715: PUSH
42716: LD_INT 5
42718: PPUSH
42719: LD_INT 6
42721: PPUSH
42722: CALL_OW 12
42726: PUSH
42727: LD_INT 5
42729: PPUSH
42730: LD_INT 6
42732: PPUSH
42733: CALL_OW 12
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: PUSH
42743: LD_OWVAR 67
42747: ARRAY
42748: PPUSH
42749: LD_INT 0
42751: PPUSH
42752: LD_INT 0
42754: PPUSH
42755: LD_INT 0
42757: PPUSH
42758: LD_INT 0
42760: PPUSH
42761: LD_EXP 25
42765: PPUSH
42766: LD_EXP 26
42770: PPUSH
42771: CALL_OW 12
42775: PPUSH
42776: LD_INT 16
42778: PPUSH
42779: LD_INT 7
42781: PPUSH
42782: LD_INT 1
42784: PPUSH
42785: LD_INT 1
42787: PPUSH
42788: LD_INT 3
42790: PPUSH
42791: CALL_OW 12
42795: PPUSH
42796: CALL 12298 0 12
42800: END
// every 5 5$50 trigger firstAttack = 1 and JMMArrive = 0 do
42801: LD_EXP 33
42805: PUSH
42806: LD_INT 1
42808: EQUAL
42809: PUSH
42810: LD_EXP 39
42814: PUSH
42815: LD_INT 0
42817: EQUAL
42818: AND
42819: IFFALSE 42915
42821: GO 42823
42823: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42824: LD_INT 16
42826: PPUSH
42827: LD_INT 6
42829: PPUSH
42830: LD_INT 5
42832: PPUSH
42833: LD_INT 6
42835: PPUSH
42836: CALL_OW 12
42840: PUSH
42841: LD_INT 6
42843: PPUSH
42844: LD_INT 7
42846: PPUSH
42847: CALL_OW 12
42851: PUSH
42852: LD_INT 7
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: PUSH
42860: LD_OWVAR 67
42864: ARRAY
42865: PPUSH
42866: LD_EXP 25
42870: PPUSH
42871: LD_EXP 26
42875: PPUSH
42876: CALL_OW 12
42880: PPUSH
42881: LD_INT 3
42883: PPUSH
42884: LD_INT 1
42886: PPUSH
42887: LD_INT 3
42889: PPUSH
42890: LD_INT 43
42892: PUSH
42893: LD_INT 44
42895: PUSH
42896: LD_INT 46
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: PPUSH
42904: EMPTY
42905: PPUSH
42906: EMPTY
42907: PPUSH
42908: LD_INT 1
42910: PPUSH
42911: CALL 14591 0 11
42915: END
// every 8 8$50 trigger firstAttack = 1 and JMMArrive = 0 do
42916: LD_EXP 33
42920: PUSH
42921: LD_INT 1
42923: EQUAL
42924: PUSH
42925: LD_EXP 39
42929: PUSH
42930: LD_INT 0
42932: EQUAL
42933: AND
42934: IFFALSE 43030
42936: GO 42938
42938: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42939: LD_INT 16
42941: PPUSH
42942: LD_INT 6
42944: PPUSH
42945: LD_INT 5
42947: PPUSH
42948: LD_INT 6
42950: PPUSH
42951: CALL_OW 12
42955: PUSH
42956: LD_INT 6
42958: PPUSH
42959: LD_INT 7
42961: PPUSH
42962: CALL_OW 12
42966: PUSH
42967: LD_INT 7
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: PUSH
42975: LD_OWVAR 67
42979: ARRAY
42980: PPUSH
42981: LD_EXP 25
42985: PPUSH
42986: LD_EXP 26
42990: PPUSH
42991: CALL_OW 12
42995: PPUSH
42996: LD_INT 3
42998: PPUSH
42999: LD_INT 1
43001: PPUSH
43002: LD_INT 3
43004: PPUSH
43005: LD_INT 43
43007: PUSH
43008: LD_INT 44
43010: PUSH
43011: LD_INT 46
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: PPUSH
43019: EMPTY
43020: PPUSH
43021: EMPTY
43022: PPUSH
43023: LD_INT 1
43025: PPUSH
43026: CALL 14591 0 11
43030: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43031: LD_EXP 33
43035: PUSH
43036: LD_INT 1
43038: EQUAL
43039: PUSH
43040: LD_EXP 39
43044: PUSH
43045: LD_INT 0
43047: EQUAL
43048: AND
43049: IFFALSE 43125
43051: GO 43053
43053: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43054: LD_INT 16
43056: PPUSH
43057: LD_INT 6
43059: PPUSH
43060: LD_INT 5
43062: PUSH
43063: LD_INT 6
43065: PUSH
43066: LD_INT 7
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: PUSH
43074: LD_OWVAR 67
43078: ARRAY
43079: PPUSH
43080: LD_EXP 25
43084: PPUSH
43085: LD_EXP 26
43089: PPUSH
43090: CALL_OW 12
43094: PPUSH
43095: LD_INT 3
43097: PPUSH
43098: LD_INT 1
43100: PPUSH
43101: LD_INT 3
43103: PPUSH
43104: LD_INT 44
43106: PUSH
43107: LD_INT 46
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PPUSH
43114: EMPTY
43115: PPUSH
43116: EMPTY
43117: PPUSH
43118: LD_INT 1
43120: PPUSH
43121: CALL 14591 0 11
43125: END
// every 1 1$00 trigger secondAttack = 1 do
43126: LD_EXP 34
43130: PUSH
43131: LD_INT 1
43133: EQUAL
43134: IFFALSE 43216
43136: GO 43138
43138: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43139: LD_INT 6
43141: PPUSH
43142: LD_INT 3
43144: PPUSH
43145: LD_INT 3
43147: PUSH
43148: LD_INT 4
43150: PUSH
43151: LD_INT 5
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: PUSH
43159: LD_OWVAR 67
43163: ARRAY
43164: PPUSH
43165: LD_INT 0
43167: PPUSH
43168: LD_INT 0
43170: PPUSH
43171: LD_INT 0
43173: PPUSH
43174: LD_INT 0
43176: PPUSH
43177: LD_EXP 25
43181: PPUSH
43182: LD_EXP 26
43186: PPUSH
43187: CALL_OW 12
43191: PPUSH
43192: LD_INT 16
43194: PPUSH
43195: LD_INT 7
43197: PPUSH
43198: LD_INT 1
43200: PPUSH
43201: LD_INT 1
43203: PPUSH
43204: LD_INT 3
43206: PPUSH
43207: CALL_OW 12
43211: PPUSH
43212: CALL 12298 0 12
43216: END
// every 1 1$00 trigger secondAttack = 1 do
43217: LD_EXP 34
43221: PUSH
43222: LD_INT 1
43224: EQUAL
43225: IFFALSE 43329
43227: GO 43229
43229: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43230: LD_INT 16
43232: PPUSH
43233: LD_INT 6
43235: PPUSH
43236: LD_INT 5
43238: PPUSH
43239: LD_INT 8
43241: PPUSH
43242: CALL_OW 12
43246: PUSH
43247: LD_INT 6
43249: PPUSH
43250: LD_INT 9
43252: PPUSH
43253: CALL_OW 12
43257: PUSH
43258: LD_INT 7
43260: PPUSH
43261: LD_INT 9
43263: PPUSH
43264: CALL_OW 12
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: PUSH
43274: LD_OWVAR 67
43278: ARRAY
43279: PPUSH
43280: LD_EXP 25
43284: PPUSH
43285: LD_EXP 26
43289: PPUSH
43290: CALL_OW 12
43294: PPUSH
43295: LD_INT 3
43297: PPUSH
43298: LD_INT 1
43300: PPUSH
43301: LD_INT 3
43303: PPUSH
43304: LD_INT 43
43306: PUSH
43307: LD_INT 44
43309: PUSH
43310: LD_INT 46
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: PPUSH
43318: EMPTY
43319: PPUSH
43320: EMPTY
43321: PPUSH
43322: LD_INT 1
43324: PPUSH
43325: CALL 14591 0 11
43329: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43330: LD_EXP 18
43334: PUSH
43335: LD_INT 0
43337: EQUAL
43338: IFFALSE 43420
43340: GO 43342
43342: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43343: LD_INT 6
43345: PPUSH
43346: LD_INT 3
43348: PPUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: PUSH
43363: LD_OWVAR 67
43367: ARRAY
43368: PPUSH
43369: LD_INT 0
43371: PPUSH
43372: LD_INT 0
43374: PPUSH
43375: LD_INT 0
43377: PPUSH
43378: LD_INT 0
43380: PPUSH
43381: LD_EXP 25
43385: PPUSH
43386: LD_EXP 26
43390: PPUSH
43391: CALL_OW 12
43395: PPUSH
43396: LD_INT 16
43398: PPUSH
43399: LD_INT 7
43401: PPUSH
43402: LD_INT 1
43404: PPUSH
43405: LD_INT 1
43407: PPUSH
43408: LD_INT 3
43410: PPUSH
43411: CALL_OW 12
43415: PPUSH
43416: CALL 12298 0 12
43420: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43421: LD_EXP 18
43425: PUSH
43426: LD_INT 0
43428: EQUAL
43429: IFFALSE 43529
43431: GO 43433
43433: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43434: LD_INT 16
43436: PPUSH
43437: LD_INT 6
43439: PPUSH
43440: LD_INT 5
43442: PPUSH
43443: LD_INT 8
43445: PPUSH
43446: CALL_OW 12
43450: PUSH
43451: LD_INT 6
43453: PPUSH
43454: LD_INT 9
43456: PPUSH
43457: CALL_OW 12
43461: PUSH
43462: LD_INT 7
43464: PPUSH
43465: LD_INT 9
43467: PPUSH
43468: CALL_OW 12
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: PUSH
43478: LD_OWVAR 67
43482: ARRAY
43483: PPUSH
43484: LD_EXP 25
43488: PPUSH
43489: LD_EXP 26
43493: PPUSH
43494: CALL_OW 12
43498: PPUSH
43499: LD_INT 3
43501: PPUSH
43502: LD_INT 1
43504: PPUSH
43505: LD_INT 3
43507: PPUSH
43508: LD_INT 44
43510: PUSH
43511: LD_INT 46
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PPUSH
43518: EMPTY
43519: PPUSH
43520: EMPTY
43521: PPUSH
43522: LD_INT 1
43524: PPUSH
43525: CALL 14591 0 11
43529: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43530: LD_EXP 18
43534: PUSH
43535: LD_INT 0
43537: EQUAL
43538: IFFALSE 43620
43540: GO 43542
43542: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43543: LD_INT 6
43545: PPUSH
43546: LD_INT 3
43548: PPUSH
43549: LD_INT 3
43551: PUSH
43552: LD_INT 4
43554: PUSH
43555: LD_INT 5
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: PUSH
43563: LD_OWVAR 67
43567: ARRAY
43568: PPUSH
43569: LD_INT 0
43571: PPUSH
43572: LD_INT 0
43574: PPUSH
43575: LD_INT 0
43577: PPUSH
43578: LD_INT 0
43580: PPUSH
43581: LD_EXP 25
43585: PPUSH
43586: LD_EXP 26
43590: PPUSH
43591: CALL_OW 12
43595: PPUSH
43596: LD_INT 16
43598: PPUSH
43599: LD_INT 7
43601: PPUSH
43602: LD_INT 1
43604: PPUSH
43605: LD_INT 1
43607: PPUSH
43608: LD_INT 3
43610: PPUSH
43611: CALL_OW 12
43615: PPUSH
43616: CALL 12298 0 12
43620: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43621: LD_EXP 18
43625: PUSH
43626: LD_INT 0
43628: EQUAL
43629: IFFALSE 43729
43631: GO 43633
43633: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43634: LD_INT 16
43636: PPUSH
43637: LD_INT 6
43639: PPUSH
43640: LD_INT 5
43642: PPUSH
43643: LD_INT 8
43645: PPUSH
43646: CALL_OW 12
43650: PUSH
43651: LD_INT 6
43653: PPUSH
43654: LD_INT 9
43656: PPUSH
43657: CALL_OW 12
43661: PUSH
43662: LD_INT 7
43664: PPUSH
43665: LD_INT 9
43667: PPUSH
43668: CALL_OW 12
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: PUSH
43678: LD_OWVAR 67
43682: ARRAY
43683: PPUSH
43684: LD_EXP 25
43688: PPUSH
43689: LD_EXP 26
43693: PPUSH
43694: CALL_OW 12
43698: PPUSH
43699: LD_INT 3
43701: PPUSH
43702: LD_INT 1
43704: PPUSH
43705: LD_INT 3
43707: PPUSH
43708: LD_INT 44
43710: PUSH
43711: LD_INT 46
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PPUSH
43718: EMPTY
43719: PPUSH
43720: EMPTY
43721: PPUSH
43722: LD_INT 1
43724: PPUSH
43725: CALL 14591 0 11
43729: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43730: LD_EXP 18
43734: PUSH
43735: LD_INT 0
43737: EQUAL
43738: IFFALSE 43820
43740: GO 43742
43742: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43743: LD_INT 6
43745: PPUSH
43746: LD_INT 3
43748: PPUSH
43749: LD_INT 3
43751: PUSH
43752: LD_INT 4
43754: PUSH
43755: LD_INT 5
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: PUSH
43763: LD_OWVAR 67
43767: ARRAY
43768: PPUSH
43769: LD_INT 0
43771: PPUSH
43772: LD_INT 0
43774: PPUSH
43775: LD_INT 0
43777: PPUSH
43778: LD_INT 0
43780: PPUSH
43781: LD_EXP 25
43785: PPUSH
43786: LD_EXP 26
43790: PPUSH
43791: CALL_OW 12
43795: PPUSH
43796: LD_INT 16
43798: PPUSH
43799: LD_INT 7
43801: PPUSH
43802: LD_INT 1
43804: PPUSH
43805: LD_INT 1
43807: PPUSH
43808: LD_INT 3
43810: PPUSH
43811: CALL_OW 12
43815: PPUSH
43816: CALL 12298 0 12
43820: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43821: LD_EXP 18
43825: PUSH
43826: LD_INT 0
43828: EQUAL
43829: IFFALSE 43929
43831: GO 43833
43833: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43834: LD_INT 16
43836: PPUSH
43837: LD_INT 6
43839: PPUSH
43840: LD_INT 5
43842: PPUSH
43843: LD_INT 8
43845: PPUSH
43846: CALL_OW 12
43850: PUSH
43851: LD_INT 6
43853: PPUSH
43854: LD_INT 9
43856: PPUSH
43857: CALL_OW 12
43861: PUSH
43862: LD_INT 7
43864: PPUSH
43865: LD_INT 9
43867: PPUSH
43868: CALL_OW 12
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: PUSH
43878: LD_OWVAR 67
43882: ARRAY
43883: PPUSH
43884: LD_EXP 25
43888: PPUSH
43889: LD_EXP 26
43893: PPUSH
43894: CALL_OW 12
43898: PPUSH
43899: LD_INT 3
43901: PPUSH
43902: LD_INT 1
43904: PPUSH
43905: LD_INT 3
43907: PPUSH
43908: LD_INT 44
43910: PUSH
43911: LD_INT 46
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PPUSH
43918: EMPTY
43919: PPUSH
43920: EMPTY
43921: PPUSH
43922: LD_INT 1
43924: PPUSH
43925: CALL 14591 0 11
43929: END
// every 0 0$1 trigger timerStatus = 1 do
43930: LD_EXP 35
43934: PUSH
43935: LD_INT 1
43937: EQUAL
43938: IFFALSE 43998
43940: GO 43942
43942: DISABLE
// begin repeat wait ( 0 0$1 ) ;
43943: LD_INT 35
43945: PPUSH
43946: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43950: LD_ADDR_OWVAR 47
43954: PUSH
43955: LD_STRING #Am08-1
43957: PUSH
43958: LD_EXP 19
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43967: LD_ADDR_EXP 19
43971: PUSH
43972: LD_EXP 19
43976: PUSH
43977: LD_INT 35
43979: MINUS
43980: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
43981: LD_EXP 19
43985: PUSH
43986: LD_INT 0
43988: EQUAL
43989: IFFALSE 43943
// display_strings := [ ] ;
43991: LD_ADDR_OWVAR 47
43995: PUSH
43996: EMPTY
43997: ST_TO_ADDR
// end ; end_of_file
43998: END
// every 1 1$0 do
43999: GO 44001
44001: DISABLE
// begin if supply <= 13 and supply > 7 then
44002: LD_EXP 40
44006: PUSH
44007: LD_INT 13
44009: LESSEQUAL
44010: PUSH
44011: LD_EXP 40
44015: PUSH
44016: LD_INT 7
44018: GREATER
44019: AND
44020: IFFALSE 44043
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44022: LD_INT 3
44024: PPUSH
44025: LD_INT 5
44027: PPUSH
44028: CALL_OW 12
44032: PPUSH
44033: LD_INT 5
44035: PPUSH
44036: LD_INT 1
44038: PPUSH
44039: CALL_OW 55
// if supply <= 7 and supply > 4 then
44043: LD_EXP 40
44047: PUSH
44048: LD_INT 7
44050: LESSEQUAL
44051: PUSH
44052: LD_EXP 40
44056: PUSH
44057: LD_INT 4
44059: GREATER
44060: AND
44061: IFFALSE 44084
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44063: LD_INT 3
44065: PPUSH
44066: LD_INT 5
44068: PPUSH
44069: CALL_OW 12
44073: PPUSH
44074: LD_INT 20
44076: PPUSH
44077: LD_INT 1
44079: PPUSH
44080: CALL_OW 55
// if supply <= 4 and supply > 0 then
44084: LD_EXP 40
44088: PUSH
44089: LD_INT 4
44091: LESSEQUAL
44092: PUSH
44093: LD_EXP 40
44097: PUSH
44098: LD_INT 0
44100: GREATER
44101: AND
44102: IFFALSE 44125
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44104: LD_INT 3
44106: PPUSH
44107: LD_INT 5
44109: PPUSH
44110: CALL_OW 12
44114: PPUSH
44115: LD_INT 21
44117: PPUSH
44118: LD_INT 1
44120: PPUSH
44121: CALL_OW 55
// if supply > 0 then
44125: LD_EXP 40
44129: PUSH
44130: LD_INT 0
44132: GREATER
44133: IFFALSE 44150
// begin supply = supply - 1 ;
44135: LD_ADDR_EXP 40
44139: PUSH
44140: LD_EXP 40
44144: PUSH
44145: LD_INT 1
44147: MINUS
44148: ST_TO_ADDR
// enable ;
44149: ENABLE
// end ; end ; end_of_file
44150: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44151: LD_EXP 39
44155: PUSH
44156: LD_INT 1
44158: EQUAL
44159: PUSH
44160: LD_EXP 1
44164: PPUSH
44165: CALL_OW 301
44169: AND
44170: IFFALSE 44182
44172: GO 44174
44174: DISABLE
// YouLost ( JMM ) ;
44175: LD_STRING JMM
44177: PPUSH
44178: CALL_OW 104
44182: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44183: LD_EXP 18
44187: PUSH
44188: LD_INT 1
44190: EQUAL
44191: PUSH
44192: LD_EXP 16
44196: PPUSH
44197: CALL_OW 301
44201: AND
44202: IFFALSE 44234
44204: GO 44206
44206: DISABLE
// begin DialogueOn ;
44207: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44211: LD_EXP 23
44215: PPUSH
44216: LD_STRING D8a-Pow-1
44218: PPUSH
44219: CALL_OW 94
// DialogueOff ;
44223: CALL_OW 7
// YouLost ( Dismissed ) ;
44227: LD_STRING Dismissed
44229: PPUSH
44230: CALL_OW 104
// end ;
44234: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44235: LD_INT 22
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 30
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 30
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PPUSH
44277: CALL_OW 69
44281: PUSH
44282: LD_INT 0
44284: EQUAL
44285: IFFALSE 44297
44287: GO 44289
44289: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44290: LD_STRING Destroyed
44292: PPUSH
44293: CALL_OW 104
44297: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44298: LD_EXP 24
44302: PPUSH
44303: CALL_OW 301
44307: PUSH
44308: LD_INT 22
44310: PUSH
44311: LD_INT 3
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 21
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PPUSH
44332: CALL_OW 69
44336: PUSH
44337: LD_INT 7
44339: PUSH
44340: LD_INT 6
44342: PUSH
44343: LD_INT 5
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: PUSH
44351: LD_OWVAR 67
44355: ARRAY
44356: LESS
44357: AND
44358: PUSH
44359: LD_EXP 1
44363: PPUSH
44364: CALL_OW 305
44368: AND
44369: IFFALSE 44817
44371: GO 44373
44373: DISABLE
44374: LD_INT 0
44376: PPUSH
44377: PPUSH
// begin russianAI = 0 ;
44378: LD_ADDR_EXP 27
44382: PUSH
44383: LD_INT 0
44385: ST_TO_ADDR
// escapeAvalaible = 1 ;
44386: LD_ADDR_EXP 36
44390: PUSH
44391: LD_INT 1
44393: ST_TO_ADDR
// InGameOn ;
44394: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44398: LD_INT 3
44400: PPUSH
44401: LD_INT 1
44403: PPUSH
44404: LD_INT 1
44406: PPUSH
44407: LD_INT 0
44409: PPUSH
44410: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44414: LD_INT 6
44416: PPUSH
44417: LD_INT 1
44419: PPUSH
44420: LD_INT 1
44422: PPUSH
44423: LD_INT 0
44425: PPUSH
44426: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44430: LD_INT 3
44432: PPUSH
44433: LD_INT 1
44435: PPUSH
44436: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44440: LD_INT 97
44442: PPUSH
44443: LD_INT 91
44445: PPUSH
44446: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44450: LD_INT 22
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 21
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PPUSH
44474: CALL_OW 69
44478: PPUSH
44479: CALL_OW 121
// wait ( 0 0$01 ) ;
44483: LD_INT 35
44485: PPUSH
44486: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44490: LD_INT 22
44492: PUSH
44493: LD_INT 3
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 21
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PPUSH
44514: CALL_OW 69
44518: PPUSH
44519: LD_INT 124
44521: PPUSH
44522: LD_INT 98
44524: PPUSH
44525: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44529: LD_INT 22
44531: PUSH
44532: LD_INT 6
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 21
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PPUSH
44553: CALL_OW 69
44557: PPUSH
44558: CALL_OW 121
// wait ( 0 0$01 ) ;
44562: LD_INT 35
44564: PPUSH
44565: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44569: LD_INT 22
44571: PUSH
44572: LD_INT 6
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 21
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PPUSH
44593: CALL_OW 69
44597: PPUSH
44598: LD_INT 124
44600: PPUSH
44601: LD_INT 98
44603: PPUSH
44604: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44608: LD_INT 22
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 21
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: LD_INT 54
44633: PUSH
44634: EMPTY
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: PPUSH
44646: CALL_OW 69
44650: PPUSH
44651: LD_INT 124
44653: PPUSH
44654: LD_INT 98
44656: PPUSH
44657: CALL_OW 114
// wait ( 0 0$4 ) ;
44661: LD_INT 140
44663: PPUSH
44664: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44668: LD_INT 124
44670: PPUSH
44671: LD_INT 98
44673: PPUSH
44674: CALL_OW 84
// if SikorskyStatus = 1 then
44678: LD_EXP 21
44682: PUSH
44683: LD_INT 1
44685: EQUAL
44686: IFFALSE 44700
// begin Say ( Sikorski , D9-Sik-1 ) ;
44688: LD_EXP 16
44692: PPUSH
44693: LD_STRING D9-Sik-1
44695: PPUSH
44696: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44700: LD_EXP 21
44704: PUSH
44705: LD_INT 2
44707: EQUAL
44708: IFFALSE 44729
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44710: LD_EXP 23
44714: PPUSH
44715: LD_STRING D8b-Pow-1
44717: PPUSH
44718: CALL_OW 94
// YouLost ( Dismissed ) ;
44722: LD_STRING Dismissed
44724: PPUSH
44725: CALL_OW 104
// end ; p := 0 0$0 ;
44729: LD_ADDR_VAR 0 2
44733: PUSH
44734: LD_INT 0
44736: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44737: LD_INT 35
44739: PPUSH
44740: CALL_OW 67
// p := p + 0 0$1 ;
44744: LD_ADDR_VAR 0 2
44748: PUSH
44749: LD_VAR 0 2
44753: PUSH
44754: LD_INT 35
44756: PLUS
44757: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44758: LD_INT 23
44760: PUSH
44761: LD_INT 3
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 21
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 24
44780: PUSH
44781: LD_INT 250
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: PPUSH
44793: CALL_OW 69
44797: PUSH
44798: LD_INT 0
44800: EQUAL
44801: PUSH
44802: LD_VAR 0 2
44806: PUSH
44807: LD_INT 245
44809: GREATEREQUAL
44810: OR
44811: IFFALSE 44737
// FinishMission ;
44813: CALL 44820 0 0
// end ;
44817: PPOPN 2
44819: END
// export function FinishMission ; var tmp ; begin
44820: LD_INT 0
44822: PPUSH
44823: PPUSH
// AddMedal ( med1 , 1 ) ;
44824: LD_STRING med1
44826: PPUSH
44827: LD_INT 1
44829: PPUSH
44830: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44834: LD_STRING med2
44836: PPUSH
44837: LD_INT 1
44839: PPUSH
44840: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44844: LD_STRING perfect
44846: PPUSH
44847: LD_INT 1
44849: PPUSH
44850: CALL_OW 101
// GiveMedals ( Main ) ;
44854: LD_STRING Main
44856: PPUSH
44857: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44861: LD_INT 22
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 23
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 21
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 25
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 25
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 25
44916: PUSH
44917: LD_INT 3
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 25
44926: PUSH
44927: LD_INT 4
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: PPUSH
44947: CALL_OW 69
44951: PPUSH
44952: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44956: LD_EXP 1
44960: PPUSH
44961: LD_EXP 42
44965: PUSH
44966: LD_STRING JMM
44968: STR
44969: PPUSH
44970: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44974: LD_EXP 2
44978: PPUSH
44979: LD_EXP 42
44983: PUSH
44984: LD_STRING Brown
44986: STR
44987: PPUSH
44988: CALL 8145 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44992: LD_EXP 3
44996: PPUSH
44997: LD_EXP 42
45001: PUSH
45002: LD_STRING Donaldson
45004: STR
45005: PPUSH
45006: CALL 8145 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45010: LD_EXP 4
45014: PPUSH
45015: LD_EXP 42
45019: PUSH
45020: LD_STRING Bobby
45022: STR
45023: PPUSH
45024: CALL 8145 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45028: LD_EXP 5
45032: PPUSH
45033: LD_EXP 42
45037: PUSH
45038: LD_STRING Cyrus
45040: STR
45041: PPUSH
45042: CALL 8145 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45046: LD_EXP 6
45050: PPUSH
45051: LD_EXP 42
45055: PUSH
45056: LD_STRING Lisa
45058: STR
45059: PPUSH
45060: CALL 8145 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45064: LD_EXP 7
45068: PPUSH
45069: LD_EXP 42
45073: PUSH
45074: LD_STRING Frank
45076: STR
45077: PPUSH
45078: CALL 8145 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45082: LD_EXP 8
45086: PPUSH
45087: LD_EXP 42
45091: PUSH
45092: LD_STRING Gladstone
45094: STR
45095: PPUSH
45096: CALL 8145 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45100: LD_EXP 9
45104: PPUSH
45105: LD_EXP 42
45109: PUSH
45110: LD_STRING Kikuchi
45112: STR
45113: PPUSH
45114: CALL 8145 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45118: LD_EXP 14
45122: PPUSH
45123: LD_EXP 42
45127: PUSH
45128: LD_STRING Denis
45130: STR
45131: PPUSH
45132: CALL 8145 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45136: LD_EXP 15
45140: PPUSH
45141: LD_EXP 42
45145: PUSH
45146: LD_STRING Joan
45148: STR
45149: PPUSH
45150: CALL 8145 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45154: LD_EXP 10
45158: PPUSH
45159: LD_EXP 42
45163: PUSH
45164: LD_STRING Khatam
45166: STR
45167: PPUSH
45168: CALL 8145 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45172: LD_EXP 13
45176: PPUSH
45177: LD_EXP 42
45181: PUSH
45182: LD_STRING Houten
45184: STR
45185: PPUSH
45186: CALL 8145 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45190: LD_INT 50
45192: PUSH
45193: EMPTY
45194: LIST
45195: PUSH
45196: LD_INT 22
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 21
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 25
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 25
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 25
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 25
45251: PUSH
45252: LD_INT 4
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: PPUSH
45272: CALL_OW 69
45276: PUSH
45277: LD_EXP 1
45281: PUSH
45282: LD_EXP 2
45286: PUSH
45287: LD_EXP 3
45291: PUSH
45292: LD_EXP 4
45296: PUSH
45297: LD_EXP 5
45301: PUSH
45302: LD_EXP 6
45306: PUSH
45307: LD_EXP 7
45311: PUSH
45312: LD_EXP 8
45316: PUSH
45317: LD_EXP 9
45321: PUSH
45322: LD_EXP 14
45326: PUSH
45327: LD_EXP 15
45331: PUSH
45332: LD_EXP 13
45336: PUSH
45337: LD_EXP 10
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: DIFF
45357: PPUSH
45358: LD_STRING 08_other_survivors
45360: PPUSH
45361: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45365: LD_INT 23
45367: PPUSH
45368: CALL 45381 0 1
// YouWin ;
45372: CALL_OW 103
// end ;
45376: LD_VAR 0 1
45380: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45381: LD_INT 0
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
// gammaBase = [ ] ;
45387: LD_ADDR_VAR 0 4
45391: PUSH
45392: EMPTY
45393: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45394: LD_ADDR_VAR 0 5
45398: PUSH
45399: LD_VAR 0 1
45403: PPUSH
45404: LD_INT 22
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 21
45416: PUSH
45417: LD_INT 3
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 50
45426: PUSH
45427: EMPTY
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: PPUSH
45435: CALL_OW 70
45439: ST_TO_ADDR
// for i in buildings do
45440: LD_ADDR_VAR 0 3
45444: PUSH
45445: LD_VAR 0 5
45449: PUSH
45450: FOR_IN
45451: IFFALSE 45888
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45453: LD_VAR 0 3
45457: PPUSH
45458: CALL_OW 266
45462: PUSH
45463: LD_INT 6
45465: PUSH
45466: LD_INT 7
45468: PUSH
45469: LD_INT 8
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: IN
45477: IFFALSE 45591
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45479: LD_ADDR_VAR 0 4
45483: PUSH
45484: LD_VAR 0 4
45488: PUSH
45489: LD_VAR 0 3
45493: PPUSH
45494: CALL_OW 266
45498: PUSH
45499: LD_VAR 0 3
45503: PPUSH
45504: CALL_OW 250
45508: PUSH
45509: LD_VAR 0 3
45513: PPUSH
45514: CALL_OW 251
45518: PUSH
45519: LD_VAR 0 3
45523: PPUSH
45524: CALL_OW 254
45528: PUSH
45529: LD_VAR 0 3
45533: PPUSH
45534: CALL_OW 267
45538: PUSH
45539: LD_VAR 0 3
45543: PPUSH
45544: CALL_OW 248
45548: PUSH
45549: LD_VAR 0 3
45553: PPUSH
45554: LD_INT 1
45556: PPUSH
45557: CALL_OW 268
45561: PUSH
45562: LD_VAR 0 3
45566: PPUSH
45567: LD_INT 2
45569: PPUSH
45570: CALL_OW 268
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: PUSH
45585: EMPTY
45586: LIST
45587: ADD
45588: ST_TO_ADDR
45589: GO 45886
// if GetBType ( i ) = b_bunker then
45591: LD_VAR 0 3
45595: PPUSH
45596: CALL_OW 266
45600: PUSH
45601: LD_INT 32
45603: EQUAL
45604: IFFALSE 45701
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45606: LD_ADDR_VAR 0 4
45610: PUSH
45611: LD_VAR 0 4
45615: PUSH
45616: LD_VAR 0 3
45620: PPUSH
45621: CALL_OW 266
45625: PUSH
45626: LD_VAR 0 3
45630: PPUSH
45631: CALL_OW 250
45635: PUSH
45636: LD_VAR 0 3
45640: PPUSH
45641: CALL_OW 251
45645: PUSH
45646: LD_VAR 0 3
45650: PPUSH
45651: CALL_OW 254
45655: PUSH
45656: LD_VAR 0 3
45660: PPUSH
45661: CALL_OW 267
45665: PUSH
45666: LD_VAR 0 3
45670: PPUSH
45671: CALL_OW 248
45675: PUSH
45676: LD_VAR 0 3
45680: PPUSH
45681: CALL_OW 269
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: ADD
45698: ST_TO_ADDR
45699: GO 45886
// if GetBType ( i ) = b_factory then
45701: LD_VAR 0 3
45705: PPUSH
45706: CALL_OW 266
45710: PUSH
45711: LD_INT 3
45713: EQUAL
45714: IFFALSE 45804
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45716: LD_ADDR_VAR 0 4
45720: PUSH
45721: LD_VAR 0 4
45725: PPUSH
45726: LD_INT 1
45728: PPUSH
45729: LD_VAR 0 3
45733: PPUSH
45734: CALL_OW 266
45738: PUSH
45739: LD_VAR 0 3
45743: PPUSH
45744: CALL_OW 250
45748: PUSH
45749: LD_VAR 0 3
45753: PPUSH
45754: CALL_OW 251
45758: PUSH
45759: LD_VAR 0 3
45763: PPUSH
45764: CALL_OW 254
45768: PUSH
45769: LD_VAR 0 3
45773: PPUSH
45774: CALL_OW 267
45778: PUSH
45779: LD_VAR 0 3
45783: PPUSH
45784: CALL_OW 248
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: PPUSH
45797: CALL_OW 2
45801: ST_TO_ADDR
45802: GO 45886
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45804: LD_ADDR_VAR 0 4
45808: PUSH
45809: LD_VAR 0 4
45813: PUSH
45814: LD_VAR 0 3
45818: PPUSH
45819: CALL_OW 266
45823: PUSH
45824: LD_VAR 0 3
45828: PPUSH
45829: CALL_OW 250
45833: PUSH
45834: LD_VAR 0 3
45838: PPUSH
45839: CALL_OW 251
45843: PUSH
45844: LD_VAR 0 3
45848: PPUSH
45849: CALL_OW 254
45853: PUSH
45854: LD_VAR 0 3
45858: PPUSH
45859: CALL_OW 267
45863: PUSH
45864: LD_VAR 0 3
45868: PPUSH
45869: CALL_OW 248
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: PUSH
45882: EMPTY
45883: LIST
45884: ADD
45885: ST_TO_ADDR
// end ;
45886: GO 45450
45888: POP
45889: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45890: LD_VAR 0 4
45894: PPUSH
45895: LD_STRING 08_GammaBase
45897: PPUSH
45898: CALL_OW 39
// end ;
45902: LD_VAR 0 2
45906: RET
