// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 43
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 44
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 45
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7518 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6289 0 0
// PrepareRussians ;
 229: CALL 6607 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8928 0 6
// PrepareCutsceneAttack ;
 312: CALL 6341 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 45
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 7025 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 7025 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 7025 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 7025 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 7025 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 7025 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 7025 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 7025 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 7025 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 7025 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 7025 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 7025 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 7025 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 7025 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 7025 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 7025 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 52
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// bc_kind1 := - 1 ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 1
2639: NEG
2640: ST_TO_ADDR
// bc_kind2 := - 1 ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 1
2648: NEG
2649: ST_TO_ADDR
// for i in blist do
2650: LD_ADDR_VAR 0 3
2654: PUSH
2655: LD_VAR 0 2
2659: PUSH
2660: FOR_IN
2661: IFFALSE 2933
// begin bc_type := i [ 1 ] ;
2663: LD_ADDR_OWVAR 42
2667: PUSH
2668: LD_VAR 0 3
2672: PUSH
2673: LD_INT 1
2675: ARRAY
2676: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2677: LD_ADDR_OWVAR 43
2681: PUSH
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 5
2689: ARRAY
2690: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2691: LD_OWVAR 42
2695: PUSH
2696: LD_INT 6
2698: PUSH
2699: LD_INT 7
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: IN
2706: IFFALSE 2768
// begin bc_type := b_lab_half ;
2708: LD_ADDR_OWVAR 42
2712: PUSH
2713: LD_INT 7
2715: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2716: LD_STRING 06_remoteVehs_1
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 30
2726: IFFALSE 2768
// begin if i [ 7 ] > 9 then
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 7
2735: ARRAY
2736: PUSH
2737: LD_INT 9
2739: GREATER
2740: IFFALSE 2760
// begin bc_type := b_lab_full ;
2742: LD_ADDR_OWVAR 42
2746: PUSH
2747: LD_INT 8
2749: ST_TO_ADDR
// bc_kind2 := 15 ;
2750: LD_ADDR_OWVAR 45
2754: PUSH
2755: LD_INT 15
2757: ST_TO_ADDR
// end else
2758: GO 2768
// bc_kind1 := 15 ;
2760: LD_ADDR_OWVAR 44
2764: PUSH
2765: LD_INT 15
2767: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2768: LD_OWVAR 42
2772: PUSH
2773: LD_INT 2
2775: EQUAL
2776: IFFALSE 2786
// bc_type := b_factory ;
2778: LD_ADDR_OWVAR 42
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// if bc_type = b_depot then
2786: LD_OWVAR 42
2790: PUSH
2791: LD_INT 0
2793: EQUAL
2794: IFFALSE 2843
// begin bc_type := b_warehouse ;
2796: LD_ADDR_OWVAR 42
2800: PUSH
2801: LD_INT 1
2803: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2804: LD_ADDR_EXP 37
2808: PUSH
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 2
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 3
2825: ARRAY
2826: PPUSH
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 4
2834: ARRAY
2835: PPUSH
2836: CALL_OW 47
2840: ST_TO_ADDR
// continue ;
2841: GO 2660
// end ; if bc_type = b_armoury then
2843: LD_OWVAR 42
2847: PUSH
2848: LD_INT 4
2850: EQUAL
2851: IFFALSE 2861
// bc_type = b_barracks ;
2853: LD_ADDR_OWVAR 42
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2861: LD_ADDR_VAR 0 4
2865: PUSH
2866: LD_VAR 0 3
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: PPUSH
2875: LD_VAR 0 3
2879: PUSH
2880: LD_INT 3
2882: ARRAY
2883: PPUSH
2884: LD_VAR 0 3
2888: PUSH
2889: LD_INT 4
2891: ARRAY
2892: PPUSH
2893: CALL_OW 47
2897: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 266
2907: PUSH
2908: LD_INT 32
2910: EQUAL
2911: IFFALSE 2931
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2913: LD_VAR 0 4
2917: PPUSH
2918: LD_VAR 0 3
2922: PUSH
2923: LD_INT 7
2925: ARRAY
2926: PPUSH
2927: CALL_OW 431
// end ;
2931: GO 2660
2933: POP
2934: POP
// if not amDepot then
2935: LD_EXP 37
2939: NOT
2940: IFFALSE 2977
// begin bc_type := b_warehouse ;
2942: LD_ADDR_OWVAR 42
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// bc_level := 6 ;
2950: LD_ADDR_OWVAR 43
2954: PUSH
2955: LD_INT 6
2957: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2958: LD_ADDR_EXP 37
2962: PUSH
2963: LD_INT 52
2965: PPUSH
2966: LD_INT 12
2968: PPUSH
2969: LD_INT 3
2971: PPUSH
2972: CALL_OW 47
2976: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
2977: LD_EXP 37
2981: PPUSH
2982: LD_STRING gamma
2984: PPUSH
2985: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2989: LD_EXP 37
2993: PPUSH
2994: CALL_OW 274
2998: PPUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 500
3004: PUSH
3005: LD_INT 420
3007: PUSH
3008: LD_INT 350
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_OWVAR 67
3020: ARRAY
3021: PPUSH
3022: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3026: LD_EXP 37
3030: PPUSH
3031: CALL_OW 274
3035: PPUSH
3036: LD_INT 2
3038: PPUSH
3039: LD_INT 200
3041: PPUSH
3042: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3046: LD_INT 22
3048: PUSH
3049: LD_INT 1
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: LD_INT 30
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL_OW 69
3074: IFFALSE 3322
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_INT 22
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 30
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PPUSH
3105: CALL_OW 69
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3114: LD_ADDR_VAR 0 6
3118: PUSH
3119: LD_VAR 0 4
3123: PPUSH
3124: CALL_OW 250
3128: PPUSH
3129: LD_VAR 0 4
3133: PPUSH
3134: CALL_OW 251
3138: PPUSH
3139: LD_VAR 0 4
3143: PPUSH
3144: CALL_OW 254
3148: PPUSH
3149: CALL 16840 0 3
3153: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 19
3161: PUSH
3162: LD_INT 17
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3169: LD_STRING 06_remoteVehs_1
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 30
3179: IFFALSE 3202
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3181: LD_ADDR_VAR 0 2
3185: PUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_INT 1
3193: PPUSH
3194: LD_INT 20
3196: PPUSH
3197: CALL_OW 2
3201: ST_TO_ADDR
// for i in tmp do
3202: LD_ADDR_VAR 0 3
3206: PUSH
3207: LD_VAR 0 6
3211: PUSH
3212: FOR_IN
3213: IFFALSE 3320
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3215: LD_VAR 0 3
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 3
3228: PUSH
3229: LD_INT 2
3231: ARRAY
3232: PPUSH
3233: CALL_OW 428
3237: PUSH
3238: LD_INT 0
3240: EQUAL
3241: IFFALSE 3318
// begin bc_type := blist [ 1 ] ;
3243: LD_ADDR_OWVAR 42
3247: PUSH
3248: LD_VAR 0 2
3252: PUSH
3253: LD_INT 1
3255: ARRAY
3256: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3257: LD_VAR 0 3
3261: PUSH
3262: LD_INT 1
3264: ARRAY
3265: PPUSH
3266: LD_VAR 0 3
3270: PUSH
3271: LD_INT 2
3273: ARRAY
3274: PPUSH
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 3
3282: ARRAY
3283: PPUSH
3284: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3288: LD_ADDR_VAR 0 2
3292: PUSH
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 3
3305: ST_TO_ADDR
// if blist = 0 then
3306: LD_VAR 0 2
3310: PUSH
3311: LD_INT 0
3313: EQUAL
3314: IFFALSE 3318
// break ;
3316: GO 3320
// end ;
3318: GO 3212
3320: POP
3321: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3322: LD_STRING 06_remoteVehs_1
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 30
3332: IFFALSE 3791
// begin bc_type = 36 ;
3334: LD_ADDR_OWVAR 42
3338: PUSH
3339: LD_INT 36
3341: ST_TO_ADDR
// bc_level = 4 ;
3342: LD_ADDR_OWVAR 43
3346: PUSH
3347: LD_INT 4
3349: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3350: LD_EXP 37
3354: PPUSH
3355: LD_INT 36
3357: PPUSH
3358: LD_INT 62
3360: PPUSH
3361: LD_INT 12
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: LD_INT 0
3369: PPUSH
3370: CALL 17710 0 6
3374: PUSH
3375: LD_INT 92
3377: PUSH
3378: LD_INT 62
3380: PUSH
3381: LD_INT 12
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: NOT
3398: AND
3399: IFFALSE 3416
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3401: LD_INT 62
3403: PPUSH
3404: LD_INT 12
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: CALL_OW 47
3414: GO 3587
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3416: LD_EXP 37
3420: PPUSH
3421: LD_INT 36
3423: PPUSH
3424: LD_INT 37
3426: PPUSH
3427: LD_INT 18
3429: PPUSH
3430: LD_INT 2
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL 17710 0 6
3440: PUSH
3441: LD_INT 92
3443: PUSH
3444: LD_INT 37
3446: PUSH
3447: LD_INT 18
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: NOT
3464: AND
3465: IFFALSE 3482
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3467: LD_INT 37
3469: PPUSH
3470: LD_INT 18
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: CALL_OW 47
3480: GO 3587
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3482: LD_EXP 37
3486: PPUSH
3487: LD_INT 36
3489: PPUSH
3490: LD_INT 66
3492: PPUSH
3493: LD_INT 14
3495: PPUSH
3496: LD_INT 4
3498: PPUSH
3499: LD_INT 0
3501: PPUSH
3502: CALL 17710 0 6
3506: PUSH
3507: LD_INT 92
3509: PUSH
3510: LD_INT 66
3512: PUSH
3513: LD_INT 14
3515: PUSH
3516: LD_INT 3
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 69
3529: NOT
3530: AND
3531: IFFALSE 3548
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3533: LD_INT 66
3535: PPUSH
3536: LD_INT 14
3538: PPUSH
3539: LD_INT 4
3541: PPUSH
3542: CALL_OW 47
3546: GO 3587
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3548: LD_EXP 37
3552: PPUSH
3553: LD_INT 36
3555: PPUSH
3556: LD_INT 74
3558: PPUSH
3559: LD_INT 26
3561: PPUSH
3562: LD_INT 4
3564: PPUSH
3565: LD_INT 0
3567: PPUSH
3568: CALL 17710 0 6
3572: IFFALSE 3587
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3574: LD_INT 74
3576: PPUSH
3577: LD_INT 26
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3587: LD_INT 22
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 36
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PPUSH
3611: CALL_OW 69
3615: NOT
3616: IFFALSE 3620
// exit ;
3618: GO 3791
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: DOUBLE
3626: LD_INT 1
3628: DEC
3629: ST_TO_ADDR
3630: LD_INT 3
3632: PUSH
3633: LD_INT 2
3635: PUSH
3636: LD_INT 2
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_OWVAR 67
3648: ARRAY
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3789
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3653: LD_ADDR_OWVAR 37
3657: PUSH
3658: LD_INT 3
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 1
3673: PPUSH
3674: LD_INT 2
3676: PPUSH
3677: CALL_OW 12
3681: ARRAY
3682: PUSH
3683: LD_INT 2
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_OWVAR 67
3695: ARRAY
3696: ST_TO_ADDR
// vc_engine = 1 ;
3697: LD_ADDR_OWVAR 39
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// vc_control = 2 ;
3705: LD_ADDR_OWVAR 38
3709: PUSH
3710: LD_INT 2
3712: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3713: LD_ADDR_OWVAR 40
3717: PUSH
3718: LD_INT 3
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: LD_INT 5
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL_OW 12
3742: ARRAY
3743: ST_TO_ADDR
// veh = CreateVehicle ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3754: LD_VAR 0 5
3758: PPUSH
3759: LD_INT 4
3761: PPUSH
3762: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_INT 56
3773: PPUSH
3774: LD_INT 17
3776: PPUSH
3777: LD_INT 9
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 50
// end ;
3787: GO 3650
3789: POP
3790: POP
// end ; end ;
3791: LD_VAR 0 1
3795: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3796: LD_INT 0
3798: PPUSH
3799: PPUSH
3800: PPUSH
3801: PPUSH
// uc_side = 1 ;
3802: LD_ADDR_OWVAR 20
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// uc_nation = 1 ;
3810: LD_ADDR_OWVAR 21
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3818: LD_ADDR_EXP 14
3822: PUSH
3823: LD_STRING 06c_Denis
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL 7025 0 2
3833: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3834: LD_EXP 14
3838: PPUSH
3839: LD_INT 4
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3849: LD_ADDR_EXP 15
3853: PUSH
3854: LD_STRING 06c_Joan
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL 7025 0 2
3864: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3865: LD_EXP 15
3869: PPUSH
3870: LD_INT 4
3872: PPUSH
3873: LD_INT 0
3875: PPUSH
3876: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3880: LD_STRING GladstoneIn07
3882: PPUSH
3883: LD_INT 0
3885: PPUSH
3886: CALL_OW 30
3890: NOT
3891: IFFALSE 3959
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3893: LD_ADDR_EXP 8
3897: PUSH
3898: LD_STRING 06c_Gladstone
3900: PPUSH
3901: LD_INT 1
3903: PPUSH
3904: CALL 7025 0 2
3908: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3909: LD_EXP 8
3913: NOT
3914: PUSH
3915: LD_STRING GladstoneStayInDelta
3917: PPUSH
3918: LD_INT 0
3920: PPUSH
3921: CALL_OW 30
3925: AND
3926: IFFALSE 3944
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3928: LD_ADDR_EXP 8
3932: PUSH
3933: LD_STRING 05_Gladstone
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL 7025 0 2
3943: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3944: LD_EXP 8
3948: PPUSH
3949: LD_INT 4
3951: PPUSH
3952: LD_INT 0
3954: PPUSH
3955: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3959: LD_STRING LisaStayInDelta
3961: PPUSH
3962: LD_INT 0
3964: PPUSH
3965: CALL_OW 30
3969: IFFALSE 4002
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3971: LD_ADDR_EXP 6
3975: PUSH
3976: LD_STRING 05_Lisa
3978: PPUSH
3979: LD_INT 1
3981: PPUSH
3982: CALL 7025 0 2
3986: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3987: LD_EXP 6
3991: PPUSH
3992: LD_INT 4
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4002: LD_STRING BobbyStayInDelta
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 30
4012: IFFALSE 4045
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4014: LD_ADDR_EXP 4
4018: PUSH
4019: LD_STRING 05_Bobby
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL 7025 0 2
4029: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4030: LD_EXP 4
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 0
4040: PPUSH
4041: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4045: LD_STRING CyrusStayInDelta
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 30
4055: IFFALSE 4088
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4057: LD_ADDR_EXP 5
4061: PUSH
4062: LD_STRING 05_Cyrus
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL 7025 0 2
4072: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4073: LD_EXP 5
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_INT 0
4083: PPUSH
4084: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4088: LD_STRING BrownStayInDelta
4090: PPUSH
4091: LD_INT 0
4093: PPUSH
4094: CALL_OW 30
4098: IFFALSE 4131
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4100: LD_ADDR_EXP 2
4104: PUSH
4105: LD_STRING 05_Brown
4107: PPUSH
4108: LD_INT 1
4110: PPUSH
4111: CALL 7025 0 2
4115: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4116: LD_EXP 2
4120: PPUSH
4121: LD_INT 4
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4131: LD_STRING DonaldsonStayInDelta
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 30
4141: IFFALSE 4174
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4143: LD_ADDR_EXP 3
4147: PUSH
4148: LD_STRING 05_Donaldson
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL 7025 0 2
4158: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4159: LD_EXP 3
4163: PPUSH
4164: LD_INT 4
4166: PPUSH
4167: LD_INT 0
4169: PPUSH
4170: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_STRING OthersStayInDelta
4181: PPUSH
4182: CALL_OW 31
4186: ST_TO_ADDR
// if other > 2 then
4187: LD_VAR 0 4
4191: PUSH
4192: LD_INT 2
4194: GREATER
4195: IFFALSE 4240
// begin for j = 1 to 2 do
4197: LD_ADDR_VAR 0 3
4201: PUSH
4202: DOUBLE
4203: LD_INT 1
4205: DEC
4206: ST_TO_ADDR
4207: LD_INT 2
4209: PUSH
4210: FOR_TO
4211: IFFALSE 4236
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4213: LD_VAR 0 4
4217: PUSH
4218: LD_VAR 0 3
4222: ARRAY
4223: PPUSH
4224: LD_INT 4
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 49
4234: GO 4210
4236: POP
4237: POP
// end else
4238: GO 4283
// begin for j = 1 to other do
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: DOUBLE
4246: LD_INT 1
4248: DEC
4249: ST_TO_ADDR
4250: LD_VAR 0 4
4254: PUSH
4255: FOR_TO
4256: IFFALSE 4281
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4258: LD_VAR 0 4
4262: PUSH
4263: LD_VAR 0 3
4267: ARRAY
4268: PPUSH
4269: LD_INT 4
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
4279: GO 4255
4281: POP
4282: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_STRING 06_other_apemans
4290: PPUSH
4291: CALL_OW 31
4295: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4296: LD_VAR 0 4
4300: PUSH
4301: LD_INT 5
4303: PUSH
4304: LD_INT 4
4306: PUSH
4307: LD_INT 3
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: LIST
4314: PUSH
4315: LD_OWVAR 67
4319: ARRAY
4320: GREATEREQUAL
4321: IFFALSE 4350
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 5
4330: PUSH
4331: LD_INT 4
4333: PUSH
4334: LD_INT 3
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_OWVAR 67
4346: ARRAY
4347: ST_TO_ADDR
4348: GO 4360
// j := other ;
4350: LD_ADDR_VAR 0 3
4354: PUSH
4355: LD_VAR 0 4
4359: ST_TO_ADDR
// for i = 1 to j do
4360: LD_ADDR_VAR 0 2
4364: PUSH
4365: DOUBLE
4366: LD_INT 1
4368: DEC
4369: ST_TO_ADDR
4370: LD_VAR 0 3
4374: PUSH
4375: FOR_TO
4376: IFFALSE 4401
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4378: LD_VAR 0 4
4382: PUSH
4383: LD_VAR 0 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 4
4391: PPUSH
4392: LD_INT 0
4394: PPUSH
4395: CALL_OW 49
4399: GO 4375
4401: POP
4402: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4403: LD_INT 4
4405: PPUSH
4406: LD_INT 22
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 21
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PPUSH
4430: CALL_OW 70
4434: PPUSH
4435: LD_INT 53
4437: PPUSH
4438: LD_INT 19
4440: PPUSH
4441: CALL_OW 111
// firstAttack = 1 ;
4445: LD_ADDR_EXP 33
4449: PUSH
4450: LD_INT 1
4452: ST_TO_ADDR
// end ;
4453: LD_VAR 0 1
4457: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4458: LD_INT 0
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
4466: PPUSH
4467: PPUSH
4468: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4469: LD_ADDR_VAR 0 8
4473: PUSH
4474: LD_STRING 07_vehicles
4476: PPUSH
4477: EMPTY
4478: PPUSH
4479: CALL_OW 30
4483: ST_TO_ADDR
// macmilan_squad := [ ] ;
4484: LD_ADDR_EXP 42
4488: PUSH
4489: EMPTY
4490: ST_TO_ADDR
// tmp_vehs := [ ] ;
4491: LD_ADDR_VAR 0 7
4495: PUSH
4496: EMPTY
4497: ST_TO_ADDR
// uc_side := 1 ;
4498: LD_ADDR_OWVAR 20
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// uc_nation := 1 ;
4506: LD_ADDR_OWVAR 21
4510: PUSH
4511: LD_INT 1
4513: ST_TO_ADDR
// if vehicles then
4514: LD_VAR 0 8
4518: IFFALSE 4677
// begin k := 1 ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: DOUBLE
4534: LD_INT 1
4536: DEC
4537: ST_TO_ADDR
4538: LD_VAR 0 8
4542: PUSH
4543: LD_INT 4
4545: DIV
4546: PUSH
4547: FOR_TO
4548: IFFALSE 4675
// begin vc_chassis = vehicles [ k ] ;
4550: LD_ADDR_OWVAR 37
4554: PUSH
4555: LD_VAR 0 8
4559: PUSH
4560: LD_VAR 0 3
4564: ARRAY
4565: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4566: LD_ADDR_OWVAR 39
4570: PUSH
4571: LD_VAR 0 8
4575: PUSH
4576: LD_VAR 0 3
4580: PUSH
4581: LD_INT 1
4583: PLUS
4584: ARRAY
4585: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4586: LD_ADDR_OWVAR 38
4590: PUSH
4591: LD_VAR 0 8
4595: PUSH
4596: LD_VAR 0 3
4600: PUSH
4601: LD_INT 2
4603: PLUS
4604: ARRAY
4605: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4606: LD_ADDR_OWVAR 40
4610: PUSH
4611: LD_VAR 0 8
4615: PUSH
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 3
4623: PLUS
4624: ARRAY
4625: ST_TO_ADDR
// k := k + 4 ;
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 4
4638: PLUS
4639: ST_TO_ADDR
// veh := CreateVehicle ;
4640: LD_ADDR_VAR 0 9
4644: PUSH
4645: CALL_OW 45
4649: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4650: LD_ADDR_VAR 0 7
4654: PUSH
4655: LD_VAR 0 7
4659: PPUSH
4660: LD_INT 1
4662: PPUSH
4663: LD_VAR 0 9
4667: PPUSH
4668: CALL_OW 2
4672: ST_TO_ADDR
// end ;
4673: GO 4547
4675: POP
4676: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4677: LD_ADDR_EXP 1
4681: PUSH
4682: LD_EXP 44
4686: PUSH
4687: LD_STRING JMM
4689: STR
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: CALL 7025 0 2
4698: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: PUSH
4708: LD_EXP 12
4712: PUSH
4713: LD_INT 3
4715: EQUAL
4716: OR
4717: PUSH
4718: LD_EXP 2
4722: NOT
4723: AND
4724: IFFALSE 4777
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4726: LD_ADDR_EXP 2
4730: PUSH
4731: LD_EXP 44
4735: PUSH
4736: LD_STRING Brown
4738: STR
4739: PPUSH
4740: LD_INT 1
4742: PPUSH
4743: CALL 7025 0 2
4747: ST_TO_ADDR
// if Brown then
4748: LD_EXP 2
4752: IFFALSE 4777
// tmp := Insert ( tmp , 1 , Brown ) ;
4754: LD_ADDR_VAR 0 6
4758: PUSH
4759: LD_VAR 0 6
4763: PPUSH
4764: LD_INT 1
4766: PPUSH
4767: LD_EXP 2
4771: PPUSH
4772: CALL_OW 2
4776: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4777: LD_EXP 12
4781: PUSH
4782: LD_INT 2
4784: EQUAL
4785: PUSH
4786: LD_EXP 12
4790: PUSH
4791: LD_INT 3
4793: EQUAL
4794: OR
4795: PUSH
4796: LD_EXP 3
4800: NOT
4801: AND
4802: IFFALSE 4855
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4804: LD_ADDR_EXP 3
4808: PUSH
4809: LD_EXP 44
4813: PUSH
4814: LD_STRING Donaldson
4816: STR
4817: PPUSH
4818: LD_INT 1
4820: PPUSH
4821: CALL 7025 0 2
4825: ST_TO_ADDR
// if Donaldson then
4826: LD_EXP 3
4830: IFFALSE 4855
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4832: LD_ADDR_VAR 0 6
4836: PUSH
4837: LD_VAR 0 6
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: LD_EXP 3
4849: PPUSH
4850: CALL_OW 2
4854: ST_TO_ADDR
// end ; if not Bobby then
4855: LD_EXP 4
4859: NOT
4860: IFFALSE 4913
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4862: LD_ADDR_EXP 4
4866: PUSH
4867: LD_EXP 44
4871: PUSH
4872: LD_STRING Bobby
4874: STR
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL 7025 0 2
4883: ST_TO_ADDR
// if Bobby then
4884: LD_EXP 4
4888: IFFALSE 4913
// tmp := Insert ( tmp , 1 , Bobby ) ;
4890: LD_ADDR_VAR 0 6
4894: PUSH
4895: LD_VAR 0 6
4899: PPUSH
4900: LD_INT 1
4902: PPUSH
4903: LD_EXP 4
4907: PPUSH
4908: CALL_OW 2
4912: ST_TO_ADDR
// end ; if not Cyrus then
4913: LD_EXP 5
4917: NOT
4918: IFFALSE 4971
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4920: LD_ADDR_EXP 5
4924: PUSH
4925: LD_EXP 44
4929: PUSH
4930: LD_STRING Cyrus
4932: STR
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL 7025 0 2
4941: ST_TO_ADDR
// if Cyrus then
4942: LD_EXP 5
4946: IFFALSE 4971
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4948: LD_ADDR_VAR 0 6
4952: PUSH
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_EXP 5
4965: PPUSH
4966: CALL_OW 2
4970: ST_TO_ADDR
// end ; if not Lisa then
4971: LD_EXP 6
4975: NOT
4976: IFFALSE 5029
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4978: LD_ADDR_EXP 6
4982: PUSH
4983: LD_EXP 44
4987: PUSH
4988: LD_STRING Lisa
4990: STR
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: CALL 7025 0 2
4999: ST_TO_ADDR
// if Lisa then
5000: LD_EXP 6
5004: IFFALSE 5029
// tmp := Insert ( tmp , 1 , Lisa ) ;
5006: LD_ADDR_VAR 0 6
5010: PUSH
5011: LD_VAR 0 6
5015: PPUSH
5016: LD_INT 1
5018: PPUSH
5019: LD_EXP 6
5023: PPUSH
5024: CALL_OW 2
5028: ST_TO_ADDR
// end ; if not Frank then
5029: LD_EXP 7
5033: NOT
5034: IFFALSE 5087
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5036: LD_ADDR_EXP 7
5040: PUSH
5041: LD_EXP 44
5045: PUSH
5046: LD_STRING Frank
5048: STR
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL 7025 0 2
5057: ST_TO_ADDR
// if Frank then
5058: LD_EXP 7
5062: IFFALSE 5087
// tmp := Insert ( tmp , 1 , Frank ) ;
5064: LD_ADDR_VAR 0 6
5068: PUSH
5069: LD_VAR 0 6
5073: PPUSH
5074: LD_INT 1
5076: PPUSH
5077: LD_EXP 7
5081: PPUSH
5082: CALL_OW 2
5086: ST_TO_ADDR
// end ; if not Kikuchi then
5087: LD_EXP 9
5091: NOT
5092: IFFALSE 5145
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5094: LD_ADDR_EXP 9
5098: PUSH
5099: LD_EXP 44
5103: PUSH
5104: LD_STRING Kikuchi
5106: STR
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL 7025 0 2
5115: ST_TO_ADDR
// if Kikuchi then
5116: LD_EXP 9
5120: IFFALSE 5145
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5122: LD_ADDR_VAR 0 6
5126: PUSH
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_EXP 9
5139: PPUSH
5140: CALL_OW 2
5144: ST_TO_ADDR
// end ; if not Gladstone then
5145: LD_EXP 8
5149: NOT
5150: IFFALSE 5203
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5152: LD_ADDR_EXP 8
5156: PUSH
5157: LD_EXP 44
5161: PUSH
5162: LD_STRING Gladstone
5164: STR
5165: PPUSH
5166: LD_INT 1
5168: PPUSH
5169: CALL 7025 0 2
5173: ST_TO_ADDR
// if Gladstone then
5174: LD_EXP 8
5178: IFFALSE 5203
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5180: LD_ADDR_VAR 0 6
5184: PUSH
5185: LD_VAR 0 6
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: LD_EXP 8
5197: PPUSH
5198: CALL_OW 2
5202: ST_TO_ADDR
// end ; if not Khatam then
5203: LD_EXP 10
5207: NOT
5208: IFFALSE 5261
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5210: LD_ADDR_EXP 10
5214: PUSH
5215: LD_EXP 44
5219: PUSH
5220: LD_STRING Khatam
5222: STR
5223: PPUSH
5224: LD_INT 1
5226: PPUSH
5227: CALL 7025 0 2
5231: ST_TO_ADDR
// if Khatam then
5232: LD_EXP 10
5236: IFFALSE 5261
// tmp := Insert ( tmp , 1 , Khatam ) ;
5238: LD_ADDR_VAR 0 6
5242: PUSH
5243: LD_VAR 0 6
5247: PPUSH
5248: LD_INT 1
5250: PPUSH
5251: LD_EXP 10
5255: PPUSH
5256: CALL_OW 2
5260: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_STRING 07c_others
5268: PPUSH
5269: CALL_OW 31
5273: ST_TO_ADDR
// macmilan_squad := others ;
5274: LD_ADDR_EXP 42
5278: PUSH
5279: LD_VAR 0 5
5283: ST_TO_ADDR
// if others then
5284: LD_VAR 0 5
5288: IFFALSE 5376
// for i in others do
5290: LD_ADDR_VAR 0 2
5294: PUSH
5295: LD_VAR 0 5
5299: PUSH
5300: FOR_IN
5301: IFFALSE 5374
// if GetClass ( i ) = 3 then
5303: LD_VAR 0 2
5307: PPUSH
5308: CALL_OW 257
5312: PUSH
5313: LD_INT 3
5315: EQUAL
5316: IFFALSE 5343
// tmp := Insert ( tmp , 1 , i ) else
5318: LD_ADDR_VAR 0 6
5322: PUSH
5323: LD_VAR 0 6
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 2
5340: ST_TO_ADDR
5341: GO 5372
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5343: LD_ADDR_VAR 0 6
5347: PUSH
5348: LD_VAR 0 6
5352: PPUSH
5353: LD_VAR 0 6
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: PPUSH
5362: LD_VAR 0 2
5366: PPUSH
5367: CALL_OW 2
5371: ST_TO_ADDR
5372: GO 5300
5374: POP
5375: POP
// wait ( 0 0$1 ) ;
5376: LD_INT 35
5378: PPUSH
5379: CALL_OW 67
// for i in tmp do
5383: LD_ADDR_VAR 0 2
5387: PUSH
5388: LD_VAR 0 6
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5546
// begin SetDir ( i , 3 ) ;
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_INT 3
5403: PPUSH
5404: CALL_OW 233
// if tmp_vehs then
5408: LD_VAR 0 7
5412: IFFALSE 5487
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5414: LD_VAR 0 7
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_INT 3
5425: PPUSH
5426: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5430: LD_VAR 0 7
5434: PUSH
5435: LD_INT 1
5437: ARRAY
5438: PPUSH
5439: LD_INT 4
5441: PPUSH
5442: LD_INT 0
5444: PPUSH
5445: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5449: LD_VAR 0 2
5453: PPUSH
5454: LD_VAR 0 7
5458: PUSH
5459: LD_INT 1
5461: ARRAY
5462: PPUSH
5463: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5467: LD_ADDR_VAR 0 7
5471: PUSH
5472: LD_VAR 0 7
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: CALL_OW 3
5484: ST_TO_ADDR
// end else
5485: GO 5502
// PlaceUnitArea ( i , GammaSupport , false ) ;
5487: LD_VAR 0 2
5491: PPUSH
5492: LD_INT 4
5494: PPUSH
5495: LD_INT 0
5497: PPUSH
5498: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 77
5509: PPUSH
5510: LD_INT 16
5512: PPUSH
5513: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5517: LD_INT 35
5519: PPUSH
5520: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5524: LD_INT 4
5526: PPUSH
5527: LD_INT 22
5529: PUSH
5530: LD_INT 1
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 70
5541: NOT
5542: IFFALSE 5517
// end ;
5544: GO 5393
5546: POP
5547: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5548: LD_EXP 1
5552: PPUSH
5553: LD_INT 4
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_INT 77
5570: PPUSH
5571: LD_INT 16
5573: PPUSH
5574: CALL_OW 111
// end ;
5578: LD_VAR 0 1
5582: RET
// export function PrepareSikorsky ; begin
5583: LD_INT 0
5585: PPUSH
// uc_side = 4 ;
5586: LD_ADDR_OWVAR 20
5590: PUSH
5591: LD_INT 4
5593: ST_TO_ADDR
// uc_nation = 1 ;
5594: LD_ADDR_OWVAR 21
5598: PUSH
5599: LD_INT 1
5601: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5602: LD_ADDR_EXP 16
5606: PUSH
5607: LD_STRING Sikorski
5609: PPUSH
5610: LD_INT 0
5612: PPUSH
5613: CALL 7025 0 2
5617: ST_TO_ADDR
// vc_engine = 1 ;
5618: LD_ADDR_OWVAR 39
5622: PUSH
5623: LD_INT 1
5625: ST_TO_ADDR
// vc_control = 1 ;
5626: LD_ADDR_OWVAR 38
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5634: LD_ADDR_OWVAR 40
5638: PUSH
5639: LD_INT 5
5641: PUSH
5642: LD_INT 3
5644: PUSH
5645: LD_INT 4
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: PUSH
5653: LD_OWVAR 67
5657: ARRAY
5658: ST_TO_ADDR
// vc_chassis = 4 ;
5659: LD_ADDR_OWVAR 37
5663: PUSH
5664: LD_INT 4
5666: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5667: LD_ADDR_EXP 17
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5677: LD_EXP 17
5681: PPUSH
5682: LD_INT 3
5684: PPUSH
5685: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5689: LD_INT 35
5691: PPUSH
5692: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5696: LD_EXP 17
5700: PPUSH
5701: LD_INT 18
5703: PPUSH
5704: LD_INT 5
5706: PPUSH
5707: LD_INT 0
5709: PPUSH
5710: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5714: LD_EXP 17
5718: PPUSH
5719: CALL_OW 305
5723: IFFALSE 5689
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5725: LD_EXP 16
5729: PPUSH
5730: LD_EXP 17
5734: PPUSH
5735: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5739: LD_EXP 17
5743: PPUSH
5744: LD_INT 5
5746: PPUSH
5747: CALL_OW 113
// end ;
5751: LD_VAR 0 1
5755: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5756: LD_INT 0
5758: PPUSH
5759: PPUSH
5760: PPUSH
5761: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5762: LD_ADDR_VAR 0 2
5766: PUSH
5767: DOUBLE
5768: LD_INT 1
5770: DEC
5771: ST_TO_ADDR
5772: LD_INT 8
5774: PUSH
5775: LD_INT 7
5777: PUSH
5778: LD_INT 7
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: PUSH
5786: LD_OWVAR 67
5790: ARRAY
5791: PUSH
5792: FOR_TO
5793: IFFALSE 5909
// begin uc_side = 4 ;
5795: LD_ADDR_OWVAR 20
5799: PUSH
5800: LD_INT 4
5802: ST_TO_ADDR
// uc_nation = 1 ;
5803: LD_ADDR_OWVAR 21
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// hc_name =  ;
5811: LD_ADDR_OWVAR 26
5815: PUSH
5816: LD_STRING 
5818: ST_TO_ADDR
// hc_gallery =  ;
5819: LD_ADDR_OWVAR 33
5823: PUSH
5824: LD_STRING 
5826: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5827: LD_INT 0
5829: PPUSH
5830: LD_INT 1
5832: PPUSH
5833: LD_INT 5
5835: PPUSH
5836: LD_INT 8
5838: PPUSH
5839: CALL_OW 12
5843: PPUSH
5844: CALL_OW 380
// un = CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 3
5865: PPUSH
5866: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5870: LD_VAR 0 3
5874: PPUSH
5875: LD_INT 9
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 53
5892: PPUSH
5893: LD_INT 23
5895: PPUSH
5896: CALL_OW 111
// wait ( 0 0$1 ) ;
5900: LD_INT 35
5902: PPUSH
5903: CALL_OW 67
// end ;
5907: GO 5792
5909: POP
5910: POP
// for i = 1 to 3 do
5911: LD_ADDR_VAR 0 2
5915: PUSH
5916: DOUBLE
5917: LD_INT 1
5919: DEC
5920: ST_TO_ADDR
5921: LD_INT 3
5923: PUSH
5924: FOR_TO
5925: IFFALSE 6041
// begin uc_side = 4 ;
5927: LD_ADDR_OWVAR 20
5931: PUSH
5932: LD_INT 4
5934: ST_TO_ADDR
// uc_nation = 1 ;
5935: LD_ADDR_OWVAR 21
5939: PUSH
5940: LD_INT 1
5942: ST_TO_ADDR
// hc_name =  ;
5943: LD_ADDR_OWVAR 26
5947: PUSH
5948: LD_STRING 
5950: ST_TO_ADDR
// hc_gallery =  ;
5951: LD_ADDR_OWVAR 33
5955: PUSH
5956: LD_STRING 
5958: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5959: LD_INT 0
5961: PPUSH
5962: LD_INT 4
5964: PPUSH
5965: LD_INT 5
5967: PPUSH
5968: LD_INT 8
5970: PPUSH
5971: CALL_OW 12
5975: PPUSH
5976: CALL_OW 380
// un = CreateHuman ;
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: CALL_OW 44
5989: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5990: LD_VAR 0 3
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6002: LD_VAR 0 3
6006: PPUSH
6007: LD_INT 9
6009: PPUSH
6010: LD_INT 0
6012: PPUSH
6013: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6017: LD_VAR 0 3
6021: PPUSH
6022: LD_INT 53
6024: PPUSH
6025: LD_INT 23
6027: PPUSH
6028: CALL_OW 111
// wait ( 0 0$1 ) ;
6032: LD_INT 35
6034: PPUSH
6035: CALL_OW 67
// end ;
6039: GO 5924
6041: POP
6042: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: DOUBLE
6049: LD_INT 1
6051: DEC
6052: ST_TO_ADDR
6053: LD_INT 9
6055: PUSH
6056: LD_INT 8
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: LD_OWVAR 67
6071: ARRAY
6072: PUSH
6073: FOR_TO
6074: IFFALSE 6282
// begin uc_side = 4 ;
6076: LD_ADDR_OWVAR 20
6080: PUSH
6081: LD_INT 4
6083: ST_TO_ADDR
// uc_nation = 1 ;
6084: LD_ADDR_OWVAR 21
6088: PUSH
6089: LD_INT 1
6091: ST_TO_ADDR
// vc_engine = 1 ;
6092: LD_ADDR_OWVAR 39
6096: PUSH
6097: LD_INT 1
6099: ST_TO_ADDR
// vc_control = 1 ;
6100: LD_ADDR_OWVAR 38
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6108: LD_ADDR_OWVAR 40
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: LD_INT 4
6118: PUSH
6119: LD_INT 5
6121: PUSH
6122: LD_INT 6
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 1
6133: PPUSH
6134: LD_INT 4
6136: PPUSH
6137: CALL_OW 12
6141: ARRAY
6142: ST_TO_ADDR
// vc_chassis = 4 ;
6143: LD_ADDR_OWVAR 37
6147: PUSH
6148: LD_INT 4
6150: ST_TO_ADDR
// veh = CreateVehicle ;
6151: LD_ADDR_VAR 0 4
6155: PUSH
6156: CALL_OW 45
6160: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6161: LD_VAR 0 4
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6173: LD_VAR 0 4
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// hc_name =  ;
6188: LD_ADDR_OWVAR 26
6192: PUSH
6193: LD_STRING 
6195: ST_TO_ADDR
// hc_gallery =  ;
6196: LD_ADDR_OWVAR 33
6200: PUSH
6201: LD_STRING 
6203: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6204: LD_INT 0
6206: PPUSH
6207: LD_INT 3
6209: PPUSH
6210: LD_INT 5
6212: PPUSH
6213: LD_INT 8
6215: PPUSH
6216: CALL_OW 12
6220: PPUSH
6221: CALL_OW 380
// un = CreateHuman ;
6225: LD_ADDR_VAR 0 3
6229: PUSH
6230: CALL_OW 44
6234: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_VAR 0 4
6244: PPUSH
6245: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6249: LD_VAR 0 4
6253: PUSH
6254: LD_VAR 0 3
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PPUSH
6263: LD_INT 53
6265: PPUSH
6266: LD_INT 23
6268: PPUSH
6269: CALL_OW 111
// wait ( 0 0$5 ) ;
6273: LD_INT 175
6275: PPUSH
6276: CALL_OW 67
// end ;
6280: GO 6073
6282: POP
6283: POP
// end ; end_of_file
6284: LD_VAR 0 1
6288: RET
// export function PrepareRussianCommander ; begin
6289: LD_INT 0
6291: PPUSH
// uc_side = 3 ;
6292: LD_ADDR_OWVAR 20
6296: PUSH
6297: LD_INT 3
6299: ST_TO_ADDR
// uc_nation = 3 ;
6300: LD_ADDR_OWVAR 21
6304: PUSH
6305: LD_INT 3
6307: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6308: LD_ADDR_EXP 24
6312: PUSH
6313: LD_STRING Borodin
6315: PPUSH
6316: CALL_OW 25
6320: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6321: LD_EXP 24
6325: PPUSH
6326: LD_INT 25
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: LD_VAR 0 1
6340: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6341: LD_INT 0
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
// for i = 1 to 10 do
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: DOUBLE
6353: LD_INT 1
6355: DEC
6356: ST_TO_ADDR
6357: LD_INT 10
6359: PUSH
6360: FOR_TO
6361: IFFALSE 6435
// begin uc_side = 6 ;
6363: LD_ADDR_OWVAR 20
6367: PUSH
6368: LD_INT 6
6370: ST_TO_ADDR
// uc_nation = 3 ;
6371: LD_ADDR_OWVAR 21
6375: PUSH
6376: LD_INT 3
6378: ST_TO_ADDR
// hc_gallery =  ;
6379: LD_ADDR_OWVAR 33
6383: PUSH
6384: LD_STRING 
6386: ST_TO_ADDR
// hc_name =  ;
6387: LD_ADDR_OWVAR 26
6391: PUSH
6392: LD_STRING 
6394: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6395: LD_INT 0
6397: PPUSH
6398: LD_INT 1
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: CALL_OW 380
// un = CreateHuman ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: CALL_OW 44
6417: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6418: LD_VAR 0 3
6422: PPUSH
6423: LD_INT 1
6425: PPUSH
6426: LD_INT 0
6428: PPUSH
6429: CALL_OW 49
// end ;
6433: GO 6360
6435: POP
6436: POP
// for i = 1 to 3 do
6437: LD_ADDR_VAR 0 2
6441: PUSH
6442: DOUBLE
6443: LD_INT 1
6445: DEC
6446: ST_TO_ADDR
6447: LD_INT 3
6449: PUSH
6450: FOR_TO
6451: IFFALSE 6600
// begin uc_side = 6 ;
6453: LD_ADDR_OWVAR 20
6457: PUSH
6458: LD_INT 6
6460: ST_TO_ADDR
// uc_nation = 3 ;
6461: LD_ADDR_OWVAR 21
6465: PUSH
6466: LD_INT 3
6468: ST_TO_ADDR
// vc_engine = 1 ;
6469: LD_ADDR_OWVAR 39
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// vc_control = 1 ;
6477: LD_ADDR_OWVAR 38
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6485: LD_ADDR_OWVAR 40
6489: PUSH
6490: LD_INT 43
6492: PUSH
6493: LD_INT 44
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 1
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 12
6510: ARRAY
6511: ST_TO_ADDR
// vc_chassis = 22 ;
6512: LD_ADDR_OWVAR 37
6516: PUSH
6517: LD_INT 22
6519: ST_TO_ADDR
// veh = CreateVehicle ;
6520: LD_ADDR_VAR 0 4
6524: PUSH
6525: CALL_OW 45
6529: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6530: LD_VAR 0 4
6534: PPUSH
6535: LD_INT 2
6537: PPUSH
6538: LD_INT 0
6540: PPUSH
6541: CALL_OW 49
// hc_gallery =  ;
6545: LD_ADDR_OWVAR 33
6549: PUSH
6550: LD_STRING 
6552: ST_TO_ADDR
// hc_name =  ;
6553: LD_ADDR_OWVAR 26
6557: PUSH
6558: LD_STRING 
6560: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6561: LD_INT 0
6563: PPUSH
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 4
6569: PPUSH
6570: CALL_OW 380
// un = CreateHuman ;
6574: LD_ADDR_VAR 0 3
6578: PUSH
6579: CALL_OW 44
6583: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6584: LD_VAR 0 3
6588: PPUSH
6589: LD_VAR 0 4
6593: PPUSH
6594: CALL_OW 52
// end ;
6598: GO 6450
6600: POP
6601: POP
// end ;
6602: LD_VAR 0 1
6606: RET
// export function PrepareRussians ; var i , un ; begin
6607: LD_INT 0
6609: PPUSH
6610: PPUSH
6611: PPUSH
// for i = 1 to 8 do
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: DOUBLE
6618: LD_INT 1
6620: DEC
6621: ST_TO_ADDR
6622: LD_INT 8
6624: PUSH
6625: FOR_TO
6626: IFFALSE 6712
// begin uc_side = 3 ;
6628: LD_ADDR_OWVAR 20
6632: PUSH
6633: LD_INT 3
6635: ST_TO_ADDR
// uc_nation = 3 ;
6636: LD_ADDR_OWVAR 21
6640: PUSH
6641: LD_INT 3
6643: ST_TO_ADDR
// hc_gallery =  ;
6644: LD_ADDR_OWVAR 33
6648: PUSH
6649: LD_STRING 
6651: ST_TO_ADDR
// hc_name =  ;
6652: LD_ADDR_OWVAR 26
6656: PUSH
6657: LD_STRING 
6659: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6660: LD_INT 0
6662: PPUSH
6663: LD_INT 1
6665: PPUSH
6666: LD_EXP 25
6670: PPUSH
6671: LD_EXP 26
6675: PPUSH
6676: CALL_OW 12
6680: PPUSH
6681: CALL_OW 380
// un = CreateHuman ;
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: CALL_OW 44
6694: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 3
6702: PPUSH
6703: LD_INT 0
6705: PPUSH
6706: CALL_OW 49
// end ;
6710: GO 6625
6712: POP
6713: POP
// for i = 1 to 4 do
6714: LD_ADDR_VAR 0 2
6718: PUSH
6719: DOUBLE
6720: LD_INT 1
6722: DEC
6723: ST_TO_ADDR
6724: LD_INT 4
6726: PUSH
6727: FOR_TO
6728: IFFALSE 6814
// begin uc_side = 3 ;
6730: LD_ADDR_OWVAR 20
6734: PUSH
6735: LD_INT 3
6737: ST_TO_ADDR
// uc_nation = 3 ;
6738: LD_ADDR_OWVAR 21
6742: PUSH
6743: LD_INT 3
6745: ST_TO_ADDR
// hc_gallery =  ;
6746: LD_ADDR_OWVAR 33
6750: PUSH
6751: LD_STRING 
6753: ST_TO_ADDR
// hc_name =  ;
6754: LD_ADDR_OWVAR 26
6758: PUSH
6759: LD_STRING 
6761: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6762: LD_INT 0
6764: PPUSH
6765: LD_INT 2
6767: PPUSH
6768: LD_EXP 25
6772: PPUSH
6773: LD_EXP 26
6777: PPUSH
6778: CALL_OW 12
6782: PPUSH
6783: CALL_OW 380
// un = CreateHuman ;
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: CALL_OW 44
6796: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6797: LD_VAR 0 3
6801: PPUSH
6802: LD_INT 3
6804: PPUSH
6805: LD_INT 0
6807: PPUSH
6808: CALL_OW 49
// end ;
6812: GO 6727
6814: POP
6815: POP
// for i = 1 to 3 do
6816: LD_ADDR_VAR 0 2
6820: PUSH
6821: DOUBLE
6822: LD_INT 1
6824: DEC
6825: ST_TO_ADDR
6826: LD_INT 3
6828: PUSH
6829: FOR_TO
6830: IFFALSE 6916
// begin uc_side = 3 ;
6832: LD_ADDR_OWVAR 20
6836: PUSH
6837: LD_INT 3
6839: ST_TO_ADDR
// uc_nation = 3 ;
6840: LD_ADDR_OWVAR 21
6844: PUSH
6845: LD_INT 3
6847: ST_TO_ADDR
// hc_gallery =  ;
6848: LD_ADDR_OWVAR 33
6852: PUSH
6853: LD_STRING 
6855: ST_TO_ADDR
// hc_name =  ;
6856: LD_ADDR_OWVAR 26
6860: PUSH
6861: LD_STRING 
6863: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 3
6869: PPUSH
6870: LD_EXP 25
6874: PPUSH
6875: LD_EXP 26
6879: PPUSH
6880: CALL_OW 12
6884: PPUSH
6885: CALL_OW 380
// un = CreateHuman ;
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: CALL_OW 44
6898: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6899: LD_VAR 0 3
6903: PPUSH
6904: LD_INT 3
6906: PPUSH
6907: LD_INT 0
6909: PPUSH
6910: CALL_OW 49
// end ;
6914: GO 6829
6916: POP
6917: POP
// for i = 1 to 2 do
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_INT 2
6930: PUSH
6931: FOR_TO
6932: IFFALSE 7018
// begin uc_side = 3 ;
6934: LD_ADDR_OWVAR 20
6938: PUSH
6939: LD_INT 3
6941: ST_TO_ADDR
// uc_nation = 3 ;
6942: LD_ADDR_OWVAR 21
6946: PUSH
6947: LD_INT 3
6949: ST_TO_ADDR
// hc_gallery =  ;
6950: LD_ADDR_OWVAR 33
6954: PUSH
6955: LD_STRING 
6957: ST_TO_ADDR
// hc_name =  ;
6958: LD_ADDR_OWVAR 26
6962: PUSH
6963: LD_STRING 
6965: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6966: LD_INT 0
6968: PPUSH
6969: LD_INT 4
6971: PPUSH
6972: LD_EXP 25
6976: PPUSH
6977: LD_EXP 26
6981: PPUSH
6982: CALL_OW 12
6986: PPUSH
6987: CALL_OW 380
// un = CreateHuman ;
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: CALL_OW 44
7000: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7001: LD_VAR 0 3
7005: PPUSH
7006: LD_INT 3
7008: PPUSH
7009: LD_INT 0
7011: PPUSH
7012: CALL_OW 49
// end ;
7016: GO 6931
7018: POP
7019: POP
// end ; end_of_file
7020: LD_VAR 0 1
7024: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7025: LD_INT 0
7027: PPUSH
7028: PPUSH
// if exist_mode then
7029: LD_VAR 0 2
7033: IFFALSE 7052
// unit := CreateCharacter ( ident ) else
7035: LD_ADDR_VAR 0 4
7039: PUSH
7040: LD_VAR 0 1
7044: PPUSH
7045: CALL_OW 34
7049: ST_TO_ADDR
7050: GO 7067
// unit := NewCharacter ( ident ) ;
7052: LD_ADDR_VAR 0 4
7056: PUSH
7057: LD_VAR 0 1
7061: PPUSH
7062: CALL_OW 25
7066: ST_TO_ADDR
// result := unit ;
7067: LD_ADDR_VAR 0 3
7071: PUSH
7072: LD_VAR 0 4
7076: ST_TO_ADDR
// end ;
7077: LD_VAR 0 3
7081: RET
// export function Video ( mode ) ; begin
7082: LD_INT 0
7084: PPUSH
// ingame_video = mode ;
7085: LD_ADDR_OWVAR 52
7089: PUSH
7090: LD_VAR 0 1
7094: ST_TO_ADDR
// interface_hidden = mode ;
7095: LD_ADDR_OWVAR 54
7099: PUSH
7100: LD_VAR 0 1
7104: ST_TO_ADDR
// end ;
7105: LD_VAR 0 2
7109: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7110: LD_INT 0
7112: PPUSH
7113: PPUSH
7114: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7115: LD_ADDR_VAR 0 1
7119: PUSH
7120: LD_VAR 0 1
7124: PUSH
7125: LD_EXP 1
7129: PUSH
7130: LD_EXP 2
7134: PUSH
7135: LD_EXP 3
7139: PUSH
7140: LD_EXP 4
7144: PUSH
7145: LD_EXP 5
7149: PUSH
7150: LD_EXP 6
7154: PUSH
7155: LD_EXP 7
7159: PUSH
7160: LD_EXP 8
7164: PUSH
7165: LD_EXP 9
7169: PUSH
7170: LD_EXP 10
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: DIFF
7187: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7188: LD_ADDR_VAR 0 6
7192: PUSH
7193: LD_VAR 0 1
7197: PUSH
7198: LD_INT 1
7200: PPUSH
7201: LD_VAR 0 1
7205: PPUSH
7206: CALL_OW 12
7210: ARRAY
7211: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7212: LD_VAR 0 6
7216: PPUSH
7217: CALL_OW 258
7221: PUSH
7222: LD_INT 1
7224: EQUAL
7225: IFFALSE 7243
// Say ( speaker , dialogMID ) else
7227: LD_VAR 0 6
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 88
7241: GO 7257
// Say ( speaker , dialogFID ) ;
7243: LD_VAR 0 6
7247: PPUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 88
// result := speaker ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_VAR 0 6
7266: ST_TO_ADDR
// end ;
7267: LD_VAR 0 4
7271: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7272: LD_INT 0
7274: PPUSH
7275: PPUSH
7276: PPUSH
// uc_side := GetSide ( b ) ;
7277: LD_ADDR_OWVAR 20
7281: PUSH
7282: LD_VAR 0 2
7286: PPUSH
7287: CALL_OW 255
7291: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7292: LD_ADDR_OWVAR 21
7296: PUSH
7297: LD_VAR 0 2
7301: PPUSH
7302: CALL_OW 248
7306: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7307: LD_INT 0
7309: PPUSH
7310: LD_INT 1
7312: PPUSH
7313: LD_VAR 0 1
7317: PPUSH
7318: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7322: LD_ADDR_VAR 0 5
7326: PUSH
7327: LD_VAR 0 2
7331: PPUSH
7332: CALL_OW 254
7336: PUSH
7337: LD_INT 3
7339: MINUS
7340: ST_TO_ADDR
// if dir < 0 then
7341: LD_VAR 0 5
7345: PUSH
7346: LD_INT 0
7348: LESS
7349: IFFALSE 7365
// dir := 6 + dir ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 6
7358: PUSH
7359: LD_VAR 0 5
7363: PLUS
7364: ST_TO_ADDR
// un := CreateHuman ;
7365: LD_ADDR_VAR 0 4
7369: PUSH
7370: CALL_OW 44
7374: ST_TO_ADDR
// SetDir ( un , dir ) ;
7375: LD_VAR 0 4
7379: PPUSH
7380: LD_VAR 0 5
7384: PPUSH
7385: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7389: LD_VAR 0 4
7393: PPUSH
7394: LD_VAR 0 2
7398: PPUSH
7399: CALL_OW 52
// end ;
7403: LD_VAR 0 3
7407: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7408: LD_INT 0
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
// for i = 1 to count do
7414: LD_ADDR_VAR 0 8
7418: PUSH
7419: DOUBLE
7420: LD_INT 1
7422: DEC
7423: ST_TO_ADDR
7424: LD_VAR 0 6
7428: PUSH
7429: FOR_TO
7430: IFFALSE 7511
// begin uc_side = side ;
7432: LD_ADDR_OWVAR 20
7436: PUSH
7437: LD_VAR 0 1
7441: ST_TO_ADDR
// uc_nation = nation ;
7442: LD_ADDR_OWVAR 21
7446: PUSH
7447: LD_VAR 0 2
7451: ST_TO_ADDR
// hc_gallery =  ;
7452: LD_ADDR_OWVAR 33
7456: PUSH
7457: LD_STRING 
7459: ST_TO_ADDR
// hc_name =  ;
7460: LD_ADDR_OWVAR 26
7464: PUSH
7465: LD_STRING 
7467: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7468: LD_INT 0
7470: PPUSH
7471: LD_VAR 0 5
7475: PPUSH
7476: LD_VAR 0 4
7480: PPUSH
7481: CALL_OW 380
// un = CreateHuman ;
7485: LD_ADDR_VAR 0 10
7489: PUSH
7490: CALL_OW 44
7494: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7495: LD_VAR 0 10
7499: PPUSH
7500: LD_VAR 0 3
7504: PPUSH
7505: CALL_OW 52
// end ;
7509: GO 7429
7511: POP
7512: POP
// end ;
7513: LD_VAR 0 7
7517: RET
// export function PrepareDifficulty ; begin
7518: LD_INT 0
7520: PPUSH
// if Difficulty = 1 then
7521: LD_OWVAR 67
7525: PUSH
7526: LD_INT 1
7528: EQUAL
7529: IFFALSE 7547
// begin RuSolMinLevel = 4 ;
7531: LD_ADDR_EXP 25
7535: PUSH
7536: LD_INT 4
7538: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7539: LD_ADDR_EXP 26
7543: PUSH
7544: LD_INT 6
7546: ST_TO_ADDR
// end ; if Difficulty = 2 then
7547: LD_OWVAR 67
7551: PUSH
7552: LD_INT 2
7554: EQUAL
7555: IFFALSE 7625
// begin RuSolMinLevel = 5 ;
7557: LD_ADDR_EXP 25
7561: PUSH
7562: LD_INT 5
7564: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7565: LD_ADDR_EXP 26
7569: PUSH
7570: LD_INT 6
7572: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7573: LD_INT 51
7575: PPUSH
7576: LD_INT 3
7578: PPUSH
7579: LD_INT 1
7581: PPUSH
7582: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7586: LD_INT 57
7588: PPUSH
7589: LD_INT 3
7591: PPUSH
7592: LD_INT 1
7594: PPUSH
7595: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7599: LD_INT 57
7601: PPUSH
7602: LD_INT 6
7604: PPUSH
7605: LD_INT 2
7607: PPUSH
7608: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7612: LD_INT 51
7614: PPUSH
7615: LD_INT 6
7617: PPUSH
7618: LD_INT 2
7620: PPUSH
7621: CALL_OW 322
// end ; if Difficulty = 3 then
7625: LD_OWVAR 67
7629: PUSH
7630: LD_INT 3
7632: EQUAL
7633: IFFALSE 7716
// begin RuSolMinLevel = 5 ;
7635: LD_ADDR_EXP 25
7639: PUSH
7640: LD_INT 5
7642: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7643: LD_ADDR_EXP 26
7647: PUSH
7648: LD_INT 6
7650: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7651: LD_INT 57
7653: PPUSH
7654: LD_INT 3
7656: PPUSH
7657: LD_INT 1
7659: PPUSH
7660: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7664: LD_INT 51
7666: PPUSH
7667: LD_INT 3
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7677: LD_INT 52
7679: PPUSH
7680: LD_INT 3
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7690: LD_INT 57
7692: PPUSH
7693: LD_INT 6
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7703: LD_INT 52
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: LD_INT 2
7711: PPUSH
7712: CALL_OW 322
// end ; end ;
7716: LD_VAR 0 1
7720: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7721: LD_INT 0
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 22
7734: PUSH
7735: LD_INT 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 25
7744: PUSH
7745: LD_INT 2
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PPUSH
7756: CALL_OW 69
7760: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7761: LD_ADDR_VAR 0 4
7765: PUSH
7766: LD_INT 4
7768: PUSH
7769: LD_INT 75
7771: PUSH
7772: LD_INT 79
7774: PUSH
7775: LD_INT 2
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 4
7786: PUSH
7787: LD_INT 113
7789: PUSH
7790: LD_INT 94
7792: PUSH
7793: LD_INT 4
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 29
7804: PUSH
7805: LD_INT 106
7807: PUSH
7808: LD_INT 97
7810: PUSH
7811: LD_INT 3
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 26
7822: PUSH
7823: LD_INT 93
7825: PUSH
7826: LD_INT 97
7828: PUSH
7829: LD_INT 5
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 2
7840: PUSH
7841: LD_INT 100
7843: PUSH
7844: LD_INT 89
7846: PUSH
7847: LD_INT 3
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 17
7858: PUSH
7859: LD_INT 96
7861: PUSH
7862: LD_INT 89
7864: PUSH
7865: LD_INT 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 32
7876: PUSH
7877: LD_INT 78
7879: PUSH
7880: LD_INT 94
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 32
7894: PUSH
7895: LD_INT 95
7897: PUSH
7898: LD_INT 82
7900: PUSH
7901: LD_INT 3
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 32
7912: PUSH
7913: LD_INT 104
7915: PUSH
7916: LD_INT 85
7918: PUSH
7919: LD_INT 2
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 32
7930: PUSH
7931: LD_INT 81
7933: PUSH
7934: LD_INT 78
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 33
7948: PUSH
7949: LD_INT 109
7951: PUSH
7952: LD_INT 90
7954: PUSH
7955: LD_INT 3
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 33
7966: PUSH
7967: LD_INT 88
7969: PUSH
7970: LD_INT 79
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 33
7984: PUSH
7985: LD_INT 76
7987: PUSH
7988: LD_INT 87
7990: PUSH
7991: LD_INT 1
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: LD_INT 26
8002: PUSH
8003: LD_INT 96
8005: PUSH
8006: LD_INT 97
8008: PUSH
8009: LD_INT 5
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 26
8020: PUSH
8021: LD_INT 85
8023: PUSH
8024: LD_INT 84
8026: PUSH
8027: LD_INT 2
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 6
8038: PUSH
8039: LD_INT 88
8041: PUSH
8042: LD_INT 95
8044: PUSH
8045: LD_INT 0
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 19
8056: PUSH
8057: LD_INT 103
8059: PUSH
8060: LD_INT 89
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 16
8074: PUSH
8075: LD_INT 97
8077: PUSH
8078: LD_INT 86
8080: PUSH
8081: LD_INT 2
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 24
8092: PUSH
8093: LD_INT 100
8095: PUSH
8096: LD_INT 85
8098: PUSH
8099: LD_INT 3
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: ST_TO_ADDR
// for i := 1 to buildingsTab do
8129: LD_ADDR_VAR 0 2
8133: PUSH
8134: DOUBLE
8135: LD_INT 1
8137: DEC
8138: ST_TO_ADDR
8139: LD_VAR 0 4
8143: PUSH
8144: FOR_TO
8145: IFFALSE 8218
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8147: LD_VAR 0 3
8151: PPUSH
8152: LD_VAR 0 4
8156: PUSH
8157: LD_VAR 0 2
8161: ARRAY
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 4
8171: PUSH
8172: LD_VAR 0 2
8176: ARRAY
8177: PUSH
8178: LD_INT 2
8180: ARRAY
8181: PPUSH
8182: LD_VAR 0 4
8186: PUSH
8187: LD_VAR 0 2
8191: ARRAY
8192: PUSH
8193: LD_INT 3
8195: ARRAY
8196: PPUSH
8197: LD_VAR 0 4
8201: PUSH
8202: LD_VAR 0 2
8206: ARRAY
8207: PUSH
8208: LD_INT 4
8210: ARRAY
8211: PPUSH
8212: CALL_OW 205
8216: GO 8144
8218: POP
8219: POP
// end ;
8220: LD_VAR 0 1
8224: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
// for i in charactersList do
8229: LD_ADDR_VAR 0 4
8233: PUSH
8234: LD_VAR 0 1
8238: PUSH
8239: FOR_IN
8240: IFFALSE 8258
// SaveCharacters ( i , ident ) ;
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_VAR 0 2
8251: PPUSH
8252: CALL_OW 38
8256: GO 8239
8258: POP
8259: POP
// end ;
8260: LD_VAR 0 3
8264: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8265: LD_INT 0
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
8271: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8272: LD_ADDR_VAR 0 8
8276: PUSH
8277: LD_INT 48
8279: PUSH
8280: LD_INT 49
8282: PUSH
8283: LD_INT 50
8285: PUSH
8286: LD_INT 20
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 51
8294: PUSH
8295: LD_INT 52
8297: PUSH
8298: LD_INT 69
8300: PUSH
8301: LD_INT 39
8303: PUSH
8304: LD_INT 34
8306: PUSH
8307: LD_INT 40
8309: PUSH
8310: LD_INT 53
8312: PUSH
8313: LD_INT 71
8315: PUSH
8316: LD_INT 57
8318: PUSH
8319: LD_INT 58
8321: PUSH
8322: LD_INT 44
8324: PUSH
8325: LD_INT 32
8327: PUSH
8328: LD_INT 27
8330: PUSH
8331: LD_INT 23
8333: PUSH
8334: LD_INT 33
8336: PUSH
8337: LD_INT 59
8339: PUSH
8340: LD_INT 54
8342: PUSH
8343: LD_INT 55
8345: PUSH
8346: LD_INT 56
8348: PUSH
8349: LD_INT 63
8351: PUSH
8352: LD_INT 64
8354: PUSH
8355: LD_INT 65
8357: PUSH
8358: LD_INT 30
8360: PUSH
8361: LD_INT 31
8363: PUSH
8364: LD_INT 21
8366: PUSH
8367: LD_INT 22
8369: PUSH
8370: LD_INT 25
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8407: LD_ADDR_VAR 0 5
8411: PUSH
8412: DOUBLE
8413: LD_INT 1
8415: DEC
8416: ST_TO_ADDR
8417: LD_VAR 0 8
8421: PUSH
8422: FOR_TO
8423: IFFALSE 8499
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8425: LD_VAR 0 8
8429: PUSH
8430: LD_VAR 0 5
8434: ARRAY
8435: PPUSH
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 321
8445: PUSH
8446: LD_INT 1
8448: EQUAL
8449: PUSH
8450: LD_VAR 0 8
8454: PUSH
8455: LD_VAR 0 5
8459: ARRAY
8460: PPUSH
8461: LD_VAR 0 3
8465: PPUSH
8466: CALL_OW 482
8470: PUSH
8471: LD_INT 1
8473: EQUAL
8474: AND
8475: IFFALSE 8497
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8477: LD_VAR 0 2
8481: PPUSH
8482: LD_VAR 0 8
8486: PUSH
8487: LD_VAR 0 5
8491: ARRAY
8492: PPUSH
8493: CALL_OW 184
8497: GO 8422
8499: POP
8500: POP
// end ;
8501: LD_VAR 0 4
8505: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8506: LD_INT 0
8508: PPUSH
8509: PPUSH
8510: PPUSH
8511: PPUSH
8512: PPUSH
8513: PPUSH
8514: PPUSH
8515: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8516: LD_ADDR_VAR 0 6
8520: PUSH
8521: LD_VAR 0 2
8525: PPUSH
8526: LD_INT 22
8528: PUSH
8529: LD_VAR 0 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 56
8540: PUSH
8541: EMPTY
8542: LIST
8543: PUSH
8544: LD_INT 24
8546: PUSH
8547: LD_INT 700
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: LD_INT 60
8559: PUSH
8560: EMPTY
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 2
8569: PUSH
8570: LD_INT 25
8572: PUSH
8573: LD_INT 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 25
8582: PUSH
8583: LD_INT 5
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 25
8592: PUSH
8593: LD_INT 8
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 25
8602: PUSH
8603: LD_INT 9
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: PPUSH
8624: CALL_OW 70
8628: PUSH
8629: LD_EXP 24
8633: PUSH
8634: EMPTY
8635: LIST
8636: DIFF
8637: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8638: LD_ADDR_VAR 0 7
8642: PUSH
8643: LD_VAR 0 2
8647: PPUSH
8648: LD_INT 22
8650: PUSH
8651: LD_VAR 0 1
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: LD_INT 30
8662: PUSH
8663: LD_INT 32
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 58
8672: PUSH
8673: EMPTY
8674: LIST
8675: PUSH
8676: LD_INT 24
8678: PUSH
8679: LD_INT 251
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 70
8696: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8697: LD_ADDR_VAR 0 9
8701: PUSH
8702: LD_VAR 0 2
8706: PPUSH
8707: LD_INT 22
8709: PUSH
8710: LD_VAR 0 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 2
8721: PUSH
8722: LD_INT 30
8724: PUSH
8725: LD_INT 4
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 30
8734: PUSH
8735: LD_INT 5
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 24
8749: PUSH
8750: LD_INT 251
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 70
8766: ST_TO_ADDR
// if barrackList > 0 then
8767: LD_VAR 0 9
8771: PUSH
8772: LD_INT 0
8774: GREATER
8775: IFFALSE 8923
// begin if turretList = 0 then
8777: LD_VAR 0 7
8781: PUSH
8782: LD_INT 0
8784: EQUAL
8785: IFFALSE 8827
// begin if soldiers_list > 0 then
8787: LD_VAR 0 6
8791: PUSH
8792: LD_INT 0
8794: GREATER
8795: IFFALSE 8825
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8797: LD_VAR 0 6
8801: PPUSH
8802: LD_VAR 0 9
8806: PUSH
8807: LD_INT 1
8809: PPUSH
8810: LD_VAR 0 9
8814: PPUSH
8815: CALL_OW 12
8819: ARRAY
8820: PPUSH
8821: CALL_OW 120
// end else
8825: GO 8923
// begin for i in barrackList do
8827: LD_ADDR_VAR 0 4
8831: PUSH
8832: LD_VAR 0 9
8836: PUSH
8837: FOR_IN
8838: IFFALSE 8921
// begin insideUnits = UnitsInside ( i ) ;
8840: LD_ADDR_VAR 0 10
8844: PUSH
8845: LD_VAR 0 4
8849: PPUSH
8850: CALL_OW 313
8854: ST_TO_ADDR
// if insideUnits > 0 then
8855: LD_VAR 0 10
8859: PUSH
8860: LD_INT 0
8862: GREATER
8863: IFFALSE 8887
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8865: LD_VAR 0 10
8869: PUSH
8870: LD_INT 1
8872: ARRAY
8873: PPUSH
8874: LD_VAR 0 7
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: CALL_OW 120
// if soldiers_list > 0 then
8887: LD_VAR 0 6
8891: PUSH
8892: LD_INT 0
8894: GREATER
8895: IFFALSE 8919
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8897: LD_VAR 0 6
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: PPUSH
8906: LD_VAR 0 7
8910: PUSH
8911: LD_INT 1
8913: ARRAY
8914: PPUSH
8915: CALL_OW 120
// end ;
8919: GO 8837
8921: POP
8922: POP
// end ; end ; end ;
8923: LD_VAR 0 3
8927: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8928: LD_INT 0
8930: PPUSH
8931: PPUSH
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
// for i = 1 to vehCount do
8936: LD_ADDR_VAR 0 8
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 6
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9159
// begin uc_side = side ;
8954: LD_ADDR_OWVAR 20
8958: PUSH
8959: LD_VAR 0 1
8963: ST_TO_ADDR
// uc_nation = nation ;
8964: LD_ADDR_OWVAR 21
8968: PUSH
8969: LD_VAR 0 3
8973: ST_TO_ADDR
// vc_Chassis = 22 ;
8974: LD_ADDR_OWVAR 37
8978: PUSH
8979: LD_INT 22
8981: ST_TO_ADDR
// vc_engine = 1 ;
8982: LD_ADDR_OWVAR 39
8986: PUSH
8987: LD_INT 1
8989: ST_TO_ADDR
// vc_control = 1 ;
8990: LD_ADDR_OWVAR 38
8994: PUSH
8995: LD_INT 1
8997: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8998: LD_ADDR_OWVAR 40
9002: PUSH
9003: LD_INT 43
9005: PUSH
9006: LD_INT 44
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 1
9015: PPUSH
9016: LD_INT 2
9018: PPUSH
9019: CALL_OW 12
9023: ARRAY
9024: ST_TO_ADDR
// veh = CreateVehicle ;
9025: LD_ADDR_VAR 0 12
9029: PUSH
9030: CALL_OW 45
9034: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9035: LD_VAR 0 12
9039: PPUSH
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 0
9047: PPUSH
9048: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9052: LD_ADDR_EXP 32
9056: PUSH
9057: LD_EXP 32
9061: PUSH
9062: LD_VAR 0 12
9066: ADD
9067: ST_TO_ADDR
// hc_class = 3 ;
9068: LD_ADDR_OWVAR 28
9072: PUSH
9073: LD_INT 3
9075: ST_TO_ADDR
// hc_name =  ;
9076: LD_ADDR_OWVAR 26
9080: PUSH
9081: LD_STRING 
9083: ST_TO_ADDR
// hc_gallery =  ;
9084: LD_ADDR_OWVAR 33
9088: PUSH
9089: LD_STRING 
9091: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9092: LD_INT 0
9094: PPUSH
9095: LD_INT 3
9097: PPUSH
9098: LD_EXP 25
9102: PPUSH
9103: LD_EXP 26
9107: PPUSH
9108: CALL_OW 12
9112: PPUSH
9113: CALL_OW 380
// un = CreateHuman ;
9117: LD_ADDR_VAR 0 10
9121: PUSH
9122: CALL_OW 44
9126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9127: LD_VAR 0 10
9131: PPUSH
9132: LD_VAR 0 12
9136: PPUSH
9137: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9141: LD_ADDR_EXP 32
9145: PUSH
9146: LD_EXP 32
9150: PUSH
9151: LD_VAR 0 10
9155: ADD
9156: ST_TO_ADDR
// end ;
9157: GO 8951
9159: POP
9160: POP
// end ;
9161: LD_VAR 0 7
9165: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9166: LD_INT 0
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9174: LD_VAR 0 2
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_VAR 0 1
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: PPUSH
9194: CALL_OW 70
9198: PUSH
9199: LD_INT 0
9201: EQUAL
9202: PUSH
9203: LD_EXP 32
9207: AND
9208: IFFALSE 9495
// begin for i in defenders_list do
9210: LD_ADDR_VAR 0 4
9214: PUSH
9215: LD_EXP 32
9219: PUSH
9220: FOR_IN
9221: IFFALSE 9493
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9223: LD_VAR 0 4
9227: PPUSH
9228: LD_INT 63
9230: PPUSH
9231: LD_INT 75
9233: PPUSH
9234: CALL_OW 297
9238: PUSH
9239: LD_INT 8
9241: GREATER
9242: PUSH
9243: LD_VAR 0 4
9247: PPUSH
9248: CALL_OW 314
9252: NOT
9253: AND
9254: IFFALSE 9273
// ComMoveXY ( i , 63 , 75 ) else
9256: LD_VAR 0 4
9260: PPUSH
9261: LD_INT 63
9263: PPUSH
9264: LD_INT 75
9266: PPUSH
9267: CALL_OW 111
9271: GO 9491
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9273: LD_VAR 0 4
9277: PPUSH
9278: CALL_OW 257
9282: PUSH
9283: LD_INT 3
9285: EQUAL
9286: PUSH
9287: LD_VAR 0 4
9291: PPUSH
9292: CALL_OW 310
9296: NOT
9297: AND
9298: PUSH
9299: LD_VAR 0 4
9303: PPUSH
9304: CALL_OW 314
9308: NOT
9309: AND
9310: IFFALSE 9363
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9312: LD_VAR 0 4
9316: PPUSH
9317: LD_EXP 32
9321: PPUSH
9322: LD_INT 58
9324: PUSH
9325: EMPTY
9326: LIST
9327: PUSH
9328: LD_INT 24
9330: PUSH
9331: LD_INT 1000
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PPUSH
9342: CALL_OW 72
9346: PPUSH
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 74
9356: PPUSH
9357: CALL_OW 120
9361: GO 9491
// if GetFuel ( i ) < 100 then
9363: LD_VAR 0 4
9367: PPUSH
9368: CALL_OW 261
9372: PUSH
9373: LD_INT 100
9375: LESS
9376: IFFALSE 9392
// SetFuel ( defenders_list , 100 ) else
9378: LD_EXP 32
9382: PPUSH
9383: LD_INT 100
9385: PPUSH
9386: CALL_OW 240
9390: GO 9491
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9392: LD_VAR 0 4
9396: PPUSH
9397: CALL_OW 263
9401: PUSH
9402: LD_INT 1
9404: EQUAL
9405: PUSH
9406: LD_VAR 0 4
9410: PPUSH
9411: CALL_OW 256
9415: PUSH
9416: LD_INT 990
9418: LESS
9419: AND
9420: IFFALSE 9491
// begin veh := i ;
9422: LD_ADDR_VAR 0 7
9426: PUSH
9427: LD_VAR 0 4
9431: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9432: LD_ADDR_VAR 0 8
9436: PUSH
9437: LD_VAR 0 4
9441: PPUSH
9442: CALL_OW 311
9446: ST_TO_ADDR
// if veh then
9447: LD_VAR 0 7
9451: IFFALSE 9491
// begin ComMoveXY ( i , 63 , 75 ) ;
9453: LD_VAR 0 4
9457: PPUSH
9458: LD_INT 63
9460: PPUSH
9461: LD_INT 75
9463: PPUSH
9464: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9468: LD_VAR 0 7
9472: PPUSH
9473: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9477: LD_VAR 0 8
9481: PPUSH
9482: LD_VAR 0 7
9486: PPUSH
9487: CALL_OW 189
// end ; end ; end ;
9491: GO 9220
9493: POP
9494: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9495: LD_ADDR_VAR 0 6
9499: PUSH
9500: LD_VAR 0 2
9504: PPUSH
9505: LD_INT 22
9507: PUSH
9508: LD_VAR 0 1
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: PPUSH
9520: CALL_OW 70
9524: ST_TO_ADDR
// if tmp and defenders_list then
9525: LD_VAR 0 6
9529: PUSH
9530: LD_EXP 32
9534: AND
9535: IFFALSE 9704
// for i in defenders_list do
9537: LD_ADDR_VAR 0 4
9541: PUSH
9542: LD_EXP 32
9546: PUSH
9547: FOR_IN
9548: IFFALSE 9702
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 257
9559: PUSH
9560: LD_INT 3
9562: EQUAL
9563: PUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 310
9573: NOT
9574: AND
9575: IFFALSE 9614
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9577: LD_VAR 0 4
9581: PPUSH
9582: LD_EXP 32
9586: PPUSH
9587: LD_INT 58
9589: PUSH
9590: EMPTY
9591: LIST
9592: PPUSH
9593: CALL_OW 72
9597: PPUSH
9598: LD_VAR 0 4
9602: PPUSH
9603: CALL_OW 74
9607: PPUSH
9608: CALL_OW 120
9612: GO 9700
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9614: LD_VAR 0 4
9618: PPUSH
9619: CALL_OW 314
9623: NOT
9624: PUSH
9625: LD_VAR 0 4
9629: PPUSH
9630: LD_VAR 0 2
9634: PPUSH
9635: CALL_OW 308
9639: AND
9640: IFFALSE 9668
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9642: LD_VAR 0 4
9646: PPUSH
9647: LD_VAR 0 6
9651: PPUSH
9652: LD_VAR 0 4
9656: PPUSH
9657: CALL_OW 74
9661: PPUSH
9662: CALL_OW 115
9666: GO 9700
// if not IsInArea ( i , defenseArea ) then
9668: LD_VAR 0 4
9672: PPUSH
9673: LD_VAR 0 2
9677: PPUSH
9678: CALL_OW 308
9682: NOT
9683: IFFALSE 9700
// ComMoveXY ( i , 63 , 75 ) ;
9685: LD_VAR 0 4
9689: PPUSH
9690: LD_INT 63
9692: PPUSH
9693: LD_INT 75
9695: PPUSH
9696: CALL_OW 111
// end ;
9700: GO 9547
9702: POP
9703: POP
// end ;
9704: LD_VAR 0 3
9708: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9709: LD_INT 0
9711: PPUSH
9712: PPUSH
9713: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9714: LD_INT 22
9716: PUSH
9717: LD_VAR 0 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 21
9728: PUSH
9729: LD_INT 2
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PPUSH
9740: CALL_OW 69
9744: PUSH
9745: LD_VAR 0 3
9749: LESSEQUAL
9750: IFFALSE 9858
// begin for i = 1 to vehCount do
9752: LD_ADDR_VAR 0 9
9756: PUSH
9757: DOUBLE
9758: LD_INT 1
9760: DEC
9761: ST_TO_ADDR
9762: LD_VAR 0 3
9766: PUSH
9767: FOR_TO
9768: IFFALSE 9856
// begin weapon = weaponTab [ i ] ;
9770: LD_ADDR_VAR 0 10
9774: PUSH
9775: LD_VAR 0 4
9779: PUSH
9780: LD_VAR 0 9
9784: ARRAY
9785: ST_TO_ADDR
// if weapon = 46 then
9786: LD_VAR 0 10
9790: PUSH
9791: LD_INT 46
9793: EQUAL
9794: IFFALSE 9825
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9796: LD_VAR 0 2
9800: PPUSH
9801: LD_INT 24
9803: PPUSH
9804: LD_VAR 0 5
9808: PPUSH
9809: LD_VAR 0 6
9813: PPUSH
9814: LD_VAR 0 10
9818: PPUSH
9819: CALL_OW 185
// end else
9823: GO 9854
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9825: LD_VAR 0 2
9829: PPUSH
9830: LD_VAR 0 7
9834: PPUSH
9835: LD_VAR 0 5
9839: PPUSH
9840: LD_VAR 0 6
9844: PPUSH
9845: LD_VAR 0 10
9849: PPUSH
9850: CALL_OW 185
// end ; end ;
9854: GO 9767
9856: POP
9857: POP
// end ; end ;
9858: LD_VAR 0 8
9862: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9863: LD_INT 0
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9869: LD_ADDR_VAR 0 8
9873: PUSH
9874: LD_INT 22
9876: PUSH
9877: LD_VAR 0 1
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 21
9888: PUSH
9889: LD_INT 2
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 3
9898: PUSH
9899: LD_INT 24
9901: PUSH
9902: LD_INT 650
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: PPUSH
9918: CALL_OW 69
9922: ST_TO_ADDR
// if damageVehicles > 0 then
9923: LD_VAR 0 8
9927: PUSH
9928: LD_INT 0
9930: GREATER
9931: IFFALSE 9952
// ComMoveXY ( damageVehicles , repX , repY ) ;
9933: LD_VAR 0 8
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: LD_VAR 0 4
9947: PPUSH
9948: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9952: LD_VAR 0 8
9956: PPUSH
9957: LD_INT 95
9959: PUSH
9960: LD_VAR 0 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 3
9971: PUSH
9972: LD_INT 58
9974: PUSH
9975: EMPTY
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 72
9990: PUSH
9991: LD_INT 0
9993: GREATER
9994: IFFALSE 10061
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9996: LD_ADDR_VAR 0 6
10000: PUSH
10001: LD_VAR 0 8
10005: PPUSH
10006: LD_INT 95
10008: PUSH
10009: LD_VAR 0 2
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 58
10023: PUSH
10024: EMPTY
10025: LIST
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PPUSH
10035: CALL_OW 72
10039: PUSH
10040: FOR_IN
10041: IFFALSE 10059
// ComExitVehicle ( UnitsInside ( i ) ) ;
10043: LD_VAR 0 6
10047: PPUSH
10048: CALL_OW 313
10052: PPUSH
10053: CALL_OW 121
10057: GO 10040
10059: POP
10060: POP
// end ;
10061: LD_VAR 0 5
10065: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
10074: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10075: LD_ADDR_VAR 0 8
10079: PUSH
10080: LD_INT 22
10082: PUSH
10083: LD_VAR 0 1
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: LD_INT 21
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 24
10104: PUSH
10105: LD_INT 250
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 3
10114: PUSH
10115: LD_INT 58
10117: PUSH
10118: EMPTY
10119: LIST
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: LD_INT 34
10126: PUSH
10127: LD_INT 43
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 34
10136: PUSH
10137: LD_INT 44
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 34
10146: PUSH
10147: LD_INT 46
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10176: LD_INT 22
10178: PUSH
10179: LD_VAR 0 1
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 2
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 24
10200: PUSH
10201: LD_INT 1000
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 3
10210: PUSH
10211: LD_INT 58
10213: PUSH
10214: EMPTY
10215: LIST
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: LD_INT 34
10222: PUSH
10223: LD_INT 43
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 34
10232: PUSH
10233: LD_INT 44
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 34
10242: PUSH
10243: LD_INT 46
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 69
10271: PUSH
10272: LD_INT 5
10274: PUSH
10275: LD_INT 6
10277: PUSH
10278: LD_INT 7
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: PUSH
10286: LD_OWVAR 67
10290: ARRAY
10291: GREATEREQUAL
10292: IFFALSE 10857
// repeat wait ( 0 0$1 ) ;
10294: LD_INT 35
10296: PPUSH
10297: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10301: LD_ADDR_VAR 0 8
10305: PUSH
10306: LD_INT 22
10308: PUSH
10309: LD_VAR 0 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 2
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 24
10330: PUSH
10331: LD_INT 250
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 2
10340: PUSH
10341: LD_INT 34
10343: PUSH
10344: LD_INT 43
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 34
10353: PUSH
10354: LD_INT 44
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 34
10363: PUSH
10364: LD_INT 46
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 58
10382: PUSH
10383: EMPTY
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10402: LD_INT 22
10404: PUSH
10405: LD_VAR 0 1
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 95
10416: PUSH
10417: LD_VAR 0 2
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PPUSH
10430: CALL_OW 69
10434: NOT
10435: PUSH
10436: LD_VAR 0 11
10440: PUSH
10441: LD_INT 0
10443: EQUAL
10444: AND
10445: IFFALSE 10500
// for i := 1 to wayX do
10447: LD_ADDR_VAR 0 6
10451: PUSH
10452: DOUBLE
10453: LD_INT 1
10455: DEC
10456: ST_TO_ADDR
10457: LD_VAR 0 3
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10498
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10465: LD_VAR 0 8
10469: PPUSH
10470: LD_VAR 0 3
10474: PUSH
10475: LD_VAR 0 6
10479: ARRAY
10480: PPUSH
10481: LD_VAR 0 4
10485: PUSH
10486: LD_VAR 0 6
10490: ARRAY
10491: PPUSH
10492: CALL_OW 114
10496: GO 10462
10498: POP
10499: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10500: LD_INT 22
10502: PUSH
10503: LD_VAR 0 1
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 95
10514: PUSH
10515: LD_VAR 0 2
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: IFFALSE 10756
// begin seeEnemy = 1 ;
10534: LD_ADDR_VAR 0 11
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// for j in vehiclesOK do
10542: LD_ADDR_VAR 0 7
10546: PUSH
10547: LD_VAR 0 8
10551: PUSH
10552: FOR_IN
10553: IFFALSE 10754
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10555: LD_ADDR_VAR 0 9
10559: PUSH
10560: LD_INT 81
10562: PUSH
10563: LD_VAR 0 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 101
10574: PUSH
10575: LD_INT 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PPUSH
10586: CALL_OW 69
10590: PPUSH
10591: LD_VAR 0 7
10595: PPUSH
10596: CALL_OW 74
10600: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10601: LD_ADDR_VAR 0 10
10605: PUSH
10606: LD_INT 81
10608: PUSH
10609: LD_VAR 0 1
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 101
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: LD_INT 59
10633: PUSH
10634: EMPTY
10635: LIST
10636: PUSH
10637: LD_INT 21
10639: PUSH
10640: LD_INT 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 21
10649: PUSH
10650: LD_INT 2
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: PPUSH
10671: CALL_OW 69
10675: PPUSH
10676: LD_VAR 0 7
10680: PPUSH
10681: CALL_OW 74
10685: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10686: LD_VAR 0 7
10690: PPUSH
10691: LD_VAR 0 9
10695: PPUSH
10696: CALL_OW 296
10700: PUSH
10701: LD_INT 8
10703: PLUS
10704: PUSH
10705: LD_VAR 0 7
10709: PPUSH
10710: LD_VAR 0 10
10714: PPUSH
10715: CALL_OW 296
10719: LESS
10720: IFFALSE 10738
// ComAttackUnit ( j , target1 ) else
10722: LD_VAR 0 7
10726: PPUSH
10727: LD_VAR 0 9
10731: PPUSH
10732: CALL_OW 115
10736: GO 10752
// ComAttackUnit ( j , target2 ) ;
10738: LD_VAR 0 7
10742: PPUSH
10743: LD_VAR 0 10
10747: PPUSH
10748: CALL_OW 115
// end ;
10752: GO 10552
10754: POP
10755: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10756: LD_INT 22
10758: PUSH
10759: LD_VAR 0 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 21
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 24
10780: PUSH
10781: LD_INT 250
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 2
10790: PUSH
10791: LD_INT 34
10793: PUSH
10794: LD_INT 43
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 34
10803: PUSH
10804: LD_INT 44
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 34
10813: PUSH
10814: LD_INT 46
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: LD_INT 58
10832: PUSH
10833: EMPTY
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: PPUSH
10847: CALL_OW 69
10851: PUSH
10852: LD_INT 0
10854: EQUAL
10855: IFFALSE 10294
// seeEnemy = 0 ;
10857: LD_ADDR_VAR 0 11
10861: PUSH
10862: LD_INT 0
10864: ST_TO_ADDR
// end ;
10865: LD_VAR 0 5
10869: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10870: LD_INT 0
10872: PPUSH
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
10877: PPUSH
// repeat wait ( 0 0$1 ) ;
10878: LD_INT 35
10880: PPUSH
10881: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10885: LD_ADDR_VAR 0 7
10889: PUSH
10890: LD_INT 22
10892: PUSH
10893: LD_VAR 0 1
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 21
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 24
10914: PUSH
10915: LD_INT 651
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: PPUSH
10927: CALL_OW 69
10931: ST_TO_ADDR
// for j in vehiclesOK do
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_VAR 0 7
10941: PUSH
10942: FOR_IN
10943: IFFALSE 11144
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10945: LD_ADDR_VAR 0 5
10949: PUSH
10950: LD_INT 81
10952: PUSH
10953: LD_VAR 0 1
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 101
10964: PUSH
10965: LD_INT 1
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PPUSH
10976: CALL_OW 69
10980: PPUSH
10981: LD_VAR 0 4
10985: PPUSH
10986: CALL_OW 74
10990: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10991: LD_ADDR_VAR 0 6
10995: PUSH
10996: LD_INT 81
10998: PUSH
10999: LD_VAR 0 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 101
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 2
11020: PUSH
11021: LD_INT 59
11023: PUSH
11024: EMPTY
11025: LIST
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 21
11039: PUSH
11040: LD_INT 2
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: PPUSH
11061: CALL_OW 69
11065: PPUSH
11066: LD_VAR 0 4
11070: PPUSH
11071: CALL_OW 74
11075: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11076: LD_VAR 0 4
11080: PPUSH
11081: LD_VAR 0 5
11085: PPUSH
11086: CALL_OW 296
11090: PUSH
11091: LD_INT 8
11093: PLUS
11094: PUSH
11095: LD_VAR 0 4
11099: PPUSH
11100: LD_VAR 0 6
11104: PPUSH
11105: CALL_OW 296
11109: LESS
11110: IFFALSE 11128
// ComAttackUnit ( j , target1 ) else
11112: LD_VAR 0 4
11116: PPUSH
11117: LD_VAR 0 5
11121: PPUSH
11122: CALL_OW 115
11126: GO 11142
// ComAttackUnit ( j , target2 ) ;
11128: LD_VAR 0 4
11132: PPUSH
11133: LD_VAR 0 6
11137: PPUSH
11138: CALL_OW 115
// end ;
11142: GO 10942
11144: POP
11145: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11146: LD_INT 22
11148: PUSH
11149: LD_VAR 0 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 21
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: LD_INT 250
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 69
11187: PUSH
11188: LD_INT 0
11190: EQUAL
11191: IFFALSE 10878
// end ;
11193: LD_VAR 0 2
11197: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11198: LD_INT 0
11200: PPUSH
11201: PPUSH
11202: PPUSH
11203: PPUSH
11204: PPUSH
11205: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11206: LD_ADDR_VAR 0 8
11210: PUSH
11211: LD_VAR 0 2
11215: PPUSH
11216: CALL_OW 313
11220: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11221: LD_ADDR_VAR 0 9
11225: PUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: LD_INT 22
11233: PUSH
11234: LD_VAR 0 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 25
11245: PUSH
11246: LD_INT 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 24
11255: PUSH
11256: LD_INT 750
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 3
11265: PUSH
11266: LD_INT 54
11268: PUSH
11269: EMPTY
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: PPUSH
11282: CALL_OW 70
11286: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11287: LD_ADDR_VAR 0 6
11291: PUSH
11292: LD_VAR 0 3
11296: PPUSH
11297: LD_INT 22
11299: PUSH
11300: LD_VAR 0 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 21
11311: PUSH
11312: LD_INT 3
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 3
11321: PUSH
11322: LD_INT 24
11324: PUSH
11325: LD_INT 1000
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: PPUSH
11344: CALL_OW 70
11348: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11349: LD_VAR 0 6
11353: NOT
11354: PUSH
11355: LD_INT 22
11357: PUSH
11358: LD_VAR 0 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 25
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 24
11379: PUSH
11380: LD_INT 250
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: NOT
11397: AND
11398: IFFALSE 11402
// exit ;
11400: GO 11599
// if buildings_list > 0 and engineerOkInside then
11402: LD_VAR 0 6
11406: PUSH
11407: LD_INT 0
11409: GREATER
11410: PUSH
11411: LD_VAR 0 8
11415: AND
11416: IFFALSE 11442
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11418: LD_VAR 0 8
11422: PPUSH
11423: LD_INT 25
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PPUSH
11433: CALL_OW 72
11437: PPUSH
11438: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11442: LD_VAR 0 6
11446: PUSH
11447: LD_INT 0
11449: GREATER
11450: PUSH
11451: LD_VAR 0 9
11455: PUSH
11456: LD_INT 0
11458: GREATER
11459: AND
11460: IFFALSE 11480
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11462: LD_VAR 0 9
11466: PPUSH
11467: LD_VAR 0 6
11471: PUSH
11472: LD_INT 1
11474: ARRAY
11475: PPUSH
11476: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11480: LD_VAR 0 6
11484: PUSH
11485: LD_INT 0
11487: EQUAL
11488: PUSH
11489: LD_VAR 0 4
11493: PUSH
11494: LD_INT 0
11496: EQUAL
11497: AND
11498: PUSH
11499: LD_VAR 0 9
11503: PUSH
11504: LD_INT 0
11506: GREATER
11507: AND
11508: IFFALSE 11524
// ComEnterUnit ( engineerOkOutside , building ) ;
11510: LD_VAR 0 9
11514: PPUSH
11515: LD_VAR 0 2
11519: PPUSH
11520: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11524: LD_VAR 0 9
11528: PUSH
11529: LD_INT 0
11531: GREATER
11532: PUSH
11533: LD_VAR 0 6
11537: PUSH
11538: LD_INT 0
11540: EQUAL
11541: AND
11542: PUSH
11543: LD_VAR 0 4
11547: PUSH
11548: LD_INT 0
11550: GREATER
11551: AND
11552: IFFALSE 11599
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11554: LD_VAR 0 9
11558: PPUSH
11559: LD_VAR 0 4
11563: PUSH
11564: LD_INT 1
11566: ARRAY
11567: PPUSH
11568: LD_VAR 0 4
11572: PUSH
11573: LD_INT 2
11575: ARRAY
11576: PPUSH
11577: LD_VAR 0 4
11581: PUSH
11582: LD_INT 3
11584: ARRAY
11585: PPUSH
11586: LD_VAR 0 4
11590: PUSH
11591: LD_INT 4
11593: ARRAY
11594: PPUSH
11595: CALL_OW 145
// end ;
11599: LD_VAR 0 5
11603: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11604: LD_INT 0
11606: PPUSH
11607: PPUSH
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11615: LD_ADDR_VAR 0 6
11619: PUSH
11620: LD_INT 22
11622: PUSH
11623: LD_VAR 0 1
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 25
11634: PUSH
11635: LD_INT 4
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 23
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 24
11654: PUSH
11655: LD_INT 251
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11673: LD_ADDR_VAR 0 7
11677: PUSH
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_VAR 0 1
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 23
11697: PUSH
11698: LD_INT 2
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 25
11707: PUSH
11708: LD_INT 4
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 50
11717: PUSH
11718: EMPTY
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: PPUSH
11727: CALL_OW 70
11731: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11732: LD_ADDR_VAR 0 10
11736: PUSH
11737: LD_VAR 0 3
11741: PPUSH
11742: LD_INT 22
11744: PUSH
11745: LD_VAR 0 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 21
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 3
11766: PUSH
11767: LD_INT 25
11769: PUSH
11770: LD_INT 3
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 3
11783: PUSH
11784: LD_INT 24
11786: PUSH
11787: LD_INT 750
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 70
11808: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11809: LD_ADDR_VAR 0 11
11813: PUSH
11814: LD_VAR 0 2
11818: PPUSH
11819: LD_INT 22
11821: PUSH
11822: LD_VAR 0 1
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 21
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 3
11843: PUSH
11844: LD_INT 25
11846: PUSH
11847: LD_INT 3
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: LD_INT 24
11863: PUSH
11864: LD_INT 1000
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: PPUSH
11881: CALL_OW 70
11885: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11886: LD_VAR 0 10
11890: NOT
11891: PUSH
11892: LD_VAR 0 11
11896: NOT
11897: AND
11898: PUSH
11899: LD_VAR 0 6
11903: NOT
11904: AND
11905: IFFALSE 11909
// exit ;
11907: GO 12143
// if damageUnits > 0 and sci_list > 0 then
11909: LD_VAR 0 10
11913: PUSH
11914: LD_INT 0
11916: GREATER
11917: PUSH
11918: LD_VAR 0 6
11922: PUSH
11923: LD_INT 0
11925: GREATER
11926: AND
11927: IFFALSE 11943
// ComMoveToArea ( damageUnits , healArea ) ;
11929: LD_VAR 0 10
11933: PPUSH
11934: LD_VAR 0 2
11938: PPUSH
11939: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11943: LD_VAR 0 11
11947: PUSH
11948: LD_INT 0
11950: GREATER
11951: PUSH
11952: LD_VAR 0 6
11956: PUSH
11957: LD_INT 0
11959: GREATER
11960: AND
11961: IFFALSE 11972
// ComExitBuilding ( sci_list ) ;
11963: LD_VAR 0 6
11967: PPUSH
11968: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11972: LD_VAR 0 11
11976: PUSH
11977: LD_INT 0
11979: GREATER
11980: PUSH
11981: LD_VAR 0 7
11985: PUSH
11986: LD_INT 0
11988: GREATER
11989: AND
11990: IFFALSE 12010
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11992: LD_VAR 0 7
11996: PPUSH
11997: LD_VAR 0 11
12001: PUSH
12002: LD_INT 1
12004: ARRAY
12005: PPUSH
12006: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12010: LD_VAR 0 10
12014: PUSH
12015: LD_INT 0
12017: EQUAL
12018: PUSH
12019: LD_VAR 0 11
12023: PUSH
12024: LD_INT 0
12026: EQUAL
12027: AND
12028: PUSH
12029: LD_VAR 0 7
12033: PUSH
12034: LD_INT 0
12036: GREATER
12037: AND
12038: IFFALSE 12143
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12040: LD_ADDR_VAR 0 12
12044: PUSH
12045: LD_INT 22
12047: PUSH
12048: LD_VAR 0 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 8
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 69
12086: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12087: LD_ADDR_VAR 0 13
12091: PUSH
12092: LD_INT 1
12094: PPUSH
12095: LD_VAR 0 12
12099: PPUSH
12100: CALL_OW 12
12104: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12105: LD_VAR 0 7
12109: PPUSH
12110: LD_INT 3
12112: PUSH
12113: LD_INT 60
12115: PUSH
12116: EMPTY
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 72
12127: PPUSH
12128: LD_VAR 0 12
12132: PUSH
12133: LD_VAR 0 13
12137: ARRAY
12138: PPUSH
12139: CALL_OW 120
// end ; end ;
12143: LD_VAR 0 5
12147: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12155: LD_ADDR_VAR 0 6
12159: PUSH
12160: LD_INT 22
12162: PUSH
12163: LD_VAR 0 1
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 2
12174: PUSH
12175: LD_INT 30
12177: PUSH
12178: LD_INT 31
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 30
12187: PUSH
12188: LD_INT 32
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 30
12197: PUSH
12198: LD_INT 33
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 30
12207: PUSH
12208: LD_INT 4
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 30
12217: PUSH
12218: LD_INT 5
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 69
12241: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12242: LD_ADDR_VAR 0 7
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_VAR 0 2
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 21
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 58
12271: PUSH
12272: EMPTY
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: PPUSH
12280: CALL_OW 69
12284: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12285: LD_VAR 0 6
12289: PUSH
12290: LD_INT 0
12292: GREATER
12293: PUSH
12294: LD_VAR 0 7
12298: PUSH
12299: LD_INT 0
12301: GREATER
12302: AND
12303: IFFALSE 12373
// begin for i in turretsList do
12305: LD_ADDR_VAR 0 4
12309: PUSH
12310: LD_VAR 0 6
12314: PUSH
12315: FOR_IN
12316: IFFALSE 12371
// begin for j in enemyBuildings do
12318: LD_ADDR_VAR 0 5
12322: PUSH
12323: LD_VAR 0 7
12327: PUSH
12328: FOR_IN
12329: IFFALSE 12367
// begin if GetDistUnits ( i , j ) < 20 then
12331: LD_VAR 0 4
12335: PPUSH
12336: LD_VAR 0 5
12340: PPUSH
12341: CALL_OW 296
12345: PUSH
12346: LD_INT 20
12348: LESS
12349: IFFALSE 12365
// begin ComAttackUnit ( i , j ) ;
12351: LD_VAR 0 4
12355: PPUSH
12356: LD_VAR 0 5
12360: PPUSH
12361: CALL_OW 115
// end ; end ;
12365: GO 12328
12367: POP
12368: POP
// end ;
12369: GO 12315
12371: POP
12372: POP
// end ; end ;
12373: LD_VAR 0 3
12377: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12378: LD_INT 0
12380: PPUSH
12381: PPUSH
12382: PPUSH
12383: PPUSH
12384: PPUSH
12385: PPUSH
12386: PPUSH
12387: PPUSH
12388: PPUSH
12389: PPUSH
12390: PPUSH
// for i = 1 to medicCount do
12391: LD_ADDR_VAR 0 14
12395: PUSH
12396: DOUBLE
12397: LD_INT 1
12399: DEC
12400: ST_TO_ADDR
12401: LD_VAR 0 7
12405: PUSH
12406: FOR_TO
12407: IFFALSE 12489
// begin uc_side = side ;
12409: LD_ADDR_OWVAR 20
12413: PUSH
12414: LD_VAR 0 1
12418: ST_TO_ADDR
// uc_nation = nation ;
12419: LD_ADDR_OWVAR 21
12423: PUSH
12424: LD_VAR 0 2
12428: ST_TO_ADDR
// hc_name =  ;
12429: LD_ADDR_OWVAR 26
12433: PUSH
12434: LD_STRING 
12436: ST_TO_ADDR
// hc_gallery =  ;
12437: LD_ADDR_OWVAR 33
12441: PUSH
12442: LD_STRING 
12444: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12445: LD_INT 0
12447: PPUSH
12448: LD_INT 4
12450: PPUSH
12451: LD_VAR 0 8
12455: PPUSH
12456: CALL_OW 380
// un = CreateHuman ;
12460: LD_ADDR_VAR 0 16
12464: PUSH
12465: CALL_OW 44
12469: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12470: LD_VAR 0 16
12474: PPUSH
12475: LD_VAR 0 9
12479: PPUSH
12480: LD_INT 0
12482: PPUSH
12483: CALL_OW 49
// end ;
12487: GO 12406
12489: POP
12490: POP
// for i = 1 to soldierCount do
12491: LD_ADDR_VAR 0 14
12495: PUSH
12496: DOUBLE
12497: LD_INT 1
12499: DEC
12500: ST_TO_ADDR
12501: LD_VAR 0 3
12505: PUSH
12506: FOR_TO
12507: IFFALSE 12589
// begin uc_side = side ;
12509: LD_ADDR_OWVAR 20
12513: PUSH
12514: LD_VAR 0 1
12518: ST_TO_ADDR
// uc_nation = nation ;
12519: LD_ADDR_OWVAR 21
12523: PUSH
12524: LD_VAR 0 2
12528: ST_TO_ADDR
// hc_name =  ;
12529: LD_ADDR_OWVAR 26
12533: PUSH
12534: LD_STRING 
12536: ST_TO_ADDR
// hc_gallery =  ;
12537: LD_ADDR_OWVAR 33
12541: PUSH
12542: LD_STRING 
12544: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12545: LD_INT 0
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: LD_VAR 0 8
12555: PPUSH
12556: CALL_OW 380
// un = CreateHuman ;
12560: LD_ADDR_VAR 0 16
12564: PUSH
12565: CALL_OW 44
12569: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12570: LD_VAR 0 16
12574: PPUSH
12575: LD_VAR 0 9
12579: PPUSH
12580: LD_INT 0
12582: PPUSH
12583: CALL_OW 49
// end ;
12587: GO 12506
12589: POP
12590: POP
// for i = 1 to sniperCount do
12591: LD_ADDR_VAR 0 14
12595: PUSH
12596: DOUBLE
12597: LD_INT 1
12599: DEC
12600: ST_TO_ADDR
12601: LD_VAR 0 4
12605: PUSH
12606: FOR_TO
12607: IFFALSE 12689
// begin uc_side = side ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_VAR 0 1
12618: ST_TO_ADDR
// uc_nation = nation ;
12619: LD_ADDR_OWVAR 21
12623: PUSH
12624: LD_VAR 0 2
12628: ST_TO_ADDR
// hc_name =  ;
12629: LD_ADDR_OWVAR 26
12633: PUSH
12634: LD_STRING 
12636: ST_TO_ADDR
// hc_gallery =  ;
12637: LD_ADDR_OWVAR 33
12641: PUSH
12642: LD_STRING 
12644: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12645: LD_INT 0
12647: PPUSH
12648: LD_INT 5
12650: PPUSH
12651: LD_VAR 0 8
12655: PPUSH
12656: CALL_OW 380
// un = CreateHuman ;
12660: LD_ADDR_VAR 0 16
12664: PUSH
12665: CALL_OW 44
12669: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12670: LD_VAR 0 16
12674: PPUSH
12675: LD_VAR 0 9
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 49
// end ;
12687: GO 12606
12689: POP
12690: POP
// for i = 1 to bazookCount do
12691: LD_ADDR_VAR 0 14
12695: PUSH
12696: DOUBLE
12697: LD_INT 1
12699: DEC
12700: ST_TO_ADDR
12701: LD_VAR 0 5
12705: PUSH
12706: FOR_TO
12707: IFFALSE 12789
// begin uc_side = side ;
12709: LD_ADDR_OWVAR 20
12713: PUSH
12714: LD_VAR 0 1
12718: ST_TO_ADDR
// uc_nation = nation ;
12719: LD_ADDR_OWVAR 21
12723: PUSH
12724: LD_VAR 0 2
12728: ST_TO_ADDR
// hc_name =  ;
12729: LD_ADDR_OWVAR 26
12733: PUSH
12734: LD_STRING 
12736: ST_TO_ADDR
// hc_gallery =  ;
12737: LD_ADDR_OWVAR 33
12741: PUSH
12742: LD_STRING 
12744: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12745: LD_INT 0
12747: PPUSH
12748: LD_INT 9
12750: PPUSH
12751: LD_VAR 0 8
12755: PPUSH
12756: CALL_OW 380
// un = CreateHuman ;
12760: LD_ADDR_VAR 0 16
12764: PUSH
12765: CALL_OW 44
12769: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12770: LD_VAR 0 16
12774: PPUSH
12775: LD_VAR 0 9
12779: PPUSH
12780: LD_INT 0
12782: PPUSH
12783: CALL_OW 49
// end ;
12787: GO 12706
12789: POP
12790: POP
// for i = 1 to mortalCount do
12791: LD_ADDR_VAR 0 14
12795: PUSH
12796: DOUBLE
12797: LD_INT 1
12799: DEC
12800: ST_TO_ADDR
12801: LD_VAR 0 6
12805: PUSH
12806: FOR_TO
12807: IFFALSE 12889
// begin uc_side = side ;
12809: LD_ADDR_OWVAR 20
12813: PUSH
12814: LD_VAR 0 1
12818: ST_TO_ADDR
// uc_nation = nation ;
12819: LD_ADDR_OWVAR 21
12823: PUSH
12824: LD_VAR 0 2
12828: ST_TO_ADDR
// hc_name =  ;
12829: LD_ADDR_OWVAR 26
12833: PUSH
12834: LD_STRING 
12836: ST_TO_ADDR
// hc_gallery =  ;
12837: LD_ADDR_OWVAR 33
12841: PUSH
12842: LD_STRING 
12844: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12845: LD_INT 0
12847: PPUSH
12848: LD_INT 8
12850: PPUSH
12851: LD_VAR 0 8
12855: PPUSH
12856: CALL_OW 380
// un = CreateHuman ;
12860: LD_ADDR_VAR 0 16
12864: PUSH
12865: CALL_OW 44
12869: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12870: LD_VAR 0 16
12874: PPUSH
12875: LD_VAR 0 9
12879: PPUSH
12880: LD_INT 0
12882: PPUSH
12883: CALL_OW 49
// end ;
12887: GO 12806
12889: POP
12890: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12891: LD_ADDR_VAR 0 19
12895: PUSH
12896: LD_INT 22
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: LD_INT 25
12913: PUSH
12914: LD_INT 1
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 5
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 25
12933: PUSH
12934: LD_INT 8
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 25
12943: PUSH
12944: LD_INT 9
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12967: LD_ADDR_VAR 0 18
12971: PUSH
12972: LD_INT 22
12974: PUSH
12975: LD_VAR 0 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 25
12986: PUSH
12987: LD_INT 4
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: ST_TO_ADDR
// for i in medic_list do
13003: LD_ADDR_VAR 0 14
13007: PUSH
13008: LD_VAR 0 18
13012: PUSH
13013: FOR_IN
13014: IFFALSE 13032
// ComMoveToArea ( i , healArea ) ;
13016: LD_VAR 0 14
13020: PPUSH
13021: LD_VAR 0 10
13025: PPUSH
13026: CALL_OW 113
13030: GO 13013
13032: POP
13033: POP
// if strategy = 1 then
13034: LD_VAR 0 12
13038: PUSH
13039: LD_INT 1
13041: EQUAL
13042: IFFALSE 13588
// begin repeat wait ( 0 0$3 ) ;
13044: LD_INT 105
13046: PPUSH
13047: CALL_OW 67
// for i in soldiersOK_list do
13051: LD_ADDR_VAR 0 14
13055: PUSH
13056: LD_VAR 0 19
13060: PUSH
13061: FOR_IN
13062: IFFALSE 13126
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13064: LD_VAR 0 14
13068: PPUSH
13069: LD_INT 91
13071: PPUSH
13072: LD_INT 63
13074: PPUSH
13075: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13079: LD_VAR 0 14
13083: PPUSH
13084: LD_INT 101
13086: PPUSH
13087: LD_INT 53
13089: PPUSH
13090: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13094: LD_VAR 0 14
13098: PPUSH
13099: LD_INT 75
13101: PPUSH
13102: LD_INT 23
13104: PPUSH
13105: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13109: LD_VAR 0 14
13113: PPUSH
13114: LD_INT 78
13116: PPUSH
13117: LD_INT 8
13119: PPUSH
13120: CALL_OW 174
// end ;
13124: GO 13061
13126: POP
13127: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13128: LD_INT 12
13130: PPUSH
13131: LD_INT 22
13133: PUSH
13134: LD_VAR 0 1
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 70
13147: PUSH
13148: LD_INT 2
13150: GREATER
13151: IFFALSE 13044
// repeat wait ( 0 0$1 ) ;
13153: LD_INT 35
13155: PPUSH
13156: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13160: LD_ADDR_VAR 0 17
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_VAR 0 1
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 1
13179: PUSH
13180: LD_INT 3
13182: PUSH
13183: LD_INT 24
13185: PUSH
13186: LD_INT 550
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 24
13199: PUSH
13200: LD_INT 250
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PPUSH
13216: CALL_OW 69
13220: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13221: LD_ADDR_VAR 0 19
13225: PUSH
13226: LD_INT 22
13228: PUSH
13229: LD_VAR 0 1
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 5
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 8
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 9
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 24
13290: PUSH
13291: LD_INT 1000
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: ST_TO_ADDR
// if medicCount > 0 then
13308: LD_VAR 0 7
13312: PUSH
13313: LD_INT 0
13315: GREATER
13316: IFFALSE 13390
// begin if damageUnit_list > 0 then
13318: LD_VAR 0 17
13322: PUSH
13323: LD_INT 0
13325: GREATER
13326: IFFALSE 13390
// begin for i in damageUnit_list do
13328: LD_ADDR_VAR 0 14
13332: PUSH
13333: LD_VAR 0 17
13337: PUSH
13338: FOR_IN
13339: IFFALSE 13388
// begin ComMoveToArea ( i , healArea ) ;
13341: LD_VAR 0 14
13345: PPUSH
13346: LD_VAR 0 10
13350: PPUSH
13351: CALL_OW 113
// for j in medic_list do
13355: LD_ADDR_VAR 0 15
13359: PUSH
13360: LD_VAR 0 18
13364: PUSH
13365: FOR_IN
13366: IFFALSE 13384
// AddComHeal ( j , i ) ;
13368: LD_VAR 0 15
13372: PPUSH
13373: LD_VAR 0 14
13377: PPUSH
13378: CALL_OW 188
13382: GO 13365
13384: POP
13385: POP
// end ;
13386: GO 13338
13388: POP
13389: POP
// end ; end ; for i in soldiersOK_list do
13390: LD_ADDR_VAR 0 14
13394: PUSH
13395: LD_VAR 0 19
13399: PUSH
13400: FOR_IN
13401: IFFALSE 13577
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13403: LD_ADDR_VAR 0 22
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_VAR 0 11
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PPUSH
13425: LD_VAR 0 14
13429: PPUSH
13430: CALL_OW 74
13434: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13435: LD_ADDR_VAR 0 23
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_VAR 0 11
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 2
13454: PUSH
13455: LD_INT 59
13457: PUSH
13458: EMPTY
13459: LIST
13460: PUSH
13461: LD_INT 21
13463: PUSH
13464: LD_INT 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 21
13473: PUSH
13474: LD_INT 2
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: PPUSH
13494: CALL_OW 69
13498: PPUSH
13499: LD_VAR 0 14
13503: PPUSH
13504: CALL_OW 74
13508: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13509: LD_VAR 0 14
13513: PPUSH
13514: LD_VAR 0 22
13518: PPUSH
13519: CALL_OW 296
13523: PUSH
13524: LD_INT 6
13526: PLUS
13527: PUSH
13528: LD_VAR 0 14
13532: PPUSH
13533: LD_VAR 0 23
13537: PPUSH
13538: CALL_OW 296
13542: LESS
13543: IFFALSE 13561
// begin ComAttackUnit ( i , target1 ) ;
13545: LD_VAR 0 14
13549: PPUSH
13550: LD_VAR 0 22
13554: PPUSH
13555: CALL_OW 115
// end else
13559: GO 13575
// begin ComAttackUnit ( i , target2 ) ;
13561: LD_VAR 0 14
13565: PPUSH
13566: LD_VAR 0 23
13570: PPUSH
13571: CALL_OW 115
// end ; end ;
13575: GO 13400
13577: POP
13578: POP
// until soldiersOK_list = [ ] ;
13579: LD_VAR 0 19
13583: PUSH
13584: EMPTY
13585: EQUAL
13586: IFFALSE 13153
// end ; if strategy = 2 then
13588: LD_VAR 0 12
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: IFFALSE 14112
// begin repeat wait ( 0 0$1 ) ;
13598: LD_INT 35
13600: PPUSH
13601: CALL_OW 67
// for i in soldiersOK_list do
13605: LD_ADDR_VAR 0 14
13609: PUSH
13610: LD_VAR 0 19
13614: PUSH
13615: FOR_IN
13616: IFFALSE 13650
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13618: LD_VAR 0 14
13622: PPUSH
13623: LD_INT 91
13625: PPUSH
13626: LD_INT 63
13628: PPUSH
13629: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13633: LD_VAR 0 14
13637: PPUSH
13638: LD_INT 75
13640: PPUSH
13641: LD_INT 33
13643: PPUSH
13644: CALL_OW 174
// end ;
13648: GO 13615
13650: POP
13651: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13652: LD_INT 13
13654: PPUSH
13655: LD_INT 22
13657: PUSH
13658: LD_VAR 0 1
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL_OW 70
13671: PUSH
13672: LD_INT 2
13674: GREATER
13675: IFFALSE 13598
// repeat wait ( 0 0$3 ) ;
13677: LD_INT 105
13679: PPUSH
13680: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13684: LD_ADDR_VAR 0 17
13688: PUSH
13689: LD_INT 22
13691: PUSH
13692: LD_VAR 0 1
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 1
13703: PUSH
13704: LD_INT 3
13706: PUSH
13707: LD_INT 24
13709: PUSH
13710: LD_INT 550
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 24
13723: PUSH
13724: LD_INT 250
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PPUSH
13740: CALL_OW 69
13744: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13745: LD_ADDR_VAR 0 19
13749: PUSH
13750: LD_INT 22
13752: PUSH
13753: LD_VAR 0 1
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 25
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 25
13777: PUSH
13778: LD_INT 5
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 25
13787: PUSH
13788: LD_INT 8
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 25
13797: PUSH
13798: LD_INT 9
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 24
13814: PUSH
13815: LD_INT 1000
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: ST_TO_ADDR
// if medicCount > 0 then
13832: LD_VAR 0 7
13836: PUSH
13837: LD_INT 0
13839: GREATER
13840: IFFALSE 13914
// begin if damageUnit_list > 0 then
13842: LD_VAR 0 17
13846: PUSH
13847: LD_INT 0
13849: GREATER
13850: IFFALSE 13914
// begin for i in damageUnit_list do
13852: LD_ADDR_VAR 0 14
13856: PUSH
13857: LD_VAR 0 17
13861: PUSH
13862: FOR_IN
13863: IFFALSE 13912
// begin ComMoveToArea ( i , healArea ) ;
13865: LD_VAR 0 14
13869: PPUSH
13870: LD_VAR 0 10
13874: PPUSH
13875: CALL_OW 113
// for j in medic_list do
13879: LD_ADDR_VAR 0 15
13883: PUSH
13884: LD_VAR 0 18
13888: PUSH
13889: FOR_IN
13890: IFFALSE 13908
// AddComHeal ( j , i ) ;
13892: LD_VAR 0 15
13896: PPUSH
13897: LD_VAR 0 14
13901: PPUSH
13902: CALL_OW 188
13906: GO 13889
13908: POP
13909: POP
// end ;
13910: GO 13862
13912: POP
13913: POP
// end ; end ; for i in soldiersOK_list do
13914: LD_ADDR_VAR 0 14
13918: PUSH
13919: LD_VAR 0 19
13923: PUSH
13924: FOR_IN
13925: IFFALSE 14101
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13927: LD_ADDR_VAR 0 22
13931: PUSH
13932: LD_INT 22
13934: PUSH
13935: LD_VAR 0 11
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 69
13948: PPUSH
13949: LD_VAR 0 14
13953: PPUSH
13954: CALL_OW 74
13958: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13959: LD_ADDR_VAR 0 23
13963: PUSH
13964: LD_INT 22
13966: PUSH
13967: LD_VAR 0 11
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 2
13978: PUSH
13979: LD_INT 59
13981: PUSH
13982: EMPTY
13983: LIST
13984: PUSH
13985: LD_INT 21
13987: PUSH
13988: LD_INT 1
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 21
13997: PUSH
13998: LD_INT 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: PPUSH
14018: CALL_OW 69
14022: PPUSH
14023: LD_VAR 0 14
14027: PPUSH
14028: CALL_OW 74
14032: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14033: LD_VAR 0 14
14037: PPUSH
14038: LD_VAR 0 22
14042: PPUSH
14043: CALL_OW 296
14047: PUSH
14048: LD_INT 6
14050: PLUS
14051: PUSH
14052: LD_VAR 0 14
14056: PPUSH
14057: LD_VAR 0 23
14061: PPUSH
14062: CALL_OW 296
14066: LESS
14067: IFFALSE 14085
// begin ComAttackUnit ( i , target1 ) ;
14069: LD_VAR 0 14
14073: PPUSH
14074: LD_VAR 0 22
14078: PPUSH
14079: CALL_OW 115
// end else
14083: GO 14099
// begin ComAttackUnit ( i , target2 ) ;
14085: LD_VAR 0 14
14089: PPUSH
14090: LD_VAR 0 23
14094: PPUSH
14095: CALL_OW 115
// end ; end ;
14099: GO 13924
14101: POP
14102: POP
// until soldiersOK_list = [ ] ;
14103: LD_VAR 0 19
14107: PUSH
14108: EMPTY
14109: EQUAL
14110: IFFALSE 13677
// end ; if strategy = 3 then
14112: LD_VAR 0 12
14116: PUSH
14117: LD_INT 3
14119: EQUAL
14120: IFFALSE 14666
// begin repeat wait ( 0 0$3 ) ;
14122: LD_INT 105
14124: PPUSH
14125: CALL_OW 67
// for i in soldiersOK_list do
14129: LD_ADDR_VAR 0 14
14133: PUSH
14134: LD_VAR 0 19
14138: PUSH
14139: FOR_IN
14140: IFFALSE 14204
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14142: LD_VAR 0 14
14146: PPUSH
14147: LD_INT 63
14149: PPUSH
14150: LD_INT 71
14152: PPUSH
14153: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14157: LD_VAR 0 14
14161: PPUSH
14162: LD_INT 35
14164: PPUSH
14165: LD_INT 44
14167: PPUSH
14168: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14172: LD_VAR 0 14
14176: PPUSH
14177: LD_INT 23
14179: PPUSH
14180: LD_INT 18
14182: PPUSH
14183: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14187: LD_VAR 0 14
14191: PPUSH
14192: LD_INT 26
14194: PPUSH
14195: LD_INT 12
14197: PPUSH
14198: CALL_OW 174
// end ;
14202: GO 14139
14204: POP
14205: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14206: LD_INT 14
14208: PPUSH
14209: LD_INT 22
14211: PUSH
14212: LD_VAR 0 1
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 70
14225: PUSH
14226: LD_INT 2
14228: GREATER
14229: IFFALSE 14122
// repeat wait ( 0 0$1 ) ;
14231: LD_INT 35
14233: PPUSH
14234: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14238: LD_ADDR_VAR 0 17
14242: PUSH
14243: LD_INT 22
14245: PUSH
14246: LD_VAR 0 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: LD_INT 3
14260: PUSH
14261: LD_INT 24
14263: PUSH
14264: LD_INT 550
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 24
14277: PUSH
14278: LD_INT 250
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14299: LD_ADDR_VAR 0 19
14303: PUSH
14304: LD_INT 22
14306: PUSH
14307: LD_VAR 0 1
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 2
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 25
14331: PUSH
14332: LD_INT 5
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 8
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 25
14351: PUSH
14352: LD_INT 9
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 24
14368: PUSH
14369: LD_INT 1000
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: ST_TO_ADDR
// if medicCount > 0 then
14386: LD_VAR 0 7
14390: PUSH
14391: LD_INT 0
14393: GREATER
14394: IFFALSE 14468
// begin if damageUnit_list > 0 then
14396: LD_VAR 0 17
14400: PUSH
14401: LD_INT 0
14403: GREATER
14404: IFFALSE 14468
// begin for i in damageUnit_list do
14406: LD_ADDR_VAR 0 14
14410: PUSH
14411: LD_VAR 0 17
14415: PUSH
14416: FOR_IN
14417: IFFALSE 14466
// begin ComMoveToArea ( i , healArea ) ;
14419: LD_VAR 0 14
14423: PPUSH
14424: LD_VAR 0 10
14428: PPUSH
14429: CALL_OW 113
// for j in medic_list do
14433: LD_ADDR_VAR 0 15
14437: PUSH
14438: LD_VAR 0 18
14442: PUSH
14443: FOR_IN
14444: IFFALSE 14462
// AddComHeal ( j , i ) ;
14446: LD_VAR 0 15
14450: PPUSH
14451: LD_VAR 0 14
14455: PPUSH
14456: CALL_OW 188
14460: GO 14443
14462: POP
14463: POP
// end ;
14464: GO 14416
14466: POP
14467: POP
// end ; end ; for i in soldiersOK_list do
14468: LD_ADDR_VAR 0 14
14472: PUSH
14473: LD_VAR 0 19
14477: PUSH
14478: FOR_IN
14479: IFFALSE 14655
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14481: LD_ADDR_VAR 0 22
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_VAR 0 11
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 69
14502: PPUSH
14503: LD_VAR 0 14
14507: PPUSH
14508: CALL_OW 74
14512: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14513: LD_ADDR_VAR 0 23
14517: PUSH
14518: LD_INT 22
14520: PUSH
14521: LD_VAR 0 11
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 2
14532: PUSH
14533: LD_INT 59
14535: PUSH
14536: EMPTY
14537: LIST
14538: PUSH
14539: LD_INT 21
14541: PUSH
14542: LD_INT 1
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 21
14551: PUSH
14552: LD_INT 2
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: PPUSH
14577: LD_VAR 0 14
14581: PPUSH
14582: CALL_OW 74
14586: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14587: LD_VAR 0 14
14591: PPUSH
14592: LD_VAR 0 22
14596: PPUSH
14597: CALL_OW 296
14601: PUSH
14602: LD_INT 6
14604: PLUS
14605: PUSH
14606: LD_VAR 0 14
14610: PPUSH
14611: LD_VAR 0 23
14615: PPUSH
14616: CALL_OW 296
14620: LESS
14621: IFFALSE 14639
// begin ComAttackUnit ( i , target1 ) ;
14623: LD_VAR 0 14
14627: PPUSH
14628: LD_VAR 0 22
14632: PPUSH
14633: CALL_OW 115
// end else
14637: GO 14653
// begin ComAttackUnit ( i , target2 ) ;
14639: LD_VAR 0 14
14643: PPUSH
14644: LD_VAR 0 23
14648: PPUSH
14649: CALL_OW 115
// end ; end ;
14653: GO 14478
14655: POP
14656: POP
// until soldiersOK_list = [ ] ;
14657: LD_VAR 0 19
14661: PUSH
14662: EMPTY
14663: EQUAL
14664: IFFALSE 14231
// end ; end ;
14666: LD_VAR 0 13
14670: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14671: LD_INT 0
14673: PPUSH
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
14680: PPUSH
14681: PPUSH
14682: PPUSH
14683: PPUSH
// amChassisTab = [ ] ;
14684: LD_ADDR_VAR 0 19
14688: PUSH
14689: EMPTY
14690: ST_TO_ADDR
// arChassisTab = [ ] ;
14691: LD_ADDR_VAR 0 18
14695: PUSH
14696: EMPTY
14697: ST_TO_ADDR
// ruChassisTab = [ ] ;
14698: LD_ADDR_VAR 0 17
14702: PUSH
14703: EMPTY
14704: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14705: LD_INT 35
14707: PPUSH
14708: CALL_OW 67
// if nation = 1 then
14712: LD_VAR 0 5
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: IFFALSE 15211
// begin uc_side = side ;
14722: LD_ADDR_OWVAR 20
14726: PUSH
14727: LD_VAR 0 2
14731: ST_TO_ADDR
// uc_nation = nation ;
14732: LD_ADDR_OWVAR 21
14736: PUSH
14737: LD_VAR 0 5
14741: ST_TO_ADDR
// vc_engine = vehengine ;
14742: LD_ADDR_OWVAR 39
14746: PUSH
14747: LD_VAR 0 6
14751: ST_TO_ADDR
// vc_control = vehcontrol ;
14752: LD_ADDR_OWVAR 38
14756: PUSH
14757: LD_VAR 0 7
14761: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14762: LD_ADDR_OWVAR 40
14766: PUSH
14767: LD_VAR 0 10
14771: PUSH
14772: LD_INT 1
14774: PPUSH
14775: LD_VAR 0 10
14779: PPUSH
14780: CALL_OW 12
14784: ARRAY
14785: ST_TO_ADDR
// for j = 1 to AMWeapon do
14786: LD_ADDR_VAR 0 14
14790: PUSH
14791: DOUBLE
14792: LD_INT 1
14794: DEC
14795: ST_TO_ADDR
14796: LD_VAR 0 10
14800: PUSH
14801: FOR_TO
14802: IFFALSE 15103
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14804: LD_VAR 0 10
14808: PUSH
14809: LD_VAR 0 14
14813: ARRAY
14814: PUSH
14815: LD_INT 2
14817: EQUAL
14818: PUSH
14819: LD_VAR 0 10
14823: PUSH
14824: LD_VAR 0 14
14828: ARRAY
14829: PUSH
14830: LD_INT 3
14832: EQUAL
14833: OR
14834: IFFALSE 14887
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14836: LD_ADDR_VAR 0 19
14840: PUSH
14841: LD_INT 1
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: LD_INT 3
14849: PUSH
14850: LD_INT 4
14852: PUSH
14853: LD_INT 5
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14863: LD_ADDR_OWVAR 37
14867: PUSH
14868: LD_VAR 0 19
14872: PUSH
14873: LD_INT 1
14875: PPUSH
14876: LD_VAR 0 19
14880: PPUSH
14881: CALL_OW 12
14885: ARRAY
14886: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14887: LD_VAR 0 10
14891: PUSH
14892: LD_VAR 0 14
14896: ARRAY
14897: PUSH
14898: LD_INT 4
14900: EQUAL
14901: PUSH
14902: LD_VAR 0 10
14906: PUSH
14907: LD_VAR 0 14
14911: ARRAY
14912: PUSH
14913: LD_INT 5
14915: EQUAL
14916: OR
14917: PUSH
14918: LD_VAR 0 10
14922: PUSH
14923: LD_VAR 0 14
14927: ARRAY
14928: PUSH
14929: LD_INT 9
14931: EQUAL
14932: OR
14933: PUSH
14934: LD_VAR 0 10
14938: PUSH
14939: LD_VAR 0 14
14943: ARRAY
14944: PUSH
14945: LD_INT 11
14947: EQUAL
14948: OR
14949: PUSH
14950: LD_VAR 0 10
14954: PUSH
14955: LD_VAR 0 14
14959: ARRAY
14960: PUSH
14961: LD_INT 7
14963: EQUAL
14964: OR
14965: IFFALSE 15014
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14967: LD_ADDR_VAR 0 19
14971: PUSH
14972: LD_INT 2
14974: PUSH
14975: LD_INT 3
14977: PUSH
14978: LD_INT 4
14980: PUSH
14981: LD_INT 5
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14990: LD_ADDR_OWVAR 37
14994: PUSH
14995: LD_VAR 0 19
14999: PUSH
15000: LD_INT 1
15002: PPUSH
15003: LD_VAR 0 19
15007: PPUSH
15008: CALL_OW 12
15012: ARRAY
15013: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15014: LD_VAR 0 10
15018: PUSH
15019: LD_VAR 0 14
15023: ARRAY
15024: PUSH
15025: LD_INT 8
15027: EQUAL
15028: PUSH
15029: LD_VAR 0 10
15033: PUSH
15034: LD_VAR 0 14
15038: ARRAY
15039: PUSH
15040: LD_INT 6
15042: EQUAL
15043: OR
15044: PUSH
15045: LD_VAR 0 10
15049: PUSH
15050: LD_VAR 0 14
15054: ARRAY
15055: PUSH
15056: LD_INT 10
15058: EQUAL
15059: OR
15060: IFFALSE 15101
// begin amChassisTab = [ 4 , 5 ] ;
15062: LD_ADDR_VAR 0 19
15066: PUSH
15067: LD_INT 4
15069: PUSH
15070: LD_INT 5
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15077: LD_ADDR_OWVAR 37
15081: PUSH
15082: LD_VAR 0 19
15086: PUSH
15087: LD_INT 1
15089: PPUSH
15090: LD_VAR 0 19
15094: PPUSH
15095: CALL_OW 12
15099: ARRAY
15100: ST_TO_ADDR
// end ; end ;
15101: GO 14801
15103: POP
15104: POP
// veh = CreateVehicle ;
15105: LD_ADDR_VAR 0 16
15109: PUSH
15110: CALL_OW 45
15114: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15115: LD_VAR 0 16
15119: PPUSH
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 0
15127: PPUSH
15128: CALL_OW 49
// if vehControl = 1 then
15132: LD_VAR 0 7
15136: PUSH
15137: LD_INT 1
15139: EQUAL
15140: IFFALSE 15197
// begin hc_gallery =  ;
15142: LD_ADDR_OWVAR 33
15146: PUSH
15147: LD_STRING 
15149: ST_TO_ADDR
// hc_name =  ;
15150: LD_ADDR_OWVAR 26
15154: PUSH
15155: LD_STRING 
15157: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15158: LD_INT 0
15160: PPUSH
15161: LD_INT 3
15163: PPUSH
15164: LD_VAR 0 4
15168: PPUSH
15169: CALL_OW 380
// un = CreateHuman ;
15173: LD_ADDR_VAR 0 15
15177: PUSH
15178: CALL_OW 44
15182: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15183: LD_VAR 0 15
15187: PPUSH
15188: LD_VAR 0 16
15192: PPUSH
15193: CALL_OW 52
// end ; i = i + 1 ;
15197: LD_ADDR_VAR 0 13
15201: PUSH
15202: LD_VAR 0 13
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: ST_TO_ADDR
// end ; if nation = 2 then
15211: LD_VAR 0 5
15215: PUSH
15216: LD_INT 2
15218: EQUAL
15219: IFFALSE 15643
// begin uc_side = side ;
15221: LD_ADDR_OWVAR 20
15225: PUSH
15226: LD_VAR 0 2
15230: ST_TO_ADDR
// uc_nation = nation ;
15231: LD_ADDR_OWVAR 21
15235: PUSH
15236: LD_VAR 0 5
15240: ST_TO_ADDR
// vc_engine = vehengine ;
15241: LD_ADDR_OWVAR 39
15245: PUSH
15246: LD_VAR 0 6
15250: ST_TO_ADDR
// vc_control = vehcontrol ;
15251: LD_ADDR_OWVAR 38
15255: PUSH
15256: LD_VAR 0 7
15260: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15261: LD_ADDR_OWVAR 40
15265: PUSH
15266: LD_VAR 0 9
15270: PUSH
15271: LD_INT 1
15273: PPUSH
15274: LD_VAR 0 9
15278: PPUSH
15279: CALL_OW 12
15283: ARRAY
15284: ST_TO_ADDR
// for j = 1 to ARWeapons do
15285: LD_ADDR_VAR 0 14
15289: PUSH
15290: DOUBLE
15291: LD_INT 1
15293: DEC
15294: ST_TO_ADDR
15295: LD_VAR 0 9
15299: PUSH
15300: FOR_TO
15301: IFFALSE 15535
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15303: LD_VAR 0 9
15307: PUSH
15308: LD_VAR 0 14
15312: ARRAY
15313: PUSH
15314: LD_INT 24
15316: EQUAL
15317: PUSH
15318: LD_VAR 0 9
15322: PUSH
15323: LD_VAR 0 14
15327: ARRAY
15328: PUSH
15329: LD_INT 22
15331: EQUAL
15332: OR
15333: PUSH
15334: LD_VAR 0 9
15338: PUSH
15339: LD_VAR 0 14
15343: ARRAY
15344: PUSH
15345: LD_INT 23
15347: EQUAL
15348: OR
15349: PUSH
15350: LD_VAR 0 9
15354: PUSH
15355: LD_VAR 0 14
15359: ARRAY
15360: PUSH
15361: LD_INT 30
15363: EQUAL
15364: OR
15365: IFFALSE 15414
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15367: LD_ADDR_VAR 0 18
15371: PUSH
15372: LD_INT 11
15374: PUSH
15375: LD_INT 12
15377: PUSH
15378: LD_INT 13
15380: PUSH
15381: LD_INT 14
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15390: LD_ADDR_OWVAR 37
15394: PUSH
15395: LD_VAR 0 18
15399: PUSH
15400: LD_INT 1
15402: PPUSH
15403: LD_VAR 0 18
15407: PPUSH
15408: CALL_OW 12
15412: ARRAY
15413: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15414: LD_VAR 0 9
15418: PUSH
15419: LD_VAR 0 14
15423: ARRAY
15424: PUSH
15425: LD_INT 29
15427: EQUAL
15428: PUSH
15429: LD_VAR 0 9
15433: PUSH
15434: LD_VAR 0 14
15438: ARRAY
15439: PUSH
15440: LD_INT 28
15442: EQUAL
15443: OR
15444: PUSH
15445: LD_VAR 0 9
15449: PUSH
15450: LD_VAR 0 14
15454: ARRAY
15455: PUSH
15456: LD_INT 27
15458: EQUAL
15459: OR
15460: PUSH
15461: LD_VAR 0 9
15465: PUSH
15466: LD_VAR 0 14
15470: ARRAY
15471: PUSH
15472: LD_INT 26
15474: EQUAL
15475: OR
15476: PUSH
15477: LD_VAR 0 9
15481: PUSH
15482: LD_VAR 0 14
15486: ARRAY
15487: PUSH
15488: LD_INT 25
15490: EQUAL
15491: OR
15492: IFFALSE 15533
// begin arChassisTab = [ 13 , 14 ] ;
15494: LD_ADDR_VAR 0 18
15498: PUSH
15499: LD_INT 13
15501: PUSH
15502: LD_INT 14
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15509: LD_ADDR_OWVAR 37
15513: PUSH
15514: LD_VAR 0 18
15518: PUSH
15519: LD_INT 1
15521: PPUSH
15522: LD_VAR 0 18
15526: PPUSH
15527: CALL_OW 12
15531: ARRAY
15532: ST_TO_ADDR
// end ; end ;
15533: GO 15300
15535: POP
15536: POP
// veh = CreateVehicle ;
15537: LD_ADDR_VAR 0 16
15541: PUSH
15542: CALL_OW 45
15546: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15547: LD_VAR 0 16
15551: PPUSH
15552: LD_VAR 0 1
15556: PPUSH
15557: LD_INT 0
15559: PPUSH
15560: CALL_OW 49
// if vehcontrol = 1 then
15564: LD_VAR 0 7
15568: PUSH
15569: LD_INT 1
15571: EQUAL
15572: IFFALSE 15629
// begin hc_gallery =  ;
15574: LD_ADDR_OWVAR 33
15578: PUSH
15579: LD_STRING 
15581: ST_TO_ADDR
// hc_name =  ;
15582: LD_ADDR_OWVAR 26
15586: PUSH
15587: LD_STRING 
15589: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15590: LD_INT 0
15592: PPUSH
15593: LD_INT 3
15595: PPUSH
15596: LD_VAR 0 4
15600: PPUSH
15601: CALL_OW 380
// un = CreateHuman ;
15605: LD_ADDR_VAR 0 15
15609: PUSH
15610: CALL_OW 44
15614: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15615: LD_VAR 0 15
15619: PPUSH
15620: LD_VAR 0 16
15624: PPUSH
15625: CALL_OW 52
// end ; i = i + 1 ;
15629: LD_ADDR_VAR 0 13
15633: PUSH
15634: LD_VAR 0 13
15638: PUSH
15639: LD_INT 1
15641: PLUS
15642: ST_TO_ADDR
// end ; if nation = 3 then
15643: LD_VAR 0 5
15647: PUSH
15648: LD_INT 3
15650: EQUAL
15651: IFFALSE 16043
// begin uc_side = side ;
15653: LD_ADDR_OWVAR 20
15657: PUSH
15658: LD_VAR 0 2
15662: ST_TO_ADDR
// uc_nation = nation ;
15663: LD_ADDR_OWVAR 21
15667: PUSH
15668: LD_VAR 0 5
15672: ST_TO_ADDR
// vc_engine = vehengine ;
15673: LD_ADDR_OWVAR 39
15677: PUSH
15678: LD_VAR 0 6
15682: ST_TO_ADDR
// vc_control = vehcontrol ;
15683: LD_ADDR_OWVAR 38
15687: PUSH
15688: LD_VAR 0 7
15692: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15693: LD_ADDR_OWVAR 40
15697: PUSH
15698: LD_VAR 0 8
15702: PUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_VAR 0 8
15710: PPUSH
15711: CALL_OW 12
15715: ARRAY
15716: ST_TO_ADDR
// for j = 1 to RuWeapons do
15717: LD_ADDR_VAR 0 14
15721: PUSH
15722: DOUBLE
15723: LD_INT 1
15725: DEC
15726: ST_TO_ADDR
15727: LD_VAR 0 8
15731: PUSH
15732: FOR_TO
15733: IFFALSE 15935
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15735: LD_VAR 0 8
15739: PUSH
15740: LD_VAR 0 14
15744: ARRAY
15745: PUSH
15746: LD_INT 42
15748: EQUAL
15749: PUSH
15750: LD_VAR 0 8
15754: PUSH
15755: LD_VAR 0 14
15759: ARRAY
15760: PUSH
15761: LD_INT 43
15763: EQUAL
15764: OR
15765: PUSH
15766: LD_VAR 0 8
15770: PUSH
15771: LD_VAR 0 14
15775: ARRAY
15776: PUSH
15777: LD_INT 44
15779: EQUAL
15780: OR
15781: PUSH
15782: LD_VAR 0 8
15786: PUSH
15787: LD_VAR 0 14
15791: ARRAY
15792: PUSH
15793: LD_INT 45
15795: EQUAL
15796: OR
15797: PUSH
15798: LD_VAR 0 8
15802: PUSH
15803: LD_VAR 0 14
15807: ARRAY
15808: PUSH
15809: LD_INT 49
15811: EQUAL
15812: OR
15813: IFFALSE 15862
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15815: LD_ADDR_VAR 0 17
15819: PUSH
15820: LD_INT 21
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_INT 23
15828: PUSH
15829: LD_INT 24
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15838: LD_ADDR_OWVAR 37
15842: PUSH
15843: LD_VAR 0 17
15847: PUSH
15848: LD_INT 1
15850: PPUSH
15851: LD_VAR 0 17
15855: PPUSH
15856: CALL_OW 12
15860: ARRAY
15861: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15862: LD_VAR 0 8
15866: PUSH
15867: LD_VAR 0 14
15871: ARRAY
15872: PUSH
15873: LD_INT 46
15875: EQUAL
15876: PUSH
15877: LD_VAR 0 8
15881: PUSH
15882: LD_VAR 0 14
15886: ARRAY
15887: PUSH
15888: LD_INT 47
15890: EQUAL
15891: OR
15892: IFFALSE 15933
// begin ruChassisTab = [ 23 , 24 ] ;
15894: LD_ADDR_VAR 0 17
15898: PUSH
15899: LD_INT 23
15901: PUSH
15902: LD_INT 24
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15909: LD_ADDR_OWVAR 37
15913: PUSH
15914: LD_VAR 0 17
15918: PUSH
15919: LD_INT 1
15921: PPUSH
15922: LD_VAR 0 17
15926: PPUSH
15927: CALL_OW 12
15931: ARRAY
15932: ST_TO_ADDR
// end ; end ;
15933: GO 15732
15935: POP
15936: POP
// veh = CreateVehicle ;
15937: LD_ADDR_VAR 0 16
15941: PUSH
15942: CALL_OW 45
15946: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15947: LD_VAR 0 16
15951: PPUSH
15952: LD_VAR 0 1
15956: PPUSH
15957: LD_INT 0
15959: PPUSH
15960: CALL_OW 49
// if vehcontrol = 1 then
15964: LD_VAR 0 7
15968: PUSH
15969: LD_INT 1
15971: EQUAL
15972: IFFALSE 16029
// begin hc_gallery =  ;
15974: LD_ADDR_OWVAR 33
15978: PUSH
15979: LD_STRING 
15981: ST_TO_ADDR
// hc_name =  ;
15982: LD_ADDR_OWVAR 26
15986: PUSH
15987: LD_STRING 
15989: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15990: LD_INT 0
15992: PPUSH
15993: LD_INT 3
15995: PPUSH
15996: LD_VAR 0 4
16000: PPUSH
16001: CALL_OW 380
// un = CreateHuman ;
16005: LD_ADDR_VAR 0 15
16009: PUSH
16010: CALL_OW 44
16014: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16015: LD_VAR 0 15
16019: PPUSH
16020: LD_VAR 0 16
16024: PPUSH
16025: CALL_OW 52
// end ; i = i + 1 ;
16029: LD_ADDR_VAR 0 13
16033: PUSH
16034: LD_VAR 0 13
16038: PUSH
16039: LD_INT 1
16041: PLUS
16042: ST_TO_ADDR
// end ; until i = vehCount ;
16043: LD_VAR 0 13
16047: PUSH
16048: LD_VAR 0 3
16052: EQUAL
16053: IFFALSE 14705
// repeat wait ( 0 0$1 ) ;
16055: LD_INT 35
16057: PPUSH
16058: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16062: LD_ADDR_VAR 0 20
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_VAR 0 2
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 24
16091: PUSH
16092: LD_INT 250
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: ST_TO_ADDR
// if vehicleOK_list > 0 then
16109: LD_VAR 0 20
16113: PUSH
16114: LD_INT 0
16116: GREATER
16117: IFFALSE 16308
// begin for i in vehicleOK_list do
16119: LD_ADDR_VAR 0 13
16123: PUSH
16124: LD_VAR 0 20
16128: PUSH
16129: FOR_IN
16130: IFFALSE 16306
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16132: LD_ADDR_VAR 0 21
16136: PUSH
16137: LD_INT 22
16139: PUSH
16140: LD_VAR 0 11
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PPUSH
16149: CALL_OW 69
16153: PPUSH
16154: LD_VAR 0 13
16158: PPUSH
16159: CALL_OW 74
16163: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16164: LD_ADDR_VAR 0 22
16168: PUSH
16169: LD_INT 22
16171: PUSH
16172: LD_VAR 0 11
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 2
16183: PUSH
16184: LD_INT 59
16186: PUSH
16187: EMPTY
16188: LIST
16189: PUSH
16190: LD_INT 21
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: EMPTY
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: PPUSH
16228: LD_VAR 0 13
16232: PPUSH
16233: CALL_OW 74
16237: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16238: LD_VAR 0 13
16242: PPUSH
16243: LD_VAR 0 21
16247: PPUSH
16248: CALL_OW 296
16252: PUSH
16253: LD_INT 6
16255: PLUS
16256: PUSH
16257: LD_VAR 0 13
16261: PPUSH
16262: LD_VAR 0 22
16266: PPUSH
16267: CALL_OW 296
16271: LESS
16272: IFFALSE 16290
// begin ComAttackUnit ( i , target1 ) ;
16274: LD_VAR 0 13
16278: PPUSH
16279: LD_VAR 0 21
16283: PPUSH
16284: CALL_OW 115
// end else
16288: GO 16304
// begin ComAttackUnit ( i , target2 ) ;
16290: LD_VAR 0 13
16294: PPUSH
16295: LD_VAR 0 22
16299: PPUSH
16300: CALL_OW 115
// end ; end ;
16304: GO 16129
16306: POP
16307: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16308: LD_INT 22
16310: PUSH
16311: LD_VAR 0 2
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 21
16322: PUSH
16323: LD_INT 2
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 24
16332: PUSH
16333: LD_INT 250
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: PPUSH
16345: CALL_OW 69
16349: PUSH
16350: LD_INT 0
16352: EQUAL
16353: IFFALSE 16055
// end ;
16355: LD_VAR 0 12
16359: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16360: LD_INT 0
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16370: LD_ADDR_VAR 0 7
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_VAR 0 1
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: LD_INT 24
16395: PUSH
16396: LD_INT 550
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 24
16409: PUSH
16410: LD_INT 250
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PPUSH
16426: CALL_OW 69
16430: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16431: LD_ADDR_VAR 0 8
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 25
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 25
16463: PUSH
16464: LD_INT 5
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 25
16473: PUSH
16474: LD_INT 8
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 25
16483: PUSH
16484: LD_INT 9
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 24
16500: PUSH
16501: LD_INT 1000
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16518: LD_ADDR_VAR 0 9
16522: PUSH
16523: LD_INT 22
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 25
16537: PUSH
16538: LD_INT 4
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// if medicCount > 0 then
16554: LD_VAR 0 9
16558: PUSH
16559: LD_INT 0
16561: GREATER
16562: IFFALSE 16636
// begin if damageUnit_list > 0 then
16564: LD_VAR 0 7
16568: PUSH
16569: LD_INT 0
16571: GREATER
16572: IFFALSE 16636
// begin for i in damageUnit_list do
16574: LD_ADDR_VAR 0 5
16578: PUSH
16579: LD_VAR 0 7
16583: PUSH
16584: FOR_IN
16585: IFFALSE 16634
// begin ComMoveToArea ( i , healArea ) ;
16587: LD_VAR 0 5
16591: PPUSH
16592: LD_VAR 0 2
16596: PPUSH
16597: CALL_OW 113
// for j in medicCount do
16601: LD_ADDR_VAR 0 6
16605: PUSH
16606: LD_VAR 0 9
16610: PUSH
16611: FOR_IN
16612: IFFALSE 16630
// AddComHeal ( j , i ) ;
16614: LD_VAR 0 6
16618: PPUSH
16619: LD_VAR 0 5
16623: PPUSH
16624: CALL_OW 188
16628: GO 16611
16630: POP
16631: POP
// end ;
16632: GO 16584
16634: POP
16635: POP
// end ; end ; if soldiersOK_list > 0 then
16636: LD_VAR 0 8
16640: PUSH
16641: LD_INT 0
16643: GREATER
16644: IFFALSE 16835
// begin for i in soldiersOK_list do
16646: LD_ADDR_VAR 0 5
16650: PUSH
16651: LD_VAR 0 8
16655: PUSH
16656: FOR_IN
16657: IFFALSE 16833
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16659: LD_ADDR_VAR 0 10
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_VAR 0 3
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PPUSH
16681: LD_VAR 0 5
16685: PPUSH
16686: CALL_OW 74
16690: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16691: LD_ADDR_VAR 0 11
16695: PUSH
16696: LD_INT 22
16698: PUSH
16699: LD_VAR 0 3
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: LD_INT 59
16713: PUSH
16714: EMPTY
16715: LIST
16716: PUSH
16717: LD_INT 21
16719: PUSH
16720: LD_INT 1
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 21
16729: PUSH
16730: LD_INT 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: PPUSH
16750: CALL_OW 69
16754: PPUSH
16755: LD_VAR 0 5
16759: PPUSH
16760: CALL_OW 74
16764: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16765: LD_VAR 0 5
16769: PPUSH
16770: LD_VAR 0 10
16774: PPUSH
16775: CALL_OW 296
16779: PUSH
16780: LD_INT 8
16782: PLUS
16783: PUSH
16784: LD_VAR 0 5
16788: PPUSH
16789: LD_VAR 0 11
16793: PPUSH
16794: CALL_OW 296
16798: LESS
16799: IFFALSE 16817
// begin ComAttackUnit ( i , target1 ) ;
16801: LD_VAR 0 5
16805: PPUSH
16806: LD_VAR 0 10
16810: PPUSH
16811: CALL_OW 115
// end else
16815: GO 16831
// begin ComAttackUnit ( i , target2 ) ;
16817: LD_VAR 0 5
16821: PPUSH
16822: LD_VAR 0 11
16826: PPUSH
16827: CALL_OW 115
// end ; end ;
16831: GO 16656
16833: POP
16834: POP
// end ; end ;
16835: LD_VAR 0 4
16839: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16840: LD_INT 0
16842: PPUSH
16843: PPUSH
// list := [ ] ;
16844: LD_ADDR_VAR 0 5
16848: PUSH
16849: EMPTY
16850: ST_TO_ADDR
// case d of 0 :
16851: LD_VAR 0 3
16855: PUSH
16856: LD_INT 0
16858: DOUBLE
16859: EQUAL
16860: IFTRUE 16864
16862: GO 16997
16864: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16865: LD_ADDR_VAR 0 5
16869: PUSH
16870: LD_VAR 0 1
16874: PUSH
16875: LD_INT 4
16877: MINUS
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: LD_INT 4
16886: MINUS
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: LD_VAR 0 1
16900: PUSH
16901: LD_INT 3
16903: MINUS
16904: PUSH
16905: LD_VAR 0 2
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: PUSH
16918: LD_VAR 0 1
16922: PUSH
16923: LD_INT 4
16925: PLUS
16926: PUSH
16927: LD_VAR 0 2
16931: PUSH
16932: LD_INT 4
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: LD_VAR 0 1
16944: PUSH
16945: LD_INT 3
16947: PLUS
16948: PUSH
16949: LD_VAR 0 2
16953: PUSH
16954: LD_INT 3
16956: PLUS
16957: PUSH
16958: LD_INT 5
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: LD_VAR 0 1
16970: PUSH
16971: LD_VAR 0 2
16975: PUSH
16976: LD_INT 4
16978: PLUS
16979: PUSH
16980: LD_INT 0
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: ST_TO_ADDR
// end ; 1 :
16995: GO 17695
16997: LD_INT 1
16999: DOUBLE
17000: EQUAL
17001: IFTRUE 17005
17003: GO 17138
17005: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
17006: LD_ADDR_VAR 0 5
17010: PUSH
17011: LD_VAR 0 1
17015: PUSH
17016: LD_VAR 0 2
17020: PUSH
17021: LD_INT 4
17023: MINUS
17024: PUSH
17025: LD_INT 3
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: PUSH
17033: LD_VAR 0 1
17037: PUSH
17038: LD_INT 3
17040: MINUS
17041: PUSH
17042: LD_VAR 0 2
17046: PUSH
17047: LD_INT 3
17049: MINUS
17050: PUSH
17051: LD_INT 2
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: PUSH
17059: LD_VAR 0 1
17063: PUSH
17064: LD_INT 4
17066: MINUS
17067: PUSH
17068: LD_VAR 0 2
17072: PUSH
17073: LD_INT 1
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_VAR 0 1
17085: PUSH
17086: LD_VAR 0 2
17090: PUSH
17091: LD_INT 3
17093: PLUS
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: LD_VAR 0 1
17107: PUSH
17108: LD_INT 4
17110: PLUS
17111: PUSH
17112: LD_VAR 0 2
17116: PUSH
17117: LD_INT 4
17119: PLUS
17120: PUSH
17121: LD_INT 5
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: ST_TO_ADDR
// end ; 2 :
17136: GO 17695
17138: LD_INT 2
17140: DOUBLE
17141: EQUAL
17142: IFTRUE 17146
17144: GO 17275
17146: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17147: LD_ADDR_VAR 0 5
17151: PUSH
17152: LD_VAR 0 1
17156: PUSH
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 3
17164: MINUS
17165: PUSH
17166: LD_INT 3
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: PUSH
17174: LD_VAR 0 1
17178: PUSH
17179: LD_INT 4
17181: PLUS
17182: PUSH
17183: LD_VAR 0 2
17187: PUSH
17188: LD_INT 4
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: PUSH
17196: LD_VAR 0 1
17200: PUSH
17201: LD_VAR 0 2
17205: PUSH
17206: LD_INT 4
17208: PLUS
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: PUSH
17218: LD_VAR 0 1
17222: PUSH
17223: LD_INT 3
17225: MINUS
17226: PUSH
17227: LD_VAR 0 2
17231: PUSH
17232: LD_INT 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_VAR 0 1
17244: PUSH
17245: LD_INT 4
17247: MINUS
17248: PUSH
17249: LD_VAR 0 2
17253: PUSH
17254: LD_INT 4
17256: MINUS
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: ST_TO_ADDR
// end ; 3 :
17273: GO 17695
17275: LD_INT 3
17277: DOUBLE
17278: EQUAL
17279: IFTRUE 17283
17281: GO 17416
17283: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17284: LD_ADDR_VAR 0 5
17288: PUSH
17289: LD_VAR 0 1
17293: PUSH
17294: LD_INT 3
17296: PLUS
17297: PUSH
17298: LD_VAR 0 2
17302: PUSH
17303: LD_INT 4
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: LD_VAR 0 1
17315: PUSH
17316: LD_INT 4
17318: PLUS
17319: PUSH
17320: LD_VAR 0 2
17324: PUSH
17325: LD_INT 4
17327: PLUS
17328: PUSH
17329: LD_INT 5
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: PUSH
17337: LD_VAR 0 1
17341: PUSH
17342: LD_INT 4
17344: MINUS
17345: PUSH
17346: LD_VAR 0 2
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: PUSH
17359: LD_VAR 0 1
17363: PUSH
17364: LD_VAR 0 2
17368: PUSH
17369: LD_INT 4
17371: MINUS
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: PUSH
17381: LD_VAR 0 1
17385: PUSH
17386: LD_INT 3
17388: MINUS
17389: PUSH
17390: LD_VAR 0 2
17394: PUSH
17395: LD_INT 3
17397: MINUS
17398: PUSH
17399: LD_INT 2
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: ST_TO_ADDR
// end ; 4 :
17414: GO 17695
17416: LD_INT 4
17418: DOUBLE
17419: EQUAL
17420: IFTRUE 17424
17422: GO 17557
17424: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17425: LD_ADDR_VAR 0 5
17429: PUSH
17430: LD_VAR 0 1
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 4
17442: PLUS
17443: PUSH
17444: LD_INT 0
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: PUSH
17452: LD_VAR 0 1
17456: PUSH
17457: LD_INT 3
17459: PLUS
17460: PUSH
17461: LD_VAR 0 2
17465: PUSH
17466: LD_INT 3
17468: PLUS
17469: PUSH
17470: LD_INT 5
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: PUSH
17478: LD_VAR 0 1
17482: PUSH
17483: LD_INT 3
17485: PLUS
17486: PUSH
17487: LD_VAR 0 2
17491: PUSH
17492: LD_INT 4
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_VAR 0 1
17504: PUSH
17505: LD_VAR 0 2
17509: PUSH
17510: LD_INT 3
17512: MINUS
17513: PUSH
17514: LD_INT 3
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: LD_VAR 0 1
17526: PUSH
17527: LD_INT 4
17529: MINUS
17530: PUSH
17531: LD_VAR 0 2
17535: PUSH
17536: LD_INT 4
17538: MINUS
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: ST_TO_ADDR
// end ; 5 :
17555: GO 17695
17557: LD_INT 5
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17694
17565: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17566: LD_ADDR_VAR 0 5
17570: PUSH
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 4
17578: MINUS
17579: PUSH
17580: LD_VAR 0 2
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: PUSH
17593: LD_VAR 0 1
17597: PUSH
17598: LD_VAR 0 2
17602: PUSH
17603: LD_INT 4
17605: MINUS
17606: PUSH
17607: LD_INT 3
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: LIST
17614: PUSH
17615: LD_VAR 0 1
17619: PUSH
17620: LD_INT 4
17622: PLUS
17623: PUSH
17624: LD_VAR 0 2
17628: PUSH
17629: LD_INT 4
17631: PLUS
17632: PUSH
17633: LD_INT 5
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: PUSH
17641: LD_VAR 0 1
17645: PUSH
17646: LD_INT 3
17648: PLUS
17649: PUSH
17650: LD_VAR 0 2
17654: PUSH
17655: LD_INT 4
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: PUSH
17663: LD_VAR 0 1
17667: PUSH
17668: LD_VAR 0 2
17672: PUSH
17673: LD_INT 3
17675: PLUS
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: ST_TO_ADDR
// end ; end ;
17692: GO 17695
17694: POP
// result := list ;
17695: LD_ADDR_VAR 0 4
17699: PUSH
17700: LD_VAR 0 5
17704: ST_TO_ADDR
// end ;
17705: LD_VAR 0 4
17709: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17710: LD_INT 0
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
17720: PPUSH
// result := false ;
17721: LD_ADDR_VAR 0 7
17725: PUSH
17726: LD_INT 0
17728: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17729: LD_VAR 0 1
17733: NOT
17734: PUSH
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 266
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: IN
17755: NOT
17756: OR
17757: PUSH
17758: LD_VAR 0 2
17762: NOT
17763: OR
17764: PUSH
17765: LD_VAR 0 5
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 1
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 3
17781: PUSH
17782: LD_INT 4
17784: PUSH
17785: LD_INT 5
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: IN
17796: NOT
17797: OR
17798: PUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: LD_VAR 0 4
17808: PPUSH
17809: CALL_OW 488
17813: NOT
17814: OR
17815: IFFALSE 17819
// exit ;
17817: GO 18500
// pom := GetBase ( bdepot ) ;
17819: LD_ADDR_VAR 0 10
17823: PUSH
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 274
17833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17834: LD_ADDR_VAR 0 11
17838: PUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 248
17853: PPUSH
17854: CALL_OW 450
17858: ST_TO_ADDR
// if check_cost then
17859: LD_VAR 0 6
17863: IFFALSE 17940
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17865: LD_VAR 0 10
17869: PPUSH
17870: LD_INT 1
17872: PPUSH
17873: CALL_OW 275
17877: PUSH
17878: LD_VAR 0 11
17882: PUSH
17883: LD_INT 1
17885: ARRAY
17886: GREATEREQUAL
17887: PUSH
17888: LD_VAR 0 10
17892: PPUSH
17893: LD_INT 2
17895: PPUSH
17896: CALL_OW 275
17900: PUSH
17901: LD_VAR 0 11
17905: PUSH
17906: LD_INT 2
17908: ARRAY
17909: GREATEREQUAL
17910: AND
17911: PUSH
17912: LD_VAR 0 10
17916: PPUSH
17917: LD_INT 3
17919: PPUSH
17920: CALL_OW 275
17924: PUSH
17925: LD_VAR 0 11
17929: PUSH
17930: LD_INT 3
17932: ARRAY
17933: GREATEREQUAL
17934: AND
17935: NOT
17936: IFFALSE 17940
// exit ;
17938: GO 18500
// if GetBType ( bdepot ) = b_depot then
17940: LD_VAR 0 1
17944: PPUSH
17945: CALL_OW 266
17949: PUSH
17950: LD_INT 0
17952: EQUAL
17953: IFFALSE 17965
// dist := 28 else
17955: LD_ADDR_VAR 0 14
17959: PUSH
17960: LD_INT 28
17962: ST_TO_ADDR
17963: GO 17973
// dist := 36 ;
17965: LD_ADDR_VAR 0 14
17969: PUSH
17970: LD_INT 36
17972: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17973: LD_VAR 0 1
17977: PPUSH
17978: LD_VAR 0 3
17982: PPUSH
17983: LD_VAR 0 4
17987: PPUSH
17988: CALL_OW 297
17992: PUSH
17993: LD_VAR 0 14
17997: GREATER
17998: IFFALSE 18002
// exit ;
18000: GO 18500
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18002: LD_ADDR_VAR 0 12
18006: PUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: LD_VAR 0 4
18021: PPUSH
18022: LD_VAR 0 5
18026: PPUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: CALL_OW 248
18036: PPUSH
18037: LD_INT 0
18039: PPUSH
18040: CALL 18505 0 6
18044: ST_TO_ADDR
// if not hexes then
18045: LD_VAR 0 12
18049: NOT
18050: IFFALSE 18054
// exit ;
18052: GO 18500
// hex := GetHexInfo ( x , y ) ;
18054: LD_ADDR_VAR 0 15
18058: PUSH
18059: LD_VAR 0 3
18063: PPUSH
18064: LD_VAR 0 4
18068: PPUSH
18069: CALL_OW 546
18073: ST_TO_ADDR
// if hex [ 1 ] then
18074: LD_VAR 0 15
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: IFFALSE 18086
// exit ;
18084: GO 18500
// height := hex [ 2 ] ;
18086: LD_ADDR_VAR 0 13
18090: PUSH
18091: LD_VAR 0 15
18095: PUSH
18096: LD_INT 2
18098: ARRAY
18099: ST_TO_ADDR
// for i = 1 to hexes do
18100: LD_ADDR_VAR 0 8
18104: PUSH
18105: DOUBLE
18106: LD_INT 1
18108: DEC
18109: ST_TO_ADDR
18110: LD_VAR 0 12
18114: PUSH
18115: FOR_TO
18116: IFFALSE 18444
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18118: LD_VAR 0 12
18122: PUSH
18123: LD_VAR 0 8
18127: ARRAY
18128: PUSH
18129: LD_INT 1
18131: ARRAY
18132: PPUSH
18133: LD_VAR 0 12
18137: PUSH
18138: LD_VAR 0 8
18142: ARRAY
18143: PUSH
18144: LD_INT 2
18146: ARRAY
18147: PPUSH
18148: CALL_OW 488
18152: NOT
18153: IFFALSE 18157
// continue ;
18155: GO 18115
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18157: LD_ADDR_VAR 0 9
18161: PUSH
18162: LD_VAR 0 12
18166: PUSH
18167: LD_VAR 0 8
18171: ARRAY
18172: PUSH
18173: LD_INT 1
18175: ARRAY
18176: PPUSH
18177: LD_VAR 0 12
18181: PUSH
18182: LD_VAR 0 8
18186: ARRAY
18187: PUSH
18188: LD_INT 2
18190: ARRAY
18191: PPUSH
18192: CALL_OW 546
18196: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18197: LD_VAR 0 9
18201: PUSH
18202: LD_INT 1
18204: ARRAY
18205: PUSH
18206: LD_VAR 0 9
18210: PUSH
18211: LD_INT 2
18213: ARRAY
18214: PUSH
18215: LD_VAR 0 13
18219: PUSH
18220: LD_INT 2
18222: PLUS
18223: GREATER
18224: OR
18225: PUSH
18226: LD_VAR 0 9
18230: PUSH
18231: LD_INT 2
18233: ARRAY
18234: PUSH
18235: LD_VAR 0 13
18239: PUSH
18240: LD_INT 2
18242: MINUS
18243: LESS
18244: OR
18245: PUSH
18246: LD_VAR 0 9
18250: PUSH
18251: LD_INT 3
18253: ARRAY
18254: PUSH
18255: LD_INT 0
18257: PUSH
18258: LD_INT 8
18260: PUSH
18261: LD_INT 9
18263: PUSH
18264: LD_INT 10
18266: PUSH
18267: LD_INT 11
18269: PUSH
18270: LD_INT 12
18272: PUSH
18273: LD_INT 13
18275: PUSH
18276: LD_INT 16
18278: PUSH
18279: LD_INT 17
18281: PUSH
18282: LD_INT 18
18284: PUSH
18285: LD_INT 19
18287: PUSH
18288: LD_INT 20
18290: PUSH
18291: LD_INT 21
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: IN
18309: NOT
18310: OR
18311: PUSH
18312: LD_VAR 0 9
18316: PUSH
18317: LD_INT 5
18319: ARRAY
18320: NOT
18321: OR
18322: PUSH
18323: LD_VAR 0 9
18327: PUSH
18328: LD_INT 6
18330: ARRAY
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 7
18340: PUSH
18341: LD_INT 9
18343: PUSH
18344: LD_INT 10
18346: PUSH
18347: LD_INT 11
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: IN
18358: NOT
18359: OR
18360: PUSH
18361: LD_VAR 0 12
18365: PUSH
18366: LD_VAR 0 8
18370: ARRAY
18371: PUSH
18372: LD_INT 1
18374: ARRAY
18375: PPUSH
18376: LD_VAR 0 12
18380: PUSH
18381: LD_VAR 0 8
18385: ARRAY
18386: PUSH
18387: LD_INT 2
18389: ARRAY
18390: PPUSH
18391: CALL_OW 428
18395: PUSH
18396: LD_INT 0
18398: GREATER
18399: OR
18400: PUSH
18401: LD_VAR 0 12
18405: PUSH
18406: LD_VAR 0 8
18410: ARRAY
18411: PUSH
18412: LD_INT 1
18414: ARRAY
18415: PPUSH
18416: LD_VAR 0 12
18420: PUSH
18421: LD_VAR 0 8
18425: ARRAY
18426: PUSH
18427: LD_INT 2
18429: ARRAY
18430: PPUSH
18431: CALL_OW 351
18435: OR
18436: IFFALSE 18442
// exit ;
18438: POP
18439: POP
18440: GO 18500
// end ;
18442: GO 18115
18444: POP
18445: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18446: LD_VAR 0 2
18450: PUSH
18451: LD_INT 29
18453: PUSH
18454: LD_INT 30
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: IN
18461: PUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_VAR 0 4
18471: PPUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 255
18481: PPUSH
18482: CALL_OW 440
18486: NOT
18487: AND
18488: IFFALSE 18492
// exit ;
18490: GO 18500
// result := true ;
18492: LD_ADDR_VAR 0 7
18496: PUSH
18497: LD_INT 1
18499: ST_TO_ADDR
// end ;
18500: LD_VAR 0 7
18504: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18505: LD_INT 0
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
18530: PPUSH
18531: PPUSH
18532: PPUSH
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
18540: PPUSH
18541: PPUSH
18542: PPUSH
18543: PPUSH
18544: PPUSH
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
// result = [ ] ;
18565: LD_ADDR_VAR 0 7
18569: PUSH
18570: EMPTY
18571: ST_TO_ADDR
// temp_list = [ ] ;
18572: LD_ADDR_VAR 0 9
18576: PUSH
18577: EMPTY
18578: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18579: LD_VAR 0 4
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: LD_INT 4
18598: PUSH
18599: LD_INT 5
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: IN
18610: NOT
18611: PUSH
18612: LD_VAR 0 1
18616: PUSH
18617: LD_INT 0
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: IN
18627: PUSH
18628: LD_VAR 0 5
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 2
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: IN
18647: NOT
18648: AND
18649: OR
18650: IFFALSE 18654
// exit ;
18652: GO 37039
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18654: LD_VAR 0 1
18658: PUSH
18659: LD_INT 6
18661: PUSH
18662: LD_INT 7
18664: PUSH
18665: LD_INT 8
18667: PUSH
18668: LD_INT 13
18670: PUSH
18671: LD_INT 12
18673: PUSH
18674: LD_INT 15
18676: PUSH
18677: LD_INT 11
18679: PUSH
18680: LD_INT 14
18682: PUSH
18683: LD_INT 10
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: IN
18697: IFFALSE 18707
// btype = b_lab ;
18699: LD_ADDR_VAR 0 1
18703: PUSH
18704: LD_INT 6
18706: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18707: LD_VAR 0 6
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: IN
18726: NOT
18727: PUSH
18728: LD_VAR 0 1
18732: PUSH
18733: LD_INT 0
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: LD_INT 3
18744: PUSH
18745: LD_INT 6
18747: PUSH
18748: LD_INT 36
18750: PUSH
18751: LD_INT 4
18753: PUSH
18754: LD_INT 5
18756: PUSH
18757: LD_INT 31
18759: PUSH
18760: LD_INT 32
18762: PUSH
18763: LD_INT 33
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: IN
18779: NOT
18780: PUSH
18781: LD_VAR 0 6
18785: PUSH
18786: LD_INT 1
18788: EQUAL
18789: AND
18790: OR
18791: PUSH
18792: LD_VAR 0 1
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: IN
18807: NOT
18808: PUSH
18809: LD_VAR 0 6
18813: PUSH
18814: LD_INT 2
18816: EQUAL
18817: AND
18818: OR
18819: IFFALSE 18829
// mode = 0 ;
18821: LD_ADDR_VAR 0 6
18825: PUSH
18826: LD_INT 0
18828: ST_TO_ADDR
// case mode of 0 :
18829: LD_VAR 0 6
18833: PUSH
18834: LD_INT 0
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 30295
18842: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18843: LD_ADDR_VAR 0 11
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: LD_INT 2
18928: NEG
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 1
18947: PUSH
18948: LD_INT 1
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: LD_INT 2
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: LD_INT 2
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: LD_INT 3
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: LD_INT 3
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19036: LD_ADDR_VAR 0 12
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 0
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 0
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 1
19094: NEG
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: LD_INT 0
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: NEG
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 2
19159: NEG
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 2
19170: NEG
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: NEG
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 3
19193: NEG
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 3
19204: NEG
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19232: LD_ADDR_VAR 0 13
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 1
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 1
19313: NEG
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 2
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 2
19367: NEG
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 2
19379: NEG
19380: PUSH
19381: LD_INT 3
19383: NEG
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 3
19391: NEG
19392: PUSH
19393: LD_INT 2
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 3
19403: NEG
19404: PUSH
19405: LD_INT 3
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19431: LD_ADDR_VAR 0 14
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: LD_INT 1
19451: NEG
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: LD_INT 1
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: LD_INT 1
19504: NEG
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 1
19512: NEG
19513: PUSH
19514: LD_INT 2
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: NEG
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: NEG
19578: PUSH
19579: LD_INT 3
19581: NEG
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: LD_INT 3
19592: NEG
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: LD_INT 2
19603: NEG
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19627: LD_ADDR_VAR 0 15
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: LD_INT 1
19700: NEG
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: LD_INT 0
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 1
19739: NEG
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: NEG
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 3
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 3
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19820: LD_ADDR_VAR 0 16
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: LD_INT 1
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: LD_INT 2
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: NEG
19956: PUSH
19957: LD_INT 2
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 3
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 3
19977: PUSH
19978: LD_INT 3
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: LD_INT 3
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20013: LD_ADDR_VAR 0 17
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: LD_INT 2
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 0
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: NEG
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 2
20212: NEG
20213: PUSH
20214: LD_INT 2
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20243: LD_ADDR_VAR 0 18
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: LD_INT 1
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: NEG
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: LD_INT 2
20328: NEG
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 2
20339: NEG
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: LD_INT 0
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: LD_INT 2
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 0
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: LD_INT 1
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 2
20430: NEG
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 2
20442: NEG
20443: PUSH
20444: LD_INT 2
20446: NEG
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20473: LD_ADDR_VAR 0 19
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 1
20542: NEG
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: LD_INT 2
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 2
20649: NEG
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: NEG
20661: PUSH
20662: LD_INT 1
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 2
20672: NEG
20673: PUSH
20674: LD_INT 2
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20703: LD_ADDR_VAR 0 20
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: NEG
20762: PUSH
20763: LD_INT 0
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 1
20784: NEG
20785: PUSH
20786: LD_INT 2
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 2
20799: NEG
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 2
20879: NEG
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: NEG
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 2
20902: NEG
20903: PUSH
20904: LD_INT 2
20906: NEG
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20933: LD_ADDR_VAR 0 21
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: LD_INT 2
21018: NEG
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: LD_INT 2
21029: NEG
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 2
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 2
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 2
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: NEG
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: NEG
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 2
21132: NEG
21133: PUSH
21134: LD_INT 2
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21163: LD_ADDR_VAR 0 22
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: LD_INT 1
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 1
21244: NEG
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 1
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 2
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 1
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: NEG
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: LD_INT 0
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: LD_INT 1
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 2
21362: NEG
21363: PUSH
21364: LD_INT 2
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21393: LD_ADDR_VAR 0 23
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: LD_INT 1
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: LD_INT 1
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: NEG
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: LD_INT 2
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 2
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: LD_INT 2
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: LD_INT 2
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 2
21580: NEG
21581: PUSH
21582: LD_INT 1
21584: NEG
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 2
21592: NEG
21593: PUSH
21594: LD_INT 2
21596: NEG
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: LD_INT 3
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: LD_INT 3
21620: NEG
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: LD_INT 2
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21673: LD_ADDR_VAR 0 24
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: NEG
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: LD_INT 2
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 2
21769: NEG
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 2
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: LD_INT 2
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 1
21838: NEG
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 2
21860: NEG
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: LD_INT 2
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: LD_INT 2
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: LD_INT 1
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21949: LD_ADDR_VAR 0 25
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: LD_INT 1
21969: NEG
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: NEG
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: LD_INT 2
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 2
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 2
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 2
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 0
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 2
22125: NEG
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 2
22136: NEG
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 2
22148: NEG
22149: PUSH
22150: LD_INT 2
22152: NEG
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 3
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 3
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: LD_INT 3
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22223: LD_ADDR_VAR 0 26
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: LD_INT 1
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: NEG
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: NEG
22305: PUSH
22306: LD_INT 2
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: LD_INT 2
22319: NEG
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 0
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: LD_INT 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 2
22410: NEG
22411: PUSH
22412: LD_INT 1
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: LD_INT 2
22426: NEG
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 2
22434: PUSH
22435: LD_INT 3
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: LD_INT 3
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 2
22465: NEG
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22499: LD_ADDR_VAR 0 27
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 0
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 1
22568: NEG
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: LD_INT 2
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: LD_INT 2
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: LD_INT 1
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 2
22675: NEG
22676: PUSH
22677: LD_INT 0
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: LD_INT 2
22702: NEG
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 3
22732: NEG
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 3
22744: NEG
22745: PUSH
22746: LD_INT 2
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22779: LD_ADDR_VAR 0 28
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: LD_INT 1
22799: NEG
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 1
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 2
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 2
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 2
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 2
22966: NEG
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 2
22978: NEG
22979: PUSH
22980: LD_INT 2
22982: NEG
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 2
22990: NEG
22991: PUSH
22992: LD_INT 3
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: LD_INT 3
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 3
23014: NEG
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 3
23026: NEG
23027: PUSH
23028: LD_INT 2
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23061: LD_ADDR_VAR 0 29
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 2
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 2
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 2
23227: NEG
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: LD_INT 2
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: LD_INT 3
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: LD_INT 3
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 3
23305: NEG
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23340: LD_ADDR_VAR 0 30
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 2
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 2
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: LD_INT 1
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: LD_INT 3
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: PUSH
23563: LD_INT 3
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 2
23572: NEG
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 3
23583: NEG
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23618: LD_ADDR_VAR 0 31
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: LD_INT 1
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: NEG
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 1
23699: NEG
23700: PUSH
23701: LD_INT 2
23703: NEG
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 2
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 2
23807: NEG
23808: PUSH
23809: LD_INT 3
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 3
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: LD_INT 3
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 3
23861: NEG
23862: PUSH
23863: LD_INT 2
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23896: LD_ADDR_VAR 0 32
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: LD_INT 1
23969: NEG
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 2
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 2
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 2
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: LD_INT 2
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 2
24062: NEG
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 3
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 2
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 2
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 3
24139: NEG
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24174: LD_ADDR_VAR 0 33
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: LD_INT 2
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: LD_INT 2
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: LD_INT 3
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: LD_INT 3
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: LD_INT 2
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: NEG
24419: PUSH
24420: LD_INT 2
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24453: LD_ADDR_VAR 0 34
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 2
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 1
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: LD_INT 2
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: NEG
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 2
24620: NEG
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: LD_INT 2
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: LD_INT 3
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 2
24659: NEG
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 3
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: NEG
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 3
24698: NEG
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24733: LD_ADDR_VAR 0 35
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: NEG
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24845: LD_ADDR_VAR 0 36
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24957: LD_ADDR_VAR 0 37
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25069: LD_ADDR_VAR 0 38
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 2
25160: NEG
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25181: LD_ADDR_VAR 0 39
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: LD_INT 1
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: LD_INT 2
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 2
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25293: LD_ADDR_VAR 0 40
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25405: LD_ADDR_VAR 0 41
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 1
25486: NEG
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 2
25595: NEG
25596: PUSH
25597: LD_INT 3
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 2
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 3
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 3
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 3
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 3
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: LD_INT 3
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 3
25679: NEG
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 3
25690: NEG
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 3
25702: NEG
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 3
25714: NEG
25715: PUSH
25716: LD_INT 3
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25755: LD_ADDR_VAR 0 42
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 2
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: NEG
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 2
25933: NEG
25934: PUSH
25935: LD_INT 2
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: LD_INT 3
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 3
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 3
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 3
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 3
26001: PUSH
26002: LD_INT 3
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 3
26052: NEG
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 3
26064: NEG
26065: PUSH
26066: LD_INT 3
26068: NEG
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26105: LD_ADDR_VAR 0 43
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 2
26282: NEG
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 3
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: LD_INT 3
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 3
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: LD_INT 3
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: LD_INT 3
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 3
26401: NEG
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 3
26412: NEG
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26453: LD_ADDR_VAR 0 44
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 2
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: LD_INT 1
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: NEG
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 2
26619: NEG
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 2
26631: NEG
26632: PUSH
26633: LD_INT 2
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 2
26643: NEG
26644: PUSH
26645: LD_INT 3
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 3
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 3
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 3
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: LD_INT 3
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: LD_INT 3
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 2
26716: NEG
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 3
26727: NEG
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 3
26738: NEG
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 3
26750: NEG
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 3
26762: NEG
26763: PUSH
26764: LD_INT 3
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26803: LD_ADDR_VAR 0 45
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 2
26969: NEG
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: NEG
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 2
26993: NEG
26994: PUSH
26995: LD_INT 3
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: LD_INT 3
27009: NEG
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 3
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 2
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 3
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 3
27049: PUSH
27050: LD_INT 3
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 3
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: LD_INT 3
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 3
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 3
27100: NEG
27101: PUSH
27102: LD_INT 2
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 3
27112: NEG
27113: PUSH
27114: LD_INT 3
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27153: LD_ADDR_VAR 0 46
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: LD_INT 2
27238: NEG
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 2
27249: NEG
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 2
27330: NEG
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 3
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: LD_INT 3
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 3
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 3
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 3
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 3
27449: NEG
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 3
27460: NEG
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27501: LD_ADDR_VAR 0 47
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: LD_INT 2
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27652: LD_ADDR_VAR 0 48
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: LD_INT 2
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27799: LD_ADDR_VAR 0 49
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 2
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27943: LD_ADDR_VAR 0 50
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28087: LD_ADDR_VAR 0 51
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PUSH
28158: LD_INT 1
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28234: LD_ADDR_VAR 0 52
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 2
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 2
28338: NEG
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28385: LD_ADDR_VAR 0 53
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28615: LD_ADDR_VAR 0 54
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 2
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: NEG
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: LD_INT 2
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28845: LD_ADDR_VAR 0 55
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 2
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 2
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: NEG
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 2
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29075: LD_ADDR_VAR 0 56
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 2
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: LD_INT 2
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: NEG
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: NEG
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29305: LD_ADDR_VAR 0 57
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: LD_INT 1
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 2
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 2
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: LD_INT 2
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29535: LD_ADDR_VAR 0 58
29539: PUSH
29540: LD_INT 0
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: LD_INT 2
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: NEG
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29765: LD_ADDR_VAR 0 59
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29853: LD_ADDR_VAR 0 60
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29941: LD_ADDR_VAR 0 61
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30029: LD_ADDR_VAR 0 62
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 0
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30117: LD_ADDR_VAR 0 63
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30205: LD_ADDR_VAR 0 64
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: ST_TO_ADDR
// end ; 1 :
30293: GO 36190
30295: LD_INT 1
30297: DOUBLE
30298: EQUAL
30299: IFTRUE 30303
30301: GO 32926
30303: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30304: LD_ADDR_VAR 0 11
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 3
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 3
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 2
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30348: LD_ADDR_VAR 0 12
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30389: LD_ADDR_VAR 0 13
30393: PUSH
30394: LD_INT 3
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 3
30406: PUSH
30407: LD_INT 3
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: LD_INT 3
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30429: LD_ADDR_VAR 0 14
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30470: LD_ADDR_VAR 0 15
30474: PUSH
30475: LD_INT 2
30477: NEG
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 3
30488: NEG
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 3
30499: NEG
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30514: LD_ADDR_VAR 0 16
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: LD_INT 3
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 3
30545: NEG
30546: PUSH
30547: LD_INT 3
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30560: LD_ADDR_VAR 0 17
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: LD_INT 3
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: LD_INT 2
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30604: LD_ADDR_VAR 0 18
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30645: LD_ADDR_VAR 0 19
30649: PUSH
30650: LD_INT 3
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: LD_INT 3
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 3
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30685: LD_ADDR_VAR 0 20
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 3
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30726: LD_ADDR_VAR 0 21
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 3
30744: NEG
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 3
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30770: LD_ADDR_VAR 0 22
30774: PUSH
30775: LD_INT 2
30777: NEG
30778: PUSH
30779: LD_INT 3
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: NEG
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: LD_INT 3
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30816: LD_ADDR_VAR 0 23
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: LD_INT 4
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 3
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30860: LD_ADDR_VAR 0 24
30864: PUSH
30865: LD_INT 3
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 4
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30901: LD_ADDR_VAR 0 25
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 4
30918: PUSH
30919: LD_INT 3
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: LD_INT 4
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30941: LD_ADDR_VAR 0 26
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: LD_INT 3
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: LD_INT 4
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30982: LD_ADDR_VAR 0 27
30986: PUSH
30987: LD_INT 3
30989: NEG
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 3
31000: NEG
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 4
31011: NEG
31012: PUSH
31013: LD_INT 1
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31026: LD_ADDR_VAR 0 28
31030: PUSH
31031: LD_INT 3
31033: NEG
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: LD_INT 4
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 4
31057: NEG
31058: PUSH
31059: LD_INT 3
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31072: LD_ADDR_VAR 0 29
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: LD_INT 3
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 3
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: LD_INT 2
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: LD_INT 4
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: LD_INT 4
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 3
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 5
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 5
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 4
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: NEG
31182: PUSH
31183: LD_INT 6
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 6
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: LD_INT 5
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31227: LD_ADDR_VAR 0 30
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 3
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 3
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 4
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 4
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 4
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 5
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 5
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 5
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 6
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 6
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31370: LD_ADDR_VAR 0 31
31374: PUSH
31375: LD_INT 3
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 3
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 3
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 4
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 4
31417: PUSH
31418: LD_INT 4
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: LD_INT 4
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 5
31437: PUSH
31438: LD_INT 4
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 5
31447: PUSH
31448: LD_INT 5
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 4
31457: PUSH
31458: LD_INT 5
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 6
31467: PUSH
31468: LD_INT 5
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 6
31477: PUSH
31478: LD_INT 6
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 5
31487: PUSH
31488: LD_INT 6
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31509: LD_ADDR_VAR 0 32
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: LD_INT 4
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: LD_INT 4
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: LD_INT 3
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: LD_INT 5
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: LD_INT 5
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: LD_INT 4
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 6
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 6
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 5
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31652: LD_ADDR_VAR 0 33
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: NEG
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 4
31704: NEG
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 4
31715: NEG
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 4
31727: NEG
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 5
31738: NEG
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 5
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 5
31761: NEG
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 6
31772: NEG
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 6
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31807: LD_ADDR_VAR 0 34
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 3
31826: NEG
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 3
31838: NEG
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 4
31862: NEG
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 4
31874: NEG
31875: PUSH
31876: LD_INT 4
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 4
31886: NEG
31887: PUSH
31888: LD_INT 5
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 5
31898: NEG
31899: PUSH
31900: LD_INT 4
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 5
31910: NEG
31911: PUSH
31912: LD_INT 5
31914: NEG
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 5
31922: NEG
31923: PUSH
31924: LD_INT 6
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 6
31934: NEG
31935: PUSH
31936: LD_INT 5
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 6
31946: NEG
31947: PUSH
31948: LD_INT 6
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31970: LD_ADDR_VAR 0 41
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: LD_INT 3
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32014: LD_ADDR_VAR 0 42
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 3
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32055: LD_ADDR_VAR 0 43
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32095: LD_ADDR_VAR 0 44
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: LD_INT 3
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32136: LD_ADDR_VAR 0 45
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 3
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32180: LD_ADDR_VAR 0 46
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: LD_INT 2
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32226: LD_ADDR_VAR 0 47
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32259: LD_ADDR_VAR 0 48
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 2
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32290: LD_ADDR_VAR 0 49
32294: PUSH
32295: LD_INT 3
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 3
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32319: LD_ADDR_VAR 0 50
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32348: LD_ADDR_VAR 0 51
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32379: LD_ADDR_VAR 0 52
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 3
32398: NEG
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32412: LD_ADDR_VAR 0 53
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 3
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 3
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32456: LD_ADDR_VAR 0 54
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32497: LD_ADDR_VAR 0 55
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: LD_INT 3
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32537: LD_ADDR_VAR 0 56
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: NEG
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32578: LD_ADDR_VAR 0 57
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 3
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 3
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32622: LD_ADDR_VAR 0 58
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: NEG
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32668: LD_ADDR_VAR 0 59
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: LD_INT 2
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32712: LD_ADDR_VAR 0 60
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32753: LD_ADDR_VAR 0 61
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32793: LD_ADDR_VAR 0 62
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32834: LD_ADDR_VAR 0 63
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: LD_INT 1
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32878: LD_ADDR_VAR 0 64
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 2
32909: NEG
32910: PUSH
32911: LD_INT 2
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: ST_TO_ADDR
// end ; 2 :
32924: GO 36190
32926: LD_INT 2
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 36189
32934: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32935: LD_ADDR_VAR 0 29
32939: PUSH
32940: LD_INT 4
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 4
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 5
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 5
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 4
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 3
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 5
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 4
33065: PUSH
33066: LD_INT 4
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 3
33075: PUSH
33076: LD_INT 4
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 4
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 3
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: LD_INT 5
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 5
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 4
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 3
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 4
33274: NEG
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 4
33297: NEG
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 4
33320: NEG
33321: PUSH
33322: LD_INT 4
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 4
33332: NEG
33333: PUSH
33334: LD_INT 5
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 3
33344: NEG
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 3
33356: NEG
33357: PUSH
33358: LD_INT 3
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 4
33368: NEG
33369: PUSH
33370: LD_INT 3
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 5
33380: NEG
33381: PUSH
33382: LD_INT 4
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 5
33392: NEG
33393: PUSH
33394: LD_INT 5
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 3
33404: NEG
33405: PUSH
33406: LD_INT 5
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 5
33416: NEG
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33473: LD_ADDR_VAR 0 30
33477: PUSH
33478: LD_INT 4
33480: PUSH
33481: LD_INT 4
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 4
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 5
33500: PUSH
33501: LD_INT 4
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 5
33510: PUSH
33511: LD_INT 5
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 4
33520: PUSH
33521: LD_INT 5
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 3
33530: PUSH
33531: LD_INT 4
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: PUSH
33541: LD_INT 3
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 5
33550: PUSH
33551: LD_INT 3
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 3
33560: PUSH
33561: LD_INT 5
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 3
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 3
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 4
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 4
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 4
33663: NEG
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 4
33674: NEG
33675: PUSH
33676: LD_INT 1
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 3
33686: NEG
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 3
33697: NEG
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 5
33719: NEG
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 5
33730: NEG
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 5
33742: NEG
33743: PUSH
33744: LD_INT 2
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: NEG
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 3
33765: NEG
33766: PUSH
33767: LD_INT 3
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: NEG
33778: PUSH
33779: LD_INT 4
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: NEG
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 4
33825: NEG
33826: PUSH
33827: LD_INT 3
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 4
33837: NEG
33838: PUSH
33839: LD_INT 4
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: NEG
33850: PUSH
33851: LD_INT 4
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 4
33861: NEG
33862: PUSH
33863: LD_INT 2
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 4
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 5
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 4
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: LD_INT 4
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: NEG
33941: PUSH
33942: LD_INT 5
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 3
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: LD_INT 5
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34020: LD_ADDR_VAR 0 31
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: LD_INT 4
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 3
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 4
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 5
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 5
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 3
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: NEG
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 3
34120: NEG
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 4
34176: NEG
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 4
34187: NEG
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 4
34199: NEG
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 4
34222: NEG
34223: PUSH
34224: LD_INT 4
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 4
34234: NEG
34235: PUSH
34236: LD_INT 5
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 3
34246: NEG
34247: PUSH
34248: LD_INT 4
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: NEG
34259: PUSH
34260: LD_INT 3
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 4
34270: NEG
34271: PUSH
34272: LD_INT 3
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 5
34282: NEG
34283: PUSH
34284: LD_INT 4
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 5
34294: NEG
34295: PUSH
34296: LD_INT 5
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 3
34306: NEG
34307: PUSH
34308: LD_INT 5
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 5
34318: NEG
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 3
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 4
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 3
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: LD_INT 4
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: LD_INT 4
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 4
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 4
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 5
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 5
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 4
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 3
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 5
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34570: LD_ADDR_VAR 0 32
34574: PUSH
34575: LD_INT 4
34577: NEG
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 4
34588: NEG
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 3
34600: NEG
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 3
34611: NEG
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 4
34622: NEG
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 5
34633: NEG
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 5
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 5
34656: NEG
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 3
34668: NEG
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 3
34679: NEG
34680: PUSH
34681: LD_INT 3
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 3
34691: NEG
34692: PUSH
34693: LD_INT 4
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 3
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 3
34727: NEG
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 4
34739: NEG
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 4
34751: NEG
34752: PUSH
34753: LD_INT 4
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 2
34763: NEG
34764: PUSH
34765: LD_INT 4
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 4
34775: NEG
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 4
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 5
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: LD_INT 4
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 3
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: LD_INT 4
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: LD_INT 5
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 3
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: LD_INT 5
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 3
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 4
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 4
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 4
34982: PUSH
34983: LD_INT 4
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 4
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 5
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 5
35012: PUSH
35013: LD_INT 5
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 4
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 3
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 3
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35117: LD_ADDR_VAR 0 33
35121: PUSH
35122: LD_INT 4
35124: NEG
35125: PUSH
35126: LD_INT 4
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 4
35136: NEG
35137: PUSH
35138: LD_INT 5
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 3
35148: NEG
35149: PUSH
35150: LD_INT 4
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 3
35160: NEG
35161: PUSH
35162: LD_INT 3
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 4
35172: NEG
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 5
35184: NEG
35185: PUSH
35186: LD_INT 4
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 5
35196: NEG
35197: PUSH
35198: LD_INT 5
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: LD_INT 5
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 5
35220: NEG
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 3
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: LD_INT 4
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 3
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: LD_INT 2
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 3
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 4
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: LD_INT 4
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 4
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 4
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 5
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 5
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 4
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 3
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 3
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 5
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 3
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 3
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 4
35447: PUSH
35448: LD_INT 3
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 4
35457: PUSH
35458: LD_INT 4
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 3
35467: PUSH
35468: LD_INT 4
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: LD_INT 3
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 4
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: LD_INT 4
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: LD_INT 4
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 3
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: LD_INT 4
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: LD_INT 5
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 5
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: LD_INT 4
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: LD_INT 3
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: PUSH
35590: LD_INT 5
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35655: LD_ADDR_VAR 0 34
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 4
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 5
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 4
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: LD_INT 3
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: LD_INT 4
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: LD_INT 5
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 3
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: LD_INT 5
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 3
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 3
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 4
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 4
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 4
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 4
35857: PUSH
35858: LD_INT 4
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 4
35867: PUSH
35868: LD_INT 3
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 5
35877: PUSH
35878: LD_INT 4
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 5
35887: PUSH
35888: LD_INT 5
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 4
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 3
35907: PUSH
35908: LD_INT 4
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: LD_INT 3
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 5
35927: PUSH
35928: LD_INT 3
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 3
35937: PUSH
35938: LD_INT 5
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 3
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: LD_INT 3
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 4
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 4
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: LD_INT 3
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 4
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 4
36040: NEG
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 4
36051: NEG
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 3
36063: NEG
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 3
36074: NEG
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 4
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 5
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 5
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 5
36119: NEG
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 3
36131: NEG
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
// end ; end ;
36187: GO 36190
36189: POP
// case btype of b_depot , b_warehouse :
36190: LD_VAR 0 1
36194: PUSH
36195: LD_INT 0
36197: DOUBLE
36198: EQUAL
36199: IFTRUE 36209
36201: LD_INT 1
36203: DOUBLE
36204: EQUAL
36205: IFTRUE 36209
36207: GO 36410
36209: POP
// case nation of nation_american :
36210: LD_VAR 0 5
36214: PUSH
36215: LD_INT 1
36217: DOUBLE
36218: EQUAL
36219: IFTRUE 36223
36221: GO 36279
36223: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: LD_VAR 0 11
36233: PUSH
36234: LD_VAR 0 12
36238: PUSH
36239: LD_VAR 0 13
36243: PUSH
36244: LD_VAR 0 14
36248: PUSH
36249: LD_VAR 0 15
36253: PUSH
36254: LD_VAR 0 16
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: PUSH
36267: LD_VAR 0 4
36271: PUSH
36272: LD_INT 1
36274: PLUS
36275: ARRAY
36276: ST_TO_ADDR
36277: GO 36408
36279: LD_INT 2
36281: DOUBLE
36282: EQUAL
36283: IFTRUE 36287
36285: GO 36343
36287: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36288: LD_ADDR_VAR 0 9
36292: PUSH
36293: LD_VAR 0 17
36297: PUSH
36298: LD_VAR 0 18
36302: PUSH
36303: LD_VAR 0 19
36307: PUSH
36308: LD_VAR 0 20
36312: PUSH
36313: LD_VAR 0 21
36317: PUSH
36318: LD_VAR 0 22
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: PUSH
36331: LD_VAR 0 4
36335: PUSH
36336: LD_INT 1
36338: PLUS
36339: ARRAY
36340: ST_TO_ADDR
36341: GO 36408
36343: LD_INT 3
36345: DOUBLE
36346: EQUAL
36347: IFTRUE 36351
36349: GO 36407
36351: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36352: LD_ADDR_VAR 0 9
36356: PUSH
36357: LD_VAR 0 23
36361: PUSH
36362: LD_VAR 0 24
36366: PUSH
36367: LD_VAR 0 25
36371: PUSH
36372: LD_VAR 0 26
36376: PUSH
36377: LD_VAR 0 27
36381: PUSH
36382: LD_VAR 0 28
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: PUSH
36395: LD_VAR 0 4
36399: PUSH
36400: LD_INT 1
36402: PLUS
36403: ARRAY
36404: ST_TO_ADDR
36405: GO 36408
36407: POP
36408: GO 36957
36410: LD_INT 2
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36424
36416: LD_INT 3
36418: DOUBLE
36419: EQUAL
36420: IFTRUE 36424
36422: GO 36480
36424: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36425: LD_ADDR_VAR 0 9
36429: PUSH
36430: LD_VAR 0 29
36434: PUSH
36435: LD_VAR 0 30
36439: PUSH
36440: LD_VAR 0 31
36444: PUSH
36445: LD_VAR 0 32
36449: PUSH
36450: LD_VAR 0 33
36454: PUSH
36455: LD_VAR 0 34
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: PUSH
36468: LD_VAR 0 4
36472: PUSH
36473: LD_INT 1
36475: PLUS
36476: ARRAY
36477: ST_TO_ADDR
36478: GO 36957
36480: LD_INT 16
36482: DOUBLE
36483: EQUAL
36484: IFTRUE 36536
36486: LD_INT 17
36488: DOUBLE
36489: EQUAL
36490: IFTRUE 36536
36492: LD_INT 18
36494: DOUBLE
36495: EQUAL
36496: IFTRUE 36536
36498: LD_INT 19
36500: DOUBLE
36501: EQUAL
36502: IFTRUE 36536
36504: LD_INT 20
36506: DOUBLE
36507: EQUAL
36508: IFTRUE 36536
36510: LD_INT 21
36512: DOUBLE
36513: EQUAL
36514: IFTRUE 36536
36516: LD_INT 23
36518: DOUBLE
36519: EQUAL
36520: IFTRUE 36536
36522: LD_INT 24
36524: DOUBLE
36525: EQUAL
36526: IFTRUE 36536
36528: LD_INT 25
36530: DOUBLE
36531: EQUAL
36532: IFTRUE 36536
36534: GO 36592
36536: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36537: LD_ADDR_VAR 0 9
36541: PUSH
36542: LD_VAR 0 35
36546: PUSH
36547: LD_VAR 0 36
36551: PUSH
36552: LD_VAR 0 37
36556: PUSH
36557: LD_VAR 0 38
36561: PUSH
36562: LD_VAR 0 39
36566: PUSH
36567: LD_VAR 0 40
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: PUSH
36580: LD_VAR 0 4
36584: PUSH
36585: LD_INT 1
36587: PLUS
36588: ARRAY
36589: ST_TO_ADDR
36590: GO 36957
36592: LD_INT 6
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36648
36598: LD_INT 7
36600: DOUBLE
36601: EQUAL
36602: IFTRUE 36648
36604: LD_INT 8
36606: DOUBLE
36607: EQUAL
36608: IFTRUE 36648
36610: LD_INT 13
36612: DOUBLE
36613: EQUAL
36614: IFTRUE 36648
36616: LD_INT 12
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36648
36622: LD_INT 15
36624: DOUBLE
36625: EQUAL
36626: IFTRUE 36648
36628: LD_INT 11
36630: DOUBLE
36631: EQUAL
36632: IFTRUE 36648
36634: LD_INT 14
36636: DOUBLE
36637: EQUAL
36638: IFTRUE 36648
36640: LD_INT 10
36642: DOUBLE
36643: EQUAL
36644: IFTRUE 36648
36646: GO 36704
36648: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36649: LD_ADDR_VAR 0 9
36653: PUSH
36654: LD_VAR 0 41
36658: PUSH
36659: LD_VAR 0 42
36663: PUSH
36664: LD_VAR 0 43
36668: PUSH
36669: LD_VAR 0 44
36673: PUSH
36674: LD_VAR 0 45
36678: PUSH
36679: LD_VAR 0 46
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: PUSH
36692: LD_VAR 0 4
36696: PUSH
36697: LD_INT 1
36699: PLUS
36700: ARRAY
36701: ST_TO_ADDR
36702: GO 36957
36704: LD_INT 36
36706: DOUBLE
36707: EQUAL
36708: IFTRUE 36712
36710: GO 36768
36712: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36713: LD_ADDR_VAR 0 9
36717: PUSH
36718: LD_VAR 0 47
36722: PUSH
36723: LD_VAR 0 48
36727: PUSH
36728: LD_VAR 0 49
36732: PUSH
36733: LD_VAR 0 50
36737: PUSH
36738: LD_VAR 0 51
36742: PUSH
36743: LD_VAR 0 52
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: PUSH
36756: LD_VAR 0 4
36760: PUSH
36761: LD_INT 1
36763: PLUS
36764: ARRAY
36765: ST_TO_ADDR
36766: GO 36957
36768: LD_INT 4
36770: DOUBLE
36771: EQUAL
36772: IFTRUE 36794
36774: LD_INT 5
36776: DOUBLE
36777: EQUAL
36778: IFTRUE 36794
36780: LD_INT 34
36782: DOUBLE
36783: EQUAL
36784: IFTRUE 36794
36786: LD_INT 37
36788: DOUBLE
36789: EQUAL
36790: IFTRUE 36794
36792: GO 36850
36794: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36795: LD_ADDR_VAR 0 9
36799: PUSH
36800: LD_VAR 0 53
36804: PUSH
36805: LD_VAR 0 54
36809: PUSH
36810: LD_VAR 0 55
36814: PUSH
36815: LD_VAR 0 56
36819: PUSH
36820: LD_VAR 0 57
36824: PUSH
36825: LD_VAR 0 58
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: PUSH
36838: LD_VAR 0 4
36842: PUSH
36843: LD_INT 1
36845: PLUS
36846: ARRAY
36847: ST_TO_ADDR
36848: GO 36957
36850: LD_INT 31
36852: DOUBLE
36853: EQUAL
36854: IFTRUE 36900
36856: LD_INT 32
36858: DOUBLE
36859: EQUAL
36860: IFTRUE 36900
36862: LD_INT 33
36864: DOUBLE
36865: EQUAL
36866: IFTRUE 36900
36868: LD_INT 27
36870: DOUBLE
36871: EQUAL
36872: IFTRUE 36900
36874: LD_INT 26
36876: DOUBLE
36877: EQUAL
36878: IFTRUE 36900
36880: LD_INT 28
36882: DOUBLE
36883: EQUAL
36884: IFTRUE 36900
36886: LD_INT 29
36888: DOUBLE
36889: EQUAL
36890: IFTRUE 36900
36892: LD_INT 30
36894: DOUBLE
36895: EQUAL
36896: IFTRUE 36900
36898: GO 36956
36900: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36901: LD_ADDR_VAR 0 9
36905: PUSH
36906: LD_VAR 0 59
36910: PUSH
36911: LD_VAR 0 60
36915: PUSH
36916: LD_VAR 0 61
36920: PUSH
36921: LD_VAR 0 62
36925: PUSH
36926: LD_VAR 0 63
36930: PUSH
36931: LD_VAR 0 64
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: PUSH
36944: LD_VAR 0 4
36948: PUSH
36949: LD_INT 1
36951: PLUS
36952: ARRAY
36953: ST_TO_ADDR
36954: GO 36957
36956: POP
// temp_list2 = [ ] ;
36957: LD_ADDR_VAR 0 10
36961: PUSH
36962: EMPTY
36963: ST_TO_ADDR
// for i in temp_list do
36964: LD_ADDR_VAR 0 8
36968: PUSH
36969: LD_VAR 0 9
36973: PUSH
36974: FOR_IN
36975: IFFALSE 37027
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36977: LD_ADDR_VAR 0 10
36981: PUSH
36982: LD_VAR 0 10
36986: PUSH
36987: LD_VAR 0 8
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: PUSH
36996: LD_VAR 0 2
37000: PLUS
37001: PUSH
37002: LD_VAR 0 8
37006: PUSH
37007: LD_INT 2
37009: ARRAY
37010: PUSH
37011: LD_VAR 0 3
37015: PLUS
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: EMPTY
37022: LIST
37023: ADD
37024: ST_TO_ADDR
37025: GO 36974
37027: POP
37028: POP
// result = temp_list2 ;
37029: LD_ADDR_VAR 0 7
37033: PUSH
37034: LD_VAR 0 10
37038: ST_TO_ADDR
// end ;
37039: LD_VAR 0 7
37043: RET
// export function GetDriverVehicle ( unit ) ; begin
37044: LD_INT 0
37046: PPUSH
// if not unit then
37047: LD_VAR 0 1
37051: NOT
37052: IFFALSE 37056
// exit ;
37054: GO 37094
// result := IsInUnit ( unit ) ;
37056: LD_ADDR_VAR 0 2
37060: PUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL_OW 310
37070: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
37071: LD_VAR 0 2
37075: PPUSH
37076: CALL_OW 247
37080: PUSH
37081: LD_INT 2
37083: NONEQUAL
37084: IFFALSE 37094
// result := 0 ;
37086: LD_ADDR_VAR 0 2
37090: PUSH
37091: LD_INT 0
37093: ST_TO_ADDR
// end ; end_of_file
37094: LD_VAR 0 2
37098: RET
// every 1 do var i ;
37099: GO 37101
37101: DISABLE
37102: LD_INT 0
37104: PPUSH
// begin Video ( true ) ;
37105: LD_INT 1
37107: PPUSH
37108: CALL 7082 0 1
// CenterOnXY ( 53 , 40 ) ;
37112: LD_INT 53
37114: PPUSH
37115: LD_INT 40
37117: PPUSH
37118: CALL_OW 84
// wait ( 0 0$5 ) ;
37122: LD_INT 175
37124: PPUSH
37125: CALL_OW 67
// if gammaCommander = 1 then
37129: LD_EXP 12
37133: PUSH
37134: LD_INT 1
37136: EQUAL
37137: IFFALSE 37151
// Say ( Donaldson , D1-Don-1 ) ;
37139: LD_EXP 3
37143: PPUSH
37144: LD_STRING D1-Don-1
37146: PPUSH
37147: CALL_OW 88
// if gammaCommander = 2 then
37151: LD_EXP 12
37155: PUSH
37156: LD_INT 2
37158: EQUAL
37159: IFFALSE 37173
// Say ( Brown , D1-Brown-1 ) ;
37161: LD_EXP 2
37165: PPUSH
37166: LD_STRING D1-Brown-1
37168: PPUSH
37169: CALL_OW 88
// if gammaCommander = 3 then
37173: LD_EXP 12
37177: PUSH
37178: LD_INT 3
37180: EQUAL
37181: IFFALSE 37195
// Say ( Houten , D1-VanH-1 ) ;
37183: LD_EXP 13
37187: PPUSH
37188: LD_STRING D1-VanH-1
37190: PPUSH
37191: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37195: LD_EXP 22
37199: PPUSH
37200: LD_STRING D1-Har-1
37202: PPUSH
37203: CALL_OW 94
// if gammaCommander = 1 then
37207: LD_EXP 12
37211: PUSH
37212: LD_INT 1
37214: EQUAL
37215: IFFALSE 37229
// Say ( Donaldson , D1-Don-2 ) ;
37217: LD_EXP 3
37221: PPUSH
37222: LD_STRING D1-Don-2
37224: PPUSH
37225: CALL_OW 88
// if gammaCommander = 2 then
37229: LD_EXP 12
37233: PUSH
37234: LD_INT 2
37236: EQUAL
37237: IFFALSE 37251
// Say ( Brown , D1-Brown-2 ) ;
37239: LD_EXP 2
37243: PPUSH
37244: LD_STRING D1-Brown-2
37246: PPUSH
37247: CALL_OW 88
// if gammaCommander = 3 then
37251: LD_EXP 12
37255: PUSH
37256: LD_INT 3
37258: EQUAL
37259: IFFALSE 37273
// Say ( Houten , D1-VanH-2 ) ;
37261: LD_EXP 13
37265: PPUSH
37266: LD_STRING D1-VanH-2
37268: PPUSH
37269: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37273: LD_EXP 22
37277: PPUSH
37278: LD_STRING D1-Har-2
37280: PPUSH
37281: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37285: LD_INT 22
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 33
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 61
37307: PUSH
37308: EMPTY
37309: LIST
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: PPUSH
37316: CALL_OW 69
37320: IFFALSE 37385
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37322: LD_ADDR_VAR 0 1
37326: PUSH
37327: LD_INT 22
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 33
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 61
37349: PUSH
37350: EMPTY
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PPUSH
37358: CALL_OW 69
37362: PUSH
37363: FOR_IN
37364: IFFALSE 37383
// ComAgressiveMove ( i , 70 , 41 ) ;
37366: LD_VAR 0 1
37370: PPUSH
37371: LD_INT 70
37373: PPUSH
37374: LD_INT 41
37376: PPUSH
37377: CALL_OW 114
37381: GO 37363
37383: POP
37384: POP
// repeat wait ( 0 0$1 ) ;
37385: LD_INT 35
37387: PPUSH
37388: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37392: LD_ADDR_VAR 0 1
37396: PUSH
37397: LD_INT 22
37399: PUSH
37400: LD_INT 6
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: PPUSH
37410: CALL_OW 69
37414: PUSH
37415: FOR_IN
37416: IFFALSE 37435
// ComAgressiveMove ( i , 54 , 20 ) ;
37418: LD_VAR 0 1
37422: PPUSH
37423: LD_INT 54
37425: PPUSH
37426: LD_INT 20
37428: PPUSH
37429: CALL_OW 114
37433: GO 37415
37435: POP
37436: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37437: LD_ADDR_VAR 0 1
37441: PUSH
37442: LD_INT 22
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 25
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: LD_INT 54
37467: PUSH
37468: EMPTY
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: PPUSH
37480: CALL_OW 69
37484: PUSH
37485: FOR_IN
37486: IFFALSE 37520
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37488: LD_VAR 0 1
37492: PPUSH
37493: LD_INT 70
37495: PPUSH
37496: LD_INT 41
37498: PPUSH
37499: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37503: LD_VAR 0 1
37507: PPUSH
37508: LD_INT 46
37510: PPUSH
37511: LD_INT 39
37513: PPUSH
37514: CALL_OW 174
// end ;
37518: GO 37485
37520: POP
37521: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37522: LD_ADDR_VAR 0 1
37526: PUSH
37527: LD_INT 22
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 21
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 3
37549: PUSH
37550: LD_INT 24
37552: PUSH
37553: LD_INT 500
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: PPUSH
37569: CALL_OW 69
37573: PUSH
37574: FOR_IN
37575: IFFALSE 37608
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37577: LD_VAR 0 1
37581: PPUSH
37582: LD_EXP 37
37586: PPUSH
37587: CALL_OW 250
37591: PPUSH
37592: LD_EXP 37
37596: PPUSH
37597: CALL_OW 251
37601: PPUSH
37602: CALL_OW 111
37606: GO 37574
37608: POP
37609: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37610: LD_INT 22
37612: PUSH
37613: LD_INT 6
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 21
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 24
37632: PUSH
37633: LD_INT 250
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: PPUSH
37645: CALL_OW 69
37649: PUSH
37650: LD_INT 5
37652: LESS
37653: IFFALSE 37385
// Video ( false ) ;
37655: LD_INT 0
37657: PPUSH
37658: CALL 7082 0 1
// ChangeMissionObjectives ( M1 ) ;
37662: LD_STRING M1
37664: PPUSH
37665: CALL_OW 337
// SaveForQuickRestart ;
37669: CALL_OW 22
// startCutscene = 0 ;
37673: LD_ADDR_EXP 38
37677: PUSH
37678: LD_INT 0
37680: ST_TO_ADDR
// end ;
37681: PPOPN 1
37683: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37684: LD_EXP 38
37688: IFFALSE 37779
37690: GO 37692
37692: DISABLE
37693: LD_INT 0
37695: PPUSH
37696: PPUSH
// begin enable ;
37697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37698: LD_ADDR_VAR 0 1
37702: PUSH
37703: LD_INT 22
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 21
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 3
37725: PUSH
37726: LD_INT 24
37728: PUSH
37729: LD_INT 700
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: PPUSH
37745: CALL_OW 69
37749: ST_TO_ADDR
// for i in tmp do
37750: LD_ADDR_VAR 0 2
37754: PUSH
37755: LD_VAR 0 1
37759: PUSH
37760: FOR_IN
37761: IFFALSE 37777
// SetLives ( i , 700 ) ;
37763: LD_VAR 0 2
37767: PPUSH
37768: LD_INT 700
37770: PPUSH
37771: CALL_OW 234
37775: GO 37760
37777: POP
37778: POP
// end ;
37779: PPOPN 2
37781: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 do
37782: LD_INT 22
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 101
37794: PUSH
37795: LD_INT 6
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PPUSH
37806: CALL_OW 69
37810: PUSH
37811: LD_INT 0
37813: EQUAL
37814: IFFALSE 38063
37816: GO 37818
37818: DISABLE
// begin PrepareSupportFromDelta ;
37819: CALL 3796 0 0
// firstAttack = 1 ;
37823: LD_ADDR_EXP 33
37827: PUSH
37828: LD_INT 1
37830: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37831: LD_EXP 8
37835: PPUSH
37836: CALL_OW 302
37840: IFFALSE 37856
// Say ( Gladstone , D2-Glad-1 ) else
37842: LD_EXP 8
37846: PPUSH
37847: LD_STRING D2-Glad-1
37849: PPUSH
37850: CALL_OW 88
37854: GO 37964
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37856: LD_INT 4
37858: PPUSH
37859: LD_INT 22
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 21
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 25
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 25
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 25
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 25
37914: PUSH
37915: LD_INT 4
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: PPUSH
37934: CALL_OW 70
37938: PUSH
37939: LD_EXP 15
37943: PUSH
37944: LD_EXP 14
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: DIFF
37953: PPUSH
37954: LD_STRING D2-Sol1-1
37956: PPUSH
37957: LD_STRING D2-FSol1-1
37959: PPUSH
37960: CALL 7110 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37964: LD_EXP 3
37968: PPUSH
37969: CALL_OW 302
37973: PUSH
37974: LD_EXP 12
37978: PUSH
37979: LD_INT 1
37981: EQUAL
37982: AND
37983: IFFALSE 37997
// Say ( Donaldson , D2-Don-1 ) ;
37985: LD_EXP 3
37989: PPUSH
37990: LD_STRING D2-Don-1
37992: PPUSH
37993: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37997: LD_EXP 2
38001: PPUSH
38002: CALL_OW 302
38006: PUSH
38007: LD_EXP 12
38011: PUSH
38012: LD_INT 2
38014: EQUAL
38015: AND
38016: IFFALSE 38030
// Say ( Brown , D2-Brown-1 ) ;
38018: LD_EXP 2
38022: PPUSH
38023: LD_STRING D2-Brown-1
38025: PPUSH
38026: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
38030: LD_EXP 13
38034: PPUSH
38035: CALL_OW 302
38039: PUSH
38040: LD_EXP 12
38044: PUSH
38045: LD_INT 3
38047: EQUAL
38048: AND
38049: IFFALSE 38063
// Say ( Houten , D2-VanH-1 ) ;
38051: LD_EXP 13
38055: PPUSH
38056: LD_STRING D2-VanH-1
38058: PPUSH
38059: CALL_OW 88
// end ;
38063: END
// every 0 0$1 do var none ;
38064: GO 38066
38066: DISABLE
38067: LD_INT 0
38069: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38070: LD_STRING 07_time
38072: PPUSH
38073: LD_INT 12600
38075: PPUSH
38076: CALL_OW 30
38080: PUSH
38081: LD_INT 3
38083: DIV
38084: PPUSH
38085: CALL_OW 67
// PrepareMacmillanSquad ;
38089: CALL 4458 0 0
// CenterNowOnUnits ( JMM ) ;
38093: LD_EXP 1
38097: PPUSH
38098: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38102: LD_EXP 1
38106: PPUSH
38107: LD_STRING D3-JMM-1
38109: PPUSH
38110: CALL_OW 88
// JMMArrive = 1 ;
38114: LD_ADDR_EXP 39
38118: PUSH
38119: LD_INT 1
38121: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38122: LD_EXP 3
38126: PPUSH
38127: CALL_OW 302
38131: PUSH
38132: LD_EXP 12
38136: PUSH
38137: LD_INT 1
38139: EQUAL
38140: AND
38141: IFFALSE 38157
// begin Say ( Donaldson , D3-Don-1 ) ;
38143: LD_EXP 3
38147: PPUSH
38148: LD_STRING D3-Don-1
38150: PPUSH
38151: CALL_OW 88
// end else
38155: GO 38209
// begin if gammaCommander = 1 then
38157: LD_EXP 12
38161: PUSH
38162: LD_INT 1
38164: EQUAL
38165: IFFALSE 38209
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38167: LD_EXP 11
38171: PPUSH
38172: LD_INT 26
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PPUSH
38182: CALL_OW 72
38186: PPUSH
38187: LD_STRING D3-Sol1-1
38189: PPUSH
38190: LD_STRING D3-Sol1-1
38192: PPUSH
38193: CALL 7110 0 3
// Say ( JMM , D3-JMM-2 ) ;
38197: LD_EXP 1
38201: PPUSH
38202: LD_STRING D3-JMM-2
38204: PPUSH
38205: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38209: LD_EXP 2
38213: PPUSH
38214: CALL_OW 302
38218: PUSH
38219: LD_EXP 12
38223: PUSH
38224: LD_INT 2
38226: EQUAL
38227: AND
38228: IFFALSE 38244
// begin Say ( Brown , D3-Brown-1 ) ;
38230: LD_EXP 2
38234: PPUSH
38235: LD_STRING D3-Brown-1
38237: PPUSH
38238: CALL_OW 88
// end else
38242: GO 38296
// begin if gammaCommander = 2 then
38244: LD_EXP 12
38248: PUSH
38249: LD_INT 2
38251: EQUAL
38252: IFFALSE 38296
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38254: LD_EXP 11
38258: PPUSH
38259: LD_INT 26
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PPUSH
38269: CALL_OW 72
38273: PPUSH
38274: LD_STRING D3-Sol1-1a
38276: PPUSH
38277: LD_STRING D3-Sol1-1a
38279: PPUSH
38280: CALL 7110 0 3
// Say ( JMM , D3-JMM-2 ) ;
38284: LD_EXP 1
38288: PPUSH
38289: LD_STRING D3-JMM-2
38291: PPUSH
38292: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38296: LD_EXP 13
38300: PPUSH
38301: CALL_OW 302
38305: PUSH
38306: LD_EXP 12
38310: PUSH
38311: LD_INT 3
38313: EQUAL
38314: AND
38315: IFFALSE 38331
// begin Say ( Houten , D3-VanH-1 ) ;
38317: LD_EXP 13
38321: PPUSH
38322: LD_STRING D3-VanH-1
38324: PPUSH
38325: CALL_OW 88
// end else
38329: GO 38383
// begin if gammaCommander = 3 then
38331: LD_EXP 12
38335: PUSH
38336: LD_INT 3
38338: EQUAL
38339: IFFALSE 38383
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38341: LD_EXP 11
38345: PPUSH
38346: LD_INT 26
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 72
38360: PPUSH
38361: LD_STRING D3-Sol1-1b
38363: PPUSH
38364: LD_STRING D3-Sol1-1b
38366: PPUSH
38367: CALL 7110 0 3
// Say ( JMM , D3-JMM-2 ) ;
38371: LD_EXP 1
38375: PPUSH
38376: LD_STRING D3-JMM-2
38378: PPUSH
38379: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38383: LD_EXP 15
38387: PPUSH
38388: CALL_OW 302
38392: IFFALSE 38420
// begin Say ( Joan , D3a-Joan-1 ) ;
38394: LD_EXP 15
38398: PPUSH
38399: LD_STRING D3a-Joan-1
38401: PPUSH
38402: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38406: LD_EXP 1
38410: PPUSH
38411: LD_STRING D3a-JMM-1
38413: PPUSH
38414: CALL_OW 88
// end else
38418: GO 38762
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38420: LD_STRING 06_JoanStatus_1
38422: PPUSH
38423: LD_INT 0
38425: PPUSH
38426: CALL_OW 30
38430: PUSH
38431: LD_INT 1
38433: EQUAL
38434: IFFALSE 38762
// begin Say ( JMM , D3b-JMM-1 ) ;
38436: LD_EXP 1
38440: PPUSH
38441: LD_STRING D3b-JMM-1
38443: PPUSH
38444: CALL_OW 88
// if gammaCommander = 1 then
38448: LD_EXP 12
38452: PUSH
38453: LD_INT 1
38455: EQUAL
38456: IFFALSE 38513
// if IsOK ( Donaldson ) then
38458: LD_EXP 3
38462: PPUSH
38463: CALL_OW 302
38467: IFFALSE 38483
// Say ( Donaldson , D3b-Don-1 ) else
38469: LD_EXP 3
38473: PPUSH
38474: LD_STRING D3b-Don-1
38476: PPUSH
38477: CALL_OW 88
38481: GO 38513
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38483: LD_EXP 11
38487: PPUSH
38488: LD_INT 26
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PPUSH
38498: CALL_OW 72
38502: PPUSH
38503: LD_STRING D3b-Sol1-1
38505: PPUSH
38506: LD_STRING D3b-Sol1-1
38508: PPUSH
38509: CALL 7110 0 3
// if gammaCommander = 2 then
38513: LD_EXP 12
38517: PUSH
38518: LD_INT 2
38520: EQUAL
38521: IFFALSE 38578
// if IsOk ( Brown ) then
38523: LD_EXP 2
38527: PPUSH
38528: CALL_OW 302
38532: IFFALSE 38548
// Say ( Brown , D3b-Brown-1 ) else
38534: LD_EXP 2
38538: PPUSH
38539: LD_STRING D3b-Brown-1
38541: PPUSH
38542: CALL_OW 88
38546: GO 38578
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38548: LD_EXP 11
38552: PPUSH
38553: LD_INT 26
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PPUSH
38563: CALL_OW 72
38567: PPUSH
38568: LD_STRING D3b-Sol1-1
38570: PPUSH
38571: LD_STRING D3b-Sol1-1
38573: PPUSH
38574: CALL 7110 0 3
// if gammaCommander = 3 then
38578: LD_EXP 12
38582: PUSH
38583: LD_INT 3
38585: EQUAL
38586: IFFALSE 38643
// if IsOk ( Houten ) then
38588: LD_EXP 13
38592: PPUSH
38593: CALL_OW 302
38597: IFFALSE 38613
// Say ( Houten , D3b-VanH-1 ) else
38599: LD_EXP 13
38603: PPUSH
38604: LD_STRING D3b-VanH-1
38606: PPUSH
38607: CALL_OW 88
38611: GO 38643
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38613: LD_EXP 11
38617: PPUSH
38618: LD_INT 26
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 72
38632: PPUSH
38633: LD_STRING D3b-Sol1-1
38635: PPUSH
38636: LD_STRING D3b-Sol1-1
38638: PPUSH
38639: CALL 7110 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38643: LD_EXP 11
38647: PPUSH
38648: LD_INT 26
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PPUSH
38658: CALL_OW 72
38662: PUSH
38663: LD_EXP 12
38667: PUSH
38668: LD_INT 1
38670: EQUAL
38671: PUSH
38672: LD_EXP 3
38676: PPUSH
38677: CALL_OW 302
38681: AND
38682: OR
38683: PUSH
38684: LD_EXP 12
38688: PUSH
38689: LD_INT 2
38691: EQUAL
38692: PUSH
38693: LD_EXP 2
38697: PPUSH
38698: CALL_OW 302
38702: AND
38703: OR
38704: PUSH
38705: LD_EXP 12
38709: PUSH
38710: LD_INT 3
38712: EQUAL
38713: PUSH
38714: LD_EXP 13
38718: PPUSH
38719: CALL_OW 302
38723: AND
38724: OR
38725: IFFALSE 38739
// Say ( JMM , D3b-JMM-2 ) ;
38727: LD_EXP 1
38731: PPUSH
38732: LD_STRING D3b-JMM-2
38734: PPUSH
38735: CALL_OW 88
// if IsOK ( Lisa ) then
38739: LD_EXP 6
38743: PPUSH
38744: CALL_OW 302
38748: IFFALSE 38762
// Say ( Lisa , D3b-Lisa-2 ) ;
38750: LD_EXP 6
38754: PPUSH
38755: LD_STRING D3b-Lisa-2
38757: PPUSH
38758: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
38762: LD_ADDR_VAR 0 1
38766: PUSH
38767: LD_EXP 1
38771: PUSH
38772: LD_EXP 2
38776: PUSH
38777: LD_EXP 3
38781: PUSH
38782: LD_EXP 4
38786: PUSH
38787: LD_EXP 5
38791: PUSH
38792: LD_EXP 6
38796: PUSH
38797: LD_EXP 7
38801: PUSH
38802: LD_EXP 8
38806: PUSH
38807: LD_EXP 9
38811: PUSH
38812: LD_EXP 10
38816: PUSH
38817: LD_EXP 15
38821: PUSH
38822: LD_EXP 14
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: LD_EXP 42
38845: ADD
38846: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38847: LD_INT 22
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 21
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 26
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 25
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 25
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 25
38902: PUSH
38903: LD_INT 3
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 25
38912: PUSH
38913: LD_INT 4
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: PPUSH
38933: CALL_OW 69
38937: PUSH
38938: LD_VAR 0 1
38942: DIFF
38943: PPUSH
38944: LD_STRING DCa-Sol1-1
38946: PPUSH
38947: LD_STRING DCa-Sol1-1
38949: PPUSH
38950: CALL 7110 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38954: LD_EXP 1
38958: PPUSH
38959: LD_STRING DCb-JMM-1
38961: PPUSH
38962: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38966: LD_INT 22
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 21
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 26
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 25
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 25
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 25
39021: PUSH
39022: LD_INT 3
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 25
39031: PUSH
39032: LD_INT 4
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: PPUSH
39052: CALL_OW 69
39056: PUSH
39057: LD_VAR 0 1
39061: DIFF
39062: PPUSH
39063: LD_STRING DCb-Sol1-1
39065: PPUSH
39066: LD_STRING DCb-Sol1-1
39068: PPUSH
39069: CALL 7110 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39073: LD_EXP 1
39077: PPUSH
39078: LD_STRING DCb-JMM-2
39080: PPUSH
39081: CALL_OW 88
// secondAttack = 1 ;
39085: LD_ADDR_EXP 34
39089: PUSH
39090: LD_INT 1
39092: ST_TO_ADDR
// end ;
39093: PPOPN 1
39095: END
// every 0 0$01 trigger JMMArrive = 1 do
39096: LD_EXP 39
39100: PUSH
39101: LD_INT 1
39103: EQUAL
39104: IFFALSE 39184
39106: GO 39108
39108: DISABLE
// begin wait ( 3 3$0 ) ;
39109: LD_INT 6300
39111: PPUSH
39112: CALL_OW 67
// DialogueOn ;
39116: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39120: LD_EXP 23
39124: PPUSH
39125: LD_STRING D4-Pow-1
39127: PPUSH
39128: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39132: LD_EXP 1
39136: PPUSH
39137: LD_STRING D4-JMM-1
39139: PPUSH
39140: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39144: LD_EXP 23
39148: PPUSH
39149: LD_STRING D4-Pow-2
39151: PPUSH
39152: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39156: LD_EXP 1
39160: PPUSH
39161: LD_STRING D4-JMM-2
39163: PPUSH
39164: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39168: LD_EXP 23
39172: PPUSH
39173: LD_STRING D4-Pow-3
39175: PPUSH
39176: CALL_OW 94
// DialogueOff ;
39180: CALL_OW 7
// end ;
39184: END
// every 0 0$01 trigger JMMArrive = 1 do
39185: LD_EXP 39
39189: PUSH
39190: LD_INT 1
39192: EQUAL
39193: IFFALSE 39225
39195: GO 39197
39197: DISABLE
// begin wait ( 8 8$0 ) ;
39198: LD_INT 16800
39200: PPUSH
39201: CALL_OW 67
// DialogueOn ;
39205: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39209: LD_EXP 23
39213: PPUSH
39214: LD_STRING D4a-Pow-1
39216: PPUSH
39217: CALL_OW 94
// DialogueOff ;
39221: CALL_OW 7
// end ;
39225: END
// every 0 0$01 trigger JMMArrive = 1 do
39226: LD_EXP 39
39230: PUSH
39231: LD_INT 1
39233: EQUAL
39234: IFFALSE 39279
39236: GO 39238
39238: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39239: LD_INT 21000
39241: PUSH
39242: LD_INT 25200
39244: PUSH
39245: LD_INT 31500
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: PUSH
39253: LD_OWVAR 67
39257: ARRAY
39258: PPUSH
39259: CALL_OW 67
// PrepareSikorsky ;
39263: CALL 5583 0 0
// SikorskyArrive = 1 ;
39267: LD_ADDR_EXP 18
39271: PUSH
39272: LD_INT 1
39274: ST_TO_ADDR
// PrepareSikorskyArmy ;
39275: CALL 5756 0 0
// end ;
39279: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39280: LD_EXP 17
39284: PPUSH
39285: LD_INT 5
39287: PPUSH
39288: CALL_OW 308
39292: IFFALSE 39484
39294: GO 39296
39296: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39297: LD_EXP 17
39301: PPUSH
39302: CALL_OW 87
// DialogueOn ;
39306: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39310: LD_EXP 16
39314: PPUSH
39315: LD_STRING D5-Sik-1
39317: PPUSH
39318: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39322: LD_EXP 1
39326: PPUSH
39327: LD_STRING D5-JMM-1a
39329: PPUSH
39330: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39334: LD_EXP 16
39338: PPUSH
39339: LD_STRING D5-Sik-2
39341: PPUSH
39342: CALL_OW 88
// case query ( QSikorski ) of 1 :
39346: LD_STRING QSikorski
39348: PPUSH
39349: CALL_OW 97
39353: PUSH
39354: LD_INT 1
39356: DOUBLE
39357: EQUAL
39358: IFTRUE 39362
39360: GO 39385
39362: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39363: LD_EXP 16
39367: PPUSH
39368: LD_STRING D5a-Sik-1
39370: PPUSH
39371: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39375: LD_ADDR_EXP 19
39379: PUSH
39380: LD_INT 2100
39382: ST_TO_ADDR
// end ; 2 :
39383: GO 39472
39385: LD_INT 2
39387: DOUBLE
39388: EQUAL
39389: IFTRUE 39393
39391: GO 39416
39393: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39394: LD_EXP 16
39398: PPUSH
39399: LD_STRING D5b-Sik-1
39401: PPUSH
39402: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39406: LD_ADDR_EXP 19
39410: PUSH
39411: LD_INT 10500
39413: ST_TO_ADDR
// end ; 3 :
39414: GO 39472
39416: LD_INT 3
39418: DOUBLE
39419: EQUAL
39420: IFTRUE 39424
39422: GO 39471
39424: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39425: LD_EXP 16
39429: PPUSH
39430: LD_STRING D5c-Sik-1
39432: PPUSH
39433: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39437: LD_EXP 1
39441: PPUSH
39442: LD_STRING D5c-JMM-1
39444: PPUSH
39445: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39449: LD_EXP 16
39453: PPUSH
39454: LD_STRING D5c-Sik-2
39456: PPUSH
39457: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39461: LD_ADDR_EXP 19
39465: PUSH
39466: LD_INT 10500
39468: ST_TO_ADDR
// end ; end ;
39469: GO 39472
39471: POP
// DialogueOff ;
39472: CALL_OW 7
// timerStatus = 1 ;
39476: LD_ADDR_EXP 35
39480: PUSH
39481: LD_INT 1
39483: ST_TO_ADDR
// end ;
39484: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39485: LD_EXP 19
39489: PUSH
39490: LD_INT 35
39492: LESS
39493: IFFALSE 39541
39495: GO 39497
39497: DISABLE
// begin timerStatus = 0 ;
39498: LD_ADDR_EXP 35
39502: PUSH
39503: LD_INT 0
39505: ST_TO_ADDR
// DialogueOn ;
39506: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39510: LD_EXP 16
39514: PPUSH
39515: LD_STRING D6-Sik-1
39517: PPUSH
39518: CALL_OW 88
// DialogueOff ;
39522: CALL_OW 7
// SikorskyAI = 1 ;
39526: LD_ADDR_EXP 20
39530: PUSH
39531: LD_INT 1
39533: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39534: LD_STRING M2
39536: PPUSH
39537: CALL_OW 337
// end ;
39541: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39542: LD_EXP 17
39546: PPUSH
39547: LD_INT 18
39549: PPUSH
39550: CALL_OW 308
39554: IFFALSE 39664
39556: GO 39558
39558: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39559: LD_EXP 16
39563: PPUSH
39564: LD_STRING D7-Sik-1
39566: PPUSH
39567: CALL_OW 88
// wait ( 0 0$10 ) ;
39571: LD_INT 350
39573: PPUSH
39574: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
39578: LD_EXP 1
39582: PPUSH
39583: LD_INT 24
39585: PPUSH
39586: CALL_OW 308
39590: PUSH
39591: LD_EXP 1
39595: PPUSH
39596: CALL 37044 0 1
39600: PUSH
39601: LD_EXP 1
39605: PPUSH
39606: CALL 37044 0 1
39610: PPUSH
39611: LD_INT 24
39613: PPUSH
39614: CALL_OW 308
39618: AND
39619: OR
39620: IFFALSE 39644
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39622: LD_EXP 16
39626: PPUSH
39627: LD_STRING D7a-Sik-1
39629: PPUSH
39630: CALL_OW 88
// SikorskyStatus = 1 ;
39634: LD_ADDR_EXP 21
39638: PUSH
39639: LD_INT 1
39641: ST_TO_ADDR
// end else
39642: GO 39664
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39644: LD_EXP 16
39648: PPUSH
39649: LD_STRING D7b-Sik-1
39651: PPUSH
39652: CALL_OW 88
// SikorskyStatus = 2 ;
39656: LD_ADDR_EXP 21
39660: PUSH
39661: LD_INT 2
39663: ST_TO_ADDR
// end ; end ;
39664: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39665: LD_EXP 36
39669: PUSH
39670: LD_INT 1
39672: EQUAL
39673: IFFALSE 39782
39675: GO 39677
39677: DISABLE
39678: LD_INT 0
39680: PPUSH
// begin enable ;
39681: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39682: LD_ADDR_VAR 0 1
39686: PUSH
39687: LD_INT 22
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PPUSH
39697: CALL_OW 69
39701: PUSH
39702: FOR_IN
39703: IFFALSE 39730
// if IsInArea ( i , RussianEscape ) then
39705: LD_VAR 0 1
39709: PPUSH
39710: LD_INT 22
39712: PPUSH
39713: CALL_OW 308
39717: IFFALSE 39728
// RemoveUnit ( i ) ;
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 64
39728: GO 39702
39730: POP
39731: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39732: LD_ADDR_VAR 0 1
39736: PUSH
39737: LD_INT 22
39739: PUSH
39740: LD_INT 6
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PPUSH
39747: CALL_OW 69
39751: PUSH
39752: FOR_IN
39753: IFFALSE 39780
// if IsInArea ( i , RussianEscape ) then
39755: LD_VAR 0 1
39759: PPUSH
39760: LD_INT 22
39762: PPUSH
39763: CALL_OW 308
39767: IFFALSE 39778
// RemoveUnit ( i ) ;
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 64
39778: GO 39752
39780: POP
39781: POP
// end ; end_of_file
39782: PPOPN 1
39784: END
// on BuildingComplete ( building ) do var tmp , un ;
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
// begin if GetSide ( building ) = 3 then
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 255
39798: PUSH
39799: LD_INT 3
39801: EQUAL
39802: IFFALSE 40339
// begin if GetBType ( building ) = b_depot then
39804: LD_VAR 0 1
39808: PPUSH
39809: CALL_OW 266
39813: PUSH
39814: LD_INT 0
39816: EQUAL
39817: IFFALSE 39885
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 274
39828: PPUSH
39829: LD_INT 1
39831: PPUSH
39832: LD_INT 5000
39834: PPUSH
39835: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 274
39848: PPUSH
39849: LD_INT 2
39851: PPUSH
39852: LD_INT 5000
39854: PPUSH
39855: CALL_OW 277
// SetBName ( building , konev ) ;
39859: LD_VAR 0 1
39863: PPUSH
39864: LD_STRING konev
39866: PPUSH
39867: CALL_OW 500
// ruDepot = building ;
39871: LD_ADDR_EXP 28
39875: PUSH
39876: LD_VAR 0 1
39880: ST_TO_ADDR
// BuildRussianBase ;
39881: CALL 7721 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 266
39894: PUSH
39895: LD_INT 0
39897: EQUAL
39898: PUSH
39899: LD_VAR 0 1
39903: PPUSH
39904: CALL_OW 266
39908: PUSH
39909: LD_INT 2
39911: EQUAL
39912: OR
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 266
39923: PUSH
39924: LD_INT 4
39926: EQUAL
39927: OR
39928: IFFALSE 39939
// ComUpgrade ( building ) ;
39930: LD_VAR 0 1
39934: PPUSH
39935: CALL_OW 146
// if GetBType ( building ) = b_lab then
39939: LD_VAR 0 1
39943: PPUSH
39944: CALL_OW 266
39948: PUSH
39949: LD_INT 6
39951: EQUAL
39952: IFFALSE 40003
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39954: LD_VAR 0 1
39958: PPUSH
39959: LD_INT 10
39961: PPUSH
39962: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39966: LD_VAR 0 1
39970: PPUSH
39971: LD_INT 12
39973: PPUSH
39974: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39978: LD_INT 3
39980: PPUSH
39981: LD_VAR 0 1
39985: PPUSH
39986: LD_INT 3
39988: PPUSH
39989: CALL 8265 0 3
// ruLab = building ;
39993: LD_ADDR_EXP 29
39997: PUSH
39998: LD_VAR 0 1
40002: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 266
40012: PUSH
40013: LD_INT 32
40015: EQUAL
40016: IFFALSE 40134
// begin uc_side = 3 ;
40018: LD_ADDR_OWVAR 20
40022: PUSH
40023: LD_INT 3
40025: ST_TO_ADDR
// uc_nation = 3 ;
40026: LD_ADDR_OWVAR 21
40030: PUSH
40031: LD_INT 3
40033: ST_TO_ADDR
// hc_gallery =  ;
40034: LD_ADDR_OWVAR 33
40038: PUSH
40039: LD_STRING 
40041: ST_TO_ADDR
// hc_name =  ;
40042: LD_ADDR_OWVAR 26
40046: PUSH
40047: LD_STRING 
40049: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40050: LD_INT 0
40052: PPUSH
40053: LD_INT 1
40055: PPUSH
40056: LD_EXP 25
40060: PPUSH
40061: LD_EXP 26
40065: PPUSH
40066: CALL_OW 12
40070: PPUSH
40071: CALL_OW 380
// un = CreateHuman ;
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: CALL_OW 44
40084: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40085: LD_VAR 0 3
40089: PPUSH
40090: LD_VAR 0 1
40094: PPUSH
40095: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40099: LD_VAR 0 1
40103: PPUSH
40104: LD_INT 43
40106: PUSH
40107: LD_INT 44
40109: PUSH
40110: LD_INT 46
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: PPUSH
40121: LD_INT 3
40123: PPUSH
40124: CALL_OW 12
40128: ARRAY
40129: PPUSH
40130: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 266
40143: PUSH
40144: LD_INT 33
40146: EQUAL
40147: IFFALSE 40184
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40149: LD_VAR 0 1
40153: PPUSH
40154: LD_INT 43
40156: PUSH
40157: LD_INT 44
40159: PUSH
40160: LD_INT 46
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PPUSH
40171: LD_INT 3
40173: PPUSH
40174: CALL_OW 12
40178: ARRAY
40179: PPUSH
40180: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 266
40193: PUSH
40194: LD_INT 32
40196: EQUAL
40197: IFFALSE 40234
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40199: LD_VAR 0 1
40203: PPUSH
40204: LD_INT 43
40206: PUSH
40207: LD_INT 44
40209: PUSH
40210: LD_INT 46
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PPUSH
40221: LD_INT 3
40223: PPUSH
40224: CALL_OW 12
40228: ARRAY
40229: PPUSH
40230: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 266
40243: PUSH
40244: LD_INT 24
40246: EQUAL
40247: IFFALSE 40257
// russianAI = 1 ;
40249: LD_ADDR_EXP 27
40253: PUSH
40254: LD_INT 1
40256: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40257: LD_EXP 31
40261: PUSH
40262: LD_INT 0
40264: GREATER
40265: IFFALSE 40339
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40267: LD_ADDR_EXP 31
40271: PUSH
40272: LD_EXP 31
40276: PPUSH
40277: LD_INT 1
40279: PPUSH
40280: CALL_OW 3
40284: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40285: LD_ADDR_EXP 31
40289: PUSH
40290: LD_EXP 31
40294: PPUSH
40295: LD_INT 1
40297: PPUSH
40298: CALL_OW 3
40302: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40303: LD_ADDR_EXP 31
40307: PUSH
40308: LD_EXP 31
40312: PPUSH
40313: LD_INT 1
40315: PPUSH
40316: CALL_OW 3
40320: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40321: LD_ADDR_EXP 31
40325: PUSH
40326: LD_EXP 31
40330: PPUSH
40331: LD_INT 1
40333: PPUSH
40334: CALL_OW 3
40338: ST_TO_ADDR
// end ; end ; end ;
40339: PPOPN 3
40341: END
// on UpgradeComplete ( building ) do var i ;
40342: LD_INT 0
40344: PPUSH
// begin if GetSide ( building ) = 3 then
40345: LD_VAR 0 1
40349: PPUSH
40350: CALL_OW 255
40354: PUSH
40355: LD_INT 3
40357: EQUAL
40358: IFFALSE 40539
// begin if GetBType ( building ) = b_factory then
40360: LD_VAR 0 1
40364: PPUSH
40365: CALL_OW 266
40369: PUSH
40370: LD_INT 3
40372: EQUAL
40373: IFFALSE 40440
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40375: LD_ADDR_VAR 0 2
40379: PUSH
40380: LD_INT 22
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 25
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL_OW 69
40408: PUSH
40409: FOR_IN
40410: IFFALSE 40428
// ComEnterUnit ( i , building ) ;
40412: LD_VAR 0 2
40416: PPUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: CALL_OW 120
40426: GO 40409
40428: POP
40429: POP
// ruFab = building ;
40430: LD_ADDR_EXP 30
40434: PUSH
40435: LD_VAR 0 1
40439: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40440: LD_VAR 0 1
40444: PPUSH
40445: CALL_OW 266
40449: PUSH
40450: LD_INT 8
40452: EQUAL
40453: IFFALSE 40510
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40455: LD_ADDR_VAR 0 2
40459: PUSH
40460: LD_INT 22
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 25
40472: PUSH
40473: LD_INT 4
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PPUSH
40484: CALL_OW 69
40488: PUSH
40489: FOR_IN
40490: IFFALSE 40508
// ComEnterUnit ( i , building ) ;
40492: LD_VAR 0 2
40496: PPUSH
40497: LD_VAR 0 1
40501: PPUSH
40502: CALL_OW 120
40506: GO 40489
40508: POP
40509: POP
// if GetBType ( building ) = b_warehouse then
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL_OW 266
40519: PUSH
40520: LD_INT 1
40522: EQUAL
40523: IFFALSE 40539
// begin ComEnterUnit ( Borodin , building ) ;
40525: LD_EXP 24
40529: PPUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 120
// end ; end ; end ;
40539: PPOPN 2
40541: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40542: LD_VAR 0 1
40546: PPUSH
40547: CALL_OW 247
40551: PUSH
40552: LD_INT 2
40554: EQUAL
40555: PUSH
40556: LD_VAR 0 1
40560: PPUSH
40561: CALL_OW 263
40565: PUSH
40566: LD_INT 3
40568: EQUAL
40569: AND
40570: PUSH
40571: LD_EXP 41
40575: PUSH
40576: LD_INT 0
40578: EQUAL
40579: AND
40580: IFFALSE 40698
// begin varEvent1 = 1 ;
40582: LD_ADDR_EXP 41
40586: PUSH
40587: LD_INT 1
40589: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40599: LD_INT 22
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 21
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: LD_INT 25
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 25
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 25
40644: PUSH
40645: LD_INT 3
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 25
40654: PUSH
40655: LD_INT 4
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: PPUSH
40674: CALL_OW 69
40678: PUSH
40679: LD_EXP 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: DIFF
40687: PPUSH
40688: LD_STRING DC-Sol1-1
40690: PPUSH
40691: LD_STRING DC-FSol1-1
40693: PPUSH
40694: CALL 7110 0 3
// end ; end ;
40698: PPOPN 1
40700: END
// on UnitDestroyed ( unit ) do var i ;
40701: LD_INT 0
40703: PPUSH
// begin if unit = Joan then
40704: LD_VAR 0 1
40708: PUSH
40709: LD_EXP 15
40713: EQUAL
40714: IFFALSE 40723
// DeleteCharacters ( Joan ) ;
40716: LD_STRING Joan
40718: PPUSH
40719: CALL_OW 40
// if GetSide ( unit ) = 3 then
40723: LD_VAR 0 1
40727: PPUSH
40728: CALL_OW 255
40732: PUSH
40733: LD_INT 3
40735: EQUAL
40736: IFFALSE 41506
// begin if GetType ( unit ) = unit_building then
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 247
40747: PUSH
40748: LD_INT 3
40750: EQUAL
40751: IFFALSE 41443
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 266
40762: PUSH
40763: LD_INT 31
40765: EQUAL
40766: PUSH
40767: LD_VAR 0 1
40771: PPUSH
40772: CALL_OW 266
40776: PUSH
40777: LD_INT 32
40779: EQUAL
40780: OR
40781: PUSH
40782: LD_VAR 0 1
40786: PPUSH
40787: CALL_OW 266
40791: PUSH
40792: LD_INT 36
40794: EQUAL
40795: OR
40796: PUSH
40797: LD_VAR 0 1
40801: PPUSH
40802: CALL_OW 266
40806: PUSH
40807: LD_INT 0
40809: EQUAL
40810: OR
40811: PUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 266
40821: PUSH
40822: LD_INT 24
40824: EQUAL
40825: OR
40826: PUSH
40827: LD_VAR 0 1
40831: PPUSH
40832: CALL_OW 266
40836: PUSH
40837: LD_INT 17
40839: EQUAL
40840: OR
40841: PUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 266
40851: PUSH
40852: LD_INT 25
40854: EQUAL
40855: OR
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 266
40866: PUSH
40867: LD_INT 19
40869: EQUAL
40870: OR
40871: PUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 266
40881: PUSH
40882: LD_INT 20
40884: EQUAL
40885: OR
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 266
40896: PUSH
40897: LD_INT 18
40899: EQUAL
40900: OR
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 266
40911: PUSH
40912: LD_INT 21
40914: EQUAL
40915: OR
40916: PUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 266
40926: PUSH
40927: LD_INT 23
40929: EQUAL
40930: OR
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 266
40941: PUSH
40942: LD_INT 16
40944: EQUAL
40945: OR
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 266
40956: PUSH
40957: LD_INT 6
40959: EQUAL
40960: OR
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 266
40971: PUSH
40972: LD_INT 29
40974: EQUAL
40975: OR
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 266
40986: PUSH
40987: LD_INT 26
40989: EQUAL
40990: OR
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 266
41001: PUSH
41002: LD_INT 30
41004: EQUAL
41005: OR
41006: PUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 266
41016: PUSH
41017: LD_INT 28
41019: EQUAL
41020: OR
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 266
41031: PUSH
41032: LD_INT 27
41034: EQUAL
41035: OR
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 266
41046: PUSH
41047: LD_INT 33
41049: EQUAL
41050: OR
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 266
41061: PUSH
41062: LD_INT 2
41064: EQUAL
41065: OR
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 266
41076: PUSH
41077: LD_INT 4
41079: EQUAL
41080: OR
41081: IFFALSE 41167
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
41083: LD_ADDR_EXP 31
41087: PUSH
41088: LD_EXP 31
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 266
41102: ADD
41103: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41104: LD_ADDR_EXP 31
41108: PUSH
41109: LD_EXP 31
41113: PUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: CALL_OW 250
41123: ADD
41124: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41125: LD_ADDR_EXP 31
41129: PUSH
41130: LD_EXP 31
41134: PUSH
41135: LD_VAR 0 1
41139: PPUSH
41140: CALL_OW 251
41144: ADD
41145: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41146: LD_ADDR_EXP 31
41150: PUSH
41151: LD_EXP 31
41155: PUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: CALL_OW 254
41165: ADD
41166: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 266
41176: PUSH
41177: LD_INT 1
41179: EQUAL
41180: IFFALSE 41259
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41182: LD_ADDR_EXP 31
41186: PUSH
41187: LD_EXP 31
41191: PUSH
41192: LD_INT 0
41194: ADD
41195: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41196: LD_ADDR_EXP 31
41200: PUSH
41201: LD_EXP 31
41205: PUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: CALL_OW 250
41215: ADD
41216: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41217: LD_ADDR_EXP 31
41221: PUSH
41222: LD_EXP 31
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 251
41236: ADD
41237: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41238: LD_ADDR_EXP 31
41242: PUSH
41243: LD_EXP 31
41247: PUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 254
41257: ADD
41258: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41259: LD_VAR 0 1
41263: PPUSH
41264: CALL_OW 266
41268: PUSH
41269: LD_INT 3
41271: EQUAL
41272: IFFALSE 41351
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41274: LD_ADDR_EXP 31
41278: PUSH
41279: LD_EXP 31
41283: PUSH
41284: LD_INT 2
41286: ADD
41287: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41288: LD_ADDR_EXP 31
41292: PUSH
41293: LD_EXP 31
41297: PUSH
41298: LD_VAR 0 1
41302: PPUSH
41303: CALL_OW 250
41307: ADD
41308: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41309: LD_ADDR_EXP 31
41313: PUSH
41314: LD_EXP 31
41318: PUSH
41319: LD_VAR 0 1
41323: PPUSH
41324: CALL_OW 251
41328: ADD
41329: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41330: LD_ADDR_EXP 31
41334: PUSH
41335: LD_EXP 31
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 254
41349: ADD
41350: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 266
41360: PUSH
41361: LD_INT 5
41363: EQUAL
41364: IFFALSE 41443
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41366: LD_ADDR_EXP 31
41370: PUSH
41371: LD_EXP 31
41375: PUSH
41376: LD_INT 4
41378: ADD
41379: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41380: LD_ADDR_EXP 31
41384: PUSH
41385: LD_EXP 31
41389: PUSH
41390: LD_VAR 0 1
41394: PPUSH
41395: CALL_OW 250
41399: ADD
41400: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41401: LD_ADDR_EXP 31
41405: PUSH
41406: LD_EXP 31
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 251
41420: ADD
41421: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41422: LD_ADDR_EXP 31
41426: PUSH
41427: LD_EXP 31
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 254
41441: ADD
41442: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41443: LD_VAR 0 1
41447: PPUSH
41448: CALL_OW 247
41452: PUSH
41453: LD_INT 1
41455: EQUAL
41456: IFFALSE 41506
// begin for i in defenders_list do
41458: LD_ADDR_VAR 0 2
41462: PUSH
41463: LD_EXP 32
41467: PUSH
41468: FOR_IN
41469: IFFALSE 41504
// if i = unit then
41471: LD_VAR 0 2
41475: PUSH
41476: LD_VAR 0 1
41480: EQUAL
41481: IFFALSE 41502
// defenders_list = defenders_list diff [ unit ] ;
41483: LD_ADDR_EXP 32
41487: PUSH
41488: LD_EXP 32
41492: PUSH
41493: LD_VAR 0 1
41497: PUSH
41498: EMPTY
41499: LIST
41500: DIFF
41501: ST_TO_ADDR
41502: GO 41468
41504: POP
41505: POP
// end ; end ; end ; end_of_file
41506: PPOPN 2
41508: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41509: GO 41511
41511: DISABLE
41512: LD_INT 0
41514: PPUSH
// begin enemyWayX = [ ] ;
41515: LD_ADDR_EXP 46
41519: PUSH
41520: EMPTY
41521: ST_TO_ADDR
// enemyWayY = [ ] ;
41522: LD_ADDR_EXP 47
41526: PUSH
41527: EMPTY
41528: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41529: LD_ADDR_VAR 0 1
41533: PUSH
41534: LD_INT 1
41536: PPUSH
41537: LD_INT 3
41539: PPUSH
41540: CALL_OW 12
41544: ST_TO_ADDR
// if rnd = 1 then
41545: LD_VAR 0 1
41549: PUSH
41550: LD_INT 1
41552: EQUAL
41553: IFFALSE 41593
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41555: LD_ADDR_EXP 46
41559: PUSH
41560: LD_INT 73
41562: PUSH
41563: LD_INT 46
41565: PUSH
41566: LD_INT 29
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41574: LD_ADDR_EXP 47
41578: PUSH
41579: LD_INT 71
41581: PUSH
41582: LD_INT 43
41584: PUSH
41585: LD_INT 29
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// end ; if rnd = 2 then
41593: LD_VAR 0 1
41597: PUSH
41598: LD_INT 2
41600: EQUAL
41601: IFFALSE 41625
// begin enemyWayX = [ 64 ] ;
41603: LD_ADDR_EXP 46
41607: PUSH
41608: LD_INT 64
41610: PUSH
41611: EMPTY
41612: LIST
41613: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41614: LD_ADDR_EXP 47
41618: PUSH
41619: LD_INT 43
41621: PUSH
41622: EMPTY
41623: LIST
41624: ST_TO_ADDR
// end ; if rnd = 3 then
41625: LD_VAR 0 1
41629: PUSH
41630: LD_INT 3
41632: EQUAL
41633: IFFALSE 41657
// begin enemyWayX = [ 80 ] ;
41635: LD_ADDR_EXP 46
41639: PUSH
41640: LD_INT 80
41642: PUSH
41643: EMPTY
41644: LIST
41645: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41646: LD_ADDR_EXP 47
41650: PUSH
41651: LD_INT 28
41653: PUSH
41654: EMPTY
41655: LIST
41656: ST_TO_ADDR
// end ; enable ;
41657: ENABLE
// end ;
41658: PPOPN 1
41660: END
// every 0 0$1 do
41661: GO 41663
41663: DISABLE
// begin enable ;
41664: ENABLE
// if escapeAvalaible = 0 then
41665: LD_EXP 36
41669: PUSH
41670: LD_INT 0
41672: EQUAL
41673: IFFALSE 41685
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41675: LD_INT 3
41677: PPUSH
41678: LD_INT 6
41680: PPUSH
41681: CALL 8506 0 2
// if escapeAvalaible = 0 then
41685: LD_EXP 36
41689: PUSH
41690: LD_INT 0
41692: EQUAL
41693: IFFALSE 41705
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41695: LD_INT 1
41697: PPUSH
41698: LD_INT 24
41700: PPUSH
41701: CALL 9166 0 2
// if russianAI = 1 then
41705: LD_EXP 27
41709: PUSH
41710: LD_INT 1
41712: EQUAL
41713: IFFALSE 41783
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41715: LD_INT 3
41717: PPUSH
41718: LD_INT 7
41720: PPUSH
41721: LD_INT 6
41723: PPUSH
41724: LD_EXP 29
41728: PPUSH
41729: CALL 11604 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41733: LD_INT 3
41735: PPUSH
41736: LD_EXP 28
41740: PPUSH
41741: LD_INT 6
41743: PPUSH
41744: LD_EXP 31
41748: PPUSH
41749: CALL 11198 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41753: LD_INT 3
41755: PPUSH
41756: LD_INT 26
41758: PPUSH
41759: LD_EXP 46
41763: PPUSH
41764: LD_EXP 47
41768: PPUSH
41769: CALL 10066 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41773: LD_INT 3
41775: PPUSH
41776: LD_INT 1
41778: PPUSH
41779: CALL 12148 0 2
// end ; if SikorskyArrive = 1 then
41783: LD_EXP 18
41787: PUSH
41788: LD_INT 1
41790: EQUAL
41791: IFFALSE 41809
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41793: LD_INT 3
41795: PPUSH
41796: LD_INT 10
41798: PPUSH
41799: LD_INT 53
41801: PPUSH
41802: LD_INT 59
41804: PPUSH
41805: CALL 9863 0 4
// end ;
41809: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41810: LD_EXP 27
41814: PUSH
41815: LD_INT 1
41817: EQUAL
41818: IFFALSE 42094
41820: GO 41822
41822: DISABLE
41823: LD_INT 0
41825: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41826: LD_ADDR_VAR 0 1
41830: PUSH
41831: LD_INT 22
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 21
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 30
41853: PUSH
41854: LD_INT 32
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: LD_INT 35
41869: PUSH
41870: LD_INT 43
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 35
41879: PUSH
41880: LD_INT 44
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 35
41889: PUSH
41890: LD_INT 46
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: PPUSH
41913: CALL_OW 69
41917: PUSH
41918: FOR_IN
41919: IFFALSE 41958
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41921: LD_VAR 0 1
41925: PPUSH
41926: LD_INT 43
41928: PUSH
41929: LD_INT 44
41931: PUSH
41932: LD_INT 46
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PPUSH
41943: LD_INT 3
41945: PPUSH
41946: CALL_OW 12
41950: ARRAY
41951: PPUSH
41952: CALL_OW 431
41956: GO 41918
41958: POP
41959: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41960: LD_ADDR_VAR 0 1
41964: PUSH
41965: LD_INT 22
41967: PUSH
41968: LD_INT 3
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 21
41977: PUSH
41978: LD_INT 3
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 30
41987: PUSH
41988: LD_INT 33
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 3
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 35
42003: PUSH
42004: LD_INT 43
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 35
42013: PUSH
42014: LD_INT 44
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 35
42023: PUSH
42024: LD_INT 46
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: PPUSH
42047: CALL_OW 69
42051: PUSH
42052: FOR_IN
42053: IFFALSE 42092
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42055: LD_VAR 0 1
42059: PPUSH
42060: LD_INT 43
42062: PUSH
42063: LD_INT 44
42065: PUSH
42066: LD_INT 46
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PPUSH
42077: LD_INT 3
42079: PPUSH
42080: CALL_OW 12
42084: ARRAY
42085: PPUSH
42086: CALL_OW 431
42090: GO 42052
42092: POP
42093: POP
// end ;
42094: PPOPN 1
42096: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
42097: LD_EXP 24
42101: PPUSH
42102: CALL_OW 310
42106: NOT
42107: PUSH
42108: LD_EXP 28
42112: PPUSH
42113: CALL_OW 302
42117: AND
42118: PUSH
42119: LD_EXP 28
42123: PPUSH
42124: CALL_OW 255
42128: PUSH
42129: LD_INT 3
42131: EQUAL
42132: AND
42133: IFFALSE 42153
42135: GO 42137
42137: DISABLE
// begin enable ;
42138: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42139: LD_EXP 24
42143: PPUSH
42144: LD_EXP 28
42148: PPUSH
42149: CALL_OW 120
// end ;
42153: END
// every 0 0$1 trigger SikorskyAI = 1 do
42154: LD_EXP 20
42158: PUSH
42159: LD_INT 1
42161: EQUAL
42162: IFFALSE 42197
42164: GO 42166
42166: DISABLE
// begin enable ;
42167: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42168: LD_INT 4
42170: PPUSH
42171: LD_INT 10
42173: PPUSH
42174: LD_INT 93
42176: PPUSH
42177: LD_INT 93
42179: PPUSH
42180: CALL 9863 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42184: LD_INT 4
42186: PPUSH
42187: LD_INT 11
42189: PPUSH
42190: LD_INT 3
42192: PPUSH
42193: CALL 16360 0 3
// end ;
42197: END
// every 0 0$1 trigger SikorskyAI = 1 do
42198: LD_EXP 20
42202: PUSH
42203: LD_INT 1
42205: EQUAL
42206: IFFALSE 42218
42208: GO 42210
42210: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42211: LD_INT 4
42213: PPUSH
42214: CALL 10870 0 1
42218: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42219: LD_EXP 27
42223: PUSH
42224: LD_INT 1
42226: EQUAL
42227: PUSH
42228: LD_EXP 30
42232: PPUSH
42233: CALL_OW 302
42237: AND
42238: PUSH
42239: LD_EXP 30
42243: PPUSH
42244: CALL_OW 255
42248: PUSH
42249: LD_INT 3
42251: EQUAL
42252: AND
42253: PUSH
42254: LD_INT 22
42256: PUSH
42257: LD_INT 3
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 21
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 33
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: PPUSH
42289: CALL_OW 69
42293: PUSH
42294: LD_INT 0
42296: EQUAL
42297: AND
42298: IFFALSE 42532
42300: GO 42302
42302: DISABLE
// begin enable ;
42303: ENABLE
// if Difficulty = 1 then
42304: LD_OWVAR 67
42308: PUSH
42309: LD_INT 1
42311: EQUAL
42312: IFFALSE 42380
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42314: LD_INT 3
42316: PPUSH
42317: LD_EXP 30
42321: PPUSH
42322: LD_INT 5
42324: PPUSH
42325: LD_INT 8
42327: PPUSH
42328: CALL_OW 12
42332: PPUSH
42333: LD_INT 43
42335: PUSH
42336: LD_INT 43
42338: PUSH
42339: LD_INT 43
42341: PUSH
42342: LD_INT 43
42344: PUSH
42345: LD_INT 44
42347: PUSH
42348: LD_INT 44
42350: PUSH
42351: LD_INT 44
42353: PUSH
42354: LD_INT 46
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: PPUSH
42367: LD_INT 1
42369: PPUSH
42370: LD_INT 3
42372: PPUSH
42373: LD_INT 24
42375: PPUSH
42376: CALL 9709 0 7
// if Difficulty = 2 then
42380: LD_OWVAR 67
42384: PUSH
42385: LD_INT 2
42387: EQUAL
42388: IFFALSE 42456
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42390: LD_INT 3
42392: PPUSH
42393: LD_EXP 30
42397: PPUSH
42398: LD_INT 6
42400: PPUSH
42401: LD_INT 8
42403: PPUSH
42404: CALL_OW 12
42408: PPUSH
42409: LD_INT 43
42411: PUSH
42412: LD_INT 43
42414: PUSH
42415: LD_INT 44
42417: PUSH
42418: LD_INT 44
42420: PUSH
42421: LD_INT 44
42423: PUSH
42424: LD_INT 44
42426: PUSH
42427: LD_INT 46
42429: PUSH
42430: LD_INT 46
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: PPUSH
42443: LD_INT 1
42445: PPUSH
42446: LD_INT 3
42448: PPUSH
42449: LD_INT 24
42451: PPUSH
42452: CALL 9709 0 7
// if Difficulty = 3 then
42456: LD_OWVAR 67
42460: PUSH
42461: LD_INT 3
42463: EQUAL
42464: IFFALSE 42532
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42466: LD_INT 3
42468: PPUSH
42469: LD_EXP 30
42473: PPUSH
42474: LD_INT 7
42476: PPUSH
42477: LD_INT 8
42479: PPUSH
42480: CALL_OW 12
42484: PPUSH
42485: LD_INT 43
42487: PUSH
42488: LD_INT 43
42490: PUSH
42491: LD_INT 44
42493: PUSH
42494: LD_INT 44
42496: PUSH
42497: LD_INT 44
42499: PUSH
42500: LD_INT 46
42502: PUSH
42503: LD_INT 46
42505: PUSH
42506: LD_INT 46
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: PPUSH
42519: LD_INT 1
42521: PPUSH
42522: LD_INT 3
42524: PPUSH
42525: LD_INT 24
42527: PPUSH
42528: CALL 9709 0 7
// end ;
42532: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42533: LD_EXP 38
42537: PUSH
42538: LD_INT 1
42540: EQUAL
42541: IFFALSE 42623
42543: GO 42545
42545: DISABLE
42546: LD_INT 0
42548: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42549: LD_ADDR_VAR 0 1
42553: PUSH
42554: LD_INT 22
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 21
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 24
42579: PUSH
42580: LD_INT 650
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: PPUSH
42596: CALL_OW 69
42600: PUSH
42601: FOR_IN
42602: IFFALSE 42621
// ComMoveXY ( i , 51 , 12 ) ;
42604: LD_VAR 0 1
42608: PPUSH
42609: LD_INT 51
42611: PPUSH
42612: LD_INT 12
42614: PPUSH
42615: CALL_OW 111
42619: GO 42601
42621: POP
42622: POP
// end ; end_of_file
42623: PPOPN 1
42625: END
// every 1 1$20 trigger firstAttack = 1 do
42626: LD_EXP 33
42630: PUSH
42631: LD_INT 1
42633: EQUAL
42634: IFFALSE 42740
42636: GO 42638
42638: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42639: LD_INT 6
42641: PPUSH
42642: LD_INT 3
42644: PPUSH
42645: LD_INT 5
42647: PPUSH
42648: LD_INT 6
42650: PPUSH
42651: CALL_OW 12
42655: PUSH
42656: LD_INT 5
42658: PPUSH
42659: LD_INT 6
42661: PPUSH
42662: CALL_OW 12
42666: PUSH
42667: LD_INT 5
42669: PPUSH
42670: LD_INT 6
42672: PPUSH
42673: CALL_OW 12
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: PUSH
42683: LD_OWVAR 67
42687: ARRAY
42688: PPUSH
42689: LD_INT 0
42691: PPUSH
42692: LD_INT 0
42694: PPUSH
42695: LD_INT 0
42697: PPUSH
42698: LD_INT 0
42700: PPUSH
42701: LD_EXP 25
42705: PPUSH
42706: LD_EXP 26
42710: PPUSH
42711: CALL_OW 12
42715: PPUSH
42716: LD_INT 16
42718: PPUSH
42719: LD_INT 7
42721: PPUSH
42722: LD_INT 1
42724: PPUSH
42725: LD_INT 1
42727: PPUSH
42728: LD_INT 3
42730: PPUSH
42731: CALL_OW 12
42735: PPUSH
42736: CALL 12378 0 12
42740: END
// every 1 1$40 trigger firstAttack = 1 do
42741: LD_EXP 33
42745: PUSH
42746: LD_INT 1
42748: EQUAL
42749: IFFALSE 42841
42751: GO 42753
42753: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42754: LD_INT 16
42756: PPUSH
42757: LD_INT 6
42759: PPUSH
42760: LD_INT 3
42762: PPUSH
42763: LD_INT 4
42765: PPUSH
42766: CALL_OW 12
42770: PUSH
42771: LD_INT 4
42773: PPUSH
42774: LD_INT 5
42776: PPUSH
42777: CALL_OW 12
42781: PUSH
42782: LD_INT 5
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: PUSH
42790: LD_OWVAR 67
42794: ARRAY
42795: PPUSH
42796: LD_EXP 25
42800: PPUSH
42801: LD_EXP 26
42805: PPUSH
42806: CALL_OW 12
42810: PPUSH
42811: LD_INT 3
42813: PPUSH
42814: LD_INT 1
42816: PPUSH
42817: LD_INT 3
42819: PPUSH
42820: LD_INT 44
42822: PUSH
42823: LD_INT 46
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PPUSH
42830: EMPTY
42831: PPUSH
42832: EMPTY
42833: PPUSH
42834: LD_INT 1
42836: PPUSH
42837: CALL 14671 0 11
42841: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
42842: LD_EXP 33
42846: PUSH
42847: LD_INT 1
42849: EQUAL
42850: PUSH
42851: LD_EXP 39
42855: PUSH
42856: LD_INT 0
42858: EQUAL
42859: AND
42860: IFFALSE 42966
42862: GO 42864
42864: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42865: LD_INT 6
42867: PPUSH
42868: LD_INT 3
42870: PPUSH
42871: LD_INT 5
42873: PPUSH
42874: LD_INT 6
42876: PPUSH
42877: CALL_OW 12
42881: PUSH
42882: LD_INT 5
42884: PPUSH
42885: LD_INT 6
42887: PPUSH
42888: CALL_OW 12
42892: PUSH
42893: LD_INT 5
42895: PPUSH
42896: LD_INT 6
42898: PPUSH
42899: CALL_OW 12
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: PUSH
42909: LD_OWVAR 67
42913: ARRAY
42914: PPUSH
42915: LD_INT 0
42917: PPUSH
42918: LD_INT 0
42920: PPUSH
42921: LD_INT 0
42923: PPUSH
42924: LD_INT 0
42926: PPUSH
42927: LD_EXP 25
42931: PPUSH
42932: LD_EXP 26
42936: PPUSH
42937: CALL_OW 12
42941: PPUSH
42942: LD_INT 16
42944: PPUSH
42945: LD_INT 7
42947: PPUSH
42948: LD_INT 1
42950: PPUSH
42951: LD_INT 1
42953: PPUSH
42954: LD_INT 3
42956: PPUSH
42957: CALL_OW 12
42961: PPUSH
42962: CALL 12378 0 12
42966: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
42967: LD_EXP 33
42971: PUSH
42972: LD_INT 1
42974: EQUAL
42975: PUSH
42976: LD_EXP 39
42980: PUSH
42981: LD_INT 0
42983: EQUAL
42984: AND
42985: IFFALSE 43081
42987: GO 42989
42989: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42990: LD_INT 16
42992: PPUSH
42993: LD_INT 6
42995: PPUSH
42996: LD_INT 5
42998: PPUSH
42999: LD_INT 6
43001: PPUSH
43002: CALL_OW 12
43006: PUSH
43007: LD_INT 6
43009: PPUSH
43010: LD_INT 7
43012: PPUSH
43013: CALL_OW 12
43017: PUSH
43018: LD_INT 7
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: PUSH
43026: LD_OWVAR 67
43030: ARRAY
43031: PPUSH
43032: LD_EXP 25
43036: PPUSH
43037: LD_EXP 26
43041: PPUSH
43042: CALL_OW 12
43046: PPUSH
43047: LD_INT 3
43049: PPUSH
43050: LD_INT 1
43052: PPUSH
43053: LD_INT 3
43055: PPUSH
43056: LD_INT 43
43058: PUSH
43059: LD_INT 44
43061: PUSH
43062: LD_INT 46
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: LIST
43069: PPUSH
43070: EMPTY
43071: PPUSH
43072: EMPTY
43073: PPUSH
43074: LD_INT 1
43076: PPUSH
43077: CALL 14671 0 11
43081: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
43082: LD_EXP 33
43086: PUSH
43087: LD_INT 1
43089: EQUAL
43090: PUSH
43091: LD_EXP 39
43095: PUSH
43096: LD_INT 0
43098: EQUAL
43099: AND
43100: IFFALSE 43196
43102: GO 43104
43104: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43105: LD_INT 16
43107: PPUSH
43108: LD_INT 6
43110: PPUSH
43111: LD_INT 5
43113: PPUSH
43114: LD_INT 6
43116: PPUSH
43117: CALL_OW 12
43121: PUSH
43122: LD_INT 6
43124: PPUSH
43125: LD_INT 7
43127: PPUSH
43128: CALL_OW 12
43132: PUSH
43133: LD_INT 7
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: PUSH
43141: LD_OWVAR 67
43145: ARRAY
43146: PPUSH
43147: LD_EXP 25
43151: PPUSH
43152: LD_EXP 26
43156: PPUSH
43157: CALL_OW 12
43161: PPUSH
43162: LD_INT 3
43164: PPUSH
43165: LD_INT 1
43167: PPUSH
43168: LD_INT 3
43170: PPUSH
43171: LD_INT 43
43173: PUSH
43174: LD_INT 44
43176: PUSH
43177: LD_INT 46
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: PPUSH
43185: EMPTY
43186: PPUSH
43187: EMPTY
43188: PPUSH
43189: LD_INT 1
43191: PPUSH
43192: CALL 14671 0 11
43196: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43197: LD_EXP 33
43201: PUSH
43202: LD_INT 1
43204: EQUAL
43205: PUSH
43206: LD_EXP 39
43210: PUSH
43211: LD_INT 0
43213: EQUAL
43214: AND
43215: IFFALSE 43291
43217: GO 43219
43219: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43220: LD_INT 16
43222: PPUSH
43223: LD_INT 6
43225: PPUSH
43226: LD_INT 5
43228: PUSH
43229: LD_INT 6
43231: PUSH
43232: LD_INT 7
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: PUSH
43240: LD_OWVAR 67
43244: ARRAY
43245: PPUSH
43246: LD_EXP 25
43250: PPUSH
43251: LD_EXP 26
43255: PPUSH
43256: CALL_OW 12
43260: PPUSH
43261: LD_INT 3
43263: PPUSH
43264: LD_INT 1
43266: PPUSH
43267: LD_INT 3
43269: PPUSH
43270: LD_INT 44
43272: PUSH
43273: LD_INT 46
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PPUSH
43280: EMPTY
43281: PPUSH
43282: EMPTY
43283: PPUSH
43284: LD_INT 1
43286: PPUSH
43287: CALL 14671 0 11
43291: END
// every 1 1$00 trigger secondAttack = 1 do
43292: LD_EXP 34
43296: PUSH
43297: LD_INT 1
43299: EQUAL
43300: IFFALSE 43382
43302: GO 43304
43304: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43305: LD_INT 6
43307: PPUSH
43308: LD_INT 3
43310: PPUSH
43311: LD_INT 3
43313: PUSH
43314: LD_INT 4
43316: PUSH
43317: LD_INT 5
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: PUSH
43325: LD_OWVAR 67
43329: ARRAY
43330: PPUSH
43331: LD_INT 0
43333: PPUSH
43334: LD_INT 0
43336: PPUSH
43337: LD_INT 0
43339: PPUSH
43340: LD_INT 0
43342: PPUSH
43343: LD_EXP 25
43347: PPUSH
43348: LD_EXP 26
43352: PPUSH
43353: CALL_OW 12
43357: PPUSH
43358: LD_INT 16
43360: PPUSH
43361: LD_INT 7
43363: PPUSH
43364: LD_INT 1
43366: PPUSH
43367: LD_INT 1
43369: PPUSH
43370: LD_INT 3
43372: PPUSH
43373: CALL_OW 12
43377: PPUSH
43378: CALL 12378 0 12
43382: END
// every 1 1$00 trigger secondAttack = 1 do
43383: LD_EXP 34
43387: PUSH
43388: LD_INT 1
43390: EQUAL
43391: IFFALSE 43495
43393: GO 43395
43395: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43396: LD_INT 16
43398: PPUSH
43399: LD_INT 6
43401: PPUSH
43402: LD_INT 5
43404: PPUSH
43405: LD_INT 8
43407: PPUSH
43408: CALL_OW 12
43412: PUSH
43413: LD_INT 6
43415: PPUSH
43416: LD_INT 9
43418: PPUSH
43419: CALL_OW 12
43423: PUSH
43424: LD_INT 7
43426: PPUSH
43427: LD_INT 9
43429: PPUSH
43430: CALL_OW 12
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: PUSH
43440: LD_OWVAR 67
43444: ARRAY
43445: PPUSH
43446: LD_EXP 25
43450: PPUSH
43451: LD_EXP 26
43455: PPUSH
43456: CALL_OW 12
43460: PPUSH
43461: LD_INT 3
43463: PPUSH
43464: LD_INT 1
43466: PPUSH
43467: LD_INT 3
43469: PPUSH
43470: LD_INT 43
43472: PUSH
43473: LD_INT 44
43475: PUSH
43476: LD_INT 46
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: PPUSH
43484: EMPTY
43485: PPUSH
43486: EMPTY
43487: PPUSH
43488: LD_INT 1
43490: PPUSH
43491: CALL 14671 0 11
43495: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43496: LD_EXP 18
43500: PUSH
43501: LD_INT 0
43503: EQUAL
43504: IFFALSE 43586
43506: GO 43508
43508: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43509: LD_INT 6
43511: PPUSH
43512: LD_INT 3
43514: PPUSH
43515: LD_INT 3
43517: PUSH
43518: LD_INT 4
43520: PUSH
43521: LD_INT 5
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: PUSH
43529: LD_OWVAR 67
43533: ARRAY
43534: PPUSH
43535: LD_INT 0
43537: PPUSH
43538: LD_INT 0
43540: PPUSH
43541: LD_INT 0
43543: PPUSH
43544: LD_INT 0
43546: PPUSH
43547: LD_EXP 25
43551: PPUSH
43552: LD_EXP 26
43556: PPUSH
43557: CALL_OW 12
43561: PPUSH
43562: LD_INT 16
43564: PPUSH
43565: LD_INT 7
43567: PPUSH
43568: LD_INT 1
43570: PPUSH
43571: LD_INT 1
43573: PPUSH
43574: LD_INT 3
43576: PPUSH
43577: CALL_OW 12
43581: PPUSH
43582: CALL 12378 0 12
43586: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43587: LD_EXP 18
43591: PUSH
43592: LD_INT 0
43594: EQUAL
43595: IFFALSE 43695
43597: GO 43599
43599: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43600: LD_INT 16
43602: PPUSH
43603: LD_INT 6
43605: PPUSH
43606: LD_INT 5
43608: PPUSH
43609: LD_INT 8
43611: PPUSH
43612: CALL_OW 12
43616: PUSH
43617: LD_INT 6
43619: PPUSH
43620: LD_INT 9
43622: PPUSH
43623: CALL_OW 12
43627: PUSH
43628: LD_INT 7
43630: PPUSH
43631: LD_INT 9
43633: PPUSH
43634: CALL_OW 12
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: PUSH
43644: LD_OWVAR 67
43648: ARRAY
43649: PPUSH
43650: LD_EXP 25
43654: PPUSH
43655: LD_EXP 26
43659: PPUSH
43660: CALL_OW 12
43664: PPUSH
43665: LD_INT 3
43667: PPUSH
43668: LD_INT 1
43670: PPUSH
43671: LD_INT 3
43673: PPUSH
43674: LD_INT 44
43676: PUSH
43677: LD_INT 46
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PPUSH
43684: EMPTY
43685: PPUSH
43686: EMPTY
43687: PPUSH
43688: LD_INT 1
43690: PPUSH
43691: CALL 14671 0 11
43695: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43696: LD_EXP 18
43700: PUSH
43701: LD_INT 0
43703: EQUAL
43704: IFFALSE 43786
43706: GO 43708
43708: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43709: LD_INT 6
43711: PPUSH
43712: LD_INT 3
43714: PPUSH
43715: LD_INT 3
43717: PUSH
43718: LD_INT 4
43720: PUSH
43721: LD_INT 5
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: PUSH
43729: LD_OWVAR 67
43733: ARRAY
43734: PPUSH
43735: LD_INT 0
43737: PPUSH
43738: LD_INT 0
43740: PPUSH
43741: LD_INT 0
43743: PPUSH
43744: LD_INT 0
43746: PPUSH
43747: LD_EXP 25
43751: PPUSH
43752: LD_EXP 26
43756: PPUSH
43757: CALL_OW 12
43761: PPUSH
43762: LD_INT 16
43764: PPUSH
43765: LD_INT 7
43767: PPUSH
43768: LD_INT 1
43770: PPUSH
43771: LD_INT 1
43773: PPUSH
43774: LD_INT 3
43776: PPUSH
43777: CALL_OW 12
43781: PPUSH
43782: CALL 12378 0 12
43786: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43787: LD_EXP 18
43791: PUSH
43792: LD_INT 0
43794: EQUAL
43795: IFFALSE 43895
43797: GO 43799
43799: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43800: LD_INT 16
43802: PPUSH
43803: LD_INT 6
43805: PPUSH
43806: LD_INT 5
43808: PPUSH
43809: LD_INT 8
43811: PPUSH
43812: CALL_OW 12
43816: PUSH
43817: LD_INT 6
43819: PPUSH
43820: LD_INT 9
43822: PPUSH
43823: CALL_OW 12
43827: PUSH
43828: LD_INT 7
43830: PPUSH
43831: LD_INT 9
43833: PPUSH
43834: CALL_OW 12
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: PUSH
43844: LD_OWVAR 67
43848: ARRAY
43849: PPUSH
43850: LD_EXP 25
43854: PPUSH
43855: LD_EXP 26
43859: PPUSH
43860: CALL_OW 12
43864: PPUSH
43865: LD_INT 3
43867: PPUSH
43868: LD_INT 1
43870: PPUSH
43871: LD_INT 3
43873: PPUSH
43874: LD_INT 44
43876: PUSH
43877: LD_INT 46
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PPUSH
43884: EMPTY
43885: PPUSH
43886: EMPTY
43887: PPUSH
43888: LD_INT 1
43890: PPUSH
43891: CALL 14671 0 11
43895: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43896: LD_EXP 18
43900: PUSH
43901: LD_INT 0
43903: EQUAL
43904: IFFALSE 43986
43906: GO 43908
43908: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43909: LD_INT 6
43911: PPUSH
43912: LD_INT 3
43914: PPUSH
43915: LD_INT 3
43917: PUSH
43918: LD_INT 4
43920: PUSH
43921: LD_INT 5
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: PUSH
43929: LD_OWVAR 67
43933: ARRAY
43934: PPUSH
43935: LD_INT 0
43937: PPUSH
43938: LD_INT 0
43940: PPUSH
43941: LD_INT 0
43943: PPUSH
43944: LD_INT 0
43946: PPUSH
43947: LD_EXP 25
43951: PPUSH
43952: LD_EXP 26
43956: PPUSH
43957: CALL_OW 12
43961: PPUSH
43962: LD_INT 16
43964: PPUSH
43965: LD_INT 7
43967: PPUSH
43968: LD_INT 1
43970: PPUSH
43971: LD_INT 1
43973: PPUSH
43974: LD_INT 3
43976: PPUSH
43977: CALL_OW 12
43981: PPUSH
43982: CALL 12378 0 12
43986: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43987: LD_EXP 18
43991: PUSH
43992: LD_INT 0
43994: EQUAL
43995: IFFALSE 44095
43997: GO 43999
43999: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
44000: LD_INT 16
44002: PPUSH
44003: LD_INT 6
44005: PPUSH
44006: LD_INT 5
44008: PPUSH
44009: LD_INT 8
44011: PPUSH
44012: CALL_OW 12
44016: PUSH
44017: LD_INT 6
44019: PPUSH
44020: LD_INT 9
44022: PPUSH
44023: CALL_OW 12
44027: PUSH
44028: LD_INT 7
44030: PPUSH
44031: LD_INT 9
44033: PPUSH
44034: CALL_OW 12
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: PUSH
44044: LD_OWVAR 67
44048: ARRAY
44049: PPUSH
44050: LD_EXP 25
44054: PPUSH
44055: LD_EXP 26
44059: PPUSH
44060: CALL_OW 12
44064: PPUSH
44065: LD_INT 3
44067: PPUSH
44068: LD_INT 1
44070: PPUSH
44071: LD_INT 3
44073: PPUSH
44074: LD_INT 44
44076: PUSH
44077: LD_INT 46
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PPUSH
44084: EMPTY
44085: PPUSH
44086: EMPTY
44087: PPUSH
44088: LD_INT 1
44090: PPUSH
44091: CALL 14671 0 11
44095: END
// every 0 0$1 trigger timerStatus = 1 do
44096: LD_EXP 35
44100: PUSH
44101: LD_INT 1
44103: EQUAL
44104: IFFALSE 44164
44106: GO 44108
44108: DISABLE
// begin repeat wait ( 0 0$1 ) ;
44109: LD_INT 35
44111: PPUSH
44112: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
44116: LD_ADDR_OWVAR 47
44120: PUSH
44121: LD_STRING #Am08-1
44123: PUSH
44124: LD_EXP 19
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
44133: LD_ADDR_EXP 19
44137: PUSH
44138: LD_EXP 19
44142: PUSH
44143: LD_INT 35
44145: MINUS
44146: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
44147: LD_EXP 19
44151: PUSH
44152: LD_INT 0
44154: EQUAL
44155: IFFALSE 44109
// display_strings := [ ] ;
44157: LD_ADDR_OWVAR 47
44161: PUSH
44162: EMPTY
44163: ST_TO_ADDR
// end ; end_of_file
44164: END
// every 1 1$0 do
44165: GO 44167
44167: DISABLE
// begin if supply <= 13 and supply > 7 then
44168: LD_EXP 40
44172: PUSH
44173: LD_INT 13
44175: LESSEQUAL
44176: PUSH
44177: LD_EXP 40
44181: PUSH
44182: LD_INT 7
44184: GREATER
44185: AND
44186: IFFALSE 44209
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44188: LD_INT 3
44190: PPUSH
44191: LD_INT 5
44193: PPUSH
44194: CALL_OW 12
44198: PPUSH
44199: LD_INT 5
44201: PPUSH
44202: LD_INT 1
44204: PPUSH
44205: CALL_OW 55
// if supply <= 7 and supply > 4 then
44209: LD_EXP 40
44213: PUSH
44214: LD_INT 7
44216: LESSEQUAL
44217: PUSH
44218: LD_EXP 40
44222: PUSH
44223: LD_INT 4
44225: GREATER
44226: AND
44227: IFFALSE 44250
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44229: LD_INT 3
44231: PPUSH
44232: LD_INT 5
44234: PPUSH
44235: CALL_OW 12
44239: PPUSH
44240: LD_INT 20
44242: PPUSH
44243: LD_INT 1
44245: PPUSH
44246: CALL_OW 55
// if supply <= 4 and supply > 0 then
44250: LD_EXP 40
44254: PUSH
44255: LD_INT 4
44257: LESSEQUAL
44258: PUSH
44259: LD_EXP 40
44263: PUSH
44264: LD_INT 0
44266: GREATER
44267: AND
44268: IFFALSE 44291
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44270: LD_INT 3
44272: PPUSH
44273: LD_INT 5
44275: PPUSH
44276: CALL_OW 12
44280: PPUSH
44281: LD_INT 21
44283: PPUSH
44284: LD_INT 1
44286: PPUSH
44287: CALL_OW 55
// if supply > 0 then
44291: LD_EXP 40
44295: PUSH
44296: LD_INT 0
44298: GREATER
44299: IFFALSE 44316
// begin supply = supply - 1 ;
44301: LD_ADDR_EXP 40
44305: PUSH
44306: LD_EXP 40
44310: PUSH
44311: LD_INT 1
44313: MINUS
44314: ST_TO_ADDR
// enable ;
44315: ENABLE
// end ; end ; end_of_file
44316: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44317: LD_EXP 39
44321: PUSH
44322: LD_INT 1
44324: EQUAL
44325: PUSH
44326: LD_EXP 1
44330: PPUSH
44331: CALL_OW 301
44335: AND
44336: IFFALSE 44348
44338: GO 44340
44340: DISABLE
// YouLost ( JMM ) ;
44341: LD_STRING JMM
44343: PPUSH
44344: CALL_OW 104
44348: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44349: LD_EXP 18
44353: PUSH
44354: LD_INT 1
44356: EQUAL
44357: PUSH
44358: LD_EXP 16
44362: PPUSH
44363: CALL_OW 301
44367: AND
44368: IFFALSE 44400
44370: GO 44372
44372: DISABLE
// begin DialogueOn ;
44373: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44377: LD_EXP 23
44381: PPUSH
44382: LD_STRING D8a-Pow-1
44384: PPUSH
44385: CALL_OW 94
// DialogueOff ;
44389: CALL_OW 7
// YouLost ( Dismissed ) ;
44393: LD_STRING Dismissed
44395: PPUSH
44396: CALL_OW 104
// end ;
44400: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44401: LD_INT 22
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: LD_INT 30
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 30
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PPUSH
44443: CALL_OW 69
44447: PUSH
44448: LD_INT 0
44450: EQUAL
44451: IFFALSE 44463
44453: GO 44455
44455: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44456: LD_STRING Destroyed
44458: PPUSH
44459: CALL_OW 104
44463: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44464: LD_EXP 24
44468: PPUSH
44469: CALL_OW 301
44473: PUSH
44474: LD_INT 22
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 21
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PPUSH
44498: CALL_OW 69
44502: PUSH
44503: LD_INT 7
44505: PUSH
44506: LD_INT 6
44508: PUSH
44509: LD_INT 5
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: PUSH
44517: LD_OWVAR 67
44521: ARRAY
44522: LESS
44523: AND
44524: PUSH
44525: LD_EXP 1
44529: PPUSH
44530: CALL_OW 305
44534: AND
44535: IFFALSE 44983
44537: GO 44539
44539: DISABLE
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
// begin russianAI = 0 ;
44544: LD_ADDR_EXP 27
44548: PUSH
44549: LD_INT 0
44551: ST_TO_ADDR
// escapeAvalaible = 1 ;
44552: LD_ADDR_EXP 36
44556: PUSH
44557: LD_INT 1
44559: ST_TO_ADDR
// InGameOn ;
44560: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44564: LD_INT 3
44566: PPUSH
44567: LD_INT 1
44569: PPUSH
44570: LD_INT 1
44572: PPUSH
44573: LD_INT 0
44575: PPUSH
44576: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44580: LD_INT 6
44582: PPUSH
44583: LD_INT 1
44585: PPUSH
44586: LD_INT 1
44588: PPUSH
44589: LD_INT 0
44591: PPUSH
44592: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44596: LD_INT 3
44598: PPUSH
44599: LD_INT 1
44601: PPUSH
44602: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44606: LD_INT 97
44608: PPUSH
44609: LD_INT 91
44611: PPUSH
44612: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44616: LD_INT 22
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 21
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PPUSH
44640: CALL_OW 69
44644: PPUSH
44645: CALL_OW 121
// wait ( 0 0$01 ) ;
44649: LD_INT 35
44651: PPUSH
44652: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44656: LD_INT 22
44658: PUSH
44659: LD_INT 3
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 21
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PPUSH
44680: CALL_OW 69
44684: PPUSH
44685: LD_INT 124
44687: PPUSH
44688: LD_INT 98
44690: PPUSH
44691: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44695: LD_INT 22
44697: PUSH
44698: LD_INT 6
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 21
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PPUSH
44719: CALL_OW 69
44723: PPUSH
44724: CALL_OW 121
// wait ( 0 0$01 ) ;
44728: LD_INT 35
44730: PPUSH
44731: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44735: LD_INT 22
44737: PUSH
44738: LD_INT 6
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 21
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PPUSH
44759: CALL_OW 69
44763: PPUSH
44764: LD_INT 124
44766: PPUSH
44767: LD_INT 98
44769: PPUSH
44770: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44774: LD_INT 22
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 21
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: PUSH
44797: LD_INT 54
44799: PUSH
44800: EMPTY
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: LIST
44811: PPUSH
44812: CALL_OW 69
44816: PPUSH
44817: LD_INT 124
44819: PPUSH
44820: LD_INT 98
44822: PPUSH
44823: CALL_OW 114
// wait ( 0 0$4 ) ;
44827: LD_INT 140
44829: PPUSH
44830: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44834: LD_INT 124
44836: PPUSH
44837: LD_INT 98
44839: PPUSH
44840: CALL_OW 84
// if SikorskyStatus = 1 then
44844: LD_EXP 21
44848: PUSH
44849: LD_INT 1
44851: EQUAL
44852: IFFALSE 44866
// begin Say ( Sikorski , D9-Sik-1 ) ;
44854: LD_EXP 16
44858: PPUSH
44859: LD_STRING D9-Sik-1
44861: PPUSH
44862: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44866: LD_EXP 21
44870: PUSH
44871: LD_INT 2
44873: EQUAL
44874: IFFALSE 44895
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44876: LD_EXP 23
44880: PPUSH
44881: LD_STRING D8b-Pow-1
44883: PPUSH
44884: CALL_OW 94
// YouLost ( Dismissed ) ;
44888: LD_STRING Dismissed
44890: PPUSH
44891: CALL_OW 104
// end ; p := 0 0$0 ;
44895: LD_ADDR_VAR 0 2
44899: PUSH
44900: LD_INT 0
44902: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44903: LD_INT 35
44905: PPUSH
44906: CALL_OW 67
// p := p + 0 0$1 ;
44910: LD_ADDR_VAR 0 2
44914: PUSH
44915: LD_VAR 0 2
44919: PUSH
44920: LD_INT 35
44922: PLUS
44923: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44924: LD_INT 23
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 21
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 24
44946: PUSH
44947: LD_INT 250
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: PPUSH
44959: CALL_OW 69
44963: PUSH
44964: LD_INT 0
44966: EQUAL
44967: PUSH
44968: LD_VAR 0 2
44972: PUSH
44973: LD_INT 245
44975: GREATEREQUAL
44976: OR
44977: IFFALSE 44903
// FinishMission ;
44979: CALL 44986 0 0
// end ;
44983: PPOPN 2
44985: END
// export function FinishMission ; var tmp ; begin
44986: LD_INT 0
44988: PPUSH
44989: PPUSH
// AddMedal ( med1 , 1 ) ;
44990: LD_STRING med1
44992: PPUSH
44993: LD_INT 1
44995: PPUSH
44996: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
45000: LD_STRING med2
45002: PPUSH
45003: LD_INT 1
45005: PPUSH
45006: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
45010: LD_STRING perfect
45012: PPUSH
45013: LD_INT 1
45015: PPUSH
45016: CALL_OW 101
// GiveMedals ( Main ) ;
45020: LD_STRING Main
45022: PPUSH
45023: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45027: LD_INT 22
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 23
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 21
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 25
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 25
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 25
45082: PUSH
45083: LD_INT 3
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 25
45092: PUSH
45093: LD_INT 4
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: PPUSH
45113: CALL_OW 69
45117: PPUSH
45118: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45122: LD_EXP 1
45126: PPUSH
45127: LD_EXP 43
45131: PUSH
45132: LD_STRING JMM
45134: STR
45135: PPUSH
45136: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
45140: LD_EXP 2
45144: PPUSH
45145: LD_EXP 43
45149: PUSH
45150: LD_STRING Brown
45152: STR
45153: PPUSH
45154: CALL 8225 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45158: LD_EXP 3
45162: PPUSH
45163: LD_EXP 43
45167: PUSH
45168: LD_STRING Donaldson
45170: STR
45171: PPUSH
45172: CALL 8225 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45176: LD_EXP 4
45180: PPUSH
45181: LD_EXP 43
45185: PUSH
45186: LD_STRING Bobby
45188: STR
45189: PPUSH
45190: CALL 8225 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45194: LD_EXP 5
45198: PPUSH
45199: LD_EXP 43
45203: PUSH
45204: LD_STRING Cyrus
45206: STR
45207: PPUSH
45208: CALL 8225 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45212: LD_EXP 6
45216: PPUSH
45217: LD_EXP 43
45221: PUSH
45222: LD_STRING Lisa
45224: STR
45225: PPUSH
45226: CALL 8225 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45230: LD_EXP 7
45234: PPUSH
45235: LD_EXP 43
45239: PUSH
45240: LD_STRING Frank
45242: STR
45243: PPUSH
45244: CALL 8225 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45248: LD_EXP 8
45252: PPUSH
45253: LD_EXP 43
45257: PUSH
45258: LD_STRING Gladstone
45260: STR
45261: PPUSH
45262: CALL 8225 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45266: LD_EXP 9
45270: PPUSH
45271: LD_EXP 43
45275: PUSH
45276: LD_STRING Kikuchi
45278: STR
45279: PPUSH
45280: CALL 8225 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45284: LD_EXP 14
45288: PPUSH
45289: LD_EXP 43
45293: PUSH
45294: LD_STRING Denis
45296: STR
45297: PPUSH
45298: CALL 8225 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45302: LD_EXP 15
45306: PPUSH
45307: LD_EXP 43
45311: PUSH
45312: LD_STRING Joan
45314: STR
45315: PPUSH
45316: CALL 8225 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45320: LD_EXP 10
45324: PPUSH
45325: LD_EXP 43
45329: PUSH
45330: LD_STRING Khatam
45332: STR
45333: PPUSH
45334: CALL 8225 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45338: LD_EXP 13
45342: PPUSH
45343: LD_EXP 43
45347: PUSH
45348: LD_STRING Houten
45350: STR
45351: PPUSH
45352: CALL 8225 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45356: LD_INT 50
45358: PUSH
45359: EMPTY
45360: LIST
45361: PUSH
45362: LD_INT 22
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 21
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 25
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 25
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 25
45407: PUSH
45408: LD_INT 3
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 25
45417: PUSH
45418: LD_INT 4
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: PPUSH
45438: CALL_OW 69
45442: PUSH
45443: LD_EXP 1
45447: PUSH
45448: LD_EXP 2
45452: PUSH
45453: LD_EXP 3
45457: PUSH
45458: LD_EXP 4
45462: PUSH
45463: LD_EXP 5
45467: PUSH
45468: LD_EXP 6
45472: PUSH
45473: LD_EXP 7
45477: PUSH
45478: LD_EXP 8
45482: PUSH
45483: LD_EXP 9
45487: PUSH
45488: LD_EXP 14
45492: PUSH
45493: LD_EXP 15
45497: PUSH
45498: LD_EXP 13
45502: PUSH
45503: LD_EXP 10
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: DIFF
45523: PPUSH
45524: LD_STRING 08_other_survivors
45526: PPUSH
45527: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45531: LD_INT 23
45533: PPUSH
45534: CALL 45547 0 1
// YouWin ;
45538: CALL_OW 103
// end ;
45542: LD_VAR 0 1
45546: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45547: LD_INT 0
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
// gammaBase = [ ] ;
45553: LD_ADDR_VAR 0 4
45557: PUSH
45558: EMPTY
45559: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45560: LD_ADDR_VAR 0 5
45564: PUSH
45565: LD_VAR 0 1
45569: PPUSH
45570: LD_INT 22
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 21
45582: PUSH
45583: LD_INT 3
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 50
45592: PUSH
45593: EMPTY
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: PPUSH
45601: CALL_OW 70
45605: ST_TO_ADDR
// for i in buildings do
45606: LD_ADDR_VAR 0 3
45610: PUSH
45611: LD_VAR 0 5
45615: PUSH
45616: FOR_IN
45617: IFFALSE 46054
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45619: LD_VAR 0 3
45623: PPUSH
45624: CALL_OW 266
45628: PUSH
45629: LD_INT 6
45631: PUSH
45632: LD_INT 7
45634: PUSH
45635: LD_INT 8
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: IN
45643: IFFALSE 45757
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45645: LD_ADDR_VAR 0 4
45649: PUSH
45650: LD_VAR 0 4
45654: PUSH
45655: LD_VAR 0 3
45659: PPUSH
45660: CALL_OW 266
45664: PUSH
45665: LD_VAR 0 3
45669: PPUSH
45670: CALL_OW 250
45674: PUSH
45675: LD_VAR 0 3
45679: PPUSH
45680: CALL_OW 251
45684: PUSH
45685: LD_VAR 0 3
45689: PPUSH
45690: CALL_OW 254
45694: PUSH
45695: LD_VAR 0 3
45699: PPUSH
45700: CALL_OW 267
45704: PUSH
45705: LD_VAR 0 3
45709: PPUSH
45710: CALL_OW 248
45714: PUSH
45715: LD_VAR 0 3
45719: PPUSH
45720: LD_INT 1
45722: PPUSH
45723: CALL_OW 268
45727: PUSH
45728: LD_VAR 0 3
45732: PPUSH
45733: LD_INT 2
45735: PPUSH
45736: CALL_OW 268
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: ADD
45754: ST_TO_ADDR
45755: GO 46052
// if GetBType ( i ) = b_bunker then
45757: LD_VAR 0 3
45761: PPUSH
45762: CALL_OW 266
45766: PUSH
45767: LD_INT 32
45769: EQUAL
45770: IFFALSE 45867
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45772: LD_ADDR_VAR 0 4
45776: PUSH
45777: LD_VAR 0 4
45781: PUSH
45782: LD_VAR 0 3
45786: PPUSH
45787: CALL_OW 266
45791: PUSH
45792: LD_VAR 0 3
45796: PPUSH
45797: CALL_OW 250
45801: PUSH
45802: LD_VAR 0 3
45806: PPUSH
45807: CALL_OW 251
45811: PUSH
45812: LD_VAR 0 3
45816: PPUSH
45817: CALL_OW 254
45821: PUSH
45822: LD_VAR 0 3
45826: PPUSH
45827: CALL_OW 267
45831: PUSH
45832: LD_VAR 0 3
45836: PPUSH
45837: CALL_OW 248
45841: PUSH
45842: LD_VAR 0 3
45846: PPUSH
45847: CALL_OW 269
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: PUSH
45861: EMPTY
45862: LIST
45863: ADD
45864: ST_TO_ADDR
45865: GO 46052
// if GetBType ( i ) = b_factory then
45867: LD_VAR 0 3
45871: PPUSH
45872: CALL_OW 266
45876: PUSH
45877: LD_INT 3
45879: EQUAL
45880: IFFALSE 45970
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45882: LD_ADDR_VAR 0 4
45886: PUSH
45887: LD_VAR 0 4
45891: PPUSH
45892: LD_INT 1
45894: PPUSH
45895: LD_VAR 0 3
45899: PPUSH
45900: CALL_OW 266
45904: PUSH
45905: LD_VAR 0 3
45909: PPUSH
45910: CALL_OW 250
45914: PUSH
45915: LD_VAR 0 3
45919: PPUSH
45920: CALL_OW 251
45924: PUSH
45925: LD_VAR 0 3
45929: PPUSH
45930: CALL_OW 254
45934: PUSH
45935: LD_VAR 0 3
45939: PPUSH
45940: CALL_OW 267
45944: PUSH
45945: LD_VAR 0 3
45949: PPUSH
45950: CALL_OW 248
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: PPUSH
45963: CALL_OW 2
45967: ST_TO_ADDR
45968: GO 46052
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45970: LD_ADDR_VAR 0 4
45974: PUSH
45975: LD_VAR 0 4
45979: PUSH
45980: LD_VAR 0 3
45984: PPUSH
45985: CALL_OW 266
45989: PUSH
45990: LD_VAR 0 3
45994: PPUSH
45995: CALL_OW 250
45999: PUSH
46000: LD_VAR 0 3
46004: PPUSH
46005: CALL_OW 251
46009: PUSH
46010: LD_VAR 0 3
46014: PPUSH
46015: CALL_OW 254
46019: PUSH
46020: LD_VAR 0 3
46024: PPUSH
46025: CALL_OW 267
46029: PUSH
46030: LD_VAR 0 3
46034: PPUSH
46035: CALL_OW 248
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: PUSH
46048: EMPTY
46049: LIST
46050: ADD
46051: ST_TO_ADDR
// end ;
46052: GO 45616
46054: POP
46055: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
46056: LD_VAR 0 4
46060: PPUSH
46061: LD_STRING 08_GammaBase
46063: PPUSH
46064: CALL_OW 39
// end ;
46068: LD_VAR 0 2
46072: RET
