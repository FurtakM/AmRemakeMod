// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 40
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 41
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 37
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 35
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// defenders_list = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// varEvent1 = 0 ;
 126: LD_ADDR_EXP 39
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// timerStatus = 0 ;
 134: LD_ADDR_EXP 34
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 142: LD_ADDR_EXP 38
 146: PUSH
 147: LD_INT 18
 149: PUSH
 150: LD_INT 17
 152: PUSH
 153: LD_INT 15
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_OWVAR 67
 165: ARRAY
 166: ST_TO_ADDR
// debugMode = 0 ;
 167: LD_ADDR_EXP 42
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// PrepareDifficulty ;
 175: CALL 6135 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 179: LD_INT 43
 181: PPUSH
 182: LD_INT 22
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 333
 190: NEG
 191: PPUSH
 192: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 196: LD_INT 43
 198: PPUSH
 199: LD_INT 22
 201: PPUSH
 202: LD_INT 1
 204: PPUSH
 205: CALL_OW 331
// PrepareBase ;
 209: CALL 1579 0 0
// PrepareHeroes ;
 213: CALL 511 0 0
// PrepareRussianCommander ;
 217: CALL 4940 0 0
// PrepareRussians ;
 221: CALL 5258 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 225: LD_INT 22
 227: PUSH
 228: LD_INT 3
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 25
 237: PUSH
 238: LD_INT 2
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PPUSH
 249: CALL_OW 69
 253: PPUSH
 254: LD_INT 0
 256: PPUSH
 257: LD_INT 90
 259: PPUSH
 260: LD_INT 86
 262: PPUSH
 263: LD_INT 3
 265: PPUSH
 266: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 270: LD_INT 3
 272: PPUSH
 273: LD_INT 24
 275: PPUSH
 276: LD_INT 3
 278: PPUSH
 279: LD_EXP 24
 283: PPUSH
 284: LD_EXP 25
 288: PPUSH
 289: CALL_OW 12
 293: PPUSH
 294: LD_INT 6
 296: PPUSH
 297: LD_INT 4
 299: PPUSH
 300: CALL 7353 0 6
// PrepareCutsceneAttack ;
 304: CALL 4992 0 0
// end ;
 308: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 309: LD_EXP 42
 313: PUSH
 314: LD_INT 1
 316: EQUAL
 317: IFFALSE 508
 319: GO 321
 321: DISABLE
 322: LD_INT 0
 324: PPUSH
// begin enable ;
 325: ENABLE
// fogoff ( true ) ;
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 333: LD_ADDR_VAR 0 1
 337: PUSH
 338: LD_INT 22
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 21
 350: PUSH
 351: LD_INT 1
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: PPUSH
 362: CALL_OW 69
 366: PUSH
 367: FOR_IN
 368: IFFALSE 384
// SetLives ( i , 1000 ) ;
 370: LD_VAR 0 1
 374: PPUSH
 375: LD_INT 1000
 377: PPUSH
 378: CALL_OW 234
 382: GO 367
 384: POP
 385: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 386: LD_ADDR_VAR 0 1
 390: PUSH
 391: LD_INT 22
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: LD_INT 30
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 30
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PPUSH
 476: CALL_OW 69
 480: PUSH
 481: FOR_IN
 482: IFFALSE 506
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 484: LD_VAR 0 1
 488: PPUSH
 489: CALL_OW 274
 493: PPUSH
 494: LD_INT 2
 496: PPUSH
 497: LD_INT 9999
 499: PPUSH
 500: CALL_OW 277
 504: GO 481
 506: POP
 507: POP
// end ; end_of_file
 508: PPOPN 1
 510: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun ; begin
 511: LD_INT 0
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
// uc_side = 1 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// uc_nation = 1 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if gammaCommander = 1 then
 538: LD_EXP 11
 542: PUSH
 543: LD_INT 1
 545: EQUAL
 546: IFFALSE 579
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 548: LD_ADDR_EXP 3
 552: PUSH
 553: LD_STRING Donaldson
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: CALL 5676 0 2
 563: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 564: LD_EXP 3
 568: PPUSH
 569: LD_INT 5
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 49
// end ; if gammaCommander = 2 then
 579: LD_EXP 11
 583: PUSH
 584: LD_INT 2
 586: EQUAL
 587: IFFALSE 620
// begin Brown = PrepareUnit ( Brown , true ) ;
 589: LD_ADDR_EXP 2
 593: PUSH
 594: LD_STRING Brown
 596: PPUSH
 597: LD_INT 1
 599: PPUSH
 600: CALL 5676 0 2
 604: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 605: LD_EXP 2
 609: PPUSH
 610: LD_INT 5
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
// end ; if gammaCommander = 3 then
 620: LD_EXP 11
 624: PUSH
 625: LD_INT 3
 627: EQUAL
 628: IFFALSE 661
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 630: LD_ADDR_EXP 12
 634: PUSH
 635: LD_STRING VanHouten
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL 5676 0 2
 645: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 646: LD_EXP 12
 650: PPUSH
 651: LD_INT 5
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 661: LD_ADDR_EXP 21
 665: PUSH
 666: LD_STRING Harisson
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL 5676 0 2
 676: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 677: LD_ADDR_EXP 22
 681: PUSH
 682: LD_STRING Powell
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL 5676 0 2
 692: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 693: LD_ADDR_EXP 10
 697: PUSH
 698: LD_STRING 07_othersGamma
 700: PPUSH
 701: CALL_OW 31
 705: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 706: LD_ADDR_VAR 0 5
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 30
 723: PUSH
 724: LD_INT 5
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 69
 739: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 740: LD_ADDR_VAR 0 4
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 30
 760: PUSH
 761: LD_INT 6
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: PUSH
 768: LD_INT 30
 770: PUSH
 771: LD_INT 7
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 30
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PPUSH
 798: CALL_OW 69
 802: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 803: LD_ADDR_VAR 0 3
 807: PUSH
 808: LD_INT 22
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 30
 820: PUSH
 821: LD_INT 3
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 69
 836: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 837: LD_ADDR_VAR 0 8
 841: PUSH
 842: LD_INT 22
 844: PUSH
 845: LD_INT 1
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 30
 854: PUSH
 855: LD_INT 36
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PPUSH
 866: CALL_OW 69
 870: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 871: LD_ADDR_VAR 0 9
 875: PUSH
 876: LD_INT 22
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 2
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 31
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 30
 901: PUSH
 902: LD_INT 32
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: ST_TO_ADDR
// for i in others_gamma do
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_EXP 10
 932: PUSH
 933: FOR_IN
 934: IFFALSE 1309
// begin placed := false ;
 936: LD_ADDR_VAR 0 7
 940: PUSH
 941: LD_INT 0
 943: ST_TO_ADDR
// if GetClass ( i ) = 1 then
 944: LD_VAR 0 2
 948: PPUSH
 949: CALL_OW 257
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1082
// begin if UnitFilter ( bun , [ f_empty ] ) then
 959: LD_VAR 0 9
 963: PPUSH
 964: LD_INT 58
 966: PUSH
 967: EMPTY
 968: LIST
 969: PPUSH
 970: CALL_OW 72
 974: IFFALSE 1013
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
 976: LD_VAR 0 2
 980: PPUSH
 981: LD_VAR 0 9
 985: PPUSH
 986: LD_INT 58
 988: PUSH
 989: EMPTY
 990: LIST
 991: PPUSH
 992: CALL_OW 72
 996: PUSH
 997: LD_INT 1
 999: ARRAY
1000: PPUSH
1001: CALL_OW 52
// placed := true ;
1005: LD_ADDR_VAR 0 7
1009: PUSH
1010: LD_INT 1
1012: ST_TO_ADDR
// end ; if arm and not placed then
1013: LD_VAR 0 5
1017: PUSH
1018: LD_VAR 0 7
1022: NOT
1023: AND
1024: IFFALSE 1082
// begin for j in arm do
1026: LD_ADDR_VAR 0 6
1030: PUSH
1031: LD_VAR 0 5
1035: PUSH
1036: FOR_IN
1037: IFFALSE 1080
// if UnitsInside ( j ) < 6 then
1039: LD_VAR 0 6
1043: PPUSH
1044: CALL_OW 313
1048: PUSH
1049: LD_INT 6
1051: LESS
1052: IFFALSE 1078
// begin PlaceHumanInUnit ( i , j ) ;
1054: LD_VAR 0 2
1058: PPUSH
1059: LD_VAR 0 6
1063: PPUSH
1064: CALL_OW 52
// placed := true ;
1068: LD_ADDR_VAR 0 7
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// break ;
1076: GO 1080
// end ;
1078: GO 1036
1080: POP
1081: POP
// end ; end ; if GetClass ( i ) = 3 then
1082: LD_VAR 0 2
1086: PPUSH
1087: CALL_OW 257
1091: PUSH
1092: LD_INT 3
1094: EQUAL
1095: IFFALSE 1199
// if fac then
1097: LD_VAR 0 3
1101: IFFALSE 1199
// begin if ct then
1103: LD_VAR 0 8
1107: IFFALSE 1135
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1109: LD_VAR 0 2
1113: PPUSH
1114: LD_VAR 0 8
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: CALL_OW 52
// placed := true ;
1127: LD_ADDR_VAR 0 7
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// end ; if placed then
1135: LD_VAR 0 7
1139: IFFALSE 1143
// continue ;
1141: GO 933
// for j in fac do
1143: LD_ADDR_VAR 0 6
1147: PUSH
1148: LD_VAR 0 3
1152: PUSH
1153: FOR_IN
1154: IFFALSE 1197
// if UnitsInside ( j ) < 6 then
1156: LD_VAR 0 6
1160: PPUSH
1161: CALL_OW 313
1165: PUSH
1166: LD_INT 6
1168: LESS
1169: IFFALSE 1195
// begin PlaceHumanInUnit ( i , j ) ;
1171: LD_VAR 0 2
1175: PPUSH
1176: LD_VAR 0 6
1180: PPUSH
1181: CALL_OW 52
// placed := true ;
1185: LD_ADDR_VAR 0 7
1189: PUSH
1190: LD_INT 1
1192: ST_TO_ADDR
// break ;
1193: GO 1197
// end ;
1195: GO 1153
1197: POP
1198: POP
// end ; if GetClass ( i ) = 4 then
1199: LD_VAR 0 2
1203: PPUSH
1204: CALL_OW 257
1208: PUSH
1209: LD_INT 4
1211: EQUAL
1212: IFFALSE 1276
// if lab then
1214: LD_VAR 0 4
1218: IFFALSE 1276
// begin for j in lab do
1220: LD_ADDR_VAR 0 6
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: FOR_IN
1231: IFFALSE 1274
// if UnitsInside ( j ) < 6 then
1233: LD_VAR 0 6
1237: PPUSH
1238: CALL_OW 313
1242: PUSH
1243: LD_INT 6
1245: LESS
1246: IFFALSE 1272
// begin PlaceHumanInUnit ( i , j ) ;
1248: LD_VAR 0 2
1252: PPUSH
1253: LD_VAR 0 6
1257: PPUSH
1258: CALL_OW 52
// placed := true ;
1262: LD_ADDR_VAR 0 7
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// break ;
1270: GO 1274
// end ;
1272: GO 1230
1274: POP
1275: POP
// end ; if not placed then
1276: LD_VAR 0 7
1280: NOT
1281: IFFALSE 1307
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1283: LD_VAR 0 2
1287: PPUSH
1288: LD_INT 5
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
// ComHold ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 140
// end ; end ;
1307: GO 933
1309: POP
1310: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1311: LD_VAR 0 8
1315: PUSH
1316: LD_VAR 0 8
1320: PUSH
1321: LD_INT 1
1323: ARRAY
1324: PPUSH
1325: CALL_OW 313
1329: AND
1330: IFFALSE 1419
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1332: LD_ADDR_VAR 0 2
1336: PUSH
1337: LD_INT 22
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 33
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PPUSH
1361: CALL_OW 69
1365: PUSH
1366: FOR_IN
1367: IFFALSE 1417
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1369: LD_VAR 0 2
1373: PPUSH
1374: LD_VAR 0 8
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PPUSH
1383: CALL_OW 313
1387: PUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_VAR 0 8
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: CALL_OW 313
1404: PPUSH
1405: CALL_OW 12
1409: ARRAY
1410: PPUSH
1411: CALL_OW 135
1415: GO 1366
1417: POP
1418: POP
// end ; end ;
1419: LD_VAR 0 1
1423: RET
// export function PrepareSoldiers ; var i ; begin
1424: LD_INT 0
1426: PPUSH
1427: PPUSH
// uc_side = 1 ;
1428: LD_ADDR_OWVAR 20
1432: PUSH
1433: LD_INT 1
1435: ST_TO_ADDR
// uc_nation = 1 ;
1436: LD_ADDR_OWVAR 21
1440: PUSH
1441: LD_INT 1
1443: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
1444: LD_ADDR_VAR 0 2
1448: PUSH
1449: LD_INT 22
1451: PUSH
1452: LD_INT 1
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 30
1461: PUSH
1462: LD_INT 32
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL_OW 69
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1507
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
1481: LD_INT 1
1483: PPUSH
1484: LD_INT 1
1486: PPUSH
1487: LD_VAR 0 2
1491: PPUSH
1492: LD_INT 4
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: CALL 6025 0 6
1505: GO 1478
1507: POP
1508: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
1509: LD_ADDR_VAR 0 2
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 30
1526: PUSH
1527: LD_INT 31
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: PUSH
1543: FOR_IN
1544: IFFALSE 1572
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
1546: LD_INT 1
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: LD_INT 4
1559: PPUSH
1560: LD_INT 1
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL 6025 0 6
1570: GO 1543
1572: POP
1573: POP
// end ;
1574: LD_VAR 0 1
1578: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
1583: PPUSH
1584: PPUSH
1585: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1586: LD_INT 71
1588: PPUSH
1589: LD_INT 5
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_STRING GammaBase
1606: PPUSH
1607: EMPTY
1608: PPUSH
1609: CALL_OW 30
1613: ST_TO_ADDR
// uc_side := 1 ;
1614: LD_ADDR_OWVAR 20
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// uc_nation := 1 ;
1622: LD_ADDR_OWVAR 21
1626: PUSH
1627: LD_INT 1
1629: ST_TO_ADDR
// for i in blist do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: LD_VAR 0 2
1639: PUSH
1640: FOR_IN
1641: IFFALSE 2049
// begin bc_type := i [ 1 ] ;
1643: LD_ADDR_OWVAR 42
1647: PUSH
1648: LD_VAR 0 3
1652: PUSH
1653: LD_INT 1
1655: ARRAY
1656: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1657: LD_ADDR_OWVAR 43
1661: PUSH
1662: LD_VAR 0 3
1666: PUSH
1667: LD_INT 5
1669: ARRAY
1670: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 1
1678: ARRAY
1679: PUSH
1680: LD_INT 7
1682: PUSH
1683: LD_INT 8
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: IN
1690: IFFALSE 1746
// begin bc_kind1 := i [ 7 ] ;
1692: LD_ADDR_OWVAR 44
1696: PUSH
1697: LD_VAR 0 3
1701: PUSH
1702: LD_INT 7
1704: ARRAY
1705: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1706: LD_STRING 06_remoteVehs_1
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 30
1716: PUSH
1717: LD_INT 1
1719: EQUAL
1720: IFFALSE 1732
// begin bc_kind2 := 15 ;
1722: LD_ADDR_OWVAR 45
1726: PUSH
1727: LD_INT 15
1729: ST_TO_ADDR
// end else
1730: GO 1746
// begin bc_kind2 := i [ 8 ] ;
1732: LD_ADDR_OWVAR 45
1736: PUSH
1737: LD_VAR 0 3
1741: PUSH
1742: LD_INT 8
1744: ARRAY
1745: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1746: LD_OWVAR 42
1750: PUSH
1751: LD_INT 0
1753: EQUAL
1754: IFFALSE 1872
// begin bc_type := b_warehouse ;
1756: LD_ADDR_OWVAR 42
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1764: LD_ADDR_EXP 36
1768: PUSH
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 2
1776: ARRAY
1777: PPUSH
1778: LD_VAR 0 3
1782: PUSH
1783: LD_INT 3
1785: ARRAY
1786: PPUSH
1787: LD_VAR 0 3
1791: PUSH
1792: LD_INT 4
1794: ARRAY
1795: PPUSH
1796: CALL_OW 47
1800: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1801: LD_EXP 36
1805: PPUSH
1806: LD_STRING gamma
1808: PPUSH
1809: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1813: LD_EXP 36
1817: PPUSH
1818: CALL_OW 274
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: LD_INT 200
1828: PUSH
1829: LD_INT 150
1831: PUSH
1832: LD_INT 100
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_OWVAR 67
1844: ARRAY
1845: PPUSH
1846: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1850: LD_EXP 36
1854: PPUSH
1855: CALL_OW 274
1859: PPUSH
1860: LD_INT 2
1862: PPUSH
1863: LD_INT 200
1865: PPUSH
1866: CALL_OW 277
// end else
1870: GO 2014
// begin if bc_type = 4 then
1872: LD_OWVAR 42
1876: PUSH
1877: LD_INT 4
1879: EQUAL
1880: IFFALSE 1929
// begin bc_type = 5 ;
1882: LD_ADDR_OWVAR 42
1886: PUSH
1887: LD_INT 5
1889: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1890: LD_ADDR_VAR 0 4
1894: PUSH
1895: LD_VAR 0 3
1899: PUSH
1900: LD_INT 2
1902: ARRAY
1903: PPUSH
1904: LD_VAR 0 3
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: LD_VAR 0 3
1917: PUSH
1918: LD_INT 4
1920: ARRAY
1921: PPUSH
1922: CALL_OW 47
1926: ST_TO_ADDR
// end else
1927: GO 2014
// begin bc_type := i [ 1 ] ;
1929: LD_ADDR_OWVAR 42
1933: PUSH
1934: LD_VAR 0 3
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1943: LD_STRING 06_remoteVehs_1
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 30
1953: PUSH
1954: LD_INT 1
1956: EQUAL
1957: PUSH
1958: LD_OWVAR 42
1962: PUSH
1963: LD_INT 7
1965: EQUAL
1966: AND
1967: IFFALSE 1977
// bc_type := b_lab_full ;
1969: LD_ADDR_OWVAR 42
1973: PUSH
1974: LD_INT 8
1976: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1977: LD_ADDR_VAR 0 4
1981: PUSH
1982: LD_VAR 0 3
1986: PUSH
1987: LD_INT 2
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 3
1998: ARRAY
1999: PPUSH
2000: LD_VAR 0 3
2004: PUSH
2005: LD_INT 4
2007: ARRAY
2008: PPUSH
2009: CALL_OW 47
2013: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2014: LD_VAR 0 4
2018: PPUSH
2019: CALL_OW 266
2023: PUSH
2024: LD_INT 32
2026: EQUAL
2027: IFFALSE 2047
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_VAR 0 3
2038: PUSH
2039: LD_INT 7
2041: ARRAY
2042: PPUSH
2043: CALL_OW 431
// end ;
2047: GO 1640
2049: POP
2050: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2051: LD_STRING 06_remoteVehs_1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 30
2061: PUSH
2062: LD_INT 1
2064: EQUAL
2065: IFFALSE 2269
// begin bc_type = 36 ;
2067: LD_ADDR_OWVAR 42
2071: PUSH
2072: LD_INT 36
2074: ST_TO_ADDR
// bc_level = 4 ;
2075: LD_ADDR_OWVAR 43
2079: PUSH
2080: LD_INT 4
2082: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2083: LD_INT 62
2085: PPUSH
2086: LD_INT 12
2088: PPUSH
2089: LD_INT 3
2091: PPUSH
2092: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2096: LD_ADDR_VAR 0 3
2100: PUSH
2101: DOUBLE
2102: LD_INT 1
2104: DEC
2105: ST_TO_ADDR
2106: LD_INT 3
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 2
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_OWVAR 67
2124: ARRAY
2125: PUSH
2126: FOR_TO
2127: IFFALSE 2267
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2129: LD_ADDR_OWVAR 37
2133: PUSH
2134: LD_INT 3
2136: PUSH
2137: LD_INT 2
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 1
2149: PPUSH
2150: LD_INT 2
2152: PPUSH
2153: CALL_OW 12
2157: ARRAY
2158: PUSH
2159: LD_INT 2
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_OWVAR 67
2171: ARRAY
2172: ST_TO_ADDR
// vc_engine = 1 ;
2173: LD_ADDR_OWVAR 39
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// vc_control = 2 ;
2181: LD_ADDR_OWVAR 38
2185: PUSH
2186: LD_INT 2
2188: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2189: LD_ADDR_OWVAR 40
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 5
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 1
2210: PPUSH
2211: LD_INT 3
2213: PPUSH
2214: CALL_OW 12
2218: ARRAY
2219: ST_TO_ADDR
// veh = CreateVehicle ;
2220: LD_ADDR_VAR 0 5
2224: PUSH
2225: CALL_OW 45
2229: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2230: LD_VAR 0 5
2234: PPUSH
2235: LD_EXP 36
2239: PPUSH
2240: CALL_OW 250
2244: PPUSH
2245: LD_EXP 36
2249: PPUSH
2250: CALL_OW 251
2254: PPUSH
2255: LD_INT 7
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: CALL_OW 50
// end ;
2265: GO 2126
2267: POP
2268: POP
// end ; end ;
2269: LD_VAR 0 1
2273: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2274: LD_INT 0
2276: PPUSH
2277: PPUSH
2278: PPUSH
2279: PPUSH
// uc_side = 1 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// uc_nation = 1 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2296: LD_ADDR_EXP 13
2300: PUSH
2301: LD_STRING 06c_Denis
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: CALL 5676 0 2
2311: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2312: LD_EXP 13
2316: PPUSH
2317: LD_INT 4
2319: PPUSH
2320: LD_INT 0
2322: PPUSH
2323: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2327: LD_ADDR_EXP 14
2331: PUSH
2332: LD_STRING 06c_Joan
2334: PPUSH
2335: LD_INT 1
2337: PPUSH
2338: CALL 5676 0 2
2342: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2343: LD_EXP 14
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: LD_INT 0
2353: PPUSH
2354: CALL_OW 49
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
2358: LD_STRING GladstoneIn07
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: CALL_OW 30
2368: PUSH
2369: LD_INT 0
2371: EQUAL
2372: IFFALSE 2440
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2374: LD_ADDR_EXP 8
2378: PUSH
2379: LD_STRING 06c_Gladstone
2381: PPUSH
2382: LD_INT 1
2384: PPUSH
2385: CALL 5676 0 2
2389: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2390: LD_EXP 8
2394: NOT
2395: PUSH
2396: LD_STRING GladstoneStayInDelta
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL_OW 30
2406: AND
2407: IFFALSE 2425
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2409: LD_ADDR_EXP 8
2413: PUSH
2414: LD_STRING 05_Gladstone
2416: PPUSH
2417: LD_INT 1
2419: PPUSH
2420: CALL 5676 0 2
2424: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2425: LD_EXP 8
2429: PPUSH
2430: LD_INT 4
2432: PPUSH
2433: LD_INT 0
2435: PPUSH
2436: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2440: LD_STRING LisaStayInDelta
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: CALL_OW 30
2450: IFFALSE 2483
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2452: LD_ADDR_EXP 6
2456: PUSH
2457: LD_STRING 05_Lisa
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: CALL 5676 0 2
2467: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 4
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2483: LD_STRING BobbyStayInDelta
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 30
2493: IFFALSE 2526
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2495: LD_ADDR_EXP 4
2499: PUSH
2500: LD_STRING 05_Bobby
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL 5676 0 2
2510: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2511: LD_EXP 4
2515: PPUSH
2516: LD_INT 4
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2526: LD_STRING CyrusStayInDelta
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL_OW 30
2536: IFFALSE 2569
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2538: LD_ADDR_EXP 5
2542: PUSH
2543: LD_STRING 05_Cyrus
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: CALL 5676 0 2
2553: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2554: LD_EXP 5
2558: PPUSH
2559: LD_INT 4
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2569: LD_STRING BrownStayInDelta
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: CALL_OW 30
2579: IFFALSE 2612
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
2581: LD_ADDR_EXP 2
2585: PUSH
2586: LD_STRING 05_Brown
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL 5676 0 2
2596: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2597: LD_EXP 2
2601: PPUSH
2602: LD_INT 4
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
2612: LD_STRING DonaldsonStayInDelta
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL_OW 30
2622: IFFALSE 2655
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
2624: LD_ADDR_EXP 3
2628: PUSH
2629: LD_STRING 05_Donaldson
2631: PPUSH
2632: LD_INT 1
2634: PPUSH
2635: CALL 5676 0 2
2639: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2640: LD_EXP 3
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 0
2650: PPUSH
2651: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2655: LD_ADDR_VAR 0 4
2659: PUSH
2660: LD_STRING OtherStayInDelta
2662: PPUSH
2663: CALL_OW 31
2667: ST_TO_ADDR
// if other then
2668: LD_VAR 0 4
2672: IFFALSE 2717
// for j = 1 to other do
2674: LD_ADDR_VAR 0 3
2678: PUSH
2679: DOUBLE
2680: LD_INT 1
2682: DEC
2683: ST_TO_ADDR
2684: LD_VAR 0 4
2688: PUSH
2689: FOR_TO
2690: IFFALSE 2715
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2692: LD_VAR 0 4
2696: PUSH
2697: LD_VAR 0 3
2701: ARRAY
2702: PPUSH
2703: LD_INT 4
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 49
2713: GO 2689
2715: POP
2716: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2717: LD_ADDR_VAR 0 4
2721: PUSH
2722: LD_STRING 06_other_apemans
2724: PPUSH
2725: CALL_OW 31
2729: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
2730: LD_VAR 0 4
2734: PUSH
2735: LD_INT 5
2737: PUSH
2738: LD_INT 4
2740: PUSH
2741: LD_INT 3
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: PUSH
2749: LD_OWVAR 67
2753: ARRAY
2754: GREATEREQUAL
2755: IFFALSE 2784
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: LD_INT 5
2764: PUSH
2765: LD_INT 4
2767: PUSH
2768: LD_INT 3
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PUSH
2776: LD_OWVAR 67
2780: ARRAY
2781: ST_TO_ADDR
2782: GO 2794
// j := other ;
2784: LD_ADDR_VAR 0 3
2788: PUSH
2789: LD_VAR 0 4
2793: ST_TO_ADDR
// for i = 1 to j do
2794: LD_ADDR_VAR 0 2
2798: PUSH
2799: DOUBLE
2800: LD_INT 1
2802: DEC
2803: ST_TO_ADDR
2804: LD_VAR 0 3
2808: PUSH
2809: FOR_TO
2810: IFFALSE 2835
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2812: LD_VAR 0 4
2816: PUSH
2817: LD_VAR 0 2
2821: ARRAY
2822: PPUSH
2823: LD_INT 4
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: CALL_OW 49
2833: GO 2809
2835: POP
2836: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2837: LD_INT 4
2839: PPUSH
2840: LD_INT 22
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: LD_INT 21
2852: PUSH
2853: LD_INT 1
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 70
2868: PPUSH
2869: LD_INT 53
2871: PPUSH
2872: LD_INT 19
2874: PPUSH
2875: CALL_OW 111
// firstAttack = 1 ;
2879: LD_ADDR_EXP 32
2883: PUSH
2884: LD_INT 1
2886: ST_TO_ADDR
// end ;
2887: LD_VAR 0 1
2891: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
2898: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: LD_STRING 07_vehicles
2906: PPUSH
2907: EMPTY
2908: PPUSH
2909: CALL_OW 30
2913: ST_TO_ADDR
// uc_side = 1 ;
2914: LD_ADDR_OWVAR 20
2918: PUSH
2919: LD_INT 1
2921: ST_TO_ADDR
// uc_nation = 1 ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// if vehicles > 0 then
2930: LD_VAR 0 4
2934: PUSH
2935: LD_INT 0
2937: GREATER
2938: IFFALSE 3077
// begin for i = 1 to vehicles do
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: DOUBLE
2946: LD_INT 1
2948: DEC
2949: ST_TO_ADDR
2950: LD_VAR 0 4
2954: PUSH
2955: FOR_TO
2956: IFFALSE 3075
// begin vc_chassis = vehicles [ i ] ;
2958: LD_ADDR_OWVAR 37
2962: PUSH
2963: LD_VAR 0 4
2967: PUSH
2968: LD_VAR 0 2
2972: ARRAY
2973: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2974: LD_ADDR_OWVAR 39
2978: PUSH
2979: LD_VAR 0 4
2983: PUSH
2984: LD_VAR 0 2
2988: PUSH
2989: LD_INT 1
2991: PLUS
2992: ARRAY
2993: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2994: LD_ADDR_OWVAR 38
2998: PUSH
2999: LD_VAR 0 4
3003: PUSH
3004: LD_VAR 0 2
3008: PUSH
3009: LD_INT 2
3011: PLUS
3012: ARRAY
3013: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3014: LD_ADDR_OWVAR 40
3018: PUSH
3019: LD_VAR 0 4
3023: PUSH
3024: LD_VAR 0 2
3028: PUSH
3029: LD_INT 3
3031: PLUS
3032: ARRAY
3033: ST_TO_ADDR
// veh = CreateVehicle ;
3034: LD_ADDR_VAR 0 5
3038: PUSH
3039: CALL_OW 45
3043: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3044: LD_VAR 0 5
3048: PPUSH
3049: LD_INT 4
3051: PPUSH
3052: LD_INT 0
3054: PPUSH
3055: CALL_OW 49
// i = i + 3 ;
3059: LD_ADDR_VAR 0 2
3063: PUSH
3064: LD_VAR 0 2
3068: PUSH
3069: LD_INT 3
3071: PLUS
3072: ST_TO_ADDR
// end ;
3073: GO 2955
3075: POP
3076: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3077: LD_ADDR_EXP 1
3081: PUSH
3082: LD_EXP 41
3086: PUSH
3087: LD_STRING JMM
3089: STR
3090: PPUSH
3091: LD_INT 1
3093: PPUSH
3094: CALL 5676 0 2
3098: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3099: LD_EXP 11
3103: PUSH
3104: LD_INT 1
3106: EQUAL
3107: PUSH
3108: LD_EXP 11
3112: PUSH
3113: LD_INT 3
3115: EQUAL
3116: OR
3117: IFFALSE 3141
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3119: LD_ADDR_EXP 2
3123: PUSH
3124: LD_EXP 41
3128: PUSH
3129: LD_STRING Brown
3131: STR
3132: PPUSH
3133: LD_INT 1
3135: PPUSH
3136: CALL 5676 0 2
3140: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3141: LD_EXP 11
3145: PUSH
3146: LD_INT 2
3148: EQUAL
3149: PUSH
3150: LD_EXP 11
3154: PUSH
3155: LD_INT 3
3157: EQUAL
3158: OR
3159: IFFALSE 3183
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3161: LD_ADDR_EXP 3
3165: PUSH
3166: LD_EXP 41
3170: PUSH
3171: LD_STRING Donaldson
3173: STR
3174: PPUSH
3175: LD_INT 1
3177: PPUSH
3178: CALL 5676 0 2
3182: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3183: LD_ADDR_EXP 4
3187: PUSH
3188: LD_EXP 41
3192: PUSH
3193: LD_STRING Bobby
3195: STR
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: CALL 5676 0 2
3204: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3205: LD_ADDR_EXP 5
3209: PUSH
3210: LD_EXP 41
3214: PUSH
3215: LD_STRING Cyrus
3217: STR
3218: PPUSH
3219: LD_INT 1
3221: PPUSH
3222: CALL 5676 0 2
3226: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3227: LD_ADDR_EXP 6
3231: PUSH
3232: LD_EXP 41
3236: PUSH
3237: LD_STRING Lisa
3239: STR
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: CALL 5676 0 2
3248: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3249: LD_ADDR_EXP 7
3253: PUSH
3254: LD_EXP 41
3258: PUSH
3259: LD_STRING Frank
3261: STR
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: CALL 5676 0 2
3270: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3271: LD_ADDR_EXP 8
3275: PUSH
3276: LD_EXP 41
3280: PUSH
3281: LD_STRING Gladstone
3283: STR
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: CALL 5676 0 2
3292: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3293: LD_ADDR_EXP 9
3297: PUSH
3298: LD_EXP 41
3302: PUSH
3303: LD_STRING Kikuchi
3305: STR
3306: PPUSH
3307: LD_INT 1
3309: PPUSH
3310: CALL 5676 0 2
3314: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3315: LD_EXP 11
3319: PUSH
3320: LD_INT 1
3322: EQUAL
3323: PUSH
3324: LD_EXP 11
3328: PUSH
3329: LD_INT 3
3331: EQUAL
3332: OR
3333: IFFALSE 3350
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3335: LD_EXP 2
3339: PPUSH
3340: LD_INT 4
3342: PPUSH
3343: LD_INT 0
3345: PPUSH
3346: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3350: LD_EXP 11
3354: PUSH
3355: LD_INT 2
3357: EQUAL
3358: PUSH
3359: LD_EXP 11
3363: PUSH
3364: LD_INT 3
3366: EQUAL
3367: OR
3368: IFFALSE 3385
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3370: LD_EXP 3
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3385: LD_ADDR_VAR 0 5
3389: PUSH
3390: LD_INT 4
3392: PPUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 1
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 21
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 58
3415: PUSH
3416: EMPTY
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 70
3428: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3429: LD_ADDR_EXP 1
3433: PUSH
3434: LD_EXP 41
3438: PUSH
3439: LD_STRING JMM
3441: STR
3442: PPUSH
3443: LD_INT 1
3445: PPUSH
3446: CALL 5676 0 2
3450: ST_TO_ADDR
// if veh > 0 then
3451: LD_VAR 0 5
3455: PUSH
3456: LD_INT 0
3458: GREATER
3459: IFFALSE 3481
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3461: LD_EXP 1
3465: PPUSH
3466: LD_VAR 0 5
3470: PUSH
3471: LD_INT 1
3473: ARRAY
3474: PPUSH
3475: CALL_OW 52
// end else
3479: GO 3496
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_INT 4
3488: PPUSH
3489: LD_INT 0
3491: PPUSH
3492: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3496: LD_ADDR_VAR 0 5
3500: PUSH
3501: LD_INT 4
3503: PPUSH
3504: LD_INT 22
3506: PUSH
3507: LD_INT 1
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 21
3516: PUSH
3517: LD_INT 2
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: LD_INT 58
3526: PUSH
3527: EMPTY
3528: LIST
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: LIST
3534: PPUSH
3535: CALL_OW 70
3539: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3540: LD_ADDR_EXP 4
3544: PUSH
3545: LD_EXP 41
3549: PUSH
3550: LD_STRING Bobby
3552: STR
3553: PPUSH
3554: LD_INT 1
3556: PPUSH
3557: CALL 5676 0 2
3561: ST_TO_ADDR
// if veh > 0 then
3562: LD_VAR 0 5
3566: PUSH
3567: LD_INT 0
3569: GREATER
3570: IFFALSE 3592
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3572: LD_EXP 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PUSH
3582: LD_INT 1
3584: ARRAY
3585: PPUSH
3586: CALL_OW 52
// end else
3590: GO 3607
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3592: LD_EXP 4
3596: PPUSH
3597: LD_INT 4
3599: PPUSH
3600: LD_INT 0
3602: PPUSH
3603: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3607: LD_ADDR_VAR 0 5
3611: PUSH
3612: LD_INT 4
3614: PPUSH
3615: LD_INT 22
3617: PUSH
3618: LD_INT 1
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 21
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 58
3637: PUSH
3638: EMPTY
3639: LIST
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: LIST
3645: PPUSH
3646: CALL_OW 70
3650: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3651: LD_ADDR_EXP 5
3655: PUSH
3656: LD_EXP 41
3660: PUSH
3661: LD_STRING Cyrus
3663: STR
3664: PPUSH
3665: LD_INT 1
3667: PPUSH
3668: CALL 5676 0 2
3672: ST_TO_ADDR
// if veh > 0 then
3673: LD_VAR 0 5
3677: PUSH
3678: LD_INT 0
3680: GREATER
3681: IFFALSE 3703
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3683: LD_EXP 5
3687: PPUSH
3688: LD_VAR 0 5
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: PPUSH
3697: CALL_OW 52
// end else
3701: GO 3718
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3703: LD_EXP 5
3707: PPUSH
3708: LD_INT 4
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3718: LD_ADDR_VAR 0 5
3722: PUSH
3723: LD_INT 4
3725: PPUSH
3726: LD_INT 22
3728: PUSH
3729: LD_INT 1
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PUSH
3736: LD_INT 21
3738: PUSH
3739: LD_INT 2
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 58
3748: PUSH
3749: EMPTY
3750: LIST
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: LIST
3756: PPUSH
3757: CALL_OW 70
3761: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3762: LD_ADDR_EXP 6
3766: PUSH
3767: LD_EXP 41
3771: PUSH
3772: LD_STRING Lisa
3774: STR
3775: PPUSH
3776: LD_INT 1
3778: PPUSH
3779: CALL 5676 0 2
3783: ST_TO_ADDR
// if veh > 0 then
3784: LD_VAR 0 5
3788: PUSH
3789: LD_INT 0
3791: GREATER
3792: IFFALSE 3814
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3794: LD_EXP 6
3798: PPUSH
3799: LD_VAR 0 5
3803: PUSH
3804: LD_INT 1
3806: ARRAY
3807: PPUSH
3808: CALL_OW 52
// end else
3812: GO 3829
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3814: LD_EXP 6
3818: PPUSH
3819: LD_INT 4
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3829: LD_ADDR_VAR 0 5
3833: PUSH
3834: LD_INT 4
3836: PPUSH
3837: LD_INT 22
3839: PUSH
3840: LD_INT 1
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 21
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PUSH
3857: LD_INT 58
3859: PUSH
3860: EMPTY
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 70
3872: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3873: LD_ADDR_EXP 7
3877: PUSH
3878: LD_EXP 41
3882: PUSH
3883: LD_STRING Frank
3885: STR
3886: PPUSH
3887: LD_INT 1
3889: PPUSH
3890: CALL 5676 0 2
3894: ST_TO_ADDR
// if veh > 0 then
3895: LD_VAR 0 5
3899: PUSH
3900: LD_INT 0
3902: GREATER
3903: IFFALSE 3925
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3905: LD_EXP 7
3909: PPUSH
3910: LD_VAR 0 5
3914: PUSH
3915: LD_INT 1
3917: ARRAY
3918: PPUSH
3919: CALL_OW 52
// end else
3923: GO 3940
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3925: LD_EXP 7
3929: PPUSH
3930: LD_INT 4
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3940: LD_ADDR_VAR 0 5
3944: PUSH
3945: LD_INT 4
3947: PPUSH
3948: LD_INT 22
3950: PUSH
3951: LD_INT 1
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 21
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 58
3970: PUSH
3971: EMPTY
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 70
3983: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3984: LD_ADDR_EXP 8
3988: PUSH
3989: LD_EXP 41
3993: PUSH
3994: LD_STRING Gladstone
3996: STR
3997: PPUSH
3998: LD_INT 1
4000: PPUSH
4001: CALL 5676 0 2
4005: ST_TO_ADDR
// if veh > 0 then
4006: LD_VAR 0 5
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4036
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4016: LD_EXP 8
4020: PPUSH
4021: LD_VAR 0 5
4025: PUSH
4026: LD_INT 1
4028: ARRAY
4029: PPUSH
4030: CALL_OW 52
// end else
4034: GO 4051
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4036: LD_EXP 8
4040: PPUSH
4041: LD_INT 4
4043: PPUSH
4044: LD_INT 0
4046: PPUSH
4047: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_INT 4
4058: PPUSH
4059: LD_INT 22
4061: PUSH
4062: LD_INT 1
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 21
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 58
4081: PUSH
4082: EMPTY
4083: LIST
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: LIST
4089: PPUSH
4090: CALL_OW 70
4094: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4095: LD_ADDR_EXP 9
4099: PUSH
4100: LD_EXP 41
4104: PUSH
4105: LD_STRING Kikuchi
4107: STR
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL 5676 0 2
4116: ST_TO_ADDR
// if veh > 0 then
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 0
4124: GREATER
4125: IFFALSE 4147
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4127: LD_EXP 9
4131: PPUSH
4132: LD_VAR 0 5
4136: PUSH
4137: LD_INT 1
4139: ARRAY
4140: PPUSH
4141: CALL_OW 52
// end else
4145: GO 4162
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4147: LD_EXP 9
4151: PPUSH
4152: LD_INT 4
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4162: LD_ADDR_VAR 0 3
4166: PUSH
4167: LD_STRING 07c_others
4169: PPUSH
4170: CALL_OW 31
4174: ST_TO_ADDR
// for i in other do
4175: LD_ADDR_VAR 0 2
4179: PUSH
4180: LD_VAR 0 3
4184: PUSH
4185: FOR_IN
4186: IFFALSE 4279
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: LD_INT 4
4195: PPUSH
4196: LD_INT 22
4198: PUSH
4199: LD_INT 1
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 21
4208: PUSH
4209: LD_INT 2
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: LD_INT 58
4218: PUSH
4219: EMPTY
4220: LIST
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 70
4231: ST_TO_ADDR
// if veh > 0 then
4232: LD_VAR 0 5
4236: PUSH
4237: LD_INT 0
4239: GREATER
4240: IFFALSE 4262
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4242: LD_VAR 0 2
4246: PPUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: PPUSH
4256: CALL_OW 52
// end else
4260: GO 4277
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4262: LD_VAR 0 2
4266: PPUSH
4267: LD_INT 4
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ; end ;
4277: GO 4185
4279: POP
4280: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4281: LD_INT 4
4283: PPUSH
4284: LD_INT 22
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: PPUSH
4297: CALL_OW 70
4301: PPUSH
4302: LD_INT 53
4304: PPUSH
4305: LD_INT 19
4307: PPUSH
4308: CALL_OW 111
// end ;
4312: LD_VAR 0 1
4316: RET
// export function PrepareSikorsky ; begin
4317: LD_INT 0
4319: PPUSH
// uc_side = 4 ;
4320: LD_ADDR_OWVAR 20
4324: PUSH
4325: LD_INT 4
4327: ST_TO_ADDR
// uc_nation = 1 ;
4328: LD_ADDR_OWVAR 21
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4336: LD_ADDR_EXP 15
4340: PUSH
4341: LD_STRING Sikorski
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL 5676 0 2
4351: ST_TO_ADDR
// vc_engine = 1 ;
4352: LD_ADDR_OWVAR 39
4356: PUSH
4357: LD_INT 1
4359: ST_TO_ADDR
// vc_control = 1 ;
4360: LD_ADDR_OWVAR 38
4364: PUSH
4365: LD_INT 1
4367: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4368: LD_ADDR_OWVAR 40
4372: PUSH
4373: LD_INT 5
4375: PUSH
4376: LD_INT 3
4378: PUSH
4379: LD_INT 4
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: PUSH
4387: LD_OWVAR 67
4391: ARRAY
4392: ST_TO_ADDR
// vc_chassis = 4 ;
4393: LD_ADDR_OWVAR 37
4397: PUSH
4398: LD_INT 4
4400: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4401: LD_ADDR_EXP 16
4405: PUSH
4406: CALL_OW 45
4410: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4411: LD_EXP 16
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4426: LD_EXP 15
4430: PPUSH
4431: LD_EXP 16
4435: PPUSH
4436: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4440: LD_EXP 16
4444: PPUSH
4445: LD_INT 5
4447: PPUSH
4448: CALL_OW 113
// end ;
4452: LD_VAR 0 1
4456: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4463: LD_ADDR_VAR 0 2
4467: PUSH
4468: DOUBLE
4469: LD_INT 1
4471: DEC
4472: ST_TO_ADDR
4473: LD_INT 8
4475: PUSH
4476: LD_INT 7
4478: PUSH
4479: LD_INT 7
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: LD_OWVAR 67
4491: ARRAY
4492: PUSH
4493: FOR_TO
4494: IFFALSE 4591
// begin uc_side = 4 ;
4496: LD_ADDR_OWVAR 20
4500: PUSH
4501: LD_INT 4
4503: ST_TO_ADDR
// uc_nation = 1 ;
4504: LD_ADDR_OWVAR 21
4508: PUSH
4509: LD_INT 1
4511: ST_TO_ADDR
// hc_name =  ;
4512: LD_ADDR_OWVAR 26
4516: PUSH
4517: LD_STRING 
4519: ST_TO_ADDR
// hc_gallery =  ;
4520: LD_ADDR_OWVAR 33
4524: PUSH
4525: LD_STRING 
4527: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4528: LD_INT 0
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 5
4536: PPUSH
4537: LD_INT 8
4539: PPUSH
4540: CALL_OW 12
4544: PPUSH
4545: CALL_OW 380
// un = CreateHuman ;
4549: LD_ADDR_VAR 0 3
4553: PUSH
4554: CALL_OW 44
4558: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4559: LD_VAR 0 3
4563: PPUSH
4564: LD_INT 9
4566: PPUSH
4567: LD_INT 0
4569: PPUSH
4570: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4574: LD_VAR 0 3
4578: PPUSH
4579: LD_INT 53
4581: PPUSH
4582: LD_INT 23
4584: PPUSH
4585: CALL_OW 111
// end ;
4589: GO 4493
4591: POP
4592: POP
// for i = 1 to 3 do
4593: LD_ADDR_VAR 0 2
4597: PUSH
4598: DOUBLE
4599: LD_INT 1
4601: DEC
4602: ST_TO_ADDR
4603: LD_INT 3
4605: PUSH
4606: FOR_TO
4607: IFFALSE 4704
// begin uc_side = 4 ;
4609: LD_ADDR_OWVAR 20
4613: PUSH
4614: LD_INT 4
4616: ST_TO_ADDR
// uc_nation = 1 ;
4617: LD_ADDR_OWVAR 21
4621: PUSH
4622: LD_INT 1
4624: ST_TO_ADDR
// hc_name =  ;
4625: LD_ADDR_OWVAR 26
4629: PUSH
4630: LD_STRING 
4632: ST_TO_ADDR
// hc_gallery =  ;
4633: LD_ADDR_OWVAR 33
4637: PUSH
4638: LD_STRING 
4640: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4641: LD_INT 0
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 5
4649: PPUSH
4650: LD_INT 8
4652: PPUSH
4653: CALL_OW 12
4657: PPUSH
4658: CALL_OW 380
// un = CreateHuman ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: CALL_OW 44
4671: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4672: LD_VAR 0 3
4676: PPUSH
4677: LD_INT 9
4679: PPUSH
4680: LD_INT 0
4682: PPUSH
4683: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4687: LD_VAR 0 3
4691: PPUSH
4692: LD_INT 53
4694: PPUSH
4695: LD_INT 23
4697: PPUSH
4698: CALL_OW 111
// end ;
4702: GO 4606
4704: POP
4705: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4706: LD_ADDR_VAR 0 2
4710: PUSH
4711: DOUBLE
4712: LD_INT 1
4714: DEC
4715: ST_TO_ADDR
4716: LD_INT 9
4718: PUSH
4719: LD_INT 8
4721: PUSH
4722: LD_INT 7
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: LIST
4729: PUSH
4730: LD_OWVAR 67
4734: ARRAY
4735: PUSH
4736: FOR_TO
4737: IFFALSE 4933
// begin uc_side = 4 ;
4739: LD_ADDR_OWVAR 20
4743: PUSH
4744: LD_INT 4
4746: ST_TO_ADDR
// uc_nation = 1 ;
4747: LD_ADDR_OWVAR 21
4751: PUSH
4752: LD_INT 1
4754: ST_TO_ADDR
// vc_engine = 1 ;
4755: LD_ADDR_OWVAR 39
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// vc_control = 1 ;
4763: LD_ADDR_OWVAR 38
4767: PUSH
4768: LD_INT 1
4770: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4771: LD_ADDR_OWVAR 40
4775: PUSH
4776: LD_INT 3
4778: PUSH
4779: LD_INT 4
4781: PUSH
4782: LD_INT 5
4784: PUSH
4785: LD_INT 6
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_INT 4
4799: PPUSH
4800: CALL_OW 12
4804: ARRAY
4805: ST_TO_ADDR
// vc_chassis = 4 ;
4806: LD_ADDR_OWVAR 37
4810: PUSH
4811: LD_INT 4
4813: ST_TO_ADDR
// veh = CreateVehicle ;
4814: LD_ADDR_VAR 0 4
4818: PUSH
4819: CALL_OW 45
4823: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4824: LD_VAR 0 4
4828: PPUSH
4829: LD_INT 9
4831: PPUSH
4832: LD_INT 0
4834: PPUSH
4835: CALL_OW 49
// hc_name =  ;
4839: LD_ADDR_OWVAR 26
4843: PUSH
4844: LD_STRING 
4846: ST_TO_ADDR
// hc_gallery =  ;
4847: LD_ADDR_OWVAR 33
4851: PUSH
4852: LD_STRING 
4854: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4855: LD_INT 0
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: LD_INT 5
4863: PPUSH
4864: LD_INT 8
4866: PPUSH
4867: CALL_OW 12
4871: PPUSH
4872: CALL_OW 380
// un = CreateHuman ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: CALL_OW 44
4885: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_VAR 0 4
4895: PPUSH
4896: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4900: LD_VAR 0 4
4904: PUSH
4905: LD_VAR 0 3
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PPUSH
4914: LD_INT 53
4916: PPUSH
4917: LD_INT 23
4919: PPUSH
4920: CALL_OW 111
// wait ( 0 0$5 ) ;
4924: LD_INT 175
4926: PPUSH
4927: CALL_OW 67
// end ;
4931: GO 4736
4933: POP
4934: POP
// end ; end_of_file
4935: LD_VAR 0 1
4939: RET
// export function PrepareRussianCommander ; begin
4940: LD_INT 0
4942: PPUSH
// uc_side = 3 ;
4943: LD_ADDR_OWVAR 20
4947: PUSH
4948: LD_INT 3
4950: ST_TO_ADDR
// uc_nation = 3 ;
4951: LD_ADDR_OWVAR 21
4955: PUSH
4956: LD_INT 3
4958: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4959: LD_ADDR_EXP 23
4963: PUSH
4964: LD_STRING Borodin
4966: PPUSH
4967: CALL_OW 25
4971: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
4972: LD_EXP 23
4976: PPUSH
4977: LD_INT 3
4979: PPUSH
4980: LD_INT 0
4982: PPUSH
4983: CALL_OW 49
// end ;
4987: LD_VAR 0 1
4991: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4992: LD_INT 0
4994: PPUSH
4995: PPUSH
4996: PPUSH
4997: PPUSH
// for i = 1 to 10 do
4998: LD_ADDR_VAR 0 2
5002: PUSH
5003: DOUBLE
5004: LD_INT 1
5006: DEC
5007: ST_TO_ADDR
5008: LD_INT 10
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5086
// begin uc_side = 6 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 6
5021: ST_TO_ADDR
// uc_nation = 3 ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 3
5029: ST_TO_ADDR
// hc_gallery =  ;
5030: LD_ADDR_OWVAR 33
5034: PUSH
5035: LD_STRING 
5037: ST_TO_ADDR
// hc_name =  ;
5038: LD_ADDR_OWVAR 26
5042: PUSH
5043: LD_STRING 
5045: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5046: LD_INT 0
5048: PPUSH
5049: LD_INT 1
5051: PPUSH
5052: LD_INT 3
5054: PPUSH
5055: CALL_OW 380
// un = CreateHuman ;
5059: LD_ADDR_VAR 0 3
5063: PUSH
5064: CALL_OW 44
5068: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5069: LD_VAR 0 3
5073: PPUSH
5074: LD_INT 1
5076: PPUSH
5077: LD_INT 0
5079: PPUSH
5080: CALL_OW 49
// end ;
5084: GO 5011
5086: POP
5087: POP
// for i = 1 to 3 do
5088: LD_ADDR_VAR 0 2
5092: PUSH
5093: DOUBLE
5094: LD_INT 1
5096: DEC
5097: ST_TO_ADDR
5098: LD_INT 3
5100: PUSH
5101: FOR_TO
5102: IFFALSE 5251
// begin uc_side = 6 ;
5104: LD_ADDR_OWVAR 20
5108: PUSH
5109: LD_INT 6
5111: ST_TO_ADDR
// uc_nation = 3 ;
5112: LD_ADDR_OWVAR 21
5116: PUSH
5117: LD_INT 3
5119: ST_TO_ADDR
// vc_engine = 1 ;
5120: LD_ADDR_OWVAR 39
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// vc_control = 1 ;
5128: LD_ADDR_OWVAR 38
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5136: LD_ADDR_OWVAR 40
5140: PUSH
5141: LD_INT 43
5143: PUSH
5144: LD_INT 44
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 1
5153: PPUSH
5154: LD_INT 2
5156: PPUSH
5157: CALL_OW 12
5161: ARRAY
5162: ST_TO_ADDR
// vc_chassis = 22 ;
5163: LD_ADDR_OWVAR 37
5167: PUSH
5168: LD_INT 22
5170: ST_TO_ADDR
// veh = CreateVehicle ;
5171: LD_ADDR_VAR 0 4
5175: PUSH
5176: CALL_OW 45
5180: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5181: LD_VAR 0 4
5185: PPUSH
5186: LD_INT 2
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// hc_gallery =  ;
5196: LD_ADDR_OWVAR 33
5200: PUSH
5201: LD_STRING 
5203: ST_TO_ADDR
// hc_name =  ;
5204: LD_ADDR_OWVAR 26
5208: PUSH
5209: LD_STRING 
5211: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5212: LD_INT 0
5214: PPUSH
5215: LD_INT 3
5217: PPUSH
5218: LD_INT 4
5220: PPUSH
5221: CALL_OW 380
// un = CreateHuman ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: CALL_OW 44
5234: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5235: LD_VAR 0 3
5239: PPUSH
5240: LD_VAR 0 4
5244: PPUSH
5245: CALL_OW 52
// end ;
5249: GO 5101
5251: POP
5252: POP
// end ;
5253: LD_VAR 0 1
5257: RET
// export function PrepareRussians ; var i , un ; begin
5258: LD_INT 0
5260: PPUSH
5261: PPUSH
5262: PPUSH
// for i = 1 to 14 do
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: DOUBLE
5269: LD_INT 1
5271: DEC
5272: ST_TO_ADDR
5273: LD_INT 14
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5363
// begin uc_side = 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation = 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// hc_gallery =  ;
5295: LD_ADDR_OWVAR 33
5299: PUSH
5300: LD_STRING 
5302: ST_TO_ADDR
// hc_name =  ;
5303: LD_ADDR_OWVAR 26
5307: PUSH
5308: LD_STRING 
5310: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5311: LD_INT 0
5313: PPUSH
5314: LD_INT 1
5316: PPUSH
5317: LD_EXP 24
5321: PPUSH
5322: LD_EXP 25
5326: PPUSH
5327: CALL_OW 12
5331: PPUSH
5332: CALL_OW 380
// un = CreateHuman ;
5336: LD_ADDR_VAR 0 3
5340: PUSH
5341: CALL_OW 44
5345: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5346: LD_VAR 0 3
5350: PPUSH
5351: LD_INT 3
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL_OW 49
// end ;
5361: GO 5276
5363: POP
5364: POP
// for i = 1 to 6 do
5365: LD_ADDR_VAR 0 2
5369: PUSH
5370: DOUBLE
5371: LD_INT 1
5373: DEC
5374: ST_TO_ADDR
5375: LD_INT 6
5377: PUSH
5378: FOR_TO
5379: IFFALSE 5465
// begin uc_side = 3 ;
5381: LD_ADDR_OWVAR 20
5385: PUSH
5386: LD_INT 3
5388: ST_TO_ADDR
// uc_nation = 3 ;
5389: LD_ADDR_OWVAR 21
5393: PUSH
5394: LD_INT 3
5396: ST_TO_ADDR
// hc_gallery =  ;
5397: LD_ADDR_OWVAR 33
5401: PUSH
5402: LD_STRING 
5404: ST_TO_ADDR
// hc_name =  ;
5405: LD_ADDR_OWVAR 26
5409: PUSH
5410: LD_STRING 
5412: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5413: LD_INT 0
5415: PPUSH
5416: LD_INT 2
5418: PPUSH
5419: LD_EXP 24
5423: PPUSH
5424: LD_EXP 25
5428: PPUSH
5429: CALL_OW 12
5433: PPUSH
5434: CALL_OW 380
// un = CreateHuman ;
5438: LD_ADDR_VAR 0 3
5442: PUSH
5443: CALL_OW 44
5447: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5448: LD_VAR 0 3
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: CALL_OW 49
// end ;
5463: GO 5378
5465: POP
5466: POP
// for i = 1 to 6 do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: DOUBLE
5473: LD_INT 1
5475: DEC
5476: ST_TO_ADDR
5477: LD_INT 6
5479: PUSH
5480: FOR_TO
5481: IFFALSE 5567
// begin uc_side = 3 ;
5483: LD_ADDR_OWVAR 20
5487: PUSH
5488: LD_INT 3
5490: ST_TO_ADDR
// uc_nation = 3 ;
5491: LD_ADDR_OWVAR 21
5495: PUSH
5496: LD_INT 3
5498: ST_TO_ADDR
// hc_gallery =  ;
5499: LD_ADDR_OWVAR 33
5503: PUSH
5504: LD_STRING 
5506: ST_TO_ADDR
// hc_name =  ;
5507: LD_ADDR_OWVAR 26
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5515: LD_INT 0
5517: PPUSH
5518: LD_INT 3
5520: PPUSH
5521: LD_EXP 24
5525: PPUSH
5526: LD_EXP 25
5530: PPUSH
5531: CALL_OW 12
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 3
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5550: LD_VAR 0 3
5554: PPUSH
5555: LD_INT 3
5557: PPUSH
5558: LD_INT 0
5560: PPUSH
5561: CALL_OW 49
// end ;
5565: GO 5480
5567: POP
5568: POP
// for i = 1 to 4 do
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_INT 4
5581: PUSH
5582: FOR_TO
5583: IFFALSE 5669
// begin uc_side = 3 ;
5585: LD_ADDR_OWVAR 20
5589: PUSH
5590: LD_INT 3
5592: ST_TO_ADDR
// uc_nation = 3 ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_INT 3
5600: ST_TO_ADDR
// hc_gallery =  ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING 
5608: ST_TO_ADDR
// hc_name =  ;
5609: LD_ADDR_OWVAR 26
5613: PUSH
5614: LD_STRING 
5616: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5617: LD_INT 0
5619: PPUSH
5620: LD_INT 4
5622: PPUSH
5623: LD_EXP 24
5627: PPUSH
5628: LD_EXP 25
5632: PPUSH
5633: CALL_OW 12
5637: PPUSH
5638: CALL_OW 380
// un = CreateHuman ;
5642: LD_ADDR_VAR 0 3
5646: PUSH
5647: CALL_OW 44
5651: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5652: LD_VAR 0 3
5656: PPUSH
5657: LD_INT 3
5659: PPUSH
5660: LD_INT 0
5662: PPUSH
5663: CALL_OW 49
// end ;
5667: GO 5582
5669: POP
5670: POP
// end ; end_of_file
5671: LD_VAR 0 1
5675: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5676: LD_INT 0
5678: PPUSH
5679: PPUSH
// if exist_mode then
5680: LD_VAR 0 2
5684: IFFALSE 5703
// unit := CreateCharacter ( ident ) else
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 34
5700: ST_TO_ADDR
5701: GO 5718
// unit := NewCharacter ( ident ) ;
5703: LD_ADDR_VAR 0 4
5707: PUSH
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 25
5717: ST_TO_ADDR
// result := unit ;
5718: LD_ADDR_VAR 0 3
5722: PUSH
5723: LD_VAR 0 4
5727: ST_TO_ADDR
// end ;
5728: LD_VAR 0 3
5732: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5733: LD_INT 0
5735: PPUSH
5736: PPUSH
5737: PPUSH
// rnd = rand ( 1 , characters ) ;
5738: LD_ADDR_VAR 0 6
5742: PUSH
5743: LD_INT 1
5745: PPUSH
5746: LD_VAR 0 1
5750: PPUSH
5751: CALL_OW 12
5755: ST_TO_ADDR
// for i = 1 to characters do
5756: LD_ADDR_VAR 0 5
5760: PUSH
5761: DOUBLE
5762: LD_INT 1
5764: DEC
5765: ST_TO_ADDR
5766: LD_VAR 0 1
5770: PUSH
5771: FOR_TO
5772: IFFALSE 5882
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5774: LD_VAR 0 5
5778: PUSH
5779: LD_VAR 0 6
5783: EQUAL
5784: PUSH
5785: LD_VAR 0 1
5789: PUSH
5790: LD_VAR 0 5
5794: ARRAY
5795: PPUSH
5796: CALL_OW 258
5800: PUSH
5801: LD_INT 1
5803: EQUAL
5804: AND
5805: IFFALSE 5827
// Say ( characters [ i ] , dialogMID ) ;
5807: LD_VAR 0 1
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 2
5822: PPUSH
5823: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5827: LD_VAR 0 5
5831: PUSH
5832: LD_VAR 0 6
5836: EQUAL
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: LD_VAR 0 5
5847: ARRAY
5848: PPUSH
5849: CALL_OW 258
5853: PUSH
5854: LD_INT 2
5856: EQUAL
5857: AND
5858: IFFALSE 5880
// Say ( characters [ i ] , dialogFID ) ;
5860: LD_VAR 0 1
5864: PUSH
5865: LD_VAR 0 5
5869: ARRAY
5870: PPUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: CALL_OW 88
// end ;
5880: GO 5771
5882: POP
5883: POP
// end ;
5884: LD_VAR 0 4
5888: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5889: LD_INT 0
5891: PPUSH
5892: PPUSH
5893: PPUSH
// uc_side := GetSide ( b ) ;
5894: LD_ADDR_OWVAR 20
5898: PUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL_OW 255
5908: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5909: LD_ADDR_OWVAR 21
5913: PUSH
5914: LD_VAR 0 2
5918: PPUSH
5919: CALL_OW 248
5923: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5924: LD_INT 0
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: LD_VAR 0 1
5934: PPUSH
5935: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5939: LD_ADDR_VAR 0 5
5943: PUSH
5944: LD_VAR 0 2
5948: PPUSH
5949: CALL_OW 254
5953: PUSH
5954: LD_INT 3
5956: MINUS
5957: ST_TO_ADDR
// if dir < 0 then
5958: LD_VAR 0 5
5962: PUSH
5963: LD_INT 0
5965: LESS
5966: IFFALSE 5982
// dir := 6 + dir ;
5968: LD_ADDR_VAR 0 5
5972: PUSH
5973: LD_INT 6
5975: PUSH
5976: LD_VAR 0 5
5980: PLUS
5981: ST_TO_ADDR
// un := CreateHuman ;
5982: LD_ADDR_VAR 0 4
5986: PUSH
5987: CALL_OW 44
5991: ST_TO_ADDR
// SetDir ( un , dir ) ;
5992: LD_VAR 0 4
5996: PPUSH
5997: LD_VAR 0 5
6001: PPUSH
6002: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6006: LD_VAR 0 4
6010: PPUSH
6011: LD_VAR 0 2
6015: PPUSH
6016: CALL_OW 52
// end ;
6020: LD_VAR 0 3
6024: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6025: LD_INT 0
6027: PPUSH
6028: PPUSH
6029: PPUSH
6030: PPUSH
// for i = 1 to count do
6031: LD_ADDR_VAR 0 8
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_VAR 0 6
6045: PUSH
6046: FOR_TO
6047: IFFALSE 6128
// begin uc_side = side ;
6049: LD_ADDR_OWVAR 20
6053: PUSH
6054: LD_VAR 0 1
6058: ST_TO_ADDR
// uc_nation = nation ;
6059: LD_ADDR_OWVAR 21
6063: PUSH
6064: LD_VAR 0 2
6068: ST_TO_ADDR
// hc_gallery =  ;
6069: LD_ADDR_OWVAR 33
6073: PUSH
6074: LD_STRING 
6076: ST_TO_ADDR
// hc_name =  ;
6077: LD_ADDR_OWVAR 26
6081: PUSH
6082: LD_STRING 
6084: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6085: LD_INT 0
6087: PPUSH
6088: LD_VAR 0 5
6092: PPUSH
6093: LD_VAR 0 4
6097: PPUSH
6098: CALL_OW 380
// un = CreateHuman ;
6102: LD_ADDR_VAR 0 10
6106: PUSH
6107: CALL_OW 44
6111: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6112: LD_VAR 0 10
6116: PPUSH
6117: LD_VAR 0 3
6121: PPUSH
6122: CALL_OW 52
// end ;
6126: GO 6046
6128: POP
6129: POP
// end ;
6130: LD_VAR 0 7
6134: RET
// export function PrepareDifficulty ; begin
6135: LD_INT 0
6137: PPUSH
// if Difficulty = 1 then
6138: LD_OWVAR 67
6142: PUSH
6143: LD_INT 1
6145: EQUAL
6146: IFFALSE 6164
// begin RuSolMinLevel = 4 ;
6148: LD_ADDR_EXP 24
6152: PUSH
6153: LD_INT 4
6155: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6156: LD_ADDR_EXP 25
6160: PUSH
6161: LD_INT 6
6163: ST_TO_ADDR
// end ; if Difficulty = 2 then
6164: LD_OWVAR 67
6168: PUSH
6169: LD_INT 2
6171: EQUAL
6172: IFFALSE 6242
// begin RuSolMinLevel = 5 ;
6174: LD_ADDR_EXP 24
6178: PUSH
6179: LD_INT 5
6181: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6182: LD_ADDR_EXP 25
6186: PUSH
6187: LD_INT 6
6189: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6190: LD_INT 51
6192: PPUSH
6193: LD_INT 3
6195: PPUSH
6196: LD_INT 1
6198: PPUSH
6199: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6203: LD_INT 57
6205: PPUSH
6206: LD_INT 3
6208: PPUSH
6209: LD_INT 1
6211: PPUSH
6212: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6216: LD_INT 57
6218: PPUSH
6219: LD_INT 6
6221: PPUSH
6222: LD_INT 2
6224: PPUSH
6225: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6229: LD_INT 51
6231: PPUSH
6232: LD_INT 6
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: CALL_OW 322
// end ; if Difficulty = 3 then
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 3
6249: EQUAL
6250: IFFALSE 6333
// begin RuSolMinLevel = 5 ;
6252: LD_ADDR_EXP 24
6256: PUSH
6257: LD_INT 5
6259: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
6260: LD_ADDR_EXP 25
6264: PUSH
6265: LD_INT 7
6267: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6268: LD_INT 57
6270: PPUSH
6271: LD_INT 3
6273: PPUSH
6274: LD_INT 1
6276: PPUSH
6277: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6281: LD_INT 51
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: LD_INT 1
6289: PPUSH
6290: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6294: LD_INT 52
6296: PPUSH
6297: LD_INT 3
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6307: LD_INT 57
6309: PPUSH
6310: LD_INT 6
6312: PPUSH
6313: LD_INT 2
6315: PPUSH
6316: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6320: LD_INT 52
6322: PPUSH
6323: LD_INT 6
6325: PPUSH
6326: LD_INT 2
6328: PPUSH
6329: CALL_OW 322
// end ; end ;
6333: LD_VAR 0 1
6337: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_INT 22
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 25
6361: PUSH
6362: LD_INT 2
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PPUSH
6373: CALL_OW 69
6377: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6378: LD_ADDR_VAR 0 4
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 75
6388: PUSH
6389: LD_INT 79
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 113
6406: PUSH
6407: LD_INT 94
6409: PUSH
6410: LD_INT 4
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 29
6421: PUSH
6422: LD_INT 106
6424: PUSH
6425: LD_INT 97
6427: PUSH
6428: LD_INT 3
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 26
6439: PUSH
6440: LD_INT 93
6442: PUSH
6443: LD_INT 97
6445: PUSH
6446: LD_INT 5
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 2
6457: PUSH
6458: LD_INT 100
6460: PUSH
6461: LD_INT 89
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 17
6475: PUSH
6476: LD_INT 96
6478: PUSH
6479: LD_INT 89
6481: PUSH
6482: LD_INT 1
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 32
6493: PUSH
6494: LD_INT 78
6496: PUSH
6497: LD_INT 94
6499: PUSH
6500: LD_INT 1
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 95
6514: PUSH
6515: LD_INT 82
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 104
6532: PUSH
6533: LD_INT 85
6535: PUSH
6536: LD_INT 2
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 81
6550: PUSH
6551: LD_INT 78
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 33
6565: PUSH
6566: LD_INT 109
6568: PUSH
6569: LD_INT 90
6571: PUSH
6572: LD_INT 3
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 33
6583: PUSH
6584: LD_INT 88
6586: PUSH
6587: LD_INT 79
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 33
6601: PUSH
6602: LD_INT 76
6604: PUSH
6605: LD_INT 87
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 26
6619: PUSH
6620: LD_INT 96
6622: PUSH
6623: LD_INT 97
6625: PUSH
6626: LD_INT 5
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 26
6637: PUSH
6638: LD_INT 85
6640: PUSH
6641: LD_INT 84
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 6
6655: PUSH
6656: LD_INT 88
6658: PUSH
6659: LD_INT 95
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 19
6673: PUSH
6674: LD_INT 103
6676: PUSH
6677: LD_INT 89
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 16
6691: PUSH
6692: LD_INT 97
6694: PUSH
6695: LD_INT 86
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 24
6709: PUSH
6710: LD_INT 100
6712: PUSH
6713: LD_INT 85
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: ST_TO_ADDR
// for i := 1 to buildingsTab do
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: DOUBLE
6752: LD_INT 1
6754: DEC
6755: ST_TO_ADDR
6756: LD_VAR 0 4
6760: PUSH
6761: FOR_TO
6762: IFFALSE 6835
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 2
6778: ARRAY
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PPUSH
6784: LD_VAR 0 4
6788: PUSH
6789: LD_VAR 0 2
6793: ARRAY
6794: PUSH
6795: LD_INT 2
6797: ARRAY
6798: PPUSH
6799: LD_VAR 0 4
6803: PUSH
6804: LD_VAR 0 2
6808: ARRAY
6809: PUSH
6810: LD_INT 3
6812: ARRAY
6813: PPUSH
6814: LD_VAR 0 4
6818: PUSH
6819: LD_VAR 0 2
6823: ARRAY
6824: PUSH
6825: LD_INT 4
6827: ARRAY
6828: PPUSH
6829: CALL_OW 205
6833: GO 6761
6835: POP
6836: POP
// end ;
6837: LD_VAR 0 1
6841: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6842: LD_INT 0
6844: PPUSH
6845: PPUSH
// for i in charactersList do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: LD_VAR 0 1
6855: PUSH
6856: FOR_IN
6857: IFFALSE 6886
// begin if IsOk ( i ) then
6859: LD_VAR 0 4
6863: PPUSH
6864: CALL_OW 302
6868: IFFALSE 6884
// SaveCharacters ( i , ident ) ;
6870: LD_VAR 0 4
6874: PPUSH
6875: LD_VAR 0 2
6879: PPUSH
6880: CALL_OW 38
// end ;
6884: GO 6856
6886: POP
6887: POP
// end ;
6888: LD_VAR 0 3
6892: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6893: LD_INT 0
6895: PPUSH
6896: PPUSH
6897: PPUSH
6898: PPUSH
// for i = 1 to 72 do
6899: LD_ADDR_VAR 0 5
6903: PUSH
6904: DOUBLE
6905: LD_INT 1
6907: DEC
6908: ST_TO_ADDR
6909: LD_INT 72
6911: PUSH
6912: FOR_TO
6913: IFFALSE 6971
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6915: LD_VAR 0 5
6919: PPUSH
6920: LD_VAR 0 1
6924: PPUSH
6925: CALL_OW 321
6929: PUSH
6930: LD_INT 1
6932: EQUAL
6933: PUSH
6934: LD_VAR 0 5
6938: PPUSH
6939: LD_VAR 0 3
6943: PPUSH
6944: CALL_OW 482
6948: PUSH
6949: LD_INT 1
6951: EQUAL
6952: AND
6953: IFFALSE 6969
// AddComResearch ( lab , i ) ;
6955: LD_VAR 0 2
6959: PPUSH
6960: LD_VAR 0 5
6964: PPUSH
6965: CALL_OW 184
6969: GO 6912
6971: POP
6972: POP
// end ;
6973: LD_VAR 0 4
6977: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6978: LD_INT 0
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6988: LD_ADDR_VAR 0 6
6992: PUSH
6993: LD_INT 22
6995: PUSH
6996: LD_VAR 0 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 25
7007: PUSH
7008: LD_INT 1
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 56
7017: PUSH
7018: EMPTY
7019: LIST
7020: PUSH
7021: LD_INT 24
7023: PUSH
7024: LD_INT 700
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 3
7033: PUSH
7034: LD_INT 60
7036: PUSH
7037: EMPTY
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: PUSH
7056: LD_EXP 23
7060: PUSH
7061: EMPTY
7062: LIST
7063: DIFF
7064: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7065: LD_ADDR_VAR 0 7
7069: PUSH
7070: LD_INT 22
7072: PUSH
7073: LD_VAR 0 1
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: LD_INT 25
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 54
7094: PUSH
7095: EMPTY
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: PPUSH
7103: CALL_OW 69
7107: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7108: LD_ADDR_VAR 0 8
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_VAR 0 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 30
7127: PUSH
7128: LD_INT 32
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 58
7137: PUSH
7138: EMPTY
7139: LIST
7140: PUSH
7141: LD_INT 24
7143: PUSH
7144: LD_INT 251
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 69
7161: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7162: LD_ADDR_VAR 0 10
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_VAR 0 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 2
7181: PUSH
7182: LD_INT 30
7184: PUSH
7185: LD_INT 4
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: LD_INT 30
7194: PUSH
7195: LD_INT 5
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 24
7209: PUSH
7210: LD_INT 251
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: ST_TO_ADDR
// if barrackList > 0 then
7227: LD_VAR 0 10
7231: PUSH
7232: LD_INT 0
7234: GREATER
7235: IFFALSE 7348
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7237: LD_VAR 0 8
7241: PUSH
7242: LD_INT 0
7244: EQUAL
7245: PUSH
7246: LD_INT 24
7248: PPUSH
7249: LD_INT 22
7251: PUSH
7252: LD_INT 1
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 21
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 70
7277: PUSH
7278: LD_INT 0
7280: EQUAL
7281: AND
7282: IFFALSE 7331
// begin for i in soldiers_list do
7284: LD_ADDR_VAR 0 4
7288: PUSH
7289: LD_VAR 0 6
7293: PUSH
7294: FOR_IN
7295: IFFALSE 7327
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_VAR 0 10
7306: PUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_VAR 0 10
7314: PPUSH
7315: CALL_OW 12
7319: ARRAY
7320: PPUSH
7321: CALL_OW 120
7325: GO 7294
7327: POP
7328: POP
// end else
7329: GO 7348
// begin for i in barrackList do
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 10
7340: PUSH
7341: FOR_IN
7342: IFFALSE 7346
// begin end ;
7344: GO 7341
7346: POP
7347: POP
// end ; end ; end ;
7348: LD_VAR 0 3
7352: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
// for i = 1 to infantryCount do
7361: LD_ADDR_VAR 0 8
7365: PUSH
7366: DOUBLE
7367: LD_INT 1
7369: DEC
7370: ST_TO_ADDR
7371: LD_VAR 0 5
7375: PUSH
7376: FOR_TO
7377: IFFALSE 7493
// begin uc_side = side ;
7379: LD_ADDR_OWVAR 20
7383: PUSH
7384: LD_VAR 0 1
7388: ST_TO_ADDR
// uc_nation = nation ;
7389: LD_ADDR_OWVAR 21
7393: PUSH
7394: LD_VAR 0 3
7398: ST_TO_ADDR
// hc_class = 1 ;
7399: LD_ADDR_OWVAR 28
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// hc_name =  ;
7407: LD_ADDR_OWVAR 26
7411: PUSH
7412: LD_STRING 
7414: ST_TO_ADDR
// hc_gallery =  ;
7415: LD_ADDR_OWVAR 33
7419: PUSH
7420: LD_STRING 
7422: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7423: LD_INT 0
7425: PPUSH
7426: LD_INT 1
7428: PPUSH
7429: LD_EXP 24
7433: PPUSH
7434: LD_EXP 25
7438: PPUSH
7439: CALL_OW 12
7443: PPUSH
7444: CALL_OW 380
// un = CreateHuman ;
7448: LD_ADDR_VAR 0 10
7452: PUSH
7453: CALL_OW 44
7457: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7458: LD_VAR 0 10
7462: PPUSH
7463: LD_VAR 0 2
7467: PPUSH
7468: LD_INT 0
7470: PPUSH
7471: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7475: LD_ADDR_EXP 31
7479: PUSH
7480: LD_EXP 31
7484: PUSH
7485: LD_VAR 0 10
7489: ADD
7490: ST_TO_ADDR
// end ;
7491: GO 7376
7493: POP
7494: POP
// for i = 1 to vehCount do
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_VAR 0 6
7509: PUSH
7510: FOR_TO
7511: IFFALSE 7718
// begin uc_side = side ;
7513: LD_ADDR_OWVAR 20
7517: PUSH
7518: LD_VAR 0 1
7522: ST_TO_ADDR
// uc_nation = nation ;
7523: LD_ADDR_OWVAR 21
7527: PUSH
7528: LD_VAR 0 3
7532: ST_TO_ADDR
// vc_Chassis = 22 ;
7533: LD_ADDR_OWVAR 37
7537: PUSH
7538: LD_INT 22
7540: ST_TO_ADDR
// vc_engine = 1 ;
7541: LD_ADDR_OWVAR 39
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// vc_control = 1 ;
7549: LD_ADDR_OWVAR 38
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7557: LD_ADDR_OWVAR 40
7561: PUSH
7562: LD_INT 43
7564: PUSH
7565: LD_INT 44
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 1
7574: PPUSH
7575: LD_INT 2
7577: PPUSH
7578: CALL_OW 12
7582: ARRAY
7583: ST_TO_ADDR
// veh = CreateVehicle ;
7584: LD_ADDR_VAR 0 12
7588: PUSH
7589: CALL_OW 45
7593: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7594: LD_VAR 0 12
7598: PPUSH
7599: LD_VAR 0 2
7603: PPUSH
7604: LD_INT 0
7606: PPUSH
7607: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
7611: LD_ADDR_EXP 31
7615: PUSH
7616: LD_EXP 31
7620: PUSH
7621: LD_VAR 0 12
7625: ADD
7626: ST_TO_ADDR
// hc_class = 3 ;
7627: LD_ADDR_OWVAR 28
7631: PUSH
7632: LD_INT 3
7634: ST_TO_ADDR
// hc_name =  ;
7635: LD_ADDR_OWVAR 26
7639: PUSH
7640: LD_STRING 
7642: ST_TO_ADDR
// hc_gallery =  ;
7643: LD_ADDR_OWVAR 33
7647: PUSH
7648: LD_STRING 
7650: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7651: LD_INT 0
7653: PPUSH
7654: LD_INT 3
7656: PPUSH
7657: LD_EXP 24
7661: PPUSH
7662: LD_EXP 25
7666: PPUSH
7667: CALL_OW 12
7671: PPUSH
7672: CALL_OW 380
// un = CreateHuman ;
7676: LD_ADDR_VAR 0 10
7680: PUSH
7681: CALL_OW 44
7685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7686: LD_VAR 0 10
7690: PPUSH
7691: LD_VAR 0 12
7695: PPUSH
7696: CALL_OW 52
// defenders_list = defenders_list ^ un ;
7700: LD_ADDR_EXP 31
7704: PUSH
7705: LD_EXP 31
7709: PUSH
7710: LD_VAR 0 10
7714: ADD
7715: ST_TO_ADDR
// end ;
7716: GO 7510
7718: POP
7719: POP
// end ;
7720: LD_VAR 0 7
7724: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7725: LD_INT 0
7727: PPUSH
7728: PPUSH
7729: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7730: LD_VAR 0 2
7734: PPUSH
7735: LD_INT 22
7737: PUSH
7738: LD_VAR 0 1
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: PPUSH
7750: CALL_OW 70
7754: PUSH
7755: LD_INT 0
7757: EQUAL
7758: PUSH
7759: LD_EXP 31
7763: PUSH
7764: LD_INT 0
7766: GREATER
7767: AND
7768: IFFALSE 7814
// begin for i in defenders_list do
7770: LD_ADDR_VAR 0 4
7774: PUSH
7775: LD_EXP 31
7779: PUSH
7780: FOR_IN
7781: IFFALSE 7812
// begin ComMoveXY ( i , 65 , 68 ) ;
7783: LD_VAR 0 4
7787: PPUSH
7788: LD_INT 65
7790: PPUSH
7791: LD_INT 68
7793: PPUSH
7794: CALL_OW 111
// SetFuel ( i , 100 ) ;
7798: LD_VAR 0 4
7802: PPUSH
7803: LD_INT 100
7805: PPUSH
7806: CALL_OW 240
// end ;
7810: GO 7780
7812: POP
7813: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7814: LD_VAR 0 2
7818: PPUSH
7819: LD_INT 22
7821: PUSH
7822: LD_VAR 0 1
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: PPUSH
7834: CALL_OW 70
7838: PUSH
7839: LD_INT 0
7841: GREATER
7842: PUSH
7843: LD_EXP 31
7847: PUSH
7848: LD_INT 0
7850: GREATER
7851: AND
7852: IFFALSE 8020
// begin for i in defenders_list do
7854: LD_ADDR_VAR 0 4
7858: PUSH
7859: LD_EXP 31
7863: PUSH
7864: FOR_IN
7865: IFFALSE 7915
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: LD_INT 22
7874: PUSH
7875: LD_VAR 0 1
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PPUSH
7884: CALL_OW 69
7888: PPUSH
7889: LD_VAR 0 4
7893: PPUSH
7894: CALL_OW 74
7898: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7899: LD_VAR 0 4
7903: PPUSH
7904: LD_VAR 0 5
7908: PPUSH
7909: CALL_OW 115
// end ;
7913: GO 7864
7915: POP
7916: POP
// if russianAI = 0 then
7917: LD_EXP 26
7921: PUSH
7922: LD_INT 0
7924: EQUAL
7925: IFFALSE 8020
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7927: LD_ADDR_VAR 0 4
7931: PUSH
7932: LD_INT 22
7934: PUSH
7935: LD_INT 3
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 25
7944: PUSH
7945: LD_INT 1
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PUSH
7961: LD_EXP 23
7965: DIFF
7966: PUSH
7967: FOR_IN
7968: IFFALSE 8018
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: LD_INT 22
7977: PUSH
7978: LD_VAR 0 1
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 69
7991: PPUSH
7992: LD_VAR 0 4
7996: PPUSH
7997: CALL_OW 74
8001: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
8002: LD_VAR 0 4
8006: PPUSH
8007: LD_VAR 0 5
8011: PPUSH
8012: CALL_OW 115
// end ;
8016: GO 7967
8018: POP
8019: POP
// end ; end ; end ;
8020: LD_VAR 0 3
8024: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
8025: LD_INT 0
8027: PPUSH
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
8032: LD_ADDR_VAR 0 6
8036: PUSH
8037: LD_INT 22
8039: PUSH
8040: LD_VAR 0 1
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 2
8051: PUSH
8052: LD_INT 25
8054: PUSH
8055: LD_INT 2
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 25
8064: PUSH
8065: LD_INT 16
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 24
8079: PUSH
8080: LD_INT 1000
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: PPUSH
8092: CALL_OW 69
8096: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8097: LD_ADDR_VAR 0 4
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_VAR 0 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 21
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 3
8126: PUSH
8127: LD_INT 24
8129: PUSH
8130: LD_INT 1000
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: PPUSH
8149: CALL_OW 69
8153: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8154: LD_VAR 0 4
8158: PUSH
8159: LD_INT 0
8161: GREATER
8162: PUSH
8163: LD_VAR 0 6
8167: PUSH
8168: LD_INT 0
8170: GREATER
8171: AND
8172: IFFALSE 8238
// begin for i in engineerOk_list do
8174: LD_ADDR_VAR 0 5
8178: PUSH
8179: LD_VAR 0 6
8183: PUSH
8184: FOR_IN
8185: IFFALSE 8236
// begin for j in buildings_list do
8187: LD_ADDR_VAR 0 7
8191: PUSH
8192: LD_VAR 0 4
8196: PUSH
8197: FOR_IN
8198: IFFALSE 8232
// begin AddComExitBuilding ( i ) ;
8200: LD_VAR 0 5
8204: PPUSH
8205: CALL_OW 182
// wait ( 0 0$1 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8216: LD_VAR 0 5
8220: PPUSH
8221: LD_VAR 0 7
8225: PPUSH
8226: CALL_OW 190
// end ;
8230: GO 8197
8232: POP
8233: POP
// end ;
8234: GO 8184
8236: POP
8237: POP
// end ; if buildings_list = 0 then
8238: LD_VAR 0 4
8242: PUSH
8243: LD_INT 0
8245: EQUAL
8246: IFFALSE 8279
// begin for i in engineerOK_list do
8248: LD_ADDR_VAR 0 5
8252: PUSH
8253: LD_VAR 0 6
8257: PUSH
8258: FOR_IN
8259: IFFALSE 8277
// begin ComEnterUnit ( i , building ) ;
8261: LD_VAR 0 5
8265: PPUSH
8266: LD_VAR 0 2
8270: PPUSH
8271: CALL_OW 120
// end ;
8275: GO 8258
8277: POP
8278: POP
// end ; end ;
8279: LD_VAR 0 3
8283: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8284: LD_INT 0
8286: PPUSH
8287: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8288: LD_INT 22
8290: PUSH
8291: LD_VAR 0 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 25
8302: PUSH
8303: LD_INT 2
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 69
8318: PUSH
8319: LD_INT 0
8321: GREATER
8322: PUSH
8323: LD_INT 22
8325: PUSH
8326: LD_VAR 0 1
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 3
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 3
8347: PUSH
8348: LD_INT 24
8350: PUSH
8351: LD_INT 1000
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 69
8371: PUSH
8372: LD_INT 0
8374: EQUAL
8375: AND
8376: PUSH
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 0
8384: GREATER
8385: AND
8386: IFFALSE 8485
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8388: LD_ADDR_VAR 0 4
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_VAR 0 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 25
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 69
8423: PUSH
8424: FOR_IN
8425: IFFALSE 8483
// begin AddComExitBuilding ( i ) ;
8427: LD_VAR 0 4
8431: PPUSH
8432: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8436: LD_VAR 0 4
8440: PPUSH
8441: LD_VAR 0 2
8445: PUSH
8446: LD_INT 1
8448: ARRAY
8449: PPUSH
8450: LD_VAR 0 2
8454: PUSH
8455: LD_INT 2
8457: ARRAY
8458: PPUSH
8459: LD_VAR 0 2
8463: PUSH
8464: LD_INT 3
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 2
8472: PUSH
8473: LD_INT 4
8475: ARRAY
8476: PPUSH
8477: CALL_OW 205
// end ;
8481: GO 8424
8483: POP
8484: POP
// end ; end ;
8485: LD_VAR 0 3
8489: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
8496: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8497: LD_ADDR_VAR 0 6
8501: PUSH
8502: LD_INT 22
8504: PUSH
8505: LD_VAR 0 1
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 25
8516: PUSH
8517: LD_INT 4
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PPUSH
8528: CALL_OW 69
8532: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8533: LD_ADDR_VAR 0 9
8537: PUSH
8538: LD_VAR 0 3
8542: PPUSH
8543: LD_INT 22
8545: PUSH
8546: LD_VAR 0 1
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 21
8557: PUSH
8558: LD_INT 1
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: LD_INT 3
8567: PUSH
8568: LD_INT 24
8570: PUSH
8571: LD_INT 750
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 70
8591: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8592: LD_VAR 0 9
8596: PUSH
8597: LD_INT 0
8599: GREATER
8600: PUSH
8601: LD_VAR 0 6
8605: PUSH
8606: LD_INT 0
8608: GREATER
8609: AND
8610: IFFALSE 8737
// begin for i = 1 to damageUnits do
8612: LD_ADDR_VAR 0 7
8616: PUSH
8617: DOUBLE
8618: LD_INT 1
8620: DEC
8621: ST_TO_ADDR
8622: LD_VAR 0 9
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8652
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8630: LD_VAR 0 9
8634: PUSH
8635: LD_VAR 0 7
8639: ARRAY
8640: PPUSH
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 113
8650: GO 8627
8652: POP
8653: POP
// for i in sci_list do
8654: LD_ADDR_VAR 0 7
8658: PUSH
8659: LD_VAR 0 6
8663: PUSH
8664: FOR_IN
8665: IFFALSE 8733
// begin ComExitBuilding ( i ) ;
8667: LD_VAR 0 7
8671: PPUSH
8672: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8676: LD_ADDR_VAR 0 8
8680: PUSH
8681: LD_VAR 0 2
8685: PPUSH
8686: LD_INT 22
8688: PUSH
8689: LD_VAR 0 1
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 70
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8729
// begin AddComHeal ( i , j ) ;
8706: LD_VAR 0 7
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 188
// wait ( 1 1$0 ) ;
8720: LD_INT 2100
8722: PPUSH
8723: CALL_OW 67
// end ;
8727: GO 8703
8729: POP
8730: POP
// end ;
8731: GO 8664
8733: POP
8734: POP
// end else
8735: GO 8751
// begin AddComEnterUnit ( sci_list , build ) ;
8737: LD_VAR 0 6
8741: PPUSH
8742: LD_VAR 0 4
8746: PPUSH
8747: CALL_OW 180
// end ; end ;
8751: LD_VAR 0 5
8755: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8756: LD_INT 0
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
8766: PPUSH
8767: PPUSH
8768: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8769: LD_ADDR_VAR 0 9
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_VAR 0 1
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 21
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 33
8798: PUSH
8799: LD_INT 1
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 24
8808: PUSH
8809: LD_INT 660
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 3
8818: PUSH
8819: LD_INT 58
8821: PUSH
8822: EMPTY
8823: LIST
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 3
8831: PUSH
8832: LD_INT 34
8834: PUSH
8835: LD_INT 53
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 69
8858: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8859: LD_ADDR_VAR 0 10
8863: PUSH
8864: LD_INT 22
8866: PUSH
8867: LD_VAR 0 1
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 21
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 33
8888: PUSH
8889: LD_INT 1
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: LD_INT 24
8901: PUSH
8902: LD_INT 660
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8924: LD_ADDR_VAR 0 11
8928: PUSH
8929: LD_VAR 0 2
8933: PPUSH
8934: LD_INT 22
8936: PUSH
8937: LD_VAR 0 1
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 21
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 33
8958: PUSH
8959: LD_INT 1
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 3
8968: PUSH
8969: LD_INT 24
8971: PUSH
8972: LD_INT 1000
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 70
8993: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8994: LD_ADDR_VAR 0 12
8998: PUSH
8999: LD_VAR 0 2
9003: PPUSH
9004: LD_INT 22
9006: PUSH
9007: LD_VAR 0 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 21
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 33
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 24
9038: PUSH
9039: LD_INT 1000
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 58
9048: PUSH
9049: EMPTY
9050: LIST
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: LD_INT 34
9057: PUSH
9058: LD_INT 53
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 70
9081: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9082: LD_ADDR_VAR 0 13
9086: PUSH
9087: EMPTY
9088: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9089: LD_ADDR_VAR 0 14
9093: PUSH
9094: LD_VAR 0 2
9098: PPUSH
9099: LD_INT 22
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 25
9113: PUSH
9114: LD_INT 3
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PPUSH
9125: CALL_OW 70
9129: ST_TO_ADDR
// if damageVehicle_list > 0 then
9130: LD_VAR 0 10
9134: PUSH
9135: LD_INT 0
9137: GREATER
9138: IFFALSE 9176
// begin for i in damageVehicle_list do
9140: LD_ADDR_VAR 0 7
9144: PUSH
9145: LD_VAR 0 10
9149: PUSH
9150: FOR_IN
9151: IFFALSE 9174
// begin ComMoveXY ( i , repX , repY ) ;
9153: LD_VAR 0 7
9157: PPUSH
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_VAR 0 4
9167: PPUSH
9168: CALL_OW 111
// end ;
9172: GO 9150
9174: POP
9175: POP
// end ; if vehicleNeedRepair_list > 0 then
9176: LD_VAR 0 11
9180: PUSH
9181: LD_INT 0
9183: GREATER
9184: IFFALSE 9271
// begin for i in vehicleNeedRepair_list do
9186: LD_ADDR_VAR 0 7
9190: PUSH
9191: LD_VAR 0 11
9195: PUSH
9196: FOR_IN
9197: IFFALSE 9269
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9199: LD_ADDR_VAR 0 13
9203: PUSH
9204: LD_VAR 0 13
9208: PUSH
9209: LD_VAR 0 7
9213: PPUSH
9214: CALL_OW 313
9218: ADD
9219: ST_TO_ADDR
// for j in mechanicInside_list do
9220: LD_ADDR_VAR 0 8
9224: PUSH
9225: LD_VAR 0 13
9229: PUSH
9230: FOR_IN
9231: IFFALSE 9265
// begin ComExitVehicle ( i ) ;
9233: LD_VAR 0 7
9237: PPUSH
9238: CALL_OW 121
// wait ( 0 0$1 ) ;
9242: LD_INT 35
9244: PPUSH
9245: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9249: LD_VAR 0 7
9253: PPUSH
9254: LD_VAR 0 8
9258: PPUSH
9259: CALL_OW 129
// end ;
9263: GO 9230
9265: POP
9266: POP
// end ;
9267: GO 9196
9269: POP
9270: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9271: LD_VAR 0 12
9275: PUSH
9276: LD_INT 0
9278: GREATER
9279: IFFALSE 9319
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9281: LD_VAR 0 14
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: PPUSH
9290: LD_VAR 0 12
9294: PUSH
9295: LD_INT 1
9297: ARRAY
9298: PPUSH
9299: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9303: LD_VAR 0 12
9307: PUSH
9308: LD_INT 1
9310: ARRAY
9311: PPUSH
9312: LD_INT 100
9314: PPUSH
9315: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9319: LD_VAR 0 9
9323: PUSH
9324: LD_INT 0
9326: GREATER
9327: IFFALSE 9518
// begin for i in vehicleOK_list do
9329: LD_ADDR_VAR 0 7
9333: PUSH
9334: LD_VAR 0 9
9338: PUSH
9339: FOR_IN
9340: IFFALSE 9516
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9342: LD_ADDR_VAR 0 15
9346: PUSH
9347: LD_INT 22
9349: PUSH
9350: LD_VAR 0 5
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PPUSH
9359: CALL_OW 69
9363: PPUSH
9364: LD_VAR 0 7
9368: PPUSH
9369: CALL_OW 74
9373: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9374: LD_ADDR_VAR 0 16
9378: PUSH
9379: LD_INT 22
9381: PUSH
9382: LD_VAR 0 5
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: LD_INT 59
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: LD_INT 21
9402: PUSH
9403: LD_INT 1
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 21
9412: PUSH
9413: LD_INT 2
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: PPUSH
9433: CALL_OW 69
9437: PPUSH
9438: LD_VAR 0 7
9442: PPUSH
9443: CALL_OW 74
9447: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9448: LD_VAR 0 7
9452: PPUSH
9453: LD_VAR 0 15
9457: PPUSH
9458: CALL_OW 296
9462: PUSH
9463: LD_INT 8
9465: PLUS
9466: PUSH
9467: LD_VAR 0 7
9471: PPUSH
9472: LD_VAR 0 16
9476: PPUSH
9477: CALL_OW 296
9481: LESS
9482: IFFALSE 9500
// begin ComAttackUnit ( i , target1 ) ;
9484: LD_VAR 0 7
9488: PPUSH
9489: LD_VAR 0 15
9493: PPUSH
9494: CALL_OW 115
// end else
9498: GO 9514
// begin ComAttackUnit ( i , target2 ) ;
9500: LD_VAR 0 7
9504: PPUSH
9505: LD_VAR 0 16
9509: PPUSH
9510: CALL_OW 115
// end ; end ;
9514: GO 9339
9516: POP
9517: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9518: LD_ADDR_VAR 0 7
9522: PUSH
9523: LD_VAR 0 2
9527: PPUSH
9528: LD_INT 22
9530: PUSH
9531: LD_VAR 0 1
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 25
9542: PUSH
9543: LD_INT 3
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PPUSH
9554: CALL_OW 70
9558: NOT
9559: PUSH
9560: FOR_IN
9561: IFFALSE 9584
// ComMoveXY ( i , repX , repY ) ;
9563: LD_VAR 0 7
9567: PPUSH
9568: LD_VAR 0 3
9572: PPUSH
9573: LD_VAR 0 4
9577: PPUSH
9578: CALL_OW 111
9582: GO 9560
9584: POP
9585: POP
// end ;
9586: LD_VAR 0 6
9590: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9591: LD_INT 0
9593: PPUSH
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9601: LD_INT 22
9603: PUSH
9604: LD_VAR 0 1
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 21
9615: PUSH
9616: LD_INT 2
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PPUSH
9627: CALL_OW 69
9631: PUSH
9632: LD_VAR 0 3
9636: LESSEQUAL
9637: IFFALSE 9704
// for i = 1 to vehCount do
9639: LD_ADDR_VAR 0 10
9643: PUSH
9644: DOUBLE
9645: LD_INT 1
9647: DEC
9648: ST_TO_ADDR
9649: LD_VAR 0 3
9653: PUSH
9654: FOR_TO
9655: IFFALSE 9702
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9657: LD_VAR 0 2
9661: PPUSH
9662: LD_VAR 0 8
9666: PPUSH
9667: LD_VAR 0 6
9671: PPUSH
9672: LD_VAR 0 7
9676: PPUSH
9677: LD_VAR 0 5
9681: PUSH
9682: LD_INT 1
9684: PPUSH
9685: LD_VAR 0 5
9689: PPUSH
9690: CALL_OW 12
9694: ARRAY
9695: PPUSH
9696: CALL_OW 185
9700: GO 9654
9702: POP
9703: POP
// repeat wait ( 0 0$1 ) ;
9704: LD_INT 35
9706: PPUSH
9707: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9711: LD_INT 22
9713: PUSH
9714: LD_VAR 0 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 2
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 250
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 69
9752: PUSH
9753: LD_VAR 0 3
9757: GREATEREQUAL
9758: IFFALSE 9704
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 24
9784: PUSH
9785: LD_INT 250
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PPUSH
9797: CALL_OW 69
9801: PUSH
9802: LD_VAR 0 3
9806: GREATEREQUAL
9807: IFFALSE 10150
// begin repeat begin wait ( 0 0$1 ) ;
9809: LD_INT 35
9811: PPUSH
9812: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9816: LD_INT 22
9818: PUSH
9819: LD_VAR 0 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 21
9830: PUSH
9831: LD_INT 2
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 24
9840: PUSH
9841: LD_INT 651
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: IFFALSE 10089
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9863: LD_ADDR_VAR 0 10
9867: PUSH
9868: LD_INT 22
9870: PUSH
9871: LD_VAR 0 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 21
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 24
9892: PUSH
9893: LD_INT 651
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 69
9909: PUSH
9910: FOR_IN
9911: IFFALSE 10087
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9913: LD_ADDR_VAR 0 15
9917: PUSH
9918: LD_INT 22
9920: PUSH
9921: LD_VAR 0 4
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PPUSH
9930: CALL_OW 69
9934: PPUSH
9935: LD_VAR 0 10
9939: PPUSH
9940: CALL_OW 74
9944: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9945: LD_ADDR_VAR 0 16
9949: PUSH
9950: LD_INT 22
9952: PUSH
9953: LD_VAR 0 4
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 59
9967: PUSH
9968: EMPTY
9969: LIST
9970: PUSH
9971: LD_INT 21
9973: PUSH
9974: LD_INT 1
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 21
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: EMPTY
10002: LIST
10003: PPUSH
10004: CALL_OW 69
10008: PPUSH
10009: LD_VAR 0 10
10013: PPUSH
10014: CALL_OW 74
10018: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10019: LD_VAR 0 10
10023: PPUSH
10024: LD_VAR 0 15
10028: PPUSH
10029: CALL_OW 296
10033: PUSH
10034: LD_INT 8
10036: PLUS
10037: PUSH
10038: LD_VAR 0 10
10042: PPUSH
10043: LD_VAR 0 16
10047: PPUSH
10048: CALL_OW 296
10052: LESS
10053: IFFALSE 10071
// begin ComAttackUnit ( i , target1 ) ;
10055: LD_VAR 0 10
10059: PPUSH
10060: LD_VAR 0 15
10064: PPUSH
10065: CALL_OW 115
// end else
10069: GO 10085
// begin ComAttackUnit ( i , target2 ) ;
10071: LD_VAR 0 10
10075: PPUSH
10076: LD_VAR 0 16
10080: PPUSH
10081: CALL_OW 115
// end ; end ;
10085: GO 9910
10087: POP
10088: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
10089: LD_INT 22
10091: PUSH
10092: LD_VAR 0 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 21
10103: PUSH
10104: LD_INT 2
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PPUSH
10115: CALL_OW 69
10119: PUSH
10120: LD_INT 0
10122: EQUAL
10123: PUSH
10124: LD_INT 22
10126: PUSH
10127: LD_VAR 0 4
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: PPUSH
10139: CALL_OW 69
10143: PUSH
10144: LD_INT 0
10146: EQUAL
10147: OR
10148: IFFALSE 9809
// end ; end ;
10150: LD_VAR 0 9
10154: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10155: LD_INT 0
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
10165: PPUSH
10166: PPUSH
10167: PPUSH
// for i = 1 to medicCount do
10168: LD_ADDR_VAR 0 14
10172: PUSH
10173: DOUBLE
10174: LD_INT 1
10176: DEC
10177: ST_TO_ADDR
10178: LD_VAR 0 7
10182: PUSH
10183: FOR_TO
10184: IFFALSE 10266
// begin uc_side = side ;
10186: LD_ADDR_OWVAR 20
10190: PUSH
10191: LD_VAR 0 1
10195: ST_TO_ADDR
// uc_nation = nation ;
10196: LD_ADDR_OWVAR 21
10200: PUSH
10201: LD_VAR 0 2
10205: ST_TO_ADDR
// hc_name =  ;
10206: LD_ADDR_OWVAR 26
10210: PUSH
10211: LD_STRING 
10213: ST_TO_ADDR
// hc_gallery =  ;
10214: LD_ADDR_OWVAR 33
10218: PUSH
10219: LD_STRING 
10221: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10222: LD_INT 0
10224: PPUSH
10225: LD_INT 4
10227: PPUSH
10228: LD_VAR 0 8
10232: PPUSH
10233: CALL_OW 380
// un = CreateHuman ;
10237: LD_ADDR_VAR 0 16
10241: PUSH
10242: CALL_OW 44
10246: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10247: LD_VAR 0 16
10251: PPUSH
10252: LD_VAR 0 9
10256: PPUSH
10257: LD_INT 0
10259: PPUSH
10260: CALL_OW 49
// end ;
10264: GO 10183
10266: POP
10267: POP
// for i = 1 to soldierCount do
10268: LD_ADDR_VAR 0 14
10272: PUSH
10273: DOUBLE
10274: LD_INT 1
10276: DEC
10277: ST_TO_ADDR
10278: LD_VAR 0 3
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10366
// begin uc_side = side ;
10286: LD_ADDR_OWVAR 20
10290: PUSH
10291: LD_VAR 0 1
10295: ST_TO_ADDR
// uc_nation = nation ;
10296: LD_ADDR_OWVAR 21
10300: PUSH
10301: LD_VAR 0 2
10305: ST_TO_ADDR
// hc_name =  ;
10306: LD_ADDR_OWVAR 26
10310: PUSH
10311: LD_STRING 
10313: ST_TO_ADDR
// hc_gallery =  ;
10314: LD_ADDR_OWVAR 33
10318: PUSH
10319: LD_STRING 
10321: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10322: LD_INT 0
10324: PPUSH
10325: LD_INT 1
10327: PPUSH
10328: LD_VAR 0 8
10332: PPUSH
10333: CALL_OW 380
// un = CreateHuman ;
10337: LD_ADDR_VAR 0 16
10341: PUSH
10342: CALL_OW 44
10346: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10347: LD_VAR 0 16
10351: PPUSH
10352: LD_VAR 0 9
10356: PPUSH
10357: LD_INT 0
10359: PPUSH
10360: CALL_OW 49
// end ;
10364: GO 10283
10366: POP
10367: POP
// for i = 1 to sniperCount do
10368: LD_ADDR_VAR 0 14
10372: PUSH
10373: DOUBLE
10374: LD_INT 1
10376: DEC
10377: ST_TO_ADDR
10378: LD_VAR 0 4
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10466
// begin uc_side = side ;
10386: LD_ADDR_OWVAR 20
10390: PUSH
10391: LD_VAR 0 1
10395: ST_TO_ADDR
// uc_nation = nation ;
10396: LD_ADDR_OWVAR 21
10400: PUSH
10401: LD_VAR 0 2
10405: ST_TO_ADDR
// hc_name =  ;
10406: LD_ADDR_OWVAR 26
10410: PUSH
10411: LD_STRING 
10413: ST_TO_ADDR
// hc_gallery =  ;
10414: LD_ADDR_OWVAR 33
10418: PUSH
10419: LD_STRING 
10421: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10422: LD_INT 0
10424: PPUSH
10425: LD_INT 5
10427: PPUSH
10428: LD_VAR 0 8
10432: PPUSH
10433: CALL_OW 380
// un = CreateHuman ;
10437: LD_ADDR_VAR 0 16
10441: PUSH
10442: CALL_OW 44
10446: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10447: LD_VAR 0 16
10451: PPUSH
10452: LD_VAR 0 9
10456: PPUSH
10457: LD_INT 0
10459: PPUSH
10460: CALL_OW 49
// end ;
10464: GO 10383
10466: POP
10467: POP
// for i = 1 to bazookCount do
10468: LD_ADDR_VAR 0 14
10472: PUSH
10473: DOUBLE
10474: LD_INT 1
10476: DEC
10477: ST_TO_ADDR
10478: LD_VAR 0 5
10482: PUSH
10483: FOR_TO
10484: IFFALSE 10566
// begin uc_side = side ;
10486: LD_ADDR_OWVAR 20
10490: PUSH
10491: LD_VAR 0 1
10495: ST_TO_ADDR
// uc_nation = nation ;
10496: LD_ADDR_OWVAR 21
10500: PUSH
10501: LD_VAR 0 2
10505: ST_TO_ADDR
// hc_name =  ;
10506: LD_ADDR_OWVAR 26
10510: PUSH
10511: LD_STRING 
10513: ST_TO_ADDR
// hc_gallery =  ;
10514: LD_ADDR_OWVAR 33
10518: PUSH
10519: LD_STRING 
10521: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10522: LD_INT 0
10524: PPUSH
10525: LD_INT 9
10527: PPUSH
10528: LD_VAR 0 8
10532: PPUSH
10533: CALL_OW 380
// un = CreateHuman ;
10537: LD_ADDR_VAR 0 16
10541: PUSH
10542: CALL_OW 44
10546: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10547: LD_VAR 0 16
10551: PPUSH
10552: LD_VAR 0 9
10556: PPUSH
10557: LD_INT 0
10559: PPUSH
10560: CALL_OW 49
// end ;
10564: GO 10483
10566: POP
10567: POP
// for i = 1 to mortalCount do
10568: LD_ADDR_VAR 0 14
10572: PUSH
10573: DOUBLE
10574: LD_INT 1
10576: DEC
10577: ST_TO_ADDR
10578: LD_VAR 0 6
10582: PUSH
10583: FOR_TO
10584: IFFALSE 10666
// begin uc_side = side ;
10586: LD_ADDR_OWVAR 20
10590: PUSH
10591: LD_VAR 0 1
10595: ST_TO_ADDR
// uc_nation = nation ;
10596: LD_ADDR_OWVAR 21
10600: PUSH
10601: LD_VAR 0 2
10605: ST_TO_ADDR
// hc_name =  ;
10606: LD_ADDR_OWVAR 26
10610: PUSH
10611: LD_STRING 
10613: ST_TO_ADDR
// hc_gallery =  ;
10614: LD_ADDR_OWVAR 33
10618: PUSH
10619: LD_STRING 
10621: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10622: LD_INT 0
10624: PPUSH
10625: LD_INT 8
10627: PPUSH
10628: LD_VAR 0 8
10632: PPUSH
10633: CALL_OW 380
// un = CreateHuman ;
10637: LD_ADDR_VAR 0 16
10641: PUSH
10642: CALL_OW 44
10646: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10647: LD_VAR 0 16
10651: PPUSH
10652: LD_VAR 0 9
10656: PPUSH
10657: LD_INT 0
10659: PPUSH
10660: CALL_OW 49
// end ;
10664: GO 10583
10666: POP
10667: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10668: LD_ADDR_VAR 0 19
10672: PUSH
10673: LD_INT 22
10675: PUSH
10676: LD_VAR 0 1
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 25
10690: PUSH
10691: LD_INT 1
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 25
10700: PUSH
10701: LD_INT 5
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 25
10710: PUSH
10711: LD_INT 8
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 25
10720: PUSH
10721: LD_INT 9
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PPUSH
10739: CALL_OW 69
10743: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10744: LD_ADDR_VAR 0 18
10748: PUSH
10749: LD_INT 22
10751: PUSH
10752: LD_VAR 0 1
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 4
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 69
10779: ST_TO_ADDR
// for i in medic_list do
10780: LD_ADDR_VAR 0 14
10784: PUSH
10785: LD_VAR 0 18
10789: PUSH
10790: FOR_IN
10791: IFFALSE 10809
// ComMoveToArea ( i , healArea ) ;
10793: LD_VAR 0 14
10797: PPUSH
10798: LD_VAR 0 10
10802: PPUSH
10803: CALL_OW 113
10807: GO 10790
10809: POP
10810: POP
// if strategy = 1 then
10811: LD_VAR 0 12
10815: PUSH
10816: LD_INT 1
10818: EQUAL
10819: IFFALSE 11554
// begin repeat wait ( 0 0$3 ) ;
10821: LD_INT 105
10823: PPUSH
10824: CALL_OW 67
// for i in soldiersOK_list do
10828: LD_ADDR_VAR 0 14
10832: PUSH
10833: LD_VAR 0 19
10837: PUSH
10838: FOR_IN
10839: IFFALSE 10903
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10841: LD_VAR 0 14
10845: PPUSH
10846: LD_INT 91
10848: PPUSH
10849: LD_INT 63
10851: PPUSH
10852: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
10856: LD_VAR 0 14
10860: PPUSH
10861: LD_INT 101
10863: PPUSH
10864: LD_INT 53
10866: PPUSH
10867: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
10871: LD_VAR 0 14
10875: PPUSH
10876: LD_INT 75
10878: PPUSH
10879: LD_INT 23
10881: PPUSH
10882: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
10886: LD_VAR 0 14
10890: PPUSH
10891: LD_INT 78
10893: PPUSH
10894: LD_INT 8
10896: PPUSH
10897: CALL_OW 174
// end ;
10901: GO 10838
10903: POP
10904: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10905: LD_INT 12
10907: PPUSH
10908: LD_INT 22
10910: PUSH
10911: LD_VAR 0 1
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 70
10924: PUSH
10925: LD_INT 2
10927: GREATER
10928: IFFALSE 10821
// repeat wait ( 0 0$1 ) ;
10930: LD_INT 35
10932: PPUSH
10933: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10937: LD_ADDR_VAR 0 17
10941: PUSH
10942: LD_INT 22
10944: PUSH
10945: LD_VAR 0 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: LD_INT 3
10959: PUSH
10960: LD_INT 24
10962: PUSH
10963: LD_INT 550
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 24
10976: PUSH
10977: LD_INT 250
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PPUSH
10993: CALL_OW 69
10997: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10998: LD_ADDR_VAR 0 19
11002: PUSH
11003: LD_INT 22
11005: PUSH
11006: LD_VAR 0 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 2
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 25
11030: PUSH
11031: LD_INT 5
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 25
11040: PUSH
11041: LD_INT 8
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 25
11050: PUSH
11051: LD_INT 9
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 24
11067: PUSH
11068: LD_INT 1000
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: PPUSH
11080: CALL_OW 69
11084: ST_TO_ADDR
// if medicCount > 0 then
11085: LD_VAR 0 7
11089: PUSH
11090: LD_INT 0
11092: GREATER
11093: IFFALSE 11167
// begin if damageUnit_list > 0 then
11095: LD_VAR 0 17
11099: PUSH
11100: LD_INT 0
11102: GREATER
11103: IFFALSE 11167
// begin for i in damageUnit_list do
11105: LD_ADDR_VAR 0 14
11109: PUSH
11110: LD_VAR 0 17
11114: PUSH
11115: FOR_IN
11116: IFFALSE 11165
// begin ComMoveToArea ( i , healArea ) ;
11118: LD_VAR 0 14
11122: PPUSH
11123: LD_VAR 0 10
11127: PPUSH
11128: CALL_OW 113
// for j in medic_list do
11132: LD_ADDR_VAR 0 15
11136: PUSH
11137: LD_VAR 0 18
11141: PUSH
11142: FOR_IN
11143: IFFALSE 11161
// AddComHeal ( j , i ) ;
11145: LD_VAR 0 15
11149: PPUSH
11150: LD_VAR 0 14
11154: PPUSH
11155: CALL_OW 188
11159: GO 11142
11161: POP
11162: POP
// end ;
11163: GO 11115
11165: POP
11166: POP
// end ; end ; for i in soldiersOK_list do
11167: LD_ADDR_VAR 0 14
11171: PUSH
11172: LD_VAR 0 19
11176: PUSH
11177: FOR_IN
11178: IFFALSE 11354
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11180: LD_ADDR_VAR 0 22
11184: PUSH
11185: LD_INT 22
11187: PUSH
11188: LD_VAR 0 11
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 69
11201: PPUSH
11202: LD_VAR 0 14
11206: PPUSH
11207: CALL_OW 74
11211: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11212: LD_ADDR_VAR 0 23
11216: PUSH
11217: LD_INT 22
11219: PUSH
11220: LD_VAR 0 11
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: LD_INT 59
11234: PUSH
11235: EMPTY
11236: LIST
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 21
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: PPUSH
11271: CALL_OW 69
11275: PPUSH
11276: LD_VAR 0 14
11280: PPUSH
11281: CALL_OW 74
11285: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11286: LD_VAR 0 14
11290: PPUSH
11291: LD_VAR 0 22
11295: PPUSH
11296: CALL_OW 296
11300: PUSH
11301: LD_INT 8
11303: PLUS
11304: PUSH
11305: LD_VAR 0 14
11309: PPUSH
11310: LD_VAR 0 23
11314: PPUSH
11315: CALL_OW 296
11319: LESS
11320: IFFALSE 11338
// begin ComAttackUnit ( i , target1 ) ;
11322: LD_VAR 0 14
11326: PPUSH
11327: LD_VAR 0 22
11331: PPUSH
11332: CALL_OW 115
// end else
11336: GO 11352
// begin ComAttackUnit ( i , target2 ) ;
11338: LD_VAR 0 14
11342: PPUSH
11343: LD_VAR 0 23
11347: PPUSH
11348: CALL_OW 115
// end ; end ;
11352: GO 11177
11354: POP
11355: POP
// for i in soldiersOK_list do
11356: LD_ADDR_VAR 0 14
11360: PUSH
11361: LD_VAR 0 19
11365: PUSH
11366: FOR_IN
11367: IFFALSE 11543
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11369: LD_ADDR_VAR 0 22
11373: PUSH
11374: LD_INT 22
11376: PUSH
11377: LD_VAR 0 11
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 69
11390: PPUSH
11391: LD_VAR 0 14
11395: PPUSH
11396: CALL_OW 74
11400: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11401: LD_ADDR_VAR 0 23
11405: PUSH
11406: LD_INT 22
11408: PUSH
11409: LD_VAR 0 11
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 2
11420: PUSH
11421: LD_INT 59
11423: PUSH
11424: EMPTY
11425: LIST
11426: PUSH
11427: LD_INT 21
11429: PUSH
11430: LD_INT 1
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 21
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: EMPTY
11458: LIST
11459: PPUSH
11460: CALL_OW 69
11464: PPUSH
11465: LD_VAR 0 14
11469: PPUSH
11470: CALL_OW 74
11474: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11475: LD_VAR 0 14
11479: PPUSH
11480: LD_VAR 0 22
11484: PPUSH
11485: CALL_OW 296
11489: PUSH
11490: LD_INT 8
11492: PLUS
11493: PUSH
11494: LD_VAR 0 14
11498: PPUSH
11499: LD_VAR 0 23
11503: PPUSH
11504: CALL_OW 296
11508: LESS
11509: IFFALSE 11527
// begin ComAttackUnit ( i , target1 ) ;
11511: LD_VAR 0 14
11515: PPUSH
11516: LD_VAR 0 22
11520: PPUSH
11521: CALL_OW 115
// end else
11525: GO 11541
// begin ComAttackUnit ( i , target2 ) ;
11527: LD_VAR 0 14
11531: PPUSH
11532: LD_VAR 0 23
11536: PPUSH
11537: CALL_OW 115
// end ; end ;
11541: GO 11366
11543: POP
11544: POP
// until soldiersOK_list = [ ] ;
11545: LD_VAR 0 19
11549: PUSH
11550: EMPTY
11551: EQUAL
11552: IFFALSE 10930
// end ; if strategy = 2 then
11554: LD_VAR 0 12
11558: PUSH
11559: LD_INT 2
11561: EQUAL
11562: IFFALSE 12267
// begin repeat wait ( 0 0$1 ) ;
11564: LD_INT 35
11566: PPUSH
11567: CALL_OW 67
// for i in soldiersOK_list do
11571: LD_ADDR_VAR 0 14
11575: PUSH
11576: LD_VAR 0 19
11580: PUSH
11581: FOR_IN
11582: IFFALSE 11616
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11584: LD_VAR 0 14
11588: PPUSH
11589: LD_INT 91
11591: PPUSH
11592: LD_INT 63
11594: PPUSH
11595: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11599: LD_VAR 0 14
11603: PPUSH
11604: LD_INT 75
11606: PPUSH
11607: LD_INT 33
11609: PPUSH
11610: CALL_OW 174
// end ;
11614: GO 11581
11616: POP
11617: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11618: LD_INT 13
11620: PPUSH
11621: LD_INT 22
11623: PUSH
11624: LD_VAR 0 1
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PPUSH
11633: CALL_OW 70
11637: PUSH
11638: LD_INT 2
11640: GREATER
11641: IFFALSE 11564
// repeat wait ( 0 0$3 ) ;
11643: LD_INT 105
11645: PPUSH
11646: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11650: LD_ADDR_VAR 0 17
11654: PUSH
11655: LD_INT 22
11657: PUSH
11658: LD_VAR 0 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 1
11669: PUSH
11670: LD_INT 3
11672: PUSH
11673: LD_INT 24
11675: PUSH
11676: LD_INT 550
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 24
11689: PUSH
11690: LD_INT 250
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11711: LD_ADDR_VAR 0 19
11715: PUSH
11716: LD_INT 22
11718: PUSH
11719: LD_VAR 0 1
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: LD_INT 25
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 5
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 25
11753: PUSH
11754: LD_INT 8
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 25
11763: PUSH
11764: LD_INT 9
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 24
11780: PUSH
11781: LD_INT 1000
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: PPUSH
11793: CALL_OW 69
11797: ST_TO_ADDR
// if medicCount > 0 then
11798: LD_VAR 0 7
11802: PUSH
11803: LD_INT 0
11805: GREATER
11806: IFFALSE 11880
// begin if damageUnit_list > 0 then
11808: LD_VAR 0 17
11812: PUSH
11813: LD_INT 0
11815: GREATER
11816: IFFALSE 11880
// begin for i in damageUnit_list do
11818: LD_ADDR_VAR 0 14
11822: PUSH
11823: LD_VAR 0 17
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11878
// begin ComMoveToArea ( i , healArea ) ;
11831: LD_VAR 0 14
11835: PPUSH
11836: LD_VAR 0 10
11840: PPUSH
11841: CALL_OW 113
// for j in medic_list do
11845: LD_ADDR_VAR 0 15
11849: PUSH
11850: LD_VAR 0 18
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11874
// AddComHeal ( j , i ) ;
11858: LD_VAR 0 15
11862: PPUSH
11863: LD_VAR 0 14
11867: PPUSH
11868: CALL_OW 188
11872: GO 11855
11874: POP
11875: POP
// end ;
11876: GO 11828
11878: POP
11879: POP
// end ; end ; for i in soldiersOK_list do
11880: LD_ADDR_VAR 0 14
11884: PUSH
11885: LD_VAR 0 19
11889: PUSH
11890: FOR_IN
11891: IFFALSE 12067
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11893: LD_ADDR_VAR 0 22
11897: PUSH
11898: LD_INT 22
11900: PUSH
11901: LD_VAR 0 11
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: PPUSH
11915: LD_VAR 0 14
11919: PPUSH
11920: CALL_OW 74
11924: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11925: LD_ADDR_VAR 0 23
11929: PUSH
11930: LD_INT 22
11932: PUSH
11933: LD_VAR 0 11
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 2
11944: PUSH
11945: LD_INT 59
11947: PUSH
11948: EMPTY
11949: LIST
11950: PUSH
11951: LD_INT 21
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 21
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: PPUSH
11984: CALL_OW 69
11988: PPUSH
11989: LD_VAR 0 14
11993: PPUSH
11994: CALL_OW 74
11998: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11999: LD_VAR 0 14
12003: PPUSH
12004: LD_VAR 0 22
12008: PPUSH
12009: CALL_OW 296
12013: PUSH
12014: LD_INT 8
12016: PLUS
12017: PUSH
12018: LD_VAR 0 14
12022: PPUSH
12023: LD_VAR 0 23
12027: PPUSH
12028: CALL_OW 296
12032: LESS
12033: IFFALSE 12051
// begin ComAttackUnit ( i , target1 ) ;
12035: LD_VAR 0 14
12039: PPUSH
12040: LD_VAR 0 22
12044: PPUSH
12045: CALL_OW 115
// end else
12049: GO 12065
// begin ComAttackUnit ( i , target2 ) ;
12051: LD_VAR 0 14
12055: PPUSH
12056: LD_VAR 0 23
12060: PPUSH
12061: CALL_OW 115
// end ; end ;
12065: GO 11890
12067: POP
12068: POP
// for i in soldiersOK_list do
12069: LD_ADDR_VAR 0 14
12073: PUSH
12074: LD_VAR 0 19
12078: PUSH
12079: FOR_IN
12080: IFFALSE 12256
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12082: LD_ADDR_VAR 0 22
12086: PUSH
12087: LD_INT 22
12089: PUSH
12090: LD_VAR 0 11
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 69
12103: PPUSH
12104: LD_VAR 0 14
12108: PPUSH
12109: CALL_OW 74
12113: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12114: LD_ADDR_VAR 0 23
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_VAR 0 11
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: LD_INT 59
12136: PUSH
12137: EMPTY
12138: LIST
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 21
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: PPUSH
12173: CALL_OW 69
12177: PPUSH
12178: LD_VAR 0 14
12182: PPUSH
12183: CALL_OW 74
12187: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12188: LD_VAR 0 14
12192: PPUSH
12193: LD_VAR 0 22
12197: PPUSH
12198: CALL_OW 296
12202: PUSH
12203: LD_INT 8
12205: PLUS
12206: PUSH
12207: LD_VAR 0 14
12211: PPUSH
12212: LD_VAR 0 23
12216: PPUSH
12217: CALL_OW 296
12221: LESS
12222: IFFALSE 12240
// begin ComAttackUnit ( i , target1 ) ;
12224: LD_VAR 0 14
12228: PPUSH
12229: LD_VAR 0 22
12233: PPUSH
12234: CALL_OW 115
// end else
12238: GO 12254
// begin ComAttackUnit ( i , target2 ) ;
12240: LD_VAR 0 14
12244: PPUSH
12245: LD_VAR 0 23
12249: PPUSH
12250: CALL_OW 115
// end ; end ;
12254: GO 12079
12256: POP
12257: POP
// until soldiersOK_list = [ ] ;
12258: LD_VAR 0 19
12262: PUSH
12263: EMPTY
12264: EQUAL
12265: IFFALSE 11643
// end ; if strategy = 3 then
12267: LD_VAR 0 12
12271: PUSH
12272: LD_INT 3
12274: EQUAL
12275: IFFALSE 13010
// begin repeat wait ( 0 0$3 ) ;
12277: LD_INT 105
12279: PPUSH
12280: CALL_OW 67
// for i in soldiersOK_list do
12284: LD_ADDR_VAR 0 14
12288: PUSH
12289: LD_VAR 0 19
12293: PUSH
12294: FOR_IN
12295: IFFALSE 12359
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12297: LD_VAR 0 14
12301: PPUSH
12302: LD_INT 63
12304: PPUSH
12305: LD_INT 71
12307: PPUSH
12308: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
12312: LD_VAR 0 14
12316: PPUSH
12317: LD_INT 35
12319: PPUSH
12320: LD_INT 44
12322: PPUSH
12323: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
12327: LD_VAR 0 14
12331: PPUSH
12332: LD_INT 23
12334: PPUSH
12335: LD_INT 18
12337: PPUSH
12338: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
12342: LD_VAR 0 14
12346: PPUSH
12347: LD_INT 26
12349: PPUSH
12350: LD_INT 12
12352: PPUSH
12353: CALL_OW 174
// end ;
12357: GO 12294
12359: POP
12360: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
12361: LD_INT 14
12363: PPUSH
12364: LD_INT 22
12366: PUSH
12367: LD_VAR 0 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PPUSH
12376: CALL_OW 70
12380: PUSH
12381: LD_INT 2
12383: GREATER
12384: IFFALSE 12277
// repeat wait ( 0 0$1 ) ;
12386: LD_INT 35
12388: PPUSH
12389: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12393: LD_ADDR_VAR 0 17
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_VAR 0 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 1
12412: PUSH
12413: LD_INT 3
12415: PUSH
12416: LD_INT 24
12418: PUSH
12419: LD_INT 550
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 24
12432: PUSH
12433: LD_INT 250
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PPUSH
12449: CALL_OW 69
12453: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12454: LD_ADDR_VAR 0 19
12458: PUSH
12459: LD_INT 22
12461: PUSH
12462: LD_VAR 0 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 2
12473: PUSH
12474: LD_INT 25
12476: PUSH
12477: LD_INT 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 25
12486: PUSH
12487: LD_INT 5
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 25
12496: PUSH
12497: LD_INT 8
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 25
12506: PUSH
12507: LD_INT 9
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 24
12523: PUSH
12524: LD_INT 1000
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if medicCount > 0 then
12541: LD_VAR 0 7
12545: PUSH
12546: LD_INT 0
12548: GREATER
12549: IFFALSE 12623
// begin if damageUnit_list > 0 then
12551: LD_VAR 0 17
12555: PUSH
12556: LD_INT 0
12558: GREATER
12559: IFFALSE 12623
// begin for i in damageUnit_list do
12561: LD_ADDR_VAR 0 14
12565: PUSH
12566: LD_VAR 0 17
12570: PUSH
12571: FOR_IN
12572: IFFALSE 12621
// begin ComMoveToArea ( i , healArea ) ;
12574: LD_VAR 0 14
12578: PPUSH
12579: LD_VAR 0 10
12583: PPUSH
12584: CALL_OW 113
// for j in medic_list do
12588: LD_ADDR_VAR 0 15
12592: PUSH
12593: LD_VAR 0 18
12597: PUSH
12598: FOR_IN
12599: IFFALSE 12617
// AddComHeal ( j , i ) ;
12601: LD_VAR 0 15
12605: PPUSH
12606: LD_VAR 0 14
12610: PPUSH
12611: CALL_OW 188
12615: GO 12598
12617: POP
12618: POP
// end ;
12619: GO 12571
12621: POP
12622: POP
// end ; end ; for i in soldiersOK_list do
12623: LD_ADDR_VAR 0 14
12627: PUSH
12628: LD_VAR 0 19
12632: PUSH
12633: FOR_IN
12634: IFFALSE 12810
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12636: LD_ADDR_VAR 0 22
12640: PUSH
12641: LD_INT 22
12643: PUSH
12644: LD_VAR 0 11
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PPUSH
12658: LD_VAR 0 14
12662: PPUSH
12663: CALL_OW 74
12667: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12668: LD_ADDR_VAR 0 23
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_VAR 0 11
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 2
12687: PUSH
12688: LD_INT 59
12690: PUSH
12691: EMPTY
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: PPUSH
12727: CALL_OW 69
12731: PPUSH
12732: LD_VAR 0 14
12736: PPUSH
12737: CALL_OW 74
12741: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12742: LD_VAR 0 14
12746: PPUSH
12747: LD_VAR 0 22
12751: PPUSH
12752: CALL_OW 296
12756: PUSH
12757: LD_INT 8
12759: PLUS
12760: PUSH
12761: LD_VAR 0 14
12765: PPUSH
12766: LD_VAR 0 23
12770: PPUSH
12771: CALL_OW 296
12775: LESS
12776: IFFALSE 12794
// begin ComAttackUnit ( i , target1 ) ;
12778: LD_VAR 0 14
12782: PPUSH
12783: LD_VAR 0 22
12787: PPUSH
12788: CALL_OW 115
// end else
12792: GO 12808
// begin ComAttackUnit ( i , target2 ) ;
12794: LD_VAR 0 14
12798: PPUSH
12799: LD_VAR 0 23
12803: PPUSH
12804: CALL_OW 115
// end ; end ;
12808: GO 12633
12810: POP
12811: POP
// for i in soldiersOK_list do
12812: LD_ADDR_VAR 0 14
12816: PUSH
12817: LD_VAR 0 19
12821: PUSH
12822: FOR_IN
12823: IFFALSE 12999
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12825: LD_ADDR_VAR 0 22
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_VAR 0 11
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: PPUSH
12847: LD_VAR 0 14
12851: PPUSH
12852: CALL_OW 74
12856: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12857: LD_ADDR_VAR 0 23
12861: PUSH
12862: LD_INT 22
12864: PUSH
12865: LD_VAR 0 11
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 2
12876: PUSH
12877: LD_INT 59
12879: PUSH
12880: EMPTY
12881: LIST
12882: PUSH
12883: LD_INT 21
12885: PUSH
12886: LD_INT 1
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 21
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: PPUSH
12916: CALL_OW 69
12920: PPUSH
12921: LD_VAR 0 14
12925: PPUSH
12926: CALL_OW 74
12930: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12931: LD_VAR 0 14
12935: PPUSH
12936: LD_VAR 0 22
12940: PPUSH
12941: CALL_OW 296
12945: PUSH
12946: LD_INT 8
12948: PLUS
12949: PUSH
12950: LD_VAR 0 14
12954: PPUSH
12955: LD_VAR 0 23
12959: PPUSH
12960: CALL_OW 296
12964: LESS
12965: IFFALSE 12983
// begin ComAttackUnit ( i , target1 ) ;
12967: LD_VAR 0 14
12971: PPUSH
12972: LD_VAR 0 22
12976: PPUSH
12977: CALL_OW 115
// end else
12981: GO 12997
// begin ComAttackUnit ( i , target2 ) ;
12983: LD_VAR 0 14
12987: PPUSH
12988: LD_VAR 0 23
12992: PPUSH
12993: CALL_OW 115
// end ; end ;
12997: GO 12822
12999: POP
13000: POP
// until soldiersOK_list = [ ] ;
13001: LD_VAR 0 19
13005: PUSH
13006: EMPTY
13007: EQUAL
13008: IFFALSE 12386
// end ; end ;
13010: LD_VAR 0 13
13014: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13015: LD_INT 0
13017: PPUSH
13018: PPUSH
13019: PPUSH
13020: PPUSH
13021: PPUSH
13022: PPUSH
13023: PPUSH
13024: PPUSH
13025: PPUSH
13026: PPUSH
13027: PPUSH
// amChassisTab = [ ] ;
13028: LD_ADDR_VAR 0 19
13032: PUSH
13033: EMPTY
13034: ST_TO_ADDR
// arChassisTab = [ ] ;
13035: LD_ADDR_VAR 0 18
13039: PUSH
13040: EMPTY
13041: ST_TO_ADDR
// ruChassisTab = [ ] ;
13042: LD_ADDR_VAR 0 17
13046: PUSH
13047: EMPTY
13048: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13049: LD_INT 35
13051: PPUSH
13052: CALL_OW 67
// if nation = 1 then
13056: LD_VAR 0 5
13060: PUSH
13061: LD_INT 1
13063: EQUAL
13064: IFFALSE 13555
// begin uc_side = side ;
13066: LD_ADDR_OWVAR 20
13070: PUSH
13071: LD_VAR 0 2
13075: ST_TO_ADDR
// uc_nation = nation ;
13076: LD_ADDR_OWVAR 21
13080: PUSH
13081: LD_VAR 0 5
13085: ST_TO_ADDR
// vc_engine = vehengine ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_VAR 0 6
13095: ST_TO_ADDR
// vc_control = vehcontrol ;
13096: LD_ADDR_OWVAR 38
13100: PUSH
13101: LD_VAR 0 7
13105: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_VAR 0 10
13115: PUSH
13116: LD_INT 1
13118: PPUSH
13119: LD_VAR 0 10
13123: PPUSH
13124: CALL_OW 12
13128: ARRAY
13129: ST_TO_ADDR
// for j = 1 to AMWeapon do
13130: LD_ADDR_VAR 0 14
13134: PUSH
13135: DOUBLE
13136: LD_INT 1
13138: DEC
13139: ST_TO_ADDR
13140: LD_VAR 0 10
13144: PUSH
13145: FOR_TO
13146: IFFALSE 13447
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13148: LD_VAR 0 10
13152: PUSH
13153: LD_VAR 0 14
13157: ARRAY
13158: PUSH
13159: LD_INT 2
13161: EQUAL
13162: PUSH
13163: LD_VAR 0 10
13167: PUSH
13168: LD_VAR 0 14
13172: ARRAY
13173: PUSH
13174: LD_INT 3
13176: EQUAL
13177: OR
13178: IFFALSE 13231
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13180: LD_ADDR_VAR 0 19
13184: PUSH
13185: LD_INT 1
13187: PUSH
13188: LD_INT 2
13190: PUSH
13191: LD_INT 3
13193: PUSH
13194: LD_INT 4
13196: PUSH
13197: LD_INT 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13207: LD_ADDR_OWVAR 37
13211: PUSH
13212: LD_VAR 0 19
13216: PUSH
13217: LD_INT 1
13219: PPUSH
13220: LD_VAR 0 19
13224: PPUSH
13225: CALL_OW 12
13229: ARRAY
13230: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13231: LD_VAR 0 10
13235: PUSH
13236: LD_VAR 0 14
13240: ARRAY
13241: PUSH
13242: LD_INT 4
13244: EQUAL
13245: PUSH
13246: LD_VAR 0 10
13250: PUSH
13251: LD_VAR 0 14
13255: ARRAY
13256: PUSH
13257: LD_INT 5
13259: EQUAL
13260: OR
13261: PUSH
13262: LD_VAR 0 10
13266: PUSH
13267: LD_VAR 0 14
13271: ARRAY
13272: PUSH
13273: LD_INT 9
13275: EQUAL
13276: OR
13277: PUSH
13278: LD_VAR 0 10
13282: PUSH
13283: LD_VAR 0 14
13287: ARRAY
13288: PUSH
13289: LD_INT 11
13291: EQUAL
13292: OR
13293: PUSH
13294: LD_VAR 0 10
13298: PUSH
13299: LD_VAR 0 14
13303: ARRAY
13304: PUSH
13305: LD_INT 7
13307: EQUAL
13308: OR
13309: IFFALSE 13358
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13311: LD_ADDR_VAR 0 19
13315: PUSH
13316: LD_INT 2
13318: PUSH
13319: LD_INT 3
13321: PUSH
13322: LD_INT 4
13324: PUSH
13325: LD_INT 5
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13334: LD_ADDR_OWVAR 37
13338: PUSH
13339: LD_VAR 0 19
13343: PUSH
13344: LD_INT 1
13346: PPUSH
13347: LD_VAR 0 19
13351: PPUSH
13352: CALL_OW 12
13356: ARRAY
13357: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13358: LD_VAR 0 10
13362: PUSH
13363: LD_VAR 0 14
13367: ARRAY
13368: PUSH
13369: LD_INT 8
13371: EQUAL
13372: PUSH
13373: LD_VAR 0 10
13377: PUSH
13378: LD_VAR 0 14
13382: ARRAY
13383: PUSH
13384: LD_INT 6
13386: EQUAL
13387: OR
13388: PUSH
13389: LD_VAR 0 10
13393: PUSH
13394: LD_VAR 0 14
13398: ARRAY
13399: PUSH
13400: LD_INT 10
13402: EQUAL
13403: OR
13404: IFFALSE 13445
// begin amChassisTab = [ 4 , 5 ] ;
13406: LD_ADDR_VAR 0 19
13410: PUSH
13411: LD_INT 4
13413: PUSH
13414: LD_INT 5
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13421: LD_ADDR_OWVAR 37
13425: PUSH
13426: LD_VAR 0 19
13430: PUSH
13431: LD_INT 1
13433: PPUSH
13434: LD_VAR 0 19
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// end ; end ;
13445: GO 13145
13447: POP
13448: POP
// veh = CreateVehicle ;
13449: LD_ADDR_VAR 0 16
13453: PUSH
13454: CALL_OW 45
13458: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13459: LD_VAR 0 16
13463: PPUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_INT 0
13471: PPUSH
13472: CALL_OW 49
// if vehControl = 1 then
13476: LD_VAR 0 7
13480: PUSH
13481: LD_INT 1
13483: EQUAL
13484: IFFALSE 13541
// begin hc_gallery =  ;
13486: LD_ADDR_OWVAR 33
13490: PUSH
13491: LD_STRING 
13493: ST_TO_ADDR
// hc_name =  ;
13494: LD_ADDR_OWVAR 26
13498: PUSH
13499: LD_STRING 
13501: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13502: LD_INT 0
13504: PPUSH
13505: LD_INT 3
13507: PPUSH
13508: LD_VAR 0 4
13512: PPUSH
13513: CALL_OW 380
// un = CreateHuman ;
13517: LD_ADDR_VAR 0 15
13521: PUSH
13522: CALL_OW 44
13526: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13527: LD_VAR 0 15
13531: PPUSH
13532: LD_VAR 0 16
13536: PPUSH
13537: CALL_OW 52
// end ; i = i + 1 ;
13541: LD_ADDR_VAR 0 13
13545: PUSH
13546: LD_VAR 0 13
13550: PUSH
13551: LD_INT 1
13553: PLUS
13554: ST_TO_ADDR
// end ; if nation = 2 then
13555: LD_VAR 0 5
13559: PUSH
13560: LD_INT 2
13562: EQUAL
13563: IFFALSE 13987
// begin uc_side = side ;
13565: LD_ADDR_OWVAR 20
13569: PUSH
13570: LD_VAR 0 2
13574: ST_TO_ADDR
// uc_nation = nation ;
13575: LD_ADDR_OWVAR 21
13579: PUSH
13580: LD_VAR 0 5
13584: ST_TO_ADDR
// vc_engine = vehengine ;
13585: LD_ADDR_OWVAR 39
13589: PUSH
13590: LD_VAR 0 6
13594: ST_TO_ADDR
// vc_control = vehcontrol ;
13595: LD_ADDR_OWVAR 38
13599: PUSH
13600: LD_VAR 0 7
13604: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13605: LD_ADDR_OWVAR 40
13609: PUSH
13610: LD_VAR 0 9
13614: PUSH
13615: LD_INT 1
13617: PPUSH
13618: LD_VAR 0 9
13622: PPUSH
13623: CALL_OW 12
13627: ARRAY
13628: ST_TO_ADDR
// for j = 1 to ARWeapons do
13629: LD_ADDR_VAR 0 14
13633: PUSH
13634: DOUBLE
13635: LD_INT 1
13637: DEC
13638: ST_TO_ADDR
13639: LD_VAR 0 9
13643: PUSH
13644: FOR_TO
13645: IFFALSE 13879
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13647: LD_VAR 0 9
13651: PUSH
13652: LD_VAR 0 14
13656: ARRAY
13657: PUSH
13658: LD_INT 24
13660: EQUAL
13661: PUSH
13662: LD_VAR 0 9
13666: PUSH
13667: LD_VAR 0 14
13671: ARRAY
13672: PUSH
13673: LD_INT 22
13675: EQUAL
13676: OR
13677: PUSH
13678: LD_VAR 0 9
13682: PUSH
13683: LD_VAR 0 14
13687: ARRAY
13688: PUSH
13689: LD_INT 23
13691: EQUAL
13692: OR
13693: PUSH
13694: LD_VAR 0 9
13698: PUSH
13699: LD_VAR 0 14
13703: ARRAY
13704: PUSH
13705: LD_INT 30
13707: EQUAL
13708: OR
13709: IFFALSE 13758
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13711: LD_ADDR_VAR 0 18
13715: PUSH
13716: LD_INT 11
13718: PUSH
13719: LD_INT 12
13721: PUSH
13722: LD_INT 13
13724: PUSH
13725: LD_INT 14
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_VAR 0 18
13743: PUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_VAR 0 18
13751: PPUSH
13752: CALL_OW 12
13756: ARRAY
13757: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13758: LD_VAR 0 9
13762: PUSH
13763: LD_VAR 0 14
13767: ARRAY
13768: PUSH
13769: LD_INT 29
13771: EQUAL
13772: PUSH
13773: LD_VAR 0 9
13777: PUSH
13778: LD_VAR 0 14
13782: ARRAY
13783: PUSH
13784: LD_INT 28
13786: EQUAL
13787: OR
13788: PUSH
13789: LD_VAR 0 9
13793: PUSH
13794: LD_VAR 0 14
13798: ARRAY
13799: PUSH
13800: LD_INT 27
13802: EQUAL
13803: OR
13804: PUSH
13805: LD_VAR 0 9
13809: PUSH
13810: LD_VAR 0 14
13814: ARRAY
13815: PUSH
13816: LD_INT 26
13818: EQUAL
13819: OR
13820: PUSH
13821: LD_VAR 0 9
13825: PUSH
13826: LD_VAR 0 14
13830: ARRAY
13831: PUSH
13832: LD_INT 25
13834: EQUAL
13835: OR
13836: IFFALSE 13877
// begin arChassisTab = [ 13 , 14 ] ;
13838: LD_ADDR_VAR 0 18
13842: PUSH
13843: LD_INT 13
13845: PUSH
13846: LD_INT 14
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13853: LD_ADDR_OWVAR 37
13857: PUSH
13858: LD_VAR 0 18
13862: PUSH
13863: LD_INT 1
13865: PPUSH
13866: LD_VAR 0 18
13870: PPUSH
13871: CALL_OW 12
13875: ARRAY
13876: ST_TO_ADDR
// end ; end ;
13877: GO 13644
13879: POP
13880: POP
// veh = CreateVehicle ;
13881: LD_ADDR_VAR 0 16
13885: PUSH
13886: CALL_OW 45
13890: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13891: LD_VAR 0 16
13895: PPUSH
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 0
13903: PPUSH
13904: CALL_OW 49
// if vehcontrol = 1 then
13908: LD_VAR 0 7
13912: PUSH
13913: LD_INT 1
13915: EQUAL
13916: IFFALSE 13973
// begin hc_gallery =  ;
13918: LD_ADDR_OWVAR 33
13922: PUSH
13923: LD_STRING 
13925: ST_TO_ADDR
// hc_name =  ;
13926: LD_ADDR_OWVAR 26
13930: PUSH
13931: LD_STRING 
13933: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13934: LD_INT 0
13936: PPUSH
13937: LD_INT 3
13939: PPUSH
13940: LD_VAR 0 4
13944: PPUSH
13945: CALL_OW 380
// un = CreateHuman ;
13949: LD_ADDR_VAR 0 15
13953: PUSH
13954: CALL_OW 44
13958: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13959: LD_VAR 0 15
13963: PPUSH
13964: LD_VAR 0 16
13968: PPUSH
13969: CALL_OW 52
// end ; i = i + 1 ;
13973: LD_ADDR_VAR 0 13
13977: PUSH
13978: LD_VAR 0 13
13982: PUSH
13983: LD_INT 1
13985: PLUS
13986: ST_TO_ADDR
// end ; if nation = 3 then
13987: LD_VAR 0 5
13991: PUSH
13992: LD_INT 3
13994: EQUAL
13995: IFFALSE 14387
// begin uc_side = side ;
13997: LD_ADDR_OWVAR 20
14001: PUSH
14002: LD_VAR 0 2
14006: ST_TO_ADDR
// uc_nation = nation ;
14007: LD_ADDR_OWVAR 21
14011: PUSH
14012: LD_VAR 0 5
14016: ST_TO_ADDR
// vc_engine = vehengine ;
14017: LD_ADDR_OWVAR 39
14021: PUSH
14022: LD_VAR 0 6
14026: ST_TO_ADDR
// vc_control = vehcontrol ;
14027: LD_ADDR_OWVAR 38
14031: PUSH
14032: LD_VAR 0 7
14036: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14037: LD_ADDR_OWVAR 40
14041: PUSH
14042: LD_VAR 0 8
14046: PUSH
14047: LD_INT 1
14049: PPUSH
14050: LD_VAR 0 8
14054: PPUSH
14055: CALL_OW 12
14059: ARRAY
14060: ST_TO_ADDR
// for j = 1 to RuWeapons do
14061: LD_ADDR_VAR 0 14
14065: PUSH
14066: DOUBLE
14067: LD_INT 1
14069: DEC
14070: ST_TO_ADDR
14071: LD_VAR 0 8
14075: PUSH
14076: FOR_TO
14077: IFFALSE 14279
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14079: LD_VAR 0 8
14083: PUSH
14084: LD_VAR 0 14
14088: ARRAY
14089: PUSH
14090: LD_INT 42
14092: EQUAL
14093: PUSH
14094: LD_VAR 0 8
14098: PUSH
14099: LD_VAR 0 14
14103: ARRAY
14104: PUSH
14105: LD_INT 43
14107: EQUAL
14108: OR
14109: PUSH
14110: LD_VAR 0 8
14114: PUSH
14115: LD_VAR 0 14
14119: ARRAY
14120: PUSH
14121: LD_INT 44
14123: EQUAL
14124: OR
14125: PUSH
14126: LD_VAR 0 8
14130: PUSH
14131: LD_VAR 0 14
14135: ARRAY
14136: PUSH
14137: LD_INT 45
14139: EQUAL
14140: OR
14141: PUSH
14142: LD_VAR 0 8
14146: PUSH
14147: LD_VAR 0 14
14151: ARRAY
14152: PUSH
14153: LD_INT 49
14155: EQUAL
14156: OR
14157: IFFALSE 14206
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14159: LD_ADDR_VAR 0 17
14163: PUSH
14164: LD_INT 21
14166: PUSH
14167: LD_INT 22
14169: PUSH
14170: LD_INT 23
14172: PUSH
14173: LD_INT 24
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14182: LD_ADDR_OWVAR 37
14186: PUSH
14187: LD_VAR 0 17
14191: PUSH
14192: LD_INT 1
14194: PPUSH
14195: LD_VAR 0 17
14199: PPUSH
14200: CALL_OW 12
14204: ARRAY
14205: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14206: LD_VAR 0 8
14210: PUSH
14211: LD_VAR 0 14
14215: ARRAY
14216: PUSH
14217: LD_INT 46
14219: EQUAL
14220: PUSH
14221: LD_VAR 0 8
14225: PUSH
14226: LD_VAR 0 14
14230: ARRAY
14231: PUSH
14232: LD_INT 47
14234: EQUAL
14235: OR
14236: IFFALSE 14277
// begin ruChassisTab = [ 23 , 24 ] ;
14238: LD_ADDR_VAR 0 17
14242: PUSH
14243: LD_INT 23
14245: PUSH
14246: LD_INT 24
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14253: LD_ADDR_OWVAR 37
14257: PUSH
14258: LD_VAR 0 17
14262: PUSH
14263: LD_INT 1
14265: PPUSH
14266: LD_VAR 0 17
14270: PPUSH
14271: CALL_OW 12
14275: ARRAY
14276: ST_TO_ADDR
// end ; end ;
14277: GO 14076
14279: POP
14280: POP
// veh = CreateVehicle ;
14281: LD_ADDR_VAR 0 16
14285: PUSH
14286: CALL_OW 45
14290: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14291: LD_VAR 0 16
14295: PPUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: LD_INT 0
14303: PPUSH
14304: CALL_OW 49
// if vehcontrol = 1 then
14308: LD_VAR 0 7
14312: PUSH
14313: LD_INT 1
14315: EQUAL
14316: IFFALSE 14373
// begin hc_gallery =  ;
14318: LD_ADDR_OWVAR 33
14322: PUSH
14323: LD_STRING 
14325: ST_TO_ADDR
// hc_name =  ;
14326: LD_ADDR_OWVAR 26
14330: PUSH
14331: LD_STRING 
14333: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14334: LD_INT 0
14336: PPUSH
14337: LD_INT 3
14339: PPUSH
14340: LD_VAR 0 4
14344: PPUSH
14345: CALL_OW 380
// un = CreateHuman ;
14349: LD_ADDR_VAR 0 15
14353: PUSH
14354: CALL_OW 44
14358: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14359: LD_VAR 0 15
14363: PPUSH
14364: LD_VAR 0 16
14368: PPUSH
14369: CALL_OW 52
// end ; i = i + 1 ;
14373: LD_ADDR_VAR 0 13
14377: PUSH
14378: LD_VAR 0 13
14382: PUSH
14383: LD_INT 1
14385: PLUS
14386: ST_TO_ADDR
// end ; until i = vehCount ;
14387: LD_VAR 0 13
14391: PUSH
14392: LD_VAR 0 3
14396: EQUAL
14397: IFFALSE 13049
// repeat wait ( 0 0$1 ) ;
14399: LD_INT 35
14401: PPUSH
14402: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
14406: LD_ADDR_VAR 0 20
14410: PUSH
14411: LD_INT 22
14413: PUSH
14414: LD_VAR 0 2
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 21
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 24
14435: PUSH
14436: LD_INT 661
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: PPUSH
14448: CALL_OW 69
14452: ST_TO_ADDR
// if vehicleOK_list > 0 then
14453: LD_VAR 0 20
14457: PUSH
14458: LD_INT 0
14460: GREATER
14461: IFFALSE 14652
// begin for i in vehicleOK_list do
14463: LD_ADDR_VAR 0 13
14467: PUSH
14468: LD_VAR 0 20
14472: PUSH
14473: FOR_IN
14474: IFFALSE 14650
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14476: LD_ADDR_VAR 0 21
14480: PUSH
14481: LD_INT 22
14483: PUSH
14484: LD_VAR 0 11
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PPUSH
14493: CALL_OW 69
14497: PPUSH
14498: LD_VAR 0 13
14502: PPUSH
14503: CALL_OW 74
14507: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14508: LD_ADDR_VAR 0 22
14512: PUSH
14513: LD_INT 22
14515: PUSH
14516: LD_VAR 0 11
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 2
14527: PUSH
14528: LD_INT 59
14530: PUSH
14531: EMPTY
14532: LIST
14533: PUSH
14534: LD_INT 21
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 21
14546: PUSH
14547: LD_INT 2
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: EMPTY
14565: LIST
14566: PPUSH
14567: CALL_OW 69
14571: PPUSH
14572: LD_VAR 0 13
14576: PPUSH
14577: CALL_OW 74
14581: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14582: LD_VAR 0 13
14586: PPUSH
14587: LD_VAR 0 21
14591: PPUSH
14592: CALL_OW 296
14596: PUSH
14597: LD_INT 8
14599: PLUS
14600: PUSH
14601: LD_VAR 0 13
14605: PPUSH
14606: LD_VAR 0 22
14610: PPUSH
14611: CALL_OW 296
14615: LESS
14616: IFFALSE 14634
// begin ComAttackUnit ( i , target1 ) ;
14618: LD_VAR 0 13
14622: PPUSH
14623: LD_VAR 0 21
14627: PPUSH
14628: CALL_OW 115
// end else
14632: GO 14648
// begin ComAttackUnit ( i , target2 ) ;
14634: LD_VAR 0 13
14638: PPUSH
14639: LD_VAR 0 22
14643: PPUSH
14644: CALL_OW 115
// end ; end ;
14648: GO 14473
14650: POP
14651: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14652: LD_INT 22
14654: PUSH
14655: LD_VAR 0 2
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PPUSH
14678: CALL_OW 69
14682: PUSH
14683: LD_INT 0
14685: EQUAL
14686: IFFALSE 14399
// end ;
14688: LD_VAR 0 12
14692: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14693: LD_INT 0
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14703: LD_ADDR_VAR 0 7
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_VAR 0 1
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: LD_INT 24
14728: PUSH
14729: LD_INT 550
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 24
14742: PUSH
14743: LD_INT 250
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14764: LD_ADDR_VAR 0 8
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_VAR 0 1
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: LD_INT 25
14786: PUSH
14787: LD_INT 1
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 25
14796: PUSH
14797: LD_INT 5
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 25
14806: PUSH
14807: LD_INT 8
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 25
14816: PUSH
14817: LD_INT 9
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 24
14833: PUSH
14834: LD_INT 1000
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: PPUSH
14846: CALL_OW 69
14850: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14851: LD_ADDR_VAR 0 9
14855: PUSH
14856: LD_INT 22
14858: PUSH
14859: LD_VAR 0 1
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 25
14870: PUSH
14871: LD_INT 4
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: ST_TO_ADDR
// if medicCount > 0 then
14887: LD_VAR 0 9
14891: PUSH
14892: LD_INT 0
14894: GREATER
14895: IFFALSE 14969
// begin if damageUnit_list > 0 then
14897: LD_VAR 0 7
14901: PUSH
14902: LD_INT 0
14904: GREATER
14905: IFFALSE 14969
// begin for i in damageUnit_list do
14907: LD_ADDR_VAR 0 5
14911: PUSH
14912: LD_VAR 0 7
14916: PUSH
14917: FOR_IN
14918: IFFALSE 14967
// begin ComMoveToArea ( i , healArea ) ;
14920: LD_VAR 0 5
14924: PPUSH
14925: LD_VAR 0 2
14929: PPUSH
14930: CALL_OW 113
// for j in medicCount do
14934: LD_ADDR_VAR 0 6
14938: PUSH
14939: LD_VAR 0 9
14943: PUSH
14944: FOR_IN
14945: IFFALSE 14963
// AddComHeal ( j , i ) ;
14947: LD_VAR 0 6
14951: PPUSH
14952: LD_VAR 0 5
14956: PPUSH
14957: CALL_OW 188
14961: GO 14944
14963: POP
14964: POP
// end ;
14965: GO 14917
14967: POP
14968: POP
// end ; end ; if soldiersOK_list > 0 then
14969: LD_VAR 0 8
14973: PUSH
14974: LD_INT 0
14976: GREATER
14977: IFFALSE 15168
// begin for i in soldiersOK_list do
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_VAR 0 8
14988: PUSH
14989: FOR_IN
14990: IFFALSE 15166
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14992: LD_ADDR_VAR 0 10
14996: PUSH
14997: LD_INT 22
14999: PUSH
15000: LD_VAR 0 3
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PPUSH
15014: LD_VAR 0 5
15018: PPUSH
15019: CALL_OW 74
15023: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15024: LD_ADDR_VAR 0 11
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_VAR 0 3
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 59
15046: PUSH
15047: EMPTY
15048: LIST
15049: PUSH
15050: LD_INT 21
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 2
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: PPUSH
15083: CALL_OW 69
15087: PPUSH
15088: LD_VAR 0 5
15092: PPUSH
15093: CALL_OW 74
15097: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15098: LD_VAR 0 5
15102: PPUSH
15103: LD_VAR 0 10
15107: PPUSH
15108: CALL_OW 296
15112: PUSH
15113: LD_INT 8
15115: PLUS
15116: PUSH
15117: LD_VAR 0 5
15121: PPUSH
15122: LD_VAR 0 11
15126: PPUSH
15127: CALL_OW 296
15131: LESS
15132: IFFALSE 15150
// begin ComAttackUnit ( i , target1 ) ;
15134: LD_VAR 0 5
15138: PPUSH
15139: LD_VAR 0 10
15143: PPUSH
15144: CALL_OW 115
// end else
15148: GO 15164
// begin ComAttackUnit ( i , target2 ) ;
15150: LD_VAR 0 5
15154: PPUSH
15155: LD_VAR 0 11
15159: PPUSH
15160: CALL_OW 115
// end ; end ;
15164: GO 14989
15166: POP
15167: POP
// end ; end ; end_of_file
15168: LD_VAR 0 4
15172: RET
// every 1 do var i ;
15173: GO 15175
15175: DISABLE
15176: LD_INT 0
15178: PPUSH
// begin InGameOn ;
15179: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
15183: LD_INT 53
15185: PPUSH
15186: LD_INT 40
15188: PPUSH
15189: CALL_OW 84
// wait ( 0 0$5 ) ;
15193: LD_INT 175
15195: PPUSH
15196: CALL_OW 67
// if gammaCommander = 1 then
15200: LD_EXP 11
15204: PUSH
15205: LD_INT 1
15207: EQUAL
15208: IFFALSE 15219
// CenterNowOnUnits ( Donaldson ) ;
15210: LD_EXP 3
15214: PPUSH
15215: CALL_OW 87
// if gammaCommander = 2 then
15219: LD_EXP 11
15223: PUSH
15224: LD_INT 2
15226: EQUAL
15227: IFFALSE 15238
// CenterNowOnUnits ( Brown ) ;
15229: LD_EXP 2
15233: PPUSH
15234: CALL_OW 87
// if gammaCommander = 3 then
15238: LD_EXP 11
15242: PUSH
15243: LD_INT 3
15245: EQUAL
15246: IFFALSE 15257
// CenterNowOnUnits ( Houten ) ;
15248: LD_EXP 12
15252: PPUSH
15253: CALL_OW 87
// if gammaCommander = 1 then
15257: LD_EXP 11
15261: PUSH
15262: LD_INT 1
15264: EQUAL
15265: IFFALSE 15279
// Say ( Donaldson , D1-Don-1 ) ;
15267: LD_EXP 3
15271: PPUSH
15272: LD_STRING D1-Don-1
15274: PPUSH
15275: CALL_OW 88
// if gammaCommander = 2 then
15279: LD_EXP 11
15283: PUSH
15284: LD_INT 2
15286: EQUAL
15287: IFFALSE 15301
// Say ( Brown , D1-Brown-1 ) ;
15289: LD_EXP 2
15293: PPUSH
15294: LD_STRING D1-Brown-1
15296: PPUSH
15297: CALL_OW 88
// if gammaCommander = 3 then
15301: LD_EXP 11
15305: PUSH
15306: LD_INT 3
15308: EQUAL
15309: IFFALSE 15323
// Say ( Houten , D1-VanH-1 ) ;
15311: LD_EXP 12
15315: PPUSH
15316: LD_STRING D1-VanH-1
15318: PPUSH
15319: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
15323: LD_EXP 21
15327: PPUSH
15328: LD_STRING D1-Har-1
15330: PPUSH
15331: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
15335: LD_INT 53
15337: PPUSH
15338: LD_INT 40
15340: PPUSH
15341: CALL_OW 84
// if gammaCommander = 1 then
15345: LD_EXP 11
15349: PUSH
15350: LD_INT 1
15352: EQUAL
15353: IFFALSE 15367
// Say ( Donaldson , D1-Don-2 ) ;
15355: LD_EXP 3
15359: PPUSH
15360: LD_STRING D1-Don-2
15362: PPUSH
15363: CALL_OW 88
// if gammaCommander = 2 then
15367: LD_EXP 11
15371: PUSH
15372: LD_INT 2
15374: EQUAL
15375: IFFALSE 15389
// Say ( Brown , D1-Brown-2 ) ;
15377: LD_EXP 2
15381: PPUSH
15382: LD_STRING D1-Brown-2
15384: PPUSH
15385: CALL_OW 88
// if gammaCommander = 3 then
15389: LD_EXP 11
15393: PUSH
15394: LD_INT 3
15396: EQUAL
15397: IFFALSE 15411
// Say ( Houten , D1-VanH-2 ) ;
15399: LD_EXP 12
15403: PPUSH
15404: LD_STRING D1-VanH-2
15406: PPUSH
15407: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
15411: LD_EXP 21
15415: PPUSH
15416: LD_STRING D1-Har-2
15418: PPUSH
15419: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
15423: LD_INT 22
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 33
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 61
15445: PUSH
15446: EMPTY
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: IFFALSE 15523
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
15460: LD_ADDR_VAR 0 1
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 33
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 61
15487: PUSH
15488: EMPTY
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: PUSH
15501: FOR_IN
15502: IFFALSE 15521
// ComAgressiveMove ( i , 70 , 41 ) ;
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_INT 70
15511: PPUSH
15512: LD_INT 41
15514: PPUSH
15515: CALL_OW 114
15519: GO 15501
15521: POP
15522: POP
// repeat wait ( 0 0$1 ) ;
15523: LD_INT 35
15525: PPUSH
15526: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_INT 22
15537: PUSH
15538: LD_INT 6
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: PUSH
15553: FOR_IN
15554: IFFALSE 15573
// ComAgressiveMove ( i , 54 , 20 ) ;
15556: LD_VAR 0 1
15560: PPUSH
15561: LD_INT 54
15563: PPUSH
15564: LD_INT 20
15566: PPUSH
15567: CALL_OW 114
15571: GO 15553
15573: POP
15574: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
15575: LD_ADDR_VAR 0 1
15579: PUSH
15580: LD_INT 22
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 25
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 3
15602: PUSH
15603: LD_INT 54
15605: PUSH
15606: EMPTY
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: PUSH
15623: FOR_IN
15624: IFFALSE 15658
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
15626: LD_VAR 0 1
15630: PPUSH
15631: LD_INT 70
15633: PPUSH
15634: LD_INT 41
15636: PPUSH
15637: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 46
15648: PPUSH
15649: LD_INT 39
15651: PPUSH
15652: CALL_OW 174
// end ;
15656: GO 15623
15658: POP
15659: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
15660: LD_ADDR_VAR 0 1
15664: PUSH
15665: LD_INT 22
15667: PUSH
15668: LD_INT 1
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 24
15690: PUSH
15691: LD_INT 500
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: PUSH
15712: FOR_IN
15713: IFFALSE 15746
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15715: LD_VAR 0 1
15719: PPUSH
15720: LD_EXP 36
15724: PPUSH
15725: CALL_OW 250
15729: PPUSH
15730: LD_EXP 36
15734: PPUSH
15735: CALL_OW 251
15739: PPUSH
15740: CALL_OW 111
15744: GO 15712
15746: POP
15747: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
15748: LD_INT 22
15750: PUSH
15751: LD_INT 6
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 21
15760: PUSH
15761: LD_INT 1
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 24
15770: PUSH
15771: LD_INT 250
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 69
15787: PUSH
15788: LD_INT 6
15790: LESS
15791: IFFALSE 15523
// InGameOff ;
15793: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
15797: LD_STRING M1
15799: PPUSH
15800: CALL_OW 337
// SaveForQuickRestart ;
15804: CALL_OW 22
// end ;
15808: PPOPN 1
15810: END
// every 1 1$0 do
15811: GO 15813
15813: DISABLE
// begin PrepareSupportFromDelta ;
15814: CALL 2274 0 0
// firstAttack = 1 ;
15818: LD_ADDR_EXP 32
15822: PUSH
15823: LD_INT 1
15825: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15826: LD_EXP 8
15830: PPUSH
15831: CALL_OW 302
15835: IFFALSE 15851
// begin Say ( Gladstone , D2-Glad-1 ) ;
15837: LD_EXP 8
15841: PPUSH
15842: LD_STRING D2-Glad-1
15844: PPUSH
15845: CALL_OW 88
// end else
15849: GO 15944
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
15851: LD_INT 4
15853: PPUSH
15854: LD_INT 22
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 21
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: LD_INT 25
15879: PUSH
15880: LD_INT 1
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 25
15889: PUSH
15890: LD_INT 2
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 25
15899: PUSH
15900: LD_INT 3
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 25
15909: PUSH
15910: LD_INT 4
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: PPUSH
15929: CALL_OW 70
15933: PPUSH
15934: LD_STRING D2-Sol1-1
15936: PPUSH
15937: LD_STRING D2-FSol1-1
15939: PPUSH
15940: CALL 5733 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15944: LD_EXP 3
15948: PPUSH
15949: CALL_OW 302
15953: PUSH
15954: LD_EXP 11
15958: PUSH
15959: LD_INT 1
15961: EQUAL
15962: AND
15963: IFFALSE 15977
// Say ( Donaldson , D2-Don-1 ) ;
15965: LD_EXP 3
15969: PPUSH
15970: LD_STRING D2-Don-1
15972: PPUSH
15973: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15977: LD_EXP 2
15981: PPUSH
15982: CALL_OW 302
15986: PUSH
15987: LD_EXP 11
15991: PUSH
15992: LD_INT 2
15994: EQUAL
15995: AND
15996: IFFALSE 16010
// Say ( Brown , D2-Brown-1 ) ;
15998: LD_EXP 2
16002: PPUSH
16003: LD_STRING D2-Brown-1
16005: PPUSH
16006: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16010: LD_EXP 12
16014: PPUSH
16015: CALL_OW 302
16019: PUSH
16020: LD_EXP 11
16024: PUSH
16025: LD_INT 3
16027: EQUAL
16028: AND
16029: IFFALSE 16043
// Say ( Houten , D2-VanH-1 ) ;
16031: LD_EXP 12
16035: PPUSH
16036: LD_STRING D2-VanH-1
16038: PPUSH
16039: CALL_OW 88
// end ;
16043: END
// every 0 0$1 do
16044: GO 16046
16046: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
16047: LD_STRING 07_time
16049: PPUSH
16050: LD_INT 0
16052: PPUSH
16053: CALL_OW 30
16057: PUSH
16058: LD_INT 3
16060: DIV
16061: PPUSH
16062: CALL_OW 67
// PrepareMacmillanSquad ;
16066: CALL 2892 0 0
// CenterNowOnUnits ( JMM ) ;
16070: LD_EXP 1
16074: PPUSH
16075: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
16079: LD_EXP 1
16083: PPUSH
16084: LD_STRING D3-JMM-1
16086: PPUSH
16087: CALL_OW 88
// JMMArrive = 1 ;
16091: LD_ADDR_EXP 37
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16099: LD_EXP 3
16103: PPUSH
16104: CALL_OW 302
16108: PUSH
16109: LD_EXP 11
16113: PUSH
16114: LD_INT 1
16116: EQUAL
16117: AND
16118: IFFALSE 16134
// begin Say ( Donaldson , D3-Don-1 ) ;
16120: LD_EXP 3
16124: PPUSH
16125: LD_STRING D3-Don-1
16127: PPUSH
16128: CALL_OW 88
// end else
16132: GO 16171
// begin if gammaCommander = 1 then
16134: LD_EXP 11
16138: PUSH
16139: LD_INT 1
16141: EQUAL
16142: IFFALSE 16171
// begin DialogRandom ( others_gamma , D3-Sol1-1 , D3-Sol1-1 ) ;
16144: LD_EXP 10
16148: PPUSH
16149: LD_STRING D3-Sol1-1
16151: PPUSH
16152: LD_STRING D3-Sol1-1
16154: PPUSH
16155: CALL 5733 0 3
// Say ( JMM , D3-JMM-2 ) ;
16159: LD_EXP 1
16163: PPUSH
16164: LD_STRING D3-JMM-2
16166: PPUSH
16167: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16171: LD_EXP 2
16175: PPUSH
16176: CALL_OW 302
16180: PUSH
16181: LD_EXP 11
16185: PUSH
16186: LD_INT 2
16188: EQUAL
16189: AND
16190: IFFALSE 16206
// begin Say ( Brown , D3-Brown-1 ) ;
16192: LD_EXP 2
16196: PPUSH
16197: LD_STRING D3-Brown-1
16199: PPUSH
16200: CALL_OW 88
// end else
16204: GO 16243
// begin if gammaCommander = 2 then
16206: LD_EXP 11
16210: PUSH
16211: LD_INT 2
16213: EQUAL
16214: IFFALSE 16243
// begin DialogRandom ( others_gamma , D3-Sol1-1a , D3-Sol1-1a ) ;
16216: LD_EXP 10
16220: PPUSH
16221: LD_STRING D3-Sol1-1a
16223: PPUSH
16224: LD_STRING D3-Sol1-1a
16226: PPUSH
16227: CALL 5733 0 3
// Say ( JMM , D3-JMM-2 ) ;
16231: LD_EXP 1
16235: PPUSH
16236: LD_STRING D3-JMM-2
16238: PPUSH
16239: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16243: LD_EXP 12
16247: PPUSH
16248: CALL_OW 302
16252: PUSH
16253: LD_EXP 11
16257: PUSH
16258: LD_INT 3
16260: EQUAL
16261: AND
16262: IFFALSE 16278
// begin Say ( Houten , D3-VanH-1 ) ;
16264: LD_EXP 12
16268: PPUSH
16269: LD_STRING D3-VanH-1
16271: PPUSH
16272: CALL_OW 88
// end else
16276: GO 16315
// begin if gammaCommander = 3 then
16278: LD_EXP 11
16282: PUSH
16283: LD_INT 3
16285: EQUAL
16286: IFFALSE 16315
// begin DialogRandom ( others_gamma , D3-Sol1-1b , D3-Sol1-1b ) ;
16288: LD_EXP 10
16292: PPUSH
16293: LD_STRING D3-Sol1-1b
16295: PPUSH
16296: LD_STRING D3-Sol1-1b
16298: PPUSH
16299: CALL 5733 0 3
// Say ( JMM , D3-JMM-2 ) ;
16303: LD_EXP 1
16307: PPUSH
16308: LD_STRING D3-JMM-2
16310: PPUSH
16311: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16315: LD_EXP 14
16319: PPUSH
16320: CALL_OW 302
16324: IFFALSE 16352
// begin Say ( Joan , D3a-Joan-1 ) ;
16326: LD_EXP 14
16330: PPUSH
16331: LD_STRING D3a-Joan-1
16333: PPUSH
16334: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16338: LD_EXP 1
16342: PPUSH
16343: LD_STRING D3a-JMM-1
16345: PPUSH
16346: CALL_OW 88
// end else
16350: GO 16760
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16352: LD_EXP 3
16356: PPUSH
16357: CALL_OW 302
16361: PUSH
16362: LD_EXP 11
16366: PUSH
16367: LD_INT 1
16369: EQUAL
16370: AND
16371: PUSH
16372: LD_STRING 06_JoanStatus_1
16374: PPUSH
16375: LD_INT 0
16377: PPUSH
16378: CALL_OW 30
16382: PUSH
16383: LD_INT 1
16385: EQUAL
16386: AND
16387: IFFALSE 16438
// begin Say ( Donaldson , D3b-Don-1 ) ;
16389: LD_EXP 3
16393: PPUSH
16394: LD_STRING D3b-Don-1
16396: PPUSH
16397: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16401: LD_EXP 1
16405: PPUSH
16406: LD_STRING D3b-JMM-2
16408: PPUSH
16409: CALL_OW 88
// if IsOK ( Lisa ) then
16413: LD_EXP 6
16417: PPUSH
16418: CALL_OW 302
16422: IFFALSE 16436
// Say ( Lisa , D3b-Lisa-2 ) ;
16424: LD_EXP 6
16428: PPUSH
16429: LD_STRING D3b-Lisa-2
16431: PPUSH
16432: CALL_OW 88
// end else
16436: GO 16488
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16438: LD_EXP 10
16442: PPUSH
16443: LD_STRING D3b-Sol1-1
16445: PPUSH
16446: LD_STRING D3b-Sol1-1
16448: PPUSH
16449: CALL 5733 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16453: LD_EXP 1
16457: PPUSH
16458: LD_STRING D3b-JMM-2
16460: PPUSH
16461: CALL_OW 88
// if IsOK ( Lisa ) then
16465: LD_EXP 6
16469: PPUSH
16470: CALL_OW 302
16474: IFFALSE 16488
// Say ( Lisa , D3b-Lisa-2 ) ;
16476: LD_EXP 6
16480: PPUSH
16481: LD_STRING D3b-Lisa-2
16483: PPUSH
16484: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16488: LD_EXP 2
16492: PPUSH
16493: CALL_OW 302
16497: PUSH
16498: LD_EXP 11
16502: PUSH
16503: LD_INT 2
16505: EQUAL
16506: AND
16507: PUSH
16508: LD_STRING 06_JoanStatus_1
16510: PPUSH
16511: LD_INT 0
16513: PPUSH
16514: CALL_OW 30
16518: PUSH
16519: LD_INT 1
16521: EQUAL
16522: AND
16523: IFFALSE 16574
// begin Say ( Brown , D3b-Brown-1 ) ;
16525: LD_EXP 2
16529: PPUSH
16530: LD_STRING D3b-Brown-1
16532: PPUSH
16533: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16537: LD_EXP 1
16541: PPUSH
16542: LD_STRING D3b-JMM-2
16544: PPUSH
16545: CALL_OW 88
// if IsOK ( Lisa ) then
16549: LD_EXP 6
16553: PPUSH
16554: CALL_OW 302
16558: IFFALSE 16572
// Say ( Lisa , D3b-Lisa-2 ) ;
16560: LD_EXP 6
16564: PPUSH
16565: LD_STRING D3b-Lisa-2
16567: PPUSH
16568: CALL_OW 88
// end else
16572: GO 16624
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16574: LD_EXP 10
16578: PPUSH
16579: LD_STRING D3b-Sol1-1
16581: PPUSH
16582: LD_STRING D3b-Sol1-1
16584: PPUSH
16585: CALL 5733 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16589: LD_EXP 1
16593: PPUSH
16594: LD_STRING D3b-JMM-2
16596: PPUSH
16597: CALL_OW 88
// if IsOK ( Lisa ) then
16601: LD_EXP 6
16605: PPUSH
16606: CALL_OW 302
16610: IFFALSE 16624
// Say ( Lisa , D3b-Lisa-2 ) ;
16612: LD_EXP 6
16616: PPUSH
16617: LD_STRING D3b-Lisa-2
16619: PPUSH
16620: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16624: LD_EXP 12
16628: PPUSH
16629: CALL_OW 302
16633: PUSH
16634: LD_EXP 11
16638: PUSH
16639: LD_INT 3
16641: EQUAL
16642: AND
16643: PUSH
16644: LD_STRING 06_JoanStatus_1
16646: PPUSH
16647: LD_INT 0
16649: PPUSH
16650: CALL_OW 30
16654: PUSH
16655: LD_INT 1
16657: EQUAL
16658: AND
16659: IFFALSE 16710
// begin Say ( Houten , D3b-VanH-1 ) ;
16661: LD_EXP 12
16665: PPUSH
16666: LD_STRING D3b-VanH-1
16668: PPUSH
16669: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16673: LD_EXP 1
16677: PPUSH
16678: LD_STRING D3b-JMM-2
16680: PPUSH
16681: CALL_OW 88
// if IsOK ( Lisa ) then
16685: LD_EXP 6
16689: PPUSH
16690: CALL_OW 302
16694: IFFALSE 16708
// Say ( Lisa , D3b-Lisa-2 ) ;
16696: LD_EXP 6
16700: PPUSH
16701: LD_STRING D3b-Lisa-2
16703: PPUSH
16704: CALL_OW 88
// end else
16708: GO 16760
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16710: LD_EXP 10
16714: PPUSH
16715: LD_STRING D3b-Sol1-1
16717: PPUSH
16718: LD_STRING D3b-Sol1-1
16720: PPUSH
16721: CALL 5733 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16725: LD_EXP 1
16729: PPUSH
16730: LD_STRING D3b-JMM-2
16732: PPUSH
16733: CALL_OW 88
// if IsOK ( Lisa ) then
16737: LD_EXP 6
16741: PPUSH
16742: CALL_OW 302
16746: IFFALSE 16760
// Say ( Lisa , D3b-Lisa-2 ) ;
16748: LD_EXP 6
16752: PPUSH
16753: LD_STRING D3b-Lisa-2
16755: PPUSH
16756: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16760: LD_INT 22
16762: PUSH
16763: LD_INT 1
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 21
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 26
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 25
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 25
16805: PUSH
16806: LD_INT 2
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 25
16815: PUSH
16816: LD_INT 3
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 25
16825: PUSH
16826: LD_INT 4
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: PUSH
16851: LD_EXP 1
16855: PUSH
16856: EMPTY
16857: LIST
16858: DIFF
16859: PPUSH
16860: LD_STRING DCa-Sol1-1
16862: PPUSH
16863: LD_STRING DCa-Sol1-1
16865: PPUSH
16866: CALL 5733 0 3
// Say ( JMM , DCb-JMM-1 ) ;
16870: LD_EXP 1
16874: PPUSH
16875: LD_STRING DCb-JMM-1
16877: PPUSH
16878: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16882: LD_INT 22
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 21
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 26
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 2
16914: PUSH
16915: LD_INT 25
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 25
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 25
16937: PUSH
16938: LD_INT 3
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 25
16947: PUSH
16948: LD_INT 4
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: PUSH
16973: LD_EXP 1
16977: PUSH
16978: EMPTY
16979: LIST
16980: DIFF
16981: PPUSH
16982: LD_STRING DCb-Sol1-1
16984: PPUSH
16985: LD_STRING DCb-Sol1-1
16987: PPUSH
16988: CALL 5733 0 3
// Say ( JMM , DCb-JMM-2 ) ;
16992: LD_EXP 1
16996: PPUSH
16997: LD_STRING DCb-JMM-2
16999: PPUSH
17000: CALL_OW 88
// secondAttack = 1 ;
17004: LD_ADDR_EXP 33
17008: PUSH
17009: LD_INT 1
17011: ST_TO_ADDR
// end ;
17012: END
// every 0 0$01 trigger JMMArrive = 1 do
17013: LD_EXP 37
17017: PUSH
17018: LD_INT 1
17020: EQUAL
17021: IFFALSE 17101
17023: GO 17025
17025: DISABLE
// begin wait ( 3 3$0 ) ;
17026: LD_INT 6300
17028: PPUSH
17029: CALL_OW 67
// DialogueOn ;
17033: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17037: LD_EXP 22
17041: PPUSH
17042: LD_STRING D4-Pow-1
17044: PPUSH
17045: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17049: LD_EXP 1
17053: PPUSH
17054: LD_STRING D4-JMM-1
17056: PPUSH
17057: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17061: LD_EXP 22
17065: PPUSH
17066: LD_STRING D4-Pow-2
17068: PPUSH
17069: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17073: LD_EXP 1
17077: PPUSH
17078: LD_STRING D4-JMM-2
17080: PPUSH
17081: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17085: LD_EXP 22
17089: PPUSH
17090: LD_STRING D4-Pow-3
17092: PPUSH
17093: CALL_OW 94
// DialogueOff ;
17097: CALL_OW 7
// end ;
17101: END
// every 0 0$01 trigger JMMArrive = 1 do
17102: LD_EXP 37
17106: PUSH
17107: LD_INT 1
17109: EQUAL
17110: IFFALSE 17142
17112: GO 17114
17114: DISABLE
// begin wait ( 8 8$0 ) ;
17115: LD_INT 16800
17117: PPUSH
17118: CALL_OW 67
// DialogueOn ;
17122: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17126: LD_EXP 22
17130: PPUSH
17131: LD_STRING D4a-Pow-1
17133: PPUSH
17134: CALL_OW 94
// DialogueOff ;
17138: CALL_OW 7
// end ;
17142: END
// every 0 0$01 trigger JMMArrive = 1 do
17143: LD_EXP 37
17147: PUSH
17148: LD_INT 1
17150: EQUAL
17151: IFFALSE 17196
17153: GO 17155
17155: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
17156: LD_INT 21000
17158: PUSH
17159: LD_INT 25200
17161: PUSH
17162: LD_INT 31500
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: PUSH
17170: LD_OWVAR 67
17174: ARRAY
17175: PPUSH
17176: CALL_OW 67
// PrepareSikorsky ;
17180: CALL 4317 0 0
// SikorskyArrive = 1 ;
17184: LD_ADDR_EXP 17
17188: PUSH
17189: LD_INT 1
17191: ST_TO_ADDR
// PrepareSikorskyArmy ;
17192: CALL 4457 0 0
// end ;
17196: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
17197: LD_EXP 16
17201: PPUSH
17202: LD_INT 5
17204: PPUSH
17205: CALL_OW 308
17209: IFFALSE 17401
17211: GO 17213
17213: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
17214: LD_EXP 16
17218: PPUSH
17219: CALL_OW 87
// DialogueOn ;
17223: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17227: LD_EXP 15
17231: PPUSH
17232: LD_STRING D5-Sik-1
17234: PPUSH
17235: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
17239: LD_EXP 1
17243: PPUSH
17244: LD_STRING D5-JMM-1a
17246: PPUSH
17247: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17251: LD_EXP 15
17255: PPUSH
17256: LD_STRING D5-Sik-2
17258: PPUSH
17259: CALL_OW 88
// case query ( QSikorski ) of 1 :
17263: LD_STRING QSikorski
17265: PPUSH
17266: CALL_OW 97
17270: PUSH
17271: LD_INT 1
17273: DOUBLE
17274: EQUAL
17275: IFTRUE 17279
17277: GO 17302
17279: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17280: LD_EXP 15
17284: PPUSH
17285: LD_STRING D5a-Sik-1
17287: PPUSH
17288: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
17292: LD_ADDR_EXP 18
17296: PUSH
17297: LD_INT 2100
17299: ST_TO_ADDR
// end ; 2 :
17300: GO 17389
17302: LD_INT 2
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17333
17310: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17311: LD_EXP 15
17315: PPUSH
17316: LD_STRING D5b-Sik-1
17318: PPUSH
17319: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
17323: LD_ADDR_EXP 18
17327: PUSH
17328: LD_INT 10500
17330: ST_TO_ADDR
// end ; 3 :
17331: GO 17389
17333: LD_INT 3
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17388
17341: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17342: LD_EXP 15
17346: PPUSH
17347: LD_STRING D5c-Sik-1
17349: PPUSH
17350: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17354: LD_EXP 1
17358: PPUSH
17359: LD_STRING D5c-JMM-1
17361: PPUSH
17362: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17366: LD_EXP 15
17370: PPUSH
17371: LD_STRING D5c-Sik-2
17373: PPUSH
17374: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
17378: LD_ADDR_EXP 18
17382: PUSH
17383: LD_INT 10500
17385: ST_TO_ADDR
// end ; end ;
17386: GO 17389
17388: POP
// DialogueOff ;
17389: CALL_OW 7
// timerStatus = 1 ;
17393: LD_ADDR_EXP 34
17397: PUSH
17398: LD_INT 1
17400: ST_TO_ADDR
// end ;
17401: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
17402: LD_EXP 18
17406: PUSH
17407: LD_INT 35
17409: LESS
17410: IFFALSE 17458
17412: GO 17414
17414: DISABLE
// begin timerStatus = 0 ;
17415: LD_ADDR_EXP 34
17419: PUSH
17420: LD_INT 0
17422: ST_TO_ADDR
// DialogueOn ;
17423: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17427: LD_EXP 15
17431: PPUSH
17432: LD_STRING D6-Sik-1
17434: PPUSH
17435: CALL_OW 88
// DialogueOff ;
17439: CALL_OW 7
// SikorskyAI = 1 ;
17443: LD_ADDR_EXP 19
17447: PUSH
17448: LD_INT 1
17450: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
17451: LD_STRING M2
17453: PPUSH
17454: CALL_OW 337
// end ;
17458: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
17459: LD_EXP 16
17463: PPUSH
17464: LD_INT 18
17466: PPUSH
17467: CALL_OW 308
17471: IFFALSE 17555
17473: GO 17475
17475: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17476: LD_EXP 15
17480: PPUSH
17481: LD_STRING D7-Sik-1
17483: PPUSH
17484: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
17488: LD_EXP 1
17492: PPUSH
17493: LD_INT 24
17495: PPUSH
17496: CALL_OW 308
17500: PUSH
17501: LD_EXP 1
17505: PPUSH
17506: CALL_OW 310
17510: OR
17511: IFFALSE 17535
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17513: LD_EXP 15
17517: PPUSH
17518: LD_STRING D7a-Sik-1
17520: PPUSH
17521: CALL_OW 88
// SikorskyStatus = 1 ;
17525: LD_ADDR_EXP 20
17529: PUSH
17530: LD_INT 1
17532: ST_TO_ADDR
// end else
17533: GO 17555
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17535: LD_EXP 15
17539: PPUSH
17540: LD_STRING D7b-Sik-1
17542: PPUSH
17543: CALL_OW 88
// SikorskyStatus = 2 ;
17547: LD_ADDR_EXP 20
17551: PUSH
17552: LD_INT 2
17554: ST_TO_ADDR
// end ; end ;
17555: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
17556: LD_EXP 35
17560: PUSH
17561: LD_INT 1
17563: EQUAL
17564: IFFALSE 17673
17566: GO 17568
17568: DISABLE
17569: LD_INT 0
17571: PPUSH
// begin enable ;
17572: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
17573: LD_ADDR_VAR 0 1
17577: PUSH
17578: LD_INT 22
17580: PUSH
17581: LD_INT 3
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL_OW 69
17592: PUSH
17593: FOR_IN
17594: IFFALSE 17621
// if IsInArea ( i , RussianEscape ) then
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_INT 22
17603: PPUSH
17604: CALL_OW 308
17608: IFFALSE 17619
// RemoveUnit ( i ) ;
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 64
17619: GO 17593
17621: POP
17622: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17623: LD_ADDR_VAR 0 1
17627: PUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 6
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: PUSH
17643: FOR_IN
17644: IFFALSE 17671
// if IsInArea ( i , RussianEscape ) then
17646: LD_VAR 0 1
17650: PPUSH
17651: LD_INT 22
17653: PPUSH
17654: CALL_OW 308
17658: IFFALSE 17669
// RemoveUnit ( i ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL_OW 64
17669: GO 17643
17671: POP
17672: POP
// end ; end_of_file
17673: PPOPN 1
17675: END
// on BuildingComplete ( building ) do var tmp , un ;
17676: LD_INT 0
17678: PPUSH
17679: PPUSH
// begin if GetSide ( building ) = 3 then
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 255
17689: PUSH
17690: LD_INT 3
17692: EQUAL
17693: IFFALSE 18180
// begin if GetBType ( building ) = b_depot then
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 266
17704: PUSH
17705: LD_INT 0
17707: EQUAL
17708: IFFALSE 17776
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 274
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: LD_INT 5000
17725: PPUSH
17726: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17730: LD_VAR 0 1
17734: PPUSH
17735: CALL_OW 274
17739: PPUSH
17740: LD_INT 2
17742: PPUSH
17743: LD_INT 5000
17745: PPUSH
17746: CALL_OW 277
// SetBName ( building , konev ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_STRING konev
17757: PPUSH
17758: CALL_OW 500
// ruDepot = building ;
17762: LD_ADDR_EXP 27
17766: PUSH
17767: LD_VAR 0 1
17771: ST_TO_ADDR
// BuildRussianBase ;
17772: CALL 6338 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17776: LD_VAR 0 1
17780: PPUSH
17781: CALL_OW 266
17785: PUSH
17786: LD_INT 0
17788: EQUAL
17789: PUSH
17790: LD_VAR 0 1
17794: PPUSH
17795: CALL_OW 266
17799: PUSH
17800: LD_INT 2
17802: EQUAL
17803: OR
17804: PUSH
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 266
17814: PUSH
17815: LD_INT 4
17817: EQUAL
17818: OR
17819: IFFALSE 17830
// ComUpgrade ( building ) ;
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL_OW 146
// if GetBType ( building ) = b_lab then
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 266
17839: PUSH
17840: LD_INT 6
17842: EQUAL
17843: IFFALSE 17894
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17845: LD_VAR 0 1
17849: PPUSH
17850: LD_INT 10
17852: PPUSH
17853: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17857: LD_VAR 0 1
17861: PPUSH
17862: LD_INT 12
17864: PPUSH
17865: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
17869: LD_INT 3
17871: PPUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_INT 3
17879: PPUSH
17880: CALL 6893 0 3
// ruLab = building ;
17884: LD_ADDR_EXP 28
17888: PUSH
17889: LD_VAR 0 1
17893: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 266
17903: PUSH
17904: LD_INT 32
17906: EQUAL
17907: IFFALSE 18025
// begin uc_side = 3 ;
17909: LD_ADDR_OWVAR 20
17913: PUSH
17914: LD_INT 3
17916: ST_TO_ADDR
// uc_nation = 3 ;
17917: LD_ADDR_OWVAR 21
17921: PUSH
17922: LD_INT 3
17924: ST_TO_ADDR
// hc_gallery =  ;
17925: LD_ADDR_OWVAR 33
17929: PUSH
17930: LD_STRING 
17932: ST_TO_ADDR
// hc_name =  ;
17933: LD_ADDR_OWVAR 26
17937: PUSH
17938: LD_STRING 
17940: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17941: LD_INT 0
17943: PPUSH
17944: LD_INT 1
17946: PPUSH
17947: LD_EXP 24
17951: PPUSH
17952: LD_EXP 25
17956: PPUSH
17957: CALL_OW 12
17961: PPUSH
17962: CALL_OW 380
// un = CreateHuman ;
17966: LD_ADDR_VAR 0 3
17970: PUSH
17971: CALL_OW 44
17975: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17976: LD_VAR 0 3
17980: PPUSH
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17990: LD_VAR 0 1
17994: PPUSH
17995: LD_INT 43
17997: PUSH
17998: LD_INT 44
18000: PUSH
18001: LD_INT 46
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: PPUSH
18012: LD_INT 3
18014: PPUSH
18015: CALL_OW 12
18019: ARRAY
18020: PPUSH
18021: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
18025: LD_VAR 0 1
18029: PPUSH
18030: CALL_OW 266
18034: PUSH
18035: LD_INT 33
18037: EQUAL
18038: IFFALSE 18075
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18040: LD_VAR 0 1
18044: PPUSH
18045: LD_INT 43
18047: PUSH
18048: LD_INT 44
18050: PUSH
18051: LD_INT 46
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PPUSH
18062: LD_INT 3
18064: PPUSH
18065: CALL_OW 12
18069: ARRAY
18070: PPUSH
18071: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18075: LD_VAR 0 1
18079: PPUSH
18080: CALL_OW 266
18084: PUSH
18085: LD_INT 24
18087: EQUAL
18088: IFFALSE 18098
// russianAI = 1 ;
18090: LD_ADDR_EXP 26
18094: PUSH
18095: LD_INT 1
18097: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
18098: LD_EXP 30
18102: PUSH
18103: LD_INT 0
18105: GREATER
18106: IFFALSE 18180
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18108: LD_ADDR_EXP 30
18112: PUSH
18113: LD_EXP 30
18117: PPUSH
18118: LD_INT 1
18120: PPUSH
18121: CALL_OW 3
18125: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18126: LD_ADDR_EXP 30
18130: PUSH
18131: LD_EXP 30
18135: PPUSH
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 3
18143: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18144: LD_ADDR_EXP 30
18148: PUSH
18149: LD_EXP 30
18153: PPUSH
18154: LD_INT 1
18156: PPUSH
18157: CALL_OW 3
18161: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18162: LD_ADDR_EXP 30
18166: PUSH
18167: LD_EXP 30
18171: PPUSH
18172: LD_INT 1
18174: PPUSH
18175: CALL_OW 3
18179: ST_TO_ADDR
// end ; end ; end ;
18180: PPOPN 3
18182: END
// on UpgradeComplete ( building ) do var i ;
18183: LD_INT 0
18185: PPUSH
// begin if GetSide ( building ) = 3 then
18186: LD_VAR 0 1
18190: PPUSH
18191: CALL_OW 255
18195: PUSH
18196: LD_INT 3
18198: EQUAL
18199: IFFALSE 18380
// begin if GetBType ( building ) = b_factory then
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 266
18210: PUSH
18211: LD_INT 3
18213: EQUAL
18214: IFFALSE 18281
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
18216: LD_ADDR_VAR 0 2
18220: PUSH
18221: LD_INT 22
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 25
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PPUSH
18245: CALL_OW 69
18249: PUSH
18250: FOR_IN
18251: IFFALSE 18269
// ComEnterUnit ( i , building ) ;
18253: LD_VAR 0 2
18257: PPUSH
18258: LD_VAR 0 1
18262: PPUSH
18263: CALL_OW 120
18267: GO 18250
18269: POP
18270: POP
// ruFab = building ;
18271: LD_ADDR_EXP 29
18275: PUSH
18276: LD_VAR 0 1
18280: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 266
18290: PUSH
18291: LD_INT 8
18293: EQUAL
18294: IFFALSE 18351
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18296: LD_ADDR_VAR 0 2
18300: PUSH
18301: LD_INT 22
18303: PUSH
18304: LD_INT 3
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 25
18313: PUSH
18314: LD_INT 4
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PPUSH
18325: CALL_OW 69
18329: PUSH
18330: FOR_IN
18331: IFFALSE 18349
// ComEnterUnit ( i , building ) ;
18333: LD_VAR 0 2
18337: PPUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 120
18347: GO 18330
18349: POP
18350: POP
// if GetBType ( building ) = b_warehouse then
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 266
18360: PUSH
18361: LD_INT 1
18363: EQUAL
18364: IFFALSE 18380
// begin ComEnterUnit ( Borodin , building ) ;
18366: LD_EXP 23
18370: PPUSH
18371: LD_VAR 0 1
18375: PPUSH
18376: CALL_OW 120
// end ; end ; end ;
18380: PPOPN 2
18382: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL_OW 247
18392: PUSH
18393: LD_INT 2
18395: EQUAL
18396: PUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 263
18406: PUSH
18407: LD_INT 3
18409: EQUAL
18410: AND
18411: PUSH
18412: LD_EXP 39
18416: PUSH
18417: LD_INT 0
18419: EQUAL
18420: AND
18421: IFFALSE 18539
// begin varEvent1 = 1 ;
18423: LD_ADDR_EXP 39
18427: PUSH
18428: LD_INT 1
18430: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
18440: LD_INT 22
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 21
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: LD_INT 25
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 25
18475: PUSH
18476: LD_INT 2
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 25
18485: PUSH
18486: LD_INT 3
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 25
18495: PUSH
18496: LD_INT 4
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: PPUSH
18515: CALL_OW 69
18519: PUSH
18520: LD_EXP 1
18524: PUSH
18525: EMPTY
18526: LIST
18527: DIFF
18528: PPUSH
18529: LD_STRING DC-Sol1-1
18531: PPUSH
18532: LD_STRING DC-FSol1-1
18534: PPUSH
18535: CALL 5733 0 3
// end ; end ;
18539: PPOPN 1
18541: END
// on UnitDestroyed ( unit ) do var i ;
18542: LD_INT 0
18544: PPUSH
// begin if GetSide ( unit ) = 3 then
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 255
18554: PUSH
18555: LD_INT 3
18557: EQUAL
18558: IFFALSE 19328
// begin if GetType ( unit ) = unit_building then
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 247
18569: PUSH
18570: LD_INT 3
18572: EQUAL
18573: IFFALSE 19265
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
18575: LD_VAR 0 1
18579: PPUSH
18580: CALL_OW 266
18584: PUSH
18585: LD_INT 31
18587: EQUAL
18588: PUSH
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 266
18598: PUSH
18599: LD_INT 32
18601: EQUAL
18602: OR
18603: PUSH
18604: LD_VAR 0 1
18608: PPUSH
18609: CALL_OW 266
18613: PUSH
18614: LD_INT 36
18616: EQUAL
18617: OR
18618: PUSH
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 266
18628: PUSH
18629: LD_INT 0
18631: EQUAL
18632: OR
18633: PUSH
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL_OW 266
18643: PUSH
18644: LD_INT 24
18646: EQUAL
18647: OR
18648: PUSH
18649: LD_VAR 0 1
18653: PPUSH
18654: CALL_OW 266
18658: PUSH
18659: LD_INT 17
18661: EQUAL
18662: OR
18663: PUSH
18664: LD_VAR 0 1
18668: PPUSH
18669: CALL_OW 266
18673: PUSH
18674: LD_INT 25
18676: EQUAL
18677: OR
18678: PUSH
18679: LD_VAR 0 1
18683: PPUSH
18684: CALL_OW 266
18688: PUSH
18689: LD_INT 19
18691: EQUAL
18692: OR
18693: PUSH
18694: LD_VAR 0 1
18698: PPUSH
18699: CALL_OW 266
18703: PUSH
18704: LD_INT 20
18706: EQUAL
18707: OR
18708: PUSH
18709: LD_VAR 0 1
18713: PPUSH
18714: CALL_OW 266
18718: PUSH
18719: LD_INT 18
18721: EQUAL
18722: OR
18723: PUSH
18724: LD_VAR 0 1
18728: PPUSH
18729: CALL_OW 266
18733: PUSH
18734: LD_INT 21
18736: EQUAL
18737: OR
18738: PUSH
18739: LD_VAR 0 1
18743: PPUSH
18744: CALL_OW 266
18748: PUSH
18749: LD_INT 23
18751: EQUAL
18752: OR
18753: PUSH
18754: LD_VAR 0 1
18758: PPUSH
18759: CALL_OW 266
18763: PUSH
18764: LD_INT 16
18766: EQUAL
18767: OR
18768: PUSH
18769: LD_VAR 0 1
18773: PPUSH
18774: CALL_OW 266
18778: PUSH
18779: LD_INT 6
18781: EQUAL
18782: OR
18783: PUSH
18784: LD_VAR 0 1
18788: PPUSH
18789: CALL_OW 266
18793: PUSH
18794: LD_INT 29
18796: EQUAL
18797: OR
18798: PUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 266
18808: PUSH
18809: LD_INT 26
18811: EQUAL
18812: OR
18813: PUSH
18814: LD_VAR 0 1
18818: PPUSH
18819: CALL_OW 266
18823: PUSH
18824: LD_INT 30
18826: EQUAL
18827: OR
18828: PUSH
18829: LD_VAR 0 1
18833: PPUSH
18834: CALL_OW 266
18838: PUSH
18839: LD_INT 28
18841: EQUAL
18842: OR
18843: PUSH
18844: LD_VAR 0 1
18848: PPUSH
18849: CALL_OW 266
18853: PUSH
18854: LD_INT 27
18856: EQUAL
18857: OR
18858: PUSH
18859: LD_VAR 0 1
18863: PPUSH
18864: CALL_OW 266
18868: PUSH
18869: LD_INT 33
18871: EQUAL
18872: OR
18873: PUSH
18874: LD_VAR 0 1
18878: PPUSH
18879: CALL_OW 266
18883: PUSH
18884: LD_INT 2
18886: EQUAL
18887: OR
18888: PUSH
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 266
18898: PUSH
18899: LD_INT 4
18901: EQUAL
18902: OR
18903: IFFALSE 18989
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18905: LD_ADDR_EXP 30
18909: PUSH
18910: LD_EXP 30
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 266
18924: ADD
18925: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18926: LD_ADDR_EXP 30
18930: PUSH
18931: LD_EXP 30
18935: PUSH
18936: LD_VAR 0 1
18940: PPUSH
18941: CALL_OW 250
18945: ADD
18946: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18947: LD_ADDR_EXP 30
18951: PUSH
18952: LD_EXP 30
18956: PUSH
18957: LD_VAR 0 1
18961: PPUSH
18962: CALL_OW 251
18966: ADD
18967: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18968: LD_ADDR_EXP 30
18972: PUSH
18973: LD_EXP 30
18977: PUSH
18978: LD_VAR 0 1
18982: PPUSH
18983: CALL_OW 254
18987: ADD
18988: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18989: LD_VAR 0 1
18993: PPUSH
18994: CALL_OW 266
18998: PUSH
18999: LD_INT 1
19001: EQUAL
19002: IFFALSE 19081
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
19004: LD_ADDR_EXP 30
19008: PUSH
19009: LD_EXP 30
19013: PUSH
19014: LD_INT 0
19016: ADD
19017: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19018: LD_ADDR_EXP 30
19022: PUSH
19023: LD_EXP 30
19027: PUSH
19028: LD_VAR 0 1
19032: PPUSH
19033: CALL_OW 250
19037: ADD
19038: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19039: LD_ADDR_EXP 30
19043: PUSH
19044: LD_EXP 30
19048: PUSH
19049: LD_VAR 0 1
19053: PPUSH
19054: CALL_OW 251
19058: ADD
19059: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19060: LD_ADDR_EXP 30
19064: PUSH
19065: LD_EXP 30
19069: PUSH
19070: LD_VAR 0 1
19074: PPUSH
19075: CALL_OW 254
19079: ADD
19080: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 266
19090: PUSH
19091: LD_INT 3
19093: EQUAL
19094: IFFALSE 19173
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
19096: LD_ADDR_EXP 30
19100: PUSH
19101: LD_EXP 30
19105: PUSH
19106: LD_INT 2
19108: ADD
19109: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19110: LD_ADDR_EXP 30
19114: PUSH
19115: LD_EXP 30
19119: PUSH
19120: LD_VAR 0 1
19124: PPUSH
19125: CALL_OW 250
19129: ADD
19130: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19131: LD_ADDR_EXP 30
19135: PUSH
19136: LD_EXP 30
19140: PUSH
19141: LD_VAR 0 1
19145: PPUSH
19146: CALL_OW 251
19150: ADD
19151: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19152: LD_ADDR_EXP 30
19156: PUSH
19157: LD_EXP 30
19161: PUSH
19162: LD_VAR 0 1
19166: PPUSH
19167: CALL_OW 254
19171: ADD
19172: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
19173: LD_VAR 0 1
19177: PPUSH
19178: CALL_OW 266
19182: PUSH
19183: LD_INT 5
19185: EQUAL
19186: IFFALSE 19265
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
19188: LD_ADDR_EXP 30
19192: PUSH
19193: LD_EXP 30
19197: PUSH
19198: LD_INT 4
19200: ADD
19201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19202: LD_ADDR_EXP 30
19206: PUSH
19207: LD_EXP 30
19211: PUSH
19212: LD_VAR 0 1
19216: PPUSH
19217: CALL_OW 250
19221: ADD
19222: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19223: LD_ADDR_EXP 30
19227: PUSH
19228: LD_EXP 30
19232: PUSH
19233: LD_VAR 0 1
19237: PPUSH
19238: CALL_OW 251
19242: ADD
19243: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19244: LD_ADDR_EXP 30
19248: PUSH
19249: LD_EXP 30
19253: PUSH
19254: LD_VAR 0 1
19258: PPUSH
19259: CALL_OW 254
19263: ADD
19264: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
19265: LD_VAR 0 1
19269: PPUSH
19270: CALL_OW 247
19274: PUSH
19275: LD_INT 1
19277: EQUAL
19278: IFFALSE 19328
// begin for i in defenders_list do
19280: LD_ADDR_VAR 0 2
19284: PUSH
19285: LD_EXP 31
19289: PUSH
19290: FOR_IN
19291: IFFALSE 19326
// if i = unit then
19293: LD_VAR 0 2
19297: PUSH
19298: LD_VAR 0 1
19302: EQUAL
19303: IFFALSE 19324
// defenders_list = defenders_list diff [ unit ] ;
19305: LD_ADDR_EXP 31
19309: PUSH
19310: LD_EXP 31
19314: PUSH
19315: LD_VAR 0 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: DIFF
19323: ST_TO_ADDR
19324: GO 19290
19326: POP
19327: POP
// end ; end ; end ; end_of_file
19328: PPOPN 2
19330: END
// every 0 0$1 do
19331: GO 19333
19333: DISABLE
// begin enable ;
19334: ENABLE
// if escapeAvalaible = 0 then
19335: LD_EXP 35
19339: PUSH
19340: LD_INT 0
19342: EQUAL
19343: IFFALSE 19355
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
19345: LD_INT 3
19347: PPUSH
19348: LD_INT 6
19350: PPUSH
19351: CALL 6978 0 2
// if escapeAvalaible = 0 then
19355: LD_EXP 35
19359: PUSH
19360: LD_INT 0
19362: EQUAL
19363: IFFALSE 19375
// DefenseBase ( 1 , RussianBaseTerritory ) ;
19365: LD_INT 1
19367: PPUSH
19368: LD_INT 24
19370: PPUSH
19371: CALL 7725 0 2
// if russianAI = 1 then
19375: LD_EXP 26
19379: PUSH
19380: LD_INT 1
19382: EQUAL
19383: IFFALSE 19446
// begin RepairBuilding ( 3 , ruDepot ) ;
19385: LD_INT 3
19387: PPUSH
19388: LD_EXP 27
19392: PPUSH
19393: CALL 8025 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
19397: LD_INT 3
19399: PPUSH
19400: LD_INT 7
19402: PPUSH
19403: LD_INT 6
19405: PPUSH
19406: LD_EXP 28
19410: PPUSH
19411: CALL 8490 0 4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19415: LD_INT 3
19417: PPUSH
19418: LD_EXP 30
19422: PPUSH
19423: CALL 8284 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
19427: LD_INT 6
19429: PPUSH
19430: LD_INT 8
19432: PPUSH
19433: LD_INT 93
19435: PPUSH
19436: LD_INT 93
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: CALL 8756 0 5
// end ; if SikorskyArrive = 1 then
19446: LD_EXP 17
19450: PUSH
19451: LD_INT 1
19453: EQUAL
19454: IFFALSE 19475
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
19456: LD_INT 3
19458: PPUSH
19459: LD_INT 10
19461: PPUSH
19462: LD_INT 53
19464: PPUSH
19465: LD_INT 59
19467: PPUSH
19468: LD_INT 3
19470: PPUSH
19471: CALL 8756 0 5
// end ;
19475: END
// every 0 0$1 trigger SikorskyAI = 1 do
19476: LD_EXP 19
19480: PUSH
19481: LD_INT 1
19483: EQUAL
19484: IFFALSE 19522
19486: GO 19488
19488: DISABLE
// begin enable ;
19489: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
19490: LD_INT 4
19492: PPUSH
19493: LD_INT 10
19495: PPUSH
19496: LD_INT 93
19498: PPUSH
19499: LD_INT 93
19501: PPUSH
19502: LD_INT 3
19504: PPUSH
19505: CALL 8756 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
19509: LD_INT 4
19511: PPUSH
19512: LD_INT 11
19514: PPUSH
19515: LD_INT 3
19517: PPUSH
19518: CALL 14693 0 3
// end ;
19522: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19523: LD_EXP 26
19527: PUSH
19528: LD_INT 1
19530: EQUAL
19531: PUSH
19532: LD_EXP 29
19536: PPUSH
19537: CALL_OW 302
19541: AND
19542: PUSH
19543: LD_EXP 29
19547: PPUSH
19548: CALL_OW 255
19552: PUSH
19553: LD_INT 3
19555: EQUAL
19556: AND
19557: PUSH
19558: LD_INT 22
19560: PUSH
19561: LD_INT 3
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 21
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 33
19580: PUSH
19581: LD_INT 3
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: LIST
19592: PPUSH
19593: CALL_OW 69
19597: PUSH
19598: LD_INT 0
19600: EQUAL
19601: AND
19602: IFFALSE 19781
19604: GO 19606
19606: DISABLE
// begin enable ;
19607: ENABLE
// if Difficulty = 1 then
19608: LD_OWVAR 67
19612: PUSH
19613: LD_INT 1
19615: EQUAL
19616: IFFALSE 19667
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
19618: LD_INT 3
19620: PPUSH
19621: LD_EXP 29
19625: PPUSH
19626: LD_INT 5
19628: PPUSH
19629: LD_INT 8
19631: PPUSH
19632: CALL_OW 12
19636: PPUSH
19637: LD_INT 1
19639: PPUSH
19640: LD_INT 43
19642: PUSH
19643: LD_INT 44
19645: PUSH
19646: LD_INT 46
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: LD_INT 3
19659: PPUSH
19660: LD_INT 24
19662: PPUSH
19663: CALL 9591 0 8
// if Difficulty = 2 then
19667: LD_OWVAR 67
19671: PUSH
19672: LD_INT 2
19674: EQUAL
19675: IFFALSE 19726
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
19677: LD_INT 3
19679: PPUSH
19680: LD_EXP 29
19684: PPUSH
19685: LD_INT 6
19687: PPUSH
19688: LD_INT 8
19690: PPUSH
19691: CALL_OW 12
19695: PPUSH
19696: LD_INT 1
19698: PPUSH
19699: LD_INT 44
19701: PUSH
19702: LD_INT 44
19704: PUSH
19705: LD_INT 46
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: PPUSH
19713: LD_INT 1
19715: PPUSH
19716: LD_INT 3
19718: PPUSH
19719: LD_INT 24
19721: PPUSH
19722: CALL 9591 0 8
// if Difficulty = 3 then
19726: LD_OWVAR 67
19730: PUSH
19731: LD_INT 3
19733: EQUAL
19734: IFFALSE 19781
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
19736: LD_INT 3
19738: PPUSH
19739: LD_EXP 29
19743: PPUSH
19744: LD_INT 7
19746: PPUSH
19747: LD_INT 8
19749: PPUSH
19750: CALL_OW 12
19754: PPUSH
19755: LD_INT 1
19757: PPUSH
19758: LD_INT 44
19760: PUSH
19761: LD_INT 46
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PPUSH
19768: LD_INT 1
19770: PPUSH
19771: LD_INT 3
19773: PPUSH
19774: LD_INT 24
19776: PPUSH
19777: CALL 9591 0 8
// end ; end_of_file
19781: END
// every 0 0$1 trigger firstAttack = 1 do
19782: LD_EXP 32
19786: PUSH
19787: LD_INT 1
19789: EQUAL
19790: IFFALSE 19896
19792: GO 19794
19794: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19795: LD_INT 6
19797: PPUSH
19798: LD_INT 3
19800: PPUSH
19801: LD_INT 5
19803: PPUSH
19804: LD_INT 6
19806: PPUSH
19807: CALL_OW 12
19811: PUSH
19812: LD_INT 5
19814: PPUSH
19815: LD_INT 6
19817: PPUSH
19818: CALL_OW 12
19822: PUSH
19823: LD_INT 5
19825: PPUSH
19826: LD_INT 6
19828: PPUSH
19829: CALL_OW 12
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: PUSH
19839: LD_OWVAR 67
19843: ARRAY
19844: PPUSH
19845: LD_INT 0
19847: PPUSH
19848: LD_INT 0
19850: PPUSH
19851: LD_INT 0
19853: PPUSH
19854: LD_INT 0
19856: PPUSH
19857: LD_EXP 24
19861: PPUSH
19862: LD_EXP 25
19866: PPUSH
19867: CALL_OW 12
19871: PPUSH
19872: LD_INT 16
19874: PPUSH
19875: LD_INT 7
19877: PPUSH
19878: LD_INT 1
19880: PPUSH
19881: LD_INT 1
19883: PPUSH
19884: LD_INT 3
19886: PPUSH
19887: CALL_OW 12
19891: PPUSH
19892: CALL 10155 0 12
19896: END
// every 0 0$1 trigger firstAttack = 1 do
19897: LD_EXP 32
19901: PUSH
19902: LD_INT 1
19904: EQUAL
19905: IFFALSE 20005
19907: GO 19909
19909: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19910: LD_INT 16
19912: PPUSH
19913: LD_INT 6
19915: PPUSH
19916: LD_INT 5
19918: PPUSH
19919: LD_INT 8
19921: PPUSH
19922: CALL_OW 12
19926: PUSH
19927: LD_INT 6
19929: PPUSH
19930: LD_INT 9
19932: PPUSH
19933: CALL_OW 12
19937: PUSH
19938: LD_INT 7
19940: PPUSH
19941: LD_INT 9
19943: PPUSH
19944: CALL_OW 12
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: LD_OWVAR 67
19958: ARRAY
19959: PPUSH
19960: LD_EXP 24
19964: PPUSH
19965: LD_EXP 25
19969: PPUSH
19970: CALL_OW 12
19974: PPUSH
19975: LD_INT 3
19977: PPUSH
19978: LD_INT 1
19980: PPUSH
19981: LD_INT 3
19983: PPUSH
19984: LD_INT 44
19986: PUSH
19987: LD_INT 46
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PPUSH
19994: EMPTY
19995: PPUSH
19996: EMPTY
19997: PPUSH
19998: LD_INT 1
20000: PPUSH
20001: CALL 13015 0 11
20005: END
// every 3 3$1 trigger firstAttack = 1 do
20006: LD_EXP 32
20010: PUSH
20011: LD_INT 1
20013: EQUAL
20014: IFFALSE 20120
20016: GO 20018
20018: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20019: LD_INT 6
20021: PPUSH
20022: LD_INT 3
20024: PPUSH
20025: LD_INT 5
20027: PPUSH
20028: LD_INT 6
20030: PPUSH
20031: CALL_OW 12
20035: PUSH
20036: LD_INT 5
20038: PPUSH
20039: LD_INT 6
20041: PPUSH
20042: CALL_OW 12
20046: PUSH
20047: LD_INT 5
20049: PPUSH
20050: LD_INT 6
20052: PPUSH
20053: CALL_OW 12
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PUSH
20063: LD_OWVAR 67
20067: ARRAY
20068: PPUSH
20069: LD_INT 0
20071: PPUSH
20072: LD_INT 0
20074: PPUSH
20075: LD_INT 0
20077: PPUSH
20078: LD_INT 0
20080: PPUSH
20081: LD_EXP 24
20085: PPUSH
20086: LD_EXP 25
20090: PPUSH
20091: CALL_OW 12
20095: PPUSH
20096: LD_INT 16
20098: PPUSH
20099: LD_INT 7
20101: PPUSH
20102: LD_INT 1
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: LD_INT 3
20110: PPUSH
20111: CALL_OW 12
20115: PPUSH
20116: CALL 10155 0 12
20120: END
// every 3 3$1 trigger firstAttack = 1 do
20121: LD_EXP 32
20125: PUSH
20126: LD_INT 1
20128: EQUAL
20129: IFFALSE 20237
20131: GO 20133
20133: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20134: LD_INT 16
20136: PPUSH
20137: LD_INT 6
20139: PPUSH
20140: LD_INT 5
20142: PPUSH
20143: LD_INT 8
20145: PPUSH
20146: CALL_OW 12
20150: PUSH
20151: LD_INT 6
20153: PPUSH
20154: LD_INT 9
20156: PPUSH
20157: CALL_OW 12
20161: PUSH
20162: LD_INT 7
20164: PPUSH
20165: LD_INT 9
20167: PPUSH
20168: CALL_OW 12
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: LD_OWVAR 67
20182: ARRAY
20183: PPUSH
20184: LD_EXP 24
20188: PPUSH
20189: LD_EXP 25
20193: PPUSH
20194: CALL_OW 12
20198: PPUSH
20199: LD_INT 3
20201: PPUSH
20202: LD_INT 1
20204: PPUSH
20205: LD_INT 3
20207: PPUSH
20208: LD_INT 42
20210: PUSH
20211: LD_INT 43
20213: PUSH
20214: LD_INT 44
20216: PUSH
20217: LD_INT 46
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: PPUSH
20226: EMPTY
20227: PPUSH
20228: EMPTY
20229: PPUSH
20230: LD_INT 1
20232: PPUSH
20233: CALL 13015 0 11
20237: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
20238: LD_EXP 32
20242: PUSH
20243: LD_INT 1
20245: EQUAL
20246: PUSH
20247: LD_EXP 37
20251: PUSH
20252: LD_INT 0
20254: EQUAL
20255: AND
20256: IFFALSE 20362
20258: GO 20260
20260: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20261: LD_INT 6
20263: PPUSH
20264: LD_INT 3
20266: PPUSH
20267: LD_INT 5
20269: PPUSH
20270: LD_INT 6
20272: PPUSH
20273: CALL_OW 12
20277: PUSH
20278: LD_INT 5
20280: PPUSH
20281: LD_INT 6
20283: PPUSH
20284: CALL_OW 12
20288: PUSH
20289: LD_INT 5
20291: PPUSH
20292: LD_INT 6
20294: PPUSH
20295: CALL_OW 12
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: PUSH
20305: LD_OWVAR 67
20309: ARRAY
20310: PPUSH
20311: LD_INT 0
20313: PPUSH
20314: LD_INT 0
20316: PPUSH
20317: LD_INT 0
20319: PPUSH
20320: LD_INT 0
20322: PPUSH
20323: LD_EXP 24
20327: PPUSH
20328: LD_EXP 25
20332: PPUSH
20333: CALL_OW 12
20337: PPUSH
20338: LD_INT 16
20340: PPUSH
20341: LD_INT 7
20343: PPUSH
20344: LD_INT 1
20346: PPUSH
20347: LD_INT 1
20349: PPUSH
20350: LD_INT 3
20352: PPUSH
20353: CALL_OW 12
20357: PPUSH
20358: CALL 10155 0 12
20362: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
20363: LD_EXP 32
20367: PUSH
20368: LD_INT 1
20370: EQUAL
20371: PUSH
20372: LD_EXP 37
20376: PUSH
20377: LD_INT 0
20379: EQUAL
20380: AND
20381: IFFALSE 20485
20383: GO 20385
20385: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20386: LD_INT 16
20388: PPUSH
20389: LD_INT 6
20391: PPUSH
20392: LD_INT 5
20394: PPUSH
20395: LD_INT 8
20397: PPUSH
20398: CALL_OW 12
20402: PUSH
20403: LD_INT 6
20405: PPUSH
20406: LD_INT 9
20408: PPUSH
20409: CALL_OW 12
20413: PUSH
20414: LD_INT 7
20416: PPUSH
20417: LD_INT 9
20419: PPUSH
20420: CALL_OW 12
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: PUSH
20430: LD_OWVAR 67
20434: ARRAY
20435: PPUSH
20436: LD_EXP 24
20440: PPUSH
20441: LD_EXP 25
20445: PPUSH
20446: CALL_OW 12
20450: PPUSH
20451: LD_INT 3
20453: PPUSH
20454: LD_INT 1
20456: PPUSH
20457: LD_INT 3
20459: PPUSH
20460: LD_INT 43
20462: PUSH
20463: LD_INT 44
20465: PUSH
20466: LD_INT 46
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: PPUSH
20474: EMPTY
20475: PPUSH
20476: EMPTY
20477: PPUSH
20478: LD_INT 1
20480: PPUSH
20481: CALL 13015 0 11
20485: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
20486: LD_EXP 32
20490: PUSH
20491: LD_INT 1
20493: EQUAL
20494: PUSH
20495: LD_EXP 37
20499: PUSH
20500: LD_INT 0
20502: EQUAL
20503: AND
20504: IFFALSE 20604
20506: GO 20508
20508: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20509: LD_INT 16
20511: PPUSH
20512: LD_INT 6
20514: PPUSH
20515: LD_INT 5
20517: PPUSH
20518: LD_INT 8
20520: PPUSH
20521: CALL_OW 12
20525: PUSH
20526: LD_INT 6
20528: PPUSH
20529: LD_INT 9
20531: PPUSH
20532: CALL_OW 12
20536: PUSH
20537: LD_INT 7
20539: PPUSH
20540: LD_INT 9
20542: PPUSH
20543: CALL_OW 12
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: PUSH
20553: LD_OWVAR 67
20557: ARRAY
20558: PPUSH
20559: LD_EXP 24
20563: PPUSH
20564: LD_EXP 25
20568: PPUSH
20569: CALL_OW 12
20573: PPUSH
20574: LD_INT 3
20576: PPUSH
20577: LD_INT 1
20579: PPUSH
20580: LD_INT 3
20582: PPUSH
20583: LD_INT 44
20585: PUSH
20586: LD_INT 46
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PPUSH
20593: EMPTY
20594: PPUSH
20595: EMPTY
20596: PPUSH
20597: LD_INT 1
20599: PPUSH
20600: CALL 13015 0 11
20604: END
// every 1 1$1 trigger secondAttack = 1 do
20605: LD_EXP 33
20609: PUSH
20610: LD_INT 1
20612: EQUAL
20613: IFFALSE 20719
20615: GO 20617
20617: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20618: LD_INT 6
20620: PPUSH
20621: LD_INT 3
20623: PPUSH
20624: LD_INT 4
20626: PPUSH
20627: LD_INT 7
20629: PPUSH
20630: CALL_OW 12
20634: PUSH
20635: LD_INT 6
20637: PPUSH
20638: LD_INT 7
20640: PPUSH
20641: CALL_OW 12
20645: PUSH
20646: LD_INT 6
20648: PPUSH
20649: LD_INT 10
20651: PPUSH
20652: CALL_OW 12
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: PUSH
20662: LD_OWVAR 67
20666: ARRAY
20667: PPUSH
20668: LD_INT 0
20670: PPUSH
20671: LD_INT 0
20673: PPUSH
20674: LD_INT 0
20676: PPUSH
20677: LD_INT 0
20679: PPUSH
20680: LD_EXP 24
20684: PPUSH
20685: LD_EXP 25
20689: PPUSH
20690: CALL_OW 12
20694: PPUSH
20695: LD_INT 16
20697: PPUSH
20698: LD_INT 7
20700: PPUSH
20701: LD_INT 1
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: LD_INT 3
20709: PPUSH
20710: CALL_OW 12
20714: PPUSH
20715: CALL 10155 0 12
20719: END
// every 1 1$1 trigger secondAttack = 1 do
20720: LD_EXP 33
20724: PUSH
20725: LD_INT 1
20727: EQUAL
20728: IFFALSE 20832
20730: GO 20732
20732: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20733: LD_INT 16
20735: PPUSH
20736: LD_INT 6
20738: PPUSH
20739: LD_INT 5
20741: PPUSH
20742: LD_INT 8
20744: PPUSH
20745: CALL_OW 12
20749: PUSH
20750: LD_INT 6
20752: PPUSH
20753: LD_INT 9
20755: PPUSH
20756: CALL_OW 12
20760: PUSH
20761: LD_INT 7
20763: PPUSH
20764: LD_INT 9
20766: PPUSH
20767: CALL_OW 12
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: LD_OWVAR 67
20781: ARRAY
20782: PPUSH
20783: LD_EXP 24
20787: PPUSH
20788: LD_EXP 25
20792: PPUSH
20793: CALL_OW 12
20797: PPUSH
20798: LD_INT 3
20800: PPUSH
20801: LD_INT 1
20803: PPUSH
20804: LD_INT 3
20806: PPUSH
20807: LD_INT 43
20809: PUSH
20810: LD_INT 44
20812: PUSH
20813: LD_INT 46
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: PPUSH
20821: EMPTY
20822: PPUSH
20823: EMPTY
20824: PPUSH
20825: LD_INT 1
20827: PPUSH
20828: CALL 13015 0 11
20832: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20833: LD_EXP 17
20837: PUSH
20838: LD_INT 0
20840: EQUAL
20841: IFFALSE 20947
20843: GO 20845
20845: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20846: LD_INT 6
20848: PPUSH
20849: LD_INT 3
20851: PPUSH
20852: LD_INT 8
20854: PPUSH
20855: LD_INT 9
20857: PPUSH
20858: CALL_OW 12
20862: PUSH
20863: LD_INT 7
20865: PPUSH
20866: LD_INT 10
20868: PPUSH
20869: CALL_OW 12
20873: PUSH
20874: LD_INT 8
20876: PPUSH
20877: LD_INT 10
20879: PPUSH
20880: CALL_OW 12
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: PUSH
20890: LD_OWVAR 67
20894: ARRAY
20895: PPUSH
20896: LD_INT 0
20898: PPUSH
20899: LD_INT 0
20901: PPUSH
20902: LD_INT 0
20904: PPUSH
20905: LD_INT 0
20907: PPUSH
20908: LD_EXP 24
20912: PPUSH
20913: LD_EXP 25
20917: PPUSH
20918: CALL_OW 12
20922: PPUSH
20923: LD_INT 16
20925: PPUSH
20926: LD_INT 7
20928: PPUSH
20929: LD_INT 1
20931: PPUSH
20932: LD_INT 1
20934: PPUSH
20935: LD_INT 3
20937: PPUSH
20938: CALL_OW 12
20942: PPUSH
20943: CALL 10155 0 12
20947: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20948: LD_EXP 17
20952: PUSH
20953: LD_INT 0
20955: EQUAL
20956: IFFALSE 21056
20958: GO 20960
20960: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20961: LD_INT 16
20963: PPUSH
20964: LD_INT 6
20966: PPUSH
20967: LD_INT 5
20969: PPUSH
20970: LD_INT 8
20972: PPUSH
20973: CALL_OW 12
20977: PUSH
20978: LD_INT 6
20980: PPUSH
20981: LD_INT 9
20983: PPUSH
20984: CALL_OW 12
20988: PUSH
20989: LD_INT 7
20991: PPUSH
20992: LD_INT 9
20994: PPUSH
20995: CALL_OW 12
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: PUSH
21005: LD_OWVAR 67
21009: ARRAY
21010: PPUSH
21011: LD_EXP 24
21015: PPUSH
21016: LD_EXP 25
21020: PPUSH
21021: CALL_OW 12
21025: PPUSH
21026: LD_INT 3
21028: PPUSH
21029: LD_INT 1
21031: PPUSH
21032: LD_INT 3
21034: PPUSH
21035: LD_INT 44
21037: PUSH
21038: LD_INT 46
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PPUSH
21045: EMPTY
21046: PPUSH
21047: EMPTY
21048: PPUSH
21049: LD_INT 1
21051: PPUSH
21052: CALL 13015 0 11
21056: END
// every 25 25$0 trigger SikorskyArrive = 0 do
21057: LD_EXP 17
21061: PUSH
21062: LD_INT 0
21064: EQUAL
21065: IFFALSE 21171
21067: GO 21069
21069: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21070: LD_INT 6
21072: PPUSH
21073: LD_INT 3
21075: PPUSH
21076: LD_INT 8
21078: PPUSH
21079: LD_INT 9
21081: PPUSH
21082: CALL_OW 12
21086: PUSH
21087: LD_INT 7
21089: PPUSH
21090: LD_INT 10
21092: PPUSH
21093: CALL_OW 12
21097: PUSH
21098: LD_INT 8
21100: PPUSH
21101: LD_INT 10
21103: PPUSH
21104: CALL_OW 12
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: PUSH
21114: LD_OWVAR 67
21118: ARRAY
21119: PPUSH
21120: LD_INT 0
21122: PPUSH
21123: LD_INT 0
21125: PPUSH
21126: LD_INT 0
21128: PPUSH
21129: LD_INT 0
21131: PPUSH
21132: LD_EXP 24
21136: PPUSH
21137: LD_EXP 25
21141: PPUSH
21142: CALL_OW 12
21146: PPUSH
21147: LD_INT 16
21149: PPUSH
21150: LD_INT 7
21152: PPUSH
21153: LD_INT 1
21155: PPUSH
21156: LD_INT 1
21158: PPUSH
21159: LD_INT 3
21161: PPUSH
21162: CALL_OW 12
21166: PPUSH
21167: CALL 10155 0 12
21171: END
// every 25 25$0 trigger SikorskyArrive = 0 do
21172: LD_EXP 17
21176: PUSH
21177: LD_INT 0
21179: EQUAL
21180: IFFALSE 21280
21182: GO 21184
21184: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21185: LD_INT 16
21187: PPUSH
21188: LD_INT 6
21190: PPUSH
21191: LD_INT 5
21193: PPUSH
21194: LD_INT 8
21196: PPUSH
21197: CALL_OW 12
21201: PUSH
21202: LD_INT 6
21204: PPUSH
21205: LD_INT 9
21207: PPUSH
21208: CALL_OW 12
21212: PUSH
21213: LD_INT 7
21215: PPUSH
21216: LD_INT 9
21218: PPUSH
21219: CALL_OW 12
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: PUSH
21229: LD_OWVAR 67
21233: ARRAY
21234: PPUSH
21235: LD_EXP 24
21239: PPUSH
21240: LD_EXP 25
21244: PPUSH
21245: CALL_OW 12
21249: PPUSH
21250: LD_INT 3
21252: PPUSH
21253: LD_INT 1
21255: PPUSH
21256: LD_INT 3
21258: PPUSH
21259: LD_INT 44
21261: PUSH
21262: LD_INT 46
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PPUSH
21269: EMPTY
21270: PPUSH
21271: EMPTY
21272: PPUSH
21273: LD_INT 1
21275: PPUSH
21276: CALL 13015 0 11
21280: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21281: LD_EXP 17
21285: PUSH
21286: LD_INT 0
21288: EQUAL
21289: IFFALSE 21395
21291: GO 21293
21293: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21294: LD_INT 6
21296: PPUSH
21297: LD_INT 3
21299: PPUSH
21300: LD_INT 8
21302: PPUSH
21303: LD_INT 9
21305: PPUSH
21306: CALL_OW 12
21310: PUSH
21311: LD_INT 7
21313: PPUSH
21314: LD_INT 10
21316: PPUSH
21317: CALL_OW 12
21321: PUSH
21322: LD_INT 8
21324: PPUSH
21325: LD_INT 10
21327: PPUSH
21328: CALL_OW 12
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: PUSH
21338: LD_OWVAR 67
21342: ARRAY
21343: PPUSH
21344: LD_INT 0
21346: PPUSH
21347: LD_INT 0
21349: PPUSH
21350: LD_INT 0
21352: PPUSH
21353: LD_INT 0
21355: PPUSH
21356: LD_EXP 24
21360: PPUSH
21361: LD_EXP 25
21365: PPUSH
21366: CALL_OW 12
21370: PPUSH
21371: LD_INT 16
21373: PPUSH
21374: LD_INT 7
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: LD_INT 3
21385: PPUSH
21386: CALL_OW 12
21390: PPUSH
21391: CALL 10155 0 12
21395: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21396: LD_EXP 17
21400: PUSH
21401: LD_INT 0
21403: EQUAL
21404: IFFALSE 21504
21406: GO 21408
21408: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
21409: LD_INT 16
21411: PPUSH
21412: LD_INT 6
21414: PPUSH
21415: LD_INT 5
21417: PPUSH
21418: LD_INT 8
21420: PPUSH
21421: CALL_OW 12
21425: PUSH
21426: LD_INT 6
21428: PPUSH
21429: LD_INT 9
21431: PPUSH
21432: CALL_OW 12
21436: PUSH
21437: LD_INT 7
21439: PPUSH
21440: LD_INT 9
21442: PPUSH
21443: CALL_OW 12
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: PUSH
21453: LD_OWVAR 67
21457: ARRAY
21458: PPUSH
21459: LD_EXP 24
21463: PPUSH
21464: LD_EXP 25
21468: PPUSH
21469: CALL_OW 12
21473: PPUSH
21474: LD_INT 3
21476: PPUSH
21477: LD_INT 1
21479: PPUSH
21480: LD_INT 3
21482: PPUSH
21483: LD_INT 44
21485: PUSH
21486: LD_INT 46
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: EMPTY
21494: PPUSH
21495: EMPTY
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL 13015 0 11
21504: END
// every 0 0$1 trigger timerStatus = 1 do
21505: LD_EXP 34
21509: PUSH
21510: LD_INT 1
21512: EQUAL
21513: IFFALSE 21550
21515: GO 21517
21517: DISABLE
// begin enable ;
21518: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
21519: LD_ADDR_OWVAR 47
21523: PUSH
21524: LD_STRING #Am08-1
21526: PUSH
21527: LD_EXP 18
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
21536: LD_ADDR_EXP 18
21540: PUSH
21541: LD_EXP 18
21545: PUSH
21546: LD_INT 35
21548: MINUS
21549: ST_TO_ADDR
// end ; end_of_file
21550: END
// every 1 1$0 do
21551: GO 21553
21553: DISABLE
// begin if supply <= 13 and supply > 7 then
21554: LD_EXP 38
21558: PUSH
21559: LD_INT 13
21561: LESSEQUAL
21562: PUSH
21563: LD_EXP 38
21567: PUSH
21568: LD_INT 7
21570: GREATER
21571: AND
21572: IFFALSE 21595
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
21574: LD_INT 3
21576: PPUSH
21577: LD_INT 5
21579: PPUSH
21580: CALL_OW 12
21584: PPUSH
21585: LD_INT 5
21587: PPUSH
21588: LD_INT 1
21590: PPUSH
21591: CALL_OW 55
// if supply <= 7 and supply > 4 then
21595: LD_EXP 38
21599: PUSH
21600: LD_INT 7
21602: LESSEQUAL
21603: PUSH
21604: LD_EXP 38
21608: PUSH
21609: LD_INT 4
21611: GREATER
21612: AND
21613: IFFALSE 21636
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
21615: LD_INT 3
21617: PPUSH
21618: LD_INT 5
21620: PPUSH
21621: CALL_OW 12
21625: PPUSH
21626: LD_INT 20
21628: PPUSH
21629: LD_INT 1
21631: PPUSH
21632: CALL_OW 55
// if supply <= 4 and supply > 0 then
21636: LD_EXP 38
21640: PUSH
21641: LD_INT 4
21643: LESSEQUAL
21644: PUSH
21645: LD_EXP 38
21649: PUSH
21650: LD_INT 0
21652: GREATER
21653: AND
21654: IFFALSE 21677
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
21656: LD_INT 3
21658: PPUSH
21659: LD_INT 5
21661: PPUSH
21662: CALL_OW 12
21666: PPUSH
21667: LD_INT 21
21669: PPUSH
21670: LD_INT 1
21672: PPUSH
21673: CALL_OW 55
// if supply > 0 then
21677: LD_EXP 38
21681: PUSH
21682: LD_INT 0
21684: GREATER
21685: IFFALSE 21702
// begin supply = supply - 1 ;
21687: LD_ADDR_EXP 38
21691: PUSH
21692: LD_EXP 38
21696: PUSH
21697: LD_INT 1
21699: MINUS
21700: ST_TO_ADDR
// enable ;
21701: ENABLE
// end ; end ; end_of_file
21702: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
21703: LD_EXP 37
21707: PUSH
21708: LD_INT 1
21710: EQUAL
21711: PUSH
21712: LD_EXP 1
21716: PPUSH
21717: CALL_OW 301
21721: AND
21722: IFFALSE 21734
21724: GO 21726
21726: DISABLE
// YouLost ( JMM ) ;
21727: LD_STRING JMM
21729: PPUSH
21730: CALL_OW 104
21734: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
21735: LD_EXP 17
21739: PUSH
21740: LD_INT 1
21742: EQUAL
21743: PUSH
21744: LD_EXP 15
21748: PPUSH
21749: CALL_OW 301
21753: AND
21754: IFFALSE 21786
21756: GO 21758
21758: DISABLE
// begin DialogueOn ;
21759: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
21763: LD_EXP 22
21767: PPUSH
21768: LD_STRING D8a-Pow-1
21770: PPUSH
21771: CALL_OW 94
// DialogueOff ;
21775: CALL_OW 7
// YouLost ( Dismissed ) ;
21779: LD_STRING Dismissed
21781: PPUSH
21782: CALL_OW 104
// end ;
21786: END
// every 0 0$1 trigger IsDead ( amDepot ) do
21787: LD_EXP 36
21791: PPUSH
21792: CALL_OW 301
21796: IFFALSE 21808
21798: GO 21800
21800: DISABLE
// YouLost ( Destroyed ) ; end_of_file
21801: LD_STRING Destroyed
21803: PPUSH
21804: CALL_OW 104
21808: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
21809: LD_EXP 23
21813: PPUSH
21814: CALL_OW 301
21818: IFFALSE 22163
21820: GO 21822
21822: DISABLE
21823: LD_INT 0
21825: PPUSH
// begin russianAI = 0 ;
21826: LD_ADDR_EXP 26
21830: PUSH
21831: LD_INT 0
21833: ST_TO_ADDR
// escapeAvalaible = 1 ;
21834: LD_ADDR_EXP 35
21838: PUSH
21839: LD_INT 1
21841: ST_TO_ADDR
// InGameOn ;
21842: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
21846: LD_INT 3
21848: PPUSH
21849: LD_INT 1
21851: PPUSH
21852: LD_INT 1
21854: PPUSH
21855: LD_INT 0
21857: PPUSH
21858: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
21862: LD_INT 6
21864: PPUSH
21865: LD_INT 1
21867: PPUSH
21868: LD_INT 1
21870: PPUSH
21871: LD_INT 0
21873: PPUSH
21874: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
21878: LD_INT 3
21880: PPUSH
21881: LD_INT 1
21883: PPUSH
21884: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
21888: LD_INT 97
21890: PPUSH
21891: LD_INT 91
21893: PPUSH
21894: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21898: LD_INT 22
21900: PUSH
21901: LD_INT 3
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 21
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL_OW 69
21926: PPUSH
21927: CALL_OW 121
// wait ( 0 0$01 ) ;
21931: LD_INT 35
21933: PPUSH
21934: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21938: LD_INT 22
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PPUSH
21962: CALL_OW 69
21966: PPUSH
21967: LD_INT 124
21969: PPUSH
21970: LD_INT 98
21972: PPUSH
21973: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21977: LD_INT 22
21979: PUSH
21980: LD_INT 6
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 21
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: PPUSH
22006: CALL_OW 121
// wait ( 0 0$01 ) ;
22010: LD_INT 35
22012: PPUSH
22013: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
22017: LD_INT 22
22019: PUSH
22020: LD_INT 6
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 21
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: PPUSH
22046: LD_INT 124
22048: PPUSH
22049: LD_INT 98
22051: PPUSH
22052: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
22056: LD_INT 22
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PPUSH
22080: CALL_OW 69
22084: PPUSH
22085: LD_INT 124
22087: PPUSH
22088: LD_INT 98
22090: PPUSH
22091: CALL_OW 114
// wait ( 0 0$4 ) ;
22095: LD_INT 140
22097: PPUSH
22098: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
22102: LD_INT 124
22104: PPUSH
22105: LD_INT 98
22107: PPUSH
22108: CALL_OW 84
// if SikorskyStatus = 1 then
22112: LD_EXP 20
22116: PUSH
22117: LD_INT 1
22119: EQUAL
22120: IFFALSE 22134
// begin Say ( Sikorski , D9-Sik-1 ) ;
22122: LD_EXP 15
22126: PPUSH
22127: LD_STRING D9-Sik-1
22129: PPUSH
22130: CALL_OW 88
// end ; if SikorskyStatus = 2 then
22134: LD_EXP 20
22138: PUSH
22139: LD_INT 2
22141: EQUAL
22142: IFFALSE 22163
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
22144: LD_EXP 22
22148: PPUSH
22149: LD_STRING D8b-Pow-1
22151: PPUSH
22152: CALL_OW 94
// YouLost ( Dismissed ) ;
22156: LD_STRING Dismissed
22158: PPUSH
22159: CALL_OW 104
// end ; end ;
22163: PPOPN 1
22165: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
22166: LD_INT 23
22168: PUSH
22169: LD_INT 3
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 21
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 24
22188: PUSH
22189: LD_INT 250
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: PPUSH
22201: CALL_OW 69
22205: PUSH
22206: LD_INT 0
22208: EQUAL
22209: IFFALSE 22218
22211: GO 22213
22213: DISABLE
// FinishMission ;
22214: CALL 22219 0 0
22218: END
// export function FinishMission ; var tmp ; begin
22219: LD_INT 0
22221: PPUSH
22222: PPUSH
// AddMedal ( med1 , 1 ) ;
22223: LD_STRING med1
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
22233: LD_STRING med2
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
22243: LD_STRING perfect
22245: PPUSH
22246: LD_INT 1
22248: PPUSH
22249: CALL_OW 101
// GiveMedals ( Main ) ;
22253: LD_STRING Main
22255: PPUSH
22256: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22260: LD_INT 22
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 23
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 21
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: LD_INT 25
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 25
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 25
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 25
22325: PUSH
22326: LD_INT 4
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 69
22350: PPUSH
22351: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22355: LD_EXP 1
22359: PPUSH
22360: LD_EXP 40
22364: PUSH
22365: LD_STRING JMM
22367: STR
22368: PPUSH
22369: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22373: LD_EXP 2
22377: PPUSH
22378: LD_EXP 40
22382: PUSH
22383: LD_STRING Brown
22385: STR
22386: PPUSH
22387: CALL 6842 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22391: LD_EXP 3
22395: PPUSH
22396: LD_EXP 40
22400: PUSH
22401: LD_STRING Donaldson
22403: STR
22404: PPUSH
22405: CALL 6842 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22409: LD_EXP 4
22413: PPUSH
22414: LD_EXP 40
22418: PUSH
22419: LD_STRING Bobby
22421: STR
22422: PPUSH
22423: CALL 6842 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22427: LD_EXP 5
22431: PPUSH
22432: LD_EXP 40
22436: PUSH
22437: LD_STRING Cyrus
22439: STR
22440: PPUSH
22441: CALL 6842 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22445: LD_EXP 6
22449: PPUSH
22450: LD_EXP 40
22454: PUSH
22455: LD_STRING Lisa
22457: STR
22458: PPUSH
22459: CALL 6842 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22463: LD_EXP 7
22467: PPUSH
22468: LD_EXP 40
22472: PUSH
22473: LD_STRING Frank
22475: STR
22476: PPUSH
22477: CALL 6842 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22481: LD_EXP 8
22485: PPUSH
22486: LD_EXP 40
22490: PUSH
22491: LD_STRING Gladstone
22493: STR
22494: PPUSH
22495: CALL 6842 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22499: LD_EXP 9
22503: PPUSH
22504: LD_EXP 40
22508: PUSH
22509: LD_STRING Kikuchi
22511: STR
22512: PPUSH
22513: CALL 6842 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22517: LD_EXP 13
22521: PPUSH
22522: LD_EXP 40
22526: PUSH
22527: LD_STRING Denis
22529: STR
22530: PPUSH
22531: CALL 6842 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22535: LD_EXP 14
22539: PPUSH
22540: LD_EXP 40
22544: PUSH
22545: LD_STRING Joan
22547: STR
22548: PPUSH
22549: CALL 6842 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22553: LD_EXP 12
22557: PPUSH
22558: LD_EXP 40
22562: PUSH
22563: LD_STRING Houten
22565: STR
22566: PPUSH
22567: CALL 6842 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
22571: LD_INT 50
22573: PUSH
22574: EMPTY
22575: LIST
22576: PUSH
22577: LD_INT 22
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 21
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 25
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 25
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 25
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 25
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: PPUSH
22653: CALL_OW 69
22657: PUSH
22658: LD_EXP 1
22662: PUSH
22663: LD_EXP 2
22667: PUSH
22668: LD_EXP 3
22672: PUSH
22673: LD_EXP 4
22677: PUSH
22678: LD_EXP 5
22682: PUSH
22683: LD_EXP 6
22687: PUSH
22688: LD_EXP 7
22692: PUSH
22693: LD_EXP 8
22697: PUSH
22698: LD_EXP 9
22702: PUSH
22703: LD_EXP 13
22707: PUSH
22708: LD_EXP 14
22712: PUSH
22713: LD_EXP 12
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: DIFF
22732: PPUSH
22733: LD_STRING 08_other_survivors
22735: PPUSH
22736: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
22740: LD_INT 23
22742: PPUSH
22743: CALL 22756 0 1
// YouWin ;
22747: CALL_OW 103
// end ;
22751: LD_VAR 0 1
22755: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
// gammaBase = [ ] ;
22762: LD_ADDR_VAR 0 4
22766: PUSH
22767: EMPTY
22768: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22769: LD_ADDR_VAR 0 5
22773: PUSH
22774: LD_VAR 0 1
22778: PPUSH
22779: LD_INT 22
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 21
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 50
22801: PUSH
22802: EMPTY
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: PPUSH
22810: CALL_OW 70
22814: ST_TO_ADDR
// for i in buildings do
22815: LD_ADDR_VAR 0 3
22819: PUSH
22820: LD_VAR 0 5
22824: PUSH
22825: FOR_IN
22826: IFFALSE 23163
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22828: LD_VAR 0 3
22832: PPUSH
22833: CALL_OW 266
22837: PUSH
22838: LD_INT 6
22840: PUSH
22841: LD_INT 7
22843: PUSH
22844: LD_INT 8
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: IN
22852: IFFALSE 22966
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22854: LD_ADDR_VAR 0 4
22858: PUSH
22859: LD_VAR 0 4
22863: PUSH
22864: LD_VAR 0 3
22868: PPUSH
22869: CALL_OW 266
22873: PUSH
22874: LD_VAR 0 3
22878: PPUSH
22879: CALL_OW 250
22883: PUSH
22884: LD_VAR 0 3
22888: PPUSH
22889: CALL_OW 251
22893: PUSH
22894: LD_VAR 0 3
22898: PPUSH
22899: CALL_OW 254
22903: PUSH
22904: LD_VAR 0 3
22908: PPUSH
22909: CALL_OW 267
22913: PUSH
22914: LD_VAR 0 3
22918: PPUSH
22919: CALL_OW 248
22923: PUSH
22924: LD_VAR 0 3
22928: PPUSH
22929: LD_INT 1
22931: PPUSH
22932: CALL_OW 268
22936: PUSH
22937: LD_VAR 0 3
22941: PPUSH
22942: LD_INT 2
22944: PPUSH
22945: CALL_OW 268
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: ADD
22963: ST_TO_ADDR
22964: GO 23161
// if GetBType ( i ) in [ b_bunker ] then
22966: LD_VAR 0 3
22970: PPUSH
22971: CALL_OW 266
22975: PUSH
22976: LD_INT 32
22978: PUSH
22979: EMPTY
22980: LIST
22981: IN
22982: IFFALSE 23079
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22984: LD_ADDR_VAR 0 4
22988: PUSH
22989: LD_VAR 0 4
22993: PUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: CALL_OW 266
23003: PUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: CALL_OW 250
23013: PUSH
23014: LD_VAR 0 3
23018: PPUSH
23019: CALL_OW 251
23023: PUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: CALL_OW 254
23033: PUSH
23034: LD_VAR 0 3
23038: PPUSH
23039: CALL_OW 267
23043: PUSH
23044: LD_VAR 0 3
23048: PPUSH
23049: CALL_OW 248
23053: PUSH
23054: LD_VAR 0 3
23058: PPUSH
23059: CALL_OW 269
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: ADD
23076: ST_TO_ADDR
23077: GO 23161
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23079: LD_ADDR_VAR 0 4
23083: PUSH
23084: LD_VAR 0 4
23088: PUSH
23089: LD_VAR 0 3
23093: PPUSH
23094: CALL_OW 266
23098: PUSH
23099: LD_VAR 0 3
23103: PPUSH
23104: CALL_OW 250
23108: PUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: CALL_OW 251
23118: PUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 254
23128: PUSH
23129: LD_VAR 0 3
23133: PPUSH
23134: CALL_OW 267
23138: PUSH
23139: LD_VAR 0 3
23143: PPUSH
23144: CALL_OW 248
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: PUSH
23157: EMPTY
23158: LIST
23159: ADD
23160: ST_TO_ADDR
// end ;
23161: GO 22825
23163: POP
23164: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
23165: LD_VAR 0 4
23169: PPUSH
23170: LD_STRING 08_GammaBase
23172: PPUSH
23173: CALL_OW 39
// end ;
23177: LD_VAR 0 2
23181: RET
