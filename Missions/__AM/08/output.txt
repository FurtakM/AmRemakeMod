// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7018 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2109 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5823 0 0
// PrepareRussians ;
 229: CALL 6141 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8283 0 6
// PrepareCutsceneAttack ;
 312: CALL 5875 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 593
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6559 0 2
 577: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 5
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ; if gammaCommander = 2 then
 593: LD_EXP 12
 597: PUSH
 598: LD_INT 2
 600: EQUAL
 601: IFFALSE 634
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 603: LD_ADDR_EXP 2
 607: PUSH
 608: LD_STRING 04_Brown
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 6559 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 619: LD_EXP 2
 623: PPUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// end ; if gammaCommander = 3 then
 634: LD_EXP 12
 638: PUSH
 639: LD_INT 3
 641: EQUAL
 642: IFFALSE 675
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 644: LD_ADDR_EXP 13
 648: PUSH
 649: LD_STRING VanHouten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6559 0 2
 659: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 660: LD_EXP 13
 664: PPUSH
 665: LD_INT 5
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 675: LD_ADDR_EXP 22
 679: PUSH
 680: LD_STRING Harisson
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL 6559 0 2
 690: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 691: LD_ADDR_EXP 23
 695: PUSH
 696: LD_STRING Powell
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 6559 0 2
 706: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 707: LD_STRING 04_Lisa
 709: PUSH
 710: EMPTY
 711: LIST
 712: PPUSH
 713: CALL_OW 28
 717: PUSH
 718: LD_STRING LisaInDelta
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL_OW 30
 728: NOT
 729: AND
 730: PUSH
 731: LD_STRING 07_Lisa
 733: PUSH
 734: EMPTY
 735: LIST
 736: PPUSH
 737: CALL_OW 28
 741: NOT
 742: AND
 743: IFFALSE 777
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 745: LD_ADDR_EXP 6
 749: PUSH
 750: LD_STRING 04_Lisa
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6559 0 2
 760: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 761: LD_ADDR_VAR 0 15
 765: PUSH
 766: LD_VAR 0 15
 770: PUSH
 771: LD_EXP 6
 775: ADD
 776: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 777: LD_STRING 04_Bobby
 779: PUSH
 780: EMPTY
 781: LIST
 782: PPUSH
 783: CALL_OW 28
 787: PUSH
 788: LD_STRING BobbyInDelta
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 30
 798: NOT
 799: AND
 800: PUSH
 801: LD_STRING 07_Bobby
 803: PUSH
 804: EMPTY
 805: LIST
 806: PPUSH
 807: CALL_OW 28
 811: NOT
 812: AND
 813: IFFALSE 847
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 815: LD_ADDR_EXP 4
 819: PUSH
 820: LD_STRING 04_Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6559 0 2
 830: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 831: LD_ADDR_VAR 0 15
 835: PUSH
 836: LD_VAR 0 15
 840: PUSH
 841: LD_EXP 4
 845: ADD
 846: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 847: LD_STRING 04_Cyrus
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: PUSH
 858: LD_STRING CyrusInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Cyrus
 873: PUSH
 874: EMPTY
 875: LIST
 876: PPUSH
 877: CALL_OW 28
 881: NOT
 882: AND
 883: IFFALSE 917
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 885: LD_ADDR_EXP 5
 889: PUSH
 890: LD_STRING 04_Cyrus
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 6559 0 2
 900: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
 901: LD_ADDR_VAR 0 15
 905: PUSH
 906: LD_VAR 0 15
 910: PUSH
 911: LD_EXP 5
 915: ADD
 916: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
 917: LD_STRING 04_Brown
 919: PUSH
 920: EMPTY
 921: LIST
 922: PPUSH
 923: CALL_OW 28
 927: PUSH
 928: LD_STRING BrownInDelta
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 30
 938: NOT
 939: AND
 940: PUSH
 941: LD_STRING 07_Brown
 943: PUSH
 944: EMPTY
 945: LIST
 946: PPUSH
 947: CALL_OW 28
 951: NOT
 952: AND
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_INT 2
 961: NONEQUAL
 962: AND
 963: IFFALSE 997
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
 965: LD_ADDR_EXP 2
 969: PUSH
 970: LD_STRING 04_Brown
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 6559 0 2
 980: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
 981: LD_ADDR_VAR 0 15
 985: PUSH
 986: LD_VAR 0 15
 990: PUSH
 991: LD_EXP 2
 995: ADD
 996: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
 997: LD_STRING 04_Donaldson
 999: PUSH
1000: EMPTY
1001: LIST
1002: PPUSH
1003: CALL_OW 28
1007: PUSH
1008: LD_STRING DonaldsonInDelta
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 30
1018: NOT
1019: AND
1020: PUSH
1021: LD_STRING 07_Donaldson
1023: PUSH
1024: EMPTY
1025: LIST
1026: PPUSH
1027: CALL_OW 28
1031: NOT
1032: AND
1033: PUSH
1034: LD_EXP 12
1038: PUSH
1039: LD_INT 1
1041: NONEQUAL
1042: AND
1043: IFFALSE 1077
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: LD_STRING 04_Donaldson
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6559 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 3
1075: ADD
1076: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1077: LD_ADDR_EXP 11
1081: PUSH
1082: LD_STRING 07_othersGamma
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1090: LD_ADDR_VAR 0 14
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_EXP 11
1102: MINUS
1103: ST_TO_ADDR
// if tmp then
1104: LD_VAR 0 14
1108: IFFALSE 1161
// for i = 1 to tmp do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_VAR 0 14
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1159
// begin PrepareHuman ( false , 1 , 5 ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_INT 1
1133: PPUSH
1134: LD_INT 5
1136: PPUSH
1137: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: CALL_OW 44
1155: ADD
1156: ST_TO_ADDR
// end ;
1157: GO 1125
1159: POP
1160: POP
// if HexInfo ( 61 , 29 ) = 0 then
1161: LD_INT 61
1163: PPUSH
1164: LD_INT 29
1166: PPUSH
1167: CALL_OW 428
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: IFFALSE 1206
// begin bc_type := b_barracks ;
1177: LD_ADDR_OWVAR 42
1181: PUSH
1182: LD_INT 5
1184: ST_TO_ADDR
// bc_level := 6 ;
1185: LD_ADDR_OWVAR 43
1189: PUSH
1190: LD_INT 6
1192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1193: LD_INT 61
1195: PPUSH
1196: LD_INT 29
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1206: LD_ADDR_VAR 0 13
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 30
1223: PUSH
1224: LD_INT 31
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PPUSH
1235: CALL_OW 69
1239: ST_TO_ADDR
// for i in bun do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_VAR 0 13
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1383
// begin x := GetX ( i ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 250
1267: ST_TO_ADDR
// y := GetY ( i ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 251
1282: ST_TO_ADDR
// d := GetDir ( i ) ;
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PPUSH
1293: CALL_OW 254
1297: ST_TO_ADDR
// RemoveUnit ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 64
// bc_type := b_bunker ;
1307: LD_ADDR_OWVAR 42
1311: PUSH
1312: LD_INT 32
1314: ST_TO_ADDR
// bc_level := 6 ;
1315: LD_ADDR_OWVAR 43
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1323: LD_ADDR_VAR 0 6
1327: PUSH
1328: LD_VAR 0 3
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_VAR 0 5
1342: PPUSH
1343: CALL_OW 47
1347: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1348: LD_VAR 0 6
1352: PPUSH
1353: LD_INT 5
1355: PUSH
1356: LD_INT 4
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 2
1370: MOD
1371: PUSH
1372: LD_INT 1
1374: PLUS
1375: ARRAY
1376: PPUSH
1377: CALL_OW 431
// end ;
1381: GO 1250
1383: POP
1384: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1385: LD_ADDR_VAR 0 9
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1419: LD_ADDR_VAR 0 8
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 30
1439: PUSH
1440: LD_INT 6
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 8
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1482: LD_ADDR_VAR 0 7
1486: PUSH
1487: LD_INT 22
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 30
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1516: LD_ADDR_VAR 0 12
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 30
1533: PUSH
1534: LD_INT 36
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1550: LD_ADDR_VAR 0 13
1554: PUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 30
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 30
1580: PUSH
1581: LD_INT 32
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 11
1611: PUSH
1612: LD_VAR 0 15
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1994
// begin placed := false ;
1621: LD_ADDR_VAR 0 11
1625: PUSH
1626: LD_INT 0
1628: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1629: LD_VAR 0 2
1633: PPUSH
1634: CALL_OW 257
1638: PUSH
1639: LD_INT 1
1641: EQUAL
1642: IFFALSE 1767
// begin if UnitFilter ( bun , [ f_empty ] ) then
1644: LD_VAR 0 13
1648: PPUSH
1649: LD_INT 58
1651: PUSH
1652: EMPTY
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1698
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_VAR 0 13
1670: PPUSH
1671: LD_INT 58
1673: PUSH
1674: EMPTY
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PPUSH
1686: CALL_OW 52
// placed := true ;
1690: LD_ADDR_VAR 0 11
1694: PUSH
1695: LD_INT 1
1697: ST_TO_ADDR
// end ; if arm and not placed then
1698: LD_VAR 0 9
1702: PUSH
1703: LD_VAR 0 11
1707: NOT
1708: AND
1709: IFFALSE 1767
// begin for j in arm do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 9
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; end ; if GetClass ( i ) = 3 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 3
1779: EQUAL
1780: IFFALSE 1884
// if fac then
1782: LD_VAR 0 7
1786: IFFALSE 1884
// begin if ct then
1788: LD_VAR 0 12
1792: IFFALSE 1820
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1794: LD_VAR 0 2
1798: PPUSH
1799: LD_VAR 0 12
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: CALL_OW 52
// placed := true ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// end ; if placed then
1820: LD_VAR 0 11
1824: IFFALSE 1828
// continue ;
1826: GO 1618
// for j in fac do
1828: LD_ADDR_VAR 0 10
1832: PUSH
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_IN
1839: IFFALSE 1882
// if UnitsInside ( j ) < 6 then
1841: LD_VAR 0 10
1845: PPUSH
1846: CALL_OW 313
1850: PUSH
1851: LD_INT 6
1853: LESS
1854: IFFALSE 1880
// begin PlaceHumanInUnit ( i , j ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_VAR 0 10
1865: PPUSH
1866: CALL_OW 52
// placed := true ;
1870: LD_ADDR_VAR 0 11
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// break ;
1878: GO 1882
// end ;
1880: GO 1838
1882: POP
1883: POP
// end ; if GetClass ( i ) = 4 then
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 257
1893: PUSH
1894: LD_INT 4
1896: EQUAL
1897: IFFALSE 1961
// if lab then
1899: LD_VAR 0 8
1903: IFFALSE 1961
// begin for j in lab do
1905: LD_ADDR_VAR 0 10
1909: PUSH
1910: LD_VAR 0 8
1914: PUSH
1915: FOR_IN
1916: IFFALSE 1959
// if UnitsInside ( j ) < 6 then
1918: LD_VAR 0 10
1922: PPUSH
1923: CALL_OW 313
1927: PUSH
1928: LD_INT 6
1930: LESS
1931: IFFALSE 1957
// begin PlaceHumanInUnit ( i , j ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_VAR 0 10
1942: PPUSH
1943: CALL_OW 52
// placed := true ;
1947: LD_ADDR_VAR 0 11
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// break ;
1955: GO 1959
// end ;
1957: GO 1915
1959: POP
1960: POP
// end ; if not placed then
1961: LD_VAR 0 11
1965: NOT
1966: IFFALSE 1992
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_INT 5
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// ComHold ( i ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: CALL_OW 140
// end ; end ;
1992: GO 1618
1994: POP
1995: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1996: LD_VAR 0 12
2000: PUSH
2001: LD_VAR 0 12
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 313
2014: AND
2015: IFFALSE 2104
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 33
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2102
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 12
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_VAR 0 12
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 313
2089: PPUSH
2090: CALL_OW 12
2094: ARRAY
2095: PPUSH
2096: CALL_OW 135
2100: GO 2051
2102: POP
2103: POP
// end ; end ;
2104: LD_VAR 0 1
2108: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2117: LD_INT 71
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2130: LD_ADDR_VAR 0 2
2134: PUSH
2135: LD_STRING GammaBase
2137: PPUSH
2138: EMPTY
2139: PPUSH
2140: CALL_OW 30
2144: ST_TO_ADDR
// if not blist then
2145: LD_VAR 0 2
2149: NOT
2150: IFFALSE 2190
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 51
2162: PUSH
2163: LD_INT 10
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: LD_INT 0
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: EMPTY
2188: LIST
2189: ST_TO_ADDR
// uc_side := 1 ;
2190: LD_ADDR_OWVAR 20
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// uc_nation := 1 ;
2198: LD_ADDR_OWVAR 21
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// for i in blist do
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2625
// begin bc_type := i [ 1 ] ;
2219: LD_ADDR_OWVAR 42
2223: PUSH
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_VAR 0 3
2242: PUSH
2243: LD_INT 5
2245: ARRAY
2246: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PUSH
2256: LD_INT 7
2258: PUSH
2259: LD_INT 8
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: IN
2266: IFFALSE 2322
// begin bc_kind1 := i [ 7 ] ;
2268: LD_ADDR_OWVAR 44
2272: PUSH
2273: LD_VAR 0 3
2277: PUSH
2278: LD_INT 7
2280: ARRAY
2281: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2282: LD_STRING 06_remoteVehs_1
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 30
2292: PUSH
2293: LD_INT 1
2295: EQUAL
2296: IFFALSE 2308
// begin bc_kind2 := 15 ;
2298: LD_ADDR_OWVAR 45
2302: PUSH
2303: LD_INT 15
2305: ST_TO_ADDR
// end else
2306: GO 2322
// begin bc_kind2 := i [ 8 ] ;
2308: LD_ADDR_OWVAR 45
2312: PUSH
2313: LD_VAR 0 3
2317: PUSH
2318: LD_INT 8
2320: ARRAY
2321: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 0
2329: EQUAL
2330: IFFALSE 2448
// begin bc_type := b_warehouse ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2340: LD_ADDR_EXP 37
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 2
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 3
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 4
2370: ARRAY
2371: PPUSH
2372: CALL_OW 47
2376: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2377: LD_EXP 37
2381: PPUSH
2382: LD_STRING gamma
2384: PPUSH
2385: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2389: LD_EXP 37
2393: PPUSH
2394: CALL_OW 274
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: LD_INT 400
2404: PUSH
2405: LD_INT 350
2407: PUSH
2408: LD_INT 250
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_OWVAR 67
2420: ARRAY
2421: PPUSH
2422: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2426: LD_EXP 37
2430: PPUSH
2431: CALL_OW 274
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: LD_INT 200
2441: PPUSH
2442: CALL_OW 277
// end else
2446: GO 2590
// begin if bc_type = 4 then
2448: LD_OWVAR 42
2452: PUSH
2453: LD_INT 4
2455: EQUAL
2456: IFFALSE 2505
// begin bc_type = 5 ;
2458: LD_ADDR_OWVAR 42
2462: PUSH
2463: LD_INT 5
2465: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2466: LD_ADDR_VAR 0 4
2470: PUSH
2471: LD_VAR 0 3
2475: PUSH
2476: LD_INT 2
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 3
2484: PUSH
2485: LD_INT 3
2487: ARRAY
2488: PPUSH
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 4
2496: ARRAY
2497: PPUSH
2498: CALL_OW 47
2502: ST_TO_ADDR
// end else
2503: GO 2590
// begin bc_type := i [ 1 ] ;
2505: LD_ADDR_OWVAR 42
2509: PUSH
2510: LD_VAR 0 3
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2519: LD_STRING 06_remoteVehs_1
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: CALL_OW 30
2529: PUSH
2530: LD_INT 1
2532: EQUAL
2533: PUSH
2534: LD_OWVAR 42
2538: PUSH
2539: LD_INT 7
2541: EQUAL
2542: AND
2543: IFFALSE 2553
// bc_type := b_lab_full ;
2545: LD_ADDR_OWVAR 42
2549: PUSH
2550: LD_INT 8
2552: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 3
2574: ARRAY
2575: PPUSH
2576: LD_VAR 0 3
2580: PUSH
2581: LD_INT 4
2583: ARRAY
2584: PPUSH
2585: CALL_OW 47
2589: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2590: LD_VAR 0 4
2594: PPUSH
2595: CALL_OW 266
2599: PUSH
2600: LD_INT 32
2602: EQUAL
2603: IFFALSE 2623
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2605: LD_VAR 0 4
2609: PPUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 7
2617: ARRAY
2618: PPUSH
2619: CALL_OW 431
// end ;
2623: GO 2216
2625: POP
2626: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2627: LD_INT 22
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 30
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: IFFALSE 2903
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2657: LD_ADDR_VAR 0 4
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 30
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: CALL_OW 69
2690: PUSH
2691: LD_INT 1
2693: ARRAY
2694: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2695: LD_ADDR_VAR 0 6
2699: PUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: CALL_OW 250
2709: PPUSH
2710: LD_VAR 0 4
2714: PPUSH
2715: CALL_OW 251
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: CALL_OW 254
2729: PPUSH
2730: CALL 15965 0 3
2734: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_INT 19
2742: PUSH
2743: LD_INT 17
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2750: LD_STRING 06_remoteVehs_1
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 30
2760: IFFALSE 2783
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2762: LD_ADDR_VAR 0 2
2766: PUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 20
2777: PPUSH
2778: CALL_OW 2
2782: ST_TO_ADDR
// for i in tmp do
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: LD_VAR 0 6
2792: PUSH
2793: FOR_IN
2794: IFFALSE 2901
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: PPUSH
2814: CALL_OW 428
2818: PUSH
2819: LD_INT 0
2821: EQUAL
2822: IFFALSE 2899
// begin bc_type := blist [ 1 ] ;
2824: LD_ADDR_OWVAR 42
2828: PUSH
2829: LD_VAR 0 2
2833: PUSH
2834: LD_INT 1
2836: ARRAY
2837: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2838: LD_VAR 0 3
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PPUSH
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 2
2854: ARRAY
2855: PPUSH
2856: LD_VAR 0 3
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: PPUSH
2865: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: CALL_OW 3
2886: ST_TO_ADDR
// if blist = 0 then
2887: LD_VAR 0 2
2891: PUSH
2892: LD_INT 0
2894: EQUAL
2895: IFFALSE 2899
// break ;
2897: GO 2901
// end ;
2899: GO 2793
2901: POP
2902: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2903: LD_STRING 06_remoteVehs_1
2905: PPUSH
2906: LD_INT 0
2908: PPUSH
2909: CALL_OW 30
2913: PUSH
2914: LD_INT 1
2916: EQUAL
2917: IFFALSE 3121
// begin bc_type = 36 ;
2919: LD_ADDR_OWVAR 42
2923: PUSH
2924: LD_INT 36
2926: ST_TO_ADDR
// bc_level = 4 ;
2927: LD_ADDR_OWVAR 43
2931: PUSH
2932: LD_INT 4
2934: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2935: LD_INT 62
2937: PPUSH
2938: LD_INT 12
2940: PPUSH
2941: LD_INT 3
2943: PPUSH
2944: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 3
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_OWVAR 67
2976: ARRAY
2977: PUSH
2978: FOR_TO
2979: IFFALSE 3119
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2981: LD_ADDR_OWVAR 37
2985: PUSH
2986: LD_INT 3
2988: PUSH
2989: LD_INT 2
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_OWVAR 67
3023: ARRAY
3024: ST_TO_ADDR
// vc_engine = 1 ;
3025: LD_ADDR_OWVAR 39
3029: PUSH
3030: LD_INT 1
3032: ST_TO_ADDR
// vc_control = 2 ;
3033: LD_ADDR_OWVAR 38
3037: PUSH
3038: LD_INT 2
3040: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3041: LD_ADDR_OWVAR 40
3045: PUSH
3046: LD_INT 3
3048: PUSH
3049: LD_INT 4
3051: PUSH
3052: LD_INT 5
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: CALL_OW 12
3070: ARRAY
3071: ST_TO_ADDR
// veh = CreateVehicle ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3082: LD_VAR 0 5
3086: PPUSH
3087: LD_EXP 37
3091: PPUSH
3092: CALL_OW 250
3096: PPUSH
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 251
3106: PPUSH
3107: LD_INT 7
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: CALL_OW 50
// end ;
3117: GO 2978
3119: POP
3120: POP
// end ; end ;
3121: LD_VAR 0 1
3125: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3126: LD_INT 0
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
// uc_side = 1 ;
3132: LD_ADDR_OWVAR 20
3136: PUSH
3137: LD_INT 1
3139: ST_TO_ADDR
// uc_nation = 1 ;
3140: LD_ADDR_OWVAR 21
3144: PUSH
3145: LD_INT 1
3147: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3148: LD_ADDR_EXP 14
3152: PUSH
3153: LD_STRING 06c_Denis
3155: PPUSH
3156: LD_INT 1
3158: PPUSH
3159: CALL 6559 0 2
3163: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3164: LD_EXP 14
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3179: LD_ADDR_EXP 15
3183: PUSH
3184: LD_STRING 06c_Joan
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: CALL 6559 0 2
3194: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3195: LD_EXP 15
3199: PPUSH
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3210: LD_STRING GladstoneIn07
3212: PPUSH
3213: LD_INT 0
3215: PPUSH
3216: CALL_OW 30
3220: NOT
3221: IFFALSE 3289
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3223: LD_ADDR_EXP 8
3227: PUSH
3228: LD_STRING 06c_Gladstone
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL 6559 0 2
3238: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3239: LD_EXP 8
3243: NOT
3244: PUSH
3245: LD_STRING GladstoneStayInDelta
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 30
3255: AND
3256: IFFALSE 3274
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3258: LD_ADDR_EXP 8
3262: PUSH
3263: LD_STRING 05_Gladstone
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 6559 0 2
3273: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3274: LD_EXP 8
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3289: LD_STRING LisaStayInDelta
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3332
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3301: LD_ADDR_EXP 6
3305: PUSH
3306: LD_STRING 05_Lisa
3308: PPUSH
3309: LD_INT 1
3311: PPUSH
3312: CALL 6559 0 2
3316: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3317: LD_EXP 6
3321: PPUSH
3322: LD_INT 4
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3332: LD_STRING BobbyStayInDelta
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 30
3342: IFFALSE 3375
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3344: LD_ADDR_EXP 4
3348: PUSH
3349: LD_STRING 05_Bobby
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL 6559 0 2
3359: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3360: LD_EXP 4
3364: PPUSH
3365: LD_INT 4
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3375: LD_STRING CyrusStayInDelta
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 30
3385: IFFALSE 3418
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3387: LD_ADDR_EXP 5
3391: PUSH
3392: LD_STRING 05_Cyrus
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL 6559 0 2
3402: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3403: LD_EXP 5
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3418: LD_STRING BrownStayInDelta
3420: PPUSH
3421: LD_INT 0
3423: PPUSH
3424: CALL_OW 30
3428: IFFALSE 3461
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3430: LD_ADDR_EXP 2
3434: PUSH
3435: LD_STRING 05_Brown
3437: PPUSH
3438: LD_INT 1
3440: PPUSH
3441: CALL 6559 0 2
3445: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3446: LD_EXP 2
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3461: LD_STRING DonaldsonStayInDelta
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 30
3471: IFFALSE 3504
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3473: LD_ADDR_EXP 3
3477: PUSH
3478: LD_STRING 05_Donaldson
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL 6559 0 2
3488: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3489: LD_EXP 3
3493: PPUSH
3494: LD_INT 4
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_STRING OtherStayInDelta
3511: PPUSH
3512: CALL_OW 31
3516: ST_TO_ADDR
// if other then
3517: LD_VAR 0 4
3521: IFFALSE 3566
// for j = 1 to other do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_VAR 0 4
3537: PUSH
3538: FOR_TO
3539: IFFALSE 3564
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3541: LD_VAR 0 4
3545: PUSH
3546: LD_VAR 0 3
3550: ARRAY
3551: PPUSH
3552: LD_INT 4
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL_OW 49
3562: GO 3538
3564: POP
3565: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_STRING 06_other_apemans
3573: PPUSH
3574: CALL_OW 31
3578: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3579: LD_VAR 0 4
3583: PUSH
3584: LD_INT 5
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: LD_INT 3
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: PUSH
3598: LD_OWVAR 67
3602: ARRAY
3603: GREATEREQUAL
3604: IFFALSE 3633
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3606: LD_ADDR_VAR 0 3
3610: PUSH
3611: LD_INT 5
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_OWVAR 67
3629: ARRAY
3630: ST_TO_ADDR
3631: GO 3643
// j := other ;
3633: LD_ADDR_VAR 0 3
3637: PUSH
3638: LD_VAR 0 4
3642: ST_TO_ADDR
// for i = 1 to j do
3643: LD_ADDR_VAR 0 2
3647: PUSH
3648: DOUBLE
3649: LD_INT 1
3651: DEC
3652: ST_TO_ADDR
3653: LD_VAR 0 3
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3684
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3661: LD_VAR 0 4
3665: PUSH
3666: LD_VAR 0 2
3670: ARRAY
3671: PPUSH
3672: LD_INT 4
3674: PPUSH
3675: LD_INT 0
3677: PPUSH
3678: CALL_OW 49
3682: GO 3658
3684: POP
3685: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3686: LD_INT 4
3688: PPUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 1
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PPUSH
3713: CALL_OW 70
3717: PPUSH
3718: LD_INT 53
3720: PPUSH
3721: LD_INT 19
3723: PPUSH
3724: CALL_OW 111
// firstAttack = 1 ;
3728: LD_ADDR_EXP 33
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// end ;
3736: LD_VAR 0 1
3740: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: LD_STRING 07_vehicles
3755: PPUSH
3756: EMPTY
3757: PPUSH
3758: CALL_OW 30
3762: ST_TO_ADDR
// uc_side = 1 ;
3763: LD_ADDR_OWVAR 20
3767: PUSH
3768: LD_INT 1
3770: ST_TO_ADDR
// uc_nation = 1 ;
3771: LD_ADDR_OWVAR 21
3775: PUSH
3776: LD_INT 1
3778: ST_TO_ADDR
// if vehicles > 0 then
3779: LD_VAR 0 4
3783: PUSH
3784: LD_INT 0
3786: GREATER
3787: IFFALSE 3926
// begin for i = 1 to vehicles do
3789: LD_ADDR_VAR 0 2
3793: PUSH
3794: DOUBLE
3795: LD_INT 1
3797: DEC
3798: ST_TO_ADDR
3799: LD_VAR 0 4
3803: PUSH
3804: FOR_TO
3805: IFFALSE 3924
// begin vc_chassis = vehicles [ i ] ;
3807: LD_ADDR_OWVAR 37
3811: PUSH
3812: LD_VAR 0 4
3816: PUSH
3817: LD_VAR 0 2
3821: ARRAY
3822: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3823: LD_ADDR_OWVAR 39
3827: PUSH
3828: LD_VAR 0 4
3832: PUSH
3833: LD_VAR 0 2
3837: PUSH
3838: LD_INT 1
3840: PLUS
3841: ARRAY
3842: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3843: LD_ADDR_OWVAR 38
3847: PUSH
3848: LD_VAR 0 4
3852: PUSH
3853: LD_VAR 0 2
3857: PUSH
3858: LD_INT 2
3860: PLUS
3861: ARRAY
3862: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3863: LD_ADDR_OWVAR 40
3867: PUSH
3868: LD_VAR 0 4
3872: PUSH
3873: LD_VAR 0 2
3877: PUSH
3878: LD_INT 3
3880: PLUS
3881: ARRAY
3882: ST_TO_ADDR
// veh = CreateVehicle ;
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: CALL_OW 45
3892: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3893: LD_VAR 0 5
3897: PPUSH
3898: LD_INT 4
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 49
// i = i + 3 ;
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: LD_VAR 0 2
3917: PUSH
3918: LD_INT 3
3920: PLUS
3921: ST_TO_ADDR
// end ;
3922: GO 3804
3924: POP
3925: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3926: LD_ADDR_EXP 1
3930: PUSH
3931: LD_EXP 43
3935: PUSH
3936: LD_STRING JMM
3938: STR
3939: PPUSH
3940: LD_INT 1
3942: PPUSH
3943: CALL 6559 0 2
3947: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3948: LD_EXP 12
3952: PUSH
3953: LD_INT 1
3955: EQUAL
3956: PUSH
3957: LD_EXP 12
3961: PUSH
3962: LD_INT 3
3964: EQUAL
3965: OR
3966: PUSH
3967: LD_EXP 2
3971: NOT
3972: AND
3973: IFFALSE 3997
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3975: LD_ADDR_EXP 2
3979: PUSH
3980: LD_EXP 43
3984: PUSH
3985: LD_STRING Brown
3987: STR
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: CALL 6559 0 2
3996: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
3997: LD_EXP 12
4001: PUSH
4002: LD_INT 2
4004: EQUAL
4005: PUSH
4006: LD_EXP 12
4010: PUSH
4011: LD_INT 3
4013: EQUAL
4014: OR
4015: PUSH
4016: LD_EXP 3
4020: NOT
4021: AND
4022: IFFALSE 4046
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4024: LD_ADDR_EXP 3
4028: PUSH
4029: LD_EXP 43
4033: PUSH
4034: LD_STRING Donaldson
4036: STR
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: CALL 6559 0 2
4045: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4046: LD_EXP 2
4050: PUSH
4051: LD_EXP 12
4055: PUSH
4056: LD_INT 2
4058: NONEQUAL
4059: AND
4060: IFFALSE 4077
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4062: LD_EXP 2
4066: PPUSH
4067: LD_INT 4
4069: PPUSH
4070: LD_INT 0
4072: PPUSH
4073: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4077: LD_EXP 3
4081: PUSH
4082: LD_EXP 12
4086: PUSH
4087: LD_INT 1
4089: NONEQUAL
4090: AND
4091: IFFALSE 4108
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4093: LD_EXP 3
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4108: LD_ADDR_VAR 0 5
4112: PUSH
4113: LD_INT 4
4115: PPUSH
4116: LD_INT 22
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 21
4128: PUSH
4129: LD_INT 2
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 58
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 70
4151: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4152: LD_ADDR_EXP 1
4156: PUSH
4157: LD_EXP 43
4161: PUSH
4162: LD_STRING JMM
4164: STR
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: CALL 6559 0 2
4173: ST_TO_ADDR
// if veh > 0 then
4174: LD_VAR 0 5
4178: PUSH
4179: LD_INT 0
4181: GREATER
4182: IFFALSE 4204
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4184: LD_EXP 1
4188: PPUSH
4189: LD_VAR 0 5
4193: PUSH
4194: LD_INT 1
4196: ARRAY
4197: PPUSH
4198: CALL_OW 52
// end else
4202: GO 4219
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4204: LD_EXP 1
4208: PPUSH
4209: LD_INT 4
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4219: LD_ADDR_VAR 0 5
4223: PUSH
4224: LD_INT 4
4226: PPUSH
4227: LD_INT 22
4229: PUSH
4230: LD_INT 1
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: LD_INT 21
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 58
4249: PUSH
4250: EMPTY
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: PPUSH
4258: CALL_OW 70
4262: ST_TO_ADDR
// if not Bobby then
4263: LD_EXP 4
4267: NOT
4268: IFFALSE 4337
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4270: LD_ADDR_EXP 4
4274: PUSH
4275: LD_EXP 43
4279: PUSH
4280: LD_STRING Bobby
4282: STR
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL 6559 0 2
4291: ST_TO_ADDR
// if veh > 0 then
4292: LD_VAR 0 5
4296: PUSH
4297: LD_INT 0
4299: GREATER
4300: IFFALSE 4322
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4302: LD_EXP 4
4306: PPUSH
4307: LD_VAR 0 5
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: PPUSH
4316: CALL_OW 52
// end else
4320: GO 4337
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4322: LD_EXP 4
4326: PPUSH
4327: LD_INT 4
4329: PPUSH
4330: LD_INT 0
4332: PPUSH
4333: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4337: LD_ADDR_VAR 0 5
4341: PUSH
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 22
4347: PUSH
4348: LD_INT 1
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 2
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 58
4367: PUSH
4368: EMPTY
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 70
4380: ST_TO_ADDR
// if not Cyrus then
4381: LD_EXP 5
4385: NOT
4386: IFFALSE 4455
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4388: LD_ADDR_EXP 5
4392: PUSH
4393: LD_EXP 43
4397: PUSH
4398: LD_STRING Cyrus
4400: STR
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL 6559 0 2
4409: ST_TO_ADDR
// if veh > 0 then
4410: LD_VAR 0 5
4414: PUSH
4415: LD_INT 0
4417: GREATER
4418: IFFALSE 4440
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4420: LD_EXP 5
4424: PPUSH
4425: LD_VAR 0 5
4429: PUSH
4430: LD_INT 1
4432: ARRAY
4433: PPUSH
4434: CALL_OW 52
// end else
4438: GO 4455
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4440: LD_EXP 5
4444: PPUSH
4445: LD_INT 4
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4455: LD_ADDR_VAR 0 5
4459: PUSH
4460: LD_INT 4
4462: PPUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 21
4475: PUSH
4476: LD_INT 2
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 58
4485: PUSH
4486: EMPTY
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 70
4498: ST_TO_ADDR
// if not Lisa then
4499: LD_EXP 6
4503: NOT
4504: IFFALSE 4573
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4506: LD_ADDR_EXP 6
4510: PUSH
4511: LD_EXP 43
4515: PUSH
4516: LD_STRING Lisa
4518: STR
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: CALL 6559 0 2
4527: ST_TO_ADDR
// if veh > 0 then
4528: LD_VAR 0 5
4532: PUSH
4533: LD_INT 0
4535: GREATER
4536: IFFALSE 4558
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4538: LD_EXP 6
4542: PPUSH
4543: LD_VAR 0 5
4547: PUSH
4548: LD_INT 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 52
// end else
4556: GO 4573
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4558: LD_EXP 6
4562: PPUSH
4563: LD_INT 4
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4573: LD_ADDR_VAR 0 5
4577: PUSH
4578: LD_INT 4
4580: PPUSH
4581: LD_INT 22
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 21
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 58
4603: PUSH
4604: EMPTY
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: PPUSH
4612: CALL_OW 70
4616: ST_TO_ADDR
// if not Frank then
4617: LD_EXP 7
4621: NOT
4622: IFFALSE 4691
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4624: LD_ADDR_EXP 7
4628: PUSH
4629: LD_EXP 43
4633: PUSH
4634: LD_STRING Frank
4636: STR
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: CALL 6559 0 2
4645: ST_TO_ADDR
// if veh > 0 then
4646: LD_VAR 0 5
4650: PUSH
4651: LD_INT 0
4653: GREATER
4654: IFFALSE 4676
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4656: LD_EXP 7
4660: PPUSH
4661: LD_VAR 0 5
4665: PUSH
4666: LD_INT 1
4668: ARRAY
4669: PPUSH
4670: CALL_OW 52
// end else
4674: GO 4691
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4676: LD_EXP 7
4680: PPUSH
4681: LD_INT 4
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4691: LD_ADDR_VAR 0 5
4695: PUSH
4696: LD_INT 4
4698: PPUSH
4699: LD_INT 22
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 21
4711: PUSH
4712: LD_INT 2
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: PUSH
4719: LD_INT 58
4721: PUSH
4722: EMPTY
4723: LIST
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: LIST
4729: PPUSH
4730: CALL_OW 70
4734: ST_TO_ADDR
// if not Gladstone then
4735: LD_EXP 8
4739: NOT
4740: IFFALSE 4809
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4742: LD_ADDR_EXP 8
4746: PUSH
4747: LD_EXP 43
4751: PUSH
4752: LD_STRING Gladstone
4754: STR
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL 6559 0 2
4763: ST_TO_ADDR
// if veh > 0 then
4764: LD_VAR 0 5
4768: PUSH
4769: LD_INT 0
4771: GREATER
4772: IFFALSE 4794
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4774: LD_EXP 8
4778: PPUSH
4779: LD_VAR 0 5
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PPUSH
4788: CALL_OW 52
// end else
4792: GO 4809
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4794: LD_EXP 8
4798: PPUSH
4799: LD_INT 4
4801: PPUSH
4802: LD_INT 0
4804: PPUSH
4805: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4809: LD_ADDR_VAR 0 5
4813: PUSH
4814: LD_INT 4
4816: PPUSH
4817: LD_INT 22
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 21
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 58
4839: PUSH
4840: EMPTY
4841: LIST
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 70
4852: ST_TO_ADDR
// if not Kikuchi then
4853: LD_EXP 9
4857: NOT
4858: IFFALSE 4927
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4860: LD_ADDR_EXP 9
4864: PUSH
4865: LD_EXP 43
4869: PUSH
4870: LD_STRING Kikuchi
4872: STR
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL 6559 0 2
4881: ST_TO_ADDR
// if veh > 0 then
4882: LD_VAR 0 5
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4912
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4892: LD_EXP 9
4896: PPUSH
4897: LD_VAR 0 5
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: CALL_OW 52
// end else
4910: GO 4927
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4912: LD_EXP 9
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: LD_INT 0
4922: PPUSH
4923: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4927: LD_ADDR_VAR 0 5
4931: PUSH
4932: LD_INT 4
4934: PPUSH
4935: LD_INT 22
4937: PUSH
4938: LD_INT 1
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 21
4947: PUSH
4948: LD_INT 2
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: PUSH
4955: LD_INT 58
4957: PUSH
4958: EMPTY
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PPUSH
4966: CALL_OW 70
4970: ST_TO_ADDR
// if not Khatam then
4971: LD_EXP 10
4975: NOT
4976: IFFALSE 5045
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
4978: LD_ADDR_EXP 10
4982: PUSH
4983: LD_EXP 43
4987: PUSH
4988: LD_STRING Khatam
4990: STR
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: CALL 6559 0 2
4999: ST_TO_ADDR
// if veh > 0 then
5000: LD_VAR 0 5
5004: PUSH
5005: LD_INT 0
5007: GREATER
5008: IFFALSE 5030
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5010: LD_EXP 10
5014: PPUSH
5015: LD_VAR 0 5
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 52
// end else
5028: GO 5045
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5030: LD_EXP 10
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: LD_INT 0
5040: PPUSH
5041: CALL_OW 49
// end ; end ; other = CreateCharacterSet ( 07c_others ) ;
5045: LD_ADDR_VAR 0 3
5049: PUSH
5050: LD_STRING 07c_others
5052: PPUSH
5053: CALL_OW 31
5057: ST_TO_ADDR
// for i in other do
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5162
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5071: LD_ADDR_VAR 0 5
5075: PUSH
5076: LD_INT 4
5078: PPUSH
5079: LD_INT 22
5081: PUSH
5082: LD_INT 1
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 21
5091: PUSH
5092: LD_INT 2
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 58
5101: PUSH
5102: EMPTY
5103: LIST
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: PPUSH
5110: CALL_OW 70
5114: ST_TO_ADDR
// if veh > 0 then
5115: LD_VAR 0 5
5119: PUSH
5120: LD_INT 0
5122: GREATER
5123: IFFALSE 5145
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_VAR 0 5
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: CALL_OW 52
// end else
5143: GO 5160
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5145: LD_VAR 0 2
5149: PPUSH
5150: LD_INT 4
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: CALL_OW 49
// end ; end ;
5160: GO 5068
5162: POP
5163: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5164: LD_INT 4
5166: PPUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: PPUSH
5180: CALL_OW 70
5184: PPUSH
5185: LD_INT 53
5187: PPUSH
5188: LD_INT 19
5190: PPUSH
5191: CALL_OW 111
// end ;
5195: LD_VAR 0 1
5199: RET
// export function PrepareSikorsky ; begin
5200: LD_INT 0
5202: PPUSH
// uc_side = 4 ;
5203: LD_ADDR_OWVAR 20
5207: PUSH
5208: LD_INT 4
5210: ST_TO_ADDR
// uc_nation = 1 ;
5211: LD_ADDR_OWVAR 21
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5219: LD_ADDR_EXP 16
5223: PUSH
5224: LD_STRING Sikorski
5226: PPUSH
5227: LD_INT 0
5229: PPUSH
5230: CALL 6559 0 2
5234: ST_TO_ADDR
// vc_engine = 1 ;
5235: LD_ADDR_OWVAR 39
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// vc_control = 1 ;
5243: LD_ADDR_OWVAR 38
5247: PUSH
5248: LD_INT 1
5250: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5251: LD_ADDR_OWVAR 40
5255: PUSH
5256: LD_INT 5
5258: PUSH
5259: LD_INT 3
5261: PUSH
5262: LD_INT 4
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: LIST
5269: PUSH
5270: LD_OWVAR 67
5274: ARRAY
5275: ST_TO_ADDR
// vc_chassis = 4 ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 4
5283: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5284: LD_ADDR_EXP 17
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5294: LD_EXP 17
5298: PPUSH
5299: LD_INT 9
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5309: LD_EXP 16
5313: PPUSH
5314: LD_EXP 17
5318: PPUSH
5319: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5323: LD_EXP 17
5327: PPUSH
5328: LD_INT 5
5330: PPUSH
5331: CALL_OW 113
// end ;
5335: LD_VAR 0 1
5339: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5340: LD_INT 0
5342: PPUSH
5343: PPUSH
5344: PPUSH
5345: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: DOUBLE
5352: LD_INT 1
5354: DEC
5355: ST_TO_ADDR
5356: LD_INT 8
5358: PUSH
5359: LD_INT 7
5361: PUSH
5362: LD_INT 7
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PUSH
5376: FOR_TO
5377: IFFALSE 5474
// begin uc_side = 4 ;
5379: LD_ADDR_OWVAR 20
5383: PUSH
5384: LD_INT 4
5386: ST_TO_ADDR
// uc_nation = 1 ;
5387: LD_ADDR_OWVAR 21
5391: PUSH
5392: LD_INT 1
5394: ST_TO_ADDR
// hc_name =  ;
5395: LD_ADDR_OWVAR 26
5399: PUSH
5400: LD_STRING 
5402: ST_TO_ADDR
// hc_gallery =  ;
5403: LD_ADDR_OWVAR 33
5407: PUSH
5408: LD_STRING 
5410: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5411: LD_INT 0
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: LD_INT 5
5419: PPUSH
5420: LD_INT 8
5422: PPUSH
5423: CALL_OW 12
5427: PPUSH
5428: CALL_OW 380
// un = CreateHuman ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5442: LD_VAR 0 3
5446: PPUSH
5447: LD_INT 9
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5457: LD_VAR 0 3
5461: PPUSH
5462: LD_INT 53
5464: PPUSH
5465: LD_INT 23
5467: PPUSH
5468: CALL_OW 111
// end ;
5472: GO 5376
5474: POP
5475: POP
// for i = 1 to 3 do
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_INT 3
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5587
// begin uc_side = 4 ;
5492: LD_ADDR_OWVAR 20
5496: PUSH
5497: LD_INT 4
5499: ST_TO_ADDR
// uc_nation = 1 ;
5500: LD_ADDR_OWVAR 21
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// hc_name =  ;
5508: LD_ADDR_OWVAR 26
5512: PUSH
5513: LD_STRING 
5515: ST_TO_ADDR
// hc_gallery =  ;
5516: LD_ADDR_OWVAR 33
5520: PUSH
5521: LD_STRING 
5523: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5524: LD_INT 0
5526: PPUSH
5527: LD_INT 4
5529: PPUSH
5530: LD_INT 5
5532: PPUSH
5533: LD_INT 8
5535: PPUSH
5536: CALL_OW 12
5540: PPUSH
5541: CALL_OW 380
// un = CreateHuman ;
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: CALL_OW 44
5554: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5555: LD_VAR 0 3
5559: PPUSH
5560: LD_INT 9
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5570: LD_VAR 0 3
5574: PPUSH
5575: LD_INT 53
5577: PPUSH
5578: LD_INT 23
5580: PPUSH
5581: CALL_OW 111
// end ;
5585: GO 5489
5587: POP
5588: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5589: LD_ADDR_VAR 0 2
5593: PUSH
5594: DOUBLE
5595: LD_INT 1
5597: DEC
5598: ST_TO_ADDR
5599: LD_INT 9
5601: PUSH
5602: LD_INT 8
5604: PUSH
5605: LD_INT 7
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: LD_OWVAR 67
5617: ARRAY
5618: PUSH
5619: FOR_TO
5620: IFFALSE 5816
// begin uc_side = 4 ;
5622: LD_ADDR_OWVAR 20
5626: PUSH
5627: LD_INT 4
5629: ST_TO_ADDR
// uc_nation = 1 ;
5630: LD_ADDR_OWVAR 21
5634: PUSH
5635: LD_INT 1
5637: ST_TO_ADDR
// vc_engine = 1 ;
5638: LD_ADDR_OWVAR 39
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// vc_control = 1 ;
5646: LD_ADDR_OWVAR 38
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5654: LD_ADDR_OWVAR 40
5658: PUSH
5659: LD_INT 3
5661: PUSH
5662: LD_INT 4
5664: PUSH
5665: LD_INT 5
5667: PUSH
5668: LD_INT 6
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 1
5679: PPUSH
5680: LD_INT 4
5682: PPUSH
5683: CALL_OW 12
5687: ARRAY
5688: ST_TO_ADDR
// vc_chassis = 4 ;
5689: LD_ADDR_OWVAR 37
5693: PUSH
5694: LD_INT 4
5696: ST_TO_ADDR
// veh = CreateVehicle ;
5697: LD_ADDR_VAR 0 4
5701: PUSH
5702: CALL_OW 45
5706: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_INT 9
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 49
// hc_name =  ;
5722: LD_ADDR_OWVAR 26
5726: PUSH
5727: LD_STRING 
5729: ST_TO_ADDR
// hc_gallery =  ;
5730: LD_ADDR_OWVAR 33
5734: PUSH
5735: LD_STRING 
5737: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 3
5743: PPUSH
5744: LD_INT 5
5746: PPUSH
5747: LD_INT 8
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: CALL_OW 380
// un = CreateHuman ;
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: CALL_OW 44
5768: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_VAR 0 4
5778: PPUSH
5779: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5783: LD_VAR 0 4
5787: PUSH
5788: LD_VAR 0 3
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PPUSH
5797: LD_INT 53
5799: PPUSH
5800: LD_INT 23
5802: PPUSH
5803: CALL_OW 111
// wait ( 0 0$5 ) ;
5807: LD_INT 175
5809: PPUSH
5810: CALL_OW 67
// end ;
5814: GO 5619
5816: POP
5817: POP
// end ; end_of_file
5818: LD_VAR 0 1
5822: RET
// export function PrepareRussianCommander ; begin
5823: LD_INT 0
5825: PPUSH
// uc_side = 3 ;
5826: LD_ADDR_OWVAR 20
5830: PUSH
5831: LD_INT 3
5833: ST_TO_ADDR
// uc_nation = 3 ;
5834: LD_ADDR_OWVAR 21
5838: PUSH
5839: LD_INT 3
5841: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5842: LD_ADDR_EXP 24
5846: PUSH
5847: LD_STRING Borodin
5849: PPUSH
5850: CALL_OW 25
5854: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5855: LD_EXP 24
5859: PPUSH
5860: LD_INT 25
5862: PPUSH
5863: LD_INT 0
5865: PPUSH
5866: CALL_OW 49
// end ;
5870: LD_VAR 0 1
5874: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5875: LD_INT 0
5877: PPUSH
5878: PPUSH
5879: PPUSH
5880: PPUSH
// for i = 1 to 10 do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_INT 10
5893: PUSH
5894: FOR_TO
5895: IFFALSE 5969
// begin uc_side = 6 ;
5897: LD_ADDR_OWVAR 20
5901: PUSH
5902: LD_INT 6
5904: ST_TO_ADDR
// uc_nation = 3 ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 3
5912: ST_TO_ADDR
// hc_gallery =  ;
5913: LD_ADDR_OWVAR 33
5917: PUSH
5918: LD_STRING 
5920: ST_TO_ADDR
// hc_name =  ;
5921: LD_ADDR_OWVAR 26
5925: PUSH
5926: LD_STRING 
5928: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5929: LD_INT 0
5931: PPUSH
5932: LD_INT 1
5934: PPUSH
5935: LD_INT 3
5937: PPUSH
5938: CALL_OW 380
// un = CreateHuman ;
5942: LD_ADDR_VAR 0 3
5946: PUSH
5947: CALL_OW 44
5951: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: LD_INT 0
5962: PPUSH
5963: CALL_OW 49
// end ;
5967: GO 5894
5969: POP
5970: POP
// for i = 1 to 3 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 3
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6134
// begin uc_side = 6 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 6
5994: ST_TO_ADDR
// uc_nation = 3 ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// vc_engine = 1 ;
6003: LD_ADDR_OWVAR 39
6007: PUSH
6008: LD_INT 1
6010: ST_TO_ADDR
// vc_control = 1 ;
6011: LD_ADDR_OWVAR 38
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6019: LD_ADDR_OWVAR 40
6023: PUSH
6024: LD_INT 43
6026: PUSH
6027: LD_INT 44
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 1
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: CALL_OW 12
6044: ARRAY
6045: ST_TO_ADDR
// vc_chassis = 22 ;
6046: LD_ADDR_OWVAR 37
6050: PUSH
6051: LD_INT 22
6053: ST_TO_ADDR
// veh = CreateVehicle ;
6054: LD_ADDR_VAR 0 4
6058: PUSH
6059: CALL_OW 45
6063: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6064: LD_VAR 0 4
6068: PPUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL_OW 49
// hc_gallery =  ;
6079: LD_ADDR_OWVAR 33
6083: PUSH
6084: LD_STRING 
6086: ST_TO_ADDR
// hc_name =  ;
6087: LD_ADDR_OWVAR 26
6091: PUSH
6092: LD_STRING 
6094: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6095: LD_INT 0
6097: PPUSH
6098: LD_INT 3
6100: PPUSH
6101: LD_INT 4
6103: PPUSH
6104: CALL_OW 380
// un = CreateHuman ;
6108: LD_ADDR_VAR 0 3
6112: PUSH
6113: CALL_OW 44
6117: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_VAR 0 4
6127: PPUSH
6128: CALL_OW 52
// end ;
6132: GO 5984
6134: POP
6135: POP
// end ;
6136: LD_VAR 0 1
6140: RET
// export function PrepareRussians ; var i , un ; begin
6141: LD_INT 0
6143: PPUSH
6144: PPUSH
6145: PPUSH
// for i = 1 to 14 do
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: DOUBLE
6152: LD_INT 1
6154: DEC
6155: ST_TO_ADDR
6156: LD_INT 14
6158: PUSH
6159: FOR_TO
6160: IFFALSE 6246
// begin uc_side = 3 ;
6162: LD_ADDR_OWVAR 20
6166: PUSH
6167: LD_INT 3
6169: ST_TO_ADDR
// uc_nation = 3 ;
6170: LD_ADDR_OWVAR 21
6174: PUSH
6175: LD_INT 3
6177: ST_TO_ADDR
// hc_gallery =  ;
6178: LD_ADDR_OWVAR 33
6182: PUSH
6183: LD_STRING 
6185: ST_TO_ADDR
// hc_name =  ;
6186: LD_ADDR_OWVAR 26
6190: PUSH
6191: LD_STRING 
6193: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6194: LD_INT 0
6196: PPUSH
6197: LD_INT 1
6199: PPUSH
6200: LD_EXP 25
6204: PPUSH
6205: LD_EXP 26
6209: PPUSH
6210: CALL_OW 12
6214: PPUSH
6215: CALL_OW 380
// un = CreateHuman ;
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: CALL_OW 44
6228: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6229: LD_VAR 0 3
6233: PPUSH
6234: LD_INT 3
6236: PPUSH
6237: LD_INT 0
6239: PPUSH
6240: CALL_OW 49
// end ;
6244: GO 6159
6246: POP
6247: POP
// for i = 1 to 6 do
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: DOUBLE
6254: LD_INT 1
6256: DEC
6257: ST_TO_ADDR
6258: LD_INT 6
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6348
// begin uc_side = 3 ;
6264: LD_ADDR_OWVAR 20
6268: PUSH
6269: LD_INT 3
6271: ST_TO_ADDR
// uc_nation = 3 ;
6272: LD_ADDR_OWVAR 21
6276: PUSH
6277: LD_INT 3
6279: ST_TO_ADDR
// hc_gallery =  ;
6280: LD_ADDR_OWVAR 33
6284: PUSH
6285: LD_STRING 
6287: ST_TO_ADDR
// hc_name =  ;
6288: LD_ADDR_OWVAR 26
6292: PUSH
6293: LD_STRING 
6295: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6296: LD_INT 0
6298: PPUSH
6299: LD_INT 2
6301: PPUSH
6302: LD_EXP 25
6306: PPUSH
6307: LD_EXP 26
6311: PPUSH
6312: CALL_OW 12
6316: PPUSH
6317: CALL_OW 380
// un = CreateHuman ;
6321: LD_ADDR_VAR 0 3
6325: PUSH
6326: CALL_OW 44
6330: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6331: LD_VAR 0 3
6335: PPUSH
6336: LD_INT 3
6338: PPUSH
6339: LD_INT 0
6341: PPUSH
6342: CALL_OW 49
// end ;
6346: GO 6261
6348: POP
6349: POP
// for i = 1 to 6 do
6350: LD_ADDR_VAR 0 2
6354: PUSH
6355: DOUBLE
6356: LD_INT 1
6358: DEC
6359: ST_TO_ADDR
6360: LD_INT 6
6362: PUSH
6363: FOR_TO
6364: IFFALSE 6450
// begin uc_side = 3 ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_INT 3
6373: ST_TO_ADDR
// uc_nation = 3 ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// hc_gallery =  ;
6382: LD_ADDR_OWVAR 33
6386: PUSH
6387: LD_STRING 
6389: ST_TO_ADDR
// hc_name =  ;
6390: LD_ADDR_OWVAR 26
6394: PUSH
6395: LD_STRING 
6397: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: LD_EXP 25
6408: PPUSH
6409: LD_EXP 26
6413: PPUSH
6414: CALL_OW 12
6418: PPUSH
6419: CALL_OW 380
// un = CreateHuman ;
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6433: LD_VAR 0 3
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 49
// end ;
6448: GO 6363
6450: POP
6451: POP
// for i = 1 to 4 do
6452: LD_ADDR_VAR 0 2
6456: PUSH
6457: DOUBLE
6458: LD_INT 1
6460: DEC
6461: ST_TO_ADDR
6462: LD_INT 4
6464: PUSH
6465: FOR_TO
6466: IFFALSE 6552
// begin uc_side = 3 ;
6468: LD_ADDR_OWVAR 20
6472: PUSH
6473: LD_INT 3
6475: ST_TO_ADDR
// uc_nation = 3 ;
6476: LD_ADDR_OWVAR 21
6480: PUSH
6481: LD_INT 3
6483: ST_TO_ADDR
// hc_gallery =  ;
6484: LD_ADDR_OWVAR 33
6488: PUSH
6489: LD_STRING 
6491: ST_TO_ADDR
// hc_name =  ;
6492: LD_ADDR_OWVAR 26
6496: PUSH
6497: LD_STRING 
6499: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6500: LD_INT 0
6502: PPUSH
6503: LD_INT 4
6505: PPUSH
6506: LD_EXP 25
6510: PPUSH
6511: LD_EXP 26
6515: PPUSH
6516: CALL_OW 12
6520: PPUSH
6521: CALL_OW 380
// un = CreateHuman ;
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: CALL_OW 44
6534: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6535: LD_VAR 0 3
6539: PPUSH
6540: LD_INT 3
6542: PPUSH
6543: LD_INT 0
6545: PPUSH
6546: CALL_OW 49
// end ;
6550: GO 6465
6552: POP
6553: POP
// end ; end_of_file
6554: LD_VAR 0 1
6558: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6559: LD_INT 0
6561: PPUSH
6562: PPUSH
// if exist_mode then
6563: LD_VAR 0 2
6567: IFFALSE 6586
// unit := CreateCharacter ( ident ) else
6569: LD_ADDR_VAR 0 4
6573: PUSH
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 34
6583: ST_TO_ADDR
6584: GO 6601
// unit := NewCharacter ( ident ) ;
6586: LD_ADDR_VAR 0 4
6590: PUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: CALL_OW 25
6600: ST_TO_ADDR
// result := unit ;
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: LD_VAR 0 4
6610: ST_TO_ADDR
// end ;
6611: LD_VAR 0 3
6615: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6616: LD_INT 0
6618: PPUSH
6619: PPUSH
6620: PPUSH
// rnd = rand ( 1 , characters ) ;
6621: LD_ADDR_VAR 0 6
6625: PUSH
6626: LD_INT 1
6628: PPUSH
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 12
6638: ST_TO_ADDR
// for i = 1 to characters do
6639: LD_ADDR_VAR 0 5
6643: PUSH
6644: DOUBLE
6645: LD_INT 1
6647: DEC
6648: ST_TO_ADDR
6649: LD_VAR 0 1
6653: PUSH
6654: FOR_TO
6655: IFFALSE 6765
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6657: LD_VAR 0 5
6661: PUSH
6662: LD_VAR 0 6
6666: EQUAL
6667: PUSH
6668: LD_VAR 0 1
6672: PUSH
6673: LD_VAR 0 5
6677: ARRAY
6678: PPUSH
6679: CALL_OW 258
6683: PUSH
6684: LD_INT 1
6686: EQUAL
6687: AND
6688: IFFALSE 6710
// Say ( characters [ i ] , dialogMID ) ;
6690: LD_VAR 0 1
6694: PUSH
6695: LD_VAR 0 5
6699: ARRAY
6700: PPUSH
6701: LD_VAR 0 2
6705: PPUSH
6706: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6710: LD_VAR 0 5
6714: PUSH
6715: LD_VAR 0 6
6719: EQUAL
6720: PUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_VAR 0 5
6730: ARRAY
6731: PPUSH
6732: CALL_OW 258
6736: PUSH
6737: LD_INT 2
6739: EQUAL
6740: AND
6741: IFFALSE 6763
// Say ( characters [ i ] , dialogFID ) ;
6743: LD_VAR 0 1
6747: PUSH
6748: LD_VAR 0 5
6752: ARRAY
6753: PPUSH
6754: LD_VAR 0 3
6758: PPUSH
6759: CALL_OW 88
// end ;
6763: GO 6654
6765: POP
6766: POP
// end ;
6767: LD_VAR 0 4
6771: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6772: LD_INT 0
6774: PPUSH
6775: PPUSH
6776: PPUSH
// uc_side := GetSide ( b ) ;
6777: LD_ADDR_OWVAR 20
6781: PUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 255
6791: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6792: LD_ADDR_OWVAR 21
6796: PUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 248
6806: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6807: LD_INT 0
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6822: LD_ADDR_VAR 0 5
6826: PUSH
6827: LD_VAR 0 2
6831: PPUSH
6832: CALL_OW 254
6836: PUSH
6837: LD_INT 3
6839: MINUS
6840: ST_TO_ADDR
// if dir < 0 then
6841: LD_VAR 0 5
6845: PUSH
6846: LD_INT 0
6848: LESS
6849: IFFALSE 6865
// dir := 6 + dir ;
6851: LD_ADDR_VAR 0 5
6855: PUSH
6856: LD_INT 6
6858: PUSH
6859: LD_VAR 0 5
6863: PLUS
6864: ST_TO_ADDR
// un := CreateHuman ;
6865: LD_ADDR_VAR 0 4
6869: PUSH
6870: CALL_OW 44
6874: ST_TO_ADDR
// SetDir ( un , dir ) ;
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_VAR 0 5
6884: PPUSH
6885: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6889: LD_VAR 0 4
6893: PPUSH
6894: LD_VAR 0 2
6898: PPUSH
6899: CALL_OW 52
// end ;
6903: LD_VAR 0 3
6907: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6908: LD_INT 0
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
// for i = 1 to count do
6914: LD_ADDR_VAR 0 8
6918: PUSH
6919: DOUBLE
6920: LD_INT 1
6922: DEC
6923: ST_TO_ADDR
6924: LD_VAR 0 6
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7011
// begin uc_side = side ;
6932: LD_ADDR_OWVAR 20
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// uc_nation = nation ;
6942: LD_ADDR_OWVAR 21
6946: PUSH
6947: LD_VAR 0 2
6951: ST_TO_ADDR
// hc_gallery =  ;
6952: LD_ADDR_OWVAR 33
6956: PUSH
6957: LD_STRING 
6959: ST_TO_ADDR
// hc_name =  ;
6960: LD_ADDR_OWVAR 26
6964: PUSH
6965: LD_STRING 
6967: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6968: LD_INT 0
6970: PPUSH
6971: LD_VAR 0 5
6975: PPUSH
6976: LD_VAR 0 4
6980: PPUSH
6981: CALL_OW 380
// un = CreateHuman ;
6985: LD_ADDR_VAR 0 10
6989: PUSH
6990: CALL_OW 44
6994: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6995: LD_VAR 0 10
6999: PPUSH
7000: LD_VAR 0 3
7004: PPUSH
7005: CALL_OW 52
// end ;
7009: GO 6929
7011: POP
7012: POP
// end ;
7013: LD_VAR 0 7
7017: RET
// export function PrepareDifficulty ; begin
7018: LD_INT 0
7020: PPUSH
// if Difficulty = 1 then
7021: LD_OWVAR 67
7025: PUSH
7026: LD_INT 1
7028: EQUAL
7029: IFFALSE 7047
// begin RuSolMinLevel = 4 ;
7031: LD_ADDR_EXP 25
7035: PUSH
7036: LD_INT 4
7038: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7039: LD_ADDR_EXP 26
7043: PUSH
7044: LD_INT 6
7046: ST_TO_ADDR
// end ; if Difficulty = 2 then
7047: LD_OWVAR 67
7051: PUSH
7052: LD_INT 2
7054: EQUAL
7055: IFFALSE 7125
// begin RuSolMinLevel = 5 ;
7057: LD_ADDR_EXP 25
7061: PUSH
7062: LD_INT 5
7064: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7065: LD_ADDR_EXP 26
7069: PUSH
7070: LD_INT 6
7072: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7073: LD_INT 51
7075: PPUSH
7076: LD_INT 3
7078: PPUSH
7079: LD_INT 1
7081: PPUSH
7082: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7086: LD_INT 57
7088: PPUSH
7089: LD_INT 3
7091: PPUSH
7092: LD_INT 1
7094: PPUSH
7095: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7099: LD_INT 57
7101: PPUSH
7102: LD_INT 6
7104: PPUSH
7105: LD_INT 2
7107: PPUSH
7108: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7112: LD_INT 51
7114: PPUSH
7115: LD_INT 6
7117: PPUSH
7118: LD_INT 2
7120: PPUSH
7121: CALL_OW 322
// end ; if Difficulty = 3 then
7125: LD_OWVAR 67
7129: PUSH
7130: LD_INT 3
7132: EQUAL
7133: IFFALSE 7216
// begin RuSolMinLevel = 5 ;
7135: LD_ADDR_EXP 25
7139: PUSH
7140: LD_INT 5
7142: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7143: LD_ADDR_EXP 26
7147: PUSH
7148: LD_INT 6
7150: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7151: LD_INT 57
7153: PPUSH
7154: LD_INT 3
7156: PPUSH
7157: LD_INT 1
7159: PPUSH
7160: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7164: LD_INT 51
7166: PPUSH
7167: LD_INT 3
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7177: LD_INT 52
7179: PPUSH
7180: LD_INT 3
7182: PPUSH
7183: LD_INT 1
7185: PPUSH
7186: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7190: LD_INT 57
7192: PPUSH
7193: LD_INT 6
7195: PPUSH
7196: LD_INT 2
7198: PPUSH
7199: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7203: LD_INT 52
7205: PPUSH
7206: LD_INT 6
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 322
// end ; end ;
7216: LD_VAR 0 1
7220: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7221: LD_INT 0
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7227: LD_ADDR_VAR 0 3
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7261: LD_ADDR_VAR 0 4
7265: PUSH
7266: LD_INT 4
7268: PUSH
7269: LD_INT 75
7271: PUSH
7272: LD_INT 79
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_INT 4
7286: PUSH
7287: LD_INT 113
7289: PUSH
7290: LD_INT 94
7292: PUSH
7293: LD_INT 4
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 29
7304: PUSH
7305: LD_INT 106
7307: PUSH
7308: LD_INT 97
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 26
7322: PUSH
7323: LD_INT 93
7325: PUSH
7326: LD_INT 97
7328: PUSH
7329: LD_INT 5
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 100
7343: PUSH
7344: LD_INT 89
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 17
7358: PUSH
7359: LD_INT 96
7361: PUSH
7362: LD_INT 89
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 32
7376: PUSH
7377: LD_INT 78
7379: PUSH
7380: LD_INT 94
7382: PUSH
7383: LD_INT 1
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 32
7394: PUSH
7395: LD_INT 95
7397: PUSH
7398: LD_INT 82
7400: PUSH
7401: LD_INT 3
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: LD_INT 32
7412: PUSH
7413: LD_INT 104
7415: PUSH
7416: LD_INT 85
7418: PUSH
7419: LD_INT 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 32
7430: PUSH
7431: LD_INT 81
7433: PUSH
7434: LD_INT 78
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 33
7448: PUSH
7449: LD_INT 109
7451: PUSH
7452: LD_INT 90
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 33
7466: PUSH
7467: LD_INT 88
7469: PUSH
7470: LD_INT 79
7472: PUSH
7473: LD_INT 3
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 33
7484: PUSH
7485: LD_INT 76
7487: PUSH
7488: LD_INT 87
7490: PUSH
7491: LD_INT 1
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 26
7502: PUSH
7503: LD_INT 96
7505: PUSH
7506: LD_INT 97
7508: PUSH
7509: LD_INT 5
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 85
7523: PUSH
7524: LD_INT 84
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 6
7538: PUSH
7539: LD_INT 88
7541: PUSH
7542: LD_INT 95
7544: PUSH
7545: LD_INT 0
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 19
7556: PUSH
7557: LD_INT 103
7559: PUSH
7560: LD_INT 89
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 16
7574: PUSH
7575: LD_INT 97
7577: PUSH
7578: LD_INT 86
7580: PUSH
7581: LD_INT 2
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 24
7592: PUSH
7593: LD_INT 100
7595: PUSH
7596: LD_INT 85
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: ST_TO_ADDR
// for i := 1 to buildingsTab do
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: DOUBLE
7635: LD_INT 1
7637: DEC
7638: ST_TO_ADDR
7639: LD_VAR 0 4
7643: PUSH
7644: FOR_TO
7645: IFFALSE 7718
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7647: LD_VAR 0 3
7651: PPUSH
7652: LD_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: ARRAY
7662: PUSH
7663: LD_INT 1
7665: ARRAY
7666: PPUSH
7667: LD_VAR 0 4
7671: PUSH
7672: LD_VAR 0 2
7676: ARRAY
7677: PUSH
7678: LD_INT 2
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 4
7686: PUSH
7687: LD_VAR 0 2
7691: ARRAY
7692: PUSH
7693: LD_INT 3
7695: ARRAY
7696: PPUSH
7697: LD_VAR 0 4
7701: PUSH
7702: LD_VAR 0 2
7706: ARRAY
7707: PUSH
7708: LD_INT 4
7710: ARRAY
7711: PPUSH
7712: CALL_OW 205
7716: GO 7644
7718: POP
7719: POP
// end ;
7720: LD_VAR 0 1
7724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7725: LD_INT 0
7727: PPUSH
7728: PPUSH
// for i in charactersList do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: LD_VAR 0 1
7738: PUSH
7739: FOR_IN
7740: IFFALSE 7769
// begin if IsOk ( i ) then
7742: LD_VAR 0 4
7746: PPUSH
7747: CALL_OW 302
7751: IFFALSE 7767
// SaveCharacters ( i , ident ) ;
7753: LD_VAR 0 4
7757: PPUSH
7758: LD_VAR 0 2
7762: PPUSH
7763: CALL_OW 38
// end ;
7767: GO 7739
7769: POP
7770: POP
// end ;
7771: LD_VAR 0 3
7775: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7776: LD_INT 0
7778: PPUSH
7779: PPUSH
7780: PPUSH
7781: PPUSH
// for i = 1 to 72 do
7782: LD_ADDR_VAR 0 5
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_INT 72
7794: PUSH
7795: FOR_TO
7796: IFFALSE 7854
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7798: LD_VAR 0 5
7802: PPUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 321
7812: PUSH
7813: LD_INT 1
7815: EQUAL
7816: PUSH
7817: LD_VAR 0 5
7821: PPUSH
7822: LD_VAR 0 3
7826: PPUSH
7827: CALL_OW 482
7831: PUSH
7832: LD_INT 1
7834: EQUAL
7835: AND
7836: IFFALSE 7852
// AddComResearch ( lab , i ) ;
7838: LD_VAR 0 2
7842: PPUSH
7843: LD_VAR 0 5
7847: PPUSH
7848: CALL_OW 184
7852: GO 7795
7854: POP
7855: POP
// end ;
7856: LD_VAR 0 4
7860: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7871: LD_ADDR_VAR 0 6
7875: PUSH
7876: LD_VAR 0 2
7880: PPUSH
7881: LD_INT 22
7883: PUSH
7884: LD_VAR 0 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 56
7895: PUSH
7896: EMPTY
7897: LIST
7898: PUSH
7899: LD_INT 24
7901: PUSH
7902: LD_INT 700
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: LD_INT 60
7914: PUSH
7915: EMPTY
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: LD_INT 25
7927: PUSH
7928: LD_INT 1
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 25
7937: PUSH
7938: LD_INT 5
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 25
7947: PUSH
7948: LD_INT 8
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 25
7957: PUSH
7958: LD_INT 9
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: PUSH
7984: LD_EXP 24
7988: PUSH
7989: EMPTY
7990: LIST
7991: DIFF
7992: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7993: LD_ADDR_VAR 0 7
7997: PUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_VAR 0 1
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 30
8017: PUSH
8018: LD_INT 32
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 58
8027: PUSH
8028: EMPTY
8029: LIST
8030: PUSH
8031: LD_INT 24
8033: PUSH
8034: LD_INT 251
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8052: LD_ADDR_VAR 0 9
8056: PUSH
8057: LD_VAR 0 2
8061: PPUSH
8062: LD_INT 22
8064: PUSH
8065: LD_VAR 0 1
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: LD_INT 30
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 5
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 24
8104: PUSH
8105: LD_INT 251
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: PPUSH
8117: CALL_OW 70
8121: ST_TO_ADDR
// if barrackList > 0 then
8122: LD_VAR 0 9
8126: PUSH
8127: LD_INT 0
8129: GREATER
8130: IFFALSE 8278
// begin if turretList = 0 then
8132: LD_VAR 0 7
8136: PUSH
8137: LD_INT 0
8139: EQUAL
8140: IFFALSE 8182
// begin if soldiers_list > 0 then
8142: LD_VAR 0 6
8146: PUSH
8147: LD_INT 0
8149: GREATER
8150: IFFALSE 8180
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8152: LD_VAR 0 6
8156: PPUSH
8157: LD_VAR 0 9
8161: PUSH
8162: LD_INT 1
8164: PPUSH
8165: LD_VAR 0 9
8169: PPUSH
8170: CALL_OW 12
8174: ARRAY
8175: PPUSH
8176: CALL_OW 120
// end else
8180: GO 8278
// begin for i in barrackList do
8182: LD_ADDR_VAR 0 4
8186: PUSH
8187: LD_VAR 0 9
8191: PUSH
8192: FOR_IN
8193: IFFALSE 8276
// begin insideUnits = UnitsInside ( i ) ;
8195: LD_ADDR_VAR 0 10
8199: PUSH
8200: LD_VAR 0 4
8204: PPUSH
8205: CALL_OW 313
8209: ST_TO_ADDR
// if insideUnits > 0 then
8210: LD_VAR 0 10
8214: PUSH
8215: LD_INT 0
8217: GREATER
8218: IFFALSE 8242
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8220: LD_VAR 0 10
8224: PUSH
8225: LD_INT 1
8227: ARRAY
8228: PPUSH
8229: LD_VAR 0 7
8233: PUSH
8234: LD_INT 1
8236: ARRAY
8237: PPUSH
8238: CALL_OW 120
// if soldiers_list > 0 then
8242: LD_VAR 0 6
8246: PUSH
8247: LD_INT 0
8249: GREATER
8250: IFFALSE 8274
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8252: LD_VAR 0 6
8256: PUSH
8257: LD_INT 1
8259: ARRAY
8260: PPUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: CALL_OW 120
// end ;
8274: GO 8192
8276: POP
8277: POP
// end ; end ; end ;
8278: LD_VAR 0 3
8282: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8283: LD_INT 0
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
// for i = 1 to infantryCount do
8291: LD_ADDR_VAR 0 8
8295: PUSH
8296: DOUBLE
8297: LD_INT 1
8299: DEC
8300: ST_TO_ADDR
8301: LD_VAR 0 5
8305: PUSH
8306: FOR_TO
8307: IFFALSE 8423
// begin uc_side = side ;
8309: LD_ADDR_OWVAR 20
8313: PUSH
8314: LD_VAR 0 1
8318: ST_TO_ADDR
// uc_nation = nation ;
8319: LD_ADDR_OWVAR 21
8323: PUSH
8324: LD_VAR 0 3
8328: ST_TO_ADDR
// hc_class = 1 ;
8329: LD_ADDR_OWVAR 28
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// hc_name =  ;
8337: LD_ADDR_OWVAR 26
8341: PUSH
8342: LD_STRING 
8344: ST_TO_ADDR
// hc_gallery =  ;
8345: LD_ADDR_OWVAR 33
8349: PUSH
8350: LD_STRING 
8352: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8353: LD_INT 0
8355: PPUSH
8356: LD_INT 1
8358: PPUSH
8359: LD_EXP 25
8363: PPUSH
8364: LD_EXP 26
8368: PPUSH
8369: CALL_OW 12
8373: PPUSH
8374: CALL_OW 380
// un = CreateHuman ;
8378: LD_ADDR_VAR 0 10
8382: PUSH
8383: CALL_OW 44
8387: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8388: LD_VAR 0 10
8392: PPUSH
8393: LD_VAR 0 2
8397: PPUSH
8398: LD_INT 0
8400: PPUSH
8401: CALL_OW 49
// defenders_list = defenders_list ^ un ;
8405: LD_ADDR_EXP 32
8409: PUSH
8410: LD_EXP 32
8414: PUSH
8415: LD_VAR 0 10
8419: ADD
8420: ST_TO_ADDR
// end ;
8421: GO 8306
8423: POP
8424: POP
// for i = 1 to vehCount do
8425: LD_ADDR_VAR 0 8
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_VAR 0 6
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8648
// begin uc_side = side ;
8443: LD_ADDR_OWVAR 20
8447: PUSH
8448: LD_VAR 0 1
8452: ST_TO_ADDR
// uc_nation = nation ;
8453: LD_ADDR_OWVAR 21
8457: PUSH
8458: LD_VAR 0 3
8462: ST_TO_ADDR
// vc_Chassis = 22 ;
8463: LD_ADDR_OWVAR 37
8467: PUSH
8468: LD_INT 22
8470: ST_TO_ADDR
// vc_engine = 1 ;
8471: LD_ADDR_OWVAR 39
8475: PUSH
8476: LD_INT 1
8478: ST_TO_ADDR
// vc_control = 1 ;
8479: LD_ADDR_OWVAR 38
8483: PUSH
8484: LD_INT 1
8486: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8487: LD_ADDR_OWVAR 40
8491: PUSH
8492: LD_INT 43
8494: PUSH
8495: LD_INT 44
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 1
8504: PPUSH
8505: LD_INT 2
8507: PPUSH
8508: CALL_OW 12
8512: ARRAY
8513: ST_TO_ADDR
// veh = CreateVehicle ;
8514: LD_ADDR_VAR 0 12
8518: PUSH
8519: CALL_OW 45
8523: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8524: LD_VAR 0 12
8528: PPUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8541: LD_ADDR_EXP 32
8545: PUSH
8546: LD_EXP 32
8550: PUSH
8551: LD_VAR 0 12
8555: ADD
8556: ST_TO_ADDR
// hc_class = 3 ;
8557: LD_ADDR_OWVAR 28
8561: PUSH
8562: LD_INT 3
8564: ST_TO_ADDR
// hc_name =  ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// hc_gallery =  ;
8573: LD_ADDR_OWVAR 33
8577: PUSH
8578: LD_STRING 
8580: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8581: LD_INT 0
8583: PPUSH
8584: LD_INT 3
8586: PPUSH
8587: LD_EXP 25
8591: PPUSH
8592: LD_EXP 26
8596: PPUSH
8597: CALL_OW 12
8601: PPUSH
8602: CALL_OW 380
// un = CreateHuman ;
8606: LD_ADDR_VAR 0 10
8610: PUSH
8611: CALL_OW 44
8615: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8616: LD_VAR 0 10
8620: PPUSH
8621: LD_VAR 0 12
8625: PPUSH
8626: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8630: LD_ADDR_EXP 32
8634: PUSH
8635: LD_EXP 32
8639: PUSH
8640: LD_VAR 0 10
8644: ADD
8645: ST_TO_ADDR
// end ;
8646: GO 8440
8648: POP
8649: POP
// end ;
8650: LD_VAR 0 7
8654: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8655: LD_INT 0
8657: PPUSH
8658: PPUSH
8659: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8660: LD_VAR 0 2
8664: PPUSH
8665: LD_INT 22
8667: PUSH
8668: LD_VAR 0 1
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: PPUSH
8680: CALL_OW 70
8684: PUSH
8685: LD_INT 0
8687: EQUAL
8688: PUSH
8689: LD_EXP 32
8693: PUSH
8694: LD_INT 0
8696: GREATER
8697: AND
8698: IFFALSE 8727
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8700: LD_EXP 32
8704: PPUSH
8705: LD_INT 65
8707: PPUSH
8708: LD_INT 68
8710: PPUSH
8711: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8715: LD_EXP 32
8719: PPUSH
8720: LD_INT 100
8722: PPUSH
8723: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8727: LD_VAR 0 2
8731: PPUSH
8732: LD_INT 22
8734: PUSH
8735: LD_VAR 0 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: PPUSH
8747: CALL_OW 70
8751: PUSH
8752: LD_INT 0
8754: GREATER
8755: PUSH
8756: LD_EXP 32
8760: PUSH
8761: LD_INT 0
8763: GREATER
8764: AND
8765: IFFALSE 8844
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8767: LD_EXP 32
8771: PPUSH
8772: LD_VAR 0 2
8776: PPUSH
8777: LD_INT 22
8779: PUSH
8780: LD_VAR 0 1
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: PPUSH
8792: CALL_OW 70
8796: PUSH
8797: LD_INT 1
8799: ARRAY
8800: PPUSH
8801: CALL_OW 250
8805: PPUSH
8806: LD_VAR 0 2
8810: PPUSH
8811: LD_INT 22
8813: PUSH
8814: LD_VAR 0 1
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: EMPTY
8824: LIST
8825: PPUSH
8826: CALL_OW 70
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: CALL_OW 251
8839: PPUSH
8840: CALL_OW 114
// end ;
8844: LD_VAR 0 3
8848: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8854: LD_INT 22
8856: PUSH
8857: LD_VAR 0 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 21
8868: PUSH
8869: LD_INT 2
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 69
8884: PUSH
8885: LD_VAR 0 3
8889: LESSEQUAL
8890: IFFALSE 8998
// begin for i = 1 to vehCount do
8892: LD_ADDR_VAR 0 9
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_VAR 0 3
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8996
// begin weapon = weaponTab [ i ] ;
8910: LD_ADDR_VAR 0 10
8914: PUSH
8915: LD_VAR 0 4
8919: PUSH
8920: LD_VAR 0 9
8924: ARRAY
8925: ST_TO_ADDR
// if weapon = 46 then
8926: LD_VAR 0 10
8930: PUSH
8931: LD_INT 46
8933: EQUAL
8934: IFFALSE 8965
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8936: LD_VAR 0 2
8940: PPUSH
8941: LD_INT 24
8943: PPUSH
8944: LD_VAR 0 5
8948: PPUSH
8949: LD_VAR 0 6
8953: PPUSH
8954: LD_VAR 0 10
8958: PPUSH
8959: CALL_OW 185
// end else
8963: GO 8994
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_VAR 0 7
8974: PPUSH
8975: LD_VAR 0 5
8979: PPUSH
8980: LD_VAR 0 6
8984: PPUSH
8985: LD_VAR 0 10
8989: PPUSH
8990: CALL_OW 185
// end ; end ;
8994: GO 8907
8996: POP
8997: POP
// end ; end ;
8998: LD_VAR 0 8
9002: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9003: LD_INT 0
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9009: LD_ADDR_VAR 0 8
9013: PUSH
9014: LD_INT 22
9016: PUSH
9017: LD_VAR 0 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 21
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 650
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PPUSH
9058: CALL_OW 69
9062: ST_TO_ADDR
// if damageVehicles > 0 then
9063: LD_VAR 0 8
9067: PUSH
9068: LD_INT 0
9070: GREATER
9071: IFFALSE 9092
// ComMoveXY ( damageVehicles , repX , repY ) ;
9073: LD_VAR 0 8
9077: PPUSH
9078: LD_VAR 0 3
9082: PPUSH
9083: LD_VAR 0 4
9087: PPUSH
9088: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9092: LD_VAR 0 8
9096: PPUSH
9097: LD_INT 95
9099: PUSH
9100: LD_VAR 0 2
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 3
9111: PUSH
9112: LD_INT 58
9114: PUSH
9115: EMPTY
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 72
9130: PUSH
9131: LD_INT 0
9133: GREATER
9134: IFFALSE 9201
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9136: LD_ADDR_VAR 0 6
9140: PUSH
9141: LD_VAR 0 8
9145: PPUSH
9146: LD_INT 95
9148: PUSH
9149: LD_VAR 0 2
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: LD_INT 58
9163: PUSH
9164: EMPTY
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 72
9179: PUSH
9180: FOR_IN
9181: IFFALSE 9199
// ComExitVehicle ( UnitsInside ( i ) ) ;
9183: LD_VAR 0 6
9187: PPUSH
9188: CALL_OW 313
9192: PPUSH
9193: CALL_OW 121
9197: GO 9180
9199: POP
9200: POP
// end ;
9201: LD_VAR 0 5
9205: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9206: LD_INT 0
9208: PPUSH
9209: PPUSH
9210: PPUSH
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9215: LD_ADDR_VAR 0 8
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 250
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: LD_INT 58
9257: PUSH
9258: EMPTY
9259: LIST
9260: PUSH
9261: LD_INT 2
9263: PUSH
9264: LD_INT 34
9266: PUSH
9267: LD_INT 43
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 34
9276: PUSH
9277: LD_INT 44
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 34
9286: PUSH
9287: LD_INT 46
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 69
9315: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9316: LD_INT 22
9318: PUSH
9319: LD_VAR 0 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 21
9330: PUSH
9331: LD_INT 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 24
9340: PUSH
9341: LD_INT 1000
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 3
9350: PUSH
9351: LD_INT 58
9353: PUSH
9354: EMPTY
9355: LIST
9356: PUSH
9357: LD_INT 2
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 43
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 34
9372: PUSH
9373: LD_INT 44
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 34
9382: PUSH
9383: LD_INT 46
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: PUSH
9412: LD_INT 5
9414: PUSH
9415: LD_INT 6
9417: PUSH
9418: LD_INT 7
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_OWVAR 67
9430: ARRAY
9431: GREATEREQUAL
9432: IFFALSE 9997
// repeat wait ( 0 0$1 ) ;
9434: LD_INT 35
9436: PPUSH
9437: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9441: LD_ADDR_VAR 0 8
9445: PUSH
9446: LD_INT 22
9448: PUSH
9449: LD_VAR 0 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 24
9470: PUSH
9471: LD_INT 250
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 2
9480: PUSH
9481: LD_INT 34
9483: PUSH
9484: LD_INT 43
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 34
9493: PUSH
9494: LD_INT 44
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 34
9503: PUSH
9504: LD_INT 46
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 3
9519: PUSH
9520: LD_INT 58
9522: PUSH
9523: EMPTY
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9542: LD_INT 22
9544: PUSH
9545: LD_VAR 0 1
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 95
9556: PUSH
9557: LD_VAR 0 2
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 69
9574: NOT
9575: PUSH
9576: LD_VAR 0 11
9580: PUSH
9581: LD_INT 0
9583: EQUAL
9584: AND
9585: IFFALSE 9640
// for i := 1 to wayX do
9587: LD_ADDR_VAR 0 6
9591: PUSH
9592: DOUBLE
9593: LD_INT 1
9595: DEC
9596: ST_TO_ADDR
9597: LD_VAR 0 3
9601: PUSH
9602: FOR_TO
9603: IFFALSE 9638
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9605: LD_VAR 0 8
9609: PPUSH
9610: LD_VAR 0 3
9614: PUSH
9615: LD_VAR 0 6
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 4
9625: PUSH
9626: LD_VAR 0 6
9630: ARRAY
9631: PPUSH
9632: CALL_OW 114
9636: GO 9602
9638: POP
9639: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9640: LD_INT 22
9642: PUSH
9643: LD_VAR 0 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 95
9654: PUSH
9655: LD_VAR 0 2
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 69
9672: IFFALSE 9896
// begin seeEnemy = 1 ;
9674: LD_ADDR_VAR 0 11
9678: PUSH
9679: LD_INT 1
9681: ST_TO_ADDR
// for j in vehiclesOK do
9682: LD_ADDR_VAR 0 7
9686: PUSH
9687: LD_VAR 0 8
9691: PUSH
9692: FOR_IN
9693: IFFALSE 9894
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9695: LD_ADDR_VAR 0 9
9699: PUSH
9700: LD_INT 81
9702: PUSH
9703: LD_VAR 0 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 101
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 69
9730: PPUSH
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 74
9740: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9741: LD_ADDR_VAR 0 10
9745: PUSH
9746: LD_INT 81
9748: PUSH
9749: LD_VAR 0 1
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 101
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: LD_INT 59
9773: PUSH
9774: EMPTY
9775: LIST
9776: PUSH
9777: LD_INT 21
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 21
9789: PUSH
9790: LD_INT 2
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: PPUSH
9811: CALL_OW 69
9815: PPUSH
9816: LD_VAR 0 7
9820: PPUSH
9821: CALL_OW 74
9825: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9826: LD_VAR 0 7
9830: PPUSH
9831: LD_VAR 0 9
9835: PPUSH
9836: CALL_OW 296
9840: PUSH
9841: LD_INT 8
9843: PLUS
9844: PUSH
9845: LD_VAR 0 7
9849: PPUSH
9850: LD_VAR 0 10
9854: PPUSH
9855: CALL_OW 296
9859: LESS
9860: IFFALSE 9878
// ComAttackUnit ( j , target1 ) else
9862: LD_VAR 0 7
9866: PPUSH
9867: LD_VAR 0 9
9871: PPUSH
9872: CALL_OW 115
9876: GO 9892
// ComAttackUnit ( j , target2 ) ;
9878: LD_VAR 0 7
9882: PPUSH
9883: LD_VAR 0 10
9887: PPUSH
9888: CALL_OW 115
// end ;
9892: GO 9692
9894: POP
9895: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9896: LD_INT 22
9898: PUSH
9899: LD_VAR 0 1
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 21
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: LD_INT 250
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 2
9930: PUSH
9931: LD_INT 34
9933: PUSH
9934: LD_INT 43
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 34
9943: PUSH
9944: LD_INT 44
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 34
9953: PUSH
9954: LD_INT 46
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 3
9969: PUSH
9970: LD_INT 58
9972: PUSH
9973: EMPTY
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: PUSH
9992: LD_INT 0
9994: EQUAL
9995: IFFALSE 9434
// seeEnemy = 0 ;
9997: LD_ADDR_VAR 0 11
10001: PUSH
10002: LD_INT 0
10004: ST_TO_ADDR
// end ;
10005: LD_VAR 0 5
10009: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10010: LD_INT 0
10012: PPUSH
10013: PPUSH
10014: PPUSH
10015: PPUSH
10016: PPUSH
10017: PPUSH
// repeat wait ( 0 0$1 ) ;
10018: LD_INT 35
10020: PPUSH
10021: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_VAR 0 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 21
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 24
10054: PUSH
10055: LD_INT 651
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: ST_TO_ADDR
// for j in vehiclesOK do
10072: LD_ADDR_VAR 0 4
10076: PUSH
10077: LD_VAR 0 7
10081: PUSH
10082: FOR_IN
10083: IFFALSE 10284
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10085: LD_ADDR_VAR 0 5
10089: PUSH
10090: LD_INT 81
10092: PUSH
10093: LD_VAR 0 1
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 101
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PPUSH
10121: LD_VAR 0 4
10125: PPUSH
10126: CALL_OW 74
10130: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10131: LD_ADDR_VAR 0 6
10135: PUSH
10136: LD_INT 81
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 101
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 2
10160: PUSH
10161: LD_INT 59
10163: PUSH
10164: EMPTY
10165: LIST
10166: PUSH
10167: LD_INT 21
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 74
10215: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10216: LD_VAR 0 4
10220: PPUSH
10221: LD_VAR 0 5
10225: PPUSH
10226: CALL_OW 296
10230: PUSH
10231: LD_INT 8
10233: PLUS
10234: PUSH
10235: LD_VAR 0 4
10239: PPUSH
10240: LD_VAR 0 6
10244: PPUSH
10245: CALL_OW 296
10249: LESS
10250: IFFALSE 10268
// ComAttackUnit ( j , target1 ) else
10252: LD_VAR 0 4
10256: PPUSH
10257: LD_VAR 0 5
10261: PPUSH
10262: CALL_OW 115
10266: GO 10282
// ComAttackUnit ( j , target2 ) ;
10268: LD_VAR 0 4
10272: PPUSH
10273: LD_VAR 0 6
10277: PPUSH
10278: CALL_OW 115
// end ;
10282: GO 10082
10284: POP
10285: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10286: LD_INT 22
10288: PUSH
10289: LD_VAR 0 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 24
10310: PUSH
10311: LD_INT 250
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: PUSH
10328: LD_INT 0
10330: EQUAL
10331: IFFALSE 10018
// end ;
10333: LD_VAR 0 2
10337: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
10342: PPUSH
10343: PPUSH
10344: PPUSH
10345: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10346: LD_ADDR_VAR 0 8
10350: PUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: CALL_OW 313
10360: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10361: LD_ADDR_VAR 0 9
10365: PUSH
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 22
10373: PUSH
10374: LD_VAR 0 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 24
10395: PUSH
10396: LD_INT 750
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 3
10405: PUSH
10406: LD_INT 54
10408: PUSH
10409: EMPTY
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: PPUSH
10422: CALL_OW 70
10426: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10427: LD_ADDR_VAR 0 6
10431: PUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 22
10439: PUSH
10440: LD_VAR 0 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 21
10451: PUSH
10452: LD_INT 3
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: LD_INT 24
10464: PUSH
10465: LD_INT 1000
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: PUSH
10481: EMPTY
10482: LIST
10483: PPUSH
10484: CALL_OW 70
10488: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10489: LD_VAR 0 6
10493: NOT
10494: PUSH
10495: LD_INT 22
10497: PUSH
10498: LD_VAR 0 1
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 24
10519: PUSH
10520: LD_INT 250
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 69
10536: NOT
10537: AND
10538: IFFALSE 10542
// exit ;
10540: GO 10724
// if buildings_list > 0 and engineerOkInside then
10542: LD_VAR 0 6
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: PUSH
10551: LD_VAR 0 8
10555: AND
10556: IFFALSE 10567
// ComExitBuilding ( engineerOkInside ) ;
10558: LD_VAR 0 8
10562: PPUSH
10563: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10567: LD_VAR 0 6
10571: PUSH
10572: LD_INT 0
10574: GREATER
10575: PUSH
10576: LD_VAR 0 9
10580: PUSH
10581: LD_INT 0
10583: GREATER
10584: AND
10585: IFFALSE 10605
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10587: LD_VAR 0 9
10591: PPUSH
10592: LD_VAR 0 6
10596: PUSH
10597: LD_INT 1
10599: ARRAY
10600: PPUSH
10601: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10605: LD_VAR 0 6
10609: PUSH
10610: LD_INT 0
10612: EQUAL
10613: PUSH
10614: LD_VAR 0 4
10618: PUSH
10619: LD_INT 0
10621: EQUAL
10622: AND
10623: PUSH
10624: LD_VAR 0 9
10628: PUSH
10629: LD_INT 0
10631: GREATER
10632: AND
10633: IFFALSE 10649
// ComEnterUnit ( engineerOkOutside , building ) ;
10635: LD_VAR 0 9
10639: PPUSH
10640: LD_VAR 0 2
10644: PPUSH
10645: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10649: LD_VAR 0 9
10653: PUSH
10654: LD_INT 0
10656: GREATER
10657: PUSH
10658: LD_VAR 0 6
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: AND
10667: PUSH
10668: LD_VAR 0 4
10672: PUSH
10673: LD_INT 0
10675: GREATER
10676: AND
10677: IFFALSE 10724
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10679: LD_VAR 0 9
10683: PPUSH
10684: LD_VAR 0 4
10688: PUSH
10689: LD_INT 1
10691: ARRAY
10692: PPUSH
10693: LD_VAR 0 4
10697: PUSH
10698: LD_INT 2
10700: ARRAY
10701: PPUSH
10702: LD_VAR 0 4
10706: PUSH
10707: LD_INT 3
10709: ARRAY
10710: PPUSH
10711: LD_VAR 0 4
10715: PUSH
10716: LD_INT 4
10718: ARRAY
10719: PPUSH
10720: CALL_OW 145
// end ;
10724: LD_VAR 0 5
10728: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10729: LD_INT 0
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
10735: PPUSH
10736: PPUSH
10737: PPUSH
10738: PPUSH
10739: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10740: LD_ADDR_VAR 0 6
10744: PUSH
10745: LD_INT 22
10747: PUSH
10748: LD_VAR 0 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 4
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 23
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 251
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10798: LD_ADDR_VAR 0 7
10802: PUSH
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_INT 22
10810: PUSH
10811: LD_VAR 0 1
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 23
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 25
10832: PUSH
10833: LD_INT 4
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 50
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 70
10856: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10857: LD_ADDR_VAR 0 10
10861: PUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: LD_INT 22
10869: PUSH
10870: LD_VAR 0 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 3
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 3
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: LD_INT 24
10911: PUSH
10912: LD_INT 750
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 70
10933: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10934: LD_ADDR_VAR 0 11
10938: PUSH
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_INT 22
10946: PUSH
10947: LD_VAR 0 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 21
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: LD_INT 25
10971: PUSH
10972: LD_INT 3
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 3
10985: PUSH
10986: LD_INT 24
10988: PUSH
10989: LD_INT 1000
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL_OW 70
11010: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11011: LD_VAR 0 10
11015: NOT
11016: PUSH
11017: LD_VAR 0 11
11021: NOT
11022: AND
11023: PUSH
11024: LD_VAR 0 6
11028: NOT
11029: AND
11030: IFFALSE 11034
// exit ;
11032: GO 11268
// if damageUnits > 0 and sci_list > 0 then
11034: LD_VAR 0 10
11038: PUSH
11039: LD_INT 0
11041: GREATER
11042: PUSH
11043: LD_VAR 0 6
11047: PUSH
11048: LD_INT 0
11050: GREATER
11051: AND
11052: IFFALSE 11068
// ComMoveToArea ( damageUnits , healArea ) ;
11054: LD_VAR 0 10
11058: PPUSH
11059: LD_VAR 0 2
11063: PPUSH
11064: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11068: LD_VAR 0 11
11072: PUSH
11073: LD_INT 0
11075: GREATER
11076: PUSH
11077: LD_VAR 0 6
11081: PUSH
11082: LD_INT 0
11084: GREATER
11085: AND
11086: IFFALSE 11097
// ComExitBuilding ( sci_list ) ;
11088: LD_VAR 0 6
11092: PPUSH
11093: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11097: LD_VAR 0 11
11101: PUSH
11102: LD_INT 0
11104: GREATER
11105: PUSH
11106: LD_VAR 0 7
11110: PUSH
11111: LD_INT 0
11113: GREATER
11114: AND
11115: IFFALSE 11135
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11117: LD_VAR 0 7
11121: PPUSH
11122: LD_VAR 0 11
11126: PUSH
11127: LD_INT 1
11129: ARRAY
11130: PPUSH
11131: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11135: LD_VAR 0 10
11139: PUSH
11140: LD_INT 0
11142: EQUAL
11143: PUSH
11144: LD_VAR 0 11
11148: PUSH
11149: LD_INT 0
11151: EQUAL
11152: AND
11153: PUSH
11154: LD_VAR 0 7
11158: PUSH
11159: LD_INT 0
11161: GREATER
11162: AND
11163: IFFALSE 11268
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11165: LD_ADDR_VAR 0 12
11169: PUSH
11170: LD_INT 22
11172: PUSH
11173: LD_VAR 0 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 3
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 30
11194: PUSH
11195: LD_INT 8
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: PPUSH
11207: CALL_OW 69
11211: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11212: LD_ADDR_VAR 0 13
11216: PUSH
11217: LD_INT 1
11219: PPUSH
11220: LD_VAR 0 12
11224: PPUSH
11225: CALL_OW 12
11229: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11230: LD_VAR 0 7
11234: PPUSH
11235: LD_INT 3
11237: PUSH
11238: LD_INT 60
11240: PUSH
11241: EMPTY
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 72
11252: PPUSH
11253: LD_VAR 0 12
11257: PUSH
11258: LD_VAR 0 13
11262: ARRAY
11263: PPUSH
11264: CALL_OW 120
// end ; end ;
11268: LD_VAR 0 5
11272: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11273: LD_INT 0
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
11279: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11280: LD_ADDR_VAR 0 6
11284: PUSH
11285: LD_INT 22
11287: PUSH
11288: LD_VAR 0 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 30
11302: PUSH
11303: LD_INT 31
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 30
11312: PUSH
11313: LD_INT 32
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 30
11322: PUSH
11323: LD_INT 33
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 30
11332: PUSH
11333: LD_INT 4
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 30
11342: PUSH
11343: LD_INT 5
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PPUSH
11362: CALL_OW 69
11366: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11367: LD_ADDR_VAR 0 7
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_VAR 0 2
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 21
11386: PUSH
11387: LD_INT 3
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 58
11396: PUSH
11397: EMPTY
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PPUSH
11405: CALL_OW 69
11409: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11410: LD_VAR 0 6
11414: PUSH
11415: LD_INT 0
11417: GREATER
11418: PUSH
11419: LD_VAR 0 7
11423: PUSH
11424: LD_INT 0
11426: GREATER
11427: AND
11428: IFFALSE 11498
// begin for i in turretsList do
11430: LD_ADDR_VAR 0 4
11434: PUSH
11435: LD_VAR 0 6
11439: PUSH
11440: FOR_IN
11441: IFFALSE 11496
// begin for j in enemyBuildings do
11443: LD_ADDR_VAR 0 5
11447: PUSH
11448: LD_VAR 0 7
11452: PUSH
11453: FOR_IN
11454: IFFALSE 11492
// begin if GetDistUnits ( i , j ) < 20 then
11456: LD_VAR 0 4
11460: PPUSH
11461: LD_VAR 0 5
11465: PPUSH
11466: CALL_OW 296
11470: PUSH
11471: LD_INT 20
11473: LESS
11474: IFFALSE 11490
// begin ComAttackUnit ( i , j ) ;
11476: LD_VAR 0 4
11480: PPUSH
11481: LD_VAR 0 5
11485: PPUSH
11486: CALL_OW 115
// end ; end ;
11490: GO 11453
11492: POP
11493: POP
// end ;
11494: GO 11440
11496: POP
11497: POP
// end ; end ;
11498: LD_VAR 0 3
11502: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11503: LD_INT 0
11505: PPUSH
11506: PPUSH
11507: PPUSH
11508: PPUSH
11509: PPUSH
11510: PPUSH
11511: PPUSH
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
// for i = 1 to medicCount do
11516: LD_ADDR_VAR 0 14
11520: PUSH
11521: DOUBLE
11522: LD_INT 1
11524: DEC
11525: ST_TO_ADDR
11526: LD_VAR 0 7
11530: PUSH
11531: FOR_TO
11532: IFFALSE 11614
// begin uc_side = side ;
11534: LD_ADDR_OWVAR 20
11538: PUSH
11539: LD_VAR 0 1
11543: ST_TO_ADDR
// uc_nation = nation ;
11544: LD_ADDR_OWVAR 21
11548: PUSH
11549: LD_VAR 0 2
11553: ST_TO_ADDR
// hc_name =  ;
11554: LD_ADDR_OWVAR 26
11558: PUSH
11559: LD_STRING 
11561: ST_TO_ADDR
// hc_gallery =  ;
11562: LD_ADDR_OWVAR 33
11566: PUSH
11567: LD_STRING 
11569: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11570: LD_INT 0
11572: PPUSH
11573: LD_INT 4
11575: PPUSH
11576: LD_VAR 0 8
11580: PPUSH
11581: CALL_OW 380
// un = CreateHuman ;
11585: LD_ADDR_VAR 0 16
11589: PUSH
11590: CALL_OW 44
11594: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11595: LD_VAR 0 16
11599: PPUSH
11600: LD_VAR 0 9
11604: PPUSH
11605: LD_INT 0
11607: PPUSH
11608: CALL_OW 49
// end ;
11612: GO 11531
11614: POP
11615: POP
// for i = 1 to soldierCount do
11616: LD_ADDR_VAR 0 14
11620: PUSH
11621: DOUBLE
11622: LD_INT 1
11624: DEC
11625: ST_TO_ADDR
11626: LD_VAR 0 3
11630: PUSH
11631: FOR_TO
11632: IFFALSE 11714
// begin uc_side = side ;
11634: LD_ADDR_OWVAR 20
11638: PUSH
11639: LD_VAR 0 1
11643: ST_TO_ADDR
// uc_nation = nation ;
11644: LD_ADDR_OWVAR 21
11648: PUSH
11649: LD_VAR 0 2
11653: ST_TO_ADDR
// hc_name =  ;
11654: LD_ADDR_OWVAR 26
11658: PUSH
11659: LD_STRING 
11661: ST_TO_ADDR
// hc_gallery =  ;
11662: LD_ADDR_OWVAR 33
11666: PUSH
11667: LD_STRING 
11669: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11670: LD_INT 0
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: LD_VAR 0 8
11680: PPUSH
11681: CALL_OW 380
// un = CreateHuman ;
11685: LD_ADDR_VAR 0 16
11689: PUSH
11690: CALL_OW 44
11694: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11695: LD_VAR 0 16
11699: PPUSH
11700: LD_VAR 0 9
11704: PPUSH
11705: LD_INT 0
11707: PPUSH
11708: CALL_OW 49
// end ;
11712: GO 11631
11714: POP
11715: POP
// for i = 1 to sniperCount do
11716: LD_ADDR_VAR 0 14
11720: PUSH
11721: DOUBLE
11722: LD_INT 1
11724: DEC
11725: ST_TO_ADDR
11726: LD_VAR 0 4
11730: PUSH
11731: FOR_TO
11732: IFFALSE 11814
// begin uc_side = side ;
11734: LD_ADDR_OWVAR 20
11738: PUSH
11739: LD_VAR 0 1
11743: ST_TO_ADDR
// uc_nation = nation ;
11744: LD_ADDR_OWVAR 21
11748: PUSH
11749: LD_VAR 0 2
11753: ST_TO_ADDR
// hc_name =  ;
11754: LD_ADDR_OWVAR 26
11758: PUSH
11759: LD_STRING 
11761: ST_TO_ADDR
// hc_gallery =  ;
11762: LD_ADDR_OWVAR 33
11766: PUSH
11767: LD_STRING 
11769: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11770: LD_INT 0
11772: PPUSH
11773: LD_INT 5
11775: PPUSH
11776: LD_VAR 0 8
11780: PPUSH
11781: CALL_OW 380
// un = CreateHuman ;
11785: LD_ADDR_VAR 0 16
11789: PUSH
11790: CALL_OW 44
11794: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11795: LD_VAR 0 16
11799: PPUSH
11800: LD_VAR 0 9
11804: PPUSH
11805: LD_INT 0
11807: PPUSH
11808: CALL_OW 49
// end ;
11812: GO 11731
11814: POP
11815: POP
// for i = 1 to bazookCount do
11816: LD_ADDR_VAR 0 14
11820: PUSH
11821: DOUBLE
11822: LD_INT 1
11824: DEC
11825: ST_TO_ADDR
11826: LD_VAR 0 5
11830: PUSH
11831: FOR_TO
11832: IFFALSE 11914
// begin uc_side = side ;
11834: LD_ADDR_OWVAR 20
11838: PUSH
11839: LD_VAR 0 1
11843: ST_TO_ADDR
// uc_nation = nation ;
11844: LD_ADDR_OWVAR 21
11848: PUSH
11849: LD_VAR 0 2
11853: ST_TO_ADDR
// hc_name =  ;
11854: LD_ADDR_OWVAR 26
11858: PUSH
11859: LD_STRING 
11861: ST_TO_ADDR
// hc_gallery =  ;
11862: LD_ADDR_OWVAR 33
11866: PUSH
11867: LD_STRING 
11869: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11870: LD_INT 0
11872: PPUSH
11873: LD_INT 9
11875: PPUSH
11876: LD_VAR 0 8
11880: PPUSH
11881: CALL_OW 380
// un = CreateHuman ;
11885: LD_ADDR_VAR 0 16
11889: PUSH
11890: CALL_OW 44
11894: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11895: LD_VAR 0 16
11899: PPUSH
11900: LD_VAR 0 9
11904: PPUSH
11905: LD_INT 0
11907: PPUSH
11908: CALL_OW 49
// end ;
11912: GO 11831
11914: POP
11915: POP
// for i = 1 to mortalCount do
11916: LD_ADDR_VAR 0 14
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_VAR 0 6
11930: PUSH
11931: FOR_TO
11932: IFFALSE 12014
// begin uc_side = side ;
11934: LD_ADDR_OWVAR 20
11938: PUSH
11939: LD_VAR 0 1
11943: ST_TO_ADDR
// uc_nation = nation ;
11944: LD_ADDR_OWVAR 21
11948: PUSH
11949: LD_VAR 0 2
11953: ST_TO_ADDR
// hc_name =  ;
11954: LD_ADDR_OWVAR 26
11958: PUSH
11959: LD_STRING 
11961: ST_TO_ADDR
// hc_gallery =  ;
11962: LD_ADDR_OWVAR 33
11966: PUSH
11967: LD_STRING 
11969: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11970: LD_INT 0
11972: PPUSH
11973: LD_INT 8
11975: PPUSH
11976: LD_VAR 0 8
11980: PPUSH
11981: CALL_OW 380
// un = CreateHuman ;
11985: LD_ADDR_VAR 0 16
11989: PUSH
11990: CALL_OW 44
11994: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11995: LD_VAR 0 16
11999: PPUSH
12000: LD_VAR 0 9
12004: PPUSH
12005: LD_INT 0
12007: PPUSH
12008: CALL_OW 49
// end ;
12012: GO 11931
12014: POP
12015: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12016: LD_ADDR_VAR 0 19
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_VAR 0 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 25
12038: PUSH
12039: LD_INT 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 25
12048: PUSH
12049: LD_INT 5
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 25
12058: PUSH
12059: LD_INT 8
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 25
12068: PUSH
12069: LD_INT 9
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PPUSH
12087: CALL_OW 69
12091: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12092: LD_ADDR_VAR 0 18
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_VAR 0 1
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 25
12111: PUSH
12112: LD_INT 4
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: ST_TO_ADDR
// for i in medic_list do
12128: LD_ADDR_VAR 0 14
12132: PUSH
12133: LD_VAR 0 18
12137: PUSH
12138: FOR_IN
12139: IFFALSE 12157
// ComMoveToArea ( i , healArea ) ;
12141: LD_VAR 0 14
12145: PPUSH
12146: LD_VAR 0 10
12150: PPUSH
12151: CALL_OW 113
12155: GO 12138
12157: POP
12158: POP
// if strategy = 1 then
12159: LD_VAR 0 12
12163: PUSH
12164: LD_INT 1
12166: EQUAL
12167: IFFALSE 12713
// begin repeat wait ( 0 0$3 ) ;
12169: LD_INT 105
12171: PPUSH
12172: CALL_OW 67
// for i in soldiersOK_list do
12176: LD_ADDR_VAR 0 14
12180: PUSH
12181: LD_VAR 0 19
12185: PUSH
12186: FOR_IN
12187: IFFALSE 12251
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12189: LD_VAR 0 14
12193: PPUSH
12194: LD_INT 91
12196: PPUSH
12197: LD_INT 63
12199: PPUSH
12200: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12204: LD_VAR 0 14
12208: PPUSH
12209: LD_INT 101
12211: PPUSH
12212: LD_INT 53
12214: PPUSH
12215: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12219: LD_VAR 0 14
12223: PPUSH
12224: LD_INT 75
12226: PPUSH
12227: LD_INT 23
12229: PPUSH
12230: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12234: LD_VAR 0 14
12238: PPUSH
12239: LD_INT 78
12241: PPUSH
12242: LD_INT 8
12244: PPUSH
12245: CALL_OW 174
// end ;
12249: GO 12186
12251: POP
12252: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12253: LD_INT 12
12255: PPUSH
12256: LD_INT 22
12258: PUSH
12259: LD_VAR 0 1
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PPUSH
12268: CALL_OW 70
12272: PUSH
12273: LD_INT 2
12275: GREATER
12276: IFFALSE 12169
// repeat wait ( 0 0$1 ) ;
12278: LD_INT 35
12280: PPUSH
12281: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12285: LD_ADDR_VAR 0 17
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_VAR 0 1
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: LD_INT 3
12307: PUSH
12308: LD_INT 24
12310: PUSH
12311: LD_INT 550
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 24
12324: PUSH
12325: LD_INT 250
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 69
12345: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12346: LD_ADDR_VAR 0 19
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_VAR 0 1
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 2
12365: PUSH
12366: LD_INT 25
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 5
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 25
12388: PUSH
12389: LD_INT 8
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 25
12398: PUSH
12399: LD_INT 9
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 24
12415: PUSH
12416: LD_INT 1000
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 69
12432: ST_TO_ADDR
// if medicCount > 0 then
12433: LD_VAR 0 7
12437: PUSH
12438: LD_INT 0
12440: GREATER
12441: IFFALSE 12515
// begin if damageUnit_list > 0 then
12443: LD_VAR 0 17
12447: PUSH
12448: LD_INT 0
12450: GREATER
12451: IFFALSE 12515
// begin for i in damageUnit_list do
12453: LD_ADDR_VAR 0 14
12457: PUSH
12458: LD_VAR 0 17
12462: PUSH
12463: FOR_IN
12464: IFFALSE 12513
// begin ComMoveToArea ( i , healArea ) ;
12466: LD_VAR 0 14
12470: PPUSH
12471: LD_VAR 0 10
12475: PPUSH
12476: CALL_OW 113
// for j in medic_list do
12480: LD_ADDR_VAR 0 15
12484: PUSH
12485: LD_VAR 0 18
12489: PUSH
12490: FOR_IN
12491: IFFALSE 12509
// AddComHeal ( j , i ) ;
12493: LD_VAR 0 15
12497: PPUSH
12498: LD_VAR 0 14
12502: PPUSH
12503: CALL_OW 188
12507: GO 12490
12509: POP
12510: POP
// end ;
12511: GO 12463
12513: POP
12514: POP
// end ; end ; for i in soldiersOK_list do
12515: LD_ADDR_VAR 0 14
12519: PUSH
12520: LD_VAR 0 19
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12702
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12528: LD_ADDR_VAR 0 22
12532: PUSH
12533: LD_INT 22
12535: PUSH
12536: LD_VAR 0 11
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 69
12549: PPUSH
12550: LD_VAR 0 14
12554: PPUSH
12555: CALL_OW 74
12559: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12560: LD_ADDR_VAR 0 23
12564: PUSH
12565: LD_INT 22
12567: PUSH
12568: LD_VAR 0 11
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 59
12582: PUSH
12583: EMPTY
12584: LIST
12585: PUSH
12586: LD_INT 21
12588: PUSH
12589: LD_INT 1
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 21
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: PPUSH
12624: LD_VAR 0 14
12628: PPUSH
12629: CALL_OW 74
12633: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12634: LD_VAR 0 14
12638: PPUSH
12639: LD_VAR 0 22
12643: PPUSH
12644: CALL_OW 296
12648: PUSH
12649: LD_INT 6
12651: PLUS
12652: PUSH
12653: LD_VAR 0 14
12657: PPUSH
12658: LD_VAR 0 23
12662: PPUSH
12663: CALL_OW 296
12667: LESS
12668: IFFALSE 12686
// begin ComAttackUnit ( i , target1 ) ;
12670: LD_VAR 0 14
12674: PPUSH
12675: LD_VAR 0 22
12679: PPUSH
12680: CALL_OW 115
// end else
12684: GO 12700
// begin ComAttackUnit ( i , target2 ) ;
12686: LD_VAR 0 14
12690: PPUSH
12691: LD_VAR 0 23
12695: PPUSH
12696: CALL_OW 115
// end ; end ;
12700: GO 12525
12702: POP
12703: POP
// until soldiersOK_list = [ ] ;
12704: LD_VAR 0 19
12708: PUSH
12709: EMPTY
12710: EQUAL
12711: IFFALSE 12278
// end ; if strategy = 2 then
12713: LD_VAR 0 12
12717: PUSH
12718: LD_INT 2
12720: EQUAL
12721: IFFALSE 13237
// begin repeat wait ( 0 0$1 ) ;
12723: LD_INT 35
12725: PPUSH
12726: CALL_OW 67
// for i in soldiersOK_list do
12730: LD_ADDR_VAR 0 14
12734: PUSH
12735: LD_VAR 0 19
12739: PUSH
12740: FOR_IN
12741: IFFALSE 12775
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12743: LD_VAR 0 14
12747: PPUSH
12748: LD_INT 91
12750: PPUSH
12751: LD_INT 63
12753: PPUSH
12754: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12758: LD_VAR 0 14
12762: PPUSH
12763: LD_INT 75
12765: PPUSH
12766: LD_INT 33
12768: PPUSH
12769: CALL_OW 174
// end ;
12773: GO 12740
12775: POP
12776: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12777: LD_INT 13
12779: PPUSH
12780: LD_INT 22
12782: PUSH
12783: LD_VAR 0 1
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 70
12796: PUSH
12797: LD_INT 2
12799: GREATER
12800: IFFALSE 12723
// repeat wait ( 0 0$3 ) ;
12802: LD_INT 105
12804: PPUSH
12805: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12809: LD_ADDR_VAR 0 17
12813: PUSH
12814: LD_INT 22
12816: PUSH
12817: LD_VAR 0 1
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: LD_INT 3
12831: PUSH
12832: LD_INT 24
12834: PUSH
12835: LD_INT 550
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 24
12848: PUSH
12849: LD_INT 250
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12870: LD_ADDR_VAR 0 19
12874: PUSH
12875: LD_INT 22
12877: PUSH
12878: LD_VAR 0 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: LD_INT 25
12892: PUSH
12893: LD_INT 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 5
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 25
12912: PUSH
12913: LD_INT 8
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 9
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 24
12939: PUSH
12940: LD_INT 1000
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: ST_TO_ADDR
// if medicCount > 0 then
12957: LD_VAR 0 7
12961: PUSH
12962: LD_INT 0
12964: GREATER
12965: IFFALSE 13039
// begin if damageUnit_list > 0 then
12967: LD_VAR 0 17
12971: PUSH
12972: LD_INT 0
12974: GREATER
12975: IFFALSE 13039
// begin for i in damageUnit_list do
12977: LD_ADDR_VAR 0 14
12981: PUSH
12982: LD_VAR 0 17
12986: PUSH
12987: FOR_IN
12988: IFFALSE 13037
// begin ComMoveToArea ( i , healArea ) ;
12990: LD_VAR 0 14
12994: PPUSH
12995: LD_VAR 0 10
12999: PPUSH
13000: CALL_OW 113
// for j in medic_list do
13004: LD_ADDR_VAR 0 15
13008: PUSH
13009: LD_VAR 0 18
13013: PUSH
13014: FOR_IN
13015: IFFALSE 13033
// AddComHeal ( j , i ) ;
13017: LD_VAR 0 15
13021: PPUSH
13022: LD_VAR 0 14
13026: PPUSH
13027: CALL_OW 188
13031: GO 13014
13033: POP
13034: POP
// end ;
13035: GO 12987
13037: POP
13038: POP
// end ; end ; for i in soldiersOK_list do
13039: LD_ADDR_VAR 0 14
13043: PUSH
13044: LD_VAR 0 19
13048: PUSH
13049: FOR_IN
13050: IFFALSE 13226
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13052: LD_ADDR_VAR 0 22
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_VAR 0 11
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PPUSH
13069: CALL_OW 69
13073: PPUSH
13074: LD_VAR 0 14
13078: PPUSH
13079: CALL_OW 74
13083: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13084: LD_ADDR_VAR 0 23
13088: PUSH
13089: LD_INT 22
13091: PUSH
13092: LD_VAR 0 11
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 2
13103: PUSH
13104: LD_INT 59
13106: PUSH
13107: EMPTY
13108: LIST
13109: PUSH
13110: LD_INT 21
13112: PUSH
13113: LD_INT 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 21
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: PPUSH
13143: CALL_OW 69
13147: PPUSH
13148: LD_VAR 0 14
13152: PPUSH
13153: CALL_OW 74
13157: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13158: LD_VAR 0 14
13162: PPUSH
13163: LD_VAR 0 22
13167: PPUSH
13168: CALL_OW 296
13172: PUSH
13173: LD_INT 6
13175: PLUS
13176: PUSH
13177: LD_VAR 0 14
13181: PPUSH
13182: LD_VAR 0 23
13186: PPUSH
13187: CALL_OW 296
13191: LESS
13192: IFFALSE 13210
// begin ComAttackUnit ( i , target1 ) ;
13194: LD_VAR 0 14
13198: PPUSH
13199: LD_VAR 0 22
13203: PPUSH
13204: CALL_OW 115
// end else
13208: GO 13224
// begin ComAttackUnit ( i , target2 ) ;
13210: LD_VAR 0 14
13214: PPUSH
13215: LD_VAR 0 23
13219: PPUSH
13220: CALL_OW 115
// end ; end ;
13224: GO 13049
13226: POP
13227: POP
// until soldiersOK_list = [ ] ;
13228: LD_VAR 0 19
13232: PUSH
13233: EMPTY
13234: EQUAL
13235: IFFALSE 12802
// end ; if strategy = 3 then
13237: LD_VAR 0 12
13241: PUSH
13242: LD_INT 3
13244: EQUAL
13245: IFFALSE 13791
// begin repeat wait ( 0 0$3 ) ;
13247: LD_INT 105
13249: PPUSH
13250: CALL_OW 67
// for i in soldiersOK_list do
13254: LD_ADDR_VAR 0 14
13258: PUSH
13259: LD_VAR 0 19
13263: PUSH
13264: FOR_IN
13265: IFFALSE 13329
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13267: LD_VAR 0 14
13271: PPUSH
13272: LD_INT 63
13274: PPUSH
13275: LD_INT 71
13277: PPUSH
13278: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13282: LD_VAR 0 14
13286: PPUSH
13287: LD_INT 35
13289: PPUSH
13290: LD_INT 44
13292: PPUSH
13293: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13297: LD_VAR 0 14
13301: PPUSH
13302: LD_INT 23
13304: PPUSH
13305: LD_INT 18
13307: PPUSH
13308: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13312: LD_VAR 0 14
13316: PPUSH
13317: LD_INT 26
13319: PPUSH
13320: LD_INT 12
13322: PPUSH
13323: CALL_OW 174
// end ;
13327: GO 13264
13329: POP
13330: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13331: LD_INT 14
13333: PPUSH
13334: LD_INT 22
13336: PUSH
13337: LD_VAR 0 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 70
13350: PUSH
13351: LD_INT 2
13353: GREATER
13354: IFFALSE 13247
// repeat wait ( 0 0$1 ) ;
13356: LD_INT 35
13358: PPUSH
13359: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13363: LD_ADDR_VAR 0 17
13367: PUSH
13368: LD_INT 22
13370: PUSH
13371: LD_VAR 0 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 1
13382: PUSH
13383: LD_INT 3
13385: PUSH
13386: LD_INT 24
13388: PUSH
13389: LD_INT 550
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 24
13402: PUSH
13403: LD_INT 250
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13424: LD_ADDR_VAR 0 19
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_VAR 0 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 5
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 8
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 9
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 24
13493: PUSH
13494: LD_INT 1000
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 69
13510: ST_TO_ADDR
// if medicCount > 0 then
13511: LD_VAR 0 7
13515: PUSH
13516: LD_INT 0
13518: GREATER
13519: IFFALSE 13593
// begin if damageUnit_list > 0 then
13521: LD_VAR 0 17
13525: PUSH
13526: LD_INT 0
13528: GREATER
13529: IFFALSE 13593
// begin for i in damageUnit_list do
13531: LD_ADDR_VAR 0 14
13535: PUSH
13536: LD_VAR 0 17
13540: PUSH
13541: FOR_IN
13542: IFFALSE 13591
// begin ComMoveToArea ( i , healArea ) ;
13544: LD_VAR 0 14
13548: PPUSH
13549: LD_VAR 0 10
13553: PPUSH
13554: CALL_OW 113
// for j in medic_list do
13558: LD_ADDR_VAR 0 15
13562: PUSH
13563: LD_VAR 0 18
13567: PUSH
13568: FOR_IN
13569: IFFALSE 13587
// AddComHeal ( j , i ) ;
13571: LD_VAR 0 15
13575: PPUSH
13576: LD_VAR 0 14
13580: PPUSH
13581: CALL_OW 188
13585: GO 13568
13587: POP
13588: POP
// end ;
13589: GO 13541
13591: POP
13592: POP
// end ; end ; for i in soldiersOK_list do
13593: LD_ADDR_VAR 0 14
13597: PUSH
13598: LD_VAR 0 19
13602: PUSH
13603: FOR_IN
13604: IFFALSE 13780
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13606: LD_ADDR_VAR 0 22
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_VAR 0 11
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PPUSH
13623: CALL_OW 69
13627: PPUSH
13628: LD_VAR 0 14
13632: PPUSH
13633: CALL_OW 74
13637: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13638: LD_ADDR_VAR 0 23
13642: PUSH
13643: LD_INT 22
13645: PUSH
13646: LD_VAR 0 11
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 2
13657: PUSH
13658: LD_INT 59
13660: PUSH
13661: EMPTY
13662: LIST
13663: PUSH
13664: LD_INT 21
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 21
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: EMPTY
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: PPUSH
13702: LD_VAR 0 14
13706: PPUSH
13707: CALL_OW 74
13711: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13712: LD_VAR 0 14
13716: PPUSH
13717: LD_VAR 0 22
13721: PPUSH
13722: CALL_OW 296
13726: PUSH
13727: LD_INT 6
13729: PLUS
13730: PUSH
13731: LD_VAR 0 14
13735: PPUSH
13736: LD_VAR 0 23
13740: PPUSH
13741: CALL_OW 296
13745: LESS
13746: IFFALSE 13764
// begin ComAttackUnit ( i , target1 ) ;
13748: LD_VAR 0 14
13752: PPUSH
13753: LD_VAR 0 22
13757: PPUSH
13758: CALL_OW 115
// end else
13762: GO 13778
// begin ComAttackUnit ( i , target2 ) ;
13764: LD_VAR 0 14
13768: PPUSH
13769: LD_VAR 0 23
13773: PPUSH
13774: CALL_OW 115
// end ; end ;
13778: GO 13603
13780: POP
13781: POP
// until soldiersOK_list = [ ] ;
13782: LD_VAR 0 19
13786: PUSH
13787: EMPTY
13788: EQUAL
13789: IFFALSE 13356
// end ; end ;
13791: LD_VAR 0 13
13795: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
13803: PPUSH
13804: PPUSH
13805: PPUSH
13806: PPUSH
13807: PPUSH
13808: PPUSH
// amChassisTab = [ ] ;
13809: LD_ADDR_VAR 0 19
13813: PUSH
13814: EMPTY
13815: ST_TO_ADDR
// arChassisTab = [ ] ;
13816: LD_ADDR_VAR 0 18
13820: PUSH
13821: EMPTY
13822: ST_TO_ADDR
// ruChassisTab = [ ] ;
13823: LD_ADDR_VAR 0 17
13827: PUSH
13828: EMPTY
13829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13830: LD_INT 35
13832: PPUSH
13833: CALL_OW 67
// if nation = 1 then
13837: LD_VAR 0 5
13841: PUSH
13842: LD_INT 1
13844: EQUAL
13845: IFFALSE 14336
// begin uc_side = side ;
13847: LD_ADDR_OWVAR 20
13851: PUSH
13852: LD_VAR 0 2
13856: ST_TO_ADDR
// uc_nation = nation ;
13857: LD_ADDR_OWVAR 21
13861: PUSH
13862: LD_VAR 0 5
13866: ST_TO_ADDR
// vc_engine = vehengine ;
13867: LD_ADDR_OWVAR 39
13871: PUSH
13872: LD_VAR 0 6
13876: ST_TO_ADDR
// vc_control = vehcontrol ;
13877: LD_ADDR_OWVAR 38
13881: PUSH
13882: LD_VAR 0 7
13886: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13887: LD_ADDR_OWVAR 40
13891: PUSH
13892: LD_VAR 0 10
13896: PUSH
13897: LD_INT 1
13899: PPUSH
13900: LD_VAR 0 10
13904: PPUSH
13905: CALL_OW 12
13909: ARRAY
13910: ST_TO_ADDR
// for j = 1 to AMWeapon do
13911: LD_ADDR_VAR 0 14
13915: PUSH
13916: DOUBLE
13917: LD_INT 1
13919: DEC
13920: ST_TO_ADDR
13921: LD_VAR 0 10
13925: PUSH
13926: FOR_TO
13927: IFFALSE 14228
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13929: LD_VAR 0 10
13933: PUSH
13934: LD_VAR 0 14
13938: ARRAY
13939: PUSH
13940: LD_INT 2
13942: EQUAL
13943: PUSH
13944: LD_VAR 0 10
13948: PUSH
13949: LD_VAR 0 14
13953: ARRAY
13954: PUSH
13955: LD_INT 3
13957: EQUAL
13958: OR
13959: IFFALSE 14012
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: LD_INT 1
13968: PUSH
13969: LD_INT 2
13971: PUSH
13972: LD_INT 3
13974: PUSH
13975: LD_INT 4
13977: PUSH
13978: LD_INT 5
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13988: LD_ADDR_OWVAR 37
13992: PUSH
13993: LD_VAR 0 19
13997: PUSH
13998: LD_INT 1
14000: PPUSH
14001: LD_VAR 0 19
14005: PPUSH
14006: CALL_OW 12
14010: ARRAY
14011: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14012: LD_VAR 0 10
14016: PUSH
14017: LD_VAR 0 14
14021: ARRAY
14022: PUSH
14023: LD_INT 4
14025: EQUAL
14026: PUSH
14027: LD_VAR 0 10
14031: PUSH
14032: LD_VAR 0 14
14036: ARRAY
14037: PUSH
14038: LD_INT 5
14040: EQUAL
14041: OR
14042: PUSH
14043: LD_VAR 0 10
14047: PUSH
14048: LD_VAR 0 14
14052: ARRAY
14053: PUSH
14054: LD_INT 9
14056: EQUAL
14057: OR
14058: PUSH
14059: LD_VAR 0 10
14063: PUSH
14064: LD_VAR 0 14
14068: ARRAY
14069: PUSH
14070: LD_INT 11
14072: EQUAL
14073: OR
14074: PUSH
14075: LD_VAR 0 10
14079: PUSH
14080: LD_VAR 0 14
14084: ARRAY
14085: PUSH
14086: LD_INT 7
14088: EQUAL
14089: OR
14090: IFFALSE 14139
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14092: LD_ADDR_VAR 0 19
14096: PUSH
14097: LD_INT 2
14099: PUSH
14100: LD_INT 3
14102: PUSH
14103: LD_INT 4
14105: PUSH
14106: LD_INT 5
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14115: LD_ADDR_OWVAR 37
14119: PUSH
14120: LD_VAR 0 19
14124: PUSH
14125: LD_INT 1
14127: PPUSH
14128: LD_VAR 0 19
14132: PPUSH
14133: CALL_OW 12
14137: ARRAY
14138: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14139: LD_VAR 0 10
14143: PUSH
14144: LD_VAR 0 14
14148: ARRAY
14149: PUSH
14150: LD_INT 8
14152: EQUAL
14153: PUSH
14154: LD_VAR 0 10
14158: PUSH
14159: LD_VAR 0 14
14163: ARRAY
14164: PUSH
14165: LD_INT 6
14167: EQUAL
14168: OR
14169: PUSH
14170: LD_VAR 0 10
14174: PUSH
14175: LD_VAR 0 14
14179: ARRAY
14180: PUSH
14181: LD_INT 10
14183: EQUAL
14184: OR
14185: IFFALSE 14226
// begin amChassisTab = [ 4 , 5 ] ;
14187: LD_ADDR_VAR 0 19
14191: PUSH
14192: LD_INT 4
14194: PUSH
14195: LD_INT 5
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14202: LD_ADDR_OWVAR 37
14206: PUSH
14207: LD_VAR 0 19
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 19
14219: PPUSH
14220: CALL_OW 12
14224: ARRAY
14225: ST_TO_ADDR
// end ; end ;
14226: GO 13926
14228: POP
14229: POP
// veh = CreateVehicle ;
14230: LD_ADDR_VAR 0 16
14234: PUSH
14235: CALL_OW 45
14239: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14240: LD_VAR 0 16
14244: PPUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: LD_INT 0
14252: PPUSH
14253: CALL_OW 49
// if vehControl = 1 then
14257: LD_VAR 0 7
14261: PUSH
14262: LD_INT 1
14264: EQUAL
14265: IFFALSE 14322
// begin hc_gallery =  ;
14267: LD_ADDR_OWVAR 33
14271: PUSH
14272: LD_STRING 
14274: ST_TO_ADDR
// hc_name =  ;
14275: LD_ADDR_OWVAR 26
14279: PUSH
14280: LD_STRING 
14282: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14283: LD_INT 0
14285: PPUSH
14286: LD_INT 3
14288: PPUSH
14289: LD_VAR 0 4
14293: PPUSH
14294: CALL_OW 380
// un = CreateHuman ;
14298: LD_ADDR_VAR 0 15
14302: PUSH
14303: CALL_OW 44
14307: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14308: LD_VAR 0 15
14312: PPUSH
14313: LD_VAR 0 16
14317: PPUSH
14318: CALL_OW 52
// end ; i = i + 1 ;
14322: LD_ADDR_VAR 0 13
14326: PUSH
14327: LD_VAR 0 13
14331: PUSH
14332: LD_INT 1
14334: PLUS
14335: ST_TO_ADDR
// end ; if nation = 2 then
14336: LD_VAR 0 5
14340: PUSH
14341: LD_INT 2
14343: EQUAL
14344: IFFALSE 14768
// begin uc_side = side ;
14346: LD_ADDR_OWVAR 20
14350: PUSH
14351: LD_VAR 0 2
14355: ST_TO_ADDR
// uc_nation = nation ;
14356: LD_ADDR_OWVAR 21
14360: PUSH
14361: LD_VAR 0 5
14365: ST_TO_ADDR
// vc_engine = vehengine ;
14366: LD_ADDR_OWVAR 39
14370: PUSH
14371: LD_VAR 0 6
14375: ST_TO_ADDR
// vc_control = vehcontrol ;
14376: LD_ADDR_OWVAR 38
14380: PUSH
14381: LD_VAR 0 7
14385: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14386: LD_ADDR_OWVAR 40
14390: PUSH
14391: LD_VAR 0 9
14395: PUSH
14396: LD_INT 1
14398: PPUSH
14399: LD_VAR 0 9
14403: PPUSH
14404: CALL_OW 12
14408: ARRAY
14409: ST_TO_ADDR
// for j = 1 to ARWeapons do
14410: LD_ADDR_VAR 0 14
14414: PUSH
14415: DOUBLE
14416: LD_INT 1
14418: DEC
14419: ST_TO_ADDR
14420: LD_VAR 0 9
14424: PUSH
14425: FOR_TO
14426: IFFALSE 14660
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14428: LD_VAR 0 9
14432: PUSH
14433: LD_VAR 0 14
14437: ARRAY
14438: PUSH
14439: LD_INT 24
14441: EQUAL
14442: PUSH
14443: LD_VAR 0 9
14447: PUSH
14448: LD_VAR 0 14
14452: ARRAY
14453: PUSH
14454: LD_INT 22
14456: EQUAL
14457: OR
14458: PUSH
14459: LD_VAR 0 9
14463: PUSH
14464: LD_VAR 0 14
14468: ARRAY
14469: PUSH
14470: LD_INT 23
14472: EQUAL
14473: OR
14474: PUSH
14475: LD_VAR 0 9
14479: PUSH
14480: LD_VAR 0 14
14484: ARRAY
14485: PUSH
14486: LD_INT 30
14488: EQUAL
14489: OR
14490: IFFALSE 14539
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14492: LD_ADDR_VAR 0 18
14496: PUSH
14497: LD_INT 11
14499: PUSH
14500: LD_INT 12
14502: PUSH
14503: LD_INT 13
14505: PUSH
14506: LD_INT 14
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14515: LD_ADDR_OWVAR 37
14519: PUSH
14520: LD_VAR 0 18
14524: PUSH
14525: LD_INT 1
14527: PPUSH
14528: LD_VAR 0 18
14532: PPUSH
14533: CALL_OW 12
14537: ARRAY
14538: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14539: LD_VAR 0 9
14543: PUSH
14544: LD_VAR 0 14
14548: ARRAY
14549: PUSH
14550: LD_INT 29
14552: EQUAL
14553: PUSH
14554: LD_VAR 0 9
14558: PUSH
14559: LD_VAR 0 14
14563: ARRAY
14564: PUSH
14565: LD_INT 28
14567: EQUAL
14568: OR
14569: PUSH
14570: LD_VAR 0 9
14574: PUSH
14575: LD_VAR 0 14
14579: ARRAY
14580: PUSH
14581: LD_INT 27
14583: EQUAL
14584: OR
14585: PUSH
14586: LD_VAR 0 9
14590: PUSH
14591: LD_VAR 0 14
14595: ARRAY
14596: PUSH
14597: LD_INT 26
14599: EQUAL
14600: OR
14601: PUSH
14602: LD_VAR 0 9
14606: PUSH
14607: LD_VAR 0 14
14611: ARRAY
14612: PUSH
14613: LD_INT 25
14615: EQUAL
14616: OR
14617: IFFALSE 14658
// begin arChassisTab = [ 13 , 14 ] ;
14619: LD_ADDR_VAR 0 18
14623: PUSH
14624: LD_INT 13
14626: PUSH
14627: LD_INT 14
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14634: LD_ADDR_OWVAR 37
14638: PUSH
14639: LD_VAR 0 18
14643: PUSH
14644: LD_INT 1
14646: PPUSH
14647: LD_VAR 0 18
14651: PPUSH
14652: CALL_OW 12
14656: ARRAY
14657: ST_TO_ADDR
// end ; end ;
14658: GO 14425
14660: POP
14661: POP
// veh = CreateVehicle ;
14662: LD_ADDR_VAR 0 16
14666: PUSH
14667: CALL_OW 45
14671: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14672: LD_VAR 0 16
14676: PPUSH
14677: LD_VAR 0 1
14681: PPUSH
14682: LD_INT 0
14684: PPUSH
14685: CALL_OW 49
// if vehcontrol = 1 then
14689: LD_VAR 0 7
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: IFFALSE 14754
// begin hc_gallery =  ;
14699: LD_ADDR_OWVAR 33
14703: PUSH
14704: LD_STRING 
14706: ST_TO_ADDR
// hc_name =  ;
14707: LD_ADDR_OWVAR 26
14711: PUSH
14712: LD_STRING 
14714: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14715: LD_INT 0
14717: PPUSH
14718: LD_INT 3
14720: PPUSH
14721: LD_VAR 0 4
14725: PPUSH
14726: CALL_OW 380
// un = CreateHuman ;
14730: LD_ADDR_VAR 0 15
14734: PUSH
14735: CALL_OW 44
14739: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14740: LD_VAR 0 15
14744: PPUSH
14745: LD_VAR 0 16
14749: PPUSH
14750: CALL_OW 52
// end ; i = i + 1 ;
14754: LD_ADDR_VAR 0 13
14758: PUSH
14759: LD_VAR 0 13
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// end ; if nation = 3 then
14768: LD_VAR 0 5
14772: PUSH
14773: LD_INT 3
14775: EQUAL
14776: IFFALSE 15168
// begin uc_side = side ;
14778: LD_ADDR_OWVAR 20
14782: PUSH
14783: LD_VAR 0 2
14787: ST_TO_ADDR
// uc_nation = nation ;
14788: LD_ADDR_OWVAR 21
14792: PUSH
14793: LD_VAR 0 5
14797: ST_TO_ADDR
// vc_engine = vehengine ;
14798: LD_ADDR_OWVAR 39
14802: PUSH
14803: LD_VAR 0 6
14807: ST_TO_ADDR
// vc_control = vehcontrol ;
14808: LD_ADDR_OWVAR 38
14812: PUSH
14813: LD_VAR 0 7
14817: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14818: LD_ADDR_OWVAR 40
14822: PUSH
14823: LD_VAR 0 8
14827: PUSH
14828: LD_INT 1
14830: PPUSH
14831: LD_VAR 0 8
14835: PPUSH
14836: CALL_OW 12
14840: ARRAY
14841: ST_TO_ADDR
// for j = 1 to RuWeapons do
14842: LD_ADDR_VAR 0 14
14846: PUSH
14847: DOUBLE
14848: LD_INT 1
14850: DEC
14851: ST_TO_ADDR
14852: LD_VAR 0 8
14856: PUSH
14857: FOR_TO
14858: IFFALSE 15060
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14860: LD_VAR 0 8
14864: PUSH
14865: LD_VAR 0 14
14869: ARRAY
14870: PUSH
14871: LD_INT 42
14873: EQUAL
14874: PUSH
14875: LD_VAR 0 8
14879: PUSH
14880: LD_VAR 0 14
14884: ARRAY
14885: PUSH
14886: LD_INT 43
14888: EQUAL
14889: OR
14890: PUSH
14891: LD_VAR 0 8
14895: PUSH
14896: LD_VAR 0 14
14900: ARRAY
14901: PUSH
14902: LD_INT 44
14904: EQUAL
14905: OR
14906: PUSH
14907: LD_VAR 0 8
14911: PUSH
14912: LD_VAR 0 14
14916: ARRAY
14917: PUSH
14918: LD_INT 45
14920: EQUAL
14921: OR
14922: PUSH
14923: LD_VAR 0 8
14927: PUSH
14928: LD_VAR 0 14
14932: ARRAY
14933: PUSH
14934: LD_INT 49
14936: EQUAL
14937: OR
14938: IFFALSE 14987
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14940: LD_ADDR_VAR 0 17
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_INT 23
14953: PUSH
14954: LD_INT 24
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14963: LD_ADDR_OWVAR 37
14967: PUSH
14968: LD_VAR 0 17
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 17
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14987: LD_VAR 0 8
14991: PUSH
14992: LD_VAR 0 14
14996: ARRAY
14997: PUSH
14998: LD_INT 46
15000: EQUAL
15001: PUSH
15002: LD_VAR 0 8
15006: PUSH
15007: LD_VAR 0 14
15011: ARRAY
15012: PUSH
15013: LD_INT 47
15015: EQUAL
15016: OR
15017: IFFALSE 15058
// begin ruChassisTab = [ 23 , 24 ] ;
15019: LD_ADDR_VAR 0 17
15023: PUSH
15024: LD_INT 23
15026: PUSH
15027: LD_INT 24
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15034: LD_ADDR_OWVAR 37
15038: PUSH
15039: LD_VAR 0 17
15043: PUSH
15044: LD_INT 1
15046: PPUSH
15047: LD_VAR 0 17
15051: PPUSH
15052: CALL_OW 12
15056: ARRAY
15057: ST_TO_ADDR
// end ; end ;
15058: GO 14857
15060: POP
15061: POP
// veh = CreateVehicle ;
15062: LD_ADDR_VAR 0 16
15066: PUSH
15067: CALL_OW 45
15071: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15072: LD_VAR 0 16
15076: PPUSH
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 0
15084: PPUSH
15085: CALL_OW 49
// if vehcontrol = 1 then
15089: LD_VAR 0 7
15093: PUSH
15094: LD_INT 1
15096: EQUAL
15097: IFFALSE 15154
// begin hc_gallery =  ;
15099: LD_ADDR_OWVAR 33
15103: PUSH
15104: LD_STRING 
15106: ST_TO_ADDR
// hc_name =  ;
15107: LD_ADDR_OWVAR 26
15111: PUSH
15112: LD_STRING 
15114: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15115: LD_INT 0
15117: PPUSH
15118: LD_INT 3
15120: PPUSH
15121: LD_VAR 0 4
15125: PPUSH
15126: CALL_OW 380
// un = CreateHuman ;
15130: LD_ADDR_VAR 0 15
15134: PUSH
15135: CALL_OW 44
15139: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15140: LD_VAR 0 15
15144: PPUSH
15145: LD_VAR 0 16
15149: PPUSH
15150: CALL_OW 52
// end ; i = i + 1 ;
15154: LD_ADDR_VAR 0 13
15158: PUSH
15159: LD_VAR 0 13
15163: PUSH
15164: LD_INT 1
15166: PLUS
15167: ST_TO_ADDR
// end ; until i = vehCount ;
15168: LD_VAR 0 13
15172: PUSH
15173: LD_VAR 0 3
15177: EQUAL
15178: IFFALSE 13830
// repeat wait ( 0 0$1 ) ;
15180: LD_INT 35
15182: PPUSH
15183: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15187: LD_ADDR_VAR 0 20
15191: PUSH
15192: LD_INT 22
15194: PUSH
15195: LD_VAR 0 2
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 21
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 24
15216: PUSH
15217: LD_INT 250
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 69
15233: ST_TO_ADDR
// if vehicleOK_list > 0 then
15234: LD_VAR 0 20
15238: PUSH
15239: LD_INT 0
15241: GREATER
15242: IFFALSE 15433
// begin for i in vehicleOK_list do
15244: LD_ADDR_VAR 0 13
15248: PUSH
15249: LD_VAR 0 20
15253: PUSH
15254: FOR_IN
15255: IFFALSE 15431
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15257: LD_ADDR_VAR 0 21
15261: PUSH
15262: LD_INT 22
15264: PUSH
15265: LD_VAR 0 11
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PPUSH
15274: CALL_OW 69
15278: PPUSH
15279: LD_VAR 0 13
15283: PPUSH
15284: CALL_OW 74
15288: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15289: LD_ADDR_VAR 0 22
15293: PUSH
15294: LD_INT 22
15296: PUSH
15297: LD_VAR 0 11
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 59
15311: PUSH
15312: EMPTY
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 21
15327: PUSH
15328: LD_INT 2
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: EMPTY
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: PPUSH
15353: LD_VAR 0 13
15357: PPUSH
15358: CALL_OW 74
15362: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15363: LD_VAR 0 13
15367: PPUSH
15368: LD_VAR 0 21
15372: PPUSH
15373: CALL_OW 296
15377: PUSH
15378: LD_INT 6
15380: PLUS
15381: PUSH
15382: LD_VAR 0 13
15386: PPUSH
15387: LD_VAR 0 22
15391: PPUSH
15392: CALL_OW 296
15396: LESS
15397: IFFALSE 15415
// begin ComAttackUnit ( i , target1 ) ;
15399: LD_VAR 0 13
15403: PPUSH
15404: LD_VAR 0 21
15408: PPUSH
15409: CALL_OW 115
// end else
15413: GO 15429
// begin ComAttackUnit ( i , target2 ) ;
15415: LD_VAR 0 13
15419: PPUSH
15420: LD_VAR 0 22
15424: PPUSH
15425: CALL_OW 115
// end ; end ;
15429: GO 15254
15431: POP
15432: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15433: LD_INT 22
15435: PUSH
15436: LD_VAR 0 2
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 21
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 24
15457: PUSH
15458: LD_INT 250
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: PPUSH
15470: CALL_OW 69
15474: PUSH
15475: LD_INT 0
15477: EQUAL
15478: IFFALSE 15180
// end ;
15480: LD_VAR 0 12
15484: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15485: LD_INT 0
15487: PPUSH
15488: PPUSH
15489: PPUSH
15490: PPUSH
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15495: LD_ADDR_VAR 0 7
15499: PUSH
15500: LD_INT 22
15502: PUSH
15503: LD_VAR 0 1
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 1
15514: PUSH
15515: LD_INT 3
15517: PUSH
15518: LD_INT 24
15520: PUSH
15521: LD_INT 550
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 24
15534: PUSH
15535: LD_INT 250
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15556: LD_ADDR_VAR 0 8
15560: PUSH
15561: LD_INT 22
15563: PUSH
15564: LD_VAR 0 1
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 2
15575: PUSH
15576: LD_INT 25
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 25
15588: PUSH
15589: LD_INT 5
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 25
15598: PUSH
15599: LD_INT 8
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 25
15608: PUSH
15609: LD_INT 9
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 24
15625: PUSH
15626: LD_INT 1000
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: LIST
15637: PPUSH
15638: CALL_OW 69
15642: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15643: LD_ADDR_VAR 0 9
15647: PUSH
15648: LD_INT 22
15650: PUSH
15651: LD_VAR 0 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 25
15662: PUSH
15663: LD_INT 4
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 69
15678: ST_TO_ADDR
// if medicCount > 0 then
15679: LD_VAR 0 9
15683: PUSH
15684: LD_INT 0
15686: GREATER
15687: IFFALSE 15761
// begin if damageUnit_list > 0 then
15689: LD_VAR 0 7
15693: PUSH
15694: LD_INT 0
15696: GREATER
15697: IFFALSE 15761
// begin for i in damageUnit_list do
15699: LD_ADDR_VAR 0 5
15703: PUSH
15704: LD_VAR 0 7
15708: PUSH
15709: FOR_IN
15710: IFFALSE 15759
// begin ComMoveToArea ( i , healArea ) ;
15712: LD_VAR 0 5
15716: PPUSH
15717: LD_VAR 0 2
15721: PPUSH
15722: CALL_OW 113
// for j in medicCount do
15726: LD_ADDR_VAR 0 6
15730: PUSH
15731: LD_VAR 0 9
15735: PUSH
15736: FOR_IN
15737: IFFALSE 15755
// AddComHeal ( j , i ) ;
15739: LD_VAR 0 6
15743: PPUSH
15744: LD_VAR 0 5
15748: PPUSH
15749: CALL_OW 188
15753: GO 15736
15755: POP
15756: POP
// end ;
15757: GO 15709
15759: POP
15760: POP
// end ; end ; if soldiersOK_list > 0 then
15761: LD_VAR 0 8
15765: PUSH
15766: LD_INT 0
15768: GREATER
15769: IFFALSE 15960
// begin for i in soldiersOK_list do
15771: LD_ADDR_VAR 0 5
15775: PUSH
15776: LD_VAR 0 8
15780: PUSH
15781: FOR_IN
15782: IFFALSE 15958
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15784: LD_ADDR_VAR 0 10
15788: PUSH
15789: LD_INT 22
15791: PUSH
15792: LD_VAR 0 3
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PPUSH
15801: CALL_OW 69
15805: PPUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: CALL_OW 74
15815: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15816: LD_ADDR_VAR 0 11
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_VAR 0 3
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 2
15835: PUSH
15836: LD_INT 59
15838: PUSH
15839: EMPTY
15840: LIST
15841: PUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 21
15854: PUSH
15855: LD_INT 2
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: PPUSH
15875: CALL_OW 69
15879: PPUSH
15880: LD_VAR 0 5
15884: PPUSH
15885: CALL_OW 74
15889: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15890: LD_VAR 0 5
15894: PPUSH
15895: LD_VAR 0 10
15899: PPUSH
15900: CALL_OW 296
15904: PUSH
15905: LD_INT 8
15907: PLUS
15908: PUSH
15909: LD_VAR 0 5
15913: PPUSH
15914: LD_VAR 0 11
15918: PPUSH
15919: CALL_OW 296
15923: LESS
15924: IFFALSE 15942
// begin ComAttackUnit ( i , target1 ) ;
15926: LD_VAR 0 5
15930: PPUSH
15931: LD_VAR 0 10
15935: PPUSH
15936: CALL_OW 115
// end else
15940: GO 15956
// begin ComAttackUnit ( i , target2 ) ;
15942: LD_VAR 0 5
15946: PPUSH
15947: LD_VAR 0 11
15951: PPUSH
15952: CALL_OW 115
// end ; end ;
15956: GO 15781
15958: POP
15959: POP
// end ; end ;
15960: LD_VAR 0 4
15964: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15965: LD_INT 0
15967: PPUSH
15968: PPUSH
// list := [ ] ;
15969: LD_ADDR_VAR 0 5
15973: PUSH
15974: EMPTY
15975: ST_TO_ADDR
// case d of 0 :
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 0
15983: DOUBLE
15984: EQUAL
15985: IFTRUE 15989
15987: GO 16122
15989: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15990: LD_ADDR_VAR 0 5
15994: PUSH
15995: LD_VAR 0 1
15999: PUSH
16000: LD_INT 4
16002: MINUS
16003: PUSH
16004: LD_VAR 0 2
16008: PUSH
16009: LD_INT 4
16011: MINUS
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: PUSH
16021: LD_VAR 0 1
16025: PUSH
16026: LD_INT 3
16028: MINUS
16029: PUSH
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: PUSH
16043: LD_VAR 0 1
16047: PUSH
16048: LD_INT 4
16050: PLUS
16051: PUSH
16052: LD_VAR 0 2
16056: PUSH
16057: LD_INT 4
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: PUSH
16065: LD_VAR 0 1
16069: PUSH
16070: LD_INT 3
16072: PLUS
16073: PUSH
16074: LD_VAR 0 2
16078: PUSH
16079: LD_INT 3
16081: PLUS
16082: PUSH
16083: LD_INT 5
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: PUSH
16091: LD_VAR 0 1
16095: PUSH
16096: LD_VAR 0 2
16100: PUSH
16101: LD_INT 4
16103: PLUS
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: ST_TO_ADDR
// end ; 1 :
16120: GO 16820
16122: LD_INT 1
16124: DOUBLE
16125: EQUAL
16126: IFTRUE 16130
16128: GO 16263
16130: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16131: LD_ADDR_VAR 0 5
16135: PUSH
16136: LD_VAR 0 1
16140: PUSH
16141: LD_VAR 0 2
16145: PUSH
16146: LD_INT 4
16148: MINUS
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: PUSH
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 3
16165: MINUS
16166: PUSH
16167: LD_VAR 0 2
16171: PUSH
16172: LD_INT 3
16174: MINUS
16175: PUSH
16176: LD_INT 2
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 4
16191: MINUS
16192: PUSH
16193: LD_VAR 0 2
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: PUSH
16206: LD_VAR 0 1
16210: PUSH
16211: LD_VAR 0 2
16215: PUSH
16216: LD_INT 3
16218: PLUS
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: PUSH
16228: LD_VAR 0 1
16232: PUSH
16233: LD_INT 4
16235: PLUS
16236: PUSH
16237: LD_VAR 0 2
16241: PUSH
16242: LD_INT 4
16244: PLUS
16245: PUSH
16246: LD_INT 5
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: ST_TO_ADDR
// end ; 2 :
16261: GO 16820
16263: LD_INT 2
16265: DOUBLE
16266: EQUAL
16267: IFTRUE 16271
16269: GO 16400
16271: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16272: LD_ADDR_VAR 0 5
16276: PUSH
16277: LD_VAR 0 1
16281: PUSH
16282: LD_VAR 0 2
16286: PUSH
16287: LD_INT 3
16289: MINUS
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: PUSH
16299: LD_VAR 0 1
16303: PUSH
16304: LD_INT 4
16306: PLUS
16307: PUSH
16308: LD_VAR 0 2
16312: PUSH
16313: LD_INT 4
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: PUSH
16321: LD_VAR 0 1
16325: PUSH
16326: LD_VAR 0 2
16330: PUSH
16331: LD_INT 4
16333: PLUS
16334: PUSH
16335: LD_INT 0
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: PUSH
16343: LD_VAR 0 1
16347: PUSH
16348: LD_INT 3
16350: MINUS
16351: PUSH
16352: LD_VAR 0 2
16356: PUSH
16357: LD_INT 1
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: LD_VAR 0 1
16369: PUSH
16370: LD_INT 4
16372: MINUS
16373: PUSH
16374: LD_VAR 0 2
16378: PUSH
16379: LD_INT 4
16381: MINUS
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: ST_TO_ADDR
// end ; 3 :
16398: GO 16820
16400: LD_INT 3
16402: DOUBLE
16403: EQUAL
16404: IFTRUE 16408
16406: GO 16541
16408: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16409: LD_ADDR_VAR 0 5
16413: PUSH
16414: LD_VAR 0 1
16418: PUSH
16419: LD_INT 3
16421: PLUS
16422: PUSH
16423: LD_VAR 0 2
16427: PUSH
16428: LD_INT 4
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: PUSH
16436: LD_VAR 0 1
16440: PUSH
16441: LD_INT 4
16443: PLUS
16444: PUSH
16445: LD_VAR 0 2
16449: PUSH
16450: LD_INT 4
16452: PLUS
16453: PUSH
16454: LD_INT 5
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: PUSH
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 4
16469: MINUS
16470: PUSH
16471: LD_VAR 0 2
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: PUSH
16484: LD_VAR 0 1
16488: PUSH
16489: LD_VAR 0 2
16493: PUSH
16494: LD_INT 4
16496: MINUS
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: PUSH
16506: LD_VAR 0 1
16510: PUSH
16511: LD_INT 3
16513: MINUS
16514: PUSH
16515: LD_VAR 0 2
16519: PUSH
16520: LD_INT 3
16522: MINUS
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: ST_TO_ADDR
// end ; 4 :
16539: GO 16820
16541: LD_INT 4
16543: DOUBLE
16544: EQUAL
16545: IFTRUE 16549
16547: GO 16682
16549: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16550: LD_ADDR_VAR 0 5
16554: PUSH
16555: LD_VAR 0 1
16559: PUSH
16560: LD_VAR 0 2
16564: PUSH
16565: LD_INT 4
16567: PLUS
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: LIST
16576: PUSH
16577: LD_VAR 0 1
16581: PUSH
16582: LD_INT 3
16584: PLUS
16585: PUSH
16586: LD_VAR 0 2
16590: PUSH
16591: LD_INT 3
16593: PLUS
16594: PUSH
16595: LD_INT 5
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: LD_VAR 0 1
16607: PUSH
16608: LD_INT 3
16610: PLUS
16611: PUSH
16612: LD_VAR 0 2
16616: PUSH
16617: LD_INT 4
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: PUSH
16625: LD_VAR 0 1
16629: PUSH
16630: LD_VAR 0 2
16634: PUSH
16635: LD_INT 3
16637: MINUS
16638: PUSH
16639: LD_INT 3
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: LD_VAR 0 1
16651: PUSH
16652: LD_INT 4
16654: MINUS
16655: PUSH
16656: LD_VAR 0 2
16660: PUSH
16661: LD_INT 4
16663: MINUS
16664: PUSH
16665: LD_INT 2
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: ST_TO_ADDR
// end ; 5 :
16680: GO 16820
16682: LD_INT 5
16684: DOUBLE
16685: EQUAL
16686: IFTRUE 16690
16688: GO 16819
16690: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16691: LD_ADDR_VAR 0 5
16695: PUSH
16696: LD_VAR 0 1
16700: PUSH
16701: LD_INT 4
16703: MINUS
16704: PUSH
16705: LD_VAR 0 2
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: LD_VAR 0 1
16722: PUSH
16723: LD_VAR 0 2
16727: PUSH
16728: LD_INT 4
16730: MINUS
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: PUSH
16740: LD_VAR 0 1
16744: PUSH
16745: LD_INT 4
16747: PLUS
16748: PUSH
16749: LD_VAR 0 2
16753: PUSH
16754: LD_INT 4
16756: PLUS
16757: PUSH
16758: LD_INT 5
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: LD_VAR 0 1
16770: PUSH
16771: LD_INT 3
16773: PLUS
16774: PUSH
16775: LD_VAR 0 2
16779: PUSH
16780: LD_INT 4
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: PUSH
16788: LD_VAR 0 1
16792: PUSH
16793: LD_VAR 0 2
16797: PUSH
16798: LD_INT 3
16800: PLUS
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: ST_TO_ADDR
// end ; end ;
16817: GO 16820
16819: POP
// result := list ;
16820: LD_ADDR_VAR 0 4
16824: PUSH
16825: LD_VAR 0 5
16829: ST_TO_ADDR
// end ; end_of_file
16830: LD_VAR 0 4
16834: RET
// every 1 do var i ;
16835: GO 16837
16837: DISABLE
16838: LD_INT 0
16840: PPUSH
// begin InGameOn ;
16841: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16845: LD_INT 53
16847: PPUSH
16848: LD_INT 40
16850: PPUSH
16851: CALL_OW 84
// wait ( 0 0$5 ) ;
16855: LD_INT 175
16857: PPUSH
16858: CALL_OW 67
// if gammaCommander = 1 then
16862: LD_EXP 12
16866: PUSH
16867: LD_INT 1
16869: EQUAL
16870: IFFALSE 16881
// CenterNowOnUnits ( Donaldson ) ;
16872: LD_EXP 3
16876: PPUSH
16877: CALL_OW 87
// if gammaCommander = 2 then
16881: LD_EXP 12
16885: PUSH
16886: LD_INT 2
16888: EQUAL
16889: IFFALSE 16900
// CenterNowOnUnits ( Brown ) ;
16891: LD_EXP 2
16895: PPUSH
16896: CALL_OW 87
// if gammaCommander = 3 then
16900: LD_EXP 12
16904: PUSH
16905: LD_INT 3
16907: EQUAL
16908: IFFALSE 16919
// CenterNowOnUnits ( Houten ) ;
16910: LD_EXP 13
16914: PPUSH
16915: CALL_OW 87
// if gammaCommander = 1 then
16919: LD_EXP 12
16923: PUSH
16924: LD_INT 1
16926: EQUAL
16927: IFFALSE 16941
// Say ( Donaldson , D1-Don-1 ) ;
16929: LD_EXP 3
16933: PPUSH
16934: LD_STRING D1-Don-1
16936: PPUSH
16937: CALL_OW 88
// if gammaCommander = 2 then
16941: LD_EXP 12
16945: PUSH
16946: LD_INT 2
16948: EQUAL
16949: IFFALSE 16963
// Say ( Brown , D1-Brown-1 ) ;
16951: LD_EXP 2
16955: PPUSH
16956: LD_STRING D1-Brown-1
16958: PPUSH
16959: CALL_OW 88
// if gammaCommander = 3 then
16963: LD_EXP 12
16967: PUSH
16968: LD_INT 3
16970: EQUAL
16971: IFFALSE 16985
// Say ( Houten , D1-VanH-1 ) ;
16973: LD_EXP 13
16977: PPUSH
16978: LD_STRING D1-VanH-1
16980: PPUSH
16981: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
16985: LD_EXP 22
16989: PPUSH
16990: LD_STRING D1-Har-1
16992: PPUSH
16993: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
16997: LD_INT 53
16999: PPUSH
17000: LD_INT 40
17002: PPUSH
17003: CALL_OW 84
// if gammaCommander = 1 then
17007: LD_EXP 12
17011: PUSH
17012: LD_INT 1
17014: EQUAL
17015: IFFALSE 17029
// Say ( Donaldson , D1-Don-2 ) ;
17017: LD_EXP 3
17021: PPUSH
17022: LD_STRING D1-Don-2
17024: PPUSH
17025: CALL_OW 88
// if gammaCommander = 2 then
17029: LD_EXP 12
17033: PUSH
17034: LD_INT 2
17036: EQUAL
17037: IFFALSE 17051
// Say ( Brown , D1-Brown-2 ) ;
17039: LD_EXP 2
17043: PPUSH
17044: LD_STRING D1-Brown-2
17046: PPUSH
17047: CALL_OW 88
// if gammaCommander = 3 then
17051: LD_EXP 12
17055: PUSH
17056: LD_INT 3
17058: EQUAL
17059: IFFALSE 17073
// Say ( Houten , D1-VanH-2 ) ;
17061: LD_EXP 13
17065: PPUSH
17066: LD_STRING D1-VanH-2
17068: PPUSH
17069: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17073: LD_EXP 22
17077: PPUSH
17078: LD_STRING D1-Har-2
17080: PPUSH
17081: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17085: LD_INT 22
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 33
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 61
17107: PUSH
17108: EMPTY
17109: LIST
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: IFFALSE 17185
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17122: LD_ADDR_VAR 0 1
17126: PUSH
17127: LD_INT 22
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 33
17139: PUSH
17140: LD_INT 2
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 61
17149: PUSH
17150: EMPTY
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: PUSH
17163: FOR_IN
17164: IFFALSE 17183
// ComAgressiveMove ( i , 70 , 41 ) ;
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_INT 70
17173: PPUSH
17174: LD_INT 41
17176: PPUSH
17177: CALL_OW 114
17181: GO 17163
17183: POP
17184: POP
// repeat wait ( 0 0$1 ) ;
17185: LD_INT 35
17187: PPUSH
17188: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17192: LD_ADDR_VAR 0 1
17196: PUSH
17197: LD_INT 22
17199: PUSH
17200: LD_INT 6
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: PUSH
17215: FOR_IN
17216: IFFALSE 17235
// ComAgressiveMove ( i , 54 , 20 ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 54
17225: PPUSH
17226: LD_INT 20
17228: PPUSH
17229: CALL_OW 114
17233: GO 17215
17235: POP
17236: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17237: LD_ADDR_VAR 0 1
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: LD_INT 1
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: LD_INT 54
17267: PUSH
17268: EMPTY
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: PPUSH
17280: CALL_OW 69
17284: PUSH
17285: FOR_IN
17286: IFFALSE 17320
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17288: LD_VAR 0 1
17292: PPUSH
17293: LD_INT 70
17295: PPUSH
17296: LD_INT 41
17298: PPUSH
17299: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_INT 46
17310: PPUSH
17311: LD_INT 39
17313: PPUSH
17314: CALL_OW 174
// end ;
17318: GO 17285
17320: POP
17321: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17322: LD_ADDR_VAR 0 1
17326: PUSH
17327: LD_INT 22
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 21
17339: PUSH
17340: LD_INT 1
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: LD_INT 24
17352: PUSH
17353: LD_INT 500
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 69
17373: PUSH
17374: FOR_IN
17375: IFFALSE 17408
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17377: LD_VAR 0 1
17381: PPUSH
17382: LD_EXP 37
17386: PPUSH
17387: CALL_OW 250
17391: PPUSH
17392: LD_EXP 37
17396: PPUSH
17397: CALL_OW 251
17401: PPUSH
17402: CALL_OW 111
17406: GO 17374
17408: POP
17409: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17410: LD_INT 22
17412: PUSH
17413: LD_INT 6
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 21
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 24
17432: PUSH
17433: LD_INT 250
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: PPUSH
17445: CALL_OW 69
17449: PUSH
17450: LD_INT 6
17452: LESS
17453: IFFALSE 17185
// InGameOff ;
17455: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17459: LD_STRING M1
17461: PPUSH
17462: CALL_OW 337
// SaveForQuickRestart ;
17466: CALL_OW 22
// startCutscene = 0 ;
17470: LD_ADDR_EXP 38
17474: PUSH
17475: LD_INT 0
17477: ST_TO_ADDR
// end ;
17478: PPOPN 1
17480: END
// every 1 1$0 do
17481: GO 17483
17483: DISABLE
// begin PrepareSupportFromDelta ;
17484: CALL 3126 0 0
// firstAttack = 1 ;
17488: LD_ADDR_EXP 33
17492: PUSH
17493: LD_INT 1
17495: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17496: LD_EXP 8
17500: PPUSH
17501: CALL_OW 302
17505: IFFALSE 17521
// begin Say ( Gladstone , D2-Glad-1 ) ;
17507: LD_EXP 8
17511: PPUSH
17512: LD_STRING D2-Glad-1
17514: PPUSH
17515: CALL_OW 88
// end else
17519: GO 17623
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17521: LD_INT 4
17523: PPUSH
17524: LD_INT 22
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 21
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 2
17546: PUSH
17547: LD_INT 25
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 25
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 25
17569: PUSH
17570: LD_INT 3
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 25
17579: PUSH
17580: LD_INT 4
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: PPUSH
17599: CALL_OW 70
17603: PUSH
17604: LD_EXP 15
17608: PUSH
17609: EMPTY
17610: LIST
17611: DIFF
17612: PPUSH
17613: LD_STRING D2-Sol1-1
17615: PPUSH
17616: LD_STRING D2-FSol1-1
17618: PPUSH
17619: CALL 6616 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17623: LD_EXP 3
17627: PPUSH
17628: CALL_OW 302
17632: PUSH
17633: LD_EXP 12
17637: PUSH
17638: LD_INT 1
17640: EQUAL
17641: AND
17642: IFFALSE 17656
// Say ( Donaldson , D2-Don-1 ) ;
17644: LD_EXP 3
17648: PPUSH
17649: LD_STRING D2-Don-1
17651: PPUSH
17652: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17656: LD_EXP 2
17660: PPUSH
17661: CALL_OW 302
17665: PUSH
17666: LD_EXP 12
17670: PUSH
17671: LD_INT 2
17673: EQUAL
17674: AND
17675: IFFALSE 17689
// Say ( Brown , D2-Brown-1 ) ;
17677: LD_EXP 2
17681: PPUSH
17682: LD_STRING D2-Brown-1
17684: PPUSH
17685: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17689: LD_EXP 13
17693: PPUSH
17694: CALL_OW 302
17698: PUSH
17699: LD_EXP 12
17703: PUSH
17704: LD_INT 3
17706: EQUAL
17707: AND
17708: IFFALSE 17722
// Say ( Houten , D2-VanH-1 ) ;
17710: LD_EXP 13
17714: PPUSH
17715: LD_STRING D2-VanH-1
17717: PPUSH
17718: CALL_OW 88
// end ;
17722: END
// every 0 0$1 do
17723: GO 17725
17725: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
17726: LD_STRING 07_time
17728: PPUSH
17729: LD_INT 12600
17731: PPUSH
17732: CALL_OW 30
17736: PUSH
17737: LD_INT 3
17739: DIV
17740: PPUSH
17741: CALL_OW 67
// PrepareMacmillanSquad ;
17745: CALL 3741 0 0
// CenterNowOnUnits ( JMM ) ;
17749: LD_EXP 1
17753: PPUSH
17754: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17758: LD_EXP 1
17762: PPUSH
17763: LD_STRING D3-JMM-1
17765: PPUSH
17766: CALL_OW 88
// JMMArrive = 1 ;
17770: LD_ADDR_EXP 39
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17778: LD_EXP 3
17782: PPUSH
17783: CALL_OW 302
17787: PUSH
17788: LD_EXP 12
17792: PUSH
17793: LD_INT 1
17795: EQUAL
17796: AND
17797: IFFALSE 17813
// begin Say ( Donaldson , D3-Don-1 ) ;
17799: LD_EXP 3
17803: PPUSH
17804: LD_STRING D3-Don-1
17806: PPUSH
17807: CALL_OW 88
// end else
17811: GO 17865
// begin if gammaCommander = 1 then
17813: LD_EXP 12
17817: PUSH
17818: LD_INT 1
17820: EQUAL
17821: IFFALSE 17865
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17823: LD_EXP 11
17827: PPUSH
17828: LD_INT 26
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PPUSH
17838: CALL_OW 72
17842: PPUSH
17843: LD_STRING D3-Sol1-1
17845: PPUSH
17846: LD_STRING D3-Sol1-1
17848: PPUSH
17849: CALL 6616 0 3
// Say ( JMM , D3-JMM-2 ) ;
17853: LD_EXP 1
17857: PPUSH
17858: LD_STRING D3-JMM-2
17860: PPUSH
17861: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17865: LD_EXP 2
17869: PPUSH
17870: CALL_OW 302
17874: PUSH
17875: LD_EXP 12
17879: PUSH
17880: LD_INT 2
17882: EQUAL
17883: AND
17884: IFFALSE 17900
// begin Say ( Brown , D3-Brown-1 ) ;
17886: LD_EXP 2
17890: PPUSH
17891: LD_STRING D3-Brown-1
17893: PPUSH
17894: CALL_OW 88
// end else
17898: GO 17952
// begin if gammaCommander = 2 then
17900: LD_EXP 12
17904: PUSH
17905: LD_INT 2
17907: EQUAL
17908: IFFALSE 17952
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17910: LD_EXP 11
17914: PPUSH
17915: LD_INT 26
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 72
17929: PPUSH
17930: LD_STRING D3-Sol1-1a
17932: PPUSH
17933: LD_STRING D3-Sol1-1a
17935: PPUSH
17936: CALL 6616 0 3
// Say ( JMM , D3-JMM-2 ) ;
17940: LD_EXP 1
17944: PPUSH
17945: LD_STRING D3-JMM-2
17947: PPUSH
17948: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17952: LD_EXP 13
17956: PPUSH
17957: CALL_OW 302
17961: PUSH
17962: LD_EXP 12
17966: PUSH
17967: LD_INT 3
17969: EQUAL
17970: AND
17971: IFFALSE 17987
// begin Say ( Houten , D3-VanH-1 ) ;
17973: LD_EXP 13
17977: PPUSH
17978: LD_STRING D3-VanH-1
17980: PPUSH
17981: CALL_OW 88
// end else
17985: GO 18039
// begin if gammaCommander = 3 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 3
17994: EQUAL
17995: IFFALSE 18039
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17997: LD_EXP 11
18001: PPUSH
18002: LD_INT 26
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PPUSH
18012: CALL_OW 72
18016: PPUSH
18017: LD_STRING D3-Sol1-1b
18019: PPUSH
18020: LD_STRING D3-Sol1-1b
18022: PPUSH
18023: CALL 6616 0 3
// Say ( JMM , D3-JMM-2 ) ;
18027: LD_EXP 1
18031: PPUSH
18032: LD_STRING D3-JMM-2
18034: PPUSH
18035: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
18039: LD_EXP 15
18043: PPUSH
18044: CALL_OW 302
18048: IFFALSE 18076
// begin Say ( Joan , D3a-Joan-1 ) ;
18050: LD_EXP 15
18054: PPUSH
18055: LD_STRING D3a-Joan-1
18057: PPUSH
18058: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18062: LD_EXP 1
18066: PPUSH
18067: LD_STRING D3a-JMM-1
18069: PPUSH
18070: CALL_OW 88
// end else
18074: GO 18418
// if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18076: LD_STRING 06_JoanStatus_1
18078: PPUSH
18079: LD_INT 0
18081: PPUSH
18082: CALL_OW 30
18086: PUSH
18087: LD_INT 1
18089: EQUAL
18090: IFFALSE 18418
// begin Say ( JMM , D3b-JMM-1 ) ;
18092: LD_EXP 1
18096: PPUSH
18097: LD_STRING D3b-JMM-1
18099: PPUSH
18100: CALL_OW 88
// if gammaCommander = 1 then
18104: LD_EXP 12
18108: PUSH
18109: LD_INT 1
18111: EQUAL
18112: IFFALSE 18169
// if IsOK ( Donaldson ) then
18114: LD_EXP 3
18118: PPUSH
18119: CALL_OW 302
18123: IFFALSE 18139
// Say ( Donaldson , D3b-Don-1 ) else
18125: LD_EXP 3
18129: PPUSH
18130: LD_STRING D3b-Don-1
18132: PPUSH
18133: CALL_OW 88
18137: GO 18169
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18139: LD_EXP 11
18143: PPUSH
18144: LD_INT 26
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 72
18158: PPUSH
18159: LD_STRING D3b-Sol1-1
18161: PPUSH
18162: LD_STRING D3b-Sol1-1
18164: PPUSH
18165: CALL 6616 0 3
// if gammaCommander = 2 then
18169: LD_EXP 12
18173: PUSH
18174: LD_INT 2
18176: EQUAL
18177: IFFALSE 18234
// if IsOk ( Brown ) then
18179: LD_EXP 2
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Brown , D3b-Brown-1 ) else
18190: LD_EXP 2
18194: PPUSH
18195: LD_STRING D3b-Brown-1
18197: PPUSH
18198: CALL_OW 88
18202: GO 18234
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18204: LD_EXP 11
18208: PPUSH
18209: LD_INT 26
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PPUSH
18219: CALL_OW 72
18223: PPUSH
18224: LD_STRING D3b-Sol1-1
18226: PPUSH
18227: LD_STRING D3b-Sol1-1
18229: PPUSH
18230: CALL 6616 0 3
// if gammaCommander = 3 then
18234: LD_EXP 12
18238: PUSH
18239: LD_INT 3
18241: EQUAL
18242: IFFALSE 18299
// if IsOk ( Houten ) then
18244: LD_EXP 13
18248: PPUSH
18249: CALL_OW 302
18253: IFFALSE 18269
// Say ( Houten , D3b-VanH-1 ) else
18255: LD_EXP 13
18259: PPUSH
18260: LD_STRING D3b-VanH-1
18262: PPUSH
18263: CALL_OW 88
18267: GO 18299
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18269: LD_EXP 11
18273: PPUSH
18274: LD_INT 26
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 72
18288: PPUSH
18289: LD_STRING D3b-Sol1-1
18291: PPUSH
18292: LD_STRING D3b-Sol1-1
18294: PPUSH
18295: CALL 6616 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
18299: LD_EXP 11
18303: PPUSH
18304: LD_INT 26
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PPUSH
18314: CALL_OW 72
18318: PUSH
18319: LD_EXP 12
18323: PUSH
18324: LD_INT 1
18326: EQUAL
18327: PUSH
18328: LD_EXP 3
18332: PPUSH
18333: CALL_OW 302
18337: AND
18338: OR
18339: PUSH
18340: LD_EXP 12
18344: PUSH
18345: LD_INT 2
18347: EQUAL
18348: PUSH
18349: LD_EXP 2
18353: PPUSH
18354: CALL_OW 302
18358: AND
18359: OR
18360: PUSH
18361: LD_EXP 12
18365: PUSH
18366: LD_INT 3
18368: EQUAL
18369: PUSH
18370: LD_EXP 13
18374: PPUSH
18375: CALL_OW 302
18379: AND
18380: OR
18381: IFFALSE 18395
// Say ( JMM , D3b-JMM-2 ) ;
18383: LD_EXP 1
18387: PPUSH
18388: LD_STRING D3b-JMM-2
18390: PPUSH
18391: CALL_OW 88
// if IsOK ( Lisa ) then
18395: LD_EXP 6
18399: PPUSH
18400: CALL_OW 302
18404: IFFALSE 18418
// Say ( Lisa , D3b-Lisa-2 ) ;
18406: LD_EXP 6
18410: PPUSH
18411: LD_STRING D3b-Lisa-2
18413: PPUSH
18414: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18418: LD_INT 22
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 21
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 26
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: LD_INT 25
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 25
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 25
18483: PUSH
18484: LD_INT 4
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: PPUSH
18504: CALL_OW 69
18508: PUSH
18509: LD_EXP 1
18513: PUSH
18514: EMPTY
18515: LIST
18516: DIFF
18517: PPUSH
18518: LD_STRING DCa-Sol1-1
18520: PPUSH
18521: LD_STRING DCa-Sol1-1
18523: PPUSH
18524: CALL 6616 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18528: LD_EXP 1
18532: PPUSH
18533: LD_STRING DCb-JMM-1
18535: PPUSH
18536: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18540: LD_INT 22
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 26
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 25
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 25
18585: PUSH
18586: LD_INT 2
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 25
18595: PUSH
18596: LD_INT 3
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 25
18605: PUSH
18606: LD_INT 4
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: PUSH
18631: LD_EXP 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: DIFF
18639: PPUSH
18640: LD_STRING DCb-Sol1-1
18642: PPUSH
18643: LD_STRING DCb-Sol1-1
18645: PPUSH
18646: CALL 6616 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18650: LD_EXP 1
18654: PPUSH
18655: LD_STRING DCb-JMM-2
18657: PPUSH
18658: CALL_OW 88
// secondAttack = 1 ;
18662: LD_ADDR_EXP 34
18666: PUSH
18667: LD_INT 1
18669: ST_TO_ADDR
// end ;
18670: END
// every 0 0$01 trigger JMMArrive = 1 do
18671: LD_EXP 39
18675: PUSH
18676: LD_INT 1
18678: EQUAL
18679: IFFALSE 18759
18681: GO 18683
18683: DISABLE
// begin wait ( 3 3$0 ) ;
18684: LD_INT 6300
18686: PPUSH
18687: CALL_OW 67
// DialogueOn ;
18691: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18695: LD_EXP 23
18699: PPUSH
18700: LD_STRING D4-Pow-1
18702: PPUSH
18703: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18707: LD_EXP 1
18711: PPUSH
18712: LD_STRING D4-JMM-1
18714: PPUSH
18715: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18719: LD_EXP 23
18723: PPUSH
18724: LD_STRING D4-Pow-2
18726: PPUSH
18727: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18731: LD_EXP 1
18735: PPUSH
18736: LD_STRING D4-JMM-2
18738: PPUSH
18739: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18743: LD_EXP 23
18747: PPUSH
18748: LD_STRING D4-Pow-3
18750: PPUSH
18751: CALL_OW 94
// DialogueOff ;
18755: CALL_OW 7
// end ;
18759: END
// every 0 0$01 trigger JMMArrive = 1 do
18760: LD_EXP 39
18764: PUSH
18765: LD_INT 1
18767: EQUAL
18768: IFFALSE 18800
18770: GO 18772
18772: DISABLE
// begin wait ( 8 8$0 ) ;
18773: LD_INT 16800
18775: PPUSH
18776: CALL_OW 67
// DialogueOn ;
18780: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18784: LD_EXP 23
18788: PPUSH
18789: LD_STRING D4a-Pow-1
18791: PPUSH
18792: CALL_OW 94
// DialogueOff ;
18796: CALL_OW 7
// end ;
18800: END
// every 0 0$01 trigger JMMArrive = 1 do
18801: LD_EXP 39
18805: PUSH
18806: LD_INT 1
18808: EQUAL
18809: IFFALSE 18854
18811: GO 18813
18813: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18814: LD_INT 21000
18816: PUSH
18817: LD_INT 25200
18819: PUSH
18820: LD_INT 31500
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: LIST
18827: PUSH
18828: LD_OWVAR 67
18832: ARRAY
18833: PPUSH
18834: CALL_OW 67
// PrepareSikorsky ;
18838: CALL 5200 0 0
// SikorskyArrive = 1 ;
18842: LD_ADDR_EXP 18
18846: PUSH
18847: LD_INT 1
18849: ST_TO_ADDR
// PrepareSikorskyArmy ;
18850: CALL 5340 0 0
// end ;
18854: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18855: LD_EXP 17
18859: PPUSH
18860: LD_INT 5
18862: PPUSH
18863: CALL_OW 308
18867: IFFALSE 19059
18869: GO 18871
18871: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18872: LD_EXP 17
18876: PPUSH
18877: CALL_OW 87
// DialogueOn ;
18881: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18885: LD_EXP 16
18889: PPUSH
18890: LD_STRING D5-Sik-1
18892: PPUSH
18893: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
18897: LD_EXP 1
18901: PPUSH
18902: LD_STRING D5-JMM-1a
18904: PPUSH
18905: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18909: LD_EXP 16
18913: PPUSH
18914: LD_STRING D5-Sik-2
18916: PPUSH
18917: CALL_OW 88
// case query ( QSikorski ) of 1 :
18921: LD_STRING QSikorski
18923: PPUSH
18924: CALL_OW 97
18928: PUSH
18929: LD_INT 1
18931: DOUBLE
18932: EQUAL
18933: IFTRUE 18937
18935: GO 18960
18937: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18938: LD_EXP 16
18942: PPUSH
18943: LD_STRING D5a-Sik-1
18945: PPUSH
18946: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
18950: LD_ADDR_EXP 19
18954: PUSH
18955: LD_INT 2100
18957: ST_TO_ADDR
// end ; 2 :
18958: GO 19047
18960: LD_INT 2
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18968
18966: GO 18991
18968: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18969: LD_EXP 16
18973: PPUSH
18974: LD_STRING D5b-Sik-1
18976: PPUSH
18977: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18981: LD_ADDR_EXP 19
18985: PUSH
18986: LD_INT 10500
18988: ST_TO_ADDR
// end ; 3 :
18989: GO 19047
18991: LD_INT 3
18993: DOUBLE
18994: EQUAL
18995: IFTRUE 18999
18997: GO 19046
18999: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
19000: LD_EXP 16
19004: PPUSH
19005: LD_STRING D5c-Sik-1
19007: PPUSH
19008: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
19012: LD_EXP 1
19016: PPUSH
19017: LD_STRING D5c-JMM-1
19019: PPUSH
19020: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
19024: LD_EXP 16
19028: PPUSH
19029: LD_STRING D5c-Sik-2
19031: PPUSH
19032: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19036: LD_ADDR_EXP 19
19040: PUSH
19041: LD_INT 10500
19043: ST_TO_ADDR
// end ; end ;
19044: GO 19047
19046: POP
// DialogueOff ;
19047: CALL_OW 7
// timerStatus = 1 ;
19051: LD_ADDR_EXP 35
19055: PUSH
19056: LD_INT 1
19058: ST_TO_ADDR
// end ;
19059: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19060: LD_EXP 19
19064: PUSH
19065: LD_INT 35
19067: LESS
19068: IFFALSE 19116
19070: GO 19072
19072: DISABLE
// begin timerStatus = 0 ;
19073: LD_ADDR_EXP 35
19077: PUSH
19078: LD_INT 0
19080: ST_TO_ADDR
// DialogueOn ;
19081: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19085: LD_EXP 16
19089: PPUSH
19090: LD_STRING D6-Sik-1
19092: PPUSH
19093: CALL_OW 88
// DialogueOff ;
19097: CALL_OW 7
// SikorskyAI = 1 ;
19101: LD_ADDR_EXP 20
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19109: LD_STRING M2
19111: PPUSH
19112: CALL_OW 337
// end ;
19116: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19117: LD_EXP 17
19121: PPUSH
19122: LD_INT 18
19124: PPUSH
19125: CALL_OW 308
19129: IFFALSE 19213
19131: GO 19133
19133: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19134: LD_EXP 16
19138: PPUSH
19139: LD_STRING D7-Sik-1
19141: PPUSH
19142: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19146: LD_EXP 1
19150: PPUSH
19151: LD_INT 24
19153: PPUSH
19154: CALL_OW 308
19158: PUSH
19159: LD_EXP 1
19163: PPUSH
19164: CALL_OW 310
19168: OR
19169: IFFALSE 19193
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19171: LD_EXP 16
19175: PPUSH
19176: LD_STRING D7a-Sik-1
19178: PPUSH
19179: CALL_OW 88
// SikorskyStatus = 1 ;
19183: LD_ADDR_EXP 21
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// end else
19191: GO 19213
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19193: LD_EXP 16
19197: PPUSH
19198: LD_STRING D7b-Sik-1
19200: PPUSH
19201: CALL_OW 88
// SikorskyStatus = 2 ;
19205: LD_ADDR_EXP 21
19209: PUSH
19210: LD_INT 2
19212: ST_TO_ADDR
// end ; end ;
19213: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19214: LD_EXP 36
19218: PUSH
19219: LD_INT 1
19221: EQUAL
19222: IFFALSE 19331
19224: GO 19226
19226: DISABLE
19227: LD_INT 0
19229: PPUSH
// begin enable ;
19230: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19231: LD_ADDR_VAR 0 1
19235: PUSH
19236: LD_INT 22
19238: PUSH
19239: LD_INT 3
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PPUSH
19246: CALL_OW 69
19250: PUSH
19251: FOR_IN
19252: IFFALSE 19279
// if IsInArea ( i , RussianEscape ) then
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_INT 22
19261: PPUSH
19262: CALL_OW 308
19266: IFFALSE 19277
// RemoveUnit ( i ) ;
19268: LD_VAR 0 1
19272: PPUSH
19273: CALL_OW 64
19277: GO 19251
19279: POP
19280: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19281: LD_ADDR_VAR 0 1
19285: PUSH
19286: LD_INT 22
19288: PUSH
19289: LD_INT 6
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 69
19300: PUSH
19301: FOR_IN
19302: IFFALSE 19329
// if IsInArea ( i , RussianEscape ) then
19304: LD_VAR 0 1
19308: PPUSH
19309: LD_INT 22
19311: PPUSH
19312: CALL_OW 308
19316: IFFALSE 19327
// RemoveUnit ( i ) ;
19318: LD_VAR 0 1
19322: PPUSH
19323: CALL_OW 64
19327: GO 19301
19329: POP
19330: POP
// end ; end_of_file
19331: PPOPN 1
19333: END
// on BuildingComplete ( building ) do var tmp , un ;
19334: LD_INT 0
19336: PPUSH
19337: PPUSH
// begin if GetSide ( building ) = 3 then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 255
19347: PUSH
19348: LD_INT 3
19350: EQUAL
19351: IFFALSE 19838
// begin if GetBType ( building ) = b_depot then
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL_OW 266
19362: PUSH
19363: LD_INT 0
19365: EQUAL
19366: IFFALSE 19434
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 274
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: LD_INT 5000
19383: PPUSH
19384: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL_OW 274
19397: PPUSH
19398: LD_INT 2
19400: PPUSH
19401: LD_INT 5000
19403: PPUSH
19404: CALL_OW 277
// SetBName ( building , konev ) ;
19408: LD_VAR 0 1
19412: PPUSH
19413: LD_STRING konev
19415: PPUSH
19416: CALL_OW 500
// ruDepot = building ;
19420: LD_ADDR_EXP 28
19424: PUSH
19425: LD_VAR 0 1
19429: ST_TO_ADDR
// BuildRussianBase ;
19430: CALL 7221 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 266
19443: PUSH
19444: LD_INT 0
19446: EQUAL
19447: PUSH
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 266
19457: PUSH
19458: LD_INT 2
19460: EQUAL
19461: OR
19462: PUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 266
19472: PUSH
19473: LD_INT 4
19475: EQUAL
19476: OR
19477: IFFALSE 19488
// ComUpgrade ( building ) ;
19479: LD_VAR 0 1
19483: PPUSH
19484: CALL_OW 146
// if GetBType ( building ) = b_lab then
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 266
19497: PUSH
19498: LD_INT 6
19500: EQUAL
19501: IFFALSE 19552
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19503: LD_VAR 0 1
19507: PPUSH
19508: LD_INT 10
19510: PPUSH
19511: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 12
19522: PPUSH
19523: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19527: LD_INT 3
19529: PPUSH
19530: LD_VAR 0 1
19534: PPUSH
19535: LD_INT 3
19537: PPUSH
19538: CALL 7776 0 3
// ruLab = building ;
19542: LD_ADDR_EXP 29
19546: PUSH
19547: LD_VAR 0 1
19551: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 266
19561: PUSH
19562: LD_INT 32
19564: EQUAL
19565: IFFALSE 19683
// begin uc_side = 3 ;
19567: LD_ADDR_OWVAR 20
19571: PUSH
19572: LD_INT 3
19574: ST_TO_ADDR
// uc_nation = 3 ;
19575: LD_ADDR_OWVAR 21
19579: PUSH
19580: LD_INT 3
19582: ST_TO_ADDR
// hc_gallery =  ;
19583: LD_ADDR_OWVAR 33
19587: PUSH
19588: LD_STRING 
19590: ST_TO_ADDR
// hc_name =  ;
19591: LD_ADDR_OWVAR 26
19595: PUSH
19596: LD_STRING 
19598: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19599: LD_INT 0
19601: PPUSH
19602: LD_INT 1
19604: PPUSH
19605: LD_EXP 25
19609: PPUSH
19610: LD_EXP 26
19614: PPUSH
19615: CALL_OW 12
19619: PPUSH
19620: CALL_OW 380
// un = CreateHuman ;
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: CALL_OW 44
19633: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19634: LD_VAR 0 3
19638: PPUSH
19639: LD_VAR 0 1
19643: PPUSH
19644: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19648: LD_VAR 0 1
19652: PPUSH
19653: LD_INT 43
19655: PUSH
19656: LD_INT 44
19658: PUSH
19659: LD_INT 46
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: PPUSH
19670: LD_INT 3
19672: PPUSH
19673: CALL_OW 12
19677: ARRAY
19678: PPUSH
19679: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19683: LD_VAR 0 1
19687: PPUSH
19688: CALL_OW 266
19692: PUSH
19693: LD_INT 33
19695: EQUAL
19696: IFFALSE 19733
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19698: LD_VAR 0 1
19702: PPUSH
19703: LD_INT 43
19705: PUSH
19706: LD_INT 44
19708: PUSH
19709: LD_INT 46
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 1
19719: PPUSH
19720: LD_INT 3
19722: PPUSH
19723: CALL_OW 12
19727: ARRAY
19728: PPUSH
19729: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 266
19742: PUSH
19743: LD_INT 24
19745: EQUAL
19746: IFFALSE 19756
// russianAI = 1 ;
19748: LD_ADDR_EXP 27
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19756: LD_EXP 31
19760: PUSH
19761: LD_INT 0
19763: GREATER
19764: IFFALSE 19838
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19766: LD_ADDR_EXP 31
19770: PUSH
19771: LD_EXP 31
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 3
19783: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19784: LD_ADDR_EXP 31
19788: PUSH
19789: LD_EXP 31
19793: PPUSH
19794: LD_INT 1
19796: PPUSH
19797: CALL_OW 3
19801: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19802: LD_ADDR_EXP 31
19806: PUSH
19807: LD_EXP 31
19811: PPUSH
19812: LD_INT 1
19814: PPUSH
19815: CALL_OW 3
19819: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19820: LD_ADDR_EXP 31
19824: PUSH
19825: LD_EXP 31
19829: PPUSH
19830: LD_INT 1
19832: PPUSH
19833: CALL_OW 3
19837: ST_TO_ADDR
// end ; end ; end ;
19838: PPOPN 3
19840: END
// on UpgradeComplete ( building ) do var i ;
19841: LD_INT 0
19843: PPUSH
// begin if GetSide ( building ) = 3 then
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 255
19853: PUSH
19854: LD_INT 3
19856: EQUAL
19857: IFFALSE 20038
// begin if GetBType ( building ) = b_factory then
19859: LD_VAR 0 1
19863: PPUSH
19864: CALL_OW 266
19868: PUSH
19869: LD_INT 3
19871: EQUAL
19872: IFFALSE 19939
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19874: LD_ADDR_VAR 0 2
19878: PUSH
19879: LD_INT 22
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 25
19891: PUSH
19892: LD_INT 3
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PPUSH
19903: CALL_OW 69
19907: PUSH
19908: FOR_IN
19909: IFFALSE 19927
// ComEnterUnit ( i , building ) ;
19911: LD_VAR 0 2
19915: PPUSH
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 120
19925: GO 19908
19927: POP
19928: POP
// ruFab = building ;
19929: LD_ADDR_EXP 30
19933: PUSH
19934: LD_VAR 0 1
19938: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19939: LD_VAR 0 1
19943: PPUSH
19944: CALL_OW 266
19948: PUSH
19949: LD_INT 8
19951: EQUAL
19952: IFFALSE 20009
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19954: LD_ADDR_VAR 0 2
19958: PUSH
19959: LD_INT 22
19961: PUSH
19962: LD_INT 3
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 25
19971: PUSH
19972: LD_INT 4
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PPUSH
19983: CALL_OW 69
19987: PUSH
19988: FOR_IN
19989: IFFALSE 20007
// ComEnterUnit ( i , building ) ;
19991: LD_VAR 0 2
19995: PPUSH
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 120
20005: GO 19988
20007: POP
20008: POP
// if GetBType ( building ) = b_warehouse then
20009: LD_VAR 0 1
20013: PPUSH
20014: CALL_OW 266
20018: PUSH
20019: LD_INT 1
20021: EQUAL
20022: IFFALSE 20038
// begin ComEnterUnit ( Borodin , building ) ;
20024: LD_EXP 24
20028: PPUSH
20029: LD_VAR 0 1
20033: PPUSH
20034: CALL_OW 120
// end ; end ; end ;
20038: PPOPN 2
20040: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 247
20050: PUSH
20051: LD_INT 2
20053: EQUAL
20054: PUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 263
20064: PUSH
20065: LD_INT 3
20067: EQUAL
20068: AND
20069: PUSH
20070: LD_EXP 41
20074: PUSH
20075: LD_INT 0
20077: EQUAL
20078: AND
20079: IFFALSE 20197
// begin varEvent1 = 1 ;
20081: LD_ADDR_EXP 41
20085: PUSH
20086: LD_INT 1
20088: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20089: LD_VAR 0 1
20093: PPUSH
20094: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20098: LD_INT 22
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 21
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: LD_INT 25
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 25
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 25
20143: PUSH
20144: LD_INT 3
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 25
20153: PUSH
20154: LD_INT 4
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: PPUSH
20173: CALL_OW 69
20177: PUSH
20178: LD_EXP 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: DIFF
20186: PPUSH
20187: LD_STRING DC-Sol1-1
20189: PPUSH
20190: LD_STRING DC-FSol1-1
20192: PPUSH
20193: CALL 6616 0 3
// end ; end ;
20197: PPOPN 1
20199: END
// on UnitDestroyed ( unit ) do var i ;
20200: LD_INT 0
20202: PPUSH
// begin if GetSide ( unit ) = 3 then
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 255
20212: PUSH
20213: LD_INT 3
20215: EQUAL
20216: IFFALSE 20986
// begin if GetType ( unit ) = unit_building then
20218: LD_VAR 0 1
20222: PPUSH
20223: CALL_OW 247
20227: PUSH
20228: LD_INT 3
20230: EQUAL
20231: IFFALSE 20923
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20233: LD_VAR 0 1
20237: PPUSH
20238: CALL_OW 266
20242: PUSH
20243: LD_INT 31
20245: EQUAL
20246: PUSH
20247: LD_VAR 0 1
20251: PPUSH
20252: CALL_OW 266
20256: PUSH
20257: LD_INT 32
20259: EQUAL
20260: OR
20261: PUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 266
20271: PUSH
20272: LD_INT 36
20274: EQUAL
20275: OR
20276: PUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL_OW 266
20286: PUSH
20287: LD_INT 0
20289: EQUAL
20290: OR
20291: PUSH
20292: LD_VAR 0 1
20296: PPUSH
20297: CALL_OW 266
20301: PUSH
20302: LD_INT 24
20304: EQUAL
20305: OR
20306: PUSH
20307: LD_VAR 0 1
20311: PPUSH
20312: CALL_OW 266
20316: PUSH
20317: LD_INT 17
20319: EQUAL
20320: OR
20321: PUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 266
20331: PUSH
20332: LD_INT 25
20334: EQUAL
20335: OR
20336: PUSH
20337: LD_VAR 0 1
20341: PPUSH
20342: CALL_OW 266
20346: PUSH
20347: LD_INT 19
20349: EQUAL
20350: OR
20351: PUSH
20352: LD_VAR 0 1
20356: PPUSH
20357: CALL_OW 266
20361: PUSH
20362: LD_INT 20
20364: EQUAL
20365: OR
20366: PUSH
20367: LD_VAR 0 1
20371: PPUSH
20372: CALL_OW 266
20376: PUSH
20377: LD_INT 18
20379: EQUAL
20380: OR
20381: PUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 266
20391: PUSH
20392: LD_INT 21
20394: EQUAL
20395: OR
20396: PUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: CALL_OW 266
20406: PUSH
20407: LD_INT 23
20409: EQUAL
20410: OR
20411: PUSH
20412: LD_VAR 0 1
20416: PPUSH
20417: CALL_OW 266
20421: PUSH
20422: LD_INT 16
20424: EQUAL
20425: OR
20426: PUSH
20427: LD_VAR 0 1
20431: PPUSH
20432: CALL_OW 266
20436: PUSH
20437: LD_INT 6
20439: EQUAL
20440: OR
20441: PUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 266
20451: PUSH
20452: LD_INT 29
20454: EQUAL
20455: OR
20456: PUSH
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 266
20466: PUSH
20467: LD_INT 26
20469: EQUAL
20470: OR
20471: PUSH
20472: LD_VAR 0 1
20476: PPUSH
20477: CALL_OW 266
20481: PUSH
20482: LD_INT 30
20484: EQUAL
20485: OR
20486: PUSH
20487: LD_VAR 0 1
20491: PPUSH
20492: CALL_OW 266
20496: PUSH
20497: LD_INT 28
20499: EQUAL
20500: OR
20501: PUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: CALL_OW 266
20511: PUSH
20512: LD_INT 27
20514: EQUAL
20515: OR
20516: PUSH
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 266
20526: PUSH
20527: LD_INT 33
20529: EQUAL
20530: OR
20531: PUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 266
20541: PUSH
20542: LD_INT 2
20544: EQUAL
20545: OR
20546: PUSH
20547: LD_VAR 0 1
20551: PPUSH
20552: CALL_OW 266
20556: PUSH
20557: LD_INT 4
20559: EQUAL
20560: OR
20561: IFFALSE 20647
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20563: LD_ADDR_EXP 31
20567: PUSH
20568: LD_EXP 31
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 266
20582: ADD
20583: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20584: LD_ADDR_EXP 31
20588: PUSH
20589: LD_EXP 31
20593: PUSH
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL_OW 250
20603: ADD
20604: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20605: LD_ADDR_EXP 31
20609: PUSH
20610: LD_EXP 31
20614: PUSH
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 251
20624: ADD
20625: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20626: LD_ADDR_EXP 31
20630: PUSH
20631: LD_EXP 31
20635: PUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: CALL_OW 254
20645: ADD
20646: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20647: LD_VAR 0 1
20651: PPUSH
20652: CALL_OW 266
20656: PUSH
20657: LD_INT 1
20659: EQUAL
20660: IFFALSE 20739
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20662: LD_ADDR_EXP 31
20666: PUSH
20667: LD_EXP 31
20671: PUSH
20672: LD_INT 0
20674: ADD
20675: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20676: LD_ADDR_EXP 31
20680: PUSH
20681: LD_EXP 31
20685: PUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: CALL_OW 250
20695: ADD
20696: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20697: LD_ADDR_EXP 31
20701: PUSH
20702: LD_EXP 31
20706: PUSH
20707: LD_VAR 0 1
20711: PPUSH
20712: CALL_OW 251
20716: ADD
20717: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20718: LD_ADDR_EXP 31
20722: PUSH
20723: LD_EXP 31
20727: PUSH
20728: LD_VAR 0 1
20732: PPUSH
20733: CALL_OW 254
20737: ADD
20738: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 266
20748: PUSH
20749: LD_INT 3
20751: EQUAL
20752: IFFALSE 20831
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20754: LD_ADDR_EXP 31
20758: PUSH
20759: LD_EXP 31
20763: PUSH
20764: LD_INT 2
20766: ADD
20767: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20768: LD_ADDR_EXP 31
20772: PUSH
20773: LD_EXP 31
20777: PUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 250
20787: ADD
20788: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20789: LD_ADDR_EXP 31
20793: PUSH
20794: LD_EXP 31
20798: PUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: CALL_OW 251
20808: ADD
20809: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20810: LD_ADDR_EXP 31
20814: PUSH
20815: LD_EXP 31
20819: PUSH
20820: LD_VAR 0 1
20824: PPUSH
20825: CALL_OW 254
20829: ADD
20830: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20831: LD_VAR 0 1
20835: PPUSH
20836: CALL_OW 266
20840: PUSH
20841: LD_INT 5
20843: EQUAL
20844: IFFALSE 20923
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20846: LD_ADDR_EXP 31
20850: PUSH
20851: LD_EXP 31
20855: PUSH
20856: LD_INT 4
20858: ADD
20859: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20860: LD_ADDR_EXP 31
20864: PUSH
20865: LD_EXP 31
20869: PUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 250
20879: ADD
20880: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20881: LD_ADDR_EXP 31
20885: PUSH
20886: LD_EXP 31
20890: PUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 251
20900: ADD
20901: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20902: LD_ADDR_EXP 31
20906: PUSH
20907: LD_EXP 31
20911: PUSH
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 254
20921: ADD
20922: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20923: LD_VAR 0 1
20927: PPUSH
20928: CALL_OW 247
20932: PUSH
20933: LD_INT 1
20935: EQUAL
20936: IFFALSE 20986
// begin for i in defenders_list do
20938: LD_ADDR_VAR 0 2
20942: PUSH
20943: LD_EXP 32
20947: PUSH
20948: FOR_IN
20949: IFFALSE 20984
// if i = unit then
20951: LD_VAR 0 2
20955: PUSH
20956: LD_VAR 0 1
20960: EQUAL
20961: IFFALSE 20982
// defenders_list = defenders_list diff [ unit ] ;
20963: LD_ADDR_EXP 32
20967: PUSH
20968: LD_EXP 32
20972: PUSH
20973: LD_VAR 0 1
20977: PUSH
20978: EMPTY
20979: LIST
20980: DIFF
20981: ST_TO_ADDR
20982: GO 20948
20984: POP
20985: POP
// end ; end ; end ; end_of_file
20986: PPOPN 2
20988: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20989: GO 20991
20991: DISABLE
20992: LD_INT 0
20994: PPUSH
// begin enemyWayX = [ ] ;
20995: LD_ADDR_EXP 45
20999: PUSH
21000: EMPTY
21001: ST_TO_ADDR
// enemyWayY = [ ] ;
21002: LD_ADDR_EXP 46
21006: PUSH
21007: EMPTY
21008: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
21009: LD_ADDR_VAR 0 1
21013: PUSH
21014: LD_INT 1
21016: PPUSH
21017: LD_INT 3
21019: PPUSH
21020: CALL_OW 12
21024: ST_TO_ADDR
// if rnd = 1 then
21025: LD_VAR 0 1
21029: PUSH
21030: LD_INT 1
21032: EQUAL
21033: IFFALSE 21073
// begin enemyWayX = [ 73 , 46 , 29 ] ;
21035: LD_ADDR_EXP 45
21039: PUSH
21040: LD_INT 73
21042: PUSH
21043: LD_INT 46
21045: PUSH
21046: LD_INT 29
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: LIST
21053: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21054: LD_ADDR_EXP 46
21058: PUSH
21059: LD_INT 71
21061: PUSH
21062: LD_INT 43
21064: PUSH
21065: LD_INT 29
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: ST_TO_ADDR
// end ; if rnd = 2 then
21073: LD_VAR 0 1
21077: PUSH
21078: LD_INT 2
21080: EQUAL
21081: IFFALSE 21105
// begin enemyWayX = [ 64 ] ;
21083: LD_ADDR_EXP 45
21087: PUSH
21088: LD_INT 64
21090: PUSH
21091: EMPTY
21092: LIST
21093: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21094: LD_ADDR_EXP 46
21098: PUSH
21099: LD_INT 43
21101: PUSH
21102: EMPTY
21103: LIST
21104: ST_TO_ADDR
// end ; if rnd = 3 then
21105: LD_VAR 0 1
21109: PUSH
21110: LD_INT 3
21112: EQUAL
21113: IFFALSE 21137
// begin enemyWayX = [ 80 ] ;
21115: LD_ADDR_EXP 45
21119: PUSH
21120: LD_INT 80
21122: PUSH
21123: EMPTY
21124: LIST
21125: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21126: LD_ADDR_EXP 46
21130: PUSH
21131: LD_INT 28
21133: PUSH
21134: EMPTY
21135: LIST
21136: ST_TO_ADDR
// end ; enable ;
21137: ENABLE
// end ;
21138: PPOPN 1
21140: END
// every 0 0$1 do
21141: GO 21143
21143: DISABLE
// begin enable ;
21144: ENABLE
// if escapeAvalaible = 0 then
21145: LD_EXP 36
21149: PUSH
21150: LD_INT 0
21152: EQUAL
21153: IFFALSE 21165
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21155: LD_INT 3
21157: PPUSH
21158: LD_INT 6
21160: PPUSH
21161: CALL 7861 0 2
// if escapeAvalaible = 0 then
21165: LD_EXP 36
21169: PUSH
21170: LD_INT 0
21172: EQUAL
21173: IFFALSE 21185
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21175: LD_INT 1
21177: PPUSH
21178: LD_INT 24
21180: PPUSH
21181: CALL 8655 0 2
// if russianAI = 1 then
21185: LD_EXP 27
21189: PUSH
21190: LD_INT 1
21192: EQUAL
21193: IFFALSE 21263
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21195: LD_INT 3
21197: PPUSH
21198: LD_INT 7
21200: PPUSH
21201: LD_INT 6
21203: PPUSH
21204: LD_EXP 29
21208: PPUSH
21209: CALL 10729 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21213: LD_INT 3
21215: PPUSH
21216: LD_EXP 28
21220: PPUSH
21221: LD_INT 6
21223: PPUSH
21224: LD_EXP 31
21228: PPUSH
21229: CALL 10338 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21233: LD_INT 3
21235: PPUSH
21236: LD_INT 26
21238: PPUSH
21239: LD_EXP 45
21243: PPUSH
21244: LD_EXP 46
21248: PPUSH
21249: CALL 9206 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21253: LD_INT 3
21255: PPUSH
21256: LD_INT 1
21258: PPUSH
21259: CALL 11273 0 2
// end ; if SikorskyArrive = 1 then
21263: LD_EXP 18
21267: PUSH
21268: LD_INT 1
21270: EQUAL
21271: IFFALSE 21289
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21273: LD_INT 3
21275: PPUSH
21276: LD_INT 10
21278: PPUSH
21279: LD_INT 53
21281: PPUSH
21282: LD_INT 59
21284: PPUSH
21285: CALL 9003 0 4
// end ;
21289: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21290: LD_EXP 27
21294: PUSH
21295: LD_INT 1
21297: EQUAL
21298: IFFALSE 21574
21300: GO 21302
21302: DISABLE
21303: LD_INT 0
21305: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21306: LD_ADDR_VAR 0 1
21310: PUSH
21311: LD_INT 22
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 21
21323: PUSH
21324: LD_INT 3
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 30
21333: PUSH
21334: LD_INT 32
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 35
21349: PUSH
21350: LD_INT 43
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 35
21359: PUSH
21360: LD_INT 44
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 35
21369: PUSH
21370: LD_INT 46
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: PPUSH
21393: CALL_OW 69
21397: PUSH
21398: FOR_IN
21399: IFFALSE 21438
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21401: LD_VAR 0 1
21405: PPUSH
21406: LD_INT 43
21408: PUSH
21409: LD_INT 44
21411: PUSH
21412: LD_INT 46
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: PPUSH
21423: LD_INT 3
21425: PPUSH
21426: CALL_OW 12
21430: ARRAY
21431: PPUSH
21432: CALL_OW 431
21436: GO 21398
21438: POP
21439: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21440: LD_ADDR_VAR 0 1
21444: PUSH
21445: LD_INT 22
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 21
21457: PUSH
21458: LD_INT 3
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 30
21467: PUSH
21468: LD_INT 33
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 3
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: LD_INT 35
21483: PUSH
21484: LD_INT 43
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 35
21493: PUSH
21494: LD_INT 44
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 35
21503: PUSH
21504: LD_INT 46
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL_OW 69
21531: PUSH
21532: FOR_IN
21533: IFFALSE 21572
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21535: LD_VAR 0 1
21539: PPUSH
21540: LD_INT 43
21542: PUSH
21543: LD_INT 44
21545: PUSH
21546: LD_INT 46
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: PPUSH
21557: LD_INT 3
21559: PPUSH
21560: CALL_OW 12
21564: ARRAY
21565: PPUSH
21566: CALL_OW 431
21570: GO 21532
21572: POP
21573: POP
// end ;
21574: PPOPN 1
21576: END
// every 0 0$1 trigger SikorskyAI = 1 do
21577: LD_EXP 20
21581: PUSH
21582: LD_INT 1
21584: EQUAL
21585: IFFALSE 21620
21587: GO 21589
21589: DISABLE
// begin enable ;
21590: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21591: LD_INT 4
21593: PPUSH
21594: LD_INT 10
21596: PPUSH
21597: LD_INT 93
21599: PPUSH
21600: LD_INT 93
21602: PPUSH
21603: CALL 9003 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21607: LD_INT 4
21609: PPUSH
21610: LD_INT 11
21612: PPUSH
21613: LD_INT 3
21615: PPUSH
21616: CALL 15485 0 3
// end ;
21620: END
// every 0 0$1 trigger SikorskyAI = 1 do
21621: LD_EXP 20
21625: PUSH
21626: LD_INT 1
21628: EQUAL
21629: IFFALSE 21641
21631: GO 21633
21633: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21634: LD_INT 4
21636: PPUSH
21637: CALL 10010 0 1
21641: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21642: LD_EXP 27
21646: PUSH
21647: LD_INT 1
21649: EQUAL
21650: PUSH
21651: LD_EXP 30
21655: PPUSH
21656: CALL_OW 302
21660: AND
21661: PUSH
21662: LD_EXP 30
21666: PPUSH
21667: CALL_OW 255
21671: PUSH
21672: LD_INT 3
21674: EQUAL
21675: AND
21676: PUSH
21677: LD_INT 22
21679: PUSH
21680: LD_INT 3
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 21
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 33
21699: PUSH
21700: LD_INT 3
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: PPUSH
21712: CALL_OW 69
21716: PUSH
21717: LD_INT 0
21719: EQUAL
21720: AND
21721: IFFALSE 21955
21723: GO 21725
21725: DISABLE
// begin enable ;
21726: ENABLE
// if Difficulty = 1 then
21727: LD_OWVAR 67
21731: PUSH
21732: LD_INT 1
21734: EQUAL
21735: IFFALSE 21803
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21737: LD_INT 3
21739: PPUSH
21740: LD_EXP 30
21744: PPUSH
21745: LD_INT 5
21747: PPUSH
21748: LD_INT 8
21750: PPUSH
21751: CALL_OW 12
21755: PPUSH
21756: LD_INT 43
21758: PUSH
21759: LD_INT 43
21761: PUSH
21762: LD_INT 43
21764: PUSH
21765: LD_INT 43
21767: PUSH
21768: LD_INT 44
21770: PUSH
21771: LD_INT 44
21773: PUSH
21774: LD_INT 44
21776: PUSH
21777: LD_INT 46
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: PPUSH
21790: LD_INT 1
21792: PPUSH
21793: LD_INT 3
21795: PPUSH
21796: LD_INT 24
21798: PPUSH
21799: CALL 8849 0 7
// if Difficulty = 2 then
21803: LD_OWVAR 67
21807: PUSH
21808: LD_INT 2
21810: EQUAL
21811: IFFALSE 21879
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
21813: LD_INT 3
21815: PPUSH
21816: LD_EXP 30
21820: PPUSH
21821: LD_INT 6
21823: PPUSH
21824: LD_INT 8
21826: PPUSH
21827: CALL_OW 12
21831: PPUSH
21832: LD_INT 43
21834: PUSH
21835: LD_INT 43
21837: PUSH
21838: LD_INT 44
21840: PUSH
21841: LD_INT 44
21843: PUSH
21844: LD_INT 44
21846: PUSH
21847: LD_INT 44
21849: PUSH
21850: LD_INT 46
21852: PUSH
21853: LD_INT 46
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PPUSH
21866: LD_INT 1
21868: PPUSH
21869: LD_INT 3
21871: PPUSH
21872: LD_INT 24
21874: PPUSH
21875: CALL 8849 0 7
// if Difficulty = 3 then
21879: LD_OWVAR 67
21883: PUSH
21884: LD_INT 3
21886: EQUAL
21887: IFFALSE 21955
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
21889: LD_INT 3
21891: PPUSH
21892: LD_EXP 30
21896: PPUSH
21897: LD_INT 7
21899: PPUSH
21900: LD_INT 8
21902: PPUSH
21903: CALL_OW 12
21907: PPUSH
21908: LD_INT 43
21910: PUSH
21911: LD_INT 43
21913: PUSH
21914: LD_INT 44
21916: PUSH
21917: LD_INT 44
21919: PUSH
21920: LD_INT 44
21922: PUSH
21923: LD_INT 46
21925: PUSH
21926: LD_INT 46
21928: PUSH
21929: LD_INT 46
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: PPUSH
21942: LD_INT 1
21944: PPUSH
21945: LD_INT 3
21947: PPUSH
21948: LD_INT 24
21950: PPUSH
21951: CALL 8849 0 7
// end ;
21955: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
21956: LD_EXP 38
21960: PUSH
21961: LD_INT 1
21963: EQUAL
21964: IFFALSE 22046
21966: GO 21968
21968: DISABLE
21969: LD_INT 0
21971: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
21972: LD_ADDR_VAR 0 1
21976: PUSH
21977: LD_INT 22
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 21
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 3
21999: PUSH
22000: LD_INT 24
22002: PUSH
22003: LD_INT 650
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: PPUSH
22019: CALL_OW 69
22023: PUSH
22024: FOR_IN
22025: IFFALSE 22044
// ComMoveXY ( i , 51 , 12 ) ;
22027: LD_VAR 0 1
22031: PPUSH
22032: LD_INT 51
22034: PPUSH
22035: LD_INT 12
22037: PPUSH
22038: CALL_OW 111
22042: GO 22024
22044: POP
22045: POP
// end ; end_of_file
22046: PPOPN 1
22048: END
// every 3 3$20 trigger firstAttack = 1 do
22049: LD_EXP 33
22053: PUSH
22054: LD_INT 1
22056: EQUAL
22057: IFFALSE 22163
22059: GO 22061
22061: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22062: LD_INT 6
22064: PPUSH
22065: LD_INT 3
22067: PPUSH
22068: LD_INT 5
22070: PPUSH
22071: LD_INT 6
22073: PPUSH
22074: CALL_OW 12
22078: PUSH
22079: LD_INT 5
22081: PPUSH
22082: LD_INT 6
22084: PPUSH
22085: CALL_OW 12
22089: PUSH
22090: LD_INT 5
22092: PPUSH
22093: LD_INT 6
22095: PPUSH
22096: CALL_OW 12
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: LIST
22105: PUSH
22106: LD_OWVAR 67
22110: ARRAY
22111: PPUSH
22112: LD_INT 0
22114: PPUSH
22115: LD_INT 0
22117: PPUSH
22118: LD_INT 0
22120: PPUSH
22121: LD_INT 0
22123: PPUSH
22124: LD_EXP 25
22128: PPUSH
22129: LD_EXP 26
22133: PPUSH
22134: CALL_OW 12
22138: PPUSH
22139: LD_INT 16
22141: PPUSH
22142: LD_INT 7
22144: PPUSH
22145: LD_INT 1
22147: PPUSH
22148: LD_INT 1
22150: PPUSH
22151: LD_INT 3
22153: PPUSH
22154: CALL_OW 12
22158: PPUSH
22159: CALL 11503 0 12
22163: END
// every 3 3$40 trigger firstAttack = 1 do
22164: LD_EXP 33
22168: PUSH
22169: LD_INT 1
22171: EQUAL
22172: IFFALSE 22264
22174: GO 22176
22176: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22177: LD_INT 16
22179: PPUSH
22180: LD_INT 6
22182: PPUSH
22183: LD_INT 3
22185: PPUSH
22186: LD_INT 4
22188: PPUSH
22189: CALL_OW 12
22193: PUSH
22194: LD_INT 4
22196: PPUSH
22197: LD_INT 5
22199: PPUSH
22200: CALL_OW 12
22204: PUSH
22205: LD_INT 5
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: LD_OWVAR 67
22217: ARRAY
22218: PPUSH
22219: LD_EXP 25
22223: PPUSH
22224: LD_EXP 26
22228: PPUSH
22229: CALL_OW 12
22233: PPUSH
22234: LD_INT 3
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: LD_INT 3
22242: PPUSH
22243: LD_INT 44
22245: PUSH
22246: LD_INT 46
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PPUSH
22253: EMPTY
22254: PPUSH
22255: EMPTY
22256: PPUSH
22257: LD_INT 1
22259: PPUSH
22260: CALL 13796 0 11
22264: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22265: LD_EXP 33
22269: PUSH
22270: LD_INT 1
22272: EQUAL
22273: PUSH
22274: LD_EXP 39
22278: PUSH
22279: LD_INT 0
22281: EQUAL
22282: AND
22283: IFFALSE 22389
22285: GO 22287
22287: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22288: LD_INT 6
22290: PPUSH
22291: LD_INT 3
22293: PPUSH
22294: LD_INT 5
22296: PPUSH
22297: LD_INT 6
22299: PPUSH
22300: CALL_OW 12
22304: PUSH
22305: LD_INT 5
22307: PPUSH
22308: LD_INT 6
22310: PPUSH
22311: CALL_OW 12
22315: PUSH
22316: LD_INT 5
22318: PPUSH
22319: LD_INT 6
22321: PPUSH
22322: CALL_OW 12
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_OWVAR 67
22336: ARRAY
22337: PPUSH
22338: LD_INT 0
22340: PPUSH
22341: LD_INT 0
22343: PPUSH
22344: LD_INT 0
22346: PPUSH
22347: LD_INT 0
22349: PPUSH
22350: LD_EXP 25
22354: PPUSH
22355: LD_EXP 26
22359: PPUSH
22360: CALL_OW 12
22364: PPUSH
22365: LD_INT 16
22367: PPUSH
22368: LD_INT 7
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: LD_INT 1
22376: PPUSH
22377: LD_INT 3
22379: PPUSH
22380: CALL_OW 12
22384: PPUSH
22385: CALL 11503 0 12
22389: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22390: LD_EXP 33
22394: PUSH
22395: LD_INT 1
22397: EQUAL
22398: PUSH
22399: LD_EXP 39
22403: PUSH
22404: LD_INT 0
22406: EQUAL
22407: AND
22408: IFFALSE 22504
22410: GO 22412
22412: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22413: LD_INT 16
22415: PPUSH
22416: LD_INT 6
22418: PPUSH
22419: LD_INT 5
22421: PPUSH
22422: LD_INT 6
22424: PPUSH
22425: CALL_OW 12
22429: PUSH
22430: LD_INT 6
22432: PPUSH
22433: LD_INT 7
22435: PPUSH
22436: CALL_OW 12
22440: PUSH
22441: LD_INT 7
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: LIST
22448: PUSH
22449: LD_OWVAR 67
22453: ARRAY
22454: PPUSH
22455: LD_EXP 25
22459: PPUSH
22460: LD_EXP 26
22464: PPUSH
22465: CALL_OW 12
22469: PPUSH
22470: LD_INT 3
22472: PPUSH
22473: LD_INT 1
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: LD_INT 43
22481: PUSH
22482: LD_INT 44
22484: PUSH
22485: LD_INT 46
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: PPUSH
22493: EMPTY
22494: PPUSH
22495: EMPTY
22496: PPUSH
22497: LD_INT 1
22499: PPUSH
22500: CALL 13796 0 11
22504: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22505: LD_EXP 33
22509: PUSH
22510: LD_INT 1
22512: EQUAL
22513: PUSH
22514: LD_EXP 39
22518: PUSH
22519: LD_INT 0
22521: EQUAL
22522: AND
22523: IFFALSE 22599
22525: GO 22527
22527: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22528: LD_INT 16
22530: PPUSH
22531: LD_INT 6
22533: PPUSH
22534: LD_INT 5
22536: PUSH
22537: LD_INT 6
22539: PUSH
22540: LD_INT 7
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: PUSH
22548: LD_OWVAR 67
22552: ARRAY
22553: PPUSH
22554: LD_EXP 25
22558: PPUSH
22559: LD_EXP 26
22563: PPUSH
22564: CALL_OW 12
22568: PPUSH
22569: LD_INT 3
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: LD_INT 3
22577: PPUSH
22578: LD_INT 44
22580: PUSH
22581: LD_INT 46
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PPUSH
22588: EMPTY
22589: PPUSH
22590: EMPTY
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: CALL 13796 0 11
22599: END
// every 1 1$00 trigger secondAttack = 1 do
22600: LD_EXP 34
22604: PUSH
22605: LD_INT 1
22607: EQUAL
22608: IFFALSE 22714
22610: GO 22612
22612: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22613: LD_INT 6
22615: PPUSH
22616: LD_INT 3
22618: PPUSH
22619: LD_INT 4
22621: PPUSH
22622: LD_INT 7
22624: PPUSH
22625: CALL_OW 12
22629: PUSH
22630: LD_INT 6
22632: PPUSH
22633: LD_INT 7
22635: PPUSH
22636: CALL_OW 12
22640: PUSH
22641: LD_INT 6
22643: PPUSH
22644: LD_INT 10
22646: PPUSH
22647: CALL_OW 12
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PUSH
22657: LD_OWVAR 67
22661: ARRAY
22662: PPUSH
22663: LD_INT 0
22665: PPUSH
22666: LD_INT 0
22668: PPUSH
22669: LD_INT 0
22671: PPUSH
22672: LD_INT 0
22674: PPUSH
22675: LD_EXP 25
22679: PPUSH
22680: LD_EXP 26
22684: PPUSH
22685: CALL_OW 12
22689: PPUSH
22690: LD_INT 16
22692: PPUSH
22693: LD_INT 7
22695: PPUSH
22696: LD_INT 1
22698: PPUSH
22699: LD_INT 1
22701: PPUSH
22702: LD_INT 3
22704: PPUSH
22705: CALL_OW 12
22709: PPUSH
22710: CALL 11503 0 12
22714: END
// every 1 1$00 trigger secondAttack = 1 do
22715: LD_EXP 34
22719: PUSH
22720: LD_INT 1
22722: EQUAL
22723: IFFALSE 22827
22725: GO 22727
22727: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22728: LD_INT 16
22730: PPUSH
22731: LD_INT 6
22733: PPUSH
22734: LD_INT 5
22736: PPUSH
22737: LD_INT 8
22739: PPUSH
22740: CALL_OW 12
22744: PUSH
22745: LD_INT 6
22747: PPUSH
22748: LD_INT 9
22750: PPUSH
22751: CALL_OW 12
22755: PUSH
22756: LD_INT 7
22758: PPUSH
22759: LD_INT 9
22761: PPUSH
22762: CALL_OW 12
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: PUSH
22772: LD_OWVAR 67
22776: ARRAY
22777: PPUSH
22778: LD_EXP 25
22782: PPUSH
22783: LD_EXP 26
22787: PPUSH
22788: CALL_OW 12
22792: PPUSH
22793: LD_INT 3
22795: PPUSH
22796: LD_INT 1
22798: PPUSH
22799: LD_INT 3
22801: PPUSH
22802: LD_INT 43
22804: PUSH
22805: LD_INT 44
22807: PUSH
22808: LD_INT 46
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: PPUSH
22816: EMPTY
22817: PPUSH
22818: EMPTY
22819: PPUSH
22820: LD_INT 1
22822: PPUSH
22823: CALL 13796 0 11
22827: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22828: LD_EXP 18
22832: PUSH
22833: LD_INT 0
22835: EQUAL
22836: IFFALSE 22942
22838: GO 22840
22840: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22841: LD_INT 6
22843: PPUSH
22844: LD_INT 3
22846: PPUSH
22847: LD_INT 8
22849: PPUSH
22850: LD_INT 9
22852: PPUSH
22853: CALL_OW 12
22857: PUSH
22858: LD_INT 7
22860: PPUSH
22861: LD_INT 10
22863: PPUSH
22864: CALL_OW 12
22868: PUSH
22869: LD_INT 8
22871: PPUSH
22872: LD_INT 10
22874: PPUSH
22875: CALL_OW 12
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: PUSH
22885: LD_OWVAR 67
22889: ARRAY
22890: PPUSH
22891: LD_INT 0
22893: PPUSH
22894: LD_INT 0
22896: PPUSH
22897: LD_INT 0
22899: PPUSH
22900: LD_INT 0
22902: PPUSH
22903: LD_EXP 25
22907: PPUSH
22908: LD_EXP 26
22912: PPUSH
22913: CALL_OW 12
22917: PPUSH
22918: LD_INT 16
22920: PPUSH
22921: LD_INT 7
22923: PPUSH
22924: LD_INT 1
22926: PPUSH
22927: LD_INT 1
22929: PPUSH
22930: LD_INT 3
22932: PPUSH
22933: CALL_OW 12
22937: PPUSH
22938: CALL 11503 0 12
22942: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22943: LD_EXP 18
22947: PUSH
22948: LD_INT 0
22950: EQUAL
22951: IFFALSE 23051
22953: GO 22955
22955: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22956: LD_INT 16
22958: PPUSH
22959: LD_INT 6
22961: PPUSH
22962: LD_INT 5
22964: PPUSH
22965: LD_INT 8
22967: PPUSH
22968: CALL_OW 12
22972: PUSH
22973: LD_INT 6
22975: PPUSH
22976: LD_INT 9
22978: PPUSH
22979: CALL_OW 12
22983: PUSH
22984: LD_INT 7
22986: PPUSH
22987: LD_INT 9
22989: PPUSH
22990: CALL_OW 12
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: PUSH
23000: LD_OWVAR 67
23004: ARRAY
23005: PPUSH
23006: LD_EXP 25
23010: PPUSH
23011: LD_EXP 26
23015: PPUSH
23016: CALL_OW 12
23020: PPUSH
23021: LD_INT 3
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: LD_INT 3
23029: PPUSH
23030: LD_INT 44
23032: PUSH
23033: LD_INT 46
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PPUSH
23040: EMPTY
23041: PPUSH
23042: EMPTY
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: CALL 13796 0 11
23051: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23052: LD_EXP 18
23056: PUSH
23057: LD_INT 0
23059: EQUAL
23060: IFFALSE 23166
23062: GO 23064
23064: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23065: LD_INT 6
23067: PPUSH
23068: LD_INT 3
23070: PPUSH
23071: LD_INT 8
23073: PPUSH
23074: LD_INT 9
23076: PPUSH
23077: CALL_OW 12
23081: PUSH
23082: LD_INT 7
23084: PPUSH
23085: LD_INT 10
23087: PPUSH
23088: CALL_OW 12
23092: PUSH
23093: LD_INT 8
23095: PPUSH
23096: LD_INT 10
23098: PPUSH
23099: CALL_OW 12
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: PUSH
23109: LD_OWVAR 67
23113: ARRAY
23114: PPUSH
23115: LD_INT 0
23117: PPUSH
23118: LD_INT 0
23120: PPUSH
23121: LD_INT 0
23123: PPUSH
23124: LD_INT 0
23126: PPUSH
23127: LD_EXP 25
23131: PPUSH
23132: LD_EXP 26
23136: PPUSH
23137: CALL_OW 12
23141: PPUSH
23142: LD_INT 16
23144: PPUSH
23145: LD_INT 7
23147: PPUSH
23148: LD_INT 1
23150: PPUSH
23151: LD_INT 1
23153: PPUSH
23154: LD_INT 3
23156: PPUSH
23157: CALL_OW 12
23161: PPUSH
23162: CALL 11503 0 12
23166: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23167: LD_EXP 18
23171: PUSH
23172: LD_INT 0
23174: EQUAL
23175: IFFALSE 23275
23177: GO 23179
23179: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23180: LD_INT 16
23182: PPUSH
23183: LD_INT 6
23185: PPUSH
23186: LD_INT 5
23188: PPUSH
23189: LD_INT 8
23191: PPUSH
23192: CALL_OW 12
23196: PUSH
23197: LD_INT 6
23199: PPUSH
23200: LD_INT 9
23202: PPUSH
23203: CALL_OW 12
23207: PUSH
23208: LD_INT 7
23210: PPUSH
23211: LD_INT 9
23213: PPUSH
23214: CALL_OW 12
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: LD_OWVAR 67
23228: ARRAY
23229: PPUSH
23230: LD_EXP 25
23234: PPUSH
23235: LD_EXP 26
23239: PPUSH
23240: CALL_OW 12
23244: PPUSH
23245: LD_INT 3
23247: PPUSH
23248: LD_INT 1
23250: PPUSH
23251: LD_INT 3
23253: PPUSH
23254: LD_INT 44
23256: PUSH
23257: LD_INT 46
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PPUSH
23264: EMPTY
23265: PPUSH
23266: EMPTY
23267: PPUSH
23268: LD_INT 1
23270: PPUSH
23271: CALL 13796 0 11
23275: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23276: LD_EXP 18
23280: PUSH
23281: LD_INT 0
23283: EQUAL
23284: IFFALSE 23390
23286: GO 23288
23288: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23289: LD_INT 6
23291: PPUSH
23292: LD_INT 3
23294: PPUSH
23295: LD_INT 8
23297: PPUSH
23298: LD_INT 9
23300: PPUSH
23301: CALL_OW 12
23305: PUSH
23306: LD_INT 7
23308: PPUSH
23309: LD_INT 10
23311: PPUSH
23312: CALL_OW 12
23316: PUSH
23317: LD_INT 8
23319: PPUSH
23320: LD_INT 10
23322: PPUSH
23323: CALL_OW 12
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: PUSH
23333: LD_OWVAR 67
23337: ARRAY
23338: PPUSH
23339: LD_INT 0
23341: PPUSH
23342: LD_INT 0
23344: PPUSH
23345: LD_INT 0
23347: PPUSH
23348: LD_INT 0
23350: PPUSH
23351: LD_EXP 25
23355: PPUSH
23356: LD_EXP 26
23360: PPUSH
23361: CALL_OW 12
23365: PPUSH
23366: LD_INT 16
23368: PPUSH
23369: LD_INT 7
23371: PPUSH
23372: LD_INT 1
23374: PPUSH
23375: LD_INT 1
23377: PPUSH
23378: LD_INT 3
23380: PPUSH
23381: CALL_OW 12
23385: PPUSH
23386: CALL 11503 0 12
23390: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23391: LD_EXP 18
23395: PUSH
23396: LD_INT 0
23398: EQUAL
23399: IFFALSE 23499
23401: GO 23403
23403: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23404: LD_INT 16
23406: PPUSH
23407: LD_INT 6
23409: PPUSH
23410: LD_INT 5
23412: PPUSH
23413: LD_INT 8
23415: PPUSH
23416: CALL_OW 12
23420: PUSH
23421: LD_INT 6
23423: PPUSH
23424: LD_INT 9
23426: PPUSH
23427: CALL_OW 12
23431: PUSH
23432: LD_INT 7
23434: PPUSH
23435: LD_INT 9
23437: PPUSH
23438: CALL_OW 12
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: LIST
23447: PUSH
23448: LD_OWVAR 67
23452: ARRAY
23453: PPUSH
23454: LD_EXP 25
23458: PPUSH
23459: LD_EXP 26
23463: PPUSH
23464: CALL_OW 12
23468: PPUSH
23469: LD_INT 3
23471: PPUSH
23472: LD_INT 1
23474: PPUSH
23475: LD_INT 3
23477: PPUSH
23478: LD_INT 44
23480: PUSH
23481: LD_INT 46
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PPUSH
23488: EMPTY
23489: PPUSH
23490: EMPTY
23491: PPUSH
23492: LD_INT 1
23494: PPUSH
23495: CALL 13796 0 11
23499: END
// every 0 0$1 trigger timerStatus = 1 do
23500: LD_EXP 35
23504: PUSH
23505: LD_INT 1
23507: EQUAL
23508: IFFALSE 23545
23510: GO 23512
23512: DISABLE
// begin enable ;
23513: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23514: LD_ADDR_OWVAR 47
23518: PUSH
23519: LD_STRING #Am08-1
23521: PUSH
23522: LD_EXP 19
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23531: LD_ADDR_EXP 19
23535: PUSH
23536: LD_EXP 19
23540: PUSH
23541: LD_INT 35
23543: MINUS
23544: ST_TO_ADDR
// end ; end_of_file
23545: END
// every 1 1$0 do
23546: GO 23548
23548: DISABLE
// begin if supply <= 13 and supply > 7 then
23549: LD_EXP 40
23553: PUSH
23554: LD_INT 13
23556: LESSEQUAL
23557: PUSH
23558: LD_EXP 40
23562: PUSH
23563: LD_INT 7
23565: GREATER
23566: AND
23567: IFFALSE 23590
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23569: LD_INT 3
23571: PPUSH
23572: LD_INT 5
23574: PPUSH
23575: CALL_OW 12
23579: PPUSH
23580: LD_INT 5
23582: PPUSH
23583: LD_INT 1
23585: PPUSH
23586: CALL_OW 55
// if supply <= 7 and supply > 4 then
23590: LD_EXP 40
23594: PUSH
23595: LD_INT 7
23597: LESSEQUAL
23598: PUSH
23599: LD_EXP 40
23603: PUSH
23604: LD_INT 4
23606: GREATER
23607: AND
23608: IFFALSE 23631
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23610: LD_INT 3
23612: PPUSH
23613: LD_INT 5
23615: PPUSH
23616: CALL_OW 12
23620: PPUSH
23621: LD_INT 20
23623: PPUSH
23624: LD_INT 1
23626: PPUSH
23627: CALL_OW 55
// if supply <= 4 and supply > 0 then
23631: LD_EXP 40
23635: PUSH
23636: LD_INT 4
23638: LESSEQUAL
23639: PUSH
23640: LD_EXP 40
23644: PUSH
23645: LD_INT 0
23647: GREATER
23648: AND
23649: IFFALSE 23672
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23651: LD_INT 3
23653: PPUSH
23654: LD_INT 5
23656: PPUSH
23657: CALL_OW 12
23661: PPUSH
23662: LD_INT 21
23664: PPUSH
23665: LD_INT 1
23667: PPUSH
23668: CALL_OW 55
// if supply > 0 then
23672: LD_EXP 40
23676: PUSH
23677: LD_INT 0
23679: GREATER
23680: IFFALSE 23697
// begin supply = supply - 1 ;
23682: LD_ADDR_EXP 40
23686: PUSH
23687: LD_EXP 40
23691: PUSH
23692: LD_INT 1
23694: MINUS
23695: ST_TO_ADDR
// enable ;
23696: ENABLE
// end ; end ; end_of_file
23697: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23698: LD_EXP 39
23702: PUSH
23703: LD_INT 1
23705: EQUAL
23706: PUSH
23707: LD_EXP 1
23711: PPUSH
23712: CALL_OW 301
23716: AND
23717: IFFALSE 23729
23719: GO 23721
23721: DISABLE
// YouLost ( JMM ) ;
23722: LD_STRING JMM
23724: PPUSH
23725: CALL_OW 104
23729: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23730: LD_EXP 18
23734: PUSH
23735: LD_INT 1
23737: EQUAL
23738: PUSH
23739: LD_EXP 16
23743: PPUSH
23744: CALL_OW 301
23748: AND
23749: IFFALSE 23781
23751: GO 23753
23753: DISABLE
// begin DialogueOn ;
23754: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23758: LD_EXP 23
23762: PPUSH
23763: LD_STRING D8a-Pow-1
23765: PPUSH
23766: CALL_OW 94
// DialogueOff ;
23770: CALL_OW 7
// YouLost ( Dismissed ) ;
23774: LD_STRING Dismissed
23776: PPUSH
23777: CALL_OW 104
// end ;
23781: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23782: LD_EXP 37
23786: PPUSH
23787: CALL_OW 301
23791: IFFALSE 23803
23793: GO 23795
23795: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23796: LD_STRING Destroyed
23798: PPUSH
23799: CALL_OW 104
23803: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i , p ;
23804: LD_EXP 24
23808: PPUSH
23809: CALL_OW 301
23813: IFFALSE 24261
23815: GO 23817
23817: DISABLE
23818: LD_INT 0
23820: PPUSH
23821: PPUSH
// begin russianAI = 0 ;
23822: LD_ADDR_EXP 27
23826: PUSH
23827: LD_INT 0
23829: ST_TO_ADDR
// escapeAvalaible = 1 ;
23830: LD_ADDR_EXP 36
23834: PUSH
23835: LD_INT 1
23837: ST_TO_ADDR
// InGameOn ;
23838: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23842: LD_INT 3
23844: PPUSH
23845: LD_INT 1
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: LD_INT 0
23853: PPUSH
23854: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23858: LD_INT 6
23860: PPUSH
23861: LD_INT 1
23863: PPUSH
23864: LD_INT 1
23866: PPUSH
23867: LD_INT 0
23869: PPUSH
23870: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
23874: LD_INT 3
23876: PPUSH
23877: LD_INT 1
23879: PPUSH
23880: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
23884: LD_INT 97
23886: PPUSH
23887: LD_INT 91
23889: PPUSH
23890: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23894: LD_INT 22
23896: PUSH
23897: LD_INT 3
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 21
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PPUSH
23918: CALL_OW 69
23922: PPUSH
23923: CALL_OW 121
// wait ( 0 0$01 ) ;
23927: LD_INT 35
23929: PPUSH
23930: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23934: LD_INT 22
23936: PUSH
23937: LD_INT 3
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 21
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PPUSH
23958: CALL_OW 69
23962: PPUSH
23963: LD_INT 124
23965: PPUSH
23966: LD_INT 98
23968: PPUSH
23969: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
23973: LD_INT 22
23975: PUSH
23976: LD_INT 6
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 21
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL_OW 69
24001: PPUSH
24002: CALL_OW 121
// wait ( 0 0$01 ) ;
24006: LD_INT 35
24008: PPUSH
24009: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24013: LD_INT 22
24015: PUSH
24016: LD_INT 6
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 21
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PPUSH
24037: CALL_OW 69
24041: PPUSH
24042: LD_INT 124
24044: PPUSH
24045: LD_INT 98
24047: PPUSH
24048: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
24052: LD_INT 22
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 21
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 3
24074: PUSH
24075: LD_INT 54
24077: PUSH
24078: EMPTY
24079: LIST
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: LIST
24089: PPUSH
24090: CALL_OW 69
24094: PPUSH
24095: LD_INT 124
24097: PPUSH
24098: LD_INT 98
24100: PPUSH
24101: CALL_OW 114
// wait ( 0 0$4 ) ;
24105: LD_INT 140
24107: PPUSH
24108: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24112: LD_INT 124
24114: PPUSH
24115: LD_INT 98
24117: PPUSH
24118: CALL_OW 84
// if SikorskyStatus = 1 then
24122: LD_EXP 21
24126: PUSH
24127: LD_INT 1
24129: EQUAL
24130: IFFALSE 24144
// begin Say ( Sikorski , D9-Sik-1 ) ;
24132: LD_EXP 16
24136: PPUSH
24137: LD_STRING D9-Sik-1
24139: PPUSH
24140: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24144: LD_EXP 21
24148: PUSH
24149: LD_INT 2
24151: EQUAL
24152: IFFALSE 24173
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24154: LD_EXP 23
24158: PPUSH
24159: LD_STRING D8b-Pow-1
24161: PPUSH
24162: CALL_OW 94
// YouLost ( Dismissed ) ;
24166: LD_STRING Dismissed
24168: PPUSH
24169: CALL_OW 104
// end ; p := 0 0$0 ;
24173: LD_ADDR_VAR 0 2
24177: PUSH
24178: LD_INT 0
24180: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24181: LD_INT 35
24183: PPUSH
24184: CALL_OW 67
// p := p + 0 0$1 ;
24188: LD_ADDR_VAR 0 2
24192: PUSH
24193: LD_VAR 0 2
24197: PUSH
24198: LD_INT 35
24200: PLUS
24201: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
24202: LD_INT 23
24204: PUSH
24205: LD_INT 3
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 21
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 24
24224: PUSH
24225: LD_INT 250
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: PPUSH
24237: CALL_OW 69
24241: PUSH
24242: LD_INT 0
24244: EQUAL
24245: PUSH
24246: LD_VAR 0 2
24250: PUSH
24251: LD_INT 245
24253: GREATEREQUAL
24254: OR
24255: IFFALSE 24181
// FinishMission ;
24257: CALL 24264 0 0
// end ;
24261: PPOPN 2
24263: END
// export function FinishMission ; var tmp ; begin
24264: LD_INT 0
24266: PPUSH
24267: PPUSH
// AddMedal ( med1 , 1 ) ;
24268: LD_STRING med1
24270: PPUSH
24271: LD_INT 1
24273: PPUSH
24274: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24278: LD_STRING med2
24280: PPUSH
24281: LD_INT 1
24283: PPUSH
24284: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24288: LD_STRING perfect
24290: PPUSH
24291: LD_INT 1
24293: PPUSH
24294: CALL_OW 101
// GiveMedals ( Main ) ;
24298: LD_STRING Main
24300: PPUSH
24301: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24305: LD_INT 22
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 23
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 21
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: LD_INT 25
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 25
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 25
24360: PUSH
24361: LD_INT 3
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 25
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: PPUSH
24391: CALL_OW 69
24395: PPUSH
24396: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24400: LD_EXP 1
24404: PPUSH
24405: LD_EXP 42
24409: PUSH
24410: LD_STRING JMM
24412: STR
24413: PPUSH
24414: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24418: LD_EXP 2
24422: PPUSH
24423: LD_EXP 42
24427: PUSH
24428: LD_STRING Brown
24430: STR
24431: PPUSH
24432: CALL 7725 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24436: LD_EXP 3
24440: PPUSH
24441: LD_EXP 42
24445: PUSH
24446: LD_STRING Donaldson
24448: STR
24449: PPUSH
24450: CALL 7725 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24454: LD_EXP 4
24458: PPUSH
24459: LD_EXP 42
24463: PUSH
24464: LD_STRING Bobby
24466: STR
24467: PPUSH
24468: CALL 7725 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24472: LD_EXP 5
24476: PPUSH
24477: LD_EXP 42
24481: PUSH
24482: LD_STRING Cyrus
24484: STR
24485: PPUSH
24486: CALL 7725 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24490: LD_EXP 6
24494: PPUSH
24495: LD_EXP 42
24499: PUSH
24500: LD_STRING Lisa
24502: STR
24503: PPUSH
24504: CALL 7725 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24508: LD_EXP 7
24512: PPUSH
24513: LD_EXP 42
24517: PUSH
24518: LD_STRING Frank
24520: STR
24521: PPUSH
24522: CALL 7725 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24526: LD_EXP 8
24530: PPUSH
24531: LD_EXP 42
24535: PUSH
24536: LD_STRING Gladstone
24538: STR
24539: PPUSH
24540: CALL 7725 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24544: LD_EXP 9
24548: PPUSH
24549: LD_EXP 42
24553: PUSH
24554: LD_STRING Kikuchi
24556: STR
24557: PPUSH
24558: CALL 7725 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24562: LD_EXP 14
24566: PPUSH
24567: LD_EXP 42
24571: PUSH
24572: LD_STRING Denis
24574: STR
24575: PPUSH
24576: CALL 7725 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24580: LD_EXP 15
24584: PPUSH
24585: LD_EXP 42
24589: PUSH
24590: LD_STRING Joan
24592: STR
24593: PPUSH
24594: CALL 7725 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24598: LD_EXP 10
24602: PPUSH
24603: LD_EXP 42
24607: PUSH
24608: LD_STRING Khatam
24610: STR
24611: PPUSH
24612: CALL 7725 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24616: LD_EXP 13
24620: PPUSH
24621: LD_EXP 42
24625: PUSH
24626: LD_STRING Houten
24628: STR
24629: PPUSH
24630: CALL 7725 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24634: LD_INT 50
24636: PUSH
24637: EMPTY
24638: LIST
24639: PUSH
24640: LD_INT 22
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 25
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 25
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 25
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 25
24695: PUSH
24696: LD_INT 4
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: PPUSH
24716: CALL_OW 69
24720: PUSH
24721: LD_EXP 1
24725: PUSH
24726: LD_EXP 2
24730: PUSH
24731: LD_EXP 3
24735: PUSH
24736: LD_EXP 4
24740: PUSH
24741: LD_EXP 5
24745: PUSH
24746: LD_EXP 6
24750: PUSH
24751: LD_EXP 7
24755: PUSH
24756: LD_EXP 8
24760: PUSH
24761: LD_EXP 9
24765: PUSH
24766: LD_EXP 14
24770: PUSH
24771: LD_EXP 15
24775: PUSH
24776: LD_EXP 13
24780: PUSH
24781: LD_EXP 10
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: DIFF
24801: PPUSH
24802: LD_STRING 08_other_survivors
24804: PPUSH
24805: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
24809: LD_INT 23
24811: PPUSH
24812: CALL 24825 0 1
// YouWin ;
24816: CALL_OW 103
// end ;
24820: LD_VAR 0 1
24824: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24825: LD_INT 0
24827: PPUSH
24828: PPUSH
24829: PPUSH
24830: PPUSH
// gammaBase = [ ] ;
24831: LD_ADDR_VAR 0 4
24835: PUSH
24836: EMPTY
24837: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24838: LD_ADDR_VAR 0 5
24842: PUSH
24843: LD_VAR 0 1
24847: PPUSH
24848: LD_INT 22
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 21
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 50
24870: PUSH
24871: EMPTY
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: PPUSH
24879: CALL_OW 70
24883: ST_TO_ADDR
// for i in buildings do
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_VAR 0 5
24893: PUSH
24894: FOR_IN
24895: IFFALSE 25332
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24897: LD_VAR 0 3
24901: PPUSH
24902: CALL_OW 266
24906: PUSH
24907: LD_INT 6
24909: PUSH
24910: LD_INT 7
24912: PUSH
24913: LD_INT 8
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: IN
24921: IFFALSE 25035
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24923: LD_ADDR_VAR 0 4
24927: PUSH
24928: LD_VAR 0 4
24932: PUSH
24933: LD_VAR 0 3
24937: PPUSH
24938: CALL_OW 266
24942: PUSH
24943: LD_VAR 0 3
24947: PPUSH
24948: CALL_OW 250
24952: PUSH
24953: LD_VAR 0 3
24957: PPUSH
24958: CALL_OW 251
24962: PUSH
24963: LD_VAR 0 3
24967: PPUSH
24968: CALL_OW 254
24972: PUSH
24973: LD_VAR 0 3
24977: PPUSH
24978: CALL_OW 267
24982: PUSH
24983: LD_VAR 0 3
24987: PPUSH
24988: CALL_OW 248
24992: PUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: LD_INT 1
25000: PPUSH
25001: CALL_OW 268
25005: PUSH
25006: LD_VAR 0 3
25010: PPUSH
25011: LD_INT 2
25013: PPUSH
25014: CALL_OW 268
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: ADD
25032: ST_TO_ADDR
25033: GO 25330
// if GetBType ( i ) = b_bunker then
25035: LD_VAR 0 3
25039: PPUSH
25040: CALL_OW 266
25044: PUSH
25045: LD_INT 32
25047: EQUAL
25048: IFFALSE 25145
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25050: LD_ADDR_VAR 0 4
25054: PUSH
25055: LD_VAR 0 4
25059: PUSH
25060: LD_VAR 0 3
25064: PPUSH
25065: CALL_OW 266
25069: PUSH
25070: LD_VAR 0 3
25074: PPUSH
25075: CALL_OW 250
25079: PUSH
25080: LD_VAR 0 3
25084: PPUSH
25085: CALL_OW 251
25089: PUSH
25090: LD_VAR 0 3
25094: PPUSH
25095: CALL_OW 254
25099: PUSH
25100: LD_VAR 0 3
25104: PPUSH
25105: CALL_OW 267
25109: PUSH
25110: LD_VAR 0 3
25114: PPUSH
25115: CALL_OW 248
25119: PUSH
25120: LD_VAR 0 3
25124: PPUSH
25125: CALL_OW 269
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: PUSH
25139: EMPTY
25140: LIST
25141: ADD
25142: ST_TO_ADDR
25143: GO 25330
// if GetBType ( i ) = b_factory then
25145: LD_VAR 0 3
25149: PPUSH
25150: CALL_OW 266
25154: PUSH
25155: LD_INT 3
25157: EQUAL
25158: IFFALSE 25248
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25160: LD_ADDR_VAR 0 4
25164: PUSH
25165: LD_VAR 0 4
25169: PPUSH
25170: LD_INT 1
25172: PPUSH
25173: LD_VAR 0 3
25177: PPUSH
25178: CALL_OW 266
25182: PUSH
25183: LD_VAR 0 3
25187: PPUSH
25188: CALL_OW 250
25192: PUSH
25193: LD_VAR 0 3
25197: PPUSH
25198: CALL_OW 251
25202: PUSH
25203: LD_VAR 0 3
25207: PPUSH
25208: CALL_OW 254
25212: PUSH
25213: LD_VAR 0 3
25217: PPUSH
25218: CALL_OW 267
25222: PUSH
25223: LD_VAR 0 3
25227: PPUSH
25228: CALL_OW 248
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: PPUSH
25241: CALL_OW 2
25245: ST_TO_ADDR
25246: GO 25330
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25248: LD_ADDR_VAR 0 4
25252: PUSH
25253: LD_VAR 0 4
25257: PUSH
25258: LD_VAR 0 3
25262: PPUSH
25263: CALL_OW 266
25267: PUSH
25268: LD_VAR 0 3
25272: PPUSH
25273: CALL_OW 250
25277: PUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: CALL_OW 251
25287: PUSH
25288: LD_VAR 0 3
25292: PPUSH
25293: CALL_OW 254
25297: PUSH
25298: LD_VAR 0 3
25302: PPUSH
25303: CALL_OW 267
25307: PUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: CALL_OW 248
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: ADD
25329: ST_TO_ADDR
// end ;
25330: GO 24894
25332: POP
25333: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25334: LD_VAR 0 4
25338: PPUSH
25339: LD_STRING 08_GammaBase
25341: PPUSH
25342: CALL_OW 39
// end ;
25346: LD_VAR 0 2
25350: RET
