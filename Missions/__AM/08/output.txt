// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7202 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2109 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6007 0 0
// PrepareRussians ;
 229: CALL 6325 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8467 0 6
// PrepareCutsceneAttack ;
 312: CALL 6059 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 593
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6743 0 2
 577: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 5
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ; if gammaCommander = 2 then
 593: LD_EXP 12
 597: PUSH
 598: LD_INT 2
 600: EQUAL
 601: IFFALSE 634
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 603: LD_ADDR_EXP 2
 607: PUSH
 608: LD_STRING 04_Brown
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 6743 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 619: LD_EXP 2
 623: PPUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// end ; if gammaCommander = 3 then
 634: LD_EXP 12
 638: PUSH
 639: LD_INT 3
 641: EQUAL
 642: IFFALSE 675
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 644: LD_ADDR_EXP 13
 648: PUSH
 649: LD_STRING VanHouten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6743 0 2
 659: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 660: LD_EXP 13
 664: PPUSH
 665: LD_INT 5
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 675: LD_ADDR_EXP 22
 679: PUSH
 680: LD_STRING Harisson
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL 6743 0 2
 690: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 691: LD_ADDR_EXP 23
 695: PUSH
 696: LD_STRING Powell
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 6743 0 2
 706: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 707: LD_STRING 04_Lisa
 709: PUSH
 710: EMPTY
 711: LIST
 712: PPUSH
 713: CALL_OW 28
 717: PUSH
 718: LD_STRING LisaInDelta
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL_OW 30
 728: NOT
 729: AND
 730: PUSH
 731: LD_STRING 07_Lisa
 733: PUSH
 734: EMPTY
 735: LIST
 736: PPUSH
 737: CALL_OW 28
 741: NOT
 742: AND
 743: IFFALSE 777
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 745: LD_ADDR_EXP 6
 749: PUSH
 750: LD_STRING 04_Lisa
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6743 0 2
 760: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 761: LD_ADDR_VAR 0 15
 765: PUSH
 766: LD_VAR 0 15
 770: PUSH
 771: LD_EXP 6
 775: ADD
 776: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 777: LD_STRING 04_Bobby
 779: PUSH
 780: EMPTY
 781: LIST
 782: PPUSH
 783: CALL_OW 28
 787: PUSH
 788: LD_STRING BobbyInDelta
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 30
 798: NOT
 799: AND
 800: PUSH
 801: LD_STRING 07_Bobby
 803: PUSH
 804: EMPTY
 805: LIST
 806: PPUSH
 807: CALL_OW 28
 811: NOT
 812: AND
 813: IFFALSE 847
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 815: LD_ADDR_EXP 4
 819: PUSH
 820: LD_STRING 04_Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6743 0 2
 830: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 831: LD_ADDR_VAR 0 15
 835: PUSH
 836: LD_VAR 0 15
 840: PUSH
 841: LD_EXP 4
 845: ADD
 846: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 847: LD_STRING 04_Cyrus
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: PUSH
 858: LD_STRING CyrusInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Cyrus
 873: PUSH
 874: EMPTY
 875: LIST
 876: PPUSH
 877: CALL_OW 28
 881: NOT
 882: AND
 883: IFFALSE 917
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 885: LD_ADDR_EXP 5
 889: PUSH
 890: LD_STRING 04_Cyrus
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 6743 0 2
 900: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
 901: LD_ADDR_VAR 0 15
 905: PUSH
 906: LD_VAR 0 15
 910: PUSH
 911: LD_EXP 5
 915: ADD
 916: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
 917: LD_STRING 04_Brown
 919: PUSH
 920: EMPTY
 921: LIST
 922: PPUSH
 923: CALL_OW 28
 927: PUSH
 928: LD_STRING BrownInDelta
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 30
 938: NOT
 939: AND
 940: PUSH
 941: LD_STRING 07_Brown
 943: PUSH
 944: EMPTY
 945: LIST
 946: PPUSH
 947: CALL_OW 28
 951: NOT
 952: AND
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_INT 2
 961: NONEQUAL
 962: AND
 963: IFFALSE 997
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
 965: LD_ADDR_EXP 2
 969: PUSH
 970: LD_STRING 04_Brown
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 6743 0 2
 980: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
 981: LD_ADDR_VAR 0 15
 985: PUSH
 986: LD_VAR 0 15
 990: PUSH
 991: LD_EXP 2
 995: ADD
 996: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
 997: LD_STRING 04_Donaldson
 999: PUSH
1000: EMPTY
1001: LIST
1002: PPUSH
1003: CALL_OW 28
1007: PUSH
1008: LD_STRING DonaldsonInDelta
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 30
1018: NOT
1019: AND
1020: PUSH
1021: LD_STRING 07_Donaldson
1023: PUSH
1024: EMPTY
1025: LIST
1026: PPUSH
1027: CALL_OW 28
1031: NOT
1032: AND
1033: PUSH
1034: LD_EXP 12
1038: PUSH
1039: LD_INT 1
1041: NONEQUAL
1042: AND
1043: IFFALSE 1077
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: LD_STRING 04_Donaldson
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6743 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 3
1075: ADD
1076: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1077: LD_ADDR_EXP 11
1081: PUSH
1082: LD_STRING 07_othersGamma
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1090: LD_ADDR_VAR 0 14
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_EXP 11
1102: MINUS
1103: ST_TO_ADDR
// if tmp then
1104: LD_VAR 0 14
1108: IFFALSE 1161
// for i = 1 to tmp do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_VAR 0 14
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1159
// begin PrepareHuman ( false , 1 , 5 ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_INT 1
1133: PPUSH
1134: LD_INT 5
1136: PPUSH
1137: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: CALL_OW 44
1155: ADD
1156: ST_TO_ADDR
// end ;
1157: GO 1125
1159: POP
1160: POP
// if HexInfo ( 61 , 29 ) = 0 then
1161: LD_INT 61
1163: PPUSH
1164: LD_INT 29
1166: PPUSH
1167: CALL_OW 428
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: IFFALSE 1206
// begin bc_type := b_barracks ;
1177: LD_ADDR_OWVAR 42
1181: PUSH
1182: LD_INT 5
1184: ST_TO_ADDR
// bc_level := 6 ;
1185: LD_ADDR_OWVAR 43
1189: PUSH
1190: LD_INT 6
1192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1193: LD_INT 61
1195: PPUSH
1196: LD_INT 29
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1206: LD_ADDR_VAR 0 13
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 30
1223: PUSH
1224: LD_INT 31
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PPUSH
1235: CALL_OW 69
1239: ST_TO_ADDR
// for i in bun do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_VAR 0 13
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1383
// begin x := GetX ( i ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 250
1267: ST_TO_ADDR
// y := GetY ( i ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 251
1282: ST_TO_ADDR
// d := GetDir ( i ) ;
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PPUSH
1293: CALL_OW 254
1297: ST_TO_ADDR
// RemoveUnit ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 64
// bc_type := b_bunker ;
1307: LD_ADDR_OWVAR 42
1311: PUSH
1312: LD_INT 32
1314: ST_TO_ADDR
// bc_level := 6 ;
1315: LD_ADDR_OWVAR 43
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1323: LD_ADDR_VAR 0 6
1327: PUSH
1328: LD_VAR 0 3
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_VAR 0 5
1342: PPUSH
1343: CALL_OW 47
1347: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1348: LD_VAR 0 6
1352: PPUSH
1353: LD_INT 5
1355: PUSH
1356: LD_INT 4
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 2
1370: MOD
1371: PUSH
1372: LD_INT 1
1374: PLUS
1375: ARRAY
1376: PPUSH
1377: CALL_OW 431
// end ;
1381: GO 1250
1383: POP
1384: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1385: LD_ADDR_VAR 0 9
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1419: LD_ADDR_VAR 0 8
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 30
1439: PUSH
1440: LD_INT 6
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 8
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1482: LD_ADDR_VAR 0 7
1486: PUSH
1487: LD_INT 22
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 30
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1516: LD_ADDR_VAR 0 12
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 30
1533: PUSH
1534: LD_INT 36
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1550: LD_ADDR_VAR 0 13
1554: PUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 30
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 30
1580: PUSH
1581: LD_INT 32
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 11
1611: PUSH
1612: LD_VAR 0 15
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1994
// begin placed := false ;
1621: LD_ADDR_VAR 0 11
1625: PUSH
1626: LD_INT 0
1628: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1629: LD_VAR 0 2
1633: PPUSH
1634: CALL_OW 257
1638: PUSH
1639: LD_INT 1
1641: EQUAL
1642: IFFALSE 1767
// begin if UnitFilter ( bun , [ f_empty ] ) then
1644: LD_VAR 0 13
1648: PPUSH
1649: LD_INT 58
1651: PUSH
1652: EMPTY
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1698
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_VAR 0 13
1670: PPUSH
1671: LD_INT 58
1673: PUSH
1674: EMPTY
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PPUSH
1686: CALL_OW 52
// placed := true ;
1690: LD_ADDR_VAR 0 11
1694: PUSH
1695: LD_INT 1
1697: ST_TO_ADDR
// end ; if arm and not placed then
1698: LD_VAR 0 9
1702: PUSH
1703: LD_VAR 0 11
1707: NOT
1708: AND
1709: IFFALSE 1767
// begin for j in arm do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 9
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; end ; if GetClass ( i ) = 3 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 3
1779: EQUAL
1780: IFFALSE 1884
// if fac then
1782: LD_VAR 0 7
1786: IFFALSE 1884
// begin if ct then
1788: LD_VAR 0 12
1792: IFFALSE 1820
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1794: LD_VAR 0 2
1798: PPUSH
1799: LD_VAR 0 12
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: CALL_OW 52
// placed := true ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// end ; if placed then
1820: LD_VAR 0 11
1824: IFFALSE 1828
// continue ;
1826: GO 1618
// for j in fac do
1828: LD_ADDR_VAR 0 10
1832: PUSH
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_IN
1839: IFFALSE 1882
// if UnitsInside ( j ) < 6 then
1841: LD_VAR 0 10
1845: PPUSH
1846: CALL_OW 313
1850: PUSH
1851: LD_INT 6
1853: LESS
1854: IFFALSE 1880
// begin PlaceHumanInUnit ( i , j ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_VAR 0 10
1865: PPUSH
1866: CALL_OW 52
// placed := true ;
1870: LD_ADDR_VAR 0 11
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// break ;
1878: GO 1882
// end ;
1880: GO 1838
1882: POP
1883: POP
// end ; if GetClass ( i ) = 4 then
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 257
1893: PUSH
1894: LD_INT 4
1896: EQUAL
1897: IFFALSE 1961
// if lab then
1899: LD_VAR 0 8
1903: IFFALSE 1961
// begin for j in lab do
1905: LD_ADDR_VAR 0 10
1909: PUSH
1910: LD_VAR 0 8
1914: PUSH
1915: FOR_IN
1916: IFFALSE 1959
// if UnitsInside ( j ) < 6 then
1918: LD_VAR 0 10
1922: PPUSH
1923: CALL_OW 313
1927: PUSH
1928: LD_INT 6
1930: LESS
1931: IFFALSE 1957
// begin PlaceHumanInUnit ( i , j ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_VAR 0 10
1942: PPUSH
1943: CALL_OW 52
// placed := true ;
1947: LD_ADDR_VAR 0 11
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// break ;
1955: GO 1959
// end ;
1957: GO 1915
1959: POP
1960: POP
// end ; if not placed then
1961: LD_VAR 0 11
1965: NOT
1966: IFFALSE 1992
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_INT 5
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// ComHold ( i ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: CALL_OW 140
// end ; end ;
1992: GO 1618
1994: POP
1995: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1996: LD_VAR 0 12
2000: PUSH
2001: LD_VAR 0 12
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 313
2014: AND
2015: IFFALSE 2104
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 33
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2102
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 12
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_VAR 0 12
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 313
2089: PPUSH
2090: CALL_OW 12
2094: ARRAY
2095: PPUSH
2096: CALL_OW 135
2100: GO 2051
2102: POP
2103: POP
// end ; end ;
2104: LD_VAR 0 1
2108: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2117: LD_INT 71
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2130: LD_ADDR_VAR 0 2
2134: PUSH
2135: LD_STRING GammaBase
2137: PPUSH
2138: EMPTY
2139: PPUSH
2140: CALL_OW 30
2144: ST_TO_ADDR
// if not blist then
2145: LD_VAR 0 2
2149: NOT
2150: IFFALSE 2190
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 51
2162: PUSH
2163: LD_INT 10
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: LD_INT 0
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: EMPTY
2188: LIST
2189: ST_TO_ADDR
// uc_side := 1 ;
2190: LD_ADDR_OWVAR 20
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// uc_nation := 1 ;
2198: LD_ADDR_OWVAR 21
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// for i in blist do
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2625
// begin bc_type := i [ 1 ] ;
2219: LD_ADDR_OWVAR 42
2223: PUSH
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_VAR 0 3
2242: PUSH
2243: LD_INT 5
2245: ARRAY
2246: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PUSH
2256: LD_INT 7
2258: PUSH
2259: LD_INT 8
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: IN
2266: IFFALSE 2322
// begin bc_kind1 := i [ 7 ] ;
2268: LD_ADDR_OWVAR 44
2272: PUSH
2273: LD_VAR 0 3
2277: PUSH
2278: LD_INT 7
2280: ARRAY
2281: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2282: LD_STRING 06_remoteVehs_1
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 30
2292: PUSH
2293: LD_INT 1
2295: EQUAL
2296: IFFALSE 2308
// begin bc_kind2 := 15 ;
2298: LD_ADDR_OWVAR 45
2302: PUSH
2303: LD_INT 15
2305: ST_TO_ADDR
// end else
2306: GO 2322
// begin bc_kind2 := i [ 8 ] ;
2308: LD_ADDR_OWVAR 45
2312: PUSH
2313: LD_VAR 0 3
2317: PUSH
2318: LD_INT 8
2320: ARRAY
2321: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 0
2329: EQUAL
2330: IFFALSE 2448
// begin bc_type := b_warehouse ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2340: LD_ADDR_EXP 37
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 2
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 3
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 4
2370: ARRAY
2371: PPUSH
2372: CALL_OW 47
2376: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2377: LD_EXP 37
2381: PPUSH
2382: LD_STRING gamma
2384: PPUSH
2385: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2389: LD_EXP 37
2393: PPUSH
2394: CALL_OW 274
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: LD_INT 400
2404: PUSH
2405: LD_INT 350
2407: PUSH
2408: LD_INT 250
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_OWVAR 67
2420: ARRAY
2421: PPUSH
2422: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2426: LD_EXP 37
2430: PPUSH
2431: CALL_OW 274
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: LD_INT 200
2441: PPUSH
2442: CALL_OW 277
// end else
2446: GO 2590
// begin if bc_type = 4 then
2448: LD_OWVAR 42
2452: PUSH
2453: LD_INT 4
2455: EQUAL
2456: IFFALSE 2505
// begin bc_type = 5 ;
2458: LD_ADDR_OWVAR 42
2462: PUSH
2463: LD_INT 5
2465: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2466: LD_ADDR_VAR 0 4
2470: PUSH
2471: LD_VAR 0 3
2475: PUSH
2476: LD_INT 2
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 3
2484: PUSH
2485: LD_INT 3
2487: ARRAY
2488: PPUSH
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 4
2496: ARRAY
2497: PPUSH
2498: CALL_OW 47
2502: ST_TO_ADDR
// end else
2503: GO 2590
// begin bc_type := i [ 1 ] ;
2505: LD_ADDR_OWVAR 42
2509: PUSH
2510: LD_VAR 0 3
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2519: LD_STRING 06_remoteVehs_1
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: CALL_OW 30
2529: PUSH
2530: LD_INT 1
2532: EQUAL
2533: PUSH
2534: LD_OWVAR 42
2538: PUSH
2539: LD_INT 7
2541: EQUAL
2542: AND
2543: IFFALSE 2553
// bc_type := b_lab_full ;
2545: LD_ADDR_OWVAR 42
2549: PUSH
2550: LD_INT 8
2552: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 3
2574: ARRAY
2575: PPUSH
2576: LD_VAR 0 3
2580: PUSH
2581: LD_INT 4
2583: ARRAY
2584: PPUSH
2585: CALL_OW 47
2589: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2590: LD_VAR 0 4
2594: PPUSH
2595: CALL_OW 266
2599: PUSH
2600: LD_INT 32
2602: EQUAL
2603: IFFALSE 2623
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2605: LD_VAR 0 4
2609: PPUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 7
2617: ARRAY
2618: PPUSH
2619: CALL_OW 431
// end ;
2623: GO 2216
2625: POP
2626: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2627: LD_INT 22
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 30
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: IFFALSE 2903
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2657: LD_ADDR_VAR 0 4
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 30
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: CALL_OW 69
2690: PUSH
2691: LD_INT 1
2693: ARRAY
2694: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2695: LD_ADDR_VAR 0 6
2699: PUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: CALL_OW 250
2709: PPUSH
2710: LD_VAR 0 4
2714: PPUSH
2715: CALL_OW 251
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: CALL_OW 254
2729: PPUSH
2730: CALL 16030 0 3
2734: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_INT 19
2742: PUSH
2743: LD_INT 17
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2750: LD_STRING 06_remoteVehs_1
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 30
2760: IFFALSE 2783
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2762: LD_ADDR_VAR 0 2
2766: PUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 20
2777: PPUSH
2778: CALL_OW 2
2782: ST_TO_ADDR
// for i in tmp do
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: LD_VAR 0 6
2792: PUSH
2793: FOR_IN
2794: IFFALSE 2901
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: PPUSH
2814: CALL_OW 428
2818: PUSH
2819: LD_INT 0
2821: EQUAL
2822: IFFALSE 2899
// begin bc_type := blist [ 1 ] ;
2824: LD_ADDR_OWVAR 42
2828: PUSH
2829: LD_VAR 0 2
2833: PUSH
2834: LD_INT 1
2836: ARRAY
2837: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2838: LD_VAR 0 3
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PPUSH
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 2
2854: ARRAY
2855: PPUSH
2856: LD_VAR 0 3
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: PPUSH
2865: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: CALL_OW 3
2886: ST_TO_ADDR
// if blist = 0 then
2887: LD_VAR 0 2
2891: PUSH
2892: LD_INT 0
2894: EQUAL
2895: IFFALSE 2899
// break ;
2897: GO 2901
// end ;
2899: GO 2793
2901: POP
2902: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2903: LD_STRING 06_remoteVehs_1
2905: PPUSH
2906: LD_INT 0
2908: PPUSH
2909: CALL_OW 30
2913: PUSH
2914: LD_INT 1
2916: EQUAL
2917: IFFALSE 3121
// begin bc_type = 36 ;
2919: LD_ADDR_OWVAR 42
2923: PUSH
2924: LD_INT 36
2926: ST_TO_ADDR
// bc_level = 4 ;
2927: LD_ADDR_OWVAR 43
2931: PUSH
2932: LD_INT 4
2934: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2935: LD_INT 62
2937: PPUSH
2938: LD_INT 12
2940: PPUSH
2941: LD_INT 3
2943: PPUSH
2944: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 3
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_OWVAR 67
2976: ARRAY
2977: PUSH
2978: FOR_TO
2979: IFFALSE 3119
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2981: LD_ADDR_OWVAR 37
2985: PUSH
2986: LD_INT 3
2988: PUSH
2989: LD_INT 2
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_OWVAR 67
3023: ARRAY
3024: ST_TO_ADDR
// vc_engine = 1 ;
3025: LD_ADDR_OWVAR 39
3029: PUSH
3030: LD_INT 1
3032: ST_TO_ADDR
// vc_control = 2 ;
3033: LD_ADDR_OWVAR 38
3037: PUSH
3038: LD_INT 2
3040: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3041: LD_ADDR_OWVAR 40
3045: PUSH
3046: LD_INT 3
3048: PUSH
3049: LD_INT 4
3051: PUSH
3052: LD_INT 5
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: CALL_OW 12
3070: ARRAY
3071: ST_TO_ADDR
// veh = CreateVehicle ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3082: LD_VAR 0 5
3086: PPUSH
3087: LD_EXP 37
3091: PPUSH
3092: CALL_OW 250
3096: PPUSH
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 251
3106: PPUSH
3107: LD_INT 7
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: CALL_OW 50
// end ;
3117: GO 2978
3119: POP
3120: POP
// end ; end ;
3121: LD_VAR 0 1
3125: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3126: LD_INT 0
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
// uc_side = 1 ;
3132: LD_ADDR_OWVAR 20
3136: PUSH
3137: LD_INT 1
3139: ST_TO_ADDR
// uc_nation = 1 ;
3140: LD_ADDR_OWVAR 21
3144: PUSH
3145: LD_INT 1
3147: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3148: LD_ADDR_EXP 14
3152: PUSH
3153: LD_STRING 06c_Denis
3155: PPUSH
3156: LD_INT 1
3158: PPUSH
3159: CALL 6743 0 2
3163: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3164: LD_EXP 14
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3179: LD_ADDR_EXP 15
3183: PUSH
3184: LD_STRING 06c_Joan
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: CALL 6743 0 2
3194: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3195: LD_EXP 15
3199: PPUSH
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3210: LD_STRING GladstoneIn07
3212: PPUSH
3213: LD_INT 0
3215: PPUSH
3216: CALL_OW 30
3220: NOT
3221: IFFALSE 3289
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3223: LD_ADDR_EXP 8
3227: PUSH
3228: LD_STRING 06c_Gladstone
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL 6743 0 2
3238: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3239: LD_EXP 8
3243: NOT
3244: PUSH
3245: LD_STRING GladstoneStayInDelta
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 30
3255: AND
3256: IFFALSE 3274
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3258: LD_ADDR_EXP 8
3262: PUSH
3263: LD_STRING 05_Gladstone
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 6743 0 2
3273: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3274: LD_EXP 8
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3289: LD_STRING LisaStayInDelta
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3332
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3301: LD_ADDR_EXP 6
3305: PUSH
3306: LD_STRING 05_Lisa
3308: PPUSH
3309: LD_INT 1
3311: PPUSH
3312: CALL 6743 0 2
3316: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3317: LD_EXP 6
3321: PPUSH
3322: LD_INT 4
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3332: LD_STRING BobbyStayInDelta
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 30
3342: IFFALSE 3375
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3344: LD_ADDR_EXP 4
3348: PUSH
3349: LD_STRING 05_Bobby
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL 6743 0 2
3359: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3360: LD_EXP 4
3364: PPUSH
3365: LD_INT 4
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3375: LD_STRING CyrusStayInDelta
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 30
3385: IFFALSE 3418
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3387: LD_ADDR_EXP 5
3391: PUSH
3392: LD_STRING 05_Cyrus
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL 6743 0 2
3402: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3403: LD_EXP 5
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3418: LD_STRING BrownStayInDelta
3420: PPUSH
3421: LD_INT 0
3423: PPUSH
3424: CALL_OW 30
3428: IFFALSE 3461
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3430: LD_ADDR_EXP 2
3434: PUSH
3435: LD_STRING 05_Brown
3437: PPUSH
3438: LD_INT 1
3440: PPUSH
3441: CALL 6743 0 2
3445: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3446: LD_EXP 2
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3461: LD_STRING DonaldsonStayInDelta
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 30
3471: IFFALSE 3504
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3473: LD_ADDR_EXP 3
3477: PUSH
3478: LD_STRING 05_Donaldson
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL 6743 0 2
3488: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3489: LD_EXP 3
3493: PPUSH
3494: LD_INT 4
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_STRING OthersStayInDelta
3511: PPUSH
3512: CALL_OW 31
3516: ST_TO_ADDR
// if other > 2 then
3517: LD_VAR 0 4
3521: PUSH
3522: LD_INT 2
3524: GREATER
3525: IFFALSE 3570
// begin for j = 1 to 2 do
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: DOUBLE
3533: LD_INT 1
3535: DEC
3536: ST_TO_ADDR
3537: LD_INT 2
3539: PUSH
3540: FOR_TO
3541: IFFALSE 3566
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3543: LD_VAR 0 4
3547: PUSH
3548: LD_VAR 0 3
3552: ARRAY
3553: PPUSH
3554: LD_INT 4
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL_OW 49
3564: GO 3540
3566: POP
3567: POP
// end else
3568: GO 3613
// begin for j = 1 to other do
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_VAR 0 4
3584: PUSH
3585: FOR_TO
3586: IFFALSE 3611
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3588: LD_VAR 0 4
3592: PUSH
3593: LD_VAR 0 3
3597: ARRAY
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 0
3604: PPUSH
3605: CALL_OW 49
3609: GO 3585
3611: POP
3612: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
3613: LD_ADDR_VAR 0 4
3617: PUSH
3618: LD_STRING 06_other_apemans
3620: PPUSH
3621: CALL_OW 31
3625: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3626: LD_VAR 0 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 4
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_OWVAR 67
3649: ARRAY
3650: GREATEREQUAL
3651: IFFALSE 3680
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_INT 5
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_OWVAR 67
3676: ARRAY
3677: ST_TO_ADDR
3678: GO 3690
// j := other ;
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: LD_VAR 0 4
3689: ST_TO_ADDR
// for i = 1 to j do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_VAR 0 3
3704: PUSH
3705: FOR_TO
3706: IFFALSE 3731
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3708: LD_VAR 0 4
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: PPUSH
3719: LD_INT 4
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 49
3729: GO 3705
3731: POP
3732: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3733: LD_INT 4
3735: PPUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 1
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 21
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 70
3764: PPUSH
3765: LD_INT 53
3767: PPUSH
3768: LD_INT 19
3770: PPUSH
3771: CALL_OW 111
// firstAttack = 1 ;
3775: LD_ADDR_EXP 33
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// end ;
3783: LD_VAR 0 1
3787: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3788: LD_INT 0
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3795: LD_ADDR_VAR 0 4
3799: PUSH
3800: LD_STRING 07_vehicles
3802: PPUSH
3803: EMPTY
3804: PPUSH
3805: CALL_OW 30
3809: ST_TO_ADDR
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// uc_nation = 1 ;
3818: LD_ADDR_OWVAR 21
3822: PUSH
3823: LD_INT 1
3825: ST_TO_ADDR
// if vehicles > 0 then
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 0
3833: GREATER
3834: IFFALSE 3973
// begin for i = 1 to vehicles do
3836: LD_ADDR_VAR 0 2
3840: PUSH
3841: DOUBLE
3842: LD_INT 1
3844: DEC
3845: ST_TO_ADDR
3846: LD_VAR 0 4
3850: PUSH
3851: FOR_TO
3852: IFFALSE 3971
// begin vc_chassis = vehicles [ i ] ;
3854: LD_ADDR_OWVAR 37
3858: PUSH
3859: LD_VAR 0 4
3863: PUSH
3864: LD_VAR 0 2
3868: ARRAY
3869: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3870: LD_ADDR_OWVAR 39
3874: PUSH
3875: LD_VAR 0 4
3879: PUSH
3880: LD_VAR 0 2
3884: PUSH
3885: LD_INT 1
3887: PLUS
3888: ARRAY
3889: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3890: LD_ADDR_OWVAR 38
3894: PUSH
3895: LD_VAR 0 4
3899: PUSH
3900: LD_VAR 0 2
3904: PUSH
3905: LD_INT 2
3907: PLUS
3908: ARRAY
3909: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3910: LD_ADDR_OWVAR 40
3914: PUSH
3915: LD_VAR 0 4
3919: PUSH
3920: LD_VAR 0 2
3924: PUSH
3925: LD_INT 3
3927: PLUS
3928: ARRAY
3929: ST_TO_ADDR
// veh = CreateVehicle ;
3930: LD_ADDR_VAR 0 5
3934: PUSH
3935: CALL_OW 45
3939: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_INT 4
3947: PPUSH
3948: LD_INT 0
3950: PPUSH
3951: CALL_OW 49
// i = i + 3 ;
3955: LD_ADDR_VAR 0 2
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_INT 3
3967: PLUS
3968: ST_TO_ADDR
// end ;
3969: GO 3851
3971: POP
3972: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3973: LD_ADDR_EXP 1
3977: PUSH
3978: LD_EXP 43
3982: PUSH
3983: LD_STRING JMM
3985: STR
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: CALL 6743 0 2
3994: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3995: LD_EXP 12
3999: PUSH
4000: LD_INT 1
4002: EQUAL
4003: PUSH
4004: LD_EXP 12
4008: PUSH
4009: LD_INT 3
4011: EQUAL
4012: OR
4013: PUSH
4014: LD_EXP 2
4018: NOT
4019: AND
4020: IFFALSE 4044
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4022: LD_ADDR_EXP 2
4026: PUSH
4027: LD_EXP 43
4031: PUSH
4032: LD_STRING Brown
4034: STR
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: CALL 6743 0 2
4043: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4044: LD_EXP 12
4048: PUSH
4049: LD_INT 2
4051: EQUAL
4052: PUSH
4053: LD_EXP 12
4057: PUSH
4058: LD_INT 3
4060: EQUAL
4061: OR
4062: PUSH
4063: LD_EXP 3
4067: NOT
4068: AND
4069: IFFALSE 4093
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4071: LD_ADDR_EXP 3
4075: PUSH
4076: LD_EXP 43
4080: PUSH
4081: LD_STRING Donaldson
4083: STR
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL 6743 0 2
4092: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4093: LD_EXP 2
4097: PUSH
4098: LD_EXP 12
4102: PUSH
4103: LD_INT 2
4105: NONEQUAL
4106: AND
4107: IFFALSE 4124
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4109: LD_EXP 2
4113: PPUSH
4114: LD_INT 4
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4124: LD_EXP 3
4128: PUSH
4129: LD_EXP 12
4133: PUSH
4134: LD_INT 1
4136: NONEQUAL
4137: AND
4138: IFFALSE 4155
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4140: LD_EXP 3
4144: PPUSH
4145: LD_INT 4
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4155: LD_ADDR_VAR 0 5
4159: PUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_INT 22
4165: PUSH
4166: LD_INT 1
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 21
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 58
4185: PUSH
4186: EMPTY
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: PPUSH
4194: CALL_OW 70
4198: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4199: LD_ADDR_EXP 1
4203: PUSH
4204: LD_EXP 43
4208: PUSH
4209: LD_STRING JMM
4211: STR
4212: PPUSH
4213: LD_INT 1
4215: PPUSH
4216: CALL 6743 0 2
4220: ST_TO_ADDR
// other = CreateCharacterSet ( 07c_others ) ;
4221: LD_ADDR_VAR 0 3
4225: PUSH
4226: LD_STRING 07c_others
4228: PPUSH
4229: CALL_OW 31
4233: ST_TO_ADDR
// for i in other do
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: LD_VAR 0 3
4243: PUSH
4244: FOR_IN
4245: IFFALSE 4369
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4247: LD_ADDR_VAR 0 5
4251: PUSH
4252: LD_INT 4
4254: PPUSH
4255: LD_INT 22
4257: PUSH
4258: LD_INT 1
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 21
4267: PUSH
4268: LD_INT 2
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 58
4277: PUSH
4278: EMPTY
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 70
4290: ST_TO_ADDR
// if veh > 0 and GetClass ( i ) = 3 then
4291: LD_VAR 0 5
4295: PUSH
4296: LD_INT 0
4298: GREATER
4299: PUSH
4300: LD_VAR 0 2
4304: PPUSH
4305: CALL_OW 257
4309: PUSH
4310: LD_INT 3
4312: EQUAL
4313: AND
4314: IFFALSE 4336
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4316: LD_VAR 0 2
4320: PPUSH
4321: LD_VAR 0 5
4325: PUSH
4326: LD_INT 1
4328: ARRAY
4329: PPUSH
4330: CALL_OW 52
// end else
4334: GO 4351
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4336: LD_VAR 0 2
4340: PPUSH
4341: LD_INT 4
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL_OW 49
// end ; other = other diff i ;
4351: LD_ADDR_VAR 0 3
4355: PUSH
4356: LD_VAR 0 3
4360: PUSH
4361: LD_VAR 0 2
4365: DIFF
4366: ST_TO_ADDR
// end ;
4367: GO 4244
4369: POP
4370: POP
// for i in other do
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_VAR 0 3
4380: PUSH
4381: FOR_IN
4382: IFFALSE 4475
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4384: LD_ADDR_VAR 0 5
4388: PUSH
4389: LD_INT 4
4391: PPUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 21
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 58
4414: PUSH
4415: EMPTY
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 70
4427: ST_TO_ADDR
// if veh > 0 then
4428: LD_VAR 0 5
4432: PUSH
4433: LD_INT 0
4435: GREATER
4436: IFFALSE 4458
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4438: LD_VAR 0 2
4442: PPUSH
4443: LD_VAR 0 5
4447: PUSH
4448: LD_INT 1
4450: ARRAY
4451: PPUSH
4452: CALL_OW 52
// end else
4456: GO 4473
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4458: LD_VAR 0 2
4462: PPUSH
4463: LD_INT 4
4465: PPUSH
4466: LD_INT 0
4468: PPUSH
4469: CALL_OW 49
// end ; end ;
4473: GO 4381
4475: POP
4476: POP
// if veh > 0 then
4477: LD_VAR 0 5
4481: PUSH
4482: LD_INT 0
4484: GREATER
4485: IFFALSE 4507
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4487: LD_EXP 1
4491: PPUSH
4492: LD_VAR 0 5
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: PPUSH
4501: CALL_OW 52
// end else
4505: GO 4522
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4507: LD_EXP 1
4511: PPUSH
4512: LD_INT 4
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_INT 4
4529: PPUSH
4530: LD_INT 22
4532: PUSH
4533: LD_INT 1
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PUSH
4540: LD_INT 21
4542: PUSH
4543: LD_INT 2
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 58
4552: PUSH
4553: EMPTY
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: ST_TO_ADDR
// if not Bobby then
4566: LD_EXP 4
4570: NOT
4571: IFFALSE 4640
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4573: LD_ADDR_EXP 4
4577: PUSH
4578: LD_EXP 43
4582: PUSH
4583: LD_STRING Bobby
4585: STR
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL 6743 0 2
4594: ST_TO_ADDR
// if veh > 0 then
4595: LD_VAR 0 5
4599: PUSH
4600: LD_INT 0
4602: GREATER
4603: IFFALSE 4625
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4605: LD_EXP 4
4609: PPUSH
4610: LD_VAR 0 5
4614: PUSH
4615: LD_INT 1
4617: ARRAY
4618: PPUSH
4619: CALL_OW 52
// end else
4623: GO 4640
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4625: LD_EXP 4
4629: PPUSH
4630: LD_INT 4
4632: PPUSH
4633: LD_INT 0
4635: PPUSH
4636: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4640: LD_ADDR_VAR 0 5
4644: PUSH
4645: LD_INT 4
4647: PPUSH
4648: LD_INT 22
4650: PUSH
4651: LD_INT 1
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 21
4660: PUSH
4661: LD_INT 2
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 58
4670: PUSH
4671: EMPTY
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: PPUSH
4679: CALL_OW 70
4683: ST_TO_ADDR
// if not Cyrus then
4684: LD_EXP 5
4688: NOT
4689: IFFALSE 4758
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4691: LD_ADDR_EXP 5
4695: PUSH
4696: LD_EXP 43
4700: PUSH
4701: LD_STRING Cyrus
4703: STR
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL 6743 0 2
4712: ST_TO_ADDR
// if veh > 0 then
4713: LD_VAR 0 5
4717: PUSH
4718: LD_INT 0
4720: GREATER
4721: IFFALSE 4743
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4723: LD_EXP 5
4727: PPUSH
4728: LD_VAR 0 5
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 52
// end else
4741: GO 4758
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4743: LD_EXP 5
4747: PPUSH
4748: LD_INT 4
4750: PPUSH
4751: LD_INT 0
4753: PPUSH
4754: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4758: LD_ADDR_VAR 0 5
4762: PUSH
4763: LD_INT 4
4765: PPUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 21
4778: PUSH
4779: LD_INT 2
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 58
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: PPUSH
4797: CALL_OW 70
4801: ST_TO_ADDR
// if not Lisa then
4802: LD_EXP 6
4806: NOT
4807: IFFALSE 4876
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4809: LD_ADDR_EXP 6
4813: PUSH
4814: LD_EXP 43
4818: PUSH
4819: LD_STRING Lisa
4821: STR
4822: PPUSH
4823: LD_INT 1
4825: PPUSH
4826: CALL 6743 0 2
4830: ST_TO_ADDR
// if veh > 0 then
4831: LD_VAR 0 5
4835: PUSH
4836: LD_INT 0
4838: GREATER
4839: IFFALSE 4861
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4841: LD_EXP 6
4845: PPUSH
4846: LD_VAR 0 5
4850: PUSH
4851: LD_INT 1
4853: ARRAY
4854: PPUSH
4855: CALL_OW 52
// end else
4859: GO 4876
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4861: LD_EXP 6
4865: PPUSH
4866: LD_INT 4
4868: PPUSH
4869: LD_INT 0
4871: PPUSH
4872: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4876: LD_ADDR_VAR 0 5
4880: PUSH
4881: LD_INT 4
4883: PPUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 1
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 21
4896: PUSH
4897: LD_INT 2
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 58
4906: PUSH
4907: EMPTY
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 70
4919: ST_TO_ADDR
// if not Frank then
4920: LD_EXP 7
4924: NOT
4925: IFFALSE 4994
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4927: LD_ADDR_EXP 7
4931: PUSH
4932: LD_EXP 43
4936: PUSH
4937: LD_STRING Frank
4939: STR
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: CALL 6743 0 2
4948: ST_TO_ADDR
// if veh > 0 then
4949: LD_VAR 0 5
4953: PUSH
4954: LD_INT 0
4956: GREATER
4957: IFFALSE 4979
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4959: LD_EXP 7
4963: PPUSH
4964: LD_VAR 0 5
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: PPUSH
4973: CALL_OW 52
// end else
4977: GO 4994
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4979: LD_EXP 7
4983: PPUSH
4984: LD_INT 4
4986: PPUSH
4987: LD_INT 0
4989: PPUSH
4990: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4994: LD_ADDR_VAR 0 5
4998: PUSH
4999: LD_INT 4
5001: PPUSH
5002: LD_INT 22
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 21
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 58
5024: PUSH
5025: EMPTY
5026: LIST
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 70
5037: ST_TO_ADDR
// if not Gladstone then
5038: LD_EXP 8
5042: NOT
5043: IFFALSE 5112
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5045: LD_ADDR_EXP 8
5049: PUSH
5050: LD_EXP 43
5054: PUSH
5055: LD_STRING Gladstone
5057: STR
5058: PPUSH
5059: LD_INT 1
5061: PPUSH
5062: CALL 6743 0 2
5066: ST_TO_ADDR
// if veh > 0 then
5067: LD_VAR 0 5
5071: PUSH
5072: LD_INT 0
5074: GREATER
5075: IFFALSE 5097
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
5077: LD_EXP 8
5081: PPUSH
5082: LD_VAR 0 5
5086: PUSH
5087: LD_INT 1
5089: ARRAY
5090: PPUSH
5091: CALL_OW 52
// end else
5095: GO 5112
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
5097: LD_EXP 8
5101: PPUSH
5102: LD_INT 4
5104: PPUSH
5105: LD_INT 0
5107: PPUSH
5108: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5112: LD_ADDR_VAR 0 5
5116: PUSH
5117: LD_INT 4
5119: PPUSH
5120: LD_INT 22
5122: PUSH
5123: LD_INT 1
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 21
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 58
5142: PUSH
5143: EMPTY
5144: LIST
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: PPUSH
5151: CALL_OW 70
5155: ST_TO_ADDR
// if not Kikuchi then
5156: LD_EXP 9
5160: NOT
5161: IFFALSE 5230
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5163: LD_ADDR_EXP 9
5167: PUSH
5168: LD_EXP 43
5172: PUSH
5173: LD_STRING Kikuchi
5175: STR
5176: PPUSH
5177: LD_INT 1
5179: PPUSH
5180: CALL 6743 0 2
5184: ST_TO_ADDR
// if veh > 0 then
5185: LD_VAR 0 5
5189: PUSH
5190: LD_INT 0
5192: GREATER
5193: IFFALSE 5215
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
5195: LD_EXP 9
5199: PPUSH
5200: LD_VAR 0 5
5204: PUSH
5205: LD_INT 1
5207: ARRAY
5208: PPUSH
5209: CALL_OW 52
// end else
5213: GO 5230
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
5215: LD_EXP 9
5219: PPUSH
5220: LD_INT 4
5222: PPUSH
5223: LD_INT 0
5225: PPUSH
5226: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_INT 4
5237: PPUSH
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 21
5250: PUSH
5251: LD_INT 2
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 58
5260: PUSH
5261: EMPTY
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 70
5273: ST_TO_ADDR
// if not Khatam then
5274: LD_EXP 10
5278: NOT
5279: IFFALSE 5348
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5281: LD_ADDR_EXP 10
5285: PUSH
5286: LD_EXP 43
5290: PUSH
5291: LD_STRING Khatam
5293: STR
5294: PPUSH
5295: LD_INT 1
5297: PPUSH
5298: CALL 6743 0 2
5302: ST_TO_ADDR
// if veh > 0 then
5303: LD_VAR 0 5
5307: PUSH
5308: LD_INT 0
5310: GREATER
5311: IFFALSE 5333
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5313: LD_EXP 10
5317: PPUSH
5318: LD_VAR 0 5
5322: PUSH
5323: LD_INT 1
5325: ARRAY
5326: PPUSH
5327: CALL_OW 52
// end else
5331: GO 5348
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5333: LD_EXP 10
5337: PPUSH
5338: LD_INT 4
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL_OW 49
// end ; end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5348: LD_INT 4
5350: PPUSH
5351: LD_INT 22
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: PPUSH
5364: CALL_OW 70
5368: PPUSH
5369: LD_INT 53
5371: PPUSH
5372: LD_INT 19
5374: PPUSH
5375: CALL_OW 111
// end ;
5379: LD_VAR 0 1
5383: RET
// export function PrepareSikorsky ; begin
5384: LD_INT 0
5386: PPUSH
// uc_side = 4 ;
5387: LD_ADDR_OWVAR 20
5391: PUSH
5392: LD_INT 4
5394: ST_TO_ADDR
// uc_nation = 1 ;
5395: LD_ADDR_OWVAR 21
5399: PUSH
5400: LD_INT 1
5402: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5403: LD_ADDR_EXP 16
5407: PUSH
5408: LD_STRING Sikorski
5410: PPUSH
5411: LD_INT 0
5413: PPUSH
5414: CALL 6743 0 2
5418: ST_TO_ADDR
// vc_engine = 1 ;
5419: LD_ADDR_OWVAR 39
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// vc_control = 1 ;
5427: LD_ADDR_OWVAR 38
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5435: LD_ADDR_OWVAR 40
5439: PUSH
5440: LD_INT 5
5442: PUSH
5443: LD_INT 3
5445: PUSH
5446: LD_INT 4
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: ST_TO_ADDR
// vc_chassis = 4 ;
5460: LD_ADDR_OWVAR 37
5464: PUSH
5465: LD_INT 4
5467: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5468: LD_ADDR_EXP 17
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5478: LD_EXP 17
5482: PPUSH
5483: LD_INT 9
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5493: LD_EXP 16
5497: PPUSH
5498: LD_EXP 17
5502: PPUSH
5503: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5507: LD_EXP 17
5511: PPUSH
5512: LD_INT 5
5514: PPUSH
5515: CALL_OW 113
// end ;
5519: LD_VAR 0 1
5523: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5530: LD_ADDR_VAR 0 2
5534: PUSH
5535: DOUBLE
5536: LD_INT 1
5538: DEC
5539: ST_TO_ADDR
5540: LD_INT 8
5542: PUSH
5543: LD_INT 7
5545: PUSH
5546: LD_INT 7
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: PUSH
5554: LD_OWVAR 67
5558: ARRAY
5559: PUSH
5560: FOR_TO
5561: IFFALSE 5658
// begin uc_side = 4 ;
5563: LD_ADDR_OWVAR 20
5567: PUSH
5568: LD_INT 4
5570: ST_TO_ADDR
// uc_nation = 1 ;
5571: LD_ADDR_OWVAR 21
5575: PUSH
5576: LD_INT 1
5578: ST_TO_ADDR
// hc_name =  ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING 
5586: ST_TO_ADDR
// hc_gallery =  ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING 
5594: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5595: LD_INT 0
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: LD_INT 5
5603: PPUSH
5604: LD_INT 8
5606: PPUSH
5607: CALL_OW 12
5611: PPUSH
5612: CALL_OW 380
// un = CreateHuman ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: CALL_OW 44
5625: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5626: LD_VAR 0 3
5630: PPUSH
5631: LD_INT 9
5633: PPUSH
5634: LD_INT 0
5636: PPUSH
5637: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 53
5648: PPUSH
5649: LD_INT 23
5651: PPUSH
5652: CALL_OW 111
// end ;
5656: GO 5560
5658: POP
5659: POP
// for i = 1 to 3 do
5660: LD_ADDR_VAR 0 2
5664: PUSH
5665: DOUBLE
5666: LD_INT 1
5668: DEC
5669: ST_TO_ADDR
5670: LD_INT 3
5672: PUSH
5673: FOR_TO
5674: IFFALSE 5771
// begin uc_side = 4 ;
5676: LD_ADDR_OWVAR 20
5680: PUSH
5681: LD_INT 4
5683: ST_TO_ADDR
// uc_nation = 1 ;
5684: LD_ADDR_OWVAR 21
5688: PUSH
5689: LD_INT 1
5691: ST_TO_ADDR
// hc_name =  ;
5692: LD_ADDR_OWVAR 26
5696: PUSH
5697: LD_STRING 
5699: ST_TO_ADDR
// hc_gallery =  ;
5700: LD_ADDR_OWVAR 33
5704: PUSH
5705: LD_STRING 
5707: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5708: LD_INT 0
5710: PPUSH
5711: LD_INT 4
5713: PPUSH
5714: LD_INT 5
5716: PPUSH
5717: LD_INT 8
5719: PPUSH
5720: CALL_OW 12
5724: PPUSH
5725: CALL_OW 380
// un = CreateHuman ;
5729: LD_ADDR_VAR 0 3
5733: PUSH
5734: CALL_OW 44
5738: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5739: LD_VAR 0 3
5743: PPUSH
5744: LD_INT 9
5746: PPUSH
5747: LD_INT 0
5749: PPUSH
5750: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5754: LD_VAR 0 3
5758: PPUSH
5759: LD_INT 53
5761: PPUSH
5762: LD_INT 23
5764: PPUSH
5765: CALL_OW 111
// end ;
5769: GO 5673
5771: POP
5772: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5773: LD_ADDR_VAR 0 2
5777: PUSH
5778: DOUBLE
5779: LD_INT 1
5781: DEC
5782: ST_TO_ADDR
5783: LD_INT 9
5785: PUSH
5786: LD_INT 8
5788: PUSH
5789: LD_INT 7
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: LIST
5796: PUSH
5797: LD_OWVAR 67
5801: ARRAY
5802: PUSH
5803: FOR_TO
5804: IFFALSE 6000
// begin uc_side = 4 ;
5806: LD_ADDR_OWVAR 20
5810: PUSH
5811: LD_INT 4
5813: ST_TO_ADDR
// uc_nation = 1 ;
5814: LD_ADDR_OWVAR 21
5818: PUSH
5819: LD_INT 1
5821: ST_TO_ADDR
// vc_engine = 1 ;
5822: LD_ADDR_OWVAR 39
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// vc_control = 1 ;
5830: LD_ADDR_OWVAR 38
5834: PUSH
5835: LD_INT 1
5837: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5838: LD_ADDR_OWVAR 40
5842: PUSH
5843: LD_INT 3
5845: PUSH
5846: LD_INT 4
5848: PUSH
5849: LD_INT 5
5851: PUSH
5852: LD_INT 6
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_INT 1
5863: PPUSH
5864: LD_INT 4
5866: PPUSH
5867: CALL_OW 12
5871: ARRAY
5872: ST_TO_ADDR
// vc_chassis = 4 ;
5873: LD_ADDR_OWVAR 37
5877: PUSH
5878: LD_INT 4
5880: ST_TO_ADDR
// veh = CreateVehicle ;
5881: LD_ADDR_VAR 0 4
5885: PUSH
5886: CALL_OW 45
5890: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5891: LD_VAR 0 4
5895: PPUSH
5896: LD_INT 9
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 49
// hc_name =  ;
5906: LD_ADDR_OWVAR 26
5910: PUSH
5911: LD_STRING 
5913: ST_TO_ADDR
// hc_gallery =  ;
5914: LD_ADDR_OWVAR 33
5918: PUSH
5919: LD_STRING 
5921: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5922: LD_INT 0
5924: PPUSH
5925: LD_INT 3
5927: PPUSH
5928: LD_INT 5
5930: PPUSH
5931: LD_INT 8
5933: PPUSH
5934: CALL_OW 12
5938: PPUSH
5939: CALL_OW 380
// un = CreateHuman ;
5943: LD_ADDR_VAR 0 3
5947: PUSH
5948: CALL_OW 44
5952: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_VAR 0 4
5962: PPUSH
5963: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5967: LD_VAR 0 4
5971: PUSH
5972: LD_VAR 0 3
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PPUSH
5981: LD_INT 53
5983: PPUSH
5984: LD_INT 23
5986: PPUSH
5987: CALL_OW 111
// wait ( 0 0$5 ) ;
5991: LD_INT 175
5993: PPUSH
5994: CALL_OW 67
// end ;
5998: GO 5803
6000: POP
6001: POP
// end ; end_of_file
6002: LD_VAR 0 1
6006: RET
// export function PrepareRussianCommander ; begin
6007: LD_INT 0
6009: PPUSH
// uc_side = 3 ;
6010: LD_ADDR_OWVAR 20
6014: PUSH
6015: LD_INT 3
6017: ST_TO_ADDR
// uc_nation = 3 ;
6018: LD_ADDR_OWVAR 21
6022: PUSH
6023: LD_INT 3
6025: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6026: LD_ADDR_EXP 24
6030: PUSH
6031: LD_STRING Borodin
6033: PPUSH
6034: CALL_OW 25
6038: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6039: LD_EXP 24
6043: PPUSH
6044: LD_INT 25
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 49
// end ;
6054: LD_VAR 0 1
6058: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6059: LD_INT 0
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
// for i = 1 to 10 do
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: DOUBLE
6071: LD_INT 1
6073: DEC
6074: ST_TO_ADDR
6075: LD_INT 10
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6153
// begin uc_side = 6 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 6
6088: ST_TO_ADDR
// uc_nation = 3 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 3
6096: ST_TO_ADDR
// hc_gallery =  ;
6097: LD_ADDR_OWVAR 33
6101: PUSH
6102: LD_STRING 
6104: ST_TO_ADDR
// hc_name =  ;
6105: LD_ADDR_OWVAR 26
6109: PUSH
6110: LD_STRING 
6112: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6113: LD_INT 0
6115: PPUSH
6116: LD_INT 1
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL_OW 380
// un = CreateHuman ;
6126: LD_ADDR_VAR 0 3
6130: PUSH
6131: CALL_OW 44
6135: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6136: LD_VAR 0 3
6140: PPUSH
6141: LD_INT 1
6143: PPUSH
6144: LD_INT 0
6146: PPUSH
6147: CALL_OW 49
// end ;
6151: GO 6078
6153: POP
6154: POP
// for i = 1 to 3 do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 3
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6318
// begin uc_side = 6 ;
6171: LD_ADDR_OWVAR 20
6175: PUSH
6176: LD_INT 6
6178: ST_TO_ADDR
// uc_nation = 3 ;
6179: LD_ADDR_OWVAR 21
6183: PUSH
6184: LD_INT 3
6186: ST_TO_ADDR
// vc_engine = 1 ;
6187: LD_ADDR_OWVAR 39
6191: PUSH
6192: LD_INT 1
6194: ST_TO_ADDR
// vc_control = 1 ;
6195: LD_ADDR_OWVAR 38
6199: PUSH
6200: LD_INT 1
6202: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6203: LD_ADDR_OWVAR 40
6207: PUSH
6208: LD_INT 43
6210: PUSH
6211: LD_INT 44
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 1
6220: PPUSH
6221: LD_INT 2
6223: PPUSH
6224: CALL_OW 12
6228: ARRAY
6229: ST_TO_ADDR
// vc_chassis = 22 ;
6230: LD_ADDR_OWVAR 37
6234: PUSH
6235: LD_INT 22
6237: ST_TO_ADDR
// veh = CreateVehicle ;
6238: LD_ADDR_VAR 0 4
6242: PUSH
6243: CALL_OW 45
6247: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6248: LD_VAR 0 4
6252: PPUSH
6253: LD_INT 2
6255: PPUSH
6256: LD_INT 0
6258: PPUSH
6259: CALL_OW 49
// hc_gallery =  ;
6263: LD_ADDR_OWVAR 33
6267: PUSH
6268: LD_STRING 
6270: ST_TO_ADDR
// hc_name =  ;
6271: LD_ADDR_OWVAR 26
6275: PUSH
6276: LD_STRING 
6278: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6279: LD_INT 0
6281: PPUSH
6282: LD_INT 3
6284: PPUSH
6285: LD_INT 4
6287: PPUSH
6288: CALL_OW 380
// un = CreateHuman ;
6292: LD_ADDR_VAR 0 3
6296: PUSH
6297: CALL_OW 44
6301: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6302: LD_VAR 0 3
6306: PPUSH
6307: LD_VAR 0 4
6311: PPUSH
6312: CALL_OW 52
// end ;
6316: GO 6168
6318: POP
6319: POP
// end ;
6320: LD_VAR 0 1
6324: RET
// export function PrepareRussians ; var i , un ; begin
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
// for i = 1 to 8 do
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_INT 8
6342: PUSH
6343: FOR_TO
6344: IFFALSE 6430
// begin uc_side = 3 ;
6346: LD_ADDR_OWVAR 20
6350: PUSH
6351: LD_INT 3
6353: ST_TO_ADDR
// uc_nation = 3 ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_INT 3
6361: ST_TO_ADDR
// hc_gallery =  ;
6362: LD_ADDR_OWVAR 33
6366: PUSH
6367: LD_STRING 
6369: ST_TO_ADDR
// hc_name =  ;
6370: LD_ADDR_OWVAR 26
6374: PUSH
6375: LD_STRING 
6377: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6378: LD_INT 0
6380: PPUSH
6381: LD_INT 1
6383: PPUSH
6384: LD_EXP 25
6388: PPUSH
6389: LD_EXP 26
6393: PPUSH
6394: CALL_OW 12
6398: PPUSH
6399: CALL_OW 380
// un = CreateHuman ;
6403: LD_ADDR_VAR 0 3
6407: PUSH
6408: CALL_OW 44
6412: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6413: LD_VAR 0 3
6417: PPUSH
6418: LD_INT 3
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: CALL_OW 49
// end ;
6428: GO 6343
6430: POP
6431: POP
// for i = 1 to 4 do
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: DOUBLE
6438: LD_INT 1
6440: DEC
6441: ST_TO_ADDR
6442: LD_INT 4
6444: PUSH
6445: FOR_TO
6446: IFFALSE 6532
// begin uc_side = 3 ;
6448: LD_ADDR_OWVAR 20
6452: PUSH
6453: LD_INT 3
6455: ST_TO_ADDR
// uc_nation = 3 ;
6456: LD_ADDR_OWVAR 21
6460: PUSH
6461: LD_INT 3
6463: ST_TO_ADDR
// hc_gallery =  ;
6464: LD_ADDR_OWVAR 33
6468: PUSH
6469: LD_STRING 
6471: ST_TO_ADDR
// hc_name =  ;
6472: LD_ADDR_OWVAR 26
6476: PUSH
6477: LD_STRING 
6479: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6480: LD_INT 0
6482: PPUSH
6483: LD_INT 2
6485: PPUSH
6486: LD_EXP 25
6490: PPUSH
6491: LD_EXP 26
6495: PPUSH
6496: CALL_OW 12
6500: PPUSH
6501: CALL_OW 380
// un = CreateHuman ;
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: CALL_OW 44
6514: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6515: LD_VAR 0 3
6519: PPUSH
6520: LD_INT 3
6522: PPUSH
6523: LD_INT 0
6525: PPUSH
6526: CALL_OW 49
// end ;
6530: GO 6445
6532: POP
6533: POP
// for i = 1 to 3 do
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_INT 3
6546: PUSH
6547: FOR_TO
6548: IFFALSE 6634
// begin uc_side = 3 ;
6550: LD_ADDR_OWVAR 20
6554: PUSH
6555: LD_INT 3
6557: ST_TO_ADDR
// uc_nation = 3 ;
6558: LD_ADDR_OWVAR 21
6562: PUSH
6563: LD_INT 3
6565: ST_TO_ADDR
// hc_gallery =  ;
6566: LD_ADDR_OWVAR 33
6570: PUSH
6571: LD_STRING 
6573: ST_TO_ADDR
// hc_name =  ;
6574: LD_ADDR_OWVAR 26
6578: PUSH
6579: LD_STRING 
6581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6582: LD_INT 0
6584: PPUSH
6585: LD_INT 3
6587: PPUSH
6588: LD_EXP 25
6592: PPUSH
6593: LD_EXP 26
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: CALL_OW 380
// un = CreateHuman ;
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: CALL_OW 44
6616: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6617: LD_VAR 0 3
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: LD_INT 0
6627: PPUSH
6628: CALL_OW 49
// end ;
6632: GO 6547
6634: POP
6635: POP
// for i = 1 to 2 do
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: DOUBLE
6642: LD_INT 1
6644: DEC
6645: ST_TO_ADDR
6646: LD_INT 2
6648: PUSH
6649: FOR_TO
6650: IFFALSE 6736
// begin uc_side = 3 ;
6652: LD_ADDR_OWVAR 20
6656: PUSH
6657: LD_INT 3
6659: ST_TO_ADDR
// uc_nation = 3 ;
6660: LD_ADDR_OWVAR 21
6664: PUSH
6665: LD_INT 3
6667: ST_TO_ADDR
// hc_gallery =  ;
6668: LD_ADDR_OWVAR 33
6672: PUSH
6673: LD_STRING 
6675: ST_TO_ADDR
// hc_name =  ;
6676: LD_ADDR_OWVAR 26
6680: PUSH
6681: LD_STRING 
6683: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 4
6689: PPUSH
6690: LD_EXP 25
6694: PPUSH
6695: LD_EXP 26
6699: PPUSH
6700: CALL_OW 12
6704: PPUSH
6705: CALL_OW 380
// un = CreateHuman ;
6709: LD_ADDR_VAR 0 3
6713: PUSH
6714: CALL_OW 44
6718: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6719: LD_VAR 0 3
6723: PPUSH
6724: LD_INT 3
6726: PPUSH
6727: LD_INT 0
6729: PPUSH
6730: CALL_OW 49
// end ;
6734: GO 6649
6736: POP
6737: POP
// end ; end_of_file
6738: LD_VAR 0 1
6742: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6743: LD_INT 0
6745: PPUSH
6746: PPUSH
// if exist_mode then
6747: LD_VAR 0 2
6751: IFFALSE 6770
// unit := CreateCharacter ( ident ) else
6753: LD_ADDR_VAR 0 4
6757: PUSH
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 34
6767: ST_TO_ADDR
6768: GO 6785
// unit := NewCharacter ( ident ) ;
6770: LD_ADDR_VAR 0 4
6774: PUSH
6775: LD_VAR 0 1
6779: PPUSH
6780: CALL_OW 25
6784: ST_TO_ADDR
// result := unit ;
6785: LD_ADDR_VAR 0 3
6789: PUSH
6790: LD_VAR 0 4
6794: ST_TO_ADDR
// end ;
6795: LD_VAR 0 3
6799: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6800: LD_INT 0
6802: PPUSH
6803: PPUSH
6804: PPUSH
// rnd = rand ( 1 , characters ) ;
6805: LD_ADDR_VAR 0 6
6809: PUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// for i = 1 to characters do
6823: LD_ADDR_VAR 0 5
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6949
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6841: LD_VAR 0 5
6845: PUSH
6846: LD_VAR 0 6
6850: EQUAL
6851: PUSH
6852: LD_VAR 0 1
6856: PUSH
6857: LD_VAR 0 5
6861: ARRAY
6862: PPUSH
6863: CALL_OW 258
6867: PUSH
6868: LD_INT 1
6870: EQUAL
6871: AND
6872: IFFALSE 6894
// Say ( characters [ i ] , dialogMID ) ;
6874: LD_VAR 0 1
6878: PUSH
6879: LD_VAR 0 5
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 2
6889: PPUSH
6890: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6894: LD_VAR 0 5
6898: PUSH
6899: LD_VAR 0 6
6903: EQUAL
6904: PUSH
6905: LD_VAR 0 1
6909: PUSH
6910: LD_VAR 0 5
6914: ARRAY
6915: PPUSH
6916: CALL_OW 258
6920: PUSH
6921: LD_INT 2
6923: EQUAL
6924: AND
6925: IFFALSE 6947
// Say ( characters [ i ] , dialogFID ) ;
6927: LD_VAR 0 1
6931: PUSH
6932: LD_VAR 0 5
6936: ARRAY
6937: PPUSH
6938: LD_VAR 0 3
6942: PPUSH
6943: CALL_OW 88
// end ;
6947: GO 6838
6949: POP
6950: POP
// end ;
6951: LD_VAR 0 4
6955: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
// uc_side := GetSide ( b ) ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_VAR 0 2
6970: PPUSH
6971: CALL_OW 255
6975: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6976: LD_ADDR_OWVAR 21
6980: PUSH
6981: LD_VAR 0 2
6985: PPUSH
6986: CALL_OW 248
6990: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6991: LD_INT 0
6993: PPUSH
6994: LD_INT 1
6996: PPUSH
6997: LD_VAR 0 1
7001: PPUSH
7002: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7006: LD_ADDR_VAR 0 5
7010: PUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 254
7020: PUSH
7021: LD_INT 3
7023: MINUS
7024: ST_TO_ADDR
// if dir < 0 then
7025: LD_VAR 0 5
7029: PUSH
7030: LD_INT 0
7032: LESS
7033: IFFALSE 7049
// dir := 6 + dir ;
7035: LD_ADDR_VAR 0 5
7039: PUSH
7040: LD_INT 6
7042: PUSH
7043: LD_VAR 0 5
7047: PLUS
7048: ST_TO_ADDR
// un := CreateHuman ;
7049: LD_ADDR_VAR 0 4
7053: PUSH
7054: CALL_OW 44
7058: ST_TO_ADDR
// SetDir ( un , dir ) ;
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7073: LD_VAR 0 4
7077: PPUSH
7078: LD_VAR 0 2
7082: PPUSH
7083: CALL_OW 52
// end ;
7087: LD_VAR 0 3
7091: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7092: LD_INT 0
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
// for i = 1 to count do
7098: LD_ADDR_VAR 0 8
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 6
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7195
// begin uc_side = side ;
7116: LD_ADDR_OWVAR 20
7120: PUSH
7121: LD_VAR 0 1
7125: ST_TO_ADDR
// uc_nation = nation ;
7126: LD_ADDR_OWVAR 21
7130: PUSH
7131: LD_VAR 0 2
7135: ST_TO_ADDR
// hc_gallery =  ;
7136: LD_ADDR_OWVAR 33
7140: PUSH
7141: LD_STRING 
7143: ST_TO_ADDR
// hc_name =  ;
7144: LD_ADDR_OWVAR 26
7148: PUSH
7149: LD_STRING 
7151: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7152: LD_INT 0
7154: PPUSH
7155: LD_VAR 0 5
7159: PPUSH
7160: LD_VAR 0 4
7164: PPUSH
7165: CALL_OW 380
// un = CreateHuman ;
7169: LD_ADDR_VAR 0 10
7173: PUSH
7174: CALL_OW 44
7178: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7179: LD_VAR 0 10
7183: PPUSH
7184: LD_VAR 0 3
7188: PPUSH
7189: CALL_OW 52
// end ;
7193: GO 7113
7195: POP
7196: POP
// end ;
7197: LD_VAR 0 7
7201: RET
// export function PrepareDifficulty ; begin
7202: LD_INT 0
7204: PPUSH
// if Difficulty = 1 then
7205: LD_OWVAR 67
7209: PUSH
7210: LD_INT 1
7212: EQUAL
7213: IFFALSE 7231
// begin RuSolMinLevel = 4 ;
7215: LD_ADDR_EXP 25
7219: PUSH
7220: LD_INT 4
7222: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7223: LD_ADDR_EXP 26
7227: PUSH
7228: LD_INT 6
7230: ST_TO_ADDR
// end ; if Difficulty = 2 then
7231: LD_OWVAR 67
7235: PUSH
7236: LD_INT 2
7238: EQUAL
7239: IFFALSE 7309
// begin RuSolMinLevel = 5 ;
7241: LD_ADDR_EXP 25
7245: PUSH
7246: LD_INT 5
7248: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7249: LD_ADDR_EXP 26
7253: PUSH
7254: LD_INT 6
7256: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7257: LD_INT 51
7259: PPUSH
7260: LD_INT 3
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7270: LD_INT 57
7272: PPUSH
7273: LD_INT 3
7275: PPUSH
7276: LD_INT 1
7278: PPUSH
7279: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7283: LD_INT 57
7285: PPUSH
7286: LD_INT 6
7288: PPUSH
7289: LD_INT 2
7291: PPUSH
7292: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7296: LD_INT 51
7298: PPUSH
7299: LD_INT 6
7301: PPUSH
7302: LD_INT 2
7304: PPUSH
7305: CALL_OW 322
// end ; if Difficulty = 3 then
7309: LD_OWVAR 67
7313: PUSH
7314: LD_INT 3
7316: EQUAL
7317: IFFALSE 7400
// begin RuSolMinLevel = 5 ;
7319: LD_ADDR_EXP 25
7323: PUSH
7324: LD_INT 5
7326: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7327: LD_ADDR_EXP 26
7331: PUSH
7332: LD_INT 6
7334: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7335: LD_INT 57
7337: PPUSH
7338: LD_INT 3
7340: PPUSH
7341: LD_INT 1
7343: PPUSH
7344: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7348: LD_INT 51
7350: PPUSH
7351: LD_INT 3
7353: PPUSH
7354: LD_INT 1
7356: PPUSH
7357: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7361: LD_INT 52
7363: PPUSH
7364: LD_INT 3
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7374: LD_INT 57
7376: PPUSH
7377: LD_INT 6
7379: PPUSH
7380: LD_INT 2
7382: PPUSH
7383: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7387: LD_INT 52
7389: PPUSH
7390: LD_INT 6
7392: PPUSH
7393: LD_INT 2
7395: PPUSH
7396: CALL_OW 322
// end ; end ;
7400: LD_VAR 0 1
7404: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7411: LD_ADDR_VAR 0 3
7415: PUSH
7416: LD_INT 22
7418: PUSH
7419: LD_INT 3
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7445: LD_ADDR_VAR 0 4
7449: PUSH
7450: LD_INT 4
7452: PUSH
7453: LD_INT 75
7455: PUSH
7456: LD_INT 79
7458: PUSH
7459: LD_INT 2
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 4
7470: PUSH
7471: LD_INT 113
7473: PUSH
7474: LD_INT 94
7476: PUSH
7477: LD_INT 4
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 29
7488: PUSH
7489: LD_INT 106
7491: PUSH
7492: LD_INT 97
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 26
7506: PUSH
7507: LD_INT 93
7509: PUSH
7510: LD_INT 97
7512: PUSH
7513: LD_INT 5
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 2
7524: PUSH
7525: LD_INT 100
7527: PUSH
7528: LD_INT 89
7530: PUSH
7531: LD_INT 3
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: LD_INT 17
7542: PUSH
7543: LD_INT 96
7545: PUSH
7546: LD_INT 89
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 32
7560: PUSH
7561: LD_INT 78
7563: PUSH
7564: LD_INT 94
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 32
7578: PUSH
7579: LD_INT 95
7581: PUSH
7582: LD_INT 82
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 32
7596: PUSH
7597: LD_INT 104
7599: PUSH
7600: LD_INT 85
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 32
7614: PUSH
7615: LD_INT 81
7617: PUSH
7618: LD_INT 78
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 33
7632: PUSH
7633: LD_INT 109
7635: PUSH
7636: LD_INT 90
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 33
7650: PUSH
7651: LD_INT 88
7653: PUSH
7654: LD_INT 79
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 33
7668: PUSH
7669: LD_INT 76
7671: PUSH
7672: LD_INT 87
7674: PUSH
7675: LD_INT 1
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 26
7686: PUSH
7687: LD_INT 96
7689: PUSH
7690: LD_INT 97
7692: PUSH
7693: LD_INT 5
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 26
7704: PUSH
7705: LD_INT 85
7707: PUSH
7708: LD_INT 84
7710: PUSH
7711: LD_INT 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 6
7722: PUSH
7723: LD_INT 88
7725: PUSH
7726: LD_INT 95
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 19
7740: PUSH
7741: LD_INT 103
7743: PUSH
7744: LD_INT 89
7746: PUSH
7747: LD_INT 4
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 16
7758: PUSH
7759: LD_INT 97
7761: PUSH
7762: LD_INT 86
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 24
7776: PUSH
7777: LD_INT 100
7779: PUSH
7780: LD_INT 85
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: ST_TO_ADDR
// for i := 1 to buildingsTab do
7813: LD_ADDR_VAR 0 2
7817: PUSH
7818: DOUBLE
7819: LD_INT 1
7821: DEC
7822: ST_TO_ADDR
7823: LD_VAR 0 4
7827: PUSH
7828: FOR_TO
7829: IFFALSE 7902
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7831: LD_VAR 0 3
7835: PPUSH
7836: LD_VAR 0 4
7840: PUSH
7841: LD_VAR 0 2
7845: ARRAY
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: LD_VAR 0 4
7855: PUSH
7856: LD_VAR 0 2
7860: ARRAY
7861: PUSH
7862: LD_INT 2
7864: ARRAY
7865: PPUSH
7866: LD_VAR 0 4
7870: PUSH
7871: LD_VAR 0 2
7875: ARRAY
7876: PUSH
7877: LD_INT 3
7879: ARRAY
7880: PPUSH
7881: LD_VAR 0 4
7885: PUSH
7886: LD_VAR 0 2
7890: ARRAY
7891: PUSH
7892: LD_INT 4
7894: ARRAY
7895: PPUSH
7896: CALL_OW 205
7900: GO 7828
7902: POP
7903: POP
// end ;
7904: LD_VAR 0 1
7908: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7909: LD_INT 0
7911: PPUSH
7912: PPUSH
// for i in charactersList do
7913: LD_ADDR_VAR 0 4
7917: PUSH
7918: LD_VAR 0 1
7922: PUSH
7923: FOR_IN
7924: IFFALSE 7953
// begin if IsOk ( i ) then
7926: LD_VAR 0 4
7930: PPUSH
7931: CALL_OW 302
7935: IFFALSE 7951
// SaveCharacters ( i , ident ) ;
7937: LD_VAR 0 4
7941: PPUSH
7942: LD_VAR 0 2
7946: PPUSH
7947: CALL_OW 38
// end ;
7951: GO 7923
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7960: LD_INT 0
7962: PPUSH
7963: PPUSH
7964: PPUSH
7965: PPUSH
// for i = 1 to 72 do
7966: LD_ADDR_VAR 0 5
7970: PUSH
7971: DOUBLE
7972: LD_INT 1
7974: DEC
7975: ST_TO_ADDR
7976: LD_INT 72
7978: PUSH
7979: FOR_TO
7980: IFFALSE 8038
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7982: LD_VAR 0 5
7986: PPUSH
7987: LD_VAR 0 1
7991: PPUSH
7992: CALL_OW 321
7996: PUSH
7997: LD_INT 1
7999: EQUAL
8000: PUSH
8001: LD_VAR 0 5
8005: PPUSH
8006: LD_VAR 0 3
8010: PPUSH
8011: CALL_OW 482
8015: PUSH
8016: LD_INT 1
8018: EQUAL
8019: AND
8020: IFFALSE 8036
// AddComResearch ( lab , i ) ;
8022: LD_VAR 0 2
8026: PPUSH
8027: LD_VAR 0 5
8031: PPUSH
8032: CALL_OW 184
8036: GO 7979
8038: POP
8039: POP
// end ;
8040: LD_VAR 0 4
8044: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8045: LD_INT 0
8047: PPUSH
8048: PPUSH
8049: PPUSH
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8055: LD_ADDR_VAR 0 6
8059: PUSH
8060: LD_VAR 0 2
8064: PPUSH
8065: LD_INT 22
8067: PUSH
8068: LD_VAR 0 1
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 56
8079: PUSH
8080: EMPTY
8081: LIST
8082: PUSH
8083: LD_INT 24
8085: PUSH
8086: LD_INT 700
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 3
8095: PUSH
8096: LD_INT 60
8098: PUSH
8099: EMPTY
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: LD_INT 2
8108: PUSH
8109: LD_INT 25
8111: PUSH
8112: LD_INT 1
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 25
8121: PUSH
8122: LD_INT 5
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 8
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 25
8141: PUSH
8142: LD_INT 9
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 70
8167: PUSH
8168: LD_EXP 24
8172: PUSH
8173: EMPTY
8174: LIST
8175: DIFF
8176: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8177: LD_ADDR_VAR 0 7
8181: PUSH
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_INT 22
8189: PUSH
8190: LD_VAR 0 1
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 30
8201: PUSH
8202: LD_INT 32
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 58
8211: PUSH
8212: EMPTY
8213: LIST
8214: PUSH
8215: LD_INT 24
8217: PUSH
8218: LD_INT 251
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: PPUSH
8231: CALL_OW 70
8235: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8236: LD_ADDR_VAR 0 9
8240: PUSH
8241: LD_VAR 0 2
8245: PPUSH
8246: LD_INT 22
8248: PUSH
8249: LD_VAR 0 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 30
8263: PUSH
8264: LD_INT 4
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 30
8273: PUSH
8274: LD_INT 5
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 24
8288: PUSH
8289: LD_INT 251
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 70
8305: ST_TO_ADDR
// if barrackList > 0 then
8306: LD_VAR 0 9
8310: PUSH
8311: LD_INT 0
8313: GREATER
8314: IFFALSE 8462
// begin if turretList = 0 then
8316: LD_VAR 0 7
8320: PUSH
8321: LD_INT 0
8323: EQUAL
8324: IFFALSE 8366
// begin if soldiers_list > 0 then
8326: LD_VAR 0 6
8330: PUSH
8331: LD_INT 0
8333: GREATER
8334: IFFALSE 8364
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8336: LD_VAR 0 6
8340: PPUSH
8341: LD_VAR 0 9
8345: PUSH
8346: LD_INT 1
8348: PPUSH
8349: LD_VAR 0 9
8353: PPUSH
8354: CALL_OW 12
8358: ARRAY
8359: PPUSH
8360: CALL_OW 120
// end else
8364: GO 8462
// begin for i in barrackList do
8366: LD_ADDR_VAR 0 4
8370: PUSH
8371: LD_VAR 0 9
8375: PUSH
8376: FOR_IN
8377: IFFALSE 8460
// begin insideUnits = UnitsInside ( i ) ;
8379: LD_ADDR_VAR 0 10
8383: PUSH
8384: LD_VAR 0 4
8388: PPUSH
8389: CALL_OW 313
8393: ST_TO_ADDR
// if insideUnits > 0 then
8394: LD_VAR 0 10
8398: PUSH
8399: LD_INT 0
8401: GREATER
8402: IFFALSE 8426
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8404: LD_VAR 0 10
8408: PUSH
8409: LD_INT 1
8411: ARRAY
8412: PPUSH
8413: LD_VAR 0 7
8417: PUSH
8418: LD_INT 1
8420: ARRAY
8421: PPUSH
8422: CALL_OW 120
// if soldiers_list > 0 then
8426: LD_VAR 0 6
8430: PUSH
8431: LD_INT 0
8433: GREATER
8434: IFFALSE 8458
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8436: LD_VAR 0 6
8440: PUSH
8441: LD_INT 1
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 7
8449: PUSH
8450: LD_INT 1
8452: ARRAY
8453: PPUSH
8454: CALL_OW 120
// end ;
8458: GO 8376
8460: POP
8461: POP
// end ; end ; end ;
8462: LD_VAR 0 3
8466: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8467: LD_INT 0
8469: PPUSH
8470: PPUSH
8471: PPUSH
8472: PPUSH
8473: PPUSH
8474: PPUSH
// for i = 1 to vehCount do
8475: LD_ADDR_VAR 0 8
8479: PUSH
8480: DOUBLE
8481: LD_INT 1
8483: DEC
8484: ST_TO_ADDR
8485: LD_VAR 0 6
8489: PUSH
8490: FOR_TO
8491: IFFALSE 8698
// begin uc_side = side ;
8493: LD_ADDR_OWVAR 20
8497: PUSH
8498: LD_VAR 0 1
8502: ST_TO_ADDR
// uc_nation = nation ;
8503: LD_ADDR_OWVAR 21
8507: PUSH
8508: LD_VAR 0 3
8512: ST_TO_ADDR
// vc_Chassis = 22 ;
8513: LD_ADDR_OWVAR 37
8517: PUSH
8518: LD_INT 22
8520: ST_TO_ADDR
// vc_engine = 1 ;
8521: LD_ADDR_OWVAR 39
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// vc_control = 1 ;
8529: LD_ADDR_OWVAR 38
8533: PUSH
8534: LD_INT 1
8536: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8537: LD_ADDR_OWVAR 40
8541: PUSH
8542: LD_INT 43
8544: PUSH
8545: LD_INT 44
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 1
8554: PPUSH
8555: LD_INT 2
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: ST_TO_ADDR
// veh = CreateVehicle ;
8564: LD_ADDR_VAR 0 12
8568: PUSH
8569: CALL_OW 45
8573: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8574: LD_VAR 0 12
8578: PPUSH
8579: LD_VAR 0 2
8583: PPUSH
8584: LD_INT 0
8586: PPUSH
8587: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8591: LD_ADDR_EXP 32
8595: PUSH
8596: LD_EXP 32
8600: PUSH
8601: LD_VAR 0 12
8605: ADD
8606: ST_TO_ADDR
// hc_class = 3 ;
8607: LD_ADDR_OWVAR 28
8611: PUSH
8612: LD_INT 3
8614: ST_TO_ADDR
// hc_name =  ;
8615: LD_ADDR_OWVAR 26
8619: PUSH
8620: LD_STRING 
8622: ST_TO_ADDR
// hc_gallery =  ;
8623: LD_ADDR_OWVAR 33
8627: PUSH
8628: LD_STRING 
8630: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8631: LD_INT 0
8633: PPUSH
8634: LD_INT 3
8636: PPUSH
8637: LD_EXP 25
8641: PPUSH
8642: LD_EXP 26
8646: PPUSH
8647: CALL_OW 12
8651: PPUSH
8652: CALL_OW 380
// un = CreateHuman ;
8656: LD_ADDR_VAR 0 10
8660: PUSH
8661: CALL_OW 44
8665: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8666: LD_VAR 0 10
8670: PPUSH
8671: LD_VAR 0 12
8675: PPUSH
8676: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8680: LD_ADDR_EXP 32
8684: PUSH
8685: LD_EXP 32
8689: PUSH
8690: LD_VAR 0 10
8694: ADD
8695: ST_TO_ADDR
// end ;
8696: GO 8490
8698: POP
8699: POP
// end ;
8700: LD_VAR 0 7
8704: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8705: LD_INT 0
8707: PPUSH
8708: PPUSH
8709: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8710: LD_VAR 0 2
8714: PPUSH
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: PPUSH
8730: CALL_OW 70
8734: PUSH
8735: LD_INT 0
8737: EQUAL
8738: PUSH
8739: LD_EXP 32
8743: PUSH
8744: LD_INT 0
8746: GREATER
8747: AND
8748: IFFALSE 8777
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8750: LD_EXP 32
8754: PPUSH
8755: LD_INT 65
8757: PPUSH
8758: LD_INT 68
8760: PPUSH
8761: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8765: LD_EXP 32
8769: PPUSH
8770: LD_INT 100
8772: PPUSH
8773: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 22
8784: PUSH
8785: LD_VAR 0 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: PPUSH
8797: CALL_OW 70
8801: PUSH
8802: LD_INT 0
8804: GREATER
8805: PUSH
8806: LD_EXP 32
8810: PUSH
8811: LD_INT 0
8813: GREATER
8814: AND
8815: IFFALSE 8894
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8817: LD_EXP 32
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_INT 22
8829: PUSH
8830: LD_VAR 0 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: PPUSH
8842: CALL_OW 70
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PPUSH
8851: CALL_OW 250
8855: PPUSH
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 22
8863: PUSH
8864: LD_VAR 0 1
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: PPUSH
8876: CALL_OW 70
8880: PUSH
8881: LD_INT 1
8883: ARRAY
8884: PPUSH
8885: CALL_OW 251
8889: PPUSH
8890: CALL_OW 114
// end ;
8894: LD_VAR 0 3
8898: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8899: LD_INT 0
8901: PPUSH
8902: PPUSH
8903: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8904: LD_INT 22
8906: PUSH
8907: LD_VAR 0 1
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 2
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 69
8934: PUSH
8935: LD_VAR 0 3
8939: LESSEQUAL
8940: IFFALSE 9048
// begin for i = 1 to vehCount do
8942: LD_ADDR_VAR 0 9
8946: PUSH
8947: DOUBLE
8948: LD_INT 1
8950: DEC
8951: ST_TO_ADDR
8952: LD_VAR 0 3
8956: PUSH
8957: FOR_TO
8958: IFFALSE 9046
// begin weapon = weaponTab [ i ] ;
8960: LD_ADDR_VAR 0 10
8964: PUSH
8965: LD_VAR 0 4
8969: PUSH
8970: LD_VAR 0 9
8974: ARRAY
8975: ST_TO_ADDR
// if weapon = 46 then
8976: LD_VAR 0 10
8980: PUSH
8981: LD_INT 46
8983: EQUAL
8984: IFFALSE 9015
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_INT 24
8993: PPUSH
8994: LD_VAR 0 5
8998: PPUSH
8999: LD_VAR 0 6
9003: PPUSH
9004: LD_VAR 0 10
9008: PPUSH
9009: CALL_OW 185
// end else
9013: GO 9044
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9015: LD_VAR 0 2
9019: PPUSH
9020: LD_VAR 0 7
9024: PPUSH
9025: LD_VAR 0 5
9029: PPUSH
9030: LD_VAR 0 6
9034: PPUSH
9035: LD_VAR 0 10
9039: PPUSH
9040: CALL_OW 185
// end ; end ;
9044: GO 8957
9046: POP
9047: POP
// end ; end ;
9048: LD_VAR 0 8
9052: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9053: LD_INT 0
9055: PPUSH
9056: PPUSH
9057: PPUSH
9058: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9059: LD_ADDR_VAR 0 8
9063: PUSH
9064: LD_INT 22
9066: PUSH
9067: LD_VAR 0 1
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 21
9078: PUSH
9079: LD_INT 2
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 3
9088: PUSH
9089: LD_INT 24
9091: PUSH
9092: LD_INT 650
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: ST_TO_ADDR
// if damageVehicles > 0 then
9113: LD_VAR 0 8
9117: PUSH
9118: LD_INT 0
9120: GREATER
9121: IFFALSE 9142
// ComMoveXY ( damageVehicles , repX , repY ) ;
9123: LD_VAR 0 8
9127: PPUSH
9128: LD_VAR 0 3
9132: PPUSH
9133: LD_VAR 0 4
9137: PPUSH
9138: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9142: LD_VAR 0 8
9146: PPUSH
9147: LD_INT 95
9149: PUSH
9150: LD_VAR 0 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 3
9161: PUSH
9162: LD_INT 58
9164: PUSH
9165: EMPTY
9166: LIST
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 72
9180: PUSH
9181: LD_INT 0
9183: GREATER
9184: IFFALSE 9251
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9186: LD_ADDR_VAR 0 6
9190: PUSH
9191: LD_VAR 0 8
9195: PPUSH
9196: LD_INT 95
9198: PUSH
9199: LD_VAR 0 2
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 3
9210: PUSH
9211: LD_INT 58
9213: PUSH
9214: EMPTY
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PPUSH
9225: CALL_OW 72
9229: PUSH
9230: FOR_IN
9231: IFFALSE 9249
// ComExitVehicle ( UnitsInside ( i ) ) ;
9233: LD_VAR 0 6
9237: PPUSH
9238: CALL_OW 313
9242: PPUSH
9243: CALL_OW 121
9247: GO 9230
9249: POP
9250: POP
// end ;
9251: LD_VAR 0 5
9255: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9256: LD_INT 0
9258: PPUSH
9259: PPUSH
9260: PPUSH
9261: PPUSH
9262: PPUSH
9263: PPUSH
9264: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9265: LD_ADDR_VAR 0 8
9269: PUSH
9270: LD_INT 22
9272: PUSH
9273: LD_VAR 0 1
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: PUSH
9282: LD_INT 21
9284: PUSH
9285: LD_INT 2
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 24
9294: PUSH
9295: LD_INT 250
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 3
9304: PUSH
9305: LD_INT 58
9307: PUSH
9308: EMPTY
9309: LIST
9310: PUSH
9311: LD_INT 2
9313: PUSH
9314: LD_INT 34
9316: PUSH
9317: LD_INT 43
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 34
9326: PUSH
9327: LD_INT 44
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9366: LD_INT 22
9368: PUSH
9369: LD_VAR 0 1
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 21
9380: PUSH
9381: LD_INT 2
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 24
9390: PUSH
9391: LD_INT 1000
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 3
9400: PUSH
9401: LD_INT 58
9403: PUSH
9404: EMPTY
9405: LIST
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 34
9412: PUSH
9413: LD_INT 43
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 34
9422: PUSH
9423: LD_INT 44
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 34
9432: PUSH
9433: LD_INT 46
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: PUSH
9462: LD_INT 5
9464: PUSH
9465: LD_INT 6
9467: PUSH
9468: LD_INT 7
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: LD_OWVAR 67
9480: ARRAY
9481: GREATEREQUAL
9482: IFFALSE 10047
// repeat wait ( 0 0$1 ) ;
9484: LD_INT 35
9486: PPUSH
9487: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9491: LD_ADDR_VAR 0 8
9495: PUSH
9496: LD_INT 22
9498: PUSH
9499: LD_VAR 0 1
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 21
9510: PUSH
9511: LD_INT 2
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 24
9520: PUSH
9521: LD_INT 250
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: LD_INT 34
9533: PUSH
9534: LD_INT 43
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 34
9543: PUSH
9544: LD_INT 44
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 34
9553: PUSH
9554: LD_INT 46
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 3
9569: PUSH
9570: LD_INT 58
9572: PUSH
9573: EMPTY
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: PPUSH
9587: CALL_OW 69
9591: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9592: LD_INT 22
9594: PUSH
9595: LD_VAR 0 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 95
9606: PUSH
9607: LD_VAR 0 2
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: NOT
9625: PUSH
9626: LD_VAR 0 11
9630: PUSH
9631: LD_INT 0
9633: EQUAL
9634: AND
9635: IFFALSE 9690
// for i := 1 to wayX do
9637: LD_ADDR_VAR 0 6
9641: PUSH
9642: DOUBLE
9643: LD_INT 1
9645: DEC
9646: ST_TO_ADDR
9647: LD_VAR 0 3
9651: PUSH
9652: FOR_TO
9653: IFFALSE 9688
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9655: LD_VAR 0 8
9659: PPUSH
9660: LD_VAR 0 3
9664: PUSH
9665: LD_VAR 0 6
9669: ARRAY
9670: PPUSH
9671: LD_VAR 0 4
9675: PUSH
9676: LD_VAR 0 6
9680: ARRAY
9681: PPUSH
9682: CALL_OW 114
9686: GO 9652
9688: POP
9689: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9690: LD_INT 22
9692: PUSH
9693: LD_VAR 0 1
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 95
9704: PUSH
9705: LD_VAR 0 2
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: IFFALSE 9946
// begin seeEnemy = 1 ;
9724: LD_ADDR_VAR 0 11
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// for j in vehiclesOK do
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_VAR 0 8
9741: PUSH
9742: FOR_IN
9743: IFFALSE 9944
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9745: LD_ADDR_VAR 0 9
9749: PUSH
9750: LD_INT 81
9752: PUSH
9753: LD_VAR 0 1
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PUSH
9762: LD_INT 101
9764: PUSH
9765: LD_INT 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PPUSH
9776: CALL_OW 69
9780: PPUSH
9781: LD_VAR 0 7
9785: PPUSH
9786: CALL_OW 74
9790: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9791: LD_ADDR_VAR 0 10
9795: PUSH
9796: LD_INT 81
9798: PUSH
9799: LD_VAR 0 1
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 101
9810: PUSH
9811: LD_INT 1
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 2
9820: PUSH
9821: LD_INT 59
9823: PUSH
9824: EMPTY
9825: LIST
9826: PUSH
9827: LD_INT 21
9829: PUSH
9830: LD_INT 1
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 2
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: PPUSH
9861: CALL_OW 69
9865: PPUSH
9866: LD_VAR 0 7
9870: PPUSH
9871: CALL_OW 74
9875: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9876: LD_VAR 0 7
9880: PPUSH
9881: LD_VAR 0 9
9885: PPUSH
9886: CALL_OW 296
9890: PUSH
9891: LD_INT 8
9893: PLUS
9894: PUSH
9895: LD_VAR 0 7
9899: PPUSH
9900: LD_VAR 0 10
9904: PPUSH
9905: CALL_OW 296
9909: LESS
9910: IFFALSE 9928
// ComAttackUnit ( j , target1 ) else
9912: LD_VAR 0 7
9916: PPUSH
9917: LD_VAR 0 9
9921: PPUSH
9922: CALL_OW 115
9926: GO 9942
// ComAttackUnit ( j , target2 ) ;
9928: LD_VAR 0 7
9932: PPUSH
9933: LD_VAR 0 10
9937: PPUSH
9938: CALL_OW 115
// end ;
9942: GO 9742
9944: POP
9945: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9946: LD_INT 22
9948: PUSH
9949: LD_VAR 0 1
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 24
9970: PUSH
9971: LD_INT 250
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: LD_INT 34
9983: PUSH
9984: LD_INT 43
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 34
9993: PUSH
9994: LD_INT 44
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 34
10003: PUSH
10004: LD_INT 46
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 3
10019: PUSH
10020: LD_INT 58
10022: PUSH
10023: EMPTY
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 69
10041: PUSH
10042: LD_INT 0
10044: EQUAL
10045: IFFALSE 9484
// seeEnemy = 0 ;
10047: LD_ADDR_VAR 0 11
10051: PUSH
10052: LD_INT 0
10054: ST_TO_ADDR
// end ;
10055: LD_VAR 0 5
10059: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10060: LD_INT 0
10062: PPUSH
10063: PPUSH
10064: PPUSH
10065: PPUSH
10066: PPUSH
10067: PPUSH
// repeat wait ( 0 0$1 ) ;
10068: LD_INT 35
10070: PPUSH
10071: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10075: LD_ADDR_VAR 0 7
10079: PUSH
10080: LD_INT 22
10082: PUSH
10083: LD_VAR 0 1
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: LD_INT 21
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 24
10104: PUSH
10105: LD_INT 651
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 69
10121: ST_TO_ADDR
// for j in vehiclesOK do
10122: LD_ADDR_VAR 0 4
10126: PUSH
10127: LD_VAR 0 7
10131: PUSH
10132: FOR_IN
10133: IFFALSE 10334
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10135: LD_ADDR_VAR 0 5
10139: PUSH
10140: LD_INT 81
10142: PUSH
10143: LD_VAR 0 1
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 101
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: PPUSH
10171: LD_VAR 0 4
10175: PPUSH
10176: CALL_OW 74
10180: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10181: LD_ADDR_VAR 0 6
10185: PUSH
10186: LD_INT 81
10188: PUSH
10189: LD_VAR 0 1
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 101
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 59
10213: PUSH
10214: EMPTY
10215: LIST
10216: PUSH
10217: LD_INT 21
10219: PUSH
10220: LD_INT 1
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 21
10229: PUSH
10230: LD_INT 2
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: PPUSH
10251: CALL_OW 69
10255: PPUSH
10256: LD_VAR 0 4
10260: PPUSH
10261: CALL_OW 74
10265: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10266: LD_VAR 0 4
10270: PPUSH
10271: LD_VAR 0 5
10275: PPUSH
10276: CALL_OW 296
10280: PUSH
10281: LD_INT 8
10283: PLUS
10284: PUSH
10285: LD_VAR 0 4
10289: PPUSH
10290: LD_VAR 0 6
10294: PPUSH
10295: CALL_OW 296
10299: LESS
10300: IFFALSE 10318
// ComAttackUnit ( j , target1 ) else
10302: LD_VAR 0 4
10306: PPUSH
10307: LD_VAR 0 5
10311: PPUSH
10312: CALL_OW 115
10316: GO 10332
// ComAttackUnit ( j , target2 ) ;
10318: LD_VAR 0 4
10322: PPUSH
10323: LD_VAR 0 6
10327: PPUSH
10328: CALL_OW 115
// end ;
10332: GO 10132
10334: POP
10335: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10336: LD_INT 22
10338: PUSH
10339: LD_VAR 0 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 24
10360: PUSH
10361: LD_INT 250
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: LIST
10372: PPUSH
10373: CALL_OW 69
10377: PUSH
10378: LD_INT 0
10380: EQUAL
10381: IFFALSE 10068
// end ;
10383: LD_VAR 0 2
10387: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10388: LD_INT 0
10390: PPUSH
10391: PPUSH
10392: PPUSH
10393: PPUSH
10394: PPUSH
10395: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10396: LD_ADDR_VAR 0 8
10400: PUSH
10401: LD_VAR 0 2
10405: PPUSH
10406: CALL_OW 313
10410: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10411: LD_ADDR_VAR 0 9
10415: PUSH
10416: LD_VAR 0 3
10420: PPUSH
10421: LD_INT 22
10423: PUSH
10424: LD_VAR 0 1
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 25
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 24
10445: PUSH
10446: LD_INT 750
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 3
10455: PUSH
10456: LD_INT 54
10458: PUSH
10459: EMPTY
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 70
10476: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10477: LD_ADDR_VAR 0 6
10481: PUSH
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 22
10489: PUSH
10490: LD_VAR 0 1
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 21
10501: PUSH
10502: LD_INT 3
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 3
10511: PUSH
10512: LD_INT 24
10514: PUSH
10515: LD_INT 1000
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: PUSH
10531: EMPTY
10532: LIST
10533: PPUSH
10534: CALL_OW 70
10538: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10539: LD_VAR 0 6
10543: NOT
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_VAR 0 1
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 25
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 24
10569: PUSH
10570: LD_INT 250
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: NOT
10587: AND
10588: IFFALSE 10592
// exit ;
10590: GO 10789
// if buildings_list > 0 and engineerOkInside then
10592: LD_VAR 0 6
10596: PUSH
10597: LD_INT 0
10599: GREATER
10600: PUSH
10601: LD_VAR 0 8
10605: AND
10606: IFFALSE 10632
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
10608: LD_VAR 0 8
10612: PPUSH
10613: LD_INT 25
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PPUSH
10623: CALL_OW 72
10627: PPUSH
10628: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10632: LD_VAR 0 6
10636: PUSH
10637: LD_INT 0
10639: GREATER
10640: PUSH
10641: LD_VAR 0 9
10645: PUSH
10646: LD_INT 0
10648: GREATER
10649: AND
10650: IFFALSE 10670
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10652: LD_VAR 0 9
10656: PPUSH
10657: LD_VAR 0 6
10661: PUSH
10662: LD_INT 1
10664: ARRAY
10665: PPUSH
10666: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10670: LD_VAR 0 6
10674: PUSH
10675: LD_INT 0
10677: EQUAL
10678: PUSH
10679: LD_VAR 0 4
10683: PUSH
10684: LD_INT 0
10686: EQUAL
10687: AND
10688: PUSH
10689: LD_VAR 0 9
10693: PUSH
10694: LD_INT 0
10696: GREATER
10697: AND
10698: IFFALSE 10714
// ComEnterUnit ( engineerOkOutside , building ) ;
10700: LD_VAR 0 9
10704: PPUSH
10705: LD_VAR 0 2
10709: PPUSH
10710: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10714: LD_VAR 0 9
10718: PUSH
10719: LD_INT 0
10721: GREATER
10722: PUSH
10723: LD_VAR 0 6
10727: PUSH
10728: LD_INT 0
10730: EQUAL
10731: AND
10732: PUSH
10733: LD_VAR 0 4
10737: PUSH
10738: LD_INT 0
10740: GREATER
10741: AND
10742: IFFALSE 10789
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10744: LD_VAR 0 9
10748: PPUSH
10749: LD_VAR 0 4
10753: PUSH
10754: LD_INT 1
10756: ARRAY
10757: PPUSH
10758: LD_VAR 0 4
10762: PUSH
10763: LD_INT 2
10765: ARRAY
10766: PPUSH
10767: LD_VAR 0 4
10771: PUSH
10772: LD_INT 3
10774: ARRAY
10775: PPUSH
10776: LD_VAR 0 4
10780: PUSH
10781: LD_INT 4
10783: ARRAY
10784: PPUSH
10785: CALL_OW 145
// end ;
10789: LD_VAR 0 5
10793: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10794: LD_INT 0
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10805: LD_ADDR_VAR 0 6
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_VAR 0 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 4
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 23
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 24
10844: PUSH
10845: LD_INT 251
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: PPUSH
10858: CALL_OW 69
10862: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10863: LD_ADDR_VAR 0 7
10867: PUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: LD_INT 22
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 23
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 25
10897: PUSH
10898: LD_INT 4
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 50
10907: PUSH
10908: EMPTY
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PPUSH
10917: CALL_OW 70
10921: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10922: LD_ADDR_VAR 0 10
10926: PUSH
10927: LD_VAR 0 3
10931: PPUSH
10932: LD_INT 22
10934: PUSH
10935: LD_VAR 0 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 21
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 3
10956: PUSH
10957: LD_INT 25
10959: PUSH
10960: LD_INT 3
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 3
10973: PUSH
10974: LD_INT 24
10976: PUSH
10977: LD_INT 750
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: PPUSH
10994: CALL_OW 70
10998: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10999: LD_ADDR_VAR 0 11
11003: PUSH
11004: LD_VAR 0 2
11008: PPUSH
11009: LD_INT 22
11011: PUSH
11012: LD_VAR 0 1
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 21
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 25
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 3
11050: PUSH
11051: LD_INT 24
11053: PUSH
11054: LD_INT 1000
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: PPUSH
11071: CALL_OW 70
11075: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11076: LD_VAR 0 10
11080: NOT
11081: PUSH
11082: LD_VAR 0 11
11086: NOT
11087: AND
11088: PUSH
11089: LD_VAR 0 6
11093: NOT
11094: AND
11095: IFFALSE 11099
// exit ;
11097: GO 11333
// if damageUnits > 0 and sci_list > 0 then
11099: LD_VAR 0 10
11103: PUSH
11104: LD_INT 0
11106: GREATER
11107: PUSH
11108: LD_VAR 0 6
11112: PUSH
11113: LD_INT 0
11115: GREATER
11116: AND
11117: IFFALSE 11133
// ComMoveToArea ( damageUnits , healArea ) ;
11119: LD_VAR 0 10
11123: PPUSH
11124: LD_VAR 0 2
11128: PPUSH
11129: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11133: LD_VAR 0 11
11137: PUSH
11138: LD_INT 0
11140: GREATER
11141: PUSH
11142: LD_VAR 0 6
11146: PUSH
11147: LD_INT 0
11149: GREATER
11150: AND
11151: IFFALSE 11162
// ComExitBuilding ( sci_list ) ;
11153: LD_VAR 0 6
11157: PPUSH
11158: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11162: LD_VAR 0 11
11166: PUSH
11167: LD_INT 0
11169: GREATER
11170: PUSH
11171: LD_VAR 0 7
11175: PUSH
11176: LD_INT 0
11178: GREATER
11179: AND
11180: IFFALSE 11200
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11182: LD_VAR 0 7
11186: PPUSH
11187: LD_VAR 0 11
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: PPUSH
11196: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11200: LD_VAR 0 10
11204: PUSH
11205: LD_INT 0
11207: EQUAL
11208: PUSH
11209: LD_VAR 0 11
11213: PUSH
11214: LD_INT 0
11216: EQUAL
11217: AND
11218: PUSH
11219: LD_VAR 0 7
11223: PUSH
11224: LD_INT 0
11226: GREATER
11227: AND
11228: IFFALSE 11333
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11230: LD_ADDR_VAR 0 12
11234: PUSH
11235: LD_INT 22
11237: PUSH
11238: LD_VAR 0 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 30
11259: PUSH
11260: LD_INT 8
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 69
11276: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11277: LD_ADDR_VAR 0 13
11281: PUSH
11282: LD_INT 1
11284: PPUSH
11285: LD_VAR 0 12
11289: PPUSH
11290: CALL_OW 12
11294: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11295: LD_VAR 0 7
11299: PPUSH
11300: LD_INT 3
11302: PUSH
11303: LD_INT 60
11305: PUSH
11306: EMPTY
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 72
11317: PPUSH
11318: LD_VAR 0 12
11322: PUSH
11323: LD_VAR 0 13
11327: ARRAY
11328: PPUSH
11329: CALL_OW 120
// end ; end ;
11333: LD_VAR 0 5
11337: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11338: LD_INT 0
11340: PPUSH
11341: PPUSH
11342: PPUSH
11343: PPUSH
11344: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11345: LD_ADDR_VAR 0 6
11349: PUSH
11350: LD_INT 22
11352: PUSH
11353: LD_VAR 0 1
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: LD_INT 30
11367: PUSH
11368: LD_INT 31
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 30
11377: PUSH
11378: LD_INT 32
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 30
11387: PUSH
11388: LD_INT 33
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 4
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 30
11407: PUSH
11408: LD_INT 5
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11432: LD_ADDR_VAR 0 7
11436: PUSH
11437: LD_INT 22
11439: PUSH
11440: LD_VAR 0 2
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 21
11451: PUSH
11452: LD_INT 3
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 58
11461: PUSH
11462: EMPTY
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11475: LD_VAR 0 6
11479: PUSH
11480: LD_INT 0
11482: GREATER
11483: PUSH
11484: LD_VAR 0 7
11488: PUSH
11489: LD_INT 0
11491: GREATER
11492: AND
11493: IFFALSE 11563
// begin for i in turretsList do
11495: LD_ADDR_VAR 0 4
11499: PUSH
11500: LD_VAR 0 6
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11561
// begin for j in enemyBuildings do
11508: LD_ADDR_VAR 0 5
11512: PUSH
11513: LD_VAR 0 7
11517: PUSH
11518: FOR_IN
11519: IFFALSE 11557
// begin if GetDistUnits ( i , j ) < 20 then
11521: LD_VAR 0 4
11525: PPUSH
11526: LD_VAR 0 5
11530: PPUSH
11531: CALL_OW 296
11535: PUSH
11536: LD_INT 20
11538: LESS
11539: IFFALSE 11555
// begin ComAttackUnit ( i , j ) ;
11541: LD_VAR 0 4
11545: PPUSH
11546: LD_VAR 0 5
11550: PPUSH
11551: CALL_OW 115
// end ; end ;
11555: GO 11518
11557: POP
11558: POP
// end ;
11559: GO 11505
11561: POP
11562: POP
// end ; end ;
11563: LD_VAR 0 3
11567: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11568: LD_INT 0
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
11579: PPUSH
11580: PPUSH
// for i = 1 to medicCount do
11581: LD_ADDR_VAR 0 14
11585: PUSH
11586: DOUBLE
11587: LD_INT 1
11589: DEC
11590: ST_TO_ADDR
11591: LD_VAR 0 7
11595: PUSH
11596: FOR_TO
11597: IFFALSE 11679
// begin uc_side = side ;
11599: LD_ADDR_OWVAR 20
11603: PUSH
11604: LD_VAR 0 1
11608: ST_TO_ADDR
// uc_nation = nation ;
11609: LD_ADDR_OWVAR 21
11613: PUSH
11614: LD_VAR 0 2
11618: ST_TO_ADDR
// hc_name =  ;
11619: LD_ADDR_OWVAR 26
11623: PUSH
11624: LD_STRING 
11626: ST_TO_ADDR
// hc_gallery =  ;
11627: LD_ADDR_OWVAR 33
11631: PUSH
11632: LD_STRING 
11634: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11635: LD_INT 0
11637: PPUSH
11638: LD_INT 4
11640: PPUSH
11641: LD_VAR 0 8
11645: PPUSH
11646: CALL_OW 380
// un = CreateHuman ;
11650: LD_ADDR_VAR 0 16
11654: PUSH
11655: CALL_OW 44
11659: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11660: LD_VAR 0 16
11664: PPUSH
11665: LD_VAR 0 9
11669: PPUSH
11670: LD_INT 0
11672: PPUSH
11673: CALL_OW 49
// end ;
11677: GO 11596
11679: POP
11680: POP
// for i = 1 to soldierCount do
11681: LD_ADDR_VAR 0 14
11685: PUSH
11686: DOUBLE
11687: LD_INT 1
11689: DEC
11690: ST_TO_ADDR
11691: LD_VAR 0 3
11695: PUSH
11696: FOR_TO
11697: IFFALSE 11779
// begin uc_side = side ;
11699: LD_ADDR_OWVAR 20
11703: PUSH
11704: LD_VAR 0 1
11708: ST_TO_ADDR
// uc_nation = nation ;
11709: LD_ADDR_OWVAR 21
11713: PUSH
11714: LD_VAR 0 2
11718: ST_TO_ADDR
// hc_name =  ;
11719: LD_ADDR_OWVAR 26
11723: PUSH
11724: LD_STRING 
11726: ST_TO_ADDR
// hc_gallery =  ;
11727: LD_ADDR_OWVAR 33
11731: PUSH
11732: LD_STRING 
11734: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11735: LD_INT 0
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: LD_VAR 0 8
11745: PPUSH
11746: CALL_OW 380
// un = CreateHuman ;
11750: LD_ADDR_VAR 0 16
11754: PUSH
11755: CALL_OW 44
11759: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11760: LD_VAR 0 16
11764: PPUSH
11765: LD_VAR 0 9
11769: PPUSH
11770: LD_INT 0
11772: PPUSH
11773: CALL_OW 49
// end ;
11777: GO 11696
11779: POP
11780: POP
// for i = 1 to sniperCount do
11781: LD_ADDR_VAR 0 14
11785: PUSH
11786: DOUBLE
11787: LD_INT 1
11789: DEC
11790: ST_TO_ADDR
11791: LD_VAR 0 4
11795: PUSH
11796: FOR_TO
11797: IFFALSE 11879
// begin uc_side = side ;
11799: LD_ADDR_OWVAR 20
11803: PUSH
11804: LD_VAR 0 1
11808: ST_TO_ADDR
// uc_nation = nation ;
11809: LD_ADDR_OWVAR 21
11813: PUSH
11814: LD_VAR 0 2
11818: ST_TO_ADDR
// hc_name =  ;
11819: LD_ADDR_OWVAR 26
11823: PUSH
11824: LD_STRING 
11826: ST_TO_ADDR
// hc_gallery =  ;
11827: LD_ADDR_OWVAR 33
11831: PUSH
11832: LD_STRING 
11834: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11835: LD_INT 0
11837: PPUSH
11838: LD_INT 5
11840: PPUSH
11841: LD_VAR 0 8
11845: PPUSH
11846: CALL_OW 380
// un = CreateHuman ;
11850: LD_ADDR_VAR 0 16
11854: PUSH
11855: CALL_OW 44
11859: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11860: LD_VAR 0 16
11864: PPUSH
11865: LD_VAR 0 9
11869: PPUSH
11870: LD_INT 0
11872: PPUSH
11873: CALL_OW 49
// end ;
11877: GO 11796
11879: POP
11880: POP
// for i = 1 to bazookCount do
11881: LD_ADDR_VAR 0 14
11885: PUSH
11886: DOUBLE
11887: LD_INT 1
11889: DEC
11890: ST_TO_ADDR
11891: LD_VAR 0 5
11895: PUSH
11896: FOR_TO
11897: IFFALSE 11979
// begin uc_side = side ;
11899: LD_ADDR_OWVAR 20
11903: PUSH
11904: LD_VAR 0 1
11908: ST_TO_ADDR
// uc_nation = nation ;
11909: LD_ADDR_OWVAR 21
11913: PUSH
11914: LD_VAR 0 2
11918: ST_TO_ADDR
// hc_name =  ;
11919: LD_ADDR_OWVAR 26
11923: PUSH
11924: LD_STRING 
11926: ST_TO_ADDR
// hc_gallery =  ;
11927: LD_ADDR_OWVAR 33
11931: PUSH
11932: LD_STRING 
11934: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11935: LD_INT 0
11937: PPUSH
11938: LD_INT 9
11940: PPUSH
11941: LD_VAR 0 8
11945: PPUSH
11946: CALL_OW 380
// un = CreateHuman ;
11950: LD_ADDR_VAR 0 16
11954: PUSH
11955: CALL_OW 44
11959: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11960: LD_VAR 0 16
11964: PPUSH
11965: LD_VAR 0 9
11969: PPUSH
11970: LD_INT 0
11972: PPUSH
11973: CALL_OW 49
// end ;
11977: GO 11896
11979: POP
11980: POP
// for i = 1 to mortalCount do
11981: LD_ADDR_VAR 0 14
11985: PUSH
11986: DOUBLE
11987: LD_INT 1
11989: DEC
11990: ST_TO_ADDR
11991: LD_VAR 0 6
11995: PUSH
11996: FOR_TO
11997: IFFALSE 12079
// begin uc_side = side ;
11999: LD_ADDR_OWVAR 20
12003: PUSH
12004: LD_VAR 0 1
12008: ST_TO_ADDR
// uc_nation = nation ;
12009: LD_ADDR_OWVAR 21
12013: PUSH
12014: LD_VAR 0 2
12018: ST_TO_ADDR
// hc_name =  ;
12019: LD_ADDR_OWVAR 26
12023: PUSH
12024: LD_STRING 
12026: ST_TO_ADDR
// hc_gallery =  ;
12027: LD_ADDR_OWVAR 33
12031: PUSH
12032: LD_STRING 
12034: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12035: LD_INT 0
12037: PPUSH
12038: LD_INT 8
12040: PPUSH
12041: LD_VAR 0 8
12045: PPUSH
12046: CALL_OW 380
// un = CreateHuman ;
12050: LD_ADDR_VAR 0 16
12054: PUSH
12055: CALL_OW 44
12059: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12060: LD_VAR 0 16
12064: PPUSH
12065: LD_VAR 0 9
12069: PPUSH
12070: LD_INT 0
12072: PPUSH
12073: CALL_OW 49
// end ;
12077: GO 11996
12079: POP
12080: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12081: LD_ADDR_VAR 0 19
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 2
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 5
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 8
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 25
12133: PUSH
12134: LD_INT 9
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 69
12156: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12157: LD_ADDR_VAR 0 18
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_VAR 0 1
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 25
12176: PUSH
12177: LD_INT 4
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PPUSH
12188: CALL_OW 69
12192: ST_TO_ADDR
// for i in medic_list do
12193: LD_ADDR_VAR 0 14
12197: PUSH
12198: LD_VAR 0 18
12202: PUSH
12203: FOR_IN
12204: IFFALSE 12222
// ComMoveToArea ( i , healArea ) ;
12206: LD_VAR 0 14
12210: PPUSH
12211: LD_VAR 0 10
12215: PPUSH
12216: CALL_OW 113
12220: GO 12203
12222: POP
12223: POP
// if strategy = 1 then
12224: LD_VAR 0 12
12228: PUSH
12229: LD_INT 1
12231: EQUAL
12232: IFFALSE 12778
// begin repeat wait ( 0 0$3 ) ;
12234: LD_INT 105
12236: PPUSH
12237: CALL_OW 67
// for i in soldiersOK_list do
12241: LD_ADDR_VAR 0 14
12245: PUSH
12246: LD_VAR 0 19
12250: PUSH
12251: FOR_IN
12252: IFFALSE 12316
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12254: LD_VAR 0 14
12258: PPUSH
12259: LD_INT 91
12261: PPUSH
12262: LD_INT 63
12264: PPUSH
12265: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12269: LD_VAR 0 14
12273: PPUSH
12274: LD_INT 101
12276: PPUSH
12277: LD_INT 53
12279: PPUSH
12280: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12284: LD_VAR 0 14
12288: PPUSH
12289: LD_INT 75
12291: PPUSH
12292: LD_INT 23
12294: PPUSH
12295: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12299: LD_VAR 0 14
12303: PPUSH
12304: LD_INT 78
12306: PPUSH
12307: LD_INT 8
12309: PPUSH
12310: CALL_OW 174
// end ;
12314: GO 12251
12316: POP
12317: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12318: LD_INT 12
12320: PPUSH
12321: LD_INT 22
12323: PUSH
12324: LD_VAR 0 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 70
12337: PUSH
12338: LD_INT 2
12340: GREATER
12341: IFFALSE 12234
// repeat wait ( 0 0$1 ) ;
12343: LD_INT 35
12345: PPUSH
12346: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12350: LD_ADDR_VAR 0 17
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_VAR 0 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 1
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: LD_INT 24
12375: PUSH
12376: LD_INT 550
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 24
12389: PUSH
12390: LD_INT 250
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PPUSH
12406: CALL_OW 69
12410: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12411: LD_ADDR_VAR 0 19
12415: PUSH
12416: LD_INT 22
12418: PUSH
12419: LD_VAR 0 1
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 2
12430: PUSH
12431: LD_INT 25
12433: PUSH
12434: LD_INT 1
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 25
12443: PUSH
12444: LD_INT 5
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 25
12453: PUSH
12454: LD_INT 8
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 25
12463: PUSH
12464: LD_INT 9
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 24
12480: PUSH
12481: LD_INT 1000
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: PPUSH
12493: CALL_OW 69
12497: ST_TO_ADDR
// if medicCount > 0 then
12498: LD_VAR 0 7
12502: PUSH
12503: LD_INT 0
12505: GREATER
12506: IFFALSE 12580
// begin if damageUnit_list > 0 then
12508: LD_VAR 0 17
12512: PUSH
12513: LD_INT 0
12515: GREATER
12516: IFFALSE 12580
// begin for i in damageUnit_list do
12518: LD_ADDR_VAR 0 14
12522: PUSH
12523: LD_VAR 0 17
12527: PUSH
12528: FOR_IN
12529: IFFALSE 12578
// begin ComMoveToArea ( i , healArea ) ;
12531: LD_VAR 0 14
12535: PPUSH
12536: LD_VAR 0 10
12540: PPUSH
12541: CALL_OW 113
// for j in medic_list do
12545: LD_ADDR_VAR 0 15
12549: PUSH
12550: LD_VAR 0 18
12554: PUSH
12555: FOR_IN
12556: IFFALSE 12574
// AddComHeal ( j , i ) ;
12558: LD_VAR 0 15
12562: PPUSH
12563: LD_VAR 0 14
12567: PPUSH
12568: CALL_OW 188
12572: GO 12555
12574: POP
12575: POP
// end ;
12576: GO 12528
12578: POP
12579: POP
// end ; end ; for i in soldiersOK_list do
12580: LD_ADDR_VAR 0 14
12584: PUSH
12585: LD_VAR 0 19
12589: PUSH
12590: FOR_IN
12591: IFFALSE 12767
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12593: LD_ADDR_VAR 0 22
12597: PUSH
12598: LD_INT 22
12600: PUSH
12601: LD_VAR 0 11
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 69
12614: PPUSH
12615: LD_VAR 0 14
12619: PPUSH
12620: CALL_OW 74
12624: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12625: LD_ADDR_VAR 0 23
12629: PUSH
12630: LD_INT 22
12632: PUSH
12633: LD_VAR 0 11
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: LD_INT 59
12647: PUSH
12648: EMPTY
12649: LIST
12650: PUSH
12651: LD_INT 21
12653: PUSH
12654: LD_INT 1
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 2
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: PPUSH
12684: CALL_OW 69
12688: PPUSH
12689: LD_VAR 0 14
12693: PPUSH
12694: CALL_OW 74
12698: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12699: LD_VAR 0 14
12703: PPUSH
12704: LD_VAR 0 22
12708: PPUSH
12709: CALL_OW 296
12713: PUSH
12714: LD_INT 6
12716: PLUS
12717: PUSH
12718: LD_VAR 0 14
12722: PPUSH
12723: LD_VAR 0 23
12727: PPUSH
12728: CALL_OW 296
12732: LESS
12733: IFFALSE 12751
// begin ComAttackUnit ( i , target1 ) ;
12735: LD_VAR 0 14
12739: PPUSH
12740: LD_VAR 0 22
12744: PPUSH
12745: CALL_OW 115
// end else
12749: GO 12765
// begin ComAttackUnit ( i , target2 ) ;
12751: LD_VAR 0 14
12755: PPUSH
12756: LD_VAR 0 23
12760: PPUSH
12761: CALL_OW 115
// end ; end ;
12765: GO 12590
12767: POP
12768: POP
// until soldiersOK_list = [ ] ;
12769: LD_VAR 0 19
12773: PUSH
12774: EMPTY
12775: EQUAL
12776: IFFALSE 12343
// end ; if strategy = 2 then
12778: LD_VAR 0 12
12782: PUSH
12783: LD_INT 2
12785: EQUAL
12786: IFFALSE 13302
// begin repeat wait ( 0 0$1 ) ;
12788: LD_INT 35
12790: PPUSH
12791: CALL_OW 67
// for i in soldiersOK_list do
12795: LD_ADDR_VAR 0 14
12799: PUSH
12800: LD_VAR 0 19
12804: PUSH
12805: FOR_IN
12806: IFFALSE 12840
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12808: LD_VAR 0 14
12812: PPUSH
12813: LD_INT 91
12815: PPUSH
12816: LD_INT 63
12818: PPUSH
12819: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12823: LD_VAR 0 14
12827: PPUSH
12828: LD_INT 75
12830: PPUSH
12831: LD_INT 33
12833: PPUSH
12834: CALL_OW 174
// end ;
12838: GO 12805
12840: POP
12841: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12842: LD_INT 13
12844: PPUSH
12845: LD_INT 22
12847: PUSH
12848: LD_VAR 0 1
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 70
12861: PUSH
12862: LD_INT 2
12864: GREATER
12865: IFFALSE 12788
// repeat wait ( 0 0$3 ) ;
12867: LD_INT 105
12869: PPUSH
12870: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12874: LD_ADDR_VAR 0 17
12878: PUSH
12879: LD_INT 22
12881: PUSH
12882: LD_VAR 0 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 1
12893: PUSH
12894: LD_INT 3
12896: PUSH
12897: LD_INT 24
12899: PUSH
12900: LD_INT 550
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 24
12913: PUSH
12914: LD_INT 250
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PPUSH
12930: CALL_OW 69
12934: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12935: LD_ADDR_VAR 0 19
12939: PUSH
12940: LD_INT 22
12942: PUSH
12943: LD_VAR 0 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: LD_INT 25
12957: PUSH
12958: LD_INT 1
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 25
12967: PUSH
12968: LD_INT 5
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 25
12977: PUSH
12978: LD_INT 8
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 25
12987: PUSH
12988: LD_INT 9
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 24
13004: PUSH
13005: LD_INT 1000
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: PPUSH
13017: CALL_OW 69
13021: ST_TO_ADDR
// if medicCount > 0 then
13022: LD_VAR 0 7
13026: PUSH
13027: LD_INT 0
13029: GREATER
13030: IFFALSE 13104
// begin if damageUnit_list > 0 then
13032: LD_VAR 0 17
13036: PUSH
13037: LD_INT 0
13039: GREATER
13040: IFFALSE 13104
// begin for i in damageUnit_list do
13042: LD_ADDR_VAR 0 14
13046: PUSH
13047: LD_VAR 0 17
13051: PUSH
13052: FOR_IN
13053: IFFALSE 13102
// begin ComMoveToArea ( i , healArea ) ;
13055: LD_VAR 0 14
13059: PPUSH
13060: LD_VAR 0 10
13064: PPUSH
13065: CALL_OW 113
// for j in medic_list do
13069: LD_ADDR_VAR 0 15
13073: PUSH
13074: LD_VAR 0 18
13078: PUSH
13079: FOR_IN
13080: IFFALSE 13098
// AddComHeal ( j , i ) ;
13082: LD_VAR 0 15
13086: PPUSH
13087: LD_VAR 0 14
13091: PPUSH
13092: CALL_OW 188
13096: GO 13079
13098: POP
13099: POP
// end ;
13100: GO 13052
13102: POP
13103: POP
// end ; end ; for i in soldiersOK_list do
13104: LD_ADDR_VAR 0 14
13108: PUSH
13109: LD_VAR 0 19
13113: PUSH
13114: FOR_IN
13115: IFFALSE 13291
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13117: LD_ADDR_VAR 0 22
13121: PUSH
13122: LD_INT 22
13124: PUSH
13125: LD_VAR 0 11
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PPUSH
13134: CALL_OW 69
13138: PPUSH
13139: LD_VAR 0 14
13143: PPUSH
13144: CALL_OW 74
13148: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13149: LD_ADDR_VAR 0 23
13153: PUSH
13154: LD_INT 22
13156: PUSH
13157: LD_VAR 0 11
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: LD_INT 59
13171: PUSH
13172: EMPTY
13173: LIST
13174: PUSH
13175: LD_INT 21
13177: PUSH
13178: LD_INT 1
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 21
13187: PUSH
13188: LD_INT 2
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: PPUSH
13208: CALL_OW 69
13212: PPUSH
13213: LD_VAR 0 14
13217: PPUSH
13218: CALL_OW 74
13222: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13223: LD_VAR 0 14
13227: PPUSH
13228: LD_VAR 0 22
13232: PPUSH
13233: CALL_OW 296
13237: PUSH
13238: LD_INT 6
13240: PLUS
13241: PUSH
13242: LD_VAR 0 14
13246: PPUSH
13247: LD_VAR 0 23
13251: PPUSH
13252: CALL_OW 296
13256: LESS
13257: IFFALSE 13275
// begin ComAttackUnit ( i , target1 ) ;
13259: LD_VAR 0 14
13263: PPUSH
13264: LD_VAR 0 22
13268: PPUSH
13269: CALL_OW 115
// end else
13273: GO 13289
// begin ComAttackUnit ( i , target2 ) ;
13275: LD_VAR 0 14
13279: PPUSH
13280: LD_VAR 0 23
13284: PPUSH
13285: CALL_OW 115
// end ; end ;
13289: GO 13114
13291: POP
13292: POP
// until soldiersOK_list = [ ] ;
13293: LD_VAR 0 19
13297: PUSH
13298: EMPTY
13299: EQUAL
13300: IFFALSE 12867
// end ; if strategy = 3 then
13302: LD_VAR 0 12
13306: PUSH
13307: LD_INT 3
13309: EQUAL
13310: IFFALSE 13856
// begin repeat wait ( 0 0$3 ) ;
13312: LD_INT 105
13314: PPUSH
13315: CALL_OW 67
// for i in soldiersOK_list do
13319: LD_ADDR_VAR 0 14
13323: PUSH
13324: LD_VAR 0 19
13328: PUSH
13329: FOR_IN
13330: IFFALSE 13394
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13332: LD_VAR 0 14
13336: PPUSH
13337: LD_INT 63
13339: PPUSH
13340: LD_INT 71
13342: PPUSH
13343: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13347: LD_VAR 0 14
13351: PPUSH
13352: LD_INT 35
13354: PPUSH
13355: LD_INT 44
13357: PPUSH
13358: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13362: LD_VAR 0 14
13366: PPUSH
13367: LD_INT 23
13369: PPUSH
13370: LD_INT 18
13372: PPUSH
13373: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13377: LD_VAR 0 14
13381: PPUSH
13382: LD_INT 26
13384: PPUSH
13385: LD_INT 12
13387: PPUSH
13388: CALL_OW 174
// end ;
13392: GO 13329
13394: POP
13395: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13396: LD_INT 14
13398: PPUSH
13399: LD_INT 22
13401: PUSH
13402: LD_VAR 0 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 70
13415: PUSH
13416: LD_INT 2
13418: GREATER
13419: IFFALSE 13312
// repeat wait ( 0 0$1 ) ;
13421: LD_INT 35
13423: PPUSH
13424: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13428: LD_ADDR_VAR 0 17
13432: PUSH
13433: LD_INT 22
13435: PUSH
13436: LD_VAR 0 1
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 1
13447: PUSH
13448: LD_INT 3
13450: PUSH
13451: LD_INT 24
13453: PUSH
13454: LD_INT 550
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 24
13467: PUSH
13468: LD_INT 250
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 69
13488: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13489: LD_ADDR_VAR 0 19
13493: PUSH
13494: LD_INT 22
13496: PUSH
13497: LD_VAR 0 1
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 25
13511: PUSH
13512: LD_INT 1
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 25
13521: PUSH
13522: LD_INT 5
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 8
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 25
13541: PUSH
13542: LD_INT 9
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 24
13558: PUSH
13559: LD_INT 1000
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 69
13575: ST_TO_ADDR
// if medicCount > 0 then
13576: LD_VAR 0 7
13580: PUSH
13581: LD_INT 0
13583: GREATER
13584: IFFALSE 13658
// begin if damageUnit_list > 0 then
13586: LD_VAR 0 17
13590: PUSH
13591: LD_INT 0
13593: GREATER
13594: IFFALSE 13658
// begin for i in damageUnit_list do
13596: LD_ADDR_VAR 0 14
13600: PUSH
13601: LD_VAR 0 17
13605: PUSH
13606: FOR_IN
13607: IFFALSE 13656
// begin ComMoveToArea ( i , healArea ) ;
13609: LD_VAR 0 14
13613: PPUSH
13614: LD_VAR 0 10
13618: PPUSH
13619: CALL_OW 113
// for j in medic_list do
13623: LD_ADDR_VAR 0 15
13627: PUSH
13628: LD_VAR 0 18
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13652
// AddComHeal ( j , i ) ;
13636: LD_VAR 0 15
13640: PPUSH
13641: LD_VAR 0 14
13645: PPUSH
13646: CALL_OW 188
13650: GO 13633
13652: POP
13653: POP
// end ;
13654: GO 13606
13656: POP
13657: POP
// end ; end ; for i in soldiersOK_list do
13658: LD_ADDR_VAR 0 14
13662: PUSH
13663: LD_VAR 0 19
13667: PUSH
13668: FOR_IN
13669: IFFALSE 13845
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13671: LD_ADDR_VAR 0 22
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_VAR 0 11
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PPUSH
13688: CALL_OW 69
13692: PPUSH
13693: LD_VAR 0 14
13697: PPUSH
13698: CALL_OW 74
13702: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13703: LD_ADDR_VAR 0 23
13707: PUSH
13708: LD_INT 22
13710: PUSH
13711: LD_VAR 0 11
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 2
13722: PUSH
13723: LD_INT 59
13725: PUSH
13726: EMPTY
13727: LIST
13728: PUSH
13729: LD_INT 21
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: PPUSH
13762: CALL_OW 69
13766: PPUSH
13767: LD_VAR 0 14
13771: PPUSH
13772: CALL_OW 74
13776: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13777: LD_VAR 0 14
13781: PPUSH
13782: LD_VAR 0 22
13786: PPUSH
13787: CALL_OW 296
13791: PUSH
13792: LD_INT 6
13794: PLUS
13795: PUSH
13796: LD_VAR 0 14
13800: PPUSH
13801: LD_VAR 0 23
13805: PPUSH
13806: CALL_OW 296
13810: LESS
13811: IFFALSE 13829
// begin ComAttackUnit ( i , target1 ) ;
13813: LD_VAR 0 14
13817: PPUSH
13818: LD_VAR 0 22
13822: PPUSH
13823: CALL_OW 115
// end else
13827: GO 13843
// begin ComAttackUnit ( i , target2 ) ;
13829: LD_VAR 0 14
13833: PPUSH
13834: LD_VAR 0 23
13838: PPUSH
13839: CALL_OW 115
// end ; end ;
13843: GO 13668
13845: POP
13846: POP
// until soldiersOK_list = [ ] ;
13847: LD_VAR 0 19
13851: PUSH
13852: EMPTY
13853: EQUAL
13854: IFFALSE 13421
// end ; end ;
13856: LD_VAR 0 13
13860: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
// amChassisTab = [ ] ;
13874: LD_ADDR_VAR 0 19
13878: PUSH
13879: EMPTY
13880: ST_TO_ADDR
// arChassisTab = [ ] ;
13881: LD_ADDR_VAR 0 18
13885: PUSH
13886: EMPTY
13887: ST_TO_ADDR
// ruChassisTab = [ ] ;
13888: LD_ADDR_VAR 0 17
13892: PUSH
13893: EMPTY
13894: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13895: LD_INT 35
13897: PPUSH
13898: CALL_OW 67
// if nation = 1 then
13902: LD_VAR 0 5
13906: PUSH
13907: LD_INT 1
13909: EQUAL
13910: IFFALSE 14401
// begin uc_side = side ;
13912: LD_ADDR_OWVAR 20
13916: PUSH
13917: LD_VAR 0 2
13921: ST_TO_ADDR
// uc_nation = nation ;
13922: LD_ADDR_OWVAR 21
13926: PUSH
13927: LD_VAR 0 5
13931: ST_TO_ADDR
// vc_engine = vehengine ;
13932: LD_ADDR_OWVAR 39
13936: PUSH
13937: LD_VAR 0 6
13941: ST_TO_ADDR
// vc_control = vehcontrol ;
13942: LD_ADDR_OWVAR 38
13946: PUSH
13947: LD_VAR 0 7
13951: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13952: LD_ADDR_OWVAR 40
13956: PUSH
13957: LD_VAR 0 10
13961: PUSH
13962: LD_INT 1
13964: PPUSH
13965: LD_VAR 0 10
13969: PPUSH
13970: CALL_OW 12
13974: ARRAY
13975: ST_TO_ADDR
// for j = 1 to AMWeapon do
13976: LD_ADDR_VAR 0 14
13980: PUSH
13981: DOUBLE
13982: LD_INT 1
13984: DEC
13985: ST_TO_ADDR
13986: LD_VAR 0 10
13990: PUSH
13991: FOR_TO
13992: IFFALSE 14293
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13994: LD_VAR 0 10
13998: PUSH
13999: LD_VAR 0 14
14003: ARRAY
14004: PUSH
14005: LD_INT 2
14007: EQUAL
14008: PUSH
14009: LD_VAR 0 10
14013: PUSH
14014: LD_VAR 0 14
14018: ARRAY
14019: PUSH
14020: LD_INT 3
14022: EQUAL
14023: OR
14024: IFFALSE 14077
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14026: LD_ADDR_VAR 0 19
14030: PUSH
14031: LD_INT 1
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 4
14042: PUSH
14043: LD_INT 5
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14053: LD_ADDR_OWVAR 37
14057: PUSH
14058: LD_VAR 0 19
14062: PUSH
14063: LD_INT 1
14065: PPUSH
14066: LD_VAR 0 19
14070: PPUSH
14071: CALL_OW 12
14075: ARRAY
14076: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14077: LD_VAR 0 10
14081: PUSH
14082: LD_VAR 0 14
14086: ARRAY
14087: PUSH
14088: LD_INT 4
14090: EQUAL
14091: PUSH
14092: LD_VAR 0 10
14096: PUSH
14097: LD_VAR 0 14
14101: ARRAY
14102: PUSH
14103: LD_INT 5
14105: EQUAL
14106: OR
14107: PUSH
14108: LD_VAR 0 10
14112: PUSH
14113: LD_VAR 0 14
14117: ARRAY
14118: PUSH
14119: LD_INT 9
14121: EQUAL
14122: OR
14123: PUSH
14124: LD_VAR 0 10
14128: PUSH
14129: LD_VAR 0 14
14133: ARRAY
14134: PUSH
14135: LD_INT 11
14137: EQUAL
14138: OR
14139: PUSH
14140: LD_VAR 0 10
14144: PUSH
14145: LD_VAR 0 14
14149: ARRAY
14150: PUSH
14151: LD_INT 7
14153: EQUAL
14154: OR
14155: IFFALSE 14204
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14157: LD_ADDR_VAR 0 19
14161: PUSH
14162: LD_INT 2
14164: PUSH
14165: LD_INT 3
14167: PUSH
14168: LD_INT 4
14170: PUSH
14171: LD_INT 5
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14180: LD_ADDR_OWVAR 37
14184: PUSH
14185: LD_VAR 0 19
14189: PUSH
14190: LD_INT 1
14192: PPUSH
14193: LD_VAR 0 19
14197: PPUSH
14198: CALL_OW 12
14202: ARRAY
14203: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14204: LD_VAR 0 10
14208: PUSH
14209: LD_VAR 0 14
14213: ARRAY
14214: PUSH
14215: LD_INT 8
14217: EQUAL
14218: PUSH
14219: LD_VAR 0 10
14223: PUSH
14224: LD_VAR 0 14
14228: ARRAY
14229: PUSH
14230: LD_INT 6
14232: EQUAL
14233: OR
14234: PUSH
14235: LD_VAR 0 10
14239: PUSH
14240: LD_VAR 0 14
14244: ARRAY
14245: PUSH
14246: LD_INT 10
14248: EQUAL
14249: OR
14250: IFFALSE 14291
// begin amChassisTab = [ 4 , 5 ] ;
14252: LD_ADDR_VAR 0 19
14256: PUSH
14257: LD_INT 4
14259: PUSH
14260: LD_INT 5
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14267: LD_ADDR_OWVAR 37
14271: PUSH
14272: LD_VAR 0 19
14276: PUSH
14277: LD_INT 1
14279: PPUSH
14280: LD_VAR 0 19
14284: PPUSH
14285: CALL_OW 12
14289: ARRAY
14290: ST_TO_ADDR
// end ; end ;
14291: GO 13991
14293: POP
14294: POP
// veh = CreateVehicle ;
14295: LD_ADDR_VAR 0 16
14299: PUSH
14300: CALL_OW 45
14304: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14305: LD_VAR 0 16
14309: PPUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: LD_INT 0
14317: PPUSH
14318: CALL_OW 49
// if vehControl = 1 then
14322: LD_VAR 0 7
14326: PUSH
14327: LD_INT 1
14329: EQUAL
14330: IFFALSE 14387
// begin hc_gallery =  ;
14332: LD_ADDR_OWVAR 33
14336: PUSH
14337: LD_STRING 
14339: ST_TO_ADDR
// hc_name =  ;
14340: LD_ADDR_OWVAR 26
14344: PUSH
14345: LD_STRING 
14347: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14348: LD_INT 0
14350: PPUSH
14351: LD_INT 3
14353: PPUSH
14354: LD_VAR 0 4
14358: PPUSH
14359: CALL_OW 380
// un = CreateHuman ;
14363: LD_ADDR_VAR 0 15
14367: PUSH
14368: CALL_OW 44
14372: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14373: LD_VAR 0 15
14377: PPUSH
14378: LD_VAR 0 16
14382: PPUSH
14383: CALL_OW 52
// end ; i = i + 1 ;
14387: LD_ADDR_VAR 0 13
14391: PUSH
14392: LD_VAR 0 13
14396: PUSH
14397: LD_INT 1
14399: PLUS
14400: ST_TO_ADDR
// end ; if nation = 2 then
14401: LD_VAR 0 5
14405: PUSH
14406: LD_INT 2
14408: EQUAL
14409: IFFALSE 14833
// begin uc_side = side ;
14411: LD_ADDR_OWVAR 20
14415: PUSH
14416: LD_VAR 0 2
14420: ST_TO_ADDR
// uc_nation = nation ;
14421: LD_ADDR_OWVAR 21
14425: PUSH
14426: LD_VAR 0 5
14430: ST_TO_ADDR
// vc_engine = vehengine ;
14431: LD_ADDR_OWVAR 39
14435: PUSH
14436: LD_VAR 0 6
14440: ST_TO_ADDR
// vc_control = vehcontrol ;
14441: LD_ADDR_OWVAR 38
14445: PUSH
14446: LD_VAR 0 7
14450: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14451: LD_ADDR_OWVAR 40
14455: PUSH
14456: LD_VAR 0 9
14460: PUSH
14461: LD_INT 1
14463: PPUSH
14464: LD_VAR 0 9
14468: PPUSH
14469: CALL_OW 12
14473: ARRAY
14474: ST_TO_ADDR
// for j = 1 to ARWeapons do
14475: LD_ADDR_VAR 0 14
14479: PUSH
14480: DOUBLE
14481: LD_INT 1
14483: DEC
14484: ST_TO_ADDR
14485: LD_VAR 0 9
14489: PUSH
14490: FOR_TO
14491: IFFALSE 14725
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14493: LD_VAR 0 9
14497: PUSH
14498: LD_VAR 0 14
14502: ARRAY
14503: PUSH
14504: LD_INT 24
14506: EQUAL
14507: PUSH
14508: LD_VAR 0 9
14512: PUSH
14513: LD_VAR 0 14
14517: ARRAY
14518: PUSH
14519: LD_INT 22
14521: EQUAL
14522: OR
14523: PUSH
14524: LD_VAR 0 9
14528: PUSH
14529: LD_VAR 0 14
14533: ARRAY
14534: PUSH
14535: LD_INT 23
14537: EQUAL
14538: OR
14539: PUSH
14540: LD_VAR 0 9
14544: PUSH
14545: LD_VAR 0 14
14549: ARRAY
14550: PUSH
14551: LD_INT 30
14553: EQUAL
14554: OR
14555: IFFALSE 14604
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14557: LD_ADDR_VAR 0 18
14561: PUSH
14562: LD_INT 11
14564: PUSH
14565: LD_INT 12
14567: PUSH
14568: LD_INT 13
14570: PUSH
14571: LD_INT 14
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14580: LD_ADDR_OWVAR 37
14584: PUSH
14585: LD_VAR 0 18
14589: PUSH
14590: LD_INT 1
14592: PPUSH
14593: LD_VAR 0 18
14597: PPUSH
14598: CALL_OW 12
14602: ARRAY
14603: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14604: LD_VAR 0 9
14608: PUSH
14609: LD_VAR 0 14
14613: ARRAY
14614: PUSH
14615: LD_INT 29
14617: EQUAL
14618: PUSH
14619: LD_VAR 0 9
14623: PUSH
14624: LD_VAR 0 14
14628: ARRAY
14629: PUSH
14630: LD_INT 28
14632: EQUAL
14633: OR
14634: PUSH
14635: LD_VAR 0 9
14639: PUSH
14640: LD_VAR 0 14
14644: ARRAY
14645: PUSH
14646: LD_INT 27
14648: EQUAL
14649: OR
14650: PUSH
14651: LD_VAR 0 9
14655: PUSH
14656: LD_VAR 0 14
14660: ARRAY
14661: PUSH
14662: LD_INT 26
14664: EQUAL
14665: OR
14666: PUSH
14667: LD_VAR 0 9
14671: PUSH
14672: LD_VAR 0 14
14676: ARRAY
14677: PUSH
14678: LD_INT 25
14680: EQUAL
14681: OR
14682: IFFALSE 14723
// begin arChassisTab = [ 13 , 14 ] ;
14684: LD_ADDR_VAR 0 18
14688: PUSH
14689: LD_INT 13
14691: PUSH
14692: LD_INT 14
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14699: LD_ADDR_OWVAR 37
14703: PUSH
14704: LD_VAR 0 18
14708: PUSH
14709: LD_INT 1
14711: PPUSH
14712: LD_VAR 0 18
14716: PPUSH
14717: CALL_OW 12
14721: ARRAY
14722: ST_TO_ADDR
// end ; end ;
14723: GO 14490
14725: POP
14726: POP
// veh = CreateVehicle ;
14727: LD_ADDR_VAR 0 16
14731: PUSH
14732: CALL_OW 45
14736: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14737: LD_VAR 0 16
14741: PPUSH
14742: LD_VAR 0 1
14746: PPUSH
14747: LD_INT 0
14749: PPUSH
14750: CALL_OW 49
// if vehcontrol = 1 then
14754: LD_VAR 0 7
14758: PUSH
14759: LD_INT 1
14761: EQUAL
14762: IFFALSE 14819
// begin hc_gallery =  ;
14764: LD_ADDR_OWVAR 33
14768: PUSH
14769: LD_STRING 
14771: ST_TO_ADDR
// hc_name =  ;
14772: LD_ADDR_OWVAR 26
14776: PUSH
14777: LD_STRING 
14779: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14780: LD_INT 0
14782: PPUSH
14783: LD_INT 3
14785: PPUSH
14786: LD_VAR 0 4
14790: PPUSH
14791: CALL_OW 380
// un = CreateHuman ;
14795: LD_ADDR_VAR 0 15
14799: PUSH
14800: CALL_OW 44
14804: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14805: LD_VAR 0 15
14809: PPUSH
14810: LD_VAR 0 16
14814: PPUSH
14815: CALL_OW 52
// end ; i = i + 1 ;
14819: LD_ADDR_VAR 0 13
14823: PUSH
14824: LD_VAR 0 13
14828: PUSH
14829: LD_INT 1
14831: PLUS
14832: ST_TO_ADDR
// end ; if nation = 3 then
14833: LD_VAR 0 5
14837: PUSH
14838: LD_INT 3
14840: EQUAL
14841: IFFALSE 15233
// begin uc_side = side ;
14843: LD_ADDR_OWVAR 20
14847: PUSH
14848: LD_VAR 0 2
14852: ST_TO_ADDR
// uc_nation = nation ;
14853: LD_ADDR_OWVAR 21
14857: PUSH
14858: LD_VAR 0 5
14862: ST_TO_ADDR
// vc_engine = vehengine ;
14863: LD_ADDR_OWVAR 39
14867: PUSH
14868: LD_VAR 0 6
14872: ST_TO_ADDR
// vc_control = vehcontrol ;
14873: LD_ADDR_OWVAR 38
14877: PUSH
14878: LD_VAR 0 7
14882: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14883: LD_ADDR_OWVAR 40
14887: PUSH
14888: LD_VAR 0 8
14892: PUSH
14893: LD_INT 1
14895: PPUSH
14896: LD_VAR 0 8
14900: PPUSH
14901: CALL_OW 12
14905: ARRAY
14906: ST_TO_ADDR
// for j = 1 to RuWeapons do
14907: LD_ADDR_VAR 0 14
14911: PUSH
14912: DOUBLE
14913: LD_INT 1
14915: DEC
14916: ST_TO_ADDR
14917: LD_VAR 0 8
14921: PUSH
14922: FOR_TO
14923: IFFALSE 15125
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14925: LD_VAR 0 8
14929: PUSH
14930: LD_VAR 0 14
14934: ARRAY
14935: PUSH
14936: LD_INT 42
14938: EQUAL
14939: PUSH
14940: LD_VAR 0 8
14944: PUSH
14945: LD_VAR 0 14
14949: ARRAY
14950: PUSH
14951: LD_INT 43
14953: EQUAL
14954: OR
14955: PUSH
14956: LD_VAR 0 8
14960: PUSH
14961: LD_VAR 0 14
14965: ARRAY
14966: PUSH
14967: LD_INT 44
14969: EQUAL
14970: OR
14971: PUSH
14972: LD_VAR 0 8
14976: PUSH
14977: LD_VAR 0 14
14981: ARRAY
14982: PUSH
14983: LD_INT 45
14985: EQUAL
14986: OR
14987: PUSH
14988: LD_VAR 0 8
14992: PUSH
14993: LD_VAR 0 14
14997: ARRAY
14998: PUSH
14999: LD_INT 49
15001: EQUAL
15002: OR
15003: IFFALSE 15052
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15005: LD_ADDR_VAR 0 17
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_INT 23
15018: PUSH
15019: LD_INT 24
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15028: LD_ADDR_OWVAR 37
15032: PUSH
15033: LD_VAR 0 17
15037: PUSH
15038: LD_INT 1
15040: PPUSH
15041: LD_VAR 0 17
15045: PPUSH
15046: CALL_OW 12
15050: ARRAY
15051: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15052: LD_VAR 0 8
15056: PUSH
15057: LD_VAR 0 14
15061: ARRAY
15062: PUSH
15063: LD_INT 46
15065: EQUAL
15066: PUSH
15067: LD_VAR 0 8
15071: PUSH
15072: LD_VAR 0 14
15076: ARRAY
15077: PUSH
15078: LD_INT 47
15080: EQUAL
15081: OR
15082: IFFALSE 15123
// begin ruChassisTab = [ 23 , 24 ] ;
15084: LD_ADDR_VAR 0 17
15088: PUSH
15089: LD_INT 23
15091: PUSH
15092: LD_INT 24
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15099: LD_ADDR_OWVAR 37
15103: PUSH
15104: LD_VAR 0 17
15108: PUSH
15109: LD_INT 1
15111: PPUSH
15112: LD_VAR 0 17
15116: PPUSH
15117: CALL_OW 12
15121: ARRAY
15122: ST_TO_ADDR
// end ; end ;
15123: GO 14922
15125: POP
15126: POP
// veh = CreateVehicle ;
15127: LD_ADDR_VAR 0 16
15131: PUSH
15132: CALL_OW 45
15136: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15137: LD_VAR 0 16
15141: PPUSH
15142: LD_VAR 0 1
15146: PPUSH
15147: LD_INT 0
15149: PPUSH
15150: CALL_OW 49
// if vehcontrol = 1 then
15154: LD_VAR 0 7
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: IFFALSE 15219
// begin hc_gallery =  ;
15164: LD_ADDR_OWVAR 33
15168: PUSH
15169: LD_STRING 
15171: ST_TO_ADDR
// hc_name =  ;
15172: LD_ADDR_OWVAR 26
15176: PUSH
15177: LD_STRING 
15179: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15180: LD_INT 0
15182: PPUSH
15183: LD_INT 3
15185: PPUSH
15186: LD_VAR 0 4
15190: PPUSH
15191: CALL_OW 380
// un = CreateHuman ;
15195: LD_ADDR_VAR 0 15
15199: PUSH
15200: CALL_OW 44
15204: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15205: LD_VAR 0 15
15209: PPUSH
15210: LD_VAR 0 16
15214: PPUSH
15215: CALL_OW 52
// end ; i = i + 1 ;
15219: LD_ADDR_VAR 0 13
15223: PUSH
15224: LD_VAR 0 13
15228: PUSH
15229: LD_INT 1
15231: PLUS
15232: ST_TO_ADDR
// end ; until i = vehCount ;
15233: LD_VAR 0 13
15237: PUSH
15238: LD_VAR 0 3
15242: EQUAL
15243: IFFALSE 13895
// repeat wait ( 0 0$1 ) ;
15245: LD_INT 35
15247: PPUSH
15248: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15252: LD_ADDR_VAR 0 20
15256: PUSH
15257: LD_INT 22
15259: PUSH
15260: LD_VAR 0 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 21
15271: PUSH
15272: LD_INT 2
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 24
15281: PUSH
15282: LD_INT 250
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: ST_TO_ADDR
// if vehicleOK_list > 0 then
15299: LD_VAR 0 20
15303: PUSH
15304: LD_INT 0
15306: GREATER
15307: IFFALSE 15498
// begin for i in vehicleOK_list do
15309: LD_ADDR_VAR 0 13
15313: PUSH
15314: LD_VAR 0 20
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15496
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15322: LD_ADDR_VAR 0 21
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_VAR 0 11
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PPUSH
15339: CALL_OW 69
15343: PPUSH
15344: LD_VAR 0 13
15348: PPUSH
15349: CALL_OW 74
15353: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15354: LD_ADDR_VAR 0 22
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_VAR 0 11
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 59
15376: PUSH
15377: EMPTY
15378: LIST
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 1
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 21
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: PPUSH
15413: CALL_OW 69
15417: PPUSH
15418: LD_VAR 0 13
15422: PPUSH
15423: CALL_OW 74
15427: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15428: LD_VAR 0 13
15432: PPUSH
15433: LD_VAR 0 21
15437: PPUSH
15438: CALL_OW 296
15442: PUSH
15443: LD_INT 6
15445: PLUS
15446: PUSH
15447: LD_VAR 0 13
15451: PPUSH
15452: LD_VAR 0 22
15456: PPUSH
15457: CALL_OW 296
15461: LESS
15462: IFFALSE 15480
// begin ComAttackUnit ( i , target1 ) ;
15464: LD_VAR 0 13
15468: PPUSH
15469: LD_VAR 0 21
15473: PPUSH
15474: CALL_OW 115
// end else
15478: GO 15494
// begin ComAttackUnit ( i , target2 ) ;
15480: LD_VAR 0 13
15484: PPUSH
15485: LD_VAR 0 22
15489: PPUSH
15490: CALL_OW 115
// end ; end ;
15494: GO 15319
15496: POP
15497: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15498: LD_INT 22
15500: PUSH
15501: LD_VAR 0 2
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 21
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 24
15522: PUSH
15523: LD_INT 250
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL_OW 69
15539: PUSH
15540: LD_INT 0
15542: EQUAL
15543: IFFALSE 15245
// end ;
15545: LD_VAR 0 12
15549: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15550: LD_INT 0
15552: PPUSH
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
15558: PPUSH
15559: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15560: LD_ADDR_VAR 0 7
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: LD_INT 3
15582: PUSH
15583: LD_INT 24
15585: PUSH
15586: LD_INT 550
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 24
15599: PUSH
15600: LD_INT 250
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PPUSH
15616: CALL_OW 69
15620: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15621: LD_ADDR_VAR 0 8
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_VAR 0 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 2
15640: PUSH
15641: LD_INT 25
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 25
15663: PUSH
15664: LD_INT 8
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 25
15673: PUSH
15674: LD_INT 9
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 24
15690: PUSH
15691: LD_INT 1000
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15708: LD_ADDR_VAR 0 9
15712: PUSH
15713: LD_INT 22
15715: PUSH
15716: LD_VAR 0 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 25
15727: PUSH
15728: LD_INT 4
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PPUSH
15739: CALL_OW 69
15743: ST_TO_ADDR
// if medicCount > 0 then
15744: LD_VAR 0 9
15748: PUSH
15749: LD_INT 0
15751: GREATER
15752: IFFALSE 15826
// begin if damageUnit_list > 0 then
15754: LD_VAR 0 7
15758: PUSH
15759: LD_INT 0
15761: GREATER
15762: IFFALSE 15826
// begin for i in damageUnit_list do
15764: LD_ADDR_VAR 0 5
15768: PUSH
15769: LD_VAR 0 7
15773: PUSH
15774: FOR_IN
15775: IFFALSE 15824
// begin ComMoveToArea ( i , healArea ) ;
15777: LD_VAR 0 5
15781: PPUSH
15782: LD_VAR 0 2
15786: PPUSH
15787: CALL_OW 113
// for j in medicCount do
15791: LD_ADDR_VAR 0 6
15795: PUSH
15796: LD_VAR 0 9
15800: PUSH
15801: FOR_IN
15802: IFFALSE 15820
// AddComHeal ( j , i ) ;
15804: LD_VAR 0 6
15808: PPUSH
15809: LD_VAR 0 5
15813: PPUSH
15814: CALL_OW 188
15818: GO 15801
15820: POP
15821: POP
// end ;
15822: GO 15774
15824: POP
15825: POP
// end ; end ; if soldiersOK_list > 0 then
15826: LD_VAR 0 8
15830: PUSH
15831: LD_INT 0
15833: GREATER
15834: IFFALSE 16025
// begin for i in soldiersOK_list do
15836: LD_ADDR_VAR 0 5
15840: PUSH
15841: LD_VAR 0 8
15845: PUSH
15846: FOR_IN
15847: IFFALSE 16023
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15849: LD_ADDR_VAR 0 10
15853: PUSH
15854: LD_INT 22
15856: PUSH
15857: LD_VAR 0 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 69
15870: PPUSH
15871: LD_VAR 0 5
15875: PPUSH
15876: CALL_OW 74
15880: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15881: LD_ADDR_VAR 0 11
15885: PUSH
15886: LD_INT 22
15888: PUSH
15889: LD_VAR 0 3
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: LD_INT 59
15903: PUSH
15904: EMPTY
15905: LIST
15906: PUSH
15907: LD_INT 21
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 21
15919: PUSH
15920: LD_INT 2
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: PPUSH
15940: CALL_OW 69
15944: PPUSH
15945: LD_VAR 0 5
15949: PPUSH
15950: CALL_OW 74
15954: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15955: LD_VAR 0 5
15959: PPUSH
15960: LD_VAR 0 10
15964: PPUSH
15965: CALL_OW 296
15969: PUSH
15970: LD_INT 8
15972: PLUS
15973: PUSH
15974: LD_VAR 0 5
15978: PPUSH
15979: LD_VAR 0 11
15983: PPUSH
15984: CALL_OW 296
15988: LESS
15989: IFFALSE 16007
// begin ComAttackUnit ( i , target1 ) ;
15991: LD_VAR 0 5
15995: PPUSH
15996: LD_VAR 0 10
16000: PPUSH
16001: CALL_OW 115
// end else
16005: GO 16021
// begin ComAttackUnit ( i , target2 ) ;
16007: LD_VAR 0 5
16011: PPUSH
16012: LD_VAR 0 11
16016: PPUSH
16017: CALL_OW 115
// end ; end ;
16021: GO 15846
16023: POP
16024: POP
// end ; end ;
16025: LD_VAR 0 4
16029: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16030: LD_INT 0
16032: PPUSH
16033: PPUSH
// list := [ ] ;
16034: LD_ADDR_VAR 0 5
16038: PUSH
16039: EMPTY
16040: ST_TO_ADDR
// case d of 0 :
16041: LD_VAR 0 3
16045: PUSH
16046: LD_INT 0
16048: DOUBLE
16049: EQUAL
16050: IFTRUE 16054
16052: GO 16187
16054: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16055: LD_ADDR_VAR 0 5
16059: PUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 4
16067: MINUS
16068: PUSH
16069: LD_VAR 0 2
16073: PUSH
16074: LD_INT 4
16076: MINUS
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: PUSH
16086: LD_VAR 0 1
16090: PUSH
16091: LD_INT 3
16093: MINUS
16094: PUSH
16095: LD_VAR 0 2
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: PUSH
16108: LD_VAR 0 1
16112: PUSH
16113: LD_INT 4
16115: PLUS
16116: PUSH
16117: LD_VAR 0 2
16121: PUSH
16122: LD_INT 4
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PUSH
16130: LD_VAR 0 1
16134: PUSH
16135: LD_INT 3
16137: PLUS
16138: PUSH
16139: LD_VAR 0 2
16143: PUSH
16144: LD_INT 3
16146: PLUS
16147: PUSH
16148: LD_INT 5
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: LIST
16155: PUSH
16156: LD_VAR 0 1
16160: PUSH
16161: LD_VAR 0 2
16165: PUSH
16166: LD_INT 4
16168: PLUS
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: ST_TO_ADDR
// end ; 1 :
16185: GO 16885
16187: LD_INT 1
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16328
16195: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_VAR 0 1
16205: PUSH
16206: LD_VAR 0 2
16210: PUSH
16211: LD_INT 4
16213: MINUS
16214: PUSH
16215: LD_INT 3
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PUSH
16223: LD_VAR 0 1
16227: PUSH
16228: LD_INT 3
16230: MINUS
16231: PUSH
16232: LD_VAR 0 2
16236: PUSH
16237: LD_INT 3
16239: MINUS
16240: PUSH
16241: LD_INT 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: PUSH
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 4
16256: MINUS
16257: PUSH
16258: LD_VAR 0 2
16262: PUSH
16263: LD_INT 1
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: PUSH
16271: LD_VAR 0 1
16275: PUSH
16276: LD_VAR 0 2
16280: PUSH
16281: LD_INT 3
16283: PLUS
16284: PUSH
16285: LD_INT 0
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: LIST
16292: PUSH
16293: LD_VAR 0 1
16297: PUSH
16298: LD_INT 4
16300: PLUS
16301: PUSH
16302: LD_VAR 0 2
16306: PUSH
16307: LD_INT 4
16309: PLUS
16310: PUSH
16311: LD_INT 5
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: ST_TO_ADDR
// end ; 2 :
16326: GO 16885
16328: LD_INT 2
16330: DOUBLE
16331: EQUAL
16332: IFTRUE 16336
16334: GO 16465
16336: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16337: LD_ADDR_VAR 0 5
16341: PUSH
16342: LD_VAR 0 1
16346: PUSH
16347: LD_VAR 0 2
16351: PUSH
16352: LD_INT 3
16354: MINUS
16355: PUSH
16356: LD_INT 3
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: LD_VAR 0 1
16368: PUSH
16369: LD_INT 4
16371: PLUS
16372: PUSH
16373: LD_VAR 0 2
16377: PUSH
16378: LD_INT 4
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_VAR 0 1
16390: PUSH
16391: LD_VAR 0 2
16395: PUSH
16396: LD_INT 4
16398: PLUS
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: LIST
16407: PUSH
16408: LD_VAR 0 1
16412: PUSH
16413: LD_INT 3
16415: MINUS
16416: PUSH
16417: LD_VAR 0 2
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: PUSH
16430: LD_VAR 0 1
16434: PUSH
16435: LD_INT 4
16437: MINUS
16438: PUSH
16439: LD_VAR 0 2
16443: PUSH
16444: LD_INT 4
16446: MINUS
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: ST_TO_ADDR
// end ; 3 :
16463: GO 16885
16465: LD_INT 3
16467: DOUBLE
16468: EQUAL
16469: IFTRUE 16473
16471: GO 16606
16473: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16474: LD_ADDR_VAR 0 5
16478: PUSH
16479: LD_VAR 0 1
16483: PUSH
16484: LD_INT 3
16486: PLUS
16487: PUSH
16488: LD_VAR 0 2
16492: PUSH
16493: LD_INT 4
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: LD_INT 4
16508: PLUS
16509: PUSH
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 4
16517: PLUS
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: LD_VAR 0 1
16531: PUSH
16532: LD_INT 4
16534: MINUS
16535: PUSH
16536: LD_VAR 0 2
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: PUSH
16549: LD_VAR 0 1
16553: PUSH
16554: LD_VAR 0 2
16558: PUSH
16559: LD_INT 4
16561: MINUS
16562: PUSH
16563: LD_INT 3
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: PUSH
16571: LD_VAR 0 1
16575: PUSH
16576: LD_INT 3
16578: MINUS
16579: PUSH
16580: LD_VAR 0 2
16584: PUSH
16585: LD_INT 3
16587: MINUS
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: ST_TO_ADDR
// end ; 4 :
16604: GO 16885
16606: LD_INT 4
16608: DOUBLE
16609: EQUAL
16610: IFTRUE 16614
16612: GO 16747
16614: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16615: LD_ADDR_VAR 0 5
16619: PUSH
16620: LD_VAR 0 1
16624: PUSH
16625: LD_VAR 0 2
16629: PUSH
16630: LD_INT 4
16632: PLUS
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: PUSH
16642: LD_VAR 0 1
16646: PUSH
16647: LD_INT 3
16649: PLUS
16650: PUSH
16651: LD_VAR 0 2
16655: PUSH
16656: LD_INT 3
16658: PLUS
16659: PUSH
16660: LD_INT 5
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: PUSH
16668: LD_VAR 0 1
16672: PUSH
16673: LD_INT 3
16675: PLUS
16676: PUSH
16677: LD_VAR 0 2
16681: PUSH
16682: LD_INT 4
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PUSH
16690: LD_VAR 0 1
16694: PUSH
16695: LD_VAR 0 2
16699: PUSH
16700: LD_INT 3
16702: MINUS
16703: PUSH
16704: LD_INT 3
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: LIST
16711: PUSH
16712: LD_VAR 0 1
16716: PUSH
16717: LD_INT 4
16719: MINUS
16720: PUSH
16721: LD_VAR 0 2
16725: PUSH
16726: LD_INT 4
16728: MINUS
16729: PUSH
16730: LD_INT 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: ST_TO_ADDR
// end ; 5 :
16745: GO 16885
16747: LD_INT 5
16749: DOUBLE
16750: EQUAL
16751: IFTRUE 16755
16753: GO 16884
16755: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16756: LD_ADDR_VAR 0 5
16760: PUSH
16761: LD_VAR 0 1
16765: PUSH
16766: LD_INT 4
16768: MINUS
16769: PUSH
16770: LD_VAR 0 2
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: LD_VAR 0 1
16787: PUSH
16788: LD_VAR 0 2
16792: PUSH
16793: LD_INT 4
16795: MINUS
16796: PUSH
16797: LD_INT 3
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: LIST
16804: PUSH
16805: LD_VAR 0 1
16809: PUSH
16810: LD_INT 4
16812: PLUS
16813: PUSH
16814: LD_VAR 0 2
16818: PUSH
16819: LD_INT 4
16821: PLUS
16822: PUSH
16823: LD_INT 5
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: PUSH
16831: LD_VAR 0 1
16835: PUSH
16836: LD_INT 3
16838: PLUS
16839: PUSH
16840: LD_VAR 0 2
16844: PUSH
16845: LD_INT 4
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: PUSH
16853: LD_VAR 0 1
16857: PUSH
16858: LD_VAR 0 2
16862: PUSH
16863: LD_INT 3
16865: PLUS
16866: PUSH
16867: LD_INT 0
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: ST_TO_ADDR
// end ; end ;
16882: GO 16885
16884: POP
// result := list ;
16885: LD_ADDR_VAR 0 4
16889: PUSH
16890: LD_VAR 0 5
16894: ST_TO_ADDR
// end ; end_of_file
16895: LD_VAR 0 4
16899: RET
// every 1 do var i ;
16900: GO 16902
16902: DISABLE
16903: LD_INT 0
16905: PPUSH
// begin InGameOn ;
16906: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16910: LD_INT 53
16912: PPUSH
16913: LD_INT 40
16915: PPUSH
16916: CALL_OW 84
// wait ( 0 0$5 ) ;
16920: LD_INT 175
16922: PPUSH
16923: CALL_OW 67
// if gammaCommander = 1 then
16927: LD_EXP 12
16931: PUSH
16932: LD_INT 1
16934: EQUAL
16935: IFFALSE 16946
// CenterNowOnUnits ( Donaldson ) ;
16937: LD_EXP 3
16941: PPUSH
16942: CALL_OW 87
// if gammaCommander = 2 then
16946: LD_EXP 12
16950: PUSH
16951: LD_INT 2
16953: EQUAL
16954: IFFALSE 16965
// CenterNowOnUnits ( Brown ) ;
16956: LD_EXP 2
16960: PPUSH
16961: CALL_OW 87
// if gammaCommander = 3 then
16965: LD_EXP 12
16969: PUSH
16970: LD_INT 3
16972: EQUAL
16973: IFFALSE 16984
// CenterNowOnUnits ( Houten ) ;
16975: LD_EXP 13
16979: PPUSH
16980: CALL_OW 87
// if gammaCommander = 1 then
16984: LD_EXP 12
16988: PUSH
16989: LD_INT 1
16991: EQUAL
16992: IFFALSE 17006
// Say ( Donaldson , D1-Don-1 ) ;
16994: LD_EXP 3
16998: PPUSH
16999: LD_STRING D1-Don-1
17001: PPUSH
17002: CALL_OW 88
// if gammaCommander = 2 then
17006: LD_EXP 12
17010: PUSH
17011: LD_INT 2
17013: EQUAL
17014: IFFALSE 17028
// Say ( Brown , D1-Brown-1 ) ;
17016: LD_EXP 2
17020: PPUSH
17021: LD_STRING D1-Brown-1
17023: PPUSH
17024: CALL_OW 88
// if gammaCommander = 3 then
17028: LD_EXP 12
17032: PUSH
17033: LD_INT 3
17035: EQUAL
17036: IFFALSE 17050
// Say ( Houten , D1-VanH-1 ) ;
17038: LD_EXP 13
17042: PPUSH
17043: LD_STRING D1-VanH-1
17045: PPUSH
17046: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17050: LD_EXP 22
17054: PPUSH
17055: LD_STRING D1-Har-1
17057: PPUSH
17058: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
17062: LD_INT 53
17064: PPUSH
17065: LD_INT 40
17067: PPUSH
17068: CALL_OW 84
// if gammaCommander = 1 then
17072: LD_EXP 12
17076: PUSH
17077: LD_INT 1
17079: EQUAL
17080: IFFALSE 17094
// Say ( Donaldson , D1-Don-2 ) ;
17082: LD_EXP 3
17086: PPUSH
17087: LD_STRING D1-Don-2
17089: PPUSH
17090: CALL_OW 88
// if gammaCommander = 2 then
17094: LD_EXP 12
17098: PUSH
17099: LD_INT 2
17101: EQUAL
17102: IFFALSE 17116
// Say ( Brown , D1-Brown-2 ) ;
17104: LD_EXP 2
17108: PPUSH
17109: LD_STRING D1-Brown-2
17111: PPUSH
17112: CALL_OW 88
// if gammaCommander = 3 then
17116: LD_EXP 12
17120: PUSH
17121: LD_INT 3
17123: EQUAL
17124: IFFALSE 17138
// Say ( Houten , D1-VanH-2 ) ;
17126: LD_EXP 13
17130: PPUSH
17131: LD_STRING D1-VanH-2
17133: PPUSH
17134: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17138: LD_EXP 22
17142: PPUSH
17143: LD_STRING D1-Har-2
17145: PPUSH
17146: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17150: LD_INT 22
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 33
17162: PUSH
17163: LD_INT 2
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 61
17172: PUSH
17173: EMPTY
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: PPUSH
17181: CALL_OW 69
17185: IFFALSE 17250
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 33
17204: PUSH
17205: LD_INT 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 61
17214: PUSH
17215: EMPTY
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 69
17227: PUSH
17228: FOR_IN
17229: IFFALSE 17248
// ComAgressiveMove ( i , 70 , 41 ) ;
17231: LD_VAR 0 1
17235: PPUSH
17236: LD_INT 70
17238: PPUSH
17239: LD_INT 41
17241: PPUSH
17242: CALL_OW 114
17246: GO 17228
17248: POP
17249: POP
// repeat wait ( 0 0$1 ) ;
17250: LD_INT 35
17252: PPUSH
17253: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_INT 22
17264: PUSH
17265: LD_INT 6
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: EMPTY
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: PUSH
17280: FOR_IN
17281: IFFALSE 17300
// ComAgressiveMove ( i , 54 , 20 ) ;
17283: LD_VAR 0 1
17287: PPUSH
17288: LD_INT 54
17290: PPUSH
17291: LD_INT 20
17293: PPUSH
17294: CALL_OW 114
17298: GO 17280
17300: POP
17301: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17302: LD_ADDR_VAR 0 1
17306: PUSH
17307: LD_INT 22
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 25
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 3
17329: PUSH
17330: LD_INT 54
17332: PUSH
17333: EMPTY
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: LIST
17344: PPUSH
17345: CALL_OW 69
17349: PUSH
17350: FOR_IN
17351: IFFALSE 17385
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17353: LD_VAR 0 1
17357: PPUSH
17358: LD_INT 70
17360: PPUSH
17361: LD_INT 41
17363: PPUSH
17364: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_INT 46
17375: PPUSH
17376: LD_INT 39
17378: PPUSH
17379: CALL_OW 174
// end ;
17383: GO 17350
17385: POP
17386: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17387: LD_ADDR_VAR 0 1
17391: PUSH
17392: LD_INT 22
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 21
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 3
17414: PUSH
17415: LD_INT 24
17417: PUSH
17418: LD_INT 500
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PUSH
17439: FOR_IN
17440: IFFALSE 17473
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17442: LD_VAR 0 1
17446: PPUSH
17447: LD_EXP 37
17451: PPUSH
17452: CALL_OW 250
17456: PPUSH
17457: LD_EXP 37
17461: PPUSH
17462: CALL_OW 251
17466: PPUSH
17467: CALL_OW 111
17471: GO 17439
17473: POP
17474: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17475: LD_INT 22
17477: PUSH
17478: LD_INT 6
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 21
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 24
17497: PUSH
17498: LD_INT 250
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: LIST
17509: PPUSH
17510: CALL_OW 69
17514: PUSH
17515: LD_INT 6
17517: LESS
17518: IFFALSE 17250
// InGameOff ;
17520: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17524: LD_STRING M1
17526: PPUSH
17527: CALL_OW 337
// SaveForQuickRestart ;
17531: CALL_OW 22
// startCutscene = 0 ;
17535: LD_ADDR_EXP 38
17539: PUSH
17540: LD_INT 0
17542: ST_TO_ADDR
// end ;
17543: PPOPN 1
17545: END
// every 1 1$0 do
17546: GO 17548
17548: DISABLE
// begin PrepareSupportFromDelta ;
17549: CALL 3126 0 0
// firstAttack = 1 ;
17553: LD_ADDR_EXP 33
17557: PUSH
17558: LD_INT 1
17560: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17561: LD_EXP 8
17565: PPUSH
17566: CALL_OW 302
17570: IFFALSE 17586
// begin Say ( Gladstone , D2-Glad-1 ) ;
17572: LD_EXP 8
17576: PPUSH
17577: LD_STRING D2-Glad-1
17579: PPUSH
17580: CALL_OW 88
// end else
17584: GO 17688
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17586: LD_INT 4
17588: PPUSH
17589: LD_INT 22
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 21
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: LD_INT 25
17614: PUSH
17615: LD_INT 1
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 25
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 25
17634: PUSH
17635: LD_INT 3
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 25
17644: PUSH
17645: LD_INT 4
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: LIST
17663: PPUSH
17664: CALL_OW 70
17668: PUSH
17669: LD_EXP 15
17673: PUSH
17674: EMPTY
17675: LIST
17676: DIFF
17677: PPUSH
17678: LD_STRING D2-Sol1-1
17680: PPUSH
17681: LD_STRING D2-FSol1-1
17683: PPUSH
17684: CALL 6800 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17688: LD_EXP 3
17692: PPUSH
17693: CALL_OW 302
17697: PUSH
17698: LD_EXP 12
17702: PUSH
17703: LD_INT 1
17705: EQUAL
17706: AND
17707: IFFALSE 17721
// Say ( Donaldson , D2-Don-1 ) ;
17709: LD_EXP 3
17713: PPUSH
17714: LD_STRING D2-Don-1
17716: PPUSH
17717: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17721: LD_EXP 2
17725: PPUSH
17726: CALL_OW 302
17730: PUSH
17731: LD_EXP 12
17735: PUSH
17736: LD_INT 2
17738: EQUAL
17739: AND
17740: IFFALSE 17754
// Say ( Brown , D2-Brown-1 ) ;
17742: LD_EXP 2
17746: PPUSH
17747: LD_STRING D2-Brown-1
17749: PPUSH
17750: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17754: LD_EXP 13
17758: PPUSH
17759: CALL_OW 302
17763: PUSH
17764: LD_EXP 12
17768: PUSH
17769: LD_INT 3
17771: EQUAL
17772: AND
17773: IFFALSE 17787
// Say ( Houten , D2-VanH-1 ) ;
17775: LD_EXP 13
17779: PPUSH
17780: LD_STRING D2-VanH-1
17782: PPUSH
17783: CALL_OW 88
// end ;
17787: END
// every 0 0$1 do
17788: GO 17790
17790: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
17791: LD_STRING 07_time
17793: PPUSH
17794: LD_INT 12600
17796: PPUSH
17797: CALL_OW 30
17801: PUSH
17802: LD_INT 3
17804: DIV
17805: PPUSH
17806: CALL_OW 67
// PrepareMacmillanSquad ;
17810: CALL 3788 0 0
// CenterNowOnUnits ( JMM ) ;
17814: LD_EXP 1
17818: PPUSH
17819: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17823: LD_EXP 1
17827: PPUSH
17828: LD_STRING D3-JMM-1
17830: PPUSH
17831: CALL_OW 88
// JMMArrive = 1 ;
17835: LD_ADDR_EXP 39
17839: PUSH
17840: LD_INT 1
17842: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17843: LD_EXP 3
17847: PPUSH
17848: CALL_OW 302
17852: PUSH
17853: LD_EXP 12
17857: PUSH
17858: LD_INT 1
17860: EQUAL
17861: AND
17862: IFFALSE 17878
// begin Say ( Donaldson , D3-Don-1 ) ;
17864: LD_EXP 3
17868: PPUSH
17869: LD_STRING D3-Don-1
17871: PPUSH
17872: CALL_OW 88
// end else
17876: GO 17930
// begin if gammaCommander = 1 then
17878: LD_EXP 12
17882: PUSH
17883: LD_INT 1
17885: EQUAL
17886: IFFALSE 17930
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17888: LD_EXP 11
17892: PPUSH
17893: LD_INT 26
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 72
17907: PPUSH
17908: LD_STRING D3-Sol1-1
17910: PPUSH
17911: LD_STRING D3-Sol1-1
17913: PPUSH
17914: CALL 6800 0 3
// Say ( JMM , D3-JMM-2 ) ;
17918: LD_EXP 1
17922: PPUSH
17923: LD_STRING D3-JMM-2
17925: PPUSH
17926: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17930: LD_EXP 2
17934: PPUSH
17935: CALL_OW 302
17939: PUSH
17940: LD_EXP 12
17944: PUSH
17945: LD_INT 2
17947: EQUAL
17948: AND
17949: IFFALSE 17965
// begin Say ( Brown , D3-Brown-1 ) ;
17951: LD_EXP 2
17955: PPUSH
17956: LD_STRING D3-Brown-1
17958: PPUSH
17959: CALL_OW 88
// end else
17963: GO 18017
// begin if gammaCommander = 2 then
17965: LD_EXP 12
17969: PUSH
17970: LD_INT 2
17972: EQUAL
17973: IFFALSE 18017
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17975: LD_EXP 11
17979: PPUSH
17980: LD_INT 26
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PPUSH
17990: CALL_OW 72
17994: PPUSH
17995: LD_STRING D3-Sol1-1a
17997: PPUSH
17998: LD_STRING D3-Sol1-1a
18000: PPUSH
18001: CALL 6800 0 3
// Say ( JMM , D3-JMM-2 ) ;
18005: LD_EXP 1
18009: PPUSH
18010: LD_STRING D3-JMM-2
18012: PPUSH
18013: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
18017: LD_EXP 13
18021: PPUSH
18022: CALL_OW 302
18026: PUSH
18027: LD_EXP 12
18031: PUSH
18032: LD_INT 3
18034: EQUAL
18035: AND
18036: IFFALSE 18052
// begin Say ( Houten , D3-VanH-1 ) ;
18038: LD_EXP 13
18042: PPUSH
18043: LD_STRING D3-VanH-1
18045: PPUSH
18046: CALL_OW 88
// end else
18050: GO 18104
// begin if gammaCommander = 3 then
18052: LD_EXP 12
18056: PUSH
18057: LD_INT 3
18059: EQUAL
18060: IFFALSE 18104
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
18062: LD_EXP 11
18066: PPUSH
18067: LD_INT 26
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PPUSH
18077: CALL_OW 72
18081: PPUSH
18082: LD_STRING D3-Sol1-1b
18084: PPUSH
18085: LD_STRING D3-Sol1-1b
18087: PPUSH
18088: CALL 6800 0 3
// Say ( JMM , D3-JMM-2 ) ;
18092: LD_EXP 1
18096: PPUSH
18097: LD_STRING D3-JMM-2
18099: PPUSH
18100: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
18104: LD_EXP 15
18108: PPUSH
18109: CALL_OW 302
18113: IFFALSE 18141
// begin Say ( Joan , D3a-Joan-1 ) ;
18115: LD_EXP 15
18119: PPUSH
18120: LD_STRING D3a-Joan-1
18122: PPUSH
18123: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18127: LD_EXP 1
18131: PPUSH
18132: LD_STRING D3a-JMM-1
18134: PPUSH
18135: CALL_OW 88
// end else
18139: GO 18483
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18141: LD_STRING 06_JoanStatus_1
18143: PPUSH
18144: LD_INT 0
18146: PPUSH
18147: CALL_OW 30
18151: PUSH
18152: LD_INT 1
18154: EQUAL
18155: IFFALSE 18483
// begin Say ( JMM , D3b-JMM-1 ) ;
18157: LD_EXP 1
18161: PPUSH
18162: LD_STRING D3b-JMM-1
18164: PPUSH
18165: CALL_OW 88
// if gammaCommander = 1 then
18169: LD_EXP 12
18173: PUSH
18174: LD_INT 1
18176: EQUAL
18177: IFFALSE 18234
// if IsOK ( Donaldson ) then
18179: LD_EXP 3
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Donaldson , D3b-Don-1 ) else
18190: LD_EXP 3
18194: PPUSH
18195: LD_STRING D3b-Don-1
18197: PPUSH
18198: CALL_OW 88
18202: GO 18234
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18204: LD_EXP 11
18208: PPUSH
18209: LD_INT 26
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PPUSH
18219: CALL_OW 72
18223: PPUSH
18224: LD_STRING D3b-Sol1-1
18226: PPUSH
18227: LD_STRING D3b-Sol1-1
18229: PPUSH
18230: CALL 6800 0 3
// if gammaCommander = 2 then
18234: LD_EXP 12
18238: PUSH
18239: LD_INT 2
18241: EQUAL
18242: IFFALSE 18299
// if IsOk ( Brown ) then
18244: LD_EXP 2
18248: PPUSH
18249: CALL_OW 302
18253: IFFALSE 18269
// Say ( Brown , D3b-Brown-1 ) else
18255: LD_EXP 2
18259: PPUSH
18260: LD_STRING D3b-Brown-1
18262: PPUSH
18263: CALL_OW 88
18267: GO 18299
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18269: LD_EXP 11
18273: PPUSH
18274: LD_INT 26
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 72
18288: PPUSH
18289: LD_STRING D3b-Sol1-1
18291: PPUSH
18292: LD_STRING D3b-Sol1-1
18294: PPUSH
18295: CALL 6800 0 3
// if gammaCommander = 3 then
18299: LD_EXP 12
18303: PUSH
18304: LD_INT 3
18306: EQUAL
18307: IFFALSE 18364
// if IsOk ( Houten ) then
18309: LD_EXP 13
18313: PPUSH
18314: CALL_OW 302
18318: IFFALSE 18334
// Say ( Houten , D3b-VanH-1 ) else
18320: LD_EXP 13
18324: PPUSH
18325: LD_STRING D3b-VanH-1
18327: PPUSH
18328: CALL_OW 88
18332: GO 18364
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18334: LD_EXP 11
18338: PPUSH
18339: LD_INT 26
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PPUSH
18349: CALL_OW 72
18353: PPUSH
18354: LD_STRING D3b-Sol1-1
18356: PPUSH
18357: LD_STRING D3b-Sol1-1
18359: PPUSH
18360: CALL 6800 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
18364: LD_EXP 11
18368: PPUSH
18369: LD_INT 26
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL_OW 72
18383: PUSH
18384: LD_EXP 12
18388: PUSH
18389: LD_INT 1
18391: EQUAL
18392: PUSH
18393: LD_EXP 3
18397: PPUSH
18398: CALL_OW 302
18402: AND
18403: OR
18404: PUSH
18405: LD_EXP 12
18409: PUSH
18410: LD_INT 2
18412: EQUAL
18413: PUSH
18414: LD_EXP 2
18418: PPUSH
18419: CALL_OW 302
18423: AND
18424: OR
18425: PUSH
18426: LD_EXP 12
18430: PUSH
18431: LD_INT 3
18433: EQUAL
18434: PUSH
18435: LD_EXP 13
18439: PPUSH
18440: CALL_OW 302
18444: AND
18445: OR
18446: IFFALSE 18460
// Say ( JMM , D3b-JMM-2 ) ;
18448: LD_EXP 1
18452: PPUSH
18453: LD_STRING D3b-JMM-2
18455: PPUSH
18456: CALL_OW 88
// if IsOK ( Lisa ) then
18460: LD_EXP 6
18464: PPUSH
18465: CALL_OW 302
18469: IFFALSE 18483
// Say ( Lisa , D3b-Lisa-2 ) ;
18471: LD_EXP 6
18475: PPUSH
18476: LD_STRING D3b-Lisa-2
18478: PPUSH
18479: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18483: LD_INT 22
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 21
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 26
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 2
18515: PUSH
18516: LD_INT 25
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 25
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 25
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 25
18548: PUSH
18549: LD_INT 4
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: PPUSH
18569: CALL_OW 69
18573: PUSH
18574: LD_EXP 1
18578: PUSH
18579: LD_EXP 2
18583: PUSH
18584: LD_EXP 3
18588: PUSH
18589: LD_EXP 4
18593: PUSH
18594: LD_EXP 5
18598: PUSH
18599: LD_EXP 6
18603: PUSH
18604: LD_EXP 7
18608: PUSH
18609: LD_EXP 8
18613: PUSH
18614: LD_EXP 9
18618: PUSH
18619: LD_EXP 10
18623: PUSH
18624: LD_EXP 15
18628: PUSH
18629: LD_EXP 14
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: DIFF
18648: PPUSH
18649: LD_STRING DCa-Sol1-1
18651: PPUSH
18652: LD_STRING DCa-Sol1-1
18654: PPUSH
18655: CALL 6800 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18659: LD_EXP 1
18663: PPUSH
18664: LD_STRING DCb-JMM-1
18666: PPUSH
18667: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18671: LD_INT 22
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 21
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 26
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: LD_INT 25
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 25
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 25
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 25
18736: PUSH
18737: LD_INT 4
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: PUSH
18762: LD_EXP 1
18766: PUSH
18767: LD_EXP 2
18771: PUSH
18772: LD_EXP 3
18776: PUSH
18777: LD_EXP 4
18781: PUSH
18782: LD_EXP 5
18786: PUSH
18787: LD_EXP 6
18791: PUSH
18792: LD_EXP 7
18796: PUSH
18797: LD_EXP 8
18801: PUSH
18802: LD_EXP 9
18806: PUSH
18807: LD_EXP 10
18811: PUSH
18812: LD_EXP 15
18816: PUSH
18817: LD_EXP 14
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: DIFF
18836: PPUSH
18837: LD_STRING DCb-Sol1-1
18839: PPUSH
18840: LD_STRING DCb-Sol1-1
18842: PPUSH
18843: CALL 6800 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18847: LD_EXP 1
18851: PPUSH
18852: LD_STRING DCb-JMM-2
18854: PPUSH
18855: CALL_OW 88
// secondAttack = 1 ;
18859: LD_ADDR_EXP 34
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// end ;
18867: END
// every 0 0$01 trigger JMMArrive = 1 do
18868: LD_EXP 39
18872: PUSH
18873: LD_INT 1
18875: EQUAL
18876: IFFALSE 18956
18878: GO 18880
18880: DISABLE
// begin wait ( 3 3$0 ) ;
18881: LD_INT 6300
18883: PPUSH
18884: CALL_OW 67
// DialogueOn ;
18888: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18892: LD_EXP 23
18896: PPUSH
18897: LD_STRING D4-Pow-1
18899: PPUSH
18900: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18904: LD_EXP 1
18908: PPUSH
18909: LD_STRING D4-JMM-1
18911: PPUSH
18912: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18916: LD_EXP 23
18920: PPUSH
18921: LD_STRING D4-Pow-2
18923: PPUSH
18924: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18928: LD_EXP 1
18932: PPUSH
18933: LD_STRING D4-JMM-2
18935: PPUSH
18936: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18940: LD_EXP 23
18944: PPUSH
18945: LD_STRING D4-Pow-3
18947: PPUSH
18948: CALL_OW 94
// DialogueOff ;
18952: CALL_OW 7
// end ;
18956: END
// every 0 0$01 trigger JMMArrive = 1 do
18957: LD_EXP 39
18961: PUSH
18962: LD_INT 1
18964: EQUAL
18965: IFFALSE 18997
18967: GO 18969
18969: DISABLE
// begin wait ( 8 8$0 ) ;
18970: LD_INT 16800
18972: PPUSH
18973: CALL_OW 67
// DialogueOn ;
18977: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18981: LD_EXP 23
18985: PPUSH
18986: LD_STRING D4a-Pow-1
18988: PPUSH
18989: CALL_OW 94
// DialogueOff ;
18993: CALL_OW 7
// end ;
18997: END
// every 0 0$01 trigger JMMArrive = 1 do
18998: LD_EXP 39
19002: PUSH
19003: LD_INT 1
19005: EQUAL
19006: IFFALSE 19051
19008: GO 19010
19010: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
19011: LD_INT 21000
19013: PUSH
19014: LD_INT 25200
19016: PUSH
19017: LD_INT 31500
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: PUSH
19025: LD_OWVAR 67
19029: ARRAY
19030: PPUSH
19031: CALL_OW 67
// PrepareSikorsky ;
19035: CALL 5384 0 0
// SikorskyArrive = 1 ;
19039: LD_ADDR_EXP 18
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// PrepareSikorskyArmy ;
19047: CALL 5524 0 0
// end ;
19051: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
19052: LD_EXP 17
19056: PPUSH
19057: LD_INT 5
19059: PPUSH
19060: CALL_OW 308
19064: IFFALSE 19256
19066: GO 19068
19068: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
19069: LD_EXP 17
19073: PPUSH
19074: CALL_OW 87
// DialogueOn ;
19078: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
19082: LD_EXP 16
19086: PPUSH
19087: LD_STRING D5-Sik-1
19089: PPUSH
19090: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
19094: LD_EXP 1
19098: PPUSH
19099: LD_STRING D5-JMM-1a
19101: PPUSH
19102: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
19106: LD_EXP 16
19110: PPUSH
19111: LD_STRING D5-Sik-2
19113: PPUSH
19114: CALL_OW 88
// case query ( QSikorski ) of 1 :
19118: LD_STRING QSikorski
19120: PPUSH
19121: CALL_OW 97
19125: PUSH
19126: LD_INT 1
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19157
19134: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
19135: LD_EXP 16
19139: PPUSH
19140: LD_STRING D5a-Sik-1
19142: PPUSH
19143: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
19147: LD_ADDR_EXP 19
19151: PUSH
19152: LD_INT 2100
19154: ST_TO_ADDR
// end ; 2 :
19155: GO 19244
19157: LD_INT 2
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19188
19165: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
19166: LD_EXP 16
19170: PPUSH
19171: LD_STRING D5b-Sik-1
19173: PPUSH
19174: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19178: LD_ADDR_EXP 19
19182: PUSH
19183: LD_INT 10500
19185: ST_TO_ADDR
// end ; 3 :
19186: GO 19244
19188: LD_INT 3
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19243
19196: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
19197: LD_EXP 16
19201: PPUSH
19202: LD_STRING D5c-Sik-1
19204: PPUSH
19205: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
19209: LD_EXP 1
19213: PPUSH
19214: LD_STRING D5c-JMM-1
19216: PPUSH
19217: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
19221: LD_EXP 16
19225: PPUSH
19226: LD_STRING D5c-Sik-2
19228: PPUSH
19229: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19233: LD_ADDR_EXP 19
19237: PUSH
19238: LD_INT 10500
19240: ST_TO_ADDR
// end ; end ;
19241: GO 19244
19243: POP
// DialogueOff ;
19244: CALL_OW 7
// timerStatus = 1 ;
19248: LD_ADDR_EXP 35
19252: PUSH
19253: LD_INT 1
19255: ST_TO_ADDR
// end ;
19256: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19257: LD_EXP 19
19261: PUSH
19262: LD_INT 35
19264: LESS
19265: IFFALSE 19313
19267: GO 19269
19269: DISABLE
// begin timerStatus = 0 ;
19270: LD_ADDR_EXP 35
19274: PUSH
19275: LD_INT 0
19277: ST_TO_ADDR
// DialogueOn ;
19278: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19282: LD_EXP 16
19286: PPUSH
19287: LD_STRING D6-Sik-1
19289: PPUSH
19290: CALL_OW 88
// DialogueOff ;
19294: CALL_OW 7
// SikorskyAI = 1 ;
19298: LD_ADDR_EXP 20
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19306: LD_STRING M2
19308: PPUSH
19309: CALL_OW 337
// end ;
19313: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19314: LD_EXP 17
19318: PPUSH
19319: LD_INT 18
19321: PPUSH
19322: CALL_OW 308
19326: IFFALSE 19410
19328: GO 19330
19330: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19331: LD_EXP 16
19335: PPUSH
19336: LD_STRING D7-Sik-1
19338: PPUSH
19339: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19343: LD_EXP 1
19347: PPUSH
19348: LD_INT 24
19350: PPUSH
19351: CALL_OW 308
19355: PUSH
19356: LD_EXP 1
19360: PPUSH
19361: CALL_OW 310
19365: OR
19366: IFFALSE 19390
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19368: LD_EXP 16
19372: PPUSH
19373: LD_STRING D7a-Sik-1
19375: PPUSH
19376: CALL_OW 88
// SikorskyStatus = 1 ;
19380: LD_ADDR_EXP 21
19384: PUSH
19385: LD_INT 1
19387: ST_TO_ADDR
// end else
19388: GO 19410
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19390: LD_EXP 16
19394: PPUSH
19395: LD_STRING D7b-Sik-1
19397: PPUSH
19398: CALL_OW 88
// SikorskyStatus = 2 ;
19402: LD_ADDR_EXP 21
19406: PUSH
19407: LD_INT 2
19409: ST_TO_ADDR
// end ; end ;
19410: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19411: LD_EXP 36
19415: PUSH
19416: LD_INT 1
19418: EQUAL
19419: IFFALSE 19528
19421: GO 19423
19423: DISABLE
19424: LD_INT 0
19426: PPUSH
// begin enable ;
19427: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19428: LD_ADDR_VAR 0 1
19432: PUSH
19433: LD_INT 22
19435: PUSH
19436: LD_INT 3
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 69
19447: PUSH
19448: FOR_IN
19449: IFFALSE 19476
// if IsInArea ( i , RussianEscape ) then
19451: LD_VAR 0 1
19455: PPUSH
19456: LD_INT 22
19458: PPUSH
19459: CALL_OW 308
19463: IFFALSE 19474
// RemoveUnit ( i ) ;
19465: LD_VAR 0 1
19469: PPUSH
19470: CALL_OW 64
19474: GO 19448
19476: POP
19477: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19478: LD_ADDR_VAR 0 1
19482: PUSH
19483: LD_INT 22
19485: PUSH
19486: LD_INT 6
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PPUSH
19493: CALL_OW 69
19497: PUSH
19498: FOR_IN
19499: IFFALSE 19526
// if IsInArea ( i , RussianEscape ) then
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_INT 22
19508: PPUSH
19509: CALL_OW 308
19513: IFFALSE 19524
// RemoveUnit ( i ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: CALL_OW 64
19524: GO 19498
19526: POP
19527: POP
// end ; end_of_file
19528: PPOPN 1
19530: END
// on BuildingComplete ( building ) do var tmp , un ;
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
// begin if GetSide ( building ) = 3 then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 255
19544: PUSH
19545: LD_INT 3
19547: EQUAL
19548: IFFALSE 20035
// begin if GetBType ( building ) = b_depot then
19550: LD_VAR 0 1
19554: PPUSH
19555: CALL_OW 266
19559: PUSH
19560: LD_INT 0
19562: EQUAL
19563: IFFALSE 19631
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 274
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: LD_INT 5000
19580: PPUSH
19581: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19585: LD_VAR 0 1
19589: PPUSH
19590: CALL_OW 274
19594: PPUSH
19595: LD_INT 2
19597: PPUSH
19598: LD_INT 5000
19600: PPUSH
19601: CALL_OW 277
// SetBName ( building , konev ) ;
19605: LD_VAR 0 1
19609: PPUSH
19610: LD_STRING konev
19612: PPUSH
19613: CALL_OW 500
// ruDepot = building ;
19617: LD_ADDR_EXP 28
19621: PUSH
19622: LD_VAR 0 1
19626: ST_TO_ADDR
// BuildRussianBase ;
19627: CALL 7405 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19631: LD_VAR 0 1
19635: PPUSH
19636: CALL_OW 266
19640: PUSH
19641: LD_INT 0
19643: EQUAL
19644: PUSH
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 266
19654: PUSH
19655: LD_INT 2
19657: EQUAL
19658: OR
19659: PUSH
19660: LD_VAR 0 1
19664: PPUSH
19665: CALL_OW 266
19669: PUSH
19670: LD_INT 4
19672: EQUAL
19673: OR
19674: IFFALSE 19685
// ComUpgrade ( building ) ;
19676: LD_VAR 0 1
19680: PPUSH
19681: CALL_OW 146
// if GetBType ( building ) = b_lab then
19685: LD_VAR 0 1
19689: PPUSH
19690: CALL_OW 266
19694: PUSH
19695: LD_INT 6
19697: EQUAL
19698: IFFALSE 19749
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_INT 10
19707: PPUSH
19708: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19712: LD_VAR 0 1
19716: PPUSH
19717: LD_INT 12
19719: PPUSH
19720: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19724: LD_INT 3
19726: PPUSH
19727: LD_VAR 0 1
19731: PPUSH
19732: LD_INT 3
19734: PPUSH
19735: CALL 7960 0 3
// ruLab = building ;
19739: LD_ADDR_EXP 29
19743: PUSH
19744: LD_VAR 0 1
19748: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19749: LD_VAR 0 1
19753: PPUSH
19754: CALL_OW 266
19758: PUSH
19759: LD_INT 32
19761: EQUAL
19762: IFFALSE 19880
// begin uc_side = 3 ;
19764: LD_ADDR_OWVAR 20
19768: PUSH
19769: LD_INT 3
19771: ST_TO_ADDR
// uc_nation = 3 ;
19772: LD_ADDR_OWVAR 21
19776: PUSH
19777: LD_INT 3
19779: ST_TO_ADDR
// hc_gallery =  ;
19780: LD_ADDR_OWVAR 33
19784: PUSH
19785: LD_STRING 
19787: ST_TO_ADDR
// hc_name =  ;
19788: LD_ADDR_OWVAR 26
19792: PUSH
19793: LD_STRING 
19795: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19796: LD_INT 0
19798: PPUSH
19799: LD_INT 1
19801: PPUSH
19802: LD_EXP 25
19806: PPUSH
19807: LD_EXP 26
19811: PPUSH
19812: CALL_OW 12
19816: PPUSH
19817: CALL_OW 380
// un = CreateHuman ;
19821: LD_ADDR_VAR 0 3
19825: PUSH
19826: CALL_OW 44
19830: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19831: LD_VAR 0 3
19835: PPUSH
19836: LD_VAR 0 1
19840: PPUSH
19841: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19845: LD_VAR 0 1
19849: PPUSH
19850: LD_INT 43
19852: PUSH
19853: LD_INT 44
19855: PUSH
19856: LD_INT 46
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: PPUSH
19867: LD_INT 3
19869: PPUSH
19870: CALL_OW 12
19874: ARRAY
19875: PPUSH
19876: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19880: LD_VAR 0 1
19884: PPUSH
19885: CALL_OW 266
19889: PUSH
19890: LD_INT 33
19892: EQUAL
19893: IFFALSE 19930
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19895: LD_VAR 0 1
19899: PPUSH
19900: LD_INT 43
19902: PUSH
19903: LD_INT 44
19905: PUSH
19906: LD_INT 46
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 1
19916: PPUSH
19917: LD_INT 3
19919: PPUSH
19920: CALL_OW 12
19924: ARRAY
19925: PPUSH
19926: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19930: LD_VAR 0 1
19934: PPUSH
19935: CALL_OW 266
19939: PUSH
19940: LD_INT 24
19942: EQUAL
19943: IFFALSE 19953
// russianAI = 1 ;
19945: LD_ADDR_EXP 27
19949: PUSH
19950: LD_INT 1
19952: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19953: LD_EXP 31
19957: PUSH
19958: LD_INT 0
19960: GREATER
19961: IFFALSE 20035
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19963: LD_ADDR_EXP 31
19967: PUSH
19968: LD_EXP 31
19972: PPUSH
19973: LD_INT 1
19975: PPUSH
19976: CALL_OW 3
19980: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19981: LD_ADDR_EXP 31
19985: PUSH
19986: LD_EXP 31
19990: PPUSH
19991: LD_INT 1
19993: PPUSH
19994: CALL_OW 3
19998: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19999: LD_ADDR_EXP 31
20003: PUSH
20004: LD_EXP 31
20008: PPUSH
20009: LD_INT 1
20011: PPUSH
20012: CALL_OW 3
20016: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20017: LD_ADDR_EXP 31
20021: PUSH
20022: LD_EXP 31
20026: PPUSH
20027: LD_INT 1
20029: PPUSH
20030: CALL_OW 3
20034: ST_TO_ADDR
// end ; end ; end ;
20035: PPOPN 3
20037: END
// on UpgradeComplete ( building ) do var i ;
20038: LD_INT 0
20040: PPUSH
// begin if GetSide ( building ) = 3 then
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 255
20050: PUSH
20051: LD_INT 3
20053: EQUAL
20054: IFFALSE 20235
// begin if GetBType ( building ) = b_factory then
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 266
20065: PUSH
20066: LD_INT 3
20068: EQUAL
20069: IFFALSE 20136
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20071: LD_ADDR_VAR 0 2
20075: PUSH
20076: LD_INT 22
20078: PUSH
20079: LD_INT 3
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 25
20088: PUSH
20089: LD_INT 3
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PPUSH
20100: CALL_OW 69
20104: PUSH
20105: FOR_IN
20106: IFFALSE 20124
// ComEnterUnit ( i , building ) ;
20108: LD_VAR 0 2
20112: PPUSH
20113: LD_VAR 0 1
20117: PPUSH
20118: CALL_OW 120
20122: GO 20105
20124: POP
20125: POP
// ruFab = building ;
20126: LD_ADDR_EXP 30
20130: PUSH
20131: LD_VAR 0 1
20135: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
20136: LD_VAR 0 1
20140: PPUSH
20141: CALL_OW 266
20145: PUSH
20146: LD_INT 8
20148: EQUAL
20149: IFFALSE 20206
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: LD_INT 22
20158: PUSH
20159: LD_INT 3
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 25
20168: PUSH
20169: LD_INT 4
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PPUSH
20180: CALL_OW 69
20184: PUSH
20185: FOR_IN
20186: IFFALSE 20204
// ComEnterUnit ( i , building ) ;
20188: LD_VAR 0 2
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 120
20202: GO 20185
20204: POP
20205: POP
// if GetBType ( building ) = b_warehouse then
20206: LD_VAR 0 1
20210: PPUSH
20211: CALL_OW 266
20215: PUSH
20216: LD_INT 1
20218: EQUAL
20219: IFFALSE 20235
// begin ComEnterUnit ( Borodin , building ) ;
20221: LD_EXP 24
20225: PPUSH
20226: LD_VAR 0 1
20230: PPUSH
20231: CALL_OW 120
// end ; end ; end ;
20235: PPOPN 2
20237: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
20238: LD_VAR 0 1
20242: PPUSH
20243: CALL_OW 247
20247: PUSH
20248: LD_INT 2
20250: EQUAL
20251: PUSH
20252: LD_VAR 0 1
20256: PPUSH
20257: CALL_OW 263
20261: PUSH
20262: LD_INT 3
20264: EQUAL
20265: AND
20266: PUSH
20267: LD_EXP 41
20271: PUSH
20272: LD_INT 0
20274: EQUAL
20275: AND
20276: IFFALSE 20394
// begin varEvent1 = 1 ;
20278: LD_ADDR_EXP 41
20282: PUSH
20283: LD_INT 1
20285: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20295: LD_INT 22
20297: PUSH
20298: LD_INT 1
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 21
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: LD_INT 25
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 25
20330: PUSH
20331: LD_INT 2
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 25
20340: PUSH
20341: LD_INT 3
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 25
20350: PUSH
20351: LD_INT 4
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: PUSH
20375: LD_EXP 1
20379: PUSH
20380: EMPTY
20381: LIST
20382: DIFF
20383: PPUSH
20384: LD_STRING DC-Sol1-1
20386: PPUSH
20387: LD_STRING DC-FSol1-1
20389: PPUSH
20390: CALL 6800 0 3
// end ; end ;
20394: PPOPN 1
20396: END
// on UnitDestroyed ( unit ) do var i ;
20397: LD_INT 0
20399: PPUSH
// begin if GetSide ( unit ) = 3 then
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 255
20409: PUSH
20410: LD_INT 3
20412: EQUAL
20413: IFFALSE 21183
// begin if GetType ( unit ) = unit_building then
20415: LD_VAR 0 1
20419: PPUSH
20420: CALL_OW 247
20424: PUSH
20425: LD_INT 3
20427: EQUAL
20428: IFFALSE 21120
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20430: LD_VAR 0 1
20434: PPUSH
20435: CALL_OW 266
20439: PUSH
20440: LD_INT 31
20442: EQUAL
20443: PUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 266
20453: PUSH
20454: LD_INT 32
20456: EQUAL
20457: OR
20458: PUSH
20459: LD_VAR 0 1
20463: PPUSH
20464: CALL_OW 266
20468: PUSH
20469: LD_INT 36
20471: EQUAL
20472: OR
20473: PUSH
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 266
20483: PUSH
20484: LD_INT 0
20486: EQUAL
20487: OR
20488: PUSH
20489: LD_VAR 0 1
20493: PPUSH
20494: CALL_OW 266
20498: PUSH
20499: LD_INT 24
20501: EQUAL
20502: OR
20503: PUSH
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 266
20513: PUSH
20514: LD_INT 17
20516: EQUAL
20517: OR
20518: PUSH
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 266
20528: PUSH
20529: LD_INT 25
20531: EQUAL
20532: OR
20533: PUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: CALL_OW 266
20543: PUSH
20544: LD_INT 19
20546: EQUAL
20547: OR
20548: PUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: CALL_OW 266
20558: PUSH
20559: LD_INT 20
20561: EQUAL
20562: OR
20563: PUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 266
20573: PUSH
20574: LD_INT 18
20576: EQUAL
20577: OR
20578: PUSH
20579: LD_VAR 0 1
20583: PPUSH
20584: CALL_OW 266
20588: PUSH
20589: LD_INT 21
20591: EQUAL
20592: OR
20593: PUSH
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL_OW 266
20603: PUSH
20604: LD_INT 23
20606: EQUAL
20607: OR
20608: PUSH
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL_OW 266
20618: PUSH
20619: LD_INT 16
20621: EQUAL
20622: OR
20623: PUSH
20624: LD_VAR 0 1
20628: PPUSH
20629: CALL_OW 266
20633: PUSH
20634: LD_INT 6
20636: EQUAL
20637: OR
20638: PUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 266
20648: PUSH
20649: LD_INT 29
20651: EQUAL
20652: OR
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 266
20663: PUSH
20664: LD_INT 26
20666: EQUAL
20667: OR
20668: PUSH
20669: LD_VAR 0 1
20673: PPUSH
20674: CALL_OW 266
20678: PUSH
20679: LD_INT 30
20681: EQUAL
20682: OR
20683: PUSH
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 266
20693: PUSH
20694: LD_INT 28
20696: EQUAL
20697: OR
20698: PUSH
20699: LD_VAR 0 1
20703: PPUSH
20704: CALL_OW 266
20708: PUSH
20709: LD_INT 27
20711: EQUAL
20712: OR
20713: PUSH
20714: LD_VAR 0 1
20718: PPUSH
20719: CALL_OW 266
20723: PUSH
20724: LD_INT 33
20726: EQUAL
20727: OR
20728: PUSH
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 266
20738: PUSH
20739: LD_INT 2
20741: EQUAL
20742: OR
20743: PUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: CALL_OW 266
20753: PUSH
20754: LD_INT 4
20756: EQUAL
20757: OR
20758: IFFALSE 20844
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20760: LD_ADDR_EXP 31
20764: PUSH
20765: LD_EXP 31
20769: PUSH
20770: LD_VAR 0 1
20774: PPUSH
20775: CALL_OW 266
20779: ADD
20780: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20781: LD_ADDR_EXP 31
20785: PUSH
20786: LD_EXP 31
20790: PUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: CALL_OW 250
20800: ADD
20801: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20802: LD_ADDR_EXP 31
20806: PUSH
20807: LD_EXP 31
20811: PUSH
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 251
20821: ADD
20822: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20823: LD_ADDR_EXP 31
20827: PUSH
20828: LD_EXP 31
20832: PUSH
20833: LD_VAR 0 1
20837: PPUSH
20838: CALL_OW 254
20842: ADD
20843: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20844: LD_VAR 0 1
20848: PPUSH
20849: CALL_OW 266
20853: PUSH
20854: LD_INT 1
20856: EQUAL
20857: IFFALSE 20936
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20859: LD_ADDR_EXP 31
20863: PUSH
20864: LD_EXP 31
20868: PUSH
20869: LD_INT 0
20871: ADD
20872: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20873: LD_ADDR_EXP 31
20877: PUSH
20878: LD_EXP 31
20882: PUSH
20883: LD_VAR 0 1
20887: PPUSH
20888: CALL_OW 250
20892: ADD
20893: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20894: LD_ADDR_EXP 31
20898: PUSH
20899: LD_EXP 31
20903: PUSH
20904: LD_VAR 0 1
20908: PPUSH
20909: CALL_OW 251
20913: ADD
20914: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20915: LD_ADDR_EXP 31
20919: PUSH
20920: LD_EXP 31
20924: PUSH
20925: LD_VAR 0 1
20929: PPUSH
20930: CALL_OW 254
20934: ADD
20935: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20936: LD_VAR 0 1
20940: PPUSH
20941: CALL_OW 266
20945: PUSH
20946: LD_INT 3
20948: EQUAL
20949: IFFALSE 21028
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20951: LD_ADDR_EXP 31
20955: PUSH
20956: LD_EXP 31
20960: PUSH
20961: LD_INT 2
20963: ADD
20964: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20965: LD_ADDR_EXP 31
20969: PUSH
20970: LD_EXP 31
20974: PUSH
20975: LD_VAR 0 1
20979: PPUSH
20980: CALL_OW 250
20984: ADD
20985: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20986: LD_ADDR_EXP 31
20990: PUSH
20991: LD_EXP 31
20995: PUSH
20996: LD_VAR 0 1
21000: PPUSH
21001: CALL_OW 251
21005: ADD
21006: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21007: LD_ADDR_EXP 31
21011: PUSH
21012: LD_EXP 31
21016: PUSH
21017: LD_VAR 0 1
21021: PPUSH
21022: CALL_OW 254
21026: ADD
21027: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21028: LD_VAR 0 1
21032: PPUSH
21033: CALL_OW 266
21037: PUSH
21038: LD_INT 5
21040: EQUAL
21041: IFFALSE 21120
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21043: LD_ADDR_EXP 31
21047: PUSH
21048: LD_EXP 31
21052: PUSH
21053: LD_INT 4
21055: ADD
21056: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21057: LD_ADDR_EXP 31
21061: PUSH
21062: LD_EXP 31
21066: PUSH
21067: LD_VAR 0 1
21071: PPUSH
21072: CALL_OW 250
21076: ADD
21077: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21078: LD_ADDR_EXP 31
21082: PUSH
21083: LD_EXP 31
21087: PUSH
21088: LD_VAR 0 1
21092: PPUSH
21093: CALL_OW 251
21097: ADD
21098: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21099: LD_ADDR_EXP 31
21103: PUSH
21104: LD_EXP 31
21108: PUSH
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 254
21118: ADD
21119: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
21120: LD_VAR 0 1
21124: PPUSH
21125: CALL_OW 247
21129: PUSH
21130: LD_INT 1
21132: EQUAL
21133: IFFALSE 21183
// begin for i in defenders_list do
21135: LD_ADDR_VAR 0 2
21139: PUSH
21140: LD_EXP 32
21144: PUSH
21145: FOR_IN
21146: IFFALSE 21181
// if i = unit then
21148: LD_VAR 0 2
21152: PUSH
21153: LD_VAR 0 1
21157: EQUAL
21158: IFFALSE 21179
// defenders_list = defenders_list diff [ unit ] ;
21160: LD_ADDR_EXP 32
21164: PUSH
21165: LD_EXP 32
21169: PUSH
21170: LD_VAR 0 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: DIFF
21178: ST_TO_ADDR
21179: GO 21145
21181: POP
21182: POP
// end ; end ; end ; end_of_file
21183: PPOPN 2
21185: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21186: GO 21188
21188: DISABLE
21189: LD_INT 0
21191: PPUSH
// begin enemyWayX = [ ] ;
21192: LD_ADDR_EXP 45
21196: PUSH
21197: EMPTY
21198: ST_TO_ADDR
// enemyWayY = [ ] ;
21199: LD_ADDR_EXP 46
21203: PUSH
21204: EMPTY
21205: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
21206: LD_ADDR_VAR 0 1
21210: PUSH
21211: LD_INT 1
21213: PPUSH
21214: LD_INT 3
21216: PPUSH
21217: CALL_OW 12
21221: ST_TO_ADDR
// if rnd = 1 then
21222: LD_VAR 0 1
21226: PUSH
21227: LD_INT 1
21229: EQUAL
21230: IFFALSE 21270
// begin enemyWayX = [ 73 , 46 , 29 ] ;
21232: LD_ADDR_EXP 45
21236: PUSH
21237: LD_INT 73
21239: PUSH
21240: LD_INT 46
21242: PUSH
21243: LD_INT 29
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21251: LD_ADDR_EXP 46
21255: PUSH
21256: LD_INT 71
21258: PUSH
21259: LD_INT 43
21261: PUSH
21262: LD_INT 29
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: ST_TO_ADDR
// end ; if rnd = 2 then
21270: LD_VAR 0 1
21274: PUSH
21275: LD_INT 2
21277: EQUAL
21278: IFFALSE 21302
// begin enemyWayX = [ 64 ] ;
21280: LD_ADDR_EXP 45
21284: PUSH
21285: LD_INT 64
21287: PUSH
21288: EMPTY
21289: LIST
21290: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21291: LD_ADDR_EXP 46
21295: PUSH
21296: LD_INT 43
21298: PUSH
21299: EMPTY
21300: LIST
21301: ST_TO_ADDR
// end ; if rnd = 3 then
21302: LD_VAR 0 1
21306: PUSH
21307: LD_INT 3
21309: EQUAL
21310: IFFALSE 21334
// begin enemyWayX = [ 80 ] ;
21312: LD_ADDR_EXP 45
21316: PUSH
21317: LD_INT 80
21319: PUSH
21320: EMPTY
21321: LIST
21322: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21323: LD_ADDR_EXP 46
21327: PUSH
21328: LD_INT 28
21330: PUSH
21331: EMPTY
21332: LIST
21333: ST_TO_ADDR
// end ; enable ;
21334: ENABLE
// end ;
21335: PPOPN 1
21337: END
// every 0 0$1 do
21338: GO 21340
21340: DISABLE
// begin enable ;
21341: ENABLE
// if escapeAvalaible = 0 then
21342: LD_EXP 36
21346: PUSH
21347: LD_INT 0
21349: EQUAL
21350: IFFALSE 21362
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21352: LD_INT 3
21354: PPUSH
21355: LD_INT 6
21357: PPUSH
21358: CALL 8045 0 2
// if escapeAvalaible = 0 then
21362: LD_EXP 36
21366: PUSH
21367: LD_INT 0
21369: EQUAL
21370: IFFALSE 21382
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21372: LD_INT 1
21374: PPUSH
21375: LD_INT 24
21377: PPUSH
21378: CALL 8705 0 2
// if russianAI = 1 then
21382: LD_EXP 27
21386: PUSH
21387: LD_INT 1
21389: EQUAL
21390: IFFALSE 21460
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21392: LD_INT 3
21394: PPUSH
21395: LD_INT 7
21397: PPUSH
21398: LD_INT 6
21400: PPUSH
21401: LD_EXP 29
21405: PPUSH
21406: CALL 10794 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21410: LD_INT 3
21412: PPUSH
21413: LD_EXP 28
21417: PPUSH
21418: LD_INT 6
21420: PPUSH
21421: LD_EXP 31
21425: PPUSH
21426: CALL 10388 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21430: LD_INT 3
21432: PPUSH
21433: LD_INT 26
21435: PPUSH
21436: LD_EXP 45
21440: PPUSH
21441: LD_EXP 46
21445: PPUSH
21446: CALL 9256 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21450: LD_INT 3
21452: PPUSH
21453: LD_INT 1
21455: PPUSH
21456: CALL 11338 0 2
// end ; if SikorskyArrive = 1 then
21460: LD_EXP 18
21464: PUSH
21465: LD_INT 1
21467: EQUAL
21468: IFFALSE 21486
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21470: LD_INT 3
21472: PPUSH
21473: LD_INT 10
21475: PPUSH
21476: LD_INT 53
21478: PPUSH
21479: LD_INT 59
21481: PPUSH
21482: CALL 9053 0 4
// end ;
21486: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21487: LD_EXP 27
21491: PUSH
21492: LD_INT 1
21494: EQUAL
21495: IFFALSE 21771
21497: GO 21499
21499: DISABLE
21500: LD_INT 0
21502: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21503: LD_ADDR_VAR 0 1
21507: PUSH
21508: LD_INT 22
21510: PUSH
21511: LD_INT 3
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 21
21520: PUSH
21521: LD_INT 3
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 30
21530: PUSH
21531: LD_INT 32
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 3
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 35
21546: PUSH
21547: LD_INT 43
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 35
21556: PUSH
21557: LD_INT 44
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 35
21566: PUSH
21567: LD_INT 46
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: PPUSH
21590: CALL_OW 69
21594: PUSH
21595: FOR_IN
21596: IFFALSE 21635
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21598: LD_VAR 0 1
21602: PPUSH
21603: LD_INT 43
21605: PUSH
21606: LD_INT 44
21608: PUSH
21609: LD_INT 46
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 1
21619: PPUSH
21620: LD_INT 3
21622: PPUSH
21623: CALL_OW 12
21627: ARRAY
21628: PPUSH
21629: CALL_OW 431
21633: GO 21595
21635: POP
21636: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21637: LD_ADDR_VAR 0 1
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 21
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 30
21664: PUSH
21665: LD_INT 33
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 3
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: LD_INT 35
21680: PUSH
21681: LD_INT 43
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 35
21690: PUSH
21691: LD_INT 44
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 35
21700: PUSH
21701: LD_INT 46
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: PUSH
21729: FOR_IN
21730: IFFALSE 21769
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21732: LD_VAR 0 1
21736: PPUSH
21737: LD_INT 43
21739: PUSH
21740: LD_INT 44
21742: PUSH
21743: LD_INT 46
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PPUSH
21754: LD_INT 3
21756: PPUSH
21757: CALL_OW 12
21761: ARRAY
21762: PPUSH
21763: CALL_OW 431
21767: GO 21729
21769: POP
21770: POP
// end ;
21771: PPOPN 1
21773: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
21774: LD_EXP 24
21778: PPUSH
21779: CALL_OW 310
21783: NOT
21784: PUSH
21785: LD_EXP 28
21789: PPUSH
21790: CALL_OW 302
21794: AND
21795: PUSH
21796: LD_EXP 28
21800: PPUSH
21801: CALL_OW 255
21805: PUSH
21806: LD_INT 3
21808: EQUAL
21809: AND
21810: IFFALSE 21830
21812: GO 21814
21814: DISABLE
// begin enable ;
21815: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
21816: LD_EXP 24
21820: PPUSH
21821: LD_EXP 28
21825: PPUSH
21826: CALL_OW 120
// end ;
21830: END
// every 0 0$1 trigger SikorskyAI = 1 do
21831: LD_EXP 20
21835: PUSH
21836: LD_INT 1
21838: EQUAL
21839: IFFALSE 21874
21841: GO 21843
21843: DISABLE
// begin enable ;
21844: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21845: LD_INT 4
21847: PPUSH
21848: LD_INT 10
21850: PPUSH
21851: LD_INT 93
21853: PPUSH
21854: LD_INT 93
21856: PPUSH
21857: CALL 9053 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21861: LD_INT 4
21863: PPUSH
21864: LD_INT 11
21866: PPUSH
21867: LD_INT 3
21869: PPUSH
21870: CALL 15550 0 3
// end ;
21874: END
// every 0 0$1 trigger SikorskyAI = 1 do
21875: LD_EXP 20
21879: PUSH
21880: LD_INT 1
21882: EQUAL
21883: IFFALSE 21895
21885: GO 21887
21887: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21888: LD_INT 4
21890: PPUSH
21891: CALL 10060 0 1
21895: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21896: LD_EXP 27
21900: PUSH
21901: LD_INT 1
21903: EQUAL
21904: PUSH
21905: LD_EXP 30
21909: PPUSH
21910: CALL_OW 302
21914: AND
21915: PUSH
21916: LD_EXP 30
21920: PPUSH
21921: CALL_OW 255
21925: PUSH
21926: LD_INT 3
21928: EQUAL
21929: AND
21930: PUSH
21931: LD_INT 22
21933: PUSH
21934: LD_INT 3
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 21
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 33
21953: PUSH
21954: LD_INT 3
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: PPUSH
21966: CALL_OW 69
21970: PUSH
21971: LD_INT 0
21973: EQUAL
21974: AND
21975: IFFALSE 22209
21977: GO 21979
21979: DISABLE
// begin enable ;
21980: ENABLE
// if Difficulty = 1 then
21981: LD_OWVAR 67
21985: PUSH
21986: LD_INT 1
21988: EQUAL
21989: IFFALSE 22057
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21991: LD_INT 3
21993: PPUSH
21994: LD_EXP 30
21998: PPUSH
21999: LD_INT 5
22001: PPUSH
22002: LD_INT 8
22004: PPUSH
22005: CALL_OW 12
22009: PPUSH
22010: LD_INT 43
22012: PUSH
22013: LD_INT 43
22015: PUSH
22016: LD_INT 43
22018: PUSH
22019: LD_INT 43
22021: PUSH
22022: LD_INT 44
22024: PUSH
22025: LD_INT 44
22027: PUSH
22028: LD_INT 44
22030: PUSH
22031: LD_INT 46
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: PPUSH
22044: LD_INT 1
22046: PPUSH
22047: LD_INT 3
22049: PPUSH
22050: LD_INT 24
22052: PPUSH
22053: CALL 8899 0 7
// if Difficulty = 2 then
22057: LD_OWVAR 67
22061: PUSH
22062: LD_INT 2
22064: EQUAL
22065: IFFALSE 22133
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
22067: LD_INT 3
22069: PPUSH
22070: LD_EXP 30
22074: PPUSH
22075: LD_INT 6
22077: PPUSH
22078: LD_INT 8
22080: PPUSH
22081: CALL_OW 12
22085: PPUSH
22086: LD_INT 43
22088: PUSH
22089: LD_INT 43
22091: PUSH
22092: LD_INT 44
22094: PUSH
22095: LD_INT 44
22097: PUSH
22098: LD_INT 44
22100: PUSH
22101: LD_INT 44
22103: PUSH
22104: LD_INT 46
22106: PUSH
22107: LD_INT 46
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: PPUSH
22120: LD_INT 1
22122: PPUSH
22123: LD_INT 3
22125: PPUSH
22126: LD_INT 24
22128: PPUSH
22129: CALL 8899 0 7
// if Difficulty = 3 then
22133: LD_OWVAR 67
22137: PUSH
22138: LD_INT 3
22140: EQUAL
22141: IFFALSE 22209
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
22143: LD_INT 3
22145: PPUSH
22146: LD_EXP 30
22150: PPUSH
22151: LD_INT 7
22153: PPUSH
22154: LD_INT 8
22156: PPUSH
22157: CALL_OW 12
22161: PPUSH
22162: LD_INT 43
22164: PUSH
22165: LD_INT 43
22167: PUSH
22168: LD_INT 44
22170: PUSH
22171: LD_INT 44
22173: PUSH
22174: LD_INT 44
22176: PUSH
22177: LD_INT 46
22179: PUSH
22180: LD_INT 46
22182: PUSH
22183: LD_INT 46
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: PPUSH
22196: LD_INT 1
22198: PPUSH
22199: LD_INT 3
22201: PPUSH
22202: LD_INT 24
22204: PPUSH
22205: CALL 8899 0 7
// end ;
22209: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
22210: LD_EXP 38
22214: PUSH
22215: LD_INT 1
22217: EQUAL
22218: IFFALSE 22300
22220: GO 22222
22222: DISABLE
22223: LD_INT 0
22225: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
22226: LD_ADDR_VAR 0 1
22230: PUSH
22231: LD_INT 22
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 21
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 3
22253: PUSH
22254: LD_INT 24
22256: PUSH
22257: LD_INT 650
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: PPUSH
22273: CALL_OW 69
22277: PUSH
22278: FOR_IN
22279: IFFALSE 22298
// ComMoveXY ( i , 51 , 12 ) ;
22281: LD_VAR 0 1
22285: PPUSH
22286: LD_INT 51
22288: PPUSH
22289: LD_INT 12
22291: PPUSH
22292: CALL_OW 111
22296: GO 22278
22298: POP
22299: POP
// end ; end_of_file
22300: PPOPN 1
22302: END
// every 3 3$20 trigger firstAttack = 1 do
22303: LD_EXP 33
22307: PUSH
22308: LD_INT 1
22310: EQUAL
22311: IFFALSE 22417
22313: GO 22315
22315: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22316: LD_INT 6
22318: PPUSH
22319: LD_INT 3
22321: PPUSH
22322: LD_INT 5
22324: PPUSH
22325: LD_INT 6
22327: PPUSH
22328: CALL_OW 12
22332: PUSH
22333: LD_INT 5
22335: PPUSH
22336: LD_INT 6
22338: PPUSH
22339: CALL_OW 12
22343: PUSH
22344: LD_INT 5
22346: PPUSH
22347: LD_INT 6
22349: PPUSH
22350: CALL_OW 12
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: PUSH
22360: LD_OWVAR 67
22364: ARRAY
22365: PPUSH
22366: LD_INT 0
22368: PPUSH
22369: LD_INT 0
22371: PPUSH
22372: LD_INT 0
22374: PPUSH
22375: LD_INT 0
22377: PPUSH
22378: LD_EXP 25
22382: PPUSH
22383: LD_EXP 26
22387: PPUSH
22388: CALL_OW 12
22392: PPUSH
22393: LD_INT 16
22395: PPUSH
22396: LD_INT 7
22398: PPUSH
22399: LD_INT 1
22401: PPUSH
22402: LD_INT 1
22404: PPUSH
22405: LD_INT 3
22407: PPUSH
22408: CALL_OW 12
22412: PPUSH
22413: CALL 11568 0 12
22417: END
// every 3 3$40 trigger firstAttack = 1 do
22418: LD_EXP 33
22422: PUSH
22423: LD_INT 1
22425: EQUAL
22426: IFFALSE 22518
22428: GO 22430
22430: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22431: LD_INT 16
22433: PPUSH
22434: LD_INT 6
22436: PPUSH
22437: LD_INT 3
22439: PPUSH
22440: LD_INT 4
22442: PPUSH
22443: CALL_OW 12
22447: PUSH
22448: LD_INT 4
22450: PPUSH
22451: LD_INT 5
22453: PPUSH
22454: CALL_OW 12
22458: PUSH
22459: LD_INT 5
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: LD_OWVAR 67
22471: ARRAY
22472: PPUSH
22473: LD_EXP 25
22477: PPUSH
22478: LD_EXP 26
22482: PPUSH
22483: CALL_OW 12
22487: PPUSH
22488: LD_INT 3
22490: PPUSH
22491: LD_INT 1
22493: PPUSH
22494: LD_INT 3
22496: PPUSH
22497: LD_INT 44
22499: PUSH
22500: LD_INT 46
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PPUSH
22507: EMPTY
22508: PPUSH
22509: EMPTY
22510: PPUSH
22511: LD_INT 1
22513: PPUSH
22514: CALL 13861 0 11
22518: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22519: LD_EXP 33
22523: PUSH
22524: LD_INT 1
22526: EQUAL
22527: PUSH
22528: LD_EXP 39
22532: PUSH
22533: LD_INT 0
22535: EQUAL
22536: AND
22537: IFFALSE 22643
22539: GO 22541
22541: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22542: LD_INT 6
22544: PPUSH
22545: LD_INT 3
22547: PPUSH
22548: LD_INT 5
22550: PPUSH
22551: LD_INT 6
22553: PPUSH
22554: CALL_OW 12
22558: PUSH
22559: LD_INT 5
22561: PPUSH
22562: LD_INT 6
22564: PPUSH
22565: CALL_OW 12
22569: PUSH
22570: LD_INT 5
22572: PPUSH
22573: LD_INT 6
22575: PPUSH
22576: CALL_OW 12
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: PUSH
22586: LD_OWVAR 67
22590: ARRAY
22591: PPUSH
22592: LD_INT 0
22594: PPUSH
22595: LD_INT 0
22597: PPUSH
22598: LD_INT 0
22600: PPUSH
22601: LD_INT 0
22603: PPUSH
22604: LD_EXP 25
22608: PPUSH
22609: LD_EXP 26
22613: PPUSH
22614: CALL_OW 12
22618: PPUSH
22619: LD_INT 16
22621: PPUSH
22622: LD_INT 7
22624: PPUSH
22625: LD_INT 1
22627: PPUSH
22628: LD_INT 1
22630: PPUSH
22631: LD_INT 3
22633: PPUSH
22634: CALL_OW 12
22638: PPUSH
22639: CALL 11568 0 12
22643: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22644: LD_EXP 33
22648: PUSH
22649: LD_INT 1
22651: EQUAL
22652: PUSH
22653: LD_EXP 39
22657: PUSH
22658: LD_INT 0
22660: EQUAL
22661: AND
22662: IFFALSE 22758
22664: GO 22666
22666: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22667: LD_INT 16
22669: PPUSH
22670: LD_INT 6
22672: PPUSH
22673: LD_INT 5
22675: PPUSH
22676: LD_INT 6
22678: PPUSH
22679: CALL_OW 12
22683: PUSH
22684: LD_INT 6
22686: PPUSH
22687: LD_INT 7
22689: PPUSH
22690: CALL_OW 12
22694: PUSH
22695: LD_INT 7
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: PUSH
22703: LD_OWVAR 67
22707: ARRAY
22708: PPUSH
22709: LD_EXP 25
22713: PPUSH
22714: LD_EXP 26
22718: PPUSH
22719: CALL_OW 12
22723: PPUSH
22724: LD_INT 3
22726: PPUSH
22727: LD_INT 1
22729: PPUSH
22730: LD_INT 3
22732: PPUSH
22733: LD_INT 43
22735: PUSH
22736: LD_INT 44
22738: PUSH
22739: LD_INT 46
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: PPUSH
22747: EMPTY
22748: PPUSH
22749: EMPTY
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: CALL 13861 0 11
22758: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22759: LD_EXP 33
22763: PUSH
22764: LD_INT 1
22766: EQUAL
22767: PUSH
22768: LD_EXP 39
22772: PUSH
22773: LD_INT 0
22775: EQUAL
22776: AND
22777: IFFALSE 22853
22779: GO 22781
22781: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22782: LD_INT 16
22784: PPUSH
22785: LD_INT 6
22787: PPUSH
22788: LD_INT 5
22790: PUSH
22791: LD_INT 6
22793: PUSH
22794: LD_INT 7
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: LIST
22801: PUSH
22802: LD_OWVAR 67
22806: ARRAY
22807: PPUSH
22808: LD_EXP 25
22812: PPUSH
22813: LD_EXP 26
22817: PPUSH
22818: CALL_OW 12
22822: PPUSH
22823: LD_INT 3
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: LD_INT 3
22831: PPUSH
22832: LD_INT 44
22834: PUSH
22835: LD_INT 46
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PPUSH
22842: EMPTY
22843: PPUSH
22844: EMPTY
22845: PPUSH
22846: LD_INT 1
22848: PPUSH
22849: CALL 13861 0 11
22853: END
// every 1 1$00 trigger secondAttack = 1 do
22854: LD_EXP 34
22858: PUSH
22859: LD_INT 1
22861: EQUAL
22862: IFFALSE 22944
22864: GO 22866
22866: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22867: LD_INT 6
22869: PPUSH
22870: LD_INT 3
22872: PPUSH
22873: LD_INT 3
22875: PUSH
22876: LD_INT 4
22878: PUSH
22879: LD_INT 5
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: LIST
22886: PUSH
22887: LD_OWVAR 67
22891: ARRAY
22892: PPUSH
22893: LD_INT 0
22895: PPUSH
22896: LD_INT 0
22898: PPUSH
22899: LD_INT 0
22901: PPUSH
22902: LD_INT 0
22904: PPUSH
22905: LD_EXP 25
22909: PPUSH
22910: LD_EXP 26
22914: PPUSH
22915: CALL_OW 12
22919: PPUSH
22920: LD_INT 16
22922: PPUSH
22923: LD_INT 7
22925: PPUSH
22926: LD_INT 1
22928: PPUSH
22929: LD_INT 1
22931: PPUSH
22932: LD_INT 3
22934: PPUSH
22935: CALL_OW 12
22939: PPUSH
22940: CALL 11568 0 12
22944: END
// every 1 1$00 trigger secondAttack = 1 do
22945: LD_EXP 34
22949: PUSH
22950: LD_INT 1
22952: EQUAL
22953: IFFALSE 23057
22955: GO 22957
22957: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22958: LD_INT 16
22960: PPUSH
22961: LD_INT 6
22963: PPUSH
22964: LD_INT 5
22966: PPUSH
22967: LD_INT 8
22969: PPUSH
22970: CALL_OW 12
22974: PUSH
22975: LD_INT 6
22977: PPUSH
22978: LD_INT 9
22980: PPUSH
22981: CALL_OW 12
22985: PUSH
22986: LD_INT 7
22988: PPUSH
22989: LD_INT 9
22991: PPUSH
22992: CALL_OW 12
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: PUSH
23002: LD_OWVAR 67
23006: ARRAY
23007: PPUSH
23008: LD_EXP 25
23012: PPUSH
23013: LD_EXP 26
23017: PPUSH
23018: CALL_OW 12
23022: PPUSH
23023: LD_INT 3
23025: PPUSH
23026: LD_INT 1
23028: PPUSH
23029: LD_INT 3
23031: PPUSH
23032: LD_INT 43
23034: PUSH
23035: LD_INT 44
23037: PUSH
23038: LD_INT 46
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: PPUSH
23046: EMPTY
23047: PPUSH
23048: EMPTY
23049: PPUSH
23050: LD_INT 1
23052: PPUSH
23053: CALL 13861 0 11
23057: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23058: LD_EXP 18
23062: PUSH
23063: LD_INT 0
23065: EQUAL
23066: IFFALSE 23148
23068: GO 23070
23070: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23071: LD_INT 6
23073: PPUSH
23074: LD_INT 3
23076: PPUSH
23077: LD_INT 3
23079: PUSH
23080: LD_INT 4
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: PUSH
23091: LD_OWVAR 67
23095: ARRAY
23096: PPUSH
23097: LD_INT 0
23099: PPUSH
23100: LD_INT 0
23102: PPUSH
23103: LD_INT 0
23105: PPUSH
23106: LD_INT 0
23108: PPUSH
23109: LD_EXP 25
23113: PPUSH
23114: LD_EXP 26
23118: PPUSH
23119: CALL_OW 12
23123: PPUSH
23124: LD_INT 16
23126: PPUSH
23127: LD_INT 7
23129: PPUSH
23130: LD_INT 1
23132: PPUSH
23133: LD_INT 1
23135: PPUSH
23136: LD_INT 3
23138: PPUSH
23139: CALL_OW 12
23143: PPUSH
23144: CALL 11568 0 12
23148: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23149: LD_EXP 18
23153: PUSH
23154: LD_INT 0
23156: EQUAL
23157: IFFALSE 23257
23159: GO 23161
23161: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23162: LD_INT 16
23164: PPUSH
23165: LD_INT 6
23167: PPUSH
23168: LD_INT 5
23170: PPUSH
23171: LD_INT 8
23173: PPUSH
23174: CALL_OW 12
23178: PUSH
23179: LD_INT 6
23181: PPUSH
23182: LD_INT 9
23184: PPUSH
23185: CALL_OW 12
23189: PUSH
23190: LD_INT 7
23192: PPUSH
23193: LD_INT 9
23195: PPUSH
23196: CALL_OW 12
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: PUSH
23206: LD_OWVAR 67
23210: ARRAY
23211: PPUSH
23212: LD_EXP 25
23216: PPUSH
23217: LD_EXP 26
23221: PPUSH
23222: CALL_OW 12
23226: PPUSH
23227: LD_INT 3
23229: PPUSH
23230: LD_INT 1
23232: PPUSH
23233: LD_INT 3
23235: PPUSH
23236: LD_INT 44
23238: PUSH
23239: LD_INT 46
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PPUSH
23246: EMPTY
23247: PPUSH
23248: EMPTY
23249: PPUSH
23250: LD_INT 1
23252: PPUSH
23253: CALL 13861 0 11
23257: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23258: LD_EXP 18
23262: PUSH
23263: LD_INT 0
23265: EQUAL
23266: IFFALSE 23348
23268: GO 23270
23270: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23271: LD_INT 6
23273: PPUSH
23274: LD_INT 3
23276: PPUSH
23277: LD_INT 3
23279: PUSH
23280: LD_INT 4
23282: PUSH
23283: LD_INT 5
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: PUSH
23291: LD_OWVAR 67
23295: ARRAY
23296: PPUSH
23297: LD_INT 0
23299: PPUSH
23300: LD_INT 0
23302: PPUSH
23303: LD_INT 0
23305: PPUSH
23306: LD_INT 0
23308: PPUSH
23309: LD_EXP 25
23313: PPUSH
23314: LD_EXP 26
23318: PPUSH
23319: CALL_OW 12
23323: PPUSH
23324: LD_INT 16
23326: PPUSH
23327: LD_INT 7
23329: PPUSH
23330: LD_INT 1
23332: PPUSH
23333: LD_INT 1
23335: PPUSH
23336: LD_INT 3
23338: PPUSH
23339: CALL_OW 12
23343: PPUSH
23344: CALL 11568 0 12
23348: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23349: LD_EXP 18
23353: PUSH
23354: LD_INT 0
23356: EQUAL
23357: IFFALSE 23457
23359: GO 23361
23361: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23362: LD_INT 16
23364: PPUSH
23365: LD_INT 6
23367: PPUSH
23368: LD_INT 5
23370: PPUSH
23371: LD_INT 8
23373: PPUSH
23374: CALL_OW 12
23378: PUSH
23379: LD_INT 6
23381: PPUSH
23382: LD_INT 9
23384: PPUSH
23385: CALL_OW 12
23389: PUSH
23390: LD_INT 7
23392: PPUSH
23393: LD_INT 9
23395: PPUSH
23396: CALL_OW 12
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: LD_OWVAR 67
23410: ARRAY
23411: PPUSH
23412: LD_EXP 25
23416: PPUSH
23417: LD_EXP 26
23421: PPUSH
23422: CALL_OW 12
23426: PPUSH
23427: LD_INT 3
23429: PPUSH
23430: LD_INT 1
23432: PPUSH
23433: LD_INT 3
23435: PPUSH
23436: LD_INT 44
23438: PUSH
23439: LD_INT 46
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PPUSH
23446: EMPTY
23447: PPUSH
23448: EMPTY
23449: PPUSH
23450: LD_INT 1
23452: PPUSH
23453: CALL 13861 0 11
23457: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23458: LD_EXP 18
23462: PUSH
23463: LD_INT 0
23465: EQUAL
23466: IFFALSE 23548
23468: GO 23470
23470: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23471: LD_INT 6
23473: PPUSH
23474: LD_INT 3
23476: PPUSH
23477: LD_INT 3
23479: PUSH
23480: LD_INT 4
23482: PUSH
23483: LD_INT 5
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: PUSH
23491: LD_OWVAR 67
23495: ARRAY
23496: PPUSH
23497: LD_INT 0
23499: PPUSH
23500: LD_INT 0
23502: PPUSH
23503: LD_INT 0
23505: PPUSH
23506: LD_INT 0
23508: PPUSH
23509: LD_EXP 25
23513: PPUSH
23514: LD_EXP 26
23518: PPUSH
23519: CALL_OW 12
23523: PPUSH
23524: LD_INT 16
23526: PPUSH
23527: LD_INT 7
23529: PPUSH
23530: LD_INT 1
23532: PPUSH
23533: LD_INT 1
23535: PPUSH
23536: LD_INT 3
23538: PPUSH
23539: CALL_OW 12
23543: PPUSH
23544: CALL 11568 0 12
23548: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23549: LD_EXP 18
23553: PUSH
23554: LD_INT 0
23556: EQUAL
23557: IFFALSE 23657
23559: GO 23561
23561: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23562: LD_INT 16
23564: PPUSH
23565: LD_INT 6
23567: PPUSH
23568: LD_INT 5
23570: PPUSH
23571: LD_INT 8
23573: PPUSH
23574: CALL_OW 12
23578: PUSH
23579: LD_INT 6
23581: PPUSH
23582: LD_INT 9
23584: PPUSH
23585: CALL_OW 12
23589: PUSH
23590: LD_INT 7
23592: PPUSH
23593: LD_INT 9
23595: PPUSH
23596: CALL_OW 12
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: PUSH
23606: LD_OWVAR 67
23610: ARRAY
23611: PPUSH
23612: LD_EXP 25
23616: PPUSH
23617: LD_EXP 26
23621: PPUSH
23622: CALL_OW 12
23626: PPUSH
23627: LD_INT 3
23629: PPUSH
23630: LD_INT 1
23632: PPUSH
23633: LD_INT 3
23635: PPUSH
23636: LD_INT 44
23638: PUSH
23639: LD_INT 46
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PPUSH
23646: EMPTY
23647: PPUSH
23648: EMPTY
23649: PPUSH
23650: LD_INT 1
23652: PPUSH
23653: CALL 13861 0 11
23657: END
// every 0 0$1 trigger timerStatus = 1 do
23658: LD_EXP 35
23662: PUSH
23663: LD_INT 1
23665: EQUAL
23666: IFFALSE 23703
23668: GO 23670
23670: DISABLE
// begin enable ;
23671: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23672: LD_ADDR_OWVAR 47
23676: PUSH
23677: LD_STRING #Am08-1
23679: PUSH
23680: LD_EXP 19
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23689: LD_ADDR_EXP 19
23693: PUSH
23694: LD_EXP 19
23698: PUSH
23699: LD_INT 35
23701: MINUS
23702: ST_TO_ADDR
// end ; end_of_file
23703: END
// every 1 1$0 do
23704: GO 23706
23706: DISABLE
// begin if supply <= 13 and supply > 7 then
23707: LD_EXP 40
23711: PUSH
23712: LD_INT 13
23714: LESSEQUAL
23715: PUSH
23716: LD_EXP 40
23720: PUSH
23721: LD_INT 7
23723: GREATER
23724: AND
23725: IFFALSE 23748
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23727: LD_INT 3
23729: PPUSH
23730: LD_INT 5
23732: PPUSH
23733: CALL_OW 12
23737: PPUSH
23738: LD_INT 5
23740: PPUSH
23741: LD_INT 1
23743: PPUSH
23744: CALL_OW 55
// if supply <= 7 and supply > 4 then
23748: LD_EXP 40
23752: PUSH
23753: LD_INT 7
23755: LESSEQUAL
23756: PUSH
23757: LD_EXP 40
23761: PUSH
23762: LD_INT 4
23764: GREATER
23765: AND
23766: IFFALSE 23789
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23768: LD_INT 3
23770: PPUSH
23771: LD_INT 5
23773: PPUSH
23774: CALL_OW 12
23778: PPUSH
23779: LD_INT 20
23781: PPUSH
23782: LD_INT 1
23784: PPUSH
23785: CALL_OW 55
// if supply <= 4 and supply > 0 then
23789: LD_EXP 40
23793: PUSH
23794: LD_INT 4
23796: LESSEQUAL
23797: PUSH
23798: LD_EXP 40
23802: PUSH
23803: LD_INT 0
23805: GREATER
23806: AND
23807: IFFALSE 23830
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23809: LD_INT 3
23811: PPUSH
23812: LD_INT 5
23814: PPUSH
23815: CALL_OW 12
23819: PPUSH
23820: LD_INT 21
23822: PPUSH
23823: LD_INT 1
23825: PPUSH
23826: CALL_OW 55
// if supply > 0 then
23830: LD_EXP 40
23834: PUSH
23835: LD_INT 0
23837: GREATER
23838: IFFALSE 23855
// begin supply = supply - 1 ;
23840: LD_ADDR_EXP 40
23844: PUSH
23845: LD_EXP 40
23849: PUSH
23850: LD_INT 1
23852: MINUS
23853: ST_TO_ADDR
// enable ;
23854: ENABLE
// end ; end ; end_of_file
23855: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23856: LD_EXP 39
23860: PUSH
23861: LD_INT 1
23863: EQUAL
23864: PUSH
23865: LD_EXP 1
23869: PPUSH
23870: CALL_OW 301
23874: AND
23875: IFFALSE 23887
23877: GO 23879
23879: DISABLE
// YouLost ( JMM ) ;
23880: LD_STRING JMM
23882: PPUSH
23883: CALL_OW 104
23887: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23888: LD_EXP 18
23892: PUSH
23893: LD_INT 1
23895: EQUAL
23896: PUSH
23897: LD_EXP 16
23901: PPUSH
23902: CALL_OW 301
23906: AND
23907: IFFALSE 23939
23909: GO 23911
23911: DISABLE
// begin DialogueOn ;
23912: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23916: LD_EXP 23
23920: PPUSH
23921: LD_STRING D8a-Pow-1
23923: PPUSH
23924: CALL_OW 94
// DialogueOff ;
23928: CALL_OW 7
// YouLost ( Dismissed ) ;
23932: LD_STRING Dismissed
23934: PPUSH
23935: CALL_OW 104
// end ;
23939: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23940: LD_EXP 37
23944: PPUSH
23945: CALL_OW 301
23949: IFFALSE 23961
23951: GO 23953
23953: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23954: LD_STRING Destroyed
23956: PPUSH
23957: CALL_OW 104
23961: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
23962: LD_EXP 24
23966: PPUSH
23967: CALL_OW 301
23971: PUSH
23972: LD_INT 22
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 21
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PPUSH
23996: CALL_OW 69
24000: PUSH
24001: LD_INT 14
24003: PUSH
24004: LD_INT 13
24006: PUSH
24007: LD_INT 12
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: LIST
24014: PUSH
24015: LD_OWVAR 67
24019: ARRAY
24020: LESS
24021: AND
24022: IFFALSE 24470
24024: GO 24026
24026: DISABLE
24027: LD_INT 0
24029: PPUSH
24030: PPUSH
// begin russianAI = 0 ;
24031: LD_ADDR_EXP 27
24035: PUSH
24036: LD_INT 0
24038: ST_TO_ADDR
// escapeAvalaible = 1 ;
24039: LD_ADDR_EXP 36
24043: PUSH
24044: LD_INT 1
24046: ST_TO_ADDR
// InGameOn ;
24047: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
24051: LD_INT 3
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: LD_INT 1
24059: PPUSH
24060: LD_INT 0
24062: PPUSH
24063: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
24067: LD_INT 6
24069: PPUSH
24070: LD_INT 1
24072: PPUSH
24073: LD_INT 1
24075: PPUSH
24076: LD_INT 0
24078: PPUSH
24079: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
24083: LD_INT 3
24085: PPUSH
24086: LD_INT 1
24088: PPUSH
24089: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
24093: LD_INT 97
24095: PPUSH
24096: LD_INT 91
24098: PPUSH
24099: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
24103: LD_INT 22
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 21
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: CALL_OW 69
24131: PPUSH
24132: CALL_OW 121
// wait ( 0 0$01 ) ;
24136: LD_INT 35
24138: PPUSH
24139: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24143: LD_INT 22
24145: PUSH
24146: LD_INT 3
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 21
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PPUSH
24167: CALL_OW 69
24171: PPUSH
24172: LD_INT 124
24174: PPUSH
24175: LD_INT 98
24177: PPUSH
24178: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
24182: LD_INT 22
24184: PUSH
24185: LD_INT 6
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 21
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL_OW 69
24210: PPUSH
24211: CALL_OW 121
// wait ( 0 0$01 ) ;
24215: LD_INT 35
24217: PPUSH
24218: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24222: LD_INT 22
24224: PUSH
24225: LD_INT 6
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 21
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PPUSH
24246: CALL_OW 69
24250: PPUSH
24251: LD_INT 124
24253: PPUSH
24254: LD_INT 98
24256: PPUSH
24257: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
24261: LD_INT 22
24263: PUSH
24264: LD_INT 1
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 21
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: LD_INT 54
24286: PUSH
24287: EMPTY
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: PPUSH
24299: CALL_OW 69
24303: PPUSH
24304: LD_INT 124
24306: PPUSH
24307: LD_INT 98
24309: PPUSH
24310: CALL_OW 114
// wait ( 0 0$4 ) ;
24314: LD_INT 140
24316: PPUSH
24317: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24321: LD_INT 124
24323: PPUSH
24324: LD_INT 98
24326: PPUSH
24327: CALL_OW 84
// if SikorskyStatus = 1 then
24331: LD_EXP 21
24335: PUSH
24336: LD_INT 1
24338: EQUAL
24339: IFFALSE 24353
// begin Say ( Sikorski , D9-Sik-1 ) ;
24341: LD_EXP 16
24345: PPUSH
24346: LD_STRING D9-Sik-1
24348: PPUSH
24349: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24353: LD_EXP 21
24357: PUSH
24358: LD_INT 2
24360: EQUAL
24361: IFFALSE 24382
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24363: LD_EXP 23
24367: PPUSH
24368: LD_STRING D8b-Pow-1
24370: PPUSH
24371: CALL_OW 94
// YouLost ( Dismissed ) ;
24375: LD_STRING Dismissed
24377: PPUSH
24378: CALL_OW 104
// end ; p := 0 0$0 ;
24382: LD_ADDR_VAR 0 2
24386: PUSH
24387: LD_INT 0
24389: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24390: LD_INT 35
24392: PPUSH
24393: CALL_OW 67
// p := p + 0 0$1 ;
24397: LD_ADDR_VAR 0 2
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: LD_INT 35
24409: PLUS
24410: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
24411: LD_INT 23
24413: PUSH
24414: LD_INT 3
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 24
24433: PUSH
24434: LD_INT 250
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: PPUSH
24446: CALL_OW 69
24450: PUSH
24451: LD_INT 0
24453: EQUAL
24454: PUSH
24455: LD_VAR 0 2
24459: PUSH
24460: LD_INT 245
24462: GREATEREQUAL
24463: OR
24464: IFFALSE 24390
// FinishMission ;
24466: CALL 24473 0 0
// end ;
24470: PPOPN 2
24472: END
// export function FinishMission ; var tmp ; begin
24473: LD_INT 0
24475: PPUSH
24476: PPUSH
// AddMedal ( med1 , 1 ) ;
24477: LD_STRING med1
24479: PPUSH
24480: LD_INT 1
24482: PPUSH
24483: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24487: LD_STRING med2
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24497: LD_STRING perfect
24499: PPUSH
24500: LD_INT 1
24502: PPUSH
24503: CALL_OW 101
// GiveMedals ( Main ) ;
24507: LD_STRING Main
24509: PPUSH
24510: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24514: LD_INT 22
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 23
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 21
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: LD_INT 25
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 25
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 25
24569: PUSH
24570: LD_INT 3
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 25
24579: PUSH
24580: LD_INT 4
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: PPUSH
24600: CALL_OW 69
24604: PPUSH
24605: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24609: LD_EXP 1
24613: PPUSH
24614: LD_EXP 42
24618: PUSH
24619: LD_STRING JMM
24621: STR
24622: PPUSH
24623: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24627: LD_EXP 2
24631: PPUSH
24632: LD_EXP 42
24636: PUSH
24637: LD_STRING Brown
24639: STR
24640: PPUSH
24641: CALL 7909 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24645: LD_EXP 3
24649: PPUSH
24650: LD_EXP 42
24654: PUSH
24655: LD_STRING Donaldson
24657: STR
24658: PPUSH
24659: CALL 7909 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24663: LD_EXP 4
24667: PPUSH
24668: LD_EXP 42
24672: PUSH
24673: LD_STRING Bobby
24675: STR
24676: PPUSH
24677: CALL 7909 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24681: LD_EXP 5
24685: PPUSH
24686: LD_EXP 42
24690: PUSH
24691: LD_STRING Cyrus
24693: STR
24694: PPUSH
24695: CALL 7909 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24699: LD_EXP 6
24703: PPUSH
24704: LD_EXP 42
24708: PUSH
24709: LD_STRING Lisa
24711: STR
24712: PPUSH
24713: CALL 7909 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24717: LD_EXP 7
24721: PPUSH
24722: LD_EXP 42
24726: PUSH
24727: LD_STRING Frank
24729: STR
24730: PPUSH
24731: CALL 7909 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24735: LD_EXP 8
24739: PPUSH
24740: LD_EXP 42
24744: PUSH
24745: LD_STRING Gladstone
24747: STR
24748: PPUSH
24749: CALL 7909 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24753: LD_EXP 9
24757: PPUSH
24758: LD_EXP 42
24762: PUSH
24763: LD_STRING Kikuchi
24765: STR
24766: PPUSH
24767: CALL 7909 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24771: LD_EXP 14
24775: PPUSH
24776: LD_EXP 42
24780: PUSH
24781: LD_STRING Denis
24783: STR
24784: PPUSH
24785: CALL 7909 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24789: LD_EXP 15
24793: PPUSH
24794: LD_EXP 42
24798: PUSH
24799: LD_STRING Joan
24801: STR
24802: PPUSH
24803: CALL 7909 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24807: LD_EXP 10
24811: PPUSH
24812: LD_EXP 42
24816: PUSH
24817: LD_STRING Khatam
24819: STR
24820: PPUSH
24821: CALL 7909 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24825: LD_EXP 13
24829: PPUSH
24830: LD_EXP 42
24834: PUSH
24835: LD_STRING Houten
24837: STR
24838: PPUSH
24839: CALL 7909 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24843: LD_INT 50
24845: PUSH
24846: EMPTY
24847: LIST
24848: PUSH
24849: LD_INT 22
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 21
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: LD_INT 25
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 25
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 25
24894: PUSH
24895: LD_INT 3
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 25
24904: PUSH
24905: LD_INT 4
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: PPUSH
24925: CALL_OW 69
24929: PUSH
24930: LD_EXP 1
24934: PUSH
24935: LD_EXP 2
24939: PUSH
24940: LD_EXP 3
24944: PUSH
24945: LD_EXP 4
24949: PUSH
24950: LD_EXP 5
24954: PUSH
24955: LD_EXP 6
24959: PUSH
24960: LD_EXP 7
24964: PUSH
24965: LD_EXP 8
24969: PUSH
24970: LD_EXP 9
24974: PUSH
24975: LD_EXP 14
24979: PUSH
24980: LD_EXP 15
24984: PUSH
24985: LD_EXP 13
24989: PUSH
24990: LD_EXP 10
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: DIFF
25010: PPUSH
25011: LD_STRING 08_other_survivors
25013: PPUSH
25014: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
25018: LD_INT 23
25020: PPUSH
25021: CALL 25034 0 1
// YouWin ;
25025: CALL_OW 103
// end ;
25029: LD_VAR 0 1
25033: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
25034: LD_INT 0
25036: PPUSH
25037: PPUSH
25038: PPUSH
25039: PPUSH
// gammaBase = [ ] ;
25040: LD_ADDR_VAR 0 4
25044: PUSH
25045: EMPTY
25046: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
25047: LD_ADDR_VAR 0 5
25051: PUSH
25052: LD_VAR 0 1
25056: PPUSH
25057: LD_INT 22
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 21
25069: PUSH
25070: LD_INT 3
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 50
25079: PUSH
25080: EMPTY
25081: LIST
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: PPUSH
25088: CALL_OW 70
25092: ST_TO_ADDR
// for i in buildings do
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_VAR 0 5
25102: PUSH
25103: FOR_IN
25104: IFFALSE 25541
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
25106: LD_VAR 0 3
25110: PPUSH
25111: CALL_OW 266
25115: PUSH
25116: LD_INT 6
25118: PUSH
25119: LD_INT 7
25121: PUSH
25122: LD_INT 8
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: IN
25130: IFFALSE 25244
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
25132: LD_ADDR_VAR 0 4
25136: PUSH
25137: LD_VAR 0 4
25141: PUSH
25142: LD_VAR 0 3
25146: PPUSH
25147: CALL_OW 266
25151: PUSH
25152: LD_VAR 0 3
25156: PPUSH
25157: CALL_OW 250
25161: PUSH
25162: LD_VAR 0 3
25166: PPUSH
25167: CALL_OW 251
25171: PUSH
25172: LD_VAR 0 3
25176: PPUSH
25177: CALL_OW 254
25181: PUSH
25182: LD_VAR 0 3
25186: PPUSH
25187: CALL_OW 267
25191: PUSH
25192: LD_VAR 0 3
25196: PPUSH
25197: CALL_OW 248
25201: PUSH
25202: LD_VAR 0 3
25206: PPUSH
25207: LD_INT 1
25209: PPUSH
25210: CALL_OW 268
25214: PUSH
25215: LD_VAR 0 3
25219: PPUSH
25220: LD_INT 2
25222: PPUSH
25223: CALL_OW 268
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: PUSH
25238: EMPTY
25239: LIST
25240: ADD
25241: ST_TO_ADDR
25242: GO 25539
// if GetBType ( i ) = b_bunker then
25244: LD_VAR 0 3
25248: PPUSH
25249: CALL_OW 266
25253: PUSH
25254: LD_INT 32
25256: EQUAL
25257: IFFALSE 25354
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25259: LD_ADDR_VAR 0 4
25263: PUSH
25264: LD_VAR 0 4
25268: PUSH
25269: LD_VAR 0 3
25273: PPUSH
25274: CALL_OW 266
25278: PUSH
25279: LD_VAR 0 3
25283: PPUSH
25284: CALL_OW 250
25288: PUSH
25289: LD_VAR 0 3
25293: PPUSH
25294: CALL_OW 251
25298: PUSH
25299: LD_VAR 0 3
25303: PPUSH
25304: CALL_OW 254
25308: PUSH
25309: LD_VAR 0 3
25313: PPUSH
25314: CALL_OW 267
25318: PUSH
25319: LD_VAR 0 3
25323: PPUSH
25324: CALL_OW 248
25328: PUSH
25329: LD_VAR 0 3
25333: PPUSH
25334: CALL_OW 269
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: ADD
25351: ST_TO_ADDR
25352: GO 25539
// if GetBType ( i ) = b_factory then
25354: LD_VAR 0 3
25358: PPUSH
25359: CALL_OW 266
25363: PUSH
25364: LD_INT 3
25366: EQUAL
25367: IFFALSE 25457
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25369: LD_ADDR_VAR 0 4
25373: PUSH
25374: LD_VAR 0 4
25378: PPUSH
25379: LD_INT 1
25381: PPUSH
25382: LD_VAR 0 3
25386: PPUSH
25387: CALL_OW 266
25391: PUSH
25392: LD_VAR 0 3
25396: PPUSH
25397: CALL_OW 250
25401: PUSH
25402: LD_VAR 0 3
25406: PPUSH
25407: CALL_OW 251
25411: PUSH
25412: LD_VAR 0 3
25416: PPUSH
25417: CALL_OW 254
25421: PUSH
25422: LD_VAR 0 3
25426: PPUSH
25427: CALL_OW 267
25431: PUSH
25432: LD_VAR 0 3
25436: PPUSH
25437: CALL_OW 248
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: PPUSH
25450: CALL_OW 2
25454: ST_TO_ADDR
25455: GO 25539
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25457: LD_ADDR_VAR 0 4
25461: PUSH
25462: LD_VAR 0 4
25466: PUSH
25467: LD_VAR 0 3
25471: PPUSH
25472: CALL_OW 266
25476: PUSH
25477: LD_VAR 0 3
25481: PPUSH
25482: CALL_OW 250
25486: PUSH
25487: LD_VAR 0 3
25491: PPUSH
25492: CALL_OW 251
25496: PUSH
25497: LD_VAR 0 3
25501: PPUSH
25502: CALL_OW 254
25506: PUSH
25507: LD_VAR 0 3
25511: PPUSH
25512: CALL_OW 267
25516: PUSH
25517: LD_VAR 0 3
25521: PPUSH
25522: CALL_OW 248
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: ADD
25538: ST_TO_ADDR
// end ;
25539: GO 25103
25541: POP
25542: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25543: LD_VAR 0 4
25547: PPUSH
25548: LD_STRING 08_GammaBase
25550: PPUSH
25551: CALL_OW 39
// end ;
25555: LD_VAR 0 2
25559: RET
