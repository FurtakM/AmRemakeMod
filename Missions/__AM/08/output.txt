// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 43
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 44
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 45
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7435 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6206 0 0
// PrepareRussians ;
 229: CALL 6524 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8845 0 6
// PrepareCutsceneAttack ;
 312: CALL 6258 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 45
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6942 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6942 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6942 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6942 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6942 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6942 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6942 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6942 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6942 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6942 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6942 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6942 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6942 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6942 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6942 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6942 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 52
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// bc_kind1 := - 1 ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 1
2639: NEG
2640: ST_TO_ADDR
// bc_kind2 := - 1 ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 1
2648: NEG
2649: ST_TO_ADDR
// for i in blist do
2650: LD_ADDR_VAR 0 3
2654: PUSH
2655: LD_VAR 0 2
2659: PUSH
2660: FOR_IN
2661: IFFALSE 2933
// begin bc_type := i [ 1 ] ;
2663: LD_ADDR_OWVAR 42
2667: PUSH
2668: LD_VAR 0 3
2672: PUSH
2673: LD_INT 1
2675: ARRAY
2676: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2677: LD_ADDR_OWVAR 43
2681: PUSH
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 5
2689: ARRAY
2690: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2691: LD_OWVAR 42
2695: PUSH
2696: LD_INT 6
2698: PUSH
2699: LD_INT 7
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: IN
2706: IFFALSE 2768
// begin bc_type := b_lab_half ;
2708: LD_ADDR_OWVAR 42
2712: PUSH
2713: LD_INT 7
2715: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2716: LD_STRING 06_remoteVehs_1
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 30
2726: IFFALSE 2768
// begin if i [ 7 ] > 9 then
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 7
2735: ARRAY
2736: PUSH
2737: LD_INT 9
2739: GREATER
2740: IFFALSE 2760
// begin bc_type := b_lab_full ;
2742: LD_ADDR_OWVAR 42
2746: PUSH
2747: LD_INT 8
2749: ST_TO_ADDR
// bc_kind2 := 15 ;
2750: LD_ADDR_OWVAR 45
2754: PUSH
2755: LD_INT 15
2757: ST_TO_ADDR
// end else
2758: GO 2768
// bc_kind1 := 15 ;
2760: LD_ADDR_OWVAR 44
2764: PUSH
2765: LD_INT 15
2767: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2768: LD_OWVAR 42
2772: PUSH
2773: LD_INT 2
2775: EQUAL
2776: IFFALSE 2786
// bc_type := b_factory ;
2778: LD_ADDR_OWVAR 42
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// if bc_type = b_depot then
2786: LD_OWVAR 42
2790: PUSH
2791: LD_INT 0
2793: EQUAL
2794: IFFALSE 2843
// begin bc_type := b_warehouse ;
2796: LD_ADDR_OWVAR 42
2800: PUSH
2801: LD_INT 1
2803: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2804: LD_ADDR_EXP 37
2808: PUSH
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 2
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 3
2825: ARRAY
2826: PPUSH
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 4
2834: ARRAY
2835: PPUSH
2836: CALL_OW 47
2840: ST_TO_ADDR
// continue ;
2841: GO 2660
// end ; if bc_type = b_armoury then
2843: LD_OWVAR 42
2847: PUSH
2848: LD_INT 4
2850: EQUAL
2851: IFFALSE 2861
// bc_type = b_barracks ;
2853: LD_ADDR_OWVAR 42
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2861: LD_ADDR_VAR 0 4
2865: PUSH
2866: LD_VAR 0 3
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: PPUSH
2875: LD_VAR 0 3
2879: PUSH
2880: LD_INT 3
2882: ARRAY
2883: PPUSH
2884: LD_VAR 0 3
2888: PUSH
2889: LD_INT 4
2891: ARRAY
2892: PPUSH
2893: CALL_OW 47
2897: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 266
2907: PUSH
2908: LD_INT 32
2910: EQUAL
2911: IFFALSE 2931
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2913: LD_VAR 0 4
2917: PPUSH
2918: LD_VAR 0 3
2922: PUSH
2923: LD_INT 7
2925: ARRAY
2926: PPUSH
2927: CALL_OW 431
// end ;
2931: GO 2660
2933: POP
2934: POP
// if not amDepot then
2935: LD_EXP 37
2939: NOT
2940: IFFALSE 2977
// begin bc_type := b_warehouse ;
2942: LD_ADDR_OWVAR 42
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// bc_level := 6 ;
2950: LD_ADDR_OWVAR 43
2954: PUSH
2955: LD_INT 6
2957: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2958: LD_ADDR_EXP 37
2962: PUSH
2963: LD_INT 52
2965: PPUSH
2966: LD_INT 12
2968: PPUSH
2969: LD_INT 3
2971: PPUSH
2972: CALL_OW 47
2976: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
2977: LD_EXP 37
2981: PPUSH
2982: LD_STRING gamma
2984: PPUSH
2985: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2989: LD_EXP 37
2993: PPUSH
2994: CALL_OW 274
2998: PPUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 500
3004: PUSH
3005: LD_INT 420
3007: PUSH
3008: LD_INT 350
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_OWVAR 67
3020: ARRAY
3021: PPUSH
3022: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3026: LD_EXP 37
3030: PPUSH
3031: CALL_OW 274
3035: PPUSH
3036: LD_INT 2
3038: PPUSH
3039: LD_INT 200
3041: PPUSH
3042: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3046: LD_INT 22
3048: PUSH
3049: LD_INT 1
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: LD_INT 30
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL_OW 69
3074: IFFALSE 3322
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_INT 22
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 30
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PPUSH
3105: CALL_OW 69
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3114: LD_ADDR_VAR 0 6
3118: PUSH
3119: LD_VAR 0 4
3123: PPUSH
3124: CALL_OW 250
3128: PPUSH
3129: LD_VAR 0 4
3133: PPUSH
3134: CALL_OW 251
3138: PPUSH
3139: LD_VAR 0 4
3143: PPUSH
3144: CALL_OW 254
3148: PPUSH
3149: CALL 16757 0 3
3153: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 19
3161: PUSH
3162: LD_INT 17
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3169: LD_STRING 06_remoteVehs_1
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 30
3179: IFFALSE 3202
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3181: LD_ADDR_VAR 0 2
3185: PUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_INT 1
3193: PPUSH
3194: LD_INT 20
3196: PPUSH
3197: CALL_OW 2
3201: ST_TO_ADDR
// for i in tmp do
3202: LD_ADDR_VAR 0 3
3206: PUSH
3207: LD_VAR 0 6
3211: PUSH
3212: FOR_IN
3213: IFFALSE 3320
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3215: LD_VAR 0 3
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 3
3228: PUSH
3229: LD_INT 2
3231: ARRAY
3232: PPUSH
3233: CALL_OW 428
3237: PUSH
3238: LD_INT 0
3240: EQUAL
3241: IFFALSE 3318
// begin bc_type := blist [ 1 ] ;
3243: LD_ADDR_OWVAR 42
3247: PUSH
3248: LD_VAR 0 2
3252: PUSH
3253: LD_INT 1
3255: ARRAY
3256: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3257: LD_VAR 0 3
3261: PUSH
3262: LD_INT 1
3264: ARRAY
3265: PPUSH
3266: LD_VAR 0 3
3270: PUSH
3271: LD_INT 2
3273: ARRAY
3274: PPUSH
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 3
3282: ARRAY
3283: PPUSH
3284: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3288: LD_ADDR_VAR 0 2
3292: PUSH
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 3
3305: ST_TO_ADDR
// if blist = 0 then
3306: LD_VAR 0 2
3310: PUSH
3311: LD_INT 0
3313: EQUAL
3314: IFFALSE 3318
// break ;
3316: GO 3320
// end ;
3318: GO 3212
3320: POP
3321: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3322: LD_STRING 06_remoteVehs_1
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 30
3332: IFFALSE 3791
// begin bc_type = 36 ;
3334: LD_ADDR_OWVAR 42
3338: PUSH
3339: LD_INT 36
3341: ST_TO_ADDR
// bc_level = 4 ;
3342: LD_ADDR_OWVAR 43
3346: PUSH
3347: LD_INT 4
3349: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3350: LD_EXP 37
3354: PPUSH
3355: LD_INT 36
3357: PPUSH
3358: LD_INT 62
3360: PPUSH
3361: LD_INT 12
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: LD_INT 0
3369: PPUSH
3370: CALL 17627 0 6
3374: PUSH
3375: LD_INT 92
3377: PUSH
3378: LD_INT 62
3380: PUSH
3381: LD_INT 12
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: NOT
3398: AND
3399: IFFALSE 3416
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3401: LD_INT 62
3403: PPUSH
3404: LD_INT 12
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: CALL_OW 47
3414: GO 3587
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3416: LD_EXP 37
3420: PPUSH
3421: LD_INT 36
3423: PPUSH
3424: LD_INT 37
3426: PPUSH
3427: LD_INT 18
3429: PPUSH
3430: LD_INT 2
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL 17627 0 6
3440: PUSH
3441: LD_INT 92
3443: PUSH
3444: LD_INT 37
3446: PUSH
3447: LD_INT 18
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: NOT
3464: AND
3465: IFFALSE 3482
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3467: LD_INT 37
3469: PPUSH
3470: LD_INT 18
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: CALL_OW 47
3480: GO 3587
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3482: LD_EXP 37
3486: PPUSH
3487: LD_INT 36
3489: PPUSH
3490: LD_INT 66
3492: PPUSH
3493: LD_INT 14
3495: PPUSH
3496: LD_INT 4
3498: PPUSH
3499: LD_INT 0
3501: PPUSH
3502: CALL 17627 0 6
3506: PUSH
3507: LD_INT 92
3509: PUSH
3510: LD_INT 66
3512: PUSH
3513: LD_INT 14
3515: PUSH
3516: LD_INT 3
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 69
3529: NOT
3530: AND
3531: IFFALSE 3548
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3533: LD_INT 66
3535: PPUSH
3536: LD_INT 14
3538: PPUSH
3539: LD_INT 4
3541: PPUSH
3542: CALL_OW 47
3546: GO 3587
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3548: LD_EXP 37
3552: PPUSH
3553: LD_INT 36
3555: PPUSH
3556: LD_INT 74
3558: PPUSH
3559: LD_INT 26
3561: PPUSH
3562: LD_INT 4
3564: PPUSH
3565: LD_INT 0
3567: PPUSH
3568: CALL 17627 0 6
3572: IFFALSE 3587
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3574: LD_INT 74
3576: PPUSH
3577: LD_INT 26
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3587: LD_INT 22
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 36
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PPUSH
3611: CALL_OW 69
3615: NOT
3616: IFFALSE 3620
// exit ;
3618: GO 3791
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: DOUBLE
3626: LD_INT 1
3628: DEC
3629: ST_TO_ADDR
3630: LD_INT 3
3632: PUSH
3633: LD_INT 2
3635: PUSH
3636: LD_INT 2
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_OWVAR 67
3648: ARRAY
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3789
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3653: LD_ADDR_OWVAR 37
3657: PUSH
3658: LD_INT 3
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 1
3673: PPUSH
3674: LD_INT 2
3676: PPUSH
3677: CALL_OW 12
3681: ARRAY
3682: PUSH
3683: LD_INT 2
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_OWVAR 67
3695: ARRAY
3696: ST_TO_ADDR
// vc_engine = 1 ;
3697: LD_ADDR_OWVAR 39
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// vc_control = 2 ;
3705: LD_ADDR_OWVAR 38
3709: PUSH
3710: LD_INT 2
3712: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3713: LD_ADDR_OWVAR 40
3717: PUSH
3718: LD_INT 3
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: LD_INT 5
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL_OW 12
3742: ARRAY
3743: ST_TO_ADDR
// veh = CreateVehicle ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3754: LD_VAR 0 5
3758: PPUSH
3759: LD_INT 4
3761: PPUSH
3762: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_INT 56
3773: PPUSH
3774: LD_INT 17
3776: PPUSH
3777: LD_INT 9
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 50
// end ;
3787: GO 3650
3789: POP
3790: POP
// end ; end ;
3791: LD_VAR 0 1
3795: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3796: LD_INT 0
3798: PPUSH
3799: PPUSH
3800: PPUSH
3801: PPUSH
// uc_side = 1 ;
3802: LD_ADDR_OWVAR 20
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// uc_nation = 1 ;
3810: LD_ADDR_OWVAR 21
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3818: LD_ADDR_EXP 14
3822: PUSH
3823: LD_STRING 06c_Denis
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL 6942 0 2
3833: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3834: LD_EXP 14
3838: PPUSH
3839: LD_INT 4
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3849: LD_ADDR_EXP 15
3853: PUSH
3854: LD_STRING 06c_Joan
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL 6942 0 2
3864: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3865: LD_EXP 15
3869: PPUSH
3870: LD_INT 4
3872: PPUSH
3873: LD_INT 0
3875: PPUSH
3876: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3880: LD_STRING GladstoneIn07
3882: PPUSH
3883: LD_INT 0
3885: PPUSH
3886: CALL_OW 30
3890: NOT
3891: IFFALSE 3959
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3893: LD_ADDR_EXP 8
3897: PUSH
3898: LD_STRING 06c_Gladstone
3900: PPUSH
3901: LD_INT 1
3903: PPUSH
3904: CALL 6942 0 2
3908: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3909: LD_EXP 8
3913: NOT
3914: PUSH
3915: LD_STRING GladstoneStayInDelta
3917: PPUSH
3918: LD_INT 0
3920: PPUSH
3921: CALL_OW 30
3925: AND
3926: IFFALSE 3944
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3928: LD_ADDR_EXP 8
3932: PUSH
3933: LD_STRING 05_Gladstone
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL 6942 0 2
3943: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3944: LD_EXP 8
3948: PPUSH
3949: LD_INT 4
3951: PPUSH
3952: LD_INT 0
3954: PPUSH
3955: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3959: LD_STRING LisaStayInDelta
3961: PPUSH
3962: LD_INT 0
3964: PPUSH
3965: CALL_OW 30
3969: IFFALSE 4002
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3971: LD_ADDR_EXP 6
3975: PUSH
3976: LD_STRING 05_Lisa
3978: PPUSH
3979: LD_INT 1
3981: PPUSH
3982: CALL 6942 0 2
3986: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3987: LD_EXP 6
3991: PPUSH
3992: LD_INT 4
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4002: LD_STRING BobbyStayInDelta
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 30
4012: IFFALSE 4045
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4014: LD_ADDR_EXP 4
4018: PUSH
4019: LD_STRING 05_Bobby
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL 6942 0 2
4029: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4030: LD_EXP 4
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 0
4040: PPUSH
4041: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4045: LD_STRING CyrusStayInDelta
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 30
4055: IFFALSE 4088
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4057: LD_ADDR_EXP 5
4061: PUSH
4062: LD_STRING 05_Cyrus
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL 6942 0 2
4072: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4073: LD_EXP 5
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_INT 0
4083: PPUSH
4084: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4088: LD_STRING BrownStayInDelta
4090: PPUSH
4091: LD_INT 0
4093: PPUSH
4094: CALL_OW 30
4098: IFFALSE 4131
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4100: LD_ADDR_EXP 2
4104: PUSH
4105: LD_STRING 05_Brown
4107: PPUSH
4108: LD_INT 1
4110: PPUSH
4111: CALL 6942 0 2
4115: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4116: LD_EXP 2
4120: PPUSH
4121: LD_INT 4
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4131: LD_STRING DonaldsonStayInDelta
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 30
4141: IFFALSE 4174
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4143: LD_ADDR_EXP 3
4147: PUSH
4148: LD_STRING 05_Donaldson
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL 6942 0 2
4158: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4159: LD_EXP 3
4163: PPUSH
4164: LD_INT 4
4166: PPUSH
4167: LD_INT 0
4169: PPUSH
4170: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_STRING OthersStayInDelta
4181: PPUSH
4182: CALL_OW 31
4186: ST_TO_ADDR
// if other > 2 then
4187: LD_VAR 0 4
4191: PUSH
4192: LD_INT 2
4194: GREATER
4195: IFFALSE 4240
// begin for j = 1 to 2 do
4197: LD_ADDR_VAR 0 3
4201: PUSH
4202: DOUBLE
4203: LD_INT 1
4205: DEC
4206: ST_TO_ADDR
4207: LD_INT 2
4209: PUSH
4210: FOR_TO
4211: IFFALSE 4236
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4213: LD_VAR 0 4
4217: PUSH
4218: LD_VAR 0 3
4222: ARRAY
4223: PPUSH
4224: LD_INT 4
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 49
4234: GO 4210
4236: POP
4237: POP
// end else
4238: GO 4283
// begin for j = 1 to other do
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: DOUBLE
4246: LD_INT 1
4248: DEC
4249: ST_TO_ADDR
4250: LD_VAR 0 4
4254: PUSH
4255: FOR_TO
4256: IFFALSE 4281
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4258: LD_VAR 0 4
4262: PUSH
4263: LD_VAR 0 3
4267: ARRAY
4268: PPUSH
4269: LD_INT 4
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
4279: GO 4255
4281: POP
4282: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_STRING 06_other_apemans
4290: PPUSH
4291: CALL_OW 31
4295: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4296: LD_VAR 0 4
4300: PUSH
4301: LD_INT 5
4303: PUSH
4304: LD_INT 4
4306: PUSH
4307: LD_INT 3
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: LIST
4314: PUSH
4315: LD_OWVAR 67
4319: ARRAY
4320: GREATEREQUAL
4321: IFFALSE 4350
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 5
4330: PUSH
4331: LD_INT 4
4333: PUSH
4334: LD_INT 3
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_OWVAR 67
4346: ARRAY
4347: ST_TO_ADDR
4348: GO 4360
// j := other ;
4350: LD_ADDR_VAR 0 3
4354: PUSH
4355: LD_VAR 0 4
4359: ST_TO_ADDR
// for i = 1 to j do
4360: LD_ADDR_VAR 0 2
4364: PUSH
4365: DOUBLE
4366: LD_INT 1
4368: DEC
4369: ST_TO_ADDR
4370: LD_VAR 0 3
4374: PUSH
4375: FOR_TO
4376: IFFALSE 4401
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4378: LD_VAR 0 4
4382: PUSH
4383: LD_VAR 0 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 4
4391: PPUSH
4392: LD_INT 0
4394: PPUSH
4395: CALL_OW 49
4399: GO 4375
4401: POP
4402: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4403: LD_INT 4
4405: PPUSH
4406: LD_INT 22
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 21
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PPUSH
4430: CALL_OW 70
4434: PPUSH
4435: LD_INT 53
4437: PPUSH
4438: LD_INT 19
4440: PPUSH
4441: CALL_OW 111
// firstAttack = 1 ;
4445: LD_ADDR_EXP 33
4449: PUSH
4450: LD_INT 1
4452: ST_TO_ADDR
// end ;
4453: LD_VAR 0 1
4457: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4458: LD_INT 0
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
4466: PPUSH
4467: PPUSH
4468: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4469: LD_ADDR_VAR 0 8
4473: PUSH
4474: LD_STRING 07_vehicles
4476: PPUSH
4477: EMPTY
4478: PPUSH
4479: CALL_OW 30
4483: ST_TO_ADDR
// macmilan_squad := [ ] ;
4484: LD_ADDR_EXP 42
4488: PUSH
4489: EMPTY
4490: ST_TO_ADDR
// tmp_vehs := [ ] ;
4491: LD_ADDR_VAR 0 7
4495: PUSH
4496: EMPTY
4497: ST_TO_ADDR
// uc_side := 1 ;
4498: LD_ADDR_OWVAR 20
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// uc_nation := 1 ;
4506: LD_ADDR_OWVAR 21
4510: PUSH
4511: LD_INT 1
4513: ST_TO_ADDR
// if vehicles then
4514: LD_VAR 0 8
4518: IFFALSE 4677
// begin k := 1 ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: DOUBLE
4534: LD_INT 1
4536: DEC
4537: ST_TO_ADDR
4538: LD_VAR 0 8
4542: PUSH
4543: LD_INT 4
4545: DIV
4546: PUSH
4547: FOR_TO
4548: IFFALSE 4675
// begin vc_chassis = vehicles [ k ] ;
4550: LD_ADDR_OWVAR 37
4554: PUSH
4555: LD_VAR 0 8
4559: PUSH
4560: LD_VAR 0 3
4564: ARRAY
4565: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4566: LD_ADDR_OWVAR 39
4570: PUSH
4571: LD_VAR 0 8
4575: PUSH
4576: LD_VAR 0 3
4580: PUSH
4581: LD_INT 1
4583: PLUS
4584: ARRAY
4585: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4586: LD_ADDR_OWVAR 38
4590: PUSH
4591: LD_VAR 0 8
4595: PUSH
4596: LD_VAR 0 3
4600: PUSH
4601: LD_INT 2
4603: PLUS
4604: ARRAY
4605: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4606: LD_ADDR_OWVAR 40
4610: PUSH
4611: LD_VAR 0 8
4615: PUSH
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 3
4623: PLUS
4624: ARRAY
4625: ST_TO_ADDR
// k := k + 4 ;
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 4
4638: PLUS
4639: ST_TO_ADDR
// veh := CreateVehicle ;
4640: LD_ADDR_VAR 0 9
4644: PUSH
4645: CALL_OW 45
4649: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4650: LD_ADDR_VAR 0 7
4654: PUSH
4655: LD_VAR 0 7
4659: PPUSH
4660: LD_INT 1
4662: PPUSH
4663: LD_VAR 0 9
4667: PPUSH
4668: CALL_OW 2
4672: ST_TO_ADDR
// end ;
4673: GO 4547
4675: POP
4676: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4677: LD_ADDR_EXP 1
4681: PUSH
4682: LD_EXP 44
4686: PUSH
4687: LD_STRING JMM
4689: STR
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: CALL 6942 0 2
4698: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: PUSH
4708: LD_EXP 12
4712: PUSH
4713: LD_INT 3
4715: EQUAL
4716: OR
4717: PUSH
4718: LD_EXP 2
4722: NOT
4723: AND
4724: IFFALSE 4777
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4726: LD_ADDR_EXP 2
4730: PUSH
4731: LD_EXP 44
4735: PUSH
4736: LD_STRING Brown
4738: STR
4739: PPUSH
4740: LD_INT 1
4742: PPUSH
4743: CALL 6942 0 2
4747: ST_TO_ADDR
// if Brown then
4748: LD_EXP 2
4752: IFFALSE 4777
// tmp := Insert ( tmp , 1 , Brown ) ;
4754: LD_ADDR_VAR 0 6
4758: PUSH
4759: LD_VAR 0 6
4763: PPUSH
4764: LD_INT 1
4766: PPUSH
4767: LD_EXP 2
4771: PPUSH
4772: CALL_OW 2
4776: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4777: LD_EXP 12
4781: PUSH
4782: LD_INT 2
4784: EQUAL
4785: PUSH
4786: LD_EXP 12
4790: PUSH
4791: LD_INT 3
4793: EQUAL
4794: OR
4795: PUSH
4796: LD_EXP 3
4800: NOT
4801: AND
4802: IFFALSE 4855
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4804: LD_ADDR_EXP 3
4808: PUSH
4809: LD_EXP 44
4813: PUSH
4814: LD_STRING Donaldson
4816: STR
4817: PPUSH
4818: LD_INT 1
4820: PPUSH
4821: CALL 6942 0 2
4825: ST_TO_ADDR
// if Donaldson then
4826: LD_EXP 3
4830: IFFALSE 4855
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4832: LD_ADDR_VAR 0 6
4836: PUSH
4837: LD_VAR 0 6
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: LD_EXP 3
4849: PPUSH
4850: CALL_OW 2
4854: ST_TO_ADDR
// end ; if not Bobby then
4855: LD_EXP 4
4859: NOT
4860: IFFALSE 4913
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4862: LD_ADDR_EXP 4
4866: PUSH
4867: LD_EXP 44
4871: PUSH
4872: LD_STRING Bobby
4874: STR
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL 6942 0 2
4883: ST_TO_ADDR
// if Bobby then
4884: LD_EXP 4
4888: IFFALSE 4913
// tmp := Insert ( tmp , 1 , Bobby ) ;
4890: LD_ADDR_VAR 0 6
4894: PUSH
4895: LD_VAR 0 6
4899: PPUSH
4900: LD_INT 1
4902: PPUSH
4903: LD_EXP 4
4907: PPUSH
4908: CALL_OW 2
4912: ST_TO_ADDR
// end ; if not Cyrus then
4913: LD_EXP 5
4917: NOT
4918: IFFALSE 4971
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4920: LD_ADDR_EXP 5
4924: PUSH
4925: LD_EXP 44
4929: PUSH
4930: LD_STRING Cyrus
4932: STR
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL 6942 0 2
4941: ST_TO_ADDR
// if Cyrus then
4942: LD_EXP 5
4946: IFFALSE 4971
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4948: LD_ADDR_VAR 0 6
4952: PUSH
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_EXP 5
4965: PPUSH
4966: CALL_OW 2
4970: ST_TO_ADDR
// end ; if not Lisa then
4971: LD_EXP 6
4975: NOT
4976: IFFALSE 5029
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4978: LD_ADDR_EXP 6
4982: PUSH
4983: LD_EXP 44
4987: PUSH
4988: LD_STRING Lisa
4990: STR
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: CALL 6942 0 2
4999: ST_TO_ADDR
// if Lisa then
5000: LD_EXP 6
5004: IFFALSE 5029
// tmp := Insert ( tmp , 1 , Lisa ) ;
5006: LD_ADDR_VAR 0 6
5010: PUSH
5011: LD_VAR 0 6
5015: PPUSH
5016: LD_INT 1
5018: PPUSH
5019: LD_EXP 6
5023: PPUSH
5024: CALL_OW 2
5028: ST_TO_ADDR
// end ; if not Frank then
5029: LD_EXP 7
5033: NOT
5034: IFFALSE 5087
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5036: LD_ADDR_EXP 7
5040: PUSH
5041: LD_EXP 44
5045: PUSH
5046: LD_STRING Frank
5048: STR
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL 6942 0 2
5057: ST_TO_ADDR
// if Frank then
5058: LD_EXP 7
5062: IFFALSE 5087
// tmp := Insert ( tmp , 1 , Frank ) ;
5064: LD_ADDR_VAR 0 6
5068: PUSH
5069: LD_VAR 0 6
5073: PPUSH
5074: LD_INT 1
5076: PPUSH
5077: LD_EXP 7
5081: PPUSH
5082: CALL_OW 2
5086: ST_TO_ADDR
// end ; if not Kikuchi then
5087: LD_EXP 9
5091: NOT
5092: IFFALSE 5145
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5094: LD_ADDR_EXP 9
5098: PUSH
5099: LD_EXP 44
5103: PUSH
5104: LD_STRING Kikuchi
5106: STR
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL 6942 0 2
5115: ST_TO_ADDR
// if Kikuchi then
5116: LD_EXP 9
5120: IFFALSE 5145
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5122: LD_ADDR_VAR 0 6
5126: PUSH
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_EXP 9
5139: PPUSH
5140: CALL_OW 2
5144: ST_TO_ADDR
// end ; if not Gladstone then
5145: LD_EXP 8
5149: NOT
5150: IFFALSE 5203
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5152: LD_ADDR_EXP 8
5156: PUSH
5157: LD_EXP 44
5161: PUSH
5162: LD_STRING Gladstone
5164: STR
5165: PPUSH
5166: LD_INT 1
5168: PPUSH
5169: CALL 6942 0 2
5173: ST_TO_ADDR
// if Gladstone then
5174: LD_EXP 8
5178: IFFALSE 5203
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5180: LD_ADDR_VAR 0 6
5184: PUSH
5185: LD_VAR 0 6
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: LD_EXP 8
5197: PPUSH
5198: CALL_OW 2
5202: ST_TO_ADDR
// end ; if not Khatam then
5203: LD_EXP 10
5207: NOT
5208: IFFALSE 5261
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5210: LD_ADDR_EXP 10
5214: PUSH
5215: LD_EXP 44
5219: PUSH
5220: LD_STRING Khatam
5222: STR
5223: PPUSH
5224: LD_INT 1
5226: PPUSH
5227: CALL 6942 0 2
5231: ST_TO_ADDR
// if Khatam then
5232: LD_EXP 10
5236: IFFALSE 5261
// tmp := Insert ( tmp , 1 , Khatam ) ;
5238: LD_ADDR_VAR 0 6
5242: PUSH
5243: LD_VAR 0 6
5247: PPUSH
5248: LD_INT 1
5250: PPUSH
5251: LD_EXP 10
5255: PPUSH
5256: CALL_OW 2
5260: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_STRING 07c_others
5268: PPUSH
5269: CALL_OW 31
5273: ST_TO_ADDR
// macmilan_squad := others ;
5274: LD_ADDR_EXP 42
5278: PUSH
5279: LD_VAR 0 5
5283: ST_TO_ADDR
// if others then
5284: LD_VAR 0 5
5288: IFFALSE 5376
// for i in others do
5290: LD_ADDR_VAR 0 2
5294: PUSH
5295: LD_VAR 0 5
5299: PUSH
5300: FOR_IN
5301: IFFALSE 5374
// if GetClass ( i ) = 3 then
5303: LD_VAR 0 2
5307: PPUSH
5308: CALL_OW 257
5312: PUSH
5313: LD_INT 3
5315: EQUAL
5316: IFFALSE 5343
// tmp := Insert ( tmp , 1 , i ) else
5318: LD_ADDR_VAR 0 6
5322: PUSH
5323: LD_VAR 0 6
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 2
5340: ST_TO_ADDR
5341: GO 5372
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5343: LD_ADDR_VAR 0 6
5347: PUSH
5348: LD_VAR 0 6
5352: PPUSH
5353: LD_VAR 0 6
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: PPUSH
5362: LD_VAR 0 2
5366: PPUSH
5367: CALL_OW 2
5371: ST_TO_ADDR
5372: GO 5300
5374: POP
5375: POP
// wait ( 0 0$1 ) ;
5376: LD_INT 35
5378: PPUSH
5379: CALL_OW 67
// for i in tmp do
5383: LD_ADDR_VAR 0 2
5387: PUSH
5388: LD_VAR 0 6
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5546
// begin SetDir ( i , 3 ) ;
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_INT 3
5403: PPUSH
5404: CALL_OW 233
// if tmp_vehs then
5408: LD_VAR 0 7
5412: IFFALSE 5487
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5414: LD_VAR 0 7
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_INT 3
5425: PPUSH
5426: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5430: LD_VAR 0 7
5434: PUSH
5435: LD_INT 1
5437: ARRAY
5438: PPUSH
5439: LD_INT 4
5441: PPUSH
5442: LD_INT 0
5444: PPUSH
5445: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5449: LD_VAR 0 2
5453: PPUSH
5454: LD_VAR 0 7
5458: PUSH
5459: LD_INT 1
5461: ARRAY
5462: PPUSH
5463: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5467: LD_ADDR_VAR 0 7
5471: PUSH
5472: LD_VAR 0 7
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: CALL_OW 3
5484: ST_TO_ADDR
// end else
5485: GO 5502
// PlaceUnitArea ( i , GammaSupport , false ) ;
5487: LD_VAR 0 2
5491: PPUSH
5492: LD_INT 4
5494: PPUSH
5495: LD_INT 0
5497: PPUSH
5498: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 77
5509: PPUSH
5510: LD_INT 16
5512: PPUSH
5513: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5517: LD_INT 35
5519: PPUSH
5520: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5524: LD_INT 4
5526: PPUSH
5527: LD_INT 22
5529: PUSH
5530: LD_INT 1
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 70
5541: NOT
5542: IFFALSE 5517
// end ;
5544: GO 5393
5546: POP
5547: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5548: LD_EXP 1
5552: PPUSH
5553: LD_INT 4
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_INT 77
5570: PPUSH
5571: LD_INT 16
5573: PPUSH
5574: CALL_OW 111
// end ;
5578: LD_VAR 0 1
5582: RET
// export function PrepareSikorsky ; begin
5583: LD_INT 0
5585: PPUSH
// uc_side = 4 ;
5586: LD_ADDR_OWVAR 20
5590: PUSH
5591: LD_INT 4
5593: ST_TO_ADDR
// uc_nation = 1 ;
5594: LD_ADDR_OWVAR 21
5598: PUSH
5599: LD_INT 1
5601: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5602: LD_ADDR_EXP 16
5606: PUSH
5607: LD_STRING Sikorski
5609: PPUSH
5610: LD_INT 0
5612: PPUSH
5613: CALL 6942 0 2
5617: ST_TO_ADDR
// vc_engine = 1 ;
5618: LD_ADDR_OWVAR 39
5622: PUSH
5623: LD_INT 1
5625: ST_TO_ADDR
// vc_control = 1 ;
5626: LD_ADDR_OWVAR 38
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5634: LD_ADDR_OWVAR 40
5638: PUSH
5639: LD_INT 5
5641: PUSH
5642: LD_INT 3
5644: PUSH
5645: LD_INT 4
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: PUSH
5653: LD_OWVAR 67
5657: ARRAY
5658: ST_TO_ADDR
// vc_chassis = 4 ;
5659: LD_ADDR_OWVAR 37
5663: PUSH
5664: LD_INT 4
5666: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5667: LD_ADDR_EXP 17
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5677: LD_EXP 17
5681: PPUSH
5682: LD_INT 9
5684: PPUSH
5685: LD_INT 0
5687: PPUSH
5688: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5692: LD_EXP 16
5696: PPUSH
5697: LD_EXP 17
5701: PPUSH
5702: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5706: LD_EXP 17
5710: PPUSH
5711: LD_INT 5
5713: PPUSH
5714: CALL_OW 113
// end ;
5718: LD_VAR 0 1
5722: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5729: LD_ADDR_VAR 0 2
5733: PUSH
5734: DOUBLE
5735: LD_INT 1
5737: DEC
5738: ST_TO_ADDR
5739: LD_INT 8
5741: PUSH
5742: LD_INT 7
5744: PUSH
5745: LD_INT 7
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: PUSH
5753: LD_OWVAR 67
5757: ARRAY
5758: PUSH
5759: FOR_TO
5760: IFFALSE 5857
// begin uc_side = 4 ;
5762: LD_ADDR_OWVAR 20
5766: PUSH
5767: LD_INT 4
5769: ST_TO_ADDR
// uc_nation = 1 ;
5770: LD_ADDR_OWVAR 21
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
// hc_name =  ;
5778: LD_ADDR_OWVAR 26
5782: PUSH
5783: LD_STRING 
5785: ST_TO_ADDR
// hc_gallery =  ;
5786: LD_ADDR_OWVAR 33
5790: PUSH
5791: LD_STRING 
5793: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_INT 5
5802: PPUSH
5803: LD_INT 8
5805: PPUSH
5806: CALL_OW 12
5810: PPUSH
5811: CALL_OW 380
// un = CreateHuman ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: CALL_OW 44
5824: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_INT 9
5832: PPUSH
5833: LD_INT 0
5835: PPUSH
5836: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5840: LD_VAR 0 3
5844: PPUSH
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 23
5850: PPUSH
5851: CALL_OW 111
// end ;
5855: GO 5759
5857: POP
5858: POP
// for i = 1 to 3 do
5859: LD_ADDR_VAR 0 2
5863: PUSH
5864: DOUBLE
5865: LD_INT 1
5867: DEC
5868: ST_TO_ADDR
5869: LD_INT 3
5871: PUSH
5872: FOR_TO
5873: IFFALSE 5970
// begin uc_side = 4 ;
5875: LD_ADDR_OWVAR 20
5879: PUSH
5880: LD_INT 4
5882: ST_TO_ADDR
// uc_nation = 1 ;
5883: LD_ADDR_OWVAR 21
5887: PUSH
5888: LD_INT 1
5890: ST_TO_ADDR
// hc_name =  ;
5891: LD_ADDR_OWVAR 26
5895: PUSH
5896: LD_STRING 
5898: ST_TO_ADDR
// hc_gallery =  ;
5899: LD_ADDR_OWVAR 33
5903: PUSH
5904: LD_STRING 
5906: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5907: LD_INT 0
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: LD_INT 5
5915: PPUSH
5916: LD_INT 8
5918: PPUSH
5919: CALL_OW 12
5923: PPUSH
5924: CALL_OW 380
// un = CreateHuman ;
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: CALL_OW 44
5937: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5938: LD_VAR 0 3
5942: PPUSH
5943: LD_INT 9
5945: PPUSH
5946: LD_INT 0
5948: PPUSH
5949: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_INT 53
5960: PPUSH
5961: LD_INT 23
5963: PPUSH
5964: CALL_OW 111
// end ;
5968: GO 5872
5970: POP
5971: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: DOUBLE
5978: LD_INT 1
5980: DEC
5981: ST_TO_ADDR
5982: LD_INT 9
5984: PUSH
5985: LD_INT 8
5987: PUSH
5988: LD_INT 7
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: LD_OWVAR 67
6000: ARRAY
6001: PUSH
6002: FOR_TO
6003: IFFALSE 6199
// begin uc_side = 4 ;
6005: LD_ADDR_OWVAR 20
6009: PUSH
6010: LD_INT 4
6012: ST_TO_ADDR
// uc_nation = 1 ;
6013: LD_ADDR_OWVAR 21
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_engine = 1 ;
6021: LD_ADDR_OWVAR 39
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// vc_control = 1 ;
6029: LD_ADDR_OWVAR 38
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6037: LD_ADDR_OWVAR 40
6041: PUSH
6042: LD_INT 3
6044: PUSH
6045: LD_INT 4
6047: PUSH
6048: LD_INT 5
6050: PUSH
6051: LD_INT 6
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 1
6062: PPUSH
6063: LD_INT 4
6065: PPUSH
6066: CALL_OW 12
6070: ARRAY
6071: ST_TO_ADDR
// vc_chassis = 4 ;
6072: LD_ADDR_OWVAR 37
6076: PUSH
6077: LD_INT 4
6079: ST_TO_ADDR
// veh = CreateVehicle ;
6080: LD_ADDR_VAR 0 4
6084: PUSH
6085: CALL_OW 45
6089: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6090: LD_VAR 0 4
6094: PPUSH
6095: LD_INT 9
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: CALL_OW 49
// hc_name =  ;
6105: LD_ADDR_OWVAR 26
6109: PUSH
6110: LD_STRING 
6112: ST_TO_ADDR
// hc_gallery =  ;
6113: LD_ADDR_OWVAR 33
6117: PUSH
6118: LD_STRING 
6120: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6121: LD_INT 0
6123: PPUSH
6124: LD_INT 3
6126: PPUSH
6127: LD_INT 5
6129: PPUSH
6130: LD_INT 8
6132: PPUSH
6133: CALL_OW 12
6137: PPUSH
6138: CALL_OW 380
// un = CreateHuman ;
6142: LD_ADDR_VAR 0 3
6146: PUSH
6147: CALL_OW 44
6151: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6152: LD_VAR 0 3
6156: PPUSH
6157: LD_VAR 0 4
6161: PPUSH
6162: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6166: LD_VAR 0 4
6170: PUSH
6171: LD_VAR 0 3
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PPUSH
6180: LD_INT 53
6182: PPUSH
6183: LD_INT 23
6185: PPUSH
6186: CALL_OW 111
// wait ( 0 0$5 ) ;
6190: LD_INT 175
6192: PPUSH
6193: CALL_OW 67
// end ;
6197: GO 6002
6199: POP
6200: POP
// end ; end_of_file
6201: LD_VAR 0 1
6205: RET
// export function PrepareRussianCommander ; begin
6206: LD_INT 0
6208: PPUSH
// uc_side = 3 ;
6209: LD_ADDR_OWVAR 20
6213: PUSH
6214: LD_INT 3
6216: ST_TO_ADDR
// uc_nation = 3 ;
6217: LD_ADDR_OWVAR 21
6221: PUSH
6222: LD_INT 3
6224: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6225: LD_ADDR_EXP 24
6229: PUSH
6230: LD_STRING Borodin
6232: PPUSH
6233: CALL_OW 25
6237: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6238: LD_EXP 24
6242: PPUSH
6243: LD_INT 25
6245: PPUSH
6246: LD_INT 0
6248: PPUSH
6249: CALL_OW 49
// end ;
6253: LD_VAR 0 1
6257: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6258: LD_INT 0
6260: PPUSH
6261: PPUSH
6262: PPUSH
6263: PPUSH
// for i = 1 to 10 do
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: DOUBLE
6270: LD_INT 1
6272: DEC
6273: ST_TO_ADDR
6274: LD_INT 10
6276: PUSH
6277: FOR_TO
6278: IFFALSE 6352
// begin uc_side = 6 ;
6280: LD_ADDR_OWVAR 20
6284: PUSH
6285: LD_INT 6
6287: ST_TO_ADDR
// uc_nation = 3 ;
6288: LD_ADDR_OWVAR 21
6292: PUSH
6293: LD_INT 3
6295: ST_TO_ADDR
// hc_gallery =  ;
6296: LD_ADDR_OWVAR 33
6300: PUSH
6301: LD_STRING 
6303: ST_TO_ADDR
// hc_name =  ;
6304: LD_ADDR_OWVAR 26
6308: PUSH
6309: LD_STRING 
6311: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6312: LD_INT 0
6314: PPUSH
6315: LD_INT 1
6317: PPUSH
6318: LD_INT 3
6320: PPUSH
6321: CALL_OW 380
// un = CreateHuman ;
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6335: LD_VAR 0 3
6339: PPUSH
6340: LD_INT 1
6342: PPUSH
6343: LD_INT 0
6345: PPUSH
6346: CALL_OW 49
// end ;
6350: GO 6277
6352: POP
6353: POP
// for i = 1 to 3 do
6354: LD_ADDR_VAR 0 2
6358: PUSH
6359: DOUBLE
6360: LD_INT 1
6362: DEC
6363: ST_TO_ADDR
6364: LD_INT 3
6366: PUSH
6367: FOR_TO
6368: IFFALSE 6517
// begin uc_side = 6 ;
6370: LD_ADDR_OWVAR 20
6374: PUSH
6375: LD_INT 6
6377: ST_TO_ADDR
// uc_nation = 3 ;
6378: LD_ADDR_OWVAR 21
6382: PUSH
6383: LD_INT 3
6385: ST_TO_ADDR
// vc_engine = 1 ;
6386: LD_ADDR_OWVAR 39
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// vc_control = 1 ;
6394: LD_ADDR_OWVAR 38
6398: PUSH
6399: LD_INT 1
6401: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6402: LD_ADDR_OWVAR 40
6406: PUSH
6407: LD_INT 43
6409: PUSH
6410: LD_INT 44
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 1
6419: PPUSH
6420: LD_INT 2
6422: PPUSH
6423: CALL_OW 12
6427: ARRAY
6428: ST_TO_ADDR
// vc_chassis = 22 ;
6429: LD_ADDR_OWVAR 37
6433: PUSH
6434: LD_INT 22
6436: ST_TO_ADDR
// veh = CreateVehicle ;
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: CALL_OW 45
6446: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6447: LD_VAR 0 4
6451: PPUSH
6452: LD_INT 2
6454: PPUSH
6455: LD_INT 0
6457: PPUSH
6458: CALL_OW 49
// hc_gallery =  ;
6462: LD_ADDR_OWVAR 33
6466: PUSH
6467: LD_STRING 
6469: ST_TO_ADDR
// hc_name =  ;
6470: LD_ADDR_OWVAR 26
6474: PUSH
6475: LD_STRING 
6477: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6478: LD_INT 0
6480: PPUSH
6481: LD_INT 3
6483: PPUSH
6484: LD_INT 4
6486: PPUSH
6487: CALL_OW 380
// un = CreateHuman ;
6491: LD_ADDR_VAR 0 3
6495: PUSH
6496: CALL_OW 44
6500: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6501: LD_VAR 0 3
6505: PPUSH
6506: LD_VAR 0 4
6510: PPUSH
6511: CALL_OW 52
// end ;
6515: GO 6367
6517: POP
6518: POP
// end ;
6519: LD_VAR 0 1
6523: RET
// export function PrepareRussians ; var i , un ; begin
6524: LD_INT 0
6526: PPUSH
6527: PPUSH
6528: PPUSH
// for i = 1 to 8 do
6529: LD_ADDR_VAR 0 2
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_INT 8
6541: PUSH
6542: FOR_TO
6543: IFFALSE 6629
// begin uc_side = 3 ;
6545: LD_ADDR_OWVAR 20
6549: PUSH
6550: LD_INT 3
6552: ST_TO_ADDR
// uc_nation = 3 ;
6553: LD_ADDR_OWVAR 21
6557: PUSH
6558: LD_INT 3
6560: ST_TO_ADDR
// hc_gallery =  ;
6561: LD_ADDR_OWVAR 33
6565: PUSH
6566: LD_STRING 
6568: ST_TO_ADDR
// hc_name =  ;
6569: LD_ADDR_OWVAR 26
6573: PUSH
6574: LD_STRING 
6576: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6577: LD_INT 0
6579: PPUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_EXP 25
6587: PPUSH
6588: LD_EXP 26
6592: PPUSH
6593: CALL_OW 12
6597: PPUSH
6598: CALL_OW 380
// un = CreateHuman ;
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: CALL_OW 44
6611: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6612: LD_VAR 0 3
6616: PPUSH
6617: LD_INT 3
6619: PPUSH
6620: LD_INT 0
6622: PPUSH
6623: CALL_OW 49
// end ;
6627: GO 6542
6629: POP
6630: POP
// for i = 1 to 4 do
6631: LD_ADDR_VAR 0 2
6635: PUSH
6636: DOUBLE
6637: LD_INT 1
6639: DEC
6640: ST_TO_ADDR
6641: LD_INT 4
6643: PUSH
6644: FOR_TO
6645: IFFALSE 6731
// begin uc_side = 3 ;
6647: LD_ADDR_OWVAR 20
6651: PUSH
6652: LD_INT 3
6654: ST_TO_ADDR
// uc_nation = 3 ;
6655: LD_ADDR_OWVAR 21
6659: PUSH
6660: LD_INT 3
6662: ST_TO_ADDR
// hc_gallery =  ;
6663: LD_ADDR_OWVAR 33
6667: PUSH
6668: LD_STRING 
6670: ST_TO_ADDR
// hc_name =  ;
6671: LD_ADDR_OWVAR 26
6675: PUSH
6676: LD_STRING 
6678: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6679: LD_INT 0
6681: PPUSH
6682: LD_INT 2
6684: PPUSH
6685: LD_EXP 25
6689: PPUSH
6690: LD_EXP 26
6694: PPUSH
6695: CALL_OW 12
6699: PPUSH
6700: CALL_OW 380
// un = CreateHuman ;
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: CALL_OW 44
6713: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6714: LD_VAR 0 3
6718: PPUSH
6719: LD_INT 3
6721: PPUSH
6722: LD_INT 0
6724: PPUSH
6725: CALL_OW 49
// end ;
6729: GO 6644
6731: POP
6732: POP
// for i = 1 to 3 do
6733: LD_ADDR_VAR 0 2
6737: PUSH
6738: DOUBLE
6739: LD_INT 1
6741: DEC
6742: ST_TO_ADDR
6743: LD_INT 3
6745: PUSH
6746: FOR_TO
6747: IFFALSE 6833
// begin uc_side = 3 ;
6749: LD_ADDR_OWVAR 20
6753: PUSH
6754: LD_INT 3
6756: ST_TO_ADDR
// uc_nation = 3 ;
6757: LD_ADDR_OWVAR 21
6761: PUSH
6762: LD_INT 3
6764: ST_TO_ADDR
// hc_gallery =  ;
6765: LD_ADDR_OWVAR 33
6769: PUSH
6770: LD_STRING 
6772: ST_TO_ADDR
// hc_name =  ;
6773: LD_ADDR_OWVAR 26
6777: PUSH
6778: LD_STRING 
6780: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6781: LD_INT 0
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: LD_EXP 25
6791: PPUSH
6792: LD_EXP 26
6796: PPUSH
6797: CALL_OW 12
6801: PPUSH
6802: CALL_OW 380
// un = CreateHuman ;
6806: LD_ADDR_VAR 0 3
6810: PUSH
6811: CALL_OW 44
6815: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6816: LD_VAR 0 3
6820: PPUSH
6821: LD_INT 3
6823: PPUSH
6824: LD_INT 0
6826: PPUSH
6827: CALL_OW 49
// end ;
6831: GO 6746
6833: POP
6834: POP
// for i = 1 to 2 do
6835: LD_ADDR_VAR 0 2
6839: PUSH
6840: DOUBLE
6841: LD_INT 1
6843: DEC
6844: ST_TO_ADDR
6845: LD_INT 2
6847: PUSH
6848: FOR_TO
6849: IFFALSE 6935
// begin uc_side = 3 ;
6851: LD_ADDR_OWVAR 20
6855: PUSH
6856: LD_INT 3
6858: ST_TO_ADDR
// uc_nation = 3 ;
6859: LD_ADDR_OWVAR 21
6863: PUSH
6864: LD_INT 3
6866: ST_TO_ADDR
// hc_gallery =  ;
6867: LD_ADDR_OWVAR 33
6871: PUSH
6872: LD_STRING 
6874: ST_TO_ADDR
// hc_name =  ;
6875: LD_ADDR_OWVAR 26
6879: PUSH
6880: LD_STRING 
6882: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6883: LD_INT 0
6885: PPUSH
6886: LD_INT 4
6888: PPUSH
6889: LD_EXP 25
6893: PPUSH
6894: LD_EXP 26
6898: PPUSH
6899: CALL_OW 12
6903: PPUSH
6904: CALL_OW 380
// un = CreateHuman ;
6908: LD_ADDR_VAR 0 3
6912: PUSH
6913: CALL_OW 44
6917: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6918: LD_VAR 0 3
6922: PPUSH
6923: LD_INT 3
6925: PPUSH
6926: LD_INT 0
6928: PPUSH
6929: CALL_OW 49
// end ;
6933: GO 6848
6935: POP
6936: POP
// end ; end_of_file
6937: LD_VAR 0 1
6941: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6942: LD_INT 0
6944: PPUSH
6945: PPUSH
// if exist_mode then
6946: LD_VAR 0 2
6950: IFFALSE 6969
// unit := CreateCharacter ( ident ) else
6952: LD_ADDR_VAR 0 4
6956: PUSH
6957: LD_VAR 0 1
6961: PPUSH
6962: CALL_OW 34
6966: ST_TO_ADDR
6967: GO 6984
// unit := NewCharacter ( ident ) ;
6969: LD_ADDR_VAR 0 4
6973: PUSH
6974: LD_VAR 0 1
6978: PPUSH
6979: CALL_OW 25
6983: ST_TO_ADDR
// result := unit ;
6984: LD_ADDR_VAR 0 3
6988: PUSH
6989: LD_VAR 0 4
6993: ST_TO_ADDR
// end ;
6994: LD_VAR 0 3
6998: RET
// export function Video ( mode ) ; begin
6999: LD_INT 0
7001: PPUSH
// ingame_video = mode ;
7002: LD_ADDR_OWVAR 52
7006: PUSH
7007: LD_VAR 0 1
7011: ST_TO_ADDR
// interface_hidden = mode ;
7012: LD_ADDR_OWVAR 54
7016: PUSH
7017: LD_VAR 0 1
7021: ST_TO_ADDR
// end ;
7022: LD_VAR 0 2
7026: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7027: LD_INT 0
7029: PPUSH
7030: PPUSH
7031: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7032: LD_ADDR_VAR 0 1
7036: PUSH
7037: LD_VAR 0 1
7041: PUSH
7042: LD_EXP 1
7046: PUSH
7047: LD_EXP 2
7051: PUSH
7052: LD_EXP 3
7056: PUSH
7057: LD_EXP 4
7061: PUSH
7062: LD_EXP 5
7066: PUSH
7067: LD_EXP 6
7071: PUSH
7072: LD_EXP 7
7076: PUSH
7077: LD_EXP 8
7081: PUSH
7082: LD_EXP 9
7086: PUSH
7087: LD_EXP 10
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: DIFF
7104: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7105: LD_ADDR_VAR 0 6
7109: PUSH
7110: LD_VAR 0 1
7114: PUSH
7115: LD_INT 1
7117: PPUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 12
7127: ARRAY
7128: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7129: LD_VAR 0 6
7133: PPUSH
7134: CALL_OW 258
7138: PUSH
7139: LD_INT 1
7141: EQUAL
7142: IFFALSE 7160
// Say ( speaker , dialogMID ) else
7144: LD_VAR 0 6
7148: PPUSH
7149: LD_VAR 0 2
7153: PPUSH
7154: CALL_OW 88
7158: GO 7174
// Say ( speaker , dialogFID ) ;
7160: LD_VAR 0 6
7164: PPUSH
7165: LD_VAR 0 3
7169: PPUSH
7170: CALL_OW 88
// result := speaker ;
7174: LD_ADDR_VAR 0 4
7178: PUSH
7179: LD_VAR 0 6
7183: ST_TO_ADDR
// end ;
7184: LD_VAR 0 4
7188: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
// uc_side := GetSide ( b ) ;
7194: LD_ADDR_OWVAR 20
7198: PUSH
7199: LD_VAR 0 2
7203: PPUSH
7204: CALL_OW 255
7208: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7209: LD_ADDR_OWVAR 21
7213: PUSH
7214: LD_VAR 0 2
7218: PPUSH
7219: CALL_OW 248
7223: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7224: LD_INT 0
7226: PPUSH
7227: LD_INT 1
7229: PPUSH
7230: LD_VAR 0 1
7234: PPUSH
7235: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7239: LD_ADDR_VAR 0 5
7243: PUSH
7244: LD_VAR 0 2
7248: PPUSH
7249: CALL_OW 254
7253: PUSH
7254: LD_INT 3
7256: MINUS
7257: ST_TO_ADDR
// if dir < 0 then
7258: LD_VAR 0 5
7262: PUSH
7263: LD_INT 0
7265: LESS
7266: IFFALSE 7282
// dir := 6 + dir ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 6
7275: PUSH
7276: LD_VAR 0 5
7280: PLUS
7281: ST_TO_ADDR
// un := CreateHuman ;
7282: LD_ADDR_VAR 0 4
7286: PUSH
7287: CALL_OW 44
7291: ST_TO_ADDR
// SetDir ( un , dir ) ;
7292: LD_VAR 0 4
7296: PPUSH
7297: LD_VAR 0 5
7301: PPUSH
7302: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7306: LD_VAR 0 4
7310: PPUSH
7311: LD_VAR 0 2
7315: PPUSH
7316: CALL_OW 52
// end ;
7320: LD_VAR 0 3
7324: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7325: LD_INT 0
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// for i = 1 to count do
7331: LD_ADDR_VAR 0 8
7335: PUSH
7336: DOUBLE
7337: LD_INT 1
7339: DEC
7340: ST_TO_ADDR
7341: LD_VAR 0 6
7345: PUSH
7346: FOR_TO
7347: IFFALSE 7428
// begin uc_side = side ;
7349: LD_ADDR_OWVAR 20
7353: PUSH
7354: LD_VAR 0 1
7358: ST_TO_ADDR
// uc_nation = nation ;
7359: LD_ADDR_OWVAR 21
7363: PUSH
7364: LD_VAR 0 2
7368: ST_TO_ADDR
// hc_gallery =  ;
7369: LD_ADDR_OWVAR 33
7373: PUSH
7374: LD_STRING 
7376: ST_TO_ADDR
// hc_name =  ;
7377: LD_ADDR_OWVAR 26
7381: PUSH
7382: LD_STRING 
7384: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7385: LD_INT 0
7387: PPUSH
7388: LD_VAR 0 5
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: CALL_OW 380
// un = CreateHuman ;
7402: LD_ADDR_VAR 0 10
7406: PUSH
7407: CALL_OW 44
7411: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7412: LD_VAR 0 10
7416: PPUSH
7417: LD_VAR 0 3
7421: PPUSH
7422: CALL_OW 52
// end ;
7426: GO 7346
7428: POP
7429: POP
// end ;
7430: LD_VAR 0 7
7434: RET
// export function PrepareDifficulty ; begin
7435: LD_INT 0
7437: PPUSH
// if Difficulty = 1 then
7438: LD_OWVAR 67
7442: PUSH
7443: LD_INT 1
7445: EQUAL
7446: IFFALSE 7464
// begin RuSolMinLevel = 4 ;
7448: LD_ADDR_EXP 25
7452: PUSH
7453: LD_INT 4
7455: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7456: LD_ADDR_EXP 26
7460: PUSH
7461: LD_INT 6
7463: ST_TO_ADDR
// end ; if Difficulty = 2 then
7464: LD_OWVAR 67
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: IFFALSE 7542
// begin RuSolMinLevel = 5 ;
7474: LD_ADDR_EXP 25
7478: PUSH
7479: LD_INT 5
7481: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7482: LD_ADDR_EXP 26
7486: PUSH
7487: LD_INT 6
7489: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7490: LD_INT 51
7492: PPUSH
7493: LD_INT 3
7495: PPUSH
7496: LD_INT 1
7498: PPUSH
7499: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7503: LD_INT 57
7505: PPUSH
7506: LD_INT 3
7508: PPUSH
7509: LD_INT 1
7511: PPUSH
7512: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7516: LD_INT 57
7518: PPUSH
7519: LD_INT 6
7521: PPUSH
7522: LD_INT 2
7524: PPUSH
7525: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7529: LD_INT 51
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: LD_INT 2
7537: PPUSH
7538: CALL_OW 322
// end ; if Difficulty = 3 then
7542: LD_OWVAR 67
7546: PUSH
7547: LD_INT 3
7549: EQUAL
7550: IFFALSE 7633
// begin RuSolMinLevel = 5 ;
7552: LD_ADDR_EXP 25
7556: PUSH
7557: LD_INT 5
7559: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7560: LD_ADDR_EXP 26
7564: PUSH
7565: LD_INT 6
7567: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7568: LD_INT 57
7570: PPUSH
7571: LD_INT 3
7573: PPUSH
7574: LD_INT 1
7576: PPUSH
7577: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7581: LD_INT 51
7583: PPUSH
7584: LD_INT 3
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7594: LD_INT 52
7596: PPUSH
7597: LD_INT 3
7599: PPUSH
7600: LD_INT 1
7602: PPUSH
7603: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 6
7612: PPUSH
7613: LD_INT 2
7615: PPUSH
7616: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7620: LD_INT 52
7622: PPUSH
7623: LD_INT 6
7625: PPUSH
7626: LD_INT 2
7628: PPUSH
7629: CALL_OW 322
// end ; end ;
7633: LD_VAR 0 1
7637: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
7642: PPUSH
7643: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7644: LD_ADDR_VAR 0 3
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 3
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 25
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 69
7677: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7678: LD_ADDR_VAR 0 4
7682: PUSH
7683: LD_INT 4
7685: PUSH
7686: LD_INT 75
7688: PUSH
7689: LD_INT 79
7691: PUSH
7692: LD_INT 2
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 4
7703: PUSH
7704: LD_INT 113
7706: PUSH
7707: LD_INT 94
7709: PUSH
7710: LD_INT 4
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 29
7721: PUSH
7722: LD_INT 106
7724: PUSH
7725: LD_INT 97
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 26
7739: PUSH
7740: LD_INT 93
7742: PUSH
7743: LD_INT 97
7745: PUSH
7746: LD_INT 5
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: LD_INT 100
7760: PUSH
7761: LD_INT 89
7763: PUSH
7764: LD_INT 3
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 17
7775: PUSH
7776: LD_INT 96
7778: PUSH
7779: LD_INT 89
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 32
7793: PUSH
7794: LD_INT 78
7796: PUSH
7797: LD_INT 94
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 32
7811: PUSH
7812: LD_INT 95
7814: PUSH
7815: LD_INT 82
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 32
7829: PUSH
7830: LD_INT 104
7832: PUSH
7833: LD_INT 85
7835: PUSH
7836: LD_INT 2
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 32
7847: PUSH
7848: LD_INT 81
7850: PUSH
7851: LD_INT 78
7853: PUSH
7854: LD_INT 2
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: PUSH
7863: LD_INT 33
7865: PUSH
7866: LD_INT 109
7868: PUSH
7869: LD_INT 90
7871: PUSH
7872: LD_INT 3
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 33
7883: PUSH
7884: LD_INT 88
7886: PUSH
7887: LD_INT 79
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 33
7901: PUSH
7902: LD_INT 76
7904: PUSH
7905: LD_INT 87
7907: PUSH
7908: LD_INT 1
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 26
7919: PUSH
7920: LD_INT 96
7922: PUSH
7923: LD_INT 97
7925: PUSH
7926: LD_INT 5
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 26
7937: PUSH
7938: LD_INT 85
7940: PUSH
7941: LD_INT 84
7943: PUSH
7944: LD_INT 2
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 6
7955: PUSH
7956: LD_INT 88
7958: PUSH
7959: LD_INT 95
7961: PUSH
7962: LD_INT 0
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 19
7973: PUSH
7974: LD_INT 103
7976: PUSH
7977: LD_INT 89
7979: PUSH
7980: LD_INT 4
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 16
7991: PUSH
7992: LD_INT 97
7994: PUSH
7995: LD_INT 86
7997: PUSH
7998: LD_INT 2
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 24
8009: PUSH
8010: LD_INT 100
8012: PUSH
8013: LD_INT 85
8015: PUSH
8016: LD_INT 3
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
// for i := 1 to buildingsTab do
8046: LD_ADDR_VAR 0 2
8050: PUSH
8051: DOUBLE
8052: LD_INT 1
8054: DEC
8055: ST_TO_ADDR
8056: LD_VAR 0 4
8060: PUSH
8061: FOR_TO
8062: IFFALSE 8135
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8064: LD_VAR 0 3
8068: PPUSH
8069: LD_VAR 0 4
8073: PUSH
8074: LD_VAR 0 2
8078: ARRAY
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: LD_VAR 0 4
8088: PUSH
8089: LD_VAR 0 2
8093: ARRAY
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 4
8103: PUSH
8104: LD_VAR 0 2
8108: ARRAY
8109: PUSH
8110: LD_INT 3
8112: ARRAY
8113: PPUSH
8114: LD_VAR 0 4
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: PUSH
8125: LD_INT 4
8127: ARRAY
8128: PPUSH
8129: CALL_OW 205
8133: GO 8061
8135: POP
8136: POP
// end ;
8137: LD_VAR 0 1
8141: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8142: LD_INT 0
8144: PPUSH
8145: PPUSH
// for i in charactersList do
8146: LD_ADDR_VAR 0 4
8150: PUSH
8151: LD_VAR 0 1
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8175
// SaveCharacters ( i , ident ) ;
8159: LD_VAR 0 4
8163: PPUSH
8164: LD_VAR 0 2
8168: PPUSH
8169: CALL_OW 38
8173: GO 8156
8175: POP
8176: POP
// end ;
8177: LD_VAR 0 3
8181: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8189: LD_ADDR_VAR 0 8
8193: PUSH
8194: LD_INT 48
8196: PUSH
8197: LD_INT 49
8199: PUSH
8200: LD_INT 50
8202: PUSH
8203: LD_INT 20
8205: PUSH
8206: LD_INT 1
8208: PUSH
8209: LD_INT 51
8211: PUSH
8212: LD_INT 52
8214: PUSH
8215: LD_INT 69
8217: PUSH
8218: LD_INT 39
8220: PUSH
8221: LD_INT 34
8223: PUSH
8224: LD_INT 40
8226: PUSH
8227: LD_INT 53
8229: PUSH
8230: LD_INT 71
8232: PUSH
8233: LD_INT 57
8235: PUSH
8236: LD_INT 58
8238: PUSH
8239: LD_INT 44
8241: PUSH
8242: LD_INT 32
8244: PUSH
8245: LD_INT 27
8247: PUSH
8248: LD_INT 23
8250: PUSH
8251: LD_INT 33
8253: PUSH
8254: LD_INT 59
8256: PUSH
8257: LD_INT 54
8259: PUSH
8260: LD_INT 55
8262: PUSH
8263: LD_INT 56
8265: PUSH
8266: LD_INT 63
8268: PUSH
8269: LD_INT 64
8271: PUSH
8272: LD_INT 65
8274: PUSH
8275: LD_INT 30
8277: PUSH
8278: LD_INT 31
8280: PUSH
8281: LD_INT 21
8283: PUSH
8284: LD_INT 22
8286: PUSH
8287: LD_INT 25
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8324: LD_ADDR_VAR 0 5
8328: PUSH
8329: DOUBLE
8330: LD_INT 1
8332: DEC
8333: ST_TO_ADDR
8334: LD_VAR 0 8
8338: PUSH
8339: FOR_TO
8340: IFFALSE 8416
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8342: LD_VAR 0 8
8346: PUSH
8347: LD_VAR 0 5
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 321
8362: PUSH
8363: LD_INT 1
8365: EQUAL
8366: PUSH
8367: LD_VAR 0 8
8371: PUSH
8372: LD_VAR 0 5
8376: ARRAY
8377: PPUSH
8378: LD_VAR 0 3
8382: PPUSH
8383: CALL_OW 482
8387: PUSH
8388: LD_INT 1
8390: EQUAL
8391: AND
8392: IFFALSE 8414
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8394: LD_VAR 0 2
8398: PPUSH
8399: LD_VAR 0 8
8403: PUSH
8404: LD_VAR 0 5
8408: ARRAY
8409: PPUSH
8410: CALL_OW 184
8414: GO 8339
8416: POP
8417: POP
// end ;
8418: LD_VAR 0 4
8422: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8423: LD_INT 0
8425: PPUSH
8426: PPUSH
8427: PPUSH
8428: PPUSH
8429: PPUSH
8430: PPUSH
8431: PPUSH
8432: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8433: LD_ADDR_VAR 0 6
8437: PUSH
8438: LD_VAR 0 2
8442: PPUSH
8443: LD_INT 22
8445: PUSH
8446: LD_VAR 0 1
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: LD_INT 56
8457: PUSH
8458: EMPTY
8459: LIST
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: LD_INT 700
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: LD_INT 60
8476: PUSH
8477: EMPTY
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 2
8486: PUSH
8487: LD_INT 25
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 25
8499: PUSH
8500: LD_INT 5
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 25
8509: PUSH
8510: LD_INT 8
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 25
8519: PUSH
8520: LD_INT 9
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PPUSH
8541: CALL_OW 70
8545: PUSH
8546: LD_EXP 24
8550: PUSH
8551: EMPTY
8552: LIST
8553: DIFF
8554: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8555: LD_ADDR_VAR 0 7
8559: PUSH
8560: LD_VAR 0 2
8564: PPUSH
8565: LD_INT 22
8567: PUSH
8568: LD_VAR 0 1
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 30
8579: PUSH
8580: LD_INT 32
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: PUSH
8593: LD_INT 24
8595: PUSH
8596: LD_INT 251
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 70
8613: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8614: LD_ADDR_VAR 0 9
8618: PUSH
8619: LD_VAR 0 2
8623: PPUSH
8624: LD_INT 22
8626: PUSH
8627: LD_VAR 0 1
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 2
8638: PUSH
8639: LD_INT 30
8641: PUSH
8642: LD_INT 4
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 30
8651: PUSH
8652: LD_INT 5
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 251
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 70
8683: ST_TO_ADDR
// if barrackList > 0 then
8684: LD_VAR 0 9
8688: PUSH
8689: LD_INT 0
8691: GREATER
8692: IFFALSE 8840
// begin if turretList = 0 then
8694: LD_VAR 0 7
8698: PUSH
8699: LD_INT 0
8701: EQUAL
8702: IFFALSE 8744
// begin if soldiers_list > 0 then
8704: LD_VAR 0 6
8708: PUSH
8709: LD_INT 0
8711: GREATER
8712: IFFALSE 8742
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8714: LD_VAR 0 6
8718: PPUSH
8719: LD_VAR 0 9
8723: PUSH
8724: LD_INT 1
8726: PPUSH
8727: LD_VAR 0 9
8731: PPUSH
8732: CALL_OW 12
8736: ARRAY
8737: PPUSH
8738: CALL_OW 120
// end else
8742: GO 8840
// begin for i in barrackList do
8744: LD_ADDR_VAR 0 4
8748: PUSH
8749: LD_VAR 0 9
8753: PUSH
8754: FOR_IN
8755: IFFALSE 8838
// begin insideUnits = UnitsInside ( i ) ;
8757: LD_ADDR_VAR 0 10
8761: PUSH
8762: LD_VAR 0 4
8766: PPUSH
8767: CALL_OW 313
8771: ST_TO_ADDR
// if insideUnits > 0 then
8772: LD_VAR 0 10
8776: PUSH
8777: LD_INT 0
8779: GREATER
8780: IFFALSE 8804
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8782: LD_VAR 0 10
8786: PUSH
8787: LD_INT 1
8789: ARRAY
8790: PPUSH
8791: LD_VAR 0 7
8795: PUSH
8796: LD_INT 1
8798: ARRAY
8799: PPUSH
8800: CALL_OW 120
// if soldiers_list > 0 then
8804: LD_VAR 0 6
8808: PUSH
8809: LD_INT 0
8811: GREATER
8812: IFFALSE 8836
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8814: LD_VAR 0 6
8818: PUSH
8819: LD_INT 1
8821: ARRAY
8822: PPUSH
8823: LD_VAR 0 7
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: CALL_OW 120
// end ;
8836: GO 8754
8838: POP
8839: POP
// end ; end ; end ;
8840: LD_VAR 0 3
8844: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
// for i = 1 to vehCount do
8853: LD_ADDR_VAR 0 8
8857: PUSH
8858: DOUBLE
8859: LD_INT 1
8861: DEC
8862: ST_TO_ADDR
8863: LD_VAR 0 6
8867: PUSH
8868: FOR_TO
8869: IFFALSE 9076
// begin uc_side = side ;
8871: LD_ADDR_OWVAR 20
8875: PUSH
8876: LD_VAR 0 1
8880: ST_TO_ADDR
// uc_nation = nation ;
8881: LD_ADDR_OWVAR 21
8885: PUSH
8886: LD_VAR 0 3
8890: ST_TO_ADDR
// vc_Chassis = 22 ;
8891: LD_ADDR_OWVAR 37
8895: PUSH
8896: LD_INT 22
8898: ST_TO_ADDR
// vc_engine = 1 ;
8899: LD_ADDR_OWVAR 39
8903: PUSH
8904: LD_INT 1
8906: ST_TO_ADDR
// vc_control = 1 ;
8907: LD_ADDR_OWVAR 38
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8915: LD_ADDR_OWVAR 40
8919: PUSH
8920: LD_INT 43
8922: PUSH
8923: LD_INT 44
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 2
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: ST_TO_ADDR
// veh = CreateVehicle ;
8942: LD_ADDR_VAR 0 12
8946: PUSH
8947: CALL_OW 45
8951: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8952: LD_VAR 0 12
8956: PPUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: LD_INT 0
8964: PPUSH
8965: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8969: LD_ADDR_EXP 32
8973: PUSH
8974: LD_EXP 32
8978: PUSH
8979: LD_VAR 0 12
8983: ADD
8984: ST_TO_ADDR
// hc_class = 3 ;
8985: LD_ADDR_OWVAR 28
8989: PUSH
8990: LD_INT 3
8992: ST_TO_ADDR
// hc_name =  ;
8993: LD_ADDR_OWVAR 26
8997: PUSH
8998: LD_STRING 
9000: ST_TO_ADDR
// hc_gallery =  ;
9001: LD_ADDR_OWVAR 33
9005: PUSH
9006: LD_STRING 
9008: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9009: LD_INT 0
9011: PPUSH
9012: LD_INT 3
9014: PPUSH
9015: LD_EXP 25
9019: PPUSH
9020: LD_EXP 26
9024: PPUSH
9025: CALL_OW 12
9029: PPUSH
9030: CALL_OW 380
// un = CreateHuman ;
9034: LD_ADDR_VAR 0 10
9038: PUSH
9039: CALL_OW 44
9043: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9044: LD_VAR 0 10
9048: PPUSH
9049: LD_VAR 0 12
9053: PPUSH
9054: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9058: LD_ADDR_EXP 32
9062: PUSH
9063: LD_EXP 32
9067: PUSH
9068: LD_VAR 0 10
9072: ADD
9073: ST_TO_ADDR
// end ;
9074: GO 8868
9076: POP
9077: POP
// end ;
9078: LD_VAR 0 7
9082: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9083: LD_INT 0
9085: PPUSH
9086: PPUSH
9087: PPUSH
9088: PPUSH
9089: PPUSH
9090: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9091: LD_VAR 0 2
9095: PPUSH
9096: LD_INT 22
9098: PUSH
9099: LD_VAR 0 1
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: PPUSH
9111: CALL_OW 70
9115: PUSH
9116: LD_INT 0
9118: EQUAL
9119: PUSH
9120: LD_EXP 32
9124: AND
9125: IFFALSE 9412
// begin for i in defenders_list do
9127: LD_ADDR_VAR 0 4
9131: PUSH
9132: LD_EXP 32
9136: PUSH
9137: FOR_IN
9138: IFFALSE 9410
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9140: LD_VAR 0 4
9144: PPUSH
9145: LD_INT 63
9147: PPUSH
9148: LD_INT 75
9150: PPUSH
9151: CALL_OW 297
9155: PUSH
9156: LD_INT 8
9158: GREATER
9159: PUSH
9160: LD_VAR 0 4
9164: PPUSH
9165: CALL_OW 314
9169: NOT
9170: AND
9171: IFFALSE 9190
// ComMoveXY ( i , 63 , 75 ) else
9173: LD_VAR 0 4
9177: PPUSH
9178: LD_INT 63
9180: PPUSH
9181: LD_INT 75
9183: PPUSH
9184: CALL_OW 111
9188: GO 9408
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9190: LD_VAR 0 4
9194: PPUSH
9195: CALL_OW 257
9199: PUSH
9200: LD_INT 3
9202: EQUAL
9203: PUSH
9204: LD_VAR 0 4
9208: PPUSH
9209: CALL_OW 310
9213: NOT
9214: AND
9215: PUSH
9216: LD_VAR 0 4
9220: PPUSH
9221: CALL_OW 314
9225: NOT
9226: AND
9227: IFFALSE 9280
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9229: LD_VAR 0 4
9233: PPUSH
9234: LD_EXP 32
9238: PPUSH
9239: LD_INT 58
9241: PUSH
9242: EMPTY
9243: LIST
9244: PUSH
9245: LD_INT 24
9247: PUSH
9248: LD_INT 1000
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PPUSH
9259: CALL_OW 72
9263: PPUSH
9264: LD_VAR 0 4
9268: PPUSH
9269: CALL_OW 74
9273: PPUSH
9274: CALL_OW 120
9278: GO 9408
// if GetFuel ( i ) < 100 then
9280: LD_VAR 0 4
9284: PPUSH
9285: CALL_OW 261
9289: PUSH
9290: LD_INT 100
9292: LESS
9293: IFFALSE 9309
// SetFuel ( defenders_list , 100 ) else
9295: LD_EXP 32
9299: PPUSH
9300: LD_INT 100
9302: PPUSH
9303: CALL_OW 240
9307: GO 9408
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9309: LD_VAR 0 4
9313: PPUSH
9314: CALL_OW 263
9318: PUSH
9319: LD_INT 1
9321: EQUAL
9322: PUSH
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 256
9332: PUSH
9333: LD_INT 990
9335: LESS
9336: AND
9337: IFFALSE 9408
// begin veh := i ;
9339: LD_ADDR_VAR 0 7
9343: PUSH
9344: LD_VAR 0 4
9348: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9349: LD_ADDR_VAR 0 8
9353: PUSH
9354: LD_VAR 0 4
9358: PPUSH
9359: CALL_OW 311
9363: ST_TO_ADDR
// if veh then
9364: LD_VAR 0 7
9368: IFFALSE 9408
// begin ComMoveXY ( i , 63 , 75 ) ;
9370: LD_VAR 0 4
9374: PPUSH
9375: LD_INT 63
9377: PPUSH
9378: LD_INT 75
9380: PPUSH
9381: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9385: LD_VAR 0 7
9389: PPUSH
9390: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9394: LD_VAR 0 8
9398: PPUSH
9399: LD_VAR 0 7
9403: PPUSH
9404: CALL_OW 189
// end ; end ; end ;
9408: GO 9137
9410: POP
9411: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9412: LD_ADDR_VAR 0 6
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: LD_INT 22
9424: PUSH
9425: LD_VAR 0 1
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: PPUSH
9437: CALL_OW 70
9441: ST_TO_ADDR
// if tmp and defenders_list then
9442: LD_VAR 0 6
9446: PUSH
9447: LD_EXP 32
9451: AND
9452: IFFALSE 9621
// for i in defenders_list do
9454: LD_ADDR_VAR 0 4
9458: PUSH
9459: LD_EXP 32
9463: PUSH
9464: FOR_IN
9465: IFFALSE 9619
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9467: LD_VAR 0 4
9471: PPUSH
9472: CALL_OW 257
9476: PUSH
9477: LD_INT 3
9479: EQUAL
9480: PUSH
9481: LD_VAR 0 4
9485: PPUSH
9486: CALL_OW 310
9490: NOT
9491: AND
9492: IFFALSE 9531
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9494: LD_VAR 0 4
9498: PPUSH
9499: LD_EXP 32
9503: PPUSH
9504: LD_INT 58
9506: PUSH
9507: EMPTY
9508: LIST
9509: PPUSH
9510: CALL_OW 72
9514: PPUSH
9515: LD_VAR 0 4
9519: PPUSH
9520: CALL_OW 74
9524: PPUSH
9525: CALL_OW 120
9529: GO 9617
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9531: LD_VAR 0 4
9535: PPUSH
9536: CALL_OW 314
9540: NOT
9541: PUSH
9542: LD_VAR 0 4
9546: PPUSH
9547: LD_VAR 0 2
9551: PPUSH
9552: CALL_OW 308
9556: AND
9557: IFFALSE 9585
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9559: LD_VAR 0 4
9563: PPUSH
9564: LD_VAR 0 6
9568: PPUSH
9569: LD_VAR 0 4
9573: PPUSH
9574: CALL_OW 74
9578: PPUSH
9579: CALL_OW 115
9583: GO 9617
// if not IsInArea ( i , defenseArea ) then
9585: LD_VAR 0 4
9589: PPUSH
9590: LD_VAR 0 2
9594: PPUSH
9595: CALL_OW 308
9599: NOT
9600: IFFALSE 9617
// ComMoveXY ( i , 63 , 75 ) ;
9602: LD_VAR 0 4
9606: PPUSH
9607: LD_INT 63
9609: PPUSH
9610: LD_INT 75
9612: PPUSH
9613: CALL_OW 111
// end ;
9617: GO 9464
9619: POP
9620: POP
// end ;
9621: LD_VAR 0 3
9625: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9626: LD_INT 0
9628: PPUSH
9629: PPUSH
9630: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9631: LD_INT 22
9633: PUSH
9634: LD_VAR 0 1
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 21
9645: PUSH
9646: LD_INT 2
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PPUSH
9657: CALL_OW 69
9661: PUSH
9662: LD_VAR 0 3
9666: LESSEQUAL
9667: IFFALSE 9775
// begin for i = 1 to vehCount do
9669: LD_ADDR_VAR 0 9
9673: PUSH
9674: DOUBLE
9675: LD_INT 1
9677: DEC
9678: ST_TO_ADDR
9679: LD_VAR 0 3
9683: PUSH
9684: FOR_TO
9685: IFFALSE 9773
// begin weapon = weaponTab [ i ] ;
9687: LD_ADDR_VAR 0 10
9691: PUSH
9692: LD_VAR 0 4
9696: PUSH
9697: LD_VAR 0 9
9701: ARRAY
9702: ST_TO_ADDR
// if weapon = 46 then
9703: LD_VAR 0 10
9707: PUSH
9708: LD_INT 46
9710: EQUAL
9711: IFFALSE 9742
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9713: LD_VAR 0 2
9717: PPUSH
9718: LD_INT 24
9720: PPUSH
9721: LD_VAR 0 5
9725: PPUSH
9726: LD_VAR 0 6
9730: PPUSH
9731: LD_VAR 0 10
9735: PPUSH
9736: CALL_OW 185
// end else
9740: GO 9771
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9742: LD_VAR 0 2
9746: PPUSH
9747: LD_VAR 0 7
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: LD_VAR 0 6
9761: PPUSH
9762: LD_VAR 0 10
9766: PPUSH
9767: CALL_OW 185
// end ; end ;
9771: GO 9684
9773: POP
9774: POP
// end ; end ;
9775: LD_VAR 0 8
9779: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9780: LD_INT 0
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9786: LD_ADDR_VAR 0 8
9790: PUSH
9791: LD_INT 22
9793: PUSH
9794: LD_VAR 0 1
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 21
9805: PUSH
9806: LD_INT 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 3
9815: PUSH
9816: LD_INT 24
9818: PUSH
9819: LD_INT 650
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// if damageVehicles > 0 then
9840: LD_VAR 0 8
9844: PUSH
9845: LD_INT 0
9847: GREATER
9848: IFFALSE 9869
// ComMoveXY ( damageVehicles , repX , repY ) ;
9850: LD_VAR 0 8
9854: PPUSH
9855: LD_VAR 0 3
9859: PPUSH
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9869: LD_VAR 0 8
9873: PPUSH
9874: LD_INT 95
9876: PUSH
9877: LD_VAR 0 2
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: LD_INT 58
9891: PUSH
9892: EMPTY
9893: LIST
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 72
9907: PUSH
9908: LD_INT 0
9910: GREATER
9911: IFFALSE 9978
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9913: LD_ADDR_VAR 0 6
9917: PUSH
9918: LD_VAR 0 8
9922: PPUSH
9923: LD_INT 95
9925: PUSH
9926: LD_VAR 0 2
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 3
9937: PUSH
9938: LD_INT 58
9940: PUSH
9941: EMPTY
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 72
9956: PUSH
9957: FOR_IN
9958: IFFALSE 9976
// ComExitVehicle ( UnitsInside ( i ) ) ;
9960: LD_VAR 0 6
9964: PPUSH
9965: CALL_OW 313
9969: PPUSH
9970: CALL_OW 121
9974: GO 9957
9976: POP
9977: POP
// end ;
9978: LD_VAR 0 5
9982: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9983: LD_INT 0
9985: PPUSH
9986: PPUSH
9987: PPUSH
9988: PPUSH
9989: PPUSH
9990: PPUSH
9991: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9992: LD_ADDR_VAR 0 8
9996: PUSH
9997: LD_INT 22
9999: PUSH
10000: LD_VAR 0 1
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 21
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 24
10021: PUSH
10022: LD_INT 250
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: LD_INT 3
10031: PUSH
10032: LD_INT 58
10034: PUSH
10035: EMPTY
10036: LIST
10037: PUSH
10038: LD_INT 2
10040: PUSH
10041: LD_INT 34
10043: PUSH
10044: LD_INT 43
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 34
10053: PUSH
10054: LD_INT 44
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 34
10063: PUSH
10064: LD_INT 46
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: PPUSH
10088: CALL_OW 69
10092: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10093: LD_INT 22
10095: PUSH
10096: LD_VAR 0 1
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 21
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 24
10117: PUSH
10118: LD_INT 1000
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 3
10127: PUSH
10128: LD_INT 58
10130: PUSH
10131: EMPTY
10132: LIST
10133: PUSH
10134: LD_INT 2
10136: PUSH
10137: LD_INT 34
10139: PUSH
10140: LD_INT 43
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 34
10149: PUSH
10150: LD_INT 44
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 34
10159: PUSH
10160: LD_INT 46
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 69
10188: PUSH
10189: LD_INT 5
10191: PUSH
10192: LD_INT 6
10194: PUSH
10195: LD_INT 7
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: PUSH
10203: LD_OWVAR 67
10207: ARRAY
10208: GREATEREQUAL
10209: IFFALSE 10774
// repeat wait ( 0 0$1 ) ;
10211: LD_INT 35
10213: PPUSH
10214: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10218: LD_ADDR_VAR 0 8
10222: PUSH
10223: LD_INT 22
10225: PUSH
10226: LD_VAR 0 1
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 21
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 24
10247: PUSH
10248: LD_INT 250
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 2
10257: PUSH
10258: LD_INT 34
10260: PUSH
10261: LD_INT 43
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 34
10270: PUSH
10271: LD_INT 44
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 34
10280: PUSH
10281: LD_INT 46
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 58
10299: PUSH
10300: EMPTY
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: PPUSH
10314: CALL_OW 69
10318: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10319: LD_INT 22
10321: PUSH
10322: LD_VAR 0 1
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 95
10333: PUSH
10334: LD_VAR 0 2
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PPUSH
10347: CALL_OW 69
10351: NOT
10352: PUSH
10353: LD_VAR 0 11
10357: PUSH
10358: LD_INT 0
10360: EQUAL
10361: AND
10362: IFFALSE 10417
// for i := 1 to wayX do
10364: LD_ADDR_VAR 0 6
10368: PUSH
10369: DOUBLE
10370: LD_INT 1
10372: DEC
10373: ST_TO_ADDR
10374: LD_VAR 0 3
10378: PUSH
10379: FOR_TO
10380: IFFALSE 10415
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10382: LD_VAR 0 8
10386: PPUSH
10387: LD_VAR 0 3
10391: PUSH
10392: LD_VAR 0 6
10396: ARRAY
10397: PPUSH
10398: LD_VAR 0 4
10402: PUSH
10403: LD_VAR 0 6
10407: ARRAY
10408: PPUSH
10409: CALL_OW 114
10413: GO 10379
10415: POP
10416: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10417: LD_INT 22
10419: PUSH
10420: LD_VAR 0 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 95
10431: PUSH
10432: LD_VAR 0 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: IFFALSE 10673
// begin seeEnemy = 1 ;
10451: LD_ADDR_VAR 0 11
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// for j in vehiclesOK do
10459: LD_ADDR_VAR 0 7
10463: PUSH
10464: LD_VAR 0 8
10468: PUSH
10469: FOR_IN
10470: IFFALSE 10671
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10472: LD_ADDR_VAR 0 9
10476: PUSH
10477: LD_INT 81
10479: PUSH
10480: LD_VAR 0 1
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 101
10491: PUSH
10492: LD_INT 1
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PPUSH
10503: CALL_OW 69
10507: PPUSH
10508: LD_VAR 0 7
10512: PPUSH
10513: CALL_OW 74
10517: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10518: LD_ADDR_VAR 0 10
10522: PUSH
10523: LD_INT 81
10525: PUSH
10526: LD_VAR 0 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 101
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 2
10547: PUSH
10548: LD_INT 59
10550: PUSH
10551: EMPTY
10552: LIST
10553: PUSH
10554: LD_INT 21
10556: PUSH
10557: LD_INT 1
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 21
10566: PUSH
10567: LD_INT 2
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: PPUSH
10588: CALL_OW 69
10592: PPUSH
10593: LD_VAR 0 7
10597: PPUSH
10598: CALL_OW 74
10602: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10603: LD_VAR 0 7
10607: PPUSH
10608: LD_VAR 0 9
10612: PPUSH
10613: CALL_OW 296
10617: PUSH
10618: LD_INT 8
10620: PLUS
10621: PUSH
10622: LD_VAR 0 7
10626: PPUSH
10627: LD_VAR 0 10
10631: PPUSH
10632: CALL_OW 296
10636: LESS
10637: IFFALSE 10655
// ComAttackUnit ( j , target1 ) else
10639: LD_VAR 0 7
10643: PPUSH
10644: LD_VAR 0 9
10648: PPUSH
10649: CALL_OW 115
10653: GO 10669
// ComAttackUnit ( j , target2 ) ;
10655: LD_VAR 0 7
10659: PPUSH
10660: LD_VAR 0 10
10664: PPUSH
10665: CALL_OW 115
// end ;
10669: GO 10469
10671: POP
10672: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10673: LD_INT 22
10675: PUSH
10676: LD_VAR 0 1
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 21
10687: PUSH
10688: LD_INT 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 24
10697: PUSH
10698: LD_INT 250
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: LD_INT 34
10710: PUSH
10711: LD_INT 43
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 34
10720: PUSH
10721: LD_INT 44
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 34
10730: PUSH
10731: LD_INT 46
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 58
10749: PUSH
10750: EMPTY
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: PPUSH
10764: CALL_OW 69
10768: PUSH
10769: LD_INT 0
10771: EQUAL
10772: IFFALSE 10211
// seeEnemy = 0 ;
10774: LD_ADDR_VAR 0 11
10778: PUSH
10779: LD_INT 0
10781: ST_TO_ADDR
// end ;
10782: LD_VAR 0 5
10786: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10787: LD_INT 0
10789: PPUSH
10790: PPUSH
10791: PPUSH
10792: PPUSH
10793: PPUSH
10794: PPUSH
// repeat wait ( 0 0$1 ) ;
10795: LD_INT 35
10797: PPUSH
10798: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10802: LD_ADDR_VAR 0 7
10806: PUSH
10807: LD_INT 22
10809: PUSH
10810: LD_VAR 0 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 21
10821: PUSH
10822: LD_INT 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 24
10831: PUSH
10832: LD_INT 651
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PPUSH
10844: CALL_OW 69
10848: ST_TO_ADDR
// for j in vehiclesOK do
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_VAR 0 7
10858: PUSH
10859: FOR_IN
10860: IFFALSE 11061
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10862: LD_ADDR_VAR 0 5
10866: PUSH
10867: LD_INT 81
10869: PUSH
10870: LD_VAR 0 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 101
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PPUSH
10893: CALL_OW 69
10897: PPUSH
10898: LD_VAR 0 4
10902: PPUSH
10903: CALL_OW 74
10907: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10908: LD_ADDR_VAR 0 6
10912: PUSH
10913: LD_INT 81
10915: PUSH
10916: LD_VAR 0 1
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 101
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 2
10937: PUSH
10938: LD_INT 59
10940: PUSH
10941: EMPTY
10942: LIST
10943: PUSH
10944: LD_INT 21
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 21
10956: PUSH
10957: LD_INT 2
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: PUSH
10975: EMPTY
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: PPUSH
10983: LD_VAR 0 4
10987: PPUSH
10988: CALL_OW 74
10992: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10993: LD_VAR 0 4
10997: PPUSH
10998: LD_VAR 0 5
11002: PPUSH
11003: CALL_OW 296
11007: PUSH
11008: LD_INT 8
11010: PLUS
11011: PUSH
11012: LD_VAR 0 4
11016: PPUSH
11017: LD_VAR 0 6
11021: PPUSH
11022: CALL_OW 296
11026: LESS
11027: IFFALSE 11045
// ComAttackUnit ( j , target1 ) else
11029: LD_VAR 0 4
11033: PPUSH
11034: LD_VAR 0 5
11038: PPUSH
11039: CALL_OW 115
11043: GO 11059
// ComAttackUnit ( j , target2 ) ;
11045: LD_VAR 0 4
11049: PPUSH
11050: LD_VAR 0 6
11054: PPUSH
11055: CALL_OW 115
// end ;
11059: GO 10859
11061: POP
11062: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11063: LD_INT 22
11065: PUSH
11066: LD_VAR 0 1
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 21
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 24
11087: PUSH
11088: LD_INT 250
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: PUSH
11105: LD_INT 0
11107: EQUAL
11108: IFFALSE 10795
// end ;
11110: LD_VAR 0 2
11114: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11115: LD_INT 0
11117: PPUSH
11118: PPUSH
11119: PPUSH
11120: PPUSH
11121: PPUSH
11122: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11123: LD_ADDR_VAR 0 8
11127: PUSH
11128: LD_VAR 0 2
11132: PPUSH
11133: CALL_OW 313
11137: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11138: LD_ADDR_VAR 0 9
11142: PUSH
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_INT 22
11150: PUSH
11151: LD_VAR 0 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 25
11162: PUSH
11163: LD_INT 2
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 24
11172: PUSH
11173: LD_INT 750
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: LD_INT 54
11185: PUSH
11186: EMPTY
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11204: LD_ADDR_VAR 0 6
11208: PUSH
11209: LD_VAR 0 3
11213: PPUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 21
11228: PUSH
11229: LD_INT 3
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 24
11241: PUSH
11242: LD_INT 1000
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: PPUSH
11261: CALL_OW 70
11265: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11266: LD_VAR 0 6
11270: NOT
11271: PUSH
11272: LD_INT 22
11274: PUSH
11275: LD_VAR 0 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 25
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 24
11296: PUSH
11297: LD_INT 250
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: PPUSH
11309: CALL_OW 69
11313: NOT
11314: AND
11315: IFFALSE 11319
// exit ;
11317: GO 11516
// if buildings_list > 0 and engineerOkInside then
11319: LD_VAR 0 6
11323: PUSH
11324: LD_INT 0
11326: GREATER
11327: PUSH
11328: LD_VAR 0 8
11332: AND
11333: IFFALSE 11359
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11335: LD_VAR 0 8
11339: PPUSH
11340: LD_INT 25
11342: PUSH
11343: LD_INT 2
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PPUSH
11350: CALL_OW 72
11354: PPUSH
11355: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11359: LD_VAR 0 6
11363: PUSH
11364: LD_INT 0
11366: GREATER
11367: PUSH
11368: LD_VAR 0 9
11372: PUSH
11373: LD_INT 0
11375: GREATER
11376: AND
11377: IFFALSE 11397
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11379: LD_VAR 0 9
11383: PPUSH
11384: LD_VAR 0 6
11388: PUSH
11389: LD_INT 1
11391: ARRAY
11392: PPUSH
11393: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11397: LD_VAR 0 6
11401: PUSH
11402: LD_INT 0
11404: EQUAL
11405: PUSH
11406: LD_VAR 0 4
11410: PUSH
11411: LD_INT 0
11413: EQUAL
11414: AND
11415: PUSH
11416: LD_VAR 0 9
11420: PUSH
11421: LD_INT 0
11423: GREATER
11424: AND
11425: IFFALSE 11441
// ComEnterUnit ( engineerOkOutside , building ) ;
11427: LD_VAR 0 9
11431: PPUSH
11432: LD_VAR 0 2
11436: PPUSH
11437: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11441: LD_VAR 0 9
11445: PUSH
11446: LD_INT 0
11448: GREATER
11449: PUSH
11450: LD_VAR 0 6
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: AND
11459: PUSH
11460: LD_VAR 0 4
11464: PUSH
11465: LD_INT 0
11467: GREATER
11468: AND
11469: IFFALSE 11516
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11471: LD_VAR 0 9
11475: PPUSH
11476: LD_VAR 0 4
11480: PUSH
11481: LD_INT 1
11483: ARRAY
11484: PPUSH
11485: LD_VAR 0 4
11489: PUSH
11490: LD_INT 2
11492: ARRAY
11493: PPUSH
11494: LD_VAR 0 4
11498: PUSH
11499: LD_INT 3
11501: ARRAY
11502: PPUSH
11503: LD_VAR 0 4
11507: PUSH
11508: LD_INT 4
11510: ARRAY
11511: PPUSH
11512: CALL_OW 145
// end ;
11516: LD_VAR 0 5
11520: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11521: LD_INT 0
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11532: LD_ADDR_VAR 0 6
11536: PUSH
11537: LD_INT 22
11539: PUSH
11540: LD_VAR 0 1
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 25
11551: PUSH
11552: LD_INT 4
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 23
11561: PUSH
11562: LD_INT 2
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 24
11571: PUSH
11572: LD_INT 251
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11590: LD_ADDR_VAR 0 7
11594: PUSH
11595: LD_VAR 0 3
11599: PPUSH
11600: LD_INT 22
11602: PUSH
11603: LD_VAR 0 1
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 23
11614: PUSH
11615: LD_INT 2
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 4
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 50
11634: PUSH
11635: EMPTY
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 70
11648: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11649: LD_ADDR_VAR 0 10
11653: PUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 22
11661: PUSH
11662: LD_VAR 0 1
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 21
11673: PUSH
11674: LD_INT 1
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: LD_INT 25
11686: PUSH
11687: LD_INT 3
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 3
11700: PUSH
11701: LD_INT 24
11703: PUSH
11704: LD_INT 750
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL_OW 70
11725: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11726: LD_ADDR_VAR 0 11
11730: PUSH
11731: LD_VAR 0 2
11735: PPUSH
11736: LD_INT 22
11738: PUSH
11739: LD_VAR 0 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: LD_INT 21
11750: PUSH
11751: LD_INT 1
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 3
11760: PUSH
11761: LD_INT 25
11763: PUSH
11764: LD_INT 3
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: LD_INT 24
11780: PUSH
11781: LD_INT 1000
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 70
11802: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11803: LD_VAR 0 10
11807: NOT
11808: PUSH
11809: LD_VAR 0 11
11813: NOT
11814: AND
11815: PUSH
11816: LD_VAR 0 6
11820: NOT
11821: AND
11822: IFFALSE 11826
// exit ;
11824: GO 12060
// if damageUnits > 0 and sci_list > 0 then
11826: LD_VAR 0 10
11830: PUSH
11831: LD_INT 0
11833: GREATER
11834: PUSH
11835: LD_VAR 0 6
11839: PUSH
11840: LD_INT 0
11842: GREATER
11843: AND
11844: IFFALSE 11860
// ComMoveToArea ( damageUnits , healArea ) ;
11846: LD_VAR 0 10
11850: PPUSH
11851: LD_VAR 0 2
11855: PPUSH
11856: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11860: LD_VAR 0 11
11864: PUSH
11865: LD_INT 0
11867: GREATER
11868: PUSH
11869: LD_VAR 0 6
11873: PUSH
11874: LD_INT 0
11876: GREATER
11877: AND
11878: IFFALSE 11889
// ComExitBuilding ( sci_list ) ;
11880: LD_VAR 0 6
11884: PPUSH
11885: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11889: LD_VAR 0 11
11893: PUSH
11894: LD_INT 0
11896: GREATER
11897: PUSH
11898: LD_VAR 0 7
11902: PUSH
11903: LD_INT 0
11905: GREATER
11906: AND
11907: IFFALSE 11927
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11909: LD_VAR 0 7
11913: PPUSH
11914: LD_VAR 0 11
11918: PUSH
11919: LD_INT 1
11921: ARRAY
11922: PPUSH
11923: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11927: LD_VAR 0 10
11931: PUSH
11932: LD_INT 0
11934: EQUAL
11935: PUSH
11936: LD_VAR 0 11
11940: PUSH
11941: LD_INT 0
11943: EQUAL
11944: AND
11945: PUSH
11946: LD_VAR 0 7
11950: PUSH
11951: LD_INT 0
11953: GREATER
11954: AND
11955: IFFALSE 12060
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11957: LD_ADDR_VAR 0 12
11961: PUSH
11962: LD_INT 22
11964: PUSH
11965: LD_VAR 0 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 3
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 8
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12004: LD_ADDR_VAR 0 13
12008: PUSH
12009: LD_INT 1
12011: PPUSH
12012: LD_VAR 0 12
12016: PPUSH
12017: CALL_OW 12
12021: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12022: LD_VAR 0 7
12026: PPUSH
12027: LD_INT 3
12029: PUSH
12030: LD_INT 60
12032: PUSH
12033: EMPTY
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 72
12044: PPUSH
12045: LD_VAR 0 12
12049: PUSH
12050: LD_VAR 0 13
12054: ARRAY
12055: PPUSH
12056: CALL_OW 120
// end ; end ;
12060: LD_VAR 0 5
12064: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12065: LD_INT 0
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
12071: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12072: LD_ADDR_VAR 0 6
12076: PUSH
12077: LD_INT 22
12079: PUSH
12080: LD_VAR 0 1
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 31
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 32
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: LD_INT 33
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 30
12124: PUSH
12125: LD_INT 4
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 30
12134: PUSH
12135: LD_INT 5
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12159: LD_ADDR_VAR 0 7
12163: PUSH
12164: LD_INT 22
12166: PUSH
12167: LD_VAR 0 2
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 3
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 58
12188: PUSH
12189: EMPTY
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12202: LD_VAR 0 6
12206: PUSH
12207: LD_INT 0
12209: GREATER
12210: PUSH
12211: LD_VAR 0 7
12215: PUSH
12216: LD_INT 0
12218: GREATER
12219: AND
12220: IFFALSE 12290
// begin for i in turretsList do
12222: LD_ADDR_VAR 0 4
12226: PUSH
12227: LD_VAR 0 6
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12288
// begin for j in enemyBuildings do
12235: LD_ADDR_VAR 0 5
12239: PUSH
12240: LD_VAR 0 7
12244: PUSH
12245: FOR_IN
12246: IFFALSE 12284
// begin if GetDistUnits ( i , j ) < 20 then
12248: LD_VAR 0 4
12252: PPUSH
12253: LD_VAR 0 5
12257: PPUSH
12258: CALL_OW 296
12262: PUSH
12263: LD_INT 20
12265: LESS
12266: IFFALSE 12282
// begin ComAttackUnit ( i , j ) ;
12268: LD_VAR 0 4
12272: PPUSH
12273: LD_VAR 0 5
12277: PPUSH
12278: CALL_OW 115
// end ; end ;
12282: GO 12245
12284: POP
12285: POP
// end ;
12286: GO 12232
12288: POP
12289: POP
// end ; end ;
12290: LD_VAR 0 3
12294: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12295: LD_INT 0
12297: PPUSH
12298: PPUSH
12299: PPUSH
12300: PPUSH
12301: PPUSH
12302: PPUSH
12303: PPUSH
12304: PPUSH
12305: PPUSH
12306: PPUSH
12307: PPUSH
// for i = 1 to medicCount do
12308: LD_ADDR_VAR 0 14
12312: PUSH
12313: DOUBLE
12314: LD_INT 1
12316: DEC
12317: ST_TO_ADDR
12318: LD_VAR 0 7
12322: PUSH
12323: FOR_TO
12324: IFFALSE 12406
// begin uc_side = side ;
12326: LD_ADDR_OWVAR 20
12330: PUSH
12331: LD_VAR 0 1
12335: ST_TO_ADDR
// uc_nation = nation ;
12336: LD_ADDR_OWVAR 21
12340: PUSH
12341: LD_VAR 0 2
12345: ST_TO_ADDR
// hc_name =  ;
12346: LD_ADDR_OWVAR 26
12350: PUSH
12351: LD_STRING 
12353: ST_TO_ADDR
// hc_gallery =  ;
12354: LD_ADDR_OWVAR 33
12358: PUSH
12359: LD_STRING 
12361: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12362: LD_INT 0
12364: PPUSH
12365: LD_INT 4
12367: PPUSH
12368: LD_VAR 0 8
12372: PPUSH
12373: CALL_OW 380
// un = CreateHuman ;
12377: LD_ADDR_VAR 0 16
12381: PUSH
12382: CALL_OW 44
12386: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12387: LD_VAR 0 16
12391: PPUSH
12392: LD_VAR 0 9
12396: PPUSH
12397: LD_INT 0
12399: PPUSH
12400: CALL_OW 49
// end ;
12404: GO 12323
12406: POP
12407: POP
// for i = 1 to soldierCount do
12408: LD_ADDR_VAR 0 14
12412: PUSH
12413: DOUBLE
12414: LD_INT 1
12416: DEC
12417: ST_TO_ADDR
12418: LD_VAR 0 3
12422: PUSH
12423: FOR_TO
12424: IFFALSE 12506
// begin uc_side = side ;
12426: LD_ADDR_OWVAR 20
12430: PUSH
12431: LD_VAR 0 1
12435: ST_TO_ADDR
// uc_nation = nation ;
12436: LD_ADDR_OWVAR 21
12440: PUSH
12441: LD_VAR 0 2
12445: ST_TO_ADDR
// hc_name =  ;
12446: LD_ADDR_OWVAR 26
12450: PUSH
12451: LD_STRING 
12453: ST_TO_ADDR
// hc_gallery =  ;
12454: LD_ADDR_OWVAR 33
12458: PUSH
12459: LD_STRING 
12461: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12462: LD_INT 0
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: LD_VAR 0 8
12472: PPUSH
12473: CALL_OW 380
// un = CreateHuman ;
12477: LD_ADDR_VAR 0 16
12481: PUSH
12482: CALL_OW 44
12486: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12487: LD_VAR 0 16
12491: PPUSH
12492: LD_VAR 0 9
12496: PPUSH
12497: LD_INT 0
12499: PPUSH
12500: CALL_OW 49
// end ;
12504: GO 12423
12506: POP
12507: POP
// for i = 1 to sniperCount do
12508: LD_ADDR_VAR 0 14
12512: PUSH
12513: DOUBLE
12514: LD_INT 1
12516: DEC
12517: ST_TO_ADDR
12518: LD_VAR 0 4
12522: PUSH
12523: FOR_TO
12524: IFFALSE 12606
// begin uc_side = side ;
12526: LD_ADDR_OWVAR 20
12530: PUSH
12531: LD_VAR 0 1
12535: ST_TO_ADDR
// uc_nation = nation ;
12536: LD_ADDR_OWVAR 21
12540: PUSH
12541: LD_VAR 0 2
12545: ST_TO_ADDR
// hc_name =  ;
12546: LD_ADDR_OWVAR 26
12550: PUSH
12551: LD_STRING 
12553: ST_TO_ADDR
// hc_gallery =  ;
12554: LD_ADDR_OWVAR 33
12558: PUSH
12559: LD_STRING 
12561: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12562: LD_INT 0
12564: PPUSH
12565: LD_INT 5
12567: PPUSH
12568: LD_VAR 0 8
12572: PPUSH
12573: CALL_OW 380
// un = CreateHuman ;
12577: LD_ADDR_VAR 0 16
12581: PUSH
12582: CALL_OW 44
12586: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12587: LD_VAR 0 16
12591: PPUSH
12592: LD_VAR 0 9
12596: PPUSH
12597: LD_INT 0
12599: PPUSH
12600: CALL_OW 49
// end ;
12604: GO 12523
12606: POP
12607: POP
// for i = 1 to bazookCount do
12608: LD_ADDR_VAR 0 14
12612: PUSH
12613: DOUBLE
12614: LD_INT 1
12616: DEC
12617: ST_TO_ADDR
12618: LD_VAR 0 5
12622: PUSH
12623: FOR_TO
12624: IFFALSE 12706
// begin uc_side = side ;
12626: LD_ADDR_OWVAR 20
12630: PUSH
12631: LD_VAR 0 1
12635: ST_TO_ADDR
// uc_nation = nation ;
12636: LD_ADDR_OWVAR 21
12640: PUSH
12641: LD_VAR 0 2
12645: ST_TO_ADDR
// hc_name =  ;
12646: LD_ADDR_OWVAR 26
12650: PUSH
12651: LD_STRING 
12653: ST_TO_ADDR
// hc_gallery =  ;
12654: LD_ADDR_OWVAR 33
12658: PUSH
12659: LD_STRING 
12661: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12662: LD_INT 0
12664: PPUSH
12665: LD_INT 9
12667: PPUSH
12668: LD_VAR 0 8
12672: PPUSH
12673: CALL_OW 380
// un = CreateHuman ;
12677: LD_ADDR_VAR 0 16
12681: PUSH
12682: CALL_OW 44
12686: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12687: LD_VAR 0 16
12691: PPUSH
12692: LD_VAR 0 9
12696: PPUSH
12697: LD_INT 0
12699: PPUSH
12700: CALL_OW 49
// end ;
12704: GO 12623
12706: POP
12707: POP
// for i = 1 to mortalCount do
12708: LD_ADDR_VAR 0 14
12712: PUSH
12713: DOUBLE
12714: LD_INT 1
12716: DEC
12717: ST_TO_ADDR
12718: LD_VAR 0 6
12722: PUSH
12723: FOR_TO
12724: IFFALSE 12806
// begin uc_side = side ;
12726: LD_ADDR_OWVAR 20
12730: PUSH
12731: LD_VAR 0 1
12735: ST_TO_ADDR
// uc_nation = nation ;
12736: LD_ADDR_OWVAR 21
12740: PUSH
12741: LD_VAR 0 2
12745: ST_TO_ADDR
// hc_name =  ;
12746: LD_ADDR_OWVAR 26
12750: PUSH
12751: LD_STRING 
12753: ST_TO_ADDR
// hc_gallery =  ;
12754: LD_ADDR_OWVAR 33
12758: PUSH
12759: LD_STRING 
12761: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12762: LD_INT 0
12764: PPUSH
12765: LD_INT 8
12767: PPUSH
12768: LD_VAR 0 8
12772: PPUSH
12773: CALL_OW 380
// un = CreateHuman ;
12777: LD_ADDR_VAR 0 16
12781: PUSH
12782: CALL_OW 44
12786: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12787: LD_VAR 0 16
12791: PPUSH
12792: LD_VAR 0 9
12796: PPUSH
12797: LD_INT 0
12799: PPUSH
12800: CALL_OW 49
// end ;
12804: GO 12723
12806: POP
12807: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12808: LD_ADDR_VAR 0 19
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_VAR 0 1
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 2
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 1
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 25
12840: PUSH
12841: LD_INT 5
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 25
12850: PUSH
12851: LD_INT 8
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 25
12860: PUSH
12861: LD_INT 9
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PPUSH
12879: CALL_OW 69
12883: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12884: LD_ADDR_VAR 0 18
12888: PUSH
12889: LD_INT 22
12891: PUSH
12892: LD_VAR 0 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 25
12903: PUSH
12904: LD_INT 4
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 69
12919: ST_TO_ADDR
// for i in medic_list do
12920: LD_ADDR_VAR 0 14
12924: PUSH
12925: LD_VAR 0 18
12929: PUSH
12930: FOR_IN
12931: IFFALSE 12949
// ComMoveToArea ( i , healArea ) ;
12933: LD_VAR 0 14
12937: PPUSH
12938: LD_VAR 0 10
12942: PPUSH
12943: CALL_OW 113
12947: GO 12930
12949: POP
12950: POP
// if strategy = 1 then
12951: LD_VAR 0 12
12955: PUSH
12956: LD_INT 1
12958: EQUAL
12959: IFFALSE 13505
// begin repeat wait ( 0 0$3 ) ;
12961: LD_INT 105
12963: PPUSH
12964: CALL_OW 67
// for i in soldiersOK_list do
12968: LD_ADDR_VAR 0 14
12972: PUSH
12973: LD_VAR 0 19
12977: PUSH
12978: FOR_IN
12979: IFFALSE 13043
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12981: LD_VAR 0 14
12985: PPUSH
12986: LD_INT 91
12988: PPUSH
12989: LD_INT 63
12991: PPUSH
12992: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12996: LD_VAR 0 14
13000: PPUSH
13001: LD_INT 101
13003: PPUSH
13004: LD_INT 53
13006: PPUSH
13007: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13011: LD_VAR 0 14
13015: PPUSH
13016: LD_INT 75
13018: PPUSH
13019: LD_INT 23
13021: PPUSH
13022: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13026: LD_VAR 0 14
13030: PPUSH
13031: LD_INT 78
13033: PPUSH
13034: LD_INT 8
13036: PPUSH
13037: CALL_OW 174
// end ;
13041: GO 12978
13043: POP
13044: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13045: LD_INT 12
13047: PPUSH
13048: LD_INT 22
13050: PUSH
13051: LD_VAR 0 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 70
13064: PUSH
13065: LD_INT 2
13067: GREATER
13068: IFFALSE 12961
// repeat wait ( 0 0$1 ) ;
13070: LD_INT 35
13072: PPUSH
13073: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13077: LD_ADDR_VAR 0 17
13081: PUSH
13082: LD_INT 22
13084: PUSH
13085: LD_VAR 0 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 1
13096: PUSH
13097: LD_INT 3
13099: PUSH
13100: LD_INT 24
13102: PUSH
13103: LD_INT 550
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 24
13116: PUSH
13117: LD_INT 250
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PPUSH
13133: CALL_OW 69
13137: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13138: LD_ADDR_VAR 0 19
13142: PUSH
13143: LD_INT 22
13145: PUSH
13146: LD_VAR 0 1
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 25
13170: PUSH
13171: LD_INT 5
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 8
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 9
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 24
13207: PUSH
13208: LD_INT 1000
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if medicCount > 0 then
13225: LD_VAR 0 7
13229: PUSH
13230: LD_INT 0
13232: GREATER
13233: IFFALSE 13307
// begin if damageUnit_list > 0 then
13235: LD_VAR 0 17
13239: PUSH
13240: LD_INT 0
13242: GREATER
13243: IFFALSE 13307
// begin for i in damageUnit_list do
13245: LD_ADDR_VAR 0 14
13249: PUSH
13250: LD_VAR 0 17
13254: PUSH
13255: FOR_IN
13256: IFFALSE 13305
// begin ComMoveToArea ( i , healArea ) ;
13258: LD_VAR 0 14
13262: PPUSH
13263: LD_VAR 0 10
13267: PPUSH
13268: CALL_OW 113
// for j in medic_list do
13272: LD_ADDR_VAR 0 15
13276: PUSH
13277: LD_VAR 0 18
13281: PUSH
13282: FOR_IN
13283: IFFALSE 13301
// AddComHeal ( j , i ) ;
13285: LD_VAR 0 15
13289: PPUSH
13290: LD_VAR 0 14
13294: PPUSH
13295: CALL_OW 188
13299: GO 13282
13301: POP
13302: POP
// end ;
13303: GO 13255
13305: POP
13306: POP
// end ; end ; for i in soldiersOK_list do
13307: LD_ADDR_VAR 0 14
13311: PUSH
13312: LD_VAR 0 19
13316: PUSH
13317: FOR_IN
13318: IFFALSE 13494
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13320: LD_ADDR_VAR 0 22
13324: PUSH
13325: LD_INT 22
13327: PUSH
13328: LD_VAR 0 11
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PPUSH
13337: CALL_OW 69
13341: PPUSH
13342: LD_VAR 0 14
13346: PPUSH
13347: CALL_OW 74
13351: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13352: LD_ADDR_VAR 0 23
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_VAR 0 11
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: LD_INT 59
13374: PUSH
13375: EMPTY
13376: LIST
13377: PUSH
13378: LD_INT 21
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 21
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: PPUSH
13411: CALL_OW 69
13415: PPUSH
13416: LD_VAR 0 14
13420: PPUSH
13421: CALL_OW 74
13425: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13426: LD_VAR 0 14
13430: PPUSH
13431: LD_VAR 0 22
13435: PPUSH
13436: CALL_OW 296
13440: PUSH
13441: LD_INT 6
13443: PLUS
13444: PUSH
13445: LD_VAR 0 14
13449: PPUSH
13450: LD_VAR 0 23
13454: PPUSH
13455: CALL_OW 296
13459: LESS
13460: IFFALSE 13478
// begin ComAttackUnit ( i , target1 ) ;
13462: LD_VAR 0 14
13466: PPUSH
13467: LD_VAR 0 22
13471: PPUSH
13472: CALL_OW 115
// end else
13476: GO 13492
// begin ComAttackUnit ( i , target2 ) ;
13478: LD_VAR 0 14
13482: PPUSH
13483: LD_VAR 0 23
13487: PPUSH
13488: CALL_OW 115
// end ; end ;
13492: GO 13317
13494: POP
13495: POP
// until soldiersOK_list = [ ] ;
13496: LD_VAR 0 19
13500: PUSH
13501: EMPTY
13502: EQUAL
13503: IFFALSE 13070
// end ; if strategy = 2 then
13505: LD_VAR 0 12
13509: PUSH
13510: LD_INT 2
13512: EQUAL
13513: IFFALSE 14029
// begin repeat wait ( 0 0$1 ) ;
13515: LD_INT 35
13517: PPUSH
13518: CALL_OW 67
// for i in soldiersOK_list do
13522: LD_ADDR_VAR 0 14
13526: PUSH
13527: LD_VAR 0 19
13531: PUSH
13532: FOR_IN
13533: IFFALSE 13567
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13535: LD_VAR 0 14
13539: PPUSH
13540: LD_INT 91
13542: PPUSH
13543: LD_INT 63
13545: PPUSH
13546: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13550: LD_VAR 0 14
13554: PPUSH
13555: LD_INT 75
13557: PPUSH
13558: LD_INT 33
13560: PPUSH
13561: CALL_OW 174
// end ;
13565: GO 13532
13567: POP
13568: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13569: LD_INT 13
13571: PPUSH
13572: LD_INT 22
13574: PUSH
13575: LD_VAR 0 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 70
13588: PUSH
13589: LD_INT 2
13591: GREATER
13592: IFFALSE 13515
// repeat wait ( 0 0$3 ) ;
13594: LD_INT 105
13596: PPUSH
13597: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13601: LD_ADDR_VAR 0 17
13605: PUSH
13606: LD_INT 22
13608: PUSH
13609: LD_VAR 0 1
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 1
13620: PUSH
13621: LD_INT 3
13623: PUSH
13624: LD_INT 24
13626: PUSH
13627: LD_INT 550
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: LD_INT 24
13640: PUSH
13641: LD_INT 250
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13662: LD_ADDR_VAR 0 19
13666: PUSH
13667: LD_INT 22
13669: PUSH
13670: LD_VAR 0 1
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: LD_INT 25
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 25
13694: PUSH
13695: LD_INT 5
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 25
13704: PUSH
13705: LD_INT 8
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 25
13714: PUSH
13715: LD_INT 9
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 24
13731: PUSH
13732: LD_INT 1000
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if medicCount > 0 then
13749: LD_VAR 0 7
13753: PUSH
13754: LD_INT 0
13756: GREATER
13757: IFFALSE 13831
// begin if damageUnit_list > 0 then
13759: LD_VAR 0 17
13763: PUSH
13764: LD_INT 0
13766: GREATER
13767: IFFALSE 13831
// begin for i in damageUnit_list do
13769: LD_ADDR_VAR 0 14
13773: PUSH
13774: LD_VAR 0 17
13778: PUSH
13779: FOR_IN
13780: IFFALSE 13829
// begin ComMoveToArea ( i , healArea ) ;
13782: LD_VAR 0 14
13786: PPUSH
13787: LD_VAR 0 10
13791: PPUSH
13792: CALL_OW 113
// for j in medic_list do
13796: LD_ADDR_VAR 0 15
13800: PUSH
13801: LD_VAR 0 18
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13825
// AddComHeal ( j , i ) ;
13809: LD_VAR 0 15
13813: PPUSH
13814: LD_VAR 0 14
13818: PPUSH
13819: CALL_OW 188
13823: GO 13806
13825: POP
13826: POP
// end ;
13827: GO 13779
13829: POP
13830: POP
// end ; end ; for i in soldiersOK_list do
13831: LD_ADDR_VAR 0 14
13835: PUSH
13836: LD_VAR 0 19
13840: PUSH
13841: FOR_IN
13842: IFFALSE 14018
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13844: LD_ADDR_VAR 0 22
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_VAR 0 11
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 69
13865: PPUSH
13866: LD_VAR 0 14
13870: PPUSH
13871: CALL_OW 74
13875: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13876: LD_ADDR_VAR 0 23
13880: PUSH
13881: LD_INT 22
13883: PUSH
13884: LD_VAR 0 11
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: LD_INT 59
13898: PUSH
13899: EMPTY
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 21
13914: PUSH
13915: LD_INT 2
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: PPUSH
13935: CALL_OW 69
13939: PPUSH
13940: LD_VAR 0 14
13944: PPUSH
13945: CALL_OW 74
13949: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13950: LD_VAR 0 14
13954: PPUSH
13955: LD_VAR 0 22
13959: PPUSH
13960: CALL_OW 296
13964: PUSH
13965: LD_INT 6
13967: PLUS
13968: PUSH
13969: LD_VAR 0 14
13973: PPUSH
13974: LD_VAR 0 23
13978: PPUSH
13979: CALL_OW 296
13983: LESS
13984: IFFALSE 14002
// begin ComAttackUnit ( i , target1 ) ;
13986: LD_VAR 0 14
13990: PPUSH
13991: LD_VAR 0 22
13995: PPUSH
13996: CALL_OW 115
// end else
14000: GO 14016
// begin ComAttackUnit ( i , target2 ) ;
14002: LD_VAR 0 14
14006: PPUSH
14007: LD_VAR 0 23
14011: PPUSH
14012: CALL_OW 115
// end ; end ;
14016: GO 13841
14018: POP
14019: POP
// until soldiersOK_list = [ ] ;
14020: LD_VAR 0 19
14024: PUSH
14025: EMPTY
14026: EQUAL
14027: IFFALSE 13594
// end ; if strategy = 3 then
14029: LD_VAR 0 12
14033: PUSH
14034: LD_INT 3
14036: EQUAL
14037: IFFALSE 14583
// begin repeat wait ( 0 0$3 ) ;
14039: LD_INT 105
14041: PPUSH
14042: CALL_OW 67
// for i in soldiersOK_list do
14046: LD_ADDR_VAR 0 14
14050: PUSH
14051: LD_VAR 0 19
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14121
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14059: LD_VAR 0 14
14063: PPUSH
14064: LD_INT 63
14066: PPUSH
14067: LD_INT 71
14069: PPUSH
14070: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14074: LD_VAR 0 14
14078: PPUSH
14079: LD_INT 35
14081: PPUSH
14082: LD_INT 44
14084: PPUSH
14085: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14089: LD_VAR 0 14
14093: PPUSH
14094: LD_INT 23
14096: PPUSH
14097: LD_INT 18
14099: PPUSH
14100: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14104: LD_VAR 0 14
14108: PPUSH
14109: LD_INT 26
14111: PPUSH
14112: LD_INT 12
14114: PPUSH
14115: CALL_OW 174
// end ;
14119: GO 14056
14121: POP
14122: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14123: LD_INT 14
14125: PPUSH
14126: LD_INT 22
14128: PUSH
14129: LD_VAR 0 1
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PPUSH
14138: CALL_OW 70
14142: PUSH
14143: LD_INT 2
14145: GREATER
14146: IFFALSE 14039
// repeat wait ( 0 0$1 ) ;
14148: LD_INT 35
14150: PPUSH
14151: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14155: LD_ADDR_VAR 0 17
14159: PUSH
14160: LD_INT 22
14162: PUSH
14163: LD_VAR 0 1
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 1
14174: PUSH
14175: LD_INT 3
14177: PUSH
14178: LD_INT 24
14180: PUSH
14181: LD_INT 550
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 24
14194: PUSH
14195: LD_INT 250
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14216: LD_ADDR_VAR 0 19
14220: PUSH
14221: LD_INT 22
14223: PUSH
14224: LD_VAR 0 1
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: LD_INT 25
14238: PUSH
14239: LD_INT 1
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 25
14248: PUSH
14249: LD_INT 5
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 25
14258: PUSH
14259: LD_INT 8
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 25
14268: PUSH
14269: LD_INT 9
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 24
14285: PUSH
14286: LD_INT 1000
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: PPUSH
14298: CALL_OW 69
14302: ST_TO_ADDR
// if medicCount > 0 then
14303: LD_VAR 0 7
14307: PUSH
14308: LD_INT 0
14310: GREATER
14311: IFFALSE 14385
// begin if damageUnit_list > 0 then
14313: LD_VAR 0 17
14317: PUSH
14318: LD_INT 0
14320: GREATER
14321: IFFALSE 14385
// begin for i in damageUnit_list do
14323: LD_ADDR_VAR 0 14
14327: PUSH
14328: LD_VAR 0 17
14332: PUSH
14333: FOR_IN
14334: IFFALSE 14383
// begin ComMoveToArea ( i , healArea ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 10
14345: PPUSH
14346: CALL_OW 113
// for j in medic_list do
14350: LD_ADDR_VAR 0 15
14354: PUSH
14355: LD_VAR 0 18
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14379
// AddComHeal ( j , i ) ;
14363: LD_VAR 0 15
14367: PPUSH
14368: LD_VAR 0 14
14372: PPUSH
14373: CALL_OW 188
14377: GO 14360
14379: POP
14380: POP
// end ;
14381: GO 14333
14383: POP
14384: POP
// end ; end ; for i in soldiersOK_list do
14385: LD_ADDR_VAR 0 14
14389: PUSH
14390: LD_VAR 0 19
14394: PUSH
14395: FOR_IN
14396: IFFALSE 14572
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14398: LD_ADDR_VAR 0 22
14402: PUSH
14403: LD_INT 22
14405: PUSH
14406: LD_VAR 0 11
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: PPUSH
14420: LD_VAR 0 14
14424: PPUSH
14425: CALL_OW 74
14429: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14430: LD_ADDR_VAR 0 23
14434: PUSH
14435: LD_INT 22
14437: PUSH
14438: LD_VAR 0 11
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 2
14449: PUSH
14450: LD_INT 59
14452: PUSH
14453: EMPTY
14454: LIST
14455: PUSH
14456: LD_INT 21
14458: PUSH
14459: LD_INT 1
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 21
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: EMPTY
14487: LIST
14488: PPUSH
14489: CALL_OW 69
14493: PPUSH
14494: LD_VAR 0 14
14498: PPUSH
14499: CALL_OW 74
14503: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14504: LD_VAR 0 14
14508: PPUSH
14509: LD_VAR 0 22
14513: PPUSH
14514: CALL_OW 296
14518: PUSH
14519: LD_INT 6
14521: PLUS
14522: PUSH
14523: LD_VAR 0 14
14527: PPUSH
14528: LD_VAR 0 23
14532: PPUSH
14533: CALL_OW 296
14537: LESS
14538: IFFALSE 14556
// begin ComAttackUnit ( i , target1 ) ;
14540: LD_VAR 0 14
14544: PPUSH
14545: LD_VAR 0 22
14549: PPUSH
14550: CALL_OW 115
// end else
14554: GO 14570
// begin ComAttackUnit ( i , target2 ) ;
14556: LD_VAR 0 14
14560: PPUSH
14561: LD_VAR 0 23
14565: PPUSH
14566: CALL_OW 115
// end ; end ;
14570: GO 14395
14572: POP
14573: POP
// until soldiersOK_list = [ ] ;
14574: LD_VAR 0 19
14578: PUSH
14579: EMPTY
14580: EQUAL
14581: IFFALSE 14148
// end ; end ;
14583: LD_VAR 0 13
14587: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14588: LD_INT 0
14590: PPUSH
14591: PPUSH
14592: PPUSH
14593: PPUSH
14594: PPUSH
14595: PPUSH
14596: PPUSH
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
// amChassisTab = [ ] ;
14601: LD_ADDR_VAR 0 19
14605: PUSH
14606: EMPTY
14607: ST_TO_ADDR
// arChassisTab = [ ] ;
14608: LD_ADDR_VAR 0 18
14612: PUSH
14613: EMPTY
14614: ST_TO_ADDR
// ruChassisTab = [ ] ;
14615: LD_ADDR_VAR 0 17
14619: PUSH
14620: EMPTY
14621: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14622: LD_INT 35
14624: PPUSH
14625: CALL_OW 67
// if nation = 1 then
14629: LD_VAR 0 5
14633: PUSH
14634: LD_INT 1
14636: EQUAL
14637: IFFALSE 15128
// begin uc_side = side ;
14639: LD_ADDR_OWVAR 20
14643: PUSH
14644: LD_VAR 0 2
14648: ST_TO_ADDR
// uc_nation = nation ;
14649: LD_ADDR_OWVAR 21
14653: PUSH
14654: LD_VAR 0 5
14658: ST_TO_ADDR
// vc_engine = vehengine ;
14659: LD_ADDR_OWVAR 39
14663: PUSH
14664: LD_VAR 0 6
14668: ST_TO_ADDR
// vc_control = vehcontrol ;
14669: LD_ADDR_OWVAR 38
14673: PUSH
14674: LD_VAR 0 7
14678: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14679: LD_ADDR_OWVAR 40
14683: PUSH
14684: LD_VAR 0 10
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_VAR 0 10
14696: PPUSH
14697: CALL_OW 12
14701: ARRAY
14702: ST_TO_ADDR
// for j = 1 to AMWeapon do
14703: LD_ADDR_VAR 0 14
14707: PUSH
14708: DOUBLE
14709: LD_INT 1
14711: DEC
14712: ST_TO_ADDR
14713: LD_VAR 0 10
14717: PUSH
14718: FOR_TO
14719: IFFALSE 15020
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14721: LD_VAR 0 10
14725: PUSH
14726: LD_VAR 0 14
14730: ARRAY
14731: PUSH
14732: LD_INT 2
14734: EQUAL
14735: PUSH
14736: LD_VAR 0 10
14740: PUSH
14741: LD_VAR 0 14
14745: ARRAY
14746: PUSH
14747: LD_INT 3
14749: EQUAL
14750: OR
14751: IFFALSE 14804
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14753: LD_ADDR_VAR 0 19
14757: PUSH
14758: LD_INT 1
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: LD_INT 3
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14780: LD_ADDR_OWVAR 37
14784: PUSH
14785: LD_VAR 0 19
14789: PUSH
14790: LD_INT 1
14792: PPUSH
14793: LD_VAR 0 19
14797: PPUSH
14798: CALL_OW 12
14802: ARRAY
14803: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14804: LD_VAR 0 10
14808: PUSH
14809: LD_VAR 0 14
14813: ARRAY
14814: PUSH
14815: LD_INT 4
14817: EQUAL
14818: PUSH
14819: LD_VAR 0 10
14823: PUSH
14824: LD_VAR 0 14
14828: ARRAY
14829: PUSH
14830: LD_INT 5
14832: EQUAL
14833: OR
14834: PUSH
14835: LD_VAR 0 10
14839: PUSH
14840: LD_VAR 0 14
14844: ARRAY
14845: PUSH
14846: LD_INT 9
14848: EQUAL
14849: OR
14850: PUSH
14851: LD_VAR 0 10
14855: PUSH
14856: LD_VAR 0 14
14860: ARRAY
14861: PUSH
14862: LD_INT 11
14864: EQUAL
14865: OR
14866: PUSH
14867: LD_VAR 0 10
14871: PUSH
14872: LD_VAR 0 14
14876: ARRAY
14877: PUSH
14878: LD_INT 7
14880: EQUAL
14881: OR
14882: IFFALSE 14931
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14884: LD_ADDR_VAR 0 19
14888: PUSH
14889: LD_INT 2
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14907: LD_ADDR_OWVAR 37
14911: PUSH
14912: LD_VAR 0 19
14916: PUSH
14917: LD_INT 1
14919: PPUSH
14920: LD_VAR 0 19
14924: PPUSH
14925: CALL_OW 12
14929: ARRAY
14930: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14931: LD_VAR 0 10
14935: PUSH
14936: LD_VAR 0 14
14940: ARRAY
14941: PUSH
14942: LD_INT 8
14944: EQUAL
14945: PUSH
14946: LD_VAR 0 10
14950: PUSH
14951: LD_VAR 0 14
14955: ARRAY
14956: PUSH
14957: LD_INT 6
14959: EQUAL
14960: OR
14961: PUSH
14962: LD_VAR 0 10
14966: PUSH
14967: LD_VAR 0 14
14971: ARRAY
14972: PUSH
14973: LD_INT 10
14975: EQUAL
14976: OR
14977: IFFALSE 15018
// begin amChassisTab = [ 4 , 5 ] ;
14979: LD_ADDR_VAR 0 19
14983: PUSH
14984: LD_INT 4
14986: PUSH
14987: LD_INT 5
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14994: LD_ADDR_OWVAR 37
14998: PUSH
14999: LD_VAR 0 19
15003: PUSH
15004: LD_INT 1
15006: PPUSH
15007: LD_VAR 0 19
15011: PPUSH
15012: CALL_OW 12
15016: ARRAY
15017: ST_TO_ADDR
// end ; end ;
15018: GO 14718
15020: POP
15021: POP
// veh = CreateVehicle ;
15022: LD_ADDR_VAR 0 16
15026: PUSH
15027: CALL_OW 45
15031: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15032: LD_VAR 0 16
15036: PPUSH
15037: LD_VAR 0 1
15041: PPUSH
15042: LD_INT 0
15044: PPUSH
15045: CALL_OW 49
// if vehControl = 1 then
15049: LD_VAR 0 7
15053: PUSH
15054: LD_INT 1
15056: EQUAL
15057: IFFALSE 15114
// begin hc_gallery =  ;
15059: LD_ADDR_OWVAR 33
15063: PUSH
15064: LD_STRING 
15066: ST_TO_ADDR
// hc_name =  ;
15067: LD_ADDR_OWVAR 26
15071: PUSH
15072: LD_STRING 
15074: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15075: LD_INT 0
15077: PPUSH
15078: LD_INT 3
15080: PPUSH
15081: LD_VAR 0 4
15085: PPUSH
15086: CALL_OW 380
// un = CreateHuman ;
15090: LD_ADDR_VAR 0 15
15094: PUSH
15095: CALL_OW 44
15099: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15100: LD_VAR 0 15
15104: PPUSH
15105: LD_VAR 0 16
15109: PPUSH
15110: CALL_OW 52
// end ; i = i + 1 ;
15114: LD_ADDR_VAR 0 13
15118: PUSH
15119: LD_VAR 0 13
15123: PUSH
15124: LD_INT 1
15126: PLUS
15127: ST_TO_ADDR
// end ; if nation = 2 then
15128: LD_VAR 0 5
15132: PUSH
15133: LD_INT 2
15135: EQUAL
15136: IFFALSE 15560
// begin uc_side = side ;
15138: LD_ADDR_OWVAR 20
15142: PUSH
15143: LD_VAR 0 2
15147: ST_TO_ADDR
// uc_nation = nation ;
15148: LD_ADDR_OWVAR 21
15152: PUSH
15153: LD_VAR 0 5
15157: ST_TO_ADDR
// vc_engine = vehengine ;
15158: LD_ADDR_OWVAR 39
15162: PUSH
15163: LD_VAR 0 6
15167: ST_TO_ADDR
// vc_control = vehcontrol ;
15168: LD_ADDR_OWVAR 38
15172: PUSH
15173: LD_VAR 0 7
15177: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15178: LD_ADDR_OWVAR 40
15182: PUSH
15183: LD_VAR 0 9
15187: PUSH
15188: LD_INT 1
15190: PPUSH
15191: LD_VAR 0 9
15195: PPUSH
15196: CALL_OW 12
15200: ARRAY
15201: ST_TO_ADDR
// for j = 1 to ARWeapons do
15202: LD_ADDR_VAR 0 14
15206: PUSH
15207: DOUBLE
15208: LD_INT 1
15210: DEC
15211: ST_TO_ADDR
15212: LD_VAR 0 9
15216: PUSH
15217: FOR_TO
15218: IFFALSE 15452
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15220: LD_VAR 0 9
15224: PUSH
15225: LD_VAR 0 14
15229: ARRAY
15230: PUSH
15231: LD_INT 24
15233: EQUAL
15234: PUSH
15235: LD_VAR 0 9
15239: PUSH
15240: LD_VAR 0 14
15244: ARRAY
15245: PUSH
15246: LD_INT 22
15248: EQUAL
15249: OR
15250: PUSH
15251: LD_VAR 0 9
15255: PUSH
15256: LD_VAR 0 14
15260: ARRAY
15261: PUSH
15262: LD_INT 23
15264: EQUAL
15265: OR
15266: PUSH
15267: LD_VAR 0 9
15271: PUSH
15272: LD_VAR 0 14
15276: ARRAY
15277: PUSH
15278: LD_INT 30
15280: EQUAL
15281: OR
15282: IFFALSE 15331
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15284: LD_ADDR_VAR 0 18
15288: PUSH
15289: LD_INT 11
15291: PUSH
15292: LD_INT 12
15294: PUSH
15295: LD_INT 13
15297: PUSH
15298: LD_INT 14
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15307: LD_ADDR_OWVAR 37
15311: PUSH
15312: LD_VAR 0 18
15316: PUSH
15317: LD_INT 1
15319: PPUSH
15320: LD_VAR 0 18
15324: PPUSH
15325: CALL_OW 12
15329: ARRAY
15330: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15331: LD_VAR 0 9
15335: PUSH
15336: LD_VAR 0 14
15340: ARRAY
15341: PUSH
15342: LD_INT 29
15344: EQUAL
15345: PUSH
15346: LD_VAR 0 9
15350: PUSH
15351: LD_VAR 0 14
15355: ARRAY
15356: PUSH
15357: LD_INT 28
15359: EQUAL
15360: OR
15361: PUSH
15362: LD_VAR 0 9
15366: PUSH
15367: LD_VAR 0 14
15371: ARRAY
15372: PUSH
15373: LD_INT 27
15375: EQUAL
15376: OR
15377: PUSH
15378: LD_VAR 0 9
15382: PUSH
15383: LD_VAR 0 14
15387: ARRAY
15388: PUSH
15389: LD_INT 26
15391: EQUAL
15392: OR
15393: PUSH
15394: LD_VAR 0 9
15398: PUSH
15399: LD_VAR 0 14
15403: ARRAY
15404: PUSH
15405: LD_INT 25
15407: EQUAL
15408: OR
15409: IFFALSE 15450
// begin arChassisTab = [ 13 , 14 ] ;
15411: LD_ADDR_VAR 0 18
15415: PUSH
15416: LD_INT 13
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15426: LD_ADDR_OWVAR 37
15430: PUSH
15431: LD_VAR 0 18
15435: PUSH
15436: LD_INT 1
15438: PPUSH
15439: LD_VAR 0 18
15443: PPUSH
15444: CALL_OW 12
15448: ARRAY
15449: ST_TO_ADDR
// end ; end ;
15450: GO 15217
15452: POP
15453: POP
// veh = CreateVehicle ;
15454: LD_ADDR_VAR 0 16
15458: PUSH
15459: CALL_OW 45
15463: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15464: LD_VAR 0 16
15468: PPUSH
15469: LD_VAR 0 1
15473: PPUSH
15474: LD_INT 0
15476: PPUSH
15477: CALL_OW 49
// if vehcontrol = 1 then
15481: LD_VAR 0 7
15485: PUSH
15486: LD_INT 1
15488: EQUAL
15489: IFFALSE 15546
// begin hc_gallery =  ;
15491: LD_ADDR_OWVAR 33
15495: PUSH
15496: LD_STRING 
15498: ST_TO_ADDR
// hc_name =  ;
15499: LD_ADDR_OWVAR 26
15503: PUSH
15504: LD_STRING 
15506: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15507: LD_INT 0
15509: PPUSH
15510: LD_INT 3
15512: PPUSH
15513: LD_VAR 0 4
15517: PPUSH
15518: CALL_OW 380
// un = CreateHuman ;
15522: LD_ADDR_VAR 0 15
15526: PUSH
15527: CALL_OW 44
15531: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15532: LD_VAR 0 15
15536: PPUSH
15537: LD_VAR 0 16
15541: PPUSH
15542: CALL_OW 52
// end ; i = i + 1 ;
15546: LD_ADDR_VAR 0 13
15550: PUSH
15551: LD_VAR 0 13
15555: PUSH
15556: LD_INT 1
15558: PLUS
15559: ST_TO_ADDR
// end ; if nation = 3 then
15560: LD_VAR 0 5
15564: PUSH
15565: LD_INT 3
15567: EQUAL
15568: IFFALSE 15960
// begin uc_side = side ;
15570: LD_ADDR_OWVAR 20
15574: PUSH
15575: LD_VAR 0 2
15579: ST_TO_ADDR
// uc_nation = nation ;
15580: LD_ADDR_OWVAR 21
15584: PUSH
15585: LD_VAR 0 5
15589: ST_TO_ADDR
// vc_engine = vehengine ;
15590: LD_ADDR_OWVAR 39
15594: PUSH
15595: LD_VAR 0 6
15599: ST_TO_ADDR
// vc_control = vehcontrol ;
15600: LD_ADDR_OWVAR 38
15604: PUSH
15605: LD_VAR 0 7
15609: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15610: LD_ADDR_OWVAR 40
15614: PUSH
15615: LD_VAR 0 8
15619: PUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_VAR 0 8
15627: PPUSH
15628: CALL_OW 12
15632: ARRAY
15633: ST_TO_ADDR
// for j = 1 to RuWeapons do
15634: LD_ADDR_VAR 0 14
15638: PUSH
15639: DOUBLE
15640: LD_INT 1
15642: DEC
15643: ST_TO_ADDR
15644: LD_VAR 0 8
15648: PUSH
15649: FOR_TO
15650: IFFALSE 15852
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15652: LD_VAR 0 8
15656: PUSH
15657: LD_VAR 0 14
15661: ARRAY
15662: PUSH
15663: LD_INT 42
15665: EQUAL
15666: PUSH
15667: LD_VAR 0 8
15671: PUSH
15672: LD_VAR 0 14
15676: ARRAY
15677: PUSH
15678: LD_INT 43
15680: EQUAL
15681: OR
15682: PUSH
15683: LD_VAR 0 8
15687: PUSH
15688: LD_VAR 0 14
15692: ARRAY
15693: PUSH
15694: LD_INT 44
15696: EQUAL
15697: OR
15698: PUSH
15699: LD_VAR 0 8
15703: PUSH
15704: LD_VAR 0 14
15708: ARRAY
15709: PUSH
15710: LD_INT 45
15712: EQUAL
15713: OR
15714: PUSH
15715: LD_VAR 0 8
15719: PUSH
15720: LD_VAR 0 14
15724: ARRAY
15725: PUSH
15726: LD_INT 49
15728: EQUAL
15729: OR
15730: IFFALSE 15779
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15732: LD_ADDR_VAR 0 17
15736: PUSH
15737: LD_INT 21
15739: PUSH
15740: LD_INT 22
15742: PUSH
15743: LD_INT 23
15745: PUSH
15746: LD_INT 24
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15755: LD_ADDR_OWVAR 37
15759: PUSH
15760: LD_VAR 0 17
15764: PUSH
15765: LD_INT 1
15767: PPUSH
15768: LD_VAR 0 17
15772: PPUSH
15773: CALL_OW 12
15777: ARRAY
15778: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15779: LD_VAR 0 8
15783: PUSH
15784: LD_VAR 0 14
15788: ARRAY
15789: PUSH
15790: LD_INT 46
15792: EQUAL
15793: PUSH
15794: LD_VAR 0 8
15798: PUSH
15799: LD_VAR 0 14
15803: ARRAY
15804: PUSH
15805: LD_INT 47
15807: EQUAL
15808: OR
15809: IFFALSE 15850
// begin ruChassisTab = [ 23 , 24 ] ;
15811: LD_ADDR_VAR 0 17
15815: PUSH
15816: LD_INT 23
15818: PUSH
15819: LD_INT 24
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15826: LD_ADDR_OWVAR 37
15830: PUSH
15831: LD_VAR 0 17
15835: PUSH
15836: LD_INT 1
15838: PPUSH
15839: LD_VAR 0 17
15843: PPUSH
15844: CALL_OW 12
15848: ARRAY
15849: ST_TO_ADDR
// end ; end ;
15850: GO 15649
15852: POP
15853: POP
// veh = CreateVehicle ;
15854: LD_ADDR_VAR 0 16
15858: PUSH
15859: CALL_OW 45
15863: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15864: LD_VAR 0 16
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: LD_INT 0
15876: PPUSH
15877: CALL_OW 49
// if vehcontrol = 1 then
15881: LD_VAR 0 7
15885: PUSH
15886: LD_INT 1
15888: EQUAL
15889: IFFALSE 15946
// begin hc_gallery =  ;
15891: LD_ADDR_OWVAR 33
15895: PUSH
15896: LD_STRING 
15898: ST_TO_ADDR
// hc_name =  ;
15899: LD_ADDR_OWVAR 26
15903: PUSH
15904: LD_STRING 
15906: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15907: LD_INT 0
15909: PPUSH
15910: LD_INT 3
15912: PPUSH
15913: LD_VAR 0 4
15917: PPUSH
15918: CALL_OW 380
// un = CreateHuman ;
15922: LD_ADDR_VAR 0 15
15926: PUSH
15927: CALL_OW 44
15931: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15932: LD_VAR 0 15
15936: PPUSH
15937: LD_VAR 0 16
15941: PPUSH
15942: CALL_OW 52
// end ; i = i + 1 ;
15946: LD_ADDR_VAR 0 13
15950: PUSH
15951: LD_VAR 0 13
15955: PUSH
15956: LD_INT 1
15958: PLUS
15959: ST_TO_ADDR
// end ; until i = vehCount ;
15960: LD_VAR 0 13
15964: PUSH
15965: LD_VAR 0 3
15969: EQUAL
15970: IFFALSE 14622
// repeat wait ( 0 0$1 ) ;
15972: LD_INT 35
15974: PPUSH
15975: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15979: LD_ADDR_VAR 0 20
15983: PUSH
15984: LD_INT 22
15986: PUSH
15987: LD_VAR 0 2
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 21
15998: PUSH
15999: LD_INT 2
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 24
16008: PUSH
16009: LD_INT 250
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: ST_TO_ADDR
// if vehicleOK_list > 0 then
16026: LD_VAR 0 20
16030: PUSH
16031: LD_INT 0
16033: GREATER
16034: IFFALSE 16225
// begin for i in vehicleOK_list do
16036: LD_ADDR_VAR 0 13
16040: PUSH
16041: LD_VAR 0 20
16045: PUSH
16046: FOR_IN
16047: IFFALSE 16223
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16049: LD_ADDR_VAR 0 21
16053: PUSH
16054: LD_INT 22
16056: PUSH
16057: LD_VAR 0 11
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: PPUSH
16071: LD_VAR 0 13
16075: PPUSH
16076: CALL_OW 74
16080: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16081: LD_ADDR_VAR 0 22
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_VAR 0 11
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: LD_INT 59
16103: PUSH
16104: EMPTY
16105: LIST
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 21
16119: PUSH
16120: LD_INT 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: PPUSH
16140: CALL_OW 69
16144: PPUSH
16145: LD_VAR 0 13
16149: PPUSH
16150: CALL_OW 74
16154: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16155: LD_VAR 0 13
16159: PPUSH
16160: LD_VAR 0 21
16164: PPUSH
16165: CALL_OW 296
16169: PUSH
16170: LD_INT 6
16172: PLUS
16173: PUSH
16174: LD_VAR 0 13
16178: PPUSH
16179: LD_VAR 0 22
16183: PPUSH
16184: CALL_OW 296
16188: LESS
16189: IFFALSE 16207
// begin ComAttackUnit ( i , target1 ) ;
16191: LD_VAR 0 13
16195: PPUSH
16196: LD_VAR 0 21
16200: PPUSH
16201: CALL_OW 115
// end else
16205: GO 16221
// begin ComAttackUnit ( i , target2 ) ;
16207: LD_VAR 0 13
16211: PPUSH
16212: LD_VAR 0 22
16216: PPUSH
16217: CALL_OW 115
// end ; end ;
16221: GO 16046
16223: POP
16224: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16225: LD_INT 22
16227: PUSH
16228: LD_VAR 0 2
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 21
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 24
16249: PUSH
16250: LD_INT 250
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: PUSH
16267: LD_INT 0
16269: EQUAL
16270: IFFALSE 15972
// end ;
16272: LD_VAR 0 12
16276: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16277: LD_INT 0
16279: PPUSH
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16287: LD_ADDR_VAR 0 7
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_VAR 0 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: LD_INT 24
16312: PUSH
16313: LD_INT 550
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 24
16326: PUSH
16327: LD_INT 250
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PPUSH
16343: CALL_OW 69
16347: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16348: LD_ADDR_VAR 0 8
16352: PUSH
16353: LD_INT 22
16355: PUSH
16356: LD_VAR 0 1
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 2
16367: PUSH
16368: LD_INT 25
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 25
16380: PUSH
16381: LD_INT 5
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 25
16390: PUSH
16391: LD_INT 8
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 25
16400: PUSH
16401: LD_INT 9
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 24
16417: PUSH
16418: LD_INT 1000
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: PPUSH
16430: CALL_OW 69
16434: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16435: LD_ADDR_VAR 0 9
16439: PUSH
16440: LD_INT 22
16442: PUSH
16443: LD_VAR 0 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 25
16454: PUSH
16455: LD_INT 4
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// if medicCount > 0 then
16471: LD_VAR 0 9
16475: PUSH
16476: LD_INT 0
16478: GREATER
16479: IFFALSE 16553
// begin if damageUnit_list > 0 then
16481: LD_VAR 0 7
16485: PUSH
16486: LD_INT 0
16488: GREATER
16489: IFFALSE 16553
// begin for i in damageUnit_list do
16491: LD_ADDR_VAR 0 5
16495: PUSH
16496: LD_VAR 0 7
16500: PUSH
16501: FOR_IN
16502: IFFALSE 16551
// begin ComMoveToArea ( i , healArea ) ;
16504: LD_VAR 0 5
16508: PPUSH
16509: LD_VAR 0 2
16513: PPUSH
16514: CALL_OW 113
// for j in medicCount do
16518: LD_ADDR_VAR 0 6
16522: PUSH
16523: LD_VAR 0 9
16527: PUSH
16528: FOR_IN
16529: IFFALSE 16547
// AddComHeal ( j , i ) ;
16531: LD_VAR 0 6
16535: PPUSH
16536: LD_VAR 0 5
16540: PPUSH
16541: CALL_OW 188
16545: GO 16528
16547: POP
16548: POP
// end ;
16549: GO 16501
16551: POP
16552: POP
// end ; end ; if soldiersOK_list > 0 then
16553: LD_VAR 0 8
16557: PUSH
16558: LD_INT 0
16560: GREATER
16561: IFFALSE 16752
// begin for i in soldiersOK_list do
16563: LD_ADDR_VAR 0 5
16567: PUSH
16568: LD_VAR 0 8
16572: PUSH
16573: FOR_IN
16574: IFFALSE 16750
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16576: LD_ADDR_VAR 0 10
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_VAR 0 3
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PPUSH
16593: CALL_OW 69
16597: PPUSH
16598: LD_VAR 0 5
16602: PPUSH
16603: CALL_OW 74
16607: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16608: LD_ADDR_VAR 0 11
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_VAR 0 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 2
16627: PUSH
16628: LD_INT 59
16630: PUSH
16631: EMPTY
16632: LIST
16633: PUSH
16634: LD_INT 21
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 21
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: EMPTY
16665: LIST
16666: PPUSH
16667: CALL_OW 69
16671: PPUSH
16672: LD_VAR 0 5
16676: PPUSH
16677: CALL_OW 74
16681: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16682: LD_VAR 0 5
16686: PPUSH
16687: LD_VAR 0 10
16691: PPUSH
16692: CALL_OW 296
16696: PUSH
16697: LD_INT 8
16699: PLUS
16700: PUSH
16701: LD_VAR 0 5
16705: PPUSH
16706: LD_VAR 0 11
16710: PPUSH
16711: CALL_OW 296
16715: LESS
16716: IFFALSE 16734
// begin ComAttackUnit ( i , target1 ) ;
16718: LD_VAR 0 5
16722: PPUSH
16723: LD_VAR 0 10
16727: PPUSH
16728: CALL_OW 115
// end else
16732: GO 16748
// begin ComAttackUnit ( i , target2 ) ;
16734: LD_VAR 0 5
16738: PPUSH
16739: LD_VAR 0 11
16743: PPUSH
16744: CALL_OW 115
// end ; end ;
16748: GO 16573
16750: POP
16751: POP
// end ; end ;
16752: LD_VAR 0 4
16756: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16757: LD_INT 0
16759: PPUSH
16760: PPUSH
// list := [ ] ;
16761: LD_ADDR_VAR 0 5
16765: PUSH
16766: EMPTY
16767: ST_TO_ADDR
// case d of 0 :
16768: LD_VAR 0 3
16772: PUSH
16773: LD_INT 0
16775: DOUBLE
16776: EQUAL
16777: IFTRUE 16781
16779: GO 16914
16781: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16782: LD_ADDR_VAR 0 5
16786: PUSH
16787: LD_VAR 0 1
16791: PUSH
16792: LD_INT 4
16794: MINUS
16795: PUSH
16796: LD_VAR 0 2
16800: PUSH
16801: LD_INT 4
16803: MINUS
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: PUSH
16813: LD_VAR 0 1
16817: PUSH
16818: LD_INT 3
16820: MINUS
16821: PUSH
16822: LD_VAR 0 2
16826: PUSH
16827: LD_INT 1
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PUSH
16835: LD_VAR 0 1
16839: PUSH
16840: LD_INT 4
16842: PLUS
16843: PUSH
16844: LD_VAR 0 2
16848: PUSH
16849: LD_INT 4
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: LD_VAR 0 1
16861: PUSH
16862: LD_INT 3
16864: PLUS
16865: PUSH
16866: LD_VAR 0 2
16870: PUSH
16871: LD_INT 3
16873: PLUS
16874: PUSH
16875: LD_INT 5
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: PUSH
16883: LD_VAR 0 1
16887: PUSH
16888: LD_VAR 0 2
16892: PUSH
16893: LD_INT 4
16895: PLUS
16896: PUSH
16897: LD_INT 0
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: ST_TO_ADDR
// end ; 1 :
16912: GO 17612
16914: LD_INT 1
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 17055
16922: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16923: LD_ADDR_VAR 0 5
16927: PUSH
16928: LD_VAR 0 1
16932: PUSH
16933: LD_VAR 0 2
16937: PUSH
16938: LD_INT 4
16940: MINUS
16941: PUSH
16942: LD_INT 3
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: PUSH
16950: LD_VAR 0 1
16954: PUSH
16955: LD_INT 3
16957: MINUS
16958: PUSH
16959: LD_VAR 0 2
16963: PUSH
16964: LD_INT 3
16966: MINUS
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_VAR 0 1
16980: PUSH
16981: LD_INT 4
16983: MINUS
16984: PUSH
16985: LD_VAR 0 2
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: PUSH
16998: LD_VAR 0 1
17002: PUSH
17003: LD_VAR 0 2
17007: PUSH
17008: LD_INT 3
17010: PLUS
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: PUSH
17020: LD_VAR 0 1
17024: PUSH
17025: LD_INT 4
17027: PLUS
17028: PUSH
17029: LD_VAR 0 2
17033: PUSH
17034: LD_INT 4
17036: PLUS
17037: PUSH
17038: LD_INT 5
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: ST_TO_ADDR
// end ; 2 :
17053: GO 17612
17055: LD_INT 2
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17192
17063: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17064: LD_ADDR_VAR 0 5
17068: PUSH
17069: LD_VAR 0 1
17073: PUSH
17074: LD_VAR 0 2
17078: PUSH
17079: LD_INT 3
17081: MINUS
17082: PUSH
17083: LD_INT 3
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: PUSH
17091: LD_VAR 0 1
17095: PUSH
17096: LD_INT 4
17098: PLUS
17099: PUSH
17100: LD_VAR 0 2
17104: PUSH
17105: LD_INT 4
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: PUSH
17113: LD_VAR 0 1
17117: PUSH
17118: LD_VAR 0 2
17122: PUSH
17123: LD_INT 4
17125: PLUS
17126: PUSH
17127: LD_INT 0
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: LD_VAR 0 1
17139: PUSH
17140: LD_INT 3
17142: MINUS
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: PUSH
17157: LD_VAR 0 1
17161: PUSH
17162: LD_INT 4
17164: MINUS
17165: PUSH
17166: LD_VAR 0 2
17170: PUSH
17171: LD_INT 4
17173: MINUS
17174: PUSH
17175: LD_INT 2
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: ST_TO_ADDR
// end ; 3 :
17190: GO 17612
17192: LD_INT 3
17194: DOUBLE
17195: EQUAL
17196: IFTRUE 17200
17198: GO 17333
17200: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17201: LD_ADDR_VAR 0 5
17205: PUSH
17206: LD_VAR 0 1
17210: PUSH
17211: LD_INT 3
17213: PLUS
17214: PUSH
17215: LD_VAR 0 2
17219: PUSH
17220: LD_INT 4
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: LD_VAR 0 1
17232: PUSH
17233: LD_INT 4
17235: PLUS
17236: PUSH
17237: LD_VAR 0 2
17241: PUSH
17242: LD_INT 4
17244: PLUS
17245: PUSH
17246: LD_INT 5
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: PUSH
17254: LD_VAR 0 1
17258: PUSH
17259: LD_INT 4
17261: MINUS
17262: PUSH
17263: LD_VAR 0 2
17267: PUSH
17268: LD_INT 1
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: PUSH
17276: LD_VAR 0 1
17280: PUSH
17281: LD_VAR 0 2
17285: PUSH
17286: LD_INT 4
17288: MINUS
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: PUSH
17298: LD_VAR 0 1
17302: PUSH
17303: LD_INT 3
17305: MINUS
17306: PUSH
17307: LD_VAR 0 2
17311: PUSH
17312: LD_INT 3
17314: MINUS
17315: PUSH
17316: LD_INT 2
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: ST_TO_ADDR
// end ; 4 :
17331: GO 17612
17333: LD_INT 4
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17474
17341: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17342: LD_ADDR_VAR 0 5
17346: PUSH
17347: LD_VAR 0 1
17351: PUSH
17352: LD_VAR 0 2
17356: PUSH
17357: LD_INT 4
17359: PLUS
17360: PUSH
17361: LD_INT 0
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: PUSH
17369: LD_VAR 0 1
17373: PUSH
17374: LD_INT 3
17376: PLUS
17377: PUSH
17378: LD_VAR 0 2
17382: PUSH
17383: LD_INT 3
17385: PLUS
17386: PUSH
17387: LD_INT 5
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: PUSH
17395: LD_VAR 0 1
17399: PUSH
17400: LD_INT 3
17402: PLUS
17403: PUSH
17404: LD_VAR 0 2
17408: PUSH
17409: LD_INT 4
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: PUSH
17417: LD_VAR 0 1
17421: PUSH
17422: LD_VAR 0 2
17426: PUSH
17427: LD_INT 3
17429: MINUS
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: LD_VAR 0 1
17443: PUSH
17444: LD_INT 4
17446: MINUS
17447: PUSH
17448: LD_VAR 0 2
17452: PUSH
17453: LD_INT 4
17455: MINUS
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: ST_TO_ADDR
// end ; 5 :
17472: GO 17612
17474: LD_INT 5
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17611
17482: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17483: LD_ADDR_VAR 0 5
17487: PUSH
17488: LD_VAR 0 1
17492: PUSH
17493: LD_INT 4
17495: MINUS
17496: PUSH
17497: LD_VAR 0 2
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: LIST
17509: PUSH
17510: LD_VAR 0 1
17514: PUSH
17515: LD_VAR 0 2
17519: PUSH
17520: LD_INT 4
17522: MINUS
17523: PUSH
17524: LD_INT 3
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_VAR 0 1
17536: PUSH
17537: LD_INT 4
17539: PLUS
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: LD_INT 4
17548: PLUS
17549: PUSH
17550: LD_INT 5
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: PUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 3
17565: PLUS
17566: PUSH
17567: LD_VAR 0 2
17571: PUSH
17572: LD_INT 4
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: PUSH
17580: LD_VAR 0 1
17584: PUSH
17585: LD_VAR 0 2
17589: PUSH
17590: LD_INT 3
17592: PLUS
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: ST_TO_ADDR
// end ; end ;
17609: GO 17612
17611: POP
// result := list ;
17612: LD_ADDR_VAR 0 4
17616: PUSH
17617: LD_VAR 0 5
17621: ST_TO_ADDR
// end ;
17622: LD_VAR 0 4
17626: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17627: LD_INT 0
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
// result := false ;
17638: LD_ADDR_VAR 0 7
17642: PUSH
17643: LD_INT 0
17645: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17646: LD_VAR 0 1
17650: NOT
17651: PUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 266
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: IN
17672: NOT
17673: OR
17674: PUSH
17675: LD_VAR 0 2
17679: NOT
17680: OR
17681: PUSH
17682: LD_VAR 0 5
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: LD_INT 3
17698: PUSH
17699: LD_INT 4
17701: PUSH
17702: LD_INT 5
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: IN
17713: NOT
17714: OR
17715: PUSH
17716: LD_VAR 0 3
17720: PPUSH
17721: LD_VAR 0 4
17725: PPUSH
17726: CALL_OW 488
17730: NOT
17731: OR
17732: IFFALSE 17736
// exit ;
17734: GO 18417
// pom := GetBase ( bdepot ) ;
17736: LD_ADDR_VAR 0 10
17740: PUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 274
17750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17751: LD_ADDR_VAR 0 11
17755: PUSH
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_VAR 0 1
17765: PPUSH
17766: CALL_OW 248
17770: PPUSH
17771: CALL_OW 450
17775: ST_TO_ADDR
// if check_cost then
17776: LD_VAR 0 6
17780: IFFALSE 17857
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17782: LD_VAR 0 10
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 275
17794: PUSH
17795: LD_VAR 0 11
17799: PUSH
17800: LD_INT 1
17802: ARRAY
17803: GREATEREQUAL
17804: PUSH
17805: LD_VAR 0 10
17809: PPUSH
17810: LD_INT 2
17812: PPUSH
17813: CALL_OW 275
17817: PUSH
17818: LD_VAR 0 11
17822: PUSH
17823: LD_INT 2
17825: ARRAY
17826: GREATEREQUAL
17827: AND
17828: PUSH
17829: LD_VAR 0 10
17833: PPUSH
17834: LD_INT 3
17836: PPUSH
17837: CALL_OW 275
17841: PUSH
17842: LD_VAR 0 11
17846: PUSH
17847: LD_INT 3
17849: ARRAY
17850: GREATEREQUAL
17851: AND
17852: NOT
17853: IFFALSE 17857
// exit ;
17855: GO 18417
// if GetBType ( bdepot ) = b_depot then
17857: LD_VAR 0 1
17861: PPUSH
17862: CALL_OW 266
17866: PUSH
17867: LD_INT 0
17869: EQUAL
17870: IFFALSE 17882
// dist := 28 else
17872: LD_ADDR_VAR 0 14
17876: PUSH
17877: LD_INT 28
17879: ST_TO_ADDR
17880: GO 17890
// dist := 36 ;
17882: LD_ADDR_VAR 0 14
17886: PUSH
17887: LD_INT 36
17889: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17890: LD_VAR 0 1
17894: PPUSH
17895: LD_VAR 0 3
17899: PPUSH
17900: LD_VAR 0 4
17904: PPUSH
17905: CALL_OW 297
17909: PUSH
17910: LD_VAR 0 14
17914: GREATER
17915: IFFALSE 17919
// exit ;
17917: GO 18417
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17919: LD_ADDR_VAR 0 12
17923: PUSH
17924: LD_VAR 0 2
17928: PPUSH
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_VAR 0 4
17938: PPUSH
17939: LD_VAR 0 5
17943: PPUSH
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 248
17953: PPUSH
17954: LD_INT 0
17956: PPUSH
17957: CALL 18422 0 6
17961: ST_TO_ADDR
// if not hexes then
17962: LD_VAR 0 12
17966: NOT
17967: IFFALSE 17971
// exit ;
17969: GO 18417
// hex := GetHexInfo ( x , y ) ;
17971: LD_ADDR_VAR 0 15
17975: PUSH
17976: LD_VAR 0 3
17980: PPUSH
17981: LD_VAR 0 4
17985: PPUSH
17986: CALL_OW 546
17990: ST_TO_ADDR
// if hex [ 1 ] then
17991: LD_VAR 0 15
17995: PUSH
17996: LD_INT 1
17998: ARRAY
17999: IFFALSE 18003
// exit ;
18001: GO 18417
// height := hex [ 2 ] ;
18003: LD_ADDR_VAR 0 13
18007: PUSH
18008: LD_VAR 0 15
18012: PUSH
18013: LD_INT 2
18015: ARRAY
18016: ST_TO_ADDR
// for i = 1 to hexes do
18017: LD_ADDR_VAR 0 8
18021: PUSH
18022: DOUBLE
18023: LD_INT 1
18025: DEC
18026: ST_TO_ADDR
18027: LD_VAR 0 12
18031: PUSH
18032: FOR_TO
18033: IFFALSE 18361
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18035: LD_VAR 0 12
18039: PUSH
18040: LD_VAR 0 8
18044: ARRAY
18045: PUSH
18046: LD_INT 1
18048: ARRAY
18049: PPUSH
18050: LD_VAR 0 12
18054: PUSH
18055: LD_VAR 0 8
18059: ARRAY
18060: PUSH
18061: LD_INT 2
18063: ARRAY
18064: PPUSH
18065: CALL_OW 488
18069: NOT
18070: IFFALSE 18074
// continue ;
18072: GO 18032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18074: LD_ADDR_VAR 0 9
18078: PUSH
18079: LD_VAR 0 12
18083: PUSH
18084: LD_VAR 0 8
18088: ARRAY
18089: PUSH
18090: LD_INT 1
18092: ARRAY
18093: PPUSH
18094: LD_VAR 0 12
18098: PUSH
18099: LD_VAR 0 8
18103: ARRAY
18104: PUSH
18105: LD_INT 2
18107: ARRAY
18108: PPUSH
18109: CALL_OW 546
18113: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18114: LD_VAR 0 9
18118: PUSH
18119: LD_INT 1
18121: ARRAY
18122: PUSH
18123: LD_VAR 0 9
18127: PUSH
18128: LD_INT 2
18130: ARRAY
18131: PUSH
18132: LD_VAR 0 13
18136: PUSH
18137: LD_INT 2
18139: PLUS
18140: GREATER
18141: OR
18142: PUSH
18143: LD_VAR 0 9
18147: PUSH
18148: LD_INT 2
18150: ARRAY
18151: PUSH
18152: LD_VAR 0 13
18156: PUSH
18157: LD_INT 2
18159: MINUS
18160: LESS
18161: OR
18162: PUSH
18163: LD_VAR 0 9
18167: PUSH
18168: LD_INT 3
18170: ARRAY
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 8
18177: PUSH
18178: LD_INT 9
18180: PUSH
18181: LD_INT 10
18183: PUSH
18184: LD_INT 11
18186: PUSH
18187: LD_INT 12
18189: PUSH
18190: LD_INT 13
18192: PUSH
18193: LD_INT 16
18195: PUSH
18196: LD_INT 17
18198: PUSH
18199: LD_INT 18
18201: PUSH
18202: LD_INT 19
18204: PUSH
18205: LD_INT 20
18207: PUSH
18208: LD_INT 21
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: IN
18226: NOT
18227: OR
18228: PUSH
18229: LD_VAR 0 9
18233: PUSH
18234: LD_INT 5
18236: ARRAY
18237: NOT
18238: OR
18239: PUSH
18240: LD_VAR 0 9
18244: PUSH
18245: LD_INT 6
18247: ARRAY
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: LD_INT 7
18257: PUSH
18258: LD_INT 9
18260: PUSH
18261: LD_INT 10
18263: PUSH
18264: LD_INT 11
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: IN
18275: NOT
18276: OR
18277: PUSH
18278: LD_VAR 0 12
18282: PUSH
18283: LD_VAR 0 8
18287: ARRAY
18288: PUSH
18289: LD_INT 1
18291: ARRAY
18292: PPUSH
18293: LD_VAR 0 12
18297: PUSH
18298: LD_VAR 0 8
18302: ARRAY
18303: PUSH
18304: LD_INT 2
18306: ARRAY
18307: PPUSH
18308: CALL_OW 428
18312: PUSH
18313: LD_INT 0
18315: GREATER
18316: OR
18317: PUSH
18318: LD_VAR 0 12
18322: PUSH
18323: LD_VAR 0 8
18327: ARRAY
18328: PUSH
18329: LD_INT 1
18331: ARRAY
18332: PPUSH
18333: LD_VAR 0 12
18337: PUSH
18338: LD_VAR 0 8
18342: ARRAY
18343: PUSH
18344: LD_INT 2
18346: ARRAY
18347: PPUSH
18348: CALL_OW 351
18352: OR
18353: IFFALSE 18359
// exit ;
18355: POP
18356: POP
18357: GO 18417
// end ;
18359: GO 18032
18361: POP
18362: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18363: LD_VAR 0 2
18367: PUSH
18368: LD_INT 29
18370: PUSH
18371: LD_INT 30
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: IN
18378: PUSH
18379: LD_VAR 0 3
18383: PPUSH
18384: LD_VAR 0 4
18388: PPUSH
18389: LD_VAR 0 1
18393: PPUSH
18394: CALL_OW 255
18398: PPUSH
18399: CALL_OW 440
18403: NOT
18404: AND
18405: IFFALSE 18409
// exit ;
18407: GO 18417
// result := true ;
18409: LD_ADDR_VAR 0 7
18413: PUSH
18414: LD_INT 1
18416: ST_TO_ADDR
// end ;
18417: LD_VAR 0 7
18421: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18422: LD_INT 0
18424: PPUSH
18425: PPUSH
18426: PPUSH
18427: PPUSH
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
18432: PPUSH
18433: PPUSH
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
// result = [ ] ;
18482: LD_ADDR_VAR 0 7
18486: PUSH
18487: EMPTY
18488: ST_TO_ADDR
// temp_list = [ ] ;
18489: LD_ADDR_VAR 0 9
18493: PUSH
18494: EMPTY
18495: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18496: LD_VAR 0 4
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: LD_INT 4
18515: PUSH
18516: LD_INT 5
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: IN
18527: NOT
18528: PUSH
18529: LD_VAR 0 1
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: IN
18544: PUSH
18545: LD_VAR 0 5
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: IN
18564: NOT
18565: AND
18566: OR
18567: IFFALSE 18571
// exit ;
18569: GO 36956
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18571: LD_VAR 0 1
18575: PUSH
18576: LD_INT 6
18578: PUSH
18579: LD_INT 7
18581: PUSH
18582: LD_INT 8
18584: PUSH
18585: LD_INT 13
18587: PUSH
18588: LD_INT 12
18590: PUSH
18591: LD_INT 15
18593: PUSH
18594: LD_INT 11
18596: PUSH
18597: LD_INT 14
18599: PUSH
18600: LD_INT 10
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: IN
18614: IFFALSE 18624
// btype = b_lab ;
18616: LD_ADDR_VAR 0 1
18620: PUSH
18621: LD_INT 6
18623: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18624: LD_VAR 0 6
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: IN
18643: NOT
18644: PUSH
18645: LD_VAR 0 1
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: LD_INT 6
18664: PUSH
18665: LD_INT 36
18667: PUSH
18668: LD_INT 4
18670: PUSH
18671: LD_INT 5
18673: PUSH
18674: LD_INT 31
18676: PUSH
18677: LD_INT 32
18679: PUSH
18680: LD_INT 33
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: IN
18696: NOT
18697: PUSH
18698: LD_VAR 0 6
18702: PUSH
18703: LD_INT 1
18705: EQUAL
18706: AND
18707: OR
18708: PUSH
18709: LD_VAR 0 1
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 3
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: IN
18724: NOT
18725: PUSH
18726: LD_VAR 0 6
18730: PUSH
18731: LD_INT 2
18733: EQUAL
18734: AND
18735: OR
18736: IFFALSE 18746
// mode = 0 ;
18738: LD_ADDR_VAR 0 6
18742: PUSH
18743: LD_INT 0
18745: ST_TO_ADDR
// case mode of 0 :
18746: LD_VAR 0 6
18750: PUSH
18751: LD_INT 0
18753: DOUBLE
18754: EQUAL
18755: IFTRUE 18759
18757: GO 30212
18759: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18760: LD_ADDR_VAR 0 11
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: LD_INT 1
18780: NEG
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: NEG
18819: PUSH
18820: LD_INT 0
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: LD_INT 1
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: LD_INT 2
18845: NEG
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: LD_INT 2
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: LD_INT 1
18867: NEG
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: LD_INT 3
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 1
18926: NEG
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18953: LD_ADDR_VAR 0 12
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 1
19065: NEG
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: NEG
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 2
19087: NEG
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: NEG
19100: PUSH
19101: LD_INT 1
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 3
19110: NEG
19111: PUSH
19112: LD_INT 0
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 3
19121: NEG
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19149: LD_ADDR_VAR 0 13
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 0
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: LD_INT 1
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: NEG
19231: PUSH
19232: LD_INT 2
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 2
19272: NEG
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: LD_INT 2
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: NEG
19297: PUSH
19298: LD_INT 3
19300: NEG
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 3
19308: NEG
19309: PUSH
19310: LD_INT 2
19312: NEG
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 3
19320: NEG
19321: PUSH
19322: LD_INT 3
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19348: LD_ADDR_VAR 0 14
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: LD_INT 1
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: NEG
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: LD_INT 2
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: LD_INT 2
19444: NEG
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: LD_INT 1
19455: NEG
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: LD_INT 3
19498: NEG
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: LD_INT 3
19509: NEG
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: LD_INT 2
19520: NEG
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19544: LD_ADDR_VAR 0 15
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: LD_INT 1
19628: NEG
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 2
19667: NEG
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 2
19678: NEG
19679: PUSH
19680: LD_INT 1
19682: NEG
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: LD_INT 1
19693: NEG
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 3
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19737: LD_ADDR_VAR 0 16
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: LD_INT 2
19822: NEG
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: LD_INT 2
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 2
19860: NEG
19861: PUSH
19862: LD_INT 1
19864: NEG
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: NEG
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 3
19894: PUSH
19895: LD_INT 3
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 2
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19930: LD_ADDR_VAR 0 17
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: LD_INT 1
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 1
19988: NEG
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 1
20011: NEG
20012: PUSH
20013: LD_INT 2
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: LD_INT 2
20026: NEG
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: PUSH
20066: LD_INT 2
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 1
20095: NEG
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 2
20106: NEG
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: NEG
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: NEG
20130: PUSH
20131: LD_INT 2
20133: NEG
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20160: LD_ADDR_VAR 0 18
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: LD_INT 2
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 2
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 2
20347: NEG
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: LD_INT 2
20363: NEG
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20390: LD_ADDR_VAR 0 19
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: LD_INT 2
20486: NEG
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 2
20577: NEG
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20620: LD_ADDR_VAR 0 20
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: NEG
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 2
20807: NEG
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: NEG
20820: PUSH
20821: LD_INT 2
20823: NEG
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20850: LD_ADDR_VAR 0 21
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: LD_INT 1
20923: NEG
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 1
20931: NEG
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 2
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 2
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: LD_INT 1
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21080: LD_ADDR_VAR 0 22
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: LD_INT 2
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: LD_INT 2
21176: NEG
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 2
21256: NEG
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 2
21267: NEG
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: NEG
21280: PUSH
21281: LD_INT 2
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21310: LD_ADDR_VAR 0 23
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: NEG
21380: PUSH
21381: LD_INT 1
21383: NEG
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: NEG
21392: PUSH
21393: LD_INT 2
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: LD_INT 2
21513: NEG
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 2
21521: NEG
21522: PUSH
21523: LD_INT 3
21525: NEG
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: LD_INT 3
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: LD_INT 2
21548: NEG
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21590: LD_ADDR_VAR 0 24
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: LD_INT 0
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 0
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 1
21648: NEG
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: PUSH
21661: LD_INT 1
21663: NEG
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: LD_INT 2
21675: NEG
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 2
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 2
21766: NEG
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 2
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 3
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 3
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21866: LD_ADDR_VAR 0 25
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 1
21935: NEG
21936: PUSH
21937: LD_INT 1
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: LD_INT 2
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 1
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 2
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: LD_INT 0
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 2
22053: NEG
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 2
22065: NEG
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 3
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22140: LD_ADDR_VAR 0 26
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: LD_INT 1
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: NEG
22222: PUSH
22223: LD_INT 2
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: LD_INT 2
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: LD_INT 1
22247: NEG
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 2
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 2
22327: NEG
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: LD_INT 3
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22416: LD_ADDR_VAR 0 27
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: LD_INT 0
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: LD_INT 2
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 2
22592: NEG
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 2
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: NEG
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 3
22649: NEG
22650: PUSH
22651: LD_INT 1
22653: NEG
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 3
22661: NEG
22662: PUSH
22663: LD_INT 2
22665: NEG
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22696: LD_ADDR_VAR 0 28
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 1
22765: NEG
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: LD_INT 2
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 2
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 2
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: LD_INT 2
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: LD_INT 2
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: NEG
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 2
22883: NEG
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 2
22895: NEG
22896: PUSH
22897: LD_INT 2
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 2
22907: NEG
22908: PUSH
22909: LD_INT 3
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: LD_INT 3
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 3
22931: NEG
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 3
22943: NEG
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22978: LD_ADDR_VAR 0 29
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: LD_INT 2
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: LD_INT 1
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 2
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: LD_INT 3
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 2
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: LD_INT 3
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 3
23222: NEG
23223: PUSH
23224: LD_INT 2
23226: NEG
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23257: LD_ADDR_VAR 0 30
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: NEG
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: LD_INT 1
23330: NEG
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: LD_INT 2
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: LD_INT 2
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 2
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: NEG
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 2
23434: NEG
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: LD_INT 3
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 2
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 3
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 3
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: NEG
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 3
23500: NEG
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23535: LD_ADDR_VAR 0 31
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: LD_INT 1
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 1
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 2
23700: NEG
23701: PUSH
23702: LD_INT 1
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: LD_INT 2
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: LD_INT 3
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: LD_INT 1
23739: NEG
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 3
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 3
23778: NEG
23779: PUSH
23780: LD_INT 2
23782: NEG
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23813: LD_ADDR_VAR 0 32
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: LD_INT 2
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 2
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 2
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: NEG
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 2
23990: NEG
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: LD_INT 3
24006: NEG
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: LD_INT 2
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 3
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 2
24045: NEG
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 3
24056: NEG
24057: PUSH
24058: LD_INT 1
24060: NEG
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24091: LD_ADDR_VAR 0 33
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 0
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: LD_INT 2
24176: NEG
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 2
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 2
24246: NEG
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 2
24257: NEG
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 2
24269: NEG
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 2
24281: NEG
24282: PUSH
24283: LD_INT 3
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 3
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: LD_INT 3
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 3
24335: NEG
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24370: LD_ADDR_VAR 0 34
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: LD_INT 2
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: NEG
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 2
24537: NEG
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: LD_INT 3
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 3
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 3
24615: NEG
24616: PUSH
24617: LD_INT 1
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24650: LD_ADDR_VAR 0 35
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 0
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: NEG
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 2
24741: NEG
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24762: LD_ADDR_VAR 0 36
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: LD_INT 1
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: LD_INT 2
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24874: LD_ADDR_VAR 0 37
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24986: LD_ADDR_VAR 0 38
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: NEG
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25098: LD_ADDR_VAR 0 39
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: LD_INT 2
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25210: LD_ADDR_VAR 0 40
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: NEG
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25322: LD_ADDR_VAR 0 41
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: LD_INT 2
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 2
25477: NEG
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: NEG
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: LD_INT 3
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 3
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 3
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 3
25565: PUSH
25566: LD_INT 3
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: PUSH
25576: LD_INT 3
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 2
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 3
25596: NEG
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 3
25607: NEG
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 3
25619: NEG
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 3
25631: NEG
25632: PUSH
25633: LD_INT 3
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25672: LD_ADDR_VAR 0 42
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 2
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 2
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 1
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: NEG
25839: PUSH
25840: LD_INT 1
25842: NEG
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 2
25850: NEG
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: NEG
25863: PUSH
25864: LD_INT 3
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 3
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 3
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 2
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 3
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 2
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 3
25969: NEG
25970: PUSH
25971: LD_INT 2
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 3
25981: NEG
25982: PUSH
25983: LD_INT 3
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26022: LD_ADDR_VAR 0 43
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 1
26080: NEG
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 2
26118: NEG
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 2
26199: NEG
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: LD_INT 3
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 2
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 3
26256: PUSH
26257: LD_INT 0
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 3
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 3
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 3
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: LD_INT 2
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 3
26318: NEG
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 3
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26370: LD_ADDR_VAR 0 44
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: NEG
26549: PUSH
26550: LD_INT 2
26552: NEG
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 2
26560: NEG
26561: PUSH
26562: LD_INT 3
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 3
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 3
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: LD_INT 3
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: LD_INT 3
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 3
26644: NEG
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: NEG
26668: PUSH
26669: LD_INT 2
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 3
26679: NEG
26680: PUSH
26681: LD_INT 3
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26720: LD_ADDR_VAR 0 45
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: LD_INT 2
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: LD_INT 1
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 2
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: NEG
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 2
26910: NEG
26911: PUSH
26912: LD_INT 3
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 3
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: LD_INT 3
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 2
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 3
26956: PUSH
26957: LD_INT 2
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 3
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 3
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 3
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 3
27017: NEG
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 3
27029: NEG
27030: PUSH
27031: LD_INT 3
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27070: LD_ADDR_VAR 0 46
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 3
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 3
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 3
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 3
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: LD_INT 3
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 2
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: NEG
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 3
27366: NEG
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 3
27377: NEG
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27418: LD_ADDR_VAR 0 47
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27569: LD_ADDR_VAR 0 48
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27716: LD_ADDR_VAR 0 49
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 2
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27860: LD_ADDR_VAR 0 50
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28004: LD_ADDR_VAR 0 51
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28151: LD_ADDR_VAR 0 52
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: LD_INT 2
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 2
28278: NEG
28279: PUSH
28280: LD_INT 2
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28302: LD_ADDR_VAR 0 53
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 2
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 2
28489: NEG
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28532: LD_ADDR_VAR 0 54
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 2
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28762: LD_ADDR_VAR 0 55
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 2
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 2
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 2
28949: NEG
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: LD_INT 2
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28992: LD_ADDR_VAR 0 56
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 1
29050: NEG
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: LD_INT 2
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: LD_INT 2
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 2
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 2
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: NEG
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: LD_INT 2
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29222: LD_ADDR_VAR 0 57
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: LD_INT 1
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: NEG
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29452: LD_ADDR_VAR 0 58
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 1
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: NEG
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: LD_INT 2
29548: NEG
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: LD_INT 2
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29682: LD_ADDR_VAR 0 59
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29770: LD_ADDR_VAR 0 60
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29858: LD_ADDR_VAR 0 61
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29946: LD_ADDR_VAR 0 62
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30034: LD_ADDR_VAR 0 63
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30122: LD_ADDR_VAR 0 64
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
// end ; 1 :
30210: GO 36107
30212: LD_INT 1
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 32843
30220: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30221: LD_ADDR_VAR 0 11
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 3
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 3
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30265: LD_ADDR_VAR 0 12
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30306: LD_ADDR_VAR 0 13
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 3
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: LIST
30345: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30346: LD_ADDR_VAR 0 14
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30387: LD_ADDR_VAR 0 15
30391: PUSH
30392: LD_INT 2
30394: NEG
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 3
30405: NEG
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 3
30416: NEG
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30431: LD_ADDR_VAR 0 16
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 3
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30477: LD_ADDR_VAR 0 17
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: LD_INT 3
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: LD_INT 3
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30521: LD_ADDR_VAR 0 18
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 3
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30562: LD_ADDR_VAR 0 19
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 2
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30602: LD_ADDR_VAR 0 20
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30643: LD_ADDR_VAR 0 21
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 3
30661: NEG
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30687: LD_ADDR_VAR 0 22
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 3
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 3
30706: NEG
30707: PUSH
30708: LD_INT 2
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 3
30718: NEG
30719: PUSH
30720: LD_INT 3
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30733: LD_ADDR_VAR 0 23
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 3
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: LD_INT 4
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30777: LD_ADDR_VAR 0 24
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 4
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30818: LD_ADDR_VAR 0 25
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 4
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30858: LD_ADDR_VAR 0 26
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 4
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30899: LD_ADDR_VAR 0 27
30903: PUSH
30904: LD_INT 3
30906: NEG
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 3
30917: NEG
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30943: LD_ADDR_VAR 0 28
30947: PUSH
30948: LD_INT 3
30950: NEG
30951: PUSH
30952: LD_INT 3
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 3
30962: NEG
30963: PUSH
30964: LD_INT 4
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 4
30974: NEG
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: LIST
30988: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30989: LD_ADDR_VAR 0 29
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: LD_INT 3
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: LD_INT 3
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 4
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 4
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 3
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: LD_INT 5
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 5
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: LD_INT 4
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 6
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 6
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: LD_INT 5
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31144: LD_ADDR_VAR 0 30
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 4
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 4
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 4
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 5
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 5
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 5
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 6
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 6
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31287: LD_ADDR_VAR 0 31
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: LD_INT 3
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 4
31334: PUSH
31335: LD_INT 4
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: LD_INT 4
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 5
31354: PUSH
31355: LD_INT 4
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 5
31364: PUSH
31365: LD_INT 5
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 4
31374: PUSH
31375: LD_INT 5
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 6
31384: PUSH
31385: LD_INT 5
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 6
31394: PUSH
31395: LD_INT 6
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 5
31404: PUSH
31405: LD_INT 6
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31426: LD_ADDR_VAR 0 32
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 4
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 4
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: LD_INT 5
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 4
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 6
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: LD_INT 6
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31569: LD_ADDR_VAR 0 33
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 3
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 4
31621: NEG
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 4
31632: NEG
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 4
31644: NEG
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 5
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 5
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 5
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 6
31689: NEG
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 6
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31724: LD_ADDR_VAR 0 34
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: LD_INT 3
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: NEG
31744: PUSH
31745: LD_INT 2
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 3
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: LD_INT 4
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 4
31779: NEG
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 4
31791: NEG
31792: PUSH
31793: LD_INT 4
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 4
31803: NEG
31804: PUSH
31805: LD_INT 5
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 5
31815: NEG
31816: PUSH
31817: LD_INT 4
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 5
31827: NEG
31828: PUSH
31829: LD_INT 5
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 5
31839: NEG
31840: PUSH
31841: LD_INT 6
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 6
31851: NEG
31852: PUSH
31853: LD_INT 5
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 6
31863: NEG
31864: PUSH
31865: LD_INT 6
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31887: LD_ADDR_VAR 0 41
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: LD_INT 3
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31931: LD_ADDR_VAR 0 42
31935: PUSH
31936: LD_INT 2
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31972: LD_ADDR_VAR 0 43
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 3
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: LIST
32011: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32012: LD_ADDR_VAR 0 44
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32053: LD_ADDR_VAR 0 45
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 3
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32097: LD_ADDR_VAR 0 46
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: LD_INT 3
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: LD_INT 2
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32143: LD_ADDR_VAR 0 47
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: LD_INT 3
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: LD_INT 3
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32176: LD_ADDR_VAR 0 48
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 2
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32207: LD_ADDR_VAR 0 49
32211: PUSH
32212: LD_INT 3
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32236: LD_ADDR_VAR 0 50
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32265: LD_ADDR_VAR 0 51
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: NEG
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32296: LD_ADDR_VAR 0 52
32300: PUSH
32301: LD_INT 3
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 3
32315: NEG
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32329: LD_ADDR_VAR 0 53
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: LD_INT 3
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32373: LD_ADDR_VAR 0 54
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32414: LD_ADDR_VAR 0 55
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 3
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: LD_INT 3
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32454: LD_ADDR_VAR 0 56
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: LIST
32494: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32495: LD_ADDR_VAR 0 57
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 3
32513: NEG
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32539: LD_ADDR_VAR 0 58
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: LD_INT 3
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 3
32570: NEG
32571: PUSH
32572: LD_INT 3
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: LIST
32584: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32585: LD_ADDR_VAR 0 59
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 2
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: LIST
32628: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32629: LD_ADDR_VAR 0 60
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32670: LD_ADDR_VAR 0 61
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: LIST
32709: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32710: LD_ADDR_VAR 0 62
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32751: LD_ADDR_VAR 0 63
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32795: LD_ADDR_VAR 0 64
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: LD_INT 2
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
// end ; 2 :
32841: GO 36107
32843: LD_INT 2
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 36106
32851: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32852: LD_ADDR_VAR 0 29
32856: PUSH
32857: LD_INT 4
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 4
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 5
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 5
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 4
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 5
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: LD_INT 3
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 4
32982: PUSH
32983: LD_INT 4
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: LD_INT 3
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 4
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 2
33032: PUSH
33033: LD_INT 4
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 4
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: LD_INT 3
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: LD_INT 4
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 5
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: LD_INT 4
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 3
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: LD_INT 5
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 2
33124: NEG
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 4
33191: NEG
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 4
33202: NEG
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 4
33214: NEG
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 2
33226: NEG
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 4
33237: NEG
33238: PUSH
33239: LD_INT 4
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 4
33249: NEG
33250: PUSH
33251: LD_INT 5
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 3
33261: NEG
33262: PUSH
33263: LD_INT 4
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: NEG
33274: PUSH
33275: LD_INT 3
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 3
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 5
33297: NEG
33298: PUSH
33299: LD_INT 4
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 5
33309: NEG
33310: PUSH
33311: LD_INT 5
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: NEG
33322: PUSH
33323: LD_INT 5
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 5
33333: NEG
33334: PUSH
33335: LD_INT 3
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33390: LD_ADDR_VAR 0 30
33394: PUSH
33395: LD_INT 4
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 4
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 5
33417: PUSH
33418: LD_INT 4
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 5
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 4
33437: PUSH
33438: LD_INT 5
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 3
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 5
33467: PUSH
33468: LD_INT 3
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 3
33477: PUSH
33478: LD_INT 5
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 4
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 4
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 4
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: NEG
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 4
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 3
33603: NEG
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 4
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 5
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 5
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 5
33659: NEG
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 3
33671: NEG
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 3
33682: NEG
33683: PUSH
33684: LD_INT 3
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 3
33694: NEG
33695: PUSH
33696: LD_INT 4
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 3
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 3
33730: NEG
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 4
33742: NEG
33743: PUSH
33744: LD_INT 3
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 4
33754: NEG
33755: PUSH
33756: LD_INT 4
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: LD_INT 4
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 4
33778: NEG
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: LD_INT 4
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 5
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: LD_INT 4
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 3
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: LD_INT 3
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: LD_INT 4
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 5
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: LD_INT 3
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: LD_INT 5
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33937: LD_ADDR_VAR 0 31
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 4
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 4
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: LD_INT 5
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 5
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: LD_INT 4
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: LD_INT 3
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 5
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: NEG
34027: PUSH
34028: LD_INT 3
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: NEG
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 3
34048: NEG
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 3
34082: NEG
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 4
34093: NEG
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 4
34104: NEG
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 4
34116: NEG
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 2
34128: NEG
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 4
34139: NEG
34140: PUSH
34141: LD_INT 4
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 4
34151: NEG
34152: PUSH
34153: LD_INT 5
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 3
34163: NEG
34164: PUSH
34165: LD_INT 4
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 3
34175: NEG
34176: PUSH
34177: LD_INT 3
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 4
34187: NEG
34188: PUSH
34189: LD_INT 3
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 5
34199: NEG
34200: PUSH
34201: LD_INT 4
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 5
34211: NEG
34212: PUSH
34213: LD_INT 5
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 3
34223: NEG
34224: PUSH
34225: LD_INT 5
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 5
34235: NEG
34236: PUSH
34237: LD_INT 3
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 3
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: LD_INT 4
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 3
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 2
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 3
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 4
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: LD_INT 4
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 4
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 4
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 5
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 5
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 4
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 3
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 3
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 5
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34487: LD_ADDR_VAR 0 32
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 4
34505: NEG
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: NEG
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: NEG
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 4
34539: NEG
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 5
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 5
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 5
34573: NEG
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 3
34585: NEG
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 3
34596: NEG
34597: PUSH
34598: LD_INT 3
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 3
34608: NEG
34609: PUSH
34610: LD_INT 4
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 3
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: LD_INT 2
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 3
34644: NEG
34645: PUSH
34646: LD_INT 2
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 4
34656: NEG
34657: PUSH
34658: LD_INT 3
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 4
34668: NEG
34669: PUSH
34670: LD_INT 4
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 2
34680: NEG
34681: PUSH
34682: LD_INT 4
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 4
34692: NEG
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 4
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 5
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 4
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: LD_INT 3
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 3
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: LD_INT 4
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 5
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: LD_INT 3
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: NEG
34795: PUSH
34796: LD_INT 5
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 4
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 4
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 4
34899: PUSH
34900: LD_INT 4
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 5
34919: PUSH
34920: LD_INT 4
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 5
34929: PUSH
34930: LD_INT 5
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 4
34939: PUSH
34940: LD_INT 5
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 5
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 5
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35034: LD_ADDR_VAR 0 33
35038: PUSH
35039: LD_INT 4
35041: NEG
35042: PUSH
35043: LD_INT 4
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 4
35053: NEG
35054: PUSH
35055: LD_INT 5
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: NEG
35066: PUSH
35067: LD_INT 4
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 3
35077: NEG
35078: PUSH
35079: LD_INT 3
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 4
35089: NEG
35090: PUSH
35091: LD_INT 3
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 5
35101: NEG
35102: PUSH
35103: LD_INT 4
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 5
35113: NEG
35114: PUSH
35115: LD_INT 5
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 3
35125: NEG
35126: PUSH
35127: LD_INT 5
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 5
35137: NEG
35138: PUSH
35139: LD_INT 3
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 3
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 4
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 3
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 2
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 4
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 2
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: NEG
35240: PUSH
35241: LD_INT 4
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 4
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 4
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 5
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 5
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 3
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 3
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 3
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 5
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 3
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 4
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 4
35374: PUSH
35375: LD_INT 4
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: LD_INT 4
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: LD_INT 3
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 2
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 4
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: LD_INT 4
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 4
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 3
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 4
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 5
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 5
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: NEG
35485: PUSH
35486: LD_INT 4
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 3
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: LD_INT 5
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: LD_INT 3
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35572: LD_ADDR_VAR 0 34
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 4
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 5
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 4
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: LD_INT 3
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 3
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: LD_INT 4
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 5
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 3
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: LD_INT 5
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 4
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 4
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 4
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 4
35774: PUSH
35775: LD_INT 4
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 4
35784: PUSH
35785: LD_INT 3
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 5
35794: PUSH
35795: LD_INT 4
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 5
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 4
35814: PUSH
35815: LD_INT 5
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 3
35824: PUSH
35825: LD_INT 4
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 3
35834: PUSH
35835: LD_INT 3
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 5
35844: PUSH
35845: LD_INT 3
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: LD_INT 5
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 4
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 4
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: LD_INT 4
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 4
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 4
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 3
35980: NEG
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 3
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 4
36002: NEG
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 5
36013: NEG
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 5
36024: NEG
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 5
36036: NEG
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 3
36048: NEG
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// end ; end ;
36104: GO 36107
36106: POP
// case btype of b_depot , b_warehouse :
36107: LD_VAR 0 1
36111: PUSH
36112: LD_INT 0
36114: DOUBLE
36115: EQUAL
36116: IFTRUE 36126
36118: LD_INT 1
36120: DOUBLE
36121: EQUAL
36122: IFTRUE 36126
36124: GO 36327
36126: POP
// case nation of nation_american :
36127: LD_VAR 0 5
36131: PUSH
36132: LD_INT 1
36134: DOUBLE
36135: EQUAL
36136: IFTRUE 36140
36138: GO 36196
36140: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36141: LD_ADDR_VAR 0 9
36145: PUSH
36146: LD_VAR 0 11
36150: PUSH
36151: LD_VAR 0 12
36155: PUSH
36156: LD_VAR 0 13
36160: PUSH
36161: LD_VAR 0 14
36165: PUSH
36166: LD_VAR 0 15
36170: PUSH
36171: LD_VAR 0 16
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: PUSH
36184: LD_VAR 0 4
36188: PUSH
36189: LD_INT 1
36191: PLUS
36192: ARRAY
36193: ST_TO_ADDR
36194: GO 36325
36196: LD_INT 2
36198: DOUBLE
36199: EQUAL
36200: IFTRUE 36204
36202: GO 36260
36204: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36205: LD_ADDR_VAR 0 9
36209: PUSH
36210: LD_VAR 0 17
36214: PUSH
36215: LD_VAR 0 18
36219: PUSH
36220: LD_VAR 0 19
36224: PUSH
36225: LD_VAR 0 20
36229: PUSH
36230: LD_VAR 0 21
36234: PUSH
36235: LD_VAR 0 22
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: PUSH
36248: LD_VAR 0 4
36252: PUSH
36253: LD_INT 1
36255: PLUS
36256: ARRAY
36257: ST_TO_ADDR
36258: GO 36325
36260: LD_INT 3
36262: DOUBLE
36263: EQUAL
36264: IFTRUE 36268
36266: GO 36324
36268: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36269: LD_ADDR_VAR 0 9
36273: PUSH
36274: LD_VAR 0 23
36278: PUSH
36279: LD_VAR 0 24
36283: PUSH
36284: LD_VAR 0 25
36288: PUSH
36289: LD_VAR 0 26
36293: PUSH
36294: LD_VAR 0 27
36298: PUSH
36299: LD_VAR 0 28
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: PUSH
36312: LD_VAR 0 4
36316: PUSH
36317: LD_INT 1
36319: PLUS
36320: ARRAY
36321: ST_TO_ADDR
36322: GO 36325
36324: POP
36325: GO 36874
36327: LD_INT 2
36329: DOUBLE
36330: EQUAL
36331: IFTRUE 36341
36333: LD_INT 3
36335: DOUBLE
36336: EQUAL
36337: IFTRUE 36341
36339: GO 36397
36341: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36342: LD_ADDR_VAR 0 9
36346: PUSH
36347: LD_VAR 0 29
36351: PUSH
36352: LD_VAR 0 30
36356: PUSH
36357: LD_VAR 0 31
36361: PUSH
36362: LD_VAR 0 32
36366: PUSH
36367: LD_VAR 0 33
36371: PUSH
36372: LD_VAR 0 34
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: PUSH
36385: LD_VAR 0 4
36389: PUSH
36390: LD_INT 1
36392: PLUS
36393: ARRAY
36394: ST_TO_ADDR
36395: GO 36874
36397: LD_INT 16
36399: DOUBLE
36400: EQUAL
36401: IFTRUE 36453
36403: LD_INT 17
36405: DOUBLE
36406: EQUAL
36407: IFTRUE 36453
36409: LD_INT 18
36411: DOUBLE
36412: EQUAL
36413: IFTRUE 36453
36415: LD_INT 19
36417: DOUBLE
36418: EQUAL
36419: IFTRUE 36453
36421: LD_INT 20
36423: DOUBLE
36424: EQUAL
36425: IFTRUE 36453
36427: LD_INT 21
36429: DOUBLE
36430: EQUAL
36431: IFTRUE 36453
36433: LD_INT 23
36435: DOUBLE
36436: EQUAL
36437: IFTRUE 36453
36439: LD_INT 24
36441: DOUBLE
36442: EQUAL
36443: IFTRUE 36453
36445: LD_INT 25
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36453
36451: GO 36509
36453: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: LD_VAR 0 35
36463: PUSH
36464: LD_VAR 0 36
36468: PUSH
36469: LD_VAR 0 37
36473: PUSH
36474: LD_VAR 0 38
36478: PUSH
36479: LD_VAR 0 39
36483: PUSH
36484: LD_VAR 0 40
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: PUSH
36497: LD_VAR 0 4
36501: PUSH
36502: LD_INT 1
36504: PLUS
36505: ARRAY
36506: ST_TO_ADDR
36507: GO 36874
36509: LD_INT 6
36511: DOUBLE
36512: EQUAL
36513: IFTRUE 36565
36515: LD_INT 7
36517: DOUBLE
36518: EQUAL
36519: IFTRUE 36565
36521: LD_INT 8
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36565
36527: LD_INT 13
36529: DOUBLE
36530: EQUAL
36531: IFTRUE 36565
36533: LD_INT 12
36535: DOUBLE
36536: EQUAL
36537: IFTRUE 36565
36539: LD_INT 15
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36565
36545: LD_INT 11
36547: DOUBLE
36548: EQUAL
36549: IFTRUE 36565
36551: LD_INT 14
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36565
36557: LD_INT 10
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36621
36565: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36566: LD_ADDR_VAR 0 9
36570: PUSH
36571: LD_VAR 0 41
36575: PUSH
36576: LD_VAR 0 42
36580: PUSH
36581: LD_VAR 0 43
36585: PUSH
36586: LD_VAR 0 44
36590: PUSH
36591: LD_VAR 0 45
36595: PUSH
36596: LD_VAR 0 46
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: PUSH
36609: LD_VAR 0 4
36613: PUSH
36614: LD_INT 1
36616: PLUS
36617: ARRAY
36618: ST_TO_ADDR
36619: GO 36874
36621: LD_INT 36
36623: DOUBLE
36624: EQUAL
36625: IFTRUE 36629
36627: GO 36685
36629: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36630: LD_ADDR_VAR 0 9
36634: PUSH
36635: LD_VAR 0 47
36639: PUSH
36640: LD_VAR 0 48
36644: PUSH
36645: LD_VAR 0 49
36649: PUSH
36650: LD_VAR 0 50
36654: PUSH
36655: LD_VAR 0 51
36659: PUSH
36660: LD_VAR 0 52
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: PUSH
36673: LD_VAR 0 4
36677: PUSH
36678: LD_INT 1
36680: PLUS
36681: ARRAY
36682: ST_TO_ADDR
36683: GO 36874
36685: LD_INT 4
36687: DOUBLE
36688: EQUAL
36689: IFTRUE 36711
36691: LD_INT 5
36693: DOUBLE
36694: EQUAL
36695: IFTRUE 36711
36697: LD_INT 34
36699: DOUBLE
36700: EQUAL
36701: IFTRUE 36711
36703: LD_INT 37
36705: DOUBLE
36706: EQUAL
36707: IFTRUE 36711
36709: GO 36767
36711: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36712: LD_ADDR_VAR 0 9
36716: PUSH
36717: LD_VAR 0 53
36721: PUSH
36722: LD_VAR 0 54
36726: PUSH
36727: LD_VAR 0 55
36731: PUSH
36732: LD_VAR 0 56
36736: PUSH
36737: LD_VAR 0 57
36741: PUSH
36742: LD_VAR 0 58
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: PUSH
36755: LD_VAR 0 4
36759: PUSH
36760: LD_INT 1
36762: PLUS
36763: ARRAY
36764: ST_TO_ADDR
36765: GO 36874
36767: LD_INT 31
36769: DOUBLE
36770: EQUAL
36771: IFTRUE 36817
36773: LD_INT 32
36775: DOUBLE
36776: EQUAL
36777: IFTRUE 36817
36779: LD_INT 33
36781: DOUBLE
36782: EQUAL
36783: IFTRUE 36817
36785: LD_INT 27
36787: DOUBLE
36788: EQUAL
36789: IFTRUE 36817
36791: LD_INT 26
36793: DOUBLE
36794: EQUAL
36795: IFTRUE 36817
36797: LD_INT 28
36799: DOUBLE
36800: EQUAL
36801: IFTRUE 36817
36803: LD_INT 29
36805: DOUBLE
36806: EQUAL
36807: IFTRUE 36817
36809: LD_INT 30
36811: DOUBLE
36812: EQUAL
36813: IFTRUE 36817
36815: GO 36873
36817: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36818: LD_ADDR_VAR 0 9
36822: PUSH
36823: LD_VAR 0 59
36827: PUSH
36828: LD_VAR 0 60
36832: PUSH
36833: LD_VAR 0 61
36837: PUSH
36838: LD_VAR 0 62
36842: PUSH
36843: LD_VAR 0 63
36847: PUSH
36848: LD_VAR 0 64
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: PUSH
36861: LD_VAR 0 4
36865: PUSH
36866: LD_INT 1
36868: PLUS
36869: ARRAY
36870: ST_TO_ADDR
36871: GO 36874
36873: POP
// temp_list2 = [ ] ;
36874: LD_ADDR_VAR 0 10
36878: PUSH
36879: EMPTY
36880: ST_TO_ADDR
// for i in temp_list do
36881: LD_ADDR_VAR 0 8
36885: PUSH
36886: LD_VAR 0 9
36890: PUSH
36891: FOR_IN
36892: IFFALSE 36944
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36894: LD_ADDR_VAR 0 10
36898: PUSH
36899: LD_VAR 0 10
36903: PUSH
36904: LD_VAR 0 8
36908: PUSH
36909: LD_INT 1
36911: ARRAY
36912: PUSH
36913: LD_VAR 0 2
36917: PLUS
36918: PUSH
36919: LD_VAR 0 8
36923: PUSH
36924: LD_INT 2
36926: ARRAY
36927: PUSH
36928: LD_VAR 0 3
36932: PLUS
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: ADD
36941: ST_TO_ADDR
36942: GO 36891
36944: POP
36945: POP
// result = temp_list2 ;
36946: LD_ADDR_VAR 0 7
36950: PUSH
36951: LD_VAR 0 10
36955: ST_TO_ADDR
// end ; end_of_file
36956: LD_VAR 0 7
36960: RET
// every 1 do var i ;
36961: GO 36963
36963: DISABLE
36964: LD_INT 0
36966: PPUSH
// begin Video ( true ) ;
36967: LD_INT 1
36969: PPUSH
36970: CALL 6999 0 1
// CenterOnXY ( 53 , 40 ) ;
36974: LD_INT 53
36976: PPUSH
36977: LD_INT 40
36979: PPUSH
36980: CALL_OW 84
// wait ( 0 0$5 ) ;
36984: LD_INT 175
36986: PPUSH
36987: CALL_OW 67
// if gammaCommander = 1 then
36991: LD_EXP 12
36995: PUSH
36996: LD_INT 1
36998: EQUAL
36999: IFFALSE 37013
// Say ( Donaldson , D1-Don-1 ) ;
37001: LD_EXP 3
37005: PPUSH
37006: LD_STRING D1-Don-1
37008: PPUSH
37009: CALL_OW 88
// if gammaCommander = 2 then
37013: LD_EXP 12
37017: PUSH
37018: LD_INT 2
37020: EQUAL
37021: IFFALSE 37035
// Say ( Brown , D1-Brown-1 ) ;
37023: LD_EXP 2
37027: PPUSH
37028: LD_STRING D1-Brown-1
37030: PPUSH
37031: CALL_OW 88
// if gammaCommander = 3 then
37035: LD_EXP 12
37039: PUSH
37040: LD_INT 3
37042: EQUAL
37043: IFFALSE 37057
// Say ( Houten , D1-VanH-1 ) ;
37045: LD_EXP 13
37049: PPUSH
37050: LD_STRING D1-VanH-1
37052: PPUSH
37053: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37057: LD_EXP 22
37061: PPUSH
37062: LD_STRING D1-Har-1
37064: PPUSH
37065: CALL_OW 94
// if gammaCommander = 1 then
37069: LD_EXP 12
37073: PUSH
37074: LD_INT 1
37076: EQUAL
37077: IFFALSE 37091
// Say ( Donaldson , D1-Don-2 ) ;
37079: LD_EXP 3
37083: PPUSH
37084: LD_STRING D1-Don-2
37086: PPUSH
37087: CALL_OW 88
// if gammaCommander = 2 then
37091: LD_EXP 12
37095: PUSH
37096: LD_INT 2
37098: EQUAL
37099: IFFALSE 37113
// Say ( Brown , D1-Brown-2 ) ;
37101: LD_EXP 2
37105: PPUSH
37106: LD_STRING D1-Brown-2
37108: PPUSH
37109: CALL_OW 88
// if gammaCommander = 3 then
37113: LD_EXP 12
37117: PUSH
37118: LD_INT 3
37120: EQUAL
37121: IFFALSE 37135
// Say ( Houten , D1-VanH-2 ) ;
37123: LD_EXP 13
37127: PPUSH
37128: LD_STRING D1-VanH-2
37130: PPUSH
37131: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37135: LD_EXP 22
37139: PPUSH
37140: LD_STRING D1-Har-2
37142: PPUSH
37143: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37147: LD_INT 22
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 33
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 61
37169: PUSH
37170: EMPTY
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: PPUSH
37178: CALL_OW 69
37182: IFFALSE 37247
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37184: LD_ADDR_VAR 0 1
37188: PUSH
37189: LD_INT 22
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 33
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 61
37211: PUSH
37212: EMPTY
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: PPUSH
37220: CALL_OW 69
37224: PUSH
37225: FOR_IN
37226: IFFALSE 37245
// ComAgressiveMove ( i , 70 , 41 ) ;
37228: LD_VAR 0 1
37232: PPUSH
37233: LD_INT 70
37235: PPUSH
37236: LD_INT 41
37238: PPUSH
37239: CALL_OW 114
37243: GO 37225
37245: POP
37246: POP
// repeat wait ( 0 0$1 ) ;
37247: LD_INT 35
37249: PPUSH
37250: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37254: LD_ADDR_VAR 0 1
37258: PUSH
37259: LD_INT 22
37261: PUSH
37262: LD_INT 6
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: EMPTY
37270: LIST
37271: PPUSH
37272: CALL_OW 69
37276: PUSH
37277: FOR_IN
37278: IFFALSE 37297
// ComAgressiveMove ( i , 54 , 20 ) ;
37280: LD_VAR 0 1
37284: PPUSH
37285: LD_INT 54
37287: PPUSH
37288: LD_INT 20
37290: PPUSH
37291: CALL_OW 114
37295: GO 37277
37297: POP
37298: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37299: LD_ADDR_VAR 0 1
37303: PUSH
37304: LD_INT 22
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 25
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: LD_INT 54
37329: PUSH
37330: EMPTY
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: PPUSH
37342: CALL_OW 69
37346: PUSH
37347: FOR_IN
37348: IFFALSE 37382
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37350: LD_VAR 0 1
37354: PPUSH
37355: LD_INT 70
37357: PPUSH
37358: LD_INT 41
37360: PPUSH
37361: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37365: LD_VAR 0 1
37369: PPUSH
37370: LD_INT 46
37372: PPUSH
37373: LD_INT 39
37375: PPUSH
37376: CALL_OW 174
// end ;
37380: GO 37347
37382: POP
37383: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37384: LD_ADDR_VAR 0 1
37388: PUSH
37389: LD_INT 22
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 21
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 3
37411: PUSH
37412: LD_INT 24
37414: PUSH
37415: LD_INT 500
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: PPUSH
37431: CALL_OW 69
37435: PUSH
37436: FOR_IN
37437: IFFALSE 37470
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37439: LD_VAR 0 1
37443: PPUSH
37444: LD_EXP 37
37448: PPUSH
37449: CALL_OW 250
37453: PPUSH
37454: LD_EXP 37
37458: PPUSH
37459: CALL_OW 251
37463: PPUSH
37464: CALL_OW 111
37468: GO 37436
37470: POP
37471: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37472: LD_INT 22
37474: PUSH
37475: LD_INT 6
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 21
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 24
37494: PUSH
37495: LD_INT 250
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: PPUSH
37507: CALL_OW 69
37511: PUSH
37512: LD_INT 5
37514: LESS
37515: IFFALSE 37247
// Video ( false ) ;
37517: LD_INT 0
37519: PPUSH
37520: CALL 6999 0 1
// ChangeMissionObjectives ( M1 ) ;
37524: LD_STRING M1
37526: PPUSH
37527: CALL_OW 337
// SaveForQuickRestart ;
37531: CALL_OW 22
// startCutscene = 0 ;
37535: LD_ADDR_EXP 38
37539: PUSH
37540: LD_INT 0
37542: ST_TO_ADDR
// end ;
37543: PPOPN 1
37545: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37546: LD_EXP 38
37550: IFFALSE 37641
37552: GO 37554
37554: DISABLE
37555: LD_INT 0
37557: PPUSH
37558: PPUSH
// begin enable ;
37559: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37560: LD_ADDR_VAR 0 1
37564: PUSH
37565: LD_INT 22
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 21
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 3
37587: PUSH
37588: LD_INT 24
37590: PUSH
37591: LD_INT 700
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: PPUSH
37607: CALL_OW 69
37611: ST_TO_ADDR
// for i in tmp do
37612: LD_ADDR_VAR 0 2
37616: PUSH
37617: LD_VAR 0 1
37621: PUSH
37622: FOR_IN
37623: IFFALSE 37639
// SetLives ( i , 700 ) ;
37625: LD_VAR 0 2
37629: PPUSH
37630: LD_INT 700
37632: PPUSH
37633: CALL_OW 234
37637: GO 37622
37639: POP
37640: POP
// end ;
37641: PPOPN 2
37643: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 do
37644: LD_INT 22
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 101
37656: PUSH
37657: LD_INT 6
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PPUSH
37668: CALL_OW 69
37672: PUSH
37673: LD_INT 0
37675: EQUAL
37676: IFFALSE 37925
37678: GO 37680
37680: DISABLE
// begin PrepareSupportFromDelta ;
37681: CALL 3796 0 0
// firstAttack = 1 ;
37685: LD_ADDR_EXP 33
37689: PUSH
37690: LD_INT 1
37692: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37693: LD_EXP 8
37697: PPUSH
37698: CALL_OW 302
37702: IFFALSE 37718
// Say ( Gladstone , D2-Glad-1 ) else
37704: LD_EXP 8
37708: PPUSH
37709: LD_STRING D2-Glad-1
37711: PPUSH
37712: CALL_OW 88
37716: GO 37826
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37718: LD_INT 4
37720: PPUSH
37721: LD_INT 22
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 21
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: LD_INT 25
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 25
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 25
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 25
37776: PUSH
37777: LD_INT 4
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: PPUSH
37796: CALL_OW 70
37800: PUSH
37801: LD_EXP 15
37805: PUSH
37806: LD_EXP 14
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: DIFF
37815: PPUSH
37816: LD_STRING D2-Sol1-1
37818: PPUSH
37819: LD_STRING D2-FSol1-1
37821: PPUSH
37822: CALL 7027 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37826: LD_EXP 3
37830: PPUSH
37831: CALL_OW 302
37835: PUSH
37836: LD_EXP 12
37840: PUSH
37841: LD_INT 1
37843: EQUAL
37844: AND
37845: IFFALSE 37859
// Say ( Donaldson , D2-Don-1 ) ;
37847: LD_EXP 3
37851: PPUSH
37852: LD_STRING D2-Don-1
37854: PPUSH
37855: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37859: LD_EXP 2
37863: PPUSH
37864: CALL_OW 302
37868: PUSH
37869: LD_EXP 12
37873: PUSH
37874: LD_INT 2
37876: EQUAL
37877: AND
37878: IFFALSE 37892
// Say ( Brown , D2-Brown-1 ) ;
37880: LD_EXP 2
37884: PPUSH
37885: LD_STRING D2-Brown-1
37887: PPUSH
37888: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37892: LD_EXP 13
37896: PPUSH
37897: CALL_OW 302
37901: PUSH
37902: LD_EXP 12
37906: PUSH
37907: LD_INT 3
37909: EQUAL
37910: AND
37911: IFFALSE 37925
// Say ( Houten , D2-VanH-1 ) ;
37913: LD_EXP 13
37917: PPUSH
37918: LD_STRING D2-VanH-1
37920: PPUSH
37921: CALL_OW 88
// end ;
37925: END
// every 0 0$1 do var none ;
37926: GO 37928
37928: DISABLE
37929: LD_INT 0
37931: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37932: LD_STRING 07_time
37934: PPUSH
37935: LD_INT 12600
37937: PPUSH
37938: CALL_OW 30
37942: PUSH
37943: LD_INT 3
37945: DIV
37946: PPUSH
37947: CALL_OW 67
// PrepareMacmillanSquad ;
37951: CALL 4458 0 0
// CenterNowOnUnits ( JMM ) ;
37955: LD_EXP 1
37959: PPUSH
37960: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37964: LD_EXP 1
37968: PPUSH
37969: LD_STRING D3-JMM-1
37971: PPUSH
37972: CALL_OW 88
// JMMArrive = 1 ;
37976: LD_ADDR_EXP 39
37980: PUSH
37981: LD_INT 1
37983: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37984: LD_EXP 3
37988: PPUSH
37989: CALL_OW 302
37993: PUSH
37994: LD_EXP 12
37998: PUSH
37999: LD_INT 1
38001: EQUAL
38002: AND
38003: IFFALSE 38019
// begin Say ( Donaldson , D3-Don-1 ) ;
38005: LD_EXP 3
38009: PPUSH
38010: LD_STRING D3-Don-1
38012: PPUSH
38013: CALL_OW 88
// end else
38017: GO 38071
// begin if gammaCommander = 1 then
38019: LD_EXP 12
38023: PUSH
38024: LD_INT 1
38026: EQUAL
38027: IFFALSE 38071
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38029: LD_EXP 11
38033: PPUSH
38034: LD_INT 26
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PPUSH
38044: CALL_OW 72
38048: PPUSH
38049: LD_STRING D3-Sol1-1
38051: PPUSH
38052: LD_STRING D3-Sol1-1
38054: PPUSH
38055: CALL 7027 0 3
// Say ( JMM , D3-JMM-2 ) ;
38059: LD_EXP 1
38063: PPUSH
38064: LD_STRING D3-JMM-2
38066: PPUSH
38067: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38071: LD_EXP 2
38075: PPUSH
38076: CALL_OW 302
38080: PUSH
38081: LD_EXP 12
38085: PUSH
38086: LD_INT 2
38088: EQUAL
38089: AND
38090: IFFALSE 38106
// begin Say ( Brown , D3-Brown-1 ) ;
38092: LD_EXP 2
38096: PPUSH
38097: LD_STRING D3-Brown-1
38099: PPUSH
38100: CALL_OW 88
// end else
38104: GO 38158
// begin if gammaCommander = 2 then
38106: LD_EXP 12
38110: PUSH
38111: LD_INT 2
38113: EQUAL
38114: IFFALSE 38158
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38116: LD_EXP 11
38120: PPUSH
38121: LD_INT 26
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PPUSH
38131: CALL_OW 72
38135: PPUSH
38136: LD_STRING D3-Sol1-1a
38138: PPUSH
38139: LD_STRING D3-Sol1-1a
38141: PPUSH
38142: CALL 7027 0 3
// Say ( JMM , D3-JMM-2 ) ;
38146: LD_EXP 1
38150: PPUSH
38151: LD_STRING D3-JMM-2
38153: PPUSH
38154: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38158: LD_EXP 13
38162: PPUSH
38163: CALL_OW 302
38167: PUSH
38168: LD_EXP 12
38172: PUSH
38173: LD_INT 3
38175: EQUAL
38176: AND
38177: IFFALSE 38193
// begin Say ( Houten , D3-VanH-1 ) ;
38179: LD_EXP 13
38183: PPUSH
38184: LD_STRING D3-VanH-1
38186: PPUSH
38187: CALL_OW 88
// end else
38191: GO 38245
// begin if gammaCommander = 3 then
38193: LD_EXP 12
38197: PUSH
38198: LD_INT 3
38200: EQUAL
38201: IFFALSE 38245
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38203: LD_EXP 11
38207: PPUSH
38208: LD_INT 26
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PPUSH
38218: CALL_OW 72
38222: PPUSH
38223: LD_STRING D3-Sol1-1b
38225: PPUSH
38226: LD_STRING D3-Sol1-1b
38228: PPUSH
38229: CALL 7027 0 3
// Say ( JMM , D3-JMM-2 ) ;
38233: LD_EXP 1
38237: PPUSH
38238: LD_STRING D3-JMM-2
38240: PPUSH
38241: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38245: LD_EXP 15
38249: PPUSH
38250: CALL_OW 302
38254: IFFALSE 38282
// begin Say ( Joan , D3a-Joan-1 ) ;
38256: LD_EXP 15
38260: PPUSH
38261: LD_STRING D3a-Joan-1
38263: PPUSH
38264: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38268: LD_EXP 1
38272: PPUSH
38273: LD_STRING D3a-JMM-1
38275: PPUSH
38276: CALL_OW 88
// end else
38280: GO 38624
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38282: LD_STRING 06_JoanStatus_1
38284: PPUSH
38285: LD_INT 0
38287: PPUSH
38288: CALL_OW 30
38292: PUSH
38293: LD_INT 1
38295: EQUAL
38296: IFFALSE 38624
// begin Say ( JMM , D3b-JMM-1 ) ;
38298: LD_EXP 1
38302: PPUSH
38303: LD_STRING D3b-JMM-1
38305: PPUSH
38306: CALL_OW 88
// if gammaCommander = 1 then
38310: LD_EXP 12
38314: PUSH
38315: LD_INT 1
38317: EQUAL
38318: IFFALSE 38375
// if IsOK ( Donaldson ) then
38320: LD_EXP 3
38324: PPUSH
38325: CALL_OW 302
38329: IFFALSE 38345
// Say ( Donaldson , D3b-Don-1 ) else
38331: LD_EXP 3
38335: PPUSH
38336: LD_STRING D3b-Don-1
38338: PPUSH
38339: CALL_OW 88
38343: GO 38375
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38345: LD_EXP 11
38349: PPUSH
38350: LD_INT 26
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PPUSH
38360: CALL_OW 72
38364: PPUSH
38365: LD_STRING D3b-Sol1-1
38367: PPUSH
38368: LD_STRING D3b-Sol1-1
38370: PPUSH
38371: CALL 7027 0 3
// if gammaCommander = 2 then
38375: LD_EXP 12
38379: PUSH
38380: LD_INT 2
38382: EQUAL
38383: IFFALSE 38440
// if IsOk ( Brown ) then
38385: LD_EXP 2
38389: PPUSH
38390: CALL_OW 302
38394: IFFALSE 38410
// Say ( Brown , D3b-Brown-1 ) else
38396: LD_EXP 2
38400: PPUSH
38401: LD_STRING D3b-Brown-1
38403: PPUSH
38404: CALL_OW 88
38408: GO 38440
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38410: LD_EXP 11
38414: PPUSH
38415: LD_INT 26
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PPUSH
38425: CALL_OW 72
38429: PPUSH
38430: LD_STRING D3b-Sol1-1
38432: PPUSH
38433: LD_STRING D3b-Sol1-1
38435: PPUSH
38436: CALL 7027 0 3
// if gammaCommander = 3 then
38440: LD_EXP 12
38444: PUSH
38445: LD_INT 3
38447: EQUAL
38448: IFFALSE 38505
// if IsOk ( Houten ) then
38450: LD_EXP 13
38454: PPUSH
38455: CALL_OW 302
38459: IFFALSE 38475
// Say ( Houten , D3b-VanH-1 ) else
38461: LD_EXP 13
38465: PPUSH
38466: LD_STRING D3b-VanH-1
38468: PPUSH
38469: CALL_OW 88
38473: GO 38505
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38475: LD_EXP 11
38479: PPUSH
38480: LD_INT 26
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PPUSH
38490: CALL_OW 72
38494: PPUSH
38495: LD_STRING D3b-Sol1-1
38497: PPUSH
38498: LD_STRING D3b-Sol1-1
38500: PPUSH
38501: CALL 7027 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38505: LD_EXP 11
38509: PPUSH
38510: LD_INT 26
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PPUSH
38520: CALL_OW 72
38524: PUSH
38525: LD_EXP 12
38529: PUSH
38530: LD_INT 1
38532: EQUAL
38533: PUSH
38534: LD_EXP 3
38538: PPUSH
38539: CALL_OW 302
38543: AND
38544: OR
38545: PUSH
38546: LD_EXP 12
38550: PUSH
38551: LD_INT 2
38553: EQUAL
38554: PUSH
38555: LD_EXP 2
38559: PPUSH
38560: CALL_OW 302
38564: AND
38565: OR
38566: PUSH
38567: LD_EXP 12
38571: PUSH
38572: LD_INT 3
38574: EQUAL
38575: PUSH
38576: LD_EXP 13
38580: PPUSH
38581: CALL_OW 302
38585: AND
38586: OR
38587: IFFALSE 38601
// Say ( JMM , D3b-JMM-2 ) ;
38589: LD_EXP 1
38593: PPUSH
38594: LD_STRING D3b-JMM-2
38596: PPUSH
38597: CALL_OW 88
// if IsOK ( Lisa ) then
38601: LD_EXP 6
38605: PPUSH
38606: CALL_OW 302
38610: IFFALSE 38624
// Say ( Lisa , D3b-Lisa-2 ) ;
38612: LD_EXP 6
38616: PPUSH
38617: LD_STRING D3b-Lisa-2
38619: PPUSH
38620: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
38624: LD_ADDR_VAR 0 1
38628: PUSH
38629: LD_EXP 1
38633: PUSH
38634: LD_EXP 2
38638: PUSH
38639: LD_EXP 3
38643: PUSH
38644: LD_EXP 4
38648: PUSH
38649: LD_EXP 5
38653: PUSH
38654: LD_EXP 6
38658: PUSH
38659: LD_EXP 7
38663: PUSH
38664: LD_EXP 8
38668: PUSH
38669: LD_EXP 9
38673: PUSH
38674: LD_EXP 10
38678: PUSH
38679: LD_EXP 15
38683: PUSH
38684: LD_EXP 14
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: PUSH
38703: LD_EXP 42
38707: ADD
38708: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38709: LD_INT 22
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 21
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 26
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 25
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 25
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 25
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 25
38774: PUSH
38775: LD_INT 4
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: PPUSH
38795: CALL_OW 69
38799: PUSH
38800: LD_VAR 0 1
38804: DIFF
38805: PPUSH
38806: LD_STRING DCa-Sol1-1
38808: PPUSH
38809: LD_STRING DCa-Sol1-1
38811: PPUSH
38812: CALL 7027 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38816: LD_EXP 1
38820: PPUSH
38821: LD_STRING DCb-JMM-1
38823: PPUSH
38824: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38828: LD_INT 22
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 21
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 26
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 25
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 25
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 25
38883: PUSH
38884: LD_INT 3
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 25
38893: PUSH
38894: LD_INT 4
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: PPUSH
38914: CALL_OW 69
38918: PUSH
38919: LD_VAR 0 1
38923: DIFF
38924: PPUSH
38925: LD_STRING DCb-Sol1-1
38927: PPUSH
38928: LD_STRING DCb-Sol1-1
38930: PPUSH
38931: CALL 7027 0 3
// Say ( JMM , DCb-JMM-2 ) ;
38935: LD_EXP 1
38939: PPUSH
38940: LD_STRING DCb-JMM-2
38942: PPUSH
38943: CALL_OW 88
// secondAttack = 1 ;
38947: LD_ADDR_EXP 34
38951: PUSH
38952: LD_INT 1
38954: ST_TO_ADDR
// end ;
38955: PPOPN 1
38957: END
// every 0 0$01 trigger JMMArrive = 1 do
38958: LD_EXP 39
38962: PUSH
38963: LD_INT 1
38965: EQUAL
38966: IFFALSE 39046
38968: GO 38970
38970: DISABLE
// begin wait ( 3 3$0 ) ;
38971: LD_INT 6300
38973: PPUSH
38974: CALL_OW 67
// DialogueOn ;
38978: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
38982: LD_EXP 23
38986: PPUSH
38987: LD_STRING D4-Pow-1
38989: PPUSH
38990: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
38994: LD_EXP 1
38998: PPUSH
38999: LD_STRING D4-JMM-1
39001: PPUSH
39002: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39006: LD_EXP 23
39010: PPUSH
39011: LD_STRING D4-Pow-2
39013: PPUSH
39014: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39018: LD_EXP 1
39022: PPUSH
39023: LD_STRING D4-JMM-2
39025: PPUSH
39026: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39030: LD_EXP 23
39034: PPUSH
39035: LD_STRING D4-Pow-3
39037: PPUSH
39038: CALL_OW 94
// DialogueOff ;
39042: CALL_OW 7
// end ;
39046: END
// every 0 0$01 trigger JMMArrive = 1 do
39047: LD_EXP 39
39051: PUSH
39052: LD_INT 1
39054: EQUAL
39055: IFFALSE 39087
39057: GO 39059
39059: DISABLE
// begin wait ( 8 8$0 ) ;
39060: LD_INT 16800
39062: PPUSH
39063: CALL_OW 67
// DialogueOn ;
39067: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39071: LD_EXP 23
39075: PPUSH
39076: LD_STRING D4a-Pow-1
39078: PPUSH
39079: CALL_OW 94
// DialogueOff ;
39083: CALL_OW 7
// end ;
39087: END
// every 0 0$01 trigger JMMArrive = 1 do
39088: LD_EXP 39
39092: PUSH
39093: LD_INT 1
39095: EQUAL
39096: IFFALSE 39141
39098: GO 39100
39100: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39101: LD_INT 21000
39103: PUSH
39104: LD_INT 25200
39106: PUSH
39107: LD_INT 31500
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: PUSH
39115: LD_OWVAR 67
39119: ARRAY
39120: PPUSH
39121: CALL_OW 67
// PrepareSikorsky ;
39125: CALL 5583 0 0
// SikorskyArrive = 1 ;
39129: LD_ADDR_EXP 18
39133: PUSH
39134: LD_INT 1
39136: ST_TO_ADDR
// PrepareSikorskyArmy ;
39137: CALL 5723 0 0
// end ;
39141: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39142: LD_EXP 17
39146: PPUSH
39147: LD_INT 5
39149: PPUSH
39150: CALL_OW 308
39154: IFFALSE 39346
39156: GO 39158
39158: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39159: LD_EXP 17
39163: PPUSH
39164: CALL_OW 87
// DialogueOn ;
39168: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39172: LD_EXP 16
39176: PPUSH
39177: LD_STRING D5-Sik-1
39179: PPUSH
39180: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39184: LD_EXP 1
39188: PPUSH
39189: LD_STRING D5-JMM-1a
39191: PPUSH
39192: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39196: LD_EXP 16
39200: PPUSH
39201: LD_STRING D5-Sik-2
39203: PPUSH
39204: CALL_OW 88
// case query ( QSikorski ) of 1 :
39208: LD_STRING QSikorski
39210: PPUSH
39211: CALL_OW 97
39215: PUSH
39216: LD_INT 1
39218: DOUBLE
39219: EQUAL
39220: IFTRUE 39224
39222: GO 39247
39224: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39225: LD_EXP 16
39229: PPUSH
39230: LD_STRING D5a-Sik-1
39232: PPUSH
39233: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39237: LD_ADDR_EXP 19
39241: PUSH
39242: LD_INT 2100
39244: ST_TO_ADDR
// end ; 2 :
39245: GO 39334
39247: LD_INT 2
39249: DOUBLE
39250: EQUAL
39251: IFTRUE 39255
39253: GO 39278
39255: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39256: LD_EXP 16
39260: PPUSH
39261: LD_STRING D5b-Sik-1
39263: PPUSH
39264: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39268: LD_ADDR_EXP 19
39272: PUSH
39273: LD_INT 10500
39275: ST_TO_ADDR
// end ; 3 :
39276: GO 39334
39278: LD_INT 3
39280: DOUBLE
39281: EQUAL
39282: IFTRUE 39286
39284: GO 39333
39286: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39287: LD_EXP 16
39291: PPUSH
39292: LD_STRING D5c-Sik-1
39294: PPUSH
39295: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39299: LD_EXP 1
39303: PPUSH
39304: LD_STRING D5c-JMM-1
39306: PPUSH
39307: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39311: LD_EXP 16
39315: PPUSH
39316: LD_STRING D5c-Sik-2
39318: PPUSH
39319: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39323: LD_ADDR_EXP 19
39327: PUSH
39328: LD_INT 10500
39330: ST_TO_ADDR
// end ; end ;
39331: GO 39334
39333: POP
// DialogueOff ;
39334: CALL_OW 7
// timerStatus = 1 ;
39338: LD_ADDR_EXP 35
39342: PUSH
39343: LD_INT 1
39345: ST_TO_ADDR
// end ;
39346: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39347: LD_EXP 19
39351: PUSH
39352: LD_INT 35
39354: LESS
39355: IFFALSE 39403
39357: GO 39359
39359: DISABLE
// begin timerStatus = 0 ;
39360: LD_ADDR_EXP 35
39364: PUSH
39365: LD_INT 0
39367: ST_TO_ADDR
// DialogueOn ;
39368: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39372: LD_EXP 16
39376: PPUSH
39377: LD_STRING D6-Sik-1
39379: PPUSH
39380: CALL_OW 88
// DialogueOff ;
39384: CALL_OW 7
// SikorskyAI = 1 ;
39388: LD_ADDR_EXP 20
39392: PUSH
39393: LD_INT 1
39395: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39396: LD_STRING M2
39398: PPUSH
39399: CALL_OW 337
// end ;
39403: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39404: LD_EXP 17
39408: PPUSH
39409: LD_INT 18
39411: PPUSH
39412: CALL_OW 308
39416: IFFALSE 39500
39418: GO 39420
39420: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39421: LD_EXP 16
39425: PPUSH
39426: LD_STRING D7-Sik-1
39428: PPUSH
39429: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39433: LD_EXP 1
39437: PPUSH
39438: LD_INT 24
39440: PPUSH
39441: CALL_OW 308
39445: PUSH
39446: LD_EXP 1
39450: PPUSH
39451: CALL_OW 310
39455: OR
39456: IFFALSE 39480
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39458: LD_EXP 16
39462: PPUSH
39463: LD_STRING D7a-Sik-1
39465: PPUSH
39466: CALL_OW 88
// SikorskyStatus = 1 ;
39470: LD_ADDR_EXP 21
39474: PUSH
39475: LD_INT 1
39477: ST_TO_ADDR
// end else
39478: GO 39500
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39480: LD_EXP 16
39484: PPUSH
39485: LD_STRING D7b-Sik-1
39487: PPUSH
39488: CALL_OW 88
// SikorskyStatus = 2 ;
39492: LD_ADDR_EXP 21
39496: PUSH
39497: LD_INT 2
39499: ST_TO_ADDR
// end ; end ;
39500: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39501: LD_EXP 36
39505: PUSH
39506: LD_INT 1
39508: EQUAL
39509: IFFALSE 39618
39511: GO 39513
39513: DISABLE
39514: LD_INT 0
39516: PPUSH
// begin enable ;
39517: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39518: LD_ADDR_VAR 0 1
39522: PUSH
39523: LD_INT 22
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PPUSH
39533: CALL_OW 69
39537: PUSH
39538: FOR_IN
39539: IFFALSE 39566
// if IsInArea ( i , RussianEscape ) then
39541: LD_VAR 0 1
39545: PPUSH
39546: LD_INT 22
39548: PPUSH
39549: CALL_OW 308
39553: IFFALSE 39564
// RemoveUnit ( i ) ;
39555: LD_VAR 0 1
39559: PPUSH
39560: CALL_OW 64
39564: GO 39538
39566: POP
39567: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39568: LD_ADDR_VAR 0 1
39572: PUSH
39573: LD_INT 22
39575: PUSH
39576: LD_INT 6
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PPUSH
39583: CALL_OW 69
39587: PUSH
39588: FOR_IN
39589: IFFALSE 39616
// if IsInArea ( i , RussianEscape ) then
39591: LD_VAR 0 1
39595: PPUSH
39596: LD_INT 22
39598: PPUSH
39599: CALL_OW 308
39603: IFFALSE 39614
// RemoveUnit ( i ) ;
39605: LD_VAR 0 1
39609: PPUSH
39610: CALL_OW 64
39614: GO 39588
39616: POP
39617: POP
// end ; end_of_file
39618: PPOPN 1
39620: END
// on BuildingComplete ( building ) do var tmp , un ;
39621: LD_INT 0
39623: PPUSH
39624: PPUSH
// begin if GetSide ( building ) = 3 then
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 255
39634: PUSH
39635: LD_INT 3
39637: EQUAL
39638: IFFALSE 40175
// begin if GetBType ( building ) = b_depot then
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 266
39649: PUSH
39650: LD_INT 0
39652: EQUAL
39653: IFFALSE 39721
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL_OW 274
39664: PPUSH
39665: LD_INT 1
39667: PPUSH
39668: LD_INT 5000
39670: PPUSH
39671: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 274
39684: PPUSH
39685: LD_INT 2
39687: PPUSH
39688: LD_INT 5000
39690: PPUSH
39691: CALL_OW 277
// SetBName ( building , konev ) ;
39695: LD_VAR 0 1
39699: PPUSH
39700: LD_STRING konev
39702: PPUSH
39703: CALL_OW 500
// ruDepot = building ;
39707: LD_ADDR_EXP 28
39711: PUSH
39712: LD_VAR 0 1
39716: ST_TO_ADDR
// BuildRussianBase ;
39717: CALL 7638 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39721: LD_VAR 0 1
39725: PPUSH
39726: CALL_OW 266
39730: PUSH
39731: LD_INT 0
39733: EQUAL
39734: PUSH
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 266
39744: PUSH
39745: LD_INT 2
39747: EQUAL
39748: OR
39749: PUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL_OW 266
39759: PUSH
39760: LD_INT 4
39762: EQUAL
39763: OR
39764: IFFALSE 39775
// ComUpgrade ( building ) ;
39766: LD_VAR 0 1
39770: PPUSH
39771: CALL_OW 146
// if GetBType ( building ) = b_lab then
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 266
39784: PUSH
39785: LD_INT 6
39787: EQUAL
39788: IFFALSE 39839
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39790: LD_VAR 0 1
39794: PPUSH
39795: LD_INT 10
39797: PPUSH
39798: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39802: LD_VAR 0 1
39806: PPUSH
39807: LD_INT 12
39809: PPUSH
39810: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39814: LD_INT 3
39816: PPUSH
39817: LD_VAR 0 1
39821: PPUSH
39822: LD_INT 3
39824: PPUSH
39825: CALL 8182 0 3
// ruLab = building ;
39829: LD_ADDR_EXP 29
39833: PUSH
39834: LD_VAR 0 1
39838: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 266
39848: PUSH
39849: LD_INT 32
39851: EQUAL
39852: IFFALSE 39970
// begin uc_side = 3 ;
39854: LD_ADDR_OWVAR 20
39858: PUSH
39859: LD_INT 3
39861: ST_TO_ADDR
// uc_nation = 3 ;
39862: LD_ADDR_OWVAR 21
39866: PUSH
39867: LD_INT 3
39869: ST_TO_ADDR
// hc_gallery =  ;
39870: LD_ADDR_OWVAR 33
39874: PUSH
39875: LD_STRING 
39877: ST_TO_ADDR
// hc_name =  ;
39878: LD_ADDR_OWVAR 26
39882: PUSH
39883: LD_STRING 
39885: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39886: LD_INT 0
39888: PPUSH
39889: LD_INT 1
39891: PPUSH
39892: LD_EXP 25
39896: PPUSH
39897: LD_EXP 26
39901: PPUSH
39902: CALL_OW 12
39906: PPUSH
39907: CALL_OW 380
// un = CreateHuman ;
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: CALL_OW 44
39920: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39921: LD_VAR 0 3
39925: PPUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39935: LD_VAR 0 1
39939: PPUSH
39940: LD_INT 43
39942: PUSH
39943: LD_INT 44
39945: PUSH
39946: LD_INT 46
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PPUSH
39957: LD_INT 3
39959: PPUSH
39960: CALL_OW 12
39964: ARRAY
39965: PPUSH
39966: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
39970: LD_VAR 0 1
39974: PPUSH
39975: CALL_OW 266
39979: PUSH
39980: LD_INT 33
39982: EQUAL
39983: IFFALSE 40020
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39985: LD_VAR 0 1
39989: PPUSH
39990: LD_INT 43
39992: PUSH
39993: LD_INT 44
39995: PUSH
39996: LD_INT 46
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: PPUSH
40007: LD_INT 3
40009: PPUSH
40010: CALL_OW 12
40014: ARRAY
40015: PPUSH
40016: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40020: LD_VAR 0 1
40024: PPUSH
40025: CALL_OW 266
40029: PUSH
40030: LD_INT 32
40032: EQUAL
40033: IFFALSE 40070
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40035: LD_VAR 0 1
40039: PPUSH
40040: LD_INT 43
40042: PUSH
40043: LD_INT 44
40045: PUSH
40046: LD_INT 46
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: PPUSH
40057: LD_INT 3
40059: PPUSH
40060: CALL_OW 12
40064: ARRAY
40065: PPUSH
40066: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 266
40079: PUSH
40080: LD_INT 24
40082: EQUAL
40083: IFFALSE 40093
// russianAI = 1 ;
40085: LD_ADDR_EXP 27
40089: PUSH
40090: LD_INT 1
40092: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40093: LD_EXP 31
40097: PUSH
40098: LD_INT 0
40100: GREATER
40101: IFFALSE 40175
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40103: LD_ADDR_EXP 31
40107: PUSH
40108: LD_EXP 31
40112: PPUSH
40113: LD_INT 1
40115: PPUSH
40116: CALL_OW 3
40120: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40121: LD_ADDR_EXP 31
40125: PUSH
40126: LD_EXP 31
40130: PPUSH
40131: LD_INT 1
40133: PPUSH
40134: CALL_OW 3
40138: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40139: LD_ADDR_EXP 31
40143: PUSH
40144: LD_EXP 31
40148: PPUSH
40149: LD_INT 1
40151: PPUSH
40152: CALL_OW 3
40156: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40157: LD_ADDR_EXP 31
40161: PUSH
40162: LD_EXP 31
40166: PPUSH
40167: LD_INT 1
40169: PPUSH
40170: CALL_OW 3
40174: ST_TO_ADDR
// end ; end ; end ;
40175: PPOPN 3
40177: END
// on UpgradeComplete ( building ) do var i ;
40178: LD_INT 0
40180: PPUSH
// begin if GetSide ( building ) = 3 then
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 255
40190: PUSH
40191: LD_INT 3
40193: EQUAL
40194: IFFALSE 40375
// begin if GetBType ( building ) = b_factory then
40196: LD_VAR 0 1
40200: PPUSH
40201: CALL_OW 266
40205: PUSH
40206: LD_INT 3
40208: EQUAL
40209: IFFALSE 40276
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40211: LD_ADDR_VAR 0 2
40215: PUSH
40216: LD_INT 22
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 25
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PPUSH
40240: CALL_OW 69
40244: PUSH
40245: FOR_IN
40246: IFFALSE 40264
// ComEnterUnit ( i , building ) ;
40248: LD_VAR 0 2
40252: PPUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 120
40262: GO 40245
40264: POP
40265: POP
// ruFab = building ;
40266: LD_ADDR_EXP 30
40270: PUSH
40271: LD_VAR 0 1
40275: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 266
40285: PUSH
40286: LD_INT 8
40288: EQUAL
40289: IFFALSE 40346
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40291: LD_ADDR_VAR 0 2
40295: PUSH
40296: LD_INT 22
40298: PUSH
40299: LD_INT 3
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 25
40308: PUSH
40309: LD_INT 4
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PPUSH
40320: CALL_OW 69
40324: PUSH
40325: FOR_IN
40326: IFFALSE 40344
// ComEnterUnit ( i , building ) ;
40328: LD_VAR 0 2
40332: PPUSH
40333: LD_VAR 0 1
40337: PPUSH
40338: CALL_OW 120
40342: GO 40325
40344: POP
40345: POP
// if GetBType ( building ) = b_warehouse then
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 266
40355: PUSH
40356: LD_INT 1
40358: EQUAL
40359: IFFALSE 40375
// begin ComEnterUnit ( Borodin , building ) ;
40361: LD_EXP 24
40365: PPUSH
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 120
// end ; end ; end ;
40375: PPOPN 2
40377: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40378: LD_VAR 0 1
40382: PPUSH
40383: CALL_OW 247
40387: PUSH
40388: LD_INT 2
40390: EQUAL
40391: PUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 263
40401: PUSH
40402: LD_INT 3
40404: EQUAL
40405: AND
40406: PUSH
40407: LD_EXP 41
40411: PUSH
40412: LD_INT 0
40414: EQUAL
40415: AND
40416: IFFALSE 40534
// begin varEvent1 = 1 ;
40418: LD_ADDR_EXP 41
40422: PUSH
40423: LD_INT 1
40425: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40426: LD_VAR 0 1
40430: PPUSH
40431: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40435: LD_INT 22
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 21
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 25
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 25
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 25
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 25
40490: PUSH
40491: LD_INT 4
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: LIST
40509: PPUSH
40510: CALL_OW 69
40514: PUSH
40515: LD_EXP 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: DIFF
40523: PPUSH
40524: LD_STRING DC-Sol1-1
40526: PPUSH
40527: LD_STRING DC-FSol1-1
40529: PPUSH
40530: CALL 7027 0 3
// end ; end ;
40534: PPOPN 1
40536: END
// on UnitDestroyed ( unit ) do var i ;
40537: LD_INT 0
40539: PPUSH
// begin if unit = Joan then
40540: LD_VAR 0 1
40544: PUSH
40545: LD_EXP 15
40549: EQUAL
40550: IFFALSE 40559
// DeleteCharacters ( Joan ) ;
40552: LD_STRING Joan
40554: PPUSH
40555: CALL_OW 40
// if GetSide ( unit ) = 3 then
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 255
40568: PUSH
40569: LD_INT 3
40571: EQUAL
40572: IFFALSE 41342
// begin if GetType ( unit ) = unit_building then
40574: LD_VAR 0 1
40578: PPUSH
40579: CALL_OW 247
40583: PUSH
40584: LD_INT 3
40586: EQUAL
40587: IFFALSE 41279
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40589: LD_VAR 0 1
40593: PPUSH
40594: CALL_OW 266
40598: PUSH
40599: LD_INT 31
40601: EQUAL
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 266
40612: PUSH
40613: LD_INT 32
40615: EQUAL
40616: OR
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 266
40627: PUSH
40628: LD_INT 36
40630: EQUAL
40631: OR
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 266
40642: PUSH
40643: LD_INT 0
40645: EQUAL
40646: OR
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 266
40657: PUSH
40658: LD_INT 24
40660: EQUAL
40661: OR
40662: PUSH
40663: LD_VAR 0 1
40667: PPUSH
40668: CALL_OW 266
40672: PUSH
40673: LD_INT 17
40675: EQUAL
40676: OR
40677: PUSH
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 266
40687: PUSH
40688: LD_INT 25
40690: EQUAL
40691: OR
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 266
40702: PUSH
40703: LD_INT 19
40705: EQUAL
40706: OR
40707: PUSH
40708: LD_VAR 0 1
40712: PPUSH
40713: CALL_OW 266
40717: PUSH
40718: LD_INT 20
40720: EQUAL
40721: OR
40722: PUSH
40723: LD_VAR 0 1
40727: PPUSH
40728: CALL_OW 266
40732: PUSH
40733: LD_INT 18
40735: EQUAL
40736: OR
40737: PUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 266
40747: PUSH
40748: LD_INT 21
40750: EQUAL
40751: OR
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 266
40762: PUSH
40763: LD_INT 23
40765: EQUAL
40766: OR
40767: PUSH
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 266
40777: PUSH
40778: LD_INT 16
40780: EQUAL
40781: OR
40782: PUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 266
40792: PUSH
40793: LD_INT 6
40795: EQUAL
40796: OR
40797: PUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 266
40807: PUSH
40808: LD_INT 29
40810: EQUAL
40811: OR
40812: PUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 266
40822: PUSH
40823: LD_INT 26
40825: EQUAL
40826: OR
40827: PUSH
40828: LD_VAR 0 1
40832: PPUSH
40833: CALL_OW 266
40837: PUSH
40838: LD_INT 30
40840: EQUAL
40841: OR
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 266
40852: PUSH
40853: LD_INT 28
40855: EQUAL
40856: OR
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: CALL_OW 266
40867: PUSH
40868: LD_INT 27
40870: EQUAL
40871: OR
40872: PUSH
40873: LD_VAR 0 1
40877: PPUSH
40878: CALL_OW 266
40882: PUSH
40883: LD_INT 33
40885: EQUAL
40886: OR
40887: PUSH
40888: LD_VAR 0 1
40892: PPUSH
40893: CALL_OW 266
40897: PUSH
40898: LD_INT 2
40900: EQUAL
40901: OR
40902: PUSH
40903: LD_VAR 0 1
40907: PPUSH
40908: CALL_OW 266
40912: PUSH
40913: LD_INT 4
40915: EQUAL
40916: OR
40917: IFFALSE 41003
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40919: LD_ADDR_EXP 31
40923: PUSH
40924: LD_EXP 31
40928: PUSH
40929: LD_VAR 0 1
40933: PPUSH
40934: CALL_OW 266
40938: ADD
40939: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40940: LD_ADDR_EXP 31
40944: PUSH
40945: LD_EXP 31
40949: PUSH
40950: LD_VAR 0 1
40954: PPUSH
40955: CALL_OW 250
40959: ADD
40960: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40961: LD_ADDR_EXP 31
40965: PUSH
40966: LD_EXP 31
40970: PUSH
40971: LD_VAR 0 1
40975: PPUSH
40976: CALL_OW 251
40980: ADD
40981: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40982: LD_ADDR_EXP 31
40986: PUSH
40987: LD_EXP 31
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 254
41001: ADD
41002: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41003: LD_VAR 0 1
41007: PPUSH
41008: CALL_OW 266
41012: PUSH
41013: LD_INT 1
41015: EQUAL
41016: IFFALSE 41095
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41018: LD_ADDR_EXP 31
41022: PUSH
41023: LD_EXP 31
41027: PUSH
41028: LD_INT 0
41030: ADD
41031: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41032: LD_ADDR_EXP 31
41036: PUSH
41037: LD_EXP 31
41041: PUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 250
41051: ADD
41052: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41053: LD_ADDR_EXP 31
41057: PUSH
41058: LD_EXP 31
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 251
41072: ADD
41073: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41074: LD_ADDR_EXP 31
41078: PUSH
41079: LD_EXP 31
41083: PUSH
41084: LD_VAR 0 1
41088: PPUSH
41089: CALL_OW 254
41093: ADD
41094: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 266
41104: PUSH
41105: LD_INT 3
41107: EQUAL
41108: IFFALSE 41187
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41110: LD_ADDR_EXP 31
41114: PUSH
41115: LD_EXP 31
41119: PUSH
41120: LD_INT 2
41122: ADD
41123: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41124: LD_ADDR_EXP 31
41128: PUSH
41129: LD_EXP 31
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 250
41143: ADD
41144: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41145: LD_ADDR_EXP 31
41149: PUSH
41150: LD_EXP 31
41154: PUSH
41155: LD_VAR 0 1
41159: PPUSH
41160: CALL_OW 251
41164: ADD
41165: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41166: LD_ADDR_EXP 31
41170: PUSH
41171: LD_EXP 31
41175: PUSH
41176: LD_VAR 0 1
41180: PPUSH
41181: CALL_OW 254
41185: ADD
41186: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41187: LD_VAR 0 1
41191: PPUSH
41192: CALL_OW 266
41196: PUSH
41197: LD_INT 5
41199: EQUAL
41200: IFFALSE 41279
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41202: LD_ADDR_EXP 31
41206: PUSH
41207: LD_EXP 31
41211: PUSH
41212: LD_INT 4
41214: ADD
41215: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41216: LD_ADDR_EXP 31
41220: PUSH
41221: LD_EXP 31
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: CALL_OW 250
41235: ADD
41236: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41237: LD_ADDR_EXP 31
41241: PUSH
41242: LD_EXP 31
41246: PUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 251
41256: ADD
41257: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41258: LD_ADDR_EXP 31
41262: PUSH
41263: LD_EXP 31
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 254
41277: ADD
41278: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 247
41288: PUSH
41289: LD_INT 1
41291: EQUAL
41292: IFFALSE 41342
// begin for i in defenders_list do
41294: LD_ADDR_VAR 0 2
41298: PUSH
41299: LD_EXP 32
41303: PUSH
41304: FOR_IN
41305: IFFALSE 41340
// if i = unit then
41307: LD_VAR 0 2
41311: PUSH
41312: LD_VAR 0 1
41316: EQUAL
41317: IFFALSE 41338
// defenders_list = defenders_list diff [ unit ] ;
41319: LD_ADDR_EXP 32
41323: PUSH
41324: LD_EXP 32
41328: PUSH
41329: LD_VAR 0 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: DIFF
41337: ST_TO_ADDR
41338: GO 41304
41340: POP
41341: POP
// end ; end ; end ; end_of_file
41342: PPOPN 2
41344: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41345: GO 41347
41347: DISABLE
41348: LD_INT 0
41350: PPUSH
// begin enemyWayX = [ ] ;
41351: LD_ADDR_EXP 46
41355: PUSH
41356: EMPTY
41357: ST_TO_ADDR
// enemyWayY = [ ] ;
41358: LD_ADDR_EXP 47
41362: PUSH
41363: EMPTY
41364: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41365: LD_ADDR_VAR 0 1
41369: PUSH
41370: LD_INT 1
41372: PPUSH
41373: LD_INT 3
41375: PPUSH
41376: CALL_OW 12
41380: ST_TO_ADDR
// if rnd = 1 then
41381: LD_VAR 0 1
41385: PUSH
41386: LD_INT 1
41388: EQUAL
41389: IFFALSE 41429
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41391: LD_ADDR_EXP 46
41395: PUSH
41396: LD_INT 73
41398: PUSH
41399: LD_INT 46
41401: PUSH
41402: LD_INT 29
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41410: LD_ADDR_EXP 47
41414: PUSH
41415: LD_INT 71
41417: PUSH
41418: LD_INT 43
41420: PUSH
41421: LD_INT 29
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// end ; if rnd = 2 then
41429: LD_VAR 0 1
41433: PUSH
41434: LD_INT 2
41436: EQUAL
41437: IFFALSE 41461
// begin enemyWayX = [ 64 ] ;
41439: LD_ADDR_EXP 46
41443: PUSH
41444: LD_INT 64
41446: PUSH
41447: EMPTY
41448: LIST
41449: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41450: LD_ADDR_EXP 47
41454: PUSH
41455: LD_INT 43
41457: PUSH
41458: EMPTY
41459: LIST
41460: ST_TO_ADDR
// end ; if rnd = 3 then
41461: LD_VAR 0 1
41465: PUSH
41466: LD_INT 3
41468: EQUAL
41469: IFFALSE 41493
// begin enemyWayX = [ 80 ] ;
41471: LD_ADDR_EXP 46
41475: PUSH
41476: LD_INT 80
41478: PUSH
41479: EMPTY
41480: LIST
41481: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41482: LD_ADDR_EXP 47
41486: PUSH
41487: LD_INT 28
41489: PUSH
41490: EMPTY
41491: LIST
41492: ST_TO_ADDR
// end ; enable ;
41493: ENABLE
// end ;
41494: PPOPN 1
41496: END
// every 0 0$1 do
41497: GO 41499
41499: DISABLE
// begin enable ;
41500: ENABLE
// if escapeAvalaible = 0 then
41501: LD_EXP 36
41505: PUSH
41506: LD_INT 0
41508: EQUAL
41509: IFFALSE 41521
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41511: LD_INT 3
41513: PPUSH
41514: LD_INT 6
41516: PPUSH
41517: CALL 8423 0 2
// if escapeAvalaible = 0 then
41521: LD_EXP 36
41525: PUSH
41526: LD_INT 0
41528: EQUAL
41529: IFFALSE 41541
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41531: LD_INT 1
41533: PPUSH
41534: LD_INT 24
41536: PPUSH
41537: CALL 9083 0 2
// if russianAI = 1 then
41541: LD_EXP 27
41545: PUSH
41546: LD_INT 1
41548: EQUAL
41549: IFFALSE 41619
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41551: LD_INT 3
41553: PPUSH
41554: LD_INT 7
41556: PPUSH
41557: LD_INT 6
41559: PPUSH
41560: LD_EXP 29
41564: PPUSH
41565: CALL 11521 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41569: LD_INT 3
41571: PPUSH
41572: LD_EXP 28
41576: PPUSH
41577: LD_INT 6
41579: PPUSH
41580: LD_EXP 31
41584: PPUSH
41585: CALL 11115 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41589: LD_INT 3
41591: PPUSH
41592: LD_INT 26
41594: PPUSH
41595: LD_EXP 46
41599: PPUSH
41600: LD_EXP 47
41604: PPUSH
41605: CALL 9983 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41609: LD_INT 3
41611: PPUSH
41612: LD_INT 1
41614: PPUSH
41615: CALL 12065 0 2
// end ; if SikorskyArrive = 1 then
41619: LD_EXP 18
41623: PUSH
41624: LD_INT 1
41626: EQUAL
41627: IFFALSE 41645
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41629: LD_INT 3
41631: PPUSH
41632: LD_INT 10
41634: PPUSH
41635: LD_INT 53
41637: PPUSH
41638: LD_INT 59
41640: PPUSH
41641: CALL 9780 0 4
// end ;
41645: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41646: LD_EXP 27
41650: PUSH
41651: LD_INT 1
41653: EQUAL
41654: IFFALSE 41930
41656: GO 41658
41658: DISABLE
41659: LD_INT 0
41661: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41662: LD_ADDR_VAR 0 1
41666: PUSH
41667: LD_INT 22
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 21
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 30
41689: PUSH
41690: LD_INT 32
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 3
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 35
41705: PUSH
41706: LD_INT 43
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 35
41715: PUSH
41716: LD_INT 44
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 35
41725: PUSH
41726: LD_INT 46
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: PPUSH
41749: CALL_OW 69
41753: PUSH
41754: FOR_IN
41755: IFFALSE 41794
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41757: LD_VAR 0 1
41761: PPUSH
41762: LD_INT 43
41764: PUSH
41765: LD_INT 44
41767: PUSH
41768: LD_INT 46
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PPUSH
41779: LD_INT 3
41781: PPUSH
41782: CALL_OW 12
41786: ARRAY
41787: PPUSH
41788: CALL_OW 431
41792: GO 41754
41794: POP
41795: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41796: LD_ADDR_VAR 0 1
41800: PUSH
41801: LD_INT 22
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 21
41813: PUSH
41814: LD_INT 3
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 30
41823: PUSH
41824: LD_INT 33
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: LD_INT 35
41839: PUSH
41840: LD_INT 43
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 35
41849: PUSH
41850: LD_INT 44
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 35
41859: PUSH
41860: LD_INT 46
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 69
41887: PUSH
41888: FOR_IN
41889: IFFALSE 41928
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41891: LD_VAR 0 1
41895: PPUSH
41896: LD_INT 43
41898: PUSH
41899: LD_INT 44
41901: PUSH
41902: LD_INT 46
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PPUSH
41913: LD_INT 3
41915: PPUSH
41916: CALL_OW 12
41920: ARRAY
41921: PPUSH
41922: CALL_OW 431
41926: GO 41888
41928: POP
41929: POP
// end ;
41930: PPOPN 1
41932: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41933: LD_EXP 24
41937: PPUSH
41938: CALL_OW 310
41942: NOT
41943: PUSH
41944: LD_EXP 28
41948: PPUSH
41949: CALL_OW 302
41953: AND
41954: PUSH
41955: LD_EXP 28
41959: PPUSH
41960: CALL_OW 255
41964: PUSH
41965: LD_INT 3
41967: EQUAL
41968: AND
41969: IFFALSE 41989
41971: GO 41973
41973: DISABLE
// begin enable ;
41974: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41975: LD_EXP 24
41979: PPUSH
41980: LD_EXP 28
41984: PPUSH
41985: CALL_OW 120
// end ;
41989: END
// every 0 0$1 trigger SikorskyAI = 1 do
41990: LD_EXP 20
41994: PUSH
41995: LD_INT 1
41997: EQUAL
41998: IFFALSE 42033
42000: GO 42002
42002: DISABLE
// begin enable ;
42003: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42004: LD_INT 4
42006: PPUSH
42007: LD_INT 10
42009: PPUSH
42010: LD_INT 93
42012: PPUSH
42013: LD_INT 93
42015: PPUSH
42016: CALL 9780 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42020: LD_INT 4
42022: PPUSH
42023: LD_INT 11
42025: PPUSH
42026: LD_INT 3
42028: PPUSH
42029: CALL 16277 0 3
// end ;
42033: END
// every 0 0$1 trigger SikorskyAI = 1 do
42034: LD_EXP 20
42038: PUSH
42039: LD_INT 1
42041: EQUAL
42042: IFFALSE 42054
42044: GO 42046
42046: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42047: LD_INT 4
42049: PPUSH
42050: CALL 10787 0 1
42054: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42055: LD_EXP 27
42059: PUSH
42060: LD_INT 1
42062: EQUAL
42063: PUSH
42064: LD_EXP 30
42068: PPUSH
42069: CALL_OW 302
42073: AND
42074: PUSH
42075: LD_EXP 30
42079: PPUSH
42080: CALL_OW 255
42084: PUSH
42085: LD_INT 3
42087: EQUAL
42088: AND
42089: PUSH
42090: LD_INT 22
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 21
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 33
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: PPUSH
42125: CALL_OW 69
42129: PUSH
42130: LD_INT 0
42132: EQUAL
42133: AND
42134: IFFALSE 42368
42136: GO 42138
42138: DISABLE
// begin enable ;
42139: ENABLE
// if Difficulty = 1 then
42140: LD_OWVAR 67
42144: PUSH
42145: LD_INT 1
42147: EQUAL
42148: IFFALSE 42216
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42150: LD_INT 3
42152: PPUSH
42153: LD_EXP 30
42157: PPUSH
42158: LD_INT 5
42160: PPUSH
42161: LD_INT 8
42163: PPUSH
42164: CALL_OW 12
42168: PPUSH
42169: LD_INT 43
42171: PUSH
42172: LD_INT 43
42174: PUSH
42175: LD_INT 43
42177: PUSH
42178: LD_INT 43
42180: PUSH
42181: LD_INT 44
42183: PUSH
42184: LD_INT 44
42186: PUSH
42187: LD_INT 44
42189: PUSH
42190: LD_INT 46
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: PPUSH
42203: LD_INT 1
42205: PPUSH
42206: LD_INT 3
42208: PPUSH
42209: LD_INT 24
42211: PPUSH
42212: CALL 9626 0 7
// if Difficulty = 2 then
42216: LD_OWVAR 67
42220: PUSH
42221: LD_INT 2
42223: EQUAL
42224: IFFALSE 42292
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42226: LD_INT 3
42228: PPUSH
42229: LD_EXP 30
42233: PPUSH
42234: LD_INT 6
42236: PPUSH
42237: LD_INT 8
42239: PPUSH
42240: CALL_OW 12
42244: PPUSH
42245: LD_INT 43
42247: PUSH
42248: LD_INT 43
42250: PUSH
42251: LD_INT 44
42253: PUSH
42254: LD_INT 44
42256: PUSH
42257: LD_INT 44
42259: PUSH
42260: LD_INT 44
42262: PUSH
42263: LD_INT 46
42265: PUSH
42266: LD_INT 46
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: PPUSH
42279: LD_INT 1
42281: PPUSH
42282: LD_INT 3
42284: PPUSH
42285: LD_INT 24
42287: PPUSH
42288: CALL 9626 0 7
// if Difficulty = 3 then
42292: LD_OWVAR 67
42296: PUSH
42297: LD_INT 3
42299: EQUAL
42300: IFFALSE 42368
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42302: LD_INT 3
42304: PPUSH
42305: LD_EXP 30
42309: PPUSH
42310: LD_INT 7
42312: PPUSH
42313: LD_INT 8
42315: PPUSH
42316: CALL_OW 12
42320: PPUSH
42321: LD_INT 43
42323: PUSH
42324: LD_INT 43
42326: PUSH
42327: LD_INT 44
42329: PUSH
42330: LD_INT 44
42332: PUSH
42333: LD_INT 44
42335: PUSH
42336: LD_INT 46
42338: PUSH
42339: LD_INT 46
42341: PUSH
42342: LD_INT 46
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: PPUSH
42355: LD_INT 1
42357: PPUSH
42358: LD_INT 3
42360: PPUSH
42361: LD_INT 24
42363: PPUSH
42364: CALL 9626 0 7
// end ;
42368: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42369: LD_EXP 38
42373: PUSH
42374: LD_INT 1
42376: EQUAL
42377: IFFALSE 42459
42379: GO 42381
42381: DISABLE
42382: LD_INT 0
42384: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42385: LD_ADDR_VAR 0 1
42389: PUSH
42390: LD_INT 22
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 21
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: LD_INT 24
42415: PUSH
42416: LD_INT 650
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: PPUSH
42432: CALL_OW 69
42436: PUSH
42437: FOR_IN
42438: IFFALSE 42457
// ComMoveXY ( i , 51 , 12 ) ;
42440: LD_VAR 0 1
42444: PPUSH
42445: LD_INT 51
42447: PPUSH
42448: LD_INT 12
42450: PPUSH
42451: CALL_OW 111
42455: GO 42437
42457: POP
42458: POP
// end ; end_of_file
42459: PPOPN 1
42461: END
// every 1 1$20 trigger firstAttack = 1 do
42462: LD_EXP 33
42466: PUSH
42467: LD_INT 1
42469: EQUAL
42470: IFFALSE 42576
42472: GO 42474
42474: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42475: LD_INT 6
42477: PPUSH
42478: LD_INT 3
42480: PPUSH
42481: LD_INT 5
42483: PPUSH
42484: LD_INT 6
42486: PPUSH
42487: CALL_OW 12
42491: PUSH
42492: LD_INT 5
42494: PPUSH
42495: LD_INT 6
42497: PPUSH
42498: CALL_OW 12
42502: PUSH
42503: LD_INT 5
42505: PPUSH
42506: LD_INT 6
42508: PPUSH
42509: CALL_OW 12
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: PUSH
42519: LD_OWVAR 67
42523: ARRAY
42524: PPUSH
42525: LD_INT 0
42527: PPUSH
42528: LD_INT 0
42530: PPUSH
42531: LD_INT 0
42533: PPUSH
42534: LD_INT 0
42536: PPUSH
42537: LD_EXP 25
42541: PPUSH
42542: LD_EXP 26
42546: PPUSH
42547: CALL_OW 12
42551: PPUSH
42552: LD_INT 16
42554: PPUSH
42555: LD_INT 7
42557: PPUSH
42558: LD_INT 1
42560: PPUSH
42561: LD_INT 1
42563: PPUSH
42564: LD_INT 3
42566: PPUSH
42567: CALL_OW 12
42571: PPUSH
42572: CALL 12295 0 12
42576: END
// every 1 1$40 trigger firstAttack = 1 do
42577: LD_EXP 33
42581: PUSH
42582: LD_INT 1
42584: EQUAL
42585: IFFALSE 42677
42587: GO 42589
42589: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42590: LD_INT 16
42592: PPUSH
42593: LD_INT 6
42595: PPUSH
42596: LD_INT 3
42598: PPUSH
42599: LD_INT 4
42601: PPUSH
42602: CALL_OW 12
42606: PUSH
42607: LD_INT 4
42609: PPUSH
42610: LD_INT 5
42612: PPUSH
42613: CALL_OW 12
42617: PUSH
42618: LD_INT 5
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: PUSH
42626: LD_OWVAR 67
42630: ARRAY
42631: PPUSH
42632: LD_EXP 25
42636: PPUSH
42637: LD_EXP 26
42641: PPUSH
42642: CALL_OW 12
42646: PPUSH
42647: LD_INT 3
42649: PPUSH
42650: LD_INT 1
42652: PPUSH
42653: LD_INT 3
42655: PPUSH
42656: LD_INT 44
42658: PUSH
42659: LD_INT 46
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PPUSH
42666: EMPTY
42667: PPUSH
42668: EMPTY
42669: PPUSH
42670: LD_INT 1
42672: PPUSH
42673: CALL 14588 0 11
42677: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
42678: LD_EXP 33
42682: PUSH
42683: LD_INT 1
42685: EQUAL
42686: PUSH
42687: LD_EXP 39
42691: PUSH
42692: LD_INT 0
42694: EQUAL
42695: AND
42696: IFFALSE 42802
42698: GO 42700
42700: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42701: LD_INT 6
42703: PPUSH
42704: LD_INT 3
42706: PPUSH
42707: LD_INT 5
42709: PPUSH
42710: LD_INT 6
42712: PPUSH
42713: CALL_OW 12
42717: PUSH
42718: LD_INT 5
42720: PPUSH
42721: LD_INT 6
42723: PPUSH
42724: CALL_OW 12
42728: PUSH
42729: LD_INT 5
42731: PPUSH
42732: LD_INT 6
42734: PPUSH
42735: CALL_OW 12
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: PUSH
42745: LD_OWVAR 67
42749: ARRAY
42750: PPUSH
42751: LD_INT 0
42753: PPUSH
42754: LD_INT 0
42756: PPUSH
42757: LD_INT 0
42759: PPUSH
42760: LD_INT 0
42762: PPUSH
42763: LD_EXP 25
42767: PPUSH
42768: LD_EXP 26
42772: PPUSH
42773: CALL_OW 12
42777: PPUSH
42778: LD_INT 16
42780: PPUSH
42781: LD_INT 7
42783: PPUSH
42784: LD_INT 1
42786: PPUSH
42787: LD_INT 1
42789: PPUSH
42790: LD_INT 3
42792: PPUSH
42793: CALL_OW 12
42797: PPUSH
42798: CALL 12295 0 12
42802: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
42803: LD_EXP 33
42807: PUSH
42808: LD_INT 1
42810: EQUAL
42811: PUSH
42812: LD_EXP 39
42816: PUSH
42817: LD_INT 0
42819: EQUAL
42820: AND
42821: IFFALSE 42917
42823: GO 42825
42825: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42826: LD_INT 16
42828: PPUSH
42829: LD_INT 6
42831: PPUSH
42832: LD_INT 5
42834: PPUSH
42835: LD_INT 6
42837: PPUSH
42838: CALL_OW 12
42842: PUSH
42843: LD_INT 6
42845: PPUSH
42846: LD_INT 7
42848: PPUSH
42849: CALL_OW 12
42853: PUSH
42854: LD_INT 7
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: PUSH
42862: LD_OWVAR 67
42866: ARRAY
42867: PPUSH
42868: LD_EXP 25
42872: PPUSH
42873: LD_EXP 26
42877: PPUSH
42878: CALL_OW 12
42882: PPUSH
42883: LD_INT 3
42885: PPUSH
42886: LD_INT 1
42888: PPUSH
42889: LD_INT 3
42891: PPUSH
42892: LD_INT 43
42894: PUSH
42895: LD_INT 44
42897: PUSH
42898: LD_INT 46
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: PPUSH
42906: EMPTY
42907: PPUSH
42908: EMPTY
42909: PPUSH
42910: LD_INT 1
42912: PPUSH
42913: CALL 14588 0 11
42917: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
42918: LD_EXP 33
42922: PUSH
42923: LD_INT 1
42925: EQUAL
42926: PUSH
42927: LD_EXP 39
42931: PUSH
42932: LD_INT 0
42934: EQUAL
42935: AND
42936: IFFALSE 43032
42938: GO 42940
42940: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42941: LD_INT 16
42943: PPUSH
42944: LD_INT 6
42946: PPUSH
42947: LD_INT 5
42949: PPUSH
42950: LD_INT 6
42952: PPUSH
42953: CALL_OW 12
42957: PUSH
42958: LD_INT 6
42960: PPUSH
42961: LD_INT 7
42963: PPUSH
42964: CALL_OW 12
42968: PUSH
42969: LD_INT 7
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: PUSH
42977: LD_OWVAR 67
42981: ARRAY
42982: PPUSH
42983: LD_EXP 25
42987: PPUSH
42988: LD_EXP 26
42992: PPUSH
42993: CALL_OW 12
42997: PPUSH
42998: LD_INT 3
43000: PPUSH
43001: LD_INT 1
43003: PPUSH
43004: LD_INT 3
43006: PPUSH
43007: LD_INT 43
43009: PUSH
43010: LD_INT 44
43012: PUSH
43013: LD_INT 46
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: PPUSH
43021: EMPTY
43022: PPUSH
43023: EMPTY
43024: PPUSH
43025: LD_INT 1
43027: PPUSH
43028: CALL 14588 0 11
43032: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43033: LD_EXP 33
43037: PUSH
43038: LD_INT 1
43040: EQUAL
43041: PUSH
43042: LD_EXP 39
43046: PUSH
43047: LD_INT 0
43049: EQUAL
43050: AND
43051: IFFALSE 43127
43053: GO 43055
43055: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43056: LD_INT 16
43058: PPUSH
43059: LD_INT 6
43061: PPUSH
43062: LD_INT 5
43064: PUSH
43065: LD_INT 6
43067: PUSH
43068: LD_INT 7
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: PUSH
43076: LD_OWVAR 67
43080: ARRAY
43081: PPUSH
43082: LD_EXP 25
43086: PPUSH
43087: LD_EXP 26
43091: PPUSH
43092: CALL_OW 12
43096: PPUSH
43097: LD_INT 3
43099: PPUSH
43100: LD_INT 1
43102: PPUSH
43103: LD_INT 3
43105: PPUSH
43106: LD_INT 44
43108: PUSH
43109: LD_INT 46
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PPUSH
43116: EMPTY
43117: PPUSH
43118: EMPTY
43119: PPUSH
43120: LD_INT 1
43122: PPUSH
43123: CALL 14588 0 11
43127: END
// every 1 1$00 trigger secondAttack = 1 do
43128: LD_EXP 34
43132: PUSH
43133: LD_INT 1
43135: EQUAL
43136: IFFALSE 43218
43138: GO 43140
43140: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43141: LD_INT 6
43143: PPUSH
43144: LD_INT 3
43146: PPUSH
43147: LD_INT 3
43149: PUSH
43150: LD_INT 4
43152: PUSH
43153: LD_INT 5
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: PUSH
43161: LD_OWVAR 67
43165: ARRAY
43166: PPUSH
43167: LD_INT 0
43169: PPUSH
43170: LD_INT 0
43172: PPUSH
43173: LD_INT 0
43175: PPUSH
43176: LD_INT 0
43178: PPUSH
43179: LD_EXP 25
43183: PPUSH
43184: LD_EXP 26
43188: PPUSH
43189: CALL_OW 12
43193: PPUSH
43194: LD_INT 16
43196: PPUSH
43197: LD_INT 7
43199: PPUSH
43200: LD_INT 1
43202: PPUSH
43203: LD_INT 1
43205: PPUSH
43206: LD_INT 3
43208: PPUSH
43209: CALL_OW 12
43213: PPUSH
43214: CALL 12295 0 12
43218: END
// every 1 1$00 trigger secondAttack = 1 do
43219: LD_EXP 34
43223: PUSH
43224: LD_INT 1
43226: EQUAL
43227: IFFALSE 43331
43229: GO 43231
43231: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43232: LD_INT 16
43234: PPUSH
43235: LD_INT 6
43237: PPUSH
43238: LD_INT 5
43240: PPUSH
43241: LD_INT 8
43243: PPUSH
43244: CALL_OW 12
43248: PUSH
43249: LD_INT 6
43251: PPUSH
43252: LD_INT 9
43254: PPUSH
43255: CALL_OW 12
43259: PUSH
43260: LD_INT 7
43262: PPUSH
43263: LD_INT 9
43265: PPUSH
43266: CALL_OW 12
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: PUSH
43276: LD_OWVAR 67
43280: ARRAY
43281: PPUSH
43282: LD_EXP 25
43286: PPUSH
43287: LD_EXP 26
43291: PPUSH
43292: CALL_OW 12
43296: PPUSH
43297: LD_INT 3
43299: PPUSH
43300: LD_INT 1
43302: PPUSH
43303: LD_INT 3
43305: PPUSH
43306: LD_INT 43
43308: PUSH
43309: LD_INT 44
43311: PUSH
43312: LD_INT 46
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: PPUSH
43320: EMPTY
43321: PPUSH
43322: EMPTY
43323: PPUSH
43324: LD_INT 1
43326: PPUSH
43327: CALL 14588 0 11
43331: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43332: LD_EXP 18
43336: PUSH
43337: LD_INT 0
43339: EQUAL
43340: IFFALSE 43422
43342: GO 43344
43344: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43345: LD_INT 6
43347: PPUSH
43348: LD_INT 3
43350: PPUSH
43351: LD_INT 3
43353: PUSH
43354: LD_INT 4
43356: PUSH
43357: LD_INT 5
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: PUSH
43365: LD_OWVAR 67
43369: ARRAY
43370: PPUSH
43371: LD_INT 0
43373: PPUSH
43374: LD_INT 0
43376: PPUSH
43377: LD_INT 0
43379: PPUSH
43380: LD_INT 0
43382: PPUSH
43383: LD_EXP 25
43387: PPUSH
43388: LD_EXP 26
43392: PPUSH
43393: CALL_OW 12
43397: PPUSH
43398: LD_INT 16
43400: PPUSH
43401: LD_INT 7
43403: PPUSH
43404: LD_INT 1
43406: PPUSH
43407: LD_INT 1
43409: PPUSH
43410: LD_INT 3
43412: PPUSH
43413: CALL_OW 12
43417: PPUSH
43418: CALL 12295 0 12
43422: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43423: LD_EXP 18
43427: PUSH
43428: LD_INT 0
43430: EQUAL
43431: IFFALSE 43531
43433: GO 43435
43435: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43436: LD_INT 16
43438: PPUSH
43439: LD_INT 6
43441: PPUSH
43442: LD_INT 5
43444: PPUSH
43445: LD_INT 8
43447: PPUSH
43448: CALL_OW 12
43452: PUSH
43453: LD_INT 6
43455: PPUSH
43456: LD_INT 9
43458: PPUSH
43459: CALL_OW 12
43463: PUSH
43464: LD_INT 7
43466: PPUSH
43467: LD_INT 9
43469: PPUSH
43470: CALL_OW 12
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: PUSH
43480: LD_OWVAR 67
43484: ARRAY
43485: PPUSH
43486: LD_EXP 25
43490: PPUSH
43491: LD_EXP 26
43495: PPUSH
43496: CALL_OW 12
43500: PPUSH
43501: LD_INT 3
43503: PPUSH
43504: LD_INT 1
43506: PPUSH
43507: LD_INT 3
43509: PPUSH
43510: LD_INT 44
43512: PUSH
43513: LD_INT 46
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PPUSH
43520: EMPTY
43521: PPUSH
43522: EMPTY
43523: PPUSH
43524: LD_INT 1
43526: PPUSH
43527: CALL 14588 0 11
43531: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43532: LD_EXP 18
43536: PUSH
43537: LD_INT 0
43539: EQUAL
43540: IFFALSE 43622
43542: GO 43544
43544: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43545: LD_INT 6
43547: PPUSH
43548: LD_INT 3
43550: PPUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 4
43556: PUSH
43557: LD_INT 5
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: PUSH
43565: LD_OWVAR 67
43569: ARRAY
43570: PPUSH
43571: LD_INT 0
43573: PPUSH
43574: LD_INT 0
43576: PPUSH
43577: LD_INT 0
43579: PPUSH
43580: LD_INT 0
43582: PPUSH
43583: LD_EXP 25
43587: PPUSH
43588: LD_EXP 26
43592: PPUSH
43593: CALL_OW 12
43597: PPUSH
43598: LD_INT 16
43600: PPUSH
43601: LD_INT 7
43603: PPUSH
43604: LD_INT 1
43606: PPUSH
43607: LD_INT 1
43609: PPUSH
43610: LD_INT 3
43612: PPUSH
43613: CALL_OW 12
43617: PPUSH
43618: CALL 12295 0 12
43622: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43623: LD_EXP 18
43627: PUSH
43628: LD_INT 0
43630: EQUAL
43631: IFFALSE 43731
43633: GO 43635
43635: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43636: LD_INT 16
43638: PPUSH
43639: LD_INT 6
43641: PPUSH
43642: LD_INT 5
43644: PPUSH
43645: LD_INT 8
43647: PPUSH
43648: CALL_OW 12
43652: PUSH
43653: LD_INT 6
43655: PPUSH
43656: LD_INT 9
43658: PPUSH
43659: CALL_OW 12
43663: PUSH
43664: LD_INT 7
43666: PPUSH
43667: LD_INT 9
43669: PPUSH
43670: CALL_OW 12
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: LIST
43679: PUSH
43680: LD_OWVAR 67
43684: ARRAY
43685: PPUSH
43686: LD_EXP 25
43690: PPUSH
43691: LD_EXP 26
43695: PPUSH
43696: CALL_OW 12
43700: PPUSH
43701: LD_INT 3
43703: PPUSH
43704: LD_INT 1
43706: PPUSH
43707: LD_INT 3
43709: PPUSH
43710: LD_INT 44
43712: PUSH
43713: LD_INT 46
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PPUSH
43720: EMPTY
43721: PPUSH
43722: EMPTY
43723: PPUSH
43724: LD_INT 1
43726: PPUSH
43727: CALL 14588 0 11
43731: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43732: LD_EXP 18
43736: PUSH
43737: LD_INT 0
43739: EQUAL
43740: IFFALSE 43822
43742: GO 43744
43744: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43745: LD_INT 6
43747: PPUSH
43748: LD_INT 3
43750: PPUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 4
43756: PUSH
43757: LD_INT 5
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: PUSH
43765: LD_OWVAR 67
43769: ARRAY
43770: PPUSH
43771: LD_INT 0
43773: PPUSH
43774: LD_INT 0
43776: PPUSH
43777: LD_INT 0
43779: PPUSH
43780: LD_INT 0
43782: PPUSH
43783: LD_EXP 25
43787: PPUSH
43788: LD_EXP 26
43792: PPUSH
43793: CALL_OW 12
43797: PPUSH
43798: LD_INT 16
43800: PPUSH
43801: LD_INT 7
43803: PPUSH
43804: LD_INT 1
43806: PPUSH
43807: LD_INT 1
43809: PPUSH
43810: LD_INT 3
43812: PPUSH
43813: CALL_OW 12
43817: PPUSH
43818: CALL 12295 0 12
43822: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43823: LD_EXP 18
43827: PUSH
43828: LD_INT 0
43830: EQUAL
43831: IFFALSE 43931
43833: GO 43835
43835: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43836: LD_INT 16
43838: PPUSH
43839: LD_INT 6
43841: PPUSH
43842: LD_INT 5
43844: PPUSH
43845: LD_INT 8
43847: PPUSH
43848: CALL_OW 12
43852: PUSH
43853: LD_INT 6
43855: PPUSH
43856: LD_INT 9
43858: PPUSH
43859: CALL_OW 12
43863: PUSH
43864: LD_INT 7
43866: PPUSH
43867: LD_INT 9
43869: PPUSH
43870: CALL_OW 12
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: PUSH
43880: LD_OWVAR 67
43884: ARRAY
43885: PPUSH
43886: LD_EXP 25
43890: PPUSH
43891: LD_EXP 26
43895: PPUSH
43896: CALL_OW 12
43900: PPUSH
43901: LD_INT 3
43903: PPUSH
43904: LD_INT 1
43906: PPUSH
43907: LD_INT 3
43909: PPUSH
43910: LD_INT 44
43912: PUSH
43913: LD_INT 46
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PPUSH
43920: EMPTY
43921: PPUSH
43922: EMPTY
43923: PPUSH
43924: LD_INT 1
43926: PPUSH
43927: CALL 14588 0 11
43931: END
// every 0 0$1 trigger timerStatus = 1 do
43932: LD_EXP 35
43936: PUSH
43937: LD_INT 1
43939: EQUAL
43940: IFFALSE 44000
43942: GO 43944
43944: DISABLE
// begin repeat wait ( 0 0$1 ) ;
43945: LD_INT 35
43947: PPUSH
43948: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43952: LD_ADDR_OWVAR 47
43956: PUSH
43957: LD_STRING #Am08-1
43959: PUSH
43960: LD_EXP 19
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43969: LD_ADDR_EXP 19
43973: PUSH
43974: LD_EXP 19
43978: PUSH
43979: LD_INT 35
43981: MINUS
43982: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
43983: LD_EXP 19
43987: PUSH
43988: LD_INT 0
43990: EQUAL
43991: IFFALSE 43945
// display_strings := [ ] ;
43993: LD_ADDR_OWVAR 47
43997: PUSH
43998: EMPTY
43999: ST_TO_ADDR
// end ; end_of_file
44000: END
// every 1 1$0 do
44001: GO 44003
44003: DISABLE
// begin if supply <= 13 and supply > 7 then
44004: LD_EXP 40
44008: PUSH
44009: LD_INT 13
44011: LESSEQUAL
44012: PUSH
44013: LD_EXP 40
44017: PUSH
44018: LD_INT 7
44020: GREATER
44021: AND
44022: IFFALSE 44045
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44024: LD_INT 3
44026: PPUSH
44027: LD_INT 5
44029: PPUSH
44030: CALL_OW 12
44034: PPUSH
44035: LD_INT 5
44037: PPUSH
44038: LD_INT 1
44040: PPUSH
44041: CALL_OW 55
// if supply <= 7 and supply > 4 then
44045: LD_EXP 40
44049: PUSH
44050: LD_INT 7
44052: LESSEQUAL
44053: PUSH
44054: LD_EXP 40
44058: PUSH
44059: LD_INT 4
44061: GREATER
44062: AND
44063: IFFALSE 44086
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44065: LD_INT 3
44067: PPUSH
44068: LD_INT 5
44070: PPUSH
44071: CALL_OW 12
44075: PPUSH
44076: LD_INT 20
44078: PPUSH
44079: LD_INT 1
44081: PPUSH
44082: CALL_OW 55
// if supply <= 4 and supply > 0 then
44086: LD_EXP 40
44090: PUSH
44091: LD_INT 4
44093: LESSEQUAL
44094: PUSH
44095: LD_EXP 40
44099: PUSH
44100: LD_INT 0
44102: GREATER
44103: AND
44104: IFFALSE 44127
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44106: LD_INT 3
44108: PPUSH
44109: LD_INT 5
44111: PPUSH
44112: CALL_OW 12
44116: PPUSH
44117: LD_INT 21
44119: PPUSH
44120: LD_INT 1
44122: PPUSH
44123: CALL_OW 55
// if supply > 0 then
44127: LD_EXP 40
44131: PUSH
44132: LD_INT 0
44134: GREATER
44135: IFFALSE 44152
// begin supply = supply - 1 ;
44137: LD_ADDR_EXP 40
44141: PUSH
44142: LD_EXP 40
44146: PUSH
44147: LD_INT 1
44149: MINUS
44150: ST_TO_ADDR
// enable ;
44151: ENABLE
// end ; end ; end_of_file
44152: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44153: LD_EXP 39
44157: PUSH
44158: LD_INT 1
44160: EQUAL
44161: PUSH
44162: LD_EXP 1
44166: PPUSH
44167: CALL_OW 301
44171: AND
44172: IFFALSE 44184
44174: GO 44176
44176: DISABLE
// YouLost ( JMM ) ;
44177: LD_STRING JMM
44179: PPUSH
44180: CALL_OW 104
44184: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44185: LD_EXP 18
44189: PUSH
44190: LD_INT 1
44192: EQUAL
44193: PUSH
44194: LD_EXP 16
44198: PPUSH
44199: CALL_OW 301
44203: AND
44204: IFFALSE 44236
44206: GO 44208
44208: DISABLE
// begin DialogueOn ;
44209: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44213: LD_EXP 23
44217: PPUSH
44218: LD_STRING D8a-Pow-1
44220: PPUSH
44221: CALL_OW 94
// DialogueOff ;
44225: CALL_OW 7
// YouLost ( Dismissed ) ;
44229: LD_STRING Dismissed
44231: PPUSH
44232: CALL_OW 104
// end ;
44236: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44237: LD_INT 22
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: LD_INT 30
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 30
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PPUSH
44279: CALL_OW 69
44283: PUSH
44284: LD_INT 0
44286: EQUAL
44287: IFFALSE 44299
44289: GO 44291
44291: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44292: LD_STRING Destroyed
44294: PPUSH
44295: CALL_OW 104
44299: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44300: LD_EXP 24
44304: PPUSH
44305: CALL_OW 301
44309: PUSH
44310: LD_INT 22
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 21
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PPUSH
44334: CALL_OW 69
44338: PUSH
44339: LD_INT 7
44341: PUSH
44342: LD_INT 6
44344: PUSH
44345: LD_INT 5
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: PUSH
44353: LD_OWVAR 67
44357: ARRAY
44358: LESS
44359: AND
44360: PUSH
44361: LD_EXP 1
44365: PPUSH
44366: CALL_OW 305
44370: AND
44371: IFFALSE 44819
44373: GO 44375
44375: DISABLE
44376: LD_INT 0
44378: PPUSH
44379: PPUSH
// begin russianAI = 0 ;
44380: LD_ADDR_EXP 27
44384: PUSH
44385: LD_INT 0
44387: ST_TO_ADDR
// escapeAvalaible = 1 ;
44388: LD_ADDR_EXP 36
44392: PUSH
44393: LD_INT 1
44395: ST_TO_ADDR
// InGameOn ;
44396: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44400: LD_INT 3
44402: PPUSH
44403: LD_INT 1
44405: PPUSH
44406: LD_INT 1
44408: PPUSH
44409: LD_INT 0
44411: PPUSH
44412: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44416: LD_INT 6
44418: PPUSH
44419: LD_INT 1
44421: PPUSH
44422: LD_INT 1
44424: PPUSH
44425: LD_INT 0
44427: PPUSH
44428: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44432: LD_INT 3
44434: PPUSH
44435: LD_INT 1
44437: PPUSH
44438: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44442: LD_INT 97
44444: PPUSH
44445: LD_INT 91
44447: PPUSH
44448: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44452: LD_INT 22
44454: PUSH
44455: LD_INT 3
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 21
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PPUSH
44476: CALL_OW 69
44480: PPUSH
44481: CALL_OW 121
// wait ( 0 0$01 ) ;
44485: LD_INT 35
44487: PPUSH
44488: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44492: LD_INT 22
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 21
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PPUSH
44516: CALL_OW 69
44520: PPUSH
44521: LD_INT 124
44523: PPUSH
44524: LD_INT 98
44526: PPUSH
44527: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44531: LD_INT 22
44533: PUSH
44534: LD_INT 6
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 21
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PPUSH
44555: CALL_OW 69
44559: PPUSH
44560: CALL_OW 121
// wait ( 0 0$01 ) ;
44564: LD_INT 35
44566: PPUSH
44567: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44571: LD_INT 22
44573: PUSH
44574: LD_INT 6
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 21
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PPUSH
44595: CALL_OW 69
44599: PPUSH
44600: LD_INT 124
44602: PPUSH
44603: LD_INT 98
44605: PPUSH
44606: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44610: LD_INT 22
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 21
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: PUSH
44633: LD_INT 54
44635: PUSH
44636: EMPTY
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: PPUSH
44648: CALL_OW 69
44652: PPUSH
44653: LD_INT 124
44655: PPUSH
44656: LD_INT 98
44658: PPUSH
44659: CALL_OW 114
// wait ( 0 0$4 ) ;
44663: LD_INT 140
44665: PPUSH
44666: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44670: LD_INT 124
44672: PPUSH
44673: LD_INT 98
44675: PPUSH
44676: CALL_OW 84
// if SikorskyStatus = 1 then
44680: LD_EXP 21
44684: PUSH
44685: LD_INT 1
44687: EQUAL
44688: IFFALSE 44702
// begin Say ( Sikorski , D9-Sik-1 ) ;
44690: LD_EXP 16
44694: PPUSH
44695: LD_STRING D9-Sik-1
44697: PPUSH
44698: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44702: LD_EXP 21
44706: PUSH
44707: LD_INT 2
44709: EQUAL
44710: IFFALSE 44731
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44712: LD_EXP 23
44716: PPUSH
44717: LD_STRING D8b-Pow-1
44719: PPUSH
44720: CALL_OW 94
// YouLost ( Dismissed ) ;
44724: LD_STRING Dismissed
44726: PPUSH
44727: CALL_OW 104
// end ; p := 0 0$0 ;
44731: LD_ADDR_VAR 0 2
44735: PUSH
44736: LD_INT 0
44738: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44739: LD_INT 35
44741: PPUSH
44742: CALL_OW 67
// p := p + 0 0$1 ;
44746: LD_ADDR_VAR 0 2
44750: PUSH
44751: LD_VAR 0 2
44755: PUSH
44756: LD_INT 35
44758: PLUS
44759: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44760: LD_INT 23
44762: PUSH
44763: LD_INT 3
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 21
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 24
44782: PUSH
44783: LD_INT 250
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: PPUSH
44795: CALL_OW 69
44799: PUSH
44800: LD_INT 0
44802: EQUAL
44803: PUSH
44804: LD_VAR 0 2
44808: PUSH
44809: LD_INT 245
44811: GREATEREQUAL
44812: OR
44813: IFFALSE 44739
// FinishMission ;
44815: CALL 44822 0 0
// end ;
44819: PPOPN 2
44821: END
// export function FinishMission ; var tmp ; begin
44822: LD_INT 0
44824: PPUSH
44825: PPUSH
// AddMedal ( med1 , 1 ) ;
44826: LD_STRING med1
44828: PPUSH
44829: LD_INT 1
44831: PPUSH
44832: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44836: LD_STRING med2
44838: PPUSH
44839: LD_INT 1
44841: PPUSH
44842: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44846: LD_STRING perfect
44848: PPUSH
44849: LD_INT 1
44851: PPUSH
44852: CALL_OW 101
// GiveMedals ( Main ) ;
44856: LD_STRING Main
44858: PPUSH
44859: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44863: LD_INT 22
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 23
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 21
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 25
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 25
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 25
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 25
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: PPUSH
44949: CALL_OW 69
44953: PPUSH
44954: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44958: LD_EXP 1
44962: PPUSH
44963: LD_EXP 43
44967: PUSH
44968: LD_STRING JMM
44970: STR
44971: PPUSH
44972: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44976: LD_EXP 2
44980: PPUSH
44981: LD_EXP 43
44985: PUSH
44986: LD_STRING Brown
44988: STR
44989: PPUSH
44990: CALL 8142 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44994: LD_EXP 3
44998: PPUSH
44999: LD_EXP 43
45003: PUSH
45004: LD_STRING Donaldson
45006: STR
45007: PPUSH
45008: CALL 8142 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45012: LD_EXP 4
45016: PPUSH
45017: LD_EXP 43
45021: PUSH
45022: LD_STRING Bobby
45024: STR
45025: PPUSH
45026: CALL 8142 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45030: LD_EXP 5
45034: PPUSH
45035: LD_EXP 43
45039: PUSH
45040: LD_STRING Cyrus
45042: STR
45043: PPUSH
45044: CALL 8142 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45048: LD_EXP 6
45052: PPUSH
45053: LD_EXP 43
45057: PUSH
45058: LD_STRING Lisa
45060: STR
45061: PPUSH
45062: CALL 8142 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45066: LD_EXP 7
45070: PPUSH
45071: LD_EXP 43
45075: PUSH
45076: LD_STRING Frank
45078: STR
45079: PPUSH
45080: CALL 8142 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45084: LD_EXP 8
45088: PPUSH
45089: LD_EXP 43
45093: PUSH
45094: LD_STRING Gladstone
45096: STR
45097: PPUSH
45098: CALL 8142 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45102: LD_EXP 9
45106: PPUSH
45107: LD_EXP 43
45111: PUSH
45112: LD_STRING Kikuchi
45114: STR
45115: PPUSH
45116: CALL 8142 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45120: LD_EXP 14
45124: PPUSH
45125: LD_EXP 43
45129: PUSH
45130: LD_STRING Denis
45132: STR
45133: PPUSH
45134: CALL 8142 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45138: LD_EXP 15
45142: PPUSH
45143: LD_EXP 43
45147: PUSH
45148: LD_STRING Joan
45150: STR
45151: PPUSH
45152: CALL 8142 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45156: LD_EXP 10
45160: PPUSH
45161: LD_EXP 43
45165: PUSH
45166: LD_STRING Khatam
45168: STR
45169: PPUSH
45170: CALL 8142 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45174: LD_EXP 13
45178: PPUSH
45179: LD_EXP 43
45183: PUSH
45184: LD_STRING Houten
45186: STR
45187: PPUSH
45188: CALL 8142 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45192: LD_INT 50
45194: PUSH
45195: EMPTY
45196: LIST
45197: PUSH
45198: LD_INT 22
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 21
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 25
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 25
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 25
45243: PUSH
45244: LD_INT 3
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 25
45253: PUSH
45254: LD_INT 4
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: PPUSH
45274: CALL_OW 69
45278: PUSH
45279: LD_EXP 1
45283: PUSH
45284: LD_EXP 2
45288: PUSH
45289: LD_EXP 3
45293: PUSH
45294: LD_EXP 4
45298: PUSH
45299: LD_EXP 5
45303: PUSH
45304: LD_EXP 6
45308: PUSH
45309: LD_EXP 7
45313: PUSH
45314: LD_EXP 8
45318: PUSH
45319: LD_EXP 9
45323: PUSH
45324: LD_EXP 14
45328: PUSH
45329: LD_EXP 15
45333: PUSH
45334: LD_EXP 13
45338: PUSH
45339: LD_EXP 10
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: DIFF
45359: PPUSH
45360: LD_STRING 08_other_survivors
45362: PPUSH
45363: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45367: LD_INT 23
45369: PPUSH
45370: CALL 45383 0 1
// YouWin ;
45374: CALL_OW 103
// end ;
45378: LD_VAR 0 1
45382: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45383: LD_INT 0
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
// gammaBase = [ ] ;
45389: LD_ADDR_VAR 0 4
45393: PUSH
45394: EMPTY
45395: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45396: LD_ADDR_VAR 0 5
45400: PUSH
45401: LD_VAR 0 1
45405: PPUSH
45406: LD_INT 22
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 21
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 50
45428: PUSH
45429: EMPTY
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: PPUSH
45437: CALL_OW 70
45441: ST_TO_ADDR
// for i in buildings do
45442: LD_ADDR_VAR 0 3
45446: PUSH
45447: LD_VAR 0 5
45451: PUSH
45452: FOR_IN
45453: IFFALSE 45890
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45455: LD_VAR 0 3
45459: PPUSH
45460: CALL_OW 266
45464: PUSH
45465: LD_INT 6
45467: PUSH
45468: LD_INT 7
45470: PUSH
45471: LD_INT 8
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: IN
45479: IFFALSE 45593
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45481: LD_ADDR_VAR 0 4
45485: PUSH
45486: LD_VAR 0 4
45490: PUSH
45491: LD_VAR 0 3
45495: PPUSH
45496: CALL_OW 266
45500: PUSH
45501: LD_VAR 0 3
45505: PPUSH
45506: CALL_OW 250
45510: PUSH
45511: LD_VAR 0 3
45515: PPUSH
45516: CALL_OW 251
45520: PUSH
45521: LD_VAR 0 3
45525: PPUSH
45526: CALL_OW 254
45530: PUSH
45531: LD_VAR 0 3
45535: PPUSH
45536: CALL_OW 267
45540: PUSH
45541: LD_VAR 0 3
45545: PPUSH
45546: CALL_OW 248
45550: PUSH
45551: LD_VAR 0 3
45555: PPUSH
45556: LD_INT 1
45558: PPUSH
45559: CALL_OW 268
45563: PUSH
45564: LD_VAR 0 3
45568: PPUSH
45569: LD_INT 2
45571: PPUSH
45572: CALL_OW 268
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: PUSH
45587: EMPTY
45588: LIST
45589: ADD
45590: ST_TO_ADDR
45591: GO 45888
// if GetBType ( i ) = b_bunker then
45593: LD_VAR 0 3
45597: PPUSH
45598: CALL_OW 266
45602: PUSH
45603: LD_INT 32
45605: EQUAL
45606: IFFALSE 45703
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45608: LD_ADDR_VAR 0 4
45612: PUSH
45613: LD_VAR 0 4
45617: PUSH
45618: LD_VAR 0 3
45622: PPUSH
45623: CALL_OW 266
45627: PUSH
45628: LD_VAR 0 3
45632: PPUSH
45633: CALL_OW 250
45637: PUSH
45638: LD_VAR 0 3
45642: PPUSH
45643: CALL_OW 251
45647: PUSH
45648: LD_VAR 0 3
45652: PPUSH
45653: CALL_OW 254
45657: PUSH
45658: LD_VAR 0 3
45662: PPUSH
45663: CALL_OW 267
45667: PUSH
45668: LD_VAR 0 3
45672: PPUSH
45673: CALL_OW 248
45677: PUSH
45678: LD_VAR 0 3
45682: PPUSH
45683: CALL_OW 269
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: PUSH
45697: EMPTY
45698: LIST
45699: ADD
45700: ST_TO_ADDR
45701: GO 45888
// if GetBType ( i ) = b_factory then
45703: LD_VAR 0 3
45707: PPUSH
45708: CALL_OW 266
45712: PUSH
45713: LD_INT 3
45715: EQUAL
45716: IFFALSE 45806
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45718: LD_ADDR_VAR 0 4
45722: PUSH
45723: LD_VAR 0 4
45727: PPUSH
45728: LD_INT 1
45730: PPUSH
45731: LD_VAR 0 3
45735: PPUSH
45736: CALL_OW 266
45740: PUSH
45741: LD_VAR 0 3
45745: PPUSH
45746: CALL_OW 250
45750: PUSH
45751: LD_VAR 0 3
45755: PPUSH
45756: CALL_OW 251
45760: PUSH
45761: LD_VAR 0 3
45765: PPUSH
45766: CALL_OW 254
45770: PUSH
45771: LD_VAR 0 3
45775: PPUSH
45776: CALL_OW 267
45780: PUSH
45781: LD_VAR 0 3
45785: PPUSH
45786: CALL_OW 248
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: PPUSH
45799: CALL_OW 2
45803: ST_TO_ADDR
45804: GO 45888
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45806: LD_ADDR_VAR 0 4
45810: PUSH
45811: LD_VAR 0 4
45815: PUSH
45816: LD_VAR 0 3
45820: PPUSH
45821: CALL_OW 266
45825: PUSH
45826: LD_VAR 0 3
45830: PPUSH
45831: CALL_OW 250
45835: PUSH
45836: LD_VAR 0 3
45840: PPUSH
45841: CALL_OW 251
45845: PUSH
45846: LD_VAR 0 3
45850: PPUSH
45851: CALL_OW 254
45855: PUSH
45856: LD_VAR 0 3
45860: PPUSH
45861: CALL_OW 267
45865: PUSH
45866: LD_VAR 0 3
45870: PPUSH
45871: CALL_OW 248
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: ADD
45887: ST_TO_ADDR
// end ;
45888: GO 45452
45890: POP
45891: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45892: LD_VAR 0 4
45896: PPUSH
45897: LD_STRING 08_GammaBase
45899: PPUSH
45900: CALL_OW 39
// end ;
45904: LD_VAR 0 2
45908: RET
