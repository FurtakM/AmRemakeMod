// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 40
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 41
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 37
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 35
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// defenders_list = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// varEvent1 = 0 ;
 126: LD_ADDR_EXP 39
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// timerStatus = 0 ;
 134: LD_ADDR_EXP 34
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 142: LD_ADDR_EXP 38
 146: PUSH
 147: LD_INT 18
 149: PUSH
 150: LD_INT 17
 152: PUSH
 153: LD_INT 15
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_OWVAR 67
 165: ARRAY
 166: ST_TO_ADDR
// debugMode = 0 ;
 167: LD_ADDR_EXP 42
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// PrepareDifficulty ;
 175: CALL 5980 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 179: LD_INT 43
 181: PPUSH
 182: LD_INT 22
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 333
 190: NEG
 191: PPUSH
 192: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 196: LD_INT 43
 198: PPUSH
 199: LD_INT 22
 201: PPUSH
 202: LD_INT 1
 204: PPUSH
 205: CALL_OW 331
// PrepareBase ;
 209: CALL 1424 0 0
// PrepareHeroes ;
 213: CALL 511 0 0
// PrepareRussianCommander ;
 217: CALL 4785 0 0
// PrepareRussians ;
 221: CALL 5103 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 225: LD_INT 22
 227: PUSH
 228: LD_INT 3
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 25
 237: PUSH
 238: LD_INT 2
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PPUSH
 249: CALL_OW 69
 253: PPUSH
 254: LD_INT 0
 256: PPUSH
 257: LD_INT 90
 259: PPUSH
 260: LD_INT 86
 262: PPUSH
 263: LD_INT 3
 265: PPUSH
 266: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 270: LD_INT 3
 272: PPUSH
 273: LD_INT 24
 275: PPUSH
 276: LD_INT 3
 278: PPUSH
 279: LD_EXP 24
 283: PPUSH
 284: LD_EXP 25
 288: PPUSH
 289: CALL_OW 12
 293: PPUSH
 294: LD_INT 6
 296: PPUSH
 297: LD_INT 4
 299: PPUSH
 300: CALL 7198 0 6
// PrepareCutsceneAttack ;
 304: CALL 4837 0 0
// end ;
 308: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 309: LD_EXP 42
 313: PUSH
 314: LD_INT 1
 316: EQUAL
 317: IFFALSE 508
 319: GO 321
 321: DISABLE
 322: LD_INT 0
 324: PPUSH
// begin enable ;
 325: ENABLE
// fogoff ( true ) ;
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 333: LD_ADDR_VAR 0 1
 337: PUSH
 338: LD_INT 22
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 21
 350: PUSH
 351: LD_INT 1
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: PPUSH
 362: CALL_OW 69
 366: PUSH
 367: FOR_IN
 368: IFFALSE 384
// SetLives ( i , 1000 ) ;
 370: LD_VAR 0 1
 374: PPUSH
 375: LD_INT 1000
 377: PPUSH
 378: CALL_OW 234
 382: GO 367
 384: POP
 385: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 386: LD_ADDR_VAR 0 1
 390: PUSH
 391: LD_INT 22
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: LD_INT 30
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 30
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PPUSH
 476: CALL_OW 69
 480: PUSH
 481: FOR_IN
 482: IFFALSE 506
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 484: LD_VAR 0 1
 488: PPUSH
 489: CALL_OW 274
 493: PPUSH
 494: LD_INT 2
 496: PPUSH
 497: LD_INT 9999
 499: PPUSH
 500: CALL_OW 277
 504: GO 481
 506: POP
 507: POP
// end ; end_of_file
 508: PPOPN 1
 510: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun ; begin
 511: LD_INT 0
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
// uc_side = 1 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// uc_nation = 1 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if gammaCommander = 1 then
 538: LD_EXP 11
 542: PUSH
 543: LD_INT 1
 545: EQUAL
 546: IFFALSE 579
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 548: LD_ADDR_EXP 3
 552: PUSH
 553: LD_STRING Donaldson
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: CALL 5521 0 2
 563: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 564: LD_EXP 3
 568: PPUSH
 569: LD_INT 5
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 49
// end ; if gammaCommander = 2 then
 579: LD_EXP 11
 583: PUSH
 584: LD_INT 2
 586: EQUAL
 587: IFFALSE 620
// begin Brown = PrepareUnit ( Brown , true ) ;
 589: LD_ADDR_EXP 2
 593: PUSH
 594: LD_STRING Brown
 596: PPUSH
 597: LD_INT 1
 599: PPUSH
 600: CALL 5521 0 2
 604: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 605: LD_EXP 2
 609: PPUSH
 610: LD_INT 5
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
// end ; if gammaCommander = 3 then
 620: LD_EXP 11
 624: PUSH
 625: LD_INT 3
 627: EQUAL
 628: IFFALSE 661
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 630: LD_ADDR_EXP 12
 634: PUSH
 635: LD_STRING VanHouten
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL 5521 0 2
 645: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 646: LD_EXP 12
 650: PPUSH
 651: LD_INT 5
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 661: LD_ADDR_EXP 21
 665: PUSH
 666: LD_STRING Harisson
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL 5521 0 2
 676: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 677: LD_ADDR_EXP 22
 681: PUSH
 682: LD_STRING Powell
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL 5521 0 2
 692: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 693: LD_ADDR_EXP 10
 697: PUSH
 698: LD_STRING 07_othersGamma
 700: PPUSH
 701: CALL_OW 31
 705: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 706: LD_ADDR_VAR 0 5
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 30
 723: PUSH
 724: LD_INT 5
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 69
 739: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 740: LD_ADDR_VAR 0 4
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 30
 760: PUSH
 761: LD_INT 6
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: PUSH
 768: LD_INT 30
 770: PUSH
 771: LD_INT 7
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 30
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PPUSH
 798: CALL_OW 69
 802: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 803: LD_ADDR_VAR 0 3
 807: PUSH
 808: LD_INT 22
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 30
 820: PUSH
 821: LD_INT 3
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 69
 836: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 837: LD_ADDR_VAR 0 8
 841: PUSH
 842: LD_INT 22
 844: PUSH
 845: LD_INT 1
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 30
 854: PUSH
 855: LD_INT 36
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PPUSH
 866: CALL_OW 69
 870: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 871: LD_ADDR_VAR 0 9
 875: PUSH
 876: LD_INT 22
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 2
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 31
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 30
 901: PUSH
 902: LD_INT 32
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: ST_TO_ADDR
// for i in others_gamma do
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_EXP 10
 932: PUSH
 933: FOR_IN
 934: IFFALSE 1309
// begin placed := false ;
 936: LD_ADDR_VAR 0 7
 940: PUSH
 941: LD_INT 0
 943: ST_TO_ADDR
// if GetClass ( i ) = 1 then
 944: LD_VAR 0 2
 948: PPUSH
 949: CALL_OW 257
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1082
// begin if UnitFilter ( bun , [ f_empty ] ) then
 959: LD_VAR 0 9
 963: PPUSH
 964: LD_INT 58
 966: PUSH
 967: EMPTY
 968: LIST
 969: PPUSH
 970: CALL_OW 72
 974: IFFALSE 1013
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
 976: LD_VAR 0 2
 980: PPUSH
 981: LD_VAR 0 9
 985: PPUSH
 986: LD_INT 58
 988: PUSH
 989: EMPTY
 990: LIST
 991: PPUSH
 992: CALL_OW 72
 996: PUSH
 997: LD_INT 1
 999: ARRAY
1000: PPUSH
1001: CALL_OW 52
// placed := true ;
1005: LD_ADDR_VAR 0 7
1009: PUSH
1010: LD_INT 1
1012: ST_TO_ADDR
// end ; if arm and not placed then
1013: LD_VAR 0 5
1017: PUSH
1018: LD_VAR 0 7
1022: NOT
1023: AND
1024: IFFALSE 1082
// begin for j in arm do
1026: LD_ADDR_VAR 0 6
1030: PUSH
1031: LD_VAR 0 5
1035: PUSH
1036: FOR_IN
1037: IFFALSE 1080
// if UnitsInside ( j ) < 6 then
1039: LD_VAR 0 6
1043: PPUSH
1044: CALL_OW 313
1048: PUSH
1049: LD_INT 6
1051: LESS
1052: IFFALSE 1078
// begin PlaceHumanInUnit ( i , j ) ;
1054: LD_VAR 0 2
1058: PPUSH
1059: LD_VAR 0 6
1063: PPUSH
1064: CALL_OW 52
// placed := true ;
1068: LD_ADDR_VAR 0 7
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// break ;
1076: GO 1080
// end ;
1078: GO 1036
1080: POP
1081: POP
// end ; end ; if GetClass ( i ) = 3 then
1082: LD_VAR 0 2
1086: PPUSH
1087: CALL_OW 257
1091: PUSH
1092: LD_INT 3
1094: EQUAL
1095: IFFALSE 1199
// if fac then
1097: LD_VAR 0 3
1101: IFFALSE 1199
// begin if ct then
1103: LD_VAR 0 8
1107: IFFALSE 1135
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1109: LD_VAR 0 2
1113: PPUSH
1114: LD_VAR 0 8
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: CALL_OW 52
// placed := true ;
1127: LD_ADDR_VAR 0 7
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// end ; if placed then
1135: LD_VAR 0 7
1139: IFFALSE 1143
// continue ;
1141: GO 933
// for j in fac do
1143: LD_ADDR_VAR 0 6
1147: PUSH
1148: LD_VAR 0 3
1152: PUSH
1153: FOR_IN
1154: IFFALSE 1197
// if UnitsInside ( j ) < 6 then
1156: LD_VAR 0 6
1160: PPUSH
1161: CALL_OW 313
1165: PUSH
1166: LD_INT 6
1168: LESS
1169: IFFALSE 1195
// begin PlaceHumanInUnit ( i , j ) ;
1171: LD_VAR 0 2
1175: PPUSH
1176: LD_VAR 0 6
1180: PPUSH
1181: CALL_OW 52
// placed := true ;
1185: LD_ADDR_VAR 0 7
1189: PUSH
1190: LD_INT 1
1192: ST_TO_ADDR
// break ;
1193: GO 1197
// end ;
1195: GO 1153
1197: POP
1198: POP
// end ; if GetClass ( i ) = 4 then
1199: LD_VAR 0 2
1203: PPUSH
1204: CALL_OW 257
1208: PUSH
1209: LD_INT 4
1211: EQUAL
1212: IFFALSE 1276
// if lab then
1214: LD_VAR 0 4
1218: IFFALSE 1276
// begin for j in lab do
1220: LD_ADDR_VAR 0 6
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: FOR_IN
1231: IFFALSE 1274
// if UnitsInside ( j ) < 6 then
1233: LD_VAR 0 6
1237: PPUSH
1238: CALL_OW 313
1242: PUSH
1243: LD_INT 6
1245: LESS
1246: IFFALSE 1272
// begin PlaceHumanInUnit ( i , j ) ;
1248: LD_VAR 0 2
1252: PPUSH
1253: LD_VAR 0 6
1257: PPUSH
1258: CALL_OW 52
// placed := true ;
1262: LD_ADDR_VAR 0 7
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// break ;
1270: GO 1274
// end ;
1272: GO 1230
1274: POP
1275: POP
// end ; if not placed then
1276: LD_VAR 0 7
1280: NOT
1281: IFFALSE 1307
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1283: LD_VAR 0 2
1287: PPUSH
1288: LD_INT 5
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
// ComHold ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 140
// end ; end ;
1307: GO 933
1309: POP
1310: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1311: LD_VAR 0 8
1315: PUSH
1316: LD_VAR 0 8
1320: PUSH
1321: LD_INT 1
1323: ARRAY
1324: PPUSH
1325: CALL_OW 313
1329: AND
1330: IFFALSE 1419
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1332: LD_ADDR_VAR 0 2
1336: PUSH
1337: LD_INT 22
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 33
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PPUSH
1361: CALL_OW 69
1365: PUSH
1366: FOR_IN
1367: IFFALSE 1417
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1369: LD_VAR 0 2
1373: PPUSH
1374: LD_VAR 0 8
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PPUSH
1383: CALL_OW 313
1387: PUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_VAR 0 8
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: CALL_OW 313
1404: PPUSH
1405: CALL_OW 12
1409: ARRAY
1410: PPUSH
1411: CALL_OW 135
1415: GO 1366
1417: POP
1418: POP
// end ; end ;
1419: LD_VAR 0 1
1423: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1424: LD_INT 0
1426: PPUSH
1427: PPUSH
1428: PPUSH
1429: PPUSH
1430: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1431: LD_INT 71
1433: PPUSH
1434: LD_INT 5
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1444: LD_ADDR_VAR 0 2
1448: PUSH
1449: LD_STRING GammaBase
1451: PPUSH
1452: EMPTY
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// uc_side := 1 ;
1459: LD_ADDR_OWVAR 20
1463: PUSH
1464: LD_INT 1
1466: ST_TO_ADDR
// uc_nation := 1 ;
1467: LD_ADDR_OWVAR 21
1471: PUSH
1472: LD_INT 1
1474: ST_TO_ADDR
// for i in blist do
1475: LD_ADDR_VAR 0 3
1479: PUSH
1480: LD_VAR 0 2
1484: PUSH
1485: FOR_IN
1486: IFFALSE 1894
// begin bc_type := i [ 1 ] ;
1488: LD_ADDR_OWVAR 42
1492: PUSH
1493: LD_VAR 0 3
1497: PUSH
1498: LD_INT 1
1500: ARRAY
1501: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1502: LD_ADDR_OWVAR 43
1506: PUSH
1507: LD_VAR 0 3
1511: PUSH
1512: LD_INT 5
1514: ARRAY
1515: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1516: LD_VAR 0 3
1520: PUSH
1521: LD_INT 1
1523: ARRAY
1524: PUSH
1525: LD_INT 7
1527: PUSH
1528: LD_INT 8
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: IN
1535: IFFALSE 1591
// begin bc_kind1 := i [ 7 ] ;
1537: LD_ADDR_OWVAR 44
1541: PUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 7
1549: ARRAY
1550: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1551: LD_STRING 06_remoteVehs_1
1553: PPUSH
1554: LD_INT 0
1556: PPUSH
1557: CALL_OW 30
1561: PUSH
1562: LD_INT 1
1564: EQUAL
1565: IFFALSE 1577
// begin bc_kind2 := 15 ;
1567: LD_ADDR_OWVAR 45
1571: PUSH
1572: LD_INT 15
1574: ST_TO_ADDR
// end else
1575: GO 1591
// begin bc_kind2 := i [ 8 ] ;
1577: LD_ADDR_OWVAR 45
1581: PUSH
1582: LD_VAR 0 3
1586: PUSH
1587: LD_INT 8
1589: ARRAY
1590: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1591: LD_OWVAR 42
1595: PUSH
1596: LD_INT 0
1598: EQUAL
1599: IFFALSE 1717
// begin bc_type := b_warehouse ;
1601: LD_ADDR_OWVAR 42
1605: PUSH
1606: LD_INT 1
1608: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1609: LD_ADDR_EXP 36
1613: PUSH
1614: LD_VAR 0 3
1618: PUSH
1619: LD_INT 2
1621: ARRAY
1622: PPUSH
1623: LD_VAR 0 3
1627: PUSH
1628: LD_INT 3
1630: ARRAY
1631: PPUSH
1632: LD_VAR 0 3
1636: PUSH
1637: LD_INT 4
1639: ARRAY
1640: PPUSH
1641: CALL_OW 47
1645: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1646: LD_EXP 36
1650: PPUSH
1651: LD_STRING gamma
1653: PPUSH
1654: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1658: LD_EXP 36
1662: PPUSH
1663: CALL_OW 274
1667: PPUSH
1668: LD_INT 1
1670: PPUSH
1671: LD_INT 200
1673: PUSH
1674: LD_INT 150
1676: PUSH
1677: LD_INT 100
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_OWVAR 67
1689: ARRAY
1690: PPUSH
1691: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1695: LD_EXP 36
1699: PPUSH
1700: CALL_OW 274
1704: PPUSH
1705: LD_INT 2
1707: PPUSH
1708: LD_INT 200
1710: PPUSH
1711: CALL_OW 277
// end else
1715: GO 1859
// begin if bc_type = 4 then
1717: LD_OWVAR 42
1721: PUSH
1722: LD_INT 4
1724: EQUAL
1725: IFFALSE 1774
// begin bc_type = 5 ;
1727: LD_ADDR_OWVAR 42
1731: PUSH
1732: LD_INT 5
1734: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1735: LD_ADDR_VAR 0 4
1739: PUSH
1740: LD_VAR 0 3
1744: PUSH
1745: LD_INT 2
1747: ARRAY
1748: PPUSH
1749: LD_VAR 0 3
1753: PUSH
1754: LD_INT 3
1756: ARRAY
1757: PPUSH
1758: LD_VAR 0 3
1762: PUSH
1763: LD_INT 4
1765: ARRAY
1766: PPUSH
1767: CALL_OW 47
1771: ST_TO_ADDR
// end else
1772: GO 1859
// begin bc_type := i [ 1 ] ;
1774: LD_ADDR_OWVAR 42
1778: PUSH
1779: LD_VAR 0 3
1783: PUSH
1784: LD_INT 1
1786: ARRAY
1787: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1788: LD_STRING 06_remoteVehs_1
1790: PPUSH
1791: LD_INT 0
1793: PPUSH
1794: CALL_OW 30
1798: PUSH
1799: LD_INT 1
1801: EQUAL
1802: PUSH
1803: LD_OWVAR 42
1807: PUSH
1808: LD_INT 7
1810: EQUAL
1811: AND
1812: IFFALSE 1822
// bc_type := b_lab_full ;
1814: LD_ADDR_OWVAR 42
1818: PUSH
1819: LD_INT 8
1821: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1822: LD_ADDR_VAR 0 4
1826: PUSH
1827: LD_VAR 0 3
1831: PUSH
1832: LD_INT 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 3
1840: PUSH
1841: LD_INT 3
1843: ARRAY
1844: PPUSH
1845: LD_VAR 0 3
1849: PUSH
1850: LD_INT 4
1852: ARRAY
1853: PPUSH
1854: CALL_OW 47
1858: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1859: LD_VAR 0 4
1863: PPUSH
1864: CALL_OW 266
1868: PUSH
1869: LD_INT 32
1871: EQUAL
1872: IFFALSE 1892
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1874: LD_VAR 0 4
1878: PPUSH
1879: LD_VAR 0 3
1883: PUSH
1884: LD_INT 7
1886: ARRAY
1887: PPUSH
1888: CALL_OW 431
// end ;
1892: GO 1485
1894: POP
1895: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1896: LD_STRING 06_remoteVehs_1
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 30
1906: PUSH
1907: LD_INT 1
1909: EQUAL
1910: IFFALSE 2114
// begin bc_type = 36 ;
1912: LD_ADDR_OWVAR 42
1916: PUSH
1917: LD_INT 36
1919: ST_TO_ADDR
// bc_level = 4 ;
1920: LD_ADDR_OWVAR 43
1924: PUSH
1925: LD_INT 4
1927: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1928: LD_INT 62
1930: PPUSH
1931: LD_INT 12
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1941: LD_ADDR_VAR 0 3
1945: PUSH
1946: DOUBLE
1947: LD_INT 1
1949: DEC
1950: ST_TO_ADDR
1951: LD_INT 3
1953: PUSH
1954: LD_INT 2
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_OWVAR 67
1969: ARRAY
1970: PUSH
1971: FOR_TO
1972: IFFALSE 2112
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1974: LD_ADDR_OWVAR 37
1978: PUSH
1979: LD_INT 3
1981: PUSH
1982: LD_INT 2
1984: PUSH
1985: LD_INT 3
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_INT 2
1997: PPUSH
1998: CALL_OW 12
2002: ARRAY
2003: PUSH
2004: LD_INT 2
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: PUSH
2012: LD_OWVAR 67
2016: ARRAY
2017: ST_TO_ADDR
// vc_engine = 1 ;
2018: LD_ADDR_OWVAR 39
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// vc_control = 2 ;
2026: LD_ADDR_OWVAR 38
2030: PUSH
2031: LD_INT 2
2033: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2034: LD_ADDR_OWVAR 40
2038: PUSH
2039: LD_INT 3
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: LD_INT 5
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 1
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: CALL_OW 12
2063: ARRAY
2064: ST_TO_ADDR
// veh = CreateVehicle ;
2065: LD_ADDR_VAR 0 5
2069: PUSH
2070: CALL_OW 45
2074: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_EXP 36
2084: PPUSH
2085: CALL_OW 250
2089: PPUSH
2090: LD_EXP 36
2094: PPUSH
2095: CALL_OW 251
2099: PPUSH
2100: LD_INT 7
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 50
// end ;
2110: GO 1971
2112: POP
2113: POP
// end ; end ;
2114: LD_VAR 0 1
2118: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
// uc_side = 1 ;
2125: LD_ADDR_OWVAR 20
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// uc_nation = 1 ;
2133: LD_ADDR_OWVAR 21
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2141: LD_ADDR_EXP 13
2145: PUSH
2146: LD_STRING 06c_Denis
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 5521 0 2
2156: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2157: LD_EXP 13
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2172: LD_ADDR_EXP 14
2176: PUSH
2177: LD_STRING 06c_Joan
2179: PPUSH
2180: LD_INT 1
2182: PPUSH
2183: CALL 5521 0 2
2187: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2188: LD_EXP 14
2192: PPUSH
2193: LD_INT 4
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 49
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
2203: LD_STRING GladstoneIn07
2205: PPUSH
2206: LD_INT 0
2208: PPUSH
2209: CALL_OW 30
2213: PUSH
2214: LD_INT 0
2216: EQUAL
2217: IFFALSE 2285
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2219: LD_ADDR_EXP 8
2223: PUSH
2224: LD_STRING 06c_Gladstone
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL 5521 0 2
2234: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2235: LD_EXP 8
2239: NOT
2240: PUSH
2241: LD_STRING GladstoneStayInDelta
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: CALL_OW 30
2251: AND
2252: IFFALSE 2270
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2254: LD_ADDR_EXP 8
2258: PUSH
2259: LD_STRING 05_Gladstone
2261: PPUSH
2262: LD_INT 1
2264: PPUSH
2265: CALL 5521 0 2
2269: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2270: LD_EXP 8
2274: PPUSH
2275: LD_INT 4
2277: PPUSH
2278: LD_INT 0
2280: PPUSH
2281: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2285: LD_STRING LisaStayInDelta
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: CALL_OW 30
2295: IFFALSE 2328
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2297: LD_ADDR_EXP 6
2301: PUSH
2302: LD_STRING 05_Lisa
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: CALL 5521 0 2
2312: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2313: LD_EXP 6
2317: PPUSH
2318: LD_INT 4
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2328: LD_STRING BobbyStayInDelta
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: CALL_OW 30
2338: IFFALSE 2371
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2340: LD_ADDR_EXP 4
2344: PUSH
2345: LD_STRING 05_Bobby
2347: PPUSH
2348: LD_INT 1
2350: PPUSH
2351: CALL 5521 0 2
2355: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2356: LD_EXP 4
2360: PPUSH
2361: LD_INT 4
2363: PPUSH
2364: LD_INT 0
2366: PPUSH
2367: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2371: LD_STRING CyrusStayInDelta
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: CALL_OW 30
2381: IFFALSE 2414
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2383: LD_ADDR_EXP 5
2387: PUSH
2388: LD_STRING 05_Cyrus
2390: PPUSH
2391: LD_INT 1
2393: PPUSH
2394: CALL 5521 0 2
2398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2399: LD_EXP 5
2403: PPUSH
2404: LD_INT 4
2406: PPUSH
2407: LD_INT 0
2409: PPUSH
2410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2414: LD_STRING BrownStayInDelta
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: CALL_OW 30
2424: IFFALSE 2457
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
2426: LD_ADDR_EXP 2
2430: PUSH
2431: LD_STRING 05_Brown
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL 5521 0 2
2441: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2442: LD_EXP 2
2446: PPUSH
2447: LD_INT 4
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
2457: LD_STRING DonaldsonStayInDelta
2459: PPUSH
2460: LD_INT 0
2462: PPUSH
2463: CALL_OW 30
2467: IFFALSE 2500
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
2469: LD_ADDR_EXP 3
2473: PUSH
2474: LD_STRING 05_Donaldson
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL 5521 0 2
2484: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2485: LD_EXP 3
2489: PPUSH
2490: LD_INT 4
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2500: LD_ADDR_VAR 0 4
2504: PUSH
2505: LD_STRING OtherStayInDelta
2507: PPUSH
2508: CALL_OW 31
2512: ST_TO_ADDR
// if other then
2513: LD_VAR 0 4
2517: IFFALSE 2562
// for j = 1 to other do
2519: LD_ADDR_VAR 0 3
2523: PUSH
2524: DOUBLE
2525: LD_INT 1
2527: DEC
2528: ST_TO_ADDR
2529: LD_VAR 0 4
2533: PUSH
2534: FOR_TO
2535: IFFALSE 2560
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2537: LD_VAR 0 4
2541: PUSH
2542: LD_VAR 0 3
2546: ARRAY
2547: PPUSH
2548: LD_INT 4
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 49
2558: GO 2534
2560: POP
2561: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_STRING 06_other_apemans
2569: PPUSH
2570: CALL_OW 31
2574: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
2575: LD_VAR 0 4
2579: PUSH
2580: LD_INT 5
2582: PUSH
2583: LD_INT 4
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: LIST
2593: PUSH
2594: LD_OWVAR 67
2598: ARRAY
2599: GREATEREQUAL
2600: IFFALSE 2629
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
2602: LD_ADDR_VAR 0 3
2606: PUSH
2607: LD_INT 5
2609: PUSH
2610: LD_INT 4
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: LD_OWVAR 67
2625: ARRAY
2626: ST_TO_ADDR
2627: GO 2639
// j := other ;
2629: LD_ADDR_VAR 0 3
2633: PUSH
2634: LD_VAR 0 4
2638: ST_TO_ADDR
// for i = 1 to j do
2639: LD_ADDR_VAR 0 2
2643: PUSH
2644: DOUBLE
2645: LD_INT 1
2647: DEC
2648: ST_TO_ADDR
2649: LD_VAR 0 3
2653: PUSH
2654: FOR_TO
2655: IFFALSE 2680
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2657: LD_VAR 0 4
2661: PUSH
2662: LD_VAR 0 2
2666: ARRAY
2667: PPUSH
2668: LD_INT 4
2670: PPUSH
2671: LD_INT 0
2673: PPUSH
2674: CALL_OW 49
2678: GO 2654
2680: POP
2681: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2682: LD_INT 4
2684: PPUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 1
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 21
2697: PUSH
2698: LD_INT 1
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 70
2713: PPUSH
2714: LD_INT 53
2716: PPUSH
2717: LD_INT 19
2719: PPUSH
2720: CALL_OW 111
// firstAttack = 1 ;
2724: LD_ADDR_EXP 32
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// end ;
2732: LD_VAR 0 1
2736: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2737: LD_INT 0
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2744: LD_ADDR_VAR 0 4
2748: PUSH
2749: LD_STRING 07_vehicles
2751: PPUSH
2752: EMPTY
2753: PPUSH
2754: CALL_OW 30
2758: ST_TO_ADDR
// uc_side = 1 ;
2759: LD_ADDR_OWVAR 20
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// uc_nation = 1 ;
2767: LD_ADDR_OWVAR 21
2771: PUSH
2772: LD_INT 1
2774: ST_TO_ADDR
// if vehicles > 0 then
2775: LD_VAR 0 4
2779: PUSH
2780: LD_INT 0
2782: GREATER
2783: IFFALSE 2922
// begin for i = 1 to vehicles do
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: DOUBLE
2791: LD_INT 1
2793: DEC
2794: ST_TO_ADDR
2795: LD_VAR 0 4
2799: PUSH
2800: FOR_TO
2801: IFFALSE 2920
// begin vc_chassis = vehicles [ i ] ;
2803: LD_ADDR_OWVAR 37
2807: PUSH
2808: LD_VAR 0 4
2812: PUSH
2813: LD_VAR 0 2
2817: ARRAY
2818: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2819: LD_ADDR_OWVAR 39
2823: PUSH
2824: LD_VAR 0 4
2828: PUSH
2829: LD_VAR 0 2
2833: PUSH
2834: LD_INT 1
2836: PLUS
2837: ARRAY
2838: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2839: LD_ADDR_OWVAR 38
2843: PUSH
2844: LD_VAR 0 4
2848: PUSH
2849: LD_VAR 0 2
2853: PUSH
2854: LD_INT 2
2856: PLUS
2857: ARRAY
2858: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2859: LD_ADDR_OWVAR 40
2863: PUSH
2864: LD_VAR 0 4
2868: PUSH
2869: LD_VAR 0 2
2873: PUSH
2874: LD_INT 3
2876: PLUS
2877: ARRAY
2878: ST_TO_ADDR
// veh = CreateVehicle ;
2879: LD_ADDR_VAR 0 5
2883: PUSH
2884: CALL_OW 45
2888: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
2889: LD_VAR 0 5
2893: PPUSH
2894: LD_INT 4
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 49
// i = i + 3 ;
2904: LD_ADDR_VAR 0 2
2908: PUSH
2909: LD_VAR 0 2
2913: PUSH
2914: LD_INT 3
2916: PLUS
2917: ST_TO_ADDR
// end ;
2918: GO 2800
2920: POP
2921: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2922: LD_ADDR_EXP 1
2926: PUSH
2927: LD_EXP 41
2931: PUSH
2932: LD_STRING JMM
2934: STR
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: CALL 5521 0 2
2943: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2944: LD_EXP 11
2948: PUSH
2949: LD_INT 1
2951: EQUAL
2952: PUSH
2953: LD_EXP 11
2957: PUSH
2958: LD_INT 3
2960: EQUAL
2961: OR
2962: IFFALSE 2986
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
2964: LD_ADDR_EXP 2
2968: PUSH
2969: LD_EXP 41
2973: PUSH
2974: LD_STRING Brown
2976: STR
2977: PPUSH
2978: LD_INT 1
2980: PPUSH
2981: CALL 5521 0 2
2985: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
2986: LD_EXP 11
2990: PUSH
2991: LD_INT 2
2993: EQUAL
2994: PUSH
2995: LD_EXP 11
2999: PUSH
3000: LD_INT 3
3002: EQUAL
3003: OR
3004: IFFALSE 3028
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3006: LD_ADDR_EXP 3
3010: PUSH
3011: LD_EXP 41
3015: PUSH
3016: LD_STRING Donaldson
3018: STR
3019: PPUSH
3020: LD_INT 1
3022: PPUSH
3023: CALL 5521 0 2
3027: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3028: LD_ADDR_EXP 4
3032: PUSH
3033: LD_EXP 41
3037: PUSH
3038: LD_STRING Bobby
3040: STR
3041: PPUSH
3042: LD_INT 1
3044: PPUSH
3045: CALL 5521 0 2
3049: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3050: LD_ADDR_EXP 5
3054: PUSH
3055: LD_EXP 41
3059: PUSH
3060: LD_STRING Cyrus
3062: STR
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: CALL 5521 0 2
3071: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3072: LD_ADDR_EXP 6
3076: PUSH
3077: LD_EXP 41
3081: PUSH
3082: LD_STRING Lisa
3084: STR
3085: PPUSH
3086: LD_INT 1
3088: PPUSH
3089: CALL 5521 0 2
3093: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3094: LD_ADDR_EXP 7
3098: PUSH
3099: LD_EXP 41
3103: PUSH
3104: LD_STRING Frank
3106: STR
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: CALL 5521 0 2
3115: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3116: LD_ADDR_EXP 8
3120: PUSH
3121: LD_EXP 41
3125: PUSH
3126: LD_STRING Gladstone
3128: STR
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL 5521 0 2
3137: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3138: LD_ADDR_EXP 9
3142: PUSH
3143: LD_EXP 41
3147: PUSH
3148: LD_STRING Kikuchi
3150: STR
3151: PPUSH
3152: LD_INT 1
3154: PPUSH
3155: CALL 5521 0 2
3159: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3160: LD_EXP 11
3164: PUSH
3165: LD_INT 1
3167: EQUAL
3168: PUSH
3169: LD_EXP 11
3173: PUSH
3174: LD_INT 3
3176: EQUAL
3177: OR
3178: IFFALSE 3195
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3180: LD_EXP 2
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3195: LD_EXP 11
3199: PUSH
3200: LD_INT 2
3202: EQUAL
3203: PUSH
3204: LD_EXP 11
3208: PUSH
3209: LD_INT 3
3211: EQUAL
3212: OR
3213: IFFALSE 3230
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3215: LD_EXP 3
3219: PPUSH
3220: LD_INT 4
3222: PPUSH
3223: LD_INT 0
3225: PPUSH
3226: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3230: LD_ADDR_VAR 0 5
3234: PUSH
3235: LD_INT 4
3237: PPUSH
3238: LD_INT 22
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: LD_INT 21
3250: PUSH
3251: LD_INT 2
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 58
3260: PUSH
3261: EMPTY
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 70
3273: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3274: LD_ADDR_EXP 1
3278: PUSH
3279: LD_EXP 41
3283: PUSH
3284: LD_STRING JMM
3286: STR
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: CALL 5521 0 2
3295: ST_TO_ADDR
// if veh > 0 then
3296: LD_VAR 0 5
3300: PUSH
3301: LD_INT 0
3303: GREATER
3304: IFFALSE 3326
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3306: LD_EXP 1
3310: PPUSH
3311: LD_VAR 0 5
3315: PUSH
3316: LD_INT 1
3318: ARRAY
3319: PPUSH
3320: CALL_OW 52
// end else
3324: GO 3341
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3326: LD_EXP 1
3330: PPUSH
3331: LD_INT 4
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3341: LD_ADDR_VAR 0 5
3345: PUSH
3346: LD_INT 4
3348: PPUSH
3349: LD_INT 22
3351: PUSH
3352: LD_INT 1
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 21
3361: PUSH
3362: LD_INT 2
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 58
3371: PUSH
3372: EMPTY
3373: LIST
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: PPUSH
3380: CALL_OW 70
3384: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3385: LD_ADDR_EXP 4
3389: PUSH
3390: LD_EXP 41
3394: PUSH
3395: LD_STRING Bobby
3397: STR
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: CALL 5521 0 2
3406: ST_TO_ADDR
// if veh > 0 then
3407: LD_VAR 0 5
3411: PUSH
3412: LD_INT 0
3414: GREATER
3415: IFFALSE 3437
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3417: LD_EXP 4
3421: PPUSH
3422: LD_VAR 0 5
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: PPUSH
3431: CALL_OW 52
// end else
3435: GO 3452
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3437: LD_EXP 4
3441: PPUSH
3442: LD_INT 4
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3452: LD_ADDR_VAR 0 5
3456: PUSH
3457: LD_INT 4
3459: PPUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 1
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 21
3472: PUSH
3473: LD_INT 2
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 58
3482: PUSH
3483: EMPTY
3484: LIST
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: LIST
3490: PPUSH
3491: CALL_OW 70
3495: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3496: LD_ADDR_EXP 5
3500: PUSH
3501: LD_EXP 41
3505: PUSH
3506: LD_STRING Cyrus
3508: STR
3509: PPUSH
3510: LD_INT 1
3512: PPUSH
3513: CALL 5521 0 2
3517: ST_TO_ADDR
// if veh > 0 then
3518: LD_VAR 0 5
3522: PUSH
3523: LD_INT 0
3525: GREATER
3526: IFFALSE 3548
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3528: LD_EXP 5
3532: PPUSH
3533: LD_VAR 0 5
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: CALL_OW 52
// end else
3546: GO 3563
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3548: LD_EXP 5
3552: PPUSH
3553: LD_INT 4
3555: PPUSH
3556: LD_INT 0
3558: PPUSH
3559: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3563: LD_ADDR_VAR 0 5
3567: PUSH
3568: LD_INT 4
3570: PPUSH
3571: LD_INT 22
3573: PUSH
3574: LD_INT 1
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 21
3583: PUSH
3584: LD_INT 2
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 58
3593: PUSH
3594: EMPTY
3595: LIST
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: PPUSH
3602: CALL_OW 70
3606: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3607: LD_ADDR_EXP 6
3611: PUSH
3612: LD_EXP 41
3616: PUSH
3617: LD_STRING Lisa
3619: STR
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: CALL 5521 0 2
3628: ST_TO_ADDR
// if veh > 0 then
3629: LD_VAR 0 5
3633: PUSH
3634: LD_INT 0
3636: GREATER
3637: IFFALSE 3659
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3639: LD_EXP 6
3643: PPUSH
3644: LD_VAR 0 5
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 52
// end else
3657: GO 3674
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3659: LD_EXP 6
3663: PPUSH
3664: LD_INT 4
3666: PPUSH
3667: LD_INT 0
3669: PPUSH
3670: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3674: LD_ADDR_VAR 0 5
3678: PUSH
3679: LD_INT 4
3681: PPUSH
3682: LD_INT 22
3684: PUSH
3685: LD_INT 1
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 21
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 58
3704: PUSH
3705: EMPTY
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: CALL_OW 70
3717: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3718: LD_ADDR_EXP 7
3722: PUSH
3723: LD_EXP 41
3727: PUSH
3728: LD_STRING Frank
3730: STR
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: CALL 5521 0 2
3739: ST_TO_ADDR
// if veh > 0 then
3740: LD_VAR 0 5
3744: PUSH
3745: LD_INT 0
3747: GREATER
3748: IFFALSE 3770
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3750: LD_EXP 7
3754: PPUSH
3755: LD_VAR 0 5
3759: PUSH
3760: LD_INT 1
3762: ARRAY
3763: PPUSH
3764: CALL_OW 52
// end else
3768: GO 3785
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3770: LD_EXP 7
3774: PPUSH
3775: LD_INT 4
3777: PPUSH
3778: LD_INT 0
3780: PPUSH
3781: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3785: LD_ADDR_VAR 0 5
3789: PUSH
3790: LD_INT 4
3792: PPUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 1
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 21
3805: PUSH
3806: LD_INT 2
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 58
3815: PUSH
3816: EMPTY
3817: LIST
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: PPUSH
3824: CALL_OW 70
3828: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3829: LD_ADDR_EXP 8
3833: PUSH
3834: LD_EXP 41
3838: PUSH
3839: LD_STRING Gladstone
3841: STR
3842: PPUSH
3843: LD_INT 1
3845: PPUSH
3846: CALL 5521 0 2
3850: ST_TO_ADDR
// if veh > 0 then
3851: LD_VAR 0 5
3855: PUSH
3856: LD_INT 0
3858: GREATER
3859: IFFALSE 3881
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3861: LD_EXP 8
3865: PPUSH
3866: LD_VAR 0 5
3870: PUSH
3871: LD_INT 1
3873: ARRAY
3874: PPUSH
3875: CALL_OW 52
// end else
3879: GO 3896
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3881: LD_EXP 8
3885: PPUSH
3886: LD_INT 4
3888: PPUSH
3889: LD_INT 0
3891: PPUSH
3892: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3896: LD_ADDR_VAR 0 5
3900: PUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_INT 22
3906: PUSH
3907: LD_INT 1
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 21
3916: PUSH
3917: LD_INT 2
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: LD_INT 58
3926: PUSH
3927: EMPTY
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 70
3939: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3940: LD_ADDR_EXP 9
3944: PUSH
3945: LD_EXP 41
3949: PUSH
3950: LD_STRING Kikuchi
3952: STR
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL 5521 0 2
3961: ST_TO_ADDR
// if veh > 0 then
3962: LD_VAR 0 5
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 3992
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
3972: LD_EXP 9
3976: PPUSH
3977: LD_VAR 0 5
3981: PUSH
3982: LD_INT 1
3984: ARRAY
3985: PPUSH
3986: CALL_OW 52
// end else
3990: GO 4007
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
3992: LD_EXP 9
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4007: LD_ADDR_VAR 0 3
4011: PUSH
4012: LD_STRING 07c_others
4014: PPUSH
4015: CALL_OW 31
4019: ST_TO_ADDR
// for i in other do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: LD_VAR 0 3
4029: PUSH
4030: FOR_IN
4031: IFFALSE 4124
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4033: LD_ADDR_VAR 0 5
4037: PUSH
4038: LD_INT 4
4040: PPUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 1
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 21
4053: PUSH
4054: LD_INT 2
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 58
4063: PUSH
4064: EMPTY
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 70
4076: ST_TO_ADDR
// if veh > 0 then
4077: LD_VAR 0 5
4081: PUSH
4082: LD_INT 0
4084: GREATER
4085: IFFALSE 4107
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4087: LD_VAR 0 2
4091: PPUSH
4092: LD_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: ARRAY
4100: PPUSH
4101: CALL_OW 52
// end else
4105: GO 4122
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4107: LD_VAR 0 2
4111: PPUSH
4112: LD_INT 4
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: CALL_OW 49
// end ; end ;
4122: GO 4030
4124: POP
4125: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4126: LD_INT 4
4128: PPUSH
4129: LD_INT 22
4131: PUSH
4132: LD_INT 1
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: EMPTY
4140: LIST
4141: PPUSH
4142: CALL_OW 70
4146: PPUSH
4147: LD_INT 53
4149: PPUSH
4150: LD_INT 19
4152: PPUSH
4153: CALL_OW 111
// end ;
4157: LD_VAR 0 1
4161: RET
// export function PrepareSikorsky ; begin
4162: LD_INT 0
4164: PPUSH
// uc_side = 4 ;
4165: LD_ADDR_OWVAR 20
4169: PUSH
4170: LD_INT 4
4172: ST_TO_ADDR
// uc_nation = 1 ;
4173: LD_ADDR_OWVAR 21
4177: PUSH
4178: LD_INT 1
4180: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4181: LD_ADDR_EXP 15
4185: PUSH
4186: LD_STRING Sikorski
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL 5521 0 2
4196: ST_TO_ADDR
// vc_engine = 1 ;
4197: LD_ADDR_OWVAR 39
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// vc_control = 1 ;
4205: LD_ADDR_OWVAR 38
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4213: LD_ADDR_OWVAR 40
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: LD_INT 3
4223: PUSH
4224: LD_INT 4
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: LD_OWVAR 67
4236: ARRAY
4237: ST_TO_ADDR
// vc_chassis = 4 ;
4238: LD_ADDR_OWVAR 37
4242: PUSH
4243: LD_INT 4
4245: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4246: LD_ADDR_EXP 16
4250: PUSH
4251: CALL_OW 45
4255: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4256: LD_EXP 16
4260: PPUSH
4261: LD_INT 9
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4271: LD_EXP 15
4275: PPUSH
4276: LD_EXP 16
4280: PPUSH
4281: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4285: LD_EXP 16
4289: PPUSH
4290: LD_INT 5
4292: PPUSH
4293: CALL_OW 113
// end ;
4297: LD_VAR 0 1
4301: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: DOUBLE
4314: LD_INT 1
4316: DEC
4317: ST_TO_ADDR
4318: LD_INT 8
4320: PUSH
4321: LD_INT 7
4323: PUSH
4324: LD_INT 7
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: LIST
4331: PUSH
4332: LD_OWVAR 67
4336: ARRAY
4337: PUSH
4338: FOR_TO
4339: IFFALSE 4436
// begin uc_side = 4 ;
4341: LD_ADDR_OWVAR 20
4345: PUSH
4346: LD_INT 4
4348: ST_TO_ADDR
// uc_nation = 1 ;
4349: LD_ADDR_OWVAR 21
4353: PUSH
4354: LD_INT 1
4356: ST_TO_ADDR
// hc_name =  ;
4357: LD_ADDR_OWVAR 26
4361: PUSH
4362: LD_STRING 
4364: ST_TO_ADDR
// hc_gallery =  ;
4365: LD_ADDR_OWVAR 33
4369: PUSH
4370: LD_STRING 
4372: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4373: LD_INT 0
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: LD_INT 5
4381: PPUSH
4382: LD_INT 8
4384: PPUSH
4385: CALL_OW 12
4389: PPUSH
4390: CALL_OW 380
// un = CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 9
4411: PPUSH
4412: LD_INT 0
4414: PPUSH
4415: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4419: LD_VAR 0 3
4423: PPUSH
4424: LD_INT 53
4426: PPUSH
4427: LD_INT 23
4429: PPUSH
4430: CALL_OW 111
// end ;
4434: GO 4338
4436: POP
4437: POP
// for i = 1 to 3 do
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: DOUBLE
4444: LD_INT 1
4446: DEC
4447: ST_TO_ADDR
4448: LD_INT 3
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4549
// begin uc_side = 4 ;
4454: LD_ADDR_OWVAR 20
4458: PUSH
4459: LD_INT 4
4461: ST_TO_ADDR
// uc_nation = 1 ;
4462: LD_ADDR_OWVAR 21
4466: PUSH
4467: LD_INT 1
4469: ST_TO_ADDR
// hc_name =  ;
4470: LD_ADDR_OWVAR 26
4474: PUSH
4475: LD_STRING 
4477: ST_TO_ADDR
// hc_gallery =  ;
4478: LD_ADDR_OWVAR 33
4482: PUSH
4483: LD_STRING 
4485: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4486: LD_INT 0
4488: PPUSH
4489: LD_INT 4
4491: PPUSH
4492: LD_INT 5
4494: PPUSH
4495: LD_INT 8
4497: PPUSH
4498: CALL_OW 12
4502: PPUSH
4503: CALL_OW 380
// un = CreateHuman ;
4507: LD_ADDR_VAR 0 3
4511: PUSH
4512: CALL_OW 44
4516: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4517: LD_VAR 0 3
4521: PPUSH
4522: LD_INT 9
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4532: LD_VAR 0 3
4536: PPUSH
4537: LD_INT 53
4539: PPUSH
4540: LD_INT 23
4542: PPUSH
4543: CALL_OW 111
// end ;
4547: GO 4451
4549: POP
4550: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4551: LD_ADDR_VAR 0 2
4555: PUSH
4556: DOUBLE
4557: LD_INT 1
4559: DEC
4560: ST_TO_ADDR
4561: LD_INT 9
4563: PUSH
4564: LD_INT 8
4566: PUSH
4567: LD_INT 7
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_OWVAR 67
4579: ARRAY
4580: PUSH
4581: FOR_TO
4582: IFFALSE 4778
// begin uc_side = 4 ;
4584: LD_ADDR_OWVAR 20
4588: PUSH
4589: LD_INT 4
4591: ST_TO_ADDR
// uc_nation = 1 ;
4592: LD_ADDR_OWVAR 21
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// vc_engine = 1 ;
4600: LD_ADDR_OWVAR 39
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// vc_control = 1 ;
4608: LD_ADDR_OWVAR 38
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4616: LD_ADDR_OWVAR 40
4620: PUSH
4621: LD_INT 3
4623: PUSH
4624: LD_INT 4
4626: PUSH
4627: LD_INT 5
4629: PUSH
4630: LD_INT 6
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 4
4644: PPUSH
4645: CALL_OW 12
4649: ARRAY
4650: ST_TO_ADDR
// vc_chassis = 4 ;
4651: LD_ADDR_OWVAR 37
4655: PUSH
4656: LD_INT 4
4658: ST_TO_ADDR
// veh = CreateVehicle ;
4659: LD_ADDR_VAR 0 4
4663: PUSH
4664: CALL_OW 45
4668: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4669: LD_VAR 0 4
4673: PPUSH
4674: LD_INT 9
4676: PPUSH
4677: LD_INT 0
4679: PPUSH
4680: CALL_OW 49
// hc_name =  ;
4684: LD_ADDR_OWVAR 26
4688: PUSH
4689: LD_STRING 
4691: ST_TO_ADDR
// hc_gallery =  ;
4692: LD_ADDR_OWVAR 33
4696: PUSH
4697: LD_STRING 
4699: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: LD_INT 5
4708: PPUSH
4709: LD_INT 8
4711: PPUSH
4712: CALL_OW 12
4716: PPUSH
4717: CALL_OW 380
// un = CreateHuman ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: CALL_OW 44
4730: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_VAR 0 4
4740: PPUSH
4741: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4745: LD_VAR 0 4
4749: PUSH
4750: LD_VAR 0 3
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: LD_INT 53
4761: PPUSH
4762: LD_INT 23
4764: PPUSH
4765: CALL_OW 111
// wait ( 0 0$5 ) ;
4769: LD_INT 175
4771: PPUSH
4772: CALL_OW 67
// end ;
4776: GO 4581
4778: POP
4779: POP
// end ; end_of_file
4780: LD_VAR 0 1
4784: RET
// export function PrepareRussianCommander ; begin
4785: LD_INT 0
4787: PPUSH
// uc_side = 3 ;
4788: LD_ADDR_OWVAR 20
4792: PUSH
4793: LD_INT 3
4795: ST_TO_ADDR
// uc_nation = 3 ;
4796: LD_ADDR_OWVAR 21
4800: PUSH
4801: LD_INT 3
4803: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4804: LD_ADDR_EXP 23
4808: PUSH
4809: LD_STRING Borodin
4811: PPUSH
4812: CALL_OW 25
4816: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
4817: LD_EXP 23
4821: PPUSH
4822: LD_INT 3
4824: PPUSH
4825: LD_INT 0
4827: PPUSH
4828: CALL_OW 49
// end ;
4832: LD_VAR 0 1
4836: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
// for i = 1 to 10 do
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: DOUBLE
4849: LD_INT 1
4851: DEC
4852: ST_TO_ADDR
4853: LD_INT 10
4855: PUSH
4856: FOR_TO
4857: IFFALSE 4931
// begin uc_side = 6 ;
4859: LD_ADDR_OWVAR 20
4863: PUSH
4864: LD_INT 6
4866: ST_TO_ADDR
// uc_nation = 3 ;
4867: LD_ADDR_OWVAR 21
4871: PUSH
4872: LD_INT 3
4874: ST_TO_ADDR
// hc_gallery =  ;
4875: LD_ADDR_OWVAR 33
4879: PUSH
4880: LD_STRING 
4882: ST_TO_ADDR
// hc_name =  ;
4883: LD_ADDR_OWVAR 26
4887: PUSH
4888: LD_STRING 
4890: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
4891: LD_INT 0
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: LD_INT 3
4899: PPUSH
4900: CALL_OW 380
// un = CreateHuman ;
4904: LD_ADDR_VAR 0 3
4908: PUSH
4909: CALL_OW 44
4913: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
4914: LD_VAR 0 3
4918: PPUSH
4919: LD_INT 1
4921: PPUSH
4922: LD_INT 0
4924: PPUSH
4925: CALL_OW 49
// end ;
4929: GO 4856
4931: POP
4932: POP
// for i = 1 to 3 do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: DOUBLE
4939: LD_INT 1
4941: DEC
4942: ST_TO_ADDR
4943: LD_INT 3
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5096
// begin uc_side = 6 ;
4949: LD_ADDR_OWVAR 20
4953: PUSH
4954: LD_INT 6
4956: ST_TO_ADDR
// uc_nation = 3 ;
4957: LD_ADDR_OWVAR 21
4961: PUSH
4962: LD_INT 3
4964: ST_TO_ADDR
// vc_engine = 1 ;
4965: LD_ADDR_OWVAR 39
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// vc_control = 1 ;
4973: LD_ADDR_OWVAR 38
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
4981: LD_ADDR_OWVAR 40
4985: PUSH
4986: LD_INT 43
4988: PUSH
4989: LD_INT 44
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 1
4998: PPUSH
4999: LD_INT 2
5001: PPUSH
5002: CALL_OW 12
5006: ARRAY
5007: ST_TO_ADDR
// vc_chassis = 22 ;
5008: LD_ADDR_OWVAR 37
5012: PUSH
5013: LD_INT 22
5015: ST_TO_ADDR
// veh = CreateVehicle ;
5016: LD_ADDR_VAR 0 4
5020: PUSH
5021: CALL_OW 45
5025: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5026: LD_VAR 0 4
5030: PPUSH
5031: LD_INT 2
5033: PPUSH
5034: LD_INT 0
5036: PPUSH
5037: CALL_OW 49
// hc_gallery =  ;
5041: LD_ADDR_OWVAR 33
5045: PUSH
5046: LD_STRING 
5048: ST_TO_ADDR
// hc_name =  ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING 
5056: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5057: LD_INT 0
5059: PPUSH
5060: LD_INT 3
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: CALL_OW 380
// un = CreateHuman ;
5070: LD_ADDR_VAR 0 3
5074: PUSH
5075: CALL_OW 44
5079: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5080: LD_VAR 0 3
5084: PPUSH
5085: LD_VAR 0 4
5089: PPUSH
5090: CALL_OW 52
// end ;
5094: GO 4946
5096: POP
5097: POP
// end ;
5098: LD_VAR 0 1
5102: RET
// export function PrepareRussians ; var i , un ; begin
5103: LD_INT 0
5105: PPUSH
5106: PPUSH
5107: PPUSH
// for i = 1 to 14 do
5108: LD_ADDR_VAR 0 2
5112: PUSH
5113: DOUBLE
5114: LD_INT 1
5116: DEC
5117: ST_TO_ADDR
5118: LD_INT 14
5120: PUSH
5121: FOR_TO
5122: IFFALSE 5208
// begin uc_side = 3 ;
5124: LD_ADDR_OWVAR 20
5128: PUSH
5129: LD_INT 3
5131: ST_TO_ADDR
// uc_nation = 3 ;
5132: LD_ADDR_OWVAR 21
5136: PUSH
5137: LD_INT 3
5139: ST_TO_ADDR
// hc_gallery =  ;
5140: LD_ADDR_OWVAR 33
5144: PUSH
5145: LD_STRING 
5147: ST_TO_ADDR
// hc_name =  ;
5148: LD_ADDR_OWVAR 26
5152: PUSH
5153: LD_STRING 
5155: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5156: LD_INT 0
5158: PPUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_EXP 24
5166: PPUSH
5167: LD_EXP 25
5171: PPUSH
5172: CALL_OW 12
5176: PPUSH
5177: CALL_OW 380
// un = CreateHuman ;
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: CALL_OW 44
5190: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5191: LD_VAR 0 3
5195: PPUSH
5196: LD_INT 3
5198: PPUSH
5199: LD_INT 0
5201: PPUSH
5202: CALL_OW 49
// end ;
5206: GO 5121
5208: POP
5209: POP
// for i = 1 to 6 do
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: DOUBLE
5216: LD_INT 1
5218: DEC
5219: ST_TO_ADDR
5220: LD_INT 6
5222: PUSH
5223: FOR_TO
5224: IFFALSE 5310
// begin uc_side = 3 ;
5226: LD_ADDR_OWVAR 20
5230: PUSH
5231: LD_INT 3
5233: ST_TO_ADDR
// uc_nation = 3 ;
5234: LD_ADDR_OWVAR 21
5238: PUSH
5239: LD_INT 3
5241: ST_TO_ADDR
// hc_gallery =  ;
5242: LD_ADDR_OWVAR 33
5246: PUSH
5247: LD_STRING 
5249: ST_TO_ADDR
// hc_name =  ;
5250: LD_ADDR_OWVAR 26
5254: PUSH
5255: LD_STRING 
5257: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5258: LD_INT 0
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_EXP 24
5268: PPUSH
5269: LD_EXP 25
5273: PPUSH
5274: CALL_OW 12
5278: PPUSH
5279: CALL_OW 380
// un = CreateHuman ;
5283: LD_ADDR_VAR 0 3
5287: PUSH
5288: CALL_OW 44
5292: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5293: LD_VAR 0 3
5297: PPUSH
5298: LD_INT 3
5300: PPUSH
5301: LD_INT 0
5303: PPUSH
5304: CALL_OW 49
// end ;
5308: GO 5223
5310: POP
5311: POP
// for i = 1 to 6 do
5312: LD_ADDR_VAR 0 2
5316: PUSH
5317: DOUBLE
5318: LD_INT 1
5320: DEC
5321: ST_TO_ADDR
5322: LD_INT 6
5324: PUSH
5325: FOR_TO
5326: IFFALSE 5412
// begin uc_side = 3 ;
5328: LD_ADDR_OWVAR 20
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// uc_nation = 3 ;
5336: LD_ADDR_OWVAR 21
5340: PUSH
5341: LD_INT 3
5343: ST_TO_ADDR
// hc_gallery =  ;
5344: LD_ADDR_OWVAR 33
5348: PUSH
5349: LD_STRING 
5351: ST_TO_ADDR
// hc_name =  ;
5352: LD_ADDR_OWVAR 26
5356: PUSH
5357: LD_STRING 
5359: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5360: LD_INT 0
5362: PPUSH
5363: LD_INT 3
5365: PPUSH
5366: LD_EXP 24
5370: PPUSH
5371: LD_EXP 25
5375: PPUSH
5376: CALL_OW 12
5380: PPUSH
5381: CALL_OW 380
// un = CreateHuman ;
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: CALL_OW 44
5394: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: LD_INT 3
5402: PPUSH
5403: LD_INT 0
5405: PPUSH
5406: CALL_OW 49
// end ;
5410: GO 5325
5412: POP
5413: POP
// for i = 1 to 4 do
5414: LD_ADDR_VAR 0 2
5418: PUSH
5419: DOUBLE
5420: LD_INT 1
5422: DEC
5423: ST_TO_ADDR
5424: LD_INT 4
5426: PUSH
5427: FOR_TO
5428: IFFALSE 5514
// begin uc_side = 3 ;
5430: LD_ADDR_OWVAR 20
5434: PUSH
5435: LD_INT 3
5437: ST_TO_ADDR
// uc_nation = 3 ;
5438: LD_ADDR_OWVAR 21
5442: PUSH
5443: LD_INT 3
5445: ST_TO_ADDR
// hc_gallery =  ;
5446: LD_ADDR_OWVAR 33
5450: PUSH
5451: LD_STRING 
5453: ST_TO_ADDR
// hc_name =  ;
5454: LD_ADDR_OWVAR 26
5458: PUSH
5459: LD_STRING 
5461: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 4
5467: PPUSH
5468: LD_EXP 24
5472: PPUSH
5473: LD_EXP 25
5477: PPUSH
5478: CALL_OW 12
5482: PPUSH
5483: CALL_OW 380
// un = CreateHuman ;
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: CALL_OW 44
5496: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5497: LD_VAR 0 3
5501: PPUSH
5502: LD_INT 3
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: CALL_OW 49
// end ;
5512: GO 5427
5514: POP
5515: POP
// end ; end_of_file
5516: LD_VAR 0 1
5520: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
// if exist_mode then
5525: LD_VAR 0 2
5529: IFFALSE 5548
// unit := CreateCharacter ( ident ) else
5531: LD_ADDR_VAR 0 4
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: CALL_OW 34
5545: ST_TO_ADDR
5546: GO 5563
// unit := NewCharacter ( ident ) ;
5548: LD_ADDR_VAR 0 4
5552: PUSH
5553: LD_VAR 0 1
5557: PPUSH
5558: CALL_OW 25
5562: ST_TO_ADDR
// result := unit ;
5563: LD_ADDR_VAR 0 3
5567: PUSH
5568: LD_VAR 0 4
5572: ST_TO_ADDR
// end ;
5573: LD_VAR 0 3
5577: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
// rnd = rand ( 1 , characters ) ;
5583: LD_ADDR_VAR 0 6
5587: PUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_VAR 0 1
5595: PPUSH
5596: CALL_OW 12
5600: ST_TO_ADDR
// for i = 1 to characters do
5601: LD_ADDR_VAR 0 5
5605: PUSH
5606: DOUBLE
5607: LD_INT 1
5609: DEC
5610: ST_TO_ADDR
5611: LD_VAR 0 1
5615: PUSH
5616: FOR_TO
5617: IFFALSE 5727
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5619: LD_VAR 0 5
5623: PUSH
5624: LD_VAR 0 6
5628: EQUAL
5629: PUSH
5630: LD_VAR 0 1
5634: PUSH
5635: LD_VAR 0 5
5639: ARRAY
5640: PPUSH
5641: CALL_OW 258
5645: PUSH
5646: LD_INT 1
5648: EQUAL
5649: AND
5650: IFFALSE 5672
// Say ( characters [ i ] , dialogMID ) ;
5652: LD_VAR 0 1
5656: PUSH
5657: LD_VAR 0 5
5661: ARRAY
5662: PPUSH
5663: LD_VAR 0 2
5667: PPUSH
5668: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5672: LD_VAR 0 5
5676: PUSH
5677: LD_VAR 0 6
5681: EQUAL
5682: PUSH
5683: LD_VAR 0 1
5687: PUSH
5688: LD_VAR 0 5
5692: ARRAY
5693: PPUSH
5694: CALL_OW 258
5698: PUSH
5699: LD_INT 2
5701: EQUAL
5702: AND
5703: IFFALSE 5725
// Say ( characters [ i ] , dialogFID ) ;
5705: LD_VAR 0 1
5709: PUSH
5710: LD_VAR 0 5
5714: ARRAY
5715: PPUSH
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 88
// end ;
5725: GO 5616
5727: POP
5728: POP
// end ;
5729: LD_VAR 0 4
5733: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5734: LD_INT 0
5736: PPUSH
5737: PPUSH
5738: PPUSH
// uc_side := GetSide ( b ) ;
5739: LD_ADDR_OWVAR 20
5743: PUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 255
5753: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5754: LD_ADDR_OWVAR 21
5758: PUSH
5759: LD_VAR 0 2
5763: PPUSH
5764: CALL_OW 248
5768: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 1
5774: PPUSH
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5784: LD_ADDR_VAR 0 5
5788: PUSH
5789: LD_VAR 0 2
5793: PPUSH
5794: CALL_OW 254
5798: PUSH
5799: LD_INT 3
5801: MINUS
5802: ST_TO_ADDR
// if dir < 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 0
5810: LESS
5811: IFFALSE 5827
// dir := 6 + dir ;
5813: LD_ADDR_VAR 0 5
5817: PUSH
5818: LD_INT 6
5820: PUSH
5821: LD_VAR 0 5
5825: PLUS
5826: ST_TO_ADDR
// un := CreateHuman ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: CALL_OW 44
5836: ST_TO_ADDR
// SetDir ( un , dir ) ;
5837: LD_VAR 0 4
5841: PPUSH
5842: LD_VAR 0 5
5846: PPUSH
5847: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5851: LD_VAR 0 4
5855: PPUSH
5856: LD_VAR 0 2
5860: PPUSH
5861: CALL_OW 52
// end ;
5865: LD_VAR 0 3
5869: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5870: LD_INT 0
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
// for i = 1 to count do
5876: LD_ADDR_VAR 0 8
5880: PUSH
5881: DOUBLE
5882: LD_INT 1
5884: DEC
5885: ST_TO_ADDR
5886: LD_VAR 0 6
5890: PUSH
5891: FOR_TO
5892: IFFALSE 5973
// begin uc_side = side ;
5894: LD_ADDR_OWVAR 20
5898: PUSH
5899: LD_VAR 0 1
5903: ST_TO_ADDR
// uc_nation = nation ;
5904: LD_ADDR_OWVAR 21
5908: PUSH
5909: LD_VAR 0 2
5913: ST_TO_ADDR
// hc_gallery =  ;
5914: LD_ADDR_OWVAR 33
5918: PUSH
5919: LD_STRING 
5921: ST_TO_ADDR
// hc_name =  ;
5922: LD_ADDR_OWVAR 26
5926: PUSH
5927: LD_STRING 
5929: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5930: LD_INT 0
5932: PPUSH
5933: LD_VAR 0 5
5937: PPUSH
5938: LD_VAR 0 4
5942: PPUSH
5943: CALL_OW 380
// un = CreateHuman ;
5947: LD_ADDR_VAR 0 10
5951: PUSH
5952: CALL_OW 44
5956: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5957: LD_VAR 0 10
5961: PPUSH
5962: LD_VAR 0 3
5966: PPUSH
5967: CALL_OW 52
// end ;
5971: GO 5891
5973: POP
5974: POP
// end ;
5975: LD_VAR 0 7
5979: RET
// export function PrepareDifficulty ; begin
5980: LD_INT 0
5982: PPUSH
// if Difficulty = 1 then
5983: LD_OWVAR 67
5987: PUSH
5988: LD_INT 1
5990: EQUAL
5991: IFFALSE 6009
// begin RuSolMinLevel = 4 ;
5993: LD_ADDR_EXP 24
5997: PUSH
5998: LD_INT 4
6000: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6001: LD_ADDR_EXP 25
6005: PUSH
6006: LD_INT 6
6008: ST_TO_ADDR
// end ; if Difficulty = 2 then
6009: LD_OWVAR 67
6013: PUSH
6014: LD_INT 2
6016: EQUAL
6017: IFFALSE 6087
// begin RuSolMinLevel = 5 ;
6019: LD_ADDR_EXP 24
6023: PUSH
6024: LD_INT 5
6026: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6027: LD_ADDR_EXP 25
6031: PUSH
6032: LD_INT 6
6034: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6035: LD_INT 51
6037: PPUSH
6038: LD_INT 3
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6048: LD_INT 57
6050: PPUSH
6051: LD_INT 3
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6061: LD_INT 57
6063: PPUSH
6064: LD_INT 6
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6074: LD_INT 51
6076: PPUSH
6077: LD_INT 6
6079: PPUSH
6080: LD_INT 2
6082: PPUSH
6083: CALL_OW 322
// end ; if Difficulty = 3 then
6087: LD_OWVAR 67
6091: PUSH
6092: LD_INT 3
6094: EQUAL
6095: IFFALSE 6178
// begin RuSolMinLevel = 5 ;
6097: LD_ADDR_EXP 24
6101: PUSH
6102: LD_INT 5
6104: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
6105: LD_ADDR_EXP 25
6109: PUSH
6110: LD_INT 7
6112: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6113: LD_INT 57
6115: PPUSH
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 1
6121: PPUSH
6122: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6126: LD_INT 51
6128: PPUSH
6129: LD_INT 3
6131: PPUSH
6132: LD_INT 1
6134: PPUSH
6135: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6139: LD_INT 52
6141: PPUSH
6142: LD_INT 3
6144: PPUSH
6145: LD_INT 1
6147: PPUSH
6148: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6152: LD_INT 57
6154: PPUSH
6155: LD_INT 6
6157: PPUSH
6158: LD_INT 2
6160: PPUSH
6161: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6165: LD_INT 52
6167: PPUSH
6168: LD_INT 6
6170: PPUSH
6171: LD_INT 2
6173: PPUSH
6174: CALL_OW 322
// end ; end ;
6178: LD_VAR 0 1
6182: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6189: LD_ADDR_VAR 0 3
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 25
6206: PUSH
6207: LD_INT 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6223: LD_ADDR_VAR 0 4
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 75
6233: PUSH
6234: LD_INT 79
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 4
6248: PUSH
6249: LD_INT 113
6251: PUSH
6252: LD_INT 94
6254: PUSH
6255: LD_INT 4
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 29
6266: PUSH
6267: LD_INT 106
6269: PUSH
6270: LD_INT 97
6272: PUSH
6273: LD_INT 3
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 26
6284: PUSH
6285: LD_INT 93
6287: PUSH
6288: LD_INT 97
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: LD_INT 100
6305: PUSH
6306: LD_INT 89
6308: PUSH
6309: LD_INT 3
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 17
6320: PUSH
6321: LD_INT 96
6323: PUSH
6324: LD_INT 89
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 32
6338: PUSH
6339: LD_INT 78
6341: PUSH
6342: LD_INT 94
6344: PUSH
6345: LD_INT 1
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: LD_INT 32
6356: PUSH
6357: LD_INT 95
6359: PUSH
6360: LD_INT 82
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 32
6374: PUSH
6375: LD_INT 104
6377: PUSH
6378: LD_INT 85
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 32
6392: PUSH
6393: LD_INT 81
6395: PUSH
6396: LD_INT 78
6398: PUSH
6399: LD_INT 2
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 33
6410: PUSH
6411: LD_INT 109
6413: PUSH
6414: LD_INT 90
6416: PUSH
6417: LD_INT 3
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 33
6428: PUSH
6429: LD_INT 88
6431: PUSH
6432: LD_INT 79
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 33
6446: PUSH
6447: LD_INT 76
6449: PUSH
6450: LD_INT 87
6452: PUSH
6453: LD_INT 1
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_INT 96
6467: PUSH
6468: LD_INT 97
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 26
6482: PUSH
6483: LD_INT 85
6485: PUSH
6486: LD_INT 84
6488: PUSH
6489: LD_INT 2
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 6
6500: PUSH
6501: LD_INT 88
6503: PUSH
6504: LD_INT 95
6506: PUSH
6507: LD_INT 0
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 19
6518: PUSH
6519: LD_INT 103
6521: PUSH
6522: LD_INT 89
6524: PUSH
6525: LD_INT 4
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 16
6536: PUSH
6537: LD_INT 97
6539: PUSH
6540: LD_INT 86
6542: PUSH
6543: LD_INT 2
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 24
6554: PUSH
6555: LD_INT 100
6557: PUSH
6558: LD_INT 85
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: ST_TO_ADDR
// for i := 1 to buildingsTab do
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_VAR 0 4
6605: PUSH
6606: FOR_TO
6607: IFFALSE 6680
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6609: LD_VAR 0 3
6613: PPUSH
6614: LD_VAR 0 4
6618: PUSH
6619: LD_VAR 0 2
6623: ARRAY
6624: PUSH
6625: LD_INT 1
6627: ARRAY
6628: PPUSH
6629: LD_VAR 0 4
6633: PUSH
6634: LD_VAR 0 2
6638: ARRAY
6639: PUSH
6640: LD_INT 2
6642: ARRAY
6643: PPUSH
6644: LD_VAR 0 4
6648: PUSH
6649: LD_VAR 0 2
6653: ARRAY
6654: PUSH
6655: LD_INT 3
6657: ARRAY
6658: PPUSH
6659: LD_VAR 0 4
6663: PUSH
6664: LD_VAR 0 2
6668: ARRAY
6669: PUSH
6670: LD_INT 4
6672: ARRAY
6673: PPUSH
6674: CALL_OW 205
6678: GO 6606
6680: POP
6681: POP
// end ;
6682: LD_VAR 0 1
6686: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6687: LD_INT 0
6689: PPUSH
6690: PPUSH
// for i in charactersList do
6691: LD_ADDR_VAR 0 4
6695: PUSH
6696: LD_VAR 0 1
6700: PUSH
6701: FOR_IN
6702: IFFALSE 6731
// begin if IsOk ( i ) then
6704: LD_VAR 0 4
6708: PPUSH
6709: CALL_OW 302
6713: IFFALSE 6729
// SaveCharacters ( i , ident ) ;
6715: LD_VAR 0 4
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 38
// end ;
6729: GO 6701
6731: POP
6732: POP
// end ;
6733: LD_VAR 0 3
6737: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6738: LD_INT 0
6740: PPUSH
6741: PPUSH
6742: PPUSH
6743: PPUSH
// for i = 1 to 72 do
6744: LD_ADDR_VAR 0 5
6748: PUSH
6749: DOUBLE
6750: LD_INT 1
6752: DEC
6753: ST_TO_ADDR
6754: LD_INT 72
6756: PUSH
6757: FOR_TO
6758: IFFALSE 6816
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6760: LD_VAR 0 5
6764: PPUSH
6765: LD_VAR 0 1
6769: PPUSH
6770: CALL_OW 321
6774: PUSH
6775: LD_INT 1
6777: EQUAL
6778: PUSH
6779: LD_VAR 0 5
6783: PPUSH
6784: LD_VAR 0 3
6788: PPUSH
6789: CALL_OW 482
6793: PUSH
6794: LD_INT 1
6796: EQUAL
6797: AND
6798: IFFALSE 6814
// AddComResearch ( lab , i ) ;
6800: LD_VAR 0 2
6804: PPUSH
6805: LD_VAR 0 5
6809: PPUSH
6810: CALL_OW 184
6814: GO 6757
6816: POP
6817: POP
// end ;
6818: LD_VAR 0 4
6822: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6823: LD_INT 0
6825: PPUSH
6826: PPUSH
6827: PPUSH
6828: PPUSH
6829: PPUSH
6830: PPUSH
6831: PPUSH
6832: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: LD_INT 22
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 25
6852: PUSH
6853: LD_INT 1
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 56
6862: PUSH
6863: EMPTY
6864: LIST
6865: PUSH
6866: LD_INT 24
6868: PUSH
6869: LD_INT 700
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 3
6878: PUSH
6879: LD_INT 60
6881: PUSH
6882: EMPTY
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PPUSH
6896: CALL_OW 69
6900: PUSH
6901: LD_EXP 23
6905: PUSH
6906: EMPTY
6907: LIST
6908: DIFF
6909: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
6910: LD_ADDR_VAR 0 7
6914: PUSH
6915: LD_INT 22
6917: PUSH
6918: LD_VAR 0 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 54
6939: PUSH
6940: EMPTY
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: PPUSH
6948: CALL_OW 69
6952: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6953: LD_ADDR_VAR 0 8
6957: PUSH
6958: LD_INT 22
6960: PUSH
6961: LD_VAR 0 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 32
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 58
6982: PUSH
6983: EMPTY
6984: LIST
6985: PUSH
6986: LD_INT 24
6988: PUSH
6989: LD_INT 251
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7007: LD_ADDR_VAR 0 10
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 2
7026: PUSH
7027: LD_INT 30
7029: PUSH
7030: LD_INT 4
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 30
7039: PUSH
7040: LD_INT 5
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 24
7054: PUSH
7055: LD_INT 251
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 69
7071: ST_TO_ADDR
// if barrackList > 0 then
7072: LD_VAR 0 10
7076: PUSH
7077: LD_INT 0
7079: GREATER
7080: IFFALSE 7193
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7082: LD_VAR 0 8
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_INT 24
7093: PPUSH
7094: LD_INT 22
7096: PUSH
7097: LD_INT 1
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 21
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 70
7122: PUSH
7123: LD_INT 0
7125: EQUAL
7126: AND
7127: IFFALSE 7176
// begin for i in soldiers_list do
7129: LD_ADDR_VAR 0 4
7133: PUSH
7134: LD_VAR 0 6
7138: PUSH
7139: FOR_IN
7140: IFFALSE 7172
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7142: LD_VAR 0 4
7146: PPUSH
7147: LD_VAR 0 10
7151: PUSH
7152: LD_INT 1
7154: PPUSH
7155: LD_VAR 0 10
7159: PPUSH
7160: CALL_OW 12
7164: ARRAY
7165: PPUSH
7166: CALL_OW 120
7170: GO 7139
7172: POP
7173: POP
// end else
7174: GO 7193
// begin for i in barrackList do
7176: LD_ADDR_VAR 0 4
7180: PUSH
7181: LD_VAR 0 10
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7191
// begin end ;
7189: GO 7186
7191: POP
7192: POP
// end ; end ; end ;
7193: LD_VAR 0 3
7197: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7198: LD_INT 0
7200: PPUSH
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
7205: PPUSH
// for i = 1 to infantryCount do
7206: LD_ADDR_VAR 0 8
7210: PUSH
7211: DOUBLE
7212: LD_INT 1
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 5
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7338
// begin uc_side = side ;
7224: LD_ADDR_OWVAR 20
7228: PUSH
7229: LD_VAR 0 1
7233: ST_TO_ADDR
// uc_nation = nation ;
7234: LD_ADDR_OWVAR 21
7238: PUSH
7239: LD_VAR 0 3
7243: ST_TO_ADDR
// hc_class = 1 ;
7244: LD_ADDR_OWVAR 28
7248: PUSH
7249: LD_INT 1
7251: ST_TO_ADDR
// hc_name =  ;
7252: LD_ADDR_OWVAR 26
7256: PUSH
7257: LD_STRING 
7259: ST_TO_ADDR
// hc_gallery =  ;
7260: LD_ADDR_OWVAR 33
7264: PUSH
7265: LD_STRING 
7267: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: LD_EXP 24
7278: PPUSH
7279: LD_EXP 25
7283: PPUSH
7284: CALL_OW 12
7288: PPUSH
7289: CALL_OW 380
// un = CreateHuman ;
7293: LD_ADDR_VAR 0 10
7297: PUSH
7298: CALL_OW 44
7302: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7303: LD_VAR 0 10
7307: PPUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: LD_INT 0
7315: PPUSH
7316: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7320: LD_ADDR_EXP 31
7324: PUSH
7325: LD_EXP 31
7329: PUSH
7330: LD_VAR 0 10
7334: ADD
7335: ST_TO_ADDR
// end ;
7336: GO 7221
7338: POP
7339: POP
// for i = 1 to vehCount do
7340: LD_ADDR_VAR 0 8
7344: PUSH
7345: DOUBLE
7346: LD_INT 1
7348: DEC
7349: ST_TO_ADDR
7350: LD_VAR 0 6
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7563
// begin uc_side = side ;
7358: LD_ADDR_OWVAR 20
7362: PUSH
7363: LD_VAR 0 1
7367: ST_TO_ADDR
// uc_nation = nation ;
7368: LD_ADDR_OWVAR 21
7372: PUSH
7373: LD_VAR 0 3
7377: ST_TO_ADDR
// vc_Chassis = 22 ;
7378: LD_ADDR_OWVAR 37
7382: PUSH
7383: LD_INT 22
7385: ST_TO_ADDR
// vc_engine = 1 ;
7386: LD_ADDR_OWVAR 39
7390: PUSH
7391: LD_INT 1
7393: ST_TO_ADDR
// vc_control = 1 ;
7394: LD_ADDR_OWVAR 38
7398: PUSH
7399: LD_INT 1
7401: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7402: LD_ADDR_OWVAR 40
7406: PUSH
7407: LD_INT 43
7409: PUSH
7410: LD_INT 44
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 1
7419: PPUSH
7420: LD_INT 2
7422: PPUSH
7423: CALL_OW 12
7427: ARRAY
7428: ST_TO_ADDR
// veh = CreateVehicle ;
7429: LD_ADDR_VAR 0 12
7433: PUSH
7434: CALL_OW 45
7438: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7439: LD_VAR 0 12
7443: PPUSH
7444: LD_VAR 0 2
7448: PPUSH
7449: LD_INT 0
7451: PPUSH
7452: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
7456: LD_ADDR_EXP 31
7460: PUSH
7461: LD_EXP 31
7465: PUSH
7466: LD_VAR 0 12
7470: ADD
7471: ST_TO_ADDR
// hc_class = 3 ;
7472: LD_ADDR_OWVAR 28
7476: PUSH
7477: LD_INT 3
7479: ST_TO_ADDR
// hc_name =  ;
7480: LD_ADDR_OWVAR 26
7484: PUSH
7485: LD_STRING 
7487: ST_TO_ADDR
// hc_gallery =  ;
7488: LD_ADDR_OWVAR 33
7492: PUSH
7493: LD_STRING 
7495: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7496: LD_INT 0
7498: PPUSH
7499: LD_INT 3
7501: PPUSH
7502: LD_EXP 24
7506: PPUSH
7507: LD_EXP 25
7511: PPUSH
7512: CALL_OW 12
7516: PPUSH
7517: CALL_OW 380
// un = CreateHuman ;
7521: LD_ADDR_VAR 0 10
7525: PUSH
7526: CALL_OW 44
7530: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7531: LD_VAR 0 10
7535: PPUSH
7536: LD_VAR 0 12
7540: PPUSH
7541: CALL_OW 52
// defenders_list = defenders_list ^ un ;
7545: LD_ADDR_EXP 31
7549: PUSH
7550: LD_EXP 31
7554: PUSH
7555: LD_VAR 0 10
7559: ADD
7560: ST_TO_ADDR
// end ;
7561: GO 7355
7563: POP
7564: POP
// end ;
7565: LD_VAR 0 7
7569: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7570: LD_INT 0
7572: PPUSH
7573: PPUSH
7574: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7575: LD_VAR 0 2
7579: PPUSH
7580: LD_INT 22
7582: PUSH
7583: LD_VAR 0 1
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: PPUSH
7595: CALL_OW 70
7599: PUSH
7600: LD_INT 0
7602: EQUAL
7603: PUSH
7604: LD_EXP 31
7608: PUSH
7609: LD_INT 0
7611: GREATER
7612: AND
7613: IFFALSE 7659
// begin for i in defenders_list do
7615: LD_ADDR_VAR 0 4
7619: PUSH
7620: LD_EXP 31
7624: PUSH
7625: FOR_IN
7626: IFFALSE 7657
// begin ComMoveXY ( i , 65 , 68 ) ;
7628: LD_VAR 0 4
7632: PPUSH
7633: LD_INT 65
7635: PPUSH
7636: LD_INT 68
7638: PPUSH
7639: CALL_OW 111
// SetFuel ( i , 100 ) ;
7643: LD_VAR 0 4
7647: PPUSH
7648: LD_INT 100
7650: PPUSH
7651: CALL_OW 240
// end ;
7655: GO 7625
7657: POP
7658: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7659: LD_VAR 0 2
7663: PPUSH
7664: LD_INT 22
7666: PUSH
7667: LD_VAR 0 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: PPUSH
7679: CALL_OW 70
7683: PUSH
7684: LD_INT 0
7686: GREATER
7687: PUSH
7688: LD_EXP 31
7692: PUSH
7693: LD_INT 0
7695: GREATER
7696: AND
7697: IFFALSE 7865
// begin for i in defenders_list do
7699: LD_ADDR_VAR 0 4
7703: PUSH
7704: LD_EXP 31
7708: PUSH
7709: FOR_IN
7710: IFFALSE 7760
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7712: LD_ADDR_VAR 0 5
7716: PUSH
7717: LD_INT 22
7719: PUSH
7720: LD_VAR 0 1
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 69
7733: PPUSH
7734: LD_VAR 0 4
7738: PPUSH
7739: CALL_OW 74
7743: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7744: LD_VAR 0 4
7748: PPUSH
7749: LD_VAR 0 5
7753: PPUSH
7754: CALL_OW 115
// end ;
7758: GO 7709
7760: POP
7761: POP
// if russianAI = 0 then
7762: LD_EXP 26
7766: PUSH
7767: LD_INT 0
7769: EQUAL
7770: IFFALSE 7865
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7772: LD_ADDR_VAR 0 4
7776: PUSH
7777: LD_INT 22
7779: PUSH
7780: LD_INT 3
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 25
7789: PUSH
7790: LD_INT 1
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: PUSH
7806: LD_EXP 23
7810: DIFF
7811: PUSH
7812: FOR_IN
7813: IFFALSE 7863
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7815: LD_ADDR_VAR 0 5
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_VAR 0 1
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 69
7836: PPUSH
7837: LD_VAR 0 4
7841: PPUSH
7842: CALL_OW 74
7846: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7847: LD_VAR 0 4
7851: PPUSH
7852: LD_VAR 0 5
7856: PPUSH
7857: CALL_OW 115
// end ;
7861: GO 7812
7863: POP
7864: POP
// end ; end ; end ;
7865: LD_VAR 0 3
7869: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7870: LD_INT 0
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7877: LD_ADDR_VAR 0 6
7881: PUSH
7882: LD_INT 22
7884: PUSH
7885: LD_VAR 0 1
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 25
7899: PUSH
7900: LD_INT 2
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 25
7909: PUSH
7910: LD_INT 16
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 24
7924: PUSH
7925: LD_INT 1000
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7942: LD_ADDR_VAR 0 4
7946: PUSH
7947: LD_INT 22
7949: PUSH
7950: LD_VAR 0 1
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 21
7961: PUSH
7962: LD_INT 3
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 24
7974: PUSH
7975: LD_INT 1000
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: PPUSH
7994: CALL_OW 69
7998: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
7999: LD_VAR 0 4
8003: PUSH
8004: LD_INT 0
8006: GREATER
8007: PUSH
8008: LD_VAR 0 6
8012: PUSH
8013: LD_INT 0
8015: GREATER
8016: AND
8017: IFFALSE 8083
// begin for i in engineerOk_list do
8019: LD_ADDR_VAR 0 5
8023: PUSH
8024: LD_VAR 0 6
8028: PUSH
8029: FOR_IN
8030: IFFALSE 8081
// begin for j in buildings_list do
8032: LD_ADDR_VAR 0 7
8036: PUSH
8037: LD_VAR 0 4
8041: PUSH
8042: FOR_IN
8043: IFFALSE 8077
// begin AddComExitBuilding ( i ) ;
8045: LD_VAR 0 5
8049: PPUSH
8050: CALL_OW 182
// wait ( 0 0$1 ) ;
8054: LD_INT 35
8056: PPUSH
8057: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8061: LD_VAR 0 5
8065: PPUSH
8066: LD_VAR 0 7
8070: PPUSH
8071: CALL_OW 190
// end ;
8075: GO 8042
8077: POP
8078: POP
// end ;
8079: GO 8029
8081: POP
8082: POP
// end ; if buildings_list = 0 then
8083: LD_VAR 0 4
8087: PUSH
8088: LD_INT 0
8090: EQUAL
8091: IFFALSE 8124
// begin for i in engineerOK_list do
8093: LD_ADDR_VAR 0 5
8097: PUSH
8098: LD_VAR 0 6
8102: PUSH
8103: FOR_IN
8104: IFFALSE 8122
// begin ComEnterUnit ( i , building ) ;
8106: LD_VAR 0 5
8110: PPUSH
8111: LD_VAR 0 2
8115: PPUSH
8116: CALL_OW 120
// end ;
8120: GO 8103
8122: POP
8123: POP
// end ; end ;
8124: LD_VAR 0 3
8128: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8133: LD_INT 22
8135: PUSH
8136: LD_VAR 0 1
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 25
8147: PUSH
8148: LD_INT 2
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 69
8163: PUSH
8164: LD_INT 0
8166: GREATER
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 21
8182: PUSH
8183: LD_INT 3
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 24
8195: PUSH
8196: LD_INT 1000
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 69
8216: PUSH
8217: LD_INT 0
8219: EQUAL
8220: AND
8221: PUSH
8222: LD_VAR 0 2
8226: PUSH
8227: LD_INT 0
8229: GREATER
8230: AND
8231: IFFALSE 8330
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8233: LD_ADDR_VAR 0 4
8237: PUSH
8238: LD_INT 22
8240: PUSH
8241: LD_VAR 0 1
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 25
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PPUSH
8264: CALL_OW 69
8268: PUSH
8269: FOR_IN
8270: IFFALSE 8328
// begin AddComExitBuilding ( i ) ;
8272: LD_VAR 0 4
8276: PPUSH
8277: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8281: LD_VAR 0 4
8285: PPUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_INT 1
8293: ARRAY
8294: PPUSH
8295: LD_VAR 0 2
8299: PUSH
8300: LD_INT 2
8302: ARRAY
8303: PPUSH
8304: LD_VAR 0 2
8308: PUSH
8309: LD_INT 3
8311: ARRAY
8312: PPUSH
8313: LD_VAR 0 2
8317: PUSH
8318: LD_INT 4
8320: ARRAY
8321: PPUSH
8322: CALL_OW 205
// end ;
8326: GO 8269
8328: POP
8329: POP
// end ; end ;
8330: LD_VAR 0 3
8334: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8335: LD_INT 0
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
8341: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8342: LD_ADDR_VAR 0 6
8346: PUSH
8347: LD_INT 22
8349: PUSH
8350: LD_VAR 0 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 25
8361: PUSH
8362: LD_INT 4
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8378: LD_ADDR_VAR 0 9
8382: PUSH
8383: LD_VAR 0 3
8387: PPUSH
8388: LD_INT 22
8390: PUSH
8391: LD_VAR 0 1
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 21
8402: PUSH
8403: LD_INT 1
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 3
8412: PUSH
8413: LD_INT 24
8415: PUSH
8416: LD_INT 750
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: PPUSH
8432: CALL_OW 70
8436: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8437: LD_VAR 0 9
8441: PUSH
8442: LD_INT 0
8444: GREATER
8445: PUSH
8446: LD_VAR 0 6
8450: PUSH
8451: LD_INT 0
8453: GREATER
8454: AND
8455: IFFALSE 8582
// begin for i = 1 to damageUnits do
8457: LD_ADDR_VAR 0 7
8461: PUSH
8462: DOUBLE
8463: LD_INT 1
8465: DEC
8466: ST_TO_ADDR
8467: LD_VAR 0 9
8471: PUSH
8472: FOR_TO
8473: IFFALSE 8497
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8475: LD_VAR 0 9
8479: PUSH
8480: LD_VAR 0 7
8484: ARRAY
8485: PPUSH
8486: LD_VAR 0 2
8490: PPUSH
8491: CALL_OW 113
8495: GO 8472
8497: POP
8498: POP
// for i in sci_list do
8499: LD_ADDR_VAR 0 7
8503: PUSH
8504: LD_VAR 0 6
8508: PUSH
8509: FOR_IN
8510: IFFALSE 8578
// begin ComExitBuilding ( i ) ;
8512: LD_VAR 0 7
8516: PPUSH
8517: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8521: LD_ADDR_VAR 0 8
8525: PUSH
8526: LD_VAR 0 2
8530: PPUSH
8531: LD_INT 22
8533: PUSH
8534: LD_VAR 0 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 70
8547: PUSH
8548: FOR_IN
8549: IFFALSE 8574
// begin AddComHeal ( i , j ) ;
8551: LD_VAR 0 7
8555: PPUSH
8556: LD_VAR 0 8
8560: PPUSH
8561: CALL_OW 188
// wait ( 1 1$0 ) ;
8565: LD_INT 2100
8567: PPUSH
8568: CALL_OW 67
// end ;
8572: GO 8548
8574: POP
8575: POP
// end ;
8576: GO 8509
8578: POP
8579: POP
// end else
8580: GO 8596
// begin AddComEnterUnit ( sci_list , build ) ;
8582: LD_VAR 0 6
8586: PPUSH
8587: LD_VAR 0 4
8591: PPUSH
8592: CALL_OW 180
// end ; end ;
8596: LD_VAR 0 5
8600: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8601: LD_INT 0
8603: PPUSH
8604: PPUSH
8605: PPUSH
8606: PPUSH
8607: PPUSH
8608: PPUSH
8609: PPUSH
8610: PPUSH
8611: PPUSH
8612: PPUSH
8613: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8614: LD_ADDR_VAR 0 9
8618: PUSH
8619: LD_INT 22
8621: PUSH
8622: LD_VAR 0 1
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 21
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 33
8643: PUSH
8644: LD_INT 1
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 24
8653: PUSH
8654: LD_INT 660
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 3
8663: PUSH
8664: LD_INT 58
8666: PUSH
8667: EMPTY
8668: LIST
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: LD_INT 34
8679: PUSH
8680: LD_INT 53
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 69
8703: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8704: LD_ADDR_VAR 0 10
8708: PUSH
8709: LD_INT 22
8711: PUSH
8712: LD_VAR 0 1
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 21
8723: PUSH
8724: LD_INT 2
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 33
8733: PUSH
8734: LD_INT 1
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 3
8743: PUSH
8744: LD_INT 24
8746: PUSH
8747: LD_INT 660
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 69
8768: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8769: LD_ADDR_VAR 0 11
8773: PUSH
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_INT 22
8781: PUSH
8782: LD_VAR 0 1
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 2
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 33
8803: PUSH
8804: LD_INT 1
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: LD_INT 3
8813: PUSH
8814: LD_INT 24
8816: PUSH
8817: LD_INT 1000
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: PPUSH
8834: CALL_OW 70
8838: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8839: LD_ADDR_VAR 0 12
8843: PUSH
8844: LD_VAR 0 2
8848: PPUSH
8849: LD_INT 22
8851: PUSH
8852: LD_VAR 0 1
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 21
8863: PUSH
8864: LD_INT 2
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: LD_INT 33
8873: PUSH
8874: LD_INT 1
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 24
8883: PUSH
8884: LD_INT 1000
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 58
8893: PUSH
8894: EMPTY
8895: LIST
8896: PUSH
8897: LD_INT 3
8899: PUSH
8900: LD_INT 34
8902: PUSH
8903: LD_INT 53
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 70
8926: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8927: LD_ADDR_VAR 0 13
8931: PUSH
8932: EMPTY
8933: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8934: LD_ADDR_VAR 0 14
8938: PUSH
8939: LD_VAR 0 2
8943: PPUSH
8944: LD_INT 22
8946: PUSH
8947: LD_VAR 0 1
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 3
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PPUSH
8970: CALL_OW 70
8974: ST_TO_ADDR
// if damageVehicle_list > 0 then
8975: LD_VAR 0 10
8979: PUSH
8980: LD_INT 0
8982: GREATER
8983: IFFALSE 9021
// begin for i in damageVehicle_list do
8985: LD_ADDR_VAR 0 7
8989: PUSH
8990: LD_VAR 0 10
8994: PUSH
8995: FOR_IN
8996: IFFALSE 9019
// begin ComMoveXY ( i , repX , repY ) ;
8998: LD_VAR 0 7
9002: PPUSH
9003: LD_VAR 0 3
9007: PPUSH
9008: LD_VAR 0 4
9012: PPUSH
9013: CALL_OW 111
// end ;
9017: GO 8995
9019: POP
9020: POP
// end ; if vehicleNeedRepair_list > 0 then
9021: LD_VAR 0 11
9025: PUSH
9026: LD_INT 0
9028: GREATER
9029: IFFALSE 9116
// begin for i in vehicleNeedRepair_list do
9031: LD_ADDR_VAR 0 7
9035: PUSH
9036: LD_VAR 0 11
9040: PUSH
9041: FOR_IN
9042: IFFALSE 9114
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9044: LD_ADDR_VAR 0 13
9048: PUSH
9049: LD_VAR 0 13
9053: PUSH
9054: LD_VAR 0 7
9058: PPUSH
9059: CALL_OW 313
9063: ADD
9064: ST_TO_ADDR
// for j in mechanicInside_list do
9065: LD_ADDR_VAR 0 8
9069: PUSH
9070: LD_VAR 0 13
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9110
// begin ComExitVehicle ( i ) ;
9078: LD_VAR 0 7
9082: PPUSH
9083: CALL_OW 121
// wait ( 0 0$1 ) ;
9087: LD_INT 35
9089: PPUSH
9090: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9094: LD_VAR 0 7
9098: PPUSH
9099: LD_VAR 0 8
9103: PPUSH
9104: CALL_OW 129
// end ;
9108: GO 9075
9110: POP
9111: POP
// end ;
9112: GO 9041
9114: POP
9115: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9116: LD_VAR 0 12
9120: PUSH
9121: LD_INT 0
9123: GREATER
9124: IFFALSE 9164
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9126: LD_VAR 0 14
9130: PUSH
9131: LD_INT 1
9133: ARRAY
9134: PPUSH
9135: LD_VAR 0 12
9139: PUSH
9140: LD_INT 1
9142: ARRAY
9143: PPUSH
9144: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9148: LD_VAR 0 12
9152: PUSH
9153: LD_INT 1
9155: ARRAY
9156: PPUSH
9157: LD_INT 100
9159: PPUSH
9160: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9164: LD_VAR 0 9
9168: PUSH
9169: LD_INT 0
9171: GREATER
9172: IFFALSE 9363
// begin for i in vehicleOK_list do
9174: LD_ADDR_VAR 0 7
9178: PUSH
9179: LD_VAR 0 9
9183: PUSH
9184: FOR_IN
9185: IFFALSE 9361
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9187: LD_ADDR_VAR 0 15
9191: PUSH
9192: LD_INT 22
9194: PUSH
9195: LD_VAR 0 5
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PPUSH
9204: CALL_OW 69
9208: PPUSH
9209: LD_VAR 0 7
9213: PPUSH
9214: CALL_OW 74
9218: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9219: LD_ADDR_VAR 0 16
9223: PUSH
9224: LD_INT 22
9226: PUSH
9227: LD_VAR 0 5
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: LD_INT 59
9241: PUSH
9242: EMPTY
9243: LIST
9244: PUSH
9245: LD_INT 21
9247: PUSH
9248: LD_INT 1
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 21
9257: PUSH
9258: LD_INT 2
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: EMPTY
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: PPUSH
9283: LD_VAR 0 7
9287: PPUSH
9288: CALL_OW 74
9292: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9293: LD_VAR 0 7
9297: PPUSH
9298: LD_VAR 0 15
9302: PPUSH
9303: CALL_OW 296
9307: PUSH
9308: LD_INT 8
9310: PLUS
9311: PUSH
9312: LD_VAR 0 7
9316: PPUSH
9317: LD_VAR 0 16
9321: PPUSH
9322: CALL_OW 296
9326: LESS
9327: IFFALSE 9345
// begin ComAttackUnit ( i , target1 ) ;
9329: LD_VAR 0 7
9333: PPUSH
9334: LD_VAR 0 15
9338: PPUSH
9339: CALL_OW 115
// end else
9343: GO 9359
// begin ComAttackUnit ( i , target2 ) ;
9345: LD_VAR 0 7
9349: PPUSH
9350: LD_VAR 0 16
9354: PPUSH
9355: CALL_OW 115
// end ; end ;
9359: GO 9184
9361: POP
9362: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9363: LD_ADDR_VAR 0 7
9367: PUSH
9368: LD_VAR 0 2
9372: PPUSH
9373: LD_INT 22
9375: PUSH
9376: LD_VAR 0 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 25
9387: PUSH
9388: LD_INT 3
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL_OW 70
9403: NOT
9404: PUSH
9405: FOR_IN
9406: IFFALSE 9429
// ComMoveXY ( i , repX , repY ) ;
9408: LD_VAR 0 7
9412: PPUSH
9413: LD_VAR 0 3
9417: PPUSH
9418: LD_VAR 0 4
9422: PPUSH
9423: CALL_OW 111
9427: GO 9405
9429: POP
9430: POP
// end ;
9431: LD_VAR 0 6
9435: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9436: LD_INT 0
9438: PPUSH
9439: PPUSH
9440: PPUSH
9441: PPUSH
9442: PPUSH
9443: PPUSH
9444: PPUSH
9445: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9446: LD_INT 22
9448: PUSH
9449: LD_VAR 0 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PUSH
9477: LD_VAR 0 3
9481: LESSEQUAL
9482: IFFALSE 9549
// for i = 1 to vehCount do
9484: LD_ADDR_VAR 0 10
9488: PUSH
9489: DOUBLE
9490: LD_INT 1
9492: DEC
9493: ST_TO_ADDR
9494: LD_VAR 0 3
9498: PUSH
9499: FOR_TO
9500: IFFALSE 9547
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9502: LD_VAR 0 2
9506: PPUSH
9507: LD_VAR 0 8
9511: PPUSH
9512: LD_VAR 0 6
9516: PPUSH
9517: LD_VAR 0 7
9521: PPUSH
9522: LD_VAR 0 5
9526: PUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 5
9534: PPUSH
9535: CALL_OW 12
9539: ARRAY
9540: PPUSH
9541: CALL_OW 185
9545: GO 9499
9547: POP
9548: POP
// repeat wait ( 0 0$1 ) ;
9549: LD_INT 35
9551: PPUSH
9552: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9556: LD_INT 22
9558: PUSH
9559: LD_VAR 0 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 21
9570: PUSH
9571: LD_INT 2
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 24
9580: PUSH
9581: LD_INT 250
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: PUSH
9598: LD_VAR 0 3
9602: GREATEREQUAL
9603: IFFALSE 9549
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9605: LD_INT 22
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 21
9619: PUSH
9620: LD_INT 2
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 24
9629: PUSH
9630: LD_INT 250
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: PPUSH
9642: CALL_OW 69
9646: PUSH
9647: LD_VAR 0 3
9651: GREATEREQUAL
9652: IFFALSE 9995
// begin repeat begin wait ( 0 0$1 ) ;
9654: LD_INT 35
9656: PPUSH
9657: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: LD_INT 651
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 69
9702: PUSH
9703: LD_INT 0
9705: GREATER
9706: IFFALSE 9934
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9708: LD_ADDR_VAR 0 10
9712: PUSH
9713: LD_INT 22
9715: PUSH
9716: LD_VAR 0 1
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 21
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 24
9737: PUSH
9738: LD_INT 651
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: PUSH
9755: FOR_IN
9756: IFFALSE 9932
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9758: LD_ADDR_VAR 0 15
9762: PUSH
9763: LD_INT 22
9765: PUSH
9766: LD_VAR 0 4
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: PPUSH
9780: LD_VAR 0 10
9784: PPUSH
9785: CALL_OW 74
9789: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9790: LD_ADDR_VAR 0 16
9794: PUSH
9795: LD_INT 22
9797: PUSH
9798: LD_VAR 0 4
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: LD_INT 59
9812: PUSH
9813: EMPTY
9814: LIST
9815: PUSH
9816: LD_INT 21
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 21
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: PPUSH
9849: CALL_OW 69
9853: PPUSH
9854: LD_VAR 0 10
9858: PPUSH
9859: CALL_OW 74
9863: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9864: LD_VAR 0 10
9868: PPUSH
9869: LD_VAR 0 15
9873: PPUSH
9874: CALL_OW 296
9878: PUSH
9879: LD_INT 8
9881: PLUS
9882: PUSH
9883: LD_VAR 0 10
9887: PPUSH
9888: LD_VAR 0 16
9892: PPUSH
9893: CALL_OW 296
9897: LESS
9898: IFFALSE 9916
// begin ComAttackUnit ( i , target1 ) ;
9900: LD_VAR 0 10
9904: PPUSH
9905: LD_VAR 0 15
9909: PPUSH
9910: CALL_OW 115
// end else
9914: GO 9930
// begin ComAttackUnit ( i , target2 ) ;
9916: LD_VAR 0 10
9920: PPUSH
9921: LD_VAR 0 16
9925: PPUSH
9926: CALL_OW 115
// end ; end ;
9930: GO 9755
9932: POP
9933: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
9934: LD_INT 22
9936: PUSH
9937: LD_VAR 0 1
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 21
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PPUSH
9960: CALL_OW 69
9964: PUSH
9965: LD_INT 0
9967: EQUAL
9968: PUSH
9969: LD_INT 22
9971: PUSH
9972: LD_VAR 0 4
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: PPUSH
9984: CALL_OW 69
9988: PUSH
9989: LD_INT 0
9991: EQUAL
9992: OR
9993: IFFALSE 9654
// end ; end ;
9995: LD_VAR 0 9
9999: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10000: LD_INT 0
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
10006: PPUSH
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
10012: PPUSH
// for i = 1 to medicCount do
10013: LD_ADDR_VAR 0 14
10017: PUSH
10018: DOUBLE
10019: LD_INT 1
10021: DEC
10022: ST_TO_ADDR
10023: LD_VAR 0 7
10027: PUSH
10028: FOR_TO
10029: IFFALSE 10111
// begin uc_side = side ;
10031: LD_ADDR_OWVAR 20
10035: PUSH
10036: LD_VAR 0 1
10040: ST_TO_ADDR
// uc_nation = nation ;
10041: LD_ADDR_OWVAR 21
10045: PUSH
10046: LD_VAR 0 2
10050: ST_TO_ADDR
// hc_name =  ;
10051: LD_ADDR_OWVAR 26
10055: PUSH
10056: LD_STRING 
10058: ST_TO_ADDR
// hc_gallery =  ;
10059: LD_ADDR_OWVAR 33
10063: PUSH
10064: LD_STRING 
10066: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10067: LD_INT 0
10069: PPUSH
10070: LD_INT 4
10072: PPUSH
10073: LD_VAR 0 8
10077: PPUSH
10078: CALL_OW 380
// un = CreateHuman ;
10082: LD_ADDR_VAR 0 16
10086: PUSH
10087: CALL_OW 44
10091: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10092: LD_VAR 0 16
10096: PPUSH
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 0
10104: PPUSH
10105: CALL_OW 49
// end ;
10109: GO 10028
10111: POP
10112: POP
// for i = 1 to soldierCount do
10113: LD_ADDR_VAR 0 14
10117: PUSH
10118: DOUBLE
10119: LD_INT 1
10121: DEC
10122: ST_TO_ADDR
10123: LD_VAR 0 3
10127: PUSH
10128: FOR_TO
10129: IFFALSE 10211
// begin uc_side = side ;
10131: LD_ADDR_OWVAR 20
10135: PUSH
10136: LD_VAR 0 1
10140: ST_TO_ADDR
// uc_nation = nation ;
10141: LD_ADDR_OWVAR 21
10145: PUSH
10146: LD_VAR 0 2
10150: ST_TO_ADDR
// hc_name =  ;
10151: LD_ADDR_OWVAR 26
10155: PUSH
10156: LD_STRING 
10158: ST_TO_ADDR
// hc_gallery =  ;
10159: LD_ADDR_OWVAR 33
10163: PUSH
10164: LD_STRING 
10166: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10167: LD_INT 0
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: LD_VAR 0 8
10177: PPUSH
10178: CALL_OW 380
// un = CreateHuman ;
10182: LD_ADDR_VAR 0 16
10186: PUSH
10187: CALL_OW 44
10191: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10192: LD_VAR 0 16
10196: PPUSH
10197: LD_VAR 0 9
10201: PPUSH
10202: LD_INT 0
10204: PPUSH
10205: CALL_OW 49
// end ;
10209: GO 10128
10211: POP
10212: POP
// for i = 1 to sniperCount do
10213: LD_ADDR_VAR 0 14
10217: PUSH
10218: DOUBLE
10219: LD_INT 1
10221: DEC
10222: ST_TO_ADDR
10223: LD_VAR 0 4
10227: PUSH
10228: FOR_TO
10229: IFFALSE 10311
// begin uc_side = side ;
10231: LD_ADDR_OWVAR 20
10235: PUSH
10236: LD_VAR 0 1
10240: ST_TO_ADDR
// uc_nation = nation ;
10241: LD_ADDR_OWVAR 21
10245: PUSH
10246: LD_VAR 0 2
10250: ST_TO_ADDR
// hc_name =  ;
10251: LD_ADDR_OWVAR 26
10255: PUSH
10256: LD_STRING 
10258: ST_TO_ADDR
// hc_gallery =  ;
10259: LD_ADDR_OWVAR 33
10263: PUSH
10264: LD_STRING 
10266: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10267: LD_INT 0
10269: PPUSH
10270: LD_INT 5
10272: PPUSH
10273: LD_VAR 0 8
10277: PPUSH
10278: CALL_OW 380
// un = CreateHuman ;
10282: LD_ADDR_VAR 0 16
10286: PUSH
10287: CALL_OW 44
10291: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10292: LD_VAR 0 16
10296: PPUSH
10297: LD_VAR 0 9
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 49
// end ;
10309: GO 10228
10311: POP
10312: POP
// for i = 1 to bazookCount do
10313: LD_ADDR_VAR 0 14
10317: PUSH
10318: DOUBLE
10319: LD_INT 1
10321: DEC
10322: ST_TO_ADDR
10323: LD_VAR 0 5
10327: PUSH
10328: FOR_TO
10329: IFFALSE 10411
// begin uc_side = side ;
10331: LD_ADDR_OWVAR 20
10335: PUSH
10336: LD_VAR 0 1
10340: ST_TO_ADDR
// uc_nation = nation ;
10341: LD_ADDR_OWVAR 21
10345: PUSH
10346: LD_VAR 0 2
10350: ST_TO_ADDR
// hc_name =  ;
10351: LD_ADDR_OWVAR 26
10355: PUSH
10356: LD_STRING 
10358: ST_TO_ADDR
// hc_gallery =  ;
10359: LD_ADDR_OWVAR 33
10363: PUSH
10364: LD_STRING 
10366: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10367: LD_INT 0
10369: PPUSH
10370: LD_INT 9
10372: PPUSH
10373: LD_VAR 0 8
10377: PPUSH
10378: CALL_OW 380
// un = CreateHuman ;
10382: LD_ADDR_VAR 0 16
10386: PUSH
10387: CALL_OW 44
10391: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10392: LD_VAR 0 16
10396: PPUSH
10397: LD_VAR 0 9
10401: PPUSH
10402: LD_INT 0
10404: PPUSH
10405: CALL_OW 49
// end ;
10409: GO 10328
10411: POP
10412: POP
// for i = 1 to mortalCount do
10413: LD_ADDR_VAR 0 14
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_VAR 0 6
10427: PUSH
10428: FOR_TO
10429: IFFALSE 10511
// begin uc_side = side ;
10431: LD_ADDR_OWVAR 20
10435: PUSH
10436: LD_VAR 0 1
10440: ST_TO_ADDR
// uc_nation = nation ;
10441: LD_ADDR_OWVAR 21
10445: PUSH
10446: LD_VAR 0 2
10450: ST_TO_ADDR
// hc_name =  ;
10451: LD_ADDR_OWVAR 26
10455: PUSH
10456: LD_STRING 
10458: ST_TO_ADDR
// hc_gallery =  ;
10459: LD_ADDR_OWVAR 33
10463: PUSH
10464: LD_STRING 
10466: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10467: LD_INT 0
10469: PPUSH
10470: LD_INT 8
10472: PPUSH
10473: LD_VAR 0 8
10477: PPUSH
10478: CALL_OW 380
// un = CreateHuman ;
10482: LD_ADDR_VAR 0 16
10486: PUSH
10487: CALL_OW 44
10491: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10492: LD_VAR 0 16
10496: PPUSH
10497: LD_VAR 0 9
10501: PPUSH
10502: LD_INT 0
10504: PPUSH
10505: CALL_OW 49
// end ;
10509: GO 10428
10511: POP
10512: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10513: LD_ADDR_VAR 0 19
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_VAR 0 1
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 2
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 1
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 5
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 25
10555: PUSH
10556: LD_INT 8
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 9
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 69
10588: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10589: LD_ADDR_VAR 0 18
10593: PUSH
10594: LD_INT 22
10596: PUSH
10597: LD_VAR 0 1
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 25
10608: PUSH
10609: LD_INT 4
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: ST_TO_ADDR
// for i in medic_list do
10625: LD_ADDR_VAR 0 14
10629: PUSH
10630: LD_VAR 0 18
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10654
// ComMoveToArea ( i , healArea ) ;
10638: LD_VAR 0 14
10642: PPUSH
10643: LD_VAR 0 10
10647: PPUSH
10648: CALL_OW 113
10652: GO 10635
10654: POP
10655: POP
// if strategy = 1 then
10656: LD_VAR 0 12
10660: PUSH
10661: LD_INT 1
10663: EQUAL
10664: IFFALSE 11210
// begin repeat wait ( 0 0$3 ) ;
10666: LD_INT 105
10668: PPUSH
10669: CALL_OW 67
// for i in soldiersOK_list do
10673: LD_ADDR_VAR 0 14
10677: PUSH
10678: LD_VAR 0 19
10682: PUSH
10683: FOR_IN
10684: IFFALSE 10748
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10686: LD_VAR 0 14
10690: PPUSH
10691: LD_INT 91
10693: PPUSH
10694: LD_INT 63
10696: PPUSH
10697: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
10701: LD_VAR 0 14
10705: PPUSH
10706: LD_INT 101
10708: PPUSH
10709: LD_INT 53
10711: PPUSH
10712: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
10716: LD_VAR 0 14
10720: PPUSH
10721: LD_INT 75
10723: PPUSH
10724: LD_INT 23
10726: PPUSH
10727: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
10731: LD_VAR 0 14
10735: PPUSH
10736: LD_INT 78
10738: PPUSH
10739: LD_INT 8
10741: PPUSH
10742: CALL_OW 174
// end ;
10746: GO 10683
10748: POP
10749: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10750: LD_INT 12
10752: PPUSH
10753: LD_INT 22
10755: PUSH
10756: LD_VAR 0 1
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 70
10769: PUSH
10770: LD_INT 2
10772: GREATER
10773: IFFALSE 10666
// repeat wait ( 0 0$1 ) ;
10775: LD_INT 35
10777: PPUSH
10778: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10782: LD_ADDR_VAR 0 17
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_VAR 0 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: LD_INT 3
10804: PUSH
10805: LD_INT 24
10807: PUSH
10808: LD_INT 550
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: LD_INT 250
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PPUSH
10838: CALL_OW 69
10842: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10843: LD_ADDR_VAR 0 19
10847: PUSH
10848: LD_INT 22
10850: PUSH
10851: LD_VAR 0 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 2
10862: PUSH
10863: LD_INT 25
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 25
10875: PUSH
10876: LD_INT 5
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 25
10885: PUSH
10886: LD_INT 8
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 25
10895: PUSH
10896: LD_INT 9
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 24
10912: PUSH
10913: LD_INT 1000
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 69
10929: ST_TO_ADDR
// if medicCount > 0 then
10930: LD_VAR 0 7
10934: PUSH
10935: LD_INT 0
10937: GREATER
10938: IFFALSE 11012
// begin if damageUnit_list > 0 then
10940: LD_VAR 0 17
10944: PUSH
10945: LD_INT 0
10947: GREATER
10948: IFFALSE 11012
// begin for i in damageUnit_list do
10950: LD_ADDR_VAR 0 14
10954: PUSH
10955: LD_VAR 0 17
10959: PUSH
10960: FOR_IN
10961: IFFALSE 11010
// begin ComMoveToArea ( i , healArea ) ;
10963: LD_VAR 0 14
10967: PPUSH
10968: LD_VAR 0 10
10972: PPUSH
10973: CALL_OW 113
// for j in medic_list do
10977: LD_ADDR_VAR 0 15
10981: PUSH
10982: LD_VAR 0 18
10986: PUSH
10987: FOR_IN
10988: IFFALSE 11006
// AddComHeal ( j , i ) ;
10990: LD_VAR 0 15
10994: PPUSH
10995: LD_VAR 0 14
10999: PPUSH
11000: CALL_OW 188
11004: GO 10987
11006: POP
11007: POP
// end ;
11008: GO 10960
11010: POP
11011: POP
// end ; end ; for i in soldiersOK_list do
11012: LD_ADDR_VAR 0 14
11016: PUSH
11017: LD_VAR 0 19
11021: PUSH
11022: FOR_IN
11023: IFFALSE 11199
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11025: LD_ADDR_VAR 0 22
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_VAR 0 11
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 69
11046: PPUSH
11047: LD_VAR 0 14
11051: PPUSH
11052: CALL_OW 74
11056: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11057: LD_ADDR_VAR 0 23
11061: PUSH
11062: LD_INT 22
11064: PUSH
11065: LD_VAR 0 11
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 2
11076: PUSH
11077: LD_INT 59
11079: PUSH
11080: EMPTY
11081: LIST
11082: PUSH
11083: LD_INT 21
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 21
11095: PUSH
11096: LD_INT 2
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: EMPTY
11114: LIST
11115: PPUSH
11116: CALL_OW 69
11120: PPUSH
11121: LD_VAR 0 14
11125: PPUSH
11126: CALL_OW 74
11130: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11131: LD_VAR 0 14
11135: PPUSH
11136: LD_VAR 0 22
11140: PPUSH
11141: CALL_OW 296
11145: PUSH
11146: LD_INT 8
11148: PLUS
11149: PUSH
11150: LD_VAR 0 14
11154: PPUSH
11155: LD_VAR 0 23
11159: PPUSH
11160: CALL_OW 296
11164: LESS
11165: IFFALSE 11183
// begin ComAttackUnit ( i , target1 ) ;
11167: LD_VAR 0 14
11171: PPUSH
11172: LD_VAR 0 22
11176: PPUSH
11177: CALL_OW 115
// end else
11181: GO 11197
// begin ComAttackUnit ( i , target2 ) ;
11183: LD_VAR 0 14
11187: PPUSH
11188: LD_VAR 0 23
11192: PPUSH
11193: CALL_OW 115
// end ; end ;
11197: GO 11022
11199: POP
11200: POP
// until soldiersOK_list = [ ] ;
11201: LD_VAR 0 19
11205: PUSH
11206: EMPTY
11207: EQUAL
11208: IFFALSE 10775
// end ; if strategy = 2 then
11210: LD_VAR 0 12
11214: PUSH
11215: LD_INT 2
11217: EQUAL
11218: IFFALSE 11734
// begin repeat wait ( 0 0$1 ) ;
11220: LD_INT 35
11222: PPUSH
11223: CALL_OW 67
// for i in soldiersOK_list do
11227: LD_ADDR_VAR 0 14
11231: PUSH
11232: LD_VAR 0 19
11236: PUSH
11237: FOR_IN
11238: IFFALSE 11272
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11240: LD_VAR 0 14
11244: PPUSH
11245: LD_INT 91
11247: PPUSH
11248: LD_INT 63
11250: PPUSH
11251: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11255: LD_VAR 0 14
11259: PPUSH
11260: LD_INT 75
11262: PPUSH
11263: LD_INT 33
11265: PPUSH
11266: CALL_OW 174
// end ;
11270: GO 11237
11272: POP
11273: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11274: LD_INT 13
11276: PPUSH
11277: LD_INT 22
11279: PUSH
11280: LD_VAR 0 1
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PPUSH
11289: CALL_OW 70
11293: PUSH
11294: LD_INT 2
11296: GREATER
11297: IFFALSE 11220
// repeat wait ( 0 0$3 ) ;
11299: LD_INT 105
11301: PPUSH
11302: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11306: LD_ADDR_VAR 0 17
11310: PUSH
11311: LD_INT 22
11313: PUSH
11314: LD_VAR 0 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 24
11331: PUSH
11332: LD_INT 550
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 24
11345: PUSH
11346: LD_INT 250
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PPUSH
11362: CALL_OW 69
11366: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11367: LD_ADDR_VAR 0 19
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_VAR 0 1
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 25
11389: PUSH
11390: LD_INT 1
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 25
11399: PUSH
11400: LD_INT 5
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 25
11409: PUSH
11410: LD_INT 8
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 25
11419: PUSH
11420: LD_INT 9
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 24
11436: PUSH
11437: LD_INT 1000
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: PPUSH
11449: CALL_OW 69
11453: ST_TO_ADDR
// if medicCount > 0 then
11454: LD_VAR 0 7
11458: PUSH
11459: LD_INT 0
11461: GREATER
11462: IFFALSE 11536
// begin if damageUnit_list > 0 then
11464: LD_VAR 0 17
11468: PUSH
11469: LD_INT 0
11471: GREATER
11472: IFFALSE 11536
// begin for i in damageUnit_list do
11474: LD_ADDR_VAR 0 14
11478: PUSH
11479: LD_VAR 0 17
11483: PUSH
11484: FOR_IN
11485: IFFALSE 11534
// begin ComMoveToArea ( i , healArea ) ;
11487: LD_VAR 0 14
11491: PPUSH
11492: LD_VAR 0 10
11496: PPUSH
11497: CALL_OW 113
// for j in medic_list do
11501: LD_ADDR_VAR 0 15
11505: PUSH
11506: LD_VAR 0 18
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11530
// AddComHeal ( j , i ) ;
11514: LD_VAR 0 15
11518: PPUSH
11519: LD_VAR 0 14
11523: PPUSH
11524: CALL_OW 188
11528: GO 11511
11530: POP
11531: POP
// end ;
11532: GO 11484
11534: POP
11535: POP
// end ; end ; for i in soldiersOK_list do
11536: LD_ADDR_VAR 0 14
11540: PUSH
11541: LD_VAR 0 19
11545: PUSH
11546: FOR_IN
11547: IFFALSE 11723
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11549: LD_ADDR_VAR 0 22
11553: PUSH
11554: LD_INT 22
11556: PUSH
11557: LD_VAR 0 11
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: PPUSH
11571: LD_VAR 0 14
11575: PPUSH
11576: CALL_OW 74
11580: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11581: LD_ADDR_VAR 0 23
11585: PUSH
11586: LD_INT 22
11588: PUSH
11589: LD_VAR 0 11
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 59
11603: PUSH
11604: EMPTY
11605: LIST
11606: PUSH
11607: LD_INT 21
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 21
11619: PUSH
11620: LD_INT 2
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: PPUSH
11640: CALL_OW 69
11644: PPUSH
11645: LD_VAR 0 14
11649: PPUSH
11650: CALL_OW 74
11654: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11655: LD_VAR 0 14
11659: PPUSH
11660: LD_VAR 0 22
11664: PPUSH
11665: CALL_OW 296
11669: PUSH
11670: LD_INT 8
11672: PLUS
11673: PUSH
11674: LD_VAR 0 14
11678: PPUSH
11679: LD_VAR 0 23
11683: PPUSH
11684: CALL_OW 296
11688: LESS
11689: IFFALSE 11707
// begin ComAttackUnit ( i , target1 ) ;
11691: LD_VAR 0 14
11695: PPUSH
11696: LD_VAR 0 22
11700: PPUSH
11701: CALL_OW 115
// end else
11705: GO 11721
// begin ComAttackUnit ( i , target2 ) ;
11707: LD_VAR 0 14
11711: PPUSH
11712: LD_VAR 0 23
11716: PPUSH
11717: CALL_OW 115
// end ; end ;
11721: GO 11546
11723: POP
11724: POP
// until soldiersOK_list = [ ] ;
11725: LD_VAR 0 19
11729: PUSH
11730: EMPTY
11731: EQUAL
11732: IFFALSE 11299
// end ; if strategy = 3 then
11734: LD_VAR 0 12
11738: PUSH
11739: LD_INT 3
11741: EQUAL
11742: IFFALSE 12288
// begin repeat wait ( 0 0$3 ) ;
11744: LD_INT 105
11746: PPUSH
11747: CALL_OW 67
// for i in soldiersOK_list do
11751: LD_ADDR_VAR 0 14
11755: PUSH
11756: LD_VAR 0 19
11760: PUSH
11761: FOR_IN
11762: IFFALSE 11826
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11764: LD_VAR 0 14
11768: PPUSH
11769: LD_INT 63
11771: PPUSH
11772: LD_INT 71
11774: PPUSH
11775: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
11779: LD_VAR 0 14
11783: PPUSH
11784: LD_INT 35
11786: PPUSH
11787: LD_INT 44
11789: PPUSH
11790: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
11794: LD_VAR 0 14
11798: PPUSH
11799: LD_INT 23
11801: PPUSH
11802: LD_INT 18
11804: PPUSH
11805: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
11809: LD_VAR 0 14
11813: PPUSH
11814: LD_INT 26
11816: PPUSH
11817: LD_INT 12
11819: PPUSH
11820: CALL_OW 174
// end ;
11824: GO 11761
11826: POP
11827: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11828: LD_INT 14
11830: PPUSH
11831: LD_INT 22
11833: PUSH
11834: LD_VAR 0 1
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PPUSH
11843: CALL_OW 70
11847: PUSH
11848: LD_INT 2
11850: GREATER
11851: IFFALSE 11744
// repeat wait ( 0 0$1 ) ;
11853: LD_INT 35
11855: PPUSH
11856: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11860: LD_ADDR_VAR 0 17
11864: PUSH
11865: LD_INT 22
11867: PUSH
11868: LD_VAR 0 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 1
11879: PUSH
11880: LD_INT 3
11882: PUSH
11883: LD_INT 24
11885: PUSH
11886: LD_INT 550
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 24
11899: PUSH
11900: LD_INT 250
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL_OW 69
11920: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11921: LD_ADDR_VAR 0 19
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_VAR 0 1
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 1
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 25
11953: PUSH
11954: LD_INT 5
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 25
11963: PUSH
11964: LD_INT 8
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 25
11973: PUSH
11974: LD_INT 9
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 24
11990: PUSH
11991: LD_INT 1000
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 69
12007: ST_TO_ADDR
// if medicCount > 0 then
12008: LD_VAR 0 7
12012: PUSH
12013: LD_INT 0
12015: GREATER
12016: IFFALSE 12090
// begin if damageUnit_list > 0 then
12018: LD_VAR 0 17
12022: PUSH
12023: LD_INT 0
12025: GREATER
12026: IFFALSE 12090
// begin for i in damageUnit_list do
12028: LD_ADDR_VAR 0 14
12032: PUSH
12033: LD_VAR 0 17
12037: PUSH
12038: FOR_IN
12039: IFFALSE 12088
// begin ComMoveToArea ( i , healArea ) ;
12041: LD_VAR 0 14
12045: PPUSH
12046: LD_VAR 0 10
12050: PPUSH
12051: CALL_OW 113
// for j in medic_list do
12055: LD_ADDR_VAR 0 15
12059: PUSH
12060: LD_VAR 0 18
12064: PUSH
12065: FOR_IN
12066: IFFALSE 12084
// AddComHeal ( j , i ) ;
12068: LD_VAR 0 15
12072: PPUSH
12073: LD_VAR 0 14
12077: PPUSH
12078: CALL_OW 188
12082: GO 12065
12084: POP
12085: POP
// end ;
12086: GO 12038
12088: POP
12089: POP
// end ; end ; for i in soldiersOK_list do
12090: LD_ADDR_VAR 0 14
12094: PUSH
12095: LD_VAR 0 19
12099: PUSH
12100: FOR_IN
12101: IFFALSE 12277
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12103: LD_ADDR_VAR 0 22
12107: PUSH
12108: LD_INT 22
12110: PUSH
12111: LD_VAR 0 11
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 69
12124: PPUSH
12125: LD_VAR 0 14
12129: PPUSH
12130: CALL_OW 74
12134: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12135: LD_ADDR_VAR 0 23
12139: PUSH
12140: LD_INT 22
12142: PUSH
12143: LD_VAR 0 11
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: LD_INT 59
12157: PUSH
12158: EMPTY
12159: LIST
12160: PUSH
12161: LD_INT 21
12163: PUSH
12164: LD_INT 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: PPUSH
12194: CALL_OW 69
12198: PPUSH
12199: LD_VAR 0 14
12203: PPUSH
12204: CALL_OW 74
12208: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12209: LD_VAR 0 14
12213: PPUSH
12214: LD_VAR 0 22
12218: PPUSH
12219: CALL_OW 296
12223: PUSH
12224: LD_INT 8
12226: PLUS
12227: PUSH
12228: LD_VAR 0 14
12232: PPUSH
12233: LD_VAR 0 23
12237: PPUSH
12238: CALL_OW 296
12242: LESS
12243: IFFALSE 12261
// begin ComAttackUnit ( i , target1 ) ;
12245: LD_VAR 0 14
12249: PPUSH
12250: LD_VAR 0 22
12254: PPUSH
12255: CALL_OW 115
// end else
12259: GO 12275
// begin ComAttackUnit ( i , target2 ) ;
12261: LD_VAR 0 14
12265: PPUSH
12266: LD_VAR 0 23
12270: PPUSH
12271: CALL_OW 115
// end ; end ;
12275: GO 12100
12277: POP
12278: POP
// until soldiersOK_list = [ ] ;
12279: LD_VAR 0 19
12283: PUSH
12284: EMPTY
12285: EQUAL
12286: IFFALSE 11853
// end ; end ;
12288: LD_VAR 0 13
12292: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12293: LD_INT 0
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
12300: PPUSH
12301: PPUSH
12302: PPUSH
12303: PPUSH
12304: PPUSH
12305: PPUSH
// amChassisTab = [ ] ;
12306: LD_ADDR_VAR 0 19
12310: PUSH
12311: EMPTY
12312: ST_TO_ADDR
// arChassisTab = [ ] ;
12313: LD_ADDR_VAR 0 18
12317: PUSH
12318: EMPTY
12319: ST_TO_ADDR
// ruChassisTab = [ ] ;
12320: LD_ADDR_VAR 0 17
12324: PUSH
12325: EMPTY
12326: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12327: LD_INT 35
12329: PPUSH
12330: CALL_OW 67
// if nation = 1 then
12334: LD_VAR 0 5
12338: PUSH
12339: LD_INT 1
12341: EQUAL
12342: IFFALSE 12833
// begin uc_side = side ;
12344: LD_ADDR_OWVAR 20
12348: PUSH
12349: LD_VAR 0 2
12353: ST_TO_ADDR
// uc_nation = nation ;
12354: LD_ADDR_OWVAR 21
12358: PUSH
12359: LD_VAR 0 5
12363: ST_TO_ADDR
// vc_engine = vehengine ;
12364: LD_ADDR_OWVAR 39
12368: PUSH
12369: LD_VAR 0 6
12373: ST_TO_ADDR
// vc_control = vehcontrol ;
12374: LD_ADDR_OWVAR 38
12378: PUSH
12379: LD_VAR 0 7
12383: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12384: LD_ADDR_OWVAR 40
12388: PUSH
12389: LD_VAR 0 10
12393: PUSH
12394: LD_INT 1
12396: PPUSH
12397: LD_VAR 0 10
12401: PPUSH
12402: CALL_OW 12
12406: ARRAY
12407: ST_TO_ADDR
// for j = 1 to AMWeapon do
12408: LD_ADDR_VAR 0 14
12412: PUSH
12413: DOUBLE
12414: LD_INT 1
12416: DEC
12417: ST_TO_ADDR
12418: LD_VAR 0 10
12422: PUSH
12423: FOR_TO
12424: IFFALSE 12725
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12426: LD_VAR 0 10
12430: PUSH
12431: LD_VAR 0 14
12435: ARRAY
12436: PUSH
12437: LD_INT 2
12439: EQUAL
12440: PUSH
12441: LD_VAR 0 10
12445: PUSH
12446: LD_VAR 0 14
12450: ARRAY
12451: PUSH
12452: LD_INT 3
12454: EQUAL
12455: OR
12456: IFFALSE 12509
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12458: LD_ADDR_VAR 0 19
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: LD_INT 2
12468: PUSH
12469: LD_INT 3
12471: PUSH
12472: LD_INT 4
12474: PUSH
12475: LD_INT 5
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12485: LD_ADDR_OWVAR 37
12489: PUSH
12490: LD_VAR 0 19
12494: PUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_VAR 0 19
12502: PPUSH
12503: CALL_OW 12
12507: ARRAY
12508: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12509: LD_VAR 0 10
12513: PUSH
12514: LD_VAR 0 14
12518: ARRAY
12519: PUSH
12520: LD_INT 4
12522: EQUAL
12523: PUSH
12524: LD_VAR 0 10
12528: PUSH
12529: LD_VAR 0 14
12533: ARRAY
12534: PUSH
12535: LD_INT 5
12537: EQUAL
12538: OR
12539: PUSH
12540: LD_VAR 0 10
12544: PUSH
12545: LD_VAR 0 14
12549: ARRAY
12550: PUSH
12551: LD_INT 9
12553: EQUAL
12554: OR
12555: PUSH
12556: LD_VAR 0 10
12560: PUSH
12561: LD_VAR 0 14
12565: ARRAY
12566: PUSH
12567: LD_INT 11
12569: EQUAL
12570: OR
12571: PUSH
12572: LD_VAR 0 10
12576: PUSH
12577: LD_VAR 0 14
12581: ARRAY
12582: PUSH
12583: LD_INT 7
12585: EQUAL
12586: OR
12587: IFFALSE 12636
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12589: LD_ADDR_VAR 0 19
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: LD_INT 4
12602: PUSH
12603: LD_INT 5
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12612: LD_ADDR_OWVAR 37
12616: PUSH
12617: LD_VAR 0 19
12621: PUSH
12622: LD_INT 1
12624: PPUSH
12625: LD_VAR 0 19
12629: PPUSH
12630: CALL_OW 12
12634: ARRAY
12635: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12636: LD_VAR 0 10
12640: PUSH
12641: LD_VAR 0 14
12645: ARRAY
12646: PUSH
12647: LD_INT 8
12649: EQUAL
12650: PUSH
12651: LD_VAR 0 10
12655: PUSH
12656: LD_VAR 0 14
12660: ARRAY
12661: PUSH
12662: LD_INT 6
12664: EQUAL
12665: OR
12666: PUSH
12667: LD_VAR 0 10
12671: PUSH
12672: LD_VAR 0 14
12676: ARRAY
12677: PUSH
12678: LD_INT 10
12680: EQUAL
12681: OR
12682: IFFALSE 12723
// begin amChassisTab = [ 4 , 5 ] ;
12684: LD_ADDR_VAR 0 19
12688: PUSH
12689: LD_INT 4
12691: PUSH
12692: LD_INT 5
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12699: LD_ADDR_OWVAR 37
12703: PUSH
12704: LD_VAR 0 19
12708: PUSH
12709: LD_INT 1
12711: PPUSH
12712: LD_VAR 0 19
12716: PPUSH
12717: CALL_OW 12
12721: ARRAY
12722: ST_TO_ADDR
// end ; end ;
12723: GO 12423
12725: POP
12726: POP
// veh = CreateVehicle ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 45
12736: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 1
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// if vehControl = 1 then
12754: LD_VAR 0 7
12758: PUSH
12759: LD_INT 1
12761: EQUAL
12762: IFFALSE 12819
// begin hc_gallery =  ;
12764: LD_ADDR_OWVAR 33
12768: PUSH
12769: LD_STRING 
12771: ST_TO_ADDR
// hc_name =  ;
12772: LD_ADDR_OWVAR 26
12776: PUSH
12777: LD_STRING 
12779: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12780: LD_INT 0
12782: PPUSH
12783: LD_INT 3
12785: PPUSH
12786: LD_VAR 0 4
12790: PPUSH
12791: CALL_OW 380
// un = CreateHuman ;
12795: LD_ADDR_VAR 0 15
12799: PUSH
12800: CALL_OW 44
12804: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12805: LD_VAR 0 15
12809: PPUSH
12810: LD_VAR 0 16
12814: PPUSH
12815: CALL_OW 52
// end ; i = i + 1 ;
12819: LD_ADDR_VAR 0 13
12823: PUSH
12824: LD_VAR 0 13
12828: PUSH
12829: LD_INT 1
12831: PLUS
12832: ST_TO_ADDR
// end ; if nation = 2 then
12833: LD_VAR 0 5
12837: PUSH
12838: LD_INT 2
12840: EQUAL
12841: IFFALSE 13265
// begin uc_side = side ;
12843: LD_ADDR_OWVAR 20
12847: PUSH
12848: LD_VAR 0 2
12852: ST_TO_ADDR
// uc_nation = nation ;
12853: LD_ADDR_OWVAR 21
12857: PUSH
12858: LD_VAR 0 5
12862: ST_TO_ADDR
// vc_engine = vehengine ;
12863: LD_ADDR_OWVAR 39
12867: PUSH
12868: LD_VAR 0 6
12872: ST_TO_ADDR
// vc_control = vehcontrol ;
12873: LD_ADDR_OWVAR 38
12877: PUSH
12878: LD_VAR 0 7
12882: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12883: LD_ADDR_OWVAR 40
12887: PUSH
12888: LD_VAR 0 9
12892: PUSH
12893: LD_INT 1
12895: PPUSH
12896: LD_VAR 0 9
12900: PPUSH
12901: CALL_OW 12
12905: ARRAY
12906: ST_TO_ADDR
// for j = 1 to ARWeapons do
12907: LD_ADDR_VAR 0 14
12911: PUSH
12912: DOUBLE
12913: LD_INT 1
12915: DEC
12916: ST_TO_ADDR
12917: LD_VAR 0 9
12921: PUSH
12922: FOR_TO
12923: IFFALSE 13157
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12925: LD_VAR 0 9
12929: PUSH
12930: LD_VAR 0 14
12934: ARRAY
12935: PUSH
12936: LD_INT 24
12938: EQUAL
12939: PUSH
12940: LD_VAR 0 9
12944: PUSH
12945: LD_VAR 0 14
12949: ARRAY
12950: PUSH
12951: LD_INT 22
12953: EQUAL
12954: OR
12955: PUSH
12956: LD_VAR 0 9
12960: PUSH
12961: LD_VAR 0 14
12965: ARRAY
12966: PUSH
12967: LD_INT 23
12969: EQUAL
12970: OR
12971: PUSH
12972: LD_VAR 0 9
12976: PUSH
12977: LD_VAR 0 14
12981: ARRAY
12982: PUSH
12983: LD_INT 30
12985: EQUAL
12986: OR
12987: IFFALSE 13036
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
12989: LD_ADDR_VAR 0 18
12993: PUSH
12994: LD_INT 11
12996: PUSH
12997: LD_INT 12
12999: PUSH
13000: LD_INT 13
13002: PUSH
13003: LD_INT 14
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13012: LD_ADDR_OWVAR 37
13016: PUSH
13017: LD_VAR 0 18
13021: PUSH
13022: LD_INT 1
13024: PPUSH
13025: LD_VAR 0 18
13029: PPUSH
13030: CALL_OW 12
13034: ARRAY
13035: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13036: LD_VAR 0 9
13040: PUSH
13041: LD_VAR 0 14
13045: ARRAY
13046: PUSH
13047: LD_INT 29
13049: EQUAL
13050: PUSH
13051: LD_VAR 0 9
13055: PUSH
13056: LD_VAR 0 14
13060: ARRAY
13061: PUSH
13062: LD_INT 28
13064: EQUAL
13065: OR
13066: PUSH
13067: LD_VAR 0 9
13071: PUSH
13072: LD_VAR 0 14
13076: ARRAY
13077: PUSH
13078: LD_INT 27
13080: EQUAL
13081: OR
13082: PUSH
13083: LD_VAR 0 9
13087: PUSH
13088: LD_VAR 0 14
13092: ARRAY
13093: PUSH
13094: LD_INT 26
13096: EQUAL
13097: OR
13098: PUSH
13099: LD_VAR 0 9
13103: PUSH
13104: LD_VAR 0 14
13108: ARRAY
13109: PUSH
13110: LD_INT 25
13112: EQUAL
13113: OR
13114: IFFALSE 13155
// begin arChassisTab = [ 13 , 14 ] ;
13116: LD_ADDR_VAR 0 18
13120: PUSH
13121: LD_INT 13
13123: PUSH
13124: LD_INT 14
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13131: LD_ADDR_OWVAR 37
13135: PUSH
13136: LD_VAR 0 18
13140: PUSH
13141: LD_INT 1
13143: PPUSH
13144: LD_VAR 0 18
13148: PPUSH
13149: CALL_OW 12
13153: ARRAY
13154: ST_TO_ADDR
// end ; end ;
13155: GO 12922
13157: POP
13158: POP
// veh = CreateVehicle ;
13159: LD_ADDR_VAR 0 16
13163: PUSH
13164: CALL_OW 45
13168: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13169: LD_VAR 0 16
13173: PPUSH
13174: LD_VAR 0 1
13178: PPUSH
13179: LD_INT 0
13181: PPUSH
13182: CALL_OW 49
// if vehcontrol = 1 then
13186: LD_VAR 0 7
13190: PUSH
13191: LD_INT 1
13193: EQUAL
13194: IFFALSE 13251
// begin hc_gallery =  ;
13196: LD_ADDR_OWVAR 33
13200: PUSH
13201: LD_STRING 
13203: ST_TO_ADDR
// hc_name =  ;
13204: LD_ADDR_OWVAR 26
13208: PUSH
13209: LD_STRING 
13211: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13212: LD_INT 0
13214: PPUSH
13215: LD_INT 3
13217: PPUSH
13218: LD_VAR 0 4
13222: PPUSH
13223: CALL_OW 380
// un = CreateHuman ;
13227: LD_ADDR_VAR 0 15
13231: PUSH
13232: CALL_OW 44
13236: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13237: LD_VAR 0 15
13241: PPUSH
13242: LD_VAR 0 16
13246: PPUSH
13247: CALL_OW 52
// end ; i = i + 1 ;
13251: LD_ADDR_VAR 0 13
13255: PUSH
13256: LD_VAR 0 13
13260: PUSH
13261: LD_INT 1
13263: PLUS
13264: ST_TO_ADDR
// end ; if nation = 3 then
13265: LD_VAR 0 5
13269: PUSH
13270: LD_INT 3
13272: EQUAL
13273: IFFALSE 13665
// begin uc_side = side ;
13275: LD_ADDR_OWVAR 20
13279: PUSH
13280: LD_VAR 0 2
13284: ST_TO_ADDR
// uc_nation = nation ;
13285: LD_ADDR_OWVAR 21
13289: PUSH
13290: LD_VAR 0 5
13294: ST_TO_ADDR
// vc_engine = vehengine ;
13295: LD_ADDR_OWVAR 39
13299: PUSH
13300: LD_VAR 0 6
13304: ST_TO_ADDR
// vc_control = vehcontrol ;
13305: LD_ADDR_OWVAR 38
13309: PUSH
13310: LD_VAR 0 7
13314: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13315: LD_ADDR_OWVAR 40
13319: PUSH
13320: LD_VAR 0 8
13324: PUSH
13325: LD_INT 1
13327: PPUSH
13328: LD_VAR 0 8
13332: PPUSH
13333: CALL_OW 12
13337: ARRAY
13338: ST_TO_ADDR
// for j = 1 to RuWeapons do
13339: LD_ADDR_VAR 0 14
13343: PUSH
13344: DOUBLE
13345: LD_INT 1
13347: DEC
13348: ST_TO_ADDR
13349: LD_VAR 0 8
13353: PUSH
13354: FOR_TO
13355: IFFALSE 13557
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13357: LD_VAR 0 8
13361: PUSH
13362: LD_VAR 0 14
13366: ARRAY
13367: PUSH
13368: LD_INT 42
13370: EQUAL
13371: PUSH
13372: LD_VAR 0 8
13376: PUSH
13377: LD_VAR 0 14
13381: ARRAY
13382: PUSH
13383: LD_INT 43
13385: EQUAL
13386: OR
13387: PUSH
13388: LD_VAR 0 8
13392: PUSH
13393: LD_VAR 0 14
13397: ARRAY
13398: PUSH
13399: LD_INT 44
13401: EQUAL
13402: OR
13403: PUSH
13404: LD_VAR 0 8
13408: PUSH
13409: LD_VAR 0 14
13413: ARRAY
13414: PUSH
13415: LD_INT 45
13417: EQUAL
13418: OR
13419: PUSH
13420: LD_VAR 0 8
13424: PUSH
13425: LD_VAR 0 14
13429: ARRAY
13430: PUSH
13431: LD_INT 49
13433: EQUAL
13434: OR
13435: IFFALSE 13484
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13437: LD_ADDR_VAR 0 17
13441: PUSH
13442: LD_INT 21
13444: PUSH
13445: LD_INT 22
13447: PUSH
13448: LD_INT 23
13450: PUSH
13451: LD_INT 24
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13460: LD_ADDR_OWVAR 37
13464: PUSH
13465: LD_VAR 0 17
13469: PUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 17
13477: PPUSH
13478: CALL_OW 12
13482: ARRAY
13483: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13484: LD_VAR 0 8
13488: PUSH
13489: LD_VAR 0 14
13493: ARRAY
13494: PUSH
13495: LD_INT 46
13497: EQUAL
13498: PUSH
13499: LD_VAR 0 8
13503: PUSH
13504: LD_VAR 0 14
13508: ARRAY
13509: PUSH
13510: LD_INT 47
13512: EQUAL
13513: OR
13514: IFFALSE 13555
// begin ruChassisTab = [ 23 , 24 ] ;
13516: LD_ADDR_VAR 0 17
13520: PUSH
13521: LD_INT 23
13523: PUSH
13524: LD_INT 24
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13531: LD_ADDR_OWVAR 37
13535: PUSH
13536: LD_VAR 0 17
13540: PUSH
13541: LD_INT 1
13543: PPUSH
13544: LD_VAR 0 17
13548: PPUSH
13549: CALL_OW 12
13553: ARRAY
13554: ST_TO_ADDR
// end ; end ;
13555: GO 13354
13557: POP
13558: POP
// veh = CreateVehicle ;
13559: LD_ADDR_VAR 0 16
13563: PUSH
13564: CALL_OW 45
13568: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13569: LD_VAR 0 16
13573: PPUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: LD_INT 0
13581: PPUSH
13582: CALL_OW 49
// if vehcontrol = 1 then
13586: LD_VAR 0 7
13590: PUSH
13591: LD_INT 1
13593: EQUAL
13594: IFFALSE 13651
// begin hc_gallery =  ;
13596: LD_ADDR_OWVAR 33
13600: PUSH
13601: LD_STRING 
13603: ST_TO_ADDR
// hc_name =  ;
13604: LD_ADDR_OWVAR 26
13608: PUSH
13609: LD_STRING 
13611: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13612: LD_INT 0
13614: PPUSH
13615: LD_INT 3
13617: PPUSH
13618: LD_VAR 0 4
13622: PPUSH
13623: CALL_OW 380
// un = CreateHuman ;
13627: LD_ADDR_VAR 0 15
13631: PUSH
13632: CALL_OW 44
13636: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13637: LD_VAR 0 15
13641: PPUSH
13642: LD_VAR 0 16
13646: PPUSH
13647: CALL_OW 52
// end ; i = i + 1 ;
13651: LD_ADDR_VAR 0 13
13655: PUSH
13656: LD_VAR 0 13
13660: PUSH
13661: LD_INT 1
13663: PLUS
13664: ST_TO_ADDR
// end ; until i = vehCount ;
13665: LD_VAR 0 13
13669: PUSH
13670: LD_VAR 0 3
13674: EQUAL
13675: IFFALSE 12327
// repeat wait ( 0 0$1 ) ;
13677: LD_INT 35
13679: PPUSH
13680: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13684: LD_ADDR_VAR 0 20
13688: PUSH
13689: LD_INT 22
13691: PUSH
13692: LD_VAR 0 2
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 21
13703: PUSH
13704: LD_INT 2
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 24
13713: PUSH
13714: LD_INT 661
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: ST_TO_ADDR
// if vehicleOK_list > 0 then
13731: LD_VAR 0 20
13735: PUSH
13736: LD_INT 0
13738: GREATER
13739: IFFALSE 13930
// begin for i in vehicleOK_list do
13741: LD_ADDR_VAR 0 13
13745: PUSH
13746: LD_VAR 0 20
13750: PUSH
13751: FOR_IN
13752: IFFALSE 13928
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13754: LD_ADDR_VAR 0 21
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_VAR 0 11
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PPUSH
13771: CALL_OW 69
13775: PPUSH
13776: LD_VAR 0 13
13780: PPUSH
13781: CALL_OW 74
13785: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13786: LD_ADDR_VAR 0 22
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_VAR 0 11
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 2
13805: PUSH
13806: LD_INT 59
13808: PUSH
13809: EMPTY
13810: LIST
13811: PUSH
13812: LD_INT 21
13814: PUSH
13815: LD_INT 1
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 21
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: PPUSH
13845: CALL_OW 69
13849: PPUSH
13850: LD_VAR 0 13
13854: PPUSH
13855: CALL_OW 74
13859: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13860: LD_VAR 0 13
13864: PPUSH
13865: LD_VAR 0 21
13869: PPUSH
13870: CALL_OW 296
13874: PUSH
13875: LD_INT 8
13877: PLUS
13878: PUSH
13879: LD_VAR 0 13
13883: PPUSH
13884: LD_VAR 0 22
13888: PPUSH
13889: CALL_OW 296
13893: LESS
13894: IFFALSE 13912
// begin ComAttackUnit ( i , target1 ) ;
13896: LD_VAR 0 13
13900: PPUSH
13901: LD_VAR 0 21
13905: PPUSH
13906: CALL_OW 115
// end else
13910: GO 13926
// begin ComAttackUnit ( i , target2 ) ;
13912: LD_VAR 0 13
13916: PPUSH
13917: LD_VAR 0 22
13921: PPUSH
13922: CALL_OW 115
// end ; end ;
13926: GO 13751
13928: POP
13929: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
13930: LD_INT 22
13932: PUSH
13933: LD_VAR 0 2
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 21
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 24
13954: PUSH
13955: LD_INT 250
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: PUSH
13972: LD_INT 0
13974: EQUAL
13975: IFFALSE 13677
// end ;
13977: LD_VAR 0 12
13981: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13992: LD_ADDR_VAR 0 7
13996: PUSH
13997: LD_INT 22
13999: PUSH
14000: LD_VAR 0 1
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 1
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: LD_INT 24
14017: PUSH
14018: LD_INT 550
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 24
14031: PUSH
14032: LD_INT 250
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PPUSH
14048: CALL_OW 69
14052: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14053: LD_ADDR_VAR 0 8
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_VAR 0 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: LD_INT 25
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 25
14085: PUSH
14086: LD_INT 5
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 25
14095: PUSH
14096: LD_INT 8
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 25
14105: PUSH
14106: LD_INT 9
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 24
14122: PUSH
14123: LD_INT 1000
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14140: LD_ADDR_VAR 0 9
14144: PUSH
14145: LD_INT 22
14147: PUSH
14148: LD_VAR 0 1
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 25
14159: PUSH
14160: LD_INT 4
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 69
14175: ST_TO_ADDR
// if medicCount > 0 then
14176: LD_VAR 0 9
14180: PUSH
14181: LD_INT 0
14183: GREATER
14184: IFFALSE 14258
// begin if damageUnit_list > 0 then
14186: LD_VAR 0 7
14190: PUSH
14191: LD_INT 0
14193: GREATER
14194: IFFALSE 14258
// begin for i in damageUnit_list do
14196: LD_ADDR_VAR 0 5
14200: PUSH
14201: LD_VAR 0 7
14205: PUSH
14206: FOR_IN
14207: IFFALSE 14256
// begin ComMoveToArea ( i , healArea ) ;
14209: LD_VAR 0 5
14213: PPUSH
14214: LD_VAR 0 2
14218: PPUSH
14219: CALL_OW 113
// for j in medicCount do
14223: LD_ADDR_VAR 0 6
14227: PUSH
14228: LD_VAR 0 9
14232: PUSH
14233: FOR_IN
14234: IFFALSE 14252
// AddComHeal ( j , i ) ;
14236: LD_VAR 0 6
14240: PPUSH
14241: LD_VAR 0 5
14245: PPUSH
14246: CALL_OW 188
14250: GO 14233
14252: POP
14253: POP
// end ;
14254: GO 14206
14256: POP
14257: POP
// end ; end ; if soldiersOK_list > 0 then
14258: LD_VAR 0 8
14262: PUSH
14263: LD_INT 0
14265: GREATER
14266: IFFALSE 14457
// begin for i in soldiersOK_list do
14268: LD_ADDR_VAR 0 5
14272: PUSH
14273: LD_VAR 0 8
14277: PUSH
14278: FOR_IN
14279: IFFALSE 14455
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14281: LD_ADDR_VAR 0 10
14285: PUSH
14286: LD_INT 22
14288: PUSH
14289: LD_VAR 0 3
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PPUSH
14298: CALL_OW 69
14302: PPUSH
14303: LD_VAR 0 5
14307: PPUSH
14308: CALL_OW 74
14312: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14313: LD_ADDR_VAR 0 11
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_VAR 0 3
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: LD_INT 59
14335: PUSH
14336: EMPTY
14337: LIST
14338: PUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 2
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: PPUSH
14377: LD_VAR 0 5
14381: PPUSH
14382: CALL_OW 74
14386: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14387: LD_VAR 0 5
14391: PPUSH
14392: LD_VAR 0 10
14396: PPUSH
14397: CALL_OW 296
14401: PUSH
14402: LD_INT 8
14404: PLUS
14405: PUSH
14406: LD_VAR 0 5
14410: PPUSH
14411: LD_VAR 0 11
14415: PPUSH
14416: CALL_OW 296
14420: LESS
14421: IFFALSE 14439
// begin ComAttackUnit ( i , target1 ) ;
14423: LD_VAR 0 5
14427: PPUSH
14428: LD_VAR 0 10
14432: PPUSH
14433: CALL_OW 115
// end else
14437: GO 14453
// begin ComAttackUnit ( i , target2 ) ;
14439: LD_VAR 0 5
14443: PPUSH
14444: LD_VAR 0 11
14448: PPUSH
14449: CALL_OW 115
// end ; end ;
14453: GO 14278
14455: POP
14456: POP
// end ; end ; end_of_file
14457: LD_VAR 0 4
14461: RET
// every 1 do var i ;
14462: GO 14464
14464: DISABLE
14465: LD_INT 0
14467: PPUSH
// begin InGameOn ;
14468: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14472: LD_INT 53
14474: PPUSH
14475: LD_INT 40
14477: PPUSH
14478: CALL_OW 84
// wait ( 0 0$5 ) ;
14482: LD_INT 175
14484: PPUSH
14485: CALL_OW 67
// if gammaCommander = 1 then
14489: LD_EXP 11
14493: PUSH
14494: LD_INT 1
14496: EQUAL
14497: IFFALSE 14508
// CenterNowOnUnits ( Donaldson ) ;
14499: LD_EXP 3
14503: PPUSH
14504: CALL_OW 87
// if gammaCommander = 2 then
14508: LD_EXP 11
14512: PUSH
14513: LD_INT 2
14515: EQUAL
14516: IFFALSE 14527
// CenterNowOnUnits ( Brown ) ;
14518: LD_EXP 2
14522: PPUSH
14523: CALL_OW 87
// if gammaCommander = 3 then
14527: LD_EXP 11
14531: PUSH
14532: LD_INT 3
14534: EQUAL
14535: IFFALSE 14546
// CenterNowOnUnits ( Houten ) ;
14537: LD_EXP 12
14541: PPUSH
14542: CALL_OW 87
// if gammaCommander = 1 then
14546: LD_EXP 11
14550: PUSH
14551: LD_INT 1
14553: EQUAL
14554: IFFALSE 14568
// Say ( Donaldson , D1-Don-1 ) ;
14556: LD_EXP 3
14560: PPUSH
14561: LD_STRING D1-Don-1
14563: PPUSH
14564: CALL_OW 88
// if gammaCommander = 2 then
14568: LD_EXP 11
14572: PUSH
14573: LD_INT 2
14575: EQUAL
14576: IFFALSE 14590
// Say ( Brown , D1-Brown-1 ) ;
14578: LD_EXP 2
14582: PPUSH
14583: LD_STRING D1-Brown-1
14585: PPUSH
14586: CALL_OW 88
// if gammaCommander = 3 then
14590: LD_EXP 11
14594: PUSH
14595: LD_INT 3
14597: EQUAL
14598: IFFALSE 14612
// Say ( Houten , D1-VanH-1 ) ;
14600: LD_EXP 12
14604: PPUSH
14605: LD_STRING D1-VanH-1
14607: PPUSH
14608: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
14612: LD_EXP 21
14616: PPUSH
14617: LD_STRING D1-Har-1
14619: PPUSH
14620: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
14624: LD_INT 53
14626: PPUSH
14627: LD_INT 40
14629: PPUSH
14630: CALL_OW 84
// if gammaCommander = 1 then
14634: LD_EXP 11
14638: PUSH
14639: LD_INT 1
14641: EQUAL
14642: IFFALSE 14656
// Say ( Donaldson , D1-Don-2 ) ;
14644: LD_EXP 3
14648: PPUSH
14649: LD_STRING D1-Don-2
14651: PPUSH
14652: CALL_OW 88
// if gammaCommander = 2 then
14656: LD_EXP 11
14660: PUSH
14661: LD_INT 2
14663: EQUAL
14664: IFFALSE 14678
// Say ( Brown , D1-Brown-2 ) ;
14666: LD_EXP 2
14670: PPUSH
14671: LD_STRING D1-Brown-2
14673: PPUSH
14674: CALL_OW 88
// if gammaCommander = 3 then
14678: LD_EXP 11
14682: PUSH
14683: LD_INT 3
14685: EQUAL
14686: IFFALSE 14700
// Say ( Houten , D1-VanH-2 ) ;
14688: LD_EXP 12
14692: PPUSH
14693: LD_STRING D1-VanH-2
14695: PPUSH
14696: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
14700: LD_EXP 21
14704: PPUSH
14705: LD_STRING D1-Har-2
14707: PPUSH
14708: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
14712: LD_INT 22
14714: PUSH
14715: LD_INT 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 33
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 61
14734: PUSH
14735: EMPTY
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: IFFALSE 14812
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_INT 1
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 33
14766: PUSH
14767: LD_INT 2
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 61
14776: PUSH
14777: EMPTY
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 69
14789: PUSH
14790: FOR_IN
14791: IFFALSE 14810
// ComAgressiveMove ( i , 70 , 41 ) ;
14793: LD_VAR 0 1
14797: PPUSH
14798: LD_INT 70
14800: PPUSH
14801: LD_INT 41
14803: PPUSH
14804: CALL_OW 114
14808: GO 14790
14810: POP
14811: POP
// repeat wait ( 0 0$1 ) ;
14812: LD_INT 35
14814: PPUSH
14815: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14819: LD_ADDR_VAR 0 1
14823: PUSH
14824: LD_INT 22
14826: PUSH
14827: LD_INT 6
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: PUSH
14842: FOR_IN
14843: IFFALSE 14862
// ComAgressiveMove ( i , 54 , 20 ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 54
14852: PPUSH
14853: LD_INT 20
14855: PPUSH
14856: CALL_OW 114
14860: GO 14842
14862: POP
14863: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14864: LD_ADDR_VAR 0 1
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 3
14891: PUSH
14892: LD_INT 54
14894: PUSH
14895: EMPTY
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PPUSH
14907: CALL_OW 69
14911: PUSH
14912: FOR_IN
14913: IFFALSE 14947
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 70
14922: PPUSH
14923: LD_INT 41
14925: PPUSH
14926: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
14930: LD_VAR 0 1
14934: PPUSH
14935: LD_INT 46
14937: PPUSH
14938: LD_INT 39
14940: PPUSH
14941: CALL_OW 174
// end ;
14945: GO 14912
14947: POP
14948: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
14949: LD_ADDR_VAR 0 1
14953: PUSH
14954: LD_INT 22
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 21
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: LD_INT 24
14979: PUSH
14980: LD_INT 500
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: PPUSH
14996: CALL_OW 69
15000: PUSH
15001: FOR_IN
15002: IFFALSE 15035
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15004: LD_VAR 0 1
15008: PPUSH
15009: LD_EXP 36
15013: PPUSH
15014: CALL_OW 250
15018: PPUSH
15019: LD_EXP 36
15023: PPUSH
15024: CALL_OW 251
15028: PPUSH
15029: CALL_OW 111
15033: GO 15001
15035: POP
15036: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
15037: LD_INT 22
15039: PUSH
15040: LD_INT 6
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 21
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 24
15059: PUSH
15060: LD_INT 250
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: PUSH
15077: LD_INT 6
15079: LESS
15080: IFFALSE 14812
// InGameOff ;
15082: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
15086: LD_STRING M1
15088: PPUSH
15089: CALL_OW 337
// SaveForQuickRestart ;
15093: CALL_OW 22
// end ;
15097: PPOPN 1
15099: END
// every 1 1$0 do
15100: GO 15102
15102: DISABLE
// begin PrepareSupportFromDelta ;
15103: CALL 2119 0 0
// firstAttack = 1 ;
15107: LD_ADDR_EXP 32
15111: PUSH
15112: LD_INT 1
15114: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15115: LD_EXP 8
15119: PPUSH
15120: CALL_OW 302
15124: IFFALSE 15140
// begin Say ( Gladstone , D2-Glad-1 ) ;
15126: LD_EXP 8
15130: PPUSH
15131: LD_STRING D2-Glad-1
15133: PPUSH
15134: CALL_OW 88
// end else
15138: GO 15242
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15140: LD_INT 4
15142: PPUSH
15143: LD_INT 22
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 21
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: LD_INT 25
15168: PUSH
15169: LD_INT 1
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 25
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 25
15188: PUSH
15189: LD_INT 3
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 25
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 70
15222: PUSH
15223: LD_EXP 14
15227: PUSH
15228: EMPTY
15229: LIST
15230: DIFF
15231: PPUSH
15232: LD_STRING D2-Sol1-1
15234: PPUSH
15235: LD_STRING D2-FSol1-1
15237: PPUSH
15238: CALL 5578 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15242: LD_EXP 3
15246: PPUSH
15247: CALL_OW 302
15251: PUSH
15252: LD_EXP 11
15256: PUSH
15257: LD_INT 1
15259: EQUAL
15260: AND
15261: IFFALSE 15275
// Say ( Donaldson , D2-Don-1 ) ;
15263: LD_EXP 3
15267: PPUSH
15268: LD_STRING D2-Don-1
15270: PPUSH
15271: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15275: LD_EXP 2
15279: PPUSH
15280: CALL_OW 302
15284: PUSH
15285: LD_EXP 11
15289: PUSH
15290: LD_INT 2
15292: EQUAL
15293: AND
15294: IFFALSE 15308
// Say ( Brown , D2-Brown-1 ) ;
15296: LD_EXP 2
15300: PPUSH
15301: LD_STRING D2-Brown-1
15303: PPUSH
15304: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15308: LD_EXP 12
15312: PPUSH
15313: CALL_OW 302
15317: PUSH
15318: LD_EXP 11
15322: PUSH
15323: LD_INT 3
15325: EQUAL
15326: AND
15327: IFFALSE 15341
// Say ( Houten , D2-VanH-1 ) ;
15329: LD_EXP 12
15333: PPUSH
15334: LD_STRING D2-VanH-1
15336: PPUSH
15337: CALL_OW 88
// end ;
15341: END
// every 0 0$1 do
15342: GO 15344
15344: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
15345: LD_STRING 07_time
15347: PPUSH
15348: LD_INT 0
15350: PPUSH
15351: CALL_OW 30
15355: PUSH
15356: LD_INT 3
15358: DIV
15359: PPUSH
15360: CALL_OW 67
// PrepareMacmillanSquad ;
15364: CALL 2737 0 0
// CenterNowOnUnits ( JMM ) ;
15368: LD_EXP 1
15372: PPUSH
15373: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
15377: LD_EXP 1
15381: PPUSH
15382: LD_STRING D3-JMM-1
15384: PPUSH
15385: CALL_OW 88
// JMMArrive = 1 ;
15389: LD_ADDR_EXP 37
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15397: LD_EXP 3
15401: PPUSH
15402: CALL_OW 302
15406: PUSH
15407: LD_EXP 11
15411: PUSH
15412: LD_INT 1
15414: EQUAL
15415: AND
15416: IFFALSE 15432
// begin Say ( Donaldson , D3-Don-1 ) ;
15418: LD_EXP 3
15422: PPUSH
15423: LD_STRING D3-Don-1
15425: PPUSH
15426: CALL_OW 88
// end else
15430: GO 15484
// begin if gammaCommander = 1 then
15432: LD_EXP 11
15436: PUSH
15437: LD_INT 1
15439: EQUAL
15440: IFFALSE 15484
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
15442: LD_EXP 10
15446: PPUSH
15447: LD_INT 26
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 72
15461: PPUSH
15462: LD_STRING D3-Sol1-1
15464: PPUSH
15465: LD_STRING D3-Sol1-1
15467: PPUSH
15468: CALL 5578 0 3
// Say ( JMM , D3-JMM-2 ) ;
15472: LD_EXP 1
15476: PPUSH
15477: LD_STRING D3-JMM-2
15479: PPUSH
15480: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15484: LD_EXP 2
15488: PPUSH
15489: CALL_OW 302
15493: PUSH
15494: LD_EXP 11
15498: PUSH
15499: LD_INT 2
15501: EQUAL
15502: AND
15503: IFFALSE 15519
// begin Say ( Brown , D3-Brown-1 ) ;
15505: LD_EXP 2
15509: PPUSH
15510: LD_STRING D3-Brown-1
15512: PPUSH
15513: CALL_OW 88
// end else
15517: GO 15571
// begin if gammaCommander = 2 then
15519: LD_EXP 11
15523: PUSH
15524: LD_INT 2
15526: EQUAL
15527: IFFALSE 15571
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
15529: LD_EXP 10
15533: PPUSH
15534: LD_INT 26
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 72
15548: PPUSH
15549: LD_STRING D3-Sol1-1a
15551: PPUSH
15552: LD_STRING D3-Sol1-1a
15554: PPUSH
15555: CALL 5578 0 3
// Say ( JMM , D3-JMM-2 ) ;
15559: LD_EXP 1
15563: PPUSH
15564: LD_STRING D3-JMM-2
15566: PPUSH
15567: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15571: LD_EXP 12
15575: PPUSH
15576: CALL_OW 302
15580: PUSH
15581: LD_EXP 11
15585: PUSH
15586: LD_INT 3
15588: EQUAL
15589: AND
15590: IFFALSE 15606
// begin Say ( Houten , D3-VanH-1 ) ;
15592: LD_EXP 12
15596: PPUSH
15597: LD_STRING D3-VanH-1
15599: PPUSH
15600: CALL_OW 88
// end else
15604: GO 15658
// begin if gammaCommander = 3 then
15606: LD_EXP 11
15610: PUSH
15611: LD_INT 3
15613: EQUAL
15614: IFFALSE 15658
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
15616: LD_EXP 10
15620: PPUSH
15621: LD_INT 26
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: PPUSH
15636: LD_STRING D3-Sol1-1b
15638: PPUSH
15639: LD_STRING D3-Sol1-1b
15641: PPUSH
15642: CALL 5578 0 3
// Say ( JMM , D3-JMM-2 ) ;
15646: LD_EXP 1
15650: PPUSH
15651: LD_STRING D3-JMM-2
15653: PPUSH
15654: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15658: LD_EXP 14
15662: PPUSH
15663: CALL_OW 302
15667: IFFALSE 15695
// begin Say ( Joan , D3a-Joan-1 ) ;
15669: LD_EXP 14
15673: PPUSH
15674: LD_STRING D3a-Joan-1
15676: PPUSH
15677: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15681: LD_EXP 1
15685: PPUSH
15686: LD_STRING D3a-JMM-1
15688: PPUSH
15689: CALL_OW 88
// end else
15693: GO 16148
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15695: LD_EXP 3
15699: PPUSH
15700: CALL_OW 302
15704: PUSH
15705: LD_EXP 11
15709: PUSH
15710: LD_INT 1
15712: EQUAL
15713: AND
15714: PUSH
15715: LD_STRING 06_JoanStatus_1
15717: PPUSH
15718: LD_INT 0
15720: PPUSH
15721: CALL_OW 30
15725: PUSH
15726: LD_INT 1
15728: EQUAL
15729: AND
15730: IFFALSE 15781
// begin Say ( Donaldson , D3b-Don-1 ) ;
15732: LD_EXP 3
15736: PPUSH
15737: LD_STRING D3b-Don-1
15739: PPUSH
15740: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15744: LD_EXP 1
15748: PPUSH
15749: LD_STRING D3b-JMM-2
15751: PPUSH
15752: CALL_OW 88
// if IsOK ( Lisa ) then
15756: LD_EXP 6
15760: PPUSH
15761: CALL_OW 302
15765: IFFALSE 15779
// Say ( Lisa , D3b-Lisa-2 ) ;
15767: LD_EXP 6
15771: PPUSH
15772: LD_STRING D3b-Lisa-2
15774: PPUSH
15775: CALL_OW 88
// end else
15779: GO 15846
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15781: LD_EXP 10
15785: PPUSH
15786: LD_INT 26
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PPUSH
15796: CALL_OW 72
15800: PPUSH
15801: LD_STRING D3b-Sol1-1
15803: PPUSH
15804: LD_STRING D3b-Sol1-1
15806: PPUSH
15807: CALL 5578 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15811: LD_EXP 1
15815: PPUSH
15816: LD_STRING D3b-JMM-2
15818: PPUSH
15819: CALL_OW 88
// if IsOK ( Lisa ) then
15823: LD_EXP 6
15827: PPUSH
15828: CALL_OW 302
15832: IFFALSE 15846
// Say ( Lisa , D3b-Lisa-2 ) ;
15834: LD_EXP 6
15838: PPUSH
15839: LD_STRING D3b-Lisa-2
15841: PPUSH
15842: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15846: LD_EXP 2
15850: PPUSH
15851: CALL_OW 302
15855: PUSH
15856: LD_EXP 11
15860: PUSH
15861: LD_INT 2
15863: EQUAL
15864: AND
15865: PUSH
15866: LD_STRING 06_JoanStatus_1
15868: PPUSH
15869: LD_INT 0
15871: PPUSH
15872: CALL_OW 30
15876: PUSH
15877: LD_INT 1
15879: EQUAL
15880: AND
15881: IFFALSE 15932
// begin Say ( Brown , D3b-Brown-1 ) ;
15883: LD_EXP 2
15887: PPUSH
15888: LD_STRING D3b-Brown-1
15890: PPUSH
15891: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15895: LD_EXP 1
15899: PPUSH
15900: LD_STRING D3b-JMM-2
15902: PPUSH
15903: CALL_OW 88
// if IsOK ( Lisa ) then
15907: LD_EXP 6
15911: PPUSH
15912: CALL_OW 302
15916: IFFALSE 15930
// Say ( Lisa , D3b-Lisa-2 ) ;
15918: LD_EXP 6
15922: PPUSH
15923: LD_STRING D3b-Lisa-2
15925: PPUSH
15926: CALL_OW 88
// end else
15930: GO 15997
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15932: LD_EXP 10
15936: PPUSH
15937: LD_INT 26
15939: PUSH
15940: LD_INT 1
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PPUSH
15947: CALL_OW 72
15951: PPUSH
15952: LD_STRING D3b-Sol1-1
15954: PPUSH
15955: LD_STRING D3b-Sol1-1
15957: PPUSH
15958: CALL 5578 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15962: LD_EXP 1
15966: PPUSH
15967: LD_STRING D3b-JMM-2
15969: PPUSH
15970: CALL_OW 88
// if IsOK ( Lisa ) then
15974: LD_EXP 6
15978: PPUSH
15979: CALL_OW 302
15983: IFFALSE 15997
// Say ( Lisa , D3b-Lisa-2 ) ;
15985: LD_EXP 6
15989: PPUSH
15990: LD_STRING D3b-Lisa-2
15992: PPUSH
15993: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15997: LD_EXP 12
16001: PPUSH
16002: CALL_OW 302
16006: PUSH
16007: LD_EXP 11
16011: PUSH
16012: LD_INT 3
16014: EQUAL
16015: AND
16016: PUSH
16017: LD_STRING 06_JoanStatus_1
16019: PPUSH
16020: LD_INT 0
16022: PPUSH
16023: CALL_OW 30
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: AND
16032: IFFALSE 16083
// begin Say ( Houten , D3b-VanH-1 ) ;
16034: LD_EXP 12
16038: PPUSH
16039: LD_STRING D3b-VanH-1
16041: PPUSH
16042: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16046: LD_EXP 1
16050: PPUSH
16051: LD_STRING D3b-JMM-2
16053: PPUSH
16054: CALL_OW 88
// if IsOK ( Lisa ) then
16058: LD_EXP 6
16062: PPUSH
16063: CALL_OW 302
16067: IFFALSE 16081
// Say ( Lisa , D3b-Lisa-2 ) ;
16069: LD_EXP 6
16073: PPUSH
16074: LD_STRING D3b-Lisa-2
16076: PPUSH
16077: CALL_OW 88
// end else
16081: GO 16148
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16083: LD_EXP 10
16087: PPUSH
16088: LD_INT 26
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PPUSH
16098: CALL_OW 72
16102: PPUSH
16103: LD_STRING D3b-Sol1-1
16105: PPUSH
16106: LD_STRING D3b-Sol1-1
16108: PPUSH
16109: CALL 5578 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16113: LD_EXP 1
16117: PPUSH
16118: LD_STRING D3b-JMM-2
16120: PPUSH
16121: CALL_OW 88
// if IsOK ( Lisa ) then
16125: LD_EXP 6
16129: PPUSH
16130: CALL_OW 302
16134: IFFALSE 16148
// Say ( Lisa , D3b-Lisa-2 ) ;
16136: LD_EXP 6
16140: PPUSH
16141: LD_STRING D3b-Lisa-2
16143: PPUSH
16144: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16148: LD_INT 22
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 21
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 26
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 2
16180: PUSH
16181: LD_INT 25
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 25
16193: PUSH
16194: LD_INT 2
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 25
16203: PUSH
16204: LD_INT 3
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 25
16213: PUSH
16214: LD_INT 4
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 69
16238: PUSH
16239: LD_EXP 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: DIFF
16247: PPUSH
16248: LD_STRING DCa-Sol1-1
16250: PPUSH
16251: LD_STRING DCa-Sol1-1
16253: PPUSH
16254: CALL 5578 0 3
// Say ( JMM , DCb-JMM-1 ) ;
16258: LD_EXP 1
16262: PPUSH
16263: LD_STRING DCb-JMM-1
16265: PPUSH
16266: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16270: LD_INT 22
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 21
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 26
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 2
16302: PUSH
16303: LD_INT 25
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 25
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 25
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 25
16335: PUSH
16336: LD_INT 4
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: PPUSH
16356: CALL_OW 69
16360: PUSH
16361: LD_EXP 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: DIFF
16369: PPUSH
16370: LD_STRING DCb-Sol1-1
16372: PPUSH
16373: LD_STRING DCb-Sol1-1
16375: PPUSH
16376: CALL 5578 0 3
// Say ( JMM , DCb-JMM-2 ) ;
16380: LD_EXP 1
16384: PPUSH
16385: LD_STRING DCb-JMM-2
16387: PPUSH
16388: CALL_OW 88
// secondAttack = 1 ;
16392: LD_ADDR_EXP 33
16396: PUSH
16397: LD_INT 1
16399: ST_TO_ADDR
// end ;
16400: END
// every 0 0$01 trigger JMMArrive = 1 do
16401: LD_EXP 37
16405: PUSH
16406: LD_INT 1
16408: EQUAL
16409: IFFALSE 16489
16411: GO 16413
16413: DISABLE
// begin wait ( 3 3$0 ) ;
16414: LD_INT 6300
16416: PPUSH
16417: CALL_OW 67
// DialogueOn ;
16421: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16425: LD_EXP 22
16429: PPUSH
16430: LD_STRING D4-Pow-1
16432: PPUSH
16433: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16437: LD_EXP 1
16441: PPUSH
16442: LD_STRING D4-JMM-1
16444: PPUSH
16445: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16449: LD_EXP 22
16453: PPUSH
16454: LD_STRING D4-Pow-2
16456: PPUSH
16457: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16461: LD_EXP 1
16465: PPUSH
16466: LD_STRING D4-JMM-2
16468: PPUSH
16469: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16473: LD_EXP 22
16477: PPUSH
16478: LD_STRING D4-Pow-3
16480: PPUSH
16481: CALL_OW 94
// DialogueOff ;
16485: CALL_OW 7
// end ;
16489: END
// every 0 0$01 trigger JMMArrive = 1 do
16490: LD_EXP 37
16494: PUSH
16495: LD_INT 1
16497: EQUAL
16498: IFFALSE 16530
16500: GO 16502
16502: DISABLE
// begin wait ( 8 8$0 ) ;
16503: LD_INT 16800
16505: PPUSH
16506: CALL_OW 67
// DialogueOn ;
16510: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16514: LD_EXP 22
16518: PPUSH
16519: LD_STRING D4a-Pow-1
16521: PPUSH
16522: CALL_OW 94
// DialogueOff ;
16526: CALL_OW 7
// end ;
16530: END
// every 0 0$01 trigger JMMArrive = 1 do
16531: LD_EXP 37
16535: PUSH
16536: LD_INT 1
16538: EQUAL
16539: IFFALSE 16584
16541: GO 16543
16543: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
16544: LD_INT 21000
16546: PUSH
16547: LD_INT 25200
16549: PUSH
16550: LD_INT 31500
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: PUSH
16558: LD_OWVAR 67
16562: ARRAY
16563: PPUSH
16564: CALL_OW 67
// PrepareSikorsky ;
16568: CALL 4162 0 0
// SikorskyArrive = 1 ;
16572: LD_ADDR_EXP 17
16576: PUSH
16577: LD_INT 1
16579: ST_TO_ADDR
// PrepareSikorskyArmy ;
16580: CALL 4302 0 0
// end ;
16584: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
16585: LD_EXP 16
16589: PPUSH
16590: LD_INT 5
16592: PPUSH
16593: CALL_OW 308
16597: IFFALSE 16789
16599: GO 16601
16601: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
16602: LD_EXP 16
16606: PPUSH
16607: CALL_OW 87
// DialogueOn ;
16611: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16615: LD_EXP 15
16619: PPUSH
16620: LD_STRING D5-Sik-1
16622: PPUSH
16623: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16627: LD_EXP 1
16631: PPUSH
16632: LD_STRING D5-JMM-1a
16634: PPUSH
16635: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16639: LD_EXP 15
16643: PPUSH
16644: LD_STRING D5-Sik-2
16646: PPUSH
16647: CALL_OW 88
// case query ( QSikorski ) of 1 :
16651: LD_STRING QSikorski
16653: PPUSH
16654: CALL_OW 97
16658: PUSH
16659: LD_INT 1
16661: DOUBLE
16662: EQUAL
16663: IFTRUE 16667
16665: GO 16690
16667: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16668: LD_EXP 15
16672: PPUSH
16673: LD_STRING D5a-Sik-1
16675: PPUSH
16676: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
16680: LD_ADDR_EXP 18
16684: PUSH
16685: LD_INT 2100
16687: ST_TO_ADDR
// end ; 2 :
16688: GO 16777
16690: LD_INT 2
16692: DOUBLE
16693: EQUAL
16694: IFTRUE 16698
16696: GO 16721
16698: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16699: LD_EXP 15
16703: PPUSH
16704: LD_STRING D5b-Sik-1
16706: PPUSH
16707: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16711: LD_ADDR_EXP 18
16715: PUSH
16716: LD_INT 10500
16718: ST_TO_ADDR
// end ; 3 :
16719: GO 16777
16721: LD_INT 3
16723: DOUBLE
16724: EQUAL
16725: IFTRUE 16729
16727: GO 16776
16729: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16730: LD_EXP 15
16734: PPUSH
16735: LD_STRING D5c-Sik-1
16737: PPUSH
16738: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16742: LD_EXP 1
16746: PPUSH
16747: LD_STRING D5c-JMM-1
16749: PPUSH
16750: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16754: LD_EXP 15
16758: PPUSH
16759: LD_STRING D5c-Sik-2
16761: PPUSH
16762: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16766: LD_ADDR_EXP 18
16770: PUSH
16771: LD_INT 10500
16773: ST_TO_ADDR
// end ; end ;
16774: GO 16777
16776: POP
// DialogueOff ;
16777: CALL_OW 7
// timerStatus = 1 ;
16781: LD_ADDR_EXP 34
16785: PUSH
16786: LD_INT 1
16788: ST_TO_ADDR
// end ;
16789: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16790: LD_EXP 18
16794: PUSH
16795: LD_INT 35
16797: LESS
16798: IFFALSE 16846
16800: GO 16802
16802: DISABLE
// begin timerStatus = 0 ;
16803: LD_ADDR_EXP 34
16807: PUSH
16808: LD_INT 0
16810: ST_TO_ADDR
// DialogueOn ;
16811: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16815: LD_EXP 15
16819: PPUSH
16820: LD_STRING D6-Sik-1
16822: PPUSH
16823: CALL_OW 88
// DialogueOff ;
16827: CALL_OW 7
// SikorskyAI = 1 ;
16831: LD_ADDR_EXP 19
16835: PUSH
16836: LD_INT 1
16838: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16839: LD_STRING M2
16841: PPUSH
16842: CALL_OW 337
// end ;
16846: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16847: LD_EXP 16
16851: PPUSH
16852: LD_INT 18
16854: PPUSH
16855: CALL_OW 308
16859: IFFALSE 16943
16861: GO 16863
16863: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16864: LD_EXP 15
16868: PPUSH
16869: LD_STRING D7-Sik-1
16871: PPUSH
16872: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16876: LD_EXP 1
16880: PPUSH
16881: LD_INT 24
16883: PPUSH
16884: CALL_OW 308
16888: PUSH
16889: LD_EXP 1
16893: PPUSH
16894: CALL_OW 310
16898: OR
16899: IFFALSE 16923
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16901: LD_EXP 15
16905: PPUSH
16906: LD_STRING D7a-Sik-1
16908: PPUSH
16909: CALL_OW 88
// SikorskyStatus = 1 ;
16913: LD_ADDR_EXP 20
16917: PUSH
16918: LD_INT 1
16920: ST_TO_ADDR
// end else
16921: GO 16943
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16923: LD_EXP 15
16927: PPUSH
16928: LD_STRING D7b-Sik-1
16930: PPUSH
16931: CALL_OW 88
// SikorskyStatus = 2 ;
16935: LD_ADDR_EXP 20
16939: PUSH
16940: LD_INT 2
16942: ST_TO_ADDR
// end ; end ;
16943: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
16944: LD_EXP 35
16948: PUSH
16949: LD_INT 1
16951: EQUAL
16952: IFFALSE 17061
16954: GO 16956
16956: DISABLE
16957: LD_INT 0
16959: PPUSH
// begin enable ;
16960: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
16961: LD_ADDR_VAR 0 1
16965: PUSH
16966: LD_INT 22
16968: PUSH
16969: LD_INT 3
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PPUSH
16976: CALL_OW 69
16980: PUSH
16981: FOR_IN
16982: IFFALSE 17009
// if IsInArea ( i , RussianEscape ) then
16984: LD_VAR 0 1
16988: PPUSH
16989: LD_INT 22
16991: PPUSH
16992: CALL_OW 308
16996: IFFALSE 17007
// RemoveUnit ( i ) ;
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 64
17007: GO 16981
17009: POP
17010: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17011: LD_ADDR_VAR 0 1
17015: PUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 6
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PPUSH
17026: CALL_OW 69
17030: PUSH
17031: FOR_IN
17032: IFFALSE 17059
// if IsInArea ( i , RussianEscape ) then
17034: LD_VAR 0 1
17038: PPUSH
17039: LD_INT 22
17041: PPUSH
17042: CALL_OW 308
17046: IFFALSE 17057
// RemoveUnit ( i ) ;
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 64
17057: GO 17031
17059: POP
17060: POP
// end ; end_of_file
17061: PPOPN 1
17063: END
// on BuildingComplete ( building ) do var tmp , un ;
17064: LD_INT 0
17066: PPUSH
17067: PPUSH
// begin if GetSide ( building ) = 3 then
17068: LD_VAR 0 1
17072: PPUSH
17073: CALL_OW 255
17077: PUSH
17078: LD_INT 3
17080: EQUAL
17081: IFFALSE 17568
// begin if GetBType ( building ) = b_depot then
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 266
17092: PUSH
17093: LD_INT 0
17095: EQUAL
17096: IFFALSE 17164
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17098: LD_VAR 0 1
17102: PPUSH
17103: CALL_OW 274
17107: PPUSH
17108: LD_INT 1
17110: PPUSH
17111: LD_INT 5000
17113: PPUSH
17114: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: CALL_OW 274
17127: PPUSH
17128: LD_INT 2
17130: PPUSH
17131: LD_INT 5000
17133: PPUSH
17134: CALL_OW 277
// SetBName ( building , konev ) ;
17138: LD_VAR 0 1
17142: PPUSH
17143: LD_STRING konev
17145: PPUSH
17146: CALL_OW 500
// ruDepot = building ;
17150: LD_ADDR_EXP 27
17154: PUSH
17155: LD_VAR 0 1
17159: ST_TO_ADDR
// BuildRussianBase ;
17160: CALL 6183 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 266
17173: PUSH
17174: LD_INT 0
17176: EQUAL
17177: PUSH
17178: LD_VAR 0 1
17182: PPUSH
17183: CALL_OW 266
17187: PUSH
17188: LD_INT 2
17190: EQUAL
17191: OR
17192: PUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 266
17202: PUSH
17203: LD_INT 4
17205: EQUAL
17206: OR
17207: IFFALSE 17218
// ComUpgrade ( building ) ;
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 146
// if GetBType ( building ) = b_lab then
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 266
17227: PUSH
17228: LD_INT 6
17230: EQUAL
17231: IFFALSE 17282
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17233: LD_VAR 0 1
17237: PPUSH
17238: LD_INT 10
17240: PPUSH
17241: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17245: LD_VAR 0 1
17249: PPUSH
17250: LD_INT 12
17252: PPUSH
17253: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
17257: LD_INT 3
17259: PPUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: LD_INT 3
17267: PPUSH
17268: CALL 6738 0 3
// ruLab = building ;
17272: LD_ADDR_EXP 28
17276: PUSH
17277: LD_VAR 0 1
17281: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 266
17291: PUSH
17292: LD_INT 32
17294: EQUAL
17295: IFFALSE 17413
// begin uc_side = 3 ;
17297: LD_ADDR_OWVAR 20
17301: PUSH
17302: LD_INT 3
17304: ST_TO_ADDR
// uc_nation = 3 ;
17305: LD_ADDR_OWVAR 21
17309: PUSH
17310: LD_INT 3
17312: ST_TO_ADDR
// hc_gallery =  ;
17313: LD_ADDR_OWVAR 33
17317: PUSH
17318: LD_STRING 
17320: ST_TO_ADDR
// hc_name =  ;
17321: LD_ADDR_OWVAR 26
17325: PUSH
17326: LD_STRING 
17328: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17329: LD_INT 0
17331: PPUSH
17332: LD_INT 1
17334: PPUSH
17335: LD_EXP 24
17339: PPUSH
17340: LD_EXP 25
17344: PPUSH
17345: CALL_OW 12
17349: PPUSH
17350: CALL_OW 380
// un = CreateHuman ;
17354: LD_ADDR_VAR 0 3
17358: PUSH
17359: CALL_OW 44
17363: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17364: LD_VAR 0 3
17368: PPUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17378: LD_VAR 0 1
17382: PPUSH
17383: LD_INT 43
17385: PUSH
17386: LD_INT 44
17388: PUSH
17389: LD_INT 46
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: PPUSH
17400: LD_INT 3
17402: PPUSH
17403: CALL_OW 12
17407: ARRAY
17408: PPUSH
17409: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
17413: LD_VAR 0 1
17417: PPUSH
17418: CALL_OW 266
17422: PUSH
17423: LD_INT 33
17425: EQUAL
17426: IFFALSE 17463
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17428: LD_VAR 0 1
17432: PPUSH
17433: LD_INT 43
17435: PUSH
17436: LD_INT 44
17438: PUSH
17439: LD_INT 46
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 3
17452: PPUSH
17453: CALL_OW 12
17457: ARRAY
17458: PPUSH
17459: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
17463: LD_VAR 0 1
17467: PPUSH
17468: CALL_OW 266
17472: PUSH
17473: LD_INT 24
17475: EQUAL
17476: IFFALSE 17486
// russianAI = 1 ;
17478: LD_ADDR_EXP 26
17482: PUSH
17483: LD_INT 1
17485: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
17486: LD_EXP 30
17490: PUSH
17491: LD_INT 0
17493: GREATER
17494: IFFALSE 17568
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17496: LD_ADDR_EXP 30
17500: PUSH
17501: LD_EXP 30
17505: PPUSH
17506: LD_INT 1
17508: PPUSH
17509: CALL_OW 3
17513: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17514: LD_ADDR_EXP 30
17518: PUSH
17519: LD_EXP 30
17523: PPUSH
17524: LD_INT 1
17526: PPUSH
17527: CALL_OW 3
17531: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17532: LD_ADDR_EXP 30
17536: PUSH
17537: LD_EXP 30
17541: PPUSH
17542: LD_INT 1
17544: PPUSH
17545: CALL_OW 3
17549: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17550: LD_ADDR_EXP 30
17554: PUSH
17555: LD_EXP 30
17559: PPUSH
17560: LD_INT 1
17562: PPUSH
17563: CALL_OW 3
17567: ST_TO_ADDR
// end ; end ; end ;
17568: PPOPN 3
17570: END
// on UpgradeComplete ( building ) do var i ;
17571: LD_INT 0
17573: PPUSH
// begin if GetSide ( building ) = 3 then
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 255
17583: PUSH
17584: LD_INT 3
17586: EQUAL
17587: IFFALSE 17768
// begin if GetBType ( building ) = b_factory then
17589: LD_VAR 0 1
17593: PPUSH
17594: CALL_OW 266
17598: PUSH
17599: LD_INT 3
17601: EQUAL
17602: IFFALSE 17669
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 25
17621: PUSH
17622: LD_INT 3
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: PUSH
17638: FOR_IN
17639: IFFALSE 17657
// ComEnterUnit ( i , building ) ;
17641: LD_VAR 0 2
17645: PPUSH
17646: LD_VAR 0 1
17650: PPUSH
17651: CALL_OW 120
17655: GO 17638
17657: POP
17658: POP
// ruFab = building ;
17659: LD_ADDR_EXP 29
17663: PUSH
17664: LD_VAR 0 1
17668: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL_OW 266
17678: PUSH
17679: LD_INT 8
17681: EQUAL
17682: IFFALSE 17739
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17684: LD_ADDR_VAR 0 2
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: LD_INT 3
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 25
17701: PUSH
17702: LD_INT 4
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: PUSH
17718: FOR_IN
17719: IFFALSE 17737
// ComEnterUnit ( i , building ) ;
17721: LD_VAR 0 2
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 120
17735: GO 17718
17737: POP
17738: POP
// if GetBType ( building ) = b_warehouse then
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 266
17748: PUSH
17749: LD_INT 1
17751: EQUAL
17752: IFFALSE 17768
// begin ComEnterUnit ( Borodin , building ) ;
17754: LD_EXP 23
17758: PPUSH
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 120
// end ; end ; end ;
17768: PPOPN 2
17770: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 247
17780: PUSH
17781: LD_INT 2
17783: EQUAL
17784: PUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 263
17794: PUSH
17795: LD_INT 3
17797: EQUAL
17798: AND
17799: PUSH
17800: LD_EXP 39
17804: PUSH
17805: LD_INT 0
17807: EQUAL
17808: AND
17809: IFFALSE 17927
// begin varEvent1 = 1 ;
17811: LD_ADDR_EXP 39
17815: PUSH
17816: LD_INT 1
17818: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
17828: LD_INT 22
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 25
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 25
17863: PUSH
17864: LD_INT 2
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 25
17873: PUSH
17874: LD_INT 3
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 25
17883: PUSH
17884: LD_INT 4
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: PUSH
17908: LD_EXP 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: DIFF
17916: PPUSH
17917: LD_STRING DC-Sol1-1
17919: PPUSH
17920: LD_STRING DC-FSol1-1
17922: PPUSH
17923: CALL 5578 0 3
// end ; end ;
17927: PPOPN 1
17929: END
// on UnitDestroyed ( unit ) do var i ;
17930: LD_INT 0
17932: PPUSH
// begin if GetSide ( unit ) = 3 then
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 255
17942: PUSH
17943: LD_INT 3
17945: EQUAL
17946: IFFALSE 18716
// begin if GetType ( unit ) = unit_building then
17948: LD_VAR 0 1
17952: PPUSH
17953: CALL_OW 247
17957: PUSH
17958: LD_INT 3
17960: EQUAL
17961: IFFALSE 18653
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 266
17972: PUSH
17973: LD_INT 31
17975: EQUAL
17976: PUSH
17977: LD_VAR 0 1
17981: PPUSH
17982: CALL_OW 266
17986: PUSH
17987: LD_INT 32
17989: EQUAL
17990: OR
17991: PUSH
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 266
18001: PUSH
18002: LD_INT 36
18004: EQUAL
18005: OR
18006: PUSH
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 266
18016: PUSH
18017: LD_INT 0
18019: EQUAL
18020: OR
18021: PUSH
18022: LD_VAR 0 1
18026: PPUSH
18027: CALL_OW 266
18031: PUSH
18032: LD_INT 24
18034: EQUAL
18035: OR
18036: PUSH
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 266
18046: PUSH
18047: LD_INT 17
18049: EQUAL
18050: OR
18051: PUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 266
18061: PUSH
18062: LD_INT 25
18064: EQUAL
18065: OR
18066: PUSH
18067: LD_VAR 0 1
18071: PPUSH
18072: CALL_OW 266
18076: PUSH
18077: LD_INT 19
18079: EQUAL
18080: OR
18081: PUSH
18082: LD_VAR 0 1
18086: PPUSH
18087: CALL_OW 266
18091: PUSH
18092: LD_INT 20
18094: EQUAL
18095: OR
18096: PUSH
18097: LD_VAR 0 1
18101: PPUSH
18102: CALL_OW 266
18106: PUSH
18107: LD_INT 18
18109: EQUAL
18110: OR
18111: PUSH
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 266
18121: PUSH
18122: LD_INT 21
18124: EQUAL
18125: OR
18126: PUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 266
18136: PUSH
18137: LD_INT 23
18139: EQUAL
18140: OR
18141: PUSH
18142: LD_VAR 0 1
18146: PPUSH
18147: CALL_OW 266
18151: PUSH
18152: LD_INT 16
18154: EQUAL
18155: OR
18156: PUSH
18157: LD_VAR 0 1
18161: PPUSH
18162: CALL_OW 266
18166: PUSH
18167: LD_INT 6
18169: EQUAL
18170: OR
18171: PUSH
18172: LD_VAR 0 1
18176: PPUSH
18177: CALL_OW 266
18181: PUSH
18182: LD_INT 29
18184: EQUAL
18185: OR
18186: PUSH
18187: LD_VAR 0 1
18191: PPUSH
18192: CALL_OW 266
18196: PUSH
18197: LD_INT 26
18199: EQUAL
18200: OR
18201: PUSH
18202: LD_VAR 0 1
18206: PPUSH
18207: CALL_OW 266
18211: PUSH
18212: LD_INT 30
18214: EQUAL
18215: OR
18216: PUSH
18217: LD_VAR 0 1
18221: PPUSH
18222: CALL_OW 266
18226: PUSH
18227: LD_INT 28
18229: EQUAL
18230: OR
18231: PUSH
18232: LD_VAR 0 1
18236: PPUSH
18237: CALL_OW 266
18241: PUSH
18242: LD_INT 27
18244: EQUAL
18245: OR
18246: PUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 266
18256: PUSH
18257: LD_INT 33
18259: EQUAL
18260: OR
18261: PUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 266
18271: PUSH
18272: LD_INT 2
18274: EQUAL
18275: OR
18276: PUSH
18277: LD_VAR 0 1
18281: PPUSH
18282: CALL_OW 266
18286: PUSH
18287: LD_INT 4
18289: EQUAL
18290: OR
18291: IFFALSE 18377
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18293: LD_ADDR_EXP 30
18297: PUSH
18298: LD_EXP 30
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18314: LD_ADDR_EXP 30
18318: PUSH
18319: LD_EXP 30
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18335: LD_ADDR_EXP 30
18339: PUSH
18340: LD_EXP 30
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18356: LD_ADDR_EXP 30
18360: PUSH
18361: LD_EXP 30
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 266
18386: PUSH
18387: LD_INT 1
18389: EQUAL
18390: IFFALSE 18469
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
18392: LD_ADDR_EXP 30
18396: PUSH
18397: LD_EXP 30
18401: PUSH
18402: LD_INT 0
18404: ADD
18405: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18406: LD_ADDR_EXP 30
18410: PUSH
18411: LD_EXP 30
18415: PUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: CALL_OW 250
18425: ADD
18426: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18427: LD_ADDR_EXP 30
18431: PUSH
18432: LD_EXP 30
18436: PUSH
18437: LD_VAR 0 1
18441: PPUSH
18442: CALL_OW 251
18446: ADD
18447: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18448: LD_ADDR_EXP 30
18452: PUSH
18453: LD_EXP 30
18457: PUSH
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL_OW 254
18467: ADD
18468: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18469: LD_VAR 0 1
18473: PPUSH
18474: CALL_OW 266
18478: PUSH
18479: LD_INT 3
18481: EQUAL
18482: IFFALSE 18561
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18484: LD_ADDR_EXP 30
18488: PUSH
18489: LD_EXP 30
18493: PUSH
18494: LD_INT 2
18496: ADD
18497: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18498: LD_ADDR_EXP 30
18502: PUSH
18503: LD_EXP 30
18507: PUSH
18508: LD_VAR 0 1
18512: PPUSH
18513: CALL_OW 250
18517: ADD
18518: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18519: LD_ADDR_EXP 30
18523: PUSH
18524: LD_EXP 30
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 251
18538: ADD
18539: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18540: LD_ADDR_EXP 30
18544: PUSH
18545: LD_EXP 30
18549: PUSH
18550: LD_VAR 0 1
18554: PPUSH
18555: CALL_OW 254
18559: ADD
18560: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18561: LD_VAR 0 1
18565: PPUSH
18566: CALL_OW 266
18570: PUSH
18571: LD_INT 5
18573: EQUAL
18574: IFFALSE 18653
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18576: LD_ADDR_EXP 30
18580: PUSH
18581: LD_EXP 30
18585: PUSH
18586: LD_INT 4
18588: ADD
18589: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18590: LD_ADDR_EXP 30
18594: PUSH
18595: LD_EXP 30
18599: PUSH
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 250
18609: ADD
18610: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18611: LD_ADDR_EXP 30
18615: PUSH
18616: LD_EXP 30
18620: PUSH
18621: LD_VAR 0 1
18625: PPUSH
18626: CALL_OW 251
18630: ADD
18631: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18632: LD_ADDR_EXP 30
18636: PUSH
18637: LD_EXP 30
18641: PUSH
18642: LD_VAR 0 1
18646: PPUSH
18647: CALL_OW 254
18651: ADD
18652: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL_OW 247
18662: PUSH
18663: LD_INT 1
18665: EQUAL
18666: IFFALSE 18716
// begin for i in defenders_list do
18668: LD_ADDR_VAR 0 2
18672: PUSH
18673: LD_EXP 31
18677: PUSH
18678: FOR_IN
18679: IFFALSE 18714
// if i = unit then
18681: LD_VAR 0 2
18685: PUSH
18686: LD_VAR 0 1
18690: EQUAL
18691: IFFALSE 18712
// defenders_list = defenders_list diff [ unit ] ;
18693: LD_ADDR_EXP 31
18697: PUSH
18698: LD_EXP 31
18702: PUSH
18703: LD_VAR 0 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: DIFF
18711: ST_TO_ADDR
18712: GO 18678
18714: POP
18715: POP
// end ; end ; end ; end_of_file
18716: PPOPN 2
18718: END
// every 0 0$1 do
18719: GO 18721
18721: DISABLE
// begin enable ;
18722: ENABLE
// if escapeAvalaible = 0 then
18723: LD_EXP 35
18727: PUSH
18728: LD_INT 0
18730: EQUAL
18731: IFFALSE 18743
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18733: LD_INT 3
18735: PPUSH
18736: LD_INT 6
18738: PPUSH
18739: CALL 6823 0 2
// if escapeAvalaible = 0 then
18743: LD_EXP 35
18747: PUSH
18748: LD_INT 0
18750: EQUAL
18751: IFFALSE 18763
// DefenseBase ( 1 , RussianBaseTerritory ) ;
18753: LD_INT 1
18755: PPUSH
18756: LD_INT 24
18758: PPUSH
18759: CALL 7570 0 2
// if russianAI = 1 then
18763: LD_EXP 26
18767: PUSH
18768: LD_INT 1
18770: EQUAL
18771: IFFALSE 18834
// begin RepairBuilding ( 3 , ruDepot ) ;
18773: LD_INT 3
18775: PPUSH
18776: LD_EXP 27
18780: PPUSH
18781: CALL 7870 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
18785: LD_INT 3
18787: PPUSH
18788: LD_INT 7
18790: PPUSH
18791: LD_INT 6
18793: PPUSH
18794: LD_EXP 28
18798: PPUSH
18799: CALL 8335 0 4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18803: LD_INT 3
18805: PPUSH
18806: LD_EXP 30
18810: PPUSH
18811: CALL 8129 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
18815: LD_INT 6
18817: PPUSH
18818: LD_INT 8
18820: PPUSH
18821: LD_INT 93
18823: PPUSH
18824: LD_INT 93
18826: PPUSH
18827: LD_INT 1
18829: PPUSH
18830: CALL 8601 0 5
// end ; if SikorskyArrive = 1 then
18834: LD_EXP 17
18838: PUSH
18839: LD_INT 1
18841: EQUAL
18842: IFFALSE 18863
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
18844: LD_INT 3
18846: PPUSH
18847: LD_INT 10
18849: PPUSH
18850: LD_INT 53
18852: PPUSH
18853: LD_INT 59
18855: PPUSH
18856: LD_INT 3
18858: PPUSH
18859: CALL 8601 0 5
// end ;
18863: END
// every 0 0$1 trigger russianAI = 1 do var i ;
18864: LD_EXP 26
18868: PUSH
18869: LD_INT 1
18871: EQUAL
18872: IFFALSE 19148
18874: GO 18876
18876: DISABLE
18877: LD_INT 0
18879: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
18880: LD_ADDR_VAR 0 1
18884: PUSH
18885: LD_INT 22
18887: PUSH
18888: LD_INT 3
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: LD_INT 3
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 30
18907: PUSH
18908: LD_INT 32
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 3
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 35
18923: PUSH
18924: LD_INT 43
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 35
18933: PUSH
18934: LD_INT 44
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 35
18943: PUSH
18944: LD_INT 46
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: PPUSH
18967: CALL_OW 69
18971: PUSH
18972: FOR_IN
18973: IFFALSE 19012
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: LD_INT 43
18982: PUSH
18983: LD_INT 44
18985: PUSH
18986: LD_INT 46
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PPUSH
18997: LD_INT 3
18999: PPUSH
19000: CALL_OW 12
19004: ARRAY
19005: PPUSH
19006: CALL_OW 431
19010: GO 18972
19012: POP
19013: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
19014: LD_ADDR_VAR 0 1
19018: PUSH
19019: LD_INT 22
19021: PUSH
19022: LD_INT 3
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 21
19031: PUSH
19032: LD_INT 3
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 30
19041: PUSH
19042: LD_INT 33
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 3
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 35
19057: PUSH
19058: LD_INT 43
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 35
19067: PUSH
19068: LD_INT 44
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 35
19077: PUSH
19078: LD_INT 46
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: PUSH
19106: FOR_IN
19107: IFFALSE 19146
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19109: LD_VAR 0 1
19113: PPUSH
19114: LD_INT 43
19116: PUSH
19117: LD_INT 44
19119: PUSH
19120: LD_INT 46
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PPUSH
19131: LD_INT 3
19133: PPUSH
19134: CALL_OW 12
19138: ARRAY
19139: PPUSH
19140: CALL_OW 431
19144: GO 19106
19146: POP
19147: POP
// end ;
19148: PPOPN 1
19150: END
// every 0 0$1 trigger SikorskyAI = 1 do
19151: LD_EXP 19
19155: PUSH
19156: LD_INT 1
19158: EQUAL
19159: IFFALSE 19197
19161: GO 19163
19163: DISABLE
// begin enable ;
19164: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
19165: LD_INT 4
19167: PPUSH
19168: LD_INT 10
19170: PPUSH
19171: LD_INT 93
19173: PPUSH
19174: LD_INT 93
19176: PPUSH
19177: LD_INT 3
19179: PPUSH
19180: CALL 8601 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
19184: LD_INT 4
19186: PPUSH
19187: LD_INT 11
19189: PPUSH
19190: LD_INT 3
19192: PPUSH
19193: CALL 13982 0 3
// end ;
19197: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19198: LD_EXP 26
19202: PUSH
19203: LD_INT 1
19205: EQUAL
19206: PUSH
19207: LD_EXP 29
19211: PPUSH
19212: CALL_OW 302
19216: AND
19217: PUSH
19218: LD_EXP 29
19222: PPUSH
19223: CALL_OW 255
19227: PUSH
19228: LD_INT 3
19230: EQUAL
19231: AND
19232: PUSH
19233: LD_INT 22
19235: PUSH
19236: LD_INT 3
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 21
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 33
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: PPUSH
19268: CALL_OW 69
19272: PUSH
19273: LD_INT 0
19275: EQUAL
19276: AND
19277: IFFALSE 19456
19279: GO 19281
19281: DISABLE
// begin enable ;
19282: ENABLE
// if Difficulty = 1 then
19283: LD_OWVAR 67
19287: PUSH
19288: LD_INT 1
19290: EQUAL
19291: IFFALSE 19342
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
19293: LD_INT 3
19295: PPUSH
19296: LD_EXP 29
19300: PPUSH
19301: LD_INT 5
19303: PPUSH
19304: LD_INT 8
19306: PPUSH
19307: CALL_OW 12
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: LD_INT 43
19317: PUSH
19318: LD_INT 44
19320: PUSH
19321: LD_INT 46
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: LD_INT 3
19334: PPUSH
19335: LD_INT 24
19337: PPUSH
19338: CALL 9436 0 8
// if Difficulty = 2 then
19342: LD_OWVAR 67
19346: PUSH
19347: LD_INT 2
19349: EQUAL
19350: IFFALSE 19401
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
19352: LD_INT 3
19354: PPUSH
19355: LD_EXP 29
19359: PPUSH
19360: LD_INT 6
19362: PPUSH
19363: LD_INT 8
19365: PPUSH
19366: CALL_OW 12
19370: PPUSH
19371: LD_INT 1
19373: PPUSH
19374: LD_INT 44
19376: PUSH
19377: LD_INT 44
19379: PUSH
19380: LD_INT 46
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: LIST
19387: PPUSH
19388: LD_INT 1
19390: PPUSH
19391: LD_INT 3
19393: PPUSH
19394: LD_INT 24
19396: PPUSH
19397: CALL 9436 0 8
// if Difficulty = 3 then
19401: LD_OWVAR 67
19405: PUSH
19406: LD_INT 3
19408: EQUAL
19409: IFFALSE 19456
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
19411: LD_INT 3
19413: PPUSH
19414: LD_EXP 29
19418: PPUSH
19419: LD_INT 7
19421: PPUSH
19422: LD_INT 8
19424: PPUSH
19425: CALL_OW 12
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: LD_INT 44
19435: PUSH
19436: LD_INT 46
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: LD_INT 1
19445: PPUSH
19446: LD_INT 3
19448: PPUSH
19449: LD_INT 24
19451: PPUSH
19452: CALL 9436 0 8
// end ; end_of_file
19456: END
// every 2 2$1 trigger firstAttack = 1 do
19457: LD_EXP 32
19461: PUSH
19462: LD_INT 1
19464: EQUAL
19465: IFFALSE 19571
19467: GO 19469
19469: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19470: LD_INT 6
19472: PPUSH
19473: LD_INT 3
19475: PPUSH
19476: LD_INT 5
19478: PPUSH
19479: LD_INT 6
19481: PPUSH
19482: CALL_OW 12
19486: PUSH
19487: LD_INT 5
19489: PPUSH
19490: LD_INT 6
19492: PPUSH
19493: CALL_OW 12
19497: PUSH
19498: LD_INT 5
19500: PPUSH
19501: LD_INT 6
19503: PPUSH
19504: CALL_OW 12
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: PUSH
19514: LD_OWVAR 67
19518: ARRAY
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: LD_INT 0
19525: PPUSH
19526: LD_INT 0
19528: PPUSH
19529: LD_INT 0
19531: PPUSH
19532: LD_EXP 24
19536: PPUSH
19537: LD_EXP 25
19541: PPUSH
19542: CALL_OW 12
19546: PPUSH
19547: LD_INT 16
19549: PPUSH
19550: LD_INT 7
19552: PPUSH
19553: LD_INT 1
19555: PPUSH
19556: LD_INT 1
19558: PPUSH
19559: LD_INT 3
19561: PPUSH
19562: CALL_OW 12
19566: PPUSH
19567: CALL 10000 0 12
19571: END
// every 2 2$1 trigger firstAttack = 1 do
19572: LD_EXP 32
19576: PUSH
19577: LD_INT 1
19579: EQUAL
19580: IFFALSE 19680
19582: GO 19584
19584: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19585: LD_INT 16
19587: PPUSH
19588: LD_INT 6
19590: PPUSH
19591: LD_INT 5
19593: PPUSH
19594: LD_INT 8
19596: PPUSH
19597: CALL_OW 12
19601: PUSH
19602: LD_INT 6
19604: PPUSH
19605: LD_INT 9
19607: PPUSH
19608: CALL_OW 12
19612: PUSH
19613: LD_INT 7
19615: PPUSH
19616: LD_INT 9
19618: PPUSH
19619: CALL_OW 12
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: LD_OWVAR 67
19633: ARRAY
19634: PPUSH
19635: LD_EXP 24
19639: PPUSH
19640: LD_EXP 25
19644: PPUSH
19645: CALL_OW 12
19649: PPUSH
19650: LD_INT 3
19652: PPUSH
19653: LD_INT 1
19655: PPUSH
19656: LD_INT 3
19658: PPUSH
19659: LD_INT 44
19661: PUSH
19662: LD_INT 46
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: EMPTY
19670: PPUSH
19671: EMPTY
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL 12293 0 11
19680: END
// every 3 3$1 trigger firstAttack = 1 do
19681: LD_EXP 32
19685: PUSH
19686: LD_INT 1
19688: EQUAL
19689: IFFALSE 19795
19691: GO 19693
19693: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19694: LD_INT 6
19696: PPUSH
19697: LD_INT 3
19699: PPUSH
19700: LD_INT 5
19702: PPUSH
19703: LD_INT 6
19705: PPUSH
19706: CALL_OW 12
19710: PUSH
19711: LD_INT 5
19713: PPUSH
19714: LD_INT 6
19716: PPUSH
19717: CALL_OW 12
19721: PUSH
19722: LD_INT 5
19724: PPUSH
19725: LD_INT 6
19727: PPUSH
19728: CALL_OW 12
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: PUSH
19738: LD_OWVAR 67
19742: ARRAY
19743: PPUSH
19744: LD_INT 0
19746: PPUSH
19747: LD_INT 0
19749: PPUSH
19750: LD_INT 0
19752: PPUSH
19753: LD_INT 0
19755: PPUSH
19756: LD_EXP 24
19760: PPUSH
19761: LD_EXP 25
19765: PPUSH
19766: CALL_OW 12
19770: PPUSH
19771: LD_INT 16
19773: PPUSH
19774: LD_INT 7
19776: PPUSH
19777: LD_INT 1
19779: PPUSH
19780: LD_INT 1
19782: PPUSH
19783: LD_INT 3
19785: PPUSH
19786: CALL_OW 12
19790: PPUSH
19791: CALL 10000 0 12
19795: END
// every 3 3$1 trigger firstAttack = 1 do
19796: LD_EXP 32
19800: PUSH
19801: LD_INT 1
19803: EQUAL
19804: IFFALSE 19912
19806: GO 19808
19808: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19809: LD_INT 16
19811: PPUSH
19812: LD_INT 6
19814: PPUSH
19815: LD_INT 5
19817: PPUSH
19818: LD_INT 8
19820: PPUSH
19821: CALL_OW 12
19825: PUSH
19826: LD_INT 6
19828: PPUSH
19829: LD_INT 9
19831: PPUSH
19832: CALL_OW 12
19836: PUSH
19837: LD_INT 7
19839: PPUSH
19840: LD_INT 9
19842: PPUSH
19843: CALL_OW 12
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: LD_OWVAR 67
19857: ARRAY
19858: PPUSH
19859: LD_EXP 24
19863: PPUSH
19864: LD_EXP 25
19868: PPUSH
19869: CALL_OW 12
19873: PPUSH
19874: LD_INT 3
19876: PPUSH
19877: LD_INT 1
19879: PPUSH
19880: LD_INT 3
19882: PPUSH
19883: LD_INT 42
19885: PUSH
19886: LD_INT 43
19888: PUSH
19889: LD_INT 44
19891: PUSH
19892: LD_INT 46
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: PPUSH
19901: EMPTY
19902: PPUSH
19903: EMPTY
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: CALL 12293 0 11
19912: END
// every 7 7$1 trigger firstAttack = 1 and JMMArrive = 0 do
19913: LD_EXP 32
19917: PUSH
19918: LD_INT 1
19920: EQUAL
19921: PUSH
19922: LD_EXP 37
19926: PUSH
19927: LD_INT 0
19929: EQUAL
19930: AND
19931: IFFALSE 20037
19933: GO 19935
19935: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19936: LD_INT 6
19938: PPUSH
19939: LD_INT 3
19941: PPUSH
19942: LD_INT 5
19944: PPUSH
19945: LD_INT 6
19947: PPUSH
19948: CALL_OW 12
19952: PUSH
19953: LD_INT 5
19955: PPUSH
19956: LD_INT 6
19958: PPUSH
19959: CALL_OW 12
19963: PUSH
19964: LD_INT 5
19966: PPUSH
19967: LD_INT 6
19969: PPUSH
19970: CALL_OW 12
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: LD_OWVAR 67
19984: ARRAY
19985: PPUSH
19986: LD_INT 0
19988: PPUSH
19989: LD_INT 0
19991: PPUSH
19992: LD_INT 0
19994: PPUSH
19995: LD_INT 0
19997: PPUSH
19998: LD_EXP 24
20002: PPUSH
20003: LD_EXP 25
20007: PPUSH
20008: CALL_OW 12
20012: PPUSH
20013: LD_INT 16
20015: PPUSH
20016: LD_INT 7
20018: PPUSH
20019: LD_INT 1
20021: PPUSH
20022: LD_INT 1
20024: PPUSH
20025: LD_INT 3
20027: PPUSH
20028: CALL_OW 12
20032: PPUSH
20033: CALL 10000 0 12
20037: END
// every 7 7$1 trigger firstAttack = 1 and JMMArrive = 0 do
20038: LD_EXP 32
20042: PUSH
20043: LD_INT 1
20045: EQUAL
20046: PUSH
20047: LD_EXP 37
20051: PUSH
20052: LD_INT 0
20054: EQUAL
20055: AND
20056: IFFALSE 20160
20058: GO 20060
20060: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20061: LD_INT 16
20063: PPUSH
20064: LD_INT 6
20066: PPUSH
20067: LD_INT 5
20069: PPUSH
20070: LD_INT 8
20072: PPUSH
20073: CALL_OW 12
20077: PUSH
20078: LD_INT 6
20080: PPUSH
20081: LD_INT 9
20083: PPUSH
20084: CALL_OW 12
20088: PUSH
20089: LD_INT 7
20091: PPUSH
20092: LD_INT 9
20094: PPUSH
20095: CALL_OW 12
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: LIST
20104: PUSH
20105: LD_OWVAR 67
20109: ARRAY
20110: PPUSH
20111: LD_EXP 24
20115: PPUSH
20116: LD_EXP 25
20120: PPUSH
20121: CALL_OW 12
20125: PPUSH
20126: LD_INT 3
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: LD_INT 3
20134: PPUSH
20135: LD_INT 43
20137: PUSH
20138: LD_INT 44
20140: PUSH
20141: LD_INT 46
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: PPUSH
20149: EMPTY
20150: PPUSH
20151: EMPTY
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL 12293 0 11
20160: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
20161: LD_EXP 32
20165: PUSH
20166: LD_INT 1
20168: EQUAL
20169: PUSH
20170: LD_EXP 37
20174: PUSH
20175: LD_INT 0
20177: EQUAL
20178: AND
20179: IFFALSE 20279
20181: GO 20183
20183: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20184: LD_INT 16
20186: PPUSH
20187: LD_INT 6
20189: PPUSH
20190: LD_INT 5
20192: PPUSH
20193: LD_INT 8
20195: PPUSH
20196: CALL_OW 12
20200: PUSH
20201: LD_INT 6
20203: PPUSH
20204: LD_INT 9
20206: PPUSH
20207: CALL_OW 12
20211: PUSH
20212: LD_INT 7
20214: PPUSH
20215: LD_INT 9
20217: PPUSH
20218: CALL_OW 12
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: PUSH
20228: LD_OWVAR 67
20232: ARRAY
20233: PPUSH
20234: LD_EXP 24
20238: PPUSH
20239: LD_EXP 25
20243: PPUSH
20244: CALL_OW 12
20248: PPUSH
20249: LD_INT 3
20251: PPUSH
20252: LD_INT 1
20254: PPUSH
20255: LD_INT 3
20257: PPUSH
20258: LD_INT 44
20260: PUSH
20261: LD_INT 46
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PPUSH
20268: EMPTY
20269: PPUSH
20270: EMPTY
20271: PPUSH
20272: LD_INT 1
20274: PPUSH
20275: CALL 12293 0 11
20279: END
// every 1 1$1 trigger secondAttack = 1 do
20280: LD_EXP 33
20284: PUSH
20285: LD_INT 1
20287: EQUAL
20288: IFFALSE 20394
20290: GO 20292
20292: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20293: LD_INT 6
20295: PPUSH
20296: LD_INT 3
20298: PPUSH
20299: LD_INT 4
20301: PPUSH
20302: LD_INT 7
20304: PPUSH
20305: CALL_OW 12
20309: PUSH
20310: LD_INT 6
20312: PPUSH
20313: LD_INT 7
20315: PPUSH
20316: CALL_OW 12
20320: PUSH
20321: LD_INT 6
20323: PPUSH
20324: LD_INT 10
20326: PPUSH
20327: CALL_OW 12
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: LIST
20336: PUSH
20337: LD_OWVAR 67
20341: ARRAY
20342: PPUSH
20343: LD_INT 0
20345: PPUSH
20346: LD_INT 0
20348: PPUSH
20349: LD_INT 0
20351: PPUSH
20352: LD_INT 0
20354: PPUSH
20355: LD_EXP 24
20359: PPUSH
20360: LD_EXP 25
20364: PPUSH
20365: CALL_OW 12
20369: PPUSH
20370: LD_INT 16
20372: PPUSH
20373: LD_INT 7
20375: PPUSH
20376: LD_INT 1
20378: PPUSH
20379: LD_INT 1
20381: PPUSH
20382: LD_INT 3
20384: PPUSH
20385: CALL_OW 12
20389: PPUSH
20390: CALL 10000 0 12
20394: END
// every 1 1$1 trigger secondAttack = 1 do
20395: LD_EXP 33
20399: PUSH
20400: LD_INT 1
20402: EQUAL
20403: IFFALSE 20507
20405: GO 20407
20407: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20408: LD_INT 16
20410: PPUSH
20411: LD_INT 6
20413: PPUSH
20414: LD_INT 5
20416: PPUSH
20417: LD_INT 8
20419: PPUSH
20420: CALL_OW 12
20424: PUSH
20425: LD_INT 6
20427: PPUSH
20428: LD_INT 9
20430: PPUSH
20431: CALL_OW 12
20435: PUSH
20436: LD_INT 7
20438: PPUSH
20439: LD_INT 9
20441: PPUSH
20442: CALL_OW 12
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: PUSH
20452: LD_OWVAR 67
20456: ARRAY
20457: PPUSH
20458: LD_EXP 24
20462: PPUSH
20463: LD_EXP 25
20467: PPUSH
20468: CALL_OW 12
20472: PPUSH
20473: LD_INT 3
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: LD_INT 3
20481: PPUSH
20482: LD_INT 43
20484: PUSH
20485: LD_INT 44
20487: PUSH
20488: LD_INT 46
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: PPUSH
20496: EMPTY
20497: PPUSH
20498: EMPTY
20499: PPUSH
20500: LD_INT 1
20502: PPUSH
20503: CALL 12293 0 11
20507: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20508: LD_EXP 17
20512: PUSH
20513: LD_INT 0
20515: EQUAL
20516: IFFALSE 20622
20518: GO 20520
20520: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20521: LD_INT 6
20523: PPUSH
20524: LD_INT 3
20526: PPUSH
20527: LD_INT 8
20529: PPUSH
20530: LD_INT 9
20532: PPUSH
20533: CALL_OW 12
20537: PUSH
20538: LD_INT 7
20540: PPUSH
20541: LD_INT 10
20543: PPUSH
20544: CALL_OW 12
20548: PUSH
20549: LD_INT 8
20551: PPUSH
20552: LD_INT 10
20554: PPUSH
20555: CALL_OW 12
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: PUSH
20565: LD_OWVAR 67
20569: ARRAY
20570: PPUSH
20571: LD_INT 0
20573: PPUSH
20574: LD_INT 0
20576: PPUSH
20577: LD_INT 0
20579: PPUSH
20580: LD_INT 0
20582: PPUSH
20583: LD_EXP 24
20587: PPUSH
20588: LD_EXP 25
20592: PPUSH
20593: CALL_OW 12
20597: PPUSH
20598: LD_INT 16
20600: PPUSH
20601: LD_INT 7
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: LD_INT 1
20609: PPUSH
20610: LD_INT 3
20612: PPUSH
20613: CALL_OW 12
20617: PPUSH
20618: CALL 10000 0 12
20622: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20623: LD_EXP 17
20627: PUSH
20628: LD_INT 0
20630: EQUAL
20631: IFFALSE 20731
20633: GO 20635
20635: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20636: LD_INT 16
20638: PPUSH
20639: LD_INT 6
20641: PPUSH
20642: LD_INT 5
20644: PPUSH
20645: LD_INT 8
20647: PPUSH
20648: CALL_OW 12
20652: PUSH
20653: LD_INT 6
20655: PPUSH
20656: LD_INT 9
20658: PPUSH
20659: CALL_OW 12
20663: PUSH
20664: LD_INT 7
20666: PPUSH
20667: LD_INT 9
20669: PPUSH
20670: CALL_OW 12
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: PUSH
20680: LD_OWVAR 67
20684: ARRAY
20685: PPUSH
20686: LD_EXP 24
20690: PPUSH
20691: LD_EXP 25
20695: PPUSH
20696: CALL_OW 12
20700: PPUSH
20701: LD_INT 3
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: LD_INT 3
20709: PPUSH
20710: LD_INT 44
20712: PUSH
20713: LD_INT 46
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PPUSH
20720: EMPTY
20721: PPUSH
20722: EMPTY
20723: PPUSH
20724: LD_INT 1
20726: PPUSH
20727: CALL 12293 0 11
20731: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20732: LD_EXP 17
20736: PUSH
20737: LD_INT 0
20739: EQUAL
20740: IFFALSE 20846
20742: GO 20744
20744: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20745: LD_INT 6
20747: PPUSH
20748: LD_INT 3
20750: PPUSH
20751: LD_INT 8
20753: PPUSH
20754: LD_INT 9
20756: PPUSH
20757: CALL_OW 12
20761: PUSH
20762: LD_INT 7
20764: PPUSH
20765: LD_INT 10
20767: PPUSH
20768: CALL_OW 12
20772: PUSH
20773: LD_INT 8
20775: PPUSH
20776: LD_INT 10
20778: PPUSH
20779: CALL_OW 12
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: PUSH
20789: LD_OWVAR 67
20793: ARRAY
20794: PPUSH
20795: LD_INT 0
20797: PPUSH
20798: LD_INT 0
20800: PPUSH
20801: LD_INT 0
20803: PPUSH
20804: LD_INT 0
20806: PPUSH
20807: LD_EXP 24
20811: PPUSH
20812: LD_EXP 25
20816: PPUSH
20817: CALL_OW 12
20821: PPUSH
20822: LD_INT 16
20824: PPUSH
20825: LD_INT 7
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: LD_INT 3
20836: PPUSH
20837: CALL_OW 12
20841: PPUSH
20842: CALL 10000 0 12
20846: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20847: LD_EXP 17
20851: PUSH
20852: LD_INT 0
20854: EQUAL
20855: IFFALSE 20955
20857: GO 20859
20859: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20860: LD_INT 16
20862: PPUSH
20863: LD_INT 6
20865: PPUSH
20866: LD_INT 5
20868: PPUSH
20869: LD_INT 8
20871: PPUSH
20872: CALL_OW 12
20876: PUSH
20877: LD_INT 6
20879: PPUSH
20880: LD_INT 9
20882: PPUSH
20883: CALL_OW 12
20887: PUSH
20888: LD_INT 7
20890: PPUSH
20891: LD_INT 9
20893: PPUSH
20894: CALL_OW 12
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: PUSH
20904: LD_OWVAR 67
20908: ARRAY
20909: PPUSH
20910: LD_EXP 24
20914: PPUSH
20915: LD_EXP 25
20919: PPUSH
20920: CALL_OW 12
20924: PPUSH
20925: LD_INT 3
20927: PPUSH
20928: LD_INT 1
20930: PPUSH
20931: LD_INT 3
20933: PPUSH
20934: LD_INT 44
20936: PUSH
20937: LD_INT 46
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PPUSH
20944: EMPTY
20945: PPUSH
20946: EMPTY
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: CALL 12293 0 11
20955: END
// every 35 35$0 trigger SikorskyArrive = 0 do
20956: LD_EXP 17
20960: PUSH
20961: LD_INT 0
20963: EQUAL
20964: IFFALSE 21070
20966: GO 20968
20968: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20969: LD_INT 6
20971: PPUSH
20972: LD_INT 3
20974: PPUSH
20975: LD_INT 8
20977: PPUSH
20978: LD_INT 9
20980: PPUSH
20981: CALL_OW 12
20985: PUSH
20986: LD_INT 7
20988: PPUSH
20989: LD_INT 10
20991: PPUSH
20992: CALL_OW 12
20996: PUSH
20997: LD_INT 8
20999: PPUSH
21000: LD_INT 10
21002: PPUSH
21003: CALL_OW 12
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: PUSH
21013: LD_OWVAR 67
21017: ARRAY
21018: PPUSH
21019: LD_INT 0
21021: PPUSH
21022: LD_INT 0
21024: PPUSH
21025: LD_INT 0
21027: PPUSH
21028: LD_INT 0
21030: PPUSH
21031: LD_EXP 24
21035: PPUSH
21036: LD_EXP 25
21040: PPUSH
21041: CALL_OW 12
21045: PPUSH
21046: LD_INT 16
21048: PPUSH
21049: LD_INT 7
21051: PPUSH
21052: LD_INT 1
21054: PPUSH
21055: LD_INT 1
21057: PPUSH
21058: LD_INT 3
21060: PPUSH
21061: CALL_OW 12
21065: PPUSH
21066: CALL 10000 0 12
21070: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21071: LD_EXP 17
21075: PUSH
21076: LD_INT 0
21078: EQUAL
21079: IFFALSE 21179
21081: GO 21083
21083: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
21084: LD_INT 16
21086: PPUSH
21087: LD_INT 6
21089: PPUSH
21090: LD_INT 5
21092: PPUSH
21093: LD_INT 8
21095: PPUSH
21096: CALL_OW 12
21100: PUSH
21101: LD_INT 6
21103: PPUSH
21104: LD_INT 9
21106: PPUSH
21107: CALL_OW 12
21111: PUSH
21112: LD_INT 7
21114: PPUSH
21115: LD_INT 9
21117: PPUSH
21118: CALL_OW 12
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_OWVAR 67
21132: ARRAY
21133: PPUSH
21134: LD_EXP 24
21138: PPUSH
21139: LD_EXP 25
21143: PPUSH
21144: CALL_OW 12
21148: PPUSH
21149: LD_INT 3
21151: PPUSH
21152: LD_INT 1
21154: PPUSH
21155: LD_INT 3
21157: PPUSH
21158: LD_INT 44
21160: PUSH
21161: LD_INT 46
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PPUSH
21168: EMPTY
21169: PPUSH
21170: EMPTY
21171: PPUSH
21172: LD_INT 1
21174: PPUSH
21175: CALL 12293 0 11
21179: END
// every 0 0$1 trigger timerStatus = 1 do
21180: LD_EXP 34
21184: PUSH
21185: LD_INT 1
21187: EQUAL
21188: IFFALSE 21225
21190: GO 21192
21192: DISABLE
// begin enable ;
21193: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
21194: LD_ADDR_OWVAR 47
21198: PUSH
21199: LD_STRING #Am08-1
21201: PUSH
21202: LD_EXP 18
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
21211: LD_ADDR_EXP 18
21215: PUSH
21216: LD_EXP 18
21220: PUSH
21221: LD_INT 35
21223: MINUS
21224: ST_TO_ADDR
// end ; end_of_file
21225: END
// every 1 1$0 do
21226: GO 21228
21228: DISABLE
// begin if supply <= 13 and supply > 7 then
21229: LD_EXP 38
21233: PUSH
21234: LD_INT 13
21236: LESSEQUAL
21237: PUSH
21238: LD_EXP 38
21242: PUSH
21243: LD_INT 7
21245: GREATER
21246: AND
21247: IFFALSE 21270
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
21249: LD_INT 3
21251: PPUSH
21252: LD_INT 5
21254: PPUSH
21255: CALL_OW 12
21259: PPUSH
21260: LD_INT 5
21262: PPUSH
21263: LD_INT 1
21265: PPUSH
21266: CALL_OW 55
// if supply <= 7 and supply > 4 then
21270: LD_EXP 38
21274: PUSH
21275: LD_INT 7
21277: LESSEQUAL
21278: PUSH
21279: LD_EXP 38
21283: PUSH
21284: LD_INT 4
21286: GREATER
21287: AND
21288: IFFALSE 21311
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
21290: LD_INT 3
21292: PPUSH
21293: LD_INT 5
21295: PPUSH
21296: CALL_OW 12
21300: PPUSH
21301: LD_INT 20
21303: PPUSH
21304: LD_INT 1
21306: PPUSH
21307: CALL_OW 55
// if supply <= 4 and supply > 0 then
21311: LD_EXP 38
21315: PUSH
21316: LD_INT 4
21318: LESSEQUAL
21319: PUSH
21320: LD_EXP 38
21324: PUSH
21325: LD_INT 0
21327: GREATER
21328: AND
21329: IFFALSE 21352
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
21331: LD_INT 3
21333: PPUSH
21334: LD_INT 5
21336: PPUSH
21337: CALL_OW 12
21341: PPUSH
21342: LD_INT 21
21344: PPUSH
21345: LD_INT 1
21347: PPUSH
21348: CALL_OW 55
// if supply > 0 then
21352: LD_EXP 38
21356: PUSH
21357: LD_INT 0
21359: GREATER
21360: IFFALSE 21377
// begin supply = supply - 1 ;
21362: LD_ADDR_EXP 38
21366: PUSH
21367: LD_EXP 38
21371: PUSH
21372: LD_INT 1
21374: MINUS
21375: ST_TO_ADDR
// enable ;
21376: ENABLE
// end ; end ; end_of_file
21377: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
21378: LD_EXP 37
21382: PUSH
21383: LD_INT 1
21385: EQUAL
21386: PUSH
21387: LD_EXP 1
21391: PPUSH
21392: CALL_OW 301
21396: AND
21397: IFFALSE 21409
21399: GO 21401
21401: DISABLE
// YouLost ( JMM ) ;
21402: LD_STRING JMM
21404: PPUSH
21405: CALL_OW 104
21409: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
21410: LD_EXP 17
21414: PUSH
21415: LD_INT 1
21417: EQUAL
21418: PUSH
21419: LD_EXP 15
21423: PPUSH
21424: CALL_OW 301
21428: AND
21429: IFFALSE 21461
21431: GO 21433
21433: DISABLE
// begin DialogueOn ;
21434: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
21438: LD_EXP 22
21442: PPUSH
21443: LD_STRING D8a-Pow-1
21445: PPUSH
21446: CALL_OW 94
// DialogueOff ;
21450: CALL_OW 7
// YouLost ( Dismissed ) ;
21454: LD_STRING Dismissed
21456: PPUSH
21457: CALL_OW 104
// end ;
21461: END
// every 0 0$1 trigger IsDead ( amDepot ) do
21462: LD_EXP 36
21466: PPUSH
21467: CALL_OW 301
21471: IFFALSE 21483
21473: GO 21475
21475: DISABLE
// YouLost ( Destroyed ) ; end_of_file
21476: LD_STRING Destroyed
21478: PPUSH
21479: CALL_OW 104
21483: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
21484: LD_EXP 23
21488: PPUSH
21489: CALL_OW 301
21493: IFFALSE 21838
21495: GO 21497
21497: DISABLE
21498: LD_INT 0
21500: PPUSH
// begin russianAI = 0 ;
21501: LD_ADDR_EXP 26
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// escapeAvalaible = 1 ;
21509: LD_ADDR_EXP 35
21513: PUSH
21514: LD_INT 1
21516: ST_TO_ADDR
// InGameOn ;
21517: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
21521: LD_INT 3
21523: PPUSH
21524: LD_INT 1
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_INT 0
21532: PPUSH
21533: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
21537: LD_INT 6
21539: PPUSH
21540: LD_INT 1
21542: PPUSH
21543: LD_INT 1
21545: PPUSH
21546: LD_INT 0
21548: PPUSH
21549: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
21553: LD_INT 3
21555: PPUSH
21556: LD_INT 1
21558: PPUSH
21559: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
21563: LD_INT 97
21565: PPUSH
21566: LD_INT 91
21568: PPUSH
21569: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21573: LD_INT 22
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PPUSH
21597: CALL_OW 69
21601: PPUSH
21602: CALL_OW 121
// wait ( 0 0$01 ) ;
21606: LD_INT 35
21608: PPUSH
21609: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21613: LD_INT 22
21615: PUSH
21616: LD_INT 3
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 21
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 69
21641: PPUSH
21642: LD_INT 124
21644: PPUSH
21645: LD_INT 98
21647: PPUSH
21648: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21652: LD_INT 22
21654: PUSH
21655: LD_INT 6
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 21
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PPUSH
21676: CALL_OW 69
21680: PPUSH
21681: CALL_OW 121
// wait ( 0 0$01 ) ;
21685: LD_INT 35
21687: PPUSH
21688: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21692: LD_INT 22
21694: PUSH
21695: LD_INT 6
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 21
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: PPUSH
21721: LD_INT 124
21723: PPUSH
21724: LD_INT 98
21726: PPUSH
21727: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21731: LD_INT 22
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 21
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PPUSH
21755: CALL_OW 69
21759: PPUSH
21760: LD_INT 124
21762: PPUSH
21763: LD_INT 98
21765: PPUSH
21766: CALL_OW 114
// wait ( 0 0$4 ) ;
21770: LD_INT 140
21772: PPUSH
21773: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
21777: LD_INT 124
21779: PPUSH
21780: LD_INT 98
21782: PPUSH
21783: CALL_OW 84
// if SikorskyStatus = 1 then
21787: LD_EXP 20
21791: PUSH
21792: LD_INT 1
21794: EQUAL
21795: IFFALSE 21809
// begin Say ( Sikorski , D9-Sik-1 ) ;
21797: LD_EXP 15
21801: PPUSH
21802: LD_STRING D9-Sik-1
21804: PPUSH
21805: CALL_OW 88
// end ; if SikorskyStatus = 2 then
21809: LD_EXP 20
21813: PUSH
21814: LD_INT 2
21816: EQUAL
21817: IFFALSE 21838
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
21819: LD_EXP 22
21823: PPUSH
21824: LD_STRING D8b-Pow-1
21826: PPUSH
21827: CALL_OW 94
// YouLost ( Dismissed ) ;
21831: LD_STRING Dismissed
21833: PPUSH
21834: CALL_OW 104
// end ; end ;
21838: PPOPN 1
21840: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
21841: LD_INT 23
21843: PUSH
21844: LD_INT 3
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 21
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 24
21863: PUSH
21864: LD_INT 250
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: PPUSH
21876: CALL_OW 69
21880: PUSH
21881: LD_INT 0
21883: EQUAL
21884: IFFALSE 21893
21886: GO 21888
21888: DISABLE
// FinishMission ;
21889: CALL 21894 0 0
21893: END
// export function FinishMission ; var tmp ; begin
21894: LD_INT 0
21896: PPUSH
21897: PPUSH
// AddMedal ( med1 , 1 ) ;
21898: LD_STRING med1
21900: PPUSH
21901: LD_INT 1
21903: PPUSH
21904: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
21908: LD_STRING med2
21910: PPUSH
21911: LD_INT 1
21913: PPUSH
21914: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
21918: LD_STRING perfect
21920: PPUSH
21921: LD_INT 1
21923: PPUSH
21924: CALL_OW 101
// GiveMedals ( Main ) ;
21928: LD_STRING Main
21930: PPUSH
21931: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21935: LD_INT 22
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 23
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 21
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 25
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 25
21990: PUSH
21991: LD_INT 3
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 25
22000: PUSH
22001: LD_INT 4
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PPUSH
22021: CALL_OW 69
22025: PPUSH
22026: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22030: LD_EXP 1
22034: PPUSH
22035: LD_EXP 40
22039: PUSH
22040: LD_STRING JMM
22042: STR
22043: PPUSH
22044: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22048: LD_EXP 2
22052: PPUSH
22053: LD_EXP 40
22057: PUSH
22058: LD_STRING Brown
22060: STR
22061: PPUSH
22062: CALL 6687 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22066: LD_EXP 3
22070: PPUSH
22071: LD_EXP 40
22075: PUSH
22076: LD_STRING Donaldson
22078: STR
22079: PPUSH
22080: CALL 6687 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22084: LD_EXP 4
22088: PPUSH
22089: LD_EXP 40
22093: PUSH
22094: LD_STRING Bobby
22096: STR
22097: PPUSH
22098: CALL 6687 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22102: LD_EXP 5
22106: PPUSH
22107: LD_EXP 40
22111: PUSH
22112: LD_STRING Cyrus
22114: STR
22115: PPUSH
22116: CALL 6687 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22120: LD_EXP 6
22124: PPUSH
22125: LD_EXP 40
22129: PUSH
22130: LD_STRING Lisa
22132: STR
22133: PPUSH
22134: CALL 6687 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22138: LD_EXP 7
22142: PPUSH
22143: LD_EXP 40
22147: PUSH
22148: LD_STRING Frank
22150: STR
22151: PPUSH
22152: CALL 6687 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22156: LD_EXP 8
22160: PPUSH
22161: LD_EXP 40
22165: PUSH
22166: LD_STRING Gladstone
22168: STR
22169: PPUSH
22170: CALL 6687 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22174: LD_EXP 9
22178: PPUSH
22179: LD_EXP 40
22183: PUSH
22184: LD_STRING Kikuchi
22186: STR
22187: PPUSH
22188: CALL 6687 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22192: LD_EXP 13
22196: PPUSH
22197: LD_EXP 40
22201: PUSH
22202: LD_STRING Denis
22204: STR
22205: PPUSH
22206: CALL 6687 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22210: LD_EXP 14
22214: PPUSH
22215: LD_EXP 40
22219: PUSH
22220: LD_STRING Joan
22222: STR
22223: PPUSH
22224: CALL 6687 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22228: LD_EXP 12
22232: PPUSH
22233: LD_EXP 40
22237: PUSH
22238: LD_STRING Houten
22240: STR
22241: PPUSH
22242: CALL 6687 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
22246: LD_INT 50
22248: PUSH
22249: EMPTY
22250: LIST
22251: PUSH
22252: LD_INT 22
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 21
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: LD_INT 25
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 25
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 25
22297: PUSH
22298: LD_INT 3
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 25
22307: PUSH
22308: LD_INT 4
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: PPUSH
22328: CALL_OW 69
22332: PUSH
22333: LD_EXP 1
22337: PUSH
22338: LD_EXP 2
22342: PUSH
22343: LD_EXP 3
22347: PUSH
22348: LD_EXP 4
22352: PUSH
22353: LD_EXP 5
22357: PUSH
22358: LD_EXP 6
22362: PUSH
22363: LD_EXP 7
22367: PUSH
22368: LD_EXP 8
22372: PUSH
22373: LD_EXP 9
22377: PUSH
22378: LD_EXP 13
22382: PUSH
22383: LD_EXP 14
22387: PUSH
22388: LD_EXP 12
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: DIFF
22407: PPUSH
22408: LD_STRING 08_other_survivors
22410: PPUSH
22411: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
22415: LD_INT 23
22417: PPUSH
22418: CALL 22431 0 1
// YouWin ;
22422: CALL_OW 103
// end ;
22426: LD_VAR 0 1
22430: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22431: LD_INT 0
22433: PPUSH
22434: PPUSH
22435: PPUSH
22436: PPUSH
// gammaBase = [ ] ;
22437: LD_ADDR_VAR 0 4
22441: PUSH
22442: EMPTY
22443: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22444: LD_ADDR_VAR 0 5
22448: PUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_INT 22
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 21
22466: PUSH
22467: LD_INT 3
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 50
22476: PUSH
22477: EMPTY
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: PPUSH
22485: CALL_OW 70
22489: ST_TO_ADDR
// for i in buildings do
22490: LD_ADDR_VAR 0 3
22494: PUSH
22495: LD_VAR 0 5
22499: PUSH
22500: FOR_IN
22501: IFFALSE 22838
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22503: LD_VAR 0 3
22507: PPUSH
22508: CALL_OW 266
22512: PUSH
22513: LD_INT 6
22515: PUSH
22516: LD_INT 7
22518: PUSH
22519: LD_INT 8
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: LIST
22526: IN
22527: IFFALSE 22641
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22529: LD_ADDR_VAR 0 4
22533: PUSH
22534: LD_VAR 0 4
22538: PUSH
22539: LD_VAR 0 3
22543: PPUSH
22544: CALL_OW 266
22548: PUSH
22549: LD_VAR 0 3
22553: PPUSH
22554: CALL_OW 250
22558: PUSH
22559: LD_VAR 0 3
22563: PPUSH
22564: CALL_OW 251
22568: PUSH
22569: LD_VAR 0 3
22573: PPUSH
22574: CALL_OW 254
22578: PUSH
22579: LD_VAR 0 3
22583: PPUSH
22584: CALL_OW 267
22588: PUSH
22589: LD_VAR 0 3
22593: PPUSH
22594: CALL_OW 248
22598: PUSH
22599: LD_VAR 0 3
22603: PPUSH
22604: LD_INT 1
22606: PPUSH
22607: CALL_OW 268
22611: PUSH
22612: LD_VAR 0 3
22616: PPUSH
22617: LD_INT 2
22619: PPUSH
22620: CALL_OW 268
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: ADD
22638: ST_TO_ADDR
22639: GO 22836
// if GetBType ( i ) in [ b_bunker ] then
22641: LD_VAR 0 3
22645: PPUSH
22646: CALL_OW 266
22650: PUSH
22651: LD_INT 32
22653: PUSH
22654: EMPTY
22655: LIST
22656: IN
22657: IFFALSE 22754
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22659: LD_ADDR_VAR 0 4
22663: PUSH
22664: LD_VAR 0 4
22668: PUSH
22669: LD_VAR 0 3
22673: PPUSH
22674: CALL_OW 266
22678: PUSH
22679: LD_VAR 0 3
22683: PPUSH
22684: CALL_OW 250
22688: PUSH
22689: LD_VAR 0 3
22693: PPUSH
22694: CALL_OW 251
22698: PUSH
22699: LD_VAR 0 3
22703: PPUSH
22704: CALL_OW 254
22708: PUSH
22709: LD_VAR 0 3
22713: PPUSH
22714: CALL_OW 267
22718: PUSH
22719: LD_VAR 0 3
22723: PPUSH
22724: CALL_OW 248
22728: PUSH
22729: LD_VAR 0 3
22733: PPUSH
22734: CALL_OW 269
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: PUSH
22748: EMPTY
22749: LIST
22750: ADD
22751: ST_TO_ADDR
22752: GO 22836
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22754: LD_ADDR_VAR 0 4
22758: PUSH
22759: LD_VAR 0 4
22763: PUSH
22764: LD_VAR 0 3
22768: PPUSH
22769: CALL_OW 266
22773: PUSH
22774: LD_VAR 0 3
22778: PPUSH
22779: CALL_OW 250
22783: PUSH
22784: LD_VAR 0 3
22788: PPUSH
22789: CALL_OW 251
22793: PUSH
22794: LD_VAR 0 3
22798: PPUSH
22799: CALL_OW 254
22803: PUSH
22804: LD_VAR 0 3
22808: PPUSH
22809: CALL_OW 267
22813: PUSH
22814: LD_VAR 0 3
22818: PPUSH
22819: CALL_OW 248
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: PUSH
22832: EMPTY
22833: LIST
22834: ADD
22835: ST_TO_ADDR
// end ;
22836: GO 22500
22838: POP
22839: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
22840: LD_VAR 0 4
22844: PPUSH
22845: LD_STRING 08_GammaBase
22847: PPUSH
22848: CALL_OW 39
// end ;
22852: LD_VAR 0 2
22856: RET
