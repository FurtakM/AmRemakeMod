// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7817 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6594 0 0
// PrepareRussians ;
 229: CALL 6912 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 9238 0 6
// PrepareCutsceneAttack ;
 312: CALL 6646 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 7330 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 7330 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 7330 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 7330 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 7330 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 7330 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 7330 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 7330 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 7330 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 7330 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 7330 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 7330 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 7330 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 7330 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 7330 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 7330 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 51
2588: PUSH
2589: LD_INT 10
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 3051
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2874
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2803: LD_EXP 37
2807: PPUSH
2808: LD_STRING gamma
2810: PPUSH
2811: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2815: LD_EXP 37
2819: PPUSH
2820: CALL_OW 274
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 500
2830: PUSH
2831: LD_INT 420
2833: PUSH
2834: LD_INT 350
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_OWVAR 67
2846: ARRAY
2847: PPUSH
2848: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2852: LD_EXP 37
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 200
2867: PPUSH
2868: CALL_OW 277
// end else
2872: GO 3016
// begin if bc_type = 4 then
2874: LD_OWVAR 42
2878: PUSH
2879: LD_INT 4
2881: EQUAL
2882: IFFALSE 2931
// begin bc_type = 5 ;
2884: LD_ADDR_OWVAR 42
2888: PUSH
2889: LD_INT 5
2891: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_INT 2
2904: ARRAY
2905: PPUSH
2906: LD_VAR 0 3
2910: PUSH
2911: LD_INT 3
2913: ARRAY
2914: PPUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 4
2922: ARRAY
2923: PPUSH
2924: CALL_OW 47
2928: ST_TO_ADDR
// end else
2929: GO 3016
// begin bc_type := i [ 1 ] ;
2931: LD_ADDR_OWVAR 42
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2945: LD_STRING 06_remoteVehs_1
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 30
2955: PUSH
2956: LD_INT 1
2958: EQUAL
2959: PUSH
2960: LD_OWVAR 42
2964: PUSH
2965: LD_INT 7
2967: EQUAL
2968: AND
2969: IFFALSE 2979
// bc_type := b_lab_full ;
2971: LD_ADDR_OWVAR 42
2975: PUSH
2976: LD_INT 8
2978: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_VAR 0 3
2988: PUSH
2989: LD_INT 2
2991: ARRAY
2992: PPUSH
2993: LD_VAR 0 3
2997: PUSH
2998: LD_INT 3
3000: ARRAY
3001: PPUSH
3002: LD_VAR 0 3
3006: PUSH
3007: LD_INT 4
3009: ARRAY
3010: PPUSH
3011: CALL_OW 47
3015: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 266
3025: PUSH
3026: LD_INT 32
3028: EQUAL
3029: IFFALSE 3049
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 3
3040: PUSH
3041: LD_INT 7
3043: ARRAY
3044: PPUSH
3045: CALL_OW 431
// end ;
3049: GO 2642
3051: POP
3052: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3053: LD_INT 22
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 30
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 69
3081: IFFALSE 3329
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: LD_INT 22
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 30
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3121: LD_ADDR_VAR 0 6
3125: PUSH
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 250
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 251
3145: PPUSH
3146: LD_VAR 0 4
3150: PPUSH
3151: CALL_OW 254
3155: PPUSH
3156: CALL 17150 0 3
3160: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_INT 19
3168: PUSH
3169: LD_INT 17
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3176: LD_STRING 06_remoteVehs_1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 30
3186: IFFALSE 3209
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_VAR 0 2
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: CALL_OW 2
3208: ST_TO_ADDR
// for i in tmp do
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_VAR 0 6
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3327
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3222: LD_VAR 0 3
3226: PUSH
3227: LD_INT 1
3229: ARRAY
3230: PPUSH
3231: LD_VAR 0 3
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 428
3244: PUSH
3245: LD_INT 0
3247: EQUAL
3248: IFFALSE 3325
// begin bc_type := blist [ 1 ] ;
3250: LD_ADDR_OWVAR 42
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: LD_VAR 0 3
3286: PUSH
3287: LD_INT 3
3289: ARRAY
3290: PPUSH
3291: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 3
3312: ST_TO_ADDR
// if blist = 0 then
3313: LD_VAR 0 2
3317: PUSH
3318: LD_INT 0
3320: EQUAL
3321: IFFALSE 3325
// break ;
3323: GO 3327
// end ;
3325: GO 3219
3327: POP
3328: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3329: LD_STRING 06_remoteVehs_1
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 30
3339: PUSH
3340: LD_INT 1
3342: EQUAL
3343: IFFALSE 3708
// begin bc_type = 36 ;
3345: LD_ADDR_OWVAR 42
3349: PUSH
3350: LD_INT 36
3352: ST_TO_ADDR
// bc_level = 4 ;
3353: LD_ADDR_OWVAR 43
3357: PUSH
3358: LD_INT 4
3360: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) then
3361: LD_EXP 37
3365: PPUSH
3366: LD_INT 36
3368: PPUSH
3369: LD_INT 62
3371: PPUSH
3372: LD_INT 12
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL 18020 0 6
3385: IFFALSE 3402
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3387: LD_INT 62
3389: PPUSH
3390: LD_INT 12
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 47
3400: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) then
3402: LD_EXP 37
3406: PPUSH
3407: LD_INT 36
3409: PPUSH
3410: LD_INT 37
3412: PPUSH
3413: LD_INT 18
3415: PPUSH
3416: LD_INT 2
3418: PPUSH
3419: LD_INT 0
3421: PPUSH
3422: CALL 18020 0 6
3426: IFFALSE 3443
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3428: LD_INT 37
3430: PPUSH
3431: LD_INT 18
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: CALL_OW 47
3441: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) then
3443: LD_EXP 37
3447: PPUSH
3448: LD_INT 36
3450: PPUSH
3451: LD_INT 66
3453: PPUSH
3454: LD_INT 14
3456: PPUSH
3457: LD_INT 4
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: CALL 18020 0 6
3467: IFFALSE 3484
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3469: LD_INT 66
3471: PPUSH
3472: LD_INT 14
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: CALL_OW 47
3482: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3484: LD_EXP 37
3488: PPUSH
3489: LD_INT 36
3491: PPUSH
3492: LD_INT 74
3494: PPUSH
3495: LD_INT 26
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 0
3503: PPUSH
3504: CALL 18020 0 6
3508: IFFALSE 3523
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3510: LD_INT 74
3512: PPUSH
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 3
3535: PUSH
3536: LD_INT 2
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_OWVAR 67
3551: ARRAY
3552: PUSH
3553: FOR_TO
3554: IFFALSE 3706
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3556: LD_ADDR_OWVAR 37
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 3
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: ST_TO_ADDR
// vc_engine = 1 ;
3600: LD_ADDR_OWVAR 39
3604: PUSH
3605: LD_INT 1
3607: ST_TO_ADDR
// vc_control = 2 ;
3608: LD_ADDR_OWVAR 38
3612: PUSH
3613: LD_INT 2
3615: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3616: LD_ADDR_OWVAR 40
3620: PUSH
3621: LD_INT 3
3623: PUSH
3624: LD_INT 4
3626: PUSH
3627: LD_INT 5
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 1
3637: PPUSH
3638: LD_INT 3
3640: PPUSH
3641: CALL_OW 12
3645: ARRAY
3646: ST_TO_ADDR
// veh = CreateVehicle ;
3647: LD_ADDR_VAR 0 5
3651: PUSH
3652: CALL_OW 45
3656: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3657: LD_VAR 0 5
3661: PPUSH
3662: LD_INT 4
3664: PPUSH
3665: CALL_OW 233
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3669: LD_VAR 0 5
3673: PPUSH
3674: LD_EXP 37
3678: PPUSH
3679: CALL_OW 250
3683: PPUSH
3684: LD_EXP 37
3688: PPUSH
3689: CALL_OW 251
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL_OW 50
// end ;
3704: GO 3553
3706: POP
3707: POP
// end ; end ;
3708: LD_VAR 0 1
3712: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
// uc_side = 1 ;
3719: LD_ADDR_OWVAR 20
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// uc_nation = 1 ;
3727: LD_ADDR_OWVAR 21
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3735: LD_ADDR_EXP 14
3739: PUSH
3740: LD_STRING 06c_Denis
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: CALL 7330 0 2
3750: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3751: LD_EXP 14
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: LD_INT 0
3761: PPUSH
3762: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3766: LD_ADDR_EXP 15
3770: PUSH
3771: LD_STRING 06c_Joan
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL 7330 0 2
3781: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3782: LD_EXP 15
3786: PPUSH
3787: LD_INT 4
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3797: LD_STRING GladstoneIn07
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 30
3807: NOT
3808: IFFALSE 3876
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3810: LD_ADDR_EXP 8
3814: PUSH
3815: LD_STRING 06c_Gladstone
3817: PPUSH
3818: LD_INT 1
3820: PPUSH
3821: CALL 7330 0 2
3825: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3826: LD_EXP 8
3830: NOT
3831: PUSH
3832: LD_STRING GladstoneStayInDelta
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 30
3842: AND
3843: IFFALSE 3861
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3845: LD_ADDR_EXP 8
3849: PUSH
3850: LD_STRING 05_Gladstone
3852: PPUSH
3853: LD_INT 1
3855: PPUSH
3856: CALL 7330 0 2
3860: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3861: LD_EXP 8
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: LD_INT 0
3871: PPUSH
3872: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3876: LD_STRING LisaStayInDelta
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 30
3886: IFFALSE 3919
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3888: LD_ADDR_EXP 6
3892: PUSH
3893: LD_STRING 05_Lisa
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: CALL 7330 0 2
3903: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3904: LD_EXP 6
3908: PPUSH
3909: LD_INT 4
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3919: LD_STRING BobbyStayInDelta
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 30
3929: IFFALSE 3962
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3931: LD_ADDR_EXP 4
3935: PUSH
3936: LD_STRING 05_Bobby
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: CALL 7330 0 2
3946: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3947: LD_EXP 4
3951: PPUSH
3952: LD_INT 4
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3962: LD_STRING CyrusStayInDelta
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 30
3972: IFFALSE 4005
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3974: LD_ADDR_EXP 5
3978: PUSH
3979: LD_STRING 05_Cyrus
3981: PPUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL 7330 0 2
3989: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3990: LD_EXP 5
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4005: LD_STRING BrownStayInDelta
4007: PPUSH
4008: LD_INT 0
4010: PPUSH
4011: CALL_OW 30
4015: IFFALSE 4048
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4017: LD_ADDR_EXP 2
4021: PUSH
4022: LD_STRING 05_Brown
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: CALL 7330 0 2
4032: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4033: LD_EXP 2
4037: PPUSH
4038: LD_INT 4
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4048: LD_STRING DonaldsonStayInDelta
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 30
4058: IFFALSE 4091
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4060: LD_ADDR_EXP 3
4064: PUSH
4065: LD_STRING 05_Donaldson
4067: PPUSH
4068: LD_INT 1
4070: PPUSH
4071: CALL 7330 0 2
4075: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4076: LD_EXP 3
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4091: LD_ADDR_VAR 0 4
4095: PUSH
4096: LD_STRING OthersStayInDelta
4098: PPUSH
4099: CALL_OW 31
4103: ST_TO_ADDR
// if other > 2 then
4104: LD_VAR 0 4
4108: PUSH
4109: LD_INT 2
4111: GREATER
4112: IFFALSE 4157
// begin for j = 1 to 2 do
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: DOUBLE
4120: LD_INT 1
4122: DEC
4123: ST_TO_ADDR
4124: LD_INT 2
4126: PUSH
4127: FOR_TO
4128: IFFALSE 4153
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4130: LD_VAR 0 4
4134: PUSH
4135: LD_VAR 0 3
4139: ARRAY
4140: PPUSH
4141: LD_INT 4
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 49
4151: GO 4127
4153: POP
4154: POP
// end else
4155: GO 4200
// begin for j = 1 to other do
4157: LD_ADDR_VAR 0 3
4161: PUSH
4162: DOUBLE
4163: LD_INT 1
4165: DEC
4166: ST_TO_ADDR
4167: LD_VAR 0 4
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4198
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4175: LD_VAR 0 4
4179: PUSH
4180: LD_VAR 0 3
4184: ARRAY
4185: PPUSH
4186: LD_INT 4
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL_OW 49
4196: GO 4172
4198: POP
4199: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4200: LD_ADDR_VAR 0 4
4204: PUSH
4205: LD_STRING 06_other_apemans
4207: PPUSH
4208: CALL_OW 31
4212: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4213: LD_VAR 0 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: LD_INT 4
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: LD_OWVAR 67
4236: ARRAY
4237: GREATEREQUAL
4238: IFFALSE 4267
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: LD_INT 5
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: LD_OWVAR 67
4263: ARRAY
4264: ST_TO_ADDR
4265: GO 4277
// j := other ;
4267: LD_ADDR_VAR 0 3
4271: PUSH
4272: LD_VAR 0 4
4276: ST_TO_ADDR
// for i = 1 to j do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4318
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4295: LD_VAR 0 4
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 49
4316: GO 4292
4318: POP
4319: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4320: LD_INT 4
4322: PPUSH
4323: LD_INT 22
4325: PUSH
4326: LD_INT 1
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 21
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 70
4351: PPUSH
4352: LD_INT 53
4354: PPUSH
4355: LD_INT 19
4357: PPUSH
4358: CALL_OW 111
// firstAttack = 1 ;
4362: LD_ADDR_EXP 33
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// end ;
4370: LD_VAR 0 1
4374: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
4375: LD_INT 0
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
4382: LD_ADDR_VAR 0 4
4386: PUSH
4387: LD_STRING 07_vehicles
4389: PPUSH
4390: EMPTY
4391: PPUSH
4392: CALL_OW 30
4396: ST_TO_ADDR
// uc_side = 1 ;
4397: LD_ADDR_OWVAR 20
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// uc_nation = 1 ;
4405: LD_ADDR_OWVAR 21
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// if vehicles > 0 then
4413: LD_VAR 0 4
4417: PUSH
4418: LD_INT 0
4420: GREATER
4421: IFFALSE 4560
// begin for i = 1 to vehicles do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_VAR 0 4
4437: PUSH
4438: FOR_TO
4439: IFFALSE 4558
// begin vc_chassis = vehicles [ i ] ;
4441: LD_ADDR_OWVAR 37
4445: PUSH
4446: LD_VAR 0 4
4450: PUSH
4451: LD_VAR 0 2
4455: ARRAY
4456: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
4457: LD_ADDR_OWVAR 39
4461: PUSH
4462: LD_VAR 0 4
4466: PUSH
4467: LD_VAR 0 2
4471: PUSH
4472: LD_INT 1
4474: PLUS
4475: ARRAY
4476: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
4477: LD_ADDR_OWVAR 38
4481: PUSH
4482: LD_VAR 0 4
4486: PUSH
4487: LD_VAR 0 2
4491: PUSH
4492: LD_INT 2
4494: PLUS
4495: ARRAY
4496: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
4497: LD_ADDR_OWVAR 40
4501: PUSH
4502: LD_VAR 0 4
4506: PUSH
4507: LD_VAR 0 2
4511: PUSH
4512: LD_INT 3
4514: PLUS
4515: ARRAY
4516: ST_TO_ADDR
// veh = CreateVehicle ;
4517: LD_ADDR_VAR 0 5
4521: PUSH
4522: CALL_OW 45
4526: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
4527: LD_VAR 0 5
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 49
// i = i + 3 ;
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_VAR 0 2
4551: PUSH
4552: LD_INT 3
4554: PLUS
4555: ST_TO_ADDR
// end ;
4556: GO 4438
4558: POP
4559: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4560: LD_ADDR_EXP 1
4564: PUSH
4565: LD_EXP 43
4569: PUSH
4570: LD_STRING JMM
4572: STR
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL 7330 0 2
4581: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4582: LD_EXP 12
4586: PUSH
4587: LD_INT 1
4589: EQUAL
4590: PUSH
4591: LD_EXP 12
4595: PUSH
4596: LD_INT 3
4598: EQUAL
4599: OR
4600: PUSH
4601: LD_EXP 2
4605: NOT
4606: AND
4607: IFFALSE 4631
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4609: LD_ADDR_EXP 2
4613: PUSH
4614: LD_EXP 43
4618: PUSH
4619: LD_STRING Brown
4621: STR
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL 7330 0 2
4630: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4631: LD_EXP 12
4635: PUSH
4636: LD_INT 2
4638: EQUAL
4639: PUSH
4640: LD_EXP 12
4644: PUSH
4645: LD_INT 3
4647: EQUAL
4648: OR
4649: PUSH
4650: LD_EXP 3
4654: NOT
4655: AND
4656: IFFALSE 4680
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4658: LD_ADDR_EXP 3
4662: PUSH
4663: LD_EXP 43
4667: PUSH
4668: LD_STRING Donaldson
4670: STR
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: CALL 7330 0 2
4679: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4680: LD_EXP 2
4684: PUSH
4685: LD_EXP 12
4689: PUSH
4690: LD_INT 2
4692: NONEQUAL
4693: AND
4694: IFFALSE 4711
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4696: LD_EXP 2
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4711: LD_EXP 3
4715: PUSH
4716: LD_EXP 12
4720: PUSH
4721: LD_INT 1
4723: NONEQUAL
4724: AND
4725: IFFALSE 4742
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4727: LD_EXP 3
4731: PPUSH
4732: LD_INT 4
4734: PPUSH
4735: LD_INT 0
4737: PPUSH
4738: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4742: LD_ADDR_VAR 0 5
4746: PUSH
4747: LD_INT 4
4749: PPUSH
4750: LD_INT 22
4752: PUSH
4753: LD_INT 1
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 21
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 58
4772: PUSH
4773: EMPTY
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PPUSH
4781: CALL_OW 70
4785: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4786: LD_ADDR_EXP 1
4790: PUSH
4791: LD_EXP 43
4795: PUSH
4796: LD_STRING JMM
4798: STR
4799: PPUSH
4800: LD_INT 1
4802: PPUSH
4803: CALL 7330 0 2
4807: ST_TO_ADDR
// other = CreateCharacterSet ( 07c_others ) ;
4808: LD_ADDR_VAR 0 3
4812: PUSH
4813: LD_STRING 07c_others
4815: PPUSH
4816: CALL_OW 31
4820: ST_TO_ADDR
// for i in other do
4821: LD_ADDR_VAR 0 2
4825: PUSH
4826: LD_VAR 0 3
4830: PUSH
4831: FOR_IN
4832: IFFALSE 4956
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4834: LD_ADDR_VAR 0 5
4838: PUSH
4839: LD_INT 4
4841: PPUSH
4842: LD_INT 22
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 21
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 58
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 70
4877: ST_TO_ADDR
// if veh > 0 and GetClass ( i ) = 3 then
4878: LD_VAR 0 5
4882: PUSH
4883: LD_INT 0
4885: GREATER
4886: PUSH
4887: LD_VAR 0 2
4891: PPUSH
4892: CALL_OW 257
4896: PUSH
4897: LD_INT 3
4899: EQUAL
4900: AND
4901: IFFALSE 4923
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4903: LD_VAR 0 2
4907: PPUSH
4908: LD_VAR 0 5
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: PPUSH
4917: CALL_OW 52
// end else
4921: GO 4938
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4923: LD_VAR 0 2
4927: PPUSH
4928: LD_INT 4
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
// end ; other = other diff i ;
4938: LD_ADDR_VAR 0 3
4942: PUSH
4943: LD_VAR 0 3
4947: PUSH
4948: LD_VAR 0 2
4952: DIFF
4953: ST_TO_ADDR
// end ;
4954: GO 4831
4956: POP
4957: POP
// for i in other do
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_VAR 0 3
4967: PUSH
4968: FOR_IN
4969: IFFALSE 5062
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4971: LD_ADDR_VAR 0 5
4975: PUSH
4976: LD_INT 4
4978: PPUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 1
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 21
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: LD_INT 58
5001: PUSH
5002: EMPTY
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 70
5014: ST_TO_ADDR
// if veh > 0 then
5015: LD_VAR 0 5
5019: PUSH
5020: LD_INT 0
5022: GREATER
5023: IFFALSE 5045
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5025: LD_VAR 0 2
5029: PPUSH
5030: LD_VAR 0 5
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: CALL_OW 52
// end else
5043: GO 5060
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: LD_INT 0
5055: PPUSH
5056: CALL_OW 49
// end ; end ;
5060: GO 4968
5062: POP
5063: POP
// if veh > 0 then
5064: LD_VAR 0 5
5068: PUSH
5069: LD_INT 0
5071: GREATER
5072: IFFALSE 5094
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
5074: LD_EXP 1
5078: PPUSH
5079: LD_VAR 0 5
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 52
// end else
5092: GO 5109
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
5094: LD_EXP 1
5098: PPUSH
5099: LD_INT 4
5101: PPUSH
5102: LD_INT 0
5104: PPUSH
5105: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5109: LD_ADDR_VAR 0 5
5113: PUSH
5114: LD_INT 4
5116: PPUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 1
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 2
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 58
5139: PUSH
5140: EMPTY
5141: LIST
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: LIST
5147: PPUSH
5148: CALL_OW 70
5152: ST_TO_ADDR
// if not Bobby then
5153: LD_EXP 4
5157: NOT
5158: IFFALSE 5227
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
5160: LD_ADDR_EXP 4
5164: PUSH
5165: LD_EXP 43
5169: PUSH
5170: LD_STRING Bobby
5172: STR
5173: PPUSH
5174: LD_INT 1
5176: PPUSH
5177: CALL 7330 0 2
5181: ST_TO_ADDR
// if veh > 0 then
5182: LD_VAR 0 5
5186: PUSH
5187: LD_INT 0
5189: GREATER
5190: IFFALSE 5212
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
5192: LD_EXP 4
5196: PPUSH
5197: LD_VAR 0 5
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PPUSH
5206: CALL_OW 52
// end else
5210: GO 5227
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
5212: LD_EXP 4
5216: PPUSH
5217: LD_INT 4
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5227: LD_ADDR_VAR 0 5
5231: PUSH
5232: LD_INT 4
5234: PPUSH
5235: LD_INT 22
5237: PUSH
5238: LD_INT 1
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 21
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 58
5257: PUSH
5258: EMPTY
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 70
5270: ST_TO_ADDR
// if not Cyrus then
5271: LD_EXP 5
5275: NOT
5276: IFFALSE 5345
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
5278: LD_ADDR_EXP 5
5282: PUSH
5283: LD_EXP 43
5287: PUSH
5288: LD_STRING Cyrus
5290: STR
5291: PPUSH
5292: LD_INT 1
5294: PPUSH
5295: CALL 7330 0 2
5299: ST_TO_ADDR
// if veh > 0 then
5300: LD_VAR 0 5
5304: PUSH
5305: LD_INT 0
5307: GREATER
5308: IFFALSE 5330
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
5310: LD_EXP 5
5314: PPUSH
5315: LD_VAR 0 5
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: CALL_OW 52
// end else
5328: GO 5345
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
5330: LD_EXP 5
5334: PPUSH
5335: LD_INT 4
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_INT 4
5352: PPUSH
5353: LD_INT 22
5355: PUSH
5356: LD_INT 1
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 21
5365: PUSH
5366: LD_INT 2
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_INT 58
5375: PUSH
5376: EMPTY
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 70
5388: ST_TO_ADDR
// if not Lisa then
5389: LD_EXP 6
5393: NOT
5394: IFFALSE 5463
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5396: LD_ADDR_EXP 6
5400: PUSH
5401: LD_EXP 43
5405: PUSH
5406: LD_STRING Lisa
5408: STR
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL 7330 0 2
5417: ST_TO_ADDR
// if veh > 0 then
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 0
5425: GREATER
5426: IFFALSE 5448
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
5428: LD_EXP 6
5432: PPUSH
5433: LD_VAR 0 5
5437: PUSH
5438: LD_INT 1
5440: ARRAY
5441: PPUSH
5442: CALL_OW 52
// end else
5446: GO 5463
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
5448: LD_EXP 6
5452: PPUSH
5453: LD_INT 4
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 4
5470: PPUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 21
5483: PUSH
5484: LD_INT 2
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 58
5493: PUSH
5494: EMPTY
5495: LIST
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: PPUSH
5502: CALL_OW 70
5506: ST_TO_ADDR
// if not Frank then
5507: LD_EXP 7
5511: NOT
5512: IFFALSE 5581
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5514: LD_ADDR_EXP 7
5518: PUSH
5519: LD_EXP 43
5523: PUSH
5524: LD_STRING Frank
5526: STR
5527: PPUSH
5528: LD_INT 1
5530: PPUSH
5531: CALL 7330 0 2
5535: ST_TO_ADDR
// if veh > 0 then
5536: LD_VAR 0 5
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: IFFALSE 5566
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
5546: LD_EXP 7
5550: PPUSH
5551: LD_VAR 0 5
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: CALL_OW 52
// end else
5564: GO 5581
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
5566: LD_EXP 7
5570: PPUSH
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 0
5576: PPUSH
5577: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: LD_INT 4
5588: PPUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 21
5601: PUSH
5602: LD_INT 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 58
5611: PUSH
5612: EMPTY
5613: LIST
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 70
5624: ST_TO_ADDR
// if not Gladstone then
5625: LD_EXP 8
5629: NOT
5630: IFFALSE 5699
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5632: LD_ADDR_EXP 8
5636: PUSH
5637: LD_EXP 43
5641: PUSH
5642: LD_STRING Gladstone
5644: STR
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL 7330 0 2
5653: ST_TO_ADDR
// if veh > 0 then
5654: LD_VAR 0 5
5658: PUSH
5659: LD_INT 0
5661: GREATER
5662: IFFALSE 5684
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
5664: LD_EXP 8
5668: PPUSH
5669: LD_VAR 0 5
5673: PUSH
5674: LD_INT 1
5676: ARRAY
5677: PPUSH
5678: CALL_OW 52
// end else
5682: GO 5699
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
5684: LD_EXP 8
5688: PPUSH
5689: LD_INT 4
5691: PPUSH
5692: LD_INT 0
5694: PPUSH
5695: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5699: LD_ADDR_VAR 0 5
5703: PUSH
5704: LD_INT 4
5706: PPUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 2
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 58
5729: PUSH
5730: EMPTY
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 70
5742: ST_TO_ADDR
// if not Kikuchi then
5743: LD_EXP 9
5747: NOT
5748: IFFALSE 5817
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5750: LD_ADDR_EXP 9
5754: PUSH
5755: LD_EXP 43
5759: PUSH
5760: LD_STRING Kikuchi
5762: STR
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL 7330 0 2
5771: ST_TO_ADDR
// if veh > 0 then
5772: LD_VAR 0 5
5776: PUSH
5777: LD_INT 0
5779: GREATER
5780: IFFALSE 5802
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
5782: LD_EXP 9
5786: PPUSH
5787: LD_VAR 0 5
5791: PUSH
5792: LD_INT 1
5794: ARRAY
5795: PPUSH
5796: CALL_OW 52
// end else
5800: GO 5817
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
5802: LD_EXP 9
5806: PPUSH
5807: LD_INT 4
5809: PPUSH
5810: LD_INT 0
5812: PPUSH
5813: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5817: LD_ADDR_VAR 0 5
5821: PUSH
5822: LD_INT 4
5824: PPUSH
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 21
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 58
5847: PUSH
5848: EMPTY
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: PPUSH
5856: CALL_OW 70
5860: ST_TO_ADDR
// if not Khatam then
5861: LD_EXP 10
5865: NOT
5866: IFFALSE 5935
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5868: LD_ADDR_EXP 10
5872: PUSH
5873: LD_EXP 43
5877: PUSH
5878: LD_STRING Khatam
5880: STR
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: CALL 7330 0 2
5889: ST_TO_ADDR
// if veh > 0 then
5890: LD_VAR 0 5
5894: PUSH
5895: LD_INT 0
5897: GREATER
5898: IFFALSE 5920
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5900: LD_EXP 10
5904: PPUSH
5905: LD_VAR 0 5
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: CALL_OW 52
// end else
5918: GO 5935
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5920: LD_EXP 10
5924: PPUSH
5925: LD_INT 4
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 49
// end ; end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5935: LD_INT 4
5937: PPUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: PPUSH
5951: CALL_OW 70
5955: PPUSH
5956: LD_INT 53
5958: PPUSH
5959: LD_INT 19
5961: PPUSH
5962: CALL_OW 111
// end ;
5966: LD_VAR 0 1
5970: RET
// export function PrepareSikorsky ; begin
5971: LD_INT 0
5973: PPUSH
// uc_side = 4 ;
5974: LD_ADDR_OWVAR 20
5978: PUSH
5979: LD_INT 4
5981: ST_TO_ADDR
// uc_nation = 1 ;
5982: LD_ADDR_OWVAR 21
5986: PUSH
5987: LD_INT 1
5989: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5990: LD_ADDR_EXP 16
5994: PUSH
5995: LD_STRING Sikorski
5997: PPUSH
5998: LD_INT 0
6000: PPUSH
6001: CALL 7330 0 2
6005: ST_TO_ADDR
// vc_engine = 1 ;
6006: LD_ADDR_OWVAR 39
6010: PUSH
6011: LD_INT 1
6013: ST_TO_ADDR
// vc_control = 1 ;
6014: LD_ADDR_OWVAR 38
6018: PUSH
6019: LD_INT 1
6021: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
6022: LD_ADDR_OWVAR 40
6026: PUSH
6027: LD_INT 5
6029: PUSH
6030: LD_INT 3
6032: PUSH
6033: LD_INT 4
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_OWVAR 67
6045: ARRAY
6046: ST_TO_ADDR
// vc_chassis = 4 ;
6047: LD_ADDR_OWVAR 37
6051: PUSH
6052: LD_INT 4
6054: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
6055: LD_ADDR_EXP 17
6059: PUSH
6060: CALL_OW 45
6064: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
6065: LD_EXP 17
6069: PPUSH
6070: LD_INT 9
6072: PPUSH
6073: LD_INT 0
6075: PPUSH
6076: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6080: LD_EXP 16
6084: PPUSH
6085: LD_EXP 17
6089: PPUSH
6090: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6094: LD_EXP 17
6098: PPUSH
6099: LD_INT 5
6101: PPUSH
6102: CALL_OW 113
// end ;
6106: LD_VAR 0 1
6110: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6111: LD_INT 0
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
6117: LD_ADDR_VAR 0 2
6121: PUSH
6122: DOUBLE
6123: LD_INT 1
6125: DEC
6126: ST_TO_ADDR
6127: LD_INT 8
6129: PUSH
6130: LD_INT 7
6132: PUSH
6133: LD_INT 7
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: LD_OWVAR 67
6145: ARRAY
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6245
// begin uc_side = 4 ;
6150: LD_ADDR_OWVAR 20
6154: PUSH
6155: LD_INT 4
6157: ST_TO_ADDR
// uc_nation = 1 ;
6158: LD_ADDR_OWVAR 21
6162: PUSH
6163: LD_INT 1
6165: ST_TO_ADDR
// hc_name =  ;
6166: LD_ADDR_OWVAR 26
6170: PUSH
6171: LD_STRING 
6173: ST_TO_ADDR
// hc_gallery =  ;
6174: LD_ADDR_OWVAR 33
6178: PUSH
6179: LD_STRING 
6181: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6182: LD_INT 0
6184: PPUSH
6185: LD_INT 1
6187: PPUSH
6188: LD_INT 5
6190: PPUSH
6191: LD_INT 8
6193: PPUSH
6194: CALL_OW 12
6198: PPUSH
6199: CALL_OW 380
// un = CreateHuman ;
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: CALL_OW 44
6212: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6213: LD_VAR 0 3
6217: PPUSH
6218: LD_INT 9
6220: PPUSH
6221: LD_INT 0
6223: PPUSH
6224: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6228: LD_VAR 0 3
6232: PPUSH
6233: LD_INT 53
6235: PPUSH
6236: LD_INT 23
6238: PPUSH
6239: CALL_OW 111
// end ;
6243: GO 6147
6245: POP
6246: POP
// for i = 1 to 3 do
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: DOUBLE
6253: LD_INT 1
6255: DEC
6256: ST_TO_ADDR
6257: LD_INT 3
6259: PUSH
6260: FOR_TO
6261: IFFALSE 6358
// begin uc_side = 4 ;
6263: LD_ADDR_OWVAR 20
6267: PUSH
6268: LD_INT 4
6270: ST_TO_ADDR
// uc_nation = 1 ;
6271: LD_ADDR_OWVAR 21
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// hc_name =  ;
6279: LD_ADDR_OWVAR 26
6283: PUSH
6284: LD_STRING 
6286: ST_TO_ADDR
// hc_gallery =  ;
6287: LD_ADDR_OWVAR 33
6291: PUSH
6292: LD_STRING 
6294: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6295: LD_INT 0
6297: PPUSH
6298: LD_INT 4
6300: PPUSH
6301: LD_INT 5
6303: PPUSH
6304: LD_INT 8
6306: PPUSH
6307: CALL_OW 12
6311: PPUSH
6312: CALL_OW 380
// un = CreateHuman ;
6316: LD_ADDR_VAR 0 3
6320: PUSH
6321: CALL_OW 44
6325: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6326: LD_VAR 0 3
6330: PPUSH
6331: LD_INT 9
6333: PPUSH
6334: LD_INT 0
6336: PPUSH
6337: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6341: LD_VAR 0 3
6345: PPUSH
6346: LD_INT 53
6348: PPUSH
6349: LD_INT 23
6351: PPUSH
6352: CALL_OW 111
// end ;
6356: GO 6260
6358: POP
6359: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6360: LD_ADDR_VAR 0 2
6364: PUSH
6365: DOUBLE
6366: LD_INT 1
6368: DEC
6369: ST_TO_ADDR
6370: LD_INT 9
6372: PUSH
6373: LD_INT 8
6375: PUSH
6376: LD_INT 7
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: LD_OWVAR 67
6388: ARRAY
6389: PUSH
6390: FOR_TO
6391: IFFALSE 6587
// begin uc_side = 4 ;
6393: LD_ADDR_OWVAR 20
6397: PUSH
6398: LD_INT 4
6400: ST_TO_ADDR
// uc_nation = 1 ;
6401: LD_ADDR_OWVAR 21
6405: PUSH
6406: LD_INT 1
6408: ST_TO_ADDR
// vc_engine = 1 ;
6409: LD_ADDR_OWVAR 39
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// vc_control = 1 ;
6417: LD_ADDR_OWVAR 38
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6425: LD_ADDR_OWVAR 40
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: LD_INT 4
6435: PUSH
6436: LD_INT 5
6438: PUSH
6439: LD_INT 6
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 1
6450: PPUSH
6451: LD_INT 4
6453: PPUSH
6454: CALL_OW 12
6458: ARRAY
6459: ST_TO_ADDR
// vc_chassis = 4 ;
6460: LD_ADDR_OWVAR 37
6464: PUSH
6465: LD_INT 4
6467: ST_TO_ADDR
// veh = CreateVehicle ;
6468: LD_ADDR_VAR 0 4
6472: PUSH
6473: CALL_OW 45
6477: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6478: LD_VAR 0 4
6482: PPUSH
6483: LD_INT 9
6485: PPUSH
6486: LD_INT 0
6488: PPUSH
6489: CALL_OW 49
// hc_name =  ;
6493: LD_ADDR_OWVAR 26
6497: PUSH
6498: LD_STRING 
6500: ST_TO_ADDR
// hc_gallery =  ;
6501: LD_ADDR_OWVAR 33
6505: PUSH
6506: LD_STRING 
6508: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6509: LD_INT 0
6511: PPUSH
6512: LD_INT 3
6514: PPUSH
6515: LD_INT 5
6517: PPUSH
6518: LD_INT 8
6520: PPUSH
6521: CALL_OW 12
6525: PPUSH
6526: CALL_OW 380
// un = CreateHuman ;
6530: LD_ADDR_VAR 0 3
6534: PUSH
6535: CALL_OW 44
6539: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6540: LD_VAR 0 3
6544: PPUSH
6545: LD_VAR 0 4
6549: PPUSH
6550: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6554: LD_VAR 0 4
6558: PUSH
6559: LD_VAR 0 3
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PPUSH
6568: LD_INT 53
6570: PPUSH
6571: LD_INT 23
6573: PPUSH
6574: CALL_OW 111
// wait ( 0 0$5 ) ;
6578: LD_INT 175
6580: PPUSH
6581: CALL_OW 67
// end ;
6585: GO 6390
6587: POP
6588: POP
// end ; end_of_file
6589: LD_VAR 0 1
6593: RET
// export function PrepareRussianCommander ; begin
6594: LD_INT 0
6596: PPUSH
// uc_side = 3 ;
6597: LD_ADDR_OWVAR 20
6601: PUSH
6602: LD_INT 3
6604: ST_TO_ADDR
// uc_nation = 3 ;
6605: LD_ADDR_OWVAR 21
6609: PUSH
6610: LD_INT 3
6612: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6613: LD_ADDR_EXP 24
6617: PUSH
6618: LD_STRING Borodin
6620: PPUSH
6621: CALL_OW 25
6625: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6626: LD_EXP 24
6630: PPUSH
6631: LD_INT 25
6633: PPUSH
6634: LD_INT 0
6636: PPUSH
6637: CALL_OW 49
// end ;
6641: LD_VAR 0 1
6645: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6646: LD_INT 0
6648: PPUSH
6649: PPUSH
6650: PPUSH
6651: PPUSH
// for i = 1 to 10 do
6652: LD_ADDR_VAR 0 2
6656: PUSH
6657: DOUBLE
6658: LD_INT 1
6660: DEC
6661: ST_TO_ADDR
6662: LD_INT 10
6664: PUSH
6665: FOR_TO
6666: IFFALSE 6740
// begin uc_side = 6 ;
6668: LD_ADDR_OWVAR 20
6672: PUSH
6673: LD_INT 6
6675: ST_TO_ADDR
// uc_nation = 3 ;
6676: LD_ADDR_OWVAR 21
6680: PUSH
6681: LD_INT 3
6683: ST_TO_ADDR
// hc_gallery =  ;
6684: LD_ADDR_OWVAR 33
6688: PUSH
6689: LD_STRING 
6691: ST_TO_ADDR
// hc_name =  ;
6692: LD_ADDR_OWVAR 26
6696: PUSH
6697: LD_STRING 
6699: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6700: LD_INT 0
6702: PPUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 380
// un = CreateHuman ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: CALL_OW 44
6722: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6723: LD_VAR 0 3
6727: PPUSH
6728: LD_INT 1
6730: PPUSH
6731: LD_INT 0
6733: PPUSH
6734: CALL_OW 49
// end ;
6738: GO 6665
6740: POP
6741: POP
// for i = 1 to 3 do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: DOUBLE
6748: LD_INT 1
6750: DEC
6751: ST_TO_ADDR
6752: LD_INT 3
6754: PUSH
6755: FOR_TO
6756: IFFALSE 6905
// begin uc_side = 6 ;
6758: LD_ADDR_OWVAR 20
6762: PUSH
6763: LD_INT 6
6765: ST_TO_ADDR
// uc_nation = 3 ;
6766: LD_ADDR_OWVAR 21
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// vc_engine = 1 ;
6774: LD_ADDR_OWVAR 39
6778: PUSH
6779: LD_INT 1
6781: ST_TO_ADDR
// vc_control = 1 ;
6782: LD_ADDR_OWVAR 38
6786: PUSH
6787: LD_INT 1
6789: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6790: LD_ADDR_OWVAR 40
6794: PUSH
6795: LD_INT 43
6797: PUSH
6798: LD_INT 44
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 1
6807: PPUSH
6808: LD_INT 2
6810: PPUSH
6811: CALL_OW 12
6815: ARRAY
6816: ST_TO_ADDR
// vc_chassis = 22 ;
6817: LD_ADDR_OWVAR 37
6821: PUSH
6822: LD_INT 22
6824: ST_TO_ADDR
// veh = CreateVehicle ;
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6835: LD_VAR 0 4
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// hc_gallery =  ;
6850: LD_ADDR_OWVAR 33
6854: PUSH
6855: LD_STRING 
6857: ST_TO_ADDR
// hc_name =  ;
6858: LD_ADDR_OWVAR 26
6862: PUSH
6863: LD_STRING 
6865: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6866: LD_INT 0
6868: PPUSH
6869: LD_INT 3
6871: PPUSH
6872: LD_INT 4
6874: PPUSH
6875: CALL_OW 380
// un = CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: CALL_OW 44
6888: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6889: LD_VAR 0 3
6893: PPUSH
6894: LD_VAR 0 4
6898: PPUSH
6899: CALL_OW 52
// end ;
6903: GO 6755
6905: POP
6906: POP
// end ;
6907: LD_VAR 0 1
6911: RET
// export function PrepareRussians ; var i , un ; begin
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
6916: PPUSH
// for i = 1 to 8 do
6917: LD_ADDR_VAR 0 2
6921: PUSH
6922: DOUBLE
6923: LD_INT 1
6925: DEC
6926: ST_TO_ADDR
6927: LD_INT 8
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7017
// begin uc_side = 3 ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_INT 3
6940: ST_TO_ADDR
// uc_nation = 3 ;
6941: LD_ADDR_OWVAR 21
6945: PUSH
6946: LD_INT 3
6948: ST_TO_ADDR
// hc_gallery =  ;
6949: LD_ADDR_OWVAR 33
6953: PUSH
6954: LD_STRING 
6956: ST_TO_ADDR
// hc_name =  ;
6957: LD_ADDR_OWVAR 26
6961: PUSH
6962: LD_STRING 
6964: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6965: LD_INT 0
6967: PPUSH
6968: LD_INT 1
6970: PPUSH
6971: LD_EXP 25
6975: PPUSH
6976: LD_EXP 26
6980: PPUSH
6981: CALL_OW 12
6985: PPUSH
6986: CALL_OW 380
// un = CreateHuman ;
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: CALL_OW 44
6999: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 3
7007: PPUSH
7008: LD_INT 0
7010: PPUSH
7011: CALL_OW 49
// end ;
7015: GO 6930
7017: POP
7018: POP
// for i = 1 to 4 do
7019: LD_ADDR_VAR 0 2
7023: PUSH
7024: DOUBLE
7025: LD_INT 1
7027: DEC
7028: ST_TO_ADDR
7029: LD_INT 4
7031: PUSH
7032: FOR_TO
7033: IFFALSE 7119
// begin uc_side = 3 ;
7035: LD_ADDR_OWVAR 20
7039: PUSH
7040: LD_INT 3
7042: ST_TO_ADDR
// uc_nation = 3 ;
7043: LD_ADDR_OWVAR 21
7047: PUSH
7048: LD_INT 3
7050: ST_TO_ADDR
// hc_gallery =  ;
7051: LD_ADDR_OWVAR 33
7055: PUSH
7056: LD_STRING 
7058: ST_TO_ADDR
// hc_name =  ;
7059: LD_ADDR_OWVAR 26
7063: PUSH
7064: LD_STRING 
7066: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7067: LD_INT 0
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: LD_EXP 25
7077: PPUSH
7078: LD_EXP 26
7082: PPUSH
7083: CALL_OW 12
7087: PPUSH
7088: CALL_OW 380
// un = CreateHuman ;
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: CALL_OW 44
7101: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7102: LD_VAR 0 3
7106: PPUSH
7107: LD_INT 3
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 49
// end ;
7117: GO 7032
7119: POP
7120: POP
// for i = 1 to 3 do
7121: LD_ADDR_VAR 0 2
7125: PUSH
7126: DOUBLE
7127: LD_INT 1
7129: DEC
7130: ST_TO_ADDR
7131: LD_INT 3
7133: PUSH
7134: FOR_TO
7135: IFFALSE 7221
// begin uc_side = 3 ;
7137: LD_ADDR_OWVAR 20
7141: PUSH
7142: LD_INT 3
7144: ST_TO_ADDR
// uc_nation = 3 ;
7145: LD_ADDR_OWVAR 21
7149: PUSH
7150: LD_INT 3
7152: ST_TO_ADDR
// hc_gallery =  ;
7153: LD_ADDR_OWVAR 33
7157: PUSH
7158: LD_STRING 
7160: ST_TO_ADDR
// hc_name =  ;
7161: LD_ADDR_OWVAR 26
7165: PUSH
7166: LD_STRING 
7168: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7169: LD_INT 0
7171: PPUSH
7172: LD_INT 3
7174: PPUSH
7175: LD_EXP 25
7179: PPUSH
7180: LD_EXP 26
7184: PPUSH
7185: CALL_OW 12
7189: PPUSH
7190: CALL_OW 380
// un = CreateHuman ;
7194: LD_ADDR_VAR 0 3
7198: PUSH
7199: CALL_OW 44
7203: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7204: LD_VAR 0 3
7208: PPUSH
7209: LD_INT 3
7211: PPUSH
7212: LD_INT 0
7214: PPUSH
7215: CALL_OW 49
// end ;
7219: GO 7134
7221: POP
7222: POP
// for i = 1 to 2 do
7223: LD_ADDR_VAR 0 2
7227: PUSH
7228: DOUBLE
7229: LD_INT 1
7231: DEC
7232: ST_TO_ADDR
7233: LD_INT 2
7235: PUSH
7236: FOR_TO
7237: IFFALSE 7323
// begin uc_side = 3 ;
7239: LD_ADDR_OWVAR 20
7243: PUSH
7244: LD_INT 3
7246: ST_TO_ADDR
// uc_nation = 3 ;
7247: LD_ADDR_OWVAR 21
7251: PUSH
7252: LD_INT 3
7254: ST_TO_ADDR
// hc_gallery =  ;
7255: LD_ADDR_OWVAR 33
7259: PUSH
7260: LD_STRING 
7262: ST_TO_ADDR
// hc_name =  ;
7263: LD_ADDR_OWVAR 26
7267: PUSH
7268: LD_STRING 
7270: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7271: LD_INT 0
7273: PPUSH
7274: LD_INT 4
7276: PPUSH
7277: LD_EXP 25
7281: PPUSH
7282: LD_EXP 26
7286: PPUSH
7287: CALL_OW 12
7291: PPUSH
7292: CALL_OW 380
// un = CreateHuman ;
7296: LD_ADDR_VAR 0 3
7300: PUSH
7301: CALL_OW 44
7305: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7306: LD_VAR 0 3
7310: PPUSH
7311: LD_INT 3
7313: PPUSH
7314: LD_INT 0
7316: PPUSH
7317: CALL_OW 49
// end ;
7321: GO 7236
7323: POP
7324: POP
// end ; end_of_file
7325: LD_VAR 0 1
7329: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7330: LD_INT 0
7332: PPUSH
7333: PPUSH
// if exist_mode then
7334: LD_VAR 0 2
7338: IFFALSE 7357
// unit := CreateCharacter ( ident ) else
7340: LD_ADDR_VAR 0 4
7344: PUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 34
7354: ST_TO_ADDR
7355: GO 7372
// unit := NewCharacter ( ident ) ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 25
7371: ST_TO_ADDR
// result := unit ;
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: LD_VAR 0 4
7381: ST_TO_ADDR
// end ;
7382: LD_VAR 0 3
7386: RET
// export function Video ( mode ) ; begin
7387: LD_INT 0
7389: PPUSH
// ingame_video = mode ;
7390: LD_ADDR_OWVAR 52
7394: PUSH
7395: LD_VAR 0 1
7399: ST_TO_ADDR
// interface_hidden = mode ;
7400: LD_ADDR_OWVAR 54
7404: PUSH
7405: LD_VAR 0 1
7409: ST_TO_ADDR
// end ;
7410: LD_VAR 0 2
7414: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7415: LD_INT 0
7417: PPUSH
7418: PPUSH
7419: PPUSH
// rnd = rand ( 1 , characters ) ;
7420: LD_ADDR_VAR 0 6
7424: PUSH
7425: LD_INT 1
7427: PPUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 12
7437: ST_TO_ADDR
// for i = 1 to characters do
7438: LD_ADDR_VAR 0 5
7442: PUSH
7443: DOUBLE
7444: LD_INT 1
7446: DEC
7447: ST_TO_ADDR
7448: LD_VAR 0 1
7452: PUSH
7453: FOR_TO
7454: IFFALSE 7564
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7456: LD_VAR 0 5
7460: PUSH
7461: LD_VAR 0 6
7465: EQUAL
7466: PUSH
7467: LD_VAR 0 1
7471: PUSH
7472: LD_VAR 0 5
7476: ARRAY
7477: PPUSH
7478: CALL_OW 258
7482: PUSH
7483: LD_INT 1
7485: EQUAL
7486: AND
7487: IFFALSE 7509
// Say ( characters [ i ] , dialogMID ) ;
7489: LD_VAR 0 1
7493: PUSH
7494: LD_VAR 0 5
7498: ARRAY
7499: PPUSH
7500: LD_VAR 0 2
7504: PPUSH
7505: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7509: LD_VAR 0 5
7513: PUSH
7514: LD_VAR 0 6
7518: EQUAL
7519: PUSH
7520: LD_VAR 0 1
7524: PUSH
7525: LD_VAR 0 5
7529: ARRAY
7530: PPUSH
7531: CALL_OW 258
7535: PUSH
7536: LD_INT 2
7538: EQUAL
7539: AND
7540: IFFALSE 7562
// Say ( characters [ i ] , dialogFID ) ;
7542: LD_VAR 0 1
7546: PUSH
7547: LD_VAR 0 5
7551: ARRAY
7552: PPUSH
7553: LD_VAR 0 3
7557: PPUSH
7558: CALL_OW 88
// end ;
7562: GO 7453
7564: POP
7565: POP
// end ;
7566: LD_VAR 0 4
7570: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7571: LD_INT 0
7573: PPUSH
7574: PPUSH
7575: PPUSH
// uc_side := GetSide ( b ) ;
7576: LD_ADDR_OWVAR 20
7580: PUSH
7581: LD_VAR 0 2
7585: PPUSH
7586: CALL_OW 255
7590: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7591: LD_ADDR_OWVAR 21
7595: PUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: CALL_OW 248
7605: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7606: LD_INT 0
7608: PPUSH
7609: LD_INT 1
7611: PPUSH
7612: LD_VAR 0 1
7616: PPUSH
7617: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7621: LD_ADDR_VAR 0 5
7625: PUSH
7626: LD_VAR 0 2
7630: PPUSH
7631: CALL_OW 254
7635: PUSH
7636: LD_INT 3
7638: MINUS
7639: ST_TO_ADDR
// if dir < 0 then
7640: LD_VAR 0 5
7644: PUSH
7645: LD_INT 0
7647: LESS
7648: IFFALSE 7664
// dir := 6 + dir ;
7650: LD_ADDR_VAR 0 5
7654: PUSH
7655: LD_INT 6
7657: PUSH
7658: LD_VAR 0 5
7662: PLUS
7663: ST_TO_ADDR
// un := CreateHuman ;
7664: LD_ADDR_VAR 0 4
7668: PUSH
7669: CALL_OW 44
7673: ST_TO_ADDR
// SetDir ( un , dir ) ;
7674: LD_VAR 0 4
7678: PPUSH
7679: LD_VAR 0 5
7683: PPUSH
7684: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7688: LD_VAR 0 4
7692: PPUSH
7693: LD_VAR 0 2
7697: PPUSH
7698: CALL_OW 52
// end ;
7702: LD_VAR 0 3
7706: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7707: LD_INT 0
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
// for i = 1 to count do
7713: LD_ADDR_VAR 0 8
7717: PUSH
7718: DOUBLE
7719: LD_INT 1
7721: DEC
7722: ST_TO_ADDR
7723: LD_VAR 0 6
7727: PUSH
7728: FOR_TO
7729: IFFALSE 7810
// begin uc_side = side ;
7731: LD_ADDR_OWVAR 20
7735: PUSH
7736: LD_VAR 0 1
7740: ST_TO_ADDR
// uc_nation = nation ;
7741: LD_ADDR_OWVAR 21
7745: PUSH
7746: LD_VAR 0 2
7750: ST_TO_ADDR
// hc_gallery =  ;
7751: LD_ADDR_OWVAR 33
7755: PUSH
7756: LD_STRING 
7758: ST_TO_ADDR
// hc_name =  ;
7759: LD_ADDR_OWVAR 26
7763: PUSH
7764: LD_STRING 
7766: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7767: LD_INT 0
7769: PPUSH
7770: LD_VAR 0 5
7774: PPUSH
7775: LD_VAR 0 4
7779: PPUSH
7780: CALL_OW 380
// un = CreateHuman ;
7784: LD_ADDR_VAR 0 10
7788: PUSH
7789: CALL_OW 44
7793: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7794: LD_VAR 0 10
7798: PPUSH
7799: LD_VAR 0 3
7803: PPUSH
7804: CALL_OW 52
// end ;
7808: GO 7728
7810: POP
7811: POP
// end ;
7812: LD_VAR 0 7
7816: RET
// export function PrepareDifficulty ; begin
7817: LD_INT 0
7819: PPUSH
// if Difficulty = 1 then
7820: LD_OWVAR 67
7824: PUSH
7825: LD_INT 1
7827: EQUAL
7828: IFFALSE 7846
// begin RuSolMinLevel = 4 ;
7830: LD_ADDR_EXP 25
7834: PUSH
7835: LD_INT 4
7837: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7838: LD_ADDR_EXP 26
7842: PUSH
7843: LD_INT 6
7845: ST_TO_ADDR
// end ; if Difficulty = 2 then
7846: LD_OWVAR 67
7850: PUSH
7851: LD_INT 2
7853: EQUAL
7854: IFFALSE 7924
// begin RuSolMinLevel = 5 ;
7856: LD_ADDR_EXP 25
7860: PUSH
7861: LD_INT 5
7863: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7864: LD_ADDR_EXP 26
7868: PUSH
7869: LD_INT 6
7871: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7872: LD_INT 51
7874: PPUSH
7875: LD_INT 3
7877: PPUSH
7878: LD_INT 1
7880: PPUSH
7881: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7885: LD_INT 57
7887: PPUSH
7888: LD_INT 3
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7898: LD_INT 57
7900: PPUSH
7901: LD_INT 6
7903: PPUSH
7904: LD_INT 2
7906: PPUSH
7907: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7911: LD_INT 51
7913: PPUSH
7914: LD_INT 6
7916: PPUSH
7917: LD_INT 2
7919: PPUSH
7920: CALL_OW 322
// end ; if Difficulty = 3 then
7924: LD_OWVAR 67
7928: PUSH
7929: LD_INT 3
7931: EQUAL
7932: IFFALSE 8015
// begin RuSolMinLevel = 5 ;
7934: LD_ADDR_EXP 25
7938: PUSH
7939: LD_INT 5
7941: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7942: LD_ADDR_EXP 26
7946: PUSH
7947: LD_INT 6
7949: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 3
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7963: LD_INT 51
7965: PPUSH
7966: LD_INT 3
7968: PPUSH
7969: LD_INT 1
7971: PPUSH
7972: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7976: LD_INT 52
7978: PPUSH
7979: LD_INT 3
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7989: LD_INT 57
7991: PPUSH
7992: LD_INT 6
7994: PPUSH
7995: LD_INT 2
7997: PPUSH
7998: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
8002: LD_INT 52
8004: PPUSH
8005: LD_INT 6
8007: PPUSH
8008: LD_INT 2
8010: PPUSH
8011: CALL_OW 322
// end ; end ;
8015: LD_VAR 0 1
8019: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
8020: LD_INT 0
8022: PPUSH
8023: PPUSH
8024: PPUSH
8025: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8026: LD_ADDR_VAR 0 3
8030: PUSH
8031: LD_INT 22
8033: PUSH
8034: LD_INT 3
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 25
8043: PUSH
8044: LD_INT 2
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: LD_INT 75
8070: PUSH
8071: LD_INT 79
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: LD_INT 113
8088: PUSH
8089: LD_INT 94
8091: PUSH
8092: LD_INT 4
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 29
8103: PUSH
8104: LD_INT 106
8106: PUSH
8107: LD_INT 97
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 26
8121: PUSH
8122: LD_INT 93
8124: PUSH
8125: LD_INT 97
8127: PUSH
8128: LD_INT 5
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 100
8142: PUSH
8143: LD_INT 89
8145: PUSH
8146: LD_INT 3
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 17
8157: PUSH
8158: LD_INT 96
8160: PUSH
8161: LD_INT 89
8163: PUSH
8164: LD_INT 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 78
8178: PUSH
8179: LD_INT 94
8181: PUSH
8182: LD_INT 1
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 95
8196: PUSH
8197: LD_INT 82
8199: PUSH
8200: LD_INT 3
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 32
8211: PUSH
8212: LD_INT 104
8214: PUSH
8215: LD_INT 85
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: LD_INT 81
8232: PUSH
8233: LD_INT 78
8235: PUSH
8236: LD_INT 2
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 109
8250: PUSH
8251: LD_INT 90
8253: PUSH
8254: LD_INT 3
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 33
8265: PUSH
8266: LD_INT 88
8268: PUSH
8269: LD_INT 79
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 33
8283: PUSH
8284: LD_INT 76
8286: PUSH
8287: LD_INT 87
8289: PUSH
8290: LD_INT 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 26
8301: PUSH
8302: LD_INT 96
8304: PUSH
8305: LD_INT 97
8307: PUSH
8308: LD_INT 5
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 26
8319: PUSH
8320: LD_INT 85
8322: PUSH
8323: LD_INT 84
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 6
8337: PUSH
8338: LD_INT 88
8340: PUSH
8341: LD_INT 95
8343: PUSH
8344: LD_INT 0
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 19
8355: PUSH
8356: LD_INT 103
8358: PUSH
8359: LD_INT 89
8361: PUSH
8362: LD_INT 4
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 16
8373: PUSH
8374: LD_INT 97
8376: PUSH
8377: LD_INT 86
8379: PUSH
8380: LD_INT 2
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 24
8391: PUSH
8392: LD_INT 100
8394: PUSH
8395: LD_INT 85
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: ST_TO_ADDR
// for i := 1 to buildingsTab do
8428: LD_ADDR_VAR 0 2
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: LD_VAR 0 4
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8517
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8446: LD_VAR 0 3
8450: PPUSH
8451: LD_VAR 0 4
8455: PUSH
8456: LD_VAR 0 2
8460: ARRAY
8461: PUSH
8462: LD_INT 1
8464: ARRAY
8465: PPUSH
8466: LD_VAR 0 4
8470: PUSH
8471: LD_VAR 0 2
8475: ARRAY
8476: PUSH
8477: LD_INT 2
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 4
8485: PUSH
8486: LD_VAR 0 2
8490: ARRAY
8491: PUSH
8492: LD_INT 3
8494: ARRAY
8495: PPUSH
8496: LD_VAR 0 4
8500: PUSH
8501: LD_VAR 0 2
8505: ARRAY
8506: PUSH
8507: LD_INT 4
8509: ARRAY
8510: PPUSH
8511: CALL_OW 205
8515: GO 8443
8517: POP
8518: POP
// end ;
8519: LD_VAR 0 1
8523: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8524: LD_INT 0
8526: PPUSH
8527: PPUSH
// for i in charactersList do
8528: LD_ADDR_VAR 0 4
8532: PUSH
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_IN
8539: IFFALSE 8568
// begin if IsOk ( i ) then
8541: LD_VAR 0 4
8545: PPUSH
8546: CALL_OW 302
8550: IFFALSE 8566
// SaveCharacters ( i , ident ) ;
8552: LD_VAR 0 4
8556: PPUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 38
// end ;
8566: GO 8538
8568: POP
8569: POP
// end ;
8570: LD_VAR 0 3
8574: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8575: LD_INT 0
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8582: LD_ADDR_VAR 0 8
8586: PUSH
8587: LD_INT 48
8589: PUSH
8590: LD_INT 49
8592: PUSH
8593: LD_INT 50
8595: PUSH
8596: LD_INT 20
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: LD_INT 51
8604: PUSH
8605: LD_INT 52
8607: PUSH
8608: LD_INT 69
8610: PUSH
8611: LD_INT 39
8613: PUSH
8614: LD_INT 34
8616: PUSH
8617: LD_INT 40
8619: PUSH
8620: LD_INT 53
8622: PUSH
8623: LD_INT 71
8625: PUSH
8626: LD_INT 57
8628: PUSH
8629: LD_INT 58
8631: PUSH
8632: LD_INT 44
8634: PUSH
8635: LD_INT 32
8637: PUSH
8638: LD_INT 27
8640: PUSH
8641: LD_INT 23
8643: PUSH
8644: LD_INT 33
8646: PUSH
8647: LD_INT 59
8649: PUSH
8650: LD_INT 54
8652: PUSH
8653: LD_INT 55
8655: PUSH
8656: LD_INT 56
8658: PUSH
8659: LD_INT 63
8661: PUSH
8662: LD_INT 64
8664: PUSH
8665: LD_INT 65
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 31
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 22
8679: PUSH
8680: LD_INT 25
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8717: LD_ADDR_VAR 0 5
8721: PUSH
8722: DOUBLE
8723: LD_INT 1
8725: DEC
8726: ST_TO_ADDR
8727: LD_VAR 0 8
8731: PUSH
8732: FOR_TO
8733: IFFALSE 8809
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8735: LD_VAR 0 8
8739: PUSH
8740: LD_VAR 0 5
8744: ARRAY
8745: PPUSH
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 321
8755: PUSH
8756: LD_INT 1
8758: EQUAL
8759: PUSH
8760: LD_VAR 0 8
8764: PUSH
8765: LD_VAR 0 5
8769: ARRAY
8770: PPUSH
8771: LD_VAR 0 3
8775: PPUSH
8776: CALL_OW 482
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8807
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8787: LD_VAR 0 2
8791: PPUSH
8792: LD_VAR 0 8
8796: PUSH
8797: LD_VAR 0 5
8801: ARRAY
8802: PPUSH
8803: CALL_OW 184
8807: GO 8732
8809: POP
8810: POP
// end ;
8811: LD_VAR 0 4
8815: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8816: LD_INT 0
8818: PPUSH
8819: PPUSH
8820: PPUSH
8821: PPUSH
8822: PPUSH
8823: PPUSH
8824: PPUSH
8825: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8826: LD_ADDR_VAR 0 6
8830: PUSH
8831: LD_VAR 0 2
8835: PPUSH
8836: LD_INT 22
8838: PUSH
8839: LD_VAR 0 1
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 56
8850: PUSH
8851: EMPTY
8852: LIST
8853: PUSH
8854: LD_INT 24
8856: PUSH
8857: LD_INT 700
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 3
8866: PUSH
8867: LD_INT 60
8869: PUSH
8870: EMPTY
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: LD_INT 25
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 25
8892: PUSH
8893: LD_INT 5
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 25
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 25
8912: PUSH
8913: LD_INT 9
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: PPUSH
8934: CALL_OW 70
8938: PUSH
8939: LD_EXP 24
8943: PUSH
8944: EMPTY
8945: LIST
8946: DIFF
8947: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8948: LD_ADDR_VAR 0 7
8952: PUSH
8953: LD_VAR 0 2
8957: PPUSH
8958: LD_INT 22
8960: PUSH
8961: LD_VAR 0 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 30
8972: PUSH
8973: LD_INT 32
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 58
8982: PUSH
8983: EMPTY
8984: LIST
8985: PUSH
8986: LD_INT 24
8988: PUSH
8989: LD_INT 251
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 70
9006: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9007: LD_ADDR_VAR 0 9
9011: PUSH
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 30
9044: PUSH
9045: LD_INT 5
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 24
9059: PUSH
9060: LD_INT 251
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: PPUSH
9072: CALL_OW 70
9076: ST_TO_ADDR
// if barrackList > 0 then
9077: LD_VAR 0 9
9081: PUSH
9082: LD_INT 0
9084: GREATER
9085: IFFALSE 9233
// begin if turretList = 0 then
9087: LD_VAR 0 7
9091: PUSH
9092: LD_INT 0
9094: EQUAL
9095: IFFALSE 9137
// begin if soldiers_list > 0 then
9097: LD_VAR 0 6
9101: PUSH
9102: LD_INT 0
9104: GREATER
9105: IFFALSE 9135
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9107: LD_VAR 0 6
9111: PPUSH
9112: LD_VAR 0 9
9116: PUSH
9117: LD_INT 1
9119: PPUSH
9120: LD_VAR 0 9
9124: PPUSH
9125: CALL_OW 12
9129: ARRAY
9130: PPUSH
9131: CALL_OW 120
// end else
9135: GO 9233
// begin for i in barrackList do
9137: LD_ADDR_VAR 0 4
9141: PUSH
9142: LD_VAR 0 9
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9231
// begin insideUnits = UnitsInside ( i ) ;
9150: LD_ADDR_VAR 0 10
9154: PUSH
9155: LD_VAR 0 4
9159: PPUSH
9160: CALL_OW 313
9164: ST_TO_ADDR
// if insideUnits > 0 then
9165: LD_VAR 0 10
9169: PUSH
9170: LD_INT 0
9172: GREATER
9173: IFFALSE 9197
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9175: LD_VAR 0 10
9179: PUSH
9180: LD_INT 1
9182: ARRAY
9183: PPUSH
9184: LD_VAR 0 7
9188: PUSH
9189: LD_INT 1
9191: ARRAY
9192: PPUSH
9193: CALL_OW 120
// if soldiers_list > 0 then
9197: LD_VAR 0 6
9201: PUSH
9202: LD_INT 0
9204: GREATER
9205: IFFALSE 9229
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9207: LD_VAR 0 6
9211: PUSH
9212: LD_INT 1
9214: ARRAY
9215: PPUSH
9216: LD_VAR 0 7
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 120
// end ;
9229: GO 9147
9231: POP
9232: POP
// end ; end ; end ;
9233: LD_VAR 0 3
9237: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9238: LD_INT 0
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
9244: PPUSH
9245: PPUSH
// for i = 1 to vehCount do
9246: LD_ADDR_VAR 0 8
9250: PUSH
9251: DOUBLE
9252: LD_INT 1
9254: DEC
9255: ST_TO_ADDR
9256: LD_VAR 0 6
9260: PUSH
9261: FOR_TO
9262: IFFALSE 9469
// begin uc_side = side ;
9264: LD_ADDR_OWVAR 20
9268: PUSH
9269: LD_VAR 0 1
9273: ST_TO_ADDR
// uc_nation = nation ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_VAR 0 3
9283: ST_TO_ADDR
// vc_Chassis = 22 ;
9284: LD_ADDR_OWVAR 37
9288: PUSH
9289: LD_INT 22
9291: ST_TO_ADDR
// vc_engine = 1 ;
9292: LD_ADDR_OWVAR 39
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// vc_control = 1 ;
9300: LD_ADDR_OWVAR 38
9304: PUSH
9305: LD_INT 1
9307: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9308: LD_ADDR_OWVAR 40
9312: PUSH
9313: LD_INT 43
9315: PUSH
9316: LD_INT 44
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 1
9325: PPUSH
9326: LD_INT 2
9328: PPUSH
9329: CALL_OW 12
9333: ARRAY
9334: ST_TO_ADDR
// veh = CreateVehicle ;
9335: LD_ADDR_VAR 0 12
9339: PUSH
9340: CALL_OW 45
9344: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9345: LD_VAR 0 12
9349: PPUSH
9350: LD_VAR 0 2
9354: PPUSH
9355: LD_INT 0
9357: PPUSH
9358: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9362: LD_ADDR_EXP 32
9366: PUSH
9367: LD_EXP 32
9371: PUSH
9372: LD_VAR 0 12
9376: ADD
9377: ST_TO_ADDR
// hc_class = 3 ;
9378: LD_ADDR_OWVAR 28
9382: PUSH
9383: LD_INT 3
9385: ST_TO_ADDR
// hc_name =  ;
9386: LD_ADDR_OWVAR 26
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// hc_gallery =  ;
9394: LD_ADDR_OWVAR 33
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9402: LD_INT 0
9404: PPUSH
9405: LD_INT 3
9407: PPUSH
9408: LD_EXP 25
9412: PPUSH
9413: LD_EXP 26
9417: PPUSH
9418: CALL_OW 12
9422: PPUSH
9423: CALL_OW 380
// un = CreateHuman ;
9427: LD_ADDR_VAR 0 10
9431: PUSH
9432: CALL_OW 44
9436: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9437: LD_VAR 0 10
9441: PPUSH
9442: LD_VAR 0 12
9446: PPUSH
9447: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9451: LD_ADDR_EXP 32
9455: PUSH
9456: LD_EXP 32
9460: PUSH
9461: LD_VAR 0 10
9465: ADD
9466: ST_TO_ADDR
// end ;
9467: GO 9261
9469: POP
9470: POP
// end ;
9471: LD_VAR 0 7
9475: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9476: LD_INT 0
9478: PPUSH
9479: PPUSH
9480: PPUSH
9481: PPUSH
9482: PPUSH
9483: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9484: LD_VAR 0 2
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: EMPTY
9502: LIST
9503: PPUSH
9504: CALL_OW 70
9508: PUSH
9509: LD_INT 0
9511: EQUAL
9512: PUSH
9513: LD_EXP 32
9517: AND
9518: IFFALSE 9805
// begin for i in defenders_list do
9520: LD_ADDR_VAR 0 4
9524: PUSH
9525: LD_EXP 32
9529: PUSH
9530: FOR_IN
9531: IFFALSE 9803
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9533: LD_VAR 0 4
9537: PPUSH
9538: LD_INT 63
9540: PPUSH
9541: LD_INT 75
9543: PPUSH
9544: CALL_OW 297
9548: PUSH
9549: LD_INT 8
9551: GREATER
9552: PUSH
9553: LD_VAR 0 4
9557: PPUSH
9558: CALL_OW 314
9562: NOT
9563: AND
9564: IFFALSE 9583
// ComMoveXY ( i , 63 , 75 ) else
9566: LD_VAR 0 4
9570: PPUSH
9571: LD_INT 63
9573: PPUSH
9574: LD_INT 75
9576: PPUSH
9577: CALL_OW 111
9581: GO 9801
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9583: LD_VAR 0 4
9587: PPUSH
9588: CALL_OW 257
9592: PUSH
9593: LD_INT 3
9595: EQUAL
9596: PUSH
9597: LD_VAR 0 4
9601: PPUSH
9602: CALL_OW 310
9606: NOT
9607: AND
9608: PUSH
9609: LD_VAR 0 4
9613: PPUSH
9614: CALL_OW 314
9618: NOT
9619: AND
9620: IFFALSE 9673
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9622: LD_VAR 0 4
9626: PPUSH
9627: LD_EXP 32
9631: PPUSH
9632: LD_INT 58
9634: PUSH
9635: EMPTY
9636: LIST
9637: PUSH
9638: LD_INT 24
9640: PUSH
9641: LD_INT 1000
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PPUSH
9652: CALL_OW 72
9656: PPUSH
9657: LD_VAR 0 4
9661: PPUSH
9662: CALL_OW 74
9666: PPUSH
9667: CALL_OW 120
9671: GO 9801
// if GetFuel ( i ) < 100 then
9673: LD_VAR 0 4
9677: PPUSH
9678: CALL_OW 261
9682: PUSH
9683: LD_INT 100
9685: LESS
9686: IFFALSE 9702
// SetFuel ( defenders_list , 100 ) else
9688: LD_EXP 32
9692: PPUSH
9693: LD_INT 100
9695: PPUSH
9696: CALL_OW 240
9700: GO 9801
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9702: LD_VAR 0 4
9706: PPUSH
9707: CALL_OW 263
9711: PUSH
9712: LD_INT 1
9714: EQUAL
9715: PUSH
9716: LD_VAR 0 4
9720: PPUSH
9721: CALL_OW 256
9725: PUSH
9726: LD_INT 990
9728: LESS
9729: AND
9730: IFFALSE 9801
// begin veh := i ;
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_VAR 0 4
9741: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9742: LD_ADDR_VAR 0 8
9746: PUSH
9747: LD_VAR 0 4
9751: PPUSH
9752: CALL_OW 311
9756: ST_TO_ADDR
// if veh then
9757: LD_VAR 0 7
9761: IFFALSE 9801
// begin ComMoveXY ( i , 63 , 75 ) ;
9763: LD_VAR 0 4
9767: PPUSH
9768: LD_INT 63
9770: PPUSH
9771: LD_INT 75
9773: PPUSH
9774: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9778: LD_VAR 0 7
9782: PPUSH
9783: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9787: LD_VAR 0 8
9791: PPUSH
9792: LD_VAR 0 7
9796: PPUSH
9797: CALL_OW 189
// end ; end ; end ;
9801: GO 9530
9803: POP
9804: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9805: LD_ADDR_VAR 0 6
9809: PUSH
9810: LD_VAR 0 2
9814: PPUSH
9815: LD_INT 22
9817: PUSH
9818: LD_VAR 0 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: PPUSH
9830: CALL_OW 70
9834: ST_TO_ADDR
// if tmp and defenders_list then
9835: LD_VAR 0 6
9839: PUSH
9840: LD_EXP 32
9844: AND
9845: IFFALSE 10014
// for i in defenders_list do
9847: LD_ADDR_VAR 0 4
9851: PUSH
9852: LD_EXP 32
9856: PUSH
9857: FOR_IN
9858: IFFALSE 10012
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 257
9869: PUSH
9870: LD_INT 3
9872: EQUAL
9873: PUSH
9874: LD_VAR 0 4
9878: PPUSH
9879: CALL_OW 310
9883: NOT
9884: AND
9885: IFFALSE 9924
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9887: LD_VAR 0 4
9891: PPUSH
9892: LD_EXP 32
9896: PPUSH
9897: LD_INT 58
9899: PUSH
9900: EMPTY
9901: LIST
9902: PPUSH
9903: CALL_OW 72
9907: PPUSH
9908: LD_VAR 0 4
9912: PPUSH
9913: CALL_OW 74
9917: PPUSH
9918: CALL_OW 120
9922: GO 10010
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9924: LD_VAR 0 4
9928: PPUSH
9929: CALL_OW 314
9933: NOT
9934: PUSH
9935: LD_VAR 0 4
9939: PPUSH
9940: LD_VAR 0 2
9944: PPUSH
9945: CALL_OW 308
9949: AND
9950: IFFALSE 9978
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 6
9961: PPUSH
9962: LD_VAR 0 4
9966: PPUSH
9967: CALL_OW 74
9971: PPUSH
9972: CALL_OW 115
9976: GO 10010
// if not IsInArea ( i , defenseArea ) then
9978: LD_VAR 0 4
9982: PPUSH
9983: LD_VAR 0 2
9987: PPUSH
9988: CALL_OW 308
9992: NOT
9993: IFFALSE 10010
// ComMoveXY ( i , 63 , 75 ) ;
9995: LD_VAR 0 4
9999: PPUSH
10000: LD_INT 63
10002: PPUSH
10003: LD_INT 75
10005: PPUSH
10006: CALL_OW 111
// end ;
10010: GO 9857
10012: POP
10013: POP
// end ;
10014: LD_VAR 0 3
10018: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
10019: LD_INT 0
10021: PPUSH
10022: PPUSH
10023: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
10024: LD_INT 22
10026: PUSH
10027: LD_VAR 0 1
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 21
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 69
10054: PUSH
10055: LD_VAR 0 3
10059: LESSEQUAL
10060: IFFALSE 10168
// begin for i = 1 to vehCount do
10062: LD_ADDR_VAR 0 9
10066: PUSH
10067: DOUBLE
10068: LD_INT 1
10070: DEC
10071: ST_TO_ADDR
10072: LD_VAR 0 3
10076: PUSH
10077: FOR_TO
10078: IFFALSE 10166
// begin weapon = weaponTab [ i ] ;
10080: LD_ADDR_VAR 0 10
10084: PUSH
10085: LD_VAR 0 4
10089: PUSH
10090: LD_VAR 0 9
10094: ARRAY
10095: ST_TO_ADDR
// if weapon = 46 then
10096: LD_VAR 0 10
10100: PUSH
10101: LD_INT 46
10103: EQUAL
10104: IFFALSE 10135
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10106: LD_VAR 0 2
10110: PPUSH
10111: LD_INT 24
10113: PPUSH
10114: LD_VAR 0 5
10118: PPUSH
10119: LD_VAR 0 6
10123: PPUSH
10124: LD_VAR 0 10
10128: PPUSH
10129: CALL_OW 185
// end else
10133: GO 10164
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10135: LD_VAR 0 2
10139: PPUSH
10140: LD_VAR 0 7
10144: PPUSH
10145: LD_VAR 0 5
10149: PPUSH
10150: LD_VAR 0 6
10154: PPUSH
10155: LD_VAR 0 10
10159: PPUSH
10160: CALL_OW 185
// end ; end ;
10164: GO 10077
10166: POP
10167: POP
// end ; end ;
10168: LD_VAR 0 8
10172: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10173: LD_INT 0
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10179: LD_ADDR_VAR 0 8
10183: PUSH
10184: LD_INT 22
10186: PUSH
10187: LD_VAR 0 1
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 2
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 650
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 69
10232: ST_TO_ADDR
// if damageVehicles > 0 then
10233: LD_VAR 0 8
10237: PUSH
10238: LD_INT 0
10240: GREATER
10241: IFFALSE 10262
// ComMoveXY ( damageVehicles , repX , repY ) ;
10243: LD_VAR 0 8
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: LD_VAR 0 4
10257: PPUSH
10258: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10262: LD_VAR 0 8
10266: PPUSH
10267: LD_INT 95
10269: PUSH
10270: LD_VAR 0 2
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 3
10281: PUSH
10282: LD_INT 58
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PPUSH
10296: CALL_OW 72
10300: PUSH
10301: LD_INT 0
10303: GREATER
10304: IFFALSE 10371
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10306: LD_ADDR_VAR 0 6
10310: PUSH
10311: LD_VAR 0 8
10315: PPUSH
10316: LD_INT 95
10318: PUSH
10319: LD_VAR 0 2
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: LD_INT 58
10333: PUSH
10334: EMPTY
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 72
10349: PUSH
10350: FOR_IN
10351: IFFALSE 10369
// ComExitVehicle ( UnitsInside ( i ) ) ;
10353: LD_VAR 0 6
10357: PPUSH
10358: CALL_OW 313
10362: PPUSH
10363: CALL_OW 121
10367: GO 10350
10369: POP
10370: POP
// end ;
10371: LD_VAR 0 5
10375: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10376: LD_INT 0
10378: PPUSH
10379: PPUSH
10380: PPUSH
10381: PPUSH
10382: PPUSH
10383: PPUSH
10384: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10385: LD_ADDR_VAR 0 8
10389: PUSH
10390: LD_INT 22
10392: PUSH
10393: LD_VAR 0 1
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 21
10404: PUSH
10405: LD_INT 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 24
10414: PUSH
10415: LD_INT 250
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: LD_INT 58
10427: PUSH
10428: EMPTY
10429: LIST
10430: PUSH
10431: LD_INT 2
10433: PUSH
10434: LD_INT 34
10436: PUSH
10437: LD_INT 43
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 34
10446: PUSH
10447: LD_INT 44
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 34
10456: PUSH
10457: LD_INT 46
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL_OW 69
10485: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10486: LD_INT 22
10488: PUSH
10489: LD_VAR 0 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 2
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 24
10510: PUSH
10511: LD_INT 1000
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: LD_INT 58
10523: PUSH
10524: EMPTY
10525: LIST
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: LD_INT 34
10532: PUSH
10533: LD_INT 43
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 34
10542: PUSH
10543: LD_INT 44
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 34
10552: PUSH
10553: LD_INT 46
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: LD_INT 6
10587: PUSH
10588: LD_INT 7
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: PUSH
10596: LD_OWVAR 67
10600: ARRAY
10601: GREATEREQUAL
10602: IFFALSE 11167
// repeat wait ( 0 0$1 ) ;
10604: LD_INT 35
10606: PPUSH
10607: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10611: LD_ADDR_VAR 0 8
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_VAR 0 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 21
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 24
10640: PUSH
10641: LD_INT 250
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: LD_INT 34
10653: PUSH
10654: LD_INT 43
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 34
10663: PUSH
10664: LD_INT 44
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 34
10673: PUSH
10674: LD_INT 46
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 3
10689: PUSH
10690: LD_INT 58
10692: PUSH
10693: EMPTY
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: PPUSH
10707: CALL_OW 69
10711: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10712: LD_INT 22
10714: PUSH
10715: LD_VAR 0 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 95
10726: PUSH
10727: LD_VAR 0 2
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: NOT
10745: PUSH
10746: LD_VAR 0 11
10750: PUSH
10751: LD_INT 0
10753: EQUAL
10754: AND
10755: IFFALSE 10810
// for i := 1 to wayX do
10757: LD_ADDR_VAR 0 6
10761: PUSH
10762: DOUBLE
10763: LD_INT 1
10765: DEC
10766: ST_TO_ADDR
10767: LD_VAR 0 3
10771: PUSH
10772: FOR_TO
10773: IFFALSE 10808
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10775: LD_VAR 0 8
10779: PPUSH
10780: LD_VAR 0 3
10784: PUSH
10785: LD_VAR 0 6
10789: ARRAY
10790: PPUSH
10791: LD_VAR 0 4
10795: PUSH
10796: LD_VAR 0 6
10800: ARRAY
10801: PPUSH
10802: CALL_OW 114
10806: GO 10772
10808: POP
10809: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10810: LD_INT 22
10812: PUSH
10813: LD_VAR 0 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 95
10824: PUSH
10825: LD_VAR 0 2
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PPUSH
10838: CALL_OW 69
10842: IFFALSE 11066
// begin seeEnemy = 1 ;
10844: LD_ADDR_VAR 0 11
10848: PUSH
10849: LD_INT 1
10851: ST_TO_ADDR
// for j in vehiclesOK do
10852: LD_ADDR_VAR 0 7
10856: PUSH
10857: LD_VAR 0 8
10861: PUSH
10862: FOR_IN
10863: IFFALSE 11064
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10865: LD_ADDR_VAR 0 9
10869: PUSH
10870: LD_INT 81
10872: PUSH
10873: LD_VAR 0 1
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 101
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PPUSH
10896: CALL_OW 69
10900: PPUSH
10901: LD_VAR 0 7
10905: PPUSH
10906: CALL_OW 74
10910: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10911: LD_ADDR_VAR 0 10
10915: PUSH
10916: LD_INT 81
10918: PUSH
10919: LD_VAR 0 1
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 101
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: LD_INT 59
10943: PUSH
10944: EMPTY
10945: LIST
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 1
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 21
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: PUSH
10978: EMPTY
10979: LIST
10980: PPUSH
10981: CALL_OW 69
10985: PPUSH
10986: LD_VAR 0 7
10990: PPUSH
10991: CALL_OW 74
10995: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10996: LD_VAR 0 7
11000: PPUSH
11001: LD_VAR 0 9
11005: PPUSH
11006: CALL_OW 296
11010: PUSH
11011: LD_INT 8
11013: PLUS
11014: PUSH
11015: LD_VAR 0 7
11019: PPUSH
11020: LD_VAR 0 10
11024: PPUSH
11025: CALL_OW 296
11029: LESS
11030: IFFALSE 11048
// ComAttackUnit ( j , target1 ) else
11032: LD_VAR 0 7
11036: PPUSH
11037: LD_VAR 0 9
11041: PPUSH
11042: CALL_OW 115
11046: GO 11062
// ComAttackUnit ( j , target2 ) ;
11048: LD_VAR 0 7
11052: PPUSH
11053: LD_VAR 0 10
11057: PPUSH
11058: CALL_OW 115
// end ;
11062: GO 10862
11064: POP
11065: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11066: LD_INT 22
11068: PUSH
11069: LD_VAR 0 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 2
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 24
11090: PUSH
11091: LD_INT 250
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 2
11100: PUSH
11101: LD_INT 34
11103: PUSH
11104: LD_INT 43
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 34
11113: PUSH
11114: LD_INT 44
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 34
11123: PUSH
11124: LD_INT 46
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 3
11139: PUSH
11140: LD_INT 58
11142: PUSH
11143: EMPTY
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 69
11161: PUSH
11162: LD_INT 0
11164: EQUAL
11165: IFFALSE 10604
// seeEnemy = 0 ;
11167: LD_ADDR_VAR 0 11
11171: PUSH
11172: LD_INT 0
11174: ST_TO_ADDR
// end ;
11175: LD_VAR 0 5
11179: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11180: LD_INT 0
11182: PPUSH
11183: PPUSH
11184: PPUSH
11185: PPUSH
11186: PPUSH
11187: PPUSH
// repeat wait ( 0 0$1 ) ;
11188: LD_INT 35
11190: PPUSH
11191: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_VAR 0 1
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 21
11214: PUSH
11215: LD_INT 2
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 24
11224: PUSH
11225: LD_INT 651
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: PPUSH
11237: CALL_OW 69
11241: ST_TO_ADDR
// for j in vehiclesOK do
11242: LD_ADDR_VAR 0 4
11246: PUSH
11247: LD_VAR 0 7
11251: PUSH
11252: FOR_IN
11253: IFFALSE 11454
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11255: LD_ADDR_VAR 0 5
11259: PUSH
11260: LD_INT 81
11262: PUSH
11263: LD_VAR 0 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 101
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 69
11290: PPUSH
11291: LD_VAR 0 4
11295: PPUSH
11296: CALL_OW 74
11300: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11301: LD_ADDR_VAR 0 6
11305: PUSH
11306: LD_INT 81
11308: PUSH
11309: LD_VAR 0 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 101
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: LD_INT 59
11333: PUSH
11334: EMPTY
11335: LIST
11336: PUSH
11337: LD_INT 21
11339: PUSH
11340: LD_INT 1
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 21
11349: PUSH
11350: LD_INT 2
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PPUSH
11376: LD_VAR 0 4
11380: PPUSH
11381: CALL_OW 74
11385: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11386: LD_VAR 0 4
11390: PPUSH
11391: LD_VAR 0 5
11395: PPUSH
11396: CALL_OW 296
11400: PUSH
11401: LD_INT 8
11403: PLUS
11404: PUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 6
11414: PPUSH
11415: CALL_OW 296
11419: LESS
11420: IFFALSE 11438
// ComAttackUnit ( j , target1 ) else
11422: LD_VAR 0 4
11426: PPUSH
11427: LD_VAR 0 5
11431: PPUSH
11432: CALL_OW 115
11436: GO 11452
// ComAttackUnit ( j , target2 ) ;
11438: LD_VAR 0 4
11442: PPUSH
11443: LD_VAR 0 6
11447: PPUSH
11448: CALL_OW 115
// end ;
11452: GO 11252
11454: POP
11455: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11456: LD_INT 22
11458: PUSH
11459: LD_VAR 0 1
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 21
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 24
11480: PUSH
11481: LD_INT 250
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: PPUSH
11493: CALL_OW 69
11497: PUSH
11498: LD_INT 0
11500: EQUAL
11501: IFFALSE 11188
// end ;
11503: LD_VAR 0 2
11507: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11508: LD_INT 0
11510: PPUSH
11511: PPUSH
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11516: LD_ADDR_VAR 0 8
11520: PUSH
11521: LD_VAR 0 2
11525: PPUSH
11526: CALL_OW 313
11530: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11531: LD_ADDR_VAR 0 9
11535: PUSH
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 22
11543: PUSH
11544: LD_VAR 0 1
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 25
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 24
11565: PUSH
11566: LD_INT 750
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 3
11575: PUSH
11576: LD_INT 54
11578: PUSH
11579: EMPTY
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: PPUSH
11592: CALL_OW 70
11596: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11597: LD_ADDR_VAR 0 6
11601: PUSH
11602: LD_VAR 0 3
11606: PPUSH
11607: LD_INT 22
11609: PUSH
11610: LD_VAR 0 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 3
11631: PUSH
11632: LD_INT 24
11634: PUSH
11635: LD_INT 1000
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: PPUSH
11654: CALL_OW 70
11658: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11659: LD_VAR 0 6
11663: NOT
11664: PUSH
11665: LD_INT 22
11667: PUSH
11668: LD_VAR 0 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 25
11679: PUSH
11680: LD_INT 2
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 24
11689: PUSH
11690: LD_INT 250
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: PPUSH
11702: CALL_OW 69
11706: NOT
11707: AND
11708: IFFALSE 11712
// exit ;
11710: GO 11909
// if buildings_list > 0 and engineerOkInside then
11712: LD_VAR 0 6
11716: PUSH
11717: LD_INT 0
11719: GREATER
11720: PUSH
11721: LD_VAR 0 8
11725: AND
11726: IFFALSE 11752
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11728: LD_VAR 0 8
11732: PPUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PPUSH
11743: CALL_OW 72
11747: PPUSH
11748: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11752: LD_VAR 0 6
11756: PUSH
11757: LD_INT 0
11759: GREATER
11760: PUSH
11761: LD_VAR 0 9
11765: PUSH
11766: LD_INT 0
11768: GREATER
11769: AND
11770: IFFALSE 11790
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11772: LD_VAR 0 9
11776: PPUSH
11777: LD_VAR 0 6
11781: PUSH
11782: LD_INT 1
11784: ARRAY
11785: PPUSH
11786: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11790: LD_VAR 0 6
11794: PUSH
11795: LD_INT 0
11797: EQUAL
11798: PUSH
11799: LD_VAR 0 4
11803: PUSH
11804: LD_INT 0
11806: EQUAL
11807: AND
11808: PUSH
11809: LD_VAR 0 9
11813: PUSH
11814: LD_INT 0
11816: GREATER
11817: AND
11818: IFFALSE 11834
// ComEnterUnit ( engineerOkOutside , building ) ;
11820: LD_VAR 0 9
11824: PPUSH
11825: LD_VAR 0 2
11829: PPUSH
11830: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11834: LD_VAR 0 9
11838: PUSH
11839: LD_INT 0
11841: GREATER
11842: PUSH
11843: LD_VAR 0 6
11847: PUSH
11848: LD_INT 0
11850: EQUAL
11851: AND
11852: PUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 0
11860: GREATER
11861: AND
11862: IFFALSE 11909
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11864: LD_VAR 0 9
11868: PPUSH
11869: LD_VAR 0 4
11873: PUSH
11874: LD_INT 1
11876: ARRAY
11877: PPUSH
11878: LD_VAR 0 4
11882: PUSH
11883: LD_INT 2
11885: ARRAY
11886: PPUSH
11887: LD_VAR 0 4
11891: PUSH
11892: LD_INT 3
11894: ARRAY
11895: PPUSH
11896: LD_VAR 0 4
11900: PUSH
11901: LD_INT 4
11903: ARRAY
11904: PPUSH
11905: CALL_OW 145
// end ;
11909: LD_VAR 0 5
11913: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11914: LD_INT 0
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
11924: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11925: LD_ADDR_VAR 0 6
11929: PUSH
11930: LD_INT 22
11932: PUSH
11933: LD_VAR 0 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 4
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 23
11954: PUSH
11955: LD_INT 2
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 24
11964: PUSH
11965: LD_INT 251
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: PPUSH
11978: CALL_OW 69
11982: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11983: LD_ADDR_VAR 0 7
11987: PUSH
11988: LD_VAR 0 3
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_VAR 0 1
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 23
12007: PUSH
12008: LD_INT 2
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 25
12017: PUSH
12018: LD_INT 4
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 50
12027: PUSH
12028: EMPTY
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 70
12041: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12042: LD_ADDR_VAR 0 10
12046: PUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_INT 22
12054: PUSH
12055: LD_VAR 0 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 21
12066: PUSH
12067: LD_INT 1
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 25
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 3
12093: PUSH
12094: LD_INT 24
12096: PUSH
12097: LD_INT 750
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 70
12118: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12119: LD_ADDR_VAR 0 11
12123: PUSH
12124: LD_VAR 0 2
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_VAR 0 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 21
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 3
12153: PUSH
12154: LD_INT 25
12156: PUSH
12157: LD_INT 3
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 3
12170: PUSH
12171: LD_INT 24
12173: PUSH
12174: LD_INT 1000
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 70
12195: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12196: LD_VAR 0 10
12200: NOT
12201: PUSH
12202: LD_VAR 0 11
12206: NOT
12207: AND
12208: PUSH
12209: LD_VAR 0 6
12213: NOT
12214: AND
12215: IFFALSE 12219
// exit ;
12217: GO 12453
// if damageUnits > 0 and sci_list > 0 then
12219: LD_VAR 0 10
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: PUSH
12228: LD_VAR 0 6
12232: PUSH
12233: LD_INT 0
12235: GREATER
12236: AND
12237: IFFALSE 12253
// ComMoveToArea ( damageUnits , healArea ) ;
12239: LD_VAR 0 10
12243: PPUSH
12244: LD_VAR 0 2
12248: PPUSH
12249: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12253: LD_VAR 0 11
12257: PUSH
12258: LD_INT 0
12260: GREATER
12261: PUSH
12262: LD_VAR 0 6
12266: PUSH
12267: LD_INT 0
12269: GREATER
12270: AND
12271: IFFALSE 12282
// ComExitBuilding ( sci_list ) ;
12273: LD_VAR 0 6
12277: PPUSH
12278: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12282: LD_VAR 0 11
12286: PUSH
12287: LD_INT 0
12289: GREATER
12290: PUSH
12291: LD_VAR 0 7
12295: PUSH
12296: LD_INT 0
12298: GREATER
12299: AND
12300: IFFALSE 12320
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12302: LD_VAR 0 7
12306: PPUSH
12307: LD_VAR 0 11
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12320: LD_VAR 0 10
12324: PUSH
12325: LD_INT 0
12327: EQUAL
12328: PUSH
12329: LD_VAR 0 11
12333: PUSH
12334: LD_INT 0
12336: EQUAL
12337: AND
12338: PUSH
12339: LD_VAR 0 7
12343: PUSH
12344: LD_INT 0
12346: GREATER
12347: AND
12348: IFFALSE 12453
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12350: LD_ADDR_VAR 0 12
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_VAR 0 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 30
12379: PUSH
12380: LD_INT 8
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 69
12396: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12397: LD_ADDR_VAR 0 13
12401: PUSH
12402: LD_INT 1
12404: PPUSH
12405: LD_VAR 0 12
12409: PPUSH
12410: CALL_OW 12
12414: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12415: LD_VAR 0 7
12419: PPUSH
12420: LD_INT 3
12422: PUSH
12423: LD_INT 60
12425: PUSH
12426: EMPTY
12427: LIST
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PPUSH
12433: CALL_OW 72
12437: PPUSH
12438: LD_VAR 0 12
12442: PUSH
12443: LD_VAR 0 13
12447: ARRAY
12448: PPUSH
12449: CALL_OW 120
// end ; end ;
12453: LD_VAR 0 5
12457: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12458: LD_INT 0
12460: PPUSH
12461: PPUSH
12462: PPUSH
12463: PPUSH
12464: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12465: LD_ADDR_VAR 0 6
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_VAR 0 1
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 31
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 32
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 33
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 30
12517: PUSH
12518: LD_INT 4
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 30
12527: PUSH
12528: LD_INT 5
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12552: LD_ADDR_VAR 0 7
12556: PUSH
12557: LD_INT 22
12559: PUSH
12560: LD_VAR 0 2
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 21
12571: PUSH
12572: LD_INT 3
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 58
12581: PUSH
12582: EMPTY
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: PPUSH
12590: CALL_OW 69
12594: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12595: LD_VAR 0 6
12599: PUSH
12600: LD_INT 0
12602: GREATER
12603: PUSH
12604: LD_VAR 0 7
12608: PUSH
12609: LD_INT 0
12611: GREATER
12612: AND
12613: IFFALSE 12683
// begin for i in turretsList do
12615: LD_ADDR_VAR 0 4
12619: PUSH
12620: LD_VAR 0 6
12624: PUSH
12625: FOR_IN
12626: IFFALSE 12681
// begin for j in enemyBuildings do
12628: LD_ADDR_VAR 0 5
12632: PUSH
12633: LD_VAR 0 7
12637: PUSH
12638: FOR_IN
12639: IFFALSE 12677
// begin if GetDistUnits ( i , j ) < 20 then
12641: LD_VAR 0 4
12645: PPUSH
12646: LD_VAR 0 5
12650: PPUSH
12651: CALL_OW 296
12655: PUSH
12656: LD_INT 20
12658: LESS
12659: IFFALSE 12675
// begin ComAttackUnit ( i , j ) ;
12661: LD_VAR 0 4
12665: PPUSH
12666: LD_VAR 0 5
12670: PPUSH
12671: CALL_OW 115
// end ; end ;
12675: GO 12638
12677: POP
12678: POP
// end ;
12679: GO 12625
12681: POP
12682: POP
// end ; end ;
12683: LD_VAR 0 3
12687: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12688: LD_INT 0
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
12700: PPUSH
// for i = 1 to medicCount do
12701: LD_ADDR_VAR 0 14
12705: PUSH
12706: DOUBLE
12707: LD_INT 1
12709: DEC
12710: ST_TO_ADDR
12711: LD_VAR 0 7
12715: PUSH
12716: FOR_TO
12717: IFFALSE 12799
// begin uc_side = side ;
12719: LD_ADDR_OWVAR 20
12723: PUSH
12724: LD_VAR 0 1
12728: ST_TO_ADDR
// uc_nation = nation ;
12729: LD_ADDR_OWVAR 21
12733: PUSH
12734: LD_VAR 0 2
12738: ST_TO_ADDR
// hc_name =  ;
12739: LD_ADDR_OWVAR 26
12743: PUSH
12744: LD_STRING 
12746: ST_TO_ADDR
// hc_gallery =  ;
12747: LD_ADDR_OWVAR 33
12751: PUSH
12752: LD_STRING 
12754: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12755: LD_INT 0
12757: PPUSH
12758: LD_INT 4
12760: PPUSH
12761: LD_VAR 0 8
12765: PPUSH
12766: CALL_OW 380
// un = CreateHuman ;
12770: LD_ADDR_VAR 0 16
12774: PUSH
12775: CALL_OW 44
12779: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12780: LD_VAR 0 16
12784: PPUSH
12785: LD_VAR 0 9
12789: PPUSH
12790: LD_INT 0
12792: PPUSH
12793: CALL_OW 49
// end ;
12797: GO 12716
12799: POP
12800: POP
// for i = 1 to soldierCount do
12801: LD_ADDR_VAR 0 14
12805: PUSH
12806: DOUBLE
12807: LD_INT 1
12809: DEC
12810: ST_TO_ADDR
12811: LD_VAR 0 3
12815: PUSH
12816: FOR_TO
12817: IFFALSE 12899
// begin uc_side = side ;
12819: LD_ADDR_OWVAR 20
12823: PUSH
12824: LD_VAR 0 1
12828: ST_TO_ADDR
// uc_nation = nation ;
12829: LD_ADDR_OWVAR 21
12833: PUSH
12834: LD_VAR 0 2
12838: ST_TO_ADDR
// hc_name =  ;
12839: LD_ADDR_OWVAR 26
12843: PUSH
12844: LD_STRING 
12846: ST_TO_ADDR
// hc_gallery =  ;
12847: LD_ADDR_OWVAR 33
12851: PUSH
12852: LD_STRING 
12854: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12855: LD_INT 0
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: LD_VAR 0 8
12865: PPUSH
12866: CALL_OW 380
// un = CreateHuman ;
12870: LD_ADDR_VAR 0 16
12874: PUSH
12875: CALL_OW 44
12879: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12880: LD_VAR 0 16
12884: PPUSH
12885: LD_VAR 0 9
12889: PPUSH
12890: LD_INT 0
12892: PPUSH
12893: CALL_OW 49
// end ;
12897: GO 12816
12899: POP
12900: POP
// for i = 1 to sniperCount do
12901: LD_ADDR_VAR 0 14
12905: PUSH
12906: DOUBLE
12907: LD_INT 1
12909: DEC
12910: ST_TO_ADDR
12911: LD_VAR 0 4
12915: PUSH
12916: FOR_TO
12917: IFFALSE 12999
// begin uc_side = side ;
12919: LD_ADDR_OWVAR 20
12923: PUSH
12924: LD_VAR 0 1
12928: ST_TO_ADDR
// uc_nation = nation ;
12929: LD_ADDR_OWVAR 21
12933: PUSH
12934: LD_VAR 0 2
12938: ST_TO_ADDR
// hc_name =  ;
12939: LD_ADDR_OWVAR 26
12943: PUSH
12944: LD_STRING 
12946: ST_TO_ADDR
// hc_gallery =  ;
12947: LD_ADDR_OWVAR 33
12951: PUSH
12952: LD_STRING 
12954: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12955: LD_INT 0
12957: PPUSH
12958: LD_INT 5
12960: PPUSH
12961: LD_VAR 0 8
12965: PPUSH
12966: CALL_OW 380
// un = CreateHuman ;
12970: LD_ADDR_VAR 0 16
12974: PUSH
12975: CALL_OW 44
12979: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12980: LD_VAR 0 16
12984: PPUSH
12985: LD_VAR 0 9
12989: PPUSH
12990: LD_INT 0
12992: PPUSH
12993: CALL_OW 49
// end ;
12997: GO 12916
12999: POP
13000: POP
// for i = 1 to bazookCount do
13001: LD_ADDR_VAR 0 14
13005: PUSH
13006: DOUBLE
13007: LD_INT 1
13009: DEC
13010: ST_TO_ADDR
13011: LD_VAR 0 5
13015: PUSH
13016: FOR_TO
13017: IFFALSE 13099
// begin uc_side = side ;
13019: LD_ADDR_OWVAR 20
13023: PUSH
13024: LD_VAR 0 1
13028: ST_TO_ADDR
// uc_nation = nation ;
13029: LD_ADDR_OWVAR 21
13033: PUSH
13034: LD_VAR 0 2
13038: ST_TO_ADDR
// hc_name =  ;
13039: LD_ADDR_OWVAR 26
13043: PUSH
13044: LD_STRING 
13046: ST_TO_ADDR
// hc_gallery =  ;
13047: LD_ADDR_OWVAR 33
13051: PUSH
13052: LD_STRING 
13054: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13055: LD_INT 0
13057: PPUSH
13058: LD_INT 9
13060: PPUSH
13061: LD_VAR 0 8
13065: PPUSH
13066: CALL_OW 380
// un = CreateHuman ;
13070: LD_ADDR_VAR 0 16
13074: PUSH
13075: CALL_OW 44
13079: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13080: LD_VAR 0 16
13084: PPUSH
13085: LD_VAR 0 9
13089: PPUSH
13090: LD_INT 0
13092: PPUSH
13093: CALL_OW 49
// end ;
13097: GO 13016
13099: POP
13100: POP
// for i = 1 to mortalCount do
13101: LD_ADDR_VAR 0 14
13105: PUSH
13106: DOUBLE
13107: LD_INT 1
13109: DEC
13110: ST_TO_ADDR
13111: LD_VAR 0 6
13115: PUSH
13116: FOR_TO
13117: IFFALSE 13199
// begin uc_side = side ;
13119: LD_ADDR_OWVAR 20
13123: PUSH
13124: LD_VAR 0 1
13128: ST_TO_ADDR
// uc_nation = nation ;
13129: LD_ADDR_OWVAR 21
13133: PUSH
13134: LD_VAR 0 2
13138: ST_TO_ADDR
// hc_name =  ;
13139: LD_ADDR_OWVAR 26
13143: PUSH
13144: LD_STRING 
13146: ST_TO_ADDR
// hc_gallery =  ;
13147: LD_ADDR_OWVAR 33
13151: PUSH
13152: LD_STRING 
13154: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13155: LD_INT 0
13157: PPUSH
13158: LD_INT 8
13160: PPUSH
13161: LD_VAR 0 8
13165: PPUSH
13166: CALL_OW 380
// un = CreateHuman ;
13170: LD_ADDR_VAR 0 16
13174: PUSH
13175: CALL_OW 44
13179: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13180: LD_VAR 0 16
13184: PPUSH
13185: LD_VAR 0 9
13189: PPUSH
13190: LD_INT 0
13192: PPUSH
13193: CALL_OW 49
// end ;
13197: GO 13116
13199: POP
13200: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13201: LD_ADDR_VAR 0 19
13205: PUSH
13206: LD_INT 22
13208: PUSH
13209: LD_VAR 0 1
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 2
13220: PUSH
13221: LD_INT 25
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 25
13233: PUSH
13234: LD_INT 5
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 8
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 9
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PPUSH
13272: CALL_OW 69
13276: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13277: LD_ADDR_VAR 0 18
13281: PUSH
13282: LD_INT 22
13284: PUSH
13285: LD_VAR 0 1
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 25
13296: PUSH
13297: LD_INT 4
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PPUSH
13308: CALL_OW 69
13312: ST_TO_ADDR
// for i in medic_list do
13313: LD_ADDR_VAR 0 14
13317: PUSH
13318: LD_VAR 0 18
13322: PUSH
13323: FOR_IN
13324: IFFALSE 13342
// ComMoveToArea ( i , healArea ) ;
13326: LD_VAR 0 14
13330: PPUSH
13331: LD_VAR 0 10
13335: PPUSH
13336: CALL_OW 113
13340: GO 13323
13342: POP
13343: POP
// if strategy = 1 then
13344: LD_VAR 0 12
13348: PUSH
13349: LD_INT 1
13351: EQUAL
13352: IFFALSE 13898
// begin repeat wait ( 0 0$3 ) ;
13354: LD_INT 105
13356: PPUSH
13357: CALL_OW 67
// for i in soldiersOK_list do
13361: LD_ADDR_VAR 0 14
13365: PUSH
13366: LD_VAR 0 19
13370: PUSH
13371: FOR_IN
13372: IFFALSE 13436
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13374: LD_VAR 0 14
13378: PPUSH
13379: LD_INT 91
13381: PPUSH
13382: LD_INT 63
13384: PPUSH
13385: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13389: LD_VAR 0 14
13393: PPUSH
13394: LD_INT 101
13396: PPUSH
13397: LD_INT 53
13399: PPUSH
13400: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13404: LD_VAR 0 14
13408: PPUSH
13409: LD_INT 75
13411: PPUSH
13412: LD_INT 23
13414: PPUSH
13415: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13419: LD_VAR 0 14
13423: PPUSH
13424: LD_INT 78
13426: PPUSH
13427: LD_INT 8
13429: PPUSH
13430: CALL_OW 174
// end ;
13434: GO 13371
13436: POP
13437: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13438: LD_INT 12
13440: PPUSH
13441: LD_INT 22
13443: PUSH
13444: LD_VAR 0 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 70
13457: PUSH
13458: LD_INT 2
13460: GREATER
13461: IFFALSE 13354
// repeat wait ( 0 0$1 ) ;
13463: LD_INT 35
13465: PPUSH
13466: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13470: LD_ADDR_VAR 0 17
13474: PUSH
13475: LD_INT 22
13477: PUSH
13478: LD_VAR 0 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: LD_INT 3
13492: PUSH
13493: LD_INT 24
13495: PUSH
13496: LD_INT 550
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 24
13509: PUSH
13510: LD_INT 250
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PPUSH
13526: CALL_OW 69
13530: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13531: LD_ADDR_VAR 0 19
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_VAR 0 1
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: LD_INT 25
13553: PUSH
13554: LD_INT 1
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 25
13563: PUSH
13564: LD_INT 5
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 25
13573: PUSH
13574: LD_INT 8
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 25
13583: PUSH
13584: LD_INT 9
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 24
13600: PUSH
13601: LD_INT 1000
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: ST_TO_ADDR
// if medicCount > 0 then
13618: LD_VAR 0 7
13622: PUSH
13623: LD_INT 0
13625: GREATER
13626: IFFALSE 13700
// begin if damageUnit_list > 0 then
13628: LD_VAR 0 17
13632: PUSH
13633: LD_INT 0
13635: GREATER
13636: IFFALSE 13700
// begin for i in damageUnit_list do
13638: LD_ADDR_VAR 0 14
13642: PUSH
13643: LD_VAR 0 17
13647: PUSH
13648: FOR_IN
13649: IFFALSE 13698
// begin ComMoveToArea ( i , healArea ) ;
13651: LD_VAR 0 14
13655: PPUSH
13656: LD_VAR 0 10
13660: PPUSH
13661: CALL_OW 113
// for j in medic_list do
13665: LD_ADDR_VAR 0 15
13669: PUSH
13670: LD_VAR 0 18
13674: PUSH
13675: FOR_IN
13676: IFFALSE 13694
// AddComHeal ( j , i ) ;
13678: LD_VAR 0 15
13682: PPUSH
13683: LD_VAR 0 14
13687: PPUSH
13688: CALL_OW 188
13692: GO 13675
13694: POP
13695: POP
// end ;
13696: GO 13648
13698: POP
13699: POP
// end ; end ; for i in soldiersOK_list do
13700: LD_ADDR_VAR 0 14
13704: PUSH
13705: LD_VAR 0 19
13709: PUSH
13710: FOR_IN
13711: IFFALSE 13887
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13713: LD_ADDR_VAR 0 22
13717: PUSH
13718: LD_INT 22
13720: PUSH
13721: LD_VAR 0 11
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: PPUSH
13735: LD_VAR 0 14
13739: PPUSH
13740: CALL_OW 74
13744: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13745: LD_ADDR_VAR 0 23
13749: PUSH
13750: LD_INT 22
13752: PUSH
13753: LD_VAR 0 11
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 59
13767: PUSH
13768: EMPTY
13769: LIST
13770: PUSH
13771: LD_INT 21
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 21
13783: PUSH
13784: LD_INT 2
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: PPUSH
13804: CALL_OW 69
13808: PPUSH
13809: LD_VAR 0 14
13813: PPUSH
13814: CALL_OW 74
13818: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13819: LD_VAR 0 14
13823: PPUSH
13824: LD_VAR 0 22
13828: PPUSH
13829: CALL_OW 296
13833: PUSH
13834: LD_INT 6
13836: PLUS
13837: PUSH
13838: LD_VAR 0 14
13842: PPUSH
13843: LD_VAR 0 23
13847: PPUSH
13848: CALL_OW 296
13852: LESS
13853: IFFALSE 13871
// begin ComAttackUnit ( i , target1 ) ;
13855: LD_VAR 0 14
13859: PPUSH
13860: LD_VAR 0 22
13864: PPUSH
13865: CALL_OW 115
// end else
13869: GO 13885
// begin ComAttackUnit ( i , target2 ) ;
13871: LD_VAR 0 14
13875: PPUSH
13876: LD_VAR 0 23
13880: PPUSH
13881: CALL_OW 115
// end ; end ;
13885: GO 13710
13887: POP
13888: POP
// until soldiersOK_list = [ ] ;
13889: LD_VAR 0 19
13893: PUSH
13894: EMPTY
13895: EQUAL
13896: IFFALSE 13463
// end ; if strategy = 2 then
13898: LD_VAR 0 12
13902: PUSH
13903: LD_INT 2
13905: EQUAL
13906: IFFALSE 14422
// begin repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in soldiersOK_list do
13915: LD_ADDR_VAR 0 14
13919: PUSH
13920: LD_VAR 0 19
13924: PUSH
13925: FOR_IN
13926: IFFALSE 13960
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13928: LD_VAR 0 14
13932: PPUSH
13933: LD_INT 91
13935: PPUSH
13936: LD_INT 63
13938: PPUSH
13939: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13943: LD_VAR 0 14
13947: PPUSH
13948: LD_INT 75
13950: PPUSH
13951: LD_INT 33
13953: PPUSH
13954: CALL_OW 174
// end ;
13958: GO 13925
13960: POP
13961: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13962: LD_INT 13
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_VAR 0 1
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 70
13981: PUSH
13982: LD_INT 2
13984: GREATER
13985: IFFALSE 13908
// repeat wait ( 0 0$3 ) ;
13987: LD_INT 105
13989: PPUSH
13990: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13994: LD_ADDR_VAR 0 17
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_VAR 0 1
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 1
14013: PUSH
14014: LD_INT 3
14016: PUSH
14017: LD_INT 24
14019: PUSH
14020: LD_INT 550
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 24
14033: PUSH
14034: LD_INT 250
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14055: LD_ADDR_VAR 0 19
14059: PUSH
14060: LD_INT 22
14062: PUSH
14063: LD_VAR 0 1
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: LD_INT 25
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 25
14087: PUSH
14088: LD_INT 5
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: LD_INT 25
14097: PUSH
14098: LD_INT 8
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 25
14107: PUSH
14108: LD_INT 9
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 24
14124: PUSH
14125: LD_INT 1000
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: PPUSH
14137: CALL_OW 69
14141: ST_TO_ADDR
// if medicCount > 0 then
14142: LD_VAR 0 7
14146: PUSH
14147: LD_INT 0
14149: GREATER
14150: IFFALSE 14224
// begin if damageUnit_list > 0 then
14152: LD_VAR 0 17
14156: PUSH
14157: LD_INT 0
14159: GREATER
14160: IFFALSE 14224
// begin for i in damageUnit_list do
14162: LD_ADDR_VAR 0 14
14166: PUSH
14167: LD_VAR 0 17
14171: PUSH
14172: FOR_IN
14173: IFFALSE 14222
// begin ComMoveToArea ( i , healArea ) ;
14175: LD_VAR 0 14
14179: PPUSH
14180: LD_VAR 0 10
14184: PPUSH
14185: CALL_OW 113
// for j in medic_list do
14189: LD_ADDR_VAR 0 15
14193: PUSH
14194: LD_VAR 0 18
14198: PUSH
14199: FOR_IN
14200: IFFALSE 14218
// AddComHeal ( j , i ) ;
14202: LD_VAR 0 15
14206: PPUSH
14207: LD_VAR 0 14
14211: PPUSH
14212: CALL_OW 188
14216: GO 14199
14218: POP
14219: POP
// end ;
14220: GO 14172
14222: POP
14223: POP
// end ; end ; for i in soldiersOK_list do
14224: LD_ADDR_VAR 0 14
14228: PUSH
14229: LD_VAR 0 19
14233: PUSH
14234: FOR_IN
14235: IFFALSE 14411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14237: LD_ADDR_VAR 0 22
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_VAR 0 11
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_VAR 0 14
14263: PPUSH
14264: CALL_OW 74
14268: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14269: LD_ADDR_VAR 0 23
14273: PUSH
14274: LD_INT 22
14276: PUSH
14277: LD_VAR 0 11
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 2
14288: PUSH
14289: LD_INT 59
14291: PUSH
14292: EMPTY
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 21
14307: PUSH
14308: LD_INT 2
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: PPUSH
14328: CALL_OW 69
14332: PPUSH
14333: LD_VAR 0 14
14337: PPUSH
14338: CALL_OW 74
14342: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14343: LD_VAR 0 14
14347: PPUSH
14348: LD_VAR 0 22
14352: PPUSH
14353: CALL_OW 296
14357: PUSH
14358: LD_INT 6
14360: PLUS
14361: PUSH
14362: LD_VAR 0 14
14366: PPUSH
14367: LD_VAR 0 23
14371: PPUSH
14372: CALL_OW 296
14376: LESS
14377: IFFALSE 14395
// begin ComAttackUnit ( i , target1 ) ;
14379: LD_VAR 0 14
14383: PPUSH
14384: LD_VAR 0 22
14388: PPUSH
14389: CALL_OW 115
// end else
14393: GO 14409
// begin ComAttackUnit ( i , target2 ) ;
14395: LD_VAR 0 14
14399: PPUSH
14400: LD_VAR 0 23
14404: PPUSH
14405: CALL_OW 115
// end ; end ;
14409: GO 14234
14411: POP
14412: POP
// until soldiersOK_list = [ ] ;
14413: LD_VAR 0 19
14417: PUSH
14418: EMPTY
14419: EQUAL
14420: IFFALSE 13987
// end ; if strategy = 3 then
14422: LD_VAR 0 12
14426: PUSH
14427: LD_INT 3
14429: EQUAL
14430: IFFALSE 14976
// begin repeat wait ( 0 0$3 ) ;
14432: LD_INT 105
14434: PPUSH
14435: CALL_OW 67
// for i in soldiersOK_list do
14439: LD_ADDR_VAR 0 14
14443: PUSH
14444: LD_VAR 0 19
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14514
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14452: LD_VAR 0 14
14456: PPUSH
14457: LD_INT 63
14459: PPUSH
14460: LD_INT 71
14462: PPUSH
14463: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14467: LD_VAR 0 14
14471: PPUSH
14472: LD_INT 35
14474: PPUSH
14475: LD_INT 44
14477: PPUSH
14478: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14482: LD_VAR 0 14
14486: PPUSH
14487: LD_INT 23
14489: PPUSH
14490: LD_INT 18
14492: PPUSH
14493: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14497: LD_VAR 0 14
14501: PPUSH
14502: LD_INT 26
14504: PPUSH
14505: LD_INT 12
14507: PPUSH
14508: CALL_OW 174
// end ;
14512: GO 14449
14514: POP
14515: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14516: LD_INT 14
14518: PPUSH
14519: LD_INT 22
14521: PUSH
14522: LD_VAR 0 1
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 70
14535: PUSH
14536: LD_INT 2
14538: GREATER
14539: IFFALSE 14432
// repeat wait ( 0 0$1 ) ;
14541: LD_INT 35
14543: PPUSH
14544: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14548: LD_ADDR_VAR 0 17
14552: PUSH
14553: LD_INT 22
14555: PUSH
14556: LD_VAR 0 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 1
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: LD_INT 24
14573: PUSH
14574: LD_INT 550
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 24
14587: PUSH
14588: LD_INT 250
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 69
14608: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14609: LD_ADDR_VAR 0 19
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_VAR 0 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 1
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 25
14641: PUSH
14642: LD_INT 5
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 25
14651: PUSH
14652: LD_INT 8
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 25
14661: PUSH
14662: LD_INT 9
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 24
14678: PUSH
14679: LD_INT 1000
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: ST_TO_ADDR
// if medicCount > 0 then
14696: LD_VAR 0 7
14700: PUSH
14701: LD_INT 0
14703: GREATER
14704: IFFALSE 14778
// begin if damageUnit_list > 0 then
14706: LD_VAR 0 17
14710: PUSH
14711: LD_INT 0
14713: GREATER
14714: IFFALSE 14778
// begin for i in damageUnit_list do
14716: LD_ADDR_VAR 0 14
14720: PUSH
14721: LD_VAR 0 17
14725: PUSH
14726: FOR_IN
14727: IFFALSE 14776
// begin ComMoveToArea ( i , healArea ) ;
14729: LD_VAR 0 14
14733: PPUSH
14734: LD_VAR 0 10
14738: PPUSH
14739: CALL_OW 113
// for j in medic_list do
14743: LD_ADDR_VAR 0 15
14747: PUSH
14748: LD_VAR 0 18
14752: PUSH
14753: FOR_IN
14754: IFFALSE 14772
// AddComHeal ( j , i ) ;
14756: LD_VAR 0 15
14760: PPUSH
14761: LD_VAR 0 14
14765: PPUSH
14766: CALL_OW 188
14770: GO 14753
14772: POP
14773: POP
// end ;
14774: GO 14726
14776: POP
14777: POP
// end ; end ; for i in soldiersOK_list do
14778: LD_ADDR_VAR 0 14
14782: PUSH
14783: LD_VAR 0 19
14787: PUSH
14788: FOR_IN
14789: IFFALSE 14965
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14791: LD_ADDR_VAR 0 22
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_VAR 0 11
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 69
14812: PPUSH
14813: LD_VAR 0 14
14817: PPUSH
14818: CALL_OW 74
14822: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14823: LD_ADDR_VAR 0 23
14827: PUSH
14828: LD_INT 22
14830: PUSH
14831: LD_VAR 0 11
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 2
14842: PUSH
14843: LD_INT 59
14845: PUSH
14846: EMPTY
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: PPUSH
14887: LD_VAR 0 14
14891: PPUSH
14892: CALL_OW 74
14896: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14897: LD_VAR 0 14
14901: PPUSH
14902: LD_VAR 0 22
14906: PPUSH
14907: CALL_OW 296
14911: PUSH
14912: LD_INT 6
14914: PLUS
14915: PUSH
14916: LD_VAR 0 14
14920: PPUSH
14921: LD_VAR 0 23
14925: PPUSH
14926: CALL_OW 296
14930: LESS
14931: IFFALSE 14949
// begin ComAttackUnit ( i , target1 ) ;
14933: LD_VAR 0 14
14937: PPUSH
14938: LD_VAR 0 22
14942: PPUSH
14943: CALL_OW 115
// end else
14947: GO 14963
// begin ComAttackUnit ( i , target2 ) ;
14949: LD_VAR 0 14
14953: PPUSH
14954: LD_VAR 0 23
14958: PPUSH
14959: CALL_OW 115
// end ; end ;
14963: GO 14788
14965: POP
14966: POP
// until soldiersOK_list = [ ] ;
14967: LD_VAR 0 19
14971: PUSH
14972: EMPTY
14973: EQUAL
14974: IFFALSE 14541
// end ; end ;
14976: LD_VAR 0 13
14980: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14981: LD_INT 0
14983: PPUSH
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
14988: PPUSH
14989: PPUSH
14990: PPUSH
14991: PPUSH
14992: PPUSH
14993: PPUSH
// amChassisTab = [ ] ;
14994: LD_ADDR_VAR 0 19
14998: PUSH
14999: EMPTY
15000: ST_TO_ADDR
// arChassisTab = [ ] ;
15001: LD_ADDR_VAR 0 18
15005: PUSH
15006: EMPTY
15007: ST_TO_ADDR
// ruChassisTab = [ ] ;
15008: LD_ADDR_VAR 0 17
15012: PUSH
15013: EMPTY
15014: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15015: LD_INT 35
15017: PPUSH
15018: CALL_OW 67
// if nation = 1 then
15022: LD_VAR 0 5
15026: PUSH
15027: LD_INT 1
15029: EQUAL
15030: IFFALSE 15521
// begin uc_side = side ;
15032: LD_ADDR_OWVAR 20
15036: PUSH
15037: LD_VAR 0 2
15041: ST_TO_ADDR
// uc_nation = nation ;
15042: LD_ADDR_OWVAR 21
15046: PUSH
15047: LD_VAR 0 5
15051: ST_TO_ADDR
// vc_engine = vehengine ;
15052: LD_ADDR_OWVAR 39
15056: PUSH
15057: LD_VAR 0 6
15061: ST_TO_ADDR
// vc_control = vehcontrol ;
15062: LD_ADDR_OWVAR 38
15066: PUSH
15067: LD_VAR 0 7
15071: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15072: LD_ADDR_OWVAR 40
15076: PUSH
15077: LD_VAR 0 10
15081: PUSH
15082: LD_INT 1
15084: PPUSH
15085: LD_VAR 0 10
15089: PPUSH
15090: CALL_OW 12
15094: ARRAY
15095: ST_TO_ADDR
// for j = 1 to AMWeapon do
15096: LD_ADDR_VAR 0 14
15100: PUSH
15101: DOUBLE
15102: LD_INT 1
15104: DEC
15105: ST_TO_ADDR
15106: LD_VAR 0 10
15110: PUSH
15111: FOR_TO
15112: IFFALSE 15413
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15114: LD_VAR 0 10
15118: PUSH
15119: LD_VAR 0 14
15123: ARRAY
15124: PUSH
15125: LD_INT 2
15127: EQUAL
15128: PUSH
15129: LD_VAR 0 10
15133: PUSH
15134: LD_VAR 0 14
15138: ARRAY
15139: PUSH
15140: LD_INT 3
15142: EQUAL
15143: OR
15144: IFFALSE 15197
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15146: LD_ADDR_VAR 0 19
15150: PUSH
15151: LD_INT 1
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 3
15159: PUSH
15160: LD_INT 4
15162: PUSH
15163: LD_INT 5
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15173: LD_ADDR_OWVAR 37
15177: PUSH
15178: LD_VAR 0 19
15182: PUSH
15183: LD_INT 1
15185: PPUSH
15186: LD_VAR 0 19
15190: PPUSH
15191: CALL_OW 12
15195: ARRAY
15196: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15197: LD_VAR 0 10
15201: PUSH
15202: LD_VAR 0 14
15206: ARRAY
15207: PUSH
15208: LD_INT 4
15210: EQUAL
15211: PUSH
15212: LD_VAR 0 10
15216: PUSH
15217: LD_VAR 0 14
15221: ARRAY
15222: PUSH
15223: LD_INT 5
15225: EQUAL
15226: OR
15227: PUSH
15228: LD_VAR 0 10
15232: PUSH
15233: LD_VAR 0 14
15237: ARRAY
15238: PUSH
15239: LD_INT 9
15241: EQUAL
15242: OR
15243: PUSH
15244: LD_VAR 0 10
15248: PUSH
15249: LD_VAR 0 14
15253: ARRAY
15254: PUSH
15255: LD_INT 11
15257: EQUAL
15258: OR
15259: PUSH
15260: LD_VAR 0 10
15264: PUSH
15265: LD_VAR 0 14
15269: ARRAY
15270: PUSH
15271: LD_INT 7
15273: EQUAL
15274: OR
15275: IFFALSE 15324
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15277: LD_ADDR_VAR 0 19
15281: PUSH
15282: LD_INT 2
15284: PUSH
15285: LD_INT 3
15287: PUSH
15288: LD_INT 4
15290: PUSH
15291: LD_INT 5
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15300: LD_ADDR_OWVAR 37
15304: PUSH
15305: LD_VAR 0 19
15309: PUSH
15310: LD_INT 1
15312: PPUSH
15313: LD_VAR 0 19
15317: PPUSH
15318: CALL_OW 12
15322: ARRAY
15323: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15324: LD_VAR 0 10
15328: PUSH
15329: LD_VAR 0 14
15333: ARRAY
15334: PUSH
15335: LD_INT 8
15337: EQUAL
15338: PUSH
15339: LD_VAR 0 10
15343: PUSH
15344: LD_VAR 0 14
15348: ARRAY
15349: PUSH
15350: LD_INT 6
15352: EQUAL
15353: OR
15354: PUSH
15355: LD_VAR 0 10
15359: PUSH
15360: LD_VAR 0 14
15364: ARRAY
15365: PUSH
15366: LD_INT 10
15368: EQUAL
15369: OR
15370: IFFALSE 15411
// begin amChassisTab = [ 4 , 5 ] ;
15372: LD_ADDR_VAR 0 19
15376: PUSH
15377: LD_INT 4
15379: PUSH
15380: LD_INT 5
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15387: LD_ADDR_OWVAR 37
15391: PUSH
15392: LD_VAR 0 19
15396: PUSH
15397: LD_INT 1
15399: PPUSH
15400: LD_VAR 0 19
15404: PPUSH
15405: CALL_OW 12
15409: ARRAY
15410: ST_TO_ADDR
// end ; end ;
15411: GO 15111
15413: POP
15414: POP
// veh = CreateVehicle ;
15415: LD_ADDR_VAR 0 16
15419: PUSH
15420: CALL_OW 45
15424: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15425: LD_VAR 0 16
15429: PPUSH
15430: LD_VAR 0 1
15434: PPUSH
15435: LD_INT 0
15437: PPUSH
15438: CALL_OW 49
// if vehControl = 1 then
15442: LD_VAR 0 7
15446: PUSH
15447: LD_INT 1
15449: EQUAL
15450: IFFALSE 15507
// begin hc_gallery =  ;
15452: LD_ADDR_OWVAR 33
15456: PUSH
15457: LD_STRING 
15459: ST_TO_ADDR
// hc_name =  ;
15460: LD_ADDR_OWVAR 26
15464: PUSH
15465: LD_STRING 
15467: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15468: LD_INT 0
15470: PPUSH
15471: LD_INT 3
15473: PPUSH
15474: LD_VAR 0 4
15478: PPUSH
15479: CALL_OW 380
// un = CreateHuman ;
15483: LD_ADDR_VAR 0 15
15487: PUSH
15488: CALL_OW 44
15492: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15493: LD_VAR 0 15
15497: PPUSH
15498: LD_VAR 0 16
15502: PPUSH
15503: CALL_OW 52
// end ; i = i + 1 ;
15507: LD_ADDR_VAR 0 13
15511: PUSH
15512: LD_VAR 0 13
15516: PUSH
15517: LD_INT 1
15519: PLUS
15520: ST_TO_ADDR
// end ; if nation = 2 then
15521: LD_VAR 0 5
15525: PUSH
15526: LD_INT 2
15528: EQUAL
15529: IFFALSE 15953
// begin uc_side = side ;
15531: LD_ADDR_OWVAR 20
15535: PUSH
15536: LD_VAR 0 2
15540: ST_TO_ADDR
// uc_nation = nation ;
15541: LD_ADDR_OWVAR 21
15545: PUSH
15546: LD_VAR 0 5
15550: ST_TO_ADDR
// vc_engine = vehengine ;
15551: LD_ADDR_OWVAR 39
15555: PUSH
15556: LD_VAR 0 6
15560: ST_TO_ADDR
// vc_control = vehcontrol ;
15561: LD_ADDR_OWVAR 38
15565: PUSH
15566: LD_VAR 0 7
15570: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15571: LD_ADDR_OWVAR 40
15575: PUSH
15576: LD_VAR 0 9
15580: PUSH
15581: LD_INT 1
15583: PPUSH
15584: LD_VAR 0 9
15588: PPUSH
15589: CALL_OW 12
15593: ARRAY
15594: ST_TO_ADDR
// for j = 1 to ARWeapons do
15595: LD_ADDR_VAR 0 14
15599: PUSH
15600: DOUBLE
15601: LD_INT 1
15603: DEC
15604: ST_TO_ADDR
15605: LD_VAR 0 9
15609: PUSH
15610: FOR_TO
15611: IFFALSE 15845
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15613: LD_VAR 0 9
15617: PUSH
15618: LD_VAR 0 14
15622: ARRAY
15623: PUSH
15624: LD_INT 24
15626: EQUAL
15627: PUSH
15628: LD_VAR 0 9
15632: PUSH
15633: LD_VAR 0 14
15637: ARRAY
15638: PUSH
15639: LD_INT 22
15641: EQUAL
15642: OR
15643: PUSH
15644: LD_VAR 0 9
15648: PUSH
15649: LD_VAR 0 14
15653: ARRAY
15654: PUSH
15655: LD_INT 23
15657: EQUAL
15658: OR
15659: PUSH
15660: LD_VAR 0 9
15664: PUSH
15665: LD_VAR 0 14
15669: ARRAY
15670: PUSH
15671: LD_INT 30
15673: EQUAL
15674: OR
15675: IFFALSE 15724
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15677: LD_ADDR_VAR 0 18
15681: PUSH
15682: LD_INT 11
15684: PUSH
15685: LD_INT 12
15687: PUSH
15688: LD_INT 13
15690: PUSH
15691: LD_INT 14
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15700: LD_ADDR_OWVAR 37
15704: PUSH
15705: LD_VAR 0 18
15709: PUSH
15710: LD_INT 1
15712: PPUSH
15713: LD_VAR 0 18
15717: PPUSH
15718: CALL_OW 12
15722: ARRAY
15723: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15724: LD_VAR 0 9
15728: PUSH
15729: LD_VAR 0 14
15733: ARRAY
15734: PUSH
15735: LD_INT 29
15737: EQUAL
15738: PUSH
15739: LD_VAR 0 9
15743: PUSH
15744: LD_VAR 0 14
15748: ARRAY
15749: PUSH
15750: LD_INT 28
15752: EQUAL
15753: OR
15754: PUSH
15755: LD_VAR 0 9
15759: PUSH
15760: LD_VAR 0 14
15764: ARRAY
15765: PUSH
15766: LD_INT 27
15768: EQUAL
15769: OR
15770: PUSH
15771: LD_VAR 0 9
15775: PUSH
15776: LD_VAR 0 14
15780: ARRAY
15781: PUSH
15782: LD_INT 26
15784: EQUAL
15785: OR
15786: PUSH
15787: LD_VAR 0 9
15791: PUSH
15792: LD_VAR 0 14
15796: ARRAY
15797: PUSH
15798: LD_INT 25
15800: EQUAL
15801: OR
15802: IFFALSE 15843
// begin arChassisTab = [ 13 , 14 ] ;
15804: LD_ADDR_VAR 0 18
15808: PUSH
15809: LD_INT 13
15811: PUSH
15812: LD_INT 14
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15819: LD_ADDR_OWVAR 37
15823: PUSH
15824: LD_VAR 0 18
15828: PUSH
15829: LD_INT 1
15831: PPUSH
15832: LD_VAR 0 18
15836: PPUSH
15837: CALL_OW 12
15841: ARRAY
15842: ST_TO_ADDR
// end ; end ;
15843: GO 15610
15845: POP
15846: POP
// veh = CreateVehicle ;
15847: LD_ADDR_VAR 0 16
15851: PUSH
15852: CALL_OW 45
15856: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15857: LD_VAR 0 16
15861: PPUSH
15862: LD_VAR 0 1
15866: PPUSH
15867: LD_INT 0
15869: PPUSH
15870: CALL_OW 49
// if vehcontrol = 1 then
15874: LD_VAR 0 7
15878: PUSH
15879: LD_INT 1
15881: EQUAL
15882: IFFALSE 15939
// begin hc_gallery =  ;
15884: LD_ADDR_OWVAR 33
15888: PUSH
15889: LD_STRING 
15891: ST_TO_ADDR
// hc_name =  ;
15892: LD_ADDR_OWVAR 26
15896: PUSH
15897: LD_STRING 
15899: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15900: LD_INT 0
15902: PPUSH
15903: LD_INT 3
15905: PPUSH
15906: LD_VAR 0 4
15910: PPUSH
15911: CALL_OW 380
// un = CreateHuman ;
15915: LD_ADDR_VAR 0 15
15919: PUSH
15920: CALL_OW 44
15924: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15925: LD_VAR 0 15
15929: PPUSH
15930: LD_VAR 0 16
15934: PPUSH
15935: CALL_OW 52
// end ; i = i + 1 ;
15939: LD_ADDR_VAR 0 13
15943: PUSH
15944: LD_VAR 0 13
15948: PUSH
15949: LD_INT 1
15951: PLUS
15952: ST_TO_ADDR
// end ; if nation = 3 then
15953: LD_VAR 0 5
15957: PUSH
15958: LD_INT 3
15960: EQUAL
15961: IFFALSE 16353
// begin uc_side = side ;
15963: LD_ADDR_OWVAR 20
15967: PUSH
15968: LD_VAR 0 2
15972: ST_TO_ADDR
// uc_nation = nation ;
15973: LD_ADDR_OWVAR 21
15977: PUSH
15978: LD_VAR 0 5
15982: ST_TO_ADDR
// vc_engine = vehengine ;
15983: LD_ADDR_OWVAR 39
15987: PUSH
15988: LD_VAR 0 6
15992: ST_TO_ADDR
// vc_control = vehcontrol ;
15993: LD_ADDR_OWVAR 38
15997: PUSH
15998: LD_VAR 0 7
16002: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16003: LD_ADDR_OWVAR 40
16007: PUSH
16008: LD_VAR 0 8
16012: PUSH
16013: LD_INT 1
16015: PPUSH
16016: LD_VAR 0 8
16020: PPUSH
16021: CALL_OW 12
16025: ARRAY
16026: ST_TO_ADDR
// for j = 1 to RuWeapons do
16027: LD_ADDR_VAR 0 14
16031: PUSH
16032: DOUBLE
16033: LD_INT 1
16035: DEC
16036: ST_TO_ADDR
16037: LD_VAR 0 8
16041: PUSH
16042: FOR_TO
16043: IFFALSE 16245
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16045: LD_VAR 0 8
16049: PUSH
16050: LD_VAR 0 14
16054: ARRAY
16055: PUSH
16056: LD_INT 42
16058: EQUAL
16059: PUSH
16060: LD_VAR 0 8
16064: PUSH
16065: LD_VAR 0 14
16069: ARRAY
16070: PUSH
16071: LD_INT 43
16073: EQUAL
16074: OR
16075: PUSH
16076: LD_VAR 0 8
16080: PUSH
16081: LD_VAR 0 14
16085: ARRAY
16086: PUSH
16087: LD_INT 44
16089: EQUAL
16090: OR
16091: PUSH
16092: LD_VAR 0 8
16096: PUSH
16097: LD_VAR 0 14
16101: ARRAY
16102: PUSH
16103: LD_INT 45
16105: EQUAL
16106: OR
16107: PUSH
16108: LD_VAR 0 8
16112: PUSH
16113: LD_VAR 0 14
16117: ARRAY
16118: PUSH
16119: LD_INT 49
16121: EQUAL
16122: OR
16123: IFFALSE 16172
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16125: LD_ADDR_VAR 0 17
16129: PUSH
16130: LD_INT 21
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_INT 23
16138: PUSH
16139: LD_INT 24
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16148: LD_ADDR_OWVAR 37
16152: PUSH
16153: LD_VAR 0 17
16157: PUSH
16158: LD_INT 1
16160: PPUSH
16161: LD_VAR 0 17
16165: PPUSH
16166: CALL_OW 12
16170: ARRAY
16171: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16172: LD_VAR 0 8
16176: PUSH
16177: LD_VAR 0 14
16181: ARRAY
16182: PUSH
16183: LD_INT 46
16185: EQUAL
16186: PUSH
16187: LD_VAR 0 8
16191: PUSH
16192: LD_VAR 0 14
16196: ARRAY
16197: PUSH
16198: LD_INT 47
16200: EQUAL
16201: OR
16202: IFFALSE 16243
// begin ruChassisTab = [ 23 , 24 ] ;
16204: LD_ADDR_VAR 0 17
16208: PUSH
16209: LD_INT 23
16211: PUSH
16212: LD_INT 24
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16219: LD_ADDR_OWVAR 37
16223: PUSH
16224: LD_VAR 0 17
16228: PUSH
16229: LD_INT 1
16231: PPUSH
16232: LD_VAR 0 17
16236: PPUSH
16237: CALL_OW 12
16241: ARRAY
16242: ST_TO_ADDR
// end ; end ;
16243: GO 16042
16245: POP
16246: POP
// veh = CreateVehicle ;
16247: LD_ADDR_VAR 0 16
16251: PUSH
16252: CALL_OW 45
16256: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16257: LD_VAR 0 16
16261: PPUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: LD_INT 0
16269: PPUSH
16270: CALL_OW 49
// if vehcontrol = 1 then
16274: LD_VAR 0 7
16278: PUSH
16279: LD_INT 1
16281: EQUAL
16282: IFFALSE 16339
// begin hc_gallery =  ;
16284: LD_ADDR_OWVAR 33
16288: PUSH
16289: LD_STRING 
16291: ST_TO_ADDR
// hc_name =  ;
16292: LD_ADDR_OWVAR 26
16296: PUSH
16297: LD_STRING 
16299: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16300: LD_INT 0
16302: PPUSH
16303: LD_INT 3
16305: PPUSH
16306: LD_VAR 0 4
16310: PPUSH
16311: CALL_OW 380
// un = CreateHuman ;
16315: LD_ADDR_VAR 0 15
16319: PUSH
16320: CALL_OW 44
16324: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16325: LD_VAR 0 15
16329: PPUSH
16330: LD_VAR 0 16
16334: PPUSH
16335: CALL_OW 52
// end ; i = i + 1 ;
16339: LD_ADDR_VAR 0 13
16343: PUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: PLUS
16352: ST_TO_ADDR
// end ; until i = vehCount ;
16353: LD_VAR 0 13
16357: PUSH
16358: LD_VAR 0 3
16362: EQUAL
16363: IFFALSE 15015
// repeat wait ( 0 0$1 ) ;
16365: LD_INT 35
16367: PPUSH
16368: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16372: LD_ADDR_VAR 0 20
16376: PUSH
16377: LD_INT 22
16379: PUSH
16380: LD_VAR 0 2
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 24
16401: PUSH
16402: LD_INT 250
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PPUSH
16414: CALL_OW 69
16418: ST_TO_ADDR
// if vehicleOK_list > 0 then
16419: LD_VAR 0 20
16423: PUSH
16424: LD_INT 0
16426: GREATER
16427: IFFALSE 16618
// begin for i in vehicleOK_list do
16429: LD_ADDR_VAR 0 13
16433: PUSH
16434: LD_VAR 0 20
16438: PUSH
16439: FOR_IN
16440: IFFALSE 16616
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16442: LD_ADDR_VAR 0 21
16446: PUSH
16447: LD_INT 22
16449: PUSH
16450: LD_VAR 0 11
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_VAR 0 13
16468: PPUSH
16469: CALL_OW 74
16473: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16474: LD_ADDR_VAR 0 22
16478: PUSH
16479: LD_INT 22
16481: PUSH
16482: LD_VAR 0 11
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 2
16493: PUSH
16494: LD_INT 59
16496: PUSH
16497: EMPTY
16498: LIST
16499: PUSH
16500: LD_INT 21
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: PPUSH
16538: LD_VAR 0 13
16542: PPUSH
16543: CALL_OW 74
16547: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16548: LD_VAR 0 13
16552: PPUSH
16553: LD_VAR 0 21
16557: PPUSH
16558: CALL_OW 296
16562: PUSH
16563: LD_INT 6
16565: PLUS
16566: PUSH
16567: LD_VAR 0 13
16571: PPUSH
16572: LD_VAR 0 22
16576: PPUSH
16577: CALL_OW 296
16581: LESS
16582: IFFALSE 16600
// begin ComAttackUnit ( i , target1 ) ;
16584: LD_VAR 0 13
16588: PPUSH
16589: LD_VAR 0 21
16593: PPUSH
16594: CALL_OW 115
// end else
16598: GO 16614
// begin ComAttackUnit ( i , target2 ) ;
16600: LD_VAR 0 13
16604: PPUSH
16605: LD_VAR 0 22
16609: PPUSH
16610: CALL_OW 115
// end ; end ;
16614: GO 16439
16616: POP
16617: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16618: LD_INT 22
16620: PUSH
16621: LD_VAR 0 2
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 21
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 24
16642: PUSH
16643: LD_INT 250
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: PUSH
16660: LD_INT 0
16662: EQUAL
16663: IFFALSE 16365
// end ;
16665: LD_VAR 0 12
16669: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16670: LD_INT 0
16672: PPUSH
16673: PPUSH
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
16678: PPUSH
16679: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16680: LD_ADDR_VAR 0 7
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: LD_VAR 0 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: LD_INT 3
16702: PUSH
16703: LD_INT 24
16705: PUSH
16706: LD_INT 550
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 24
16719: PUSH
16720: LD_INT 250
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16741: LD_ADDR_VAR 0 8
16745: PUSH
16746: LD_INT 22
16748: PUSH
16749: LD_VAR 0 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: LD_INT 25
16763: PUSH
16764: LD_INT 1
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 25
16773: PUSH
16774: LD_INT 5
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 25
16783: PUSH
16784: LD_INT 8
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 25
16793: PUSH
16794: LD_INT 9
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 24
16810: PUSH
16811: LD_INT 1000
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: PPUSH
16823: CALL_OW 69
16827: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16828: LD_ADDR_VAR 0 9
16832: PUSH
16833: LD_INT 22
16835: PUSH
16836: LD_VAR 0 1
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 25
16847: PUSH
16848: LD_INT 4
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PPUSH
16859: CALL_OW 69
16863: ST_TO_ADDR
// if medicCount > 0 then
16864: LD_VAR 0 9
16868: PUSH
16869: LD_INT 0
16871: GREATER
16872: IFFALSE 16946
// begin if damageUnit_list > 0 then
16874: LD_VAR 0 7
16878: PUSH
16879: LD_INT 0
16881: GREATER
16882: IFFALSE 16946
// begin for i in damageUnit_list do
16884: LD_ADDR_VAR 0 5
16888: PUSH
16889: LD_VAR 0 7
16893: PUSH
16894: FOR_IN
16895: IFFALSE 16944
// begin ComMoveToArea ( i , healArea ) ;
16897: LD_VAR 0 5
16901: PPUSH
16902: LD_VAR 0 2
16906: PPUSH
16907: CALL_OW 113
// for j in medicCount do
16911: LD_ADDR_VAR 0 6
16915: PUSH
16916: LD_VAR 0 9
16920: PUSH
16921: FOR_IN
16922: IFFALSE 16940
// AddComHeal ( j , i ) ;
16924: LD_VAR 0 6
16928: PPUSH
16929: LD_VAR 0 5
16933: PPUSH
16934: CALL_OW 188
16938: GO 16921
16940: POP
16941: POP
// end ;
16942: GO 16894
16944: POP
16945: POP
// end ; end ; if soldiersOK_list > 0 then
16946: LD_VAR 0 8
16950: PUSH
16951: LD_INT 0
16953: GREATER
16954: IFFALSE 17145
// begin for i in soldiersOK_list do
16956: LD_ADDR_VAR 0 5
16960: PUSH
16961: LD_VAR 0 8
16965: PUSH
16966: FOR_IN
16967: IFFALSE 17143
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16969: LD_ADDR_VAR 0 10
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PPUSH
16986: CALL_OW 69
16990: PPUSH
16991: LD_VAR 0 5
16995: PPUSH
16996: CALL_OW 74
17000: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17001: LD_ADDR_VAR 0 11
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_VAR 0 3
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 59
17023: PUSH
17024: EMPTY
17025: LIST
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 21
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: EMPTY
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: PPUSH
17065: LD_VAR 0 5
17069: PPUSH
17070: CALL_OW 74
17074: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17075: LD_VAR 0 5
17079: PPUSH
17080: LD_VAR 0 10
17084: PPUSH
17085: CALL_OW 296
17089: PUSH
17090: LD_INT 8
17092: PLUS
17093: PUSH
17094: LD_VAR 0 5
17098: PPUSH
17099: LD_VAR 0 11
17103: PPUSH
17104: CALL_OW 296
17108: LESS
17109: IFFALSE 17127
// begin ComAttackUnit ( i , target1 ) ;
17111: LD_VAR 0 5
17115: PPUSH
17116: LD_VAR 0 10
17120: PPUSH
17121: CALL_OW 115
// end else
17125: GO 17141
// begin ComAttackUnit ( i , target2 ) ;
17127: LD_VAR 0 5
17131: PPUSH
17132: LD_VAR 0 11
17136: PPUSH
17137: CALL_OW 115
// end ; end ;
17141: GO 16966
17143: POP
17144: POP
// end ; end ;
17145: LD_VAR 0 4
17149: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
17150: LD_INT 0
17152: PPUSH
17153: PPUSH
// list := [ ] ;
17154: LD_ADDR_VAR 0 5
17158: PUSH
17159: EMPTY
17160: ST_TO_ADDR
// case d of 0 :
17161: LD_VAR 0 3
17165: PUSH
17166: LD_INT 0
17168: DOUBLE
17169: EQUAL
17170: IFTRUE 17174
17172: GO 17307
17174: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
17175: LD_ADDR_VAR 0 5
17179: PUSH
17180: LD_VAR 0 1
17184: PUSH
17185: LD_INT 4
17187: MINUS
17188: PUSH
17189: LD_VAR 0 2
17193: PUSH
17194: LD_INT 4
17196: MINUS
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: LD_VAR 0 1
17210: PUSH
17211: LD_INT 3
17213: MINUS
17214: PUSH
17215: LD_VAR 0 2
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: LD_VAR 0 1
17232: PUSH
17233: LD_INT 4
17235: PLUS
17236: PUSH
17237: LD_VAR 0 2
17241: PUSH
17242: LD_INT 4
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: PUSH
17250: LD_VAR 0 1
17254: PUSH
17255: LD_INT 3
17257: PLUS
17258: PUSH
17259: LD_VAR 0 2
17263: PUSH
17264: LD_INT 3
17266: PLUS
17267: PUSH
17268: LD_INT 5
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: PUSH
17276: LD_VAR 0 1
17280: PUSH
17281: LD_VAR 0 2
17285: PUSH
17286: LD_INT 4
17288: PLUS
17289: PUSH
17290: LD_INT 0
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: ST_TO_ADDR
// end ; 1 :
17305: GO 18005
17307: LD_INT 1
17309: DOUBLE
17310: EQUAL
17311: IFTRUE 17315
17313: GO 17448
17315: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
17316: LD_ADDR_VAR 0 5
17320: PUSH
17321: LD_VAR 0 1
17325: PUSH
17326: LD_VAR 0 2
17330: PUSH
17331: LD_INT 4
17333: MINUS
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_VAR 0 1
17347: PUSH
17348: LD_INT 3
17350: MINUS
17351: PUSH
17352: LD_VAR 0 2
17356: PUSH
17357: LD_INT 3
17359: MINUS
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: PUSH
17369: LD_VAR 0 1
17373: PUSH
17374: LD_INT 4
17376: MINUS
17377: PUSH
17378: LD_VAR 0 2
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: PUSH
17391: LD_VAR 0 1
17395: PUSH
17396: LD_VAR 0 2
17400: PUSH
17401: LD_INT 3
17403: PLUS
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: PUSH
17413: LD_VAR 0 1
17417: PUSH
17418: LD_INT 4
17420: PLUS
17421: PUSH
17422: LD_VAR 0 2
17426: PUSH
17427: LD_INT 4
17429: PLUS
17430: PUSH
17431: LD_INT 5
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: ST_TO_ADDR
// end ; 2 :
17446: GO 18005
17448: LD_INT 2
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17585
17456: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17457: LD_ADDR_VAR 0 5
17461: PUSH
17462: LD_VAR 0 1
17466: PUSH
17467: LD_VAR 0 2
17471: PUSH
17472: LD_INT 3
17474: MINUS
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: PUSH
17484: LD_VAR 0 1
17488: PUSH
17489: LD_INT 4
17491: PLUS
17492: PUSH
17493: LD_VAR 0 2
17497: PUSH
17498: LD_INT 4
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: LD_VAR 0 1
17510: PUSH
17511: LD_VAR 0 2
17515: PUSH
17516: LD_INT 4
17518: PLUS
17519: PUSH
17520: LD_INT 0
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: LIST
17527: PUSH
17528: LD_VAR 0 1
17532: PUSH
17533: LD_INT 3
17535: MINUS
17536: PUSH
17537: LD_VAR 0 2
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: PUSH
17550: LD_VAR 0 1
17554: PUSH
17555: LD_INT 4
17557: MINUS
17558: PUSH
17559: LD_VAR 0 2
17563: PUSH
17564: LD_INT 4
17566: MINUS
17567: PUSH
17568: LD_INT 2
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: ST_TO_ADDR
// end ; 3 :
17583: GO 18005
17585: LD_INT 3
17587: DOUBLE
17588: EQUAL
17589: IFTRUE 17593
17591: GO 17726
17593: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17594: LD_ADDR_VAR 0 5
17598: PUSH
17599: LD_VAR 0 1
17603: PUSH
17604: LD_INT 3
17606: PLUS
17607: PUSH
17608: LD_VAR 0 2
17612: PUSH
17613: LD_INT 4
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: PUSH
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 4
17628: PLUS
17629: PUSH
17630: LD_VAR 0 2
17634: PUSH
17635: LD_INT 4
17637: PLUS
17638: PUSH
17639: LD_INT 5
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: PUSH
17647: LD_VAR 0 1
17651: PUSH
17652: LD_INT 4
17654: MINUS
17655: PUSH
17656: LD_VAR 0 2
17660: PUSH
17661: LD_INT 1
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: LD_VAR 0 1
17673: PUSH
17674: LD_VAR 0 2
17678: PUSH
17679: LD_INT 4
17681: MINUS
17682: PUSH
17683: LD_INT 3
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: PUSH
17691: LD_VAR 0 1
17695: PUSH
17696: LD_INT 3
17698: MINUS
17699: PUSH
17700: LD_VAR 0 2
17704: PUSH
17705: LD_INT 3
17707: MINUS
17708: PUSH
17709: LD_INT 2
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: ST_TO_ADDR
// end ; 4 :
17724: GO 18005
17726: LD_INT 4
17728: DOUBLE
17729: EQUAL
17730: IFTRUE 17734
17732: GO 17867
17734: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17735: LD_ADDR_VAR 0 5
17739: PUSH
17740: LD_VAR 0 1
17744: PUSH
17745: LD_VAR 0 2
17749: PUSH
17750: LD_INT 4
17752: PLUS
17753: PUSH
17754: LD_INT 0
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_VAR 0 1
17766: PUSH
17767: LD_INT 3
17769: PLUS
17770: PUSH
17771: LD_VAR 0 2
17775: PUSH
17776: LD_INT 3
17778: PLUS
17779: PUSH
17780: LD_INT 5
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: PUSH
17788: LD_VAR 0 1
17792: PUSH
17793: LD_INT 3
17795: PLUS
17796: PUSH
17797: LD_VAR 0 2
17801: PUSH
17802: LD_INT 4
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: PUSH
17810: LD_VAR 0 1
17814: PUSH
17815: LD_VAR 0 2
17819: PUSH
17820: LD_INT 3
17822: MINUS
17823: PUSH
17824: LD_INT 3
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: LIST
17831: PUSH
17832: LD_VAR 0 1
17836: PUSH
17837: LD_INT 4
17839: MINUS
17840: PUSH
17841: LD_VAR 0 2
17845: PUSH
17846: LD_INT 4
17848: MINUS
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: ST_TO_ADDR
// end ; 5 :
17865: GO 18005
17867: LD_INT 5
17869: DOUBLE
17870: EQUAL
17871: IFTRUE 17875
17873: GO 18004
17875: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17876: LD_ADDR_VAR 0 5
17880: PUSH
17881: LD_VAR 0 1
17885: PUSH
17886: LD_INT 4
17888: MINUS
17889: PUSH
17890: LD_VAR 0 2
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_VAR 0 1
17907: PUSH
17908: LD_VAR 0 2
17912: PUSH
17913: LD_INT 4
17915: MINUS
17916: PUSH
17917: LD_INT 3
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: LD_VAR 0 1
17929: PUSH
17930: LD_INT 4
17932: PLUS
17933: PUSH
17934: LD_VAR 0 2
17938: PUSH
17939: LD_INT 4
17941: PLUS
17942: PUSH
17943: LD_INT 5
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: PUSH
17951: LD_VAR 0 1
17955: PUSH
17956: LD_INT 3
17958: PLUS
17959: PUSH
17960: LD_VAR 0 2
17964: PUSH
17965: LD_INT 4
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: PUSH
17973: LD_VAR 0 1
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: LD_INT 3
17985: PLUS
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: ST_TO_ADDR
// end ; end ;
18002: GO 18005
18004: POP
// result := list ;
18005: LD_ADDR_VAR 0 4
18009: PUSH
18010: LD_VAR 0 5
18014: ST_TO_ADDR
// end ;
18015: LD_VAR 0 4
18019: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
18020: LD_INT 0
18022: PPUSH
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
// result := false ;
18031: LD_ADDR_VAR 0 7
18035: PUSH
18036: LD_INT 0
18038: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18039: LD_VAR 0 1
18043: NOT
18044: PUSH
18045: LD_VAR 0 1
18049: PPUSH
18050: CALL_OW 266
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: IN
18065: NOT
18066: OR
18067: PUSH
18068: LD_VAR 0 2
18072: NOT
18073: OR
18074: PUSH
18075: LD_VAR 0 5
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: LD_INT 3
18091: PUSH
18092: LD_INT 4
18094: PUSH
18095: LD_INT 5
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: IN
18106: NOT
18107: OR
18108: PUSH
18109: LD_VAR 0 3
18113: PPUSH
18114: LD_VAR 0 4
18118: PPUSH
18119: CALL_OW 488
18123: NOT
18124: OR
18125: IFFALSE 18129
// exit ;
18127: GO 18810
// pom := GetBase ( bdepot ) ;
18129: LD_ADDR_VAR 0 10
18133: PUSH
18134: LD_VAR 0 1
18138: PPUSH
18139: CALL_OW 274
18143: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
18144: LD_ADDR_VAR 0 11
18148: PUSH
18149: LD_VAR 0 2
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 248
18163: PPUSH
18164: CALL_OW 450
18168: ST_TO_ADDR
// if check_cost then
18169: LD_VAR 0 6
18173: IFFALSE 18250
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18175: LD_VAR 0 10
18179: PPUSH
18180: LD_INT 1
18182: PPUSH
18183: CALL_OW 275
18187: PUSH
18188: LD_VAR 0 11
18192: PUSH
18193: LD_INT 1
18195: ARRAY
18196: GREATEREQUAL
18197: PUSH
18198: LD_VAR 0 10
18202: PPUSH
18203: LD_INT 2
18205: PPUSH
18206: CALL_OW 275
18210: PUSH
18211: LD_VAR 0 11
18215: PUSH
18216: LD_INT 2
18218: ARRAY
18219: GREATEREQUAL
18220: AND
18221: PUSH
18222: LD_VAR 0 10
18226: PPUSH
18227: LD_INT 3
18229: PPUSH
18230: CALL_OW 275
18234: PUSH
18235: LD_VAR 0 11
18239: PUSH
18240: LD_INT 3
18242: ARRAY
18243: GREATEREQUAL
18244: AND
18245: NOT
18246: IFFALSE 18250
// exit ;
18248: GO 18810
// if GetBType ( bdepot ) = b_depot then
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 266
18259: PUSH
18260: LD_INT 0
18262: EQUAL
18263: IFFALSE 18275
// dist := 28 else
18265: LD_ADDR_VAR 0 14
18269: PUSH
18270: LD_INT 28
18272: ST_TO_ADDR
18273: GO 18283
// dist := 36 ;
18275: LD_ADDR_VAR 0 14
18279: PUSH
18280: LD_INT 36
18282: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
18283: LD_VAR 0 1
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_VAR 0 4
18297: PPUSH
18298: CALL_OW 297
18302: PUSH
18303: LD_VAR 0 14
18307: GREATER
18308: IFFALSE 18312
// exit ;
18310: GO 18810
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18312: LD_ADDR_VAR 0 12
18316: PUSH
18317: LD_VAR 0 2
18321: PPUSH
18322: LD_VAR 0 3
18326: PPUSH
18327: LD_VAR 0 4
18331: PPUSH
18332: LD_VAR 0 5
18336: PPUSH
18337: LD_VAR 0 1
18341: PPUSH
18342: CALL_OW 248
18346: PPUSH
18347: LD_INT 0
18349: PPUSH
18350: CALL 18815 0 6
18354: ST_TO_ADDR
// if not hexes then
18355: LD_VAR 0 12
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18810
// hex := GetHexInfo ( x , y ) ;
18364: LD_ADDR_VAR 0 15
18368: PUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: LD_VAR 0 4
18378: PPUSH
18379: CALL_OW 546
18383: ST_TO_ADDR
// if hex [ 1 ] then
18384: LD_VAR 0 15
18388: PUSH
18389: LD_INT 1
18391: ARRAY
18392: IFFALSE 18396
// exit ;
18394: GO 18810
// height := hex [ 2 ] ;
18396: LD_ADDR_VAR 0 13
18400: PUSH
18401: LD_VAR 0 15
18405: PUSH
18406: LD_INT 2
18408: ARRAY
18409: ST_TO_ADDR
// for i = 1 to hexes do
18410: LD_ADDR_VAR 0 8
18414: PUSH
18415: DOUBLE
18416: LD_INT 1
18418: DEC
18419: ST_TO_ADDR
18420: LD_VAR 0 12
18424: PUSH
18425: FOR_TO
18426: IFFALSE 18754
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18428: LD_VAR 0 12
18432: PUSH
18433: LD_VAR 0 8
18437: ARRAY
18438: PUSH
18439: LD_INT 1
18441: ARRAY
18442: PPUSH
18443: LD_VAR 0 12
18447: PUSH
18448: LD_VAR 0 8
18452: ARRAY
18453: PUSH
18454: LD_INT 2
18456: ARRAY
18457: PPUSH
18458: CALL_OW 488
18462: NOT
18463: IFFALSE 18467
// continue ;
18465: GO 18425
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18467: LD_ADDR_VAR 0 9
18471: PUSH
18472: LD_VAR 0 12
18476: PUSH
18477: LD_VAR 0 8
18481: ARRAY
18482: PUSH
18483: LD_INT 1
18485: ARRAY
18486: PPUSH
18487: LD_VAR 0 12
18491: PUSH
18492: LD_VAR 0 8
18496: ARRAY
18497: PUSH
18498: LD_INT 2
18500: ARRAY
18501: PPUSH
18502: CALL_OW 546
18506: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18507: LD_VAR 0 9
18511: PUSH
18512: LD_INT 1
18514: ARRAY
18515: PUSH
18516: LD_VAR 0 9
18520: PUSH
18521: LD_INT 2
18523: ARRAY
18524: PUSH
18525: LD_VAR 0 13
18529: PUSH
18530: LD_INT 2
18532: PLUS
18533: GREATER
18534: OR
18535: PUSH
18536: LD_VAR 0 9
18540: PUSH
18541: LD_INT 2
18543: ARRAY
18544: PUSH
18545: LD_VAR 0 13
18549: PUSH
18550: LD_INT 2
18552: MINUS
18553: LESS
18554: OR
18555: PUSH
18556: LD_VAR 0 9
18560: PUSH
18561: LD_INT 3
18563: ARRAY
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: LD_INT 8
18570: PUSH
18571: LD_INT 9
18573: PUSH
18574: LD_INT 10
18576: PUSH
18577: LD_INT 11
18579: PUSH
18580: LD_INT 12
18582: PUSH
18583: LD_INT 13
18585: PUSH
18586: LD_INT 16
18588: PUSH
18589: LD_INT 17
18591: PUSH
18592: LD_INT 18
18594: PUSH
18595: LD_INT 19
18597: PUSH
18598: LD_INT 20
18600: PUSH
18601: LD_INT 21
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: IN
18619: NOT
18620: OR
18621: PUSH
18622: LD_VAR 0 9
18626: PUSH
18627: LD_INT 5
18629: ARRAY
18630: NOT
18631: OR
18632: PUSH
18633: LD_VAR 0 9
18637: PUSH
18638: LD_INT 6
18640: ARRAY
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: LD_INT 7
18650: PUSH
18651: LD_INT 9
18653: PUSH
18654: LD_INT 10
18656: PUSH
18657: LD_INT 11
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: IN
18668: NOT
18669: OR
18670: PUSH
18671: LD_VAR 0 12
18675: PUSH
18676: LD_VAR 0 8
18680: ARRAY
18681: PUSH
18682: LD_INT 1
18684: ARRAY
18685: PPUSH
18686: LD_VAR 0 12
18690: PUSH
18691: LD_VAR 0 8
18695: ARRAY
18696: PUSH
18697: LD_INT 2
18699: ARRAY
18700: PPUSH
18701: CALL_OW 428
18705: PUSH
18706: LD_INT 0
18708: GREATER
18709: OR
18710: PUSH
18711: LD_VAR 0 12
18715: PUSH
18716: LD_VAR 0 8
18720: ARRAY
18721: PUSH
18722: LD_INT 1
18724: ARRAY
18725: PPUSH
18726: LD_VAR 0 12
18730: PUSH
18731: LD_VAR 0 8
18735: ARRAY
18736: PUSH
18737: LD_INT 2
18739: ARRAY
18740: PPUSH
18741: CALL_OW 351
18745: OR
18746: IFFALSE 18752
// exit ;
18748: POP
18749: POP
18750: GO 18810
// end ;
18752: GO 18425
18754: POP
18755: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18756: LD_VAR 0 2
18760: PUSH
18761: LD_INT 29
18763: PUSH
18764: LD_INT 30
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: IN
18771: PUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_VAR 0 4
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL_OW 255
18791: PPUSH
18792: CALL_OW 440
18796: NOT
18797: AND
18798: IFFALSE 18802
// exit ;
18800: GO 18810
// result := true ;
18802: LD_ADDR_VAR 0 7
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// end ;
18810: LD_VAR 0 7
18814: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
18819: PPUSH
18820: PPUSH
18821: PPUSH
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
18834: PPUSH
18835: PPUSH
18836: PPUSH
18837: PPUSH
18838: PPUSH
18839: PPUSH
18840: PPUSH
18841: PPUSH
18842: PPUSH
18843: PPUSH
18844: PPUSH
18845: PPUSH
18846: PPUSH
18847: PPUSH
18848: PPUSH
18849: PPUSH
18850: PPUSH
18851: PPUSH
18852: PPUSH
18853: PPUSH
18854: PPUSH
18855: PPUSH
18856: PPUSH
18857: PPUSH
18858: PPUSH
18859: PPUSH
18860: PPUSH
18861: PPUSH
18862: PPUSH
18863: PPUSH
18864: PPUSH
18865: PPUSH
18866: PPUSH
18867: PPUSH
18868: PPUSH
18869: PPUSH
18870: PPUSH
18871: PPUSH
18872: PPUSH
18873: PPUSH
18874: PPUSH
// result = [ ] ;
18875: LD_ADDR_VAR 0 7
18879: PUSH
18880: EMPTY
18881: ST_TO_ADDR
// temp_list = [ ] ;
18882: LD_ADDR_VAR 0 9
18886: PUSH
18887: EMPTY
18888: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18889: LD_VAR 0 4
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: LD_INT 4
18908: PUSH
18909: LD_INT 5
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: IN
18920: NOT
18921: PUSH
18922: LD_VAR 0 1
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: IN
18937: PUSH
18938: LD_VAR 0 5
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: LD_INT 3
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: IN
18957: NOT
18958: AND
18959: OR
18960: IFFALSE 18964
// exit ;
18962: GO 37349
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18964: LD_VAR 0 1
18968: PUSH
18969: LD_INT 6
18971: PUSH
18972: LD_INT 7
18974: PUSH
18975: LD_INT 8
18977: PUSH
18978: LD_INT 13
18980: PUSH
18981: LD_INT 12
18983: PUSH
18984: LD_INT 15
18986: PUSH
18987: LD_INT 11
18989: PUSH
18990: LD_INT 14
18992: PUSH
18993: LD_INT 10
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: IN
19007: IFFALSE 19017
// btype = b_lab ;
19009: LD_ADDR_VAR 0 1
19013: PUSH
19014: LD_INT 6
19016: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19017: LD_VAR 0 6
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: IN
19036: NOT
19037: PUSH
19038: LD_VAR 0 1
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 6
19057: PUSH
19058: LD_INT 36
19060: PUSH
19061: LD_INT 4
19063: PUSH
19064: LD_INT 5
19066: PUSH
19067: LD_INT 31
19069: PUSH
19070: LD_INT 32
19072: PUSH
19073: LD_INT 33
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: IN
19089: NOT
19090: PUSH
19091: LD_VAR 0 6
19095: PUSH
19096: LD_INT 1
19098: EQUAL
19099: AND
19100: OR
19101: PUSH
19102: LD_VAR 0 1
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_INT 3
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: IN
19117: NOT
19118: PUSH
19119: LD_VAR 0 6
19123: PUSH
19124: LD_INT 2
19126: EQUAL
19127: AND
19128: OR
19129: IFFALSE 19139
// mode = 0 ;
19131: LD_ADDR_VAR 0 6
19135: PUSH
19136: LD_INT 0
19138: ST_TO_ADDR
// case mode of 0 :
19139: LD_VAR 0 6
19143: PUSH
19144: LD_INT 0
19146: DOUBLE
19147: EQUAL
19148: IFTRUE 19152
19150: GO 30605
19152: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19153: LD_ADDR_VAR 0 11
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: LD_INT 1
19173: NEG
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 1
19211: NEG
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: LD_INT 2
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 2
19249: NEG
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: LD_INT 3
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 3
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19346: LD_ADDR_VAR 0 12
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: LD_INT 0
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: LD_INT 1
19366: NEG
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: NEG
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 2
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: NEG
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: NEG
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 2
19480: NEG
19481: PUSH
19482: LD_INT 1
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 3
19503: NEG
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 3
19514: NEG
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19542: LD_ADDR_VAR 0 13
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 0
19559: PUSH
19560: LD_INT 1
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: LD_INT 1
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: LD_INT 1
19615: NEG
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: LD_INT 2
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 2
19677: NEG
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 2
19689: NEG
19690: PUSH
19691: LD_INT 3
19693: NEG
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 3
19701: NEG
19702: PUSH
19703: LD_INT 2
19705: NEG
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 3
19713: NEG
19714: PUSH
19715: LD_INT 3
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19741: LD_ADDR_VAR 0 14
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 1
19799: NEG
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: NEG
19823: PUSH
19824: LD_INT 2
19826: NEG
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: LD_INT 2
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 0
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: LD_INT 3
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 3
19902: NEG
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19937: LD_ADDR_VAR 0 15
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 1
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: LD_INT 1
20021: NEG
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 2
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 2
20060: NEG
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: LD_INT 1
20075: NEG
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 3
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 3
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20130: LD_ADDR_VAR 0 16
20134: PUSH
20135: LD_INT 0
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: LD_INT 0
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 0
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 1
20199: NEG
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 2
20253: NEG
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 3
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 3
20287: PUSH
20288: LD_INT 3
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 3
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20323: LD_ADDR_VAR 0 17
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: LD_INT 1
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: LD_INT 2
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: LD_INT 1
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 2
20522: NEG
20523: PUSH
20524: LD_INT 2
20526: NEG
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20553: LD_ADDR_VAR 0 18
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: LD_INT 1
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 1
20634: NEG
20635: PUSH
20636: LD_INT 2
20638: NEG
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: LD_INT 2
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: NEG
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: LD_INT 2
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20783: LD_ADDR_VAR 0 19
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 1
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: LD_INT 0
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: LD_INT 2
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: LD_INT 2
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 2
20959: NEG
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 2
20970: NEG
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: NEG
20983: PUSH
20984: LD_INT 2
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21013: LD_ADDR_VAR 0 20
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 1
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: NEG
21072: PUSH
21073: LD_INT 0
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 1
21082: NEG
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: LD_INT 2
21098: NEG
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: LD_INT 2
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 2
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 2
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: NEG
21213: PUSH
21214: LD_INT 2
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21243: LD_ADDR_VAR 0 21
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: NEG
21325: PUSH
21326: LD_INT 2
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: NEG
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 2
21430: NEG
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 2
21442: NEG
21443: PUSH
21444: LD_INT 2
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21473: LD_ADDR_VAR 0 22
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 1
21531: NEG
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: LD_INT 2
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 0
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 1
21638: NEG
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: NEG
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: NEG
21673: PUSH
21674: LD_INT 2
21676: NEG
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21703: LD_ADDR_VAR 0 23
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: LD_INT 2
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 2
21890: NEG
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: LD_INT 2
21906: NEG
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: LD_INT 3
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: LD_INT 3
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21983: LD_ADDR_VAR 0 24
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 0
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: NEG
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 2
22159: NEG
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: NEG
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 2
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22259: LD_ADDR_VAR 0 25
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: LD_INT 1
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: NEG
22341: PUSH
22342: LD_INT 2
22344: NEG
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: NEG
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 2
22458: NEG
22459: PUSH
22460: LD_INT 2
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 3
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 3
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 2
22490: PUSH
22491: LD_INT 3
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 3
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22533: LD_ADDR_VAR 0 26
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 1
22591: NEG
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: LD_INT 2
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 2
22629: NEG
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: LD_INT 2
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: NEG
22721: PUSH
22722: LD_INT 1
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 2
22732: NEG
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: LD_INT 3
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: LD_INT 3
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: NEG
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: NEG
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22809: LD_ADDR_VAR 0 27
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: NEG
22868: PUSH
22869: LD_INT 0
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: LD_INT 1
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: LD_INT 2
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: LD_INT 2
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 2
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: LD_INT 2
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 2
22985: NEG
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: LD_INT 2
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: NEG
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 3
23042: NEG
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 3
23054: NEG
23055: PUSH
23056: LD_INT 2
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23089: LD_ADDR_VAR 0 28
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: LD_INT 2
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 2
23265: NEG
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: LD_INT 2
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: NEG
23301: PUSH
23302: LD_INT 3
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: LD_INT 3
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 3
23324: NEG
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 3
23336: NEG
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23371: LD_ADDR_VAR 0 29
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: LD_INT 2
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: LD_INT 1
23478: NEG
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 2
23537: NEG
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 2
23549: NEG
23550: PUSH
23551: LD_INT 2
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: NEG
23562: PUSH
23563: LD_INT 3
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 3
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: LD_INT 3
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: LD_INT 2
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 3
23615: NEG
23616: PUSH
23617: LD_INT 2
23619: NEG
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23650: LD_ADDR_VAR 0 30
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 2
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: NEG
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 2
23816: NEG
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: LD_INT 3
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 2
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 3
23862: PUSH
23863: LD_INT 2
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 2
23872: PUSH
23873: LD_INT 3
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 3
23893: NEG
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23928: LD_ADDR_VAR 0 31
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: LD_INT 2
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 2
24093: NEG
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 2
24105: NEG
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: NEG
24118: PUSH
24119: LD_INT 3
24121: NEG
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 3
24171: NEG
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24206: LD_ADDR_VAR 0 32
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 1
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: PUSH
24342: LD_INT 2
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 2
24372: NEG
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 2
24383: NEG
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: LD_INT 3
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: LD_INT 2
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: LD_INT 3
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 3
24449: NEG
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24484: LD_ADDR_VAR 0 33
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: LD_INT 3
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 3
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 3
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 3
24728: NEG
24729: PUSH
24730: LD_INT 2
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24763: LD_ADDR_VAR 0 34
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: LD_INT 1
24783: NEG
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 2
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: LD_INT 3
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: LD_INT 2
24969: NEG
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 3
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: LD_INT 3
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 3
25008: NEG
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25043: LD_ADDR_VAR 0 35
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 2
25134: NEG
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25155: LD_ADDR_VAR 0 36
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: LD_INT 2
25240: NEG
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: LD_INT 2
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25267: LD_ADDR_VAR 0 37
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25379: LD_ADDR_VAR 0 38
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: NEG
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25491: LD_ADDR_VAR 0 39
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25603: LD_ADDR_VAR 0 40
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25715: LD_ADDR_VAR 0 41
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: NEG
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: LD_INT 1
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 2
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: LD_INT 3
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 3
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 3
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 3
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 3
25958: PUSH
25959: LD_INT 3
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 3
25989: NEG
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 3
26000: NEG
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 3
26012: NEG
26013: PUSH
26014: LD_INT 2
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 3
26024: NEG
26025: PUSH
26026: LD_INT 3
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26065: LD_ADDR_VAR 0 42
26069: PUSH
26070: LD_INT 0
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 2
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 2
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: NEG
26256: PUSH
26257: LD_INT 3
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 3
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 3
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 3
26301: PUSH
26302: LD_INT 2
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 3
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 2
26321: PUSH
26322: LD_INT 3
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 3
26362: NEG
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 3
26374: NEG
26375: PUSH
26376: LD_INT 3
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26415: LD_ADDR_VAR 0 43
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: NEG
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: LD_INT 2
26500: NEG
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 2
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: NEG
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: LD_INT 3
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 3
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 2
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 3
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 3
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: NEG
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 3
26722: NEG
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26763: LD_ADDR_VAR 0 44
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: NEG
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: NEG
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 2
26941: NEG
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 2
26953: NEG
26954: PUSH
26955: LD_INT 3
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 3
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 3
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 3
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 3
27006: PUSH
27007: LD_INT 3
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: LD_INT 3
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 2
27026: NEG
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 3
27037: NEG
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 3
27048: NEG
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 3
27060: NEG
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 3
27072: NEG
27073: PUSH
27074: LD_INT 3
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27113: LD_ADDR_VAR 0 45
27117: PUSH
27118: LD_INT 0
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 2
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 2
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: NEG
27304: PUSH
27305: LD_INT 3
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 3
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 3
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 3
27359: PUSH
27360: LD_INT 3
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 3
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 3
27410: NEG
27411: PUSH
27412: LD_INT 2
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 3
27422: NEG
27423: PUSH
27424: LD_INT 3
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27463: LD_ADDR_VAR 0 46
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 3
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 3
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 2
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 3
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 3
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: LD_INT 3
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 3
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 3
27759: NEG
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 3
27770: NEG
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27811: LD_ADDR_VAR 0 47
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: LD_INT 1
27831: NEG
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: LD_INT 1
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27962: LD_ADDR_VAR 0 48
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: LD_INT 2
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 2
28058: NEG
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28109: LD_ADDR_VAR 0 49
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28253: LD_ADDR_VAR 0 50
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28397: LD_ADDR_VAR 0 51
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: NEG
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: NEG
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28544: LD_ADDR_VAR 0 52
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28695: LD_ADDR_VAR 0 53
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: NEG
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: LD_INT 2
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 2
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 2
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 2
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: NEG
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 2
28882: NEG
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: NEG
28895: PUSH
28896: LD_INT 2
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28925: LD_ADDR_VAR 0 54
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: NEG
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 2
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: LD_INT 2
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: NEG
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: NEG
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29155: LD_ADDR_VAR 0 55
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 2
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: NEG
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29385: LD_ADDR_VAR 0 56
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: LD_INT 2
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: LD_INT 1
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 2
29561: NEG
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29615: LD_ADDR_VAR 0 57
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: NEG
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 2
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: NEG
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 2
29802: NEG
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29845: LD_ADDR_VAR 0 58
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: LD_INT 2
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 2
30021: NEG
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 2
30044: NEG
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30075: LD_ADDR_VAR 0 59
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30163: LD_ADDR_VAR 0 60
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30251: LD_ADDR_VAR 0 61
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30339: LD_ADDR_VAR 0 62
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30427: LD_ADDR_VAR 0 63
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: LD_INT 1
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30515: LD_ADDR_VAR 0 64
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: ST_TO_ADDR
// end ; 1 :
30603: GO 36500
30605: LD_INT 1
30607: DOUBLE
30608: EQUAL
30609: IFTRUE 30613
30611: GO 33236
30613: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30614: LD_ADDR_VAR 0 11
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: LD_INT 3
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: LD_INT 2
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30658: LD_ADDR_VAR 0 12
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30699: LD_ADDR_VAR 0 13
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30739: LD_ADDR_VAR 0 14
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: LD_INT 3
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30780: LD_ADDR_VAR 0 15
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 3
30809: NEG
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30824: LD_ADDR_VAR 0 16
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: LD_INT 3
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30870: LD_ADDR_VAR 0 17
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: LD_INT 3
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: LD_INT 2
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30914: LD_ADDR_VAR 0 18
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 3
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 3
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30955: LD_ADDR_VAR 0 19
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: LD_INT 2
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: LD_INT 3
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30995: LD_ADDR_VAR 0 20
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31036: LD_ADDR_VAR 0 21
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31080: LD_ADDR_VAR 0 22
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: LD_INT 3
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 3
31099: NEG
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 3
31111: NEG
31112: PUSH
31113: LD_INT 3
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31126: LD_ADDR_VAR 0 23
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 4
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31170: LD_ADDR_VAR 0 24
31174: PUSH
31175: LD_INT 3
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 4
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31211: LD_ADDR_VAR 0 25
31215: PUSH
31216: LD_INT 3
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 4
31228: PUSH
31229: LD_INT 3
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 4
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31251: LD_ADDR_VAR 0 26
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: LD_INT 3
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31292: LD_ADDR_VAR 0 27
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 3
31310: NEG
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 4
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: LIST
31335: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31336: LD_ADDR_VAR 0 28
31340: PUSH
31341: LD_INT 3
31343: NEG
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: LD_INT 4
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 4
31367: NEG
31368: PUSH
31369: LD_INT 3
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31382: LD_ADDR_VAR 0 29
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: LD_INT 3
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 3
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: LD_INT 4
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 5
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 5
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 4
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 6
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 6
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 5
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31537: LD_ADDR_VAR 0 30
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 3
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 4
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 4
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 5
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 5
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 5
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 6
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 6
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31680: LD_ADDR_VAR 0 31
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 4
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 4
31727: PUSH
31728: LD_INT 4
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 3
31737: PUSH
31738: LD_INT 4
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 5
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 5
31757: PUSH
31758: LD_INT 5
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 4
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 6
31777: PUSH
31778: LD_INT 5
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 6
31787: PUSH
31788: LD_INT 6
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 5
31797: PUSH
31798: LD_INT 6
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31819: LD_ADDR_VAR 0 32
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 3
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 4
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: LD_INT 4
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: NEG
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: LD_INT 5
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: LD_INT 5
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: LD_INT 4
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 6
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 6
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 5
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31962: LD_ADDR_VAR 0 33
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 3
31980: NEG
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: NEG
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 4
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 4
32037: NEG
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 5
32048: NEG
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 5
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 5
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 6
32082: NEG
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 6
32093: NEG
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32117: LD_ADDR_VAR 0 34
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 3
32136: NEG
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 3
32148: NEG
32149: PUSH
32150: LD_INT 3
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 3
32160: NEG
32161: PUSH
32162: LD_INT 4
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 4
32172: NEG
32173: PUSH
32174: LD_INT 3
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 4
32184: NEG
32185: PUSH
32186: LD_INT 4
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 4
32196: NEG
32197: PUSH
32198: LD_INT 5
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 5
32208: NEG
32209: PUSH
32210: LD_INT 4
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 5
32220: NEG
32221: PUSH
32222: LD_INT 5
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 5
32232: NEG
32233: PUSH
32234: LD_INT 6
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 6
32244: NEG
32245: PUSH
32246: LD_INT 5
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 6
32256: NEG
32257: PUSH
32258: LD_INT 6
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32280: LD_ADDR_VAR 0 41
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: LD_INT 3
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 2
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32324: LD_ADDR_VAR 0 42
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32365: LD_ADDR_VAR 0 43
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: LIST
32404: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32405: LD_ADDR_VAR 0 44
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32446: LD_ADDR_VAR 0 45
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: NEG
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32490: LD_ADDR_VAR 0 46
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: LD_INT 3
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32536: LD_ADDR_VAR 0 47
32540: PUSH
32541: LD_INT 2
32543: NEG
32544: PUSH
32545: LD_INT 3
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32569: LD_ADDR_VAR 0 48
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32600: LD_ADDR_VAR 0 49
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32629: LD_ADDR_VAR 0 50
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 3
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32658: LD_ADDR_VAR 0 51
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32689: LD_ADDR_VAR 0 52
32693: PUSH
32694: LD_INT 3
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: NEG
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32722: LD_ADDR_VAR 0 53
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: LD_INT 3
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 3
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: LD_INT 2
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32766: LD_ADDR_VAR 0 54
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 3
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 3
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32807: LD_ADDR_VAR 0 55
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32847: LD_ADDR_VAR 0 56
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: LD_INT 3
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 3
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32888: LD_ADDR_VAR 0 57
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32932: LD_ADDR_VAR 0 58
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 3
32963: NEG
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: LIST
32977: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32978: LD_ADDR_VAR 0 59
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: LD_INT 2
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: LD_INT 2
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33022: LD_ADDR_VAR 0 60
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33063: LD_ADDR_VAR 0 61
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33103: LD_ADDR_VAR 0 62
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33144: LD_ADDR_VAR 0 63
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: NEG
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33188: LD_ADDR_VAR 0 64
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
// end ; 2 :
33234: GO 36500
33236: LD_INT 2
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 36499
33244: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33245: LD_ADDR_VAR 0 29
33249: PUSH
33250: LD_INT 4
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 5
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 5
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: LD_INT 2
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 5
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 3
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: LD_INT 3
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 4
33375: PUSH
33376: LD_INT 4
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: LD_INT 4
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 4
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: LD_INT 4
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: LD_INT 4
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 4
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 5
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 5
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: LD_INT 4
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: LD_INT 5
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 3
33528: NEG
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: NEG
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 3
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 4
33584: NEG
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 4
33595: NEG
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 4
33607: NEG
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 4
33630: NEG
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 4
33642: NEG
33643: PUSH
33644: LD_INT 5
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: LD_INT 4
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 3
33666: NEG
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 4
33678: NEG
33679: PUSH
33680: LD_INT 3
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 5
33690: NEG
33691: PUSH
33692: LD_INT 4
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 5
33702: NEG
33703: PUSH
33704: LD_INT 5
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: NEG
33715: PUSH
33716: LD_INT 5
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 5
33726: NEG
33727: PUSH
33728: LD_INT 3
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33783: LD_ADDR_VAR 0 30
33787: PUSH
33788: LD_INT 4
33790: PUSH
33791: LD_INT 4
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 4
33800: PUSH
33801: LD_INT 3
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 5
33810: PUSH
33811: LD_INT 4
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 5
33820: PUSH
33821: LD_INT 5
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 4
33830: PUSH
33831: LD_INT 5
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 4
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 3
33850: PUSH
33851: LD_INT 3
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: LD_INT 3
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 3
33870: PUSH
33871: LD_INT 5
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: LD_INT 3
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 3
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 4
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 4
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 4
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 4
33973: NEG
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 4
33984: NEG
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 3
33996: NEG
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 4
34018: NEG
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 5
34029: NEG
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 5
34040: NEG
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 5
34052: NEG
34053: PUSH
34054: LD_INT 2
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 3
34075: NEG
34076: PUSH
34077: LD_INT 3
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 3
34087: NEG
34088: PUSH
34089: LD_INT 4
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: LD_INT 3
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: LD_INT 2
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 3
34123: NEG
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 4
34135: NEG
34136: PUSH
34137: LD_INT 3
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 4
34147: NEG
34148: PUSH
34149: LD_INT 4
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 4
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 4
34171: NEG
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 4
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 5
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 4
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: LD_INT 3
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: LD_INT 3
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: LD_INT 4
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 5
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 3
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: LD_INT 5
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34330: LD_ADDR_VAR 0 31
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 4
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 4
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 5
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 5
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 4
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 3
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 5
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: LD_INT 3
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 3
34430: NEG
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 3
34441: NEG
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 3
34475: NEG
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 4
34486: NEG
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 4
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 4
34509: NEG
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 4
34532: NEG
34533: PUSH
34534: LD_INT 4
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 4
34544: NEG
34545: PUSH
34546: LD_INT 5
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 3
34556: NEG
34557: PUSH
34558: LD_INT 4
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 3
34568: NEG
34569: PUSH
34570: LD_INT 3
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 4
34580: NEG
34581: PUSH
34582: LD_INT 3
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 5
34592: NEG
34593: PUSH
34594: LD_INT 4
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 5
34604: NEG
34605: PUSH
34606: LD_INT 5
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 3
34616: NEG
34617: PUSH
34618: LD_INT 5
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 5
34628: NEG
34629: PUSH
34630: LD_INT 3
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 3
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 4
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 3
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 3
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: LD_INT 4
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 2
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: LD_INT 4
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 4
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 4
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 5
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 5
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 3
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 5
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34880: LD_ADDR_VAR 0 32
34884: PUSH
34885: LD_INT 4
34887: NEG
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 4
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 3
34910: NEG
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 4
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 5
34943: NEG
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 5
34954: NEG
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 5
34966: NEG
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 3
34978: NEG
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 3
34989: NEG
34990: PUSH
34991: LD_INT 3
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 3
35001: NEG
35002: PUSH
35003: LD_INT 4
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: LD_INT 3
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 3
35037: NEG
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 4
35049: NEG
35050: PUSH
35051: LD_INT 3
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 4
35061: NEG
35062: PUSH
35063: LD_INT 4
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 4
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 4
35085: NEG
35086: PUSH
35087: LD_INT 2
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: LD_INT 4
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 5
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 4
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: LD_INT 3
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 3
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: LD_INT 4
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: LD_INT 5
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: LD_INT 3
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 2
35187: NEG
35188: PUSH
35189: LD_INT 5
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 3
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 3
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 4
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 4
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 4
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: LD_INT 4
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 4
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 5
35312: PUSH
35313: LD_INT 4
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 5
35322: PUSH
35323: LD_INT 5
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 4
35332: PUSH
35333: LD_INT 5
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 3
35342: PUSH
35343: LD_INT 4
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: LD_INT 3
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 5
35362: PUSH
35363: LD_INT 3
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 3
35372: PUSH
35373: LD_INT 5
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35427: LD_ADDR_VAR 0 33
35431: PUSH
35432: LD_INT 4
35434: NEG
35435: PUSH
35436: LD_INT 4
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 4
35446: NEG
35447: PUSH
35448: LD_INT 5
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 3
35458: NEG
35459: PUSH
35460: LD_INT 4
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 3
35470: NEG
35471: PUSH
35472: LD_INT 3
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 4
35482: NEG
35483: PUSH
35484: LD_INT 3
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 5
35494: NEG
35495: PUSH
35496: LD_INT 4
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 5
35506: NEG
35507: PUSH
35508: LD_INT 5
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 3
35518: NEG
35519: PUSH
35520: LD_INT 5
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 5
35530: NEG
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 3
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 4
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: LD_INT 3
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 3
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 4
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: LD_INT 4
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 4
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 4
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 5
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 5
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 4
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 3
35716: PUSH
35717: LD_INT 2
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 5
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 4
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 4
35767: PUSH
35768: LD_INT 4
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: LD_INT 4
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 4
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 4
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 4
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: LD_INT 4
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 5
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 5
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: LD_INT 4
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: LD_INT 3
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35965: LD_ADDR_VAR 0 34
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 4
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 5
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 4
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 3
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 3
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: LD_INT 4
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 5
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: LD_INT 3
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 5
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 4
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 4
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 3
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 2
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 4
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 4
36167: PUSH
36168: LD_INT 4
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 4
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 5
36187: PUSH
36188: LD_INT 4
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 5
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 4
36207: PUSH
36208: LD_INT 5
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 3
36217: PUSH
36218: LD_INT 4
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: LD_INT 3
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 5
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 3
36247: PUSH
36248: LD_INT 5
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 3
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 4
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 4
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: LD_INT 3
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 4
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 4
36350: NEG
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 4
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 3
36373: NEG
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 3
36384: NEG
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 4
36395: NEG
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 5
36406: NEG
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 5
36417: NEG
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 5
36429: NEG
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// end ; end ;
36497: GO 36500
36499: POP
// case btype of b_depot , b_warehouse :
36500: LD_VAR 0 1
36504: PUSH
36505: LD_INT 0
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36519
36511: LD_INT 1
36513: DOUBLE
36514: EQUAL
36515: IFTRUE 36519
36517: GO 36720
36519: POP
// case nation of nation_american :
36520: LD_VAR 0 5
36524: PUSH
36525: LD_INT 1
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36589
36533: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36534: LD_ADDR_VAR 0 9
36538: PUSH
36539: LD_VAR 0 11
36543: PUSH
36544: LD_VAR 0 12
36548: PUSH
36549: LD_VAR 0 13
36553: PUSH
36554: LD_VAR 0 14
36558: PUSH
36559: LD_VAR 0 15
36563: PUSH
36564: LD_VAR 0 16
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: PUSH
36577: LD_VAR 0 4
36581: PUSH
36582: LD_INT 1
36584: PLUS
36585: ARRAY
36586: ST_TO_ADDR
36587: GO 36718
36589: LD_INT 2
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36597
36595: GO 36653
36597: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36598: LD_ADDR_VAR 0 9
36602: PUSH
36603: LD_VAR 0 17
36607: PUSH
36608: LD_VAR 0 18
36612: PUSH
36613: LD_VAR 0 19
36617: PUSH
36618: LD_VAR 0 20
36622: PUSH
36623: LD_VAR 0 21
36627: PUSH
36628: LD_VAR 0 22
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: PUSH
36641: LD_VAR 0 4
36645: PUSH
36646: LD_INT 1
36648: PLUS
36649: ARRAY
36650: ST_TO_ADDR
36651: GO 36718
36653: LD_INT 3
36655: DOUBLE
36656: EQUAL
36657: IFTRUE 36661
36659: GO 36717
36661: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36662: LD_ADDR_VAR 0 9
36666: PUSH
36667: LD_VAR 0 23
36671: PUSH
36672: LD_VAR 0 24
36676: PUSH
36677: LD_VAR 0 25
36681: PUSH
36682: LD_VAR 0 26
36686: PUSH
36687: LD_VAR 0 27
36691: PUSH
36692: LD_VAR 0 28
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: PUSH
36705: LD_VAR 0 4
36709: PUSH
36710: LD_INT 1
36712: PLUS
36713: ARRAY
36714: ST_TO_ADDR
36715: GO 36718
36717: POP
36718: GO 37267
36720: LD_INT 2
36722: DOUBLE
36723: EQUAL
36724: IFTRUE 36734
36726: LD_INT 3
36728: DOUBLE
36729: EQUAL
36730: IFTRUE 36734
36732: GO 36790
36734: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36735: LD_ADDR_VAR 0 9
36739: PUSH
36740: LD_VAR 0 29
36744: PUSH
36745: LD_VAR 0 30
36749: PUSH
36750: LD_VAR 0 31
36754: PUSH
36755: LD_VAR 0 32
36759: PUSH
36760: LD_VAR 0 33
36764: PUSH
36765: LD_VAR 0 34
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 4
36782: PUSH
36783: LD_INT 1
36785: PLUS
36786: ARRAY
36787: ST_TO_ADDR
36788: GO 37267
36790: LD_INT 16
36792: DOUBLE
36793: EQUAL
36794: IFTRUE 36846
36796: LD_INT 17
36798: DOUBLE
36799: EQUAL
36800: IFTRUE 36846
36802: LD_INT 18
36804: DOUBLE
36805: EQUAL
36806: IFTRUE 36846
36808: LD_INT 19
36810: DOUBLE
36811: EQUAL
36812: IFTRUE 36846
36814: LD_INT 20
36816: DOUBLE
36817: EQUAL
36818: IFTRUE 36846
36820: LD_INT 21
36822: DOUBLE
36823: EQUAL
36824: IFTRUE 36846
36826: LD_INT 23
36828: DOUBLE
36829: EQUAL
36830: IFTRUE 36846
36832: LD_INT 24
36834: DOUBLE
36835: EQUAL
36836: IFTRUE 36846
36838: LD_INT 25
36840: DOUBLE
36841: EQUAL
36842: IFTRUE 36846
36844: GO 36902
36846: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36847: LD_ADDR_VAR 0 9
36851: PUSH
36852: LD_VAR 0 35
36856: PUSH
36857: LD_VAR 0 36
36861: PUSH
36862: LD_VAR 0 37
36866: PUSH
36867: LD_VAR 0 38
36871: PUSH
36872: LD_VAR 0 39
36876: PUSH
36877: LD_VAR 0 40
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: PUSH
36890: LD_VAR 0 4
36894: PUSH
36895: LD_INT 1
36897: PLUS
36898: ARRAY
36899: ST_TO_ADDR
36900: GO 37267
36902: LD_INT 6
36904: DOUBLE
36905: EQUAL
36906: IFTRUE 36958
36908: LD_INT 7
36910: DOUBLE
36911: EQUAL
36912: IFTRUE 36958
36914: LD_INT 8
36916: DOUBLE
36917: EQUAL
36918: IFTRUE 36958
36920: LD_INT 13
36922: DOUBLE
36923: EQUAL
36924: IFTRUE 36958
36926: LD_INT 12
36928: DOUBLE
36929: EQUAL
36930: IFTRUE 36958
36932: LD_INT 15
36934: DOUBLE
36935: EQUAL
36936: IFTRUE 36958
36938: LD_INT 11
36940: DOUBLE
36941: EQUAL
36942: IFTRUE 36958
36944: LD_INT 14
36946: DOUBLE
36947: EQUAL
36948: IFTRUE 36958
36950: LD_INT 10
36952: DOUBLE
36953: EQUAL
36954: IFTRUE 36958
36956: GO 37014
36958: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36959: LD_ADDR_VAR 0 9
36963: PUSH
36964: LD_VAR 0 41
36968: PUSH
36969: LD_VAR 0 42
36973: PUSH
36974: LD_VAR 0 43
36978: PUSH
36979: LD_VAR 0 44
36983: PUSH
36984: LD_VAR 0 45
36988: PUSH
36989: LD_VAR 0 46
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: PUSH
37002: LD_VAR 0 4
37006: PUSH
37007: LD_INT 1
37009: PLUS
37010: ARRAY
37011: ST_TO_ADDR
37012: GO 37267
37014: LD_INT 36
37016: DOUBLE
37017: EQUAL
37018: IFTRUE 37022
37020: GO 37078
37022: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37023: LD_ADDR_VAR 0 9
37027: PUSH
37028: LD_VAR 0 47
37032: PUSH
37033: LD_VAR 0 48
37037: PUSH
37038: LD_VAR 0 49
37042: PUSH
37043: LD_VAR 0 50
37047: PUSH
37048: LD_VAR 0 51
37052: PUSH
37053: LD_VAR 0 52
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: PUSH
37066: LD_VAR 0 4
37070: PUSH
37071: LD_INT 1
37073: PLUS
37074: ARRAY
37075: ST_TO_ADDR
37076: GO 37267
37078: LD_INT 4
37080: DOUBLE
37081: EQUAL
37082: IFTRUE 37104
37084: LD_INT 5
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37104
37090: LD_INT 34
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37104
37096: LD_INT 37
37098: DOUBLE
37099: EQUAL
37100: IFTRUE 37104
37102: GO 37160
37104: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37105: LD_ADDR_VAR 0 9
37109: PUSH
37110: LD_VAR 0 53
37114: PUSH
37115: LD_VAR 0 54
37119: PUSH
37120: LD_VAR 0 55
37124: PUSH
37125: LD_VAR 0 56
37129: PUSH
37130: LD_VAR 0 57
37134: PUSH
37135: LD_VAR 0 58
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: PUSH
37148: LD_VAR 0 4
37152: PUSH
37153: LD_INT 1
37155: PLUS
37156: ARRAY
37157: ST_TO_ADDR
37158: GO 37267
37160: LD_INT 31
37162: DOUBLE
37163: EQUAL
37164: IFTRUE 37210
37166: LD_INT 32
37168: DOUBLE
37169: EQUAL
37170: IFTRUE 37210
37172: LD_INT 33
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37210
37178: LD_INT 27
37180: DOUBLE
37181: EQUAL
37182: IFTRUE 37210
37184: LD_INT 26
37186: DOUBLE
37187: EQUAL
37188: IFTRUE 37210
37190: LD_INT 28
37192: DOUBLE
37193: EQUAL
37194: IFTRUE 37210
37196: LD_INT 29
37198: DOUBLE
37199: EQUAL
37200: IFTRUE 37210
37202: LD_INT 30
37204: DOUBLE
37205: EQUAL
37206: IFTRUE 37210
37208: GO 37266
37210: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
37211: LD_ADDR_VAR 0 9
37215: PUSH
37216: LD_VAR 0 59
37220: PUSH
37221: LD_VAR 0 60
37225: PUSH
37226: LD_VAR 0 61
37230: PUSH
37231: LD_VAR 0 62
37235: PUSH
37236: LD_VAR 0 63
37240: PUSH
37241: LD_VAR 0 64
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: PUSH
37254: LD_VAR 0 4
37258: PUSH
37259: LD_INT 1
37261: PLUS
37262: ARRAY
37263: ST_TO_ADDR
37264: GO 37267
37266: POP
// temp_list2 = [ ] ;
37267: LD_ADDR_VAR 0 10
37271: PUSH
37272: EMPTY
37273: ST_TO_ADDR
// for i in temp_list do
37274: LD_ADDR_VAR 0 8
37278: PUSH
37279: LD_VAR 0 9
37283: PUSH
37284: FOR_IN
37285: IFFALSE 37337
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37287: LD_ADDR_VAR 0 10
37291: PUSH
37292: LD_VAR 0 10
37296: PUSH
37297: LD_VAR 0 8
37301: PUSH
37302: LD_INT 1
37304: ARRAY
37305: PUSH
37306: LD_VAR 0 2
37310: PLUS
37311: PUSH
37312: LD_VAR 0 8
37316: PUSH
37317: LD_INT 2
37319: ARRAY
37320: PUSH
37321: LD_VAR 0 3
37325: PLUS
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: EMPTY
37332: LIST
37333: ADD
37334: ST_TO_ADDR
37335: GO 37284
37337: POP
37338: POP
// result = temp_list2 ;
37339: LD_ADDR_VAR 0 7
37343: PUSH
37344: LD_VAR 0 10
37348: ST_TO_ADDR
// end ; end_of_file
37349: LD_VAR 0 7
37353: RET
// every 1 do var i ;
37354: GO 37356
37356: DISABLE
37357: LD_INT 0
37359: PPUSH
// begin Video ( true ) ;
37360: LD_INT 1
37362: PPUSH
37363: CALL 7387 0 1
// CenterOnXY ( 53 , 40 ) ;
37367: LD_INT 53
37369: PPUSH
37370: LD_INT 40
37372: PPUSH
37373: CALL_OW 84
// wait ( 0 0$5 ) ;
37377: LD_INT 175
37379: PPUSH
37380: CALL_OW 67
// if gammaCommander = 1 then
37384: LD_EXP 12
37388: PUSH
37389: LD_INT 1
37391: EQUAL
37392: IFFALSE 37406
// Say ( Donaldson , D1-Don-1 ) ;
37394: LD_EXP 3
37398: PPUSH
37399: LD_STRING D1-Don-1
37401: PPUSH
37402: CALL_OW 88
// if gammaCommander = 2 then
37406: LD_EXP 12
37410: PUSH
37411: LD_INT 2
37413: EQUAL
37414: IFFALSE 37428
// Say ( Brown , D1-Brown-1 ) ;
37416: LD_EXP 2
37420: PPUSH
37421: LD_STRING D1-Brown-1
37423: PPUSH
37424: CALL_OW 88
// if gammaCommander = 3 then
37428: LD_EXP 12
37432: PUSH
37433: LD_INT 3
37435: EQUAL
37436: IFFALSE 37450
// Say ( Houten , D1-VanH-1 ) ;
37438: LD_EXP 13
37442: PPUSH
37443: LD_STRING D1-VanH-1
37445: PPUSH
37446: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37450: LD_EXP 22
37454: PPUSH
37455: LD_STRING D1-Har-1
37457: PPUSH
37458: CALL_OW 94
// if gammaCommander = 1 then
37462: LD_EXP 12
37466: PUSH
37467: LD_INT 1
37469: EQUAL
37470: IFFALSE 37484
// Say ( Donaldson , D1-Don-2 ) ;
37472: LD_EXP 3
37476: PPUSH
37477: LD_STRING D1-Don-2
37479: PPUSH
37480: CALL_OW 88
// if gammaCommander = 2 then
37484: LD_EXP 12
37488: PUSH
37489: LD_INT 2
37491: EQUAL
37492: IFFALSE 37506
// Say ( Brown , D1-Brown-2 ) ;
37494: LD_EXP 2
37498: PPUSH
37499: LD_STRING D1-Brown-2
37501: PPUSH
37502: CALL_OW 88
// if gammaCommander = 3 then
37506: LD_EXP 12
37510: PUSH
37511: LD_INT 3
37513: EQUAL
37514: IFFALSE 37528
// Say ( Houten , D1-VanH-2 ) ;
37516: LD_EXP 13
37520: PPUSH
37521: LD_STRING D1-VanH-2
37523: PPUSH
37524: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37528: LD_EXP 22
37532: PPUSH
37533: LD_STRING D1-Har-2
37535: PPUSH
37536: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37540: LD_INT 22
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 33
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 61
37562: PUSH
37563: EMPTY
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: PPUSH
37571: CALL_OW 69
37575: IFFALSE 37640
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37577: LD_ADDR_VAR 0 1
37581: PUSH
37582: LD_INT 22
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 33
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 61
37604: PUSH
37605: EMPTY
37606: LIST
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: PPUSH
37613: CALL_OW 69
37617: PUSH
37618: FOR_IN
37619: IFFALSE 37638
// ComAgressiveMove ( i , 70 , 41 ) ;
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_INT 70
37628: PPUSH
37629: LD_INT 41
37631: PPUSH
37632: CALL_OW 114
37636: GO 37618
37638: POP
37639: POP
// repeat wait ( 0 0$1 ) ;
37640: LD_INT 35
37642: PPUSH
37643: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37647: LD_ADDR_VAR 0 1
37651: PUSH
37652: LD_INT 22
37654: PUSH
37655: LD_INT 6
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: EMPTY
37663: LIST
37664: PPUSH
37665: CALL_OW 69
37669: PUSH
37670: FOR_IN
37671: IFFALSE 37690
// ComAgressiveMove ( i , 54 , 20 ) ;
37673: LD_VAR 0 1
37677: PPUSH
37678: LD_INT 54
37680: PPUSH
37681: LD_INT 20
37683: PPUSH
37684: CALL_OW 114
37688: GO 37670
37690: POP
37691: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37692: LD_ADDR_VAR 0 1
37696: PUSH
37697: LD_INT 22
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 25
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 3
37719: PUSH
37720: LD_INT 54
37722: PUSH
37723: EMPTY
37724: LIST
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: LIST
37734: PPUSH
37735: CALL_OW 69
37739: PUSH
37740: FOR_IN
37741: IFFALSE 37775
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37743: LD_VAR 0 1
37747: PPUSH
37748: LD_INT 70
37750: PPUSH
37751: LD_INT 41
37753: PPUSH
37754: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_INT 46
37765: PPUSH
37766: LD_INT 39
37768: PPUSH
37769: CALL_OW 174
// end ;
37773: GO 37740
37775: POP
37776: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37777: LD_ADDR_VAR 0 1
37781: PUSH
37782: LD_INT 22
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 21
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: LD_INT 24
37807: PUSH
37808: LD_INT 500
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: PPUSH
37824: CALL_OW 69
37828: PUSH
37829: FOR_IN
37830: IFFALSE 37863
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37832: LD_VAR 0 1
37836: PPUSH
37837: LD_EXP 37
37841: PPUSH
37842: CALL_OW 250
37846: PPUSH
37847: LD_EXP 37
37851: PPUSH
37852: CALL_OW 251
37856: PPUSH
37857: CALL_OW 111
37861: GO 37829
37863: POP
37864: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37865: LD_INT 22
37867: PUSH
37868: LD_INT 6
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 21
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 24
37887: PUSH
37888: LD_INT 250
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: PPUSH
37900: CALL_OW 69
37904: PUSH
37905: LD_INT 5
37907: LESS
37908: IFFALSE 37640
// Video ( false ) ;
37910: LD_INT 0
37912: PPUSH
37913: CALL 7387 0 1
// ChangeMissionObjectives ( M1 ) ;
37917: LD_STRING M1
37919: PPUSH
37920: CALL_OW 337
// SaveForQuickRestart ;
37924: CALL_OW 22
// startCutscene = 0 ;
37928: LD_ADDR_EXP 38
37932: PUSH
37933: LD_INT 0
37935: ST_TO_ADDR
// end ;
37936: PPOPN 1
37938: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37939: LD_EXP 38
37943: IFFALSE 38034
37945: GO 37947
37947: DISABLE
37948: LD_INT 0
37950: PPUSH
37951: PPUSH
// begin enable ;
37952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37953: LD_ADDR_VAR 0 1
37957: PUSH
37958: LD_INT 22
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 21
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: LD_INT 24
37983: PUSH
37984: LD_INT 700
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: PPUSH
38000: CALL_OW 69
38004: ST_TO_ADDR
// for i in tmp do
38005: LD_ADDR_VAR 0 2
38009: PUSH
38010: LD_VAR 0 1
38014: PUSH
38015: FOR_IN
38016: IFFALSE 38032
// SetLives ( i , 700 ) ;
38018: LD_VAR 0 2
38022: PPUSH
38023: LD_INT 700
38025: PPUSH
38026: CALL_OW 234
38030: GO 38015
38032: POP
38033: POP
// end ;
38034: PPOPN 2
38036: END
// every 1 1$0 do
38037: GO 38039
38039: DISABLE
// begin PrepareSupportFromDelta ;
38040: CALL 3713 0 0
// firstAttack = 1 ;
38044: LD_ADDR_EXP 33
38048: PUSH
38049: LD_INT 1
38051: ST_TO_ADDR
// if IsOk ( Gladstone ) then
38052: LD_EXP 8
38056: PPUSH
38057: CALL_OW 302
38061: IFFALSE 38077
// begin Say ( Gladstone , D2-Glad-1 ) ;
38063: LD_EXP 8
38067: PPUSH
38068: LD_STRING D2-Glad-1
38070: PPUSH
38071: CALL_OW 88
// end else
38075: GO 38185
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
38077: LD_INT 4
38079: PPUSH
38080: LD_INT 22
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 21
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 25
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 25
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 25
38125: PUSH
38126: LD_INT 3
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 25
38135: PUSH
38136: LD_INT 4
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: PPUSH
38155: CALL_OW 70
38159: PUSH
38160: LD_EXP 15
38164: PUSH
38165: LD_EXP 14
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: DIFF
38174: PPUSH
38175: LD_STRING D2-Sol1-1
38177: PPUSH
38178: LD_STRING D2-FSol1-1
38180: PPUSH
38181: CALL 7415 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
38185: LD_EXP 3
38189: PPUSH
38190: CALL_OW 302
38194: PUSH
38195: LD_EXP 12
38199: PUSH
38200: LD_INT 1
38202: EQUAL
38203: AND
38204: IFFALSE 38218
// Say ( Donaldson , D2-Don-1 ) ;
38206: LD_EXP 3
38210: PPUSH
38211: LD_STRING D2-Don-1
38213: PPUSH
38214: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
38218: LD_EXP 2
38222: PPUSH
38223: CALL_OW 302
38227: PUSH
38228: LD_EXP 12
38232: PUSH
38233: LD_INT 2
38235: EQUAL
38236: AND
38237: IFFALSE 38251
// Say ( Brown , D2-Brown-1 ) ;
38239: LD_EXP 2
38243: PPUSH
38244: LD_STRING D2-Brown-1
38246: PPUSH
38247: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
38251: LD_EXP 13
38255: PPUSH
38256: CALL_OW 302
38260: PUSH
38261: LD_EXP 12
38265: PUSH
38266: LD_INT 3
38268: EQUAL
38269: AND
38270: IFFALSE 38284
// Say ( Houten , D2-VanH-1 ) ;
38272: LD_EXP 13
38276: PPUSH
38277: LD_STRING D2-VanH-1
38279: PPUSH
38280: CALL_OW 88
// end ;
38284: END
// every 0 0$1 do
38285: GO 38287
38287: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38288: LD_STRING 07_time
38290: PPUSH
38291: LD_INT 12600
38293: PPUSH
38294: CALL_OW 30
38298: PUSH
38299: LD_INT 3
38301: DIV
38302: PPUSH
38303: CALL_OW 67
// PrepareMacmillanSquad ;
38307: CALL 4375 0 0
// CenterNowOnUnits ( JMM ) ;
38311: LD_EXP 1
38315: PPUSH
38316: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38320: LD_EXP 1
38324: PPUSH
38325: LD_STRING D3-JMM-1
38327: PPUSH
38328: CALL_OW 88
// JMMArrive = 1 ;
38332: LD_ADDR_EXP 39
38336: PUSH
38337: LD_INT 1
38339: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38340: LD_EXP 3
38344: PPUSH
38345: CALL_OW 302
38349: PUSH
38350: LD_EXP 12
38354: PUSH
38355: LD_INT 1
38357: EQUAL
38358: AND
38359: IFFALSE 38375
// begin Say ( Donaldson , D3-Don-1 ) ;
38361: LD_EXP 3
38365: PPUSH
38366: LD_STRING D3-Don-1
38368: PPUSH
38369: CALL_OW 88
// end else
38373: GO 38427
// begin if gammaCommander = 1 then
38375: LD_EXP 12
38379: PUSH
38380: LD_INT 1
38382: EQUAL
38383: IFFALSE 38427
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38385: LD_EXP 11
38389: PPUSH
38390: LD_INT 26
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PPUSH
38400: CALL_OW 72
38404: PPUSH
38405: LD_STRING D3-Sol1-1
38407: PPUSH
38408: LD_STRING D3-Sol1-1
38410: PPUSH
38411: CALL 7415 0 3
// Say ( JMM , D3-JMM-2 ) ;
38415: LD_EXP 1
38419: PPUSH
38420: LD_STRING D3-JMM-2
38422: PPUSH
38423: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38427: LD_EXP 2
38431: PPUSH
38432: CALL_OW 302
38436: PUSH
38437: LD_EXP 12
38441: PUSH
38442: LD_INT 2
38444: EQUAL
38445: AND
38446: IFFALSE 38462
// begin Say ( Brown , D3-Brown-1 ) ;
38448: LD_EXP 2
38452: PPUSH
38453: LD_STRING D3-Brown-1
38455: PPUSH
38456: CALL_OW 88
// end else
38460: GO 38514
// begin if gammaCommander = 2 then
38462: LD_EXP 12
38466: PUSH
38467: LD_INT 2
38469: EQUAL
38470: IFFALSE 38514
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38472: LD_EXP 11
38476: PPUSH
38477: LD_INT 26
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PPUSH
38487: CALL_OW 72
38491: PPUSH
38492: LD_STRING D3-Sol1-1a
38494: PPUSH
38495: LD_STRING D3-Sol1-1a
38497: PPUSH
38498: CALL 7415 0 3
// Say ( JMM , D3-JMM-2 ) ;
38502: LD_EXP 1
38506: PPUSH
38507: LD_STRING D3-JMM-2
38509: PPUSH
38510: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38514: LD_EXP 13
38518: PPUSH
38519: CALL_OW 302
38523: PUSH
38524: LD_EXP 12
38528: PUSH
38529: LD_INT 3
38531: EQUAL
38532: AND
38533: IFFALSE 38549
// begin Say ( Houten , D3-VanH-1 ) ;
38535: LD_EXP 13
38539: PPUSH
38540: LD_STRING D3-VanH-1
38542: PPUSH
38543: CALL_OW 88
// end else
38547: GO 38601
// begin if gammaCommander = 3 then
38549: LD_EXP 12
38553: PUSH
38554: LD_INT 3
38556: EQUAL
38557: IFFALSE 38601
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38559: LD_EXP 11
38563: PPUSH
38564: LD_INT 26
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PPUSH
38574: CALL_OW 72
38578: PPUSH
38579: LD_STRING D3-Sol1-1b
38581: PPUSH
38582: LD_STRING D3-Sol1-1b
38584: PPUSH
38585: CALL 7415 0 3
// Say ( JMM , D3-JMM-2 ) ;
38589: LD_EXP 1
38593: PPUSH
38594: LD_STRING D3-JMM-2
38596: PPUSH
38597: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38601: LD_EXP 15
38605: PPUSH
38606: CALL_OW 302
38610: IFFALSE 38638
// begin Say ( Joan , D3a-Joan-1 ) ;
38612: LD_EXP 15
38616: PPUSH
38617: LD_STRING D3a-Joan-1
38619: PPUSH
38620: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38624: LD_EXP 1
38628: PPUSH
38629: LD_STRING D3a-JMM-1
38631: PPUSH
38632: CALL_OW 88
// end else
38636: GO 38980
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38638: LD_STRING 06_JoanStatus_1
38640: PPUSH
38641: LD_INT 0
38643: PPUSH
38644: CALL_OW 30
38648: PUSH
38649: LD_INT 1
38651: EQUAL
38652: IFFALSE 38980
// begin Say ( JMM , D3b-JMM-1 ) ;
38654: LD_EXP 1
38658: PPUSH
38659: LD_STRING D3b-JMM-1
38661: PPUSH
38662: CALL_OW 88
// if gammaCommander = 1 then
38666: LD_EXP 12
38670: PUSH
38671: LD_INT 1
38673: EQUAL
38674: IFFALSE 38731
// if IsOK ( Donaldson ) then
38676: LD_EXP 3
38680: PPUSH
38681: CALL_OW 302
38685: IFFALSE 38701
// Say ( Donaldson , D3b-Don-1 ) else
38687: LD_EXP 3
38691: PPUSH
38692: LD_STRING D3b-Don-1
38694: PPUSH
38695: CALL_OW 88
38699: GO 38731
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38701: LD_EXP 11
38705: PPUSH
38706: LD_INT 26
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PPUSH
38716: CALL_OW 72
38720: PPUSH
38721: LD_STRING D3b-Sol1-1
38723: PPUSH
38724: LD_STRING D3b-Sol1-1
38726: PPUSH
38727: CALL 7415 0 3
// if gammaCommander = 2 then
38731: LD_EXP 12
38735: PUSH
38736: LD_INT 2
38738: EQUAL
38739: IFFALSE 38796
// if IsOk ( Brown ) then
38741: LD_EXP 2
38745: PPUSH
38746: CALL_OW 302
38750: IFFALSE 38766
// Say ( Brown , D3b-Brown-1 ) else
38752: LD_EXP 2
38756: PPUSH
38757: LD_STRING D3b-Brown-1
38759: PPUSH
38760: CALL_OW 88
38764: GO 38796
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38766: LD_EXP 11
38770: PPUSH
38771: LD_INT 26
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PPUSH
38781: CALL_OW 72
38785: PPUSH
38786: LD_STRING D3b-Sol1-1
38788: PPUSH
38789: LD_STRING D3b-Sol1-1
38791: PPUSH
38792: CALL 7415 0 3
// if gammaCommander = 3 then
38796: LD_EXP 12
38800: PUSH
38801: LD_INT 3
38803: EQUAL
38804: IFFALSE 38861
// if IsOk ( Houten ) then
38806: LD_EXP 13
38810: PPUSH
38811: CALL_OW 302
38815: IFFALSE 38831
// Say ( Houten , D3b-VanH-1 ) else
38817: LD_EXP 13
38821: PPUSH
38822: LD_STRING D3b-VanH-1
38824: PPUSH
38825: CALL_OW 88
38829: GO 38861
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38831: LD_EXP 11
38835: PPUSH
38836: LD_INT 26
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PPUSH
38846: CALL_OW 72
38850: PPUSH
38851: LD_STRING D3b-Sol1-1
38853: PPUSH
38854: LD_STRING D3b-Sol1-1
38856: PPUSH
38857: CALL 7415 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38861: LD_EXP 11
38865: PPUSH
38866: LD_INT 26
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PPUSH
38876: CALL_OW 72
38880: PUSH
38881: LD_EXP 12
38885: PUSH
38886: LD_INT 1
38888: EQUAL
38889: PUSH
38890: LD_EXP 3
38894: PPUSH
38895: CALL_OW 302
38899: AND
38900: OR
38901: PUSH
38902: LD_EXP 12
38906: PUSH
38907: LD_INT 2
38909: EQUAL
38910: PUSH
38911: LD_EXP 2
38915: PPUSH
38916: CALL_OW 302
38920: AND
38921: OR
38922: PUSH
38923: LD_EXP 12
38927: PUSH
38928: LD_INT 3
38930: EQUAL
38931: PUSH
38932: LD_EXP 13
38936: PPUSH
38937: CALL_OW 302
38941: AND
38942: OR
38943: IFFALSE 38957
// Say ( JMM , D3b-JMM-2 ) ;
38945: LD_EXP 1
38949: PPUSH
38950: LD_STRING D3b-JMM-2
38952: PPUSH
38953: CALL_OW 88
// if IsOK ( Lisa ) then
38957: LD_EXP 6
38961: PPUSH
38962: CALL_OW 302
38966: IFFALSE 38980
// Say ( Lisa , D3b-Lisa-2 ) ;
38968: LD_EXP 6
38972: PPUSH
38973: LD_STRING D3b-Lisa-2
38975: PPUSH
38976: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38980: LD_INT 22
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 21
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 26
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 25
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 25
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 25
39035: PUSH
39036: LD_INT 3
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 25
39045: PUSH
39046: LD_INT 4
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: PPUSH
39066: CALL_OW 69
39070: PUSH
39071: LD_EXP 1
39075: PUSH
39076: LD_EXP 2
39080: PUSH
39081: LD_EXP 3
39085: PUSH
39086: LD_EXP 4
39090: PUSH
39091: LD_EXP 5
39095: PUSH
39096: LD_EXP 6
39100: PUSH
39101: LD_EXP 7
39105: PUSH
39106: LD_EXP 8
39110: PUSH
39111: LD_EXP 9
39115: PUSH
39116: LD_EXP 10
39120: PUSH
39121: LD_EXP 15
39125: PUSH
39126: LD_EXP 14
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: DIFF
39145: PPUSH
39146: LD_STRING DCa-Sol1-1
39148: PPUSH
39149: LD_STRING DCa-Sol1-1
39151: PPUSH
39152: CALL 7415 0 3
// Say ( JMM , DCb-JMM-1 ) ;
39156: LD_EXP 1
39160: PPUSH
39161: LD_STRING DCb-JMM-1
39163: PPUSH
39164: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
39168: LD_INT 22
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 21
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 26
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 25
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 25
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 25
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 25
39233: PUSH
39234: LD_INT 4
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: PPUSH
39254: CALL_OW 69
39258: PUSH
39259: LD_EXP 1
39263: PUSH
39264: LD_EXP 2
39268: PUSH
39269: LD_EXP 3
39273: PUSH
39274: LD_EXP 4
39278: PUSH
39279: LD_EXP 5
39283: PUSH
39284: LD_EXP 6
39288: PUSH
39289: LD_EXP 7
39293: PUSH
39294: LD_EXP 8
39298: PUSH
39299: LD_EXP 9
39303: PUSH
39304: LD_EXP 10
39308: PUSH
39309: LD_EXP 15
39313: PUSH
39314: LD_EXP 14
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: DIFF
39333: PPUSH
39334: LD_STRING DCb-Sol1-1
39336: PPUSH
39337: LD_STRING DCb-Sol1-1
39339: PPUSH
39340: CALL 7415 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39344: LD_EXP 1
39348: PPUSH
39349: LD_STRING DCb-JMM-2
39351: PPUSH
39352: CALL_OW 88
// secondAttack = 1 ;
39356: LD_ADDR_EXP 34
39360: PUSH
39361: LD_INT 1
39363: ST_TO_ADDR
// end ;
39364: END
// every 0 0$01 trigger JMMArrive = 1 do
39365: LD_EXP 39
39369: PUSH
39370: LD_INT 1
39372: EQUAL
39373: IFFALSE 39453
39375: GO 39377
39377: DISABLE
// begin wait ( 3 3$0 ) ;
39378: LD_INT 6300
39380: PPUSH
39381: CALL_OW 67
// DialogueOn ;
39385: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39389: LD_EXP 23
39393: PPUSH
39394: LD_STRING D4-Pow-1
39396: PPUSH
39397: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39401: LD_EXP 1
39405: PPUSH
39406: LD_STRING D4-JMM-1
39408: PPUSH
39409: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39413: LD_EXP 23
39417: PPUSH
39418: LD_STRING D4-Pow-2
39420: PPUSH
39421: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39425: LD_EXP 1
39429: PPUSH
39430: LD_STRING D4-JMM-2
39432: PPUSH
39433: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39437: LD_EXP 23
39441: PPUSH
39442: LD_STRING D4-Pow-3
39444: PPUSH
39445: CALL_OW 94
// DialogueOff ;
39449: CALL_OW 7
// end ;
39453: END
// every 0 0$01 trigger JMMArrive = 1 do
39454: LD_EXP 39
39458: PUSH
39459: LD_INT 1
39461: EQUAL
39462: IFFALSE 39494
39464: GO 39466
39466: DISABLE
// begin wait ( 8 8$0 ) ;
39467: LD_INT 16800
39469: PPUSH
39470: CALL_OW 67
// DialogueOn ;
39474: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39478: LD_EXP 23
39482: PPUSH
39483: LD_STRING D4a-Pow-1
39485: PPUSH
39486: CALL_OW 94
// DialogueOff ;
39490: CALL_OW 7
// end ;
39494: END
// every 0 0$01 trigger JMMArrive = 1 do
39495: LD_EXP 39
39499: PUSH
39500: LD_INT 1
39502: EQUAL
39503: IFFALSE 39548
39505: GO 39507
39507: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39508: LD_INT 21000
39510: PUSH
39511: LD_INT 25200
39513: PUSH
39514: LD_INT 31500
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: PUSH
39522: LD_OWVAR 67
39526: ARRAY
39527: PPUSH
39528: CALL_OW 67
// PrepareSikorsky ;
39532: CALL 5971 0 0
// SikorskyArrive = 1 ;
39536: LD_ADDR_EXP 18
39540: PUSH
39541: LD_INT 1
39543: ST_TO_ADDR
// PrepareSikorskyArmy ;
39544: CALL 6111 0 0
// end ;
39548: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39549: LD_EXP 17
39553: PPUSH
39554: LD_INT 5
39556: PPUSH
39557: CALL_OW 308
39561: IFFALSE 39753
39563: GO 39565
39565: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39566: LD_EXP 17
39570: PPUSH
39571: CALL_OW 87
// DialogueOn ;
39575: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39579: LD_EXP 16
39583: PPUSH
39584: LD_STRING D5-Sik-1
39586: PPUSH
39587: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39591: LD_EXP 1
39595: PPUSH
39596: LD_STRING D5-JMM-1a
39598: PPUSH
39599: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39603: LD_EXP 16
39607: PPUSH
39608: LD_STRING D5-Sik-2
39610: PPUSH
39611: CALL_OW 88
// case query ( QSikorski ) of 1 :
39615: LD_STRING QSikorski
39617: PPUSH
39618: CALL_OW 97
39622: PUSH
39623: LD_INT 1
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39654
39631: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39632: LD_EXP 16
39636: PPUSH
39637: LD_STRING D5a-Sik-1
39639: PPUSH
39640: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39644: LD_ADDR_EXP 19
39648: PUSH
39649: LD_INT 2100
39651: ST_TO_ADDR
// end ; 2 :
39652: GO 39741
39654: LD_INT 2
39656: DOUBLE
39657: EQUAL
39658: IFTRUE 39662
39660: GO 39685
39662: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39663: LD_EXP 16
39667: PPUSH
39668: LD_STRING D5b-Sik-1
39670: PPUSH
39671: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39675: LD_ADDR_EXP 19
39679: PUSH
39680: LD_INT 10500
39682: ST_TO_ADDR
// end ; 3 :
39683: GO 39741
39685: LD_INT 3
39687: DOUBLE
39688: EQUAL
39689: IFTRUE 39693
39691: GO 39740
39693: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39694: LD_EXP 16
39698: PPUSH
39699: LD_STRING D5c-Sik-1
39701: PPUSH
39702: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39706: LD_EXP 1
39710: PPUSH
39711: LD_STRING D5c-JMM-1
39713: PPUSH
39714: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39718: LD_EXP 16
39722: PPUSH
39723: LD_STRING D5c-Sik-2
39725: PPUSH
39726: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39730: LD_ADDR_EXP 19
39734: PUSH
39735: LD_INT 10500
39737: ST_TO_ADDR
// end ; end ;
39738: GO 39741
39740: POP
// DialogueOff ;
39741: CALL_OW 7
// timerStatus = 1 ;
39745: LD_ADDR_EXP 35
39749: PUSH
39750: LD_INT 1
39752: ST_TO_ADDR
// end ;
39753: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39754: LD_EXP 19
39758: PUSH
39759: LD_INT 35
39761: LESS
39762: IFFALSE 39810
39764: GO 39766
39766: DISABLE
// begin timerStatus = 0 ;
39767: LD_ADDR_EXP 35
39771: PUSH
39772: LD_INT 0
39774: ST_TO_ADDR
// DialogueOn ;
39775: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39779: LD_EXP 16
39783: PPUSH
39784: LD_STRING D6-Sik-1
39786: PPUSH
39787: CALL_OW 88
// DialogueOff ;
39791: CALL_OW 7
// SikorskyAI = 1 ;
39795: LD_ADDR_EXP 20
39799: PUSH
39800: LD_INT 1
39802: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39803: LD_STRING M2
39805: PPUSH
39806: CALL_OW 337
// end ;
39810: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39811: LD_EXP 17
39815: PPUSH
39816: LD_INT 18
39818: PPUSH
39819: CALL_OW 308
39823: IFFALSE 39907
39825: GO 39827
39827: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39828: LD_EXP 16
39832: PPUSH
39833: LD_STRING D7-Sik-1
39835: PPUSH
39836: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39840: LD_EXP 1
39844: PPUSH
39845: LD_INT 24
39847: PPUSH
39848: CALL_OW 308
39852: PUSH
39853: LD_EXP 1
39857: PPUSH
39858: CALL_OW 310
39862: OR
39863: IFFALSE 39887
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39865: LD_EXP 16
39869: PPUSH
39870: LD_STRING D7a-Sik-1
39872: PPUSH
39873: CALL_OW 88
// SikorskyStatus = 1 ;
39877: LD_ADDR_EXP 21
39881: PUSH
39882: LD_INT 1
39884: ST_TO_ADDR
// end else
39885: GO 39907
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39887: LD_EXP 16
39891: PPUSH
39892: LD_STRING D7b-Sik-1
39894: PPUSH
39895: CALL_OW 88
// SikorskyStatus = 2 ;
39899: LD_ADDR_EXP 21
39903: PUSH
39904: LD_INT 2
39906: ST_TO_ADDR
// end ; end ;
39907: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39908: LD_EXP 36
39912: PUSH
39913: LD_INT 1
39915: EQUAL
39916: IFFALSE 40025
39918: GO 39920
39920: DISABLE
39921: LD_INT 0
39923: PPUSH
// begin enable ;
39924: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39925: LD_ADDR_VAR 0 1
39929: PUSH
39930: LD_INT 22
39932: PUSH
39933: LD_INT 3
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PPUSH
39940: CALL_OW 69
39944: PUSH
39945: FOR_IN
39946: IFFALSE 39973
// if IsInArea ( i , RussianEscape ) then
39948: LD_VAR 0 1
39952: PPUSH
39953: LD_INT 22
39955: PPUSH
39956: CALL_OW 308
39960: IFFALSE 39971
// RemoveUnit ( i ) ;
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL_OW 64
39971: GO 39945
39973: POP
39974: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39975: LD_ADDR_VAR 0 1
39979: PUSH
39980: LD_INT 22
39982: PUSH
39983: LD_INT 6
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PPUSH
39990: CALL_OW 69
39994: PUSH
39995: FOR_IN
39996: IFFALSE 40023
// if IsInArea ( i , RussianEscape ) then
39998: LD_VAR 0 1
40002: PPUSH
40003: LD_INT 22
40005: PPUSH
40006: CALL_OW 308
40010: IFFALSE 40021
// RemoveUnit ( i ) ;
40012: LD_VAR 0 1
40016: PPUSH
40017: CALL_OW 64
40021: GO 39995
40023: POP
40024: POP
// end ; end_of_file
40025: PPOPN 1
40027: END
// on BuildingComplete ( building ) do var tmp , un ;
40028: LD_INT 0
40030: PPUSH
40031: PPUSH
// begin if GetSide ( building ) = 3 then
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 255
40041: PUSH
40042: LD_INT 3
40044: EQUAL
40045: IFFALSE 40532
// begin if GetBType ( building ) = b_depot then
40047: LD_VAR 0 1
40051: PPUSH
40052: CALL_OW 266
40056: PUSH
40057: LD_INT 0
40059: EQUAL
40060: IFFALSE 40128
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 274
40071: PPUSH
40072: LD_INT 1
40074: PPUSH
40075: LD_INT 5000
40077: PPUSH
40078: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 274
40091: PPUSH
40092: LD_INT 2
40094: PPUSH
40095: LD_INT 5000
40097: PPUSH
40098: CALL_OW 277
// SetBName ( building , konev ) ;
40102: LD_VAR 0 1
40106: PPUSH
40107: LD_STRING konev
40109: PPUSH
40110: CALL_OW 500
// ruDepot = building ;
40114: LD_ADDR_EXP 28
40118: PUSH
40119: LD_VAR 0 1
40123: ST_TO_ADDR
// BuildRussianBase ;
40124: CALL 8020 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
40128: LD_VAR 0 1
40132: PPUSH
40133: CALL_OW 266
40137: PUSH
40138: LD_INT 0
40140: EQUAL
40141: PUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 266
40151: PUSH
40152: LD_INT 2
40154: EQUAL
40155: OR
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 266
40166: PUSH
40167: LD_INT 4
40169: EQUAL
40170: OR
40171: IFFALSE 40182
// ComUpgrade ( building ) ;
40173: LD_VAR 0 1
40177: PPUSH
40178: CALL_OW 146
// if GetBType ( building ) = b_lab then
40182: LD_VAR 0 1
40186: PPUSH
40187: CALL_OW 266
40191: PUSH
40192: LD_INT 6
40194: EQUAL
40195: IFFALSE 40246
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
40197: LD_VAR 0 1
40201: PPUSH
40202: LD_INT 10
40204: PPUSH
40205: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
40209: LD_VAR 0 1
40213: PPUSH
40214: LD_INT 12
40216: PPUSH
40217: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
40221: LD_INT 3
40223: PPUSH
40224: LD_VAR 0 1
40228: PPUSH
40229: LD_INT 3
40231: PPUSH
40232: CALL 8575 0 3
// ruLab = building ;
40236: LD_ADDR_EXP 29
40240: PUSH
40241: LD_VAR 0 1
40245: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 266
40255: PUSH
40256: LD_INT 32
40258: EQUAL
40259: IFFALSE 40377
// begin uc_side = 3 ;
40261: LD_ADDR_OWVAR 20
40265: PUSH
40266: LD_INT 3
40268: ST_TO_ADDR
// uc_nation = 3 ;
40269: LD_ADDR_OWVAR 21
40273: PUSH
40274: LD_INT 3
40276: ST_TO_ADDR
// hc_gallery =  ;
40277: LD_ADDR_OWVAR 33
40281: PUSH
40282: LD_STRING 
40284: ST_TO_ADDR
// hc_name =  ;
40285: LD_ADDR_OWVAR 26
40289: PUSH
40290: LD_STRING 
40292: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40293: LD_INT 0
40295: PPUSH
40296: LD_INT 1
40298: PPUSH
40299: LD_EXP 25
40303: PPUSH
40304: LD_EXP 26
40308: PPUSH
40309: CALL_OW 12
40313: PPUSH
40314: CALL_OW 380
// un = CreateHuman ;
40318: LD_ADDR_VAR 0 3
40322: PUSH
40323: CALL_OW 44
40327: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40328: LD_VAR 0 3
40332: PPUSH
40333: LD_VAR 0 1
40337: PPUSH
40338: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40342: LD_VAR 0 1
40346: PPUSH
40347: LD_INT 43
40349: PUSH
40350: LD_INT 44
40352: PUSH
40353: LD_INT 46
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: PPUSH
40364: LD_INT 3
40366: PPUSH
40367: CALL_OW 12
40371: ARRAY
40372: PPUSH
40373: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40377: LD_VAR 0 1
40381: PPUSH
40382: CALL_OW 266
40386: PUSH
40387: LD_INT 33
40389: EQUAL
40390: IFFALSE 40427
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40392: LD_VAR 0 1
40396: PPUSH
40397: LD_INT 43
40399: PUSH
40400: LD_INT 44
40402: PUSH
40403: LD_INT 46
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PPUSH
40414: LD_INT 3
40416: PPUSH
40417: CALL_OW 12
40421: ARRAY
40422: PPUSH
40423: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40427: LD_VAR 0 1
40431: PPUSH
40432: CALL_OW 266
40436: PUSH
40437: LD_INT 24
40439: EQUAL
40440: IFFALSE 40450
// russianAI = 1 ;
40442: LD_ADDR_EXP 27
40446: PUSH
40447: LD_INT 1
40449: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40450: LD_EXP 31
40454: PUSH
40455: LD_INT 0
40457: GREATER
40458: IFFALSE 40532
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40460: LD_ADDR_EXP 31
40464: PUSH
40465: LD_EXP 31
40469: PPUSH
40470: LD_INT 1
40472: PPUSH
40473: CALL_OW 3
40477: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40478: LD_ADDR_EXP 31
40482: PUSH
40483: LD_EXP 31
40487: PPUSH
40488: LD_INT 1
40490: PPUSH
40491: CALL_OW 3
40495: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40496: LD_ADDR_EXP 31
40500: PUSH
40501: LD_EXP 31
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 3
40513: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40514: LD_ADDR_EXP 31
40518: PUSH
40519: LD_EXP 31
40523: PPUSH
40524: LD_INT 1
40526: PPUSH
40527: CALL_OW 3
40531: ST_TO_ADDR
// end ; end ; end ;
40532: PPOPN 3
40534: END
// on UpgradeComplete ( building ) do var i ;
40535: LD_INT 0
40537: PPUSH
// begin if GetSide ( building ) = 3 then
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 255
40547: PUSH
40548: LD_INT 3
40550: EQUAL
40551: IFFALSE 40732
// begin if GetBType ( building ) = b_factory then
40553: LD_VAR 0 1
40557: PPUSH
40558: CALL_OW 266
40562: PUSH
40563: LD_INT 3
40565: EQUAL
40566: IFFALSE 40633
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40568: LD_ADDR_VAR 0 2
40572: PUSH
40573: LD_INT 22
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 25
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PPUSH
40597: CALL_OW 69
40601: PUSH
40602: FOR_IN
40603: IFFALSE 40621
// ComEnterUnit ( i , building ) ;
40605: LD_VAR 0 2
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 120
40619: GO 40602
40621: POP
40622: POP
// ruFab = building ;
40623: LD_ADDR_EXP 30
40627: PUSH
40628: LD_VAR 0 1
40632: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 266
40642: PUSH
40643: LD_INT 8
40645: EQUAL
40646: IFFALSE 40703
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40648: LD_ADDR_VAR 0 2
40652: PUSH
40653: LD_INT 22
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 25
40665: PUSH
40666: LD_INT 4
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PPUSH
40677: CALL_OW 69
40681: PUSH
40682: FOR_IN
40683: IFFALSE 40701
// ComEnterUnit ( i , building ) ;
40685: LD_VAR 0 2
40689: PPUSH
40690: LD_VAR 0 1
40694: PPUSH
40695: CALL_OW 120
40699: GO 40682
40701: POP
40702: POP
// if GetBType ( building ) = b_warehouse then
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 266
40712: PUSH
40713: LD_INT 1
40715: EQUAL
40716: IFFALSE 40732
// begin ComEnterUnit ( Borodin , building ) ;
40718: LD_EXP 24
40722: PPUSH
40723: LD_VAR 0 1
40727: PPUSH
40728: CALL_OW 120
// end ; end ; end ;
40732: PPOPN 2
40734: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40735: LD_VAR 0 1
40739: PPUSH
40740: CALL_OW 247
40744: PUSH
40745: LD_INT 2
40747: EQUAL
40748: PUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 263
40758: PUSH
40759: LD_INT 3
40761: EQUAL
40762: AND
40763: PUSH
40764: LD_EXP 41
40768: PUSH
40769: LD_INT 0
40771: EQUAL
40772: AND
40773: IFFALSE 40891
// begin varEvent1 = 1 ;
40775: LD_ADDR_EXP 41
40779: PUSH
40780: LD_INT 1
40782: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40792: LD_INT 22
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 21
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 25
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 25
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 25
40837: PUSH
40838: LD_INT 3
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 25
40847: PUSH
40848: LD_INT 4
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: PPUSH
40867: CALL_OW 69
40871: PUSH
40872: LD_EXP 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: DIFF
40880: PPUSH
40881: LD_STRING DC-Sol1-1
40883: PPUSH
40884: LD_STRING DC-FSol1-1
40886: PPUSH
40887: CALL 7415 0 3
// end ; end ;
40891: PPOPN 1
40893: END
// on UnitDestroyed ( unit ) do var i ;
40894: LD_INT 0
40896: PPUSH
// begin if GetSide ( unit ) = 3 then
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL_OW 255
40906: PUSH
40907: LD_INT 3
40909: EQUAL
40910: IFFALSE 41680
// begin if GetType ( unit ) = unit_building then
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 247
40921: PUSH
40922: LD_INT 3
40924: EQUAL
40925: IFFALSE 41617
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 266
40936: PUSH
40937: LD_INT 31
40939: EQUAL
40940: PUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 266
40950: PUSH
40951: LD_INT 32
40953: EQUAL
40954: OR
40955: PUSH
40956: LD_VAR 0 1
40960: PPUSH
40961: CALL_OW 266
40965: PUSH
40966: LD_INT 36
40968: EQUAL
40969: OR
40970: PUSH
40971: LD_VAR 0 1
40975: PPUSH
40976: CALL_OW 266
40980: PUSH
40981: LD_INT 0
40983: EQUAL
40984: OR
40985: PUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 266
40995: PUSH
40996: LD_INT 24
40998: EQUAL
40999: OR
41000: PUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 266
41010: PUSH
41011: LD_INT 17
41013: EQUAL
41014: OR
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 266
41025: PUSH
41026: LD_INT 25
41028: EQUAL
41029: OR
41030: PUSH
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 266
41040: PUSH
41041: LD_INT 19
41043: EQUAL
41044: OR
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 266
41055: PUSH
41056: LD_INT 20
41058: EQUAL
41059: OR
41060: PUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 266
41070: PUSH
41071: LD_INT 18
41073: EQUAL
41074: OR
41075: PUSH
41076: LD_VAR 0 1
41080: PPUSH
41081: CALL_OW 266
41085: PUSH
41086: LD_INT 21
41088: EQUAL
41089: OR
41090: PUSH
41091: LD_VAR 0 1
41095: PPUSH
41096: CALL_OW 266
41100: PUSH
41101: LD_INT 23
41103: EQUAL
41104: OR
41105: PUSH
41106: LD_VAR 0 1
41110: PPUSH
41111: CALL_OW 266
41115: PUSH
41116: LD_INT 16
41118: EQUAL
41119: OR
41120: PUSH
41121: LD_VAR 0 1
41125: PPUSH
41126: CALL_OW 266
41130: PUSH
41131: LD_INT 6
41133: EQUAL
41134: OR
41135: PUSH
41136: LD_VAR 0 1
41140: PPUSH
41141: CALL_OW 266
41145: PUSH
41146: LD_INT 29
41148: EQUAL
41149: OR
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 266
41160: PUSH
41161: LD_INT 26
41163: EQUAL
41164: OR
41165: PUSH
41166: LD_VAR 0 1
41170: PPUSH
41171: CALL_OW 266
41175: PUSH
41176: LD_INT 30
41178: EQUAL
41179: OR
41180: PUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 266
41190: PUSH
41191: LD_INT 28
41193: EQUAL
41194: OR
41195: PUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 266
41205: PUSH
41206: LD_INT 27
41208: EQUAL
41209: OR
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 266
41220: PUSH
41221: LD_INT 33
41223: EQUAL
41224: OR
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: CALL_OW 266
41235: PUSH
41236: LD_INT 2
41238: EQUAL
41239: OR
41240: PUSH
41241: LD_VAR 0 1
41245: PPUSH
41246: CALL_OW 266
41250: PUSH
41251: LD_INT 4
41253: EQUAL
41254: OR
41255: IFFALSE 41341
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
41257: LD_ADDR_EXP 31
41261: PUSH
41262: LD_EXP 31
41266: PUSH
41267: LD_VAR 0 1
41271: PPUSH
41272: CALL_OW 266
41276: ADD
41277: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41278: LD_ADDR_EXP 31
41282: PUSH
41283: LD_EXP 31
41287: PUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: CALL_OW 250
41297: ADD
41298: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41299: LD_ADDR_EXP 31
41303: PUSH
41304: LD_EXP 31
41308: PUSH
41309: LD_VAR 0 1
41313: PPUSH
41314: CALL_OW 251
41318: ADD
41319: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41320: LD_ADDR_EXP 31
41324: PUSH
41325: LD_EXP 31
41329: PUSH
41330: LD_VAR 0 1
41334: PPUSH
41335: CALL_OW 254
41339: ADD
41340: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41341: LD_VAR 0 1
41345: PPUSH
41346: CALL_OW 266
41350: PUSH
41351: LD_INT 1
41353: EQUAL
41354: IFFALSE 41433
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41356: LD_ADDR_EXP 31
41360: PUSH
41361: LD_EXP 31
41365: PUSH
41366: LD_INT 0
41368: ADD
41369: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41370: LD_ADDR_EXP 31
41374: PUSH
41375: LD_EXP 31
41379: PUSH
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL_OW 250
41389: ADD
41390: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41391: LD_ADDR_EXP 31
41395: PUSH
41396: LD_EXP 31
41400: PUSH
41401: LD_VAR 0 1
41405: PPUSH
41406: CALL_OW 251
41410: ADD
41411: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41412: LD_ADDR_EXP 31
41416: PUSH
41417: LD_EXP 31
41421: PUSH
41422: LD_VAR 0 1
41426: PPUSH
41427: CALL_OW 254
41431: ADD
41432: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 266
41442: PUSH
41443: LD_INT 3
41445: EQUAL
41446: IFFALSE 41525
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41448: LD_ADDR_EXP 31
41452: PUSH
41453: LD_EXP 31
41457: PUSH
41458: LD_INT 2
41460: ADD
41461: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41462: LD_ADDR_EXP 31
41466: PUSH
41467: LD_EXP 31
41471: PUSH
41472: LD_VAR 0 1
41476: PPUSH
41477: CALL_OW 250
41481: ADD
41482: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41483: LD_ADDR_EXP 31
41487: PUSH
41488: LD_EXP 31
41492: PUSH
41493: LD_VAR 0 1
41497: PPUSH
41498: CALL_OW 251
41502: ADD
41503: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41504: LD_ADDR_EXP 31
41508: PUSH
41509: LD_EXP 31
41513: PUSH
41514: LD_VAR 0 1
41518: PPUSH
41519: CALL_OW 254
41523: ADD
41524: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 266
41534: PUSH
41535: LD_INT 5
41537: EQUAL
41538: IFFALSE 41617
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41540: LD_ADDR_EXP 31
41544: PUSH
41545: LD_EXP 31
41549: PUSH
41550: LD_INT 4
41552: ADD
41553: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41554: LD_ADDR_EXP 31
41558: PUSH
41559: LD_EXP 31
41563: PUSH
41564: LD_VAR 0 1
41568: PPUSH
41569: CALL_OW 250
41573: ADD
41574: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41575: LD_ADDR_EXP 31
41579: PUSH
41580: LD_EXP 31
41584: PUSH
41585: LD_VAR 0 1
41589: PPUSH
41590: CALL_OW 251
41594: ADD
41595: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41596: LD_ADDR_EXP 31
41600: PUSH
41601: LD_EXP 31
41605: PUSH
41606: LD_VAR 0 1
41610: PPUSH
41611: CALL_OW 254
41615: ADD
41616: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41617: LD_VAR 0 1
41621: PPUSH
41622: CALL_OW 247
41626: PUSH
41627: LD_INT 1
41629: EQUAL
41630: IFFALSE 41680
// begin for i in defenders_list do
41632: LD_ADDR_VAR 0 2
41636: PUSH
41637: LD_EXP 32
41641: PUSH
41642: FOR_IN
41643: IFFALSE 41678
// if i = unit then
41645: LD_VAR 0 2
41649: PUSH
41650: LD_VAR 0 1
41654: EQUAL
41655: IFFALSE 41676
// defenders_list = defenders_list diff [ unit ] ;
41657: LD_ADDR_EXP 32
41661: PUSH
41662: LD_EXP 32
41666: PUSH
41667: LD_VAR 0 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: DIFF
41675: ST_TO_ADDR
41676: GO 41642
41678: POP
41679: POP
// end ; end ; end ; end_of_file
41680: PPOPN 2
41682: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41683: GO 41685
41685: DISABLE
41686: LD_INT 0
41688: PPUSH
// begin enemyWayX = [ ] ;
41689: LD_ADDR_EXP 45
41693: PUSH
41694: EMPTY
41695: ST_TO_ADDR
// enemyWayY = [ ] ;
41696: LD_ADDR_EXP 46
41700: PUSH
41701: EMPTY
41702: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41703: LD_ADDR_VAR 0 1
41707: PUSH
41708: LD_INT 1
41710: PPUSH
41711: LD_INT 3
41713: PPUSH
41714: CALL_OW 12
41718: ST_TO_ADDR
// if rnd = 1 then
41719: LD_VAR 0 1
41723: PUSH
41724: LD_INT 1
41726: EQUAL
41727: IFFALSE 41767
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41729: LD_ADDR_EXP 45
41733: PUSH
41734: LD_INT 73
41736: PUSH
41737: LD_INT 46
41739: PUSH
41740: LD_INT 29
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41748: LD_ADDR_EXP 46
41752: PUSH
41753: LD_INT 71
41755: PUSH
41756: LD_INT 43
41758: PUSH
41759: LD_INT 29
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: LIST
41766: ST_TO_ADDR
// end ; if rnd = 2 then
41767: LD_VAR 0 1
41771: PUSH
41772: LD_INT 2
41774: EQUAL
41775: IFFALSE 41799
// begin enemyWayX = [ 64 ] ;
41777: LD_ADDR_EXP 45
41781: PUSH
41782: LD_INT 64
41784: PUSH
41785: EMPTY
41786: LIST
41787: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41788: LD_ADDR_EXP 46
41792: PUSH
41793: LD_INT 43
41795: PUSH
41796: EMPTY
41797: LIST
41798: ST_TO_ADDR
// end ; if rnd = 3 then
41799: LD_VAR 0 1
41803: PUSH
41804: LD_INT 3
41806: EQUAL
41807: IFFALSE 41831
// begin enemyWayX = [ 80 ] ;
41809: LD_ADDR_EXP 45
41813: PUSH
41814: LD_INT 80
41816: PUSH
41817: EMPTY
41818: LIST
41819: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41820: LD_ADDR_EXP 46
41824: PUSH
41825: LD_INT 28
41827: PUSH
41828: EMPTY
41829: LIST
41830: ST_TO_ADDR
// end ; enable ;
41831: ENABLE
// end ;
41832: PPOPN 1
41834: END
// every 0 0$1 do
41835: GO 41837
41837: DISABLE
// begin enable ;
41838: ENABLE
// if escapeAvalaible = 0 then
41839: LD_EXP 36
41843: PUSH
41844: LD_INT 0
41846: EQUAL
41847: IFFALSE 41859
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41849: LD_INT 3
41851: PPUSH
41852: LD_INT 6
41854: PPUSH
41855: CALL 8816 0 2
// if escapeAvalaible = 0 then
41859: LD_EXP 36
41863: PUSH
41864: LD_INT 0
41866: EQUAL
41867: IFFALSE 41879
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41869: LD_INT 1
41871: PPUSH
41872: LD_INT 24
41874: PPUSH
41875: CALL 9476 0 2
// if russianAI = 1 then
41879: LD_EXP 27
41883: PUSH
41884: LD_INT 1
41886: EQUAL
41887: IFFALSE 41957
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41889: LD_INT 3
41891: PPUSH
41892: LD_INT 7
41894: PPUSH
41895: LD_INT 6
41897: PPUSH
41898: LD_EXP 29
41902: PPUSH
41903: CALL 11914 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41907: LD_INT 3
41909: PPUSH
41910: LD_EXP 28
41914: PPUSH
41915: LD_INT 6
41917: PPUSH
41918: LD_EXP 31
41922: PPUSH
41923: CALL 11508 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41927: LD_INT 3
41929: PPUSH
41930: LD_INT 26
41932: PPUSH
41933: LD_EXP 45
41937: PPUSH
41938: LD_EXP 46
41942: PPUSH
41943: CALL 10376 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41947: LD_INT 3
41949: PPUSH
41950: LD_INT 1
41952: PPUSH
41953: CALL 12458 0 2
// end ; if SikorskyArrive = 1 then
41957: LD_EXP 18
41961: PUSH
41962: LD_INT 1
41964: EQUAL
41965: IFFALSE 41983
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41967: LD_INT 3
41969: PPUSH
41970: LD_INT 10
41972: PPUSH
41973: LD_INT 53
41975: PPUSH
41976: LD_INT 59
41978: PPUSH
41979: CALL 10173 0 4
// end ;
41983: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41984: LD_EXP 27
41988: PUSH
41989: LD_INT 1
41991: EQUAL
41992: IFFALSE 42268
41994: GO 41996
41996: DISABLE
41997: LD_INT 0
41999: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
42000: LD_ADDR_VAR 0 1
42004: PUSH
42005: LD_INT 22
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 21
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 30
42027: PUSH
42028: LD_INT 32
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: LD_INT 35
42043: PUSH
42044: LD_INT 43
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 35
42053: PUSH
42054: LD_INT 44
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 35
42063: PUSH
42064: LD_INT 46
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: PPUSH
42087: CALL_OW 69
42091: PUSH
42092: FOR_IN
42093: IFFALSE 42132
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42095: LD_VAR 0 1
42099: PPUSH
42100: LD_INT 43
42102: PUSH
42103: LD_INT 44
42105: PUSH
42106: LD_INT 46
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PPUSH
42117: LD_INT 3
42119: PPUSH
42120: CALL_OW 12
42124: ARRAY
42125: PPUSH
42126: CALL_OW 431
42130: GO 42092
42132: POP
42133: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
42134: LD_ADDR_VAR 0 1
42138: PUSH
42139: LD_INT 22
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 21
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 30
42161: PUSH
42162: LD_INT 33
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 3
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 35
42177: PUSH
42178: LD_INT 43
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 35
42187: PUSH
42188: LD_INT 44
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 35
42197: PUSH
42198: LD_INT 46
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: PPUSH
42221: CALL_OW 69
42225: PUSH
42226: FOR_IN
42227: IFFALSE 42266
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42229: LD_VAR 0 1
42233: PPUSH
42234: LD_INT 43
42236: PUSH
42237: LD_INT 44
42239: PUSH
42240: LD_INT 46
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PPUSH
42251: LD_INT 3
42253: PPUSH
42254: CALL_OW 12
42258: ARRAY
42259: PPUSH
42260: CALL_OW 431
42264: GO 42226
42266: POP
42267: POP
// end ;
42268: PPOPN 1
42270: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
42271: LD_EXP 24
42275: PPUSH
42276: CALL_OW 310
42280: NOT
42281: PUSH
42282: LD_EXP 28
42286: PPUSH
42287: CALL_OW 302
42291: AND
42292: PUSH
42293: LD_EXP 28
42297: PPUSH
42298: CALL_OW 255
42302: PUSH
42303: LD_INT 3
42305: EQUAL
42306: AND
42307: IFFALSE 42327
42309: GO 42311
42311: DISABLE
// begin enable ;
42312: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42313: LD_EXP 24
42317: PPUSH
42318: LD_EXP 28
42322: PPUSH
42323: CALL_OW 120
// end ;
42327: END
// every 0 0$1 trigger SikorskyAI = 1 do
42328: LD_EXP 20
42332: PUSH
42333: LD_INT 1
42335: EQUAL
42336: IFFALSE 42371
42338: GO 42340
42340: DISABLE
// begin enable ;
42341: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42342: LD_INT 4
42344: PPUSH
42345: LD_INT 10
42347: PPUSH
42348: LD_INT 93
42350: PPUSH
42351: LD_INT 93
42353: PPUSH
42354: CALL 10173 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42358: LD_INT 4
42360: PPUSH
42361: LD_INT 11
42363: PPUSH
42364: LD_INT 3
42366: PPUSH
42367: CALL 16670 0 3
// end ;
42371: END
// every 0 0$1 trigger SikorskyAI = 1 do
42372: LD_EXP 20
42376: PUSH
42377: LD_INT 1
42379: EQUAL
42380: IFFALSE 42392
42382: GO 42384
42384: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42385: LD_INT 4
42387: PPUSH
42388: CALL 11180 0 1
42392: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42393: LD_EXP 27
42397: PUSH
42398: LD_INT 1
42400: EQUAL
42401: PUSH
42402: LD_EXP 30
42406: PPUSH
42407: CALL_OW 302
42411: AND
42412: PUSH
42413: LD_EXP 30
42417: PPUSH
42418: CALL_OW 255
42422: PUSH
42423: LD_INT 3
42425: EQUAL
42426: AND
42427: PUSH
42428: LD_INT 22
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 21
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 33
42450: PUSH
42451: LD_INT 3
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: PPUSH
42463: CALL_OW 69
42467: PUSH
42468: LD_INT 0
42470: EQUAL
42471: AND
42472: IFFALSE 42706
42474: GO 42476
42476: DISABLE
// begin enable ;
42477: ENABLE
// if Difficulty = 1 then
42478: LD_OWVAR 67
42482: PUSH
42483: LD_INT 1
42485: EQUAL
42486: IFFALSE 42554
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42488: LD_INT 3
42490: PPUSH
42491: LD_EXP 30
42495: PPUSH
42496: LD_INT 5
42498: PPUSH
42499: LD_INT 8
42501: PPUSH
42502: CALL_OW 12
42506: PPUSH
42507: LD_INT 43
42509: PUSH
42510: LD_INT 43
42512: PUSH
42513: LD_INT 43
42515: PUSH
42516: LD_INT 43
42518: PUSH
42519: LD_INT 44
42521: PUSH
42522: LD_INT 44
42524: PUSH
42525: LD_INT 44
42527: PUSH
42528: LD_INT 46
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: PPUSH
42541: LD_INT 1
42543: PPUSH
42544: LD_INT 3
42546: PPUSH
42547: LD_INT 24
42549: PPUSH
42550: CALL 10019 0 7
// if Difficulty = 2 then
42554: LD_OWVAR 67
42558: PUSH
42559: LD_INT 2
42561: EQUAL
42562: IFFALSE 42630
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42564: LD_INT 3
42566: PPUSH
42567: LD_EXP 30
42571: PPUSH
42572: LD_INT 6
42574: PPUSH
42575: LD_INT 8
42577: PPUSH
42578: CALL_OW 12
42582: PPUSH
42583: LD_INT 43
42585: PUSH
42586: LD_INT 43
42588: PUSH
42589: LD_INT 44
42591: PUSH
42592: LD_INT 44
42594: PUSH
42595: LD_INT 44
42597: PUSH
42598: LD_INT 44
42600: PUSH
42601: LD_INT 46
42603: PUSH
42604: LD_INT 46
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: PPUSH
42617: LD_INT 1
42619: PPUSH
42620: LD_INT 3
42622: PPUSH
42623: LD_INT 24
42625: PPUSH
42626: CALL 10019 0 7
// if Difficulty = 3 then
42630: LD_OWVAR 67
42634: PUSH
42635: LD_INT 3
42637: EQUAL
42638: IFFALSE 42706
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42640: LD_INT 3
42642: PPUSH
42643: LD_EXP 30
42647: PPUSH
42648: LD_INT 7
42650: PPUSH
42651: LD_INT 8
42653: PPUSH
42654: CALL_OW 12
42658: PPUSH
42659: LD_INT 43
42661: PUSH
42662: LD_INT 43
42664: PUSH
42665: LD_INT 44
42667: PUSH
42668: LD_INT 44
42670: PUSH
42671: LD_INT 44
42673: PUSH
42674: LD_INT 46
42676: PUSH
42677: LD_INT 46
42679: PUSH
42680: LD_INT 46
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: PPUSH
42693: LD_INT 1
42695: PPUSH
42696: LD_INT 3
42698: PPUSH
42699: LD_INT 24
42701: PPUSH
42702: CALL 10019 0 7
// end ;
42706: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42707: LD_EXP 38
42711: PUSH
42712: LD_INT 1
42714: EQUAL
42715: IFFALSE 42797
42717: GO 42719
42719: DISABLE
42720: LD_INT 0
42722: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42723: LD_ADDR_VAR 0 1
42727: PUSH
42728: LD_INT 22
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 21
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 3
42750: PUSH
42751: LD_INT 24
42753: PUSH
42754: LD_INT 650
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: PPUSH
42770: CALL_OW 69
42774: PUSH
42775: FOR_IN
42776: IFFALSE 42795
// ComMoveXY ( i , 51 , 12 ) ;
42778: LD_VAR 0 1
42782: PPUSH
42783: LD_INT 51
42785: PPUSH
42786: LD_INT 12
42788: PPUSH
42789: CALL_OW 111
42793: GO 42775
42795: POP
42796: POP
// end ; end_of_file
42797: PPOPN 1
42799: END
// every 3 3$20 trigger firstAttack = 1 do
42800: LD_EXP 33
42804: PUSH
42805: LD_INT 1
42807: EQUAL
42808: IFFALSE 42914
42810: GO 42812
42812: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42813: LD_INT 6
42815: PPUSH
42816: LD_INT 3
42818: PPUSH
42819: LD_INT 5
42821: PPUSH
42822: LD_INT 6
42824: PPUSH
42825: CALL_OW 12
42829: PUSH
42830: LD_INT 5
42832: PPUSH
42833: LD_INT 6
42835: PPUSH
42836: CALL_OW 12
42840: PUSH
42841: LD_INT 5
42843: PPUSH
42844: LD_INT 6
42846: PPUSH
42847: CALL_OW 12
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: PUSH
42857: LD_OWVAR 67
42861: ARRAY
42862: PPUSH
42863: LD_INT 0
42865: PPUSH
42866: LD_INT 0
42868: PPUSH
42869: LD_INT 0
42871: PPUSH
42872: LD_INT 0
42874: PPUSH
42875: LD_EXP 25
42879: PPUSH
42880: LD_EXP 26
42884: PPUSH
42885: CALL_OW 12
42889: PPUSH
42890: LD_INT 16
42892: PPUSH
42893: LD_INT 7
42895: PPUSH
42896: LD_INT 1
42898: PPUSH
42899: LD_INT 1
42901: PPUSH
42902: LD_INT 3
42904: PPUSH
42905: CALL_OW 12
42909: PPUSH
42910: CALL 12688 0 12
42914: END
// every 3 3$40 trigger firstAttack = 1 do
42915: LD_EXP 33
42919: PUSH
42920: LD_INT 1
42922: EQUAL
42923: IFFALSE 43015
42925: GO 42927
42927: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42928: LD_INT 16
42930: PPUSH
42931: LD_INT 6
42933: PPUSH
42934: LD_INT 3
42936: PPUSH
42937: LD_INT 4
42939: PPUSH
42940: CALL_OW 12
42944: PUSH
42945: LD_INT 4
42947: PPUSH
42948: LD_INT 5
42950: PPUSH
42951: CALL_OW 12
42955: PUSH
42956: LD_INT 5
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: PUSH
42964: LD_OWVAR 67
42968: ARRAY
42969: PPUSH
42970: LD_EXP 25
42974: PPUSH
42975: LD_EXP 26
42979: PPUSH
42980: CALL_OW 12
42984: PPUSH
42985: LD_INT 3
42987: PPUSH
42988: LD_INT 1
42990: PPUSH
42991: LD_INT 3
42993: PPUSH
42994: LD_INT 44
42996: PUSH
42997: LD_INT 46
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PPUSH
43004: EMPTY
43005: PPUSH
43006: EMPTY
43007: PPUSH
43008: LD_INT 1
43010: PPUSH
43011: CALL 14981 0 11
43015: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
43016: LD_EXP 33
43020: PUSH
43021: LD_INT 1
43023: EQUAL
43024: PUSH
43025: LD_EXP 39
43029: PUSH
43030: LD_INT 0
43032: EQUAL
43033: AND
43034: IFFALSE 43140
43036: GO 43038
43038: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43039: LD_INT 6
43041: PPUSH
43042: LD_INT 3
43044: PPUSH
43045: LD_INT 5
43047: PPUSH
43048: LD_INT 6
43050: PPUSH
43051: CALL_OW 12
43055: PUSH
43056: LD_INT 5
43058: PPUSH
43059: LD_INT 6
43061: PPUSH
43062: CALL_OW 12
43066: PUSH
43067: LD_INT 5
43069: PPUSH
43070: LD_INT 6
43072: PPUSH
43073: CALL_OW 12
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: PUSH
43083: LD_OWVAR 67
43087: ARRAY
43088: PPUSH
43089: LD_INT 0
43091: PPUSH
43092: LD_INT 0
43094: PPUSH
43095: LD_INT 0
43097: PPUSH
43098: LD_INT 0
43100: PPUSH
43101: LD_EXP 25
43105: PPUSH
43106: LD_EXP 26
43110: PPUSH
43111: CALL_OW 12
43115: PPUSH
43116: LD_INT 16
43118: PPUSH
43119: LD_INT 7
43121: PPUSH
43122: LD_INT 1
43124: PPUSH
43125: LD_INT 1
43127: PPUSH
43128: LD_INT 3
43130: PPUSH
43131: CALL_OW 12
43135: PPUSH
43136: CALL 12688 0 12
43140: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
43141: LD_EXP 33
43145: PUSH
43146: LD_INT 1
43148: EQUAL
43149: PUSH
43150: LD_EXP 39
43154: PUSH
43155: LD_INT 0
43157: EQUAL
43158: AND
43159: IFFALSE 43255
43161: GO 43163
43163: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43164: LD_INT 16
43166: PPUSH
43167: LD_INT 6
43169: PPUSH
43170: LD_INT 5
43172: PPUSH
43173: LD_INT 6
43175: PPUSH
43176: CALL_OW 12
43180: PUSH
43181: LD_INT 6
43183: PPUSH
43184: LD_INT 7
43186: PPUSH
43187: CALL_OW 12
43191: PUSH
43192: LD_INT 7
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: PUSH
43200: LD_OWVAR 67
43204: ARRAY
43205: PPUSH
43206: LD_EXP 25
43210: PPUSH
43211: LD_EXP 26
43215: PPUSH
43216: CALL_OW 12
43220: PPUSH
43221: LD_INT 3
43223: PPUSH
43224: LD_INT 1
43226: PPUSH
43227: LD_INT 3
43229: PPUSH
43230: LD_INT 43
43232: PUSH
43233: LD_INT 44
43235: PUSH
43236: LD_INT 46
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: PPUSH
43244: EMPTY
43245: PPUSH
43246: EMPTY
43247: PPUSH
43248: LD_INT 1
43250: PPUSH
43251: CALL 14981 0 11
43255: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
43256: LD_EXP 33
43260: PUSH
43261: LD_INT 1
43263: EQUAL
43264: PUSH
43265: LD_EXP 39
43269: PUSH
43270: LD_INT 0
43272: EQUAL
43273: AND
43274: IFFALSE 43350
43276: GO 43278
43278: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43279: LD_INT 16
43281: PPUSH
43282: LD_INT 6
43284: PPUSH
43285: LD_INT 5
43287: PUSH
43288: LD_INT 6
43290: PUSH
43291: LD_INT 7
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: PUSH
43299: LD_OWVAR 67
43303: ARRAY
43304: PPUSH
43305: LD_EXP 25
43309: PPUSH
43310: LD_EXP 26
43314: PPUSH
43315: CALL_OW 12
43319: PPUSH
43320: LD_INT 3
43322: PPUSH
43323: LD_INT 1
43325: PPUSH
43326: LD_INT 3
43328: PPUSH
43329: LD_INT 44
43331: PUSH
43332: LD_INT 46
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PPUSH
43339: EMPTY
43340: PPUSH
43341: EMPTY
43342: PPUSH
43343: LD_INT 1
43345: PPUSH
43346: CALL 14981 0 11
43350: END
// every 1 1$00 trigger secondAttack = 1 do
43351: LD_EXP 34
43355: PUSH
43356: LD_INT 1
43358: EQUAL
43359: IFFALSE 43441
43361: GO 43363
43363: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43364: LD_INT 6
43366: PPUSH
43367: LD_INT 3
43369: PPUSH
43370: LD_INT 3
43372: PUSH
43373: LD_INT 4
43375: PUSH
43376: LD_INT 5
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: PUSH
43384: LD_OWVAR 67
43388: ARRAY
43389: PPUSH
43390: LD_INT 0
43392: PPUSH
43393: LD_INT 0
43395: PPUSH
43396: LD_INT 0
43398: PPUSH
43399: LD_INT 0
43401: PPUSH
43402: LD_EXP 25
43406: PPUSH
43407: LD_EXP 26
43411: PPUSH
43412: CALL_OW 12
43416: PPUSH
43417: LD_INT 16
43419: PPUSH
43420: LD_INT 7
43422: PPUSH
43423: LD_INT 1
43425: PPUSH
43426: LD_INT 1
43428: PPUSH
43429: LD_INT 3
43431: PPUSH
43432: CALL_OW 12
43436: PPUSH
43437: CALL 12688 0 12
43441: END
// every 1 1$00 trigger secondAttack = 1 do
43442: LD_EXP 34
43446: PUSH
43447: LD_INT 1
43449: EQUAL
43450: IFFALSE 43554
43452: GO 43454
43454: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43455: LD_INT 16
43457: PPUSH
43458: LD_INT 6
43460: PPUSH
43461: LD_INT 5
43463: PPUSH
43464: LD_INT 8
43466: PPUSH
43467: CALL_OW 12
43471: PUSH
43472: LD_INT 6
43474: PPUSH
43475: LD_INT 9
43477: PPUSH
43478: CALL_OW 12
43482: PUSH
43483: LD_INT 7
43485: PPUSH
43486: LD_INT 9
43488: PPUSH
43489: CALL_OW 12
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: PUSH
43499: LD_OWVAR 67
43503: ARRAY
43504: PPUSH
43505: LD_EXP 25
43509: PPUSH
43510: LD_EXP 26
43514: PPUSH
43515: CALL_OW 12
43519: PPUSH
43520: LD_INT 3
43522: PPUSH
43523: LD_INT 1
43525: PPUSH
43526: LD_INT 3
43528: PPUSH
43529: LD_INT 43
43531: PUSH
43532: LD_INT 44
43534: PUSH
43535: LD_INT 46
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: PPUSH
43543: EMPTY
43544: PPUSH
43545: EMPTY
43546: PPUSH
43547: LD_INT 1
43549: PPUSH
43550: CALL 14981 0 11
43554: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43555: LD_EXP 18
43559: PUSH
43560: LD_INT 0
43562: EQUAL
43563: IFFALSE 43645
43565: GO 43567
43567: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43568: LD_INT 6
43570: PPUSH
43571: LD_INT 3
43573: PPUSH
43574: LD_INT 3
43576: PUSH
43577: LD_INT 4
43579: PUSH
43580: LD_INT 5
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: PUSH
43588: LD_OWVAR 67
43592: ARRAY
43593: PPUSH
43594: LD_INT 0
43596: PPUSH
43597: LD_INT 0
43599: PPUSH
43600: LD_INT 0
43602: PPUSH
43603: LD_INT 0
43605: PPUSH
43606: LD_EXP 25
43610: PPUSH
43611: LD_EXP 26
43615: PPUSH
43616: CALL_OW 12
43620: PPUSH
43621: LD_INT 16
43623: PPUSH
43624: LD_INT 7
43626: PPUSH
43627: LD_INT 1
43629: PPUSH
43630: LD_INT 1
43632: PPUSH
43633: LD_INT 3
43635: PPUSH
43636: CALL_OW 12
43640: PPUSH
43641: CALL 12688 0 12
43645: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43646: LD_EXP 18
43650: PUSH
43651: LD_INT 0
43653: EQUAL
43654: IFFALSE 43754
43656: GO 43658
43658: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43659: LD_INT 16
43661: PPUSH
43662: LD_INT 6
43664: PPUSH
43665: LD_INT 5
43667: PPUSH
43668: LD_INT 8
43670: PPUSH
43671: CALL_OW 12
43675: PUSH
43676: LD_INT 6
43678: PPUSH
43679: LD_INT 9
43681: PPUSH
43682: CALL_OW 12
43686: PUSH
43687: LD_INT 7
43689: PPUSH
43690: LD_INT 9
43692: PPUSH
43693: CALL_OW 12
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: PUSH
43703: LD_OWVAR 67
43707: ARRAY
43708: PPUSH
43709: LD_EXP 25
43713: PPUSH
43714: LD_EXP 26
43718: PPUSH
43719: CALL_OW 12
43723: PPUSH
43724: LD_INT 3
43726: PPUSH
43727: LD_INT 1
43729: PPUSH
43730: LD_INT 3
43732: PPUSH
43733: LD_INT 44
43735: PUSH
43736: LD_INT 46
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PPUSH
43743: EMPTY
43744: PPUSH
43745: EMPTY
43746: PPUSH
43747: LD_INT 1
43749: PPUSH
43750: CALL 14981 0 11
43754: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43755: LD_EXP 18
43759: PUSH
43760: LD_INT 0
43762: EQUAL
43763: IFFALSE 43845
43765: GO 43767
43767: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43768: LD_INT 6
43770: PPUSH
43771: LD_INT 3
43773: PPUSH
43774: LD_INT 3
43776: PUSH
43777: LD_INT 4
43779: PUSH
43780: LD_INT 5
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: PUSH
43788: LD_OWVAR 67
43792: ARRAY
43793: PPUSH
43794: LD_INT 0
43796: PPUSH
43797: LD_INT 0
43799: PPUSH
43800: LD_INT 0
43802: PPUSH
43803: LD_INT 0
43805: PPUSH
43806: LD_EXP 25
43810: PPUSH
43811: LD_EXP 26
43815: PPUSH
43816: CALL_OW 12
43820: PPUSH
43821: LD_INT 16
43823: PPUSH
43824: LD_INT 7
43826: PPUSH
43827: LD_INT 1
43829: PPUSH
43830: LD_INT 1
43832: PPUSH
43833: LD_INT 3
43835: PPUSH
43836: CALL_OW 12
43840: PPUSH
43841: CALL 12688 0 12
43845: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43846: LD_EXP 18
43850: PUSH
43851: LD_INT 0
43853: EQUAL
43854: IFFALSE 43954
43856: GO 43858
43858: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43859: LD_INT 16
43861: PPUSH
43862: LD_INT 6
43864: PPUSH
43865: LD_INT 5
43867: PPUSH
43868: LD_INT 8
43870: PPUSH
43871: CALL_OW 12
43875: PUSH
43876: LD_INT 6
43878: PPUSH
43879: LD_INT 9
43881: PPUSH
43882: CALL_OW 12
43886: PUSH
43887: LD_INT 7
43889: PPUSH
43890: LD_INT 9
43892: PPUSH
43893: CALL_OW 12
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: PUSH
43903: LD_OWVAR 67
43907: ARRAY
43908: PPUSH
43909: LD_EXP 25
43913: PPUSH
43914: LD_EXP 26
43918: PPUSH
43919: CALL_OW 12
43923: PPUSH
43924: LD_INT 3
43926: PPUSH
43927: LD_INT 1
43929: PPUSH
43930: LD_INT 3
43932: PPUSH
43933: LD_INT 44
43935: PUSH
43936: LD_INT 46
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PPUSH
43943: EMPTY
43944: PPUSH
43945: EMPTY
43946: PPUSH
43947: LD_INT 1
43949: PPUSH
43950: CALL 14981 0 11
43954: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43955: LD_EXP 18
43959: PUSH
43960: LD_INT 0
43962: EQUAL
43963: IFFALSE 44045
43965: GO 43967
43967: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43968: LD_INT 6
43970: PPUSH
43971: LD_INT 3
43973: PPUSH
43974: LD_INT 3
43976: PUSH
43977: LD_INT 4
43979: PUSH
43980: LD_INT 5
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: LIST
43987: PUSH
43988: LD_OWVAR 67
43992: ARRAY
43993: PPUSH
43994: LD_INT 0
43996: PPUSH
43997: LD_INT 0
43999: PPUSH
44000: LD_INT 0
44002: PPUSH
44003: LD_INT 0
44005: PPUSH
44006: LD_EXP 25
44010: PPUSH
44011: LD_EXP 26
44015: PPUSH
44016: CALL_OW 12
44020: PPUSH
44021: LD_INT 16
44023: PPUSH
44024: LD_INT 7
44026: PPUSH
44027: LD_INT 1
44029: PPUSH
44030: LD_INT 1
44032: PPUSH
44033: LD_INT 3
44035: PPUSH
44036: CALL_OW 12
44040: PPUSH
44041: CALL 12688 0 12
44045: END
// every 35 35$0 trigger SikorskyArrive = 0 do
44046: LD_EXP 18
44050: PUSH
44051: LD_INT 0
44053: EQUAL
44054: IFFALSE 44154
44056: GO 44058
44058: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
44059: LD_INT 16
44061: PPUSH
44062: LD_INT 6
44064: PPUSH
44065: LD_INT 5
44067: PPUSH
44068: LD_INT 8
44070: PPUSH
44071: CALL_OW 12
44075: PUSH
44076: LD_INT 6
44078: PPUSH
44079: LD_INT 9
44081: PPUSH
44082: CALL_OW 12
44086: PUSH
44087: LD_INT 7
44089: PPUSH
44090: LD_INT 9
44092: PPUSH
44093: CALL_OW 12
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: PUSH
44103: LD_OWVAR 67
44107: ARRAY
44108: PPUSH
44109: LD_EXP 25
44113: PPUSH
44114: LD_EXP 26
44118: PPUSH
44119: CALL_OW 12
44123: PPUSH
44124: LD_INT 3
44126: PPUSH
44127: LD_INT 1
44129: PPUSH
44130: LD_INT 3
44132: PPUSH
44133: LD_INT 44
44135: PUSH
44136: LD_INT 46
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PPUSH
44143: EMPTY
44144: PPUSH
44145: EMPTY
44146: PPUSH
44147: LD_INT 1
44149: PPUSH
44150: CALL 14981 0 11
44154: END
// every 0 0$1 trigger timerStatus = 1 do
44155: LD_EXP 35
44159: PUSH
44160: LD_INT 1
44162: EQUAL
44163: IFFALSE 44200
44165: GO 44167
44167: DISABLE
// begin enable ;
44168: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
44169: LD_ADDR_OWVAR 47
44173: PUSH
44174: LD_STRING #Am08-1
44176: PUSH
44177: LD_EXP 19
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
44186: LD_ADDR_EXP 19
44190: PUSH
44191: LD_EXP 19
44195: PUSH
44196: LD_INT 35
44198: MINUS
44199: ST_TO_ADDR
// end ; end_of_file
44200: END
// every 1 1$0 do
44201: GO 44203
44203: DISABLE
// begin if supply <= 13 and supply > 7 then
44204: LD_EXP 40
44208: PUSH
44209: LD_INT 13
44211: LESSEQUAL
44212: PUSH
44213: LD_EXP 40
44217: PUSH
44218: LD_INT 7
44220: GREATER
44221: AND
44222: IFFALSE 44245
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44224: LD_INT 3
44226: PPUSH
44227: LD_INT 5
44229: PPUSH
44230: CALL_OW 12
44234: PPUSH
44235: LD_INT 5
44237: PPUSH
44238: LD_INT 1
44240: PPUSH
44241: CALL_OW 55
// if supply <= 7 and supply > 4 then
44245: LD_EXP 40
44249: PUSH
44250: LD_INT 7
44252: LESSEQUAL
44253: PUSH
44254: LD_EXP 40
44258: PUSH
44259: LD_INT 4
44261: GREATER
44262: AND
44263: IFFALSE 44286
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44265: LD_INT 3
44267: PPUSH
44268: LD_INT 5
44270: PPUSH
44271: CALL_OW 12
44275: PPUSH
44276: LD_INT 20
44278: PPUSH
44279: LD_INT 1
44281: PPUSH
44282: CALL_OW 55
// if supply <= 4 and supply > 0 then
44286: LD_EXP 40
44290: PUSH
44291: LD_INT 4
44293: LESSEQUAL
44294: PUSH
44295: LD_EXP 40
44299: PUSH
44300: LD_INT 0
44302: GREATER
44303: AND
44304: IFFALSE 44327
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44306: LD_INT 3
44308: PPUSH
44309: LD_INT 5
44311: PPUSH
44312: CALL_OW 12
44316: PPUSH
44317: LD_INT 21
44319: PPUSH
44320: LD_INT 1
44322: PPUSH
44323: CALL_OW 55
// if supply > 0 then
44327: LD_EXP 40
44331: PUSH
44332: LD_INT 0
44334: GREATER
44335: IFFALSE 44352
// begin supply = supply - 1 ;
44337: LD_ADDR_EXP 40
44341: PUSH
44342: LD_EXP 40
44346: PUSH
44347: LD_INT 1
44349: MINUS
44350: ST_TO_ADDR
// enable ;
44351: ENABLE
// end ; end ; end_of_file
44352: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44353: LD_EXP 39
44357: PUSH
44358: LD_INT 1
44360: EQUAL
44361: PUSH
44362: LD_EXP 1
44366: PPUSH
44367: CALL_OW 301
44371: AND
44372: IFFALSE 44384
44374: GO 44376
44376: DISABLE
// YouLost ( JMM ) ;
44377: LD_STRING JMM
44379: PPUSH
44380: CALL_OW 104
44384: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44385: LD_EXP 18
44389: PUSH
44390: LD_INT 1
44392: EQUAL
44393: PUSH
44394: LD_EXP 16
44398: PPUSH
44399: CALL_OW 301
44403: AND
44404: IFFALSE 44436
44406: GO 44408
44408: DISABLE
// begin DialogueOn ;
44409: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44413: LD_EXP 23
44417: PPUSH
44418: LD_STRING D8a-Pow-1
44420: PPUSH
44421: CALL_OW 94
// DialogueOff ;
44425: CALL_OW 7
// YouLost ( Dismissed ) ;
44429: LD_STRING Dismissed
44431: PPUSH
44432: CALL_OW 104
// end ;
44436: END
// every 0 0$1 trigger IsDead ( amDepot ) do
44437: LD_EXP 37
44441: PPUSH
44442: CALL_OW 301
44446: IFFALSE 44458
44448: GO 44450
44450: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44451: LD_STRING Destroyed
44453: PPUSH
44454: CALL_OW 104
44458: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
44459: LD_EXP 24
44463: PPUSH
44464: CALL_OW 301
44468: PUSH
44469: LD_INT 22
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 21
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PPUSH
44493: CALL_OW 69
44497: PUSH
44498: LD_INT 14
44500: PUSH
44501: LD_INT 13
44503: PUSH
44504: LD_INT 12
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: PUSH
44512: LD_OWVAR 67
44516: ARRAY
44517: LESS
44518: AND
44519: IFFALSE 44967
44521: GO 44523
44523: DISABLE
44524: LD_INT 0
44526: PPUSH
44527: PPUSH
// begin russianAI = 0 ;
44528: LD_ADDR_EXP 27
44532: PUSH
44533: LD_INT 0
44535: ST_TO_ADDR
// escapeAvalaible = 1 ;
44536: LD_ADDR_EXP 36
44540: PUSH
44541: LD_INT 1
44543: ST_TO_ADDR
// InGameOn ;
44544: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44548: LD_INT 3
44550: PPUSH
44551: LD_INT 1
44553: PPUSH
44554: LD_INT 1
44556: PPUSH
44557: LD_INT 0
44559: PPUSH
44560: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44564: LD_INT 6
44566: PPUSH
44567: LD_INT 1
44569: PPUSH
44570: LD_INT 1
44572: PPUSH
44573: LD_INT 0
44575: PPUSH
44576: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44580: LD_INT 3
44582: PPUSH
44583: LD_INT 1
44585: PPUSH
44586: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44590: LD_INT 97
44592: PPUSH
44593: LD_INT 91
44595: PPUSH
44596: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44600: LD_INT 22
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 21
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PPUSH
44624: CALL_OW 69
44628: PPUSH
44629: CALL_OW 121
// wait ( 0 0$01 ) ;
44633: LD_INT 35
44635: PPUSH
44636: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44640: LD_INT 22
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 21
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PPUSH
44664: CALL_OW 69
44668: PPUSH
44669: LD_INT 124
44671: PPUSH
44672: LD_INT 98
44674: PPUSH
44675: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44679: LD_INT 22
44681: PUSH
44682: LD_INT 6
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 21
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PPUSH
44703: CALL_OW 69
44707: PPUSH
44708: CALL_OW 121
// wait ( 0 0$01 ) ;
44712: LD_INT 35
44714: PPUSH
44715: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44719: LD_INT 22
44721: PUSH
44722: LD_INT 6
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 21
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PPUSH
44743: CALL_OW 69
44747: PPUSH
44748: LD_INT 124
44750: PPUSH
44751: LD_INT 98
44753: PPUSH
44754: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44758: LD_INT 22
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 21
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 3
44780: PUSH
44781: LD_INT 54
44783: PUSH
44784: EMPTY
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: PPUSH
44796: CALL_OW 69
44800: PPUSH
44801: LD_INT 124
44803: PPUSH
44804: LD_INT 98
44806: PPUSH
44807: CALL_OW 114
// wait ( 0 0$4 ) ;
44811: LD_INT 140
44813: PPUSH
44814: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44818: LD_INT 124
44820: PPUSH
44821: LD_INT 98
44823: PPUSH
44824: CALL_OW 84
// if SikorskyStatus = 1 then
44828: LD_EXP 21
44832: PUSH
44833: LD_INT 1
44835: EQUAL
44836: IFFALSE 44850
// begin Say ( Sikorski , D9-Sik-1 ) ;
44838: LD_EXP 16
44842: PPUSH
44843: LD_STRING D9-Sik-1
44845: PPUSH
44846: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44850: LD_EXP 21
44854: PUSH
44855: LD_INT 2
44857: EQUAL
44858: IFFALSE 44879
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44860: LD_EXP 23
44864: PPUSH
44865: LD_STRING D8b-Pow-1
44867: PPUSH
44868: CALL_OW 94
// YouLost ( Dismissed ) ;
44872: LD_STRING Dismissed
44874: PPUSH
44875: CALL_OW 104
// end ; p := 0 0$0 ;
44879: LD_ADDR_VAR 0 2
44883: PUSH
44884: LD_INT 0
44886: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44887: LD_INT 35
44889: PPUSH
44890: CALL_OW 67
// p := p + 0 0$1 ;
44894: LD_ADDR_VAR 0 2
44898: PUSH
44899: LD_VAR 0 2
44903: PUSH
44904: LD_INT 35
44906: PLUS
44907: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44908: LD_INT 23
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 21
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 24
44930: PUSH
44931: LD_INT 250
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: PPUSH
44943: CALL_OW 69
44947: PUSH
44948: LD_INT 0
44950: EQUAL
44951: PUSH
44952: LD_VAR 0 2
44956: PUSH
44957: LD_INT 245
44959: GREATEREQUAL
44960: OR
44961: IFFALSE 44887
// FinishMission ;
44963: CALL 44970 0 0
// end ;
44967: PPOPN 2
44969: END
// export function FinishMission ; var tmp ; begin
44970: LD_INT 0
44972: PPUSH
44973: PPUSH
// AddMedal ( med1 , 1 ) ;
44974: LD_STRING med1
44976: PPUSH
44977: LD_INT 1
44979: PPUSH
44980: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44984: LD_STRING med2
44986: PPUSH
44987: LD_INT 1
44989: PPUSH
44990: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44994: LD_STRING perfect
44996: PPUSH
44997: LD_INT 1
44999: PPUSH
45000: CALL_OW 101
// GiveMedals ( Main ) ;
45004: LD_STRING Main
45006: PPUSH
45007: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45011: LD_INT 22
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 23
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 21
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 25
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 25
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 25
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 25
45076: PUSH
45077: LD_INT 4
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: PPUSH
45097: CALL_OW 69
45101: PPUSH
45102: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45106: LD_EXP 1
45110: PPUSH
45111: LD_EXP 42
45115: PUSH
45116: LD_STRING JMM
45118: STR
45119: PPUSH
45120: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
45124: LD_EXP 2
45128: PPUSH
45129: LD_EXP 42
45133: PUSH
45134: LD_STRING Brown
45136: STR
45137: PPUSH
45138: CALL 8524 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45142: LD_EXP 3
45146: PPUSH
45147: LD_EXP 42
45151: PUSH
45152: LD_STRING Donaldson
45154: STR
45155: PPUSH
45156: CALL 8524 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45160: LD_EXP 4
45164: PPUSH
45165: LD_EXP 42
45169: PUSH
45170: LD_STRING Bobby
45172: STR
45173: PPUSH
45174: CALL 8524 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45178: LD_EXP 5
45182: PPUSH
45183: LD_EXP 42
45187: PUSH
45188: LD_STRING Cyrus
45190: STR
45191: PPUSH
45192: CALL 8524 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45196: LD_EXP 6
45200: PPUSH
45201: LD_EXP 42
45205: PUSH
45206: LD_STRING Lisa
45208: STR
45209: PPUSH
45210: CALL 8524 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45214: LD_EXP 7
45218: PPUSH
45219: LD_EXP 42
45223: PUSH
45224: LD_STRING Frank
45226: STR
45227: PPUSH
45228: CALL 8524 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45232: LD_EXP 8
45236: PPUSH
45237: LD_EXP 42
45241: PUSH
45242: LD_STRING Gladstone
45244: STR
45245: PPUSH
45246: CALL 8524 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45250: LD_EXP 9
45254: PPUSH
45255: LD_EXP 42
45259: PUSH
45260: LD_STRING Kikuchi
45262: STR
45263: PPUSH
45264: CALL 8524 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45268: LD_EXP 14
45272: PPUSH
45273: LD_EXP 42
45277: PUSH
45278: LD_STRING Denis
45280: STR
45281: PPUSH
45282: CALL 8524 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45286: LD_EXP 15
45290: PPUSH
45291: LD_EXP 42
45295: PUSH
45296: LD_STRING Joan
45298: STR
45299: PPUSH
45300: CALL 8524 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45304: LD_EXP 10
45308: PPUSH
45309: LD_EXP 42
45313: PUSH
45314: LD_STRING Khatam
45316: STR
45317: PPUSH
45318: CALL 8524 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45322: LD_EXP 13
45326: PPUSH
45327: LD_EXP 42
45331: PUSH
45332: LD_STRING Houten
45334: STR
45335: PPUSH
45336: CALL 8524 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45340: LD_INT 50
45342: PUSH
45343: EMPTY
45344: LIST
45345: PUSH
45346: LD_INT 22
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 21
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 25
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 25
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 25
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 25
45401: PUSH
45402: LD_INT 4
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: PPUSH
45422: CALL_OW 69
45426: PUSH
45427: LD_EXP 1
45431: PUSH
45432: LD_EXP 2
45436: PUSH
45437: LD_EXP 3
45441: PUSH
45442: LD_EXP 4
45446: PUSH
45447: LD_EXP 5
45451: PUSH
45452: LD_EXP 6
45456: PUSH
45457: LD_EXP 7
45461: PUSH
45462: LD_EXP 8
45466: PUSH
45467: LD_EXP 9
45471: PUSH
45472: LD_EXP 14
45476: PUSH
45477: LD_EXP 15
45481: PUSH
45482: LD_EXP 13
45486: PUSH
45487: LD_EXP 10
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: DIFF
45507: PPUSH
45508: LD_STRING 08_other_survivors
45510: PPUSH
45511: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45515: LD_INT 23
45517: PPUSH
45518: CALL 45531 0 1
// YouWin ;
45522: CALL_OW 103
// end ;
45526: LD_VAR 0 1
45530: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45531: LD_INT 0
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
// gammaBase = [ ] ;
45537: LD_ADDR_VAR 0 4
45541: PUSH
45542: EMPTY
45543: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45544: LD_ADDR_VAR 0 5
45548: PUSH
45549: LD_VAR 0 1
45553: PPUSH
45554: LD_INT 22
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 21
45566: PUSH
45567: LD_INT 3
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 50
45576: PUSH
45577: EMPTY
45578: LIST
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: PPUSH
45585: CALL_OW 70
45589: ST_TO_ADDR
// for i in buildings do
45590: LD_ADDR_VAR 0 3
45594: PUSH
45595: LD_VAR 0 5
45599: PUSH
45600: FOR_IN
45601: IFFALSE 46038
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45603: LD_VAR 0 3
45607: PPUSH
45608: CALL_OW 266
45612: PUSH
45613: LD_INT 6
45615: PUSH
45616: LD_INT 7
45618: PUSH
45619: LD_INT 8
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: IN
45627: IFFALSE 45741
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45629: LD_ADDR_VAR 0 4
45633: PUSH
45634: LD_VAR 0 4
45638: PUSH
45639: LD_VAR 0 3
45643: PPUSH
45644: CALL_OW 266
45648: PUSH
45649: LD_VAR 0 3
45653: PPUSH
45654: CALL_OW 250
45658: PUSH
45659: LD_VAR 0 3
45663: PPUSH
45664: CALL_OW 251
45668: PUSH
45669: LD_VAR 0 3
45673: PPUSH
45674: CALL_OW 254
45678: PUSH
45679: LD_VAR 0 3
45683: PPUSH
45684: CALL_OW 267
45688: PUSH
45689: LD_VAR 0 3
45693: PPUSH
45694: CALL_OW 248
45698: PUSH
45699: LD_VAR 0 3
45703: PPUSH
45704: LD_INT 1
45706: PPUSH
45707: CALL_OW 268
45711: PUSH
45712: LD_VAR 0 3
45716: PPUSH
45717: LD_INT 2
45719: PPUSH
45720: CALL_OW 268
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: PUSH
45735: EMPTY
45736: LIST
45737: ADD
45738: ST_TO_ADDR
45739: GO 46036
// if GetBType ( i ) = b_bunker then
45741: LD_VAR 0 3
45745: PPUSH
45746: CALL_OW 266
45750: PUSH
45751: LD_INT 32
45753: EQUAL
45754: IFFALSE 45851
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45756: LD_ADDR_VAR 0 4
45760: PUSH
45761: LD_VAR 0 4
45765: PUSH
45766: LD_VAR 0 3
45770: PPUSH
45771: CALL_OW 266
45775: PUSH
45776: LD_VAR 0 3
45780: PPUSH
45781: CALL_OW 250
45785: PUSH
45786: LD_VAR 0 3
45790: PPUSH
45791: CALL_OW 251
45795: PUSH
45796: LD_VAR 0 3
45800: PPUSH
45801: CALL_OW 254
45805: PUSH
45806: LD_VAR 0 3
45810: PPUSH
45811: CALL_OW 267
45815: PUSH
45816: LD_VAR 0 3
45820: PPUSH
45821: CALL_OW 248
45825: PUSH
45826: LD_VAR 0 3
45830: PPUSH
45831: CALL_OW 269
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: ADD
45848: ST_TO_ADDR
45849: GO 46036
// if GetBType ( i ) = b_factory then
45851: LD_VAR 0 3
45855: PPUSH
45856: CALL_OW 266
45860: PUSH
45861: LD_INT 3
45863: EQUAL
45864: IFFALSE 45954
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45866: LD_ADDR_VAR 0 4
45870: PUSH
45871: LD_VAR 0 4
45875: PPUSH
45876: LD_INT 1
45878: PPUSH
45879: LD_VAR 0 3
45883: PPUSH
45884: CALL_OW 266
45888: PUSH
45889: LD_VAR 0 3
45893: PPUSH
45894: CALL_OW 250
45898: PUSH
45899: LD_VAR 0 3
45903: PPUSH
45904: CALL_OW 251
45908: PUSH
45909: LD_VAR 0 3
45913: PPUSH
45914: CALL_OW 254
45918: PUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: CALL_OW 267
45928: PUSH
45929: LD_VAR 0 3
45933: PPUSH
45934: CALL_OW 248
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: PPUSH
45947: CALL_OW 2
45951: ST_TO_ADDR
45952: GO 46036
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45954: LD_ADDR_VAR 0 4
45958: PUSH
45959: LD_VAR 0 4
45963: PUSH
45964: LD_VAR 0 3
45968: PPUSH
45969: CALL_OW 266
45973: PUSH
45974: LD_VAR 0 3
45978: PPUSH
45979: CALL_OW 250
45983: PUSH
45984: LD_VAR 0 3
45988: PPUSH
45989: CALL_OW 251
45993: PUSH
45994: LD_VAR 0 3
45998: PPUSH
45999: CALL_OW 254
46003: PUSH
46004: LD_VAR 0 3
46008: PPUSH
46009: CALL_OW 267
46013: PUSH
46014: LD_VAR 0 3
46018: PPUSH
46019: CALL_OW 248
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: PUSH
46032: EMPTY
46033: LIST
46034: ADD
46035: ST_TO_ADDR
// end ;
46036: GO 45600
46038: POP
46039: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
46040: LD_VAR 0 4
46044: PPUSH
46045: LD_STRING 08_GammaBase
46047: PPUSH
46048: CALL_OW 39
// end ;
46052: LD_VAR 0 2
46056: RET
