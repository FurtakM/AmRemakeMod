// export JMM , Joan , Frank , Denis , Lisa , Gladstone , Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Sikorsky , SikorskyTank , SikorskyArrive ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyBuilds ; export firstAttack , secondAttack ; export JMMArrive ; export varEvent1 ; export test ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMArrive = 0 ;
   8: LD_ADDR_EXP 29
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// SikorskyArrive = 0 ;
  16: LD_ADDR_EXP 16
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// firstAttack = 0 ;
  24: LD_ADDR_EXP 27
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// secondAttack = 0 ;
  32: LD_ADDR_EXP 28
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// russianAI = 0 ;
  40: LD_ADDR_EXP 22
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// ruDestroyBuilds = [ ] ;
  48: LD_ADDR_EXP 26
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// varEvent1 = 0 ;
  55: LD_ADDR_EXP 30
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// test = 0 0$00 ;
  63: LD_ADDR_EXP 31
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// debugMode = 1 ;
  71: LD_ADDR_EXP 32
  75: PUSH
  76: LD_INT 1
  78: ST_TO_ADDR
// PrepareDifficulty ;
  79: CALL 2671 0 0
// PrepareHeroes ;
  83: CALL 361 0 0
// PrepareSoldiers ;
  87: CALL 619 0 0
// PrepareRussianCommander ;
  91: CALL 1472 0 0
// PrepareRussians ;
  95: CALL 1794 0 0
// PrepareCutsceneAttack ;
  99: CALL 1524 0 0
// BuildRussianBase ;
 103: CALL 2796 0 0
// end ;
 107: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 108: LD_EXP 32
 112: PUSH
 113: LD_INT 1
 115: EQUAL
 116: IFFALSE 343
 118: GO 120
 120: DISABLE
 121: LD_INT 0
 123: PPUSH
// begin enable ;
 124: ENABLE
// fogoff ( true ) ;
 125: LD_INT 1
 127: PPUSH
 128: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 132: LD_ADDR_VAR 0 1
 136: PUSH
 137: LD_INT 22
 139: PUSH
 140: LD_INT 1
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 21
 149: PUSH
 150: LD_INT 1
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: PPUSH
 161: CALL_OW 69
 165: PUSH
 166: FOR_IN
 167: IFFALSE 183
// SetLives ( i , 1000 ) ;
 169: LD_VAR 0 1
 173: PPUSH
 174: LD_INT 1000
 176: PPUSH
 177: CALL_OW 234
 181: GO 166
 183: POP
 184: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 185: LD_ADDR_VAR 0 1
 189: PUSH
 190: LD_INT 22
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: PUSH
 200: LD_INT 30
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PPUSH
 214: CALL_OW 69
 218: PUSH
 219: FOR_IN
 220: IFFALSE 244
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 222: LD_VAR 0 1
 226: PPUSH
 227: CALL_OW 274
 231: PPUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 9999
 237: PPUSH
 238: CALL_OW 277
 242: GO 219
 244: POP
 245: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 246: LD_ADDR_VAR 0 1
 250: PUSH
 251: LD_INT 22
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: LD_INT 30
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PPUSH
 275: CALL_OW 69
 279: PUSH
 280: FOR_IN
 281: IFFALSE 305
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 283: LD_VAR 0 1
 287: PPUSH
 288: CALL_OW 274
 292: PPUSH
 293: LD_INT 2
 295: PPUSH
 296: LD_INT 9999
 298: PPUSH
 299: CALL_OW 277
 303: GO 280
 305: POP
 306: POP
// if IsSelected ( ruDepot ) then
 307: LD_EXP 23
 311: PPUSH
 312: CALL_OW 306
 316: IFFALSE 326
// your_side = 3 ;
 318: LD_ADDR_OWVAR 2
 322: PUSH
 323: LD_INT 3
 325: ST_TO_ADDR
// if IsSelected ( amdepo ) then
 326: LD_INT 25
 328: PPUSH
 329: CALL_OW 306
 333: IFFALSE 343
// your_side = 1 ;
 335: LD_ADDR_OWVAR 2
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// end ;
 343: PPOPN 1
 345: END
// every 0 0$1 do
 346: GO 348
 348: DISABLE
// begin enable ;
 349: ENABLE
// display_strings = JMMArrive ;
 350: LD_ADDR_OWVAR 47
 354: PUSH
 355: LD_EXP 29
 359: ST_TO_ADDR
// end ; end_of_file
 360: END
// export function PrepareHeroes ; begin
 361: LD_INT 0
 363: PPUSH
// uc_side = 1 ;
 364: LD_ADDR_OWVAR 20
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// uc_nation = 1 ;
 372: LD_ADDR_OWVAR 21
 376: PUSH
 377: LD_INT 1
 379: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 380: LD_ADDR_EXP 13
 384: PUSH
 385: LD_STRING Donaldson
 387: PPUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL 2212 0 2
 395: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 396: LD_ADDR_EXP 7
 400: PUSH
 401: LD_STRING Brown
 403: PPUSH
 404: LD_INT 0
 406: PPUSH
 407: CALL 2212 0 2
 411: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 412: LD_ADDR_EXP 8
 416: PUSH
 417: LD_STRING Dickens
 419: PPUSH
 420: LD_INT 0
 422: PPUSH
 423: CALL 2212 0 2
 427: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 428: LD_ADDR_EXP 12
 432: PUSH
 433: LD_STRING Campell
 435: PPUSH
 436: LD_INT 0
 438: PPUSH
 439: CALL 2212 0 2
 443: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 444: LD_ADDR_EXP 10
 448: PUSH
 449: LD_STRING Knight
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL 2212 0 2
 459: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 460: LD_ADDR_EXP 11
 464: PUSH
 465: LD_STRING Claptopn
 467: PPUSH
 468: LD_INT 0
 470: PPUSH
 471: CALL 2212 0 2
 475: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING Joan
 483: PPUSH
 484: LD_INT 0
 486: PPUSH
 487: CALL 2212 0 2
 491: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 492: LD_ADDR_EXP 17
 496: PUSH
 497: LD_STRING Harisson
 499: PPUSH
 500: LD_INT 0
 502: PPUSH
 503: CALL 2212 0 2
 507: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 508: LD_ADDR_EXP 18
 512: PUSH
 513: LD_STRING Powell
 515: PPUSH
 516: LD_INT 0
 518: PPUSH
 519: CALL 2212 0 2
 523: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 524: LD_EXP 13
 528: PPUSH
 529: LD_INT 5
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL_OW 49
// PlaceUnitArea ( Dickens , GammaSpawn , false ) ;
 539: LD_EXP 8
 543: PPUSH
 544: LD_INT 5
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL_OW 49
// PlaceUnitArea ( Campell , GammaSpawn , false ) ;
 554: LD_EXP 12
 558: PPUSH
 559: LD_INT 5
 561: PPUSH
 562: LD_INT 0
 564: PPUSH
 565: CALL_OW 49
// PlaceUnitArea ( Knight , GammaSpawn , false ) ;
 569: LD_EXP 10
 573: PPUSH
 574: LD_INT 5
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaSpawn , false ) ;
 584: LD_EXP 11
 588: PPUSH
 589: LD_INT 5
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 49
// PlaceUnitArea ( Joan , GammaSpawn , false ) ;
 599: LD_EXP 2
 603: PPUSH
 604: LD_INT 5
 606: PPUSH
 607: LD_INT 0
 609: PPUSH
 610: CALL_OW 49
// end ;
 614: LD_VAR 0 1
 618: RET
// export function PrepareSoldiers ; var i ; begin
 619: LD_INT 0
 621: PPUSH
 622: PPUSH
// uc_side = 1 ;
 623: LD_ADDR_OWVAR 20
 627: PUSH
 628: LD_INT 1
 630: ST_TO_ADDR
// uc_nation = 1 ;
 631: LD_ADDR_OWVAR 21
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
 639: LD_ADDR_VAR 0 2
 643: PUSH
 644: LD_INT 22
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 30
 656: PUSH
 657: LD_INT 32
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PPUSH
 668: CALL_OW 69
 672: PUSH
 673: FOR_IN
 674: IFFALSE 702
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 676: LD_INT 1
 678: PPUSH
 679: LD_INT 1
 681: PPUSH
 682: LD_VAR 0 2
 686: PPUSH
 687: LD_INT 4
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL 2561 0 6
 700: GO 673
 702: POP
 703: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: LD_INT 22
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: LD_INT 30
 721: PUSH
 722: LD_INT 31
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PPUSH
 733: CALL_OW 69
 737: PUSH
 738: FOR_IN
 739: IFFALSE 767
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 741: LD_INT 1
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_VAR 0 2
 751: PPUSH
 752: LD_INT 4
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_INT 1
 760: PPUSH
 761: CALL 2561 0 6
 765: GO 738
 767: POP
 768: POP
// end ;
 769: LD_VAR 0 1
 773: RET
// export function PrepareSupportFromDelta ; begin
 774: LD_INT 0
 776: PPUSH
// uc_side = 1 ;
 777: LD_ADDR_OWVAR 20
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// uc_nation = 1 ;
 785: LD_ADDR_OWVAR 21
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 793: LD_ADDR_EXP 4
 797: PUSH
 798: LD_STRING Denis
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 2212 0 2
 808: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 809: LD_ADDR_EXP 7
 813: PUSH
 814: LD_STRING Brown
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 2212 0 2
 824: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
 825: LD_EXP 4
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 49
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
 840: LD_EXP 7
 844: PPUSH
 845: LD_INT 4
 847: PPUSH
 848: LD_INT 0
 850: PPUSH
 851: CALL_OW 49
// ComMoveXY ( [ Denis , Brown ] , 53 , 19 ) ;
 855: LD_EXP 4
 859: PUSH
 860: LD_EXP 7
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PPUSH
 869: LD_INT 53
 871: PPUSH
 872: LD_INT 19
 874: PPUSH
 875: CALL_OW 111
// firstAttack = 1 ;
 879: LD_ADDR_EXP 27
 883: PUSH
 884: LD_INT 1
 886: ST_TO_ADDR
// end ;
 887: LD_VAR 0 1
 891: RET
// export function PrepareMacmillanSquad ; begin
 892: LD_INT 0
 894: PPUSH
// uc_side = 1 ;
 895: LD_ADDR_OWVAR 20
 899: PUSH
 900: LD_INT 1
 902: ST_TO_ADDR
// uc_nation = 1 ;
 903: LD_ADDR_OWVAR 21
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 911: LD_ADDR_EXP 1
 915: PUSH
 916: LD_STRING JMM
 918: PPUSH
 919: LD_INT 0
 921: PPUSH
 922: CALL 2212 0 2
 926: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Lisa
 934: PPUSH
 935: LD_INT 0
 937: PPUSH
 938: CALL 2212 0 2
 942: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 943: LD_ADDR_EXP 6
 947: PUSH
 948: LD_STRING Gladstone
 950: PPUSH
 951: LD_INT 0
 953: PPUSH
 954: CALL 2212 0 2
 958: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 959: LD_ADDR_EXP 3
 963: PUSH
 964: LD_STRING Frank
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL 2212 0 2
 974: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 975: LD_ADDR_EXP 9
 979: PUSH
 980: LD_STRING Woodruff
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL 2212 0 2
 990: ST_TO_ADDR
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
 991: LD_EXP 1
 995: PPUSH
 996: LD_INT 4
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
1006: LD_EXP 5
1010: PPUSH
1011: LD_INT 4
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 49
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
1021: LD_EXP 6
1025: PPUSH
1026: LD_INT 4
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 49
// PlaceUnitArea ( Frank , GammaSupport , false ) ;
1036: LD_EXP 3
1040: PPUSH
1041: LD_INT 4
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaSupport , false ) ;
1051: LD_EXP 9
1055: PPUSH
1056: LD_INT 4
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 49
// ComMoveXY ( [ JMM , Lisa , Gladstone , Frank , Woodruff ] , 53 , 19 ) ;
1066: LD_EXP 1
1070: PUSH
1071: LD_EXP 5
1075: PUSH
1076: LD_EXP 6
1080: PUSH
1081: LD_EXP 3
1085: PUSH
1086: LD_EXP 9
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: PPUSH
1098: LD_INT 53
1100: PPUSH
1101: LD_INT 19
1103: PPUSH
1104: CALL_OW 111
// end ;
1108: LD_VAR 0 1
1112: RET
// export function PrepareSikorsky ; begin
1113: LD_INT 0
1115: PPUSH
// uc_side = 4 ;
1116: LD_ADDR_OWVAR 20
1120: PUSH
1121: LD_INT 4
1123: ST_TO_ADDR
// uc_nation = 1 ;
1124: LD_ADDR_OWVAR 21
1128: PUSH
1129: LD_INT 1
1131: ST_TO_ADDR
// Sikorsky = PrepareUnit ( Sikorsky , false ) ;
1132: LD_ADDR_EXP 14
1136: PUSH
1137: LD_STRING Sikorsky
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL 2212 0 2
1147: ST_TO_ADDR
// vc_engine = 1 ;
1148: LD_ADDR_OWVAR 39
1152: PUSH
1153: LD_INT 1
1155: ST_TO_ADDR
// vc_control = 1 ;
1156: LD_ADDR_OWVAR 38
1160: PUSH
1161: LD_INT 1
1163: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
1164: LD_ADDR_OWVAR 40
1168: PUSH
1169: LD_INT 5
1171: PUSH
1172: LD_INT 3
1174: PUSH
1175: LD_INT 4
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: PUSH
1183: LD_OWVAR 67
1187: ARRAY
1188: ST_TO_ADDR
// vc_chassis = [ 4 , 3 , 2 ] [ Difficulty ] ;
1189: LD_ADDR_OWVAR 37
1193: PUSH
1194: LD_INT 4
1196: PUSH
1197: LD_INT 3
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_OWVAR 67
1212: ARRAY
1213: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
1214: LD_ADDR_EXP 15
1218: PUSH
1219: CALL_OW 45
1223: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
1224: LD_EXP 15
1228: PPUSH
1229: LD_INT 9
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 49
// PlaceHumanInUnit ( Sikorsky , SikorskyTank ) ;
1239: LD_EXP 14
1243: PPUSH
1244: LD_EXP 15
1248: PPUSH
1249: CALL_OW 52
// end ;
1253: LD_VAR 0 1
1257: RET
// export function PrepareSikorskyArmy ; begin
1258: LD_INT 0
1260: PPUSH
// RespawnAttackInfantry ( 4 , 1 , [ rand ( 5 , 8 ) , rand ( 4 , 6 ) , rand ( 3 , 5 ) ] [ Difficulty ] , 0 , 0 , 0 , [ 3 , 2 , 1 ] , rand ( 3 , 6 ) , SikorskySpawn , SikorskyHealArea , 3 , 3 ) ;
1261: LD_INT 4
1263: PPUSH
1264: LD_INT 1
1266: PPUSH
1267: LD_INT 5
1269: PPUSH
1270: LD_INT 8
1272: PPUSH
1273: CALL_OW 12
1277: PUSH
1278: LD_INT 4
1280: PPUSH
1281: LD_INT 6
1283: PPUSH
1284: CALL_OW 12
1288: PUSH
1289: LD_INT 3
1291: PPUSH
1292: LD_INT 5
1294: PPUSH
1295: CALL_OW 12
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_OWVAR 67
1309: ARRAY
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: LD_INT 0
1319: PPUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 2
1325: PUSH
1326: LD_INT 1
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 6
1339: PPUSH
1340: CALL_OW 12
1344: PPUSH
1345: LD_INT 9
1347: PPUSH
1348: LD_INT 11
1350: PPUSH
1351: LD_INT 3
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: CALL 5818 0 12
// end ;
1361: LD_VAR 0 1
1365: RET
// export function PrepareSikorskyTanks ; begin
1366: LD_INT 0
1368: PPUSH
// RespawnAttackVehicle ( SikorskySpawn , 4 , [ 4 , 3 , 3 ] , [ rand ( 4 , 6 ) , rand ( 4 , 5 ) , rand ( 3 , 4 ) ] [ Difficulty ] , 1 , 1 , 1 , [ ] , [ ] , [ 6 , 4 , 3 ] , 3 ) ;
1369: LD_INT 9
1371: PPUSH
1372: LD_INT 4
1374: PPUSH
1375: LD_INT 4
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: PPUSH
1389: LD_INT 4
1391: PPUSH
1392: LD_INT 6
1394: PPUSH
1395: CALL_OW 12
1399: PUSH
1400: LD_INT 4
1402: PPUSH
1403: LD_INT 5
1405: PPUSH
1406: CALL_OW 12
1410: PUSH
1411: LD_INT 3
1413: PPUSH
1414: LD_INT 4
1416: PPUSH
1417: CALL_OW 12
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: LIST
1426: PUSH
1427: LD_OWVAR 67
1431: ARRAY
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_INT 1
1438: PPUSH
1439: LD_INT 1
1441: PPUSH
1442: EMPTY
1443: PPUSH
1444: EMPTY
1445: PPUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 4
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: PPUSH
1460: LD_INT 3
1462: PPUSH
1463: CALL 9297 0 11
// end ; end_of_file
1467: LD_VAR 0 1
1471: RET
// export function PrepareRussianCommander ; begin
1472: LD_INT 0
1474: PPUSH
// uc_side = 3 ;
1475: LD_ADDR_OWVAR 20
1479: PUSH
1480: LD_INT 3
1482: ST_TO_ADDR
// uc_nation = 3 ;
1483: LD_ADDR_OWVAR 21
1487: PUSH
1488: LD_INT 3
1490: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
1491: LD_ADDR_EXP 19
1495: PUSH
1496: LD_STRING Borodin
1498: PPUSH
1499: CALL_OW 25
1503: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
1504: LD_EXP 19
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// end ;
1519: LD_VAR 0 1
1523: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
// for i = 1 to 10 do
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: DOUBLE
1536: LD_INT 1
1538: DEC
1539: ST_TO_ADDR
1540: LD_INT 10
1542: PUSH
1543: FOR_TO
1544: IFFALSE 1618
// begin uc_side = 6 ;
1546: LD_ADDR_OWVAR 20
1550: PUSH
1551: LD_INT 6
1553: ST_TO_ADDR
// uc_nation = 3 ;
1554: LD_ADDR_OWVAR 21
1558: PUSH
1559: LD_INT 3
1561: ST_TO_ADDR
// hc_gallery =  ;
1562: LD_ADDR_OWVAR 33
1566: PUSH
1567: LD_STRING 
1569: ST_TO_ADDR
// hc_name =  ;
1570: LD_ADDR_OWVAR 26
1574: PUSH
1575: LD_STRING 
1577: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un = CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 1
1608: PPUSH
1609: LD_INT 0
1611: PPUSH
1612: CALL_OW 49
// end ;
1616: GO 1543
1618: POP
1619: POP
// for i = 1 to 2 do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: DOUBLE
1626: LD_INT 1
1628: DEC
1629: ST_TO_ADDR
1630: LD_INT 2
1632: PUSH
1633: FOR_TO
1634: IFFALSE 1787
// begin uc_side = 6 ;
1636: LD_ADDR_OWVAR 20
1640: PUSH
1641: LD_INT 6
1643: ST_TO_ADDR
// uc_nation = 3 ;
1644: LD_ADDR_OWVAR 21
1648: PUSH
1649: LD_INT 3
1651: ST_TO_ADDR
// vc_engine = 1 ;
1652: LD_ADDR_OWVAR 39
1656: PUSH
1657: LD_INT 1
1659: ST_TO_ADDR
// vc_control = 1 ;
1660: LD_ADDR_OWVAR 38
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ;
1668: LD_ADDR_OWVAR 40
1672: PUSH
1673: LD_INT 42
1675: PUSH
1676: LD_INT 43
1678: PUSH
1679: LD_INT 44
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: CALL_OW 12
1697: ARRAY
1698: ST_TO_ADDR
// vc_chassis = 22 ;
1699: LD_ADDR_OWVAR 37
1703: PUSH
1704: LD_INT 22
1706: ST_TO_ADDR
// veh = CreateVehicle ;
1707: LD_ADDR_VAR 0 4
1711: PUSH
1712: CALL_OW 45
1716: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
1717: LD_VAR 0 4
1721: PPUSH
1722: LD_INT 2
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// hc_gallery =  ;
1732: LD_ADDR_OWVAR 33
1736: PUSH
1737: LD_STRING 
1739: ST_TO_ADDR
// hc_name =  ;
1740: LD_ADDR_OWVAR 26
1744: PUSH
1745: LD_STRING 
1747: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
1748: LD_INT 0
1750: PPUSH
1751: LD_INT 3
1753: PPUSH
1754: LD_INT 4
1756: PPUSH
1757: CALL_OW 380
// un = CreateHuman ;
1761: LD_ADDR_VAR 0 3
1765: PUSH
1766: CALL_OW 44
1770: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1771: LD_VAR 0 3
1775: PPUSH
1776: LD_VAR 0 4
1780: PPUSH
1781: CALL_OW 52
// end ;
1785: GO 1633
1787: POP
1788: POP
// end ;
1789: LD_VAR 0 1
1793: RET
// export function PrepareRussians ; var i , un ; begin
1794: LD_INT 0
1796: PPUSH
1797: PPUSH
1798: PPUSH
// for i = 1 to 14 do
1799: LD_ADDR_VAR 0 2
1803: PUSH
1804: DOUBLE
1805: LD_INT 1
1807: DEC
1808: ST_TO_ADDR
1809: LD_INT 14
1811: PUSH
1812: FOR_TO
1813: IFFALSE 1899
// begin uc_side = 3 ;
1815: LD_ADDR_OWVAR 20
1819: PUSH
1820: LD_INT 3
1822: ST_TO_ADDR
// uc_nation = 3 ;
1823: LD_ADDR_OWVAR 21
1827: PUSH
1828: LD_INT 3
1830: ST_TO_ADDR
// hc_gallery =  ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// hc_name =  ;
1839: LD_ADDR_OWVAR 26
1843: PUSH
1844: LD_STRING 
1846: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1847: LD_INT 0
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_EXP 20
1857: PPUSH
1858: LD_EXP 21
1862: PPUSH
1863: CALL_OW 12
1867: PPUSH
1868: CALL_OW 380
// un = CreateHuman ;
1872: LD_ADDR_VAR 0 3
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1882: LD_VAR 0 3
1886: PPUSH
1887: LD_INT 3
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// end ;
1897: GO 1812
1899: POP
1900: POP
// for i = 1 to 6 do
1901: LD_ADDR_VAR 0 2
1905: PUSH
1906: DOUBLE
1907: LD_INT 1
1909: DEC
1910: ST_TO_ADDR
1911: LD_INT 6
1913: PUSH
1914: FOR_TO
1915: IFFALSE 2001
// begin uc_side = 3 ;
1917: LD_ADDR_OWVAR 20
1921: PUSH
1922: LD_INT 3
1924: ST_TO_ADDR
// uc_nation = 3 ;
1925: LD_ADDR_OWVAR 21
1929: PUSH
1930: LD_INT 3
1932: ST_TO_ADDR
// hc_gallery =  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// hc_name =  ;
1941: LD_ADDR_OWVAR 26
1945: PUSH
1946: LD_STRING 
1948: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1949: LD_INT 0
1951: PPUSH
1952: LD_INT 2
1954: PPUSH
1955: LD_EXP 20
1959: PPUSH
1960: LD_EXP 21
1964: PPUSH
1965: CALL_OW 12
1969: PPUSH
1970: CALL_OW 380
// un = CreateHuman ;
1974: LD_ADDR_VAR 0 3
1978: PUSH
1979: CALL_OW 44
1983: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_INT 3
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 49
// end ;
1999: GO 1914
2001: POP
2002: POP
// for i = 1 to 6 do
2003: LD_ADDR_VAR 0 2
2007: PUSH
2008: DOUBLE
2009: LD_INT 1
2011: DEC
2012: ST_TO_ADDR
2013: LD_INT 6
2015: PUSH
2016: FOR_TO
2017: IFFALSE 2103
// begin uc_side = 3 ;
2019: LD_ADDR_OWVAR 20
2023: PUSH
2024: LD_INT 3
2026: ST_TO_ADDR
// uc_nation = 3 ;
2027: LD_ADDR_OWVAR 21
2031: PUSH
2032: LD_INT 3
2034: ST_TO_ADDR
// hc_gallery =  ;
2035: LD_ADDR_OWVAR 33
2039: PUSH
2040: LD_STRING 
2042: ST_TO_ADDR
// hc_name =  ;
2043: LD_ADDR_OWVAR 26
2047: PUSH
2048: LD_STRING 
2050: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: LD_EXP 20
2061: PPUSH
2062: LD_EXP 21
2066: PPUSH
2067: CALL_OW 12
2071: PPUSH
2072: CALL_OW 380
// un = CreateHuman ;
2076: LD_ADDR_VAR 0 3
2080: PUSH
2081: CALL_OW 44
2085: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2086: LD_VAR 0 3
2090: PPUSH
2091: LD_INT 3
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// end ;
2101: GO 2016
2103: POP
2104: POP
// for i = 1 to 4 do
2105: LD_ADDR_VAR 0 2
2109: PUSH
2110: DOUBLE
2111: LD_INT 1
2113: DEC
2114: ST_TO_ADDR
2115: LD_INT 4
2117: PUSH
2118: FOR_TO
2119: IFFALSE 2205
// begin uc_side = 3 ;
2121: LD_ADDR_OWVAR 20
2125: PUSH
2126: LD_INT 3
2128: ST_TO_ADDR
// uc_nation = 3 ;
2129: LD_ADDR_OWVAR 21
2133: PUSH
2134: LD_INT 3
2136: ST_TO_ADDR
// hc_gallery =  ;
2137: LD_ADDR_OWVAR 33
2141: PUSH
2142: LD_STRING 
2144: ST_TO_ADDR
// hc_name =  ;
2145: LD_ADDR_OWVAR 26
2149: PUSH
2150: LD_STRING 
2152: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2153: LD_INT 0
2155: PPUSH
2156: LD_INT 4
2158: PPUSH
2159: LD_EXP 20
2163: PPUSH
2164: LD_EXP 21
2168: PPUSH
2169: CALL_OW 12
2173: PPUSH
2174: CALL_OW 380
// un = CreateHuman ;
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: CALL_OW 44
2187: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 49
// end ;
2203: GO 2118
2205: POP
2206: POP
// end ; end_of_file
2207: LD_VAR 0 1
2211: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2212: LD_INT 0
2214: PPUSH
2215: PPUSH
// if exist_mode then
2216: LD_VAR 0 2
2220: IFFALSE 2239
// unit := CreateCharacter ( ident ) else
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: LD_VAR 0 1
2231: PPUSH
2232: CALL_OW 34
2236: ST_TO_ADDR
2237: GO 2254
// unit := NewCharacter ( ident ) ;
2239: LD_ADDR_VAR 0 4
2243: PUSH
2244: LD_VAR 0 1
2248: PPUSH
2249: CALL_OW 25
2253: ST_TO_ADDR
// result := unit ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_VAR 0 4
2263: ST_TO_ADDR
// end ;
2264: LD_VAR 0 3
2268: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2269: LD_INT 0
2271: PPUSH
2272: PPUSH
2273: PPUSH
// rnd = rand ( 1 , characters ) ;
2274: LD_ADDR_VAR 0 6
2278: PUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 1
2286: PPUSH
2287: CALL_OW 12
2291: ST_TO_ADDR
// for i = 1 to characters do
2292: LD_ADDR_VAR 0 5
2296: PUSH
2297: DOUBLE
2298: LD_INT 1
2300: DEC
2301: ST_TO_ADDR
2302: LD_VAR 0 1
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2418
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
2310: LD_VAR 0 5
2314: PUSH
2315: LD_VAR 0 6
2319: EQUAL
2320: PUSH
2321: LD_VAR 0 1
2325: PUSH
2326: LD_VAR 0 5
2330: ARRAY
2331: PPUSH
2332: CALL_OW 258
2336: PUSH
2337: LD_INT 1
2339: EQUAL
2340: AND
2341: IFFALSE 2363
// Say ( characters [ i ] , dialogMID ) ;
2343: LD_VAR 0 1
2347: PUSH
2348: LD_VAR 0 5
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 2
2358: PPUSH
2359: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
2363: LD_VAR 0 5
2367: PUSH
2368: LD_VAR 0 6
2372: EQUAL
2373: PUSH
2374: LD_VAR 0 1
2378: PUSH
2379: LD_VAR 0 5
2383: ARRAY
2384: PPUSH
2385: CALL_OW 258
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: AND
2394: IFFALSE 2416
// Say ( characters [ i ] , dialogFID ) ;
2396: LD_VAR 0 1
2400: PUSH
2401: LD_VAR 0 5
2405: ARRAY
2406: PPUSH
2407: LD_VAR 0 3
2411: PPUSH
2412: CALL_OW 88
// end ;
2416: GO 2307
2418: POP
2419: POP
// end ;
2420: LD_VAR 0 4
2424: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
2425: LD_INT 0
2427: PPUSH
2428: PPUSH
2429: PPUSH
// uc_side := GetSide ( b ) ;
2430: LD_ADDR_OWVAR 20
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL_OW 255
2444: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
2445: LD_ADDR_OWVAR 21
2449: PUSH
2450: LD_VAR 0 2
2454: PPUSH
2455: CALL_OW 248
2459: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2460: LD_INT 0
2462: PPUSH
2463: LD_INT 1
2465: PPUSH
2466: LD_VAR 0 1
2470: PPUSH
2471: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
2475: LD_ADDR_VAR 0 5
2479: PUSH
2480: LD_VAR 0 2
2484: PPUSH
2485: CALL_OW 254
2489: PUSH
2490: LD_INT 3
2492: MINUS
2493: ST_TO_ADDR
// if dir < 0 then
2494: LD_VAR 0 5
2498: PUSH
2499: LD_INT 0
2501: LESS
2502: IFFALSE 2518
// dir := 6 + dir ;
2504: LD_ADDR_VAR 0 5
2508: PUSH
2509: LD_INT 6
2511: PUSH
2512: LD_VAR 0 5
2516: PLUS
2517: ST_TO_ADDR
// un := CreateHuman ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: CALL_OW 44
2527: ST_TO_ADDR
// SetDir ( un , dir ) ;
2528: LD_VAR 0 4
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_VAR 0 2
2551: PPUSH
2552: CALL_OW 52
// end ;
2556: LD_VAR 0 3
2560: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
2561: LD_INT 0
2563: PPUSH
2564: PPUSH
2565: PPUSH
2566: PPUSH
// for i = 1 to count do
2567: LD_ADDR_VAR 0 8
2571: PUSH
2572: DOUBLE
2573: LD_INT 1
2575: DEC
2576: ST_TO_ADDR
2577: LD_VAR 0 6
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2664
// begin uc_side = side ;
2585: LD_ADDR_OWVAR 20
2589: PUSH
2590: LD_VAR 0 1
2594: ST_TO_ADDR
// uc_nation = nation ;
2595: LD_ADDR_OWVAR 21
2599: PUSH
2600: LD_VAR 0 2
2604: ST_TO_ADDR
// hc_gallery =  ;
2605: LD_ADDR_OWVAR 33
2609: PUSH
2610: LD_STRING 
2612: ST_TO_ADDR
// hc_name =  ;
2613: LD_ADDR_OWVAR 26
2617: PUSH
2618: LD_STRING 
2620: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
2621: LD_INT 0
2623: PPUSH
2624: LD_VAR 0 5
2628: PPUSH
2629: LD_VAR 0 4
2633: PPUSH
2634: CALL_OW 380
// un = CreateHuman ;
2638: LD_ADDR_VAR 0 10
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
2648: LD_VAR 0 10
2652: PPUSH
2653: LD_VAR 0 3
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2582
2664: POP
2665: POP
// end ;
2666: LD_VAR 0 7
2670: RET
// export function PrepareDifficulty ; begin
2671: LD_INT 0
2673: PPUSH
// if Difficulty = 1 then
2674: LD_OWVAR 67
2678: PUSH
2679: LD_INT 1
2681: EQUAL
2682: IFFALSE 2700
// begin RuSolMinLevel = 4 ;
2684: LD_ADDR_EXP 20
2688: PUSH
2689: LD_INT 4
2691: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
2692: LD_ADDR_EXP 21
2696: PUSH
2697: LD_INT 6
2699: ST_TO_ADDR
// end ; if Difficulty = 2 then
2700: LD_OWVAR 67
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: IFFALSE 2739
// begin RuSolMinLevel = 5 ;
2710: LD_ADDR_EXP 20
2714: PUSH
2715: LD_INT 5
2717: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
2718: LD_ADDR_EXP 21
2722: PUSH
2723: LD_INT 6
2725: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
2726: LD_INT 57
2728: PPUSH
2729: LD_INT 3
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: CALL_OW 322
// end ; if Difficulty = 3 then
2739: LD_OWVAR 67
2743: PUSH
2744: LD_INT 3
2746: EQUAL
2747: IFFALSE 2791
// begin RuSolMinLevel = 6 ;
2749: LD_ADDR_EXP 20
2753: PUSH
2754: LD_INT 6
2756: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
2757: LD_ADDR_EXP 21
2761: PUSH
2762: LD_INT 7
2764: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
2765: LD_INT 57
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2778: LD_INT 52
2780: PPUSH
2781: LD_INT 3
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 322
// end ; end ;
2791: LD_VAR 0 1
2795: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
2796: LD_INT 0
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
2802: LD_ADDR_VAR 0 3
2806: PUSH
2807: LD_INT 22
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 25
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PPUSH
2831: CALL_OW 69
2835: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 90 , 86 , 3 ] , [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
2836: LD_ADDR_VAR 0 4
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: LD_INT 90
2846: PUSH
2847: LD_INT 86
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 75
2864: PUSH
2865: LD_INT 79
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 4
2879: PUSH
2880: LD_INT 113
2882: PUSH
2883: LD_INT 94
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 29
2897: PUSH
2898: LD_INT 106
2900: PUSH
2901: LD_INT 97
2903: PUSH
2904: LD_INT 3
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 26
2915: PUSH
2916: LD_INT 93
2918: PUSH
2919: LD_INT 97
2921: PUSH
2922: LD_INT 5
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: LD_INT 100
2936: PUSH
2937: LD_INT 89
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_INT 17
2951: PUSH
2952: LD_INT 96
2954: PUSH
2955: LD_INT 89
2957: PUSH
2958: LD_INT 1
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 32
2969: PUSH
2970: LD_INT 78
2972: PUSH
2973: LD_INT 94
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 32
2987: PUSH
2988: LD_INT 95
2990: PUSH
2991: LD_INT 82
2993: PUSH
2994: LD_INT 3
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: PUSH
3003: LD_INT 32
3005: PUSH
3006: LD_INT 104
3008: PUSH
3009: LD_INT 85
3011: PUSH
3012: LD_INT 2
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 32
3023: PUSH
3024: LD_INT 81
3026: PUSH
3027: LD_INT 78
3029: PUSH
3030: LD_INT 2
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 33
3041: PUSH
3042: LD_INT 109
3044: PUSH
3045: LD_INT 90
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 33
3059: PUSH
3060: LD_INT 88
3062: PUSH
3063: LD_INT 79
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 33
3077: PUSH
3078: LD_INT 76
3080: PUSH
3081: LD_INT 87
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 26
3095: PUSH
3096: LD_INT 96
3098: PUSH
3099: LD_INT 97
3101: PUSH
3102: LD_INT 5
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: PUSH
3111: LD_INT 26
3113: PUSH
3114: LD_INT 85
3116: PUSH
3117: LD_INT 84
3119: PUSH
3120: LD_INT 2
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: LD_INT 88
3134: PUSH
3135: LD_INT 95
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 19
3149: PUSH
3150: LD_INT 103
3152: PUSH
3153: LD_INT 89
3155: PUSH
3156: LD_INT 4
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: PUSH
3165: LD_INT 16
3167: PUSH
3168: LD_INT 97
3170: PUSH
3171: LD_INT 86
3173: PUSH
3174: LD_INT 2
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: PUSH
3183: LD_INT 24
3185: PUSH
3186: LD_INT 100
3188: PUSH
3189: LD_INT 85
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: ST_TO_ADDR
// for i := 1 to buildingsTab do
3223: LD_ADDR_VAR 0 2
3227: PUSH
3228: DOUBLE
3229: LD_INT 1
3231: DEC
3232: ST_TO_ADDR
3233: LD_VAR 0 4
3237: PUSH
3238: FOR_TO
3239: IFFALSE 3312
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
3241: LD_VAR 0 3
3245: PPUSH
3246: LD_VAR 0 4
3250: PUSH
3251: LD_VAR 0 2
3255: ARRAY
3256: PUSH
3257: LD_INT 1
3259: ARRAY
3260: PPUSH
3261: LD_VAR 0 4
3265: PUSH
3266: LD_VAR 0 2
3270: ARRAY
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: LD_VAR 0 4
3280: PUSH
3281: LD_VAR 0 2
3285: ARRAY
3286: PUSH
3287: LD_INT 3
3289: ARRAY
3290: PPUSH
3291: LD_VAR 0 4
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_INT 4
3304: ARRAY
3305: PPUSH
3306: CALL_OW 205
3310: GO 3238
3312: POP
3313: POP
// end ;
3314: LD_VAR 0 1
3318: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
3319: LD_INT 0
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
// for i = 1 to 72 do
3325: LD_ADDR_VAR 0 5
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 72
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3397
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
3341: LD_VAR 0 5
3345: PPUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 321
3355: PUSH
3356: LD_INT 1
3358: EQUAL
3359: PUSH
3360: LD_VAR 0 5
3364: PPUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: CALL_OW 482
3374: PUSH
3375: LD_INT 1
3377: EQUAL
3378: AND
3379: IFFALSE 3395
// AddComResearch ( lab , i ) ;
3381: LD_VAR 0 2
3385: PPUSH
3386: LD_VAR 0 5
3390: PPUSH
3391: CALL_OW 184
3395: GO 3338
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 4
3403: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
3413: LD_ADDR_VAR 0 6
3417: PUSH
3418: LD_INT 22
3420: PUSH
3421: LD_VAR 0 1
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 25
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 56
3442: PUSH
3443: EMPTY
3444: LIST
3445: PUSH
3446: LD_INT 24
3448: PUSH
3449: LD_INT 700
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: PPUSH
3462: CALL_OW 69
3466: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
3467: LD_ADDR_VAR 0 7
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_VAR 0 1
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 32
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 58
3496: PUSH
3497: EMPTY
3498: LIST
3499: PUSH
3500: LD_INT 24
3502: PUSH
3503: LD_INT 251
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PPUSH
3516: CALL_OW 69
3520: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
3521: LD_ADDR_VAR 0 9
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: LD_VAR 0 1
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 30
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 24
3568: PUSH
3569: LD_INT 251
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PPUSH
3581: CALL_OW 69
3585: ST_TO_ADDR
// if barrackList > 0 then
3586: LD_VAR 0 9
3590: PUSH
3591: LD_INT 0
3593: GREATER
3594: IFFALSE 3683
// begin if turretList = 0 then
3596: LD_VAR 0 7
3600: PUSH
3601: LD_INT 0
3603: EQUAL
3604: IFFALSE 3643
// begin for i in soldiers_list do
3606: LD_ADDR_VAR 0 4
3610: PUSH
3611: LD_VAR 0 6
3615: PUSH
3616: FOR_IN
3617: IFFALSE 3639
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
3619: LD_VAR 0 4
3623: PPUSH
3624: LD_VAR 0 9
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PPUSH
3633: CALL_OW 120
3637: GO 3616
3639: POP
3640: POP
// end else
3641: GO 3683
// begin for i in barrackList do
3643: LD_ADDR_VAR 0 4
3647: PUSH
3648: LD_VAR 0 9
3652: PUSH
3653: FOR_IN
3654: IFFALSE 3681
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
3656: LD_VAR 0 4
3660: PPUSH
3661: CALL_OW 313
3665: PPUSH
3666: LD_VAR 0 7
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: CALL_OW 120
// end ;
3679: GO 3653
3681: POP
3682: POP
// end ; end ; end ;
3683: LD_VAR 0 3
3687: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
3695: LD_ADDR_VAR 0 6
3699: PUSH
3700: LD_INT 22
3702: PUSH
3703: LD_VAR 0 1
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 2
3714: PUSH
3715: LD_INT 25
3717: PUSH
3718: LD_INT 2
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PUSH
3725: LD_INT 25
3727: PUSH
3728: LD_INT 16
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 24
3742: PUSH
3743: LD_INT 1000
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: PPUSH
3755: CALL_OW 69
3759: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3760: LD_ADDR_VAR 0 4
3764: PUSH
3765: LD_INT 22
3767: PUSH
3768: LD_VAR 0 1
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 21
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 3
3789: PUSH
3790: LD_INT 24
3792: PUSH
3793: LD_INT 1000
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: EMPTY
3810: LIST
3811: PPUSH
3812: CALL_OW 69
3816: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
3817: LD_VAR 0 4
3821: PUSH
3822: LD_INT 0
3824: GREATER
3825: PUSH
3826: LD_VAR 0 6
3830: PUSH
3831: LD_INT 0
3833: GREATER
3834: AND
3835: IFFALSE 3901
// begin for i in engineerOk_list do
3837: LD_ADDR_VAR 0 5
3841: PUSH
3842: LD_VAR 0 6
3846: PUSH
3847: FOR_IN
3848: IFFALSE 3899
// begin for j in buildings_list do
3850: LD_ADDR_VAR 0 7
3854: PUSH
3855: LD_VAR 0 4
3859: PUSH
3860: FOR_IN
3861: IFFALSE 3895
// begin AddComExitBuilding ( i ) ;
3863: LD_VAR 0 5
3867: PPUSH
3868: CALL_OW 182
// wait ( 0 0$1 ) ;
3872: LD_INT 35
3874: PPUSH
3875: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
3879: LD_VAR 0 5
3883: PPUSH
3884: LD_VAR 0 7
3888: PPUSH
3889: CALL_OW 190
// end ;
3893: GO 3860
3895: POP
3896: POP
// end ;
3897: GO 3847
3899: POP
3900: POP
// end ; if buildings_list = 0 then
3901: LD_VAR 0 4
3905: PUSH
3906: LD_INT 0
3908: EQUAL
3909: IFFALSE 3942
// begin for i in engineerOK_list do
3911: LD_ADDR_VAR 0 5
3915: PUSH
3916: LD_VAR 0 6
3920: PUSH
3921: FOR_IN
3922: IFFALSE 3940
// begin ComEnterUnit ( i , building ) ;
3924: LD_VAR 0 5
3928: PPUSH
3929: LD_VAR 0 2
3933: PPUSH
3934: CALL_OW 120
// end ;
3938: GO 3921
3940: POP
3941: POP
// end ; end ;
3942: LD_VAR 0 3
3946: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
3951: LD_INT 22
3953: PUSH
3954: LD_VAR 0 1
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 25
3965: PUSH
3966: LD_INT 2
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: PUSH
3982: LD_INT 0
3984: GREATER
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_VAR 0 1
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: LD_INT 24
4013: PUSH
4014: LD_INT 1000
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: LD_INT 0
4037: EQUAL
4038: AND
4039: PUSH
4040: LD_VAR 0 2
4044: PUSH
4045: LD_INT 0
4047: GREATER
4048: AND
4049: IFFALSE 4148
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
4051: LD_ADDR_VAR 0 4
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_VAR 0 1
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 25
4070: PUSH
4071: LD_INT 2
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PUSH
4087: FOR_IN
4088: IFFALSE 4146
// begin AddComExitBuilding ( i ) ;
4090: LD_VAR 0 4
4094: PPUSH
4095: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
4099: LD_VAR 0 4
4103: PPUSH
4104: LD_VAR 0 2
4108: PUSH
4109: LD_INT 1
4111: ARRAY
4112: PPUSH
4113: LD_VAR 0 2
4117: PUSH
4118: LD_INT 2
4120: ARRAY
4121: PPUSH
4122: LD_VAR 0 2
4126: PUSH
4127: LD_INT 3
4129: ARRAY
4130: PPUSH
4131: LD_VAR 0 2
4135: PUSH
4136: LD_INT 4
4138: ARRAY
4139: PPUSH
4140: CALL_OW 205
// end ;
4144: GO 4087
4146: POP
4147: POP
// end ; end ;
4148: LD_VAR 0 3
4152: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4153: LD_INT 0
4155: PPUSH
4156: PPUSH
4157: PPUSH
4158: PPUSH
4159: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4160: LD_ADDR_VAR 0 6
4164: PUSH
4165: LD_INT 22
4167: PUSH
4168: LD_VAR 0 1
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: LD_INT 25
4179: PUSH
4180: LD_INT 4
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PPUSH
4191: CALL_OW 69
4195: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4196: LD_ADDR_VAR 0 9
4200: PUSH
4201: LD_VAR 0 3
4205: PPUSH
4206: LD_INT 22
4208: PUSH
4209: LD_VAR 0 1
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: LD_INT 1
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: LD_INT 24
4233: PUSH
4234: LD_INT 750
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: PPUSH
4250: CALL_OW 70
4254: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
4255: LD_VAR 0 9
4259: PUSH
4260: LD_INT 0
4262: GREATER
4263: PUSH
4264: LD_VAR 0 6
4268: PUSH
4269: LD_INT 0
4271: GREATER
4272: AND
4273: IFFALSE 4400
// begin for i = 1 to damageUnits do
4275: LD_ADDR_VAR 0 7
4279: PUSH
4280: DOUBLE
4281: LD_INT 1
4283: DEC
4284: ST_TO_ADDR
4285: LD_VAR 0 9
4289: PUSH
4290: FOR_TO
4291: IFFALSE 4315
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
4293: LD_VAR 0 9
4297: PUSH
4298: LD_VAR 0 7
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 113
4313: GO 4290
4315: POP
4316: POP
// for i in sci_list do
4317: LD_ADDR_VAR 0 7
4321: PUSH
4322: LD_VAR 0 6
4326: PUSH
4327: FOR_IN
4328: IFFALSE 4396
// begin ComExitBuilding ( i ) ;
4330: LD_VAR 0 7
4334: PPUSH
4335: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
4339: LD_ADDR_VAR 0 8
4343: PUSH
4344: LD_VAR 0 2
4348: PPUSH
4349: LD_INT 22
4351: PUSH
4352: LD_VAR 0 1
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PPUSH
4361: CALL_OW 70
4365: PUSH
4366: FOR_IN
4367: IFFALSE 4392
// begin AddComHeal ( i , j ) ;
4369: LD_VAR 0 7
4373: PPUSH
4374: LD_VAR 0 8
4378: PPUSH
4379: CALL_OW 188
// wait ( 1 1$0 ) ;
4383: LD_INT 2100
4385: PPUSH
4386: CALL_OW 67
// end ;
4390: GO 4366
4392: POP
4393: POP
// end ;
4394: GO 4327
4396: POP
4397: POP
// end else
4398: GO 4414
// begin AddComEnterUnit ( sci_list , build ) ;
4400: LD_VAR 0 6
4404: PPUSH
4405: LD_VAR 0 4
4409: PPUSH
4410: CALL_OW 180
// end ; end ;
4414: LD_VAR 0 5
4418: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
4419: LD_INT 0
4421: PPUSH
4422: PPUSH
4423: PPUSH
4424: PPUSH
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
4429: PPUSH
4430: PPUSH
4431: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
4432: LD_ADDR_VAR 0 9
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_VAR 0 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 21
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_INT 33
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 24
4471: PUSH
4472: LD_INT 660
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: LD_INT 3
4481: PUSH
4482: LD_INT 58
4484: PUSH
4485: EMPTY
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 3
4494: PUSH
4495: LD_INT 34
4497: PUSH
4498: LD_INT 53
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
4522: LD_ADDR_VAR 0 10
4526: PUSH
4527: LD_INT 22
4529: PUSH
4530: LD_VAR 0 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 21
4541: PUSH
4542: LD_INT 2
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: LD_INT 33
4551: PUSH
4552: LD_INT 1
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 3
4561: PUSH
4562: LD_INT 24
4564: PUSH
4565: LD_INT 660
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 69
4586: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4587: LD_ADDR_VAR 0 11
4591: PUSH
4592: LD_VAR 0 2
4596: PPUSH
4597: LD_INT 22
4599: PUSH
4600: LD_VAR 0 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_INT 21
4611: PUSH
4612: LD_INT 2
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 33
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 24
4634: PUSH
4635: LD_INT 1000
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: PPUSH
4652: CALL_OW 70
4656: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
4657: LD_ADDR_VAR 0 12
4661: PUSH
4662: LD_VAR 0 2
4666: PPUSH
4667: LD_INT 22
4669: PUSH
4670: LD_VAR 0 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 21
4681: PUSH
4682: LD_INT 2
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 33
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 24
4701: PUSH
4702: LD_INT 1000
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 58
4711: PUSH
4712: EMPTY
4713: LIST
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 34
4720: PUSH
4721: LD_INT 53
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 70
4744: ST_TO_ADDR
// mechanicInside_list = [ ] ;
4745: LD_ADDR_VAR 0 13
4749: PUSH
4750: EMPTY
4751: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
4752: LD_ADDR_VAR 0 14
4756: PUSH
4757: LD_VAR 0 2
4761: PPUSH
4762: LD_INT 22
4764: PUSH
4765: LD_VAR 0 1
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 25
4776: PUSH
4777: LD_INT 3
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PPUSH
4788: CALL_OW 70
4792: ST_TO_ADDR
// if damageVehicle_list > 0 then
4793: LD_VAR 0 10
4797: PUSH
4798: LD_INT 0
4800: GREATER
4801: IFFALSE 4839
// begin for i in damageVehicle_list do
4803: LD_ADDR_VAR 0 7
4807: PUSH
4808: LD_VAR 0 10
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4837
// begin ComMoveXY ( i , repX , repY ) ;
4816: LD_VAR 0 7
4820: PPUSH
4821: LD_VAR 0 3
4825: PPUSH
4826: LD_VAR 0 4
4830: PPUSH
4831: CALL_OW 111
// end ;
4835: GO 4813
4837: POP
4838: POP
// end ; if vehicleNeedRepair_list > 0 then
4839: LD_VAR 0 11
4843: PUSH
4844: LD_INT 0
4846: GREATER
4847: IFFALSE 4934
// begin for i in vehicleNeedRepair_list do
4849: LD_ADDR_VAR 0 7
4853: PUSH
4854: LD_VAR 0 11
4858: PUSH
4859: FOR_IN
4860: IFFALSE 4932
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
4862: LD_ADDR_VAR 0 13
4866: PUSH
4867: LD_VAR 0 13
4871: PUSH
4872: LD_VAR 0 7
4876: PPUSH
4877: CALL_OW 313
4881: ADD
4882: ST_TO_ADDR
// for j in mechanicInside_list do
4883: LD_ADDR_VAR 0 8
4887: PUSH
4888: LD_VAR 0 13
4892: PUSH
4893: FOR_IN
4894: IFFALSE 4928
// begin ComExitVehicle ( i ) ;
4896: LD_VAR 0 7
4900: PPUSH
4901: CALL_OW 121
// wait ( 0 0$1 ) ;
4905: LD_INT 35
4907: PPUSH
4908: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
4912: LD_VAR 0 7
4916: PPUSH
4917: LD_VAR 0 8
4921: PPUSH
4922: CALL_OW 129
// end ;
4926: GO 4893
4928: POP
4929: POP
// end ;
4930: GO 4859
4932: POP
4933: POP
// end ; if vehicleDontNeedRepair_list > 0 then
4934: LD_VAR 0 12
4938: PUSH
4939: LD_INT 0
4941: GREATER
4942: IFFALSE 4982
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
4944: LD_VAR 0 14
4948: PUSH
4949: LD_INT 1
4951: ARRAY
4952: PPUSH
4953: LD_VAR 0 12
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: PPUSH
4962: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
4966: LD_VAR 0 12
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PPUSH
4975: LD_INT 100
4977: PPUSH
4978: CALL_OW 240
// end ; if vehicleOK_list > 0 then
4982: LD_VAR 0 9
4986: PUSH
4987: LD_INT 0
4989: GREATER
4990: IFFALSE 5181
// begin for i in vehicleOK_list do
4992: LD_ADDR_VAR 0 7
4996: PUSH
4997: LD_VAR 0 9
5001: PUSH
5002: FOR_IN
5003: IFFALSE 5179
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5005: LD_ADDR_VAR 0 15
5009: PUSH
5010: LD_INT 22
5012: PUSH
5013: LD_VAR 0 5
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PPUSH
5022: CALL_OW 69
5026: PPUSH
5027: LD_VAR 0 7
5031: PPUSH
5032: CALL_OW 74
5036: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5037: LD_ADDR_VAR 0 16
5041: PUSH
5042: LD_INT 22
5044: PUSH
5045: LD_VAR 0 5
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 59
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: LD_INT 21
5065: PUSH
5066: LD_INT 1
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 21
5075: PUSH
5076: LD_INT 2
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: PPUSH
5096: CALL_OW 69
5100: PPUSH
5101: LD_VAR 0 7
5105: PPUSH
5106: CALL_OW 74
5110: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5111: LD_VAR 0 7
5115: PPUSH
5116: LD_VAR 0 15
5120: PPUSH
5121: CALL_OW 296
5125: PUSH
5126: LD_INT 8
5128: PLUS
5129: PUSH
5130: LD_VAR 0 7
5134: PPUSH
5135: LD_VAR 0 16
5139: PPUSH
5140: CALL_OW 296
5144: LESS
5145: IFFALSE 5163
// begin ComAttackUnit ( i , target1 ) ;
5147: LD_VAR 0 7
5151: PPUSH
5152: LD_VAR 0 15
5156: PPUSH
5157: CALL_OW 115
// end else
5161: GO 5177
// begin ComAttackUnit ( i , target2 ) ;
5163: LD_VAR 0 7
5167: PPUSH
5168: LD_VAR 0 16
5172: PPUSH
5173: CALL_OW 115
// end ; end ;
5177: GO 5002
5179: POP
5180: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
5181: LD_ADDR_VAR 0 7
5185: PUSH
5186: LD_VAR 0 2
5190: PPUSH
5191: LD_INT 22
5193: PUSH
5194: LD_VAR 0 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 25
5205: PUSH
5206: LD_INT 3
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 70
5221: NOT
5222: PUSH
5223: FOR_IN
5224: IFFALSE 5247
// ComMoveXY ( i , repX , repY ) ;
5226: LD_VAR 0 7
5230: PPUSH
5231: LD_VAR 0 3
5235: PPUSH
5236: LD_VAR 0 4
5240: PPUSH
5241: CALL_OW 111
5245: GO 5223
5247: POP
5248: POP
// end ;
5249: LD_VAR 0 6
5253: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5254: LD_INT 0
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5264: LD_INT 22
5266: PUSH
5267: LD_VAR 0 1
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: PUSH
5276: LD_INT 21
5278: PUSH
5279: LD_INT 2
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PPUSH
5290: CALL_OW 69
5294: PUSH
5295: LD_VAR 0 3
5299: LESSEQUAL
5300: IFFALSE 5367
// for i = 1 to vehCount do
5302: LD_ADDR_VAR 0 10
5306: PUSH
5307: DOUBLE
5308: LD_INT 1
5310: DEC
5311: ST_TO_ADDR
5312: LD_VAR 0 3
5316: PUSH
5317: FOR_TO
5318: IFFALSE 5365
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5320: LD_VAR 0 2
5324: PPUSH
5325: LD_VAR 0 8
5329: PPUSH
5330: LD_VAR 0 6
5334: PPUSH
5335: LD_VAR 0 7
5339: PPUSH
5340: LD_VAR 0 5
5344: PUSH
5345: LD_INT 1
5347: PPUSH
5348: LD_VAR 0 5
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: CALL_OW 185
5363: GO 5317
5365: POP
5366: POP
// repeat wait ( 0 0$1 ) ;
5367: LD_INT 35
5369: PPUSH
5370: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5374: LD_INT 22
5376: PUSH
5377: LD_VAR 0 1
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 21
5388: PUSH
5389: LD_INT 2
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 24
5398: PUSH
5399: LD_INT 250
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PPUSH
5411: CALL_OW 69
5415: PUSH
5416: LD_VAR 0 3
5420: GREATEREQUAL
5421: IFFALSE 5367
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5423: LD_INT 22
5425: PUSH
5426: LD_VAR 0 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 21
5437: PUSH
5438: LD_INT 2
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: PUSH
5445: LD_INT 24
5447: PUSH
5448: LD_INT 250
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 69
5464: PUSH
5465: LD_VAR 0 3
5469: GREATEREQUAL
5470: IFFALSE 5813
// begin repeat begin wait ( 0 0$1 ) ;
5472: LD_INT 35
5474: PPUSH
5475: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
5479: LD_INT 22
5481: PUSH
5482: LD_VAR 0 1
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 21
5493: PUSH
5494: LD_INT 2
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 24
5503: PUSH
5504: LD_INT 651
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 69
5520: PUSH
5521: LD_INT 0
5523: GREATER
5524: IFFALSE 5752
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5526: LD_ADDR_VAR 0 10
5530: PUSH
5531: LD_INT 22
5533: PUSH
5534: LD_VAR 0 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 21
5545: PUSH
5546: LD_INT 2
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: PUSH
5553: LD_INT 24
5555: PUSH
5556: LD_INT 651
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: PPUSH
5568: CALL_OW 69
5572: PUSH
5573: FOR_IN
5574: IFFALSE 5750
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5576: LD_ADDR_VAR 0 15
5580: PUSH
5581: LD_INT 22
5583: PUSH
5584: LD_VAR 0 4
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PPUSH
5598: LD_VAR 0 10
5602: PPUSH
5603: CALL_OW 74
5607: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5608: LD_ADDR_VAR 0 16
5612: PUSH
5613: LD_INT 22
5615: PUSH
5616: LD_VAR 0 4
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: LD_INT 59
5630: PUSH
5631: EMPTY
5632: LIST
5633: PUSH
5634: LD_INT 21
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 21
5646: PUSH
5647: LD_INT 2
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: EMPTY
5665: LIST
5666: PPUSH
5667: CALL_OW 69
5671: PPUSH
5672: LD_VAR 0 10
5676: PPUSH
5677: CALL_OW 74
5681: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5682: LD_VAR 0 10
5686: PPUSH
5687: LD_VAR 0 15
5691: PPUSH
5692: CALL_OW 296
5696: PUSH
5697: LD_INT 8
5699: PLUS
5700: PUSH
5701: LD_VAR 0 10
5705: PPUSH
5706: LD_VAR 0 16
5710: PPUSH
5711: CALL_OW 296
5715: LESS
5716: IFFALSE 5734
// begin ComAttackUnit ( i , target1 ) ;
5718: LD_VAR 0 10
5722: PPUSH
5723: LD_VAR 0 15
5727: PPUSH
5728: CALL_OW 115
// end else
5732: GO 5748
// begin ComAttackUnit ( i , target2 ) ;
5734: LD_VAR 0 10
5738: PPUSH
5739: LD_VAR 0 16
5743: PPUSH
5744: CALL_OW 115
// end ; end ;
5748: GO 5573
5750: POP
5751: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
5752: LD_INT 22
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PUSH
5764: LD_INT 21
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PPUSH
5778: CALL_OW 69
5782: PUSH
5783: LD_INT 0
5785: EQUAL
5786: PUSH
5787: LD_INT 22
5789: PUSH
5790: LD_VAR 0 4
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: PPUSH
5802: CALL_OW 69
5806: PUSH
5807: LD_INT 0
5809: EQUAL
5810: OR
5811: IFFALSE 5472
// end ; end ;
5813: LD_VAR 0 9
5817: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
5818: LD_INT 0
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
5824: PPUSH
5825: PPUSH
5826: PPUSH
5827: PPUSH
5828: PPUSH
5829: PPUSH
5830: PPUSH
// for i = 1 to medicCount do
5831: LD_ADDR_VAR 0 14
5835: PUSH
5836: DOUBLE
5837: LD_INT 1
5839: DEC
5840: ST_TO_ADDR
5841: LD_VAR 0 7
5845: PUSH
5846: FOR_TO
5847: IFFALSE 5929
// begin uc_side = side ;
5849: LD_ADDR_OWVAR 20
5853: PUSH
5854: LD_VAR 0 1
5858: ST_TO_ADDR
// uc_nation = nation ;
5859: LD_ADDR_OWVAR 21
5863: PUSH
5864: LD_VAR 0 2
5868: ST_TO_ADDR
// hc_name =  ;
5869: LD_ADDR_OWVAR 26
5873: PUSH
5874: LD_STRING 
5876: ST_TO_ADDR
// hc_gallery =  ;
5877: LD_ADDR_OWVAR 33
5881: PUSH
5882: LD_STRING 
5884: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5885: LD_INT 0
5887: PPUSH
5888: LD_INT 4
5890: PPUSH
5891: LD_VAR 0 8
5895: PPUSH
5896: CALL_OW 380
// un = CreateHuman ;
5900: LD_ADDR_VAR 0 16
5904: PUSH
5905: CALL_OW 44
5909: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5910: LD_VAR 0 16
5914: PPUSH
5915: LD_VAR 0 9
5919: PPUSH
5920: LD_INT 0
5922: PPUSH
5923: CALL_OW 49
// end ;
5927: GO 5846
5929: POP
5930: POP
// for i = 1 to soldierCount do
5931: LD_ADDR_VAR 0 14
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_VAR 0 3
5945: PUSH
5946: FOR_TO
5947: IFFALSE 6029
// begin uc_side = side ;
5949: LD_ADDR_OWVAR 20
5953: PUSH
5954: LD_VAR 0 1
5958: ST_TO_ADDR
// uc_nation = nation ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_VAR 0 2
5968: ST_TO_ADDR
// hc_name =  ;
5969: LD_ADDR_OWVAR 26
5973: PUSH
5974: LD_STRING 
5976: ST_TO_ADDR
// hc_gallery =  ;
5977: LD_ADDR_OWVAR 33
5981: PUSH
5982: LD_STRING 
5984: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
5985: LD_INT 0
5987: PPUSH
5988: LD_INT 1
5990: PPUSH
5991: LD_VAR 0 8
5995: PPUSH
5996: CALL_OW 380
// un = CreateHuman ;
6000: LD_ADDR_VAR 0 16
6004: PUSH
6005: CALL_OW 44
6009: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6010: LD_VAR 0 16
6014: PPUSH
6015: LD_VAR 0 9
6019: PPUSH
6020: LD_INT 0
6022: PPUSH
6023: CALL_OW 49
// end ;
6027: GO 5946
6029: POP
6030: POP
// for i = 1 to sniperCount do
6031: LD_ADDR_VAR 0 14
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_VAR 0 4
6045: PUSH
6046: FOR_TO
6047: IFFALSE 6129
// begin uc_side = side ;
6049: LD_ADDR_OWVAR 20
6053: PUSH
6054: LD_VAR 0 1
6058: ST_TO_ADDR
// uc_nation = nation ;
6059: LD_ADDR_OWVAR 21
6063: PUSH
6064: LD_VAR 0 2
6068: ST_TO_ADDR
// hc_name =  ;
6069: LD_ADDR_OWVAR 26
6073: PUSH
6074: LD_STRING 
6076: ST_TO_ADDR
// hc_gallery =  ;
6077: LD_ADDR_OWVAR 33
6081: PUSH
6082: LD_STRING 
6084: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6085: LD_INT 0
6087: PPUSH
6088: LD_INT 5
6090: PPUSH
6091: LD_VAR 0 8
6095: PPUSH
6096: CALL_OW 380
// un = CreateHuman ;
6100: LD_ADDR_VAR 0 16
6104: PUSH
6105: CALL_OW 44
6109: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6110: LD_VAR 0 16
6114: PPUSH
6115: LD_VAR 0 9
6119: PPUSH
6120: LD_INT 0
6122: PPUSH
6123: CALL_OW 49
// end ;
6127: GO 6046
6129: POP
6130: POP
// for i = 1 to bazookCount do
6131: LD_ADDR_VAR 0 14
6135: PUSH
6136: DOUBLE
6137: LD_INT 1
6139: DEC
6140: ST_TO_ADDR
6141: LD_VAR 0 5
6145: PUSH
6146: FOR_TO
6147: IFFALSE 6229
// begin uc_side = side ;
6149: LD_ADDR_OWVAR 20
6153: PUSH
6154: LD_VAR 0 1
6158: ST_TO_ADDR
// uc_nation = nation ;
6159: LD_ADDR_OWVAR 21
6163: PUSH
6164: LD_VAR 0 2
6168: ST_TO_ADDR
// hc_name =  ;
6169: LD_ADDR_OWVAR 26
6173: PUSH
6174: LD_STRING 
6176: ST_TO_ADDR
// hc_gallery =  ;
6177: LD_ADDR_OWVAR 33
6181: PUSH
6182: LD_STRING 
6184: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6185: LD_INT 0
6187: PPUSH
6188: LD_INT 9
6190: PPUSH
6191: LD_VAR 0 8
6195: PPUSH
6196: CALL_OW 380
// un = CreateHuman ;
6200: LD_ADDR_VAR 0 16
6204: PUSH
6205: CALL_OW 44
6209: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6210: LD_VAR 0 16
6214: PPUSH
6215: LD_VAR 0 9
6219: PPUSH
6220: LD_INT 0
6222: PPUSH
6223: CALL_OW 49
// end ;
6227: GO 6146
6229: POP
6230: POP
// for i = 1 to mortalCount do
6231: LD_ADDR_VAR 0 14
6235: PUSH
6236: DOUBLE
6237: LD_INT 1
6239: DEC
6240: ST_TO_ADDR
6241: LD_VAR 0 6
6245: PUSH
6246: FOR_TO
6247: IFFALSE 6329
// begin uc_side = side ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_VAR 0 1
6258: ST_TO_ADDR
// uc_nation = nation ;
6259: LD_ADDR_OWVAR 21
6263: PUSH
6264: LD_VAR 0 2
6268: ST_TO_ADDR
// hc_name =  ;
6269: LD_ADDR_OWVAR 26
6273: PUSH
6274: LD_STRING 
6276: ST_TO_ADDR
// hc_gallery =  ;
6277: LD_ADDR_OWVAR 33
6281: PUSH
6282: LD_STRING 
6284: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6285: LD_INT 0
6287: PPUSH
6288: LD_INT 8
6290: PPUSH
6291: LD_VAR 0 8
6295: PPUSH
6296: CALL_OW 380
// un = CreateHuman ;
6300: LD_ADDR_VAR 0 16
6304: PUSH
6305: CALL_OW 44
6309: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6310: LD_VAR 0 16
6314: PPUSH
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_INT 0
6322: PPUSH
6323: CALL_OW 49
// end ;
6327: GO 6246
6329: POP
6330: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6331: LD_ADDR_VAR 0 19
6335: PUSH
6336: LD_INT 22
6338: PUSH
6339: LD_VAR 0 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 2
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 1
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 25
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 25
6373: PUSH
6374: LD_INT 8
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 25
6383: PUSH
6384: LD_INT 9
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 69
6406: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6407: LD_ADDR_VAR 0 18
6411: PUSH
6412: LD_INT 22
6414: PUSH
6415: LD_VAR 0 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 69
6442: ST_TO_ADDR
// for i in medic_list do
6443: LD_ADDR_VAR 0 14
6447: PUSH
6448: LD_VAR 0 18
6452: PUSH
6453: FOR_IN
6454: IFFALSE 6472
// ComMoveToArea ( i , healArea ) ;
6456: LD_VAR 0 14
6460: PPUSH
6461: LD_VAR 0 10
6465: PPUSH
6466: CALL_OW 113
6470: GO 6453
6472: POP
6473: POP
// if strategy = 1 then
6474: LD_VAR 0 12
6478: PUSH
6479: LD_INT 1
6481: EQUAL
6482: IFFALSE 7217
// begin repeat wait ( 0 0$3 ) ;
6484: LD_INT 105
6486: PPUSH
6487: CALL_OW 67
// for i in soldiersOK_list do
6491: LD_ADDR_VAR 0 14
6495: PUSH
6496: LD_VAR 0 19
6500: PUSH
6501: FOR_IN
6502: IFFALSE 6566
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6504: LD_VAR 0 14
6508: PPUSH
6509: LD_INT 91
6511: PPUSH
6512: LD_INT 63
6514: PPUSH
6515: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
6519: LD_VAR 0 14
6523: PPUSH
6524: LD_INT 101
6526: PPUSH
6527: LD_INT 53
6529: PPUSH
6530: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
6534: LD_VAR 0 14
6538: PPUSH
6539: LD_INT 75
6541: PPUSH
6542: LD_INT 23
6544: PPUSH
6545: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6549: LD_VAR 0 14
6553: PPUSH
6554: LD_INT 78
6556: PPUSH
6557: LD_INT 8
6559: PPUSH
6560: CALL_OW 174
// end ;
6564: GO 6501
6566: POP
6567: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
6568: LD_INT 12
6570: PPUSH
6571: LD_INT 22
6573: PUSH
6574: LD_VAR 0 1
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 70
6587: PUSH
6588: LD_INT 2
6590: GREATER
6591: IFFALSE 6484
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6600: LD_ADDR_VAR 0 17
6604: PUSH
6605: LD_INT 22
6607: PUSH
6608: LD_VAR 0 1
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: LD_INT 3
6622: PUSH
6623: LD_INT 24
6625: PUSH
6626: LD_INT 550
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 24
6639: PUSH
6640: LD_INT 250
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PPUSH
6656: CALL_OW 69
6660: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6661: LD_ADDR_VAR 0 19
6665: PUSH
6666: LD_INT 22
6668: PUSH
6669: LD_VAR 0 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 2
6680: PUSH
6681: LD_INT 25
6683: PUSH
6684: LD_INT 1
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 25
6693: PUSH
6694: LD_INT 5
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 25
6703: PUSH
6704: LD_INT 8
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 25
6713: PUSH
6714: LD_INT 9
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 24
6730: PUSH
6731: LD_INT 1000
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 69
6747: ST_TO_ADDR
// if medicCount > 0 then
6748: LD_VAR 0 7
6752: PUSH
6753: LD_INT 0
6755: GREATER
6756: IFFALSE 6830
// begin if damageUnit_list > 0 then
6758: LD_VAR 0 17
6762: PUSH
6763: LD_INT 0
6765: GREATER
6766: IFFALSE 6830
// begin for i in damageUnit_list do
6768: LD_ADDR_VAR 0 14
6772: PUSH
6773: LD_VAR 0 17
6777: PUSH
6778: FOR_IN
6779: IFFALSE 6828
// begin ComMoveToArea ( i , healArea ) ;
6781: LD_VAR 0 14
6785: PPUSH
6786: LD_VAR 0 10
6790: PPUSH
6791: CALL_OW 113
// for j in medic_list do
6795: LD_ADDR_VAR 0 15
6799: PUSH
6800: LD_VAR 0 18
6804: PUSH
6805: FOR_IN
6806: IFFALSE 6824
// AddComHeal ( j , i ) ;
6808: LD_VAR 0 15
6812: PPUSH
6813: LD_VAR 0 14
6817: PPUSH
6818: CALL_OW 188
6822: GO 6805
6824: POP
6825: POP
// end ;
6826: GO 6778
6828: POP
6829: POP
// end ; end ; for i in soldiersOK_list do
6830: LD_ADDR_VAR 0 14
6834: PUSH
6835: LD_VAR 0 19
6839: PUSH
6840: FOR_IN
6841: IFFALSE 7017
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6843: LD_ADDR_VAR 0 22
6847: PUSH
6848: LD_INT 22
6850: PUSH
6851: LD_VAR 0 11
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 69
6864: PPUSH
6865: LD_VAR 0 14
6869: PPUSH
6870: CALL_OW 74
6874: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6875: LD_ADDR_VAR 0 23
6879: PUSH
6880: LD_INT 22
6882: PUSH
6883: LD_VAR 0 11
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 2
6894: PUSH
6895: LD_INT 59
6897: PUSH
6898: EMPTY
6899: LIST
6900: PUSH
6901: LD_INT 21
6903: PUSH
6904: LD_INT 1
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 21
6913: PUSH
6914: LD_INT 2
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: EMPTY
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: PPUSH
6939: LD_VAR 0 14
6943: PPUSH
6944: CALL_OW 74
6948: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6949: LD_VAR 0 14
6953: PPUSH
6954: LD_VAR 0 22
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 8
6966: PLUS
6967: PUSH
6968: LD_VAR 0 14
6972: PPUSH
6973: LD_VAR 0 23
6977: PPUSH
6978: CALL_OW 296
6982: LESS
6983: IFFALSE 7001
// begin ComAttackUnit ( i , target1 ) ;
6985: LD_VAR 0 14
6989: PPUSH
6990: LD_VAR 0 22
6994: PPUSH
6995: CALL_OW 115
// end else
6999: GO 7015
// begin ComAttackUnit ( i , target2 ) ;
7001: LD_VAR 0 14
7005: PPUSH
7006: LD_VAR 0 23
7010: PPUSH
7011: CALL_OW 115
// end ; end ;
7015: GO 6840
7017: POP
7018: POP
// for i in soldiersOK_list do
7019: LD_ADDR_VAR 0 14
7023: PUSH
7024: LD_VAR 0 19
7028: PUSH
7029: FOR_IN
7030: IFFALSE 7206
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7032: LD_ADDR_VAR 0 22
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_VAR 0 11
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PPUSH
7049: CALL_OW 69
7053: PPUSH
7054: LD_VAR 0 14
7058: PPUSH
7059: CALL_OW 74
7063: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7064: LD_ADDR_VAR 0 23
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_VAR 0 11
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 2
7083: PUSH
7084: LD_INT 59
7086: PUSH
7087: EMPTY
7088: LIST
7089: PUSH
7090: LD_INT 21
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: PPUSH
7123: CALL_OW 69
7127: PPUSH
7128: LD_VAR 0 14
7132: PPUSH
7133: CALL_OW 74
7137: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7138: LD_VAR 0 14
7142: PPUSH
7143: LD_VAR 0 22
7147: PPUSH
7148: CALL_OW 296
7152: PUSH
7153: LD_INT 8
7155: PLUS
7156: PUSH
7157: LD_VAR 0 14
7161: PPUSH
7162: LD_VAR 0 23
7166: PPUSH
7167: CALL_OW 296
7171: LESS
7172: IFFALSE 7190
// begin ComAttackUnit ( i , target1 ) ;
7174: LD_VAR 0 14
7178: PPUSH
7179: LD_VAR 0 22
7183: PPUSH
7184: CALL_OW 115
// end else
7188: GO 7204
// begin ComAttackUnit ( i , target2 ) ;
7190: LD_VAR 0 14
7194: PPUSH
7195: LD_VAR 0 23
7199: PPUSH
7200: CALL_OW 115
// end ; end ;
7204: GO 7029
7206: POP
7207: POP
// until soldiersOK_list = [ ] ;
7208: LD_VAR 0 19
7212: PUSH
7213: EMPTY
7214: EQUAL
7215: IFFALSE 6593
// end ; if strategy = 2 then
7217: LD_VAR 0 12
7221: PUSH
7222: LD_INT 2
7224: EQUAL
7225: IFFALSE 7930
// begin repeat wait ( 0 0$1 ) ;
7227: LD_INT 35
7229: PPUSH
7230: CALL_OW 67
// for i in soldiersOK_list do
7234: LD_ADDR_VAR 0 14
7238: PUSH
7239: LD_VAR 0 19
7243: PUSH
7244: FOR_IN
7245: IFFALSE 7279
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7247: LD_VAR 0 14
7251: PPUSH
7252: LD_INT 91
7254: PPUSH
7255: LD_INT 63
7257: PPUSH
7258: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7262: LD_VAR 0 14
7266: PPUSH
7267: LD_INT 75
7269: PPUSH
7270: LD_INT 33
7272: PPUSH
7273: CALL_OW 174
// end ;
7277: GO 7244
7279: POP
7280: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
7281: LD_INT 13
7283: PPUSH
7284: LD_INT 22
7286: PUSH
7287: LD_VAR 0 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PPUSH
7296: CALL_OW 70
7300: PUSH
7301: LD_INT 2
7303: GREATER
7304: IFFALSE 7227
// repeat wait ( 0 0$3 ) ;
7306: LD_INT 105
7308: PPUSH
7309: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7313: LD_ADDR_VAR 0 17
7317: PUSH
7318: LD_INT 22
7320: PUSH
7321: LD_VAR 0 1
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 1
7332: PUSH
7333: LD_INT 3
7335: PUSH
7336: LD_INT 24
7338: PUSH
7339: LD_INT 550
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 24
7352: PUSH
7353: LD_INT 250
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PPUSH
7369: CALL_OW 69
7373: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7374: LD_ADDR_VAR 0 19
7378: PUSH
7379: LD_INT 22
7381: PUSH
7382: LD_VAR 0 1
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 2
7393: PUSH
7394: LD_INT 25
7396: PUSH
7397: LD_INT 1
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 25
7406: PUSH
7407: LD_INT 5
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 25
7416: PUSH
7417: LD_INT 8
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 25
7426: PUSH
7427: LD_INT 9
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 24
7443: PUSH
7444: LD_INT 1000
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 69
7460: ST_TO_ADDR
// if medicCount > 0 then
7461: LD_VAR 0 7
7465: PUSH
7466: LD_INT 0
7468: GREATER
7469: IFFALSE 7543
// begin if damageUnit_list > 0 then
7471: LD_VAR 0 17
7475: PUSH
7476: LD_INT 0
7478: GREATER
7479: IFFALSE 7543
// begin for i in damageUnit_list do
7481: LD_ADDR_VAR 0 14
7485: PUSH
7486: LD_VAR 0 17
7490: PUSH
7491: FOR_IN
7492: IFFALSE 7541
// begin ComMoveToArea ( i , healArea ) ;
7494: LD_VAR 0 14
7498: PPUSH
7499: LD_VAR 0 10
7503: PPUSH
7504: CALL_OW 113
// for j in medic_list do
7508: LD_ADDR_VAR 0 15
7512: PUSH
7513: LD_VAR 0 18
7517: PUSH
7518: FOR_IN
7519: IFFALSE 7537
// AddComHeal ( j , i ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 14
7530: PPUSH
7531: CALL_OW 188
7535: GO 7518
7537: POP
7538: POP
// end ;
7539: GO 7491
7541: POP
7542: POP
// end ; end ; for i in soldiersOK_list do
7543: LD_ADDR_VAR 0 14
7547: PUSH
7548: LD_VAR 0 19
7552: PUSH
7553: FOR_IN
7554: IFFALSE 7730
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7556: LD_ADDR_VAR 0 22
7560: PUSH
7561: LD_INT 22
7563: PUSH
7564: LD_VAR 0 11
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 69
7577: PPUSH
7578: LD_VAR 0 14
7582: PPUSH
7583: CALL_OW 74
7587: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7588: LD_ADDR_VAR 0 23
7592: PUSH
7593: LD_INT 22
7595: PUSH
7596: LD_VAR 0 11
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 2
7607: PUSH
7608: LD_INT 59
7610: PUSH
7611: EMPTY
7612: LIST
7613: PUSH
7614: LD_INT 21
7616: PUSH
7617: LD_INT 1
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 21
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: PPUSH
7652: LD_VAR 0 14
7656: PPUSH
7657: CALL_OW 74
7661: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7662: LD_VAR 0 14
7666: PPUSH
7667: LD_VAR 0 22
7671: PPUSH
7672: CALL_OW 296
7676: PUSH
7677: LD_INT 8
7679: PLUS
7680: PUSH
7681: LD_VAR 0 14
7685: PPUSH
7686: LD_VAR 0 23
7690: PPUSH
7691: CALL_OW 296
7695: LESS
7696: IFFALSE 7714
// begin ComAttackUnit ( i , target1 ) ;
7698: LD_VAR 0 14
7702: PPUSH
7703: LD_VAR 0 22
7707: PPUSH
7708: CALL_OW 115
// end else
7712: GO 7728
// begin ComAttackUnit ( i , target2 ) ;
7714: LD_VAR 0 14
7718: PPUSH
7719: LD_VAR 0 23
7723: PPUSH
7724: CALL_OW 115
// end ; end ;
7728: GO 7553
7730: POP
7731: POP
// for i in soldiersOK_list do
7732: LD_ADDR_VAR 0 14
7736: PUSH
7737: LD_VAR 0 19
7741: PUSH
7742: FOR_IN
7743: IFFALSE 7919
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7745: LD_ADDR_VAR 0 22
7749: PUSH
7750: LD_INT 22
7752: PUSH
7753: LD_VAR 0 11
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL_OW 69
7766: PPUSH
7767: LD_VAR 0 14
7771: PPUSH
7772: CALL_OW 74
7776: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7777: LD_ADDR_VAR 0 23
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_VAR 0 11
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 2
7796: PUSH
7797: LD_INT 59
7799: PUSH
7800: EMPTY
7801: LIST
7802: PUSH
7803: LD_INT 21
7805: PUSH
7806: LD_INT 1
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 21
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: PPUSH
7841: LD_VAR 0 14
7845: PPUSH
7846: CALL_OW 74
7850: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7851: LD_VAR 0 14
7855: PPUSH
7856: LD_VAR 0 22
7860: PPUSH
7861: CALL_OW 296
7865: PUSH
7866: LD_INT 8
7868: PLUS
7869: PUSH
7870: LD_VAR 0 14
7874: PPUSH
7875: LD_VAR 0 23
7879: PPUSH
7880: CALL_OW 296
7884: LESS
7885: IFFALSE 7903
// begin ComAttackUnit ( i , target1 ) ;
7887: LD_VAR 0 14
7891: PPUSH
7892: LD_VAR 0 22
7896: PPUSH
7897: CALL_OW 115
// end else
7901: GO 7917
// begin ComAttackUnit ( i , target2 ) ;
7903: LD_VAR 0 14
7907: PPUSH
7908: LD_VAR 0 23
7912: PPUSH
7913: CALL_OW 115
// end ; end ;
7917: GO 7742
7919: POP
7920: POP
// until soldiersOK_list = [ ] ;
7921: LD_VAR 0 19
7925: PUSH
7926: EMPTY
7927: EQUAL
7928: IFFALSE 7306
// end ; if strategy = 3 then
7930: LD_VAR 0 12
7934: PUSH
7935: LD_INT 3
7937: EQUAL
7938: IFFALSE 8658
// begin repeat wait ( 0 0$3 ) ;
7940: LD_INT 105
7942: PPUSH
7943: CALL_OW 67
// for i in soldiersOK_list do
7947: LD_ADDR_VAR 0 14
7951: PUSH
7952: LD_VAR 0 19
7956: PUSH
7957: FOR_IN
7958: IFFALSE 8007
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
7960: LD_VAR 0 14
7964: PPUSH
7965: LD_INT 63
7967: PPUSH
7968: LD_INT 71
7970: PPUSH
7971: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
7975: LD_VAR 0 14
7979: PPUSH
7980: LD_INT 35
7982: PPUSH
7983: LD_INT 44
7985: PPUSH
7986: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
7990: LD_VAR 0 14
7994: PPUSH
7995: LD_INT 23
7997: PPUSH
7998: LD_INT 18
8000: PPUSH
8001: CALL_OW 174
// end ;
8005: GO 7957
8007: POP
8008: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
8009: LD_INT 14
8011: PPUSH
8012: LD_INT 22
8014: PUSH
8015: LD_VAR 0 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 70
8028: PUSH
8029: LD_INT 2
8031: GREATER
8032: IFFALSE 7940
// repeat wait ( 0 0$1 ) ;
8034: LD_INT 35
8036: PPUSH
8037: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8041: LD_ADDR_VAR 0 17
8045: PUSH
8046: LD_INT 22
8048: PUSH
8049: LD_VAR 0 1
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: LD_INT 24
8066: PUSH
8067: LD_INT 550
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 24
8080: PUSH
8081: LD_INT 250
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PPUSH
8097: CALL_OW 69
8101: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8102: LD_ADDR_VAR 0 19
8106: PUSH
8107: LD_INT 22
8109: PUSH
8110: LD_VAR 0 1
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_INT 25
8124: PUSH
8125: LD_INT 1
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 25
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 8
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 9
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: LD_INT 24
8171: PUSH
8172: LD_INT 1000
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// if medicCount > 0 then
8189: LD_VAR 0 7
8193: PUSH
8194: LD_INT 0
8196: GREATER
8197: IFFALSE 8271
// begin if damageUnit_list > 0 then
8199: LD_VAR 0 17
8203: PUSH
8204: LD_INT 0
8206: GREATER
8207: IFFALSE 8271
// begin for i in damageUnit_list do
8209: LD_ADDR_VAR 0 14
8213: PUSH
8214: LD_VAR 0 17
8218: PUSH
8219: FOR_IN
8220: IFFALSE 8269
// begin ComMoveToArea ( i , healArea ) ;
8222: LD_VAR 0 14
8226: PPUSH
8227: LD_VAR 0 10
8231: PPUSH
8232: CALL_OW 113
// for j in medic_list do
8236: LD_ADDR_VAR 0 15
8240: PUSH
8241: LD_VAR 0 18
8245: PUSH
8246: FOR_IN
8247: IFFALSE 8265
// AddComHeal ( j , i ) ;
8249: LD_VAR 0 15
8253: PPUSH
8254: LD_VAR 0 14
8258: PPUSH
8259: CALL_OW 188
8263: GO 8246
8265: POP
8266: POP
// end ;
8267: GO 8219
8269: POP
8270: POP
// end ; end ; for i in soldiersOK_list do
8271: LD_ADDR_VAR 0 14
8275: PUSH
8276: LD_VAR 0 19
8280: PUSH
8281: FOR_IN
8282: IFFALSE 8458
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8284: LD_ADDR_VAR 0 22
8288: PUSH
8289: LD_INT 22
8291: PUSH
8292: LD_VAR 0 11
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 69
8305: PPUSH
8306: LD_VAR 0 14
8310: PPUSH
8311: CALL_OW 74
8315: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8316: LD_ADDR_VAR 0 23
8320: PUSH
8321: LD_INT 22
8323: PUSH
8324: LD_VAR 0 11
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 59
8338: PUSH
8339: EMPTY
8340: LIST
8341: PUSH
8342: LD_INT 21
8344: PUSH
8345: LD_INT 1
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 2
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: PPUSH
8375: CALL_OW 69
8379: PPUSH
8380: LD_VAR 0 14
8384: PPUSH
8385: CALL_OW 74
8389: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8390: LD_VAR 0 14
8394: PPUSH
8395: LD_VAR 0 22
8399: PPUSH
8400: CALL_OW 296
8404: PUSH
8405: LD_INT 8
8407: PLUS
8408: PUSH
8409: LD_VAR 0 14
8413: PPUSH
8414: LD_VAR 0 23
8418: PPUSH
8419: CALL_OW 296
8423: LESS
8424: IFFALSE 8442
// begin ComAttackUnit ( i , target1 ) ;
8426: LD_VAR 0 14
8430: PPUSH
8431: LD_VAR 0 22
8435: PPUSH
8436: CALL_OW 115
// end else
8440: GO 8456
// begin ComAttackUnit ( i , target2 ) ;
8442: LD_VAR 0 14
8446: PPUSH
8447: LD_VAR 0 23
8451: PPUSH
8452: CALL_OW 115
// end ; end ;
8456: GO 8281
8458: POP
8459: POP
// for i in soldiersOK_list do
8460: LD_ADDR_VAR 0 14
8464: PUSH
8465: LD_VAR 0 19
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8647
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8473: LD_ADDR_VAR 0 22
8477: PUSH
8478: LD_INT 22
8480: PUSH
8481: LD_VAR 0 11
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PPUSH
8490: CALL_OW 69
8494: PPUSH
8495: LD_VAR 0 14
8499: PPUSH
8500: CALL_OW 74
8504: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8505: LD_ADDR_VAR 0 23
8509: PUSH
8510: LD_INT 22
8512: PUSH
8513: LD_VAR 0 11
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 59
8527: PUSH
8528: EMPTY
8529: LIST
8530: PUSH
8531: LD_INT 21
8533: PUSH
8534: LD_INT 1
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 21
8543: PUSH
8544: LD_INT 2
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: PPUSH
8569: LD_VAR 0 14
8573: PPUSH
8574: CALL_OW 74
8578: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8579: LD_VAR 0 14
8583: PPUSH
8584: LD_VAR 0 22
8588: PPUSH
8589: CALL_OW 296
8593: PUSH
8594: LD_INT 8
8596: PLUS
8597: PUSH
8598: LD_VAR 0 14
8602: PPUSH
8603: LD_VAR 0 23
8607: PPUSH
8608: CALL_OW 296
8612: LESS
8613: IFFALSE 8631
// begin ComAttackUnit ( i , target1 ) ;
8615: LD_VAR 0 14
8619: PPUSH
8620: LD_VAR 0 22
8624: PPUSH
8625: CALL_OW 115
// end else
8629: GO 8645
// begin ComAttackUnit ( i , target2 ) ;
8631: LD_VAR 0 14
8635: PPUSH
8636: LD_VAR 0 23
8640: PPUSH
8641: CALL_OW 115
// end ; end ;
8645: GO 8470
8647: POP
8648: POP
// until soldiersOK_list = [ ] ;
8649: LD_VAR 0 19
8653: PUSH
8654: EMPTY
8655: EQUAL
8656: IFFALSE 8034
// end ; if strategy = 4 then
8658: LD_VAR 0 12
8662: PUSH
8663: LD_INT 4
8665: EQUAL
8666: IFFALSE 9292
// begin repeat wait ( 0 0$1 ) ;
8668: LD_INT 35
8670: PPUSH
8671: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8675: LD_ADDR_VAR 0 17
8679: PUSH
8680: LD_INT 22
8682: PUSH
8683: LD_VAR 0 1
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 24
8700: PUSH
8701: LD_INT 550
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 24
8714: PUSH
8715: LD_INT 250
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 69
8735: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8736: LD_ADDR_VAR 0 19
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_VAR 0 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 1
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 25
8768: PUSH
8769: LD_INT 5
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 8
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 25
8788: PUSH
8789: LD_INT 9
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 24
8805: PUSH
8806: LD_INT 1000
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 69
8822: ST_TO_ADDR
// if medicCount > 0 then
8823: LD_VAR 0 7
8827: PUSH
8828: LD_INT 0
8830: GREATER
8831: IFFALSE 8905
// begin if damageUnit_list > 0 then
8833: LD_VAR 0 17
8837: PUSH
8838: LD_INT 0
8840: GREATER
8841: IFFALSE 8905
// begin for i in damageUnit_list do
8843: LD_ADDR_VAR 0 14
8847: PUSH
8848: LD_VAR 0 17
8852: PUSH
8853: FOR_IN
8854: IFFALSE 8903
// begin ComMoveToArea ( i , healArea ) ;
8856: LD_VAR 0 14
8860: PPUSH
8861: LD_VAR 0 10
8865: PPUSH
8866: CALL_OW 113
// for j in medic_list do
8870: LD_ADDR_VAR 0 15
8874: PUSH
8875: LD_VAR 0 18
8879: PUSH
8880: FOR_IN
8881: IFFALSE 8899
// AddComHeal ( j , i ) ;
8883: LD_VAR 0 15
8887: PPUSH
8888: LD_VAR 0 14
8892: PPUSH
8893: CALL_OW 188
8897: GO 8880
8899: POP
8900: POP
// end ;
8901: GO 8853
8903: POP
8904: POP
// end ; end ; for i in soldiersOK_list do
8905: LD_ADDR_VAR 0 14
8909: PUSH
8910: LD_VAR 0 19
8914: PUSH
8915: FOR_IN
8916: IFFALSE 9092
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8918: LD_ADDR_VAR 0 22
8922: PUSH
8923: LD_INT 22
8925: PUSH
8926: LD_VAR 0 11
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: PPUSH
8940: LD_VAR 0 14
8944: PPUSH
8945: CALL_OW 74
8949: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8950: LD_ADDR_VAR 0 23
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_VAR 0 11
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 2
8969: PUSH
8970: LD_INT 59
8972: PUSH
8973: EMPTY
8974: LIST
8975: PUSH
8976: LD_INT 21
8978: PUSH
8979: LD_INT 1
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 21
8988: PUSH
8989: LD_INT 2
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: PPUSH
9009: CALL_OW 69
9013: PPUSH
9014: LD_VAR 0 14
9018: PPUSH
9019: CALL_OW 74
9023: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9024: LD_VAR 0 14
9028: PPUSH
9029: LD_VAR 0 22
9033: PPUSH
9034: CALL_OW 296
9038: PUSH
9039: LD_INT 8
9041: PLUS
9042: PUSH
9043: LD_VAR 0 14
9047: PPUSH
9048: LD_VAR 0 23
9052: PPUSH
9053: CALL_OW 296
9057: LESS
9058: IFFALSE 9076
// begin ComAttackUnit ( i , target1 ) ;
9060: LD_VAR 0 14
9064: PPUSH
9065: LD_VAR 0 22
9069: PPUSH
9070: CALL_OW 115
// end else
9074: GO 9090
// begin ComAttackUnit ( i , target2 ) ;
9076: LD_VAR 0 14
9080: PPUSH
9081: LD_VAR 0 23
9085: PPUSH
9086: CALL_OW 115
// end ; end ;
9090: GO 8915
9092: POP
9093: POP
// for i in soldiersOK_list do
9094: LD_ADDR_VAR 0 14
9098: PUSH
9099: LD_VAR 0 19
9103: PUSH
9104: FOR_IN
9105: IFFALSE 9281
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9107: LD_ADDR_VAR 0 22
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_VAR 0 11
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PPUSH
9124: CALL_OW 69
9128: PPUSH
9129: LD_VAR 0 14
9133: PPUSH
9134: CALL_OW 74
9138: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9139: LD_ADDR_VAR 0 23
9143: PUSH
9144: LD_INT 22
9146: PUSH
9147: LD_VAR 0 11
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 2
9158: PUSH
9159: LD_INT 59
9161: PUSH
9162: EMPTY
9163: LIST
9164: PUSH
9165: LD_INT 21
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 21
9177: PUSH
9178: LD_INT 2
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: EMPTY
9196: LIST
9197: PPUSH
9198: CALL_OW 69
9202: PPUSH
9203: LD_VAR 0 14
9207: PPUSH
9208: CALL_OW 74
9212: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9213: LD_VAR 0 14
9217: PPUSH
9218: LD_VAR 0 22
9222: PPUSH
9223: CALL_OW 296
9227: PUSH
9228: LD_INT 8
9230: PLUS
9231: PUSH
9232: LD_VAR 0 14
9236: PPUSH
9237: LD_VAR 0 23
9241: PPUSH
9242: CALL_OW 296
9246: LESS
9247: IFFALSE 9265
// begin ComAttackUnit ( i , target1 ) ;
9249: LD_VAR 0 14
9253: PPUSH
9254: LD_VAR 0 22
9258: PPUSH
9259: CALL_OW 115
// end else
9263: GO 9279
// begin ComAttackUnit ( i , target2 ) ;
9265: LD_VAR 0 14
9269: PPUSH
9270: LD_VAR 0 23
9274: PPUSH
9275: CALL_OW 115
// end ; end ;
9279: GO 9104
9281: POP
9282: POP
// until soldiersOK_list = [ ] ;
9283: LD_VAR 0 19
9287: PUSH
9288: EMPTY
9289: EQUAL
9290: IFFALSE 8668
// end ; end ;
9292: LD_VAR 0 13
9296: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9297: LD_INT 0
9299: PPUSH
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
9308: PPUSH
9309: PPUSH
// amChassisTab = [ ] ;
9310: LD_ADDR_VAR 0 19
9314: PUSH
9315: EMPTY
9316: ST_TO_ADDR
// arChassisTab = [ ] ;
9317: LD_ADDR_VAR 0 18
9321: PUSH
9322: EMPTY
9323: ST_TO_ADDR
// ruChassisTab = [ ] ;
9324: LD_ADDR_VAR 0 17
9328: PUSH
9329: EMPTY
9330: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9331: LD_INT 35
9333: PPUSH
9334: CALL_OW 67
// if nation = 1 then
9338: LD_VAR 0 5
9342: PUSH
9343: LD_INT 1
9345: EQUAL
9346: IFFALSE 9837
// begin uc_side = side ;
9348: LD_ADDR_OWVAR 20
9352: PUSH
9353: LD_VAR 0 2
9357: ST_TO_ADDR
// uc_nation = nation ;
9358: LD_ADDR_OWVAR 21
9362: PUSH
9363: LD_VAR 0 5
9367: ST_TO_ADDR
// vc_engine = vehengine ;
9368: LD_ADDR_OWVAR 39
9372: PUSH
9373: LD_VAR 0 6
9377: ST_TO_ADDR
// vc_control = vehcontrol ;
9378: LD_ADDR_OWVAR 38
9382: PUSH
9383: LD_VAR 0 7
9387: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9388: LD_ADDR_OWVAR 40
9392: PUSH
9393: LD_VAR 0 10
9397: PUSH
9398: LD_INT 1
9400: PPUSH
9401: LD_VAR 0 10
9405: PPUSH
9406: CALL_OW 12
9410: ARRAY
9411: ST_TO_ADDR
// for j = 1 to AMWeapon do
9412: LD_ADDR_VAR 0 14
9416: PUSH
9417: DOUBLE
9418: LD_INT 1
9420: DEC
9421: ST_TO_ADDR
9422: LD_VAR 0 10
9426: PUSH
9427: FOR_TO
9428: IFFALSE 9729
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9430: LD_VAR 0 10
9434: PUSH
9435: LD_VAR 0 14
9439: ARRAY
9440: PUSH
9441: LD_INT 2
9443: EQUAL
9444: PUSH
9445: LD_VAR 0 10
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PUSH
9456: LD_INT 3
9458: EQUAL
9459: OR
9460: IFFALSE 9513
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9462: LD_ADDR_VAR 0 19
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: LD_INT 2
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: LD_INT 4
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9489: LD_ADDR_OWVAR 37
9493: PUSH
9494: LD_VAR 0 19
9498: PUSH
9499: LD_INT 1
9501: PPUSH
9502: LD_VAR 0 19
9506: PPUSH
9507: CALL_OW 12
9511: ARRAY
9512: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9513: LD_VAR 0 10
9517: PUSH
9518: LD_VAR 0 14
9522: ARRAY
9523: PUSH
9524: LD_INT 4
9526: EQUAL
9527: PUSH
9528: LD_VAR 0 10
9532: PUSH
9533: LD_VAR 0 14
9537: ARRAY
9538: PUSH
9539: LD_INT 5
9541: EQUAL
9542: OR
9543: PUSH
9544: LD_VAR 0 10
9548: PUSH
9549: LD_VAR 0 14
9553: ARRAY
9554: PUSH
9555: LD_INT 9
9557: EQUAL
9558: OR
9559: PUSH
9560: LD_VAR 0 10
9564: PUSH
9565: LD_VAR 0 14
9569: ARRAY
9570: PUSH
9571: LD_INT 11
9573: EQUAL
9574: OR
9575: PUSH
9576: LD_VAR 0 10
9580: PUSH
9581: LD_VAR 0 14
9585: ARRAY
9586: PUSH
9587: LD_INT 7
9589: EQUAL
9590: OR
9591: IFFALSE 9640
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9593: LD_ADDR_VAR 0 19
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: LD_INT 3
9603: PUSH
9604: LD_INT 4
9606: PUSH
9607: LD_INT 5
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9616: LD_ADDR_OWVAR 37
9620: PUSH
9621: LD_VAR 0 19
9625: PUSH
9626: LD_INT 1
9628: PPUSH
9629: LD_VAR 0 19
9633: PPUSH
9634: CALL_OW 12
9638: ARRAY
9639: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9640: LD_VAR 0 10
9644: PUSH
9645: LD_VAR 0 14
9649: ARRAY
9650: PUSH
9651: LD_INT 8
9653: EQUAL
9654: PUSH
9655: LD_VAR 0 10
9659: PUSH
9660: LD_VAR 0 14
9664: ARRAY
9665: PUSH
9666: LD_INT 6
9668: EQUAL
9669: OR
9670: PUSH
9671: LD_VAR 0 10
9675: PUSH
9676: LD_VAR 0 14
9680: ARRAY
9681: PUSH
9682: LD_INT 10
9684: EQUAL
9685: OR
9686: IFFALSE 9727
// begin amChassisTab = [ 4 , 5 ] ;
9688: LD_ADDR_VAR 0 19
9692: PUSH
9693: LD_INT 4
9695: PUSH
9696: LD_INT 5
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9703: LD_ADDR_OWVAR 37
9707: PUSH
9708: LD_VAR 0 19
9712: PUSH
9713: LD_INT 1
9715: PPUSH
9716: LD_VAR 0 19
9720: PPUSH
9721: CALL_OW 12
9725: ARRAY
9726: ST_TO_ADDR
// end ; end ;
9727: GO 9427
9729: POP
9730: POP
// veh = CreateVehicle ;
9731: LD_ADDR_VAR 0 16
9735: PUSH
9736: CALL_OW 45
9740: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9741: LD_VAR 0 16
9745: PPUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: LD_INT 0
9753: PPUSH
9754: CALL_OW 49
// if vehControl = 1 then
9758: LD_VAR 0 7
9762: PUSH
9763: LD_INT 1
9765: EQUAL
9766: IFFALSE 9823
// begin hc_gallery =  ;
9768: LD_ADDR_OWVAR 33
9772: PUSH
9773: LD_STRING 
9775: ST_TO_ADDR
// hc_name =  ;
9776: LD_ADDR_OWVAR 26
9780: PUSH
9781: LD_STRING 
9783: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9784: LD_INT 0
9786: PPUSH
9787: LD_INT 3
9789: PPUSH
9790: LD_VAR 0 4
9794: PPUSH
9795: CALL_OW 380
// un = CreateHuman ;
9799: LD_ADDR_VAR 0 15
9803: PUSH
9804: CALL_OW 44
9808: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9809: LD_VAR 0 15
9813: PPUSH
9814: LD_VAR 0 16
9818: PPUSH
9819: CALL_OW 52
// end ; i = i + 1 ;
9823: LD_ADDR_VAR 0 13
9827: PUSH
9828: LD_VAR 0 13
9832: PUSH
9833: LD_INT 1
9835: PLUS
9836: ST_TO_ADDR
// end ; if nation = 2 then
9837: LD_VAR 0 5
9841: PUSH
9842: LD_INT 2
9844: EQUAL
9845: IFFALSE 10269
// begin uc_side = side ;
9847: LD_ADDR_OWVAR 20
9851: PUSH
9852: LD_VAR 0 2
9856: ST_TO_ADDR
// uc_nation = nation ;
9857: LD_ADDR_OWVAR 21
9861: PUSH
9862: LD_VAR 0 5
9866: ST_TO_ADDR
// vc_engine = vehengine ;
9867: LD_ADDR_OWVAR 39
9871: PUSH
9872: LD_VAR 0 6
9876: ST_TO_ADDR
// vc_control = vehcontrol ;
9877: LD_ADDR_OWVAR 38
9881: PUSH
9882: LD_VAR 0 7
9886: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9887: LD_ADDR_OWVAR 40
9891: PUSH
9892: LD_VAR 0 9
9896: PUSH
9897: LD_INT 1
9899: PPUSH
9900: LD_VAR 0 9
9904: PPUSH
9905: CALL_OW 12
9909: ARRAY
9910: ST_TO_ADDR
// for j = 1 to ARWeapons do
9911: LD_ADDR_VAR 0 14
9915: PUSH
9916: DOUBLE
9917: LD_INT 1
9919: DEC
9920: ST_TO_ADDR
9921: LD_VAR 0 9
9925: PUSH
9926: FOR_TO
9927: IFFALSE 10161
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9929: LD_VAR 0 9
9933: PUSH
9934: LD_VAR 0 14
9938: ARRAY
9939: PUSH
9940: LD_INT 24
9942: EQUAL
9943: PUSH
9944: LD_VAR 0 9
9948: PUSH
9949: LD_VAR 0 14
9953: ARRAY
9954: PUSH
9955: LD_INT 22
9957: EQUAL
9958: OR
9959: PUSH
9960: LD_VAR 0 9
9964: PUSH
9965: LD_VAR 0 14
9969: ARRAY
9970: PUSH
9971: LD_INT 23
9973: EQUAL
9974: OR
9975: PUSH
9976: LD_VAR 0 9
9980: PUSH
9981: LD_VAR 0 14
9985: ARRAY
9986: PUSH
9987: LD_INT 30
9989: EQUAL
9990: OR
9991: IFFALSE 10040
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9993: LD_ADDR_VAR 0 18
9997: PUSH
9998: LD_INT 11
10000: PUSH
10001: LD_INT 12
10003: PUSH
10004: LD_INT 13
10006: PUSH
10007: LD_INT 14
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10016: LD_ADDR_OWVAR 37
10020: PUSH
10021: LD_VAR 0 18
10025: PUSH
10026: LD_INT 1
10028: PPUSH
10029: LD_VAR 0 18
10033: PPUSH
10034: CALL_OW 12
10038: ARRAY
10039: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10040: LD_VAR 0 9
10044: PUSH
10045: LD_VAR 0 14
10049: ARRAY
10050: PUSH
10051: LD_INT 29
10053: EQUAL
10054: PUSH
10055: LD_VAR 0 9
10059: PUSH
10060: LD_VAR 0 14
10064: ARRAY
10065: PUSH
10066: LD_INT 28
10068: EQUAL
10069: OR
10070: PUSH
10071: LD_VAR 0 9
10075: PUSH
10076: LD_VAR 0 14
10080: ARRAY
10081: PUSH
10082: LD_INT 27
10084: EQUAL
10085: OR
10086: PUSH
10087: LD_VAR 0 9
10091: PUSH
10092: LD_VAR 0 14
10096: ARRAY
10097: PUSH
10098: LD_INT 26
10100: EQUAL
10101: OR
10102: PUSH
10103: LD_VAR 0 9
10107: PUSH
10108: LD_VAR 0 14
10112: ARRAY
10113: PUSH
10114: LD_INT 25
10116: EQUAL
10117: OR
10118: IFFALSE 10159
// begin arChassisTab = [ 13 , 14 ] ;
10120: LD_ADDR_VAR 0 18
10124: PUSH
10125: LD_INT 13
10127: PUSH
10128: LD_INT 14
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10135: LD_ADDR_OWVAR 37
10139: PUSH
10140: LD_VAR 0 18
10144: PUSH
10145: LD_INT 1
10147: PPUSH
10148: LD_VAR 0 18
10152: PPUSH
10153: CALL_OW 12
10157: ARRAY
10158: ST_TO_ADDR
// end ; end ;
10159: GO 9926
10161: POP
10162: POP
// veh = CreateVehicle ;
10163: LD_ADDR_VAR 0 16
10167: PUSH
10168: CALL_OW 45
10172: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10173: LD_VAR 0 16
10177: PPUSH
10178: LD_VAR 0 1
10182: PPUSH
10183: LD_INT 0
10185: PPUSH
10186: CALL_OW 49
// if vehcontrol = 1 then
10190: LD_VAR 0 7
10194: PUSH
10195: LD_INT 1
10197: EQUAL
10198: IFFALSE 10255
// begin hc_gallery =  ;
10200: LD_ADDR_OWVAR 33
10204: PUSH
10205: LD_STRING 
10207: ST_TO_ADDR
// hc_name =  ;
10208: LD_ADDR_OWVAR 26
10212: PUSH
10213: LD_STRING 
10215: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10216: LD_INT 0
10218: PPUSH
10219: LD_INT 3
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: CALL_OW 380
// un = CreateHuman ;
10231: LD_ADDR_VAR 0 15
10235: PUSH
10236: CALL_OW 44
10240: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10241: LD_VAR 0 15
10245: PPUSH
10246: LD_VAR 0 16
10250: PPUSH
10251: CALL_OW 52
// end ; i = i + 1 ;
10255: LD_ADDR_VAR 0 13
10259: PUSH
10260: LD_VAR 0 13
10264: PUSH
10265: LD_INT 1
10267: PLUS
10268: ST_TO_ADDR
// end ; if nation = 3 then
10269: LD_VAR 0 5
10273: PUSH
10274: LD_INT 3
10276: EQUAL
10277: IFFALSE 10669
// begin uc_side = side ;
10279: LD_ADDR_OWVAR 20
10283: PUSH
10284: LD_VAR 0 2
10288: ST_TO_ADDR
// uc_nation = nation ;
10289: LD_ADDR_OWVAR 21
10293: PUSH
10294: LD_VAR 0 5
10298: ST_TO_ADDR
// vc_engine = vehengine ;
10299: LD_ADDR_OWVAR 39
10303: PUSH
10304: LD_VAR 0 6
10308: ST_TO_ADDR
// vc_control = vehcontrol ;
10309: LD_ADDR_OWVAR 38
10313: PUSH
10314: LD_VAR 0 7
10318: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10319: LD_ADDR_OWVAR 40
10323: PUSH
10324: LD_VAR 0 8
10328: PUSH
10329: LD_INT 1
10331: PPUSH
10332: LD_VAR 0 8
10336: PPUSH
10337: CALL_OW 12
10341: ARRAY
10342: ST_TO_ADDR
// for j = 1 to RuWeapons do
10343: LD_ADDR_VAR 0 14
10347: PUSH
10348: DOUBLE
10349: LD_INT 1
10351: DEC
10352: ST_TO_ADDR
10353: LD_VAR 0 8
10357: PUSH
10358: FOR_TO
10359: IFFALSE 10561
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10361: LD_VAR 0 8
10365: PUSH
10366: LD_VAR 0 14
10370: ARRAY
10371: PUSH
10372: LD_INT 42
10374: EQUAL
10375: PUSH
10376: LD_VAR 0 8
10380: PUSH
10381: LD_VAR 0 14
10385: ARRAY
10386: PUSH
10387: LD_INT 43
10389: EQUAL
10390: OR
10391: PUSH
10392: LD_VAR 0 8
10396: PUSH
10397: LD_VAR 0 14
10401: ARRAY
10402: PUSH
10403: LD_INT 44
10405: EQUAL
10406: OR
10407: PUSH
10408: LD_VAR 0 8
10412: PUSH
10413: LD_VAR 0 14
10417: ARRAY
10418: PUSH
10419: LD_INT 45
10421: EQUAL
10422: OR
10423: PUSH
10424: LD_VAR 0 8
10428: PUSH
10429: LD_VAR 0 14
10433: ARRAY
10434: PUSH
10435: LD_INT 49
10437: EQUAL
10438: OR
10439: IFFALSE 10488
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10441: LD_ADDR_VAR 0 17
10445: PUSH
10446: LD_INT 21
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_INT 23
10454: PUSH
10455: LD_INT 24
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10464: LD_ADDR_OWVAR 37
10468: PUSH
10469: LD_VAR 0 17
10473: PUSH
10474: LD_INT 1
10476: PPUSH
10477: LD_VAR 0 17
10481: PPUSH
10482: CALL_OW 12
10486: ARRAY
10487: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10488: LD_VAR 0 8
10492: PUSH
10493: LD_VAR 0 14
10497: ARRAY
10498: PUSH
10499: LD_INT 46
10501: EQUAL
10502: PUSH
10503: LD_VAR 0 8
10507: PUSH
10508: LD_VAR 0 14
10512: ARRAY
10513: PUSH
10514: LD_INT 47
10516: EQUAL
10517: OR
10518: IFFALSE 10559
// begin ruChassisTab = [ 23 , 24 ] ;
10520: LD_ADDR_VAR 0 17
10524: PUSH
10525: LD_INT 23
10527: PUSH
10528: LD_INT 24
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10535: LD_ADDR_OWVAR 37
10539: PUSH
10540: LD_VAR 0 17
10544: PUSH
10545: LD_INT 1
10547: PPUSH
10548: LD_VAR 0 17
10552: PPUSH
10553: CALL_OW 12
10557: ARRAY
10558: ST_TO_ADDR
// end ; end ;
10559: GO 10358
10561: POP
10562: POP
// veh = CreateVehicle ;
10563: LD_ADDR_VAR 0 16
10567: PUSH
10568: CALL_OW 45
10572: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10573: LD_VAR 0 16
10577: PPUSH
10578: LD_VAR 0 1
10582: PPUSH
10583: LD_INT 0
10585: PPUSH
10586: CALL_OW 49
// if vehcontrol = 1 then
10590: LD_VAR 0 7
10594: PUSH
10595: LD_INT 1
10597: EQUAL
10598: IFFALSE 10655
// begin hc_gallery =  ;
10600: LD_ADDR_OWVAR 33
10604: PUSH
10605: LD_STRING 
10607: ST_TO_ADDR
// hc_name =  ;
10608: LD_ADDR_OWVAR 26
10612: PUSH
10613: LD_STRING 
10615: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10616: LD_INT 0
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: LD_VAR 0 4
10626: PPUSH
10627: CALL_OW 380
// un = CreateHuman ;
10631: LD_ADDR_VAR 0 15
10635: PUSH
10636: CALL_OW 44
10640: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10641: LD_VAR 0 15
10645: PPUSH
10646: LD_VAR 0 16
10650: PPUSH
10651: CALL_OW 52
// end ; i = i + 1 ;
10655: LD_ADDR_VAR 0 13
10659: PUSH
10660: LD_VAR 0 13
10664: PUSH
10665: LD_INT 1
10667: PLUS
10668: ST_TO_ADDR
// end ; until i = vehCount ;
10669: LD_VAR 0 13
10673: PUSH
10674: LD_VAR 0 3
10678: EQUAL
10679: IFFALSE 9331
// repeat wait ( 0 0$1 ) ;
10681: LD_INT 35
10683: PPUSH
10684: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10688: LD_ADDR_VAR 0 20
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_VAR 0 2
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 24
10717: PUSH
10718: LD_INT 661
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: PPUSH
10730: CALL_OW 69
10734: ST_TO_ADDR
// if vehicleOK_list > 0 then
10735: LD_VAR 0 20
10739: PUSH
10740: LD_INT 0
10742: GREATER
10743: IFFALSE 10934
// begin for i in vehicleOK_list do
10745: LD_ADDR_VAR 0 13
10749: PUSH
10750: LD_VAR 0 20
10754: PUSH
10755: FOR_IN
10756: IFFALSE 10932
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10758: LD_ADDR_VAR 0 21
10762: PUSH
10763: LD_INT 22
10765: PUSH
10766: LD_VAR 0 11
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 69
10779: PPUSH
10780: LD_VAR 0 13
10784: PPUSH
10785: CALL_OW 74
10789: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10790: LD_ADDR_VAR 0 22
10794: PUSH
10795: LD_INT 22
10797: PUSH
10798: LD_VAR 0 11
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 2
10809: PUSH
10810: LD_INT 59
10812: PUSH
10813: EMPTY
10814: LIST
10815: PUSH
10816: LD_INT 21
10818: PUSH
10819: LD_INT 1
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 21
10828: PUSH
10829: LD_INT 2
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: PPUSH
10854: LD_VAR 0 13
10858: PPUSH
10859: CALL_OW 74
10863: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10864: LD_VAR 0 13
10868: PPUSH
10869: LD_VAR 0 21
10873: PPUSH
10874: CALL_OW 296
10878: PUSH
10879: LD_INT 8
10881: PLUS
10882: PUSH
10883: LD_VAR 0 13
10887: PPUSH
10888: LD_VAR 0 22
10892: PPUSH
10893: CALL_OW 296
10897: LESS
10898: IFFALSE 10916
// begin ComAttackUnit ( i , target1 ) ;
10900: LD_VAR 0 13
10904: PPUSH
10905: LD_VAR 0 21
10909: PPUSH
10910: CALL_OW 115
// end else
10914: GO 10930
// begin ComAttackUnit ( i , target2 ) ;
10916: LD_VAR 0 13
10920: PPUSH
10921: LD_VAR 0 22
10925: PPUSH
10926: CALL_OW 115
// end ; end ;
10930: GO 10755
10932: POP
10933: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10934: LD_INT 22
10936: PUSH
10937: LD_VAR 0 2
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 21
10948: PUSH
10949: LD_INT 2
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PPUSH
10960: CALL_OW 69
10964: PUSH
10965: LD_INT 0
10967: EQUAL
10968: IFFALSE 10681
// end ; end_of_file
10970: LD_VAR 0 12
10974: RET
// every 1 do var i ;
10975: GO 10977
10977: DISABLE
10978: LD_INT 0
10980: PPUSH
// begin CenterOnXY ( 53 , 40 ) ;
10981: LD_INT 53
10983: PPUSH
10984: LD_INT 40
10986: PPUSH
10987: CALL_OW 84
// wait ( 0 0$5 ) ;
10991: LD_INT 175
10993: PPUSH
10994: CALL_OW 67
// CenterNowOnUnits ( Donaldson ) ;
10998: LD_EXP 13
11002: PPUSH
11003: CALL_OW 87
// Say ( Donaldson , D1-Don-1 ) ;
11007: LD_EXP 13
11011: PPUSH
11012: LD_STRING D1-Don-1
11014: PPUSH
11015: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
11019: LD_EXP 17
11023: PPUSH
11024: LD_STRING D1-Har-1
11026: PPUSH
11027: CALL_OW 94
// Say ( Donaldson , D1-Don-2 ) ;
11031: LD_EXP 13
11035: PPUSH
11036: LD_STRING D1-Don-2
11038: PPUSH
11039: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
11043: LD_EXP 17
11047: PPUSH
11048: LD_STRING D1-Har-2
11050: PPUSH
11051: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
11055: LD_INT 53
11057: PPUSH
11058: LD_INT 40
11060: PPUSH
11061: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
11065: LD_INT 35
11067: PPUSH
11068: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
11072: LD_ADDR_VAR 0 1
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 6
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: PPUSH
11090: CALL_OW 69
11094: PUSH
11095: FOR_IN
11096: IFFALSE 11115
// ComAgressiveMove ( i , 54 , 20 ) ;
11098: LD_VAR 0 1
11102: PPUSH
11103: LD_INT 54
11105: PPUSH
11106: LD_INT 20
11108: PPUSH
11109: CALL_OW 114
11113: GO 11095
11115: POP
11116: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 ;
11117: LD_INT 22
11119: PUSH
11120: LD_INT 6
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 21
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 24
11139: PUSH
11140: LD_INT 250
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: PPUSH
11152: CALL_OW 69
11156: PUSH
11157: LD_INT 0
11159: EQUAL
11160: IFFALSE 11065
// InGameOff ;
11162: CALL_OW 9
// SaveForQuickRestart ;
11166: CALL_OW 22
// end ;
11170: PPOPN 1
11172: END
// every 3 3$0 do
11173: GO 11175
11175: DISABLE
// begin PrepareSupportFromDelta ;
11176: CALL 774 0 0
// firstAttack = 1 ;
11180: LD_ADDR_EXP 27
11184: PUSH
11185: LD_INT 1
11187: ST_TO_ADDR
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
11188: LD_INT 4
11190: PPUSH
11191: LD_INT 22
11193: PUSH
11194: LD_INT 1
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 70
11219: PPUSH
11220: LD_STRING D2-Sol1-1
11222: PPUSH
11223: LD_STRING D2-FSol1-1
11225: PPUSH
11226: CALL 2269 0 3
// if IsOK ( Donaldson ) then
11230: LD_EXP 13
11234: PPUSH
11235: CALL_OW 302
11239: IFFALSE 11253
// Say ( Donaldson , D2-Don-1 ) ;
11241: LD_EXP 13
11245: PPUSH
11246: LD_STRING D2-Don-1
11248: PPUSH
11249: CALL_OW 88
// end ;
11253: END
// every 0 0$1 trigger firstAttack = 1 do
11254: LD_EXP 27
11258: PUSH
11259: LD_INT 1
11261: EQUAL
11262: IFFALSE 11360
11264: GO 11266
11266: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , 6 , rand ( 5 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
11267: LD_INT 6
11269: PPUSH
11270: LD_INT 3
11272: PPUSH
11273: LD_INT 5
11275: PPUSH
11276: LD_INT 6
11278: PPUSH
11279: CALL_OW 12
11283: PUSH
11284: LD_INT 6
11286: PUSH
11287: LD_INT 5
11289: PPUSH
11290: LD_INT 7
11292: PPUSH
11293: CALL_OW 12
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_OWVAR 67
11307: ARRAY
11308: PPUSH
11309: LD_INT 0
11311: PPUSH
11312: LD_INT 0
11314: PPUSH
11315: LD_INT 0
11317: PPUSH
11318: LD_INT 0
11320: PPUSH
11321: LD_EXP 20
11325: PPUSH
11326: LD_EXP 21
11330: PPUSH
11331: CALL_OW 12
11335: PPUSH
11336: LD_INT 16
11338: PPUSH
11339: LD_INT 7
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: LD_INT 3
11350: PPUSH
11351: CALL_OW 12
11355: PPUSH
11356: CALL 5818 0 12
11360: END
// every 0 0$1 trigger firstAttack = 1 do
11361: LD_EXP 27
11365: PUSH
11366: LD_INT 1
11368: EQUAL
11369: IFFALSE 11444
11371: GO 11373
11373: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 3 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
11374: LD_INT 16
11376: PPUSH
11377: LD_INT 6
11379: PPUSH
11380: LD_INT 3
11382: PPUSH
11383: LD_INT 5
11385: PPUSH
11386: CALL_OW 12
11390: PPUSH
11391: LD_EXP 20
11395: PPUSH
11396: LD_EXP 21
11400: PPUSH
11401: CALL_OW 12
11405: PPUSH
11406: LD_INT 3
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: LD_INT 3
11414: PPUSH
11415: LD_INT 42
11417: PUSH
11418: LD_INT 43
11420: PUSH
11421: LD_INT 44
11423: PUSH
11424: LD_INT 46
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: PPUSH
11433: EMPTY
11434: PPUSH
11435: EMPTY
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL 9297 0 11
11444: END
// every 9 9$0 do
11445: GO 11447
11447: DISABLE
// begin PrepareMacmillanSquad ;
11448: CALL 892 0 0
// Say ( JMM , D3-JMM-1 ) ;
11452: LD_EXP 1
11456: PPUSH
11457: LD_STRING D3-JMM-1
11459: PPUSH
11460: CALL_OW 88
// if IsOK ( Donaldson ) then
11464: LD_EXP 13
11468: PPUSH
11469: CALL_OW 302
11473: IFFALSE 11489
// begin Say ( Donaldson , D3-Don-1 ) ;
11475: LD_EXP 13
11479: PPUSH
11480: LD_STRING D3-Don-1
11482: PPUSH
11483: CALL_OW 88
// end else
11487: GO 11554
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
11489: LD_INT 4
11491: PPUSH
11492: LD_INT 22
11494: PUSH
11495: LD_INT 1
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 21
11504: PUSH
11505: LD_INT 1
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 26
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 70
11531: PPUSH
11532: LD_STRING D3-Sol1-1
11534: PPUSH
11535: LD_STRING D3-Sol1-1
11537: PPUSH
11538: CALL 2269 0 3
// Say ( JMM , D3-JMM-2 ) ;
11542: LD_EXP 1
11546: PPUSH
11547: LD_STRING D3-JMM-2
11549: PPUSH
11550: CALL_OW 88
// end ; if IsOK ( Joan ) then
11554: LD_EXP 2
11558: PPUSH
11559: CALL_OW 302
11563: IFFALSE 11589
// begin Say ( Joan , D3a-Joan-1 ) ;
11565: LD_EXP 2
11569: PPUSH
11570: LD_STRING D3a-Joan-1
11572: PPUSH
11573: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
11577: LD_EXP 1
11581: PPUSH
11582: LD_STRING D3a-JMM-1
11584: PPUSH
11585: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
11589: LD_INT 22
11591: PUSH
11592: LD_INT 1
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 21
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 26
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 1
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 25
11634: PUSH
11635: LD_INT 2
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 25
11644: PUSH
11645: LD_INT 3
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 25
11654: PUSH
11655: LD_INT 4
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 69
11679: PUSH
11680: LD_EXP 1
11684: PUSH
11685: EMPTY
11686: LIST
11687: DIFF
11688: PPUSH
11689: LD_STRING DCa-Sol1-1
11691: PPUSH
11692: LD_STRING DCa-Sol1-1
11694: PPUSH
11695: CALL 2269 0 3
// Say ( JMM , DCb-JMM-1 ) ;
11699: LD_EXP 1
11703: PPUSH
11704: LD_STRING DCb-JMM-1
11706: PPUSH
11707: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
11711: LD_INT 22
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 21
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 26
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 2
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 4
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 69
11801: PUSH
11802: LD_EXP 1
11806: PUSH
11807: EMPTY
11808: LIST
11809: DIFF
11810: PPUSH
11811: LD_STRING DCb-Sol1-1
11813: PPUSH
11814: LD_STRING DCb-Sol1-1
11816: PPUSH
11817: CALL 2269 0 3
// Say ( JMM , DCb-JMM-2 ) ;
11821: LD_EXP 1
11825: PPUSH
11826: LD_STRING DCb-JMM-2
11828: PPUSH
11829: CALL_OW 88
// JMMArrive = 1 ;
11833: LD_ADDR_EXP 29
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// secondAttack = 1 ;
11841: LD_ADDR_EXP 28
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// end ;
11849: END
// every 13 13$0 trigger JMMArrive = 1 do
11850: LD_EXP 29
11854: PUSH
11855: LD_INT 1
11857: EQUAL
11858: IFFALSE 11931
11860: GO 11862
11862: DISABLE
// begin DialogueOn ;
11863: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
11867: LD_EXP 18
11871: PPUSH
11872: LD_STRING D4-Pow-1
11874: PPUSH
11875: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_STRING D4-JMM-1
11886: PPUSH
11887: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
11891: LD_EXP 18
11895: PPUSH
11896: LD_STRING D4-Pow-2
11898: PPUSH
11899: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
11903: LD_EXP 1
11907: PPUSH
11908: LD_STRING D4-JMM-2
11910: PPUSH
11911: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
11915: LD_EXP 18
11919: PPUSH
11920: LD_STRING D4-Pow-3
11922: PPUSH
11923: CALL_OW 94
// DialogueOff ;
11927: CALL_OW 7
// end ;
11931: END
// every 20 20$0 trigger JMMArrive = 1 do
11932: LD_EXP 29
11936: PUSH
11937: LD_INT 1
11939: EQUAL
11940: IFFALSE 11965
11942: GO 11944
11944: DISABLE
// begin DialogueOn ;
11945: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
11949: LD_EXP 18
11953: PPUSH
11954: LD_STRING D4a-Pow-1
11956: PPUSH
11957: CALL_OW 94
// DialogueOff ;
11961: CALL_OW 7
// end ;
11965: END
// every 30 30$0 trigger JMMArrive = 1 do
11966: LD_EXP 29
11970: PUSH
11971: LD_INT 1
11973: EQUAL
11974: IFFALSE 11991
11976: GO 11978
11978: DISABLE
// begin PrepareSikorsky ;
11979: CALL 1113 0 0
// PrepareSikorskyArmy ;
11983: CALL 1258 0 0
// PrepareSikorskyTanks ;
11987: CALL 1366 0 0
// end ; end_of_file
11991: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 255
12001: PUSH
12002: LD_INT 3
12004: EQUAL
12005: IFFALSE 12325
// begin if GetBType ( building ) = b_depot then
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 266
12016: PUSH
12017: LD_INT 0
12019: EQUAL
12020: IFFALSE 12084
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: CALL_OW 274
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: LD_INT 5000
12037: PPUSH
12038: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 274
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: LD_INT 5000
12057: PPUSH
12058: CALL_OW 277
// SetBName ( building , konev ) ;
12062: LD_VAR 0 1
12066: PPUSH
12067: LD_STRING konev
12069: PPUSH
12070: CALL_OW 500
// ruDepot = building ;
12074: LD_ADDR_EXP 23
12078: PUSH
12079: LD_VAR 0 1
12083: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
12084: LD_VAR 0 1
12088: PPUSH
12089: CALL_OW 266
12093: PUSH
12094: LD_INT 0
12096: EQUAL
12097: PUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL_OW 266
12107: PUSH
12108: LD_INT 2
12110: EQUAL
12111: OR
12112: PUSH
12113: LD_VAR 0 1
12117: PPUSH
12118: CALL_OW 266
12122: PUSH
12123: LD_INT 4
12125: EQUAL
12126: OR
12127: IFFALSE 12138
// ComUpgrade ( building ) ;
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 146
// if GetBType ( building ) = b_lab then
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 266
12147: PUSH
12148: LD_INT 6
12150: EQUAL
12151: IFFALSE 12202
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
12153: LD_VAR 0 1
12157: PPUSH
12158: LD_INT 10
12160: PPUSH
12161: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: LD_INT 12
12172: PPUSH
12173: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
12177: LD_INT 3
12179: PPUSH
12180: LD_VAR 0 1
12184: PPUSH
12185: LD_INT 3
12187: PPUSH
12188: CALL 3319 0 3
// ruLab = building ;
12192: LD_ADDR_EXP 24
12196: PUSH
12197: LD_VAR 0 1
12201: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
12202: LD_VAR 0 1
12206: PPUSH
12207: CALL_OW 266
12211: PUSH
12212: LD_INT 32
12214: EQUAL
12215: IFFALSE 12252
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
12217: LD_VAR 0 1
12221: PPUSH
12222: LD_INT 43
12224: PUSH
12225: LD_INT 44
12227: PUSH
12228: LD_INT 46
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 1
12238: PPUSH
12239: LD_INT 3
12241: PPUSH
12242: CALL_OW 12
12246: ARRAY
12247: PPUSH
12248: CALL_OW 208
// if GetBType ( building ) = b_turret then
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 266
12261: PUSH
12262: LD_INT 33
12264: EQUAL
12265: IFFALSE 12302
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
12267: LD_VAR 0 1
12271: PPUSH
12272: LD_INT 43
12274: PUSH
12275: LD_INT 44
12277: PUSH
12278: LD_INT 46
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 1
12288: PPUSH
12289: LD_INT 3
12291: PPUSH
12292: CALL_OW 12
12296: ARRAY
12297: PPUSH
12298: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 266
12311: PUSH
12312: LD_INT 24
12314: EQUAL
12315: IFFALSE 12325
// russianAI = 1 ;
12317: LD_ADDR_EXP 22
12321: PUSH
12322: LD_INT 1
12324: ST_TO_ADDR
// end ; end ;
12325: PPOPN 1
12327: END
// on UpgradeComplete ( building ) do var i ;
12328: LD_INT 0
12330: PPUSH
// begin if GetSide ( building ) = 3 then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 255
12340: PUSH
12341: LD_INT 3
12343: EQUAL
12344: IFFALSE 12496
// begin if GetBType ( building ) = b_factory then
12346: LD_VAR 0 1
12350: PPUSH
12351: CALL_OW 266
12355: PUSH
12356: LD_INT 3
12358: EQUAL
12359: IFFALSE 12426
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
12361: LD_ADDR_VAR 0 2
12365: PUSH
12366: LD_INT 22
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 3
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 69
12394: PUSH
12395: FOR_IN
12396: IFFALSE 12414
// ComEnterUnit ( i , building ) ;
12398: LD_VAR 0 2
12402: PPUSH
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 120
12412: GO 12395
12414: POP
12415: POP
// ruFab = building ;
12416: LD_ADDR_EXP 25
12420: PUSH
12421: LD_VAR 0 1
12425: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
12426: LD_VAR 0 1
12430: PPUSH
12431: CALL_OW 266
12435: PUSH
12436: LD_INT 8
12438: EQUAL
12439: IFFALSE 12496
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
12441: LD_ADDR_VAR 0 2
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 25
12458: PUSH
12459: LD_INT 4
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: PUSH
12475: FOR_IN
12476: IFFALSE 12494
// ComEnterUnit ( i , building ) ;
12478: LD_VAR 0 2
12482: PPUSH
12483: LD_VAR 0 1
12487: PPUSH
12488: CALL_OW 120
12492: GO 12475
12494: POP
12495: POP
// end ; end ;
12496: PPOPN 2
12498: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 247
12508: PUSH
12509: LD_INT 2
12511: EQUAL
12512: PUSH
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 263
12522: PUSH
12523: LD_INT 3
12525: EQUAL
12526: AND
12527: PUSH
12528: LD_EXP 30
12532: PUSH
12533: LD_INT 0
12535: EQUAL
12536: AND
12537: IFFALSE 12655
// begin varEvent1 = 1 ;
12539: LD_ADDR_EXP 30
12543: PUSH
12544: LD_INT 1
12546: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
12556: LD_INT 22
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 21
12568: PUSH
12569: LD_INT 1
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 2
12578: PUSH
12579: LD_INT 25
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 2
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 25
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 25
12611: PUSH
12612: LD_INT 4
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: PPUSH
12631: CALL_OW 69
12635: PUSH
12636: LD_EXP 1
12640: PUSH
12641: EMPTY
12642: LIST
12643: DIFF
12644: PPUSH
12645: LD_STRING DC-Sol1-1
12647: PPUSH
12648: LD_STRING DC-FSol1-1
12650: PPUSH
12651: CALL 2269 0 3
// end ; end ; end_of_file
12655: PPOPN 1
12657: END
// every 0 0$1 do
12658: GO 12660
12660: DISABLE
// begin enable ;
12661: ENABLE
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
12662: LD_INT 3
12664: PPUSH
12665: LD_INT 6
12667: PPUSH
12668: CALL 3404 0 2
// if russianAI = 1 then
12672: LD_EXP 22
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12762
// begin RepairBuilding ( 3 , ruDepot ) ;
12682: LD_INT 3
12684: PPUSH
12685: LD_EXP 23
12689: PPUSH
12690: CALL 3688 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
12694: LD_INT 3
12696: PPUSH
12697: LD_INT 7
12699: PPUSH
12700: LD_INT 6
12702: PPUSH
12703: LD_EXP 24
12707: PPUSH
12708: CALL 4153 0 4
// RebuildBuildings ( 3 , ruDestroyBuilds ) ;
12712: LD_INT 3
12714: PPUSH
12715: LD_EXP 26
12719: PPUSH
12720: CALL 3947 0 2
// RepairVehicle ( 3 , RussianRepairArea , 93 , 93 , 1 ) ;
12724: LD_INT 3
12726: PPUSH
12727: LD_INT 8
12729: PPUSH
12730: LD_INT 93
12732: PPUSH
12733: LD_INT 93
12735: PPUSH
12736: LD_INT 1
12738: PPUSH
12739: CALL 4419 0 5
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
12743: LD_INT 6
12745: PPUSH
12746: LD_INT 8
12748: PPUSH
12749: LD_INT 93
12751: PPUSH
12752: LD_INT 93
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL 4419 0 5
// end ; if SikorskyArrive = 1 then
12762: LD_EXP 16
12766: PUSH
12767: LD_INT 1
12769: EQUAL
12770: IFFALSE 12791
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
12772: LD_INT 3
12774: PPUSH
12775: LD_INT 10
12777: PPUSH
12778: LD_INT 53
12780: PPUSH
12781: LD_INT 59
12783: PPUSH
12784: LD_INT 3
12786: PPUSH
12787: CALL 4419 0 5
// end ;
12791: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
12792: LD_EXP 22
12796: PUSH
12797: LD_INT 1
12799: EQUAL
12800: PUSH
12801: LD_EXP 25
12805: PPUSH
12806: CALL_OW 302
12810: AND
12811: PUSH
12812: LD_EXP 25
12816: PPUSH
12817: CALL_OW 255
12821: PUSH
12822: LD_INT 3
12824: EQUAL
12825: AND
12826: PUSH
12827: LD_INT 22
12829: PUSH
12830: LD_INT 3
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 21
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 69
12855: PUSH
12856: LD_INT 0
12858: EQUAL
12859: AND
12860: IFFALSE 13055
12862: GO 12864
12864: DISABLE
// begin enable ;
12865: ENABLE
// if Difficulty = 1 then
12866: LD_OWVAR 67
12870: PUSH
12871: LD_INT 1
12873: EQUAL
12874: IFFALSE 12933
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 2 , 6 ) , 1 , [ 43 , 43 , 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
12876: LD_INT 3
12878: PPUSH
12879: LD_EXP 25
12883: PPUSH
12884: LD_INT 2
12886: PPUSH
12887: LD_INT 6
12889: PPUSH
12890: CALL_OW 12
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_INT 43
12900: PUSH
12901: LD_INT 43
12903: PUSH
12904: LD_INT 43
12906: PUSH
12907: LD_INT 44
12909: PUSH
12910: LD_INT 46
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: PPUSH
12920: LD_INT 1
12922: PPUSH
12923: LD_INT 3
12925: PPUSH
12926: LD_INT 24
12928: PPUSH
12929: CALL 5254 0 8
// if Difficulty = 2 then
12933: LD_OWVAR 67
12937: PUSH
12938: LD_INT 2
12940: EQUAL
12941: IFFALSE 13000
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 3 , 6 ) , 1 , [ 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
12943: LD_INT 3
12945: PPUSH
12946: LD_EXP 25
12950: PPUSH
12951: LD_INT 3
12953: PPUSH
12954: LD_INT 6
12956: PPUSH
12957: CALL_OW 12
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_INT 43
12967: PUSH
12968: LD_INT 44
12970: PUSH
12971: LD_INT 44
12973: PUSH
12974: LD_INT 44
12976: PUSH
12977: LD_INT 46
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PPUSH
12987: LD_INT 1
12989: PPUSH
12990: LD_INT 3
12992: PPUSH
12993: LD_INT 24
12995: PPUSH
12996: CALL 5254 0 8
// if Difficulty = 3 then
13000: LD_OWVAR 67
13004: PUSH
13005: LD_INT 3
13007: EQUAL
13008: IFFALSE 13055
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 4 , 6 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
13010: LD_INT 3
13012: PPUSH
13013: LD_EXP 25
13017: PPUSH
13018: LD_INT 4
13020: PPUSH
13021: LD_INT 6
13023: PPUSH
13024: CALL_OW 12
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: LD_INT 44
13034: PUSH
13035: LD_INT 46
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: LD_INT 3
13047: PPUSH
13048: LD_INT 24
13050: PPUSH
13051: CALL 5254 0 8
// end ; end_of_file
13055: END
