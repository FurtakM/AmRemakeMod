// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7438 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6215 0 0
// PrepareRussians ;
 229: CALL 6533 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8859 0 6
// PrepareCutsceneAttack ;
 312: CALL 6267 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6951 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6951 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6951 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6951 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6951 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6951 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6951 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6951 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6951 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6951 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6951 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6951 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6951 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6951 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6951 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6951 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 52
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 2982
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2805
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// end else
2803: GO 2947
// begin if bc_type = 4 then
2805: LD_OWVAR 42
2809: PUSH
2810: LD_INT 4
2812: EQUAL
2813: IFFALSE 2862
// begin bc_type = 5 ;
2815: LD_ADDR_OWVAR 42
2819: PUSH
2820: LD_INT 5
2822: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2823: LD_ADDR_VAR 0 4
2827: PUSH
2828: LD_VAR 0 3
2832: PUSH
2833: LD_INT 2
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 4
2853: ARRAY
2854: PPUSH
2855: CALL_OW 47
2859: ST_TO_ADDR
// end else
2860: GO 2947
// begin bc_type := i [ 1 ] ;
2862: LD_ADDR_OWVAR 42
2866: PUSH
2867: LD_VAR 0 3
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2876: LD_STRING 06_remoteVehs_1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 30
2886: PUSH
2887: LD_INT 1
2889: EQUAL
2890: PUSH
2891: LD_OWVAR 42
2895: PUSH
2896: LD_INT 7
2898: EQUAL
2899: AND
2900: IFFALSE 2910
// bc_type := b_lab_full ;
2902: LD_ADDR_OWVAR 42
2906: PUSH
2907: LD_INT 8
2909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 2
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PUSH
2929: LD_INT 3
2931: ARRAY
2932: PPUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 4
2940: ARRAY
2941: PPUSH
2942: CALL_OW 47
2946: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2947: LD_VAR 0 4
2951: PPUSH
2952: CALL_OW 266
2956: PUSH
2957: LD_INT 32
2959: EQUAL
2960: IFFALSE 2980
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2962: LD_VAR 0 4
2966: PPUSH
2967: LD_VAR 0 3
2971: PUSH
2972: LD_INT 7
2974: ARRAY
2975: PPUSH
2976: CALL_OW 431
// end ;
2980: GO 2642
2982: POP
2983: POP
// if not amDepot then
2984: LD_EXP 37
2988: NOT
2989: IFFALSE 3026
// begin bc_type := b_warehouse ;
2991: LD_ADDR_OWVAR 42
2995: PUSH
2996: LD_INT 1
2998: ST_TO_ADDR
// bc_level := 6 ;
2999: LD_ADDR_OWVAR 43
3003: PUSH
3004: LD_INT 6
3006: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3007: LD_ADDR_EXP 37
3011: PUSH
3012: LD_INT 52
3014: PPUSH
3015: LD_INT 12
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 47
3025: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3026: LD_EXP 37
3030: PPUSH
3031: LD_STRING gamma
3033: PPUSH
3034: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3038: LD_EXP 37
3042: PPUSH
3043: CALL_OW 274
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: LD_INT 500
3053: PUSH
3054: LD_INT 420
3056: PUSH
3057: LD_INT 350
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_OWVAR 67
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3075: LD_EXP 37
3079: PPUSH
3080: CALL_OW 274
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: LD_INT 200
3090: PPUSH
3091: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3095: LD_INT 22
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: LD_INT 30
3107: PUSH
3108: LD_INT 3
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PPUSH
3119: CALL_OW 69
3123: IFFALSE 3371
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3125: LD_ADDR_VAR 0 4
3129: PUSH
3130: LD_INT 22
3132: PUSH
3133: LD_INT 1
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 30
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PPUSH
3154: CALL_OW 69
3158: PUSH
3159: LD_INT 1
3161: ARRAY
3162: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 4
3172: PPUSH
3173: CALL_OW 250
3177: PPUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: CALL_OW 251
3187: PPUSH
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 254
3197: PPUSH
3198: CALL 16771 0 3
3202: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: LD_INT 19
3210: PUSH
3211: LD_INT 17
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3218: LD_STRING 06_remoteVehs_1
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 30
3228: IFFALSE 3251
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 20
3245: PPUSH
3246: CALL_OW 2
3250: ST_TO_ADDR
// for i in tmp do
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_VAR 0 6
3260: PUSH
3261: FOR_IN
3262: IFFALSE 3369
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: CALL_OW 428
3286: PUSH
3287: LD_INT 0
3289: EQUAL
3290: IFFALSE 3367
// begin bc_type := blist [ 1 ] ;
3292: LD_ADDR_OWVAR 42
3296: PUSH
3297: LD_VAR 0 2
3301: PUSH
3302: LD_INT 1
3304: ARRAY
3305: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3306: LD_VAR 0 3
3310: PUSH
3311: LD_INT 1
3313: ARRAY
3314: PPUSH
3315: LD_VAR 0 3
3319: PUSH
3320: LD_INT 2
3322: ARRAY
3323: PPUSH
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 3
3331: ARRAY
3332: PPUSH
3333: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_VAR 0 2
3346: PPUSH
3347: LD_INT 1
3349: PPUSH
3350: CALL_OW 3
3354: ST_TO_ADDR
// if blist = 0 then
3355: LD_VAR 0 2
3359: PUSH
3360: LD_INT 0
3362: EQUAL
3363: IFFALSE 3367
// break ;
3365: GO 3369
// end ;
3367: GO 3261
3369: POP
3370: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3371: LD_STRING 06_remoteVehs_1
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 30
3381: PUSH
3382: LD_INT 1
3384: EQUAL
3385: IFFALSE 3844
// begin bc_type = 36 ;
3387: LD_ADDR_OWVAR 42
3391: PUSH
3392: LD_INT 36
3394: ST_TO_ADDR
// bc_level = 4 ;
3395: LD_ADDR_OWVAR 43
3399: PUSH
3400: LD_INT 4
3402: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 5 ] ) then
3403: LD_EXP 37
3407: PPUSH
3408: LD_INT 36
3410: PPUSH
3411: LD_INT 62
3413: PPUSH
3414: LD_INT 12
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: LD_INT 0
3422: PPUSH
3423: CALL 17641 0 6
3427: PUSH
3428: LD_INT 92
3430: PUSH
3431: LD_INT 62
3433: PUSH
3434: LD_INT 12
3436: PUSH
3437: LD_INT 5
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: NOT
3451: AND
3452: IFFALSE 3469
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3454: LD_INT 62
3456: PPUSH
3457: LD_INT 12
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: CALL_OW 47
3467: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 5 ] ) then
3469: LD_EXP 37
3473: PPUSH
3474: LD_INT 36
3476: PPUSH
3477: LD_INT 37
3479: PPUSH
3480: LD_INT 18
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: CALL 17641 0 6
3493: PUSH
3494: LD_INT 92
3496: PUSH
3497: LD_INT 37
3499: PUSH
3500: LD_INT 18
3502: PUSH
3503: LD_INT 5
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: PPUSH
3512: CALL_OW 69
3516: NOT
3517: AND
3518: IFFALSE 3535
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3520: LD_INT 37
3522: PPUSH
3523: LD_INT 18
3525: PPUSH
3526: LD_INT 2
3528: PPUSH
3529: CALL_OW 47
3533: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 5 ] ) then
3535: LD_EXP 37
3539: PPUSH
3540: LD_INT 36
3542: PPUSH
3543: LD_INT 66
3545: PPUSH
3546: LD_INT 14
3548: PPUSH
3549: LD_INT 4
3551: PPUSH
3552: LD_INT 0
3554: PPUSH
3555: CALL 17641 0 6
3559: PUSH
3560: LD_INT 92
3562: PUSH
3563: LD_INT 66
3565: PUSH
3566: LD_INT 14
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: NOT
3583: AND
3584: IFFALSE 3601
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3586: LD_INT 66
3588: PPUSH
3589: LD_INT 14
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: CALL_OW 47
3599: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3601: LD_EXP 37
3605: PPUSH
3606: LD_INT 36
3608: PPUSH
3609: LD_INT 74
3611: PPUSH
3612: LD_INT 26
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 17641 0 6
3625: IFFALSE 3640
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3627: LD_INT 74
3629: PPUSH
3630: LD_INT 26
3632: PPUSH
3633: LD_INT 4
3635: PPUSH
3636: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3640: LD_INT 22
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 30
3652: PUSH
3653: LD_INT 36
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 69
3668: NOT
3669: IFFALSE 3673
// exit ;
3671: GO 3844
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: DOUBLE
3679: LD_INT 1
3681: DEC
3682: ST_TO_ADDR
3683: LD_INT 3
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: LD_INT 2
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_OWVAR 67
3701: ARRAY
3702: PUSH
3703: FOR_TO
3704: IFFALSE 3842
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3706: LD_ADDR_OWVAR 37
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: LD_INT 2
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 1
3726: PPUSH
3727: LD_INT 2
3729: PPUSH
3730: CALL_OW 12
3734: ARRAY
3735: PUSH
3736: LD_INT 2
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: ST_TO_ADDR
// vc_engine = 1 ;
3750: LD_ADDR_OWVAR 39
3754: PUSH
3755: LD_INT 1
3757: ST_TO_ADDR
// vc_control = 2 ;
3758: LD_ADDR_OWVAR 38
3762: PUSH
3763: LD_INT 2
3765: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3766: LD_ADDR_OWVAR 40
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 5
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 3
3790: PPUSH
3791: CALL_OW 12
3795: ARRAY
3796: ST_TO_ADDR
// veh = CreateVehicle ;
3797: LD_ADDR_VAR 0 5
3801: PUSH
3802: CALL_OW 45
3806: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3807: LD_VAR 0 5
3811: PPUSH
3812: LD_INT 4
3814: PPUSH
3815: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3819: LD_VAR 0 5
3823: PPUSH
3824: LD_INT 56
3826: PPUSH
3827: LD_INT 17
3829: PPUSH
3830: LD_INT 9
3832: PPUSH
3833: LD_INT 0
3835: PPUSH
3836: CALL_OW 50
// end ;
3840: GO 3703
3842: POP
3843: POP
// end ; end ;
3844: LD_VAR 0 1
3848: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3849: LD_INT 0
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
// uc_side = 1 ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_INT 1
3862: ST_TO_ADDR
// uc_nation = 1 ;
3863: LD_ADDR_OWVAR 21
3867: PUSH
3868: LD_INT 1
3870: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3871: LD_ADDR_EXP 14
3875: PUSH
3876: LD_STRING 06c_Denis
3878: PPUSH
3879: LD_INT 1
3881: PPUSH
3882: CALL 6951 0 2
3886: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3887: LD_EXP 14
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3902: LD_ADDR_EXP 15
3906: PUSH
3907: LD_STRING 06c_Joan
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL 6951 0 2
3917: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3918: LD_EXP 15
3922: PPUSH
3923: LD_INT 4
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3933: LD_STRING GladstoneIn07
3935: PPUSH
3936: LD_INT 0
3938: PPUSH
3939: CALL_OW 30
3943: NOT
3944: IFFALSE 4012
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3946: LD_ADDR_EXP 8
3950: PUSH
3951: LD_STRING 06c_Gladstone
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL 6951 0 2
3961: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3962: LD_EXP 8
3966: NOT
3967: PUSH
3968: LD_STRING GladstoneStayInDelta
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: CALL_OW 30
3978: AND
3979: IFFALSE 3997
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3981: LD_ADDR_EXP 8
3985: PUSH
3986: LD_STRING 05_Gladstone
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: CALL 6951 0 2
3996: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3997: LD_EXP 8
4001: PPUSH
4002: LD_INT 4
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4012: LD_STRING LisaStayInDelta
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 30
4022: IFFALSE 4055
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
4024: LD_ADDR_EXP 6
4028: PUSH
4029: LD_STRING 05_Lisa
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL 6951 0 2
4039: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4040: LD_EXP 6
4044: PPUSH
4045: LD_INT 4
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4055: LD_STRING BobbyStayInDelta
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 30
4065: IFFALSE 4098
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4067: LD_ADDR_EXP 4
4071: PUSH
4072: LD_STRING 05_Bobby
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: CALL 6951 0 2
4082: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4083: LD_EXP 4
4087: PPUSH
4088: LD_INT 4
4090: PPUSH
4091: LD_INT 0
4093: PPUSH
4094: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4098: LD_STRING CyrusStayInDelta
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 30
4108: IFFALSE 4141
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4110: LD_ADDR_EXP 5
4114: PUSH
4115: LD_STRING 05_Cyrus
4117: PPUSH
4118: LD_INT 1
4120: PPUSH
4121: CALL 6951 0 2
4125: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4126: LD_EXP 5
4130: PPUSH
4131: LD_INT 4
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4141: LD_STRING BrownStayInDelta
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 30
4151: IFFALSE 4184
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4153: LD_ADDR_EXP 2
4157: PUSH
4158: LD_STRING 05_Brown
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: CALL 6951 0 2
4168: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4169: LD_EXP 2
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4184: LD_STRING DonaldsonStayInDelta
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 30
4194: IFFALSE 4227
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4196: LD_ADDR_EXP 3
4200: PUSH
4201: LD_STRING 05_Donaldson
4203: PPUSH
4204: LD_INT 1
4206: PPUSH
4207: CALL 6951 0 2
4211: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4212: LD_EXP 3
4216: PPUSH
4217: LD_INT 4
4219: PPUSH
4220: LD_INT 0
4222: PPUSH
4223: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4227: LD_ADDR_VAR 0 4
4231: PUSH
4232: LD_STRING OthersStayInDelta
4234: PPUSH
4235: CALL_OW 31
4239: ST_TO_ADDR
// if other > 2 then
4240: LD_VAR 0 4
4244: PUSH
4245: LD_INT 2
4247: GREATER
4248: IFFALSE 4293
// begin for j = 1 to 2 do
4250: LD_ADDR_VAR 0 3
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 2
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4289
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4266: LD_VAR 0 4
4270: PUSH
4271: LD_VAR 0 3
4275: ARRAY
4276: PPUSH
4277: LD_INT 4
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 49
4287: GO 4263
4289: POP
4290: POP
// end else
4291: GO 4336
// begin for j = 1 to other do
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_VAR 0 4
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4334
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4311: LD_VAR 0 4
4315: PUSH
4316: LD_VAR 0 3
4320: ARRAY
4321: PPUSH
4322: LD_INT 4
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 49
4332: GO 4308
4334: POP
4335: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4336: LD_ADDR_VAR 0 4
4340: PUSH
4341: LD_STRING 06_other_apemans
4343: PPUSH
4344: CALL_OW 31
4348: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4349: LD_VAR 0 4
4353: PUSH
4354: LD_INT 5
4356: PUSH
4357: LD_INT 4
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_OWVAR 67
4372: ARRAY
4373: GREATEREQUAL
4374: IFFALSE 4403
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: LD_OWVAR 67
4399: ARRAY
4400: ST_TO_ADDR
4401: GO 4413
// j := other ;
4403: LD_ADDR_VAR 0 3
4407: PUSH
4408: LD_VAR 0 4
4412: ST_TO_ADDR
// for i = 1 to j do
4413: LD_ADDR_VAR 0 2
4417: PUSH
4418: DOUBLE
4419: LD_INT 1
4421: DEC
4422: ST_TO_ADDR
4423: LD_VAR 0 3
4427: PUSH
4428: FOR_TO
4429: IFFALSE 4454
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4431: LD_VAR 0 4
4435: PUSH
4436: LD_VAR 0 2
4440: ARRAY
4441: PPUSH
4442: LD_INT 4
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
4452: GO 4428
4454: POP
4455: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4456: LD_INT 4
4458: PPUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 21
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PPUSH
4483: CALL_OW 70
4487: PPUSH
4488: LD_INT 53
4490: PPUSH
4491: LD_INT 19
4493: PPUSH
4494: CALL_OW 111
// firstAttack = 1 ;
4498: LD_ADDR_EXP 33
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// end ;
4506: LD_VAR 0 1
4510: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4522: LD_ADDR_VAR 0 8
4526: PUSH
4527: LD_STRING 07_vehicles
4529: PPUSH
4530: EMPTY
4531: PPUSH
4532: CALL_OW 30
4536: ST_TO_ADDR
// uc_side := 1 ;
4537: LD_ADDR_OWVAR 20
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// uc_nation := 1 ;
4545: LD_ADDR_OWVAR 21
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// if vehicles then
4553: LD_VAR 0 8
4557: IFFALSE 4716
// begin k := 1 ;
4559: LD_ADDR_VAR 0 3
4563: PUSH
4564: LD_INT 1
4566: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: DOUBLE
4573: LD_INT 1
4575: DEC
4576: ST_TO_ADDR
4577: LD_VAR 0 8
4581: PUSH
4582: LD_INT 4
4584: DIV
4585: PUSH
4586: FOR_TO
4587: IFFALSE 4714
// begin vc_chassis = vehicles [ k ] ;
4589: LD_ADDR_OWVAR 37
4593: PUSH
4594: LD_VAR 0 8
4598: PUSH
4599: LD_VAR 0 3
4603: ARRAY
4604: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4605: LD_ADDR_OWVAR 39
4609: PUSH
4610: LD_VAR 0 8
4614: PUSH
4615: LD_VAR 0 3
4619: PUSH
4620: LD_INT 1
4622: PLUS
4623: ARRAY
4624: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4625: LD_ADDR_OWVAR 38
4629: PUSH
4630: LD_VAR 0 8
4634: PUSH
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 2
4642: PLUS
4643: ARRAY
4644: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4645: LD_ADDR_OWVAR 40
4649: PUSH
4650: LD_VAR 0 8
4654: PUSH
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 3
4662: PLUS
4663: ARRAY
4664: ST_TO_ADDR
// k := k + 4 ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 4
4677: PLUS
4678: ST_TO_ADDR
// veh := CreateVehicle ;
4679: LD_ADDR_VAR 0 9
4683: PUSH
4684: CALL_OW 45
4688: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4689: LD_ADDR_VAR 0 7
4693: PUSH
4694: LD_VAR 0 7
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: LD_VAR 0 9
4706: PPUSH
4707: CALL_OW 2
4711: ST_TO_ADDR
// end ;
4712: GO 4586
4714: POP
4715: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4716: LD_ADDR_EXP 1
4720: PUSH
4721: LD_EXP 43
4725: PUSH
4726: LD_STRING JMM
4728: STR
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: CALL 6951 0 2
4737: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4738: LD_EXP 12
4742: PUSH
4743: LD_INT 1
4745: EQUAL
4746: PUSH
4747: LD_EXP 12
4751: PUSH
4752: LD_INT 3
4754: EQUAL
4755: OR
4756: PUSH
4757: LD_EXP 2
4761: NOT
4762: AND
4763: IFFALSE 4816
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4765: LD_ADDR_EXP 2
4769: PUSH
4770: LD_EXP 43
4774: PUSH
4775: LD_STRING Brown
4777: STR
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL 6951 0 2
4786: ST_TO_ADDR
// if Brown then
4787: LD_EXP 2
4791: IFFALSE 4816
// tmp := Insert ( tmp , 1 , Brown ) ;
4793: LD_ADDR_VAR 0 6
4797: PUSH
4798: LD_VAR 0 6
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: LD_EXP 2
4810: PPUSH
4811: CALL_OW 2
4815: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4816: LD_EXP 12
4820: PUSH
4821: LD_INT 2
4823: EQUAL
4824: PUSH
4825: LD_EXP 12
4829: PUSH
4830: LD_INT 3
4832: EQUAL
4833: OR
4834: PUSH
4835: LD_EXP 3
4839: NOT
4840: AND
4841: IFFALSE 4894
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4843: LD_ADDR_EXP 3
4847: PUSH
4848: LD_EXP 43
4852: PUSH
4853: LD_STRING Donaldson
4855: STR
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: CALL 6951 0 2
4864: ST_TO_ADDR
// if Donaldson then
4865: LD_EXP 3
4869: IFFALSE 4894
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4871: LD_ADDR_VAR 0 6
4875: PUSH
4876: LD_VAR 0 6
4880: PPUSH
4881: LD_INT 1
4883: PPUSH
4884: LD_EXP 3
4888: PPUSH
4889: CALL_OW 2
4893: ST_TO_ADDR
// end ; if not Bobby then
4894: LD_EXP 4
4898: NOT
4899: IFFALSE 4952
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4901: LD_ADDR_EXP 4
4905: PUSH
4906: LD_EXP 43
4910: PUSH
4911: LD_STRING Bobby
4913: STR
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL 6951 0 2
4922: ST_TO_ADDR
// if Bobby then
4923: LD_EXP 4
4927: IFFALSE 4952
// tmp := Insert ( tmp , 1 , Bobby ) ;
4929: LD_ADDR_VAR 0 6
4933: PUSH
4934: LD_VAR 0 6
4938: PPUSH
4939: LD_INT 1
4941: PPUSH
4942: LD_EXP 4
4946: PPUSH
4947: CALL_OW 2
4951: ST_TO_ADDR
// end ; if not Cyrus then
4952: LD_EXP 5
4956: NOT
4957: IFFALSE 5010
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4959: LD_ADDR_EXP 5
4963: PUSH
4964: LD_EXP 43
4968: PUSH
4969: LD_STRING Cyrus
4971: STR
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL 6951 0 2
4980: ST_TO_ADDR
// if Cyrus then
4981: LD_EXP 5
4985: IFFALSE 5010
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_VAR 0 6
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: LD_EXP 5
5004: PPUSH
5005: CALL_OW 2
5009: ST_TO_ADDR
// end ; if not Lisa then
5010: LD_EXP 6
5014: NOT
5015: IFFALSE 5068
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5017: LD_ADDR_EXP 6
5021: PUSH
5022: LD_EXP 43
5026: PUSH
5027: LD_STRING Lisa
5029: STR
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL 6951 0 2
5038: ST_TO_ADDR
// if Lisa then
5039: LD_EXP 6
5043: IFFALSE 5068
// tmp := Insert ( tmp , 1 , Lisa ) ;
5045: LD_ADDR_VAR 0 6
5049: PUSH
5050: LD_VAR 0 6
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 6
5062: PPUSH
5063: CALL_OW 2
5067: ST_TO_ADDR
// end ; if not Frank then
5068: LD_EXP 7
5072: NOT
5073: IFFALSE 5126
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5075: LD_ADDR_EXP 7
5079: PUSH
5080: LD_EXP 43
5084: PUSH
5085: LD_STRING Frank
5087: STR
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: CALL 6951 0 2
5096: ST_TO_ADDR
// if Frank then
5097: LD_EXP 7
5101: IFFALSE 5126
// tmp := Insert ( tmp , 1 , Frank ) ;
5103: LD_ADDR_VAR 0 6
5107: PUSH
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: LD_EXP 7
5120: PPUSH
5121: CALL_OW 2
5125: ST_TO_ADDR
// end ; if not Kikuchi then
5126: LD_EXP 9
5130: NOT
5131: IFFALSE 5184
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5133: LD_ADDR_EXP 9
5137: PUSH
5138: LD_EXP 43
5142: PUSH
5143: LD_STRING Kikuchi
5145: STR
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL 6951 0 2
5154: ST_TO_ADDR
// if Kikuchi then
5155: LD_EXP 9
5159: IFFALSE 5184
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5161: LD_ADDR_VAR 0 6
5165: PUSH
5166: LD_VAR 0 6
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: LD_EXP 9
5178: PPUSH
5179: CALL_OW 2
5183: ST_TO_ADDR
// end ; if not Gladstone then
5184: LD_EXP 8
5188: NOT
5189: IFFALSE 5242
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5191: LD_ADDR_EXP 8
5195: PUSH
5196: LD_EXP 43
5200: PUSH
5201: LD_STRING Gladstone
5203: STR
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL 6951 0 2
5212: ST_TO_ADDR
// if Gladstone then
5213: LD_EXP 8
5217: IFFALSE 5242
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_VAR 0 6
5228: PPUSH
5229: LD_INT 1
5231: PPUSH
5232: LD_EXP 8
5236: PPUSH
5237: CALL_OW 2
5241: ST_TO_ADDR
// end ; if not Khatam then
5242: LD_EXP 10
5246: NOT
5247: IFFALSE 5300
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5249: LD_ADDR_EXP 10
5253: PUSH
5254: LD_EXP 43
5258: PUSH
5259: LD_STRING Khatam
5261: STR
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL 6951 0 2
5270: ST_TO_ADDR
// if Khatam then
5271: LD_EXP 10
5275: IFFALSE 5300
// tmp := Insert ( tmp , 1 , Khatam ) ;
5277: LD_ADDR_VAR 0 6
5281: PUSH
5282: LD_VAR 0 6
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: LD_EXP 10
5294: PPUSH
5295: CALL_OW 2
5299: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5300: LD_ADDR_VAR 0 5
5304: PUSH
5305: LD_STRING 07c_others
5307: PPUSH
5308: CALL_OW 31
5312: ST_TO_ADDR
// if others then
5313: LD_VAR 0 5
5317: IFFALSE 5405
// for i in others do
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 5
5328: PUSH
5329: FOR_IN
5330: IFFALSE 5403
// if GetClass ( i ) = 3 then
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 257
5341: PUSH
5342: LD_INT 3
5344: EQUAL
5345: IFFALSE 5372
// tmp := Insert ( tmp , 1 , i ) else
5347: LD_ADDR_VAR 0 6
5351: PUSH
5352: LD_VAR 0 6
5356: PPUSH
5357: LD_INT 1
5359: PPUSH
5360: LD_VAR 0 2
5364: PPUSH
5365: CALL_OW 2
5369: ST_TO_ADDR
5370: GO 5401
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5372: LD_ADDR_VAR 0 6
5376: PUSH
5377: LD_VAR 0 6
5381: PPUSH
5382: LD_VAR 0 6
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: PPUSH
5391: LD_VAR 0 2
5395: PPUSH
5396: CALL_OW 2
5400: ST_TO_ADDR
5401: GO 5329
5403: POP
5404: POP
// wait ( 0 0$1 ) ;
5405: LD_INT 35
5407: PPUSH
5408: CALL_OW 67
// for i in tmp do
5412: LD_ADDR_VAR 0 2
5416: PUSH
5417: LD_VAR 0 6
5421: PUSH
5422: FOR_IN
5423: IFFALSE 5555
// begin SetDir ( i , 3 ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: LD_INT 3
5432: PPUSH
5433: CALL_OW 233
// if tmp_vehs then
5437: LD_VAR 0 7
5441: IFFALSE 5516
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5443: LD_VAR 0 7
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 3
5454: PPUSH
5455: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5459: LD_VAR 0 7
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_INT 4
5470: PPUSH
5471: LD_INT 0
5473: PPUSH
5474: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5478: LD_VAR 0 2
5482: PPUSH
5483: LD_VAR 0 7
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: PPUSH
5492: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5496: LD_ADDR_VAR 0 7
5500: PUSH
5501: LD_VAR 0 7
5505: PPUSH
5506: LD_INT 1
5508: PPUSH
5509: CALL_OW 3
5513: ST_TO_ADDR
// end else
5514: GO 5531
// PlaceUnitArea ( i , GammaSupport , false ) ;
5516: LD_VAR 0 2
5520: PPUSH
5521: LD_INT 4
5523: PPUSH
5524: LD_INT 0
5526: PPUSH
5527: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_INT 77
5538: PPUSH
5539: LD_INT 16
5541: PPUSH
5542: CALL_OW 111
// wait ( 0 0$2 ) ;
5546: LD_INT 70
5548: PPUSH
5549: CALL_OW 67
// end ;
5553: GO 5422
5555: POP
5556: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_INT 4
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5572: LD_EXP 1
5576: PPUSH
5577: LD_INT 77
5579: PPUSH
5580: LD_INT 16
5582: PPUSH
5583: CALL_OW 111
// end ;
5587: LD_VAR 0 1
5591: RET
// export function PrepareSikorsky ; begin
5592: LD_INT 0
5594: PPUSH
// uc_side = 4 ;
5595: LD_ADDR_OWVAR 20
5599: PUSH
5600: LD_INT 4
5602: ST_TO_ADDR
// uc_nation = 1 ;
5603: LD_ADDR_OWVAR 21
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5611: LD_ADDR_EXP 16
5615: PUSH
5616: LD_STRING Sikorski
5618: PPUSH
5619: LD_INT 0
5621: PPUSH
5622: CALL 6951 0 2
5626: ST_TO_ADDR
// vc_engine = 1 ;
5627: LD_ADDR_OWVAR 39
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// vc_control = 1 ;
5635: LD_ADDR_OWVAR 38
5639: PUSH
5640: LD_INT 1
5642: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5643: LD_ADDR_OWVAR 40
5647: PUSH
5648: LD_INT 5
5650: PUSH
5651: LD_INT 3
5653: PUSH
5654: LD_INT 4
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_OWVAR 67
5666: ARRAY
5667: ST_TO_ADDR
// vc_chassis = 4 ;
5668: LD_ADDR_OWVAR 37
5672: PUSH
5673: LD_INT 4
5675: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5676: LD_ADDR_EXP 17
5680: PUSH
5681: CALL_OW 45
5685: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5686: LD_EXP 17
5690: PPUSH
5691: LD_INT 9
5693: PPUSH
5694: LD_INT 0
5696: PPUSH
5697: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5701: LD_EXP 16
5705: PPUSH
5706: LD_EXP 17
5710: PPUSH
5711: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5715: LD_EXP 17
5719: PPUSH
5720: LD_INT 5
5722: PPUSH
5723: CALL_OW 113
// end ;
5727: LD_VAR 0 1
5731: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
5736: PPUSH
5737: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: DOUBLE
5744: LD_INT 1
5746: DEC
5747: ST_TO_ADDR
5748: LD_INT 8
5750: PUSH
5751: LD_INT 7
5753: PUSH
5754: LD_INT 7
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: LD_OWVAR 67
5766: ARRAY
5767: PUSH
5768: FOR_TO
5769: IFFALSE 5866
// begin uc_side = 4 ;
5771: LD_ADDR_OWVAR 20
5775: PUSH
5776: LD_INT 4
5778: ST_TO_ADDR
// uc_nation = 1 ;
5779: LD_ADDR_OWVAR 21
5783: PUSH
5784: LD_INT 1
5786: ST_TO_ADDR
// hc_name =  ;
5787: LD_ADDR_OWVAR 26
5791: PUSH
5792: LD_STRING 
5794: ST_TO_ADDR
// hc_gallery =  ;
5795: LD_ADDR_OWVAR 33
5799: PUSH
5800: LD_STRING 
5802: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5803: LD_INT 0
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 5
5811: PPUSH
5812: LD_INT 8
5814: PPUSH
5815: CALL_OW 12
5819: PPUSH
5820: CALL_OW 380
// un = CreateHuman ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: CALL_OW 44
5833: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 9
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5849: LD_VAR 0 3
5853: PPUSH
5854: LD_INT 53
5856: PPUSH
5857: LD_INT 23
5859: PPUSH
5860: CALL_OW 111
// end ;
5864: GO 5768
5866: POP
5867: POP
// for i = 1 to 3 do
5868: LD_ADDR_VAR 0 2
5872: PUSH
5873: DOUBLE
5874: LD_INT 1
5876: DEC
5877: ST_TO_ADDR
5878: LD_INT 3
5880: PUSH
5881: FOR_TO
5882: IFFALSE 5979
// begin uc_side = 4 ;
5884: LD_ADDR_OWVAR 20
5888: PUSH
5889: LD_INT 4
5891: ST_TO_ADDR
// uc_nation = 1 ;
5892: LD_ADDR_OWVAR 21
5896: PUSH
5897: LD_INT 1
5899: ST_TO_ADDR
// hc_name =  ;
5900: LD_ADDR_OWVAR 26
5904: PUSH
5905: LD_STRING 
5907: ST_TO_ADDR
// hc_gallery =  ;
5908: LD_ADDR_OWVAR 33
5912: PUSH
5913: LD_STRING 
5915: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5916: LD_INT 0
5918: PPUSH
5919: LD_INT 4
5921: PPUSH
5922: LD_INT 5
5924: PPUSH
5925: LD_INT 8
5927: PPUSH
5928: CALL_OW 12
5932: PPUSH
5933: CALL_OW 380
// un = CreateHuman ;
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: CALL_OW 44
5946: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5947: LD_VAR 0 3
5951: PPUSH
5952: LD_INT 9
5954: PPUSH
5955: LD_INT 0
5957: PPUSH
5958: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5962: LD_VAR 0 3
5966: PPUSH
5967: LD_INT 53
5969: PPUSH
5970: LD_INT 23
5972: PPUSH
5973: CALL_OW 111
// end ;
5977: GO 5881
5979: POP
5980: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5981: LD_ADDR_VAR 0 2
5985: PUSH
5986: DOUBLE
5987: LD_INT 1
5989: DEC
5990: ST_TO_ADDR
5991: LD_INT 9
5993: PUSH
5994: LD_INT 8
5996: PUSH
5997: LD_INT 7
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: PUSH
6005: LD_OWVAR 67
6009: ARRAY
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6208
// begin uc_side = 4 ;
6014: LD_ADDR_OWVAR 20
6018: PUSH
6019: LD_INT 4
6021: ST_TO_ADDR
// uc_nation = 1 ;
6022: LD_ADDR_OWVAR 21
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// vc_engine = 1 ;
6030: LD_ADDR_OWVAR 39
6034: PUSH
6035: LD_INT 1
6037: ST_TO_ADDR
// vc_control = 1 ;
6038: LD_ADDR_OWVAR 38
6042: PUSH
6043: LD_INT 1
6045: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6046: LD_ADDR_OWVAR 40
6050: PUSH
6051: LD_INT 3
6053: PUSH
6054: LD_INT 4
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: LD_INT 6
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 1
6071: PPUSH
6072: LD_INT 4
6074: PPUSH
6075: CALL_OW 12
6079: ARRAY
6080: ST_TO_ADDR
// vc_chassis = 4 ;
6081: LD_ADDR_OWVAR 37
6085: PUSH
6086: LD_INT 4
6088: ST_TO_ADDR
// veh = CreateVehicle ;
6089: LD_ADDR_VAR 0 4
6093: PUSH
6094: CALL_OW 45
6098: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6099: LD_VAR 0 4
6103: PPUSH
6104: LD_INT 9
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 49
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 3
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_VAR 0 4
6170: PPUSH
6171: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6175: LD_VAR 0 4
6179: PUSH
6180: LD_VAR 0 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PPUSH
6189: LD_INT 53
6191: PPUSH
6192: LD_INT 23
6194: PPUSH
6195: CALL_OW 111
// wait ( 0 0$5 ) ;
6199: LD_INT 175
6201: PPUSH
6202: CALL_OW 67
// end ;
6206: GO 6011
6208: POP
6209: POP
// end ; end_of_file
6210: LD_VAR 0 1
6214: RET
// export function PrepareRussianCommander ; begin
6215: LD_INT 0
6217: PPUSH
// uc_side = 3 ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// uc_nation = 3 ;
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 3
6233: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6234: LD_ADDR_EXP 24
6238: PUSH
6239: LD_STRING Borodin
6241: PPUSH
6242: CALL_OW 25
6246: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6247: LD_EXP 24
6251: PPUSH
6252: LD_INT 25
6254: PPUSH
6255: LD_INT 0
6257: PPUSH
6258: CALL_OW 49
// end ;
6262: LD_VAR 0 1
6266: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6267: LD_INT 0
6269: PPUSH
6270: PPUSH
6271: PPUSH
6272: PPUSH
// for i = 1 to 10 do
6273: LD_ADDR_VAR 0 2
6277: PUSH
6278: DOUBLE
6279: LD_INT 1
6281: DEC
6282: ST_TO_ADDR
6283: LD_INT 10
6285: PUSH
6286: FOR_TO
6287: IFFALSE 6361
// begin uc_side = 6 ;
6289: LD_ADDR_OWVAR 20
6293: PUSH
6294: LD_INT 6
6296: ST_TO_ADDR
// uc_nation = 3 ;
6297: LD_ADDR_OWVAR 21
6301: PUSH
6302: LD_INT 3
6304: ST_TO_ADDR
// hc_gallery =  ;
6305: LD_ADDR_OWVAR 33
6309: PUSH
6310: LD_STRING 
6312: ST_TO_ADDR
// hc_name =  ;
6313: LD_ADDR_OWVAR 26
6317: PUSH
6318: LD_STRING 
6320: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6321: LD_INT 0
6323: PPUSH
6324: LD_INT 1
6326: PPUSH
6327: LD_INT 3
6329: PPUSH
6330: CALL_OW 380
// un = CreateHuman ;
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: CALL_OW 44
6343: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6344: LD_VAR 0 3
6348: PPUSH
6349: LD_INT 1
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 49
// end ;
6359: GO 6286
6361: POP
6362: POP
// for i = 1 to 3 do
6363: LD_ADDR_VAR 0 2
6367: PUSH
6368: DOUBLE
6369: LD_INT 1
6371: DEC
6372: ST_TO_ADDR
6373: LD_INT 3
6375: PUSH
6376: FOR_TO
6377: IFFALSE 6526
// begin uc_side = 6 ;
6379: LD_ADDR_OWVAR 20
6383: PUSH
6384: LD_INT 6
6386: ST_TO_ADDR
// uc_nation = 3 ;
6387: LD_ADDR_OWVAR 21
6391: PUSH
6392: LD_INT 3
6394: ST_TO_ADDR
// vc_engine = 1 ;
6395: LD_ADDR_OWVAR 39
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// vc_control = 1 ;
6403: LD_ADDR_OWVAR 38
6407: PUSH
6408: LD_INT 1
6410: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6411: LD_ADDR_OWVAR 40
6415: PUSH
6416: LD_INT 43
6418: PUSH
6419: LD_INT 44
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 1
6428: PPUSH
6429: LD_INT 2
6431: PPUSH
6432: CALL_OW 12
6436: ARRAY
6437: ST_TO_ADDR
// vc_chassis = 22 ;
6438: LD_ADDR_OWVAR 37
6442: PUSH
6443: LD_INT 22
6445: ST_TO_ADDR
// veh = CreateVehicle ;
6446: LD_ADDR_VAR 0 4
6450: PUSH
6451: CALL_OW 45
6455: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6456: LD_VAR 0 4
6460: PPUSH
6461: LD_INT 2
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 49
// hc_gallery =  ;
6471: LD_ADDR_OWVAR 33
6475: PUSH
6476: LD_STRING 
6478: ST_TO_ADDR
// hc_name =  ;
6479: LD_ADDR_OWVAR 26
6483: PUSH
6484: LD_STRING 
6486: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6487: LD_INT 0
6489: PPUSH
6490: LD_INT 3
6492: PPUSH
6493: LD_INT 4
6495: PPUSH
6496: CALL_OW 380
// un = CreateHuman ;
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: CALL_OW 44
6509: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6510: LD_VAR 0 3
6514: PPUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: CALL_OW 52
// end ;
6524: GO 6376
6526: POP
6527: POP
// end ;
6528: LD_VAR 0 1
6532: RET
// export function PrepareRussians ; var i , un ; begin
6533: LD_INT 0
6535: PPUSH
6536: PPUSH
6537: PPUSH
// for i = 1 to 8 do
6538: LD_ADDR_VAR 0 2
6542: PUSH
6543: DOUBLE
6544: LD_INT 1
6546: DEC
6547: ST_TO_ADDR
6548: LD_INT 8
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6638
// begin uc_side = 3 ;
6554: LD_ADDR_OWVAR 20
6558: PUSH
6559: LD_INT 3
6561: ST_TO_ADDR
// uc_nation = 3 ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_INT 3
6569: ST_TO_ADDR
// hc_gallery =  ;
6570: LD_ADDR_OWVAR 33
6574: PUSH
6575: LD_STRING 
6577: ST_TO_ADDR
// hc_name =  ;
6578: LD_ADDR_OWVAR 26
6582: PUSH
6583: LD_STRING 
6585: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6586: LD_INT 0
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: LD_EXP 25
6596: PPUSH
6597: LD_EXP 26
6601: PPUSH
6602: CALL_OW 12
6606: PPUSH
6607: CALL_OW 380
// un = CreateHuman ;
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: CALL_OW 44
6620: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6621: LD_VAR 0 3
6625: PPUSH
6626: LD_INT 3
6628: PPUSH
6629: LD_INT 0
6631: PPUSH
6632: CALL_OW 49
// end ;
6636: GO 6551
6638: POP
6639: POP
// for i = 1 to 4 do
6640: LD_ADDR_VAR 0 2
6644: PUSH
6645: DOUBLE
6646: LD_INT 1
6648: DEC
6649: ST_TO_ADDR
6650: LD_INT 4
6652: PUSH
6653: FOR_TO
6654: IFFALSE 6740
// begin uc_side = 3 ;
6656: LD_ADDR_OWVAR 20
6660: PUSH
6661: LD_INT 3
6663: ST_TO_ADDR
// uc_nation = 3 ;
6664: LD_ADDR_OWVAR 21
6668: PUSH
6669: LD_INT 3
6671: ST_TO_ADDR
// hc_gallery =  ;
6672: LD_ADDR_OWVAR 33
6676: PUSH
6677: LD_STRING 
6679: ST_TO_ADDR
// hc_name =  ;
6680: LD_ADDR_OWVAR 26
6684: PUSH
6685: LD_STRING 
6687: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6688: LD_INT 0
6690: PPUSH
6691: LD_INT 2
6693: PPUSH
6694: LD_EXP 25
6698: PPUSH
6699: LD_EXP 26
6703: PPUSH
6704: CALL_OW 12
6708: PPUSH
6709: CALL_OW 380
// un = CreateHuman ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: CALL_OW 44
6722: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6723: LD_VAR 0 3
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 0
6733: PPUSH
6734: CALL_OW 49
// end ;
6738: GO 6653
6740: POP
6741: POP
// for i = 1 to 3 do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: DOUBLE
6748: LD_INT 1
6750: DEC
6751: ST_TO_ADDR
6752: LD_INT 3
6754: PUSH
6755: FOR_TO
6756: IFFALSE 6842
// begin uc_side = 3 ;
6758: LD_ADDR_OWVAR 20
6762: PUSH
6763: LD_INT 3
6765: ST_TO_ADDR
// uc_nation = 3 ;
6766: LD_ADDR_OWVAR 21
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// hc_gallery =  ;
6774: LD_ADDR_OWVAR 33
6778: PUSH
6779: LD_STRING 
6781: ST_TO_ADDR
// hc_name =  ;
6782: LD_ADDR_OWVAR 26
6786: PUSH
6787: LD_STRING 
6789: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6790: LD_INT 0
6792: PPUSH
6793: LD_INT 3
6795: PPUSH
6796: LD_EXP 25
6800: PPUSH
6801: LD_EXP 26
6805: PPUSH
6806: CALL_OW 12
6810: PPUSH
6811: CALL_OW 380
// un = CreateHuman ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 44
6824: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6825: LD_VAR 0 3
6829: PPUSH
6830: LD_INT 3
6832: PPUSH
6833: LD_INT 0
6835: PPUSH
6836: CALL_OW 49
// end ;
6840: GO 6755
6842: POP
6843: POP
// for i = 1 to 2 do
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: DOUBLE
6850: LD_INT 1
6852: DEC
6853: ST_TO_ADDR
6854: LD_INT 2
6856: PUSH
6857: FOR_TO
6858: IFFALSE 6944
// begin uc_side = 3 ;
6860: LD_ADDR_OWVAR 20
6864: PUSH
6865: LD_INT 3
6867: ST_TO_ADDR
// uc_nation = 3 ;
6868: LD_ADDR_OWVAR 21
6872: PUSH
6873: LD_INT 3
6875: ST_TO_ADDR
// hc_gallery =  ;
6876: LD_ADDR_OWVAR 33
6880: PUSH
6881: LD_STRING 
6883: ST_TO_ADDR
// hc_name =  ;
6884: LD_ADDR_OWVAR 26
6888: PUSH
6889: LD_STRING 
6891: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6892: LD_INT 0
6894: PPUSH
6895: LD_INT 4
6897: PPUSH
6898: LD_EXP 25
6902: PPUSH
6903: LD_EXP 26
6907: PPUSH
6908: CALL_OW 12
6912: PPUSH
6913: CALL_OW 380
// un = CreateHuman ;
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: CALL_OW 44
6926: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: LD_INT 0
6937: PPUSH
6938: CALL_OW 49
// end ;
6942: GO 6857
6944: POP
6945: POP
// end ; end_of_file
6946: LD_VAR 0 1
6950: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6951: LD_INT 0
6953: PPUSH
6954: PPUSH
// if exist_mode then
6955: LD_VAR 0 2
6959: IFFALSE 6978
// unit := CreateCharacter ( ident ) else
6961: LD_ADDR_VAR 0 4
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 34
6975: ST_TO_ADDR
6976: GO 6993
// unit := NewCharacter ( ident ) ;
6978: LD_ADDR_VAR 0 4
6982: PUSH
6983: LD_VAR 0 1
6987: PPUSH
6988: CALL_OW 25
6992: ST_TO_ADDR
// result := unit ;
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_VAR 0 4
7002: ST_TO_ADDR
// end ;
7003: LD_VAR 0 3
7007: RET
// export function Video ( mode ) ; begin
7008: LD_INT 0
7010: PPUSH
// ingame_video = mode ;
7011: LD_ADDR_OWVAR 52
7015: PUSH
7016: LD_VAR 0 1
7020: ST_TO_ADDR
// interface_hidden = mode ;
7021: LD_ADDR_OWVAR 54
7025: PUSH
7026: LD_VAR 0 1
7030: ST_TO_ADDR
// end ;
7031: LD_VAR 0 2
7035: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
// rnd = rand ( 1 , characters ) ;
7041: LD_ADDR_VAR 0 6
7045: PUSH
7046: LD_INT 1
7048: PPUSH
7049: LD_VAR 0 1
7053: PPUSH
7054: CALL_OW 12
7058: ST_TO_ADDR
// for i = 1 to characters do
7059: LD_ADDR_VAR 0 5
7063: PUSH
7064: DOUBLE
7065: LD_INT 1
7067: DEC
7068: ST_TO_ADDR
7069: LD_VAR 0 1
7073: PUSH
7074: FOR_TO
7075: IFFALSE 7185
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7077: LD_VAR 0 5
7081: PUSH
7082: LD_VAR 0 6
7086: EQUAL
7087: PUSH
7088: LD_VAR 0 1
7092: PUSH
7093: LD_VAR 0 5
7097: ARRAY
7098: PPUSH
7099: CALL_OW 258
7103: PUSH
7104: LD_INT 1
7106: EQUAL
7107: AND
7108: IFFALSE 7130
// Say ( characters [ i ] , dialogMID ) ;
7110: LD_VAR 0 1
7114: PUSH
7115: LD_VAR 0 5
7119: ARRAY
7120: PPUSH
7121: LD_VAR 0 2
7125: PPUSH
7126: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7130: LD_VAR 0 5
7134: PUSH
7135: LD_VAR 0 6
7139: EQUAL
7140: PUSH
7141: LD_VAR 0 1
7145: PUSH
7146: LD_VAR 0 5
7150: ARRAY
7151: PPUSH
7152: CALL_OW 258
7156: PUSH
7157: LD_INT 2
7159: EQUAL
7160: AND
7161: IFFALSE 7183
// Say ( characters [ i ] , dialogFID ) ;
7163: LD_VAR 0 1
7167: PUSH
7168: LD_VAR 0 5
7172: ARRAY
7173: PPUSH
7174: LD_VAR 0 3
7178: PPUSH
7179: CALL_OW 88
// end ;
7183: GO 7074
7185: POP
7186: POP
// end ;
7187: LD_VAR 0 4
7191: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7192: LD_INT 0
7194: PPUSH
7195: PPUSH
7196: PPUSH
// uc_side := GetSide ( b ) ;
7197: LD_ADDR_OWVAR 20
7201: PUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 255
7211: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7212: LD_ADDR_OWVAR 21
7216: PUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: CALL_OW 248
7226: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7227: LD_INT 0
7229: PPUSH
7230: LD_INT 1
7232: PPUSH
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7242: LD_ADDR_VAR 0 5
7246: PUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: CALL_OW 254
7256: PUSH
7257: LD_INT 3
7259: MINUS
7260: ST_TO_ADDR
// if dir < 0 then
7261: LD_VAR 0 5
7265: PUSH
7266: LD_INT 0
7268: LESS
7269: IFFALSE 7285
// dir := 6 + dir ;
7271: LD_ADDR_VAR 0 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_VAR 0 5
7283: PLUS
7284: ST_TO_ADDR
// un := CreateHuman ;
7285: LD_ADDR_VAR 0 4
7289: PUSH
7290: CALL_OW 44
7294: ST_TO_ADDR
// SetDir ( un , dir ) ;
7295: LD_VAR 0 4
7299: PPUSH
7300: LD_VAR 0 5
7304: PPUSH
7305: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7309: LD_VAR 0 4
7313: PPUSH
7314: LD_VAR 0 2
7318: PPUSH
7319: CALL_OW 52
// end ;
7323: LD_VAR 0 3
7327: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7328: LD_INT 0
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
// for i = 1 to count do
7334: LD_ADDR_VAR 0 8
7338: PUSH
7339: DOUBLE
7340: LD_INT 1
7342: DEC
7343: ST_TO_ADDR
7344: LD_VAR 0 6
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7431
// begin uc_side = side ;
7352: LD_ADDR_OWVAR 20
7356: PUSH
7357: LD_VAR 0 1
7361: ST_TO_ADDR
// uc_nation = nation ;
7362: LD_ADDR_OWVAR 21
7366: PUSH
7367: LD_VAR 0 2
7371: ST_TO_ADDR
// hc_gallery =  ;
7372: LD_ADDR_OWVAR 33
7376: PUSH
7377: LD_STRING 
7379: ST_TO_ADDR
// hc_name =  ;
7380: LD_ADDR_OWVAR 26
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7388: LD_INT 0
7390: PPUSH
7391: LD_VAR 0 5
7395: PPUSH
7396: LD_VAR 0 4
7400: PPUSH
7401: CALL_OW 380
// un = CreateHuman ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: CALL_OW 44
7414: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7415: LD_VAR 0 10
7419: PPUSH
7420: LD_VAR 0 3
7424: PPUSH
7425: CALL_OW 52
// end ;
7429: GO 7349
7431: POP
7432: POP
// end ;
7433: LD_VAR 0 7
7437: RET
// export function PrepareDifficulty ; begin
7438: LD_INT 0
7440: PPUSH
// if Difficulty = 1 then
7441: LD_OWVAR 67
7445: PUSH
7446: LD_INT 1
7448: EQUAL
7449: IFFALSE 7467
// begin RuSolMinLevel = 4 ;
7451: LD_ADDR_EXP 25
7455: PUSH
7456: LD_INT 4
7458: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7459: LD_ADDR_EXP 26
7463: PUSH
7464: LD_INT 6
7466: ST_TO_ADDR
// end ; if Difficulty = 2 then
7467: LD_OWVAR 67
7471: PUSH
7472: LD_INT 2
7474: EQUAL
7475: IFFALSE 7545
// begin RuSolMinLevel = 5 ;
7477: LD_ADDR_EXP 25
7481: PUSH
7482: LD_INT 5
7484: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7485: LD_ADDR_EXP 26
7489: PUSH
7490: LD_INT 6
7492: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7493: LD_INT 51
7495: PPUSH
7496: LD_INT 3
7498: PPUSH
7499: LD_INT 1
7501: PPUSH
7502: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7506: LD_INT 57
7508: PPUSH
7509: LD_INT 3
7511: PPUSH
7512: LD_INT 1
7514: PPUSH
7515: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7519: LD_INT 57
7521: PPUSH
7522: LD_INT 6
7524: PPUSH
7525: LD_INT 2
7527: PPUSH
7528: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7532: LD_INT 51
7534: PPUSH
7535: LD_INT 6
7537: PPUSH
7538: LD_INT 2
7540: PPUSH
7541: CALL_OW 322
// end ; if Difficulty = 3 then
7545: LD_OWVAR 67
7549: PUSH
7550: LD_INT 3
7552: EQUAL
7553: IFFALSE 7636
// begin RuSolMinLevel = 5 ;
7555: LD_ADDR_EXP 25
7559: PUSH
7560: LD_INT 5
7562: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7563: LD_ADDR_EXP 26
7567: PUSH
7568: LD_INT 6
7570: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7571: LD_INT 57
7573: PPUSH
7574: LD_INT 3
7576: PPUSH
7577: LD_INT 1
7579: PPUSH
7580: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7584: LD_INT 51
7586: PPUSH
7587: LD_INT 3
7589: PPUSH
7590: LD_INT 1
7592: PPUSH
7593: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7597: LD_INT 52
7599: PPUSH
7600: LD_INT 3
7602: PPUSH
7603: LD_INT 1
7605: PPUSH
7606: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7610: LD_INT 57
7612: PPUSH
7613: LD_INT 6
7615: PPUSH
7616: LD_INT 2
7618: PPUSH
7619: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7623: LD_INT 52
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: LD_INT 2
7631: PPUSH
7632: CALL_OW 322
// end ; end ;
7636: LD_VAR 0 1
7640: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7641: LD_INT 0
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 25
7664: PUSH
7665: LD_INT 2
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7681: LD_ADDR_VAR 0 4
7685: PUSH
7686: LD_INT 4
7688: PUSH
7689: LD_INT 75
7691: PUSH
7692: LD_INT 79
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 4
7706: PUSH
7707: LD_INT 113
7709: PUSH
7710: LD_INT 94
7712: PUSH
7713: LD_INT 4
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 29
7724: PUSH
7725: LD_INT 106
7727: PUSH
7728: LD_INT 97
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 26
7742: PUSH
7743: LD_INT 93
7745: PUSH
7746: LD_INT 97
7748: PUSH
7749: LD_INT 5
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 2
7760: PUSH
7761: LD_INT 100
7763: PUSH
7764: LD_INT 89
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 17
7778: PUSH
7779: LD_INT 96
7781: PUSH
7782: LD_INT 89
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 32
7796: PUSH
7797: LD_INT 78
7799: PUSH
7800: LD_INT 94
7802: PUSH
7803: LD_INT 1
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 32
7814: PUSH
7815: LD_INT 95
7817: PUSH
7818: LD_INT 82
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 32
7832: PUSH
7833: LD_INT 104
7835: PUSH
7836: LD_INT 85
7838: PUSH
7839: LD_INT 2
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 32
7850: PUSH
7851: LD_INT 81
7853: PUSH
7854: LD_INT 78
7856: PUSH
7857: LD_INT 2
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 33
7868: PUSH
7869: LD_INT 109
7871: PUSH
7872: LD_INT 90
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 33
7886: PUSH
7887: LD_INT 88
7889: PUSH
7890: LD_INT 79
7892: PUSH
7893: LD_INT 3
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 33
7904: PUSH
7905: LD_INT 76
7907: PUSH
7908: LD_INT 87
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 26
7922: PUSH
7923: LD_INT 96
7925: PUSH
7926: LD_INT 97
7928: PUSH
7929: LD_INT 5
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 85
7943: PUSH
7944: LD_INT 84
7946: PUSH
7947: LD_INT 2
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 6
7958: PUSH
7959: LD_INT 88
7961: PUSH
7962: LD_INT 95
7964: PUSH
7965: LD_INT 0
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 19
7976: PUSH
7977: LD_INT 103
7979: PUSH
7980: LD_INT 89
7982: PUSH
7983: LD_INT 4
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 16
7994: PUSH
7995: LD_INT 97
7997: PUSH
7998: LD_INT 86
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 24
8012: PUSH
8013: LD_INT 100
8015: PUSH
8016: LD_INT 85
8018: PUSH
8019: LD_INT 3
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: ST_TO_ADDR
// for i := 1 to buildingsTab do
8049: LD_ADDR_VAR 0 2
8053: PUSH
8054: DOUBLE
8055: LD_INT 1
8057: DEC
8058: ST_TO_ADDR
8059: LD_VAR 0 4
8063: PUSH
8064: FOR_TO
8065: IFFALSE 8138
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8067: LD_VAR 0 3
8071: PPUSH
8072: LD_VAR 0 4
8076: PUSH
8077: LD_VAR 0 2
8081: ARRAY
8082: PUSH
8083: LD_INT 1
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 4
8091: PUSH
8092: LD_VAR 0 2
8096: ARRAY
8097: PUSH
8098: LD_INT 2
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 4
8106: PUSH
8107: LD_VAR 0 2
8111: ARRAY
8112: PUSH
8113: LD_INT 3
8115: ARRAY
8116: PPUSH
8117: LD_VAR 0 4
8121: PUSH
8122: LD_VAR 0 2
8126: ARRAY
8127: PUSH
8128: LD_INT 4
8130: ARRAY
8131: PPUSH
8132: CALL_OW 205
8136: GO 8064
8138: POP
8139: POP
// end ;
8140: LD_VAR 0 1
8144: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
// for i in charactersList do
8149: LD_ADDR_VAR 0 4
8153: PUSH
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_IN
8160: IFFALSE 8189
// begin if IsOk ( i ) then
8162: LD_VAR 0 4
8166: PPUSH
8167: CALL_OW 302
8171: IFFALSE 8187
// SaveCharacters ( i , ident ) ;
8173: LD_VAR 0 4
8177: PPUSH
8178: LD_VAR 0 2
8182: PPUSH
8183: CALL_OW 38
// end ;
8187: GO 8159
8189: POP
8190: POP
// end ;
8191: LD_VAR 0 3
8195: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8196: LD_INT 0
8198: PPUSH
8199: PPUSH
8200: PPUSH
8201: PPUSH
8202: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8203: LD_ADDR_VAR 0 8
8207: PUSH
8208: LD_INT 48
8210: PUSH
8211: LD_INT 49
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: LD_INT 20
8219: PUSH
8220: LD_INT 1
8222: PUSH
8223: LD_INT 51
8225: PUSH
8226: LD_INT 52
8228: PUSH
8229: LD_INT 69
8231: PUSH
8232: LD_INT 39
8234: PUSH
8235: LD_INT 34
8237: PUSH
8238: LD_INT 40
8240: PUSH
8241: LD_INT 53
8243: PUSH
8244: LD_INT 71
8246: PUSH
8247: LD_INT 57
8249: PUSH
8250: LD_INT 58
8252: PUSH
8253: LD_INT 44
8255: PUSH
8256: LD_INT 32
8258: PUSH
8259: LD_INT 27
8261: PUSH
8262: LD_INT 23
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: LD_INT 59
8270: PUSH
8271: LD_INT 54
8273: PUSH
8274: LD_INT 55
8276: PUSH
8277: LD_INT 56
8279: PUSH
8280: LD_INT 63
8282: PUSH
8283: LD_INT 64
8285: PUSH
8286: LD_INT 65
8288: PUSH
8289: LD_INT 30
8291: PUSH
8292: LD_INT 31
8294: PUSH
8295: LD_INT 21
8297: PUSH
8298: LD_INT 22
8300: PUSH
8301: LD_INT 25
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8338: LD_ADDR_VAR 0 5
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 8
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8430
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8356: LD_VAR 0 8
8360: PUSH
8361: LD_VAR 0 5
8365: ARRAY
8366: PPUSH
8367: LD_VAR 0 1
8371: PPUSH
8372: CALL_OW 321
8376: PUSH
8377: LD_INT 1
8379: EQUAL
8380: PUSH
8381: LD_VAR 0 8
8385: PUSH
8386: LD_VAR 0 5
8390: ARRAY
8391: PPUSH
8392: LD_VAR 0 3
8396: PPUSH
8397: CALL_OW 482
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: AND
8406: IFFALSE 8428
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_VAR 0 8
8417: PUSH
8418: LD_VAR 0 5
8422: ARRAY
8423: PPUSH
8424: CALL_OW 184
8428: GO 8353
8430: POP
8431: POP
// end ;
8432: LD_VAR 0 4
8436: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8437: LD_INT 0
8439: PPUSH
8440: PPUSH
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8447: LD_ADDR_VAR 0 6
8451: PUSH
8452: LD_VAR 0 2
8456: PPUSH
8457: LD_INT 22
8459: PUSH
8460: LD_VAR 0 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 56
8471: PUSH
8472: EMPTY
8473: LIST
8474: PUSH
8475: LD_INT 24
8477: PUSH
8478: LD_INT 700
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 3
8487: PUSH
8488: LD_INT 60
8490: PUSH
8491: EMPTY
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 25
8523: PUSH
8524: LD_INT 8
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 25
8533: PUSH
8534: LD_INT 9
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 70
8559: PUSH
8560: LD_EXP 24
8564: PUSH
8565: EMPTY
8566: LIST
8567: DIFF
8568: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8569: LD_ADDR_VAR 0 7
8573: PUSH
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 22
8581: PUSH
8582: LD_VAR 0 1
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 30
8593: PUSH
8594: LD_INT 32
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 58
8603: PUSH
8604: EMPTY
8605: LIST
8606: PUSH
8607: LD_INT 24
8609: PUSH
8610: LD_INT 251
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: PPUSH
8623: CALL_OW 70
8627: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8628: LD_ADDR_VAR 0 9
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 30
8655: PUSH
8656: LD_INT 4
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 30
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 24
8680: PUSH
8681: LD_INT 251
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: CALL_OW 70
8697: ST_TO_ADDR
// if barrackList > 0 then
8698: LD_VAR 0 9
8702: PUSH
8703: LD_INT 0
8705: GREATER
8706: IFFALSE 8854
// begin if turretList = 0 then
8708: LD_VAR 0 7
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: IFFALSE 8758
// begin if soldiers_list > 0 then
8718: LD_VAR 0 6
8722: PUSH
8723: LD_INT 0
8725: GREATER
8726: IFFALSE 8756
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8728: LD_VAR 0 6
8732: PPUSH
8733: LD_VAR 0 9
8737: PUSH
8738: LD_INT 1
8740: PPUSH
8741: LD_VAR 0 9
8745: PPUSH
8746: CALL_OW 12
8750: ARRAY
8751: PPUSH
8752: CALL_OW 120
// end else
8756: GO 8854
// begin for i in barrackList do
8758: LD_ADDR_VAR 0 4
8762: PUSH
8763: LD_VAR 0 9
8767: PUSH
8768: FOR_IN
8769: IFFALSE 8852
// begin insideUnits = UnitsInside ( i ) ;
8771: LD_ADDR_VAR 0 10
8775: PUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: CALL_OW 313
8785: ST_TO_ADDR
// if insideUnits > 0 then
8786: LD_VAR 0 10
8790: PUSH
8791: LD_INT 0
8793: GREATER
8794: IFFALSE 8818
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8796: LD_VAR 0 10
8800: PUSH
8801: LD_INT 1
8803: ARRAY
8804: PPUSH
8805: LD_VAR 0 7
8809: PUSH
8810: LD_INT 1
8812: ARRAY
8813: PPUSH
8814: CALL_OW 120
// if soldiers_list > 0 then
8818: LD_VAR 0 6
8822: PUSH
8823: LD_INT 0
8825: GREATER
8826: IFFALSE 8850
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8828: LD_VAR 0 6
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 7
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: CALL_OW 120
// end ;
8850: GO 8768
8852: POP
8853: POP
// end ; end ; end ;
8854: LD_VAR 0 3
8858: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8859: LD_INT 0
8861: PPUSH
8862: PPUSH
8863: PPUSH
8864: PPUSH
8865: PPUSH
8866: PPUSH
// for i = 1 to vehCount do
8867: LD_ADDR_VAR 0 8
8871: PUSH
8872: DOUBLE
8873: LD_INT 1
8875: DEC
8876: ST_TO_ADDR
8877: LD_VAR 0 6
8881: PUSH
8882: FOR_TO
8883: IFFALSE 9090
// begin uc_side = side ;
8885: LD_ADDR_OWVAR 20
8889: PUSH
8890: LD_VAR 0 1
8894: ST_TO_ADDR
// uc_nation = nation ;
8895: LD_ADDR_OWVAR 21
8899: PUSH
8900: LD_VAR 0 3
8904: ST_TO_ADDR
// vc_Chassis = 22 ;
8905: LD_ADDR_OWVAR 37
8909: PUSH
8910: LD_INT 22
8912: ST_TO_ADDR
// vc_engine = 1 ;
8913: LD_ADDR_OWVAR 39
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// vc_control = 1 ;
8921: LD_ADDR_OWVAR 38
8925: PUSH
8926: LD_INT 1
8928: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8929: LD_ADDR_OWVAR 40
8933: PUSH
8934: LD_INT 43
8936: PUSH
8937: LD_INT 44
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 1
8946: PPUSH
8947: LD_INT 2
8949: PPUSH
8950: CALL_OW 12
8954: ARRAY
8955: ST_TO_ADDR
// veh = CreateVehicle ;
8956: LD_ADDR_VAR 0 12
8960: PUSH
8961: CALL_OW 45
8965: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8966: LD_VAR 0 12
8970: PPUSH
8971: LD_VAR 0 2
8975: PPUSH
8976: LD_INT 0
8978: PPUSH
8979: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8983: LD_ADDR_EXP 32
8987: PUSH
8988: LD_EXP 32
8992: PUSH
8993: LD_VAR 0 12
8997: ADD
8998: ST_TO_ADDR
// hc_class = 3 ;
8999: LD_ADDR_OWVAR 28
9003: PUSH
9004: LD_INT 3
9006: ST_TO_ADDR
// hc_name =  ;
9007: LD_ADDR_OWVAR 26
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_gallery =  ;
9015: LD_ADDR_OWVAR 33
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_INT 3
9028: PPUSH
9029: LD_EXP 25
9033: PPUSH
9034: LD_EXP 26
9038: PPUSH
9039: CALL_OW 12
9043: PPUSH
9044: CALL_OW 380
// un = CreateHuman ;
9048: LD_ADDR_VAR 0 10
9052: PUSH
9053: CALL_OW 44
9057: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9058: LD_VAR 0 10
9062: PPUSH
9063: LD_VAR 0 12
9067: PPUSH
9068: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9072: LD_ADDR_EXP 32
9076: PUSH
9077: LD_EXP 32
9081: PUSH
9082: LD_VAR 0 10
9086: ADD
9087: ST_TO_ADDR
// end ;
9088: GO 8882
9090: POP
9091: POP
// end ;
9092: LD_VAR 0 7
9096: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9097: LD_INT 0
9099: PPUSH
9100: PPUSH
9101: PPUSH
9102: PPUSH
9103: PPUSH
9104: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9105: LD_VAR 0 2
9109: PPUSH
9110: LD_INT 22
9112: PUSH
9113: LD_VAR 0 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: PPUSH
9125: CALL_OW 70
9129: PUSH
9130: LD_INT 0
9132: EQUAL
9133: PUSH
9134: LD_EXP 32
9138: AND
9139: IFFALSE 9426
// begin for i in defenders_list do
9141: LD_ADDR_VAR 0 4
9145: PUSH
9146: LD_EXP 32
9150: PUSH
9151: FOR_IN
9152: IFFALSE 9424
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9154: LD_VAR 0 4
9158: PPUSH
9159: LD_INT 63
9161: PPUSH
9162: LD_INT 75
9164: PPUSH
9165: CALL_OW 297
9169: PUSH
9170: LD_INT 8
9172: GREATER
9173: PUSH
9174: LD_VAR 0 4
9178: PPUSH
9179: CALL_OW 314
9183: NOT
9184: AND
9185: IFFALSE 9204
// ComMoveXY ( i , 63 , 75 ) else
9187: LD_VAR 0 4
9191: PPUSH
9192: LD_INT 63
9194: PPUSH
9195: LD_INT 75
9197: PPUSH
9198: CALL_OW 111
9202: GO 9422
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9204: LD_VAR 0 4
9208: PPUSH
9209: CALL_OW 257
9213: PUSH
9214: LD_INT 3
9216: EQUAL
9217: PUSH
9218: LD_VAR 0 4
9222: PPUSH
9223: CALL_OW 310
9227: NOT
9228: AND
9229: PUSH
9230: LD_VAR 0 4
9234: PPUSH
9235: CALL_OW 314
9239: NOT
9240: AND
9241: IFFALSE 9294
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9243: LD_VAR 0 4
9247: PPUSH
9248: LD_EXP 32
9252: PPUSH
9253: LD_INT 58
9255: PUSH
9256: EMPTY
9257: LIST
9258: PUSH
9259: LD_INT 24
9261: PUSH
9262: LD_INT 1000
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PPUSH
9273: CALL_OW 72
9277: PPUSH
9278: LD_VAR 0 4
9282: PPUSH
9283: CALL_OW 74
9287: PPUSH
9288: CALL_OW 120
9292: GO 9422
// if GetFuel ( i ) < 100 then
9294: LD_VAR 0 4
9298: PPUSH
9299: CALL_OW 261
9303: PUSH
9304: LD_INT 100
9306: LESS
9307: IFFALSE 9323
// SetFuel ( defenders_list , 100 ) else
9309: LD_EXP 32
9313: PPUSH
9314: LD_INT 100
9316: PPUSH
9317: CALL_OW 240
9321: GO 9422
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 263
9332: PUSH
9333: LD_INT 1
9335: EQUAL
9336: PUSH
9337: LD_VAR 0 4
9341: PPUSH
9342: CALL_OW 256
9346: PUSH
9347: LD_INT 990
9349: LESS
9350: AND
9351: IFFALSE 9422
// begin veh := i ;
9353: LD_ADDR_VAR 0 7
9357: PUSH
9358: LD_VAR 0 4
9362: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9363: LD_ADDR_VAR 0 8
9367: PUSH
9368: LD_VAR 0 4
9372: PPUSH
9373: CALL_OW 311
9377: ST_TO_ADDR
// if veh then
9378: LD_VAR 0 7
9382: IFFALSE 9422
// begin ComMoveXY ( i , 63 , 75 ) ;
9384: LD_VAR 0 4
9388: PPUSH
9389: LD_INT 63
9391: PPUSH
9392: LD_INT 75
9394: PPUSH
9395: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9399: LD_VAR 0 7
9403: PPUSH
9404: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9408: LD_VAR 0 8
9412: PPUSH
9413: LD_VAR 0 7
9417: PPUSH
9418: CALL_OW 189
// end ; end ; end ;
9422: GO 9151
9424: POP
9425: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9426: LD_ADDR_VAR 0 6
9430: PUSH
9431: LD_VAR 0 2
9435: PPUSH
9436: LD_INT 22
9438: PUSH
9439: LD_VAR 0 1
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: PPUSH
9451: CALL_OW 70
9455: ST_TO_ADDR
// if tmp and defenders_list then
9456: LD_VAR 0 6
9460: PUSH
9461: LD_EXP 32
9465: AND
9466: IFFALSE 9635
// for i in defenders_list do
9468: LD_ADDR_VAR 0 4
9472: PUSH
9473: LD_EXP 32
9477: PUSH
9478: FOR_IN
9479: IFFALSE 9633
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9481: LD_VAR 0 4
9485: PPUSH
9486: CALL_OW 257
9490: PUSH
9491: LD_INT 3
9493: EQUAL
9494: PUSH
9495: LD_VAR 0 4
9499: PPUSH
9500: CALL_OW 310
9504: NOT
9505: AND
9506: IFFALSE 9545
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9508: LD_VAR 0 4
9512: PPUSH
9513: LD_EXP 32
9517: PPUSH
9518: LD_INT 58
9520: PUSH
9521: EMPTY
9522: LIST
9523: PPUSH
9524: CALL_OW 72
9528: PPUSH
9529: LD_VAR 0 4
9533: PPUSH
9534: CALL_OW 74
9538: PPUSH
9539: CALL_OW 120
9543: GO 9631
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9545: LD_VAR 0 4
9549: PPUSH
9550: CALL_OW 314
9554: NOT
9555: PUSH
9556: LD_VAR 0 4
9560: PPUSH
9561: LD_VAR 0 2
9565: PPUSH
9566: CALL_OW 308
9570: AND
9571: IFFALSE 9599
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9573: LD_VAR 0 4
9577: PPUSH
9578: LD_VAR 0 6
9582: PPUSH
9583: LD_VAR 0 4
9587: PPUSH
9588: CALL_OW 74
9592: PPUSH
9593: CALL_OW 115
9597: GO 9631
// if not IsInArea ( i , defenseArea ) then
9599: LD_VAR 0 4
9603: PPUSH
9604: LD_VAR 0 2
9608: PPUSH
9609: CALL_OW 308
9613: NOT
9614: IFFALSE 9631
// ComMoveXY ( i , 63 , 75 ) ;
9616: LD_VAR 0 4
9620: PPUSH
9621: LD_INT 63
9623: PPUSH
9624: LD_INT 75
9626: PPUSH
9627: CALL_OW 111
// end ;
9631: GO 9478
9633: POP
9634: POP
// end ;
9635: LD_VAR 0 3
9639: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9640: LD_INT 0
9642: PPUSH
9643: PPUSH
9644: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9645: LD_INT 22
9647: PUSH
9648: LD_VAR 0 1
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 21
9659: PUSH
9660: LD_INT 2
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PPUSH
9671: CALL_OW 69
9675: PUSH
9676: LD_VAR 0 3
9680: LESSEQUAL
9681: IFFALSE 9789
// begin for i = 1 to vehCount do
9683: LD_ADDR_VAR 0 9
9687: PUSH
9688: DOUBLE
9689: LD_INT 1
9691: DEC
9692: ST_TO_ADDR
9693: LD_VAR 0 3
9697: PUSH
9698: FOR_TO
9699: IFFALSE 9787
// begin weapon = weaponTab [ i ] ;
9701: LD_ADDR_VAR 0 10
9705: PUSH
9706: LD_VAR 0 4
9710: PUSH
9711: LD_VAR 0 9
9715: ARRAY
9716: ST_TO_ADDR
// if weapon = 46 then
9717: LD_VAR 0 10
9721: PUSH
9722: LD_INT 46
9724: EQUAL
9725: IFFALSE 9756
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9727: LD_VAR 0 2
9731: PPUSH
9732: LD_INT 24
9734: PPUSH
9735: LD_VAR 0 5
9739: PPUSH
9740: LD_VAR 0 6
9744: PPUSH
9745: LD_VAR 0 10
9749: PPUSH
9750: CALL_OW 185
// end else
9754: GO 9785
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9756: LD_VAR 0 2
9760: PPUSH
9761: LD_VAR 0 7
9765: PPUSH
9766: LD_VAR 0 5
9770: PPUSH
9771: LD_VAR 0 6
9775: PPUSH
9776: LD_VAR 0 10
9780: PPUSH
9781: CALL_OW 185
// end ; end ;
9785: GO 9698
9787: POP
9788: POP
// end ; end ;
9789: LD_VAR 0 8
9793: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
9798: PPUSH
9799: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9800: LD_ADDR_VAR 0 8
9804: PUSH
9805: LD_INT 22
9807: PUSH
9808: LD_VAR 0 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 21
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 3
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: LD_INT 650
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 69
9853: ST_TO_ADDR
// if damageVehicles > 0 then
9854: LD_VAR 0 8
9858: PUSH
9859: LD_INT 0
9861: GREATER
9862: IFFALSE 9883
// ComMoveXY ( damageVehicles , repX , repY ) ;
9864: LD_VAR 0 8
9868: PPUSH
9869: LD_VAR 0 3
9873: PPUSH
9874: LD_VAR 0 4
9878: PPUSH
9879: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9883: LD_VAR 0 8
9887: PPUSH
9888: LD_INT 95
9890: PUSH
9891: LD_VAR 0 2
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 3
9902: PUSH
9903: LD_INT 58
9905: PUSH
9906: EMPTY
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PPUSH
9917: CALL_OW 72
9921: PUSH
9922: LD_INT 0
9924: GREATER
9925: IFFALSE 9992
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9927: LD_ADDR_VAR 0 6
9931: PUSH
9932: LD_VAR 0 8
9936: PPUSH
9937: LD_INT 95
9939: PUSH
9940: LD_VAR 0 2
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 3
9951: PUSH
9952: LD_INT 58
9954: PUSH
9955: EMPTY
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 72
9970: PUSH
9971: FOR_IN
9972: IFFALSE 9990
// ComExitVehicle ( UnitsInside ( i ) ) ;
9974: LD_VAR 0 6
9978: PPUSH
9979: CALL_OW 313
9983: PPUSH
9984: CALL_OW 121
9988: GO 9971
9990: POP
9991: POP
// end ;
9992: LD_VAR 0 5
9996: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9997: LD_INT 0
9999: PPUSH
10000: PPUSH
10001: PPUSH
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10006: LD_ADDR_VAR 0 8
10010: PUSH
10011: LD_INT 22
10013: PUSH
10014: LD_VAR 0 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 21
10025: PUSH
10026: LD_INT 2
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 24
10035: PUSH
10036: LD_INT 250
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 3
10045: PUSH
10046: LD_INT 58
10048: PUSH
10049: EMPTY
10050: LIST
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 43
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 34
10067: PUSH
10068: LD_INT 44
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 34
10077: PUSH
10078: LD_INT 46
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10107: LD_INT 22
10109: PUSH
10110: LD_VAR 0 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PUSH
10119: LD_INT 21
10121: PUSH
10122: LD_INT 2
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 24
10131: PUSH
10132: LD_INT 1000
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: LD_INT 58
10144: PUSH
10145: EMPTY
10146: LIST
10147: PUSH
10148: LD_INT 2
10150: PUSH
10151: LD_INT 34
10153: PUSH
10154: LD_INT 43
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 34
10163: PUSH
10164: LD_INT 44
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 34
10173: PUSH
10174: LD_INT 46
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 69
10202: PUSH
10203: LD_INT 5
10205: PUSH
10206: LD_INT 6
10208: PUSH
10209: LD_INT 7
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: PUSH
10217: LD_OWVAR 67
10221: ARRAY
10222: GREATEREQUAL
10223: IFFALSE 10788
// repeat wait ( 0 0$1 ) ;
10225: LD_INT 35
10227: PPUSH
10228: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10232: LD_ADDR_VAR 0 8
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_VAR 0 1
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 21
10251: PUSH
10252: LD_INT 2
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 24
10261: PUSH
10262: LD_INT 250
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: LD_INT 34
10274: PUSH
10275: LD_INT 43
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 34
10284: PUSH
10285: LD_INT 44
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 34
10294: PUSH
10295: LD_INT 46
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 3
10310: PUSH
10311: LD_INT 58
10313: PUSH
10314: EMPTY
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 69
10332: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10333: LD_INT 22
10335: PUSH
10336: LD_VAR 0 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 95
10347: PUSH
10348: LD_VAR 0 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 69
10365: NOT
10366: PUSH
10367: LD_VAR 0 11
10371: PUSH
10372: LD_INT 0
10374: EQUAL
10375: AND
10376: IFFALSE 10431
// for i := 1 to wayX do
10378: LD_ADDR_VAR 0 6
10382: PUSH
10383: DOUBLE
10384: LD_INT 1
10386: DEC
10387: ST_TO_ADDR
10388: LD_VAR 0 3
10392: PUSH
10393: FOR_TO
10394: IFFALSE 10429
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10396: LD_VAR 0 8
10400: PPUSH
10401: LD_VAR 0 3
10405: PUSH
10406: LD_VAR 0 6
10410: ARRAY
10411: PPUSH
10412: LD_VAR 0 4
10416: PUSH
10417: LD_VAR 0 6
10421: ARRAY
10422: PPUSH
10423: CALL_OW 114
10427: GO 10393
10429: POP
10430: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10431: LD_INT 22
10433: PUSH
10434: LD_VAR 0 1
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 95
10445: PUSH
10446: LD_VAR 0 2
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 69
10463: IFFALSE 10687
// begin seeEnemy = 1 ;
10465: LD_ADDR_VAR 0 11
10469: PUSH
10470: LD_INT 1
10472: ST_TO_ADDR
// for j in vehiclesOK do
10473: LD_ADDR_VAR 0 7
10477: PUSH
10478: LD_VAR 0 8
10482: PUSH
10483: FOR_IN
10484: IFFALSE 10685
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10486: LD_ADDR_VAR 0 9
10490: PUSH
10491: LD_INT 81
10493: PUSH
10494: LD_VAR 0 1
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 101
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PPUSH
10517: CALL_OW 69
10521: PPUSH
10522: LD_VAR 0 7
10526: PPUSH
10527: CALL_OW 74
10531: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10532: LD_ADDR_VAR 0 10
10536: PUSH
10537: LD_INT 81
10539: PUSH
10540: LD_VAR 0 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 101
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: LD_INT 59
10564: PUSH
10565: EMPTY
10566: LIST
10567: PUSH
10568: LD_INT 21
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 21
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: LD_VAR 0 7
10611: PPUSH
10612: CALL_OW 74
10616: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10617: LD_VAR 0 7
10621: PPUSH
10622: LD_VAR 0 9
10626: PPUSH
10627: CALL_OW 296
10631: PUSH
10632: LD_INT 8
10634: PLUS
10635: PUSH
10636: LD_VAR 0 7
10640: PPUSH
10641: LD_VAR 0 10
10645: PPUSH
10646: CALL_OW 296
10650: LESS
10651: IFFALSE 10669
// ComAttackUnit ( j , target1 ) else
10653: LD_VAR 0 7
10657: PPUSH
10658: LD_VAR 0 9
10662: PPUSH
10663: CALL_OW 115
10667: GO 10683
// ComAttackUnit ( j , target2 ) ;
10669: LD_VAR 0 7
10673: PPUSH
10674: LD_VAR 0 10
10678: PPUSH
10679: CALL_OW 115
// end ;
10683: GO 10483
10685: POP
10686: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10687: LD_INT 22
10689: PUSH
10690: LD_VAR 0 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 21
10701: PUSH
10702: LD_INT 2
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 24
10711: PUSH
10712: LD_INT 250
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: LD_INT 34
10724: PUSH
10725: LD_INT 43
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 34
10734: PUSH
10735: LD_INT 44
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 34
10744: PUSH
10745: LD_INT 46
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 58
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 69
10782: PUSH
10783: LD_INT 0
10785: EQUAL
10786: IFFALSE 10225
// seeEnemy = 0 ;
10788: LD_ADDR_VAR 0 11
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// end ;
10796: LD_VAR 0 5
10800: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10801: LD_INT 0
10803: PPUSH
10804: PPUSH
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
// repeat wait ( 0 0$1 ) ;
10809: LD_INT 35
10811: PPUSH
10812: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10816: LD_ADDR_VAR 0 7
10820: PUSH
10821: LD_INT 22
10823: PUSH
10824: LD_VAR 0 1
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 21
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 24
10845: PUSH
10846: LD_INT 651
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: PPUSH
10858: CALL_OW 69
10862: ST_TO_ADDR
// for j in vehiclesOK do
10863: LD_ADDR_VAR 0 4
10867: PUSH
10868: LD_VAR 0 7
10872: PUSH
10873: FOR_IN
10874: IFFALSE 11075
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10876: LD_ADDR_VAR 0 5
10880: PUSH
10881: LD_INT 81
10883: PUSH
10884: LD_VAR 0 1
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 101
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PPUSH
10907: CALL_OW 69
10911: PPUSH
10912: LD_VAR 0 4
10916: PPUSH
10917: CALL_OW 74
10921: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10922: LD_ADDR_VAR 0 6
10926: PUSH
10927: LD_INT 81
10929: PUSH
10930: LD_VAR 0 1
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 101
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 2
10951: PUSH
10952: LD_INT 59
10954: PUSH
10955: EMPTY
10956: LIST
10957: PUSH
10958: LD_INT 21
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 21
10970: PUSH
10971: LD_INT 2
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: EMPTY
10990: LIST
10991: PPUSH
10992: CALL_OW 69
10996: PPUSH
10997: LD_VAR 0 4
11001: PPUSH
11002: CALL_OW 74
11006: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11007: LD_VAR 0 4
11011: PPUSH
11012: LD_VAR 0 5
11016: PPUSH
11017: CALL_OW 296
11021: PUSH
11022: LD_INT 8
11024: PLUS
11025: PUSH
11026: LD_VAR 0 4
11030: PPUSH
11031: LD_VAR 0 6
11035: PPUSH
11036: CALL_OW 296
11040: LESS
11041: IFFALSE 11059
// ComAttackUnit ( j , target1 ) else
11043: LD_VAR 0 4
11047: PPUSH
11048: LD_VAR 0 5
11052: PPUSH
11053: CALL_OW 115
11057: GO 11073
// ComAttackUnit ( j , target2 ) ;
11059: LD_VAR 0 4
11063: PPUSH
11064: LD_VAR 0 6
11068: PPUSH
11069: CALL_OW 115
// end ;
11073: GO 10873
11075: POP
11076: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11077: LD_INT 22
11079: PUSH
11080: LD_VAR 0 1
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 21
11091: PUSH
11092: LD_INT 2
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 24
11101: PUSH
11102: LD_INT 250
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10809
// end ;
11124: LD_VAR 0 2
11128: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11129: LD_INT 0
11131: PPUSH
11132: PPUSH
11133: PPUSH
11134: PPUSH
11135: PPUSH
11136: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11137: LD_ADDR_VAR 0 8
11141: PUSH
11142: LD_VAR 0 2
11146: PPUSH
11147: CALL_OW 313
11151: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11152: LD_ADDR_VAR 0 9
11156: PUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: LD_INT 22
11164: PUSH
11165: LD_VAR 0 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 25
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 24
11186: PUSH
11187: LD_INT 750
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 3
11196: PUSH
11197: LD_INT 54
11199: PUSH
11200: EMPTY
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 70
11217: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11218: LD_ADDR_VAR 0 6
11222: PUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 22
11230: PUSH
11231: LD_VAR 0 1
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: LD_INT 21
11242: PUSH
11243: LD_INT 3
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: LD_INT 24
11255: PUSH
11256: LD_INT 1000
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: PPUSH
11275: CALL_OW 70
11279: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11280: LD_VAR 0 6
11284: NOT
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_VAR 0 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 25
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 24
11310: PUSH
11311: LD_INT 250
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: LIST
11322: PPUSH
11323: CALL_OW 69
11327: NOT
11328: AND
11329: IFFALSE 11333
// exit ;
11331: GO 11530
// if buildings_list > 0 and engineerOkInside then
11333: LD_VAR 0 6
11337: PUSH
11338: LD_INT 0
11340: GREATER
11341: PUSH
11342: LD_VAR 0 8
11346: AND
11347: IFFALSE 11373
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11349: LD_VAR 0 8
11353: PPUSH
11354: LD_INT 25
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 72
11368: PPUSH
11369: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11373: LD_VAR 0 6
11377: PUSH
11378: LD_INT 0
11380: GREATER
11381: PUSH
11382: LD_VAR 0 9
11386: PUSH
11387: LD_INT 0
11389: GREATER
11390: AND
11391: IFFALSE 11411
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11393: LD_VAR 0 9
11397: PPUSH
11398: LD_VAR 0 6
11402: PUSH
11403: LD_INT 1
11405: ARRAY
11406: PPUSH
11407: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11411: LD_VAR 0 6
11415: PUSH
11416: LD_INT 0
11418: EQUAL
11419: PUSH
11420: LD_VAR 0 4
11424: PUSH
11425: LD_INT 0
11427: EQUAL
11428: AND
11429: PUSH
11430: LD_VAR 0 9
11434: PUSH
11435: LD_INT 0
11437: GREATER
11438: AND
11439: IFFALSE 11455
// ComEnterUnit ( engineerOkOutside , building ) ;
11441: LD_VAR 0 9
11445: PPUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11455: LD_VAR 0 9
11459: PUSH
11460: LD_INT 0
11462: GREATER
11463: PUSH
11464: LD_VAR 0 6
11468: PUSH
11469: LD_INT 0
11471: EQUAL
11472: AND
11473: PUSH
11474: LD_VAR 0 4
11478: PUSH
11479: LD_INT 0
11481: GREATER
11482: AND
11483: IFFALSE 11530
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11485: LD_VAR 0 9
11489: PPUSH
11490: LD_VAR 0 4
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: LD_VAR 0 4
11503: PUSH
11504: LD_INT 2
11506: ARRAY
11507: PPUSH
11508: LD_VAR 0 4
11512: PUSH
11513: LD_INT 3
11515: ARRAY
11516: PPUSH
11517: LD_VAR 0 4
11521: PUSH
11522: LD_INT 4
11524: ARRAY
11525: PPUSH
11526: CALL_OW 145
// end ;
11530: LD_VAR 0 5
11534: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11535: LD_INT 0
11537: PPUSH
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
11542: PPUSH
11543: PPUSH
11544: PPUSH
11545: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11546: LD_ADDR_VAR 0 6
11550: PUSH
11551: LD_INT 22
11553: PUSH
11554: LD_VAR 0 1
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 25
11565: PUSH
11566: LD_INT 4
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 23
11575: PUSH
11576: LD_INT 2
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 24
11585: PUSH
11586: LD_INT 251
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11604: LD_ADDR_VAR 0 7
11608: PUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 22
11616: PUSH
11617: LD_VAR 0 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 23
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 25
11638: PUSH
11639: LD_INT 4
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 50
11648: PUSH
11649: EMPTY
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 70
11662: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11663: LD_ADDR_VAR 0 10
11667: PUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 22
11675: PUSH
11676: LD_VAR 0 1
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 21
11687: PUSH
11688: LD_INT 1
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 3
11697: PUSH
11698: LD_INT 25
11700: PUSH
11701: LD_INT 3
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: LD_INT 24
11717: PUSH
11718: LD_INT 750
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: PPUSH
11735: CALL_OW 70
11739: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11740: LD_ADDR_VAR 0 11
11744: PUSH
11745: LD_VAR 0 2
11749: PPUSH
11750: LD_INT 22
11752: PUSH
11753: LD_VAR 0 1
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 21
11764: PUSH
11765: LD_INT 1
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 3
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 3
11791: PUSH
11792: LD_INT 24
11794: PUSH
11795: LD_INT 1000
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: PPUSH
11812: CALL_OW 70
11816: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11817: LD_VAR 0 10
11821: NOT
11822: PUSH
11823: LD_VAR 0 11
11827: NOT
11828: AND
11829: PUSH
11830: LD_VAR 0 6
11834: NOT
11835: AND
11836: IFFALSE 11840
// exit ;
11838: GO 12074
// if damageUnits > 0 and sci_list > 0 then
11840: LD_VAR 0 10
11844: PUSH
11845: LD_INT 0
11847: GREATER
11848: PUSH
11849: LD_VAR 0 6
11853: PUSH
11854: LD_INT 0
11856: GREATER
11857: AND
11858: IFFALSE 11874
// ComMoveToArea ( damageUnits , healArea ) ;
11860: LD_VAR 0 10
11864: PPUSH
11865: LD_VAR 0 2
11869: PPUSH
11870: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11874: LD_VAR 0 11
11878: PUSH
11879: LD_INT 0
11881: GREATER
11882: PUSH
11883: LD_VAR 0 6
11887: PUSH
11888: LD_INT 0
11890: GREATER
11891: AND
11892: IFFALSE 11903
// ComExitBuilding ( sci_list ) ;
11894: LD_VAR 0 6
11898: PPUSH
11899: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11903: LD_VAR 0 11
11907: PUSH
11908: LD_INT 0
11910: GREATER
11911: PUSH
11912: LD_VAR 0 7
11916: PUSH
11917: LD_INT 0
11919: GREATER
11920: AND
11921: IFFALSE 11941
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11923: LD_VAR 0 7
11927: PPUSH
11928: LD_VAR 0 11
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11941: LD_VAR 0 10
11945: PUSH
11946: LD_INT 0
11948: EQUAL
11949: PUSH
11950: LD_VAR 0 11
11954: PUSH
11955: LD_INT 0
11957: EQUAL
11958: AND
11959: PUSH
11960: LD_VAR 0 7
11964: PUSH
11965: LD_INT 0
11967: GREATER
11968: AND
11969: IFFALSE 12074
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11971: LD_ADDR_VAR 0 12
11975: PUSH
11976: LD_INT 22
11978: PUSH
11979: LD_VAR 0 1
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 21
11990: PUSH
11991: LD_INT 3
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 30
12000: PUSH
12001: LD_INT 8
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 69
12017: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12018: LD_ADDR_VAR 0 13
12022: PUSH
12023: LD_INT 1
12025: PPUSH
12026: LD_VAR 0 12
12030: PPUSH
12031: CALL_OW 12
12035: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12036: LD_VAR 0 7
12040: PPUSH
12041: LD_INT 3
12043: PUSH
12044: LD_INT 60
12046: PUSH
12047: EMPTY
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 72
12058: PPUSH
12059: LD_VAR 0 12
12063: PUSH
12064: LD_VAR 0 13
12068: ARRAY
12069: PPUSH
12070: CALL_OW 120
// end ; end ;
12074: LD_VAR 0 5
12078: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12079: LD_INT 0
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12086: LD_ADDR_VAR 0 6
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_VAR 0 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: LD_INT 30
12108: PUSH
12109: LD_INT 31
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_INT 32
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 30
12128: PUSH
12129: LD_INT 33
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 4
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 30
12148: PUSH
12149: LD_INT 5
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 69
12172: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12173: LD_ADDR_VAR 0 7
12177: PUSH
12178: LD_INT 22
12180: PUSH
12181: LD_VAR 0 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 21
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 58
12202: PUSH
12203: EMPTY
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: PPUSH
12211: CALL_OW 69
12215: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12216: LD_VAR 0 6
12220: PUSH
12221: LD_INT 0
12223: GREATER
12224: PUSH
12225: LD_VAR 0 7
12229: PUSH
12230: LD_INT 0
12232: GREATER
12233: AND
12234: IFFALSE 12304
// begin for i in turretsList do
12236: LD_ADDR_VAR 0 4
12240: PUSH
12241: LD_VAR 0 6
12245: PUSH
12246: FOR_IN
12247: IFFALSE 12302
// begin for j in enemyBuildings do
12249: LD_ADDR_VAR 0 5
12253: PUSH
12254: LD_VAR 0 7
12258: PUSH
12259: FOR_IN
12260: IFFALSE 12298
// begin if GetDistUnits ( i , j ) < 20 then
12262: LD_VAR 0 4
12266: PPUSH
12267: LD_VAR 0 5
12271: PPUSH
12272: CALL_OW 296
12276: PUSH
12277: LD_INT 20
12279: LESS
12280: IFFALSE 12296
// begin ComAttackUnit ( i , j ) ;
12282: LD_VAR 0 4
12286: PPUSH
12287: LD_VAR 0 5
12291: PPUSH
12292: CALL_OW 115
// end ; end ;
12296: GO 12259
12298: POP
12299: POP
// end ;
12300: GO 12246
12302: POP
12303: POP
// end ; end ;
12304: LD_VAR 0 3
12308: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12309: LD_INT 0
12311: PPUSH
12312: PPUSH
12313: PPUSH
12314: PPUSH
12315: PPUSH
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
// for i = 1 to medicCount do
12322: LD_ADDR_VAR 0 14
12326: PUSH
12327: DOUBLE
12328: LD_INT 1
12330: DEC
12331: ST_TO_ADDR
12332: LD_VAR 0 7
12336: PUSH
12337: FOR_TO
12338: IFFALSE 12420
// begin uc_side = side ;
12340: LD_ADDR_OWVAR 20
12344: PUSH
12345: LD_VAR 0 1
12349: ST_TO_ADDR
// uc_nation = nation ;
12350: LD_ADDR_OWVAR 21
12354: PUSH
12355: LD_VAR 0 2
12359: ST_TO_ADDR
// hc_name =  ;
12360: LD_ADDR_OWVAR 26
12364: PUSH
12365: LD_STRING 
12367: ST_TO_ADDR
// hc_gallery =  ;
12368: LD_ADDR_OWVAR 33
12372: PUSH
12373: LD_STRING 
12375: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12376: LD_INT 0
12378: PPUSH
12379: LD_INT 4
12381: PPUSH
12382: LD_VAR 0 8
12386: PPUSH
12387: CALL_OW 380
// un = CreateHuman ;
12391: LD_ADDR_VAR 0 16
12395: PUSH
12396: CALL_OW 44
12400: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12401: LD_VAR 0 16
12405: PPUSH
12406: LD_VAR 0 9
12410: PPUSH
12411: LD_INT 0
12413: PPUSH
12414: CALL_OW 49
// end ;
12418: GO 12337
12420: POP
12421: POP
// for i = 1 to soldierCount do
12422: LD_ADDR_VAR 0 14
12426: PUSH
12427: DOUBLE
12428: LD_INT 1
12430: DEC
12431: ST_TO_ADDR
12432: LD_VAR 0 3
12436: PUSH
12437: FOR_TO
12438: IFFALSE 12520
// begin uc_side = side ;
12440: LD_ADDR_OWVAR 20
12444: PUSH
12445: LD_VAR 0 1
12449: ST_TO_ADDR
// uc_nation = nation ;
12450: LD_ADDR_OWVAR 21
12454: PUSH
12455: LD_VAR 0 2
12459: ST_TO_ADDR
// hc_name =  ;
12460: LD_ADDR_OWVAR 26
12464: PUSH
12465: LD_STRING 
12467: ST_TO_ADDR
// hc_gallery =  ;
12468: LD_ADDR_OWVAR 33
12472: PUSH
12473: LD_STRING 
12475: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12476: LD_INT 0
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: LD_VAR 0 8
12486: PPUSH
12487: CALL_OW 380
// un = CreateHuman ;
12491: LD_ADDR_VAR 0 16
12495: PUSH
12496: CALL_OW 44
12500: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12501: LD_VAR 0 16
12505: PPUSH
12506: LD_VAR 0 9
12510: PPUSH
12511: LD_INT 0
12513: PPUSH
12514: CALL_OW 49
// end ;
12518: GO 12437
12520: POP
12521: POP
// for i = 1 to sniperCount do
12522: LD_ADDR_VAR 0 14
12526: PUSH
12527: DOUBLE
12528: LD_INT 1
12530: DEC
12531: ST_TO_ADDR
12532: LD_VAR 0 4
12536: PUSH
12537: FOR_TO
12538: IFFALSE 12620
// begin uc_side = side ;
12540: LD_ADDR_OWVAR 20
12544: PUSH
12545: LD_VAR 0 1
12549: ST_TO_ADDR
// uc_nation = nation ;
12550: LD_ADDR_OWVAR 21
12554: PUSH
12555: LD_VAR 0 2
12559: ST_TO_ADDR
// hc_name =  ;
12560: LD_ADDR_OWVAR 26
12564: PUSH
12565: LD_STRING 
12567: ST_TO_ADDR
// hc_gallery =  ;
12568: LD_ADDR_OWVAR 33
12572: PUSH
12573: LD_STRING 
12575: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12576: LD_INT 0
12578: PPUSH
12579: LD_INT 5
12581: PPUSH
12582: LD_VAR 0 8
12586: PPUSH
12587: CALL_OW 380
// un = CreateHuman ;
12591: LD_ADDR_VAR 0 16
12595: PUSH
12596: CALL_OW 44
12600: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12601: LD_VAR 0 16
12605: PPUSH
12606: LD_VAR 0 9
12610: PPUSH
12611: LD_INT 0
12613: PPUSH
12614: CALL_OW 49
// end ;
12618: GO 12537
12620: POP
12621: POP
// for i = 1 to bazookCount do
12622: LD_ADDR_VAR 0 14
12626: PUSH
12627: DOUBLE
12628: LD_INT 1
12630: DEC
12631: ST_TO_ADDR
12632: LD_VAR 0 5
12636: PUSH
12637: FOR_TO
12638: IFFALSE 12720
// begin uc_side = side ;
12640: LD_ADDR_OWVAR 20
12644: PUSH
12645: LD_VAR 0 1
12649: ST_TO_ADDR
// uc_nation = nation ;
12650: LD_ADDR_OWVAR 21
12654: PUSH
12655: LD_VAR 0 2
12659: ST_TO_ADDR
// hc_name =  ;
12660: LD_ADDR_OWVAR 26
12664: PUSH
12665: LD_STRING 
12667: ST_TO_ADDR
// hc_gallery =  ;
12668: LD_ADDR_OWVAR 33
12672: PUSH
12673: LD_STRING 
12675: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12676: LD_INT 0
12678: PPUSH
12679: LD_INT 9
12681: PPUSH
12682: LD_VAR 0 8
12686: PPUSH
12687: CALL_OW 380
// un = CreateHuman ;
12691: LD_ADDR_VAR 0 16
12695: PUSH
12696: CALL_OW 44
12700: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12701: LD_VAR 0 16
12705: PPUSH
12706: LD_VAR 0 9
12710: PPUSH
12711: LD_INT 0
12713: PPUSH
12714: CALL_OW 49
// end ;
12718: GO 12637
12720: POP
12721: POP
// for i = 1 to mortalCount do
12722: LD_ADDR_VAR 0 14
12726: PUSH
12727: DOUBLE
12728: LD_INT 1
12730: DEC
12731: ST_TO_ADDR
12732: LD_VAR 0 6
12736: PUSH
12737: FOR_TO
12738: IFFALSE 12820
// begin uc_side = side ;
12740: LD_ADDR_OWVAR 20
12744: PUSH
12745: LD_VAR 0 1
12749: ST_TO_ADDR
// uc_nation = nation ;
12750: LD_ADDR_OWVAR 21
12754: PUSH
12755: LD_VAR 0 2
12759: ST_TO_ADDR
// hc_name =  ;
12760: LD_ADDR_OWVAR 26
12764: PUSH
12765: LD_STRING 
12767: ST_TO_ADDR
// hc_gallery =  ;
12768: LD_ADDR_OWVAR 33
12772: PUSH
12773: LD_STRING 
12775: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12776: LD_INT 0
12778: PPUSH
12779: LD_INT 8
12781: PPUSH
12782: LD_VAR 0 8
12786: PPUSH
12787: CALL_OW 380
// un = CreateHuman ;
12791: LD_ADDR_VAR 0 16
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12801: LD_VAR 0 16
12805: PPUSH
12806: LD_VAR 0 9
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// end ;
12818: GO 12737
12820: POP
12821: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12822: LD_ADDR_VAR 0 19
12826: PUSH
12827: LD_INT 22
12829: PUSH
12830: LD_VAR 0 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: LD_INT 25
12844: PUSH
12845: LD_INT 1
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 5
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 25
12864: PUSH
12865: LD_INT 8
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 25
12874: PUSH
12875: LD_INT 9
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12898: LD_ADDR_VAR 0 18
12902: PUSH
12903: LD_INT 22
12905: PUSH
12906: LD_VAR 0 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 25
12917: PUSH
12918: LD_INT 4
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 69
12933: ST_TO_ADDR
// for i in medic_list do
12934: LD_ADDR_VAR 0 14
12938: PUSH
12939: LD_VAR 0 18
12943: PUSH
12944: FOR_IN
12945: IFFALSE 12963
// ComMoveToArea ( i , healArea ) ;
12947: LD_VAR 0 14
12951: PPUSH
12952: LD_VAR 0 10
12956: PPUSH
12957: CALL_OW 113
12961: GO 12944
12963: POP
12964: POP
// if strategy = 1 then
12965: LD_VAR 0 12
12969: PUSH
12970: LD_INT 1
12972: EQUAL
12973: IFFALSE 13519
// begin repeat wait ( 0 0$3 ) ;
12975: LD_INT 105
12977: PPUSH
12978: CALL_OW 67
// for i in soldiersOK_list do
12982: LD_ADDR_VAR 0 14
12986: PUSH
12987: LD_VAR 0 19
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13057
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12995: LD_VAR 0 14
12999: PPUSH
13000: LD_INT 91
13002: PPUSH
13003: LD_INT 63
13005: PPUSH
13006: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13010: LD_VAR 0 14
13014: PPUSH
13015: LD_INT 101
13017: PPUSH
13018: LD_INT 53
13020: PPUSH
13021: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13025: LD_VAR 0 14
13029: PPUSH
13030: LD_INT 75
13032: PPUSH
13033: LD_INT 23
13035: PPUSH
13036: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13040: LD_VAR 0 14
13044: PPUSH
13045: LD_INT 78
13047: PPUSH
13048: LD_INT 8
13050: PPUSH
13051: CALL_OW 174
// end ;
13055: GO 12992
13057: POP
13058: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13059: LD_INT 12
13061: PPUSH
13062: LD_INT 22
13064: PUSH
13065: LD_VAR 0 1
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 70
13078: PUSH
13079: LD_INT 2
13081: GREATER
13082: IFFALSE 12975
// repeat wait ( 0 0$1 ) ;
13084: LD_INT 35
13086: PPUSH
13087: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13091: LD_ADDR_VAR 0 17
13095: PUSH
13096: LD_INT 22
13098: PUSH
13099: LD_VAR 0 1
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: LD_INT 24
13116: PUSH
13117: LD_INT 550
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 24
13130: PUSH
13131: LD_INT 250
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PPUSH
13147: CALL_OW 69
13151: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13152: LD_ADDR_VAR 0 19
13156: PUSH
13157: LD_INT 22
13159: PUSH
13160: LD_VAR 0 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 2
13171: PUSH
13172: LD_INT 25
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 25
13184: PUSH
13185: LD_INT 5
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 25
13194: PUSH
13195: LD_INT 8
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 25
13204: PUSH
13205: LD_INT 9
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 24
13221: PUSH
13222: LD_INT 1000
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: PPUSH
13234: CALL_OW 69
13238: ST_TO_ADDR
// if medicCount > 0 then
13239: LD_VAR 0 7
13243: PUSH
13244: LD_INT 0
13246: GREATER
13247: IFFALSE 13321
// begin if damageUnit_list > 0 then
13249: LD_VAR 0 17
13253: PUSH
13254: LD_INT 0
13256: GREATER
13257: IFFALSE 13321
// begin for i in damageUnit_list do
13259: LD_ADDR_VAR 0 14
13263: PUSH
13264: LD_VAR 0 17
13268: PUSH
13269: FOR_IN
13270: IFFALSE 13319
// begin ComMoveToArea ( i , healArea ) ;
13272: LD_VAR 0 14
13276: PPUSH
13277: LD_VAR 0 10
13281: PPUSH
13282: CALL_OW 113
// for j in medic_list do
13286: LD_ADDR_VAR 0 15
13290: PUSH
13291: LD_VAR 0 18
13295: PUSH
13296: FOR_IN
13297: IFFALSE 13315
// AddComHeal ( j , i ) ;
13299: LD_VAR 0 15
13303: PPUSH
13304: LD_VAR 0 14
13308: PPUSH
13309: CALL_OW 188
13313: GO 13296
13315: POP
13316: POP
// end ;
13317: GO 13269
13319: POP
13320: POP
// end ; end ; for i in soldiersOK_list do
13321: LD_ADDR_VAR 0 14
13325: PUSH
13326: LD_VAR 0 19
13330: PUSH
13331: FOR_IN
13332: IFFALSE 13508
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13334: LD_ADDR_VAR 0 22
13338: PUSH
13339: LD_INT 22
13341: PUSH
13342: LD_VAR 0 11
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PPUSH
13351: CALL_OW 69
13355: PPUSH
13356: LD_VAR 0 14
13360: PPUSH
13361: CALL_OW 74
13365: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13366: LD_ADDR_VAR 0 23
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_VAR 0 11
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 59
13388: PUSH
13389: EMPTY
13390: LIST
13391: PUSH
13392: LD_INT 21
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 21
13404: PUSH
13405: LD_INT 2
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: PPUSH
13430: LD_VAR 0 14
13434: PPUSH
13435: CALL_OW 74
13439: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13440: LD_VAR 0 14
13444: PPUSH
13445: LD_VAR 0 22
13449: PPUSH
13450: CALL_OW 296
13454: PUSH
13455: LD_INT 6
13457: PLUS
13458: PUSH
13459: LD_VAR 0 14
13463: PPUSH
13464: LD_VAR 0 23
13468: PPUSH
13469: CALL_OW 296
13473: LESS
13474: IFFALSE 13492
// begin ComAttackUnit ( i , target1 ) ;
13476: LD_VAR 0 14
13480: PPUSH
13481: LD_VAR 0 22
13485: PPUSH
13486: CALL_OW 115
// end else
13490: GO 13506
// begin ComAttackUnit ( i , target2 ) ;
13492: LD_VAR 0 14
13496: PPUSH
13497: LD_VAR 0 23
13501: PPUSH
13502: CALL_OW 115
// end ; end ;
13506: GO 13331
13508: POP
13509: POP
// until soldiersOK_list = [ ] ;
13510: LD_VAR 0 19
13514: PUSH
13515: EMPTY
13516: EQUAL
13517: IFFALSE 13084
// end ; if strategy = 2 then
13519: LD_VAR 0 12
13523: PUSH
13524: LD_INT 2
13526: EQUAL
13527: IFFALSE 14043
// begin repeat wait ( 0 0$1 ) ;
13529: LD_INT 35
13531: PPUSH
13532: CALL_OW 67
// for i in soldiersOK_list do
13536: LD_ADDR_VAR 0 14
13540: PUSH
13541: LD_VAR 0 19
13545: PUSH
13546: FOR_IN
13547: IFFALSE 13581
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13549: LD_VAR 0 14
13553: PPUSH
13554: LD_INT 91
13556: PPUSH
13557: LD_INT 63
13559: PPUSH
13560: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13564: LD_VAR 0 14
13568: PPUSH
13569: LD_INT 75
13571: PPUSH
13572: LD_INT 33
13574: PPUSH
13575: CALL_OW 174
// end ;
13579: GO 13546
13581: POP
13582: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13583: LD_INT 13
13585: PPUSH
13586: LD_INT 22
13588: PUSH
13589: LD_VAR 0 1
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 70
13602: PUSH
13603: LD_INT 2
13605: GREATER
13606: IFFALSE 13529
// repeat wait ( 0 0$3 ) ;
13608: LD_INT 105
13610: PPUSH
13611: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13615: LD_ADDR_VAR 0 17
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_VAR 0 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 1
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: LD_INT 24
13640: PUSH
13641: LD_INT 550
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 250
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: LIST
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PPUSH
13671: CALL_OW 69
13675: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13676: LD_ADDR_VAR 0 19
13680: PUSH
13681: LD_INT 22
13683: PUSH
13684: LD_VAR 0 1
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 2
13695: PUSH
13696: LD_INT 25
13698: PUSH
13699: LD_INT 1
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 25
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 25
13718: PUSH
13719: LD_INT 8
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 25
13728: PUSH
13729: LD_INT 9
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 24
13745: PUSH
13746: LD_INT 1000
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if medicCount > 0 then
13763: LD_VAR 0 7
13767: PUSH
13768: LD_INT 0
13770: GREATER
13771: IFFALSE 13845
// begin if damageUnit_list > 0 then
13773: LD_VAR 0 17
13777: PUSH
13778: LD_INT 0
13780: GREATER
13781: IFFALSE 13845
// begin for i in damageUnit_list do
13783: LD_ADDR_VAR 0 14
13787: PUSH
13788: LD_VAR 0 17
13792: PUSH
13793: FOR_IN
13794: IFFALSE 13843
// begin ComMoveToArea ( i , healArea ) ;
13796: LD_VAR 0 14
13800: PPUSH
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 113
// for j in medic_list do
13810: LD_ADDR_VAR 0 15
13814: PUSH
13815: LD_VAR 0 18
13819: PUSH
13820: FOR_IN
13821: IFFALSE 13839
// AddComHeal ( j , i ) ;
13823: LD_VAR 0 15
13827: PPUSH
13828: LD_VAR 0 14
13832: PPUSH
13833: CALL_OW 188
13837: GO 13820
13839: POP
13840: POP
// end ;
13841: GO 13793
13843: POP
13844: POP
// end ; end ; for i in soldiersOK_list do
13845: LD_ADDR_VAR 0 14
13849: PUSH
13850: LD_VAR 0 19
13854: PUSH
13855: FOR_IN
13856: IFFALSE 14032
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13858: LD_ADDR_VAR 0 22
13862: PUSH
13863: LD_INT 22
13865: PUSH
13866: LD_VAR 0 11
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: PPUSH
13880: LD_VAR 0 14
13884: PPUSH
13885: CALL_OW 74
13889: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13890: LD_ADDR_VAR 0 23
13894: PUSH
13895: LD_INT 22
13897: PUSH
13898: LD_VAR 0 11
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 59
13912: PUSH
13913: EMPTY
13914: LIST
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 21
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: PPUSH
13949: CALL_OW 69
13953: PPUSH
13954: LD_VAR 0 14
13958: PPUSH
13959: CALL_OW 74
13963: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13964: LD_VAR 0 14
13968: PPUSH
13969: LD_VAR 0 22
13973: PPUSH
13974: CALL_OW 296
13978: PUSH
13979: LD_INT 6
13981: PLUS
13982: PUSH
13983: LD_VAR 0 14
13987: PPUSH
13988: LD_VAR 0 23
13992: PPUSH
13993: CALL_OW 296
13997: LESS
13998: IFFALSE 14016
// begin ComAttackUnit ( i , target1 ) ;
14000: LD_VAR 0 14
14004: PPUSH
14005: LD_VAR 0 22
14009: PPUSH
14010: CALL_OW 115
// end else
14014: GO 14030
// begin ComAttackUnit ( i , target2 ) ;
14016: LD_VAR 0 14
14020: PPUSH
14021: LD_VAR 0 23
14025: PPUSH
14026: CALL_OW 115
// end ; end ;
14030: GO 13855
14032: POP
14033: POP
// until soldiersOK_list = [ ] ;
14034: LD_VAR 0 19
14038: PUSH
14039: EMPTY
14040: EQUAL
14041: IFFALSE 13608
// end ; if strategy = 3 then
14043: LD_VAR 0 12
14047: PUSH
14048: LD_INT 3
14050: EQUAL
14051: IFFALSE 14597
// begin repeat wait ( 0 0$3 ) ;
14053: LD_INT 105
14055: PPUSH
14056: CALL_OW 67
// for i in soldiersOK_list do
14060: LD_ADDR_VAR 0 14
14064: PUSH
14065: LD_VAR 0 19
14069: PUSH
14070: FOR_IN
14071: IFFALSE 14135
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14073: LD_VAR 0 14
14077: PPUSH
14078: LD_INT 63
14080: PPUSH
14081: LD_INT 71
14083: PPUSH
14084: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14088: LD_VAR 0 14
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: LD_INT 44
14098: PPUSH
14099: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14103: LD_VAR 0 14
14107: PPUSH
14108: LD_INT 23
14110: PPUSH
14111: LD_INT 18
14113: PPUSH
14114: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14118: LD_VAR 0 14
14122: PPUSH
14123: LD_INT 26
14125: PPUSH
14126: LD_INT 12
14128: PPUSH
14129: CALL_OW 174
// end ;
14133: GO 14070
14135: POP
14136: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14137: LD_INT 14
14139: PPUSH
14140: LD_INT 22
14142: PUSH
14143: LD_VAR 0 1
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 70
14156: PUSH
14157: LD_INT 2
14159: GREATER
14160: IFFALSE 14053
// repeat wait ( 0 0$1 ) ;
14162: LD_INT 35
14164: PPUSH
14165: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14169: LD_ADDR_VAR 0 17
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_VAR 0 1
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: LD_INT 24
14194: PUSH
14195: LD_INT 550
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 24
14208: PUSH
14209: LD_INT 250
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 69
14229: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14230: LD_ADDR_VAR 0 19
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_VAR 0 1
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: LD_INT 25
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 5
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 25
14272: PUSH
14273: LD_INT 8
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 25
14282: PUSH
14283: LD_INT 9
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 24
14299: PUSH
14300: LD_INT 1000
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: ST_TO_ADDR
// if medicCount > 0 then
14317: LD_VAR 0 7
14321: PUSH
14322: LD_INT 0
14324: GREATER
14325: IFFALSE 14399
// begin if damageUnit_list > 0 then
14327: LD_VAR 0 17
14331: PUSH
14332: LD_INT 0
14334: GREATER
14335: IFFALSE 14399
// begin for i in damageUnit_list do
14337: LD_ADDR_VAR 0 14
14341: PUSH
14342: LD_VAR 0 17
14346: PUSH
14347: FOR_IN
14348: IFFALSE 14397
// begin ComMoveToArea ( i , healArea ) ;
14350: LD_VAR 0 14
14354: PPUSH
14355: LD_VAR 0 10
14359: PPUSH
14360: CALL_OW 113
// for j in medic_list do
14364: LD_ADDR_VAR 0 15
14368: PUSH
14369: LD_VAR 0 18
14373: PUSH
14374: FOR_IN
14375: IFFALSE 14393
// AddComHeal ( j , i ) ;
14377: LD_VAR 0 15
14381: PPUSH
14382: LD_VAR 0 14
14386: PPUSH
14387: CALL_OW 188
14391: GO 14374
14393: POP
14394: POP
// end ;
14395: GO 14347
14397: POP
14398: POP
// end ; end ; for i in soldiersOK_list do
14399: LD_ADDR_VAR 0 14
14403: PUSH
14404: LD_VAR 0 19
14408: PUSH
14409: FOR_IN
14410: IFFALSE 14586
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14412: LD_ADDR_VAR 0 22
14416: PUSH
14417: LD_INT 22
14419: PUSH
14420: LD_VAR 0 11
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PPUSH
14429: CALL_OW 69
14433: PPUSH
14434: LD_VAR 0 14
14438: PPUSH
14439: CALL_OW 74
14443: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14444: LD_ADDR_VAR 0 23
14448: PUSH
14449: LD_INT 22
14451: PUSH
14452: LD_VAR 0 11
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 59
14466: PUSH
14467: EMPTY
14468: LIST
14469: PUSH
14470: LD_INT 21
14472: PUSH
14473: LD_INT 1
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 21
14482: PUSH
14483: LD_INT 2
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: PPUSH
14503: CALL_OW 69
14507: PPUSH
14508: LD_VAR 0 14
14512: PPUSH
14513: CALL_OW 74
14517: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14518: LD_VAR 0 14
14522: PPUSH
14523: LD_VAR 0 22
14527: PPUSH
14528: CALL_OW 296
14532: PUSH
14533: LD_INT 6
14535: PLUS
14536: PUSH
14537: LD_VAR 0 14
14541: PPUSH
14542: LD_VAR 0 23
14546: PPUSH
14547: CALL_OW 296
14551: LESS
14552: IFFALSE 14570
// begin ComAttackUnit ( i , target1 ) ;
14554: LD_VAR 0 14
14558: PPUSH
14559: LD_VAR 0 22
14563: PPUSH
14564: CALL_OW 115
// end else
14568: GO 14584
// begin ComAttackUnit ( i , target2 ) ;
14570: LD_VAR 0 14
14574: PPUSH
14575: LD_VAR 0 23
14579: PPUSH
14580: CALL_OW 115
// end ; end ;
14584: GO 14409
14586: POP
14587: POP
// until soldiersOK_list = [ ] ;
14588: LD_VAR 0 19
14592: PUSH
14593: EMPTY
14594: EQUAL
14595: IFFALSE 14162
// end ; end ;
14597: LD_VAR 0 13
14601: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
14611: PPUSH
14612: PPUSH
14613: PPUSH
14614: PPUSH
// amChassisTab = [ ] ;
14615: LD_ADDR_VAR 0 19
14619: PUSH
14620: EMPTY
14621: ST_TO_ADDR
// arChassisTab = [ ] ;
14622: LD_ADDR_VAR 0 18
14626: PUSH
14627: EMPTY
14628: ST_TO_ADDR
// ruChassisTab = [ ] ;
14629: LD_ADDR_VAR 0 17
14633: PUSH
14634: EMPTY
14635: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14636: LD_INT 35
14638: PPUSH
14639: CALL_OW 67
// if nation = 1 then
14643: LD_VAR 0 5
14647: PUSH
14648: LD_INT 1
14650: EQUAL
14651: IFFALSE 15142
// begin uc_side = side ;
14653: LD_ADDR_OWVAR 20
14657: PUSH
14658: LD_VAR 0 2
14662: ST_TO_ADDR
// uc_nation = nation ;
14663: LD_ADDR_OWVAR 21
14667: PUSH
14668: LD_VAR 0 5
14672: ST_TO_ADDR
// vc_engine = vehengine ;
14673: LD_ADDR_OWVAR 39
14677: PUSH
14678: LD_VAR 0 6
14682: ST_TO_ADDR
// vc_control = vehcontrol ;
14683: LD_ADDR_OWVAR 38
14687: PUSH
14688: LD_VAR 0 7
14692: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14693: LD_ADDR_OWVAR 40
14697: PUSH
14698: LD_VAR 0 10
14702: PUSH
14703: LD_INT 1
14705: PPUSH
14706: LD_VAR 0 10
14710: PPUSH
14711: CALL_OW 12
14715: ARRAY
14716: ST_TO_ADDR
// for j = 1 to AMWeapon do
14717: LD_ADDR_VAR 0 14
14721: PUSH
14722: DOUBLE
14723: LD_INT 1
14725: DEC
14726: ST_TO_ADDR
14727: LD_VAR 0 10
14731: PUSH
14732: FOR_TO
14733: IFFALSE 15034
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14735: LD_VAR 0 10
14739: PUSH
14740: LD_VAR 0 14
14744: ARRAY
14745: PUSH
14746: LD_INT 2
14748: EQUAL
14749: PUSH
14750: LD_VAR 0 10
14754: PUSH
14755: LD_VAR 0 14
14759: ARRAY
14760: PUSH
14761: LD_INT 3
14763: EQUAL
14764: OR
14765: IFFALSE 14818
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14767: LD_ADDR_VAR 0 19
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: LD_INT 2
14777: PUSH
14778: LD_INT 3
14780: PUSH
14781: LD_INT 4
14783: PUSH
14784: LD_INT 5
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14794: LD_ADDR_OWVAR 37
14798: PUSH
14799: LD_VAR 0 19
14803: PUSH
14804: LD_INT 1
14806: PPUSH
14807: LD_VAR 0 19
14811: PPUSH
14812: CALL_OW 12
14816: ARRAY
14817: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14818: LD_VAR 0 10
14822: PUSH
14823: LD_VAR 0 14
14827: ARRAY
14828: PUSH
14829: LD_INT 4
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 10
14837: PUSH
14838: LD_VAR 0 14
14842: ARRAY
14843: PUSH
14844: LD_INT 5
14846: EQUAL
14847: OR
14848: PUSH
14849: LD_VAR 0 10
14853: PUSH
14854: LD_VAR 0 14
14858: ARRAY
14859: PUSH
14860: LD_INT 9
14862: EQUAL
14863: OR
14864: PUSH
14865: LD_VAR 0 10
14869: PUSH
14870: LD_VAR 0 14
14874: ARRAY
14875: PUSH
14876: LD_INT 11
14878: EQUAL
14879: OR
14880: PUSH
14881: LD_VAR 0 10
14885: PUSH
14886: LD_VAR 0 14
14890: ARRAY
14891: PUSH
14892: LD_INT 7
14894: EQUAL
14895: OR
14896: IFFALSE 14945
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14898: LD_ADDR_VAR 0 19
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 3
14908: PUSH
14909: LD_INT 4
14911: PUSH
14912: LD_INT 5
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14921: LD_ADDR_OWVAR 37
14925: PUSH
14926: LD_VAR 0 19
14930: PUSH
14931: LD_INT 1
14933: PPUSH
14934: LD_VAR 0 19
14938: PPUSH
14939: CALL_OW 12
14943: ARRAY
14944: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14945: LD_VAR 0 10
14949: PUSH
14950: LD_VAR 0 14
14954: ARRAY
14955: PUSH
14956: LD_INT 8
14958: EQUAL
14959: PUSH
14960: LD_VAR 0 10
14964: PUSH
14965: LD_VAR 0 14
14969: ARRAY
14970: PUSH
14971: LD_INT 6
14973: EQUAL
14974: OR
14975: PUSH
14976: LD_VAR 0 10
14980: PUSH
14981: LD_VAR 0 14
14985: ARRAY
14986: PUSH
14987: LD_INT 10
14989: EQUAL
14990: OR
14991: IFFALSE 15032
// begin amChassisTab = [ 4 , 5 ] ;
14993: LD_ADDR_VAR 0 19
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: LD_INT 5
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15008: LD_ADDR_OWVAR 37
15012: PUSH
15013: LD_VAR 0 19
15017: PUSH
15018: LD_INT 1
15020: PPUSH
15021: LD_VAR 0 19
15025: PPUSH
15026: CALL_OW 12
15030: ARRAY
15031: ST_TO_ADDR
// end ; end ;
15032: GO 14732
15034: POP
15035: POP
// veh = CreateVehicle ;
15036: LD_ADDR_VAR 0 16
15040: PUSH
15041: CALL_OW 45
15045: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15046: LD_VAR 0 16
15050: PPUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 0
15058: PPUSH
15059: CALL_OW 49
// if vehControl = 1 then
15063: LD_VAR 0 7
15067: PUSH
15068: LD_INT 1
15070: EQUAL
15071: IFFALSE 15128
// begin hc_gallery =  ;
15073: LD_ADDR_OWVAR 33
15077: PUSH
15078: LD_STRING 
15080: ST_TO_ADDR
// hc_name =  ;
15081: LD_ADDR_OWVAR 26
15085: PUSH
15086: LD_STRING 
15088: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15089: LD_INT 0
15091: PPUSH
15092: LD_INT 3
15094: PPUSH
15095: LD_VAR 0 4
15099: PPUSH
15100: CALL_OW 380
// un = CreateHuman ;
15104: LD_ADDR_VAR 0 15
15108: PUSH
15109: CALL_OW 44
15113: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15114: LD_VAR 0 15
15118: PPUSH
15119: LD_VAR 0 16
15123: PPUSH
15124: CALL_OW 52
// end ; i = i + 1 ;
15128: LD_ADDR_VAR 0 13
15132: PUSH
15133: LD_VAR 0 13
15137: PUSH
15138: LD_INT 1
15140: PLUS
15141: ST_TO_ADDR
// end ; if nation = 2 then
15142: LD_VAR 0 5
15146: PUSH
15147: LD_INT 2
15149: EQUAL
15150: IFFALSE 15574
// begin uc_side = side ;
15152: LD_ADDR_OWVAR 20
15156: PUSH
15157: LD_VAR 0 2
15161: ST_TO_ADDR
// uc_nation = nation ;
15162: LD_ADDR_OWVAR 21
15166: PUSH
15167: LD_VAR 0 5
15171: ST_TO_ADDR
// vc_engine = vehengine ;
15172: LD_ADDR_OWVAR 39
15176: PUSH
15177: LD_VAR 0 6
15181: ST_TO_ADDR
// vc_control = vehcontrol ;
15182: LD_ADDR_OWVAR 38
15186: PUSH
15187: LD_VAR 0 7
15191: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15192: LD_ADDR_OWVAR 40
15196: PUSH
15197: LD_VAR 0 9
15201: PUSH
15202: LD_INT 1
15204: PPUSH
15205: LD_VAR 0 9
15209: PPUSH
15210: CALL_OW 12
15214: ARRAY
15215: ST_TO_ADDR
// for j = 1 to ARWeapons do
15216: LD_ADDR_VAR 0 14
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_VAR 0 9
15230: PUSH
15231: FOR_TO
15232: IFFALSE 15466
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15234: LD_VAR 0 9
15238: PUSH
15239: LD_VAR 0 14
15243: ARRAY
15244: PUSH
15245: LD_INT 24
15247: EQUAL
15248: PUSH
15249: LD_VAR 0 9
15253: PUSH
15254: LD_VAR 0 14
15258: ARRAY
15259: PUSH
15260: LD_INT 22
15262: EQUAL
15263: OR
15264: PUSH
15265: LD_VAR 0 9
15269: PUSH
15270: LD_VAR 0 14
15274: ARRAY
15275: PUSH
15276: LD_INT 23
15278: EQUAL
15279: OR
15280: PUSH
15281: LD_VAR 0 9
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 30
15294: EQUAL
15295: OR
15296: IFFALSE 15345
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15298: LD_ADDR_VAR 0 18
15302: PUSH
15303: LD_INT 11
15305: PUSH
15306: LD_INT 12
15308: PUSH
15309: LD_INT 13
15311: PUSH
15312: LD_INT 14
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15321: LD_ADDR_OWVAR 37
15325: PUSH
15326: LD_VAR 0 18
15330: PUSH
15331: LD_INT 1
15333: PPUSH
15334: LD_VAR 0 18
15338: PPUSH
15339: CALL_OW 12
15343: ARRAY
15344: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15345: LD_VAR 0 9
15349: PUSH
15350: LD_VAR 0 14
15354: ARRAY
15355: PUSH
15356: LD_INT 29
15358: EQUAL
15359: PUSH
15360: LD_VAR 0 9
15364: PUSH
15365: LD_VAR 0 14
15369: ARRAY
15370: PUSH
15371: LD_INT 28
15373: EQUAL
15374: OR
15375: PUSH
15376: LD_VAR 0 9
15380: PUSH
15381: LD_VAR 0 14
15385: ARRAY
15386: PUSH
15387: LD_INT 27
15389: EQUAL
15390: OR
15391: PUSH
15392: LD_VAR 0 9
15396: PUSH
15397: LD_VAR 0 14
15401: ARRAY
15402: PUSH
15403: LD_INT 26
15405: EQUAL
15406: OR
15407: PUSH
15408: LD_VAR 0 9
15412: PUSH
15413: LD_VAR 0 14
15417: ARRAY
15418: PUSH
15419: LD_INT 25
15421: EQUAL
15422: OR
15423: IFFALSE 15464
// begin arChassisTab = [ 13 , 14 ] ;
15425: LD_ADDR_VAR 0 18
15429: PUSH
15430: LD_INT 13
15432: PUSH
15433: LD_INT 14
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15440: LD_ADDR_OWVAR 37
15444: PUSH
15445: LD_VAR 0 18
15449: PUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_VAR 0 18
15457: PPUSH
15458: CALL_OW 12
15462: ARRAY
15463: ST_TO_ADDR
// end ; end ;
15464: GO 15231
15466: POP
15467: POP
// veh = CreateVehicle ;
15468: LD_ADDR_VAR 0 16
15472: PUSH
15473: CALL_OW 45
15477: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15478: LD_VAR 0 16
15482: PPUSH
15483: LD_VAR 0 1
15487: PPUSH
15488: LD_INT 0
15490: PPUSH
15491: CALL_OW 49
// if vehcontrol = 1 then
15495: LD_VAR 0 7
15499: PUSH
15500: LD_INT 1
15502: EQUAL
15503: IFFALSE 15560
// begin hc_gallery =  ;
15505: LD_ADDR_OWVAR 33
15509: PUSH
15510: LD_STRING 
15512: ST_TO_ADDR
// hc_name =  ;
15513: LD_ADDR_OWVAR 26
15517: PUSH
15518: LD_STRING 
15520: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15521: LD_INT 0
15523: PPUSH
15524: LD_INT 3
15526: PPUSH
15527: LD_VAR 0 4
15531: PPUSH
15532: CALL_OW 380
// un = CreateHuman ;
15536: LD_ADDR_VAR 0 15
15540: PUSH
15541: CALL_OW 44
15545: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15546: LD_VAR 0 15
15550: PPUSH
15551: LD_VAR 0 16
15555: PPUSH
15556: CALL_OW 52
// end ; i = i + 1 ;
15560: LD_ADDR_VAR 0 13
15564: PUSH
15565: LD_VAR 0 13
15569: PUSH
15570: LD_INT 1
15572: PLUS
15573: ST_TO_ADDR
// end ; if nation = 3 then
15574: LD_VAR 0 5
15578: PUSH
15579: LD_INT 3
15581: EQUAL
15582: IFFALSE 15974
// begin uc_side = side ;
15584: LD_ADDR_OWVAR 20
15588: PUSH
15589: LD_VAR 0 2
15593: ST_TO_ADDR
// uc_nation = nation ;
15594: LD_ADDR_OWVAR 21
15598: PUSH
15599: LD_VAR 0 5
15603: ST_TO_ADDR
// vc_engine = vehengine ;
15604: LD_ADDR_OWVAR 39
15608: PUSH
15609: LD_VAR 0 6
15613: ST_TO_ADDR
// vc_control = vehcontrol ;
15614: LD_ADDR_OWVAR 38
15618: PUSH
15619: LD_VAR 0 7
15623: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15624: LD_ADDR_OWVAR 40
15628: PUSH
15629: LD_VAR 0 8
15633: PUSH
15634: LD_INT 1
15636: PPUSH
15637: LD_VAR 0 8
15641: PPUSH
15642: CALL_OW 12
15646: ARRAY
15647: ST_TO_ADDR
// for j = 1 to RuWeapons do
15648: LD_ADDR_VAR 0 14
15652: PUSH
15653: DOUBLE
15654: LD_INT 1
15656: DEC
15657: ST_TO_ADDR
15658: LD_VAR 0 8
15662: PUSH
15663: FOR_TO
15664: IFFALSE 15866
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15666: LD_VAR 0 8
15670: PUSH
15671: LD_VAR 0 14
15675: ARRAY
15676: PUSH
15677: LD_INT 42
15679: EQUAL
15680: PUSH
15681: LD_VAR 0 8
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 43
15694: EQUAL
15695: OR
15696: PUSH
15697: LD_VAR 0 8
15701: PUSH
15702: LD_VAR 0 14
15706: ARRAY
15707: PUSH
15708: LD_INT 44
15710: EQUAL
15711: OR
15712: PUSH
15713: LD_VAR 0 8
15717: PUSH
15718: LD_VAR 0 14
15722: ARRAY
15723: PUSH
15724: LD_INT 45
15726: EQUAL
15727: OR
15728: PUSH
15729: LD_VAR 0 8
15733: PUSH
15734: LD_VAR 0 14
15738: ARRAY
15739: PUSH
15740: LD_INT 49
15742: EQUAL
15743: OR
15744: IFFALSE 15793
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15746: LD_ADDR_VAR 0 17
15750: PUSH
15751: LD_INT 21
15753: PUSH
15754: LD_INT 22
15756: PUSH
15757: LD_INT 23
15759: PUSH
15760: LD_INT 24
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15769: LD_ADDR_OWVAR 37
15773: PUSH
15774: LD_VAR 0 17
15778: PUSH
15779: LD_INT 1
15781: PPUSH
15782: LD_VAR 0 17
15786: PPUSH
15787: CALL_OW 12
15791: ARRAY
15792: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15793: LD_VAR 0 8
15797: PUSH
15798: LD_VAR 0 14
15802: ARRAY
15803: PUSH
15804: LD_INT 46
15806: EQUAL
15807: PUSH
15808: LD_VAR 0 8
15812: PUSH
15813: LD_VAR 0 14
15817: ARRAY
15818: PUSH
15819: LD_INT 47
15821: EQUAL
15822: OR
15823: IFFALSE 15864
// begin ruChassisTab = [ 23 , 24 ] ;
15825: LD_ADDR_VAR 0 17
15829: PUSH
15830: LD_INT 23
15832: PUSH
15833: LD_INT 24
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15840: LD_ADDR_OWVAR 37
15844: PUSH
15845: LD_VAR 0 17
15849: PUSH
15850: LD_INT 1
15852: PPUSH
15853: LD_VAR 0 17
15857: PPUSH
15858: CALL_OW 12
15862: ARRAY
15863: ST_TO_ADDR
// end ; end ;
15864: GO 15663
15866: POP
15867: POP
// veh = CreateVehicle ;
15868: LD_ADDR_VAR 0 16
15872: PUSH
15873: CALL_OW 45
15877: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15878: LD_VAR 0 16
15882: PPUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: LD_INT 0
15890: PPUSH
15891: CALL_OW 49
// if vehcontrol = 1 then
15895: LD_VAR 0 7
15899: PUSH
15900: LD_INT 1
15902: EQUAL
15903: IFFALSE 15960
// begin hc_gallery =  ;
15905: LD_ADDR_OWVAR 33
15909: PUSH
15910: LD_STRING 
15912: ST_TO_ADDR
// hc_name =  ;
15913: LD_ADDR_OWVAR 26
15917: PUSH
15918: LD_STRING 
15920: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15921: LD_INT 0
15923: PPUSH
15924: LD_INT 3
15926: PPUSH
15927: LD_VAR 0 4
15931: PPUSH
15932: CALL_OW 380
// un = CreateHuman ;
15936: LD_ADDR_VAR 0 15
15940: PUSH
15941: CALL_OW 44
15945: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15946: LD_VAR 0 15
15950: PPUSH
15951: LD_VAR 0 16
15955: PPUSH
15956: CALL_OW 52
// end ; i = i + 1 ;
15960: LD_ADDR_VAR 0 13
15964: PUSH
15965: LD_VAR 0 13
15969: PUSH
15970: LD_INT 1
15972: PLUS
15973: ST_TO_ADDR
// end ; until i = vehCount ;
15974: LD_VAR 0 13
15978: PUSH
15979: LD_VAR 0 3
15983: EQUAL
15984: IFFALSE 14636
// repeat wait ( 0 0$1 ) ;
15986: LD_INT 35
15988: PPUSH
15989: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15993: LD_ADDR_VAR 0 20
15997: PUSH
15998: LD_INT 22
16000: PUSH
16001: LD_VAR 0 2
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 21
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 24
16022: PUSH
16023: LD_INT 250
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: ST_TO_ADDR
// if vehicleOK_list > 0 then
16040: LD_VAR 0 20
16044: PUSH
16045: LD_INT 0
16047: GREATER
16048: IFFALSE 16239
// begin for i in vehicleOK_list do
16050: LD_ADDR_VAR 0 13
16054: PUSH
16055: LD_VAR 0 20
16059: PUSH
16060: FOR_IN
16061: IFFALSE 16237
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16063: LD_ADDR_VAR 0 21
16067: PUSH
16068: LD_INT 22
16070: PUSH
16071: LD_VAR 0 11
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 69
16084: PPUSH
16085: LD_VAR 0 13
16089: PPUSH
16090: CALL_OW 74
16094: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16095: LD_ADDR_VAR 0 22
16099: PUSH
16100: LD_INT 22
16102: PUSH
16103: LD_VAR 0 11
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: LD_INT 59
16117: PUSH
16118: EMPTY
16119: LIST
16120: PUSH
16121: LD_INT 21
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 21
16133: PUSH
16134: LD_INT 2
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: PPUSH
16154: CALL_OW 69
16158: PPUSH
16159: LD_VAR 0 13
16163: PPUSH
16164: CALL_OW 74
16168: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16169: LD_VAR 0 13
16173: PPUSH
16174: LD_VAR 0 21
16178: PPUSH
16179: CALL_OW 296
16183: PUSH
16184: LD_INT 6
16186: PLUS
16187: PUSH
16188: LD_VAR 0 13
16192: PPUSH
16193: LD_VAR 0 22
16197: PPUSH
16198: CALL_OW 296
16202: LESS
16203: IFFALSE 16221
// begin ComAttackUnit ( i , target1 ) ;
16205: LD_VAR 0 13
16209: PPUSH
16210: LD_VAR 0 21
16214: PPUSH
16215: CALL_OW 115
// end else
16219: GO 16235
// begin ComAttackUnit ( i , target2 ) ;
16221: LD_VAR 0 13
16225: PPUSH
16226: LD_VAR 0 22
16230: PPUSH
16231: CALL_OW 115
// end ; end ;
16235: GO 16060
16237: POP
16238: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16239: LD_INT 22
16241: PUSH
16242: LD_VAR 0 2
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 21
16253: PUSH
16254: LD_INT 2
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 24
16263: PUSH
16264: LD_INT 250
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: PUSH
16281: LD_INT 0
16283: EQUAL
16284: IFFALSE 15986
// end ;
16286: LD_VAR 0 12
16290: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16291: LD_INT 0
16293: PPUSH
16294: PPUSH
16295: PPUSH
16296: PPUSH
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16301: LD_ADDR_VAR 0 7
16305: PUSH
16306: LD_INT 22
16308: PUSH
16309: LD_VAR 0 1
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: LD_INT 3
16323: PUSH
16324: LD_INT 24
16326: PUSH
16327: LD_INT 550
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 24
16340: PUSH
16341: LD_INT 250
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PPUSH
16357: CALL_OW 69
16361: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16362: LD_ADDR_VAR 0 8
16366: PUSH
16367: LD_INT 22
16369: PUSH
16370: LD_VAR 0 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 2
16381: PUSH
16382: LD_INT 25
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 25
16394: PUSH
16395: LD_INT 5
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 25
16404: PUSH
16405: LD_INT 8
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 25
16414: PUSH
16415: LD_INT 9
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 24
16431: PUSH
16432: LD_INT 1000
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: PPUSH
16444: CALL_OW 69
16448: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16449: LD_ADDR_VAR 0 9
16453: PUSH
16454: LD_INT 22
16456: PUSH
16457: LD_VAR 0 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 4
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: ST_TO_ADDR
// if medicCount > 0 then
16485: LD_VAR 0 9
16489: PUSH
16490: LD_INT 0
16492: GREATER
16493: IFFALSE 16567
// begin if damageUnit_list > 0 then
16495: LD_VAR 0 7
16499: PUSH
16500: LD_INT 0
16502: GREATER
16503: IFFALSE 16567
// begin for i in damageUnit_list do
16505: LD_ADDR_VAR 0 5
16509: PUSH
16510: LD_VAR 0 7
16514: PUSH
16515: FOR_IN
16516: IFFALSE 16565
// begin ComMoveToArea ( i , healArea ) ;
16518: LD_VAR 0 5
16522: PPUSH
16523: LD_VAR 0 2
16527: PPUSH
16528: CALL_OW 113
// for j in medicCount do
16532: LD_ADDR_VAR 0 6
16536: PUSH
16537: LD_VAR 0 9
16541: PUSH
16542: FOR_IN
16543: IFFALSE 16561
// AddComHeal ( j , i ) ;
16545: LD_VAR 0 6
16549: PPUSH
16550: LD_VAR 0 5
16554: PPUSH
16555: CALL_OW 188
16559: GO 16542
16561: POP
16562: POP
// end ;
16563: GO 16515
16565: POP
16566: POP
// end ; end ; if soldiersOK_list > 0 then
16567: LD_VAR 0 8
16571: PUSH
16572: LD_INT 0
16574: GREATER
16575: IFFALSE 16766
// begin for i in soldiersOK_list do
16577: LD_ADDR_VAR 0 5
16581: PUSH
16582: LD_VAR 0 8
16586: PUSH
16587: FOR_IN
16588: IFFALSE 16764
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16590: LD_ADDR_VAR 0 10
16594: PUSH
16595: LD_INT 22
16597: PUSH
16598: LD_VAR 0 3
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: PPUSH
16612: LD_VAR 0 5
16616: PPUSH
16617: CALL_OW 74
16621: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16622: LD_ADDR_VAR 0 11
16626: PUSH
16627: LD_INT 22
16629: PUSH
16630: LD_VAR 0 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: LD_INT 59
16644: PUSH
16645: EMPTY
16646: LIST
16647: PUSH
16648: LD_INT 21
16650: PUSH
16651: LD_INT 1
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 21
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: EMPTY
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PPUSH
16686: LD_VAR 0 5
16690: PPUSH
16691: CALL_OW 74
16695: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16696: LD_VAR 0 5
16700: PPUSH
16701: LD_VAR 0 10
16705: PPUSH
16706: CALL_OW 296
16710: PUSH
16711: LD_INT 8
16713: PLUS
16714: PUSH
16715: LD_VAR 0 5
16719: PPUSH
16720: LD_VAR 0 11
16724: PPUSH
16725: CALL_OW 296
16729: LESS
16730: IFFALSE 16748
// begin ComAttackUnit ( i , target1 ) ;
16732: LD_VAR 0 5
16736: PPUSH
16737: LD_VAR 0 10
16741: PPUSH
16742: CALL_OW 115
// end else
16746: GO 16762
// begin ComAttackUnit ( i , target2 ) ;
16748: LD_VAR 0 5
16752: PPUSH
16753: LD_VAR 0 11
16757: PPUSH
16758: CALL_OW 115
// end ; end ;
16762: GO 16587
16764: POP
16765: POP
// end ; end ;
16766: LD_VAR 0 4
16770: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16771: LD_INT 0
16773: PPUSH
16774: PPUSH
// list := [ ] ;
16775: LD_ADDR_VAR 0 5
16779: PUSH
16780: EMPTY
16781: ST_TO_ADDR
// case d of 0 :
16782: LD_VAR 0 3
16786: PUSH
16787: LD_INT 0
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16795
16793: GO 16928
16795: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16796: LD_ADDR_VAR 0 5
16800: PUSH
16801: LD_VAR 0 1
16805: PUSH
16806: LD_INT 4
16808: MINUS
16809: PUSH
16810: LD_VAR 0 2
16814: PUSH
16815: LD_INT 4
16817: MINUS
16818: PUSH
16819: LD_INT 2
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: PUSH
16827: LD_VAR 0 1
16831: PUSH
16832: LD_INT 3
16834: MINUS
16835: PUSH
16836: LD_VAR 0 2
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: PUSH
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 4
16856: PLUS
16857: PUSH
16858: LD_VAR 0 2
16862: PUSH
16863: LD_INT 4
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: PUSH
16871: LD_VAR 0 1
16875: PUSH
16876: LD_INT 3
16878: PLUS
16879: PUSH
16880: LD_VAR 0 2
16884: PUSH
16885: LD_INT 3
16887: PLUS
16888: PUSH
16889: LD_INT 5
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: PUSH
16897: LD_VAR 0 1
16901: PUSH
16902: LD_VAR 0 2
16906: PUSH
16907: LD_INT 4
16909: PLUS
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: ST_TO_ADDR
// end ; 1 :
16926: GO 17626
16928: LD_INT 1
16930: DOUBLE
16931: EQUAL
16932: IFTRUE 16936
16934: GO 17069
16936: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16937: LD_ADDR_VAR 0 5
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: LD_VAR 0 2
16951: PUSH
16952: LD_INT 4
16954: MINUS
16955: PUSH
16956: LD_INT 3
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: PUSH
16964: LD_VAR 0 1
16968: PUSH
16969: LD_INT 3
16971: MINUS
16972: PUSH
16973: LD_VAR 0 2
16977: PUSH
16978: LD_INT 3
16980: MINUS
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: PUSH
16990: LD_VAR 0 1
16994: PUSH
16995: LD_INT 4
16997: MINUS
16998: PUSH
16999: LD_VAR 0 2
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: PUSH
17012: LD_VAR 0 1
17016: PUSH
17017: LD_VAR 0 2
17021: PUSH
17022: LD_INT 3
17024: PLUS
17025: PUSH
17026: LD_INT 0
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: PUSH
17034: LD_VAR 0 1
17038: PUSH
17039: LD_INT 4
17041: PLUS
17042: PUSH
17043: LD_VAR 0 2
17047: PUSH
17048: LD_INT 4
17050: PLUS
17051: PUSH
17052: LD_INT 5
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: ST_TO_ADDR
// end ; 2 :
17067: GO 17626
17069: LD_INT 2
17071: DOUBLE
17072: EQUAL
17073: IFTRUE 17077
17075: GO 17206
17077: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17078: LD_ADDR_VAR 0 5
17082: PUSH
17083: LD_VAR 0 1
17087: PUSH
17088: LD_VAR 0 2
17092: PUSH
17093: LD_INT 3
17095: MINUS
17096: PUSH
17097: LD_INT 3
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: PUSH
17105: LD_VAR 0 1
17109: PUSH
17110: LD_INT 4
17112: PLUS
17113: PUSH
17114: LD_VAR 0 2
17118: PUSH
17119: LD_INT 4
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: PUSH
17127: LD_VAR 0 1
17131: PUSH
17132: LD_VAR 0 2
17136: PUSH
17137: LD_INT 4
17139: PLUS
17140: PUSH
17141: LD_INT 0
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: PUSH
17149: LD_VAR 0 1
17153: PUSH
17154: LD_INT 3
17156: MINUS
17157: PUSH
17158: LD_VAR 0 2
17162: PUSH
17163: LD_INT 1
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: PUSH
17171: LD_VAR 0 1
17175: PUSH
17176: LD_INT 4
17178: MINUS
17179: PUSH
17180: LD_VAR 0 2
17184: PUSH
17185: LD_INT 4
17187: MINUS
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: ST_TO_ADDR
// end ; 3 :
17204: GO 17626
17206: LD_INT 3
17208: DOUBLE
17209: EQUAL
17210: IFTRUE 17214
17212: GO 17347
17214: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17215: LD_ADDR_VAR 0 5
17219: PUSH
17220: LD_VAR 0 1
17224: PUSH
17225: LD_INT 3
17227: PLUS
17228: PUSH
17229: LD_VAR 0 2
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: LIST
17241: PUSH
17242: LD_VAR 0 1
17246: PUSH
17247: LD_INT 4
17249: PLUS
17250: PUSH
17251: LD_VAR 0 2
17255: PUSH
17256: LD_INT 4
17258: PLUS
17259: PUSH
17260: LD_INT 5
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: LD_VAR 0 1
17272: PUSH
17273: LD_INT 4
17275: MINUS
17276: PUSH
17277: LD_VAR 0 2
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: LIST
17289: PUSH
17290: LD_VAR 0 1
17294: PUSH
17295: LD_VAR 0 2
17299: PUSH
17300: LD_INT 4
17302: MINUS
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: PUSH
17312: LD_VAR 0 1
17316: PUSH
17317: LD_INT 3
17319: MINUS
17320: PUSH
17321: LD_VAR 0 2
17325: PUSH
17326: LD_INT 3
17328: MINUS
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: ST_TO_ADDR
// end ; 4 :
17345: GO 17626
17347: LD_INT 4
17349: DOUBLE
17350: EQUAL
17351: IFTRUE 17355
17353: GO 17488
17355: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17356: LD_ADDR_VAR 0 5
17360: PUSH
17361: LD_VAR 0 1
17365: PUSH
17366: LD_VAR 0 2
17370: PUSH
17371: LD_INT 4
17373: PLUS
17374: PUSH
17375: LD_INT 0
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: PUSH
17383: LD_VAR 0 1
17387: PUSH
17388: LD_INT 3
17390: PLUS
17391: PUSH
17392: LD_VAR 0 2
17396: PUSH
17397: LD_INT 3
17399: PLUS
17400: PUSH
17401: LD_INT 5
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: PUSH
17409: LD_VAR 0 1
17413: PUSH
17414: LD_INT 3
17416: PLUS
17417: PUSH
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 4
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: LD_VAR 0 1
17435: PUSH
17436: LD_VAR 0 2
17440: PUSH
17441: LD_INT 3
17443: MINUS
17444: PUSH
17445: LD_INT 3
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_VAR 0 1
17457: PUSH
17458: LD_INT 4
17460: MINUS
17461: PUSH
17462: LD_VAR 0 2
17466: PUSH
17467: LD_INT 4
17469: MINUS
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: ST_TO_ADDR
// end ; 5 :
17486: GO 17626
17488: LD_INT 5
17490: DOUBLE
17491: EQUAL
17492: IFTRUE 17496
17494: GO 17625
17496: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17497: LD_ADDR_VAR 0 5
17501: PUSH
17502: LD_VAR 0 1
17506: PUSH
17507: LD_INT 4
17509: MINUS
17510: PUSH
17511: LD_VAR 0 2
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: LD_VAR 0 1
17528: PUSH
17529: LD_VAR 0 2
17533: PUSH
17534: LD_INT 4
17536: MINUS
17537: PUSH
17538: LD_INT 3
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: PUSH
17546: LD_VAR 0 1
17550: PUSH
17551: LD_INT 4
17553: PLUS
17554: PUSH
17555: LD_VAR 0 2
17559: PUSH
17560: LD_INT 4
17562: PLUS
17563: PUSH
17564: LD_INT 5
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: PUSH
17572: LD_VAR 0 1
17576: PUSH
17577: LD_INT 3
17579: PLUS
17580: PUSH
17581: LD_VAR 0 2
17585: PUSH
17586: LD_INT 4
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: PUSH
17594: LD_VAR 0 1
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: LD_INT 3
17606: PLUS
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: ST_TO_ADDR
// end ; end ;
17623: GO 17626
17625: POP
// result := list ;
17626: LD_ADDR_VAR 0 4
17630: PUSH
17631: LD_VAR 0 5
17635: ST_TO_ADDR
// end ;
17636: LD_VAR 0 4
17640: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17641: LD_INT 0
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
// result := false ;
17652: LD_ADDR_VAR 0 7
17656: PUSH
17657: LD_INT 0
17659: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17660: LD_VAR 0 1
17664: NOT
17665: PUSH
17666: LD_VAR 0 1
17670: PPUSH
17671: CALL_OW 266
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: IN
17686: NOT
17687: OR
17688: PUSH
17689: LD_VAR 0 2
17693: NOT
17694: OR
17695: PUSH
17696: LD_VAR 0 5
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: LD_INT 2
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 4
17715: PUSH
17716: LD_INT 5
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: IN
17727: NOT
17728: OR
17729: PUSH
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_VAR 0 4
17739: PPUSH
17740: CALL_OW 488
17744: NOT
17745: OR
17746: IFFALSE 17750
// exit ;
17748: GO 18431
// pom := GetBase ( bdepot ) ;
17750: LD_ADDR_VAR 0 10
17754: PUSH
17755: LD_VAR 0 1
17759: PPUSH
17760: CALL_OW 274
17764: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17765: LD_ADDR_VAR 0 11
17769: PUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: LD_VAR 0 1
17779: PPUSH
17780: CALL_OW 248
17784: PPUSH
17785: CALL_OW 450
17789: ST_TO_ADDR
// if check_cost then
17790: LD_VAR 0 6
17794: IFFALSE 17871
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17796: LD_VAR 0 10
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 275
17808: PUSH
17809: LD_VAR 0 11
17813: PUSH
17814: LD_INT 1
17816: ARRAY
17817: GREATEREQUAL
17818: PUSH
17819: LD_VAR 0 10
17823: PPUSH
17824: LD_INT 2
17826: PPUSH
17827: CALL_OW 275
17831: PUSH
17832: LD_VAR 0 11
17836: PUSH
17837: LD_INT 2
17839: ARRAY
17840: GREATEREQUAL
17841: AND
17842: PUSH
17843: LD_VAR 0 10
17847: PPUSH
17848: LD_INT 3
17850: PPUSH
17851: CALL_OW 275
17855: PUSH
17856: LD_VAR 0 11
17860: PUSH
17861: LD_INT 3
17863: ARRAY
17864: GREATEREQUAL
17865: AND
17866: NOT
17867: IFFALSE 17871
// exit ;
17869: GO 18431
// if GetBType ( bdepot ) = b_depot then
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 266
17880: PUSH
17881: LD_INT 0
17883: EQUAL
17884: IFFALSE 17896
// dist := 28 else
17886: LD_ADDR_VAR 0 14
17890: PUSH
17891: LD_INT 28
17893: ST_TO_ADDR
17894: GO 17904
// dist := 36 ;
17896: LD_ADDR_VAR 0 14
17900: PUSH
17901: LD_INT 36
17903: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17904: LD_VAR 0 1
17908: PPUSH
17909: LD_VAR 0 3
17913: PPUSH
17914: LD_VAR 0 4
17918: PPUSH
17919: CALL_OW 297
17923: PUSH
17924: LD_VAR 0 14
17928: GREATER
17929: IFFALSE 17933
// exit ;
17931: GO 18431
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17933: LD_ADDR_VAR 0 12
17937: PUSH
17938: LD_VAR 0 2
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_VAR 0 4
17952: PPUSH
17953: LD_VAR 0 5
17957: PPUSH
17958: LD_VAR 0 1
17962: PPUSH
17963: CALL_OW 248
17967: PPUSH
17968: LD_INT 0
17970: PPUSH
17971: CALL 18436 0 6
17975: ST_TO_ADDR
// if not hexes then
17976: LD_VAR 0 12
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 18431
// hex := GetHexInfo ( x , y ) ;
17985: LD_ADDR_VAR 0 15
17989: PUSH
17990: LD_VAR 0 3
17994: PPUSH
17995: LD_VAR 0 4
17999: PPUSH
18000: CALL_OW 546
18004: ST_TO_ADDR
// if hex [ 1 ] then
18005: LD_VAR 0 15
18009: PUSH
18010: LD_INT 1
18012: ARRAY
18013: IFFALSE 18017
// exit ;
18015: GO 18431
// height := hex [ 2 ] ;
18017: LD_ADDR_VAR 0 13
18021: PUSH
18022: LD_VAR 0 15
18026: PUSH
18027: LD_INT 2
18029: ARRAY
18030: ST_TO_ADDR
// for i = 1 to hexes do
18031: LD_ADDR_VAR 0 8
18035: PUSH
18036: DOUBLE
18037: LD_INT 1
18039: DEC
18040: ST_TO_ADDR
18041: LD_VAR 0 12
18045: PUSH
18046: FOR_TO
18047: IFFALSE 18375
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18049: LD_VAR 0 12
18053: PUSH
18054: LD_VAR 0 8
18058: ARRAY
18059: PUSH
18060: LD_INT 1
18062: ARRAY
18063: PPUSH
18064: LD_VAR 0 12
18068: PUSH
18069: LD_VAR 0 8
18073: ARRAY
18074: PUSH
18075: LD_INT 2
18077: ARRAY
18078: PPUSH
18079: CALL_OW 488
18083: NOT
18084: IFFALSE 18088
// continue ;
18086: GO 18046
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18088: LD_ADDR_VAR 0 9
18092: PUSH
18093: LD_VAR 0 12
18097: PUSH
18098: LD_VAR 0 8
18102: ARRAY
18103: PUSH
18104: LD_INT 1
18106: ARRAY
18107: PPUSH
18108: LD_VAR 0 12
18112: PUSH
18113: LD_VAR 0 8
18117: ARRAY
18118: PUSH
18119: LD_INT 2
18121: ARRAY
18122: PPUSH
18123: CALL_OW 546
18127: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18128: LD_VAR 0 9
18132: PUSH
18133: LD_INT 1
18135: ARRAY
18136: PUSH
18137: LD_VAR 0 9
18141: PUSH
18142: LD_INT 2
18144: ARRAY
18145: PUSH
18146: LD_VAR 0 13
18150: PUSH
18151: LD_INT 2
18153: PLUS
18154: GREATER
18155: OR
18156: PUSH
18157: LD_VAR 0 9
18161: PUSH
18162: LD_INT 2
18164: ARRAY
18165: PUSH
18166: LD_VAR 0 13
18170: PUSH
18171: LD_INT 2
18173: MINUS
18174: LESS
18175: OR
18176: PUSH
18177: LD_VAR 0 9
18181: PUSH
18182: LD_INT 3
18184: ARRAY
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 8
18191: PUSH
18192: LD_INT 9
18194: PUSH
18195: LD_INT 10
18197: PUSH
18198: LD_INT 11
18200: PUSH
18201: LD_INT 12
18203: PUSH
18204: LD_INT 13
18206: PUSH
18207: LD_INT 16
18209: PUSH
18210: LD_INT 17
18212: PUSH
18213: LD_INT 18
18215: PUSH
18216: LD_INT 19
18218: PUSH
18219: LD_INT 20
18221: PUSH
18222: LD_INT 21
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: NOT
18241: OR
18242: PUSH
18243: LD_VAR 0 9
18247: PUSH
18248: LD_INT 5
18250: ARRAY
18251: NOT
18252: OR
18253: PUSH
18254: LD_VAR 0 9
18258: PUSH
18259: LD_INT 6
18261: ARRAY
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: LD_INT 2
18268: PUSH
18269: LD_INT 7
18271: PUSH
18272: LD_INT 9
18274: PUSH
18275: LD_INT 10
18277: PUSH
18278: LD_INT 11
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: OR
18291: PUSH
18292: LD_VAR 0 12
18296: PUSH
18297: LD_VAR 0 8
18301: ARRAY
18302: PUSH
18303: LD_INT 1
18305: ARRAY
18306: PPUSH
18307: LD_VAR 0 12
18311: PUSH
18312: LD_VAR 0 8
18316: ARRAY
18317: PUSH
18318: LD_INT 2
18320: ARRAY
18321: PPUSH
18322: CALL_OW 428
18326: PUSH
18327: LD_INT 0
18329: GREATER
18330: OR
18331: PUSH
18332: LD_VAR 0 12
18336: PUSH
18337: LD_VAR 0 8
18341: ARRAY
18342: PUSH
18343: LD_INT 1
18345: ARRAY
18346: PPUSH
18347: LD_VAR 0 12
18351: PUSH
18352: LD_VAR 0 8
18356: ARRAY
18357: PUSH
18358: LD_INT 2
18360: ARRAY
18361: PPUSH
18362: CALL_OW 351
18366: OR
18367: IFFALSE 18373
// exit ;
18369: POP
18370: POP
18371: GO 18431
// end ;
18373: GO 18046
18375: POP
18376: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18377: LD_VAR 0 2
18381: PUSH
18382: LD_INT 29
18384: PUSH
18385: LD_INT 30
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: IN
18392: PUSH
18393: LD_VAR 0 3
18397: PPUSH
18398: LD_VAR 0 4
18402: PPUSH
18403: LD_VAR 0 1
18407: PPUSH
18408: CALL_OW 255
18412: PPUSH
18413: CALL_OW 440
18417: NOT
18418: AND
18419: IFFALSE 18423
// exit ;
18421: GO 18431
// result := true ;
18423: LD_ADDR_VAR 0 7
18427: PUSH
18428: LD_INT 1
18430: ST_TO_ADDR
// end ;
18431: LD_VAR 0 7
18435: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18436: LD_INT 0
18438: PPUSH
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
18491: PPUSH
18492: PPUSH
18493: PPUSH
18494: PPUSH
18495: PPUSH
// result = [ ] ;
18496: LD_ADDR_VAR 0 7
18500: PUSH
18501: EMPTY
18502: ST_TO_ADDR
// temp_list = [ ] ;
18503: LD_ADDR_VAR 0 9
18507: PUSH
18508: EMPTY
18509: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18510: LD_VAR 0 4
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: LD_INT 5
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: IN
18541: NOT
18542: PUSH
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: IN
18558: PUSH
18559: LD_VAR 0 5
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: IN
18578: NOT
18579: AND
18580: OR
18581: IFFALSE 18585
// exit ;
18583: GO 36970
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18585: LD_VAR 0 1
18589: PUSH
18590: LD_INT 6
18592: PUSH
18593: LD_INT 7
18595: PUSH
18596: LD_INT 8
18598: PUSH
18599: LD_INT 13
18601: PUSH
18602: LD_INT 12
18604: PUSH
18605: LD_INT 15
18607: PUSH
18608: LD_INT 11
18610: PUSH
18611: LD_INT 14
18613: PUSH
18614: LD_INT 10
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: IN
18628: IFFALSE 18638
// btype = b_lab ;
18630: LD_ADDR_VAR 0 1
18634: PUSH
18635: LD_INT 6
18637: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18638: LD_VAR 0 6
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: IN
18657: NOT
18658: PUSH
18659: LD_VAR 0 1
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: LD_INT 6
18678: PUSH
18679: LD_INT 36
18681: PUSH
18682: LD_INT 4
18684: PUSH
18685: LD_INT 5
18687: PUSH
18688: LD_INT 31
18690: PUSH
18691: LD_INT 32
18693: PUSH
18694: LD_INT 33
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: IN
18710: NOT
18711: PUSH
18712: LD_VAR 0 6
18716: PUSH
18717: LD_INT 1
18719: EQUAL
18720: AND
18721: OR
18722: PUSH
18723: LD_VAR 0 1
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 3
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: IN
18738: NOT
18739: PUSH
18740: LD_VAR 0 6
18744: PUSH
18745: LD_INT 2
18747: EQUAL
18748: AND
18749: OR
18750: IFFALSE 18760
// mode = 0 ;
18752: LD_ADDR_VAR 0 6
18756: PUSH
18757: LD_INT 0
18759: ST_TO_ADDR
// case mode of 0 :
18760: LD_VAR 0 6
18764: PUSH
18765: LD_INT 0
18767: DOUBLE
18768: EQUAL
18769: IFTRUE 18773
18771: GO 30226
18773: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18774: LD_ADDR_VAR 0 11
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 0
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: NEG
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: LD_INT 2
18870: NEG
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: LD_INT 2
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: NEG
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 3
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 0
18930: PUSH
18931: LD_INT 3
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: NEG
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18967: LD_ADDR_VAR 0 12
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: NEG
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: NEG
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: NEG
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 3
19124: NEG
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 3
19135: NEG
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19163: LD_ADDR_VAR 0 13
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: NEG
19245: PUSH
19246: LD_INT 2
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: NEG
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 2
19298: NEG
19299: PUSH
19300: LD_INT 2
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: LD_INT 3
19314: NEG
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 3
19322: NEG
19323: PUSH
19324: LD_INT 2
19326: NEG
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 3
19334: NEG
19335: PUSH
19336: LD_INT 3
19338: NEG
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19362: LD_ADDR_VAR 0 14
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: LD_INT 0
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: LD_INT 1
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: LD_INT 2
19447: NEG
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: LD_INT 2
19458: NEG
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: NEG
19509: PUSH
19510: LD_INT 3
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: LD_INT 3
19523: NEG
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: LD_INT 2
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19558: LD_ADDR_VAR 0 15
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: NEG
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 1
19707: NEG
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 3
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19751: LD_ADDR_VAR 0 16
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: NEG
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: LD_INT 2
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: LD_INT 3
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 3
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19944: LD_ADDR_VAR 0 17
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: LD_INT 0
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 2
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 2
20069: PUSH
20070: LD_INT 1
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: NEG
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: NEG
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: LD_INT 2
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20174: LD_ADDR_VAR 0 18
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: LD_INT 1
20194: NEG
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 1
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: LD_INT 1
20247: NEG
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: NEG
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 2
20270: NEG
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 2
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: LD_INT 2
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 2
20350: NEG
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: NEG
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: LD_INT 2
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20404: LD_ADDR_VAR 0 19
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: LD_INT 1
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 1
20473: NEG
20474: PUSH
20475: LD_INT 1
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: LD_INT 2
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 2
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: LD_INT 2
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: NEG
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 2
20591: NEG
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: NEG
20604: PUSH
20605: LD_INT 2
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20634: LD_ADDR_VAR 0 20
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: NEG
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: LD_INT 2
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20864: LD_ADDR_VAR 0 21
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: LD_INT 1
20884: NEG
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 1
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: LD_INT 2
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: LD_INT 2
20960: NEG
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: LD_INT 0
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: LD_INT 2
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: NEG
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 2
21063: NEG
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21094: LD_ADDR_VAR 0 22
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: LD_INT 2
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: LD_INT 2
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: LD_INT 1
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 1
21259: NEG
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: NEG
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21324: LD_ADDR_VAR 0 23
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: LD_INT 2
21409: NEG
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: LD_INT 2
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: LD_INT 2
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: NEG
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: NEG
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 2
21523: NEG
21524: PUSH
21525: LD_INT 2
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 2
21535: NEG
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: LD_INT 3
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: LD_INT 2
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21604: LD_ADDR_VAR 0 24
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 0
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 1
21685: NEG
21686: PUSH
21687: LD_INT 2
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: LD_INT 2
21700: NEG
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 2
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 2
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 2
21780: NEG
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 2
21803: NEG
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: LD_INT 2
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 3
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21880: LD_ADDR_VAR 0 25
21884: PUSH
21885: LD_INT 0
21887: PUSH
21888: LD_INT 0
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: PUSH
21909: LD_INT 0
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: LD_INT 1
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: LD_INT 2
21965: NEG
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 2
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 2
22067: NEG
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: LD_INT 2
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 3
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 3
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: LD_INT 3
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: LD_INT 3
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22154: LD_ADDR_VAR 0 26
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: LD_INT 2
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 2
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 2
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 2
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 2
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: NEG
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: NEG
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: NEG
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: NEG
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: NEG
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22430: LD_ADDR_VAR 0 27
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: LD_INT 2
22515: NEG
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 2
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: NEG
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: NEG
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: NEG
22630: PUSH
22631: LD_INT 2
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: NEG
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 3
22663: NEG
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 3
22675: NEG
22676: PUSH
22677: LD_INT 2
22679: NEG
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22710: LD_ADDR_VAR 0 28
22714: PUSH
22715: LD_INT 0
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: LD_INT 2
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: LD_INT 2
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 2
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 2
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: NEG
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 3
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: LD_INT 3
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 3
22945: NEG
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 3
22957: NEG
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22992: LD_ADDR_VAR 0 29
22996: PUSH
22997: LD_INT 0
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: LD_INT 1
23065: NEG
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: LD_INT 2
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 2
23170: NEG
23171: PUSH
23172: LD_INT 2
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: LD_INT 3
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 3
23236: NEG
23237: PUSH
23238: LD_INT 2
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23271: LD_ADDR_VAR 0 30
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: LD_INT 2
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 2
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 2
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 0
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 2
23448: NEG
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 3
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 2
23503: NEG
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 3
23514: NEG
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23549: LD_ADDR_VAR 0 31
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 1
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 2
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 2
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: LD_INT 2
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: NEG
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: NEG
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 2
23726: NEG
23727: PUSH
23728: LD_INT 2
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: NEG
23739: PUSH
23740: LD_INT 3
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 3
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 3
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 3
23792: NEG
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23827: LD_ADDR_VAR 0 32
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: LD_INT 2
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: LD_INT 1
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 2
23952: PUSH
23953: LD_INT 2
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: LD_INT 2
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: LD_INT 2
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: NEG
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 3
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 2
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 2
24059: NEG
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 3
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24105: LD_ADDR_VAR 0 33
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: LD_INT 2
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 2
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: LD_INT 2
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 2
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: LD_INT 1
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 2
24271: NEG
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: NEG
24284: PUSH
24285: LD_INT 2
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: LD_INT 3
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 3
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: LD_INT 3
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 3
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24384: LD_ADDR_VAR 0 34
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: LD_INT 2
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: NEG
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 2
24563: NEG
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: LD_INT 3
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: LD_INT 2
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: LD_INT 3
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: NEG
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 3
24629: NEG
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24664: LD_ADDR_VAR 0 35
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: NEG
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24776: LD_ADDR_VAR 0 36
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: LD_INT 1
24849: NEG
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: NEG
24858: PUSH
24859: LD_INT 2
24861: NEG
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24888: LD_ADDR_VAR 0 37
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25000: LD_ADDR_VAR 0 38
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: LD_INT 0
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: NEG
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25112: LD_ADDR_VAR 0 39
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: LD_INT 2
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25224: LD_ADDR_VAR 0 40
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25336: LD_ADDR_VAR 0 41
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: NEG
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 2
25526: NEG
25527: PUSH
25528: LD_INT 3
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 3
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 3
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 3
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 3
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 3
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 3
25610: NEG
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 3
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 3
25633: NEG
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 3
25645: NEG
25646: PUSH
25647: LD_INT 3
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25686: LD_ADDR_VAR 0 42
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: NEG
25756: PUSH
25757: LD_INT 1
25759: NEG
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: NEG
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: NEG
25877: PUSH
25878: LD_INT 3
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 3
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 3
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 2
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 3
25932: PUSH
25933: LD_INT 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: LD_INT 3
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 3
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 3
25983: NEG
25984: PUSH
25985: LD_INT 2
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 3
25995: NEG
25996: PUSH
25997: LD_INT 3
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26036: LD_ADDR_VAR 0 43
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: LD_INT 3
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: LD_INT 3
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 3
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 3
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: LD_INT 3
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: LD_INT 3
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 2
26321: NEG
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 3
26332: NEG
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 3
26343: NEG
26344: PUSH
26345: LD_INT 1
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26384: LD_ADDR_VAR 0 44
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 2
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 2
26562: NEG
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 2
26574: NEG
26575: PUSH
26576: LD_INT 3
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 3
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 3
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 2
26647: NEG
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 3
26658: NEG
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 3
26669: NEG
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 3
26681: NEG
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 3
26693: NEG
26694: PUSH
26695: LD_INT 3
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26734: LD_ADDR_VAR 0 45
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: LD_INT 2
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 2
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 2
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: LD_INT 2
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 2
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: LD_INT 1
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 2
26924: NEG
26925: PUSH
26926: LD_INT 3
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 3
26940: NEG
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 3
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 2
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 3
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 3
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 3
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 3
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 3
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 3
27031: NEG
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 3
27043: NEG
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27084: LD_ADDR_VAR 0 46
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 2
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 2
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 2
27261: NEG
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: LD_INT 3
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 3
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 3
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 3
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 3
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 3
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: NEG
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 3
27380: NEG
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 3
27391: NEG
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27432: LD_ADDR_VAR 0 47
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27583: LD_ADDR_VAR 0 48
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 2
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27730: LD_ADDR_VAR 0 49
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27874: LD_ADDR_VAR 0 50
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28018: LD_ADDR_VAR 0 51
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28165: LD_ADDR_VAR 0 52
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28316: LD_ADDR_VAR 0 53
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 2
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: LD_INT 2
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: PUSH
28442: LD_INT 1
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 2
28492: NEG
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: NEG
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: LD_INT 2
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28546: LD_ADDR_VAR 0 54
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: LD_INT 2
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 2
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 2
28733: NEG
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28776: LD_ADDR_VAR 0 55
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 2
28861: NEG
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: LD_INT 2
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: NEG
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29006: LD_ADDR_VAR 0 56
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 2
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: LD_INT 2
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 2
29193: NEG
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 2
29205: NEG
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29236: LD_ADDR_VAR 0 57
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: LD_INT 1
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 2
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 2
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 2
29423: NEG
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 2
29435: NEG
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29466: LD_ADDR_VAR 0 58
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 2
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 2
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 2
29642: NEG
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 2
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29696: LD_ADDR_VAR 0 59
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29784: LD_ADDR_VAR 0 60
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29872: LD_ADDR_VAR 0 61
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29960: LD_ADDR_VAR 0 62
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30048: LD_ADDR_VAR 0 63
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30136: LD_ADDR_VAR 0 64
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// end ; 1 :
30224: GO 36121
30226: LD_INT 1
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 32857
30234: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30235: LD_ADDR_VAR 0 11
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 3
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: LD_INT 2
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: LIST
30278: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30279: LD_ADDR_VAR 0 12
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30320: LD_ADDR_VAR 0 13
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: LD_INT 3
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30360: LD_ADDR_VAR 0 14
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 3
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30401: LD_ADDR_VAR 0 15
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30445: LD_ADDR_VAR 0 16
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 3
30464: NEG
30465: PUSH
30466: LD_INT 2
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: LD_INT 3
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30491: LD_ADDR_VAR 0 17
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 3
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: LD_INT 2
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30535: LD_ADDR_VAR 0 18
30539: PUSH
30540: LD_INT 2
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 3
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30576: LD_ADDR_VAR 0 19
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: LD_INT 2
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 3
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 3
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: LIST
30615: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30616: LD_ADDR_VAR 0 20
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30657: LD_ADDR_VAR 0 21
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 3
30675: NEG
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 3
30686: NEG
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30701: LD_ADDR_VAR 0 22
30705: PUSH
30706: LD_INT 2
30708: NEG
30709: PUSH
30710: LD_INT 3
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 3
30732: NEG
30733: PUSH
30734: LD_INT 3
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30747: LD_ADDR_VAR 0 23
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 3
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: LD_INT 4
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 3
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30791: LD_ADDR_VAR 0 24
30795: PUSH
30796: LD_INT 3
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 3
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 4
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30832: LD_ADDR_VAR 0 25
30836: PUSH
30837: LD_INT 3
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 4
30849: PUSH
30850: LD_INT 3
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: PUSH
30860: LD_INT 4
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30872: LD_ADDR_VAR 0 26
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 4
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30913: LD_ADDR_VAR 0 27
30917: PUSH
30918: LD_INT 3
30920: NEG
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 4
30942: NEG
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30957: LD_ADDR_VAR 0 28
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 3
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: NEG
30977: PUSH
30978: LD_INT 4
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 4
30988: NEG
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31003: LD_ADDR_VAR 0 29
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: LD_INT 2
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 4
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 4
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 3
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: LD_INT 5
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 5
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 4
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 6
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: LD_INT 6
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 5
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31158: LD_ADDR_VAR 0 30
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 4
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 4
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 4
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 5
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 5
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 5
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 6
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 6
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31301: LD_ADDR_VAR 0 31
31305: PUSH
31306: LD_INT 3
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 4
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 4
31348: PUSH
31349: LD_INT 4
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 3
31358: PUSH
31359: LD_INT 4
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 5
31368: PUSH
31369: LD_INT 4
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 5
31378: PUSH
31379: LD_INT 5
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 4
31388: PUSH
31389: LD_INT 5
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 6
31398: PUSH
31399: LD_INT 5
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 6
31408: PUSH
31409: LD_INT 6
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 5
31418: PUSH
31419: LD_INT 6
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31440: LD_ADDR_VAR 0 32
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 4
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: LD_INT 4
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: LD_INT 3
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 5
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 5
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: LD_INT 4
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 6
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 6
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 5
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31583: LD_ADDR_VAR 0 33
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 3
31612: NEG
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 3
31624: NEG
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 4
31635: NEG
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 4
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 4
31658: NEG
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 5
31669: NEG
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 5
31680: NEG
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 5
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 6
31703: NEG
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 6
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31738: LD_ADDR_VAR 0 34
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 3
31757: NEG
31758: PUSH
31759: LD_INT 2
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: NEG
31770: PUSH
31771: LD_INT 3
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: NEG
31782: PUSH
31783: LD_INT 4
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 4
31793: NEG
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 4
31805: NEG
31806: PUSH
31807: LD_INT 4
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 4
31817: NEG
31818: PUSH
31819: LD_INT 5
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 5
31829: NEG
31830: PUSH
31831: LD_INT 4
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 5
31841: NEG
31842: PUSH
31843: LD_INT 5
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 5
31853: NEG
31854: PUSH
31855: LD_INT 6
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 6
31865: NEG
31866: PUSH
31867: LD_INT 5
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 6
31877: NEG
31878: PUSH
31879: LD_INT 6
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31901: LD_ADDR_VAR 0 41
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31945: LD_ADDR_VAR 0 42
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 3
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31986: LD_ADDR_VAR 0 43
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32026: LD_ADDR_VAR 0 44
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32067: LD_ADDR_VAR 0 45
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 2
32085: NEG
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 3
32096: NEG
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32111: LD_ADDR_VAR 0 46
32115: PUSH
32116: LD_INT 2
32118: NEG
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 3
32142: NEG
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: LIST
32156: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32157: LD_ADDR_VAR 0 47
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32190: LD_ADDR_VAR 0 48
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32221: LD_ADDR_VAR 0 49
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32250: LD_ADDR_VAR 0 50
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: LD_INT 3
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32279: LD_ADDR_VAR 0 51
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32310: LD_ADDR_VAR 0 52
32314: PUSH
32315: LD_INT 3
32317: NEG
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: NEG
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32343: LD_ADDR_VAR 0 53
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 3
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 2
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32387: LD_ADDR_VAR 0 54
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: LIST
32427: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32428: LD_ADDR_VAR 0 55
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: LIST
32467: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32468: LD_ADDR_VAR 0 56
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32509: LD_ADDR_VAR 0 57
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32553: LD_ADDR_VAR 0 58
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: LD_INT 3
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: LD_INT 2
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 3
32584: NEG
32585: PUSH
32586: LD_INT 3
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32599: LD_ADDR_VAR 0 59
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32643: LD_ADDR_VAR 0 60
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32684: LD_ADDR_VAR 0 61
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32724: LD_ADDR_VAR 0 62
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32765: LD_ADDR_VAR 0 63
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32809: LD_ADDR_VAR 0 64
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 2
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 2
32840: NEG
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
// end ; 2 :
32855: GO 36121
32857: LD_INT 2
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 36120
32865: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32866: LD_ADDR_VAR 0 29
32870: PUSH
32871: LD_INT 4
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 4
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 5
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 5
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 4
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 5
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 3
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 3
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 4
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 4
32996: PUSH
32997: LD_INT 4
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: LD_INT 4
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 4
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 4
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 4
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 3
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 4
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 5
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 4
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 3
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 5
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: LD_INT 3
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 3
33149: NEG
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 3
33160: NEG
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 3
33194: NEG
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 4
33205: NEG
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 4
33216: NEG
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 4
33228: NEG
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 4
33251: NEG
33252: PUSH
33253: LD_INT 4
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 4
33263: NEG
33264: PUSH
33265: LD_INT 5
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 3
33275: NEG
33276: PUSH
33277: LD_INT 4
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: NEG
33288: PUSH
33289: LD_INT 3
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 4
33299: NEG
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 5
33311: NEG
33312: PUSH
33313: LD_INT 4
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 5
33323: NEG
33324: PUSH
33325: LD_INT 5
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 3
33335: NEG
33336: PUSH
33337: LD_INT 5
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 5
33347: NEG
33348: PUSH
33349: LD_INT 3
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33404: LD_ADDR_VAR 0 30
33408: PUSH
33409: LD_INT 4
33411: PUSH
33412: LD_INT 4
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 4
33421: PUSH
33422: LD_INT 3
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 5
33431: PUSH
33432: LD_INT 4
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 5
33441: PUSH
33442: LD_INT 5
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 4
33451: PUSH
33452: LD_INT 5
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: LD_INT 4
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 5
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: LD_INT 5
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: LD_INT 3
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: LD_INT 4
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 4
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 4
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: LD_INT 2
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: NEG
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 4
33605: NEG
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 3
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 3
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 4
33639: NEG
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 5
33650: NEG
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 5
33661: NEG
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 5
33673: NEG
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 3
33685: NEG
33686: PUSH
33687: LD_INT 2
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 3
33696: NEG
33697: PUSH
33698: LD_INT 3
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 3
33708: NEG
33709: PUSH
33710: LD_INT 4
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: LD_INT 3
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: NEG
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: NEG
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 4
33756: NEG
33757: PUSH
33758: LD_INT 3
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 4
33768: NEG
33769: PUSH
33770: LD_INT 4
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: LD_INT 4
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 4
33792: NEG
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 4
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 5
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 4
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: LD_INT 4
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 5
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: LD_INT 3
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 5
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33951: LD_ADDR_VAR 0 31
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 4
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: LD_INT 4
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: LD_INT 5
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 4
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 5
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: NEG
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 3
34062: NEG
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 3
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 4
34107: NEG
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 4
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 4
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 2
34142: NEG
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 4
34153: NEG
34154: PUSH
34155: LD_INT 4
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 4
34165: NEG
34166: PUSH
34167: LD_INT 5
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 3
34177: NEG
34178: PUSH
34179: LD_INT 4
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 3
34189: NEG
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 4
34201: NEG
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 5
34213: NEG
34214: PUSH
34215: LD_INT 4
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 5
34225: NEG
34226: PUSH
34227: LD_INT 5
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 3
34237: NEG
34238: PUSH
34239: LD_INT 5
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 5
34249: NEG
34250: PUSH
34251: LD_INT 3
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 3
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 4
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 2
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 4
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: LD_INT 4
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 4
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 4
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 5
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 5
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 4
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 3
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 5
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34501: LD_ADDR_VAR 0 32
34505: PUSH
34506: LD_INT 4
34508: NEG
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 4
34519: NEG
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 3
34531: NEG
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: NEG
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 4
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 5
34564: NEG
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 5
34575: NEG
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 5
34587: NEG
34588: PUSH
34589: LD_INT 2
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: NEG
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 3
34610: NEG
34611: PUSH
34612: LD_INT 3
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: LD_INT 4
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: NEG
34635: PUSH
34636: LD_INT 3
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 3
34658: NEG
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 4
34670: NEG
34671: PUSH
34672: LD_INT 3
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 4
34682: NEG
34683: PUSH
34684: LD_INT 4
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: LD_INT 4
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 4
34706: NEG
34707: PUSH
34708: LD_INT 2
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: LD_INT 4
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 5
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 4
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 3
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 5
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 5
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 4
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 4
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 4
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 5
34933: PUSH
34934: LD_INT 4
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 5
34943: PUSH
34944: LD_INT 5
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 5
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35048: LD_ADDR_VAR 0 33
35052: PUSH
35053: LD_INT 4
35055: NEG
35056: PUSH
35057: LD_INT 4
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 4
35067: NEG
35068: PUSH
35069: LD_INT 5
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 3
35079: NEG
35080: PUSH
35081: LD_INT 4
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 3
35091: NEG
35092: PUSH
35093: LD_INT 3
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 4
35103: NEG
35104: PUSH
35105: LD_INT 3
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 5
35115: NEG
35116: PUSH
35117: LD_INT 4
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 5
35127: NEG
35128: PUSH
35129: LD_INT 5
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 3
35139: NEG
35140: PUSH
35141: LD_INT 5
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 5
35151: NEG
35152: PUSH
35153: LD_INT 3
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 3
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 4
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: LD_INT 3
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 2
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 3
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 4
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: LD_INT 4
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 4
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 4
35275: PUSH
35276: LD_INT 1
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 5
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 5
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 4
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 3
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: LD_INT 2
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 5
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: LD_INT 3
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 3
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 4
35378: PUSH
35379: LD_INT 3
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 4
35388: PUSH
35389: LD_INT 4
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: LD_INT 4
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: LD_INT 3
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 4
35428: PUSH
35429: LD_INT 2
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: LD_INT 4
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 3
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 4
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 5
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: LD_INT 5
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 4
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: LD_INT 5
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: LD_INT 3
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35586: LD_ADDR_VAR 0 34
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: LD_INT 4
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: LD_INT 5
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 4
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 3
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 3
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: LD_INT 4
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 5
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 3
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: NEG
35684: PUSH
35685: LD_INT 5
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 4
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 4
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 2
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 4
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 4
35788: PUSH
35789: LD_INT 4
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 4
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 5
35808: PUSH
35809: LD_INT 4
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 5
35818: PUSH
35819: LD_INT 5
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 4
35828: PUSH
35829: LD_INT 5
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: LD_INT 4
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 5
35858: PUSH
35859: LD_INT 3
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: LD_INT 5
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 3
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 3
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 4
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 4
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: LD_INT 4
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: NEG
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 4
35971: NEG
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 4
35982: NEG
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 3
35994: NEG
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 3
36005: NEG
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 4
36016: NEG
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 5
36027: NEG
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 5
36038: NEG
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 5
36050: NEG
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 3
36062: NEG
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// end ; end ;
36118: GO 36121
36120: POP
// case btype of b_depot , b_warehouse :
36121: LD_VAR 0 1
36125: PUSH
36126: LD_INT 0
36128: DOUBLE
36129: EQUAL
36130: IFTRUE 36140
36132: LD_INT 1
36134: DOUBLE
36135: EQUAL
36136: IFTRUE 36140
36138: GO 36341
36140: POP
// case nation of nation_american :
36141: LD_VAR 0 5
36145: PUSH
36146: LD_INT 1
36148: DOUBLE
36149: EQUAL
36150: IFTRUE 36154
36152: GO 36210
36154: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36155: LD_ADDR_VAR 0 9
36159: PUSH
36160: LD_VAR 0 11
36164: PUSH
36165: LD_VAR 0 12
36169: PUSH
36170: LD_VAR 0 13
36174: PUSH
36175: LD_VAR 0 14
36179: PUSH
36180: LD_VAR 0 15
36184: PUSH
36185: LD_VAR 0 16
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: PUSH
36198: LD_VAR 0 4
36202: PUSH
36203: LD_INT 1
36205: PLUS
36206: ARRAY
36207: ST_TO_ADDR
36208: GO 36339
36210: LD_INT 2
36212: DOUBLE
36213: EQUAL
36214: IFTRUE 36218
36216: GO 36274
36218: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36219: LD_ADDR_VAR 0 9
36223: PUSH
36224: LD_VAR 0 17
36228: PUSH
36229: LD_VAR 0 18
36233: PUSH
36234: LD_VAR 0 19
36238: PUSH
36239: LD_VAR 0 20
36243: PUSH
36244: LD_VAR 0 21
36248: PUSH
36249: LD_VAR 0 22
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: PUSH
36262: LD_VAR 0 4
36266: PUSH
36267: LD_INT 1
36269: PLUS
36270: ARRAY
36271: ST_TO_ADDR
36272: GO 36339
36274: LD_INT 3
36276: DOUBLE
36277: EQUAL
36278: IFTRUE 36282
36280: GO 36338
36282: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36283: LD_ADDR_VAR 0 9
36287: PUSH
36288: LD_VAR 0 23
36292: PUSH
36293: LD_VAR 0 24
36297: PUSH
36298: LD_VAR 0 25
36302: PUSH
36303: LD_VAR 0 26
36307: PUSH
36308: LD_VAR 0 27
36312: PUSH
36313: LD_VAR 0 28
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: PUSH
36326: LD_VAR 0 4
36330: PUSH
36331: LD_INT 1
36333: PLUS
36334: ARRAY
36335: ST_TO_ADDR
36336: GO 36339
36338: POP
36339: GO 36888
36341: LD_INT 2
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36355
36347: LD_INT 3
36349: DOUBLE
36350: EQUAL
36351: IFTRUE 36355
36353: GO 36411
36355: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36356: LD_ADDR_VAR 0 9
36360: PUSH
36361: LD_VAR 0 29
36365: PUSH
36366: LD_VAR 0 30
36370: PUSH
36371: LD_VAR 0 31
36375: PUSH
36376: LD_VAR 0 32
36380: PUSH
36381: LD_VAR 0 33
36385: PUSH
36386: LD_VAR 0 34
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: PUSH
36399: LD_VAR 0 4
36403: PUSH
36404: LD_INT 1
36406: PLUS
36407: ARRAY
36408: ST_TO_ADDR
36409: GO 36888
36411: LD_INT 16
36413: DOUBLE
36414: EQUAL
36415: IFTRUE 36467
36417: LD_INT 17
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36467
36423: LD_INT 18
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36467
36429: LD_INT 19
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36467
36435: LD_INT 20
36437: DOUBLE
36438: EQUAL
36439: IFTRUE 36467
36441: LD_INT 21
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36467
36447: LD_INT 23
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36467
36453: LD_INT 24
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36467
36459: LD_INT 25
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36467
36465: GO 36523
36467: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36468: LD_ADDR_VAR 0 9
36472: PUSH
36473: LD_VAR 0 35
36477: PUSH
36478: LD_VAR 0 36
36482: PUSH
36483: LD_VAR 0 37
36487: PUSH
36488: LD_VAR 0 38
36492: PUSH
36493: LD_VAR 0 39
36497: PUSH
36498: LD_VAR 0 40
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: PUSH
36511: LD_VAR 0 4
36515: PUSH
36516: LD_INT 1
36518: PLUS
36519: ARRAY
36520: ST_TO_ADDR
36521: GO 36888
36523: LD_INT 6
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36579
36529: LD_INT 7
36531: DOUBLE
36532: EQUAL
36533: IFTRUE 36579
36535: LD_INT 8
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36579
36541: LD_INT 13
36543: DOUBLE
36544: EQUAL
36545: IFTRUE 36579
36547: LD_INT 12
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36579
36553: LD_INT 15
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36579
36559: LD_INT 11
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36579
36565: LD_INT 14
36567: DOUBLE
36568: EQUAL
36569: IFTRUE 36579
36571: LD_INT 10
36573: DOUBLE
36574: EQUAL
36575: IFTRUE 36579
36577: GO 36635
36579: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36580: LD_ADDR_VAR 0 9
36584: PUSH
36585: LD_VAR 0 41
36589: PUSH
36590: LD_VAR 0 42
36594: PUSH
36595: LD_VAR 0 43
36599: PUSH
36600: LD_VAR 0 44
36604: PUSH
36605: LD_VAR 0 45
36609: PUSH
36610: LD_VAR 0 46
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: PUSH
36623: LD_VAR 0 4
36627: PUSH
36628: LD_INT 1
36630: PLUS
36631: ARRAY
36632: ST_TO_ADDR
36633: GO 36888
36635: LD_INT 36
36637: DOUBLE
36638: EQUAL
36639: IFTRUE 36643
36641: GO 36699
36643: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36644: LD_ADDR_VAR 0 9
36648: PUSH
36649: LD_VAR 0 47
36653: PUSH
36654: LD_VAR 0 48
36658: PUSH
36659: LD_VAR 0 49
36663: PUSH
36664: LD_VAR 0 50
36668: PUSH
36669: LD_VAR 0 51
36673: PUSH
36674: LD_VAR 0 52
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: PUSH
36687: LD_VAR 0 4
36691: PUSH
36692: LD_INT 1
36694: PLUS
36695: ARRAY
36696: ST_TO_ADDR
36697: GO 36888
36699: LD_INT 4
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36725
36705: LD_INT 5
36707: DOUBLE
36708: EQUAL
36709: IFTRUE 36725
36711: LD_INT 34
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36725
36717: LD_INT 37
36719: DOUBLE
36720: EQUAL
36721: IFTRUE 36725
36723: GO 36781
36725: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36726: LD_ADDR_VAR 0 9
36730: PUSH
36731: LD_VAR 0 53
36735: PUSH
36736: LD_VAR 0 54
36740: PUSH
36741: LD_VAR 0 55
36745: PUSH
36746: LD_VAR 0 56
36750: PUSH
36751: LD_VAR 0 57
36755: PUSH
36756: LD_VAR 0 58
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: PUSH
36769: LD_VAR 0 4
36773: PUSH
36774: LD_INT 1
36776: PLUS
36777: ARRAY
36778: ST_TO_ADDR
36779: GO 36888
36781: LD_INT 31
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36831
36787: LD_INT 32
36789: DOUBLE
36790: EQUAL
36791: IFTRUE 36831
36793: LD_INT 33
36795: DOUBLE
36796: EQUAL
36797: IFTRUE 36831
36799: LD_INT 27
36801: DOUBLE
36802: EQUAL
36803: IFTRUE 36831
36805: LD_INT 26
36807: DOUBLE
36808: EQUAL
36809: IFTRUE 36831
36811: LD_INT 28
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36831
36817: LD_INT 29
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36831
36823: LD_INT 30
36825: DOUBLE
36826: EQUAL
36827: IFTRUE 36831
36829: GO 36887
36831: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36832: LD_ADDR_VAR 0 9
36836: PUSH
36837: LD_VAR 0 59
36841: PUSH
36842: LD_VAR 0 60
36846: PUSH
36847: LD_VAR 0 61
36851: PUSH
36852: LD_VAR 0 62
36856: PUSH
36857: LD_VAR 0 63
36861: PUSH
36862: LD_VAR 0 64
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: PUSH
36875: LD_VAR 0 4
36879: PUSH
36880: LD_INT 1
36882: PLUS
36883: ARRAY
36884: ST_TO_ADDR
36885: GO 36888
36887: POP
// temp_list2 = [ ] ;
36888: LD_ADDR_VAR 0 10
36892: PUSH
36893: EMPTY
36894: ST_TO_ADDR
// for i in temp_list do
36895: LD_ADDR_VAR 0 8
36899: PUSH
36900: LD_VAR 0 9
36904: PUSH
36905: FOR_IN
36906: IFFALSE 36958
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36908: LD_ADDR_VAR 0 10
36912: PUSH
36913: LD_VAR 0 10
36917: PUSH
36918: LD_VAR 0 8
36922: PUSH
36923: LD_INT 1
36925: ARRAY
36926: PUSH
36927: LD_VAR 0 2
36931: PLUS
36932: PUSH
36933: LD_VAR 0 8
36937: PUSH
36938: LD_INT 2
36940: ARRAY
36941: PUSH
36942: LD_VAR 0 3
36946: PLUS
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: ADD
36955: ST_TO_ADDR
36956: GO 36905
36958: POP
36959: POP
// result = temp_list2 ;
36960: LD_ADDR_VAR 0 7
36964: PUSH
36965: LD_VAR 0 10
36969: ST_TO_ADDR
// end ; end_of_file
36970: LD_VAR 0 7
36974: RET
// every 1 do var i ;
36975: GO 36977
36977: DISABLE
36978: LD_INT 0
36980: PPUSH
// begin Video ( true ) ;
36981: LD_INT 1
36983: PPUSH
36984: CALL 7008 0 1
// CenterOnXY ( 53 , 40 ) ;
36988: LD_INT 53
36990: PPUSH
36991: LD_INT 40
36993: PPUSH
36994: CALL_OW 84
// wait ( 0 0$5 ) ;
36998: LD_INT 175
37000: PPUSH
37001: CALL_OW 67
// if gammaCommander = 1 then
37005: LD_EXP 12
37009: PUSH
37010: LD_INT 1
37012: EQUAL
37013: IFFALSE 37027
// Say ( Donaldson , D1-Don-1 ) ;
37015: LD_EXP 3
37019: PPUSH
37020: LD_STRING D1-Don-1
37022: PPUSH
37023: CALL_OW 88
// if gammaCommander = 2 then
37027: LD_EXP 12
37031: PUSH
37032: LD_INT 2
37034: EQUAL
37035: IFFALSE 37049
// Say ( Brown , D1-Brown-1 ) ;
37037: LD_EXP 2
37041: PPUSH
37042: LD_STRING D1-Brown-1
37044: PPUSH
37045: CALL_OW 88
// if gammaCommander = 3 then
37049: LD_EXP 12
37053: PUSH
37054: LD_INT 3
37056: EQUAL
37057: IFFALSE 37071
// Say ( Houten , D1-VanH-1 ) ;
37059: LD_EXP 13
37063: PPUSH
37064: LD_STRING D1-VanH-1
37066: PPUSH
37067: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37071: LD_EXP 22
37075: PPUSH
37076: LD_STRING D1-Har-1
37078: PPUSH
37079: CALL_OW 94
// if gammaCommander = 1 then
37083: LD_EXP 12
37087: PUSH
37088: LD_INT 1
37090: EQUAL
37091: IFFALSE 37105
// Say ( Donaldson , D1-Don-2 ) ;
37093: LD_EXP 3
37097: PPUSH
37098: LD_STRING D1-Don-2
37100: PPUSH
37101: CALL_OW 88
// if gammaCommander = 2 then
37105: LD_EXP 12
37109: PUSH
37110: LD_INT 2
37112: EQUAL
37113: IFFALSE 37127
// Say ( Brown , D1-Brown-2 ) ;
37115: LD_EXP 2
37119: PPUSH
37120: LD_STRING D1-Brown-2
37122: PPUSH
37123: CALL_OW 88
// if gammaCommander = 3 then
37127: LD_EXP 12
37131: PUSH
37132: LD_INT 3
37134: EQUAL
37135: IFFALSE 37149
// Say ( Houten , D1-VanH-2 ) ;
37137: LD_EXP 13
37141: PPUSH
37142: LD_STRING D1-VanH-2
37144: PPUSH
37145: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37149: LD_EXP 22
37153: PPUSH
37154: LD_STRING D1-Har-2
37156: PPUSH
37157: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37161: LD_INT 22
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 33
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 61
37183: PUSH
37184: EMPTY
37185: LIST
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: PPUSH
37192: CALL_OW 69
37196: IFFALSE 37261
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37198: LD_ADDR_VAR 0 1
37202: PUSH
37203: LD_INT 22
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 33
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 61
37225: PUSH
37226: EMPTY
37227: LIST
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: PPUSH
37234: CALL_OW 69
37238: PUSH
37239: FOR_IN
37240: IFFALSE 37259
// ComAgressiveMove ( i , 70 , 41 ) ;
37242: LD_VAR 0 1
37246: PPUSH
37247: LD_INT 70
37249: PPUSH
37250: LD_INT 41
37252: PPUSH
37253: CALL_OW 114
37257: GO 37239
37259: POP
37260: POP
// repeat wait ( 0 0$1 ) ;
37261: LD_INT 35
37263: PPUSH
37264: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37268: LD_ADDR_VAR 0 1
37272: PUSH
37273: LD_INT 22
37275: PUSH
37276: LD_INT 6
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: EMPTY
37284: LIST
37285: PPUSH
37286: CALL_OW 69
37290: PUSH
37291: FOR_IN
37292: IFFALSE 37311
// ComAgressiveMove ( i , 54 , 20 ) ;
37294: LD_VAR 0 1
37298: PPUSH
37299: LD_INT 54
37301: PPUSH
37302: LD_INT 20
37304: PPUSH
37305: CALL_OW 114
37309: GO 37291
37311: POP
37312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37313: LD_ADDR_VAR 0 1
37317: PUSH
37318: LD_INT 22
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 25
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 3
37340: PUSH
37341: LD_INT 54
37343: PUSH
37344: EMPTY
37345: LIST
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: PPUSH
37356: CALL_OW 69
37360: PUSH
37361: FOR_IN
37362: IFFALSE 37396
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37364: LD_VAR 0 1
37368: PPUSH
37369: LD_INT 70
37371: PPUSH
37372: LD_INT 41
37374: PPUSH
37375: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37379: LD_VAR 0 1
37383: PPUSH
37384: LD_INT 46
37386: PPUSH
37387: LD_INT 39
37389: PPUSH
37390: CALL_OW 174
// end ;
37394: GO 37361
37396: POP
37397: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37398: LD_ADDR_VAR 0 1
37402: PUSH
37403: LD_INT 22
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 21
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 24
37428: PUSH
37429: LD_INT 500
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: PPUSH
37445: CALL_OW 69
37449: PUSH
37450: FOR_IN
37451: IFFALSE 37484
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37453: LD_VAR 0 1
37457: PPUSH
37458: LD_EXP 37
37462: PPUSH
37463: CALL_OW 250
37467: PPUSH
37468: LD_EXP 37
37472: PPUSH
37473: CALL_OW 251
37477: PPUSH
37478: CALL_OW 111
37482: GO 37450
37484: POP
37485: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37486: LD_INT 22
37488: PUSH
37489: LD_INT 6
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 21
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 24
37508: PUSH
37509: LD_INT 250
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL_OW 69
37525: PUSH
37526: LD_INT 5
37528: LESS
37529: IFFALSE 37261
// Video ( false ) ;
37531: LD_INT 0
37533: PPUSH
37534: CALL 7008 0 1
// ChangeMissionObjectives ( M1 ) ;
37538: LD_STRING M1
37540: PPUSH
37541: CALL_OW 337
// SaveForQuickRestart ;
37545: CALL_OW 22
// startCutscene = 0 ;
37549: LD_ADDR_EXP 38
37553: PUSH
37554: LD_INT 0
37556: ST_TO_ADDR
// end ;
37557: PPOPN 1
37559: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37560: LD_EXP 38
37564: IFFALSE 37655
37566: GO 37568
37568: DISABLE
37569: LD_INT 0
37571: PPUSH
37572: PPUSH
// begin enable ;
37573: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37574: LD_ADDR_VAR 0 1
37578: PUSH
37579: LD_INT 22
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 21
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: LD_INT 24
37604: PUSH
37605: LD_INT 700
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: PPUSH
37621: CALL_OW 69
37625: ST_TO_ADDR
// for i in tmp do
37626: LD_ADDR_VAR 0 2
37630: PUSH
37631: LD_VAR 0 1
37635: PUSH
37636: FOR_IN
37637: IFFALSE 37653
// SetLives ( i , 700 ) ;
37639: LD_VAR 0 2
37643: PPUSH
37644: LD_INT 700
37646: PPUSH
37647: CALL_OW 234
37651: GO 37636
37653: POP
37654: POP
// end ;
37655: PPOPN 2
37657: END
// every 1 1$0 do
37658: GO 37660
37660: DISABLE
// begin PrepareSupportFromDelta ;
37661: CALL 3849 0 0
// firstAttack = 1 ;
37665: LD_ADDR_EXP 33
37669: PUSH
37670: LD_INT 1
37672: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37673: LD_EXP 8
37677: PPUSH
37678: CALL_OW 302
37682: IFFALSE 37698
// begin Say ( Gladstone , D2-Glad-1 ) ;
37684: LD_EXP 8
37688: PPUSH
37689: LD_STRING D2-Glad-1
37691: PPUSH
37692: CALL_OW 88
// end else
37696: GO 37806
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37698: LD_INT 4
37700: PPUSH
37701: LD_INT 22
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 21
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: LD_INT 25
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 25
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 25
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 25
37756: PUSH
37757: LD_INT 4
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: PPUSH
37776: CALL_OW 70
37780: PUSH
37781: LD_EXP 15
37785: PUSH
37786: LD_EXP 14
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: DIFF
37795: PPUSH
37796: LD_STRING D2-Sol1-1
37798: PPUSH
37799: LD_STRING D2-FSol1-1
37801: PPUSH
37802: CALL 7036 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37806: LD_EXP 3
37810: PPUSH
37811: CALL_OW 302
37815: PUSH
37816: LD_EXP 12
37820: PUSH
37821: LD_INT 1
37823: EQUAL
37824: AND
37825: IFFALSE 37839
// Say ( Donaldson , D2-Don-1 ) ;
37827: LD_EXP 3
37831: PPUSH
37832: LD_STRING D2-Don-1
37834: PPUSH
37835: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37839: LD_EXP 2
37843: PPUSH
37844: CALL_OW 302
37848: PUSH
37849: LD_EXP 12
37853: PUSH
37854: LD_INT 2
37856: EQUAL
37857: AND
37858: IFFALSE 37872
// Say ( Brown , D2-Brown-1 ) ;
37860: LD_EXP 2
37864: PPUSH
37865: LD_STRING D2-Brown-1
37867: PPUSH
37868: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37872: LD_EXP 13
37876: PPUSH
37877: CALL_OW 302
37881: PUSH
37882: LD_EXP 12
37886: PUSH
37887: LD_INT 3
37889: EQUAL
37890: AND
37891: IFFALSE 37905
// Say ( Houten , D2-VanH-1 ) ;
37893: LD_EXP 13
37897: PPUSH
37898: LD_STRING D2-VanH-1
37900: PPUSH
37901: CALL_OW 88
// end ;
37905: END
// every 0 0$1 do
37906: GO 37908
37908: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37909: LD_STRING 07_time
37911: PPUSH
37912: LD_INT 12600
37914: PPUSH
37915: CALL_OW 30
37919: PUSH
37920: LD_INT 3
37922: DIV
37923: PPUSH
37924: CALL_OW 67
// PrepareMacmillanSquad ;
37928: CALL 4511 0 0
// CenterNowOnUnits ( JMM ) ;
37932: LD_EXP 1
37936: PPUSH
37937: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37941: LD_EXP 1
37945: PPUSH
37946: LD_STRING D3-JMM-1
37948: PPUSH
37949: CALL_OW 88
// JMMArrive = 1 ;
37953: LD_ADDR_EXP 39
37957: PUSH
37958: LD_INT 1
37960: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37961: LD_EXP 3
37965: PPUSH
37966: CALL_OW 302
37970: PUSH
37971: LD_EXP 12
37975: PUSH
37976: LD_INT 1
37978: EQUAL
37979: AND
37980: IFFALSE 37996
// begin Say ( Donaldson , D3-Don-1 ) ;
37982: LD_EXP 3
37986: PPUSH
37987: LD_STRING D3-Don-1
37989: PPUSH
37990: CALL_OW 88
// end else
37994: GO 38048
// begin if gammaCommander = 1 then
37996: LD_EXP 12
38000: PUSH
38001: LD_INT 1
38003: EQUAL
38004: IFFALSE 38048
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38006: LD_EXP 11
38010: PPUSH
38011: LD_INT 26
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 72
38025: PPUSH
38026: LD_STRING D3-Sol1-1
38028: PPUSH
38029: LD_STRING D3-Sol1-1
38031: PPUSH
38032: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38036: LD_EXP 1
38040: PPUSH
38041: LD_STRING D3-JMM-2
38043: PPUSH
38044: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38048: LD_EXP 2
38052: PPUSH
38053: CALL_OW 302
38057: PUSH
38058: LD_EXP 12
38062: PUSH
38063: LD_INT 2
38065: EQUAL
38066: AND
38067: IFFALSE 38083
// begin Say ( Brown , D3-Brown-1 ) ;
38069: LD_EXP 2
38073: PPUSH
38074: LD_STRING D3-Brown-1
38076: PPUSH
38077: CALL_OW 88
// end else
38081: GO 38135
// begin if gammaCommander = 2 then
38083: LD_EXP 12
38087: PUSH
38088: LD_INT 2
38090: EQUAL
38091: IFFALSE 38135
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38093: LD_EXP 11
38097: PPUSH
38098: LD_INT 26
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PPUSH
38108: CALL_OW 72
38112: PPUSH
38113: LD_STRING D3-Sol1-1a
38115: PPUSH
38116: LD_STRING D3-Sol1-1a
38118: PPUSH
38119: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38123: LD_EXP 1
38127: PPUSH
38128: LD_STRING D3-JMM-2
38130: PPUSH
38131: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38135: LD_EXP 13
38139: PPUSH
38140: CALL_OW 302
38144: PUSH
38145: LD_EXP 12
38149: PUSH
38150: LD_INT 3
38152: EQUAL
38153: AND
38154: IFFALSE 38170
// begin Say ( Houten , D3-VanH-1 ) ;
38156: LD_EXP 13
38160: PPUSH
38161: LD_STRING D3-VanH-1
38163: PPUSH
38164: CALL_OW 88
// end else
38168: GO 38222
// begin if gammaCommander = 3 then
38170: LD_EXP 12
38174: PUSH
38175: LD_INT 3
38177: EQUAL
38178: IFFALSE 38222
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38180: LD_EXP 11
38184: PPUSH
38185: LD_INT 26
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PPUSH
38195: CALL_OW 72
38199: PPUSH
38200: LD_STRING D3-Sol1-1b
38202: PPUSH
38203: LD_STRING D3-Sol1-1b
38205: PPUSH
38206: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38210: LD_EXP 1
38214: PPUSH
38215: LD_STRING D3-JMM-2
38217: PPUSH
38218: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38222: LD_EXP 15
38226: PPUSH
38227: CALL_OW 302
38231: IFFALSE 38259
// begin Say ( Joan , D3a-Joan-1 ) ;
38233: LD_EXP 15
38237: PPUSH
38238: LD_STRING D3a-Joan-1
38240: PPUSH
38241: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38245: LD_EXP 1
38249: PPUSH
38250: LD_STRING D3a-JMM-1
38252: PPUSH
38253: CALL_OW 88
// end else
38257: GO 38601
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38259: LD_STRING 06_JoanStatus_1
38261: PPUSH
38262: LD_INT 0
38264: PPUSH
38265: CALL_OW 30
38269: PUSH
38270: LD_INT 1
38272: EQUAL
38273: IFFALSE 38601
// begin Say ( JMM , D3b-JMM-1 ) ;
38275: LD_EXP 1
38279: PPUSH
38280: LD_STRING D3b-JMM-1
38282: PPUSH
38283: CALL_OW 88
// if gammaCommander = 1 then
38287: LD_EXP 12
38291: PUSH
38292: LD_INT 1
38294: EQUAL
38295: IFFALSE 38352
// if IsOK ( Donaldson ) then
38297: LD_EXP 3
38301: PPUSH
38302: CALL_OW 302
38306: IFFALSE 38322
// Say ( Donaldson , D3b-Don-1 ) else
38308: LD_EXP 3
38312: PPUSH
38313: LD_STRING D3b-Don-1
38315: PPUSH
38316: CALL_OW 88
38320: GO 38352
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38322: LD_EXP 11
38326: PPUSH
38327: LD_INT 26
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PPUSH
38337: CALL_OW 72
38341: PPUSH
38342: LD_STRING D3b-Sol1-1
38344: PPUSH
38345: LD_STRING D3b-Sol1-1
38347: PPUSH
38348: CALL 7036 0 3
// if gammaCommander = 2 then
38352: LD_EXP 12
38356: PUSH
38357: LD_INT 2
38359: EQUAL
38360: IFFALSE 38417
// if IsOk ( Brown ) then
38362: LD_EXP 2
38366: PPUSH
38367: CALL_OW 302
38371: IFFALSE 38387
// Say ( Brown , D3b-Brown-1 ) else
38373: LD_EXP 2
38377: PPUSH
38378: LD_STRING D3b-Brown-1
38380: PPUSH
38381: CALL_OW 88
38385: GO 38417
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38387: LD_EXP 11
38391: PPUSH
38392: LD_INT 26
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PPUSH
38402: CALL_OW 72
38406: PPUSH
38407: LD_STRING D3b-Sol1-1
38409: PPUSH
38410: LD_STRING D3b-Sol1-1
38412: PPUSH
38413: CALL 7036 0 3
// if gammaCommander = 3 then
38417: LD_EXP 12
38421: PUSH
38422: LD_INT 3
38424: EQUAL
38425: IFFALSE 38482
// if IsOk ( Houten ) then
38427: LD_EXP 13
38431: PPUSH
38432: CALL_OW 302
38436: IFFALSE 38452
// Say ( Houten , D3b-VanH-1 ) else
38438: LD_EXP 13
38442: PPUSH
38443: LD_STRING D3b-VanH-1
38445: PPUSH
38446: CALL_OW 88
38450: GO 38482
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38452: LD_EXP 11
38456: PPUSH
38457: LD_INT 26
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PPUSH
38467: CALL_OW 72
38471: PPUSH
38472: LD_STRING D3b-Sol1-1
38474: PPUSH
38475: LD_STRING D3b-Sol1-1
38477: PPUSH
38478: CALL 7036 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38482: LD_EXP 11
38486: PPUSH
38487: LD_INT 26
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PPUSH
38497: CALL_OW 72
38501: PUSH
38502: LD_EXP 12
38506: PUSH
38507: LD_INT 1
38509: EQUAL
38510: PUSH
38511: LD_EXP 3
38515: PPUSH
38516: CALL_OW 302
38520: AND
38521: OR
38522: PUSH
38523: LD_EXP 12
38527: PUSH
38528: LD_INT 2
38530: EQUAL
38531: PUSH
38532: LD_EXP 2
38536: PPUSH
38537: CALL_OW 302
38541: AND
38542: OR
38543: PUSH
38544: LD_EXP 12
38548: PUSH
38549: LD_INT 3
38551: EQUAL
38552: PUSH
38553: LD_EXP 13
38557: PPUSH
38558: CALL_OW 302
38562: AND
38563: OR
38564: IFFALSE 38578
// Say ( JMM , D3b-JMM-2 ) ;
38566: LD_EXP 1
38570: PPUSH
38571: LD_STRING D3b-JMM-2
38573: PPUSH
38574: CALL_OW 88
// if IsOK ( Lisa ) then
38578: LD_EXP 6
38582: PPUSH
38583: CALL_OW 302
38587: IFFALSE 38601
// Say ( Lisa , D3b-Lisa-2 ) ;
38589: LD_EXP 6
38593: PPUSH
38594: LD_STRING D3b-Lisa-2
38596: PPUSH
38597: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38601: LD_INT 22
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 21
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 26
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: LD_INT 25
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 25
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 25
38656: PUSH
38657: LD_INT 3
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 25
38666: PUSH
38667: LD_INT 4
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: PPUSH
38687: CALL_OW 69
38691: PUSH
38692: LD_EXP 1
38696: PUSH
38697: LD_EXP 2
38701: PUSH
38702: LD_EXP 3
38706: PUSH
38707: LD_EXP 4
38711: PUSH
38712: LD_EXP 5
38716: PUSH
38717: LD_EXP 6
38721: PUSH
38722: LD_EXP 7
38726: PUSH
38727: LD_EXP 8
38731: PUSH
38732: LD_EXP 9
38736: PUSH
38737: LD_EXP 10
38741: PUSH
38742: LD_EXP 15
38746: PUSH
38747: LD_EXP 14
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: DIFF
38766: PPUSH
38767: LD_STRING DCa-Sol1-1
38769: PPUSH
38770: LD_STRING DCa-Sol1-1
38772: PPUSH
38773: CALL 7036 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38777: LD_EXP 1
38781: PPUSH
38782: LD_STRING DCb-JMM-1
38784: PPUSH
38785: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38789: LD_INT 22
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 21
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 26
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 25
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 25
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 25
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 25
38854: PUSH
38855: LD_INT 4
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: PPUSH
38875: CALL_OW 69
38879: PUSH
38880: LD_EXP 1
38884: PUSH
38885: LD_EXP 2
38889: PUSH
38890: LD_EXP 3
38894: PUSH
38895: LD_EXP 4
38899: PUSH
38900: LD_EXP 5
38904: PUSH
38905: LD_EXP 6
38909: PUSH
38910: LD_EXP 7
38914: PUSH
38915: LD_EXP 8
38919: PUSH
38920: LD_EXP 9
38924: PUSH
38925: LD_EXP 10
38929: PUSH
38930: LD_EXP 15
38934: PUSH
38935: LD_EXP 14
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: DIFF
38954: PPUSH
38955: LD_STRING DCb-Sol1-1
38957: PPUSH
38958: LD_STRING DCb-Sol1-1
38960: PPUSH
38961: CALL 7036 0 3
// Say ( JMM , DCb-JMM-2 ) ;
38965: LD_EXP 1
38969: PPUSH
38970: LD_STRING DCb-JMM-2
38972: PPUSH
38973: CALL_OW 88
// secondAttack = 1 ;
38977: LD_ADDR_EXP 34
38981: PUSH
38982: LD_INT 1
38984: ST_TO_ADDR
// end ;
38985: END
// every 0 0$01 trigger JMMArrive = 1 do
38986: LD_EXP 39
38990: PUSH
38991: LD_INT 1
38993: EQUAL
38994: IFFALSE 39074
38996: GO 38998
38998: DISABLE
// begin wait ( 3 3$0 ) ;
38999: LD_INT 6300
39001: PPUSH
39002: CALL_OW 67
// DialogueOn ;
39006: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39010: LD_EXP 23
39014: PPUSH
39015: LD_STRING D4-Pow-1
39017: PPUSH
39018: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39022: LD_EXP 1
39026: PPUSH
39027: LD_STRING D4-JMM-1
39029: PPUSH
39030: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39034: LD_EXP 23
39038: PPUSH
39039: LD_STRING D4-Pow-2
39041: PPUSH
39042: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39046: LD_EXP 1
39050: PPUSH
39051: LD_STRING D4-JMM-2
39053: PPUSH
39054: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39058: LD_EXP 23
39062: PPUSH
39063: LD_STRING D4-Pow-3
39065: PPUSH
39066: CALL_OW 94
// DialogueOff ;
39070: CALL_OW 7
// end ;
39074: END
// every 0 0$01 trigger JMMArrive = 1 do
39075: LD_EXP 39
39079: PUSH
39080: LD_INT 1
39082: EQUAL
39083: IFFALSE 39115
39085: GO 39087
39087: DISABLE
// begin wait ( 8 8$0 ) ;
39088: LD_INT 16800
39090: PPUSH
39091: CALL_OW 67
// DialogueOn ;
39095: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39099: LD_EXP 23
39103: PPUSH
39104: LD_STRING D4a-Pow-1
39106: PPUSH
39107: CALL_OW 94
// DialogueOff ;
39111: CALL_OW 7
// end ;
39115: END
// every 0 0$01 trigger JMMArrive = 1 do
39116: LD_EXP 39
39120: PUSH
39121: LD_INT 1
39123: EQUAL
39124: IFFALSE 39169
39126: GO 39128
39128: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39129: LD_INT 21000
39131: PUSH
39132: LD_INT 25200
39134: PUSH
39135: LD_INT 31500
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_OWVAR 67
39147: ARRAY
39148: PPUSH
39149: CALL_OW 67
// PrepareSikorsky ;
39153: CALL 5592 0 0
// SikorskyArrive = 1 ;
39157: LD_ADDR_EXP 18
39161: PUSH
39162: LD_INT 1
39164: ST_TO_ADDR
// PrepareSikorskyArmy ;
39165: CALL 5732 0 0
// end ;
39169: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39170: LD_EXP 17
39174: PPUSH
39175: LD_INT 5
39177: PPUSH
39178: CALL_OW 308
39182: IFFALSE 39374
39184: GO 39186
39186: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39187: LD_EXP 17
39191: PPUSH
39192: CALL_OW 87
// DialogueOn ;
39196: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39200: LD_EXP 16
39204: PPUSH
39205: LD_STRING D5-Sik-1
39207: PPUSH
39208: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39212: LD_EXP 1
39216: PPUSH
39217: LD_STRING D5-JMM-1a
39219: PPUSH
39220: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39224: LD_EXP 16
39228: PPUSH
39229: LD_STRING D5-Sik-2
39231: PPUSH
39232: CALL_OW 88
// case query ( QSikorski ) of 1 :
39236: LD_STRING QSikorski
39238: PPUSH
39239: CALL_OW 97
39243: PUSH
39244: LD_INT 1
39246: DOUBLE
39247: EQUAL
39248: IFTRUE 39252
39250: GO 39275
39252: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39253: LD_EXP 16
39257: PPUSH
39258: LD_STRING D5a-Sik-1
39260: PPUSH
39261: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39265: LD_ADDR_EXP 19
39269: PUSH
39270: LD_INT 2100
39272: ST_TO_ADDR
// end ; 2 :
39273: GO 39362
39275: LD_INT 2
39277: DOUBLE
39278: EQUAL
39279: IFTRUE 39283
39281: GO 39306
39283: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39284: LD_EXP 16
39288: PPUSH
39289: LD_STRING D5b-Sik-1
39291: PPUSH
39292: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39296: LD_ADDR_EXP 19
39300: PUSH
39301: LD_INT 10500
39303: ST_TO_ADDR
// end ; 3 :
39304: GO 39362
39306: LD_INT 3
39308: DOUBLE
39309: EQUAL
39310: IFTRUE 39314
39312: GO 39361
39314: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39315: LD_EXP 16
39319: PPUSH
39320: LD_STRING D5c-Sik-1
39322: PPUSH
39323: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39327: LD_EXP 1
39331: PPUSH
39332: LD_STRING D5c-JMM-1
39334: PPUSH
39335: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39339: LD_EXP 16
39343: PPUSH
39344: LD_STRING D5c-Sik-2
39346: PPUSH
39347: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39351: LD_ADDR_EXP 19
39355: PUSH
39356: LD_INT 10500
39358: ST_TO_ADDR
// end ; end ;
39359: GO 39362
39361: POP
// DialogueOff ;
39362: CALL_OW 7
// timerStatus = 1 ;
39366: LD_ADDR_EXP 35
39370: PUSH
39371: LD_INT 1
39373: ST_TO_ADDR
// end ;
39374: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39375: LD_EXP 19
39379: PUSH
39380: LD_INT 35
39382: LESS
39383: IFFALSE 39431
39385: GO 39387
39387: DISABLE
// begin timerStatus = 0 ;
39388: LD_ADDR_EXP 35
39392: PUSH
39393: LD_INT 0
39395: ST_TO_ADDR
// DialogueOn ;
39396: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39400: LD_EXP 16
39404: PPUSH
39405: LD_STRING D6-Sik-1
39407: PPUSH
39408: CALL_OW 88
// DialogueOff ;
39412: CALL_OW 7
// SikorskyAI = 1 ;
39416: LD_ADDR_EXP 20
39420: PUSH
39421: LD_INT 1
39423: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39424: LD_STRING M2
39426: PPUSH
39427: CALL_OW 337
// end ;
39431: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39432: LD_EXP 17
39436: PPUSH
39437: LD_INT 18
39439: PPUSH
39440: CALL_OW 308
39444: IFFALSE 39528
39446: GO 39448
39448: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39449: LD_EXP 16
39453: PPUSH
39454: LD_STRING D7-Sik-1
39456: PPUSH
39457: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39461: LD_EXP 1
39465: PPUSH
39466: LD_INT 24
39468: PPUSH
39469: CALL_OW 308
39473: PUSH
39474: LD_EXP 1
39478: PPUSH
39479: CALL_OW 310
39483: OR
39484: IFFALSE 39508
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39486: LD_EXP 16
39490: PPUSH
39491: LD_STRING D7a-Sik-1
39493: PPUSH
39494: CALL_OW 88
// SikorskyStatus = 1 ;
39498: LD_ADDR_EXP 21
39502: PUSH
39503: LD_INT 1
39505: ST_TO_ADDR
// end else
39506: GO 39528
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39508: LD_EXP 16
39512: PPUSH
39513: LD_STRING D7b-Sik-1
39515: PPUSH
39516: CALL_OW 88
// SikorskyStatus = 2 ;
39520: LD_ADDR_EXP 21
39524: PUSH
39525: LD_INT 2
39527: ST_TO_ADDR
// end ; end ;
39528: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39529: LD_EXP 36
39533: PUSH
39534: LD_INT 1
39536: EQUAL
39537: IFFALSE 39646
39539: GO 39541
39541: DISABLE
39542: LD_INT 0
39544: PPUSH
// begin enable ;
39545: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39546: LD_ADDR_VAR 0 1
39550: PUSH
39551: LD_INT 22
39553: PUSH
39554: LD_INT 3
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PPUSH
39561: CALL_OW 69
39565: PUSH
39566: FOR_IN
39567: IFFALSE 39594
// if IsInArea ( i , RussianEscape ) then
39569: LD_VAR 0 1
39573: PPUSH
39574: LD_INT 22
39576: PPUSH
39577: CALL_OW 308
39581: IFFALSE 39592
// RemoveUnit ( i ) ;
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 64
39592: GO 39566
39594: POP
39595: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39596: LD_ADDR_VAR 0 1
39600: PUSH
39601: LD_INT 22
39603: PUSH
39604: LD_INT 6
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PPUSH
39611: CALL_OW 69
39615: PUSH
39616: FOR_IN
39617: IFFALSE 39644
// if IsInArea ( i , RussianEscape ) then
39619: LD_VAR 0 1
39623: PPUSH
39624: LD_INT 22
39626: PPUSH
39627: CALL_OW 308
39631: IFFALSE 39642
// RemoveUnit ( i ) ;
39633: LD_VAR 0 1
39637: PPUSH
39638: CALL_OW 64
39642: GO 39616
39644: POP
39645: POP
// end ; end_of_file
39646: PPOPN 1
39648: END
// on BuildingComplete ( building ) do var tmp , un ;
39649: LD_INT 0
39651: PPUSH
39652: PPUSH
// begin if GetSide ( building ) = 3 then
39653: LD_VAR 0 1
39657: PPUSH
39658: CALL_OW 255
39662: PUSH
39663: LD_INT 3
39665: EQUAL
39666: IFFALSE 40153
// begin if GetBType ( building ) = b_depot then
39668: LD_VAR 0 1
39672: PPUSH
39673: CALL_OW 266
39677: PUSH
39678: LD_INT 0
39680: EQUAL
39681: IFFALSE 39749
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39683: LD_VAR 0 1
39687: PPUSH
39688: CALL_OW 274
39692: PPUSH
39693: LD_INT 1
39695: PPUSH
39696: LD_INT 5000
39698: PPUSH
39699: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 274
39712: PPUSH
39713: LD_INT 2
39715: PPUSH
39716: LD_INT 5000
39718: PPUSH
39719: CALL_OW 277
// SetBName ( building , konev ) ;
39723: LD_VAR 0 1
39727: PPUSH
39728: LD_STRING konev
39730: PPUSH
39731: CALL_OW 500
// ruDepot = building ;
39735: LD_ADDR_EXP 28
39739: PUSH
39740: LD_VAR 0 1
39744: ST_TO_ADDR
// BuildRussianBase ;
39745: CALL 7641 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39749: LD_VAR 0 1
39753: PPUSH
39754: CALL_OW 266
39758: PUSH
39759: LD_INT 0
39761: EQUAL
39762: PUSH
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 266
39772: PUSH
39773: LD_INT 2
39775: EQUAL
39776: OR
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: CALL_OW 266
39787: PUSH
39788: LD_INT 4
39790: EQUAL
39791: OR
39792: IFFALSE 39803
// ComUpgrade ( building ) ;
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 146
// if GetBType ( building ) = b_lab then
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 266
39812: PUSH
39813: LD_INT 6
39815: EQUAL
39816: IFFALSE 39867
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39818: LD_VAR 0 1
39822: PPUSH
39823: LD_INT 10
39825: PPUSH
39826: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39830: LD_VAR 0 1
39834: PPUSH
39835: LD_INT 12
39837: PPUSH
39838: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39842: LD_INT 3
39844: PPUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: LD_INT 3
39852: PPUSH
39853: CALL 8196 0 3
// ruLab = building ;
39857: LD_ADDR_EXP 29
39861: PUSH
39862: LD_VAR 0 1
39866: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 266
39876: PUSH
39877: LD_INT 32
39879: EQUAL
39880: IFFALSE 39998
// begin uc_side = 3 ;
39882: LD_ADDR_OWVAR 20
39886: PUSH
39887: LD_INT 3
39889: ST_TO_ADDR
// uc_nation = 3 ;
39890: LD_ADDR_OWVAR 21
39894: PUSH
39895: LD_INT 3
39897: ST_TO_ADDR
// hc_gallery =  ;
39898: LD_ADDR_OWVAR 33
39902: PUSH
39903: LD_STRING 
39905: ST_TO_ADDR
// hc_name =  ;
39906: LD_ADDR_OWVAR 26
39910: PUSH
39911: LD_STRING 
39913: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39914: LD_INT 0
39916: PPUSH
39917: LD_INT 1
39919: PPUSH
39920: LD_EXP 25
39924: PPUSH
39925: LD_EXP 26
39929: PPUSH
39930: CALL_OW 12
39934: PPUSH
39935: CALL_OW 380
// un = CreateHuman ;
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: CALL_OW 44
39948: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39949: LD_VAR 0 3
39953: PPUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39963: LD_VAR 0 1
39967: PPUSH
39968: LD_INT 43
39970: PUSH
39971: LD_INT 44
39973: PUSH
39974: LD_INT 46
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PPUSH
39985: LD_INT 3
39987: PPUSH
39988: CALL_OW 12
39992: ARRAY
39993: PPUSH
39994: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 266
40007: PUSH
40008: LD_INT 33
40010: EQUAL
40011: IFFALSE 40048
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40013: LD_VAR 0 1
40017: PPUSH
40018: LD_INT 43
40020: PUSH
40021: LD_INT 44
40023: PUSH
40024: LD_INT 46
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PPUSH
40035: LD_INT 3
40037: PPUSH
40038: CALL_OW 12
40042: ARRAY
40043: PPUSH
40044: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40048: LD_VAR 0 1
40052: PPUSH
40053: CALL_OW 266
40057: PUSH
40058: LD_INT 24
40060: EQUAL
40061: IFFALSE 40071
// russianAI = 1 ;
40063: LD_ADDR_EXP 27
40067: PUSH
40068: LD_INT 1
40070: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40071: LD_EXP 31
40075: PUSH
40076: LD_INT 0
40078: GREATER
40079: IFFALSE 40153
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40081: LD_ADDR_EXP 31
40085: PUSH
40086: LD_EXP 31
40090: PPUSH
40091: LD_INT 1
40093: PPUSH
40094: CALL_OW 3
40098: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40099: LD_ADDR_EXP 31
40103: PUSH
40104: LD_EXP 31
40108: PPUSH
40109: LD_INT 1
40111: PPUSH
40112: CALL_OW 3
40116: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40117: LD_ADDR_EXP 31
40121: PUSH
40122: LD_EXP 31
40126: PPUSH
40127: LD_INT 1
40129: PPUSH
40130: CALL_OW 3
40134: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40135: LD_ADDR_EXP 31
40139: PUSH
40140: LD_EXP 31
40144: PPUSH
40145: LD_INT 1
40147: PPUSH
40148: CALL_OW 3
40152: ST_TO_ADDR
// end ; end ; end ;
40153: PPOPN 3
40155: END
// on UpgradeComplete ( building ) do var i ;
40156: LD_INT 0
40158: PPUSH
// begin if GetSide ( building ) = 3 then
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 255
40168: PUSH
40169: LD_INT 3
40171: EQUAL
40172: IFFALSE 40353
// begin if GetBType ( building ) = b_factory then
40174: LD_VAR 0 1
40178: PPUSH
40179: CALL_OW 266
40183: PUSH
40184: LD_INT 3
40186: EQUAL
40187: IFFALSE 40254
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40189: LD_ADDR_VAR 0 2
40193: PUSH
40194: LD_INT 22
40196: PUSH
40197: LD_INT 3
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 25
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PPUSH
40218: CALL_OW 69
40222: PUSH
40223: FOR_IN
40224: IFFALSE 40242
// ComEnterUnit ( i , building ) ;
40226: LD_VAR 0 2
40230: PPUSH
40231: LD_VAR 0 1
40235: PPUSH
40236: CALL_OW 120
40240: GO 40223
40242: POP
40243: POP
// ruFab = building ;
40244: LD_ADDR_EXP 30
40248: PUSH
40249: LD_VAR 0 1
40253: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 266
40263: PUSH
40264: LD_INT 8
40266: EQUAL
40267: IFFALSE 40324
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40269: LD_ADDR_VAR 0 2
40273: PUSH
40274: LD_INT 22
40276: PUSH
40277: LD_INT 3
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 25
40286: PUSH
40287: LD_INT 4
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PPUSH
40298: CALL_OW 69
40302: PUSH
40303: FOR_IN
40304: IFFALSE 40322
// ComEnterUnit ( i , building ) ;
40306: LD_VAR 0 2
40310: PPUSH
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 120
40320: GO 40303
40322: POP
40323: POP
// if GetBType ( building ) = b_warehouse then
40324: LD_VAR 0 1
40328: PPUSH
40329: CALL_OW 266
40333: PUSH
40334: LD_INT 1
40336: EQUAL
40337: IFFALSE 40353
// begin ComEnterUnit ( Borodin , building ) ;
40339: LD_EXP 24
40343: PPUSH
40344: LD_VAR 0 1
40348: PPUSH
40349: CALL_OW 120
// end ; end ; end ;
40353: PPOPN 2
40355: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40356: LD_VAR 0 1
40360: PPUSH
40361: CALL_OW 247
40365: PUSH
40366: LD_INT 2
40368: EQUAL
40369: PUSH
40370: LD_VAR 0 1
40374: PPUSH
40375: CALL_OW 263
40379: PUSH
40380: LD_INT 3
40382: EQUAL
40383: AND
40384: PUSH
40385: LD_EXP 41
40389: PUSH
40390: LD_INT 0
40392: EQUAL
40393: AND
40394: IFFALSE 40512
// begin varEvent1 = 1 ;
40396: LD_ADDR_EXP 41
40400: PUSH
40401: LD_INT 1
40403: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40413: LD_INT 22
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 21
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 25
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 25
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 25
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 25
40468: PUSH
40469: LD_INT 4
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: PPUSH
40488: CALL_OW 69
40492: PUSH
40493: LD_EXP 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: DIFF
40501: PPUSH
40502: LD_STRING DC-Sol1-1
40504: PPUSH
40505: LD_STRING DC-FSol1-1
40507: PPUSH
40508: CALL 7036 0 3
// end ; end ;
40512: PPOPN 1
40514: END
// on UnitDestroyed ( unit ) do var i ;
40515: LD_INT 0
40517: PPUSH
// begin if GetSide ( unit ) = 3 then
40518: LD_VAR 0 1
40522: PPUSH
40523: CALL_OW 255
40527: PUSH
40528: LD_INT 3
40530: EQUAL
40531: IFFALSE 41301
// begin if GetType ( unit ) = unit_building then
40533: LD_VAR 0 1
40537: PPUSH
40538: CALL_OW 247
40542: PUSH
40543: LD_INT 3
40545: EQUAL
40546: IFFALSE 41238
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40548: LD_VAR 0 1
40552: PPUSH
40553: CALL_OW 266
40557: PUSH
40558: LD_INT 31
40560: EQUAL
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 266
40571: PUSH
40572: LD_INT 32
40574: EQUAL
40575: OR
40576: PUSH
40577: LD_VAR 0 1
40581: PPUSH
40582: CALL_OW 266
40586: PUSH
40587: LD_INT 36
40589: EQUAL
40590: OR
40591: PUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 266
40601: PUSH
40602: LD_INT 0
40604: EQUAL
40605: OR
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 266
40616: PUSH
40617: LD_INT 24
40619: EQUAL
40620: OR
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 266
40631: PUSH
40632: LD_INT 17
40634: EQUAL
40635: OR
40636: PUSH
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 266
40646: PUSH
40647: LD_INT 25
40649: EQUAL
40650: OR
40651: PUSH
40652: LD_VAR 0 1
40656: PPUSH
40657: CALL_OW 266
40661: PUSH
40662: LD_INT 19
40664: EQUAL
40665: OR
40666: PUSH
40667: LD_VAR 0 1
40671: PPUSH
40672: CALL_OW 266
40676: PUSH
40677: LD_INT 20
40679: EQUAL
40680: OR
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 266
40691: PUSH
40692: LD_INT 18
40694: EQUAL
40695: OR
40696: PUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: CALL_OW 266
40706: PUSH
40707: LD_INT 21
40709: EQUAL
40710: OR
40711: PUSH
40712: LD_VAR 0 1
40716: PPUSH
40717: CALL_OW 266
40721: PUSH
40722: LD_INT 23
40724: EQUAL
40725: OR
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 266
40736: PUSH
40737: LD_INT 16
40739: EQUAL
40740: OR
40741: PUSH
40742: LD_VAR 0 1
40746: PPUSH
40747: CALL_OW 266
40751: PUSH
40752: LD_INT 6
40754: EQUAL
40755: OR
40756: PUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 266
40766: PUSH
40767: LD_INT 29
40769: EQUAL
40770: OR
40771: PUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 266
40781: PUSH
40782: LD_INT 26
40784: EQUAL
40785: OR
40786: PUSH
40787: LD_VAR 0 1
40791: PPUSH
40792: CALL_OW 266
40796: PUSH
40797: LD_INT 30
40799: EQUAL
40800: OR
40801: PUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: CALL_OW 266
40811: PUSH
40812: LD_INT 28
40814: EQUAL
40815: OR
40816: PUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 266
40826: PUSH
40827: LD_INT 27
40829: EQUAL
40830: OR
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: CALL_OW 266
40841: PUSH
40842: LD_INT 33
40844: EQUAL
40845: OR
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: CALL_OW 266
40856: PUSH
40857: LD_INT 2
40859: EQUAL
40860: OR
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 266
40871: PUSH
40872: LD_INT 4
40874: EQUAL
40875: OR
40876: IFFALSE 40962
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40878: LD_ADDR_EXP 31
40882: PUSH
40883: LD_EXP 31
40887: PUSH
40888: LD_VAR 0 1
40892: PPUSH
40893: CALL_OW 266
40897: ADD
40898: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40899: LD_ADDR_EXP 31
40903: PUSH
40904: LD_EXP 31
40908: PUSH
40909: LD_VAR 0 1
40913: PPUSH
40914: CALL_OW 250
40918: ADD
40919: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40920: LD_ADDR_EXP 31
40924: PUSH
40925: LD_EXP 31
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 251
40939: ADD
40940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40941: LD_ADDR_EXP 31
40945: PUSH
40946: LD_EXP 31
40950: PUSH
40951: LD_VAR 0 1
40955: PPUSH
40956: CALL_OW 254
40960: ADD
40961: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 266
40971: PUSH
40972: LD_INT 1
40974: EQUAL
40975: IFFALSE 41054
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
40977: LD_ADDR_EXP 31
40981: PUSH
40982: LD_EXP 31
40986: PUSH
40987: LD_INT 0
40989: ADD
40990: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40991: LD_ADDR_EXP 31
40995: PUSH
40996: LD_EXP 31
41000: PUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 250
41010: ADD
41011: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41012: LD_ADDR_EXP 31
41016: PUSH
41017: LD_EXP 31
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 251
41031: ADD
41032: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41033: LD_ADDR_EXP 31
41037: PUSH
41038: LD_EXP 31
41042: PUSH
41043: LD_VAR 0 1
41047: PPUSH
41048: CALL_OW 254
41052: ADD
41053: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41054: LD_VAR 0 1
41058: PPUSH
41059: CALL_OW 266
41063: PUSH
41064: LD_INT 3
41066: EQUAL
41067: IFFALSE 41146
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41069: LD_ADDR_EXP 31
41073: PUSH
41074: LD_EXP 31
41078: PUSH
41079: LD_INT 2
41081: ADD
41082: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41083: LD_ADDR_EXP 31
41087: PUSH
41088: LD_EXP 31
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 250
41102: ADD
41103: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41104: LD_ADDR_EXP 31
41108: PUSH
41109: LD_EXP 31
41113: PUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: CALL_OW 251
41123: ADD
41124: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41125: LD_ADDR_EXP 31
41129: PUSH
41130: LD_EXP 31
41134: PUSH
41135: LD_VAR 0 1
41139: PPUSH
41140: CALL_OW 254
41144: ADD
41145: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41146: LD_VAR 0 1
41150: PPUSH
41151: CALL_OW 266
41155: PUSH
41156: LD_INT 5
41158: EQUAL
41159: IFFALSE 41238
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41161: LD_ADDR_EXP 31
41165: PUSH
41166: LD_EXP 31
41170: PUSH
41171: LD_INT 4
41173: ADD
41174: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41175: LD_ADDR_EXP 31
41179: PUSH
41180: LD_EXP 31
41184: PUSH
41185: LD_VAR 0 1
41189: PPUSH
41190: CALL_OW 250
41194: ADD
41195: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41196: LD_ADDR_EXP 31
41200: PUSH
41201: LD_EXP 31
41205: PUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: CALL_OW 251
41215: ADD
41216: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41217: LD_ADDR_EXP 31
41221: PUSH
41222: LD_EXP 31
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 254
41236: ADD
41237: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41238: LD_VAR 0 1
41242: PPUSH
41243: CALL_OW 247
41247: PUSH
41248: LD_INT 1
41250: EQUAL
41251: IFFALSE 41301
// begin for i in defenders_list do
41253: LD_ADDR_VAR 0 2
41257: PUSH
41258: LD_EXP 32
41262: PUSH
41263: FOR_IN
41264: IFFALSE 41299
// if i = unit then
41266: LD_VAR 0 2
41270: PUSH
41271: LD_VAR 0 1
41275: EQUAL
41276: IFFALSE 41297
// defenders_list = defenders_list diff [ unit ] ;
41278: LD_ADDR_EXP 32
41282: PUSH
41283: LD_EXP 32
41287: PUSH
41288: LD_VAR 0 1
41292: PUSH
41293: EMPTY
41294: LIST
41295: DIFF
41296: ST_TO_ADDR
41297: GO 41263
41299: POP
41300: POP
// end ; end ; end ; end_of_file
41301: PPOPN 2
41303: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41304: GO 41306
41306: DISABLE
41307: LD_INT 0
41309: PPUSH
// begin enemyWayX = [ ] ;
41310: LD_ADDR_EXP 45
41314: PUSH
41315: EMPTY
41316: ST_TO_ADDR
// enemyWayY = [ ] ;
41317: LD_ADDR_EXP 46
41321: PUSH
41322: EMPTY
41323: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41324: LD_ADDR_VAR 0 1
41328: PUSH
41329: LD_INT 1
41331: PPUSH
41332: LD_INT 3
41334: PPUSH
41335: CALL_OW 12
41339: ST_TO_ADDR
// if rnd = 1 then
41340: LD_VAR 0 1
41344: PUSH
41345: LD_INT 1
41347: EQUAL
41348: IFFALSE 41388
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41350: LD_ADDR_EXP 45
41354: PUSH
41355: LD_INT 73
41357: PUSH
41358: LD_INT 46
41360: PUSH
41361: LD_INT 29
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41369: LD_ADDR_EXP 46
41373: PUSH
41374: LD_INT 71
41376: PUSH
41377: LD_INT 43
41379: PUSH
41380: LD_INT 29
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: ST_TO_ADDR
// end ; if rnd = 2 then
41388: LD_VAR 0 1
41392: PUSH
41393: LD_INT 2
41395: EQUAL
41396: IFFALSE 41420
// begin enemyWayX = [ 64 ] ;
41398: LD_ADDR_EXP 45
41402: PUSH
41403: LD_INT 64
41405: PUSH
41406: EMPTY
41407: LIST
41408: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41409: LD_ADDR_EXP 46
41413: PUSH
41414: LD_INT 43
41416: PUSH
41417: EMPTY
41418: LIST
41419: ST_TO_ADDR
// end ; if rnd = 3 then
41420: LD_VAR 0 1
41424: PUSH
41425: LD_INT 3
41427: EQUAL
41428: IFFALSE 41452
// begin enemyWayX = [ 80 ] ;
41430: LD_ADDR_EXP 45
41434: PUSH
41435: LD_INT 80
41437: PUSH
41438: EMPTY
41439: LIST
41440: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41441: LD_ADDR_EXP 46
41445: PUSH
41446: LD_INT 28
41448: PUSH
41449: EMPTY
41450: LIST
41451: ST_TO_ADDR
// end ; enable ;
41452: ENABLE
// end ;
41453: PPOPN 1
41455: END
// every 0 0$1 do
41456: GO 41458
41458: DISABLE
// begin enable ;
41459: ENABLE
// if escapeAvalaible = 0 then
41460: LD_EXP 36
41464: PUSH
41465: LD_INT 0
41467: EQUAL
41468: IFFALSE 41480
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41470: LD_INT 3
41472: PPUSH
41473: LD_INT 6
41475: PPUSH
41476: CALL 8437 0 2
// if escapeAvalaible = 0 then
41480: LD_EXP 36
41484: PUSH
41485: LD_INT 0
41487: EQUAL
41488: IFFALSE 41500
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41490: LD_INT 1
41492: PPUSH
41493: LD_INT 24
41495: PPUSH
41496: CALL 9097 0 2
// if russianAI = 1 then
41500: LD_EXP 27
41504: PUSH
41505: LD_INT 1
41507: EQUAL
41508: IFFALSE 41578
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41510: LD_INT 3
41512: PPUSH
41513: LD_INT 7
41515: PPUSH
41516: LD_INT 6
41518: PPUSH
41519: LD_EXP 29
41523: PPUSH
41524: CALL 11535 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41528: LD_INT 3
41530: PPUSH
41531: LD_EXP 28
41535: PPUSH
41536: LD_INT 6
41538: PPUSH
41539: LD_EXP 31
41543: PPUSH
41544: CALL 11129 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41548: LD_INT 3
41550: PPUSH
41551: LD_INT 26
41553: PPUSH
41554: LD_EXP 45
41558: PPUSH
41559: LD_EXP 46
41563: PPUSH
41564: CALL 9997 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41568: LD_INT 3
41570: PPUSH
41571: LD_INT 1
41573: PPUSH
41574: CALL 12079 0 2
// end ; if SikorskyArrive = 1 then
41578: LD_EXP 18
41582: PUSH
41583: LD_INT 1
41585: EQUAL
41586: IFFALSE 41604
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41588: LD_INT 3
41590: PPUSH
41591: LD_INT 10
41593: PPUSH
41594: LD_INT 53
41596: PPUSH
41597: LD_INT 59
41599: PPUSH
41600: CALL 9794 0 4
// end ;
41604: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41605: LD_EXP 27
41609: PUSH
41610: LD_INT 1
41612: EQUAL
41613: IFFALSE 41889
41615: GO 41617
41617: DISABLE
41618: LD_INT 0
41620: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41621: LD_ADDR_VAR 0 1
41625: PUSH
41626: LD_INT 22
41628: PUSH
41629: LD_INT 3
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 21
41638: PUSH
41639: LD_INT 3
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 30
41648: PUSH
41649: LD_INT 32
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 3
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 35
41664: PUSH
41665: LD_INT 43
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 35
41674: PUSH
41675: LD_INT 44
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 35
41684: PUSH
41685: LD_INT 46
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: PPUSH
41708: CALL_OW 69
41712: PUSH
41713: FOR_IN
41714: IFFALSE 41753
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_INT 43
41723: PUSH
41724: LD_INT 44
41726: PUSH
41727: LD_INT 46
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PPUSH
41738: LD_INT 3
41740: PPUSH
41741: CALL_OW 12
41745: ARRAY
41746: PPUSH
41747: CALL_OW 431
41751: GO 41713
41753: POP
41754: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41755: LD_ADDR_VAR 0 1
41759: PUSH
41760: LD_INT 22
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 21
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 30
41782: PUSH
41783: LD_INT 33
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: LD_INT 35
41798: PUSH
41799: LD_INT 43
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 35
41808: PUSH
41809: LD_INT 44
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 35
41818: PUSH
41819: LD_INT 46
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: PPUSH
41842: CALL_OW 69
41846: PUSH
41847: FOR_IN
41848: IFFALSE 41887
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41850: LD_VAR 0 1
41854: PPUSH
41855: LD_INT 43
41857: PUSH
41858: LD_INT 44
41860: PUSH
41861: LD_INT 46
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PPUSH
41872: LD_INT 3
41874: PPUSH
41875: CALL_OW 12
41879: ARRAY
41880: PPUSH
41881: CALL_OW 431
41885: GO 41847
41887: POP
41888: POP
// end ;
41889: PPOPN 1
41891: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41892: LD_EXP 24
41896: PPUSH
41897: CALL_OW 310
41901: NOT
41902: PUSH
41903: LD_EXP 28
41907: PPUSH
41908: CALL_OW 302
41912: AND
41913: PUSH
41914: LD_EXP 28
41918: PPUSH
41919: CALL_OW 255
41923: PUSH
41924: LD_INT 3
41926: EQUAL
41927: AND
41928: IFFALSE 41948
41930: GO 41932
41932: DISABLE
// begin enable ;
41933: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41934: LD_EXP 24
41938: PPUSH
41939: LD_EXP 28
41943: PPUSH
41944: CALL_OW 120
// end ;
41948: END
// every 0 0$1 trigger SikorskyAI = 1 do
41949: LD_EXP 20
41953: PUSH
41954: LD_INT 1
41956: EQUAL
41957: IFFALSE 41992
41959: GO 41961
41961: DISABLE
// begin enable ;
41962: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
41963: LD_INT 4
41965: PPUSH
41966: LD_INT 10
41968: PPUSH
41969: LD_INT 93
41971: PPUSH
41972: LD_INT 93
41974: PPUSH
41975: CALL 9794 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
41979: LD_INT 4
41981: PPUSH
41982: LD_INT 11
41984: PPUSH
41985: LD_INT 3
41987: PPUSH
41988: CALL 16291 0 3
// end ;
41992: END
// every 0 0$1 trigger SikorskyAI = 1 do
41993: LD_EXP 20
41997: PUSH
41998: LD_INT 1
42000: EQUAL
42001: IFFALSE 42013
42003: GO 42005
42005: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42006: LD_INT 4
42008: PPUSH
42009: CALL 10801 0 1
42013: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42014: LD_EXP 27
42018: PUSH
42019: LD_INT 1
42021: EQUAL
42022: PUSH
42023: LD_EXP 30
42027: PPUSH
42028: CALL_OW 302
42032: AND
42033: PUSH
42034: LD_EXP 30
42038: PPUSH
42039: CALL_OW 255
42043: PUSH
42044: LD_INT 3
42046: EQUAL
42047: AND
42048: PUSH
42049: LD_INT 22
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 21
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 33
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PPUSH
42084: CALL_OW 69
42088: PUSH
42089: LD_INT 0
42091: EQUAL
42092: AND
42093: IFFALSE 42327
42095: GO 42097
42097: DISABLE
// begin enable ;
42098: ENABLE
// if Difficulty = 1 then
42099: LD_OWVAR 67
42103: PUSH
42104: LD_INT 1
42106: EQUAL
42107: IFFALSE 42175
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42109: LD_INT 3
42111: PPUSH
42112: LD_EXP 30
42116: PPUSH
42117: LD_INT 5
42119: PPUSH
42120: LD_INT 8
42122: PPUSH
42123: CALL_OW 12
42127: PPUSH
42128: LD_INT 43
42130: PUSH
42131: LD_INT 43
42133: PUSH
42134: LD_INT 43
42136: PUSH
42137: LD_INT 43
42139: PUSH
42140: LD_INT 44
42142: PUSH
42143: LD_INT 44
42145: PUSH
42146: LD_INT 44
42148: PUSH
42149: LD_INT 46
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: PPUSH
42162: LD_INT 1
42164: PPUSH
42165: LD_INT 3
42167: PPUSH
42168: LD_INT 24
42170: PPUSH
42171: CALL 9640 0 7
// if Difficulty = 2 then
42175: LD_OWVAR 67
42179: PUSH
42180: LD_INT 2
42182: EQUAL
42183: IFFALSE 42251
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42185: LD_INT 3
42187: PPUSH
42188: LD_EXP 30
42192: PPUSH
42193: LD_INT 6
42195: PPUSH
42196: LD_INT 8
42198: PPUSH
42199: CALL_OW 12
42203: PPUSH
42204: LD_INT 43
42206: PUSH
42207: LD_INT 43
42209: PUSH
42210: LD_INT 44
42212: PUSH
42213: LD_INT 44
42215: PUSH
42216: LD_INT 44
42218: PUSH
42219: LD_INT 44
42221: PUSH
42222: LD_INT 46
42224: PUSH
42225: LD_INT 46
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: PPUSH
42238: LD_INT 1
42240: PPUSH
42241: LD_INT 3
42243: PPUSH
42244: LD_INT 24
42246: PPUSH
42247: CALL 9640 0 7
// if Difficulty = 3 then
42251: LD_OWVAR 67
42255: PUSH
42256: LD_INT 3
42258: EQUAL
42259: IFFALSE 42327
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42261: LD_INT 3
42263: PPUSH
42264: LD_EXP 30
42268: PPUSH
42269: LD_INT 7
42271: PPUSH
42272: LD_INT 8
42274: PPUSH
42275: CALL_OW 12
42279: PPUSH
42280: LD_INT 43
42282: PUSH
42283: LD_INT 43
42285: PUSH
42286: LD_INT 44
42288: PUSH
42289: LD_INT 44
42291: PUSH
42292: LD_INT 44
42294: PUSH
42295: LD_INT 46
42297: PUSH
42298: LD_INT 46
42300: PUSH
42301: LD_INT 46
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: PPUSH
42314: LD_INT 1
42316: PPUSH
42317: LD_INT 3
42319: PPUSH
42320: LD_INT 24
42322: PPUSH
42323: CALL 9640 0 7
// end ;
42327: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42328: LD_EXP 38
42332: PUSH
42333: LD_INT 1
42335: EQUAL
42336: IFFALSE 42418
42338: GO 42340
42340: DISABLE
42341: LD_INT 0
42343: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42344: LD_ADDR_VAR 0 1
42348: PUSH
42349: LD_INT 22
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 21
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 3
42371: PUSH
42372: LD_INT 24
42374: PUSH
42375: LD_INT 650
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: PPUSH
42391: CALL_OW 69
42395: PUSH
42396: FOR_IN
42397: IFFALSE 42416
// ComMoveXY ( i , 51 , 12 ) ;
42399: LD_VAR 0 1
42403: PPUSH
42404: LD_INT 51
42406: PPUSH
42407: LD_INT 12
42409: PPUSH
42410: CALL_OW 111
42414: GO 42396
42416: POP
42417: POP
// end ; end_of_file
42418: PPOPN 1
42420: END
// every 1 1$20 trigger firstAttack = 1 do
42421: LD_EXP 33
42425: PUSH
42426: LD_INT 1
42428: EQUAL
42429: IFFALSE 42535
42431: GO 42433
42433: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42434: LD_INT 6
42436: PPUSH
42437: LD_INT 3
42439: PPUSH
42440: LD_INT 5
42442: PPUSH
42443: LD_INT 6
42445: PPUSH
42446: CALL_OW 12
42450: PUSH
42451: LD_INT 5
42453: PPUSH
42454: LD_INT 6
42456: PPUSH
42457: CALL_OW 12
42461: PUSH
42462: LD_INT 5
42464: PPUSH
42465: LD_INT 6
42467: PPUSH
42468: CALL_OW 12
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: PUSH
42478: LD_OWVAR 67
42482: ARRAY
42483: PPUSH
42484: LD_INT 0
42486: PPUSH
42487: LD_INT 0
42489: PPUSH
42490: LD_INT 0
42492: PPUSH
42493: LD_INT 0
42495: PPUSH
42496: LD_EXP 25
42500: PPUSH
42501: LD_EXP 26
42505: PPUSH
42506: CALL_OW 12
42510: PPUSH
42511: LD_INT 16
42513: PPUSH
42514: LD_INT 7
42516: PPUSH
42517: LD_INT 1
42519: PPUSH
42520: LD_INT 1
42522: PPUSH
42523: LD_INT 3
42525: PPUSH
42526: CALL_OW 12
42530: PPUSH
42531: CALL 12309 0 12
42535: END
// every 1 1$40 trigger firstAttack = 1 do
42536: LD_EXP 33
42540: PUSH
42541: LD_INT 1
42543: EQUAL
42544: IFFALSE 42636
42546: GO 42548
42548: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42549: LD_INT 16
42551: PPUSH
42552: LD_INT 6
42554: PPUSH
42555: LD_INT 3
42557: PPUSH
42558: LD_INT 4
42560: PPUSH
42561: CALL_OW 12
42565: PUSH
42566: LD_INT 4
42568: PPUSH
42569: LD_INT 5
42571: PPUSH
42572: CALL_OW 12
42576: PUSH
42577: LD_INT 5
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: PUSH
42585: LD_OWVAR 67
42589: ARRAY
42590: PPUSH
42591: LD_EXP 25
42595: PPUSH
42596: LD_EXP 26
42600: PPUSH
42601: CALL_OW 12
42605: PPUSH
42606: LD_INT 3
42608: PPUSH
42609: LD_INT 1
42611: PPUSH
42612: LD_INT 3
42614: PPUSH
42615: LD_INT 44
42617: PUSH
42618: LD_INT 46
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PPUSH
42625: EMPTY
42626: PPUSH
42627: EMPTY
42628: PPUSH
42629: LD_INT 1
42631: PPUSH
42632: CALL 14602 0 11
42636: END
// every 5 5$40 trigger firstAttack = 1 and JMMArrive = 0 do
42637: LD_EXP 33
42641: PUSH
42642: LD_INT 1
42644: EQUAL
42645: PUSH
42646: LD_EXP 39
42650: PUSH
42651: LD_INT 0
42653: EQUAL
42654: AND
42655: IFFALSE 42761
42657: GO 42659
42659: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42660: LD_INT 6
42662: PPUSH
42663: LD_INT 3
42665: PPUSH
42666: LD_INT 5
42668: PPUSH
42669: LD_INT 6
42671: PPUSH
42672: CALL_OW 12
42676: PUSH
42677: LD_INT 5
42679: PPUSH
42680: LD_INT 6
42682: PPUSH
42683: CALL_OW 12
42687: PUSH
42688: LD_INT 5
42690: PPUSH
42691: LD_INT 6
42693: PPUSH
42694: CALL_OW 12
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: PUSH
42704: LD_OWVAR 67
42708: ARRAY
42709: PPUSH
42710: LD_INT 0
42712: PPUSH
42713: LD_INT 0
42715: PPUSH
42716: LD_INT 0
42718: PPUSH
42719: LD_INT 0
42721: PPUSH
42722: LD_EXP 25
42726: PPUSH
42727: LD_EXP 26
42731: PPUSH
42732: CALL_OW 12
42736: PPUSH
42737: LD_INT 16
42739: PPUSH
42740: LD_INT 7
42742: PPUSH
42743: LD_INT 1
42745: PPUSH
42746: LD_INT 1
42748: PPUSH
42749: LD_INT 3
42751: PPUSH
42752: CALL_OW 12
42756: PPUSH
42757: CALL 12309 0 12
42761: END
// every 5 5$50 trigger firstAttack = 1 and JMMArrive = 0 do
42762: LD_EXP 33
42766: PUSH
42767: LD_INT 1
42769: EQUAL
42770: PUSH
42771: LD_EXP 39
42775: PUSH
42776: LD_INT 0
42778: EQUAL
42779: AND
42780: IFFALSE 42876
42782: GO 42784
42784: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42785: LD_INT 16
42787: PPUSH
42788: LD_INT 6
42790: PPUSH
42791: LD_INT 5
42793: PPUSH
42794: LD_INT 6
42796: PPUSH
42797: CALL_OW 12
42801: PUSH
42802: LD_INT 6
42804: PPUSH
42805: LD_INT 7
42807: PPUSH
42808: CALL_OW 12
42812: PUSH
42813: LD_INT 7
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: PUSH
42821: LD_OWVAR 67
42825: ARRAY
42826: PPUSH
42827: LD_EXP 25
42831: PPUSH
42832: LD_EXP 26
42836: PPUSH
42837: CALL_OW 12
42841: PPUSH
42842: LD_INT 3
42844: PPUSH
42845: LD_INT 1
42847: PPUSH
42848: LD_INT 3
42850: PPUSH
42851: LD_INT 43
42853: PUSH
42854: LD_INT 44
42856: PUSH
42857: LD_INT 46
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: PPUSH
42865: EMPTY
42866: PPUSH
42867: EMPTY
42868: PPUSH
42869: LD_INT 1
42871: PPUSH
42872: CALL 14602 0 11
42876: END
// every 8 8$50 trigger firstAttack = 1 and JMMArrive = 0 do
42877: LD_EXP 33
42881: PUSH
42882: LD_INT 1
42884: EQUAL
42885: PUSH
42886: LD_EXP 39
42890: PUSH
42891: LD_INT 0
42893: EQUAL
42894: AND
42895: IFFALSE 42991
42897: GO 42899
42899: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42900: LD_INT 16
42902: PPUSH
42903: LD_INT 6
42905: PPUSH
42906: LD_INT 5
42908: PPUSH
42909: LD_INT 6
42911: PPUSH
42912: CALL_OW 12
42916: PUSH
42917: LD_INT 6
42919: PPUSH
42920: LD_INT 7
42922: PPUSH
42923: CALL_OW 12
42927: PUSH
42928: LD_INT 7
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: PUSH
42936: LD_OWVAR 67
42940: ARRAY
42941: PPUSH
42942: LD_EXP 25
42946: PPUSH
42947: LD_EXP 26
42951: PPUSH
42952: CALL_OW 12
42956: PPUSH
42957: LD_INT 3
42959: PPUSH
42960: LD_INT 1
42962: PPUSH
42963: LD_INT 3
42965: PPUSH
42966: LD_INT 43
42968: PUSH
42969: LD_INT 44
42971: PUSH
42972: LD_INT 46
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: PPUSH
42980: EMPTY
42981: PPUSH
42982: EMPTY
42983: PPUSH
42984: LD_INT 1
42986: PPUSH
42987: CALL 14602 0 11
42991: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
42992: LD_EXP 33
42996: PUSH
42997: LD_INT 1
42999: EQUAL
43000: PUSH
43001: LD_EXP 39
43005: PUSH
43006: LD_INT 0
43008: EQUAL
43009: AND
43010: IFFALSE 43086
43012: GO 43014
43014: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43015: LD_INT 16
43017: PPUSH
43018: LD_INT 6
43020: PPUSH
43021: LD_INT 5
43023: PUSH
43024: LD_INT 6
43026: PUSH
43027: LD_INT 7
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: PUSH
43035: LD_OWVAR 67
43039: ARRAY
43040: PPUSH
43041: LD_EXP 25
43045: PPUSH
43046: LD_EXP 26
43050: PPUSH
43051: CALL_OW 12
43055: PPUSH
43056: LD_INT 3
43058: PPUSH
43059: LD_INT 1
43061: PPUSH
43062: LD_INT 3
43064: PPUSH
43065: LD_INT 44
43067: PUSH
43068: LD_INT 46
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PPUSH
43075: EMPTY
43076: PPUSH
43077: EMPTY
43078: PPUSH
43079: LD_INT 1
43081: PPUSH
43082: CALL 14602 0 11
43086: END
// every 1 1$00 trigger secondAttack = 1 do
43087: LD_EXP 34
43091: PUSH
43092: LD_INT 1
43094: EQUAL
43095: IFFALSE 43177
43097: GO 43099
43099: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43100: LD_INT 6
43102: PPUSH
43103: LD_INT 3
43105: PPUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: LD_INT 5
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: PUSH
43120: LD_OWVAR 67
43124: ARRAY
43125: PPUSH
43126: LD_INT 0
43128: PPUSH
43129: LD_INT 0
43131: PPUSH
43132: LD_INT 0
43134: PPUSH
43135: LD_INT 0
43137: PPUSH
43138: LD_EXP 25
43142: PPUSH
43143: LD_EXP 26
43147: PPUSH
43148: CALL_OW 12
43152: PPUSH
43153: LD_INT 16
43155: PPUSH
43156: LD_INT 7
43158: PPUSH
43159: LD_INT 1
43161: PPUSH
43162: LD_INT 1
43164: PPUSH
43165: LD_INT 3
43167: PPUSH
43168: CALL_OW 12
43172: PPUSH
43173: CALL 12309 0 12
43177: END
// every 1 1$00 trigger secondAttack = 1 do
43178: LD_EXP 34
43182: PUSH
43183: LD_INT 1
43185: EQUAL
43186: IFFALSE 43290
43188: GO 43190
43190: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43191: LD_INT 16
43193: PPUSH
43194: LD_INT 6
43196: PPUSH
43197: LD_INT 5
43199: PPUSH
43200: LD_INT 8
43202: PPUSH
43203: CALL_OW 12
43207: PUSH
43208: LD_INT 6
43210: PPUSH
43211: LD_INT 9
43213: PPUSH
43214: CALL_OW 12
43218: PUSH
43219: LD_INT 7
43221: PPUSH
43222: LD_INT 9
43224: PPUSH
43225: CALL_OW 12
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: PUSH
43235: LD_OWVAR 67
43239: ARRAY
43240: PPUSH
43241: LD_EXP 25
43245: PPUSH
43246: LD_EXP 26
43250: PPUSH
43251: CALL_OW 12
43255: PPUSH
43256: LD_INT 3
43258: PPUSH
43259: LD_INT 1
43261: PPUSH
43262: LD_INT 3
43264: PPUSH
43265: LD_INT 43
43267: PUSH
43268: LD_INT 44
43270: PUSH
43271: LD_INT 46
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: LIST
43278: PPUSH
43279: EMPTY
43280: PPUSH
43281: EMPTY
43282: PPUSH
43283: LD_INT 1
43285: PPUSH
43286: CALL 14602 0 11
43290: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43291: LD_EXP 18
43295: PUSH
43296: LD_INT 0
43298: EQUAL
43299: IFFALSE 43381
43301: GO 43303
43303: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43304: LD_INT 6
43306: PPUSH
43307: LD_INT 3
43309: PPUSH
43310: LD_INT 3
43312: PUSH
43313: LD_INT 4
43315: PUSH
43316: LD_INT 5
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: PUSH
43324: LD_OWVAR 67
43328: ARRAY
43329: PPUSH
43330: LD_INT 0
43332: PPUSH
43333: LD_INT 0
43335: PPUSH
43336: LD_INT 0
43338: PPUSH
43339: LD_INT 0
43341: PPUSH
43342: LD_EXP 25
43346: PPUSH
43347: LD_EXP 26
43351: PPUSH
43352: CALL_OW 12
43356: PPUSH
43357: LD_INT 16
43359: PPUSH
43360: LD_INT 7
43362: PPUSH
43363: LD_INT 1
43365: PPUSH
43366: LD_INT 1
43368: PPUSH
43369: LD_INT 3
43371: PPUSH
43372: CALL_OW 12
43376: PPUSH
43377: CALL 12309 0 12
43381: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43382: LD_EXP 18
43386: PUSH
43387: LD_INT 0
43389: EQUAL
43390: IFFALSE 43490
43392: GO 43394
43394: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43395: LD_INT 16
43397: PPUSH
43398: LD_INT 6
43400: PPUSH
43401: LD_INT 5
43403: PPUSH
43404: LD_INT 8
43406: PPUSH
43407: CALL_OW 12
43411: PUSH
43412: LD_INT 6
43414: PPUSH
43415: LD_INT 9
43417: PPUSH
43418: CALL_OW 12
43422: PUSH
43423: LD_INT 7
43425: PPUSH
43426: LD_INT 9
43428: PPUSH
43429: CALL_OW 12
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: PUSH
43439: LD_OWVAR 67
43443: ARRAY
43444: PPUSH
43445: LD_EXP 25
43449: PPUSH
43450: LD_EXP 26
43454: PPUSH
43455: CALL_OW 12
43459: PPUSH
43460: LD_INT 3
43462: PPUSH
43463: LD_INT 1
43465: PPUSH
43466: LD_INT 3
43468: PPUSH
43469: LD_INT 44
43471: PUSH
43472: LD_INT 46
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PPUSH
43479: EMPTY
43480: PPUSH
43481: EMPTY
43482: PPUSH
43483: LD_INT 1
43485: PPUSH
43486: CALL 14602 0 11
43490: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43491: LD_EXP 18
43495: PUSH
43496: LD_INT 0
43498: EQUAL
43499: IFFALSE 43581
43501: GO 43503
43503: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43504: LD_INT 6
43506: PPUSH
43507: LD_INT 3
43509: PPUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 4
43515: PUSH
43516: LD_INT 5
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: PUSH
43524: LD_OWVAR 67
43528: ARRAY
43529: PPUSH
43530: LD_INT 0
43532: PPUSH
43533: LD_INT 0
43535: PPUSH
43536: LD_INT 0
43538: PPUSH
43539: LD_INT 0
43541: PPUSH
43542: LD_EXP 25
43546: PPUSH
43547: LD_EXP 26
43551: PPUSH
43552: CALL_OW 12
43556: PPUSH
43557: LD_INT 16
43559: PPUSH
43560: LD_INT 7
43562: PPUSH
43563: LD_INT 1
43565: PPUSH
43566: LD_INT 1
43568: PPUSH
43569: LD_INT 3
43571: PPUSH
43572: CALL_OW 12
43576: PPUSH
43577: CALL 12309 0 12
43581: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43582: LD_EXP 18
43586: PUSH
43587: LD_INT 0
43589: EQUAL
43590: IFFALSE 43690
43592: GO 43594
43594: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43595: LD_INT 16
43597: PPUSH
43598: LD_INT 6
43600: PPUSH
43601: LD_INT 5
43603: PPUSH
43604: LD_INT 8
43606: PPUSH
43607: CALL_OW 12
43611: PUSH
43612: LD_INT 6
43614: PPUSH
43615: LD_INT 9
43617: PPUSH
43618: CALL_OW 12
43622: PUSH
43623: LD_INT 7
43625: PPUSH
43626: LD_INT 9
43628: PPUSH
43629: CALL_OW 12
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: PUSH
43639: LD_OWVAR 67
43643: ARRAY
43644: PPUSH
43645: LD_EXP 25
43649: PPUSH
43650: LD_EXP 26
43654: PPUSH
43655: CALL_OW 12
43659: PPUSH
43660: LD_INT 3
43662: PPUSH
43663: LD_INT 1
43665: PPUSH
43666: LD_INT 3
43668: PPUSH
43669: LD_INT 44
43671: PUSH
43672: LD_INT 46
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PPUSH
43679: EMPTY
43680: PPUSH
43681: EMPTY
43682: PPUSH
43683: LD_INT 1
43685: PPUSH
43686: CALL 14602 0 11
43690: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43691: LD_EXP 18
43695: PUSH
43696: LD_INT 0
43698: EQUAL
43699: IFFALSE 43781
43701: GO 43703
43703: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43704: LD_INT 6
43706: PPUSH
43707: LD_INT 3
43709: PPUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 4
43715: PUSH
43716: LD_INT 5
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: PUSH
43724: LD_OWVAR 67
43728: ARRAY
43729: PPUSH
43730: LD_INT 0
43732: PPUSH
43733: LD_INT 0
43735: PPUSH
43736: LD_INT 0
43738: PPUSH
43739: LD_INT 0
43741: PPUSH
43742: LD_EXP 25
43746: PPUSH
43747: LD_EXP 26
43751: PPUSH
43752: CALL_OW 12
43756: PPUSH
43757: LD_INT 16
43759: PPUSH
43760: LD_INT 7
43762: PPUSH
43763: LD_INT 1
43765: PPUSH
43766: LD_INT 1
43768: PPUSH
43769: LD_INT 3
43771: PPUSH
43772: CALL_OW 12
43776: PPUSH
43777: CALL 12309 0 12
43781: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43782: LD_EXP 18
43786: PUSH
43787: LD_INT 0
43789: EQUAL
43790: IFFALSE 43890
43792: GO 43794
43794: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43795: LD_INT 16
43797: PPUSH
43798: LD_INT 6
43800: PPUSH
43801: LD_INT 5
43803: PPUSH
43804: LD_INT 8
43806: PPUSH
43807: CALL_OW 12
43811: PUSH
43812: LD_INT 6
43814: PPUSH
43815: LD_INT 9
43817: PPUSH
43818: CALL_OW 12
43822: PUSH
43823: LD_INT 7
43825: PPUSH
43826: LD_INT 9
43828: PPUSH
43829: CALL_OW 12
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: PUSH
43839: LD_OWVAR 67
43843: ARRAY
43844: PPUSH
43845: LD_EXP 25
43849: PPUSH
43850: LD_EXP 26
43854: PPUSH
43855: CALL_OW 12
43859: PPUSH
43860: LD_INT 3
43862: PPUSH
43863: LD_INT 1
43865: PPUSH
43866: LD_INT 3
43868: PPUSH
43869: LD_INT 44
43871: PUSH
43872: LD_INT 46
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PPUSH
43879: EMPTY
43880: PPUSH
43881: EMPTY
43882: PPUSH
43883: LD_INT 1
43885: PPUSH
43886: CALL 14602 0 11
43890: END
// every 0 0$1 trigger timerStatus = 1 do
43891: LD_EXP 35
43895: PUSH
43896: LD_INT 1
43898: EQUAL
43899: IFFALSE 43959
43901: GO 43903
43903: DISABLE
// begin repeat wait ( 0 0$1 ) ;
43904: LD_INT 35
43906: PPUSH
43907: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43911: LD_ADDR_OWVAR 47
43915: PUSH
43916: LD_STRING #Am08-1
43918: PUSH
43919: LD_EXP 19
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43928: LD_ADDR_EXP 19
43932: PUSH
43933: LD_EXP 19
43937: PUSH
43938: LD_INT 35
43940: MINUS
43941: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
43942: LD_EXP 19
43946: PUSH
43947: LD_INT 0
43949: EQUAL
43950: IFFALSE 43904
// display_strings := [ ] ;
43952: LD_ADDR_OWVAR 47
43956: PUSH
43957: EMPTY
43958: ST_TO_ADDR
// end ; end_of_file
43959: END
// every 1 1$0 do
43960: GO 43962
43962: DISABLE
// begin if supply <= 13 and supply > 7 then
43963: LD_EXP 40
43967: PUSH
43968: LD_INT 13
43970: LESSEQUAL
43971: PUSH
43972: LD_EXP 40
43976: PUSH
43977: LD_INT 7
43979: GREATER
43980: AND
43981: IFFALSE 44004
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
43983: LD_INT 3
43985: PPUSH
43986: LD_INT 5
43988: PPUSH
43989: CALL_OW 12
43993: PPUSH
43994: LD_INT 5
43996: PPUSH
43997: LD_INT 1
43999: PPUSH
44000: CALL_OW 55
// if supply <= 7 and supply > 4 then
44004: LD_EXP 40
44008: PUSH
44009: LD_INT 7
44011: LESSEQUAL
44012: PUSH
44013: LD_EXP 40
44017: PUSH
44018: LD_INT 4
44020: GREATER
44021: AND
44022: IFFALSE 44045
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44024: LD_INT 3
44026: PPUSH
44027: LD_INT 5
44029: PPUSH
44030: CALL_OW 12
44034: PPUSH
44035: LD_INT 20
44037: PPUSH
44038: LD_INT 1
44040: PPUSH
44041: CALL_OW 55
// if supply <= 4 and supply > 0 then
44045: LD_EXP 40
44049: PUSH
44050: LD_INT 4
44052: LESSEQUAL
44053: PUSH
44054: LD_EXP 40
44058: PUSH
44059: LD_INT 0
44061: GREATER
44062: AND
44063: IFFALSE 44086
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44065: LD_INT 3
44067: PPUSH
44068: LD_INT 5
44070: PPUSH
44071: CALL_OW 12
44075: PPUSH
44076: LD_INT 21
44078: PPUSH
44079: LD_INT 1
44081: PPUSH
44082: CALL_OW 55
// if supply > 0 then
44086: LD_EXP 40
44090: PUSH
44091: LD_INT 0
44093: GREATER
44094: IFFALSE 44111
// begin supply = supply - 1 ;
44096: LD_ADDR_EXP 40
44100: PUSH
44101: LD_EXP 40
44105: PUSH
44106: LD_INT 1
44108: MINUS
44109: ST_TO_ADDR
// enable ;
44110: ENABLE
// end ; end ; end_of_file
44111: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44112: LD_EXP 39
44116: PUSH
44117: LD_INT 1
44119: EQUAL
44120: PUSH
44121: LD_EXP 1
44125: PPUSH
44126: CALL_OW 301
44130: AND
44131: IFFALSE 44143
44133: GO 44135
44135: DISABLE
// YouLost ( JMM ) ;
44136: LD_STRING JMM
44138: PPUSH
44139: CALL_OW 104
44143: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44144: LD_EXP 18
44148: PUSH
44149: LD_INT 1
44151: EQUAL
44152: PUSH
44153: LD_EXP 16
44157: PPUSH
44158: CALL_OW 301
44162: AND
44163: IFFALSE 44195
44165: GO 44167
44167: DISABLE
// begin DialogueOn ;
44168: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44172: LD_EXP 23
44176: PPUSH
44177: LD_STRING D8a-Pow-1
44179: PPUSH
44180: CALL_OW 94
// DialogueOff ;
44184: CALL_OW 7
// YouLost ( Dismissed ) ;
44188: LD_STRING Dismissed
44190: PPUSH
44191: CALL_OW 104
// end ;
44195: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44196: LD_INT 22
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 30
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 30
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PPUSH
44238: CALL_OW 69
44242: PUSH
44243: LD_INT 0
44245: EQUAL
44246: IFFALSE 44258
44248: GO 44250
44250: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44251: LD_STRING Destroyed
44253: PPUSH
44254: CALL_OW 104
44258: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44259: LD_EXP 24
44263: PPUSH
44264: CALL_OW 301
44268: PUSH
44269: LD_INT 22
44271: PUSH
44272: LD_INT 3
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 21
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PPUSH
44293: CALL_OW 69
44297: PUSH
44298: LD_INT 7
44300: PUSH
44301: LD_INT 6
44303: PUSH
44304: LD_INT 5
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: PUSH
44312: LD_OWVAR 67
44316: ARRAY
44317: LESS
44318: AND
44319: PUSH
44320: LD_EXP 1
44324: PPUSH
44325: CALL_OW 305
44329: AND
44330: IFFALSE 44778
44332: GO 44334
44334: DISABLE
44335: LD_INT 0
44337: PPUSH
44338: PPUSH
// begin russianAI = 0 ;
44339: LD_ADDR_EXP 27
44343: PUSH
44344: LD_INT 0
44346: ST_TO_ADDR
// escapeAvalaible = 1 ;
44347: LD_ADDR_EXP 36
44351: PUSH
44352: LD_INT 1
44354: ST_TO_ADDR
// InGameOn ;
44355: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44359: LD_INT 3
44361: PPUSH
44362: LD_INT 1
44364: PPUSH
44365: LD_INT 1
44367: PPUSH
44368: LD_INT 0
44370: PPUSH
44371: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44375: LD_INT 6
44377: PPUSH
44378: LD_INT 1
44380: PPUSH
44381: LD_INT 1
44383: PPUSH
44384: LD_INT 0
44386: PPUSH
44387: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44391: LD_INT 3
44393: PPUSH
44394: LD_INT 1
44396: PPUSH
44397: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44401: LD_INT 97
44403: PPUSH
44404: LD_INT 91
44406: PPUSH
44407: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44411: LD_INT 22
44413: PUSH
44414: LD_INT 3
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 21
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PPUSH
44435: CALL_OW 69
44439: PPUSH
44440: CALL_OW 121
// wait ( 0 0$01 ) ;
44444: LD_INT 35
44446: PPUSH
44447: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44451: LD_INT 22
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 21
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PPUSH
44475: CALL_OW 69
44479: PPUSH
44480: LD_INT 124
44482: PPUSH
44483: LD_INT 98
44485: PPUSH
44486: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44490: LD_INT 22
44492: PUSH
44493: LD_INT 6
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 21
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PPUSH
44514: CALL_OW 69
44518: PPUSH
44519: CALL_OW 121
// wait ( 0 0$01 ) ;
44523: LD_INT 35
44525: PPUSH
44526: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44530: LD_INT 22
44532: PUSH
44533: LD_INT 6
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 21
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PPUSH
44554: CALL_OW 69
44558: PPUSH
44559: LD_INT 124
44561: PPUSH
44562: LD_INT 98
44564: PPUSH
44565: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44569: LD_INT 22
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 21
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: LD_INT 54
44594: PUSH
44595: EMPTY
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: PPUSH
44607: CALL_OW 69
44611: PPUSH
44612: LD_INT 124
44614: PPUSH
44615: LD_INT 98
44617: PPUSH
44618: CALL_OW 114
// wait ( 0 0$4 ) ;
44622: LD_INT 140
44624: PPUSH
44625: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44629: LD_INT 124
44631: PPUSH
44632: LD_INT 98
44634: PPUSH
44635: CALL_OW 84
// if SikorskyStatus = 1 then
44639: LD_EXP 21
44643: PUSH
44644: LD_INT 1
44646: EQUAL
44647: IFFALSE 44661
// begin Say ( Sikorski , D9-Sik-1 ) ;
44649: LD_EXP 16
44653: PPUSH
44654: LD_STRING D9-Sik-1
44656: PPUSH
44657: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44661: LD_EXP 21
44665: PUSH
44666: LD_INT 2
44668: EQUAL
44669: IFFALSE 44690
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44671: LD_EXP 23
44675: PPUSH
44676: LD_STRING D8b-Pow-1
44678: PPUSH
44679: CALL_OW 94
// YouLost ( Dismissed ) ;
44683: LD_STRING Dismissed
44685: PPUSH
44686: CALL_OW 104
// end ; p := 0 0$0 ;
44690: LD_ADDR_VAR 0 2
44694: PUSH
44695: LD_INT 0
44697: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44698: LD_INT 35
44700: PPUSH
44701: CALL_OW 67
// p := p + 0 0$1 ;
44705: LD_ADDR_VAR 0 2
44709: PUSH
44710: LD_VAR 0 2
44714: PUSH
44715: LD_INT 35
44717: PLUS
44718: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44719: LD_INT 23
44721: PUSH
44722: LD_INT 3
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 21
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 24
44741: PUSH
44742: LD_INT 250
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: PPUSH
44754: CALL_OW 69
44758: PUSH
44759: LD_INT 0
44761: EQUAL
44762: PUSH
44763: LD_VAR 0 2
44767: PUSH
44768: LD_INT 245
44770: GREATEREQUAL
44771: OR
44772: IFFALSE 44698
// FinishMission ;
44774: CALL 44781 0 0
// end ;
44778: PPOPN 2
44780: END
// export function FinishMission ; var tmp ; begin
44781: LD_INT 0
44783: PPUSH
44784: PPUSH
// AddMedal ( med1 , 1 ) ;
44785: LD_STRING med1
44787: PPUSH
44788: LD_INT 1
44790: PPUSH
44791: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44795: LD_STRING med2
44797: PPUSH
44798: LD_INT 1
44800: PPUSH
44801: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44805: LD_STRING perfect
44807: PPUSH
44808: LD_INT 1
44810: PPUSH
44811: CALL_OW 101
// GiveMedals ( Main ) ;
44815: LD_STRING Main
44817: PPUSH
44818: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44822: LD_INT 22
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 23
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 21
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 25
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 25
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 25
44877: PUSH
44878: LD_INT 3
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 25
44887: PUSH
44888: LD_INT 4
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: PPUSH
44908: CALL_OW 69
44912: PPUSH
44913: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44917: LD_EXP 1
44921: PPUSH
44922: LD_EXP 42
44926: PUSH
44927: LD_STRING JMM
44929: STR
44930: PPUSH
44931: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44935: LD_EXP 2
44939: PPUSH
44940: LD_EXP 42
44944: PUSH
44945: LD_STRING Brown
44947: STR
44948: PPUSH
44949: CALL 8145 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44953: LD_EXP 3
44957: PPUSH
44958: LD_EXP 42
44962: PUSH
44963: LD_STRING Donaldson
44965: STR
44966: PPUSH
44967: CALL 8145 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44971: LD_EXP 4
44975: PPUSH
44976: LD_EXP 42
44980: PUSH
44981: LD_STRING Bobby
44983: STR
44984: PPUSH
44985: CALL 8145 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44989: LD_EXP 5
44993: PPUSH
44994: LD_EXP 42
44998: PUSH
44999: LD_STRING Cyrus
45001: STR
45002: PPUSH
45003: CALL 8145 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45007: LD_EXP 6
45011: PPUSH
45012: LD_EXP 42
45016: PUSH
45017: LD_STRING Lisa
45019: STR
45020: PPUSH
45021: CALL 8145 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45025: LD_EXP 7
45029: PPUSH
45030: LD_EXP 42
45034: PUSH
45035: LD_STRING Frank
45037: STR
45038: PPUSH
45039: CALL 8145 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45043: LD_EXP 8
45047: PPUSH
45048: LD_EXP 42
45052: PUSH
45053: LD_STRING Gladstone
45055: STR
45056: PPUSH
45057: CALL 8145 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45061: LD_EXP 9
45065: PPUSH
45066: LD_EXP 42
45070: PUSH
45071: LD_STRING Kikuchi
45073: STR
45074: PPUSH
45075: CALL 8145 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45079: LD_EXP 14
45083: PPUSH
45084: LD_EXP 42
45088: PUSH
45089: LD_STRING Denis
45091: STR
45092: PPUSH
45093: CALL 8145 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45097: LD_EXP 15
45101: PPUSH
45102: LD_EXP 42
45106: PUSH
45107: LD_STRING Joan
45109: STR
45110: PPUSH
45111: CALL 8145 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45115: LD_EXP 10
45119: PPUSH
45120: LD_EXP 42
45124: PUSH
45125: LD_STRING Khatam
45127: STR
45128: PPUSH
45129: CALL 8145 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45133: LD_EXP 13
45137: PPUSH
45138: LD_EXP 42
45142: PUSH
45143: LD_STRING Houten
45145: STR
45146: PPUSH
45147: CALL 8145 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45151: LD_INT 50
45153: PUSH
45154: EMPTY
45155: LIST
45156: PUSH
45157: LD_INT 22
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 21
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 25
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 25
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 25
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 25
45212: PUSH
45213: LD_INT 4
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: PPUSH
45233: CALL_OW 69
45237: PUSH
45238: LD_EXP 1
45242: PUSH
45243: LD_EXP 2
45247: PUSH
45248: LD_EXP 3
45252: PUSH
45253: LD_EXP 4
45257: PUSH
45258: LD_EXP 5
45262: PUSH
45263: LD_EXP 6
45267: PUSH
45268: LD_EXP 7
45272: PUSH
45273: LD_EXP 8
45277: PUSH
45278: LD_EXP 9
45282: PUSH
45283: LD_EXP 14
45287: PUSH
45288: LD_EXP 15
45292: PUSH
45293: LD_EXP 13
45297: PUSH
45298: LD_EXP 10
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: DIFF
45318: PPUSH
45319: LD_STRING 08_other_survivors
45321: PPUSH
45322: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45326: LD_INT 23
45328: PPUSH
45329: CALL 45342 0 1
// YouWin ;
45333: CALL_OW 103
// end ;
45337: LD_VAR 0 1
45341: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45342: LD_INT 0
45344: PPUSH
45345: PPUSH
45346: PPUSH
45347: PPUSH
// gammaBase = [ ] ;
45348: LD_ADDR_VAR 0 4
45352: PUSH
45353: EMPTY
45354: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45355: LD_ADDR_VAR 0 5
45359: PUSH
45360: LD_VAR 0 1
45364: PPUSH
45365: LD_INT 22
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 21
45377: PUSH
45378: LD_INT 3
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 50
45387: PUSH
45388: EMPTY
45389: LIST
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: LIST
45395: PPUSH
45396: CALL_OW 70
45400: ST_TO_ADDR
// for i in buildings do
45401: LD_ADDR_VAR 0 3
45405: PUSH
45406: LD_VAR 0 5
45410: PUSH
45411: FOR_IN
45412: IFFALSE 45849
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45414: LD_VAR 0 3
45418: PPUSH
45419: CALL_OW 266
45423: PUSH
45424: LD_INT 6
45426: PUSH
45427: LD_INT 7
45429: PUSH
45430: LD_INT 8
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: IN
45438: IFFALSE 45552
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45440: LD_ADDR_VAR 0 4
45444: PUSH
45445: LD_VAR 0 4
45449: PUSH
45450: LD_VAR 0 3
45454: PPUSH
45455: CALL_OW 266
45459: PUSH
45460: LD_VAR 0 3
45464: PPUSH
45465: CALL_OW 250
45469: PUSH
45470: LD_VAR 0 3
45474: PPUSH
45475: CALL_OW 251
45479: PUSH
45480: LD_VAR 0 3
45484: PPUSH
45485: CALL_OW 254
45489: PUSH
45490: LD_VAR 0 3
45494: PPUSH
45495: CALL_OW 267
45499: PUSH
45500: LD_VAR 0 3
45504: PPUSH
45505: CALL_OW 248
45509: PUSH
45510: LD_VAR 0 3
45514: PPUSH
45515: LD_INT 1
45517: PPUSH
45518: CALL_OW 268
45522: PUSH
45523: LD_VAR 0 3
45527: PPUSH
45528: LD_INT 2
45530: PPUSH
45531: CALL_OW 268
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: PUSH
45546: EMPTY
45547: LIST
45548: ADD
45549: ST_TO_ADDR
45550: GO 45847
// if GetBType ( i ) = b_bunker then
45552: LD_VAR 0 3
45556: PPUSH
45557: CALL_OW 266
45561: PUSH
45562: LD_INT 32
45564: EQUAL
45565: IFFALSE 45662
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45567: LD_ADDR_VAR 0 4
45571: PUSH
45572: LD_VAR 0 4
45576: PUSH
45577: LD_VAR 0 3
45581: PPUSH
45582: CALL_OW 266
45586: PUSH
45587: LD_VAR 0 3
45591: PPUSH
45592: CALL_OW 250
45596: PUSH
45597: LD_VAR 0 3
45601: PPUSH
45602: CALL_OW 251
45606: PUSH
45607: LD_VAR 0 3
45611: PPUSH
45612: CALL_OW 254
45616: PUSH
45617: LD_VAR 0 3
45621: PPUSH
45622: CALL_OW 267
45626: PUSH
45627: LD_VAR 0 3
45631: PPUSH
45632: CALL_OW 248
45636: PUSH
45637: LD_VAR 0 3
45641: PPUSH
45642: CALL_OW 269
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: ADD
45659: ST_TO_ADDR
45660: GO 45847
// if GetBType ( i ) = b_factory then
45662: LD_VAR 0 3
45666: PPUSH
45667: CALL_OW 266
45671: PUSH
45672: LD_INT 3
45674: EQUAL
45675: IFFALSE 45765
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45677: LD_ADDR_VAR 0 4
45681: PUSH
45682: LD_VAR 0 4
45686: PPUSH
45687: LD_INT 1
45689: PPUSH
45690: LD_VAR 0 3
45694: PPUSH
45695: CALL_OW 266
45699: PUSH
45700: LD_VAR 0 3
45704: PPUSH
45705: CALL_OW 250
45709: PUSH
45710: LD_VAR 0 3
45714: PPUSH
45715: CALL_OW 251
45719: PUSH
45720: LD_VAR 0 3
45724: PPUSH
45725: CALL_OW 254
45729: PUSH
45730: LD_VAR 0 3
45734: PPUSH
45735: CALL_OW 267
45739: PUSH
45740: LD_VAR 0 3
45744: PPUSH
45745: CALL_OW 248
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: PPUSH
45758: CALL_OW 2
45762: ST_TO_ADDR
45763: GO 45847
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45765: LD_ADDR_VAR 0 4
45769: PUSH
45770: LD_VAR 0 4
45774: PUSH
45775: LD_VAR 0 3
45779: PPUSH
45780: CALL_OW 266
45784: PUSH
45785: LD_VAR 0 3
45789: PPUSH
45790: CALL_OW 250
45794: PUSH
45795: LD_VAR 0 3
45799: PPUSH
45800: CALL_OW 251
45804: PUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: CALL_OW 254
45814: PUSH
45815: LD_VAR 0 3
45819: PPUSH
45820: CALL_OW 267
45824: PUSH
45825: LD_VAR 0 3
45829: PPUSH
45830: CALL_OW 248
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: PUSH
45843: EMPTY
45844: LIST
45845: ADD
45846: ST_TO_ADDR
// end ;
45847: GO 45411
45849: POP
45850: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45851: LD_VAR 0 4
45855: PPUSH
45856: LD_STRING 08_GammaBase
45858: PPUSH
45859: CALL_OW 39
// end ;
45863: LD_VAR 0 2
45867: RET
