// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyBuilds ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 40
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 41
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 37
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyBuilds = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 35
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// defenders_list = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// varEvent1 = 0 ;
 126: LD_ADDR_EXP 39
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// timerStatus = 0 ;
 134: LD_ADDR_EXP 34
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 142: LD_ADDR_EXP 38
 146: PUSH
 147: LD_INT 18
 149: PUSH
 150: LD_INT 17
 152: PUSH
 153: LD_INT 15
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_OWVAR 67
 165: ARRAY
 166: ST_TO_ADDR
// debugMode = 0 ;
 167: LD_ADDR_EXP 42
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// PrepareDifficulty ;
 175: CALL 4974 0 0
// PrepareBase ;
 179: CALL 690 0 0
// PrepareHeroes ;
 183: CALL 310 0 0
// PrepareSoldiers ;
 187: CALL 535 0 0
// PrepareRussianCommander ;
 191: CALL 3779 0 0
// PrepareRussians ;
 195: CALL 4097 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 199: LD_INT 22
 201: PUSH
 202: LD_INT 3
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 25
 211: PUSH
 212: LD_INT 2
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PPUSH
 223: CALL_OW 69
 227: PPUSH
 228: LD_INT 0
 230: PPUSH
 231: LD_INT 90
 233: PPUSH
 234: LD_INT 86
 236: PPUSH
 237: LD_INT 3
 239: PPUSH
 240: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 244: LD_INT 3
 246: PPUSH
 247: LD_INT 24
 249: PPUSH
 250: LD_INT 3
 252: PPUSH
 253: LD_EXP 24
 257: PPUSH
 258: LD_EXP 25
 262: PPUSH
 263: CALL_OW 12
 267: PPUSH
 268: LD_INT 6
 270: PPUSH
 271: LD_INT 4
 273: PPUSH
 274: CALL 6192 0 6
// PrepareCutsceneAttack ;
 278: CALL 3831 0 0
// end ;
 282: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 283: LD_EXP 42
 287: PUSH
 288: LD_INT 1
 290: EQUAL
 291: IFFALSE 307
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// fogoff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// end ; end_of_file
 307: PPOPN 1
 309: END
// export function PrepareHeroes ; var i ; begin
 310: LD_INT 0
 312: PPUSH
 313: PPUSH
// uc_side = 1 ;
 314: LD_ADDR_OWVAR 20
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// uc_nation = 1 ;
 322: LD_ADDR_OWVAR 21
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// if gammaCommander = 1 then
 330: LD_EXP 11
 334: PUSH
 335: LD_INT 1
 337: EQUAL
 338: IFFALSE 371
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 340: LD_ADDR_EXP 3
 344: PUSH
 345: LD_STRING Donaldson
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: CALL 4515 0 2
 355: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 356: LD_EXP 3
 360: PPUSH
 361: LD_INT 5
 363: PPUSH
 364: LD_INT 0
 366: PPUSH
 367: CALL_OW 49
// end ; if gammaCommander = 2 then
 371: LD_EXP 11
 375: PUSH
 376: LD_INT 2
 378: EQUAL
 379: IFFALSE 412
// begin Brown = PrepareUnit ( Brown , true ) ;
 381: LD_ADDR_EXP 2
 385: PUSH
 386: LD_STRING Brown
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: CALL 4515 0 2
 396: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 397: LD_EXP 2
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: LD_INT 0
 407: PPUSH
 408: CALL_OW 49
// end ; if gammaCommander = 3 then
 412: LD_EXP 11
 416: PUSH
 417: LD_INT 3
 419: EQUAL
 420: IFFALSE 453
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 422: LD_ADDR_EXP 12
 426: PUSH
 427: LD_STRING VanHouten
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL 4515 0 2
 437: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 438: LD_EXP 12
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 453: LD_ADDR_EXP 21
 457: PUSH
 458: LD_STRING Harisson
 460: PPUSH
 461: LD_INT 0
 463: PPUSH
 464: CALL 4515 0 2
 468: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 469: LD_ADDR_EXP 22
 473: PUSH
 474: LD_STRING Powell
 476: PPUSH
 477: LD_INT 0
 479: PPUSH
 480: CALL 4515 0 2
 484: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 485: LD_ADDR_EXP 10
 489: PUSH
 490: LD_STRING 07_othersGamma
 492: PPUSH
 493: CALL_OW 31
 497: ST_TO_ADDR
// for i in others_gamma do
 498: LD_ADDR_VAR 0 2
 502: PUSH
 503: LD_EXP 10
 507: PUSH
 508: FOR_IN
 509: IFFALSE 528
// PlaceUnitArea ( i , GammaSpawn , false ) ;
 511: LD_VAR 0 2
 515: PPUSH
 516: LD_INT 5
 518: PPUSH
 519: LD_INT 0
 521: PPUSH
 522: CALL_OW 49
 526: GO 508
 528: POP
 529: POP
// end ;
 530: LD_VAR 0 1
 534: RET
// export function PrepareSoldiers ; var i ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// uc_side = 1 ;
 539: LD_ADDR_OWVAR 20
 543: PUSH
 544: LD_INT 1
 546: ST_TO_ADDR
// uc_nation = 1 ;
 547: LD_ADDR_OWVAR 21
 551: PUSH
 552: LD_INT 1
 554: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: LD_INT 22
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 30
 572: PUSH
 573: LD_INT 32
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: PPUSH
 584: CALL_OW 69
 588: PUSH
 589: FOR_IN
 590: IFFALSE 618
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 592: LD_INT 1
 594: PPUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_VAR 0 2
 602: PPUSH
 603: LD_INT 4
 605: PPUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 4864 0 6
 616: GO 589
 618: POP
 619: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
 620: LD_ADDR_VAR 0 2
 624: PUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 30
 637: PUSH
 638: LD_INT 31
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: FOR_IN
 655: IFFALSE 683
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 657: LD_INT 1
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_VAR 0 2
 667: PPUSH
 668: LD_INT 4
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 4864 0 6
 681: GO 654
 683: POP
 684: POP
// end ;
 685: LD_VAR 0 1
 689: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
 690: LD_INT 0
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
 696: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
 697: LD_INT 71
 699: PPUSH
 700: LD_INT 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
 710: LD_ADDR_VAR 0 2
 714: PUSH
 715: LD_STRING GammaBase
 717: PPUSH
 718: EMPTY
 719: PPUSH
 720: CALL_OW 30
 724: ST_TO_ADDR
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := 1 ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// for i in blist do
 741: LD_ADDR_VAR 0 3
 745: PUSH
 746: LD_VAR 0 2
 750: PUSH
 751: FOR_IN
 752: IFFALSE 1094
// begin bc_type := i [ 1 ] ;
 754: LD_ADDR_OWVAR 42
 758: PUSH
 759: LD_VAR 0 3
 763: PUSH
 764: LD_INT 1
 766: ARRAY
 767: ST_TO_ADDR
// bc_level := i [ 5 ] ;
 768: LD_ADDR_OWVAR 43
 772: PUSH
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 5
 780: ARRAY
 781: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
 782: LD_VAR 0 3
 786: PUSH
 787: LD_INT 1
 789: ARRAY
 790: PUSH
 791: LD_INT 7
 793: PUSH
 794: LD_INT 8
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: IN
 801: IFFALSE 825
// begin bc_kind1 := i [ 7 ] ;
 803: LD_ADDR_OWVAR 44
 807: PUSH
 808: LD_VAR 0 3
 812: PUSH
 813: LD_INT 7
 815: ARRAY
 816: ST_TO_ADDR
// bc_kind2 := 15 ;
 817: LD_ADDR_OWVAR 45
 821: PUSH
 822: LD_INT 15
 824: ST_TO_ADDR
// end ; if bc_type = b_depot then
 825: LD_OWVAR 42
 829: PUSH
 830: LD_INT 0
 832: EQUAL
 833: IFFALSE 951
// begin bc_type := b_warehouse ;
 835: LD_ADDR_OWVAR 42
 839: PUSH
 840: LD_INT 1
 842: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 843: LD_ADDR_EXP 36
 847: PUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 2
 855: ARRAY
 856: PPUSH
 857: LD_VAR 0 3
 861: PUSH
 862: LD_INT 3
 864: ARRAY
 865: PPUSH
 866: LD_VAR 0 3
 870: PUSH
 871: LD_INT 4
 873: ARRAY
 874: PPUSH
 875: CALL_OW 47
 879: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
 880: LD_EXP 36
 884: PPUSH
 885: LD_STRING gamma
 887: PPUSH
 888: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
 892: LD_EXP 36
 896: PPUSH
 897: CALL_OW 274
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 200
 907: PUSH
 908: LD_INT 150
 910: PUSH
 911: LD_INT 100
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_OWVAR 67
 923: ARRAY
 924: PPUSH
 925: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
 929: LD_EXP 36
 933: PPUSH
 934: CALL_OW 274
 938: PPUSH
 939: LD_INT 2
 941: PPUSH
 942: LD_INT 200
 944: PPUSH
 945: CALL_OW 277
// end else
 949: GO 1059
// begin if bc_type = 4 then
 951: LD_OWVAR 42
 955: PUSH
 956: LD_INT 4
 958: EQUAL
 959: IFFALSE 1008
// begin bc_type = 5 ;
 961: LD_ADDR_OWVAR 42
 965: PUSH
 966: LD_INT 5
 968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 969: LD_ADDR_VAR 0 4
 973: PUSH
 974: LD_VAR 0 3
 978: PUSH
 979: LD_INT 2
 981: ARRAY
 982: PPUSH
 983: LD_VAR 0 3
 987: PUSH
 988: LD_INT 3
 990: ARRAY
 991: PPUSH
 992: LD_VAR 0 3
 996: PUSH
 997: LD_INT 4
 999: ARRAY
1000: PPUSH
1001: CALL_OW 47
1005: ST_TO_ADDR
// end else
1006: GO 1059
// begin bc_type := i [ 1 ] ;
1008: LD_ADDR_OWVAR 42
1012: PUSH
1013: LD_VAR 0 3
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1022: LD_ADDR_VAR 0 4
1026: PUSH
1027: LD_VAR 0 3
1031: PUSH
1032: LD_INT 2
1034: ARRAY
1035: PPUSH
1036: LD_VAR 0 3
1040: PUSH
1041: LD_INT 3
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_INT 4
1052: ARRAY
1053: PPUSH
1054: CALL_OW 47
1058: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1059: LD_VAR 0 4
1063: PPUSH
1064: CALL_OW 266
1068: PUSH
1069: LD_INT 32
1071: EQUAL
1072: IFFALSE 1092
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1074: LD_VAR 0 4
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_INT 7
1086: ARRAY
1087: PPUSH
1088: CALL_OW 431
// end ;
1092: GO 751
1094: POP
1095: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1096: LD_STRING 06_remoteVehs_1
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 30
1106: PUSH
1107: LD_INT 1
1109: EQUAL
1110: IFFALSE 1314
// begin bc_type = 36 ;
1112: LD_ADDR_OWVAR 42
1116: PUSH
1117: LD_INT 36
1119: ST_TO_ADDR
// bc_level = 4 ;
1120: LD_ADDR_OWVAR 43
1124: PUSH
1125: LD_INT 4
1127: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1128: LD_INT 62
1130: PPUSH
1131: LD_INT 12
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1141: LD_ADDR_VAR 0 3
1145: PUSH
1146: DOUBLE
1147: LD_INT 1
1149: DEC
1150: ST_TO_ADDR
1151: LD_INT 3
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: PUSH
1165: LD_OWVAR 67
1169: ARRAY
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1312
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1174: LD_ADDR_OWVAR 37
1178: PUSH
1179: LD_INT 3
1181: PUSH
1182: LD_INT 2
1184: PUSH
1185: LD_INT 3
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: CALL_OW 12
1202: ARRAY
1203: PUSH
1204: LD_INT 2
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_OWVAR 67
1216: ARRAY
1217: ST_TO_ADDR
// vc_engine = 1 ;
1218: LD_ADDR_OWVAR 39
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// vc_control = 2 ;
1226: LD_ADDR_OWVAR 38
1230: PUSH
1231: LD_INT 2
1233: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1234: LD_ADDR_OWVAR 40
1238: PUSH
1239: LD_INT 3
1241: PUSH
1242: LD_INT 4
1244: PUSH
1245: LD_INT 5
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: PUSH
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 3
1258: PPUSH
1259: CALL_OW 12
1263: ARRAY
1264: ST_TO_ADDR
// veh = CreateVehicle ;
1265: LD_ADDR_VAR 0 5
1269: PUSH
1270: CALL_OW 45
1274: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
1275: LD_VAR 0 5
1279: PPUSH
1280: LD_EXP 36
1284: PPUSH
1285: CALL_OW 250
1289: PPUSH
1290: LD_EXP 36
1294: PPUSH
1295: CALL_OW 251
1299: PPUSH
1300: LD_INT 7
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 50
// end ;
1310: GO 1171
1312: POP
1313: POP
// end ; end ;
1314: LD_VAR 0 1
1318: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
1319: LD_INT 0
1321: PPUSH
1322: PPUSH
1323: PPUSH
1324: PPUSH
// uc_side = 1 ;
1325: LD_ADDR_OWVAR 20
1329: PUSH
1330: LD_INT 1
1332: ST_TO_ADDR
// uc_nation = 1 ;
1333: LD_ADDR_OWVAR 21
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
1341: LD_ADDR_EXP 13
1345: PUSH
1346: LD_STRING 06c_Denis
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 4515 0 2
1356: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
1357: LD_EXP 13
1361: PPUSH
1362: LD_INT 4
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// if IsOk ( Denis ) then
1372: LD_EXP 13
1376: PPUSH
1377: CALL_OW 302
1381: IFFALSE 1397
// i = i + 1 ;
1383: LD_ADDR_VAR 0 2
1387: PUSH
1388: LD_VAR 0 2
1392: PUSH
1393: LD_INT 1
1395: PLUS
1396: ST_TO_ADDR
// Joan = PrepareUnit ( 06c_Joan , true ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING 06c_Joan
1404: PPUSH
1405: LD_INT 1
1407: PPUSH
1408: CALL 4515 0 2
1412: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
1413: LD_EXP 14
1417: PPUSH
1418: LD_INT 4
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
// if IsOk ( Joan ) then
1428: LD_EXP 14
1432: PPUSH
1433: CALL_OW 302
1437: IFFALSE 1453
// i = i + 1 ;
1439: LD_ADDR_VAR 0 2
1443: PUSH
1444: LD_VAR 0 2
1448: PUSH
1449: LD_INT 1
1451: PLUS
1452: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
1453: LD_STRING GladstoneIn07
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 0
1466: EQUAL
1467: IFFALSE 1514
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
1469: LD_ADDR_EXP 8
1473: PUSH
1474: LD_STRING 06c_Gladstone
1476: PPUSH
1477: LD_INT 1
1479: PPUSH
1480: CALL 4515 0 2
1484: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
1485: LD_EXP 8
1489: PPUSH
1490: LD_INT 4
1492: PPUSH
1493: LD_INT 0
1495: PPUSH
1496: CALL_OW 49
// i = i + 1 ;
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_VAR 0 2
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ST_TO_ADDR
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_STRING OtherStayInDelta
1521: PPUSH
1522: CALL_OW 31
1526: ST_TO_ADDR
// for j = 3 to 3 + 3 - i do
1527: LD_ADDR_VAR 0 3
1531: PUSH
1532: DOUBLE
1533: LD_INT 3
1535: DEC
1536: ST_TO_ADDR
1537: LD_INT 3
1539: PUSH
1540: LD_INT 3
1542: PLUS
1543: PUSH
1544: LD_VAR 0 2
1548: MINUS
1549: PUSH
1550: FOR_TO
1551: IFFALSE 1576
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
1553: LD_VAR 0 4
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PPUSH
1564: LD_INT 4
1566: PPUSH
1567: LD_INT 0
1569: PPUSH
1570: CALL_OW 49
1574: GO 1550
1576: POP
1577: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
1578: LD_ADDR_VAR 0 4
1582: PUSH
1583: LD_STRING 06_other_apemans
1585: PPUSH
1586: CALL_OW 31
1590: ST_TO_ADDR
// if other >= 5 then
1591: LD_VAR 0 4
1595: PUSH
1596: LD_INT 5
1598: GREATEREQUAL
1599: IFFALSE 1644
// begin for i := 1 to 5 do
1601: LD_ADDR_VAR 0 2
1605: PUSH
1606: DOUBLE
1607: LD_INT 1
1609: DEC
1610: ST_TO_ADDR
1611: LD_INT 5
1613: PUSH
1614: FOR_TO
1615: IFFALSE 1640
// begin PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
1617: LD_VAR 0 4
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PPUSH
1628: LD_INT 4
1630: PPUSH
1631: LD_INT 0
1633: PPUSH
1634: CALL_OW 49
// end ;
1638: GO 1614
1640: POP
1641: POP
// end else
1642: GO 1676
// begin for i in other do
1644: LD_ADDR_VAR 0 2
1648: PUSH
1649: LD_VAR 0 4
1653: PUSH
1654: FOR_IN
1655: IFFALSE 1674
// PlaceUnitArea ( i , GammaSupport , false ) ;
1657: LD_VAR 0 2
1661: PPUSH
1662: LD_INT 4
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
1672: GO 1654
1674: POP
1675: POP
// end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
1676: LD_INT 4
1678: PPUSH
1679: LD_INT 22
1681: PUSH
1682: LD_INT 1
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 21
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PPUSH
1703: CALL_OW 70
1707: PPUSH
1708: LD_INT 53
1710: PPUSH
1711: LD_INT 19
1713: PPUSH
1714: CALL_OW 111
// firstAttack = 1 ;
1718: LD_ADDR_EXP 32
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// end ;
1726: LD_VAR 0 1
1730: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
1731: LD_INT 0
1733: PPUSH
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_STRING 07_vehicles
1745: PPUSH
1746: EMPTY
1747: PPUSH
1748: CALL_OW 30
1752: ST_TO_ADDR
// uc_side = 1 ;
1753: LD_ADDR_OWVAR 20
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// uc_nation = 1 ;
1761: LD_ADDR_OWVAR 21
1765: PUSH
1766: LD_INT 1
1768: ST_TO_ADDR
// if vehicles > 0 then
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 0
1776: GREATER
1777: IFFALSE 1916
// begin for i = 1 to vehicles do
1779: LD_ADDR_VAR 0 2
1783: PUSH
1784: DOUBLE
1785: LD_INT 1
1787: DEC
1788: ST_TO_ADDR
1789: LD_VAR 0 4
1793: PUSH
1794: FOR_TO
1795: IFFALSE 1914
// begin vc_chassis = vehicles [ i ] ;
1797: LD_ADDR_OWVAR 37
1801: PUSH
1802: LD_VAR 0 4
1806: PUSH
1807: LD_VAR 0 2
1811: ARRAY
1812: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_VAR 0 4
1822: PUSH
1823: LD_VAR 0 2
1827: PUSH
1828: LD_INT 1
1830: PLUS
1831: ARRAY
1832: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
1833: LD_ADDR_OWVAR 38
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: LD_VAR 0 2
1847: PUSH
1848: LD_INT 2
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
1853: LD_ADDR_OWVAR 40
1857: PUSH
1858: LD_VAR 0 4
1862: PUSH
1863: LD_VAR 0 2
1867: PUSH
1868: LD_INT 3
1870: PLUS
1871: ARRAY
1872: ST_TO_ADDR
// veh = CreateVehicle ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
1883: LD_VAR 0 5
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// i = i + 3 ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_INT 3
1910: PLUS
1911: ST_TO_ADDR
// end ;
1912: GO 1794
1914: POP
1915: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
1916: LD_ADDR_EXP 1
1920: PUSH
1921: LD_EXP 41
1925: PUSH
1926: LD_STRING JMM
1928: STR
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: CALL 4515 0 2
1937: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
1938: LD_EXP 11
1942: PUSH
1943: LD_INT 1
1945: EQUAL
1946: PUSH
1947: LD_EXP 11
1951: PUSH
1952: LD_INT 3
1954: EQUAL
1955: OR
1956: IFFALSE 1980
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
1958: LD_ADDR_EXP 2
1962: PUSH
1963: LD_EXP 41
1967: PUSH
1968: LD_STRING Brown
1970: STR
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 4515 0 2
1979: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
1980: LD_EXP 11
1984: PUSH
1985: LD_INT 2
1987: EQUAL
1988: PUSH
1989: LD_EXP 11
1993: PUSH
1994: LD_INT 3
1996: EQUAL
1997: OR
1998: IFFALSE 2022
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
2000: LD_ADDR_EXP 3
2004: PUSH
2005: LD_EXP 41
2009: PUSH
2010: LD_STRING Donaldson
2012: STR
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 4515 0 2
2021: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2022: LD_ADDR_EXP 4
2026: PUSH
2027: LD_EXP 41
2031: PUSH
2032: LD_STRING Bobby
2034: STR
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL 4515 0 2
2043: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2044: LD_ADDR_EXP 5
2048: PUSH
2049: LD_EXP 41
2053: PUSH
2054: LD_STRING Cyrus
2056: STR
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL 4515 0 2
2065: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2066: LD_ADDR_EXP 6
2070: PUSH
2071: LD_EXP 41
2075: PUSH
2076: LD_STRING Lisa
2078: STR
2079: PPUSH
2080: LD_INT 1
2082: PPUSH
2083: CALL 4515 0 2
2087: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2088: LD_ADDR_EXP 7
2092: PUSH
2093: LD_EXP 41
2097: PUSH
2098: LD_STRING Frank
2100: STR
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: CALL 4515 0 2
2109: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
2110: LD_ADDR_EXP 8
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_STRING Gladstone
2122: STR
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL 4515 0 2
2131: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
2132: LD_ADDR_EXP 9
2136: PUSH
2137: LD_EXP 41
2141: PUSH
2142: LD_STRING Kikuchi
2144: STR
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL 4515 0 2
2153: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2154: LD_EXP 11
2158: PUSH
2159: LD_INT 1
2161: EQUAL
2162: PUSH
2163: LD_EXP 11
2167: PUSH
2168: LD_INT 3
2170: EQUAL
2171: OR
2172: IFFALSE 2189
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2174: LD_EXP 2
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
2189: LD_EXP 11
2193: PUSH
2194: LD_INT 2
2196: EQUAL
2197: PUSH
2198: LD_EXP 11
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: OR
2207: IFFALSE 2224
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2209: LD_EXP 3
2213: PPUSH
2214: LD_INT 4
2216: PPUSH
2217: LD_INT 0
2219: PPUSH
2220: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2224: LD_ADDR_VAR 0 5
2228: PUSH
2229: LD_INT 4
2231: PPUSH
2232: LD_INT 22
2234: PUSH
2235: LD_INT 1
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 21
2244: PUSH
2245: LD_INT 2
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 58
2254: PUSH
2255: EMPTY
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PPUSH
2263: CALL_OW 70
2267: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2268: LD_ADDR_EXP 1
2272: PUSH
2273: LD_EXP 41
2277: PUSH
2278: LD_STRING JMM
2280: STR
2281: PPUSH
2282: LD_INT 1
2284: PPUSH
2285: CALL 4515 0 2
2289: ST_TO_ADDR
// if veh > 0 then
2290: LD_VAR 0 5
2294: PUSH
2295: LD_INT 0
2297: GREATER
2298: IFFALSE 2320
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
2300: LD_EXP 1
2304: PPUSH
2305: LD_VAR 0 5
2309: PUSH
2310: LD_INT 1
2312: ARRAY
2313: PPUSH
2314: CALL_OW 52
// end else
2318: GO 2335
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
2320: LD_EXP 1
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_INT 0
2330: PPUSH
2331: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2335: LD_ADDR_VAR 0 5
2339: PUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 22
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 21
2355: PUSH
2356: LD_INT 2
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 58
2365: PUSH
2366: EMPTY
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: PPUSH
2374: CALL_OW 70
2378: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2379: LD_ADDR_EXP 4
2383: PUSH
2384: LD_EXP 41
2388: PUSH
2389: LD_STRING Bobby
2391: STR
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: CALL 4515 0 2
2400: ST_TO_ADDR
// if veh > 0 then
2401: LD_VAR 0 5
2405: PUSH
2406: LD_INT 0
2408: GREATER
2409: IFFALSE 2431
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
2411: LD_EXP 4
2415: PPUSH
2416: LD_VAR 0 5
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: PPUSH
2425: CALL_OW 52
// end else
2429: GO 2446
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2431: LD_EXP 4
2435: PPUSH
2436: LD_INT 4
2438: PPUSH
2439: LD_INT 0
2441: PPUSH
2442: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2446: LD_ADDR_VAR 0 5
2450: PUSH
2451: LD_INT 4
2453: PPUSH
2454: LD_INT 22
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 21
2466: PUSH
2467: LD_INT 2
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 58
2476: PUSH
2477: EMPTY
2478: LIST
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 70
2489: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2490: LD_ADDR_EXP 5
2494: PUSH
2495: LD_EXP 41
2499: PUSH
2500: LD_STRING Cyrus
2502: STR
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL 4515 0 2
2511: ST_TO_ADDR
// if veh > 0 then
2512: LD_VAR 0 5
2516: PUSH
2517: LD_INT 0
2519: GREATER
2520: IFFALSE 2542
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
2522: LD_EXP 5
2526: PPUSH
2527: LD_VAR 0 5
2531: PUSH
2532: LD_INT 1
2534: ARRAY
2535: PPUSH
2536: CALL_OW 52
// end else
2540: GO 2557
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2542: LD_EXP 5
2546: PPUSH
2547: LD_INT 4
2549: PPUSH
2550: LD_INT 0
2552: PPUSH
2553: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2557: LD_ADDR_VAR 0 5
2561: PUSH
2562: LD_INT 4
2564: PPUSH
2565: LD_INT 22
2567: PUSH
2568: LD_INT 1
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 21
2577: PUSH
2578: LD_INT 2
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 58
2587: PUSH
2588: EMPTY
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: LIST
2595: PPUSH
2596: CALL_OW 70
2600: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2601: LD_ADDR_EXP 6
2605: PUSH
2606: LD_EXP 41
2610: PUSH
2611: LD_STRING Lisa
2613: STR
2614: PPUSH
2615: LD_INT 1
2617: PPUSH
2618: CALL 4515 0 2
2622: ST_TO_ADDR
// if veh > 0 then
2623: LD_VAR 0 5
2627: PUSH
2628: LD_INT 0
2630: GREATER
2631: IFFALSE 2653
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
2633: LD_EXP 6
2637: PPUSH
2638: LD_VAR 0 5
2642: PUSH
2643: LD_INT 1
2645: ARRAY
2646: PPUSH
2647: CALL_OW 52
// end else
2651: GO 2668
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2653: LD_EXP 6
2657: PPUSH
2658: LD_INT 4
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2668: LD_ADDR_VAR 0 5
2672: PUSH
2673: LD_INT 4
2675: PPUSH
2676: LD_INT 22
2678: PUSH
2679: LD_INT 1
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PUSH
2686: LD_INT 21
2688: PUSH
2689: LD_INT 2
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 58
2698: PUSH
2699: EMPTY
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PPUSH
2707: CALL_OW 70
2711: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2712: LD_ADDR_EXP 7
2716: PUSH
2717: LD_EXP 41
2721: PUSH
2722: LD_STRING Frank
2724: STR
2725: PPUSH
2726: LD_INT 1
2728: PPUSH
2729: CALL 4515 0 2
2733: ST_TO_ADDR
// if veh > 0 then
2734: LD_VAR 0 5
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2764
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
2744: LD_EXP 7
2748: PPUSH
2749: LD_VAR 0 5
2753: PUSH
2754: LD_INT 1
2756: ARRAY
2757: PPUSH
2758: CALL_OW 52
// end else
2762: GO 2779
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
2764: LD_EXP 7
2768: PPUSH
2769: LD_INT 4
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_INT 4
2786: PPUSH
2787: LD_INT 22
2789: PUSH
2790: LD_INT 1
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 21
2799: PUSH
2800: LD_INT 2
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 58
2809: PUSH
2810: EMPTY
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
2823: LD_ADDR_EXP 8
2827: PUSH
2828: LD_EXP 41
2832: PUSH
2833: LD_STRING Gladstone
2835: STR
2836: PPUSH
2837: LD_INT 1
2839: PPUSH
2840: CALL 4515 0 2
2844: ST_TO_ADDR
// if veh > 0 then
2845: LD_VAR 0 5
2849: PUSH
2850: LD_INT 0
2852: GREATER
2853: IFFALSE 2875
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
2855: LD_EXP 8
2859: PPUSH
2860: LD_VAR 0 5
2864: PUSH
2865: LD_INT 1
2867: ARRAY
2868: PPUSH
2869: CALL_OW 52
// end else
2873: GO 2890
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2875: LD_EXP 8
2879: PPUSH
2880: LD_INT 4
2882: PPUSH
2883: LD_INT 0
2885: PPUSH
2886: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2890: LD_ADDR_VAR 0 5
2894: PUSH
2895: LD_INT 4
2897: PPUSH
2898: LD_INT 22
2900: PUSH
2901: LD_INT 1
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 21
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 58
2920: PUSH
2921: EMPTY
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 70
2933: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
2934: LD_ADDR_EXP 9
2938: PUSH
2939: LD_EXP 41
2943: PUSH
2944: LD_STRING Kikuchi
2946: STR
2947: PPUSH
2948: LD_INT 1
2950: PPUSH
2951: CALL 4515 0 2
2955: ST_TO_ADDR
// if veh > 0 then
2956: LD_VAR 0 5
2960: PUSH
2961: LD_INT 0
2963: GREATER
2964: IFFALSE 2986
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
2966: LD_EXP 9
2970: PPUSH
2971: LD_VAR 0 5
2975: PUSH
2976: LD_INT 1
2978: ARRAY
2979: PPUSH
2980: CALL_OW 52
// end else
2984: GO 3001
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
2986: LD_EXP 9
2990: PPUSH
2991: LD_INT 4
2993: PPUSH
2994: LD_INT 0
2996: PPUSH
2997: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
3001: LD_ADDR_VAR 0 3
3005: PUSH
3006: LD_STRING 07c_others
3008: PPUSH
3009: CALL_OW 31
3013: ST_TO_ADDR
// for i in other do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: LD_VAR 0 3
3023: PUSH
3024: FOR_IN
3025: IFFALSE 3118
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_INT 4
3034: PPUSH
3035: LD_INT 22
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 21
3047: PUSH
3048: LD_INT 2
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 58
3057: PUSH
3058: EMPTY
3059: LIST
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 70
3070: ST_TO_ADDR
// if veh > 0 then
3071: LD_VAR 0 5
3075: PUSH
3076: LD_INT 0
3078: GREATER
3079: IFFALSE 3101
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
3081: LD_VAR 0 2
3085: PPUSH
3086: LD_VAR 0 5
3090: PUSH
3091: LD_INT 1
3093: ARRAY
3094: PPUSH
3095: CALL_OW 52
// end else
3099: GO 3116
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
3101: LD_VAR 0 2
3105: PPUSH
3106: LD_INT 4
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL_OW 49
// end ; end ;
3116: GO 3024
3118: POP
3119: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
3120: LD_INT 4
3122: PPUSH
3123: LD_INT 22
3125: PUSH
3126: LD_INT 1
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PUSH
3133: EMPTY
3134: LIST
3135: PPUSH
3136: CALL_OW 70
3140: PPUSH
3141: LD_INT 53
3143: PPUSH
3144: LD_INT 19
3146: PPUSH
3147: CALL_OW 111
// end ;
3151: LD_VAR 0 1
3155: RET
// export function PrepareSikorsky ; begin
3156: LD_INT 0
3158: PPUSH
// uc_side = 4 ;
3159: LD_ADDR_OWVAR 20
3163: PUSH
3164: LD_INT 4
3166: ST_TO_ADDR
// uc_nation = 1 ;
3167: LD_ADDR_OWVAR 21
3171: PUSH
3172: LD_INT 1
3174: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
3175: LD_ADDR_EXP 15
3179: PUSH
3180: LD_STRING Sikorski
3182: PPUSH
3183: LD_INT 0
3185: PPUSH
3186: CALL 4515 0 2
3190: ST_TO_ADDR
// vc_engine = 1 ;
3191: LD_ADDR_OWVAR 39
3195: PUSH
3196: LD_INT 1
3198: ST_TO_ADDR
// vc_control = 1 ;
3199: LD_ADDR_OWVAR 38
3203: PUSH
3204: LD_INT 1
3206: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
3207: LD_ADDR_OWVAR 40
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: LD_INT 3
3217: PUSH
3218: LD_INT 4
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: PUSH
3226: LD_OWVAR 67
3230: ARRAY
3231: ST_TO_ADDR
// vc_chassis = 4 ;
3232: LD_ADDR_OWVAR 37
3236: PUSH
3237: LD_INT 4
3239: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
3240: LD_ADDR_EXP 16
3244: PUSH
3245: CALL_OW 45
3249: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
3250: LD_EXP 16
3254: PPUSH
3255: LD_INT 9
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
3265: LD_EXP 15
3269: PPUSH
3270: LD_EXP 16
3274: PPUSH
3275: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
3279: LD_EXP 16
3283: PPUSH
3284: LD_INT 5
3286: PPUSH
3287: CALL_OW 113
// end ;
3291: LD_VAR 0 1
3295: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
3296: LD_INT 0
3298: PPUSH
3299: PPUSH
3300: PPUSH
3301: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
3302: LD_ADDR_VAR 0 2
3306: PUSH
3307: DOUBLE
3308: LD_INT 1
3310: DEC
3311: ST_TO_ADDR
3312: LD_INT 8
3314: PUSH
3315: LD_INT 7
3317: PUSH
3318: LD_INT 7
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: PUSH
3326: LD_OWVAR 67
3330: ARRAY
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3430
// begin uc_side = 4 ;
3335: LD_ADDR_OWVAR 20
3339: PUSH
3340: LD_INT 4
3342: ST_TO_ADDR
// uc_nation = 1 ;
3343: LD_ADDR_OWVAR 21
3347: PUSH
3348: LD_INT 1
3350: ST_TO_ADDR
// hc_name =  ;
3351: LD_ADDR_OWVAR 26
3355: PUSH
3356: LD_STRING 
3358: ST_TO_ADDR
// hc_gallery =  ;
3359: LD_ADDR_OWVAR 33
3363: PUSH
3364: LD_STRING 
3366: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
3367: LD_INT 0
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: LD_INT 5
3375: PPUSH
3376: LD_INT 8
3378: PPUSH
3379: CALL_OW 12
3383: PPUSH
3384: CALL_OW 380
// un = CreateHuman ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: CALL_OW 44
3397: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_INT 9
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3413: LD_VAR 0 3
3417: PPUSH
3418: LD_INT 53
3420: PPUSH
3421: LD_INT 23
3423: PPUSH
3424: CALL_OW 111
// end ;
3428: GO 3332
3430: POP
3431: POP
// for i = 1 to 3 do
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: DOUBLE
3438: LD_INT 1
3440: DEC
3441: ST_TO_ADDR
3442: LD_INT 3
3444: PUSH
3445: FOR_TO
3446: IFFALSE 3543
// begin uc_side = 4 ;
3448: LD_ADDR_OWVAR 20
3452: PUSH
3453: LD_INT 4
3455: ST_TO_ADDR
// uc_nation = 1 ;
3456: LD_ADDR_OWVAR 21
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// hc_name =  ;
3464: LD_ADDR_OWVAR 26
3468: PUSH
3469: LD_STRING 
3471: ST_TO_ADDR
// hc_gallery =  ;
3472: LD_ADDR_OWVAR 33
3476: PUSH
3477: LD_STRING 
3479: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
3480: LD_INT 0
3482: PPUSH
3483: LD_INT 4
3485: PPUSH
3486: LD_INT 5
3488: PPUSH
3489: LD_INT 8
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 380
// un = CreateHuman ;
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 9
3518: PPUSH
3519: LD_INT 0
3521: PPUSH
3522: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_INT 53
3533: PPUSH
3534: LD_INT 23
3536: PPUSH
3537: CALL_OW 111
// end ;
3541: GO 3445
3543: POP
3544: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 9
3557: PUSH
3558: LD_INT 8
3560: PUSH
3561: LD_INT 7
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: PUSH
3569: LD_OWVAR 67
3573: ARRAY
3574: PUSH
3575: FOR_TO
3576: IFFALSE 3772
// begin uc_side = 4 ;
3578: LD_ADDR_OWVAR 20
3582: PUSH
3583: LD_INT 4
3585: ST_TO_ADDR
// uc_nation = 1 ;
3586: LD_ADDR_OWVAR 21
3590: PUSH
3591: LD_INT 1
3593: ST_TO_ADDR
// vc_engine = 1 ;
3594: LD_ADDR_OWVAR 39
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
// vc_control = 1 ;
3602: LD_ADDR_OWVAR 38
3606: PUSH
3607: LD_INT 1
3609: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
3610: LD_ADDR_OWVAR 40
3614: PUSH
3615: LD_INT 3
3617: PUSH
3618: LD_INT 4
3620: PUSH
3621: LD_INT 5
3623: PUSH
3624: LD_INT 6
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 1
3635: PPUSH
3636: LD_INT 4
3638: PPUSH
3639: CALL_OW 12
3643: ARRAY
3644: ST_TO_ADDR
// vc_chassis = 4 ;
3645: LD_ADDR_OWVAR 37
3649: PUSH
3650: LD_INT 4
3652: ST_TO_ADDR
// veh = CreateVehicle ;
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: CALL_OW 45
3662: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
3663: LD_VAR 0 4
3667: PPUSH
3668: LD_INT 9
3670: PPUSH
3671: LD_INT 0
3673: PPUSH
3674: CALL_OW 49
// hc_name =  ;
3678: LD_ADDR_OWVAR 26
3682: PUSH
3683: LD_STRING 
3685: ST_TO_ADDR
// hc_gallery =  ;
3686: LD_ADDR_OWVAR 33
3690: PUSH
3691: LD_STRING 
3693: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
3694: LD_INT 0
3696: PPUSH
3697: LD_INT 3
3699: PPUSH
3700: LD_INT 5
3702: PPUSH
3703: LD_INT 8
3705: PPUSH
3706: CALL_OW 12
3710: PPUSH
3711: CALL_OW 380
// un = CreateHuman ;
3715: LD_ADDR_VAR 0 3
3719: PUSH
3720: CALL_OW 44
3724: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3725: LD_VAR 0 3
3729: PPUSH
3730: LD_VAR 0 4
3734: PPUSH
3735: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
3739: LD_VAR 0 4
3743: PUSH
3744: LD_VAR 0 3
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PPUSH
3753: LD_INT 53
3755: PPUSH
3756: LD_INT 23
3758: PPUSH
3759: CALL_OW 111
// wait ( 0 0$5 ) ;
3763: LD_INT 175
3765: PPUSH
3766: CALL_OW 67
// end ;
3770: GO 3575
3772: POP
3773: POP
// end ; end_of_file
3774: LD_VAR 0 1
3778: RET
// export function PrepareRussianCommander ; begin
3779: LD_INT 0
3781: PPUSH
// uc_side = 3 ;
3782: LD_ADDR_OWVAR 20
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// uc_nation = 3 ;
3790: LD_ADDR_OWVAR 21
3794: PUSH
3795: LD_INT 3
3797: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
3798: LD_ADDR_EXP 23
3802: PUSH
3803: LD_STRING Borodin
3805: PPUSH
3806: CALL_OW 25
3810: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
3811: LD_EXP 23
3815: PPUSH
3816: LD_INT 3
3818: PPUSH
3819: LD_INT 0
3821: PPUSH
3822: CALL_OW 49
// end ;
3826: LD_VAR 0 1
3830: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
3831: LD_INT 0
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// for i = 1 to 10 do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: DOUBLE
3843: LD_INT 1
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 10
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3925
// begin uc_side = 6 ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_INT 6
3860: ST_TO_ADDR
// uc_nation = 3 ;
3861: LD_ADDR_OWVAR 21
3865: PUSH
3866: LD_INT 3
3868: ST_TO_ADDR
// hc_gallery =  ;
3869: LD_ADDR_OWVAR 33
3873: PUSH
3874: LD_STRING 
3876: ST_TO_ADDR
// hc_name =  ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING 
3884: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 3
3893: PPUSH
3894: CALL_OW 380
// un = CreateHuman ;
3898: LD_ADDR_VAR 0 3
3902: PUSH
3903: CALL_OW 44
3907: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
3908: LD_VAR 0 3
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: CALL_OW 49
// end ;
3923: GO 3850
3925: POP
3926: POP
// for i = 1 to 3 do
3927: LD_ADDR_VAR 0 2
3931: PUSH
3932: DOUBLE
3933: LD_INT 1
3935: DEC
3936: ST_TO_ADDR
3937: LD_INT 3
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4090
// begin uc_side = 6 ;
3943: LD_ADDR_OWVAR 20
3947: PUSH
3948: LD_INT 6
3950: ST_TO_ADDR
// uc_nation = 3 ;
3951: LD_ADDR_OWVAR 21
3955: PUSH
3956: LD_INT 3
3958: ST_TO_ADDR
// vc_engine = 1 ;
3959: LD_ADDR_OWVAR 39
3963: PUSH
3964: LD_INT 1
3966: ST_TO_ADDR
// vc_control = 1 ;
3967: LD_ADDR_OWVAR 38
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
3975: LD_ADDR_OWVAR 40
3979: PUSH
3980: LD_INT 43
3982: PUSH
3983: LD_INT 44
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 2
3995: PPUSH
3996: CALL_OW 12
4000: ARRAY
4001: ST_TO_ADDR
// vc_chassis = 22 ;
4002: LD_ADDR_OWVAR 37
4006: PUSH
4007: LD_INT 22
4009: ST_TO_ADDR
// veh = CreateVehicle ;
4010: LD_ADDR_VAR 0 4
4014: PUSH
4015: CALL_OW 45
4019: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
4020: LD_VAR 0 4
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: LD_INT 0
4030: PPUSH
4031: CALL_OW 49
// hc_gallery =  ;
4035: LD_ADDR_OWVAR 33
4039: PUSH
4040: LD_STRING 
4042: ST_TO_ADDR
// hc_name =  ;
4043: LD_ADDR_OWVAR 26
4047: PUSH
4048: LD_STRING 
4050: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
4051: LD_INT 0
4053: PPUSH
4054: LD_INT 3
4056: PPUSH
4057: LD_INT 4
4059: PPUSH
4060: CALL_OW 380
// un = CreateHuman ;
4064: LD_ADDR_VAR 0 3
4068: PUSH
4069: CALL_OW 44
4073: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4074: LD_VAR 0 3
4078: PPUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: CALL_OW 52
// end ;
4088: GO 3940
4090: POP
4091: POP
// end ;
4092: LD_VAR 0 1
4096: RET
// export function PrepareRussians ; var i , un ; begin
4097: LD_INT 0
4099: PPUSH
4100: PPUSH
4101: PPUSH
// for i = 1 to 14 do
4102: LD_ADDR_VAR 0 2
4106: PUSH
4107: DOUBLE
4108: LD_INT 1
4110: DEC
4111: ST_TO_ADDR
4112: LD_INT 14
4114: PUSH
4115: FOR_TO
4116: IFFALSE 4202
// begin uc_side = 3 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 3
4125: ST_TO_ADDR
// uc_nation = 3 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 3
4133: ST_TO_ADDR
// hc_gallery =  ;
4134: LD_ADDR_OWVAR 33
4138: PUSH
4139: LD_STRING 
4141: ST_TO_ADDR
// hc_name =  ;
4142: LD_ADDR_OWVAR 26
4146: PUSH
4147: LD_STRING 
4149: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4150: LD_INT 0
4152: PPUSH
4153: LD_INT 1
4155: PPUSH
4156: LD_EXP 24
4160: PPUSH
4161: LD_EXP 25
4165: PPUSH
4166: CALL_OW 12
4170: PPUSH
4171: CALL_OW 380
// un = CreateHuman ;
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: CALL_OW 44
4184: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4185: LD_VAR 0 3
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 0
4195: PPUSH
4196: CALL_OW 49
// end ;
4200: GO 4115
4202: POP
4203: POP
// for i = 1 to 6 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 6
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4304
// begin uc_side = 3 ;
4220: LD_ADDR_OWVAR 20
4224: PUSH
4225: LD_INT 3
4227: ST_TO_ADDR
// uc_nation = 3 ;
4228: LD_ADDR_OWVAR 21
4232: PUSH
4233: LD_INT 3
4235: ST_TO_ADDR
// hc_gallery =  ;
4236: LD_ADDR_OWVAR 33
4240: PUSH
4241: LD_STRING 
4243: ST_TO_ADDR
// hc_name =  ;
4244: LD_ADDR_OWVAR 26
4248: PUSH
4249: LD_STRING 
4251: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4252: LD_INT 0
4254: PPUSH
4255: LD_INT 2
4257: PPUSH
4258: LD_EXP 24
4262: PPUSH
4263: LD_EXP 25
4267: PPUSH
4268: CALL_OW 12
4272: PPUSH
4273: CALL_OW 380
// un = CreateHuman ;
4277: LD_ADDR_VAR 0 3
4281: PUSH
4282: CALL_OW 44
4286: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4287: LD_VAR 0 3
4291: PPUSH
4292: LD_INT 3
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL_OW 49
// end ;
4302: GO 4217
4304: POP
4305: POP
// for i = 1 to 6 do
4306: LD_ADDR_VAR 0 2
4310: PUSH
4311: DOUBLE
4312: LD_INT 1
4314: DEC
4315: ST_TO_ADDR
4316: LD_INT 6
4318: PUSH
4319: FOR_TO
4320: IFFALSE 4406
// begin uc_side = 3 ;
4322: LD_ADDR_OWVAR 20
4326: PUSH
4327: LD_INT 3
4329: ST_TO_ADDR
// uc_nation = 3 ;
4330: LD_ADDR_OWVAR 21
4334: PUSH
4335: LD_INT 3
4337: ST_TO_ADDR
// hc_gallery =  ;
4338: LD_ADDR_OWVAR 33
4342: PUSH
4343: LD_STRING 
4345: ST_TO_ADDR
// hc_name =  ;
4346: LD_ADDR_OWVAR 26
4350: PUSH
4351: LD_STRING 
4353: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4354: LD_INT 0
4356: PPUSH
4357: LD_INT 3
4359: PPUSH
4360: LD_EXP 24
4364: PPUSH
4365: LD_EXP 25
4369: PPUSH
4370: CALL_OW 12
4374: PPUSH
4375: CALL_OW 380
// un = CreateHuman ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: CALL_OW 44
4388: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4389: LD_VAR 0 3
4393: PPUSH
4394: LD_INT 3
4396: PPUSH
4397: LD_INT 0
4399: PPUSH
4400: CALL_OW 49
// end ;
4404: GO 4319
4406: POP
4407: POP
// for i = 1 to 4 do
4408: LD_ADDR_VAR 0 2
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_INT 4
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4508
// begin uc_side = 3 ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_INT 3
4431: ST_TO_ADDR
// uc_nation = 3 ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 3
4439: ST_TO_ADDR
// hc_gallery =  ;
4440: LD_ADDR_OWVAR 33
4444: PUSH
4445: LD_STRING 
4447: ST_TO_ADDR
// hc_name =  ;
4448: LD_ADDR_OWVAR 26
4452: PUSH
4453: LD_STRING 
4455: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_EXP 24
4466: PPUSH
4467: LD_EXP 25
4471: PPUSH
4472: CALL_OW 12
4476: PPUSH
4477: CALL_OW 380
// un = CreateHuman ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 3
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ;
4506: GO 4421
4508: POP
4509: POP
// end ; end_of_file
4510: LD_VAR 0 1
4514: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4515: LD_INT 0
4517: PPUSH
4518: PPUSH
// if exist_mode then
4519: LD_VAR 0 2
4523: IFFALSE 4542
// unit := CreateCharacter ( ident ) else
4525: LD_ADDR_VAR 0 4
4529: PUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 34
4539: ST_TO_ADDR
4540: GO 4557
// unit := NewCharacter ( ident ) ;
4542: LD_ADDR_VAR 0 4
4546: PUSH
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 25
4556: ST_TO_ADDR
// result := unit ;
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: LD_VAR 0 4
4566: ST_TO_ADDR
// end ;
4567: LD_VAR 0 3
4571: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4572: LD_INT 0
4574: PPUSH
4575: PPUSH
4576: PPUSH
// rnd = rand ( 1 , characters ) ;
4577: LD_ADDR_VAR 0 6
4581: PUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_VAR 0 1
4589: PPUSH
4590: CALL_OW 12
4594: ST_TO_ADDR
// for i = 1 to characters do
4595: LD_ADDR_VAR 0 5
4599: PUSH
4600: DOUBLE
4601: LD_INT 1
4603: DEC
4604: ST_TO_ADDR
4605: LD_VAR 0 1
4609: PUSH
4610: FOR_TO
4611: IFFALSE 4721
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4613: LD_VAR 0 5
4617: PUSH
4618: LD_VAR 0 6
4622: EQUAL
4623: PUSH
4624: LD_VAR 0 1
4628: PUSH
4629: LD_VAR 0 5
4633: ARRAY
4634: PPUSH
4635: CALL_OW 258
4639: PUSH
4640: LD_INT 1
4642: EQUAL
4643: AND
4644: IFFALSE 4666
// Say ( characters [ i ] , dialogMID ) ;
4646: LD_VAR 0 1
4650: PUSH
4651: LD_VAR 0 5
4655: ARRAY
4656: PPUSH
4657: LD_VAR 0 2
4661: PPUSH
4662: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4666: LD_VAR 0 5
4670: PUSH
4671: LD_VAR 0 6
4675: EQUAL
4676: PUSH
4677: LD_VAR 0 1
4681: PUSH
4682: LD_VAR 0 5
4686: ARRAY
4687: PPUSH
4688: CALL_OW 258
4692: PUSH
4693: LD_INT 2
4695: EQUAL
4696: AND
4697: IFFALSE 4719
// Say ( characters [ i ] , dialogFID ) ;
4699: LD_VAR 0 1
4703: PUSH
4704: LD_VAR 0 5
4708: ARRAY
4709: PPUSH
4710: LD_VAR 0 3
4714: PPUSH
4715: CALL_OW 88
// end ;
4719: GO 4610
4721: POP
4722: POP
// end ;
4723: LD_VAR 0 4
4727: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4728: LD_INT 0
4730: PPUSH
4731: PPUSH
4732: PPUSH
// uc_side := GetSide ( b ) ;
4733: LD_ADDR_OWVAR 20
4737: PUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: CALL_OW 255
4747: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4748: LD_ADDR_OWVAR 21
4752: PUSH
4753: LD_VAR 0 2
4757: PPUSH
4758: CALL_OW 248
4762: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4763: LD_INT 0
4765: PPUSH
4766: LD_INT 1
4768: PPUSH
4769: LD_VAR 0 1
4773: PPUSH
4774: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4778: LD_ADDR_VAR 0 5
4782: PUSH
4783: LD_VAR 0 2
4787: PPUSH
4788: CALL_OW 254
4792: PUSH
4793: LD_INT 3
4795: MINUS
4796: ST_TO_ADDR
// if dir < 0 then
4797: LD_VAR 0 5
4801: PUSH
4802: LD_INT 0
4804: LESS
4805: IFFALSE 4821
// dir := 6 + dir ;
4807: LD_ADDR_VAR 0 5
4811: PUSH
4812: LD_INT 6
4814: PUSH
4815: LD_VAR 0 5
4819: PLUS
4820: ST_TO_ADDR
// un := CreateHuman ;
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: CALL_OW 44
4830: ST_TO_ADDR
// SetDir ( un , dir ) ;
4831: LD_VAR 0 4
4835: PPUSH
4836: LD_VAR 0 5
4840: PPUSH
4841: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4845: LD_VAR 0 4
4849: PPUSH
4850: LD_VAR 0 2
4854: PPUSH
4855: CALL_OW 52
// end ;
4859: LD_VAR 0 3
4863: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4864: LD_INT 0
4866: PPUSH
4867: PPUSH
4868: PPUSH
4869: PPUSH
// for i = 1 to count do
4870: LD_ADDR_VAR 0 8
4874: PUSH
4875: DOUBLE
4876: LD_INT 1
4878: DEC
4879: ST_TO_ADDR
4880: LD_VAR 0 6
4884: PUSH
4885: FOR_TO
4886: IFFALSE 4967
// begin uc_side = side ;
4888: LD_ADDR_OWVAR 20
4892: PUSH
4893: LD_VAR 0 1
4897: ST_TO_ADDR
// uc_nation = nation ;
4898: LD_ADDR_OWVAR 21
4902: PUSH
4903: LD_VAR 0 2
4907: ST_TO_ADDR
// hc_gallery =  ;
4908: LD_ADDR_OWVAR 33
4912: PUSH
4913: LD_STRING 
4915: ST_TO_ADDR
// hc_name =  ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING 
4923: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4924: LD_INT 0
4926: PPUSH
4927: LD_VAR 0 5
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 380
// un = CreateHuman ;
4941: LD_ADDR_VAR 0 10
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4951: LD_VAR 0 10
4955: PPUSH
4956: LD_VAR 0 3
4960: PPUSH
4961: CALL_OW 52
// end ;
4965: GO 4885
4967: POP
4968: POP
// end ;
4969: LD_VAR 0 7
4973: RET
// export function PrepareDifficulty ; begin
4974: LD_INT 0
4976: PPUSH
// if Difficulty = 1 then
4977: LD_OWVAR 67
4981: PUSH
4982: LD_INT 1
4984: EQUAL
4985: IFFALSE 5003
// begin RuSolMinLevel = 2 ;
4987: LD_ADDR_EXP 24
4991: PUSH
4992: LD_INT 2
4994: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
4995: LD_ADDR_EXP 25
4999: PUSH
5000: LD_INT 4
5002: ST_TO_ADDR
// end ; if Difficulty = 2 then
5003: LD_OWVAR 67
5007: PUSH
5008: LD_INT 2
5010: EQUAL
5011: IFFALSE 5081
// begin RuSolMinLevel = 3 ;
5013: LD_ADDR_EXP 24
5017: PUSH
5018: LD_INT 3
5020: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5021: LD_ADDR_EXP 25
5025: PUSH
5026: LD_INT 5
5028: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
5029: LD_INT 51
5031: PPUSH
5032: LD_INT 3
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
5042: LD_INT 57
5044: PPUSH
5045: LD_INT 3
5047: PPUSH
5048: LD_INT 1
5050: PPUSH
5051: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
5055: LD_INT 57
5057: PPUSH
5058: LD_INT 6
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
5068: LD_INT 51
5070: PPUSH
5071: LD_INT 6
5073: PPUSH
5074: LD_INT 2
5076: PPUSH
5077: CALL_OW 322
// end ; if Difficulty = 3 then
5081: LD_OWVAR 67
5085: PUSH
5086: LD_INT 3
5088: EQUAL
5089: IFFALSE 5172
// begin RuSolMinLevel = 3 ;
5091: LD_ADDR_EXP 24
5095: PUSH
5096: LD_INT 3
5098: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5099: LD_ADDR_EXP 25
5103: PUSH
5104: LD_INT 6
5106: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
5107: LD_INT 57
5109: PPUSH
5110: LD_INT 3
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
5120: LD_INT 51
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5133: LD_INT 52
5135: PPUSH
5136: LD_INT 3
5138: PPUSH
5139: LD_INT 1
5141: PPUSH
5142: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
5146: LD_INT 57
5148: PPUSH
5149: LD_INT 6
5151: PPUSH
5152: LD_INT 2
5154: PPUSH
5155: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
5159: LD_INT 52
5161: PPUSH
5162: LD_INT 6
5164: PPUSH
5165: LD_INT 2
5167: PPUSH
5168: CALL_OW 322
// end ; end ;
5172: LD_VAR 0 1
5176: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
5177: LD_INT 0
5179: PPUSH
5180: PPUSH
5181: PPUSH
5182: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
5183: LD_ADDR_VAR 0 3
5187: PUSH
5188: LD_INT 22
5190: PUSH
5191: LD_INT 3
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 25
5200: PUSH
5201: LD_INT 2
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PPUSH
5212: CALL_OW 69
5216: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
5217: LD_ADDR_VAR 0 4
5221: PUSH
5222: LD_INT 4
5224: PUSH
5225: LD_INT 75
5227: PUSH
5228: LD_INT 79
5230: PUSH
5231: LD_INT 2
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 4
5242: PUSH
5243: LD_INT 113
5245: PUSH
5246: LD_INT 94
5248: PUSH
5249: LD_INT 4
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 29
5260: PUSH
5261: LD_INT 106
5263: PUSH
5264: LD_INT 97
5266: PUSH
5267: LD_INT 3
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_INT 26
5278: PUSH
5279: LD_INT 93
5281: PUSH
5282: LD_INT 97
5284: PUSH
5285: LD_INT 5
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 2
5296: PUSH
5297: LD_INT 100
5299: PUSH
5300: LD_INT 89
5302: PUSH
5303: LD_INT 3
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: PUSH
5312: LD_INT 17
5314: PUSH
5315: LD_INT 96
5317: PUSH
5318: LD_INT 89
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: PUSH
5330: LD_INT 32
5332: PUSH
5333: LD_INT 78
5335: PUSH
5336: LD_INT 94
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 32
5350: PUSH
5351: LD_INT 95
5353: PUSH
5354: LD_INT 82
5356: PUSH
5357: LD_INT 3
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: PUSH
5366: LD_INT 32
5368: PUSH
5369: LD_INT 104
5371: PUSH
5372: LD_INT 85
5374: PUSH
5375: LD_INT 2
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PUSH
5384: LD_INT 32
5386: PUSH
5387: LD_INT 81
5389: PUSH
5390: LD_INT 78
5392: PUSH
5393: LD_INT 2
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: PUSH
5402: LD_INT 33
5404: PUSH
5405: LD_INT 109
5407: PUSH
5408: LD_INT 90
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 33
5422: PUSH
5423: LD_INT 88
5425: PUSH
5426: LD_INT 79
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 33
5440: PUSH
5441: LD_INT 76
5443: PUSH
5444: LD_INT 87
5446: PUSH
5447: LD_INT 1
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 26
5458: PUSH
5459: LD_INT 96
5461: PUSH
5462: LD_INT 97
5464: PUSH
5465: LD_INT 5
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 26
5476: PUSH
5477: LD_INT 85
5479: PUSH
5480: LD_INT 84
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 6
5494: PUSH
5495: LD_INT 88
5497: PUSH
5498: LD_INT 95
5500: PUSH
5501: LD_INT 0
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 19
5512: PUSH
5513: LD_INT 103
5515: PUSH
5516: LD_INT 89
5518: PUSH
5519: LD_INT 4
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 16
5530: PUSH
5531: LD_INT 97
5533: PUSH
5534: LD_INT 86
5536: PUSH
5537: LD_INT 2
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 24
5548: PUSH
5549: LD_INT 100
5551: PUSH
5552: LD_INT 85
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// for i := 1 to buildingsTab do
5585: LD_ADDR_VAR 0 2
5589: PUSH
5590: DOUBLE
5591: LD_INT 1
5593: DEC
5594: ST_TO_ADDR
5595: LD_VAR 0 4
5599: PUSH
5600: FOR_TO
5601: IFFALSE 5674
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
5603: LD_VAR 0 3
5607: PPUSH
5608: LD_VAR 0 4
5612: PUSH
5613: LD_VAR 0 2
5617: ARRAY
5618: PUSH
5619: LD_INT 1
5621: ARRAY
5622: PPUSH
5623: LD_VAR 0 4
5627: PUSH
5628: LD_VAR 0 2
5632: ARRAY
5633: PUSH
5634: LD_INT 2
5636: ARRAY
5637: PPUSH
5638: LD_VAR 0 4
5642: PUSH
5643: LD_VAR 0 2
5647: ARRAY
5648: PUSH
5649: LD_INT 3
5651: ARRAY
5652: PPUSH
5653: LD_VAR 0 4
5657: PUSH
5658: LD_VAR 0 2
5662: ARRAY
5663: PUSH
5664: LD_INT 4
5666: ARRAY
5667: PPUSH
5668: CALL_OW 205
5672: GO 5600
5674: POP
5675: POP
// end ;
5676: LD_VAR 0 1
5680: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
// for i in charactersList do
5685: LD_ADDR_VAR 0 4
5689: PUSH
5690: LD_VAR 0 1
5694: PUSH
5695: FOR_IN
5696: IFFALSE 5725
// begin if IsOk ( i ) then
5698: LD_VAR 0 4
5702: PPUSH
5703: CALL_OW 302
5707: IFFALSE 5723
// SaveCharacters ( i , ident ) ;
5709: LD_VAR 0 4
5713: PPUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: CALL_OW 38
// end ;
5723: GO 5695
5725: POP
5726: POP
// end ;
5727: LD_VAR 0 3
5731: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
5736: PPUSH
5737: PPUSH
// for i = 1 to 72 do
5738: LD_ADDR_VAR 0 5
5742: PUSH
5743: DOUBLE
5744: LD_INT 1
5746: DEC
5747: ST_TO_ADDR
5748: LD_INT 72
5750: PUSH
5751: FOR_TO
5752: IFFALSE 5810
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5754: LD_VAR 0 5
5758: PPUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: CALL_OW 321
5768: PUSH
5769: LD_INT 1
5771: EQUAL
5772: PUSH
5773: LD_VAR 0 5
5777: PPUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: CALL_OW 482
5787: PUSH
5788: LD_INT 1
5790: EQUAL
5791: AND
5792: IFFALSE 5808
// AddComResearch ( lab , i ) ;
5794: LD_VAR 0 2
5798: PPUSH
5799: LD_VAR 0 5
5803: PPUSH
5804: CALL_OW 184
5808: GO 5751
5810: POP
5811: POP
// end ;
5812: LD_VAR 0 4
5816: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
5817: LD_INT 0
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
5824: PPUSH
5825: PPUSH
5826: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
5827: LD_ADDR_VAR 0 6
5831: PUSH
5832: LD_INT 22
5834: PUSH
5835: LD_VAR 0 1
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 25
5846: PUSH
5847: LD_INT 1
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: LD_INT 56
5856: PUSH
5857: EMPTY
5858: LIST
5859: PUSH
5860: LD_INT 24
5862: PUSH
5863: LD_INT 700
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 3
5872: PUSH
5873: LD_INT 60
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 69
5894: PUSH
5895: LD_EXP 23
5899: PUSH
5900: EMPTY
5901: LIST
5902: DIFF
5903: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
5904: LD_ADDR_VAR 0 7
5908: PUSH
5909: LD_INT 22
5911: PUSH
5912: LD_VAR 0 1
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PUSH
5921: LD_INT 25
5923: PUSH
5924: LD_INT 1
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: LD_INT 54
5933: PUSH
5934: EMPTY
5935: LIST
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: LIST
5941: PPUSH
5942: CALL_OW 69
5946: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
5947: LD_ADDR_VAR 0 8
5951: PUSH
5952: LD_INT 22
5954: PUSH
5955: LD_VAR 0 1
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 30
5966: PUSH
5967: LD_INT 32
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 58
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 24
5982: PUSH
5983: LD_INT 251
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
6001: LD_ADDR_VAR 0 10
6005: PUSH
6006: LD_INT 22
6008: PUSH
6009: LD_VAR 0 1
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 30
6023: PUSH
6024: LD_INT 4
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 30
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 24
6048: PUSH
6049: LD_INT 251
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: PPUSH
6061: CALL_OW 69
6065: ST_TO_ADDR
// if barrackList > 0 then
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 0
6073: GREATER
6074: IFFALSE 6187
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
6076: LD_VAR 0 8
6080: PUSH
6081: LD_INT 0
6083: EQUAL
6084: PUSH
6085: LD_INT 24
6087: PPUSH
6088: LD_INT 22
6090: PUSH
6091: LD_INT 1
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: LD_INT 21
6100: PUSH
6101: LD_INT 1
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PPUSH
6112: CALL_OW 70
6116: PUSH
6117: LD_INT 0
6119: EQUAL
6120: AND
6121: IFFALSE 6170
// begin for i in soldiers_list do
6123: LD_ADDR_VAR 0 4
6127: PUSH
6128: LD_VAR 0 6
6132: PUSH
6133: FOR_IN
6134: IFFALSE 6166
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
6136: LD_VAR 0 4
6140: PPUSH
6141: LD_VAR 0 10
6145: PUSH
6146: LD_INT 1
6148: PPUSH
6149: LD_VAR 0 10
6153: PPUSH
6154: CALL_OW 12
6158: ARRAY
6159: PPUSH
6160: CALL_OW 120
6164: GO 6133
6166: POP
6167: POP
// end else
6168: GO 6187
// begin for i in barrackList do
6170: LD_ADDR_VAR 0 4
6174: PUSH
6175: LD_VAR 0 10
6179: PUSH
6180: FOR_IN
6181: IFFALSE 6185
// begin end ;
6183: GO 6180
6185: POP
6186: POP
// end ; end ; end ;
6187: LD_VAR 0 3
6191: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
6199: PPUSH
// for i = 1 to infantryCount do
6200: LD_ADDR_VAR 0 8
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_VAR 0 5
6214: PUSH
6215: FOR_TO
6216: IFFALSE 6332
// begin uc_side = side ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_VAR 0 1
6227: ST_TO_ADDR
// uc_nation = nation ;
6228: LD_ADDR_OWVAR 21
6232: PUSH
6233: LD_VAR 0 3
6237: ST_TO_ADDR
// hc_class = 1 ;
6238: LD_ADDR_OWVAR 28
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 1
6267: PPUSH
6268: LD_EXP 24
6272: PPUSH
6273: LD_EXP 25
6277: PPUSH
6278: CALL_OW 12
6282: PPUSH
6283: CALL_OW 380
// un = CreateHuman ;
6287: LD_ADDR_VAR 0 10
6291: PUSH
6292: CALL_OW 44
6296: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
6297: LD_VAR 0 10
6301: PPUSH
6302: LD_VAR 0 2
6306: PPUSH
6307: LD_INT 0
6309: PPUSH
6310: CALL_OW 49
// defenders_list = defenders_list ^ un ;
6314: LD_ADDR_EXP 31
6318: PUSH
6319: LD_EXP 31
6323: PUSH
6324: LD_VAR 0 10
6328: ADD
6329: ST_TO_ADDR
// end ;
6330: GO 6215
6332: POP
6333: POP
// for i = 1 to vehCount do
6334: LD_ADDR_VAR 0 8
6338: PUSH
6339: DOUBLE
6340: LD_INT 1
6342: DEC
6343: ST_TO_ADDR
6344: LD_VAR 0 6
6348: PUSH
6349: FOR_TO
6350: IFFALSE 6557
// begin uc_side = side ;
6352: LD_ADDR_OWVAR 20
6356: PUSH
6357: LD_VAR 0 1
6361: ST_TO_ADDR
// uc_nation = nation ;
6362: LD_ADDR_OWVAR 21
6366: PUSH
6367: LD_VAR 0 3
6371: ST_TO_ADDR
// vc_Chassis = 22 ;
6372: LD_ADDR_OWVAR 37
6376: PUSH
6377: LD_INT 22
6379: ST_TO_ADDR
// vc_engine = 1 ;
6380: LD_ADDR_OWVAR 39
6384: PUSH
6385: LD_INT 1
6387: ST_TO_ADDR
// vc_control = 1 ;
6388: LD_ADDR_OWVAR 38
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6396: LD_ADDR_OWVAR 40
6400: PUSH
6401: LD_INT 43
6403: PUSH
6404: LD_INT 44
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 1
6413: PPUSH
6414: LD_INT 2
6416: PPUSH
6417: CALL_OW 12
6421: ARRAY
6422: ST_TO_ADDR
// veh = CreateVehicle ;
6423: LD_ADDR_VAR 0 12
6427: PUSH
6428: CALL_OW 45
6432: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
6433: LD_VAR 0 12
6437: PPUSH
6438: LD_VAR 0 2
6442: PPUSH
6443: LD_INT 0
6445: PPUSH
6446: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
6450: LD_ADDR_EXP 31
6454: PUSH
6455: LD_EXP 31
6459: PUSH
6460: LD_VAR 0 12
6464: ADD
6465: ST_TO_ADDR
// hc_class = 3 ;
6466: LD_ADDR_OWVAR 28
6470: PUSH
6471: LD_INT 3
6473: ST_TO_ADDR
// hc_name =  ;
6474: LD_ADDR_OWVAR 26
6478: PUSH
6479: LD_STRING 
6481: ST_TO_ADDR
// hc_gallery =  ;
6482: LD_ADDR_OWVAR 33
6486: PUSH
6487: LD_STRING 
6489: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6490: LD_INT 0
6492: PPUSH
6493: LD_INT 3
6495: PPUSH
6496: LD_EXP 24
6500: PPUSH
6501: LD_EXP 25
6505: PPUSH
6506: CALL_OW 12
6510: PPUSH
6511: CALL_OW 380
// un = CreateHuman ;
6515: LD_ADDR_VAR 0 10
6519: PUSH
6520: CALL_OW 44
6524: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6525: LD_VAR 0 10
6529: PPUSH
6530: LD_VAR 0 12
6534: PPUSH
6535: CALL_OW 52
// defenders_list = defenders_list ^ un ;
6539: LD_ADDR_EXP 31
6543: PUSH
6544: LD_EXP 31
6548: PUSH
6549: LD_VAR 0 10
6553: ADD
6554: ST_TO_ADDR
// end ;
6555: GO 6349
6557: POP
6558: POP
// end ;
6559: LD_VAR 0 7
6563: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
6564: LD_INT 0
6566: PPUSH
6567: PPUSH
6568: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
6569: LD_VAR 0 2
6573: PPUSH
6574: LD_INT 22
6576: PUSH
6577: LD_VAR 0 1
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: PPUSH
6589: CALL_OW 70
6593: PUSH
6594: LD_INT 0
6596: EQUAL
6597: PUSH
6598: LD_EXP 31
6602: PUSH
6603: LD_INT 0
6605: GREATER
6606: AND
6607: IFFALSE 6653
// begin for i in defenders_list do
6609: LD_ADDR_VAR 0 4
6613: PUSH
6614: LD_EXP 31
6618: PUSH
6619: FOR_IN
6620: IFFALSE 6651
// begin AddComMoveXY ( i , 65 , 68 ) ;
6622: LD_VAR 0 4
6626: PPUSH
6627: LD_INT 65
6629: PPUSH
6630: LD_INT 68
6632: PPUSH
6633: CALL_OW 171
// SetFuel ( i , 100 ) ;
6637: LD_VAR 0 4
6641: PPUSH
6642: LD_INT 100
6644: PPUSH
6645: CALL_OW 240
// end ;
6649: GO 6619
6651: POP
6652: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
6653: LD_VAR 0 2
6657: PPUSH
6658: LD_INT 22
6660: PUSH
6661: LD_VAR 0 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: EMPTY
6671: LIST
6672: PPUSH
6673: CALL_OW 70
6677: PUSH
6678: LD_INT 0
6680: GREATER
6681: PUSH
6682: LD_EXP 31
6686: PUSH
6687: LD_INT 0
6689: GREATER
6690: AND
6691: IFFALSE 6859
// begin for i in defenders_list do
6693: LD_ADDR_VAR 0 4
6697: PUSH
6698: LD_EXP 31
6702: PUSH
6703: FOR_IN
6704: IFFALSE 6754
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6706: LD_ADDR_VAR 0 5
6710: PUSH
6711: LD_INT 22
6713: PUSH
6714: LD_VAR 0 1
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: PPUSH
6728: LD_VAR 0 4
6732: PPUSH
6733: CALL_OW 74
6737: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
6738: LD_VAR 0 4
6742: PPUSH
6743: LD_VAR 0 5
6747: PPUSH
6748: CALL_OW 115
// end ;
6752: GO 6703
6754: POP
6755: POP
// if russianAI = 0 then
6756: LD_EXP 26
6760: PUSH
6761: LD_INT 0
6763: EQUAL
6764: IFFALSE 6859
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
6766: LD_ADDR_VAR 0 4
6770: PUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 25
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 69
6799: PUSH
6800: LD_EXP 23
6804: DIFF
6805: PUSH
6806: FOR_IN
6807: IFFALSE 6857
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6809: LD_ADDR_VAR 0 5
6813: PUSH
6814: LD_INT 22
6816: PUSH
6817: LD_VAR 0 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 69
6830: PPUSH
6831: LD_VAR 0 4
6835: PPUSH
6836: CALL_OW 74
6840: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
6841: LD_VAR 0 4
6845: PPUSH
6846: LD_VAR 0 5
6850: PPUSH
6851: CALL_OW 115
// end ;
6855: GO 6806
6857: POP
6858: POP
// end ; end ; end ;
6859: LD_VAR 0 3
6863: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
6864: LD_INT 0
6866: PPUSH
6867: PPUSH
6868: PPUSH
6869: PPUSH
6870: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
6871: LD_ADDR_VAR 0 6
6875: PUSH
6876: LD_INT 22
6878: PUSH
6879: LD_VAR 0 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 2
6890: PUSH
6891: LD_INT 25
6893: PUSH
6894: LD_INT 2
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: LD_INT 25
6903: PUSH
6904: LD_INT 16
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 24
6918: PUSH
6919: LD_INT 1000
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: PPUSH
6931: CALL_OW 69
6935: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_VAR 0 1
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 21
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: LD_INT 24
6968: PUSH
6969: LD_INT 1000
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PUSH
6985: EMPTY
6986: LIST
6987: PPUSH
6988: CALL_OW 69
6992: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
6993: LD_VAR 0 4
6997: PUSH
6998: LD_INT 0
7000: GREATER
7001: PUSH
7002: LD_VAR 0 6
7006: PUSH
7007: LD_INT 0
7009: GREATER
7010: AND
7011: IFFALSE 7077
// begin for i in engineerOk_list do
7013: LD_ADDR_VAR 0 5
7017: PUSH
7018: LD_VAR 0 6
7022: PUSH
7023: FOR_IN
7024: IFFALSE 7075
// begin for j in buildings_list do
7026: LD_ADDR_VAR 0 7
7030: PUSH
7031: LD_VAR 0 4
7035: PUSH
7036: FOR_IN
7037: IFFALSE 7071
// begin AddComExitBuilding ( i ) ;
7039: LD_VAR 0 5
7043: PPUSH
7044: CALL_OW 182
// wait ( 0 0$1 ) ;
7048: LD_INT 35
7050: PPUSH
7051: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
7055: LD_VAR 0 5
7059: PPUSH
7060: LD_VAR 0 7
7064: PPUSH
7065: CALL_OW 190
// end ;
7069: GO 7036
7071: POP
7072: POP
// end ;
7073: GO 7023
7075: POP
7076: POP
// end ; if buildings_list = 0 then
7077: LD_VAR 0 4
7081: PUSH
7082: LD_INT 0
7084: EQUAL
7085: IFFALSE 7118
// begin for i in engineerOK_list do
7087: LD_ADDR_VAR 0 5
7091: PUSH
7092: LD_VAR 0 6
7096: PUSH
7097: FOR_IN
7098: IFFALSE 7116
// begin ComEnterUnit ( i , building ) ;
7100: LD_VAR 0 5
7104: PPUSH
7105: LD_VAR 0 2
7109: PPUSH
7110: CALL_OW 120
// end ;
7114: GO 7097
7116: POP
7117: POP
// end ; end ;
7118: LD_VAR 0 3
7122: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7123: LD_INT 0
7125: PPUSH
7126: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 2
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_INT 0
7160: GREATER
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_VAR 0 1
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 21
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 24
7189: PUSH
7190: LD_INT 1000
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: PPUSH
7206: CALL_OW 69
7210: PUSH
7211: LD_INT 0
7213: EQUAL
7214: AND
7215: PUSH
7216: LD_VAR 0 2
7220: PUSH
7221: LD_INT 0
7223: GREATER
7224: AND
7225: IFFALSE 7324
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7227: LD_ADDR_VAR 0 4
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_VAR 0 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: PUSH
7263: FOR_IN
7264: IFFALSE 7322
// begin AddComExitBuilding ( i ) ;
7266: LD_VAR 0 4
7270: PPUSH
7271: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7275: LD_VAR 0 4
7279: PPUSH
7280: LD_VAR 0 2
7284: PUSH
7285: LD_INT 1
7287: ARRAY
7288: PPUSH
7289: LD_VAR 0 2
7293: PUSH
7294: LD_INT 2
7296: ARRAY
7297: PPUSH
7298: LD_VAR 0 2
7302: PUSH
7303: LD_INT 3
7305: ARRAY
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_INT 4
7314: ARRAY
7315: PPUSH
7316: CALL_OW 205
// end ;
7320: GO 7263
7322: POP
7323: POP
// end ; end ;
7324: LD_VAR 0 3
7328: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7336: LD_ADDR_VAR 0 6
7340: PUSH
7341: LD_INT 22
7343: PUSH
7344: LD_VAR 0 1
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 25
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7372: LD_ADDR_VAR 0 9
7376: PUSH
7377: LD_VAR 0 3
7381: PPUSH
7382: LD_INT 22
7384: PUSH
7385: LD_VAR 0 1
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 21
7396: PUSH
7397: LD_INT 1
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 3
7406: PUSH
7407: LD_INT 24
7409: PUSH
7410: LD_INT 750
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL_OW 70
7430: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
7431: LD_VAR 0 9
7435: PUSH
7436: LD_INT 0
7438: GREATER
7439: PUSH
7440: LD_VAR 0 6
7444: PUSH
7445: LD_INT 0
7447: GREATER
7448: AND
7449: IFFALSE 7576
// begin for i = 1 to damageUnits do
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: DOUBLE
7457: LD_INT 1
7459: DEC
7460: ST_TO_ADDR
7461: LD_VAR 0 9
7465: PUSH
7466: FOR_TO
7467: IFFALSE 7491
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
7469: LD_VAR 0 9
7473: PUSH
7474: LD_VAR 0 7
7478: ARRAY
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 113
7489: GO 7466
7491: POP
7492: POP
// for i in sci_list do
7493: LD_ADDR_VAR 0 7
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: FOR_IN
7504: IFFALSE 7572
// begin ComExitBuilding ( i ) ;
7506: LD_VAR 0 7
7510: PPUSH
7511: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
7515: LD_ADDR_VAR 0 8
7519: PUSH
7520: LD_VAR 0 2
7524: PPUSH
7525: LD_INT 22
7527: PUSH
7528: LD_VAR 0 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PPUSH
7537: CALL_OW 70
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7568
// begin AddComHeal ( i , j ) ;
7545: LD_VAR 0 7
7549: PPUSH
7550: LD_VAR 0 8
7554: PPUSH
7555: CALL_OW 188
// wait ( 1 1$0 ) ;
7559: LD_INT 2100
7561: PPUSH
7562: CALL_OW 67
// end ;
7566: GO 7542
7568: POP
7569: POP
// end ;
7570: GO 7503
7572: POP
7573: POP
// end else
7574: GO 7590
// begin AddComEnterUnit ( sci_list , build ) ;
7576: LD_VAR 0 6
7580: PPUSH
7581: LD_VAR 0 4
7585: PPUSH
7586: CALL_OW 180
// end ; end ;
7590: LD_VAR 0 5
7594: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
7595: LD_INT 0
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
7606: PPUSH
7607: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7608: LD_ADDR_VAR 0 9
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: LD_VAR 0 1
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 21
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 33
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 24
7647: PUSH
7648: LD_INT 660
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 58
7660: PUSH
7661: EMPTY
7662: LIST
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: LD_INT 34
7673: PUSH
7674: LD_INT 53
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 69
7697: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7698: LD_ADDR_VAR 0 10
7702: PUSH
7703: LD_INT 22
7705: PUSH
7706: LD_VAR 0 1
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 21
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 33
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 3
7737: PUSH
7738: LD_INT 24
7740: PUSH
7741: LD_INT 660
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: PPUSH
7758: CALL_OW 69
7762: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7763: LD_ADDR_VAR 0 11
7767: PUSH
7768: LD_VAR 0 2
7772: PPUSH
7773: LD_INT 22
7775: PUSH
7776: LD_VAR 0 1
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 21
7787: PUSH
7788: LD_INT 2
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 33
7797: PUSH
7798: LD_INT 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 3
7807: PUSH
7808: LD_INT 24
7810: PUSH
7811: LD_INT 1000
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 70
7832: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7833: LD_ADDR_VAR 0 12
7837: PUSH
7838: LD_VAR 0 2
7842: PPUSH
7843: LD_INT 22
7845: PUSH
7846: LD_VAR 0 1
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 21
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 33
7867: PUSH
7868: LD_INT 1
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 24
7877: PUSH
7878: LD_INT 1000
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 58
7887: PUSH
7888: EMPTY
7889: LIST
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 34
7896: PUSH
7897: LD_INT 53
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PPUSH
7916: CALL_OW 70
7920: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7921: LD_ADDR_VAR 0 13
7925: PUSH
7926: EMPTY
7927: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7928: LD_ADDR_VAR 0 14
7932: PUSH
7933: LD_VAR 0 2
7937: PPUSH
7938: LD_INT 22
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 25
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 70
7968: ST_TO_ADDR
// if damageVehicle_list > 0 then
7969: LD_VAR 0 10
7973: PUSH
7974: LD_INT 0
7976: GREATER
7977: IFFALSE 8015
// begin for i in damageVehicle_list do
7979: LD_ADDR_VAR 0 7
7983: PUSH
7984: LD_VAR 0 10
7988: PUSH
7989: FOR_IN
7990: IFFALSE 8013
// begin ComMoveXY ( i , repX , repY ) ;
7992: LD_VAR 0 7
7996: PPUSH
7997: LD_VAR 0 3
8001: PPUSH
8002: LD_VAR 0 4
8006: PPUSH
8007: CALL_OW 111
// end ;
8011: GO 7989
8013: POP
8014: POP
// end ; if vehicleNeedRepair_list > 0 then
8015: LD_VAR 0 11
8019: PUSH
8020: LD_INT 0
8022: GREATER
8023: IFFALSE 8110
// begin for i in vehicleNeedRepair_list do
8025: LD_ADDR_VAR 0 7
8029: PUSH
8030: LD_VAR 0 11
8034: PUSH
8035: FOR_IN
8036: IFFALSE 8108
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8038: LD_ADDR_VAR 0 13
8042: PUSH
8043: LD_VAR 0 13
8047: PUSH
8048: LD_VAR 0 7
8052: PPUSH
8053: CALL_OW 313
8057: ADD
8058: ST_TO_ADDR
// for j in mechanicInside_list do
8059: LD_ADDR_VAR 0 8
8063: PUSH
8064: LD_VAR 0 13
8068: PUSH
8069: FOR_IN
8070: IFFALSE 8104
// begin ComExitVehicle ( i ) ;
8072: LD_VAR 0 7
8076: PPUSH
8077: CALL_OW 121
// wait ( 0 0$1 ) ;
8081: LD_INT 35
8083: PPUSH
8084: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8088: LD_VAR 0 7
8092: PPUSH
8093: LD_VAR 0 8
8097: PPUSH
8098: CALL_OW 129
// end ;
8102: GO 8069
8104: POP
8105: POP
// end ;
8106: GO 8035
8108: POP
8109: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8110: LD_VAR 0 12
8114: PUSH
8115: LD_INT 0
8117: GREATER
8118: IFFALSE 8158
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8120: LD_VAR 0 14
8124: PUSH
8125: LD_INT 1
8127: ARRAY
8128: PPUSH
8129: LD_VAR 0 12
8133: PUSH
8134: LD_INT 1
8136: ARRAY
8137: PPUSH
8138: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8142: LD_VAR 0 12
8146: PUSH
8147: LD_INT 1
8149: ARRAY
8150: PPUSH
8151: LD_INT 100
8153: PPUSH
8154: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8158: LD_VAR 0 9
8162: PUSH
8163: LD_INT 0
8165: GREATER
8166: IFFALSE 8357
// begin for i in vehicleOK_list do
8168: LD_ADDR_VAR 0 7
8172: PUSH
8173: LD_VAR 0 9
8177: PUSH
8178: FOR_IN
8179: IFFALSE 8355
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8181: LD_ADDR_VAR 0 15
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_VAR 0 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 69
8202: PPUSH
8203: LD_VAR 0 7
8207: PPUSH
8208: CALL_OW 74
8212: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8213: LD_ADDR_VAR 0 16
8217: PUSH
8218: LD_INT 22
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 59
8235: PUSH
8236: EMPTY
8237: LIST
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 1
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 21
8251: PUSH
8252: LD_INT 2
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: PPUSH
8272: CALL_OW 69
8276: PPUSH
8277: LD_VAR 0 7
8281: PPUSH
8282: CALL_OW 74
8286: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8287: LD_VAR 0 7
8291: PPUSH
8292: LD_VAR 0 15
8296: PPUSH
8297: CALL_OW 296
8301: PUSH
8302: LD_INT 8
8304: PLUS
8305: PUSH
8306: LD_VAR 0 7
8310: PPUSH
8311: LD_VAR 0 16
8315: PPUSH
8316: CALL_OW 296
8320: LESS
8321: IFFALSE 8339
// begin ComAttackUnit ( i , target1 ) ;
8323: LD_VAR 0 7
8327: PPUSH
8328: LD_VAR 0 15
8332: PPUSH
8333: CALL_OW 115
// end else
8337: GO 8353
// begin ComAttackUnit ( i , target2 ) ;
8339: LD_VAR 0 7
8343: PPUSH
8344: LD_VAR 0 16
8348: PPUSH
8349: CALL_OW 115
// end ; end ;
8353: GO 8178
8355: POP
8356: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8357: LD_ADDR_VAR 0 7
8361: PUSH
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_INT 22
8369: PUSH
8370: LD_VAR 0 1
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 25
8381: PUSH
8382: LD_INT 3
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PPUSH
8393: CALL_OW 70
8397: NOT
8398: PUSH
8399: FOR_IN
8400: IFFALSE 8423
// ComMoveXY ( i , repX , repY ) ;
8402: LD_VAR 0 7
8406: PPUSH
8407: LD_VAR 0 3
8411: PPUSH
8412: LD_VAR 0 4
8416: PPUSH
8417: CALL_OW 111
8421: GO 8399
8423: POP
8424: POP
// end ;
8425: LD_VAR 0 6
8429: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
8430: LD_INT 0
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
8436: PPUSH
8437: PPUSH
8438: PPUSH
8439: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8440: LD_INT 22
8442: PUSH
8443: LD_VAR 0 1
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: PUSH
8471: LD_VAR 0 3
8475: LESSEQUAL
8476: IFFALSE 8543
// for i = 1 to vehCount do
8478: LD_ADDR_VAR 0 10
8482: PUSH
8483: DOUBLE
8484: LD_INT 1
8486: DEC
8487: ST_TO_ADDR
8488: LD_VAR 0 3
8492: PUSH
8493: FOR_TO
8494: IFFALSE 8541
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_VAR 0 8
8505: PPUSH
8506: LD_VAR 0 6
8510: PPUSH
8511: LD_VAR 0 7
8515: PPUSH
8516: LD_VAR 0 5
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 5
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: PPUSH
8535: CALL_OW 185
8539: GO 8493
8541: POP
8542: POP
// repeat wait ( 0 0$1 ) ;
8543: LD_INT 35
8545: PPUSH
8546: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
8550: LD_INT 22
8552: PUSH
8553: LD_VAR 0 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 21
8564: PUSH
8565: LD_INT 2
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 24
8574: PUSH
8575: LD_INT 250
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 69
8591: PUSH
8592: LD_VAR 0 3
8596: GREATEREQUAL
8597: IFFALSE 8543
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
8599: LD_INT 22
8601: PUSH
8602: LD_VAR 0 1
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 21
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 24
8623: PUSH
8624: LD_INT 250
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: PPUSH
8636: CALL_OW 69
8640: PUSH
8641: LD_VAR 0 3
8645: GREATEREQUAL
8646: IFFALSE 8989
// begin repeat begin wait ( 0 0$1 ) ;
8648: LD_INT 35
8650: PPUSH
8651: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
8655: LD_INT 22
8657: PUSH
8658: LD_VAR 0 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 24
8679: PUSH
8680: LD_INT 651
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 69
8696: PUSH
8697: LD_INT 0
8699: GREATER
8700: IFFALSE 8928
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
8702: LD_ADDR_VAR 0 10
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_VAR 0 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 21
8721: PUSH
8722: LD_INT 2
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 651
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 69
8748: PUSH
8749: FOR_IN
8750: IFFALSE 8926
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8752: LD_ADDR_VAR 0 15
8756: PUSH
8757: LD_INT 22
8759: PUSH
8760: LD_VAR 0 4
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 69
8773: PPUSH
8774: LD_VAR 0 10
8778: PPUSH
8779: CALL_OW 74
8783: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8784: LD_ADDR_VAR 0 16
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 4
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 2
8803: PUSH
8804: LD_INT 59
8806: PUSH
8807: EMPTY
8808: LIST
8809: PUSH
8810: LD_INT 21
8812: PUSH
8813: LD_INT 1
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 21
8822: PUSH
8823: LD_INT 2
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: PPUSH
8843: CALL_OW 69
8847: PPUSH
8848: LD_VAR 0 10
8852: PPUSH
8853: CALL_OW 74
8857: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8858: LD_VAR 0 10
8862: PPUSH
8863: LD_VAR 0 15
8867: PPUSH
8868: CALL_OW 296
8872: PUSH
8873: LD_INT 8
8875: PLUS
8876: PUSH
8877: LD_VAR 0 10
8881: PPUSH
8882: LD_VAR 0 16
8886: PPUSH
8887: CALL_OW 296
8891: LESS
8892: IFFALSE 8910
// begin ComAttackUnit ( i , target1 ) ;
8894: LD_VAR 0 10
8898: PPUSH
8899: LD_VAR 0 15
8903: PPUSH
8904: CALL_OW 115
// end else
8908: GO 8924
// begin ComAttackUnit ( i , target2 ) ;
8910: LD_VAR 0 10
8914: PPUSH
8915: LD_VAR 0 16
8919: PPUSH
8920: CALL_OW 115
// end ; end ;
8924: GO 8749
8926: POP
8927: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
8928: LD_INT 22
8930: PUSH
8931: LD_VAR 0 1
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 21
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PPUSH
8954: CALL_OW 69
8958: PUSH
8959: LD_INT 0
8961: EQUAL
8962: PUSH
8963: LD_INT 22
8965: PUSH
8966: LD_VAR 0 4
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: PPUSH
8978: CALL_OW 69
8982: PUSH
8983: LD_INT 0
8985: EQUAL
8986: OR
8987: IFFALSE 8648
// end ; end ;
8989: LD_VAR 0 9
8993: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8994: LD_INT 0
8996: PPUSH
8997: PPUSH
8998: PPUSH
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
9005: PPUSH
9006: PPUSH
// for i = 1 to medicCount do
9007: LD_ADDR_VAR 0 14
9011: PUSH
9012: DOUBLE
9013: LD_INT 1
9015: DEC
9016: ST_TO_ADDR
9017: LD_VAR 0 7
9021: PUSH
9022: FOR_TO
9023: IFFALSE 9105
// begin uc_side = side ;
9025: LD_ADDR_OWVAR 20
9029: PUSH
9030: LD_VAR 0 1
9034: ST_TO_ADDR
// uc_nation = nation ;
9035: LD_ADDR_OWVAR 21
9039: PUSH
9040: LD_VAR 0 2
9044: ST_TO_ADDR
// hc_name =  ;
9045: LD_ADDR_OWVAR 26
9049: PUSH
9050: LD_STRING 
9052: ST_TO_ADDR
// hc_gallery =  ;
9053: LD_ADDR_OWVAR 33
9057: PUSH
9058: LD_STRING 
9060: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9061: LD_INT 0
9063: PPUSH
9064: LD_INT 4
9066: PPUSH
9067: LD_VAR 0 8
9071: PPUSH
9072: CALL_OW 380
// un = CreateHuman ;
9076: LD_ADDR_VAR 0 16
9080: PUSH
9081: CALL_OW 44
9085: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9086: LD_VAR 0 16
9090: PPUSH
9091: LD_VAR 0 9
9095: PPUSH
9096: LD_INT 0
9098: PPUSH
9099: CALL_OW 49
// end ;
9103: GO 9022
9105: POP
9106: POP
// for i = 1 to soldierCount do
9107: LD_ADDR_VAR 0 14
9111: PUSH
9112: DOUBLE
9113: LD_INT 1
9115: DEC
9116: ST_TO_ADDR
9117: LD_VAR 0 3
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9205
// begin uc_side = side ;
9125: LD_ADDR_OWVAR 20
9129: PUSH
9130: LD_VAR 0 1
9134: ST_TO_ADDR
// uc_nation = nation ;
9135: LD_ADDR_OWVAR 21
9139: PUSH
9140: LD_VAR 0 2
9144: ST_TO_ADDR
// hc_name =  ;
9145: LD_ADDR_OWVAR 26
9149: PUSH
9150: LD_STRING 
9152: ST_TO_ADDR
// hc_gallery =  ;
9153: LD_ADDR_OWVAR 33
9157: PUSH
9158: LD_STRING 
9160: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9161: LD_INT 0
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: LD_VAR 0 8
9171: PPUSH
9172: CALL_OW 380
// un = CreateHuman ;
9176: LD_ADDR_VAR 0 16
9180: PUSH
9181: CALL_OW 44
9185: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9186: LD_VAR 0 16
9190: PPUSH
9191: LD_VAR 0 9
9195: PPUSH
9196: LD_INT 0
9198: PPUSH
9199: CALL_OW 49
// end ;
9203: GO 9122
9205: POP
9206: POP
// for i = 1 to sniperCount do
9207: LD_ADDR_VAR 0 14
9211: PUSH
9212: DOUBLE
9213: LD_INT 1
9215: DEC
9216: ST_TO_ADDR
9217: LD_VAR 0 4
9221: PUSH
9222: FOR_TO
9223: IFFALSE 9305
// begin uc_side = side ;
9225: LD_ADDR_OWVAR 20
9229: PUSH
9230: LD_VAR 0 1
9234: ST_TO_ADDR
// uc_nation = nation ;
9235: LD_ADDR_OWVAR 21
9239: PUSH
9240: LD_VAR 0 2
9244: ST_TO_ADDR
// hc_name =  ;
9245: LD_ADDR_OWVAR 26
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// hc_gallery =  ;
9253: LD_ADDR_OWVAR 33
9257: PUSH
9258: LD_STRING 
9260: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9261: LD_INT 0
9263: PPUSH
9264: LD_INT 5
9266: PPUSH
9267: LD_VAR 0 8
9271: PPUSH
9272: CALL_OW 380
// un = CreateHuman ;
9276: LD_ADDR_VAR 0 16
9280: PUSH
9281: CALL_OW 44
9285: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9286: LD_VAR 0 16
9290: PPUSH
9291: LD_VAR 0 9
9295: PPUSH
9296: LD_INT 0
9298: PPUSH
9299: CALL_OW 49
// end ;
9303: GO 9222
9305: POP
9306: POP
// for i = 1 to bazookCount do
9307: LD_ADDR_VAR 0 14
9311: PUSH
9312: DOUBLE
9313: LD_INT 1
9315: DEC
9316: ST_TO_ADDR
9317: LD_VAR 0 5
9321: PUSH
9322: FOR_TO
9323: IFFALSE 9405
// begin uc_side = side ;
9325: LD_ADDR_OWVAR 20
9329: PUSH
9330: LD_VAR 0 1
9334: ST_TO_ADDR
// uc_nation = nation ;
9335: LD_ADDR_OWVAR 21
9339: PUSH
9340: LD_VAR 0 2
9344: ST_TO_ADDR
// hc_name =  ;
9345: LD_ADDR_OWVAR 26
9349: PUSH
9350: LD_STRING 
9352: ST_TO_ADDR
// hc_gallery =  ;
9353: LD_ADDR_OWVAR 33
9357: PUSH
9358: LD_STRING 
9360: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9361: LD_INT 0
9363: PPUSH
9364: LD_INT 9
9366: PPUSH
9367: LD_VAR 0 8
9371: PPUSH
9372: CALL_OW 380
// un = CreateHuman ;
9376: LD_ADDR_VAR 0 16
9380: PUSH
9381: CALL_OW 44
9385: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9386: LD_VAR 0 16
9390: PPUSH
9391: LD_VAR 0 9
9395: PPUSH
9396: LD_INT 0
9398: PPUSH
9399: CALL_OW 49
// end ;
9403: GO 9322
9405: POP
9406: POP
// for i = 1 to mortalCount do
9407: LD_ADDR_VAR 0 14
9411: PUSH
9412: DOUBLE
9413: LD_INT 1
9415: DEC
9416: ST_TO_ADDR
9417: LD_VAR 0 6
9421: PUSH
9422: FOR_TO
9423: IFFALSE 9505
// begin uc_side = side ;
9425: LD_ADDR_OWVAR 20
9429: PUSH
9430: LD_VAR 0 1
9434: ST_TO_ADDR
// uc_nation = nation ;
9435: LD_ADDR_OWVAR 21
9439: PUSH
9440: LD_VAR 0 2
9444: ST_TO_ADDR
// hc_name =  ;
9445: LD_ADDR_OWVAR 26
9449: PUSH
9450: LD_STRING 
9452: ST_TO_ADDR
// hc_gallery =  ;
9453: LD_ADDR_OWVAR 33
9457: PUSH
9458: LD_STRING 
9460: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9461: LD_INT 0
9463: PPUSH
9464: LD_INT 8
9466: PPUSH
9467: LD_VAR 0 8
9471: PPUSH
9472: CALL_OW 380
// un = CreateHuman ;
9476: LD_ADDR_VAR 0 16
9480: PUSH
9481: CALL_OW 44
9485: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9486: LD_VAR 0 16
9490: PPUSH
9491: LD_VAR 0 9
9495: PPUSH
9496: LD_INT 0
9498: PPUSH
9499: CALL_OW 49
// end ;
9503: GO 9422
9505: POP
9506: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9507: LD_ADDR_VAR 0 19
9511: PUSH
9512: LD_INT 22
9514: PUSH
9515: LD_VAR 0 1
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: LD_INT 25
9529: PUSH
9530: LD_INT 1
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 25
9539: PUSH
9540: LD_INT 5
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 25
9549: PUSH
9550: LD_INT 8
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 25
9559: PUSH
9560: LD_INT 9
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9583: LD_ADDR_VAR 0 18
9587: PUSH
9588: LD_INT 22
9590: PUSH
9591: LD_VAR 0 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 4
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: ST_TO_ADDR
// for i in medic_list do
9619: LD_ADDR_VAR 0 14
9623: PUSH
9624: LD_VAR 0 18
9628: PUSH
9629: FOR_IN
9630: IFFALSE 9648
// ComMoveToArea ( i , healArea ) ;
9632: LD_VAR 0 14
9636: PPUSH
9637: LD_VAR 0 10
9641: PPUSH
9642: CALL_OW 113
9646: GO 9629
9648: POP
9649: POP
// if strategy = 1 then
9650: LD_VAR 0 12
9654: PUSH
9655: LD_INT 1
9657: EQUAL
9658: IFFALSE 10393
// begin repeat wait ( 0 0$3 ) ;
9660: LD_INT 105
9662: PPUSH
9663: CALL_OW 67
// for i in soldiersOK_list do
9667: LD_ADDR_VAR 0 14
9671: PUSH
9672: LD_VAR 0 19
9676: PUSH
9677: FOR_IN
9678: IFFALSE 9742
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9680: LD_VAR 0 14
9684: PPUSH
9685: LD_INT 91
9687: PPUSH
9688: LD_INT 63
9690: PPUSH
9691: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
9695: LD_VAR 0 14
9699: PPUSH
9700: LD_INT 101
9702: PPUSH
9703: LD_INT 53
9705: PPUSH
9706: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
9710: LD_VAR 0 14
9714: PPUSH
9715: LD_INT 75
9717: PPUSH
9718: LD_INT 23
9720: PPUSH
9721: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
9725: LD_VAR 0 14
9729: PPUSH
9730: LD_INT 78
9732: PPUSH
9733: LD_INT 8
9735: PPUSH
9736: CALL_OW 174
// end ;
9740: GO 9677
9742: POP
9743: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
9744: LD_INT 12
9746: PPUSH
9747: LD_INT 22
9749: PUSH
9750: LD_VAR 0 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PPUSH
9759: CALL_OW 70
9763: PUSH
9764: LD_INT 2
9766: GREATER
9767: IFFALSE 9660
// repeat wait ( 0 0$1 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9776: LD_ADDR_VAR 0 17
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_VAR 0 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 1
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: LD_INT 24
9801: PUSH
9802: LD_INT 550
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 24
9815: PUSH
9816: LD_INT 250
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PPUSH
9832: CALL_OW 69
9836: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9837: LD_ADDR_VAR 0 19
9841: PUSH
9842: LD_INT 22
9844: PUSH
9845: LD_VAR 0 1
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 2
9856: PUSH
9857: LD_INT 25
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 25
9869: PUSH
9870: LD_INT 5
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 25
9879: PUSH
9880: LD_INT 8
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 25
9889: PUSH
9890: LD_INT 9
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 24
9906: PUSH
9907: LD_INT 1000
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 69
9923: ST_TO_ADDR
// if medicCount > 0 then
9924: LD_VAR 0 7
9928: PUSH
9929: LD_INT 0
9931: GREATER
9932: IFFALSE 10006
// begin if damageUnit_list > 0 then
9934: LD_VAR 0 17
9938: PUSH
9939: LD_INT 0
9941: GREATER
9942: IFFALSE 10006
// begin for i in damageUnit_list do
9944: LD_ADDR_VAR 0 14
9948: PUSH
9949: LD_VAR 0 17
9953: PUSH
9954: FOR_IN
9955: IFFALSE 10004
// begin ComMoveToArea ( i , healArea ) ;
9957: LD_VAR 0 14
9961: PPUSH
9962: LD_VAR 0 10
9966: PPUSH
9967: CALL_OW 113
// for j in medic_list do
9971: LD_ADDR_VAR 0 15
9975: PUSH
9976: LD_VAR 0 18
9980: PUSH
9981: FOR_IN
9982: IFFALSE 10000
// AddComHeal ( j , i ) ;
9984: LD_VAR 0 15
9988: PPUSH
9989: LD_VAR 0 14
9993: PPUSH
9994: CALL_OW 188
9998: GO 9981
10000: POP
10001: POP
// end ;
10002: GO 9954
10004: POP
10005: POP
// end ; end ; for i in soldiersOK_list do
10006: LD_ADDR_VAR 0 14
10010: PUSH
10011: LD_VAR 0 19
10015: PUSH
10016: FOR_IN
10017: IFFALSE 10193
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10019: LD_ADDR_VAR 0 22
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_VAR 0 11
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 69
10040: PPUSH
10041: LD_VAR 0 14
10045: PPUSH
10046: CALL_OW 74
10050: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10051: LD_ADDR_VAR 0 23
10055: PUSH
10056: LD_INT 22
10058: PUSH
10059: LD_VAR 0 11
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: LD_INT 59
10073: PUSH
10074: EMPTY
10075: LIST
10076: PUSH
10077: LD_INT 21
10079: PUSH
10080: LD_INT 1
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 21
10089: PUSH
10090: LD_INT 2
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: PPUSH
10110: CALL_OW 69
10114: PPUSH
10115: LD_VAR 0 14
10119: PPUSH
10120: CALL_OW 74
10124: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10125: LD_VAR 0 14
10129: PPUSH
10130: LD_VAR 0 22
10134: PPUSH
10135: CALL_OW 296
10139: PUSH
10140: LD_INT 8
10142: PLUS
10143: PUSH
10144: LD_VAR 0 14
10148: PPUSH
10149: LD_VAR 0 23
10153: PPUSH
10154: CALL_OW 296
10158: LESS
10159: IFFALSE 10177
// begin ComAttackUnit ( i , target1 ) ;
10161: LD_VAR 0 14
10165: PPUSH
10166: LD_VAR 0 22
10170: PPUSH
10171: CALL_OW 115
// end else
10175: GO 10191
// begin ComAttackUnit ( i , target2 ) ;
10177: LD_VAR 0 14
10181: PPUSH
10182: LD_VAR 0 23
10186: PPUSH
10187: CALL_OW 115
// end ; end ;
10191: GO 10016
10193: POP
10194: POP
// for i in soldiersOK_list do
10195: LD_ADDR_VAR 0 14
10199: PUSH
10200: LD_VAR 0 19
10204: PUSH
10205: FOR_IN
10206: IFFALSE 10382
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10208: LD_ADDR_VAR 0 22
10212: PUSH
10213: LD_INT 22
10215: PUSH
10216: LD_VAR 0 11
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 69
10229: PPUSH
10230: LD_VAR 0 14
10234: PPUSH
10235: CALL_OW 74
10239: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10240: LD_ADDR_VAR 0 23
10244: PUSH
10245: LD_INT 22
10247: PUSH
10248: LD_VAR 0 11
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 2
10259: PUSH
10260: LD_INT 59
10262: PUSH
10263: EMPTY
10264: LIST
10265: PUSH
10266: LD_INT 21
10268: PUSH
10269: LD_INT 1
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: EMPTY
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PPUSH
10304: LD_VAR 0 14
10308: PPUSH
10309: CALL_OW 74
10313: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10314: LD_VAR 0 14
10318: PPUSH
10319: LD_VAR 0 22
10323: PPUSH
10324: CALL_OW 296
10328: PUSH
10329: LD_INT 8
10331: PLUS
10332: PUSH
10333: LD_VAR 0 14
10337: PPUSH
10338: LD_VAR 0 23
10342: PPUSH
10343: CALL_OW 296
10347: LESS
10348: IFFALSE 10366
// begin ComAttackUnit ( i , target1 ) ;
10350: LD_VAR 0 14
10354: PPUSH
10355: LD_VAR 0 22
10359: PPUSH
10360: CALL_OW 115
// end else
10364: GO 10380
// begin ComAttackUnit ( i , target2 ) ;
10366: LD_VAR 0 14
10370: PPUSH
10371: LD_VAR 0 23
10375: PPUSH
10376: CALL_OW 115
// end ; end ;
10380: GO 10205
10382: POP
10383: POP
// until soldiersOK_list = [ ] ;
10384: LD_VAR 0 19
10388: PUSH
10389: EMPTY
10390: EQUAL
10391: IFFALSE 9769
// end ; if strategy = 2 then
10393: LD_VAR 0 12
10397: PUSH
10398: LD_INT 2
10400: EQUAL
10401: IFFALSE 11106
// begin repeat wait ( 0 0$1 ) ;
10403: LD_INT 35
10405: PPUSH
10406: CALL_OW 67
// for i in soldiersOK_list do
10410: LD_ADDR_VAR 0 14
10414: PUSH
10415: LD_VAR 0 19
10419: PUSH
10420: FOR_IN
10421: IFFALSE 10455
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10423: LD_VAR 0 14
10427: PPUSH
10428: LD_INT 91
10430: PPUSH
10431: LD_INT 63
10433: PPUSH
10434: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
10438: LD_VAR 0 14
10442: PPUSH
10443: LD_INT 75
10445: PPUSH
10446: LD_INT 33
10448: PPUSH
10449: CALL_OW 174
// end ;
10453: GO 10420
10455: POP
10456: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
10457: LD_INT 13
10459: PPUSH
10460: LD_INT 22
10462: PUSH
10463: LD_VAR 0 1
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 70
10476: PUSH
10477: LD_INT 2
10479: GREATER
10480: IFFALSE 10403
// repeat wait ( 0 0$3 ) ;
10482: LD_INT 105
10484: PPUSH
10485: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10489: LD_ADDR_VAR 0 17
10493: PUSH
10494: LD_INT 22
10496: PUSH
10497: LD_VAR 0 1
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: LD_INT 3
10511: PUSH
10512: LD_INT 24
10514: PUSH
10515: LD_INT 550
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 24
10528: PUSH
10529: LD_INT 250
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 69
10549: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10550: LD_ADDR_VAR 0 19
10554: PUSH
10555: LD_INT 22
10557: PUSH
10558: LD_VAR 0 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 2
10569: PUSH
10570: LD_INT 25
10572: PUSH
10573: LD_INT 1
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 25
10582: PUSH
10583: LD_INT 5
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 25
10592: PUSH
10593: LD_INT 8
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 25
10602: PUSH
10603: LD_INT 9
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 24
10619: PUSH
10620: LD_INT 1000
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: PPUSH
10632: CALL_OW 69
10636: ST_TO_ADDR
// if medicCount > 0 then
10637: LD_VAR 0 7
10641: PUSH
10642: LD_INT 0
10644: GREATER
10645: IFFALSE 10719
// begin if damageUnit_list > 0 then
10647: LD_VAR 0 17
10651: PUSH
10652: LD_INT 0
10654: GREATER
10655: IFFALSE 10719
// begin for i in damageUnit_list do
10657: LD_ADDR_VAR 0 14
10661: PUSH
10662: LD_VAR 0 17
10666: PUSH
10667: FOR_IN
10668: IFFALSE 10717
// begin ComMoveToArea ( i , healArea ) ;
10670: LD_VAR 0 14
10674: PPUSH
10675: LD_VAR 0 10
10679: PPUSH
10680: CALL_OW 113
// for j in medic_list do
10684: LD_ADDR_VAR 0 15
10688: PUSH
10689: LD_VAR 0 18
10693: PUSH
10694: FOR_IN
10695: IFFALSE 10713
// AddComHeal ( j , i ) ;
10697: LD_VAR 0 15
10701: PPUSH
10702: LD_VAR 0 14
10706: PPUSH
10707: CALL_OW 188
10711: GO 10694
10713: POP
10714: POP
// end ;
10715: GO 10667
10717: POP
10718: POP
// end ; end ; for i in soldiersOK_list do
10719: LD_ADDR_VAR 0 14
10723: PUSH
10724: LD_VAR 0 19
10728: PUSH
10729: FOR_IN
10730: IFFALSE 10906
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10732: LD_ADDR_VAR 0 22
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_VAR 0 11
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: PPUSH
10754: LD_VAR 0 14
10758: PPUSH
10759: CALL_OW 74
10763: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10764: LD_ADDR_VAR 0 23
10768: PUSH
10769: LD_INT 22
10771: PUSH
10772: LD_VAR 0 11
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 2
10783: PUSH
10784: LD_INT 59
10786: PUSH
10787: EMPTY
10788: LIST
10789: PUSH
10790: LD_INT 21
10792: PUSH
10793: LD_INT 1
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 21
10802: PUSH
10803: LD_INT 2
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: EMPTY
10821: LIST
10822: PPUSH
10823: CALL_OW 69
10827: PPUSH
10828: LD_VAR 0 14
10832: PPUSH
10833: CALL_OW 74
10837: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10838: LD_VAR 0 14
10842: PPUSH
10843: LD_VAR 0 22
10847: PPUSH
10848: CALL_OW 296
10852: PUSH
10853: LD_INT 8
10855: PLUS
10856: PUSH
10857: LD_VAR 0 14
10861: PPUSH
10862: LD_VAR 0 23
10866: PPUSH
10867: CALL_OW 296
10871: LESS
10872: IFFALSE 10890
// begin ComAttackUnit ( i , target1 ) ;
10874: LD_VAR 0 14
10878: PPUSH
10879: LD_VAR 0 22
10883: PPUSH
10884: CALL_OW 115
// end else
10888: GO 10904
// begin ComAttackUnit ( i , target2 ) ;
10890: LD_VAR 0 14
10894: PPUSH
10895: LD_VAR 0 23
10899: PPUSH
10900: CALL_OW 115
// end ; end ;
10904: GO 10729
10906: POP
10907: POP
// for i in soldiersOK_list do
10908: LD_ADDR_VAR 0 14
10912: PUSH
10913: LD_VAR 0 19
10917: PUSH
10918: FOR_IN
10919: IFFALSE 11095
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10921: LD_ADDR_VAR 0 22
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_VAR 0 11
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 14
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10953: LD_ADDR_VAR 0 23
10957: PUSH
10958: LD_INT 22
10960: PUSH
10961: LD_VAR 0 11
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: LD_INT 59
10975: PUSH
10976: EMPTY
10977: LIST
10978: PUSH
10979: LD_INT 21
10981: PUSH
10982: LD_INT 1
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 21
10991: PUSH
10992: LD_INT 2
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: PPUSH
11012: CALL_OW 69
11016: PPUSH
11017: LD_VAR 0 14
11021: PPUSH
11022: CALL_OW 74
11026: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11027: LD_VAR 0 14
11031: PPUSH
11032: LD_VAR 0 22
11036: PPUSH
11037: CALL_OW 296
11041: PUSH
11042: LD_INT 8
11044: PLUS
11045: PUSH
11046: LD_VAR 0 14
11050: PPUSH
11051: LD_VAR 0 23
11055: PPUSH
11056: CALL_OW 296
11060: LESS
11061: IFFALSE 11079
// begin ComAttackUnit ( i , target1 ) ;
11063: LD_VAR 0 14
11067: PPUSH
11068: LD_VAR 0 22
11072: PPUSH
11073: CALL_OW 115
// end else
11077: GO 11093
// begin ComAttackUnit ( i , target2 ) ;
11079: LD_VAR 0 14
11083: PPUSH
11084: LD_VAR 0 23
11088: PPUSH
11089: CALL_OW 115
// end ; end ;
11093: GO 10918
11095: POP
11096: POP
// until soldiersOK_list = [ ] ;
11097: LD_VAR 0 19
11101: PUSH
11102: EMPTY
11103: EQUAL
11104: IFFALSE 10482
// end ; if strategy = 3 then
11106: LD_VAR 0 12
11110: PUSH
11111: LD_INT 3
11113: EQUAL
11114: IFFALSE 11849
// begin repeat wait ( 0 0$3 ) ;
11116: LD_INT 105
11118: PPUSH
11119: CALL_OW 67
// for i in soldiersOK_list do
11123: LD_ADDR_VAR 0 14
11127: PUSH
11128: LD_VAR 0 19
11132: PUSH
11133: FOR_IN
11134: IFFALSE 11198
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11136: LD_VAR 0 14
11140: PPUSH
11141: LD_INT 63
11143: PPUSH
11144: LD_INT 71
11146: PPUSH
11147: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
11151: LD_VAR 0 14
11155: PPUSH
11156: LD_INT 35
11158: PPUSH
11159: LD_INT 44
11161: PPUSH
11162: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
11166: LD_VAR 0 14
11170: PPUSH
11171: LD_INT 23
11173: PPUSH
11174: LD_INT 18
11176: PPUSH
11177: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
11181: LD_VAR 0 14
11185: PPUSH
11186: LD_INT 26
11188: PPUSH
11189: LD_INT 12
11191: PPUSH
11192: CALL_OW 174
// end ;
11196: GO 11133
11198: POP
11199: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11200: LD_INT 14
11202: PPUSH
11203: LD_INT 22
11205: PUSH
11206: LD_VAR 0 1
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 70
11219: PUSH
11220: LD_INT 2
11222: GREATER
11223: IFFALSE 11116
// repeat wait ( 0 0$1 ) ;
11225: LD_INT 35
11227: PPUSH
11228: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11232: LD_ADDR_VAR 0 17
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_VAR 0 1
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: LD_INT 3
11254: PUSH
11255: LD_INT 24
11257: PUSH
11258: LD_INT 550
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 24
11271: PUSH
11272: LD_INT 250
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11293: LD_ADDR_VAR 0 19
11297: PUSH
11298: LD_INT 22
11300: PUSH
11301: LD_VAR 0 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 2
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 25
11325: PUSH
11326: LD_INT 5
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 25
11335: PUSH
11336: LD_INT 8
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 25
11345: PUSH
11346: LD_INT 9
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 24
11362: PUSH
11363: LD_INT 1000
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: ST_TO_ADDR
// if medicCount > 0 then
11380: LD_VAR 0 7
11384: PUSH
11385: LD_INT 0
11387: GREATER
11388: IFFALSE 11462
// begin if damageUnit_list > 0 then
11390: LD_VAR 0 17
11394: PUSH
11395: LD_INT 0
11397: GREATER
11398: IFFALSE 11462
// begin for i in damageUnit_list do
11400: LD_ADDR_VAR 0 14
11404: PUSH
11405: LD_VAR 0 17
11409: PUSH
11410: FOR_IN
11411: IFFALSE 11460
// begin ComMoveToArea ( i , healArea ) ;
11413: LD_VAR 0 14
11417: PPUSH
11418: LD_VAR 0 10
11422: PPUSH
11423: CALL_OW 113
// for j in medic_list do
11427: LD_ADDR_VAR 0 15
11431: PUSH
11432: LD_VAR 0 18
11436: PUSH
11437: FOR_IN
11438: IFFALSE 11456
// AddComHeal ( j , i ) ;
11440: LD_VAR 0 15
11444: PPUSH
11445: LD_VAR 0 14
11449: PPUSH
11450: CALL_OW 188
11454: GO 11437
11456: POP
11457: POP
// end ;
11458: GO 11410
11460: POP
11461: POP
// end ; end ; for i in soldiersOK_list do
11462: LD_ADDR_VAR 0 14
11466: PUSH
11467: LD_VAR 0 19
11471: PUSH
11472: FOR_IN
11473: IFFALSE 11649
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11475: LD_ADDR_VAR 0 22
11479: PUSH
11480: LD_INT 22
11482: PUSH
11483: LD_VAR 0 11
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PPUSH
11492: CALL_OW 69
11496: PPUSH
11497: LD_VAR 0 14
11501: PPUSH
11502: CALL_OW 74
11506: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11507: LD_ADDR_VAR 0 23
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_VAR 0 11
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 2
11526: PUSH
11527: LD_INT 59
11529: PUSH
11530: EMPTY
11531: LIST
11532: PUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 21
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: PPUSH
11571: LD_VAR 0 14
11575: PPUSH
11576: CALL_OW 74
11580: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11581: LD_VAR 0 14
11585: PPUSH
11586: LD_VAR 0 22
11590: PPUSH
11591: CALL_OW 296
11595: PUSH
11596: LD_INT 8
11598: PLUS
11599: PUSH
11600: LD_VAR 0 14
11604: PPUSH
11605: LD_VAR 0 23
11609: PPUSH
11610: CALL_OW 296
11614: LESS
11615: IFFALSE 11633
// begin ComAttackUnit ( i , target1 ) ;
11617: LD_VAR 0 14
11621: PPUSH
11622: LD_VAR 0 22
11626: PPUSH
11627: CALL_OW 115
// end else
11631: GO 11647
// begin ComAttackUnit ( i , target2 ) ;
11633: LD_VAR 0 14
11637: PPUSH
11638: LD_VAR 0 23
11642: PPUSH
11643: CALL_OW 115
// end ; end ;
11647: GO 11472
11649: POP
11650: POP
// for i in soldiersOK_list do
11651: LD_ADDR_VAR 0 14
11655: PUSH
11656: LD_VAR 0 19
11660: PUSH
11661: FOR_IN
11662: IFFALSE 11838
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11664: LD_ADDR_VAR 0 22
11668: PUSH
11669: LD_INT 22
11671: PUSH
11672: LD_VAR 0 11
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PPUSH
11681: CALL_OW 69
11685: PPUSH
11686: LD_VAR 0 14
11690: PPUSH
11691: CALL_OW 74
11695: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11696: LD_ADDR_VAR 0 23
11700: PUSH
11701: LD_INT 22
11703: PUSH
11704: LD_VAR 0 11
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 2
11715: PUSH
11716: LD_INT 59
11718: PUSH
11719: EMPTY
11720: LIST
11721: PUSH
11722: LD_INT 21
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 21
11734: PUSH
11735: LD_INT 2
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: PPUSH
11755: CALL_OW 69
11759: PPUSH
11760: LD_VAR 0 14
11764: PPUSH
11765: CALL_OW 74
11769: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11770: LD_VAR 0 14
11774: PPUSH
11775: LD_VAR 0 22
11779: PPUSH
11780: CALL_OW 296
11784: PUSH
11785: LD_INT 8
11787: PLUS
11788: PUSH
11789: LD_VAR 0 14
11793: PPUSH
11794: LD_VAR 0 23
11798: PPUSH
11799: CALL_OW 296
11803: LESS
11804: IFFALSE 11822
// begin ComAttackUnit ( i , target1 ) ;
11806: LD_VAR 0 14
11810: PPUSH
11811: LD_VAR 0 22
11815: PPUSH
11816: CALL_OW 115
// end else
11820: GO 11836
// begin ComAttackUnit ( i , target2 ) ;
11822: LD_VAR 0 14
11826: PPUSH
11827: LD_VAR 0 23
11831: PPUSH
11832: CALL_OW 115
// end ; end ;
11836: GO 11661
11838: POP
11839: POP
// until soldiersOK_list = [ ] ;
11840: LD_VAR 0 19
11844: PUSH
11845: EMPTY
11846: EQUAL
11847: IFFALSE 11225
// end ; end ;
11849: LD_VAR 0 13
11853: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
11854: LD_INT 0
11856: PPUSH
11857: PPUSH
11858: PPUSH
11859: PPUSH
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
11864: PPUSH
11865: PPUSH
11866: PPUSH
// amChassisTab = [ ] ;
11867: LD_ADDR_VAR 0 19
11871: PUSH
11872: EMPTY
11873: ST_TO_ADDR
// arChassisTab = [ ] ;
11874: LD_ADDR_VAR 0 18
11878: PUSH
11879: EMPTY
11880: ST_TO_ADDR
// ruChassisTab = [ ] ;
11881: LD_ADDR_VAR 0 17
11885: PUSH
11886: EMPTY
11887: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11888: LD_INT 35
11890: PPUSH
11891: CALL_OW 67
// if nation = 1 then
11895: LD_VAR 0 5
11899: PUSH
11900: LD_INT 1
11902: EQUAL
11903: IFFALSE 12394
// begin uc_side = side ;
11905: LD_ADDR_OWVAR 20
11909: PUSH
11910: LD_VAR 0 2
11914: ST_TO_ADDR
// uc_nation = nation ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_VAR 0 5
11924: ST_TO_ADDR
// vc_engine = vehengine ;
11925: LD_ADDR_OWVAR 39
11929: PUSH
11930: LD_VAR 0 6
11934: ST_TO_ADDR
// vc_control = vehcontrol ;
11935: LD_ADDR_OWVAR 38
11939: PUSH
11940: LD_VAR 0 7
11944: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
11945: LD_ADDR_OWVAR 40
11949: PUSH
11950: LD_VAR 0 10
11954: PUSH
11955: LD_INT 1
11957: PPUSH
11958: LD_VAR 0 10
11962: PPUSH
11963: CALL_OW 12
11967: ARRAY
11968: ST_TO_ADDR
// for j = 1 to AMWeapon do
11969: LD_ADDR_VAR 0 14
11973: PUSH
11974: DOUBLE
11975: LD_INT 1
11977: DEC
11978: ST_TO_ADDR
11979: LD_VAR 0 10
11983: PUSH
11984: FOR_TO
11985: IFFALSE 12286
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
11987: LD_VAR 0 10
11991: PUSH
11992: LD_VAR 0 14
11996: ARRAY
11997: PUSH
11998: LD_INT 2
12000: EQUAL
12001: PUSH
12002: LD_VAR 0 10
12006: PUSH
12007: LD_VAR 0 14
12011: ARRAY
12012: PUSH
12013: LD_INT 3
12015: EQUAL
12016: OR
12017: IFFALSE 12070
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12019: LD_ADDR_VAR 0 19
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: LD_INT 2
12029: PUSH
12030: LD_INT 3
12032: PUSH
12033: LD_INT 4
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12046: LD_ADDR_OWVAR 37
12050: PUSH
12051: LD_VAR 0 19
12055: PUSH
12056: LD_INT 1
12058: PPUSH
12059: LD_VAR 0 19
12063: PPUSH
12064: CALL_OW 12
12068: ARRAY
12069: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12070: LD_VAR 0 10
12074: PUSH
12075: LD_VAR 0 14
12079: ARRAY
12080: PUSH
12081: LD_INT 4
12083: EQUAL
12084: PUSH
12085: LD_VAR 0 10
12089: PUSH
12090: LD_VAR 0 14
12094: ARRAY
12095: PUSH
12096: LD_INT 5
12098: EQUAL
12099: OR
12100: PUSH
12101: LD_VAR 0 10
12105: PUSH
12106: LD_VAR 0 14
12110: ARRAY
12111: PUSH
12112: LD_INT 9
12114: EQUAL
12115: OR
12116: PUSH
12117: LD_VAR 0 10
12121: PUSH
12122: LD_VAR 0 14
12126: ARRAY
12127: PUSH
12128: LD_INT 11
12130: EQUAL
12131: OR
12132: PUSH
12133: LD_VAR 0 10
12137: PUSH
12138: LD_VAR 0 14
12142: ARRAY
12143: PUSH
12144: LD_INT 7
12146: EQUAL
12147: OR
12148: IFFALSE 12197
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12150: LD_ADDR_VAR 0 19
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: LD_INT 3
12160: PUSH
12161: LD_INT 4
12163: PUSH
12164: LD_INT 5
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12173: LD_ADDR_OWVAR 37
12177: PUSH
12178: LD_VAR 0 19
12182: PUSH
12183: LD_INT 1
12185: PPUSH
12186: LD_VAR 0 19
12190: PPUSH
12191: CALL_OW 12
12195: ARRAY
12196: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12197: LD_VAR 0 10
12201: PUSH
12202: LD_VAR 0 14
12206: ARRAY
12207: PUSH
12208: LD_INT 8
12210: EQUAL
12211: PUSH
12212: LD_VAR 0 10
12216: PUSH
12217: LD_VAR 0 14
12221: ARRAY
12222: PUSH
12223: LD_INT 6
12225: EQUAL
12226: OR
12227: PUSH
12228: LD_VAR 0 10
12232: PUSH
12233: LD_VAR 0 14
12237: ARRAY
12238: PUSH
12239: LD_INT 10
12241: EQUAL
12242: OR
12243: IFFALSE 12284
// begin amChassisTab = [ 4 , 5 ] ;
12245: LD_ADDR_VAR 0 19
12249: PUSH
12250: LD_INT 4
12252: PUSH
12253: LD_INT 5
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12260: LD_ADDR_OWVAR 37
12264: PUSH
12265: LD_VAR 0 19
12269: PUSH
12270: LD_INT 1
12272: PPUSH
12273: LD_VAR 0 19
12277: PPUSH
12278: CALL_OW 12
12282: ARRAY
12283: ST_TO_ADDR
// end ; end ;
12284: GO 11984
12286: POP
12287: POP
// veh = CreateVehicle ;
12288: LD_ADDR_VAR 0 16
12292: PUSH
12293: CALL_OW 45
12297: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12298: LD_VAR 0 16
12302: PPUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: LD_INT 0
12310: PPUSH
12311: CALL_OW 49
// if vehControl = 1 then
12315: LD_VAR 0 7
12319: PUSH
12320: LD_INT 1
12322: EQUAL
12323: IFFALSE 12380
// begin hc_gallery =  ;
12325: LD_ADDR_OWVAR 33
12329: PUSH
12330: LD_STRING 
12332: ST_TO_ADDR
// hc_name =  ;
12333: LD_ADDR_OWVAR 26
12337: PUSH
12338: LD_STRING 
12340: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12341: LD_INT 0
12343: PPUSH
12344: LD_INT 3
12346: PPUSH
12347: LD_VAR 0 4
12351: PPUSH
12352: CALL_OW 380
// un = CreateHuman ;
12356: LD_ADDR_VAR 0 15
12360: PUSH
12361: CALL_OW 44
12365: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12366: LD_VAR 0 15
12370: PPUSH
12371: LD_VAR 0 16
12375: PPUSH
12376: CALL_OW 52
// end ; i = i + 1 ;
12380: LD_ADDR_VAR 0 13
12384: PUSH
12385: LD_VAR 0 13
12389: PUSH
12390: LD_INT 1
12392: PLUS
12393: ST_TO_ADDR
// end ; if nation = 2 then
12394: LD_VAR 0 5
12398: PUSH
12399: LD_INT 2
12401: EQUAL
12402: IFFALSE 12826
// begin uc_side = side ;
12404: LD_ADDR_OWVAR 20
12408: PUSH
12409: LD_VAR 0 2
12413: ST_TO_ADDR
// uc_nation = nation ;
12414: LD_ADDR_OWVAR 21
12418: PUSH
12419: LD_VAR 0 5
12423: ST_TO_ADDR
// vc_engine = vehengine ;
12424: LD_ADDR_OWVAR 39
12428: PUSH
12429: LD_VAR 0 6
12433: ST_TO_ADDR
// vc_control = vehcontrol ;
12434: LD_ADDR_OWVAR 38
12438: PUSH
12439: LD_VAR 0 7
12443: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12444: LD_ADDR_OWVAR 40
12448: PUSH
12449: LD_VAR 0 9
12453: PUSH
12454: LD_INT 1
12456: PPUSH
12457: LD_VAR 0 9
12461: PPUSH
12462: CALL_OW 12
12466: ARRAY
12467: ST_TO_ADDR
// for j = 1 to ARWeapons do
12468: LD_ADDR_VAR 0 14
12472: PUSH
12473: DOUBLE
12474: LD_INT 1
12476: DEC
12477: ST_TO_ADDR
12478: LD_VAR 0 9
12482: PUSH
12483: FOR_TO
12484: IFFALSE 12718
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12486: LD_VAR 0 9
12490: PUSH
12491: LD_VAR 0 14
12495: ARRAY
12496: PUSH
12497: LD_INT 24
12499: EQUAL
12500: PUSH
12501: LD_VAR 0 9
12505: PUSH
12506: LD_VAR 0 14
12510: ARRAY
12511: PUSH
12512: LD_INT 22
12514: EQUAL
12515: OR
12516: PUSH
12517: LD_VAR 0 9
12521: PUSH
12522: LD_VAR 0 14
12526: ARRAY
12527: PUSH
12528: LD_INT 23
12530: EQUAL
12531: OR
12532: PUSH
12533: LD_VAR 0 9
12537: PUSH
12538: LD_VAR 0 14
12542: ARRAY
12543: PUSH
12544: LD_INT 30
12546: EQUAL
12547: OR
12548: IFFALSE 12597
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
12550: LD_ADDR_VAR 0 18
12554: PUSH
12555: LD_INT 11
12557: PUSH
12558: LD_INT 12
12560: PUSH
12561: LD_INT 13
12563: PUSH
12564: LD_INT 14
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12573: LD_ADDR_OWVAR 37
12577: PUSH
12578: LD_VAR 0 18
12582: PUSH
12583: LD_INT 1
12585: PPUSH
12586: LD_VAR 0 18
12590: PPUSH
12591: CALL_OW 12
12595: ARRAY
12596: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
12597: LD_VAR 0 9
12601: PUSH
12602: LD_VAR 0 14
12606: ARRAY
12607: PUSH
12608: LD_INT 29
12610: EQUAL
12611: PUSH
12612: LD_VAR 0 9
12616: PUSH
12617: LD_VAR 0 14
12621: ARRAY
12622: PUSH
12623: LD_INT 28
12625: EQUAL
12626: OR
12627: PUSH
12628: LD_VAR 0 9
12632: PUSH
12633: LD_VAR 0 14
12637: ARRAY
12638: PUSH
12639: LD_INT 27
12641: EQUAL
12642: OR
12643: PUSH
12644: LD_VAR 0 9
12648: PUSH
12649: LD_VAR 0 14
12653: ARRAY
12654: PUSH
12655: LD_INT 26
12657: EQUAL
12658: OR
12659: PUSH
12660: LD_VAR 0 9
12664: PUSH
12665: LD_VAR 0 14
12669: ARRAY
12670: PUSH
12671: LD_INT 25
12673: EQUAL
12674: OR
12675: IFFALSE 12716
// begin arChassisTab = [ 13 , 14 ] ;
12677: LD_ADDR_VAR 0 18
12681: PUSH
12682: LD_INT 13
12684: PUSH
12685: LD_INT 14
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12692: LD_ADDR_OWVAR 37
12696: PUSH
12697: LD_VAR 0 18
12701: PUSH
12702: LD_INT 1
12704: PPUSH
12705: LD_VAR 0 18
12709: PPUSH
12710: CALL_OW 12
12714: ARRAY
12715: ST_TO_ADDR
// end ; end ;
12716: GO 12483
12718: POP
12719: POP
// veh = CreateVehicle ;
12720: LD_ADDR_VAR 0 16
12724: PUSH
12725: CALL_OW 45
12729: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12730: LD_VAR 0 16
12734: PPUSH
12735: LD_VAR 0 1
12739: PPUSH
12740: LD_INT 0
12742: PPUSH
12743: CALL_OW 49
// if vehcontrol = 1 then
12747: LD_VAR 0 7
12751: PUSH
12752: LD_INT 1
12754: EQUAL
12755: IFFALSE 12812
// begin hc_gallery =  ;
12757: LD_ADDR_OWVAR 33
12761: PUSH
12762: LD_STRING 
12764: ST_TO_ADDR
// hc_name =  ;
12765: LD_ADDR_OWVAR 26
12769: PUSH
12770: LD_STRING 
12772: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12773: LD_INT 0
12775: PPUSH
12776: LD_INT 3
12778: PPUSH
12779: LD_VAR 0 4
12783: PPUSH
12784: CALL_OW 380
// un = CreateHuman ;
12788: LD_ADDR_VAR 0 15
12792: PUSH
12793: CALL_OW 44
12797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12798: LD_VAR 0 15
12802: PPUSH
12803: LD_VAR 0 16
12807: PPUSH
12808: CALL_OW 52
// end ; i = i + 1 ;
12812: LD_ADDR_VAR 0 13
12816: PUSH
12817: LD_VAR 0 13
12821: PUSH
12822: LD_INT 1
12824: PLUS
12825: ST_TO_ADDR
// end ; if nation = 3 then
12826: LD_VAR 0 5
12830: PUSH
12831: LD_INT 3
12833: EQUAL
12834: IFFALSE 13226
// begin uc_side = side ;
12836: LD_ADDR_OWVAR 20
12840: PUSH
12841: LD_VAR 0 2
12845: ST_TO_ADDR
// uc_nation = nation ;
12846: LD_ADDR_OWVAR 21
12850: PUSH
12851: LD_VAR 0 5
12855: ST_TO_ADDR
// vc_engine = vehengine ;
12856: LD_ADDR_OWVAR 39
12860: PUSH
12861: LD_VAR 0 6
12865: ST_TO_ADDR
// vc_control = vehcontrol ;
12866: LD_ADDR_OWVAR 38
12870: PUSH
12871: LD_VAR 0 7
12875: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
12876: LD_ADDR_OWVAR 40
12880: PUSH
12881: LD_VAR 0 8
12885: PUSH
12886: LD_INT 1
12888: PPUSH
12889: LD_VAR 0 8
12893: PPUSH
12894: CALL_OW 12
12898: ARRAY
12899: ST_TO_ADDR
// for j = 1 to RuWeapons do
12900: LD_ADDR_VAR 0 14
12904: PUSH
12905: DOUBLE
12906: LD_INT 1
12908: DEC
12909: ST_TO_ADDR
12910: LD_VAR 0 8
12914: PUSH
12915: FOR_TO
12916: IFFALSE 13118
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
12918: LD_VAR 0 8
12922: PUSH
12923: LD_VAR 0 14
12927: ARRAY
12928: PUSH
12929: LD_INT 42
12931: EQUAL
12932: PUSH
12933: LD_VAR 0 8
12937: PUSH
12938: LD_VAR 0 14
12942: ARRAY
12943: PUSH
12944: LD_INT 43
12946: EQUAL
12947: OR
12948: PUSH
12949: LD_VAR 0 8
12953: PUSH
12954: LD_VAR 0 14
12958: ARRAY
12959: PUSH
12960: LD_INT 44
12962: EQUAL
12963: OR
12964: PUSH
12965: LD_VAR 0 8
12969: PUSH
12970: LD_VAR 0 14
12974: ARRAY
12975: PUSH
12976: LD_INT 45
12978: EQUAL
12979: OR
12980: PUSH
12981: LD_VAR 0 8
12985: PUSH
12986: LD_VAR 0 14
12990: ARRAY
12991: PUSH
12992: LD_INT 49
12994: EQUAL
12995: OR
12996: IFFALSE 13045
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
12998: LD_ADDR_VAR 0 17
13002: PUSH
13003: LD_INT 21
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 23
13011: PUSH
13012: LD_INT 24
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13021: LD_ADDR_OWVAR 37
13025: PUSH
13026: LD_VAR 0 17
13030: PUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_VAR 0 17
13038: PPUSH
13039: CALL_OW 12
13043: ARRAY
13044: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13045: LD_VAR 0 8
13049: PUSH
13050: LD_VAR 0 14
13054: ARRAY
13055: PUSH
13056: LD_INT 46
13058: EQUAL
13059: PUSH
13060: LD_VAR 0 8
13064: PUSH
13065: LD_VAR 0 14
13069: ARRAY
13070: PUSH
13071: LD_INT 47
13073: EQUAL
13074: OR
13075: IFFALSE 13116
// begin ruChassisTab = [ 23 , 24 ] ;
13077: LD_ADDR_VAR 0 17
13081: PUSH
13082: LD_INT 23
13084: PUSH
13085: LD_INT 24
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13092: LD_ADDR_OWVAR 37
13096: PUSH
13097: LD_VAR 0 17
13101: PUSH
13102: LD_INT 1
13104: PPUSH
13105: LD_VAR 0 17
13109: PPUSH
13110: CALL_OW 12
13114: ARRAY
13115: ST_TO_ADDR
// end ; end ;
13116: GO 12915
13118: POP
13119: POP
// veh = CreateVehicle ;
13120: LD_ADDR_VAR 0 16
13124: PUSH
13125: CALL_OW 45
13129: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13130: LD_VAR 0 16
13134: PPUSH
13135: LD_VAR 0 1
13139: PPUSH
13140: LD_INT 0
13142: PPUSH
13143: CALL_OW 49
// if vehcontrol = 1 then
13147: LD_VAR 0 7
13151: PUSH
13152: LD_INT 1
13154: EQUAL
13155: IFFALSE 13212
// begin hc_gallery =  ;
13157: LD_ADDR_OWVAR 33
13161: PUSH
13162: LD_STRING 
13164: ST_TO_ADDR
// hc_name =  ;
13165: LD_ADDR_OWVAR 26
13169: PUSH
13170: LD_STRING 
13172: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13173: LD_INT 0
13175: PPUSH
13176: LD_INT 3
13178: PPUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: CALL_OW 380
// un = CreateHuman ;
13188: LD_ADDR_VAR 0 15
13192: PUSH
13193: CALL_OW 44
13197: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13198: LD_VAR 0 15
13202: PPUSH
13203: LD_VAR 0 16
13207: PPUSH
13208: CALL_OW 52
// end ; i = i + 1 ;
13212: LD_ADDR_VAR 0 13
13216: PUSH
13217: LD_VAR 0 13
13221: PUSH
13222: LD_INT 1
13224: PLUS
13225: ST_TO_ADDR
// end ; until i = vehCount ;
13226: LD_VAR 0 13
13230: PUSH
13231: LD_VAR 0 3
13235: EQUAL
13236: IFFALSE 11888
// repeat wait ( 0 0$1 ) ;
13238: LD_INT 35
13240: PPUSH
13241: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13245: LD_ADDR_VAR 0 20
13249: PUSH
13250: LD_INT 22
13252: PUSH
13253: LD_VAR 0 2
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 21
13264: PUSH
13265: LD_INT 2
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 24
13274: PUSH
13275: LD_INT 661
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 69
13291: ST_TO_ADDR
// if vehicleOK_list > 0 then
13292: LD_VAR 0 20
13296: PUSH
13297: LD_INT 0
13299: GREATER
13300: IFFALSE 13491
// begin for i in vehicleOK_list do
13302: LD_ADDR_VAR 0 13
13306: PUSH
13307: LD_VAR 0 20
13311: PUSH
13312: FOR_IN
13313: IFFALSE 13489
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13315: LD_ADDR_VAR 0 21
13319: PUSH
13320: LD_INT 22
13322: PUSH
13323: LD_VAR 0 11
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: PPUSH
13337: LD_VAR 0 13
13341: PPUSH
13342: CALL_OW 74
13346: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13347: LD_ADDR_VAR 0 22
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_VAR 0 11
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: LD_INT 59
13369: PUSH
13370: EMPTY
13371: LIST
13372: PUSH
13373: LD_INT 21
13375: PUSH
13376: LD_INT 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 21
13385: PUSH
13386: LD_INT 2
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: EMPTY
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: PPUSH
13411: LD_VAR 0 13
13415: PPUSH
13416: CALL_OW 74
13420: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13421: LD_VAR 0 13
13425: PPUSH
13426: LD_VAR 0 21
13430: PPUSH
13431: CALL_OW 296
13435: PUSH
13436: LD_INT 8
13438: PLUS
13439: PUSH
13440: LD_VAR 0 13
13444: PPUSH
13445: LD_VAR 0 22
13449: PPUSH
13450: CALL_OW 296
13454: LESS
13455: IFFALSE 13473
// begin ComAttackUnit ( i , target1 ) ;
13457: LD_VAR 0 13
13461: PPUSH
13462: LD_VAR 0 21
13466: PPUSH
13467: CALL_OW 115
// end else
13471: GO 13487
// begin ComAttackUnit ( i , target2 ) ;
13473: LD_VAR 0 13
13477: PPUSH
13478: LD_VAR 0 22
13482: PPUSH
13483: CALL_OW 115
// end ; end ;
13487: GO 13312
13489: POP
13490: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
13491: LD_INT 22
13493: PUSH
13494: LD_VAR 0 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 21
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 69
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: IFFALSE 13238
// end ;
13527: LD_VAR 0 12
13531: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
13532: LD_INT 0
13534: PPUSH
13535: PPUSH
13536: PPUSH
13537: PPUSH
13538: PPUSH
13539: PPUSH
13540: PPUSH
13541: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13542: LD_ADDR_VAR 0 7
13546: PUSH
13547: LD_INT 22
13549: PUSH
13550: LD_VAR 0 1
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 1
13561: PUSH
13562: LD_INT 3
13564: PUSH
13565: LD_INT 24
13567: PUSH
13568: LD_INT 550
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 24
13581: PUSH
13582: LD_INT 250
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 69
13602: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13603: LD_ADDR_VAR 0 8
13607: PUSH
13608: LD_INT 22
13610: PUSH
13611: LD_VAR 0 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 1
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 5
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 25
13645: PUSH
13646: LD_INT 8
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 25
13655: PUSH
13656: LD_INT 9
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 24
13672: PUSH
13673: LD_INT 1000
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13690: LD_ADDR_VAR 0 9
13694: PUSH
13695: LD_INT 22
13697: PUSH
13698: LD_VAR 0 1
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 25
13709: PUSH
13710: LD_INT 4
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 69
13725: ST_TO_ADDR
// if medicCount > 0 then
13726: LD_VAR 0 9
13730: PUSH
13731: LD_INT 0
13733: GREATER
13734: IFFALSE 13808
// begin if damageUnit_list > 0 then
13736: LD_VAR 0 7
13740: PUSH
13741: LD_INT 0
13743: GREATER
13744: IFFALSE 13808
// begin for i in damageUnit_list do
13746: LD_ADDR_VAR 0 5
13750: PUSH
13751: LD_VAR 0 7
13755: PUSH
13756: FOR_IN
13757: IFFALSE 13806
// begin ComMoveToArea ( i , healArea ) ;
13759: LD_VAR 0 5
13763: PPUSH
13764: LD_VAR 0 2
13768: PPUSH
13769: CALL_OW 113
// for j in medicCount do
13773: LD_ADDR_VAR 0 6
13777: PUSH
13778: LD_VAR 0 9
13782: PUSH
13783: FOR_IN
13784: IFFALSE 13802
// AddComHeal ( j , i ) ;
13786: LD_VAR 0 6
13790: PPUSH
13791: LD_VAR 0 5
13795: PPUSH
13796: CALL_OW 188
13800: GO 13783
13802: POP
13803: POP
// end ;
13804: GO 13756
13806: POP
13807: POP
// end ; end ; if soldiersOK_list > 0 then
13808: LD_VAR 0 8
13812: PUSH
13813: LD_INT 0
13815: GREATER
13816: IFFALSE 14007
// begin for i in soldiersOK_list do
13818: LD_ADDR_VAR 0 5
13822: PUSH
13823: LD_VAR 0 8
13827: PUSH
13828: FOR_IN
13829: IFFALSE 14005
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13831: LD_ADDR_VAR 0 10
13835: PUSH
13836: LD_INT 22
13838: PUSH
13839: LD_VAR 0 3
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 69
13852: PPUSH
13853: LD_VAR 0 5
13857: PPUSH
13858: CALL_OW 74
13862: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13863: LD_ADDR_VAR 0 11
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_VAR 0 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: LD_INT 59
13885: PUSH
13886: EMPTY
13887: LIST
13888: PUSH
13889: LD_INT 21
13891: PUSH
13892: LD_INT 1
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 21
13901: PUSH
13902: LD_INT 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: PPUSH
13922: CALL_OW 69
13926: PPUSH
13927: LD_VAR 0 5
13931: PPUSH
13932: CALL_OW 74
13936: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13937: LD_VAR 0 5
13941: PPUSH
13942: LD_VAR 0 10
13946: PPUSH
13947: CALL_OW 296
13951: PUSH
13952: LD_INT 8
13954: PLUS
13955: PUSH
13956: LD_VAR 0 5
13960: PPUSH
13961: LD_VAR 0 11
13965: PPUSH
13966: CALL_OW 296
13970: LESS
13971: IFFALSE 13989
// begin ComAttackUnit ( i , target1 ) ;
13973: LD_VAR 0 5
13977: PPUSH
13978: LD_VAR 0 10
13982: PPUSH
13983: CALL_OW 115
// end else
13987: GO 14003
// begin ComAttackUnit ( i , target2 ) ;
13989: LD_VAR 0 5
13993: PPUSH
13994: LD_VAR 0 11
13998: PPUSH
13999: CALL_OW 115
// end ; end ;
14003: GO 13828
14005: POP
14006: POP
// end ; end ; end_of_file
14007: LD_VAR 0 4
14011: RET
// every 1 do var i ;
14012: GO 14014
14014: DISABLE
14015: LD_INT 0
14017: PPUSH
// begin InGameOn ;
14018: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14022: LD_INT 53
14024: PPUSH
14025: LD_INT 40
14027: PPUSH
14028: CALL_OW 84
// wait ( 0 0$5 ) ;
14032: LD_INT 175
14034: PPUSH
14035: CALL_OW 67
// if gammaCommander = 1 then
14039: LD_EXP 11
14043: PUSH
14044: LD_INT 1
14046: EQUAL
14047: IFFALSE 14058
// CenterNowOnUnits ( Donaldson ) ;
14049: LD_EXP 3
14053: PPUSH
14054: CALL_OW 87
// if gammaCommander = 2 then
14058: LD_EXP 11
14062: PUSH
14063: LD_INT 2
14065: EQUAL
14066: IFFALSE 14077
// CenterNowOnUnits ( Brown ) ;
14068: LD_EXP 2
14072: PPUSH
14073: CALL_OW 87
// if gammaCommander = 3 then
14077: LD_EXP 11
14081: PUSH
14082: LD_INT 3
14084: EQUAL
14085: IFFALSE 14096
// CenterNowOnUnits ( Houten ) ;
14087: LD_EXP 12
14091: PPUSH
14092: CALL_OW 87
// if gammaCommander = 1 then
14096: LD_EXP 11
14100: PUSH
14101: LD_INT 1
14103: EQUAL
14104: IFFALSE 14118
// Say ( Donaldson , D1-Don-1 ) ;
14106: LD_EXP 3
14110: PPUSH
14111: LD_STRING D1-Don-1
14113: PPUSH
14114: CALL_OW 88
// if gammaCommander = 2 then
14118: LD_EXP 11
14122: PUSH
14123: LD_INT 2
14125: EQUAL
14126: IFFALSE 14140
// Say ( Brown , D1-Brown-1 ) ;
14128: LD_EXP 2
14132: PPUSH
14133: LD_STRING D1-Brown-1
14135: PPUSH
14136: CALL_OW 88
// if gammaCommander = 3 then
14140: LD_EXP 11
14144: PUSH
14145: LD_INT 3
14147: EQUAL
14148: IFFALSE 14162
// Say ( Houten , D1-VanH-1 ) ;
14150: LD_EXP 12
14154: PPUSH
14155: LD_STRING D1-VanH-1
14157: PPUSH
14158: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
14162: LD_EXP 21
14166: PPUSH
14167: LD_STRING D1-Har-1
14169: PPUSH
14170: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
14174: LD_INT 53
14176: PPUSH
14177: LD_INT 40
14179: PPUSH
14180: CALL_OW 84
// if gammaCommander = 1 then
14184: LD_EXP 11
14188: PUSH
14189: LD_INT 1
14191: EQUAL
14192: IFFALSE 14206
// Say ( Donaldson , D1-Don-2 ) ;
14194: LD_EXP 3
14198: PPUSH
14199: LD_STRING D1-Don-2
14201: PPUSH
14202: CALL_OW 88
// if gammaCommander = 2 then
14206: LD_EXP 11
14210: PUSH
14211: LD_INT 2
14213: EQUAL
14214: IFFALSE 14228
// Say ( Brown , D1-Brown-2 ) ;
14216: LD_EXP 2
14220: PPUSH
14221: LD_STRING D1-Brown-2
14223: PPUSH
14224: CALL_OW 88
// if gammaCommander = 3 then
14228: LD_EXP 11
14232: PUSH
14233: LD_INT 3
14235: EQUAL
14236: IFFALSE 14250
// Say ( Houten , D1-VanH-2 ) ;
14238: LD_EXP 12
14242: PPUSH
14243: LD_STRING D1-VanH-2
14245: PPUSH
14246: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
14250: LD_EXP 21
14254: PPUSH
14255: LD_STRING D1-Har-2
14257: PPUSH
14258: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
14262: LD_INT 35
14264: PPUSH
14265: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14269: LD_ADDR_VAR 0 1
14273: PUSH
14274: LD_INT 22
14276: PUSH
14277: LD_INT 6
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: EMPTY
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: PUSH
14292: FOR_IN
14293: IFFALSE 14312
// ComAgressiveMove ( i , 54 , 20 ) ;
14295: LD_VAR 0 1
14299: PPUSH
14300: LD_INT 54
14302: PPUSH
14303: LD_INT 20
14305: PPUSH
14306: CALL_OW 114
14310: GO 14292
14312: POP
14313: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14314: LD_ADDR_VAR 0 1
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 25
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 3
14341: PUSH
14342: LD_INT 54
14344: PUSH
14345: EMPTY
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: PPUSH
14357: CALL_OW 69
14361: PUSH
14362: FOR_IN
14363: IFFALSE 14397
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
14365: LD_VAR 0 1
14369: PPUSH
14370: LD_INT 70
14372: PPUSH
14373: LD_INT 41
14375: PPUSH
14376: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
14380: LD_VAR 0 1
14384: PPUSH
14385: LD_INT 46
14387: PPUSH
14388: LD_INT 39
14390: PPUSH
14391: CALL_OW 174
// end ;
14395: GO 14362
14397: POP
14398: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 ;
14399: LD_INT 22
14401: PUSH
14402: LD_INT 6
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 1
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 24
14421: PUSH
14422: LD_INT 250
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: PPUSH
14434: CALL_OW 69
14438: PUSH
14439: LD_INT 0
14441: EQUAL
14442: IFFALSE 14262
// InGameOff ;
14444: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
14448: LD_STRING M1
14450: PPUSH
14451: CALL_OW 337
// SaveForQuickRestart ;
14455: CALL_OW 22
// end ;
14459: PPOPN 1
14461: END
// every 1 1$0 do
14462: GO 14464
14464: DISABLE
// begin PrepareSupportFromDelta ;
14465: CALL 1319 0 0
// firstAttack = 1 ;
14469: LD_ADDR_EXP 32
14473: PUSH
14474: LD_INT 1
14476: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14477: LD_EXP 8
14481: PPUSH
14482: CALL_OW 302
14486: IFFALSE 14502
// begin Say ( Gladstone , D2-Glad-1 ) ;
14488: LD_EXP 8
14492: PPUSH
14493: LD_STRING D2-Glad-1
14495: PPUSH
14496: CALL_OW 88
// end else
14500: GO 14595
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
14502: LD_INT 4
14504: PPUSH
14505: LD_INT 22
14507: PUSH
14508: LD_INT 1
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PUSH
14515: LD_INT 21
14517: PUSH
14518: LD_INT 1
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 2
14527: PUSH
14528: LD_INT 25
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 25
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 25
14550: PUSH
14551: LD_INT 3
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 25
14560: PUSH
14561: LD_INT 4
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 70
14584: PPUSH
14585: LD_STRING D2-Sol1-1
14587: PPUSH
14588: LD_STRING D2-FSol1-1
14590: PPUSH
14591: CALL 4572 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
14595: LD_EXP 3
14599: PPUSH
14600: CALL_OW 302
14604: PUSH
14605: LD_EXP 11
14609: PUSH
14610: LD_INT 1
14612: EQUAL
14613: AND
14614: IFFALSE 14628
// Say ( Donaldson , D2-Don-1 ) ;
14616: LD_EXP 3
14620: PPUSH
14621: LD_STRING D2-Don-1
14623: PPUSH
14624: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14628: LD_EXP 2
14632: PPUSH
14633: CALL_OW 302
14637: PUSH
14638: LD_EXP 11
14642: PUSH
14643: LD_INT 2
14645: EQUAL
14646: AND
14647: IFFALSE 14661
// Say ( Brown , D2-Brown-1 ) ;
14649: LD_EXP 2
14653: PPUSH
14654: LD_STRING D2-Brown-1
14656: PPUSH
14657: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14661: LD_EXP 12
14665: PPUSH
14666: CALL_OW 302
14670: PUSH
14671: LD_EXP 11
14675: PUSH
14676: LD_INT 3
14678: EQUAL
14679: AND
14680: IFFALSE 14694
// Say ( Houten , D2-VanH-1 ) ;
14682: LD_EXP 12
14686: PPUSH
14687: LD_STRING D2-VanH-1
14689: PPUSH
14690: CALL_OW 88
// end ;
14694: END
// every 0 0$1 do
14695: GO 14697
14697: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) / 2 ) ;
14698: LD_STRING 07_time
14700: PPUSH
14701: LD_INT 0
14703: PPUSH
14704: CALL_OW 30
14708: PUSH
14709: LD_INT 2
14711: DIVREAL
14712: PPUSH
14713: CALL_OW 67
// PrepareMacmillanSquad ;
14717: CALL 1731 0 0
// CenterNowOnUnits ( JMM ) ;
14721: LD_EXP 1
14725: PPUSH
14726: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
14730: LD_EXP 1
14734: PPUSH
14735: LD_STRING D3-JMM-1
14737: PPUSH
14738: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
14742: LD_EXP 3
14746: PPUSH
14747: CALL_OW 302
14751: PUSH
14752: LD_EXP 11
14756: PUSH
14757: LD_INT 1
14759: EQUAL
14760: AND
14761: IFFALSE 14777
// begin Say ( Donaldson , D3-Don-1 ) ;
14763: LD_EXP 3
14767: PPUSH
14768: LD_STRING D3-Don-1
14770: PPUSH
14771: CALL_OW 88
// end else
14775: GO 14814
// begin if gammaCommander = 1 then
14777: LD_EXP 11
14781: PUSH
14782: LD_INT 1
14784: EQUAL
14785: IFFALSE 14814
// begin DialogRandom ( others_gamma , D3-Sol1-1 , D3-Sol1-1 ) ;
14787: LD_EXP 10
14791: PPUSH
14792: LD_STRING D3-Sol1-1
14794: PPUSH
14795: LD_STRING D3-Sol1-1
14797: PPUSH
14798: CALL 4572 0 3
// Say ( JMM , D3-JMM-2 ) ;
14802: LD_EXP 1
14806: PPUSH
14807: LD_STRING D3-JMM-2
14809: PPUSH
14810: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
14814: LD_EXP 2
14818: PPUSH
14819: CALL_OW 302
14823: PUSH
14824: LD_EXP 11
14828: PUSH
14829: LD_INT 2
14831: EQUAL
14832: AND
14833: IFFALSE 14849
// begin Say ( Brown , D3-Brown-1 ) ;
14835: LD_EXP 2
14839: PPUSH
14840: LD_STRING D3-Brown-1
14842: PPUSH
14843: CALL_OW 88
// end else
14847: GO 14886
// begin if gammaCommander = 2 then
14849: LD_EXP 11
14853: PUSH
14854: LD_INT 2
14856: EQUAL
14857: IFFALSE 14886
// begin DialogRandom ( others_gamma , D3-Sol1-1a , D3-Sol1-1a ) ;
14859: LD_EXP 10
14863: PPUSH
14864: LD_STRING D3-Sol1-1a
14866: PPUSH
14867: LD_STRING D3-Sol1-1a
14869: PPUSH
14870: CALL 4572 0 3
// Say ( JMM , D3-JMM-2 ) ;
14874: LD_EXP 1
14878: PPUSH
14879: LD_STRING D3-JMM-2
14881: PPUSH
14882: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
14886: LD_EXP 12
14890: PPUSH
14891: CALL_OW 302
14895: PUSH
14896: LD_EXP 11
14900: PUSH
14901: LD_INT 3
14903: EQUAL
14904: AND
14905: IFFALSE 14921
// begin Say ( Houten , D3-VanH-1 ) ;
14907: LD_EXP 12
14911: PPUSH
14912: LD_STRING D3-VanH-1
14914: PPUSH
14915: CALL_OW 88
// end else
14919: GO 14958
// begin if gammaCommander = 3 then
14921: LD_EXP 11
14925: PUSH
14926: LD_INT 3
14928: EQUAL
14929: IFFALSE 14958
// begin DialogRandom ( others_gamma , D3-Sol1-1b , D3-Sol1-1b ) ;
14931: LD_EXP 10
14935: PPUSH
14936: LD_STRING D3-Sol1-1b
14938: PPUSH
14939: LD_STRING D3-Sol1-1b
14941: PPUSH
14942: CALL 4572 0 3
// Say ( JMM , D3-JMM-2 ) ;
14946: LD_EXP 1
14950: PPUSH
14951: LD_STRING D3-JMM-2
14953: PPUSH
14954: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
14958: LD_EXP 14
14962: PPUSH
14963: CALL_OW 302
14967: IFFALSE 14995
// begin Say ( Joan , D3a-Joan-1 ) ;
14969: LD_EXP 14
14973: PPUSH
14974: LD_STRING D3a-Joan-1
14976: PPUSH
14977: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
14981: LD_EXP 1
14985: PPUSH
14986: LD_STRING D3a-JMM-1
14988: PPUSH
14989: CALL_OW 88
// end else
14993: GO 15403
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
14995: LD_EXP 3
14999: PPUSH
15000: CALL_OW 302
15004: PUSH
15005: LD_EXP 11
15009: PUSH
15010: LD_INT 1
15012: EQUAL
15013: AND
15014: PUSH
15015: LD_STRING 06_JoanStatus_1
15017: PPUSH
15018: LD_INT 0
15020: PPUSH
15021: CALL_OW 30
15025: PUSH
15026: LD_INT 1
15028: EQUAL
15029: AND
15030: IFFALSE 15081
// begin Say ( Donaldson , D3b-Don-1 ) ;
15032: LD_EXP 3
15036: PPUSH
15037: LD_STRING D3b-Don-1
15039: PPUSH
15040: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15044: LD_EXP 1
15048: PPUSH
15049: LD_STRING D3b-JMM-2
15051: PPUSH
15052: CALL_OW 88
// if IsOK ( Lisa ) then
15056: LD_EXP 6
15060: PPUSH
15061: CALL_OW 302
15065: IFFALSE 15079
// Say ( Lisa , D3b-Lisa-2 ) ;
15067: LD_EXP 6
15071: PPUSH
15072: LD_STRING D3b-Lisa-2
15074: PPUSH
15075: CALL_OW 88
// end else
15079: GO 15131
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15081: LD_EXP 10
15085: PPUSH
15086: LD_STRING D3b-Sol1-1
15088: PPUSH
15089: LD_STRING D3b-Sol1-1
15091: PPUSH
15092: CALL 4572 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15096: LD_EXP 1
15100: PPUSH
15101: LD_STRING D3b-JMM-2
15103: PPUSH
15104: CALL_OW 88
// if IsOK ( Lisa ) then
15108: LD_EXP 6
15112: PPUSH
15113: CALL_OW 302
15117: IFFALSE 15131
// Say ( Lisa , D3b-Lisa-2 ) ;
15119: LD_EXP 6
15123: PPUSH
15124: LD_STRING D3b-Lisa-2
15126: PPUSH
15127: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15131: LD_EXP 2
15135: PPUSH
15136: CALL_OW 302
15140: PUSH
15141: LD_EXP 11
15145: PUSH
15146: LD_INT 2
15148: EQUAL
15149: AND
15150: PUSH
15151: LD_STRING 06_JoanStatus_1
15153: PPUSH
15154: LD_INT 0
15156: PPUSH
15157: CALL_OW 30
15161: PUSH
15162: LD_INT 1
15164: EQUAL
15165: AND
15166: IFFALSE 15217
// begin Say ( Brown , D3b-Brown-1 ) ;
15168: LD_EXP 2
15172: PPUSH
15173: LD_STRING D3b-Brown-1
15175: PPUSH
15176: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15180: LD_EXP 1
15184: PPUSH
15185: LD_STRING D3b-JMM-2
15187: PPUSH
15188: CALL_OW 88
// if IsOK ( Lisa ) then
15192: LD_EXP 6
15196: PPUSH
15197: CALL_OW 302
15201: IFFALSE 15215
// Say ( Lisa , D3b-Lisa-2 ) ;
15203: LD_EXP 6
15207: PPUSH
15208: LD_STRING D3b-Lisa-2
15210: PPUSH
15211: CALL_OW 88
// end else
15215: GO 15267
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15217: LD_EXP 10
15221: PPUSH
15222: LD_STRING D3b-Sol1-1
15224: PPUSH
15225: LD_STRING D3b-Sol1-1
15227: PPUSH
15228: CALL 4572 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15232: LD_EXP 1
15236: PPUSH
15237: LD_STRING D3b-JMM-2
15239: PPUSH
15240: CALL_OW 88
// if IsOK ( Lisa ) then
15244: LD_EXP 6
15248: PPUSH
15249: CALL_OW 302
15253: IFFALSE 15267
// Say ( Lisa , D3b-Lisa-2 ) ;
15255: LD_EXP 6
15259: PPUSH
15260: LD_STRING D3b-Lisa-2
15262: PPUSH
15263: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15267: LD_EXP 12
15271: PPUSH
15272: CALL_OW 302
15276: PUSH
15277: LD_EXP 11
15281: PUSH
15282: LD_INT 3
15284: EQUAL
15285: AND
15286: PUSH
15287: LD_STRING 06_JoanStatus_1
15289: PPUSH
15290: LD_INT 0
15292: PPUSH
15293: CALL_OW 30
15297: PUSH
15298: LD_INT 1
15300: EQUAL
15301: AND
15302: IFFALSE 15353
// begin Say ( Houten , D3b-VanH-1 ) ;
15304: LD_EXP 12
15308: PPUSH
15309: LD_STRING D3b-VanH-1
15311: PPUSH
15312: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15316: LD_EXP 1
15320: PPUSH
15321: LD_STRING D3b-JMM-2
15323: PPUSH
15324: CALL_OW 88
// if IsOK ( Lisa ) then
15328: LD_EXP 6
15332: PPUSH
15333: CALL_OW 302
15337: IFFALSE 15351
// Say ( Lisa , D3b-Lisa-2 ) ;
15339: LD_EXP 6
15343: PPUSH
15344: LD_STRING D3b-Lisa-2
15346: PPUSH
15347: CALL_OW 88
// end else
15351: GO 15403
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15353: LD_EXP 10
15357: PPUSH
15358: LD_STRING D3b-Sol1-1
15360: PPUSH
15361: LD_STRING D3b-Sol1-1
15363: PPUSH
15364: CALL 4572 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15368: LD_EXP 1
15372: PPUSH
15373: LD_STRING D3b-JMM-2
15375: PPUSH
15376: CALL_OW 88
// if IsOK ( Lisa ) then
15380: LD_EXP 6
15384: PPUSH
15385: CALL_OW 302
15389: IFFALSE 15403
// Say ( Lisa , D3b-Lisa-2 ) ;
15391: LD_EXP 6
15395: PPUSH
15396: LD_STRING D3b-Lisa-2
15398: PPUSH
15399: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
15403: LD_INT 22
15405: PUSH
15406: LD_INT 1
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 21
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 26
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 2
15435: PUSH
15436: LD_INT 25
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 25
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 25
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 25
15468: PUSH
15469: LD_INT 4
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: PUSH
15494: LD_EXP 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: DIFF
15502: PPUSH
15503: LD_STRING DCa-Sol1-1
15505: PPUSH
15506: LD_STRING DCa-Sol1-1
15508: PPUSH
15509: CALL 4572 0 3
// Say ( JMM , DCb-JMM-1 ) ;
15513: LD_EXP 1
15517: PPUSH
15518: LD_STRING DCb-JMM-1
15520: PPUSH
15521: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
15525: LD_INT 22
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 26
15547: PUSH
15548: LD_INT 1
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 2
15557: PUSH
15558: LD_INT 25
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 25
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 25
15590: PUSH
15591: LD_INT 4
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: PPUSH
15611: CALL_OW 69
15615: PUSH
15616: LD_EXP 1
15620: PUSH
15621: EMPTY
15622: LIST
15623: DIFF
15624: PPUSH
15625: LD_STRING DCb-Sol1-1
15627: PPUSH
15628: LD_STRING DCb-Sol1-1
15630: PPUSH
15631: CALL 4572 0 3
// Say ( JMM , DCb-JMM-2 ) ;
15635: LD_EXP 1
15639: PPUSH
15640: LD_STRING DCb-JMM-2
15642: PPUSH
15643: CALL_OW 88
// JMMArrive = 1 ;
15647: LD_ADDR_EXP 37
15651: PUSH
15652: LD_INT 1
15654: ST_TO_ADDR
// secondAttack = 1 ;
15655: LD_ADDR_EXP 33
15659: PUSH
15660: LD_INT 1
15662: ST_TO_ADDR
// end ;
15663: END
// every 0 0$01 trigger JMMArrive = 1 do
15664: LD_EXP 37
15668: PUSH
15669: LD_INT 1
15671: EQUAL
15672: IFFALSE 15752
15674: GO 15676
15676: DISABLE
// begin wait ( 13 13$0 ) ;
15677: LD_INT 27300
15679: PPUSH
15680: CALL_OW 67
// DialogueOn ;
15684: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
15688: LD_EXP 22
15692: PPUSH
15693: LD_STRING D4-Pow-1
15695: PPUSH
15696: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
15700: LD_EXP 1
15704: PPUSH
15705: LD_STRING D4-JMM-1
15707: PPUSH
15708: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
15712: LD_EXP 22
15716: PPUSH
15717: LD_STRING D4-Pow-2
15719: PPUSH
15720: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
15724: LD_EXP 1
15728: PPUSH
15729: LD_STRING D4-JMM-2
15731: PPUSH
15732: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
15736: LD_EXP 22
15740: PPUSH
15741: LD_STRING D4-Pow-3
15743: PPUSH
15744: CALL_OW 94
// DialogueOff ;
15748: CALL_OW 7
// end ;
15752: END
// every 0 0$01 trigger JMMArrive = 1 do
15753: LD_EXP 37
15757: PUSH
15758: LD_INT 1
15760: EQUAL
15761: IFFALSE 15793
15763: GO 15765
15765: DISABLE
// begin wait ( 20 20$0 ) ;
15766: LD_INT 42000
15768: PPUSH
15769: CALL_OW 67
// DialogueOn ;
15773: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
15777: LD_EXP 22
15781: PPUSH
15782: LD_STRING D4a-Pow-1
15784: PPUSH
15785: CALL_OW 94
// DialogueOff ;
15789: CALL_OW 7
// end ;
15793: END
// every 0 0$01 trigger JMMArrive = 1 do
15794: LD_EXP 37
15798: PUSH
15799: LD_INT 1
15801: EQUAL
15802: IFFALSE 15822
15804: GO 15806
15806: DISABLE
// begin wait ( 30 30$0 ) ;
15807: LD_INT 63000
15809: PPUSH
15810: CALL_OW 67
// PrepareSikorsky ;
15814: CALL 3156 0 0
// PrepareSikorskyArmy ;
15818: CALL 3296 0 0
// end ;
15822: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
15823: LD_EXP 16
15827: PPUSH
15828: LD_INT 5
15830: PPUSH
15831: CALL_OW 308
15835: IFFALSE 16035
15837: GO 15839
15839: DISABLE
// begin SikorskyArrive = 1 ;
15840: LD_ADDR_EXP 17
15844: PUSH
15845: LD_INT 1
15847: ST_TO_ADDR
// CenterNowOnUnits ( SikorskyTank ) ;
15848: LD_EXP 16
15852: PPUSH
15853: CALL_OW 87
// DialogueOn ;
15857: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
15861: LD_EXP 15
15865: PPUSH
15866: LD_STRING D5-Sik-1
15868: PPUSH
15869: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
15873: LD_EXP 1
15877: PPUSH
15878: LD_STRING D5-JMM-1a
15880: PPUSH
15881: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
15885: LD_EXP 15
15889: PPUSH
15890: LD_STRING D5-Sik-2
15892: PPUSH
15893: CALL_OW 88
// case query ( QSikorski ) of 1 :
15897: LD_STRING QSikorski
15899: PPUSH
15900: CALL_OW 97
15904: PUSH
15905: LD_INT 1
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15913
15911: GO 15936
15913: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
15914: LD_EXP 15
15918: PPUSH
15919: LD_STRING D5a-Sik-1
15921: PPUSH
15922: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
15926: LD_ADDR_EXP 18
15930: PUSH
15931: LD_INT 2100
15933: ST_TO_ADDR
// end ; 2 :
15934: GO 16023
15936: LD_INT 2
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 15967
15944: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
15945: LD_EXP 15
15949: PPUSH
15950: LD_STRING D5b-Sik-1
15952: PPUSH
15953: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
15957: LD_ADDR_EXP 18
15961: PUSH
15962: LD_INT 10500
15964: ST_TO_ADDR
// end ; 3 :
15965: GO 16023
15967: LD_INT 3
15969: DOUBLE
15970: EQUAL
15971: IFTRUE 15975
15973: GO 16022
15975: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
15976: LD_EXP 15
15980: PPUSH
15981: LD_STRING D5c-Sik-1
15983: PPUSH
15984: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
15988: LD_EXP 1
15992: PPUSH
15993: LD_STRING D5c-JMM-1
15995: PPUSH
15996: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16000: LD_EXP 15
16004: PPUSH
16005: LD_STRING D5c-Sik-2
16007: PPUSH
16008: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16012: LD_ADDR_EXP 18
16016: PUSH
16017: LD_INT 10500
16019: ST_TO_ADDR
// end ; end ;
16020: GO 16023
16022: POP
// DialogueOff ;
16023: CALL_OW 7
// timerStatus = 1 ;
16027: LD_ADDR_EXP 34
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// end ;
16035: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16036: LD_EXP 18
16040: PUSH
16041: LD_INT 35
16043: LESS
16044: IFFALSE 16092
16046: GO 16048
16048: DISABLE
// begin timerStatus = 0 ;
16049: LD_ADDR_EXP 34
16053: PUSH
16054: LD_INT 0
16056: ST_TO_ADDR
// DialogueOn ;
16057: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16061: LD_EXP 15
16065: PPUSH
16066: LD_STRING D6-Sik-1
16068: PPUSH
16069: CALL_OW 88
// DialogueOff ;
16073: CALL_OW 7
// SikorskyAI = 1 ;
16077: LD_ADDR_EXP 19
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16085: LD_STRING M2
16087: PPUSH
16088: CALL_OW 337
// end ;
16092: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16093: LD_EXP 16
16097: PPUSH
16098: LD_INT 18
16100: PPUSH
16101: CALL_OW 308
16105: IFFALSE 16189
16107: GO 16109
16109: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16110: LD_EXP 15
16114: PPUSH
16115: LD_STRING D7-Sik-1
16117: PPUSH
16118: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16122: LD_EXP 1
16126: PPUSH
16127: LD_INT 24
16129: PPUSH
16130: CALL_OW 308
16134: PUSH
16135: LD_EXP 1
16139: PPUSH
16140: CALL_OW 310
16144: OR
16145: IFFALSE 16169
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16147: LD_EXP 15
16151: PPUSH
16152: LD_STRING D7a-Sik-1
16154: PPUSH
16155: CALL_OW 88
// SikorskyStatus = 1 ;
16159: LD_ADDR_EXP 20
16163: PUSH
16164: LD_INT 1
16166: ST_TO_ADDR
// end else
16167: GO 16189
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16169: LD_EXP 15
16173: PPUSH
16174: LD_STRING D7b-Sik-1
16176: PPUSH
16177: CALL_OW 88
// SikorskyStatus = 2 ;
16181: LD_ADDR_EXP 20
16185: PUSH
16186: LD_INT 2
16188: ST_TO_ADDR
// end ; end ;
16189: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
16190: LD_EXP 35
16194: PUSH
16195: LD_INT 1
16197: EQUAL
16198: IFFALSE 16307
16200: GO 16202
16202: DISABLE
16203: LD_INT 0
16205: PPUSH
// begin enable ;
16206: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
16207: LD_ADDR_VAR 0 1
16211: PUSH
16212: LD_INT 22
16214: PUSH
16215: LD_INT 3
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 69
16226: PUSH
16227: FOR_IN
16228: IFFALSE 16255
// if IsInArea ( i , RussianEscape ) then
16230: LD_VAR 0 1
16234: PPUSH
16235: LD_INT 22
16237: PPUSH
16238: CALL_OW 308
16242: IFFALSE 16253
// RemoveUnit ( i ) ;
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 64
16253: GO 16227
16255: POP
16256: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
16257: LD_ADDR_VAR 0 1
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_INT 6
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PPUSH
16272: CALL_OW 69
16276: PUSH
16277: FOR_IN
16278: IFFALSE 16305
// if IsInArea ( i , RussianEscape ) then
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_INT 22
16287: PPUSH
16288: CALL_OW 308
16292: IFFALSE 16303
// RemoveUnit ( i ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL_OW 64
16303: GO 16277
16305: POP
16306: POP
// end ; end_of_file
16307: PPOPN 1
16309: END
// on BuildingComplete ( building ) do var tmp , un ;
16310: LD_INT 0
16312: PPUSH
16313: PPUSH
// begin if GetSide ( building ) = 3 then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 255
16323: PUSH
16324: LD_INT 3
16326: EQUAL
16327: IFFALSE 16732
// begin if GetBType ( building ) = b_depot then
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 266
16338: PUSH
16339: LD_INT 0
16341: EQUAL
16342: IFFALSE 16410
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 274
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 5000
16359: PPUSH
16360: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL_OW 274
16373: PPUSH
16374: LD_INT 2
16376: PPUSH
16377: LD_INT 5000
16379: PPUSH
16380: CALL_OW 277
// SetBName ( building , konev ) ;
16384: LD_VAR 0 1
16388: PPUSH
16389: LD_STRING konev
16391: PPUSH
16392: CALL_OW 500
// ruDepot = building ;
16396: LD_ADDR_EXP 27
16400: PUSH
16401: LD_VAR 0 1
16405: ST_TO_ADDR
// BuildRussianBase ;
16406: CALL 5177 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 266
16419: PUSH
16420: LD_INT 0
16422: EQUAL
16423: PUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 266
16433: PUSH
16434: LD_INT 2
16436: EQUAL
16437: OR
16438: PUSH
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 266
16448: PUSH
16449: LD_INT 4
16451: EQUAL
16452: OR
16453: IFFALSE 16464
// ComUpgrade ( building ) ;
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 146
// if GetBType ( building ) = b_lab then
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 266
16473: PUSH
16474: LD_INT 6
16476: EQUAL
16477: IFFALSE 16528
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 10
16486: PPUSH
16487: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
16491: LD_VAR 0 1
16495: PPUSH
16496: LD_INT 12
16498: PPUSH
16499: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
16503: LD_INT 3
16505: PPUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: LD_INT 3
16513: PPUSH
16514: CALL 5732 0 3
// ruLab = building ;
16518: LD_ADDR_EXP 28
16522: PUSH
16523: LD_VAR 0 1
16527: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
16528: LD_VAR 0 1
16532: PPUSH
16533: CALL_OW 266
16537: PUSH
16538: LD_INT 32
16540: EQUAL
16541: IFFALSE 16659
// begin uc_side = 3 ;
16543: LD_ADDR_OWVAR 20
16547: PUSH
16548: LD_INT 3
16550: ST_TO_ADDR
// uc_nation = 3 ;
16551: LD_ADDR_OWVAR 21
16555: PUSH
16556: LD_INT 3
16558: ST_TO_ADDR
// hc_gallery =  ;
16559: LD_ADDR_OWVAR 33
16563: PUSH
16564: LD_STRING 
16566: ST_TO_ADDR
// hc_name =  ;
16567: LD_ADDR_OWVAR 26
16571: PUSH
16572: LD_STRING 
16574: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16575: LD_INT 0
16577: PPUSH
16578: LD_INT 1
16580: PPUSH
16581: LD_EXP 24
16585: PPUSH
16586: LD_EXP 25
16590: PPUSH
16591: CALL_OW 12
16595: PPUSH
16596: CALL_OW 380
// un = CreateHuman ;
16600: LD_ADDR_VAR 0 3
16604: PUSH
16605: CALL_OW 44
16609: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_VAR 0 1
16619: PPUSH
16620: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_INT 43
16631: PUSH
16632: LD_INT 44
16634: PUSH
16635: LD_INT 46
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PPUSH
16655: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 266
16668: PUSH
16669: LD_INT 33
16671: EQUAL
16672: IFFALSE 16709
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16674: LD_VAR 0 1
16678: PPUSH
16679: LD_INT 43
16681: PUSH
16682: LD_INT 44
16684: PUSH
16685: LD_INT 46
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 1
16695: PPUSH
16696: LD_INT 3
16698: PPUSH
16699: CALL_OW 12
16703: ARRAY
16704: PPUSH
16705: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 266
16718: PUSH
16719: LD_INT 24
16721: EQUAL
16722: IFFALSE 16732
// russianAI = 1 ;
16724: LD_ADDR_EXP 26
16728: PUSH
16729: LD_INT 1
16731: ST_TO_ADDR
// end ; end ;
16732: PPOPN 3
16734: END
// on UpgradeComplete ( building ) do var i ;
16735: LD_INT 0
16737: PPUSH
// begin if GetSide ( building ) = 3 then
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 255
16747: PUSH
16748: LD_INT 3
16750: EQUAL
16751: IFFALSE 16932
// begin if GetBType ( building ) = b_factory then
16753: LD_VAR 0 1
16757: PPUSH
16758: CALL_OW 266
16762: PUSH
16763: LD_INT 3
16765: EQUAL
16766: IFFALSE 16833
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_INT 22
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 25
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PPUSH
16797: CALL_OW 69
16801: PUSH
16802: FOR_IN
16803: IFFALSE 16821
// ComEnterUnit ( i , building ) ;
16805: LD_VAR 0 2
16809: PPUSH
16810: LD_VAR 0 1
16814: PPUSH
16815: CALL_OW 120
16819: GO 16802
16821: POP
16822: POP
// ruFab = building ;
16823: LD_ADDR_EXP 29
16827: PUSH
16828: LD_VAR 0 1
16832: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 266
16842: PUSH
16843: LD_INT 8
16845: EQUAL
16846: IFFALSE 16903
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16848: LD_ADDR_VAR 0 2
16852: PUSH
16853: LD_INT 22
16855: PUSH
16856: LD_INT 3
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 25
16865: PUSH
16866: LD_INT 4
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PPUSH
16877: CALL_OW 69
16881: PUSH
16882: FOR_IN
16883: IFFALSE 16901
// ComEnterUnit ( i , building ) ;
16885: LD_VAR 0 2
16889: PPUSH
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 120
16899: GO 16882
16901: POP
16902: POP
// if GetBType ( building ) = b_warehouse then
16903: LD_VAR 0 1
16907: PPUSH
16908: CALL_OW 266
16912: PUSH
16913: LD_INT 1
16915: EQUAL
16916: IFFALSE 16932
// begin ComEnterUnit ( Borodin , building ) ;
16918: LD_EXP 23
16922: PPUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 120
// end ; end ; end ;
16932: PPOPN 2
16934: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 247
16944: PUSH
16945: LD_INT 2
16947: EQUAL
16948: PUSH
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 263
16958: PUSH
16959: LD_INT 3
16961: EQUAL
16962: AND
16963: PUSH
16964: LD_EXP 39
16968: PUSH
16969: LD_INT 0
16971: EQUAL
16972: AND
16973: IFFALSE 17091
// begin varEvent1 = 1 ;
16975: LD_ADDR_EXP 39
16979: PUSH
16980: LD_INT 1
16982: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
16992: LD_INT 22
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: LD_INT 25
17017: PUSH
17018: LD_INT 1
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 25
17027: PUSH
17028: LD_INT 2
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 25
17037: PUSH
17038: LD_INT 3
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 25
17047: PUSH
17048: LD_INT 4
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: PUSH
17072: LD_EXP 1
17076: PUSH
17077: EMPTY
17078: LIST
17079: DIFF
17080: PPUSH
17081: LD_STRING DC-Sol1-1
17083: PPUSH
17084: LD_STRING DC-FSol1-1
17086: PPUSH
17087: CALL 4572 0 3
// end ; end ; end_of_file
17091: PPOPN 1
17093: END
// every 0 0$1 do
17094: GO 17096
17096: DISABLE
// begin enable ;
17097: ENABLE
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17098: LD_INT 3
17100: PPUSH
17101: LD_INT 6
17103: PPUSH
17104: CALL 5817 0 2
// DefenseBase ( 1 , RussianBaseTerritory ) ;
17108: LD_INT 1
17110: PPUSH
17111: LD_INT 24
17113: PPUSH
17114: CALL 6564 0 2
// if russianAI = 1 then
17118: LD_EXP 26
17122: PUSH
17123: LD_INT 1
17125: EQUAL
17126: IFFALSE 17189
// begin RepairBuilding ( 3 , ruDepot ) ;
17128: LD_INT 3
17130: PPUSH
17131: LD_EXP 27
17135: PPUSH
17136: CALL 6864 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
17140: LD_INT 3
17142: PPUSH
17143: LD_INT 7
17145: PPUSH
17146: LD_INT 6
17148: PPUSH
17149: LD_EXP 28
17153: PPUSH
17154: CALL 7329 0 4
// RebuildBuildings ( 3 , ruDestroyBuilds ) ;
17158: LD_INT 3
17160: PPUSH
17161: LD_EXP 30
17165: PPUSH
17166: CALL 7123 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
17170: LD_INT 6
17172: PPUSH
17173: LD_INT 8
17175: PPUSH
17176: LD_INT 93
17178: PPUSH
17179: LD_INT 93
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: CALL 7595 0 5
// end ; if SikorskyArrive = 1 then
17189: LD_EXP 17
17193: PUSH
17194: LD_INT 1
17196: EQUAL
17197: IFFALSE 17218
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
17199: LD_INT 3
17201: PPUSH
17202: LD_INT 10
17204: PPUSH
17205: LD_INT 53
17207: PPUSH
17208: LD_INT 59
17210: PPUSH
17211: LD_INT 3
17213: PPUSH
17214: CALL 7595 0 5
// end ;
17218: END
// every 0 0$1 trigger SikorskyAI = 1 do
17219: LD_EXP 19
17223: PUSH
17224: LD_INT 1
17226: EQUAL
17227: IFFALSE 17265
17229: GO 17231
17231: DISABLE
// begin enable ;
17232: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
17233: LD_INT 4
17235: PPUSH
17236: LD_INT 10
17238: PPUSH
17239: LD_INT 93
17241: PPUSH
17242: LD_INT 93
17244: PPUSH
17245: LD_INT 3
17247: PPUSH
17248: CALL 7595 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
17252: LD_INT 4
17254: PPUSH
17255: LD_INT 11
17257: PPUSH
17258: LD_INT 3
17260: PPUSH
17261: CALL 13532 0 3
// end ;
17265: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17266: LD_EXP 26
17270: PUSH
17271: LD_INT 1
17273: EQUAL
17274: PUSH
17275: LD_EXP 29
17279: PPUSH
17280: CALL_OW 302
17284: AND
17285: PUSH
17286: LD_EXP 29
17290: PPUSH
17291: CALL_OW 255
17295: PUSH
17296: LD_INT 3
17298: EQUAL
17299: AND
17300: PUSH
17301: LD_INT 22
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 21
17313: PUSH
17314: LD_INT 2
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: CALL_OW 69
17329: PUSH
17330: LD_INT 0
17332: EQUAL
17333: AND
17334: IFFALSE 17517
17336: GO 17338
17338: DISABLE
// begin enable ;
17339: ENABLE
// if Difficulty = 1 then
17340: LD_OWVAR 67
17344: PUSH
17345: LD_INT 1
17347: EQUAL
17348: IFFALSE 17403
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 6 ) , 1 , [ 43 , 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
17350: LD_INT 3
17352: PPUSH
17353: LD_EXP 29
17357: PPUSH
17358: LD_INT 5
17360: PPUSH
17361: LD_INT 6
17363: PPUSH
17364: CALL_OW 12
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: LD_INT 43
17374: PUSH
17375: LD_INT 43
17377: PUSH
17378: LD_INT 44
17380: PUSH
17381: LD_INT 46
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: LD_INT 3
17395: PPUSH
17396: LD_INT 24
17398: PPUSH
17399: CALL 8430 0 8
// if Difficulty = 2 then
17403: LD_OWVAR 67
17407: PUSH
17408: LD_INT 2
17410: EQUAL
17411: IFFALSE 17462
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 7 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
17413: LD_INT 3
17415: PPUSH
17416: LD_EXP 29
17420: PPUSH
17421: LD_INT 5
17423: PPUSH
17424: LD_INT 7
17426: PPUSH
17427: CALL_OW 12
17431: PPUSH
17432: LD_INT 1
17434: PPUSH
17435: LD_INT 44
17437: PUSH
17438: LD_INT 44
17440: PUSH
17441: LD_INT 46
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 3
17454: PPUSH
17455: LD_INT 24
17457: PPUSH
17458: CALL 8430 0 8
// if Difficulty = 3 then
17462: LD_OWVAR 67
17466: PUSH
17467: LD_INT 3
17469: EQUAL
17470: IFFALSE 17517
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
17472: LD_INT 3
17474: PPUSH
17475: LD_EXP 29
17479: PPUSH
17480: LD_INT 5
17482: PPUSH
17483: LD_INT 8
17485: PPUSH
17486: CALL_OW 12
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_INT 44
17496: PUSH
17497: LD_INT 46
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PPUSH
17504: LD_INT 1
17506: PPUSH
17507: LD_INT 3
17509: PPUSH
17510: LD_INT 24
17512: PPUSH
17513: CALL 8430 0 8
// end ; end_of_file
17517: END
// every 0 0$1 trigger firstAttack = 1 do
17518: LD_EXP 32
17522: PUSH
17523: LD_INT 1
17525: EQUAL
17526: IFFALSE 17632
17528: GO 17530
17530: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17531: LD_INT 6
17533: PPUSH
17534: LD_INT 3
17536: PPUSH
17537: LD_INT 5
17539: PPUSH
17540: LD_INT 6
17542: PPUSH
17543: CALL_OW 12
17547: PUSH
17548: LD_INT 5
17550: PPUSH
17551: LD_INT 6
17553: PPUSH
17554: CALL_OW 12
17558: PUSH
17559: LD_INT 5
17561: PPUSH
17562: LD_INT 6
17564: PPUSH
17565: CALL_OW 12
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_OWVAR 67
17579: ARRAY
17580: PPUSH
17581: LD_INT 0
17583: PPUSH
17584: LD_INT 0
17586: PPUSH
17587: LD_INT 0
17589: PPUSH
17590: LD_INT 0
17592: PPUSH
17593: LD_EXP 24
17597: PPUSH
17598: LD_EXP 25
17602: PPUSH
17603: CALL_OW 12
17607: PPUSH
17608: LD_INT 16
17610: PPUSH
17611: LD_INT 7
17613: PPUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_INT 1
17619: PPUSH
17620: LD_INT 3
17622: PPUSH
17623: CALL_OW 12
17627: PPUSH
17628: CALL 8994 0 12
17632: END
// every 0 0$1 trigger firstAttack = 1 do
17633: LD_EXP 32
17637: PUSH
17638: LD_INT 1
17640: EQUAL
17641: IFFALSE 17749
17643: GO 17645
17645: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
17646: LD_INT 16
17648: PPUSH
17649: LD_INT 6
17651: PPUSH
17652: LD_INT 5
17654: PPUSH
17655: LD_INT 8
17657: PPUSH
17658: CALL_OW 12
17662: PUSH
17663: LD_INT 6
17665: PPUSH
17666: LD_INT 9
17668: PPUSH
17669: CALL_OW 12
17673: PUSH
17674: LD_INT 7
17676: PPUSH
17677: LD_INT 9
17679: PPUSH
17680: CALL_OW 12
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: PUSH
17690: LD_OWVAR 67
17694: ARRAY
17695: PPUSH
17696: LD_EXP 24
17700: PPUSH
17701: LD_EXP 25
17705: PPUSH
17706: CALL_OW 12
17710: PPUSH
17711: LD_INT 3
17713: PPUSH
17714: LD_INT 1
17716: PPUSH
17717: LD_INT 3
17719: PPUSH
17720: LD_INT 42
17722: PUSH
17723: LD_INT 43
17725: PUSH
17726: LD_INT 44
17728: PUSH
17729: LD_INT 46
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: PPUSH
17738: EMPTY
17739: PPUSH
17740: EMPTY
17741: PPUSH
17742: LD_INT 1
17744: PPUSH
17745: CALL 11854 0 11
17749: END
// every 3 3$1 trigger firstAttack = 1 do
17750: LD_EXP 32
17754: PUSH
17755: LD_INT 1
17757: EQUAL
17758: IFFALSE 17864
17760: GO 17762
17762: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17763: LD_INT 6
17765: PPUSH
17766: LD_INT 3
17768: PPUSH
17769: LD_INT 5
17771: PPUSH
17772: LD_INT 6
17774: PPUSH
17775: CALL_OW 12
17779: PUSH
17780: LD_INT 5
17782: PPUSH
17783: LD_INT 6
17785: PPUSH
17786: CALL_OW 12
17790: PUSH
17791: LD_INT 5
17793: PPUSH
17794: LD_INT 6
17796: PPUSH
17797: CALL_OW 12
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: PUSH
17807: LD_OWVAR 67
17811: ARRAY
17812: PPUSH
17813: LD_INT 0
17815: PPUSH
17816: LD_INT 0
17818: PPUSH
17819: LD_INT 0
17821: PPUSH
17822: LD_INT 0
17824: PPUSH
17825: LD_EXP 24
17829: PPUSH
17830: LD_EXP 25
17834: PPUSH
17835: CALL_OW 12
17839: PPUSH
17840: LD_INT 16
17842: PPUSH
17843: LD_INT 7
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_INT 3
17854: PPUSH
17855: CALL_OW 12
17859: PPUSH
17860: CALL 8994 0 12
17864: END
// every 3 3$1 trigger firstAttack = 1 do
17865: LD_EXP 32
17869: PUSH
17870: LD_INT 1
17872: EQUAL
17873: IFFALSE 17981
17875: GO 17877
17877: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
17878: LD_INT 16
17880: PPUSH
17881: LD_INT 6
17883: PPUSH
17884: LD_INT 5
17886: PPUSH
17887: LD_INT 8
17889: PPUSH
17890: CALL_OW 12
17894: PUSH
17895: LD_INT 6
17897: PPUSH
17898: LD_INT 9
17900: PPUSH
17901: CALL_OW 12
17905: PUSH
17906: LD_INT 7
17908: PPUSH
17909: LD_INT 9
17911: PPUSH
17912: CALL_OW 12
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: LD_OWVAR 67
17926: ARRAY
17927: PPUSH
17928: LD_EXP 24
17932: PPUSH
17933: LD_EXP 25
17937: PPUSH
17938: CALL_OW 12
17942: PPUSH
17943: LD_INT 3
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: LD_INT 3
17951: PPUSH
17952: LD_INT 42
17954: PUSH
17955: LD_INT 43
17957: PUSH
17958: LD_INT 44
17960: PUSH
17961: LD_INT 46
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: PPUSH
17970: EMPTY
17971: PPUSH
17972: EMPTY
17973: PPUSH
17974: LD_INT 1
17976: PPUSH
17977: CALL 11854 0 11
17981: END
// every 1 1$1 trigger secondAttack = 1 do
17982: LD_EXP 33
17986: PUSH
17987: LD_INT 1
17989: EQUAL
17990: IFFALSE 18096
17992: GO 17994
17994: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17995: LD_INT 6
17997: PPUSH
17998: LD_INT 3
18000: PPUSH
18001: LD_INT 4
18003: PPUSH
18004: LD_INT 7
18006: PPUSH
18007: CALL_OW 12
18011: PUSH
18012: LD_INT 6
18014: PPUSH
18015: LD_INT 7
18017: PPUSH
18018: CALL_OW 12
18022: PUSH
18023: LD_INT 6
18025: PPUSH
18026: LD_INT 10
18028: PPUSH
18029: CALL_OW 12
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: LIST
18038: PUSH
18039: LD_OWVAR 67
18043: ARRAY
18044: PPUSH
18045: LD_INT 0
18047: PPUSH
18048: LD_INT 0
18050: PPUSH
18051: LD_INT 0
18053: PPUSH
18054: LD_INT 0
18056: PPUSH
18057: LD_EXP 24
18061: PPUSH
18062: LD_EXP 25
18066: PPUSH
18067: CALL_OW 12
18071: PPUSH
18072: LD_INT 16
18074: PPUSH
18075: LD_INT 7
18077: PPUSH
18078: LD_INT 1
18080: PPUSH
18081: LD_INT 1
18083: PPUSH
18084: LD_INT 3
18086: PPUSH
18087: CALL_OW 12
18091: PPUSH
18092: CALL 8994 0 12
18096: END
// every 1 1$1 trigger secondAttack = 1 do
18097: LD_EXP 33
18101: PUSH
18102: LD_INT 1
18104: EQUAL
18105: IFFALSE 18213
18107: GO 18109
18109: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18110: LD_INT 16
18112: PPUSH
18113: LD_INT 6
18115: PPUSH
18116: LD_INT 5
18118: PPUSH
18119: LD_INT 8
18121: PPUSH
18122: CALL_OW 12
18126: PUSH
18127: LD_INT 6
18129: PPUSH
18130: LD_INT 9
18132: PPUSH
18133: CALL_OW 12
18137: PUSH
18138: LD_INT 7
18140: PPUSH
18141: LD_INT 9
18143: PPUSH
18144: CALL_OW 12
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: LIST
18153: PUSH
18154: LD_OWVAR 67
18158: ARRAY
18159: PPUSH
18160: LD_EXP 24
18164: PPUSH
18165: LD_EXP 25
18169: PPUSH
18170: CALL_OW 12
18174: PPUSH
18175: LD_INT 3
18177: PPUSH
18178: LD_INT 1
18180: PPUSH
18181: LD_INT 3
18183: PPUSH
18184: LD_INT 42
18186: PUSH
18187: LD_INT 43
18189: PUSH
18190: LD_INT 44
18192: PUSH
18193: LD_INT 46
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: PPUSH
18202: EMPTY
18203: PPUSH
18204: EMPTY
18205: PPUSH
18206: LD_INT 1
18208: PPUSH
18209: CALL 11854 0 11
18213: END
// every 20 20$0 do
18214: GO 18216
18216: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18217: LD_INT 6
18219: PPUSH
18220: LD_INT 3
18222: PPUSH
18223: LD_INT 8
18225: PPUSH
18226: LD_INT 9
18228: PPUSH
18229: CALL_OW 12
18233: PUSH
18234: LD_INT 7
18236: PPUSH
18237: LD_INT 10
18239: PPUSH
18240: CALL_OW 12
18244: PUSH
18245: LD_INT 8
18247: PPUSH
18248: LD_INT 10
18250: PPUSH
18251: CALL_OW 12
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: PUSH
18261: LD_OWVAR 67
18265: ARRAY
18266: PPUSH
18267: LD_INT 0
18269: PPUSH
18270: LD_INT 0
18272: PPUSH
18273: LD_INT 0
18275: PPUSH
18276: LD_INT 0
18278: PPUSH
18279: LD_EXP 24
18283: PPUSH
18284: LD_EXP 25
18288: PPUSH
18289: CALL_OW 12
18293: PPUSH
18294: LD_INT 16
18296: PPUSH
18297: LD_INT 7
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: LD_INT 1
18305: PPUSH
18306: LD_INT 3
18308: PPUSH
18309: CALL_OW 12
18313: PPUSH
18314: CALL 8994 0 12
18318: END
// every 20 20$0 do
18319: GO 18321
18321: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18322: LD_INT 16
18324: PPUSH
18325: LD_INT 6
18327: PPUSH
18328: LD_INT 5
18330: PPUSH
18331: LD_INT 8
18333: PPUSH
18334: CALL_OW 12
18338: PUSH
18339: LD_INT 6
18341: PPUSH
18342: LD_INT 9
18344: PPUSH
18345: CALL_OW 12
18349: PUSH
18350: LD_INT 7
18352: PPUSH
18353: LD_INT 9
18355: PPUSH
18356: CALL_OW 12
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: LD_OWVAR 67
18370: ARRAY
18371: PPUSH
18372: LD_EXP 24
18376: PPUSH
18377: LD_EXP 25
18381: PPUSH
18382: CALL_OW 12
18386: PPUSH
18387: LD_INT 3
18389: PPUSH
18390: LD_INT 1
18392: PPUSH
18393: LD_INT 3
18395: PPUSH
18396: LD_INT 42
18398: PUSH
18399: LD_INT 43
18401: PUSH
18402: LD_INT 44
18404: PUSH
18405: LD_INT 46
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: PPUSH
18414: EMPTY
18415: PPUSH
18416: EMPTY
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL 11854 0 11
18425: END
// every 25 25$0 do
18426: GO 18428
18428: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18429: LD_INT 6
18431: PPUSH
18432: LD_INT 3
18434: PPUSH
18435: LD_INT 8
18437: PPUSH
18438: LD_INT 9
18440: PPUSH
18441: CALL_OW 12
18445: PUSH
18446: LD_INT 7
18448: PPUSH
18449: LD_INT 10
18451: PPUSH
18452: CALL_OW 12
18456: PUSH
18457: LD_INT 8
18459: PPUSH
18460: LD_INT 10
18462: PPUSH
18463: CALL_OW 12
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: PUSH
18473: LD_OWVAR 67
18477: ARRAY
18478: PPUSH
18479: LD_INT 0
18481: PPUSH
18482: LD_INT 0
18484: PPUSH
18485: LD_INT 0
18487: PPUSH
18488: LD_INT 0
18490: PPUSH
18491: LD_EXP 24
18495: PPUSH
18496: LD_EXP 25
18500: PPUSH
18501: CALL_OW 12
18505: PPUSH
18506: LD_INT 16
18508: PPUSH
18509: LD_INT 7
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: LD_INT 1
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: CALL_OW 12
18525: PPUSH
18526: CALL 8994 0 12
18530: END
// every 25 25$0 do
18531: GO 18533
18533: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
18534: LD_INT 16
18536: PPUSH
18537: LD_INT 6
18539: PPUSH
18540: LD_INT 5
18542: PPUSH
18543: LD_INT 8
18545: PPUSH
18546: CALL_OW 12
18550: PUSH
18551: LD_INT 6
18553: PPUSH
18554: LD_INT 9
18556: PPUSH
18557: CALL_OW 12
18561: PUSH
18562: LD_INT 7
18564: PPUSH
18565: LD_INT 9
18567: PPUSH
18568: CALL_OW 12
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: LD_OWVAR 67
18582: ARRAY
18583: PPUSH
18584: LD_EXP 24
18588: PPUSH
18589: LD_EXP 25
18593: PPUSH
18594: CALL_OW 12
18598: PPUSH
18599: LD_INT 3
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_INT 3
18607: PPUSH
18608: LD_INT 42
18610: PUSH
18611: LD_INT 43
18613: PUSH
18614: LD_INT 44
18616: PUSH
18617: LD_INT 46
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: PPUSH
18626: EMPTY
18627: PPUSH
18628: EMPTY
18629: PPUSH
18630: LD_INT 1
18632: PPUSH
18633: CALL 11854 0 11
18637: END
// every 0 0$1 trigger timerStatus = 1 do
18638: LD_EXP 34
18642: PUSH
18643: LD_INT 1
18645: EQUAL
18646: IFFALSE 18683
18648: GO 18650
18650: DISABLE
// begin enable ;
18651: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
18652: LD_ADDR_OWVAR 47
18656: PUSH
18657: LD_STRING #Am08-1
18659: PUSH
18660: LD_EXP 18
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
18669: LD_ADDR_EXP 18
18673: PUSH
18674: LD_EXP 18
18678: PUSH
18679: LD_INT 35
18681: MINUS
18682: ST_TO_ADDR
// end ; end_of_file
18683: END
// every 1 1$0 do
18684: GO 18686
18686: DISABLE
// begin if supply <= 13 and supply > 7 then
18687: LD_EXP 38
18691: PUSH
18692: LD_INT 13
18694: LESSEQUAL
18695: PUSH
18696: LD_EXP 38
18700: PUSH
18701: LD_INT 7
18703: GREATER
18704: AND
18705: IFFALSE 18728
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
18707: LD_INT 3
18709: PPUSH
18710: LD_INT 5
18712: PPUSH
18713: CALL_OW 12
18717: PPUSH
18718: LD_INT 5
18720: PPUSH
18721: LD_INT 1
18723: PPUSH
18724: CALL_OW 55
// if supply <= 7 and supply > 4 then
18728: LD_EXP 38
18732: PUSH
18733: LD_INT 7
18735: LESSEQUAL
18736: PUSH
18737: LD_EXP 38
18741: PUSH
18742: LD_INT 4
18744: GREATER
18745: AND
18746: IFFALSE 18769
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
18748: LD_INT 3
18750: PPUSH
18751: LD_INT 5
18753: PPUSH
18754: CALL_OW 12
18758: PPUSH
18759: LD_INT 20
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: CALL_OW 55
// if supply <= 4 and supply > 0 then
18769: LD_EXP 38
18773: PUSH
18774: LD_INT 4
18776: LESSEQUAL
18777: PUSH
18778: LD_EXP 38
18782: PUSH
18783: LD_INT 0
18785: GREATER
18786: AND
18787: IFFALSE 18810
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
18789: LD_INT 3
18791: PPUSH
18792: LD_INT 5
18794: PPUSH
18795: CALL_OW 12
18799: PPUSH
18800: LD_INT 21
18802: PPUSH
18803: LD_INT 1
18805: PPUSH
18806: CALL_OW 55
// if supply > 0 then
18810: LD_EXP 38
18814: PUSH
18815: LD_INT 0
18817: GREATER
18818: IFFALSE 18835
// begin supply = supply - 1 ;
18820: LD_ADDR_EXP 38
18824: PUSH
18825: LD_EXP 38
18829: PUSH
18830: LD_INT 1
18832: MINUS
18833: ST_TO_ADDR
// enable ;
18834: ENABLE
// end ; end ; end_of_file
18835: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
18836: LD_EXP 37
18840: PUSH
18841: LD_INT 1
18843: EQUAL
18844: PUSH
18845: LD_EXP 1
18849: PPUSH
18850: CALL_OW 301
18854: AND
18855: IFFALSE 18867
18857: GO 18859
18859: DISABLE
// YouLost ( JMM ) ;
18860: LD_STRING JMM
18862: PPUSH
18863: CALL_OW 104
18867: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
18868: LD_EXP 17
18872: PUSH
18873: LD_INT 1
18875: EQUAL
18876: PUSH
18877: LD_EXP 15
18881: PPUSH
18882: CALL_OW 301
18886: AND
18887: IFFALSE 18919
18889: GO 18891
18891: DISABLE
// begin DialogueOn ;
18892: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
18896: LD_EXP 22
18900: PPUSH
18901: LD_STRING D8a-Pow-1
18903: PPUSH
18904: CALL_OW 94
// DialogueOff ;
18908: CALL_OW 7
// YouLost ( Dismissed ) ;
18912: LD_STRING Dismissed
18914: PPUSH
18915: CALL_OW 104
// end ;
18919: END
// every 0 0$1 trigger IsDead ( amDepot ) do
18920: LD_EXP 36
18924: PPUSH
18925: CALL_OW 301
18929: IFFALSE 18941
18931: GO 18933
18933: DISABLE
// YouLost ( Destroyed ) ; end_of_file
18934: LD_STRING Destroyed
18936: PPUSH
18937: CALL_OW 104
18941: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
18942: LD_EXP 23
18946: PPUSH
18947: CALL_OW 301
18951: IFFALSE 19296
18953: GO 18955
18955: DISABLE
18956: LD_INT 0
18958: PPUSH
// begin russianAI = 0 ;
18959: LD_ADDR_EXP 26
18963: PUSH
18964: LD_INT 0
18966: ST_TO_ADDR
// escapeAvalaible = 1 ;
18967: LD_ADDR_EXP 35
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// InGameOn ;
18975: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18979: LD_INT 3
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: LD_INT 1
18987: PPUSH
18988: LD_INT 0
18990: PPUSH
18991: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18995: LD_INT 6
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: LD_INT 0
19006: PPUSH
19007: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19011: LD_INT 3
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19021: LD_INT 97
19023: PPUSH
19024: LD_INT 91
19026: PPUSH
19027: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19031: LD_INT 22
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 21
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PPUSH
19055: CALL_OW 69
19059: PPUSH
19060: CALL_OW 121
// wait ( 0 0$01 ) ;
19064: LD_INT 35
19066: PPUSH
19067: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19071: LD_INT 22
19073: PUSH
19074: LD_INT 3
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 21
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: PPUSH
19100: LD_INT 124
19102: PPUSH
19103: LD_INT 98
19105: PPUSH
19106: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19110: LD_INT 22
19112: PUSH
19113: LD_INT 6
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 21
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PPUSH
19134: CALL_OW 69
19138: PPUSH
19139: CALL_OW 121
// wait ( 0 0$01 ) ;
19143: LD_INT 35
19145: PPUSH
19146: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19150: LD_INT 22
19152: PUSH
19153: LD_INT 6
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 21
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: PPUSH
19179: LD_INT 124
19181: PPUSH
19182: LD_INT 98
19184: PPUSH
19185: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19189: LD_INT 22
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 21
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 69
19217: PPUSH
19218: LD_INT 124
19220: PPUSH
19221: LD_INT 98
19223: PPUSH
19224: CALL_OW 114
// wait ( 0 0$4 ) ;
19228: LD_INT 140
19230: PPUSH
19231: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
19235: LD_INT 124
19237: PPUSH
19238: LD_INT 98
19240: PPUSH
19241: CALL_OW 84
// if SikorskyStatus = 1 then
19245: LD_EXP 20
19249: PUSH
19250: LD_INT 1
19252: EQUAL
19253: IFFALSE 19267
// begin Say ( Sikorski , D9-Sik-1 ) ;
19255: LD_EXP 15
19259: PPUSH
19260: LD_STRING D9-Sik-1
19262: PPUSH
19263: CALL_OW 88
// end ; if SikorskyStatus = 2 then
19267: LD_EXP 20
19271: PUSH
19272: LD_INT 2
19274: EQUAL
19275: IFFALSE 19296
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
19277: LD_EXP 22
19281: PPUSH
19282: LD_STRING D8b-Pow-1
19284: PPUSH
19285: CALL_OW 94
// YouLost ( Dismissed ) ;
19289: LD_STRING Dismissed
19291: PPUSH
19292: CALL_OW 104
// end ; end ;
19296: PPOPN 1
19298: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19299: LD_INT 23
19301: PUSH
19302: LD_INT 3
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 21
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 24
19321: PUSH
19322: LD_INT 250
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: PPUSH
19334: CALL_OW 69
19338: PUSH
19339: LD_INT 0
19341: EQUAL
19342: IFFALSE 19351
19344: GO 19346
19346: DISABLE
// FinishMission ;
19347: CALL 19352 0 0
19351: END
// export function FinishMission ; var tmp ; begin
19352: LD_INT 0
19354: PPUSH
19355: PPUSH
// AddMedal ( med1 , 1 ) ;
19356: LD_STRING med1
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19366: LD_STRING med2
19368: PPUSH
19369: LD_INT 1
19371: PPUSH
19372: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
19376: LD_STRING perfect
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: CALL_OW 101
// GiveMedals ( Main ) ;
19386: LD_STRING Main
19388: PPUSH
19389: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19393: LD_INT 22
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 23
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 21
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: LD_INT 25
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 25
19438: PUSH
19439: LD_INT 2
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 25
19448: PUSH
19449: LD_INT 3
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 25
19458: PUSH
19459: LD_INT 4
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 69
19483: PPUSH
19484: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19488: LD_EXP 1
19492: PPUSH
19493: LD_EXP 40
19497: PUSH
19498: LD_STRING JMM
19500: STR
19501: PPUSH
19502: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19506: LD_EXP 2
19510: PPUSH
19511: LD_EXP 40
19515: PUSH
19516: LD_STRING Brown
19518: STR
19519: PPUSH
19520: CALL 5681 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19524: LD_EXP 3
19528: PPUSH
19529: LD_EXP 40
19533: PUSH
19534: LD_STRING Donaldson
19536: STR
19537: PPUSH
19538: CALL 5681 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19542: LD_EXP 4
19546: PPUSH
19547: LD_EXP 40
19551: PUSH
19552: LD_STRING Bobby
19554: STR
19555: PPUSH
19556: CALL 5681 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19560: LD_EXP 5
19564: PPUSH
19565: LD_EXP 40
19569: PUSH
19570: LD_STRING Cyrus
19572: STR
19573: PPUSH
19574: CALL 5681 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19578: LD_EXP 6
19582: PPUSH
19583: LD_EXP 40
19587: PUSH
19588: LD_STRING Lisa
19590: STR
19591: PPUSH
19592: CALL 5681 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19596: LD_EXP 7
19600: PPUSH
19601: LD_EXP 40
19605: PUSH
19606: LD_STRING Frank
19608: STR
19609: PPUSH
19610: CALL 5681 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19614: LD_EXP 8
19618: PPUSH
19619: LD_EXP 40
19623: PUSH
19624: LD_STRING Gladstone
19626: STR
19627: PPUSH
19628: CALL 5681 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19632: LD_EXP 9
19636: PPUSH
19637: LD_EXP 40
19641: PUSH
19642: LD_STRING Kikuchi
19644: STR
19645: PPUSH
19646: CALL 5681 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19650: LD_EXP 13
19654: PPUSH
19655: LD_EXP 40
19659: PUSH
19660: LD_STRING Denis
19662: STR
19663: PPUSH
19664: CALL 5681 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19668: LD_EXP 14
19672: PPUSH
19673: LD_EXP 40
19677: PUSH
19678: LD_STRING Joan
19680: STR
19681: PPUSH
19682: CALL 5681 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19686: LD_EXP 12
19690: PPUSH
19691: LD_EXP 40
19695: PUSH
19696: LD_STRING Houten
19698: STR
19699: PPUSH
19700: CALL 5681 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
19704: LD_INT 50
19706: PUSH
19707: EMPTY
19708: LIST
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 21
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 25
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 25
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 25
19765: PUSH
19766: LD_INT 4
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: PPUSH
19786: CALL_OW 69
19790: PUSH
19791: LD_EXP 1
19795: PUSH
19796: LD_EXP 2
19800: PUSH
19801: LD_EXP 3
19805: PUSH
19806: LD_EXP 4
19810: PUSH
19811: LD_EXP 5
19815: PUSH
19816: LD_EXP 6
19820: PUSH
19821: LD_EXP 7
19825: PUSH
19826: LD_EXP 8
19830: PUSH
19831: LD_EXP 9
19835: PUSH
19836: LD_EXP 13
19840: PUSH
19841: LD_EXP 14
19845: PUSH
19846: LD_EXP 12
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: DIFF
19865: PPUSH
19866: LD_STRING 08_other_survivors
19868: PPUSH
19869: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
19873: LD_INT 23
19875: PPUSH
19876: CALL 19889 0 1
// YouWin ;
19880: CALL_OW 103
// end ;
19884: LD_VAR 0 1
19888: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19889: LD_INT 0
19891: PPUSH
19892: PPUSH
19893: PPUSH
19894: PPUSH
// gammaBase = [ ] ;
19895: LD_ADDR_VAR 0 4
19899: PUSH
19900: EMPTY
19901: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
19902: LD_ADDR_VAR 0 5
19906: PUSH
19907: LD_VAR 0 1
19911: PPUSH
19912: LD_INT 22
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 21
19924: PUSH
19925: LD_INT 3
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 50
19934: PUSH
19935: EMPTY
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: PPUSH
19943: CALL_OW 70
19947: ST_TO_ADDR
// for i in buildings do
19948: LD_ADDR_VAR 0 3
19952: PUSH
19953: LD_VAR 0 5
19957: PUSH
19958: FOR_IN
19959: IFFALSE 20296
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19961: LD_VAR 0 3
19965: PPUSH
19966: CALL_OW 266
19970: PUSH
19971: LD_INT 6
19973: PUSH
19974: LD_INT 7
19976: PUSH
19977: LD_INT 8
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: IN
19985: IFFALSE 20099
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19987: LD_ADDR_VAR 0 4
19991: PUSH
19992: LD_VAR 0 4
19996: PUSH
19997: LD_VAR 0 3
20001: PPUSH
20002: CALL_OW 266
20006: PUSH
20007: LD_VAR 0 3
20011: PPUSH
20012: CALL_OW 250
20016: PUSH
20017: LD_VAR 0 3
20021: PPUSH
20022: CALL_OW 251
20026: PUSH
20027: LD_VAR 0 3
20031: PPUSH
20032: CALL_OW 254
20036: PUSH
20037: LD_VAR 0 3
20041: PPUSH
20042: CALL_OW 267
20046: PUSH
20047: LD_VAR 0 3
20051: PPUSH
20052: CALL_OW 248
20056: PUSH
20057: LD_VAR 0 3
20061: PPUSH
20062: LD_INT 1
20064: PPUSH
20065: CALL_OW 268
20069: PUSH
20070: LD_VAR 0 3
20074: PPUSH
20075: LD_INT 2
20077: PPUSH
20078: CALL_OW 268
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: EMPTY
20094: LIST
20095: ADD
20096: ST_TO_ADDR
20097: GO 20294
// if GetBType ( i ) in [ b_bunker ] then
20099: LD_VAR 0 3
20103: PPUSH
20104: CALL_OW 266
20108: PUSH
20109: LD_INT 32
20111: PUSH
20112: EMPTY
20113: LIST
20114: IN
20115: IFFALSE 20212
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20117: LD_ADDR_VAR 0 4
20121: PUSH
20122: LD_VAR 0 4
20126: PUSH
20127: LD_VAR 0 3
20131: PPUSH
20132: CALL_OW 266
20136: PUSH
20137: LD_VAR 0 3
20141: PPUSH
20142: CALL_OW 250
20146: PUSH
20147: LD_VAR 0 3
20151: PPUSH
20152: CALL_OW 251
20156: PUSH
20157: LD_VAR 0 3
20161: PPUSH
20162: CALL_OW 254
20166: PUSH
20167: LD_VAR 0 3
20171: PPUSH
20172: CALL_OW 267
20176: PUSH
20177: LD_VAR 0 3
20181: PPUSH
20182: CALL_OW 248
20186: PUSH
20187: LD_VAR 0 3
20191: PPUSH
20192: CALL_OW 269
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: PUSH
20206: EMPTY
20207: LIST
20208: ADD
20209: ST_TO_ADDR
20210: GO 20294
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20212: LD_ADDR_VAR 0 4
20216: PUSH
20217: LD_VAR 0 4
20221: PUSH
20222: LD_VAR 0 3
20226: PPUSH
20227: CALL_OW 266
20231: PUSH
20232: LD_VAR 0 3
20236: PPUSH
20237: CALL_OW 250
20241: PUSH
20242: LD_VAR 0 3
20246: PPUSH
20247: CALL_OW 251
20251: PUSH
20252: LD_VAR 0 3
20256: PPUSH
20257: CALL_OW 254
20261: PUSH
20262: LD_VAR 0 3
20266: PPUSH
20267: CALL_OW 267
20271: PUSH
20272: LD_VAR 0 3
20276: PPUSH
20277: CALL_OW 248
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: ADD
20293: ST_TO_ADDR
// end ;
20294: GO 19958
20296: POP
20297: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
20298: LD_VAR 0 4
20302: PPUSH
20303: LD_STRING 08_GammaBase
20305: PPUSH
20306: CALL_OW 39
// end ;
20310: LD_VAR 0 2
20314: RET
