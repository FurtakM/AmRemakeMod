// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7414 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6191 0 0
// PrepareRussians ;
 229: CALL 6509 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8835 0 6
// PrepareCutsceneAttack ;
 312: CALL 6243 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6927 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6927 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6927 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6927 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6927 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6927 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6927 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6927 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6927 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6927 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6927 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6927 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6927 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6927 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6927 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6927 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 51
2588: PUSH
2589: LD_INT 10
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 3051
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2874
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2803: LD_EXP 37
2807: PPUSH
2808: LD_STRING gamma
2810: PPUSH
2811: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2815: LD_EXP 37
2819: PPUSH
2820: CALL_OW 274
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 500
2830: PUSH
2831: LD_INT 420
2833: PUSH
2834: LD_INT 350
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_OWVAR 67
2846: ARRAY
2847: PPUSH
2848: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2852: LD_EXP 37
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 200
2867: PPUSH
2868: CALL_OW 277
// end else
2872: GO 3016
// begin if bc_type = 4 then
2874: LD_OWVAR 42
2878: PUSH
2879: LD_INT 4
2881: EQUAL
2882: IFFALSE 2931
// begin bc_type = 5 ;
2884: LD_ADDR_OWVAR 42
2888: PUSH
2889: LD_INT 5
2891: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_INT 2
2904: ARRAY
2905: PPUSH
2906: LD_VAR 0 3
2910: PUSH
2911: LD_INT 3
2913: ARRAY
2914: PPUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 4
2922: ARRAY
2923: PPUSH
2924: CALL_OW 47
2928: ST_TO_ADDR
// end else
2929: GO 3016
// begin bc_type := i [ 1 ] ;
2931: LD_ADDR_OWVAR 42
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2945: LD_STRING 06_remoteVehs_1
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 30
2955: PUSH
2956: LD_INT 1
2958: EQUAL
2959: PUSH
2960: LD_OWVAR 42
2964: PUSH
2965: LD_INT 7
2967: EQUAL
2968: AND
2969: IFFALSE 2979
// bc_type := b_lab_full ;
2971: LD_ADDR_OWVAR 42
2975: PUSH
2976: LD_INT 8
2978: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_VAR 0 3
2988: PUSH
2989: LD_INT 2
2991: ARRAY
2992: PPUSH
2993: LD_VAR 0 3
2997: PUSH
2998: LD_INT 3
3000: ARRAY
3001: PPUSH
3002: LD_VAR 0 3
3006: PUSH
3007: LD_INT 4
3009: ARRAY
3010: PPUSH
3011: CALL_OW 47
3015: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 266
3025: PUSH
3026: LD_INT 32
3028: EQUAL
3029: IFFALSE 3049
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 3
3040: PUSH
3041: LD_INT 7
3043: ARRAY
3044: PPUSH
3045: CALL_OW 431
// end ;
3049: GO 2642
3051: POP
3052: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3053: LD_INT 22
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 30
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 69
3081: IFFALSE 3329
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: LD_INT 22
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 30
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3121: LD_ADDR_VAR 0 6
3125: PUSH
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 250
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 251
3145: PPUSH
3146: LD_VAR 0 4
3150: PPUSH
3151: CALL_OW 254
3155: PPUSH
3156: CALL 16747 0 3
3160: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_INT 19
3168: PUSH
3169: LD_INT 17
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3176: LD_STRING 06_remoteVehs_1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 30
3186: IFFALSE 3209
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_VAR 0 2
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: CALL_OW 2
3208: ST_TO_ADDR
// for i in tmp do
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_VAR 0 6
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3327
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3222: LD_VAR 0 3
3226: PUSH
3227: LD_INT 1
3229: ARRAY
3230: PPUSH
3231: LD_VAR 0 3
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 428
3244: PUSH
3245: LD_INT 0
3247: EQUAL
3248: IFFALSE 3325
// begin bc_type := blist [ 1 ] ;
3250: LD_ADDR_OWVAR 42
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: LD_VAR 0 3
3286: PUSH
3287: LD_INT 3
3289: ARRAY
3290: PPUSH
3291: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 3
3312: ST_TO_ADDR
// if blist = 0 then
3313: LD_VAR 0 2
3317: PUSH
3318: LD_INT 0
3320: EQUAL
3321: IFFALSE 3325
// break ;
3323: GO 3327
// end ;
3325: GO 3219
3327: POP
3328: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3329: LD_STRING 06_remoteVehs_1
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 30
3339: PUSH
3340: LD_INT 1
3342: EQUAL
3343: IFFALSE 3820
// begin bc_type = 36 ;
3345: LD_ADDR_OWVAR 42
3349: PUSH
3350: LD_INT 36
3352: ST_TO_ADDR
// bc_level = 4 ;
3353: LD_ADDR_OWVAR 43
3357: PUSH
3358: LD_INT 4
3360: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and FilterAllUnits ( [ f_distxy , 62 , 12 , 4 ] ) = 0 then
3361: LD_EXP 37
3365: PPUSH
3366: LD_INT 36
3368: PPUSH
3369: LD_INT 62
3371: PPUSH
3372: LD_INT 12
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL 17617 0 6
3385: PUSH
3386: LD_INT 92
3388: PUSH
3389: LD_INT 62
3391: PUSH
3392: LD_INT 12
3394: PUSH
3395: LD_INT 4
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 0
3411: EQUAL
3412: AND
3413: IFFALSE 3430
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3415: LD_INT 62
3417: PPUSH
3418: LD_INT 12
3420: PPUSH
3421: LD_INT 3
3423: PPUSH
3424: CALL_OW 47
3428: GO 3635
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and FilterAllUnits ( [ f_distxy , 37 , 18 , 4 ] ) = 0 then
3430: LD_EXP 37
3434: PPUSH
3435: LD_INT 36
3437: PPUSH
3438: LD_INT 37
3440: PPUSH
3441: LD_INT 18
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_INT 0
3449: PPUSH
3450: CALL 17617 0 6
3454: PUSH
3455: LD_INT 92
3457: PUSH
3458: LD_INT 37
3460: PUSH
3461: LD_INT 18
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PPUSH
3473: CALL_OW 69
3477: PUSH
3478: LD_INT 0
3480: EQUAL
3481: AND
3482: IFFALSE 3499
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3484: LD_INT 37
3486: PPUSH
3487: LD_INT 18
3489: PPUSH
3490: LD_INT 2
3492: PPUSH
3493: CALL_OW 47
3497: GO 3635
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 4 , false ) and FilterAllUnits ( [ f_distxy , 37 , 18 , 4 ] ) = 0 then
3499: LD_EXP 37
3503: PPUSH
3504: LD_INT 36
3506: PPUSH
3507: LD_INT 37
3509: PPUSH
3510: LD_INT 18
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL 17617 0 6
3523: PUSH
3524: LD_INT 92
3526: PUSH
3527: LD_INT 37
3529: PUSH
3530: LD_INT 18
3532: PUSH
3533: LD_INT 4
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: PUSH
3547: LD_INT 0
3549: EQUAL
3550: AND
3551: IFFALSE 3568
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3553: LD_INT 66
3555: PPUSH
3556: LD_INT 14
3558: PPUSH
3559: LD_INT 4
3561: PPUSH
3562: CALL_OW 47
3566: GO 3635
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) and FilterAllUnits ( [ f_distxy , 74 , 26 , 4 ] ) = 0 then
3568: LD_EXP 37
3572: PPUSH
3573: LD_INT 36
3575: PPUSH
3576: LD_INT 74
3578: PPUSH
3579: LD_INT 26
3581: PPUSH
3582: LD_INT 4
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL 17617 0 6
3592: PUSH
3593: LD_INT 92
3595: PUSH
3596: LD_INT 74
3598: PUSH
3599: LD_INT 26
3601: PUSH
3602: LD_INT 4
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: PPUSH
3611: CALL_OW 69
3615: PUSH
3616: LD_INT 0
3618: EQUAL
3619: AND
3620: IFFALSE 3635
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3622: LD_INT 74
3624: PPUSH
3625: LD_INT 26
3627: PPUSH
3628: LD_INT 4
3630: PPUSH
3631: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3635: LD_ADDR_VAR 0 3
3639: PUSH
3640: DOUBLE
3641: LD_INT 1
3643: DEC
3644: ST_TO_ADDR
3645: LD_INT 3
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 2
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: PUSH
3659: LD_OWVAR 67
3663: ARRAY
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3818
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3668: LD_ADDR_OWVAR 37
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 1
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 12
3696: ARRAY
3697: PUSH
3698: LD_INT 2
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: LD_OWVAR 67
3710: ARRAY
3711: ST_TO_ADDR
// vc_engine = 1 ;
3712: LD_ADDR_OWVAR 39
3716: PUSH
3717: LD_INT 1
3719: ST_TO_ADDR
// vc_control = 2 ;
3720: LD_ADDR_OWVAR 38
3724: PUSH
3725: LD_INT 2
3727: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3728: LD_ADDR_OWVAR 40
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 4
3738: PUSH
3739: LD_INT 5
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 12
3757: ARRAY
3758: ST_TO_ADDR
// veh = CreateVehicle ;
3759: LD_ADDR_VAR 0 5
3763: PUSH
3764: CALL_OW 45
3768: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3769: LD_VAR 0 5
3773: PPUSH
3774: LD_INT 4
3776: PPUSH
3777: CALL_OW 233
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_EXP 37
3790: PPUSH
3791: CALL_OW 250
3795: PPUSH
3796: LD_EXP 37
3800: PPUSH
3801: CALL_OW 251
3805: PPUSH
3806: LD_INT 7
3808: PPUSH
3809: LD_INT 0
3811: PPUSH
3812: CALL_OW 50
// end ;
3816: GO 3665
3818: POP
3819: POP
// end ; end ;
3820: LD_VAR 0 1
3824: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3825: LD_INT 0
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// uc_side = 1 ;
3831: LD_ADDR_OWVAR 20
3835: PUSH
3836: LD_INT 1
3838: ST_TO_ADDR
// uc_nation = 1 ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3847: LD_ADDR_EXP 14
3851: PUSH
3852: LD_STRING 06c_Denis
3854: PPUSH
3855: LD_INT 1
3857: PPUSH
3858: CALL 6927 0 2
3862: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3863: LD_EXP 14
3867: PPUSH
3868: LD_INT 4
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3878: LD_ADDR_EXP 15
3882: PUSH
3883: LD_STRING 06c_Joan
3885: PPUSH
3886: LD_INT 1
3888: PPUSH
3889: CALL 6927 0 2
3893: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3894: LD_EXP 15
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_INT 0
3904: PPUSH
3905: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3909: LD_STRING GladstoneIn07
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 30
3919: NOT
3920: IFFALSE 3988
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3922: LD_ADDR_EXP 8
3926: PUSH
3927: LD_STRING 06c_Gladstone
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: CALL 6927 0 2
3937: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3938: LD_EXP 8
3942: NOT
3943: PUSH
3944: LD_STRING GladstoneStayInDelta
3946: PPUSH
3947: LD_INT 0
3949: PPUSH
3950: CALL_OW 30
3954: AND
3955: IFFALSE 3973
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3957: LD_ADDR_EXP 8
3961: PUSH
3962: LD_STRING 05_Gladstone
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: CALL 6927 0 2
3972: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3973: LD_EXP 8
3977: PPUSH
3978: LD_INT 4
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3988: LD_STRING LisaStayInDelta
3990: PPUSH
3991: LD_INT 0
3993: PPUSH
3994: CALL_OW 30
3998: IFFALSE 4031
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
4000: LD_ADDR_EXP 6
4004: PUSH
4005: LD_STRING 05_Lisa
4007: PPUSH
4008: LD_INT 1
4010: PPUSH
4011: CALL 6927 0 2
4015: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4016: LD_EXP 6
4020: PPUSH
4021: LD_INT 4
4023: PPUSH
4024: LD_INT 0
4026: PPUSH
4027: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4031: LD_STRING BobbyStayInDelta
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 30
4041: IFFALSE 4074
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4043: LD_ADDR_EXP 4
4047: PUSH
4048: LD_STRING 05_Bobby
4050: PPUSH
4051: LD_INT 1
4053: PPUSH
4054: CALL 6927 0 2
4058: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4059: LD_EXP 4
4063: PPUSH
4064: LD_INT 4
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4074: LD_STRING CyrusStayInDelta
4076: PPUSH
4077: LD_INT 0
4079: PPUSH
4080: CALL_OW 30
4084: IFFALSE 4117
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4086: LD_ADDR_EXP 5
4090: PUSH
4091: LD_STRING 05_Cyrus
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL 6927 0 2
4101: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4102: LD_EXP 5
4106: PPUSH
4107: LD_INT 4
4109: PPUSH
4110: LD_INT 0
4112: PPUSH
4113: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4117: LD_STRING BrownStayInDelta
4119: PPUSH
4120: LD_INT 0
4122: PPUSH
4123: CALL_OW 30
4127: IFFALSE 4160
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4129: LD_ADDR_EXP 2
4133: PUSH
4134: LD_STRING 05_Brown
4136: PPUSH
4137: LD_INT 1
4139: PPUSH
4140: CALL 6927 0 2
4144: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4145: LD_EXP 2
4149: PPUSH
4150: LD_INT 4
4152: PPUSH
4153: LD_INT 0
4155: PPUSH
4156: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4160: LD_STRING DonaldsonStayInDelta
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: CALL_OW 30
4170: IFFALSE 4203
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4172: LD_ADDR_EXP 3
4176: PUSH
4177: LD_STRING 05_Donaldson
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: CALL 6927 0 2
4187: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4188: LD_EXP 3
4192: PPUSH
4193: LD_INT 4
4195: PPUSH
4196: LD_INT 0
4198: PPUSH
4199: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4203: LD_ADDR_VAR 0 4
4207: PUSH
4208: LD_STRING OthersStayInDelta
4210: PPUSH
4211: CALL_OW 31
4215: ST_TO_ADDR
// if other > 2 then
4216: LD_VAR 0 4
4220: PUSH
4221: LD_INT 2
4223: GREATER
4224: IFFALSE 4269
// begin for j = 1 to 2 do
4226: LD_ADDR_VAR 0 3
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 2
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4265
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4242: LD_VAR 0 4
4246: PUSH
4247: LD_VAR 0 3
4251: ARRAY
4252: PPUSH
4253: LD_INT 4
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 49
4263: GO 4239
4265: POP
4266: POP
// end else
4267: GO 4312
// begin for j = 1 to other do
4269: LD_ADDR_VAR 0 3
4273: PUSH
4274: DOUBLE
4275: LD_INT 1
4277: DEC
4278: ST_TO_ADDR
4279: LD_VAR 0 4
4283: PUSH
4284: FOR_TO
4285: IFFALSE 4310
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4287: LD_VAR 0 4
4291: PUSH
4292: LD_VAR 0 3
4296: ARRAY
4297: PPUSH
4298: LD_INT 4
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 49
4308: GO 4284
4310: POP
4311: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4312: LD_ADDR_VAR 0 4
4316: PUSH
4317: LD_STRING 06_other_apemans
4319: PPUSH
4320: CALL_OW 31
4324: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 5
4332: PUSH
4333: LD_INT 4
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: PUSH
4344: LD_OWVAR 67
4348: ARRAY
4349: GREATEREQUAL
4350: IFFALSE 4379
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 4
4362: PUSH
4363: LD_INT 3
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: PUSH
4371: LD_OWVAR 67
4375: ARRAY
4376: ST_TO_ADDR
4377: GO 4389
// j := other ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_VAR 0 4
4388: ST_TO_ADDR
// for i = 1 to j do
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: DOUBLE
4395: LD_INT 1
4397: DEC
4398: ST_TO_ADDR
4399: LD_VAR 0 3
4403: PUSH
4404: FOR_TO
4405: IFFALSE 4430
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4407: LD_VAR 0 4
4411: PUSH
4412: LD_VAR 0 2
4416: ARRAY
4417: PPUSH
4418: LD_INT 4
4420: PPUSH
4421: LD_INT 0
4423: PPUSH
4424: CALL_OW 49
4428: GO 4404
4430: POP
4431: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4432: LD_INT 4
4434: PPUSH
4435: LD_INT 22
4437: PUSH
4438: LD_INT 1
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PUSH
4445: LD_INT 21
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PPUSH
4459: CALL_OW 70
4463: PPUSH
4464: LD_INT 53
4466: PPUSH
4467: LD_INT 19
4469: PPUSH
4470: CALL_OW 111
// firstAttack = 1 ;
4474: LD_ADDR_EXP 33
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// end ;
4482: LD_VAR 0 1
4486: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4487: LD_INT 0
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
4493: PPUSH
4494: PPUSH
4495: PPUSH
4496: PPUSH
4497: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4498: LD_ADDR_VAR 0 8
4502: PUSH
4503: LD_STRING 07_vehicles
4505: PPUSH
4506: EMPTY
4507: PPUSH
4508: CALL_OW 30
4512: ST_TO_ADDR
// uc_side := 1 ;
4513: LD_ADDR_OWVAR 20
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// uc_nation := 1 ;
4521: LD_ADDR_OWVAR 21
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if vehicles then
4529: LD_VAR 0 8
4533: IFFALSE 4692
// begin k := 1 ;
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: DOUBLE
4549: LD_INT 1
4551: DEC
4552: ST_TO_ADDR
4553: LD_VAR 0 8
4557: PUSH
4558: LD_INT 4
4560: DIV
4561: PUSH
4562: FOR_TO
4563: IFFALSE 4690
// begin vc_chassis = vehicles [ k ] ;
4565: LD_ADDR_OWVAR 37
4569: PUSH
4570: LD_VAR 0 8
4574: PUSH
4575: LD_VAR 0 3
4579: ARRAY
4580: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4581: LD_ADDR_OWVAR 39
4585: PUSH
4586: LD_VAR 0 8
4590: PUSH
4591: LD_VAR 0 3
4595: PUSH
4596: LD_INT 1
4598: PLUS
4599: ARRAY
4600: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4601: LD_ADDR_OWVAR 38
4605: PUSH
4606: LD_VAR 0 8
4610: PUSH
4611: LD_VAR 0 3
4615: PUSH
4616: LD_INT 2
4618: PLUS
4619: ARRAY
4620: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4621: LD_ADDR_OWVAR 40
4625: PUSH
4626: LD_VAR 0 8
4630: PUSH
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 3
4638: PLUS
4639: ARRAY
4640: ST_TO_ADDR
// k := k + 4 ;
4641: LD_ADDR_VAR 0 3
4645: PUSH
4646: LD_VAR 0 3
4650: PUSH
4651: LD_INT 4
4653: PLUS
4654: ST_TO_ADDR
// veh := CreateVehicle ;
4655: LD_ADDR_VAR 0 9
4659: PUSH
4660: CALL_OW 45
4664: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4665: LD_ADDR_VAR 0 7
4669: PUSH
4670: LD_VAR 0 7
4674: PPUSH
4675: LD_INT 1
4677: PPUSH
4678: LD_VAR 0 9
4682: PPUSH
4683: CALL_OW 2
4687: ST_TO_ADDR
// end ;
4688: GO 4562
4690: POP
4691: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4692: LD_ADDR_EXP 1
4696: PUSH
4697: LD_EXP 43
4701: PUSH
4702: LD_STRING JMM
4704: STR
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: CALL 6927 0 2
4713: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4714: LD_EXP 12
4718: PUSH
4719: LD_INT 1
4721: EQUAL
4722: PUSH
4723: LD_EXP 12
4727: PUSH
4728: LD_INT 3
4730: EQUAL
4731: OR
4732: PUSH
4733: LD_EXP 2
4737: NOT
4738: AND
4739: IFFALSE 4792
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4741: LD_ADDR_EXP 2
4745: PUSH
4746: LD_EXP 43
4750: PUSH
4751: LD_STRING Brown
4753: STR
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: CALL 6927 0 2
4762: ST_TO_ADDR
// if Brown then
4763: LD_EXP 2
4767: IFFALSE 4792
// tmp := Insert ( tmp , 1 , Brown ) ;
4769: LD_ADDR_VAR 0 6
4773: PUSH
4774: LD_VAR 0 6
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: LD_EXP 2
4786: PPUSH
4787: CALL_OW 2
4791: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4792: LD_EXP 12
4796: PUSH
4797: LD_INT 2
4799: EQUAL
4800: PUSH
4801: LD_EXP 12
4805: PUSH
4806: LD_INT 3
4808: EQUAL
4809: OR
4810: PUSH
4811: LD_EXP 3
4815: NOT
4816: AND
4817: IFFALSE 4870
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4819: LD_ADDR_EXP 3
4823: PUSH
4824: LD_EXP 43
4828: PUSH
4829: LD_STRING Donaldson
4831: STR
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL 6927 0 2
4840: ST_TO_ADDR
// if Donaldson then
4841: LD_EXP 3
4845: IFFALSE 4870
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4847: LD_ADDR_VAR 0 6
4851: PUSH
4852: LD_VAR 0 6
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: LD_EXP 3
4864: PPUSH
4865: CALL_OW 2
4869: ST_TO_ADDR
// end ; if not Bobby then
4870: LD_EXP 4
4874: NOT
4875: IFFALSE 4928
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4877: LD_ADDR_EXP 4
4881: PUSH
4882: LD_EXP 43
4886: PUSH
4887: LD_STRING Bobby
4889: STR
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: CALL 6927 0 2
4898: ST_TO_ADDR
// if Bobby then
4899: LD_EXP 4
4903: IFFALSE 4928
// tmp := Insert ( tmp , 1 , Bobby ) ;
4905: LD_ADDR_VAR 0 6
4909: PUSH
4910: LD_VAR 0 6
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: LD_EXP 4
4922: PPUSH
4923: CALL_OW 2
4927: ST_TO_ADDR
// end ; if not Cyrus then
4928: LD_EXP 5
4932: NOT
4933: IFFALSE 4986
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4935: LD_ADDR_EXP 5
4939: PUSH
4940: LD_EXP 43
4944: PUSH
4945: LD_STRING Cyrus
4947: STR
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL 6927 0 2
4956: ST_TO_ADDR
// if Cyrus then
4957: LD_EXP 5
4961: IFFALSE 4986
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4963: LD_ADDR_VAR 0 6
4967: PUSH
4968: LD_VAR 0 6
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: LD_EXP 5
4980: PPUSH
4981: CALL_OW 2
4985: ST_TO_ADDR
// end ; if not Lisa then
4986: LD_EXP 6
4990: NOT
4991: IFFALSE 5044
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4993: LD_ADDR_EXP 6
4997: PUSH
4998: LD_EXP 43
5002: PUSH
5003: LD_STRING Lisa
5005: STR
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL 6927 0 2
5014: ST_TO_ADDR
// if Lisa then
5015: LD_EXP 6
5019: IFFALSE 5044
// tmp := Insert ( tmp , 1 , Lisa ) ;
5021: LD_ADDR_VAR 0 6
5025: PUSH
5026: LD_VAR 0 6
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_EXP 6
5038: PPUSH
5039: CALL_OW 2
5043: ST_TO_ADDR
// end ; if not Frank then
5044: LD_EXP 7
5048: NOT
5049: IFFALSE 5102
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5051: LD_ADDR_EXP 7
5055: PUSH
5056: LD_EXP 43
5060: PUSH
5061: LD_STRING Frank
5063: STR
5064: PPUSH
5065: LD_INT 1
5067: PPUSH
5068: CALL 6927 0 2
5072: ST_TO_ADDR
// if Frank then
5073: LD_EXP 7
5077: IFFALSE 5102
// tmp := Insert ( tmp , 1 , Frank ) ;
5079: LD_ADDR_VAR 0 6
5083: PUSH
5084: LD_VAR 0 6
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_EXP 7
5096: PPUSH
5097: CALL_OW 2
5101: ST_TO_ADDR
// end ; if not Kikuchi then
5102: LD_EXP 9
5106: NOT
5107: IFFALSE 5160
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5109: LD_ADDR_EXP 9
5113: PUSH
5114: LD_EXP 43
5118: PUSH
5119: LD_STRING Kikuchi
5121: STR
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: CALL 6927 0 2
5130: ST_TO_ADDR
// if Kikuchi then
5131: LD_EXP 9
5135: IFFALSE 5160
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5137: LD_ADDR_VAR 0 6
5141: PUSH
5142: LD_VAR 0 6
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: LD_EXP 9
5154: PPUSH
5155: CALL_OW 2
5159: ST_TO_ADDR
// end ; if not Gladstone then
5160: LD_EXP 8
5164: NOT
5165: IFFALSE 5218
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5167: LD_ADDR_EXP 8
5171: PUSH
5172: LD_EXP 43
5176: PUSH
5177: LD_STRING Gladstone
5179: STR
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL 6927 0 2
5188: ST_TO_ADDR
// if Gladstone then
5189: LD_EXP 8
5193: IFFALSE 5218
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5195: LD_ADDR_VAR 0 6
5199: PUSH
5200: LD_VAR 0 6
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: LD_EXP 8
5212: PPUSH
5213: CALL_OW 2
5217: ST_TO_ADDR
// end ; if not Khatam then
5218: LD_EXP 10
5222: NOT
5223: IFFALSE 5276
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5225: LD_ADDR_EXP 10
5229: PUSH
5230: LD_EXP 43
5234: PUSH
5235: LD_STRING Khatam
5237: STR
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: CALL 6927 0 2
5246: ST_TO_ADDR
// if Khatam then
5247: LD_EXP 10
5251: IFFALSE 5276
// tmp := Insert ( tmp , 1 , Khatam ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 6
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: LD_EXP 10
5270: PPUSH
5271: CALL_OW 2
5275: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5276: LD_ADDR_VAR 0 5
5280: PUSH
5281: LD_STRING 07c_others
5283: PPUSH
5284: CALL_OW 31
5288: ST_TO_ADDR
// if others then
5289: LD_VAR 0 5
5293: IFFALSE 5381
// for i in others do
5295: LD_ADDR_VAR 0 2
5299: PUSH
5300: LD_VAR 0 5
5304: PUSH
5305: FOR_IN
5306: IFFALSE 5379
// if GetClass ( i ) = 3 then
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 257
5317: PUSH
5318: LD_INT 3
5320: EQUAL
5321: IFFALSE 5348
// tmp := Insert ( tmp , 1 , i ) else
5323: LD_ADDR_VAR 0 6
5327: PUSH
5328: LD_VAR 0 6
5332: PPUSH
5333: LD_INT 1
5335: PPUSH
5336: LD_VAR 0 2
5340: PPUSH
5341: CALL_OW 2
5345: ST_TO_ADDR
5346: GO 5377
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_VAR 0 2
5371: PPUSH
5372: CALL_OW 2
5376: ST_TO_ADDR
5377: GO 5305
5379: POP
5380: POP
// wait ( 0 0$1 ) ;
5381: LD_INT 35
5383: PPUSH
5384: CALL_OW 67
// for i in tmp do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: LD_VAR 0 6
5397: PUSH
5398: FOR_IN
5399: IFFALSE 5531
// begin SetDir ( i , 3 ) ;
5401: LD_VAR 0 2
5405: PPUSH
5406: LD_INT 3
5408: PPUSH
5409: CALL_OW 233
// if tmp_vehs then
5413: LD_VAR 0 7
5417: IFFALSE 5492
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5419: LD_VAR 0 7
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_INT 3
5430: PPUSH
5431: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5435: LD_VAR 0 7
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PPUSH
5444: LD_INT 4
5446: PPUSH
5447: LD_INT 0
5449: PPUSH
5450: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5454: LD_VAR 0 2
5458: PPUSH
5459: LD_VAR 0 7
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5472: LD_ADDR_VAR 0 7
5476: PUSH
5477: LD_VAR 0 7
5481: PPUSH
5482: LD_INT 1
5484: PPUSH
5485: CALL_OW 3
5489: ST_TO_ADDR
// end else
5490: GO 5507
// PlaceUnitArea ( i , GammaSupport , false ) ;
5492: LD_VAR 0 2
5496: PPUSH
5497: LD_INT 4
5499: PPUSH
5500: LD_INT 0
5502: PPUSH
5503: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5507: LD_VAR 0 2
5511: PPUSH
5512: LD_INT 77
5514: PPUSH
5515: LD_INT 16
5517: PPUSH
5518: CALL_OW 111
// wait ( 0 0$2 ) ;
5522: LD_INT 70
5524: PPUSH
5525: CALL_OW 67
// end ;
5529: GO 5398
5531: POP
5532: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5533: LD_EXP 1
5537: PPUSH
5538: LD_INT 4
5540: PPUSH
5541: LD_INT 0
5543: PPUSH
5544: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5548: LD_EXP 1
5552: PPUSH
5553: LD_INT 77
5555: PPUSH
5556: LD_INT 16
5558: PPUSH
5559: CALL_OW 111
// end ;
5563: LD_VAR 0 1
5567: RET
// export function PrepareSikorsky ; begin
5568: LD_INT 0
5570: PPUSH
// uc_side = 4 ;
5571: LD_ADDR_OWVAR 20
5575: PUSH
5576: LD_INT 4
5578: ST_TO_ADDR
// uc_nation = 1 ;
5579: LD_ADDR_OWVAR 21
5583: PUSH
5584: LD_INT 1
5586: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5587: LD_ADDR_EXP 16
5591: PUSH
5592: LD_STRING Sikorski
5594: PPUSH
5595: LD_INT 0
5597: PPUSH
5598: CALL 6927 0 2
5602: ST_TO_ADDR
// vc_engine = 1 ;
5603: LD_ADDR_OWVAR 39
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// vc_control = 1 ;
5611: LD_ADDR_OWVAR 38
5615: PUSH
5616: LD_INT 1
5618: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5619: LD_ADDR_OWVAR 40
5623: PUSH
5624: LD_INT 5
5626: PUSH
5627: LD_INT 3
5629: PUSH
5630: LD_INT 4
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: LIST
5637: PUSH
5638: LD_OWVAR 67
5642: ARRAY
5643: ST_TO_ADDR
// vc_chassis = 4 ;
5644: LD_ADDR_OWVAR 37
5648: PUSH
5649: LD_INT 4
5651: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5652: LD_ADDR_EXP 17
5656: PUSH
5657: CALL_OW 45
5661: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5662: LD_EXP 17
5666: PPUSH
5667: LD_INT 9
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5677: LD_EXP 16
5681: PPUSH
5682: LD_EXP 17
5686: PPUSH
5687: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5691: LD_EXP 17
5695: PPUSH
5696: LD_INT 5
5698: PPUSH
5699: CALL_OW 113
// end ;
5703: LD_VAR 0 1
5707: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5714: LD_ADDR_VAR 0 2
5718: PUSH
5719: DOUBLE
5720: LD_INT 1
5722: DEC
5723: ST_TO_ADDR
5724: LD_INT 8
5726: PUSH
5727: LD_INT 7
5729: PUSH
5730: LD_INT 7
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: PUSH
5738: LD_OWVAR 67
5742: ARRAY
5743: PUSH
5744: FOR_TO
5745: IFFALSE 5842
// begin uc_side = 4 ;
5747: LD_ADDR_OWVAR 20
5751: PUSH
5752: LD_INT 4
5754: ST_TO_ADDR
// uc_nation = 1 ;
5755: LD_ADDR_OWVAR 21
5759: PUSH
5760: LD_INT 1
5762: ST_TO_ADDR
// hc_name =  ;
5763: LD_ADDR_OWVAR 26
5767: PUSH
5768: LD_STRING 
5770: ST_TO_ADDR
// hc_gallery =  ;
5771: LD_ADDR_OWVAR 33
5775: PUSH
5776: LD_STRING 
5778: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5779: LD_INT 0
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: LD_INT 5
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: CALL_OW 12
5795: PPUSH
5796: CALL_OW 380
// un = CreateHuman ;
5800: LD_ADDR_VAR 0 3
5804: PUSH
5805: CALL_OW 44
5809: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5810: LD_VAR 0 3
5814: PPUSH
5815: LD_INT 9
5817: PPUSH
5818: LD_INT 0
5820: PPUSH
5821: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_INT 53
5832: PPUSH
5833: LD_INT 23
5835: PPUSH
5836: CALL_OW 111
// end ;
5840: GO 5744
5842: POP
5843: POP
// for i = 1 to 3 do
5844: LD_ADDR_VAR 0 2
5848: PUSH
5849: DOUBLE
5850: LD_INT 1
5852: DEC
5853: ST_TO_ADDR
5854: LD_INT 3
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5955
// begin uc_side = 4 ;
5860: LD_ADDR_OWVAR 20
5864: PUSH
5865: LD_INT 4
5867: ST_TO_ADDR
// uc_nation = 1 ;
5868: LD_ADDR_OWVAR 21
5872: PUSH
5873: LD_INT 1
5875: ST_TO_ADDR
// hc_name =  ;
5876: LD_ADDR_OWVAR 26
5880: PUSH
5881: LD_STRING 
5883: ST_TO_ADDR
// hc_gallery =  ;
5884: LD_ADDR_OWVAR 33
5888: PUSH
5889: LD_STRING 
5891: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5892: LD_INT 0
5894: PPUSH
5895: LD_INT 4
5897: PPUSH
5898: LD_INT 5
5900: PPUSH
5901: LD_INT 8
5903: PPUSH
5904: CALL_OW 12
5908: PPUSH
5909: CALL_OW 380
// un = CreateHuman ;
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5923: LD_VAR 0 3
5927: PPUSH
5928: LD_INT 9
5930: PPUSH
5931: LD_INT 0
5933: PPUSH
5934: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5938: LD_VAR 0 3
5942: PPUSH
5943: LD_INT 53
5945: PPUSH
5946: LD_INT 23
5948: PPUSH
5949: CALL_OW 111
// end ;
5953: GO 5857
5955: POP
5956: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5957: LD_ADDR_VAR 0 2
5961: PUSH
5962: DOUBLE
5963: LD_INT 1
5965: DEC
5966: ST_TO_ADDR
5967: LD_INT 9
5969: PUSH
5970: LD_INT 8
5972: PUSH
5973: LD_INT 7
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_OWVAR 67
5985: ARRAY
5986: PUSH
5987: FOR_TO
5988: IFFALSE 6184
// begin uc_side = 4 ;
5990: LD_ADDR_OWVAR 20
5994: PUSH
5995: LD_INT 4
5997: ST_TO_ADDR
// uc_nation = 1 ;
5998: LD_ADDR_OWVAR 21
6002: PUSH
6003: LD_INT 1
6005: ST_TO_ADDR
// vc_engine = 1 ;
6006: LD_ADDR_OWVAR 39
6010: PUSH
6011: LD_INT 1
6013: ST_TO_ADDR
// vc_control = 1 ;
6014: LD_ADDR_OWVAR 38
6018: PUSH
6019: LD_INT 1
6021: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6022: LD_ADDR_OWVAR 40
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 4
6032: PUSH
6033: LD_INT 5
6035: PUSH
6036: LD_INT 6
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_INT 4
6050: PPUSH
6051: CALL_OW 12
6055: ARRAY
6056: ST_TO_ADDR
// vc_chassis = 4 ;
6057: LD_ADDR_OWVAR 37
6061: PUSH
6062: LD_INT 4
6064: ST_TO_ADDR
// veh = CreateVehicle ;
6065: LD_ADDR_VAR 0 4
6069: PUSH
6070: CALL_OW 45
6074: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6075: LD_VAR 0 4
6079: PPUSH
6080: LD_INT 9
6082: PPUSH
6083: LD_INT 0
6085: PPUSH
6086: CALL_OW 49
// hc_name =  ;
6090: LD_ADDR_OWVAR 26
6094: PUSH
6095: LD_STRING 
6097: ST_TO_ADDR
// hc_gallery =  ;
6098: LD_ADDR_OWVAR 33
6102: PUSH
6103: LD_STRING 
6105: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6106: LD_INT 0
6108: PPUSH
6109: LD_INT 3
6111: PPUSH
6112: LD_INT 5
6114: PPUSH
6115: LD_INT 8
6117: PPUSH
6118: CALL_OW 12
6122: PPUSH
6123: CALL_OW 380
// un = CreateHuman ;
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: CALL_OW 44
6136: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6137: LD_VAR 0 3
6141: PPUSH
6142: LD_VAR 0 4
6146: PPUSH
6147: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6151: LD_VAR 0 4
6155: PUSH
6156: LD_VAR 0 3
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PPUSH
6165: LD_INT 53
6167: PPUSH
6168: LD_INT 23
6170: PPUSH
6171: CALL_OW 111
// wait ( 0 0$5 ) ;
6175: LD_INT 175
6177: PPUSH
6178: CALL_OW 67
// end ;
6182: GO 5987
6184: POP
6185: POP
// end ; end_of_file
6186: LD_VAR 0 1
6190: RET
// export function PrepareRussianCommander ; begin
6191: LD_INT 0
6193: PPUSH
// uc_side = 3 ;
6194: LD_ADDR_OWVAR 20
6198: PUSH
6199: LD_INT 3
6201: ST_TO_ADDR
// uc_nation = 3 ;
6202: LD_ADDR_OWVAR 21
6206: PUSH
6207: LD_INT 3
6209: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6210: LD_ADDR_EXP 24
6214: PUSH
6215: LD_STRING Borodin
6217: PPUSH
6218: CALL_OW 25
6222: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6223: LD_EXP 24
6227: PPUSH
6228: LD_INT 25
6230: PPUSH
6231: LD_INT 0
6233: PPUSH
6234: CALL_OW 49
// end ;
6238: LD_VAR 0 1
6242: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6243: LD_INT 0
6245: PPUSH
6246: PPUSH
6247: PPUSH
6248: PPUSH
// for i = 1 to 10 do
6249: LD_ADDR_VAR 0 2
6253: PUSH
6254: DOUBLE
6255: LD_INT 1
6257: DEC
6258: ST_TO_ADDR
6259: LD_INT 10
6261: PUSH
6262: FOR_TO
6263: IFFALSE 6337
// begin uc_side = 6 ;
6265: LD_ADDR_OWVAR 20
6269: PUSH
6270: LD_INT 6
6272: ST_TO_ADDR
// uc_nation = 3 ;
6273: LD_ADDR_OWVAR 21
6277: PUSH
6278: LD_INT 3
6280: ST_TO_ADDR
// hc_gallery =  ;
6281: LD_ADDR_OWVAR 33
6285: PUSH
6286: LD_STRING 
6288: ST_TO_ADDR
// hc_name =  ;
6289: LD_ADDR_OWVAR 26
6293: PUSH
6294: LD_STRING 
6296: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: LD_INT 3
6305: PPUSH
6306: CALL_OW 380
// un = CreateHuman ;
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: CALL_OW 44
6319: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 1
6327: PPUSH
6328: LD_INT 0
6330: PPUSH
6331: CALL_OW 49
// end ;
6335: GO 6262
6337: POP
6338: POP
// for i = 1 to 3 do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: DOUBLE
6345: LD_INT 1
6347: DEC
6348: ST_TO_ADDR
6349: LD_INT 3
6351: PUSH
6352: FOR_TO
6353: IFFALSE 6502
// begin uc_side = 6 ;
6355: LD_ADDR_OWVAR 20
6359: PUSH
6360: LD_INT 6
6362: ST_TO_ADDR
// uc_nation = 3 ;
6363: LD_ADDR_OWVAR 21
6367: PUSH
6368: LD_INT 3
6370: ST_TO_ADDR
// vc_engine = 1 ;
6371: LD_ADDR_OWVAR 39
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// vc_control = 1 ;
6379: LD_ADDR_OWVAR 38
6383: PUSH
6384: LD_INT 1
6386: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6387: LD_ADDR_OWVAR 40
6391: PUSH
6392: LD_INT 43
6394: PUSH
6395: LD_INT 44
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 1
6404: PPUSH
6405: LD_INT 2
6407: PPUSH
6408: CALL_OW 12
6412: ARRAY
6413: ST_TO_ADDR
// vc_chassis = 22 ;
6414: LD_ADDR_OWVAR 37
6418: PUSH
6419: LD_INT 22
6421: ST_TO_ADDR
// veh = CreateVehicle ;
6422: LD_ADDR_VAR 0 4
6426: PUSH
6427: CALL_OW 45
6431: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6432: LD_VAR 0 4
6436: PPUSH
6437: LD_INT 2
6439: PPUSH
6440: LD_INT 0
6442: PPUSH
6443: CALL_OW 49
// hc_gallery =  ;
6447: LD_ADDR_OWVAR 33
6451: PUSH
6452: LD_STRING 
6454: ST_TO_ADDR
// hc_name =  ;
6455: LD_ADDR_OWVAR 26
6459: PUSH
6460: LD_STRING 
6462: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6463: LD_INT 0
6465: PPUSH
6466: LD_INT 3
6468: PPUSH
6469: LD_INT 4
6471: PPUSH
6472: CALL_OW 380
// un = CreateHuman ;
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: CALL_OW 44
6485: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6486: LD_VAR 0 3
6490: PPUSH
6491: LD_VAR 0 4
6495: PPUSH
6496: CALL_OW 52
// end ;
6500: GO 6352
6502: POP
6503: POP
// end ;
6504: LD_VAR 0 1
6508: RET
// export function PrepareRussians ; var i , un ; begin
6509: LD_INT 0
6511: PPUSH
6512: PPUSH
6513: PPUSH
// for i = 1 to 8 do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: DOUBLE
6520: LD_INT 1
6522: DEC
6523: ST_TO_ADDR
6524: LD_INT 8
6526: PUSH
6527: FOR_TO
6528: IFFALSE 6614
// begin uc_side = 3 ;
6530: LD_ADDR_OWVAR 20
6534: PUSH
6535: LD_INT 3
6537: ST_TO_ADDR
// uc_nation = 3 ;
6538: LD_ADDR_OWVAR 21
6542: PUSH
6543: LD_INT 3
6545: ST_TO_ADDR
// hc_gallery =  ;
6546: LD_ADDR_OWVAR 33
6550: PUSH
6551: LD_STRING 
6553: ST_TO_ADDR
// hc_name =  ;
6554: LD_ADDR_OWVAR 26
6558: PUSH
6559: LD_STRING 
6561: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6562: LD_INT 0
6564: PPUSH
6565: LD_INT 1
6567: PPUSH
6568: LD_EXP 25
6572: PPUSH
6573: LD_EXP 26
6577: PPUSH
6578: CALL_OW 12
6582: PPUSH
6583: CALL_OW 380
// un = CreateHuman ;
6587: LD_ADDR_VAR 0 3
6591: PUSH
6592: CALL_OW 44
6596: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6597: LD_VAR 0 3
6601: PPUSH
6602: LD_INT 3
6604: PPUSH
6605: LD_INT 0
6607: PPUSH
6608: CALL_OW 49
// end ;
6612: GO 6527
6614: POP
6615: POP
// for i = 1 to 4 do
6616: LD_ADDR_VAR 0 2
6620: PUSH
6621: DOUBLE
6622: LD_INT 1
6624: DEC
6625: ST_TO_ADDR
6626: LD_INT 4
6628: PUSH
6629: FOR_TO
6630: IFFALSE 6716
// begin uc_side = 3 ;
6632: LD_ADDR_OWVAR 20
6636: PUSH
6637: LD_INT 3
6639: ST_TO_ADDR
// uc_nation = 3 ;
6640: LD_ADDR_OWVAR 21
6644: PUSH
6645: LD_INT 3
6647: ST_TO_ADDR
// hc_gallery =  ;
6648: LD_ADDR_OWVAR 33
6652: PUSH
6653: LD_STRING 
6655: ST_TO_ADDR
// hc_name =  ;
6656: LD_ADDR_OWVAR 26
6660: PUSH
6661: LD_STRING 
6663: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6664: LD_INT 0
6666: PPUSH
6667: LD_INT 2
6669: PPUSH
6670: LD_EXP 25
6674: PPUSH
6675: LD_EXP 26
6679: PPUSH
6680: CALL_OW 12
6684: PPUSH
6685: CALL_OW 380
// un = CreateHuman ;
6689: LD_ADDR_VAR 0 3
6693: PUSH
6694: CALL_OW 44
6698: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6699: LD_VAR 0 3
6703: PPUSH
6704: LD_INT 3
6706: PPUSH
6707: LD_INT 0
6709: PPUSH
6710: CALL_OW 49
// end ;
6714: GO 6629
6716: POP
6717: POP
// for i = 1 to 3 do
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: DOUBLE
6724: LD_INT 1
6726: DEC
6727: ST_TO_ADDR
6728: LD_INT 3
6730: PUSH
6731: FOR_TO
6732: IFFALSE 6818
// begin uc_side = 3 ;
6734: LD_ADDR_OWVAR 20
6738: PUSH
6739: LD_INT 3
6741: ST_TO_ADDR
// uc_nation = 3 ;
6742: LD_ADDR_OWVAR 21
6746: PUSH
6747: LD_INT 3
6749: ST_TO_ADDR
// hc_gallery =  ;
6750: LD_ADDR_OWVAR 33
6754: PUSH
6755: LD_STRING 
6757: ST_TO_ADDR
// hc_name =  ;
6758: LD_ADDR_OWVAR 26
6762: PUSH
6763: LD_STRING 
6765: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6766: LD_INT 0
6768: PPUSH
6769: LD_INT 3
6771: PPUSH
6772: LD_EXP 25
6776: PPUSH
6777: LD_EXP 26
6781: PPUSH
6782: CALL_OW 12
6786: PPUSH
6787: CALL_OW 380
// un = CreateHuman ;
6791: LD_ADDR_VAR 0 3
6795: PUSH
6796: CALL_OW 44
6800: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6801: LD_VAR 0 3
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: LD_INT 0
6811: PPUSH
6812: CALL_OW 49
// end ;
6816: GO 6731
6818: POP
6819: POP
// for i = 1 to 2 do
6820: LD_ADDR_VAR 0 2
6824: PUSH
6825: DOUBLE
6826: LD_INT 1
6828: DEC
6829: ST_TO_ADDR
6830: LD_INT 2
6832: PUSH
6833: FOR_TO
6834: IFFALSE 6920
// begin uc_side = 3 ;
6836: LD_ADDR_OWVAR 20
6840: PUSH
6841: LD_INT 3
6843: ST_TO_ADDR
// uc_nation = 3 ;
6844: LD_ADDR_OWVAR 21
6848: PUSH
6849: LD_INT 3
6851: ST_TO_ADDR
// hc_gallery =  ;
6852: LD_ADDR_OWVAR 33
6856: PUSH
6857: LD_STRING 
6859: ST_TO_ADDR
// hc_name =  ;
6860: LD_ADDR_OWVAR 26
6864: PUSH
6865: LD_STRING 
6867: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6868: LD_INT 0
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: LD_EXP 25
6878: PPUSH
6879: LD_EXP 26
6883: PPUSH
6884: CALL_OW 12
6888: PPUSH
6889: CALL_OW 380
// un = CreateHuman ;
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: CALL_OW 44
6902: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6903: LD_VAR 0 3
6907: PPUSH
6908: LD_INT 3
6910: PPUSH
6911: LD_INT 0
6913: PPUSH
6914: CALL_OW 49
// end ;
6918: GO 6833
6920: POP
6921: POP
// end ; end_of_file
6922: LD_VAR 0 1
6926: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6927: LD_INT 0
6929: PPUSH
6930: PPUSH
// if exist_mode then
6931: LD_VAR 0 2
6935: IFFALSE 6954
// unit := CreateCharacter ( ident ) else
6937: LD_ADDR_VAR 0 4
6941: PUSH
6942: LD_VAR 0 1
6946: PPUSH
6947: CALL_OW 34
6951: ST_TO_ADDR
6952: GO 6969
// unit := NewCharacter ( ident ) ;
6954: LD_ADDR_VAR 0 4
6958: PUSH
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 25
6968: ST_TO_ADDR
// result := unit ;
6969: LD_ADDR_VAR 0 3
6973: PUSH
6974: LD_VAR 0 4
6978: ST_TO_ADDR
// end ;
6979: LD_VAR 0 3
6983: RET
// export function Video ( mode ) ; begin
6984: LD_INT 0
6986: PPUSH
// ingame_video = mode ;
6987: LD_ADDR_OWVAR 52
6991: PUSH
6992: LD_VAR 0 1
6996: ST_TO_ADDR
// interface_hidden = mode ;
6997: LD_ADDR_OWVAR 54
7001: PUSH
7002: LD_VAR 0 1
7006: ST_TO_ADDR
// end ;
7007: LD_VAR 0 2
7011: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7012: LD_INT 0
7014: PPUSH
7015: PPUSH
7016: PPUSH
// rnd = rand ( 1 , characters ) ;
7017: LD_ADDR_VAR 0 6
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 1
7029: PPUSH
7030: CALL_OW 12
7034: ST_TO_ADDR
// for i = 1 to characters do
7035: LD_ADDR_VAR 0 5
7039: PUSH
7040: DOUBLE
7041: LD_INT 1
7043: DEC
7044: ST_TO_ADDR
7045: LD_VAR 0 1
7049: PUSH
7050: FOR_TO
7051: IFFALSE 7161
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7053: LD_VAR 0 5
7057: PUSH
7058: LD_VAR 0 6
7062: EQUAL
7063: PUSH
7064: LD_VAR 0 1
7068: PUSH
7069: LD_VAR 0 5
7073: ARRAY
7074: PPUSH
7075: CALL_OW 258
7079: PUSH
7080: LD_INT 1
7082: EQUAL
7083: AND
7084: IFFALSE 7106
// Say ( characters [ i ] , dialogMID ) ;
7086: LD_VAR 0 1
7090: PUSH
7091: LD_VAR 0 5
7095: ARRAY
7096: PPUSH
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7106: LD_VAR 0 5
7110: PUSH
7111: LD_VAR 0 6
7115: EQUAL
7116: PUSH
7117: LD_VAR 0 1
7121: PUSH
7122: LD_VAR 0 5
7126: ARRAY
7127: PPUSH
7128: CALL_OW 258
7132: PUSH
7133: LD_INT 2
7135: EQUAL
7136: AND
7137: IFFALSE 7159
// Say ( characters [ i ] , dialogFID ) ;
7139: LD_VAR 0 1
7143: PUSH
7144: LD_VAR 0 5
7148: ARRAY
7149: PPUSH
7150: LD_VAR 0 3
7154: PPUSH
7155: CALL_OW 88
// end ;
7159: GO 7050
7161: POP
7162: POP
// end ;
7163: LD_VAR 0 4
7167: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7168: LD_INT 0
7170: PPUSH
7171: PPUSH
7172: PPUSH
// uc_side := GetSide ( b ) ;
7173: LD_ADDR_OWVAR 20
7177: PUSH
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 255
7187: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7188: LD_ADDR_OWVAR 21
7192: PUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 248
7202: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 1
7208: PPUSH
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7218: LD_ADDR_VAR 0 5
7222: PUSH
7223: LD_VAR 0 2
7227: PPUSH
7228: CALL_OW 254
7232: PUSH
7233: LD_INT 3
7235: MINUS
7236: ST_TO_ADDR
// if dir < 0 then
7237: LD_VAR 0 5
7241: PUSH
7242: LD_INT 0
7244: LESS
7245: IFFALSE 7261
// dir := 6 + dir ;
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: LD_INT 6
7254: PUSH
7255: LD_VAR 0 5
7259: PLUS
7260: ST_TO_ADDR
// un := CreateHuman ;
7261: LD_ADDR_VAR 0 4
7265: PUSH
7266: CALL_OW 44
7270: ST_TO_ADDR
// SetDir ( un , dir ) ;
7271: LD_VAR 0 4
7275: PPUSH
7276: LD_VAR 0 5
7280: PPUSH
7281: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7285: LD_VAR 0 4
7289: PPUSH
7290: LD_VAR 0 2
7294: PPUSH
7295: CALL_OW 52
// end ;
7299: LD_VAR 0 3
7303: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7304: LD_INT 0
7306: PPUSH
7307: PPUSH
7308: PPUSH
7309: PPUSH
// for i = 1 to count do
7310: LD_ADDR_VAR 0 8
7314: PUSH
7315: DOUBLE
7316: LD_INT 1
7318: DEC
7319: ST_TO_ADDR
7320: LD_VAR 0 6
7324: PUSH
7325: FOR_TO
7326: IFFALSE 7407
// begin uc_side = side ;
7328: LD_ADDR_OWVAR 20
7332: PUSH
7333: LD_VAR 0 1
7337: ST_TO_ADDR
// uc_nation = nation ;
7338: LD_ADDR_OWVAR 21
7342: PUSH
7343: LD_VAR 0 2
7347: ST_TO_ADDR
// hc_gallery =  ;
7348: LD_ADDR_OWVAR 33
7352: PUSH
7353: LD_STRING 
7355: ST_TO_ADDR
// hc_name =  ;
7356: LD_ADDR_OWVAR 26
7360: PUSH
7361: LD_STRING 
7363: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7364: LD_INT 0
7366: PPUSH
7367: LD_VAR 0 5
7371: PPUSH
7372: LD_VAR 0 4
7376: PPUSH
7377: CALL_OW 380
// un = CreateHuman ;
7381: LD_ADDR_VAR 0 10
7385: PUSH
7386: CALL_OW 44
7390: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7391: LD_VAR 0 10
7395: PPUSH
7396: LD_VAR 0 3
7400: PPUSH
7401: CALL_OW 52
// end ;
7405: GO 7325
7407: POP
7408: POP
// end ;
7409: LD_VAR 0 7
7413: RET
// export function PrepareDifficulty ; begin
7414: LD_INT 0
7416: PPUSH
// if Difficulty = 1 then
7417: LD_OWVAR 67
7421: PUSH
7422: LD_INT 1
7424: EQUAL
7425: IFFALSE 7443
// begin RuSolMinLevel = 4 ;
7427: LD_ADDR_EXP 25
7431: PUSH
7432: LD_INT 4
7434: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7435: LD_ADDR_EXP 26
7439: PUSH
7440: LD_INT 6
7442: ST_TO_ADDR
// end ; if Difficulty = 2 then
7443: LD_OWVAR 67
7447: PUSH
7448: LD_INT 2
7450: EQUAL
7451: IFFALSE 7521
// begin RuSolMinLevel = 5 ;
7453: LD_ADDR_EXP 25
7457: PUSH
7458: LD_INT 5
7460: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7461: LD_ADDR_EXP 26
7465: PUSH
7466: LD_INT 6
7468: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7469: LD_INT 51
7471: PPUSH
7472: LD_INT 3
7474: PPUSH
7475: LD_INT 1
7477: PPUSH
7478: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7482: LD_INT 57
7484: PPUSH
7485: LD_INT 3
7487: PPUSH
7488: LD_INT 1
7490: PPUSH
7491: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7495: LD_INT 57
7497: PPUSH
7498: LD_INT 6
7500: PPUSH
7501: LD_INT 2
7503: PPUSH
7504: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7508: LD_INT 51
7510: PPUSH
7511: LD_INT 6
7513: PPUSH
7514: LD_INT 2
7516: PPUSH
7517: CALL_OW 322
// end ; if Difficulty = 3 then
7521: LD_OWVAR 67
7525: PUSH
7526: LD_INT 3
7528: EQUAL
7529: IFFALSE 7612
// begin RuSolMinLevel = 5 ;
7531: LD_ADDR_EXP 25
7535: PUSH
7536: LD_INT 5
7538: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7539: LD_ADDR_EXP 26
7543: PUSH
7544: LD_INT 6
7546: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7547: LD_INT 57
7549: PPUSH
7550: LD_INT 3
7552: PPUSH
7553: LD_INT 1
7555: PPUSH
7556: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7560: LD_INT 51
7562: PPUSH
7563: LD_INT 3
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7573: LD_INT 52
7575: PPUSH
7576: LD_INT 3
7578: PPUSH
7579: LD_INT 1
7581: PPUSH
7582: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7586: LD_INT 57
7588: PPUSH
7589: LD_INT 6
7591: PPUSH
7592: LD_INT 2
7594: PPUSH
7595: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7599: LD_INT 52
7601: PPUSH
7602: LD_INT 6
7604: PPUSH
7605: LD_INT 2
7607: PPUSH
7608: CALL_OW 322
// end ; end ;
7612: LD_VAR 0 1
7616: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7617: LD_INT 0
7619: PPUSH
7620: PPUSH
7621: PPUSH
7622: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 25
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 69
7656: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: LD_INT 4
7664: PUSH
7665: LD_INT 75
7667: PUSH
7668: LD_INT 79
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 4
7682: PUSH
7683: LD_INT 113
7685: PUSH
7686: LD_INT 94
7688: PUSH
7689: LD_INT 4
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 29
7700: PUSH
7701: LD_INT 106
7703: PUSH
7704: LD_INT 97
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 26
7718: PUSH
7719: LD_INT 93
7721: PUSH
7722: LD_INT 97
7724: PUSH
7725: LD_INT 5
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 2
7736: PUSH
7737: LD_INT 100
7739: PUSH
7740: LD_INT 89
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 17
7754: PUSH
7755: LD_INT 96
7757: PUSH
7758: LD_INT 89
7760: PUSH
7761: LD_INT 1
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 32
7772: PUSH
7773: LD_INT 78
7775: PUSH
7776: LD_INT 94
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 32
7790: PUSH
7791: LD_INT 95
7793: PUSH
7794: LD_INT 82
7796: PUSH
7797: LD_INT 3
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: PUSH
7806: LD_INT 32
7808: PUSH
7809: LD_INT 104
7811: PUSH
7812: LD_INT 85
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 32
7826: PUSH
7827: LD_INT 81
7829: PUSH
7830: LD_INT 78
7832: PUSH
7833: LD_INT 2
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 33
7844: PUSH
7845: LD_INT 109
7847: PUSH
7848: LD_INT 90
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 33
7862: PUSH
7863: LD_INT 88
7865: PUSH
7866: LD_INT 79
7868: PUSH
7869: LD_INT 3
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 33
7880: PUSH
7881: LD_INT 76
7883: PUSH
7884: LD_INT 87
7886: PUSH
7887: LD_INT 1
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 26
7898: PUSH
7899: LD_INT 96
7901: PUSH
7902: LD_INT 97
7904: PUSH
7905: LD_INT 5
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 26
7916: PUSH
7917: LD_INT 85
7919: PUSH
7920: LD_INT 84
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 6
7934: PUSH
7935: LD_INT 88
7937: PUSH
7938: LD_INT 95
7940: PUSH
7941: LD_INT 0
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 19
7952: PUSH
7953: LD_INT 103
7955: PUSH
7956: LD_INT 89
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 16
7970: PUSH
7971: LD_INT 97
7973: PUSH
7974: LD_INT 86
7976: PUSH
7977: LD_INT 2
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 24
7988: PUSH
7989: LD_INT 100
7991: PUSH
7992: LD_INT 85
7994: PUSH
7995: LD_INT 3
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: ST_TO_ADDR
// for i := 1 to buildingsTab do
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: DOUBLE
8031: LD_INT 1
8033: DEC
8034: ST_TO_ADDR
8035: LD_VAR 0 4
8039: PUSH
8040: FOR_TO
8041: IFFALSE 8114
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: LD_VAR 0 4
8052: PUSH
8053: LD_VAR 0 2
8057: ARRAY
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_VAR 0 4
8067: PUSH
8068: LD_VAR 0 2
8072: ARRAY
8073: PUSH
8074: LD_INT 2
8076: ARRAY
8077: PPUSH
8078: LD_VAR 0 4
8082: PUSH
8083: LD_VAR 0 2
8087: ARRAY
8088: PUSH
8089: LD_INT 3
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 4
8097: PUSH
8098: LD_VAR 0 2
8102: ARRAY
8103: PUSH
8104: LD_INT 4
8106: ARRAY
8107: PPUSH
8108: CALL_OW 205
8112: GO 8040
8114: POP
8115: POP
// end ;
8116: LD_VAR 0 1
8120: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8121: LD_INT 0
8123: PPUSH
8124: PPUSH
// for i in charactersList do
8125: LD_ADDR_VAR 0 4
8129: PUSH
8130: LD_VAR 0 1
8134: PUSH
8135: FOR_IN
8136: IFFALSE 8165
// begin if IsOk ( i ) then
8138: LD_VAR 0 4
8142: PPUSH
8143: CALL_OW 302
8147: IFFALSE 8163
// SaveCharacters ( i , ident ) ;
8149: LD_VAR 0 4
8153: PPUSH
8154: LD_VAR 0 2
8158: PPUSH
8159: CALL_OW 38
// end ;
8163: GO 8135
8165: POP
8166: POP
// end ;
8167: LD_VAR 0 3
8171: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8172: LD_INT 0
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8179: LD_ADDR_VAR 0 8
8183: PUSH
8184: LD_INT 48
8186: PUSH
8187: LD_INT 49
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: LD_INT 20
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: LD_INT 51
8201: PUSH
8202: LD_INT 52
8204: PUSH
8205: LD_INT 69
8207: PUSH
8208: LD_INT 39
8210: PUSH
8211: LD_INT 34
8213: PUSH
8214: LD_INT 40
8216: PUSH
8217: LD_INT 53
8219: PUSH
8220: LD_INT 71
8222: PUSH
8223: LD_INT 57
8225: PUSH
8226: LD_INT 58
8228: PUSH
8229: LD_INT 44
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 27
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 33
8243: PUSH
8244: LD_INT 59
8246: PUSH
8247: LD_INT 54
8249: PUSH
8250: LD_INT 55
8252: PUSH
8253: LD_INT 56
8255: PUSH
8256: LD_INT 63
8258: PUSH
8259: LD_INT 64
8261: PUSH
8262: LD_INT 65
8264: PUSH
8265: LD_INT 30
8267: PUSH
8268: LD_INT 31
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 22
8276: PUSH
8277: LD_INT 25
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8314: LD_ADDR_VAR 0 5
8318: PUSH
8319: DOUBLE
8320: LD_INT 1
8322: DEC
8323: ST_TO_ADDR
8324: LD_VAR 0 8
8328: PUSH
8329: FOR_TO
8330: IFFALSE 8406
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8332: LD_VAR 0 8
8336: PUSH
8337: LD_VAR 0 5
8341: ARRAY
8342: PPUSH
8343: LD_VAR 0 1
8347: PPUSH
8348: CALL_OW 321
8352: PUSH
8353: LD_INT 1
8355: EQUAL
8356: PUSH
8357: LD_VAR 0 8
8361: PUSH
8362: LD_VAR 0 5
8366: ARRAY
8367: PPUSH
8368: LD_VAR 0 3
8372: PPUSH
8373: CALL_OW 482
8377: PUSH
8378: LD_INT 1
8380: EQUAL
8381: AND
8382: IFFALSE 8404
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8384: LD_VAR 0 2
8388: PPUSH
8389: LD_VAR 0 8
8393: PUSH
8394: LD_VAR 0 5
8398: ARRAY
8399: PPUSH
8400: CALL_OW 184
8404: GO 8329
8406: POP
8407: POP
// end ;
8408: LD_VAR 0 4
8412: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8413: LD_INT 0
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
8419: PPUSH
8420: PPUSH
8421: PPUSH
8422: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8423: LD_ADDR_VAR 0 6
8427: PUSH
8428: LD_VAR 0 2
8432: PPUSH
8433: LD_INT 22
8435: PUSH
8436: LD_VAR 0 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 56
8447: PUSH
8448: EMPTY
8449: LIST
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: LD_INT 700
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 3
8463: PUSH
8464: LD_INT 60
8466: PUSH
8467: EMPTY
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 2
8476: PUSH
8477: LD_INT 25
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 25
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 25
8499: PUSH
8500: LD_INT 8
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 25
8509: PUSH
8510: LD_INT 9
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PPUSH
8531: CALL_OW 70
8535: PUSH
8536: LD_EXP 24
8540: PUSH
8541: EMPTY
8542: LIST
8543: DIFF
8544: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8545: LD_ADDR_VAR 0 7
8549: PUSH
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_INT 22
8557: PUSH
8558: LD_VAR 0 1
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 30
8569: PUSH
8570: LD_INT 32
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 58
8579: PUSH
8580: EMPTY
8581: LIST
8582: PUSH
8583: LD_INT 24
8585: PUSH
8586: LD_INT 251
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: PPUSH
8599: CALL_OW 70
8603: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8604: LD_ADDR_VAR 0 9
8608: PUSH
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 22
8616: PUSH
8617: LD_VAR 0 1
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 2
8628: PUSH
8629: LD_INT 30
8631: PUSH
8632: LD_INT 4
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 30
8641: PUSH
8642: LD_INT 5
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 24
8656: PUSH
8657: LD_INT 251
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 70
8673: ST_TO_ADDR
// if barrackList > 0 then
8674: LD_VAR 0 9
8678: PUSH
8679: LD_INT 0
8681: GREATER
8682: IFFALSE 8830
// begin if turretList = 0 then
8684: LD_VAR 0 7
8688: PUSH
8689: LD_INT 0
8691: EQUAL
8692: IFFALSE 8734
// begin if soldiers_list > 0 then
8694: LD_VAR 0 6
8698: PUSH
8699: LD_INT 0
8701: GREATER
8702: IFFALSE 8732
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8704: LD_VAR 0 6
8708: PPUSH
8709: LD_VAR 0 9
8713: PUSH
8714: LD_INT 1
8716: PPUSH
8717: LD_VAR 0 9
8721: PPUSH
8722: CALL_OW 12
8726: ARRAY
8727: PPUSH
8728: CALL_OW 120
// end else
8732: GO 8830
// begin for i in barrackList do
8734: LD_ADDR_VAR 0 4
8738: PUSH
8739: LD_VAR 0 9
8743: PUSH
8744: FOR_IN
8745: IFFALSE 8828
// begin insideUnits = UnitsInside ( i ) ;
8747: LD_ADDR_VAR 0 10
8751: PUSH
8752: LD_VAR 0 4
8756: PPUSH
8757: CALL_OW 313
8761: ST_TO_ADDR
// if insideUnits > 0 then
8762: LD_VAR 0 10
8766: PUSH
8767: LD_INT 0
8769: GREATER
8770: IFFALSE 8794
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8772: LD_VAR 0 10
8776: PUSH
8777: LD_INT 1
8779: ARRAY
8780: PPUSH
8781: LD_VAR 0 7
8785: PUSH
8786: LD_INT 1
8788: ARRAY
8789: PPUSH
8790: CALL_OW 120
// if soldiers_list > 0 then
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 0
8801: GREATER
8802: IFFALSE 8826
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8804: LD_VAR 0 6
8808: PUSH
8809: LD_INT 1
8811: ARRAY
8812: PPUSH
8813: LD_VAR 0 7
8817: PUSH
8818: LD_INT 1
8820: ARRAY
8821: PPUSH
8822: CALL_OW 120
// end ;
8826: GO 8744
8828: POP
8829: POP
// end ; end ; end ;
8830: LD_VAR 0 3
8834: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8835: LD_INT 0
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
8841: PPUSH
8842: PPUSH
// for i = 1 to vehCount do
8843: LD_ADDR_VAR 0 8
8847: PUSH
8848: DOUBLE
8849: LD_INT 1
8851: DEC
8852: ST_TO_ADDR
8853: LD_VAR 0 6
8857: PUSH
8858: FOR_TO
8859: IFFALSE 9066
// begin uc_side = side ;
8861: LD_ADDR_OWVAR 20
8865: PUSH
8866: LD_VAR 0 1
8870: ST_TO_ADDR
// uc_nation = nation ;
8871: LD_ADDR_OWVAR 21
8875: PUSH
8876: LD_VAR 0 3
8880: ST_TO_ADDR
// vc_Chassis = 22 ;
8881: LD_ADDR_OWVAR 37
8885: PUSH
8886: LD_INT 22
8888: ST_TO_ADDR
// vc_engine = 1 ;
8889: LD_ADDR_OWVAR 39
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// vc_control = 1 ;
8897: LD_ADDR_OWVAR 38
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8905: LD_ADDR_OWVAR 40
8909: PUSH
8910: LD_INT 43
8912: PUSH
8913: LD_INT 44
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 1
8922: PPUSH
8923: LD_INT 2
8925: PPUSH
8926: CALL_OW 12
8930: ARRAY
8931: ST_TO_ADDR
// veh = CreateVehicle ;
8932: LD_ADDR_VAR 0 12
8936: PUSH
8937: CALL_OW 45
8941: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8942: LD_VAR 0 12
8946: PPUSH
8947: LD_VAR 0 2
8951: PPUSH
8952: LD_INT 0
8954: PPUSH
8955: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8959: LD_ADDR_EXP 32
8963: PUSH
8964: LD_EXP 32
8968: PUSH
8969: LD_VAR 0 12
8973: ADD
8974: ST_TO_ADDR
// hc_class = 3 ;
8975: LD_ADDR_OWVAR 28
8979: PUSH
8980: LD_INT 3
8982: ST_TO_ADDR
// hc_name =  ;
8983: LD_ADDR_OWVAR 26
8987: PUSH
8988: LD_STRING 
8990: ST_TO_ADDR
// hc_gallery =  ;
8991: LD_ADDR_OWVAR 33
8995: PUSH
8996: LD_STRING 
8998: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8999: LD_INT 0
9001: PPUSH
9002: LD_INT 3
9004: PPUSH
9005: LD_EXP 25
9009: PPUSH
9010: LD_EXP 26
9014: PPUSH
9015: CALL_OW 12
9019: PPUSH
9020: CALL_OW 380
// un = CreateHuman ;
9024: LD_ADDR_VAR 0 10
9028: PUSH
9029: CALL_OW 44
9033: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9034: LD_VAR 0 10
9038: PPUSH
9039: LD_VAR 0 12
9043: PPUSH
9044: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9048: LD_ADDR_EXP 32
9052: PUSH
9053: LD_EXP 32
9057: PUSH
9058: LD_VAR 0 10
9062: ADD
9063: ST_TO_ADDR
// end ;
9064: GO 8858
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
9080: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9081: LD_VAR 0 2
9085: PPUSH
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: PPUSH
9101: CALL_OW 70
9105: PUSH
9106: LD_INT 0
9108: EQUAL
9109: PUSH
9110: LD_EXP 32
9114: AND
9115: IFFALSE 9402
// begin for i in defenders_list do
9117: LD_ADDR_VAR 0 4
9121: PUSH
9122: LD_EXP 32
9126: PUSH
9127: FOR_IN
9128: IFFALSE 9400
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9130: LD_VAR 0 4
9134: PPUSH
9135: LD_INT 63
9137: PPUSH
9138: LD_INT 75
9140: PPUSH
9141: CALL_OW 297
9145: PUSH
9146: LD_INT 8
9148: GREATER
9149: PUSH
9150: LD_VAR 0 4
9154: PPUSH
9155: CALL_OW 314
9159: NOT
9160: AND
9161: IFFALSE 9180
// ComMoveXY ( i , 63 , 75 ) else
9163: LD_VAR 0 4
9167: PPUSH
9168: LD_INT 63
9170: PPUSH
9171: LD_INT 75
9173: PPUSH
9174: CALL_OW 111
9178: GO 9398
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9180: LD_VAR 0 4
9184: PPUSH
9185: CALL_OW 257
9189: PUSH
9190: LD_INT 3
9192: EQUAL
9193: PUSH
9194: LD_VAR 0 4
9198: PPUSH
9199: CALL_OW 310
9203: NOT
9204: AND
9205: PUSH
9206: LD_VAR 0 4
9210: PPUSH
9211: CALL_OW 314
9215: NOT
9216: AND
9217: IFFALSE 9270
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9219: LD_VAR 0 4
9223: PPUSH
9224: LD_EXP 32
9228: PPUSH
9229: LD_INT 58
9231: PUSH
9232: EMPTY
9233: LIST
9234: PUSH
9235: LD_INT 24
9237: PUSH
9238: LD_INT 1000
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 72
9253: PPUSH
9254: LD_VAR 0 4
9258: PPUSH
9259: CALL_OW 74
9263: PPUSH
9264: CALL_OW 120
9268: GO 9398
// if GetFuel ( i ) < 100 then
9270: LD_VAR 0 4
9274: PPUSH
9275: CALL_OW 261
9279: PUSH
9280: LD_INT 100
9282: LESS
9283: IFFALSE 9299
// SetFuel ( defenders_list , 100 ) else
9285: LD_EXP 32
9289: PPUSH
9290: LD_INT 100
9292: PPUSH
9293: CALL_OW 240
9297: GO 9398
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9299: LD_VAR 0 4
9303: PPUSH
9304: CALL_OW 263
9308: PUSH
9309: LD_INT 1
9311: EQUAL
9312: PUSH
9313: LD_VAR 0 4
9317: PPUSH
9318: CALL_OW 256
9322: PUSH
9323: LD_INT 990
9325: LESS
9326: AND
9327: IFFALSE 9398
// begin veh := i ;
9329: LD_ADDR_VAR 0 7
9333: PUSH
9334: LD_VAR 0 4
9338: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9339: LD_ADDR_VAR 0 8
9343: PUSH
9344: LD_VAR 0 4
9348: PPUSH
9349: CALL_OW 311
9353: ST_TO_ADDR
// if veh then
9354: LD_VAR 0 7
9358: IFFALSE 9398
// begin ComMoveXY ( i , 63 , 75 ) ;
9360: LD_VAR 0 4
9364: PPUSH
9365: LD_INT 63
9367: PPUSH
9368: LD_INT 75
9370: PPUSH
9371: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9375: LD_VAR 0 7
9379: PPUSH
9380: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9384: LD_VAR 0 8
9388: PPUSH
9389: LD_VAR 0 7
9393: PPUSH
9394: CALL_OW 189
// end ; end ; end ;
9398: GO 9127
9400: POP
9401: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9402: LD_ADDR_VAR 0 6
9406: PUSH
9407: LD_VAR 0 2
9411: PPUSH
9412: LD_INT 22
9414: PUSH
9415: LD_VAR 0 1
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: PPUSH
9427: CALL_OW 70
9431: ST_TO_ADDR
// if tmp and defenders_list then
9432: LD_VAR 0 6
9436: PUSH
9437: LD_EXP 32
9441: AND
9442: IFFALSE 9611
// for i in defenders_list do
9444: LD_ADDR_VAR 0 4
9448: PUSH
9449: LD_EXP 32
9453: PUSH
9454: FOR_IN
9455: IFFALSE 9609
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9457: LD_VAR 0 4
9461: PPUSH
9462: CALL_OW 257
9466: PUSH
9467: LD_INT 3
9469: EQUAL
9470: PUSH
9471: LD_VAR 0 4
9475: PPUSH
9476: CALL_OW 310
9480: NOT
9481: AND
9482: IFFALSE 9521
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9484: LD_VAR 0 4
9488: PPUSH
9489: LD_EXP 32
9493: PPUSH
9494: LD_INT 58
9496: PUSH
9497: EMPTY
9498: LIST
9499: PPUSH
9500: CALL_OW 72
9504: PPUSH
9505: LD_VAR 0 4
9509: PPUSH
9510: CALL_OW 74
9514: PPUSH
9515: CALL_OW 120
9519: GO 9607
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9521: LD_VAR 0 4
9525: PPUSH
9526: CALL_OW 314
9530: NOT
9531: PUSH
9532: LD_VAR 0 4
9536: PPUSH
9537: LD_VAR 0 2
9541: PPUSH
9542: CALL_OW 308
9546: AND
9547: IFFALSE 9575
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9549: LD_VAR 0 4
9553: PPUSH
9554: LD_VAR 0 6
9558: PPUSH
9559: LD_VAR 0 4
9563: PPUSH
9564: CALL_OW 74
9568: PPUSH
9569: CALL_OW 115
9573: GO 9607
// if not IsInArea ( i , defenseArea ) then
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_VAR 0 2
9584: PPUSH
9585: CALL_OW 308
9589: NOT
9590: IFFALSE 9607
// ComMoveXY ( i , 63 , 75 ) ;
9592: LD_VAR 0 4
9596: PPUSH
9597: LD_INT 63
9599: PPUSH
9600: LD_INT 75
9602: PPUSH
9603: CALL_OW 111
// end ;
9607: GO 9454
9609: POP
9610: POP
// end ;
9611: LD_VAR 0 3
9615: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9616: LD_INT 0
9618: PPUSH
9619: PPUSH
9620: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9621: LD_INT 22
9623: PUSH
9624: LD_VAR 0 1
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 21
9635: PUSH
9636: LD_INT 2
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: PUSH
9652: LD_VAR 0 3
9656: LESSEQUAL
9657: IFFALSE 9765
// begin for i = 1 to vehCount do
9659: LD_ADDR_VAR 0 9
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_VAR 0 3
9673: PUSH
9674: FOR_TO
9675: IFFALSE 9763
// begin weapon = weaponTab [ i ] ;
9677: LD_ADDR_VAR 0 10
9681: PUSH
9682: LD_VAR 0 4
9686: PUSH
9687: LD_VAR 0 9
9691: ARRAY
9692: ST_TO_ADDR
// if weapon = 46 then
9693: LD_VAR 0 10
9697: PUSH
9698: LD_INT 46
9700: EQUAL
9701: IFFALSE 9732
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9703: LD_VAR 0 2
9707: PPUSH
9708: LD_INT 24
9710: PPUSH
9711: LD_VAR 0 5
9715: PPUSH
9716: LD_VAR 0 6
9720: PPUSH
9721: LD_VAR 0 10
9725: PPUSH
9726: CALL_OW 185
// end else
9730: GO 9761
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9732: LD_VAR 0 2
9736: PPUSH
9737: LD_VAR 0 7
9741: PPUSH
9742: LD_VAR 0 5
9746: PPUSH
9747: LD_VAR 0 6
9751: PPUSH
9752: LD_VAR 0 10
9756: PPUSH
9757: CALL_OW 185
// end ; end ;
9761: GO 9674
9763: POP
9764: POP
// end ; end ;
9765: LD_VAR 0 8
9769: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9770: LD_INT 0
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9776: LD_ADDR_VAR 0 8
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_VAR 0 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 21
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 3
9805: PUSH
9806: LD_INT 24
9808: PUSH
9809: LD_INT 650
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 69
9829: ST_TO_ADDR
// if damageVehicles > 0 then
9830: LD_VAR 0 8
9834: PUSH
9835: LD_INT 0
9837: GREATER
9838: IFFALSE 9859
// ComMoveXY ( damageVehicles , repX , repY ) ;
9840: LD_VAR 0 8
9844: PPUSH
9845: LD_VAR 0 3
9849: PPUSH
9850: LD_VAR 0 4
9854: PPUSH
9855: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9859: LD_VAR 0 8
9863: PPUSH
9864: LD_INT 95
9866: PUSH
9867: LD_VAR 0 2
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 3
9878: PUSH
9879: LD_INT 58
9881: PUSH
9882: EMPTY
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 72
9897: PUSH
9898: LD_INT 0
9900: GREATER
9901: IFFALSE 9968
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9903: LD_ADDR_VAR 0 6
9907: PUSH
9908: LD_VAR 0 8
9912: PPUSH
9913: LD_INT 95
9915: PUSH
9916: LD_VAR 0 2
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 3
9927: PUSH
9928: LD_INT 58
9930: PUSH
9931: EMPTY
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PPUSH
9942: CALL_OW 72
9946: PUSH
9947: FOR_IN
9948: IFFALSE 9966
// ComExitVehicle ( UnitsInside ( i ) ) ;
9950: LD_VAR 0 6
9954: PPUSH
9955: CALL_OW 313
9959: PPUSH
9960: CALL_OW 121
9964: GO 9947
9966: POP
9967: POP
// end ;
9968: LD_VAR 0 5
9972: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9973: LD_INT 0
9975: PPUSH
9976: PPUSH
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9982: LD_ADDR_VAR 0 8
9986: PUSH
9987: LD_INT 22
9989: PUSH
9990: LD_VAR 0 1
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 21
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 24
10011: PUSH
10012: LD_INT 250
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: LD_INT 58
10024: PUSH
10025: EMPTY
10026: LIST
10027: PUSH
10028: LD_INT 2
10030: PUSH
10031: LD_INT 34
10033: PUSH
10034: LD_INT 43
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 34
10043: PUSH
10044: LD_INT 44
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 34
10053: PUSH
10054: LD_INT 46
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: PPUSH
10078: CALL_OW 69
10082: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10083: LD_INT 22
10085: PUSH
10086: LD_VAR 0 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 21
10097: PUSH
10098: LD_INT 2
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 24
10107: PUSH
10108: LD_INT 1000
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 3
10117: PUSH
10118: LD_INT 58
10120: PUSH
10121: EMPTY
10122: LIST
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 34
10129: PUSH
10130: LD_INT 43
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 34
10139: PUSH
10140: LD_INT 44
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 34
10149: PUSH
10150: LD_INT 46
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 69
10178: PUSH
10179: LD_INT 5
10181: PUSH
10182: LD_INT 6
10184: PUSH
10185: LD_INT 7
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_OWVAR 67
10197: ARRAY
10198: GREATEREQUAL
10199: IFFALSE 10764
// repeat wait ( 0 0$1 ) ;
10201: LD_INT 35
10203: PPUSH
10204: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10208: LD_ADDR_VAR 0 8
10212: PUSH
10213: LD_INT 22
10215: PUSH
10216: LD_VAR 0 1
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 21
10227: PUSH
10228: LD_INT 2
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 24
10237: PUSH
10238: LD_INT 250
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: LD_INT 34
10250: PUSH
10251: LD_INT 43
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 34
10260: PUSH
10261: LD_INT 44
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 34
10270: PUSH
10271: LD_INT 46
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 3
10286: PUSH
10287: LD_INT 58
10289: PUSH
10290: EMPTY
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10309: LD_INT 22
10311: PUSH
10312: LD_VAR 0 1
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 95
10323: PUSH
10324: LD_VAR 0 2
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PPUSH
10337: CALL_OW 69
10341: NOT
10342: PUSH
10343: LD_VAR 0 11
10347: PUSH
10348: LD_INT 0
10350: EQUAL
10351: AND
10352: IFFALSE 10407
// for i := 1 to wayX do
10354: LD_ADDR_VAR 0 6
10358: PUSH
10359: DOUBLE
10360: LD_INT 1
10362: DEC
10363: ST_TO_ADDR
10364: LD_VAR 0 3
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10405
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10372: LD_VAR 0 8
10376: PPUSH
10377: LD_VAR 0 3
10381: PUSH
10382: LD_VAR 0 6
10386: ARRAY
10387: PPUSH
10388: LD_VAR 0 4
10392: PUSH
10393: LD_VAR 0 6
10397: ARRAY
10398: PPUSH
10399: CALL_OW 114
10403: GO 10369
10405: POP
10406: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10407: LD_INT 22
10409: PUSH
10410: LD_VAR 0 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 95
10421: PUSH
10422: LD_VAR 0 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PPUSH
10435: CALL_OW 69
10439: IFFALSE 10663
// begin seeEnemy = 1 ;
10441: LD_ADDR_VAR 0 11
10445: PUSH
10446: LD_INT 1
10448: ST_TO_ADDR
// for j in vehiclesOK do
10449: LD_ADDR_VAR 0 7
10453: PUSH
10454: LD_VAR 0 8
10458: PUSH
10459: FOR_IN
10460: IFFALSE 10661
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10462: LD_ADDR_VAR 0 9
10466: PUSH
10467: LD_INT 81
10469: PUSH
10470: LD_VAR 0 1
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 101
10481: PUSH
10482: LD_INT 1
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PPUSH
10493: CALL_OW 69
10497: PPUSH
10498: LD_VAR 0 7
10502: PPUSH
10503: CALL_OW 74
10507: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10508: LD_ADDR_VAR 0 10
10512: PUSH
10513: LD_INT 81
10515: PUSH
10516: LD_VAR 0 1
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 101
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 59
10540: PUSH
10541: EMPTY
10542: LIST
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 21
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: PPUSH
10578: CALL_OW 69
10582: PPUSH
10583: LD_VAR 0 7
10587: PPUSH
10588: CALL_OW 74
10592: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10593: LD_VAR 0 7
10597: PPUSH
10598: LD_VAR 0 9
10602: PPUSH
10603: CALL_OW 296
10607: PUSH
10608: LD_INT 8
10610: PLUS
10611: PUSH
10612: LD_VAR 0 7
10616: PPUSH
10617: LD_VAR 0 10
10621: PPUSH
10622: CALL_OW 296
10626: LESS
10627: IFFALSE 10645
// ComAttackUnit ( j , target1 ) else
10629: LD_VAR 0 7
10633: PPUSH
10634: LD_VAR 0 9
10638: PPUSH
10639: CALL_OW 115
10643: GO 10659
// ComAttackUnit ( j , target2 ) ;
10645: LD_VAR 0 7
10649: PPUSH
10650: LD_VAR 0 10
10654: PPUSH
10655: CALL_OW 115
// end ;
10659: GO 10459
10661: POP
10662: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10663: LD_INT 22
10665: PUSH
10666: LD_VAR 0 1
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 21
10677: PUSH
10678: LD_INT 2
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 24
10687: PUSH
10688: LD_INT 250
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: LD_INT 34
10700: PUSH
10701: LD_INT 43
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 34
10710: PUSH
10711: LD_INT 44
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 34
10720: PUSH
10721: LD_INT 46
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 3
10736: PUSH
10737: LD_INT 58
10739: PUSH
10740: EMPTY
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: PUSH
10759: LD_INT 0
10761: EQUAL
10762: IFFALSE 10201
// seeEnemy = 0 ;
10764: LD_ADDR_VAR 0 11
10768: PUSH
10769: LD_INT 0
10771: ST_TO_ADDR
// end ;
10772: LD_VAR 0 5
10776: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10777: LD_INT 0
10779: PPUSH
10780: PPUSH
10781: PPUSH
10782: PPUSH
10783: PPUSH
10784: PPUSH
// repeat wait ( 0 0$1 ) ;
10785: LD_INT 35
10787: PPUSH
10788: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10792: LD_ADDR_VAR 0 7
10796: PUSH
10797: LD_INT 22
10799: PUSH
10800: LD_VAR 0 1
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 21
10811: PUSH
10812: LD_INT 2
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: LD_INT 651
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PPUSH
10834: CALL_OW 69
10838: ST_TO_ADDR
// for j in vehiclesOK do
10839: LD_ADDR_VAR 0 4
10843: PUSH
10844: LD_VAR 0 7
10848: PUSH
10849: FOR_IN
10850: IFFALSE 11051
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10852: LD_ADDR_VAR 0 5
10856: PUSH
10857: LD_INT 81
10859: PUSH
10860: LD_VAR 0 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 101
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PPUSH
10883: CALL_OW 69
10887: PPUSH
10888: LD_VAR 0 4
10892: PPUSH
10893: CALL_OW 74
10897: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10898: LD_ADDR_VAR 0 6
10902: PUSH
10903: LD_INT 81
10905: PUSH
10906: LD_VAR 0 1
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 101
10917: PUSH
10918: LD_INT 1
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: LD_INT 59
10930: PUSH
10931: EMPTY
10932: LIST
10933: PUSH
10934: LD_INT 21
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 21
10946: PUSH
10947: LD_INT 2
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: PPUSH
10973: LD_VAR 0 4
10977: PPUSH
10978: CALL_OW 74
10982: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10983: LD_VAR 0 4
10987: PPUSH
10988: LD_VAR 0 5
10992: PPUSH
10993: CALL_OW 296
10997: PUSH
10998: LD_INT 8
11000: PLUS
11001: PUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: LD_VAR 0 6
11011: PPUSH
11012: CALL_OW 296
11016: LESS
11017: IFFALSE 11035
// ComAttackUnit ( j , target1 ) else
11019: LD_VAR 0 4
11023: PPUSH
11024: LD_VAR 0 5
11028: PPUSH
11029: CALL_OW 115
11033: GO 11049
// ComAttackUnit ( j , target2 ) ;
11035: LD_VAR 0 4
11039: PPUSH
11040: LD_VAR 0 6
11044: PPUSH
11045: CALL_OW 115
// end ;
11049: GO 10849
11051: POP
11052: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11053: LD_INT 22
11055: PUSH
11056: LD_VAR 0 1
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 21
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 24
11077: PUSH
11078: LD_INT 250
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: PPUSH
11090: CALL_OW 69
11094: PUSH
11095: LD_INT 0
11097: EQUAL
11098: IFFALSE 10785
// end ;
11100: LD_VAR 0 2
11104: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11105: LD_INT 0
11107: PPUSH
11108: PPUSH
11109: PPUSH
11110: PPUSH
11111: PPUSH
11112: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11113: LD_ADDR_VAR 0 8
11117: PUSH
11118: LD_VAR 0 2
11122: PPUSH
11123: CALL_OW 313
11127: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11128: LD_ADDR_VAR 0 9
11132: PUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 22
11140: PUSH
11141: LD_VAR 0 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 2
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 24
11162: PUSH
11163: LD_INT 750
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 3
11172: PUSH
11173: LD_INT 54
11175: PUSH
11176: EMPTY
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 70
11193: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11194: LD_ADDR_VAR 0 6
11198: PUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_VAR 0 1
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 21
11218: PUSH
11219: LD_INT 3
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: LD_INT 24
11231: PUSH
11232: LD_INT 1000
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: PPUSH
11251: CALL_OW 70
11255: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11256: LD_VAR 0 6
11260: NOT
11261: PUSH
11262: LD_INT 22
11264: PUSH
11265: LD_VAR 0 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 25
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 24
11286: PUSH
11287: LD_INT 250
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: PPUSH
11299: CALL_OW 69
11303: NOT
11304: AND
11305: IFFALSE 11309
// exit ;
11307: GO 11506
// if buildings_list > 0 and engineerOkInside then
11309: LD_VAR 0 6
11313: PUSH
11314: LD_INT 0
11316: GREATER
11317: PUSH
11318: LD_VAR 0 8
11322: AND
11323: IFFALSE 11349
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11325: LD_VAR 0 8
11329: PPUSH
11330: LD_INT 25
11332: PUSH
11333: LD_INT 2
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 72
11344: PPUSH
11345: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11349: LD_VAR 0 6
11353: PUSH
11354: LD_INT 0
11356: GREATER
11357: PUSH
11358: LD_VAR 0 9
11362: PUSH
11363: LD_INT 0
11365: GREATER
11366: AND
11367: IFFALSE 11387
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11369: LD_VAR 0 9
11373: PPUSH
11374: LD_VAR 0 6
11378: PUSH
11379: LD_INT 1
11381: ARRAY
11382: PPUSH
11383: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11387: LD_VAR 0 6
11391: PUSH
11392: LD_INT 0
11394: EQUAL
11395: PUSH
11396: LD_VAR 0 4
11400: PUSH
11401: LD_INT 0
11403: EQUAL
11404: AND
11405: PUSH
11406: LD_VAR 0 9
11410: PUSH
11411: LD_INT 0
11413: GREATER
11414: AND
11415: IFFALSE 11431
// ComEnterUnit ( engineerOkOutside , building ) ;
11417: LD_VAR 0 9
11421: PPUSH
11422: LD_VAR 0 2
11426: PPUSH
11427: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11431: LD_VAR 0 9
11435: PUSH
11436: LD_INT 0
11438: GREATER
11439: PUSH
11440: LD_VAR 0 6
11444: PUSH
11445: LD_INT 0
11447: EQUAL
11448: AND
11449: PUSH
11450: LD_VAR 0 4
11454: PUSH
11455: LD_INT 0
11457: GREATER
11458: AND
11459: IFFALSE 11506
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11461: LD_VAR 0 9
11465: PPUSH
11466: LD_VAR 0 4
11470: PUSH
11471: LD_INT 1
11473: ARRAY
11474: PPUSH
11475: LD_VAR 0 4
11479: PUSH
11480: LD_INT 2
11482: ARRAY
11483: PPUSH
11484: LD_VAR 0 4
11488: PUSH
11489: LD_INT 3
11491: ARRAY
11492: PPUSH
11493: LD_VAR 0 4
11497: PUSH
11498: LD_INT 4
11500: ARRAY
11501: PPUSH
11502: CALL_OW 145
// end ;
11506: LD_VAR 0 5
11510: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11511: LD_INT 0
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
11519: PPUSH
11520: PPUSH
11521: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11522: LD_ADDR_VAR 0 6
11526: PUSH
11527: LD_INT 22
11529: PUSH
11530: LD_VAR 0 1
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 25
11541: PUSH
11542: LD_INT 4
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 23
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 24
11561: PUSH
11562: LD_INT 251
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11580: LD_ADDR_VAR 0 7
11584: PUSH
11585: LD_VAR 0 3
11589: PPUSH
11590: LD_INT 22
11592: PUSH
11593: LD_VAR 0 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 23
11604: PUSH
11605: LD_INT 2
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 25
11614: PUSH
11615: LD_INT 4
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 50
11624: PUSH
11625: EMPTY
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: PPUSH
11634: CALL_OW 70
11638: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11639: LD_ADDR_VAR 0 10
11643: PUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 22
11651: PUSH
11652: LD_VAR 0 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 1
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 25
11676: PUSH
11677: LD_INT 3
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 24
11693: PUSH
11694: LD_INT 750
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PPUSH
11711: CALL_OW 70
11715: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11716: LD_ADDR_VAR 0 11
11720: PUSH
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 22
11728: PUSH
11729: LD_VAR 0 1
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: LD_INT 21
11740: PUSH
11741: LD_INT 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: LD_INT 3
11750: PUSH
11751: LD_INT 25
11753: PUSH
11754: LD_INT 3
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 24
11770: PUSH
11771: LD_INT 1000
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 70
11792: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11793: LD_VAR 0 10
11797: NOT
11798: PUSH
11799: LD_VAR 0 11
11803: NOT
11804: AND
11805: PUSH
11806: LD_VAR 0 6
11810: NOT
11811: AND
11812: IFFALSE 11816
// exit ;
11814: GO 12050
// if damageUnits > 0 and sci_list > 0 then
11816: LD_VAR 0 10
11820: PUSH
11821: LD_INT 0
11823: GREATER
11824: PUSH
11825: LD_VAR 0 6
11829: PUSH
11830: LD_INT 0
11832: GREATER
11833: AND
11834: IFFALSE 11850
// ComMoveToArea ( damageUnits , healArea ) ;
11836: LD_VAR 0 10
11840: PPUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11850: LD_VAR 0 11
11854: PUSH
11855: LD_INT 0
11857: GREATER
11858: PUSH
11859: LD_VAR 0 6
11863: PUSH
11864: LD_INT 0
11866: GREATER
11867: AND
11868: IFFALSE 11879
// ComExitBuilding ( sci_list ) ;
11870: LD_VAR 0 6
11874: PPUSH
11875: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11879: LD_VAR 0 11
11883: PUSH
11884: LD_INT 0
11886: GREATER
11887: PUSH
11888: LD_VAR 0 7
11892: PUSH
11893: LD_INT 0
11895: GREATER
11896: AND
11897: IFFALSE 11917
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11899: LD_VAR 0 7
11903: PPUSH
11904: LD_VAR 0 11
11908: PUSH
11909: LD_INT 1
11911: ARRAY
11912: PPUSH
11913: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11917: LD_VAR 0 10
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: PUSH
11926: LD_VAR 0 11
11930: PUSH
11931: LD_INT 0
11933: EQUAL
11934: AND
11935: PUSH
11936: LD_VAR 0 7
11940: PUSH
11941: LD_INT 0
11943: GREATER
11944: AND
11945: IFFALSE 12050
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11947: LD_ADDR_VAR 0 12
11951: PUSH
11952: LD_INT 22
11954: PUSH
11955: LD_VAR 0 1
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 21
11966: PUSH
11967: LD_INT 3
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 30
11976: PUSH
11977: LD_INT 8
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 69
11993: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11994: LD_ADDR_VAR 0 13
11998: PUSH
11999: LD_INT 1
12001: PPUSH
12002: LD_VAR 0 12
12006: PPUSH
12007: CALL_OW 12
12011: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12012: LD_VAR 0 7
12016: PPUSH
12017: LD_INT 3
12019: PUSH
12020: LD_INT 60
12022: PUSH
12023: EMPTY
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 72
12034: PPUSH
12035: LD_VAR 0 12
12039: PUSH
12040: LD_VAR 0 13
12044: ARRAY
12045: PPUSH
12046: CALL_OW 120
// end ; end ;
12050: LD_VAR 0 5
12054: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12055: LD_INT 0
12057: PPUSH
12058: PPUSH
12059: PPUSH
12060: PPUSH
12061: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12062: LD_ADDR_VAR 0 6
12066: PUSH
12067: LD_INT 22
12069: PUSH
12070: LD_VAR 0 1
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 2
12081: PUSH
12082: LD_INT 30
12084: PUSH
12085: LD_INT 31
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 32
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 33
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 30
12124: PUSH
12125: LD_INT 5
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PPUSH
12144: CALL_OW 69
12148: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12149: LD_ADDR_VAR 0 7
12153: PUSH
12154: LD_INT 22
12156: PUSH
12157: LD_VAR 0 2
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 21
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 58
12178: PUSH
12179: EMPTY
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: PPUSH
12187: CALL_OW 69
12191: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12192: LD_VAR 0 6
12196: PUSH
12197: LD_INT 0
12199: GREATER
12200: PUSH
12201: LD_VAR 0 7
12205: PUSH
12206: LD_INT 0
12208: GREATER
12209: AND
12210: IFFALSE 12280
// begin for i in turretsList do
12212: LD_ADDR_VAR 0 4
12216: PUSH
12217: LD_VAR 0 6
12221: PUSH
12222: FOR_IN
12223: IFFALSE 12278
// begin for j in enemyBuildings do
12225: LD_ADDR_VAR 0 5
12229: PUSH
12230: LD_VAR 0 7
12234: PUSH
12235: FOR_IN
12236: IFFALSE 12274
// begin if GetDistUnits ( i , j ) < 20 then
12238: LD_VAR 0 4
12242: PPUSH
12243: LD_VAR 0 5
12247: PPUSH
12248: CALL_OW 296
12252: PUSH
12253: LD_INT 20
12255: LESS
12256: IFFALSE 12272
// begin ComAttackUnit ( i , j ) ;
12258: LD_VAR 0 4
12262: PPUSH
12263: LD_VAR 0 5
12267: PPUSH
12268: CALL_OW 115
// end ; end ;
12272: GO 12235
12274: POP
12275: POP
// end ;
12276: GO 12222
12278: POP
12279: POP
// end ; end ;
12280: LD_VAR 0 3
12284: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12285: LD_INT 0
12287: PPUSH
12288: PPUSH
12289: PPUSH
12290: PPUSH
12291: PPUSH
12292: PPUSH
12293: PPUSH
12294: PPUSH
12295: PPUSH
12296: PPUSH
12297: PPUSH
// for i = 1 to medicCount do
12298: LD_ADDR_VAR 0 14
12302: PUSH
12303: DOUBLE
12304: LD_INT 1
12306: DEC
12307: ST_TO_ADDR
12308: LD_VAR 0 7
12312: PUSH
12313: FOR_TO
12314: IFFALSE 12396
// begin uc_side = side ;
12316: LD_ADDR_OWVAR 20
12320: PUSH
12321: LD_VAR 0 1
12325: ST_TO_ADDR
// uc_nation = nation ;
12326: LD_ADDR_OWVAR 21
12330: PUSH
12331: LD_VAR 0 2
12335: ST_TO_ADDR
// hc_name =  ;
12336: LD_ADDR_OWVAR 26
12340: PUSH
12341: LD_STRING 
12343: ST_TO_ADDR
// hc_gallery =  ;
12344: LD_ADDR_OWVAR 33
12348: PUSH
12349: LD_STRING 
12351: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12352: LD_INT 0
12354: PPUSH
12355: LD_INT 4
12357: PPUSH
12358: LD_VAR 0 8
12362: PPUSH
12363: CALL_OW 380
// un = CreateHuman ;
12367: LD_ADDR_VAR 0 16
12371: PUSH
12372: CALL_OW 44
12376: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12377: LD_VAR 0 16
12381: PPUSH
12382: LD_VAR 0 9
12386: PPUSH
12387: LD_INT 0
12389: PPUSH
12390: CALL_OW 49
// end ;
12394: GO 12313
12396: POP
12397: POP
// for i = 1 to soldierCount do
12398: LD_ADDR_VAR 0 14
12402: PUSH
12403: DOUBLE
12404: LD_INT 1
12406: DEC
12407: ST_TO_ADDR
12408: LD_VAR 0 3
12412: PUSH
12413: FOR_TO
12414: IFFALSE 12496
// begin uc_side = side ;
12416: LD_ADDR_OWVAR 20
12420: PUSH
12421: LD_VAR 0 1
12425: ST_TO_ADDR
// uc_nation = nation ;
12426: LD_ADDR_OWVAR 21
12430: PUSH
12431: LD_VAR 0 2
12435: ST_TO_ADDR
// hc_name =  ;
12436: LD_ADDR_OWVAR 26
12440: PUSH
12441: LD_STRING 
12443: ST_TO_ADDR
// hc_gallery =  ;
12444: LD_ADDR_OWVAR 33
12448: PUSH
12449: LD_STRING 
12451: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12452: LD_INT 0
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_VAR 0 8
12462: PPUSH
12463: CALL_OW 380
// un = CreateHuman ;
12467: LD_ADDR_VAR 0 16
12471: PUSH
12472: CALL_OW 44
12476: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12477: LD_VAR 0 16
12481: PPUSH
12482: LD_VAR 0 9
12486: PPUSH
12487: LD_INT 0
12489: PPUSH
12490: CALL_OW 49
// end ;
12494: GO 12413
12496: POP
12497: POP
// for i = 1 to sniperCount do
12498: LD_ADDR_VAR 0 14
12502: PUSH
12503: DOUBLE
12504: LD_INT 1
12506: DEC
12507: ST_TO_ADDR
12508: LD_VAR 0 4
12512: PUSH
12513: FOR_TO
12514: IFFALSE 12596
// begin uc_side = side ;
12516: LD_ADDR_OWVAR 20
12520: PUSH
12521: LD_VAR 0 1
12525: ST_TO_ADDR
// uc_nation = nation ;
12526: LD_ADDR_OWVAR 21
12530: PUSH
12531: LD_VAR 0 2
12535: ST_TO_ADDR
// hc_name =  ;
12536: LD_ADDR_OWVAR 26
12540: PUSH
12541: LD_STRING 
12543: ST_TO_ADDR
// hc_gallery =  ;
12544: LD_ADDR_OWVAR 33
12548: PUSH
12549: LD_STRING 
12551: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12552: LD_INT 0
12554: PPUSH
12555: LD_INT 5
12557: PPUSH
12558: LD_VAR 0 8
12562: PPUSH
12563: CALL_OW 380
// un = CreateHuman ;
12567: LD_ADDR_VAR 0 16
12571: PUSH
12572: CALL_OW 44
12576: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12577: LD_VAR 0 16
12581: PPUSH
12582: LD_VAR 0 9
12586: PPUSH
12587: LD_INT 0
12589: PPUSH
12590: CALL_OW 49
// end ;
12594: GO 12513
12596: POP
12597: POP
// for i = 1 to bazookCount do
12598: LD_ADDR_VAR 0 14
12602: PUSH
12603: DOUBLE
12604: LD_INT 1
12606: DEC
12607: ST_TO_ADDR
12608: LD_VAR 0 5
12612: PUSH
12613: FOR_TO
12614: IFFALSE 12696
// begin uc_side = side ;
12616: LD_ADDR_OWVAR 20
12620: PUSH
12621: LD_VAR 0 1
12625: ST_TO_ADDR
// uc_nation = nation ;
12626: LD_ADDR_OWVAR 21
12630: PUSH
12631: LD_VAR 0 2
12635: ST_TO_ADDR
// hc_name =  ;
12636: LD_ADDR_OWVAR 26
12640: PUSH
12641: LD_STRING 
12643: ST_TO_ADDR
// hc_gallery =  ;
12644: LD_ADDR_OWVAR 33
12648: PUSH
12649: LD_STRING 
12651: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12652: LD_INT 0
12654: PPUSH
12655: LD_INT 9
12657: PPUSH
12658: LD_VAR 0 8
12662: PPUSH
12663: CALL_OW 380
// un = CreateHuman ;
12667: LD_ADDR_VAR 0 16
12671: PUSH
12672: CALL_OW 44
12676: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12677: LD_VAR 0 16
12681: PPUSH
12682: LD_VAR 0 9
12686: PPUSH
12687: LD_INT 0
12689: PPUSH
12690: CALL_OW 49
// end ;
12694: GO 12613
12696: POP
12697: POP
// for i = 1 to mortalCount do
12698: LD_ADDR_VAR 0 14
12702: PUSH
12703: DOUBLE
12704: LD_INT 1
12706: DEC
12707: ST_TO_ADDR
12708: LD_VAR 0 6
12712: PUSH
12713: FOR_TO
12714: IFFALSE 12796
// begin uc_side = side ;
12716: LD_ADDR_OWVAR 20
12720: PUSH
12721: LD_VAR 0 1
12725: ST_TO_ADDR
// uc_nation = nation ;
12726: LD_ADDR_OWVAR 21
12730: PUSH
12731: LD_VAR 0 2
12735: ST_TO_ADDR
// hc_name =  ;
12736: LD_ADDR_OWVAR 26
12740: PUSH
12741: LD_STRING 
12743: ST_TO_ADDR
// hc_gallery =  ;
12744: LD_ADDR_OWVAR 33
12748: PUSH
12749: LD_STRING 
12751: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12752: LD_INT 0
12754: PPUSH
12755: LD_INT 8
12757: PPUSH
12758: LD_VAR 0 8
12762: PPUSH
12763: CALL_OW 380
// un = CreateHuman ;
12767: LD_ADDR_VAR 0 16
12771: PUSH
12772: CALL_OW 44
12776: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12777: LD_VAR 0 16
12781: PPUSH
12782: LD_VAR 0 9
12786: PPUSH
12787: LD_INT 0
12789: PPUSH
12790: CALL_OW 49
// end ;
12794: GO 12713
12796: POP
12797: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12798: LD_ADDR_VAR 0 19
12802: PUSH
12803: LD_INT 22
12805: PUSH
12806: LD_VAR 0 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 2
12817: PUSH
12818: LD_INT 25
12820: PUSH
12821: LD_INT 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 5
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 25
12840: PUSH
12841: LD_INT 8
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 25
12850: PUSH
12851: LD_INT 9
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PPUSH
12869: CALL_OW 69
12873: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12874: LD_ADDR_VAR 0 18
12878: PUSH
12879: LD_INT 22
12881: PUSH
12882: LD_VAR 0 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 25
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: ST_TO_ADDR
// for i in medic_list do
12910: LD_ADDR_VAR 0 14
12914: PUSH
12915: LD_VAR 0 18
12919: PUSH
12920: FOR_IN
12921: IFFALSE 12939
// ComMoveToArea ( i , healArea ) ;
12923: LD_VAR 0 14
12927: PPUSH
12928: LD_VAR 0 10
12932: PPUSH
12933: CALL_OW 113
12937: GO 12920
12939: POP
12940: POP
// if strategy = 1 then
12941: LD_VAR 0 12
12945: PUSH
12946: LD_INT 1
12948: EQUAL
12949: IFFALSE 13495
// begin repeat wait ( 0 0$3 ) ;
12951: LD_INT 105
12953: PPUSH
12954: CALL_OW 67
// for i in soldiersOK_list do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: LD_VAR 0 19
12967: PUSH
12968: FOR_IN
12969: IFFALSE 13033
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12971: LD_VAR 0 14
12975: PPUSH
12976: LD_INT 91
12978: PPUSH
12979: LD_INT 63
12981: PPUSH
12982: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12986: LD_VAR 0 14
12990: PPUSH
12991: LD_INT 101
12993: PPUSH
12994: LD_INT 53
12996: PPUSH
12997: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13001: LD_VAR 0 14
13005: PPUSH
13006: LD_INT 75
13008: PPUSH
13009: LD_INT 23
13011: PPUSH
13012: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13016: LD_VAR 0 14
13020: PPUSH
13021: LD_INT 78
13023: PPUSH
13024: LD_INT 8
13026: PPUSH
13027: CALL_OW 174
// end ;
13031: GO 12968
13033: POP
13034: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13035: LD_INT 12
13037: PPUSH
13038: LD_INT 22
13040: PUSH
13041: LD_VAR 0 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 70
13054: PUSH
13055: LD_INT 2
13057: GREATER
13058: IFFALSE 12951
// repeat wait ( 0 0$1 ) ;
13060: LD_INT 35
13062: PPUSH
13063: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13067: LD_ADDR_VAR 0 17
13071: PUSH
13072: LD_INT 22
13074: PUSH
13075: LD_VAR 0 1
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: LD_INT 1
13086: PUSH
13087: LD_INT 3
13089: PUSH
13090: LD_INT 24
13092: PUSH
13093: LD_INT 550
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 24
13106: PUSH
13107: LD_INT 250
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13128: LD_ADDR_VAR 0 19
13132: PUSH
13133: LD_INT 22
13135: PUSH
13136: LD_VAR 0 1
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 25
13170: PUSH
13171: LD_INT 8
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 9
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 24
13197: PUSH
13198: LD_INT 1000
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: PPUSH
13210: CALL_OW 69
13214: ST_TO_ADDR
// if medicCount > 0 then
13215: LD_VAR 0 7
13219: PUSH
13220: LD_INT 0
13222: GREATER
13223: IFFALSE 13297
// begin if damageUnit_list > 0 then
13225: LD_VAR 0 17
13229: PUSH
13230: LD_INT 0
13232: GREATER
13233: IFFALSE 13297
// begin for i in damageUnit_list do
13235: LD_ADDR_VAR 0 14
13239: PUSH
13240: LD_VAR 0 17
13244: PUSH
13245: FOR_IN
13246: IFFALSE 13295
// begin ComMoveToArea ( i , healArea ) ;
13248: LD_VAR 0 14
13252: PPUSH
13253: LD_VAR 0 10
13257: PPUSH
13258: CALL_OW 113
// for j in medic_list do
13262: LD_ADDR_VAR 0 15
13266: PUSH
13267: LD_VAR 0 18
13271: PUSH
13272: FOR_IN
13273: IFFALSE 13291
// AddComHeal ( j , i ) ;
13275: LD_VAR 0 15
13279: PPUSH
13280: LD_VAR 0 14
13284: PPUSH
13285: CALL_OW 188
13289: GO 13272
13291: POP
13292: POP
// end ;
13293: GO 13245
13295: POP
13296: POP
// end ; end ; for i in soldiersOK_list do
13297: LD_ADDR_VAR 0 14
13301: PUSH
13302: LD_VAR 0 19
13306: PUSH
13307: FOR_IN
13308: IFFALSE 13484
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13310: LD_ADDR_VAR 0 22
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_VAR 0 11
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PPUSH
13332: LD_VAR 0 14
13336: PPUSH
13337: CALL_OW 74
13341: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13342: LD_ADDR_VAR 0 23
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_VAR 0 11
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: LD_INT 59
13364: PUSH
13365: EMPTY
13366: LIST
13367: PUSH
13368: LD_INT 21
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 21
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: PPUSH
13401: CALL_OW 69
13405: PPUSH
13406: LD_VAR 0 14
13410: PPUSH
13411: CALL_OW 74
13415: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13416: LD_VAR 0 14
13420: PPUSH
13421: LD_VAR 0 22
13425: PPUSH
13426: CALL_OW 296
13430: PUSH
13431: LD_INT 6
13433: PLUS
13434: PUSH
13435: LD_VAR 0 14
13439: PPUSH
13440: LD_VAR 0 23
13444: PPUSH
13445: CALL_OW 296
13449: LESS
13450: IFFALSE 13468
// begin ComAttackUnit ( i , target1 ) ;
13452: LD_VAR 0 14
13456: PPUSH
13457: LD_VAR 0 22
13461: PPUSH
13462: CALL_OW 115
// end else
13466: GO 13482
// begin ComAttackUnit ( i , target2 ) ;
13468: LD_VAR 0 14
13472: PPUSH
13473: LD_VAR 0 23
13477: PPUSH
13478: CALL_OW 115
// end ; end ;
13482: GO 13307
13484: POP
13485: POP
// until soldiersOK_list = [ ] ;
13486: LD_VAR 0 19
13490: PUSH
13491: EMPTY
13492: EQUAL
13493: IFFALSE 13060
// end ; if strategy = 2 then
13495: LD_VAR 0 12
13499: PUSH
13500: LD_INT 2
13502: EQUAL
13503: IFFALSE 14019
// begin repeat wait ( 0 0$1 ) ;
13505: LD_INT 35
13507: PPUSH
13508: CALL_OW 67
// for i in soldiersOK_list do
13512: LD_ADDR_VAR 0 14
13516: PUSH
13517: LD_VAR 0 19
13521: PUSH
13522: FOR_IN
13523: IFFALSE 13557
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13525: LD_VAR 0 14
13529: PPUSH
13530: LD_INT 91
13532: PPUSH
13533: LD_INT 63
13535: PPUSH
13536: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13540: LD_VAR 0 14
13544: PPUSH
13545: LD_INT 75
13547: PPUSH
13548: LD_INT 33
13550: PPUSH
13551: CALL_OW 174
// end ;
13555: GO 13522
13557: POP
13558: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13559: LD_INT 13
13561: PPUSH
13562: LD_INT 22
13564: PUSH
13565: LD_VAR 0 1
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PPUSH
13574: CALL_OW 70
13578: PUSH
13579: LD_INT 2
13581: GREATER
13582: IFFALSE 13505
// repeat wait ( 0 0$3 ) ;
13584: LD_INT 105
13586: PPUSH
13587: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13591: LD_ADDR_VAR 0 17
13595: PUSH
13596: LD_INT 22
13598: PUSH
13599: LD_VAR 0 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: LD_INT 3
13613: PUSH
13614: LD_INT 24
13616: PUSH
13617: LD_INT 550
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 24
13630: PUSH
13631: LD_INT 250
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13652: LD_ADDR_VAR 0 19
13656: PUSH
13657: LD_INT 22
13659: PUSH
13660: LD_VAR 0 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: LD_INT 2
13671: PUSH
13672: LD_INT 25
13674: PUSH
13675: LD_INT 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 25
13684: PUSH
13685: LD_INT 5
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 25
13694: PUSH
13695: LD_INT 8
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 25
13704: PUSH
13705: LD_INT 9
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 24
13721: PUSH
13722: LD_INT 1000
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 69
13738: ST_TO_ADDR
// if medicCount > 0 then
13739: LD_VAR 0 7
13743: PUSH
13744: LD_INT 0
13746: GREATER
13747: IFFALSE 13821
// begin if damageUnit_list > 0 then
13749: LD_VAR 0 17
13753: PUSH
13754: LD_INT 0
13756: GREATER
13757: IFFALSE 13821
// begin for i in damageUnit_list do
13759: LD_ADDR_VAR 0 14
13763: PUSH
13764: LD_VAR 0 17
13768: PUSH
13769: FOR_IN
13770: IFFALSE 13819
// begin ComMoveToArea ( i , healArea ) ;
13772: LD_VAR 0 14
13776: PPUSH
13777: LD_VAR 0 10
13781: PPUSH
13782: CALL_OW 113
// for j in medic_list do
13786: LD_ADDR_VAR 0 15
13790: PUSH
13791: LD_VAR 0 18
13795: PUSH
13796: FOR_IN
13797: IFFALSE 13815
// AddComHeal ( j , i ) ;
13799: LD_VAR 0 15
13803: PPUSH
13804: LD_VAR 0 14
13808: PPUSH
13809: CALL_OW 188
13813: GO 13796
13815: POP
13816: POP
// end ;
13817: GO 13769
13819: POP
13820: POP
// end ; end ; for i in soldiersOK_list do
13821: LD_ADDR_VAR 0 14
13825: PUSH
13826: LD_VAR 0 19
13830: PUSH
13831: FOR_IN
13832: IFFALSE 14008
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13834: LD_ADDR_VAR 0 22
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_VAR 0 11
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PPUSH
13851: CALL_OW 69
13855: PPUSH
13856: LD_VAR 0 14
13860: PPUSH
13861: CALL_OW 74
13865: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13866: LD_ADDR_VAR 0 23
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_VAR 0 11
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 2
13885: PUSH
13886: LD_INT 59
13888: PUSH
13889: EMPTY
13890: LIST
13891: PUSH
13892: LD_INT 21
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: EMPTY
13923: LIST
13924: PPUSH
13925: CALL_OW 69
13929: PPUSH
13930: LD_VAR 0 14
13934: PPUSH
13935: CALL_OW 74
13939: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13940: LD_VAR 0 14
13944: PPUSH
13945: LD_VAR 0 22
13949: PPUSH
13950: CALL_OW 296
13954: PUSH
13955: LD_INT 6
13957: PLUS
13958: PUSH
13959: LD_VAR 0 14
13963: PPUSH
13964: LD_VAR 0 23
13968: PPUSH
13969: CALL_OW 296
13973: LESS
13974: IFFALSE 13992
// begin ComAttackUnit ( i , target1 ) ;
13976: LD_VAR 0 14
13980: PPUSH
13981: LD_VAR 0 22
13985: PPUSH
13986: CALL_OW 115
// end else
13990: GO 14006
// begin ComAttackUnit ( i , target2 ) ;
13992: LD_VAR 0 14
13996: PPUSH
13997: LD_VAR 0 23
14001: PPUSH
14002: CALL_OW 115
// end ; end ;
14006: GO 13831
14008: POP
14009: POP
// until soldiersOK_list = [ ] ;
14010: LD_VAR 0 19
14014: PUSH
14015: EMPTY
14016: EQUAL
14017: IFFALSE 13584
// end ; if strategy = 3 then
14019: LD_VAR 0 12
14023: PUSH
14024: LD_INT 3
14026: EQUAL
14027: IFFALSE 14573
// begin repeat wait ( 0 0$3 ) ;
14029: LD_INT 105
14031: PPUSH
14032: CALL_OW 67
// for i in soldiersOK_list do
14036: LD_ADDR_VAR 0 14
14040: PUSH
14041: LD_VAR 0 19
14045: PUSH
14046: FOR_IN
14047: IFFALSE 14111
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14049: LD_VAR 0 14
14053: PPUSH
14054: LD_INT 63
14056: PPUSH
14057: LD_INT 71
14059: PPUSH
14060: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14064: LD_VAR 0 14
14068: PPUSH
14069: LD_INT 35
14071: PPUSH
14072: LD_INT 44
14074: PPUSH
14075: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14079: LD_VAR 0 14
14083: PPUSH
14084: LD_INT 23
14086: PPUSH
14087: LD_INT 18
14089: PPUSH
14090: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14094: LD_VAR 0 14
14098: PPUSH
14099: LD_INT 26
14101: PPUSH
14102: LD_INT 12
14104: PPUSH
14105: CALL_OW 174
// end ;
14109: GO 14046
14111: POP
14112: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14113: LD_INT 14
14115: PPUSH
14116: LD_INT 22
14118: PUSH
14119: LD_VAR 0 1
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 70
14132: PUSH
14133: LD_INT 2
14135: GREATER
14136: IFFALSE 14029
// repeat wait ( 0 0$1 ) ;
14138: LD_INT 35
14140: PPUSH
14141: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14145: LD_ADDR_VAR 0 17
14149: PUSH
14150: LD_INT 22
14152: PUSH
14153: LD_VAR 0 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 1
14164: PUSH
14165: LD_INT 3
14167: PUSH
14168: LD_INT 24
14170: PUSH
14171: LD_INT 550
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 24
14184: PUSH
14185: LD_INT 250
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14206: LD_ADDR_VAR 0 19
14210: PUSH
14211: LD_INT 22
14213: PUSH
14214: LD_VAR 0 1
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 2
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 25
14238: PUSH
14239: LD_INT 5
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 25
14248: PUSH
14249: LD_INT 8
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 25
14258: PUSH
14259: LD_INT 9
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 24
14275: PUSH
14276: LD_INT 1000
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: PPUSH
14288: CALL_OW 69
14292: ST_TO_ADDR
// if medicCount > 0 then
14293: LD_VAR 0 7
14297: PUSH
14298: LD_INT 0
14300: GREATER
14301: IFFALSE 14375
// begin if damageUnit_list > 0 then
14303: LD_VAR 0 17
14307: PUSH
14308: LD_INT 0
14310: GREATER
14311: IFFALSE 14375
// begin for i in damageUnit_list do
14313: LD_ADDR_VAR 0 14
14317: PUSH
14318: LD_VAR 0 17
14322: PUSH
14323: FOR_IN
14324: IFFALSE 14373
// begin ComMoveToArea ( i , healArea ) ;
14326: LD_VAR 0 14
14330: PPUSH
14331: LD_VAR 0 10
14335: PPUSH
14336: CALL_OW 113
// for j in medic_list do
14340: LD_ADDR_VAR 0 15
14344: PUSH
14345: LD_VAR 0 18
14349: PUSH
14350: FOR_IN
14351: IFFALSE 14369
// AddComHeal ( j , i ) ;
14353: LD_VAR 0 15
14357: PPUSH
14358: LD_VAR 0 14
14362: PPUSH
14363: CALL_OW 188
14367: GO 14350
14369: POP
14370: POP
// end ;
14371: GO 14323
14373: POP
14374: POP
// end ; end ; for i in soldiersOK_list do
14375: LD_ADDR_VAR 0 14
14379: PUSH
14380: LD_VAR 0 19
14384: PUSH
14385: FOR_IN
14386: IFFALSE 14562
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14388: LD_ADDR_VAR 0 22
14392: PUSH
14393: LD_INT 22
14395: PUSH
14396: LD_VAR 0 11
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 69
14409: PPUSH
14410: LD_VAR 0 14
14414: PPUSH
14415: CALL_OW 74
14419: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14420: LD_ADDR_VAR 0 23
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_VAR 0 11
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 2
14439: PUSH
14440: LD_INT 59
14442: PUSH
14443: EMPTY
14444: LIST
14445: PUSH
14446: LD_INT 21
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 21
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: PPUSH
14479: CALL_OW 69
14483: PPUSH
14484: LD_VAR 0 14
14488: PPUSH
14489: CALL_OW 74
14493: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14494: LD_VAR 0 14
14498: PPUSH
14499: LD_VAR 0 22
14503: PPUSH
14504: CALL_OW 296
14508: PUSH
14509: LD_INT 6
14511: PLUS
14512: PUSH
14513: LD_VAR 0 14
14517: PPUSH
14518: LD_VAR 0 23
14522: PPUSH
14523: CALL_OW 296
14527: LESS
14528: IFFALSE 14546
// begin ComAttackUnit ( i , target1 ) ;
14530: LD_VAR 0 14
14534: PPUSH
14535: LD_VAR 0 22
14539: PPUSH
14540: CALL_OW 115
// end else
14544: GO 14560
// begin ComAttackUnit ( i , target2 ) ;
14546: LD_VAR 0 14
14550: PPUSH
14551: LD_VAR 0 23
14555: PPUSH
14556: CALL_OW 115
// end ; end ;
14560: GO 14385
14562: POP
14563: POP
// until soldiersOK_list = [ ] ;
14564: LD_VAR 0 19
14568: PUSH
14569: EMPTY
14570: EQUAL
14571: IFFALSE 14138
// end ; end ;
14573: LD_VAR 0 13
14577: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14578: LD_INT 0
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
14589: PPUSH
14590: PPUSH
// amChassisTab = [ ] ;
14591: LD_ADDR_VAR 0 19
14595: PUSH
14596: EMPTY
14597: ST_TO_ADDR
// arChassisTab = [ ] ;
14598: LD_ADDR_VAR 0 18
14602: PUSH
14603: EMPTY
14604: ST_TO_ADDR
// ruChassisTab = [ ] ;
14605: LD_ADDR_VAR 0 17
14609: PUSH
14610: EMPTY
14611: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14612: LD_INT 35
14614: PPUSH
14615: CALL_OW 67
// if nation = 1 then
14619: LD_VAR 0 5
14623: PUSH
14624: LD_INT 1
14626: EQUAL
14627: IFFALSE 15118
// begin uc_side = side ;
14629: LD_ADDR_OWVAR 20
14633: PUSH
14634: LD_VAR 0 2
14638: ST_TO_ADDR
// uc_nation = nation ;
14639: LD_ADDR_OWVAR 21
14643: PUSH
14644: LD_VAR 0 5
14648: ST_TO_ADDR
// vc_engine = vehengine ;
14649: LD_ADDR_OWVAR 39
14653: PUSH
14654: LD_VAR 0 6
14658: ST_TO_ADDR
// vc_control = vehcontrol ;
14659: LD_ADDR_OWVAR 38
14663: PUSH
14664: LD_VAR 0 7
14668: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14669: LD_ADDR_OWVAR 40
14673: PUSH
14674: LD_VAR 0 10
14678: PUSH
14679: LD_INT 1
14681: PPUSH
14682: LD_VAR 0 10
14686: PPUSH
14687: CALL_OW 12
14691: ARRAY
14692: ST_TO_ADDR
// for j = 1 to AMWeapon do
14693: LD_ADDR_VAR 0 14
14697: PUSH
14698: DOUBLE
14699: LD_INT 1
14701: DEC
14702: ST_TO_ADDR
14703: LD_VAR 0 10
14707: PUSH
14708: FOR_TO
14709: IFFALSE 15010
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14711: LD_VAR 0 10
14715: PUSH
14716: LD_VAR 0 14
14720: ARRAY
14721: PUSH
14722: LD_INT 2
14724: EQUAL
14725: PUSH
14726: LD_VAR 0 10
14730: PUSH
14731: LD_VAR 0 14
14735: ARRAY
14736: PUSH
14737: LD_INT 3
14739: EQUAL
14740: OR
14741: IFFALSE 14794
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14743: LD_ADDR_VAR 0 19
14747: PUSH
14748: LD_INT 1
14750: PUSH
14751: LD_INT 2
14753: PUSH
14754: LD_INT 3
14756: PUSH
14757: LD_INT 4
14759: PUSH
14760: LD_INT 5
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14770: LD_ADDR_OWVAR 37
14774: PUSH
14775: LD_VAR 0 19
14779: PUSH
14780: LD_INT 1
14782: PPUSH
14783: LD_VAR 0 19
14787: PPUSH
14788: CALL_OW 12
14792: ARRAY
14793: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14794: LD_VAR 0 10
14798: PUSH
14799: LD_VAR 0 14
14803: ARRAY
14804: PUSH
14805: LD_INT 4
14807: EQUAL
14808: PUSH
14809: LD_VAR 0 10
14813: PUSH
14814: LD_VAR 0 14
14818: ARRAY
14819: PUSH
14820: LD_INT 5
14822: EQUAL
14823: OR
14824: PUSH
14825: LD_VAR 0 10
14829: PUSH
14830: LD_VAR 0 14
14834: ARRAY
14835: PUSH
14836: LD_INT 9
14838: EQUAL
14839: OR
14840: PUSH
14841: LD_VAR 0 10
14845: PUSH
14846: LD_VAR 0 14
14850: ARRAY
14851: PUSH
14852: LD_INT 11
14854: EQUAL
14855: OR
14856: PUSH
14857: LD_VAR 0 10
14861: PUSH
14862: LD_VAR 0 14
14866: ARRAY
14867: PUSH
14868: LD_INT 7
14870: EQUAL
14871: OR
14872: IFFALSE 14921
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14874: LD_ADDR_VAR 0 19
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: LD_INT 4
14887: PUSH
14888: LD_INT 5
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14897: LD_ADDR_OWVAR 37
14901: PUSH
14902: LD_VAR 0 19
14906: PUSH
14907: LD_INT 1
14909: PPUSH
14910: LD_VAR 0 19
14914: PPUSH
14915: CALL_OW 12
14919: ARRAY
14920: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14921: LD_VAR 0 10
14925: PUSH
14926: LD_VAR 0 14
14930: ARRAY
14931: PUSH
14932: LD_INT 8
14934: EQUAL
14935: PUSH
14936: LD_VAR 0 10
14940: PUSH
14941: LD_VAR 0 14
14945: ARRAY
14946: PUSH
14947: LD_INT 6
14949: EQUAL
14950: OR
14951: PUSH
14952: LD_VAR 0 10
14956: PUSH
14957: LD_VAR 0 14
14961: ARRAY
14962: PUSH
14963: LD_INT 10
14965: EQUAL
14966: OR
14967: IFFALSE 15008
// begin amChassisTab = [ 4 , 5 ] ;
14969: LD_ADDR_VAR 0 19
14973: PUSH
14974: LD_INT 4
14976: PUSH
14977: LD_INT 5
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14984: LD_ADDR_OWVAR 37
14988: PUSH
14989: LD_VAR 0 19
14993: PUSH
14994: LD_INT 1
14996: PPUSH
14997: LD_VAR 0 19
15001: PPUSH
15002: CALL_OW 12
15006: ARRAY
15007: ST_TO_ADDR
// end ; end ;
15008: GO 14708
15010: POP
15011: POP
// veh = CreateVehicle ;
15012: LD_ADDR_VAR 0 16
15016: PUSH
15017: CALL_OW 45
15021: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15022: LD_VAR 0 16
15026: PPUSH
15027: LD_VAR 0 1
15031: PPUSH
15032: LD_INT 0
15034: PPUSH
15035: CALL_OW 49
// if vehControl = 1 then
15039: LD_VAR 0 7
15043: PUSH
15044: LD_INT 1
15046: EQUAL
15047: IFFALSE 15104
// begin hc_gallery =  ;
15049: LD_ADDR_OWVAR 33
15053: PUSH
15054: LD_STRING 
15056: ST_TO_ADDR
// hc_name =  ;
15057: LD_ADDR_OWVAR 26
15061: PUSH
15062: LD_STRING 
15064: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15065: LD_INT 0
15067: PPUSH
15068: LD_INT 3
15070: PPUSH
15071: LD_VAR 0 4
15075: PPUSH
15076: CALL_OW 380
// un = CreateHuman ;
15080: LD_ADDR_VAR 0 15
15084: PUSH
15085: CALL_OW 44
15089: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15090: LD_VAR 0 15
15094: PPUSH
15095: LD_VAR 0 16
15099: PPUSH
15100: CALL_OW 52
// end ; i = i + 1 ;
15104: LD_ADDR_VAR 0 13
15108: PUSH
15109: LD_VAR 0 13
15113: PUSH
15114: LD_INT 1
15116: PLUS
15117: ST_TO_ADDR
// end ; if nation = 2 then
15118: LD_VAR 0 5
15122: PUSH
15123: LD_INT 2
15125: EQUAL
15126: IFFALSE 15550
// begin uc_side = side ;
15128: LD_ADDR_OWVAR 20
15132: PUSH
15133: LD_VAR 0 2
15137: ST_TO_ADDR
// uc_nation = nation ;
15138: LD_ADDR_OWVAR 21
15142: PUSH
15143: LD_VAR 0 5
15147: ST_TO_ADDR
// vc_engine = vehengine ;
15148: LD_ADDR_OWVAR 39
15152: PUSH
15153: LD_VAR 0 6
15157: ST_TO_ADDR
// vc_control = vehcontrol ;
15158: LD_ADDR_OWVAR 38
15162: PUSH
15163: LD_VAR 0 7
15167: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15168: LD_ADDR_OWVAR 40
15172: PUSH
15173: LD_VAR 0 9
15177: PUSH
15178: LD_INT 1
15180: PPUSH
15181: LD_VAR 0 9
15185: PPUSH
15186: CALL_OW 12
15190: ARRAY
15191: ST_TO_ADDR
// for j = 1 to ARWeapons do
15192: LD_ADDR_VAR 0 14
15196: PUSH
15197: DOUBLE
15198: LD_INT 1
15200: DEC
15201: ST_TO_ADDR
15202: LD_VAR 0 9
15206: PUSH
15207: FOR_TO
15208: IFFALSE 15442
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15210: LD_VAR 0 9
15214: PUSH
15215: LD_VAR 0 14
15219: ARRAY
15220: PUSH
15221: LD_INT 24
15223: EQUAL
15224: PUSH
15225: LD_VAR 0 9
15229: PUSH
15230: LD_VAR 0 14
15234: ARRAY
15235: PUSH
15236: LD_INT 22
15238: EQUAL
15239: OR
15240: PUSH
15241: LD_VAR 0 9
15245: PUSH
15246: LD_VAR 0 14
15250: ARRAY
15251: PUSH
15252: LD_INT 23
15254: EQUAL
15255: OR
15256: PUSH
15257: LD_VAR 0 9
15261: PUSH
15262: LD_VAR 0 14
15266: ARRAY
15267: PUSH
15268: LD_INT 30
15270: EQUAL
15271: OR
15272: IFFALSE 15321
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15274: LD_ADDR_VAR 0 18
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 13
15287: PUSH
15288: LD_INT 14
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15297: LD_ADDR_OWVAR 37
15301: PUSH
15302: LD_VAR 0 18
15306: PUSH
15307: LD_INT 1
15309: PPUSH
15310: LD_VAR 0 18
15314: PPUSH
15315: CALL_OW 12
15319: ARRAY
15320: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15321: LD_VAR 0 9
15325: PUSH
15326: LD_VAR 0 14
15330: ARRAY
15331: PUSH
15332: LD_INT 29
15334: EQUAL
15335: PUSH
15336: LD_VAR 0 9
15340: PUSH
15341: LD_VAR 0 14
15345: ARRAY
15346: PUSH
15347: LD_INT 28
15349: EQUAL
15350: OR
15351: PUSH
15352: LD_VAR 0 9
15356: PUSH
15357: LD_VAR 0 14
15361: ARRAY
15362: PUSH
15363: LD_INT 27
15365: EQUAL
15366: OR
15367: PUSH
15368: LD_VAR 0 9
15372: PUSH
15373: LD_VAR 0 14
15377: ARRAY
15378: PUSH
15379: LD_INT 26
15381: EQUAL
15382: OR
15383: PUSH
15384: LD_VAR 0 9
15388: PUSH
15389: LD_VAR 0 14
15393: ARRAY
15394: PUSH
15395: LD_INT 25
15397: EQUAL
15398: OR
15399: IFFALSE 15440
// begin arChassisTab = [ 13 , 14 ] ;
15401: LD_ADDR_VAR 0 18
15405: PUSH
15406: LD_INT 13
15408: PUSH
15409: LD_INT 14
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15416: LD_ADDR_OWVAR 37
15420: PUSH
15421: LD_VAR 0 18
15425: PUSH
15426: LD_INT 1
15428: PPUSH
15429: LD_VAR 0 18
15433: PPUSH
15434: CALL_OW 12
15438: ARRAY
15439: ST_TO_ADDR
// end ; end ;
15440: GO 15207
15442: POP
15443: POP
// veh = CreateVehicle ;
15444: LD_ADDR_VAR 0 16
15448: PUSH
15449: CALL_OW 45
15453: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15454: LD_VAR 0 16
15458: PPUSH
15459: LD_VAR 0 1
15463: PPUSH
15464: LD_INT 0
15466: PPUSH
15467: CALL_OW 49
// if vehcontrol = 1 then
15471: LD_VAR 0 7
15475: PUSH
15476: LD_INT 1
15478: EQUAL
15479: IFFALSE 15536
// begin hc_gallery =  ;
15481: LD_ADDR_OWVAR 33
15485: PUSH
15486: LD_STRING 
15488: ST_TO_ADDR
// hc_name =  ;
15489: LD_ADDR_OWVAR 26
15493: PUSH
15494: LD_STRING 
15496: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15497: LD_INT 0
15499: PPUSH
15500: LD_INT 3
15502: PPUSH
15503: LD_VAR 0 4
15507: PPUSH
15508: CALL_OW 380
// un = CreateHuman ;
15512: LD_ADDR_VAR 0 15
15516: PUSH
15517: CALL_OW 44
15521: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15522: LD_VAR 0 15
15526: PPUSH
15527: LD_VAR 0 16
15531: PPUSH
15532: CALL_OW 52
// end ; i = i + 1 ;
15536: LD_ADDR_VAR 0 13
15540: PUSH
15541: LD_VAR 0 13
15545: PUSH
15546: LD_INT 1
15548: PLUS
15549: ST_TO_ADDR
// end ; if nation = 3 then
15550: LD_VAR 0 5
15554: PUSH
15555: LD_INT 3
15557: EQUAL
15558: IFFALSE 15950
// begin uc_side = side ;
15560: LD_ADDR_OWVAR 20
15564: PUSH
15565: LD_VAR 0 2
15569: ST_TO_ADDR
// uc_nation = nation ;
15570: LD_ADDR_OWVAR 21
15574: PUSH
15575: LD_VAR 0 5
15579: ST_TO_ADDR
// vc_engine = vehengine ;
15580: LD_ADDR_OWVAR 39
15584: PUSH
15585: LD_VAR 0 6
15589: ST_TO_ADDR
// vc_control = vehcontrol ;
15590: LD_ADDR_OWVAR 38
15594: PUSH
15595: LD_VAR 0 7
15599: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15600: LD_ADDR_OWVAR 40
15604: PUSH
15605: LD_VAR 0 8
15609: PUSH
15610: LD_INT 1
15612: PPUSH
15613: LD_VAR 0 8
15617: PPUSH
15618: CALL_OW 12
15622: ARRAY
15623: ST_TO_ADDR
// for j = 1 to RuWeapons do
15624: LD_ADDR_VAR 0 14
15628: PUSH
15629: DOUBLE
15630: LD_INT 1
15632: DEC
15633: ST_TO_ADDR
15634: LD_VAR 0 8
15638: PUSH
15639: FOR_TO
15640: IFFALSE 15842
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15642: LD_VAR 0 8
15646: PUSH
15647: LD_VAR 0 14
15651: ARRAY
15652: PUSH
15653: LD_INT 42
15655: EQUAL
15656: PUSH
15657: LD_VAR 0 8
15661: PUSH
15662: LD_VAR 0 14
15666: ARRAY
15667: PUSH
15668: LD_INT 43
15670: EQUAL
15671: OR
15672: PUSH
15673: LD_VAR 0 8
15677: PUSH
15678: LD_VAR 0 14
15682: ARRAY
15683: PUSH
15684: LD_INT 44
15686: EQUAL
15687: OR
15688: PUSH
15689: LD_VAR 0 8
15693: PUSH
15694: LD_VAR 0 14
15698: ARRAY
15699: PUSH
15700: LD_INT 45
15702: EQUAL
15703: OR
15704: PUSH
15705: LD_VAR 0 8
15709: PUSH
15710: LD_VAR 0 14
15714: ARRAY
15715: PUSH
15716: LD_INT 49
15718: EQUAL
15719: OR
15720: IFFALSE 15769
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15722: LD_ADDR_VAR 0 17
15726: PUSH
15727: LD_INT 21
15729: PUSH
15730: LD_INT 22
15732: PUSH
15733: LD_INT 23
15735: PUSH
15736: LD_INT 24
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15745: LD_ADDR_OWVAR 37
15749: PUSH
15750: LD_VAR 0 17
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 17
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15769: LD_VAR 0 8
15773: PUSH
15774: LD_VAR 0 14
15778: ARRAY
15779: PUSH
15780: LD_INT 46
15782: EQUAL
15783: PUSH
15784: LD_VAR 0 8
15788: PUSH
15789: LD_VAR 0 14
15793: ARRAY
15794: PUSH
15795: LD_INT 47
15797: EQUAL
15798: OR
15799: IFFALSE 15840
// begin ruChassisTab = [ 23 , 24 ] ;
15801: LD_ADDR_VAR 0 17
15805: PUSH
15806: LD_INT 23
15808: PUSH
15809: LD_INT 24
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15816: LD_ADDR_OWVAR 37
15820: PUSH
15821: LD_VAR 0 17
15825: PUSH
15826: LD_INT 1
15828: PPUSH
15829: LD_VAR 0 17
15833: PPUSH
15834: CALL_OW 12
15838: ARRAY
15839: ST_TO_ADDR
// end ; end ;
15840: GO 15639
15842: POP
15843: POP
// veh = CreateVehicle ;
15844: LD_ADDR_VAR 0 16
15848: PUSH
15849: CALL_OW 45
15853: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15854: LD_VAR 0 16
15858: PPUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: LD_INT 0
15866: PPUSH
15867: CALL_OW 49
// if vehcontrol = 1 then
15871: LD_VAR 0 7
15875: PUSH
15876: LD_INT 1
15878: EQUAL
15879: IFFALSE 15936
// begin hc_gallery =  ;
15881: LD_ADDR_OWVAR 33
15885: PUSH
15886: LD_STRING 
15888: ST_TO_ADDR
// hc_name =  ;
15889: LD_ADDR_OWVAR 26
15893: PUSH
15894: LD_STRING 
15896: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15897: LD_INT 0
15899: PPUSH
15900: LD_INT 3
15902: PPUSH
15903: LD_VAR 0 4
15907: PPUSH
15908: CALL_OW 380
// un = CreateHuman ;
15912: LD_ADDR_VAR 0 15
15916: PUSH
15917: CALL_OW 44
15921: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15922: LD_VAR 0 15
15926: PPUSH
15927: LD_VAR 0 16
15931: PPUSH
15932: CALL_OW 52
// end ; i = i + 1 ;
15936: LD_ADDR_VAR 0 13
15940: PUSH
15941: LD_VAR 0 13
15945: PUSH
15946: LD_INT 1
15948: PLUS
15949: ST_TO_ADDR
// end ; until i = vehCount ;
15950: LD_VAR 0 13
15954: PUSH
15955: LD_VAR 0 3
15959: EQUAL
15960: IFFALSE 14612
// repeat wait ( 0 0$1 ) ;
15962: LD_INT 35
15964: PPUSH
15965: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15969: LD_ADDR_VAR 0 20
15973: PUSH
15974: LD_INT 22
15976: PUSH
15977: LD_VAR 0 2
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 21
15988: PUSH
15989: LD_INT 2
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 24
15998: PUSH
15999: LD_INT 250
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: ST_TO_ADDR
// if vehicleOK_list > 0 then
16016: LD_VAR 0 20
16020: PUSH
16021: LD_INT 0
16023: GREATER
16024: IFFALSE 16215
// begin for i in vehicleOK_list do
16026: LD_ADDR_VAR 0 13
16030: PUSH
16031: LD_VAR 0 20
16035: PUSH
16036: FOR_IN
16037: IFFALSE 16213
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16039: LD_ADDR_VAR 0 21
16043: PUSH
16044: LD_INT 22
16046: PUSH
16047: LD_VAR 0 11
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PPUSH
16056: CALL_OW 69
16060: PPUSH
16061: LD_VAR 0 13
16065: PPUSH
16066: CALL_OW 74
16070: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16071: LD_ADDR_VAR 0 22
16075: PUSH
16076: LD_INT 22
16078: PUSH
16079: LD_VAR 0 11
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 2
16090: PUSH
16091: LD_INT 59
16093: PUSH
16094: EMPTY
16095: LIST
16096: PUSH
16097: LD_INT 21
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 2
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: EMPTY
16128: LIST
16129: PPUSH
16130: CALL_OW 69
16134: PPUSH
16135: LD_VAR 0 13
16139: PPUSH
16140: CALL_OW 74
16144: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16145: LD_VAR 0 13
16149: PPUSH
16150: LD_VAR 0 21
16154: PPUSH
16155: CALL_OW 296
16159: PUSH
16160: LD_INT 6
16162: PLUS
16163: PUSH
16164: LD_VAR 0 13
16168: PPUSH
16169: LD_VAR 0 22
16173: PPUSH
16174: CALL_OW 296
16178: LESS
16179: IFFALSE 16197
// begin ComAttackUnit ( i , target1 ) ;
16181: LD_VAR 0 13
16185: PPUSH
16186: LD_VAR 0 21
16190: PPUSH
16191: CALL_OW 115
// end else
16195: GO 16211
// begin ComAttackUnit ( i , target2 ) ;
16197: LD_VAR 0 13
16201: PPUSH
16202: LD_VAR 0 22
16206: PPUSH
16207: CALL_OW 115
// end ; end ;
16211: GO 16036
16213: POP
16214: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16215: LD_INT 22
16217: PUSH
16218: LD_VAR 0 2
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 21
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 24
16239: PUSH
16240: LD_INT 250
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: PUSH
16257: LD_INT 0
16259: EQUAL
16260: IFFALSE 15962
// end ;
16262: LD_VAR 0 12
16266: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16267: LD_INT 0
16269: PPUSH
16270: PPUSH
16271: PPUSH
16272: PPUSH
16273: PPUSH
16274: PPUSH
16275: PPUSH
16276: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16277: LD_ADDR_VAR 0 7
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_VAR 0 1
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 1
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: LD_INT 24
16302: PUSH
16303: LD_INT 550
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 24
16316: PUSH
16317: LD_INT 250
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 69
16337: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16338: LD_ADDR_VAR 0 8
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_VAR 0 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: LD_INT 25
16360: PUSH
16361: LD_INT 1
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 25
16370: PUSH
16371: LD_INT 5
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 25
16380: PUSH
16381: LD_INT 8
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 25
16390: PUSH
16391: LD_INT 9
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 24
16407: PUSH
16408: LD_INT 1000
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: PPUSH
16420: CALL_OW 69
16424: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16425: LD_ADDR_VAR 0 9
16429: PUSH
16430: LD_INT 22
16432: PUSH
16433: LD_VAR 0 1
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 25
16444: PUSH
16445: LD_INT 4
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: ST_TO_ADDR
// if medicCount > 0 then
16461: LD_VAR 0 9
16465: PUSH
16466: LD_INT 0
16468: GREATER
16469: IFFALSE 16543
// begin if damageUnit_list > 0 then
16471: LD_VAR 0 7
16475: PUSH
16476: LD_INT 0
16478: GREATER
16479: IFFALSE 16543
// begin for i in damageUnit_list do
16481: LD_ADDR_VAR 0 5
16485: PUSH
16486: LD_VAR 0 7
16490: PUSH
16491: FOR_IN
16492: IFFALSE 16541
// begin ComMoveToArea ( i , healArea ) ;
16494: LD_VAR 0 5
16498: PPUSH
16499: LD_VAR 0 2
16503: PPUSH
16504: CALL_OW 113
// for j in medicCount do
16508: LD_ADDR_VAR 0 6
16512: PUSH
16513: LD_VAR 0 9
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16537
// AddComHeal ( j , i ) ;
16521: LD_VAR 0 6
16525: PPUSH
16526: LD_VAR 0 5
16530: PPUSH
16531: CALL_OW 188
16535: GO 16518
16537: POP
16538: POP
// end ;
16539: GO 16491
16541: POP
16542: POP
// end ; end ; if soldiersOK_list > 0 then
16543: LD_VAR 0 8
16547: PUSH
16548: LD_INT 0
16550: GREATER
16551: IFFALSE 16742
// begin for i in soldiersOK_list do
16553: LD_ADDR_VAR 0 5
16557: PUSH
16558: LD_VAR 0 8
16562: PUSH
16563: FOR_IN
16564: IFFALSE 16740
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16566: LD_ADDR_VAR 0 10
16570: PUSH
16571: LD_INT 22
16573: PUSH
16574: LD_VAR 0 3
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PPUSH
16583: CALL_OW 69
16587: PPUSH
16588: LD_VAR 0 5
16592: PPUSH
16593: CALL_OW 74
16597: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16598: LD_ADDR_VAR 0 11
16602: PUSH
16603: LD_INT 22
16605: PUSH
16606: LD_VAR 0 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 2
16617: PUSH
16618: LD_INT 59
16620: PUSH
16621: EMPTY
16622: LIST
16623: PUSH
16624: LD_INT 21
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 21
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: PPUSH
16662: LD_VAR 0 5
16666: PPUSH
16667: CALL_OW 74
16671: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16672: LD_VAR 0 5
16676: PPUSH
16677: LD_VAR 0 10
16681: PPUSH
16682: CALL_OW 296
16686: PUSH
16687: LD_INT 8
16689: PLUS
16690: PUSH
16691: LD_VAR 0 5
16695: PPUSH
16696: LD_VAR 0 11
16700: PPUSH
16701: CALL_OW 296
16705: LESS
16706: IFFALSE 16724
// begin ComAttackUnit ( i , target1 ) ;
16708: LD_VAR 0 5
16712: PPUSH
16713: LD_VAR 0 10
16717: PPUSH
16718: CALL_OW 115
// end else
16722: GO 16738
// begin ComAttackUnit ( i , target2 ) ;
16724: LD_VAR 0 5
16728: PPUSH
16729: LD_VAR 0 11
16733: PPUSH
16734: CALL_OW 115
// end ; end ;
16738: GO 16563
16740: POP
16741: POP
// end ; end ;
16742: LD_VAR 0 4
16746: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16747: LD_INT 0
16749: PPUSH
16750: PPUSH
// list := [ ] ;
16751: LD_ADDR_VAR 0 5
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// case d of 0 :
16758: LD_VAR 0 3
16762: PUSH
16763: LD_INT 0
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16904
16771: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16772: LD_ADDR_VAR 0 5
16776: PUSH
16777: LD_VAR 0 1
16781: PUSH
16782: LD_INT 4
16784: MINUS
16785: PUSH
16786: LD_VAR 0 2
16790: PUSH
16791: LD_INT 4
16793: MINUS
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: PUSH
16803: LD_VAR 0 1
16807: PUSH
16808: LD_INT 3
16810: MINUS
16811: PUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: LD_VAR 0 1
16829: PUSH
16830: LD_INT 4
16832: PLUS
16833: PUSH
16834: LD_VAR 0 2
16838: PUSH
16839: LD_INT 4
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: LD_VAR 0 1
16851: PUSH
16852: LD_INT 3
16854: PLUS
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: LD_INT 3
16863: PLUS
16864: PUSH
16865: LD_INT 5
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: PUSH
16873: LD_VAR 0 1
16877: PUSH
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 4
16885: PLUS
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: ST_TO_ADDR
// end ; 1 :
16902: GO 17602
16904: LD_INT 1
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 17045
16912: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 1
16922: PUSH
16923: LD_VAR 0 2
16927: PUSH
16928: LD_INT 4
16930: MINUS
16931: PUSH
16932: LD_INT 3
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: LD_VAR 0 1
16944: PUSH
16945: LD_INT 3
16947: MINUS
16948: PUSH
16949: LD_VAR 0 2
16953: PUSH
16954: LD_INT 3
16956: MINUS
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: LD_VAR 0 1
16970: PUSH
16971: LD_INT 4
16973: MINUS
16974: PUSH
16975: LD_VAR 0 2
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: PUSH
16988: LD_VAR 0 1
16992: PUSH
16993: LD_VAR 0 2
16997: PUSH
16998: LD_INT 3
17000: PLUS
17001: PUSH
17002: LD_INT 0
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: LD_VAR 0 1
17014: PUSH
17015: LD_INT 4
17017: PLUS
17018: PUSH
17019: LD_VAR 0 2
17023: PUSH
17024: LD_INT 4
17026: PLUS
17027: PUSH
17028: LD_INT 5
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: ST_TO_ADDR
// end ; 2 :
17043: GO 17602
17045: LD_INT 2
17047: DOUBLE
17048: EQUAL
17049: IFTRUE 17053
17051: GO 17182
17053: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17054: LD_ADDR_VAR 0 5
17058: PUSH
17059: LD_VAR 0 1
17063: PUSH
17064: LD_VAR 0 2
17068: PUSH
17069: LD_INT 3
17071: MINUS
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_VAR 0 1
17085: PUSH
17086: LD_INT 4
17088: PLUS
17089: PUSH
17090: LD_VAR 0 2
17094: PUSH
17095: LD_INT 4
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: LD_VAR 0 1
17107: PUSH
17108: LD_VAR 0 2
17112: PUSH
17113: LD_INT 4
17115: PLUS
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: PUSH
17125: LD_VAR 0 1
17129: PUSH
17130: LD_INT 3
17132: MINUS
17133: PUSH
17134: LD_VAR 0 2
17138: PUSH
17139: LD_INT 1
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: LD_VAR 0 1
17151: PUSH
17152: LD_INT 4
17154: MINUS
17155: PUSH
17156: LD_VAR 0 2
17160: PUSH
17161: LD_INT 4
17163: MINUS
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: ST_TO_ADDR
// end ; 3 :
17180: GO 17602
17182: LD_INT 3
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17323
17190: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17191: LD_ADDR_VAR 0 5
17195: PUSH
17196: LD_VAR 0 1
17200: PUSH
17201: LD_INT 3
17203: PLUS
17204: PUSH
17205: LD_VAR 0 2
17209: PUSH
17210: LD_INT 4
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: PUSH
17218: LD_VAR 0 1
17222: PUSH
17223: LD_INT 4
17225: PLUS
17226: PUSH
17227: LD_VAR 0 2
17231: PUSH
17232: LD_INT 4
17234: PLUS
17235: PUSH
17236: LD_INT 5
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: PUSH
17244: LD_VAR 0 1
17248: PUSH
17249: LD_INT 4
17251: MINUS
17252: PUSH
17253: LD_VAR 0 2
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: LD_VAR 0 1
17270: PUSH
17271: LD_VAR 0 2
17275: PUSH
17276: LD_INT 4
17278: MINUS
17279: PUSH
17280: LD_INT 3
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: PUSH
17288: LD_VAR 0 1
17292: PUSH
17293: LD_INT 3
17295: MINUS
17296: PUSH
17297: LD_VAR 0 2
17301: PUSH
17302: LD_INT 3
17304: MINUS
17305: PUSH
17306: LD_INT 2
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: ST_TO_ADDR
// end ; 4 :
17321: GO 17602
17323: LD_INT 4
17325: DOUBLE
17326: EQUAL
17327: IFTRUE 17331
17329: GO 17464
17331: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17332: LD_ADDR_VAR 0 5
17336: PUSH
17337: LD_VAR 0 1
17341: PUSH
17342: LD_VAR 0 2
17346: PUSH
17347: LD_INT 4
17349: PLUS
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: PUSH
17359: LD_VAR 0 1
17363: PUSH
17364: LD_INT 3
17366: PLUS
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: LD_INT 3
17375: PLUS
17376: PUSH
17377: LD_INT 5
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_VAR 0 1
17389: PUSH
17390: LD_INT 3
17392: PLUS
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: LD_INT 4
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: PUSH
17407: LD_VAR 0 1
17411: PUSH
17412: LD_VAR 0 2
17416: PUSH
17417: LD_INT 3
17419: MINUS
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: PUSH
17429: LD_VAR 0 1
17433: PUSH
17434: LD_INT 4
17436: MINUS
17437: PUSH
17438: LD_VAR 0 2
17442: PUSH
17443: LD_INT 4
17445: MINUS
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: ST_TO_ADDR
// end ; 5 :
17462: GO 17602
17464: LD_INT 5
17466: DOUBLE
17467: EQUAL
17468: IFTRUE 17472
17470: GO 17601
17472: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17473: LD_ADDR_VAR 0 5
17477: PUSH
17478: LD_VAR 0 1
17482: PUSH
17483: LD_INT 4
17485: MINUS
17486: PUSH
17487: LD_VAR 0 2
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_VAR 0 1
17504: PUSH
17505: LD_VAR 0 2
17509: PUSH
17510: LD_INT 4
17512: MINUS
17513: PUSH
17514: LD_INT 3
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: LD_VAR 0 1
17526: PUSH
17527: LD_INT 4
17529: PLUS
17530: PUSH
17531: LD_VAR 0 2
17535: PUSH
17536: LD_INT 4
17538: PLUS
17539: PUSH
17540: LD_INT 5
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 3
17555: PLUS
17556: PUSH
17557: LD_VAR 0 2
17561: PUSH
17562: LD_INT 4
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: LD_VAR 0 1
17574: PUSH
17575: LD_VAR 0 2
17579: PUSH
17580: LD_INT 3
17582: PLUS
17583: PUSH
17584: LD_INT 0
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: ST_TO_ADDR
// end ; end ;
17599: GO 17602
17601: POP
// result := list ;
17602: LD_ADDR_VAR 0 4
17606: PUSH
17607: LD_VAR 0 5
17611: ST_TO_ADDR
// end ;
17612: LD_VAR 0 4
17616: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17617: LD_INT 0
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
// result := false ;
17628: LD_ADDR_VAR 0 7
17632: PUSH
17633: LD_INT 0
17635: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17636: LD_VAR 0 1
17640: NOT
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 266
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: IN
17662: NOT
17663: OR
17664: PUSH
17665: LD_VAR 0 2
17669: NOT
17670: OR
17671: PUSH
17672: LD_VAR 0 5
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: LD_INT 3
17688: PUSH
17689: LD_INT 4
17691: PUSH
17692: LD_INT 5
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: IN
17703: NOT
17704: OR
17705: PUSH
17706: LD_VAR 0 3
17710: PPUSH
17711: LD_VAR 0 4
17715: PPUSH
17716: CALL_OW 488
17720: NOT
17721: OR
17722: IFFALSE 17726
// exit ;
17724: GO 18407
// pom := GetBase ( bdepot ) ;
17726: LD_ADDR_VAR 0 10
17730: PUSH
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL_OW 274
17740: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17741: LD_ADDR_VAR 0 11
17745: PUSH
17746: LD_VAR 0 2
17750: PPUSH
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 248
17760: PPUSH
17761: CALL_OW 450
17765: ST_TO_ADDR
// if check_cost then
17766: LD_VAR 0 6
17770: IFFALSE 17847
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17772: LD_VAR 0 10
17776: PPUSH
17777: LD_INT 1
17779: PPUSH
17780: CALL_OW 275
17784: PUSH
17785: LD_VAR 0 11
17789: PUSH
17790: LD_INT 1
17792: ARRAY
17793: GREATEREQUAL
17794: PUSH
17795: LD_VAR 0 10
17799: PPUSH
17800: LD_INT 2
17802: PPUSH
17803: CALL_OW 275
17807: PUSH
17808: LD_VAR 0 11
17812: PUSH
17813: LD_INT 2
17815: ARRAY
17816: GREATEREQUAL
17817: AND
17818: PUSH
17819: LD_VAR 0 10
17823: PPUSH
17824: LD_INT 3
17826: PPUSH
17827: CALL_OW 275
17831: PUSH
17832: LD_VAR 0 11
17836: PUSH
17837: LD_INT 3
17839: ARRAY
17840: GREATEREQUAL
17841: AND
17842: NOT
17843: IFFALSE 17847
// exit ;
17845: GO 18407
// if GetBType ( bdepot ) = b_depot then
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 266
17856: PUSH
17857: LD_INT 0
17859: EQUAL
17860: IFFALSE 17872
// dist := 28 else
17862: LD_ADDR_VAR 0 14
17866: PUSH
17867: LD_INT 28
17869: ST_TO_ADDR
17870: GO 17880
// dist := 36 ;
17872: LD_ADDR_VAR 0 14
17876: PUSH
17877: LD_INT 36
17879: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17880: LD_VAR 0 1
17884: PPUSH
17885: LD_VAR 0 3
17889: PPUSH
17890: LD_VAR 0 4
17894: PPUSH
17895: CALL_OW 297
17899: PUSH
17900: LD_VAR 0 14
17904: GREATER
17905: IFFALSE 17909
// exit ;
17907: GO 18407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17909: LD_ADDR_VAR 0 12
17913: PUSH
17914: LD_VAR 0 2
17918: PPUSH
17919: LD_VAR 0 3
17923: PPUSH
17924: LD_VAR 0 4
17928: PPUSH
17929: LD_VAR 0 5
17933: PPUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 248
17943: PPUSH
17944: LD_INT 0
17946: PPUSH
17947: CALL 18412 0 6
17951: ST_TO_ADDR
// if not hexes then
17952: LD_VAR 0 12
17956: NOT
17957: IFFALSE 17961
// exit ;
17959: GO 18407
// hex := GetHexInfo ( x , y ) ;
17961: LD_ADDR_VAR 0 15
17965: PUSH
17966: LD_VAR 0 3
17970: PPUSH
17971: LD_VAR 0 4
17975: PPUSH
17976: CALL_OW 546
17980: ST_TO_ADDR
// if hex [ 1 ] then
17981: LD_VAR 0 15
17985: PUSH
17986: LD_INT 1
17988: ARRAY
17989: IFFALSE 17993
// exit ;
17991: GO 18407
// height := hex [ 2 ] ;
17993: LD_ADDR_VAR 0 13
17997: PUSH
17998: LD_VAR 0 15
18002: PUSH
18003: LD_INT 2
18005: ARRAY
18006: ST_TO_ADDR
// for i = 1 to hexes do
18007: LD_ADDR_VAR 0 8
18011: PUSH
18012: DOUBLE
18013: LD_INT 1
18015: DEC
18016: ST_TO_ADDR
18017: LD_VAR 0 12
18021: PUSH
18022: FOR_TO
18023: IFFALSE 18351
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18025: LD_VAR 0 12
18029: PUSH
18030: LD_VAR 0 8
18034: ARRAY
18035: PUSH
18036: LD_INT 1
18038: ARRAY
18039: PPUSH
18040: LD_VAR 0 12
18044: PUSH
18045: LD_VAR 0 8
18049: ARRAY
18050: PUSH
18051: LD_INT 2
18053: ARRAY
18054: PPUSH
18055: CALL_OW 488
18059: NOT
18060: IFFALSE 18064
// continue ;
18062: GO 18022
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18064: LD_ADDR_VAR 0 9
18068: PUSH
18069: LD_VAR 0 12
18073: PUSH
18074: LD_VAR 0 8
18078: ARRAY
18079: PUSH
18080: LD_INT 1
18082: ARRAY
18083: PPUSH
18084: LD_VAR 0 12
18088: PUSH
18089: LD_VAR 0 8
18093: ARRAY
18094: PUSH
18095: LD_INT 2
18097: ARRAY
18098: PPUSH
18099: CALL_OW 546
18103: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18104: LD_VAR 0 9
18108: PUSH
18109: LD_INT 1
18111: ARRAY
18112: PUSH
18113: LD_VAR 0 9
18117: PUSH
18118: LD_INT 2
18120: ARRAY
18121: PUSH
18122: LD_VAR 0 13
18126: PUSH
18127: LD_INT 2
18129: PLUS
18130: GREATER
18131: OR
18132: PUSH
18133: LD_VAR 0 9
18137: PUSH
18138: LD_INT 2
18140: ARRAY
18141: PUSH
18142: LD_VAR 0 13
18146: PUSH
18147: LD_INT 2
18149: MINUS
18150: LESS
18151: OR
18152: PUSH
18153: LD_VAR 0 9
18157: PUSH
18158: LD_INT 3
18160: ARRAY
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: LD_INT 8
18167: PUSH
18168: LD_INT 9
18170: PUSH
18171: LD_INT 10
18173: PUSH
18174: LD_INT 11
18176: PUSH
18177: LD_INT 12
18179: PUSH
18180: LD_INT 13
18182: PUSH
18183: LD_INT 16
18185: PUSH
18186: LD_INT 17
18188: PUSH
18189: LD_INT 18
18191: PUSH
18192: LD_INT 19
18194: PUSH
18195: LD_INT 20
18197: PUSH
18198: LD_INT 21
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: IN
18216: NOT
18217: OR
18218: PUSH
18219: LD_VAR 0 9
18223: PUSH
18224: LD_INT 5
18226: ARRAY
18227: NOT
18228: OR
18229: PUSH
18230: LD_VAR 0 9
18234: PUSH
18235: LD_INT 6
18237: ARRAY
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 7
18247: PUSH
18248: LD_INT 9
18250: PUSH
18251: LD_INT 10
18253: PUSH
18254: LD_INT 11
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: IN
18265: NOT
18266: OR
18267: PUSH
18268: LD_VAR 0 12
18272: PUSH
18273: LD_VAR 0 8
18277: ARRAY
18278: PUSH
18279: LD_INT 1
18281: ARRAY
18282: PPUSH
18283: LD_VAR 0 12
18287: PUSH
18288: LD_VAR 0 8
18292: ARRAY
18293: PUSH
18294: LD_INT 2
18296: ARRAY
18297: PPUSH
18298: CALL_OW 428
18302: PUSH
18303: LD_INT 0
18305: GREATER
18306: OR
18307: PUSH
18308: LD_VAR 0 12
18312: PUSH
18313: LD_VAR 0 8
18317: ARRAY
18318: PUSH
18319: LD_INT 1
18321: ARRAY
18322: PPUSH
18323: LD_VAR 0 12
18327: PUSH
18328: LD_VAR 0 8
18332: ARRAY
18333: PUSH
18334: LD_INT 2
18336: ARRAY
18337: PPUSH
18338: CALL_OW 351
18342: OR
18343: IFFALSE 18349
// exit ;
18345: POP
18346: POP
18347: GO 18407
// end ;
18349: GO 18022
18351: POP
18352: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18353: LD_VAR 0 2
18357: PUSH
18358: LD_INT 29
18360: PUSH
18361: LD_INT 30
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: IN
18368: PUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: LD_VAR 0 4
18378: PPUSH
18379: LD_VAR 0 1
18383: PPUSH
18384: CALL_OW 255
18388: PPUSH
18389: CALL_OW 440
18393: NOT
18394: AND
18395: IFFALSE 18399
// exit ;
18397: GO 18407
// result := true ;
18399: LD_ADDR_VAR 0 7
18403: PUSH
18404: LD_INT 1
18406: ST_TO_ADDR
// end ;
18407: LD_VAR 0 7
18411: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18412: LD_INT 0
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
18425: PPUSH
18426: PPUSH
18427: PPUSH
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
18432: PPUSH
18433: PPUSH
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
// result = [ ] ;
18472: LD_ADDR_VAR 0 7
18476: PUSH
18477: EMPTY
18478: ST_TO_ADDR
// temp_list = [ ] ;
18479: LD_ADDR_VAR 0 9
18483: PUSH
18484: EMPTY
18485: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18486: LD_VAR 0 4
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: LD_INT 1
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: LD_INT 4
18505: PUSH
18506: LD_INT 5
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: IN
18517: NOT
18518: PUSH
18519: LD_VAR 0 1
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: IN
18534: PUSH
18535: LD_VAR 0 5
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: LD_INT 2
18545: PUSH
18546: LD_INT 3
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: IN
18554: NOT
18555: AND
18556: OR
18557: IFFALSE 18561
// exit ;
18559: GO 36946
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18561: LD_VAR 0 1
18565: PUSH
18566: LD_INT 6
18568: PUSH
18569: LD_INT 7
18571: PUSH
18572: LD_INT 8
18574: PUSH
18575: LD_INT 13
18577: PUSH
18578: LD_INT 12
18580: PUSH
18581: LD_INT 15
18583: PUSH
18584: LD_INT 11
18586: PUSH
18587: LD_INT 14
18589: PUSH
18590: LD_INT 10
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: IN
18604: IFFALSE 18614
// btype = b_lab ;
18606: LD_ADDR_VAR 0 1
18610: PUSH
18611: LD_INT 6
18613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18614: LD_VAR 0 6
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: IN
18633: NOT
18634: PUSH
18635: LD_VAR 0 1
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: LD_INT 6
18654: PUSH
18655: LD_INT 36
18657: PUSH
18658: LD_INT 4
18660: PUSH
18661: LD_INT 5
18663: PUSH
18664: LD_INT 31
18666: PUSH
18667: LD_INT 32
18669: PUSH
18670: LD_INT 33
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: IN
18686: NOT
18687: PUSH
18688: LD_VAR 0 6
18692: PUSH
18693: LD_INT 1
18695: EQUAL
18696: AND
18697: OR
18698: PUSH
18699: LD_VAR 0 1
18703: PUSH
18704: LD_INT 2
18706: PUSH
18707: LD_INT 3
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: IN
18714: NOT
18715: PUSH
18716: LD_VAR 0 6
18720: PUSH
18721: LD_INT 2
18723: EQUAL
18724: AND
18725: OR
18726: IFFALSE 18736
// mode = 0 ;
18728: LD_ADDR_VAR 0 6
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// case mode of 0 :
18736: LD_VAR 0 6
18740: PUSH
18741: LD_INT 0
18743: DOUBLE
18744: EQUAL
18745: IFTRUE 18749
18747: GO 30202
18749: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18750: LD_ADDR_VAR 0 11
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: LD_INT 1
18770: NEG
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 1
18819: NEG
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: LD_INT 2
18846: NEG
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 1
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 3
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18943: LD_ADDR_VAR 0 12
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 0
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 2
19066: NEG
19067: PUSH
19068: LD_INT 0
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: NEG
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 3
19100: NEG
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 3
19111: NEG
19112: PUSH
19113: LD_INT 1
19115: NEG
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19139: LD_ADDR_VAR 0 13
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 1
19197: NEG
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: NEG
19221: PUSH
19222: LD_INT 2
19224: NEG
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: NEG
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: NEG
19287: PUSH
19288: LD_INT 3
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 3
19298: NEG
19299: PUSH
19300: LD_INT 2
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 3
19310: NEG
19311: PUSH
19312: LD_INT 3
19314: NEG
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19338: LD_ADDR_VAR 0 14
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 2
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: NEG
19485: PUSH
19486: LD_INT 3
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 3
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 2
19510: NEG
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19534: LD_ADDR_VAR 0 15
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 1
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: NEG
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 1
19618: NEG
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 2
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 2
19657: NEG
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 2
19668: NEG
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 2
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 3
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19727: LD_ADDR_VAR 0 16
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: NEG
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: LD_INT 1
19800: NEG
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: LD_INT 2
19812: NEG
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 2
19850: NEG
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 3
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: LD_INT 3
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19920: LD_ADDR_VAR 0 17
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: LD_INT 0
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: LD_INT 2
20005: NEG
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: LD_INT 1
20027: NEG
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 2
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: LD_INT 2
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 2
20096: NEG
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: NEG
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: LD_INT 2
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20150: LD_ADDR_VAR 0 18
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: LD_INT 0
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: LD_INT 1
20223: NEG
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: LD_INT 2
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: LD_INT 2
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: NEG
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 2
20337: NEG
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20380: LD_ADDR_VAR 0 19
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: NEG
20462: PUSH
20463: LD_INT 2
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 0
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 2
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 2
20556: NEG
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 2
20579: NEG
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20610: LD_ADDR_VAR 0 20
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 1
20668: NEG
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: NEG
20692: PUSH
20693: LD_INT 2
20695: NEG
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 0
20703: PUSH
20704: LD_INT 2
20706: NEG
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: LD_INT 1
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 0
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 2
20786: NEG
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: NEG
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: NEG
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20840: LD_ADDR_VAR 0 21
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 1
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: LD_INT 2
20925: NEG
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 0
20933: PUSH
20934: LD_INT 2
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: LD_INT 1
20947: NEG
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 2
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 1
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 2
21016: NEG
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 2
21027: NEG
21028: PUSH
21029: LD_INT 1
21031: NEG
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: NEG
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21070: LD_ADDR_VAR 0 22
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 1
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: LD_INT 2
21155: NEG
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: LD_INT 2
21166: NEG
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 2
21246: NEG
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 2
21257: NEG
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21300: LD_ADDR_VAR 0 23
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: NEG
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: LD_INT 2
21385: NEG
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 0
21393: PUSH
21394: LD_INT 2
21396: NEG
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: LD_INT 1
21407: NEG
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 2
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 2
21476: NEG
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: NEG
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 2
21499: NEG
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: NEG
21512: PUSH
21513: LD_INT 3
21515: NEG
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 3
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 2
21538: NEG
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21580: LD_ADDR_VAR 0 24
21584: PUSH
21585: LD_INT 0
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 1
21638: NEG
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: LD_INT 2
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: LD_INT 2
21676: NEG
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: LD_INT 2
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 2
21756: NEG
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 2
21779: NEG
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 3
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21856: LD_ADDR_VAR 0 25
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: LD_INT 0
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 1
21914: NEG
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: NEG
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: LD_INT 2
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 1
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 2
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: LD_INT 2
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: NEG
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 2
22043: NEG
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 2
22055: NEG
22056: PUSH
22057: LD_INT 2
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 3
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 3
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22130: LD_ADDR_VAR 0 26
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: LD_INT 2
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: LD_INT 2
22226: NEG
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 2
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 2
22306: NEG
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 2
22329: NEG
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: NEG
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22406: LD_ADDR_VAR 0 27
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: LD_INT 1
22426: NEG
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: NEG
22476: PUSH
22477: LD_INT 1
22479: NEG
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: LD_INT 2
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: LD_INT 2
22502: NEG
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: LD_INT 1
22513: NEG
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 0
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 2
22582: NEG
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 2
22593: NEG
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 2
22605: NEG
22606: PUSH
22607: LD_INT 2
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: NEG
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 3
22639: NEG
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 3
22651: NEG
22652: PUSH
22653: LD_INT 2
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22686: LD_ADDR_VAR 0 28
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 1
22714: PUSH
22715: LD_INT 0
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: LD_INT 2
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: LD_INT 2
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 2
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 2
22885: NEG
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: LD_INT 3
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 3
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 3
22921: NEG
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 3
22933: NEG
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22968: LD_ADDR_VAR 0 29
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: LD_INT 0
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 0
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: NEG
23038: PUSH
23039: LD_INT 1
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: LD_INT 2
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 2
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 2
23134: NEG
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 2
23146: NEG
23147: PUSH
23148: LD_INT 2
23150: NEG
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: LD_INT 3
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 2
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 3
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 3
23212: NEG
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23247: LD_ADDR_VAR 0 30
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: LD_INT 2
23343: NEG
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 2
23362: PUSH
23363: LD_INT 0
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 2
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 2
23413: NEG
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 2
23424: NEG
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: LD_INT 3
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 2
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 3
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 3
23490: NEG
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23525: LD_ADDR_VAR 0 31
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: LD_INT 1
23598: NEG
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: NEG
23715: PUSH
23716: LD_INT 3
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 3
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: LD_INT 3
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 3
23768: NEG
23769: PUSH
23770: LD_INT 2
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23803: LD_ADDR_VAR 0 32
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 1
23884: NEG
23885: PUSH
23886: LD_INT 2
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: LD_INT 2
23899: NEG
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 2
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: NEG
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: NEG
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: LD_INT 3
23996: NEG
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: PUSH
24005: LD_INT 2
24007: NEG
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: NEG
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 3
24046: NEG
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24081: LD_ADDR_VAR 0 33
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 1
24162: NEG
24163: PUSH
24164: LD_INT 2
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 2
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 2
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: LD_INT 2
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 1
24225: NEG
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: NEG
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: NEG
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 2
24259: NEG
24260: PUSH
24261: LD_INT 2
24263: NEG
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 2
24271: NEG
24272: PUSH
24273: LD_INT 3
24275: NEG
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: LD_INT 2
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 3
24325: NEG
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24360: LD_ADDR_VAR 0 34
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: LD_INT 2
24445: NEG
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 2
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: NEG
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: LD_INT 3
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: NEG
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 3
24574: PUSH
24575: LD_INT 2
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 3
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24640: LD_ADDR_VAR 0 35
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: NEG
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24752: LD_ADDR_VAR 0 36
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 2
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24864: LD_ADDR_VAR 0 37
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 1
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24976: LD_ADDR_VAR 0 38
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: NEG
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25088: LD_ADDR_VAR 0 39
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: LD_INT 0
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25200: LD_ADDR_VAR 0 40
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25312: LD_ADDR_VAR 0 41
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 2
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: NEG
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: LD_INT 3
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 3
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 3
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 3
25555: PUSH
25556: LD_INT 3
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 3
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 3
25586: NEG
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 3
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: NEG
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 3
25621: NEG
25622: PUSH
25623: LD_INT 3
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25662: LD_ADDR_VAR 0 42
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 0
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 2
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: LD_INT 3
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 3
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 2
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 3
25959: NEG
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: NEG
25972: PUSH
25973: LD_INT 3
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26012: LD_ADDR_VAR 0 43
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 2
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 3
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 3
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 3
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 3
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 3
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 3
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26360: LD_ADDR_VAR 0 44
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 2
26538: NEG
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: LD_INT 3
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 3
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 3
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: PUSH
26604: LD_INT 3
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: LD_INT 3
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 2
26623: NEG
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 3
26634: NEG
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 3
26645: NEG
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 3
26657: NEG
26658: PUSH
26659: LD_INT 2
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 3
26669: NEG
26670: PUSH
26671: LD_INT 3
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26710: LD_ADDR_VAR 0 45
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 2
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 2
26876: NEG
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: LD_INT 2
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: LD_INT 3
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: NEG
26913: PUSH
26914: LD_INT 3
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 3
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 3
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 3
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 3
27007: NEG
27008: PUSH
27009: LD_INT 2
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 3
27019: NEG
27020: PUSH
27021: LD_INT 3
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27060: LD_ADDR_VAR 0 46
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 2
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: NEG
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 3
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 3
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 2
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 3
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: LD_INT 3
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 3
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 2
27345: NEG
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 3
27356: NEG
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 3
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27408: LD_ADDR_VAR 0 47
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 2
27523: NEG
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27559: LD_ADDR_VAR 0 48
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: LD_INT 2
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27706: LD_ADDR_VAR 0 49
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27850: LD_ADDR_VAR 0 50
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27994: LD_ADDR_VAR 0 51
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28141: LD_ADDR_VAR 0 52
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 2
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 2
28256: NEG
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 2
28268: NEG
28269: PUSH
28270: LD_INT 2
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28292: LD_ADDR_VAR 0 53
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: LD_INT 2
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 2
28468: NEG
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 2
28479: NEG
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 2
28491: NEG
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28522: LD_ADDR_VAR 0 54
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: LD_INT 2
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 2
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 2
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28752: LD_ADDR_VAR 0 55
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: LD_INT 2
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 2
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 2
28928: NEG
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 2
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: NEG
28952: PUSH
28953: LD_INT 2
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28982: LD_ADDR_VAR 0 56
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 2
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: LD_INT 2
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 2
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 2
29169: NEG
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29212: LD_ADDR_VAR 0 57
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: LD_INT 2
29308: NEG
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29442: LD_ADDR_VAR 0 58
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 1
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: LD_INT 2
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: NEG
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: LD_INT 2
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29672: LD_ADDR_VAR 0 59
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: NEG
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29760: LD_ADDR_VAR 0 60
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29848: LD_ADDR_VAR 0 61
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29936: LD_ADDR_VAR 0 62
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30024: LD_ADDR_VAR 0 63
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30112: LD_ADDR_VAR 0 64
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
// end ; 1 :
30200: GO 36097
30202: LD_INT 1
30204: DOUBLE
30205: EQUAL
30206: IFTRUE 30210
30208: GO 32833
30210: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30211: LD_ADDR_VAR 0 11
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: LD_INT 3
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 3
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: LIST
30254: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30255: LD_ADDR_VAR 0 12
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30296: LD_ADDR_VAR 0 13
30300: PUSH
30301: LD_INT 3
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30336: LD_ADDR_VAR 0 14
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 3
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30377: LD_ADDR_VAR 0 15
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 3
30395: NEG
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 3
30406: NEG
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30421: LD_ADDR_VAR 0 16
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 3
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 3
30452: NEG
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30467: LD_ADDR_VAR 0 17
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: LD_INT 3
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 0
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: LD_INT 2
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30511: LD_ADDR_VAR 0 18
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30552: LD_ADDR_VAR 0 19
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 2
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: LD_INT 3
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30592: LD_ADDR_VAR 0 20
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 3
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30633: LD_ADDR_VAR 0 21
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: NEG
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 3
30662: NEG
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30677: LD_ADDR_VAR 0 22
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 3
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: NEG
30697: PUSH
30698: LD_INT 2
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: LD_INT 3
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30723: LD_ADDR_VAR 0 23
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 3
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: LD_INT 4
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30767: LD_ADDR_VAR 0 24
30771: PUSH
30772: LD_INT 3
30774: PUSH
30775: LD_INT 0
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 4
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30808: LD_ADDR_VAR 0 25
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: LD_INT 3
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 4
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 4
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30848: LD_ADDR_VAR 0 26
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 4
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30889: LD_ADDR_VAR 0 27
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 3
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 4
30918: NEG
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30933: LD_ADDR_VAR 0 28
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 3
30952: NEG
30953: PUSH
30954: LD_INT 4
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 4
30964: NEG
30965: PUSH
30966: LD_INT 3
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30979: LD_ADDR_VAR 0 29
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 3
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 4
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: LD_INT 4
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: LD_INT 5
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 5
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: LD_INT 4
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: LD_INT 6
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 6
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 5
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31134: LD_ADDR_VAR 0 30
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 3
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 4
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 4
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 4
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 5
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 5
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 5
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 6
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 6
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31277: LD_ADDR_VAR 0 31
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 4
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: LD_INT 4
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 3
31334: PUSH
31335: LD_INT 4
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 5
31344: PUSH
31345: LD_INT 4
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 5
31354: PUSH
31355: LD_INT 5
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 4
31364: PUSH
31365: LD_INT 5
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 6
31374: PUSH
31375: LD_INT 5
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 6
31384: PUSH
31385: LD_INT 6
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 5
31394: PUSH
31395: LD_INT 6
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31416: LD_ADDR_VAR 0 32
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: LD_INT 4
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: LD_INT 4
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 4
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 6
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 6
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 5
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31559: LD_ADDR_VAR 0 33
31563: PUSH
31564: LD_INT 2
31566: NEG
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 4
31611: NEG
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 4
31622: NEG
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 4
31634: NEG
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 5
31645: NEG
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 5
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 5
31668: NEG
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 6
31679: NEG
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 6
31690: NEG
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31714: LD_ADDR_VAR 0 34
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: LD_INT 3
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 3
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 3
31757: NEG
31758: PUSH
31759: LD_INT 4
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 4
31769: NEG
31770: PUSH
31771: LD_INT 3
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 4
31781: NEG
31782: PUSH
31783: LD_INT 4
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 4
31793: NEG
31794: PUSH
31795: LD_INT 5
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 5
31805: NEG
31806: PUSH
31807: LD_INT 4
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 5
31817: NEG
31818: PUSH
31819: LD_INT 5
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 5
31829: NEG
31830: PUSH
31831: LD_INT 6
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 6
31841: NEG
31842: PUSH
31843: LD_INT 5
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 6
31853: NEG
31854: PUSH
31855: LD_INT 6
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31877: LD_ADDR_VAR 0 41
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31921: LD_ADDR_VAR 0 42
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 2
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 3
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31962: LD_ADDR_VAR 0 43
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 3
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 2
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32002: LD_ADDR_VAR 0 44
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 2
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32043: LD_ADDR_VAR 0 45
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 3
32072: NEG
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: LIST
32086: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32087: LD_ADDR_VAR 0 46
32091: PUSH
32092: LD_INT 2
32094: NEG
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 3
32118: NEG
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32133: LD_ADDR_VAR 0 47
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: LD_INT 3
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: LD_INT 3
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32166: LD_ADDR_VAR 0 48
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32197: LD_ADDR_VAR 0 49
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 3
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32226: LD_ADDR_VAR 0 50
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32255: LD_ADDR_VAR 0 51
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32286: LD_ADDR_VAR 0 52
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 3
32305: NEG
32306: PUSH
32307: LD_INT 2
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32319: LD_ADDR_VAR 0 53
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 3
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: LD_INT 3
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32363: LD_ADDR_VAR 0 54
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 3
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32404: LD_ADDR_VAR 0 55
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 3
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32444: LD_ADDR_VAR 0 56
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32485: LD_ADDR_VAR 0 57
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 3
32503: NEG
32504: PUSH
32505: LD_INT 0
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32529: LD_ADDR_VAR 0 58
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: LD_INT 3
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 3
32548: NEG
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 3
32560: NEG
32561: PUSH
32562: LD_INT 3
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32575: LD_ADDR_VAR 0 59
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32619: LD_ADDR_VAR 0 60
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32660: LD_ADDR_VAR 0 61
32664: PUSH
32665: LD_INT 2
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32700: LD_ADDR_VAR 0 62
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32741: LD_ADDR_VAR 0 63
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: LIST
32784: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32785: LD_ADDR_VAR 0 64
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: NEG
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: NEG
32817: PUSH
32818: LD_INT 2
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: ST_TO_ADDR
// end ; 2 :
32831: GO 36097
32833: LD_INT 2
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 36096
32841: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32842: LD_ADDR_VAR 0 29
32846: PUSH
32847: LD_INT 4
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 4
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 5
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 5
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 4
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 3
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 5
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 4
32962: PUSH
32963: LD_INT 3
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: LD_INT 4
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 3
32982: PUSH
32983: LD_INT 4
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 3
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 4
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 4
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: LD_INT 4
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: LD_INT 5
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: LD_INT 4
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: LD_INT 5
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: NEG
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 3
33125: NEG
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: NEG
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 3
33170: NEG
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 4
33181: NEG
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 4
33192: NEG
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 4
33204: NEG
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: NEG
33217: PUSH
33218: LD_INT 2
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 4
33227: NEG
33228: PUSH
33229: LD_INT 4
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: NEG
33240: PUSH
33241: LD_INT 5
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: LD_INT 4
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: LD_INT 3
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 4
33275: NEG
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 5
33287: NEG
33288: PUSH
33289: LD_INT 4
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 5
33299: NEG
33300: PUSH
33301: LD_INT 5
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: LD_INT 5
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 5
33323: NEG
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33380: LD_ADDR_VAR 0 30
33384: PUSH
33385: LD_INT 4
33387: PUSH
33388: LD_INT 4
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 4
33397: PUSH
33398: LD_INT 3
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 5
33407: PUSH
33408: LD_INT 4
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 5
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 4
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 3
33437: PUSH
33438: LD_INT 4
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 3
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 5
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 3
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: LD_INT 4
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 4
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: LD_INT 2
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 4
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 4
33570: NEG
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 4
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 3
33593: NEG
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 3
33604: NEG
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 4
33615: NEG
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 5
33626: NEG
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 5
33637: NEG
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 5
33649: NEG
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 3
33661: NEG
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 3
33672: NEG
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 3
33684: NEG
33685: PUSH
33686: LD_INT 4
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: NEG
33697: PUSH
33698: LD_INT 3
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 3
33720: NEG
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 4
33732: NEG
33733: PUSH
33734: LD_INT 3
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 4
33744: NEG
33745: PUSH
33746: LD_INT 4
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 4
33768: NEG
33769: PUSH
33770: LD_INT 2
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 4
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 5
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 4
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 3
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: LD_INT 4
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: LD_INT 5
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 3
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 5
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33927: LD_ADDR_VAR 0 31
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 4
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 4
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 5
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 5
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 4
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 3
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 5
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: NEG
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: NEG
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 4
34083: NEG
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 4
34094: NEG
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 4
34106: NEG
34107: PUSH
34108: LD_INT 2
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: NEG
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 4
34129: NEG
34130: PUSH
34131: LD_INT 4
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 4
34141: NEG
34142: PUSH
34143: LD_INT 5
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: LD_INT 4
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: LD_INT 3
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 4
34177: NEG
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 5
34189: NEG
34190: PUSH
34191: LD_INT 4
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 5
34201: NEG
34202: PUSH
34203: LD_INT 5
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: LD_INT 5
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 5
34225: NEG
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: LD_INT 3
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 4
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 3
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: LD_INT 2
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: LD_INT 3
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: LD_INT 4
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: LD_INT 4
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 4
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 4
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 5
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 5
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 4
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 3
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 3
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 5
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34477: LD_ADDR_VAR 0 32
34481: PUSH
34482: LD_INT 4
34484: NEG
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 4
34495: NEG
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 3
34507: NEG
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 4
34529: NEG
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 5
34540: NEG
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 5
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 5
34563: NEG
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 3
34575: NEG
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 3
34586: NEG
34587: PUSH
34588: LD_INT 3
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 3
34598: NEG
34599: PUSH
34600: LD_INT 4
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: LD_INT 3
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: LD_INT 2
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 3
34634: NEG
34635: PUSH
34636: LD_INT 2
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 4
34646: NEG
34647: PUSH
34648: LD_INT 3
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 4
34658: NEG
34659: PUSH
34660: LD_INT 4
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 2
34670: NEG
34671: PUSH
34672: LD_INT 4
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 4
34682: NEG
34683: PUSH
34684: LD_INT 2
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 4
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 5
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: LD_INT 4
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 3
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 3
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 4
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: LD_INT 5
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 3
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: NEG
34785: PUSH
34786: LD_INT 5
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 3
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 4
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 4
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 3
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 4
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 4
34889: PUSH
34890: LD_INT 4
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 4
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 5
34909: PUSH
34910: LD_INT 4
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 5
34919: PUSH
34920: LD_INT 5
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 4
34929: PUSH
34930: LD_INT 5
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 3
34939: PUSH
34940: LD_INT 4
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: LD_INT 3
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 5
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 5
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35024: LD_ADDR_VAR 0 33
35028: PUSH
35029: LD_INT 4
35031: NEG
35032: PUSH
35033: LD_INT 4
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 4
35043: NEG
35044: PUSH
35045: LD_INT 5
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 3
35055: NEG
35056: PUSH
35057: LD_INT 4
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 3
35067: NEG
35068: PUSH
35069: LD_INT 3
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 4
35079: NEG
35080: PUSH
35081: LD_INT 3
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 5
35091: NEG
35092: PUSH
35093: LD_INT 4
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 5
35103: NEG
35104: PUSH
35105: LD_INT 5
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 3
35115: NEG
35116: PUSH
35117: LD_INT 5
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 5
35127: NEG
35128: PUSH
35129: LD_INT 3
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 3
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 4
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: LD_INT 3
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 3
35198: NEG
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 4
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: LD_INT 4
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 4
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 4
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 5
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 5
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 4
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 3
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 3
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 5
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 4
35354: PUSH
35355: LD_INT 3
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 4
35364: PUSH
35365: LD_INT 4
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 3
35374: PUSH
35375: LD_INT 4
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 2
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 4
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: LD_INT 4
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 4
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 3
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: LD_INT 4
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 5
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: LD_INT 5
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 4
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: LD_INT 3
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: LD_INT 5
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: LD_INT 3
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35562: LD_ADDR_VAR 0 34
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: LD_INT 4
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 5
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 4
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 3
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 3
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: LD_INT 4
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 5
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: NEG
35660: PUSH
35661: LD_INT 5
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 4
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 4
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 2
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 4
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 4
35764: PUSH
35765: LD_INT 4
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 4
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 5
35784: PUSH
35785: LD_INT 4
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 5
35794: PUSH
35795: LD_INT 5
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 4
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 3
35814: PUSH
35815: LD_INT 4
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 3
35824: PUSH
35825: LD_INT 3
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 5
35834: PUSH
35835: LD_INT 3
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 3
35844: PUSH
35845: LD_INT 5
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 3
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 4
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: LD_INT 4
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: LD_INT 4
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 2
35936: NEG
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 4
35947: NEG
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 4
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 3
35970: NEG
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 3
35981: NEG
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 4
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 5
36003: NEG
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 5
36014: NEG
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 5
36026: NEG
36027: PUSH
36028: LD_INT 2
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 3
36038: NEG
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// end ; end ;
36094: GO 36097
36096: POP
// case btype of b_depot , b_warehouse :
36097: LD_VAR 0 1
36101: PUSH
36102: LD_INT 0
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36116
36108: LD_INT 1
36110: DOUBLE
36111: EQUAL
36112: IFTRUE 36116
36114: GO 36317
36116: POP
// case nation of nation_american :
36117: LD_VAR 0 5
36121: PUSH
36122: LD_INT 1
36124: DOUBLE
36125: EQUAL
36126: IFTRUE 36130
36128: GO 36186
36130: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36131: LD_ADDR_VAR 0 9
36135: PUSH
36136: LD_VAR 0 11
36140: PUSH
36141: LD_VAR 0 12
36145: PUSH
36146: LD_VAR 0 13
36150: PUSH
36151: LD_VAR 0 14
36155: PUSH
36156: LD_VAR 0 15
36160: PUSH
36161: LD_VAR 0 16
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: PUSH
36174: LD_VAR 0 4
36178: PUSH
36179: LD_INT 1
36181: PLUS
36182: ARRAY
36183: ST_TO_ADDR
36184: GO 36315
36186: LD_INT 2
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36194
36192: GO 36250
36194: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36195: LD_ADDR_VAR 0 9
36199: PUSH
36200: LD_VAR 0 17
36204: PUSH
36205: LD_VAR 0 18
36209: PUSH
36210: LD_VAR 0 19
36214: PUSH
36215: LD_VAR 0 20
36219: PUSH
36220: LD_VAR 0 21
36224: PUSH
36225: LD_VAR 0 22
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: PUSH
36238: LD_VAR 0 4
36242: PUSH
36243: LD_INT 1
36245: PLUS
36246: ARRAY
36247: ST_TO_ADDR
36248: GO 36315
36250: LD_INT 3
36252: DOUBLE
36253: EQUAL
36254: IFTRUE 36258
36256: GO 36314
36258: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36259: LD_ADDR_VAR 0 9
36263: PUSH
36264: LD_VAR 0 23
36268: PUSH
36269: LD_VAR 0 24
36273: PUSH
36274: LD_VAR 0 25
36278: PUSH
36279: LD_VAR 0 26
36283: PUSH
36284: LD_VAR 0 27
36288: PUSH
36289: LD_VAR 0 28
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: PUSH
36302: LD_VAR 0 4
36306: PUSH
36307: LD_INT 1
36309: PLUS
36310: ARRAY
36311: ST_TO_ADDR
36312: GO 36315
36314: POP
36315: GO 36864
36317: LD_INT 2
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36331
36323: LD_INT 3
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36387
36331: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36332: LD_ADDR_VAR 0 9
36336: PUSH
36337: LD_VAR 0 29
36341: PUSH
36342: LD_VAR 0 30
36346: PUSH
36347: LD_VAR 0 31
36351: PUSH
36352: LD_VAR 0 32
36356: PUSH
36357: LD_VAR 0 33
36361: PUSH
36362: LD_VAR 0 34
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: LD_VAR 0 4
36379: PUSH
36380: LD_INT 1
36382: PLUS
36383: ARRAY
36384: ST_TO_ADDR
36385: GO 36864
36387: LD_INT 16
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36443
36393: LD_INT 17
36395: DOUBLE
36396: EQUAL
36397: IFTRUE 36443
36399: LD_INT 18
36401: DOUBLE
36402: EQUAL
36403: IFTRUE 36443
36405: LD_INT 19
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36443
36411: LD_INT 20
36413: DOUBLE
36414: EQUAL
36415: IFTRUE 36443
36417: LD_INT 21
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36443
36423: LD_INT 23
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36443
36429: LD_INT 24
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36443
36435: LD_INT 25
36437: DOUBLE
36438: EQUAL
36439: IFTRUE 36443
36441: GO 36499
36443: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36444: LD_ADDR_VAR 0 9
36448: PUSH
36449: LD_VAR 0 35
36453: PUSH
36454: LD_VAR 0 36
36458: PUSH
36459: LD_VAR 0 37
36463: PUSH
36464: LD_VAR 0 38
36468: PUSH
36469: LD_VAR 0 39
36473: PUSH
36474: LD_VAR 0 40
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: LD_VAR 0 4
36491: PUSH
36492: LD_INT 1
36494: PLUS
36495: ARRAY
36496: ST_TO_ADDR
36497: GO 36864
36499: LD_INT 6
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36555
36505: LD_INT 7
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36555
36511: LD_INT 8
36513: DOUBLE
36514: EQUAL
36515: IFTRUE 36555
36517: LD_INT 13
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36555
36523: LD_INT 12
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36555
36529: LD_INT 15
36531: DOUBLE
36532: EQUAL
36533: IFTRUE 36555
36535: LD_INT 11
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36555
36541: LD_INT 14
36543: DOUBLE
36544: EQUAL
36545: IFTRUE 36555
36547: LD_INT 10
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36555
36553: GO 36611
36555: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36556: LD_ADDR_VAR 0 9
36560: PUSH
36561: LD_VAR 0 41
36565: PUSH
36566: LD_VAR 0 42
36570: PUSH
36571: LD_VAR 0 43
36575: PUSH
36576: LD_VAR 0 44
36580: PUSH
36581: LD_VAR 0 45
36585: PUSH
36586: LD_VAR 0 46
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: PUSH
36599: LD_VAR 0 4
36603: PUSH
36604: LD_INT 1
36606: PLUS
36607: ARRAY
36608: ST_TO_ADDR
36609: GO 36864
36611: LD_INT 36
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36675
36619: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_VAR 0 47
36629: PUSH
36630: LD_VAR 0 48
36634: PUSH
36635: LD_VAR 0 49
36639: PUSH
36640: LD_VAR 0 50
36644: PUSH
36645: LD_VAR 0 51
36649: PUSH
36650: LD_VAR 0 52
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: PUSH
36663: LD_VAR 0 4
36667: PUSH
36668: LD_INT 1
36670: PLUS
36671: ARRAY
36672: ST_TO_ADDR
36673: GO 36864
36675: LD_INT 4
36677: DOUBLE
36678: EQUAL
36679: IFTRUE 36701
36681: LD_INT 5
36683: DOUBLE
36684: EQUAL
36685: IFTRUE 36701
36687: LD_INT 34
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36701
36693: LD_INT 37
36695: DOUBLE
36696: EQUAL
36697: IFTRUE 36701
36699: GO 36757
36701: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36702: LD_ADDR_VAR 0 9
36706: PUSH
36707: LD_VAR 0 53
36711: PUSH
36712: LD_VAR 0 54
36716: PUSH
36717: LD_VAR 0 55
36721: PUSH
36722: LD_VAR 0 56
36726: PUSH
36727: LD_VAR 0 57
36731: PUSH
36732: LD_VAR 0 58
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: PUSH
36745: LD_VAR 0 4
36749: PUSH
36750: LD_INT 1
36752: PLUS
36753: ARRAY
36754: ST_TO_ADDR
36755: GO 36864
36757: LD_INT 31
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36807
36763: LD_INT 32
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36807
36769: LD_INT 33
36771: DOUBLE
36772: EQUAL
36773: IFTRUE 36807
36775: LD_INT 27
36777: DOUBLE
36778: EQUAL
36779: IFTRUE 36807
36781: LD_INT 26
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36807
36787: LD_INT 28
36789: DOUBLE
36790: EQUAL
36791: IFTRUE 36807
36793: LD_INT 29
36795: DOUBLE
36796: EQUAL
36797: IFTRUE 36807
36799: LD_INT 30
36801: DOUBLE
36802: EQUAL
36803: IFTRUE 36807
36805: GO 36863
36807: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36808: LD_ADDR_VAR 0 9
36812: PUSH
36813: LD_VAR 0 59
36817: PUSH
36818: LD_VAR 0 60
36822: PUSH
36823: LD_VAR 0 61
36827: PUSH
36828: LD_VAR 0 62
36832: PUSH
36833: LD_VAR 0 63
36837: PUSH
36838: LD_VAR 0 64
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: PUSH
36851: LD_VAR 0 4
36855: PUSH
36856: LD_INT 1
36858: PLUS
36859: ARRAY
36860: ST_TO_ADDR
36861: GO 36864
36863: POP
// temp_list2 = [ ] ;
36864: LD_ADDR_VAR 0 10
36868: PUSH
36869: EMPTY
36870: ST_TO_ADDR
// for i in temp_list do
36871: LD_ADDR_VAR 0 8
36875: PUSH
36876: LD_VAR 0 9
36880: PUSH
36881: FOR_IN
36882: IFFALSE 36934
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36884: LD_ADDR_VAR 0 10
36888: PUSH
36889: LD_VAR 0 10
36893: PUSH
36894: LD_VAR 0 8
36898: PUSH
36899: LD_INT 1
36901: ARRAY
36902: PUSH
36903: LD_VAR 0 2
36907: PLUS
36908: PUSH
36909: LD_VAR 0 8
36913: PUSH
36914: LD_INT 2
36916: ARRAY
36917: PUSH
36918: LD_VAR 0 3
36922: PLUS
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: EMPTY
36929: LIST
36930: ADD
36931: ST_TO_ADDR
36932: GO 36881
36934: POP
36935: POP
// result = temp_list2 ;
36936: LD_ADDR_VAR 0 7
36940: PUSH
36941: LD_VAR 0 10
36945: ST_TO_ADDR
// end ; end_of_file
36946: LD_VAR 0 7
36950: RET
// every 1 do var i ;
36951: GO 36953
36953: DISABLE
36954: LD_INT 0
36956: PPUSH
// begin Video ( true ) ;
36957: LD_INT 1
36959: PPUSH
36960: CALL 6984 0 1
// CenterOnXY ( 53 , 40 ) ;
36964: LD_INT 53
36966: PPUSH
36967: LD_INT 40
36969: PPUSH
36970: CALL_OW 84
// wait ( 0 0$5 ) ;
36974: LD_INT 175
36976: PPUSH
36977: CALL_OW 67
// if gammaCommander = 1 then
36981: LD_EXP 12
36985: PUSH
36986: LD_INT 1
36988: EQUAL
36989: IFFALSE 37003
// Say ( Donaldson , D1-Don-1 ) ;
36991: LD_EXP 3
36995: PPUSH
36996: LD_STRING D1-Don-1
36998: PPUSH
36999: CALL_OW 88
// if gammaCommander = 2 then
37003: LD_EXP 12
37007: PUSH
37008: LD_INT 2
37010: EQUAL
37011: IFFALSE 37025
// Say ( Brown , D1-Brown-1 ) ;
37013: LD_EXP 2
37017: PPUSH
37018: LD_STRING D1-Brown-1
37020: PPUSH
37021: CALL_OW 88
// if gammaCommander = 3 then
37025: LD_EXP 12
37029: PUSH
37030: LD_INT 3
37032: EQUAL
37033: IFFALSE 37047
// Say ( Houten , D1-VanH-1 ) ;
37035: LD_EXP 13
37039: PPUSH
37040: LD_STRING D1-VanH-1
37042: PPUSH
37043: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37047: LD_EXP 22
37051: PPUSH
37052: LD_STRING D1-Har-1
37054: PPUSH
37055: CALL_OW 94
// if gammaCommander = 1 then
37059: LD_EXP 12
37063: PUSH
37064: LD_INT 1
37066: EQUAL
37067: IFFALSE 37081
// Say ( Donaldson , D1-Don-2 ) ;
37069: LD_EXP 3
37073: PPUSH
37074: LD_STRING D1-Don-2
37076: PPUSH
37077: CALL_OW 88
// if gammaCommander = 2 then
37081: LD_EXP 12
37085: PUSH
37086: LD_INT 2
37088: EQUAL
37089: IFFALSE 37103
// Say ( Brown , D1-Brown-2 ) ;
37091: LD_EXP 2
37095: PPUSH
37096: LD_STRING D1-Brown-2
37098: PPUSH
37099: CALL_OW 88
// if gammaCommander = 3 then
37103: LD_EXP 12
37107: PUSH
37108: LD_INT 3
37110: EQUAL
37111: IFFALSE 37125
// Say ( Houten , D1-VanH-2 ) ;
37113: LD_EXP 13
37117: PPUSH
37118: LD_STRING D1-VanH-2
37120: PPUSH
37121: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37125: LD_EXP 22
37129: PPUSH
37130: LD_STRING D1-Har-2
37132: PPUSH
37133: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37137: LD_INT 22
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 33
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 61
37159: PUSH
37160: EMPTY
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: PPUSH
37168: CALL_OW 69
37172: IFFALSE 37237
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37174: LD_ADDR_VAR 0 1
37178: PUSH
37179: LD_INT 22
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 33
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 61
37201: PUSH
37202: EMPTY
37203: LIST
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: PPUSH
37210: CALL_OW 69
37214: PUSH
37215: FOR_IN
37216: IFFALSE 37235
// ComAgressiveMove ( i , 70 , 41 ) ;
37218: LD_VAR 0 1
37222: PPUSH
37223: LD_INT 70
37225: PPUSH
37226: LD_INT 41
37228: PPUSH
37229: CALL_OW 114
37233: GO 37215
37235: POP
37236: POP
// repeat wait ( 0 0$1 ) ;
37237: LD_INT 35
37239: PPUSH
37240: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37244: LD_ADDR_VAR 0 1
37248: PUSH
37249: LD_INT 22
37251: PUSH
37252: LD_INT 6
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: PPUSH
37262: CALL_OW 69
37266: PUSH
37267: FOR_IN
37268: IFFALSE 37287
// ComAgressiveMove ( i , 54 , 20 ) ;
37270: LD_VAR 0 1
37274: PPUSH
37275: LD_INT 54
37277: PPUSH
37278: LD_INT 20
37280: PPUSH
37281: CALL_OW 114
37285: GO 37267
37287: POP
37288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37289: LD_ADDR_VAR 0 1
37293: PUSH
37294: LD_INT 22
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 25
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 3
37316: PUSH
37317: LD_INT 54
37319: PUSH
37320: EMPTY
37321: LIST
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: PPUSH
37332: CALL_OW 69
37336: PUSH
37337: FOR_IN
37338: IFFALSE 37372
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37340: LD_VAR 0 1
37344: PPUSH
37345: LD_INT 70
37347: PPUSH
37348: LD_INT 41
37350: PPUSH
37351: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37355: LD_VAR 0 1
37359: PPUSH
37360: LD_INT 46
37362: PPUSH
37363: LD_INT 39
37365: PPUSH
37366: CALL_OW 174
// end ;
37370: GO 37337
37372: POP
37373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37374: LD_ADDR_VAR 0 1
37378: PUSH
37379: LD_INT 22
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 21
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 3
37401: PUSH
37402: LD_INT 24
37404: PUSH
37405: LD_INT 500
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PPUSH
37421: CALL_OW 69
37425: PUSH
37426: FOR_IN
37427: IFFALSE 37460
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37429: LD_VAR 0 1
37433: PPUSH
37434: LD_EXP 37
37438: PPUSH
37439: CALL_OW 250
37443: PPUSH
37444: LD_EXP 37
37448: PPUSH
37449: CALL_OW 251
37453: PPUSH
37454: CALL_OW 111
37458: GO 37426
37460: POP
37461: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37462: LD_INT 22
37464: PUSH
37465: LD_INT 6
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 21
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 24
37484: PUSH
37485: LD_INT 250
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: PPUSH
37497: CALL_OW 69
37501: PUSH
37502: LD_INT 5
37504: LESS
37505: IFFALSE 37237
// Video ( false ) ;
37507: LD_INT 0
37509: PPUSH
37510: CALL 6984 0 1
// ChangeMissionObjectives ( M1 ) ;
37514: LD_STRING M1
37516: PPUSH
37517: CALL_OW 337
// SaveForQuickRestart ;
37521: CALL_OW 22
// startCutscene = 0 ;
37525: LD_ADDR_EXP 38
37529: PUSH
37530: LD_INT 0
37532: ST_TO_ADDR
// end ;
37533: PPOPN 1
37535: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37536: LD_EXP 38
37540: IFFALSE 37631
37542: GO 37544
37544: DISABLE
37545: LD_INT 0
37547: PPUSH
37548: PPUSH
// begin enable ;
37549: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37550: LD_ADDR_VAR 0 1
37554: PUSH
37555: LD_INT 22
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 21
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 3
37577: PUSH
37578: LD_INT 24
37580: PUSH
37581: LD_INT 700
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: LIST
37596: PPUSH
37597: CALL_OW 69
37601: ST_TO_ADDR
// for i in tmp do
37602: LD_ADDR_VAR 0 2
37606: PUSH
37607: LD_VAR 0 1
37611: PUSH
37612: FOR_IN
37613: IFFALSE 37629
// SetLives ( i , 700 ) ;
37615: LD_VAR 0 2
37619: PPUSH
37620: LD_INT 700
37622: PPUSH
37623: CALL_OW 234
37627: GO 37612
37629: POP
37630: POP
// end ;
37631: PPOPN 2
37633: END
// every 1 1$0 do
37634: GO 37636
37636: DISABLE
// begin PrepareSupportFromDelta ;
37637: CALL 3825 0 0
// firstAttack = 1 ;
37641: LD_ADDR_EXP 33
37645: PUSH
37646: LD_INT 1
37648: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37649: LD_EXP 8
37653: PPUSH
37654: CALL_OW 302
37658: IFFALSE 37674
// begin Say ( Gladstone , D2-Glad-1 ) ;
37660: LD_EXP 8
37664: PPUSH
37665: LD_STRING D2-Glad-1
37667: PPUSH
37668: CALL_OW 88
// end else
37672: GO 37782
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37674: LD_INT 4
37676: PPUSH
37677: LD_INT 22
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 21
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 25
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 25
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 25
37722: PUSH
37723: LD_INT 3
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 25
37732: PUSH
37733: LD_INT 4
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: PPUSH
37752: CALL_OW 70
37756: PUSH
37757: LD_EXP 15
37761: PUSH
37762: LD_EXP 14
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: DIFF
37771: PPUSH
37772: LD_STRING D2-Sol1-1
37774: PPUSH
37775: LD_STRING D2-FSol1-1
37777: PPUSH
37778: CALL 7012 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37782: LD_EXP 3
37786: PPUSH
37787: CALL_OW 302
37791: PUSH
37792: LD_EXP 12
37796: PUSH
37797: LD_INT 1
37799: EQUAL
37800: AND
37801: IFFALSE 37815
// Say ( Donaldson , D2-Don-1 ) ;
37803: LD_EXP 3
37807: PPUSH
37808: LD_STRING D2-Don-1
37810: PPUSH
37811: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37815: LD_EXP 2
37819: PPUSH
37820: CALL_OW 302
37824: PUSH
37825: LD_EXP 12
37829: PUSH
37830: LD_INT 2
37832: EQUAL
37833: AND
37834: IFFALSE 37848
// Say ( Brown , D2-Brown-1 ) ;
37836: LD_EXP 2
37840: PPUSH
37841: LD_STRING D2-Brown-1
37843: PPUSH
37844: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37848: LD_EXP 13
37852: PPUSH
37853: CALL_OW 302
37857: PUSH
37858: LD_EXP 12
37862: PUSH
37863: LD_INT 3
37865: EQUAL
37866: AND
37867: IFFALSE 37881
// Say ( Houten , D2-VanH-1 ) ;
37869: LD_EXP 13
37873: PPUSH
37874: LD_STRING D2-VanH-1
37876: PPUSH
37877: CALL_OW 88
// end ;
37881: END
// every 0 0$1 do
37882: GO 37884
37884: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37885: LD_STRING 07_time
37887: PPUSH
37888: LD_INT 12600
37890: PPUSH
37891: CALL_OW 30
37895: PUSH
37896: LD_INT 3
37898: DIV
37899: PPUSH
37900: CALL_OW 67
// PrepareMacmillanSquad ;
37904: CALL 4487 0 0
// CenterNowOnUnits ( JMM ) ;
37908: LD_EXP 1
37912: PPUSH
37913: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37917: LD_EXP 1
37921: PPUSH
37922: LD_STRING D3-JMM-1
37924: PPUSH
37925: CALL_OW 88
// JMMArrive = 1 ;
37929: LD_ADDR_EXP 39
37933: PUSH
37934: LD_INT 1
37936: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37937: LD_EXP 3
37941: PPUSH
37942: CALL_OW 302
37946: PUSH
37947: LD_EXP 12
37951: PUSH
37952: LD_INT 1
37954: EQUAL
37955: AND
37956: IFFALSE 37972
// begin Say ( Donaldson , D3-Don-1 ) ;
37958: LD_EXP 3
37962: PPUSH
37963: LD_STRING D3-Don-1
37965: PPUSH
37966: CALL_OW 88
// end else
37970: GO 38024
// begin if gammaCommander = 1 then
37972: LD_EXP 12
37976: PUSH
37977: LD_INT 1
37979: EQUAL
37980: IFFALSE 38024
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
37982: LD_EXP 11
37986: PPUSH
37987: LD_INT 26
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PPUSH
37997: CALL_OW 72
38001: PPUSH
38002: LD_STRING D3-Sol1-1
38004: PPUSH
38005: LD_STRING D3-Sol1-1
38007: PPUSH
38008: CALL 7012 0 3
// Say ( JMM , D3-JMM-2 ) ;
38012: LD_EXP 1
38016: PPUSH
38017: LD_STRING D3-JMM-2
38019: PPUSH
38020: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38024: LD_EXP 2
38028: PPUSH
38029: CALL_OW 302
38033: PUSH
38034: LD_EXP 12
38038: PUSH
38039: LD_INT 2
38041: EQUAL
38042: AND
38043: IFFALSE 38059
// begin Say ( Brown , D3-Brown-1 ) ;
38045: LD_EXP 2
38049: PPUSH
38050: LD_STRING D3-Brown-1
38052: PPUSH
38053: CALL_OW 88
// end else
38057: GO 38111
// begin if gammaCommander = 2 then
38059: LD_EXP 12
38063: PUSH
38064: LD_INT 2
38066: EQUAL
38067: IFFALSE 38111
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38069: LD_EXP 11
38073: PPUSH
38074: LD_INT 26
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PPUSH
38084: CALL_OW 72
38088: PPUSH
38089: LD_STRING D3-Sol1-1a
38091: PPUSH
38092: LD_STRING D3-Sol1-1a
38094: PPUSH
38095: CALL 7012 0 3
// Say ( JMM , D3-JMM-2 ) ;
38099: LD_EXP 1
38103: PPUSH
38104: LD_STRING D3-JMM-2
38106: PPUSH
38107: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38111: LD_EXP 13
38115: PPUSH
38116: CALL_OW 302
38120: PUSH
38121: LD_EXP 12
38125: PUSH
38126: LD_INT 3
38128: EQUAL
38129: AND
38130: IFFALSE 38146
// begin Say ( Houten , D3-VanH-1 ) ;
38132: LD_EXP 13
38136: PPUSH
38137: LD_STRING D3-VanH-1
38139: PPUSH
38140: CALL_OW 88
// end else
38144: GO 38198
// begin if gammaCommander = 3 then
38146: LD_EXP 12
38150: PUSH
38151: LD_INT 3
38153: EQUAL
38154: IFFALSE 38198
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38156: LD_EXP 11
38160: PPUSH
38161: LD_INT 26
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PPUSH
38171: CALL_OW 72
38175: PPUSH
38176: LD_STRING D3-Sol1-1b
38178: PPUSH
38179: LD_STRING D3-Sol1-1b
38181: PPUSH
38182: CALL 7012 0 3
// Say ( JMM , D3-JMM-2 ) ;
38186: LD_EXP 1
38190: PPUSH
38191: LD_STRING D3-JMM-2
38193: PPUSH
38194: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38198: LD_EXP 15
38202: PPUSH
38203: CALL_OW 302
38207: IFFALSE 38235
// begin Say ( Joan , D3a-Joan-1 ) ;
38209: LD_EXP 15
38213: PPUSH
38214: LD_STRING D3a-Joan-1
38216: PPUSH
38217: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38221: LD_EXP 1
38225: PPUSH
38226: LD_STRING D3a-JMM-1
38228: PPUSH
38229: CALL_OW 88
// end else
38233: GO 38577
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38235: LD_STRING 06_JoanStatus_1
38237: PPUSH
38238: LD_INT 0
38240: PPUSH
38241: CALL_OW 30
38245: PUSH
38246: LD_INT 1
38248: EQUAL
38249: IFFALSE 38577
// begin Say ( JMM , D3b-JMM-1 ) ;
38251: LD_EXP 1
38255: PPUSH
38256: LD_STRING D3b-JMM-1
38258: PPUSH
38259: CALL_OW 88
// if gammaCommander = 1 then
38263: LD_EXP 12
38267: PUSH
38268: LD_INT 1
38270: EQUAL
38271: IFFALSE 38328
// if IsOK ( Donaldson ) then
38273: LD_EXP 3
38277: PPUSH
38278: CALL_OW 302
38282: IFFALSE 38298
// Say ( Donaldson , D3b-Don-1 ) else
38284: LD_EXP 3
38288: PPUSH
38289: LD_STRING D3b-Don-1
38291: PPUSH
38292: CALL_OW 88
38296: GO 38328
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38298: LD_EXP 11
38302: PPUSH
38303: LD_INT 26
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PPUSH
38313: CALL_OW 72
38317: PPUSH
38318: LD_STRING D3b-Sol1-1
38320: PPUSH
38321: LD_STRING D3b-Sol1-1
38323: PPUSH
38324: CALL 7012 0 3
// if gammaCommander = 2 then
38328: LD_EXP 12
38332: PUSH
38333: LD_INT 2
38335: EQUAL
38336: IFFALSE 38393
// if IsOk ( Brown ) then
38338: LD_EXP 2
38342: PPUSH
38343: CALL_OW 302
38347: IFFALSE 38363
// Say ( Brown , D3b-Brown-1 ) else
38349: LD_EXP 2
38353: PPUSH
38354: LD_STRING D3b-Brown-1
38356: PPUSH
38357: CALL_OW 88
38361: GO 38393
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38363: LD_EXP 11
38367: PPUSH
38368: LD_INT 26
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PPUSH
38378: CALL_OW 72
38382: PPUSH
38383: LD_STRING D3b-Sol1-1
38385: PPUSH
38386: LD_STRING D3b-Sol1-1
38388: PPUSH
38389: CALL 7012 0 3
// if gammaCommander = 3 then
38393: LD_EXP 12
38397: PUSH
38398: LD_INT 3
38400: EQUAL
38401: IFFALSE 38458
// if IsOk ( Houten ) then
38403: LD_EXP 13
38407: PPUSH
38408: CALL_OW 302
38412: IFFALSE 38428
// Say ( Houten , D3b-VanH-1 ) else
38414: LD_EXP 13
38418: PPUSH
38419: LD_STRING D3b-VanH-1
38421: PPUSH
38422: CALL_OW 88
38426: GO 38458
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38428: LD_EXP 11
38432: PPUSH
38433: LD_INT 26
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PPUSH
38443: CALL_OW 72
38447: PPUSH
38448: LD_STRING D3b-Sol1-1
38450: PPUSH
38451: LD_STRING D3b-Sol1-1
38453: PPUSH
38454: CALL 7012 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38458: LD_EXP 11
38462: PPUSH
38463: LD_INT 26
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PPUSH
38473: CALL_OW 72
38477: PUSH
38478: LD_EXP 12
38482: PUSH
38483: LD_INT 1
38485: EQUAL
38486: PUSH
38487: LD_EXP 3
38491: PPUSH
38492: CALL_OW 302
38496: AND
38497: OR
38498: PUSH
38499: LD_EXP 12
38503: PUSH
38504: LD_INT 2
38506: EQUAL
38507: PUSH
38508: LD_EXP 2
38512: PPUSH
38513: CALL_OW 302
38517: AND
38518: OR
38519: PUSH
38520: LD_EXP 12
38524: PUSH
38525: LD_INT 3
38527: EQUAL
38528: PUSH
38529: LD_EXP 13
38533: PPUSH
38534: CALL_OW 302
38538: AND
38539: OR
38540: IFFALSE 38554
// Say ( JMM , D3b-JMM-2 ) ;
38542: LD_EXP 1
38546: PPUSH
38547: LD_STRING D3b-JMM-2
38549: PPUSH
38550: CALL_OW 88
// if IsOK ( Lisa ) then
38554: LD_EXP 6
38558: PPUSH
38559: CALL_OW 302
38563: IFFALSE 38577
// Say ( Lisa , D3b-Lisa-2 ) ;
38565: LD_EXP 6
38569: PPUSH
38570: LD_STRING D3b-Lisa-2
38572: PPUSH
38573: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38577: LD_INT 22
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 21
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 26
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 25
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 25
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 25
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 25
38642: PUSH
38643: LD_INT 4
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: PPUSH
38663: CALL_OW 69
38667: PUSH
38668: LD_EXP 1
38672: PUSH
38673: LD_EXP 2
38677: PUSH
38678: LD_EXP 3
38682: PUSH
38683: LD_EXP 4
38687: PUSH
38688: LD_EXP 5
38692: PUSH
38693: LD_EXP 6
38697: PUSH
38698: LD_EXP 7
38702: PUSH
38703: LD_EXP 8
38707: PUSH
38708: LD_EXP 9
38712: PUSH
38713: LD_EXP 10
38717: PUSH
38718: LD_EXP 15
38722: PUSH
38723: LD_EXP 14
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: DIFF
38742: PPUSH
38743: LD_STRING DCa-Sol1-1
38745: PPUSH
38746: LD_STRING DCa-Sol1-1
38748: PPUSH
38749: CALL 7012 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38753: LD_EXP 1
38757: PPUSH
38758: LD_STRING DCb-JMM-1
38760: PPUSH
38761: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38765: LD_INT 22
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 21
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 26
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: LD_INT 25
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 25
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 25
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 25
38830: PUSH
38831: LD_INT 4
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: PPUSH
38851: CALL_OW 69
38855: PUSH
38856: LD_EXP 1
38860: PUSH
38861: LD_EXP 2
38865: PUSH
38866: LD_EXP 3
38870: PUSH
38871: LD_EXP 4
38875: PUSH
38876: LD_EXP 5
38880: PUSH
38881: LD_EXP 6
38885: PUSH
38886: LD_EXP 7
38890: PUSH
38891: LD_EXP 8
38895: PUSH
38896: LD_EXP 9
38900: PUSH
38901: LD_EXP 10
38905: PUSH
38906: LD_EXP 15
38910: PUSH
38911: LD_EXP 14
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: DIFF
38930: PPUSH
38931: LD_STRING DCb-Sol1-1
38933: PPUSH
38934: LD_STRING DCb-Sol1-1
38936: PPUSH
38937: CALL 7012 0 3
// Say ( JMM , DCb-JMM-2 ) ;
38941: LD_EXP 1
38945: PPUSH
38946: LD_STRING DCb-JMM-2
38948: PPUSH
38949: CALL_OW 88
// secondAttack = 1 ;
38953: LD_ADDR_EXP 34
38957: PUSH
38958: LD_INT 1
38960: ST_TO_ADDR
// end ;
38961: END
// every 0 0$01 trigger JMMArrive = 1 do
38962: LD_EXP 39
38966: PUSH
38967: LD_INT 1
38969: EQUAL
38970: IFFALSE 39050
38972: GO 38974
38974: DISABLE
// begin wait ( 3 3$0 ) ;
38975: LD_INT 6300
38977: PPUSH
38978: CALL_OW 67
// DialogueOn ;
38982: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
38986: LD_EXP 23
38990: PPUSH
38991: LD_STRING D4-Pow-1
38993: PPUSH
38994: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
38998: LD_EXP 1
39002: PPUSH
39003: LD_STRING D4-JMM-1
39005: PPUSH
39006: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39010: LD_EXP 23
39014: PPUSH
39015: LD_STRING D4-Pow-2
39017: PPUSH
39018: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39022: LD_EXP 1
39026: PPUSH
39027: LD_STRING D4-JMM-2
39029: PPUSH
39030: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39034: LD_EXP 23
39038: PPUSH
39039: LD_STRING D4-Pow-3
39041: PPUSH
39042: CALL_OW 94
// DialogueOff ;
39046: CALL_OW 7
// end ;
39050: END
// every 0 0$01 trigger JMMArrive = 1 do
39051: LD_EXP 39
39055: PUSH
39056: LD_INT 1
39058: EQUAL
39059: IFFALSE 39091
39061: GO 39063
39063: DISABLE
// begin wait ( 8 8$0 ) ;
39064: LD_INT 16800
39066: PPUSH
39067: CALL_OW 67
// DialogueOn ;
39071: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39075: LD_EXP 23
39079: PPUSH
39080: LD_STRING D4a-Pow-1
39082: PPUSH
39083: CALL_OW 94
// DialogueOff ;
39087: CALL_OW 7
// end ;
39091: END
// every 0 0$01 trigger JMMArrive = 1 do
39092: LD_EXP 39
39096: PUSH
39097: LD_INT 1
39099: EQUAL
39100: IFFALSE 39145
39102: GO 39104
39104: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39105: LD_INT 21000
39107: PUSH
39108: LD_INT 25200
39110: PUSH
39111: LD_INT 31500
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: PUSH
39119: LD_OWVAR 67
39123: ARRAY
39124: PPUSH
39125: CALL_OW 67
// PrepareSikorsky ;
39129: CALL 5568 0 0
// SikorskyArrive = 1 ;
39133: LD_ADDR_EXP 18
39137: PUSH
39138: LD_INT 1
39140: ST_TO_ADDR
// PrepareSikorskyArmy ;
39141: CALL 5708 0 0
// end ;
39145: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39146: LD_EXP 17
39150: PPUSH
39151: LD_INT 5
39153: PPUSH
39154: CALL_OW 308
39158: IFFALSE 39350
39160: GO 39162
39162: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39163: LD_EXP 17
39167: PPUSH
39168: CALL_OW 87
// DialogueOn ;
39172: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39176: LD_EXP 16
39180: PPUSH
39181: LD_STRING D5-Sik-1
39183: PPUSH
39184: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39188: LD_EXP 1
39192: PPUSH
39193: LD_STRING D5-JMM-1a
39195: PPUSH
39196: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39200: LD_EXP 16
39204: PPUSH
39205: LD_STRING D5-Sik-2
39207: PPUSH
39208: CALL_OW 88
// case query ( QSikorski ) of 1 :
39212: LD_STRING QSikorski
39214: PPUSH
39215: CALL_OW 97
39219: PUSH
39220: LD_INT 1
39222: DOUBLE
39223: EQUAL
39224: IFTRUE 39228
39226: GO 39251
39228: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39229: LD_EXP 16
39233: PPUSH
39234: LD_STRING D5a-Sik-1
39236: PPUSH
39237: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39241: LD_ADDR_EXP 19
39245: PUSH
39246: LD_INT 2100
39248: ST_TO_ADDR
// end ; 2 :
39249: GO 39338
39251: LD_INT 2
39253: DOUBLE
39254: EQUAL
39255: IFTRUE 39259
39257: GO 39282
39259: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39260: LD_EXP 16
39264: PPUSH
39265: LD_STRING D5b-Sik-1
39267: PPUSH
39268: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39272: LD_ADDR_EXP 19
39276: PUSH
39277: LD_INT 10500
39279: ST_TO_ADDR
// end ; 3 :
39280: GO 39338
39282: LD_INT 3
39284: DOUBLE
39285: EQUAL
39286: IFTRUE 39290
39288: GO 39337
39290: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39291: LD_EXP 16
39295: PPUSH
39296: LD_STRING D5c-Sik-1
39298: PPUSH
39299: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39303: LD_EXP 1
39307: PPUSH
39308: LD_STRING D5c-JMM-1
39310: PPUSH
39311: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39315: LD_EXP 16
39319: PPUSH
39320: LD_STRING D5c-Sik-2
39322: PPUSH
39323: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39327: LD_ADDR_EXP 19
39331: PUSH
39332: LD_INT 10500
39334: ST_TO_ADDR
// end ; end ;
39335: GO 39338
39337: POP
// DialogueOff ;
39338: CALL_OW 7
// timerStatus = 1 ;
39342: LD_ADDR_EXP 35
39346: PUSH
39347: LD_INT 1
39349: ST_TO_ADDR
// end ;
39350: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39351: LD_EXP 19
39355: PUSH
39356: LD_INT 35
39358: LESS
39359: IFFALSE 39407
39361: GO 39363
39363: DISABLE
// begin timerStatus = 0 ;
39364: LD_ADDR_EXP 35
39368: PUSH
39369: LD_INT 0
39371: ST_TO_ADDR
// DialogueOn ;
39372: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39376: LD_EXP 16
39380: PPUSH
39381: LD_STRING D6-Sik-1
39383: PPUSH
39384: CALL_OW 88
// DialogueOff ;
39388: CALL_OW 7
// SikorskyAI = 1 ;
39392: LD_ADDR_EXP 20
39396: PUSH
39397: LD_INT 1
39399: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39400: LD_STRING M2
39402: PPUSH
39403: CALL_OW 337
// end ;
39407: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39408: LD_EXP 17
39412: PPUSH
39413: LD_INT 18
39415: PPUSH
39416: CALL_OW 308
39420: IFFALSE 39504
39422: GO 39424
39424: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39425: LD_EXP 16
39429: PPUSH
39430: LD_STRING D7-Sik-1
39432: PPUSH
39433: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39437: LD_EXP 1
39441: PPUSH
39442: LD_INT 24
39444: PPUSH
39445: CALL_OW 308
39449: PUSH
39450: LD_EXP 1
39454: PPUSH
39455: CALL_OW 310
39459: OR
39460: IFFALSE 39484
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39462: LD_EXP 16
39466: PPUSH
39467: LD_STRING D7a-Sik-1
39469: PPUSH
39470: CALL_OW 88
// SikorskyStatus = 1 ;
39474: LD_ADDR_EXP 21
39478: PUSH
39479: LD_INT 1
39481: ST_TO_ADDR
// end else
39482: GO 39504
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39484: LD_EXP 16
39488: PPUSH
39489: LD_STRING D7b-Sik-1
39491: PPUSH
39492: CALL_OW 88
// SikorskyStatus = 2 ;
39496: LD_ADDR_EXP 21
39500: PUSH
39501: LD_INT 2
39503: ST_TO_ADDR
// end ; end ;
39504: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39505: LD_EXP 36
39509: PUSH
39510: LD_INT 1
39512: EQUAL
39513: IFFALSE 39622
39515: GO 39517
39517: DISABLE
39518: LD_INT 0
39520: PPUSH
// begin enable ;
39521: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39522: LD_ADDR_VAR 0 1
39526: PUSH
39527: LD_INT 22
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PPUSH
39537: CALL_OW 69
39541: PUSH
39542: FOR_IN
39543: IFFALSE 39570
// if IsInArea ( i , RussianEscape ) then
39545: LD_VAR 0 1
39549: PPUSH
39550: LD_INT 22
39552: PPUSH
39553: CALL_OW 308
39557: IFFALSE 39568
// RemoveUnit ( i ) ;
39559: LD_VAR 0 1
39563: PPUSH
39564: CALL_OW 64
39568: GO 39542
39570: POP
39571: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39572: LD_ADDR_VAR 0 1
39576: PUSH
39577: LD_INT 22
39579: PUSH
39580: LD_INT 6
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PPUSH
39587: CALL_OW 69
39591: PUSH
39592: FOR_IN
39593: IFFALSE 39620
// if IsInArea ( i , RussianEscape ) then
39595: LD_VAR 0 1
39599: PPUSH
39600: LD_INT 22
39602: PPUSH
39603: CALL_OW 308
39607: IFFALSE 39618
// RemoveUnit ( i ) ;
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 64
39618: GO 39592
39620: POP
39621: POP
// end ; end_of_file
39622: PPOPN 1
39624: END
// on BuildingComplete ( building ) do var tmp , un ;
39625: LD_INT 0
39627: PPUSH
39628: PPUSH
// begin if GetSide ( building ) = 3 then
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 255
39638: PUSH
39639: LD_INT 3
39641: EQUAL
39642: IFFALSE 40129
// begin if GetBType ( building ) = b_depot then
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 266
39653: PUSH
39654: LD_INT 0
39656: EQUAL
39657: IFFALSE 39725
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39659: LD_VAR 0 1
39663: PPUSH
39664: CALL_OW 274
39668: PPUSH
39669: LD_INT 1
39671: PPUSH
39672: LD_INT 5000
39674: PPUSH
39675: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 274
39688: PPUSH
39689: LD_INT 2
39691: PPUSH
39692: LD_INT 5000
39694: PPUSH
39695: CALL_OW 277
// SetBName ( building , konev ) ;
39699: LD_VAR 0 1
39703: PPUSH
39704: LD_STRING konev
39706: PPUSH
39707: CALL_OW 500
// ruDepot = building ;
39711: LD_ADDR_EXP 28
39715: PUSH
39716: LD_VAR 0 1
39720: ST_TO_ADDR
// BuildRussianBase ;
39721: CALL 7617 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39725: LD_VAR 0 1
39729: PPUSH
39730: CALL_OW 266
39734: PUSH
39735: LD_INT 0
39737: EQUAL
39738: PUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: CALL_OW 266
39748: PUSH
39749: LD_INT 2
39751: EQUAL
39752: OR
39753: PUSH
39754: LD_VAR 0 1
39758: PPUSH
39759: CALL_OW 266
39763: PUSH
39764: LD_INT 4
39766: EQUAL
39767: OR
39768: IFFALSE 39779
// ComUpgrade ( building ) ;
39770: LD_VAR 0 1
39774: PPUSH
39775: CALL_OW 146
// if GetBType ( building ) = b_lab then
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 266
39788: PUSH
39789: LD_INT 6
39791: EQUAL
39792: IFFALSE 39843
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39794: LD_VAR 0 1
39798: PPUSH
39799: LD_INT 10
39801: PPUSH
39802: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39806: LD_VAR 0 1
39810: PPUSH
39811: LD_INT 12
39813: PPUSH
39814: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39818: LD_INT 3
39820: PPUSH
39821: LD_VAR 0 1
39825: PPUSH
39826: LD_INT 3
39828: PPUSH
39829: CALL 8172 0 3
// ruLab = building ;
39833: LD_ADDR_EXP 29
39837: PUSH
39838: LD_VAR 0 1
39842: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39843: LD_VAR 0 1
39847: PPUSH
39848: CALL_OW 266
39852: PUSH
39853: LD_INT 32
39855: EQUAL
39856: IFFALSE 39974
// begin uc_side = 3 ;
39858: LD_ADDR_OWVAR 20
39862: PUSH
39863: LD_INT 3
39865: ST_TO_ADDR
// uc_nation = 3 ;
39866: LD_ADDR_OWVAR 21
39870: PUSH
39871: LD_INT 3
39873: ST_TO_ADDR
// hc_gallery =  ;
39874: LD_ADDR_OWVAR 33
39878: PUSH
39879: LD_STRING 
39881: ST_TO_ADDR
// hc_name =  ;
39882: LD_ADDR_OWVAR 26
39886: PUSH
39887: LD_STRING 
39889: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39890: LD_INT 0
39892: PPUSH
39893: LD_INT 1
39895: PPUSH
39896: LD_EXP 25
39900: PPUSH
39901: LD_EXP 26
39905: PPUSH
39906: CALL_OW 12
39910: PPUSH
39911: CALL_OW 380
// un = CreateHuman ;
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: CALL_OW 44
39924: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39925: LD_VAR 0 3
39929: PPUSH
39930: LD_VAR 0 1
39934: PPUSH
39935: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39939: LD_VAR 0 1
39943: PPUSH
39944: LD_INT 43
39946: PUSH
39947: LD_INT 44
39949: PUSH
39950: LD_INT 46
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PPUSH
39961: LD_INT 3
39963: PPUSH
39964: CALL_OW 12
39968: ARRAY
39969: PPUSH
39970: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
39974: LD_VAR 0 1
39978: PPUSH
39979: CALL_OW 266
39983: PUSH
39984: LD_INT 33
39986: EQUAL
39987: IFFALSE 40024
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39989: LD_VAR 0 1
39993: PPUSH
39994: LD_INT 43
39996: PUSH
39997: LD_INT 44
39999: PUSH
40000: LD_INT 46
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PPUSH
40011: LD_INT 3
40013: PPUSH
40014: CALL_OW 12
40018: ARRAY
40019: PPUSH
40020: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 266
40033: PUSH
40034: LD_INT 24
40036: EQUAL
40037: IFFALSE 40047
// russianAI = 1 ;
40039: LD_ADDR_EXP 27
40043: PUSH
40044: LD_INT 1
40046: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40047: LD_EXP 31
40051: PUSH
40052: LD_INT 0
40054: GREATER
40055: IFFALSE 40129
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40057: LD_ADDR_EXP 31
40061: PUSH
40062: LD_EXP 31
40066: PPUSH
40067: LD_INT 1
40069: PPUSH
40070: CALL_OW 3
40074: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40075: LD_ADDR_EXP 31
40079: PUSH
40080: LD_EXP 31
40084: PPUSH
40085: LD_INT 1
40087: PPUSH
40088: CALL_OW 3
40092: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40093: LD_ADDR_EXP 31
40097: PUSH
40098: LD_EXP 31
40102: PPUSH
40103: LD_INT 1
40105: PPUSH
40106: CALL_OW 3
40110: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40111: LD_ADDR_EXP 31
40115: PUSH
40116: LD_EXP 31
40120: PPUSH
40121: LD_INT 1
40123: PPUSH
40124: CALL_OW 3
40128: ST_TO_ADDR
// end ; end ; end ;
40129: PPOPN 3
40131: END
// on UpgradeComplete ( building ) do var i ;
40132: LD_INT 0
40134: PPUSH
// begin if GetSide ( building ) = 3 then
40135: LD_VAR 0 1
40139: PPUSH
40140: CALL_OW 255
40144: PUSH
40145: LD_INT 3
40147: EQUAL
40148: IFFALSE 40329
// begin if GetBType ( building ) = b_factory then
40150: LD_VAR 0 1
40154: PPUSH
40155: CALL_OW 266
40159: PUSH
40160: LD_INT 3
40162: EQUAL
40163: IFFALSE 40230
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40165: LD_ADDR_VAR 0 2
40169: PUSH
40170: LD_INT 22
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 25
40182: PUSH
40183: LD_INT 3
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PPUSH
40194: CALL_OW 69
40198: PUSH
40199: FOR_IN
40200: IFFALSE 40218
// ComEnterUnit ( i , building ) ;
40202: LD_VAR 0 2
40206: PPUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 120
40216: GO 40199
40218: POP
40219: POP
// ruFab = building ;
40220: LD_ADDR_EXP 30
40224: PUSH
40225: LD_VAR 0 1
40229: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 266
40239: PUSH
40240: LD_INT 8
40242: EQUAL
40243: IFFALSE 40300
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40245: LD_ADDR_VAR 0 2
40249: PUSH
40250: LD_INT 22
40252: PUSH
40253: LD_INT 3
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 25
40262: PUSH
40263: LD_INT 4
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PPUSH
40274: CALL_OW 69
40278: PUSH
40279: FOR_IN
40280: IFFALSE 40298
// ComEnterUnit ( i , building ) ;
40282: LD_VAR 0 2
40286: PPUSH
40287: LD_VAR 0 1
40291: PPUSH
40292: CALL_OW 120
40296: GO 40279
40298: POP
40299: POP
// if GetBType ( building ) = b_warehouse then
40300: LD_VAR 0 1
40304: PPUSH
40305: CALL_OW 266
40309: PUSH
40310: LD_INT 1
40312: EQUAL
40313: IFFALSE 40329
// begin ComEnterUnit ( Borodin , building ) ;
40315: LD_EXP 24
40319: PPUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: CALL_OW 120
// end ; end ; end ;
40329: PPOPN 2
40331: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40332: LD_VAR 0 1
40336: PPUSH
40337: CALL_OW 247
40341: PUSH
40342: LD_INT 2
40344: EQUAL
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 263
40355: PUSH
40356: LD_INT 3
40358: EQUAL
40359: AND
40360: PUSH
40361: LD_EXP 41
40365: PUSH
40366: LD_INT 0
40368: EQUAL
40369: AND
40370: IFFALSE 40488
// begin varEvent1 = 1 ;
40372: LD_ADDR_EXP 41
40376: PUSH
40377: LD_INT 1
40379: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40380: LD_VAR 0 1
40384: PPUSH
40385: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40389: LD_INT 22
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 21
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 25
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 25
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 25
40434: PUSH
40435: LD_INT 3
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 25
40444: PUSH
40445: LD_INT 4
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: PPUSH
40464: CALL_OW 69
40468: PUSH
40469: LD_EXP 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: DIFF
40477: PPUSH
40478: LD_STRING DC-Sol1-1
40480: PPUSH
40481: LD_STRING DC-FSol1-1
40483: PPUSH
40484: CALL 7012 0 3
// end ; end ;
40488: PPOPN 1
40490: END
// on UnitDestroyed ( unit ) do var i ;
40491: LD_INT 0
40493: PPUSH
// begin if GetSide ( unit ) = 3 then
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 255
40503: PUSH
40504: LD_INT 3
40506: EQUAL
40507: IFFALSE 41277
// begin if GetType ( unit ) = unit_building then
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 247
40518: PUSH
40519: LD_INT 3
40521: EQUAL
40522: IFFALSE 41214
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40524: LD_VAR 0 1
40528: PPUSH
40529: CALL_OW 266
40533: PUSH
40534: LD_INT 31
40536: EQUAL
40537: PUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 266
40547: PUSH
40548: LD_INT 32
40550: EQUAL
40551: OR
40552: PUSH
40553: LD_VAR 0 1
40557: PPUSH
40558: CALL_OW 266
40562: PUSH
40563: LD_INT 36
40565: EQUAL
40566: OR
40567: PUSH
40568: LD_VAR 0 1
40572: PPUSH
40573: CALL_OW 266
40577: PUSH
40578: LD_INT 0
40580: EQUAL
40581: OR
40582: PUSH
40583: LD_VAR 0 1
40587: PPUSH
40588: CALL_OW 266
40592: PUSH
40593: LD_INT 24
40595: EQUAL
40596: OR
40597: PUSH
40598: LD_VAR 0 1
40602: PPUSH
40603: CALL_OW 266
40607: PUSH
40608: LD_INT 17
40610: EQUAL
40611: OR
40612: PUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 266
40622: PUSH
40623: LD_INT 25
40625: EQUAL
40626: OR
40627: PUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: CALL_OW 266
40637: PUSH
40638: LD_INT 19
40640: EQUAL
40641: OR
40642: PUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 266
40652: PUSH
40653: LD_INT 20
40655: EQUAL
40656: OR
40657: PUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 266
40667: PUSH
40668: LD_INT 18
40670: EQUAL
40671: OR
40672: PUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 266
40682: PUSH
40683: LD_INT 21
40685: EQUAL
40686: OR
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 266
40697: PUSH
40698: LD_INT 23
40700: EQUAL
40701: OR
40702: PUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 266
40712: PUSH
40713: LD_INT 16
40715: EQUAL
40716: OR
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 266
40727: PUSH
40728: LD_INT 6
40730: EQUAL
40731: OR
40732: PUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: CALL_OW 266
40742: PUSH
40743: LD_INT 29
40745: EQUAL
40746: OR
40747: PUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: CALL_OW 266
40757: PUSH
40758: LD_INT 26
40760: EQUAL
40761: OR
40762: PUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 266
40772: PUSH
40773: LD_INT 30
40775: EQUAL
40776: OR
40777: PUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: CALL_OW 266
40787: PUSH
40788: LD_INT 28
40790: EQUAL
40791: OR
40792: PUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 266
40802: PUSH
40803: LD_INT 27
40805: EQUAL
40806: OR
40807: PUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: CALL_OW 266
40817: PUSH
40818: LD_INT 33
40820: EQUAL
40821: OR
40822: PUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: CALL_OW 266
40832: PUSH
40833: LD_INT 2
40835: EQUAL
40836: OR
40837: PUSH
40838: LD_VAR 0 1
40842: PPUSH
40843: CALL_OW 266
40847: PUSH
40848: LD_INT 4
40850: EQUAL
40851: OR
40852: IFFALSE 40938
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40854: LD_ADDR_EXP 31
40858: PUSH
40859: LD_EXP 31
40863: PUSH
40864: LD_VAR 0 1
40868: PPUSH
40869: CALL_OW 266
40873: ADD
40874: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40875: LD_ADDR_EXP 31
40879: PUSH
40880: LD_EXP 31
40884: PUSH
40885: LD_VAR 0 1
40889: PPUSH
40890: CALL_OW 250
40894: ADD
40895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40896: LD_ADDR_EXP 31
40900: PUSH
40901: LD_EXP 31
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: CALL_OW 251
40915: ADD
40916: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40917: LD_ADDR_EXP 31
40921: PUSH
40922: LD_EXP 31
40926: PUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 254
40936: ADD
40937: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
40938: LD_VAR 0 1
40942: PPUSH
40943: CALL_OW 266
40947: PUSH
40948: LD_INT 1
40950: EQUAL
40951: IFFALSE 41030
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
40953: LD_ADDR_EXP 31
40957: PUSH
40958: LD_EXP 31
40962: PUSH
40963: LD_INT 0
40965: ADD
40966: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40967: LD_ADDR_EXP 31
40971: PUSH
40972: LD_EXP 31
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 250
40986: ADD
40987: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40988: LD_ADDR_EXP 31
40992: PUSH
40993: LD_EXP 31
40997: PUSH
40998: LD_VAR 0 1
41002: PPUSH
41003: CALL_OW 251
41007: ADD
41008: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41009: LD_ADDR_EXP 31
41013: PUSH
41014: LD_EXP 31
41018: PUSH
41019: LD_VAR 0 1
41023: PPUSH
41024: CALL_OW 254
41028: ADD
41029: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 266
41039: PUSH
41040: LD_INT 3
41042: EQUAL
41043: IFFALSE 41122
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41045: LD_ADDR_EXP 31
41049: PUSH
41050: LD_EXP 31
41054: PUSH
41055: LD_INT 2
41057: ADD
41058: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41059: LD_ADDR_EXP 31
41063: PUSH
41064: LD_EXP 31
41068: PUSH
41069: LD_VAR 0 1
41073: PPUSH
41074: CALL_OW 250
41078: ADD
41079: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41080: LD_ADDR_EXP 31
41084: PUSH
41085: LD_EXP 31
41089: PUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: CALL_OW 251
41099: ADD
41100: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41101: LD_ADDR_EXP 31
41105: PUSH
41106: LD_EXP 31
41110: PUSH
41111: LD_VAR 0 1
41115: PPUSH
41116: CALL_OW 254
41120: ADD
41121: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41122: LD_VAR 0 1
41126: PPUSH
41127: CALL_OW 266
41131: PUSH
41132: LD_INT 5
41134: EQUAL
41135: IFFALSE 41214
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41137: LD_ADDR_EXP 31
41141: PUSH
41142: LD_EXP 31
41146: PUSH
41147: LD_INT 4
41149: ADD
41150: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41151: LD_ADDR_EXP 31
41155: PUSH
41156: LD_EXP 31
41160: PUSH
41161: LD_VAR 0 1
41165: PPUSH
41166: CALL_OW 250
41170: ADD
41171: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41172: LD_ADDR_EXP 31
41176: PUSH
41177: LD_EXP 31
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 251
41191: ADD
41192: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41193: LD_ADDR_EXP 31
41197: PUSH
41198: LD_EXP 31
41202: PUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 254
41212: ADD
41213: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 247
41223: PUSH
41224: LD_INT 1
41226: EQUAL
41227: IFFALSE 41277
// begin for i in defenders_list do
41229: LD_ADDR_VAR 0 2
41233: PUSH
41234: LD_EXP 32
41238: PUSH
41239: FOR_IN
41240: IFFALSE 41275
// if i = unit then
41242: LD_VAR 0 2
41246: PUSH
41247: LD_VAR 0 1
41251: EQUAL
41252: IFFALSE 41273
// defenders_list = defenders_list diff [ unit ] ;
41254: LD_ADDR_EXP 32
41258: PUSH
41259: LD_EXP 32
41263: PUSH
41264: LD_VAR 0 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: DIFF
41272: ST_TO_ADDR
41273: GO 41239
41275: POP
41276: POP
// end ; end ; end ; end_of_file
41277: PPOPN 2
41279: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41280: GO 41282
41282: DISABLE
41283: LD_INT 0
41285: PPUSH
// begin enemyWayX = [ ] ;
41286: LD_ADDR_EXP 45
41290: PUSH
41291: EMPTY
41292: ST_TO_ADDR
// enemyWayY = [ ] ;
41293: LD_ADDR_EXP 46
41297: PUSH
41298: EMPTY
41299: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41300: LD_ADDR_VAR 0 1
41304: PUSH
41305: LD_INT 1
41307: PPUSH
41308: LD_INT 3
41310: PPUSH
41311: CALL_OW 12
41315: ST_TO_ADDR
// if rnd = 1 then
41316: LD_VAR 0 1
41320: PUSH
41321: LD_INT 1
41323: EQUAL
41324: IFFALSE 41364
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41326: LD_ADDR_EXP 45
41330: PUSH
41331: LD_INT 73
41333: PUSH
41334: LD_INT 46
41336: PUSH
41337: LD_INT 29
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41345: LD_ADDR_EXP 46
41349: PUSH
41350: LD_INT 71
41352: PUSH
41353: LD_INT 43
41355: PUSH
41356: LD_INT 29
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: ST_TO_ADDR
// end ; if rnd = 2 then
41364: LD_VAR 0 1
41368: PUSH
41369: LD_INT 2
41371: EQUAL
41372: IFFALSE 41396
// begin enemyWayX = [ 64 ] ;
41374: LD_ADDR_EXP 45
41378: PUSH
41379: LD_INT 64
41381: PUSH
41382: EMPTY
41383: LIST
41384: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41385: LD_ADDR_EXP 46
41389: PUSH
41390: LD_INT 43
41392: PUSH
41393: EMPTY
41394: LIST
41395: ST_TO_ADDR
// end ; if rnd = 3 then
41396: LD_VAR 0 1
41400: PUSH
41401: LD_INT 3
41403: EQUAL
41404: IFFALSE 41428
// begin enemyWayX = [ 80 ] ;
41406: LD_ADDR_EXP 45
41410: PUSH
41411: LD_INT 80
41413: PUSH
41414: EMPTY
41415: LIST
41416: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41417: LD_ADDR_EXP 46
41421: PUSH
41422: LD_INT 28
41424: PUSH
41425: EMPTY
41426: LIST
41427: ST_TO_ADDR
// end ; enable ;
41428: ENABLE
// end ;
41429: PPOPN 1
41431: END
// every 0 0$1 do
41432: GO 41434
41434: DISABLE
// begin enable ;
41435: ENABLE
// if escapeAvalaible = 0 then
41436: LD_EXP 36
41440: PUSH
41441: LD_INT 0
41443: EQUAL
41444: IFFALSE 41456
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41446: LD_INT 3
41448: PPUSH
41449: LD_INT 6
41451: PPUSH
41452: CALL 8413 0 2
// if escapeAvalaible = 0 then
41456: LD_EXP 36
41460: PUSH
41461: LD_INT 0
41463: EQUAL
41464: IFFALSE 41476
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41466: LD_INT 1
41468: PPUSH
41469: LD_INT 24
41471: PPUSH
41472: CALL 9073 0 2
// if russianAI = 1 then
41476: LD_EXP 27
41480: PUSH
41481: LD_INT 1
41483: EQUAL
41484: IFFALSE 41554
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41486: LD_INT 3
41488: PPUSH
41489: LD_INT 7
41491: PPUSH
41492: LD_INT 6
41494: PPUSH
41495: LD_EXP 29
41499: PPUSH
41500: CALL 11511 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41504: LD_INT 3
41506: PPUSH
41507: LD_EXP 28
41511: PPUSH
41512: LD_INT 6
41514: PPUSH
41515: LD_EXP 31
41519: PPUSH
41520: CALL 11105 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41524: LD_INT 3
41526: PPUSH
41527: LD_INT 26
41529: PPUSH
41530: LD_EXP 45
41534: PPUSH
41535: LD_EXP 46
41539: PPUSH
41540: CALL 9973 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41544: LD_INT 3
41546: PPUSH
41547: LD_INT 1
41549: PPUSH
41550: CALL 12055 0 2
// end ; if SikorskyArrive = 1 then
41554: LD_EXP 18
41558: PUSH
41559: LD_INT 1
41561: EQUAL
41562: IFFALSE 41580
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41564: LD_INT 3
41566: PPUSH
41567: LD_INT 10
41569: PPUSH
41570: LD_INT 53
41572: PPUSH
41573: LD_INT 59
41575: PPUSH
41576: CALL 9770 0 4
// end ;
41580: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41581: LD_EXP 27
41585: PUSH
41586: LD_INT 1
41588: EQUAL
41589: IFFALSE 41865
41591: GO 41593
41593: DISABLE
41594: LD_INT 0
41596: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41597: LD_ADDR_VAR 0 1
41601: PUSH
41602: LD_INT 22
41604: PUSH
41605: LD_INT 3
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 21
41614: PUSH
41615: LD_INT 3
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 30
41624: PUSH
41625: LD_INT 32
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 35
41640: PUSH
41641: LD_INT 43
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 35
41650: PUSH
41651: LD_INT 44
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 35
41660: PUSH
41661: LD_INT 46
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: PPUSH
41684: CALL_OW 69
41688: PUSH
41689: FOR_IN
41690: IFFALSE 41729
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41692: LD_VAR 0 1
41696: PPUSH
41697: LD_INT 43
41699: PUSH
41700: LD_INT 44
41702: PUSH
41703: LD_INT 46
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PPUSH
41714: LD_INT 3
41716: PPUSH
41717: CALL_OW 12
41721: ARRAY
41722: PPUSH
41723: CALL_OW 431
41727: GO 41689
41729: POP
41730: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41731: LD_ADDR_VAR 0 1
41735: PUSH
41736: LD_INT 22
41738: PUSH
41739: LD_INT 3
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 21
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 30
41758: PUSH
41759: LD_INT 33
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 35
41774: PUSH
41775: LD_INT 43
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 35
41784: PUSH
41785: LD_INT 44
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 35
41794: PUSH
41795: LD_INT 46
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: PPUSH
41818: CALL_OW 69
41822: PUSH
41823: FOR_IN
41824: IFFALSE 41863
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41826: LD_VAR 0 1
41830: PPUSH
41831: LD_INT 43
41833: PUSH
41834: LD_INT 44
41836: PUSH
41837: LD_INT 46
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PPUSH
41848: LD_INT 3
41850: PPUSH
41851: CALL_OW 12
41855: ARRAY
41856: PPUSH
41857: CALL_OW 431
41861: GO 41823
41863: POP
41864: POP
// end ;
41865: PPOPN 1
41867: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41868: LD_EXP 24
41872: PPUSH
41873: CALL_OW 310
41877: NOT
41878: PUSH
41879: LD_EXP 28
41883: PPUSH
41884: CALL_OW 302
41888: AND
41889: PUSH
41890: LD_EXP 28
41894: PPUSH
41895: CALL_OW 255
41899: PUSH
41900: LD_INT 3
41902: EQUAL
41903: AND
41904: IFFALSE 41924
41906: GO 41908
41908: DISABLE
// begin enable ;
41909: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41910: LD_EXP 24
41914: PPUSH
41915: LD_EXP 28
41919: PPUSH
41920: CALL_OW 120
// end ;
41924: END
// every 0 0$1 trigger SikorskyAI = 1 do
41925: LD_EXP 20
41929: PUSH
41930: LD_INT 1
41932: EQUAL
41933: IFFALSE 41968
41935: GO 41937
41937: DISABLE
// begin enable ;
41938: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
41939: LD_INT 4
41941: PPUSH
41942: LD_INT 10
41944: PPUSH
41945: LD_INT 93
41947: PPUSH
41948: LD_INT 93
41950: PPUSH
41951: CALL 9770 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
41955: LD_INT 4
41957: PPUSH
41958: LD_INT 11
41960: PPUSH
41961: LD_INT 3
41963: PPUSH
41964: CALL 16267 0 3
// end ;
41968: END
// every 0 0$1 trigger SikorskyAI = 1 do
41969: LD_EXP 20
41973: PUSH
41974: LD_INT 1
41976: EQUAL
41977: IFFALSE 41989
41979: GO 41981
41981: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
41982: LD_INT 4
41984: PPUSH
41985: CALL 10777 0 1
41989: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
41990: LD_EXP 27
41994: PUSH
41995: LD_INT 1
41997: EQUAL
41998: PUSH
41999: LD_EXP 30
42003: PPUSH
42004: CALL_OW 302
42008: AND
42009: PUSH
42010: LD_EXP 30
42014: PPUSH
42015: CALL_OW 255
42019: PUSH
42020: LD_INT 3
42022: EQUAL
42023: AND
42024: PUSH
42025: LD_INT 22
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 21
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 33
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: PPUSH
42060: CALL_OW 69
42064: PUSH
42065: LD_INT 0
42067: EQUAL
42068: AND
42069: IFFALSE 42303
42071: GO 42073
42073: DISABLE
// begin enable ;
42074: ENABLE
// if Difficulty = 1 then
42075: LD_OWVAR 67
42079: PUSH
42080: LD_INT 1
42082: EQUAL
42083: IFFALSE 42151
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42085: LD_INT 3
42087: PPUSH
42088: LD_EXP 30
42092: PPUSH
42093: LD_INT 5
42095: PPUSH
42096: LD_INT 8
42098: PPUSH
42099: CALL_OW 12
42103: PPUSH
42104: LD_INT 43
42106: PUSH
42107: LD_INT 43
42109: PUSH
42110: LD_INT 43
42112: PUSH
42113: LD_INT 43
42115: PUSH
42116: LD_INT 44
42118: PUSH
42119: LD_INT 44
42121: PUSH
42122: LD_INT 44
42124: PUSH
42125: LD_INT 46
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: PPUSH
42138: LD_INT 1
42140: PPUSH
42141: LD_INT 3
42143: PPUSH
42144: LD_INT 24
42146: PPUSH
42147: CALL 9616 0 7
// if Difficulty = 2 then
42151: LD_OWVAR 67
42155: PUSH
42156: LD_INT 2
42158: EQUAL
42159: IFFALSE 42227
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42161: LD_INT 3
42163: PPUSH
42164: LD_EXP 30
42168: PPUSH
42169: LD_INT 6
42171: PPUSH
42172: LD_INT 8
42174: PPUSH
42175: CALL_OW 12
42179: PPUSH
42180: LD_INT 43
42182: PUSH
42183: LD_INT 43
42185: PUSH
42186: LD_INT 44
42188: PUSH
42189: LD_INT 44
42191: PUSH
42192: LD_INT 44
42194: PUSH
42195: LD_INT 44
42197: PUSH
42198: LD_INT 46
42200: PUSH
42201: LD_INT 46
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: PPUSH
42214: LD_INT 1
42216: PPUSH
42217: LD_INT 3
42219: PPUSH
42220: LD_INT 24
42222: PPUSH
42223: CALL 9616 0 7
// if Difficulty = 3 then
42227: LD_OWVAR 67
42231: PUSH
42232: LD_INT 3
42234: EQUAL
42235: IFFALSE 42303
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42237: LD_INT 3
42239: PPUSH
42240: LD_EXP 30
42244: PPUSH
42245: LD_INT 7
42247: PPUSH
42248: LD_INT 8
42250: PPUSH
42251: CALL_OW 12
42255: PPUSH
42256: LD_INT 43
42258: PUSH
42259: LD_INT 43
42261: PUSH
42262: LD_INT 44
42264: PUSH
42265: LD_INT 44
42267: PUSH
42268: LD_INT 44
42270: PUSH
42271: LD_INT 46
42273: PUSH
42274: LD_INT 46
42276: PUSH
42277: LD_INT 46
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: PPUSH
42290: LD_INT 1
42292: PPUSH
42293: LD_INT 3
42295: PPUSH
42296: LD_INT 24
42298: PPUSH
42299: CALL 9616 0 7
// end ;
42303: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42304: LD_EXP 38
42308: PUSH
42309: LD_INT 1
42311: EQUAL
42312: IFFALSE 42394
42314: GO 42316
42316: DISABLE
42317: LD_INT 0
42319: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42320: LD_ADDR_VAR 0 1
42324: PUSH
42325: LD_INT 22
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 21
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 24
42350: PUSH
42351: LD_INT 650
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: PPUSH
42367: CALL_OW 69
42371: PUSH
42372: FOR_IN
42373: IFFALSE 42392
// ComMoveXY ( i , 51 , 12 ) ;
42375: LD_VAR 0 1
42379: PPUSH
42380: LD_INT 51
42382: PPUSH
42383: LD_INT 12
42385: PPUSH
42386: CALL_OW 111
42390: GO 42372
42392: POP
42393: POP
// end ; end_of_file
42394: PPOPN 1
42396: END
// every 3 3$20 trigger firstAttack = 1 do
42397: LD_EXP 33
42401: PUSH
42402: LD_INT 1
42404: EQUAL
42405: IFFALSE 42511
42407: GO 42409
42409: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42410: LD_INT 6
42412: PPUSH
42413: LD_INT 3
42415: PPUSH
42416: LD_INT 5
42418: PPUSH
42419: LD_INT 6
42421: PPUSH
42422: CALL_OW 12
42426: PUSH
42427: LD_INT 5
42429: PPUSH
42430: LD_INT 6
42432: PPUSH
42433: CALL_OW 12
42437: PUSH
42438: LD_INT 5
42440: PPUSH
42441: LD_INT 6
42443: PPUSH
42444: CALL_OW 12
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: PUSH
42454: LD_OWVAR 67
42458: ARRAY
42459: PPUSH
42460: LD_INT 0
42462: PPUSH
42463: LD_INT 0
42465: PPUSH
42466: LD_INT 0
42468: PPUSH
42469: LD_INT 0
42471: PPUSH
42472: LD_EXP 25
42476: PPUSH
42477: LD_EXP 26
42481: PPUSH
42482: CALL_OW 12
42486: PPUSH
42487: LD_INT 16
42489: PPUSH
42490: LD_INT 7
42492: PPUSH
42493: LD_INT 1
42495: PPUSH
42496: LD_INT 1
42498: PPUSH
42499: LD_INT 3
42501: PPUSH
42502: CALL_OW 12
42506: PPUSH
42507: CALL 12285 0 12
42511: END
// every 3 3$40 trigger firstAttack = 1 do
42512: LD_EXP 33
42516: PUSH
42517: LD_INT 1
42519: EQUAL
42520: IFFALSE 42612
42522: GO 42524
42524: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42525: LD_INT 16
42527: PPUSH
42528: LD_INT 6
42530: PPUSH
42531: LD_INT 3
42533: PPUSH
42534: LD_INT 4
42536: PPUSH
42537: CALL_OW 12
42541: PUSH
42542: LD_INT 4
42544: PPUSH
42545: LD_INT 5
42547: PPUSH
42548: CALL_OW 12
42552: PUSH
42553: LD_INT 5
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: PUSH
42561: LD_OWVAR 67
42565: ARRAY
42566: PPUSH
42567: LD_EXP 25
42571: PPUSH
42572: LD_EXP 26
42576: PPUSH
42577: CALL_OW 12
42581: PPUSH
42582: LD_INT 3
42584: PPUSH
42585: LD_INT 1
42587: PPUSH
42588: LD_INT 3
42590: PPUSH
42591: LD_INT 44
42593: PUSH
42594: LD_INT 46
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PPUSH
42601: EMPTY
42602: PPUSH
42603: EMPTY
42604: PPUSH
42605: LD_INT 1
42607: PPUSH
42608: CALL 14578 0 11
42612: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
42613: LD_EXP 33
42617: PUSH
42618: LD_INT 1
42620: EQUAL
42621: PUSH
42622: LD_EXP 39
42626: PUSH
42627: LD_INT 0
42629: EQUAL
42630: AND
42631: IFFALSE 42737
42633: GO 42635
42635: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42636: LD_INT 6
42638: PPUSH
42639: LD_INT 3
42641: PPUSH
42642: LD_INT 5
42644: PPUSH
42645: LD_INT 6
42647: PPUSH
42648: CALL_OW 12
42652: PUSH
42653: LD_INT 5
42655: PPUSH
42656: LD_INT 6
42658: PPUSH
42659: CALL_OW 12
42663: PUSH
42664: LD_INT 5
42666: PPUSH
42667: LD_INT 6
42669: PPUSH
42670: CALL_OW 12
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: PUSH
42680: LD_OWVAR 67
42684: ARRAY
42685: PPUSH
42686: LD_INT 0
42688: PPUSH
42689: LD_INT 0
42691: PPUSH
42692: LD_INT 0
42694: PPUSH
42695: LD_INT 0
42697: PPUSH
42698: LD_EXP 25
42702: PPUSH
42703: LD_EXP 26
42707: PPUSH
42708: CALL_OW 12
42712: PPUSH
42713: LD_INT 16
42715: PPUSH
42716: LD_INT 7
42718: PPUSH
42719: LD_INT 1
42721: PPUSH
42722: LD_INT 1
42724: PPUSH
42725: LD_INT 3
42727: PPUSH
42728: CALL_OW 12
42732: PPUSH
42733: CALL 12285 0 12
42737: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
42738: LD_EXP 33
42742: PUSH
42743: LD_INT 1
42745: EQUAL
42746: PUSH
42747: LD_EXP 39
42751: PUSH
42752: LD_INT 0
42754: EQUAL
42755: AND
42756: IFFALSE 42852
42758: GO 42760
42760: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42761: LD_INT 16
42763: PPUSH
42764: LD_INT 6
42766: PPUSH
42767: LD_INT 5
42769: PPUSH
42770: LD_INT 6
42772: PPUSH
42773: CALL_OW 12
42777: PUSH
42778: LD_INT 6
42780: PPUSH
42781: LD_INT 7
42783: PPUSH
42784: CALL_OW 12
42788: PUSH
42789: LD_INT 7
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: PUSH
42797: LD_OWVAR 67
42801: ARRAY
42802: PPUSH
42803: LD_EXP 25
42807: PPUSH
42808: LD_EXP 26
42812: PPUSH
42813: CALL_OW 12
42817: PPUSH
42818: LD_INT 3
42820: PPUSH
42821: LD_INT 1
42823: PPUSH
42824: LD_INT 3
42826: PPUSH
42827: LD_INT 43
42829: PUSH
42830: LD_INT 44
42832: PUSH
42833: LD_INT 46
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: PPUSH
42841: EMPTY
42842: PPUSH
42843: EMPTY
42844: PPUSH
42845: LD_INT 1
42847: PPUSH
42848: CALL 14578 0 11
42852: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
42853: LD_EXP 33
42857: PUSH
42858: LD_INT 1
42860: EQUAL
42861: PUSH
42862: LD_EXP 39
42866: PUSH
42867: LD_INT 0
42869: EQUAL
42870: AND
42871: IFFALSE 42947
42873: GO 42875
42875: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42876: LD_INT 16
42878: PPUSH
42879: LD_INT 6
42881: PPUSH
42882: LD_INT 5
42884: PUSH
42885: LD_INT 6
42887: PUSH
42888: LD_INT 7
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: PUSH
42896: LD_OWVAR 67
42900: ARRAY
42901: PPUSH
42902: LD_EXP 25
42906: PPUSH
42907: LD_EXP 26
42911: PPUSH
42912: CALL_OW 12
42916: PPUSH
42917: LD_INT 3
42919: PPUSH
42920: LD_INT 1
42922: PPUSH
42923: LD_INT 3
42925: PPUSH
42926: LD_INT 44
42928: PUSH
42929: LD_INT 46
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PPUSH
42936: EMPTY
42937: PPUSH
42938: EMPTY
42939: PPUSH
42940: LD_INT 1
42942: PPUSH
42943: CALL 14578 0 11
42947: END
// every 1 1$00 trigger secondAttack = 1 do
42948: LD_EXP 34
42952: PUSH
42953: LD_INT 1
42955: EQUAL
42956: IFFALSE 43038
42958: GO 42960
42960: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42961: LD_INT 6
42963: PPUSH
42964: LD_INT 3
42966: PPUSH
42967: LD_INT 3
42969: PUSH
42970: LD_INT 4
42972: PUSH
42973: LD_INT 5
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: PUSH
42981: LD_OWVAR 67
42985: ARRAY
42986: PPUSH
42987: LD_INT 0
42989: PPUSH
42990: LD_INT 0
42992: PPUSH
42993: LD_INT 0
42995: PPUSH
42996: LD_INT 0
42998: PPUSH
42999: LD_EXP 25
43003: PPUSH
43004: LD_EXP 26
43008: PPUSH
43009: CALL_OW 12
43013: PPUSH
43014: LD_INT 16
43016: PPUSH
43017: LD_INT 7
43019: PPUSH
43020: LD_INT 1
43022: PPUSH
43023: LD_INT 1
43025: PPUSH
43026: LD_INT 3
43028: PPUSH
43029: CALL_OW 12
43033: PPUSH
43034: CALL 12285 0 12
43038: END
// every 1 1$00 trigger secondAttack = 1 do
43039: LD_EXP 34
43043: PUSH
43044: LD_INT 1
43046: EQUAL
43047: IFFALSE 43151
43049: GO 43051
43051: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43052: LD_INT 16
43054: PPUSH
43055: LD_INT 6
43057: PPUSH
43058: LD_INT 5
43060: PPUSH
43061: LD_INT 8
43063: PPUSH
43064: CALL_OW 12
43068: PUSH
43069: LD_INT 6
43071: PPUSH
43072: LD_INT 9
43074: PPUSH
43075: CALL_OW 12
43079: PUSH
43080: LD_INT 7
43082: PPUSH
43083: LD_INT 9
43085: PPUSH
43086: CALL_OW 12
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: PUSH
43096: LD_OWVAR 67
43100: ARRAY
43101: PPUSH
43102: LD_EXP 25
43106: PPUSH
43107: LD_EXP 26
43111: PPUSH
43112: CALL_OW 12
43116: PPUSH
43117: LD_INT 3
43119: PPUSH
43120: LD_INT 1
43122: PPUSH
43123: LD_INT 3
43125: PPUSH
43126: LD_INT 43
43128: PUSH
43129: LD_INT 44
43131: PUSH
43132: LD_INT 46
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: PPUSH
43140: EMPTY
43141: PPUSH
43142: EMPTY
43143: PPUSH
43144: LD_INT 1
43146: PPUSH
43147: CALL 14578 0 11
43151: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43152: LD_EXP 18
43156: PUSH
43157: LD_INT 0
43159: EQUAL
43160: IFFALSE 43242
43162: GO 43164
43164: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43165: LD_INT 6
43167: PPUSH
43168: LD_INT 3
43170: PPUSH
43171: LD_INT 3
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: LD_INT 5
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: PUSH
43185: LD_OWVAR 67
43189: ARRAY
43190: PPUSH
43191: LD_INT 0
43193: PPUSH
43194: LD_INT 0
43196: PPUSH
43197: LD_INT 0
43199: PPUSH
43200: LD_INT 0
43202: PPUSH
43203: LD_EXP 25
43207: PPUSH
43208: LD_EXP 26
43212: PPUSH
43213: CALL_OW 12
43217: PPUSH
43218: LD_INT 16
43220: PPUSH
43221: LD_INT 7
43223: PPUSH
43224: LD_INT 1
43226: PPUSH
43227: LD_INT 1
43229: PPUSH
43230: LD_INT 3
43232: PPUSH
43233: CALL_OW 12
43237: PPUSH
43238: CALL 12285 0 12
43242: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43243: LD_EXP 18
43247: PUSH
43248: LD_INT 0
43250: EQUAL
43251: IFFALSE 43351
43253: GO 43255
43255: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43256: LD_INT 16
43258: PPUSH
43259: LD_INT 6
43261: PPUSH
43262: LD_INT 5
43264: PPUSH
43265: LD_INT 8
43267: PPUSH
43268: CALL_OW 12
43272: PUSH
43273: LD_INT 6
43275: PPUSH
43276: LD_INT 9
43278: PPUSH
43279: CALL_OW 12
43283: PUSH
43284: LD_INT 7
43286: PPUSH
43287: LD_INT 9
43289: PPUSH
43290: CALL_OW 12
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: PUSH
43300: LD_OWVAR 67
43304: ARRAY
43305: PPUSH
43306: LD_EXP 25
43310: PPUSH
43311: LD_EXP 26
43315: PPUSH
43316: CALL_OW 12
43320: PPUSH
43321: LD_INT 3
43323: PPUSH
43324: LD_INT 1
43326: PPUSH
43327: LD_INT 3
43329: PPUSH
43330: LD_INT 44
43332: PUSH
43333: LD_INT 46
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PPUSH
43340: EMPTY
43341: PPUSH
43342: EMPTY
43343: PPUSH
43344: LD_INT 1
43346: PPUSH
43347: CALL 14578 0 11
43351: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43352: LD_EXP 18
43356: PUSH
43357: LD_INT 0
43359: EQUAL
43360: IFFALSE 43442
43362: GO 43364
43364: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43365: LD_INT 6
43367: PPUSH
43368: LD_INT 3
43370: PPUSH
43371: LD_INT 3
43373: PUSH
43374: LD_INT 4
43376: PUSH
43377: LD_INT 5
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: PUSH
43385: LD_OWVAR 67
43389: ARRAY
43390: PPUSH
43391: LD_INT 0
43393: PPUSH
43394: LD_INT 0
43396: PPUSH
43397: LD_INT 0
43399: PPUSH
43400: LD_INT 0
43402: PPUSH
43403: LD_EXP 25
43407: PPUSH
43408: LD_EXP 26
43412: PPUSH
43413: CALL_OW 12
43417: PPUSH
43418: LD_INT 16
43420: PPUSH
43421: LD_INT 7
43423: PPUSH
43424: LD_INT 1
43426: PPUSH
43427: LD_INT 1
43429: PPUSH
43430: LD_INT 3
43432: PPUSH
43433: CALL_OW 12
43437: PPUSH
43438: CALL 12285 0 12
43442: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43443: LD_EXP 18
43447: PUSH
43448: LD_INT 0
43450: EQUAL
43451: IFFALSE 43551
43453: GO 43455
43455: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43456: LD_INT 16
43458: PPUSH
43459: LD_INT 6
43461: PPUSH
43462: LD_INT 5
43464: PPUSH
43465: LD_INT 8
43467: PPUSH
43468: CALL_OW 12
43472: PUSH
43473: LD_INT 6
43475: PPUSH
43476: LD_INT 9
43478: PPUSH
43479: CALL_OW 12
43483: PUSH
43484: LD_INT 7
43486: PPUSH
43487: LD_INT 9
43489: PPUSH
43490: CALL_OW 12
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: PUSH
43500: LD_OWVAR 67
43504: ARRAY
43505: PPUSH
43506: LD_EXP 25
43510: PPUSH
43511: LD_EXP 26
43515: PPUSH
43516: CALL_OW 12
43520: PPUSH
43521: LD_INT 3
43523: PPUSH
43524: LD_INT 1
43526: PPUSH
43527: LD_INT 3
43529: PPUSH
43530: LD_INT 44
43532: PUSH
43533: LD_INT 46
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PPUSH
43540: EMPTY
43541: PPUSH
43542: EMPTY
43543: PPUSH
43544: LD_INT 1
43546: PPUSH
43547: CALL 14578 0 11
43551: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43552: LD_EXP 18
43556: PUSH
43557: LD_INT 0
43559: EQUAL
43560: IFFALSE 43642
43562: GO 43564
43564: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43565: LD_INT 6
43567: PPUSH
43568: LD_INT 3
43570: PPUSH
43571: LD_INT 3
43573: PUSH
43574: LD_INT 4
43576: PUSH
43577: LD_INT 5
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: PUSH
43585: LD_OWVAR 67
43589: ARRAY
43590: PPUSH
43591: LD_INT 0
43593: PPUSH
43594: LD_INT 0
43596: PPUSH
43597: LD_INT 0
43599: PPUSH
43600: LD_INT 0
43602: PPUSH
43603: LD_EXP 25
43607: PPUSH
43608: LD_EXP 26
43612: PPUSH
43613: CALL_OW 12
43617: PPUSH
43618: LD_INT 16
43620: PPUSH
43621: LD_INT 7
43623: PPUSH
43624: LD_INT 1
43626: PPUSH
43627: LD_INT 1
43629: PPUSH
43630: LD_INT 3
43632: PPUSH
43633: CALL_OW 12
43637: PPUSH
43638: CALL 12285 0 12
43642: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43643: LD_EXP 18
43647: PUSH
43648: LD_INT 0
43650: EQUAL
43651: IFFALSE 43751
43653: GO 43655
43655: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43656: LD_INT 16
43658: PPUSH
43659: LD_INT 6
43661: PPUSH
43662: LD_INT 5
43664: PPUSH
43665: LD_INT 8
43667: PPUSH
43668: CALL_OW 12
43672: PUSH
43673: LD_INT 6
43675: PPUSH
43676: LD_INT 9
43678: PPUSH
43679: CALL_OW 12
43683: PUSH
43684: LD_INT 7
43686: PPUSH
43687: LD_INT 9
43689: PPUSH
43690: CALL_OW 12
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: PUSH
43700: LD_OWVAR 67
43704: ARRAY
43705: PPUSH
43706: LD_EXP 25
43710: PPUSH
43711: LD_EXP 26
43715: PPUSH
43716: CALL_OW 12
43720: PPUSH
43721: LD_INT 3
43723: PPUSH
43724: LD_INT 1
43726: PPUSH
43727: LD_INT 3
43729: PPUSH
43730: LD_INT 44
43732: PUSH
43733: LD_INT 46
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PPUSH
43740: EMPTY
43741: PPUSH
43742: EMPTY
43743: PPUSH
43744: LD_INT 1
43746: PPUSH
43747: CALL 14578 0 11
43751: END
// every 0 0$1 trigger timerStatus = 1 do
43752: LD_EXP 35
43756: PUSH
43757: LD_INT 1
43759: EQUAL
43760: IFFALSE 43820
43762: GO 43764
43764: DISABLE
// begin repeat wait ( 0 0$1 ) ;
43765: LD_INT 35
43767: PPUSH
43768: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43772: LD_ADDR_OWVAR 47
43776: PUSH
43777: LD_STRING #Am08-1
43779: PUSH
43780: LD_EXP 19
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43789: LD_ADDR_EXP 19
43793: PUSH
43794: LD_EXP 19
43798: PUSH
43799: LD_INT 35
43801: MINUS
43802: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
43803: LD_EXP 19
43807: PUSH
43808: LD_INT 0
43810: EQUAL
43811: IFFALSE 43765
// display_strings := [ ] ;
43813: LD_ADDR_OWVAR 47
43817: PUSH
43818: EMPTY
43819: ST_TO_ADDR
// end ; end_of_file
43820: END
// every 1 1$0 do
43821: GO 43823
43823: DISABLE
// begin if supply <= 13 and supply > 7 then
43824: LD_EXP 40
43828: PUSH
43829: LD_INT 13
43831: LESSEQUAL
43832: PUSH
43833: LD_EXP 40
43837: PUSH
43838: LD_INT 7
43840: GREATER
43841: AND
43842: IFFALSE 43865
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
43844: LD_INT 3
43846: PPUSH
43847: LD_INT 5
43849: PPUSH
43850: CALL_OW 12
43854: PPUSH
43855: LD_INT 5
43857: PPUSH
43858: LD_INT 1
43860: PPUSH
43861: CALL_OW 55
// if supply <= 7 and supply > 4 then
43865: LD_EXP 40
43869: PUSH
43870: LD_INT 7
43872: LESSEQUAL
43873: PUSH
43874: LD_EXP 40
43878: PUSH
43879: LD_INT 4
43881: GREATER
43882: AND
43883: IFFALSE 43906
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
43885: LD_INT 3
43887: PPUSH
43888: LD_INT 5
43890: PPUSH
43891: CALL_OW 12
43895: PPUSH
43896: LD_INT 20
43898: PPUSH
43899: LD_INT 1
43901: PPUSH
43902: CALL_OW 55
// if supply <= 4 and supply > 0 then
43906: LD_EXP 40
43910: PUSH
43911: LD_INT 4
43913: LESSEQUAL
43914: PUSH
43915: LD_EXP 40
43919: PUSH
43920: LD_INT 0
43922: GREATER
43923: AND
43924: IFFALSE 43947
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
43926: LD_INT 3
43928: PPUSH
43929: LD_INT 5
43931: PPUSH
43932: CALL_OW 12
43936: PPUSH
43937: LD_INT 21
43939: PPUSH
43940: LD_INT 1
43942: PPUSH
43943: CALL_OW 55
// if supply > 0 then
43947: LD_EXP 40
43951: PUSH
43952: LD_INT 0
43954: GREATER
43955: IFFALSE 43972
// begin supply = supply - 1 ;
43957: LD_ADDR_EXP 40
43961: PUSH
43962: LD_EXP 40
43966: PUSH
43967: LD_INT 1
43969: MINUS
43970: ST_TO_ADDR
// enable ;
43971: ENABLE
// end ; end ; end_of_file
43972: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
43973: LD_EXP 39
43977: PUSH
43978: LD_INT 1
43980: EQUAL
43981: PUSH
43982: LD_EXP 1
43986: PPUSH
43987: CALL_OW 301
43991: AND
43992: IFFALSE 44004
43994: GO 43996
43996: DISABLE
// YouLost ( JMM ) ;
43997: LD_STRING JMM
43999: PPUSH
44000: CALL_OW 104
44004: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44005: LD_EXP 18
44009: PUSH
44010: LD_INT 1
44012: EQUAL
44013: PUSH
44014: LD_EXP 16
44018: PPUSH
44019: CALL_OW 301
44023: AND
44024: IFFALSE 44056
44026: GO 44028
44028: DISABLE
// begin DialogueOn ;
44029: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44033: LD_EXP 23
44037: PPUSH
44038: LD_STRING D8a-Pow-1
44040: PPUSH
44041: CALL_OW 94
// DialogueOff ;
44045: CALL_OW 7
// YouLost ( Dismissed ) ;
44049: LD_STRING Dismissed
44051: PPUSH
44052: CALL_OW 104
// end ;
44056: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44057: LD_INT 22
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: LD_INT 30
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 30
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PPUSH
44099: CALL_OW 69
44103: PUSH
44104: LD_INT 0
44106: EQUAL
44107: IFFALSE 44119
44109: GO 44111
44111: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44112: LD_STRING Destroyed
44114: PPUSH
44115: CALL_OW 104
44119: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
44120: LD_EXP 24
44124: PPUSH
44125: CALL_OW 301
44129: PUSH
44130: LD_INT 22
44132: PUSH
44133: LD_INT 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 21
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PPUSH
44154: CALL_OW 69
44158: PUSH
44159: LD_INT 14
44161: PUSH
44162: LD_INT 13
44164: PUSH
44165: LD_INT 12
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: PUSH
44173: LD_OWVAR 67
44177: ARRAY
44178: LESS
44179: AND
44180: IFFALSE 44628
44182: GO 44184
44184: DISABLE
44185: LD_INT 0
44187: PPUSH
44188: PPUSH
// begin russianAI = 0 ;
44189: LD_ADDR_EXP 27
44193: PUSH
44194: LD_INT 0
44196: ST_TO_ADDR
// escapeAvalaible = 1 ;
44197: LD_ADDR_EXP 36
44201: PUSH
44202: LD_INT 1
44204: ST_TO_ADDR
// InGameOn ;
44205: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44209: LD_INT 3
44211: PPUSH
44212: LD_INT 1
44214: PPUSH
44215: LD_INT 1
44217: PPUSH
44218: LD_INT 0
44220: PPUSH
44221: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44225: LD_INT 6
44227: PPUSH
44228: LD_INT 1
44230: PPUSH
44231: LD_INT 1
44233: PPUSH
44234: LD_INT 0
44236: PPUSH
44237: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44241: LD_INT 3
44243: PPUSH
44244: LD_INT 1
44246: PPUSH
44247: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44251: LD_INT 97
44253: PPUSH
44254: LD_INT 91
44256: PPUSH
44257: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44261: LD_INT 22
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 21
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PPUSH
44285: CALL_OW 69
44289: PPUSH
44290: CALL_OW 121
// wait ( 0 0$01 ) ;
44294: LD_INT 35
44296: PPUSH
44297: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44301: LD_INT 22
44303: PUSH
44304: LD_INT 3
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 21
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PPUSH
44325: CALL_OW 69
44329: PPUSH
44330: LD_INT 124
44332: PPUSH
44333: LD_INT 98
44335: PPUSH
44336: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44340: LD_INT 22
44342: PUSH
44343: LD_INT 6
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 21
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PPUSH
44364: CALL_OW 69
44368: PPUSH
44369: CALL_OW 121
// wait ( 0 0$01 ) ;
44373: LD_INT 35
44375: PPUSH
44376: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44380: LD_INT 22
44382: PUSH
44383: LD_INT 6
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 21
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PPUSH
44404: CALL_OW 69
44408: PPUSH
44409: LD_INT 124
44411: PPUSH
44412: LD_INT 98
44414: PPUSH
44415: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44419: LD_INT 22
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 21
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 3
44441: PUSH
44442: LD_INT 54
44444: PUSH
44445: EMPTY
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: PPUSH
44457: CALL_OW 69
44461: PPUSH
44462: LD_INT 124
44464: PPUSH
44465: LD_INT 98
44467: PPUSH
44468: CALL_OW 114
// wait ( 0 0$4 ) ;
44472: LD_INT 140
44474: PPUSH
44475: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44479: LD_INT 124
44481: PPUSH
44482: LD_INT 98
44484: PPUSH
44485: CALL_OW 84
// if SikorskyStatus = 1 then
44489: LD_EXP 21
44493: PUSH
44494: LD_INT 1
44496: EQUAL
44497: IFFALSE 44511
// begin Say ( Sikorski , D9-Sik-1 ) ;
44499: LD_EXP 16
44503: PPUSH
44504: LD_STRING D9-Sik-1
44506: PPUSH
44507: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44511: LD_EXP 21
44515: PUSH
44516: LD_INT 2
44518: EQUAL
44519: IFFALSE 44540
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44521: LD_EXP 23
44525: PPUSH
44526: LD_STRING D8b-Pow-1
44528: PPUSH
44529: CALL_OW 94
// YouLost ( Dismissed ) ;
44533: LD_STRING Dismissed
44535: PPUSH
44536: CALL_OW 104
// end ; p := 0 0$0 ;
44540: LD_ADDR_VAR 0 2
44544: PUSH
44545: LD_INT 0
44547: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44548: LD_INT 35
44550: PPUSH
44551: CALL_OW 67
// p := p + 0 0$1 ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: LD_VAR 0 2
44564: PUSH
44565: LD_INT 35
44567: PLUS
44568: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44569: LD_INT 23
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 21
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 24
44591: PUSH
44592: LD_INT 250
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: PPUSH
44604: CALL_OW 69
44608: PUSH
44609: LD_INT 0
44611: EQUAL
44612: PUSH
44613: LD_VAR 0 2
44617: PUSH
44618: LD_INT 245
44620: GREATEREQUAL
44621: OR
44622: IFFALSE 44548
// FinishMission ;
44624: CALL 44631 0 0
// end ;
44628: PPOPN 2
44630: END
// export function FinishMission ; var tmp ; begin
44631: LD_INT 0
44633: PPUSH
44634: PPUSH
// AddMedal ( med1 , 1 ) ;
44635: LD_STRING med1
44637: PPUSH
44638: LD_INT 1
44640: PPUSH
44641: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44645: LD_STRING med2
44647: PPUSH
44648: LD_INT 1
44650: PPUSH
44651: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44655: LD_STRING perfect
44657: PPUSH
44658: LD_INT 1
44660: PPUSH
44661: CALL_OW 101
// GiveMedals ( Main ) ;
44665: LD_STRING Main
44667: PPUSH
44668: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44672: LD_INT 22
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 23
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 21
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 25
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 25
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 25
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 25
44737: PUSH
44738: LD_INT 4
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: PPUSH
44758: CALL_OW 69
44762: PPUSH
44763: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44767: LD_EXP 1
44771: PPUSH
44772: LD_EXP 42
44776: PUSH
44777: LD_STRING JMM
44779: STR
44780: PPUSH
44781: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44785: LD_EXP 2
44789: PPUSH
44790: LD_EXP 42
44794: PUSH
44795: LD_STRING Brown
44797: STR
44798: PPUSH
44799: CALL 8121 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44803: LD_EXP 3
44807: PPUSH
44808: LD_EXP 42
44812: PUSH
44813: LD_STRING Donaldson
44815: STR
44816: PPUSH
44817: CALL 8121 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44821: LD_EXP 4
44825: PPUSH
44826: LD_EXP 42
44830: PUSH
44831: LD_STRING Bobby
44833: STR
44834: PPUSH
44835: CALL 8121 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44839: LD_EXP 5
44843: PPUSH
44844: LD_EXP 42
44848: PUSH
44849: LD_STRING Cyrus
44851: STR
44852: PPUSH
44853: CALL 8121 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
44857: LD_EXP 6
44861: PPUSH
44862: LD_EXP 42
44866: PUSH
44867: LD_STRING Lisa
44869: STR
44870: PPUSH
44871: CALL 8121 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
44875: LD_EXP 7
44879: PPUSH
44880: LD_EXP 42
44884: PUSH
44885: LD_STRING Frank
44887: STR
44888: PPUSH
44889: CALL 8121 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
44893: LD_EXP 8
44897: PPUSH
44898: LD_EXP 42
44902: PUSH
44903: LD_STRING Gladstone
44905: STR
44906: PPUSH
44907: CALL 8121 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
44911: LD_EXP 9
44915: PPUSH
44916: LD_EXP 42
44920: PUSH
44921: LD_STRING Kikuchi
44923: STR
44924: PPUSH
44925: CALL 8121 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
44929: LD_EXP 14
44933: PPUSH
44934: LD_EXP 42
44938: PUSH
44939: LD_STRING Denis
44941: STR
44942: PPUSH
44943: CALL 8121 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
44947: LD_EXP 15
44951: PPUSH
44952: LD_EXP 42
44956: PUSH
44957: LD_STRING Joan
44959: STR
44960: PPUSH
44961: CALL 8121 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
44965: LD_EXP 10
44969: PPUSH
44970: LD_EXP 42
44974: PUSH
44975: LD_STRING Khatam
44977: STR
44978: PPUSH
44979: CALL 8121 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
44983: LD_EXP 13
44987: PPUSH
44988: LD_EXP 42
44992: PUSH
44993: LD_STRING Houten
44995: STR
44996: PPUSH
44997: CALL 8121 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45001: LD_INT 50
45003: PUSH
45004: EMPTY
45005: LIST
45006: PUSH
45007: LD_INT 22
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 21
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 25
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 25
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 25
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 25
45062: PUSH
45063: LD_INT 4
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: PPUSH
45083: CALL_OW 69
45087: PUSH
45088: LD_EXP 1
45092: PUSH
45093: LD_EXP 2
45097: PUSH
45098: LD_EXP 3
45102: PUSH
45103: LD_EXP 4
45107: PUSH
45108: LD_EXP 5
45112: PUSH
45113: LD_EXP 6
45117: PUSH
45118: LD_EXP 7
45122: PUSH
45123: LD_EXP 8
45127: PUSH
45128: LD_EXP 9
45132: PUSH
45133: LD_EXP 14
45137: PUSH
45138: LD_EXP 15
45142: PUSH
45143: LD_EXP 13
45147: PUSH
45148: LD_EXP 10
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: DIFF
45168: PPUSH
45169: LD_STRING 08_other_survivors
45171: PPUSH
45172: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45176: LD_INT 23
45178: PPUSH
45179: CALL 45192 0 1
// YouWin ;
45183: CALL_OW 103
// end ;
45187: LD_VAR 0 1
45191: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45192: LD_INT 0
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
// gammaBase = [ ] ;
45198: LD_ADDR_VAR 0 4
45202: PUSH
45203: EMPTY
45204: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45205: LD_ADDR_VAR 0 5
45209: PUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: LD_INT 22
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 21
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 50
45237: PUSH
45238: EMPTY
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: PPUSH
45246: CALL_OW 70
45250: ST_TO_ADDR
// for i in buildings do
45251: LD_ADDR_VAR 0 3
45255: PUSH
45256: LD_VAR 0 5
45260: PUSH
45261: FOR_IN
45262: IFFALSE 45699
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45264: LD_VAR 0 3
45268: PPUSH
45269: CALL_OW 266
45273: PUSH
45274: LD_INT 6
45276: PUSH
45277: LD_INT 7
45279: PUSH
45280: LD_INT 8
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: IN
45288: IFFALSE 45402
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45290: LD_ADDR_VAR 0 4
45294: PUSH
45295: LD_VAR 0 4
45299: PUSH
45300: LD_VAR 0 3
45304: PPUSH
45305: CALL_OW 266
45309: PUSH
45310: LD_VAR 0 3
45314: PPUSH
45315: CALL_OW 250
45319: PUSH
45320: LD_VAR 0 3
45324: PPUSH
45325: CALL_OW 251
45329: PUSH
45330: LD_VAR 0 3
45334: PPUSH
45335: CALL_OW 254
45339: PUSH
45340: LD_VAR 0 3
45344: PPUSH
45345: CALL_OW 267
45349: PUSH
45350: LD_VAR 0 3
45354: PPUSH
45355: CALL_OW 248
45359: PUSH
45360: LD_VAR 0 3
45364: PPUSH
45365: LD_INT 1
45367: PPUSH
45368: CALL_OW 268
45372: PUSH
45373: LD_VAR 0 3
45377: PPUSH
45378: LD_INT 2
45380: PPUSH
45381: CALL_OW 268
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: PUSH
45396: EMPTY
45397: LIST
45398: ADD
45399: ST_TO_ADDR
45400: GO 45697
// if GetBType ( i ) = b_bunker then
45402: LD_VAR 0 3
45406: PPUSH
45407: CALL_OW 266
45411: PUSH
45412: LD_INT 32
45414: EQUAL
45415: IFFALSE 45512
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45417: LD_ADDR_VAR 0 4
45421: PUSH
45422: LD_VAR 0 4
45426: PUSH
45427: LD_VAR 0 3
45431: PPUSH
45432: CALL_OW 266
45436: PUSH
45437: LD_VAR 0 3
45441: PPUSH
45442: CALL_OW 250
45446: PUSH
45447: LD_VAR 0 3
45451: PPUSH
45452: CALL_OW 251
45456: PUSH
45457: LD_VAR 0 3
45461: PPUSH
45462: CALL_OW 254
45466: PUSH
45467: LD_VAR 0 3
45471: PPUSH
45472: CALL_OW 267
45476: PUSH
45477: LD_VAR 0 3
45481: PPUSH
45482: CALL_OW 248
45486: PUSH
45487: LD_VAR 0 3
45491: PPUSH
45492: CALL_OW 269
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: ADD
45509: ST_TO_ADDR
45510: GO 45697
// if GetBType ( i ) = b_factory then
45512: LD_VAR 0 3
45516: PPUSH
45517: CALL_OW 266
45521: PUSH
45522: LD_INT 3
45524: EQUAL
45525: IFFALSE 45615
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45527: LD_ADDR_VAR 0 4
45531: PUSH
45532: LD_VAR 0 4
45536: PPUSH
45537: LD_INT 1
45539: PPUSH
45540: LD_VAR 0 3
45544: PPUSH
45545: CALL_OW 266
45549: PUSH
45550: LD_VAR 0 3
45554: PPUSH
45555: CALL_OW 250
45559: PUSH
45560: LD_VAR 0 3
45564: PPUSH
45565: CALL_OW 251
45569: PUSH
45570: LD_VAR 0 3
45574: PPUSH
45575: CALL_OW 254
45579: PUSH
45580: LD_VAR 0 3
45584: PPUSH
45585: CALL_OW 267
45589: PUSH
45590: LD_VAR 0 3
45594: PPUSH
45595: CALL_OW 248
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: PPUSH
45608: CALL_OW 2
45612: ST_TO_ADDR
45613: GO 45697
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45615: LD_ADDR_VAR 0 4
45619: PUSH
45620: LD_VAR 0 4
45624: PUSH
45625: LD_VAR 0 3
45629: PPUSH
45630: CALL_OW 266
45634: PUSH
45635: LD_VAR 0 3
45639: PPUSH
45640: CALL_OW 250
45644: PUSH
45645: LD_VAR 0 3
45649: PPUSH
45650: CALL_OW 251
45654: PUSH
45655: LD_VAR 0 3
45659: PPUSH
45660: CALL_OW 254
45664: PUSH
45665: LD_VAR 0 3
45669: PPUSH
45670: CALL_OW 267
45674: PUSH
45675: LD_VAR 0 3
45679: PPUSH
45680: CALL_OW 248
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: PUSH
45693: EMPTY
45694: LIST
45695: ADD
45696: ST_TO_ADDR
// end ;
45697: GO 45261
45699: POP
45700: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45701: LD_VAR 0 4
45705: PPUSH
45706: LD_STRING 08_GammaBase
45708: PPUSH
45709: CALL_OW 39
// end ;
45713: LD_VAR 0 2
45717: RET
