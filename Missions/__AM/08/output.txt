// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7018 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2109 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5823 0 0
// PrepareRussians ;
 229: CALL 6141 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8283 0 6
// PrepareCutsceneAttack ;
 312: CALL 5875 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 593
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6559 0 2
 577: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 5
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ; if gammaCommander = 2 then
 593: LD_EXP 12
 597: PUSH
 598: LD_INT 2
 600: EQUAL
 601: IFFALSE 634
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 603: LD_ADDR_EXP 2
 607: PUSH
 608: LD_STRING 04_Brown
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 6559 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 619: LD_EXP 2
 623: PPUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// end ; if gammaCommander = 3 then
 634: LD_EXP 12
 638: PUSH
 639: LD_INT 3
 641: EQUAL
 642: IFFALSE 675
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 644: LD_ADDR_EXP 13
 648: PUSH
 649: LD_STRING VanHouten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6559 0 2
 659: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 660: LD_EXP 13
 664: PPUSH
 665: LD_INT 5
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 675: LD_ADDR_EXP 22
 679: PUSH
 680: LD_STRING Harisson
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL 6559 0 2
 690: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 691: LD_ADDR_EXP 23
 695: PUSH
 696: LD_STRING Powell
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 6559 0 2
 706: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 707: LD_STRING 04_Lisa
 709: PUSH
 710: EMPTY
 711: LIST
 712: PPUSH
 713: CALL_OW 28
 717: PUSH
 718: LD_STRING LisaInDelta
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL_OW 30
 728: NOT
 729: AND
 730: PUSH
 731: LD_STRING 07_Lisa
 733: PUSH
 734: EMPTY
 735: LIST
 736: PPUSH
 737: CALL_OW 28
 741: NOT
 742: AND
 743: IFFALSE 777
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 745: LD_ADDR_EXP 6
 749: PUSH
 750: LD_STRING 04_Lisa
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6559 0 2
 760: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 761: LD_ADDR_VAR 0 15
 765: PUSH
 766: LD_VAR 0 15
 770: PUSH
 771: LD_EXP 6
 775: ADD
 776: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 777: LD_STRING 04_Bobby
 779: PUSH
 780: EMPTY
 781: LIST
 782: PPUSH
 783: CALL_OW 28
 787: PUSH
 788: LD_STRING BobbyInDelta
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 30
 798: NOT
 799: AND
 800: PUSH
 801: LD_STRING 07_Bobby
 803: PUSH
 804: EMPTY
 805: LIST
 806: PPUSH
 807: CALL_OW 28
 811: NOT
 812: AND
 813: IFFALSE 847
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 815: LD_ADDR_EXP 4
 819: PUSH
 820: LD_STRING 04_Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6559 0 2
 830: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 831: LD_ADDR_VAR 0 15
 835: PUSH
 836: LD_VAR 0 15
 840: PUSH
 841: LD_EXP 4
 845: ADD
 846: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 847: LD_STRING 04_Cyrus
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: PUSH
 858: LD_STRING CyrusInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Cyrus
 873: PUSH
 874: EMPTY
 875: LIST
 876: PPUSH
 877: CALL_OW 28
 881: NOT
 882: AND
 883: IFFALSE 917
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 885: LD_ADDR_EXP 5
 889: PUSH
 890: LD_STRING 04_Cyrus
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 6559 0 2
 900: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
 901: LD_ADDR_VAR 0 15
 905: PUSH
 906: LD_VAR 0 15
 910: PUSH
 911: LD_EXP 5
 915: ADD
 916: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
 917: LD_STRING 04_Brown
 919: PUSH
 920: EMPTY
 921: LIST
 922: PPUSH
 923: CALL_OW 28
 927: PUSH
 928: LD_STRING BrownInDelta
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 30
 938: NOT
 939: AND
 940: PUSH
 941: LD_STRING 07_Brown
 943: PUSH
 944: EMPTY
 945: LIST
 946: PPUSH
 947: CALL_OW 28
 951: NOT
 952: AND
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_INT 2
 961: NONEQUAL
 962: AND
 963: IFFALSE 997
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
 965: LD_ADDR_EXP 2
 969: PUSH
 970: LD_STRING 04_Brown
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 6559 0 2
 980: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
 981: LD_ADDR_VAR 0 15
 985: PUSH
 986: LD_VAR 0 15
 990: PUSH
 991: LD_EXP 2
 995: ADD
 996: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
 997: LD_STRING 04_Donaldson
 999: PUSH
1000: EMPTY
1001: LIST
1002: PPUSH
1003: CALL_OW 28
1007: PUSH
1008: LD_STRING DonaldsonInDelta
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 30
1018: NOT
1019: AND
1020: PUSH
1021: LD_STRING 07_Donaldson
1023: PUSH
1024: EMPTY
1025: LIST
1026: PPUSH
1027: CALL_OW 28
1031: NOT
1032: AND
1033: PUSH
1034: LD_EXP 12
1038: PUSH
1039: LD_INT 1
1041: NONEQUAL
1042: AND
1043: IFFALSE 1077
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: LD_STRING 04_Donaldson
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6559 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 3
1075: ADD
1076: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1077: LD_ADDR_EXP 11
1081: PUSH
1082: LD_STRING 07_othersGamma
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1090: LD_ADDR_VAR 0 14
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_EXP 11
1102: MINUS
1103: ST_TO_ADDR
// if tmp then
1104: LD_VAR 0 14
1108: IFFALSE 1161
// for i = 1 to tmp do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_VAR 0 14
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1159
// begin PrepareHuman ( false , 1 , 5 ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_INT 1
1133: PPUSH
1134: LD_INT 5
1136: PPUSH
1137: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: CALL_OW 44
1155: ADD
1156: ST_TO_ADDR
// end ;
1157: GO 1125
1159: POP
1160: POP
// if HexInfo ( 61 , 29 ) = 0 then
1161: LD_INT 61
1163: PPUSH
1164: LD_INT 29
1166: PPUSH
1167: CALL_OW 428
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: IFFALSE 1206
// begin bc_type := b_barracks ;
1177: LD_ADDR_OWVAR 42
1181: PUSH
1182: LD_INT 5
1184: ST_TO_ADDR
// bc_level := 6 ;
1185: LD_ADDR_OWVAR 43
1189: PUSH
1190: LD_INT 6
1192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1193: LD_INT 61
1195: PPUSH
1196: LD_INT 29
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1206: LD_ADDR_VAR 0 13
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 30
1223: PUSH
1224: LD_INT 31
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PPUSH
1235: CALL_OW 69
1239: ST_TO_ADDR
// for i in bun do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_VAR 0 13
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1383
// begin x := GetX ( i ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 250
1267: ST_TO_ADDR
// y := GetY ( i ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 251
1282: ST_TO_ADDR
// d := GetDir ( i ) ;
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PPUSH
1293: CALL_OW 254
1297: ST_TO_ADDR
// RemoveUnit ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 64
// bc_type := b_bunker ;
1307: LD_ADDR_OWVAR 42
1311: PUSH
1312: LD_INT 32
1314: ST_TO_ADDR
// bc_level := 6 ;
1315: LD_ADDR_OWVAR 43
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1323: LD_ADDR_VAR 0 6
1327: PUSH
1328: LD_VAR 0 3
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_VAR 0 5
1342: PPUSH
1343: CALL_OW 47
1347: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1348: LD_VAR 0 6
1352: PPUSH
1353: LD_INT 5
1355: PUSH
1356: LD_INT 4
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 2
1370: MOD
1371: PUSH
1372: LD_INT 1
1374: PLUS
1375: ARRAY
1376: PPUSH
1377: CALL_OW 431
// end ;
1381: GO 1250
1383: POP
1384: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1385: LD_ADDR_VAR 0 9
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1419: LD_ADDR_VAR 0 8
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 30
1439: PUSH
1440: LD_INT 6
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 8
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1482: LD_ADDR_VAR 0 7
1486: PUSH
1487: LD_INT 22
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 30
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1516: LD_ADDR_VAR 0 12
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 30
1533: PUSH
1534: LD_INT 36
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1550: LD_ADDR_VAR 0 13
1554: PUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 30
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 30
1580: PUSH
1581: LD_INT 32
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 11
1611: PUSH
1612: LD_VAR 0 15
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1994
// begin placed := false ;
1621: LD_ADDR_VAR 0 11
1625: PUSH
1626: LD_INT 0
1628: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1629: LD_VAR 0 2
1633: PPUSH
1634: CALL_OW 257
1638: PUSH
1639: LD_INT 1
1641: EQUAL
1642: IFFALSE 1767
// begin if UnitFilter ( bun , [ f_empty ] ) then
1644: LD_VAR 0 13
1648: PPUSH
1649: LD_INT 58
1651: PUSH
1652: EMPTY
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1698
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_VAR 0 13
1670: PPUSH
1671: LD_INT 58
1673: PUSH
1674: EMPTY
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PPUSH
1686: CALL_OW 52
// placed := true ;
1690: LD_ADDR_VAR 0 11
1694: PUSH
1695: LD_INT 1
1697: ST_TO_ADDR
// end ; if arm and not placed then
1698: LD_VAR 0 9
1702: PUSH
1703: LD_VAR 0 11
1707: NOT
1708: AND
1709: IFFALSE 1767
// begin for j in arm do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 9
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; end ; if GetClass ( i ) = 3 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 3
1779: EQUAL
1780: IFFALSE 1884
// if fac then
1782: LD_VAR 0 7
1786: IFFALSE 1884
// begin if ct then
1788: LD_VAR 0 12
1792: IFFALSE 1820
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1794: LD_VAR 0 2
1798: PPUSH
1799: LD_VAR 0 12
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: CALL_OW 52
// placed := true ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// end ; if placed then
1820: LD_VAR 0 11
1824: IFFALSE 1828
// continue ;
1826: GO 1618
// for j in fac do
1828: LD_ADDR_VAR 0 10
1832: PUSH
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_IN
1839: IFFALSE 1882
// if UnitsInside ( j ) < 6 then
1841: LD_VAR 0 10
1845: PPUSH
1846: CALL_OW 313
1850: PUSH
1851: LD_INT 6
1853: LESS
1854: IFFALSE 1880
// begin PlaceHumanInUnit ( i , j ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_VAR 0 10
1865: PPUSH
1866: CALL_OW 52
// placed := true ;
1870: LD_ADDR_VAR 0 11
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// break ;
1878: GO 1882
// end ;
1880: GO 1838
1882: POP
1883: POP
// end ; if GetClass ( i ) = 4 then
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 257
1893: PUSH
1894: LD_INT 4
1896: EQUAL
1897: IFFALSE 1961
// if lab then
1899: LD_VAR 0 8
1903: IFFALSE 1961
// begin for j in lab do
1905: LD_ADDR_VAR 0 10
1909: PUSH
1910: LD_VAR 0 8
1914: PUSH
1915: FOR_IN
1916: IFFALSE 1959
// if UnitsInside ( j ) < 6 then
1918: LD_VAR 0 10
1922: PPUSH
1923: CALL_OW 313
1927: PUSH
1928: LD_INT 6
1930: LESS
1931: IFFALSE 1957
// begin PlaceHumanInUnit ( i , j ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_VAR 0 10
1942: PPUSH
1943: CALL_OW 52
// placed := true ;
1947: LD_ADDR_VAR 0 11
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// break ;
1955: GO 1959
// end ;
1957: GO 1915
1959: POP
1960: POP
// end ; if not placed then
1961: LD_VAR 0 11
1965: NOT
1966: IFFALSE 1992
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_INT 5
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// ComHold ( i ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: CALL_OW 140
// end ; end ;
1992: GO 1618
1994: POP
1995: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1996: LD_VAR 0 12
2000: PUSH
2001: LD_VAR 0 12
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 313
2014: AND
2015: IFFALSE 2104
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 33
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2102
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 12
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_VAR 0 12
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 313
2089: PPUSH
2090: CALL_OW 12
2094: ARRAY
2095: PPUSH
2096: CALL_OW 135
2100: GO 2051
2102: POP
2103: POP
// end ; end ;
2104: LD_VAR 0 1
2108: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2117: LD_INT 71
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2130: LD_ADDR_VAR 0 2
2134: PUSH
2135: LD_STRING GammaBase
2137: PPUSH
2138: EMPTY
2139: PPUSH
2140: CALL_OW 30
2144: ST_TO_ADDR
// if not blist then
2145: LD_VAR 0 2
2149: NOT
2150: IFFALSE 2190
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 51
2162: PUSH
2163: LD_INT 10
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: LD_INT 0
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: EMPTY
2188: LIST
2189: ST_TO_ADDR
// uc_side := 1 ;
2190: LD_ADDR_OWVAR 20
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// uc_nation := 1 ;
2198: LD_ADDR_OWVAR 21
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// for i in blist do
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2625
// begin bc_type := i [ 1 ] ;
2219: LD_ADDR_OWVAR 42
2223: PUSH
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_VAR 0 3
2242: PUSH
2243: LD_INT 5
2245: ARRAY
2246: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PUSH
2256: LD_INT 7
2258: PUSH
2259: LD_INT 8
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: IN
2266: IFFALSE 2322
// begin bc_kind1 := i [ 7 ] ;
2268: LD_ADDR_OWVAR 44
2272: PUSH
2273: LD_VAR 0 3
2277: PUSH
2278: LD_INT 7
2280: ARRAY
2281: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2282: LD_STRING 06_remoteVehs_1
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 30
2292: PUSH
2293: LD_INT 1
2295: EQUAL
2296: IFFALSE 2308
// begin bc_kind2 := 15 ;
2298: LD_ADDR_OWVAR 45
2302: PUSH
2303: LD_INT 15
2305: ST_TO_ADDR
// end else
2306: GO 2322
// begin bc_kind2 := i [ 8 ] ;
2308: LD_ADDR_OWVAR 45
2312: PUSH
2313: LD_VAR 0 3
2317: PUSH
2318: LD_INT 8
2320: ARRAY
2321: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 0
2329: EQUAL
2330: IFFALSE 2448
// begin bc_type := b_warehouse ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2340: LD_ADDR_EXP 37
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 2
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 3
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 4
2370: ARRAY
2371: PPUSH
2372: CALL_OW 47
2376: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2377: LD_EXP 37
2381: PPUSH
2382: LD_STRING gamma
2384: PPUSH
2385: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2389: LD_EXP 37
2393: PPUSH
2394: CALL_OW 274
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: LD_INT 400
2404: PUSH
2405: LD_INT 350
2407: PUSH
2408: LD_INT 250
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_OWVAR 67
2420: ARRAY
2421: PPUSH
2422: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2426: LD_EXP 37
2430: PPUSH
2431: CALL_OW 274
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: LD_INT 200
2441: PPUSH
2442: CALL_OW 277
// end else
2446: GO 2590
// begin if bc_type = 4 then
2448: LD_OWVAR 42
2452: PUSH
2453: LD_INT 4
2455: EQUAL
2456: IFFALSE 2505
// begin bc_type = 5 ;
2458: LD_ADDR_OWVAR 42
2462: PUSH
2463: LD_INT 5
2465: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2466: LD_ADDR_VAR 0 4
2470: PUSH
2471: LD_VAR 0 3
2475: PUSH
2476: LD_INT 2
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 3
2484: PUSH
2485: LD_INT 3
2487: ARRAY
2488: PPUSH
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 4
2496: ARRAY
2497: PPUSH
2498: CALL_OW 47
2502: ST_TO_ADDR
// end else
2503: GO 2590
// begin bc_type := i [ 1 ] ;
2505: LD_ADDR_OWVAR 42
2509: PUSH
2510: LD_VAR 0 3
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2519: LD_STRING 06_remoteVehs_1
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: CALL_OW 30
2529: PUSH
2530: LD_INT 1
2532: EQUAL
2533: PUSH
2534: LD_OWVAR 42
2538: PUSH
2539: LD_INT 7
2541: EQUAL
2542: AND
2543: IFFALSE 2553
// bc_type := b_lab_full ;
2545: LD_ADDR_OWVAR 42
2549: PUSH
2550: LD_INT 8
2552: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 3
2574: ARRAY
2575: PPUSH
2576: LD_VAR 0 3
2580: PUSH
2581: LD_INT 4
2583: ARRAY
2584: PPUSH
2585: CALL_OW 47
2589: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2590: LD_VAR 0 4
2594: PPUSH
2595: CALL_OW 266
2599: PUSH
2600: LD_INT 32
2602: EQUAL
2603: IFFALSE 2623
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2605: LD_VAR 0 4
2609: PPUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 7
2617: ARRAY
2618: PPUSH
2619: CALL_OW 431
// end ;
2623: GO 2216
2625: POP
2626: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2627: LD_INT 22
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 30
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: IFFALSE 2903
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2657: LD_ADDR_VAR 0 4
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 30
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: CALL_OW 69
2690: PUSH
2691: LD_INT 1
2693: ARRAY
2694: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2695: LD_ADDR_VAR 0 6
2699: PUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: CALL_OW 250
2709: PPUSH
2710: LD_VAR 0 4
2714: PPUSH
2715: CALL_OW 251
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: CALL_OW 254
2729: PPUSH
2730: CALL 15980 0 3
2734: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_INT 19
2742: PUSH
2743: LD_INT 17
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2750: LD_STRING 06_remoteVehs_1
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 30
2760: IFFALSE 2783
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2762: LD_ADDR_VAR 0 2
2766: PUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 20
2777: PPUSH
2778: CALL_OW 2
2782: ST_TO_ADDR
// for i in tmp do
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: LD_VAR 0 6
2792: PUSH
2793: FOR_IN
2794: IFFALSE 2901
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: PPUSH
2814: CALL_OW 428
2818: PUSH
2819: LD_INT 0
2821: EQUAL
2822: IFFALSE 2899
// begin bc_type := blist [ 1 ] ;
2824: LD_ADDR_OWVAR 42
2828: PUSH
2829: LD_VAR 0 2
2833: PUSH
2834: LD_INT 1
2836: ARRAY
2837: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2838: LD_VAR 0 3
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PPUSH
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 2
2854: ARRAY
2855: PPUSH
2856: LD_VAR 0 3
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: PPUSH
2865: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: CALL_OW 3
2886: ST_TO_ADDR
// if blist = 0 then
2887: LD_VAR 0 2
2891: PUSH
2892: LD_INT 0
2894: EQUAL
2895: IFFALSE 2899
// break ;
2897: GO 2901
// end ;
2899: GO 2793
2901: POP
2902: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2903: LD_STRING 06_remoteVehs_1
2905: PPUSH
2906: LD_INT 0
2908: PPUSH
2909: CALL_OW 30
2913: PUSH
2914: LD_INT 1
2916: EQUAL
2917: IFFALSE 3121
// begin bc_type = 36 ;
2919: LD_ADDR_OWVAR 42
2923: PUSH
2924: LD_INT 36
2926: ST_TO_ADDR
// bc_level = 4 ;
2927: LD_ADDR_OWVAR 43
2931: PUSH
2932: LD_INT 4
2934: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2935: LD_INT 62
2937: PPUSH
2938: LD_INT 12
2940: PPUSH
2941: LD_INT 3
2943: PPUSH
2944: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 3
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_OWVAR 67
2976: ARRAY
2977: PUSH
2978: FOR_TO
2979: IFFALSE 3119
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2981: LD_ADDR_OWVAR 37
2985: PUSH
2986: LD_INT 3
2988: PUSH
2989: LD_INT 2
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_OWVAR 67
3023: ARRAY
3024: ST_TO_ADDR
// vc_engine = 1 ;
3025: LD_ADDR_OWVAR 39
3029: PUSH
3030: LD_INT 1
3032: ST_TO_ADDR
// vc_control = 2 ;
3033: LD_ADDR_OWVAR 38
3037: PUSH
3038: LD_INT 2
3040: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3041: LD_ADDR_OWVAR 40
3045: PUSH
3046: LD_INT 3
3048: PUSH
3049: LD_INT 4
3051: PUSH
3052: LD_INT 5
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: CALL_OW 12
3070: ARRAY
3071: ST_TO_ADDR
// veh = CreateVehicle ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3082: LD_VAR 0 5
3086: PPUSH
3087: LD_EXP 37
3091: PPUSH
3092: CALL_OW 250
3096: PPUSH
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 251
3106: PPUSH
3107: LD_INT 7
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: CALL_OW 50
// end ;
3117: GO 2978
3119: POP
3120: POP
// end ; end ;
3121: LD_VAR 0 1
3125: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3126: LD_INT 0
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
// uc_side = 1 ;
3132: LD_ADDR_OWVAR 20
3136: PUSH
3137: LD_INT 1
3139: ST_TO_ADDR
// uc_nation = 1 ;
3140: LD_ADDR_OWVAR 21
3144: PUSH
3145: LD_INT 1
3147: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3148: LD_ADDR_EXP 14
3152: PUSH
3153: LD_STRING 06c_Denis
3155: PPUSH
3156: LD_INT 1
3158: PPUSH
3159: CALL 6559 0 2
3163: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3164: LD_EXP 14
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3179: LD_ADDR_EXP 15
3183: PUSH
3184: LD_STRING 06c_Joan
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: CALL 6559 0 2
3194: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3195: LD_EXP 15
3199: PPUSH
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3210: LD_STRING GladstoneIn07
3212: PPUSH
3213: LD_INT 0
3215: PPUSH
3216: CALL_OW 30
3220: NOT
3221: IFFALSE 3289
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3223: LD_ADDR_EXP 8
3227: PUSH
3228: LD_STRING 06c_Gladstone
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL 6559 0 2
3238: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3239: LD_EXP 8
3243: NOT
3244: PUSH
3245: LD_STRING GladstoneStayInDelta
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 30
3255: AND
3256: IFFALSE 3274
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3258: LD_ADDR_EXP 8
3262: PUSH
3263: LD_STRING 05_Gladstone
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 6559 0 2
3273: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3274: LD_EXP 8
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3289: LD_STRING LisaStayInDelta
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3332
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3301: LD_ADDR_EXP 6
3305: PUSH
3306: LD_STRING 05_Lisa
3308: PPUSH
3309: LD_INT 1
3311: PPUSH
3312: CALL 6559 0 2
3316: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3317: LD_EXP 6
3321: PPUSH
3322: LD_INT 4
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3332: LD_STRING BobbyStayInDelta
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 30
3342: IFFALSE 3375
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3344: LD_ADDR_EXP 4
3348: PUSH
3349: LD_STRING 05_Bobby
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL 6559 0 2
3359: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3360: LD_EXP 4
3364: PPUSH
3365: LD_INT 4
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3375: LD_STRING CyrusStayInDelta
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 30
3385: IFFALSE 3418
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3387: LD_ADDR_EXP 5
3391: PUSH
3392: LD_STRING 05_Cyrus
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL 6559 0 2
3402: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3403: LD_EXP 5
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3418: LD_STRING BrownStayInDelta
3420: PPUSH
3421: LD_INT 0
3423: PPUSH
3424: CALL_OW 30
3428: IFFALSE 3461
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3430: LD_ADDR_EXP 2
3434: PUSH
3435: LD_STRING 05_Brown
3437: PPUSH
3438: LD_INT 1
3440: PPUSH
3441: CALL 6559 0 2
3445: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3446: LD_EXP 2
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3461: LD_STRING DonaldsonStayInDelta
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 30
3471: IFFALSE 3504
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3473: LD_ADDR_EXP 3
3477: PUSH
3478: LD_STRING 05_Donaldson
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL 6559 0 2
3488: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3489: LD_EXP 3
3493: PPUSH
3494: LD_INT 4
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_STRING OtherStayInDelta
3511: PPUSH
3512: CALL_OW 31
3516: ST_TO_ADDR
// if other then
3517: LD_VAR 0 4
3521: IFFALSE 3566
// for j = 1 to other do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_VAR 0 4
3537: PUSH
3538: FOR_TO
3539: IFFALSE 3564
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3541: LD_VAR 0 4
3545: PUSH
3546: LD_VAR 0 3
3550: ARRAY
3551: PPUSH
3552: LD_INT 4
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL_OW 49
3562: GO 3538
3564: POP
3565: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_STRING 06_other_apemans
3573: PPUSH
3574: CALL_OW 31
3578: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3579: LD_VAR 0 4
3583: PUSH
3584: LD_INT 5
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: LD_INT 3
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: PUSH
3598: LD_OWVAR 67
3602: ARRAY
3603: GREATEREQUAL
3604: IFFALSE 3633
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3606: LD_ADDR_VAR 0 3
3610: PUSH
3611: LD_INT 5
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_OWVAR 67
3629: ARRAY
3630: ST_TO_ADDR
3631: GO 3643
// j := other ;
3633: LD_ADDR_VAR 0 3
3637: PUSH
3638: LD_VAR 0 4
3642: ST_TO_ADDR
// for i = 1 to j do
3643: LD_ADDR_VAR 0 2
3647: PUSH
3648: DOUBLE
3649: LD_INT 1
3651: DEC
3652: ST_TO_ADDR
3653: LD_VAR 0 3
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3684
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3661: LD_VAR 0 4
3665: PUSH
3666: LD_VAR 0 2
3670: ARRAY
3671: PPUSH
3672: LD_INT 4
3674: PPUSH
3675: LD_INT 0
3677: PPUSH
3678: CALL_OW 49
3682: GO 3658
3684: POP
3685: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3686: LD_INT 4
3688: PPUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 1
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PPUSH
3713: CALL_OW 70
3717: PPUSH
3718: LD_INT 53
3720: PPUSH
3721: LD_INT 19
3723: PPUSH
3724: CALL_OW 111
// firstAttack = 1 ;
3728: LD_ADDR_EXP 33
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// end ;
3736: LD_VAR 0 1
3740: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: LD_STRING 07_vehicles
3755: PPUSH
3756: EMPTY
3757: PPUSH
3758: CALL_OW 30
3762: ST_TO_ADDR
// uc_side = 1 ;
3763: LD_ADDR_OWVAR 20
3767: PUSH
3768: LD_INT 1
3770: ST_TO_ADDR
// uc_nation = 1 ;
3771: LD_ADDR_OWVAR 21
3775: PUSH
3776: LD_INT 1
3778: ST_TO_ADDR
// if vehicles > 0 then
3779: LD_VAR 0 4
3783: PUSH
3784: LD_INT 0
3786: GREATER
3787: IFFALSE 3926
// begin for i = 1 to vehicles do
3789: LD_ADDR_VAR 0 2
3793: PUSH
3794: DOUBLE
3795: LD_INT 1
3797: DEC
3798: ST_TO_ADDR
3799: LD_VAR 0 4
3803: PUSH
3804: FOR_TO
3805: IFFALSE 3924
// begin vc_chassis = vehicles [ i ] ;
3807: LD_ADDR_OWVAR 37
3811: PUSH
3812: LD_VAR 0 4
3816: PUSH
3817: LD_VAR 0 2
3821: ARRAY
3822: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3823: LD_ADDR_OWVAR 39
3827: PUSH
3828: LD_VAR 0 4
3832: PUSH
3833: LD_VAR 0 2
3837: PUSH
3838: LD_INT 1
3840: PLUS
3841: ARRAY
3842: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3843: LD_ADDR_OWVAR 38
3847: PUSH
3848: LD_VAR 0 4
3852: PUSH
3853: LD_VAR 0 2
3857: PUSH
3858: LD_INT 2
3860: PLUS
3861: ARRAY
3862: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3863: LD_ADDR_OWVAR 40
3867: PUSH
3868: LD_VAR 0 4
3872: PUSH
3873: LD_VAR 0 2
3877: PUSH
3878: LD_INT 3
3880: PLUS
3881: ARRAY
3882: ST_TO_ADDR
// veh = CreateVehicle ;
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: CALL_OW 45
3892: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3893: LD_VAR 0 5
3897: PPUSH
3898: LD_INT 4
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 49
// i = i + 3 ;
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: LD_VAR 0 2
3917: PUSH
3918: LD_INT 3
3920: PLUS
3921: ST_TO_ADDR
// end ;
3922: GO 3804
3924: POP
3925: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3926: LD_ADDR_EXP 1
3930: PUSH
3931: LD_EXP 43
3935: PUSH
3936: LD_STRING JMM
3938: STR
3939: PPUSH
3940: LD_INT 1
3942: PPUSH
3943: CALL 6559 0 2
3947: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3948: LD_EXP 12
3952: PUSH
3953: LD_INT 1
3955: EQUAL
3956: PUSH
3957: LD_EXP 12
3961: PUSH
3962: LD_INT 3
3964: EQUAL
3965: OR
3966: PUSH
3967: LD_EXP 2
3971: NOT
3972: AND
3973: IFFALSE 3997
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3975: LD_ADDR_EXP 2
3979: PUSH
3980: LD_EXP 43
3984: PUSH
3985: LD_STRING Brown
3987: STR
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: CALL 6559 0 2
3996: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
3997: LD_EXP 12
4001: PUSH
4002: LD_INT 2
4004: EQUAL
4005: PUSH
4006: LD_EXP 12
4010: PUSH
4011: LD_INT 3
4013: EQUAL
4014: OR
4015: PUSH
4016: LD_EXP 3
4020: NOT
4021: AND
4022: IFFALSE 4046
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4024: LD_ADDR_EXP 3
4028: PUSH
4029: LD_EXP 43
4033: PUSH
4034: LD_STRING Donaldson
4036: STR
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: CALL 6559 0 2
4045: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4046: LD_EXP 2
4050: PUSH
4051: LD_EXP 12
4055: PUSH
4056: LD_INT 2
4058: NONEQUAL
4059: AND
4060: IFFALSE 4077
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4062: LD_EXP 2
4066: PPUSH
4067: LD_INT 4
4069: PPUSH
4070: LD_INT 0
4072: PPUSH
4073: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4077: LD_EXP 3
4081: PUSH
4082: LD_EXP 12
4086: PUSH
4087: LD_INT 1
4089: NONEQUAL
4090: AND
4091: IFFALSE 4108
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4093: LD_EXP 3
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4108: LD_ADDR_VAR 0 5
4112: PUSH
4113: LD_INT 4
4115: PPUSH
4116: LD_INT 22
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 21
4128: PUSH
4129: LD_INT 2
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 58
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 70
4151: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4152: LD_ADDR_EXP 1
4156: PUSH
4157: LD_EXP 43
4161: PUSH
4162: LD_STRING JMM
4164: STR
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: CALL 6559 0 2
4173: ST_TO_ADDR
// if veh > 0 then
4174: LD_VAR 0 5
4178: PUSH
4179: LD_INT 0
4181: GREATER
4182: IFFALSE 4204
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4184: LD_EXP 1
4188: PPUSH
4189: LD_VAR 0 5
4193: PUSH
4194: LD_INT 1
4196: ARRAY
4197: PPUSH
4198: CALL_OW 52
// end else
4202: GO 4219
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4204: LD_EXP 1
4208: PPUSH
4209: LD_INT 4
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4219: LD_ADDR_VAR 0 5
4223: PUSH
4224: LD_INT 4
4226: PPUSH
4227: LD_INT 22
4229: PUSH
4230: LD_INT 1
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: LD_INT 21
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 58
4249: PUSH
4250: EMPTY
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: PPUSH
4258: CALL_OW 70
4262: ST_TO_ADDR
// if not Bobby then
4263: LD_EXP 4
4267: NOT
4268: IFFALSE 4337
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4270: LD_ADDR_EXP 4
4274: PUSH
4275: LD_EXP 43
4279: PUSH
4280: LD_STRING Bobby
4282: STR
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL 6559 0 2
4291: ST_TO_ADDR
// if veh > 0 then
4292: LD_VAR 0 5
4296: PUSH
4297: LD_INT 0
4299: GREATER
4300: IFFALSE 4322
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4302: LD_EXP 4
4306: PPUSH
4307: LD_VAR 0 5
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: PPUSH
4316: CALL_OW 52
// end else
4320: GO 4337
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4322: LD_EXP 4
4326: PPUSH
4327: LD_INT 4
4329: PPUSH
4330: LD_INT 0
4332: PPUSH
4333: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4337: LD_ADDR_VAR 0 5
4341: PUSH
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 22
4347: PUSH
4348: LD_INT 1
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 2
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 58
4367: PUSH
4368: EMPTY
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 70
4380: ST_TO_ADDR
// if not Cyrus then
4381: LD_EXP 5
4385: NOT
4386: IFFALSE 4455
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4388: LD_ADDR_EXP 5
4392: PUSH
4393: LD_EXP 43
4397: PUSH
4398: LD_STRING Cyrus
4400: STR
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL 6559 0 2
4409: ST_TO_ADDR
// if veh > 0 then
4410: LD_VAR 0 5
4414: PUSH
4415: LD_INT 0
4417: GREATER
4418: IFFALSE 4440
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4420: LD_EXP 5
4424: PPUSH
4425: LD_VAR 0 5
4429: PUSH
4430: LD_INT 1
4432: ARRAY
4433: PPUSH
4434: CALL_OW 52
// end else
4438: GO 4455
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4440: LD_EXP 5
4444: PPUSH
4445: LD_INT 4
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4455: LD_ADDR_VAR 0 5
4459: PUSH
4460: LD_INT 4
4462: PPUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 21
4475: PUSH
4476: LD_INT 2
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 58
4485: PUSH
4486: EMPTY
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 70
4498: ST_TO_ADDR
// if not Lisa then
4499: LD_EXP 6
4503: NOT
4504: IFFALSE 4573
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4506: LD_ADDR_EXP 6
4510: PUSH
4511: LD_EXP 43
4515: PUSH
4516: LD_STRING Lisa
4518: STR
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: CALL 6559 0 2
4527: ST_TO_ADDR
// if veh > 0 then
4528: LD_VAR 0 5
4532: PUSH
4533: LD_INT 0
4535: GREATER
4536: IFFALSE 4558
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4538: LD_EXP 6
4542: PPUSH
4543: LD_VAR 0 5
4547: PUSH
4548: LD_INT 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 52
// end else
4556: GO 4573
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4558: LD_EXP 6
4562: PPUSH
4563: LD_INT 4
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4573: LD_ADDR_VAR 0 5
4577: PUSH
4578: LD_INT 4
4580: PPUSH
4581: LD_INT 22
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 21
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 58
4603: PUSH
4604: EMPTY
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: PPUSH
4612: CALL_OW 70
4616: ST_TO_ADDR
// if not Frank then
4617: LD_EXP 7
4621: NOT
4622: IFFALSE 4691
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4624: LD_ADDR_EXP 7
4628: PUSH
4629: LD_EXP 43
4633: PUSH
4634: LD_STRING Frank
4636: STR
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: CALL 6559 0 2
4645: ST_TO_ADDR
// if veh > 0 then
4646: LD_VAR 0 5
4650: PUSH
4651: LD_INT 0
4653: GREATER
4654: IFFALSE 4676
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4656: LD_EXP 7
4660: PPUSH
4661: LD_VAR 0 5
4665: PUSH
4666: LD_INT 1
4668: ARRAY
4669: PPUSH
4670: CALL_OW 52
// end else
4674: GO 4691
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4676: LD_EXP 7
4680: PPUSH
4681: LD_INT 4
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4691: LD_ADDR_VAR 0 5
4695: PUSH
4696: LD_INT 4
4698: PPUSH
4699: LD_INT 22
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 21
4711: PUSH
4712: LD_INT 2
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: PUSH
4719: LD_INT 58
4721: PUSH
4722: EMPTY
4723: LIST
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: LIST
4729: PPUSH
4730: CALL_OW 70
4734: ST_TO_ADDR
// if not Gladstone then
4735: LD_EXP 8
4739: NOT
4740: IFFALSE 4809
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4742: LD_ADDR_EXP 8
4746: PUSH
4747: LD_EXP 43
4751: PUSH
4752: LD_STRING Gladstone
4754: STR
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL 6559 0 2
4763: ST_TO_ADDR
// if veh > 0 then
4764: LD_VAR 0 5
4768: PUSH
4769: LD_INT 0
4771: GREATER
4772: IFFALSE 4794
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4774: LD_EXP 8
4778: PPUSH
4779: LD_VAR 0 5
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PPUSH
4788: CALL_OW 52
// end else
4792: GO 4809
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4794: LD_EXP 8
4798: PPUSH
4799: LD_INT 4
4801: PPUSH
4802: LD_INT 0
4804: PPUSH
4805: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4809: LD_ADDR_VAR 0 5
4813: PUSH
4814: LD_INT 4
4816: PPUSH
4817: LD_INT 22
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 21
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 58
4839: PUSH
4840: EMPTY
4841: LIST
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 70
4852: ST_TO_ADDR
// if not Kikuchi then
4853: LD_EXP 9
4857: NOT
4858: IFFALSE 4927
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4860: LD_ADDR_EXP 9
4864: PUSH
4865: LD_EXP 43
4869: PUSH
4870: LD_STRING Kikuchi
4872: STR
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL 6559 0 2
4881: ST_TO_ADDR
// if veh > 0 then
4882: LD_VAR 0 5
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4912
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4892: LD_EXP 9
4896: PPUSH
4897: LD_VAR 0 5
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: CALL_OW 52
// end else
4910: GO 4927
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4912: LD_EXP 9
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: LD_INT 0
4922: PPUSH
4923: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4927: LD_ADDR_VAR 0 5
4931: PUSH
4932: LD_INT 4
4934: PPUSH
4935: LD_INT 22
4937: PUSH
4938: LD_INT 1
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 21
4947: PUSH
4948: LD_INT 2
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: PUSH
4955: LD_INT 58
4957: PUSH
4958: EMPTY
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PPUSH
4966: CALL_OW 70
4970: ST_TO_ADDR
// if not Khatam then
4971: LD_EXP 10
4975: NOT
4976: IFFALSE 5045
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
4978: LD_ADDR_EXP 10
4982: PUSH
4983: LD_EXP 43
4987: PUSH
4988: LD_STRING Khatam
4990: STR
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: CALL 6559 0 2
4999: ST_TO_ADDR
// if veh > 0 then
5000: LD_VAR 0 5
5004: PUSH
5005: LD_INT 0
5007: GREATER
5008: IFFALSE 5030
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5010: LD_EXP 10
5014: PPUSH
5015: LD_VAR 0 5
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 52
// end else
5028: GO 5045
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5030: LD_EXP 10
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: LD_INT 0
5040: PPUSH
5041: CALL_OW 49
// end ; end ; other = CreateCharacterSet ( 07c_others ) ;
5045: LD_ADDR_VAR 0 3
5049: PUSH
5050: LD_STRING 07c_others
5052: PPUSH
5053: CALL_OW 31
5057: ST_TO_ADDR
// for i in other do
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5162
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5071: LD_ADDR_VAR 0 5
5075: PUSH
5076: LD_INT 4
5078: PPUSH
5079: LD_INT 22
5081: PUSH
5082: LD_INT 1
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 21
5091: PUSH
5092: LD_INT 2
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 58
5101: PUSH
5102: EMPTY
5103: LIST
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: PPUSH
5110: CALL_OW 70
5114: ST_TO_ADDR
// if veh > 0 then
5115: LD_VAR 0 5
5119: PUSH
5120: LD_INT 0
5122: GREATER
5123: IFFALSE 5145
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_VAR 0 5
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: CALL_OW 52
// end else
5143: GO 5160
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5145: LD_VAR 0 2
5149: PPUSH
5150: LD_INT 4
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: CALL_OW 49
// end ; end ;
5160: GO 5068
5162: POP
5163: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5164: LD_INT 4
5166: PPUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: PPUSH
5180: CALL_OW 70
5184: PPUSH
5185: LD_INT 53
5187: PPUSH
5188: LD_INT 19
5190: PPUSH
5191: CALL_OW 111
// end ;
5195: LD_VAR 0 1
5199: RET
// export function PrepareSikorsky ; begin
5200: LD_INT 0
5202: PPUSH
// uc_side = 4 ;
5203: LD_ADDR_OWVAR 20
5207: PUSH
5208: LD_INT 4
5210: ST_TO_ADDR
// uc_nation = 1 ;
5211: LD_ADDR_OWVAR 21
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5219: LD_ADDR_EXP 16
5223: PUSH
5224: LD_STRING Sikorski
5226: PPUSH
5227: LD_INT 0
5229: PPUSH
5230: CALL 6559 0 2
5234: ST_TO_ADDR
// vc_engine = 1 ;
5235: LD_ADDR_OWVAR 39
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// vc_control = 1 ;
5243: LD_ADDR_OWVAR 38
5247: PUSH
5248: LD_INT 1
5250: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5251: LD_ADDR_OWVAR 40
5255: PUSH
5256: LD_INT 5
5258: PUSH
5259: LD_INT 3
5261: PUSH
5262: LD_INT 4
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: LIST
5269: PUSH
5270: LD_OWVAR 67
5274: ARRAY
5275: ST_TO_ADDR
// vc_chassis = 4 ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 4
5283: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5284: LD_ADDR_EXP 17
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5294: LD_EXP 17
5298: PPUSH
5299: LD_INT 9
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5309: LD_EXP 16
5313: PPUSH
5314: LD_EXP 17
5318: PPUSH
5319: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5323: LD_EXP 17
5327: PPUSH
5328: LD_INT 5
5330: PPUSH
5331: CALL_OW 113
// end ;
5335: LD_VAR 0 1
5339: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5340: LD_INT 0
5342: PPUSH
5343: PPUSH
5344: PPUSH
5345: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: DOUBLE
5352: LD_INT 1
5354: DEC
5355: ST_TO_ADDR
5356: LD_INT 8
5358: PUSH
5359: LD_INT 7
5361: PUSH
5362: LD_INT 7
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PUSH
5376: FOR_TO
5377: IFFALSE 5474
// begin uc_side = 4 ;
5379: LD_ADDR_OWVAR 20
5383: PUSH
5384: LD_INT 4
5386: ST_TO_ADDR
// uc_nation = 1 ;
5387: LD_ADDR_OWVAR 21
5391: PUSH
5392: LD_INT 1
5394: ST_TO_ADDR
// hc_name =  ;
5395: LD_ADDR_OWVAR 26
5399: PUSH
5400: LD_STRING 
5402: ST_TO_ADDR
// hc_gallery =  ;
5403: LD_ADDR_OWVAR 33
5407: PUSH
5408: LD_STRING 
5410: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5411: LD_INT 0
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: LD_INT 5
5419: PPUSH
5420: LD_INT 8
5422: PPUSH
5423: CALL_OW 12
5427: PPUSH
5428: CALL_OW 380
// un = CreateHuman ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5442: LD_VAR 0 3
5446: PPUSH
5447: LD_INT 9
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5457: LD_VAR 0 3
5461: PPUSH
5462: LD_INT 53
5464: PPUSH
5465: LD_INT 23
5467: PPUSH
5468: CALL_OW 111
// end ;
5472: GO 5376
5474: POP
5475: POP
// for i = 1 to 3 do
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_INT 3
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5587
// begin uc_side = 4 ;
5492: LD_ADDR_OWVAR 20
5496: PUSH
5497: LD_INT 4
5499: ST_TO_ADDR
// uc_nation = 1 ;
5500: LD_ADDR_OWVAR 21
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// hc_name =  ;
5508: LD_ADDR_OWVAR 26
5512: PUSH
5513: LD_STRING 
5515: ST_TO_ADDR
// hc_gallery =  ;
5516: LD_ADDR_OWVAR 33
5520: PUSH
5521: LD_STRING 
5523: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5524: LD_INT 0
5526: PPUSH
5527: LD_INT 4
5529: PPUSH
5530: LD_INT 5
5532: PPUSH
5533: LD_INT 8
5535: PPUSH
5536: CALL_OW 12
5540: PPUSH
5541: CALL_OW 380
// un = CreateHuman ;
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: CALL_OW 44
5554: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5555: LD_VAR 0 3
5559: PPUSH
5560: LD_INT 9
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5570: LD_VAR 0 3
5574: PPUSH
5575: LD_INT 53
5577: PPUSH
5578: LD_INT 23
5580: PPUSH
5581: CALL_OW 111
// end ;
5585: GO 5489
5587: POP
5588: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5589: LD_ADDR_VAR 0 2
5593: PUSH
5594: DOUBLE
5595: LD_INT 1
5597: DEC
5598: ST_TO_ADDR
5599: LD_INT 9
5601: PUSH
5602: LD_INT 8
5604: PUSH
5605: LD_INT 7
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: LD_OWVAR 67
5617: ARRAY
5618: PUSH
5619: FOR_TO
5620: IFFALSE 5816
// begin uc_side = 4 ;
5622: LD_ADDR_OWVAR 20
5626: PUSH
5627: LD_INT 4
5629: ST_TO_ADDR
// uc_nation = 1 ;
5630: LD_ADDR_OWVAR 21
5634: PUSH
5635: LD_INT 1
5637: ST_TO_ADDR
// vc_engine = 1 ;
5638: LD_ADDR_OWVAR 39
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// vc_control = 1 ;
5646: LD_ADDR_OWVAR 38
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5654: LD_ADDR_OWVAR 40
5658: PUSH
5659: LD_INT 3
5661: PUSH
5662: LD_INT 4
5664: PUSH
5665: LD_INT 5
5667: PUSH
5668: LD_INT 6
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 1
5679: PPUSH
5680: LD_INT 4
5682: PPUSH
5683: CALL_OW 12
5687: ARRAY
5688: ST_TO_ADDR
// vc_chassis = 4 ;
5689: LD_ADDR_OWVAR 37
5693: PUSH
5694: LD_INT 4
5696: ST_TO_ADDR
// veh = CreateVehicle ;
5697: LD_ADDR_VAR 0 4
5701: PUSH
5702: CALL_OW 45
5706: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_INT 9
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 49
// hc_name =  ;
5722: LD_ADDR_OWVAR 26
5726: PUSH
5727: LD_STRING 
5729: ST_TO_ADDR
// hc_gallery =  ;
5730: LD_ADDR_OWVAR 33
5734: PUSH
5735: LD_STRING 
5737: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 3
5743: PPUSH
5744: LD_INT 5
5746: PPUSH
5747: LD_INT 8
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: CALL_OW 380
// un = CreateHuman ;
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: CALL_OW 44
5768: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_VAR 0 4
5778: PPUSH
5779: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5783: LD_VAR 0 4
5787: PUSH
5788: LD_VAR 0 3
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PPUSH
5797: LD_INT 53
5799: PPUSH
5800: LD_INT 23
5802: PPUSH
5803: CALL_OW 111
// wait ( 0 0$5 ) ;
5807: LD_INT 175
5809: PPUSH
5810: CALL_OW 67
// end ;
5814: GO 5619
5816: POP
5817: POP
// end ; end_of_file
5818: LD_VAR 0 1
5822: RET
// export function PrepareRussianCommander ; begin
5823: LD_INT 0
5825: PPUSH
// uc_side = 3 ;
5826: LD_ADDR_OWVAR 20
5830: PUSH
5831: LD_INT 3
5833: ST_TO_ADDR
// uc_nation = 3 ;
5834: LD_ADDR_OWVAR 21
5838: PUSH
5839: LD_INT 3
5841: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5842: LD_ADDR_EXP 24
5846: PUSH
5847: LD_STRING Borodin
5849: PPUSH
5850: CALL_OW 25
5854: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5855: LD_EXP 24
5859: PPUSH
5860: LD_INT 25
5862: PPUSH
5863: LD_INT 0
5865: PPUSH
5866: CALL_OW 49
// end ;
5870: LD_VAR 0 1
5874: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5875: LD_INT 0
5877: PPUSH
5878: PPUSH
5879: PPUSH
5880: PPUSH
// for i = 1 to 10 do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_INT 10
5893: PUSH
5894: FOR_TO
5895: IFFALSE 5969
// begin uc_side = 6 ;
5897: LD_ADDR_OWVAR 20
5901: PUSH
5902: LD_INT 6
5904: ST_TO_ADDR
// uc_nation = 3 ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 3
5912: ST_TO_ADDR
// hc_gallery =  ;
5913: LD_ADDR_OWVAR 33
5917: PUSH
5918: LD_STRING 
5920: ST_TO_ADDR
// hc_name =  ;
5921: LD_ADDR_OWVAR 26
5925: PUSH
5926: LD_STRING 
5928: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5929: LD_INT 0
5931: PPUSH
5932: LD_INT 1
5934: PPUSH
5935: LD_INT 3
5937: PPUSH
5938: CALL_OW 380
// un = CreateHuman ;
5942: LD_ADDR_VAR 0 3
5946: PUSH
5947: CALL_OW 44
5951: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: LD_INT 0
5962: PPUSH
5963: CALL_OW 49
// end ;
5967: GO 5894
5969: POP
5970: POP
// for i = 1 to 3 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 3
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6134
// begin uc_side = 6 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 6
5994: ST_TO_ADDR
// uc_nation = 3 ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// vc_engine = 1 ;
6003: LD_ADDR_OWVAR 39
6007: PUSH
6008: LD_INT 1
6010: ST_TO_ADDR
// vc_control = 1 ;
6011: LD_ADDR_OWVAR 38
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6019: LD_ADDR_OWVAR 40
6023: PUSH
6024: LD_INT 43
6026: PUSH
6027: LD_INT 44
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 1
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: CALL_OW 12
6044: ARRAY
6045: ST_TO_ADDR
// vc_chassis = 22 ;
6046: LD_ADDR_OWVAR 37
6050: PUSH
6051: LD_INT 22
6053: ST_TO_ADDR
// veh = CreateVehicle ;
6054: LD_ADDR_VAR 0 4
6058: PUSH
6059: CALL_OW 45
6063: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6064: LD_VAR 0 4
6068: PPUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL_OW 49
// hc_gallery =  ;
6079: LD_ADDR_OWVAR 33
6083: PUSH
6084: LD_STRING 
6086: ST_TO_ADDR
// hc_name =  ;
6087: LD_ADDR_OWVAR 26
6091: PUSH
6092: LD_STRING 
6094: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6095: LD_INT 0
6097: PPUSH
6098: LD_INT 3
6100: PPUSH
6101: LD_INT 4
6103: PPUSH
6104: CALL_OW 380
// un = CreateHuman ;
6108: LD_ADDR_VAR 0 3
6112: PUSH
6113: CALL_OW 44
6117: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_VAR 0 4
6127: PPUSH
6128: CALL_OW 52
// end ;
6132: GO 5984
6134: POP
6135: POP
// end ;
6136: LD_VAR 0 1
6140: RET
// export function PrepareRussians ; var i , un ; begin
6141: LD_INT 0
6143: PPUSH
6144: PPUSH
6145: PPUSH
// for i = 1 to 14 do
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: DOUBLE
6152: LD_INT 1
6154: DEC
6155: ST_TO_ADDR
6156: LD_INT 14
6158: PUSH
6159: FOR_TO
6160: IFFALSE 6246
// begin uc_side = 3 ;
6162: LD_ADDR_OWVAR 20
6166: PUSH
6167: LD_INT 3
6169: ST_TO_ADDR
// uc_nation = 3 ;
6170: LD_ADDR_OWVAR 21
6174: PUSH
6175: LD_INT 3
6177: ST_TO_ADDR
// hc_gallery =  ;
6178: LD_ADDR_OWVAR 33
6182: PUSH
6183: LD_STRING 
6185: ST_TO_ADDR
// hc_name =  ;
6186: LD_ADDR_OWVAR 26
6190: PUSH
6191: LD_STRING 
6193: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6194: LD_INT 0
6196: PPUSH
6197: LD_INT 1
6199: PPUSH
6200: LD_EXP 25
6204: PPUSH
6205: LD_EXP 26
6209: PPUSH
6210: CALL_OW 12
6214: PPUSH
6215: CALL_OW 380
// un = CreateHuman ;
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: CALL_OW 44
6228: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6229: LD_VAR 0 3
6233: PPUSH
6234: LD_INT 3
6236: PPUSH
6237: LD_INT 0
6239: PPUSH
6240: CALL_OW 49
// end ;
6244: GO 6159
6246: POP
6247: POP
// for i = 1 to 6 do
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: DOUBLE
6254: LD_INT 1
6256: DEC
6257: ST_TO_ADDR
6258: LD_INT 6
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6348
// begin uc_side = 3 ;
6264: LD_ADDR_OWVAR 20
6268: PUSH
6269: LD_INT 3
6271: ST_TO_ADDR
// uc_nation = 3 ;
6272: LD_ADDR_OWVAR 21
6276: PUSH
6277: LD_INT 3
6279: ST_TO_ADDR
// hc_gallery =  ;
6280: LD_ADDR_OWVAR 33
6284: PUSH
6285: LD_STRING 
6287: ST_TO_ADDR
// hc_name =  ;
6288: LD_ADDR_OWVAR 26
6292: PUSH
6293: LD_STRING 
6295: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6296: LD_INT 0
6298: PPUSH
6299: LD_INT 2
6301: PPUSH
6302: LD_EXP 25
6306: PPUSH
6307: LD_EXP 26
6311: PPUSH
6312: CALL_OW 12
6316: PPUSH
6317: CALL_OW 380
// un = CreateHuman ;
6321: LD_ADDR_VAR 0 3
6325: PUSH
6326: CALL_OW 44
6330: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6331: LD_VAR 0 3
6335: PPUSH
6336: LD_INT 3
6338: PPUSH
6339: LD_INT 0
6341: PPUSH
6342: CALL_OW 49
// end ;
6346: GO 6261
6348: POP
6349: POP
// for i = 1 to 6 do
6350: LD_ADDR_VAR 0 2
6354: PUSH
6355: DOUBLE
6356: LD_INT 1
6358: DEC
6359: ST_TO_ADDR
6360: LD_INT 6
6362: PUSH
6363: FOR_TO
6364: IFFALSE 6450
// begin uc_side = 3 ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_INT 3
6373: ST_TO_ADDR
// uc_nation = 3 ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// hc_gallery =  ;
6382: LD_ADDR_OWVAR 33
6386: PUSH
6387: LD_STRING 
6389: ST_TO_ADDR
// hc_name =  ;
6390: LD_ADDR_OWVAR 26
6394: PUSH
6395: LD_STRING 
6397: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: LD_EXP 25
6408: PPUSH
6409: LD_EXP 26
6413: PPUSH
6414: CALL_OW 12
6418: PPUSH
6419: CALL_OW 380
// un = CreateHuman ;
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6433: LD_VAR 0 3
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 49
// end ;
6448: GO 6363
6450: POP
6451: POP
// for i = 1 to 4 do
6452: LD_ADDR_VAR 0 2
6456: PUSH
6457: DOUBLE
6458: LD_INT 1
6460: DEC
6461: ST_TO_ADDR
6462: LD_INT 4
6464: PUSH
6465: FOR_TO
6466: IFFALSE 6552
// begin uc_side = 3 ;
6468: LD_ADDR_OWVAR 20
6472: PUSH
6473: LD_INT 3
6475: ST_TO_ADDR
// uc_nation = 3 ;
6476: LD_ADDR_OWVAR 21
6480: PUSH
6481: LD_INT 3
6483: ST_TO_ADDR
// hc_gallery =  ;
6484: LD_ADDR_OWVAR 33
6488: PUSH
6489: LD_STRING 
6491: ST_TO_ADDR
// hc_name =  ;
6492: LD_ADDR_OWVAR 26
6496: PUSH
6497: LD_STRING 
6499: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6500: LD_INT 0
6502: PPUSH
6503: LD_INT 4
6505: PPUSH
6506: LD_EXP 25
6510: PPUSH
6511: LD_EXP 26
6515: PPUSH
6516: CALL_OW 12
6520: PPUSH
6521: CALL_OW 380
// un = CreateHuman ;
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: CALL_OW 44
6534: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6535: LD_VAR 0 3
6539: PPUSH
6540: LD_INT 3
6542: PPUSH
6543: LD_INT 0
6545: PPUSH
6546: CALL_OW 49
// end ;
6550: GO 6465
6552: POP
6553: POP
// end ; end_of_file
6554: LD_VAR 0 1
6558: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6559: LD_INT 0
6561: PPUSH
6562: PPUSH
// if exist_mode then
6563: LD_VAR 0 2
6567: IFFALSE 6586
// unit := CreateCharacter ( ident ) else
6569: LD_ADDR_VAR 0 4
6573: PUSH
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 34
6583: ST_TO_ADDR
6584: GO 6601
// unit := NewCharacter ( ident ) ;
6586: LD_ADDR_VAR 0 4
6590: PUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: CALL_OW 25
6600: ST_TO_ADDR
// result := unit ;
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: LD_VAR 0 4
6610: ST_TO_ADDR
// end ;
6611: LD_VAR 0 3
6615: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6616: LD_INT 0
6618: PPUSH
6619: PPUSH
6620: PPUSH
// rnd = rand ( 1 , characters ) ;
6621: LD_ADDR_VAR 0 6
6625: PUSH
6626: LD_INT 1
6628: PPUSH
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 12
6638: ST_TO_ADDR
// for i = 1 to characters do
6639: LD_ADDR_VAR 0 5
6643: PUSH
6644: DOUBLE
6645: LD_INT 1
6647: DEC
6648: ST_TO_ADDR
6649: LD_VAR 0 1
6653: PUSH
6654: FOR_TO
6655: IFFALSE 6765
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6657: LD_VAR 0 5
6661: PUSH
6662: LD_VAR 0 6
6666: EQUAL
6667: PUSH
6668: LD_VAR 0 1
6672: PUSH
6673: LD_VAR 0 5
6677: ARRAY
6678: PPUSH
6679: CALL_OW 258
6683: PUSH
6684: LD_INT 1
6686: EQUAL
6687: AND
6688: IFFALSE 6710
// Say ( characters [ i ] , dialogMID ) ;
6690: LD_VAR 0 1
6694: PUSH
6695: LD_VAR 0 5
6699: ARRAY
6700: PPUSH
6701: LD_VAR 0 2
6705: PPUSH
6706: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6710: LD_VAR 0 5
6714: PUSH
6715: LD_VAR 0 6
6719: EQUAL
6720: PUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_VAR 0 5
6730: ARRAY
6731: PPUSH
6732: CALL_OW 258
6736: PUSH
6737: LD_INT 2
6739: EQUAL
6740: AND
6741: IFFALSE 6763
// Say ( characters [ i ] , dialogFID ) ;
6743: LD_VAR 0 1
6747: PUSH
6748: LD_VAR 0 5
6752: ARRAY
6753: PPUSH
6754: LD_VAR 0 3
6758: PPUSH
6759: CALL_OW 88
// end ;
6763: GO 6654
6765: POP
6766: POP
// end ;
6767: LD_VAR 0 4
6771: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6772: LD_INT 0
6774: PPUSH
6775: PPUSH
6776: PPUSH
// uc_side := GetSide ( b ) ;
6777: LD_ADDR_OWVAR 20
6781: PUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 255
6791: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6792: LD_ADDR_OWVAR 21
6796: PUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 248
6806: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6807: LD_INT 0
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6822: LD_ADDR_VAR 0 5
6826: PUSH
6827: LD_VAR 0 2
6831: PPUSH
6832: CALL_OW 254
6836: PUSH
6837: LD_INT 3
6839: MINUS
6840: ST_TO_ADDR
// if dir < 0 then
6841: LD_VAR 0 5
6845: PUSH
6846: LD_INT 0
6848: LESS
6849: IFFALSE 6865
// dir := 6 + dir ;
6851: LD_ADDR_VAR 0 5
6855: PUSH
6856: LD_INT 6
6858: PUSH
6859: LD_VAR 0 5
6863: PLUS
6864: ST_TO_ADDR
// un := CreateHuman ;
6865: LD_ADDR_VAR 0 4
6869: PUSH
6870: CALL_OW 44
6874: ST_TO_ADDR
// SetDir ( un , dir ) ;
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_VAR 0 5
6884: PPUSH
6885: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6889: LD_VAR 0 4
6893: PPUSH
6894: LD_VAR 0 2
6898: PPUSH
6899: CALL_OW 52
// end ;
6903: LD_VAR 0 3
6907: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6908: LD_INT 0
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
// for i = 1 to count do
6914: LD_ADDR_VAR 0 8
6918: PUSH
6919: DOUBLE
6920: LD_INT 1
6922: DEC
6923: ST_TO_ADDR
6924: LD_VAR 0 6
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7011
// begin uc_side = side ;
6932: LD_ADDR_OWVAR 20
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// uc_nation = nation ;
6942: LD_ADDR_OWVAR 21
6946: PUSH
6947: LD_VAR 0 2
6951: ST_TO_ADDR
// hc_gallery =  ;
6952: LD_ADDR_OWVAR 33
6956: PUSH
6957: LD_STRING 
6959: ST_TO_ADDR
// hc_name =  ;
6960: LD_ADDR_OWVAR 26
6964: PUSH
6965: LD_STRING 
6967: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6968: LD_INT 0
6970: PPUSH
6971: LD_VAR 0 5
6975: PPUSH
6976: LD_VAR 0 4
6980: PPUSH
6981: CALL_OW 380
// un = CreateHuman ;
6985: LD_ADDR_VAR 0 10
6989: PUSH
6990: CALL_OW 44
6994: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6995: LD_VAR 0 10
6999: PPUSH
7000: LD_VAR 0 3
7004: PPUSH
7005: CALL_OW 52
// end ;
7009: GO 6929
7011: POP
7012: POP
// end ;
7013: LD_VAR 0 7
7017: RET
// export function PrepareDifficulty ; begin
7018: LD_INT 0
7020: PPUSH
// if Difficulty = 1 then
7021: LD_OWVAR 67
7025: PUSH
7026: LD_INT 1
7028: EQUAL
7029: IFFALSE 7047
// begin RuSolMinLevel = 4 ;
7031: LD_ADDR_EXP 25
7035: PUSH
7036: LD_INT 4
7038: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7039: LD_ADDR_EXP 26
7043: PUSH
7044: LD_INT 6
7046: ST_TO_ADDR
// end ; if Difficulty = 2 then
7047: LD_OWVAR 67
7051: PUSH
7052: LD_INT 2
7054: EQUAL
7055: IFFALSE 7125
// begin RuSolMinLevel = 5 ;
7057: LD_ADDR_EXP 25
7061: PUSH
7062: LD_INT 5
7064: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7065: LD_ADDR_EXP 26
7069: PUSH
7070: LD_INT 6
7072: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7073: LD_INT 51
7075: PPUSH
7076: LD_INT 3
7078: PPUSH
7079: LD_INT 1
7081: PPUSH
7082: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7086: LD_INT 57
7088: PPUSH
7089: LD_INT 3
7091: PPUSH
7092: LD_INT 1
7094: PPUSH
7095: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7099: LD_INT 57
7101: PPUSH
7102: LD_INT 6
7104: PPUSH
7105: LD_INT 2
7107: PPUSH
7108: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7112: LD_INT 51
7114: PPUSH
7115: LD_INT 6
7117: PPUSH
7118: LD_INT 2
7120: PPUSH
7121: CALL_OW 322
// end ; if Difficulty = 3 then
7125: LD_OWVAR 67
7129: PUSH
7130: LD_INT 3
7132: EQUAL
7133: IFFALSE 7216
// begin RuSolMinLevel = 5 ;
7135: LD_ADDR_EXP 25
7139: PUSH
7140: LD_INT 5
7142: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7143: LD_ADDR_EXP 26
7147: PUSH
7148: LD_INT 6
7150: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7151: LD_INT 57
7153: PPUSH
7154: LD_INT 3
7156: PPUSH
7157: LD_INT 1
7159: PPUSH
7160: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7164: LD_INT 51
7166: PPUSH
7167: LD_INT 3
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7177: LD_INT 52
7179: PPUSH
7180: LD_INT 3
7182: PPUSH
7183: LD_INT 1
7185: PPUSH
7186: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7190: LD_INT 57
7192: PPUSH
7193: LD_INT 6
7195: PPUSH
7196: LD_INT 2
7198: PPUSH
7199: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7203: LD_INT 52
7205: PPUSH
7206: LD_INT 6
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 322
// end ; end ;
7216: LD_VAR 0 1
7220: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7221: LD_INT 0
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7227: LD_ADDR_VAR 0 3
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7261: LD_ADDR_VAR 0 4
7265: PUSH
7266: LD_INT 4
7268: PUSH
7269: LD_INT 75
7271: PUSH
7272: LD_INT 79
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_INT 4
7286: PUSH
7287: LD_INT 113
7289: PUSH
7290: LD_INT 94
7292: PUSH
7293: LD_INT 4
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 29
7304: PUSH
7305: LD_INT 106
7307: PUSH
7308: LD_INT 97
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 26
7322: PUSH
7323: LD_INT 93
7325: PUSH
7326: LD_INT 97
7328: PUSH
7329: LD_INT 5
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 100
7343: PUSH
7344: LD_INT 89
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 17
7358: PUSH
7359: LD_INT 96
7361: PUSH
7362: LD_INT 89
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 32
7376: PUSH
7377: LD_INT 78
7379: PUSH
7380: LD_INT 94
7382: PUSH
7383: LD_INT 1
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 32
7394: PUSH
7395: LD_INT 95
7397: PUSH
7398: LD_INT 82
7400: PUSH
7401: LD_INT 3
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: LD_INT 32
7412: PUSH
7413: LD_INT 104
7415: PUSH
7416: LD_INT 85
7418: PUSH
7419: LD_INT 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 32
7430: PUSH
7431: LD_INT 81
7433: PUSH
7434: LD_INT 78
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 33
7448: PUSH
7449: LD_INT 109
7451: PUSH
7452: LD_INT 90
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 33
7466: PUSH
7467: LD_INT 88
7469: PUSH
7470: LD_INT 79
7472: PUSH
7473: LD_INT 3
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 33
7484: PUSH
7485: LD_INT 76
7487: PUSH
7488: LD_INT 87
7490: PUSH
7491: LD_INT 1
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 26
7502: PUSH
7503: LD_INT 96
7505: PUSH
7506: LD_INT 97
7508: PUSH
7509: LD_INT 5
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 85
7523: PUSH
7524: LD_INT 84
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 6
7538: PUSH
7539: LD_INT 88
7541: PUSH
7542: LD_INT 95
7544: PUSH
7545: LD_INT 0
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 19
7556: PUSH
7557: LD_INT 103
7559: PUSH
7560: LD_INT 89
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 16
7574: PUSH
7575: LD_INT 97
7577: PUSH
7578: LD_INT 86
7580: PUSH
7581: LD_INT 2
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 24
7592: PUSH
7593: LD_INT 100
7595: PUSH
7596: LD_INT 85
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: ST_TO_ADDR
// for i := 1 to buildingsTab do
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: DOUBLE
7635: LD_INT 1
7637: DEC
7638: ST_TO_ADDR
7639: LD_VAR 0 4
7643: PUSH
7644: FOR_TO
7645: IFFALSE 7718
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7647: LD_VAR 0 3
7651: PPUSH
7652: LD_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: ARRAY
7662: PUSH
7663: LD_INT 1
7665: ARRAY
7666: PPUSH
7667: LD_VAR 0 4
7671: PUSH
7672: LD_VAR 0 2
7676: ARRAY
7677: PUSH
7678: LD_INT 2
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 4
7686: PUSH
7687: LD_VAR 0 2
7691: ARRAY
7692: PUSH
7693: LD_INT 3
7695: ARRAY
7696: PPUSH
7697: LD_VAR 0 4
7701: PUSH
7702: LD_VAR 0 2
7706: ARRAY
7707: PUSH
7708: LD_INT 4
7710: ARRAY
7711: PPUSH
7712: CALL_OW 205
7716: GO 7644
7718: POP
7719: POP
// end ;
7720: LD_VAR 0 1
7724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7725: LD_INT 0
7727: PPUSH
7728: PPUSH
// for i in charactersList do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: LD_VAR 0 1
7738: PUSH
7739: FOR_IN
7740: IFFALSE 7769
// begin if IsOk ( i ) then
7742: LD_VAR 0 4
7746: PPUSH
7747: CALL_OW 302
7751: IFFALSE 7767
// SaveCharacters ( i , ident ) ;
7753: LD_VAR 0 4
7757: PPUSH
7758: LD_VAR 0 2
7762: PPUSH
7763: CALL_OW 38
// end ;
7767: GO 7739
7769: POP
7770: POP
// end ;
7771: LD_VAR 0 3
7775: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7776: LD_INT 0
7778: PPUSH
7779: PPUSH
7780: PPUSH
7781: PPUSH
// for i = 1 to 72 do
7782: LD_ADDR_VAR 0 5
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_INT 72
7794: PUSH
7795: FOR_TO
7796: IFFALSE 7854
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7798: LD_VAR 0 5
7802: PPUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 321
7812: PUSH
7813: LD_INT 1
7815: EQUAL
7816: PUSH
7817: LD_VAR 0 5
7821: PPUSH
7822: LD_VAR 0 3
7826: PPUSH
7827: CALL_OW 482
7831: PUSH
7832: LD_INT 1
7834: EQUAL
7835: AND
7836: IFFALSE 7852
// AddComResearch ( lab , i ) ;
7838: LD_VAR 0 2
7842: PPUSH
7843: LD_VAR 0 5
7847: PPUSH
7848: CALL_OW 184
7852: GO 7795
7854: POP
7855: POP
// end ;
7856: LD_VAR 0 4
7860: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7871: LD_ADDR_VAR 0 6
7875: PUSH
7876: LD_VAR 0 2
7880: PPUSH
7881: LD_INT 22
7883: PUSH
7884: LD_VAR 0 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 56
7895: PUSH
7896: EMPTY
7897: LIST
7898: PUSH
7899: LD_INT 24
7901: PUSH
7902: LD_INT 700
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: LD_INT 60
7914: PUSH
7915: EMPTY
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: LD_INT 25
7927: PUSH
7928: LD_INT 1
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 25
7937: PUSH
7938: LD_INT 5
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 25
7947: PUSH
7948: LD_INT 8
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 25
7957: PUSH
7958: LD_INT 9
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: PUSH
7984: LD_EXP 24
7988: PUSH
7989: EMPTY
7990: LIST
7991: DIFF
7992: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7993: LD_ADDR_VAR 0 7
7997: PUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_VAR 0 1
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 30
8017: PUSH
8018: LD_INT 32
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 58
8027: PUSH
8028: EMPTY
8029: LIST
8030: PUSH
8031: LD_INT 24
8033: PUSH
8034: LD_INT 251
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8052: LD_ADDR_VAR 0 9
8056: PUSH
8057: LD_VAR 0 2
8061: PPUSH
8062: LD_INT 22
8064: PUSH
8065: LD_VAR 0 1
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: LD_INT 30
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 5
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 24
8104: PUSH
8105: LD_INT 251
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: PPUSH
8117: CALL_OW 70
8121: ST_TO_ADDR
// if barrackList > 0 then
8122: LD_VAR 0 9
8126: PUSH
8127: LD_INT 0
8129: GREATER
8130: IFFALSE 8278
// begin if turretList = 0 then
8132: LD_VAR 0 7
8136: PUSH
8137: LD_INT 0
8139: EQUAL
8140: IFFALSE 8182
// begin if soldiers_list > 0 then
8142: LD_VAR 0 6
8146: PUSH
8147: LD_INT 0
8149: GREATER
8150: IFFALSE 8180
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8152: LD_VAR 0 6
8156: PPUSH
8157: LD_VAR 0 9
8161: PUSH
8162: LD_INT 1
8164: PPUSH
8165: LD_VAR 0 9
8169: PPUSH
8170: CALL_OW 12
8174: ARRAY
8175: PPUSH
8176: CALL_OW 120
// end else
8180: GO 8278
// begin for i in barrackList do
8182: LD_ADDR_VAR 0 4
8186: PUSH
8187: LD_VAR 0 9
8191: PUSH
8192: FOR_IN
8193: IFFALSE 8276
// begin insideUnits = UnitsInside ( i ) ;
8195: LD_ADDR_VAR 0 10
8199: PUSH
8200: LD_VAR 0 4
8204: PPUSH
8205: CALL_OW 313
8209: ST_TO_ADDR
// if insideUnits > 0 then
8210: LD_VAR 0 10
8214: PUSH
8215: LD_INT 0
8217: GREATER
8218: IFFALSE 8242
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8220: LD_VAR 0 10
8224: PUSH
8225: LD_INT 1
8227: ARRAY
8228: PPUSH
8229: LD_VAR 0 7
8233: PUSH
8234: LD_INT 1
8236: ARRAY
8237: PPUSH
8238: CALL_OW 120
// if soldiers_list > 0 then
8242: LD_VAR 0 6
8246: PUSH
8247: LD_INT 0
8249: GREATER
8250: IFFALSE 8274
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8252: LD_VAR 0 6
8256: PUSH
8257: LD_INT 1
8259: ARRAY
8260: PPUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: CALL_OW 120
// end ;
8274: GO 8192
8276: POP
8277: POP
// end ; end ; end ;
8278: LD_VAR 0 3
8282: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8283: LD_INT 0
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
// for i = 1 to infantryCount do
8291: LD_ADDR_VAR 0 8
8295: PUSH
8296: DOUBLE
8297: LD_INT 1
8299: DEC
8300: ST_TO_ADDR
8301: LD_VAR 0 5
8305: PUSH
8306: FOR_TO
8307: IFFALSE 8423
// begin uc_side = side ;
8309: LD_ADDR_OWVAR 20
8313: PUSH
8314: LD_VAR 0 1
8318: ST_TO_ADDR
// uc_nation = nation ;
8319: LD_ADDR_OWVAR 21
8323: PUSH
8324: LD_VAR 0 3
8328: ST_TO_ADDR
// hc_class = 1 ;
8329: LD_ADDR_OWVAR 28
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// hc_name =  ;
8337: LD_ADDR_OWVAR 26
8341: PUSH
8342: LD_STRING 
8344: ST_TO_ADDR
// hc_gallery =  ;
8345: LD_ADDR_OWVAR 33
8349: PUSH
8350: LD_STRING 
8352: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8353: LD_INT 0
8355: PPUSH
8356: LD_INT 1
8358: PPUSH
8359: LD_EXP 25
8363: PPUSH
8364: LD_EXP 26
8368: PPUSH
8369: CALL_OW 12
8373: PPUSH
8374: CALL_OW 380
// un = CreateHuman ;
8378: LD_ADDR_VAR 0 10
8382: PUSH
8383: CALL_OW 44
8387: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8388: LD_VAR 0 10
8392: PPUSH
8393: LD_VAR 0 2
8397: PPUSH
8398: LD_INT 0
8400: PPUSH
8401: CALL_OW 49
// defenders_list = defenders_list ^ un ;
8405: LD_ADDR_EXP 32
8409: PUSH
8410: LD_EXP 32
8414: PUSH
8415: LD_VAR 0 10
8419: ADD
8420: ST_TO_ADDR
// end ;
8421: GO 8306
8423: POP
8424: POP
// for i = 1 to vehCount do
8425: LD_ADDR_VAR 0 8
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_VAR 0 6
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8648
// begin uc_side = side ;
8443: LD_ADDR_OWVAR 20
8447: PUSH
8448: LD_VAR 0 1
8452: ST_TO_ADDR
// uc_nation = nation ;
8453: LD_ADDR_OWVAR 21
8457: PUSH
8458: LD_VAR 0 3
8462: ST_TO_ADDR
// vc_Chassis = 22 ;
8463: LD_ADDR_OWVAR 37
8467: PUSH
8468: LD_INT 22
8470: ST_TO_ADDR
// vc_engine = 1 ;
8471: LD_ADDR_OWVAR 39
8475: PUSH
8476: LD_INT 1
8478: ST_TO_ADDR
// vc_control = 1 ;
8479: LD_ADDR_OWVAR 38
8483: PUSH
8484: LD_INT 1
8486: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8487: LD_ADDR_OWVAR 40
8491: PUSH
8492: LD_INT 43
8494: PUSH
8495: LD_INT 44
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 1
8504: PPUSH
8505: LD_INT 2
8507: PPUSH
8508: CALL_OW 12
8512: ARRAY
8513: ST_TO_ADDR
// veh = CreateVehicle ;
8514: LD_ADDR_VAR 0 12
8518: PUSH
8519: CALL_OW 45
8523: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8524: LD_VAR 0 12
8528: PPUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8541: LD_ADDR_EXP 32
8545: PUSH
8546: LD_EXP 32
8550: PUSH
8551: LD_VAR 0 12
8555: ADD
8556: ST_TO_ADDR
// hc_class = 3 ;
8557: LD_ADDR_OWVAR 28
8561: PUSH
8562: LD_INT 3
8564: ST_TO_ADDR
// hc_name =  ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// hc_gallery =  ;
8573: LD_ADDR_OWVAR 33
8577: PUSH
8578: LD_STRING 
8580: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8581: LD_INT 0
8583: PPUSH
8584: LD_INT 3
8586: PPUSH
8587: LD_EXP 25
8591: PPUSH
8592: LD_EXP 26
8596: PPUSH
8597: CALL_OW 12
8601: PPUSH
8602: CALL_OW 380
// un = CreateHuman ;
8606: LD_ADDR_VAR 0 10
8610: PUSH
8611: CALL_OW 44
8615: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8616: LD_VAR 0 10
8620: PPUSH
8621: LD_VAR 0 12
8625: PPUSH
8626: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8630: LD_ADDR_EXP 32
8634: PUSH
8635: LD_EXP 32
8639: PUSH
8640: LD_VAR 0 10
8644: ADD
8645: ST_TO_ADDR
// end ;
8646: GO 8440
8648: POP
8649: POP
// end ;
8650: LD_VAR 0 7
8654: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8655: LD_INT 0
8657: PPUSH
8658: PPUSH
8659: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8660: LD_VAR 0 2
8664: PPUSH
8665: LD_INT 22
8667: PUSH
8668: LD_VAR 0 1
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: PPUSH
8680: CALL_OW 70
8684: PUSH
8685: LD_INT 0
8687: EQUAL
8688: PUSH
8689: LD_EXP 32
8693: PUSH
8694: LD_INT 0
8696: GREATER
8697: AND
8698: IFFALSE 8727
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8700: LD_EXP 32
8704: PPUSH
8705: LD_INT 65
8707: PPUSH
8708: LD_INT 68
8710: PPUSH
8711: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8715: LD_EXP 32
8719: PPUSH
8720: LD_INT 100
8722: PPUSH
8723: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8727: LD_VAR 0 2
8731: PPUSH
8732: LD_INT 22
8734: PUSH
8735: LD_VAR 0 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: PPUSH
8747: CALL_OW 70
8751: PUSH
8752: LD_INT 0
8754: GREATER
8755: PUSH
8756: LD_EXP 32
8760: PUSH
8761: LD_INT 0
8763: GREATER
8764: AND
8765: IFFALSE 8844
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8767: LD_EXP 32
8771: PPUSH
8772: LD_VAR 0 2
8776: PPUSH
8777: LD_INT 22
8779: PUSH
8780: LD_VAR 0 1
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: PPUSH
8792: CALL_OW 70
8796: PUSH
8797: LD_INT 1
8799: ARRAY
8800: PPUSH
8801: CALL_OW 250
8805: PPUSH
8806: LD_VAR 0 2
8810: PPUSH
8811: LD_INT 22
8813: PUSH
8814: LD_VAR 0 1
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: EMPTY
8824: LIST
8825: PPUSH
8826: CALL_OW 70
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: CALL_OW 251
8839: PPUSH
8840: CALL_OW 114
// end ;
8844: LD_VAR 0 3
8848: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8854: LD_INT 22
8856: PUSH
8857: LD_VAR 0 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 21
8868: PUSH
8869: LD_INT 2
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 69
8884: PUSH
8885: LD_VAR 0 3
8889: LESSEQUAL
8890: IFFALSE 8998
// begin for i = 1 to vehCount do
8892: LD_ADDR_VAR 0 9
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_VAR 0 3
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8996
// begin weapon = weaponTab [ i ] ;
8910: LD_ADDR_VAR 0 10
8914: PUSH
8915: LD_VAR 0 4
8919: PUSH
8920: LD_VAR 0 9
8924: ARRAY
8925: ST_TO_ADDR
// if weapon = 46 then
8926: LD_VAR 0 10
8930: PUSH
8931: LD_INT 46
8933: EQUAL
8934: IFFALSE 8965
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8936: LD_VAR 0 2
8940: PPUSH
8941: LD_INT 24
8943: PPUSH
8944: LD_VAR 0 5
8948: PPUSH
8949: LD_VAR 0 6
8953: PPUSH
8954: LD_VAR 0 10
8958: PPUSH
8959: CALL_OW 185
// end else
8963: GO 8994
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_VAR 0 7
8974: PPUSH
8975: LD_VAR 0 5
8979: PPUSH
8980: LD_VAR 0 6
8984: PPUSH
8985: LD_VAR 0 10
8989: PPUSH
8990: CALL_OW 185
// end ; end ;
8994: GO 8907
8996: POP
8997: POP
// end ; end ;
8998: LD_VAR 0 8
9002: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9003: LD_INT 0
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9009: LD_ADDR_VAR 0 8
9013: PUSH
9014: LD_INT 22
9016: PUSH
9017: LD_VAR 0 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 21
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 650
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PPUSH
9058: CALL_OW 69
9062: ST_TO_ADDR
// if damageVehicles > 0 then
9063: LD_VAR 0 8
9067: PUSH
9068: LD_INT 0
9070: GREATER
9071: IFFALSE 9092
// ComMoveXY ( damageVehicles , repX , repY ) ;
9073: LD_VAR 0 8
9077: PPUSH
9078: LD_VAR 0 3
9082: PPUSH
9083: LD_VAR 0 4
9087: PPUSH
9088: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9092: LD_VAR 0 8
9096: PPUSH
9097: LD_INT 95
9099: PUSH
9100: LD_VAR 0 2
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 3
9111: PUSH
9112: LD_INT 58
9114: PUSH
9115: EMPTY
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 72
9130: PUSH
9131: LD_INT 0
9133: GREATER
9134: IFFALSE 9201
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9136: LD_ADDR_VAR 0 6
9140: PUSH
9141: LD_VAR 0 8
9145: PPUSH
9146: LD_INT 95
9148: PUSH
9149: LD_VAR 0 2
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: LD_INT 58
9163: PUSH
9164: EMPTY
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 72
9179: PUSH
9180: FOR_IN
9181: IFFALSE 9199
// ComExitVehicle ( UnitsInside ( i ) ) ;
9183: LD_VAR 0 6
9187: PPUSH
9188: CALL_OW 313
9192: PPUSH
9193: CALL_OW 121
9197: GO 9180
9199: POP
9200: POP
// end ;
9201: LD_VAR 0 5
9205: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9206: LD_INT 0
9208: PPUSH
9209: PPUSH
9210: PPUSH
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9215: LD_ADDR_VAR 0 8
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 250
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: LD_INT 58
9257: PUSH
9258: EMPTY
9259: LIST
9260: PUSH
9261: LD_INT 2
9263: PUSH
9264: LD_INT 34
9266: PUSH
9267: LD_INT 43
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 34
9276: PUSH
9277: LD_INT 44
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 34
9286: PUSH
9287: LD_INT 46
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 69
9315: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9316: LD_INT 22
9318: PUSH
9319: LD_VAR 0 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 21
9330: PUSH
9331: LD_INT 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 24
9340: PUSH
9341: LD_INT 1000
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 3
9350: PUSH
9351: LD_INT 58
9353: PUSH
9354: EMPTY
9355: LIST
9356: PUSH
9357: LD_INT 2
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 43
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 34
9372: PUSH
9373: LD_INT 44
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 34
9382: PUSH
9383: LD_INT 46
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: PUSH
9412: LD_INT 5
9414: PUSH
9415: LD_INT 6
9417: PUSH
9418: LD_INT 7
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_OWVAR 67
9430: ARRAY
9431: GREATEREQUAL
9432: IFFALSE 9997
// repeat wait ( 0 0$1 ) ;
9434: LD_INT 35
9436: PPUSH
9437: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9441: LD_ADDR_VAR 0 8
9445: PUSH
9446: LD_INT 22
9448: PUSH
9449: LD_VAR 0 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 24
9470: PUSH
9471: LD_INT 250
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 2
9480: PUSH
9481: LD_INT 34
9483: PUSH
9484: LD_INT 43
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 34
9493: PUSH
9494: LD_INT 44
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 34
9503: PUSH
9504: LD_INT 46
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 3
9519: PUSH
9520: LD_INT 58
9522: PUSH
9523: EMPTY
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9542: LD_INT 22
9544: PUSH
9545: LD_VAR 0 1
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 95
9556: PUSH
9557: LD_VAR 0 2
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 69
9574: NOT
9575: PUSH
9576: LD_VAR 0 11
9580: PUSH
9581: LD_INT 0
9583: EQUAL
9584: AND
9585: IFFALSE 9640
// for i := 1 to wayX do
9587: LD_ADDR_VAR 0 6
9591: PUSH
9592: DOUBLE
9593: LD_INT 1
9595: DEC
9596: ST_TO_ADDR
9597: LD_VAR 0 3
9601: PUSH
9602: FOR_TO
9603: IFFALSE 9638
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9605: LD_VAR 0 8
9609: PPUSH
9610: LD_VAR 0 3
9614: PUSH
9615: LD_VAR 0 6
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 4
9625: PUSH
9626: LD_VAR 0 6
9630: ARRAY
9631: PPUSH
9632: CALL_OW 114
9636: GO 9602
9638: POP
9639: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9640: LD_INT 22
9642: PUSH
9643: LD_VAR 0 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 95
9654: PUSH
9655: LD_VAR 0 2
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 69
9672: IFFALSE 9896
// begin seeEnemy = 1 ;
9674: LD_ADDR_VAR 0 11
9678: PUSH
9679: LD_INT 1
9681: ST_TO_ADDR
// for j in vehiclesOK do
9682: LD_ADDR_VAR 0 7
9686: PUSH
9687: LD_VAR 0 8
9691: PUSH
9692: FOR_IN
9693: IFFALSE 9894
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9695: LD_ADDR_VAR 0 9
9699: PUSH
9700: LD_INT 81
9702: PUSH
9703: LD_VAR 0 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 101
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 69
9730: PPUSH
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 74
9740: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9741: LD_ADDR_VAR 0 10
9745: PUSH
9746: LD_INT 81
9748: PUSH
9749: LD_VAR 0 1
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 101
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: LD_INT 59
9773: PUSH
9774: EMPTY
9775: LIST
9776: PUSH
9777: LD_INT 21
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 21
9789: PUSH
9790: LD_INT 2
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: PPUSH
9811: CALL_OW 69
9815: PPUSH
9816: LD_VAR 0 7
9820: PPUSH
9821: CALL_OW 74
9825: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9826: LD_VAR 0 7
9830: PPUSH
9831: LD_VAR 0 9
9835: PPUSH
9836: CALL_OW 296
9840: PUSH
9841: LD_INT 8
9843: PLUS
9844: PUSH
9845: LD_VAR 0 7
9849: PPUSH
9850: LD_VAR 0 10
9854: PPUSH
9855: CALL_OW 296
9859: LESS
9860: IFFALSE 9878
// ComAttackUnit ( j , target1 ) else
9862: LD_VAR 0 7
9866: PPUSH
9867: LD_VAR 0 9
9871: PPUSH
9872: CALL_OW 115
9876: GO 9892
// ComAttackUnit ( j , target2 ) ;
9878: LD_VAR 0 7
9882: PPUSH
9883: LD_VAR 0 10
9887: PPUSH
9888: CALL_OW 115
// end ;
9892: GO 9692
9894: POP
9895: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9896: LD_INT 22
9898: PUSH
9899: LD_VAR 0 1
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 21
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: LD_INT 250
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 2
9930: PUSH
9931: LD_INT 34
9933: PUSH
9934: LD_INT 43
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 34
9943: PUSH
9944: LD_INT 44
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 34
9953: PUSH
9954: LD_INT 46
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 3
9969: PUSH
9970: LD_INT 58
9972: PUSH
9973: EMPTY
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: PUSH
9992: LD_INT 0
9994: EQUAL
9995: IFFALSE 9434
// seeEnemy = 0 ;
9997: LD_ADDR_VAR 0 11
10001: PUSH
10002: LD_INT 0
10004: ST_TO_ADDR
// end ;
10005: LD_VAR 0 5
10009: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10010: LD_INT 0
10012: PPUSH
10013: PPUSH
10014: PPUSH
10015: PPUSH
10016: PPUSH
10017: PPUSH
// repeat wait ( 0 0$1 ) ;
10018: LD_INT 35
10020: PPUSH
10021: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_VAR 0 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 21
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 24
10054: PUSH
10055: LD_INT 651
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: ST_TO_ADDR
// for j in vehiclesOK do
10072: LD_ADDR_VAR 0 4
10076: PUSH
10077: LD_VAR 0 7
10081: PUSH
10082: FOR_IN
10083: IFFALSE 10284
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10085: LD_ADDR_VAR 0 5
10089: PUSH
10090: LD_INT 81
10092: PUSH
10093: LD_VAR 0 1
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 101
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PPUSH
10121: LD_VAR 0 4
10125: PPUSH
10126: CALL_OW 74
10130: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10131: LD_ADDR_VAR 0 6
10135: PUSH
10136: LD_INT 81
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 101
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 2
10160: PUSH
10161: LD_INT 59
10163: PUSH
10164: EMPTY
10165: LIST
10166: PUSH
10167: LD_INT 21
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 74
10215: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10216: LD_VAR 0 4
10220: PPUSH
10221: LD_VAR 0 5
10225: PPUSH
10226: CALL_OW 296
10230: PUSH
10231: LD_INT 8
10233: PLUS
10234: PUSH
10235: LD_VAR 0 4
10239: PPUSH
10240: LD_VAR 0 6
10244: PPUSH
10245: CALL_OW 296
10249: LESS
10250: IFFALSE 10268
// ComAttackUnit ( j , target1 ) else
10252: LD_VAR 0 4
10256: PPUSH
10257: LD_VAR 0 5
10261: PPUSH
10262: CALL_OW 115
10266: GO 10282
// ComAttackUnit ( j , target2 ) ;
10268: LD_VAR 0 4
10272: PPUSH
10273: LD_VAR 0 6
10277: PPUSH
10278: CALL_OW 115
// end ;
10282: GO 10082
10284: POP
10285: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10286: LD_INT 22
10288: PUSH
10289: LD_VAR 0 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 24
10310: PUSH
10311: LD_INT 250
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: PUSH
10328: LD_INT 0
10330: EQUAL
10331: IFFALSE 10018
// end ;
10333: LD_VAR 0 2
10337: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
10342: PPUSH
10343: PPUSH
10344: PPUSH
10345: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10346: LD_ADDR_VAR 0 8
10350: PUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: CALL_OW 313
10360: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10361: LD_ADDR_VAR 0 9
10365: PUSH
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 22
10373: PUSH
10374: LD_VAR 0 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 24
10395: PUSH
10396: LD_INT 750
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 3
10405: PUSH
10406: LD_INT 54
10408: PUSH
10409: EMPTY
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: PPUSH
10422: CALL_OW 70
10426: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10427: LD_ADDR_VAR 0 6
10431: PUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 22
10439: PUSH
10440: LD_VAR 0 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 21
10451: PUSH
10452: LD_INT 3
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: LD_INT 24
10464: PUSH
10465: LD_INT 1000
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: PUSH
10481: EMPTY
10482: LIST
10483: PPUSH
10484: CALL_OW 70
10488: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10489: LD_VAR 0 6
10493: NOT
10494: PUSH
10495: LD_INT 22
10497: PUSH
10498: LD_VAR 0 1
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 24
10519: PUSH
10520: LD_INT 250
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 69
10536: NOT
10537: AND
10538: IFFALSE 10542
// exit ;
10540: GO 10739
// if buildings_list > 0 and engineerOkInside then
10542: LD_VAR 0 6
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: PUSH
10551: LD_VAR 0 8
10555: AND
10556: IFFALSE 10582
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
10558: LD_VAR 0 8
10562: PPUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PPUSH
10573: CALL_OW 72
10577: PPUSH
10578: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10582: LD_VAR 0 6
10586: PUSH
10587: LD_INT 0
10589: GREATER
10590: PUSH
10591: LD_VAR 0 9
10595: PUSH
10596: LD_INT 0
10598: GREATER
10599: AND
10600: IFFALSE 10620
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10602: LD_VAR 0 9
10606: PPUSH
10607: LD_VAR 0 6
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: PPUSH
10616: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10620: LD_VAR 0 6
10624: PUSH
10625: LD_INT 0
10627: EQUAL
10628: PUSH
10629: LD_VAR 0 4
10633: PUSH
10634: LD_INT 0
10636: EQUAL
10637: AND
10638: PUSH
10639: LD_VAR 0 9
10643: PUSH
10644: LD_INT 0
10646: GREATER
10647: AND
10648: IFFALSE 10664
// ComEnterUnit ( engineerOkOutside , building ) ;
10650: LD_VAR 0 9
10654: PPUSH
10655: LD_VAR 0 2
10659: PPUSH
10660: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10664: LD_VAR 0 9
10668: PUSH
10669: LD_INT 0
10671: GREATER
10672: PUSH
10673: LD_VAR 0 6
10677: PUSH
10678: LD_INT 0
10680: EQUAL
10681: AND
10682: PUSH
10683: LD_VAR 0 4
10687: PUSH
10688: LD_INT 0
10690: GREATER
10691: AND
10692: IFFALSE 10739
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10694: LD_VAR 0 9
10698: PPUSH
10699: LD_VAR 0 4
10703: PUSH
10704: LD_INT 1
10706: ARRAY
10707: PPUSH
10708: LD_VAR 0 4
10712: PUSH
10713: LD_INT 2
10715: ARRAY
10716: PPUSH
10717: LD_VAR 0 4
10721: PUSH
10722: LD_INT 3
10724: ARRAY
10725: PPUSH
10726: LD_VAR 0 4
10730: PUSH
10731: LD_INT 4
10733: ARRAY
10734: PPUSH
10735: CALL_OW 145
// end ;
10739: LD_VAR 0 5
10743: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10744: LD_INT 0
10746: PPUSH
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10755: LD_ADDR_VAR 0 6
10759: PUSH
10760: LD_INT 22
10762: PUSH
10763: LD_VAR 0 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 25
10774: PUSH
10775: LD_INT 4
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 23
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 24
10794: PUSH
10795: LD_INT 251
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 69
10812: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10813: LD_ADDR_VAR 0 7
10817: PUSH
10818: LD_VAR 0 3
10822: PPUSH
10823: LD_INT 22
10825: PUSH
10826: LD_VAR 0 1
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 23
10837: PUSH
10838: LD_INT 2
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 25
10847: PUSH
10848: LD_INT 4
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 50
10857: PUSH
10858: EMPTY
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 70
10871: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10872: LD_ADDR_VAR 0 10
10876: PUSH
10877: LD_VAR 0 3
10881: PPUSH
10882: LD_INT 22
10884: PUSH
10885: LD_VAR 0 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 21
10896: PUSH
10897: LD_INT 1
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 3
10906: PUSH
10907: LD_INT 25
10909: PUSH
10910: LD_INT 3
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 3
10923: PUSH
10924: LD_INT 24
10926: PUSH
10927: LD_INT 750
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 70
10948: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10949: LD_ADDR_VAR 0 11
10953: PUSH
10954: LD_VAR 0 2
10958: PPUSH
10959: LD_INT 22
10961: PUSH
10962: LD_VAR 0 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 21
10973: PUSH
10974: LD_INT 1
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 3
10983: PUSH
10984: LD_INT 25
10986: PUSH
10987: LD_INT 3
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 3
11000: PUSH
11001: LD_INT 24
11003: PUSH
11004: LD_INT 1000
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PPUSH
11021: CALL_OW 70
11025: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11026: LD_VAR 0 10
11030: NOT
11031: PUSH
11032: LD_VAR 0 11
11036: NOT
11037: AND
11038: PUSH
11039: LD_VAR 0 6
11043: NOT
11044: AND
11045: IFFALSE 11049
// exit ;
11047: GO 11283
// if damageUnits > 0 and sci_list > 0 then
11049: LD_VAR 0 10
11053: PUSH
11054: LD_INT 0
11056: GREATER
11057: PUSH
11058: LD_VAR 0 6
11062: PUSH
11063: LD_INT 0
11065: GREATER
11066: AND
11067: IFFALSE 11083
// ComMoveToArea ( damageUnits , healArea ) ;
11069: LD_VAR 0 10
11073: PPUSH
11074: LD_VAR 0 2
11078: PPUSH
11079: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11083: LD_VAR 0 11
11087: PUSH
11088: LD_INT 0
11090: GREATER
11091: PUSH
11092: LD_VAR 0 6
11096: PUSH
11097: LD_INT 0
11099: GREATER
11100: AND
11101: IFFALSE 11112
// ComExitBuilding ( sci_list ) ;
11103: LD_VAR 0 6
11107: PPUSH
11108: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11112: LD_VAR 0 11
11116: PUSH
11117: LD_INT 0
11119: GREATER
11120: PUSH
11121: LD_VAR 0 7
11125: PUSH
11126: LD_INT 0
11128: GREATER
11129: AND
11130: IFFALSE 11150
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11132: LD_VAR 0 7
11136: PPUSH
11137: LD_VAR 0 11
11141: PUSH
11142: LD_INT 1
11144: ARRAY
11145: PPUSH
11146: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11150: LD_VAR 0 10
11154: PUSH
11155: LD_INT 0
11157: EQUAL
11158: PUSH
11159: LD_VAR 0 11
11163: PUSH
11164: LD_INT 0
11166: EQUAL
11167: AND
11168: PUSH
11169: LD_VAR 0 7
11173: PUSH
11174: LD_INT 0
11176: GREATER
11177: AND
11178: IFFALSE 11283
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11180: LD_ADDR_VAR 0 12
11184: PUSH
11185: LD_INT 22
11187: PUSH
11188: LD_VAR 0 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 21
11199: PUSH
11200: LD_INT 3
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 30
11209: PUSH
11210: LD_INT 8
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: PPUSH
11222: CALL_OW 69
11226: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11227: LD_ADDR_VAR 0 13
11231: PUSH
11232: LD_INT 1
11234: PPUSH
11235: LD_VAR 0 12
11239: PPUSH
11240: CALL_OW 12
11244: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11245: LD_VAR 0 7
11249: PPUSH
11250: LD_INT 3
11252: PUSH
11253: LD_INT 60
11255: PUSH
11256: EMPTY
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 72
11267: PPUSH
11268: LD_VAR 0 12
11272: PUSH
11273: LD_VAR 0 13
11277: ARRAY
11278: PPUSH
11279: CALL_OW 120
// end ; end ;
11283: LD_VAR 0 5
11287: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11288: LD_INT 0
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11295: LD_ADDR_VAR 0 6
11299: PUSH
11300: LD_INT 22
11302: PUSH
11303: LD_VAR 0 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 30
11317: PUSH
11318: LD_INT 31
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 32
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 30
11337: PUSH
11338: LD_INT 33
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 30
11347: PUSH
11348: LD_INT 4
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 30
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11382: LD_ADDR_VAR 0 7
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_VAR 0 2
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 21
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 58
11411: PUSH
11412: EMPTY
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 69
11424: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11425: LD_VAR 0 6
11429: PUSH
11430: LD_INT 0
11432: GREATER
11433: PUSH
11434: LD_VAR 0 7
11438: PUSH
11439: LD_INT 0
11441: GREATER
11442: AND
11443: IFFALSE 11513
// begin for i in turretsList do
11445: LD_ADDR_VAR 0 4
11449: PUSH
11450: LD_VAR 0 6
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11511
// begin for j in enemyBuildings do
11458: LD_ADDR_VAR 0 5
11462: PUSH
11463: LD_VAR 0 7
11467: PUSH
11468: FOR_IN
11469: IFFALSE 11507
// begin if GetDistUnits ( i , j ) < 20 then
11471: LD_VAR 0 4
11475: PPUSH
11476: LD_VAR 0 5
11480: PPUSH
11481: CALL_OW 296
11485: PUSH
11486: LD_INT 20
11488: LESS
11489: IFFALSE 11505
// begin ComAttackUnit ( i , j ) ;
11491: LD_VAR 0 4
11495: PPUSH
11496: LD_VAR 0 5
11500: PPUSH
11501: CALL_OW 115
// end ; end ;
11505: GO 11468
11507: POP
11508: POP
// end ;
11509: GO 11455
11511: POP
11512: POP
// end ; end ;
11513: LD_VAR 0 3
11517: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11518: LD_INT 0
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
// for i = 1 to medicCount do
11531: LD_ADDR_VAR 0 14
11535: PUSH
11536: DOUBLE
11537: LD_INT 1
11539: DEC
11540: ST_TO_ADDR
11541: LD_VAR 0 7
11545: PUSH
11546: FOR_TO
11547: IFFALSE 11629
// begin uc_side = side ;
11549: LD_ADDR_OWVAR 20
11553: PUSH
11554: LD_VAR 0 1
11558: ST_TO_ADDR
// uc_nation = nation ;
11559: LD_ADDR_OWVAR 21
11563: PUSH
11564: LD_VAR 0 2
11568: ST_TO_ADDR
// hc_name =  ;
11569: LD_ADDR_OWVAR 26
11573: PUSH
11574: LD_STRING 
11576: ST_TO_ADDR
// hc_gallery =  ;
11577: LD_ADDR_OWVAR 33
11581: PUSH
11582: LD_STRING 
11584: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11585: LD_INT 0
11587: PPUSH
11588: LD_INT 4
11590: PPUSH
11591: LD_VAR 0 8
11595: PPUSH
11596: CALL_OW 380
// un = CreateHuman ;
11600: LD_ADDR_VAR 0 16
11604: PUSH
11605: CALL_OW 44
11609: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11610: LD_VAR 0 16
11614: PPUSH
11615: LD_VAR 0 9
11619: PPUSH
11620: LD_INT 0
11622: PPUSH
11623: CALL_OW 49
// end ;
11627: GO 11546
11629: POP
11630: POP
// for i = 1 to soldierCount do
11631: LD_ADDR_VAR 0 14
11635: PUSH
11636: DOUBLE
11637: LD_INT 1
11639: DEC
11640: ST_TO_ADDR
11641: LD_VAR 0 3
11645: PUSH
11646: FOR_TO
11647: IFFALSE 11729
// begin uc_side = side ;
11649: LD_ADDR_OWVAR 20
11653: PUSH
11654: LD_VAR 0 1
11658: ST_TO_ADDR
// uc_nation = nation ;
11659: LD_ADDR_OWVAR 21
11663: PUSH
11664: LD_VAR 0 2
11668: ST_TO_ADDR
// hc_name =  ;
11669: LD_ADDR_OWVAR 26
11673: PUSH
11674: LD_STRING 
11676: ST_TO_ADDR
// hc_gallery =  ;
11677: LD_ADDR_OWVAR 33
11681: PUSH
11682: LD_STRING 
11684: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11685: LD_INT 0
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: LD_VAR 0 8
11695: PPUSH
11696: CALL_OW 380
// un = CreateHuman ;
11700: LD_ADDR_VAR 0 16
11704: PUSH
11705: CALL_OW 44
11709: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11710: LD_VAR 0 16
11714: PPUSH
11715: LD_VAR 0 9
11719: PPUSH
11720: LD_INT 0
11722: PPUSH
11723: CALL_OW 49
// end ;
11727: GO 11646
11729: POP
11730: POP
// for i = 1 to sniperCount do
11731: LD_ADDR_VAR 0 14
11735: PUSH
11736: DOUBLE
11737: LD_INT 1
11739: DEC
11740: ST_TO_ADDR
11741: LD_VAR 0 4
11745: PUSH
11746: FOR_TO
11747: IFFALSE 11829
// begin uc_side = side ;
11749: LD_ADDR_OWVAR 20
11753: PUSH
11754: LD_VAR 0 1
11758: ST_TO_ADDR
// uc_nation = nation ;
11759: LD_ADDR_OWVAR 21
11763: PUSH
11764: LD_VAR 0 2
11768: ST_TO_ADDR
// hc_name =  ;
11769: LD_ADDR_OWVAR 26
11773: PUSH
11774: LD_STRING 
11776: ST_TO_ADDR
// hc_gallery =  ;
11777: LD_ADDR_OWVAR 33
11781: PUSH
11782: LD_STRING 
11784: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: LD_VAR 0 8
11795: PPUSH
11796: CALL_OW 380
// un = CreateHuman ;
11800: LD_ADDR_VAR 0 16
11804: PUSH
11805: CALL_OW 44
11809: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11810: LD_VAR 0 16
11814: PPUSH
11815: LD_VAR 0 9
11819: PPUSH
11820: LD_INT 0
11822: PPUSH
11823: CALL_OW 49
// end ;
11827: GO 11746
11829: POP
11830: POP
// for i = 1 to bazookCount do
11831: LD_ADDR_VAR 0 14
11835: PUSH
11836: DOUBLE
11837: LD_INT 1
11839: DEC
11840: ST_TO_ADDR
11841: LD_VAR 0 5
11845: PUSH
11846: FOR_TO
11847: IFFALSE 11929
// begin uc_side = side ;
11849: LD_ADDR_OWVAR 20
11853: PUSH
11854: LD_VAR 0 1
11858: ST_TO_ADDR
// uc_nation = nation ;
11859: LD_ADDR_OWVAR 21
11863: PUSH
11864: LD_VAR 0 2
11868: ST_TO_ADDR
// hc_name =  ;
11869: LD_ADDR_OWVAR 26
11873: PUSH
11874: LD_STRING 
11876: ST_TO_ADDR
// hc_gallery =  ;
11877: LD_ADDR_OWVAR 33
11881: PUSH
11882: LD_STRING 
11884: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11885: LD_INT 0
11887: PPUSH
11888: LD_INT 9
11890: PPUSH
11891: LD_VAR 0 8
11895: PPUSH
11896: CALL_OW 380
// un = CreateHuman ;
11900: LD_ADDR_VAR 0 16
11904: PUSH
11905: CALL_OW 44
11909: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11910: LD_VAR 0 16
11914: PPUSH
11915: LD_VAR 0 9
11919: PPUSH
11920: LD_INT 0
11922: PPUSH
11923: CALL_OW 49
// end ;
11927: GO 11846
11929: POP
11930: POP
// for i = 1 to mortalCount do
11931: LD_ADDR_VAR 0 14
11935: PUSH
11936: DOUBLE
11937: LD_INT 1
11939: DEC
11940: ST_TO_ADDR
11941: LD_VAR 0 6
11945: PUSH
11946: FOR_TO
11947: IFFALSE 12029
// begin uc_side = side ;
11949: LD_ADDR_OWVAR 20
11953: PUSH
11954: LD_VAR 0 1
11958: ST_TO_ADDR
// uc_nation = nation ;
11959: LD_ADDR_OWVAR 21
11963: PUSH
11964: LD_VAR 0 2
11968: ST_TO_ADDR
// hc_name =  ;
11969: LD_ADDR_OWVAR 26
11973: PUSH
11974: LD_STRING 
11976: ST_TO_ADDR
// hc_gallery =  ;
11977: LD_ADDR_OWVAR 33
11981: PUSH
11982: LD_STRING 
11984: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11985: LD_INT 0
11987: PPUSH
11988: LD_INT 8
11990: PPUSH
11991: LD_VAR 0 8
11995: PPUSH
11996: CALL_OW 380
// un = CreateHuman ;
12000: LD_ADDR_VAR 0 16
12004: PUSH
12005: CALL_OW 44
12009: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12010: LD_VAR 0 16
12014: PPUSH
12015: LD_VAR 0 9
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 49
// end ;
12027: GO 11946
12029: POP
12030: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12031: LD_ADDR_VAR 0 19
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: LD_VAR 0 1
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 1
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 25
12063: PUSH
12064: LD_INT 5
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 25
12073: PUSH
12074: LD_INT 8
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 25
12083: PUSH
12084: LD_INT 9
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 69
12106: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12107: LD_ADDR_VAR 0 18
12111: PUSH
12112: LD_INT 22
12114: PUSH
12115: LD_VAR 0 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 25
12126: PUSH
12127: LD_INT 4
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 69
12142: ST_TO_ADDR
// for i in medic_list do
12143: LD_ADDR_VAR 0 14
12147: PUSH
12148: LD_VAR 0 18
12152: PUSH
12153: FOR_IN
12154: IFFALSE 12172
// ComMoveToArea ( i , healArea ) ;
12156: LD_VAR 0 14
12160: PPUSH
12161: LD_VAR 0 10
12165: PPUSH
12166: CALL_OW 113
12170: GO 12153
12172: POP
12173: POP
// if strategy = 1 then
12174: LD_VAR 0 12
12178: PUSH
12179: LD_INT 1
12181: EQUAL
12182: IFFALSE 12728
// begin repeat wait ( 0 0$3 ) ;
12184: LD_INT 105
12186: PPUSH
12187: CALL_OW 67
// for i in soldiersOK_list do
12191: LD_ADDR_VAR 0 14
12195: PUSH
12196: LD_VAR 0 19
12200: PUSH
12201: FOR_IN
12202: IFFALSE 12266
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12204: LD_VAR 0 14
12208: PPUSH
12209: LD_INT 91
12211: PPUSH
12212: LD_INT 63
12214: PPUSH
12215: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12219: LD_VAR 0 14
12223: PPUSH
12224: LD_INT 101
12226: PPUSH
12227: LD_INT 53
12229: PPUSH
12230: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12234: LD_VAR 0 14
12238: PPUSH
12239: LD_INT 75
12241: PPUSH
12242: LD_INT 23
12244: PPUSH
12245: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12249: LD_VAR 0 14
12253: PPUSH
12254: LD_INT 78
12256: PPUSH
12257: LD_INT 8
12259: PPUSH
12260: CALL_OW 174
// end ;
12264: GO 12201
12266: POP
12267: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12268: LD_INT 12
12270: PPUSH
12271: LD_INT 22
12273: PUSH
12274: LD_VAR 0 1
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 70
12287: PUSH
12288: LD_INT 2
12290: GREATER
12291: IFFALSE 12184
// repeat wait ( 0 0$1 ) ;
12293: LD_INT 35
12295: PPUSH
12296: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12300: LD_ADDR_VAR 0 17
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: LD_VAR 0 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: LD_INT 3
12322: PUSH
12323: LD_INT 24
12325: PUSH
12326: LD_INT 550
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 24
12339: PUSH
12340: LD_INT 250
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PPUSH
12356: CALL_OW 69
12360: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12361: LD_ADDR_VAR 0 19
12365: PUSH
12366: LD_INT 22
12368: PUSH
12369: LD_VAR 0 1
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 2
12380: PUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 1
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 25
12393: PUSH
12394: LD_INT 5
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 8
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 25
12413: PUSH
12414: LD_INT 9
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 24
12430: PUSH
12431: LD_INT 1000
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: PPUSH
12443: CALL_OW 69
12447: ST_TO_ADDR
// if medicCount > 0 then
12448: LD_VAR 0 7
12452: PUSH
12453: LD_INT 0
12455: GREATER
12456: IFFALSE 12530
// begin if damageUnit_list > 0 then
12458: LD_VAR 0 17
12462: PUSH
12463: LD_INT 0
12465: GREATER
12466: IFFALSE 12530
// begin for i in damageUnit_list do
12468: LD_ADDR_VAR 0 14
12472: PUSH
12473: LD_VAR 0 17
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12528
// begin ComMoveToArea ( i , healArea ) ;
12481: LD_VAR 0 14
12485: PPUSH
12486: LD_VAR 0 10
12490: PPUSH
12491: CALL_OW 113
// for j in medic_list do
12495: LD_ADDR_VAR 0 15
12499: PUSH
12500: LD_VAR 0 18
12504: PUSH
12505: FOR_IN
12506: IFFALSE 12524
// AddComHeal ( j , i ) ;
12508: LD_VAR 0 15
12512: PPUSH
12513: LD_VAR 0 14
12517: PPUSH
12518: CALL_OW 188
12522: GO 12505
12524: POP
12525: POP
// end ;
12526: GO 12478
12528: POP
12529: POP
// end ; end ; for i in soldiersOK_list do
12530: LD_ADDR_VAR 0 14
12534: PUSH
12535: LD_VAR 0 19
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12717
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12543: LD_ADDR_VAR 0 22
12547: PUSH
12548: LD_INT 22
12550: PUSH
12551: LD_VAR 0 11
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PPUSH
12560: CALL_OW 69
12564: PPUSH
12565: LD_VAR 0 14
12569: PPUSH
12570: CALL_OW 74
12574: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12575: LD_ADDR_VAR 0 23
12579: PUSH
12580: LD_INT 22
12582: PUSH
12583: LD_VAR 0 11
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 2
12594: PUSH
12595: LD_INT 59
12597: PUSH
12598: EMPTY
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 21
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: PPUSH
12634: CALL_OW 69
12638: PPUSH
12639: LD_VAR 0 14
12643: PPUSH
12644: CALL_OW 74
12648: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12649: LD_VAR 0 14
12653: PPUSH
12654: LD_VAR 0 22
12658: PPUSH
12659: CALL_OW 296
12663: PUSH
12664: LD_INT 6
12666: PLUS
12667: PUSH
12668: LD_VAR 0 14
12672: PPUSH
12673: LD_VAR 0 23
12677: PPUSH
12678: CALL_OW 296
12682: LESS
12683: IFFALSE 12701
// begin ComAttackUnit ( i , target1 ) ;
12685: LD_VAR 0 14
12689: PPUSH
12690: LD_VAR 0 22
12694: PPUSH
12695: CALL_OW 115
// end else
12699: GO 12715
// begin ComAttackUnit ( i , target2 ) ;
12701: LD_VAR 0 14
12705: PPUSH
12706: LD_VAR 0 23
12710: PPUSH
12711: CALL_OW 115
// end ; end ;
12715: GO 12540
12717: POP
12718: POP
// until soldiersOK_list = [ ] ;
12719: LD_VAR 0 19
12723: PUSH
12724: EMPTY
12725: EQUAL
12726: IFFALSE 12293
// end ; if strategy = 2 then
12728: LD_VAR 0 12
12732: PUSH
12733: LD_INT 2
12735: EQUAL
12736: IFFALSE 13252
// begin repeat wait ( 0 0$1 ) ;
12738: LD_INT 35
12740: PPUSH
12741: CALL_OW 67
// for i in soldiersOK_list do
12745: LD_ADDR_VAR 0 14
12749: PUSH
12750: LD_VAR 0 19
12754: PUSH
12755: FOR_IN
12756: IFFALSE 12790
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12758: LD_VAR 0 14
12762: PPUSH
12763: LD_INT 91
12765: PPUSH
12766: LD_INT 63
12768: PPUSH
12769: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12773: LD_VAR 0 14
12777: PPUSH
12778: LD_INT 75
12780: PPUSH
12781: LD_INT 33
12783: PPUSH
12784: CALL_OW 174
// end ;
12788: GO 12755
12790: POP
12791: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12792: LD_INT 13
12794: PPUSH
12795: LD_INT 22
12797: PUSH
12798: LD_VAR 0 1
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 70
12811: PUSH
12812: LD_INT 2
12814: GREATER
12815: IFFALSE 12738
// repeat wait ( 0 0$3 ) ;
12817: LD_INT 105
12819: PPUSH
12820: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12824: LD_ADDR_VAR 0 17
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_VAR 0 1
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: LD_INT 3
12846: PUSH
12847: LD_INT 24
12849: PUSH
12850: LD_INT 550
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 24
12863: PUSH
12864: LD_INT 250
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 69
12884: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12885: LD_ADDR_VAR 0 19
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_VAR 0 1
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 2
12904: PUSH
12905: LD_INT 25
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 25
12917: PUSH
12918: LD_INT 5
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 25
12927: PUSH
12928: LD_INT 8
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 25
12937: PUSH
12938: LD_INT 9
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: LD_INT 1000
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: ST_TO_ADDR
// if medicCount > 0 then
12972: LD_VAR 0 7
12976: PUSH
12977: LD_INT 0
12979: GREATER
12980: IFFALSE 13054
// begin if damageUnit_list > 0 then
12982: LD_VAR 0 17
12986: PUSH
12987: LD_INT 0
12989: GREATER
12990: IFFALSE 13054
// begin for i in damageUnit_list do
12992: LD_ADDR_VAR 0 14
12996: PUSH
12997: LD_VAR 0 17
13001: PUSH
13002: FOR_IN
13003: IFFALSE 13052
// begin ComMoveToArea ( i , healArea ) ;
13005: LD_VAR 0 14
13009: PPUSH
13010: LD_VAR 0 10
13014: PPUSH
13015: CALL_OW 113
// for j in medic_list do
13019: LD_ADDR_VAR 0 15
13023: PUSH
13024: LD_VAR 0 18
13028: PUSH
13029: FOR_IN
13030: IFFALSE 13048
// AddComHeal ( j , i ) ;
13032: LD_VAR 0 15
13036: PPUSH
13037: LD_VAR 0 14
13041: PPUSH
13042: CALL_OW 188
13046: GO 13029
13048: POP
13049: POP
// end ;
13050: GO 13002
13052: POP
13053: POP
// end ; end ; for i in soldiersOK_list do
13054: LD_ADDR_VAR 0 14
13058: PUSH
13059: LD_VAR 0 19
13063: PUSH
13064: FOR_IN
13065: IFFALSE 13241
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13067: LD_ADDR_VAR 0 22
13071: PUSH
13072: LD_INT 22
13074: PUSH
13075: LD_VAR 0 11
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: PPUSH
13089: LD_VAR 0 14
13093: PPUSH
13094: CALL_OW 74
13098: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13099: LD_ADDR_VAR 0 23
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_VAR 0 11
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 2
13118: PUSH
13119: LD_INT 59
13121: PUSH
13122: EMPTY
13123: LIST
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 1
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: EMPTY
13156: LIST
13157: PPUSH
13158: CALL_OW 69
13162: PPUSH
13163: LD_VAR 0 14
13167: PPUSH
13168: CALL_OW 74
13172: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13173: LD_VAR 0 14
13177: PPUSH
13178: LD_VAR 0 22
13182: PPUSH
13183: CALL_OW 296
13187: PUSH
13188: LD_INT 6
13190: PLUS
13191: PUSH
13192: LD_VAR 0 14
13196: PPUSH
13197: LD_VAR 0 23
13201: PPUSH
13202: CALL_OW 296
13206: LESS
13207: IFFALSE 13225
// begin ComAttackUnit ( i , target1 ) ;
13209: LD_VAR 0 14
13213: PPUSH
13214: LD_VAR 0 22
13218: PPUSH
13219: CALL_OW 115
// end else
13223: GO 13239
// begin ComAttackUnit ( i , target2 ) ;
13225: LD_VAR 0 14
13229: PPUSH
13230: LD_VAR 0 23
13234: PPUSH
13235: CALL_OW 115
// end ; end ;
13239: GO 13064
13241: POP
13242: POP
// until soldiersOK_list = [ ] ;
13243: LD_VAR 0 19
13247: PUSH
13248: EMPTY
13249: EQUAL
13250: IFFALSE 12817
// end ; if strategy = 3 then
13252: LD_VAR 0 12
13256: PUSH
13257: LD_INT 3
13259: EQUAL
13260: IFFALSE 13806
// begin repeat wait ( 0 0$3 ) ;
13262: LD_INT 105
13264: PPUSH
13265: CALL_OW 67
// for i in soldiersOK_list do
13269: LD_ADDR_VAR 0 14
13273: PUSH
13274: LD_VAR 0 19
13278: PUSH
13279: FOR_IN
13280: IFFALSE 13344
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13282: LD_VAR 0 14
13286: PPUSH
13287: LD_INT 63
13289: PPUSH
13290: LD_INT 71
13292: PPUSH
13293: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13297: LD_VAR 0 14
13301: PPUSH
13302: LD_INT 35
13304: PPUSH
13305: LD_INT 44
13307: PPUSH
13308: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13312: LD_VAR 0 14
13316: PPUSH
13317: LD_INT 23
13319: PPUSH
13320: LD_INT 18
13322: PPUSH
13323: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13327: LD_VAR 0 14
13331: PPUSH
13332: LD_INT 26
13334: PPUSH
13335: LD_INT 12
13337: PPUSH
13338: CALL_OW 174
// end ;
13342: GO 13279
13344: POP
13345: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13346: LD_INT 14
13348: PPUSH
13349: LD_INT 22
13351: PUSH
13352: LD_VAR 0 1
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 70
13365: PUSH
13366: LD_INT 2
13368: GREATER
13369: IFFALSE 13262
// repeat wait ( 0 0$1 ) ;
13371: LD_INT 35
13373: PPUSH
13374: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13378: LD_ADDR_VAR 0 17
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_VAR 0 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: LD_INT 3
13400: PUSH
13401: LD_INT 24
13403: PUSH
13404: LD_INT 550
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 24
13417: PUSH
13418: LD_INT 250
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13439: LD_ADDR_VAR 0 19
13443: PUSH
13444: LD_INT 22
13446: PUSH
13447: LD_VAR 0 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: LD_INT 25
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 25
13471: PUSH
13472: LD_INT 5
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 25
13481: PUSH
13482: LD_INT 8
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 9
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 24
13508: PUSH
13509: LD_INT 1000
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: ST_TO_ADDR
// if medicCount > 0 then
13526: LD_VAR 0 7
13530: PUSH
13531: LD_INT 0
13533: GREATER
13534: IFFALSE 13608
// begin if damageUnit_list > 0 then
13536: LD_VAR 0 17
13540: PUSH
13541: LD_INT 0
13543: GREATER
13544: IFFALSE 13608
// begin for i in damageUnit_list do
13546: LD_ADDR_VAR 0 14
13550: PUSH
13551: LD_VAR 0 17
13555: PUSH
13556: FOR_IN
13557: IFFALSE 13606
// begin ComMoveToArea ( i , healArea ) ;
13559: LD_VAR 0 14
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 113
// for j in medic_list do
13573: LD_ADDR_VAR 0 15
13577: PUSH
13578: LD_VAR 0 18
13582: PUSH
13583: FOR_IN
13584: IFFALSE 13602
// AddComHeal ( j , i ) ;
13586: LD_VAR 0 15
13590: PPUSH
13591: LD_VAR 0 14
13595: PPUSH
13596: CALL_OW 188
13600: GO 13583
13602: POP
13603: POP
// end ;
13604: GO 13556
13606: POP
13607: POP
// end ; end ; for i in soldiersOK_list do
13608: LD_ADDR_VAR 0 14
13612: PUSH
13613: LD_VAR 0 19
13617: PUSH
13618: FOR_IN
13619: IFFALSE 13795
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13621: LD_ADDR_VAR 0 22
13625: PUSH
13626: LD_INT 22
13628: PUSH
13629: LD_VAR 0 11
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PPUSH
13638: CALL_OW 69
13642: PPUSH
13643: LD_VAR 0 14
13647: PPUSH
13648: CALL_OW 74
13652: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13653: LD_ADDR_VAR 0 23
13657: PUSH
13658: LD_INT 22
13660: PUSH
13661: LD_VAR 0 11
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 2
13672: PUSH
13673: LD_INT 59
13675: PUSH
13676: EMPTY
13677: LIST
13678: PUSH
13679: LD_INT 21
13681: PUSH
13682: LD_INT 1
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: PPUSH
13712: CALL_OW 69
13716: PPUSH
13717: LD_VAR 0 14
13721: PPUSH
13722: CALL_OW 74
13726: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13727: LD_VAR 0 14
13731: PPUSH
13732: LD_VAR 0 22
13736: PPUSH
13737: CALL_OW 296
13741: PUSH
13742: LD_INT 6
13744: PLUS
13745: PUSH
13746: LD_VAR 0 14
13750: PPUSH
13751: LD_VAR 0 23
13755: PPUSH
13756: CALL_OW 296
13760: LESS
13761: IFFALSE 13779
// begin ComAttackUnit ( i , target1 ) ;
13763: LD_VAR 0 14
13767: PPUSH
13768: LD_VAR 0 22
13772: PPUSH
13773: CALL_OW 115
// end else
13777: GO 13793
// begin ComAttackUnit ( i , target2 ) ;
13779: LD_VAR 0 14
13783: PPUSH
13784: LD_VAR 0 23
13788: PPUSH
13789: CALL_OW 115
// end ; end ;
13793: GO 13618
13795: POP
13796: POP
// until soldiersOK_list = [ ] ;
13797: LD_VAR 0 19
13801: PUSH
13802: EMPTY
13803: EQUAL
13804: IFFALSE 13371
// end ; end ;
13806: LD_VAR 0 13
13810: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13811: LD_INT 0
13813: PPUSH
13814: PPUSH
13815: PPUSH
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
// amChassisTab = [ ] ;
13824: LD_ADDR_VAR 0 19
13828: PUSH
13829: EMPTY
13830: ST_TO_ADDR
// arChassisTab = [ ] ;
13831: LD_ADDR_VAR 0 18
13835: PUSH
13836: EMPTY
13837: ST_TO_ADDR
// ruChassisTab = [ ] ;
13838: LD_ADDR_VAR 0 17
13842: PUSH
13843: EMPTY
13844: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13845: LD_INT 35
13847: PPUSH
13848: CALL_OW 67
// if nation = 1 then
13852: LD_VAR 0 5
13856: PUSH
13857: LD_INT 1
13859: EQUAL
13860: IFFALSE 14351
// begin uc_side = side ;
13862: LD_ADDR_OWVAR 20
13866: PUSH
13867: LD_VAR 0 2
13871: ST_TO_ADDR
// uc_nation = nation ;
13872: LD_ADDR_OWVAR 21
13876: PUSH
13877: LD_VAR 0 5
13881: ST_TO_ADDR
// vc_engine = vehengine ;
13882: LD_ADDR_OWVAR 39
13886: PUSH
13887: LD_VAR 0 6
13891: ST_TO_ADDR
// vc_control = vehcontrol ;
13892: LD_ADDR_OWVAR 38
13896: PUSH
13897: LD_VAR 0 7
13901: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13902: LD_ADDR_OWVAR 40
13906: PUSH
13907: LD_VAR 0 10
13911: PUSH
13912: LD_INT 1
13914: PPUSH
13915: LD_VAR 0 10
13919: PPUSH
13920: CALL_OW 12
13924: ARRAY
13925: ST_TO_ADDR
// for j = 1 to AMWeapon do
13926: LD_ADDR_VAR 0 14
13930: PUSH
13931: DOUBLE
13932: LD_INT 1
13934: DEC
13935: ST_TO_ADDR
13936: LD_VAR 0 10
13940: PUSH
13941: FOR_TO
13942: IFFALSE 14243
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13944: LD_VAR 0 10
13948: PUSH
13949: LD_VAR 0 14
13953: ARRAY
13954: PUSH
13955: LD_INT 2
13957: EQUAL
13958: PUSH
13959: LD_VAR 0 10
13963: PUSH
13964: LD_VAR 0 14
13968: ARRAY
13969: PUSH
13970: LD_INT 3
13972: EQUAL
13973: OR
13974: IFFALSE 14027
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13976: LD_ADDR_VAR 0 19
13980: PUSH
13981: LD_INT 1
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: LD_INT 3
13989: PUSH
13990: LD_INT 4
13992: PUSH
13993: LD_INT 5
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14003: LD_ADDR_OWVAR 37
14007: PUSH
14008: LD_VAR 0 19
14012: PUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 19
14020: PPUSH
14021: CALL_OW 12
14025: ARRAY
14026: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14027: LD_VAR 0 10
14031: PUSH
14032: LD_VAR 0 14
14036: ARRAY
14037: PUSH
14038: LD_INT 4
14040: EQUAL
14041: PUSH
14042: LD_VAR 0 10
14046: PUSH
14047: LD_VAR 0 14
14051: ARRAY
14052: PUSH
14053: LD_INT 5
14055: EQUAL
14056: OR
14057: PUSH
14058: LD_VAR 0 10
14062: PUSH
14063: LD_VAR 0 14
14067: ARRAY
14068: PUSH
14069: LD_INT 9
14071: EQUAL
14072: OR
14073: PUSH
14074: LD_VAR 0 10
14078: PUSH
14079: LD_VAR 0 14
14083: ARRAY
14084: PUSH
14085: LD_INT 11
14087: EQUAL
14088: OR
14089: PUSH
14090: LD_VAR 0 10
14094: PUSH
14095: LD_VAR 0 14
14099: ARRAY
14100: PUSH
14101: LD_INT 7
14103: EQUAL
14104: OR
14105: IFFALSE 14154
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14107: LD_ADDR_VAR 0 19
14111: PUSH
14112: LD_INT 2
14114: PUSH
14115: LD_INT 3
14117: PUSH
14118: LD_INT 4
14120: PUSH
14121: LD_INT 5
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14130: LD_ADDR_OWVAR 37
14134: PUSH
14135: LD_VAR 0 19
14139: PUSH
14140: LD_INT 1
14142: PPUSH
14143: LD_VAR 0 19
14147: PPUSH
14148: CALL_OW 12
14152: ARRAY
14153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14154: LD_VAR 0 10
14158: PUSH
14159: LD_VAR 0 14
14163: ARRAY
14164: PUSH
14165: LD_INT 8
14167: EQUAL
14168: PUSH
14169: LD_VAR 0 10
14173: PUSH
14174: LD_VAR 0 14
14178: ARRAY
14179: PUSH
14180: LD_INT 6
14182: EQUAL
14183: OR
14184: PUSH
14185: LD_VAR 0 10
14189: PUSH
14190: LD_VAR 0 14
14194: ARRAY
14195: PUSH
14196: LD_INT 10
14198: EQUAL
14199: OR
14200: IFFALSE 14241
// begin amChassisTab = [ 4 , 5 ] ;
14202: LD_ADDR_VAR 0 19
14206: PUSH
14207: LD_INT 4
14209: PUSH
14210: LD_INT 5
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14217: LD_ADDR_OWVAR 37
14221: PUSH
14222: LD_VAR 0 19
14226: PUSH
14227: LD_INT 1
14229: PPUSH
14230: LD_VAR 0 19
14234: PPUSH
14235: CALL_OW 12
14239: ARRAY
14240: ST_TO_ADDR
// end ; end ;
14241: GO 13941
14243: POP
14244: POP
// veh = CreateVehicle ;
14245: LD_ADDR_VAR 0 16
14249: PUSH
14250: CALL_OW 45
14254: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14255: LD_VAR 0 16
14259: PPUSH
14260: LD_VAR 0 1
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL_OW 49
// if vehControl = 1 then
14272: LD_VAR 0 7
14276: PUSH
14277: LD_INT 1
14279: EQUAL
14280: IFFALSE 14337
// begin hc_gallery =  ;
14282: LD_ADDR_OWVAR 33
14286: PUSH
14287: LD_STRING 
14289: ST_TO_ADDR
// hc_name =  ;
14290: LD_ADDR_OWVAR 26
14294: PUSH
14295: LD_STRING 
14297: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14298: LD_INT 0
14300: PPUSH
14301: LD_INT 3
14303: PPUSH
14304: LD_VAR 0 4
14308: PPUSH
14309: CALL_OW 380
// un = CreateHuman ;
14313: LD_ADDR_VAR 0 15
14317: PUSH
14318: CALL_OW 44
14322: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14323: LD_VAR 0 15
14327: PPUSH
14328: LD_VAR 0 16
14332: PPUSH
14333: CALL_OW 52
// end ; i = i + 1 ;
14337: LD_ADDR_VAR 0 13
14341: PUSH
14342: LD_VAR 0 13
14346: PUSH
14347: LD_INT 1
14349: PLUS
14350: ST_TO_ADDR
// end ; if nation = 2 then
14351: LD_VAR 0 5
14355: PUSH
14356: LD_INT 2
14358: EQUAL
14359: IFFALSE 14783
// begin uc_side = side ;
14361: LD_ADDR_OWVAR 20
14365: PUSH
14366: LD_VAR 0 2
14370: ST_TO_ADDR
// uc_nation = nation ;
14371: LD_ADDR_OWVAR 21
14375: PUSH
14376: LD_VAR 0 5
14380: ST_TO_ADDR
// vc_engine = vehengine ;
14381: LD_ADDR_OWVAR 39
14385: PUSH
14386: LD_VAR 0 6
14390: ST_TO_ADDR
// vc_control = vehcontrol ;
14391: LD_ADDR_OWVAR 38
14395: PUSH
14396: LD_VAR 0 7
14400: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14401: LD_ADDR_OWVAR 40
14405: PUSH
14406: LD_VAR 0 9
14410: PUSH
14411: LD_INT 1
14413: PPUSH
14414: LD_VAR 0 9
14418: PPUSH
14419: CALL_OW 12
14423: ARRAY
14424: ST_TO_ADDR
// for j = 1 to ARWeapons do
14425: LD_ADDR_VAR 0 14
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_VAR 0 9
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14675
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14443: LD_VAR 0 9
14447: PUSH
14448: LD_VAR 0 14
14452: ARRAY
14453: PUSH
14454: LD_INT 24
14456: EQUAL
14457: PUSH
14458: LD_VAR 0 9
14462: PUSH
14463: LD_VAR 0 14
14467: ARRAY
14468: PUSH
14469: LD_INT 22
14471: EQUAL
14472: OR
14473: PUSH
14474: LD_VAR 0 9
14478: PUSH
14479: LD_VAR 0 14
14483: ARRAY
14484: PUSH
14485: LD_INT 23
14487: EQUAL
14488: OR
14489: PUSH
14490: LD_VAR 0 9
14494: PUSH
14495: LD_VAR 0 14
14499: ARRAY
14500: PUSH
14501: LD_INT 30
14503: EQUAL
14504: OR
14505: IFFALSE 14554
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14507: LD_ADDR_VAR 0 18
14511: PUSH
14512: LD_INT 11
14514: PUSH
14515: LD_INT 12
14517: PUSH
14518: LD_INT 13
14520: PUSH
14521: LD_INT 14
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14530: LD_ADDR_OWVAR 37
14534: PUSH
14535: LD_VAR 0 18
14539: PUSH
14540: LD_INT 1
14542: PPUSH
14543: LD_VAR 0 18
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14554: LD_VAR 0 9
14558: PUSH
14559: LD_VAR 0 14
14563: ARRAY
14564: PUSH
14565: LD_INT 29
14567: EQUAL
14568: PUSH
14569: LD_VAR 0 9
14573: PUSH
14574: LD_VAR 0 14
14578: ARRAY
14579: PUSH
14580: LD_INT 28
14582: EQUAL
14583: OR
14584: PUSH
14585: LD_VAR 0 9
14589: PUSH
14590: LD_VAR 0 14
14594: ARRAY
14595: PUSH
14596: LD_INT 27
14598: EQUAL
14599: OR
14600: PUSH
14601: LD_VAR 0 9
14605: PUSH
14606: LD_VAR 0 14
14610: ARRAY
14611: PUSH
14612: LD_INT 26
14614: EQUAL
14615: OR
14616: PUSH
14617: LD_VAR 0 9
14621: PUSH
14622: LD_VAR 0 14
14626: ARRAY
14627: PUSH
14628: LD_INT 25
14630: EQUAL
14631: OR
14632: IFFALSE 14673
// begin arChassisTab = [ 13 , 14 ] ;
14634: LD_ADDR_VAR 0 18
14638: PUSH
14639: LD_INT 13
14641: PUSH
14642: LD_INT 14
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14649: LD_ADDR_OWVAR 37
14653: PUSH
14654: LD_VAR 0 18
14658: PUSH
14659: LD_INT 1
14661: PPUSH
14662: LD_VAR 0 18
14666: PPUSH
14667: CALL_OW 12
14671: ARRAY
14672: ST_TO_ADDR
// end ; end ;
14673: GO 14440
14675: POP
14676: POP
// veh = CreateVehicle ;
14677: LD_ADDR_VAR 0 16
14681: PUSH
14682: CALL_OW 45
14686: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14687: LD_VAR 0 16
14691: PPUSH
14692: LD_VAR 0 1
14696: PPUSH
14697: LD_INT 0
14699: PPUSH
14700: CALL_OW 49
// if vehcontrol = 1 then
14704: LD_VAR 0 7
14708: PUSH
14709: LD_INT 1
14711: EQUAL
14712: IFFALSE 14769
// begin hc_gallery =  ;
14714: LD_ADDR_OWVAR 33
14718: PUSH
14719: LD_STRING 
14721: ST_TO_ADDR
// hc_name =  ;
14722: LD_ADDR_OWVAR 26
14726: PUSH
14727: LD_STRING 
14729: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14730: LD_INT 0
14732: PPUSH
14733: LD_INT 3
14735: PPUSH
14736: LD_VAR 0 4
14740: PPUSH
14741: CALL_OW 380
// un = CreateHuman ;
14745: LD_ADDR_VAR 0 15
14749: PUSH
14750: CALL_OW 44
14754: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14755: LD_VAR 0 15
14759: PPUSH
14760: LD_VAR 0 16
14764: PPUSH
14765: CALL_OW 52
// end ; i = i + 1 ;
14769: LD_ADDR_VAR 0 13
14773: PUSH
14774: LD_VAR 0 13
14778: PUSH
14779: LD_INT 1
14781: PLUS
14782: ST_TO_ADDR
// end ; if nation = 3 then
14783: LD_VAR 0 5
14787: PUSH
14788: LD_INT 3
14790: EQUAL
14791: IFFALSE 15183
// begin uc_side = side ;
14793: LD_ADDR_OWVAR 20
14797: PUSH
14798: LD_VAR 0 2
14802: ST_TO_ADDR
// uc_nation = nation ;
14803: LD_ADDR_OWVAR 21
14807: PUSH
14808: LD_VAR 0 5
14812: ST_TO_ADDR
// vc_engine = vehengine ;
14813: LD_ADDR_OWVAR 39
14817: PUSH
14818: LD_VAR 0 6
14822: ST_TO_ADDR
// vc_control = vehcontrol ;
14823: LD_ADDR_OWVAR 38
14827: PUSH
14828: LD_VAR 0 7
14832: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14833: LD_ADDR_OWVAR 40
14837: PUSH
14838: LD_VAR 0 8
14842: PUSH
14843: LD_INT 1
14845: PPUSH
14846: LD_VAR 0 8
14850: PPUSH
14851: CALL_OW 12
14855: ARRAY
14856: ST_TO_ADDR
// for j = 1 to RuWeapons do
14857: LD_ADDR_VAR 0 14
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_VAR 0 8
14871: PUSH
14872: FOR_TO
14873: IFFALSE 15075
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14875: LD_VAR 0 8
14879: PUSH
14880: LD_VAR 0 14
14884: ARRAY
14885: PUSH
14886: LD_INT 42
14888: EQUAL
14889: PUSH
14890: LD_VAR 0 8
14894: PUSH
14895: LD_VAR 0 14
14899: ARRAY
14900: PUSH
14901: LD_INT 43
14903: EQUAL
14904: OR
14905: PUSH
14906: LD_VAR 0 8
14910: PUSH
14911: LD_VAR 0 14
14915: ARRAY
14916: PUSH
14917: LD_INT 44
14919: EQUAL
14920: OR
14921: PUSH
14922: LD_VAR 0 8
14926: PUSH
14927: LD_VAR 0 14
14931: ARRAY
14932: PUSH
14933: LD_INT 45
14935: EQUAL
14936: OR
14937: PUSH
14938: LD_VAR 0 8
14942: PUSH
14943: LD_VAR 0 14
14947: ARRAY
14948: PUSH
14949: LD_INT 49
14951: EQUAL
14952: OR
14953: IFFALSE 15002
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14955: LD_ADDR_VAR 0 17
14959: PUSH
14960: LD_INT 21
14962: PUSH
14963: LD_INT 22
14965: PUSH
14966: LD_INT 23
14968: PUSH
14969: LD_INT 24
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14978: LD_ADDR_OWVAR 37
14982: PUSH
14983: LD_VAR 0 17
14987: PUSH
14988: LD_INT 1
14990: PPUSH
14991: LD_VAR 0 17
14995: PPUSH
14996: CALL_OW 12
15000: ARRAY
15001: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15002: LD_VAR 0 8
15006: PUSH
15007: LD_VAR 0 14
15011: ARRAY
15012: PUSH
15013: LD_INT 46
15015: EQUAL
15016: PUSH
15017: LD_VAR 0 8
15021: PUSH
15022: LD_VAR 0 14
15026: ARRAY
15027: PUSH
15028: LD_INT 47
15030: EQUAL
15031: OR
15032: IFFALSE 15073
// begin ruChassisTab = [ 23 , 24 ] ;
15034: LD_ADDR_VAR 0 17
15038: PUSH
15039: LD_INT 23
15041: PUSH
15042: LD_INT 24
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15049: LD_ADDR_OWVAR 37
15053: PUSH
15054: LD_VAR 0 17
15058: PUSH
15059: LD_INT 1
15061: PPUSH
15062: LD_VAR 0 17
15066: PPUSH
15067: CALL_OW 12
15071: ARRAY
15072: ST_TO_ADDR
// end ; end ;
15073: GO 14872
15075: POP
15076: POP
// veh = CreateVehicle ;
15077: LD_ADDR_VAR 0 16
15081: PUSH
15082: CALL_OW 45
15086: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15087: LD_VAR 0 16
15091: PPUSH
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_INT 0
15099: PPUSH
15100: CALL_OW 49
// if vehcontrol = 1 then
15104: LD_VAR 0 7
15108: PUSH
15109: LD_INT 1
15111: EQUAL
15112: IFFALSE 15169
// begin hc_gallery =  ;
15114: LD_ADDR_OWVAR 33
15118: PUSH
15119: LD_STRING 
15121: ST_TO_ADDR
// hc_name =  ;
15122: LD_ADDR_OWVAR 26
15126: PUSH
15127: LD_STRING 
15129: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15130: LD_INT 0
15132: PPUSH
15133: LD_INT 3
15135: PPUSH
15136: LD_VAR 0 4
15140: PPUSH
15141: CALL_OW 380
// un = CreateHuman ;
15145: LD_ADDR_VAR 0 15
15149: PUSH
15150: CALL_OW 44
15154: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15155: LD_VAR 0 15
15159: PPUSH
15160: LD_VAR 0 16
15164: PPUSH
15165: CALL_OW 52
// end ; i = i + 1 ;
15169: LD_ADDR_VAR 0 13
15173: PUSH
15174: LD_VAR 0 13
15178: PUSH
15179: LD_INT 1
15181: PLUS
15182: ST_TO_ADDR
// end ; until i = vehCount ;
15183: LD_VAR 0 13
15187: PUSH
15188: LD_VAR 0 3
15192: EQUAL
15193: IFFALSE 13845
// repeat wait ( 0 0$1 ) ;
15195: LD_INT 35
15197: PPUSH
15198: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15202: LD_ADDR_VAR 0 20
15206: PUSH
15207: LD_INT 22
15209: PUSH
15210: LD_VAR 0 2
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 21
15221: PUSH
15222: LD_INT 2
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 24
15231: PUSH
15232: LD_INT 250
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: PPUSH
15244: CALL_OW 69
15248: ST_TO_ADDR
// if vehicleOK_list > 0 then
15249: LD_VAR 0 20
15253: PUSH
15254: LD_INT 0
15256: GREATER
15257: IFFALSE 15448
// begin for i in vehicleOK_list do
15259: LD_ADDR_VAR 0 13
15263: PUSH
15264: LD_VAR 0 20
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15446
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15272: LD_ADDR_VAR 0 21
15276: PUSH
15277: LD_INT 22
15279: PUSH
15280: LD_VAR 0 11
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PPUSH
15289: CALL_OW 69
15293: PPUSH
15294: LD_VAR 0 13
15298: PPUSH
15299: CALL_OW 74
15303: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15304: LD_ADDR_VAR 0 22
15308: PUSH
15309: LD_INT 22
15311: PUSH
15312: LD_VAR 0 11
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: LD_INT 59
15326: PUSH
15327: EMPTY
15328: LIST
15329: PUSH
15330: LD_INT 21
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 21
15342: PUSH
15343: LD_INT 2
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: PPUSH
15368: LD_VAR 0 13
15372: PPUSH
15373: CALL_OW 74
15377: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15378: LD_VAR 0 13
15382: PPUSH
15383: LD_VAR 0 21
15387: PPUSH
15388: CALL_OW 296
15392: PUSH
15393: LD_INT 6
15395: PLUS
15396: PUSH
15397: LD_VAR 0 13
15401: PPUSH
15402: LD_VAR 0 22
15406: PPUSH
15407: CALL_OW 296
15411: LESS
15412: IFFALSE 15430
// begin ComAttackUnit ( i , target1 ) ;
15414: LD_VAR 0 13
15418: PPUSH
15419: LD_VAR 0 21
15423: PPUSH
15424: CALL_OW 115
// end else
15428: GO 15444
// begin ComAttackUnit ( i , target2 ) ;
15430: LD_VAR 0 13
15434: PPUSH
15435: LD_VAR 0 22
15439: PPUSH
15440: CALL_OW 115
// end ; end ;
15444: GO 15269
15446: POP
15447: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15448: LD_INT 22
15450: PUSH
15451: LD_VAR 0 2
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 21
15462: PUSH
15463: LD_INT 2
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 24
15472: PUSH
15473: LD_INT 250
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: PUSH
15490: LD_INT 0
15492: EQUAL
15493: IFFALSE 15195
// end ;
15495: LD_VAR 0 12
15499: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15500: LD_INT 0
15502: PPUSH
15503: PPUSH
15504: PPUSH
15505: PPUSH
15506: PPUSH
15507: PPUSH
15508: PPUSH
15509: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15510: LD_ADDR_VAR 0 7
15514: PUSH
15515: LD_INT 22
15517: PUSH
15518: LD_VAR 0 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: LD_INT 3
15532: PUSH
15533: LD_INT 24
15535: PUSH
15536: LD_INT 550
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 24
15549: PUSH
15550: LD_INT 250
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PPUSH
15566: CALL_OW 69
15570: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15571: LD_ADDR_VAR 0 8
15575: PUSH
15576: LD_INT 22
15578: PUSH
15579: LD_VAR 0 1
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 2
15590: PUSH
15591: LD_INT 25
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 25
15603: PUSH
15604: LD_INT 5
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 25
15613: PUSH
15614: LD_INT 8
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 9
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 24
15640: PUSH
15641: LD_INT 1000
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15658: LD_ADDR_VAR 0 9
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_VAR 0 1
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 25
15677: PUSH
15678: LD_INT 4
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 69
15693: ST_TO_ADDR
// if medicCount > 0 then
15694: LD_VAR 0 9
15698: PUSH
15699: LD_INT 0
15701: GREATER
15702: IFFALSE 15776
// begin if damageUnit_list > 0 then
15704: LD_VAR 0 7
15708: PUSH
15709: LD_INT 0
15711: GREATER
15712: IFFALSE 15776
// begin for i in damageUnit_list do
15714: LD_ADDR_VAR 0 5
15718: PUSH
15719: LD_VAR 0 7
15723: PUSH
15724: FOR_IN
15725: IFFALSE 15774
// begin ComMoveToArea ( i , healArea ) ;
15727: LD_VAR 0 5
15731: PPUSH
15732: LD_VAR 0 2
15736: PPUSH
15737: CALL_OW 113
// for j in medicCount do
15741: LD_ADDR_VAR 0 6
15745: PUSH
15746: LD_VAR 0 9
15750: PUSH
15751: FOR_IN
15752: IFFALSE 15770
// AddComHeal ( j , i ) ;
15754: LD_VAR 0 6
15758: PPUSH
15759: LD_VAR 0 5
15763: PPUSH
15764: CALL_OW 188
15768: GO 15751
15770: POP
15771: POP
// end ;
15772: GO 15724
15774: POP
15775: POP
// end ; end ; if soldiersOK_list > 0 then
15776: LD_VAR 0 8
15780: PUSH
15781: LD_INT 0
15783: GREATER
15784: IFFALSE 15975
// begin for i in soldiersOK_list do
15786: LD_ADDR_VAR 0 5
15790: PUSH
15791: LD_VAR 0 8
15795: PUSH
15796: FOR_IN
15797: IFFALSE 15973
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15799: LD_ADDR_VAR 0 10
15803: PUSH
15804: LD_INT 22
15806: PUSH
15807: LD_VAR 0 3
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PPUSH
15816: CALL_OW 69
15820: PPUSH
15821: LD_VAR 0 5
15825: PPUSH
15826: CALL_OW 74
15830: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15831: LD_ADDR_VAR 0 11
15835: PUSH
15836: LD_INT 22
15838: PUSH
15839: LD_VAR 0 3
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 2
15850: PUSH
15851: LD_INT 59
15853: PUSH
15854: EMPTY
15855: LIST
15856: PUSH
15857: LD_INT 21
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 21
15869: PUSH
15870: LD_INT 2
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: PPUSH
15890: CALL_OW 69
15894: PPUSH
15895: LD_VAR 0 5
15899: PPUSH
15900: CALL_OW 74
15904: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15905: LD_VAR 0 5
15909: PPUSH
15910: LD_VAR 0 10
15914: PPUSH
15915: CALL_OW 296
15919: PUSH
15920: LD_INT 8
15922: PLUS
15923: PUSH
15924: LD_VAR 0 5
15928: PPUSH
15929: LD_VAR 0 11
15933: PPUSH
15934: CALL_OW 296
15938: LESS
15939: IFFALSE 15957
// begin ComAttackUnit ( i , target1 ) ;
15941: LD_VAR 0 5
15945: PPUSH
15946: LD_VAR 0 10
15950: PPUSH
15951: CALL_OW 115
// end else
15955: GO 15971
// begin ComAttackUnit ( i , target2 ) ;
15957: LD_VAR 0 5
15961: PPUSH
15962: LD_VAR 0 11
15966: PPUSH
15967: CALL_OW 115
// end ; end ;
15971: GO 15796
15973: POP
15974: POP
// end ; end ;
15975: LD_VAR 0 4
15979: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15980: LD_INT 0
15982: PPUSH
15983: PPUSH
// list := [ ] ;
15984: LD_ADDR_VAR 0 5
15988: PUSH
15989: EMPTY
15990: ST_TO_ADDR
// case d of 0 :
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 0
15998: DOUBLE
15999: EQUAL
16000: IFTRUE 16004
16002: GO 16137
16004: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16005: LD_ADDR_VAR 0 5
16009: PUSH
16010: LD_VAR 0 1
16014: PUSH
16015: LD_INT 4
16017: MINUS
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: LD_INT 4
16026: MINUS
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: LD_VAR 0 1
16040: PUSH
16041: LD_INT 3
16043: MINUS
16044: PUSH
16045: LD_VAR 0 2
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: PUSH
16058: LD_VAR 0 1
16062: PUSH
16063: LD_INT 4
16065: PLUS
16066: PUSH
16067: LD_VAR 0 2
16071: PUSH
16072: LD_INT 4
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: PUSH
16080: LD_VAR 0 1
16084: PUSH
16085: LD_INT 3
16087: PLUS
16088: PUSH
16089: LD_VAR 0 2
16093: PUSH
16094: LD_INT 3
16096: PLUS
16097: PUSH
16098: LD_INT 5
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: LIST
16105: PUSH
16106: LD_VAR 0 1
16110: PUSH
16111: LD_VAR 0 2
16115: PUSH
16116: LD_INT 4
16118: PLUS
16119: PUSH
16120: LD_INT 0
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: ST_TO_ADDR
// end ; 1 :
16135: GO 16835
16137: LD_INT 1
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16278
16145: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16146: LD_ADDR_VAR 0 5
16150: PUSH
16151: LD_VAR 0 1
16155: PUSH
16156: LD_VAR 0 2
16160: PUSH
16161: LD_INT 4
16163: MINUS
16164: PUSH
16165: LD_INT 3
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: PUSH
16173: LD_VAR 0 1
16177: PUSH
16178: LD_INT 3
16180: MINUS
16181: PUSH
16182: LD_VAR 0 2
16186: PUSH
16187: LD_INT 3
16189: MINUS
16190: PUSH
16191: LD_INT 2
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PUSH
16199: LD_VAR 0 1
16203: PUSH
16204: LD_INT 4
16206: MINUS
16207: PUSH
16208: LD_VAR 0 2
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: PUSH
16221: LD_VAR 0 1
16225: PUSH
16226: LD_VAR 0 2
16230: PUSH
16231: LD_INT 3
16233: PLUS
16234: PUSH
16235: LD_INT 0
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: LD_VAR 0 1
16247: PUSH
16248: LD_INT 4
16250: PLUS
16251: PUSH
16252: LD_VAR 0 2
16256: PUSH
16257: LD_INT 4
16259: PLUS
16260: PUSH
16261: LD_INT 5
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: ST_TO_ADDR
// end ; 2 :
16276: GO 16835
16278: LD_INT 2
16280: DOUBLE
16281: EQUAL
16282: IFTRUE 16286
16284: GO 16415
16286: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16287: LD_ADDR_VAR 0 5
16291: PUSH
16292: LD_VAR 0 1
16296: PUSH
16297: LD_VAR 0 2
16301: PUSH
16302: LD_INT 3
16304: MINUS
16305: PUSH
16306: LD_INT 3
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: LIST
16313: PUSH
16314: LD_VAR 0 1
16318: PUSH
16319: LD_INT 4
16321: PLUS
16322: PUSH
16323: LD_VAR 0 2
16327: PUSH
16328: LD_INT 4
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: PUSH
16336: LD_VAR 0 1
16340: PUSH
16341: LD_VAR 0 2
16345: PUSH
16346: LD_INT 4
16348: PLUS
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: PUSH
16358: LD_VAR 0 1
16362: PUSH
16363: LD_INT 3
16365: MINUS
16366: PUSH
16367: LD_VAR 0 2
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 4
16387: MINUS
16388: PUSH
16389: LD_VAR 0 2
16393: PUSH
16394: LD_INT 4
16396: MINUS
16397: PUSH
16398: LD_INT 2
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: ST_TO_ADDR
// end ; 3 :
16413: GO 16835
16415: LD_INT 3
16417: DOUBLE
16418: EQUAL
16419: IFTRUE 16423
16421: GO 16556
16423: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16424: LD_ADDR_VAR 0 5
16428: PUSH
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 3
16436: PLUS
16437: PUSH
16438: LD_VAR 0 2
16442: PUSH
16443: LD_INT 4
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: PUSH
16451: LD_VAR 0 1
16455: PUSH
16456: LD_INT 4
16458: PLUS
16459: PUSH
16460: LD_VAR 0 2
16464: PUSH
16465: LD_INT 4
16467: PLUS
16468: PUSH
16469: LD_INT 5
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: PUSH
16477: LD_VAR 0 1
16481: PUSH
16482: LD_INT 4
16484: MINUS
16485: PUSH
16486: LD_VAR 0 2
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: PUSH
16499: LD_VAR 0 1
16503: PUSH
16504: LD_VAR 0 2
16508: PUSH
16509: LD_INT 4
16511: MINUS
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: PUSH
16521: LD_VAR 0 1
16525: PUSH
16526: LD_INT 3
16528: MINUS
16529: PUSH
16530: LD_VAR 0 2
16534: PUSH
16535: LD_INT 3
16537: MINUS
16538: PUSH
16539: LD_INT 2
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: ST_TO_ADDR
// end ; 4 :
16554: GO 16835
16556: LD_INT 4
16558: DOUBLE
16559: EQUAL
16560: IFTRUE 16564
16562: GO 16697
16564: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16565: LD_ADDR_VAR 0 5
16569: PUSH
16570: LD_VAR 0 1
16574: PUSH
16575: LD_VAR 0 2
16579: PUSH
16580: LD_INT 4
16582: PLUS
16583: PUSH
16584: LD_INT 0
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: PUSH
16592: LD_VAR 0 1
16596: PUSH
16597: LD_INT 3
16599: PLUS
16600: PUSH
16601: LD_VAR 0 2
16605: PUSH
16606: LD_INT 3
16608: PLUS
16609: PUSH
16610: LD_INT 5
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: LIST
16617: PUSH
16618: LD_VAR 0 1
16622: PUSH
16623: LD_INT 3
16625: PLUS
16626: PUSH
16627: LD_VAR 0 2
16631: PUSH
16632: LD_INT 4
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: PUSH
16640: LD_VAR 0 1
16644: PUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 3
16652: MINUS
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: PUSH
16662: LD_VAR 0 1
16666: PUSH
16667: LD_INT 4
16669: MINUS
16670: PUSH
16671: LD_VAR 0 2
16675: PUSH
16676: LD_INT 4
16678: MINUS
16679: PUSH
16680: LD_INT 2
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: ST_TO_ADDR
// end ; 5 :
16695: GO 16835
16697: LD_INT 5
16699: DOUBLE
16700: EQUAL
16701: IFTRUE 16705
16703: GO 16834
16705: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16706: LD_ADDR_VAR 0 5
16710: PUSH
16711: LD_VAR 0 1
16715: PUSH
16716: LD_INT 4
16718: MINUS
16719: PUSH
16720: LD_VAR 0 2
16724: PUSH
16725: LD_INT 1
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: PUSH
16733: LD_VAR 0 1
16737: PUSH
16738: LD_VAR 0 2
16742: PUSH
16743: LD_INT 4
16745: MINUS
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: LD_VAR 0 1
16759: PUSH
16760: LD_INT 4
16762: PLUS
16763: PUSH
16764: LD_VAR 0 2
16768: PUSH
16769: LD_INT 4
16771: PLUS
16772: PUSH
16773: LD_INT 5
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: LIST
16780: PUSH
16781: LD_VAR 0 1
16785: PUSH
16786: LD_INT 3
16788: PLUS
16789: PUSH
16790: LD_VAR 0 2
16794: PUSH
16795: LD_INT 4
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: PUSH
16803: LD_VAR 0 1
16807: PUSH
16808: LD_VAR 0 2
16812: PUSH
16813: LD_INT 3
16815: PLUS
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: ST_TO_ADDR
// end ; end ;
16832: GO 16835
16834: POP
// result := list ;
16835: LD_ADDR_VAR 0 4
16839: PUSH
16840: LD_VAR 0 5
16844: ST_TO_ADDR
// end ; end_of_file
16845: LD_VAR 0 4
16849: RET
// every 1 do var i ;
16850: GO 16852
16852: DISABLE
16853: LD_INT 0
16855: PPUSH
// begin InGameOn ;
16856: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16860: LD_INT 53
16862: PPUSH
16863: LD_INT 40
16865: PPUSH
16866: CALL_OW 84
// wait ( 0 0$5 ) ;
16870: LD_INT 175
16872: PPUSH
16873: CALL_OW 67
// if gammaCommander = 1 then
16877: LD_EXP 12
16881: PUSH
16882: LD_INT 1
16884: EQUAL
16885: IFFALSE 16896
// CenterNowOnUnits ( Donaldson ) ;
16887: LD_EXP 3
16891: PPUSH
16892: CALL_OW 87
// if gammaCommander = 2 then
16896: LD_EXP 12
16900: PUSH
16901: LD_INT 2
16903: EQUAL
16904: IFFALSE 16915
// CenterNowOnUnits ( Brown ) ;
16906: LD_EXP 2
16910: PPUSH
16911: CALL_OW 87
// if gammaCommander = 3 then
16915: LD_EXP 12
16919: PUSH
16920: LD_INT 3
16922: EQUAL
16923: IFFALSE 16934
// CenterNowOnUnits ( Houten ) ;
16925: LD_EXP 13
16929: PPUSH
16930: CALL_OW 87
// if gammaCommander = 1 then
16934: LD_EXP 12
16938: PUSH
16939: LD_INT 1
16941: EQUAL
16942: IFFALSE 16956
// Say ( Donaldson , D1-Don-1 ) ;
16944: LD_EXP 3
16948: PPUSH
16949: LD_STRING D1-Don-1
16951: PPUSH
16952: CALL_OW 88
// if gammaCommander = 2 then
16956: LD_EXP 12
16960: PUSH
16961: LD_INT 2
16963: EQUAL
16964: IFFALSE 16978
// Say ( Brown , D1-Brown-1 ) ;
16966: LD_EXP 2
16970: PPUSH
16971: LD_STRING D1-Brown-1
16973: PPUSH
16974: CALL_OW 88
// if gammaCommander = 3 then
16978: LD_EXP 12
16982: PUSH
16983: LD_INT 3
16985: EQUAL
16986: IFFALSE 17000
// Say ( Houten , D1-VanH-1 ) ;
16988: LD_EXP 13
16992: PPUSH
16993: LD_STRING D1-VanH-1
16995: PPUSH
16996: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17000: LD_EXP 22
17004: PPUSH
17005: LD_STRING D1-Har-1
17007: PPUSH
17008: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
17012: LD_INT 53
17014: PPUSH
17015: LD_INT 40
17017: PPUSH
17018: CALL_OW 84
// if gammaCommander = 1 then
17022: LD_EXP 12
17026: PUSH
17027: LD_INT 1
17029: EQUAL
17030: IFFALSE 17044
// Say ( Donaldson , D1-Don-2 ) ;
17032: LD_EXP 3
17036: PPUSH
17037: LD_STRING D1-Don-2
17039: PPUSH
17040: CALL_OW 88
// if gammaCommander = 2 then
17044: LD_EXP 12
17048: PUSH
17049: LD_INT 2
17051: EQUAL
17052: IFFALSE 17066
// Say ( Brown , D1-Brown-2 ) ;
17054: LD_EXP 2
17058: PPUSH
17059: LD_STRING D1-Brown-2
17061: PPUSH
17062: CALL_OW 88
// if gammaCommander = 3 then
17066: LD_EXP 12
17070: PUSH
17071: LD_INT 3
17073: EQUAL
17074: IFFALSE 17088
// Say ( Houten , D1-VanH-2 ) ;
17076: LD_EXP 13
17080: PPUSH
17081: LD_STRING D1-VanH-2
17083: PPUSH
17084: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17088: LD_EXP 22
17092: PPUSH
17093: LD_STRING D1-Har-2
17095: PPUSH
17096: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17100: LD_INT 22
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 33
17112: PUSH
17113: LD_INT 2
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 61
17122: PUSH
17123: EMPTY
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: LIST
17130: PPUSH
17131: CALL_OW 69
17135: IFFALSE 17200
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17137: LD_ADDR_VAR 0 1
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 33
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 61
17164: PUSH
17165: EMPTY
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: PUSH
17178: FOR_IN
17179: IFFALSE 17198
// ComAgressiveMove ( i , 70 , 41 ) ;
17181: LD_VAR 0 1
17185: PPUSH
17186: LD_INT 70
17188: PPUSH
17189: LD_INT 41
17191: PPUSH
17192: CALL_OW 114
17196: GO 17178
17198: POP
17199: POP
// repeat wait ( 0 0$1 ) ;
17200: LD_INT 35
17202: PPUSH
17203: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17207: LD_ADDR_VAR 0 1
17211: PUSH
17212: LD_INT 22
17214: PUSH
17215: LD_INT 6
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: PUSH
17230: FOR_IN
17231: IFFALSE 17250
// ComAgressiveMove ( i , 54 , 20 ) ;
17233: LD_VAR 0 1
17237: PPUSH
17238: LD_INT 54
17240: PPUSH
17241: LD_INT 20
17243: PPUSH
17244: CALL_OW 114
17248: GO 17230
17250: POP
17251: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17252: LD_ADDR_VAR 0 1
17256: PUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 25
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: LD_INT 54
17282: PUSH
17283: EMPTY
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: PUSH
17300: FOR_IN
17301: IFFALSE 17335
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_INT 70
17310: PPUSH
17311: LD_INT 41
17313: PPUSH
17314: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17318: LD_VAR 0 1
17322: PPUSH
17323: LD_INT 46
17325: PPUSH
17326: LD_INT 39
17328: PPUSH
17329: CALL_OW 174
// end ;
17333: GO 17300
17335: POP
17336: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17337: LD_ADDR_VAR 0 1
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_INT 1
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 21
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 24
17367: PUSH
17368: LD_INT 500
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: PPUSH
17384: CALL_OW 69
17388: PUSH
17389: FOR_IN
17390: IFFALSE 17423
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17392: LD_VAR 0 1
17396: PPUSH
17397: LD_EXP 37
17401: PPUSH
17402: CALL_OW 250
17406: PPUSH
17407: LD_EXP 37
17411: PPUSH
17412: CALL_OW 251
17416: PPUSH
17417: CALL_OW 111
17421: GO 17389
17423: POP
17424: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17425: LD_INT 22
17427: PUSH
17428: LD_INT 6
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 21
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 24
17447: PUSH
17448: LD_INT 250
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 69
17464: PUSH
17465: LD_INT 6
17467: LESS
17468: IFFALSE 17200
// InGameOff ;
17470: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17474: LD_STRING M1
17476: PPUSH
17477: CALL_OW 337
// SaveForQuickRestart ;
17481: CALL_OW 22
// startCutscene = 0 ;
17485: LD_ADDR_EXP 38
17489: PUSH
17490: LD_INT 0
17492: ST_TO_ADDR
// end ;
17493: PPOPN 1
17495: END
// every 1 1$0 do
17496: GO 17498
17498: DISABLE
// begin PrepareSupportFromDelta ;
17499: CALL 3126 0 0
// firstAttack = 1 ;
17503: LD_ADDR_EXP 33
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17511: LD_EXP 8
17515: PPUSH
17516: CALL_OW 302
17520: IFFALSE 17536
// begin Say ( Gladstone , D2-Glad-1 ) ;
17522: LD_EXP 8
17526: PPUSH
17527: LD_STRING D2-Glad-1
17529: PPUSH
17530: CALL_OW 88
// end else
17534: GO 17638
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17536: LD_INT 4
17538: PPUSH
17539: LD_INT 22
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 21
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 2
17561: PUSH
17562: LD_INT 25
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 25
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 25
17584: PUSH
17585: LD_INT 3
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 25
17594: PUSH
17595: LD_INT 4
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 70
17618: PUSH
17619: LD_EXP 15
17623: PUSH
17624: EMPTY
17625: LIST
17626: DIFF
17627: PPUSH
17628: LD_STRING D2-Sol1-1
17630: PPUSH
17631: LD_STRING D2-FSol1-1
17633: PPUSH
17634: CALL 6616 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17638: LD_EXP 3
17642: PPUSH
17643: CALL_OW 302
17647: PUSH
17648: LD_EXP 12
17652: PUSH
17653: LD_INT 1
17655: EQUAL
17656: AND
17657: IFFALSE 17671
// Say ( Donaldson , D2-Don-1 ) ;
17659: LD_EXP 3
17663: PPUSH
17664: LD_STRING D2-Don-1
17666: PPUSH
17667: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17671: LD_EXP 2
17675: PPUSH
17676: CALL_OW 302
17680: PUSH
17681: LD_EXP 12
17685: PUSH
17686: LD_INT 2
17688: EQUAL
17689: AND
17690: IFFALSE 17704
// Say ( Brown , D2-Brown-1 ) ;
17692: LD_EXP 2
17696: PPUSH
17697: LD_STRING D2-Brown-1
17699: PPUSH
17700: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17704: LD_EXP 13
17708: PPUSH
17709: CALL_OW 302
17713: PUSH
17714: LD_EXP 12
17718: PUSH
17719: LD_INT 3
17721: EQUAL
17722: AND
17723: IFFALSE 17737
// Say ( Houten , D2-VanH-1 ) ;
17725: LD_EXP 13
17729: PPUSH
17730: LD_STRING D2-VanH-1
17732: PPUSH
17733: CALL_OW 88
// end ;
17737: END
// every 0 0$1 do
17738: GO 17740
17740: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
17741: LD_STRING 07_time
17743: PPUSH
17744: LD_INT 12600
17746: PPUSH
17747: CALL_OW 30
17751: PUSH
17752: LD_INT 3
17754: DIV
17755: PPUSH
17756: CALL_OW 67
// PrepareMacmillanSquad ;
17760: CALL 3741 0 0
// CenterNowOnUnits ( JMM ) ;
17764: LD_EXP 1
17768: PPUSH
17769: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17773: LD_EXP 1
17777: PPUSH
17778: LD_STRING D3-JMM-1
17780: PPUSH
17781: CALL_OW 88
// JMMArrive = 1 ;
17785: LD_ADDR_EXP 39
17789: PUSH
17790: LD_INT 1
17792: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17793: LD_EXP 3
17797: PPUSH
17798: CALL_OW 302
17802: PUSH
17803: LD_EXP 12
17807: PUSH
17808: LD_INT 1
17810: EQUAL
17811: AND
17812: IFFALSE 17828
// begin Say ( Donaldson , D3-Don-1 ) ;
17814: LD_EXP 3
17818: PPUSH
17819: LD_STRING D3-Don-1
17821: PPUSH
17822: CALL_OW 88
// end else
17826: GO 17880
// begin if gammaCommander = 1 then
17828: LD_EXP 12
17832: PUSH
17833: LD_INT 1
17835: EQUAL
17836: IFFALSE 17880
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17838: LD_EXP 11
17842: PPUSH
17843: LD_INT 26
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PPUSH
17853: CALL_OW 72
17857: PPUSH
17858: LD_STRING D3-Sol1-1
17860: PPUSH
17861: LD_STRING D3-Sol1-1
17863: PPUSH
17864: CALL 6616 0 3
// Say ( JMM , D3-JMM-2 ) ;
17868: LD_EXP 1
17872: PPUSH
17873: LD_STRING D3-JMM-2
17875: PPUSH
17876: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17880: LD_EXP 2
17884: PPUSH
17885: CALL_OW 302
17889: PUSH
17890: LD_EXP 12
17894: PUSH
17895: LD_INT 2
17897: EQUAL
17898: AND
17899: IFFALSE 17915
// begin Say ( Brown , D3-Brown-1 ) ;
17901: LD_EXP 2
17905: PPUSH
17906: LD_STRING D3-Brown-1
17908: PPUSH
17909: CALL_OW 88
// end else
17913: GO 17967
// begin if gammaCommander = 2 then
17915: LD_EXP 12
17919: PUSH
17920: LD_INT 2
17922: EQUAL
17923: IFFALSE 17967
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17925: LD_EXP 11
17929: PPUSH
17930: LD_INT 26
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PPUSH
17940: CALL_OW 72
17944: PPUSH
17945: LD_STRING D3-Sol1-1a
17947: PPUSH
17948: LD_STRING D3-Sol1-1a
17950: PPUSH
17951: CALL 6616 0 3
// Say ( JMM , D3-JMM-2 ) ;
17955: LD_EXP 1
17959: PPUSH
17960: LD_STRING D3-JMM-2
17962: PPUSH
17963: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17967: LD_EXP 13
17971: PPUSH
17972: CALL_OW 302
17976: PUSH
17977: LD_EXP 12
17981: PUSH
17982: LD_INT 3
17984: EQUAL
17985: AND
17986: IFFALSE 18002
// begin Say ( Houten , D3-VanH-1 ) ;
17988: LD_EXP 13
17992: PPUSH
17993: LD_STRING D3-VanH-1
17995: PPUSH
17996: CALL_OW 88
// end else
18000: GO 18054
// begin if gammaCommander = 3 then
18002: LD_EXP 12
18006: PUSH
18007: LD_INT 3
18009: EQUAL
18010: IFFALSE 18054
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
18012: LD_EXP 11
18016: PPUSH
18017: LD_INT 26
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PPUSH
18027: CALL_OW 72
18031: PPUSH
18032: LD_STRING D3-Sol1-1b
18034: PPUSH
18035: LD_STRING D3-Sol1-1b
18037: PPUSH
18038: CALL 6616 0 3
// Say ( JMM , D3-JMM-2 ) ;
18042: LD_EXP 1
18046: PPUSH
18047: LD_STRING D3-JMM-2
18049: PPUSH
18050: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
18054: LD_EXP 15
18058: PPUSH
18059: CALL_OW 302
18063: IFFALSE 18091
// begin Say ( Joan , D3a-Joan-1 ) ;
18065: LD_EXP 15
18069: PPUSH
18070: LD_STRING D3a-Joan-1
18072: PPUSH
18073: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18077: LD_EXP 1
18081: PPUSH
18082: LD_STRING D3a-JMM-1
18084: PPUSH
18085: CALL_OW 88
// end else
18089: GO 18433
// if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18091: LD_STRING 06_JoanStatus_1
18093: PPUSH
18094: LD_INT 0
18096: PPUSH
18097: CALL_OW 30
18101: PUSH
18102: LD_INT 1
18104: EQUAL
18105: IFFALSE 18433
// begin Say ( JMM , D3b-JMM-1 ) ;
18107: LD_EXP 1
18111: PPUSH
18112: LD_STRING D3b-JMM-1
18114: PPUSH
18115: CALL_OW 88
// if gammaCommander = 1 then
18119: LD_EXP 12
18123: PUSH
18124: LD_INT 1
18126: EQUAL
18127: IFFALSE 18184
// if IsOK ( Donaldson ) then
18129: LD_EXP 3
18133: PPUSH
18134: CALL_OW 302
18138: IFFALSE 18154
// Say ( Donaldson , D3b-Don-1 ) else
18140: LD_EXP 3
18144: PPUSH
18145: LD_STRING D3b-Don-1
18147: PPUSH
18148: CALL_OW 88
18152: GO 18184
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18154: LD_EXP 11
18158: PPUSH
18159: LD_INT 26
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PPUSH
18169: CALL_OW 72
18173: PPUSH
18174: LD_STRING D3b-Sol1-1
18176: PPUSH
18177: LD_STRING D3b-Sol1-1
18179: PPUSH
18180: CALL 6616 0 3
// if gammaCommander = 2 then
18184: LD_EXP 12
18188: PUSH
18189: LD_INT 2
18191: EQUAL
18192: IFFALSE 18249
// if IsOk ( Brown ) then
18194: LD_EXP 2
18198: PPUSH
18199: CALL_OW 302
18203: IFFALSE 18219
// Say ( Brown , D3b-Brown-1 ) else
18205: LD_EXP 2
18209: PPUSH
18210: LD_STRING D3b-Brown-1
18212: PPUSH
18213: CALL_OW 88
18217: GO 18249
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18219: LD_EXP 11
18223: PPUSH
18224: LD_INT 26
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PPUSH
18234: CALL_OW 72
18238: PPUSH
18239: LD_STRING D3b-Sol1-1
18241: PPUSH
18242: LD_STRING D3b-Sol1-1
18244: PPUSH
18245: CALL 6616 0 3
// if gammaCommander = 3 then
18249: LD_EXP 12
18253: PUSH
18254: LD_INT 3
18256: EQUAL
18257: IFFALSE 18314
// if IsOk ( Houten ) then
18259: LD_EXP 13
18263: PPUSH
18264: CALL_OW 302
18268: IFFALSE 18284
// Say ( Houten , D3b-VanH-1 ) else
18270: LD_EXP 13
18274: PPUSH
18275: LD_STRING D3b-VanH-1
18277: PPUSH
18278: CALL_OW 88
18282: GO 18314
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18284: LD_EXP 11
18288: PPUSH
18289: LD_INT 26
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PPUSH
18299: CALL_OW 72
18303: PPUSH
18304: LD_STRING D3b-Sol1-1
18306: PPUSH
18307: LD_STRING D3b-Sol1-1
18309: PPUSH
18310: CALL 6616 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
18314: LD_EXP 11
18318: PPUSH
18319: LD_INT 26
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 72
18333: PUSH
18334: LD_EXP 12
18338: PUSH
18339: LD_INT 1
18341: EQUAL
18342: PUSH
18343: LD_EXP 3
18347: PPUSH
18348: CALL_OW 302
18352: AND
18353: OR
18354: PUSH
18355: LD_EXP 12
18359: PUSH
18360: LD_INT 2
18362: EQUAL
18363: PUSH
18364: LD_EXP 2
18368: PPUSH
18369: CALL_OW 302
18373: AND
18374: OR
18375: PUSH
18376: LD_EXP 12
18380: PUSH
18381: LD_INT 3
18383: EQUAL
18384: PUSH
18385: LD_EXP 13
18389: PPUSH
18390: CALL_OW 302
18394: AND
18395: OR
18396: IFFALSE 18410
// Say ( JMM , D3b-JMM-2 ) ;
18398: LD_EXP 1
18402: PPUSH
18403: LD_STRING D3b-JMM-2
18405: PPUSH
18406: CALL_OW 88
// if IsOK ( Lisa ) then
18410: LD_EXP 6
18414: PPUSH
18415: CALL_OW 302
18419: IFFALSE 18433
// Say ( Lisa , D3b-Lisa-2 ) ;
18421: LD_EXP 6
18425: PPUSH
18426: LD_STRING D3b-Lisa-2
18428: PPUSH
18429: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18433: LD_INT 22
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 21
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 26
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 2
18465: PUSH
18466: LD_INT 25
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 25
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 25
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 25
18498: PUSH
18499: LD_INT 4
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: PPUSH
18519: CALL_OW 69
18523: PUSH
18524: LD_EXP 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: DIFF
18532: PPUSH
18533: LD_STRING DCa-Sol1-1
18535: PPUSH
18536: LD_STRING DCa-Sol1-1
18538: PPUSH
18539: CALL 6616 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18543: LD_EXP 1
18547: PPUSH
18548: LD_STRING DCb-JMM-1
18550: PPUSH
18551: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18555: LD_INT 22
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 21
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 26
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 2
18587: PUSH
18588: LD_INT 25
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 25
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 25
18610: PUSH
18611: LD_INT 3
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 4
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: PPUSH
18641: CALL_OW 69
18645: PUSH
18646: LD_EXP 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: DIFF
18654: PPUSH
18655: LD_STRING DCb-Sol1-1
18657: PPUSH
18658: LD_STRING DCb-Sol1-1
18660: PPUSH
18661: CALL 6616 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18665: LD_EXP 1
18669: PPUSH
18670: LD_STRING DCb-JMM-2
18672: PPUSH
18673: CALL_OW 88
// secondAttack = 1 ;
18677: LD_ADDR_EXP 34
18681: PUSH
18682: LD_INT 1
18684: ST_TO_ADDR
// end ;
18685: END
// every 0 0$01 trigger JMMArrive = 1 do
18686: LD_EXP 39
18690: PUSH
18691: LD_INT 1
18693: EQUAL
18694: IFFALSE 18774
18696: GO 18698
18698: DISABLE
// begin wait ( 3 3$0 ) ;
18699: LD_INT 6300
18701: PPUSH
18702: CALL_OW 67
// DialogueOn ;
18706: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18710: LD_EXP 23
18714: PPUSH
18715: LD_STRING D4-Pow-1
18717: PPUSH
18718: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18722: LD_EXP 1
18726: PPUSH
18727: LD_STRING D4-JMM-1
18729: PPUSH
18730: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18734: LD_EXP 23
18738: PPUSH
18739: LD_STRING D4-Pow-2
18741: PPUSH
18742: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18746: LD_EXP 1
18750: PPUSH
18751: LD_STRING D4-JMM-2
18753: PPUSH
18754: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18758: LD_EXP 23
18762: PPUSH
18763: LD_STRING D4-Pow-3
18765: PPUSH
18766: CALL_OW 94
// DialogueOff ;
18770: CALL_OW 7
// end ;
18774: END
// every 0 0$01 trigger JMMArrive = 1 do
18775: LD_EXP 39
18779: PUSH
18780: LD_INT 1
18782: EQUAL
18783: IFFALSE 18815
18785: GO 18787
18787: DISABLE
// begin wait ( 8 8$0 ) ;
18788: LD_INT 16800
18790: PPUSH
18791: CALL_OW 67
// DialogueOn ;
18795: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18799: LD_EXP 23
18803: PPUSH
18804: LD_STRING D4a-Pow-1
18806: PPUSH
18807: CALL_OW 94
// DialogueOff ;
18811: CALL_OW 7
// end ;
18815: END
// every 0 0$01 trigger JMMArrive = 1 do
18816: LD_EXP 39
18820: PUSH
18821: LD_INT 1
18823: EQUAL
18824: IFFALSE 18869
18826: GO 18828
18828: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18829: LD_INT 21000
18831: PUSH
18832: LD_INT 25200
18834: PUSH
18835: LD_INT 31500
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: LD_OWVAR 67
18847: ARRAY
18848: PPUSH
18849: CALL_OW 67
// PrepareSikorsky ;
18853: CALL 5200 0 0
// SikorskyArrive = 1 ;
18857: LD_ADDR_EXP 18
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// PrepareSikorskyArmy ;
18865: CALL 5340 0 0
// end ;
18869: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18870: LD_EXP 17
18874: PPUSH
18875: LD_INT 5
18877: PPUSH
18878: CALL_OW 308
18882: IFFALSE 19074
18884: GO 18886
18886: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18887: LD_EXP 17
18891: PPUSH
18892: CALL_OW 87
// DialogueOn ;
18896: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18900: LD_EXP 16
18904: PPUSH
18905: LD_STRING D5-Sik-1
18907: PPUSH
18908: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
18912: LD_EXP 1
18916: PPUSH
18917: LD_STRING D5-JMM-1a
18919: PPUSH
18920: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18924: LD_EXP 16
18928: PPUSH
18929: LD_STRING D5-Sik-2
18931: PPUSH
18932: CALL_OW 88
// case query ( QSikorski ) of 1 :
18936: LD_STRING QSikorski
18938: PPUSH
18939: CALL_OW 97
18943: PUSH
18944: LD_INT 1
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18975
18952: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18953: LD_EXP 16
18957: PPUSH
18958: LD_STRING D5a-Sik-1
18960: PPUSH
18961: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
18965: LD_ADDR_EXP 19
18969: PUSH
18970: LD_INT 2100
18972: ST_TO_ADDR
// end ; 2 :
18973: GO 19062
18975: LD_INT 2
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 19006
18983: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18984: LD_EXP 16
18988: PPUSH
18989: LD_STRING D5b-Sik-1
18991: PPUSH
18992: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18996: LD_ADDR_EXP 19
19000: PUSH
19001: LD_INT 10500
19003: ST_TO_ADDR
// end ; 3 :
19004: GO 19062
19006: LD_INT 3
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19061
19014: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
19015: LD_EXP 16
19019: PPUSH
19020: LD_STRING D5c-Sik-1
19022: PPUSH
19023: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
19027: LD_EXP 1
19031: PPUSH
19032: LD_STRING D5c-JMM-1
19034: PPUSH
19035: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
19039: LD_EXP 16
19043: PPUSH
19044: LD_STRING D5c-Sik-2
19046: PPUSH
19047: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19051: LD_ADDR_EXP 19
19055: PUSH
19056: LD_INT 10500
19058: ST_TO_ADDR
// end ; end ;
19059: GO 19062
19061: POP
// DialogueOff ;
19062: CALL_OW 7
// timerStatus = 1 ;
19066: LD_ADDR_EXP 35
19070: PUSH
19071: LD_INT 1
19073: ST_TO_ADDR
// end ;
19074: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19075: LD_EXP 19
19079: PUSH
19080: LD_INT 35
19082: LESS
19083: IFFALSE 19131
19085: GO 19087
19087: DISABLE
// begin timerStatus = 0 ;
19088: LD_ADDR_EXP 35
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// DialogueOn ;
19096: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19100: LD_EXP 16
19104: PPUSH
19105: LD_STRING D6-Sik-1
19107: PPUSH
19108: CALL_OW 88
// DialogueOff ;
19112: CALL_OW 7
// SikorskyAI = 1 ;
19116: LD_ADDR_EXP 20
19120: PUSH
19121: LD_INT 1
19123: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19124: LD_STRING M2
19126: PPUSH
19127: CALL_OW 337
// end ;
19131: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19132: LD_EXP 17
19136: PPUSH
19137: LD_INT 18
19139: PPUSH
19140: CALL_OW 308
19144: IFFALSE 19228
19146: GO 19148
19148: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19149: LD_EXP 16
19153: PPUSH
19154: LD_STRING D7-Sik-1
19156: PPUSH
19157: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19161: LD_EXP 1
19165: PPUSH
19166: LD_INT 24
19168: PPUSH
19169: CALL_OW 308
19173: PUSH
19174: LD_EXP 1
19178: PPUSH
19179: CALL_OW 310
19183: OR
19184: IFFALSE 19208
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19186: LD_EXP 16
19190: PPUSH
19191: LD_STRING D7a-Sik-1
19193: PPUSH
19194: CALL_OW 88
// SikorskyStatus = 1 ;
19198: LD_ADDR_EXP 21
19202: PUSH
19203: LD_INT 1
19205: ST_TO_ADDR
// end else
19206: GO 19228
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19208: LD_EXP 16
19212: PPUSH
19213: LD_STRING D7b-Sik-1
19215: PPUSH
19216: CALL_OW 88
// SikorskyStatus = 2 ;
19220: LD_ADDR_EXP 21
19224: PUSH
19225: LD_INT 2
19227: ST_TO_ADDR
// end ; end ;
19228: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19229: LD_EXP 36
19233: PUSH
19234: LD_INT 1
19236: EQUAL
19237: IFFALSE 19346
19239: GO 19241
19241: DISABLE
19242: LD_INT 0
19244: PPUSH
// begin enable ;
19245: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19246: LD_ADDR_VAR 0 1
19250: PUSH
19251: LD_INT 22
19253: PUSH
19254: LD_INT 3
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: PUSH
19266: FOR_IN
19267: IFFALSE 19294
// if IsInArea ( i , RussianEscape ) then
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 22
19276: PPUSH
19277: CALL_OW 308
19281: IFFALSE 19292
// RemoveUnit ( i ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: CALL_OW 64
19292: GO 19266
19294: POP
19295: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_INT 6
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: PUSH
19316: FOR_IN
19317: IFFALSE 19344
// if IsInArea ( i , RussianEscape ) then
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_INT 22
19326: PPUSH
19327: CALL_OW 308
19331: IFFALSE 19342
// RemoveUnit ( i ) ;
19333: LD_VAR 0 1
19337: PPUSH
19338: CALL_OW 64
19342: GO 19316
19344: POP
19345: POP
// end ; end_of_file
19346: PPOPN 1
19348: END
// on BuildingComplete ( building ) do var tmp , un ;
19349: LD_INT 0
19351: PPUSH
19352: PPUSH
// begin if GetSide ( building ) = 3 then
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL_OW 255
19362: PUSH
19363: LD_INT 3
19365: EQUAL
19366: IFFALSE 19853
// begin if GetBType ( building ) = b_depot then
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 266
19377: PUSH
19378: LD_INT 0
19380: EQUAL
19381: IFFALSE 19449
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 274
19392: PPUSH
19393: LD_INT 1
19395: PPUSH
19396: LD_INT 5000
19398: PPUSH
19399: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19403: LD_VAR 0 1
19407: PPUSH
19408: CALL_OW 274
19412: PPUSH
19413: LD_INT 2
19415: PPUSH
19416: LD_INT 5000
19418: PPUSH
19419: CALL_OW 277
// SetBName ( building , konev ) ;
19423: LD_VAR 0 1
19427: PPUSH
19428: LD_STRING konev
19430: PPUSH
19431: CALL_OW 500
// ruDepot = building ;
19435: LD_ADDR_EXP 28
19439: PUSH
19440: LD_VAR 0 1
19444: ST_TO_ADDR
// BuildRussianBase ;
19445: CALL 7221 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19449: LD_VAR 0 1
19453: PPUSH
19454: CALL_OW 266
19458: PUSH
19459: LD_INT 0
19461: EQUAL
19462: PUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 266
19472: PUSH
19473: LD_INT 2
19475: EQUAL
19476: OR
19477: PUSH
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 266
19487: PUSH
19488: LD_INT 4
19490: EQUAL
19491: OR
19492: IFFALSE 19503
// ComUpgrade ( building ) ;
19494: LD_VAR 0 1
19498: PPUSH
19499: CALL_OW 146
// if GetBType ( building ) = b_lab then
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL_OW 266
19512: PUSH
19513: LD_INT 6
19515: EQUAL
19516: IFFALSE 19567
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19518: LD_VAR 0 1
19522: PPUSH
19523: LD_INT 10
19525: PPUSH
19526: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19530: LD_VAR 0 1
19534: PPUSH
19535: LD_INT 12
19537: PPUSH
19538: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19542: LD_INT 3
19544: PPUSH
19545: LD_VAR 0 1
19549: PPUSH
19550: LD_INT 3
19552: PPUSH
19553: CALL 7776 0 3
// ruLab = building ;
19557: LD_ADDR_EXP 29
19561: PUSH
19562: LD_VAR 0 1
19566: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19567: LD_VAR 0 1
19571: PPUSH
19572: CALL_OW 266
19576: PUSH
19577: LD_INT 32
19579: EQUAL
19580: IFFALSE 19698
// begin uc_side = 3 ;
19582: LD_ADDR_OWVAR 20
19586: PUSH
19587: LD_INT 3
19589: ST_TO_ADDR
// uc_nation = 3 ;
19590: LD_ADDR_OWVAR 21
19594: PUSH
19595: LD_INT 3
19597: ST_TO_ADDR
// hc_gallery =  ;
19598: LD_ADDR_OWVAR 33
19602: PUSH
19603: LD_STRING 
19605: ST_TO_ADDR
// hc_name =  ;
19606: LD_ADDR_OWVAR 26
19610: PUSH
19611: LD_STRING 
19613: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19614: LD_INT 0
19616: PPUSH
19617: LD_INT 1
19619: PPUSH
19620: LD_EXP 25
19624: PPUSH
19625: LD_EXP 26
19629: PPUSH
19630: CALL_OW 12
19634: PPUSH
19635: CALL_OW 380
// un = CreateHuman ;
19639: LD_ADDR_VAR 0 3
19643: PUSH
19644: CALL_OW 44
19648: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19649: LD_VAR 0 3
19653: PPUSH
19654: LD_VAR 0 1
19658: PPUSH
19659: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19663: LD_VAR 0 1
19667: PPUSH
19668: LD_INT 43
19670: PUSH
19671: LD_INT 44
19673: PUSH
19674: LD_INT 46
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: PPUSH
19685: LD_INT 3
19687: PPUSH
19688: CALL_OW 12
19692: ARRAY
19693: PPUSH
19694: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19698: LD_VAR 0 1
19702: PPUSH
19703: CALL_OW 266
19707: PUSH
19708: LD_INT 33
19710: EQUAL
19711: IFFALSE 19748
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19713: LD_VAR 0 1
19717: PPUSH
19718: LD_INT 43
19720: PUSH
19721: LD_INT 44
19723: PUSH
19724: LD_INT 46
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PPUSH
19735: LD_INT 3
19737: PPUSH
19738: CALL_OW 12
19742: ARRAY
19743: PPUSH
19744: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 266
19757: PUSH
19758: LD_INT 24
19760: EQUAL
19761: IFFALSE 19771
// russianAI = 1 ;
19763: LD_ADDR_EXP 27
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19771: LD_EXP 31
19775: PUSH
19776: LD_INT 0
19778: GREATER
19779: IFFALSE 19853
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19781: LD_ADDR_EXP 31
19785: PUSH
19786: LD_EXP 31
19790: PPUSH
19791: LD_INT 1
19793: PPUSH
19794: CALL_OW 3
19798: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19799: LD_ADDR_EXP 31
19803: PUSH
19804: LD_EXP 31
19808: PPUSH
19809: LD_INT 1
19811: PPUSH
19812: CALL_OW 3
19816: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19817: LD_ADDR_EXP 31
19821: PUSH
19822: LD_EXP 31
19826: PPUSH
19827: LD_INT 1
19829: PPUSH
19830: CALL_OW 3
19834: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19835: LD_ADDR_EXP 31
19839: PUSH
19840: LD_EXP 31
19844: PPUSH
19845: LD_INT 1
19847: PPUSH
19848: CALL_OW 3
19852: ST_TO_ADDR
// end ; end ; end ;
19853: PPOPN 3
19855: END
// on UpgradeComplete ( building ) do var i ;
19856: LD_INT 0
19858: PPUSH
// begin if GetSide ( building ) = 3 then
19859: LD_VAR 0 1
19863: PPUSH
19864: CALL_OW 255
19868: PUSH
19869: LD_INT 3
19871: EQUAL
19872: IFFALSE 20053
// begin if GetBType ( building ) = b_factory then
19874: LD_VAR 0 1
19878: PPUSH
19879: CALL_OW 266
19883: PUSH
19884: LD_INT 3
19886: EQUAL
19887: IFFALSE 19954
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19889: LD_ADDR_VAR 0 2
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_INT 3
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 25
19906: PUSH
19907: LD_INT 3
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PPUSH
19918: CALL_OW 69
19922: PUSH
19923: FOR_IN
19924: IFFALSE 19942
// ComEnterUnit ( i , building ) ;
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 120
19940: GO 19923
19942: POP
19943: POP
// ruFab = building ;
19944: LD_ADDR_EXP 30
19948: PUSH
19949: LD_VAR 0 1
19953: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19954: LD_VAR 0 1
19958: PPUSH
19959: CALL_OW 266
19963: PUSH
19964: LD_INT 8
19966: EQUAL
19967: IFFALSE 20024
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19969: LD_ADDR_VAR 0 2
19973: PUSH
19974: LD_INT 22
19976: PUSH
19977: LD_INT 3
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 25
19986: PUSH
19987: LD_INT 4
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PPUSH
19998: CALL_OW 69
20002: PUSH
20003: FOR_IN
20004: IFFALSE 20022
// ComEnterUnit ( i , building ) ;
20006: LD_VAR 0 2
20010: PPUSH
20011: LD_VAR 0 1
20015: PPUSH
20016: CALL_OW 120
20020: GO 20003
20022: POP
20023: POP
// if GetBType ( building ) = b_warehouse then
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 266
20033: PUSH
20034: LD_INT 1
20036: EQUAL
20037: IFFALSE 20053
// begin ComEnterUnit ( Borodin , building ) ;
20039: LD_EXP 24
20043: PPUSH
20044: LD_VAR 0 1
20048: PPUSH
20049: CALL_OW 120
// end ; end ; end ;
20053: PPOPN 2
20055: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 247
20065: PUSH
20066: LD_INT 2
20068: EQUAL
20069: PUSH
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 263
20079: PUSH
20080: LD_INT 3
20082: EQUAL
20083: AND
20084: PUSH
20085: LD_EXP 41
20089: PUSH
20090: LD_INT 0
20092: EQUAL
20093: AND
20094: IFFALSE 20212
// begin varEvent1 = 1 ;
20096: LD_ADDR_EXP 41
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20104: LD_VAR 0 1
20108: PPUSH
20109: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20113: LD_INT 22
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 21
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 25
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 25
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 25
20158: PUSH
20159: LD_INT 3
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 25
20168: PUSH
20169: LD_INT 4
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: PPUSH
20188: CALL_OW 69
20192: PUSH
20193: LD_EXP 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: DIFF
20201: PPUSH
20202: LD_STRING DC-Sol1-1
20204: PPUSH
20205: LD_STRING DC-FSol1-1
20207: PPUSH
20208: CALL 6616 0 3
// end ; end ;
20212: PPOPN 1
20214: END
// on UnitDestroyed ( unit ) do var i ;
20215: LD_INT 0
20217: PPUSH
// begin if GetSide ( unit ) = 3 then
20218: LD_VAR 0 1
20222: PPUSH
20223: CALL_OW 255
20227: PUSH
20228: LD_INT 3
20230: EQUAL
20231: IFFALSE 21001
// begin if GetType ( unit ) = unit_building then
20233: LD_VAR 0 1
20237: PPUSH
20238: CALL_OW 247
20242: PUSH
20243: LD_INT 3
20245: EQUAL
20246: IFFALSE 20938
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL_OW 266
20257: PUSH
20258: LD_INT 31
20260: EQUAL
20261: PUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 266
20271: PUSH
20272: LD_INT 32
20274: EQUAL
20275: OR
20276: PUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL_OW 266
20286: PUSH
20287: LD_INT 36
20289: EQUAL
20290: OR
20291: PUSH
20292: LD_VAR 0 1
20296: PPUSH
20297: CALL_OW 266
20301: PUSH
20302: LD_INT 0
20304: EQUAL
20305: OR
20306: PUSH
20307: LD_VAR 0 1
20311: PPUSH
20312: CALL_OW 266
20316: PUSH
20317: LD_INT 24
20319: EQUAL
20320: OR
20321: PUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 266
20331: PUSH
20332: LD_INT 17
20334: EQUAL
20335: OR
20336: PUSH
20337: LD_VAR 0 1
20341: PPUSH
20342: CALL_OW 266
20346: PUSH
20347: LD_INT 25
20349: EQUAL
20350: OR
20351: PUSH
20352: LD_VAR 0 1
20356: PPUSH
20357: CALL_OW 266
20361: PUSH
20362: LD_INT 19
20364: EQUAL
20365: OR
20366: PUSH
20367: LD_VAR 0 1
20371: PPUSH
20372: CALL_OW 266
20376: PUSH
20377: LD_INT 20
20379: EQUAL
20380: OR
20381: PUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 266
20391: PUSH
20392: LD_INT 18
20394: EQUAL
20395: OR
20396: PUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: CALL_OW 266
20406: PUSH
20407: LD_INT 21
20409: EQUAL
20410: OR
20411: PUSH
20412: LD_VAR 0 1
20416: PPUSH
20417: CALL_OW 266
20421: PUSH
20422: LD_INT 23
20424: EQUAL
20425: OR
20426: PUSH
20427: LD_VAR 0 1
20431: PPUSH
20432: CALL_OW 266
20436: PUSH
20437: LD_INT 16
20439: EQUAL
20440: OR
20441: PUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 266
20451: PUSH
20452: LD_INT 6
20454: EQUAL
20455: OR
20456: PUSH
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 266
20466: PUSH
20467: LD_INT 29
20469: EQUAL
20470: OR
20471: PUSH
20472: LD_VAR 0 1
20476: PPUSH
20477: CALL_OW 266
20481: PUSH
20482: LD_INT 26
20484: EQUAL
20485: OR
20486: PUSH
20487: LD_VAR 0 1
20491: PPUSH
20492: CALL_OW 266
20496: PUSH
20497: LD_INT 30
20499: EQUAL
20500: OR
20501: PUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: CALL_OW 266
20511: PUSH
20512: LD_INT 28
20514: EQUAL
20515: OR
20516: PUSH
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 266
20526: PUSH
20527: LD_INT 27
20529: EQUAL
20530: OR
20531: PUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 266
20541: PUSH
20542: LD_INT 33
20544: EQUAL
20545: OR
20546: PUSH
20547: LD_VAR 0 1
20551: PPUSH
20552: CALL_OW 266
20556: PUSH
20557: LD_INT 2
20559: EQUAL
20560: OR
20561: PUSH
20562: LD_VAR 0 1
20566: PPUSH
20567: CALL_OW 266
20571: PUSH
20572: LD_INT 4
20574: EQUAL
20575: OR
20576: IFFALSE 20662
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20578: LD_ADDR_EXP 31
20582: PUSH
20583: LD_EXP 31
20587: PUSH
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 266
20597: ADD
20598: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20599: LD_ADDR_EXP 31
20603: PUSH
20604: LD_EXP 31
20608: PUSH
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL_OW 250
20618: ADD
20619: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20620: LD_ADDR_EXP 31
20624: PUSH
20625: LD_EXP 31
20629: PUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: CALL_OW 251
20639: ADD
20640: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20641: LD_ADDR_EXP 31
20645: PUSH
20646: LD_EXP 31
20650: PUSH
20651: LD_VAR 0 1
20655: PPUSH
20656: CALL_OW 254
20660: ADD
20661: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20662: LD_VAR 0 1
20666: PPUSH
20667: CALL_OW 266
20671: PUSH
20672: LD_INT 1
20674: EQUAL
20675: IFFALSE 20754
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20677: LD_ADDR_EXP 31
20681: PUSH
20682: LD_EXP 31
20686: PUSH
20687: LD_INT 0
20689: ADD
20690: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20691: LD_ADDR_EXP 31
20695: PUSH
20696: LD_EXP 31
20700: PUSH
20701: LD_VAR 0 1
20705: PPUSH
20706: CALL_OW 250
20710: ADD
20711: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20712: LD_ADDR_EXP 31
20716: PUSH
20717: LD_EXP 31
20721: PUSH
20722: LD_VAR 0 1
20726: PPUSH
20727: CALL_OW 251
20731: ADD
20732: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20733: LD_ADDR_EXP 31
20737: PUSH
20738: LD_EXP 31
20742: PUSH
20743: LD_VAR 0 1
20747: PPUSH
20748: CALL_OW 254
20752: ADD
20753: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20754: LD_VAR 0 1
20758: PPUSH
20759: CALL_OW 266
20763: PUSH
20764: LD_INT 3
20766: EQUAL
20767: IFFALSE 20846
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20769: LD_ADDR_EXP 31
20773: PUSH
20774: LD_EXP 31
20778: PUSH
20779: LD_INT 2
20781: ADD
20782: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20783: LD_ADDR_EXP 31
20787: PUSH
20788: LD_EXP 31
20792: PUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 250
20802: ADD
20803: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20804: LD_ADDR_EXP 31
20808: PUSH
20809: LD_EXP 31
20813: PUSH
20814: LD_VAR 0 1
20818: PPUSH
20819: CALL_OW 251
20823: ADD
20824: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20825: LD_ADDR_EXP 31
20829: PUSH
20830: LD_EXP 31
20834: PUSH
20835: LD_VAR 0 1
20839: PPUSH
20840: CALL_OW 254
20844: ADD
20845: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20846: LD_VAR 0 1
20850: PPUSH
20851: CALL_OW 266
20855: PUSH
20856: LD_INT 5
20858: EQUAL
20859: IFFALSE 20938
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20861: LD_ADDR_EXP 31
20865: PUSH
20866: LD_EXP 31
20870: PUSH
20871: LD_INT 4
20873: ADD
20874: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20875: LD_ADDR_EXP 31
20879: PUSH
20880: LD_EXP 31
20884: PUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: CALL_OW 250
20894: ADD
20895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20896: LD_ADDR_EXP 31
20900: PUSH
20901: LD_EXP 31
20905: PUSH
20906: LD_VAR 0 1
20910: PPUSH
20911: CALL_OW 251
20915: ADD
20916: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20917: LD_ADDR_EXP 31
20921: PUSH
20922: LD_EXP 31
20926: PUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 254
20936: ADD
20937: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 247
20947: PUSH
20948: LD_INT 1
20950: EQUAL
20951: IFFALSE 21001
// begin for i in defenders_list do
20953: LD_ADDR_VAR 0 2
20957: PUSH
20958: LD_EXP 32
20962: PUSH
20963: FOR_IN
20964: IFFALSE 20999
// if i = unit then
20966: LD_VAR 0 2
20970: PUSH
20971: LD_VAR 0 1
20975: EQUAL
20976: IFFALSE 20997
// defenders_list = defenders_list diff [ unit ] ;
20978: LD_ADDR_EXP 32
20982: PUSH
20983: LD_EXP 32
20987: PUSH
20988: LD_VAR 0 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: DIFF
20996: ST_TO_ADDR
20997: GO 20963
20999: POP
21000: POP
// end ; end ; end ; end_of_file
21001: PPOPN 2
21003: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21004: GO 21006
21006: DISABLE
21007: LD_INT 0
21009: PPUSH
// begin enemyWayX = [ ] ;
21010: LD_ADDR_EXP 45
21014: PUSH
21015: EMPTY
21016: ST_TO_ADDR
// enemyWayY = [ ] ;
21017: LD_ADDR_EXP 46
21021: PUSH
21022: EMPTY
21023: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
21024: LD_ADDR_VAR 0 1
21028: PUSH
21029: LD_INT 1
21031: PPUSH
21032: LD_INT 3
21034: PPUSH
21035: CALL_OW 12
21039: ST_TO_ADDR
// if rnd = 1 then
21040: LD_VAR 0 1
21044: PUSH
21045: LD_INT 1
21047: EQUAL
21048: IFFALSE 21088
// begin enemyWayX = [ 73 , 46 , 29 ] ;
21050: LD_ADDR_EXP 45
21054: PUSH
21055: LD_INT 73
21057: PUSH
21058: LD_INT 46
21060: PUSH
21061: LD_INT 29
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21069: LD_ADDR_EXP 46
21073: PUSH
21074: LD_INT 71
21076: PUSH
21077: LD_INT 43
21079: PUSH
21080: LD_INT 29
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: ST_TO_ADDR
// end ; if rnd = 2 then
21088: LD_VAR 0 1
21092: PUSH
21093: LD_INT 2
21095: EQUAL
21096: IFFALSE 21120
// begin enemyWayX = [ 64 ] ;
21098: LD_ADDR_EXP 45
21102: PUSH
21103: LD_INT 64
21105: PUSH
21106: EMPTY
21107: LIST
21108: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21109: LD_ADDR_EXP 46
21113: PUSH
21114: LD_INT 43
21116: PUSH
21117: EMPTY
21118: LIST
21119: ST_TO_ADDR
// end ; if rnd = 3 then
21120: LD_VAR 0 1
21124: PUSH
21125: LD_INT 3
21127: EQUAL
21128: IFFALSE 21152
// begin enemyWayX = [ 80 ] ;
21130: LD_ADDR_EXP 45
21134: PUSH
21135: LD_INT 80
21137: PUSH
21138: EMPTY
21139: LIST
21140: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21141: LD_ADDR_EXP 46
21145: PUSH
21146: LD_INT 28
21148: PUSH
21149: EMPTY
21150: LIST
21151: ST_TO_ADDR
// end ; enable ;
21152: ENABLE
// end ;
21153: PPOPN 1
21155: END
// every 0 0$1 do
21156: GO 21158
21158: DISABLE
// begin enable ;
21159: ENABLE
// if escapeAvalaible = 0 then
21160: LD_EXP 36
21164: PUSH
21165: LD_INT 0
21167: EQUAL
21168: IFFALSE 21180
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21170: LD_INT 3
21172: PPUSH
21173: LD_INT 6
21175: PPUSH
21176: CALL 7861 0 2
// if escapeAvalaible = 0 then
21180: LD_EXP 36
21184: PUSH
21185: LD_INT 0
21187: EQUAL
21188: IFFALSE 21200
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21190: LD_INT 1
21192: PPUSH
21193: LD_INT 24
21195: PPUSH
21196: CALL 8655 0 2
// if russianAI = 1 then
21200: LD_EXP 27
21204: PUSH
21205: LD_INT 1
21207: EQUAL
21208: IFFALSE 21278
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21210: LD_INT 3
21212: PPUSH
21213: LD_INT 7
21215: PPUSH
21216: LD_INT 6
21218: PPUSH
21219: LD_EXP 29
21223: PPUSH
21224: CALL 10744 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21228: LD_INT 3
21230: PPUSH
21231: LD_EXP 28
21235: PPUSH
21236: LD_INT 6
21238: PPUSH
21239: LD_EXP 31
21243: PPUSH
21244: CALL 10338 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21248: LD_INT 3
21250: PPUSH
21251: LD_INT 26
21253: PPUSH
21254: LD_EXP 45
21258: PPUSH
21259: LD_EXP 46
21263: PPUSH
21264: CALL 9206 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21268: LD_INT 3
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: CALL 11288 0 2
// end ; if SikorskyArrive = 1 then
21278: LD_EXP 18
21282: PUSH
21283: LD_INT 1
21285: EQUAL
21286: IFFALSE 21304
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21288: LD_INT 3
21290: PPUSH
21291: LD_INT 10
21293: PPUSH
21294: LD_INT 53
21296: PPUSH
21297: LD_INT 59
21299: PPUSH
21300: CALL 9003 0 4
// end ;
21304: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21305: LD_EXP 27
21309: PUSH
21310: LD_INT 1
21312: EQUAL
21313: IFFALSE 21589
21315: GO 21317
21317: DISABLE
21318: LD_INT 0
21320: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21321: LD_ADDR_VAR 0 1
21325: PUSH
21326: LD_INT 22
21328: PUSH
21329: LD_INT 3
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 21
21338: PUSH
21339: LD_INT 3
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 30
21348: PUSH
21349: LD_INT 32
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 3
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: LD_INT 35
21364: PUSH
21365: LD_INT 43
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 35
21374: PUSH
21375: LD_INT 44
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 35
21384: PUSH
21385: LD_INT 46
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: PPUSH
21408: CALL_OW 69
21412: PUSH
21413: FOR_IN
21414: IFFALSE 21453
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21416: LD_VAR 0 1
21420: PPUSH
21421: LD_INT 43
21423: PUSH
21424: LD_INT 44
21426: PUSH
21427: LD_INT 46
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: PPUSH
21438: LD_INT 3
21440: PPUSH
21441: CALL_OW 12
21445: ARRAY
21446: PPUSH
21447: CALL_OW 431
21451: GO 21413
21453: POP
21454: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21455: LD_ADDR_VAR 0 1
21459: PUSH
21460: LD_INT 22
21462: PUSH
21463: LD_INT 3
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 21
21472: PUSH
21473: LD_INT 3
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 30
21482: PUSH
21483: LD_INT 33
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: LD_INT 35
21498: PUSH
21499: LD_INT 43
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 35
21508: PUSH
21509: LD_INT 44
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 35
21518: PUSH
21519: LD_INT 46
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 69
21546: PUSH
21547: FOR_IN
21548: IFFALSE 21587
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21550: LD_VAR 0 1
21554: PPUSH
21555: LD_INT 43
21557: PUSH
21558: LD_INT 44
21560: PUSH
21561: LD_INT 46
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 1
21571: PPUSH
21572: LD_INT 3
21574: PPUSH
21575: CALL_OW 12
21579: ARRAY
21580: PPUSH
21581: CALL_OW 431
21585: GO 21547
21587: POP
21588: POP
// end ;
21589: PPOPN 1
21591: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
21592: LD_EXP 24
21596: PPUSH
21597: CALL_OW 310
21601: NOT
21602: PUSH
21603: LD_EXP 28
21607: PPUSH
21608: CALL_OW 302
21612: AND
21613: PUSH
21614: LD_EXP 28
21618: PPUSH
21619: CALL_OW 255
21623: PUSH
21624: LD_INT 3
21626: EQUAL
21627: AND
21628: IFFALSE 21648
21630: GO 21632
21632: DISABLE
// begin enable ;
21633: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
21634: LD_EXP 24
21638: PPUSH
21639: LD_EXP 28
21643: PPUSH
21644: CALL_OW 120
// end ;
21648: END
// every 0 0$1 trigger SikorskyAI = 1 do
21649: LD_EXP 20
21653: PUSH
21654: LD_INT 1
21656: EQUAL
21657: IFFALSE 21692
21659: GO 21661
21661: DISABLE
// begin enable ;
21662: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21663: LD_INT 4
21665: PPUSH
21666: LD_INT 10
21668: PPUSH
21669: LD_INT 93
21671: PPUSH
21672: LD_INT 93
21674: PPUSH
21675: CALL 9003 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21679: LD_INT 4
21681: PPUSH
21682: LD_INT 11
21684: PPUSH
21685: LD_INT 3
21687: PPUSH
21688: CALL 15500 0 3
// end ;
21692: END
// every 0 0$1 trigger SikorskyAI = 1 do
21693: LD_EXP 20
21697: PUSH
21698: LD_INT 1
21700: EQUAL
21701: IFFALSE 21713
21703: GO 21705
21705: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21706: LD_INT 4
21708: PPUSH
21709: CALL 10010 0 1
21713: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21714: LD_EXP 27
21718: PUSH
21719: LD_INT 1
21721: EQUAL
21722: PUSH
21723: LD_EXP 30
21727: PPUSH
21728: CALL_OW 302
21732: AND
21733: PUSH
21734: LD_EXP 30
21738: PPUSH
21739: CALL_OW 255
21743: PUSH
21744: LD_INT 3
21746: EQUAL
21747: AND
21748: PUSH
21749: LD_INT 22
21751: PUSH
21752: LD_INT 3
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 21
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 33
21771: PUSH
21772: LD_INT 3
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: PUSH
21789: LD_INT 0
21791: EQUAL
21792: AND
21793: IFFALSE 22027
21795: GO 21797
21797: DISABLE
// begin enable ;
21798: ENABLE
// if Difficulty = 1 then
21799: LD_OWVAR 67
21803: PUSH
21804: LD_INT 1
21806: EQUAL
21807: IFFALSE 21875
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21809: LD_INT 3
21811: PPUSH
21812: LD_EXP 30
21816: PPUSH
21817: LD_INT 5
21819: PPUSH
21820: LD_INT 8
21822: PPUSH
21823: CALL_OW 12
21827: PPUSH
21828: LD_INT 43
21830: PUSH
21831: LD_INT 43
21833: PUSH
21834: LD_INT 43
21836: PUSH
21837: LD_INT 43
21839: PUSH
21840: LD_INT 44
21842: PUSH
21843: LD_INT 44
21845: PUSH
21846: LD_INT 44
21848: PUSH
21849: LD_INT 46
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: LD_INT 3
21867: PPUSH
21868: LD_INT 24
21870: PPUSH
21871: CALL 8849 0 7
// if Difficulty = 2 then
21875: LD_OWVAR 67
21879: PUSH
21880: LD_INT 2
21882: EQUAL
21883: IFFALSE 21951
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
21885: LD_INT 3
21887: PPUSH
21888: LD_EXP 30
21892: PPUSH
21893: LD_INT 6
21895: PPUSH
21896: LD_INT 8
21898: PPUSH
21899: CALL_OW 12
21903: PPUSH
21904: LD_INT 43
21906: PUSH
21907: LD_INT 43
21909: PUSH
21910: LD_INT 44
21912: PUSH
21913: LD_INT 44
21915: PUSH
21916: LD_INT 44
21918: PUSH
21919: LD_INT 44
21921: PUSH
21922: LD_INT 46
21924: PUSH
21925: LD_INT 46
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PPUSH
21938: LD_INT 1
21940: PPUSH
21941: LD_INT 3
21943: PPUSH
21944: LD_INT 24
21946: PPUSH
21947: CALL 8849 0 7
// if Difficulty = 3 then
21951: LD_OWVAR 67
21955: PUSH
21956: LD_INT 3
21958: EQUAL
21959: IFFALSE 22027
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
21961: LD_INT 3
21963: PPUSH
21964: LD_EXP 30
21968: PPUSH
21969: LD_INT 7
21971: PPUSH
21972: LD_INT 8
21974: PPUSH
21975: CALL_OW 12
21979: PPUSH
21980: LD_INT 43
21982: PUSH
21983: LD_INT 43
21985: PUSH
21986: LD_INT 44
21988: PUSH
21989: LD_INT 44
21991: PUSH
21992: LD_INT 44
21994: PUSH
21995: LD_INT 46
21997: PUSH
21998: LD_INT 46
22000: PUSH
22001: LD_INT 46
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PPUSH
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 3
22019: PPUSH
22020: LD_INT 24
22022: PPUSH
22023: CALL 8849 0 7
// end ;
22027: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
22028: LD_EXP 38
22032: PUSH
22033: LD_INT 1
22035: EQUAL
22036: IFFALSE 22118
22038: GO 22040
22040: DISABLE
22041: LD_INT 0
22043: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
22044: LD_ADDR_VAR 0 1
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 1
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 3
22071: PUSH
22072: LD_INT 24
22074: PUSH
22075: LD_INT 650
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: LIST
22090: PPUSH
22091: CALL_OW 69
22095: PUSH
22096: FOR_IN
22097: IFFALSE 22116
// ComMoveXY ( i , 51 , 12 ) ;
22099: LD_VAR 0 1
22103: PPUSH
22104: LD_INT 51
22106: PPUSH
22107: LD_INT 12
22109: PPUSH
22110: CALL_OW 111
22114: GO 22096
22116: POP
22117: POP
// end ; end_of_file
22118: PPOPN 1
22120: END
// every 3 3$20 trigger firstAttack = 1 do
22121: LD_EXP 33
22125: PUSH
22126: LD_INT 1
22128: EQUAL
22129: IFFALSE 22235
22131: GO 22133
22133: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22134: LD_INT 6
22136: PPUSH
22137: LD_INT 3
22139: PPUSH
22140: LD_INT 5
22142: PPUSH
22143: LD_INT 6
22145: PPUSH
22146: CALL_OW 12
22150: PUSH
22151: LD_INT 5
22153: PPUSH
22154: LD_INT 6
22156: PPUSH
22157: CALL_OW 12
22161: PUSH
22162: LD_INT 5
22164: PPUSH
22165: LD_INT 6
22167: PPUSH
22168: CALL_OW 12
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: PUSH
22178: LD_OWVAR 67
22182: ARRAY
22183: PPUSH
22184: LD_INT 0
22186: PPUSH
22187: LD_INT 0
22189: PPUSH
22190: LD_INT 0
22192: PPUSH
22193: LD_INT 0
22195: PPUSH
22196: LD_EXP 25
22200: PPUSH
22201: LD_EXP 26
22205: PPUSH
22206: CALL_OW 12
22210: PPUSH
22211: LD_INT 16
22213: PPUSH
22214: LD_INT 7
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: LD_INT 3
22225: PPUSH
22226: CALL_OW 12
22230: PPUSH
22231: CALL 11518 0 12
22235: END
// every 3 3$40 trigger firstAttack = 1 do
22236: LD_EXP 33
22240: PUSH
22241: LD_INT 1
22243: EQUAL
22244: IFFALSE 22336
22246: GO 22248
22248: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22249: LD_INT 16
22251: PPUSH
22252: LD_INT 6
22254: PPUSH
22255: LD_INT 3
22257: PPUSH
22258: LD_INT 4
22260: PPUSH
22261: CALL_OW 12
22265: PUSH
22266: LD_INT 4
22268: PPUSH
22269: LD_INT 5
22271: PPUSH
22272: CALL_OW 12
22276: PUSH
22277: LD_INT 5
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: LD_OWVAR 67
22289: ARRAY
22290: PPUSH
22291: LD_EXP 25
22295: PPUSH
22296: LD_EXP 26
22300: PPUSH
22301: CALL_OW 12
22305: PPUSH
22306: LD_INT 3
22308: PPUSH
22309: LD_INT 1
22311: PPUSH
22312: LD_INT 3
22314: PPUSH
22315: LD_INT 44
22317: PUSH
22318: LD_INT 46
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PPUSH
22325: EMPTY
22326: PPUSH
22327: EMPTY
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL 13811 0 11
22336: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22337: LD_EXP 33
22341: PUSH
22342: LD_INT 1
22344: EQUAL
22345: PUSH
22346: LD_EXP 39
22350: PUSH
22351: LD_INT 0
22353: EQUAL
22354: AND
22355: IFFALSE 22461
22357: GO 22359
22359: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22360: LD_INT 6
22362: PPUSH
22363: LD_INT 3
22365: PPUSH
22366: LD_INT 5
22368: PPUSH
22369: LD_INT 6
22371: PPUSH
22372: CALL_OW 12
22376: PUSH
22377: LD_INT 5
22379: PPUSH
22380: LD_INT 6
22382: PPUSH
22383: CALL_OW 12
22387: PUSH
22388: LD_INT 5
22390: PPUSH
22391: LD_INT 6
22393: PPUSH
22394: CALL_OW 12
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: PUSH
22404: LD_OWVAR 67
22408: ARRAY
22409: PPUSH
22410: LD_INT 0
22412: PPUSH
22413: LD_INT 0
22415: PPUSH
22416: LD_INT 0
22418: PPUSH
22419: LD_INT 0
22421: PPUSH
22422: LD_EXP 25
22426: PPUSH
22427: LD_EXP 26
22431: PPUSH
22432: CALL_OW 12
22436: PPUSH
22437: LD_INT 16
22439: PPUSH
22440: LD_INT 7
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: LD_INT 1
22448: PPUSH
22449: LD_INT 3
22451: PPUSH
22452: CALL_OW 12
22456: PPUSH
22457: CALL 11518 0 12
22461: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22462: LD_EXP 33
22466: PUSH
22467: LD_INT 1
22469: EQUAL
22470: PUSH
22471: LD_EXP 39
22475: PUSH
22476: LD_INT 0
22478: EQUAL
22479: AND
22480: IFFALSE 22576
22482: GO 22484
22484: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22485: LD_INT 16
22487: PPUSH
22488: LD_INT 6
22490: PPUSH
22491: LD_INT 5
22493: PPUSH
22494: LD_INT 6
22496: PPUSH
22497: CALL_OW 12
22501: PUSH
22502: LD_INT 6
22504: PPUSH
22505: LD_INT 7
22507: PPUSH
22508: CALL_OW 12
22512: PUSH
22513: LD_INT 7
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: LD_OWVAR 67
22525: ARRAY
22526: PPUSH
22527: LD_EXP 25
22531: PPUSH
22532: LD_EXP 26
22536: PPUSH
22537: CALL_OW 12
22541: PPUSH
22542: LD_INT 3
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: LD_INT 3
22550: PPUSH
22551: LD_INT 43
22553: PUSH
22554: LD_INT 44
22556: PUSH
22557: LD_INT 46
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: PPUSH
22565: EMPTY
22566: PPUSH
22567: EMPTY
22568: PPUSH
22569: LD_INT 1
22571: PPUSH
22572: CALL 13811 0 11
22576: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22577: LD_EXP 33
22581: PUSH
22582: LD_INT 1
22584: EQUAL
22585: PUSH
22586: LD_EXP 39
22590: PUSH
22591: LD_INT 0
22593: EQUAL
22594: AND
22595: IFFALSE 22671
22597: GO 22599
22599: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22600: LD_INT 16
22602: PPUSH
22603: LD_INT 6
22605: PPUSH
22606: LD_INT 5
22608: PUSH
22609: LD_INT 6
22611: PUSH
22612: LD_INT 7
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: LD_OWVAR 67
22624: ARRAY
22625: PPUSH
22626: LD_EXP 25
22630: PPUSH
22631: LD_EXP 26
22635: PPUSH
22636: CALL_OW 12
22640: PPUSH
22641: LD_INT 3
22643: PPUSH
22644: LD_INT 1
22646: PPUSH
22647: LD_INT 3
22649: PPUSH
22650: LD_INT 44
22652: PUSH
22653: LD_INT 46
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PPUSH
22660: EMPTY
22661: PPUSH
22662: EMPTY
22663: PPUSH
22664: LD_INT 1
22666: PPUSH
22667: CALL 13811 0 11
22671: END
// every 1 1$00 trigger secondAttack = 1 do
22672: LD_EXP 34
22676: PUSH
22677: LD_INT 1
22679: EQUAL
22680: IFFALSE 22786
22682: GO 22684
22684: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22685: LD_INT 6
22687: PPUSH
22688: LD_INT 3
22690: PPUSH
22691: LD_INT 4
22693: PPUSH
22694: LD_INT 7
22696: PPUSH
22697: CALL_OW 12
22701: PUSH
22702: LD_INT 6
22704: PPUSH
22705: LD_INT 7
22707: PPUSH
22708: CALL_OW 12
22712: PUSH
22713: LD_INT 6
22715: PPUSH
22716: LD_INT 10
22718: PPUSH
22719: CALL_OW 12
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: PUSH
22729: LD_OWVAR 67
22733: ARRAY
22734: PPUSH
22735: LD_INT 0
22737: PPUSH
22738: LD_INT 0
22740: PPUSH
22741: LD_INT 0
22743: PPUSH
22744: LD_INT 0
22746: PPUSH
22747: LD_EXP 25
22751: PPUSH
22752: LD_EXP 26
22756: PPUSH
22757: CALL_OW 12
22761: PPUSH
22762: LD_INT 16
22764: PPUSH
22765: LD_INT 7
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: LD_INT 1
22773: PPUSH
22774: LD_INT 3
22776: PPUSH
22777: CALL_OW 12
22781: PPUSH
22782: CALL 11518 0 12
22786: END
// every 1 1$00 trigger secondAttack = 1 do
22787: LD_EXP 34
22791: PUSH
22792: LD_INT 1
22794: EQUAL
22795: IFFALSE 22899
22797: GO 22799
22799: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22800: LD_INT 16
22802: PPUSH
22803: LD_INT 6
22805: PPUSH
22806: LD_INT 5
22808: PPUSH
22809: LD_INT 8
22811: PPUSH
22812: CALL_OW 12
22816: PUSH
22817: LD_INT 6
22819: PPUSH
22820: LD_INT 9
22822: PPUSH
22823: CALL_OW 12
22827: PUSH
22828: LD_INT 7
22830: PPUSH
22831: LD_INT 9
22833: PPUSH
22834: CALL_OW 12
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: PUSH
22844: LD_OWVAR 67
22848: ARRAY
22849: PPUSH
22850: LD_EXP 25
22854: PPUSH
22855: LD_EXP 26
22859: PPUSH
22860: CALL_OW 12
22864: PPUSH
22865: LD_INT 3
22867: PPUSH
22868: LD_INT 1
22870: PPUSH
22871: LD_INT 3
22873: PPUSH
22874: LD_INT 43
22876: PUSH
22877: LD_INT 44
22879: PUSH
22880: LD_INT 46
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: PPUSH
22888: EMPTY
22889: PPUSH
22890: EMPTY
22891: PPUSH
22892: LD_INT 1
22894: PPUSH
22895: CALL 13811 0 11
22899: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22900: LD_EXP 18
22904: PUSH
22905: LD_INT 0
22907: EQUAL
22908: IFFALSE 23014
22910: GO 22912
22912: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22913: LD_INT 6
22915: PPUSH
22916: LD_INT 3
22918: PPUSH
22919: LD_INT 8
22921: PPUSH
22922: LD_INT 9
22924: PPUSH
22925: CALL_OW 12
22929: PUSH
22930: LD_INT 7
22932: PPUSH
22933: LD_INT 10
22935: PPUSH
22936: CALL_OW 12
22940: PUSH
22941: LD_INT 8
22943: PPUSH
22944: LD_INT 10
22946: PPUSH
22947: CALL_OW 12
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: PUSH
22957: LD_OWVAR 67
22961: ARRAY
22962: PPUSH
22963: LD_INT 0
22965: PPUSH
22966: LD_INT 0
22968: PPUSH
22969: LD_INT 0
22971: PPUSH
22972: LD_INT 0
22974: PPUSH
22975: LD_EXP 25
22979: PPUSH
22980: LD_EXP 26
22984: PPUSH
22985: CALL_OW 12
22989: PPUSH
22990: LD_INT 16
22992: PPUSH
22993: LD_INT 7
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: LD_INT 1
23001: PPUSH
23002: LD_INT 3
23004: PPUSH
23005: CALL_OW 12
23009: PPUSH
23010: CALL 11518 0 12
23014: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23015: LD_EXP 18
23019: PUSH
23020: LD_INT 0
23022: EQUAL
23023: IFFALSE 23123
23025: GO 23027
23027: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23028: LD_INT 16
23030: PPUSH
23031: LD_INT 6
23033: PPUSH
23034: LD_INT 5
23036: PPUSH
23037: LD_INT 8
23039: PPUSH
23040: CALL_OW 12
23044: PUSH
23045: LD_INT 6
23047: PPUSH
23048: LD_INT 9
23050: PPUSH
23051: CALL_OW 12
23055: PUSH
23056: LD_INT 7
23058: PPUSH
23059: LD_INT 9
23061: PPUSH
23062: CALL_OW 12
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: LD_OWVAR 67
23076: ARRAY
23077: PPUSH
23078: LD_EXP 25
23082: PPUSH
23083: LD_EXP 26
23087: PPUSH
23088: CALL_OW 12
23092: PPUSH
23093: LD_INT 3
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: LD_INT 3
23101: PPUSH
23102: LD_INT 44
23104: PUSH
23105: LD_INT 46
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PPUSH
23112: EMPTY
23113: PPUSH
23114: EMPTY
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL 13811 0 11
23123: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23124: LD_EXP 18
23128: PUSH
23129: LD_INT 0
23131: EQUAL
23132: IFFALSE 23238
23134: GO 23136
23136: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23137: LD_INT 6
23139: PPUSH
23140: LD_INT 3
23142: PPUSH
23143: LD_INT 8
23145: PPUSH
23146: LD_INT 9
23148: PPUSH
23149: CALL_OW 12
23153: PUSH
23154: LD_INT 7
23156: PPUSH
23157: LD_INT 10
23159: PPUSH
23160: CALL_OW 12
23164: PUSH
23165: LD_INT 8
23167: PPUSH
23168: LD_INT 10
23170: PPUSH
23171: CALL_OW 12
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: PUSH
23181: LD_OWVAR 67
23185: ARRAY
23186: PPUSH
23187: LD_INT 0
23189: PPUSH
23190: LD_INT 0
23192: PPUSH
23193: LD_INT 0
23195: PPUSH
23196: LD_INT 0
23198: PPUSH
23199: LD_EXP 25
23203: PPUSH
23204: LD_EXP 26
23208: PPUSH
23209: CALL_OW 12
23213: PPUSH
23214: LD_INT 16
23216: PPUSH
23217: LD_INT 7
23219: PPUSH
23220: LD_INT 1
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: LD_INT 3
23228: PPUSH
23229: CALL_OW 12
23233: PPUSH
23234: CALL 11518 0 12
23238: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23239: LD_EXP 18
23243: PUSH
23244: LD_INT 0
23246: EQUAL
23247: IFFALSE 23347
23249: GO 23251
23251: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23252: LD_INT 16
23254: PPUSH
23255: LD_INT 6
23257: PPUSH
23258: LD_INT 5
23260: PPUSH
23261: LD_INT 8
23263: PPUSH
23264: CALL_OW 12
23268: PUSH
23269: LD_INT 6
23271: PPUSH
23272: LD_INT 9
23274: PPUSH
23275: CALL_OW 12
23279: PUSH
23280: LD_INT 7
23282: PPUSH
23283: LD_INT 9
23285: PPUSH
23286: CALL_OW 12
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: PUSH
23296: LD_OWVAR 67
23300: ARRAY
23301: PPUSH
23302: LD_EXP 25
23306: PPUSH
23307: LD_EXP 26
23311: PPUSH
23312: CALL_OW 12
23316: PPUSH
23317: LD_INT 3
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: LD_INT 3
23325: PPUSH
23326: LD_INT 44
23328: PUSH
23329: LD_INT 46
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PPUSH
23336: EMPTY
23337: PPUSH
23338: EMPTY
23339: PPUSH
23340: LD_INT 1
23342: PPUSH
23343: CALL 13811 0 11
23347: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23348: LD_EXP 18
23352: PUSH
23353: LD_INT 0
23355: EQUAL
23356: IFFALSE 23462
23358: GO 23360
23360: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23361: LD_INT 6
23363: PPUSH
23364: LD_INT 3
23366: PPUSH
23367: LD_INT 8
23369: PPUSH
23370: LD_INT 9
23372: PPUSH
23373: CALL_OW 12
23377: PUSH
23378: LD_INT 7
23380: PPUSH
23381: LD_INT 10
23383: PPUSH
23384: CALL_OW 12
23388: PUSH
23389: LD_INT 8
23391: PPUSH
23392: LD_INT 10
23394: PPUSH
23395: CALL_OW 12
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: PUSH
23405: LD_OWVAR 67
23409: ARRAY
23410: PPUSH
23411: LD_INT 0
23413: PPUSH
23414: LD_INT 0
23416: PPUSH
23417: LD_INT 0
23419: PPUSH
23420: LD_INT 0
23422: PPUSH
23423: LD_EXP 25
23427: PPUSH
23428: LD_EXP 26
23432: PPUSH
23433: CALL_OW 12
23437: PPUSH
23438: LD_INT 16
23440: PPUSH
23441: LD_INT 7
23443: PPUSH
23444: LD_INT 1
23446: PPUSH
23447: LD_INT 1
23449: PPUSH
23450: LD_INT 3
23452: PPUSH
23453: CALL_OW 12
23457: PPUSH
23458: CALL 11518 0 12
23462: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23463: LD_EXP 18
23467: PUSH
23468: LD_INT 0
23470: EQUAL
23471: IFFALSE 23571
23473: GO 23475
23475: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23476: LD_INT 16
23478: PPUSH
23479: LD_INT 6
23481: PPUSH
23482: LD_INT 5
23484: PPUSH
23485: LD_INT 8
23487: PPUSH
23488: CALL_OW 12
23492: PUSH
23493: LD_INT 6
23495: PPUSH
23496: LD_INT 9
23498: PPUSH
23499: CALL_OW 12
23503: PUSH
23504: LD_INT 7
23506: PPUSH
23507: LD_INT 9
23509: PPUSH
23510: CALL_OW 12
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: LIST
23519: PUSH
23520: LD_OWVAR 67
23524: ARRAY
23525: PPUSH
23526: LD_EXP 25
23530: PPUSH
23531: LD_EXP 26
23535: PPUSH
23536: CALL_OW 12
23540: PPUSH
23541: LD_INT 3
23543: PPUSH
23544: LD_INT 1
23546: PPUSH
23547: LD_INT 3
23549: PPUSH
23550: LD_INT 44
23552: PUSH
23553: LD_INT 46
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PPUSH
23560: EMPTY
23561: PPUSH
23562: EMPTY
23563: PPUSH
23564: LD_INT 1
23566: PPUSH
23567: CALL 13811 0 11
23571: END
// every 0 0$1 trigger timerStatus = 1 do
23572: LD_EXP 35
23576: PUSH
23577: LD_INT 1
23579: EQUAL
23580: IFFALSE 23617
23582: GO 23584
23584: DISABLE
// begin enable ;
23585: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23586: LD_ADDR_OWVAR 47
23590: PUSH
23591: LD_STRING #Am08-1
23593: PUSH
23594: LD_EXP 19
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23603: LD_ADDR_EXP 19
23607: PUSH
23608: LD_EXP 19
23612: PUSH
23613: LD_INT 35
23615: MINUS
23616: ST_TO_ADDR
// end ; end_of_file
23617: END
// every 1 1$0 do
23618: GO 23620
23620: DISABLE
// begin if supply <= 13 and supply > 7 then
23621: LD_EXP 40
23625: PUSH
23626: LD_INT 13
23628: LESSEQUAL
23629: PUSH
23630: LD_EXP 40
23634: PUSH
23635: LD_INT 7
23637: GREATER
23638: AND
23639: IFFALSE 23662
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23641: LD_INT 3
23643: PPUSH
23644: LD_INT 5
23646: PPUSH
23647: CALL_OW 12
23651: PPUSH
23652: LD_INT 5
23654: PPUSH
23655: LD_INT 1
23657: PPUSH
23658: CALL_OW 55
// if supply <= 7 and supply > 4 then
23662: LD_EXP 40
23666: PUSH
23667: LD_INT 7
23669: LESSEQUAL
23670: PUSH
23671: LD_EXP 40
23675: PUSH
23676: LD_INT 4
23678: GREATER
23679: AND
23680: IFFALSE 23703
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23682: LD_INT 3
23684: PPUSH
23685: LD_INT 5
23687: PPUSH
23688: CALL_OW 12
23692: PPUSH
23693: LD_INT 20
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 55
// if supply <= 4 and supply > 0 then
23703: LD_EXP 40
23707: PUSH
23708: LD_INT 4
23710: LESSEQUAL
23711: PUSH
23712: LD_EXP 40
23716: PUSH
23717: LD_INT 0
23719: GREATER
23720: AND
23721: IFFALSE 23744
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23723: LD_INT 3
23725: PPUSH
23726: LD_INT 5
23728: PPUSH
23729: CALL_OW 12
23733: PPUSH
23734: LD_INT 21
23736: PPUSH
23737: LD_INT 1
23739: PPUSH
23740: CALL_OW 55
// if supply > 0 then
23744: LD_EXP 40
23748: PUSH
23749: LD_INT 0
23751: GREATER
23752: IFFALSE 23769
// begin supply = supply - 1 ;
23754: LD_ADDR_EXP 40
23758: PUSH
23759: LD_EXP 40
23763: PUSH
23764: LD_INT 1
23766: MINUS
23767: ST_TO_ADDR
// enable ;
23768: ENABLE
// end ; end ; end_of_file
23769: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23770: LD_EXP 39
23774: PUSH
23775: LD_INT 1
23777: EQUAL
23778: PUSH
23779: LD_EXP 1
23783: PPUSH
23784: CALL_OW 301
23788: AND
23789: IFFALSE 23801
23791: GO 23793
23793: DISABLE
// YouLost ( JMM ) ;
23794: LD_STRING JMM
23796: PPUSH
23797: CALL_OW 104
23801: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23802: LD_EXP 18
23806: PUSH
23807: LD_INT 1
23809: EQUAL
23810: PUSH
23811: LD_EXP 16
23815: PPUSH
23816: CALL_OW 301
23820: AND
23821: IFFALSE 23853
23823: GO 23825
23825: DISABLE
// begin DialogueOn ;
23826: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23830: LD_EXP 23
23834: PPUSH
23835: LD_STRING D8a-Pow-1
23837: PPUSH
23838: CALL_OW 94
// DialogueOff ;
23842: CALL_OW 7
// YouLost ( Dismissed ) ;
23846: LD_STRING Dismissed
23848: PPUSH
23849: CALL_OW 104
// end ;
23853: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23854: LD_EXP 37
23858: PPUSH
23859: CALL_OW 301
23863: IFFALSE 23875
23865: GO 23867
23867: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23868: LD_STRING Destroyed
23870: PPUSH
23871: CALL_OW 104
23875: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23876: LD_EXP 24
23880: PPUSH
23881: CALL_OW 301
23885: IFFALSE 24244
23887: GO 23889
23889: DISABLE
23890: LD_INT 0
23892: PPUSH
// begin russianAI = 0 ;
23893: LD_ADDR_EXP 27
23897: PUSH
23898: LD_INT 0
23900: ST_TO_ADDR
// escapeAvalaible = 1 ;
23901: LD_ADDR_EXP 36
23905: PUSH
23906: LD_INT 1
23908: ST_TO_ADDR
// InGameOn ;
23909: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23913: LD_INT 3
23915: PPUSH
23916: LD_INT 1
23918: PPUSH
23919: LD_INT 1
23921: PPUSH
23922: LD_INT 0
23924: PPUSH
23925: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23929: LD_INT 6
23931: PPUSH
23932: LD_INT 1
23934: PPUSH
23935: LD_INT 1
23937: PPUSH
23938: LD_INT 0
23940: PPUSH
23941: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
23945: LD_INT 3
23947: PPUSH
23948: LD_INT 1
23950: PPUSH
23951: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
23955: LD_INT 97
23957: PPUSH
23958: LD_INT 91
23960: PPUSH
23961: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23965: LD_INT 22
23967: PUSH
23968: LD_INT 3
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 21
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PPUSH
23989: CALL_OW 69
23993: PPUSH
23994: CALL_OW 121
// wait ( 0 0$01 ) ;
23998: LD_INT 35
24000: PPUSH
24001: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24005: LD_INT 22
24007: PUSH
24008: LD_INT 3
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 21
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PPUSH
24029: CALL_OW 69
24033: PPUSH
24034: LD_INT 124
24036: PPUSH
24037: LD_INT 98
24039: PPUSH
24040: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
24044: LD_INT 22
24046: PUSH
24047: LD_INT 6
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PPUSH
24068: CALL_OW 69
24072: PPUSH
24073: CALL_OW 121
// wait ( 0 0$01 ) ;
24077: LD_INT 35
24079: PPUSH
24080: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24084: LD_INT 22
24086: PUSH
24087: LD_INT 6
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 21
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PPUSH
24108: CALL_OW 69
24112: PPUSH
24113: LD_INT 124
24115: PPUSH
24116: LD_INT 98
24118: PPUSH
24119: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
24123: LD_INT 22
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 21
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: LD_INT 54
24148: PUSH
24149: EMPTY
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 69
24165: PPUSH
24166: LD_INT 124
24168: PPUSH
24169: LD_INT 98
24171: PPUSH
24172: CALL_OW 114
// wait ( 0 0$4 ) ;
24176: LD_INT 140
24178: PPUSH
24179: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24183: LD_INT 124
24185: PPUSH
24186: LD_INT 98
24188: PPUSH
24189: CALL_OW 84
// if SikorskyStatus = 1 then
24193: LD_EXP 21
24197: PUSH
24198: LD_INT 1
24200: EQUAL
24201: IFFALSE 24215
// begin Say ( Sikorski , D9-Sik-1 ) ;
24203: LD_EXP 16
24207: PPUSH
24208: LD_STRING D9-Sik-1
24210: PPUSH
24211: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24215: LD_EXP 21
24219: PUSH
24220: LD_INT 2
24222: EQUAL
24223: IFFALSE 24244
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24225: LD_EXP 23
24229: PPUSH
24230: LD_STRING D8b-Pow-1
24232: PPUSH
24233: CALL_OW 94
// YouLost ( Dismissed ) ;
24237: LD_STRING Dismissed
24239: PPUSH
24240: CALL_OW 104
// end ; end ;
24244: PPOPN 1
24246: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
24247: LD_INT 23
24249: PUSH
24250: LD_INT 3
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 21
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 24
24269: PUSH
24270: LD_INT 250
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: PUSH
24287: LD_INT 0
24289: EQUAL
24290: IFFALSE 24299
24292: GO 24294
24294: DISABLE
// FinishMission ;
24295: CALL 24300 0 0
24299: END
// export function FinishMission ; var tmp ; begin
24300: LD_INT 0
24302: PPUSH
24303: PPUSH
// AddMedal ( med1 , 1 ) ;
24304: LD_STRING med1
24306: PPUSH
24307: LD_INT 1
24309: PPUSH
24310: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24314: LD_STRING med2
24316: PPUSH
24317: LD_INT 1
24319: PPUSH
24320: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24324: LD_STRING perfect
24326: PPUSH
24327: LD_INT 1
24329: PPUSH
24330: CALL_OW 101
// GiveMedals ( Main ) ;
24334: LD_STRING Main
24336: PPUSH
24337: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24341: LD_INT 22
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 23
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 21
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 2
24373: PUSH
24374: LD_INT 25
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 25
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 25
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 25
24406: PUSH
24407: LD_INT 4
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: PPUSH
24427: CALL_OW 69
24431: PPUSH
24432: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24436: LD_EXP 1
24440: PPUSH
24441: LD_EXP 42
24445: PUSH
24446: LD_STRING JMM
24448: STR
24449: PPUSH
24450: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24454: LD_EXP 2
24458: PPUSH
24459: LD_EXP 42
24463: PUSH
24464: LD_STRING Brown
24466: STR
24467: PPUSH
24468: CALL 7725 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24472: LD_EXP 3
24476: PPUSH
24477: LD_EXP 42
24481: PUSH
24482: LD_STRING Donaldson
24484: STR
24485: PPUSH
24486: CALL 7725 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24490: LD_EXP 4
24494: PPUSH
24495: LD_EXP 42
24499: PUSH
24500: LD_STRING Bobby
24502: STR
24503: PPUSH
24504: CALL 7725 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24508: LD_EXP 5
24512: PPUSH
24513: LD_EXP 42
24517: PUSH
24518: LD_STRING Cyrus
24520: STR
24521: PPUSH
24522: CALL 7725 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24526: LD_EXP 6
24530: PPUSH
24531: LD_EXP 42
24535: PUSH
24536: LD_STRING Lisa
24538: STR
24539: PPUSH
24540: CALL 7725 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24544: LD_EXP 7
24548: PPUSH
24549: LD_EXP 42
24553: PUSH
24554: LD_STRING Frank
24556: STR
24557: PPUSH
24558: CALL 7725 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24562: LD_EXP 8
24566: PPUSH
24567: LD_EXP 42
24571: PUSH
24572: LD_STRING Gladstone
24574: STR
24575: PPUSH
24576: CALL 7725 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24580: LD_EXP 9
24584: PPUSH
24585: LD_EXP 42
24589: PUSH
24590: LD_STRING Kikuchi
24592: STR
24593: PPUSH
24594: CALL 7725 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24598: LD_EXP 14
24602: PPUSH
24603: LD_EXP 42
24607: PUSH
24608: LD_STRING Denis
24610: STR
24611: PPUSH
24612: CALL 7725 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24616: LD_EXP 15
24620: PPUSH
24621: LD_EXP 42
24625: PUSH
24626: LD_STRING Joan
24628: STR
24629: PPUSH
24630: CALL 7725 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24634: LD_EXP 10
24638: PPUSH
24639: LD_EXP 42
24643: PUSH
24644: LD_STRING Khatam
24646: STR
24647: PPUSH
24648: CALL 7725 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24652: LD_EXP 13
24656: PPUSH
24657: LD_EXP 42
24661: PUSH
24662: LD_STRING Houten
24664: STR
24665: PPUSH
24666: CALL 7725 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24670: LD_INT 50
24672: PUSH
24673: EMPTY
24674: LIST
24675: PUSH
24676: LD_INT 22
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 21
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 25
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 25
24711: PUSH
24712: LD_INT 2
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 25
24721: PUSH
24722: LD_INT 3
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 25
24731: PUSH
24732: LD_INT 4
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: PPUSH
24752: CALL_OW 69
24756: PUSH
24757: LD_EXP 1
24761: PUSH
24762: LD_EXP 2
24766: PUSH
24767: LD_EXP 3
24771: PUSH
24772: LD_EXP 4
24776: PUSH
24777: LD_EXP 5
24781: PUSH
24782: LD_EXP 6
24786: PUSH
24787: LD_EXP 7
24791: PUSH
24792: LD_EXP 8
24796: PUSH
24797: LD_EXP 9
24801: PUSH
24802: LD_EXP 14
24806: PUSH
24807: LD_EXP 15
24811: PUSH
24812: LD_EXP 13
24816: PUSH
24817: LD_EXP 10
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: DIFF
24837: PPUSH
24838: LD_STRING 08_other_survivors
24840: PPUSH
24841: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
24845: LD_INT 23
24847: PPUSH
24848: CALL 24861 0 1
// YouWin ;
24852: CALL_OW 103
// end ;
24856: LD_VAR 0 1
24860: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24861: LD_INT 0
24863: PPUSH
24864: PPUSH
24865: PPUSH
24866: PPUSH
// gammaBase = [ ] ;
24867: LD_ADDR_VAR 0 4
24871: PUSH
24872: EMPTY
24873: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24874: LD_ADDR_VAR 0 5
24878: PUSH
24879: LD_VAR 0 1
24883: PPUSH
24884: LD_INT 22
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 21
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 50
24906: PUSH
24907: EMPTY
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: PPUSH
24915: CALL_OW 70
24919: ST_TO_ADDR
// for i in buildings do
24920: LD_ADDR_VAR 0 3
24924: PUSH
24925: LD_VAR 0 5
24929: PUSH
24930: FOR_IN
24931: IFFALSE 25368
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24933: LD_VAR 0 3
24937: PPUSH
24938: CALL_OW 266
24942: PUSH
24943: LD_INT 6
24945: PUSH
24946: LD_INT 7
24948: PUSH
24949: LD_INT 8
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: IN
24957: IFFALSE 25071
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24959: LD_ADDR_VAR 0 4
24963: PUSH
24964: LD_VAR 0 4
24968: PUSH
24969: LD_VAR 0 3
24973: PPUSH
24974: CALL_OW 266
24978: PUSH
24979: LD_VAR 0 3
24983: PPUSH
24984: CALL_OW 250
24988: PUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: CALL_OW 251
24998: PUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: CALL_OW 254
25008: PUSH
25009: LD_VAR 0 3
25013: PPUSH
25014: CALL_OW 267
25018: PUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: CALL_OW 248
25028: PUSH
25029: LD_VAR 0 3
25033: PPUSH
25034: LD_INT 1
25036: PPUSH
25037: CALL_OW 268
25041: PUSH
25042: LD_VAR 0 3
25046: PPUSH
25047: LD_INT 2
25049: PPUSH
25050: CALL_OW 268
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: PUSH
25065: EMPTY
25066: LIST
25067: ADD
25068: ST_TO_ADDR
25069: GO 25366
// if GetBType ( i ) = b_bunker then
25071: LD_VAR 0 3
25075: PPUSH
25076: CALL_OW 266
25080: PUSH
25081: LD_INT 32
25083: EQUAL
25084: IFFALSE 25181
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25086: LD_ADDR_VAR 0 4
25090: PUSH
25091: LD_VAR 0 4
25095: PUSH
25096: LD_VAR 0 3
25100: PPUSH
25101: CALL_OW 266
25105: PUSH
25106: LD_VAR 0 3
25110: PPUSH
25111: CALL_OW 250
25115: PUSH
25116: LD_VAR 0 3
25120: PPUSH
25121: CALL_OW 251
25125: PUSH
25126: LD_VAR 0 3
25130: PPUSH
25131: CALL_OW 254
25135: PUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: CALL_OW 267
25145: PUSH
25146: LD_VAR 0 3
25150: PPUSH
25151: CALL_OW 248
25155: PUSH
25156: LD_VAR 0 3
25160: PPUSH
25161: CALL_OW 269
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: PUSH
25175: EMPTY
25176: LIST
25177: ADD
25178: ST_TO_ADDR
25179: GO 25366
// if GetBType ( i ) = b_factory then
25181: LD_VAR 0 3
25185: PPUSH
25186: CALL_OW 266
25190: PUSH
25191: LD_INT 3
25193: EQUAL
25194: IFFALSE 25284
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25196: LD_ADDR_VAR 0 4
25200: PUSH
25201: LD_VAR 0 4
25205: PPUSH
25206: LD_INT 1
25208: PPUSH
25209: LD_VAR 0 3
25213: PPUSH
25214: CALL_OW 266
25218: PUSH
25219: LD_VAR 0 3
25223: PPUSH
25224: CALL_OW 250
25228: PUSH
25229: LD_VAR 0 3
25233: PPUSH
25234: CALL_OW 251
25238: PUSH
25239: LD_VAR 0 3
25243: PPUSH
25244: CALL_OW 254
25248: PUSH
25249: LD_VAR 0 3
25253: PPUSH
25254: CALL_OW 267
25258: PUSH
25259: LD_VAR 0 3
25263: PPUSH
25264: CALL_OW 248
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: PPUSH
25277: CALL_OW 2
25281: ST_TO_ADDR
25282: GO 25366
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25284: LD_ADDR_VAR 0 4
25288: PUSH
25289: LD_VAR 0 4
25293: PUSH
25294: LD_VAR 0 3
25298: PPUSH
25299: CALL_OW 266
25303: PUSH
25304: LD_VAR 0 3
25308: PPUSH
25309: CALL_OW 250
25313: PUSH
25314: LD_VAR 0 3
25318: PPUSH
25319: CALL_OW 251
25323: PUSH
25324: LD_VAR 0 3
25328: PPUSH
25329: CALL_OW 254
25333: PUSH
25334: LD_VAR 0 3
25338: PPUSH
25339: CALL_OW 267
25343: PUSH
25344: LD_VAR 0 3
25348: PPUSH
25349: CALL_OW 248
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: PUSH
25362: EMPTY
25363: LIST
25364: ADD
25365: ST_TO_ADDR
// end ;
25366: GO 24930
25368: POP
25369: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25370: LD_VAR 0 4
25374: PPUSH
25375: LD_STRING 08_GammaBase
25377: PPUSH
25378: CALL_OW 39
// end ;
25382: LD_VAR 0 2
25386: RET
