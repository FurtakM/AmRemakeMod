// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7065 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2109 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5870 0 0
// PrepareRussians ;
 229: CALL 6188 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8330 0 6
// PrepareCutsceneAttack ;
 312: CALL 5922 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 593
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6606 0 2
 577: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 5
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ; if gammaCommander = 2 then
 593: LD_EXP 12
 597: PUSH
 598: LD_INT 2
 600: EQUAL
 601: IFFALSE 634
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 603: LD_ADDR_EXP 2
 607: PUSH
 608: LD_STRING 04_Brown
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 6606 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 619: LD_EXP 2
 623: PPUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// end ; if gammaCommander = 3 then
 634: LD_EXP 12
 638: PUSH
 639: LD_INT 3
 641: EQUAL
 642: IFFALSE 675
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 644: LD_ADDR_EXP 13
 648: PUSH
 649: LD_STRING VanHouten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6606 0 2
 659: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 660: LD_EXP 13
 664: PPUSH
 665: LD_INT 5
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 675: LD_ADDR_EXP 22
 679: PUSH
 680: LD_STRING Harisson
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL 6606 0 2
 690: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 691: LD_ADDR_EXP 23
 695: PUSH
 696: LD_STRING Powell
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 6606 0 2
 706: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 707: LD_STRING 04_Lisa
 709: PUSH
 710: EMPTY
 711: LIST
 712: PPUSH
 713: CALL_OW 28
 717: PUSH
 718: LD_STRING LisaInDelta
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL_OW 30
 728: NOT
 729: AND
 730: PUSH
 731: LD_STRING 07_Lisa
 733: PUSH
 734: EMPTY
 735: LIST
 736: PPUSH
 737: CALL_OW 28
 741: NOT
 742: AND
 743: IFFALSE 777
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 745: LD_ADDR_EXP 6
 749: PUSH
 750: LD_STRING 04_Lisa
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6606 0 2
 760: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 761: LD_ADDR_VAR 0 15
 765: PUSH
 766: LD_VAR 0 15
 770: PUSH
 771: LD_EXP 6
 775: ADD
 776: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 777: LD_STRING 04_Bobby
 779: PUSH
 780: EMPTY
 781: LIST
 782: PPUSH
 783: CALL_OW 28
 787: PUSH
 788: LD_STRING BobbyInDelta
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 30
 798: NOT
 799: AND
 800: PUSH
 801: LD_STRING 07_Bobby
 803: PUSH
 804: EMPTY
 805: LIST
 806: PPUSH
 807: CALL_OW 28
 811: NOT
 812: AND
 813: IFFALSE 847
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 815: LD_ADDR_EXP 4
 819: PUSH
 820: LD_STRING 04_Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6606 0 2
 830: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 831: LD_ADDR_VAR 0 15
 835: PUSH
 836: LD_VAR 0 15
 840: PUSH
 841: LD_EXP 4
 845: ADD
 846: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 847: LD_STRING 04_Cyrus
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: PUSH
 858: LD_STRING CyrusInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Cyrus
 873: PUSH
 874: EMPTY
 875: LIST
 876: PPUSH
 877: CALL_OW 28
 881: NOT
 882: AND
 883: IFFALSE 917
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 885: LD_ADDR_EXP 5
 889: PUSH
 890: LD_STRING 04_Cyrus
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 6606 0 2
 900: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
 901: LD_ADDR_VAR 0 15
 905: PUSH
 906: LD_VAR 0 15
 910: PUSH
 911: LD_EXP 5
 915: ADD
 916: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
 917: LD_STRING 04_Brown
 919: PUSH
 920: EMPTY
 921: LIST
 922: PPUSH
 923: CALL_OW 28
 927: PUSH
 928: LD_STRING BrownInDelta
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 30
 938: NOT
 939: AND
 940: PUSH
 941: LD_STRING 07_Brown
 943: PUSH
 944: EMPTY
 945: LIST
 946: PPUSH
 947: CALL_OW 28
 951: NOT
 952: AND
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_INT 2
 961: NONEQUAL
 962: AND
 963: IFFALSE 997
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
 965: LD_ADDR_EXP 2
 969: PUSH
 970: LD_STRING 04_Brown
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 6606 0 2
 980: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
 981: LD_ADDR_VAR 0 15
 985: PUSH
 986: LD_VAR 0 15
 990: PUSH
 991: LD_EXP 2
 995: ADD
 996: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
 997: LD_STRING 04_Donaldson
 999: PUSH
1000: EMPTY
1001: LIST
1002: PPUSH
1003: CALL_OW 28
1007: PUSH
1008: LD_STRING DonaldsonInDelta
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 30
1018: NOT
1019: AND
1020: PUSH
1021: LD_STRING 07_Donaldson
1023: PUSH
1024: EMPTY
1025: LIST
1026: PPUSH
1027: CALL_OW 28
1031: NOT
1032: AND
1033: PUSH
1034: LD_EXP 12
1038: PUSH
1039: LD_INT 1
1041: NONEQUAL
1042: AND
1043: IFFALSE 1077
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: LD_STRING 04_Donaldson
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6606 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 3
1075: ADD
1076: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1077: LD_ADDR_EXP 11
1081: PUSH
1082: LD_STRING 07_othersGamma
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1090: LD_ADDR_VAR 0 14
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_EXP 11
1102: MINUS
1103: ST_TO_ADDR
// if tmp then
1104: LD_VAR 0 14
1108: IFFALSE 1161
// for i = 1 to tmp do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_VAR 0 14
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1159
// begin PrepareHuman ( false , 1 , 5 ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_INT 1
1133: PPUSH
1134: LD_INT 5
1136: PPUSH
1137: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: CALL_OW 44
1155: ADD
1156: ST_TO_ADDR
// end ;
1157: GO 1125
1159: POP
1160: POP
// if HexInfo ( 61 , 29 ) = 0 then
1161: LD_INT 61
1163: PPUSH
1164: LD_INT 29
1166: PPUSH
1167: CALL_OW 428
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: IFFALSE 1206
// begin bc_type := b_barracks ;
1177: LD_ADDR_OWVAR 42
1181: PUSH
1182: LD_INT 5
1184: ST_TO_ADDR
// bc_level := 6 ;
1185: LD_ADDR_OWVAR 43
1189: PUSH
1190: LD_INT 6
1192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1193: LD_INT 61
1195: PPUSH
1196: LD_INT 29
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1206: LD_ADDR_VAR 0 13
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 30
1223: PUSH
1224: LD_INT 31
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PPUSH
1235: CALL_OW 69
1239: ST_TO_ADDR
// for i in bun do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_VAR 0 13
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1383
// begin x := GetX ( i ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 250
1267: ST_TO_ADDR
// y := GetY ( i ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 251
1282: ST_TO_ADDR
// d := GetDir ( i ) ;
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PPUSH
1293: CALL_OW 254
1297: ST_TO_ADDR
// RemoveUnit ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 64
// bc_type := b_bunker ;
1307: LD_ADDR_OWVAR 42
1311: PUSH
1312: LD_INT 32
1314: ST_TO_ADDR
// bc_level := 6 ;
1315: LD_ADDR_OWVAR 43
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1323: LD_ADDR_VAR 0 6
1327: PUSH
1328: LD_VAR 0 3
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_VAR 0 5
1342: PPUSH
1343: CALL_OW 47
1347: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1348: LD_VAR 0 6
1352: PPUSH
1353: LD_INT 5
1355: PUSH
1356: LD_INT 4
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 2
1370: MOD
1371: PUSH
1372: LD_INT 1
1374: PLUS
1375: ARRAY
1376: PPUSH
1377: CALL_OW 431
// end ;
1381: GO 1250
1383: POP
1384: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1385: LD_ADDR_VAR 0 9
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1419: LD_ADDR_VAR 0 8
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 30
1439: PUSH
1440: LD_INT 6
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 8
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1482: LD_ADDR_VAR 0 7
1486: PUSH
1487: LD_INT 22
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 30
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1516: LD_ADDR_VAR 0 12
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 30
1533: PUSH
1534: LD_INT 36
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1550: LD_ADDR_VAR 0 13
1554: PUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 30
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 30
1580: PUSH
1581: LD_INT 32
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 11
1611: PUSH
1612: LD_VAR 0 15
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1994
// begin placed := false ;
1621: LD_ADDR_VAR 0 11
1625: PUSH
1626: LD_INT 0
1628: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1629: LD_VAR 0 2
1633: PPUSH
1634: CALL_OW 257
1638: PUSH
1639: LD_INT 1
1641: EQUAL
1642: IFFALSE 1767
// begin if UnitFilter ( bun , [ f_empty ] ) then
1644: LD_VAR 0 13
1648: PPUSH
1649: LD_INT 58
1651: PUSH
1652: EMPTY
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1698
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_VAR 0 13
1670: PPUSH
1671: LD_INT 58
1673: PUSH
1674: EMPTY
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PPUSH
1686: CALL_OW 52
// placed := true ;
1690: LD_ADDR_VAR 0 11
1694: PUSH
1695: LD_INT 1
1697: ST_TO_ADDR
// end ; if arm and not placed then
1698: LD_VAR 0 9
1702: PUSH
1703: LD_VAR 0 11
1707: NOT
1708: AND
1709: IFFALSE 1767
// begin for j in arm do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 9
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; end ; if GetClass ( i ) = 3 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 3
1779: EQUAL
1780: IFFALSE 1884
// if fac then
1782: LD_VAR 0 7
1786: IFFALSE 1884
// begin if ct then
1788: LD_VAR 0 12
1792: IFFALSE 1820
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1794: LD_VAR 0 2
1798: PPUSH
1799: LD_VAR 0 12
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: CALL_OW 52
// placed := true ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// end ; if placed then
1820: LD_VAR 0 11
1824: IFFALSE 1828
// continue ;
1826: GO 1618
// for j in fac do
1828: LD_ADDR_VAR 0 10
1832: PUSH
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_IN
1839: IFFALSE 1882
// if UnitsInside ( j ) < 6 then
1841: LD_VAR 0 10
1845: PPUSH
1846: CALL_OW 313
1850: PUSH
1851: LD_INT 6
1853: LESS
1854: IFFALSE 1880
// begin PlaceHumanInUnit ( i , j ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_VAR 0 10
1865: PPUSH
1866: CALL_OW 52
// placed := true ;
1870: LD_ADDR_VAR 0 11
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// break ;
1878: GO 1882
// end ;
1880: GO 1838
1882: POP
1883: POP
// end ; if GetClass ( i ) = 4 then
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 257
1893: PUSH
1894: LD_INT 4
1896: EQUAL
1897: IFFALSE 1961
// if lab then
1899: LD_VAR 0 8
1903: IFFALSE 1961
// begin for j in lab do
1905: LD_ADDR_VAR 0 10
1909: PUSH
1910: LD_VAR 0 8
1914: PUSH
1915: FOR_IN
1916: IFFALSE 1959
// if UnitsInside ( j ) < 6 then
1918: LD_VAR 0 10
1922: PPUSH
1923: CALL_OW 313
1927: PUSH
1928: LD_INT 6
1930: LESS
1931: IFFALSE 1957
// begin PlaceHumanInUnit ( i , j ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_VAR 0 10
1942: PPUSH
1943: CALL_OW 52
// placed := true ;
1947: LD_ADDR_VAR 0 11
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// break ;
1955: GO 1959
// end ;
1957: GO 1915
1959: POP
1960: POP
// end ; if not placed then
1961: LD_VAR 0 11
1965: NOT
1966: IFFALSE 1992
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_INT 5
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// ComHold ( i ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: CALL_OW 140
// end ; end ;
1992: GO 1618
1994: POP
1995: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1996: LD_VAR 0 12
2000: PUSH
2001: LD_VAR 0 12
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 313
2014: AND
2015: IFFALSE 2104
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 33
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2102
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 12
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_VAR 0 12
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 313
2089: PPUSH
2090: CALL_OW 12
2094: ARRAY
2095: PPUSH
2096: CALL_OW 135
2100: GO 2051
2102: POP
2103: POP
// end ; end ;
2104: LD_VAR 0 1
2108: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2117: LD_INT 71
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2130: LD_ADDR_VAR 0 2
2134: PUSH
2135: LD_STRING GammaBase
2137: PPUSH
2138: EMPTY
2139: PPUSH
2140: CALL_OW 30
2144: ST_TO_ADDR
// if not blist then
2145: LD_VAR 0 2
2149: NOT
2150: IFFALSE 2190
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 51
2162: PUSH
2163: LD_INT 10
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: LD_INT 0
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: EMPTY
2188: LIST
2189: ST_TO_ADDR
// uc_side := 1 ;
2190: LD_ADDR_OWVAR 20
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// uc_nation := 1 ;
2198: LD_ADDR_OWVAR 21
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// for i in blist do
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2625
// begin bc_type := i [ 1 ] ;
2219: LD_ADDR_OWVAR 42
2223: PUSH
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_VAR 0 3
2242: PUSH
2243: LD_INT 5
2245: ARRAY
2246: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PUSH
2256: LD_INT 7
2258: PUSH
2259: LD_INT 8
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: IN
2266: IFFALSE 2322
// begin bc_kind1 := i [ 7 ] ;
2268: LD_ADDR_OWVAR 44
2272: PUSH
2273: LD_VAR 0 3
2277: PUSH
2278: LD_INT 7
2280: ARRAY
2281: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2282: LD_STRING 06_remoteVehs_1
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 30
2292: PUSH
2293: LD_INT 1
2295: EQUAL
2296: IFFALSE 2308
// begin bc_kind2 := 15 ;
2298: LD_ADDR_OWVAR 45
2302: PUSH
2303: LD_INT 15
2305: ST_TO_ADDR
// end else
2306: GO 2322
// begin bc_kind2 := i [ 8 ] ;
2308: LD_ADDR_OWVAR 45
2312: PUSH
2313: LD_VAR 0 3
2317: PUSH
2318: LD_INT 8
2320: ARRAY
2321: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 0
2329: EQUAL
2330: IFFALSE 2448
// begin bc_type := b_warehouse ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2340: LD_ADDR_EXP 37
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 2
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 3
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 4
2370: ARRAY
2371: PPUSH
2372: CALL_OW 47
2376: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2377: LD_EXP 37
2381: PPUSH
2382: LD_STRING gamma
2384: PPUSH
2385: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2389: LD_EXP 37
2393: PPUSH
2394: CALL_OW 274
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: LD_INT 400
2404: PUSH
2405: LD_INT 350
2407: PUSH
2408: LD_INT 250
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_OWVAR 67
2420: ARRAY
2421: PPUSH
2422: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2426: LD_EXP 37
2430: PPUSH
2431: CALL_OW 274
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: LD_INT 200
2441: PPUSH
2442: CALL_OW 277
// end else
2446: GO 2590
// begin if bc_type = 4 then
2448: LD_OWVAR 42
2452: PUSH
2453: LD_INT 4
2455: EQUAL
2456: IFFALSE 2505
// begin bc_type = 5 ;
2458: LD_ADDR_OWVAR 42
2462: PUSH
2463: LD_INT 5
2465: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2466: LD_ADDR_VAR 0 4
2470: PUSH
2471: LD_VAR 0 3
2475: PUSH
2476: LD_INT 2
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 3
2484: PUSH
2485: LD_INT 3
2487: ARRAY
2488: PPUSH
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 4
2496: ARRAY
2497: PPUSH
2498: CALL_OW 47
2502: ST_TO_ADDR
// end else
2503: GO 2590
// begin bc_type := i [ 1 ] ;
2505: LD_ADDR_OWVAR 42
2509: PUSH
2510: LD_VAR 0 3
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2519: LD_STRING 06_remoteVehs_1
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: CALL_OW 30
2529: PUSH
2530: LD_INT 1
2532: EQUAL
2533: PUSH
2534: LD_OWVAR 42
2538: PUSH
2539: LD_INT 7
2541: EQUAL
2542: AND
2543: IFFALSE 2553
// bc_type := b_lab_full ;
2545: LD_ADDR_OWVAR 42
2549: PUSH
2550: LD_INT 8
2552: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 3
2574: ARRAY
2575: PPUSH
2576: LD_VAR 0 3
2580: PUSH
2581: LD_INT 4
2583: ARRAY
2584: PPUSH
2585: CALL_OW 47
2589: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2590: LD_VAR 0 4
2594: PPUSH
2595: CALL_OW 266
2599: PUSH
2600: LD_INT 32
2602: EQUAL
2603: IFFALSE 2623
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2605: LD_VAR 0 4
2609: PPUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 7
2617: ARRAY
2618: PPUSH
2619: CALL_OW 431
// end ;
2623: GO 2216
2625: POP
2626: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2627: LD_INT 22
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 30
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: IFFALSE 2903
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2657: LD_ADDR_VAR 0 4
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 30
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: CALL_OW 69
2690: PUSH
2691: LD_INT 1
2693: ARRAY
2694: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2695: LD_ADDR_VAR 0 6
2699: PUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: CALL_OW 250
2709: PPUSH
2710: LD_VAR 0 4
2714: PPUSH
2715: CALL_OW 251
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: CALL_OW 254
2729: PPUSH
2730: CALL 16027 0 3
2734: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_INT 19
2742: PUSH
2743: LD_INT 17
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2750: LD_STRING 06_remoteVehs_1
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 30
2760: IFFALSE 2783
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2762: LD_ADDR_VAR 0 2
2766: PUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 20
2777: PPUSH
2778: CALL_OW 2
2782: ST_TO_ADDR
// for i in tmp do
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: LD_VAR 0 6
2792: PUSH
2793: FOR_IN
2794: IFFALSE 2901
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: PPUSH
2814: CALL_OW 428
2818: PUSH
2819: LD_INT 0
2821: EQUAL
2822: IFFALSE 2899
// begin bc_type := blist [ 1 ] ;
2824: LD_ADDR_OWVAR 42
2828: PUSH
2829: LD_VAR 0 2
2833: PUSH
2834: LD_INT 1
2836: ARRAY
2837: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2838: LD_VAR 0 3
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PPUSH
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 2
2854: ARRAY
2855: PPUSH
2856: LD_VAR 0 3
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: PPUSH
2865: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: CALL_OW 3
2886: ST_TO_ADDR
// if blist = 0 then
2887: LD_VAR 0 2
2891: PUSH
2892: LD_INT 0
2894: EQUAL
2895: IFFALSE 2899
// break ;
2897: GO 2901
// end ;
2899: GO 2793
2901: POP
2902: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2903: LD_STRING 06_remoteVehs_1
2905: PPUSH
2906: LD_INT 0
2908: PPUSH
2909: CALL_OW 30
2913: PUSH
2914: LD_INT 1
2916: EQUAL
2917: IFFALSE 3121
// begin bc_type = 36 ;
2919: LD_ADDR_OWVAR 42
2923: PUSH
2924: LD_INT 36
2926: ST_TO_ADDR
// bc_level = 4 ;
2927: LD_ADDR_OWVAR 43
2931: PUSH
2932: LD_INT 4
2934: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2935: LD_INT 62
2937: PPUSH
2938: LD_INT 12
2940: PPUSH
2941: LD_INT 3
2943: PPUSH
2944: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 3
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_OWVAR 67
2976: ARRAY
2977: PUSH
2978: FOR_TO
2979: IFFALSE 3119
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2981: LD_ADDR_OWVAR 37
2985: PUSH
2986: LD_INT 3
2988: PUSH
2989: LD_INT 2
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_OWVAR 67
3023: ARRAY
3024: ST_TO_ADDR
// vc_engine = 1 ;
3025: LD_ADDR_OWVAR 39
3029: PUSH
3030: LD_INT 1
3032: ST_TO_ADDR
// vc_control = 2 ;
3033: LD_ADDR_OWVAR 38
3037: PUSH
3038: LD_INT 2
3040: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3041: LD_ADDR_OWVAR 40
3045: PUSH
3046: LD_INT 3
3048: PUSH
3049: LD_INT 4
3051: PUSH
3052: LD_INT 5
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: CALL_OW 12
3070: ARRAY
3071: ST_TO_ADDR
// veh = CreateVehicle ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3082: LD_VAR 0 5
3086: PPUSH
3087: LD_EXP 37
3091: PPUSH
3092: CALL_OW 250
3096: PPUSH
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 251
3106: PPUSH
3107: LD_INT 7
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: CALL_OW 50
// end ;
3117: GO 2978
3119: POP
3120: POP
// end ; end ;
3121: LD_VAR 0 1
3125: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3126: LD_INT 0
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
// uc_side = 1 ;
3132: LD_ADDR_OWVAR 20
3136: PUSH
3137: LD_INT 1
3139: ST_TO_ADDR
// uc_nation = 1 ;
3140: LD_ADDR_OWVAR 21
3144: PUSH
3145: LD_INT 1
3147: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3148: LD_ADDR_EXP 14
3152: PUSH
3153: LD_STRING 06c_Denis
3155: PPUSH
3156: LD_INT 1
3158: PPUSH
3159: CALL 6606 0 2
3163: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3164: LD_EXP 14
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3179: LD_ADDR_EXP 15
3183: PUSH
3184: LD_STRING 06c_Joan
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: CALL 6606 0 2
3194: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3195: LD_EXP 15
3199: PPUSH
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3210: LD_STRING GladstoneIn07
3212: PPUSH
3213: LD_INT 0
3215: PPUSH
3216: CALL_OW 30
3220: NOT
3221: IFFALSE 3289
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3223: LD_ADDR_EXP 8
3227: PUSH
3228: LD_STRING 06c_Gladstone
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL 6606 0 2
3238: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3239: LD_EXP 8
3243: NOT
3244: PUSH
3245: LD_STRING GladstoneStayInDelta
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 30
3255: AND
3256: IFFALSE 3274
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3258: LD_ADDR_EXP 8
3262: PUSH
3263: LD_STRING 05_Gladstone
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 6606 0 2
3273: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3274: LD_EXP 8
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3289: LD_STRING LisaStayInDelta
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3332
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3301: LD_ADDR_EXP 6
3305: PUSH
3306: LD_STRING 05_Lisa
3308: PPUSH
3309: LD_INT 1
3311: PPUSH
3312: CALL 6606 0 2
3316: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3317: LD_EXP 6
3321: PPUSH
3322: LD_INT 4
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3332: LD_STRING BobbyStayInDelta
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 30
3342: IFFALSE 3375
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3344: LD_ADDR_EXP 4
3348: PUSH
3349: LD_STRING 05_Bobby
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL 6606 0 2
3359: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3360: LD_EXP 4
3364: PPUSH
3365: LD_INT 4
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3375: LD_STRING CyrusStayInDelta
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 30
3385: IFFALSE 3418
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3387: LD_ADDR_EXP 5
3391: PUSH
3392: LD_STRING 05_Cyrus
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL 6606 0 2
3402: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3403: LD_EXP 5
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3418: LD_STRING BrownStayInDelta
3420: PPUSH
3421: LD_INT 0
3423: PPUSH
3424: CALL_OW 30
3428: IFFALSE 3461
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3430: LD_ADDR_EXP 2
3434: PUSH
3435: LD_STRING 05_Brown
3437: PPUSH
3438: LD_INT 1
3440: PPUSH
3441: CALL 6606 0 2
3445: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3446: LD_EXP 2
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3461: LD_STRING DonaldsonStayInDelta
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 30
3471: IFFALSE 3504
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3473: LD_ADDR_EXP 3
3477: PUSH
3478: LD_STRING 05_Donaldson
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL 6606 0 2
3488: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3489: LD_EXP 3
3493: PPUSH
3494: LD_INT 4
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_STRING OthersStayInDelta
3511: PPUSH
3512: CALL_OW 31
3516: ST_TO_ADDR
// if other > 2 then
3517: LD_VAR 0 4
3521: PUSH
3522: LD_INT 2
3524: GREATER
3525: IFFALSE 3570
// begin for j = 1 to 2 do
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: DOUBLE
3533: LD_INT 1
3535: DEC
3536: ST_TO_ADDR
3537: LD_INT 2
3539: PUSH
3540: FOR_TO
3541: IFFALSE 3566
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3543: LD_VAR 0 4
3547: PUSH
3548: LD_VAR 0 3
3552: ARRAY
3553: PPUSH
3554: LD_INT 4
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL_OW 49
3564: GO 3540
3566: POP
3567: POP
// end else
3568: GO 3613
// begin for j = 1 to other do
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_VAR 0 4
3584: PUSH
3585: FOR_TO
3586: IFFALSE 3611
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3588: LD_VAR 0 4
3592: PUSH
3593: LD_VAR 0 3
3597: ARRAY
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 0
3604: PPUSH
3605: CALL_OW 49
3609: GO 3585
3611: POP
3612: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
3613: LD_ADDR_VAR 0 4
3617: PUSH
3618: LD_STRING 06_other_apemans
3620: PPUSH
3621: CALL_OW 31
3625: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3626: LD_VAR 0 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 4
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_OWVAR 67
3649: ARRAY
3650: GREATEREQUAL
3651: IFFALSE 3680
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_INT 5
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_OWVAR 67
3676: ARRAY
3677: ST_TO_ADDR
3678: GO 3690
// j := other ;
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: LD_VAR 0 4
3689: ST_TO_ADDR
// for i = 1 to j do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_VAR 0 3
3704: PUSH
3705: FOR_TO
3706: IFFALSE 3731
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3708: LD_VAR 0 4
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: PPUSH
3719: LD_INT 4
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 49
3729: GO 3705
3731: POP
3732: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3733: LD_INT 4
3735: PPUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 1
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 21
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 70
3764: PPUSH
3765: LD_INT 53
3767: PPUSH
3768: LD_INT 19
3770: PPUSH
3771: CALL_OW 111
// firstAttack = 1 ;
3775: LD_ADDR_EXP 33
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// end ;
3783: LD_VAR 0 1
3787: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3788: LD_INT 0
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3795: LD_ADDR_VAR 0 4
3799: PUSH
3800: LD_STRING 07_vehicles
3802: PPUSH
3803: EMPTY
3804: PPUSH
3805: CALL_OW 30
3809: ST_TO_ADDR
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// uc_nation = 1 ;
3818: LD_ADDR_OWVAR 21
3822: PUSH
3823: LD_INT 1
3825: ST_TO_ADDR
// if vehicles > 0 then
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 0
3833: GREATER
3834: IFFALSE 3973
// begin for i = 1 to vehicles do
3836: LD_ADDR_VAR 0 2
3840: PUSH
3841: DOUBLE
3842: LD_INT 1
3844: DEC
3845: ST_TO_ADDR
3846: LD_VAR 0 4
3850: PUSH
3851: FOR_TO
3852: IFFALSE 3971
// begin vc_chassis = vehicles [ i ] ;
3854: LD_ADDR_OWVAR 37
3858: PUSH
3859: LD_VAR 0 4
3863: PUSH
3864: LD_VAR 0 2
3868: ARRAY
3869: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3870: LD_ADDR_OWVAR 39
3874: PUSH
3875: LD_VAR 0 4
3879: PUSH
3880: LD_VAR 0 2
3884: PUSH
3885: LD_INT 1
3887: PLUS
3888: ARRAY
3889: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3890: LD_ADDR_OWVAR 38
3894: PUSH
3895: LD_VAR 0 4
3899: PUSH
3900: LD_VAR 0 2
3904: PUSH
3905: LD_INT 2
3907: PLUS
3908: ARRAY
3909: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3910: LD_ADDR_OWVAR 40
3914: PUSH
3915: LD_VAR 0 4
3919: PUSH
3920: LD_VAR 0 2
3924: PUSH
3925: LD_INT 3
3927: PLUS
3928: ARRAY
3929: ST_TO_ADDR
// veh = CreateVehicle ;
3930: LD_ADDR_VAR 0 5
3934: PUSH
3935: CALL_OW 45
3939: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_INT 4
3947: PPUSH
3948: LD_INT 0
3950: PPUSH
3951: CALL_OW 49
// i = i + 3 ;
3955: LD_ADDR_VAR 0 2
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_INT 3
3967: PLUS
3968: ST_TO_ADDR
// end ;
3969: GO 3851
3971: POP
3972: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3973: LD_ADDR_EXP 1
3977: PUSH
3978: LD_EXP 43
3982: PUSH
3983: LD_STRING JMM
3985: STR
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: CALL 6606 0 2
3994: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3995: LD_EXP 12
3999: PUSH
4000: LD_INT 1
4002: EQUAL
4003: PUSH
4004: LD_EXP 12
4008: PUSH
4009: LD_INT 3
4011: EQUAL
4012: OR
4013: PUSH
4014: LD_EXP 2
4018: NOT
4019: AND
4020: IFFALSE 4044
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4022: LD_ADDR_EXP 2
4026: PUSH
4027: LD_EXP 43
4031: PUSH
4032: LD_STRING Brown
4034: STR
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: CALL 6606 0 2
4043: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4044: LD_EXP 12
4048: PUSH
4049: LD_INT 2
4051: EQUAL
4052: PUSH
4053: LD_EXP 12
4057: PUSH
4058: LD_INT 3
4060: EQUAL
4061: OR
4062: PUSH
4063: LD_EXP 3
4067: NOT
4068: AND
4069: IFFALSE 4093
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4071: LD_ADDR_EXP 3
4075: PUSH
4076: LD_EXP 43
4080: PUSH
4081: LD_STRING Donaldson
4083: STR
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL 6606 0 2
4092: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4093: LD_EXP 2
4097: PUSH
4098: LD_EXP 12
4102: PUSH
4103: LD_INT 2
4105: NONEQUAL
4106: AND
4107: IFFALSE 4124
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4109: LD_EXP 2
4113: PPUSH
4114: LD_INT 4
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4124: LD_EXP 3
4128: PUSH
4129: LD_EXP 12
4133: PUSH
4134: LD_INT 1
4136: NONEQUAL
4137: AND
4138: IFFALSE 4155
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4140: LD_EXP 3
4144: PPUSH
4145: LD_INT 4
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4155: LD_ADDR_VAR 0 5
4159: PUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_INT 22
4165: PUSH
4166: LD_INT 1
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 21
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 58
4185: PUSH
4186: EMPTY
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: PPUSH
4194: CALL_OW 70
4198: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4199: LD_ADDR_EXP 1
4203: PUSH
4204: LD_EXP 43
4208: PUSH
4209: LD_STRING JMM
4211: STR
4212: PPUSH
4213: LD_INT 1
4215: PPUSH
4216: CALL 6606 0 2
4220: ST_TO_ADDR
// if veh > 0 then
4221: LD_VAR 0 5
4225: PUSH
4226: LD_INT 0
4228: GREATER
4229: IFFALSE 4251
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4231: LD_EXP 1
4235: PPUSH
4236: LD_VAR 0 5
4240: PUSH
4241: LD_INT 1
4243: ARRAY
4244: PPUSH
4245: CALL_OW 52
// end else
4249: GO 4266
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4251: LD_EXP 1
4255: PPUSH
4256: LD_INT 4
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4266: LD_ADDR_VAR 0 5
4270: PUSH
4271: LD_INT 4
4273: PPUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 1
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 21
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 58
4296: PUSH
4297: EMPTY
4298: LIST
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PPUSH
4305: CALL_OW 70
4309: ST_TO_ADDR
// if not Bobby then
4310: LD_EXP 4
4314: NOT
4315: IFFALSE 4384
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4317: LD_ADDR_EXP 4
4321: PUSH
4322: LD_EXP 43
4326: PUSH
4327: LD_STRING Bobby
4329: STR
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: CALL 6606 0 2
4338: ST_TO_ADDR
// if veh > 0 then
4339: LD_VAR 0 5
4343: PUSH
4344: LD_INT 0
4346: GREATER
4347: IFFALSE 4369
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4349: LD_EXP 4
4353: PPUSH
4354: LD_VAR 0 5
4358: PUSH
4359: LD_INT 1
4361: ARRAY
4362: PPUSH
4363: CALL_OW 52
// end else
4367: GO 4384
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4369: LD_EXP 4
4373: PPUSH
4374: LD_INT 4
4376: PPUSH
4377: LD_INT 0
4379: PPUSH
4380: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4384: LD_ADDR_VAR 0 5
4388: PUSH
4389: LD_INT 4
4391: PPUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 21
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 58
4414: PUSH
4415: EMPTY
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 70
4427: ST_TO_ADDR
// if not Cyrus then
4428: LD_EXP 5
4432: NOT
4433: IFFALSE 4502
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4435: LD_ADDR_EXP 5
4439: PUSH
4440: LD_EXP 43
4444: PUSH
4445: LD_STRING Cyrus
4447: STR
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: CALL 6606 0 2
4456: ST_TO_ADDR
// if veh > 0 then
4457: LD_VAR 0 5
4461: PUSH
4462: LD_INT 0
4464: GREATER
4465: IFFALSE 4487
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4467: LD_EXP 5
4471: PPUSH
4472: LD_VAR 0 5
4476: PUSH
4477: LD_INT 1
4479: ARRAY
4480: PPUSH
4481: CALL_OW 52
// end else
4485: GO 4502
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4487: LD_EXP 5
4491: PPUSH
4492: LD_INT 4
4494: PPUSH
4495: LD_INT 0
4497: PPUSH
4498: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4502: LD_ADDR_VAR 0 5
4506: PUSH
4507: LD_INT 4
4509: PPUSH
4510: LD_INT 22
4512: PUSH
4513: LD_INT 1
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 21
4522: PUSH
4523: LD_INT 2
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 58
4532: PUSH
4533: EMPTY
4534: LIST
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: PPUSH
4541: CALL_OW 70
4545: ST_TO_ADDR
// if not Lisa then
4546: LD_EXP 6
4550: NOT
4551: IFFALSE 4620
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4553: LD_ADDR_EXP 6
4557: PUSH
4558: LD_EXP 43
4562: PUSH
4563: LD_STRING Lisa
4565: STR
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: CALL 6606 0 2
4574: ST_TO_ADDR
// if veh > 0 then
4575: LD_VAR 0 5
4579: PUSH
4580: LD_INT 0
4582: GREATER
4583: IFFALSE 4605
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4585: LD_EXP 6
4589: PPUSH
4590: LD_VAR 0 5
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 52
// end else
4603: GO 4620
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4605: LD_EXP 6
4609: PPUSH
4610: LD_INT 4
4612: PPUSH
4613: LD_INT 0
4615: PPUSH
4616: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4620: LD_ADDR_VAR 0 5
4624: PUSH
4625: LD_INT 4
4627: PPUSH
4628: LD_INT 22
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 21
4640: PUSH
4641: LD_INT 2
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 58
4650: PUSH
4651: EMPTY
4652: LIST
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: PPUSH
4659: CALL_OW 70
4663: ST_TO_ADDR
// if not Frank then
4664: LD_EXP 7
4668: NOT
4669: IFFALSE 4738
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4671: LD_ADDR_EXP 7
4675: PUSH
4676: LD_EXP 43
4680: PUSH
4681: LD_STRING Frank
4683: STR
4684: PPUSH
4685: LD_INT 1
4687: PPUSH
4688: CALL 6606 0 2
4692: ST_TO_ADDR
// if veh > 0 then
4693: LD_VAR 0 5
4697: PUSH
4698: LD_INT 0
4700: GREATER
4701: IFFALSE 4723
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4703: LD_EXP 7
4707: PPUSH
4708: LD_VAR 0 5
4712: PUSH
4713: LD_INT 1
4715: ARRAY
4716: PPUSH
4717: CALL_OW 52
// end else
4721: GO 4738
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4723: LD_EXP 7
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4738: LD_ADDR_VAR 0 5
4742: PUSH
4743: LD_INT 4
4745: PPUSH
4746: LD_INT 22
4748: PUSH
4749: LD_INT 1
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 21
4758: PUSH
4759: LD_INT 2
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 58
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 70
4781: ST_TO_ADDR
// if not Gladstone then
4782: LD_EXP 8
4786: NOT
4787: IFFALSE 4856
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4789: LD_ADDR_EXP 8
4793: PUSH
4794: LD_EXP 43
4798: PUSH
4799: LD_STRING Gladstone
4801: STR
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: CALL 6606 0 2
4810: ST_TO_ADDR
// if veh > 0 then
4811: LD_VAR 0 5
4815: PUSH
4816: LD_INT 0
4818: GREATER
4819: IFFALSE 4841
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4821: LD_EXP 8
4825: PPUSH
4826: LD_VAR 0 5
4830: PUSH
4831: LD_INT 1
4833: ARRAY
4834: PPUSH
4835: CALL_OW 52
// end else
4839: GO 4856
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4841: LD_EXP 8
4845: PPUSH
4846: LD_INT 4
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4856: LD_ADDR_VAR 0 5
4860: PUSH
4861: LD_INT 4
4863: PPUSH
4864: LD_INT 22
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 21
4876: PUSH
4877: LD_INT 2
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 58
4886: PUSH
4887: EMPTY
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 70
4899: ST_TO_ADDR
// if not Kikuchi then
4900: LD_EXP 9
4904: NOT
4905: IFFALSE 4974
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4907: LD_ADDR_EXP 9
4911: PUSH
4912: LD_EXP 43
4916: PUSH
4917: LD_STRING Kikuchi
4919: STR
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: CALL 6606 0 2
4928: ST_TO_ADDR
// if veh > 0 then
4929: LD_VAR 0 5
4933: PUSH
4934: LD_INT 0
4936: GREATER
4937: IFFALSE 4959
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4939: LD_EXP 9
4943: PPUSH
4944: LD_VAR 0 5
4948: PUSH
4949: LD_INT 1
4951: ARRAY
4952: PPUSH
4953: CALL_OW 52
// end else
4957: GO 4974
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4959: LD_EXP 9
4963: PPUSH
4964: LD_INT 4
4966: PPUSH
4967: LD_INT 0
4969: PPUSH
4970: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4974: LD_ADDR_VAR 0 5
4978: PUSH
4979: LD_INT 4
4981: PPUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 21
4994: PUSH
4995: LD_INT 2
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 58
5004: PUSH
5005: EMPTY
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 70
5017: ST_TO_ADDR
// if not Khatam then
5018: LD_EXP 10
5022: NOT
5023: IFFALSE 5092
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5025: LD_ADDR_EXP 10
5029: PUSH
5030: LD_EXP 43
5034: PUSH
5035: LD_STRING Khatam
5037: STR
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: CALL 6606 0 2
5046: ST_TO_ADDR
// if veh > 0 then
5047: LD_VAR 0 5
5051: PUSH
5052: LD_INT 0
5054: GREATER
5055: IFFALSE 5077
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5057: LD_EXP 10
5061: PPUSH
5062: LD_VAR 0 5
5066: PUSH
5067: LD_INT 1
5069: ARRAY
5070: PPUSH
5071: CALL_OW 52
// end else
5075: GO 5092
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5077: LD_EXP 10
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: CALL_OW 49
// end ; end ; other = CreateCharacterSet ( 07c_others ) ;
5092: LD_ADDR_VAR 0 3
5096: PUSH
5097: LD_STRING 07c_others
5099: PPUSH
5100: CALL_OW 31
5104: ST_TO_ADDR
// for i in other do
5105: LD_ADDR_VAR 0 2
5109: PUSH
5110: LD_VAR 0 3
5114: PUSH
5115: FOR_IN
5116: IFFALSE 5209
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5118: LD_ADDR_VAR 0 5
5122: PUSH
5123: LD_INT 4
5125: PPUSH
5126: LD_INT 22
5128: PUSH
5129: LD_INT 1
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: LD_INT 21
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 58
5148: PUSH
5149: EMPTY
5150: LIST
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: PPUSH
5157: CALL_OW 70
5161: ST_TO_ADDR
// if veh > 0 then
5162: LD_VAR 0 5
5166: PUSH
5167: LD_INT 0
5169: GREATER
5170: IFFALSE 5192
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5172: LD_VAR 0 2
5176: PPUSH
5177: LD_VAR 0 5
5181: PUSH
5182: LD_INT 1
5184: ARRAY
5185: PPUSH
5186: CALL_OW 52
// end else
5190: GO 5207
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5192: LD_VAR 0 2
5196: PPUSH
5197: LD_INT 4
5199: PPUSH
5200: LD_INT 0
5202: PPUSH
5203: CALL_OW 49
// end ; end ;
5207: GO 5115
5209: POP
5210: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5211: LD_INT 4
5213: PPUSH
5214: LD_INT 22
5216: PUSH
5217: LD_INT 1
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: EMPTY
5225: LIST
5226: PPUSH
5227: CALL_OW 70
5231: PPUSH
5232: LD_INT 53
5234: PPUSH
5235: LD_INT 19
5237: PPUSH
5238: CALL_OW 111
// end ;
5242: LD_VAR 0 1
5246: RET
// export function PrepareSikorsky ; begin
5247: LD_INT 0
5249: PPUSH
// uc_side = 4 ;
5250: LD_ADDR_OWVAR 20
5254: PUSH
5255: LD_INT 4
5257: ST_TO_ADDR
// uc_nation = 1 ;
5258: LD_ADDR_OWVAR 21
5262: PUSH
5263: LD_INT 1
5265: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5266: LD_ADDR_EXP 16
5270: PUSH
5271: LD_STRING Sikorski
5273: PPUSH
5274: LD_INT 0
5276: PPUSH
5277: CALL 6606 0 2
5281: ST_TO_ADDR
// vc_engine = 1 ;
5282: LD_ADDR_OWVAR 39
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_control = 1 ;
5290: LD_ADDR_OWVAR 38
5294: PUSH
5295: LD_INT 1
5297: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5298: LD_ADDR_OWVAR 40
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: LD_INT 4
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_OWVAR 67
5321: ARRAY
5322: ST_TO_ADDR
// vc_chassis = 4 ;
5323: LD_ADDR_OWVAR 37
5327: PUSH
5328: LD_INT 4
5330: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5331: LD_ADDR_EXP 17
5335: PUSH
5336: CALL_OW 45
5340: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5341: LD_EXP 17
5345: PPUSH
5346: LD_INT 9
5348: PPUSH
5349: LD_INT 0
5351: PPUSH
5352: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5356: LD_EXP 16
5360: PPUSH
5361: LD_EXP 17
5365: PPUSH
5366: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5370: LD_EXP 17
5374: PPUSH
5375: LD_INT 5
5377: PPUSH
5378: CALL_OW 113
// end ;
5382: LD_VAR 0 1
5386: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5387: LD_INT 0
5389: PPUSH
5390: PPUSH
5391: PPUSH
5392: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5393: LD_ADDR_VAR 0 2
5397: PUSH
5398: DOUBLE
5399: LD_INT 1
5401: DEC
5402: ST_TO_ADDR
5403: LD_INT 8
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 7
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: PUSH
5417: LD_OWVAR 67
5421: ARRAY
5422: PUSH
5423: FOR_TO
5424: IFFALSE 5521
// begin uc_side = 4 ;
5426: LD_ADDR_OWVAR 20
5430: PUSH
5431: LD_INT 4
5433: ST_TO_ADDR
// uc_nation = 1 ;
5434: LD_ADDR_OWVAR 21
5438: PUSH
5439: LD_INT 1
5441: ST_TO_ADDR
// hc_name =  ;
5442: LD_ADDR_OWVAR 26
5446: PUSH
5447: LD_STRING 
5449: ST_TO_ADDR
// hc_gallery =  ;
5450: LD_ADDR_OWVAR 33
5454: PUSH
5455: LD_STRING 
5457: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5458: LD_INT 0
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: LD_INT 5
5466: PPUSH
5467: LD_INT 8
5469: PPUSH
5470: CALL_OW 12
5474: PPUSH
5475: CALL_OW 380
// un = CreateHuman ;
5479: LD_ADDR_VAR 0 3
5483: PUSH
5484: CALL_OW 44
5488: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5489: LD_VAR 0 3
5493: PPUSH
5494: LD_INT 9
5496: PPUSH
5497: LD_INT 0
5499: PPUSH
5500: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5504: LD_VAR 0 3
5508: PPUSH
5509: LD_INT 53
5511: PPUSH
5512: LD_INT 23
5514: PPUSH
5515: CALL_OW 111
// end ;
5519: GO 5423
5521: POP
5522: POP
// for i = 1 to 3 do
5523: LD_ADDR_VAR 0 2
5527: PUSH
5528: DOUBLE
5529: LD_INT 1
5531: DEC
5532: ST_TO_ADDR
5533: LD_INT 3
5535: PUSH
5536: FOR_TO
5537: IFFALSE 5634
// begin uc_side = 4 ;
5539: LD_ADDR_OWVAR 20
5543: PUSH
5544: LD_INT 4
5546: ST_TO_ADDR
// uc_nation = 1 ;
5547: LD_ADDR_OWVAR 21
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// hc_name =  ;
5555: LD_ADDR_OWVAR 26
5559: PUSH
5560: LD_STRING 
5562: ST_TO_ADDR
// hc_gallery =  ;
5563: LD_ADDR_OWVAR 33
5567: PUSH
5568: LD_STRING 
5570: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5571: LD_INT 0
5573: PPUSH
5574: LD_INT 4
5576: PPUSH
5577: LD_INT 5
5579: PPUSH
5580: LD_INT 8
5582: PPUSH
5583: CALL_OW 12
5587: PPUSH
5588: CALL_OW 380
// un = CreateHuman ;
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: CALL_OW 44
5601: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5602: LD_VAR 0 3
5606: PPUSH
5607: LD_INT 9
5609: PPUSH
5610: LD_INT 0
5612: PPUSH
5613: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5617: LD_VAR 0 3
5621: PPUSH
5622: LD_INT 53
5624: PPUSH
5625: LD_INT 23
5627: PPUSH
5628: CALL_OW 111
// end ;
5632: GO 5536
5634: POP
5635: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5636: LD_ADDR_VAR 0 2
5640: PUSH
5641: DOUBLE
5642: LD_INT 1
5644: DEC
5645: ST_TO_ADDR
5646: LD_INT 9
5648: PUSH
5649: LD_INT 8
5651: PUSH
5652: LD_INT 7
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: PUSH
5660: LD_OWVAR 67
5664: ARRAY
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5863
// begin uc_side = 4 ;
5669: LD_ADDR_OWVAR 20
5673: PUSH
5674: LD_INT 4
5676: ST_TO_ADDR
// uc_nation = 1 ;
5677: LD_ADDR_OWVAR 21
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// vc_engine = 1 ;
5685: LD_ADDR_OWVAR 39
5689: PUSH
5690: LD_INT 1
5692: ST_TO_ADDR
// vc_control = 1 ;
5693: LD_ADDR_OWVAR 38
5697: PUSH
5698: LD_INT 1
5700: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5701: LD_ADDR_OWVAR 40
5705: PUSH
5706: LD_INT 3
5708: PUSH
5709: LD_INT 4
5711: PUSH
5712: LD_INT 5
5714: PUSH
5715: LD_INT 6
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 4
5729: PPUSH
5730: CALL_OW 12
5734: ARRAY
5735: ST_TO_ADDR
// vc_chassis = 4 ;
5736: LD_ADDR_OWVAR 37
5740: PUSH
5741: LD_INT 4
5743: ST_TO_ADDR
// veh = CreateVehicle ;
5744: LD_ADDR_VAR 0 4
5748: PUSH
5749: CALL_OW 45
5753: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5754: LD_VAR 0 4
5758: PPUSH
5759: LD_INT 9
5761: PPUSH
5762: LD_INT 0
5764: PPUSH
5765: CALL_OW 49
// hc_name =  ;
5769: LD_ADDR_OWVAR 26
5773: PUSH
5774: LD_STRING 
5776: ST_TO_ADDR
// hc_gallery =  ;
5777: LD_ADDR_OWVAR 33
5781: PUSH
5782: LD_STRING 
5784: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5785: LD_INT 0
5787: PPUSH
5788: LD_INT 3
5790: PPUSH
5791: LD_INT 5
5793: PPUSH
5794: LD_INT 8
5796: PPUSH
5797: CALL_OW 12
5801: PPUSH
5802: CALL_OW 380
// un = CreateHuman ;
5806: LD_ADDR_VAR 0 3
5810: PUSH
5811: CALL_OW 44
5815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5816: LD_VAR 0 3
5820: PPUSH
5821: LD_VAR 0 4
5825: PPUSH
5826: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5830: LD_VAR 0 4
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PPUSH
5844: LD_INT 53
5846: PPUSH
5847: LD_INT 23
5849: PPUSH
5850: CALL_OW 111
// wait ( 0 0$5 ) ;
5854: LD_INT 175
5856: PPUSH
5857: CALL_OW 67
// end ;
5861: GO 5666
5863: POP
5864: POP
// end ; end_of_file
5865: LD_VAR 0 1
5869: RET
// export function PrepareRussianCommander ; begin
5870: LD_INT 0
5872: PPUSH
// uc_side = 3 ;
5873: LD_ADDR_OWVAR 20
5877: PUSH
5878: LD_INT 3
5880: ST_TO_ADDR
// uc_nation = 3 ;
5881: LD_ADDR_OWVAR 21
5885: PUSH
5886: LD_INT 3
5888: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5889: LD_ADDR_EXP 24
5893: PUSH
5894: LD_STRING Borodin
5896: PPUSH
5897: CALL_OW 25
5901: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5902: LD_EXP 24
5906: PPUSH
5907: LD_INT 25
5909: PPUSH
5910: LD_INT 0
5912: PPUSH
5913: CALL_OW 49
// end ;
5917: LD_VAR 0 1
5921: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5922: LD_INT 0
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
// for i = 1 to 10 do
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_INT 10
5940: PUSH
5941: FOR_TO
5942: IFFALSE 6016
// begin uc_side = 6 ;
5944: LD_ADDR_OWVAR 20
5948: PUSH
5949: LD_INT 6
5951: ST_TO_ADDR
// uc_nation = 3 ;
5952: LD_ADDR_OWVAR 21
5956: PUSH
5957: LD_INT 3
5959: ST_TO_ADDR
// hc_gallery =  ;
5960: LD_ADDR_OWVAR 33
5964: PUSH
5965: LD_STRING 
5967: ST_TO_ADDR
// hc_name =  ;
5968: LD_ADDR_OWVAR 26
5972: PUSH
5973: LD_STRING 
5975: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5976: LD_INT 0
5978: PPUSH
5979: LD_INT 1
5981: PPUSH
5982: LD_INT 3
5984: PPUSH
5985: CALL_OW 380
// un = CreateHuman ;
5989: LD_ADDR_VAR 0 3
5993: PUSH
5994: CALL_OW 44
5998: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5999: LD_VAR 0 3
6003: PPUSH
6004: LD_INT 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 49
// end ;
6014: GO 5941
6016: POP
6017: POP
// for i = 1 to 3 do
6018: LD_ADDR_VAR 0 2
6022: PUSH
6023: DOUBLE
6024: LD_INT 1
6026: DEC
6027: ST_TO_ADDR
6028: LD_INT 3
6030: PUSH
6031: FOR_TO
6032: IFFALSE 6181
// begin uc_side = 6 ;
6034: LD_ADDR_OWVAR 20
6038: PUSH
6039: LD_INT 6
6041: ST_TO_ADDR
// uc_nation = 3 ;
6042: LD_ADDR_OWVAR 21
6046: PUSH
6047: LD_INT 3
6049: ST_TO_ADDR
// vc_engine = 1 ;
6050: LD_ADDR_OWVAR 39
6054: PUSH
6055: LD_INT 1
6057: ST_TO_ADDR
// vc_control = 1 ;
6058: LD_ADDR_OWVAR 38
6062: PUSH
6063: LD_INT 1
6065: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6066: LD_ADDR_OWVAR 40
6070: PUSH
6071: LD_INT 43
6073: PUSH
6074: LD_INT 44
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 1
6083: PPUSH
6084: LD_INT 2
6086: PPUSH
6087: CALL_OW 12
6091: ARRAY
6092: ST_TO_ADDR
// vc_chassis = 22 ;
6093: LD_ADDR_OWVAR 37
6097: PUSH
6098: LD_INT 22
6100: ST_TO_ADDR
// veh = CreateVehicle ;
6101: LD_ADDR_VAR 0 4
6105: PUSH
6106: CALL_OW 45
6110: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6111: LD_VAR 0 4
6115: PPUSH
6116: LD_INT 2
6118: PPUSH
6119: LD_INT 0
6121: PPUSH
6122: CALL_OW 49
// hc_gallery =  ;
6126: LD_ADDR_OWVAR 33
6130: PUSH
6131: LD_STRING 
6133: ST_TO_ADDR
// hc_name =  ;
6134: LD_ADDR_OWVAR 26
6138: PUSH
6139: LD_STRING 
6141: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6142: LD_INT 0
6144: PPUSH
6145: LD_INT 3
6147: PPUSH
6148: LD_INT 4
6150: PPUSH
6151: CALL_OW 380
// un = CreateHuman ;
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: CALL_OW 44
6164: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6165: LD_VAR 0 3
6169: PPUSH
6170: LD_VAR 0 4
6174: PPUSH
6175: CALL_OW 52
// end ;
6179: GO 6031
6181: POP
6182: POP
// end ;
6183: LD_VAR 0 1
6187: RET
// export function PrepareRussians ; var i , un ; begin
6188: LD_INT 0
6190: PPUSH
6191: PPUSH
6192: PPUSH
// for i = 1 to 14 do
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: DOUBLE
6199: LD_INT 1
6201: DEC
6202: ST_TO_ADDR
6203: LD_INT 14
6205: PUSH
6206: FOR_TO
6207: IFFALSE 6293
// begin uc_side = 3 ;
6209: LD_ADDR_OWVAR 20
6213: PUSH
6214: LD_INT 3
6216: ST_TO_ADDR
// uc_nation = 3 ;
6217: LD_ADDR_OWVAR 21
6221: PUSH
6222: LD_INT 3
6224: ST_TO_ADDR
// hc_gallery =  ;
6225: LD_ADDR_OWVAR 33
6229: PUSH
6230: LD_STRING 
6232: ST_TO_ADDR
// hc_name =  ;
6233: LD_ADDR_OWVAR 26
6237: PUSH
6238: LD_STRING 
6240: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6241: LD_INT 0
6243: PPUSH
6244: LD_INT 1
6246: PPUSH
6247: LD_EXP 25
6251: PPUSH
6252: LD_EXP 26
6256: PPUSH
6257: CALL_OW 12
6261: PPUSH
6262: CALL_OW 380
// un = CreateHuman ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: CALL_OW 44
6275: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6276: LD_VAR 0 3
6280: PPUSH
6281: LD_INT 3
6283: PPUSH
6284: LD_INT 0
6286: PPUSH
6287: CALL_OW 49
// end ;
6291: GO 6206
6293: POP
6294: POP
// for i = 1 to 6 do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 6
6307: PUSH
6308: FOR_TO
6309: IFFALSE 6395
// begin uc_side = 3 ;
6311: LD_ADDR_OWVAR 20
6315: PUSH
6316: LD_INT 3
6318: ST_TO_ADDR
// uc_nation = 3 ;
6319: LD_ADDR_OWVAR 21
6323: PUSH
6324: LD_INT 3
6326: ST_TO_ADDR
// hc_gallery =  ;
6327: LD_ADDR_OWVAR 33
6331: PUSH
6332: LD_STRING 
6334: ST_TO_ADDR
// hc_name =  ;
6335: LD_ADDR_OWVAR 26
6339: PUSH
6340: LD_STRING 
6342: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6343: LD_INT 0
6345: PPUSH
6346: LD_INT 2
6348: PPUSH
6349: LD_EXP 25
6353: PPUSH
6354: LD_EXP 26
6358: PPUSH
6359: CALL_OW 12
6363: PPUSH
6364: CALL_OW 380
// un = CreateHuman ;
6368: LD_ADDR_VAR 0 3
6372: PUSH
6373: CALL_OW 44
6377: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_INT 3
6385: PPUSH
6386: LD_INT 0
6388: PPUSH
6389: CALL_OW 49
// end ;
6393: GO 6308
6395: POP
6396: POP
// for i = 1 to 6 do
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: DOUBLE
6403: LD_INT 1
6405: DEC
6406: ST_TO_ADDR
6407: LD_INT 6
6409: PUSH
6410: FOR_TO
6411: IFFALSE 6497
// begin uc_side = 3 ;
6413: LD_ADDR_OWVAR 20
6417: PUSH
6418: LD_INT 3
6420: ST_TO_ADDR
// uc_nation = 3 ;
6421: LD_ADDR_OWVAR 21
6425: PUSH
6426: LD_INT 3
6428: ST_TO_ADDR
// hc_gallery =  ;
6429: LD_ADDR_OWVAR 33
6433: PUSH
6434: LD_STRING 
6436: ST_TO_ADDR
// hc_name =  ;
6437: LD_ADDR_OWVAR 26
6441: PUSH
6442: LD_STRING 
6444: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6445: LD_INT 0
6447: PPUSH
6448: LD_INT 3
6450: PPUSH
6451: LD_EXP 25
6455: PPUSH
6456: LD_EXP 26
6460: PPUSH
6461: CALL_OW 12
6465: PPUSH
6466: CALL_OW 380
// un = CreateHuman ;
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: CALL_OW 44
6479: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6480: LD_VAR 0 3
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: LD_INT 0
6490: PPUSH
6491: CALL_OW 49
// end ;
6495: GO 6410
6497: POP
6498: POP
// for i = 1 to 4 do
6499: LD_ADDR_VAR 0 2
6503: PUSH
6504: DOUBLE
6505: LD_INT 1
6507: DEC
6508: ST_TO_ADDR
6509: LD_INT 4
6511: PUSH
6512: FOR_TO
6513: IFFALSE 6599
// begin uc_side = 3 ;
6515: LD_ADDR_OWVAR 20
6519: PUSH
6520: LD_INT 3
6522: ST_TO_ADDR
// uc_nation = 3 ;
6523: LD_ADDR_OWVAR 21
6527: PUSH
6528: LD_INT 3
6530: ST_TO_ADDR
// hc_gallery =  ;
6531: LD_ADDR_OWVAR 33
6535: PUSH
6536: LD_STRING 
6538: ST_TO_ADDR
// hc_name =  ;
6539: LD_ADDR_OWVAR 26
6543: PUSH
6544: LD_STRING 
6546: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6547: LD_INT 0
6549: PPUSH
6550: LD_INT 4
6552: PPUSH
6553: LD_EXP 25
6557: PPUSH
6558: LD_EXP 26
6562: PPUSH
6563: CALL_OW 12
6567: PPUSH
6568: CALL_OW 380
// un = CreateHuman ;
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: CALL_OW 44
6581: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_INT 3
6589: PPUSH
6590: LD_INT 0
6592: PPUSH
6593: CALL_OW 49
// end ;
6597: GO 6512
6599: POP
6600: POP
// end ; end_of_file
6601: LD_VAR 0 1
6605: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6606: LD_INT 0
6608: PPUSH
6609: PPUSH
// if exist_mode then
6610: LD_VAR 0 2
6614: IFFALSE 6633
// unit := CreateCharacter ( ident ) else
6616: LD_ADDR_VAR 0 4
6620: PUSH
6621: LD_VAR 0 1
6625: PPUSH
6626: CALL_OW 34
6630: ST_TO_ADDR
6631: GO 6648
// unit := NewCharacter ( ident ) ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_VAR 0 1
6642: PPUSH
6643: CALL_OW 25
6647: ST_TO_ADDR
// result := unit ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_VAR 0 4
6657: ST_TO_ADDR
// end ;
6658: LD_VAR 0 3
6662: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6663: LD_INT 0
6665: PPUSH
6666: PPUSH
6667: PPUSH
// rnd = rand ( 1 , characters ) ;
6668: LD_ADDR_VAR 0 6
6672: PUSH
6673: LD_INT 1
6675: PPUSH
6676: LD_VAR 0 1
6680: PPUSH
6681: CALL_OW 12
6685: ST_TO_ADDR
// for i = 1 to characters do
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: DOUBLE
6692: LD_INT 1
6694: DEC
6695: ST_TO_ADDR
6696: LD_VAR 0 1
6700: PUSH
6701: FOR_TO
6702: IFFALSE 6812
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6704: LD_VAR 0 5
6708: PUSH
6709: LD_VAR 0 6
6713: EQUAL
6714: PUSH
6715: LD_VAR 0 1
6719: PUSH
6720: LD_VAR 0 5
6724: ARRAY
6725: PPUSH
6726: CALL_OW 258
6730: PUSH
6731: LD_INT 1
6733: EQUAL
6734: AND
6735: IFFALSE 6757
// Say ( characters [ i ] , dialogMID ) ;
6737: LD_VAR 0 1
6741: PUSH
6742: LD_VAR 0 5
6746: ARRAY
6747: PPUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6757: LD_VAR 0 5
6761: PUSH
6762: LD_VAR 0 6
6766: EQUAL
6767: PUSH
6768: LD_VAR 0 1
6772: PUSH
6773: LD_VAR 0 5
6777: ARRAY
6778: PPUSH
6779: CALL_OW 258
6783: PUSH
6784: LD_INT 2
6786: EQUAL
6787: AND
6788: IFFALSE 6810
// Say ( characters [ i ] , dialogFID ) ;
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 5
6799: ARRAY
6800: PPUSH
6801: LD_VAR 0 3
6805: PPUSH
6806: CALL_OW 88
// end ;
6810: GO 6701
6812: POP
6813: POP
// end ;
6814: LD_VAR 0 4
6818: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
6823: PPUSH
// uc_side := GetSide ( b ) ;
6824: LD_ADDR_OWVAR 20
6828: PUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 255
6838: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6839: LD_ADDR_OWVAR 21
6843: PUSH
6844: LD_VAR 0 2
6848: PPUSH
6849: CALL_OW 248
6853: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6854: LD_INT 0
6856: PPUSH
6857: LD_INT 1
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6869: LD_ADDR_VAR 0 5
6873: PUSH
6874: LD_VAR 0 2
6878: PPUSH
6879: CALL_OW 254
6883: PUSH
6884: LD_INT 3
6886: MINUS
6887: ST_TO_ADDR
// if dir < 0 then
6888: LD_VAR 0 5
6892: PUSH
6893: LD_INT 0
6895: LESS
6896: IFFALSE 6912
// dir := 6 + dir ;
6898: LD_ADDR_VAR 0 5
6902: PUSH
6903: LD_INT 6
6905: PUSH
6906: LD_VAR 0 5
6910: PLUS
6911: ST_TO_ADDR
// un := CreateHuman ;
6912: LD_ADDR_VAR 0 4
6916: PUSH
6917: CALL_OW 44
6921: ST_TO_ADDR
// SetDir ( un , dir ) ;
6922: LD_VAR 0 4
6926: PPUSH
6927: LD_VAR 0 5
6931: PPUSH
6932: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6936: LD_VAR 0 4
6940: PPUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: CALL_OW 52
// end ;
6950: LD_VAR 0 3
6954: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6955: LD_INT 0
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
// for i = 1 to count do
6961: LD_ADDR_VAR 0 8
6965: PUSH
6966: DOUBLE
6967: LD_INT 1
6969: DEC
6970: ST_TO_ADDR
6971: LD_VAR 0 6
6975: PUSH
6976: FOR_TO
6977: IFFALSE 7058
// begin uc_side = side ;
6979: LD_ADDR_OWVAR 20
6983: PUSH
6984: LD_VAR 0 1
6988: ST_TO_ADDR
// uc_nation = nation ;
6989: LD_ADDR_OWVAR 21
6993: PUSH
6994: LD_VAR 0 2
6998: ST_TO_ADDR
// hc_gallery =  ;
6999: LD_ADDR_OWVAR 33
7003: PUSH
7004: LD_STRING 
7006: ST_TO_ADDR
// hc_name =  ;
7007: LD_ADDR_OWVAR 26
7011: PUSH
7012: LD_STRING 
7014: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_VAR 0 5
7022: PPUSH
7023: LD_VAR 0 4
7027: PPUSH
7028: CALL_OW 380
// un = CreateHuman ;
7032: LD_ADDR_VAR 0 10
7036: PUSH
7037: CALL_OW 44
7041: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7042: LD_VAR 0 10
7046: PPUSH
7047: LD_VAR 0 3
7051: PPUSH
7052: CALL_OW 52
// end ;
7056: GO 6976
7058: POP
7059: POP
// end ;
7060: LD_VAR 0 7
7064: RET
// export function PrepareDifficulty ; begin
7065: LD_INT 0
7067: PPUSH
// if Difficulty = 1 then
7068: LD_OWVAR 67
7072: PUSH
7073: LD_INT 1
7075: EQUAL
7076: IFFALSE 7094
// begin RuSolMinLevel = 4 ;
7078: LD_ADDR_EXP 25
7082: PUSH
7083: LD_INT 4
7085: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7086: LD_ADDR_EXP 26
7090: PUSH
7091: LD_INT 6
7093: ST_TO_ADDR
// end ; if Difficulty = 2 then
7094: LD_OWVAR 67
7098: PUSH
7099: LD_INT 2
7101: EQUAL
7102: IFFALSE 7172
// begin RuSolMinLevel = 5 ;
7104: LD_ADDR_EXP 25
7108: PUSH
7109: LD_INT 5
7111: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7112: LD_ADDR_EXP 26
7116: PUSH
7117: LD_INT 6
7119: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7120: LD_INT 51
7122: PPUSH
7123: LD_INT 3
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7133: LD_INT 57
7135: PPUSH
7136: LD_INT 3
7138: PPUSH
7139: LD_INT 1
7141: PPUSH
7142: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7146: LD_INT 57
7148: PPUSH
7149: LD_INT 6
7151: PPUSH
7152: LD_INT 2
7154: PPUSH
7155: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7159: LD_INT 51
7161: PPUSH
7162: LD_INT 6
7164: PPUSH
7165: LD_INT 2
7167: PPUSH
7168: CALL_OW 322
// end ; if Difficulty = 3 then
7172: LD_OWVAR 67
7176: PUSH
7177: LD_INT 3
7179: EQUAL
7180: IFFALSE 7263
// begin RuSolMinLevel = 5 ;
7182: LD_ADDR_EXP 25
7186: PUSH
7187: LD_INT 5
7189: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7190: LD_ADDR_EXP 26
7194: PUSH
7195: LD_INT 6
7197: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7198: LD_INT 57
7200: PPUSH
7201: LD_INT 3
7203: PPUSH
7204: LD_INT 1
7206: PPUSH
7207: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7211: LD_INT 51
7213: PPUSH
7214: LD_INT 3
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7224: LD_INT 52
7226: PPUSH
7227: LD_INT 3
7229: PPUSH
7230: LD_INT 1
7232: PPUSH
7233: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7237: LD_INT 57
7239: PPUSH
7240: LD_INT 6
7242: PPUSH
7243: LD_INT 2
7245: PPUSH
7246: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7250: LD_INT 52
7252: PPUSH
7253: LD_INT 6
7255: PPUSH
7256: LD_INT 2
7258: PPUSH
7259: CALL_OW 322
// end ; end ;
7263: LD_VAR 0 1
7267: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7268: LD_INT 0
7270: PPUSH
7271: PPUSH
7272: PPUSH
7273: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 22
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 25
7291: PUSH
7292: LD_INT 2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7308: LD_ADDR_VAR 0 4
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 75
7318: PUSH
7319: LD_INT 79
7321: PUSH
7322: LD_INT 2
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 4
7333: PUSH
7334: LD_INT 113
7336: PUSH
7337: LD_INT 94
7339: PUSH
7340: LD_INT 4
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 29
7351: PUSH
7352: LD_INT 106
7354: PUSH
7355: LD_INT 97
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 26
7369: PUSH
7370: LD_INT 93
7372: PUSH
7373: LD_INT 97
7375: PUSH
7376: LD_INT 5
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 100
7390: PUSH
7391: LD_INT 89
7393: PUSH
7394: LD_INT 3
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 17
7405: PUSH
7406: LD_INT 96
7408: PUSH
7409: LD_INT 89
7411: PUSH
7412: LD_INT 1
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 32
7423: PUSH
7424: LD_INT 78
7426: PUSH
7427: LD_INT 94
7429: PUSH
7430: LD_INT 1
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 32
7441: PUSH
7442: LD_INT 95
7444: PUSH
7445: LD_INT 82
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 32
7459: PUSH
7460: LD_INT 104
7462: PUSH
7463: LD_INT 85
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 32
7477: PUSH
7478: LD_INT 81
7480: PUSH
7481: LD_INT 78
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 33
7495: PUSH
7496: LD_INT 109
7498: PUSH
7499: LD_INT 90
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 33
7513: PUSH
7514: LD_INT 88
7516: PUSH
7517: LD_INT 79
7519: PUSH
7520: LD_INT 3
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 33
7531: PUSH
7532: LD_INT 76
7534: PUSH
7535: LD_INT 87
7537: PUSH
7538: LD_INT 1
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 26
7549: PUSH
7550: LD_INT 96
7552: PUSH
7553: LD_INT 97
7555: PUSH
7556: LD_INT 5
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 26
7567: PUSH
7568: LD_INT 85
7570: PUSH
7571: LD_INT 84
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 6
7585: PUSH
7586: LD_INT 88
7588: PUSH
7589: LD_INT 95
7591: PUSH
7592: LD_INT 0
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 19
7603: PUSH
7604: LD_INT 103
7606: PUSH
7607: LD_INT 89
7609: PUSH
7610: LD_INT 4
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 16
7621: PUSH
7622: LD_INT 97
7624: PUSH
7625: LD_INT 86
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 24
7639: PUSH
7640: LD_INT 100
7642: PUSH
7643: LD_INT 85
7645: PUSH
7646: LD_INT 3
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: ST_TO_ADDR
// for i := 1 to buildingsTab do
7676: LD_ADDR_VAR 0 2
7680: PUSH
7681: DOUBLE
7682: LD_INT 1
7684: DEC
7685: ST_TO_ADDR
7686: LD_VAR 0 4
7690: PUSH
7691: FOR_TO
7692: IFFALSE 7765
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7694: LD_VAR 0 3
7698: PPUSH
7699: LD_VAR 0 4
7703: PUSH
7704: LD_VAR 0 2
7708: ARRAY
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: LD_VAR 0 4
7718: PUSH
7719: LD_VAR 0 2
7723: ARRAY
7724: PUSH
7725: LD_INT 2
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 4
7733: PUSH
7734: LD_VAR 0 2
7738: ARRAY
7739: PUSH
7740: LD_INT 3
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 4
7748: PUSH
7749: LD_VAR 0 2
7753: ARRAY
7754: PUSH
7755: LD_INT 4
7757: ARRAY
7758: PPUSH
7759: CALL_OW 205
7763: GO 7691
7765: POP
7766: POP
// end ;
7767: LD_VAR 0 1
7771: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7772: LD_INT 0
7774: PPUSH
7775: PPUSH
// for i in charactersList do
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_VAR 0 1
7785: PUSH
7786: FOR_IN
7787: IFFALSE 7816
// begin if IsOk ( i ) then
7789: LD_VAR 0 4
7793: PPUSH
7794: CALL_OW 302
7798: IFFALSE 7814
// SaveCharacters ( i , ident ) ;
7800: LD_VAR 0 4
7804: PPUSH
7805: LD_VAR 0 2
7809: PPUSH
7810: CALL_OW 38
// end ;
7814: GO 7786
7816: POP
7817: POP
// end ;
7818: LD_VAR 0 3
7822: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7823: LD_INT 0
7825: PPUSH
7826: PPUSH
7827: PPUSH
7828: PPUSH
// for i = 1 to 72 do
7829: LD_ADDR_VAR 0 5
7833: PUSH
7834: DOUBLE
7835: LD_INT 1
7837: DEC
7838: ST_TO_ADDR
7839: LD_INT 72
7841: PUSH
7842: FOR_TO
7843: IFFALSE 7901
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7845: LD_VAR 0 5
7849: PPUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 321
7859: PUSH
7860: LD_INT 1
7862: EQUAL
7863: PUSH
7864: LD_VAR 0 5
7868: PPUSH
7869: LD_VAR 0 3
7873: PPUSH
7874: CALL_OW 482
7878: PUSH
7879: LD_INT 1
7881: EQUAL
7882: AND
7883: IFFALSE 7899
// AddComResearch ( lab , i ) ;
7885: LD_VAR 0 2
7889: PPUSH
7890: LD_VAR 0 5
7894: PPUSH
7895: CALL_OW 184
7899: GO 7842
7901: POP
7902: POP
// end ;
7903: LD_VAR 0 4
7907: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7908: LD_INT 0
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7918: LD_ADDR_VAR 0 6
7922: PUSH
7923: LD_VAR 0 2
7927: PPUSH
7928: LD_INT 22
7930: PUSH
7931: LD_VAR 0 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 56
7942: PUSH
7943: EMPTY
7944: LIST
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 700
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: LD_INT 60
7961: PUSH
7962: EMPTY
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: LD_INT 25
7974: PUSH
7975: LD_INT 1
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 25
7984: PUSH
7985: LD_INT 5
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 25
7994: PUSH
7995: LD_INT 8
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 9
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: PPUSH
8026: CALL_OW 70
8030: PUSH
8031: LD_EXP 24
8035: PUSH
8036: EMPTY
8037: LIST
8038: DIFF
8039: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8040: LD_ADDR_VAR 0 7
8044: PUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_INT 22
8052: PUSH
8053: LD_VAR 0 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 30
8064: PUSH
8065: LD_INT 32
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 58
8074: PUSH
8075: EMPTY
8076: LIST
8077: PUSH
8078: LD_INT 24
8080: PUSH
8081: LD_INT 251
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PPUSH
8094: CALL_OW 70
8098: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8099: LD_ADDR_VAR 0 9
8103: PUSH
8104: LD_VAR 0 2
8108: PPUSH
8109: LD_INT 22
8111: PUSH
8112: LD_VAR 0 1
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 2
8123: PUSH
8124: LD_INT 30
8126: PUSH
8127: LD_INT 4
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 30
8136: PUSH
8137: LD_INT 5
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: LD_INT 24
8151: PUSH
8152: LD_INT 251
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 70
8168: ST_TO_ADDR
// if barrackList > 0 then
8169: LD_VAR 0 9
8173: PUSH
8174: LD_INT 0
8176: GREATER
8177: IFFALSE 8325
// begin if turretList = 0 then
8179: LD_VAR 0 7
8183: PUSH
8184: LD_INT 0
8186: EQUAL
8187: IFFALSE 8229
// begin if soldiers_list > 0 then
8189: LD_VAR 0 6
8193: PUSH
8194: LD_INT 0
8196: GREATER
8197: IFFALSE 8227
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8199: LD_VAR 0 6
8203: PPUSH
8204: LD_VAR 0 9
8208: PUSH
8209: LD_INT 1
8211: PPUSH
8212: LD_VAR 0 9
8216: PPUSH
8217: CALL_OW 12
8221: ARRAY
8222: PPUSH
8223: CALL_OW 120
// end else
8227: GO 8325
// begin for i in barrackList do
8229: LD_ADDR_VAR 0 4
8233: PUSH
8234: LD_VAR 0 9
8238: PUSH
8239: FOR_IN
8240: IFFALSE 8323
// begin insideUnits = UnitsInside ( i ) ;
8242: LD_ADDR_VAR 0 10
8246: PUSH
8247: LD_VAR 0 4
8251: PPUSH
8252: CALL_OW 313
8256: ST_TO_ADDR
// if insideUnits > 0 then
8257: LD_VAR 0 10
8261: PUSH
8262: LD_INT 0
8264: GREATER
8265: IFFALSE 8289
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8267: LD_VAR 0 10
8271: PUSH
8272: LD_INT 1
8274: ARRAY
8275: PPUSH
8276: LD_VAR 0 7
8280: PUSH
8281: LD_INT 1
8283: ARRAY
8284: PPUSH
8285: CALL_OW 120
// if soldiers_list > 0 then
8289: LD_VAR 0 6
8293: PUSH
8294: LD_INT 0
8296: GREATER
8297: IFFALSE 8321
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8299: LD_VAR 0 6
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PPUSH
8308: LD_VAR 0 7
8312: PUSH
8313: LD_INT 1
8315: ARRAY
8316: PPUSH
8317: CALL_OW 120
// end ;
8321: GO 8239
8323: POP
8324: POP
// end ; end ; end ;
8325: LD_VAR 0 3
8329: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8330: LD_INT 0
8332: PPUSH
8333: PPUSH
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
// for i = 1 to infantryCount do
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 5
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8470
// begin uc_side = side ;
8356: LD_ADDR_OWVAR 20
8360: PUSH
8361: LD_VAR 0 1
8365: ST_TO_ADDR
// uc_nation = nation ;
8366: LD_ADDR_OWVAR 21
8370: PUSH
8371: LD_VAR 0 3
8375: ST_TO_ADDR
// hc_class = 1 ;
8376: LD_ADDR_OWVAR 28
8380: PUSH
8381: LD_INT 1
8383: ST_TO_ADDR
// hc_name =  ;
8384: LD_ADDR_OWVAR 26
8388: PUSH
8389: LD_STRING 
8391: ST_TO_ADDR
// hc_gallery =  ;
8392: LD_ADDR_OWVAR 33
8396: PUSH
8397: LD_STRING 
8399: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8400: LD_INT 0
8402: PPUSH
8403: LD_INT 1
8405: PPUSH
8406: LD_EXP 25
8410: PPUSH
8411: LD_EXP 26
8415: PPUSH
8416: CALL_OW 12
8420: PPUSH
8421: CALL_OW 380
// un = CreateHuman ;
8425: LD_ADDR_VAR 0 10
8429: PUSH
8430: CALL_OW 44
8434: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8435: LD_VAR 0 10
8439: PPUSH
8440: LD_VAR 0 2
8444: PPUSH
8445: LD_INT 0
8447: PPUSH
8448: CALL_OW 49
// defenders_list = defenders_list ^ un ;
8452: LD_ADDR_EXP 32
8456: PUSH
8457: LD_EXP 32
8461: PUSH
8462: LD_VAR 0 10
8466: ADD
8467: ST_TO_ADDR
// end ;
8468: GO 8353
8470: POP
8471: POP
// for i = 1 to vehCount do
8472: LD_ADDR_VAR 0 8
8476: PUSH
8477: DOUBLE
8478: LD_INT 1
8480: DEC
8481: ST_TO_ADDR
8482: LD_VAR 0 6
8486: PUSH
8487: FOR_TO
8488: IFFALSE 8695
// begin uc_side = side ;
8490: LD_ADDR_OWVAR 20
8494: PUSH
8495: LD_VAR 0 1
8499: ST_TO_ADDR
// uc_nation = nation ;
8500: LD_ADDR_OWVAR 21
8504: PUSH
8505: LD_VAR 0 3
8509: ST_TO_ADDR
// vc_Chassis = 22 ;
8510: LD_ADDR_OWVAR 37
8514: PUSH
8515: LD_INT 22
8517: ST_TO_ADDR
// vc_engine = 1 ;
8518: LD_ADDR_OWVAR 39
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// vc_control = 1 ;
8526: LD_ADDR_OWVAR 38
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8534: LD_ADDR_OWVAR 40
8538: PUSH
8539: LD_INT 43
8541: PUSH
8542: LD_INT 44
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 1
8551: PPUSH
8552: LD_INT 2
8554: PPUSH
8555: CALL_OW 12
8559: ARRAY
8560: ST_TO_ADDR
// veh = CreateVehicle ;
8561: LD_ADDR_VAR 0 12
8565: PUSH
8566: CALL_OW 45
8570: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8571: LD_VAR 0 12
8575: PPUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: LD_INT 0
8583: PPUSH
8584: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8588: LD_ADDR_EXP 32
8592: PUSH
8593: LD_EXP 32
8597: PUSH
8598: LD_VAR 0 12
8602: ADD
8603: ST_TO_ADDR
// hc_class = 3 ;
8604: LD_ADDR_OWVAR 28
8608: PUSH
8609: LD_INT 3
8611: ST_TO_ADDR
// hc_name =  ;
8612: LD_ADDR_OWVAR 26
8616: PUSH
8617: LD_STRING 
8619: ST_TO_ADDR
// hc_gallery =  ;
8620: LD_ADDR_OWVAR 33
8624: PUSH
8625: LD_STRING 
8627: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8628: LD_INT 0
8630: PPUSH
8631: LD_INT 3
8633: PPUSH
8634: LD_EXP 25
8638: PPUSH
8639: LD_EXP 26
8643: PPUSH
8644: CALL_OW 12
8648: PPUSH
8649: CALL_OW 380
// un = CreateHuman ;
8653: LD_ADDR_VAR 0 10
8657: PUSH
8658: CALL_OW 44
8662: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8663: LD_VAR 0 10
8667: PPUSH
8668: LD_VAR 0 12
8672: PPUSH
8673: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8677: LD_ADDR_EXP 32
8681: PUSH
8682: LD_EXP 32
8686: PUSH
8687: LD_VAR 0 10
8691: ADD
8692: ST_TO_ADDR
// end ;
8693: GO 8487
8695: POP
8696: POP
// end ;
8697: LD_VAR 0 7
8701: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8702: LD_INT 0
8704: PPUSH
8705: PPUSH
8706: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8707: LD_VAR 0 2
8711: PPUSH
8712: LD_INT 22
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: PPUSH
8727: CALL_OW 70
8731: PUSH
8732: LD_INT 0
8734: EQUAL
8735: PUSH
8736: LD_EXP 32
8740: PUSH
8741: LD_INT 0
8743: GREATER
8744: AND
8745: IFFALSE 8774
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8747: LD_EXP 32
8751: PPUSH
8752: LD_INT 65
8754: PPUSH
8755: LD_INT 68
8757: PPUSH
8758: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8762: LD_EXP 32
8766: PPUSH
8767: LD_INT 100
8769: PPUSH
8770: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_INT 22
8781: PUSH
8782: LD_VAR 0 1
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: PPUSH
8794: CALL_OW 70
8798: PUSH
8799: LD_INT 0
8801: GREATER
8802: PUSH
8803: LD_EXP 32
8807: PUSH
8808: LD_INT 0
8810: GREATER
8811: AND
8812: IFFALSE 8891
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8814: LD_EXP 32
8818: PPUSH
8819: LD_VAR 0 2
8823: PPUSH
8824: LD_INT 22
8826: PUSH
8827: LD_VAR 0 1
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: PPUSH
8839: CALL_OW 70
8843: PUSH
8844: LD_INT 1
8846: ARRAY
8847: PPUSH
8848: CALL_OW 250
8852: PPUSH
8853: LD_VAR 0 2
8857: PPUSH
8858: LD_INT 22
8860: PUSH
8861: LD_VAR 0 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: PPUSH
8873: CALL_OW 70
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: CALL_OW 251
8886: PPUSH
8887: CALL_OW 114
// end ;
8891: LD_VAR 0 3
8895: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8896: LD_INT 0
8898: PPUSH
8899: PPUSH
8900: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8901: LD_INT 22
8903: PUSH
8904: LD_VAR 0 1
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 21
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_VAR 0 3
8936: LESSEQUAL
8937: IFFALSE 9045
// begin for i = 1 to vehCount do
8939: LD_ADDR_VAR 0 9
8943: PUSH
8944: DOUBLE
8945: LD_INT 1
8947: DEC
8948: ST_TO_ADDR
8949: LD_VAR 0 3
8953: PUSH
8954: FOR_TO
8955: IFFALSE 9043
// begin weapon = weaponTab [ i ] ;
8957: LD_ADDR_VAR 0 10
8961: PUSH
8962: LD_VAR 0 4
8966: PUSH
8967: LD_VAR 0 9
8971: ARRAY
8972: ST_TO_ADDR
// if weapon = 46 then
8973: LD_VAR 0 10
8977: PUSH
8978: LD_INT 46
8980: EQUAL
8981: IFFALSE 9012
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_INT 24
8990: PPUSH
8991: LD_VAR 0 5
8995: PPUSH
8996: LD_VAR 0 6
9000: PPUSH
9001: LD_VAR 0 10
9005: PPUSH
9006: CALL_OW 185
// end else
9010: GO 9041
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_VAR 0 7
9021: PPUSH
9022: LD_VAR 0 5
9026: PPUSH
9027: LD_VAR 0 6
9031: PPUSH
9032: LD_VAR 0 10
9036: PPUSH
9037: CALL_OW 185
// end ; end ;
9041: GO 8954
9043: POP
9044: POP
// end ; end ;
9045: LD_VAR 0 8
9049: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
9055: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_INT 22
9063: PUSH
9064: LD_VAR 0 1
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 21
9075: PUSH
9076: LD_INT 2
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 3
9085: PUSH
9086: LD_INT 24
9088: PUSH
9089: LD_INT 650
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: LIST
9104: PPUSH
9105: CALL_OW 69
9109: ST_TO_ADDR
// if damageVehicles > 0 then
9110: LD_VAR 0 8
9114: PUSH
9115: LD_INT 0
9117: GREATER
9118: IFFALSE 9139
// ComMoveXY ( damageVehicles , repX , repY ) ;
9120: LD_VAR 0 8
9124: PPUSH
9125: LD_VAR 0 3
9129: PPUSH
9130: LD_VAR 0 4
9134: PPUSH
9135: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9139: LD_VAR 0 8
9143: PPUSH
9144: LD_INT 95
9146: PUSH
9147: LD_VAR 0 2
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: LD_INT 58
9161: PUSH
9162: EMPTY
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PPUSH
9173: CALL_OW 72
9177: PUSH
9178: LD_INT 0
9180: GREATER
9181: IFFALSE 9248
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9183: LD_ADDR_VAR 0 6
9187: PUSH
9188: LD_VAR 0 8
9192: PPUSH
9193: LD_INT 95
9195: PUSH
9196: LD_VAR 0 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: LD_INT 58
9210: PUSH
9211: EMPTY
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 72
9226: PUSH
9227: FOR_IN
9228: IFFALSE 9246
// ComExitVehicle ( UnitsInside ( i ) ) ;
9230: LD_VAR 0 6
9234: PPUSH
9235: CALL_OW 313
9239: PPUSH
9240: CALL_OW 121
9244: GO 9227
9246: POP
9247: POP
// end ;
9248: LD_VAR 0 5
9252: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
9259: PPUSH
9260: PPUSH
9261: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 8
9266: PUSH
9267: LD_INT 22
9269: PUSH
9270: LD_VAR 0 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 21
9281: PUSH
9282: LD_INT 2
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 24
9291: PUSH
9292: LD_INT 250
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 3
9301: PUSH
9302: LD_INT 58
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: LD_INT 2
9310: PUSH
9311: LD_INT 34
9313: PUSH
9314: LD_INT 43
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 34
9323: PUSH
9324: LD_INT 44
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: LD_INT 34
9333: PUSH
9334: LD_INT 46
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PPUSH
9358: CALL_OW 69
9362: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9363: LD_INT 22
9365: PUSH
9366: LD_VAR 0 1
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 2
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 24
9387: PUSH
9388: LD_INT 1000
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: LD_INT 58
9400: PUSH
9401: EMPTY
9402: LIST
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: LD_INT 34
9409: PUSH
9410: LD_INT 43
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 34
9419: PUSH
9420: LD_INT 44
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: LD_INT 34
9429: PUSH
9430: LD_INT 46
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 69
9458: PUSH
9459: LD_INT 5
9461: PUSH
9462: LD_INT 6
9464: PUSH
9465: LD_INT 7
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PUSH
9473: LD_OWVAR 67
9477: ARRAY
9478: GREATEREQUAL
9479: IFFALSE 10044
// repeat wait ( 0 0$1 ) ;
9481: LD_INT 35
9483: PPUSH
9484: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9488: LD_ADDR_VAR 0 8
9492: PUSH
9493: LD_INT 22
9495: PUSH
9496: LD_VAR 0 1
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: LD_INT 21
9507: PUSH
9508: LD_INT 2
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 24
9517: PUSH
9518: LD_INT 250
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 2
9527: PUSH
9528: LD_INT 34
9530: PUSH
9531: LD_INT 43
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 34
9540: PUSH
9541: LD_INT 44
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 34
9550: PUSH
9551: LD_INT 46
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 58
9569: PUSH
9570: EMPTY
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL_OW 69
9588: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9589: LD_INT 22
9591: PUSH
9592: LD_VAR 0 1
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 95
9603: PUSH
9604: LD_VAR 0 2
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PPUSH
9617: CALL_OW 69
9621: NOT
9622: PUSH
9623: LD_VAR 0 11
9627: PUSH
9628: LD_INT 0
9630: EQUAL
9631: AND
9632: IFFALSE 9687
// for i := 1 to wayX do
9634: LD_ADDR_VAR 0 6
9638: PUSH
9639: DOUBLE
9640: LD_INT 1
9642: DEC
9643: ST_TO_ADDR
9644: LD_VAR 0 3
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9685
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9652: LD_VAR 0 8
9656: PPUSH
9657: LD_VAR 0 3
9661: PUSH
9662: LD_VAR 0 6
9666: ARRAY
9667: PPUSH
9668: LD_VAR 0 4
9672: PUSH
9673: LD_VAR 0 6
9677: ARRAY
9678: PPUSH
9679: CALL_OW 114
9683: GO 9649
9685: POP
9686: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9687: LD_INT 22
9689: PUSH
9690: LD_VAR 0 1
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 95
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 69
9719: IFFALSE 9943
// begin seeEnemy = 1 ;
9721: LD_ADDR_VAR 0 11
9725: PUSH
9726: LD_INT 1
9728: ST_TO_ADDR
// for j in vehiclesOK do
9729: LD_ADDR_VAR 0 7
9733: PUSH
9734: LD_VAR 0 8
9738: PUSH
9739: FOR_IN
9740: IFFALSE 9941
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9742: LD_ADDR_VAR 0 9
9746: PUSH
9747: LD_INT 81
9749: PUSH
9750: LD_VAR 0 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 101
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 69
9777: PPUSH
9778: LD_VAR 0 7
9782: PPUSH
9783: CALL_OW 74
9787: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9788: LD_ADDR_VAR 0 10
9792: PUSH
9793: LD_INT 81
9795: PUSH
9796: LD_VAR 0 1
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 101
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 2
9817: PUSH
9818: LD_INT 59
9820: PUSH
9821: EMPTY
9822: LIST
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 21
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PUSH
9855: EMPTY
9856: LIST
9857: PPUSH
9858: CALL_OW 69
9862: PPUSH
9863: LD_VAR 0 7
9867: PPUSH
9868: CALL_OW 74
9872: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9873: LD_VAR 0 7
9877: PPUSH
9878: LD_VAR 0 9
9882: PPUSH
9883: CALL_OW 296
9887: PUSH
9888: LD_INT 8
9890: PLUS
9891: PUSH
9892: LD_VAR 0 7
9896: PPUSH
9897: LD_VAR 0 10
9901: PPUSH
9902: CALL_OW 296
9906: LESS
9907: IFFALSE 9925
// ComAttackUnit ( j , target1 ) else
9909: LD_VAR 0 7
9913: PPUSH
9914: LD_VAR 0 9
9918: PPUSH
9919: CALL_OW 115
9923: GO 9939
// ComAttackUnit ( j , target2 ) ;
9925: LD_VAR 0 7
9929: PPUSH
9930: LD_VAR 0 10
9934: PPUSH
9935: CALL_OW 115
// end ;
9939: GO 9739
9941: POP
9942: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9943: LD_INT 22
9945: PUSH
9946: LD_VAR 0 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 21
9957: PUSH
9958: LD_INT 2
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 24
9967: PUSH
9968: LD_INT 250
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: LD_INT 34
9980: PUSH
9981: LD_INT 43
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 34
9990: PUSH
9991: LD_INT 44
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 34
10000: PUSH
10001: LD_INT 46
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: LD_INT 58
10019: PUSH
10020: EMPTY
10021: LIST
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 69
10038: PUSH
10039: LD_INT 0
10041: EQUAL
10042: IFFALSE 9481
// seeEnemy = 0 ;
10044: LD_ADDR_VAR 0 11
10048: PUSH
10049: LD_INT 0
10051: ST_TO_ADDR
// end ;
10052: LD_VAR 0 5
10056: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10057: LD_INT 0
10059: PPUSH
10060: PPUSH
10061: PPUSH
10062: PPUSH
10063: PPUSH
10064: PPUSH
// repeat wait ( 0 0$1 ) ;
10065: LD_INT 35
10067: PPUSH
10068: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10072: LD_ADDR_VAR 0 7
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_VAR 0 1
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 21
10091: PUSH
10092: LD_INT 2
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 24
10101: PUSH
10102: LD_INT 651
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: PPUSH
10114: CALL_OW 69
10118: ST_TO_ADDR
// for j in vehiclesOK do
10119: LD_ADDR_VAR 0 4
10123: PUSH
10124: LD_VAR 0 7
10128: PUSH
10129: FOR_IN
10130: IFFALSE 10331
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10132: LD_ADDR_VAR 0 5
10136: PUSH
10137: LD_INT 81
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 101
10151: PUSH
10152: LD_INT 1
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PPUSH
10163: CALL_OW 69
10167: PPUSH
10168: LD_VAR 0 4
10172: PPUSH
10173: CALL_OW 74
10177: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10178: LD_ADDR_VAR 0 6
10182: PUSH
10183: LD_INT 81
10185: PUSH
10186: LD_VAR 0 1
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 101
10197: PUSH
10198: LD_INT 1
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 2
10207: PUSH
10208: LD_INT 59
10210: PUSH
10211: EMPTY
10212: LIST
10213: PUSH
10214: LD_INT 21
10216: PUSH
10217: LD_INT 1
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 21
10226: PUSH
10227: LD_INT 2
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: PPUSH
10248: CALL_OW 69
10252: PPUSH
10253: LD_VAR 0 4
10257: PPUSH
10258: CALL_OW 74
10262: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10263: LD_VAR 0 4
10267: PPUSH
10268: LD_VAR 0 5
10272: PPUSH
10273: CALL_OW 296
10277: PUSH
10278: LD_INT 8
10280: PLUS
10281: PUSH
10282: LD_VAR 0 4
10286: PPUSH
10287: LD_VAR 0 6
10291: PPUSH
10292: CALL_OW 296
10296: LESS
10297: IFFALSE 10315
// ComAttackUnit ( j , target1 ) else
10299: LD_VAR 0 4
10303: PPUSH
10304: LD_VAR 0 5
10308: PPUSH
10309: CALL_OW 115
10313: GO 10329
// ComAttackUnit ( j , target2 ) ;
10315: LD_VAR 0 4
10319: PPUSH
10320: LD_VAR 0 6
10324: PPUSH
10325: CALL_OW 115
// end ;
10329: GO 10129
10331: POP
10332: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10333: LD_INT 22
10335: PUSH
10336: LD_VAR 0 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 21
10347: PUSH
10348: LD_INT 2
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 24
10357: PUSH
10358: LD_INT 250
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 69
10374: PUSH
10375: LD_INT 0
10377: EQUAL
10378: IFFALSE 10065
// end ;
10380: LD_VAR 0 2
10384: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10385: LD_INT 0
10387: PPUSH
10388: PPUSH
10389: PPUSH
10390: PPUSH
10391: PPUSH
10392: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10393: LD_ADDR_VAR 0 8
10397: PUSH
10398: LD_VAR 0 2
10402: PPUSH
10403: CALL_OW 313
10407: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10408: LD_ADDR_VAR 0 9
10412: PUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 22
10420: PUSH
10421: LD_VAR 0 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 25
10432: PUSH
10433: LD_INT 2
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 24
10442: PUSH
10443: LD_INT 750
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 3
10452: PUSH
10453: LD_INT 54
10455: PUSH
10456: EMPTY
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: PPUSH
10469: CALL_OW 70
10473: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10474: LD_ADDR_VAR 0 6
10478: PUSH
10479: LD_VAR 0 3
10483: PPUSH
10484: LD_INT 22
10486: PUSH
10487: LD_VAR 0 1
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 21
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 3
10508: PUSH
10509: LD_INT 24
10511: PUSH
10512: LD_INT 1000
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: PUSH
10528: EMPTY
10529: LIST
10530: PPUSH
10531: CALL_OW 70
10535: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10536: LD_VAR 0 6
10540: NOT
10541: PUSH
10542: LD_INT 22
10544: PUSH
10545: LD_VAR 0 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 24
10566: PUSH
10567: LD_INT 250
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: PPUSH
10579: CALL_OW 69
10583: NOT
10584: AND
10585: IFFALSE 10589
// exit ;
10587: GO 10786
// if buildings_list > 0 and engineerOkInside then
10589: LD_VAR 0 6
10593: PUSH
10594: LD_INT 0
10596: GREATER
10597: PUSH
10598: LD_VAR 0 8
10602: AND
10603: IFFALSE 10629
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
10605: LD_VAR 0 8
10609: PPUSH
10610: LD_INT 25
10612: PUSH
10613: LD_INT 2
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 72
10624: PPUSH
10625: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10629: LD_VAR 0 6
10633: PUSH
10634: LD_INT 0
10636: GREATER
10637: PUSH
10638: LD_VAR 0 9
10642: PUSH
10643: LD_INT 0
10645: GREATER
10646: AND
10647: IFFALSE 10667
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10649: LD_VAR 0 9
10653: PPUSH
10654: LD_VAR 0 6
10658: PUSH
10659: LD_INT 1
10661: ARRAY
10662: PPUSH
10663: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10667: LD_VAR 0 6
10671: PUSH
10672: LD_INT 0
10674: EQUAL
10675: PUSH
10676: LD_VAR 0 4
10680: PUSH
10681: LD_INT 0
10683: EQUAL
10684: AND
10685: PUSH
10686: LD_VAR 0 9
10690: PUSH
10691: LD_INT 0
10693: GREATER
10694: AND
10695: IFFALSE 10711
// ComEnterUnit ( engineerOkOutside , building ) ;
10697: LD_VAR 0 9
10701: PPUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10711: LD_VAR 0 9
10715: PUSH
10716: LD_INT 0
10718: GREATER
10719: PUSH
10720: LD_VAR 0 6
10724: PUSH
10725: LD_INT 0
10727: EQUAL
10728: AND
10729: PUSH
10730: LD_VAR 0 4
10734: PUSH
10735: LD_INT 0
10737: GREATER
10738: AND
10739: IFFALSE 10786
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10741: LD_VAR 0 9
10745: PPUSH
10746: LD_VAR 0 4
10750: PUSH
10751: LD_INT 1
10753: ARRAY
10754: PPUSH
10755: LD_VAR 0 4
10759: PUSH
10760: LD_INT 2
10762: ARRAY
10763: PPUSH
10764: LD_VAR 0 4
10768: PUSH
10769: LD_INT 3
10771: ARRAY
10772: PPUSH
10773: LD_VAR 0 4
10777: PUSH
10778: LD_INT 4
10780: ARRAY
10781: PPUSH
10782: CALL_OW 145
// end ;
10786: LD_VAR 0 5
10790: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10791: LD_INT 0
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10802: LD_ADDR_VAR 0 6
10806: PUSH
10807: LD_INT 22
10809: PUSH
10810: LD_VAR 0 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 25
10821: PUSH
10822: LD_INT 4
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 23
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 24
10841: PUSH
10842: LD_INT 251
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 69
10859: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10860: LD_ADDR_VAR 0 7
10864: PUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: LD_INT 22
10872: PUSH
10873: LD_VAR 0 1
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 23
10884: PUSH
10885: LD_INT 2
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 4
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 50
10904: PUSH
10905: EMPTY
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: PPUSH
10914: CALL_OW 70
10918: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10919: LD_ADDR_VAR 0 10
10923: PUSH
10924: LD_VAR 0 3
10928: PPUSH
10929: LD_INT 22
10931: PUSH
10932: LD_VAR 0 1
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 21
10943: PUSH
10944: LD_INT 1
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 3
10953: PUSH
10954: LD_INT 25
10956: PUSH
10957: LD_INT 3
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 3
10970: PUSH
10971: LD_INT 24
10973: PUSH
10974: LD_INT 750
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL_OW 70
10995: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10996: LD_ADDR_VAR 0 11
11000: PUSH
11001: LD_VAR 0 2
11005: PPUSH
11006: LD_INT 22
11008: PUSH
11009: LD_VAR 0 1
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 21
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 3
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 3
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 3
11047: PUSH
11048: LD_INT 24
11050: PUSH
11051: LD_INT 1000
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 70
11072: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11073: LD_VAR 0 10
11077: NOT
11078: PUSH
11079: LD_VAR 0 11
11083: NOT
11084: AND
11085: PUSH
11086: LD_VAR 0 6
11090: NOT
11091: AND
11092: IFFALSE 11096
// exit ;
11094: GO 11330
// if damageUnits > 0 and sci_list > 0 then
11096: LD_VAR 0 10
11100: PUSH
11101: LD_INT 0
11103: GREATER
11104: PUSH
11105: LD_VAR 0 6
11109: PUSH
11110: LD_INT 0
11112: GREATER
11113: AND
11114: IFFALSE 11130
// ComMoveToArea ( damageUnits , healArea ) ;
11116: LD_VAR 0 10
11120: PPUSH
11121: LD_VAR 0 2
11125: PPUSH
11126: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11130: LD_VAR 0 11
11134: PUSH
11135: LD_INT 0
11137: GREATER
11138: PUSH
11139: LD_VAR 0 6
11143: PUSH
11144: LD_INT 0
11146: GREATER
11147: AND
11148: IFFALSE 11159
// ComExitBuilding ( sci_list ) ;
11150: LD_VAR 0 6
11154: PPUSH
11155: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11159: LD_VAR 0 11
11163: PUSH
11164: LD_INT 0
11166: GREATER
11167: PUSH
11168: LD_VAR 0 7
11172: PUSH
11173: LD_INT 0
11175: GREATER
11176: AND
11177: IFFALSE 11197
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11179: LD_VAR 0 7
11183: PPUSH
11184: LD_VAR 0 11
11188: PUSH
11189: LD_INT 1
11191: ARRAY
11192: PPUSH
11193: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11197: LD_VAR 0 10
11201: PUSH
11202: LD_INT 0
11204: EQUAL
11205: PUSH
11206: LD_VAR 0 11
11210: PUSH
11211: LD_INT 0
11213: EQUAL
11214: AND
11215: PUSH
11216: LD_VAR 0 7
11220: PUSH
11221: LD_INT 0
11223: GREATER
11224: AND
11225: IFFALSE 11330
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11227: LD_ADDR_VAR 0 12
11231: PUSH
11232: LD_INT 22
11234: PUSH
11235: LD_VAR 0 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 21
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 30
11256: PUSH
11257: LD_INT 8
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 69
11273: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11274: LD_ADDR_VAR 0 13
11278: PUSH
11279: LD_INT 1
11281: PPUSH
11282: LD_VAR 0 12
11286: PPUSH
11287: CALL_OW 12
11291: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11292: LD_VAR 0 7
11296: PPUSH
11297: LD_INT 3
11299: PUSH
11300: LD_INT 60
11302: PUSH
11303: EMPTY
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PPUSH
11310: CALL_OW 72
11314: PPUSH
11315: LD_VAR 0 12
11319: PUSH
11320: LD_VAR 0 13
11324: ARRAY
11325: PPUSH
11326: CALL_OW 120
// end ; end ;
11330: LD_VAR 0 5
11334: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11335: LD_INT 0
11337: PPUSH
11338: PPUSH
11339: PPUSH
11340: PPUSH
11341: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11342: LD_ADDR_VAR 0 6
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_VAR 0 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 31
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 30
11374: PUSH
11375: LD_INT 32
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 30
11384: PUSH
11385: LD_INT 33
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 30
11394: PUSH
11395: LD_INT 4
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 5
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11429: LD_ADDR_VAR 0 7
11433: PUSH
11434: LD_INT 22
11436: PUSH
11437: LD_VAR 0 2
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 21
11448: PUSH
11449: LD_INT 3
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 58
11458: PUSH
11459: EMPTY
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: PPUSH
11467: CALL_OW 69
11471: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11472: LD_VAR 0 6
11476: PUSH
11477: LD_INT 0
11479: GREATER
11480: PUSH
11481: LD_VAR 0 7
11485: PUSH
11486: LD_INT 0
11488: GREATER
11489: AND
11490: IFFALSE 11560
// begin for i in turretsList do
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_VAR 0 6
11501: PUSH
11502: FOR_IN
11503: IFFALSE 11558
// begin for j in enemyBuildings do
11505: LD_ADDR_VAR 0 5
11509: PUSH
11510: LD_VAR 0 7
11514: PUSH
11515: FOR_IN
11516: IFFALSE 11554
// begin if GetDistUnits ( i , j ) < 20 then
11518: LD_VAR 0 4
11522: PPUSH
11523: LD_VAR 0 5
11527: PPUSH
11528: CALL_OW 296
11532: PUSH
11533: LD_INT 20
11535: LESS
11536: IFFALSE 11552
// begin ComAttackUnit ( i , j ) ;
11538: LD_VAR 0 4
11542: PPUSH
11543: LD_VAR 0 5
11547: PPUSH
11548: CALL_OW 115
// end ; end ;
11552: GO 11515
11554: POP
11555: POP
// end ;
11556: GO 11502
11558: POP
11559: POP
// end ; end ;
11560: LD_VAR 0 3
11564: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
// for i = 1 to medicCount do
11578: LD_ADDR_VAR 0 14
11582: PUSH
11583: DOUBLE
11584: LD_INT 1
11586: DEC
11587: ST_TO_ADDR
11588: LD_VAR 0 7
11592: PUSH
11593: FOR_TO
11594: IFFALSE 11676
// begin uc_side = side ;
11596: LD_ADDR_OWVAR 20
11600: PUSH
11601: LD_VAR 0 1
11605: ST_TO_ADDR
// uc_nation = nation ;
11606: LD_ADDR_OWVAR 21
11610: PUSH
11611: LD_VAR 0 2
11615: ST_TO_ADDR
// hc_name =  ;
11616: LD_ADDR_OWVAR 26
11620: PUSH
11621: LD_STRING 
11623: ST_TO_ADDR
// hc_gallery =  ;
11624: LD_ADDR_OWVAR 33
11628: PUSH
11629: LD_STRING 
11631: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11632: LD_INT 0
11634: PPUSH
11635: LD_INT 4
11637: PPUSH
11638: LD_VAR 0 8
11642: PPUSH
11643: CALL_OW 380
// un = CreateHuman ;
11647: LD_ADDR_VAR 0 16
11651: PUSH
11652: CALL_OW 44
11656: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11657: LD_VAR 0 16
11661: PPUSH
11662: LD_VAR 0 9
11666: PPUSH
11667: LD_INT 0
11669: PPUSH
11670: CALL_OW 49
// end ;
11674: GO 11593
11676: POP
11677: POP
// for i = 1 to soldierCount do
11678: LD_ADDR_VAR 0 14
11682: PUSH
11683: DOUBLE
11684: LD_INT 1
11686: DEC
11687: ST_TO_ADDR
11688: LD_VAR 0 3
11692: PUSH
11693: FOR_TO
11694: IFFALSE 11776
// begin uc_side = side ;
11696: LD_ADDR_OWVAR 20
11700: PUSH
11701: LD_VAR 0 1
11705: ST_TO_ADDR
// uc_nation = nation ;
11706: LD_ADDR_OWVAR 21
11710: PUSH
11711: LD_VAR 0 2
11715: ST_TO_ADDR
// hc_name =  ;
11716: LD_ADDR_OWVAR 26
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_gallery =  ;
11724: LD_ADDR_OWVAR 33
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PPUSH
11738: LD_VAR 0 8
11742: PPUSH
11743: CALL_OW 380
// un = CreateHuman ;
11747: LD_ADDR_VAR 0 16
11751: PUSH
11752: CALL_OW 44
11756: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11757: LD_VAR 0 16
11761: PPUSH
11762: LD_VAR 0 9
11766: PPUSH
11767: LD_INT 0
11769: PPUSH
11770: CALL_OW 49
// end ;
11774: GO 11693
11776: POP
11777: POP
// for i = 1 to sniperCount do
11778: LD_ADDR_VAR 0 14
11782: PUSH
11783: DOUBLE
11784: LD_INT 1
11786: DEC
11787: ST_TO_ADDR
11788: LD_VAR 0 4
11792: PUSH
11793: FOR_TO
11794: IFFALSE 11876
// begin uc_side = side ;
11796: LD_ADDR_OWVAR 20
11800: PUSH
11801: LD_VAR 0 1
11805: ST_TO_ADDR
// uc_nation = nation ;
11806: LD_ADDR_OWVAR 21
11810: PUSH
11811: LD_VAR 0 2
11815: ST_TO_ADDR
// hc_name =  ;
11816: LD_ADDR_OWVAR 26
11820: PUSH
11821: LD_STRING 
11823: ST_TO_ADDR
// hc_gallery =  ;
11824: LD_ADDR_OWVAR 33
11828: PUSH
11829: LD_STRING 
11831: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11832: LD_INT 0
11834: PPUSH
11835: LD_INT 5
11837: PPUSH
11838: LD_VAR 0 8
11842: PPUSH
11843: CALL_OW 380
// un = CreateHuman ;
11847: LD_ADDR_VAR 0 16
11851: PUSH
11852: CALL_OW 44
11856: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11857: LD_VAR 0 16
11861: PPUSH
11862: LD_VAR 0 9
11866: PPUSH
11867: LD_INT 0
11869: PPUSH
11870: CALL_OW 49
// end ;
11874: GO 11793
11876: POP
11877: POP
// for i = 1 to bazookCount do
11878: LD_ADDR_VAR 0 14
11882: PUSH
11883: DOUBLE
11884: LD_INT 1
11886: DEC
11887: ST_TO_ADDR
11888: LD_VAR 0 5
11892: PUSH
11893: FOR_TO
11894: IFFALSE 11976
// begin uc_side = side ;
11896: LD_ADDR_OWVAR 20
11900: PUSH
11901: LD_VAR 0 1
11905: ST_TO_ADDR
// uc_nation = nation ;
11906: LD_ADDR_OWVAR 21
11910: PUSH
11911: LD_VAR 0 2
11915: ST_TO_ADDR
// hc_name =  ;
11916: LD_ADDR_OWVAR 26
11920: PUSH
11921: LD_STRING 
11923: ST_TO_ADDR
// hc_gallery =  ;
11924: LD_ADDR_OWVAR 33
11928: PUSH
11929: LD_STRING 
11931: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11932: LD_INT 0
11934: PPUSH
11935: LD_INT 9
11937: PPUSH
11938: LD_VAR 0 8
11942: PPUSH
11943: CALL_OW 380
// un = CreateHuman ;
11947: LD_ADDR_VAR 0 16
11951: PUSH
11952: CALL_OW 44
11956: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11957: LD_VAR 0 16
11961: PPUSH
11962: LD_VAR 0 9
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 49
// end ;
11974: GO 11893
11976: POP
11977: POP
// for i = 1 to mortalCount do
11978: LD_ADDR_VAR 0 14
11982: PUSH
11983: DOUBLE
11984: LD_INT 1
11986: DEC
11987: ST_TO_ADDR
11988: LD_VAR 0 6
11992: PUSH
11993: FOR_TO
11994: IFFALSE 12076
// begin uc_side = side ;
11996: LD_ADDR_OWVAR 20
12000: PUSH
12001: LD_VAR 0 1
12005: ST_TO_ADDR
// uc_nation = nation ;
12006: LD_ADDR_OWVAR 21
12010: PUSH
12011: LD_VAR 0 2
12015: ST_TO_ADDR
// hc_name =  ;
12016: LD_ADDR_OWVAR 26
12020: PUSH
12021: LD_STRING 
12023: ST_TO_ADDR
// hc_gallery =  ;
12024: LD_ADDR_OWVAR 33
12028: PUSH
12029: LD_STRING 
12031: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12032: LD_INT 0
12034: PPUSH
12035: LD_INT 8
12037: PPUSH
12038: LD_VAR 0 8
12042: PPUSH
12043: CALL_OW 380
// un = CreateHuman ;
12047: LD_ADDR_VAR 0 16
12051: PUSH
12052: CALL_OW 44
12056: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12057: LD_VAR 0 16
12061: PPUSH
12062: LD_VAR 0 9
12066: PPUSH
12067: LD_INT 0
12069: PPUSH
12070: CALL_OW 49
// end ;
12074: GO 11993
12076: POP
12077: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12078: LD_ADDR_VAR 0 19
12082: PUSH
12083: LD_INT 22
12085: PUSH
12086: LD_VAR 0 1
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 25
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 25
12110: PUSH
12111: LD_INT 5
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 8
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 25
12130: PUSH
12131: LD_INT 9
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12154: LD_ADDR_VAR 0 18
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_VAR 0 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 4
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: ST_TO_ADDR
// for i in medic_list do
12190: LD_ADDR_VAR 0 14
12194: PUSH
12195: LD_VAR 0 18
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12219
// ComMoveToArea ( i , healArea ) ;
12203: LD_VAR 0 14
12207: PPUSH
12208: LD_VAR 0 10
12212: PPUSH
12213: CALL_OW 113
12217: GO 12200
12219: POP
12220: POP
// if strategy = 1 then
12221: LD_VAR 0 12
12225: PUSH
12226: LD_INT 1
12228: EQUAL
12229: IFFALSE 12775
// begin repeat wait ( 0 0$3 ) ;
12231: LD_INT 105
12233: PPUSH
12234: CALL_OW 67
// for i in soldiersOK_list do
12238: LD_ADDR_VAR 0 14
12242: PUSH
12243: LD_VAR 0 19
12247: PUSH
12248: FOR_IN
12249: IFFALSE 12313
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12251: LD_VAR 0 14
12255: PPUSH
12256: LD_INT 91
12258: PPUSH
12259: LD_INT 63
12261: PPUSH
12262: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12266: LD_VAR 0 14
12270: PPUSH
12271: LD_INT 101
12273: PPUSH
12274: LD_INT 53
12276: PPUSH
12277: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12281: LD_VAR 0 14
12285: PPUSH
12286: LD_INT 75
12288: PPUSH
12289: LD_INT 23
12291: PPUSH
12292: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12296: LD_VAR 0 14
12300: PPUSH
12301: LD_INT 78
12303: PPUSH
12304: LD_INT 8
12306: PPUSH
12307: CALL_OW 174
// end ;
12311: GO 12248
12313: POP
12314: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12315: LD_INT 12
12317: PPUSH
12318: LD_INT 22
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 70
12334: PUSH
12335: LD_INT 2
12337: GREATER
12338: IFFALSE 12231
// repeat wait ( 0 0$1 ) ;
12340: LD_INT 35
12342: PPUSH
12343: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12347: LD_ADDR_VAR 0 17
12351: PUSH
12352: LD_INT 22
12354: PUSH
12355: LD_VAR 0 1
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 1
12366: PUSH
12367: LD_INT 3
12369: PUSH
12370: LD_INT 24
12372: PUSH
12373: LD_INT 550
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 24
12386: PUSH
12387: LD_INT 250
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PPUSH
12403: CALL_OW 69
12407: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12408: LD_ADDR_VAR 0 19
12412: PUSH
12413: LD_INT 22
12415: PUSH
12416: LD_VAR 0 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 2
12427: PUSH
12428: LD_INT 25
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 25
12440: PUSH
12441: LD_INT 5
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 25
12450: PUSH
12451: LD_INT 8
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 25
12460: PUSH
12461: LD_INT 9
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 24
12477: PUSH
12478: LD_INT 1000
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PPUSH
12490: CALL_OW 69
12494: ST_TO_ADDR
// if medicCount > 0 then
12495: LD_VAR 0 7
12499: PUSH
12500: LD_INT 0
12502: GREATER
12503: IFFALSE 12577
// begin if damageUnit_list > 0 then
12505: LD_VAR 0 17
12509: PUSH
12510: LD_INT 0
12512: GREATER
12513: IFFALSE 12577
// begin for i in damageUnit_list do
12515: LD_ADDR_VAR 0 14
12519: PUSH
12520: LD_VAR 0 17
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12575
// begin ComMoveToArea ( i , healArea ) ;
12528: LD_VAR 0 14
12532: PPUSH
12533: LD_VAR 0 10
12537: PPUSH
12538: CALL_OW 113
// for j in medic_list do
12542: LD_ADDR_VAR 0 15
12546: PUSH
12547: LD_VAR 0 18
12551: PUSH
12552: FOR_IN
12553: IFFALSE 12571
// AddComHeal ( j , i ) ;
12555: LD_VAR 0 15
12559: PPUSH
12560: LD_VAR 0 14
12564: PPUSH
12565: CALL_OW 188
12569: GO 12552
12571: POP
12572: POP
// end ;
12573: GO 12525
12575: POP
12576: POP
// end ; end ; for i in soldiersOK_list do
12577: LD_ADDR_VAR 0 14
12581: PUSH
12582: LD_VAR 0 19
12586: PUSH
12587: FOR_IN
12588: IFFALSE 12764
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12590: LD_ADDR_VAR 0 22
12594: PUSH
12595: LD_INT 22
12597: PUSH
12598: LD_VAR 0 11
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: PPUSH
12612: LD_VAR 0 14
12616: PPUSH
12617: CALL_OW 74
12621: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12622: LD_ADDR_VAR 0 23
12626: PUSH
12627: LD_INT 22
12629: PUSH
12630: LD_VAR 0 11
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 2
12641: PUSH
12642: LD_INT 59
12644: PUSH
12645: EMPTY
12646: LIST
12647: PUSH
12648: LD_INT 21
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 21
12660: PUSH
12661: LD_INT 2
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PPUSH
12686: LD_VAR 0 14
12690: PPUSH
12691: CALL_OW 74
12695: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12696: LD_VAR 0 14
12700: PPUSH
12701: LD_VAR 0 22
12705: PPUSH
12706: CALL_OW 296
12710: PUSH
12711: LD_INT 6
12713: PLUS
12714: PUSH
12715: LD_VAR 0 14
12719: PPUSH
12720: LD_VAR 0 23
12724: PPUSH
12725: CALL_OW 296
12729: LESS
12730: IFFALSE 12748
// begin ComAttackUnit ( i , target1 ) ;
12732: LD_VAR 0 14
12736: PPUSH
12737: LD_VAR 0 22
12741: PPUSH
12742: CALL_OW 115
// end else
12746: GO 12762
// begin ComAttackUnit ( i , target2 ) ;
12748: LD_VAR 0 14
12752: PPUSH
12753: LD_VAR 0 23
12757: PPUSH
12758: CALL_OW 115
// end ; end ;
12762: GO 12587
12764: POP
12765: POP
// until soldiersOK_list = [ ] ;
12766: LD_VAR 0 19
12770: PUSH
12771: EMPTY
12772: EQUAL
12773: IFFALSE 12340
// end ; if strategy = 2 then
12775: LD_VAR 0 12
12779: PUSH
12780: LD_INT 2
12782: EQUAL
12783: IFFALSE 13299
// begin repeat wait ( 0 0$1 ) ;
12785: LD_INT 35
12787: PPUSH
12788: CALL_OW 67
// for i in soldiersOK_list do
12792: LD_ADDR_VAR 0 14
12796: PUSH
12797: LD_VAR 0 19
12801: PUSH
12802: FOR_IN
12803: IFFALSE 12837
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12805: LD_VAR 0 14
12809: PPUSH
12810: LD_INT 91
12812: PPUSH
12813: LD_INT 63
12815: PPUSH
12816: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12820: LD_VAR 0 14
12824: PPUSH
12825: LD_INT 75
12827: PPUSH
12828: LD_INT 33
12830: PPUSH
12831: CALL_OW 174
// end ;
12835: GO 12802
12837: POP
12838: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12839: LD_INT 13
12841: PPUSH
12842: LD_INT 22
12844: PUSH
12845: LD_VAR 0 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 70
12858: PUSH
12859: LD_INT 2
12861: GREATER
12862: IFFALSE 12785
// repeat wait ( 0 0$3 ) ;
12864: LD_INT 105
12866: PPUSH
12867: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12871: LD_ADDR_VAR 0 17
12875: PUSH
12876: LD_INT 22
12878: PUSH
12879: LD_VAR 0 1
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: LD_INT 3
12893: PUSH
12894: LD_INT 24
12896: PUSH
12897: LD_INT 550
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 24
12910: PUSH
12911: LD_INT 250
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12932: LD_ADDR_VAR 0 19
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_VAR 0 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 2
12951: PUSH
12952: LD_INT 25
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 25
12964: PUSH
12965: LD_INT 5
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 25
12974: PUSH
12975: LD_INT 8
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 25
12984: PUSH
12985: LD_INT 9
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 24
13001: PUSH
13002: LD_INT 1000
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: ST_TO_ADDR
// if medicCount > 0 then
13019: LD_VAR 0 7
13023: PUSH
13024: LD_INT 0
13026: GREATER
13027: IFFALSE 13101
// begin if damageUnit_list > 0 then
13029: LD_VAR 0 17
13033: PUSH
13034: LD_INT 0
13036: GREATER
13037: IFFALSE 13101
// begin for i in damageUnit_list do
13039: LD_ADDR_VAR 0 14
13043: PUSH
13044: LD_VAR 0 17
13048: PUSH
13049: FOR_IN
13050: IFFALSE 13099
// begin ComMoveToArea ( i , healArea ) ;
13052: LD_VAR 0 14
13056: PPUSH
13057: LD_VAR 0 10
13061: PPUSH
13062: CALL_OW 113
// for j in medic_list do
13066: LD_ADDR_VAR 0 15
13070: PUSH
13071: LD_VAR 0 18
13075: PUSH
13076: FOR_IN
13077: IFFALSE 13095
// AddComHeal ( j , i ) ;
13079: LD_VAR 0 15
13083: PPUSH
13084: LD_VAR 0 14
13088: PPUSH
13089: CALL_OW 188
13093: GO 13076
13095: POP
13096: POP
// end ;
13097: GO 13049
13099: POP
13100: POP
// end ; end ; for i in soldiersOK_list do
13101: LD_ADDR_VAR 0 14
13105: PUSH
13106: LD_VAR 0 19
13110: PUSH
13111: FOR_IN
13112: IFFALSE 13288
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13114: LD_ADDR_VAR 0 22
13118: PUSH
13119: LD_INT 22
13121: PUSH
13122: LD_VAR 0 11
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: PPUSH
13136: LD_VAR 0 14
13140: PPUSH
13141: CALL_OW 74
13145: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13146: LD_ADDR_VAR 0 23
13150: PUSH
13151: LD_INT 22
13153: PUSH
13154: LD_VAR 0 11
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 2
13165: PUSH
13166: LD_INT 59
13168: PUSH
13169: EMPTY
13170: LIST
13171: PUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: PPUSH
13205: CALL_OW 69
13209: PPUSH
13210: LD_VAR 0 14
13214: PPUSH
13215: CALL_OW 74
13219: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13220: LD_VAR 0 14
13224: PPUSH
13225: LD_VAR 0 22
13229: PPUSH
13230: CALL_OW 296
13234: PUSH
13235: LD_INT 6
13237: PLUS
13238: PUSH
13239: LD_VAR 0 14
13243: PPUSH
13244: LD_VAR 0 23
13248: PPUSH
13249: CALL_OW 296
13253: LESS
13254: IFFALSE 13272
// begin ComAttackUnit ( i , target1 ) ;
13256: LD_VAR 0 14
13260: PPUSH
13261: LD_VAR 0 22
13265: PPUSH
13266: CALL_OW 115
// end else
13270: GO 13286
// begin ComAttackUnit ( i , target2 ) ;
13272: LD_VAR 0 14
13276: PPUSH
13277: LD_VAR 0 23
13281: PPUSH
13282: CALL_OW 115
// end ; end ;
13286: GO 13111
13288: POP
13289: POP
// until soldiersOK_list = [ ] ;
13290: LD_VAR 0 19
13294: PUSH
13295: EMPTY
13296: EQUAL
13297: IFFALSE 12864
// end ; if strategy = 3 then
13299: LD_VAR 0 12
13303: PUSH
13304: LD_INT 3
13306: EQUAL
13307: IFFALSE 13853
// begin repeat wait ( 0 0$3 ) ;
13309: LD_INT 105
13311: PPUSH
13312: CALL_OW 67
// for i in soldiersOK_list do
13316: LD_ADDR_VAR 0 14
13320: PUSH
13321: LD_VAR 0 19
13325: PUSH
13326: FOR_IN
13327: IFFALSE 13391
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13329: LD_VAR 0 14
13333: PPUSH
13334: LD_INT 63
13336: PPUSH
13337: LD_INT 71
13339: PPUSH
13340: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13344: LD_VAR 0 14
13348: PPUSH
13349: LD_INT 35
13351: PPUSH
13352: LD_INT 44
13354: PPUSH
13355: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13359: LD_VAR 0 14
13363: PPUSH
13364: LD_INT 23
13366: PPUSH
13367: LD_INT 18
13369: PPUSH
13370: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13374: LD_VAR 0 14
13378: PPUSH
13379: LD_INT 26
13381: PPUSH
13382: LD_INT 12
13384: PPUSH
13385: CALL_OW 174
// end ;
13389: GO 13326
13391: POP
13392: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13393: LD_INT 14
13395: PPUSH
13396: LD_INT 22
13398: PUSH
13399: LD_VAR 0 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PPUSH
13408: CALL_OW 70
13412: PUSH
13413: LD_INT 2
13415: GREATER
13416: IFFALSE 13309
// repeat wait ( 0 0$1 ) ;
13418: LD_INT 35
13420: PPUSH
13421: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13425: LD_ADDR_VAR 0 17
13429: PUSH
13430: LD_INT 22
13432: PUSH
13433: LD_VAR 0 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 1
13444: PUSH
13445: LD_INT 3
13447: PUSH
13448: LD_INT 24
13450: PUSH
13451: LD_INT 550
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 24
13464: PUSH
13465: LD_INT 250
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PPUSH
13481: CALL_OW 69
13485: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13486: LD_ADDR_VAR 0 19
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_VAR 0 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 2
13505: PUSH
13506: LD_INT 25
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 25
13518: PUSH
13519: LD_INT 5
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 25
13528: PUSH
13529: LD_INT 8
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 25
13538: PUSH
13539: LD_INT 9
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 24
13555: PUSH
13556: LD_INT 1000
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: ST_TO_ADDR
// if medicCount > 0 then
13573: LD_VAR 0 7
13577: PUSH
13578: LD_INT 0
13580: GREATER
13581: IFFALSE 13655
// begin if damageUnit_list > 0 then
13583: LD_VAR 0 17
13587: PUSH
13588: LD_INT 0
13590: GREATER
13591: IFFALSE 13655
// begin for i in damageUnit_list do
13593: LD_ADDR_VAR 0 14
13597: PUSH
13598: LD_VAR 0 17
13602: PUSH
13603: FOR_IN
13604: IFFALSE 13653
// begin ComMoveToArea ( i , healArea ) ;
13606: LD_VAR 0 14
13610: PPUSH
13611: LD_VAR 0 10
13615: PPUSH
13616: CALL_OW 113
// for j in medic_list do
13620: LD_ADDR_VAR 0 15
13624: PUSH
13625: LD_VAR 0 18
13629: PUSH
13630: FOR_IN
13631: IFFALSE 13649
// AddComHeal ( j , i ) ;
13633: LD_VAR 0 15
13637: PPUSH
13638: LD_VAR 0 14
13642: PPUSH
13643: CALL_OW 188
13647: GO 13630
13649: POP
13650: POP
// end ;
13651: GO 13603
13653: POP
13654: POP
// end ; end ; for i in soldiersOK_list do
13655: LD_ADDR_VAR 0 14
13659: PUSH
13660: LD_VAR 0 19
13664: PUSH
13665: FOR_IN
13666: IFFALSE 13842
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13668: LD_ADDR_VAR 0 22
13672: PUSH
13673: LD_INT 22
13675: PUSH
13676: LD_VAR 0 11
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: PPUSH
13690: LD_VAR 0 14
13694: PPUSH
13695: CALL_OW 74
13699: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13700: LD_ADDR_VAR 0 23
13704: PUSH
13705: LD_INT 22
13707: PUSH
13708: LD_VAR 0 11
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 2
13719: PUSH
13720: LD_INT 59
13722: PUSH
13723: EMPTY
13724: LIST
13725: PUSH
13726: LD_INT 21
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: PPUSH
13759: CALL_OW 69
13763: PPUSH
13764: LD_VAR 0 14
13768: PPUSH
13769: CALL_OW 74
13773: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13774: LD_VAR 0 14
13778: PPUSH
13779: LD_VAR 0 22
13783: PPUSH
13784: CALL_OW 296
13788: PUSH
13789: LD_INT 6
13791: PLUS
13792: PUSH
13793: LD_VAR 0 14
13797: PPUSH
13798: LD_VAR 0 23
13802: PPUSH
13803: CALL_OW 296
13807: LESS
13808: IFFALSE 13826
// begin ComAttackUnit ( i , target1 ) ;
13810: LD_VAR 0 14
13814: PPUSH
13815: LD_VAR 0 22
13819: PPUSH
13820: CALL_OW 115
// end else
13824: GO 13840
// begin ComAttackUnit ( i , target2 ) ;
13826: LD_VAR 0 14
13830: PPUSH
13831: LD_VAR 0 23
13835: PPUSH
13836: CALL_OW 115
// end ; end ;
13840: GO 13665
13842: POP
13843: POP
// until soldiersOK_list = [ ] ;
13844: LD_VAR 0 19
13848: PUSH
13849: EMPTY
13850: EQUAL
13851: IFFALSE 13418
// end ; end ;
13853: LD_VAR 0 13
13857: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13858: LD_INT 0
13860: PPUSH
13861: PPUSH
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
// amChassisTab = [ ] ;
13871: LD_ADDR_VAR 0 19
13875: PUSH
13876: EMPTY
13877: ST_TO_ADDR
// arChassisTab = [ ] ;
13878: LD_ADDR_VAR 0 18
13882: PUSH
13883: EMPTY
13884: ST_TO_ADDR
// ruChassisTab = [ ] ;
13885: LD_ADDR_VAR 0 17
13889: PUSH
13890: EMPTY
13891: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13892: LD_INT 35
13894: PPUSH
13895: CALL_OW 67
// if nation = 1 then
13899: LD_VAR 0 5
13903: PUSH
13904: LD_INT 1
13906: EQUAL
13907: IFFALSE 14398
// begin uc_side = side ;
13909: LD_ADDR_OWVAR 20
13913: PUSH
13914: LD_VAR 0 2
13918: ST_TO_ADDR
// uc_nation = nation ;
13919: LD_ADDR_OWVAR 21
13923: PUSH
13924: LD_VAR 0 5
13928: ST_TO_ADDR
// vc_engine = vehengine ;
13929: LD_ADDR_OWVAR 39
13933: PUSH
13934: LD_VAR 0 6
13938: ST_TO_ADDR
// vc_control = vehcontrol ;
13939: LD_ADDR_OWVAR 38
13943: PUSH
13944: LD_VAR 0 7
13948: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13949: LD_ADDR_OWVAR 40
13953: PUSH
13954: LD_VAR 0 10
13958: PUSH
13959: LD_INT 1
13961: PPUSH
13962: LD_VAR 0 10
13966: PPUSH
13967: CALL_OW 12
13971: ARRAY
13972: ST_TO_ADDR
// for j = 1 to AMWeapon do
13973: LD_ADDR_VAR 0 14
13977: PUSH
13978: DOUBLE
13979: LD_INT 1
13981: DEC
13982: ST_TO_ADDR
13983: LD_VAR 0 10
13987: PUSH
13988: FOR_TO
13989: IFFALSE 14290
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13991: LD_VAR 0 10
13995: PUSH
13996: LD_VAR 0 14
14000: ARRAY
14001: PUSH
14002: LD_INT 2
14004: EQUAL
14005: PUSH
14006: LD_VAR 0 10
14010: PUSH
14011: LD_VAR 0 14
14015: ARRAY
14016: PUSH
14017: LD_INT 3
14019: EQUAL
14020: OR
14021: IFFALSE 14074
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14023: LD_ADDR_VAR 0 19
14027: PUSH
14028: LD_INT 1
14030: PUSH
14031: LD_INT 2
14033: PUSH
14034: LD_INT 3
14036: PUSH
14037: LD_INT 4
14039: PUSH
14040: LD_INT 5
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14050: LD_ADDR_OWVAR 37
14054: PUSH
14055: LD_VAR 0 19
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_VAR 0 19
14067: PPUSH
14068: CALL_OW 12
14072: ARRAY
14073: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14074: LD_VAR 0 10
14078: PUSH
14079: LD_VAR 0 14
14083: ARRAY
14084: PUSH
14085: LD_INT 4
14087: EQUAL
14088: PUSH
14089: LD_VAR 0 10
14093: PUSH
14094: LD_VAR 0 14
14098: ARRAY
14099: PUSH
14100: LD_INT 5
14102: EQUAL
14103: OR
14104: PUSH
14105: LD_VAR 0 10
14109: PUSH
14110: LD_VAR 0 14
14114: ARRAY
14115: PUSH
14116: LD_INT 9
14118: EQUAL
14119: OR
14120: PUSH
14121: LD_VAR 0 10
14125: PUSH
14126: LD_VAR 0 14
14130: ARRAY
14131: PUSH
14132: LD_INT 11
14134: EQUAL
14135: OR
14136: PUSH
14137: LD_VAR 0 10
14141: PUSH
14142: LD_VAR 0 14
14146: ARRAY
14147: PUSH
14148: LD_INT 7
14150: EQUAL
14151: OR
14152: IFFALSE 14201
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14154: LD_ADDR_VAR 0 19
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: LD_INT 4
14167: PUSH
14168: LD_INT 5
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14177: LD_ADDR_OWVAR 37
14181: PUSH
14182: LD_VAR 0 19
14186: PUSH
14187: LD_INT 1
14189: PPUSH
14190: LD_VAR 0 19
14194: PPUSH
14195: CALL_OW 12
14199: ARRAY
14200: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14201: LD_VAR 0 10
14205: PUSH
14206: LD_VAR 0 14
14210: ARRAY
14211: PUSH
14212: LD_INT 8
14214: EQUAL
14215: PUSH
14216: LD_VAR 0 10
14220: PUSH
14221: LD_VAR 0 14
14225: ARRAY
14226: PUSH
14227: LD_INT 6
14229: EQUAL
14230: OR
14231: PUSH
14232: LD_VAR 0 10
14236: PUSH
14237: LD_VAR 0 14
14241: ARRAY
14242: PUSH
14243: LD_INT 10
14245: EQUAL
14246: OR
14247: IFFALSE 14288
// begin amChassisTab = [ 4 , 5 ] ;
14249: LD_ADDR_VAR 0 19
14253: PUSH
14254: LD_INT 4
14256: PUSH
14257: LD_INT 5
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14264: LD_ADDR_OWVAR 37
14268: PUSH
14269: LD_VAR 0 19
14273: PUSH
14274: LD_INT 1
14276: PPUSH
14277: LD_VAR 0 19
14281: PPUSH
14282: CALL_OW 12
14286: ARRAY
14287: ST_TO_ADDR
// end ; end ;
14288: GO 13988
14290: POP
14291: POP
// veh = CreateVehicle ;
14292: LD_ADDR_VAR 0 16
14296: PUSH
14297: CALL_OW 45
14301: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14302: LD_VAR 0 16
14306: PPUSH
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_INT 0
14314: PPUSH
14315: CALL_OW 49
// if vehControl = 1 then
14319: LD_VAR 0 7
14323: PUSH
14324: LD_INT 1
14326: EQUAL
14327: IFFALSE 14384
// begin hc_gallery =  ;
14329: LD_ADDR_OWVAR 33
14333: PUSH
14334: LD_STRING 
14336: ST_TO_ADDR
// hc_name =  ;
14337: LD_ADDR_OWVAR 26
14341: PUSH
14342: LD_STRING 
14344: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14345: LD_INT 0
14347: PPUSH
14348: LD_INT 3
14350: PPUSH
14351: LD_VAR 0 4
14355: PPUSH
14356: CALL_OW 380
// un = CreateHuman ;
14360: LD_ADDR_VAR 0 15
14364: PUSH
14365: CALL_OW 44
14369: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14370: LD_VAR 0 15
14374: PPUSH
14375: LD_VAR 0 16
14379: PPUSH
14380: CALL_OW 52
// end ; i = i + 1 ;
14384: LD_ADDR_VAR 0 13
14388: PUSH
14389: LD_VAR 0 13
14393: PUSH
14394: LD_INT 1
14396: PLUS
14397: ST_TO_ADDR
// end ; if nation = 2 then
14398: LD_VAR 0 5
14402: PUSH
14403: LD_INT 2
14405: EQUAL
14406: IFFALSE 14830
// begin uc_side = side ;
14408: LD_ADDR_OWVAR 20
14412: PUSH
14413: LD_VAR 0 2
14417: ST_TO_ADDR
// uc_nation = nation ;
14418: LD_ADDR_OWVAR 21
14422: PUSH
14423: LD_VAR 0 5
14427: ST_TO_ADDR
// vc_engine = vehengine ;
14428: LD_ADDR_OWVAR 39
14432: PUSH
14433: LD_VAR 0 6
14437: ST_TO_ADDR
// vc_control = vehcontrol ;
14438: LD_ADDR_OWVAR 38
14442: PUSH
14443: LD_VAR 0 7
14447: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14448: LD_ADDR_OWVAR 40
14452: PUSH
14453: LD_VAR 0 9
14457: PUSH
14458: LD_INT 1
14460: PPUSH
14461: LD_VAR 0 9
14465: PPUSH
14466: CALL_OW 12
14470: ARRAY
14471: ST_TO_ADDR
// for j = 1 to ARWeapons do
14472: LD_ADDR_VAR 0 14
14476: PUSH
14477: DOUBLE
14478: LD_INT 1
14480: DEC
14481: ST_TO_ADDR
14482: LD_VAR 0 9
14486: PUSH
14487: FOR_TO
14488: IFFALSE 14722
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14490: LD_VAR 0 9
14494: PUSH
14495: LD_VAR 0 14
14499: ARRAY
14500: PUSH
14501: LD_INT 24
14503: EQUAL
14504: PUSH
14505: LD_VAR 0 9
14509: PUSH
14510: LD_VAR 0 14
14514: ARRAY
14515: PUSH
14516: LD_INT 22
14518: EQUAL
14519: OR
14520: PUSH
14521: LD_VAR 0 9
14525: PUSH
14526: LD_VAR 0 14
14530: ARRAY
14531: PUSH
14532: LD_INT 23
14534: EQUAL
14535: OR
14536: PUSH
14537: LD_VAR 0 9
14541: PUSH
14542: LD_VAR 0 14
14546: ARRAY
14547: PUSH
14548: LD_INT 30
14550: EQUAL
14551: OR
14552: IFFALSE 14601
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14554: LD_ADDR_VAR 0 18
14558: PUSH
14559: LD_INT 11
14561: PUSH
14562: LD_INT 12
14564: PUSH
14565: LD_INT 13
14567: PUSH
14568: LD_INT 14
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14577: LD_ADDR_OWVAR 37
14581: PUSH
14582: LD_VAR 0 18
14586: PUSH
14587: LD_INT 1
14589: PPUSH
14590: LD_VAR 0 18
14594: PPUSH
14595: CALL_OW 12
14599: ARRAY
14600: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14601: LD_VAR 0 9
14605: PUSH
14606: LD_VAR 0 14
14610: ARRAY
14611: PUSH
14612: LD_INT 29
14614: EQUAL
14615: PUSH
14616: LD_VAR 0 9
14620: PUSH
14621: LD_VAR 0 14
14625: ARRAY
14626: PUSH
14627: LD_INT 28
14629: EQUAL
14630: OR
14631: PUSH
14632: LD_VAR 0 9
14636: PUSH
14637: LD_VAR 0 14
14641: ARRAY
14642: PUSH
14643: LD_INT 27
14645: EQUAL
14646: OR
14647: PUSH
14648: LD_VAR 0 9
14652: PUSH
14653: LD_VAR 0 14
14657: ARRAY
14658: PUSH
14659: LD_INT 26
14661: EQUAL
14662: OR
14663: PUSH
14664: LD_VAR 0 9
14668: PUSH
14669: LD_VAR 0 14
14673: ARRAY
14674: PUSH
14675: LD_INT 25
14677: EQUAL
14678: OR
14679: IFFALSE 14720
// begin arChassisTab = [ 13 , 14 ] ;
14681: LD_ADDR_VAR 0 18
14685: PUSH
14686: LD_INT 13
14688: PUSH
14689: LD_INT 14
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14696: LD_ADDR_OWVAR 37
14700: PUSH
14701: LD_VAR 0 18
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_VAR 0 18
14713: PPUSH
14714: CALL_OW 12
14718: ARRAY
14719: ST_TO_ADDR
// end ; end ;
14720: GO 14487
14722: POP
14723: POP
// veh = CreateVehicle ;
14724: LD_ADDR_VAR 0 16
14728: PUSH
14729: CALL_OW 45
14733: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14734: LD_VAR 0 16
14738: PPUSH
14739: LD_VAR 0 1
14743: PPUSH
14744: LD_INT 0
14746: PPUSH
14747: CALL_OW 49
// if vehcontrol = 1 then
14751: LD_VAR 0 7
14755: PUSH
14756: LD_INT 1
14758: EQUAL
14759: IFFALSE 14816
// begin hc_gallery =  ;
14761: LD_ADDR_OWVAR 33
14765: PUSH
14766: LD_STRING 
14768: ST_TO_ADDR
// hc_name =  ;
14769: LD_ADDR_OWVAR 26
14773: PUSH
14774: LD_STRING 
14776: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14777: LD_INT 0
14779: PPUSH
14780: LD_INT 3
14782: PPUSH
14783: LD_VAR 0 4
14787: PPUSH
14788: CALL_OW 380
// un = CreateHuman ;
14792: LD_ADDR_VAR 0 15
14796: PUSH
14797: CALL_OW 44
14801: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14802: LD_VAR 0 15
14806: PPUSH
14807: LD_VAR 0 16
14811: PPUSH
14812: CALL_OW 52
// end ; i = i + 1 ;
14816: LD_ADDR_VAR 0 13
14820: PUSH
14821: LD_VAR 0 13
14825: PUSH
14826: LD_INT 1
14828: PLUS
14829: ST_TO_ADDR
// end ; if nation = 3 then
14830: LD_VAR 0 5
14834: PUSH
14835: LD_INT 3
14837: EQUAL
14838: IFFALSE 15230
// begin uc_side = side ;
14840: LD_ADDR_OWVAR 20
14844: PUSH
14845: LD_VAR 0 2
14849: ST_TO_ADDR
// uc_nation = nation ;
14850: LD_ADDR_OWVAR 21
14854: PUSH
14855: LD_VAR 0 5
14859: ST_TO_ADDR
// vc_engine = vehengine ;
14860: LD_ADDR_OWVAR 39
14864: PUSH
14865: LD_VAR 0 6
14869: ST_TO_ADDR
// vc_control = vehcontrol ;
14870: LD_ADDR_OWVAR 38
14874: PUSH
14875: LD_VAR 0 7
14879: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14880: LD_ADDR_OWVAR 40
14884: PUSH
14885: LD_VAR 0 8
14889: PUSH
14890: LD_INT 1
14892: PPUSH
14893: LD_VAR 0 8
14897: PPUSH
14898: CALL_OW 12
14902: ARRAY
14903: ST_TO_ADDR
// for j = 1 to RuWeapons do
14904: LD_ADDR_VAR 0 14
14908: PUSH
14909: DOUBLE
14910: LD_INT 1
14912: DEC
14913: ST_TO_ADDR
14914: LD_VAR 0 8
14918: PUSH
14919: FOR_TO
14920: IFFALSE 15122
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14922: LD_VAR 0 8
14926: PUSH
14927: LD_VAR 0 14
14931: ARRAY
14932: PUSH
14933: LD_INT 42
14935: EQUAL
14936: PUSH
14937: LD_VAR 0 8
14941: PUSH
14942: LD_VAR 0 14
14946: ARRAY
14947: PUSH
14948: LD_INT 43
14950: EQUAL
14951: OR
14952: PUSH
14953: LD_VAR 0 8
14957: PUSH
14958: LD_VAR 0 14
14962: ARRAY
14963: PUSH
14964: LD_INT 44
14966: EQUAL
14967: OR
14968: PUSH
14969: LD_VAR 0 8
14973: PUSH
14974: LD_VAR 0 14
14978: ARRAY
14979: PUSH
14980: LD_INT 45
14982: EQUAL
14983: OR
14984: PUSH
14985: LD_VAR 0 8
14989: PUSH
14990: LD_VAR 0 14
14994: ARRAY
14995: PUSH
14996: LD_INT 49
14998: EQUAL
14999: OR
15000: IFFALSE 15049
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15002: LD_ADDR_VAR 0 17
15006: PUSH
15007: LD_INT 21
15009: PUSH
15010: LD_INT 22
15012: PUSH
15013: LD_INT 23
15015: PUSH
15016: LD_INT 24
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15025: LD_ADDR_OWVAR 37
15029: PUSH
15030: LD_VAR 0 17
15034: PUSH
15035: LD_INT 1
15037: PPUSH
15038: LD_VAR 0 17
15042: PPUSH
15043: CALL_OW 12
15047: ARRAY
15048: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15049: LD_VAR 0 8
15053: PUSH
15054: LD_VAR 0 14
15058: ARRAY
15059: PUSH
15060: LD_INT 46
15062: EQUAL
15063: PUSH
15064: LD_VAR 0 8
15068: PUSH
15069: LD_VAR 0 14
15073: ARRAY
15074: PUSH
15075: LD_INT 47
15077: EQUAL
15078: OR
15079: IFFALSE 15120
// begin ruChassisTab = [ 23 , 24 ] ;
15081: LD_ADDR_VAR 0 17
15085: PUSH
15086: LD_INT 23
15088: PUSH
15089: LD_INT 24
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15096: LD_ADDR_OWVAR 37
15100: PUSH
15101: LD_VAR 0 17
15105: PUSH
15106: LD_INT 1
15108: PPUSH
15109: LD_VAR 0 17
15113: PPUSH
15114: CALL_OW 12
15118: ARRAY
15119: ST_TO_ADDR
// end ; end ;
15120: GO 14919
15122: POP
15123: POP
// veh = CreateVehicle ;
15124: LD_ADDR_VAR 0 16
15128: PUSH
15129: CALL_OW 45
15133: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15134: LD_VAR 0 16
15138: PPUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_INT 0
15146: PPUSH
15147: CALL_OW 49
// if vehcontrol = 1 then
15151: LD_VAR 0 7
15155: PUSH
15156: LD_INT 1
15158: EQUAL
15159: IFFALSE 15216
// begin hc_gallery =  ;
15161: LD_ADDR_OWVAR 33
15165: PUSH
15166: LD_STRING 
15168: ST_TO_ADDR
// hc_name =  ;
15169: LD_ADDR_OWVAR 26
15173: PUSH
15174: LD_STRING 
15176: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15177: LD_INT 0
15179: PPUSH
15180: LD_INT 3
15182: PPUSH
15183: LD_VAR 0 4
15187: PPUSH
15188: CALL_OW 380
// un = CreateHuman ;
15192: LD_ADDR_VAR 0 15
15196: PUSH
15197: CALL_OW 44
15201: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15202: LD_VAR 0 15
15206: PPUSH
15207: LD_VAR 0 16
15211: PPUSH
15212: CALL_OW 52
// end ; i = i + 1 ;
15216: LD_ADDR_VAR 0 13
15220: PUSH
15221: LD_VAR 0 13
15225: PUSH
15226: LD_INT 1
15228: PLUS
15229: ST_TO_ADDR
// end ; until i = vehCount ;
15230: LD_VAR 0 13
15234: PUSH
15235: LD_VAR 0 3
15239: EQUAL
15240: IFFALSE 13892
// repeat wait ( 0 0$1 ) ;
15242: LD_INT 35
15244: PPUSH
15245: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15249: LD_ADDR_VAR 0 20
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: LD_VAR 0 2
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 21
15268: PUSH
15269: LD_INT 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 24
15278: PUSH
15279: LD_INT 250
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// if vehicleOK_list > 0 then
15296: LD_VAR 0 20
15300: PUSH
15301: LD_INT 0
15303: GREATER
15304: IFFALSE 15495
// begin for i in vehicleOK_list do
15306: LD_ADDR_VAR 0 13
15310: PUSH
15311: LD_VAR 0 20
15315: PUSH
15316: FOR_IN
15317: IFFALSE 15493
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15319: LD_ADDR_VAR 0 21
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_VAR 0 11
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PPUSH
15336: CALL_OW 69
15340: PPUSH
15341: LD_VAR 0 13
15345: PPUSH
15346: CALL_OW 74
15350: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15351: LD_ADDR_VAR 0 22
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_VAR 0 11
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 2
15370: PUSH
15371: LD_INT 59
15373: PUSH
15374: EMPTY
15375: LIST
15376: PUSH
15377: LD_INT 21
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 21
15389: PUSH
15390: LD_INT 2
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: PPUSH
15410: CALL_OW 69
15414: PPUSH
15415: LD_VAR 0 13
15419: PPUSH
15420: CALL_OW 74
15424: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15425: LD_VAR 0 13
15429: PPUSH
15430: LD_VAR 0 21
15434: PPUSH
15435: CALL_OW 296
15439: PUSH
15440: LD_INT 6
15442: PLUS
15443: PUSH
15444: LD_VAR 0 13
15448: PPUSH
15449: LD_VAR 0 22
15453: PPUSH
15454: CALL_OW 296
15458: LESS
15459: IFFALSE 15477
// begin ComAttackUnit ( i , target1 ) ;
15461: LD_VAR 0 13
15465: PPUSH
15466: LD_VAR 0 21
15470: PPUSH
15471: CALL_OW 115
// end else
15475: GO 15491
// begin ComAttackUnit ( i , target2 ) ;
15477: LD_VAR 0 13
15481: PPUSH
15482: LD_VAR 0 22
15486: PPUSH
15487: CALL_OW 115
// end ; end ;
15491: GO 15316
15493: POP
15494: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15495: LD_INT 22
15497: PUSH
15498: LD_VAR 0 2
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 24
15519: PUSH
15520: LD_INT 250
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 0
15539: EQUAL
15540: IFFALSE 15242
// end ;
15542: LD_VAR 0 12
15546: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15547: LD_INT 0
15549: PPUSH
15550: PPUSH
15551: PPUSH
15552: PPUSH
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15557: LD_ADDR_VAR 0 7
15561: PUSH
15562: LD_INT 22
15564: PUSH
15565: LD_VAR 0 1
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: LD_INT 3
15579: PUSH
15580: LD_INT 24
15582: PUSH
15583: LD_INT 550
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 24
15596: PUSH
15597: LD_INT 250
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15618: LD_ADDR_VAR 0 8
15622: PUSH
15623: LD_INT 22
15625: PUSH
15626: LD_VAR 0 1
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: LD_INT 25
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 25
15650: PUSH
15651: LD_INT 5
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 25
15660: PUSH
15661: LD_INT 8
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 25
15670: PUSH
15671: LD_INT 9
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 24
15687: PUSH
15688: LD_INT 1000
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15705: LD_ADDR_VAR 0 9
15709: PUSH
15710: LD_INT 22
15712: PUSH
15713: LD_VAR 0 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 4
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: ST_TO_ADDR
// if medicCount > 0 then
15741: LD_VAR 0 9
15745: PUSH
15746: LD_INT 0
15748: GREATER
15749: IFFALSE 15823
// begin if damageUnit_list > 0 then
15751: LD_VAR 0 7
15755: PUSH
15756: LD_INT 0
15758: GREATER
15759: IFFALSE 15823
// begin for i in damageUnit_list do
15761: LD_ADDR_VAR 0 5
15765: PUSH
15766: LD_VAR 0 7
15770: PUSH
15771: FOR_IN
15772: IFFALSE 15821
// begin ComMoveToArea ( i , healArea ) ;
15774: LD_VAR 0 5
15778: PPUSH
15779: LD_VAR 0 2
15783: PPUSH
15784: CALL_OW 113
// for j in medicCount do
15788: LD_ADDR_VAR 0 6
15792: PUSH
15793: LD_VAR 0 9
15797: PUSH
15798: FOR_IN
15799: IFFALSE 15817
// AddComHeal ( j , i ) ;
15801: LD_VAR 0 6
15805: PPUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: CALL_OW 188
15815: GO 15798
15817: POP
15818: POP
// end ;
15819: GO 15771
15821: POP
15822: POP
// end ; end ; if soldiersOK_list > 0 then
15823: LD_VAR 0 8
15827: PUSH
15828: LD_INT 0
15830: GREATER
15831: IFFALSE 16022
// begin for i in soldiersOK_list do
15833: LD_ADDR_VAR 0 5
15837: PUSH
15838: LD_VAR 0 8
15842: PUSH
15843: FOR_IN
15844: IFFALSE 16020
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15846: LD_ADDR_VAR 0 10
15850: PUSH
15851: LD_INT 22
15853: PUSH
15854: LD_VAR 0 3
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: PPUSH
15868: LD_VAR 0 5
15872: PPUSH
15873: CALL_OW 74
15877: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15878: LD_ADDR_VAR 0 11
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: LD_VAR 0 3
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: LD_INT 59
15900: PUSH
15901: EMPTY
15902: LIST
15903: PUSH
15904: LD_INT 21
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 21
15916: PUSH
15917: LD_INT 2
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: PPUSH
15937: CALL_OW 69
15941: PPUSH
15942: LD_VAR 0 5
15946: PPUSH
15947: CALL_OW 74
15951: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15952: LD_VAR 0 5
15956: PPUSH
15957: LD_VAR 0 10
15961: PPUSH
15962: CALL_OW 296
15966: PUSH
15967: LD_INT 8
15969: PLUS
15970: PUSH
15971: LD_VAR 0 5
15975: PPUSH
15976: LD_VAR 0 11
15980: PPUSH
15981: CALL_OW 296
15985: LESS
15986: IFFALSE 16004
// begin ComAttackUnit ( i , target1 ) ;
15988: LD_VAR 0 5
15992: PPUSH
15993: LD_VAR 0 10
15997: PPUSH
15998: CALL_OW 115
// end else
16002: GO 16018
// begin ComAttackUnit ( i , target2 ) ;
16004: LD_VAR 0 5
16008: PPUSH
16009: LD_VAR 0 11
16013: PPUSH
16014: CALL_OW 115
// end ; end ;
16018: GO 15843
16020: POP
16021: POP
// end ; end ;
16022: LD_VAR 0 4
16026: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16027: LD_INT 0
16029: PPUSH
16030: PPUSH
// list := [ ] ;
16031: LD_ADDR_VAR 0 5
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// case d of 0 :
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 0
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16184
16051: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16052: LD_ADDR_VAR 0 5
16056: PUSH
16057: LD_VAR 0 1
16061: PUSH
16062: LD_INT 4
16064: MINUS
16065: PUSH
16066: LD_VAR 0 2
16070: PUSH
16071: LD_INT 4
16073: MINUS
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: LIST
16082: PUSH
16083: LD_VAR 0 1
16087: PUSH
16088: LD_INT 3
16090: MINUS
16091: PUSH
16092: LD_VAR 0 2
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: PUSH
16105: LD_VAR 0 1
16109: PUSH
16110: LD_INT 4
16112: PLUS
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: LD_INT 4
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: PUSH
16127: LD_VAR 0 1
16131: PUSH
16132: LD_INT 3
16134: PLUS
16135: PUSH
16136: LD_VAR 0 2
16140: PUSH
16141: LD_INT 3
16143: PLUS
16144: PUSH
16145: LD_INT 5
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: PUSH
16153: LD_VAR 0 1
16157: PUSH
16158: LD_VAR 0 2
16162: PUSH
16163: LD_INT 4
16165: PLUS
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: ST_TO_ADDR
// end ; 1 :
16182: GO 16882
16184: LD_INT 1
16186: DOUBLE
16187: EQUAL
16188: IFTRUE 16192
16190: GO 16325
16192: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16193: LD_ADDR_VAR 0 5
16197: PUSH
16198: LD_VAR 0 1
16202: PUSH
16203: LD_VAR 0 2
16207: PUSH
16208: LD_INT 4
16210: MINUS
16211: PUSH
16212: LD_INT 3
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: PUSH
16220: LD_VAR 0 1
16224: PUSH
16225: LD_INT 3
16227: MINUS
16228: PUSH
16229: LD_VAR 0 2
16233: PUSH
16234: LD_INT 3
16236: MINUS
16237: PUSH
16238: LD_INT 2
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: PUSH
16246: LD_VAR 0 1
16250: PUSH
16251: LD_INT 4
16253: MINUS
16254: PUSH
16255: LD_VAR 0 2
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: LIST
16267: PUSH
16268: LD_VAR 0 1
16272: PUSH
16273: LD_VAR 0 2
16277: PUSH
16278: LD_INT 3
16280: PLUS
16281: PUSH
16282: LD_INT 0
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: LD_VAR 0 1
16294: PUSH
16295: LD_INT 4
16297: PLUS
16298: PUSH
16299: LD_VAR 0 2
16303: PUSH
16304: LD_INT 4
16306: PLUS
16307: PUSH
16308: LD_INT 5
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: ST_TO_ADDR
// end ; 2 :
16323: GO 16882
16325: LD_INT 2
16327: DOUBLE
16328: EQUAL
16329: IFTRUE 16333
16331: GO 16462
16333: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16334: LD_ADDR_VAR 0 5
16338: PUSH
16339: LD_VAR 0 1
16343: PUSH
16344: LD_VAR 0 2
16348: PUSH
16349: LD_INT 3
16351: MINUS
16352: PUSH
16353: LD_INT 3
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: LD_VAR 0 1
16365: PUSH
16366: LD_INT 4
16368: PLUS
16369: PUSH
16370: LD_VAR 0 2
16374: PUSH
16375: LD_INT 4
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: LIST
16382: PUSH
16383: LD_VAR 0 1
16387: PUSH
16388: LD_VAR 0 2
16392: PUSH
16393: LD_INT 4
16395: PLUS
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: PUSH
16405: LD_VAR 0 1
16409: PUSH
16410: LD_INT 3
16412: MINUS
16413: PUSH
16414: LD_VAR 0 2
16418: PUSH
16419: LD_INT 1
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: LD_VAR 0 1
16431: PUSH
16432: LD_INT 4
16434: MINUS
16435: PUSH
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 4
16443: MINUS
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: ST_TO_ADDR
// end ; 3 :
16460: GO 16882
16462: LD_INT 3
16464: DOUBLE
16465: EQUAL
16466: IFTRUE 16470
16468: GO 16603
16470: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16471: LD_ADDR_VAR 0 5
16475: PUSH
16476: LD_VAR 0 1
16480: PUSH
16481: LD_INT 3
16483: PLUS
16484: PUSH
16485: LD_VAR 0 2
16489: PUSH
16490: LD_INT 4
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: PUSH
16498: LD_VAR 0 1
16502: PUSH
16503: LD_INT 4
16505: PLUS
16506: PUSH
16507: LD_VAR 0 2
16511: PUSH
16512: LD_INT 4
16514: PLUS
16515: PUSH
16516: LD_INT 5
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: PUSH
16524: LD_VAR 0 1
16528: PUSH
16529: LD_INT 4
16531: MINUS
16532: PUSH
16533: LD_VAR 0 2
16537: PUSH
16538: LD_INT 1
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: LD_VAR 0 1
16550: PUSH
16551: LD_VAR 0 2
16555: PUSH
16556: LD_INT 4
16558: MINUS
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_VAR 0 1
16572: PUSH
16573: LD_INT 3
16575: MINUS
16576: PUSH
16577: LD_VAR 0 2
16581: PUSH
16582: LD_INT 3
16584: MINUS
16585: PUSH
16586: LD_INT 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: ST_TO_ADDR
// end ; 4 :
16601: GO 16882
16603: LD_INT 4
16605: DOUBLE
16606: EQUAL
16607: IFTRUE 16611
16609: GO 16744
16611: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16612: LD_ADDR_VAR 0 5
16616: PUSH
16617: LD_VAR 0 1
16621: PUSH
16622: LD_VAR 0 2
16626: PUSH
16627: LD_INT 4
16629: PLUS
16630: PUSH
16631: LD_INT 0
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: PUSH
16639: LD_VAR 0 1
16643: PUSH
16644: LD_INT 3
16646: PLUS
16647: PUSH
16648: LD_VAR 0 2
16652: PUSH
16653: LD_INT 3
16655: PLUS
16656: PUSH
16657: LD_INT 5
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: LD_VAR 0 1
16669: PUSH
16670: LD_INT 3
16672: PLUS
16673: PUSH
16674: LD_VAR 0 2
16678: PUSH
16679: LD_INT 4
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: PUSH
16687: LD_VAR 0 1
16691: PUSH
16692: LD_VAR 0 2
16696: PUSH
16697: LD_INT 3
16699: MINUS
16700: PUSH
16701: LD_INT 3
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: PUSH
16709: LD_VAR 0 1
16713: PUSH
16714: LD_INT 4
16716: MINUS
16717: PUSH
16718: LD_VAR 0 2
16722: PUSH
16723: LD_INT 4
16725: MINUS
16726: PUSH
16727: LD_INT 2
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: ST_TO_ADDR
// end ; 5 :
16742: GO 16882
16744: LD_INT 5
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16881
16752: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16753: LD_ADDR_VAR 0 5
16757: PUSH
16758: LD_VAR 0 1
16762: PUSH
16763: LD_INT 4
16765: MINUS
16766: PUSH
16767: LD_VAR 0 2
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PUSH
16780: LD_VAR 0 1
16784: PUSH
16785: LD_VAR 0 2
16789: PUSH
16790: LD_INT 4
16792: MINUS
16793: PUSH
16794: LD_INT 3
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: PUSH
16802: LD_VAR 0 1
16806: PUSH
16807: LD_INT 4
16809: PLUS
16810: PUSH
16811: LD_VAR 0 2
16815: PUSH
16816: LD_INT 4
16818: PLUS
16819: PUSH
16820: LD_INT 5
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: PUSH
16828: LD_VAR 0 1
16832: PUSH
16833: LD_INT 3
16835: PLUS
16836: PUSH
16837: LD_VAR 0 2
16841: PUSH
16842: LD_INT 4
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: LD_VAR 0 1
16854: PUSH
16855: LD_VAR 0 2
16859: PUSH
16860: LD_INT 3
16862: PLUS
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: ST_TO_ADDR
// end ; end ;
16879: GO 16882
16881: POP
// result := list ;
16882: LD_ADDR_VAR 0 4
16886: PUSH
16887: LD_VAR 0 5
16891: ST_TO_ADDR
// end ; end_of_file
16892: LD_VAR 0 4
16896: RET
// every 1 do var i ;
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
// begin InGameOn ;
16903: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16907: LD_INT 53
16909: PPUSH
16910: LD_INT 40
16912: PPUSH
16913: CALL_OW 84
// wait ( 0 0$5 ) ;
16917: LD_INT 175
16919: PPUSH
16920: CALL_OW 67
// if gammaCommander = 1 then
16924: LD_EXP 12
16928: PUSH
16929: LD_INT 1
16931: EQUAL
16932: IFFALSE 16943
// CenterNowOnUnits ( Donaldson ) ;
16934: LD_EXP 3
16938: PPUSH
16939: CALL_OW 87
// if gammaCommander = 2 then
16943: LD_EXP 12
16947: PUSH
16948: LD_INT 2
16950: EQUAL
16951: IFFALSE 16962
// CenterNowOnUnits ( Brown ) ;
16953: LD_EXP 2
16957: PPUSH
16958: CALL_OW 87
// if gammaCommander = 3 then
16962: LD_EXP 12
16966: PUSH
16967: LD_INT 3
16969: EQUAL
16970: IFFALSE 16981
// CenterNowOnUnits ( Houten ) ;
16972: LD_EXP 13
16976: PPUSH
16977: CALL_OW 87
// if gammaCommander = 1 then
16981: LD_EXP 12
16985: PUSH
16986: LD_INT 1
16988: EQUAL
16989: IFFALSE 17003
// Say ( Donaldson , D1-Don-1 ) ;
16991: LD_EXP 3
16995: PPUSH
16996: LD_STRING D1-Don-1
16998: PPUSH
16999: CALL_OW 88
// if gammaCommander = 2 then
17003: LD_EXP 12
17007: PUSH
17008: LD_INT 2
17010: EQUAL
17011: IFFALSE 17025
// Say ( Brown , D1-Brown-1 ) ;
17013: LD_EXP 2
17017: PPUSH
17018: LD_STRING D1-Brown-1
17020: PPUSH
17021: CALL_OW 88
// if gammaCommander = 3 then
17025: LD_EXP 12
17029: PUSH
17030: LD_INT 3
17032: EQUAL
17033: IFFALSE 17047
// Say ( Houten , D1-VanH-1 ) ;
17035: LD_EXP 13
17039: PPUSH
17040: LD_STRING D1-VanH-1
17042: PPUSH
17043: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17047: LD_EXP 22
17051: PPUSH
17052: LD_STRING D1-Har-1
17054: PPUSH
17055: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
17059: LD_INT 53
17061: PPUSH
17062: LD_INT 40
17064: PPUSH
17065: CALL_OW 84
// if gammaCommander = 1 then
17069: LD_EXP 12
17073: PUSH
17074: LD_INT 1
17076: EQUAL
17077: IFFALSE 17091
// Say ( Donaldson , D1-Don-2 ) ;
17079: LD_EXP 3
17083: PPUSH
17084: LD_STRING D1-Don-2
17086: PPUSH
17087: CALL_OW 88
// if gammaCommander = 2 then
17091: LD_EXP 12
17095: PUSH
17096: LD_INT 2
17098: EQUAL
17099: IFFALSE 17113
// Say ( Brown , D1-Brown-2 ) ;
17101: LD_EXP 2
17105: PPUSH
17106: LD_STRING D1-Brown-2
17108: PPUSH
17109: CALL_OW 88
// if gammaCommander = 3 then
17113: LD_EXP 12
17117: PUSH
17118: LD_INT 3
17120: EQUAL
17121: IFFALSE 17135
// Say ( Houten , D1-VanH-2 ) ;
17123: LD_EXP 13
17127: PPUSH
17128: LD_STRING D1-VanH-2
17130: PPUSH
17131: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17135: LD_EXP 22
17139: PPUSH
17140: LD_STRING D1-Har-2
17142: PPUSH
17143: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17147: LD_INT 22
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 33
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 61
17169: PUSH
17170: EMPTY
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: IFFALSE 17247
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17184: LD_ADDR_VAR 0 1
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 33
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 61
17211: PUSH
17212: EMPTY
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: PUSH
17225: FOR_IN
17226: IFFALSE 17245
// ComAgressiveMove ( i , 70 , 41 ) ;
17228: LD_VAR 0 1
17232: PPUSH
17233: LD_INT 70
17235: PPUSH
17236: LD_INT 41
17238: PPUSH
17239: CALL_OW 114
17243: GO 17225
17245: POP
17246: POP
// repeat wait ( 0 0$1 ) ;
17247: LD_INT 35
17249: PPUSH
17250: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: LD_INT 22
17261: PUSH
17262: LD_INT 6
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: PUSH
17277: FOR_IN
17278: IFFALSE 17297
// ComAgressiveMove ( i , 54 , 20 ) ;
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_INT 54
17287: PPUSH
17288: LD_INT 20
17290: PPUSH
17291: CALL_OW 114
17295: GO 17277
17297: POP
17298: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: LD_INT 22
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 25
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: LD_INT 54
17329: PUSH
17330: EMPTY
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: PPUSH
17342: CALL_OW 69
17346: PUSH
17347: FOR_IN
17348: IFFALSE 17382
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17350: LD_VAR 0 1
17354: PPUSH
17355: LD_INT 70
17357: PPUSH
17358: LD_INT 41
17360: PPUSH
17361: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_INT 46
17372: PPUSH
17373: LD_INT 39
17375: PPUSH
17376: CALL_OW 174
// end ;
17380: GO 17347
17382: POP
17383: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_INT 22
17391: PUSH
17392: LD_INT 1
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 21
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 24
17414: PUSH
17415: LD_INT 500
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: PPUSH
17431: CALL_OW 69
17435: PUSH
17436: FOR_IN
17437: IFFALSE 17470
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17439: LD_VAR 0 1
17443: PPUSH
17444: LD_EXP 37
17448: PPUSH
17449: CALL_OW 250
17453: PPUSH
17454: LD_EXP 37
17458: PPUSH
17459: CALL_OW 251
17463: PPUSH
17464: CALL_OW 111
17468: GO 17436
17470: POP
17471: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17472: LD_INT 22
17474: PUSH
17475: LD_INT 6
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 21
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 24
17494: PUSH
17495: LD_INT 250
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: PPUSH
17507: CALL_OW 69
17511: PUSH
17512: LD_INT 6
17514: LESS
17515: IFFALSE 17247
// InGameOff ;
17517: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17521: LD_STRING M1
17523: PPUSH
17524: CALL_OW 337
// SaveForQuickRestart ;
17528: CALL_OW 22
// startCutscene = 0 ;
17532: LD_ADDR_EXP 38
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// end ;
17540: PPOPN 1
17542: END
// every 1 1$0 do
17543: GO 17545
17545: DISABLE
// begin PrepareSupportFromDelta ;
17546: CALL 3126 0 0
// firstAttack = 1 ;
17550: LD_ADDR_EXP 33
17554: PUSH
17555: LD_INT 1
17557: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17558: LD_EXP 8
17562: PPUSH
17563: CALL_OW 302
17567: IFFALSE 17583
// begin Say ( Gladstone , D2-Glad-1 ) ;
17569: LD_EXP 8
17573: PPUSH
17574: LD_STRING D2-Glad-1
17576: PPUSH
17577: CALL_OW 88
// end else
17581: GO 17685
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17583: LD_INT 4
17585: PPUSH
17586: LD_INT 22
17588: PUSH
17589: LD_INT 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 21
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: LD_INT 25
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 25
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 25
17631: PUSH
17632: LD_INT 3
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 25
17641: PUSH
17642: LD_INT 4
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: PPUSH
17661: CALL_OW 70
17665: PUSH
17666: LD_EXP 15
17670: PUSH
17671: EMPTY
17672: LIST
17673: DIFF
17674: PPUSH
17675: LD_STRING D2-Sol1-1
17677: PPUSH
17678: LD_STRING D2-FSol1-1
17680: PPUSH
17681: CALL 6663 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17685: LD_EXP 3
17689: PPUSH
17690: CALL_OW 302
17694: PUSH
17695: LD_EXP 12
17699: PUSH
17700: LD_INT 1
17702: EQUAL
17703: AND
17704: IFFALSE 17718
// Say ( Donaldson , D2-Don-1 ) ;
17706: LD_EXP 3
17710: PPUSH
17711: LD_STRING D2-Don-1
17713: PPUSH
17714: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17718: LD_EXP 2
17722: PPUSH
17723: CALL_OW 302
17727: PUSH
17728: LD_EXP 12
17732: PUSH
17733: LD_INT 2
17735: EQUAL
17736: AND
17737: IFFALSE 17751
// Say ( Brown , D2-Brown-1 ) ;
17739: LD_EXP 2
17743: PPUSH
17744: LD_STRING D2-Brown-1
17746: PPUSH
17747: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17751: LD_EXP 13
17755: PPUSH
17756: CALL_OW 302
17760: PUSH
17761: LD_EXP 12
17765: PUSH
17766: LD_INT 3
17768: EQUAL
17769: AND
17770: IFFALSE 17784
// Say ( Houten , D2-VanH-1 ) ;
17772: LD_EXP 13
17776: PPUSH
17777: LD_STRING D2-VanH-1
17779: PPUSH
17780: CALL_OW 88
// end ;
17784: END
// every 0 0$1 do
17785: GO 17787
17787: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
17788: LD_STRING 07_time
17790: PPUSH
17791: LD_INT 12600
17793: PPUSH
17794: CALL_OW 30
17798: PUSH
17799: LD_INT 3
17801: DIV
17802: PPUSH
17803: CALL_OW 67
// PrepareMacmillanSquad ;
17807: CALL 3788 0 0
// CenterNowOnUnits ( JMM ) ;
17811: LD_EXP 1
17815: PPUSH
17816: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17820: LD_EXP 1
17824: PPUSH
17825: LD_STRING D3-JMM-1
17827: PPUSH
17828: CALL_OW 88
// JMMArrive = 1 ;
17832: LD_ADDR_EXP 39
17836: PUSH
17837: LD_INT 1
17839: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17840: LD_EXP 3
17844: PPUSH
17845: CALL_OW 302
17849: PUSH
17850: LD_EXP 12
17854: PUSH
17855: LD_INT 1
17857: EQUAL
17858: AND
17859: IFFALSE 17875
// begin Say ( Donaldson , D3-Don-1 ) ;
17861: LD_EXP 3
17865: PPUSH
17866: LD_STRING D3-Don-1
17868: PPUSH
17869: CALL_OW 88
// end else
17873: GO 17927
// begin if gammaCommander = 1 then
17875: LD_EXP 12
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 17927
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17885: LD_EXP 11
17889: PPUSH
17890: LD_INT 26
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 72
17904: PPUSH
17905: LD_STRING D3-Sol1-1
17907: PPUSH
17908: LD_STRING D3-Sol1-1
17910: PPUSH
17911: CALL 6663 0 3
// Say ( JMM , D3-JMM-2 ) ;
17915: LD_EXP 1
17919: PPUSH
17920: LD_STRING D3-JMM-2
17922: PPUSH
17923: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17927: LD_EXP 2
17931: PPUSH
17932: CALL_OW 302
17936: PUSH
17937: LD_EXP 12
17941: PUSH
17942: LD_INT 2
17944: EQUAL
17945: AND
17946: IFFALSE 17962
// begin Say ( Brown , D3-Brown-1 ) ;
17948: LD_EXP 2
17952: PPUSH
17953: LD_STRING D3-Brown-1
17955: PPUSH
17956: CALL_OW 88
// end else
17960: GO 18014
// begin if gammaCommander = 2 then
17962: LD_EXP 12
17966: PUSH
17967: LD_INT 2
17969: EQUAL
17970: IFFALSE 18014
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17972: LD_EXP 11
17976: PPUSH
17977: LD_INT 26
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL_OW 72
17991: PPUSH
17992: LD_STRING D3-Sol1-1a
17994: PPUSH
17995: LD_STRING D3-Sol1-1a
17997: PPUSH
17998: CALL 6663 0 3
// Say ( JMM , D3-JMM-2 ) ;
18002: LD_EXP 1
18006: PPUSH
18007: LD_STRING D3-JMM-2
18009: PPUSH
18010: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
18014: LD_EXP 13
18018: PPUSH
18019: CALL_OW 302
18023: PUSH
18024: LD_EXP 12
18028: PUSH
18029: LD_INT 3
18031: EQUAL
18032: AND
18033: IFFALSE 18049
// begin Say ( Houten , D3-VanH-1 ) ;
18035: LD_EXP 13
18039: PPUSH
18040: LD_STRING D3-VanH-1
18042: PPUSH
18043: CALL_OW 88
// end else
18047: GO 18101
// begin if gammaCommander = 3 then
18049: LD_EXP 12
18053: PUSH
18054: LD_INT 3
18056: EQUAL
18057: IFFALSE 18101
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
18059: LD_EXP 11
18063: PPUSH
18064: LD_INT 26
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PPUSH
18074: CALL_OW 72
18078: PPUSH
18079: LD_STRING D3-Sol1-1b
18081: PPUSH
18082: LD_STRING D3-Sol1-1b
18084: PPUSH
18085: CALL 6663 0 3
// Say ( JMM , D3-JMM-2 ) ;
18089: LD_EXP 1
18093: PPUSH
18094: LD_STRING D3-JMM-2
18096: PPUSH
18097: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
18101: LD_EXP 15
18105: PPUSH
18106: CALL_OW 302
18110: IFFALSE 18138
// begin Say ( Joan , D3a-Joan-1 ) ;
18112: LD_EXP 15
18116: PPUSH
18117: LD_STRING D3a-Joan-1
18119: PPUSH
18120: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18124: LD_EXP 1
18128: PPUSH
18129: LD_STRING D3a-JMM-1
18131: PPUSH
18132: CALL_OW 88
// end else
18136: GO 18480
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18138: LD_STRING 06_JoanStatus_1
18140: PPUSH
18141: LD_INT 0
18143: PPUSH
18144: CALL_OW 30
18148: PUSH
18149: LD_INT 1
18151: EQUAL
18152: IFFALSE 18480
// begin Say ( JMM , D3b-JMM-1 ) ;
18154: LD_EXP 1
18158: PPUSH
18159: LD_STRING D3b-JMM-1
18161: PPUSH
18162: CALL_OW 88
// if gammaCommander = 1 then
18166: LD_EXP 12
18170: PUSH
18171: LD_INT 1
18173: EQUAL
18174: IFFALSE 18231
// if IsOK ( Donaldson ) then
18176: LD_EXP 3
18180: PPUSH
18181: CALL_OW 302
18185: IFFALSE 18201
// Say ( Donaldson , D3b-Don-1 ) else
18187: LD_EXP 3
18191: PPUSH
18192: LD_STRING D3b-Don-1
18194: PPUSH
18195: CALL_OW 88
18199: GO 18231
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18201: LD_EXP 11
18205: PPUSH
18206: LD_INT 26
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 72
18220: PPUSH
18221: LD_STRING D3b-Sol1-1
18223: PPUSH
18224: LD_STRING D3b-Sol1-1
18226: PPUSH
18227: CALL 6663 0 3
// if gammaCommander = 2 then
18231: LD_EXP 12
18235: PUSH
18236: LD_INT 2
18238: EQUAL
18239: IFFALSE 18296
// if IsOk ( Brown ) then
18241: LD_EXP 2
18245: PPUSH
18246: CALL_OW 302
18250: IFFALSE 18266
// Say ( Brown , D3b-Brown-1 ) else
18252: LD_EXP 2
18256: PPUSH
18257: LD_STRING D3b-Brown-1
18259: PPUSH
18260: CALL_OW 88
18264: GO 18296
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18266: LD_EXP 11
18270: PPUSH
18271: LD_INT 26
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PPUSH
18281: CALL_OW 72
18285: PPUSH
18286: LD_STRING D3b-Sol1-1
18288: PPUSH
18289: LD_STRING D3b-Sol1-1
18291: PPUSH
18292: CALL 6663 0 3
// if gammaCommander = 3 then
18296: LD_EXP 12
18300: PUSH
18301: LD_INT 3
18303: EQUAL
18304: IFFALSE 18361
// if IsOk ( Houten ) then
18306: LD_EXP 13
18310: PPUSH
18311: CALL_OW 302
18315: IFFALSE 18331
// Say ( Houten , D3b-VanH-1 ) else
18317: LD_EXP 13
18321: PPUSH
18322: LD_STRING D3b-VanH-1
18324: PPUSH
18325: CALL_OW 88
18329: GO 18361
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18331: LD_EXP 11
18335: PPUSH
18336: LD_INT 26
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 72
18350: PPUSH
18351: LD_STRING D3b-Sol1-1
18353: PPUSH
18354: LD_STRING D3b-Sol1-1
18356: PPUSH
18357: CALL 6663 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
18361: LD_EXP 11
18365: PPUSH
18366: LD_INT 26
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 72
18380: PUSH
18381: LD_EXP 12
18385: PUSH
18386: LD_INT 1
18388: EQUAL
18389: PUSH
18390: LD_EXP 3
18394: PPUSH
18395: CALL_OW 302
18399: AND
18400: OR
18401: PUSH
18402: LD_EXP 12
18406: PUSH
18407: LD_INT 2
18409: EQUAL
18410: PUSH
18411: LD_EXP 2
18415: PPUSH
18416: CALL_OW 302
18420: AND
18421: OR
18422: PUSH
18423: LD_EXP 12
18427: PUSH
18428: LD_INT 3
18430: EQUAL
18431: PUSH
18432: LD_EXP 13
18436: PPUSH
18437: CALL_OW 302
18441: AND
18442: OR
18443: IFFALSE 18457
// Say ( JMM , D3b-JMM-2 ) ;
18445: LD_EXP 1
18449: PPUSH
18450: LD_STRING D3b-JMM-2
18452: PPUSH
18453: CALL_OW 88
// if IsOK ( Lisa ) then
18457: LD_EXP 6
18461: PPUSH
18462: CALL_OW 302
18466: IFFALSE 18480
// Say ( Lisa , D3b-Lisa-2 ) ;
18468: LD_EXP 6
18472: PPUSH
18473: LD_STRING D3b-Lisa-2
18475: PPUSH
18476: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18480: LD_INT 22
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 21
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 26
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: LD_INT 25
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 25
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 25
18535: PUSH
18536: LD_INT 3
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 25
18545: PUSH
18546: LD_INT 4
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL_OW 69
18570: PUSH
18571: LD_EXP 1
18575: PUSH
18576: LD_EXP 2
18580: PUSH
18581: LD_EXP 3
18585: PUSH
18586: LD_EXP 4
18590: PUSH
18591: LD_EXP 5
18595: PUSH
18596: LD_EXP 6
18600: PUSH
18601: LD_EXP 7
18605: PUSH
18606: LD_EXP 8
18610: PUSH
18611: LD_EXP 9
18615: PUSH
18616: LD_EXP 10
18620: PUSH
18621: LD_EXP 15
18625: PUSH
18626: LD_EXP 14
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: DIFF
18645: PPUSH
18646: LD_STRING DCa-Sol1-1
18648: PPUSH
18649: LD_STRING DCa-Sol1-1
18651: PPUSH
18652: CALL 6663 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18656: LD_EXP 1
18660: PPUSH
18661: LD_STRING DCb-JMM-1
18663: PPUSH
18664: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18668: LD_INT 22
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 21
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 26
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: LD_INT 25
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 25
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 25
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 25
18733: PUSH
18734: LD_INT 4
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: PUSH
18759: LD_EXP 1
18763: PUSH
18764: LD_EXP 2
18768: PUSH
18769: LD_EXP 3
18773: PUSH
18774: LD_EXP 4
18778: PUSH
18779: LD_EXP 5
18783: PUSH
18784: LD_EXP 6
18788: PUSH
18789: LD_EXP 7
18793: PUSH
18794: LD_EXP 8
18798: PUSH
18799: LD_EXP 9
18803: PUSH
18804: LD_EXP 10
18808: PUSH
18809: LD_EXP 15
18813: PUSH
18814: LD_EXP 14
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: DIFF
18833: PPUSH
18834: LD_STRING DCb-Sol1-1
18836: PPUSH
18837: LD_STRING DCb-Sol1-1
18839: PPUSH
18840: CALL 6663 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18844: LD_EXP 1
18848: PPUSH
18849: LD_STRING DCb-JMM-2
18851: PPUSH
18852: CALL_OW 88
// secondAttack = 1 ;
18856: LD_ADDR_EXP 34
18860: PUSH
18861: LD_INT 1
18863: ST_TO_ADDR
// end ;
18864: END
// every 0 0$01 trigger JMMArrive = 1 do
18865: LD_EXP 39
18869: PUSH
18870: LD_INT 1
18872: EQUAL
18873: IFFALSE 18953
18875: GO 18877
18877: DISABLE
// begin wait ( 3 3$0 ) ;
18878: LD_INT 6300
18880: PPUSH
18881: CALL_OW 67
// DialogueOn ;
18885: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18889: LD_EXP 23
18893: PPUSH
18894: LD_STRING D4-Pow-1
18896: PPUSH
18897: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18901: LD_EXP 1
18905: PPUSH
18906: LD_STRING D4-JMM-1
18908: PPUSH
18909: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18913: LD_EXP 23
18917: PPUSH
18918: LD_STRING D4-Pow-2
18920: PPUSH
18921: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18925: LD_EXP 1
18929: PPUSH
18930: LD_STRING D4-JMM-2
18932: PPUSH
18933: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18937: LD_EXP 23
18941: PPUSH
18942: LD_STRING D4-Pow-3
18944: PPUSH
18945: CALL_OW 94
// DialogueOff ;
18949: CALL_OW 7
// end ;
18953: END
// every 0 0$01 trigger JMMArrive = 1 do
18954: LD_EXP 39
18958: PUSH
18959: LD_INT 1
18961: EQUAL
18962: IFFALSE 18994
18964: GO 18966
18966: DISABLE
// begin wait ( 8 8$0 ) ;
18967: LD_INT 16800
18969: PPUSH
18970: CALL_OW 67
// DialogueOn ;
18974: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18978: LD_EXP 23
18982: PPUSH
18983: LD_STRING D4a-Pow-1
18985: PPUSH
18986: CALL_OW 94
// DialogueOff ;
18990: CALL_OW 7
// end ;
18994: END
// every 0 0$01 trigger JMMArrive = 1 do
18995: LD_EXP 39
18999: PUSH
19000: LD_INT 1
19002: EQUAL
19003: IFFALSE 19048
19005: GO 19007
19007: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
19008: LD_INT 21000
19010: PUSH
19011: LD_INT 25200
19013: PUSH
19014: LD_INT 31500
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_OWVAR 67
19026: ARRAY
19027: PPUSH
19028: CALL_OW 67
// PrepareSikorsky ;
19032: CALL 5247 0 0
// SikorskyArrive = 1 ;
19036: LD_ADDR_EXP 18
19040: PUSH
19041: LD_INT 1
19043: ST_TO_ADDR
// PrepareSikorskyArmy ;
19044: CALL 5387 0 0
// end ;
19048: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
19049: LD_EXP 17
19053: PPUSH
19054: LD_INT 5
19056: PPUSH
19057: CALL_OW 308
19061: IFFALSE 19253
19063: GO 19065
19065: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
19066: LD_EXP 17
19070: PPUSH
19071: CALL_OW 87
// DialogueOn ;
19075: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
19079: LD_EXP 16
19083: PPUSH
19084: LD_STRING D5-Sik-1
19086: PPUSH
19087: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
19091: LD_EXP 1
19095: PPUSH
19096: LD_STRING D5-JMM-1a
19098: PPUSH
19099: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
19103: LD_EXP 16
19107: PPUSH
19108: LD_STRING D5-Sik-2
19110: PPUSH
19111: CALL_OW 88
// case query ( QSikorski ) of 1 :
19115: LD_STRING QSikorski
19117: PPUSH
19118: CALL_OW 97
19122: PUSH
19123: LD_INT 1
19125: DOUBLE
19126: EQUAL
19127: IFTRUE 19131
19129: GO 19154
19131: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
19132: LD_EXP 16
19136: PPUSH
19137: LD_STRING D5a-Sik-1
19139: PPUSH
19140: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
19144: LD_ADDR_EXP 19
19148: PUSH
19149: LD_INT 2100
19151: ST_TO_ADDR
// end ; 2 :
19152: GO 19241
19154: LD_INT 2
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19185
19162: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
19163: LD_EXP 16
19167: PPUSH
19168: LD_STRING D5b-Sik-1
19170: PPUSH
19171: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19175: LD_ADDR_EXP 19
19179: PUSH
19180: LD_INT 10500
19182: ST_TO_ADDR
// end ; 3 :
19183: GO 19241
19185: LD_INT 3
19187: DOUBLE
19188: EQUAL
19189: IFTRUE 19193
19191: GO 19240
19193: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
19194: LD_EXP 16
19198: PPUSH
19199: LD_STRING D5c-Sik-1
19201: PPUSH
19202: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
19206: LD_EXP 1
19210: PPUSH
19211: LD_STRING D5c-JMM-1
19213: PPUSH
19214: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
19218: LD_EXP 16
19222: PPUSH
19223: LD_STRING D5c-Sik-2
19225: PPUSH
19226: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19230: LD_ADDR_EXP 19
19234: PUSH
19235: LD_INT 10500
19237: ST_TO_ADDR
// end ; end ;
19238: GO 19241
19240: POP
// DialogueOff ;
19241: CALL_OW 7
// timerStatus = 1 ;
19245: LD_ADDR_EXP 35
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// end ;
19253: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19254: LD_EXP 19
19258: PUSH
19259: LD_INT 35
19261: LESS
19262: IFFALSE 19310
19264: GO 19266
19266: DISABLE
// begin timerStatus = 0 ;
19267: LD_ADDR_EXP 35
19271: PUSH
19272: LD_INT 0
19274: ST_TO_ADDR
// DialogueOn ;
19275: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19279: LD_EXP 16
19283: PPUSH
19284: LD_STRING D6-Sik-1
19286: PPUSH
19287: CALL_OW 88
// DialogueOff ;
19291: CALL_OW 7
// SikorskyAI = 1 ;
19295: LD_ADDR_EXP 20
19299: PUSH
19300: LD_INT 1
19302: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19303: LD_STRING M2
19305: PPUSH
19306: CALL_OW 337
// end ;
19310: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19311: LD_EXP 17
19315: PPUSH
19316: LD_INT 18
19318: PPUSH
19319: CALL_OW 308
19323: IFFALSE 19407
19325: GO 19327
19327: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19328: LD_EXP 16
19332: PPUSH
19333: LD_STRING D7-Sik-1
19335: PPUSH
19336: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19340: LD_EXP 1
19344: PPUSH
19345: LD_INT 24
19347: PPUSH
19348: CALL_OW 308
19352: PUSH
19353: LD_EXP 1
19357: PPUSH
19358: CALL_OW 310
19362: OR
19363: IFFALSE 19387
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19365: LD_EXP 16
19369: PPUSH
19370: LD_STRING D7a-Sik-1
19372: PPUSH
19373: CALL_OW 88
// SikorskyStatus = 1 ;
19377: LD_ADDR_EXP 21
19381: PUSH
19382: LD_INT 1
19384: ST_TO_ADDR
// end else
19385: GO 19407
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19387: LD_EXP 16
19391: PPUSH
19392: LD_STRING D7b-Sik-1
19394: PPUSH
19395: CALL_OW 88
// SikorskyStatus = 2 ;
19399: LD_ADDR_EXP 21
19403: PUSH
19404: LD_INT 2
19406: ST_TO_ADDR
// end ; end ;
19407: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19408: LD_EXP 36
19412: PUSH
19413: LD_INT 1
19415: EQUAL
19416: IFFALSE 19525
19418: GO 19420
19420: DISABLE
19421: LD_INT 0
19423: PPUSH
// begin enable ;
19424: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19425: LD_ADDR_VAR 0 1
19429: PUSH
19430: LD_INT 22
19432: PUSH
19433: LD_INT 3
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PPUSH
19440: CALL_OW 69
19444: PUSH
19445: FOR_IN
19446: IFFALSE 19473
// if IsInArea ( i , RussianEscape ) then
19448: LD_VAR 0 1
19452: PPUSH
19453: LD_INT 22
19455: PPUSH
19456: CALL_OW 308
19460: IFFALSE 19471
// RemoveUnit ( i ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 64
19471: GO 19445
19473: POP
19474: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19475: LD_ADDR_VAR 0 1
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_INT 6
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PPUSH
19490: CALL_OW 69
19494: PUSH
19495: FOR_IN
19496: IFFALSE 19523
// if IsInArea ( i , RussianEscape ) then
19498: LD_VAR 0 1
19502: PPUSH
19503: LD_INT 22
19505: PPUSH
19506: CALL_OW 308
19510: IFFALSE 19521
// RemoveUnit ( i ) ;
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 64
19521: GO 19495
19523: POP
19524: POP
// end ; end_of_file
19525: PPOPN 1
19527: END
// on BuildingComplete ( building ) do var tmp , un ;
19528: LD_INT 0
19530: PPUSH
19531: PPUSH
// begin if GetSide ( building ) = 3 then
19532: LD_VAR 0 1
19536: PPUSH
19537: CALL_OW 255
19541: PUSH
19542: LD_INT 3
19544: EQUAL
19545: IFFALSE 20032
// begin if GetBType ( building ) = b_depot then
19547: LD_VAR 0 1
19551: PPUSH
19552: CALL_OW 266
19556: PUSH
19557: LD_INT 0
19559: EQUAL
19560: IFFALSE 19628
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 274
19571: PPUSH
19572: LD_INT 1
19574: PPUSH
19575: LD_INT 5000
19577: PPUSH
19578: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: CALL_OW 274
19591: PPUSH
19592: LD_INT 2
19594: PPUSH
19595: LD_INT 5000
19597: PPUSH
19598: CALL_OW 277
// SetBName ( building , konev ) ;
19602: LD_VAR 0 1
19606: PPUSH
19607: LD_STRING konev
19609: PPUSH
19610: CALL_OW 500
// ruDepot = building ;
19614: LD_ADDR_EXP 28
19618: PUSH
19619: LD_VAR 0 1
19623: ST_TO_ADDR
// BuildRussianBase ;
19624: CALL 7268 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 266
19637: PUSH
19638: LD_INT 0
19640: EQUAL
19641: PUSH
19642: LD_VAR 0 1
19646: PPUSH
19647: CALL_OW 266
19651: PUSH
19652: LD_INT 2
19654: EQUAL
19655: OR
19656: PUSH
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 266
19666: PUSH
19667: LD_INT 4
19669: EQUAL
19670: OR
19671: IFFALSE 19682
// ComUpgrade ( building ) ;
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 146
// if GetBType ( building ) = b_lab then
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 266
19691: PUSH
19692: LD_INT 6
19694: EQUAL
19695: IFFALSE 19746
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_INT 10
19704: PPUSH
19705: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19709: LD_VAR 0 1
19713: PPUSH
19714: LD_INT 12
19716: PPUSH
19717: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19721: LD_INT 3
19723: PPUSH
19724: LD_VAR 0 1
19728: PPUSH
19729: LD_INT 3
19731: PPUSH
19732: CALL 7823 0 3
// ruLab = building ;
19736: LD_ADDR_EXP 29
19740: PUSH
19741: LD_VAR 0 1
19745: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19746: LD_VAR 0 1
19750: PPUSH
19751: CALL_OW 266
19755: PUSH
19756: LD_INT 32
19758: EQUAL
19759: IFFALSE 19877
// begin uc_side = 3 ;
19761: LD_ADDR_OWVAR 20
19765: PUSH
19766: LD_INT 3
19768: ST_TO_ADDR
// uc_nation = 3 ;
19769: LD_ADDR_OWVAR 21
19773: PUSH
19774: LD_INT 3
19776: ST_TO_ADDR
// hc_gallery =  ;
19777: LD_ADDR_OWVAR 33
19781: PUSH
19782: LD_STRING 
19784: ST_TO_ADDR
// hc_name =  ;
19785: LD_ADDR_OWVAR 26
19789: PUSH
19790: LD_STRING 
19792: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19793: LD_INT 0
19795: PPUSH
19796: LD_INT 1
19798: PPUSH
19799: LD_EXP 25
19803: PPUSH
19804: LD_EXP 26
19808: PPUSH
19809: CALL_OW 12
19813: PPUSH
19814: CALL_OW 380
// un = CreateHuman ;
19818: LD_ADDR_VAR 0 3
19822: PUSH
19823: CALL_OW 44
19827: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19828: LD_VAR 0 3
19832: PPUSH
19833: LD_VAR 0 1
19837: PPUSH
19838: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_INT 43
19849: PUSH
19850: LD_INT 44
19852: PUSH
19853: LD_INT 46
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: PPUSH
19864: LD_INT 3
19866: PPUSH
19867: CALL_OW 12
19871: ARRAY
19872: PPUSH
19873: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19877: LD_VAR 0 1
19881: PPUSH
19882: CALL_OW 266
19886: PUSH
19887: LD_INT 33
19889: EQUAL
19890: IFFALSE 19927
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_INT 43
19899: PUSH
19900: LD_INT 44
19902: PUSH
19903: LD_INT 46
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: PPUSH
19914: LD_INT 3
19916: PPUSH
19917: CALL_OW 12
19921: ARRAY
19922: PPUSH
19923: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL_OW 266
19936: PUSH
19937: LD_INT 24
19939: EQUAL
19940: IFFALSE 19950
// russianAI = 1 ;
19942: LD_ADDR_EXP 27
19946: PUSH
19947: LD_INT 1
19949: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19950: LD_EXP 31
19954: PUSH
19955: LD_INT 0
19957: GREATER
19958: IFFALSE 20032
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19960: LD_ADDR_EXP 31
19964: PUSH
19965: LD_EXP 31
19969: PPUSH
19970: LD_INT 1
19972: PPUSH
19973: CALL_OW 3
19977: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19978: LD_ADDR_EXP 31
19982: PUSH
19983: LD_EXP 31
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 3
19995: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19996: LD_ADDR_EXP 31
20000: PUSH
20001: LD_EXP 31
20005: PPUSH
20006: LD_INT 1
20008: PPUSH
20009: CALL_OW 3
20013: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20014: LD_ADDR_EXP 31
20018: PUSH
20019: LD_EXP 31
20023: PPUSH
20024: LD_INT 1
20026: PPUSH
20027: CALL_OW 3
20031: ST_TO_ADDR
// end ; end ; end ;
20032: PPOPN 3
20034: END
// on UpgradeComplete ( building ) do var i ;
20035: LD_INT 0
20037: PPUSH
// begin if GetSide ( building ) = 3 then
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 255
20047: PUSH
20048: LD_INT 3
20050: EQUAL
20051: IFFALSE 20232
// begin if GetBType ( building ) = b_factory then
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 266
20062: PUSH
20063: LD_INT 3
20065: EQUAL
20066: IFFALSE 20133
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20068: LD_ADDR_VAR 0 2
20072: PUSH
20073: LD_INT 22
20075: PUSH
20076: LD_INT 3
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 25
20085: PUSH
20086: LD_INT 3
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PPUSH
20097: CALL_OW 69
20101: PUSH
20102: FOR_IN
20103: IFFALSE 20121
// ComEnterUnit ( i , building ) ;
20105: LD_VAR 0 2
20109: PPUSH
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 120
20119: GO 20102
20121: POP
20122: POP
// ruFab = building ;
20123: LD_ADDR_EXP 30
20127: PUSH
20128: LD_VAR 0 1
20132: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 266
20142: PUSH
20143: LD_INT 8
20145: EQUAL
20146: IFFALSE 20203
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20148: LD_ADDR_VAR 0 2
20152: PUSH
20153: LD_INT 22
20155: PUSH
20156: LD_INT 3
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 25
20165: PUSH
20166: LD_INT 4
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PPUSH
20177: CALL_OW 69
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20201
// ComEnterUnit ( i , building ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 120
20199: GO 20182
20201: POP
20202: POP
// if GetBType ( building ) = b_warehouse then
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 266
20212: PUSH
20213: LD_INT 1
20215: EQUAL
20216: IFFALSE 20232
// begin ComEnterUnit ( Borodin , building ) ;
20218: LD_EXP 24
20222: PPUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 120
// end ; end ; end ;
20232: PPOPN 2
20234: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 247
20244: PUSH
20245: LD_INT 2
20247: EQUAL
20248: PUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 263
20258: PUSH
20259: LD_INT 3
20261: EQUAL
20262: AND
20263: PUSH
20264: LD_EXP 41
20268: PUSH
20269: LD_INT 0
20271: EQUAL
20272: AND
20273: IFFALSE 20391
// begin varEvent1 = 1 ;
20275: LD_ADDR_EXP 41
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20283: LD_VAR 0 1
20287: PPUSH
20288: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20292: LD_INT 22
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 21
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: LD_INT 25
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 25
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 25
20337: PUSH
20338: LD_INT 3
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 25
20347: PUSH
20348: LD_INT 4
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: PUSH
20372: LD_EXP 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: DIFF
20380: PPUSH
20381: LD_STRING DC-Sol1-1
20383: PPUSH
20384: LD_STRING DC-FSol1-1
20386: PPUSH
20387: CALL 6663 0 3
// end ; end ;
20391: PPOPN 1
20393: END
// on UnitDestroyed ( unit ) do var i ;
20394: LD_INT 0
20396: PPUSH
// begin if GetSide ( unit ) = 3 then
20397: LD_VAR 0 1
20401: PPUSH
20402: CALL_OW 255
20406: PUSH
20407: LD_INT 3
20409: EQUAL
20410: IFFALSE 21180
// begin if GetType ( unit ) = unit_building then
20412: LD_VAR 0 1
20416: PPUSH
20417: CALL_OW 247
20421: PUSH
20422: LD_INT 3
20424: EQUAL
20425: IFFALSE 21117
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20427: LD_VAR 0 1
20431: PPUSH
20432: CALL_OW 266
20436: PUSH
20437: LD_INT 31
20439: EQUAL
20440: PUSH
20441: LD_VAR 0 1
20445: PPUSH
20446: CALL_OW 266
20450: PUSH
20451: LD_INT 32
20453: EQUAL
20454: OR
20455: PUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL_OW 266
20465: PUSH
20466: LD_INT 36
20468: EQUAL
20469: OR
20470: PUSH
20471: LD_VAR 0 1
20475: PPUSH
20476: CALL_OW 266
20480: PUSH
20481: LD_INT 0
20483: EQUAL
20484: OR
20485: PUSH
20486: LD_VAR 0 1
20490: PPUSH
20491: CALL_OW 266
20495: PUSH
20496: LD_INT 24
20498: EQUAL
20499: OR
20500: PUSH
20501: LD_VAR 0 1
20505: PPUSH
20506: CALL_OW 266
20510: PUSH
20511: LD_INT 17
20513: EQUAL
20514: OR
20515: PUSH
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 266
20525: PUSH
20526: LD_INT 25
20528: EQUAL
20529: OR
20530: PUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 266
20540: PUSH
20541: LD_INT 19
20543: EQUAL
20544: OR
20545: PUSH
20546: LD_VAR 0 1
20550: PPUSH
20551: CALL_OW 266
20555: PUSH
20556: LD_INT 20
20558: EQUAL
20559: OR
20560: PUSH
20561: LD_VAR 0 1
20565: PPUSH
20566: CALL_OW 266
20570: PUSH
20571: LD_INT 18
20573: EQUAL
20574: OR
20575: PUSH
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 266
20585: PUSH
20586: LD_INT 21
20588: EQUAL
20589: OR
20590: PUSH
20591: LD_VAR 0 1
20595: PPUSH
20596: CALL_OW 266
20600: PUSH
20601: LD_INT 23
20603: EQUAL
20604: OR
20605: PUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 266
20615: PUSH
20616: LD_INT 16
20618: EQUAL
20619: OR
20620: PUSH
20621: LD_VAR 0 1
20625: PPUSH
20626: CALL_OW 266
20630: PUSH
20631: LD_INT 6
20633: EQUAL
20634: OR
20635: PUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: CALL_OW 266
20645: PUSH
20646: LD_INT 29
20648: EQUAL
20649: OR
20650: PUSH
20651: LD_VAR 0 1
20655: PPUSH
20656: CALL_OW 266
20660: PUSH
20661: LD_INT 26
20663: EQUAL
20664: OR
20665: PUSH
20666: LD_VAR 0 1
20670: PPUSH
20671: CALL_OW 266
20675: PUSH
20676: LD_INT 30
20678: EQUAL
20679: OR
20680: PUSH
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 266
20690: PUSH
20691: LD_INT 28
20693: EQUAL
20694: OR
20695: PUSH
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 266
20705: PUSH
20706: LD_INT 27
20708: EQUAL
20709: OR
20710: PUSH
20711: LD_VAR 0 1
20715: PPUSH
20716: CALL_OW 266
20720: PUSH
20721: LD_INT 33
20723: EQUAL
20724: OR
20725: PUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 266
20735: PUSH
20736: LD_INT 2
20738: EQUAL
20739: OR
20740: PUSH
20741: LD_VAR 0 1
20745: PPUSH
20746: CALL_OW 266
20750: PUSH
20751: LD_INT 4
20753: EQUAL
20754: OR
20755: IFFALSE 20841
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20757: LD_ADDR_EXP 31
20761: PUSH
20762: LD_EXP 31
20766: PUSH
20767: LD_VAR 0 1
20771: PPUSH
20772: CALL_OW 266
20776: ADD
20777: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20778: LD_ADDR_EXP 31
20782: PUSH
20783: LD_EXP 31
20787: PUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 250
20797: ADD
20798: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20799: LD_ADDR_EXP 31
20803: PUSH
20804: LD_EXP 31
20808: PUSH
20809: LD_VAR 0 1
20813: PPUSH
20814: CALL_OW 251
20818: ADD
20819: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20820: LD_ADDR_EXP 31
20824: PUSH
20825: LD_EXP 31
20829: PUSH
20830: LD_VAR 0 1
20834: PPUSH
20835: CALL_OW 254
20839: ADD
20840: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20841: LD_VAR 0 1
20845: PPUSH
20846: CALL_OW 266
20850: PUSH
20851: LD_INT 1
20853: EQUAL
20854: IFFALSE 20933
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20856: LD_ADDR_EXP 31
20860: PUSH
20861: LD_EXP 31
20865: PUSH
20866: LD_INT 0
20868: ADD
20869: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20870: LD_ADDR_EXP 31
20874: PUSH
20875: LD_EXP 31
20879: PUSH
20880: LD_VAR 0 1
20884: PPUSH
20885: CALL_OW 250
20889: ADD
20890: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20891: LD_ADDR_EXP 31
20895: PUSH
20896: LD_EXP 31
20900: PUSH
20901: LD_VAR 0 1
20905: PPUSH
20906: CALL_OW 251
20910: ADD
20911: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20912: LD_ADDR_EXP 31
20916: PUSH
20917: LD_EXP 31
20921: PUSH
20922: LD_VAR 0 1
20926: PPUSH
20927: CALL_OW 254
20931: ADD
20932: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL_OW 266
20942: PUSH
20943: LD_INT 3
20945: EQUAL
20946: IFFALSE 21025
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20948: LD_ADDR_EXP 31
20952: PUSH
20953: LD_EXP 31
20957: PUSH
20958: LD_INT 2
20960: ADD
20961: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20962: LD_ADDR_EXP 31
20966: PUSH
20967: LD_EXP 31
20971: PUSH
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL_OW 250
20981: ADD
20982: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20983: LD_ADDR_EXP 31
20987: PUSH
20988: LD_EXP 31
20992: PUSH
20993: LD_VAR 0 1
20997: PPUSH
20998: CALL_OW 251
21002: ADD
21003: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21004: LD_ADDR_EXP 31
21008: PUSH
21009: LD_EXP 31
21013: PUSH
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 254
21023: ADD
21024: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21025: LD_VAR 0 1
21029: PPUSH
21030: CALL_OW 266
21034: PUSH
21035: LD_INT 5
21037: EQUAL
21038: IFFALSE 21117
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21040: LD_ADDR_EXP 31
21044: PUSH
21045: LD_EXP 31
21049: PUSH
21050: LD_INT 4
21052: ADD
21053: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21054: LD_ADDR_EXP 31
21058: PUSH
21059: LD_EXP 31
21063: PUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 250
21073: ADD
21074: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21075: LD_ADDR_EXP 31
21079: PUSH
21080: LD_EXP 31
21084: PUSH
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 251
21094: ADD
21095: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21096: LD_ADDR_EXP 31
21100: PUSH
21101: LD_EXP 31
21105: PUSH
21106: LD_VAR 0 1
21110: PPUSH
21111: CALL_OW 254
21115: ADD
21116: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
21117: LD_VAR 0 1
21121: PPUSH
21122: CALL_OW 247
21126: PUSH
21127: LD_INT 1
21129: EQUAL
21130: IFFALSE 21180
// begin for i in defenders_list do
21132: LD_ADDR_VAR 0 2
21136: PUSH
21137: LD_EXP 32
21141: PUSH
21142: FOR_IN
21143: IFFALSE 21178
// if i = unit then
21145: LD_VAR 0 2
21149: PUSH
21150: LD_VAR 0 1
21154: EQUAL
21155: IFFALSE 21176
// defenders_list = defenders_list diff [ unit ] ;
21157: LD_ADDR_EXP 32
21161: PUSH
21162: LD_EXP 32
21166: PUSH
21167: LD_VAR 0 1
21171: PUSH
21172: EMPTY
21173: LIST
21174: DIFF
21175: ST_TO_ADDR
21176: GO 21142
21178: POP
21179: POP
// end ; end ; end ; end_of_file
21180: PPOPN 2
21182: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21183: GO 21185
21185: DISABLE
21186: LD_INT 0
21188: PPUSH
// begin enemyWayX = [ ] ;
21189: LD_ADDR_EXP 45
21193: PUSH
21194: EMPTY
21195: ST_TO_ADDR
// enemyWayY = [ ] ;
21196: LD_ADDR_EXP 46
21200: PUSH
21201: EMPTY
21202: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
21203: LD_ADDR_VAR 0 1
21207: PUSH
21208: LD_INT 1
21210: PPUSH
21211: LD_INT 3
21213: PPUSH
21214: CALL_OW 12
21218: ST_TO_ADDR
// if rnd = 1 then
21219: LD_VAR 0 1
21223: PUSH
21224: LD_INT 1
21226: EQUAL
21227: IFFALSE 21267
// begin enemyWayX = [ 73 , 46 , 29 ] ;
21229: LD_ADDR_EXP 45
21233: PUSH
21234: LD_INT 73
21236: PUSH
21237: LD_INT 46
21239: PUSH
21240: LD_INT 29
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21248: LD_ADDR_EXP 46
21252: PUSH
21253: LD_INT 71
21255: PUSH
21256: LD_INT 43
21258: PUSH
21259: LD_INT 29
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: ST_TO_ADDR
// end ; if rnd = 2 then
21267: LD_VAR 0 1
21271: PUSH
21272: LD_INT 2
21274: EQUAL
21275: IFFALSE 21299
// begin enemyWayX = [ 64 ] ;
21277: LD_ADDR_EXP 45
21281: PUSH
21282: LD_INT 64
21284: PUSH
21285: EMPTY
21286: LIST
21287: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21288: LD_ADDR_EXP 46
21292: PUSH
21293: LD_INT 43
21295: PUSH
21296: EMPTY
21297: LIST
21298: ST_TO_ADDR
// end ; if rnd = 3 then
21299: LD_VAR 0 1
21303: PUSH
21304: LD_INT 3
21306: EQUAL
21307: IFFALSE 21331
// begin enemyWayX = [ 80 ] ;
21309: LD_ADDR_EXP 45
21313: PUSH
21314: LD_INT 80
21316: PUSH
21317: EMPTY
21318: LIST
21319: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21320: LD_ADDR_EXP 46
21324: PUSH
21325: LD_INT 28
21327: PUSH
21328: EMPTY
21329: LIST
21330: ST_TO_ADDR
// end ; enable ;
21331: ENABLE
// end ;
21332: PPOPN 1
21334: END
// every 0 0$1 do
21335: GO 21337
21337: DISABLE
// begin enable ;
21338: ENABLE
// if escapeAvalaible = 0 then
21339: LD_EXP 36
21343: PUSH
21344: LD_INT 0
21346: EQUAL
21347: IFFALSE 21359
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21349: LD_INT 3
21351: PPUSH
21352: LD_INT 6
21354: PPUSH
21355: CALL 7908 0 2
// if escapeAvalaible = 0 then
21359: LD_EXP 36
21363: PUSH
21364: LD_INT 0
21366: EQUAL
21367: IFFALSE 21379
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21369: LD_INT 1
21371: PPUSH
21372: LD_INT 24
21374: PPUSH
21375: CALL 8702 0 2
// if russianAI = 1 then
21379: LD_EXP 27
21383: PUSH
21384: LD_INT 1
21386: EQUAL
21387: IFFALSE 21457
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21389: LD_INT 3
21391: PPUSH
21392: LD_INT 7
21394: PPUSH
21395: LD_INT 6
21397: PPUSH
21398: LD_EXP 29
21402: PPUSH
21403: CALL 10791 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21407: LD_INT 3
21409: PPUSH
21410: LD_EXP 28
21414: PPUSH
21415: LD_INT 6
21417: PPUSH
21418: LD_EXP 31
21422: PPUSH
21423: CALL 10385 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21427: LD_INT 3
21429: PPUSH
21430: LD_INT 26
21432: PPUSH
21433: LD_EXP 45
21437: PPUSH
21438: LD_EXP 46
21442: PPUSH
21443: CALL 9253 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21447: LD_INT 3
21449: PPUSH
21450: LD_INT 1
21452: PPUSH
21453: CALL 11335 0 2
// end ; if SikorskyArrive = 1 then
21457: LD_EXP 18
21461: PUSH
21462: LD_INT 1
21464: EQUAL
21465: IFFALSE 21483
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21467: LD_INT 3
21469: PPUSH
21470: LD_INT 10
21472: PPUSH
21473: LD_INT 53
21475: PPUSH
21476: LD_INT 59
21478: PPUSH
21479: CALL 9050 0 4
// end ;
21483: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21484: LD_EXP 27
21488: PUSH
21489: LD_INT 1
21491: EQUAL
21492: IFFALSE 21768
21494: GO 21496
21496: DISABLE
21497: LD_INT 0
21499: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21500: LD_ADDR_VAR 0 1
21504: PUSH
21505: LD_INT 22
21507: PUSH
21508: LD_INT 3
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 21
21517: PUSH
21518: LD_INT 3
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 30
21527: PUSH
21528: LD_INT 32
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: LD_INT 2
21540: PUSH
21541: LD_INT 35
21543: PUSH
21544: LD_INT 43
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 35
21553: PUSH
21554: LD_INT 44
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 35
21563: PUSH
21564: LD_INT 46
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: PPUSH
21587: CALL_OW 69
21591: PUSH
21592: FOR_IN
21593: IFFALSE 21632
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21595: LD_VAR 0 1
21599: PPUSH
21600: LD_INT 43
21602: PUSH
21603: LD_INT 44
21605: PUSH
21606: LD_INT 46
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: PPUSH
21617: LD_INT 3
21619: PPUSH
21620: CALL_OW 12
21624: ARRAY
21625: PPUSH
21626: CALL_OW 431
21630: GO 21592
21632: POP
21633: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21634: LD_ADDR_VAR 0 1
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_INT 3
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 21
21651: PUSH
21652: LD_INT 3
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 30
21661: PUSH
21662: LD_INT 33
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 3
21671: PUSH
21672: LD_INT 2
21674: PUSH
21675: LD_INT 35
21677: PUSH
21678: LD_INT 43
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 35
21687: PUSH
21688: LD_INT 44
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 35
21697: PUSH
21698: LD_INT 46
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: PPUSH
21721: CALL_OW 69
21725: PUSH
21726: FOR_IN
21727: IFFALSE 21766
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21729: LD_VAR 0 1
21733: PPUSH
21734: LD_INT 43
21736: PUSH
21737: LD_INT 44
21739: PUSH
21740: LD_INT 46
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 1
21750: PPUSH
21751: LD_INT 3
21753: PPUSH
21754: CALL_OW 12
21758: ARRAY
21759: PPUSH
21760: CALL_OW 431
21764: GO 21726
21766: POP
21767: POP
// end ;
21768: PPOPN 1
21770: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
21771: LD_EXP 24
21775: PPUSH
21776: CALL_OW 310
21780: NOT
21781: PUSH
21782: LD_EXP 28
21786: PPUSH
21787: CALL_OW 302
21791: AND
21792: PUSH
21793: LD_EXP 28
21797: PPUSH
21798: CALL_OW 255
21802: PUSH
21803: LD_INT 3
21805: EQUAL
21806: AND
21807: IFFALSE 21827
21809: GO 21811
21811: DISABLE
// begin enable ;
21812: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
21813: LD_EXP 24
21817: PPUSH
21818: LD_EXP 28
21822: PPUSH
21823: CALL_OW 120
// end ;
21827: END
// every 0 0$1 trigger SikorskyAI = 1 do
21828: LD_EXP 20
21832: PUSH
21833: LD_INT 1
21835: EQUAL
21836: IFFALSE 21871
21838: GO 21840
21840: DISABLE
// begin enable ;
21841: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21842: LD_INT 4
21844: PPUSH
21845: LD_INT 10
21847: PPUSH
21848: LD_INT 93
21850: PPUSH
21851: LD_INT 93
21853: PPUSH
21854: CALL 9050 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21858: LD_INT 4
21860: PPUSH
21861: LD_INT 11
21863: PPUSH
21864: LD_INT 3
21866: PPUSH
21867: CALL 15547 0 3
// end ;
21871: END
// every 0 0$1 trigger SikorskyAI = 1 do
21872: LD_EXP 20
21876: PUSH
21877: LD_INT 1
21879: EQUAL
21880: IFFALSE 21892
21882: GO 21884
21884: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21885: LD_INT 4
21887: PPUSH
21888: CALL 10057 0 1
21892: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21893: LD_EXP 27
21897: PUSH
21898: LD_INT 1
21900: EQUAL
21901: PUSH
21902: LD_EXP 30
21906: PPUSH
21907: CALL_OW 302
21911: AND
21912: PUSH
21913: LD_EXP 30
21917: PPUSH
21918: CALL_OW 255
21922: PUSH
21923: LD_INT 3
21925: EQUAL
21926: AND
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 21
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 33
21950: PUSH
21951: LD_INT 3
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: PPUSH
21963: CALL_OW 69
21967: PUSH
21968: LD_INT 0
21970: EQUAL
21971: AND
21972: IFFALSE 22206
21974: GO 21976
21976: DISABLE
// begin enable ;
21977: ENABLE
// if Difficulty = 1 then
21978: LD_OWVAR 67
21982: PUSH
21983: LD_INT 1
21985: EQUAL
21986: IFFALSE 22054
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21988: LD_INT 3
21990: PPUSH
21991: LD_EXP 30
21995: PPUSH
21996: LD_INT 5
21998: PPUSH
21999: LD_INT 8
22001: PPUSH
22002: CALL_OW 12
22006: PPUSH
22007: LD_INT 43
22009: PUSH
22010: LD_INT 43
22012: PUSH
22013: LD_INT 43
22015: PUSH
22016: LD_INT 43
22018: PUSH
22019: LD_INT 44
22021: PUSH
22022: LD_INT 44
22024: PUSH
22025: LD_INT 44
22027: PUSH
22028: LD_INT 46
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: LD_INT 3
22046: PPUSH
22047: LD_INT 24
22049: PPUSH
22050: CALL 8896 0 7
// if Difficulty = 2 then
22054: LD_OWVAR 67
22058: PUSH
22059: LD_INT 2
22061: EQUAL
22062: IFFALSE 22130
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
22064: LD_INT 3
22066: PPUSH
22067: LD_EXP 30
22071: PPUSH
22072: LD_INT 6
22074: PPUSH
22075: LD_INT 8
22077: PPUSH
22078: CALL_OW 12
22082: PPUSH
22083: LD_INT 43
22085: PUSH
22086: LD_INT 43
22088: PUSH
22089: LD_INT 44
22091: PUSH
22092: LD_INT 44
22094: PUSH
22095: LD_INT 44
22097: PUSH
22098: LD_INT 44
22100: PUSH
22101: LD_INT 46
22103: PUSH
22104: LD_INT 46
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: PPUSH
22117: LD_INT 1
22119: PPUSH
22120: LD_INT 3
22122: PPUSH
22123: LD_INT 24
22125: PPUSH
22126: CALL 8896 0 7
// if Difficulty = 3 then
22130: LD_OWVAR 67
22134: PUSH
22135: LD_INT 3
22137: EQUAL
22138: IFFALSE 22206
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
22140: LD_INT 3
22142: PPUSH
22143: LD_EXP 30
22147: PPUSH
22148: LD_INT 7
22150: PPUSH
22151: LD_INT 8
22153: PPUSH
22154: CALL_OW 12
22158: PPUSH
22159: LD_INT 43
22161: PUSH
22162: LD_INT 43
22164: PUSH
22165: LD_INT 44
22167: PUSH
22168: LD_INT 44
22170: PUSH
22171: LD_INT 44
22173: PUSH
22174: LD_INT 46
22176: PUSH
22177: LD_INT 46
22179: PUSH
22180: LD_INT 46
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: PPUSH
22193: LD_INT 1
22195: PPUSH
22196: LD_INT 3
22198: PPUSH
22199: LD_INT 24
22201: PPUSH
22202: CALL 8896 0 7
// end ;
22206: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
22207: LD_EXP 38
22211: PUSH
22212: LD_INT 1
22214: EQUAL
22215: IFFALSE 22297
22217: GO 22219
22219: DISABLE
22220: LD_INT 0
22222: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
22223: LD_ADDR_VAR 0 1
22227: PUSH
22228: LD_INT 22
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 21
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: LD_INT 24
22253: PUSH
22254: LD_INT 650
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: LIST
22269: PPUSH
22270: CALL_OW 69
22274: PUSH
22275: FOR_IN
22276: IFFALSE 22295
// ComMoveXY ( i , 51 , 12 ) ;
22278: LD_VAR 0 1
22282: PPUSH
22283: LD_INT 51
22285: PPUSH
22286: LD_INT 12
22288: PPUSH
22289: CALL_OW 111
22293: GO 22275
22295: POP
22296: POP
// end ; end_of_file
22297: PPOPN 1
22299: END
// every 3 3$20 trigger firstAttack = 1 do
22300: LD_EXP 33
22304: PUSH
22305: LD_INT 1
22307: EQUAL
22308: IFFALSE 22414
22310: GO 22312
22312: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22313: LD_INT 6
22315: PPUSH
22316: LD_INT 3
22318: PPUSH
22319: LD_INT 5
22321: PPUSH
22322: LD_INT 6
22324: PPUSH
22325: CALL_OW 12
22329: PUSH
22330: LD_INT 5
22332: PPUSH
22333: LD_INT 6
22335: PPUSH
22336: CALL_OW 12
22340: PUSH
22341: LD_INT 5
22343: PPUSH
22344: LD_INT 6
22346: PPUSH
22347: CALL_OW 12
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: PUSH
22357: LD_OWVAR 67
22361: ARRAY
22362: PPUSH
22363: LD_INT 0
22365: PPUSH
22366: LD_INT 0
22368: PPUSH
22369: LD_INT 0
22371: PPUSH
22372: LD_INT 0
22374: PPUSH
22375: LD_EXP 25
22379: PPUSH
22380: LD_EXP 26
22384: PPUSH
22385: CALL_OW 12
22389: PPUSH
22390: LD_INT 16
22392: PPUSH
22393: LD_INT 7
22395: PPUSH
22396: LD_INT 1
22398: PPUSH
22399: LD_INT 1
22401: PPUSH
22402: LD_INT 3
22404: PPUSH
22405: CALL_OW 12
22409: PPUSH
22410: CALL 11565 0 12
22414: END
// every 3 3$40 trigger firstAttack = 1 do
22415: LD_EXP 33
22419: PUSH
22420: LD_INT 1
22422: EQUAL
22423: IFFALSE 22515
22425: GO 22427
22427: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22428: LD_INT 16
22430: PPUSH
22431: LD_INT 6
22433: PPUSH
22434: LD_INT 3
22436: PPUSH
22437: LD_INT 4
22439: PPUSH
22440: CALL_OW 12
22444: PUSH
22445: LD_INT 4
22447: PPUSH
22448: LD_INT 5
22450: PPUSH
22451: CALL_OW 12
22455: PUSH
22456: LD_INT 5
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: LIST
22463: PUSH
22464: LD_OWVAR 67
22468: ARRAY
22469: PPUSH
22470: LD_EXP 25
22474: PPUSH
22475: LD_EXP 26
22479: PPUSH
22480: CALL_OW 12
22484: PPUSH
22485: LD_INT 3
22487: PPUSH
22488: LD_INT 1
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: LD_INT 44
22496: PUSH
22497: LD_INT 46
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PPUSH
22504: EMPTY
22505: PPUSH
22506: EMPTY
22507: PPUSH
22508: LD_INT 1
22510: PPUSH
22511: CALL 13858 0 11
22515: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22516: LD_EXP 33
22520: PUSH
22521: LD_INT 1
22523: EQUAL
22524: PUSH
22525: LD_EXP 39
22529: PUSH
22530: LD_INT 0
22532: EQUAL
22533: AND
22534: IFFALSE 22640
22536: GO 22538
22538: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22539: LD_INT 6
22541: PPUSH
22542: LD_INT 3
22544: PPUSH
22545: LD_INT 5
22547: PPUSH
22548: LD_INT 6
22550: PPUSH
22551: CALL_OW 12
22555: PUSH
22556: LD_INT 5
22558: PPUSH
22559: LD_INT 6
22561: PPUSH
22562: CALL_OW 12
22566: PUSH
22567: LD_INT 5
22569: PPUSH
22570: LD_INT 6
22572: PPUSH
22573: CALL_OW 12
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: LIST
22582: PUSH
22583: LD_OWVAR 67
22587: ARRAY
22588: PPUSH
22589: LD_INT 0
22591: PPUSH
22592: LD_INT 0
22594: PPUSH
22595: LD_INT 0
22597: PPUSH
22598: LD_INT 0
22600: PPUSH
22601: LD_EXP 25
22605: PPUSH
22606: LD_EXP 26
22610: PPUSH
22611: CALL_OW 12
22615: PPUSH
22616: LD_INT 16
22618: PPUSH
22619: LD_INT 7
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: LD_INT 1
22627: PPUSH
22628: LD_INT 3
22630: PPUSH
22631: CALL_OW 12
22635: PPUSH
22636: CALL 11565 0 12
22640: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22641: LD_EXP 33
22645: PUSH
22646: LD_INT 1
22648: EQUAL
22649: PUSH
22650: LD_EXP 39
22654: PUSH
22655: LD_INT 0
22657: EQUAL
22658: AND
22659: IFFALSE 22755
22661: GO 22663
22663: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22664: LD_INT 16
22666: PPUSH
22667: LD_INT 6
22669: PPUSH
22670: LD_INT 5
22672: PPUSH
22673: LD_INT 6
22675: PPUSH
22676: CALL_OW 12
22680: PUSH
22681: LD_INT 6
22683: PPUSH
22684: LD_INT 7
22686: PPUSH
22687: CALL_OW 12
22691: PUSH
22692: LD_INT 7
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: PUSH
22700: LD_OWVAR 67
22704: ARRAY
22705: PPUSH
22706: LD_EXP 25
22710: PPUSH
22711: LD_EXP 26
22715: PPUSH
22716: CALL_OW 12
22720: PPUSH
22721: LD_INT 3
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: LD_INT 3
22729: PPUSH
22730: LD_INT 43
22732: PUSH
22733: LD_INT 44
22735: PUSH
22736: LD_INT 46
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: PPUSH
22744: EMPTY
22745: PPUSH
22746: EMPTY
22747: PPUSH
22748: LD_INT 1
22750: PPUSH
22751: CALL 13858 0 11
22755: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22756: LD_EXP 33
22760: PUSH
22761: LD_INT 1
22763: EQUAL
22764: PUSH
22765: LD_EXP 39
22769: PUSH
22770: LD_INT 0
22772: EQUAL
22773: AND
22774: IFFALSE 22850
22776: GO 22778
22778: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22779: LD_INT 16
22781: PPUSH
22782: LD_INT 6
22784: PPUSH
22785: LD_INT 5
22787: PUSH
22788: LD_INT 6
22790: PUSH
22791: LD_INT 7
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: LD_OWVAR 67
22803: ARRAY
22804: PPUSH
22805: LD_EXP 25
22809: PPUSH
22810: LD_EXP 26
22814: PPUSH
22815: CALL_OW 12
22819: PPUSH
22820: LD_INT 3
22822: PPUSH
22823: LD_INT 1
22825: PPUSH
22826: LD_INT 3
22828: PPUSH
22829: LD_INT 44
22831: PUSH
22832: LD_INT 46
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PPUSH
22839: EMPTY
22840: PPUSH
22841: EMPTY
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL 13858 0 11
22850: END
// every 1 1$00 trigger secondAttack = 1 do
22851: LD_EXP 34
22855: PUSH
22856: LD_INT 1
22858: EQUAL
22859: IFFALSE 22965
22861: GO 22863
22863: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22864: LD_INT 6
22866: PPUSH
22867: LD_INT 3
22869: PPUSH
22870: LD_INT 4
22872: PPUSH
22873: LD_INT 7
22875: PPUSH
22876: CALL_OW 12
22880: PUSH
22881: LD_INT 6
22883: PPUSH
22884: LD_INT 7
22886: PPUSH
22887: CALL_OW 12
22891: PUSH
22892: LD_INT 6
22894: PPUSH
22895: LD_INT 10
22897: PPUSH
22898: CALL_OW 12
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: PUSH
22908: LD_OWVAR 67
22912: ARRAY
22913: PPUSH
22914: LD_INT 0
22916: PPUSH
22917: LD_INT 0
22919: PPUSH
22920: LD_INT 0
22922: PPUSH
22923: LD_INT 0
22925: PPUSH
22926: LD_EXP 25
22930: PPUSH
22931: LD_EXP 26
22935: PPUSH
22936: CALL_OW 12
22940: PPUSH
22941: LD_INT 16
22943: PPUSH
22944: LD_INT 7
22946: PPUSH
22947: LD_INT 1
22949: PPUSH
22950: LD_INT 1
22952: PPUSH
22953: LD_INT 3
22955: PPUSH
22956: CALL_OW 12
22960: PPUSH
22961: CALL 11565 0 12
22965: END
// every 1 1$00 trigger secondAttack = 1 do
22966: LD_EXP 34
22970: PUSH
22971: LD_INT 1
22973: EQUAL
22974: IFFALSE 23078
22976: GO 22978
22978: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22979: LD_INT 16
22981: PPUSH
22982: LD_INT 6
22984: PPUSH
22985: LD_INT 5
22987: PPUSH
22988: LD_INT 8
22990: PPUSH
22991: CALL_OW 12
22995: PUSH
22996: LD_INT 6
22998: PPUSH
22999: LD_INT 9
23001: PPUSH
23002: CALL_OW 12
23006: PUSH
23007: LD_INT 7
23009: PPUSH
23010: LD_INT 9
23012: PPUSH
23013: CALL_OW 12
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: PUSH
23023: LD_OWVAR 67
23027: ARRAY
23028: PPUSH
23029: LD_EXP 25
23033: PPUSH
23034: LD_EXP 26
23038: PPUSH
23039: CALL_OW 12
23043: PPUSH
23044: LD_INT 3
23046: PPUSH
23047: LD_INT 1
23049: PPUSH
23050: LD_INT 3
23052: PPUSH
23053: LD_INT 43
23055: PUSH
23056: LD_INT 44
23058: PUSH
23059: LD_INT 46
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PPUSH
23067: EMPTY
23068: PPUSH
23069: EMPTY
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: CALL 13858 0 11
23078: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23079: LD_EXP 18
23083: PUSH
23084: LD_INT 0
23086: EQUAL
23087: IFFALSE 23193
23089: GO 23091
23091: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23092: LD_INT 6
23094: PPUSH
23095: LD_INT 3
23097: PPUSH
23098: LD_INT 8
23100: PPUSH
23101: LD_INT 9
23103: PPUSH
23104: CALL_OW 12
23108: PUSH
23109: LD_INT 7
23111: PPUSH
23112: LD_INT 10
23114: PPUSH
23115: CALL_OW 12
23119: PUSH
23120: LD_INT 8
23122: PPUSH
23123: LD_INT 10
23125: PPUSH
23126: CALL_OW 12
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: LD_OWVAR 67
23140: ARRAY
23141: PPUSH
23142: LD_INT 0
23144: PPUSH
23145: LD_INT 0
23147: PPUSH
23148: LD_INT 0
23150: PPUSH
23151: LD_INT 0
23153: PPUSH
23154: LD_EXP 25
23158: PPUSH
23159: LD_EXP 26
23163: PPUSH
23164: CALL_OW 12
23168: PPUSH
23169: LD_INT 16
23171: PPUSH
23172: LD_INT 7
23174: PPUSH
23175: LD_INT 1
23177: PPUSH
23178: LD_INT 1
23180: PPUSH
23181: LD_INT 3
23183: PPUSH
23184: CALL_OW 12
23188: PPUSH
23189: CALL 11565 0 12
23193: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23194: LD_EXP 18
23198: PUSH
23199: LD_INT 0
23201: EQUAL
23202: IFFALSE 23302
23204: GO 23206
23206: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23207: LD_INT 16
23209: PPUSH
23210: LD_INT 6
23212: PPUSH
23213: LD_INT 5
23215: PPUSH
23216: LD_INT 8
23218: PPUSH
23219: CALL_OW 12
23223: PUSH
23224: LD_INT 6
23226: PPUSH
23227: LD_INT 9
23229: PPUSH
23230: CALL_OW 12
23234: PUSH
23235: LD_INT 7
23237: PPUSH
23238: LD_INT 9
23240: PPUSH
23241: CALL_OW 12
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: PUSH
23251: LD_OWVAR 67
23255: ARRAY
23256: PPUSH
23257: LD_EXP 25
23261: PPUSH
23262: LD_EXP 26
23266: PPUSH
23267: CALL_OW 12
23271: PPUSH
23272: LD_INT 3
23274: PPUSH
23275: LD_INT 1
23277: PPUSH
23278: LD_INT 3
23280: PPUSH
23281: LD_INT 44
23283: PUSH
23284: LD_INT 46
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PPUSH
23291: EMPTY
23292: PPUSH
23293: EMPTY
23294: PPUSH
23295: LD_INT 1
23297: PPUSH
23298: CALL 13858 0 11
23302: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23303: LD_EXP 18
23307: PUSH
23308: LD_INT 0
23310: EQUAL
23311: IFFALSE 23417
23313: GO 23315
23315: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23316: LD_INT 6
23318: PPUSH
23319: LD_INT 3
23321: PPUSH
23322: LD_INT 8
23324: PPUSH
23325: LD_INT 9
23327: PPUSH
23328: CALL_OW 12
23332: PUSH
23333: LD_INT 7
23335: PPUSH
23336: LD_INT 10
23338: PPUSH
23339: CALL_OW 12
23343: PUSH
23344: LD_INT 8
23346: PPUSH
23347: LD_INT 10
23349: PPUSH
23350: CALL_OW 12
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: LD_OWVAR 67
23364: ARRAY
23365: PPUSH
23366: LD_INT 0
23368: PPUSH
23369: LD_INT 0
23371: PPUSH
23372: LD_INT 0
23374: PPUSH
23375: LD_INT 0
23377: PPUSH
23378: LD_EXP 25
23382: PPUSH
23383: LD_EXP 26
23387: PPUSH
23388: CALL_OW 12
23392: PPUSH
23393: LD_INT 16
23395: PPUSH
23396: LD_INT 7
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_INT 3
23407: PPUSH
23408: CALL_OW 12
23412: PPUSH
23413: CALL 11565 0 12
23417: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23418: LD_EXP 18
23422: PUSH
23423: LD_INT 0
23425: EQUAL
23426: IFFALSE 23526
23428: GO 23430
23430: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23431: LD_INT 16
23433: PPUSH
23434: LD_INT 6
23436: PPUSH
23437: LD_INT 5
23439: PPUSH
23440: LD_INT 8
23442: PPUSH
23443: CALL_OW 12
23447: PUSH
23448: LD_INT 6
23450: PPUSH
23451: LD_INT 9
23453: PPUSH
23454: CALL_OW 12
23458: PUSH
23459: LD_INT 7
23461: PPUSH
23462: LD_INT 9
23464: PPUSH
23465: CALL_OW 12
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: PUSH
23475: LD_OWVAR 67
23479: ARRAY
23480: PPUSH
23481: LD_EXP 25
23485: PPUSH
23486: LD_EXP 26
23490: PPUSH
23491: CALL_OW 12
23495: PPUSH
23496: LD_INT 3
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: LD_INT 3
23504: PPUSH
23505: LD_INT 44
23507: PUSH
23508: LD_INT 46
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PPUSH
23515: EMPTY
23516: PPUSH
23517: EMPTY
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL 13858 0 11
23526: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23527: LD_EXP 18
23531: PUSH
23532: LD_INT 0
23534: EQUAL
23535: IFFALSE 23641
23537: GO 23539
23539: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23540: LD_INT 6
23542: PPUSH
23543: LD_INT 3
23545: PPUSH
23546: LD_INT 8
23548: PPUSH
23549: LD_INT 9
23551: PPUSH
23552: CALL_OW 12
23556: PUSH
23557: LD_INT 7
23559: PPUSH
23560: LD_INT 10
23562: PPUSH
23563: CALL_OW 12
23567: PUSH
23568: LD_INT 8
23570: PPUSH
23571: LD_INT 10
23573: PPUSH
23574: CALL_OW 12
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: PUSH
23584: LD_OWVAR 67
23588: ARRAY
23589: PPUSH
23590: LD_INT 0
23592: PPUSH
23593: LD_INT 0
23595: PPUSH
23596: LD_INT 0
23598: PPUSH
23599: LD_INT 0
23601: PPUSH
23602: LD_EXP 25
23606: PPUSH
23607: LD_EXP 26
23611: PPUSH
23612: CALL_OW 12
23616: PPUSH
23617: LD_INT 16
23619: PPUSH
23620: LD_INT 7
23622: PPUSH
23623: LD_INT 1
23625: PPUSH
23626: LD_INT 1
23628: PPUSH
23629: LD_INT 3
23631: PPUSH
23632: CALL_OW 12
23636: PPUSH
23637: CALL 11565 0 12
23641: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23642: LD_EXP 18
23646: PUSH
23647: LD_INT 0
23649: EQUAL
23650: IFFALSE 23750
23652: GO 23654
23654: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23655: LD_INT 16
23657: PPUSH
23658: LD_INT 6
23660: PPUSH
23661: LD_INT 5
23663: PPUSH
23664: LD_INT 8
23666: PPUSH
23667: CALL_OW 12
23671: PUSH
23672: LD_INT 6
23674: PPUSH
23675: LD_INT 9
23677: PPUSH
23678: CALL_OW 12
23682: PUSH
23683: LD_INT 7
23685: PPUSH
23686: LD_INT 9
23688: PPUSH
23689: CALL_OW 12
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: PUSH
23699: LD_OWVAR 67
23703: ARRAY
23704: PPUSH
23705: LD_EXP 25
23709: PPUSH
23710: LD_EXP 26
23714: PPUSH
23715: CALL_OW 12
23719: PPUSH
23720: LD_INT 3
23722: PPUSH
23723: LD_INT 1
23725: PPUSH
23726: LD_INT 3
23728: PPUSH
23729: LD_INT 44
23731: PUSH
23732: LD_INT 46
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PPUSH
23739: EMPTY
23740: PPUSH
23741: EMPTY
23742: PPUSH
23743: LD_INT 1
23745: PPUSH
23746: CALL 13858 0 11
23750: END
// every 0 0$1 trigger timerStatus = 1 do
23751: LD_EXP 35
23755: PUSH
23756: LD_INT 1
23758: EQUAL
23759: IFFALSE 23796
23761: GO 23763
23763: DISABLE
// begin enable ;
23764: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23765: LD_ADDR_OWVAR 47
23769: PUSH
23770: LD_STRING #Am08-1
23772: PUSH
23773: LD_EXP 19
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23782: LD_ADDR_EXP 19
23786: PUSH
23787: LD_EXP 19
23791: PUSH
23792: LD_INT 35
23794: MINUS
23795: ST_TO_ADDR
// end ; end_of_file
23796: END
// every 1 1$0 do
23797: GO 23799
23799: DISABLE
// begin if supply <= 13 and supply > 7 then
23800: LD_EXP 40
23804: PUSH
23805: LD_INT 13
23807: LESSEQUAL
23808: PUSH
23809: LD_EXP 40
23813: PUSH
23814: LD_INT 7
23816: GREATER
23817: AND
23818: IFFALSE 23841
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23820: LD_INT 3
23822: PPUSH
23823: LD_INT 5
23825: PPUSH
23826: CALL_OW 12
23830: PPUSH
23831: LD_INT 5
23833: PPUSH
23834: LD_INT 1
23836: PPUSH
23837: CALL_OW 55
// if supply <= 7 and supply > 4 then
23841: LD_EXP 40
23845: PUSH
23846: LD_INT 7
23848: LESSEQUAL
23849: PUSH
23850: LD_EXP 40
23854: PUSH
23855: LD_INT 4
23857: GREATER
23858: AND
23859: IFFALSE 23882
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23861: LD_INT 3
23863: PPUSH
23864: LD_INT 5
23866: PPUSH
23867: CALL_OW 12
23871: PPUSH
23872: LD_INT 20
23874: PPUSH
23875: LD_INT 1
23877: PPUSH
23878: CALL_OW 55
// if supply <= 4 and supply > 0 then
23882: LD_EXP 40
23886: PUSH
23887: LD_INT 4
23889: LESSEQUAL
23890: PUSH
23891: LD_EXP 40
23895: PUSH
23896: LD_INT 0
23898: GREATER
23899: AND
23900: IFFALSE 23923
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23902: LD_INT 3
23904: PPUSH
23905: LD_INT 5
23907: PPUSH
23908: CALL_OW 12
23912: PPUSH
23913: LD_INT 21
23915: PPUSH
23916: LD_INT 1
23918: PPUSH
23919: CALL_OW 55
// if supply > 0 then
23923: LD_EXP 40
23927: PUSH
23928: LD_INT 0
23930: GREATER
23931: IFFALSE 23948
// begin supply = supply - 1 ;
23933: LD_ADDR_EXP 40
23937: PUSH
23938: LD_EXP 40
23942: PUSH
23943: LD_INT 1
23945: MINUS
23946: ST_TO_ADDR
// enable ;
23947: ENABLE
// end ; end ; end_of_file
23948: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23949: LD_EXP 39
23953: PUSH
23954: LD_INT 1
23956: EQUAL
23957: PUSH
23958: LD_EXP 1
23962: PPUSH
23963: CALL_OW 301
23967: AND
23968: IFFALSE 23980
23970: GO 23972
23972: DISABLE
// YouLost ( JMM ) ;
23973: LD_STRING JMM
23975: PPUSH
23976: CALL_OW 104
23980: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23981: LD_EXP 18
23985: PUSH
23986: LD_INT 1
23988: EQUAL
23989: PUSH
23990: LD_EXP 16
23994: PPUSH
23995: CALL_OW 301
23999: AND
24000: IFFALSE 24032
24002: GO 24004
24004: DISABLE
// begin DialogueOn ;
24005: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
24009: LD_EXP 23
24013: PPUSH
24014: LD_STRING D8a-Pow-1
24016: PPUSH
24017: CALL_OW 94
// DialogueOff ;
24021: CALL_OW 7
// YouLost ( Dismissed ) ;
24025: LD_STRING Dismissed
24027: PPUSH
24028: CALL_OW 104
// end ;
24032: END
// every 0 0$1 trigger IsDead ( amDepot ) do
24033: LD_EXP 37
24037: PPUSH
24038: CALL_OW 301
24042: IFFALSE 24054
24044: GO 24046
24046: DISABLE
// YouLost ( Destroyed ) ; end_of_file
24047: LD_STRING Destroyed
24049: PPUSH
24050: CALL_OW 104
24054: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i , p ;
24055: LD_EXP 24
24059: PPUSH
24060: CALL_OW 301
24064: IFFALSE 24512
24066: GO 24068
24068: DISABLE
24069: LD_INT 0
24071: PPUSH
24072: PPUSH
// begin russianAI = 0 ;
24073: LD_ADDR_EXP 27
24077: PUSH
24078: LD_INT 0
24080: ST_TO_ADDR
// escapeAvalaible = 1 ;
24081: LD_ADDR_EXP 36
24085: PUSH
24086: LD_INT 1
24088: ST_TO_ADDR
// InGameOn ;
24089: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
24093: LD_INT 3
24095: PPUSH
24096: LD_INT 1
24098: PPUSH
24099: LD_INT 1
24101: PPUSH
24102: LD_INT 0
24104: PPUSH
24105: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
24109: LD_INT 6
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: LD_INT 1
24117: PPUSH
24118: LD_INT 0
24120: PPUSH
24121: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
24125: LD_INT 3
24127: PPUSH
24128: LD_INT 1
24130: PPUSH
24131: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
24135: LD_INT 97
24137: PPUSH
24138: LD_INT 91
24140: PPUSH
24141: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
24145: LD_INT 22
24147: PUSH
24148: LD_INT 3
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 21
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PPUSH
24169: CALL_OW 69
24173: PPUSH
24174: CALL_OW 121
// wait ( 0 0$01 ) ;
24178: LD_INT 35
24180: PPUSH
24181: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24185: LD_INT 22
24187: PUSH
24188: LD_INT 3
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 21
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PPUSH
24209: CALL_OW 69
24213: PPUSH
24214: LD_INT 124
24216: PPUSH
24217: LD_INT 98
24219: PPUSH
24220: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
24224: LD_INT 22
24226: PUSH
24227: LD_INT 6
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 21
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PPUSH
24248: CALL_OW 69
24252: PPUSH
24253: CALL_OW 121
// wait ( 0 0$01 ) ;
24257: LD_INT 35
24259: PPUSH
24260: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24264: LD_INT 22
24266: PUSH
24267: LD_INT 6
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PPUSH
24288: CALL_OW 69
24292: PPUSH
24293: LD_INT 124
24295: PPUSH
24296: LD_INT 98
24298: PPUSH
24299: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
24303: LD_INT 22
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 21
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 3
24325: PUSH
24326: LD_INT 54
24328: PUSH
24329: EMPTY
24330: LIST
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: PPUSH
24341: CALL_OW 69
24345: PPUSH
24346: LD_INT 124
24348: PPUSH
24349: LD_INT 98
24351: PPUSH
24352: CALL_OW 114
// wait ( 0 0$4 ) ;
24356: LD_INT 140
24358: PPUSH
24359: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24363: LD_INT 124
24365: PPUSH
24366: LD_INT 98
24368: PPUSH
24369: CALL_OW 84
// if SikorskyStatus = 1 then
24373: LD_EXP 21
24377: PUSH
24378: LD_INT 1
24380: EQUAL
24381: IFFALSE 24395
// begin Say ( Sikorski , D9-Sik-1 ) ;
24383: LD_EXP 16
24387: PPUSH
24388: LD_STRING D9-Sik-1
24390: PPUSH
24391: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24395: LD_EXP 21
24399: PUSH
24400: LD_INT 2
24402: EQUAL
24403: IFFALSE 24424
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24405: LD_EXP 23
24409: PPUSH
24410: LD_STRING D8b-Pow-1
24412: PPUSH
24413: CALL_OW 94
// YouLost ( Dismissed ) ;
24417: LD_STRING Dismissed
24419: PPUSH
24420: CALL_OW 104
// end ; p := 0 0$0 ;
24424: LD_ADDR_VAR 0 2
24428: PUSH
24429: LD_INT 0
24431: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24432: LD_INT 35
24434: PPUSH
24435: CALL_OW 67
// p := p + 0 0$1 ;
24439: LD_ADDR_VAR 0 2
24443: PUSH
24444: LD_VAR 0 2
24448: PUSH
24449: LD_INT 35
24451: PLUS
24452: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
24453: LD_INT 23
24455: PUSH
24456: LD_INT 3
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 21
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 24
24475: PUSH
24476: LD_INT 250
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 69
24492: PUSH
24493: LD_INT 0
24495: EQUAL
24496: PUSH
24497: LD_VAR 0 2
24501: PUSH
24502: LD_INT 245
24504: GREATEREQUAL
24505: OR
24506: IFFALSE 24432
// FinishMission ;
24508: CALL 24515 0 0
// end ;
24512: PPOPN 2
24514: END
// export function FinishMission ; var tmp ; begin
24515: LD_INT 0
24517: PPUSH
24518: PPUSH
// AddMedal ( med1 , 1 ) ;
24519: LD_STRING med1
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24529: LD_STRING med2
24531: PPUSH
24532: LD_INT 1
24534: PPUSH
24535: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24539: LD_STRING perfect
24541: PPUSH
24542: LD_INT 1
24544: PPUSH
24545: CALL_OW 101
// GiveMedals ( Main ) ;
24549: LD_STRING Main
24551: PPUSH
24552: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24556: LD_INT 22
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 23
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 21
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 25
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 25
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 25
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 25
24621: PUSH
24622: LD_INT 4
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: PPUSH
24642: CALL_OW 69
24646: PPUSH
24647: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24651: LD_EXP 1
24655: PPUSH
24656: LD_EXP 42
24660: PUSH
24661: LD_STRING JMM
24663: STR
24664: PPUSH
24665: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24669: LD_EXP 2
24673: PPUSH
24674: LD_EXP 42
24678: PUSH
24679: LD_STRING Brown
24681: STR
24682: PPUSH
24683: CALL 7772 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24687: LD_EXP 3
24691: PPUSH
24692: LD_EXP 42
24696: PUSH
24697: LD_STRING Donaldson
24699: STR
24700: PPUSH
24701: CALL 7772 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24705: LD_EXP 4
24709: PPUSH
24710: LD_EXP 42
24714: PUSH
24715: LD_STRING Bobby
24717: STR
24718: PPUSH
24719: CALL 7772 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24723: LD_EXP 5
24727: PPUSH
24728: LD_EXP 42
24732: PUSH
24733: LD_STRING Cyrus
24735: STR
24736: PPUSH
24737: CALL 7772 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24741: LD_EXP 6
24745: PPUSH
24746: LD_EXP 42
24750: PUSH
24751: LD_STRING Lisa
24753: STR
24754: PPUSH
24755: CALL 7772 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24759: LD_EXP 7
24763: PPUSH
24764: LD_EXP 42
24768: PUSH
24769: LD_STRING Frank
24771: STR
24772: PPUSH
24773: CALL 7772 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24777: LD_EXP 8
24781: PPUSH
24782: LD_EXP 42
24786: PUSH
24787: LD_STRING Gladstone
24789: STR
24790: PPUSH
24791: CALL 7772 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24795: LD_EXP 9
24799: PPUSH
24800: LD_EXP 42
24804: PUSH
24805: LD_STRING Kikuchi
24807: STR
24808: PPUSH
24809: CALL 7772 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24813: LD_EXP 14
24817: PPUSH
24818: LD_EXP 42
24822: PUSH
24823: LD_STRING Denis
24825: STR
24826: PPUSH
24827: CALL 7772 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24831: LD_EXP 15
24835: PPUSH
24836: LD_EXP 42
24840: PUSH
24841: LD_STRING Joan
24843: STR
24844: PPUSH
24845: CALL 7772 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24849: LD_EXP 10
24853: PPUSH
24854: LD_EXP 42
24858: PUSH
24859: LD_STRING Khatam
24861: STR
24862: PPUSH
24863: CALL 7772 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24867: LD_EXP 13
24871: PPUSH
24872: LD_EXP 42
24876: PUSH
24877: LD_STRING Houten
24879: STR
24880: PPUSH
24881: CALL 7772 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24885: LD_INT 50
24887: PUSH
24888: EMPTY
24889: LIST
24890: PUSH
24891: LD_INT 22
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 25
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 25
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 25
24936: PUSH
24937: LD_INT 3
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 25
24946: PUSH
24947: LD_INT 4
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PPUSH
24967: CALL_OW 69
24971: PUSH
24972: LD_EXP 1
24976: PUSH
24977: LD_EXP 2
24981: PUSH
24982: LD_EXP 3
24986: PUSH
24987: LD_EXP 4
24991: PUSH
24992: LD_EXP 5
24996: PUSH
24997: LD_EXP 6
25001: PUSH
25002: LD_EXP 7
25006: PUSH
25007: LD_EXP 8
25011: PUSH
25012: LD_EXP 9
25016: PUSH
25017: LD_EXP 14
25021: PUSH
25022: LD_EXP 15
25026: PUSH
25027: LD_EXP 13
25031: PUSH
25032: LD_EXP 10
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: DIFF
25052: PPUSH
25053: LD_STRING 08_other_survivors
25055: PPUSH
25056: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
25060: LD_INT 23
25062: PPUSH
25063: CALL 25076 0 1
// YouWin ;
25067: CALL_OW 103
// end ;
25071: LD_VAR 0 1
25075: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
25076: LD_INT 0
25078: PPUSH
25079: PPUSH
25080: PPUSH
25081: PPUSH
// gammaBase = [ ] ;
25082: LD_ADDR_VAR 0 4
25086: PUSH
25087: EMPTY
25088: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
25089: LD_ADDR_VAR 0 5
25093: PUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: LD_INT 22
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 21
25111: PUSH
25112: LD_INT 3
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 50
25121: PUSH
25122: EMPTY
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 70
25134: ST_TO_ADDR
// for i in buildings do
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_VAR 0 5
25144: PUSH
25145: FOR_IN
25146: IFFALSE 25583
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
25148: LD_VAR 0 3
25152: PPUSH
25153: CALL_OW 266
25157: PUSH
25158: LD_INT 6
25160: PUSH
25161: LD_INT 7
25163: PUSH
25164: LD_INT 8
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: IN
25172: IFFALSE 25286
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
25174: LD_ADDR_VAR 0 4
25178: PUSH
25179: LD_VAR 0 4
25183: PUSH
25184: LD_VAR 0 3
25188: PPUSH
25189: CALL_OW 266
25193: PUSH
25194: LD_VAR 0 3
25198: PPUSH
25199: CALL_OW 250
25203: PUSH
25204: LD_VAR 0 3
25208: PPUSH
25209: CALL_OW 251
25213: PUSH
25214: LD_VAR 0 3
25218: PPUSH
25219: CALL_OW 254
25223: PUSH
25224: LD_VAR 0 3
25228: PPUSH
25229: CALL_OW 267
25233: PUSH
25234: LD_VAR 0 3
25238: PPUSH
25239: CALL_OW 248
25243: PUSH
25244: LD_VAR 0 3
25248: PPUSH
25249: LD_INT 1
25251: PPUSH
25252: CALL_OW 268
25256: PUSH
25257: LD_VAR 0 3
25261: PPUSH
25262: LD_INT 2
25264: PPUSH
25265: CALL_OW 268
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: PUSH
25280: EMPTY
25281: LIST
25282: ADD
25283: ST_TO_ADDR
25284: GO 25581
// if GetBType ( i ) = b_bunker then
25286: LD_VAR 0 3
25290: PPUSH
25291: CALL_OW 266
25295: PUSH
25296: LD_INT 32
25298: EQUAL
25299: IFFALSE 25396
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25301: LD_ADDR_VAR 0 4
25305: PUSH
25306: LD_VAR 0 4
25310: PUSH
25311: LD_VAR 0 3
25315: PPUSH
25316: CALL_OW 266
25320: PUSH
25321: LD_VAR 0 3
25325: PPUSH
25326: CALL_OW 250
25330: PUSH
25331: LD_VAR 0 3
25335: PPUSH
25336: CALL_OW 251
25340: PUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: CALL_OW 254
25350: PUSH
25351: LD_VAR 0 3
25355: PPUSH
25356: CALL_OW 267
25360: PUSH
25361: LD_VAR 0 3
25365: PPUSH
25366: CALL_OW 248
25370: PUSH
25371: LD_VAR 0 3
25375: PPUSH
25376: CALL_OW 269
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: ADD
25393: ST_TO_ADDR
25394: GO 25581
// if GetBType ( i ) = b_factory then
25396: LD_VAR 0 3
25400: PPUSH
25401: CALL_OW 266
25405: PUSH
25406: LD_INT 3
25408: EQUAL
25409: IFFALSE 25499
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25411: LD_ADDR_VAR 0 4
25415: PUSH
25416: LD_VAR 0 4
25420: PPUSH
25421: LD_INT 1
25423: PPUSH
25424: LD_VAR 0 3
25428: PPUSH
25429: CALL_OW 266
25433: PUSH
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL_OW 250
25443: PUSH
25444: LD_VAR 0 3
25448: PPUSH
25449: CALL_OW 251
25453: PUSH
25454: LD_VAR 0 3
25458: PPUSH
25459: CALL_OW 254
25463: PUSH
25464: LD_VAR 0 3
25468: PPUSH
25469: CALL_OW 267
25473: PUSH
25474: LD_VAR 0 3
25478: PPUSH
25479: CALL_OW 248
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: PPUSH
25492: CALL_OW 2
25496: ST_TO_ADDR
25497: GO 25581
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25499: LD_ADDR_VAR 0 4
25503: PUSH
25504: LD_VAR 0 4
25508: PUSH
25509: LD_VAR 0 3
25513: PPUSH
25514: CALL_OW 266
25518: PUSH
25519: LD_VAR 0 3
25523: PPUSH
25524: CALL_OW 250
25528: PUSH
25529: LD_VAR 0 3
25533: PPUSH
25534: CALL_OW 251
25538: PUSH
25539: LD_VAR 0 3
25543: PPUSH
25544: CALL_OW 254
25548: PUSH
25549: LD_VAR 0 3
25553: PPUSH
25554: CALL_OW 267
25558: PUSH
25559: LD_VAR 0 3
25563: PPUSH
25564: CALL_OW 248
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: PUSH
25577: EMPTY
25578: LIST
25579: ADD
25580: ST_TO_ADDR
// end ;
25581: GO 25145
25583: POP
25584: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25585: LD_VAR 0 4
25589: PPUSH
25590: LD_STRING 08_GammaBase
25592: PPUSH
25593: CALL_OW 39
// end ;
25597: LD_VAR 0 2
25601: RET
