// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyBuilds ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 40
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 41
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 37
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyBuilds = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 35
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// defenders_list = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// varEvent1 = 0 ;
 126: LD_ADDR_EXP 39
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// timerStatus = 0 ;
 134: LD_ADDR_EXP 34
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 142: LD_ADDR_EXP 38
 146: PUSH
 147: LD_INT 18
 149: PUSH
 150: LD_INT 17
 152: PUSH
 153: LD_INT 15
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_OWVAR 67
 165: ARRAY
 166: ST_TO_ADDR
// debugMode = 0 ;
 167: LD_ADDR_EXP 42
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// PrepareDifficulty ;
 175: CALL 5215 0 0
// PrepareBase ;
 179: CALL 865 0 0
// PrepareHeroes ;
 183: CALL 485 0 0
// PrepareSoldiers ;
 187: CALL 710 0 0
// PrepareRussianCommander ;
 191: CALL 4020 0 0
// PrepareRussians ;
 195: CALL 4338 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 199: LD_INT 22
 201: PUSH
 202: LD_INT 3
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 25
 211: PUSH
 212: LD_INT 2
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PPUSH
 223: CALL_OW 69
 227: PPUSH
 228: LD_INT 0
 230: PPUSH
 231: LD_INT 90
 233: PPUSH
 234: LD_INT 86
 236: PPUSH
 237: LD_INT 3
 239: PPUSH
 240: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 244: LD_INT 3
 246: PPUSH
 247: LD_INT 24
 249: PPUSH
 250: LD_INT 3
 252: PPUSH
 253: LD_EXP 24
 257: PPUSH
 258: LD_EXP 25
 262: PPUSH
 263: CALL_OW 12
 267: PPUSH
 268: LD_INT 6
 270: PPUSH
 271: LD_INT 4
 273: PPUSH
 274: CALL 6433 0 6
// PrepareCutsceneAttack ;
 278: CALL 4072 0 0
// end ;
 282: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 283: LD_EXP 42
 287: PUSH
 288: LD_INT 1
 290: EQUAL
 291: IFFALSE 482
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// fogoff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 30
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PPUSH
 389: CALL_OW 69
 393: PUSH
 394: FOR_IN
 395: IFFALSE 419
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 397: LD_VAR 0 1
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
 417: GO 394
 419: POP
 420: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 421: LD_ADDR_VAR 0 1
 425: PUSH
 426: LD_INT 22
 428: PUSH
 429: LD_INT 1
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: PUSH
 436: LD_INT 30
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: FOR_IN
 456: IFFALSE 480
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 458: LD_VAR 0 1
 462: PPUSH
 463: CALL_OW 274
 467: PPUSH
 468: LD_INT 2
 470: PPUSH
 471: LD_INT 9999
 473: PPUSH
 474: CALL_OW 277
 478: GO 455
 480: POP
 481: POP
// end ; end_of_file
 482: PPOPN 1
 484: END
// export function PrepareHeroes ; var i ; begin
 485: LD_INT 0
 487: PPUSH
 488: PPUSH
// uc_side = 1 ;
 489: LD_ADDR_OWVAR 20
 493: PUSH
 494: LD_INT 1
 496: ST_TO_ADDR
// uc_nation = 1 ;
 497: LD_ADDR_OWVAR 21
 501: PUSH
 502: LD_INT 1
 504: ST_TO_ADDR
// if gammaCommander = 1 then
 505: LD_EXP 11
 509: PUSH
 510: LD_INT 1
 512: EQUAL
 513: IFFALSE 546
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 515: LD_ADDR_EXP 3
 519: PUSH
 520: LD_STRING Donaldson
 522: PPUSH
 523: LD_INT 1
 525: PPUSH
 526: CALL 4756 0 2
 530: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 531: LD_EXP 3
 535: PPUSH
 536: LD_INT 5
 538: PPUSH
 539: LD_INT 0
 541: PPUSH
 542: CALL_OW 49
// end ; if gammaCommander = 2 then
 546: LD_EXP 11
 550: PUSH
 551: LD_INT 2
 553: EQUAL
 554: IFFALSE 587
// begin Brown = PrepareUnit ( Brown , true ) ;
 556: LD_ADDR_EXP 2
 560: PUSH
 561: LD_STRING Brown
 563: PPUSH
 564: LD_INT 1
 566: PPUSH
 567: CALL 4756 0 2
 571: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 572: LD_EXP 2
 576: PPUSH
 577: LD_INT 5
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// end ; if gammaCommander = 3 then
 587: LD_EXP 11
 591: PUSH
 592: LD_INT 3
 594: EQUAL
 595: IFFALSE 628
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 597: LD_ADDR_EXP 12
 601: PUSH
 602: LD_STRING VanHouten
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: CALL 4756 0 2
 612: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 613: LD_EXP 12
 617: PPUSH
 618: LD_INT 5
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 628: LD_ADDR_EXP 21
 632: PUSH
 633: LD_STRING Harisson
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL 4756 0 2
 643: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 644: LD_ADDR_EXP 22
 648: PUSH
 649: LD_STRING Powell
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL 4756 0 2
 659: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 660: LD_ADDR_EXP 10
 664: PUSH
 665: LD_STRING 07_othersGamma
 667: PPUSH
 668: CALL_OW 31
 672: ST_TO_ADDR
// for i in others_gamma do
 673: LD_ADDR_VAR 0 2
 677: PUSH
 678: LD_EXP 10
 682: PUSH
 683: FOR_IN
 684: IFFALSE 703
// PlaceUnitArea ( i , GammaSpawn , false ) ;
 686: LD_VAR 0 2
 690: PPUSH
 691: LD_INT 5
 693: PPUSH
 694: LD_INT 0
 696: PPUSH
 697: CALL_OW 49
 701: GO 683
 703: POP
 704: POP
// end ;
 705: LD_VAR 0 1
 709: RET
// export function PrepareSoldiers ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// uc_side = 1 ;
 714: LD_ADDR_OWVAR 20
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// uc_nation = 1 ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
 730: LD_ADDR_VAR 0 2
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_INT 1
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 30
 747: PUSH
 748: LD_INT 32
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL_OW 69
 763: PUSH
 764: FOR_IN
 765: IFFALSE 793
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 767: LD_INT 1
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_VAR 0 2
 777: PPUSH
 778: LD_INT 4
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: CALL 5105 0 6
 791: GO 764
 793: POP
 794: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
 795: LD_ADDR_VAR 0 2
 799: PUSH
 800: LD_INT 22
 802: PUSH
 803: LD_INT 1
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 30
 812: PUSH
 813: LD_INT 31
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PUSH
 829: FOR_IN
 830: IFFALSE 858
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
 832: LD_INT 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: LD_INT 4
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL 5105 0 6
 856: GO 829
 858: POP
 859: POP
// end ;
 860: LD_VAR 0 1
 864: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
 865: LD_INT 0
 867: PPUSH
 868: PPUSH
 869: PPUSH
 870: PPUSH
 871: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
 872: LD_INT 71
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
 885: LD_ADDR_VAR 0 2
 889: PUSH
 890: LD_STRING GammaBase
 892: PPUSH
 893: EMPTY
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// uc_side := 1 ;
 900: LD_ADDR_OWVAR 20
 904: PUSH
 905: LD_INT 1
 907: ST_TO_ADDR
// uc_nation := 1 ;
 908: LD_ADDR_OWVAR 21
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// for i in blist do
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_VAR 0 2
 925: PUSH
 926: FOR_IN
 927: IFFALSE 1335
// begin bc_type := i [ 1 ] ;
 929: LD_ADDR_OWVAR 42
 933: PUSH
 934: LD_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: ARRAY
 942: ST_TO_ADDR
// bc_level := i [ 5 ] ;
 943: LD_ADDR_OWVAR 43
 947: PUSH
 948: LD_VAR 0 3
 952: PUSH
 953: LD_INT 5
 955: ARRAY
 956: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
 957: LD_VAR 0 3
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PUSH
 966: LD_INT 7
 968: PUSH
 969: LD_INT 8
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: IN
 976: IFFALSE 1032
// begin bc_kind1 := i [ 7 ] ;
 978: LD_ADDR_OWVAR 44
 982: PUSH
 983: LD_VAR 0 3
 987: PUSH
 988: LD_INT 7
 990: ARRAY
 991: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
 992: LD_STRING 06_remoteVehs_1
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 30
1002: PUSH
1003: LD_INT 1
1005: EQUAL
1006: IFFALSE 1018
// begin bc_kind2 := 15 ;
1008: LD_ADDR_OWVAR 45
1012: PUSH
1013: LD_INT 15
1015: ST_TO_ADDR
// end else
1016: GO 1032
// begin bc_kind2 := i [ 8 ] ;
1018: LD_ADDR_OWVAR 45
1022: PUSH
1023: LD_VAR 0 3
1027: PUSH
1028: LD_INT 8
1030: ARRAY
1031: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1032: LD_OWVAR 42
1036: PUSH
1037: LD_INT 0
1039: EQUAL
1040: IFFALSE 1158
// begin bc_type := b_warehouse ;
1042: LD_ADDR_OWVAR 42
1046: PUSH
1047: LD_INT 1
1049: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1050: LD_ADDR_EXP 36
1054: PUSH
1055: LD_VAR 0 3
1059: PUSH
1060: LD_INT 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 3
1068: PUSH
1069: LD_INT 3
1071: ARRAY
1072: PPUSH
1073: LD_VAR 0 3
1077: PUSH
1078: LD_INT 4
1080: ARRAY
1081: PPUSH
1082: CALL_OW 47
1086: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1087: LD_EXP 36
1091: PPUSH
1092: LD_STRING gamma
1094: PPUSH
1095: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1099: LD_EXP 36
1103: PPUSH
1104: CALL_OW 274
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 200
1114: PUSH
1115: LD_INT 150
1117: PUSH
1118: LD_INT 100
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_OWVAR 67
1130: ARRAY
1131: PPUSH
1132: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1136: LD_EXP 36
1140: PPUSH
1141: CALL_OW 274
1145: PPUSH
1146: LD_INT 2
1148: PPUSH
1149: LD_INT 200
1151: PPUSH
1152: CALL_OW 277
// end else
1156: GO 1300
// begin if bc_type = 4 then
1158: LD_OWVAR 42
1162: PUSH
1163: LD_INT 4
1165: EQUAL
1166: IFFALSE 1215
// begin bc_type = 5 ;
1168: LD_ADDR_OWVAR 42
1172: PUSH
1173: LD_INT 5
1175: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1176: LD_ADDR_VAR 0 4
1180: PUSH
1181: LD_VAR 0 3
1185: PUSH
1186: LD_INT 2
1188: ARRAY
1189: PPUSH
1190: LD_VAR 0 3
1194: PUSH
1195: LD_INT 3
1197: ARRAY
1198: PPUSH
1199: LD_VAR 0 3
1203: PUSH
1204: LD_INT 4
1206: ARRAY
1207: PPUSH
1208: CALL_OW 47
1212: ST_TO_ADDR
// end else
1213: GO 1300
// begin bc_type := i [ 1 ] ;
1215: LD_ADDR_OWVAR 42
1219: PUSH
1220: LD_VAR 0 3
1224: PUSH
1225: LD_INT 1
1227: ARRAY
1228: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1229: LD_STRING 06_remoteVehs_1
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 30
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: PUSH
1244: LD_OWVAR 42
1248: PUSH
1249: LD_INT 7
1251: EQUAL
1252: AND
1253: IFFALSE 1263
// bc_type := b_lab_full ;
1255: LD_ADDR_OWVAR 42
1259: PUSH
1260: LD_INT 8
1262: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1263: LD_ADDR_VAR 0 4
1267: PUSH
1268: LD_VAR 0 3
1272: PUSH
1273: LD_INT 2
1275: ARRAY
1276: PPUSH
1277: LD_VAR 0 3
1281: PUSH
1282: LD_INT 3
1284: ARRAY
1285: PPUSH
1286: LD_VAR 0 3
1290: PUSH
1291: LD_INT 4
1293: ARRAY
1294: PPUSH
1295: CALL_OW 47
1299: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1300: LD_VAR 0 4
1304: PPUSH
1305: CALL_OW 266
1309: PUSH
1310: LD_INT 32
1312: EQUAL
1313: IFFALSE 1333
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1315: LD_VAR 0 4
1319: PPUSH
1320: LD_VAR 0 3
1324: PUSH
1325: LD_INT 7
1327: ARRAY
1328: PPUSH
1329: CALL_OW 431
// end ;
1333: GO 926
1335: POP
1336: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1337: LD_STRING 06_remoteVehs_1
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 30
1347: PUSH
1348: LD_INT 1
1350: EQUAL
1351: IFFALSE 1555
// begin bc_type = 36 ;
1353: LD_ADDR_OWVAR 42
1357: PUSH
1358: LD_INT 36
1360: ST_TO_ADDR
// bc_level = 4 ;
1361: LD_ADDR_OWVAR 43
1365: PUSH
1366: LD_INT 4
1368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1369: LD_INT 62
1371: PPUSH
1372: LD_INT 12
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: DOUBLE
1388: LD_INT 1
1390: DEC
1391: ST_TO_ADDR
1392: LD_INT 3
1394: PUSH
1395: LD_INT 2
1397: PUSH
1398: LD_INT 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: LD_OWVAR 67
1410: ARRAY
1411: PUSH
1412: FOR_TO
1413: IFFALSE 1553
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1415: LD_ADDR_OWVAR 37
1419: PUSH
1420: LD_INT 3
1422: PUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_INT 2
1438: PPUSH
1439: CALL_OW 12
1443: ARRAY
1444: PUSH
1445: LD_INT 2
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_OWVAR 67
1457: ARRAY
1458: ST_TO_ADDR
// vc_engine = 1 ;
1459: LD_ADDR_OWVAR 39
1463: PUSH
1464: LD_INT 1
1466: ST_TO_ADDR
// vc_control = 2 ;
1467: LD_ADDR_OWVAR 38
1471: PUSH
1472: LD_INT 2
1474: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1475: LD_ADDR_OWVAR 40
1479: PUSH
1480: LD_INT 3
1482: PUSH
1483: LD_INT 4
1485: PUSH
1486: LD_INT 5
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: CALL_OW 12
1504: ARRAY
1505: ST_TO_ADDR
// veh = CreateVehicle ;
1506: LD_ADDR_VAR 0 5
1510: PUSH
1511: CALL_OW 45
1515: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
1516: LD_VAR 0 5
1520: PPUSH
1521: LD_EXP 36
1525: PPUSH
1526: CALL_OW 250
1530: PPUSH
1531: LD_EXP 36
1535: PPUSH
1536: CALL_OW 251
1540: PPUSH
1541: LD_INT 7
1543: PPUSH
1544: LD_INT 0
1546: PPUSH
1547: CALL_OW 50
// end ;
1551: GO 1412
1553: POP
1554: POP
// end ; end ;
1555: LD_VAR 0 1
1559: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
1560: LD_INT 0
1562: PPUSH
1563: PPUSH
1564: PPUSH
1565: PPUSH
// uc_side = 1 ;
1566: LD_ADDR_OWVAR 20
1570: PUSH
1571: LD_INT 1
1573: ST_TO_ADDR
// uc_nation = 1 ;
1574: LD_ADDR_OWVAR 21
1578: PUSH
1579: LD_INT 1
1581: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
1582: LD_ADDR_EXP 13
1586: PUSH
1587: LD_STRING 06c_Denis
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: CALL 4756 0 2
1597: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
1598: LD_EXP 13
1602: PPUSH
1603: LD_INT 4
1605: PPUSH
1606: LD_INT 0
1608: PPUSH
1609: CALL_OW 49
// if IsOk ( Denis ) then
1613: LD_EXP 13
1617: PPUSH
1618: CALL_OW 302
1622: IFFALSE 1638
// i = i + 1 ;
1624: LD_ADDR_VAR 0 2
1628: PUSH
1629: LD_VAR 0 2
1633: PUSH
1634: LD_INT 1
1636: PLUS
1637: ST_TO_ADDR
// Joan = PrepareUnit ( 06c_Joan , true ) ;
1638: LD_ADDR_EXP 14
1642: PUSH
1643: LD_STRING 06c_Joan
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL 4756 0 2
1653: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
1654: LD_EXP 14
1658: PPUSH
1659: LD_INT 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// if IsOk ( Joan ) then
1669: LD_EXP 14
1673: PPUSH
1674: CALL_OW 302
1678: IFFALSE 1694
// i = i + 1 ;
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: LD_VAR 0 2
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
1694: LD_STRING GladstoneIn07
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL_OW 30
1704: PUSH
1705: LD_INT 0
1707: EQUAL
1708: IFFALSE 1755
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
1710: LD_ADDR_EXP 8
1714: PUSH
1715: LD_STRING 06c_Gladstone
1717: PPUSH
1718: LD_INT 1
1720: PPUSH
1721: CALL 4756 0 2
1725: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_INT 4
1733: PPUSH
1734: LD_INT 0
1736: PPUSH
1737: CALL_OW 49
// i = i + 1 ;
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: LD_VAR 0 2
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: ST_TO_ADDR
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
1755: LD_ADDR_VAR 0 4
1759: PUSH
1760: LD_STRING OtherStayInDelta
1762: PPUSH
1763: CALL_OW 31
1767: ST_TO_ADDR
// for j = 3 to 3 + 3 - i do
1768: LD_ADDR_VAR 0 3
1772: PUSH
1773: DOUBLE
1774: LD_INT 3
1776: DEC
1777: ST_TO_ADDR
1778: LD_INT 3
1780: PUSH
1781: LD_INT 3
1783: PLUS
1784: PUSH
1785: LD_VAR 0 2
1789: MINUS
1790: PUSH
1791: FOR_TO
1792: IFFALSE 1817
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
1794: LD_VAR 0 4
1798: PUSH
1799: LD_VAR 0 3
1803: ARRAY
1804: PPUSH
1805: LD_INT 4
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 49
1815: GO 1791
1817: POP
1818: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
1819: LD_ADDR_VAR 0 4
1823: PUSH
1824: LD_STRING 06_other_apemans
1826: PPUSH
1827: CALL_OW 31
1831: ST_TO_ADDR
// if other >= 5 then
1832: LD_VAR 0 4
1836: PUSH
1837: LD_INT 5
1839: GREATEREQUAL
1840: IFFALSE 1885
// begin for i := 1 to 5 do
1842: LD_ADDR_VAR 0 2
1846: PUSH
1847: DOUBLE
1848: LD_INT 1
1850: DEC
1851: ST_TO_ADDR
1852: LD_INT 5
1854: PUSH
1855: FOR_TO
1856: IFFALSE 1881
// begin PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
1858: LD_VAR 0 4
1862: PUSH
1863: LD_VAR 0 2
1867: ARRAY
1868: PPUSH
1869: LD_INT 4
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1855
1881: POP
1882: POP
// end else
1883: GO 1917
// begin for i in other do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: LD_VAR 0 4
1894: PUSH
1895: FOR_IN
1896: IFFALSE 1915
// PlaceUnitArea ( i , GammaSupport , false ) ;
1898: LD_VAR 0 2
1902: PPUSH
1903: LD_INT 4
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL_OW 49
1913: GO 1895
1915: POP
1916: POP
// end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
1917: LD_INT 4
1919: PPUSH
1920: LD_INT 22
1922: PUSH
1923: LD_INT 1
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 21
1932: PUSH
1933: LD_INT 1
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PPUSH
1944: CALL_OW 70
1948: PPUSH
1949: LD_INT 53
1951: PPUSH
1952: LD_INT 19
1954: PPUSH
1955: CALL_OW 111
// firstAttack = 1 ;
1959: LD_ADDR_EXP 32
1963: PUSH
1964: LD_INT 1
1966: ST_TO_ADDR
// end ;
1967: LD_VAR 0 1
1971: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
1972: LD_INT 0
1974: PPUSH
1975: PPUSH
1976: PPUSH
1977: PPUSH
1978: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: LD_STRING 07_vehicles
1986: PPUSH
1987: EMPTY
1988: PPUSH
1989: CALL_OW 30
1993: ST_TO_ADDR
// uc_side = 1 ;
1994: LD_ADDR_OWVAR 20
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// uc_nation = 1 ;
2002: LD_ADDR_OWVAR 21
2006: PUSH
2007: LD_INT 1
2009: ST_TO_ADDR
// if vehicles > 0 then
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 0
2017: GREATER
2018: IFFALSE 2157
// begin for i = 1 to vehicles do
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_VAR 0 4
2034: PUSH
2035: FOR_TO
2036: IFFALSE 2155
// begin vc_chassis = vehicles [ i ] ;
2038: LD_ADDR_OWVAR 37
2042: PUSH
2043: LD_VAR 0 4
2047: PUSH
2048: LD_VAR 0 2
2052: ARRAY
2053: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2054: LD_ADDR_OWVAR 39
2058: PUSH
2059: LD_VAR 0 4
2063: PUSH
2064: LD_VAR 0 2
2068: PUSH
2069: LD_INT 1
2071: PLUS
2072: ARRAY
2073: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2074: LD_ADDR_OWVAR 38
2078: PUSH
2079: LD_VAR 0 4
2083: PUSH
2084: LD_VAR 0 2
2088: PUSH
2089: LD_INT 2
2091: PLUS
2092: ARRAY
2093: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2094: LD_ADDR_OWVAR 40
2098: PUSH
2099: LD_VAR 0 4
2103: PUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_INT 3
2111: PLUS
2112: ARRAY
2113: ST_TO_ADDR
// veh = CreateVehicle ;
2114: LD_ADDR_VAR 0 5
2118: PUSH
2119: CALL_OW 45
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
2124: LD_VAR 0 5
2128: PPUSH
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// i = i + 3 ;
2139: LD_ADDR_VAR 0 2
2143: PUSH
2144: LD_VAR 0 2
2148: PUSH
2149: LD_INT 3
2151: PLUS
2152: ST_TO_ADDR
// end ;
2153: GO 2035
2155: POP
2156: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2157: LD_ADDR_EXP 1
2161: PUSH
2162: LD_EXP 41
2166: PUSH
2167: LD_STRING JMM
2169: STR
2170: PPUSH
2171: LD_INT 1
2173: PPUSH
2174: CALL 4756 0 2
2178: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2179: LD_EXP 11
2183: PUSH
2184: LD_INT 1
2186: EQUAL
2187: PUSH
2188: LD_EXP 11
2192: PUSH
2193: LD_INT 3
2195: EQUAL
2196: OR
2197: IFFALSE 2221
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
2199: LD_ADDR_EXP 2
2203: PUSH
2204: LD_EXP 41
2208: PUSH
2209: LD_STRING Brown
2211: STR
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL 4756 0 2
2220: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
2221: LD_EXP 11
2225: PUSH
2226: LD_INT 2
2228: EQUAL
2229: PUSH
2230: LD_EXP 11
2234: PUSH
2235: LD_INT 3
2237: EQUAL
2238: OR
2239: IFFALSE 2263
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
2241: LD_ADDR_EXP 3
2245: PUSH
2246: LD_EXP 41
2250: PUSH
2251: LD_STRING Donaldson
2253: STR
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: CALL 4756 0 2
2262: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2263: LD_ADDR_EXP 4
2267: PUSH
2268: LD_EXP 41
2272: PUSH
2273: LD_STRING Bobby
2275: STR
2276: PPUSH
2277: LD_INT 1
2279: PPUSH
2280: CALL 4756 0 2
2284: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2285: LD_ADDR_EXP 5
2289: PUSH
2290: LD_EXP 41
2294: PUSH
2295: LD_STRING Cyrus
2297: STR
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL 4756 0 2
2306: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2307: LD_ADDR_EXP 6
2311: PUSH
2312: LD_EXP 41
2316: PUSH
2317: LD_STRING Lisa
2319: STR
2320: PPUSH
2321: LD_INT 1
2323: PPUSH
2324: CALL 4756 0 2
2328: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2329: LD_ADDR_EXP 7
2333: PUSH
2334: LD_EXP 41
2338: PUSH
2339: LD_STRING Frank
2341: STR
2342: PPUSH
2343: LD_INT 1
2345: PPUSH
2346: CALL 4756 0 2
2350: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
2351: LD_ADDR_EXP 8
2355: PUSH
2356: LD_EXP 41
2360: PUSH
2361: LD_STRING Gladstone
2363: STR
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL 4756 0 2
2372: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
2373: LD_ADDR_EXP 9
2377: PUSH
2378: LD_EXP 41
2382: PUSH
2383: LD_STRING Kikuchi
2385: STR
2386: PPUSH
2387: LD_INT 1
2389: PPUSH
2390: CALL 4756 0 2
2394: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2395: LD_EXP 11
2399: PUSH
2400: LD_INT 1
2402: EQUAL
2403: PUSH
2404: LD_EXP 11
2408: PUSH
2409: LD_INT 3
2411: EQUAL
2412: OR
2413: IFFALSE 2430
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2415: LD_EXP 2
2419: PPUSH
2420: LD_INT 4
2422: PPUSH
2423: LD_INT 0
2425: PPUSH
2426: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
2430: LD_EXP 11
2434: PUSH
2435: LD_INT 2
2437: EQUAL
2438: PUSH
2439: LD_EXP 11
2443: PUSH
2444: LD_INT 3
2446: EQUAL
2447: OR
2448: IFFALSE 2465
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2450: LD_EXP 3
2454: PPUSH
2455: LD_INT 4
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2465: LD_ADDR_VAR 0 5
2469: PUSH
2470: LD_INT 4
2472: PPUSH
2473: LD_INT 22
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 21
2485: PUSH
2486: LD_INT 2
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 58
2495: PUSH
2496: EMPTY
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: PPUSH
2504: CALL_OW 70
2508: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2509: LD_ADDR_EXP 1
2513: PUSH
2514: LD_EXP 41
2518: PUSH
2519: LD_STRING JMM
2521: STR
2522: PPUSH
2523: LD_INT 1
2525: PPUSH
2526: CALL 4756 0 2
2530: ST_TO_ADDR
// if veh > 0 then
2531: LD_VAR 0 5
2535: PUSH
2536: LD_INT 0
2538: GREATER
2539: IFFALSE 2561
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
2541: LD_EXP 1
2545: PPUSH
2546: LD_VAR 0 5
2550: PUSH
2551: LD_INT 1
2553: ARRAY
2554: PPUSH
2555: CALL_OW 52
// end else
2559: GO 2576
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
2561: LD_EXP 1
2565: PPUSH
2566: LD_INT 4
2568: PPUSH
2569: LD_INT 0
2571: PPUSH
2572: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2576: LD_ADDR_VAR 0 5
2580: PUSH
2581: LD_INT 4
2583: PPUSH
2584: LD_INT 22
2586: PUSH
2587: LD_INT 1
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 21
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 58
2606: PUSH
2607: EMPTY
2608: LIST
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PPUSH
2615: CALL_OW 70
2619: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2620: LD_ADDR_EXP 4
2624: PUSH
2625: LD_EXP 41
2629: PUSH
2630: LD_STRING Bobby
2632: STR
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: CALL 4756 0 2
2641: ST_TO_ADDR
// if veh > 0 then
2642: LD_VAR 0 5
2646: PUSH
2647: LD_INT 0
2649: GREATER
2650: IFFALSE 2672
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
2652: LD_EXP 4
2656: PPUSH
2657: LD_VAR 0 5
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 52
// end else
2670: GO 2687
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2672: LD_EXP 4
2676: PPUSH
2677: LD_INT 4
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2687: LD_ADDR_VAR 0 5
2691: PUSH
2692: LD_INT 4
2694: PPUSH
2695: LD_INT 22
2697: PUSH
2698: LD_INT 1
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 21
2707: PUSH
2708: LD_INT 2
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 58
2717: PUSH
2718: EMPTY
2719: LIST
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PPUSH
2726: CALL_OW 70
2730: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2731: LD_ADDR_EXP 5
2735: PUSH
2736: LD_EXP 41
2740: PUSH
2741: LD_STRING Cyrus
2743: STR
2744: PPUSH
2745: LD_INT 1
2747: PPUSH
2748: CALL 4756 0 2
2752: ST_TO_ADDR
// if veh > 0 then
2753: LD_VAR 0 5
2757: PUSH
2758: LD_INT 0
2760: GREATER
2761: IFFALSE 2783
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
2763: LD_EXP 5
2767: PPUSH
2768: LD_VAR 0 5
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: PPUSH
2777: CALL_OW 52
// end else
2781: GO 2798
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2783: LD_EXP 5
2787: PPUSH
2788: LD_INT 4
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2798: LD_ADDR_VAR 0 5
2802: PUSH
2803: LD_INT 4
2805: PPUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 21
2818: PUSH
2819: LD_INT 2
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 58
2828: PUSH
2829: EMPTY
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL_OW 70
2841: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
2842: LD_ADDR_EXP 6
2846: PUSH
2847: LD_EXP 41
2851: PUSH
2852: LD_STRING Lisa
2854: STR
2855: PPUSH
2856: LD_INT 1
2858: PPUSH
2859: CALL 4756 0 2
2863: ST_TO_ADDR
// if veh > 0 then
2864: LD_VAR 0 5
2868: PUSH
2869: LD_INT 0
2871: GREATER
2872: IFFALSE 2894
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
2874: LD_EXP 6
2878: PPUSH
2879: LD_VAR 0 5
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PPUSH
2888: CALL_OW 52
// end else
2892: GO 2909
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2894: LD_EXP 6
2898: PPUSH
2899: LD_INT 4
2901: PPUSH
2902: LD_INT 0
2904: PPUSH
2905: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2909: LD_ADDR_VAR 0 5
2913: PUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 58
2939: PUSH
2940: EMPTY
2941: LIST
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 70
2952: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
2953: LD_ADDR_EXP 7
2957: PUSH
2958: LD_EXP 41
2962: PUSH
2963: LD_STRING Frank
2965: STR
2966: PPUSH
2967: LD_INT 1
2969: PPUSH
2970: CALL 4756 0 2
2974: ST_TO_ADDR
// if veh > 0 then
2975: LD_VAR 0 5
2979: PUSH
2980: LD_INT 0
2982: GREATER
2983: IFFALSE 3005
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
2985: LD_EXP 7
2989: PPUSH
2990: LD_VAR 0 5
2994: PUSH
2995: LD_INT 1
2997: ARRAY
2998: PPUSH
2999: CALL_OW 52
// end else
3003: GO 3020
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3005: LD_EXP 7
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: LD_INT 0
3015: PPUSH
3016: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3020: LD_ADDR_VAR 0 5
3024: PUSH
3025: LD_INT 4
3027: PPUSH
3028: LD_INT 22
3030: PUSH
3031: LD_INT 1
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 21
3040: PUSH
3041: LD_INT 2
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 58
3050: PUSH
3051: EMPTY
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 70
3063: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3064: LD_ADDR_EXP 8
3068: PUSH
3069: LD_EXP 41
3073: PUSH
3074: LD_STRING Gladstone
3076: STR
3077: PPUSH
3078: LD_INT 1
3080: PPUSH
3081: CALL 4756 0 2
3085: ST_TO_ADDR
// if veh > 0 then
3086: LD_VAR 0 5
3090: PUSH
3091: LD_INT 0
3093: GREATER
3094: IFFALSE 3116
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3096: LD_EXP 8
3100: PPUSH
3101: LD_VAR 0 5
3105: PUSH
3106: LD_INT 1
3108: ARRAY
3109: PPUSH
3110: CALL_OW 52
// end else
3114: GO 3131
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3116: LD_EXP 8
3120: PPUSH
3121: LD_INT 4
3123: PPUSH
3124: LD_INT 0
3126: PPUSH
3127: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3131: LD_ADDR_VAR 0 5
3135: PUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 22
3141: PUSH
3142: LD_INT 1
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 21
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 58
3161: PUSH
3162: EMPTY
3163: LIST
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 70
3174: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3175: LD_ADDR_EXP 9
3179: PUSH
3180: LD_EXP 41
3184: PUSH
3185: LD_STRING Kikuchi
3187: STR
3188: PPUSH
3189: LD_INT 1
3191: PPUSH
3192: CALL 4756 0 2
3196: ST_TO_ADDR
// if veh > 0 then
3197: LD_VAR 0 5
3201: PUSH
3202: LD_INT 0
3204: GREATER
3205: IFFALSE 3227
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
3207: LD_EXP 9
3211: PPUSH
3212: LD_VAR 0 5
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 52
// end else
3225: GO 3242
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
3227: LD_EXP 9
3231: PPUSH
3232: LD_INT 4
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_STRING 07c_others
3249: PPUSH
3250: CALL_OW 31
3254: ST_TO_ADDR
// for i in other do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_VAR 0 3
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3359
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3268: LD_ADDR_VAR 0 5
3272: PUSH
3273: LD_INT 4
3275: PPUSH
3276: LD_INT 22
3278: PUSH
3279: LD_INT 1
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: LD_INT 21
3288: PUSH
3289: LD_INT 2
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 58
3298: PUSH
3299: EMPTY
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 70
3311: ST_TO_ADDR
// if veh > 0 then
3312: LD_VAR 0 5
3316: PUSH
3317: LD_INT 0
3319: GREATER
3320: IFFALSE 3342
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
3322: LD_VAR 0 2
3326: PPUSH
3327: LD_VAR 0 5
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: CALL_OW 52
// end else
3340: GO 3357
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
3342: LD_VAR 0 2
3346: PPUSH
3347: LD_INT 4
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 49
// end ; end ;
3357: GO 3265
3359: POP
3360: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
3361: LD_INT 4
3363: PPUSH
3364: LD_INT 22
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: PPUSH
3377: CALL_OW 70
3381: PPUSH
3382: LD_INT 53
3384: PPUSH
3385: LD_INT 19
3387: PPUSH
3388: CALL_OW 111
// end ;
3392: LD_VAR 0 1
3396: RET
// export function PrepareSikorsky ; begin
3397: LD_INT 0
3399: PPUSH
// uc_side = 4 ;
3400: LD_ADDR_OWVAR 20
3404: PUSH
3405: LD_INT 4
3407: ST_TO_ADDR
// uc_nation = 1 ;
3408: LD_ADDR_OWVAR 21
3412: PUSH
3413: LD_INT 1
3415: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
3416: LD_ADDR_EXP 15
3420: PUSH
3421: LD_STRING Sikorski
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL 4756 0 2
3431: ST_TO_ADDR
// vc_engine = 1 ;
3432: LD_ADDR_OWVAR 39
3436: PUSH
3437: LD_INT 1
3439: ST_TO_ADDR
// vc_control = 1 ;
3440: LD_ADDR_OWVAR 38
3444: PUSH
3445: LD_INT 1
3447: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
3448: LD_ADDR_OWVAR 40
3452: PUSH
3453: LD_INT 5
3455: PUSH
3456: LD_INT 3
3458: PUSH
3459: LD_INT 4
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: PUSH
3467: LD_OWVAR 67
3471: ARRAY
3472: ST_TO_ADDR
// vc_chassis = 4 ;
3473: LD_ADDR_OWVAR 37
3477: PUSH
3478: LD_INT 4
3480: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
3481: LD_ADDR_EXP 16
3485: PUSH
3486: CALL_OW 45
3490: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
3491: LD_EXP 16
3495: PPUSH
3496: LD_INT 9
3498: PPUSH
3499: LD_INT 0
3501: PPUSH
3502: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
3506: LD_EXP 15
3510: PPUSH
3511: LD_EXP 16
3515: PPUSH
3516: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
3520: LD_EXP 16
3524: PPUSH
3525: LD_INT 5
3527: PPUSH
3528: CALL_OW 113
// end ;
3532: LD_VAR 0 1
3536: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
3537: LD_INT 0
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: DOUBLE
3549: LD_INT 1
3551: DEC
3552: ST_TO_ADDR
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: LD_INT 7
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_OWVAR 67
3571: ARRAY
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3671
// begin uc_side = 4 ;
3576: LD_ADDR_OWVAR 20
3580: PUSH
3581: LD_INT 4
3583: ST_TO_ADDR
// uc_nation = 1 ;
3584: LD_ADDR_OWVAR 21
3588: PUSH
3589: LD_INT 1
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// hc_gallery =  ;
3600: LD_ADDR_OWVAR 33
3604: PUSH
3605: LD_STRING 
3607: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
3608: LD_INT 0
3610: PPUSH
3611: LD_INT 1
3613: PPUSH
3614: LD_INT 5
3616: PPUSH
3617: LD_INT 8
3619: PPUSH
3620: CALL_OW 12
3624: PPUSH
3625: CALL_OW 380
// un = CreateHuman ;
3629: LD_ADDR_VAR 0 3
3633: PUSH
3634: CALL_OW 44
3638: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_INT 9
3646: PPUSH
3647: LD_INT 0
3649: PPUSH
3650: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_INT 53
3661: PPUSH
3662: LD_INT 23
3664: PPUSH
3665: CALL_OW 111
// end ;
3669: GO 3573
3671: POP
3672: POP
// for i = 1 to 3 do
3673: LD_ADDR_VAR 0 2
3677: PUSH
3678: DOUBLE
3679: LD_INT 1
3681: DEC
3682: ST_TO_ADDR
3683: LD_INT 3
3685: PUSH
3686: FOR_TO
3687: IFFALSE 3784
// begin uc_side = 4 ;
3689: LD_ADDR_OWVAR 20
3693: PUSH
3694: LD_INT 4
3696: ST_TO_ADDR
// uc_nation = 1 ;
3697: LD_ADDR_OWVAR 21
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// hc_name =  ;
3705: LD_ADDR_OWVAR 26
3709: PUSH
3710: LD_STRING 
3712: ST_TO_ADDR
// hc_gallery =  ;
3713: LD_ADDR_OWVAR 33
3717: PUSH
3718: LD_STRING 
3720: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
3721: LD_INT 0
3723: PPUSH
3724: LD_INT 4
3726: PPUSH
3727: LD_INT 5
3729: PPUSH
3730: LD_INT 8
3732: PPUSH
3733: CALL_OW 12
3737: PPUSH
3738: CALL_OW 380
// un = CreateHuman ;
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: CALL_OW 44
3751: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 9
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
3767: LD_VAR 0 3
3771: PPUSH
3772: LD_INT 53
3774: PPUSH
3775: LD_INT 23
3777: PPUSH
3778: CALL_OW 111
// end ;
3782: GO 3686
3784: POP
3785: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
3786: LD_ADDR_VAR 0 2
3790: PUSH
3791: DOUBLE
3792: LD_INT 1
3794: DEC
3795: ST_TO_ADDR
3796: LD_INT 9
3798: PUSH
3799: LD_INT 8
3801: PUSH
3802: LD_INT 7
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: PUSH
3810: LD_OWVAR 67
3814: ARRAY
3815: PUSH
3816: FOR_TO
3817: IFFALSE 4013
// begin uc_side = 4 ;
3819: LD_ADDR_OWVAR 20
3823: PUSH
3824: LD_INT 4
3826: ST_TO_ADDR
// uc_nation = 1 ;
3827: LD_ADDR_OWVAR 21
3831: PUSH
3832: LD_INT 1
3834: ST_TO_ADDR
// vc_engine = 1 ;
3835: LD_ADDR_OWVAR 39
3839: PUSH
3840: LD_INT 1
3842: ST_TO_ADDR
// vc_control = 1 ;
3843: LD_ADDR_OWVAR 38
3847: PUSH
3848: LD_INT 1
3850: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
3851: LD_ADDR_OWVAR 40
3855: PUSH
3856: LD_INT 3
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 5
3864: PUSH
3865: LD_INT 6
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: ST_TO_ADDR
// vc_chassis = 4 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 4
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 4
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
3904: LD_VAR 0 4
3908: PPUSH
3909: LD_INT 9
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// hc_name =  ;
3919: LD_ADDR_OWVAR 26
3923: PUSH
3924: LD_STRING 
3926: ST_TO_ADDR
// hc_gallery =  ;
3927: LD_ADDR_OWVAR 33
3931: PUSH
3932: LD_STRING 
3934: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
3935: LD_INT 0
3937: PPUSH
3938: LD_INT 3
3940: PPUSH
3941: LD_INT 5
3943: PPUSH
3944: LD_INT 8
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 380
// un = CreateHuman ;
3956: LD_ADDR_VAR 0 3
3960: PUSH
3961: CALL_OW 44
3965: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3966: LD_VAR 0 3
3970: PPUSH
3971: LD_VAR 0 4
3975: PPUSH
3976: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
3980: LD_VAR 0 4
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PPUSH
3994: LD_INT 53
3996: PPUSH
3997: LD_INT 23
3999: PPUSH
4000: CALL_OW 111
// wait ( 0 0$5 ) ;
4004: LD_INT 175
4006: PPUSH
4007: CALL_OW 67
// end ;
4011: GO 3816
4013: POP
4014: POP
// end ; end_of_file
4015: LD_VAR 0 1
4019: RET
// export function PrepareRussianCommander ; begin
4020: LD_INT 0
4022: PPUSH
// uc_side = 3 ;
4023: LD_ADDR_OWVAR 20
4027: PUSH
4028: LD_INT 3
4030: ST_TO_ADDR
// uc_nation = 3 ;
4031: LD_ADDR_OWVAR 21
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4039: LD_ADDR_EXP 23
4043: PUSH
4044: LD_STRING Borodin
4046: PPUSH
4047: CALL_OW 25
4051: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
4052: LD_EXP 23
4056: PPUSH
4057: LD_INT 3
4059: PPUSH
4060: LD_INT 0
4062: PPUSH
4063: CALL_OW 49
// end ;
4067: LD_VAR 0 1
4071: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
// for i = 1 to 10 do
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: DOUBLE
4084: LD_INT 1
4086: DEC
4087: ST_TO_ADDR
4088: LD_INT 10
4090: PUSH
4091: FOR_TO
4092: IFFALSE 4166
// begin uc_side = 6 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 6
4101: ST_TO_ADDR
// uc_nation = 3 ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 3
4109: ST_TO_ADDR
// hc_gallery =  ;
4110: LD_ADDR_OWVAR 33
4114: PUSH
4115: LD_STRING 
4117: ST_TO_ADDR
// hc_name =  ;
4118: LD_ADDR_OWVAR 26
4122: PUSH
4123: LD_STRING 
4125: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
4126: LD_INT 0
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: CALL_OW 380
// un = CreateHuman ;
4139: LD_ADDR_VAR 0 3
4143: PUSH
4144: CALL_OW 44
4148: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
4149: LD_VAR 0 3
4153: PPUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 49
// end ;
4164: GO 4091
4166: POP
4167: POP
// for i = 1 to 3 do
4168: LD_ADDR_VAR 0 2
4172: PUSH
4173: DOUBLE
4174: LD_INT 1
4176: DEC
4177: ST_TO_ADDR
4178: LD_INT 3
4180: PUSH
4181: FOR_TO
4182: IFFALSE 4331
// begin uc_side = 6 ;
4184: LD_ADDR_OWVAR 20
4188: PUSH
4189: LD_INT 6
4191: ST_TO_ADDR
// uc_nation = 3 ;
4192: LD_ADDR_OWVAR 21
4196: PUSH
4197: LD_INT 3
4199: ST_TO_ADDR
// vc_engine = 1 ;
4200: LD_ADDR_OWVAR 39
4204: PUSH
4205: LD_INT 1
4207: ST_TO_ADDR
// vc_control = 1 ;
4208: LD_ADDR_OWVAR 38
4212: PUSH
4213: LD_INT 1
4215: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 43
4223: PUSH
4224: LD_INT 44
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 1
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL_OW 12
4241: ARRAY
4242: ST_TO_ADDR
// vc_chassis = 22 ;
4243: LD_ADDR_OWVAR 37
4247: PUSH
4248: LD_INT 22
4250: ST_TO_ADDR
// veh = CreateVehicle ;
4251: LD_ADDR_VAR 0 4
4255: PUSH
4256: CALL_OW 45
4260: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
4261: LD_VAR 0 4
4265: PPUSH
4266: LD_INT 2
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// hc_gallery =  ;
4276: LD_ADDR_OWVAR 33
4280: PUSH
4281: LD_STRING 
4283: ST_TO_ADDR
// hc_name =  ;
4284: LD_ADDR_OWVAR 26
4288: PUSH
4289: LD_STRING 
4291: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
4292: LD_INT 0
4294: PPUSH
4295: LD_INT 3
4297: PPUSH
4298: LD_INT 4
4300: PPUSH
4301: CALL_OW 380
// un = CreateHuman ;
4305: LD_ADDR_VAR 0 3
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_VAR 0 4
4324: PPUSH
4325: CALL_OW 52
// end ;
4329: GO 4181
4331: POP
4332: POP
// end ;
4333: LD_VAR 0 1
4337: RET
// export function PrepareRussians ; var i , un ; begin
4338: LD_INT 0
4340: PPUSH
4341: PPUSH
4342: PPUSH
// for i = 1 to 14 do
4343: LD_ADDR_VAR 0 2
4347: PUSH
4348: DOUBLE
4349: LD_INT 1
4351: DEC
4352: ST_TO_ADDR
4353: LD_INT 14
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4443
// begin uc_side = 3 ;
4359: LD_ADDR_OWVAR 20
4363: PUSH
4364: LD_INT 3
4366: ST_TO_ADDR
// uc_nation = 3 ;
4367: LD_ADDR_OWVAR 21
4371: PUSH
4372: LD_INT 3
4374: ST_TO_ADDR
// hc_gallery =  ;
4375: LD_ADDR_OWVAR 33
4379: PUSH
4380: LD_STRING 
4382: ST_TO_ADDR
// hc_name =  ;
4383: LD_ADDR_OWVAR 26
4387: PUSH
4388: LD_STRING 
4390: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4391: LD_INT 0
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_EXP 24
4401: PPUSH
4402: LD_EXP 25
4406: PPUSH
4407: CALL_OW 12
4411: PPUSH
4412: CALL_OW 380
// un = CreateHuman ;
4416: LD_ADDR_VAR 0 3
4420: PUSH
4421: CALL_OW 44
4425: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: LD_INT 3
4433: PPUSH
4434: LD_INT 0
4436: PPUSH
4437: CALL_OW 49
// end ;
4441: GO 4356
4443: POP
4444: POP
// for i = 1 to 6 do
4445: LD_ADDR_VAR 0 2
4449: PUSH
4450: DOUBLE
4451: LD_INT 1
4453: DEC
4454: ST_TO_ADDR
4455: LD_INT 6
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4545
// begin uc_side = 3 ;
4461: LD_ADDR_OWVAR 20
4465: PUSH
4466: LD_INT 3
4468: ST_TO_ADDR
// uc_nation = 3 ;
4469: LD_ADDR_OWVAR 21
4473: PUSH
4474: LD_INT 3
4476: ST_TO_ADDR
// hc_gallery =  ;
4477: LD_ADDR_OWVAR 33
4481: PUSH
4482: LD_STRING 
4484: ST_TO_ADDR
// hc_name =  ;
4485: LD_ADDR_OWVAR 26
4489: PUSH
4490: LD_STRING 
4492: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4493: LD_INT 0
4495: PPUSH
4496: LD_INT 2
4498: PPUSH
4499: LD_EXP 24
4503: PPUSH
4504: LD_EXP 25
4508: PPUSH
4509: CALL_OW 12
4513: PPUSH
4514: CALL_OW 380
// un = CreateHuman ;
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: CALL_OW 44
4527: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4528: LD_VAR 0 3
4532: PPUSH
4533: LD_INT 3
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: CALL_OW 49
// end ;
4543: GO 4458
4545: POP
4546: POP
// for i = 1 to 6 do
4547: LD_ADDR_VAR 0 2
4551: PUSH
4552: DOUBLE
4553: LD_INT 1
4555: DEC
4556: ST_TO_ADDR
4557: LD_INT 6
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4647
// begin uc_side = 3 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 3
4570: ST_TO_ADDR
// uc_nation = 3 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 3
4578: ST_TO_ADDR
// hc_gallery =  ;
4579: LD_ADDR_OWVAR 33
4583: PUSH
4584: LD_STRING 
4586: ST_TO_ADDR
// hc_name =  ;
4587: LD_ADDR_OWVAR 26
4591: PUSH
4592: LD_STRING 
4594: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4595: LD_INT 0
4597: PPUSH
4598: LD_INT 3
4600: PPUSH
4601: LD_EXP 24
4605: PPUSH
4606: LD_EXP 25
4610: PPUSH
4611: CALL_OW 12
4615: PPUSH
4616: CALL_OW 380
// un = CreateHuman ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: CALL_OW 44
4629: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// end ;
4645: GO 4560
4647: POP
4648: POP
// for i = 1 to 4 do
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: DOUBLE
4655: LD_INT 1
4657: DEC
4658: ST_TO_ADDR
4659: LD_INT 4
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4749
// begin uc_side = 3 ;
4665: LD_ADDR_OWVAR 20
4669: PUSH
4670: LD_INT 3
4672: ST_TO_ADDR
// uc_nation = 3 ;
4673: LD_ADDR_OWVAR 21
4677: PUSH
4678: LD_INT 3
4680: ST_TO_ADDR
// hc_gallery =  ;
4681: LD_ADDR_OWVAR 33
4685: PUSH
4686: LD_STRING 
4688: ST_TO_ADDR
// hc_name =  ;
4689: LD_ADDR_OWVAR 26
4693: PUSH
4694: LD_STRING 
4696: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4697: LD_INT 0
4699: PPUSH
4700: LD_INT 4
4702: PPUSH
4703: LD_EXP 24
4707: PPUSH
4708: LD_EXP 25
4712: PPUSH
4713: CALL_OW 12
4717: PPUSH
4718: CALL_OW 380
// un = CreateHuman ;
4722: LD_ADDR_VAR 0 3
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 3
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 49
// end ;
4747: GO 4662
4749: POP
4750: POP
// end ; end_of_file
4751: LD_VAR 0 1
4755: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
// if exist_mode then
4760: LD_VAR 0 2
4764: IFFALSE 4783
// unit := CreateCharacter ( ident ) else
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: LD_VAR 0 1
4775: PPUSH
4776: CALL_OW 34
4780: ST_TO_ADDR
4781: GO 4798
// unit := NewCharacter ( ident ) ;
4783: LD_ADDR_VAR 0 4
4787: PUSH
4788: LD_VAR 0 1
4792: PPUSH
4793: CALL_OW 25
4797: ST_TO_ADDR
// result := unit ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: LD_VAR 0 4
4807: ST_TO_ADDR
// end ;
4808: LD_VAR 0 3
4812: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4813: LD_INT 0
4815: PPUSH
4816: PPUSH
4817: PPUSH
// rnd = rand ( 1 , characters ) ;
4818: LD_ADDR_VAR 0 6
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_VAR 0 1
4830: PPUSH
4831: CALL_OW 12
4835: ST_TO_ADDR
// for i = 1 to characters do
4836: LD_ADDR_VAR 0 5
4840: PUSH
4841: DOUBLE
4842: LD_INT 1
4844: DEC
4845: ST_TO_ADDR
4846: LD_VAR 0 1
4850: PUSH
4851: FOR_TO
4852: IFFALSE 4962
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4854: LD_VAR 0 5
4858: PUSH
4859: LD_VAR 0 6
4863: EQUAL
4864: PUSH
4865: LD_VAR 0 1
4869: PUSH
4870: LD_VAR 0 5
4874: ARRAY
4875: PPUSH
4876: CALL_OW 258
4880: PUSH
4881: LD_INT 1
4883: EQUAL
4884: AND
4885: IFFALSE 4907
// Say ( characters [ i ] , dialogMID ) ;
4887: LD_VAR 0 1
4891: PUSH
4892: LD_VAR 0 5
4896: ARRAY
4897: PPUSH
4898: LD_VAR 0 2
4902: PPUSH
4903: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4907: LD_VAR 0 5
4911: PUSH
4912: LD_VAR 0 6
4916: EQUAL
4917: PUSH
4918: LD_VAR 0 1
4922: PUSH
4923: LD_VAR 0 5
4927: ARRAY
4928: PPUSH
4929: CALL_OW 258
4933: PUSH
4934: LD_INT 2
4936: EQUAL
4937: AND
4938: IFFALSE 4960
// Say ( characters [ i ] , dialogFID ) ;
4940: LD_VAR 0 1
4944: PUSH
4945: LD_VAR 0 5
4949: ARRAY
4950: PPUSH
4951: LD_VAR 0 3
4955: PPUSH
4956: CALL_OW 88
// end ;
4960: GO 4851
4962: POP
4963: POP
// end ;
4964: LD_VAR 0 4
4968: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4969: LD_INT 0
4971: PPUSH
4972: PPUSH
4973: PPUSH
// uc_side := GetSide ( b ) ;
4974: LD_ADDR_OWVAR 20
4978: PUSH
4979: LD_VAR 0 2
4983: PPUSH
4984: CALL_OW 255
4988: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4989: LD_ADDR_OWVAR 21
4993: PUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 248
5003: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5004: LD_INT 0
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5019: LD_ADDR_VAR 0 5
5023: PUSH
5024: LD_VAR 0 2
5028: PPUSH
5029: CALL_OW 254
5033: PUSH
5034: LD_INT 3
5036: MINUS
5037: ST_TO_ADDR
// if dir < 0 then
5038: LD_VAR 0 5
5042: PUSH
5043: LD_INT 0
5045: LESS
5046: IFFALSE 5062
// dir := 6 + dir ;
5048: LD_ADDR_VAR 0 5
5052: PUSH
5053: LD_INT 6
5055: PUSH
5056: LD_VAR 0 5
5060: PLUS
5061: ST_TO_ADDR
// un := CreateHuman ;
5062: LD_ADDR_VAR 0 4
5066: PUSH
5067: CALL_OW 44
5071: ST_TO_ADDR
// SetDir ( un , dir ) ;
5072: LD_VAR 0 4
5076: PPUSH
5077: LD_VAR 0 5
5081: PPUSH
5082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5086: LD_VAR 0 4
5090: PPUSH
5091: LD_VAR 0 2
5095: PPUSH
5096: CALL_OW 52
// end ;
5100: LD_VAR 0 3
5104: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5105: LD_INT 0
5107: PPUSH
5108: PPUSH
5109: PPUSH
5110: PPUSH
// for i = 1 to count do
5111: LD_ADDR_VAR 0 8
5115: PUSH
5116: DOUBLE
5117: LD_INT 1
5119: DEC
5120: ST_TO_ADDR
5121: LD_VAR 0 6
5125: PUSH
5126: FOR_TO
5127: IFFALSE 5208
// begin uc_side = side ;
5129: LD_ADDR_OWVAR 20
5133: PUSH
5134: LD_VAR 0 1
5138: ST_TO_ADDR
// uc_nation = nation ;
5139: LD_ADDR_OWVAR 21
5143: PUSH
5144: LD_VAR 0 2
5148: ST_TO_ADDR
// hc_gallery =  ;
5149: LD_ADDR_OWVAR 33
5153: PUSH
5154: LD_STRING 
5156: ST_TO_ADDR
// hc_name =  ;
5157: LD_ADDR_OWVAR 26
5161: PUSH
5162: LD_STRING 
5164: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5165: LD_INT 0
5167: PPUSH
5168: LD_VAR 0 5
5172: PPUSH
5173: LD_VAR 0 4
5177: PPUSH
5178: CALL_OW 380
// un = CreateHuman ;
5182: LD_ADDR_VAR 0 10
5186: PUSH
5187: CALL_OW 44
5191: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5192: LD_VAR 0 10
5196: PPUSH
5197: LD_VAR 0 3
5201: PPUSH
5202: CALL_OW 52
// end ;
5206: GO 5126
5208: POP
5209: POP
// end ;
5210: LD_VAR 0 7
5214: RET
// export function PrepareDifficulty ; begin
5215: LD_INT 0
5217: PPUSH
// if Difficulty = 1 then
5218: LD_OWVAR 67
5222: PUSH
5223: LD_INT 1
5225: EQUAL
5226: IFFALSE 5244
// begin RuSolMinLevel = 2 ;
5228: LD_ADDR_EXP 24
5232: PUSH
5233: LD_INT 2
5235: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5236: LD_ADDR_EXP 25
5240: PUSH
5241: LD_INT 4
5243: ST_TO_ADDR
// end ; if Difficulty = 2 then
5244: LD_OWVAR 67
5248: PUSH
5249: LD_INT 2
5251: EQUAL
5252: IFFALSE 5322
// begin RuSolMinLevel = 3 ;
5254: LD_ADDR_EXP 24
5258: PUSH
5259: LD_INT 3
5261: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5262: LD_ADDR_EXP 25
5266: PUSH
5267: LD_INT 5
5269: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
5270: LD_INT 51
5272: PPUSH
5273: LD_INT 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
5283: LD_INT 57
5285: PPUSH
5286: LD_INT 3
5288: PPUSH
5289: LD_INT 1
5291: PPUSH
5292: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
5296: LD_INT 57
5298: PPUSH
5299: LD_INT 6
5301: PPUSH
5302: LD_INT 2
5304: PPUSH
5305: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
5309: LD_INT 51
5311: PPUSH
5312: LD_INT 6
5314: PPUSH
5315: LD_INT 2
5317: PPUSH
5318: CALL_OW 322
// end ; if Difficulty = 3 then
5322: LD_OWVAR 67
5326: PUSH
5327: LD_INT 3
5329: EQUAL
5330: IFFALSE 5413
// begin RuSolMinLevel = 3 ;
5332: LD_ADDR_EXP 24
5336: PUSH
5337: LD_INT 3
5339: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5340: LD_ADDR_EXP 25
5344: PUSH
5345: LD_INT 6
5347: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
5348: LD_INT 57
5350: PPUSH
5351: LD_INT 3
5353: PPUSH
5354: LD_INT 1
5356: PPUSH
5357: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
5361: LD_INT 51
5363: PPUSH
5364: LD_INT 3
5366: PPUSH
5367: LD_INT 1
5369: PPUSH
5370: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5374: LD_INT 52
5376: PPUSH
5377: LD_INT 3
5379: PPUSH
5380: LD_INT 1
5382: PPUSH
5383: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
5387: LD_INT 57
5389: PPUSH
5390: LD_INT 6
5392: PPUSH
5393: LD_INT 2
5395: PPUSH
5396: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
5400: LD_INT 52
5402: PPUSH
5403: LD_INT 6
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: CALL_OW 322
// end ; end ;
5413: LD_VAR 0 1
5417: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
5418: LD_INT 0
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
5424: LD_ADDR_VAR 0 3
5428: PUSH
5429: LD_INT 22
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: LD_INT 25
5441: PUSH
5442: LD_INT 2
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: CALL_OW 69
5457: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
5458: LD_ADDR_VAR 0 4
5462: PUSH
5463: LD_INT 4
5465: PUSH
5466: LD_INT 75
5468: PUSH
5469: LD_INT 79
5471: PUSH
5472: LD_INT 2
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 4
5483: PUSH
5484: LD_INT 113
5486: PUSH
5487: LD_INT 94
5489: PUSH
5490: LD_INT 4
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 29
5501: PUSH
5502: LD_INT 106
5504: PUSH
5505: LD_INT 97
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 26
5519: PUSH
5520: LD_INT 93
5522: PUSH
5523: LD_INT 97
5525: PUSH
5526: LD_INT 5
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 2
5537: PUSH
5538: LD_INT 100
5540: PUSH
5541: LD_INT 89
5543: PUSH
5544: LD_INT 3
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: PUSH
5553: LD_INT 17
5555: PUSH
5556: LD_INT 96
5558: PUSH
5559: LD_INT 89
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 32
5573: PUSH
5574: LD_INT 78
5576: PUSH
5577: LD_INT 94
5579: PUSH
5580: LD_INT 1
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 32
5591: PUSH
5592: LD_INT 95
5594: PUSH
5595: LD_INT 82
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 32
5609: PUSH
5610: LD_INT 104
5612: PUSH
5613: LD_INT 85
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 32
5627: PUSH
5628: LD_INT 81
5630: PUSH
5631: LD_INT 78
5633: PUSH
5634: LD_INT 2
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 33
5645: PUSH
5646: LD_INT 109
5648: PUSH
5649: LD_INT 90
5651: PUSH
5652: LD_INT 3
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 33
5663: PUSH
5664: LD_INT 88
5666: PUSH
5667: LD_INT 79
5669: PUSH
5670: LD_INT 3
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 33
5681: PUSH
5682: LD_INT 76
5684: PUSH
5685: LD_INT 87
5687: PUSH
5688: LD_INT 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 26
5699: PUSH
5700: LD_INT 96
5702: PUSH
5703: LD_INT 97
5705: PUSH
5706: LD_INT 5
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 26
5717: PUSH
5718: LD_INT 85
5720: PUSH
5721: LD_INT 84
5723: PUSH
5724: LD_INT 2
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 88
5738: PUSH
5739: LD_INT 95
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: PUSH
5751: LD_INT 19
5753: PUSH
5754: LD_INT 103
5756: PUSH
5757: LD_INT 89
5759: PUSH
5760: LD_INT 4
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 16
5771: PUSH
5772: LD_INT 97
5774: PUSH
5775: LD_INT 86
5777: PUSH
5778: LD_INT 2
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: PUSH
5787: LD_INT 24
5789: PUSH
5790: LD_INT 100
5792: PUSH
5793: LD_INT 85
5795: PUSH
5796: LD_INT 3
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: ST_TO_ADDR
// for i := 1 to buildingsTab do
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: DOUBLE
5832: LD_INT 1
5834: DEC
5835: ST_TO_ADDR
5836: LD_VAR 0 4
5840: PUSH
5841: FOR_TO
5842: IFFALSE 5915
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
5844: LD_VAR 0 3
5848: PPUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_VAR 0 2
5858: ARRAY
5859: PUSH
5860: LD_INT 1
5862: ARRAY
5863: PPUSH
5864: LD_VAR 0 4
5868: PUSH
5869: LD_VAR 0 2
5873: ARRAY
5874: PUSH
5875: LD_INT 2
5877: ARRAY
5878: PPUSH
5879: LD_VAR 0 4
5883: PUSH
5884: LD_VAR 0 2
5888: ARRAY
5889: PUSH
5890: LD_INT 3
5892: ARRAY
5893: PPUSH
5894: LD_VAR 0 4
5898: PUSH
5899: LD_VAR 0 2
5903: ARRAY
5904: PUSH
5905: LD_INT 4
5907: ARRAY
5908: PPUSH
5909: CALL_OW 205
5913: GO 5841
5915: POP
5916: POP
// end ;
5917: LD_VAR 0 1
5921: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5922: LD_INT 0
5924: PPUSH
5925: PPUSH
// for i in charactersList do
5926: LD_ADDR_VAR 0 4
5930: PUSH
5931: LD_VAR 0 1
5935: PUSH
5936: FOR_IN
5937: IFFALSE 5966
// begin if IsOk ( i ) then
5939: LD_VAR 0 4
5943: PPUSH
5944: CALL_OW 302
5948: IFFALSE 5964
// SaveCharacters ( i , ident ) ;
5950: LD_VAR 0 4
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: CALL_OW 38
// end ;
5964: GO 5936
5966: POP
5967: POP
// end ;
5968: LD_VAR 0 3
5972: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// for i = 1 to 72 do
5979: LD_ADDR_VAR 0 5
5983: PUSH
5984: DOUBLE
5985: LD_INT 1
5987: DEC
5988: ST_TO_ADDR
5989: LD_INT 72
5991: PUSH
5992: FOR_TO
5993: IFFALSE 6051
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5995: LD_VAR 0 5
5999: PPUSH
6000: LD_VAR 0 1
6004: PPUSH
6005: CALL_OW 321
6009: PUSH
6010: LD_INT 1
6012: EQUAL
6013: PUSH
6014: LD_VAR 0 5
6018: PPUSH
6019: LD_VAR 0 3
6023: PPUSH
6024: CALL_OW 482
6028: PUSH
6029: LD_INT 1
6031: EQUAL
6032: AND
6033: IFFALSE 6049
// AddComResearch ( lab , i ) ;
6035: LD_VAR 0 2
6039: PPUSH
6040: LD_VAR 0 5
6044: PPUSH
6045: CALL_OW 184
6049: GO 5992
6051: POP
6052: POP
// end ;
6053: LD_VAR 0 4
6057: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6068: LD_ADDR_VAR 0 6
6072: PUSH
6073: LD_INT 22
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 25
6087: PUSH
6088: LD_INT 1
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 56
6097: PUSH
6098: EMPTY
6099: LIST
6100: PUSH
6101: LD_INT 24
6103: PUSH
6104: LD_INT 700
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 60
6116: PUSH
6117: EMPTY
6118: LIST
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: EMPTY
6142: LIST
6143: DIFF
6144: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
6145: LD_ADDR_VAR 0 7
6149: PUSH
6150: LD_INT 22
6152: PUSH
6153: LD_VAR 0 1
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 25
6164: PUSH
6165: LD_INT 1
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 54
6174: PUSH
6175: EMPTY
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6188: LD_ADDR_VAR 0 8
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_VAR 0 1
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 30
6207: PUSH
6208: LD_INT 32
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 58
6217: PUSH
6218: EMPTY
6219: LIST
6220: PUSH
6221: LD_INT 24
6223: PUSH
6224: LD_INT 251
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: PPUSH
6237: CALL_OW 69
6241: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
6242: LD_ADDR_VAR 0 10
6246: PUSH
6247: LD_INT 22
6249: PUSH
6250: LD_VAR 0 1
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 2
6261: PUSH
6262: LD_INT 30
6264: PUSH
6265: LD_INT 4
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 30
6274: PUSH
6275: LD_INT 5
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 24
6289: PUSH
6290: LD_INT 251
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: ST_TO_ADDR
// if barrackList > 0 then
6307: LD_VAR 0 10
6311: PUSH
6312: LD_INT 0
6314: GREATER
6315: IFFALSE 6428
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
6317: LD_VAR 0 8
6321: PUSH
6322: LD_INT 0
6324: EQUAL
6325: PUSH
6326: LD_INT 24
6328: PPUSH
6329: LD_INT 22
6331: PUSH
6332: LD_INT 1
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 21
6341: PUSH
6342: LD_INT 1
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PPUSH
6353: CALL_OW 70
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: AND
6362: IFFALSE 6411
// begin for i in soldiers_list do
6364: LD_ADDR_VAR 0 4
6368: PUSH
6369: LD_VAR 0 6
6373: PUSH
6374: FOR_IN
6375: IFFALSE 6407
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
6377: LD_VAR 0 4
6381: PPUSH
6382: LD_VAR 0 10
6386: PUSH
6387: LD_INT 1
6389: PPUSH
6390: LD_VAR 0 10
6394: PPUSH
6395: CALL_OW 12
6399: ARRAY
6400: PPUSH
6401: CALL_OW 120
6405: GO 6374
6407: POP
6408: POP
// end else
6409: GO 6428
// begin for i in barrackList do
6411: LD_ADDR_VAR 0 4
6415: PUSH
6416: LD_VAR 0 10
6420: PUSH
6421: FOR_IN
6422: IFFALSE 6426
// begin end ;
6424: GO 6421
6426: POP
6427: POP
// end ; end ; end ;
6428: LD_VAR 0 3
6432: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
6433: LD_INT 0
6435: PPUSH
6436: PPUSH
6437: PPUSH
6438: PPUSH
6439: PPUSH
6440: PPUSH
// for i = 1 to infantryCount do
6441: LD_ADDR_VAR 0 8
6445: PUSH
6446: DOUBLE
6447: LD_INT 1
6449: DEC
6450: ST_TO_ADDR
6451: LD_VAR 0 5
6455: PUSH
6456: FOR_TO
6457: IFFALSE 6573
// begin uc_side = side ;
6459: LD_ADDR_OWVAR 20
6463: PUSH
6464: LD_VAR 0 1
6468: ST_TO_ADDR
// uc_nation = nation ;
6469: LD_ADDR_OWVAR 21
6473: PUSH
6474: LD_VAR 0 3
6478: ST_TO_ADDR
// hc_class = 1 ;
6479: LD_ADDR_OWVAR 28
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// hc_name =  ;
6487: LD_ADDR_OWVAR 26
6491: PUSH
6492: LD_STRING 
6494: ST_TO_ADDR
// hc_gallery =  ;
6495: LD_ADDR_OWVAR 33
6499: PUSH
6500: LD_STRING 
6502: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6503: LD_INT 0
6505: PPUSH
6506: LD_INT 1
6508: PPUSH
6509: LD_EXP 24
6513: PPUSH
6514: LD_EXP 25
6518: PPUSH
6519: CALL_OW 12
6523: PPUSH
6524: CALL_OW 380
// un = CreateHuman ;
6528: LD_ADDR_VAR 0 10
6532: PUSH
6533: CALL_OW 44
6537: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
6538: LD_VAR 0 10
6542: PPUSH
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 0
6550: PPUSH
6551: CALL_OW 49
// defenders_list = defenders_list ^ un ;
6555: LD_ADDR_EXP 31
6559: PUSH
6560: LD_EXP 31
6564: PUSH
6565: LD_VAR 0 10
6569: ADD
6570: ST_TO_ADDR
// end ;
6571: GO 6456
6573: POP
6574: POP
// for i = 1 to vehCount do
6575: LD_ADDR_VAR 0 8
6579: PUSH
6580: DOUBLE
6581: LD_INT 1
6583: DEC
6584: ST_TO_ADDR
6585: LD_VAR 0 6
6589: PUSH
6590: FOR_TO
6591: IFFALSE 6798
// begin uc_side = side ;
6593: LD_ADDR_OWVAR 20
6597: PUSH
6598: LD_VAR 0 1
6602: ST_TO_ADDR
// uc_nation = nation ;
6603: LD_ADDR_OWVAR 21
6607: PUSH
6608: LD_VAR 0 3
6612: ST_TO_ADDR
// vc_Chassis = 22 ;
6613: LD_ADDR_OWVAR 37
6617: PUSH
6618: LD_INT 22
6620: ST_TO_ADDR
// vc_engine = 1 ;
6621: LD_ADDR_OWVAR 39
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// vc_control = 1 ;
6629: LD_ADDR_OWVAR 38
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6637: LD_ADDR_OWVAR 40
6641: PUSH
6642: LD_INT 43
6644: PUSH
6645: LD_INT 44
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 1
6654: PPUSH
6655: LD_INT 2
6657: PPUSH
6658: CALL_OW 12
6662: ARRAY
6663: ST_TO_ADDR
// veh = CreateVehicle ;
6664: LD_ADDR_VAR 0 12
6668: PUSH
6669: CALL_OW 45
6673: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
6674: LD_VAR 0 12
6678: PPUSH
6679: LD_VAR 0 2
6683: PPUSH
6684: LD_INT 0
6686: PPUSH
6687: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
6691: LD_ADDR_EXP 31
6695: PUSH
6696: LD_EXP 31
6700: PUSH
6701: LD_VAR 0 12
6705: ADD
6706: ST_TO_ADDR
// hc_class = 3 ;
6707: LD_ADDR_OWVAR 28
6711: PUSH
6712: LD_INT 3
6714: ST_TO_ADDR
// hc_name =  ;
6715: LD_ADDR_OWVAR 26
6719: PUSH
6720: LD_STRING 
6722: ST_TO_ADDR
// hc_gallery =  ;
6723: LD_ADDR_OWVAR 33
6727: PUSH
6728: LD_STRING 
6730: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6731: LD_INT 0
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: LD_EXP 24
6741: PPUSH
6742: LD_EXP 25
6746: PPUSH
6747: CALL_OW 12
6751: PPUSH
6752: CALL_OW 380
// un = CreateHuman ;
6756: LD_ADDR_VAR 0 10
6760: PUSH
6761: CALL_OW 44
6765: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6766: LD_VAR 0 10
6770: PPUSH
6771: LD_VAR 0 12
6775: PPUSH
6776: CALL_OW 52
// defenders_list = defenders_list ^ un ;
6780: LD_ADDR_EXP 31
6784: PUSH
6785: LD_EXP 31
6789: PUSH
6790: LD_VAR 0 10
6794: ADD
6795: ST_TO_ADDR
// end ;
6796: GO 6590
6798: POP
6799: POP
// end ;
6800: LD_VAR 0 7
6804: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
6805: LD_INT 0
6807: PPUSH
6808: PPUSH
6809: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
6810: LD_VAR 0 2
6814: PPUSH
6815: LD_INT 22
6817: PUSH
6818: LD_VAR 0 1
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: PPUSH
6830: CALL_OW 70
6834: PUSH
6835: LD_INT 0
6837: EQUAL
6838: PUSH
6839: LD_EXP 31
6843: PUSH
6844: LD_INT 0
6846: GREATER
6847: AND
6848: IFFALSE 6894
// begin for i in defenders_list do
6850: LD_ADDR_VAR 0 4
6854: PUSH
6855: LD_EXP 31
6859: PUSH
6860: FOR_IN
6861: IFFALSE 6892
// begin ComMoveXY ( i , 65 , 68 ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 65
6870: PPUSH
6871: LD_INT 68
6873: PPUSH
6874: CALL_OW 111
// SetFuel ( i , 100 ) ;
6878: LD_VAR 0 4
6882: PPUSH
6883: LD_INT 100
6885: PPUSH
6886: CALL_OW 240
// end ;
6890: GO 6860
6892: POP
6893: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
6894: LD_VAR 0 2
6898: PPUSH
6899: LD_INT 22
6901: PUSH
6902: LD_VAR 0 1
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: PPUSH
6914: CALL_OW 70
6918: PUSH
6919: LD_INT 0
6921: GREATER
6922: PUSH
6923: LD_EXP 31
6927: PUSH
6928: LD_INT 0
6930: GREATER
6931: AND
6932: IFFALSE 7100
// begin for i in defenders_list do
6934: LD_ADDR_VAR 0 4
6938: PUSH
6939: LD_EXP 31
6943: PUSH
6944: FOR_IN
6945: IFFALSE 6995
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6947: LD_ADDR_VAR 0 5
6951: PUSH
6952: LD_INT 22
6954: PUSH
6955: LD_VAR 0 1
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 69
6968: PPUSH
6969: LD_VAR 0 4
6973: PPUSH
6974: CALL_OW 74
6978: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
6979: LD_VAR 0 4
6983: PPUSH
6984: LD_VAR 0 5
6988: PPUSH
6989: CALL_OW 115
// end ;
6993: GO 6944
6995: POP
6996: POP
// if russianAI = 0 then
6997: LD_EXP 26
7001: PUSH
7002: LD_INT 0
7004: EQUAL
7005: IFFALSE 7100
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7007: LD_ADDR_VAR 0 4
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 3
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 25
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PUSH
7041: LD_EXP 23
7045: DIFF
7046: PUSH
7047: FOR_IN
7048: IFFALSE 7098
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7050: LD_ADDR_VAR 0 5
7054: PUSH
7055: LD_INT 22
7057: PUSH
7058: LD_VAR 0 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 69
7071: PPUSH
7072: LD_VAR 0 4
7076: PPUSH
7077: CALL_OW 74
7081: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7082: LD_VAR 0 4
7086: PPUSH
7087: LD_VAR 0 5
7091: PPUSH
7092: CALL_OW 115
// end ;
7096: GO 7047
7098: POP
7099: POP
// end ; end ; end ;
7100: LD_VAR 0 3
7104: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7105: LD_INT 0
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
7111: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7112: LD_ADDR_VAR 0 6
7116: PUSH
7117: LD_INT 22
7119: PUSH
7120: LD_VAR 0 1
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 2
7131: PUSH
7132: LD_INT 25
7134: PUSH
7135: LD_INT 2
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 25
7144: PUSH
7145: LD_INT 16
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 24
7159: PUSH
7160: LD_INT 1000
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7177: LD_ADDR_VAR 0 4
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 21
7196: PUSH
7197: LD_INT 3
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 3
7206: PUSH
7207: LD_INT 24
7209: PUSH
7210: LD_INT 1000
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: EMPTY
7227: LIST
7228: PPUSH
7229: CALL_OW 69
7233: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
7234: LD_VAR 0 4
7238: PUSH
7239: LD_INT 0
7241: GREATER
7242: PUSH
7243: LD_VAR 0 6
7247: PUSH
7248: LD_INT 0
7250: GREATER
7251: AND
7252: IFFALSE 7318
// begin for i in engineerOk_list do
7254: LD_ADDR_VAR 0 5
7258: PUSH
7259: LD_VAR 0 6
7263: PUSH
7264: FOR_IN
7265: IFFALSE 7316
// begin for j in buildings_list do
7267: LD_ADDR_VAR 0 7
7271: PUSH
7272: LD_VAR 0 4
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7312
// begin AddComExitBuilding ( i ) ;
7280: LD_VAR 0 5
7284: PPUSH
7285: CALL_OW 182
// wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
7296: LD_VAR 0 5
7300: PPUSH
7301: LD_VAR 0 7
7305: PPUSH
7306: CALL_OW 190
// end ;
7310: GO 7277
7312: POP
7313: POP
// end ;
7314: GO 7264
7316: POP
7317: POP
// end ; if buildings_list = 0 then
7318: LD_VAR 0 4
7322: PUSH
7323: LD_INT 0
7325: EQUAL
7326: IFFALSE 7359
// begin for i in engineerOK_list do
7328: LD_ADDR_VAR 0 5
7332: PUSH
7333: LD_VAR 0 6
7337: PUSH
7338: FOR_IN
7339: IFFALSE 7357
// begin ComEnterUnit ( i , building ) ;
7341: LD_VAR 0 5
7345: PPUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: CALL_OW 120
// end ;
7355: GO 7338
7357: POP
7358: POP
// end ; end ;
7359: LD_VAR 0 3
7363: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7364: LD_INT 0
7366: PPUSH
7367: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7368: LD_INT 22
7370: PUSH
7371: LD_VAR 0 1
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 25
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PPUSH
7394: CALL_OW 69
7398: PUSH
7399: LD_INT 0
7401: GREATER
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_VAR 0 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 21
7417: PUSH
7418: LD_INT 3
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 3
7427: PUSH
7428: LD_INT 24
7430: PUSH
7431: LD_INT 1000
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: PUSH
7452: LD_INT 0
7454: EQUAL
7455: AND
7456: PUSH
7457: LD_VAR 0 2
7461: PUSH
7462: LD_INT 0
7464: GREATER
7465: AND
7466: IFFALSE 7565
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7468: LD_ADDR_VAR 0 4
7472: PUSH
7473: LD_INT 22
7475: PUSH
7476: LD_VAR 0 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 25
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PPUSH
7499: CALL_OW 69
7503: PUSH
7504: FOR_IN
7505: IFFALSE 7563
// begin AddComExitBuilding ( i ) ;
7507: LD_VAR 0 4
7511: PPUSH
7512: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7516: LD_VAR 0 4
7520: PPUSH
7521: LD_VAR 0 2
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 2
7534: PUSH
7535: LD_INT 2
7537: ARRAY
7538: PPUSH
7539: LD_VAR 0 2
7543: PUSH
7544: LD_INT 3
7546: ARRAY
7547: PPUSH
7548: LD_VAR 0 2
7552: PUSH
7553: LD_INT 4
7555: ARRAY
7556: PPUSH
7557: CALL_OW 205
// end ;
7561: GO 7504
7563: POP
7564: POP
// end ; end ;
7565: LD_VAR 0 3
7569: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
7570: LD_INT 0
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7577: LD_ADDR_VAR 0 6
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_VAR 0 1
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 25
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PPUSH
7608: CALL_OW 69
7612: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7613: LD_ADDR_VAR 0 9
7617: PUSH
7618: LD_VAR 0 3
7622: PPUSH
7623: LD_INT 22
7625: PUSH
7626: LD_VAR 0 1
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 21
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 3
7647: PUSH
7648: LD_INT 24
7650: PUSH
7651: LD_INT 750
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: PPUSH
7667: CALL_OW 70
7671: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
7672: LD_VAR 0 9
7676: PUSH
7677: LD_INT 0
7679: GREATER
7680: PUSH
7681: LD_VAR 0 6
7685: PUSH
7686: LD_INT 0
7688: GREATER
7689: AND
7690: IFFALSE 7817
// begin for i = 1 to damageUnits do
7692: LD_ADDR_VAR 0 7
7696: PUSH
7697: DOUBLE
7698: LD_INT 1
7700: DEC
7701: ST_TO_ADDR
7702: LD_VAR 0 9
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7732
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
7710: LD_VAR 0 9
7714: PUSH
7715: LD_VAR 0 7
7719: ARRAY
7720: PPUSH
7721: LD_VAR 0 2
7725: PPUSH
7726: CALL_OW 113
7730: GO 7707
7732: POP
7733: POP
// for i in sci_list do
7734: LD_ADDR_VAR 0 7
7738: PUSH
7739: LD_VAR 0 6
7743: PUSH
7744: FOR_IN
7745: IFFALSE 7813
// begin ComExitBuilding ( i ) ;
7747: LD_VAR 0 7
7751: PPUSH
7752: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
7756: LD_ADDR_VAR 0 8
7760: PUSH
7761: LD_VAR 0 2
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_VAR 0 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 70
7782: PUSH
7783: FOR_IN
7784: IFFALSE 7809
// begin AddComHeal ( i , j ) ;
7786: LD_VAR 0 7
7790: PPUSH
7791: LD_VAR 0 8
7795: PPUSH
7796: CALL_OW 188
// wait ( 1 1$0 ) ;
7800: LD_INT 2100
7802: PPUSH
7803: CALL_OW 67
// end ;
7807: GO 7783
7809: POP
7810: POP
// end ;
7811: GO 7744
7813: POP
7814: POP
// end else
7815: GO 7831
// begin AddComEnterUnit ( sci_list , build ) ;
7817: LD_VAR 0 6
7821: PPUSH
7822: LD_VAR 0 4
7826: PPUSH
7827: CALL_OW 180
// end ; end ;
7831: LD_VAR 0 5
7835: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
7836: LD_INT 0
7838: PPUSH
7839: PPUSH
7840: PPUSH
7841: PPUSH
7842: PPUSH
7843: PPUSH
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7849: LD_ADDR_VAR 0 9
7853: PUSH
7854: LD_INT 22
7856: PUSH
7857: LD_VAR 0 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 21
7868: PUSH
7869: LD_INT 2
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 33
7878: PUSH
7879: LD_INT 1
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: LD_INT 24
7888: PUSH
7889: LD_INT 660
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 3
7898: PUSH
7899: LD_INT 58
7901: PUSH
7902: EMPTY
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: LD_INT 34
7914: PUSH
7915: LD_INT 53
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7939: LD_ADDR_VAR 0 10
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 1
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 21
7958: PUSH
7959: LD_INT 2
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 33
7968: PUSH
7969: LD_INT 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 3
7978: PUSH
7979: LD_INT 24
7981: PUSH
7982: LD_INT 660
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 69
8003: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8004: LD_ADDR_VAR 0 11
8008: PUSH
8009: LD_VAR 0 2
8013: PPUSH
8014: LD_INT 22
8016: PUSH
8017: LD_VAR 0 1
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: LD_INT 21
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 33
8038: PUSH
8039: LD_INT 1
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: LD_INT 3
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: LD_INT 1000
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: PPUSH
8069: CALL_OW 70
8073: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8074: LD_ADDR_VAR 0 12
8078: PUSH
8079: LD_VAR 0 2
8083: PPUSH
8084: LD_INT 22
8086: PUSH
8087: LD_VAR 0 1
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 21
8098: PUSH
8099: LD_INT 2
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: LD_INT 33
8108: PUSH
8109: LD_INT 1
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PUSH
8116: LD_INT 24
8118: PUSH
8119: LD_INT 1000
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 58
8128: PUSH
8129: EMPTY
8130: LIST
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 34
8137: PUSH
8138: LD_INT 53
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: PPUSH
8157: CALL_OW 70
8161: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8162: LD_ADDR_VAR 0 13
8166: PUSH
8167: EMPTY
8168: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8169: LD_ADDR_VAR 0 14
8173: PUSH
8174: LD_VAR 0 2
8178: PPUSH
8179: LD_INT 22
8181: PUSH
8182: LD_VAR 0 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 25
8193: PUSH
8194: LD_INT 3
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PPUSH
8205: CALL_OW 70
8209: ST_TO_ADDR
// if damageVehicle_list > 0 then
8210: LD_VAR 0 10
8214: PUSH
8215: LD_INT 0
8217: GREATER
8218: IFFALSE 8256
// begin for i in damageVehicle_list do
8220: LD_ADDR_VAR 0 7
8224: PUSH
8225: LD_VAR 0 10
8229: PUSH
8230: FOR_IN
8231: IFFALSE 8254
// begin ComMoveXY ( i , repX , repY ) ;
8233: LD_VAR 0 7
8237: PPUSH
8238: LD_VAR 0 3
8242: PPUSH
8243: LD_VAR 0 4
8247: PPUSH
8248: CALL_OW 111
// end ;
8252: GO 8230
8254: POP
8255: POP
// end ; if vehicleNeedRepair_list > 0 then
8256: LD_VAR 0 11
8260: PUSH
8261: LD_INT 0
8263: GREATER
8264: IFFALSE 8351
// begin for i in vehicleNeedRepair_list do
8266: LD_ADDR_VAR 0 7
8270: PUSH
8271: LD_VAR 0 11
8275: PUSH
8276: FOR_IN
8277: IFFALSE 8349
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8279: LD_ADDR_VAR 0 13
8283: PUSH
8284: LD_VAR 0 13
8288: PUSH
8289: LD_VAR 0 7
8293: PPUSH
8294: CALL_OW 313
8298: ADD
8299: ST_TO_ADDR
// for j in mechanicInside_list do
8300: LD_ADDR_VAR 0 8
8304: PUSH
8305: LD_VAR 0 13
8309: PUSH
8310: FOR_IN
8311: IFFALSE 8345
// begin ComExitVehicle ( i ) ;
8313: LD_VAR 0 7
8317: PPUSH
8318: CALL_OW 121
// wait ( 0 0$1 ) ;
8322: LD_INT 35
8324: PPUSH
8325: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8329: LD_VAR 0 7
8333: PPUSH
8334: LD_VAR 0 8
8338: PPUSH
8339: CALL_OW 129
// end ;
8343: GO 8310
8345: POP
8346: POP
// end ;
8347: GO 8276
8349: POP
8350: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8351: LD_VAR 0 12
8355: PUSH
8356: LD_INT 0
8358: GREATER
8359: IFFALSE 8399
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8361: LD_VAR 0 14
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: PPUSH
8370: LD_VAR 0 12
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8383: LD_VAR 0 12
8387: PUSH
8388: LD_INT 1
8390: ARRAY
8391: PPUSH
8392: LD_INT 100
8394: PPUSH
8395: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8399: LD_VAR 0 9
8403: PUSH
8404: LD_INT 0
8406: GREATER
8407: IFFALSE 8598
// begin for i in vehicleOK_list do
8409: LD_ADDR_VAR 0 7
8413: PUSH
8414: LD_VAR 0 9
8418: PUSH
8419: FOR_IN
8420: IFFALSE 8596
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8422: LD_ADDR_VAR 0 15
8426: PUSH
8427: LD_INT 22
8429: PUSH
8430: LD_VAR 0 5
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: PPUSH
8444: LD_VAR 0 7
8448: PPUSH
8449: CALL_OW 74
8453: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8454: LD_ADDR_VAR 0 16
8458: PUSH
8459: LD_INT 22
8461: PUSH
8462: LD_VAR 0 5
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: LD_INT 59
8476: PUSH
8477: EMPTY
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 1
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 2
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: PPUSH
8513: CALL_OW 69
8517: PPUSH
8518: LD_VAR 0 7
8522: PPUSH
8523: CALL_OW 74
8527: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8528: LD_VAR 0 7
8532: PPUSH
8533: LD_VAR 0 15
8537: PPUSH
8538: CALL_OW 296
8542: PUSH
8543: LD_INT 8
8545: PLUS
8546: PUSH
8547: LD_VAR 0 7
8551: PPUSH
8552: LD_VAR 0 16
8556: PPUSH
8557: CALL_OW 296
8561: LESS
8562: IFFALSE 8580
// begin ComAttackUnit ( i , target1 ) ;
8564: LD_VAR 0 7
8568: PPUSH
8569: LD_VAR 0 15
8573: PPUSH
8574: CALL_OW 115
// end else
8578: GO 8594
// begin ComAttackUnit ( i , target2 ) ;
8580: LD_VAR 0 7
8584: PPUSH
8585: LD_VAR 0 16
8589: PPUSH
8590: CALL_OW 115
// end ; end ;
8594: GO 8419
8596: POP
8597: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8598: LD_ADDR_VAR 0 7
8602: PUSH
8603: LD_VAR 0 2
8607: PPUSH
8608: LD_INT 22
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 25
8622: PUSH
8623: LD_INT 3
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PPUSH
8634: CALL_OW 70
8638: NOT
8639: PUSH
8640: FOR_IN
8641: IFFALSE 8664
// ComMoveXY ( i , repX , repY ) ;
8643: LD_VAR 0 7
8647: PPUSH
8648: LD_VAR 0 3
8652: PPUSH
8653: LD_VAR 0 4
8657: PPUSH
8658: CALL_OW 111
8662: GO 8640
8664: POP
8665: POP
// end ;
8666: LD_VAR 0 6
8670: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
8671: LD_INT 0
8673: PPUSH
8674: PPUSH
8675: PPUSH
8676: PPUSH
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8681: LD_INT 22
8683: PUSH
8684: LD_VAR 0 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: PUSH
8712: LD_VAR 0 3
8716: LESSEQUAL
8717: IFFALSE 8784
// for i = 1 to vehCount do
8719: LD_ADDR_VAR 0 10
8723: PUSH
8724: DOUBLE
8725: LD_INT 1
8727: DEC
8728: ST_TO_ADDR
8729: LD_VAR 0 3
8733: PUSH
8734: FOR_TO
8735: IFFALSE 8782
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
8737: LD_VAR 0 2
8741: PPUSH
8742: LD_VAR 0 8
8746: PPUSH
8747: LD_VAR 0 6
8751: PPUSH
8752: LD_VAR 0 7
8756: PPUSH
8757: LD_VAR 0 5
8761: PUSH
8762: LD_INT 1
8764: PPUSH
8765: LD_VAR 0 5
8769: PPUSH
8770: CALL_OW 12
8774: ARRAY
8775: PPUSH
8776: CALL_OW 185
8780: GO 8734
8782: POP
8783: POP
// repeat wait ( 0 0$1 ) ;
8784: LD_INT 35
8786: PPUSH
8787: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
8791: LD_INT 22
8793: PUSH
8794: LD_VAR 0 1
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 21
8805: PUSH
8806: LD_INT 2
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 24
8815: PUSH
8816: LD_INT 250
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: PUSH
8833: LD_VAR 0 3
8837: GREATEREQUAL
8838: IFFALSE 8784
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
8840: LD_INT 22
8842: PUSH
8843: LD_VAR 0 1
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 21
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 24
8864: PUSH
8865: LD_INT 250
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 69
8881: PUSH
8882: LD_VAR 0 3
8886: GREATEREQUAL
8887: IFFALSE 9230
// begin repeat begin wait ( 0 0$1 ) ;
8889: LD_INT 35
8891: PPUSH
8892: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
8896: LD_INT 22
8898: PUSH
8899: LD_VAR 0 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 2
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 24
8920: PUSH
8921: LD_INT 651
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: PPUSH
8933: CALL_OW 69
8937: PUSH
8938: LD_INT 0
8940: GREATER
8941: IFFALSE 9169
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
8943: LD_ADDR_VAR 0 10
8947: PUSH
8948: LD_INT 22
8950: PUSH
8951: LD_VAR 0 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 21
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 24
8972: PUSH
8973: LD_INT 651
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: PPUSH
8985: CALL_OW 69
8989: PUSH
8990: FOR_IN
8991: IFFALSE 9167
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8993: LD_ADDR_VAR 0 15
8997: PUSH
8998: LD_INT 22
9000: PUSH
9001: LD_VAR 0 4
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PPUSH
9010: CALL_OW 69
9014: PPUSH
9015: LD_VAR 0 10
9019: PPUSH
9020: CALL_OW 74
9024: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9025: LD_ADDR_VAR 0 16
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_VAR 0 4
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 59
9047: PUSH
9048: EMPTY
9049: LIST
9050: PUSH
9051: LD_INT 21
9053: PUSH
9054: LD_INT 1
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 21
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 69
9088: PPUSH
9089: LD_VAR 0 10
9093: PPUSH
9094: CALL_OW 74
9098: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9099: LD_VAR 0 10
9103: PPUSH
9104: LD_VAR 0 15
9108: PPUSH
9109: CALL_OW 296
9113: PUSH
9114: LD_INT 8
9116: PLUS
9117: PUSH
9118: LD_VAR 0 10
9122: PPUSH
9123: LD_VAR 0 16
9127: PPUSH
9128: CALL_OW 296
9132: LESS
9133: IFFALSE 9151
// begin ComAttackUnit ( i , target1 ) ;
9135: LD_VAR 0 10
9139: PPUSH
9140: LD_VAR 0 15
9144: PPUSH
9145: CALL_OW 115
// end else
9149: GO 9165
// begin ComAttackUnit ( i , target2 ) ;
9151: LD_VAR 0 10
9155: PPUSH
9156: LD_VAR 0 16
9160: PPUSH
9161: CALL_OW 115
// end ; end ;
9165: GO 8990
9167: POP
9168: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
9169: LD_INT 22
9171: PUSH
9172: LD_VAR 0 1
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 21
9183: PUSH
9184: LD_INT 2
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PPUSH
9195: CALL_OW 69
9199: PUSH
9200: LD_INT 0
9202: EQUAL
9203: PUSH
9204: LD_INT 22
9206: PUSH
9207: LD_VAR 0 4
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: EMPTY
9217: LIST
9218: PPUSH
9219: CALL_OW 69
9223: PUSH
9224: LD_INT 0
9226: EQUAL
9227: OR
9228: IFFALSE 8889
// end ; end ;
9230: LD_VAR 0 9
9234: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9235: LD_INT 0
9237: PPUSH
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
9244: PPUSH
9245: PPUSH
9246: PPUSH
9247: PPUSH
// for i = 1 to medicCount do
9248: LD_ADDR_VAR 0 14
9252: PUSH
9253: DOUBLE
9254: LD_INT 1
9256: DEC
9257: ST_TO_ADDR
9258: LD_VAR 0 7
9262: PUSH
9263: FOR_TO
9264: IFFALSE 9346
// begin uc_side = side ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_VAR 0 1
9275: ST_TO_ADDR
// uc_nation = nation ;
9276: LD_ADDR_OWVAR 21
9280: PUSH
9281: LD_VAR 0 2
9285: ST_TO_ADDR
// hc_name =  ;
9286: LD_ADDR_OWVAR 26
9290: PUSH
9291: LD_STRING 
9293: ST_TO_ADDR
// hc_gallery =  ;
9294: LD_ADDR_OWVAR 33
9298: PUSH
9299: LD_STRING 
9301: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_INT 4
9307: PPUSH
9308: LD_VAR 0 8
9312: PPUSH
9313: CALL_OW 380
// un = CreateHuman ;
9317: LD_ADDR_VAR 0 16
9321: PUSH
9322: CALL_OW 44
9326: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9327: LD_VAR 0 16
9331: PPUSH
9332: LD_VAR 0 9
9336: PPUSH
9337: LD_INT 0
9339: PPUSH
9340: CALL_OW 49
// end ;
9344: GO 9263
9346: POP
9347: POP
// for i = 1 to soldierCount do
9348: LD_ADDR_VAR 0 14
9352: PUSH
9353: DOUBLE
9354: LD_INT 1
9356: DEC
9357: ST_TO_ADDR
9358: LD_VAR 0 3
9362: PUSH
9363: FOR_TO
9364: IFFALSE 9446
// begin uc_side = side ;
9366: LD_ADDR_OWVAR 20
9370: PUSH
9371: LD_VAR 0 1
9375: ST_TO_ADDR
// uc_nation = nation ;
9376: LD_ADDR_OWVAR 21
9380: PUSH
9381: LD_VAR 0 2
9385: ST_TO_ADDR
// hc_name =  ;
9386: LD_ADDR_OWVAR 26
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// hc_gallery =  ;
9394: LD_ADDR_OWVAR 33
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9402: LD_INT 0
9404: PPUSH
9405: LD_INT 1
9407: PPUSH
9408: LD_VAR 0 8
9412: PPUSH
9413: CALL_OW 380
// un = CreateHuman ;
9417: LD_ADDR_VAR 0 16
9421: PUSH
9422: CALL_OW 44
9426: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9427: LD_VAR 0 16
9431: PPUSH
9432: LD_VAR 0 9
9436: PPUSH
9437: LD_INT 0
9439: PPUSH
9440: CALL_OW 49
// end ;
9444: GO 9363
9446: POP
9447: POP
// for i = 1 to sniperCount do
9448: LD_ADDR_VAR 0 14
9452: PUSH
9453: DOUBLE
9454: LD_INT 1
9456: DEC
9457: ST_TO_ADDR
9458: LD_VAR 0 4
9462: PUSH
9463: FOR_TO
9464: IFFALSE 9546
// begin uc_side = side ;
9466: LD_ADDR_OWVAR 20
9470: PUSH
9471: LD_VAR 0 1
9475: ST_TO_ADDR
// uc_nation = nation ;
9476: LD_ADDR_OWVAR 21
9480: PUSH
9481: LD_VAR 0 2
9485: ST_TO_ADDR
// hc_name =  ;
9486: LD_ADDR_OWVAR 26
9490: PUSH
9491: LD_STRING 
9493: ST_TO_ADDR
// hc_gallery =  ;
9494: LD_ADDR_OWVAR 33
9498: PUSH
9499: LD_STRING 
9501: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9502: LD_INT 0
9504: PPUSH
9505: LD_INT 5
9507: PPUSH
9508: LD_VAR 0 8
9512: PPUSH
9513: CALL_OW 380
// un = CreateHuman ;
9517: LD_ADDR_VAR 0 16
9521: PUSH
9522: CALL_OW 44
9526: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9527: LD_VAR 0 16
9531: PPUSH
9532: LD_VAR 0 9
9536: PPUSH
9537: LD_INT 0
9539: PPUSH
9540: CALL_OW 49
// end ;
9544: GO 9463
9546: POP
9547: POP
// for i = 1 to bazookCount do
9548: LD_ADDR_VAR 0 14
9552: PUSH
9553: DOUBLE
9554: LD_INT 1
9556: DEC
9557: ST_TO_ADDR
9558: LD_VAR 0 5
9562: PUSH
9563: FOR_TO
9564: IFFALSE 9646
// begin uc_side = side ;
9566: LD_ADDR_OWVAR 20
9570: PUSH
9571: LD_VAR 0 1
9575: ST_TO_ADDR
// uc_nation = nation ;
9576: LD_ADDR_OWVAR 21
9580: PUSH
9581: LD_VAR 0 2
9585: ST_TO_ADDR
// hc_name =  ;
9586: LD_ADDR_OWVAR 26
9590: PUSH
9591: LD_STRING 
9593: ST_TO_ADDR
// hc_gallery =  ;
9594: LD_ADDR_OWVAR 33
9598: PUSH
9599: LD_STRING 
9601: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9602: LD_INT 0
9604: PPUSH
9605: LD_INT 9
9607: PPUSH
9608: LD_VAR 0 8
9612: PPUSH
9613: CALL_OW 380
// un = CreateHuman ;
9617: LD_ADDR_VAR 0 16
9621: PUSH
9622: CALL_OW 44
9626: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9627: LD_VAR 0 16
9631: PPUSH
9632: LD_VAR 0 9
9636: PPUSH
9637: LD_INT 0
9639: PPUSH
9640: CALL_OW 49
// end ;
9644: GO 9563
9646: POP
9647: POP
// for i = 1 to mortalCount do
9648: LD_ADDR_VAR 0 14
9652: PUSH
9653: DOUBLE
9654: LD_INT 1
9656: DEC
9657: ST_TO_ADDR
9658: LD_VAR 0 6
9662: PUSH
9663: FOR_TO
9664: IFFALSE 9746
// begin uc_side = side ;
9666: LD_ADDR_OWVAR 20
9670: PUSH
9671: LD_VAR 0 1
9675: ST_TO_ADDR
// uc_nation = nation ;
9676: LD_ADDR_OWVAR 21
9680: PUSH
9681: LD_VAR 0 2
9685: ST_TO_ADDR
// hc_name =  ;
9686: LD_ADDR_OWVAR 26
9690: PUSH
9691: LD_STRING 
9693: ST_TO_ADDR
// hc_gallery =  ;
9694: LD_ADDR_OWVAR 33
9698: PUSH
9699: LD_STRING 
9701: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9702: LD_INT 0
9704: PPUSH
9705: LD_INT 8
9707: PPUSH
9708: LD_VAR 0 8
9712: PPUSH
9713: CALL_OW 380
// un = CreateHuman ;
9717: LD_ADDR_VAR 0 16
9721: PUSH
9722: CALL_OW 44
9726: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9727: LD_VAR 0 16
9731: PPUSH
9732: LD_VAR 0 9
9736: PPUSH
9737: LD_INT 0
9739: PPUSH
9740: CALL_OW 49
// end ;
9744: GO 9663
9746: POP
9747: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9748: LD_ADDR_VAR 0 19
9752: PUSH
9753: LD_INT 22
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 2
9767: PUSH
9768: LD_INT 25
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 25
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 25
9790: PUSH
9791: LD_INT 8
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 25
9800: PUSH
9801: LD_INT 9
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9824: LD_ADDR_VAR 0 18
9828: PUSH
9829: LD_INT 22
9831: PUSH
9832: LD_VAR 0 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 25
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: ST_TO_ADDR
// for i in medic_list do
9860: LD_ADDR_VAR 0 14
9864: PUSH
9865: LD_VAR 0 18
9869: PUSH
9870: FOR_IN
9871: IFFALSE 9889
// ComMoveToArea ( i , healArea ) ;
9873: LD_VAR 0 14
9877: PPUSH
9878: LD_VAR 0 10
9882: PPUSH
9883: CALL_OW 113
9887: GO 9870
9889: POP
9890: POP
// if strategy = 1 then
9891: LD_VAR 0 12
9895: PUSH
9896: LD_INT 1
9898: EQUAL
9899: IFFALSE 10634
// begin repeat wait ( 0 0$3 ) ;
9901: LD_INT 105
9903: PPUSH
9904: CALL_OW 67
// for i in soldiersOK_list do
9908: LD_ADDR_VAR 0 14
9912: PUSH
9913: LD_VAR 0 19
9917: PUSH
9918: FOR_IN
9919: IFFALSE 9983
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9921: LD_VAR 0 14
9925: PPUSH
9926: LD_INT 91
9928: PPUSH
9929: LD_INT 63
9931: PPUSH
9932: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
9936: LD_VAR 0 14
9940: PPUSH
9941: LD_INT 101
9943: PPUSH
9944: LD_INT 53
9946: PPUSH
9947: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
9951: LD_VAR 0 14
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: LD_INT 23
9961: PPUSH
9962: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
9966: LD_VAR 0 14
9970: PPUSH
9971: LD_INT 78
9973: PPUSH
9974: LD_INT 8
9976: PPUSH
9977: CALL_OW 174
// end ;
9981: GO 9918
9983: POP
9984: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
9985: LD_INT 12
9987: PPUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 70
10004: PUSH
10005: LD_INT 2
10007: GREATER
10008: IFFALSE 9901
// repeat wait ( 0 0$1 ) ;
10010: LD_INT 35
10012: PPUSH
10013: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10017: LD_ADDR_VAR 0 17
10021: PUSH
10022: LD_INT 22
10024: PUSH
10025: LD_VAR 0 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 1
10036: PUSH
10037: LD_INT 3
10039: PUSH
10040: LD_INT 24
10042: PUSH
10043: LD_INT 550
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 24
10056: PUSH
10057: LD_INT 250
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PPUSH
10073: CALL_OW 69
10077: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10078: LD_ADDR_VAR 0 19
10082: PUSH
10083: LD_INT 22
10085: PUSH
10086: LD_VAR 0 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: LD_INT 25
10100: PUSH
10101: LD_INT 1
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 25
10110: PUSH
10111: LD_INT 5
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 25
10120: PUSH
10121: LD_INT 8
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 25
10130: PUSH
10131: LD_INT 9
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 24
10147: PUSH
10148: LD_INT 1000
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: PPUSH
10160: CALL_OW 69
10164: ST_TO_ADDR
// if medicCount > 0 then
10165: LD_VAR 0 7
10169: PUSH
10170: LD_INT 0
10172: GREATER
10173: IFFALSE 10247
// begin if damageUnit_list > 0 then
10175: LD_VAR 0 17
10179: PUSH
10180: LD_INT 0
10182: GREATER
10183: IFFALSE 10247
// begin for i in damageUnit_list do
10185: LD_ADDR_VAR 0 14
10189: PUSH
10190: LD_VAR 0 17
10194: PUSH
10195: FOR_IN
10196: IFFALSE 10245
// begin ComMoveToArea ( i , healArea ) ;
10198: LD_VAR 0 14
10202: PPUSH
10203: LD_VAR 0 10
10207: PPUSH
10208: CALL_OW 113
// for j in medic_list do
10212: LD_ADDR_VAR 0 15
10216: PUSH
10217: LD_VAR 0 18
10221: PUSH
10222: FOR_IN
10223: IFFALSE 10241
// AddComHeal ( j , i ) ;
10225: LD_VAR 0 15
10229: PPUSH
10230: LD_VAR 0 14
10234: PPUSH
10235: CALL_OW 188
10239: GO 10222
10241: POP
10242: POP
// end ;
10243: GO 10195
10245: POP
10246: POP
// end ; end ; for i in soldiersOK_list do
10247: LD_ADDR_VAR 0 14
10251: PUSH
10252: LD_VAR 0 19
10256: PUSH
10257: FOR_IN
10258: IFFALSE 10434
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10260: LD_ADDR_VAR 0 22
10264: PUSH
10265: LD_INT 22
10267: PUSH
10268: LD_VAR 0 11
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: PPUSH
10282: LD_VAR 0 14
10286: PPUSH
10287: CALL_OW 74
10291: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10292: LD_ADDR_VAR 0 23
10296: PUSH
10297: LD_INT 22
10299: PUSH
10300: LD_VAR 0 11
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 2
10311: PUSH
10312: LD_INT 59
10314: PUSH
10315: EMPTY
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 2
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: PPUSH
10356: LD_VAR 0 14
10360: PPUSH
10361: CALL_OW 74
10365: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10366: LD_VAR 0 14
10370: PPUSH
10371: LD_VAR 0 22
10375: PPUSH
10376: CALL_OW 296
10380: PUSH
10381: LD_INT 8
10383: PLUS
10384: PUSH
10385: LD_VAR 0 14
10389: PPUSH
10390: LD_VAR 0 23
10394: PPUSH
10395: CALL_OW 296
10399: LESS
10400: IFFALSE 10418
// begin ComAttackUnit ( i , target1 ) ;
10402: LD_VAR 0 14
10406: PPUSH
10407: LD_VAR 0 22
10411: PPUSH
10412: CALL_OW 115
// end else
10416: GO 10432
// begin ComAttackUnit ( i , target2 ) ;
10418: LD_VAR 0 14
10422: PPUSH
10423: LD_VAR 0 23
10427: PPUSH
10428: CALL_OW 115
// end ; end ;
10432: GO 10257
10434: POP
10435: POP
// for i in soldiersOK_list do
10436: LD_ADDR_VAR 0 14
10440: PUSH
10441: LD_VAR 0 19
10445: PUSH
10446: FOR_IN
10447: IFFALSE 10623
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10449: LD_ADDR_VAR 0 22
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_VAR 0 11
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: PPUSH
10471: LD_VAR 0 14
10475: PPUSH
10476: CALL_OW 74
10480: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10481: LD_ADDR_VAR 0 23
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_VAR 0 11
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: LD_INT 59
10503: PUSH
10504: EMPTY
10505: LIST
10506: PUSH
10507: LD_INT 21
10509: PUSH
10510: LD_INT 1
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 21
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: EMPTY
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: PPUSH
10545: LD_VAR 0 14
10549: PPUSH
10550: CALL_OW 74
10554: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10555: LD_VAR 0 14
10559: PPUSH
10560: LD_VAR 0 22
10564: PPUSH
10565: CALL_OW 296
10569: PUSH
10570: LD_INT 8
10572: PLUS
10573: PUSH
10574: LD_VAR 0 14
10578: PPUSH
10579: LD_VAR 0 23
10583: PPUSH
10584: CALL_OW 296
10588: LESS
10589: IFFALSE 10607
// begin ComAttackUnit ( i , target1 ) ;
10591: LD_VAR 0 14
10595: PPUSH
10596: LD_VAR 0 22
10600: PPUSH
10601: CALL_OW 115
// end else
10605: GO 10621
// begin ComAttackUnit ( i , target2 ) ;
10607: LD_VAR 0 14
10611: PPUSH
10612: LD_VAR 0 23
10616: PPUSH
10617: CALL_OW 115
// end ; end ;
10621: GO 10446
10623: POP
10624: POP
// until soldiersOK_list = [ ] ;
10625: LD_VAR 0 19
10629: PUSH
10630: EMPTY
10631: EQUAL
10632: IFFALSE 10010
// end ; if strategy = 2 then
10634: LD_VAR 0 12
10638: PUSH
10639: LD_INT 2
10641: EQUAL
10642: IFFALSE 11347
// begin repeat wait ( 0 0$1 ) ;
10644: LD_INT 35
10646: PPUSH
10647: CALL_OW 67
// for i in soldiersOK_list do
10651: LD_ADDR_VAR 0 14
10655: PUSH
10656: LD_VAR 0 19
10660: PUSH
10661: FOR_IN
10662: IFFALSE 10696
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10664: LD_VAR 0 14
10668: PPUSH
10669: LD_INT 91
10671: PPUSH
10672: LD_INT 63
10674: PPUSH
10675: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
10679: LD_VAR 0 14
10683: PPUSH
10684: LD_INT 75
10686: PPUSH
10687: LD_INT 33
10689: PPUSH
10690: CALL_OW 174
// end ;
10694: GO 10661
10696: POP
10697: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
10698: LD_INT 13
10700: PPUSH
10701: LD_INT 22
10703: PUSH
10704: LD_VAR 0 1
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: LD_INT 2
10720: GREATER
10721: IFFALSE 10644
// repeat wait ( 0 0$3 ) ;
10723: LD_INT 105
10725: PPUSH
10726: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10730: LD_ADDR_VAR 0 17
10734: PUSH
10735: LD_INT 22
10737: PUSH
10738: LD_VAR 0 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 1
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: LD_INT 24
10755: PUSH
10756: LD_INT 550
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 24
10769: PUSH
10770: LD_INT 250
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PPUSH
10786: CALL_OW 69
10790: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10791: LD_ADDR_VAR 0 19
10795: PUSH
10796: LD_INT 22
10798: PUSH
10799: LD_VAR 0 1
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 2
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 5
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 8
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 25
10843: PUSH
10844: LD_INT 9
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 24
10860: PUSH
10861: LD_INT 1000
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 69
10877: ST_TO_ADDR
// if medicCount > 0 then
10878: LD_VAR 0 7
10882: PUSH
10883: LD_INT 0
10885: GREATER
10886: IFFALSE 10960
// begin if damageUnit_list > 0 then
10888: LD_VAR 0 17
10892: PUSH
10893: LD_INT 0
10895: GREATER
10896: IFFALSE 10960
// begin for i in damageUnit_list do
10898: LD_ADDR_VAR 0 14
10902: PUSH
10903: LD_VAR 0 17
10907: PUSH
10908: FOR_IN
10909: IFFALSE 10958
// begin ComMoveToArea ( i , healArea ) ;
10911: LD_VAR 0 14
10915: PPUSH
10916: LD_VAR 0 10
10920: PPUSH
10921: CALL_OW 113
// for j in medic_list do
10925: LD_ADDR_VAR 0 15
10929: PUSH
10930: LD_VAR 0 18
10934: PUSH
10935: FOR_IN
10936: IFFALSE 10954
// AddComHeal ( j , i ) ;
10938: LD_VAR 0 15
10942: PPUSH
10943: LD_VAR 0 14
10947: PPUSH
10948: CALL_OW 188
10952: GO 10935
10954: POP
10955: POP
// end ;
10956: GO 10908
10958: POP
10959: POP
// end ; end ; for i in soldiersOK_list do
10960: LD_ADDR_VAR 0 14
10964: PUSH
10965: LD_VAR 0 19
10969: PUSH
10970: FOR_IN
10971: IFFALSE 11147
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10973: LD_ADDR_VAR 0 22
10977: PUSH
10978: LD_INT 22
10980: PUSH
10981: LD_VAR 0 11
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PPUSH
10990: CALL_OW 69
10994: PPUSH
10995: LD_VAR 0 14
10999: PPUSH
11000: CALL_OW 74
11004: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11005: LD_ADDR_VAR 0 23
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_VAR 0 11
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 2
11024: PUSH
11025: LD_INT 59
11027: PUSH
11028: EMPTY
11029: LIST
11030: PUSH
11031: LD_INT 21
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 21
11043: PUSH
11044: LD_INT 2
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: PPUSH
11069: LD_VAR 0 14
11073: PPUSH
11074: CALL_OW 74
11078: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11079: LD_VAR 0 14
11083: PPUSH
11084: LD_VAR 0 22
11088: PPUSH
11089: CALL_OW 296
11093: PUSH
11094: LD_INT 8
11096: PLUS
11097: PUSH
11098: LD_VAR 0 14
11102: PPUSH
11103: LD_VAR 0 23
11107: PPUSH
11108: CALL_OW 296
11112: LESS
11113: IFFALSE 11131
// begin ComAttackUnit ( i , target1 ) ;
11115: LD_VAR 0 14
11119: PPUSH
11120: LD_VAR 0 22
11124: PPUSH
11125: CALL_OW 115
// end else
11129: GO 11145
// begin ComAttackUnit ( i , target2 ) ;
11131: LD_VAR 0 14
11135: PPUSH
11136: LD_VAR 0 23
11140: PPUSH
11141: CALL_OW 115
// end ; end ;
11145: GO 10970
11147: POP
11148: POP
// for i in soldiersOK_list do
11149: LD_ADDR_VAR 0 14
11153: PUSH
11154: LD_VAR 0 19
11158: PUSH
11159: FOR_IN
11160: IFFALSE 11336
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11162: LD_ADDR_VAR 0 22
11166: PUSH
11167: LD_INT 22
11169: PUSH
11170: LD_VAR 0 11
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PPUSH
11179: CALL_OW 69
11183: PPUSH
11184: LD_VAR 0 14
11188: PPUSH
11189: CALL_OW 74
11193: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11194: LD_ADDR_VAR 0 23
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_VAR 0 11
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: LD_INT 59
11216: PUSH
11217: EMPTY
11218: LIST
11219: PUSH
11220: LD_INT 21
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 21
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: EMPTY
11251: LIST
11252: PPUSH
11253: CALL_OW 69
11257: PPUSH
11258: LD_VAR 0 14
11262: PPUSH
11263: CALL_OW 74
11267: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11268: LD_VAR 0 14
11272: PPUSH
11273: LD_VAR 0 22
11277: PPUSH
11278: CALL_OW 296
11282: PUSH
11283: LD_INT 8
11285: PLUS
11286: PUSH
11287: LD_VAR 0 14
11291: PPUSH
11292: LD_VAR 0 23
11296: PPUSH
11297: CALL_OW 296
11301: LESS
11302: IFFALSE 11320
// begin ComAttackUnit ( i , target1 ) ;
11304: LD_VAR 0 14
11308: PPUSH
11309: LD_VAR 0 22
11313: PPUSH
11314: CALL_OW 115
// end else
11318: GO 11334
// begin ComAttackUnit ( i , target2 ) ;
11320: LD_VAR 0 14
11324: PPUSH
11325: LD_VAR 0 23
11329: PPUSH
11330: CALL_OW 115
// end ; end ;
11334: GO 11159
11336: POP
11337: POP
// until soldiersOK_list = [ ] ;
11338: LD_VAR 0 19
11342: PUSH
11343: EMPTY
11344: EQUAL
11345: IFFALSE 10723
// end ; if strategy = 3 then
11347: LD_VAR 0 12
11351: PUSH
11352: LD_INT 3
11354: EQUAL
11355: IFFALSE 12090
// begin repeat wait ( 0 0$3 ) ;
11357: LD_INT 105
11359: PPUSH
11360: CALL_OW 67
// for i in soldiersOK_list do
11364: LD_ADDR_VAR 0 14
11368: PUSH
11369: LD_VAR 0 19
11373: PUSH
11374: FOR_IN
11375: IFFALSE 11439
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11377: LD_VAR 0 14
11381: PPUSH
11382: LD_INT 63
11384: PPUSH
11385: LD_INT 71
11387: PPUSH
11388: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
11392: LD_VAR 0 14
11396: PPUSH
11397: LD_INT 35
11399: PPUSH
11400: LD_INT 44
11402: PPUSH
11403: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
11407: LD_VAR 0 14
11411: PPUSH
11412: LD_INT 23
11414: PPUSH
11415: LD_INT 18
11417: PPUSH
11418: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
11422: LD_VAR 0 14
11426: PPUSH
11427: LD_INT 26
11429: PPUSH
11430: LD_INT 12
11432: PPUSH
11433: CALL_OW 174
// end ;
11437: GO 11374
11439: POP
11440: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11441: LD_INT 14
11443: PPUSH
11444: LD_INT 22
11446: PUSH
11447: LD_VAR 0 1
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PPUSH
11456: CALL_OW 70
11460: PUSH
11461: LD_INT 2
11463: GREATER
11464: IFFALSE 11357
// repeat wait ( 0 0$1 ) ;
11466: LD_INT 35
11468: PPUSH
11469: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11473: LD_ADDR_VAR 0 17
11477: PUSH
11478: LD_INT 22
11480: PUSH
11481: LD_VAR 0 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: LD_INT 24
11498: PUSH
11499: LD_INT 550
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 24
11512: PUSH
11513: LD_INT 250
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PPUSH
11529: CALL_OW 69
11533: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11534: LD_ADDR_VAR 0 19
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_VAR 0 1
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 2
11553: PUSH
11554: LD_INT 25
11556: PUSH
11557: LD_INT 1
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 25
11566: PUSH
11567: LD_INT 5
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 25
11576: PUSH
11577: LD_INT 8
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: LD_INT 25
11586: PUSH
11587: LD_INT 9
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 24
11603: PUSH
11604: LD_INT 1000
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 69
11620: ST_TO_ADDR
// if medicCount > 0 then
11621: LD_VAR 0 7
11625: PUSH
11626: LD_INT 0
11628: GREATER
11629: IFFALSE 11703
// begin if damageUnit_list > 0 then
11631: LD_VAR 0 17
11635: PUSH
11636: LD_INT 0
11638: GREATER
11639: IFFALSE 11703
// begin for i in damageUnit_list do
11641: LD_ADDR_VAR 0 14
11645: PUSH
11646: LD_VAR 0 17
11650: PUSH
11651: FOR_IN
11652: IFFALSE 11701
// begin ComMoveToArea ( i , healArea ) ;
11654: LD_VAR 0 14
11658: PPUSH
11659: LD_VAR 0 10
11663: PPUSH
11664: CALL_OW 113
// for j in medic_list do
11668: LD_ADDR_VAR 0 15
11672: PUSH
11673: LD_VAR 0 18
11677: PUSH
11678: FOR_IN
11679: IFFALSE 11697
// AddComHeal ( j , i ) ;
11681: LD_VAR 0 15
11685: PPUSH
11686: LD_VAR 0 14
11690: PPUSH
11691: CALL_OW 188
11695: GO 11678
11697: POP
11698: POP
// end ;
11699: GO 11651
11701: POP
11702: POP
// end ; end ; for i in soldiersOK_list do
11703: LD_ADDR_VAR 0 14
11707: PUSH
11708: LD_VAR 0 19
11712: PUSH
11713: FOR_IN
11714: IFFALSE 11890
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11716: LD_ADDR_VAR 0 22
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_VAR 0 11
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PPUSH
11733: CALL_OW 69
11737: PPUSH
11738: LD_VAR 0 14
11742: PPUSH
11743: CALL_OW 74
11747: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11748: LD_ADDR_VAR 0 23
11752: PUSH
11753: LD_INT 22
11755: PUSH
11756: LD_VAR 0 11
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: LD_INT 59
11770: PUSH
11771: EMPTY
11772: LIST
11773: PUSH
11774: LD_INT 21
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 21
11786: PUSH
11787: LD_INT 2
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: EMPTY
11805: LIST
11806: PPUSH
11807: CALL_OW 69
11811: PPUSH
11812: LD_VAR 0 14
11816: PPUSH
11817: CALL_OW 74
11821: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11822: LD_VAR 0 14
11826: PPUSH
11827: LD_VAR 0 22
11831: PPUSH
11832: CALL_OW 296
11836: PUSH
11837: LD_INT 8
11839: PLUS
11840: PUSH
11841: LD_VAR 0 14
11845: PPUSH
11846: LD_VAR 0 23
11850: PPUSH
11851: CALL_OW 296
11855: LESS
11856: IFFALSE 11874
// begin ComAttackUnit ( i , target1 ) ;
11858: LD_VAR 0 14
11862: PPUSH
11863: LD_VAR 0 22
11867: PPUSH
11868: CALL_OW 115
// end else
11872: GO 11888
// begin ComAttackUnit ( i , target2 ) ;
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 23
11883: PPUSH
11884: CALL_OW 115
// end ; end ;
11888: GO 11713
11890: POP
11891: POP
// for i in soldiersOK_list do
11892: LD_ADDR_VAR 0 14
11896: PUSH
11897: LD_VAR 0 19
11901: PUSH
11902: FOR_IN
11903: IFFALSE 12079
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11905: LD_ADDR_VAR 0 22
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: LD_VAR 0 11
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: PPUSH
11927: LD_VAR 0 14
11931: PPUSH
11932: CALL_OW 74
11936: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11937: LD_ADDR_VAR 0 23
11941: PUSH
11942: LD_INT 22
11944: PUSH
11945: LD_VAR 0 11
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 59
11959: PUSH
11960: EMPTY
11961: LIST
11962: PUSH
11963: LD_INT 21
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 21
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: PPUSH
12001: LD_VAR 0 14
12005: PPUSH
12006: CALL_OW 74
12010: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12011: LD_VAR 0 14
12015: PPUSH
12016: LD_VAR 0 22
12020: PPUSH
12021: CALL_OW 296
12025: PUSH
12026: LD_INT 8
12028: PLUS
12029: PUSH
12030: LD_VAR 0 14
12034: PPUSH
12035: LD_VAR 0 23
12039: PPUSH
12040: CALL_OW 296
12044: LESS
12045: IFFALSE 12063
// begin ComAttackUnit ( i , target1 ) ;
12047: LD_VAR 0 14
12051: PPUSH
12052: LD_VAR 0 22
12056: PPUSH
12057: CALL_OW 115
// end else
12061: GO 12077
// begin ComAttackUnit ( i , target2 ) ;
12063: LD_VAR 0 14
12067: PPUSH
12068: LD_VAR 0 23
12072: PPUSH
12073: CALL_OW 115
// end ; end ;
12077: GO 11902
12079: POP
12080: POP
// until soldiersOK_list = [ ] ;
12081: LD_VAR 0 19
12085: PUSH
12086: EMPTY
12087: EQUAL
12088: IFFALSE 11466
// end ; end ;
12090: LD_VAR 0 13
12094: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12095: LD_INT 0
12097: PPUSH
12098: PPUSH
12099: PPUSH
12100: PPUSH
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// amChassisTab = [ ] ;
12108: LD_ADDR_VAR 0 19
12112: PUSH
12113: EMPTY
12114: ST_TO_ADDR
// arChassisTab = [ ] ;
12115: LD_ADDR_VAR 0 18
12119: PUSH
12120: EMPTY
12121: ST_TO_ADDR
// ruChassisTab = [ ] ;
12122: LD_ADDR_VAR 0 17
12126: PUSH
12127: EMPTY
12128: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12129: LD_INT 35
12131: PPUSH
12132: CALL_OW 67
// if nation = 1 then
12136: LD_VAR 0 5
12140: PUSH
12141: LD_INT 1
12143: EQUAL
12144: IFFALSE 12635
// begin uc_side = side ;
12146: LD_ADDR_OWVAR 20
12150: PUSH
12151: LD_VAR 0 2
12155: ST_TO_ADDR
// uc_nation = nation ;
12156: LD_ADDR_OWVAR 21
12160: PUSH
12161: LD_VAR 0 5
12165: ST_TO_ADDR
// vc_engine = vehengine ;
12166: LD_ADDR_OWVAR 39
12170: PUSH
12171: LD_VAR 0 6
12175: ST_TO_ADDR
// vc_control = vehcontrol ;
12176: LD_ADDR_OWVAR 38
12180: PUSH
12181: LD_VAR 0 7
12185: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12186: LD_ADDR_OWVAR 40
12190: PUSH
12191: LD_VAR 0 10
12195: PUSH
12196: LD_INT 1
12198: PPUSH
12199: LD_VAR 0 10
12203: PPUSH
12204: CALL_OW 12
12208: ARRAY
12209: ST_TO_ADDR
// for j = 1 to AMWeapon do
12210: LD_ADDR_VAR 0 14
12214: PUSH
12215: DOUBLE
12216: LD_INT 1
12218: DEC
12219: ST_TO_ADDR
12220: LD_VAR 0 10
12224: PUSH
12225: FOR_TO
12226: IFFALSE 12527
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12228: LD_VAR 0 10
12232: PUSH
12233: LD_VAR 0 14
12237: ARRAY
12238: PUSH
12239: LD_INT 2
12241: EQUAL
12242: PUSH
12243: LD_VAR 0 10
12247: PUSH
12248: LD_VAR 0 14
12252: ARRAY
12253: PUSH
12254: LD_INT 3
12256: EQUAL
12257: OR
12258: IFFALSE 12311
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12260: LD_ADDR_VAR 0 19
12264: PUSH
12265: LD_INT 1
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: LD_INT 3
12273: PUSH
12274: LD_INT 4
12276: PUSH
12277: LD_INT 5
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12287: LD_ADDR_OWVAR 37
12291: PUSH
12292: LD_VAR 0 19
12296: PUSH
12297: LD_INT 1
12299: PPUSH
12300: LD_VAR 0 19
12304: PPUSH
12305: CALL_OW 12
12309: ARRAY
12310: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12311: LD_VAR 0 10
12315: PUSH
12316: LD_VAR 0 14
12320: ARRAY
12321: PUSH
12322: LD_INT 4
12324: EQUAL
12325: PUSH
12326: LD_VAR 0 10
12330: PUSH
12331: LD_VAR 0 14
12335: ARRAY
12336: PUSH
12337: LD_INT 5
12339: EQUAL
12340: OR
12341: PUSH
12342: LD_VAR 0 10
12346: PUSH
12347: LD_VAR 0 14
12351: ARRAY
12352: PUSH
12353: LD_INT 9
12355: EQUAL
12356: OR
12357: PUSH
12358: LD_VAR 0 10
12362: PUSH
12363: LD_VAR 0 14
12367: ARRAY
12368: PUSH
12369: LD_INT 11
12371: EQUAL
12372: OR
12373: PUSH
12374: LD_VAR 0 10
12378: PUSH
12379: LD_VAR 0 14
12383: ARRAY
12384: PUSH
12385: LD_INT 7
12387: EQUAL
12388: OR
12389: IFFALSE 12438
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12391: LD_ADDR_VAR 0 19
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: LD_INT 5
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12414: LD_ADDR_OWVAR 37
12418: PUSH
12419: LD_VAR 0 19
12423: PUSH
12424: LD_INT 1
12426: PPUSH
12427: LD_VAR 0 19
12431: PPUSH
12432: CALL_OW 12
12436: ARRAY
12437: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12438: LD_VAR 0 10
12442: PUSH
12443: LD_VAR 0 14
12447: ARRAY
12448: PUSH
12449: LD_INT 8
12451: EQUAL
12452: PUSH
12453: LD_VAR 0 10
12457: PUSH
12458: LD_VAR 0 14
12462: ARRAY
12463: PUSH
12464: LD_INT 6
12466: EQUAL
12467: OR
12468: PUSH
12469: LD_VAR 0 10
12473: PUSH
12474: LD_VAR 0 14
12478: ARRAY
12479: PUSH
12480: LD_INT 10
12482: EQUAL
12483: OR
12484: IFFALSE 12525
// begin amChassisTab = [ 4 , 5 ] ;
12486: LD_ADDR_VAR 0 19
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: LD_INT 5
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12501: LD_ADDR_OWVAR 37
12505: PUSH
12506: LD_VAR 0 19
12510: PUSH
12511: LD_INT 1
12513: PPUSH
12514: LD_VAR 0 19
12518: PPUSH
12519: CALL_OW 12
12523: ARRAY
12524: ST_TO_ADDR
// end ; end ;
12525: GO 12225
12527: POP
12528: POP
// veh = CreateVehicle ;
12529: LD_ADDR_VAR 0 16
12533: PUSH
12534: CALL_OW 45
12538: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12539: LD_VAR 0 16
12543: PPUSH
12544: LD_VAR 0 1
12548: PPUSH
12549: LD_INT 0
12551: PPUSH
12552: CALL_OW 49
// if vehControl = 1 then
12556: LD_VAR 0 7
12560: PUSH
12561: LD_INT 1
12563: EQUAL
12564: IFFALSE 12621
// begin hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 3
12587: PPUSH
12588: LD_VAR 0 4
12592: PPUSH
12593: CALL_OW 380
// un = CreateHuman ;
12597: LD_ADDR_VAR 0 15
12601: PUSH
12602: CALL_OW 44
12606: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12607: LD_VAR 0 15
12611: PPUSH
12612: LD_VAR 0 16
12616: PPUSH
12617: CALL_OW 52
// end ; i = i + 1 ;
12621: LD_ADDR_VAR 0 13
12625: PUSH
12626: LD_VAR 0 13
12630: PUSH
12631: LD_INT 1
12633: PLUS
12634: ST_TO_ADDR
// end ; if nation = 2 then
12635: LD_VAR 0 5
12639: PUSH
12640: LD_INT 2
12642: EQUAL
12643: IFFALSE 13067
// begin uc_side = side ;
12645: LD_ADDR_OWVAR 20
12649: PUSH
12650: LD_VAR 0 2
12654: ST_TO_ADDR
// uc_nation = nation ;
12655: LD_ADDR_OWVAR 21
12659: PUSH
12660: LD_VAR 0 5
12664: ST_TO_ADDR
// vc_engine = vehengine ;
12665: LD_ADDR_OWVAR 39
12669: PUSH
12670: LD_VAR 0 6
12674: ST_TO_ADDR
// vc_control = vehcontrol ;
12675: LD_ADDR_OWVAR 38
12679: PUSH
12680: LD_VAR 0 7
12684: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12685: LD_ADDR_OWVAR 40
12689: PUSH
12690: LD_VAR 0 9
12694: PUSH
12695: LD_INT 1
12697: PPUSH
12698: LD_VAR 0 9
12702: PPUSH
12703: CALL_OW 12
12707: ARRAY
12708: ST_TO_ADDR
// for j = 1 to ARWeapons do
12709: LD_ADDR_VAR 0 14
12713: PUSH
12714: DOUBLE
12715: LD_INT 1
12717: DEC
12718: ST_TO_ADDR
12719: LD_VAR 0 9
12723: PUSH
12724: FOR_TO
12725: IFFALSE 12959
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12727: LD_VAR 0 9
12731: PUSH
12732: LD_VAR 0 14
12736: ARRAY
12737: PUSH
12738: LD_INT 24
12740: EQUAL
12741: PUSH
12742: LD_VAR 0 9
12746: PUSH
12747: LD_VAR 0 14
12751: ARRAY
12752: PUSH
12753: LD_INT 22
12755: EQUAL
12756: OR
12757: PUSH
12758: LD_VAR 0 9
12762: PUSH
12763: LD_VAR 0 14
12767: ARRAY
12768: PUSH
12769: LD_INT 23
12771: EQUAL
12772: OR
12773: PUSH
12774: LD_VAR 0 9
12778: PUSH
12779: LD_VAR 0 14
12783: ARRAY
12784: PUSH
12785: LD_INT 30
12787: EQUAL
12788: OR
12789: IFFALSE 12838
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
12791: LD_ADDR_VAR 0 18
12795: PUSH
12796: LD_INT 11
12798: PUSH
12799: LD_INT 12
12801: PUSH
12802: LD_INT 13
12804: PUSH
12805: LD_INT 14
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12814: LD_ADDR_OWVAR 37
12818: PUSH
12819: LD_VAR 0 18
12823: PUSH
12824: LD_INT 1
12826: PPUSH
12827: LD_VAR 0 18
12831: PPUSH
12832: CALL_OW 12
12836: ARRAY
12837: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
12838: LD_VAR 0 9
12842: PUSH
12843: LD_VAR 0 14
12847: ARRAY
12848: PUSH
12849: LD_INT 29
12851: EQUAL
12852: PUSH
12853: LD_VAR 0 9
12857: PUSH
12858: LD_VAR 0 14
12862: ARRAY
12863: PUSH
12864: LD_INT 28
12866: EQUAL
12867: OR
12868: PUSH
12869: LD_VAR 0 9
12873: PUSH
12874: LD_VAR 0 14
12878: ARRAY
12879: PUSH
12880: LD_INT 27
12882: EQUAL
12883: OR
12884: PUSH
12885: LD_VAR 0 9
12889: PUSH
12890: LD_VAR 0 14
12894: ARRAY
12895: PUSH
12896: LD_INT 26
12898: EQUAL
12899: OR
12900: PUSH
12901: LD_VAR 0 9
12905: PUSH
12906: LD_VAR 0 14
12910: ARRAY
12911: PUSH
12912: LD_INT 25
12914: EQUAL
12915: OR
12916: IFFALSE 12957
// begin arChassisTab = [ 13 , 14 ] ;
12918: LD_ADDR_VAR 0 18
12922: PUSH
12923: LD_INT 13
12925: PUSH
12926: LD_INT 14
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12933: LD_ADDR_OWVAR 37
12937: PUSH
12938: LD_VAR 0 18
12942: PUSH
12943: LD_INT 1
12945: PPUSH
12946: LD_VAR 0 18
12950: PPUSH
12951: CALL_OW 12
12955: ARRAY
12956: ST_TO_ADDR
// end ; end ;
12957: GO 12724
12959: POP
12960: POP
// veh = CreateVehicle ;
12961: LD_ADDR_VAR 0 16
12965: PUSH
12966: CALL_OW 45
12970: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12971: LD_VAR 0 16
12975: PPUSH
12976: LD_VAR 0 1
12980: PPUSH
12981: LD_INT 0
12983: PPUSH
12984: CALL_OW 49
// if vehcontrol = 1 then
12988: LD_VAR 0 7
12992: PUSH
12993: LD_INT 1
12995: EQUAL
12996: IFFALSE 13053
// begin hc_gallery =  ;
12998: LD_ADDR_OWVAR 33
13002: PUSH
13003: LD_STRING 
13005: ST_TO_ADDR
// hc_name =  ;
13006: LD_ADDR_OWVAR 26
13010: PUSH
13011: LD_STRING 
13013: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13014: LD_INT 0
13016: PPUSH
13017: LD_INT 3
13019: PPUSH
13020: LD_VAR 0 4
13024: PPUSH
13025: CALL_OW 380
// un = CreateHuman ;
13029: LD_ADDR_VAR 0 15
13033: PUSH
13034: CALL_OW 44
13038: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13039: LD_VAR 0 15
13043: PPUSH
13044: LD_VAR 0 16
13048: PPUSH
13049: CALL_OW 52
// end ; i = i + 1 ;
13053: LD_ADDR_VAR 0 13
13057: PUSH
13058: LD_VAR 0 13
13062: PUSH
13063: LD_INT 1
13065: PLUS
13066: ST_TO_ADDR
// end ; if nation = 3 then
13067: LD_VAR 0 5
13071: PUSH
13072: LD_INT 3
13074: EQUAL
13075: IFFALSE 13467
// begin uc_side = side ;
13077: LD_ADDR_OWVAR 20
13081: PUSH
13082: LD_VAR 0 2
13086: ST_TO_ADDR
// uc_nation = nation ;
13087: LD_ADDR_OWVAR 21
13091: PUSH
13092: LD_VAR 0 5
13096: ST_TO_ADDR
// vc_engine = vehengine ;
13097: LD_ADDR_OWVAR 39
13101: PUSH
13102: LD_VAR 0 6
13106: ST_TO_ADDR
// vc_control = vehcontrol ;
13107: LD_ADDR_OWVAR 38
13111: PUSH
13112: LD_VAR 0 7
13116: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13117: LD_ADDR_OWVAR 40
13121: PUSH
13122: LD_VAR 0 8
13126: PUSH
13127: LD_INT 1
13129: PPUSH
13130: LD_VAR 0 8
13134: PPUSH
13135: CALL_OW 12
13139: ARRAY
13140: ST_TO_ADDR
// for j = 1 to RuWeapons do
13141: LD_ADDR_VAR 0 14
13145: PUSH
13146: DOUBLE
13147: LD_INT 1
13149: DEC
13150: ST_TO_ADDR
13151: LD_VAR 0 8
13155: PUSH
13156: FOR_TO
13157: IFFALSE 13359
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13159: LD_VAR 0 8
13163: PUSH
13164: LD_VAR 0 14
13168: ARRAY
13169: PUSH
13170: LD_INT 42
13172: EQUAL
13173: PUSH
13174: LD_VAR 0 8
13178: PUSH
13179: LD_VAR 0 14
13183: ARRAY
13184: PUSH
13185: LD_INT 43
13187: EQUAL
13188: OR
13189: PUSH
13190: LD_VAR 0 8
13194: PUSH
13195: LD_VAR 0 14
13199: ARRAY
13200: PUSH
13201: LD_INT 44
13203: EQUAL
13204: OR
13205: PUSH
13206: LD_VAR 0 8
13210: PUSH
13211: LD_VAR 0 14
13215: ARRAY
13216: PUSH
13217: LD_INT 45
13219: EQUAL
13220: OR
13221: PUSH
13222: LD_VAR 0 8
13226: PUSH
13227: LD_VAR 0 14
13231: ARRAY
13232: PUSH
13233: LD_INT 49
13235: EQUAL
13236: OR
13237: IFFALSE 13286
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13239: LD_ADDR_VAR 0 17
13243: PUSH
13244: LD_INT 21
13246: PUSH
13247: LD_INT 22
13249: PUSH
13250: LD_INT 23
13252: PUSH
13253: LD_INT 24
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13262: LD_ADDR_OWVAR 37
13266: PUSH
13267: LD_VAR 0 17
13271: PUSH
13272: LD_INT 1
13274: PPUSH
13275: LD_VAR 0 17
13279: PPUSH
13280: CALL_OW 12
13284: ARRAY
13285: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13286: LD_VAR 0 8
13290: PUSH
13291: LD_VAR 0 14
13295: ARRAY
13296: PUSH
13297: LD_INT 46
13299: EQUAL
13300: PUSH
13301: LD_VAR 0 8
13305: PUSH
13306: LD_VAR 0 14
13310: ARRAY
13311: PUSH
13312: LD_INT 47
13314: EQUAL
13315: OR
13316: IFFALSE 13357
// begin ruChassisTab = [ 23 , 24 ] ;
13318: LD_ADDR_VAR 0 17
13322: PUSH
13323: LD_INT 23
13325: PUSH
13326: LD_INT 24
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13333: LD_ADDR_OWVAR 37
13337: PUSH
13338: LD_VAR 0 17
13342: PUSH
13343: LD_INT 1
13345: PPUSH
13346: LD_VAR 0 17
13350: PPUSH
13351: CALL_OW 12
13355: ARRAY
13356: ST_TO_ADDR
// end ; end ;
13357: GO 13156
13359: POP
13360: POP
// veh = CreateVehicle ;
13361: LD_ADDR_VAR 0 16
13365: PUSH
13366: CALL_OW 45
13370: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13371: LD_VAR 0 16
13375: PPUSH
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 0
13383: PPUSH
13384: CALL_OW 49
// if vehcontrol = 1 then
13388: LD_VAR 0 7
13392: PUSH
13393: LD_INT 1
13395: EQUAL
13396: IFFALSE 13453
// begin hc_gallery =  ;
13398: LD_ADDR_OWVAR 33
13402: PUSH
13403: LD_STRING 
13405: ST_TO_ADDR
// hc_name =  ;
13406: LD_ADDR_OWVAR 26
13410: PUSH
13411: LD_STRING 
13413: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13414: LD_INT 0
13416: PPUSH
13417: LD_INT 3
13419: PPUSH
13420: LD_VAR 0 4
13424: PPUSH
13425: CALL_OW 380
// un = CreateHuman ;
13429: LD_ADDR_VAR 0 15
13433: PUSH
13434: CALL_OW 44
13438: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13439: LD_VAR 0 15
13443: PPUSH
13444: LD_VAR 0 16
13448: PPUSH
13449: CALL_OW 52
// end ; i = i + 1 ;
13453: LD_ADDR_VAR 0 13
13457: PUSH
13458: LD_VAR 0 13
13462: PUSH
13463: LD_INT 1
13465: PLUS
13466: ST_TO_ADDR
// end ; until i = vehCount ;
13467: LD_VAR 0 13
13471: PUSH
13472: LD_VAR 0 3
13476: EQUAL
13477: IFFALSE 12129
// repeat wait ( 0 0$1 ) ;
13479: LD_INT 35
13481: PPUSH
13482: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13486: LD_ADDR_VAR 0 20
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_VAR 0 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 21
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 24
13515: PUSH
13516: LD_INT 661
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: PPUSH
13528: CALL_OW 69
13532: ST_TO_ADDR
// if vehicleOK_list > 0 then
13533: LD_VAR 0 20
13537: PUSH
13538: LD_INT 0
13540: GREATER
13541: IFFALSE 13732
// begin for i in vehicleOK_list do
13543: LD_ADDR_VAR 0 13
13547: PUSH
13548: LD_VAR 0 20
13552: PUSH
13553: FOR_IN
13554: IFFALSE 13730
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13556: LD_ADDR_VAR 0 21
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_VAR 0 11
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PPUSH
13573: CALL_OW 69
13577: PPUSH
13578: LD_VAR 0 13
13582: PPUSH
13583: CALL_OW 74
13587: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13588: LD_ADDR_VAR 0 22
13592: PUSH
13593: LD_INT 22
13595: PUSH
13596: LD_VAR 0 11
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: LD_INT 59
13610: PUSH
13611: EMPTY
13612: LIST
13613: PUSH
13614: LD_INT 21
13616: PUSH
13617: LD_INT 1
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 21
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: PPUSH
13652: LD_VAR 0 13
13656: PPUSH
13657: CALL_OW 74
13661: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13662: LD_VAR 0 13
13666: PPUSH
13667: LD_VAR 0 21
13671: PPUSH
13672: CALL_OW 296
13676: PUSH
13677: LD_INT 8
13679: PLUS
13680: PUSH
13681: LD_VAR 0 13
13685: PPUSH
13686: LD_VAR 0 22
13690: PPUSH
13691: CALL_OW 296
13695: LESS
13696: IFFALSE 13714
// begin ComAttackUnit ( i , target1 ) ;
13698: LD_VAR 0 13
13702: PPUSH
13703: LD_VAR 0 21
13707: PPUSH
13708: CALL_OW 115
// end else
13712: GO 13728
// begin ComAttackUnit ( i , target2 ) ;
13714: LD_VAR 0 13
13718: PPUSH
13719: LD_VAR 0 22
13723: PPUSH
13724: CALL_OW 115
// end ; end ;
13728: GO 13553
13730: POP
13731: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
13732: LD_INT 22
13734: PUSH
13735: LD_VAR 0 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 21
13746: PUSH
13747: LD_INT 2
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: PUSH
13763: LD_INT 0
13765: EQUAL
13766: IFFALSE 13479
// end ;
13768: LD_VAR 0 12
13772: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
13773: LD_INT 0
13775: PPUSH
13776: PPUSH
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13783: LD_ADDR_VAR 0 7
13787: PUSH
13788: LD_INT 22
13790: PUSH
13791: LD_VAR 0 1
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: LD_INT 24
13808: PUSH
13809: LD_INT 550
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 24
13822: PUSH
13823: LD_INT 250
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 69
13843: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13844: LD_ADDR_VAR 0 8
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_VAR 0 1
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 2
13863: PUSH
13864: LD_INT 25
13866: PUSH
13867: LD_INT 1
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 25
13876: PUSH
13877: LD_INT 5
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 25
13886: PUSH
13887: LD_INT 8
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 25
13896: PUSH
13897: LD_INT 9
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 24
13913: PUSH
13914: LD_INT 1000
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 69
13930: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13931: LD_ADDR_VAR 0 9
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_VAR 0 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 25
13950: PUSH
13951: LD_INT 4
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: ST_TO_ADDR
// if medicCount > 0 then
13967: LD_VAR 0 9
13971: PUSH
13972: LD_INT 0
13974: GREATER
13975: IFFALSE 14049
// begin if damageUnit_list > 0 then
13977: LD_VAR 0 7
13981: PUSH
13982: LD_INT 0
13984: GREATER
13985: IFFALSE 14049
// begin for i in damageUnit_list do
13987: LD_ADDR_VAR 0 5
13991: PUSH
13992: LD_VAR 0 7
13996: PUSH
13997: FOR_IN
13998: IFFALSE 14047
// begin ComMoveToArea ( i , healArea ) ;
14000: LD_VAR 0 5
14004: PPUSH
14005: LD_VAR 0 2
14009: PPUSH
14010: CALL_OW 113
// for j in medicCount do
14014: LD_ADDR_VAR 0 6
14018: PUSH
14019: LD_VAR 0 9
14023: PUSH
14024: FOR_IN
14025: IFFALSE 14043
// AddComHeal ( j , i ) ;
14027: LD_VAR 0 6
14031: PPUSH
14032: LD_VAR 0 5
14036: PPUSH
14037: CALL_OW 188
14041: GO 14024
14043: POP
14044: POP
// end ;
14045: GO 13997
14047: POP
14048: POP
// end ; end ; if soldiersOK_list > 0 then
14049: LD_VAR 0 8
14053: PUSH
14054: LD_INT 0
14056: GREATER
14057: IFFALSE 14248
// begin for i in soldiersOK_list do
14059: LD_ADDR_VAR 0 5
14063: PUSH
14064: LD_VAR 0 8
14068: PUSH
14069: FOR_IN
14070: IFFALSE 14246
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14072: LD_ADDR_VAR 0 10
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_VAR 0 3
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 69
14093: PPUSH
14094: LD_VAR 0 5
14098: PPUSH
14099: CALL_OW 74
14103: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14104: LD_ADDR_VAR 0 11
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_VAR 0 3
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 59
14126: PUSH
14127: EMPTY
14128: LIST
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PPUSH
14168: LD_VAR 0 5
14172: PPUSH
14173: CALL_OW 74
14177: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14178: LD_VAR 0 5
14182: PPUSH
14183: LD_VAR 0 10
14187: PPUSH
14188: CALL_OW 296
14192: PUSH
14193: LD_INT 8
14195: PLUS
14196: PUSH
14197: LD_VAR 0 5
14201: PPUSH
14202: LD_VAR 0 11
14206: PPUSH
14207: CALL_OW 296
14211: LESS
14212: IFFALSE 14230
// begin ComAttackUnit ( i , target1 ) ;
14214: LD_VAR 0 5
14218: PPUSH
14219: LD_VAR 0 10
14223: PPUSH
14224: CALL_OW 115
// end else
14228: GO 14244
// begin ComAttackUnit ( i , target2 ) ;
14230: LD_VAR 0 5
14234: PPUSH
14235: LD_VAR 0 11
14239: PPUSH
14240: CALL_OW 115
// end ; end ;
14244: GO 14069
14246: POP
14247: POP
// end ; end ; end_of_file
14248: LD_VAR 0 4
14252: RET
// every 1 do var i ;
14253: GO 14255
14255: DISABLE
14256: LD_INT 0
14258: PPUSH
// begin InGameOn ;
14259: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14263: LD_INT 53
14265: PPUSH
14266: LD_INT 40
14268: PPUSH
14269: CALL_OW 84
// wait ( 0 0$5 ) ;
14273: LD_INT 175
14275: PPUSH
14276: CALL_OW 67
// if gammaCommander = 1 then
14280: LD_EXP 11
14284: PUSH
14285: LD_INT 1
14287: EQUAL
14288: IFFALSE 14299
// CenterNowOnUnits ( Donaldson ) ;
14290: LD_EXP 3
14294: PPUSH
14295: CALL_OW 87
// if gammaCommander = 2 then
14299: LD_EXP 11
14303: PUSH
14304: LD_INT 2
14306: EQUAL
14307: IFFALSE 14318
// CenterNowOnUnits ( Brown ) ;
14309: LD_EXP 2
14313: PPUSH
14314: CALL_OW 87
// if gammaCommander = 3 then
14318: LD_EXP 11
14322: PUSH
14323: LD_INT 3
14325: EQUAL
14326: IFFALSE 14337
// CenterNowOnUnits ( Houten ) ;
14328: LD_EXP 12
14332: PPUSH
14333: CALL_OW 87
// if gammaCommander = 1 then
14337: LD_EXP 11
14341: PUSH
14342: LD_INT 1
14344: EQUAL
14345: IFFALSE 14359
// Say ( Donaldson , D1-Don-1 ) ;
14347: LD_EXP 3
14351: PPUSH
14352: LD_STRING D1-Don-1
14354: PPUSH
14355: CALL_OW 88
// if gammaCommander = 2 then
14359: LD_EXP 11
14363: PUSH
14364: LD_INT 2
14366: EQUAL
14367: IFFALSE 14381
// Say ( Brown , D1-Brown-1 ) ;
14369: LD_EXP 2
14373: PPUSH
14374: LD_STRING D1-Brown-1
14376: PPUSH
14377: CALL_OW 88
// if gammaCommander = 3 then
14381: LD_EXP 11
14385: PUSH
14386: LD_INT 3
14388: EQUAL
14389: IFFALSE 14403
// Say ( Houten , D1-VanH-1 ) ;
14391: LD_EXP 12
14395: PPUSH
14396: LD_STRING D1-VanH-1
14398: PPUSH
14399: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
14403: LD_EXP 21
14407: PPUSH
14408: LD_STRING D1-Har-1
14410: PPUSH
14411: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
14415: LD_INT 53
14417: PPUSH
14418: LD_INT 40
14420: PPUSH
14421: CALL_OW 84
// if gammaCommander = 1 then
14425: LD_EXP 11
14429: PUSH
14430: LD_INT 1
14432: EQUAL
14433: IFFALSE 14447
// Say ( Donaldson , D1-Don-2 ) ;
14435: LD_EXP 3
14439: PPUSH
14440: LD_STRING D1-Don-2
14442: PPUSH
14443: CALL_OW 88
// if gammaCommander = 2 then
14447: LD_EXP 11
14451: PUSH
14452: LD_INT 2
14454: EQUAL
14455: IFFALSE 14469
// Say ( Brown , D1-Brown-2 ) ;
14457: LD_EXP 2
14461: PPUSH
14462: LD_STRING D1-Brown-2
14464: PPUSH
14465: CALL_OW 88
// if gammaCommander = 3 then
14469: LD_EXP 11
14473: PUSH
14474: LD_INT 3
14476: EQUAL
14477: IFFALSE 14491
// Say ( Houten , D1-VanH-2 ) ;
14479: LD_EXP 12
14483: PPUSH
14484: LD_STRING D1-VanH-2
14486: PPUSH
14487: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
14491: LD_EXP 21
14495: PPUSH
14496: LD_STRING D1-Har-2
14498: PPUSH
14499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
14503: LD_INT 35
14505: PPUSH
14506: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14510: LD_ADDR_VAR 0 1
14514: PUSH
14515: LD_INT 22
14517: PUSH
14518: LD_INT 6
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: PPUSH
14528: CALL_OW 69
14532: PUSH
14533: FOR_IN
14534: IFFALSE 14553
// ComAgressiveMove ( i , 54 , 20 ) ;
14536: LD_VAR 0 1
14540: PPUSH
14541: LD_INT 54
14543: PPUSH
14544: LD_INT 20
14546: PPUSH
14547: CALL_OW 114
14551: GO 14533
14553: POP
14554: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14555: LD_ADDR_VAR 0 1
14559: PUSH
14560: LD_INT 22
14562: PUSH
14563: LD_INT 1
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 25
14572: PUSH
14573: LD_INT 1
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: LD_INT 54
14585: PUSH
14586: EMPTY
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: PPUSH
14598: CALL_OW 69
14602: PUSH
14603: FOR_IN
14604: IFFALSE 14638
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
14606: LD_VAR 0 1
14610: PPUSH
14611: LD_INT 70
14613: PPUSH
14614: LD_INT 41
14616: PPUSH
14617: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_INT 46
14628: PPUSH
14629: LD_INT 39
14631: PPUSH
14632: CALL_OW 174
// end ;
14636: GO 14603
14638: POP
14639: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 ;
14640: LD_INT 22
14642: PUSH
14643: LD_INT 6
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 21
14652: PUSH
14653: LD_INT 1
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 24
14662: PUSH
14663: LD_INT 250
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PUSH
14680: LD_INT 0
14682: EQUAL
14683: IFFALSE 14503
// InGameOff ;
14685: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
14689: LD_STRING M1
14691: PPUSH
14692: CALL_OW 337
// SaveForQuickRestart ;
14696: CALL_OW 22
// end ;
14700: PPOPN 1
14702: END
// every 1 1$0 do
14703: GO 14705
14705: DISABLE
// begin PrepareSupportFromDelta ;
14706: CALL 1560 0 0
// firstAttack = 1 ;
14710: LD_ADDR_EXP 32
14714: PUSH
14715: LD_INT 1
14717: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14718: LD_EXP 8
14722: PPUSH
14723: CALL_OW 302
14727: IFFALSE 14743
// begin Say ( Gladstone , D2-Glad-1 ) ;
14729: LD_EXP 8
14733: PPUSH
14734: LD_STRING D2-Glad-1
14736: PPUSH
14737: CALL_OW 88
// end else
14741: GO 14836
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
14743: LD_INT 4
14745: PPUSH
14746: LD_INT 22
14748: PUSH
14749: LD_INT 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 2
14768: PUSH
14769: LD_INT 25
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 25
14781: PUSH
14782: LD_INT 2
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 25
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 25
14801: PUSH
14802: LD_INT 4
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 70
14825: PPUSH
14826: LD_STRING D2-Sol1-1
14828: PPUSH
14829: LD_STRING D2-FSol1-1
14831: PPUSH
14832: CALL 4813 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
14836: LD_EXP 3
14840: PPUSH
14841: CALL_OW 302
14845: PUSH
14846: LD_EXP 11
14850: PUSH
14851: LD_INT 1
14853: EQUAL
14854: AND
14855: IFFALSE 14869
// Say ( Donaldson , D2-Don-1 ) ;
14857: LD_EXP 3
14861: PPUSH
14862: LD_STRING D2-Don-1
14864: PPUSH
14865: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14869: LD_EXP 2
14873: PPUSH
14874: CALL_OW 302
14878: PUSH
14879: LD_EXP 11
14883: PUSH
14884: LD_INT 2
14886: EQUAL
14887: AND
14888: IFFALSE 14902
// Say ( Brown , D2-Brown-1 ) ;
14890: LD_EXP 2
14894: PPUSH
14895: LD_STRING D2-Brown-1
14897: PPUSH
14898: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14902: LD_EXP 12
14906: PPUSH
14907: CALL_OW 302
14911: PUSH
14912: LD_EXP 11
14916: PUSH
14917: LD_INT 3
14919: EQUAL
14920: AND
14921: IFFALSE 14935
// Say ( Houten , D2-VanH-1 ) ;
14923: LD_EXP 12
14927: PPUSH
14928: LD_STRING D2-VanH-1
14930: PPUSH
14931: CALL_OW 88
// end ;
14935: END
// every 0 0$1 do
14936: GO 14938
14938: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) / 2 ) ;
14939: LD_STRING 07_time
14941: PPUSH
14942: LD_INT 0
14944: PPUSH
14945: CALL_OW 30
14949: PUSH
14950: LD_INT 2
14952: DIVREAL
14953: PPUSH
14954: CALL_OW 67
// PrepareMacmillanSquad ;
14958: CALL 1972 0 0
// CenterNowOnUnits ( JMM ) ;
14962: LD_EXP 1
14966: PPUSH
14967: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
14971: LD_EXP 1
14975: PPUSH
14976: LD_STRING D3-JMM-1
14978: PPUSH
14979: CALL_OW 88
// JMMArrive = 1 ;
14983: LD_ADDR_EXP 37
14987: PUSH
14988: LD_INT 1
14990: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
14991: LD_EXP 3
14995: PPUSH
14996: CALL_OW 302
15000: PUSH
15001: LD_EXP 11
15005: PUSH
15006: LD_INT 1
15008: EQUAL
15009: AND
15010: IFFALSE 15026
// begin Say ( Donaldson , D3-Don-1 ) ;
15012: LD_EXP 3
15016: PPUSH
15017: LD_STRING D3-Don-1
15019: PPUSH
15020: CALL_OW 88
// end else
15024: GO 15063
// begin if gammaCommander = 1 then
15026: LD_EXP 11
15030: PUSH
15031: LD_INT 1
15033: EQUAL
15034: IFFALSE 15063
// begin DialogRandom ( others_gamma , D3-Sol1-1 , D3-Sol1-1 ) ;
15036: LD_EXP 10
15040: PPUSH
15041: LD_STRING D3-Sol1-1
15043: PPUSH
15044: LD_STRING D3-Sol1-1
15046: PPUSH
15047: CALL 4813 0 3
// Say ( JMM , D3-JMM-2 ) ;
15051: LD_EXP 1
15055: PPUSH
15056: LD_STRING D3-JMM-2
15058: PPUSH
15059: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15063: LD_EXP 2
15067: PPUSH
15068: CALL_OW 302
15072: PUSH
15073: LD_EXP 11
15077: PUSH
15078: LD_INT 2
15080: EQUAL
15081: AND
15082: IFFALSE 15098
// begin Say ( Brown , D3-Brown-1 ) ;
15084: LD_EXP 2
15088: PPUSH
15089: LD_STRING D3-Brown-1
15091: PPUSH
15092: CALL_OW 88
// end else
15096: GO 15135
// begin if gammaCommander = 2 then
15098: LD_EXP 11
15102: PUSH
15103: LD_INT 2
15105: EQUAL
15106: IFFALSE 15135
// begin DialogRandom ( others_gamma , D3-Sol1-1a , D3-Sol1-1a ) ;
15108: LD_EXP 10
15112: PPUSH
15113: LD_STRING D3-Sol1-1a
15115: PPUSH
15116: LD_STRING D3-Sol1-1a
15118: PPUSH
15119: CALL 4813 0 3
// Say ( JMM , D3-JMM-2 ) ;
15123: LD_EXP 1
15127: PPUSH
15128: LD_STRING D3-JMM-2
15130: PPUSH
15131: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15135: LD_EXP 12
15139: PPUSH
15140: CALL_OW 302
15144: PUSH
15145: LD_EXP 11
15149: PUSH
15150: LD_INT 3
15152: EQUAL
15153: AND
15154: IFFALSE 15170
// begin Say ( Houten , D3-VanH-1 ) ;
15156: LD_EXP 12
15160: PPUSH
15161: LD_STRING D3-VanH-1
15163: PPUSH
15164: CALL_OW 88
// end else
15168: GO 15207
// begin if gammaCommander = 3 then
15170: LD_EXP 11
15174: PUSH
15175: LD_INT 3
15177: EQUAL
15178: IFFALSE 15207
// begin DialogRandom ( others_gamma , D3-Sol1-1b , D3-Sol1-1b ) ;
15180: LD_EXP 10
15184: PPUSH
15185: LD_STRING D3-Sol1-1b
15187: PPUSH
15188: LD_STRING D3-Sol1-1b
15190: PPUSH
15191: CALL 4813 0 3
// Say ( JMM , D3-JMM-2 ) ;
15195: LD_EXP 1
15199: PPUSH
15200: LD_STRING D3-JMM-2
15202: PPUSH
15203: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15207: LD_EXP 14
15211: PPUSH
15212: CALL_OW 302
15216: IFFALSE 15244
// begin Say ( Joan , D3a-Joan-1 ) ;
15218: LD_EXP 14
15222: PPUSH
15223: LD_STRING D3a-Joan-1
15225: PPUSH
15226: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15230: LD_EXP 1
15234: PPUSH
15235: LD_STRING D3a-JMM-1
15237: PPUSH
15238: CALL_OW 88
// end else
15242: GO 15652
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15244: LD_EXP 3
15248: PPUSH
15249: CALL_OW 302
15253: PUSH
15254: LD_EXP 11
15258: PUSH
15259: LD_INT 1
15261: EQUAL
15262: AND
15263: PUSH
15264: LD_STRING 06_JoanStatus_1
15266: PPUSH
15267: LD_INT 0
15269: PPUSH
15270: CALL_OW 30
15274: PUSH
15275: LD_INT 1
15277: EQUAL
15278: AND
15279: IFFALSE 15330
// begin Say ( Donaldson , D3b-Don-1 ) ;
15281: LD_EXP 3
15285: PPUSH
15286: LD_STRING D3b-Don-1
15288: PPUSH
15289: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15293: LD_EXP 1
15297: PPUSH
15298: LD_STRING D3b-JMM-2
15300: PPUSH
15301: CALL_OW 88
// if IsOK ( Lisa ) then
15305: LD_EXP 6
15309: PPUSH
15310: CALL_OW 302
15314: IFFALSE 15328
// Say ( Lisa , D3b-Lisa-2 ) ;
15316: LD_EXP 6
15320: PPUSH
15321: LD_STRING D3b-Lisa-2
15323: PPUSH
15324: CALL_OW 88
// end else
15328: GO 15380
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15330: LD_EXP 10
15334: PPUSH
15335: LD_STRING D3b-Sol1-1
15337: PPUSH
15338: LD_STRING D3b-Sol1-1
15340: PPUSH
15341: CALL 4813 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15345: LD_EXP 1
15349: PPUSH
15350: LD_STRING D3b-JMM-2
15352: PPUSH
15353: CALL_OW 88
// if IsOK ( Lisa ) then
15357: LD_EXP 6
15361: PPUSH
15362: CALL_OW 302
15366: IFFALSE 15380
// Say ( Lisa , D3b-Lisa-2 ) ;
15368: LD_EXP 6
15372: PPUSH
15373: LD_STRING D3b-Lisa-2
15375: PPUSH
15376: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15380: LD_EXP 2
15384: PPUSH
15385: CALL_OW 302
15389: PUSH
15390: LD_EXP 11
15394: PUSH
15395: LD_INT 2
15397: EQUAL
15398: AND
15399: PUSH
15400: LD_STRING 06_JoanStatus_1
15402: PPUSH
15403: LD_INT 0
15405: PPUSH
15406: CALL_OW 30
15410: PUSH
15411: LD_INT 1
15413: EQUAL
15414: AND
15415: IFFALSE 15466
// begin Say ( Brown , D3b-Brown-1 ) ;
15417: LD_EXP 2
15421: PPUSH
15422: LD_STRING D3b-Brown-1
15424: PPUSH
15425: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15429: LD_EXP 1
15433: PPUSH
15434: LD_STRING D3b-JMM-2
15436: PPUSH
15437: CALL_OW 88
// if IsOK ( Lisa ) then
15441: LD_EXP 6
15445: PPUSH
15446: CALL_OW 302
15450: IFFALSE 15464
// Say ( Lisa , D3b-Lisa-2 ) ;
15452: LD_EXP 6
15456: PPUSH
15457: LD_STRING D3b-Lisa-2
15459: PPUSH
15460: CALL_OW 88
// end else
15464: GO 15516
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15466: LD_EXP 10
15470: PPUSH
15471: LD_STRING D3b-Sol1-1
15473: PPUSH
15474: LD_STRING D3b-Sol1-1
15476: PPUSH
15477: CALL 4813 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15481: LD_EXP 1
15485: PPUSH
15486: LD_STRING D3b-JMM-2
15488: PPUSH
15489: CALL_OW 88
// if IsOK ( Lisa ) then
15493: LD_EXP 6
15497: PPUSH
15498: CALL_OW 302
15502: IFFALSE 15516
// Say ( Lisa , D3b-Lisa-2 ) ;
15504: LD_EXP 6
15508: PPUSH
15509: LD_STRING D3b-Lisa-2
15511: PPUSH
15512: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15516: LD_EXP 12
15520: PPUSH
15521: CALL_OW 302
15525: PUSH
15526: LD_EXP 11
15530: PUSH
15531: LD_INT 3
15533: EQUAL
15534: AND
15535: PUSH
15536: LD_STRING 06_JoanStatus_1
15538: PPUSH
15539: LD_INT 0
15541: PPUSH
15542: CALL_OW 30
15546: PUSH
15547: LD_INT 1
15549: EQUAL
15550: AND
15551: IFFALSE 15602
// begin Say ( Houten , D3b-VanH-1 ) ;
15553: LD_EXP 12
15557: PPUSH
15558: LD_STRING D3b-VanH-1
15560: PPUSH
15561: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15565: LD_EXP 1
15569: PPUSH
15570: LD_STRING D3b-JMM-2
15572: PPUSH
15573: CALL_OW 88
// if IsOK ( Lisa ) then
15577: LD_EXP 6
15581: PPUSH
15582: CALL_OW 302
15586: IFFALSE 15600
// Say ( Lisa , D3b-Lisa-2 ) ;
15588: LD_EXP 6
15592: PPUSH
15593: LD_STRING D3b-Lisa-2
15595: PPUSH
15596: CALL_OW 88
// end else
15600: GO 15652
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15602: LD_EXP 10
15606: PPUSH
15607: LD_STRING D3b-Sol1-1
15609: PPUSH
15610: LD_STRING D3b-Sol1-1
15612: PPUSH
15613: CALL 4813 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15617: LD_EXP 1
15621: PPUSH
15622: LD_STRING D3b-JMM-2
15624: PPUSH
15625: CALL_OW 88
// if IsOK ( Lisa ) then
15629: LD_EXP 6
15633: PPUSH
15634: CALL_OW 302
15638: IFFALSE 15652
// Say ( Lisa , D3b-Lisa-2 ) ;
15640: LD_EXP 6
15644: PPUSH
15645: LD_STRING D3b-Lisa-2
15647: PPUSH
15648: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
15652: LD_INT 22
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 1
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 26
15674: PUSH
15675: LD_INT 1
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: LD_INT 25
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 25
15697: PUSH
15698: LD_INT 2
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 25
15707: PUSH
15708: LD_INT 3
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 25
15717: PUSH
15718: LD_INT 4
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 69
15742: PUSH
15743: LD_EXP 1
15747: PUSH
15748: EMPTY
15749: LIST
15750: DIFF
15751: PPUSH
15752: LD_STRING DCa-Sol1-1
15754: PPUSH
15755: LD_STRING DCa-Sol1-1
15757: PPUSH
15758: CALL 4813 0 3
// Say ( JMM , DCb-JMM-1 ) ;
15762: LD_EXP 1
15766: PPUSH
15767: LD_STRING DCb-JMM-1
15769: PPUSH
15770: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
15774: LD_INT 22
15776: PUSH
15777: LD_INT 1
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 21
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 26
15796: PUSH
15797: LD_INT 1
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: LD_INT 25
15809: PUSH
15810: LD_INT 1
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 25
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 3
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 25
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 69
15864: PUSH
15865: LD_EXP 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: DIFF
15873: PPUSH
15874: LD_STRING DCb-Sol1-1
15876: PPUSH
15877: LD_STRING DCb-Sol1-1
15879: PPUSH
15880: CALL 4813 0 3
// Say ( JMM , DCb-JMM-2 ) ;
15884: LD_EXP 1
15888: PPUSH
15889: LD_STRING DCb-JMM-2
15891: PPUSH
15892: CALL_OW 88
// secondAttack = 1 ;
15896: LD_ADDR_EXP 33
15900: PUSH
15901: LD_INT 1
15903: ST_TO_ADDR
// end ;
15904: END
// every 0 0$01 trigger JMMArrive = 1 do
15905: LD_EXP 37
15909: PUSH
15910: LD_INT 1
15912: EQUAL
15913: IFFALSE 15993
15915: GO 15917
15917: DISABLE
// begin wait ( 3 3$0 ) ;
15918: LD_INT 6300
15920: PPUSH
15921: CALL_OW 67
// DialogueOn ;
15925: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
15929: LD_EXP 22
15933: PPUSH
15934: LD_STRING D4-Pow-1
15936: PPUSH
15937: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
15941: LD_EXP 1
15945: PPUSH
15946: LD_STRING D4-JMM-1
15948: PPUSH
15949: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
15953: LD_EXP 22
15957: PPUSH
15958: LD_STRING D4-Pow-2
15960: PPUSH
15961: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
15965: LD_EXP 1
15969: PPUSH
15970: LD_STRING D4-JMM-2
15972: PPUSH
15973: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
15977: LD_EXP 22
15981: PPUSH
15982: LD_STRING D4-Pow-3
15984: PPUSH
15985: CALL_OW 94
// DialogueOff ;
15989: CALL_OW 7
// end ;
15993: END
// every 0 0$01 trigger JMMArrive = 1 do
15994: LD_EXP 37
15998: PUSH
15999: LD_INT 1
16001: EQUAL
16002: IFFALSE 16034
16004: GO 16006
16006: DISABLE
// begin wait ( 8 8$0 ) ;
16007: LD_INT 16800
16009: PPUSH
16010: CALL_OW 67
// DialogueOn ;
16014: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16018: LD_EXP 22
16022: PPUSH
16023: LD_STRING D4a-Pow-1
16025: PPUSH
16026: CALL_OW 94
// DialogueOff ;
16030: CALL_OW 7
// end ;
16034: END
// every 0 0$01 trigger JMMArrive = 1 do
16035: LD_EXP 37
16039: PUSH
16040: LD_INT 1
16042: EQUAL
16043: IFFALSE 16071
16045: GO 16047
16047: DISABLE
// begin wait ( 18 18$0 ) ;
16048: LD_INT 37800
16050: PPUSH
16051: CALL_OW 67
// PrepareSikorsky ;
16055: CALL 3397 0 0
// SikorskyArrive = 1 ;
16059: LD_ADDR_EXP 17
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// PrepareSikorskyArmy ;
16067: CALL 3537 0 0
// end ;
16071: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
16072: LD_EXP 16
16076: PPUSH
16077: LD_INT 5
16079: PPUSH
16080: CALL_OW 308
16084: IFFALSE 16276
16086: GO 16088
16088: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
16089: LD_EXP 16
16093: PPUSH
16094: CALL_OW 87
// DialogueOn ;
16098: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16102: LD_EXP 15
16106: PPUSH
16107: LD_STRING D5-Sik-1
16109: PPUSH
16110: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16114: LD_EXP 1
16118: PPUSH
16119: LD_STRING D5-JMM-1a
16121: PPUSH
16122: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16126: LD_EXP 15
16130: PPUSH
16131: LD_STRING D5-Sik-2
16133: PPUSH
16134: CALL_OW 88
// case query ( QSikorski ) of 1 :
16138: LD_STRING QSikorski
16140: PPUSH
16141: CALL_OW 97
16145: PUSH
16146: LD_INT 1
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16154
16152: GO 16177
16154: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16155: LD_EXP 15
16159: PPUSH
16160: LD_STRING D5a-Sik-1
16162: PPUSH
16163: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
16167: LD_ADDR_EXP 18
16171: PUSH
16172: LD_INT 2100
16174: ST_TO_ADDR
// end ; 2 :
16175: GO 16264
16177: LD_INT 2
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16208
16185: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16186: LD_EXP 15
16190: PPUSH
16191: LD_STRING D5b-Sik-1
16193: PPUSH
16194: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16198: LD_ADDR_EXP 18
16202: PUSH
16203: LD_INT 10500
16205: ST_TO_ADDR
// end ; 3 :
16206: GO 16264
16208: LD_INT 3
16210: DOUBLE
16211: EQUAL
16212: IFTRUE 16216
16214: GO 16263
16216: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16217: LD_EXP 15
16221: PPUSH
16222: LD_STRING D5c-Sik-1
16224: PPUSH
16225: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16229: LD_EXP 1
16233: PPUSH
16234: LD_STRING D5c-JMM-1
16236: PPUSH
16237: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16241: LD_EXP 15
16245: PPUSH
16246: LD_STRING D5c-Sik-2
16248: PPUSH
16249: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16253: LD_ADDR_EXP 18
16257: PUSH
16258: LD_INT 10500
16260: ST_TO_ADDR
// end ; end ;
16261: GO 16264
16263: POP
// DialogueOff ;
16264: CALL_OW 7
// timerStatus = 1 ;
16268: LD_ADDR_EXP 34
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// end ;
16276: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16277: LD_EXP 18
16281: PUSH
16282: LD_INT 35
16284: LESS
16285: IFFALSE 16333
16287: GO 16289
16289: DISABLE
// begin timerStatus = 0 ;
16290: LD_ADDR_EXP 34
16294: PUSH
16295: LD_INT 0
16297: ST_TO_ADDR
// DialogueOn ;
16298: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16302: LD_EXP 15
16306: PPUSH
16307: LD_STRING D6-Sik-1
16309: PPUSH
16310: CALL_OW 88
// DialogueOff ;
16314: CALL_OW 7
// SikorskyAI = 1 ;
16318: LD_ADDR_EXP 19
16322: PUSH
16323: LD_INT 1
16325: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16326: LD_STRING M2
16328: PPUSH
16329: CALL_OW 337
// end ;
16333: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16334: LD_EXP 16
16338: PPUSH
16339: LD_INT 18
16341: PPUSH
16342: CALL_OW 308
16346: IFFALSE 16430
16348: GO 16350
16350: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16351: LD_EXP 15
16355: PPUSH
16356: LD_STRING D7-Sik-1
16358: PPUSH
16359: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16363: LD_EXP 1
16367: PPUSH
16368: LD_INT 24
16370: PPUSH
16371: CALL_OW 308
16375: PUSH
16376: LD_EXP 1
16380: PPUSH
16381: CALL_OW 310
16385: OR
16386: IFFALSE 16410
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16388: LD_EXP 15
16392: PPUSH
16393: LD_STRING D7a-Sik-1
16395: PPUSH
16396: CALL_OW 88
// SikorskyStatus = 1 ;
16400: LD_ADDR_EXP 20
16404: PUSH
16405: LD_INT 1
16407: ST_TO_ADDR
// end else
16408: GO 16430
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16410: LD_EXP 15
16414: PPUSH
16415: LD_STRING D7b-Sik-1
16417: PPUSH
16418: CALL_OW 88
// SikorskyStatus = 2 ;
16422: LD_ADDR_EXP 20
16426: PUSH
16427: LD_INT 2
16429: ST_TO_ADDR
// end ; end ;
16430: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
16431: LD_EXP 35
16435: PUSH
16436: LD_INT 1
16438: EQUAL
16439: IFFALSE 16548
16441: GO 16443
16443: DISABLE
16444: LD_INT 0
16446: PPUSH
// begin enable ;
16447: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
16448: LD_ADDR_VAR 0 1
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_INT 3
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PPUSH
16463: CALL_OW 69
16467: PUSH
16468: FOR_IN
16469: IFFALSE 16496
// if IsInArea ( i , RussianEscape ) then
16471: LD_VAR 0 1
16475: PPUSH
16476: LD_INT 22
16478: PPUSH
16479: CALL_OW 308
16483: IFFALSE 16494
// RemoveUnit ( i ) ;
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL_OW 64
16494: GO 16468
16496: POP
16497: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
16498: LD_ADDR_VAR 0 1
16502: PUSH
16503: LD_INT 22
16505: PUSH
16506: LD_INT 6
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16546
// if IsInArea ( i , RussianEscape ) then
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 22
16528: PPUSH
16529: CALL_OW 308
16533: IFFALSE 16544
// RemoveUnit ( i ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 64
16544: GO 16518
16546: POP
16547: POP
// end ; end_of_file
16548: PPOPN 1
16550: END
// on BuildingComplete ( building ) do var tmp , un ;
16551: LD_INT 0
16553: PPUSH
16554: PPUSH
// begin if GetSide ( building ) = 3 then
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 255
16564: PUSH
16565: LD_INT 3
16567: EQUAL
16568: IFFALSE 16973
// begin if GetBType ( building ) = b_depot then
16570: LD_VAR 0 1
16574: PPUSH
16575: CALL_OW 266
16579: PUSH
16580: LD_INT 0
16582: EQUAL
16583: IFFALSE 16651
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
16585: LD_VAR 0 1
16589: PPUSH
16590: CALL_OW 274
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_INT 5000
16600: PPUSH
16601: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 274
16614: PPUSH
16615: LD_INT 2
16617: PPUSH
16618: LD_INT 5000
16620: PPUSH
16621: CALL_OW 277
// SetBName ( building , konev ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_STRING konev
16632: PPUSH
16633: CALL_OW 500
// ruDepot = building ;
16637: LD_ADDR_EXP 27
16641: PUSH
16642: LD_VAR 0 1
16646: ST_TO_ADDR
// BuildRussianBase ;
16647: CALL 5418 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
16651: LD_VAR 0 1
16655: PPUSH
16656: CALL_OW 266
16660: PUSH
16661: LD_INT 0
16663: EQUAL
16664: PUSH
16665: LD_VAR 0 1
16669: PPUSH
16670: CALL_OW 266
16674: PUSH
16675: LD_INT 2
16677: EQUAL
16678: OR
16679: PUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 266
16689: PUSH
16690: LD_INT 4
16692: EQUAL
16693: OR
16694: IFFALSE 16705
// ComUpgrade ( building ) ;
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 146
// if GetBType ( building ) = b_lab then
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 266
16714: PUSH
16715: LD_INT 6
16717: EQUAL
16718: IFFALSE 16769
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 10
16727: PPUSH
16728: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
16732: LD_VAR 0 1
16736: PPUSH
16737: LD_INT 12
16739: PPUSH
16740: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
16744: LD_INT 3
16746: PPUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: LD_INT 3
16754: PPUSH
16755: CALL 5973 0 3
// ruLab = building ;
16759: LD_ADDR_EXP 28
16763: PUSH
16764: LD_VAR 0 1
16768: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
16769: LD_VAR 0 1
16773: PPUSH
16774: CALL_OW 266
16778: PUSH
16779: LD_INT 32
16781: EQUAL
16782: IFFALSE 16900
// begin uc_side = 3 ;
16784: LD_ADDR_OWVAR 20
16788: PUSH
16789: LD_INT 3
16791: ST_TO_ADDR
// uc_nation = 3 ;
16792: LD_ADDR_OWVAR 21
16796: PUSH
16797: LD_INT 3
16799: ST_TO_ADDR
// hc_gallery =  ;
16800: LD_ADDR_OWVAR 33
16804: PUSH
16805: LD_STRING 
16807: ST_TO_ADDR
// hc_name =  ;
16808: LD_ADDR_OWVAR 26
16812: PUSH
16813: LD_STRING 
16815: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16816: LD_INT 0
16818: PPUSH
16819: LD_INT 1
16821: PPUSH
16822: LD_EXP 24
16826: PPUSH
16827: LD_EXP 25
16831: PPUSH
16832: CALL_OW 12
16836: PPUSH
16837: CALL_OW 380
// un = CreateHuman ;
16841: LD_ADDR_VAR 0 3
16845: PUSH
16846: CALL_OW 44
16850: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
16851: LD_VAR 0 3
16855: PPUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16865: LD_VAR 0 1
16869: PPUSH
16870: LD_INT 43
16872: PUSH
16873: LD_INT 44
16875: PUSH
16876: LD_INT 46
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_INT 3
16889: PPUSH
16890: CALL_OW 12
16894: ARRAY
16895: PPUSH
16896: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
16900: LD_VAR 0 1
16904: PPUSH
16905: CALL_OW 266
16909: PUSH
16910: LD_INT 33
16912: EQUAL
16913: IFFALSE 16950
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16915: LD_VAR 0 1
16919: PPUSH
16920: LD_INT 43
16922: PUSH
16923: LD_INT 44
16925: PUSH
16926: LD_INT 46
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 1
16936: PPUSH
16937: LD_INT 3
16939: PPUSH
16940: CALL_OW 12
16944: ARRAY
16945: PPUSH
16946: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 266
16959: PUSH
16960: LD_INT 24
16962: EQUAL
16963: IFFALSE 16973
// russianAI = 1 ;
16965: LD_ADDR_EXP 26
16969: PUSH
16970: LD_INT 1
16972: ST_TO_ADDR
// end ; end ;
16973: PPOPN 3
16975: END
// on UpgradeComplete ( building ) do var i ;
16976: LD_INT 0
16978: PPUSH
// begin if GetSide ( building ) = 3 then
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 255
16988: PUSH
16989: LD_INT 3
16991: EQUAL
16992: IFFALSE 17173
// begin if GetBType ( building ) = b_factory then
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 266
17003: PUSH
17004: LD_INT 3
17006: EQUAL
17007: IFFALSE 17074
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17009: LD_ADDR_VAR 0 2
17013: PUSH
17014: LD_INT 22
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 25
17026: PUSH
17027: LD_INT 3
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PPUSH
17038: CALL_OW 69
17042: PUSH
17043: FOR_IN
17044: IFFALSE 17062
// ComEnterUnit ( i , building ) ;
17046: LD_VAR 0 2
17050: PPUSH
17051: LD_VAR 0 1
17055: PPUSH
17056: CALL_OW 120
17060: GO 17043
17062: POP
17063: POP
// ruFab = building ;
17064: LD_ADDR_EXP 29
17068: PUSH
17069: LD_VAR 0 1
17073: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
17074: LD_VAR 0 1
17078: PPUSH
17079: CALL_OW 266
17083: PUSH
17084: LD_INT 8
17086: EQUAL
17087: IFFALSE 17144
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_INT 22
17096: PUSH
17097: LD_INT 3
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 25
17106: PUSH
17107: LD_INT 4
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PPUSH
17118: CALL_OW 69
17122: PUSH
17123: FOR_IN
17124: IFFALSE 17142
// ComEnterUnit ( i , building ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 120
17140: GO 17123
17142: POP
17143: POP
// if GetBType ( building ) = b_warehouse then
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 266
17153: PUSH
17154: LD_INT 1
17156: EQUAL
17157: IFFALSE 17173
// begin ComEnterUnit ( Borodin , building ) ;
17159: LD_EXP 23
17163: PPUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 120
// end ; end ; end ;
17173: PPOPN 2
17175: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 247
17185: PUSH
17186: LD_INT 2
17188: EQUAL
17189: PUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 263
17199: PUSH
17200: LD_INT 3
17202: EQUAL
17203: AND
17204: PUSH
17205: LD_EXP 39
17209: PUSH
17210: LD_INT 0
17212: EQUAL
17213: AND
17214: IFFALSE 17332
// begin varEvent1 = 1 ;
17216: LD_ADDR_EXP 39
17220: PUSH
17221: LD_INT 1
17223: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
17224: LD_VAR 0 1
17228: PPUSH
17229: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
17233: LD_INT 22
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 21
17245: PUSH
17246: LD_INT 1
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 2
17255: PUSH
17256: LD_INT 25
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 25
17268: PUSH
17269: LD_INT 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 25
17278: PUSH
17279: LD_INT 3
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 4
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: PPUSH
17308: CALL_OW 69
17312: PUSH
17313: LD_EXP 1
17317: PUSH
17318: EMPTY
17319: LIST
17320: DIFF
17321: PPUSH
17322: LD_STRING DC-Sol1-1
17324: PPUSH
17325: LD_STRING DC-FSol1-1
17327: PPUSH
17328: CALL 4813 0 3
// end ; end ; end_of_file
17332: PPOPN 1
17334: END
// every 0 0$1 do
17335: GO 17337
17337: DISABLE
// begin enable ;
17338: ENABLE
// if escapeAvalaible = 0 then
17339: LD_EXP 35
17343: PUSH
17344: LD_INT 0
17346: EQUAL
17347: IFFALSE 17359
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17349: LD_INT 3
17351: PPUSH
17352: LD_INT 6
17354: PPUSH
17355: CALL 6058 0 2
// if escapeAvalaible = 0 then
17359: LD_EXP 35
17363: PUSH
17364: LD_INT 0
17366: EQUAL
17367: IFFALSE 17379
// DefenseBase ( 1 , RussianBaseTerritory ) ;
17369: LD_INT 1
17371: PPUSH
17372: LD_INT 24
17374: PPUSH
17375: CALL 6805 0 2
// if russianAI = 1 then
17379: LD_EXP 26
17383: PUSH
17384: LD_INT 1
17386: EQUAL
17387: IFFALSE 17450
// begin RepairBuilding ( 3 , ruDepot ) ;
17389: LD_INT 3
17391: PPUSH
17392: LD_EXP 27
17396: PPUSH
17397: CALL 7105 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
17401: LD_INT 3
17403: PPUSH
17404: LD_INT 7
17406: PPUSH
17407: LD_INT 6
17409: PPUSH
17410: LD_EXP 28
17414: PPUSH
17415: CALL 7570 0 4
// RebuildBuildings ( 3 , ruDestroyBuilds ) ;
17419: LD_INT 3
17421: PPUSH
17422: LD_EXP 30
17426: PPUSH
17427: CALL 7364 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
17431: LD_INT 6
17433: PPUSH
17434: LD_INT 8
17436: PPUSH
17437: LD_INT 93
17439: PPUSH
17440: LD_INT 93
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL 7836 0 5
// end ; if SikorskyArrive = 1 then
17450: LD_EXP 17
17454: PUSH
17455: LD_INT 1
17457: EQUAL
17458: IFFALSE 17479
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
17460: LD_INT 3
17462: PPUSH
17463: LD_INT 10
17465: PPUSH
17466: LD_INT 53
17468: PPUSH
17469: LD_INT 59
17471: PPUSH
17472: LD_INT 3
17474: PPUSH
17475: CALL 7836 0 5
// end ;
17479: END
// every 0 0$1 trigger SikorskyAI = 1 do
17480: LD_EXP 19
17484: PUSH
17485: LD_INT 1
17487: EQUAL
17488: IFFALSE 17526
17490: GO 17492
17492: DISABLE
// begin enable ;
17493: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
17494: LD_INT 4
17496: PPUSH
17497: LD_INT 10
17499: PPUSH
17500: LD_INT 93
17502: PPUSH
17503: LD_INT 93
17505: PPUSH
17506: LD_INT 3
17508: PPUSH
17509: CALL 7836 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
17513: LD_INT 4
17515: PPUSH
17516: LD_INT 11
17518: PPUSH
17519: LD_INT 3
17521: PPUSH
17522: CALL 13773 0 3
// end ;
17526: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17527: LD_EXP 26
17531: PUSH
17532: LD_INT 1
17534: EQUAL
17535: PUSH
17536: LD_EXP 29
17540: PPUSH
17541: CALL_OW 302
17545: AND
17546: PUSH
17547: LD_EXP 29
17551: PPUSH
17552: CALL_OW 255
17556: PUSH
17557: LD_INT 3
17559: EQUAL
17560: AND
17561: PUSH
17562: LD_INT 22
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 21
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 33
17584: PUSH
17585: LD_INT 3
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: PPUSH
17597: CALL_OW 69
17601: PUSH
17602: LD_INT 0
17604: EQUAL
17605: AND
17606: IFFALSE 17789
17608: GO 17610
17610: DISABLE
// begin enable ;
17611: ENABLE
// if Difficulty = 1 then
17612: LD_OWVAR 67
17616: PUSH
17617: LD_INT 1
17619: EQUAL
17620: IFFALSE 17675
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
17622: LD_INT 3
17624: PPUSH
17625: LD_EXP 29
17629: PPUSH
17630: LD_INT 5
17632: PPUSH
17633: LD_INT 8
17635: PPUSH
17636: CALL_OW 12
17640: PPUSH
17641: LD_INT 1
17643: PPUSH
17644: LD_INT 43
17646: PUSH
17647: LD_INT 43
17649: PUSH
17650: LD_INT 44
17652: PUSH
17653: LD_INT 46
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: PPUSH
17662: LD_INT 1
17664: PPUSH
17665: LD_INT 3
17667: PPUSH
17668: LD_INT 24
17670: PPUSH
17671: CALL 8671 0 8
// if Difficulty = 2 then
17675: LD_OWVAR 67
17679: PUSH
17680: LD_INT 2
17682: EQUAL
17683: IFFALSE 17734
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
17685: LD_INT 3
17687: PPUSH
17688: LD_EXP 29
17692: PPUSH
17693: LD_INT 6
17695: PPUSH
17696: LD_INT 8
17698: PPUSH
17699: CALL_OW 12
17703: PPUSH
17704: LD_INT 1
17706: PPUSH
17707: LD_INT 44
17709: PUSH
17710: LD_INT 44
17712: PUSH
17713: LD_INT 46
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: LD_INT 3
17726: PPUSH
17727: LD_INT 24
17729: PPUSH
17730: CALL 8671 0 8
// if Difficulty = 3 then
17734: LD_OWVAR 67
17738: PUSH
17739: LD_INT 3
17741: EQUAL
17742: IFFALSE 17789
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
17744: LD_INT 3
17746: PPUSH
17747: LD_EXP 29
17751: PPUSH
17752: LD_INT 7
17754: PPUSH
17755: LD_INT 8
17757: PPUSH
17758: CALL_OW 12
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: LD_INT 44
17768: PUSH
17769: LD_INT 46
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: LD_INT 3
17781: PPUSH
17782: LD_INT 24
17784: PPUSH
17785: CALL 8671 0 8
// end ; end_of_file
17789: END
// every 0 0$1 trigger firstAttack = 1 do
17790: LD_EXP 32
17794: PUSH
17795: LD_INT 1
17797: EQUAL
17798: IFFALSE 17904
17800: GO 17802
17802: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
17803: LD_INT 6
17805: PPUSH
17806: LD_INT 3
17808: PPUSH
17809: LD_INT 5
17811: PPUSH
17812: LD_INT 6
17814: PPUSH
17815: CALL_OW 12
17819: PUSH
17820: LD_INT 5
17822: PPUSH
17823: LD_INT 6
17825: PPUSH
17826: CALL_OW 12
17830: PUSH
17831: LD_INT 5
17833: PPUSH
17834: LD_INT 6
17836: PPUSH
17837: CALL_OW 12
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: LIST
17846: PUSH
17847: LD_OWVAR 67
17851: ARRAY
17852: PPUSH
17853: LD_INT 0
17855: PPUSH
17856: LD_INT 0
17858: PPUSH
17859: LD_INT 0
17861: PPUSH
17862: LD_INT 0
17864: PPUSH
17865: LD_EXP 24
17869: PPUSH
17870: LD_EXP 25
17874: PPUSH
17875: CALL_OW 12
17879: PPUSH
17880: LD_INT 16
17882: PPUSH
17883: LD_INT 7
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: LD_INT 1
17891: PPUSH
17892: LD_INT 3
17894: PPUSH
17895: CALL_OW 12
17899: PPUSH
17900: CALL 9235 0 12
17904: END
// every 0 0$1 trigger firstAttack = 1 do
17905: LD_EXP 32
17909: PUSH
17910: LD_INT 1
17912: EQUAL
17913: IFFALSE 18013
17915: GO 17917
17917: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
17918: LD_INT 16
17920: PPUSH
17921: LD_INT 6
17923: PPUSH
17924: LD_INT 5
17926: PPUSH
17927: LD_INT 8
17929: PPUSH
17930: CALL_OW 12
17934: PUSH
17935: LD_INT 6
17937: PPUSH
17938: LD_INT 9
17940: PPUSH
17941: CALL_OW 12
17945: PUSH
17946: LD_INT 7
17948: PPUSH
17949: LD_INT 9
17951: PPUSH
17952: CALL_OW 12
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: LIST
17961: PUSH
17962: LD_OWVAR 67
17966: ARRAY
17967: PPUSH
17968: LD_EXP 24
17972: PPUSH
17973: LD_EXP 25
17977: PPUSH
17978: CALL_OW 12
17982: PPUSH
17983: LD_INT 3
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: LD_INT 3
17991: PPUSH
17992: LD_INT 44
17994: PUSH
17995: LD_INT 46
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PPUSH
18002: EMPTY
18003: PPUSH
18004: EMPTY
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: CALL 12095 0 11
18013: END
// every 3 3$1 trigger firstAttack = 1 do
18014: LD_EXP 32
18018: PUSH
18019: LD_INT 1
18021: EQUAL
18022: IFFALSE 18128
18024: GO 18026
18026: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18027: LD_INT 6
18029: PPUSH
18030: LD_INT 3
18032: PPUSH
18033: LD_INT 5
18035: PPUSH
18036: LD_INT 6
18038: PPUSH
18039: CALL_OW 12
18043: PUSH
18044: LD_INT 5
18046: PPUSH
18047: LD_INT 6
18049: PPUSH
18050: CALL_OW 12
18054: PUSH
18055: LD_INT 5
18057: PPUSH
18058: LD_INT 6
18060: PPUSH
18061: CALL_OW 12
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: PUSH
18071: LD_OWVAR 67
18075: ARRAY
18076: PPUSH
18077: LD_INT 0
18079: PPUSH
18080: LD_INT 0
18082: PPUSH
18083: LD_INT 0
18085: PPUSH
18086: LD_INT 0
18088: PPUSH
18089: LD_EXP 24
18093: PPUSH
18094: LD_EXP 25
18098: PPUSH
18099: CALL_OW 12
18103: PPUSH
18104: LD_INT 16
18106: PPUSH
18107: LD_INT 7
18109: PPUSH
18110: LD_INT 1
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: LD_INT 3
18118: PPUSH
18119: CALL_OW 12
18123: PPUSH
18124: CALL 9235 0 12
18128: END
// every 3 3$1 trigger firstAttack = 1 do
18129: LD_EXP 32
18133: PUSH
18134: LD_INT 1
18136: EQUAL
18137: IFFALSE 18245
18139: GO 18141
18141: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18142: LD_INT 16
18144: PPUSH
18145: LD_INT 6
18147: PPUSH
18148: LD_INT 5
18150: PPUSH
18151: LD_INT 8
18153: PPUSH
18154: CALL_OW 12
18158: PUSH
18159: LD_INT 6
18161: PPUSH
18162: LD_INT 9
18164: PPUSH
18165: CALL_OW 12
18169: PUSH
18170: LD_INT 7
18172: PPUSH
18173: LD_INT 9
18175: PPUSH
18176: CALL_OW 12
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: PUSH
18186: LD_OWVAR 67
18190: ARRAY
18191: PPUSH
18192: LD_EXP 24
18196: PPUSH
18197: LD_EXP 25
18201: PPUSH
18202: CALL_OW 12
18206: PPUSH
18207: LD_INT 3
18209: PPUSH
18210: LD_INT 1
18212: PPUSH
18213: LD_INT 3
18215: PPUSH
18216: LD_INT 42
18218: PUSH
18219: LD_INT 43
18221: PUSH
18222: LD_INT 44
18224: PUSH
18225: LD_INT 46
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: PPUSH
18234: EMPTY
18235: PPUSH
18236: EMPTY
18237: PPUSH
18238: LD_INT 1
18240: PPUSH
18241: CALL 12095 0 11
18245: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
18246: LD_EXP 32
18250: PUSH
18251: LD_INT 1
18253: EQUAL
18254: PUSH
18255: LD_EXP 37
18259: PUSH
18260: LD_INT 0
18262: EQUAL
18263: AND
18264: IFFALSE 18370
18266: GO 18268
18268: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18269: LD_INT 6
18271: PPUSH
18272: LD_INT 3
18274: PPUSH
18275: LD_INT 5
18277: PPUSH
18278: LD_INT 6
18280: PPUSH
18281: CALL_OW 12
18285: PUSH
18286: LD_INT 5
18288: PPUSH
18289: LD_INT 6
18291: PPUSH
18292: CALL_OW 12
18296: PUSH
18297: LD_INT 5
18299: PPUSH
18300: LD_INT 6
18302: PPUSH
18303: CALL_OW 12
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: PUSH
18313: LD_OWVAR 67
18317: ARRAY
18318: PPUSH
18319: LD_INT 0
18321: PPUSH
18322: LD_INT 0
18324: PPUSH
18325: LD_INT 0
18327: PPUSH
18328: LD_INT 0
18330: PPUSH
18331: LD_EXP 24
18335: PPUSH
18336: LD_EXP 25
18340: PPUSH
18341: CALL_OW 12
18345: PPUSH
18346: LD_INT 16
18348: PPUSH
18349: LD_INT 7
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: LD_INT 1
18357: PPUSH
18358: LD_INT 3
18360: PPUSH
18361: CALL_OW 12
18365: PPUSH
18366: CALL 9235 0 12
18370: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
18371: LD_EXP 32
18375: PUSH
18376: LD_INT 1
18378: EQUAL
18379: PUSH
18380: LD_EXP 37
18384: PUSH
18385: LD_INT 0
18387: EQUAL
18388: AND
18389: IFFALSE 18493
18391: GO 18393
18393: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18394: LD_INT 16
18396: PPUSH
18397: LD_INT 6
18399: PPUSH
18400: LD_INT 5
18402: PPUSH
18403: LD_INT 8
18405: PPUSH
18406: CALL_OW 12
18410: PUSH
18411: LD_INT 6
18413: PPUSH
18414: LD_INT 9
18416: PPUSH
18417: CALL_OW 12
18421: PUSH
18422: LD_INT 7
18424: PPUSH
18425: LD_INT 9
18427: PPUSH
18428: CALL_OW 12
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: PUSH
18438: LD_OWVAR 67
18442: ARRAY
18443: PPUSH
18444: LD_EXP 24
18448: PPUSH
18449: LD_EXP 25
18453: PPUSH
18454: CALL_OW 12
18458: PPUSH
18459: LD_INT 3
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: LD_INT 3
18467: PPUSH
18468: LD_INT 43
18470: PUSH
18471: LD_INT 44
18473: PUSH
18474: LD_INT 46
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: LIST
18481: PPUSH
18482: EMPTY
18483: PPUSH
18484: EMPTY
18485: PPUSH
18486: LD_INT 1
18488: PPUSH
18489: CALL 12095 0 11
18493: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
18494: LD_EXP 32
18498: PUSH
18499: LD_INT 1
18501: EQUAL
18502: PUSH
18503: LD_EXP 37
18507: PUSH
18508: LD_INT 0
18510: EQUAL
18511: AND
18512: IFFALSE 18612
18514: GO 18516
18516: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
18517: LD_INT 16
18519: PPUSH
18520: LD_INT 6
18522: PPUSH
18523: LD_INT 5
18525: PPUSH
18526: LD_INT 8
18528: PPUSH
18529: CALL_OW 12
18533: PUSH
18534: LD_INT 6
18536: PPUSH
18537: LD_INT 9
18539: PPUSH
18540: CALL_OW 12
18544: PUSH
18545: LD_INT 7
18547: PPUSH
18548: LD_INT 9
18550: PPUSH
18551: CALL_OW 12
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: PUSH
18561: LD_OWVAR 67
18565: ARRAY
18566: PPUSH
18567: LD_EXP 24
18571: PPUSH
18572: LD_EXP 25
18576: PPUSH
18577: CALL_OW 12
18581: PPUSH
18582: LD_INT 3
18584: PPUSH
18585: LD_INT 1
18587: PPUSH
18588: LD_INT 3
18590: PPUSH
18591: LD_INT 44
18593: PUSH
18594: LD_INT 46
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PPUSH
18601: EMPTY
18602: PPUSH
18603: EMPTY
18604: PPUSH
18605: LD_INT 1
18607: PPUSH
18608: CALL 12095 0 11
18612: END
// every 1 1$1 trigger secondAttack = 1 do
18613: LD_EXP 33
18617: PUSH
18618: LD_INT 1
18620: EQUAL
18621: IFFALSE 18727
18623: GO 18625
18625: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18626: LD_INT 6
18628: PPUSH
18629: LD_INT 3
18631: PPUSH
18632: LD_INT 4
18634: PPUSH
18635: LD_INT 7
18637: PPUSH
18638: CALL_OW 12
18642: PUSH
18643: LD_INT 6
18645: PPUSH
18646: LD_INT 7
18648: PPUSH
18649: CALL_OW 12
18653: PUSH
18654: LD_INT 6
18656: PPUSH
18657: LD_INT 10
18659: PPUSH
18660: CALL_OW 12
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_OWVAR 67
18674: ARRAY
18675: PPUSH
18676: LD_INT 0
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 0
18684: PPUSH
18685: LD_INT 0
18687: PPUSH
18688: LD_EXP 24
18692: PPUSH
18693: LD_EXP 25
18697: PPUSH
18698: CALL_OW 12
18702: PPUSH
18703: LD_INT 16
18705: PPUSH
18706: LD_INT 7
18708: PPUSH
18709: LD_INT 1
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: LD_INT 3
18717: PPUSH
18718: CALL_OW 12
18722: PPUSH
18723: CALL 9235 0 12
18727: END
// every 1 1$1 trigger secondAttack = 1 do
18728: LD_EXP 33
18732: PUSH
18733: LD_INT 1
18735: EQUAL
18736: IFFALSE 18840
18738: GO 18740
18740: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
18741: LD_INT 16
18743: PPUSH
18744: LD_INT 6
18746: PPUSH
18747: LD_INT 5
18749: PPUSH
18750: LD_INT 8
18752: PPUSH
18753: CALL_OW 12
18757: PUSH
18758: LD_INT 6
18760: PPUSH
18761: LD_INT 9
18763: PPUSH
18764: CALL_OW 12
18768: PUSH
18769: LD_INT 7
18771: PPUSH
18772: LD_INT 9
18774: PPUSH
18775: CALL_OW 12
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PUSH
18785: LD_OWVAR 67
18789: ARRAY
18790: PPUSH
18791: LD_EXP 24
18795: PPUSH
18796: LD_EXP 25
18800: PPUSH
18801: CALL_OW 12
18805: PPUSH
18806: LD_INT 3
18808: PPUSH
18809: LD_INT 1
18811: PPUSH
18812: LD_INT 3
18814: PPUSH
18815: LD_INT 43
18817: PUSH
18818: LD_INT 44
18820: PUSH
18821: LD_INT 46
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: LIST
18828: PPUSH
18829: EMPTY
18830: PPUSH
18831: EMPTY
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: CALL 12095 0 11
18840: END
// every 20 20$0 trigger SikorskyArrive = 0 do
18841: LD_EXP 17
18845: PUSH
18846: LD_INT 0
18848: EQUAL
18849: IFFALSE 18955
18851: GO 18853
18853: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18854: LD_INT 6
18856: PPUSH
18857: LD_INT 3
18859: PPUSH
18860: LD_INT 8
18862: PPUSH
18863: LD_INT 9
18865: PPUSH
18866: CALL_OW 12
18870: PUSH
18871: LD_INT 7
18873: PPUSH
18874: LD_INT 10
18876: PPUSH
18877: CALL_OW 12
18881: PUSH
18882: LD_INT 8
18884: PPUSH
18885: LD_INT 10
18887: PPUSH
18888: CALL_OW 12
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: LD_OWVAR 67
18902: ARRAY
18903: PPUSH
18904: LD_INT 0
18906: PPUSH
18907: LD_INT 0
18909: PPUSH
18910: LD_INT 0
18912: PPUSH
18913: LD_INT 0
18915: PPUSH
18916: LD_EXP 24
18920: PPUSH
18921: LD_EXP 25
18925: PPUSH
18926: CALL_OW 12
18930: PPUSH
18931: LD_INT 16
18933: PPUSH
18934: LD_INT 7
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: LD_INT 3
18945: PPUSH
18946: CALL_OW 12
18950: PPUSH
18951: CALL 9235 0 12
18955: END
// every 20 20$0 trigger SikorskyArrive = 0 do
18956: LD_EXP 17
18960: PUSH
18961: LD_INT 0
18963: EQUAL
18964: IFFALSE 19064
18966: GO 18968
18968: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
18969: LD_INT 16
18971: PPUSH
18972: LD_INT 6
18974: PPUSH
18975: LD_INT 5
18977: PPUSH
18978: LD_INT 8
18980: PPUSH
18981: CALL_OW 12
18985: PUSH
18986: LD_INT 6
18988: PPUSH
18989: LD_INT 9
18991: PPUSH
18992: CALL_OW 12
18996: PUSH
18997: LD_INT 7
18999: PPUSH
19000: LD_INT 9
19002: PPUSH
19003: CALL_OW 12
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: PUSH
19013: LD_OWVAR 67
19017: ARRAY
19018: PPUSH
19019: LD_EXP 24
19023: PPUSH
19024: LD_EXP 25
19028: PPUSH
19029: CALL_OW 12
19033: PPUSH
19034: LD_INT 3
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: LD_INT 3
19042: PPUSH
19043: LD_INT 44
19045: PUSH
19046: LD_INT 46
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: EMPTY
19054: PPUSH
19055: EMPTY
19056: PPUSH
19057: LD_INT 1
19059: PPUSH
19060: CALL 12095 0 11
19064: END
// every 25 25$0 trigger SikorskyArrive = 0 do
19065: LD_EXP 17
19069: PUSH
19070: LD_INT 0
19072: EQUAL
19073: IFFALSE 19179
19075: GO 19077
19077: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19078: LD_INT 6
19080: PPUSH
19081: LD_INT 3
19083: PPUSH
19084: LD_INT 8
19086: PPUSH
19087: LD_INT 9
19089: PPUSH
19090: CALL_OW 12
19094: PUSH
19095: LD_INT 7
19097: PPUSH
19098: LD_INT 10
19100: PPUSH
19101: CALL_OW 12
19105: PUSH
19106: LD_INT 8
19108: PPUSH
19109: LD_INT 10
19111: PPUSH
19112: CALL_OW 12
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: PUSH
19122: LD_OWVAR 67
19126: ARRAY
19127: PPUSH
19128: LD_INT 0
19130: PPUSH
19131: LD_INT 0
19133: PPUSH
19134: LD_INT 0
19136: PPUSH
19137: LD_INT 0
19139: PPUSH
19140: LD_EXP 24
19144: PPUSH
19145: LD_EXP 25
19149: PPUSH
19150: CALL_OW 12
19154: PPUSH
19155: LD_INT 16
19157: PPUSH
19158: LD_INT 7
19160: PPUSH
19161: LD_INT 1
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: LD_INT 3
19169: PPUSH
19170: CALL_OW 12
19174: PPUSH
19175: CALL 9235 0 12
19179: END
// every 25 25$0 trigger SikorskyArrive = 0 do
19180: LD_EXP 17
19184: PUSH
19185: LD_INT 0
19187: EQUAL
19188: IFFALSE 19288
19190: GO 19192
19192: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19193: LD_INT 16
19195: PPUSH
19196: LD_INT 6
19198: PPUSH
19199: LD_INT 5
19201: PPUSH
19202: LD_INT 8
19204: PPUSH
19205: CALL_OW 12
19209: PUSH
19210: LD_INT 6
19212: PPUSH
19213: LD_INT 9
19215: PPUSH
19216: CALL_OW 12
19220: PUSH
19221: LD_INT 7
19223: PPUSH
19224: LD_INT 9
19226: PPUSH
19227: CALL_OW 12
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: LD_OWVAR 67
19241: ARRAY
19242: PPUSH
19243: LD_EXP 24
19247: PPUSH
19248: LD_EXP 25
19252: PPUSH
19253: CALL_OW 12
19257: PPUSH
19258: LD_INT 3
19260: PPUSH
19261: LD_INT 1
19263: PPUSH
19264: LD_INT 3
19266: PPUSH
19267: LD_INT 44
19269: PUSH
19270: LD_INT 46
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: EMPTY
19278: PPUSH
19279: EMPTY
19280: PPUSH
19281: LD_INT 1
19283: PPUSH
19284: CALL 12095 0 11
19288: END
// every 35 35$0 trigger SikorskyArrive = 0 do
19289: LD_EXP 17
19293: PUSH
19294: LD_INT 0
19296: EQUAL
19297: IFFALSE 19403
19299: GO 19301
19301: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19302: LD_INT 6
19304: PPUSH
19305: LD_INT 3
19307: PPUSH
19308: LD_INT 8
19310: PPUSH
19311: LD_INT 9
19313: PPUSH
19314: CALL_OW 12
19318: PUSH
19319: LD_INT 7
19321: PPUSH
19322: LD_INT 10
19324: PPUSH
19325: CALL_OW 12
19329: PUSH
19330: LD_INT 8
19332: PPUSH
19333: LD_INT 10
19335: PPUSH
19336: CALL_OW 12
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: LD_OWVAR 67
19350: ARRAY
19351: PPUSH
19352: LD_INT 0
19354: PPUSH
19355: LD_INT 0
19357: PPUSH
19358: LD_INT 0
19360: PPUSH
19361: LD_INT 0
19363: PPUSH
19364: LD_EXP 24
19368: PPUSH
19369: LD_EXP 25
19373: PPUSH
19374: CALL_OW 12
19378: PPUSH
19379: LD_INT 16
19381: PPUSH
19382: LD_INT 7
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: LD_INT 1
19390: PPUSH
19391: LD_INT 3
19393: PPUSH
19394: CALL_OW 12
19398: PPUSH
19399: CALL 9235 0 12
19403: END
// every 35 35$0 trigger SikorskyArrive = 0 do
19404: LD_EXP 17
19408: PUSH
19409: LD_INT 0
19411: EQUAL
19412: IFFALSE 19512
19414: GO 19416
19416: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
19417: LD_INT 16
19419: PPUSH
19420: LD_INT 6
19422: PPUSH
19423: LD_INT 5
19425: PPUSH
19426: LD_INT 8
19428: PPUSH
19429: CALL_OW 12
19433: PUSH
19434: LD_INT 6
19436: PPUSH
19437: LD_INT 9
19439: PPUSH
19440: CALL_OW 12
19444: PUSH
19445: LD_INT 7
19447: PPUSH
19448: LD_INT 9
19450: PPUSH
19451: CALL_OW 12
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: PUSH
19461: LD_OWVAR 67
19465: ARRAY
19466: PPUSH
19467: LD_EXP 24
19471: PPUSH
19472: LD_EXP 25
19476: PPUSH
19477: CALL_OW 12
19481: PPUSH
19482: LD_INT 3
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: LD_INT 3
19490: PPUSH
19491: LD_INT 44
19493: PUSH
19494: LD_INT 46
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PPUSH
19501: EMPTY
19502: PPUSH
19503: EMPTY
19504: PPUSH
19505: LD_INT 1
19507: PPUSH
19508: CALL 12095 0 11
19512: END
// every 0 0$1 trigger timerStatus = 1 do
19513: LD_EXP 34
19517: PUSH
19518: LD_INT 1
19520: EQUAL
19521: IFFALSE 19558
19523: GO 19525
19525: DISABLE
// begin enable ;
19526: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
19527: LD_ADDR_OWVAR 47
19531: PUSH
19532: LD_STRING #Am08-1
19534: PUSH
19535: LD_EXP 18
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
19544: LD_ADDR_EXP 18
19548: PUSH
19549: LD_EXP 18
19553: PUSH
19554: LD_INT 35
19556: MINUS
19557: ST_TO_ADDR
// end ; end_of_file
19558: END
// every 1 1$0 do
19559: GO 19561
19561: DISABLE
// begin if supply <= 13 and supply > 7 then
19562: LD_EXP 38
19566: PUSH
19567: LD_INT 13
19569: LESSEQUAL
19570: PUSH
19571: LD_EXP 38
19575: PUSH
19576: LD_INT 7
19578: GREATER
19579: AND
19580: IFFALSE 19603
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
19582: LD_INT 3
19584: PPUSH
19585: LD_INT 5
19587: PPUSH
19588: CALL_OW 12
19592: PPUSH
19593: LD_INT 5
19595: PPUSH
19596: LD_INT 1
19598: PPUSH
19599: CALL_OW 55
// if supply <= 7 and supply > 4 then
19603: LD_EXP 38
19607: PUSH
19608: LD_INT 7
19610: LESSEQUAL
19611: PUSH
19612: LD_EXP 38
19616: PUSH
19617: LD_INT 4
19619: GREATER
19620: AND
19621: IFFALSE 19644
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
19623: LD_INT 3
19625: PPUSH
19626: LD_INT 5
19628: PPUSH
19629: CALL_OW 12
19633: PPUSH
19634: LD_INT 20
19636: PPUSH
19637: LD_INT 1
19639: PPUSH
19640: CALL_OW 55
// if supply <= 4 and supply > 0 then
19644: LD_EXP 38
19648: PUSH
19649: LD_INT 4
19651: LESSEQUAL
19652: PUSH
19653: LD_EXP 38
19657: PUSH
19658: LD_INT 0
19660: GREATER
19661: AND
19662: IFFALSE 19685
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
19664: LD_INT 3
19666: PPUSH
19667: LD_INT 5
19669: PPUSH
19670: CALL_OW 12
19674: PPUSH
19675: LD_INT 21
19677: PPUSH
19678: LD_INT 1
19680: PPUSH
19681: CALL_OW 55
// if supply > 0 then
19685: LD_EXP 38
19689: PUSH
19690: LD_INT 0
19692: GREATER
19693: IFFALSE 19710
// begin supply = supply - 1 ;
19695: LD_ADDR_EXP 38
19699: PUSH
19700: LD_EXP 38
19704: PUSH
19705: LD_INT 1
19707: MINUS
19708: ST_TO_ADDR
// enable ;
19709: ENABLE
// end ; end ; end_of_file
19710: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
19711: LD_EXP 37
19715: PUSH
19716: LD_INT 1
19718: EQUAL
19719: PUSH
19720: LD_EXP 1
19724: PPUSH
19725: CALL_OW 301
19729: AND
19730: IFFALSE 19742
19732: GO 19734
19734: DISABLE
// YouLost ( JMM ) ;
19735: LD_STRING JMM
19737: PPUSH
19738: CALL_OW 104
19742: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
19743: LD_EXP 17
19747: PUSH
19748: LD_INT 1
19750: EQUAL
19751: PUSH
19752: LD_EXP 15
19756: PPUSH
19757: CALL_OW 301
19761: AND
19762: IFFALSE 19794
19764: GO 19766
19766: DISABLE
// begin DialogueOn ;
19767: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
19771: LD_EXP 22
19775: PPUSH
19776: LD_STRING D8a-Pow-1
19778: PPUSH
19779: CALL_OW 94
// DialogueOff ;
19783: CALL_OW 7
// YouLost ( Dismissed ) ;
19787: LD_STRING Dismissed
19789: PPUSH
19790: CALL_OW 104
// end ;
19794: END
// every 0 0$1 trigger IsDead ( amDepot ) do
19795: LD_EXP 36
19799: PPUSH
19800: CALL_OW 301
19804: IFFALSE 19816
19806: GO 19808
19808: DISABLE
// YouLost ( Destroyed ) ; end_of_file
19809: LD_STRING Destroyed
19811: PPUSH
19812: CALL_OW 104
19816: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
19817: LD_EXP 23
19821: PPUSH
19822: CALL_OW 301
19826: IFFALSE 20171
19828: GO 19830
19830: DISABLE
19831: LD_INT 0
19833: PPUSH
// begin russianAI = 0 ;
19834: LD_ADDR_EXP 26
19838: PUSH
19839: LD_INT 0
19841: ST_TO_ADDR
// escapeAvalaible = 1 ;
19842: LD_ADDR_EXP 35
19846: PUSH
19847: LD_INT 1
19849: ST_TO_ADDR
// InGameOn ;
19850: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19854: LD_INT 3
19856: PPUSH
19857: LD_INT 1
19859: PPUSH
19860: LD_INT 1
19862: PPUSH
19863: LD_INT 0
19865: PPUSH
19866: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19870: LD_INT 6
19872: PPUSH
19873: LD_INT 1
19875: PPUSH
19876: LD_INT 1
19878: PPUSH
19879: LD_INT 0
19881: PPUSH
19882: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19886: LD_INT 3
19888: PPUSH
19889: LD_INT 1
19891: PPUSH
19892: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19896: LD_INT 97
19898: PPUSH
19899: LD_INT 91
19901: PPUSH
19902: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19906: LD_INT 22
19908: PUSH
19909: LD_INT 3
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 21
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PPUSH
19930: CALL_OW 69
19934: PPUSH
19935: CALL_OW 121
// wait ( 0 0$01 ) ;
19939: LD_INT 35
19941: PPUSH
19942: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19946: LD_INT 22
19948: PUSH
19949: LD_INT 3
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 21
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PPUSH
19970: CALL_OW 69
19974: PPUSH
19975: LD_INT 124
19977: PPUSH
19978: LD_INT 98
19980: PPUSH
19981: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19985: LD_INT 22
19987: PUSH
19988: LD_INT 6
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 21
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PPUSH
20009: CALL_OW 69
20013: PPUSH
20014: CALL_OW 121
// wait ( 0 0$01 ) ;
20018: LD_INT 35
20020: PPUSH
20021: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20025: LD_INT 22
20027: PUSH
20028: LD_INT 6
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 21
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 69
20053: PPUSH
20054: LD_INT 124
20056: PPUSH
20057: LD_INT 98
20059: PPUSH
20060: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20064: LD_INT 22
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 21
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PPUSH
20088: CALL_OW 69
20092: PPUSH
20093: LD_INT 124
20095: PPUSH
20096: LD_INT 98
20098: PPUSH
20099: CALL_OW 114
// wait ( 0 0$4 ) ;
20103: LD_INT 140
20105: PPUSH
20106: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
20110: LD_INT 124
20112: PPUSH
20113: LD_INT 98
20115: PPUSH
20116: CALL_OW 84
// if SikorskyStatus = 1 then
20120: LD_EXP 20
20124: PUSH
20125: LD_INT 1
20127: EQUAL
20128: IFFALSE 20142
// begin Say ( Sikorski , D9-Sik-1 ) ;
20130: LD_EXP 15
20134: PPUSH
20135: LD_STRING D9-Sik-1
20137: PPUSH
20138: CALL_OW 88
// end ; if SikorskyStatus = 2 then
20142: LD_EXP 20
20146: PUSH
20147: LD_INT 2
20149: EQUAL
20150: IFFALSE 20171
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
20152: LD_EXP 22
20156: PPUSH
20157: LD_STRING D8b-Pow-1
20159: PPUSH
20160: CALL_OW 94
// YouLost ( Dismissed ) ;
20164: LD_STRING Dismissed
20166: PPUSH
20167: CALL_OW 104
// end ; end ;
20171: PPOPN 1
20173: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
20174: LD_INT 23
20176: PUSH
20177: LD_INT 3
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 21
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 24
20196: PUSH
20197: LD_INT 250
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: PPUSH
20209: CALL_OW 69
20213: PUSH
20214: LD_INT 0
20216: EQUAL
20217: IFFALSE 20226
20219: GO 20221
20221: DISABLE
// FinishMission ;
20222: CALL 20227 0 0
20226: END
// export function FinishMission ; var tmp ; begin
20227: LD_INT 0
20229: PPUSH
20230: PPUSH
// AddMedal ( med1 , 1 ) ;
20231: LD_STRING med1
20233: PPUSH
20234: LD_INT 1
20236: PPUSH
20237: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
20241: LD_STRING med2
20243: PPUSH
20244: LD_INT 1
20246: PPUSH
20247: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
20251: LD_STRING perfect
20253: PPUSH
20254: LD_INT 1
20256: PPUSH
20257: CALL_OW 101
// GiveMedals ( Main ) ;
20261: LD_STRING Main
20263: PPUSH
20264: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20268: LD_INT 22
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 23
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 21
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 2
20300: PUSH
20301: LD_INT 25
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 25
20313: PUSH
20314: LD_INT 2
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 25
20323: PUSH
20324: LD_INT 3
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 25
20333: PUSH
20334: LD_INT 4
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PPUSH
20354: CALL_OW 69
20358: PPUSH
20359: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20363: LD_EXP 1
20367: PPUSH
20368: LD_EXP 40
20372: PUSH
20373: LD_STRING JMM
20375: STR
20376: PPUSH
20377: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20381: LD_EXP 2
20385: PPUSH
20386: LD_EXP 40
20390: PUSH
20391: LD_STRING Brown
20393: STR
20394: PPUSH
20395: CALL 5922 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20399: LD_EXP 3
20403: PPUSH
20404: LD_EXP 40
20408: PUSH
20409: LD_STRING Donaldson
20411: STR
20412: PPUSH
20413: CALL 5922 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20417: LD_EXP 4
20421: PPUSH
20422: LD_EXP 40
20426: PUSH
20427: LD_STRING Bobby
20429: STR
20430: PPUSH
20431: CALL 5922 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20435: LD_EXP 5
20439: PPUSH
20440: LD_EXP 40
20444: PUSH
20445: LD_STRING Cyrus
20447: STR
20448: PPUSH
20449: CALL 5922 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20453: LD_EXP 6
20457: PPUSH
20458: LD_EXP 40
20462: PUSH
20463: LD_STRING Lisa
20465: STR
20466: PPUSH
20467: CALL 5922 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20471: LD_EXP 7
20475: PPUSH
20476: LD_EXP 40
20480: PUSH
20481: LD_STRING Frank
20483: STR
20484: PPUSH
20485: CALL 5922 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20489: LD_EXP 8
20493: PPUSH
20494: LD_EXP 40
20498: PUSH
20499: LD_STRING Gladstone
20501: STR
20502: PPUSH
20503: CALL 5922 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20507: LD_EXP 9
20511: PPUSH
20512: LD_EXP 40
20516: PUSH
20517: LD_STRING Kikuchi
20519: STR
20520: PPUSH
20521: CALL 5922 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20525: LD_EXP 13
20529: PPUSH
20530: LD_EXP 40
20534: PUSH
20535: LD_STRING Denis
20537: STR
20538: PPUSH
20539: CALL 5922 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20543: LD_EXP 14
20547: PPUSH
20548: LD_EXP 40
20552: PUSH
20553: LD_STRING Joan
20555: STR
20556: PPUSH
20557: CALL 5922 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20561: LD_EXP 12
20565: PPUSH
20566: LD_EXP 40
20570: PUSH
20571: LD_STRING Houten
20573: STR
20574: PPUSH
20575: CALL 5922 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
20579: LD_INT 50
20581: PUSH
20582: EMPTY
20583: LIST
20584: PUSH
20585: LD_INT 22
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 21
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: LD_INT 25
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 25
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 25
20630: PUSH
20631: LD_INT 3
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 25
20640: PUSH
20641: LD_INT 4
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: PPUSH
20661: CALL_OW 69
20665: PUSH
20666: LD_EXP 1
20670: PUSH
20671: LD_EXP 2
20675: PUSH
20676: LD_EXP 3
20680: PUSH
20681: LD_EXP 4
20685: PUSH
20686: LD_EXP 5
20690: PUSH
20691: LD_EXP 6
20695: PUSH
20696: LD_EXP 7
20700: PUSH
20701: LD_EXP 8
20705: PUSH
20706: LD_EXP 9
20710: PUSH
20711: LD_EXP 13
20715: PUSH
20716: LD_EXP 14
20720: PUSH
20721: LD_EXP 12
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: DIFF
20740: PPUSH
20741: LD_STRING 08_other_survivors
20743: PPUSH
20744: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
20748: LD_INT 23
20750: PPUSH
20751: CALL 20764 0 1
// YouWin ;
20755: CALL_OW 103
// end ;
20759: LD_VAR 0 1
20763: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20764: LD_INT 0
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
// gammaBase = [ ] ;
20770: LD_ADDR_VAR 0 4
20774: PUSH
20775: EMPTY
20776: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20777: LD_ADDR_VAR 0 5
20781: PUSH
20782: LD_VAR 0 1
20786: PPUSH
20787: LD_INT 22
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 21
20799: PUSH
20800: LD_INT 3
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 50
20809: PUSH
20810: EMPTY
20811: LIST
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: PPUSH
20818: CALL_OW 70
20822: ST_TO_ADDR
// for i in buildings do
20823: LD_ADDR_VAR 0 3
20827: PUSH
20828: LD_VAR 0 5
20832: PUSH
20833: FOR_IN
20834: IFFALSE 21171
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20836: LD_VAR 0 3
20840: PPUSH
20841: CALL_OW 266
20845: PUSH
20846: LD_INT 6
20848: PUSH
20849: LD_INT 7
20851: PUSH
20852: LD_INT 8
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: IN
20860: IFFALSE 20974
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20862: LD_ADDR_VAR 0 4
20866: PUSH
20867: LD_VAR 0 4
20871: PUSH
20872: LD_VAR 0 3
20876: PPUSH
20877: CALL_OW 266
20881: PUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: CALL_OW 250
20891: PUSH
20892: LD_VAR 0 3
20896: PPUSH
20897: CALL_OW 251
20901: PUSH
20902: LD_VAR 0 3
20906: PPUSH
20907: CALL_OW 254
20911: PUSH
20912: LD_VAR 0 3
20916: PPUSH
20917: CALL_OW 267
20921: PUSH
20922: LD_VAR 0 3
20926: PPUSH
20927: CALL_OW 248
20931: PUSH
20932: LD_VAR 0 3
20936: PPUSH
20937: LD_INT 1
20939: PPUSH
20940: CALL_OW 268
20944: PUSH
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 2
20952: PPUSH
20953: CALL_OW 268
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: ADD
20971: ST_TO_ADDR
20972: GO 21169
// if GetBType ( i ) in [ b_bunker ] then
20974: LD_VAR 0 3
20978: PPUSH
20979: CALL_OW 266
20983: PUSH
20984: LD_INT 32
20986: PUSH
20987: EMPTY
20988: LIST
20989: IN
20990: IFFALSE 21087
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20992: LD_ADDR_VAR 0 4
20996: PUSH
20997: LD_VAR 0 4
21001: PUSH
21002: LD_VAR 0 3
21006: PPUSH
21007: CALL_OW 266
21011: PUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: CALL_OW 250
21021: PUSH
21022: LD_VAR 0 3
21026: PPUSH
21027: CALL_OW 251
21031: PUSH
21032: LD_VAR 0 3
21036: PPUSH
21037: CALL_OW 254
21041: PUSH
21042: LD_VAR 0 3
21046: PPUSH
21047: CALL_OW 267
21051: PUSH
21052: LD_VAR 0 3
21056: PPUSH
21057: CALL_OW 248
21061: PUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: CALL_OW 269
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: ADD
21084: ST_TO_ADDR
21085: GO 21169
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
21087: LD_ADDR_VAR 0 4
21091: PUSH
21092: LD_VAR 0 4
21096: PUSH
21097: LD_VAR 0 3
21101: PPUSH
21102: CALL_OW 266
21106: PUSH
21107: LD_VAR 0 3
21111: PPUSH
21112: CALL_OW 250
21116: PUSH
21117: LD_VAR 0 3
21121: PPUSH
21122: CALL_OW 251
21126: PUSH
21127: LD_VAR 0 3
21131: PPUSH
21132: CALL_OW 254
21136: PUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: CALL_OW 267
21146: PUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: CALL_OW 248
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: PUSH
21165: EMPTY
21166: LIST
21167: ADD
21168: ST_TO_ADDR
// end ;
21169: GO 20833
21171: POP
21172: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
21173: LD_VAR 0 4
21177: PPUSH
21178: LD_STRING 08_GammaBase
21180: PPUSH
21181: CALL_OW 39
// end ;
21185: LD_VAR 0 2
21189: RET
